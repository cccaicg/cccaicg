{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n        java.awt.GridBagConstraints gridBagConstraints;\n\n        keyboardScrollPane = new javax.swing.JScrollPane();\n        keyboardPanel = new javax.swing.JPanel();\n        keyLabel = new javax.swing.JLabel();\n        descriptionLabel = new javax.swing.JLabel();\n        horizontalSeparator = new javax.swing.JSeparator();\n        verticalSeparator = new javax.swing.JSeparator();\n        aKeyLabel = new javax.swing.JLabel();\n        aDescriptionLabel = new javax.swing.JLabel();\n        aShiftKeyLabel = new javax.swing.JLabel();\n        aShiftDescriptionLabel = new javax.swing.JLabel();\n        tKeyLabel = new javax.swing.JLabel();\n        tDescriptionLabel = new javax.swing.JLabel();\n        tShiftKeyLabel = new javax.swing.JLabel();\n        tShiftDescriptionLabel = new javax.swing.JLabel();\n        fKeyLabel = new javax.swing.JLabel();\n        fDescriptionLabel = new javax.swing.JLabel();\n        fShiftKeyLabel = new javax.swing.JLabel();\n        fShiftDescriptionLabel = new javax.swing.JLabel();\n        dKeyLabel = new javax.swing.JLabel();\n        dDescriptionLabel = new javax.swing.JLabel();\n        sKeyLabel = new javax.swing.JLabel();\n        sDescriptionLabel = new javax.swing.JLabel();\n        eKeyLabel = new javax.swing.JLabel();\n        eDescriptionLabel = new javax.swing.JLabel();\n        rKeyLabel = new javax.swing.JLabel();\n        rDescriptionLabel = new javax.swing.JLabel();\n        spaceKeyLabel = new javax.swing.JLabel();\n        spaceDescriptionLabel = new javax.swing.JLabel();\n        spaceCtrlKeyLabel = new javax.swing.JLabel();\n        spaceCtrlDescriptionLabel = new javax.swing.JLabel();\n        gKeyLabel = new javax.swing.JLabel();\n        gDescriptionLabel = new javax.swing.JLabel();\n        gShiftKeyLabel = new javax.swing.JLabel();\n        gShiftDescriptionLabel = new javax.swing.JLabel();\n\n        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));\n\n        keyboardPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Keyboard shortcuts\"));\n        keyboardPanel.setLayout(new java.awt.GridBagLayout());\n\n        keyLabel.setFont(new java.awt.Font(\"Bitstream Vera Sans\", 1, 13)); // NOI18N\n        keyLabel.setText(\"Key\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(keyLabel, gridBagConstraints);\n\n        descriptionLabel.setFont(new java.awt.Font(\"Bitstream Vera Sans\", 1, 13));\n        descriptionLabel.setText(\"Description\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(descriptionLabel, gridBagConstraints);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.gridwidth = 3;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        keyboardPanel.add(horizontalSeparator, gridBagConstraints);\n\n        verticalSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.gridheight = 16;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        keyboardPanel.add(verticalSeparator, gridBagConstraints);\n\n        aKeyLabel.setText(\"A\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(aKeyLabel, gridBagConstraints);\n\n        aDescriptionLabel.setText(\"Next album\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(aDescriptionLabel, gridBagConstraints);\n\n        aShiftKeyLabel.setText(\"Shift-A\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(aShiftKeyLabel, gridBagConstraints);\n\n        aShiftDescriptionLabel.setText(\"Previous album\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(aShiftDescriptionLabel, gridBagConstraints);\n\n        tKeyLabel.setText(\"T\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(tKeyLabel, gridBagConstraints);\n\n        tDescriptionLabel.setText(\"Next track\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(tDescriptionLabel, gridBagConstraints);\n\n        tShiftKeyLabel.setText(\"Shift-T\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 5;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(tShiftKeyLabel, gridBagConstraints);\n\n        tShiftDescriptionLabel.setText(\"Previous track\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 5;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(tShiftDescriptionLabel, gridBagConstraints);\n\n        fKeyLabel.setText(\"F\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 8;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(fKeyLabel, gridBagConstraints);\n\n        fDescriptionLabel.setText(\"Next file\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 8;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(fDescriptionLabel, gridBagConstraints);\n\n        fShiftKeyLabel.setText(\"Shift-F\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 9;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(fShiftKeyLabel, gridBagConstraints);\n\n        fShiftDescriptionLabel.setText(\"Previous file\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 9;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(fShiftDescriptionLabel, gridBagConstraints);\n\n        dKeyLabel.setText(\"D/Delete\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 11;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(dKeyLabel, gridBagConstraints);\n\n        dDescriptionLabel.setText(\"Mark all selected files or files in selected albums/tracks as wrongly identified. This is only necessary when a file was supposed to match another track\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 11;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(dDescriptionLabel, gridBagConstraints);\n\n        sKeyLabel.setText(\"S/Enter\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 10;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(sKeyLabel, gridBagConstraints);\n\n        sDescriptionLabel.setText(\"Mark all selected files or files in selected albums/tracks as correctly identified\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 10;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(sDescriptionLabel, gridBagConstraints);\n\n        eKeyLabel.setText(\"E\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 13;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(eKeyLabel, gridBagConstraints);\n\n        eDescriptionLabel.setText(\"Expand all nodes in current album/group\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 13;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(eDescriptionLabel, gridBagConstraints);\n\n        rKeyLabel.setText(\"R/Escape\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 12;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(rKeyLabel, gridBagConstraints);\n\n        rDescriptionLabel.setText(\"Unmark all selected files or files in selected albums/tracks\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 12;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(rDescriptionLabel, gridBagConstraints);\n\n        spaceKeyLabel.setText(\"Space\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 14;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(spaceKeyLabel, gridBagConstraints);\n\n        spaceDescriptionLabel.setText(\"Commit changes for marked files in active album/group\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 14;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(spaceDescriptionLabel, gridBagConstraints);\n\n        spaceCtrlKeyLabel.setText(\"Ctrl-Space\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 15;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(spaceCtrlKeyLabel, gridBagConstraints);\n\n        spaceCtrlDescriptionLabel.setText(\"Commit changes for all marked files in every album/group\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 15;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(spaceCtrlDescriptionLabel, gridBagConstraints);\n\n        gKeyLabel.setText(\"G\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 6;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(gKeyLabel, gridBagConstraints);\n\n        gDescriptionLabel.setText(\"Next group\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 6;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(gDescriptionLabel, gridBagConstraints);\n\n        gShiftKeyLabel.setText(\"Shift-G\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 7;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(gShiftKeyLabel, gridBagConstraints);\n\n        gShiftDescriptionLabel.setText(\"Previous group\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 7;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        keyboardPanel.add(gShiftDescriptionLabel, gridBagConstraints);\n\n        keyboardScrollPane.setViewportView(keyboardPanel);\n\n        add(keyboardScrollPane);\n}", "path": "gui\\src\\net\\exent\\locutus\\gui\\Help.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "//GEN-LAST:event_quitButtonActionPerformed\n", "func_signal": "private void setMetadataButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_setMetadataButtonActionPerformed\n\t\tfor (Metafile file : selected_metafiles) {\n\t\t\t/* artist */\n\t\t\tif (artistCheckBox.isSelected())\n\t\t\t\tfile.setArtist(artistValue.getText());\n\t\t\tif (artistSortCheckBox.isSelected())\n\t\t\t\tfile.setArtistSortName(artistSortValue.getText());\n\t\t\tif (artistMBIDCheckBox.isSelected())\n\t\t\t\tfile.setArtistMBID(artistMBIDValue.getText());\n\n\t\t\t/* track */\n\t\t\tif (titleCheckBox.isSelected())\n\t\t\t\tfile.setTitle(titleValue.getText());\n\t\t\ttry {\n\t\t\t\tif (tracknumberCheckBox.isSelected())\n\t\t\t\t\tfile.setTracknumber(Integer.parseInt(tracknumberValue.getText()));\n\t\t\t} catch (NumberFormatException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tif (genreCheckBox.isSelected())\n\t\t\t\tfile.setGenre(genreValue.getText());\n\t\t\tif (trackMBIDCheckBox.isSelected())\n\t\t\t\tfile.setTrackMBID(trackMBIDValue.getText());\n\n\t\t\t/* album */\n\t\t\tif (albumCheckBox.isSelected())\n\t\t\t\tfile.setAlbum(albumValue.getText());\n\t\t\tif (releasedCheckBox.isSelected())\n\t\t\t\tfile.setReleased(releasedValue.getText());\n\t\t\tif (albumMBIDCheckBox.isSelected())\n\t\t\t\tfile.setAlbumMBID(albumMBIDValue.getText());\n\n\t\t\t/* album artist */\n\t\t\tif (albumArtistCheckBox.isSelected())\n\t\t\t\tfile.setAlbumArtist(albumArtistValue.getText());\n\t\t\tif (albumArtistSortCheckBox.isSelected())\n\t\t\t\tfile.setAlbumArtistSortName(albumArtistSortValue.getText());\n\t\t\tif (albumArtistMBIDCheckBox.isSelected())\n\t\t\t\tfile.setAlbumArtistMBID(albumArtistMBIDValue.getText());\n\n\t\t\t/* pinned */\n\t\t\tfile.setPinned(pinnedCheckBox.isSelected());\n\n\t\t\t/* set status to SAVE_METADATA */\n\t\t\tfile.setStatus(Metafile.SAVE_METADATA);\n\t\t}\n\t\tif (matching.isVisible())\n\t\t\tmatching.repaint();\n\t\tif (uncompared.isVisible())\n\t\t\tuncompared.repaint();\n\n\t}", "path": "gui\\src\\net\\exent\\locutus\\gui\\Locutus.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "//GEN-LAST:event_openButtonActionPerformed\n", "func_signal": "private void quitButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_quitButtonActionPerformed\n\t\tstatusPoller.exit();\n\t\ttry {\n\t\t\tDatabase.disconnect();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tthis.dispose();\n\t\tSystem.exit(0);\n\t}", "path": "gui\\src\\net\\exent\\locutus\\gui\\Locutus.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "//GEN-LAST:event_resetCompareButtonActionPerformed\n", "func_signal": "private void resetDaemonButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_resetDaemonButtonActionPerformed\n\t    try {\n\t\t    Database.resetSetting(\"max_group_size\");\n\t\t    Database.resetSetting(\"cache_lifetime\");\n\t\t    Database.resetSetting(\"run_interval\");\n\t\t    Database.resetSetting(\"musicbrainz_query_interval\");\n\t\t    Database.resetSetting(\"audioscrobbler_query_interval\");\n\t\t    updateSettings();\n\t    } catch (SQLException e) {\n\t\t    e.printStackTrace();\n\t    }\n    }", "path": "gui\\src\\net\\exent\\locutus\\gui\\Settings.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "/** Creates new form Locutus */\n", "func_signal": "public Locutus()", "code": "{\n\tinitComponents();\n\t/* make tooltips stay a bit longer */\n\tToolTipManager.sharedInstance().setDismissDelay(90000);\n\tstatusPoller.start();\n}", "path": "gui\\src\\net\\exent\\locutus\\gui\\Locutus.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n\tjava.awt.EventQueue.invokeLater(new Runnable() {\n\n\t\tpublic void run() {\n\t\t\tnew Locutus().setVisible(true);\n\t\t}\n\t});\n}", "path": "gui\\src\\net\\exent\\locutus\\gui\\Locutus.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "//GEN-LAST:event_resetLocationsButtonActionPerformed\n", "func_signal": "private void saveSettingsButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_saveSettingsButtonActionPerformed\n\t    try {\n\t\t    Database.setSetting(\"cache_lifetime\", \"\" + daemonCacheLifetimeSlider.getValue());\n\t\t    Database.setSetting(\"album_weight\", \"\" + weightAlbumSlider.getValue());\n\t\t    Database.setSetting(\"allow_group_duplicates\", \"\" + optionAllowGroupDuplicatesCheckBox.isSelected());\n\t\t    Database.setSetting(\"artist_weight\", \"\" + weightArtistSlider.getValue());\n\t\t    Database.setSetting(\"audioscrobbler_artist_tag_url\", audioscrobblerArtistURLTextField.getText());\n\t\t    Database.setSetting(\"audioscrobbler_query_interval\", \"\" + daemonAudioscrobblerQueryIntervalSlider.getValue());\n\t\t    Database.setSetting(\"audioscrobbler_track_tag_url\", audioscrobblerTrackURLTextField.getText());\n\t\t    Database.setSetting(\"combine_groups\", \"\" + optionCombineGroupsCheckBox.isSelected());\n\t\t    Database.setSetting(\"combine_threshold\", \"\" + ((double) compareCombineThresholdSlider.getValue() / 100.0));\n\t\t    Database.setSetting(\"compare_relative_score\", \"\" + ((double) compareCompareRelativeScoreSlider.getValue() / 100.0));\n\t\t    Database.setSetting(\"dry_run\", \"\" + optionDryRunCheckBox.isSelected());\n\t\t    Database.setSetting(\"duplicate_directory\", duplicateDirectoryTextField.getText());\n\t\t    Database.setSetting(\"duration_limit\", \"\" + compareDurationLimitSlider.getValue());\n\t\t    Database.setSetting(\"duration_must_match\", \"\" + optionDurationMustMatchCheckBox.isSelected());\n\t\t    Database.setSetting(\"duration_weight\", \"\" + weightDurationSlider.getValue());\n\t\t    Database.setSetting(\"filename_format\", filenameFormatTextField.getText());\n\t\t    Database.setSetting(\"filename_illegal_characters\", filenameIllegalCharactersTextField.getText());\n\t\t    Database.setSetting(\"input_directory\", inputDirectoryTextField.getText());\n\t\t    Database.setSetting(\"lookup_genre\", \"\" + optionLookupGenreCheckBox.isSelected());\n\t\t    Database.setSetting(\"match_min_score\", \"\" + ((double) compareMatchMinScoreSlider.getValue() / 100.0));\n\t\t    Database.setSetting(\"max_diff_best_score\", \"\" + ((double) compareMaxDiffBestScoreSlider.getValue() / 100.0));\n\t\t    Database.setSetting(\"max_group_size\", \"\" + daemonMaxGroupSizeSlider.getValue());\n\t\t    Database.setSetting(\"lookup_mbid\", \"\" + optionLookupMBIDCheckBox.isSelected());\n\t\t    Database.setSetting(\"musicbrainz_search_url\", musicBrainzSearchURLTextField.getText());\n\t\t    Database.setSetting(\"musicbrainz_query_interval\", \"\" + daemonMusicBrainzQueryIntervalSlider.getValue());\n\t\t    Database.setSetting(\"only_save_complete_albums\", \"\" + optionOnlySaveCompleteAlbumsCheckBox.isSelected());\n\t\t    Database.setSetting(\"only_save_if_all_match\", \"\" + optionOnlySaveIfAllMatchCheckBox.isSelected());\n\t\t    Database.setSetting(\"output_directory\", outputDirectoryTextField.getText());\n\t\t    Database.setSetting(\"musicbrainz_release_url\", musicBrainzReleaseURLTextField.getText());\n\t\t    Database.setSetting(\"run_interval\", \"\" + daemonRunIntervalSlider.getValue());\n\t\t    Database.setSetting(\"title_weight\", \"\" + weightTitleSlider.getValue());\n\t\t    Database.setSetting(\"tracknumber_weight\", \"\" + weightTracknumberSlider.getValue());\n\n\t\t    DefaultTableModel table = (DefaultTableModel) otherSettingsTable.getModel();\n\t\t    for (int r = 0; r < table.getRowCount(); ++r) {\n\t\t\t    String key = (String) table.getValueAt(r, 0);\n\t\t\t    String value = (String) table.getValueAt(r, 1);\n\t\t\t    if (value == null)\n\t\t\t\t    value = \"\";\n\t\t\t    try {\n\t\t\t\t    if (key != null && !key.equals(\"\"))\n\t\t\t\t\t    Database.setSetting(key, value);\n\t\t\t    } catch (SQLException e) {\n\t\t\t\t    e.printStackTrace();\n\t\t\t    }\n\t\t    }\n\t\t    updateSettings();\n\t    } catch (SQLException e) {\n\t\t    e.printStackTrace();\n\t    }\n    }", "path": "gui\\src\\net\\exent\\locutus\\gui\\Settings.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void connectButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_connectButtonActionPerformed\n\t\ttry {\n\t\t\tsetProgress(0.0, \"Not connected\");\n\t\t\tconnectFrame.setVisible(false);\n\t\t\tDatabase.disconnect();\n\t\t\tString db = driverCombo.getSelectedItem().toString();\n\t\t\tdb += hostTextField.getText();\n\t\t\tdb += \"/\";\n\t\t\tdb += databaseTextField.getText();\n\t\t\tDatabase.connectPostgreSQL(db, usernameTextField.getText(), new String(passwordPasswordField.getPassword()));\n\t\t\ttabPane.setSelectedComponent(matching);\n\t\t\tmatching.updateTree();\n\t\t\tstatusPoller.checkStatus();\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tJOptionPane.showMessageDialog(this, e);\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\tJOptionPane.showMessageDialog(this, e);\n\t\t\te.printStackTrace();\n\t\t}\n\t}", "path": "gui\\src\\net\\exent\\locutus\\gui\\Locutus.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "//GEN-LAST:event_uncomparedTreeKeyPressed\n", "func_signal": "private void uncomparedTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)", "code": "{//GEN-FIRST:event_uncomparedTreeValueChanged\n\t\tTreePath[] paths = uncomparedTree.getSelectionPaths();\n\t\tif (paths == null) {\n\t\t\tLocutus.clearMetadata();\n\t\t\treturn;\n\t\t}\n\t\tList<Metafile> metafiles = new ArrayList<Metafile>();\n\t\tfor (TreePath path : paths) {\n\t\t\tDefaultMutableTreeNode node = ((DefaultMutableTreeNode) path.getLastPathComponent());\n\t\t\tObject object = node.getUserObject();\n\t\t\tif (object instanceof Group) {\n\t\t\t\tEnumeration files = node.children();\n\t\t\t\twhile (files.hasMoreElements()) {\n\t\t\t\t\tobject = ((DefaultMutableTreeNode) files.nextElement()).getUserObject();\n\t\t\t\t\tif (object instanceof Metafile && !metafiles.contains((Metafile) object))\n\t\t\t\t\t\tmetafiles.add((Metafile) object);\n\t\t\t\t}\n\t\t\t} else if (object instanceof Metafile) {\n\t\t\t\tif (!metafiles.contains((Metafile) object))\n\t\t\t\t\tmetafiles.add((Metafile) object);\n\t\t\t}\n\t\t}\n\t\tLocutus.setSelectedMetadatafiles(metafiles);\n\t}", "path": "gui\\src\\net\\exent\\locutus\\gui\\Uncompared.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "/** Creates new form Uncompared */\n", "func_signal": "public Uncompared()", "code": "{\n\tinitComponents();\n\tuncomparedTree.setCellRenderer(new UncomparedCellRenderer());\n}", "path": "gui\\src\\net\\exent\\locutus\\gui\\Uncompared.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "//GEN-LAST:event_updateButtonActionPerformed\n", "func_signal": "private void filterTextFieldKeyPressed(java.awt.event.KeyEvent evt)", "code": "{//GEN-FIRST:event_filterTextFieldKeyPressed\n\t\tif (evt.getKeyCode() == KeyEvent.VK_ENTER)\n\t\t\tupdateButton.doClick();\n\t}", "path": "gui\\src\\net\\exent\\locutus\\gui\\Locutus.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "//GEN-LAST:event_setMetadataButtonActionPerformed\n", "func_signal": "private void updateButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_updateButtonActionPerformed\n\t\tupdateButton.setText(\"Updating...\");\n\t\tComponent active = tabPane.getSelectedComponent();\n\t\tif (active != null) {\n\t\t\t/* hide & show visible component to trigger formComponentShown().\n\t\t\t * XXX: this is a hack, fix it later */\n\t\t\tactive.setVisible(false);\n\t\t\tactive.setVisible(true);\n\t\t}\n\t\tupdateButton.setText(\"Update\");\n\t}", "path": "gui\\src\\net\\exent\\locutus\\gui\\Locutus.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n        java.awt.GridBagConstraints gridBagConstraints;\n\n        connectFrame = new javax.swing.JFrame();\n        driverLabel = new javax.swing.JLabel();\n        driverCombo = new javax.swing.JComboBox();\n        hostLabel = new javax.swing.JLabel();\n        hostTextField = new javax.swing.JTextField();\n        usernameLabel = new javax.swing.JLabel();\n        usernameTextField = new javax.swing.JTextField();\n        passwordLabel = new javax.swing.JLabel();\n        connectButton = new javax.swing.JButton();\n        abortButton = new javax.swing.JButton();\n        databaseLabel = new javax.swing.JLabel();\n        databaseTextField = new javax.swing.JTextField();\n        passwordPasswordField = new javax.swing.JPasswordField();\n        topPanel = new javax.swing.JPanel();\n        filterLabel = new javax.swing.JLabel();\n        filterTextField = new javax.swing.JTextField();\n        updateButton = new javax.swing.JButton();\n        progressBar = new javax.swing.JProgressBar();\n        progressLabel = new javax.swing.JLabel();\n        openButton = new javax.swing.JButton();\n        quitButton = new javax.swing.JButton();\n        tabPane = new javax.swing.JTabbedPane();\n        matching = new net.exent.locutus.gui.Matching();\n        uncompared = new net.exent.locutus.gui.Uncompared();\n        settings = new net.exent.locutus.gui.Settings();\n        help = new net.exent.locutus.gui.Help();\n        metadataPanel = new javax.swing.JPanel();\n        fileFilenameLabel = new javax.swing.JLabel();\n        miscPanel = new javax.swing.JPanel();\n        groupLabel = new javax.swing.JLabel();\n        groupValue = new javax.swing.JTextField();\n        fileIDLabel = new javax.swing.JLabel();\n        fileIDValue = new javax.swing.JTextField();\n        trackIDLabel = new javax.swing.JLabel();\n        trackIDValue = new javax.swing.JTextField();\n        durationLabel = new javax.swing.JLabel();\n        durationValue = new javax.swing.JLabel();\n        bitrateLabel = new javax.swing.JLabel();\n        bitrateValue = new javax.swing.JLabel();\n        channelsLabel = new javax.swing.JLabel();\n        channelsValue = new javax.swing.JLabel();\n        samplerateLabel = new javax.swing.JLabel();\n        samplerateValue = new javax.swing.JLabel();\n        modifiedCheckBox = new javax.swing.JCheckBox();\n        duplicateCheckBox = new javax.swing.JCheckBox();\n        pinnedCheckBox = new javax.swing.JCheckBox();\n        setMetadataButton = new javax.swing.JButton();\n        artistPanel = new javax.swing.JPanel();\n        artistCheckBox = new javax.swing.JCheckBox();\n        artistValue = new javax.swing.JTextField();\n        artistSortCheckBox = new javax.swing.JCheckBox();\n        artistSortValue = new javax.swing.JTextField();\n        artistMBIDCheckBox = new javax.swing.JCheckBox();\n        artistMBIDValue = new javax.swing.JTextField();\n        trackPanel = new javax.swing.JPanel();\n        titleCheckBox = new javax.swing.JCheckBox();\n        titleValue = new javax.swing.JTextField();\n        tracknumberCheckBox = new javax.swing.JCheckBox();\n        tracknumberValue = new javax.swing.JTextField();\n        genreCheckBox = new javax.swing.JCheckBox();\n        genreValue = new javax.swing.JTextField();\n        trackMBIDCheckBox = new javax.swing.JCheckBox();\n        trackMBIDValue = new javax.swing.JTextField();\n        albumPanel = new javax.swing.JPanel();\n        albumCheckBox = new javax.swing.JCheckBox();\n        albumValue = new javax.swing.JTextField();\n        releasedCheckBox = new javax.swing.JCheckBox();\n        releasedValue = new javax.swing.JTextField();\n        albumMBIDCheckBox = new javax.swing.JCheckBox();\n        albumMBIDValue = new javax.swing.JTextField();\n        albumArtistPanel = new javax.swing.JPanel();\n        albumArtistCheckBox = new javax.swing.JCheckBox();\n        albumArtistValue = new javax.swing.JTextField();\n        albumArtistSortCheckBox = new javax.swing.JCheckBox();\n        albumArtistSortValue = new javax.swing.JTextField();\n        albumArtistMBIDCheckBox = new javax.swing.JCheckBox();\n        albumArtistMBIDValue = new javax.swing.JTextField();\n\n        connectFrame.setTitle(\"Connect to database\");\n        connectFrame.setMinimumSize(new java.awt.Dimension(289, 229));\n        connectFrame.setResizable(false);\n\n        driverLabel.setText(\"Driver\");\n\n        driverCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"jdbc:postgresql://\" }));\n\n        hostLabel.setText(\"Host\");\n\n        hostTextField.setText(\"localhost\");\n        hostTextField.addFocusListener(new java.awt.event.FocusAdapter() {\n                public void focusGained(java.awt.event.FocusEvent evt) {\n                        hostTextFieldFocusGained(evt);\n                }\n                public void focusLost(java.awt.event.FocusEvent evt) {\n                        hostTextFieldFocusLost(evt);\n                }\n        });\n\n        usernameLabel.setText(\"Username\");\n\n        usernameTextField.setText(\"locutus\");\n        usernameTextField.addFocusListener(new java.awt.event.FocusAdapter() {\n                public void focusGained(java.awt.event.FocusEvent evt) {\n                        usernameTextFieldFocusGained(evt);\n                }\n                public void focusLost(java.awt.event.FocusEvent evt) {\n                        usernameTextFieldFocusLost(evt);\n                }\n        });\n\n        passwordLabel.setText(\"Password\");\n\n        connectButton.setMnemonic('C');\n        connectButton.setText(\"Connect\");\n        connectButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        connectButtonActionPerformed(evt);\n                }\n        });\n\n        abortButton.setMnemonic('A');\n        abortButton.setText(\"Abort\");\n        abortButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        abortButtonActionPerformed(evt);\n                }\n        });\n\n        databaseLabel.setText(\"Database\");\n\n        databaseTextField.setText(\"locutus\");\n        databaseTextField.addFocusListener(new java.awt.event.FocusAdapter() {\n                public void focusGained(java.awt.event.FocusEvent evt) {\n                        databaseTextFieldFocusGained(evt);\n                }\n                public void focusLost(java.awt.event.FocusEvent evt) {\n                        databaseTextFieldFocusLost(evt);\n                }\n        });\n\n        passwordPasswordField.addFocusListener(new java.awt.event.FocusAdapter() {\n                public void focusGained(java.awt.event.FocusEvent evt) {\n                        passwordPasswordFieldFocusGained(evt);\n                }\n                public void focusLost(java.awt.event.FocusEvent evt) {\n                        passwordPasswordFieldFocusLost(evt);\n                }\n        });\n\n        javax.swing.GroupLayout connectFrameLayout = new javax.swing.GroupLayout(connectFrame.getContentPane());\n        connectFrame.getContentPane().setLayout(connectFrameLayout);\n        connectFrameLayout.setHorizontalGroup(\n                connectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(connectFrameLayout.createSequentialGroup()\n                        .addContainerGap()\n                        .addGroup(connectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                .addGroup(connectFrameLayout.createSequentialGroup()\n                                        .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                        .addGap(35, 35, 35)\n                                        .addComponent(abortButton, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))\n                                .addGroup(connectFrameLayout.createSequentialGroup()\n                                        .addGroup(connectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                                                .addComponent(passwordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                                .addComponent(usernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                                .addComponent(databaseLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                                .addComponent(hostLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                                .addComponent(driverLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)\n                                        .addGroup(connectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                                                .addComponent(driverCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, 177, Short.MAX_VALUE)\n                                                .addComponent(hostTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)\n                                                .addComponent(databaseTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)\n                                                .addComponent(usernameTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)\n                                                .addComponent(passwordPasswordField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE))))\n                        .addContainerGap())\n        );\n        connectFrameLayout.setVerticalGroup(\n                connectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(connectFrameLayout.createSequentialGroup()\n                        .addContainerGap()\n                        .addGroup(connectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                .addComponent(driverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addComponent(driverCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(connectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                .addComponent(hostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addComponent(hostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(connectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                .addComponent(databaseLabel)\n                                .addComponent(databaseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(connectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(connectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                .addComponent(passwordLabel)\n                                .addComponent(passwordPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)\n                        .addGroup(connectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addComponent(abortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addContainerGap())\n        );\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        setTitle(\"Locutus\");\n\n        topPanel.setLayout(new java.awt.GridBagLayout());\n\n        filterLabel.setText(\"Filter:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        topPanel.add(filterLabel, gridBagConstraints);\n\n        filterTextField.setMinimumSize(new java.awt.Dimension(128, 25));\n        filterTextField.setPreferredSize(new java.awt.Dimension(128, 25));\n        filterTextField.addKeyListener(new java.awt.event.KeyAdapter() {\n                public void keyPressed(java.awt.event.KeyEvent evt) {\n                        filterTextFieldKeyPressed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        topPanel.add(filterTextField, gridBagConstraints);\n\n        updateButton.setMnemonic('U');\n        updateButton.setText(\"Update\");\n        updateButton.setFocusable(false);\n        updateButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        updateButtonActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        topPanel.add(updateButton, gridBagConstraints);\n\n        progressBar.setMaximum(1000);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 3;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        topPanel.add(progressBar, gridBagConstraints);\n\n        progressLabel.setText(\"Not connected\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 4;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        topPanel.add(progressLabel, gridBagConstraints);\n\n        openButton.setMnemonic('C');\n        openButton.setText(\"Connect\");\n        openButton.setFocusable(false);\n        openButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        openButtonActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 5;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        topPanel.add(openButton, gridBagConstraints);\n\n        quitButton.setMnemonic('Q');\n        quitButton.setText(\"Quit\");\n        quitButton.setFocusable(false);\n        quitButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        quitButtonActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 6;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        topPanel.add(quitButton, gridBagConstraints);\n\n        getContentPane().add(topPanel, java.awt.BorderLayout.NORTH);\n\n        tabPane.setMinimumSize(new java.awt.Dimension(400, 200));\n        tabPane.setPreferredSize(new java.awt.Dimension(400, 200));\n        tabPane.addTab(\"Matching\", matching);\n        tabPane.addTab(\"Uncompared\", uncompared);\n\n        settings.setMinimumSize(new java.awt.Dimension(400, 200));\n        tabPane.addTab(\"Settings\", settings);\n        tabPane.addTab(\"Help\", help);\n\n        getContentPane().add(tabPane, java.awt.BorderLayout.CENTER);\n\n        metadataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Metadata\"));\n        metadataPanel.setLayout(new java.awt.GridBagLayout());\n\n        fileFilenameLabel.setText(\"<no files selected>\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.gridwidth = 3;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        metadataPanel.add(fileFilenameLabel, gridBagConstraints);\n\n        miscPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Misc\"));\n        miscPanel.setMaximumSize(new java.awt.Dimension(298, 204));\n        miscPanel.setLayout(new java.awt.GridBagLayout());\n\n        groupLabel.setText(\"Group:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.gridwidth = 4;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(groupLabel, gridBagConstraints);\n\n        groupValue.setEditable(false);\n        groupValue.setToolTipText(\"<html>The group the file[s] belong to.<br />\\nThe value for this field is automatically generated by the daemon using audio format, samplerate, channels and album title or path if album title is not set.<br />\\nIf you wish to group files together manually you should write in the same album title for all of them (you still won't be able to do anything about format, samplerate or channels, though).</html>\");\n        groupValue.setMaximumSize(new java.awt.Dimension(256, 25));\n        groupValue.setMinimumSize(new java.awt.Dimension(256, 25));\n        groupValue.setPreferredSize(new java.awt.Dimension(256, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.gridwidth = 4;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(groupValue, gridBagConstraints);\n\n        fileIDLabel.setText(\"File ID:\");\n        fileIDLabel.setMaximumSize(new java.awt.Dimension(63, 17));\n        fileIDLabel.setMinimumSize(new java.awt.Dimension(63, 17));\n        fileIDLabel.setPreferredSize(new java.awt.Dimension(63, 17));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(fileIDLabel, gridBagConstraints);\n\n        fileIDValue.setEditable(false);\n        fileIDValue.setMaximumSize(new java.awt.Dimension(64, 25));\n        fileIDValue.setMinimumSize(new java.awt.Dimension(64, 25));\n        fileIDValue.setPreferredSize(new java.awt.Dimension(64, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(fileIDValue, gridBagConstraints);\n\n        trackIDLabel.setText(\"Track ID:\");\n        trackIDLabel.setMaximumSize(new java.awt.Dimension(79, 17));\n        trackIDLabel.setMinimumSize(new java.awt.Dimension(79, 17));\n        trackIDLabel.setPreferredSize(new java.awt.Dimension(79, 17));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(trackIDLabel, gridBagConstraints);\n\n        trackIDValue.setEditable(false);\n        trackIDValue.setMaximumSize(new java.awt.Dimension(64, 25));\n        trackIDValue.setMinimumSize(new java.awt.Dimension(64, 25));\n        trackIDValue.setPreferredSize(new java.awt.Dimension(64, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 3;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(trackIDValue, gridBagConstraints);\n\n        durationLabel.setText(\"Duration:\");\n        durationLabel.setMaximumSize(new java.awt.Dimension(63, 17));\n        durationLabel.setMinimumSize(new java.awt.Dimension(63, 17));\n        durationLabel.setPreferredSize(new java.awt.Dimension(63, 17));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(durationLabel, gridBagConstraints);\n\n        durationValue.setMinimumSize(new java.awt.Dimension(64, 17));\n        durationValue.setPreferredSize(new java.awt.Dimension(64, 17));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(durationValue, gridBagConstraints);\n\n        bitrateLabel.setText(\"Bitrate:\");\n        bitrateLabel.setMaximumSize(new java.awt.Dimension(79, 17));\n        bitrateLabel.setMinimumSize(new java.awt.Dimension(79, 17));\n        bitrateLabel.setPreferredSize(new java.awt.Dimension(79, 17));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(bitrateLabel, gridBagConstraints);\n\n        bitrateValue.setMinimumSize(new java.awt.Dimension(64, 17));\n        bitrateValue.setPreferredSize(new java.awt.Dimension(64, 17));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 3;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(bitrateValue, gridBagConstraints);\n\n        channelsLabel.setText(\"Channels:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(channelsLabel, gridBagConstraints);\n\n        channelsValue.setMinimumSize(new java.awt.Dimension(64, 17));\n        channelsValue.setPreferredSize(new java.awt.Dimension(64, 17));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(channelsValue, gridBagConstraints);\n\n        samplerateLabel.setText(\"Samplerate:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(samplerateLabel, gridBagConstraints);\n\n        samplerateValue.setMinimumSize(new java.awt.Dimension(64, 17));\n        samplerateValue.setPreferredSize(new java.awt.Dimension(64, 17));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 3;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(samplerateValue, gridBagConstraints);\n\n        modifiedCheckBox.setText(\"Modified\");\n        modifiedCheckBox.setToolTipText(\"Whether the file[s] are modified by the user since the last time the daemon processed the file[s].\");\n        modifiedCheckBox.setEnabled(false);\n        modifiedCheckBox.setFocusable(false);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 5;\n        gridBagConstraints.gridwidth = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(modifiedCheckBox, gridBagConstraints);\n\n        duplicateCheckBox.setText(\"Duplicate\");\n        duplicateCheckBox.setToolTipText(\"Whether the file[s] are duplicates.\");\n        duplicateCheckBox.setEnabled(false);\n        duplicateCheckBox.setFocusable(false);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 5;\n        gridBagConstraints.gridwidth = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(duplicateCheckBox, gridBagConstraints);\n\n        pinnedCheckBox.setText(\"Pinned\");\n        pinnedCheckBox.setToolTipText(\"<html>A pinned file will have preference above other duplicates regardless of quality.<br />\\nFor example, you got an album with MP3-files and then 1 extra file from the same album, but in FLAC format.<br />\\nMost likely the FLAC will appear in the output directory while the duplicate MP3 will be placed in the duplicate directory.<br />\\nIf you pin the duplicate MP3 then the FLAC will be placed in the duplicate directory and the MP3 in the output directory.<br />\\nIf you pin multiple duplicates the behaviour is undefined, it's usually better to delete the duplicate you don't want.</html>\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 6;\n        gridBagConstraints.gridwidth = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        miscPanel.add(pinnedCheckBox, gridBagConstraints);\n\n        setMetadataButton.setMnemonic('S');\n        setMetadataButton.setText(\"Set metadata\");\n        setMetadataButton.setFocusable(false);\n        setMetadataButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        setMetadataButtonActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 6;\n        gridBagConstraints.gridwidth = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.weightx = 1.0;\n        miscPanel.add(setMetadataButton, gridBagConstraints);\n\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.gridheight = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;\n        metadataPanel.add(miscPanel, gridBagConstraints);\n\n        artistPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Artist\"));\n        artistPanel.setLayout(new java.awt.GridBagLayout());\n\n        artistCheckBox.setSelected(true);\n        artistCheckBox.setText(\"Name:\");\n        artistCheckBox.setToolTipText(\"When checked, field will be saved\");\n        artistCheckBox.setMaximumSize(new java.awt.Dimension(95, 21));\n        artistCheckBox.setMinimumSize(new java.awt.Dimension(95, 21));\n        artistCheckBox.setPreferredSize(new java.awt.Dimension(95, 21));\n        artistCheckBox.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        artistCheckBoxActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        artistPanel.add(artistCheckBox, gridBagConstraints);\n\n        artistValue.setPreferredSize(new java.awt.Dimension(245, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        artistPanel.add(artistValue, gridBagConstraints);\n\n        artistSortCheckBox.setSelected(true);\n        artistSortCheckBox.setText(\"Sort name:\");\n        artistSortCheckBox.setToolTipText(\"When checked, field will be saved\");\n        artistSortCheckBox.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        artistSortCheckBoxActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        artistPanel.add(artistSortCheckBox, gridBagConstraints);\n\n        artistSortValue.setPreferredSize(new java.awt.Dimension(245, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        artistPanel.add(artistSortValue, gridBagConstraints);\n\n        artistMBIDCheckBox.setSelected(true);\n        artistMBIDCheckBox.setText(\"MBID:\");\n        artistMBIDCheckBox.setToolTipText(\"When checked, field will be saved\");\n        artistMBIDCheckBox.setMaximumSize(new java.awt.Dimension(95, 21));\n        artistMBIDCheckBox.setMinimumSize(new java.awt.Dimension(95, 21));\n        artistMBIDCheckBox.setPreferredSize(new java.awt.Dimension(95, 21));\n        artistMBIDCheckBox.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        artistMBIDCheckBoxActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        artistPanel.add(artistMBIDCheckBox, gridBagConstraints);\n\n        artistMBIDValue.setPreferredSize(new java.awt.Dimension(245, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        artistPanel.add(artistMBIDValue, gridBagConstraints);\n\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n        gridBagConstraints.weightx = 1.0;\n        metadataPanel.add(artistPanel, gridBagConstraints);\n\n        trackPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Track\"));\n        trackPanel.setLayout(new java.awt.GridBagLayout());\n\n        titleCheckBox.setSelected(true);\n        titleCheckBox.setText(\"Title:\");\n        titleCheckBox.setToolTipText(\"When checked, field will be saved\");\n        titleCheckBox.setMaximumSize(new java.awt.Dimension(95, 21));\n        titleCheckBox.setMinimumSize(new java.awt.Dimension(95, 21));\n        titleCheckBox.setPreferredSize(new java.awt.Dimension(95, 21));\n        titleCheckBox.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        titleCheckBoxActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        trackPanel.add(titleCheckBox, gridBagConstraints);\n\n        titleValue.setPreferredSize(new java.awt.Dimension(245, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.gridwidth = 3;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        trackPanel.add(titleValue, gridBagConstraints);\n\n        tracknumberCheckBox.setSelected(true);\n        tracknumberCheckBox.setText(\"Tracknum:\");\n        tracknumberCheckBox.setToolTipText(\"When checked, field will be saved\");\n        tracknumberCheckBox.setMaximumSize(new java.awt.Dimension(95, 21));\n        tracknumberCheckBox.setMinimumSize(new java.awt.Dimension(95, 21));\n        tracknumberCheckBox.setPreferredSize(new java.awt.Dimension(95, 21));\n        tracknumberCheckBox.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        tracknumberCheckBoxActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        trackPanel.add(tracknumberCheckBox, gridBagConstraints);\n\n        tracknumberValue.setMaximumSize(new java.awt.Dimension(32, 25));\n        tracknumberValue.setMinimumSize(new java.awt.Dimension(32, 25));\n        tracknumberValue.setPreferredSize(new java.awt.Dimension(32, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        trackPanel.add(tracknumberValue, gridBagConstraints);\n\n        genreCheckBox.setSelected(true);\n        genreCheckBox.setText(\"Genre:\");\n        genreCheckBox.setToolTipText(\"When checked, field will be saved\");\n        genreCheckBox.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        genreCheckBoxActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        trackPanel.add(genreCheckBox, gridBagConstraints);\n\n        genreValue.setPreferredSize(new java.awt.Dimension(64, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 3;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        trackPanel.add(genreValue, gridBagConstraints);\n\n        trackMBIDCheckBox.setSelected(true);\n        trackMBIDCheckBox.setText(\"MBID:\");\n        trackMBIDCheckBox.setToolTipText(\"When checked, field will be saved\");\n        trackMBIDCheckBox.setMaximumSize(new java.awt.Dimension(95, 21));\n        trackMBIDCheckBox.setMinimumSize(new java.awt.Dimension(95, 21));\n        trackMBIDCheckBox.setPreferredSize(new java.awt.Dimension(95, 21));\n        trackMBIDCheckBox.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        trackMBIDCheckBoxActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        trackPanel.add(trackMBIDCheckBox, gridBagConstraints);\n\n        trackMBIDValue.setPreferredSize(new java.awt.Dimension(245, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.gridwidth = 3;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        trackPanel.add(trackMBIDValue, gridBagConstraints);\n\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;\n        gridBagConstraints.weightx = 1.0;\n        metadataPanel.add(trackPanel, gridBagConstraints);\n\n        albumPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Album\"));\n        albumPanel.setPreferredSize(new java.awt.Dimension(304, 104));\n        albumPanel.setLayout(new java.awt.GridBagLayout());\n\n        albumCheckBox.setSelected(true);\n        albumCheckBox.setText(\"Title:\");\n        albumCheckBox.setToolTipText(\"When checked, field will be saved\");\n        albumCheckBox.setMaximumSize(new java.awt.Dimension(95, 21));\n        albumCheckBox.setMinimumSize(new java.awt.Dimension(95, 21));\n        albumCheckBox.setPreferredSize(new java.awt.Dimension(95, 21));\n        albumCheckBox.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        albumCheckBoxActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        albumPanel.add(albumCheckBox, gridBagConstraints);\n\n        albumValue.setPreferredSize(new java.awt.Dimension(245, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        albumPanel.add(albumValue, gridBagConstraints);\n\n        releasedCheckBox.setSelected(true);\n        releasedCheckBox.setText(\"Released:\");\n        releasedCheckBox.setToolTipText(\"When checked, field will be saved\");\n        releasedCheckBox.setMaximumSize(new java.awt.Dimension(95, 21));\n        releasedCheckBox.setMinimumSize(new java.awt.Dimension(95, 21));\n        releasedCheckBox.setPreferredSize(new java.awt.Dimension(95, 21));\n        releasedCheckBox.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        releasedCheckBoxActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        albumPanel.add(releasedCheckBox, gridBagConstraints);\n\n        releasedValue.setPreferredSize(new java.awt.Dimension(245, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        albumPanel.add(releasedValue, gridBagConstraints);\n\n        albumMBIDCheckBox.setSelected(true);\n        albumMBIDCheckBox.setText(\"MBID:\");\n        albumMBIDCheckBox.setToolTipText(\"When checked, field will be saved\");\n        albumMBIDCheckBox.setMaximumSize(new java.awt.Dimension(95, 21));\n        albumMBIDCheckBox.setMinimumSize(new java.awt.Dimension(95, 21));\n        albumMBIDCheckBox.setPreferredSize(new java.awt.Dimension(95, 21));\n        albumMBIDCheckBox.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        albumMBIDCheckBoxActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        albumPanel.add(albumMBIDCheckBox, gridBagConstraints);\n\n        albumMBIDValue.setPreferredSize(new java.awt.Dimension(245, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        albumPanel.add(albumMBIDValue, gridBagConstraints);\n\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.weightx = 2.0;\n        metadataPanel.add(albumPanel, gridBagConstraints);\n\n        albumArtistPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Album artist\"));\n        albumArtistPanel.setLayout(new java.awt.GridBagLayout());\n\n        albumArtistCheckBox.setSelected(true);\n        albumArtistCheckBox.setText(\"Name:\");\n        albumArtistCheckBox.setToolTipText(\"When checked, field will be saved\");\n        albumArtistCheckBox.setMaximumSize(new java.awt.Dimension(95, 21));\n        albumArtistCheckBox.setMinimumSize(new java.awt.Dimension(95, 21));\n        albumArtistCheckBox.setPreferredSize(new java.awt.Dimension(95, 21));\n        albumArtistCheckBox.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        albumArtistCheckBoxActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        albumArtistPanel.add(albumArtistCheckBox, gridBagConstraints);\n\n        albumArtistValue.setPreferredSize(new java.awt.Dimension(245, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        albumArtistPanel.add(albumArtistValue, gridBagConstraints);\n\n        albumArtistSortCheckBox.setSelected(true);\n        albumArtistSortCheckBox.setText(\"Sort name:\");\n        albumArtistSortCheckBox.setToolTipText(\"When checked, field will be saved\");\n        albumArtistSortCheckBox.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        albumArtistSortCheckBoxActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        albumArtistPanel.add(albumArtistSortCheckBox, gridBagConstraints);\n\n        albumArtistSortValue.setPreferredSize(new java.awt.Dimension(245, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        albumArtistPanel.add(albumArtistSortValue, gridBagConstraints);\n\n        albumArtistMBIDCheckBox.setSelected(true);\n        albumArtistMBIDCheckBox.setText(\"MBID:\");\n        albumArtistMBIDCheckBox.setToolTipText(\"When checked, field will be saved\");\n        albumArtistMBIDCheckBox.setMaximumSize(new java.awt.Dimension(95, 21));\n        albumArtistMBIDCheckBox.setMinimumSize(new java.awt.Dimension(95, 21));\n        albumArtistMBIDCheckBox.setPreferredSize(new java.awt.Dimension(95, 21));\n        albumArtistMBIDCheckBox.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        albumArtistMBIDCheckBoxActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        albumArtistPanel.add(albumArtistMBIDCheckBox, gridBagConstraints);\n\n        albumArtistMBIDValue.setPreferredSize(new java.awt.Dimension(245, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        albumArtistPanel.add(albumArtistMBIDValue, gridBagConstraints);\n\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;\n        gridBagConstraints.weightx = 2.0;\n        metadataPanel.add(albumArtistPanel, gridBagConstraints);\n\n        getContentPane().add(metadataPanel, java.awt.BorderLayout.SOUTH);\n\n        pack();\n}", "path": "gui\\src\\net\\exent\\locutus\\gui\\Locutus.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "//GEN-LAST:event_daemonMaxGroupSizeSliderStateChanged\n", "func_signal": "private void resetAllButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_resetAllButtonActionPerformed\n\t    try {\n\t\t    Database.resetAllSettings();\n\t    } catch (SQLException e) {\n\t\t    e.printStackTrace();\n\t    }\n\t    updateSettings();\n    }", "path": "gui\\src\\net\\exent\\locutus\\gui\\Settings.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        uncomparedTree = new javax.swing.JTree();\n\n        addComponentListener(new java.awt.event.ComponentAdapter() {\n                public void componentShown(java.awt.event.ComponentEvent evt) {\n                        formComponentShown(evt);\n                }\n        });\n\n        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode(\"root\");\n        uncomparedTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));\n        uncomparedTree.setRootVisible(false);\n        uncomparedTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {\n                public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {\n                        uncomparedTreeValueChanged(evt);\n                }\n        });\n        uncomparedTree.addKeyListener(new java.awt.event.KeyAdapter() {\n                public void keyPressed(java.awt.event.KeyEvent evt) {\n                        uncomparedTreeKeyPressed(evt);\n                }\n        });\n        jScrollPane1.setViewportView(uncomparedTree);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)\n        );\n}", "path": "gui\\src\\net\\exent\\locutus\\gui\\Uncompared.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "//GEN-LAST:event_resetDaemonButtonActionPerformed\n", "func_signal": "private void resetOptionsButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_resetOptionsButtonActionPerformed\n\t    try {\n\t\t    Database.resetSetting(\"dry_run\");\n\t\t    Database.resetSetting(\"duration_must_match\");\n\t\t    Database.resetSetting(\"combine_groups\");\n\t\t    Database.resetSetting(\"allow_group_duplicates\");\n\t\t    Database.resetSetting(\"only_save_complete_albums\");\n\t\t    Database.resetSetting(\"only_save_if_all_match\");\n\t\t    Database.resetSetting(\"lookup_mbid\");\n\t\t    Database.resetSetting(\"lookup_genre\");\n\t\t    updateSettings();\n\t    } catch (SQLException e) {\n\t\t    e.printStackTrace();\n\t    }\n    }", "path": "gui\\src\\net\\exent\\locutus\\gui\\Settings.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n        java.awt.GridBagConstraints gridBagConstraints;\n\n        weightPanel = new javax.swing.JPanel();\n        weightArtistLabel = new javax.swing.JLabel();\n        weightArtistSlider = new javax.swing.JSlider();\n        weightArtistValue = new javax.swing.JLabel();\n        weightAlbumLabel = new javax.swing.JLabel();\n        weightAlbumSlider = new javax.swing.JSlider();\n        weightAlbumValue = new javax.swing.JLabel();\n        weightTracknumberLabel = new javax.swing.JLabel();\n        weightTracknumberSlider = new javax.swing.JSlider();\n        weightTracknumberValue = new javax.swing.JLabel();\n        weightTitleLabel = new javax.swing.JLabel();\n        weightTitleSlider = new javax.swing.JSlider();\n        weightTitleValue = new javax.swing.JLabel();\n        weightDurationLabel = new javax.swing.JLabel();\n        weightDurationSlider = new javax.swing.JSlider();\n        weightDurationValue = new javax.swing.JLabel();\n        comparePanel = new javax.swing.JPanel();\n        compareCombineThresholdLabel = new javax.swing.JLabel();\n        compareCombineThresholdSlider = new javax.swing.JSlider();\n        compareCombineThresholdValue = new javax.swing.JLabel();\n        compareMaxDiffBestScoreLabel = new javax.swing.JLabel();\n        compareMaxDiffBestScoreSlider = new javax.swing.JSlider();\n        compareMaxDiffBestScoreValue = new javax.swing.JLabel();\n        compareMatchMinScoreLabel = new javax.swing.JLabel();\n        compareMatchMinScoreSlider = new javax.swing.JSlider();\n        compareMatchMinScoreValue = new javax.swing.JLabel();\n        compareCompareRelativeScoreLabel = new javax.swing.JLabel();\n        compareCompareRelativeScoreSlider = new javax.swing.JSlider();\n        compareCompareRelativeScoreValue = new javax.swing.JLabel();\n        compareDurationLimitLabel = new javax.swing.JLabel();\n        compareDurationLimitSlider = new javax.swing.JSlider();\n        compareDurationLimitValue = new javax.swing.JLabel();\n        daemonPanel = new javax.swing.JPanel();\n        daemonMaxGroupSizeLabel = new javax.swing.JLabel();\n        daemonMaxGroupSizeSlider = new javax.swing.JSlider();\n        daemonMaxGroupSizeValue = new javax.swing.JLabel();\n        daemonCacheLifetimeLabel = new javax.swing.JLabel();\n        daemonCacheLifetimeSlider = new javax.swing.JSlider();\n        daemonCacheLifetimeValue = new javax.swing.JLabel();\n        daemonRunIntervalLabel = new javax.swing.JLabel();\n        daemonRunIntervalSlider = new javax.swing.JSlider();\n        daemonRunIntervalValue = new javax.swing.JLabel();\n        daemonMusicBrainzQueryIntervalLabel = new javax.swing.JLabel();\n        daemonMusicBrainzQueryIntervalSlider = new javax.swing.JSlider();\n        daemonMusicBrainzQueryIntervalValue = new javax.swing.JLabel();\n        daemonAudioscrobblerQueryIntervalLabel = new javax.swing.JLabel();\n        daemonAudioscrobblerQueryIntervalSlider = new javax.swing.JSlider();\n        daemonAudioscrobblerQueryIntervalValue = new javax.swing.JLabel();\n        optionPanel = new javax.swing.JPanel();\n        optionDryRunCheckBox = new javax.swing.JCheckBox();\n        optionDurationMustMatchCheckBox = new javax.swing.JCheckBox();\n        optionCombineGroupsCheckBox = new javax.swing.JCheckBox();\n        optionAllowGroupDuplicatesCheckBox = new javax.swing.JCheckBox();\n        optionOnlySaveCompleteAlbumsCheckBox = new javax.swing.JCheckBox();\n        optionOnlySaveIfAllMatchCheckBox = new javax.swing.JCheckBox();\n        optionLookupMBIDCheckBox = new javax.swing.JCheckBox();\n        optionLookupGenreCheckBox = new javax.swing.JCheckBox();\n        locationPanel = new javax.swing.JPanel();\n        inputDirectoryLabel = new javax.swing.JLabel();\n        inputDirectoryTextField = new javax.swing.JTextField();\n        musicBrainzSearchURLLabel = new javax.swing.JLabel();\n        musicBrainzSearchURLTextField = new javax.swing.JTextField();\n        musicBrainzReleaseURLLabel = new javax.swing.JLabel();\n        musicBrainzReleaseURLTextField = new javax.swing.JTextField();\n        audioscrobblerArtistURLLabel = new javax.swing.JLabel();\n        audioscrobblerArtistURLTextField = new javax.swing.JTextField();\n        audioscrobblerTrackURLLabel = new javax.swing.JLabel();\n        audioscrobblerTrackURLTextField = new javax.swing.JTextField();\n        outputDirectoryLabel = new javax.swing.JLabel();\n        outputDirectoryTextField = new javax.swing.JTextField();\n        duplicateDirectoryLabel = new javax.swing.JLabel();\n        duplicateDirectoryTextField = new javax.swing.JTextField();\n        filenameFormatLabel = new javax.swing.JLabel();\n        filenameFormatTextField = new javax.swing.JTextField();\n        filenameIllegalCharactersLabel = new javax.swing.JLabel();\n        filenameIllegalCharactersTextField = new javax.swing.JTextField();\n        otherSettingsPanel = new javax.swing.JPanel();\n        otherSettingsScrollPane = new javax.swing.JScrollPane();\n        otherSettingsTable = new javax.swing.JTable();\n        buttonPanel = new javax.swing.JPanel();\n        saveSettingsButton = new javax.swing.JButton();\n        resetWeightButton = new javax.swing.JButton();\n        resetCompareButton = new javax.swing.JButton();\n        resetDaemonButton = new javax.swing.JButton();\n        resetOptionsButton = new javax.swing.JButton();\n        resetLocationsButton = new javax.swing.JButton();\n        resetOtherSettingsButton = new javax.swing.JButton();\n        resetAllButton = new javax.swing.JButton();\n        buttonSeparator = new javax.swing.JSeparator();\n        resetLabel = new javax.swing.JLabel();\n\n        addComponentListener(new java.awt.event.ComponentAdapter() {\n                public void componentHidden(java.awt.event.ComponentEvent evt) {\n                        formComponentHidden(evt);\n                }\n                public void componentShown(java.awt.event.ComponentEvent evt) {\n                        formComponentShown(evt);\n                }\n        });\n        setLayout(new java.awt.GridBagLayout());\n\n        weightPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Weight\"));\n        weightPanel.setLayout(new java.awt.GridBagLayout());\n\n        weightArtistLabel.setText(\"Artist:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        weightPanel.add(weightArtistLabel, gridBagConstraints);\n\n        weightArtistSlider.setMajorTickSpacing(1);\n        weightArtistSlider.setMaximum(500);\n        weightArtistSlider.setMinimum(1);\n        weightArtistSlider.setSnapToTicks(true);\n        weightArtistSlider.setValue(100);\n        weightArtistSlider.setMaximumSize(new java.awt.Dimension(32767, 17));\n        weightArtistSlider.setMinimumSize(new java.awt.Dimension(200, 17));\n        weightArtistSlider.setPreferredSize(new java.awt.Dimension(200, 17));\n        weightArtistSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n                public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                        weightArtistSliderStateChanged(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        weightPanel.add(weightArtistSlider, gridBagConstraints);\n\n        weightArtistValue.setText(\"100\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        weightPanel.add(weightArtistValue, gridBagConstraints);\n\n        weightAlbumLabel.setText(\"Album:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        weightPanel.add(weightAlbumLabel, gridBagConstraints);\n\n        weightAlbumSlider.setMajorTickSpacing(1);\n        weightAlbumSlider.setMaximum(500);\n        weightAlbumSlider.setMinimum(1);\n        weightAlbumSlider.setSnapToTicks(true);\n        weightAlbumSlider.setValue(100);\n        weightAlbumSlider.setMaximumSize(new java.awt.Dimension(32767, 17));\n        weightAlbumSlider.setMinimumSize(new java.awt.Dimension(200, 17));\n        weightAlbumSlider.setPreferredSize(new java.awt.Dimension(200, 17));\n        weightAlbumSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n                public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                        weightAlbumSliderStateChanged(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        weightPanel.add(weightAlbumSlider, gridBagConstraints);\n\n        weightAlbumValue.setText(\"100\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        weightPanel.add(weightAlbumValue, gridBagConstraints);\n\n        weightTracknumberLabel.setText(\"Tracknumber:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        weightPanel.add(weightTracknumberLabel, gridBagConstraints);\n\n        weightTracknumberSlider.setMajorTickSpacing(1);\n        weightTracknumberSlider.setMaximum(500);\n        weightTracknumberSlider.setMinimum(1);\n        weightTracknumberSlider.setSnapToTicks(true);\n        weightTracknumberSlider.setValue(100);\n        weightTracknumberSlider.setMaximumSize(new java.awt.Dimension(32767, 17));\n        weightTracknumberSlider.setMinimumSize(new java.awt.Dimension(200, 17));\n        weightTracknumberSlider.setPreferredSize(new java.awt.Dimension(200, 17));\n        weightTracknumberSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n                public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                        weightTracknumberSliderStateChanged(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        weightPanel.add(weightTracknumberSlider, gridBagConstraints);\n\n        weightTracknumberValue.setText(\"100\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        weightPanel.add(weightTracknumberValue, gridBagConstraints);\n\n        weightTitleLabel.setText(\"Title:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        weightPanel.add(weightTitleLabel, gridBagConstraints);\n\n        weightTitleSlider.setMajorTickSpacing(1);\n        weightTitleSlider.setMaximum(500);\n        weightTitleSlider.setMinimum(1);\n        weightTitleSlider.setSnapToTicks(true);\n        weightTitleSlider.setValue(100);\n        weightTitleSlider.setMaximumSize(new java.awt.Dimension(32767, 17));\n        weightTitleSlider.setMinimumSize(new java.awt.Dimension(200, 17));\n        weightTitleSlider.setPreferredSize(new java.awt.Dimension(200, 17));\n        weightTitleSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n                public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                        weightTitleSliderStateChanged(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        weightPanel.add(weightTitleSlider, gridBagConstraints);\n\n        weightTitleValue.setText(\"100\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        weightPanel.add(weightTitleValue, gridBagConstraints);\n\n        weightDurationLabel.setText(\"Duration:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        weightPanel.add(weightDurationLabel, gridBagConstraints);\n\n        weightDurationSlider.setMajorTickSpacing(1);\n        weightDurationSlider.setMaximum(500);\n        weightDurationSlider.setMinimum(1);\n        weightDurationSlider.setSnapToTicks(true);\n        weightDurationSlider.setValue(100);\n        weightDurationSlider.setMaximumSize(new java.awt.Dimension(32767, 17));\n        weightDurationSlider.setMinimumSize(new java.awt.Dimension(200, 17));\n        weightDurationSlider.setPreferredSize(new java.awt.Dimension(200, 17));\n        weightDurationSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n                public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                        weightDurationSliderStateChanged(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        weightPanel.add(weightDurationSlider, gridBagConstraints);\n\n        weightDurationValue.setText(\"100\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        weightPanel.add(weightDurationValue, gridBagConstraints);\n\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n        gridBagConstraints.weightx = 1.0;\n        add(weightPanel, gridBagConstraints);\n\n        comparePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Compare\"));\n        comparePanel.setLayout(new java.awt.GridBagLayout());\n\n        compareCombineThresholdLabel.setText(\"Combine threshold:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        comparePanel.add(compareCombineThresholdLabel, gridBagConstraints);\n\n        compareCombineThresholdSlider.setMajorTickSpacing(1);\n        compareCombineThresholdSlider.setSnapToTicks(true);\n        compareCombineThresholdSlider.setMaximumSize(new java.awt.Dimension(32767, 17));\n        compareCombineThresholdSlider.setMinimumSize(new java.awt.Dimension(200, 17));\n        compareCombineThresholdSlider.setPreferredSize(new java.awt.Dimension(200, 17));\n        compareCombineThresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n                public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                        compareCombineThresholdSliderStateChanged(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        comparePanel.add(compareCombineThresholdSlider, gridBagConstraints);\n\n        compareCombineThresholdValue.setText(\"50%\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        comparePanel.add(compareCombineThresholdValue, gridBagConstraints);\n\n        compareMaxDiffBestScoreLabel.setText(\"Max diff best score:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        comparePanel.add(compareMaxDiffBestScoreLabel, gridBagConstraints);\n\n        compareMaxDiffBestScoreSlider.setMajorTickSpacing(1);\n        compareMaxDiffBestScoreSlider.setSnapToTicks(true);\n        compareMaxDiffBestScoreSlider.setMaximumSize(new java.awt.Dimension(32767, 17));\n        compareMaxDiffBestScoreSlider.setMinimumSize(new java.awt.Dimension(200, 17));\n        compareMaxDiffBestScoreSlider.setPreferredSize(new java.awt.Dimension(200, 17));\n        compareMaxDiffBestScoreSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n                public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                        compareMaxDiffBestScoreSliderStateChanged(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        comparePanel.add(compareMaxDiffBestScoreSlider, gridBagConstraints);\n\n        compareMaxDiffBestScoreValue.setText(\"50%\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        comparePanel.add(compareMaxDiffBestScoreValue, gridBagConstraints);\n\n        compareMatchMinScoreLabel.setText(\"Match min score:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        comparePanel.add(compareMatchMinScoreLabel, gridBagConstraints);\n\n        compareMatchMinScoreSlider.setMajorTickSpacing(1);\n        compareMatchMinScoreSlider.setSnapToTicks(true);\n        compareMatchMinScoreSlider.setMaximumSize(new java.awt.Dimension(32767, 17));\n        compareMatchMinScoreSlider.setMinimumSize(new java.awt.Dimension(200, 17));\n        compareMatchMinScoreSlider.setPreferredSize(new java.awt.Dimension(200, 17));\n        compareMatchMinScoreSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n                public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                        compareMatchMinScoreSliderStateChanged(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        comparePanel.add(compareMatchMinScoreSlider, gridBagConstraints);\n\n        compareMatchMinScoreValue.setText(\"50%\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        comparePanel.add(compareMatchMinScoreValue, gridBagConstraints);\n\n        compareCompareRelativeScoreLabel.setText(\"Compare relative score:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        comparePanel.add(compareCompareRelativeScoreLabel, gridBagConstraints);\n\n        compareCompareRelativeScoreSlider.setMajorTickSpacing(1);\n        compareCompareRelativeScoreSlider.setSnapToTicks(true);\n        compareCompareRelativeScoreSlider.setMaximumSize(new java.awt.Dimension(32767, 17));\n        compareCompareRelativeScoreSlider.setMinimumSize(new java.awt.Dimension(200, 17));\n        compareCompareRelativeScoreSlider.setPreferredSize(new java.awt.Dimension(200, 17));\n        compareCompareRelativeScoreSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n                public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                        compareCompareRelativeScoreSliderStateChanged(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        comparePanel.add(compareCompareRelativeScoreSlider, gridBagConstraints);\n\n        compareCompareRelativeScoreValue.setText(\"50%\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        comparePanel.add(compareCompareRelativeScoreValue, gridBagConstraints);\n\n        compareDurationLimitLabel.setText(\"Duration limit:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        comparePanel.add(compareDurationLimitLabel, gridBagConstraints);\n\n        compareDurationLimitSlider.setMajorTickSpacing(100);\n        compareDurationLimitSlider.setMaximum(60000);\n        compareDurationLimitSlider.setSnapToTicks(true);\n        compareDurationLimitSlider.setValue(15000);\n        compareDurationLimitSlider.setMaximumSize(new java.awt.Dimension(32767, 17));\n        compareDurationLimitSlider.setMinimumSize(new java.awt.Dimension(200, 17));\n        compareDurationLimitSlider.setPreferredSize(new java.awt.Dimension(200, 17));\n        compareDurationLimitSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n                public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                        compareDurationLimitSliderStateChanged(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        comparePanel.add(compareDurationLimitSlider, gridBagConstraints);\n\n        compareDurationLimitValue.setText(\"15000ms\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        comparePanel.add(compareDurationLimitValue, gridBagConstraints);\n\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        add(comparePanel, gridBagConstraints);\n\n        daemonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Daemon\"));\n        daemonPanel.setLayout(new java.awt.GridBagLayout());\n\n        daemonMaxGroupSizeLabel.setText(\"Max group size:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        daemonPanel.add(daemonMaxGroupSizeLabel, gridBagConstraints);\n\n        daemonMaxGroupSizeSlider.setMajorTickSpacing(1);\n        daemonMaxGroupSizeSlider.setMaximum(2000);\n        daemonMaxGroupSizeSlider.setMinimum(1);\n        daemonMaxGroupSizeSlider.setSnapToTicks(true);\n        daemonMaxGroupSizeSlider.setMaximumSize(new java.awt.Dimension(32767, 17));\n        daemonMaxGroupSizeSlider.setMinimumSize(new java.awt.Dimension(200, 17));\n        daemonMaxGroupSizeSlider.setPreferredSize(new java.awt.Dimension(200, 17));\n        daemonMaxGroupSizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n                public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                        daemonMaxGroupSizeSliderStateChanged(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        daemonPanel.add(daemonMaxGroupSizeSlider, gridBagConstraints);\n\n        daemonMaxGroupSizeValue.setText(\"50\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        daemonPanel.add(daemonMaxGroupSizeValue, gridBagConstraints);\n\n        daemonCacheLifetimeLabel.setText(\"Cache lifetime:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        daemonPanel.add(daemonCacheLifetimeLabel, gridBagConstraints);\n\n        daemonCacheLifetimeSlider.setMajorTickSpacing(1);\n        daemonCacheLifetimeSlider.setMaximum(12);\n        daemonCacheLifetimeSlider.setMinimum(1);\n        daemonCacheLifetimeSlider.setSnapToTicks(true);\n        daemonCacheLifetimeSlider.setValue(3);\n        daemonCacheLifetimeSlider.setMaximumSize(new java.awt.Dimension(32767, 17));\n        daemonCacheLifetimeSlider.setMinimumSize(new java.awt.Dimension(200, 17));\n        daemonCacheLifetimeSlider.setPreferredSize(new java.awt.Dimension(200, 17));\n        daemonCacheLifetimeSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n                public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                        daemonCacheLifetimeSliderStateChanged(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        daemonPanel.add(daemonCacheLifetimeSlider, gridBagConstraints);\n\n        daemonCacheLifetimeValue.setText(\"3 months\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        daemonPanel.add(daemonCacheLifetimeValue, gridBagConstraints);\n\n        daemonRunIntervalLabel.setText(\"Run interval:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        daemonPanel.add(daemonRunIntervalLabel, gridBagConstraints);\n\n        daemonRunIntervalSlider.setMajorTickSpacing(1);\n        daemonRunIntervalSlider.setMaximum(90);\n        daemonRunIntervalSlider.setMinimum(1);\n        daemonRunIntervalSlider.setSnapToTicks(true);\n        daemonRunIntervalSlider.setValue(7);\n        daemonRunIntervalSlider.setMaximumSize(new java.awt.Dimension(32767, 17));\n        daemonRunIntervalSlider.setMinimumSize(new java.awt.Dimension(200, 17));\n        daemonRunIntervalSlider.setPreferredSize(new java.awt.Dimension(200, 17));\n        daemonRunIntervalSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n                public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                        daemonRunIntervalSliderStateChanged(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        daemonPanel.add(daemonRunIntervalSlider, gridBagConstraints);\n\n        daemonRunIntervalValue.setText(\"7 days\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        daemonPanel.add(daemonRunIntervalValue, gridBagConstraints);\n\n        daemonMusicBrainzQueryIntervalLabel.setText(\"MusicBrainz query interval:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        daemonPanel.add(daemonMusicBrainzQueryIntervalLabel, gridBagConstraints);\n\n        daemonMusicBrainzQueryIntervalSlider.setMajorTickSpacing(1);\n        daemonMusicBrainzQueryIntervalSlider.setMaximum(60);\n        daemonMusicBrainzQueryIntervalSlider.setMinimum(1);\n        daemonMusicBrainzQueryIntervalSlider.setSnapToTicks(true);\n        daemonMusicBrainzQueryIntervalSlider.setValue(3);\n        daemonMusicBrainzQueryIntervalSlider.setMaximumSize(new java.awt.Dimension(32767, 17));\n        daemonMusicBrainzQueryIntervalSlider.setMinimumSize(new java.awt.Dimension(200, 17));\n        daemonMusicBrainzQueryIntervalSlider.setPreferredSize(new java.awt.Dimension(200, 17));\n        daemonMusicBrainzQueryIntervalSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n                public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                        daemonMusicBrainzQueryIntervalSliderStateChanged(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        daemonPanel.add(daemonMusicBrainzQueryIntervalSlider, gridBagConstraints);\n\n        daemonMusicBrainzQueryIntervalValue.setText(\"3 seconds\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        daemonPanel.add(daemonMusicBrainzQueryIntervalValue, gridBagConstraints);\n\n        daemonAudioscrobblerQueryIntervalLabel.setText(\"Audioscrobbler query interval:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        daemonPanel.add(daemonAudioscrobblerQueryIntervalLabel, gridBagConstraints);\n\n        daemonAudioscrobblerQueryIntervalSlider.setMajorTickSpacing(1);\n        daemonAudioscrobblerQueryIntervalSlider.setMaximum(60);\n        daemonAudioscrobblerQueryIntervalSlider.setMinimum(1);\n        daemonAudioscrobblerQueryIntervalSlider.setSnapToTicks(true);\n        daemonAudioscrobblerQueryIntervalSlider.setValue(3);\n        daemonAudioscrobblerQueryIntervalSlider.setMaximumSize(new java.awt.Dimension(32767, 17));\n        daemonAudioscrobblerQueryIntervalSlider.setMinimumSize(new java.awt.Dimension(200, 17));\n        daemonAudioscrobblerQueryIntervalSlider.setPreferredSize(new java.awt.Dimension(200, 17));\n        daemonAudioscrobblerQueryIntervalSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n                public void stateChanged(javax.swing.event.ChangeEvent evt) {\n                        daemonAudioscrobblerQueryIntervalSliderStateChanged(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        daemonPanel.add(daemonAudioscrobblerQueryIntervalSlider, gridBagConstraints);\n\n        daemonAudioscrobblerQueryIntervalValue.setText(\"3 seconds\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        daemonPanel.add(daemonAudioscrobblerQueryIntervalValue, gridBagConstraints);\n\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.weightx = 1.0;\n        add(daemonPanel, gridBagConstraints);\n\n        optionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Options\"));\n        optionPanel.setLayout(new java.awt.GridBagLayout());\n\n        optionDryRunCheckBox.setText(\"Dry run\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        optionPanel.add(optionDryRunCheckBox, gridBagConstraints);\n\n        optionDurationMustMatchCheckBox.setText(\"Duration must match\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        optionPanel.add(optionDurationMustMatchCheckBox, gridBagConstraints);\n\n        optionCombineGroupsCheckBox.setText(\"Combine groups\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        optionPanel.add(optionCombineGroupsCheckBox, gridBagConstraints);\n\n        optionAllowGroupDuplicatesCheckBox.setText(\"Allow duplicate files in group\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        optionPanel.add(optionAllowGroupDuplicatesCheckBox, gridBagConstraints);\n\n        optionOnlySaveCompleteAlbumsCheckBox.setText(\"Only save complete albums\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        optionPanel.add(optionOnlySaveCompleteAlbumsCheckBox, gridBagConstraints);\n\n        optionOnlySaveIfAllMatchCheckBox.setText(\"Only save if all files in group match\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 5;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        optionPanel.add(optionOnlySaveIfAllMatchCheckBox, gridBagConstraints);\n\n        optionLookupMBIDCheckBox.setText(\"Lookup MBID\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 6;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        optionPanel.add(optionLookupMBIDCheckBox, gridBagConstraints);\n\n        optionLookupGenreCheckBox.setText(\"Lookup genre\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 7;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        optionPanel.add(optionLookupGenreCheckBox, gridBagConstraints);\n\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n        gridBagConstraints.weightx = 1.0;\n        add(optionPanel, gridBagConstraints);\n\n        locationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Locations & formatting\"));\n        locationPanel.setLayout(new java.awt.GridBagLayout());\n\n        inputDirectoryLabel.setText(\"Input directory:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(inputDirectoryLabel, gridBagConstraints);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(inputDirectoryTextField, gridBagConstraints);\n\n        musicBrainzSearchURLLabel.setText(\"MusicBrainz search URL:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 7;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(musicBrainzSearchURLLabel, gridBagConstraints);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 7;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(musicBrainzSearchURLTextField, gridBagConstraints);\n\n        musicBrainzReleaseURLLabel.setText(\"MusicBrainz release URL:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 8;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(musicBrainzReleaseURLLabel, gridBagConstraints);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 8;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(musicBrainzReleaseURLTextField, gridBagConstraints);\n\n        audioscrobblerArtistURLLabel.setText(\"Audioscrobbler artist URL:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 6;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(audioscrobblerArtistURLLabel, gridBagConstraints);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 6;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(audioscrobblerArtistURLTextField, gridBagConstraints);\n\n        audioscrobblerTrackURLLabel.setText(\"Audioscrobbler track URL:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 5;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(audioscrobblerTrackURLLabel, gridBagConstraints);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 5;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(audioscrobblerTrackURLTextField, gridBagConstraints);\n\n        outputDirectoryLabel.setText(\"Output directory:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(outputDirectoryLabel, gridBagConstraints);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(outputDirectoryTextField, gridBagConstraints);\n\n        duplicateDirectoryLabel.setText(\"Duplicate directory:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(duplicateDirectoryLabel, gridBagConstraints);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(duplicateDirectoryTextField, gridBagConstraints);\n\n        filenameFormatLabel.setText(\"Filename format:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(filenameFormatLabel, gridBagConstraints);\n\n        filenameFormatTextField.setMaximumSize(new java.awt.Dimension(2147483647, 25));\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(filenameFormatTextField, gridBagConstraints);\n\n        filenameIllegalCharactersLabel.setText(\"Illegal characters:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(filenameIllegalCharactersLabel, gridBagConstraints);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);\n        locationPanel.add(filenameIllegalCharactersTextField, gridBagConstraints);\n\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.gridwidth = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n        gridBagConstraints.weightx = 1.0;\n        add(locationPanel, gridBagConstraints);\n\n        otherSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Other settings\"));\n        otherSettingsPanel.setLayout(new javax.swing.BoxLayout(otherSettingsPanel, javax.swing.BoxLayout.LINE_AXIS));\n\n        otherSettingsTable.setModel(new javax.swing.table.DefaultTableModel(\n                new Object [][] {\n\n                },\n                new String [] {\n                        \"Key\", \"Value\"\n                }\n        ) {\n                Class[] types = new Class [] {\n                        java.lang.String.class, java.lang.Object.class\n                };\n\n                public Class getColumnClass(int columnIndex) {\n                        return types [columnIndex];\n                }\n        });\n        otherSettingsScrollPane.setViewportView(otherSettingsTable);\n\n        otherSettingsPanel.add(otherSettingsScrollPane);\n\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.gridwidth = 3;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        add(otherSettingsPanel, gridBagConstraints);\n\n        buttonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Save & reset settings\"));\n        buttonPanel.setLayout(new java.awt.GridBagLayout());\n\n        saveSettingsButton.setMnemonic('S');\n        saveSettingsButton.setText(\"Save\");\n        saveSettingsButton.setToolTipText(\"Save local changes to the database\");\n        saveSettingsButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        saveSettingsButtonActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        buttonPanel.add(saveSettingsButton, gridBagConstraints);\n\n        resetWeightButton.setText(\"Weight\");\n        resetWeightButton.setToolTipText(\"Reset the default values for weighting in the database\");\n        resetWeightButton.setFocusable(false);\n        resetWeightButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        resetWeightButtonActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 4;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        buttonPanel.add(resetWeightButton, gridBagConstraints);\n\n        resetCompareButton.setText(\"Compare\");\n        resetCompareButton.setToolTipText(\"Reset the default values for comparing in the database\");\n        resetCompareButton.setFocusable(false);\n        resetCompareButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        resetCompareButtonActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 5;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        buttonPanel.add(resetCompareButton, gridBagConstraints);\n\n        resetDaemonButton.setText(\"Daemon\");\n        resetDaemonButton.setToolTipText(\"Reset the default values for the daemon in the database\");\n        resetDaemonButton.setFocusable(false);\n        resetDaemonButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        resetDaemonButtonActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 6;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        buttonPanel.add(resetDaemonButton, gridBagConstraints);\n\n        resetOptionsButton.setText(\"Options\");\n        resetOptionsButton.setToolTipText(\"Reset the default values for options in the database\");\n        resetOptionsButton.setFocusable(false);\n        resetOptionsButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        resetOptionsButtonActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 7;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        buttonPanel.add(resetOptionsButton, gridBagConstraints);\n\n        resetLocationsButton.setText(\"Locations & formatting\");\n        resetLocationsButton.setToolTipText(\"Reset the default values for locations & formatting in the database\");\n        resetLocationsButton.setFocusable(false);\n        resetLocationsButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        resetLocationsButtonActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 8;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        buttonPanel.add(resetLocationsButton, gridBagConstraints);\n\n        resetOtherSettingsButton.setText(\"Other settings\");\n        resetOtherSettingsButton.setToolTipText(\"Reset the default values for other settings in the database\");\n        resetOtherSettingsButton.setFocusable(false);\n        resetOtherSettingsButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        resetOtherSettingsButtonActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 9;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        buttonPanel.add(resetOtherSettingsButton, gridBagConstraints);\n\n        resetAllButton.setText(\"All\");\n        resetAllButton.setToolTipText(\"Reset all settings to default values in the database\");\n        resetAllButton.setFocusable(false);\n        resetAllButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        resetAllButtonActionPerformed(evt);\n                }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 10;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        buttonPanel.add(resetAllButton, gridBagConstraints);\n\n        buttonSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 2;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.weightx = 1.0;\n        buttonPanel.add(buttonSeparator, gridBagConstraints);\n\n        resetLabel.setText(\"Reset:\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n        buttonPanel.add(resetLabel, gridBagConstraints);\n\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.gridwidth = 3;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;\n        gridBagConstraints.weightx = 1.0;\n        add(buttonPanel, gridBagConstraints);\n}", "path": "gui\\src\\net\\exent\\locutus\\gui\\Settings.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "//GEN-LAST:event_formComponentShown\n", "func_signal": "private void uncomparedTreeKeyPressed(java.awt.event.KeyEvent evt)", "code": "{//GEN-FIRST:event_uncomparedTreeKeyPressed\n\t\tif (uncomparedTree.getSelectionCount() <= 0)\n\t\t\treturn;\n\t\tif (evt.isAltDown())\n\t\t\treturn; // alt key is used for buttons\n\t\tTreePath[] paths = uncomparedTree.getSelectionPaths();\n\t\tDefaultMutableTreeNode active_group = null;\n\t\tList<DefaultMutableTreeNode> filetreenodes = new ArrayList<DefaultMutableTreeNode>();\n\t\tDefaultMutableTreeNode selected = (DefaultMutableTreeNode) paths[0].getLastPathComponent();\n\t\tfor (TreePath path : paths) {\n\t\t\tDefaultMutableTreeNode current = (DefaultMutableTreeNode) path.getLastPathComponent();\n\t\t\tObject node = current.getUserObject();\n\t\t\tif (node instanceof Group) {\n\t\t\t\tactive_group = current;\n\t\t\t\tEnumeration files = current.children();\n\t\t\t\twhile (files.hasMoreElements())\n\t\t\t\t\tfiletreenodes.add((DefaultMutableTreeNode) files.nextElement());\n\t\t\t} else if (node instanceof Metafile) {\n\t\t\t\tactive_group = (DefaultMutableTreeNode) current.getParent();\n\t\t\t\tfiletreenodes.add(current);\n\t\t\t}\n\t\t}\n\t\tswitch (evt.getKeyCode()) {\n\t\t\tcase KeyEvent.VK_ESCAPE:\n\t\t\tcase KeyEvent.VK_R:\n\t\t\t\tfor (DefaultMutableTreeNode treenode : filetreenodes)\n\t\t\t\t\t((Metafile) treenode.getUserObject()).setStatus(Metafile.NONE);\n\t\t\t\tselected = null;\n\t\t\t\tbreak;\n\n\t\t\tcase KeyEvent.VK_G:\n\t\t\t\tif (uncomparedTree.getSelectionCount() != 1)\n\t\t\t\t\tbreak;\n\t\t\t\tif (evt.isShiftDown()) {\n\t\t\t\t\tif (selected.getUserObject() instanceof Group)\n\t\t\t\t\t\tselected = (DefaultMutableTreeNode) ((DefaultMutableTreeNode) uncomparedTree.getModel().getRoot()).getChildBefore(active_group);\n\t\t\t\t\telse\n\t\t\t\t\t\tselected = active_group;\n\t\t\t\t} else {\n\t\t\t\t\tselected = (DefaultMutableTreeNode) ((DefaultMutableTreeNode) uncomparedTree.getModel().getRoot()).getChildAfter(active_group);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase KeyEvent.VK_F:\n\t\t\t\tif (uncomparedTree.getSelectionCount() != 1)\n\t\t\t\t\tbreak;\n\t\t\t\tif (selected.getUserObject() instanceof Group) {\n\t\t\t\t\tif (evt.isShiftDown())\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tuncomparedTree.expandPath(new TreePath(selected.getPath()));\n\t\t\t\t\tselected = selected.getNextNode();\n\t\t\t\t} else if (selected.getUserObject() instanceof Metafile) {\n\t\t\t\t\tif (evt.isShiftDown())\n\t\t\t\t\t\tselected = (DefaultMutableTreeNode) ((DefaultMutableTreeNode) selected.getParent()).getChildBefore(selected);\n\t\t\t\t\telse\n\t\t\t\t\t\tselected = (DefaultMutableTreeNode) ((DefaultMutableTreeNode) selected.getParent()).getChildAfter(selected);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase KeyEvent.VK_E:\n\t\t\t\tif (active_group == null)\n\t\t\t\t\tbreak;\n\t\t\t\tuncomparedTree.expandPath(new TreePath(active_group.getPath()));\n\t\t\t\t/* set selected to null so we don't attempt to expand nodes after this switch */\n\t\t\t\tselected = null;\n\t\t\t\tbreak;\n\n\t\t\tcase KeyEvent.VK_SPACE:\n\t\t\t\tif (evt.isControlDown()) {\n\t\t\t\t\t/* update all groups and reload tree */\n\t\t\t\t\tEnumeration albums = ((DefaultMutableTreeNode) uncomparedTree.getModel().getRoot()).children();\n\t\t\t\t\twhile (albums.hasMoreElements())\n\t\t\t\t\t\tsaveGroup((DefaultMutableTreeNode) albums.nextElement());\n\t\t\t\t\tupdateTree();\n\t\t\t\t} else {\n\t\t\t\t\t/* update files in active group */\n\t\t\t\t\tsaveGroup(active_group);\n\t\t\t\t\tselected = active_group;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t\tif (selected != null) {\n\t\t\tTreePath path = new TreePath(selected.getPath());\n\t\t\tEnumeration albums = ((DefaultMutableTreeNode) uncomparedTree.getModel().getRoot()).children();\n\t\t\twhile (albums.hasMoreElements()) {\n\t\t\t\tDefaultMutableTreeNode album = (DefaultMutableTreeNode) albums.nextElement();\n\t\t\t\tTreePath albumpath = new TreePath(album.getPath());\n\t\t\t\tif (uncomparedTree.isCollapsed(albumpath))\n\t\t\t\t\tcontinue;\n\t\t\t\tif (!albumpath.isDescendant(path)) {\n\t\t\t\t\tuncomparedTree.collapsePath(albumpath);\n\t\t\t\t} else {\n\t\t\t\t\tEnumeration tracks = album.children();\n\t\t\t\t\twhile (tracks.hasMoreElements()) {\n\t\t\t\t\t\tDefaultMutableTreeNode track = (DefaultMutableTreeNode) tracks.nextElement();\n\t\t\t\t\t\tTreePath trackpath = new TreePath(track.getPath());\n\t\t\t\t\t\tif (uncomparedTree.isExpanded(trackpath) && !trackpath.isDescendant(path))\n\t\t\t\t\t\t\tuncomparedTree.collapsePath(trackpath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tuncomparedTree.expandPath(path);\n\t\t\tuncomparedTree.setSelectionPath(path);\n\t\t\tuncomparedTree.scrollPathToVisible(path);\n\t\t}\n\t\tuncomparedTree.repaint();\n\t}", "path": "gui\\src\\net\\exent\\locutus\\gui\\Uncompared.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "//GEN-LAST:event_resetWeightButtonActionPerformed\n", "func_signal": "private void resetCompareButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_resetCompareButtonActionPerformed\n\t    try {\n\t\t    Database.resetSetting(\"combine_threshold\");\n\t\t    Database.resetSetting(\"max_diff_best_score\");\n\t\t    Database.resetSetting(\"match_min_score\");\n\t\t    Database.resetSetting(\"compare_relative_score\");\n\t\t    Database.resetSetting(\"duration_limit\");\n\t\t    updateSettings();\n\t    } catch (SQLException e) {\n\t\t    e.printStackTrace();\n\t    }\n    }", "path": "gui\\src\\net\\exent\\locutus\\gui\\Settings.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "//GEN-LAST:event_resetOptionsButtonActionPerformed\n", "func_signal": "private void resetLocationsButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_resetLocationsButtonActionPerformed\n\t    try {\n\t\t    Database.resetSetting(\"input_directory\");\n\t\t    Database.resetSetting(\"output_directory\");\n\t\t    Database.resetSetting(\"duplicate_directory\");\n\t\t    Database.resetSetting(\"filename_format\");\n\t\t    Database.resetSetting(\"filename_illegal_characters\");\n\t\t    Database.resetSetting(\"audioscrobbler_track_tag_url\");\n\t\t    Database.resetSetting(\"audioscrobbler_artist_tag_url\");\n\t\t    Database.resetSetting(\"musicbrainz_search_url\");\n\t\t    Database.resetSetting(\"musicbrainz_release_url\");\n\t\t    updateSettings();\n\t    } catch (SQLException e) {\n\t\t    e.printStackTrace();\n\t    }\n    }", "path": "gui\\src\\net\\exent\\locutus\\gui\\Settings.java", "repo_name": "canidae/locutus", "stars": 5, "license": "mit", "language": "java", "size": 1456}
{"docstring": "// $ANTLR start T25\n", "func_signal": "public final void mT25() throws RecognitionException", "code": "{\n    try {\n        int _type = T25;\n        // /Users/michaelarace/CodaClient/CodaClient.g:58:5: ( ']' )\n        // /Users/michaelarace/CodaClient/CodaClient.g:58:7: ']'\n        {\n        match(']'); \n\n        }\n\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start ASCIIStringLiteral\n", "func_signal": "public final void mASCIIStringLiteral() throws RecognitionException", "code": "{\n    try {\n        int _type = ASCIIStringLiteral;\n        // /Users/michaelarace/CodaClient/CodaClient.g:244:5: ( '\\\\'' (~ '\\\\'' )* '\\\\'' ( '\\\\'' (~ '\\\\'' )* '\\\\'' )* )\n        // /Users/michaelarace/CodaClient/CodaClient.g:245:5: '\\\\'' (~ '\\\\'' )* '\\\\'' ( '\\\\'' (~ '\\\\'' )* '\\\\'' )*\n        {\n        match('\\''); \n        // /Users/michaelarace/CodaClient/CodaClient.g:245:10: (~ '\\\\'' )*\n        loop5:\n        do {\n            int alt5=2;\n            int LA5_0 = input.LA(1);\n\n            if ( ((LA5_0>='\\u0000' && LA5_0<='&')||(LA5_0>='(' && LA5_0<='\\uFFFE')) ) {\n                alt5=1;\n            }\n\n\n            switch (alt5) {\n        \tcase 1 :\n        \t    // /Users/michaelarace/CodaClient/CodaClient.g:245:11: ~ '\\\\''\n        \t    {\n        \t    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='\\uFFFE') ) {\n        \t        input.consume();\n\n        \t    }\n        \t    else {\n        \t        MismatchedSetException mse =\n        \t            new MismatchedSetException(null,input);\n        \t        recover(mse);    throw mse;\n        \t    }\n\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop5;\n            }\n        } while (true);\n\n        match('\\''); \n        // /Users/michaelarace/CodaClient/CodaClient.g:245:24: ( '\\\\'' (~ '\\\\'' )* '\\\\'' )*\n        loop7:\n        do {\n            int alt7=2;\n            int LA7_0 = input.LA(1);\n\n            if ( (LA7_0=='\\'') ) {\n                alt7=1;\n            }\n\n\n            switch (alt7) {\n        \tcase 1 :\n        \t    // /Users/michaelarace/CodaClient/CodaClient.g:245:26: '\\\\'' (~ '\\\\'' )* '\\\\''\n        \t    {\n        \t    match('\\''); \n        \t    // /Users/michaelarace/CodaClient/CodaClient.g:245:31: (~ '\\\\'' )*\n        \t    loop6:\n        \t    do {\n        \t        int alt6=2;\n        \t        int LA6_0 = input.LA(1);\n\n        \t        if ( ((LA6_0>='\\u0000' && LA6_0<='&')||(LA6_0>='(' && LA6_0<='\\uFFFE')) ) {\n        \t            alt6=1;\n        \t        }\n\n\n        \t        switch (alt6) {\n        \t    \tcase 1 :\n        \t    \t    // /Users/michaelarace/CodaClient/CodaClient.g:245:32: ~ '\\\\''\n        \t    \t    {\n        \t    \t    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='\\uFFFE') ) {\n        \t    \t        input.consume();\n\n        \t    \t    }\n        \t    \t    else {\n        \t    \t        MismatchedSetException mse =\n        \t    \t            new MismatchedSetException(null,input);\n        \t    \t        recover(mse);    throw mse;\n        \t    \t    }\n\n\n        \t    \t    }\n        \t    \t    break;\n\n        \t    \tdefault :\n        \t    \t    break loop6;\n        \t        }\n        \t    } while (true);\n\n        \t    match('\\''); \n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop7;\n            }\n        } while (true);\n\n\n        }\n\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start Integer\n", "func_signal": "public final void mInteger() throws RecognitionException", "code": "{\n    try {\n        int _type = Integer;\n        // /Users/michaelarace/CodaClient/CodaClient.g:236:9: ( '0' | '1' .. '9' ( '0' .. '9' )* )\n        int alt2=2;\n        int LA2_0 = input.LA(1);\n\n        if ( (LA2_0=='0') ) {\n            alt2=1;\n        }\n        else if ( ((LA2_0>='1' && LA2_0<='9')) ) {\n            alt2=2;\n        }\n        else {\n            NoViableAltException nvae =\n                new NoViableAltException(\"236:1: Integer : ( '0' | '1' .. '9' ( '0' .. '9' )* );\", 2, 0, input);\n\n            throw nvae;\n        }\n        switch (alt2) {\n            case 1 :\n                // /Users/michaelarace/CodaClient/CodaClient.g:236:11: '0'\n                {\n                match('0'); \n\n                }\n                break;\n            case 2 :\n                // /Users/michaelarace/CodaClient/CodaClient.g:236:17: '1' .. '9' ( '0' .. '9' )*\n                {\n                matchRange('1','9'); \n                // /Users/michaelarace/CodaClient/CodaClient.g:236:26: ( '0' .. '9' )*\n                loop1:\n                do {\n                    int alt1=2;\n                    int LA1_0 = input.LA(1);\n\n                    if ( ((LA1_0>='0' && LA1_0<='9')) ) {\n                        alt1=1;\n                    }\n\n\n                    switch (alt1) {\n                \tcase 1 :\n                \t    // /Users/michaelarace/CodaClient/CodaClient.g:236:27: '0' .. '9'\n                \t    {\n                \t    matchRange('0','9'); \n\n                \t    }\n                \t    break;\n\n                \tdefault :\n                \t    break loop1;\n                    }\n                } while (true);\n\n\n                }\n                break;\n\n        }\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start EnvironmentName\n", "func_signal": "public final void mEnvironmentName() throws RecognitionException", "code": "{\n    try {\n        int _type = EnvironmentName;\n        // /Users/michaelarace/CodaClient/CodaClient.g:255:2: ( 'DEV' | 'TEST' | 'PROD' )\n        int alt11=3;\n        switch ( input.LA(1) ) {\n        case 'D':\n            {\n            alt11=1;\n            }\n            break;\n        case 'T':\n            {\n            alt11=2;\n            }\n            break;\n        case 'P':\n            {\n            alt11=3;\n            }\n            break;\n        default:\n            NoViableAltException nvae =\n                new NoViableAltException(\"254:1: EnvironmentName : ( 'DEV' | 'TEST' | 'PROD' );\", 11, 0, input);\n\n            throw nvae;\n        }\n\n        switch (alt11) {\n            case 1 :\n                // /Users/michaelarace/CodaClient/CodaClient.g:255:4: 'DEV'\n                {\n                match(\"DEV\"); \n\n\n                }\n                break;\n            case 2 :\n                // /Users/michaelarace/CodaClient/CodaClient.g:255:12: 'TEST'\n                {\n                match(\"TEST\"); \n\n\n                }\n                break;\n            case 3 :\n                // /Users/michaelarace/CodaClient/CodaClient.g:255:21: 'PROD'\n                {\n                match(\"PROD\"); \n\n\n                }\n                break;\n\n        }\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start T16\n", "func_signal": "public final void mT16() throws RecognitionException", "code": "{\n    try {\n        int _type = T16;\n        // /Users/michaelarace/CodaClient/CodaClient.g:49:5: ( 'IN' )\n        // /Users/michaelarace/CodaClient/CodaClient.g:49:7: 'IN'\n        {\n        match(\"IN\"); \n\n\n        }\n\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start T14\n", "func_signal": "public final void mT14() throws RecognitionException", "code": "{\n    try {\n        int _type = T14;\n        // /Users/michaelarace/CodaClient/CodaClient.g:47:5: ( 'APPLICATION' )\n        // /Users/michaelarace/CodaClient/CodaClient.g:47:7: 'APPLICATION'\n        {\n        match(\"APPLICATION\"); \n\n\n        }\n\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start T20\n", "func_signal": "public final void mT20() throws RecognitionException", "code": "{\n    try {\n        int _type = T20;\n        // /Users/michaelarace/CodaClient/CodaClient.g:53:5: ( '=' )\n        // /Users/michaelarace/CodaClient/CodaClient.g:53:7: '='\n        {\n        match('='); \n\n        }\n\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start T19\n", "func_signal": "public final void mT19() throws RecognitionException", "code": "{\n    try {\n        int _type = T19;\n        // /Users/michaelarace/CodaClient/CodaClient.g:52:5: ( 'SETENV' )\n        // /Users/michaelarace/CodaClient/CodaClient.g:52:7: 'SETENV'\n        {\n        match(\"SETENV\"); \n\n\n        }\n\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start T26\n", "func_signal": "public final void mT26() throws RecognitionException", "code": "{\n    try {\n        int _type = T26;\n        // /Users/michaelarace/CodaClient/CodaClient.g:59:5: ( 'ERROR' )\n        // /Users/michaelarace/CodaClient/CodaClient.g:59:7: 'ERROR'\n        {\n        match(\"ERROR\"); \n\n\n        }\n\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start T17\n", "func_signal": "public final void mT17() throws RecognitionException", "code": "{\n    try {\n        int _type = T17;\n        // /Users/michaelarace/CodaClient/CodaClient.g:50:5: ( 'GROUP' )\n        // /Users/michaelarace/CodaClient/CodaClient.g:50:7: 'GROUP'\n        {\n        match(\"GROUP\"); \n\n\n        }\n\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start T13\n", "func_signal": "public final void mT13() throws RecognitionException", "code": "{\n    try {\n        int _type = T13;\n        // /Users/michaelarace/CodaClient/CodaClient.g:46:5: ( 'TO' )\n        // /Users/michaelarace/CodaClient/CodaClient.g:46:7: 'TO'\n        {\n        match(\"TO\"); \n\n\n        }\n\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start T18\n", "func_signal": "public final void mT18() throws RecognitionException", "code": "{\n    try {\n        int _type = T18;\n        // /Users/michaelarace/CodaClient/CodaClient.g:51:5: ( 'DISCONNECT' )\n        // /Users/michaelarace/CodaClient/CodaClient.g:51:7: 'DISCONNECT'\n        {\n        match(\"DISCONNECT\"); \n\n\n        }\n\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start UnicodeStringLiteral\n", "func_signal": "public final void mUnicodeStringLiteral() throws RecognitionException", "code": "{\n    try {\n        int _type = UnicodeStringLiteral;\n        // /Users/michaelarace/CodaClient/CodaClient.g:249:5: ( 'U' '\\\\'' (~ '\\\\'' )* '\\\\'' ( '\\\\'' (~ '\\\\'' )* '\\\\'' )* )\n        // /Users/michaelarace/CodaClient/CodaClient.g:250:5: 'U' '\\\\'' (~ '\\\\'' )* '\\\\'' ( '\\\\'' (~ '\\\\'' )* '\\\\'' )*\n        {\n        match('U'); \n        match('\\''); \n        // /Users/michaelarace/CodaClient/CodaClient.g:250:14: (~ '\\\\'' )*\n        loop8:\n        do {\n            int alt8=2;\n            int LA8_0 = input.LA(1);\n\n            if ( ((LA8_0>='\\u0000' && LA8_0<='&')||(LA8_0>='(' && LA8_0<='\\uFFFE')) ) {\n                alt8=1;\n            }\n\n\n            switch (alt8) {\n        \tcase 1 :\n        \t    // /Users/michaelarace/CodaClient/CodaClient.g:250:15: ~ '\\\\''\n        \t    {\n        \t    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='\\uFFFE') ) {\n        \t        input.consume();\n\n        \t    }\n        \t    else {\n        \t        MismatchedSetException mse =\n        \t            new MismatchedSetException(null,input);\n        \t        recover(mse);    throw mse;\n        \t    }\n\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop8;\n            }\n        } while (true);\n\n        match('\\''); \n        // /Users/michaelarace/CodaClient/CodaClient.g:250:28: ( '\\\\'' (~ '\\\\'' )* '\\\\'' )*\n        loop10:\n        do {\n            int alt10=2;\n            int LA10_0 = input.LA(1);\n\n            if ( (LA10_0=='\\'') ) {\n                alt10=1;\n            }\n\n\n            switch (alt10) {\n        \tcase 1 :\n        \t    // /Users/michaelarace/CodaClient/CodaClient.g:250:30: '\\\\'' (~ '\\\\'' )* '\\\\''\n        \t    {\n        \t    match('\\''); \n        \t    // /Users/michaelarace/CodaClient/CodaClient.g:250:35: (~ '\\\\'' )*\n        \t    loop9:\n        \t    do {\n        \t        int alt9=2;\n        \t        int LA9_0 = input.LA(1);\n\n        \t        if ( ((LA9_0>='\\u0000' && LA9_0<='&')||(LA9_0>='(' && LA9_0<='\\uFFFE')) ) {\n        \t            alt9=1;\n        \t        }\n\n\n        \t        switch (alt9) {\n        \t    \tcase 1 :\n        \t    \t    // /Users/michaelarace/CodaClient/CodaClient.g:250:36: ~ '\\\\''\n        \t    \t    {\n        \t    \t    if ( (input.LA(1)>='\\u0000' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='\\uFFFE') ) {\n        \t    \t        input.consume();\n\n        \t    \t    }\n        \t    \t    else {\n        \t    \t        MismatchedSetException mse =\n        \t    \t            new MismatchedSetException(null,input);\n        \t    \t        recover(mse);    throw mse;\n        \t    \t    }\n\n\n        \t    \t    }\n        \t    \t    break;\n\n        \t    \tdefault :\n        \t    \t    break loop9;\n        \t        }\n        \t    } while (true);\n\n        \t    match('\\''); \n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop10;\n            }\n        } while (true);\n\n\n        }\n\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start T23\n", "func_signal": "public final void mT23() throws RecognitionException", "code": "{\n    try {\n        int _type = T23;\n        // /Users/michaelarace/CodaClient/CodaClient.g:56:5: ( 'DATA' )\n        // /Users/michaelarace/CodaClient/CodaClient.g:56:7: 'DATA'\n        {\n        match(\"DATA\"); \n\n\n        }\n\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start ObjectName\n", "func_signal": "public final void mObjectName() throws RecognitionException", "code": "{\n    try {\n        int _type = ObjectName;\n        // /Users/michaelarace/CodaClient/CodaClient.g:239:2: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )\n        // /Users/michaelarace/CodaClient/CodaClient.g:239:4: ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n        {\n        if ( (input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z') ) {\n            input.consume();\n\n        }\n        else {\n            MismatchedSetException mse =\n                new MismatchedSetException(null,input);\n            recover(mse);    throw mse;\n        }\n\n        // /Users/michaelarace/CodaClient/CodaClient.g:239:26: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n        loop3:\n        do {\n            int alt3=2;\n            int LA3_0 = input.LA(1);\n\n            if ( ((LA3_0>='0' && LA3_0<='9')||(LA3_0>='A' && LA3_0<='Z')||LA3_0=='_'||(LA3_0>='a' && LA3_0<='z')) ) {\n                alt3=1;\n            }\n\n\n            switch (alt3) {\n        \tcase 1 :\n        \t    // /Users/michaelarace/CodaClient/CodaClient.g:\n        \t    {\n        \t    if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {\n        \t        input.consume();\n\n        \t    }\n        \t    else {\n        \t        MismatchedSetException mse =\n        \t            new MismatchedSetException(null,input);\n        \t        recover(mse);    throw mse;\n        \t    }\n\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop3;\n            }\n        } while (true);\n\n\n        }\n\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start T27\n", "func_signal": "public final void mT27() throws RecognitionException", "code": "{\n    try {\n        int _type = T27;\n        // /Users/michaelarace/CodaClient/CodaClient.g:60:5: ( 'EXIT' )\n        // /Users/michaelarace/CodaClient/CodaClient.g:60:7: 'EXIT'\n        {\n        match(\"EXIT\"); \n\n\n        }\n\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start connect\n// /Users/michaelarace/CodaClient/CodaClient.g:147:1: connect returns [boolean response] : 'CONNECT' hn= HostName ':' po= Integer ( 'TO' 'APPLICATION' app= ObjectName '.' env= EnvironmentName ( 'IN' 'GROUP' gn= ObjectName )? )? ;\n", "func_signal": "public final connect_return connect() throws RecognitionException", "code": "{\n    connect_return retval = new connect_return();\n    retval.start = input.LT(1);\n    int connect_StartIndex = input.index();\n    Token hn=null;\n    Token po=null;\n    Token app=null;\n    Token env=null;\n    Token gn=null;\n\n    try {\n        if ( backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }\n        // /Users/michaelarace/CodaClient/CodaClient.g:148:2: ( 'CONNECT' hn= HostName ':' po= Integer ( 'TO' 'APPLICATION' app= ObjectName '.' env= EnvironmentName ( 'IN' 'GROUP' gn= ObjectName )? )? )\n        // /Users/michaelarace/CodaClient/CodaClient.g:148:4: 'CONNECT' hn= HostName ':' po= Integer ( 'TO' 'APPLICATION' app= ObjectName '.' env= EnvironmentName ( 'IN' 'GROUP' gn= ObjectName )? )?\n        {\n        match(input,11,FOLLOW_11_in_connect155); if (failed) return retval;\n        hn=(Token)input.LT(1);\n        match(input,HostName,FOLLOW_HostName_in_connect159); if (failed) return retval;\n        match(input,12,FOLLOW_12_in_connect161); if (failed) return retval;\n        po=(Token)input.LT(1);\n        match(input,Integer,FOLLOW_Integer_in_connect165); if (failed) return retval;\n        // /Users/michaelarace/CodaClient/CodaClient.g:148:41: ( 'TO' 'APPLICATION' app= ObjectName '.' env= EnvironmentName ( 'IN' 'GROUP' gn= ObjectName )? )?\n        int alt3=2;\n        int LA3_0 = input.LA(1);\n\n        if ( (LA3_0==13) ) {\n            alt3=1;\n        }\n        switch (alt3) {\n            case 1 :\n                // /Users/michaelarace/CodaClient/CodaClient.g:148:42: 'TO' 'APPLICATION' app= ObjectName '.' env= EnvironmentName ( 'IN' 'GROUP' gn= ObjectName )?\n                {\n                match(input,13,FOLLOW_13_in_connect168); if (failed) return retval;\n                match(input,14,FOLLOW_14_in_connect170); if (failed) return retval;\n                app=(Token)input.LT(1);\n                match(input,ObjectName,FOLLOW_ObjectName_in_connect174); if (failed) return retval;\n                match(input,15,FOLLOW_15_in_connect176); if (failed) return retval;\n                env=(Token)input.LT(1);\n                match(input,EnvironmentName,FOLLOW_EnvironmentName_in_connect180); if (failed) return retval;\n                // /Users/michaelarace/CodaClient/CodaClient.g:148:100: ( 'IN' 'GROUP' gn= ObjectName )?\n                int alt2=2;\n                int LA2_0 = input.LA(1);\n\n                if ( (LA2_0==16) ) {\n                    alt2=1;\n                }\n                switch (alt2) {\n                    case 1 :\n                        // /Users/michaelarace/CodaClient/CodaClient.g:148:101: 'IN' 'GROUP' gn= ObjectName\n                        {\n                        match(input,16,FOLLOW_16_in_connect183); if (failed) return retval;\n                        match(input,17,FOLLOW_17_in_connect185); if (failed) return retval;\n                        gn=(Token)input.LT(1);\n                        match(input,ObjectName,FOLLOW_ObjectName_in_connect189); if (failed) return retval;\n\n                        }\n                        break;\n\n                }\n\n\n                }\n                break;\n\n        }\n\n        if ( backtracking==0 ) {\n\n          \t\t\tretval.response = false;\n          \t\t\tclient.setHostname(hn != null ? hn.getText() : \"localhost\");\n          \t\t\ttry {\n          \t\t\t\tclient.setPort(po != null ? java.lang.Integer.parseInt(po.getText()) : 3407);\n          \t\t\t} catch (Exception e) {\n          \t\t\t\tclient.setPort(3407);\n          \t\t\t}\n          \t\t\tclient.setApplication(app != null ? app.getText() : null);\n          \t\t\tclient.setEnvironment(env != null ? env.getText() : null);\n          \t\t\tclient.setGroupName(gn != null ? gn.getText() : null);\n          \t\t\ttry {\n          \t\t\t\tif (client.connect()) {\n          \t\t\t\t\tretval.response = true;\n          \t\t\t\t} else {\n          \t\t\t\t\tclient.setUsername(null);\n          \t\t\t\t\tclient.setPassword(null);\n          \t\t\t\t}\n          \t\t\t} catch (IOException e) {\n          \t\t\t\tclient.setUsername(null);\n          \t\t\t\tclient.setPassword(null);\n          \t\t\t\tCodaClient.printError(\"Please check the hostname and port.\", 1008);\n          \t\t\t}\n          \t\t\n        }\n\n        }\n\n        retval.stop = input.LT(-1);\n\n    }\n\n    \tcatch (MismatchedTokenException e) {\n    \t\tString msg = \"\";\n    \t\tString tokenName = \"<unknown>\";\n\n                \tif (e.expecting == Token.EOF) {\n    \t\t\ttokenName = \"EOF\";\n    \t\t} else  {\n                    \ttokenName = tokenNames[e.expecting];\n               \t}\n\n                \tmsg = \"Mismatched input \" + getTokenErrorDisplay(e.token) + \" expecting \" + tokenName;\n    \t\tclient.printError(msg + \" at line \" + e.line + \", position \" + e.charPositionInLine, 1008);\n    \t} catch (NoViableAltException e) {\n    \t\t//client.printError(\"Line \" + e.line + \", Pos \" + e.charPositionInLine + \": \" + \"no viable alternative at input \" + getTokenErrorDisplay(e.token));\n    \t} catch (EarlyExitException e) {\n    \t\tclient.printError(\"Required (...)+ loop did not match anything at input \" + getTokenErrorDisplay(e.token)+ \" at line \" + e.line + \", position \" + e.charPositionInLine, 1008);\n    \t} catch (MismatchedSetException e) {\n    \t\tclient.printError(\"Mismatched input \" + getTokenErrorDisplay(e.token) + \" expecting set \" + e.expecting+ \" at line \" + e.line + \", position \" + e.charPositionInLine, 1008);\n    \t//} catch (MismatchedNotSetException e) {\n    \t\t//client.printError(\"Line \" + e.line + \", Pos \" + e.charPositionInLine + \": \" + \"mismatched input \" + getTokenErrorDisplay(e.token) + \" expecting set \" + e.expecting);\n    \t} catch (FailedPredicateException e) {\n    \t\tclient.printError(\"Rule \" + e.ruleName + \" failed predicate: {\" + e.predicateText + \"}?\"+ \" at line \" + e.line + \", position \" + e.charPositionInLine, 1008);\n    \t} catch (RecognitionException e) {\n    \t\t// do nothing\n    \t}\n\n        \n    finally {\n        if ( backtracking>0 ) { memoize(input, 2, connect_StartIndex); }\n    }\n    return retval;\n}", "path": "org\\codalang\\codaclient\\CodaClientParser.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start T11\n", "func_signal": "public final void mT11() throws RecognitionException", "code": "{\n    try {\n        int _type = T11;\n        // /Users/michaelarace/CodaClient/CodaClient.g:44:5: ( 'CONNECT' )\n        // /Users/michaelarace/CodaClient/CodaClient.g:44:7: 'CONNECT'\n        {\n        match(\"CONNECT\"); \n\n\n        }\n\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start exit\n// /Users/michaelarace/CodaClient/CodaClient.g:220:1: exit returns [boolean response] : 'EXIT' ;\n", "func_signal": "public final exit_return exit() throws RecognitionException", "code": "{\n    exit_return retval = new exit_return();\n    retval.start = input.LT(1);\n    int exit_StartIndex = input.index();\n    try {\n        if ( backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }\n        // /Users/michaelarace/CodaClient/CodaClient.g:221:2: ( 'EXIT' )\n        // /Users/michaelarace/CodaClient/CodaClient.g:221:4: 'EXIT'\n        {\n        match(input,27,FOLLOW_27_in_exit338); if (failed) return retval;\n        if ( backtracking==0 ) {\n\n          \t\t\tclient.exit();\n          \t\t\tretval.response = true;\n          \t\t\n        }\n\n        }\n\n        retval.stop = input.LT(-1);\n\n    }\n\n    \tcatch (MismatchedTokenException e) {\n    \t\tString msg = \"\";\n    \t\tString tokenName = \"<unknown>\";\n\n                \tif (e.expecting == Token.EOF) {\n    \t\t\ttokenName = \"EOF\";\n    \t\t} else  {\n                    \ttokenName = tokenNames[e.expecting];\n               \t}\n\n                \tmsg = \"Mismatched input \" + getTokenErrorDisplay(e.token) + \" expecting \" + tokenName;\n    \t\tclient.printError(msg + \" at line \" + e.line + \", position \" + e.charPositionInLine, 1008);\n    \t} catch (NoViableAltException e) {\n    \t\t//client.printError(\"Line \" + e.line + \", Pos \" + e.charPositionInLine + \": \" + \"no viable alternative at input \" + getTokenErrorDisplay(e.token));\n    \t} catch (EarlyExitException e) {\n    \t\tclient.printError(\"Required (...)+ loop did not match anything at input \" + getTokenErrorDisplay(e.token)+ \" at line \" + e.line + \", position \" + e.charPositionInLine, 1008);\n    \t} catch (MismatchedSetException e) {\n    \t\tclient.printError(\"Mismatched input \" + getTokenErrorDisplay(e.token) + \" expecting set \" + e.expecting+ \" at line \" + e.line + \", position \" + e.charPositionInLine, 1008);\n    \t//} catch (MismatchedNotSetException e) {\n    \t\t//client.printError(\"Line \" + e.line + \", Pos \" + e.charPositionInLine + \": \" + \"mismatched input \" + getTokenErrorDisplay(e.token) + \" expecting set \" + e.expecting);\n    \t} catch (FailedPredicateException e) {\n    \t\tclient.printError(\"Rule \" + e.ruleName + \" failed predicate: {\" + e.predicateText + \"}?\"+ \" at line \" + e.line + \", position \" + e.charPositionInLine, 1008);\n    \t} catch (RecognitionException e) {\n    \t\t// do nothing\n    \t}\n\n        \n    finally {\n        if ( backtracking>0 ) { memoize(input, 7, exit_StartIndex); }\n    }\n    return retval;\n}", "path": "org\\codalang\\codaclient\\CodaClientParser.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "// $ANTLR start T22\n", "func_signal": "public final void mT22() throws RecognitionException", "code": "{\n    try {\n        int _type = T22;\n        // /Users/michaelarace/CodaClient/CodaClient.g:55:5: ( 'FETCH' )\n        // /Users/michaelarace/CodaClient/CodaClient.g:55:7: 'FETCH'\n        {\n        match(\"FETCH\"); \n\n\n        }\n\n        this.type = _type;\n    }\n    finally {\n    }\n}", "path": "org\\codalang\\codaclient\\CodaClientLexer.java", "repo_name": "18thstreetmike/codaclient", "stars": 5, "license": "gpl-2.0", "language": "java", "size": 108}
{"docstring": "/*----*/\n/* IF */\n/*----*/\n", "func_signal": "public void visit(If node)", "code": "{\n    Label t = new Label();\n    Label f = new Label();\n    Label j = new Label();\n    \n    Exp cond = ExpHandler.translate(frame, env, cinfo, minfo, node.condition);\n    Exp th = StatementHandler.translate(frame, env, cinfo, minfo, node.thenClause);\n    Exp el = node.elseClause == null ? null : \n        StatementHandler.translate(frame, env, cinfo, minfo, node.elseClause);\n    \n    if ( el == null )\n    {\n        Stm r = new SEQ(cond.unCx(t,j),\n                new SEQ(new LABEL(t),\n                        new SEQ(th.unNx(),\n                                new LABEL(j))));\n        \n        result = new Nx(r);\n    }\n    else\n    {\n        Stm r = new SEQ(cond.unCx(t,f),\n                new SEQ(new LABEL(t),\n                        new SEQ(new SEQ(th.unNx(),new JUMP(j)),\n                new SEQ(new LABEL(f), \n                        new SEQ(el.unNx(),\n                new LABEL(j))))));\n        \n        result = new Nx(r);\n    }\n}", "path": "mc011_proj3\\translate\\StatementHandler.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*\n * imprime\n * \n * (move\n *    destination,\n *    source\n * move)\n */\n", "func_signal": "private void printStatement(MOVE s, int i)", "code": "{\n    ident(i);\n    print(\"(move\");\n    println();\n    \n    printExp(s.dst, i+1);\n    print(\",\");\n    println();\n    \n    printExp(s.src, i+1);\n    println();\n    \n    ident(i);\n    print(\"move)\");\n}", "path": "mc011_proj2\\tree\\PrintIR.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*\n * imprime\n * \n * (name\n *     label\n * name)\n */\n", "func_signal": "private void printExp(NAME e, int i)", "code": "{\n    ident(i);\n    print(\"(name\");\n    println();\n    \n    ident(i+1);\n    print(e.label);\n    println();\n    \n    ident(i);\n    print(\"name)\");\n}", "path": "mc011_proj2\\tree\\PrintIR.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*\n * imprime\n * \n * (mem\n *     exp\n * mem)\n */\n", "func_signal": "private void printExp(MEM e, int i)", "code": "{\n    ident(i);\n    print(\"(mem\");\n    println();\n    \n    printExp(e.exp, i+1);\n    println();\n    \n    ident(i);\n    print(\"mem)\");\n}", "path": "mc011_proj2\\tree\\PrintIR.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*-------*/\n/* WHILE */\n/*-------*/\n", "func_signal": "public void visit(While node)", "code": "{\n    Label test = new Label();\n    Label done = new Label();\n    Label body = new Label();\n    \n    Exp cond = ExpHandler.translate(frame, env, cinfo, minfo, node.condition );\n    Exp b = StatementHandler.translate(frame, env, cinfo, minfo, node.body);\n    \n    Stm r = new SEQ(new LABEL(test),\n              new SEQ(cond.unCx(body, done),\n                      new SEQ(new LABEL(body),\n                              new SEQ(b.unNx(),\n                                      new SEQ(new JUMP(test),\n                                              new LABEL(done))))));\n    \n    result = new Nx(r);\n}", "path": "mc011_proj3\\translate\\StatementHandler.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*\n * imprime\n * \n * (call\n *     method,\n *     param1,\n *     param2,\n *     ...\n *     paramN\n * call)\n */\n", "func_signal": "private void printExp(CALL e, int i)", "code": "{\n    ident(i);\n    print(\"(call\");\n    println();\n    \n    printExp(e.func, i+1);\n    print(\",\");\n    println();\n    \n    for( List<Exp> aux = e.args; aux != null; aux = aux.tail )\n    {\n        printExp(aux.head, i+1);\n        \n        if ( aux.tail != null )\n            print(\",\");\n        \n        println();\n    }\n    \n    ident(i);\n    print(\"call)\");\n}", "path": "mc011_proj2\\tree\\PrintIR.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*\n * imprime\n * \n * (seq\n *     stm1,\n *     stm2\n * seq)\n * \n *  OU\n *  \n *  stm1\n */\n", "func_signal": "private void printStatement(SEQ s, int i)", "code": "{\n    if ( s.right == null )\n        printStatement(s.left, i);\n    else\n    {\n        ident(i);\n        print(\"(seq\");\n        println();\n        \n        printStatement(s.left, i+1);\n        print(\",\");\n        println();\n        \n        printStatement(s.right, i+1);\n        println();\n        \n        ident(i);\n        print(\"seq)\");\n    }\n}", "path": "mc011_proj2\\tree\\PrintIR.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*-----------------------*/\n/* NEW OBJECT, NEW ARRAY */\n/*-----------------------*/\n", "func_signal": "public void visit(NewObject node)", "code": "{\n    Symbol s = Symbol.symbol(node.className.s);\n    \n    ClassInfo c = env.classes.get(s);\n    \n    // tamanho do objeto: numero de atributos + 1 palavras\n    int tamanho = (c.attributesOrder.size() + 1) * frame.wordsize();\n    \n    Label vtableName = new Label(\"vtable_\" + c.name);\n    \n    List<tree.Exp> params = new List<tree.Exp>(new CONST(tamanho), \n            new List<tree.Exp>(new NAME(vtableName),null));\n    \n    tree.Exp e = frame.externalCall(\"newObject\", params);\n    \n    result = new Ex( e );\n}", "path": "mc011_proj3\\translate\\ExpHandler.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/**\n * Print a human-readable dump for debugging.\n */\n", "func_signal": "public void show(java.io.PrintStream out)", "code": "{\n    for (List<Node>p=nodes(); p!=null; p=p.tail)\n    {\n        Node n = p.head;\n        out.print(n.toString());\n        out.print(\": \");\n        for(List<Temp> q=def(n); q!=null; q=q.tail)\n        {\n            out.print(q.head.toString());\n            out.print(\" \");\n        }\n        out.print(isMove(n) ? \"<= \" : \"<- \");\n        for(List<Temp> q=use(n); q!=null; q=q.tail)\n        {\n            out.print(q.head.toString());\n            out.print(\" \");\n        }\n        out.print(\"; goto \");\n        for(List<Node> q=n.succ(); q!=null; q=q.tail)\n        {\n            out.print(q.head.toString());\n            out.print(\" \");\n        }\n        out.println();\n    }\n}", "path": "mc011_proj3\\flow_graph\\FlowGraph.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*----------------------*/\n/* ASSIGN, ARRAY ASSIGN */\n/*----------------------*/\n", "func_signal": "public void visit(Assign node)", "code": "{        \n    Symbol name = Symbol.symbol(node.var.s);\n    \n    tree.Exp var = getVariable(name);\n    \n    Exp e = ExpHandler.translate(frame, env, cinfo, minfo, node.exp);\n    \n    Stm s = new MOVE(var, e.unEx());\n    \n    result = new Nx(s);\n}", "path": "mc011_proj3\\translate\\StatementHandler.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*\n * imprime\n * \n * (binop.**\n *     exp1,\n *     exp2\n * binop.end)\n */\n", "func_signal": "private void printExp(BINOP e, int i)", "code": "{\n    ident(i);\n    switch(e.binop)\n    {\n        case BINOP.AND:     print(\"(binop.and\");     break;\n        case BINOP.ARSHIFT: print(\"(binop.arshift\"); break;\n        case BINOP.DIV:     print(\"(binop.div\");     break;\n        case BINOP.LSHIFT:  print(\"(binop.lshift\");  break;\n        case BINOP.MINUS:   print(\"(binop.minus\");   break;\n        case BINOP.OR:      print(\"(binop.or\");      break;\n        case BINOP.PLUS:    print(\"(binop.plus\");    break;\n        case BINOP.RSHIFT:  print(\"(binop.rshift\");  break;\n        case BINOP.TIMES:   print(\"(binop.times\");   break;\n        case BINOP.XOR:     print(\"(binop.xor\");     break;\n        default:            print(\"(binop.?\");       break;\n    }\n    println();\n    \n    printExp(e.left, i+1);\n    print(\",\");\n    println();\n    \n    printExp(e.right, i+1);\n    println();\n    \n    ident(i);\n    print(\"binop.end)\");\n}", "path": "mc011_proj2\\tree\\PrintIR.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*\n * imprime\n * \n * (jump\n *     exp,\n *     label 1,\n *     label 2,\n *     ...\n *     label n\n * jump)\n */\n", "func_signal": "private void printStatement(JUMP s, int i)", "code": "{\n    ident(i);\n    print(\"(jump\");\n    println();\n    \n    printExp(s.exp, i+1);\n    print(\",\");\n    println();\n    \n    \n    for ( List<Label> aux = s.targets; aux != null; aux = aux.tail )\n    {\n        ident(i+1);\n        print(aux.head.toString());\n        \n        if ( aux.tail != null )\n            print(\",\");\n        \n        println();\n    }\n    \n    ident(i);\n    print(\"jump)\");\n}", "path": "mc011_proj2\\tree\\PrintIR.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*-----------*/\n/* LESS THAN */\n/*-----------*/\n", "func_signal": "public void visit(LessThan node)", "code": "{\n    Exp lhs = ExpHandler.translate(frame, env, cinfo, minfo, node.lhs);\n    Exp rhs = ExpHandler.translate(frame, env, cinfo, minfo, node.rhs);\n    \n    int op = CJUMP.LT;\n    \n    result = new RelCx(op, lhs, rhs);        \n}", "path": "mc011_proj3\\translate\\ExpHandler.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*----------------------------*/\n/* ARRAY LOOKUP, ARRAY LENGTH */\n/*----------------------------*/\n", "func_signal": "public void visit(ArrayLength node)", "code": "{\n    tree.Exp array = ExpHandler.translate(frame, env, cinfo, minfo, node.array).unEx();\n    \n    Temp arr = new Temp();\n    \n    Temp size = new Temp();\n    \n    List<tree.Exp> params = new List<tree.Exp>(new TEMP(arr),\n            new List<tree.Exp>(new CONST(node.line), null));\n    \n    \n    tree.Stm move = new MOVE(new TEMP(arr), array);\n    tree.Stm as = new EXPSTM(frame.externalCall(\"assertPtr\", params));\n    tree.Stm s = new MOVE(new TEMP(size),\n            new BINOP(BINOP.PLUS, new TEMP(arr), new CONST(0)));\n    \n    tree.Stm aux = new SEQ(move, new SEQ(as,s));\n    \n    tree.Exp fetchSize = new ESEQ(aux, new MEM(new TEMP(size)));\n    \n    result = new Ex(fetchSize);\n}", "path": "mc011_proj3\\translate\\ExpHandler.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*-------*/\n/* PRINT */\n/*-------*/\n", "func_signal": "public void visit(Print node)", "code": "{\n    tree.Exp arg = ExpHandler.translate(frame, env, cinfo, minfo, node.exp).unEx();\n    \n    List<tree.Exp> param = new List<tree.Exp>(arg, null);\n    \n    tree.Exp call = frame.externalCall(\"printInt\", param);\n    \n    result = new Nx(new EXPSTM(call));\n}", "path": "mc011_proj3\\translate\\StatementHandler.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*\n * imprime\n * \n * (const\n *     const\n * const)\n */\n", "func_signal": "private void printExp(CONST e, int i)", "code": "{\n    ident(i);\n    print(\"(const\");\n    println();\n    \n    ident(i+1);\n    print(\"\" + e.value);\n    println();\n    \n    ident(i);\n    print(\"const)\");\n}", "path": "mc011_proj2\\tree\\PrintIR.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*\n * imprime\n * \n * (label\n *     label\n * label)\n */\n", "func_signal": "private void printStatement(LABEL s, int i)", "code": "{\n    ident(i);\n    print(\"(label\");\n    println();\n    \n    ident(i+1);\n    print(s.label.toString());\n    println();\n    \n    ident(i);\n    print(\"label)\");\n}", "path": "mc011_proj2\\tree\\PrintIR.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*------*/\n/* CALL */\n/*------*/\n", "func_signal": "public void visit(Call node)", "code": "{\n    tree.Exp thisPtr = ExpHandler.translate(frame, env, cinfo, minfo, node.object).unEx();\n    \n    IdentifierType type = (IdentifierType) node.object.type;\n    \n    ClassInfo ci = env.classes.get(Symbol.symbol(type.name));\n    \n    MethodInfo mi = ci.methods.get( Symbol.symbol(node.method.s) );\n    \n    List<tree.Exp> params = ExpListHandler.translate(frame, env, cinfo, minfo, node.actuals);\n    \n    result = new Ex(getMethod(thisPtr, node, ci, mi, params));\n}", "path": "mc011_proj3\\translate\\ExpHandler.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*-----*/\n/* AND */\n/*-----*/\n", "func_signal": "public void visit(And node)", "code": "{\n    Temp res = new Temp();\n    \n    Exp lhs = ExpHandler.translate(frame, env, cinfo, minfo, node.lhs);\n    Exp rhs = ExpHandler.translate(frame, env, cinfo, minfo, node.rhs);\n    \n    Label f = new Label();        \n    Label secondPart = new Label();\n    Label join = new Label();\n    Label t = new Label();\n    \n    tree.Exp total = new ESEQ(\n            new SEQ(new CJUMP(CJUMP.NE, lhs.unEx(), new CONST(0), secondPart, f),\n                    new SEQ(new LABEL(secondPart),\n                            new SEQ(rhs.unCx(t, f),\n                                    new SEQ(new LABEL(f),\n                                            new SEQ(new MOVE(new TEMP(res), new CONST(0)),\n                                                    new SEQ(new JUMP(join),\n                                                            new SEQ(new LABEL(t),\n                                                                    new SEQ(new MOVE(new TEMP(res), new CONST(1)),\n                                                                            new LABEL(join))))))))), new TEMP(res));\n    \n    result = new Ex(total);\n}", "path": "mc011_proj3\\translate\\ExpHandler.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/*------------*/\n/* IDENTIFIER */\n/*------------*/\n", "func_signal": "public void visit(IdentifierExp node)", "code": "{\n    Symbol name = Symbol.symbol(node.name.s);\n    \n    tree.Exp fetch = getVariable(name);\n    \n    result = new Ex(fetch);\n}", "path": "mc011_proj3\\translate\\ExpHandler.java", "repo_name": "gardon/ogc", "stars": 4, "license": "None", "language": "java", "size": 8601}
{"docstring": "/**\n * Override to handle rendering characters with textMode(SHAPE).\n */\n", "func_signal": "protected void textCharImpl(char ch, float x, float y)", "code": "{\n\tif (textMode == SHAPE) {\n\t\tif (textFont.getFont() == null) {\n\t\t\tPGraphics\n\t\t\t\t\t.showWarning(\"textMode(SHAPE) is disabled because the font \"\n\t\t\t\t\t\t\t+ \"\\\"\" + textFont.name + \"\\\" is not available.\");\n\t\t} else {\n\t\t\ttextCharShapeImpl(ch, x, y);\n\t\t}\n\t} else {\n\t\tsuper.textCharImpl(ch, x, y);\n\t}\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "/**\n * Cleans up the object when it's destroyed.\n */\n", "func_signal": "protected void finalize()\n   throws Throwable", "code": "{\n   this.reader = null;\n   super.finalize();\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\xml\\CDATAReader.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "/**\n * Called by resize(), this handles creating the actual GLCanvas the first\n * time around, or simply resizing it on subsequent calls. There is no pixel\n * array to allocate for an OpenGL canvas because OpenGL's pixel buffer is\n * all handled internally.\n */\n", "func_signal": "protected void allocate()", "code": "{\n\tif (context == null) {\n\t\t// System.out.println(\"PGraphicsOpenGL.allocate() for \" + width +\n\t\t// \" \" + height);\n\t\t// new Exception().printStackTrace(System.out);\n\t\t// If OpenGL 2X or 4X smoothing is enabled, setup caps object for\n\t\t// them\n\t\tGLCapabilities capabilities = new GLCapabilities();\n\t\t// Starting in release 0158, OpenGL smoothing is always enabled\n\t\tif (!hints[DISABLE_OPENGL_2X_SMOOTH]) {\n\t\t\tcapabilities.setSampleBuffers(true);\n\t\t\tcapabilities.setNumSamples(2);\n\t\t} else if (hints[ENABLE_OPENGL_4X_SMOOTH]) {\n\t\t\tcapabilities.setSampleBuffers(true);\n\t\t\tcapabilities.setNumSamples(4);\n\t\t}\n\n\t\t// get a rendering surface and a context for this canvas\n\t\tGLDrawableFactory factory = GLDrawableFactory.getFactory();\n\n\t\t/*\n\t\t * if (PApplet.platform == PConstants.LINUX) { GraphicsConfiguration\n\t\t * pconfig = parent.getGraphicsConfiguration();\n\t\t * System.out.println(\"parent config is \" + pconfig);\n\t\t * \n\t\t * // GraphicsDevice device = config.getDevice();\n\t\t * //AbstractGraphicsDevice agd = new\n\t\t * AbstractGraphicsDevice(device); //AbstractGraphicsConfiguration\n\t\t * agc = factory.chooseGraphicsConfiguration(capabilities, null,\n\t\t * null);\n\t\t * \n\t\t * AWTGraphicsConfiguration agc = (AWTGraphicsConfiguration)\n\t\t * factory.chooseGraphicsConfiguration(capabilities, null, null);\n\t\t * GraphicsConfiguration config = agc.getGraphicsConfiguration();\n\t\t * System.out.println(\"agc config is \" + config); }\n\t\t */\n\n\t\tdrawable = factory.getGLDrawable(parent, capabilities, null);\n\t\tcontext = drawable.createContext(null);\n\n\t\t// need to get proper opengl context since will be needed below\n\t\tgl = context.getGL();\n\t\t// Flag defaults to be reset on the next trip into beginDraw().\n\t\tsettingsInited = false;\n\n\t} else {\n\t\t// changing for 0100, need to resize rather than re-allocate\n\t\t// System.out.println(\"PGraphicsOpenGL.allocate() again for \" +\n\t\t// width + \" \" + height);\n\t\treapplySettings();\n\t}\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "/**\n * Make the OpenGL rendering context current for this thread.\n */\n", "func_signal": "protected void detainContext()", "code": "{\n\ttry {\n\t\twhile (context.makeCurrent() == GLContext.CONTEXT_NOT_CURRENT) {\n\t\t\t// System.out.println(\"Context not yet current...\");\n\t\t\t// new Exception().printStackTrace(System.out);\n\t\t\t// Thread.sleep(1000);\n\t\t\tThread.sleep(10);\n\t\t}\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "/**\n * Generate a texture ID and do the necessary bitshifting for the image.\n */\n", "func_signal": "public void rebind(PImage source)", "code": "{\n\tif (textureDeleteQueueCount != 0) {\n\t\t// gl.glDeleteTextures(1, new int[] { tindex }, 0);\n\t\tgl.glDeleteTextures(textureDeleteQueueCount,\n\t\t\t\ttextureDeleteQueue, 0);\n\t\ttextureDeleteQueueCount = 0;\n\t}\n\n\t// System.out.println(\"rebinding texture for \" + source);\n\tif (tindex != -1) {\n\t\t// free up the old memory\n\t\tgl.glDeleteTextures(1, new int[] { tindex }, 0);\n\t}\n\t// generate a new texture number to bind to\n\tint[] tmp = new int[1];\n\tgl.glGenTextures(1, tmp, 0);\n\ttindex = tmp[0];\n\t// System.out.println(\"got index \" + tindex);\n\n\t// bit shifting this might be more efficient\n\tint width2 = nextPowerOfTwo(source.width);\n\t// (int) Math.pow(2, Math.ceil(Math.log(source.width) /\n\t// Math.log(2)));\n\tint height2 = nextPowerOfTwo(source.height);\n\t// (int) Math.pow(2, Math.ceil(Math.log(source.height) /\n\t// Math.log(2)));\n\n\t// use glGetIntegerv with the argument GL_MAX_TEXTURE_SIZE\n\t// to figure out min/max texture sizes\n\tif (maxTextureSize == 0) {\n\t\tint maxSize[] = new int[1];\n\t\tgl.glGetIntegerv(GL.GL_MAX_TEXTURE_SIZE, maxSize, 0);\n\t\tmaxTextureSize = maxSize[0];\n\t\t// System.out.println(\"max texture size is \" + maxTextureSize);\n\t}\n\tif ((width2 > maxTextureSize) || (height2 > maxTextureSize)) {\n\t\tthrow new RuntimeException(\"Image width and height cannot be\"\n\t\t\t\t+ \" larger than \" + maxTextureSize\n\t\t\t\t+ \" with your graphics card.\");\n\t}\n\n\tif ((width2 > twidth) || (height2 > theight)) {\n\t\t// either twidth/theight are zero, or size has changed\n\t\ttpixels = null;\n\t}\n\tif (tpixels == null) {\n\t\ttwidth = width2;\n\t\ttheight = height2;\n\t\ttpixels = new int[twidth * theight];\n\t\ttbuffer = BufferUtil.newIntBuffer(twidth * theight);\n\t}\n\n\t// copy image data into the texture\n\tint p = 0;\n\tint t = 0;\n\n\tif (BIG_ENDIAN) {\n\t\tswitch (source.format) {\n\t\tcase ALPHA:\n\t\t\tfor (int y = 0; y < source.height; y++) {\n\t\t\t\tfor (int x = 0; x < source.width; x++) {\n\t\t\t\t\ttpixels[t++] = 0xFFFFFF00 | source.pixels[p++];\n\t\t\t\t}\n\t\t\t\tt += twidth - source.width;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase RGB:\n\t\t\tfor (int y = 0; y < source.height; y++) {\n\t\t\t\tfor (int x = 0; x < source.width; x++) {\n\t\t\t\t\tint pixel = source.pixels[p++];\n\t\t\t\t\ttpixels[t++] = (pixel << 8) | 0xff;\n\t\t\t\t}\n\t\t\t\tt += twidth - source.width;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase ARGB:\n\t\t\tfor (int y = 0; y < source.height; y++) {\n\t\t\t\tfor (int x = 0; x < source.width; x++) {\n\t\t\t\t\tint pixel = source.pixels[p++];\n\t\t\t\t\ttpixels[t++] = (pixel << 8)\n\t\t\t\t\t\t\t| ((pixel >> 24) & 0xff);\n\t\t\t\t}\n\t\t\t\tt += twidth - source.width;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t} else { // LITTLE_ENDIAN\n\t\t// ARGB native, and RGBA opengl means ABGR on windows\n\t\t// for the most part just need to swap two components here\n\t\t// the sun.cpu.endian here might be \"false\", oddly enough..\n\t\t// (that's why just using an \"else\", rather than check for\n\t\t// \"little\")\n\n\t\tswitch (source.format) {\n\t\tcase ALPHA:\n\t\t\tfor (int y = 0; y < source.height; y++) {\n\t\t\t\tfor (int x = 0; x < source.width; x++) {\n\t\t\t\t\ttpixels[t++] = (source.pixels[p++] << 24) | 0x00FFFFFF;\n\t\t\t\t}\n\t\t\t\tt += twidth - source.width;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase RGB:\n\t\t\tfor (int y = 0; y < source.height; y++) {\n\t\t\t\tfor (int x = 0; x < source.width; x++) {\n\t\t\t\t\tint pixel = source.pixels[p++];\n\t\t\t\t\t// needs to be ABGR, stored in memory xRGB\n\t\t\t\t\t// so R and B must be swapped, and the x just made\n\t\t\t\t\t// FF\n\t\t\t\t\ttpixels[t++] = 0xff000000\n\t\t\t\t\t\t\t| // force opacity for good measure\n\t\t\t\t\t\t\t((pixel & 0xFF) << 16)\n\t\t\t\t\t\t\t| ((pixel & 0xFF0000) >> 16)\n\t\t\t\t\t\t\t| (pixel & 0x0000FF00);\n\t\t\t\t}\n\t\t\t\tt += twidth - source.width;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase ARGB:\n\t\t\tfor (int y = 0; y < source.height; y++) {\n\t\t\t\tfor (int x = 0; x < source.width; x++) {\n\t\t\t\t\tint pixel = source.pixels[p++];\n\t\t\t\t\t// needs to be ABGR stored in memory ARGB\n\t\t\t\t\t// so R and B must be swapped, A and G just brought\n\t\t\t\t\t// back in\n\t\t\t\t\ttpixels[t++] = ((pixel & 0xFF) << 16)\n\t\t\t\t\t\t\t| ((pixel & 0xFF0000) >> 16)\n\t\t\t\t\t\t\t| (pixel & 0xFF00FF00);\n\t\t\t\t}\n\t\t\t\tt += twidth - source.width;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\ttbuffer.put(tpixels);\n\ttbuffer.rewind();\n\n\t//\n\n\tgl.glBindTexture(GL.GL_TEXTURE_2D, tindex);\n\n\tgl.glPixelStorei(GL.GL_UNPACK_ALIGNMENT, 1);\n\t// gl.glPixelStorei(GL.GL_UNPACK_SWAP_BYTES, 0);\n\n\tgl.glTexImage2D(GL.GL_TEXTURE_2D, 0, 4, twidth, theight,\n\t// 0, GL.GL_RGBA, GL.GL_UNSIGNED_BYTE, cash.tpixels);\n\t\t\t0, GL.GL_RGBA, GL.GL_UNSIGNED_BYTE, tbuffer);\n\n\tgl.glTexParameterf(GL.GL_TEXTURE_2D,\n\t// GL.GL_TEXTURE_MAG_FILTER, GL.GL_NEAREST);\n\t\t\tGL.GL_TEXTURE_MAG_FILTER, GL.GL_LINEAR);\n\tgl.glTexParameterf(GL.GL_TEXTURE_2D,\n\t// GL.GL_TEXTURE_MIN_FILTER, GL.GL_NEAREST);\n\t\t\tGL.GL_TEXTURE_MIN_FILTER, GL.GL_LINEAR);\n\n\t//\n\n\t/* int err = */glu.gluBuild2DMipmaps(GL.GL_TEXTURE_2D, 4, twidth,\n\t\t\ttheight, GL.GL_RGBA, GL.GL_UNSIGNED_BYTE, tbuffer);\n\t// System.out.println(\"mipmap: \" + err);\n\n\t// The MAG_FILTER should only be GL_LINEAR or GL_NEAREST.\n\t// Some cards are OK with LINEAR_MIPMAP_LINEAR, but not the\n\t// Radeon 9700, which is in all the PB G4s.. Not sure if this\n\t// is an OpenGL version thing, tho it makes sense MIN_FILTER\n\t// is the only one that uses mipmapping.\n\tgl.glTexParameterf(GL.GL_TEXTURE_2D, GL.GL_TEXTURE_MAG_FILTER,\n\t\t\tGL.GL_LINEAR);\n\tgl.glTexParameterf(GL.GL_TEXTURE_2D, GL.GL_TEXTURE_MIN_FILTER,\n\t\t\tGL.GL_LINEAR_MIPMAP_LINEAR);\n\n\t// gl.glTexParameterf(GL.GL_TEXTURE_2D, GL.GL_TEXTURE_WRAP_S,\n\t// GL.GL_CLAMP);\n\t// gl.glTexParameterf(GL.GL_TEXTURE_2D, GL.GL_TEXTURE_WRAP_T,\n\t// GL.GL_CLAMP);\n\tgl.glTexParameterf(GL.GL_TEXTURE_2D, GL.GL_TEXTURE_WRAP_S,\n\t\t\tGL.GL_CLAMP_TO_EDGE);\n\tgl.glTexParameterf(GL.GL_TEXTURE_2D, GL.GL_TEXTURE_WRAP_T,\n\t\t\tGL.GL_CLAMP_TO_EDGE);\n\n\t//\n\n\tgl.glTexEnvf(GL.GL_TEXTURE_ENV, GL.GL_TEXTURE_ENV_MODE,\n\t\t\tGL.GL_MODULATE);\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "/**\n * Load the calculated color into a pre-allocated array so that it can be\n * quickly passed over to OpenGL.\n */\n", "func_signal": "private final void calcColorBuffer()", "code": "{\n\tif (colorBuffer == null) {\n\t\t// colorBuffer = BufferUtil.newFloatBuffer(4);\n\t\tcolorBuffer = new float[4];\n\t}\n\tcolorBuffer[0] = calcR;\n\tcolorBuffer[1] = calcG;\n\tcolorBuffer[2] = calcB;\n\tcolorBuffer[3] = calcA;\n\t// colorBuffer.put(0, calcR);\n\t// colorBuffer.put(1, calcG);\n\t// colorBuffer.put(2, calcB);\n\t// colorBuffer.put(3, calcA);\n\t// colorBuffer.rewind();\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "// public void ambient(float x, float y, float z) {\n// super.ambient(x, y, z);\n// calcColorBuffer();\n// gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_AMBIENT, colorBuffer, 0);\n// }\n", "func_signal": "protected void ambientFromCalc()", "code": "{\n\tsuper.ambientFromCalc();\n\tcalcColorBuffer();\n\tgl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_AMBIENT, colorBuffer, 0);\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "// public void arc(float a, float b, float c, float d,\n// float start, float stop)\n// protected void arcImpl(float x, float y, float w, float h,\n// float start, float stop)\n// ////////////////////////////////////////////////////////////\n// BOX\n// TODO P3D overrides box to turn on triangle culling, but that's a waste\n// for OpenGL. Also could just use the cube method from GL or GLUT.\n// public void box(float size)\n// public void box(float w, float h, float d) // P3D\n// ////////////////////////////////////////////////////////////\n// SPHERE\n// TODO P3D overrides sphere to turn on triangle culling, but that's a waste\n// for OpenGL. Also could just use the cube method from GL or GLUT.\n// public void sphereDetail(int res)\n// public void sphereDetail(int ures, int vres)\n// public void sphere(float r)\n// ////////////////////////////////////////////////////////////\n// BEZIER\n// public float bezierPoint(float a, float b, float c, float d, float t)\n// public float bezierTangent(float a, float b, float c, float d, float t)\n// public void bezierDetail(int detail)\n// public void bezier(float x1, float y1,\n// float x2, float y2,\n// float x3, float y3,\n// float x4, float y4)\n// public void bezier(float x1, float y1, float z1,\n// float x2, float y2, float z2,\n// float x3, float y3, float z3,\n// float x4, float y4, float z4)\n// ////////////////////////////////////////////////////////////\n// CATMULL-ROM CURVES\n// public float curvePoint(float a, float b, float c, float d, float t)\n// public float curveTangent(float a, float b, float c, float d, float t)\n// public void curveDetail(int detail)\n// public void curveTightness(float tightness)\n// public void curve(float x1, float y1,\n// float x2, float y2,\n// float x3, float y3,\n// float x4, float y4)\n// public void curve(float x1, float y1, float z1,\n// float x2, float y2, float z2,\n// float x3, float y3, float z3,\n// float x4, float y4, float z4)\n// ////////////////////////////////////////////////////////////\n// SMOOTH\n", "func_signal": "public void smooth()", "code": "{\n\tsmooth = true;\n\tif (hints[DISABLE_OPENGL_2X_SMOOTH]) {\n\t\t// gl.glEnable(GL.GL_MULTISAMPLE);\n\t\tgl.glEnable(GL.GL_POINT_SMOOTH);\n\t\tgl.glEnable(GL.GL_LINE_SMOOTH);\n\t\tgl.glEnable(GL.GL_POLYGON_SMOOTH);\n\t}\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "/**\n * Set an image directly to the screen.\n * <P>\n * TODO not optimized properly, creates multiple temporary buffers the size\n * of the image. Needs to instead use image cache, but that requires two\n * types of image cache. One for power of 2 textures and another for\n * glReadPixels/glDrawPixels data that's flipped vertically. Both have their\n * components all swapped to native.\n */\n", "func_signal": "public void set(int x, int y, PImage source)", "code": "{\n\tint[] backup = new int[source.pixels.length];\n\tSystem.arraycopy(source.pixels, 0, backup, 0, source.pixels.length);\n\tjavaToNativeARGB(source);\n\n\t// TODO is this possible without intbuffer?\n\tIntBuffer setBuffer = BufferUtil.newIntBuffer(source.pixels.length);\n\tsetBuffer.put(source.pixels);\n\tsetBuffer.rewind();\n\n\tsetRasterPos(x, (height - y) - source.height); // +source.height);\n\tgl.glDrawPixels(source.width, source.height, GL.GL_RGBA,\n\t\t\tGL.GL_UNSIGNED_BYTE, setBuffer);\n\tsource.pixels = backup;\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "// public void noFill()\n// public void fill(int rgb)\n// public void fill(int rgb, float alpha)\n// public void fill(float gray)\n// public void fill(float gray, float alpha)\n// public void fill(float x, float y, float z)\n// public void fill(float x, float y, float z, float a)\n", "func_signal": "protected void fillFromCalc()", "code": "{\n\tsuper.fillFromCalc();\n\tcalcColorBuffer();\n\tgl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_AMBIENT_AND_DIFFUSE,\n\t\t\tcolorBuffer, 0);\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "/**\n * This is really inefficient and not a good idea in OpenGL. Use get() and\n * set() with a smaller image area, or call the filter on an image instead,\n * and then draw that.\n */\n", "func_signal": "public void filter(int kind, float param)", "code": "{\n\tPImage temp = get();\n\ttemp.filter(kind, param);\n\tset(0, 0, temp);\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "// protected void rawTriangles(int start, int stop) // PGraphics3D\n", "func_signal": "protected void bindTexture(PImage texture)", "code": "{\n\tImageCache cash = (ImageCache) texture.getCache(this); // as in johnny\n\tif (cash == null) {\n\t\tcash = new ImageCache();\n\t\ttexture.setCache(this, cash);\n\t\ttexture.setModified(true);\n\t}\n\n\tif (texture.isModified()) {\n\t\t// System.out.println(\"texture modified\");\n\t\t// TODO make this more efficient and just update a sub-part\n\t\t// based on mx1 et al, also use gl function to update\n\t\t// only a sub-portion of the image.\n\t\tcash.rebind(texture);\n\t\t// clear the modified flag\n\t\ttexture.setModified(false);\n\n\t} else {\n\t\tgl.glBindTexture(GL.GL_TEXTURE_2D, cash.tindex);\n\t}\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "/**\n * Implementation of the GLU_TESS_COMBINE callback.\n * \n * @param coords\n *            is the 3-vector of the new vertex\n * @param data\n *            is the vertex data to be combined, up to four elements.\n *            This is useful when mixing colors together or any other\n *            user data that was passed in to gluTessVertex.\n * @param weight\n *            is an array of weights, one for each element of \"data\"\n *            that should be linearly combined for new values.\n * @param outData\n *            is the set of new values of \"data\" after being put back\n *            together based on the weights. it's passed back as a\n *            single element Object[] array because that's the closest\n *            that Java gets to a pointer.\n */\n", "func_signal": "public void combine(double[] coords, Object[] data, float[] weight,\n\t\tObject[] outData)", "code": "{\n\t// System.out.println(\"coords.length = \" + coords.length);\n\t// System.out.println(\"data.length = \" + data.length);\n\t// System.out.println(\"weight.length = \" + weight.length);\n\t// for (int i = 0; i < data.length; i++) {\n\t// System.out.println(i + \" \" + data[i].getClass().getName() + \" \" +\n\t// weight[i]);\n\t// }\n\n\tdouble[] vertex = new double[coords.length];\n\tvertex[0] = coords[0];\n\tvertex[1] = coords[1];\n\tvertex[2] = coords[2];\n\t// System.out.println(\"combine \" +\n\t// vertex[0] + \" \" + vertex[1] + \" \" + vertex[2]);\n\n\t// this is just 3, so nothing interesting to bother combining\n\t// System.out.println(\"data length \" + ((double[]) data[0]).length);\n\n\t// not gonna bother doing any combining,\n\t// since no user data is being passed in.\n\t/*\n\t * for (int i = 3; i < 6; i++) { vertex[i] = weight[0] ((double[])\n\t * data[0])[i] + weight[1] ((double[]) data[1])[i] + weight[2]\n\t * ((double[]) data[2])[i] + weight[3] ((double[]) data[3])[i]; }\n\t */\n\toutData[0] = vertex;\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "/**\n * This uses the tesselation functions from GLU to handle triangulation to\n * convert the character into a series of shapes.\n * <p/>\n * <EM>No attempt has been made to optimize this code</EM>\n * <p/>\n * TODO: Should instead override textPlacedImpl() because createGlyphVector\n * takes a char array. Or better yet, cache the font on a per-char basis, so\n * that it's not being re-tessellated each time, could make it into a\n * display list which would be nice and speedy.\n * <p/>\n * Also a problem where some fonts seem to be a bit slight, as if the\n * control points aren't being mapped quite correctly. Probably doing\n * something dumb that the control points don't map to P5's control points.\n * Perhaps it's returning b-spline data from the TrueType font? Though it\n * seems like that would make a lot of garbage rather than just a little\n * flattening.\n * <p/>\n * There also seems to be a bug that is causing a line (but not a filled\n * triangle) back to the origin on some letters (i.e. a capital L when\n * tested with Akzidenz Grotesk Light). But this won't be visible with the\n * stroke shut off, so tabling that bug for now.\n */\n", "func_signal": "protected void textCharShapeImpl(char ch, float x, float y)", "code": "{\n\t// save the current stroke because it needs to be disabled\n\t// while the text is being drawn\n\tboolean strokeSaved = stroke;\n\tstroke = false;\n\n\t// six element array received from the Java2D path iterator\n\tfloat textPoints[] = new float[6];\n\n\t// array passed to createGylphVector\n\tchar textArray[] = new char[] { ch };\n\n\tGraphics2D graphics = (Graphics2D) parent.getGraphics();\n\tFontRenderContext frc = graphics.getFontRenderContext();\n\tFont font = textFont.getFont();\n\tGlyphVector gv = font.createGlyphVector(frc, textArray);\n\tShape shp = gv.getOutline();\n\t// PathIterator iter = shp.getPathIterator(null, 0.05);\n\tPathIterator iter = shp.getPathIterator(null);\n\n\tglu.gluTessBeginPolygon(tobj, null);\n\t// second param to gluTessVertex is for a user defined object that\n\t// contains\n\t// additional info about this point, but that's not needed for anything\n\n\tfloat lastX = 0;\n\tfloat lastY = 0;\n\n\t// unfortunately the tesselator won't work properly unless a\n\t// new array of doubles is allocated for each point. that bites ass,\n\t// but also just reaffirms that in order to make things fast,\n\t// display lists will be the way to go.\n\tdouble vertex[];\n\n\tfinal boolean DEBUG_OPCODES = false; // true;\n\n\twhile (!iter.isDone()) {\n\t\tint type = iter.currentSegment(textPoints);\n\t\tswitch (type) {\n\t\tcase PathIterator.SEG_MOVETO: // 1 point (2 vars) in textPoints\n\t\tcase PathIterator.SEG_LINETO: // 1 point\n\t\t\tif (type == PathIterator.SEG_MOVETO) {\n\t\t\t\tif (DEBUG_OPCODES) {\n\t\t\t\t\tSystem.out.println(\"moveto\\t\" + textPoints[0] + \"\\t\"\n\t\t\t\t\t\t\t+ textPoints[1]);\n\t\t\t\t}\n\t\t\t\tglu.gluTessBeginContour(tobj);\n\t\t\t} else {\n\t\t\t\tif (DEBUG_OPCODES) {\n\t\t\t\t\tSystem.out.println(\"lineto\\t\" + textPoints[0] + \"\\t\"\n\t\t\t\t\t\t\t+ textPoints[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tvertex = new double[] { x + textPoints[0], y + textPoints[1], 0 };\n\t\t\tglu.gluTessVertex(tobj, vertex, 0, vertex);\n\t\t\tlastX = textPoints[0];\n\t\t\tlastY = textPoints[1];\n\t\t\tbreak;\n\n\t\tcase PathIterator.SEG_QUADTO: // 2 points\n\t\t\tif (DEBUG_OPCODES) {\n\t\t\t\tSystem.out.println(\"quadto\\t\" + textPoints[0] + \"\\t\"\n\t\t\t\t\t\t+ textPoints[1] + \"\\t\" + textPoints[2] + \"\\t\"\n\t\t\t\t\t\t+ textPoints[3]);\n\t\t\t}\n\n\t\t\tfor (int i = 1; i < bezierDetail; i++) {\n\t\t\t\tfloat t = (float) i / (float) bezierDetail;\n\t\t\t\tvertex = new double[] {\n\t\t\t\t\t\tx\n\t\t\t\t\t\t\t\t+ bezierPoint(\n\t\t\t\t\t\t\t\t\t\tlastX,\n\t\t\t\t\t\t\t\t\t\tlastX\n\t\t\t\t\t\t\t\t\t\t\t\t+ (float) ((textPoints[0] - lastX) * 2 / 3.0),\n\t\t\t\t\t\t\t\t\t\ttextPoints[2]\n\t\t\t\t\t\t\t\t\t\t\t\t+ (float) ((textPoints[0] - textPoints[2]) * 2 / 3.0),\n\t\t\t\t\t\t\t\t\t\ttextPoints[2], t),\n\t\t\t\t\t\ty\n\t\t\t\t\t\t\t\t+ bezierPoint(\n\t\t\t\t\t\t\t\t\t\tlastY,\n\t\t\t\t\t\t\t\t\t\tlastY\n\t\t\t\t\t\t\t\t\t\t\t\t+ (float) ((textPoints[1] - lastY) * 2 / 3.0),\n\t\t\t\t\t\t\t\t\t\ttextPoints[3]\n\t\t\t\t\t\t\t\t\t\t\t\t+ (float) ((textPoints[1] - textPoints[3]) * 2 / 3.0),\n\t\t\t\t\t\t\t\t\t\ttextPoints[3], t), 0.0f };\n\t\t\t\tglu.gluTessVertex(tobj, vertex, 0, vertex);\n\t\t\t}\n\n\t\t\tlastX = textPoints[2];\n\t\t\tlastY = textPoints[3];\n\t\t\tbreak;\n\n\t\tcase PathIterator.SEG_CUBICTO: // 3 points\n\t\t\tif (DEBUG_OPCODES) {\n\t\t\t\tSystem.out.println(\"cubicto\\t\" + textPoints[0] + \"\\t\"\n\t\t\t\t\t\t+ textPoints[1] + \"\\t\" + textPoints[2] + \"\\t\"\n\t\t\t\t\t\t+ textPoints[3] + \"\\t\" + textPoints[4] + \"\\t\"\n\t\t\t\t\t\t+ textPoints[5]);\n\t\t\t}\n\n\t\t\tfor (int i = 1; i < bezierDetail; i++) {\n\t\t\t\tfloat t = (float) i / (float) bezierDetail;\n\t\t\t\tvertex = new double[] {\n\t\t\t\t\t\tx\n\t\t\t\t\t\t\t\t+ bezierPoint(lastX, textPoints[0],\n\t\t\t\t\t\t\t\t\t\ttextPoints[2], textPoints[4], t),\n\t\t\t\t\t\ty\n\t\t\t\t\t\t\t\t+ bezierPoint(lastY, textPoints[1],\n\t\t\t\t\t\t\t\t\t\ttextPoints[3], textPoints[5], t), 0 };\n\t\t\t\tglu.gluTessVertex(tobj, vertex, 0, vertex);\n\t\t\t}\n\n\t\t\tlastX = textPoints[4];\n\t\t\tlastY = textPoints[5];\n\t\t\tbreak;\n\n\t\tcase PathIterator.SEG_CLOSE:\n\t\t\tif (DEBUG_OPCODES) {\n\t\t\t\tSystem.out.println(\"close\");\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\tglu.gluTessEndContour(tobj);\n\t\t\tbreak;\n\t\t}\n\t\titer.next();\n\t}\n\tglu.gluTessEndPolygon(tobj);\n\n\t// re-enable stroke if it was in use before\n\tstroke = strokeSaved;\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "// POINTS (override from P3D)\n", "func_signal": "protected void renderPoints(int start, int stop)", "code": "{\n\tfloat sw = vertices[lines[start][VERTEX1]][SW];\n\tif (sw > 0) {\n\t\tgl.glPointSize(sw); // can only be set outside glBegin/glEnd\n\t\tgl.glBegin(GL.GL_POINTS);\n\t\tfor (int i = start; i < stop; i++) {\n\t\t\tfloat[] a = vertices[points[i][VERTEX1]];\n\n\t\t\tgl.glColor4f(a[SR], a[SG], a[SB], a[SA]);\n\t\t\tgl.glVertex3f(a[VX], a[VY], a[VZ]);\n\t\t}\n\t\tgl.glEnd();\n\t}\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "/**\n * Report on anything from glError(). Don't use this inside glBegin/glEnd\n * otherwise it'll throw an GL_INVALID_OPERATION error.\n */\n", "func_signal": "public void report(String where)", "code": "{\n\tif (!hints[DISABLE_OPENGL_ERROR_REPORT]) {\n\t\tint err = gl.glGetError();\n\t\tif (err != 0) {\n\t\t\tString errString = glu.gluErrorString(err);\n\t\t\tString msg = \"OpenGL error \" + err + \" at \" + where + \": \"\n\t\t\t\t\t+ errString;\n\t\t\tPGraphics.showWarning(msg);\n\t\t}\n\t}\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "// public void noLights() {\n// super.noLights();\n// gl.glDisable(GL.GL_LIGHTING);\n// }\n", "func_signal": "public void ambientLight(float r, float g, float b)", "code": "{\n\tsuper.ambientLight(r, g, b);\n\tglLightEnable(lightCount - 1);\n\tglLightAmbient(lightCount - 1);\n\tglLightPosition(lightCount - 1);\n\tglLightFalloff(lightCount - 1);\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "// LOAD/UPDATE PIXELS\n", "func_signal": "public void loadPixels()", "code": "{\n\tif ((pixels == null) || (pixels.length != width * height)) {\n\t\tpixels = new int[width * height];\n\t\tpixelBuffer = BufferUtil.newIntBuffer(pixels.length);\n\t}\n\n\t/*\n\t * for (int y = 0; y < height; y++) { // or SKIP_PIXELS with ywidth\n\t * //gl.glPixelStorei(GL.GL_PACK_SKIP_ROWS, (height-1) - y);\n\t * gl.glReadPixels(0, y, width, y + 1, GL.GL_RGBA, GL.GL_UNSIGNED_BYTE,\n\t * pixels); } gl.glPixelStorei(GL.GL_PACK_SKIP_ROWS, 0);\n\t */\n\n\tgl.glReadPixels(0, 0, width, height, GL.GL_RGBA, GL.GL_UNSIGNED_BYTE,\n\t\t\tpixelBuffer);\n\tpixelBuffer.get(pixels);\n\tpixelBuffer.rewind();\n\n\t// for (int i = 0; i < 5; i++) {\n\t// System.out.println(PApplet.hex(pixels[i]));\n\t// }\n\n\t/*\n\t * int temp[] = new int[width]; // 3 rows, skips the middle\n\t * \n\t * for (int y = 0; y < height/2; y++) { int yy = (height - 1) - y;\n\t * System.arraycopy(pixels, ywidth, temp, 0, width);\n\t * System.arraycopy(pixels, yywidth, pixels, ywidth, width);\n\t * System.arraycopy(temp, 0, pixels, yywidth, width); }\n\t */\n\n\t/*\n\t * // now need to swap the RGBA components to ARGB (big endian) for (int\n\t * i = 0; i < pixels.length; i++) { //pixels[i] = ((pixels[i] & 0xff) <<\n\t * 24) | pixels[i] = ((pixels[i] << 24) & 0xff) | // safer? ((pixels[i]\n\t * >> 8) & 0xffffff); }\n\t */\n\n\t// flip vertically (opengl stores images upside down),\n\t// and swap RGBA components to ARGB (big endian)\n\tint index = 0;\n\tint yindex = (height - 1) * width;\n\tfor (int y = 0; y < height / 2; y++) {\n\t\tif (BIG_ENDIAN) {\n\t\t\tfor (int x = 0; x < width; x++) {\n\t\t\t\tint temp = pixels[index];\n\t\t\t\t// ignores alpha component, just sets it opaque\n\t\t\t\tpixels[index] = 0xff000000 | ((pixels[yindex] >> 8) & 0x00ffffff);\n\t\t\t\tpixels[yindex] = 0xff000000 | ((temp >> 8) & 0x00ffffff);\n\n\t\t\t\tindex++;\n\t\t\t\tyindex++;\n\t\t\t}\n\t\t} else { // LITTLE_ENDIAN, convert ABGR to ARGB\n\t\t\tfor (int x = 0; x < width; x++) {\n\t\t\t\tint temp = pixels[index];\n\n\t\t\t\t// identical to endPixels because only two\n\t\t\t\t// components are being swapped\n\t\t\t\tpixels[index] = 0xff000000\n\t\t\t\t\t\t| ((pixels[yindex] << 16) & 0xff0000)\n\t\t\t\t\t\t| (pixels[yindex] & 0xff00)\n\t\t\t\t\t\t| ((pixels[yindex] >> 16) & 0xff);\n\n\t\t\t\tpixels[yindex] = 0xff000000 | ((temp << 16) & 0xff0000)\n\t\t\t\t\t\t| (temp & 0xff00) | ((temp >> 16) & 0xff);\n\n\t\t\t\tindex++;\n\t\t\t\tyindex++;\n\t\t\t}\n\t\t}\n\t\tyindex -= width * 2;\n\t}\n\n\t// When height is an odd number, the middle line needs to be\n\t// endian swapped, but not y-swapped.\n\t// http://dev.processing.org/bugs/show_bug.cgi?id=944\n\tif ((height % 2) == 1) {\n\t\tindex = (height / 2) * width;\n\t\tif (BIG_ENDIAN) {\n\t\t\tfor (int x = 0; x < width; x++) {\n\t\t\t\t// ignores alpha component, just sets it opaque\n\t\t\t\tpixels[index] = 0xff000000 | ((pixels[index] >> 8) & 0x00ffffff);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (int x = 0; x < width; x++) {\n\t\t\t\tpixels[index] = 0xff000000\n\t\t\t\t\t\t| ((pixels[index] << 16) & 0xff0000)\n\t\t\t\t\t\t| (pixels[index] & 0xff00)\n\t\t\t\t\t\t| ((pixels[index] >> 16) & 0xff);\n\t\t\t}\n\t\t}\n\t}\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "/**\n * Skips remaining data and closes the stream.\n *\n * @throws java.io.IOException\n *\t\tif an error occurred reading the data\n */\n", "func_signal": "public void close()\n   throws IOException", "code": "{\n   while (! this.atEndOfData) {\n      char ch = this.savedChar;\n\n      if (ch == 0) {\n         ch = this.reader.read();\n      } else {\n         this.savedChar = 0;\n      }\n\n      if (ch == ']') {\n         char ch2 = this.reader.read();\n\n         if (ch2 == ']') {\n            char ch3 = this.reader.read();\n\n            if (ch3 == '>') {\n               break;\n            }\n\n            this.savedChar = ch2;\n            this.reader.unread(ch3);\n         } else {\n            this.reader.unread(ch2);\n         }\n      }\n   }\n\n   this.atEndOfData = true;\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\xml\\CDATAReader.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "/**\n * Delete any texture memory that had been allocated. Added for 0125 to\n * deal with memory problems reported in Bug #150.\n */\n", "func_signal": "protected void finalize()", "code": "{\n\tif (textureDeleteQueue.length == textureDeleteQueueCount) {\n\t\ttextureDeleteQueue = (int[]) PApplet.expand(textureDeleteQueue);\n\t}\n\tif (tindex != -1) {\n\t\ttextureDeleteQueue[textureDeleteQueueCount++] = tindex;\n\t}\n}", "path": "processing-gl-osgi\\src\\main\\java\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "keiono/processing-osgi", "stars": 4, "license": "None", "language": "java", "size": 6251}
{"docstring": "/**\n * The main method instantiates a customized class loader with the\n * UNO jar files added to the search path and loads the application class,\n * which is specified in the Main-Class attribute of the\n * com/sun/star/lib/Loader.class entry of the manifest file or\n * as first parameter in the argument list.\n */\n", "func_signal": "public static void main( String[] arguments ) throws Exception", "code": "{\n    \n    // get the name of the class to be loaded from the manifest\n    String className = null;\n    Class clazz = Loader.class;\n    ClassLoader loader = clazz.getClassLoader();\n    Vector res = new Vector();\n    try {\n        Enumeration en = loader.getResources( \"META-INF/MANIFEST.MF\" );\n        while ( en.hasMoreElements() ) {\n            res.add( (URL) en.nextElement() );\n        }\n        // the jarfile with the com/sun/star/lib/loader/Loader.class\n        // per-entry attribute is most probably the last resource in the\n        // list, therefore search backwards\n        for ( int i = res.size() - 1; i >= 0; i-- ) {\n            URL jarurl = (URL) res.elementAt( i );\n            try {\n                JarURLConnection jarConnection =\n                    (JarURLConnection) jarurl.openConnection();\n                Manifest mf = jarConnection.getManifest();\n                Attributes attrs = (Attributes) mf.getAttributes(\n                    \"com/sun/star/lib/loader/Loader.class\" );\n                if ( attrs != null ) {\n                    className = attrs.getValue( \"Application-Class\" );\n                    if ( className != null )\n                        break;\n                }\n            } catch ( IOException e ) {\n                // if an I/O error occurs when opening a new\n                // JarURLConnection, ignore this manifest file\n                System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                                    \"main: bad manifest file: \" + e );\n            }\n        }\n    } catch ( IOException e ) {\n        // if an I/O error occurs when getting the manifest resources,\n        // try to get the name of the class to be loaded from the argument\n        // list\n        System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                            \"main: cannot get manifest resources: \" + e );\n    }\n    \n    // if no manifest entry was found, check first the system property\n    // Application-Class and if it is not set get the name of the class\n    // to be loaded from the argument list\n    String[] args = arguments;            \n    if ( className == null ) {\n        className = System.getProperty(\"Application-Class\");\n        \n        if (className == null) {\n            if ( arguments.length > 0 ) {            \n                className = arguments[0];            \n                args = new String[arguments.length - 1];\n                System.arraycopy( arguments, 1, args, 0, args.length );\n            } else {\n                throw new IllegalArgumentException(\n                    \"The name of the class to be loaded must be either \" +\n                    \"specified in the Main-Class attribute of the \" +\n                    \"com/sun/star/lib/loader/Loader.class entry \" +\n                    \"of the manifest file or as a command line argument.\" );\n            }\n        }\n    }\n    \n    // load the class with the customized class loader and\n    // invoke the main method\n    if ( className != null ) {\n        ClassLoader cl = getCustomLoader();\n        Class c = cl.loadClass( className );\n        Method m = c.getMethod( \"main\", new Class[] { String[].class } );\n        m.invoke( null, new Object[] { args } );\n    }\n}", "path": "Macro_04\\src\\com\\sun\\star\\lib\\loader\\Loader.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * Constructs a <code>WinRegKey</code>.\n */\n", "func_signal": "public WinRegKey( String rootKeyName, String subKeyName )", "code": "{\n    m_rootKeyName = rootKeyName;\n    m_subKeyName = subKeyName;\n}", "path": "Pitonyak_0907_DocType\\src\\com\\sun\\star\\lib\\loader\\WinRegKey.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * Gets the installation path from an environment variable.\n *   \n * <p>This method is called on all platforms.\n * Note, that in Java 1.3.1 and Java 1.4 System.getenv() throws \n * java.lang.Error and therefore this method returns null for those \n * Java versions.</p>\n *\n * @return the installation path or <code>null</code>, if no installation\n *         was specified in the environment variable or if an error occured\n */\n", "func_signal": "private static String getPathFromEnvVar( String var )", "code": "{        \n\n    String path = null;\n    \n    try {\n        path = System.getenv( var );            \n    } catch ( SecurityException e ) {\n        // if a SecurityException was thrown, return <code>null</code>\n    } catch ( java.lang.Error err ) {\n        // System.getenv() throws java.lang.Error in Java 1.3.1 and \n        // Java 1.4\n    }\n    \n    return path;\n}", "path": "Macro_17_SaveAs\\src\\com\\sun\\star\\lib\\loader\\InstallationFinder.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * Gets the customized class loader with the UNO jar files added to the\n * search path.\n *\n * @return the customized class loader       \n */\n", "func_signal": "public static synchronized ClassLoader getCustomLoader()", "code": "{\n\n    final String CLASSESDIR = \"classes\";\n    final String JUHJAR = \"juh.jar\";\n    \n    if ( m_Loader == null ) {\n        \n        // get the urls from which to load classes and resources\n        // from the class path\n        Vector vec = new Vector();\n        String classpath = null;\n        try {\n            classpath = System.getProperty( \"java.class.path\" );\n        } catch ( SecurityException e ) {\n            // don't add the class path entries to the list of class\n            // loader URLs\n            System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                \"getCustomLoader: cannot get system property \" +\n                \"java.class.path: \" + e );\n        }\n        if ( classpath != null ) {\n            addUrls(vec, classpath, File.pathSeparator);\n        }\n        \n        // get the urls from which to load classes and resources       \n        // from the UNO installation\n        String path = InstallationFinder.getPath();        \n        if ( path != null ) {            \n            File fClassesDir = new File( path, CLASSESDIR );\n            File fJuh = new File( fClassesDir, JUHJAR );\n            if ( fJuh.exists() ) {\n                URL[] clurls = new URL[1];\n                try {\n                    clurls[0] = fJuh.toURL();                \n                    ClassLoader cl = new CustomURLClassLoader( clurls );\n                    Class c = cl.loadClass(\n                        \"com.sun.star.comp.helper.UnoInfo\" );\n                    Method m = c.getMethod( \"getJars\", (Class[]) null );\n                    URL[] jarurls = (URL[]) m.invoke(\n                        null, (Object[]) null );\n                    for ( int i = 0; i < jarurls.length; i++ ) {\n                        vec.add( jarurls[i] );\n                    }\n                } catch ( MalformedURLException e ) {\n                    // don't add the UNO jar files to the list of class\n                    // loader URLs\n                    System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                        \"getCustomLoader: cannot add UNO jar files: \" + e );\n                } catch ( ClassNotFoundException e ) {\n                    // don't add the UNO jar files to the list of class\n                    // loader URLs\n                    System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                        \"getCustomLoader: cannot add UNO jar files: \" + e );\n                } catch ( NoSuchMethodException e ) {\n                    // don't add the UNO jar files to the list of class\n                    // loader URLs\n                    System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                        \"getCustomLoader: cannot add UNO jar files: \" + e );\n                } catch ( IllegalAccessException e ) {\n                    // don't add the UNO jar files to the list of class\n                    // loader URLs\n                    System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                        \"getCustomLoader: cannot add UNO jar files: \" + e );\n                } catch ( InvocationTargetException e ) {\n                    // don't add the UNO jar files to the list of class\n                    // loader URLs\n                    System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                        \"getCustomLoader: cannot add UNO jar files: \" + e );\n                }\n            } else {\n                callUnoinfo(path, vec);\n            }\n        } else {\n            System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                \"getCustomLoader: no UNO installation found!\" );\n        }\n    \n        // copy urls to array\n        URL[] urls = new URL[vec.size()];\n        vec.toArray( urls );\n\n        // instantiate class loader\n        m_Loader = new CustomURLClassLoader( urls );            \n    }\n\n    return m_Loader;        \n}", "path": "Pitonyak_1328_RemoveEmptySpace\\src\\com\\sun\\star\\lib\\loader\\Loader.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * Gets the customized class loader with the UNO jar files added to the\n * search path.\n *\n * @return the customized class loader       \n */\n", "func_signal": "public static synchronized ClassLoader getCustomLoader()", "code": "{\n\n    final String CLASSESDIR = \"classes\";\n    final String JUHJAR = \"juh.jar\";\n    \n    if ( m_Loader == null ) {\n        \n        // get the urls from which to load classes and resources\n        // from the class path\n        Vector vec = new Vector();\n        String classpath = null;\n        try {\n            classpath = System.getProperty( \"java.class.path\" );\n        } catch ( SecurityException e ) {\n            // don't add the class path entries to the list of class\n            // loader URLs\n            System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                \"getCustomLoader: cannot get system property \" +\n                \"java.class.path: \" + e );\n        }\n        if ( classpath != null ) {\n            addUrls(vec, classpath, File.pathSeparator);\n        }\n        \n        // get the urls from which to load classes and resources       \n        // from the UNO installation\n        String path = InstallationFinder.getPath();        \n        if ( path != null ) {            \n            File fClassesDir = new File( path, CLASSESDIR );\n            File fJuh = new File( fClassesDir, JUHJAR );\n            if ( fJuh.exists() ) {\n                URL[] clurls = new URL[1];\n                try {\n                    clurls[0] = fJuh.toURL();                \n                    ClassLoader cl = new CustomURLClassLoader( clurls );\n                    Class c = cl.loadClass(\n                        \"com.sun.star.comp.helper.UnoInfo\" );\n                    Method m = c.getMethod( \"getJars\", (Class[]) null );\n                    URL[] jarurls = (URL[]) m.invoke(\n                        null, (Object[]) null );\n                    for ( int i = 0; i < jarurls.length; i++ ) {\n                        vec.add( jarurls[i] );\n                    }\n                } catch ( MalformedURLException e ) {\n                    // don't add the UNO jar files to the list of class\n                    // loader URLs\n                    System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                        \"getCustomLoader: cannot add UNO jar files: \" + e );\n                } catch ( ClassNotFoundException e ) {\n                    // don't add the UNO jar files to the list of class\n                    // loader URLs\n                    System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                        \"getCustomLoader: cannot add UNO jar files: \" + e );\n                } catch ( NoSuchMethodException e ) {\n                    // don't add the UNO jar files to the list of class\n                    // loader URLs\n                    System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                        \"getCustomLoader: cannot add UNO jar files: \" + e );\n                } catch ( IllegalAccessException e ) {\n                    // don't add the UNO jar files to the list of class\n                    // loader URLs\n                    System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                        \"getCustomLoader: cannot add UNO jar files: \" + e );\n                } catch ( InvocationTargetException e ) {\n                    // don't add the UNO jar files to the list of class\n                    // loader URLs\n                    System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                        \"getCustomLoader: cannot add UNO jar files: \" + e );\n                }\n            } else {\n                callUnoinfo(path, vec);\n            }\n        } else {\n            System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                \"getCustomLoader: no UNO installation found!\" );\n        }\n    \n        // copy urls to array\n        URL[] urls = new URL[vec.size()];\n        vec.toArray( urls );\n\n        // instantiate class loader\n        m_Loader = new CustomURLClassLoader( urls );            \n    }\n\n    return m_Loader;        \n}", "path": "Macro_04\\src\\com\\sun\\star\\lib\\loader\\Loader.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * Gets the installation path from the PATH environment variable.\n *\n * <p>This method is called on Unix/Linux platforms only.\n * An installation is found, if the executable 'soffice' or a symbolic link\n * is in one of the directories listed in the PATH environment variable.\n * Note, that in Java 1.3.1 and Java 1.4 System.getenv() throws\n * java.lang.Error and therefore this method returns null for those\n * Java versions.</p>\n *\n * @return the installation path or <code>null</code>, if no installation\n *         was found or if an error occured\n */\n", "func_signal": "private static String getPathFromPathEnvVar()", "code": "{\n\n    final String PATH_ENVVAR_NAME = \"PATH\";\n    \n    String path = null;\n    String str = null;\n    \n    try {\n        str = System.getenv( PATH_ENVVAR_NAME );\n    } catch ( SecurityException e ) {\n        // if a SecurityException was thrown, return <code>null</code>\n        return null;\n    } catch ( java.lang.Error err ) {\n        // System.getenv() throws java.lang.Error in Java 1.3.1 and \n        // Java 1.4\n        return null;\n    }\n\n    if ( str != null ) {\n        StringTokenizer tokens = new StringTokenizer(\n            str, File.pathSeparator );\n        while ( tokens.hasMoreTokens() ) {\n            File file = new File( tokens.nextToken(), SOFFICE );\n            try {\n                if ( file.exists() ) {\n                    try {                   \n                        // resolve symlink\n                        path = file.getCanonicalFile().getParent();\n                        if ( path != null )\n                            break;\n                    } catch ( IOException e ) {\n                        // if an I/O exception is thrown, ignore this\n                        // path entry and try the next one\n                        System.err.println( \"com.sun.star.lib.loader.\" +\n                            \"InstallationFinder::getPathFromEnvVar: \" +\n                            \"bad path: \" + e );\n                    }  \n                }\n            } catch ( SecurityException e ) {\n                // if a SecurityException was thrown, ignore this path\n                // entry and try the next one\n            }\n        }\n    }\n    \n    return path;\n}", "path": "Macro_17_SaveAs\\src\\com\\sun\\star\\lib\\loader\\InstallationFinder.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * Translates an OOo-internal absolute file URL reference (encoded using\n * UTF-8) into a Java canonical pathname.\n *\n * @param oooUrl any URL reference; any fragment part is ignored\n *\n * @return if the given URL is a valid absolute, local (that is, the host\n * part is empty or equal to \"localhost\", ignoring case) file URL, it is\n * converted into an absolute canonical pathname; otherwise,\n * <code>null</code> is returned\n */\n", "func_signal": "private static String getCanonicalPathFromFileURL( String oooUrl )", "code": "{\n    \n    String prefix = \"file://\";\n    if (oooUrl.length() < prefix.length()\n        || !oooUrl.substring(0, prefix.length()).toLowerCase().equals(\n            prefix))\n    {\n        return null;\n    }        \n    StringBuffer buf = new StringBuffer(prefix);\n    int n = oooUrl.indexOf('/', prefix.length());\n    if (n < 0) {\n        n = oooUrl.length();\n    }\n    String host = oooUrl.substring(prefix.length(), n);\n    if (host.length() != 0 && !host.toLowerCase().equals(\"localhost\")) {\n        return null;\n    }\n    buf.append(host);\n    if (n == oooUrl.length()) {\n        buf.append('/');\n    } else {\n    loop:\n        while (n < oooUrl.length()) {\n            buf.append('/');\n            ++n;\n            int n2 = oooUrl.indexOf('/', n);\n            if (n2 < 0) {\n                n2 = oooUrl.length();\n            }\n            while (n < n2) {\n                char c = oooUrl.charAt(n);\n                switch (c) {\n                case '%':\n                    byte[] bytes = new byte[(n2 - n) / 3];\n                    int len = 0;\n                    while (oooUrl.length() - n > 2\n                           && oooUrl.charAt(n) == '%')\n                    {\n                        int d1 = Character.digit(oooUrl.charAt(n + 1), 16);\n                        int d2 = Character.digit(oooUrl.charAt(n + 2), 16);\n                        if (d1 < 0 || d2 < 0) {\n                            break;\n                        }\n                        int d = 16 * d1 + d2;\n                        if (d == '/') {\n                            return null;\n                        }\n                        bytes[len++] = (byte) d;\n                        n += 3;\n                    }\n                    String s;\n                    try {\n                        s = new String(bytes, 0, len, \"UTF-8\");\n                    } catch (UnsupportedEncodingException e) {\n                        return null;\n                    }\n                    buf.append(s);\n                    break;\n\n                case '#':\n                    break loop;\n\n                default:\n                    buf.append(c);\n                    ++n;\n                    break;\n                }\n            }\n        }\n    }\n    URL url;\n    try {\n        url = new URL(buf.toString());\n    } catch (MalformedURLException e) {\n        return null;\n    }\n    String path = url.getFile();\n    String fragment = url.getRef();\n    if (fragment != null) {\n        path += '#' + fragment;\n    }\n    String ret = null;\n    File file = new File( path, SOFFICE );\n    try {\n        if ( file.isAbsolute() && file.exists() ) {\n            try {\n                // resolve symlink\n                ret = file.getCanonicalFile().getParent();\n            } catch ( IOException e ) {\n                return null;\n            }     \n        }\n    } catch ( SecurityException e ) {\n        return null;\n    }\n    \n    return ret;\n}", "path": "Pitonyak_1221_SaveDocument\\src\\com\\sun\\star\\lib\\loader\\InstallationFinder.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * Reads a value for the specified value name.\n */\n", "func_signal": "private byte[] getValue( String valueName ) throws WinRegKeyException", "code": "{\n    \n    byte[] result = null;\n    long[] hkey = {0};\n    \n    // open the specified registry key\n    boolean bRet = false;\n    long[] hroot = {0};\n    if ( m_rootKeyName.equals( \"HKEY_CLASSES_ROOT\" ) ) {\n        bRet = winreg_RegOpenClassesRoot( hroot );\n    } else if ( m_rootKeyName.equals( \"HKEY_CURRENT_CONFIG\" ) ) {\n        bRet = winreg_RegOpenCurrentConfig( hroot );\n    } else if ( m_rootKeyName.equals( \"HKEY_CURRENT_USER\" ) ) {\n        bRet = winreg_RegOpenCurrentUser( hroot );\n    } else if ( m_rootKeyName.equals( \"HKEY_LOCAL_MACHINE\" ) ) {\n        bRet = winreg_RegOpenLocalMachine( hroot );\n    } else if ( m_rootKeyName.equals( \"HKEY_USERS\" ) ) {\n        bRet = winreg_RegOpenUsers( hroot );\n    } else {\n        throw new WinRegKeyException( \"unknown root registry key!\");\n    }\n    if ( !bRet ) {\n        throw new WinRegKeyException( \"opening root registry key \" +\n            \"failed!\" );\n    }\n    if ( !winreg_RegOpenKeyEx( hroot[0], m_subKeyName, hkey ) ) {\n        if ( !winreg_RegCloseKey( hroot[0] ) ) {\n            throw new WinRegKeyException( \"opening registry key and \" +\n                \"releasing root registry key handle failed!\" );\n        }            \n        throw new WinRegKeyException( \"opening registry key failed!\" );\n    }\n        \n    // get the size of the longest data component among the key's values\n    long[] subkeys = {0};\n    long[] maxSubkeyLen = {0};\n    long[] values = {0};\n    long[] maxValueNameLen = {0};\n    long[] maxValueLen = {0};\n    long[] secDescriptor = {0};\n    if ( !winreg_RegQueryInfoKey( hkey[0], subkeys, maxSubkeyLen,\n             values, maxValueNameLen, maxValueLen, secDescriptor ) ) {\n        if ( !winreg_RegCloseKey( hkey[0] ) ||\n             !winreg_RegCloseKey( hroot[0] ) ) {\n            throw new WinRegKeyException( \"retrieving information about \" +\n                \"the registry key and releasing registry key handles \" +\n                \"failed!\" );\n        }                \n        throw new WinRegKeyException( \"retrieving information about \" +\n            \"the registry key failed!\" );\n    }\n    \n    // get the data for the specified value name\n    byte[] buffer = new byte[ (int) maxValueLen[0] ];        \n    long[] size = new long[1];\n    size[0] = buffer.length;\n    long[] type = new long[1];\n    type[0] = 0;\n    if ( !winreg_RegQueryValueEx( hkey[0], valueName, type, buffer,\n             size ) ) {\n        if ( !winreg_RegCloseKey( hkey[0] ) ||\n             !winreg_RegCloseKey( hroot[0] ) ) {\n            throw new WinRegKeyException( \"retrieving data for the \" +\n                \"specified value name and releasing registry key handles \" +\n                \"failed!\" );\n        }\n        throw new WinRegKeyException( \"retrieving data for the \" +\n            \"specified value name failed!\" );\n    }\n    \n    // release registry key handles\n    if ( !winreg_RegCloseKey( hkey[0] ) ||\n         !winreg_RegCloseKey( hroot[0] ) ) {\n        throw new WinRegKeyException( \"releasing registry key handles \" +\n            \"failed!\" );\n    }\n    \n    result = new byte[ (int) size[0] ];\n    System.arraycopy( buffer, 0, result, 0, (int)size[0] );\n    \n    return result;\n}", "path": "Pitonyak_0907_DocType\\src\\com\\sun\\star\\lib\\loader\\WinRegKey.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * Reads a value for the specified value name.\n */\n", "func_signal": "private byte[] getValue( String valueName ) throws WinRegKeyException", "code": "{\n    \n    byte[] result = null;\n    long[] hkey = {0};\n    \n    // open the specified registry key\n    boolean bRet = false;\n    long[] hroot = {0};\n    if ( m_rootKeyName.equals( \"HKEY_CLASSES_ROOT\" ) ) {\n        bRet = winreg_RegOpenClassesRoot( hroot );\n    } else if ( m_rootKeyName.equals( \"HKEY_CURRENT_CONFIG\" ) ) {\n        bRet = winreg_RegOpenCurrentConfig( hroot );\n    } else if ( m_rootKeyName.equals( \"HKEY_CURRENT_USER\" ) ) {\n        bRet = winreg_RegOpenCurrentUser( hroot );\n    } else if ( m_rootKeyName.equals( \"HKEY_LOCAL_MACHINE\" ) ) {\n        bRet = winreg_RegOpenLocalMachine( hroot );\n    } else if ( m_rootKeyName.equals( \"HKEY_USERS\" ) ) {\n        bRet = winreg_RegOpenUsers( hroot );\n    } else {\n        throw new WinRegKeyException( \"unknown root registry key!\");\n    }\n    if ( !bRet ) {\n        throw new WinRegKeyException( \"opening root registry key \" +\n            \"failed!\" );\n    }\n    if ( !winreg_RegOpenKeyEx( hroot[0], m_subKeyName, hkey ) ) {\n        if ( !winreg_RegCloseKey( hroot[0] ) ) {\n            throw new WinRegKeyException( \"opening registry key and \" +\n                \"releasing root registry key handle failed!\" );\n        }            \n        throw new WinRegKeyException( \"opening registry key failed!\" );\n    }\n        \n    // get the size of the longest data component among the key's values\n    long[] subkeys = {0};\n    long[] maxSubkeyLen = {0};\n    long[] values = {0};\n    long[] maxValueNameLen = {0};\n    long[] maxValueLen = {0};\n    long[] secDescriptor = {0};\n    if ( !winreg_RegQueryInfoKey( hkey[0], subkeys, maxSubkeyLen,\n             values, maxValueNameLen, maxValueLen, secDescriptor ) ) {\n        if ( !winreg_RegCloseKey( hkey[0] ) ||\n             !winreg_RegCloseKey( hroot[0] ) ) {\n            throw new WinRegKeyException( \"retrieving information about \" +\n                \"the registry key and releasing registry key handles \" +\n                \"failed!\" );\n        }                \n        throw new WinRegKeyException( \"retrieving information about \" +\n            \"the registry key failed!\" );\n    }\n    \n    // get the data for the specified value name\n    byte[] buffer = new byte[ (int) maxValueLen[0] ];        \n    long[] size = new long[1];\n    size[0] = buffer.length;\n    long[] type = new long[1];\n    type[0] = 0;\n    if ( !winreg_RegQueryValueEx( hkey[0], valueName, type, buffer,\n             size ) ) {\n        if ( !winreg_RegCloseKey( hkey[0] ) ||\n             !winreg_RegCloseKey( hroot[0] ) ) {\n            throw new WinRegKeyException( \"retrieving data for the \" +\n                \"specified value name and releasing registry key handles \" +\n                \"failed!\" );\n        }\n        throw new WinRegKeyException( \"retrieving data for the \" +\n            \"specified value name failed!\" );\n    }\n    \n    // release registry key handles\n    if ( !winreg_RegCloseKey( hkey[0] ) ||\n         !winreg_RegCloseKey( hroot[0] ) ) {\n        throw new WinRegKeyException( \"releasing registry key handles \" +\n            \"failed!\" );\n    }\n    \n    result = new byte[ (int) size[0] ];\n    System.arraycopy( buffer, 0, result, 0, (int)size[0] );\n    \n    return result;\n}", "path": "Macro_03\\src\\com\\sun\\star\\lib\\loader\\WinRegKey.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * The main method instantiates a customized class loader with the\n * UNO jar files added to the search path and loads the application class,\n * which is specified in the Main-Class attribute of the\n * com/sun/star/lib/Loader.class entry of the manifest file or\n * as first parameter in the argument list.\n */\n", "func_signal": "public static void main( String[] arguments ) throws Exception", "code": "{\n    \n    // get the name of the class to be loaded from the manifest\n    String className = null;\n    Class clazz = Loader.class;\n    ClassLoader loader = clazz.getClassLoader();\n    Vector res = new Vector();\n    try {\n        Enumeration en = loader.getResources( \"META-INF/MANIFEST.MF\" );\n        while ( en.hasMoreElements() ) {\n            res.add( (URL) en.nextElement() );\n        }\n        // the jarfile with the com/sun/star/lib/loader/Loader.class\n        // per-entry attribute is most probably the last resource in the\n        // list, therefore search backwards\n        for ( int i = res.size() - 1; i >= 0; i-- ) {\n            URL jarurl = (URL) res.elementAt( i );\n            try {\n                JarURLConnection jarConnection =\n                    (JarURLConnection) jarurl.openConnection();\n                Manifest mf = jarConnection.getManifest();\n                Attributes attrs = (Attributes) mf.getAttributes(\n                    \"com/sun/star/lib/loader/Loader.class\" );\n                if ( attrs != null ) {\n                    className = attrs.getValue( \"Application-Class\" );\n                    if ( className != null )\n                        break;\n                }\n            } catch ( IOException e ) {\n                // if an I/O error occurs when opening a new\n                // JarURLConnection, ignore this manifest file\n                System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                                    \"main: bad manifest file: \" + e );\n            }\n        }\n    } catch ( IOException e ) {\n        // if an I/O error occurs when getting the manifest resources,\n        // try to get the name of the class to be loaded from the argument\n        // list\n        System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                            \"main: cannot get manifest resources: \" + e );\n    }\n    \n    // if no manifest entry was found, check first the system property\n    // Application-Class and if it is not set get the name of the class\n    // to be loaded from the argument list\n    String[] args = arguments;            \n    if ( className == null ) {\n        className = System.getProperty(\"Application-Class\");\n        \n        if (className == null) {\n            if ( arguments.length > 0 ) {            \n                className = arguments[0];            \n                args = new String[arguments.length - 1];\n                System.arraycopy( arguments, 1, args, 0, args.length );\n            } else {\n                throw new IllegalArgumentException(\n                    \"The name of the class to be loaded must be either \" +\n                    \"specified in the Main-Class attribute of the \" +\n                    \"com/sun/star/lib/loader/Loader.class entry \" +\n                    \"of the manifest file or as a command line argument.\" );\n            }\n        }\n    }\n    \n    // load the class with the customized class loader and\n    // invoke the main method\n    if ( className != null ) {\n        ClassLoader cl = getCustomLoader();\n        Class c = cl.loadClass( className );\n        Method m = c.getMethod( \"main\", new Class[] { String[].class } );\n        m.invoke( null, new Object[] { args } );\n    }\n}", "path": "Pitonyak_1221_SaveDocument\\src\\com\\sun\\star\\lib\\loader\\Loader.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * Translates an OOo-internal absolute file URL reference (encoded using\n * UTF-8) into a Java canonical pathname.\n *\n * @param oooUrl any URL reference; any fragment part is ignored\n *\n * @return if the given URL is a valid absolute, local (that is, the host\n * part is empty or equal to \"localhost\", ignoring case) file URL, it is\n * converted into an absolute canonical pathname; otherwise,\n * <code>null</code> is returned\n */\n", "func_signal": "private static String getCanonicalPathFromFileURL( String oooUrl )", "code": "{\n    \n    String prefix = \"file://\";\n    if (oooUrl.length() < prefix.length()\n        || !oooUrl.substring(0, prefix.length()).toLowerCase().equals(\n            prefix))\n    {\n        return null;\n    }        \n    StringBuffer buf = new StringBuffer(prefix);\n    int n = oooUrl.indexOf('/', prefix.length());\n    if (n < 0) {\n        n = oooUrl.length();\n    }\n    String host = oooUrl.substring(prefix.length(), n);\n    if (host.length() != 0 && !host.toLowerCase().equals(\"localhost\")) {\n        return null;\n    }\n    buf.append(host);\n    if (n == oooUrl.length()) {\n        buf.append('/');\n    } else {\n    loop:\n        while (n < oooUrl.length()) {\n            buf.append('/');\n            ++n;\n            int n2 = oooUrl.indexOf('/', n);\n            if (n2 < 0) {\n                n2 = oooUrl.length();\n            }\n            while (n < n2) {\n                char c = oooUrl.charAt(n);\n                switch (c) {\n                case '%':\n                    byte[] bytes = new byte[(n2 - n) / 3];\n                    int len = 0;\n                    while (oooUrl.length() - n > 2\n                           && oooUrl.charAt(n) == '%')\n                    {\n                        int d1 = Character.digit(oooUrl.charAt(n + 1), 16);\n                        int d2 = Character.digit(oooUrl.charAt(n + 2), 16);\n                        if (d1 < 0 || d2 < 0) {\n                            break;\n                        }\n                        int d = 16 * d1 + d2;\n                        if (d == '/') {\n                            return null;\n                        }\n                        bytes[len++] = (byte) d;\n                        n += 3;\n                    }\n                    String s;\n                    try {\n                        s = new String(bytes, 0, len, \"UTF-8\");\n                    } catch (UnsupportedEncodingException e) {\n                        return null;\n                    }\n                    buf.append(s);\n                    break;\n\n                case '#':\n                    break loop;\n\n                default:\n                    buf.append(c);\n                    ++n;\n                    break;\n                }\n            }\n        }\n    }\n    URL url;\n    try {\n        url = new URL(buf.toString());\n    } catch (MalformedURLException e) {\n        return null;\n    }\n    String path = url.getFile();\n    String fragment = url.getRef();\n    if (fragment != null) {\n        path += '#' + fragment;\n    }\n    String ret = null;\n    File file = new File( path, SOFFICE );\n    try {\n        if ( file.isAbsolute() && file.exists() ) {\n            try {\n                // resolve symlink\n                ret = file.getCanonicalFile().getParent();\n            } catch ( IOException e ) {\n                return null;\n            }     \n        }\n    } catch ( SecurityException e ) {\n        return null;\n    }\n    \n    return ret;\n}", "path": "Macro_17_SaveAs\\src\\com\\sun\\star\\lib\\loader\\InstallationFinder.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * Gets the installation path from the .sverionrc file in the user's home\n * directory.\n *\n * <p>This method is called on Unix/Linux platforms only.\n * The .sversionrc file is written during setup and will be omitted for\n * OOo 2.0.</p>\n *\n * @return the installation path or <code>null</code>, if no installation\n *         was found or if an error occured     \n */\n", "func_signal": "private static String getPathFromSVersionFile()", "code": "{\n\n    final String SVERSION = \".sversionrc\"; // Unix/Linux only\n    final String VERSIONS = \"[Versions]\";\n    \n    String path = null;\n    \n    try {        \n        File fSVersion = new File(\n            System.getProperty( \"user.home\" ) ,SVERSION );\n        if ( fSVersion.exists() ) {\n            Vector lines = new Vector();\n            BufferedReader br = null;\n            try {\n                br = new BufferedReader( new InputStreamReader(\n                    new FileInputStream( fSVersion ), \"UTF-8\" ) );\n                String line = null;                \n                while ( ( line = br.readLine() ) != null &&\n                        ( line.equals( VERSIONS ) ) != true ) {\n                    // read lines until [Versions] is found\n                }\n                while ( ( line = br.readLine() ) != null &&\n                        line.length() != 0 ) {\n                    if ( !line.startsWith( \";\" ) )\n                        lines.add( line );\n                }\n            } catch ( IOException e ) {\n                // if an I/O exception is thrown, try to analyze the lines\n                // read so far\n                System.err.println( \"com.sun.star.lib.loader.\" +\n                    \"InstallationFinder::getPathFromSVersionFile: \" +\n                    \"reading .sversionrc file failed: \" + e );\n            } finally {\n                if ( br != null ) {\n                    try {                            \n                        br.close();\n                    } catch ( IOException e ) {\n                        // closing .sversionrc failed, ignore\n                    }   \n                }\n            }            \n            for ( int i = lines.size() - 1; i >= 0; i-- ) {\n                StringTokenizer tokens = new StringTokenizer(\n                    (String)lines.elementAt( i ), \"=\" );\n                if ( tokens.countTokens() != 2 )\n                    continue;                \n                String key = tokens.nextToken();\n                String url = tokens.nextToken();\n                path = getCanonicalPathFromFileURL( url );                \n                if ( path != null )\n                    break;                \n            }            \n        }            \n    } catch ( SecurityException e ) {\n        return null;\n    }        \n    \n    return path;\n}", "path": "Pitonyak_1221_SaveDocument\\src\\com\\sun\\star\\lib\\loader\\InstallationFinder.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * Gets the customized class loader with the UNO jar files added to the\n * search path.\n *\n * @return the customized class loader       \n */\n", "func_signal": "public static synchronized ClassLoader getCustomLoader()", "code": "{\n\n    final String CLASSESDIR = \"classes\";\n    final String JUHJAR = \"juh.jar\";\n    \n    if ( m_Loader == null ) {\n        \n        // get the urls from which to load classes and resources\n        // from the class path\n        Vector vec = new Vector();\n        String classpath = null;\n        try {\n            classpath = System.getProperty( \"java.class.path\" );\n        } catch ( SecurityException e ) {\n            // don't add the class path entries to the list of class\n            // loader URLs\n            System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                \"getCustomLoader: cannot get system property \" +\n                \"java.class.path: \" + e );\n        }\n        if ( classpath != null ) {\n            addUrls(vec, classpath, File.pathSeparator);\n        }\n        \n        // get the urls from which to load classes and resources       \n        // from the UNO installation\n        String path = InstallationFinder.getPath();        \n        if ( path != null ) {            \n            File fClassesDir = new File( path, CLASSESDIR );\n            File fJuh = new File( fClassesDir, JUHJAR );\n            if ( fJuh.exists() ) {\n                URL[] clurls = new URL[1];\n                try {\n                    clurls[0] = fJuh.toURL();                \n                    ClassLoader cl = new CustomURLClassLoader( clurls );\n                    Class c = cl.loadClass(\n                        \"com.sun.star.comp.helper.UnoInfo\" );\n                    Method m = c.getMethod( \"getJars\", (Class[]) null );\n                    URL[] jarurls = (URL[]) m.invoke(\n                        null, (Object[]) null );\n                    for ( int i = 0; i < jarurls.length; i++ ) {\n                        vec.add( jarurls[i] );\n                    }\n                } catch ( MalformedURLException e ) {\n                    // don't add the UNO jar files to the list of class\n                    // loader URLs\n                    System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                        \"getCustomLoader: cannot add UNO jar files: \" + e );\n                } catch ( ClassNotFoundException e ) {\n                    // don't add the UNO jar files to the list of class\n                    // loader URLs\n                    System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                        \"getCustomLoader: cannot add UNO jar files: \" + e );\n                } catch ( NoSuchMethodException e ) {\n                    // don't add the UNO jar files to the list of class\n                    // loader URLs\n                    System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                        \"getCustomLoader: cannot add UNO jar files: \" + e );\n                } catch ( IllegalAccessException e ) {\n                    // don't add the UNO jar files to the list of class\n                    // loader URLs\n                    System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                        \"getCustomLoader: cannot add UNO jar files: \" + e );\n                } catch ( InvocationTargetException e ) {\n                    // don't add the UNO jar files to the list of class\n                    // loader URLs\n                    System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                        \"getCustomLoader: cannot add UNO jar files: \" + e );\n                }\n            } else {\n                callUnoinfo(path, vec);\n            }\n        } else {\n            System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                \"getCustomLoader: no UNO installation found!\" );\n        }\n    \n        // copy urls to array\n        URL[] urls = new URL[vec.size()];\n        vec.toArray( urls );\n\n        // instantiate class loader\n        m_Loader = new CustomURLClassLoader( urls );            \n    }\n\n    return m_Loader;        \n}", "path": "Pitonyak_1221_SaveDocument\\src\\com\\sun\\star\\lib\\loader\\Loader.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * Reads a value for the specified value name.\n */\n", "func_signal": "private byte[] getValue( String valueName ) throws WinRegKeyException", "code": "{\n    \n    byte[] result = null;\n    long[] hkey = {0};\n    \n    // open the specified registry key\n    boolean bRet = false;\n    long[] hroot = {0};\n    if ( m_rootKeyName.equals( \"HKEY_CLASSES_ROOT\" ) ) {\n        bRet = winreg_RegOpenClassesRoot( hroot );\n    } else if ( m_rootKeyName.equals( \"HKEY_CURRENT_CONFIG\" ) ) {\n        bRet = winreg_RegOpenCurrentConfig( hroot );\n    } else if ( m_rootKeyName.equals( \"HKEY_CURRENT_USER\" ) ) {\n        bRet = winreg_RegOpenCurrentUser( hroot );\n    } else if ( m_rootKeyName.equals( \"HKEY_LOCAL_MACHINE\" ) ) {\n        bRet = winreg_RegOpenLocalMachine( hroot );\n    } else if ( m_rootKeyName.equals( \"HKEY_USERS\" ) ) {\n        bRet = winreg_RegOpenUsers( hroot );\n    } else {\n        throw new WinRegKeyException( \"unknown root registry key!\");\n    }\n    if ( !bRet ) {\n        throw new WinRegKeyException( \"opening root registry key \" +\n            \"failed!\" );\n    }\n    if ( !winreg_RegOpenKeyEx( hroot[0], m_subKeyName, hkey ) ) {\n        if ( !winreg_RegCloseKey( hroot[0] ) ) {\n            throw new WinRegKeyException( \"opening registry key and \" +\n                \"releasing root registry key handle failed!\" );\n        }            \n        throw new WinRegKeyException( \"opening registry key failed!\" );\n    }\n        \n    // get the size of the longest data component among the key's values\n    long[] subkeys = {0};\n    long[] maxSubkeyLen = {0};\n    long[] values = {0};\n    long[] maxValueNameLen = {0};\n    long[] maxValueLen = {0};\n    long[] secDescriptor = {0};\n    if ( !winreg_RegQueryInfoKey( hkey[0], subkeys, maxSubkeyLen,\n             values, maxValueNameLen, maxValueLen, secDescriptor ) ) {\n        if ( !winreg_RegCloseKey( hkey[0] ) ||\n             !winreg_RegCloseKey( hroot[0] ) ) {\n            throw new WinRegKeyException( \"retrieving information about \" +\n                \"the registry key and releasing registry key handles \" +\n                \"failed!\" );\n        }                \n        throw new WinRegKeyException( \"retrieving information about \" +\n            \"the registry key failed!\" );\n    }\n    \n    // get the data for the specified value name\n    byte[] buffer = new byte[ (int) maxValueLen[0] ];        \n    long[] size = new long[1];\n    size[0] = buffer.length;\n    long[] type = new long[1];\n    type[0] = 0;\n    if ( !winreg_RegQueryValueEx( hkey[0], valueName, type, buffer,\n             size ) ) {\n        if ( !winreg_RegCloseKey( hkey[0] ) ||\n             !winreg_RegCloseKey( hroot[0] ) ) {\n            throw new WinRegKeyException( \"retrieving data for the \" +\n                \"specified value name and releasing registry key handles \" +\n                \"failed!\" );\n        }\n        throw new WinRegKeyException( \"retrieving data for the \" +\n            \"specified value name failed!\" );\n    }\n    \n    // release registry key handles\n    if ( !winreg_RegCloseKey( hkey[0] ) ||\n         !winreg_RegCloseKey( hroot[0] ) ) {\n        throw new WinRegKeyException( \"releasing registry key handles \" +\n            \"failed!\" );\n    }\n    \n    result = new byte[ (int) size[0] ];\n    System.arraycopy( buffer, 0, result, 0, (int)size[0] );\n    \n    return result;\n}", "path": "Macro_15_SimpleLoader\\src\\com\\sun\\star\\lib\\loader\\WinRegKey.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "//Sub ScrollDownOneScreen\n//    REM Get the view cursor from the current controller\n//    ThisComponent.currentController.getViewCursor().screenDown()\n//End Sub\n", "func_signal": "public static void main(String[] args)", "code": "{\n    try {\n        XComponentContext context = Bootstrap.bootstrap();\n        XMultiComponentFactory serviceManager = context.getServiceManager();\n\n        XDesktop desktop= (XDesktop) UnoRuntime.queryInterface( XDesktop.class,\n              serviceManager.createInstanceWithContext(\"com.sun.star.frame.Desktop\",context));\n\n        XComponent document = (XComponent)\n            UnoRuntime.queryInterface(XComponent.class, desktop.getCurrentComponent());\n        XModel model= (XModel) UnoRuntime.queryInterface(XModel.class, document);\n\n        if (model==null){\n            System.out.println(\"Open a document please.\");\n        }else{\n            XTextViewCursorSupplier viewCursorSupplier = (XTextViewCursorSupplier)UnoRuntime.queryInterface(XTextViewCursorSupplier.class,\n                        model.getCurrentController());\n\n            // The TextViewCursor have some operations:\n            XTextViewCursor textViewCursor = viewCursorSupplier.getViewCursor();\n            textViewCursor.gotoStart(false); // start of text\n\n            // For more sophisticated operations use other interfaces to viewcursor:\n            XScreenCursor screenCursor= (XScreenCursor) UnoRuntime.queryInterface(XScreenCursor.class,\n                    textViewCursor);\n            screenCursor.screenDown(); //pagedown\n\n            //and one more line\n            XViewCursor viewCursor= (XViewCursor) UnoRuntime.queryInterface(XViewCursor.class,\n                    textViewCursor);\n            viewCursor.goDown((short)1, false); // one line more\n\n            //and select the last line\n            XLineCursor lineCursor= (XLineCursor) UnoRuntime.queryInterface(XLineCursor.class,\n                    viewCursor);\n            lineCursor.gotoEndOfLine(true); // select until end of current line\n        }\n    }\n    catch (java.lang.Exception e){\n        e.printStackTrace();\n    }\n    finally {\n        System.exit( 0 );\n    }\n}", "path": "Pitonyak_1313_ScrollDownOneScreen\\src\\com\\example\\Pitonyak_1313_ScrollDownOneScreen.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * Gets the installation path from an environment variable.\n *   \n * <p>This method is called on all platforms.\n * Note, that in Java 1.3.1 and Java 1.4 System.getenv() throws \n * java.lang.Error and therefore this method returns null for those \n * Java versions.</p>\n *\n * @return the installation path or <code>null</code>, if no installation\n *         was specified in the environment variable or if an error occured\n */\n", "func_signal": "private static String getPathFromEnvVar( String var )", "code": "{        \n\n    String path = null;\n    \n    try {\n        path = System.getenv( var );            \n    } catch ( SecurityException e ) {\n        // if a SecurityException was thrown, return <code>null</code>\n    } catch ( java.lang.Error err ) {\n        // System.getenv() throws java.lang.Error in Java 1.3.1 and \n        // Java 1.4\n    }\n    \n    return path;\n}", "path": "Pitonyak_1221_SaveDocument\\src\\com\\sun\\star\\lib\\loader\\InstallationFinder.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * Gets the installation path from the .sverionrc file in the user's home\n * directory.\n *\n * <p>This method is called on Unix/Linux platforms only.\n * The .sversionrc file is written during setup and will be omitted for\n * OOo 2.0.</p>\n *\n * @return the installation path or <code>null</code>, if no installation\n *         was found or if an error occured     \n */\n", "func_signal": "private static String getPathFromSVersionFile()", "code": "{\n\n    final String SVERSION = \".sversionrc\"; // Unix/Linux only\n    final String VERSIONS = \"[Versions]\";\n    \n    String path = null;\n    \n    try {        \n        File fSVersion = new File(\n            System.getProperty( \"user.home\" ) ,SVERSION );\n        if ( fSVersion.exists() ) {\n            Vector lines = new Vector();\n            BufferedReader br = null;\n            try {\n                br = new BufferedReader( new InputStreamReader(\n                    new FileInputStream( fSVersion ), \"UTF-8\" ) );\n                String line = null;                \n                while ( ( line = br.readLine() ) != null &&\n                        ( line.equals( VERSIONS ) ) != true ) {\n                    // read lines until [Versions] is found\n                }\n                while ( ( line = br.readLine() ) != null &&\n                        line.length() != 0 ) {\n                    if ( !line.startsWith( \";\" ) )\n                        lines.add( line );\n                }\n            } catch ( IOException e ) {\n                // if an I/O exception is thrown, try to analyze the lines\n                // read so far\n                System.err.println( \"com.sun.star.lib.loader.\" +\n                    \"InstallationFinder::getPathFromSVersionFile: \" +\n                    \"reading .sversionrc file failed: \" + e );\n            } finally {\n                if ( br != null ) {\n                    try {                            \n                        br.close();\n                    } catch ( IOException e ) {\n                        // closing .sversionrc failed, ignore\n                    }   \n                }\n            }            \n            for ( int i = lines.size() - 1; i >= 0; i-- ) {\n                StringTokenizer tokens = new StringTokenizer(\n                    (String)lines.elementAt( i ), \"=\" );\n                if ( tokens.countTokens() != 2 )\n                    continue;                \n                String key = tokens.nextToken();\n                String url = tokens.nextToken();\n                path = getCanonicalPathFromFileURL( url );                \n                if ( path != null )\n                    break;                \n            }            \n        }            \n    } catch ( SecurityException e ) {\n        return null;\n    }        \n    \n    return path;\n}", "path": "Macro_17_SaveAs\\src\\com\\sun\\star\\lib\\loader\\InstallationFinder.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * Constructs a <code>WinRegKey</code>.\n */\n", "func_signal": "public WinRegKey( String rootKeyName, String subKeyName )", "code": "{\n    m_rootKeyName = rootKeyName;\n    m_subKeyName = subKeyName;\n}", "path": "Macro_03\\src\\com\\sun\\star\\lib\\loader\\WinRegKey.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * Gets the installation path from the PATH environment variable.\n *\n * <p>This method is called on Unix/Linux platforms only.\n * An installation is found, if the executable 'soffice' or a symbolic link\n * is in one of the directories listed in the PATH environment variable.\n * Note, that in Java 1.3.1 and Java 1.4 System.getenv() throws\n * java.lang.Error and therefore this method returns null for those\n * Java versions.</p>\n *\n * @return the installation path or <code>null</code>, if no installation\n *         was found or if an error occured\n */\n", "func_signal": "private static String getPathFromPathEnvVar()", "code": "{\n\n    final String PATH_ENVVAR_NAME = \"PATH\";\n    \n    String path = null;\n    String str = null;\n    \n    try {\n        str = System.getenv( PATH_ENVVAR_NAME );\n    } catch ( SecurityException e ) {\n        // if a SecurityException was thrown, return <code>null</code>\n        return null;\n    } catch ( java.lang.Error err ) {\n        // System.getenv() throws java.lang.Error in Java 1.3.1 and \n        // Java 1.4\n        return null;\n    }\n\n    if ( str != null ) {\n        StringTokenizer tokens = new StringTokenizer(\n            str, File.pathSeparator );\n        while ( tokens.hasMoreTokens() ) {\n            File file = new File( tokens.nextToken(), SOFFICE );\n            try {\n                if ( file.exists() ) {\n                    try {                   \n                        // resolve symlink\n                        path = file.getCanonicalFile().getParent();\n                        if ( path != null )\n                            break;\n                    } catch ( IOException e ) {\n                        // if an I/O exception is thrown, ignore this\n                        // path entry and try the next one\n                        System.err.println( \"com.sun.star.lib.loader.\" +\n                            \"InstallationFinder::getPathFromEnvVar: \" +\n                            \"bad path: \" + e );\n                    }  \n                }\n            } catch ( SecurityException e ) {\n                // if a SecurityException was thrown, ignore this path\n                // entry and try the next one\n            }\n        }\n    }\n    \n    return path;\n}", "path": "Pitonyak_1221_SaveDocument\\src\\com\\sun\\star\\lib\\loader\\InstallationFinder.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * The main method instantiates a customized class loader with the\n * UNO jar files added to the search path and loads the application class,\n * which is specified in the Main-Class attribute of the\n * com/sun/star/lib/Loader.class entry of the manifest file or\n * as first parameter in the argument list.\n */\n", "func_signal": "public static void main( String[] arguments ) throws Exception", "code": "{\n    \n    // get the name of the class to be loaded from the manifest\n    String className = null;\n    Class clazz = Loader.class;\n    ClassLoader loader = clazz.getClassLoader();\n    Vector res = new Vector();\n    try {\n        Enumeration en = loader.getResources( \"META-INF/MANIFEST.MF\" );\n        while ( en.hasMoreElements() ) {\n            res.add( (URL) en.nextElement() );\n        }\n        // the jarfile with the com/sun/star/lib/loader/Loader.class\n        // per-entry attribute is most probably the last resource in the\n        // list, therefore search backwards\n        for ( int i = res.size() - 1; i >= 0; i-- ) {\n            URL jarurl = (URL) res.elementAt( i );\n            try {\n                JarURLConnection jarConnection =\n                    (JarURLConnection) jarurl.openConnection();\n                Manifest mf = jarConnection.getManifest();\n                Attributes attrs = (Attributes) mf.getAttributes(\n                    \"com/sun/star/lib/loader/Loader.class\" );\n                if ( attrs != null ) {\n                    className = attrs.getValue( \"Application-Class\" );\n                    if ( className != null )\n                        break;\n                }\n            } catch ( IOException e ) {\n                // if an I/O error occurs when opening a new\n                // JarURLConnection, ignore this manifest file\n                System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                                    \"main: bad manifest file: \" + e );\n            }\n        }\n    } catch ( IOException e ) {\n        // if an I/O error occurs when getting the manifest resources,\n        // try to get the name of the class to be loaded from the argument\n        // list\n        System.err.println( \"com.sun.star.lib.loader.Loader::\" +\n                            \"main: cannot get manifest resources: \" + e );\n    }\n    \n    // if no manifest entry was found, check first the system property\n    // Application-Class and if it is not set get the name of the class\n    // to be loaded from the argument list\n    String[] args = arguments;            \n    if ( className == null ) {\n        className = System.getProperty(\"Application-Class\");\n        \n        if (className == null) {\n            if ( arguments.length > 0 ) {            \n                className = arguments[0];            \n                args = new String[arguments.length - 1];\n                System.arraycopy( arguments, 1, args, 0, args.length );\n            } else {\n                throw new IllegalArgumentException(\n                    \"The name of the class to be loaded must be either \" +\n                    \"specified in the Main-Class attribute of the \" +\n                    \"com/sun/star/lib/loader/Loader.class entry \" +\n                    \"of the manifest file or as a command line argument.\" );\n            }\n        }\n    }\n    \n    // load the class with the customized class loader and\n    // invoke the main method\n    if ( className != null ) {\n        ClassLoader cl = getCustomLoader();\n        Class c = cl.loadClass( className );\n        Method m = c.getMethod( \"main\", new Class[] { String[].class } );\n        m.invoke( null, new Object[] { args } );\n    }\n}", "path": "Pitonyak_1328_RemoveEmptySpace\\src\\com\\sun\\star\\lib\\loader\\Loader.java", "repo_name": "smbrant/openoffice", "stars": 5, "license": "None", "language": "java", "size": 201}
{"docstring": "/**\n * @param parent The parent of this bundle.\n */\n", "func_signal": "protected L10nBundle(T_PARENT parent)", "code": "{\n    super();\n    this.parent = parent;\n    this.entries = new HashMap<Locale, T_L10N_VALUE>();\n}", "path": "domain-base\\src\\main\\java\\org\\ddd\\toolbox\\jpa\\l10n\\L10nBundle.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\n@TransactionAttribute(TransactionAttributeType.REQUIRED)\npublic <T_ENTITY> Set<T_ENTITY> executeQueryListAndProcessSingle(QueryFactoryCallback<Query> queryFactoryCallback, QueryInitializeCallback<T_ENTITY> initializeCallback, int paginationSize, int startIndex, BatchProcessCallbackEntitySingle<T_ENTITY> callback)", "code": "{\n    Set<T_ENTITY> entities = executeQueryList(queryFactoryCallback, initializeCallback, paginationSize, startIndex);\n    for (T_ENTITY entity : entities) {\n        processSingle(callback, entity);\n    }\n    return entities;\n}", "path": "dao-ejb3\\src\\main\\java\\org\\ddd\\toolbox\\dao\\ejb3\\PaginationProcessServiceBean.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\n@TransactionAttribute(TransactionAttributeType.REQUIRED)\npublic <T_ENTITY> Set<T_ENTITY> executeQueryListAndProcessSet(QueryFactoryCallback<Query> queryFactoryCallback, QueryInitializeCallback<T_ENTITY> initializeCallback, int paginationSize, int startIndex, BatchProcessCallbackEntitySet<T_ENTITY> callback)", "code": "{\n    Set<T_ENTITY> entities = executeQueryList(queryFactoryCallback, initializeCallback, paginationSize, startIndex);\n    processSet(callback, entities);\n    return entities;\n}", "path": "dao-ejb3\\src\\main\\java\\org\\ddd\\toolbox\\dao\\ejb3\\PaginationProcessServiceBean.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public boolean equals(Object x, Object y) throws HibernateException", "code": "{\n    if (x == y) \n    {\n        return true;\n    }\n    if (x == null || y == null) \n    {\n        return false;\n    }\n    if (!(x instanceof URL) || !(y instanceof URL)) {\n        return false;\n    }\n\n    return x.equals(y) && y.equals(x);\n}", "path": "hibernate\\hibernate-typemap-url\\src\\main\\java\\org\\ddd\\toolbox\\hibernate\\typemap\\url\\URLType.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * {@inheritDoc}\n * @see org.hibernate.usertype.UserType#nullSafeGet(java.sql.ResultSet,\n *      java.lang.String[], java.lang.Object)\n */\n", "func_signal": "public Object nullSafeGet(ResultSet rs, String[] names, Object owner) throws HibernateException, SQLException", "code": "{\n    String currencyCode = rs.getString(names[0]);\n    long amount = rs.getLong(names[1]);\n    return Money.ofMinor(currencyCode, amount);\n}", "path": "hibernate\\hibernate-typemap-jodamoney\\src\\main\\java\\org\\ddd\\toolbox\\hibernate\\typemap\\jodamoney\\MoneyType.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * Set datestamps before database persistence.\n */\n", "func_signal": "@PrePersist\npublic void setDtsInsert(TrackedEntity o)", "code": "{\n    DateTime dts = new DateTime();\n    o.setDtsInsert(dts);\n    o.setDtsUpdate(dts);\n}", "path": "domain-base\\src\\main\\java\\org\\ddd\\toolbox\\jpa\\TrackedEntityListener.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * Get the value for the specified locale.\n *\n * @param locale\n *            The locale to requested.\n * @return The localized value for the provided locale or any of the\n *         appropriate fallback locales if it doesn't exist, null if no\n *         appropriate entries exist.\n */\n", "func_signal": "@Transient\npublic T_VALUE getWithFallback(Locale locale)", "code": "{\n    T_VALUE result = null;\n    T_L10N_VALUE entry = getEntryWithFallback(locale);\n    if (entry != null) {\n        result = entry.getValue();\n    }\n    return result;\n}", "path": "domain-base\\src\\main\\java\\org\\ddd\\toolbox\\jpa\\l10n\\L10nBundle.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * Add an entry to a bundle. This is a helper method for use by concrete\n * subclasses implementing put(Locale locale, T_VALUE value).\n *\n * @param locale\n *            The locale of the entry to add.\n * @param value\n *            The value to add.\n * @param clazz\n *            The class to instantiate.\n * @param immutableEntry\n *            Whether or not the entry is immutable, only applicable on\n *            entry updates and determines whether the existing entry is\n *            updated or a new entry is created.\n */\n", "func_signal": "protected void put(Locale locale, T_VALUE value, Class<T_L10N_VALUE> clazz, boolean immutableEntry)", "code": "{\n\n    boolean createNewEntry = false;\n    T_L10N_VALUE existingEntry = getEntries().get(locale);\n    if (existingEntry == null) {\n        createNewEntry = true;\n    }\n    else {\n        // Handle updates:\n        if (immutableEntry) {\n            createNewEntry = true;\n        }\n        else {\n            existingEntry.setValue(value);\n        }\n    }\n\n    if (createNewEntry) {\n        T_L10N_VALUE entry = L10nBundleFactory.createBundleEntry(clazz);\n        entry.setLocale(locale);\n        entry.setValue(value);\n        getEntries().put(locale, entry);\n    }\n\n}", "path": "domain-base\\src\\main\\java\\org\\ddd\\toolbox\\jpa\\l10n\\L10nBundle.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * Get the locale entry for the specified locale.\n *\n * @param locale\n *            The locale.\n * @return The localized entry for the provided locale or any of the\n *         appropriate fallback locales if it doesn't exist, null if no\n *         appropriate entries exist.\n */\n", "func_signal": "@Transient\npublic T_L10N_VALUE getEntryWithFallback(Locale locale)", "code": "{\n    T_L10N_VALUE result = null;\n\n    List<Locale> localeLookupList = new ArrayList<Locale>();\n    @SuppressWarnings(\"unchecked\")\n    List<Locale> localeLookupListInitial = LocaleUtils.localeLookupList(locale);\n    localeLookupList.addAll(localeLookupListInitial);\n    if (locale != Locale.ENGLISH) {\n        @SuppressWarnings(\"unchecked\")\n        List<Locale> list = LocaleUtils.localeLookupList(Locale.ENGLISH);\n        localeLookupList.addAll(list);\n    }\n    if (locale != Locale.CHINESE) {\n        @SuppressWarnings(\"unchecked\")\n        List<Locale> list = LocaleUtils.localeLookupList(Locale.CHINESE);\n        localeLookupList.addAll(list);\n    }\n\n    for (Locale localeCandidate : localeLookupList) {\n        result = getEntries().get(localeCandidate);\n        if (result != null) {\n            break;\n        }\n    }\n\n    return result;\n}", "path": "domain-base\\src\\main\\java\\org\\ddd\\toolbox\\jpa\\l10n\\L10nBundle.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * {@inheritDoc}\n * @see org.hibernate.usertype.UserType#nullSafeSet(java.sql.PreparedStatement,\n *      java.lang.Object, int)\n */\n", "func_signal": "public void nullSafeSet(PreparedStatement st, Object value, int index) throws HibernateException, SQLException", "code": "{\n    if (value == null)\n    {\n        st.setNull(index, Types.VARCHAR);\n        st.setNull(index + 1, Types.BIGINT);\n    }\n    else \n    {\n    \tMoney money = (Money) value;\n    \tString currencyCode = money.getCurrencyUnit().getCurrencyCode();\n    \tlong amount = money.getAmountMinor();\n    \tst.setString(index, currencyCode);\n    \tst.setLong(index + 1, amount);\n    }\n}", "path": "hibernate\\hibernate-typemap-jodamoney\\src\\main\\java\\org\\ddd\\toolbox\\hibernate\\typemap\\jodamoney\\MoneyType.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\n@TransactionAttribute(TransactionAttributeType.REQUIRED)\npublic <T_ENTITY> Set<T_ENTITY> executeQueryListAndProcessSet(QueryFactoryCallback<Query> queryFactoryCallback, int paginationSize, int startIndex, BatchProcessCallbackEntitySet<T_ENTITY> callback)", "code": "{\n    Set<T_ENTITY> entities = executeQueryList(queryFactoryCallback, paginationSize, startIndex);\n    processSet(callback, entities);\n    return entities;\n}", "path": "dao-ejb3\\src\\main\\java\\org\\ddd\\toolbox\\dao\\ejb3\\PaginationProcessServiceBean.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * @frameworkUseOnly\n */\n", "func_signal": "protected L10nBundle()", "code": "{\n    super();\n    this.entries = new HashMap<Locale, T_L10N_VALUE>();\n}", "path": "domain-base\\src\\main\\java\\org\\ddd\\toolbox\\jpa\\l10n\\L10nBundle.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\n@TransactionAttribute(TransactionAttributeType.REQUIRED)\npublic <T_ENTITY> Set<T_ENTITY> executeQueryListAndProcessSingle(QueryFactoryCallback<Query> queryFactoryCallback, int paginationSize, int startIndex, BatchProcessCallbackEntitySingle<T_ENTITY> callback)", "code": "{\n    Set<T_ENTITY> entities = executeQueryList(queryFactoryCallback, paginationSize, startIndex);\n    for (T_ENTITY entity : entities) {\n        processSingle(callback, entity);\n    }\n    return entities;\n}", "path": "dao-ejb3\\src\\main\\java\\org\\ddd\\toolbox\\dao\\ejb3\\PaginationProcessServiceBean.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * {@inheritDoc}\n * @see org.hibernate.usertype.UserType#equals(Object, Object) \n */\n", "func_signal": "public boolean equals(Object x, Object y) throws HibernateException", "code": "{\n    if (x == y) \n    {\n        return true;\n    }\n\n    if (x == null || y == null) \n    {\n        return false;\n    }\n\n    if (!(x instanceof Money) || !(y instanceof Money)) \n    {\n        return false;\n    }\n\n    return x.equals(y) && y.equals(x);\n}", "path": "hibernate\\hibernate-typemap-jodamoney\\src\\main\\java\\org\\ddd\\toolbox\\hibernate\\typemap\\jodamoney\\MoneyType.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * @param entity\n *            The entity which the error detail is about.\n * @param dateTime\n *            The datetime of the error detail.\n * @param message\n *            The message of the error detail.\n * @param rc\n *            The return code of the error detail (nullable).\n */\n", "func_signal": "protected EntityErrorDetail(T entity, DateTime dateTime, String message, Integer rc)", "code": "{\n    this.entity = entity;\n    this.dateTime = dateTime;\n    this.message = message;\n    this.rc = rc;\n}", "path": "ejb3-entityreport\\src\\main\\java\\org\\ddd\\toolbox\\ejb3\\entityreport\\EntityErrorDetail.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/*\npublic static Object getHetergeneousManagedGraphByNaturalKey(Session hibernateSession, Object entity)\n{\n\n}\n*/\n", "func_signal": "public static Object refreshDeepIdentityByNaturalKey(Session hibernateSession, Object entity)", "code": "{\n\tString[] properties = getNaturalKey(entity.getClass());\n\tfor(String property : properties)\n\t{\n\t\ttry\n\t\t{\n\t\t\tClass propertyType = PropertyUtils.getPropertyType(entity, property);\n\t\t\tObject propertyValue = PropertyUtils.getSimpleProperty(entity, property);\n\t\t\n\t\t\tNaturalKey annotation = getNaturalKeyAnnotation(propertyType);\n\t\t\tif (annotation != null)\n\t\t\t{\n\t\t\t\tPropertyUtils.setSimpleProperty(entity, property, refreshDeepIdentityByNaturalKey(hibernateSession, propertyValue));\n\t\t\t}\n\t\t}\n\t\tcatch (IllegalAccessException e)\n\t\t{\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\tcatch (InvocationTargetException e)\n\t\t{\n\t\t\tthrow new RuntimeException(e);\n\t\t} \n\t\tcatch (NoSuchMethodException e)\n\t\t{\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t\n\t// TODO: optimization: if the id is already set...\n\t\n\treturn getCriteriaNaturalKey(hibernateSession, entity).uniqueResult();\t\n}", "path": "dao-naturalkeytools\\src\\main\\java\\org\\ddd\\toolbox\\naturalkeytools\\NaturalKeyTools.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * Get the value for the specified locale.\n *\n * @param locale\n *            The locale to requested.\n * @return The localized entry for the provided locale, null if it does not\n *         exist.\n */\n", "func_signal": "@Transient\npublic T_VALUE get(Locale locale)", "code": "{\n    T_VALUE result = null;\n    T_L10N_VALUE entry = getEntry(locale);\n    if (entry != null) {\n        result = entry.getValue();\n    }\n    return result;\n}", "path": "domain-base\\src\\main\\java\\org\\ddd\\toolbox\\jpa\\l10n\\L10nBundle.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public Object getPropertyValue(Object component, int property) throws HibernateException", "code": "{\n    URL url = (URL) component;\n    return url.toExternalForm();\n}", "path": "hibernate\\hibernate-typemap-url\\src\\main\\java\\org\\ddd\\toolbox\\hibernate\\typemap\\url\\URLType.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * Update an entry to a bundle (if the entries are mutable).\n *\n * @param locale\n *            The locale of the entry to update.\n * @param value\n *            The value to update.\n * @throws IllegalArgumentException\n *             If an entry for the provided locale does not exist.\n */\n", "func_signal": "public void update(Locale locale, T_VALUE value) throws IllegalArgumentException", "code": "{\n    T_L10N_VALUE existingEntry = getEntries().get(locale);\n    if (existingEntry != null) {\n        existingEntry.setValue(value);\n    }\n    else {\n        throw new IllegalArgumentException(\"l10n entry for '\" + locale + \"' does not exist.\");\n    }\n}", "path": "domain-base\\src\\main\\java\\org\\ddd\\toolbox\\jpa\\l10n\\L10nBundle.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "/**\n * {@inheritDoc}\n * @see org.hibernate.usertype.UserType#sqlTypes()\n */\n", "func_signal": "public int[] sqlTypes()", "code": "{\n    return new int[] {\n        Types.VARCHAR,  // ISO 4217 Currency Code\n        Types.BIGINT    // CurrencyUnit: long iAmount\n    }; \n}", "path": "hibernate\\hibernate-typemap-jodamoney\\src\\main\\java\\org\\ddd\\toolbox\\hibernate\\typemap\\jodamoney\\MoneyType.java", "repo_name": "jeremynorris/ddd-toolbox", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 124}
{"docstring": "// TODO (arno) Fix the clipping rect computation\n// TODO teras: find exactly which part to redraw\n", "func_signal": "public void redraw()", "code": "{\n    CGRect rect = view.getFrame();\n    CGRect displayRect = view.getFrame();\n    int x = (int) (displayRect.origin.x + rect.origin.x);\n    int y = (int) (displayRect.origin.y + rect.origin.y);\n    Simulator.redrawDisplay(x, y, (int) rect.size.width, (int) rect.size.height);\n}", "path": "trunk\\xmlvm\\src\\xmlvm2objc\\compat-lib\\java\\org\\xmlvm\\iphone\\internal\\renderer\\UIViewRenderer.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/**\n * Based on the given target, returns a suitable target process or null, if\n * no process could be found.\n */\n", "func_signal": "public XmlvmProcess<?> createTargetProcess(Targets target, String out)", "code": "{\n    switch (target) {\n    case JS:\n        return new JavaScriptOutputProcess(arguments);\n    case PYTHON:\n        return new PythonOutputProcess(arguments);\n    case CPP:\n        return new CppOutputProcess(arguments);\n    case OBJC:\n        return new ObjectiveCOutputProcess(arguments);\n    case QOOXDOO:\n        return new QooxdooOutputProcess(arguments);\n    case IPHONE:\n        return new IPhoneOutputProcess(arguments);\n    case IPHONEANDROID:\n        return new Android2IPhoneOutputProcess(arguments);\n    case WEBOS:\n        return new WebOsOutputProcess(arguments);\n    case XMLVM:\n        return new XmlvmOutputProcess(arguments);\n    case IPHONETEMPLATE:\n        return new TemplateOutputProcess(arguments);\n    case CLASS:\n        return new JavaByteCodeOutputProcess(arguments);\n    case EXE:\n        return new CILByteCodeOutputProcess(arguments);\n    case DEX:\n        return new DexOutputProcess(arguments);\n    case DEXMLVM:\n        return new DEXmlvmOutputProcess(arguments);\n    }\n    Log.error(\"Could not create target process for target '\" + target + \"'.\");\n    return null;\n}", "path": "trunk\\xmlvm\\src\\xmlvm\\org\\xmlvm\\proc\\out\\OutputProcessFactory.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/**\n * Return the current height of the screen TODO: Implement for real. This is\n * only a dummy.\n */\n", "func_signal": "public int getHeight()", "code": "{\n    Activity activity = ActivityManager.getTopActivity();\n    CGSize s = UIScreen.mainScreen().getBounds().size;\n    return (int) (activity.getRequestedOrientation() == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE ? s.width\n            : s.height);\n}", "path": "trunk\\xmlvm\\src\\android2iphone\\android\\view\\Display.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/**\n * Creates a new instance that will parse the arguments of the given array.\n */\n", "func_signal": "public XmlvmArguments(String[] argv)", "code": "{\n    // Read command line arguments\n    for (int i = 0; i < argv.length; i++) {\n        String arg = argv[i];\n        if (arg.startsWith(ARG_JS)) {\n            option_js = true;\n        } else if (arg.startsWith(ARG_CPP)) {\n            option_cpp = true;\n        } else if (arg.startsWith(ARG_OBJC)) {\n            option_objc = true;\n        } else if (arg.startsWith(ARG_OBJC_HEADER)) {\n            option_objc_header = arg.substring(ARG_OBJC_HEADER.length());\n        } else if (arg.startsWith(ARG_IPHONE_APP)) {\n            option_objc = true;\n            option_iphone_app = arg.substring(ARG_IPHONE_APP.length());\n        } else if (arg.startsWith(ARG_ANDROID_TO_IPHONE)) {\n            option_objc = true;\n            option_iphone_app = arg.substring(ARG_ANDROID_TO_IPHONE.length());\n            option_android2iphone = true;\n        } else if (arg.equals(ARG_PYTHON)) {\n            option_python = true;\n        } else if (arg.equals(ARG_DFA)) {\n            option_dfa = true;\n        } else if (arg.equals(ARG_JVM)) {\n            option_jvm = true;\n        } else if (arg.equals(ARG_CLR)) {\n            option_clr = true;\n        } else if (arg.equals(ARG_EXE)) {\n            option_exe = true;\n        } else if (arg.equals(ARG_API)) {\n            option_api = true;\n        } else if (arg.equals(ARG_JAVA)) {\n            option_java = true;\n        } else if (arg.equals(ARG_CONSOLE)) {\n            option_console = true;\n        } else if (arg.startsWith(ARG_OUT)) {\n            option_out = arg.substring(ARG_OUT.length());\n        } else if (arg.equals(ARG_IMPORT)) {\n            option_import = true;\n        } else if (arg.equals(ARG_RECURSIVE)) {\n            option_recursive = true;\n        } else if (option_class != null) {\n            usage(\"Unknown parameter: \" + arg);\n            System.exit(-1);\n        } else {\n            option_class = arg;\n        }\n    }\n\n    // Sanity check command line arguments\n    if (option_js && option_cpp)\n        usage(\"Cannot specify --js and --cpp at the same time\");\n    if (option_class == null)\n        usage(\"No input file specified\");\n    if (option_java && option_console)\n        usage(\"Cannot output class file to console.  Must specify --out=<file>\");\n}", "path": "trunk\\xmlvm\\src\\xmlvm\\org\\xmlvm\\XmlvmArguments.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/**\n * Make sure that the directory, this file is written to, exists or is\n * created.\n * \n * @return whether the directory exists or could be created\n */\n", "func_signal": "private boolean createOutputDirectory(OutputFile outputFile)", "code": "{\n    File location = new File(outputFile.getLocation());\n    if (location.exists()) {\n        if (location.isDirectory()) {\n            return true;\n        } else {\n            Log.error(\"Location is not a directory: \" + outputFile.getLocation());\n            return false;\n        }\n    }\n    if (!location.mkdirs()) {\n        Log.error(\"Directory could not be created: \" + outputFile.getLocation());\n        return false;\n    }\n    return true;\n}", "path": "trunk\\xmlvm\\src\\xmlvm\\org\\xmlvm\\proc\\out\\OutputFileWriter.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/**\n * Prints usage information and exits the applications.\n * \n * @param error\n *            An additional error message to be printed before the usage\n *            table is printed.\n */\n", "func_signal": "private static void usage(String error)", "code": "{\n    String[] msg = {\n            \"Usage: xmlvm [--js|--cpp] [--import] [--recursive] [--console|--out=<file>] --file <inputfile>\",\n            \"  --js            : Generate JavaScript\",\n            \"  --cpp           : Generate C++\",\n            \"  --import        : Generate import list of referenced externals\",\n            \"  --console       : Output is to be written to the console.\",\n            \"  --out           : Output directory.\",\n            \"  --recursive     : Recursivley scan through the referenced externals\",\n            \"  --file          : Input file\",\n            \"  <file>          : Byte code to be translated. If <class> ends on '.exe',\",\n            \"                    the bytecode is assumed to the a .NET executable file\",\n            \"                    with the same name. If <class> ends on '.class', the\",\n            \"                    bytecode is assumed to be of JVM format in a file with\",\n            \"                    the same name. Otherwise, <class> is looked up via CLASSPATH.\",\n            \"  If neither --js nor --cpp is specified, the output will be XMLVM.\",\n            \"  If the option --console is not given, the output will be written to a\",\n            \"  file with the same name as <class> and suffix one of .xmlvm, .js, or .cpp\" };\n\n    System.err.println(\"Error: \" + error);\n    for (int i = 0; i < msg.length; i++) {\n        System.err.println(msg[i]);\n    }\n}", "path": "trunk\\xmlvm\\src\\xmlvm\\org\\xmlvm\\XmlvmArguments.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/**\n * Returns the sub-directory with the given name or {@code null}, if not\n * found.\n * \n * @param name\n *            the name of the sub-directory.\n * @return The instance or{@code null}.\n */\n", "func_signal": "public UniversalFileDirectory getDirectory(String name)", "code": "{\n    for (UniversalFile file : files) {\n        if (file.isDirectory() && (file.getAbsolutePath().endsWith(File.separator + name))) {\n            return (UniversalFileDirectory) file;\n        }\n    }\n    return null;\n}", "path": "trunk\\xmlvm\\src\\xmlvm\\org\\xmlvm\\util\\universalfile\\UniversalFileDirectory.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "// Necessary in case the Visual Studio compiler\n// decides to treat a Value Type as an object.\n", "func_signal": "public static Size __NEW(int x, int y)", "code": "{\n    Size s = new Size();\n    s.__CONSTRUCTOR(x, y);\n    return s;\n}", "path": "changes\\haeberling\\merge-trunk-with-build\\src\\clr2jvm\\compat-lib\\Java\\System\\Drawing\\Size.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/**\n * \n */\n", "func_signal": "private void enableAccelerometer()", "code": "{\n    sensorManager.registerListener(this, SensorManager.SENSOR_ACCELEROMETER,\n            SensorManager.SENSOR_DELAY_FASTEST);\n}", "path": "trunk\\xmlvm\\demo\\android\\aremote\\src\\org\\xmlvm\\demo\\aremote\\ARemote.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    sensorManager = (SensorManager) this.getSystemService(SENSOR_SERVICE);\n    initLayout();\n}", "path": "trunk\\xmlvm\\demo\\android\\aremote\\src\\org\\xmlvm\\demo\\aremote\\ARemote.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/**\n * Updates the position of the spark image to the current.\n */\n", "func_signal": "private void updateImage()", "code": "{\n\timage.layout((int) x, (int) y, (int) x + Const.IMAGE_SIZE, (int) y\n\t\t\t+ Const.IMAGE_SIZE);\n}", "path": "trunk\\xmlvm\\demo\\android\\afireworks\\src\\org\\xmlvm\\demo\\afireworks\\Spark.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "// Necessary in case the Visual Studio compiler\n// decides to treat a Value Type as an object.\n", "func_signal": "public static Point __NEW(int x, int y)", "code": "{\n    Point p = new Point();\n    p.__CONSTRUCTOR(x, y);\n    return p;\n}", "path": "changes\\haeberling\\merge-trunk-with-build\\src\\clr2jvm\\compat-lib\\Java\\System\\Drawing\\Point.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * android.widget.CompoundButton.OnCheckedChangeListener#onCheckedChanged\n * (android.widget.CompoundButton, boolean)\n */\n", "func_signal": "@Override\npublic void onCheckedChanged(CompoundButton buttonView, boolean isChecked)", "code": "{\n    if (isChecked) {\n        enableAccelerometer();\n    } else {\n        disableAccelerometer();\n    }\n}", "path": "trunk\\xmlvm\\demo\\android\\aremote\\src\\org\\xmlvm\\demo\\aremote\\ARemote.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n  if (e.getSource() == _btnDump)\n    // Dump\n    dumpTextFields();\n  if (e.getSource() == _btnClear)\n    // Clear\n    _txtaDump.setText(\"\");\n  if (e.getSource() == _btnExit)\n    // Exit\n    System.exit(0);\n}", "path": "trunk\\xmlvm\\demo\\java-desktop\\org\\xmlvm\\demo\\LayoutDemo.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/* Produce Xcode project file */\n", "func_signal": "@Override\npublic String composeBuildFiles(List<OutputFile> allfiles, Arguments arguments)", "code": "{\n    String projname = arguments.option_app_name();\n\n    /* Search and load xcode template */\n    XCodeProj proj;\n    try {\n        proj = new XCodeProj(projname, allfiles);\n    } catch (IOException ex) {\n        return ex.getMessage();\n    }\n    proj.injectLibraries(arguments.option_lib());\n    proj.injectFiles(TEMPL_APP_SRC, FILTER_APP);\n    proj.injectFiles(TEMPL_IPHONE_SRC, FILTER_IPHONE);\n    proj.injectFiles(TEMPL_ANDROID_SRC, FILTER_ANDROID);\n    // proj.injectFiles(TEMPL_RESOURCES, FILTER_RESOURCES); // Do not inject\n    // files, a special bash script will take care of this\n    proj.finalizeObject();\n\n    OutputFile makefile = new OutputFile(proj.data);\n    makefile.setFileName(\"project.pbxproj\");\n    makefile.setLocation(arguments.option_out() + \"/\" + projname + \".xcodeproj\");\n    allfiles.add(makefile);\n    return null;\n}", "path": "trunk\\xmlvm\\src\\xmlvm\\org\\xmlvm\\proc\\out\\build\\XCodeFile.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/**\n * Start traversal using DefaultVisitor pattern.\n */\n", "func_signal": "public Document genXMLVM()", "code": "{\n    new DescendingVisitor(clazz, this).visit();\n    org.jdom.Document doc = new Document(xml_root);\n    return doc;\n}", "path": "changes\\haeberling\\qooxdoo_0-8_integration\\src\\xmlvm\\org\\xmlvm\\ParseJVM.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/**\n * The Java compiler sometimes generates additional arguments or methods\n * that are not in the original source code (called <em>synthetic</em>\n * arguments or methods. For those the compiler does not generate local\n * variable declarations (&lt;var&gt;). For symmetry reasons, we generate\n * those missing &lt;var&gt; declarations in XMLVM.\n * \n * @param xml_code\n * @param id\n */\n", "func_signal": "private void addHiddenVarDecl(Element xml_code, int id)", "code": "{\n    String type = null;\n    if (method.isStatic()) {\n        Type t = method.getArgumentTypes()[id];\n        type = t.toString();\n    }\n    else {\n        if (id == 0) {\n            type = this.class_name;\n        }\n        else {\n            Type t = method.getArgumentTypes()[id - 1];\n            type = t.toString();\n        }\n    }\n    /*\n     * Should there be a computational type 2 argument, we need to re-think\n     * the numbering of the <var> declarations.\n     */\n    assert !type.equals(\"long\") && !type.equals(\"double\");\n    \n    Element var = new Element(\"var\", nsJVM);\n    var.setAttribute(\"name\", \"__HIDDEN_\" + id);\n    var.setAttribute(\"id\", \"\" + id);\n    var.setAttribute(\"type\", type);\n    var.setAttribute(\"isSynthetic\", \"true\");\n    xml_code.addContent(var);\n}", "path": "changes\\haeberling\\qooxdoo_0-8_integration\\src\\xmlvm\\org\\xmlvm\\ParseJVM.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/**\n * Writes the files given in the constructor to the file system.\n * \n * @return whether all files were written successfully\n */\n", "func_signal": "public boolean writeFiles()", "code": "{\n    for (OutputFile outputFile : outputFiles) {\n        if (!createOutputDirectory(outputFile))\n            Log.error(\"Could not create directory for file: \" + outputFile.getFileName());\n        if (!outputFile.write()) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "trunk\\xmlvm\\src\\xmlvm\\org\\xmlvm\\proc\\out\\OutputFileWriter.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "// Necessary in case the Visual Studio compiler\n// decides to treat a Value Type as an object.\n", "func_signal": "public static SizeF __NEW(float x, float y)", "code": "{\n    SizeF s = new SizeF();\n    s.__CONSTRUCTOR(x, y);\n    return s;\n}", "path": "changes\\haeberling\\merge-trunk-with-build\\src\\clr2jvm\\compat-lib\\Java\\System\\Drawing\\SizeF.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/**\n * Return the current width of the screen TODO: Implement for real. This is\n * only a dummy.\n */\n", "func_signal": "public int getWidth()", "code": "{\n    Activity activity = ActivityManager.getTopActivity();\n    CGSize s = UIScreen.mainScreen().getBounds().size;\n    return (int) (activity.getRequestedOrientation() == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE ? s.height\n            : s.width);\n}", "path": "trunk\\xmlvm\\src\\android2iphone\\android\\view\\Display.java", "repo_name": "icblenke/xmlvm.svn", "stars": 4, "license": "None", "language": "java", "size": 47791}
{"docstring": "/**\n * Get the major version of the driver.  This call will be delegated to the\n * underlying driver that is being spied upon (if there is no underlying\n * driver found, then 1 will be returned.)\n *\n * @return the major version of the JDBC driver.\n */\n", "func_signal": "public int getMajorVersion()", "code": "{\n  if (lastUnderlyingDriverRequested == null)\n  {\n    return 1;\n  }\n  else\n  {\n    return lastUnderlyingDriverRequested.getMajorVersion();\n  }\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\DriverSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * @deprecated\n */\n", "func_signal": "public InputStream getUnicodeStream(int columnIndex) throws SQLException", "code": "{\n  String methodCall = \"getUnicodeStream(\" + columnIndex + \")\";\n  try\n  {\n    return (InputStream) reportReturn(methodCall, realResultSet.getUnicodeStream(columnIndex));\n  }\n  catch (SQLException s)\n  {\n    reportException(methodCall, s);\n    throw s;\n  }\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\ResultSetSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * @deprecated\n */\n", "func_signal": "public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException", "code": "{\n  String methodCall = \"getBigDecimal(\" + columnName + \", \" + scale + \")\";\n  try\n  {\n    return (BigDecimal) reportReturn(methodCall, realResultSet.getBigDecimal(columnName, scale));\n  }\n  catch (SQLException s)\n  {\n    reportException(methodCall, s);\n    throw s;\n  }\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\ResultSetSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * Conveniance method to report (for logging) that a method returned a short value.\n *\n * @param methodCall description of method call and arguments passed to it that returned.\n * @param value short return value.\n * @return the short return value as passed in.\n */\n", "func_signal": "protected short reportReturn(String methodCall, short value)", "code": "{\n  reportAllReturns(methodCall, \"\" + value);\n  return value;\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\ResultSetSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * Get a String option from a system property and\n * log a debug message about this.\n *\n * @param propName System property key.\n * @return the value of that System property key.\n */\n", "func_signal": "private static String getStringOption(String propName)", "code": "{\n  String propValue = System.getProperty(propName);\n  if (propValue == null || propValue.length()==0)\n  {\n    log.debug(\"x \" + propName + \" is not defined\");\n    propValue = null; // force to null, even if empty String\n  }\n  else\n  {\n    log.debug(\"  \" + propName + \" = \" + propValue);\n  }\n  return propValue;\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\DriverSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * Conveniance method to report (for logging) that a method returned a boolean value.\n *\n * @param methodCall description of method call and arguments passed to it that returned.\n * @param value boolean return value.\n * @return the boolean return value as passed in.\n */\n", "func_signal": "protected boolean reportReturn(String methodCall, boolean value)", "code": "{\n  reportAllReturns(methodCall, \"\" + value);\n  return value;\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\ResultSetSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * Get a Long option from a system property and\n * log a debug message about this.\n *\n * @param propName System property key.\n *\n * @return the value of that System property key, converted\n * to a Long.  Or null if not defined or is invalid.\n */\n", "func_signal": "private static Long getLongOption(String propName, long defaultValue)", "code": "{\n  String propValue = System.getProperty(propName);\n  Long longPropValue;\n  if (propValue == null)\n  {\n    log.debug(\"x \" + propName + \" is not defined (using default of \" + defaultValue +\")\");\n    longPropValue = new Long(defaultValue);\n  }\n  else\n  {\n    try\n    {\n      longPropValue = new Long(Long.parseLong(propValue));\n      log.debug(\"  \" + propName + \" = \" + longPropValue);\n    }\n    catch (NumberFormatException n)\n    {\n      log.debug(\"x \" + propName + \" \\\"\" + propValue  +\n        \"\\\" is not a valid number (using default of \" + defaultValue +\")\");\n      longPropValue = new Long(defaultValue);\n    }\n  }\n  return longPropValue;\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\DriverSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * Conveniance method to report (for logging) that a method returned a byte value.\n *\n * @param methodCall description of method call and arguments passed to it that returned.\n * @param value byte return value.\n * @return the byte return value as passed in.\n */\n", "func_signal": "protected byte reportReturn(String methodCall, byte value)", "code": "{\n  reportAllReturns(methodCall, \"\" + value);\n  return value;\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\ResultSetSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * Conveniance method to report (for logging) that a method returned a double value.\n *\n * @param methodCall description of method call and arguments passed to it that returned.\n * @param value double return value.\n * @return the double return value as passed in.\n */\n", "func_signal": "protected double reportReturn(String methodCall, double value)", "code": "{\n  reportAllReturns(methodCall, \"\" + value);\n  return value;\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\ResultSetSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * Returns true if this is a <code>jdbc:log4</code> URL and if the URL is for\n * an underlying driver that this DriverSpy can spy on.\n *\n * @param url JDBC URL.\n *\n * @return true if this Driver can handle the URL.\n *\n * @throws SQLException if a database access error occurs\n */\n", "func_signal": "public boolean acceptsURL(String url) throws SQLException", "code": "{\n  Driver d = getUnderlyingDriver(url);\n  if (d != null)\n  {\n    lastUnderlyingDriverRequested = d;\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\DriverSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * Get a boolean option from a system property and\n * log a debug message about this.\n *\n * @param propName property name to get.\n * @param defaultValue default value to use if undefined.\n *\n * @return boolean value found in property, or defaultValue if no property\n *         found.\n */\n", "func_signal": "private static boolean getBooleanOption(String propName, boolean defaultValue)", "code": "{\n  String propValue = System.getProperty(propName);\n  boolean val;\n  if (propValue == null)\n  {\n    log.debug(\"x \" + propName + \" is not defined (using default value \" +\n      defaultValue + \")\");\n    return defaultValue;\n  }\n  else\n  {\n    propValue = propValue.trim().toLowerCase();\n    if (propValue.length() == 0)\n    {\n      val = defaultValue;\n    }\n    else\n    {\n      val= \"true\".equals(propValue) ||\n        \"yes\".equals(propValue) || \"on\".equals(propValue);\n    }\n  }\n  log.debug(\"  \" + propName + \" = \" + val);\n  return val;\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\DriverSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * Gets information about the possible properties for the underlying driver.\n *\n * @param url  the URL of the database to which to connect\n *\n * @param info a proposed list of tag/value pairs that will be sent on\n *             connect open\n * @return     an array of <code>DriverPropertyInfo</code> objects describing\n *             possible properties.  This array may be an empty array if no\n *             properties are required.\n *\n * @throws SQLException if a database access error occurs\n */\n", "func_signal": "public DriverPropertyInfo[] getPropertyInfo(String url, Properties info)\n  throws SQLException", "code": "{\n  Driver d = getUnderlyingDriver(url);\n  if (d == null)\n  {\n    return new DriverPropertyInfo[0];\n  }\n\n  lastUnderlyingDriverRequested = d;\n  return d.getPropertyInfo(url, info);\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\DriverSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * @deprecated\n */\n", "func_signal": "public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException", "code": "{\n  String methodCall = \"getBigDecimal(\" + columnIndex + \", \" + scale + \")\";\n  try\n  {\n    return (BigDecimal) reportReturn(methodCall, realResultSet.getBigDecimal(columnIndex, scale));\n  }\n  catch (SQLException s)\n  {\n    reportException(methodCall, s);\n    throw s;\n  }\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\ResultSetSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * Conveniance method to report (for logging) that a method returned a float value.\n *\n * @param methodCall description of method call and arguments passed to it that returned.\n * @param value float return value.\n * @return the float return value as passed in.\n */\n", "func_signal": "protected float reportReturn(String methodCall, float value)", "code": "{\n  reportAllReturns(methodCall, \"\" + value);\n  return value;\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\ResultSetSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * Get a Connection to the database from the underlying driver that this\n * DriverSpy is spying on.  If logging is not enabled, an actual Connection to\n * the database returned.  If logging is enabled, a ConnectionSpy object which\n * wraps the real Connection is returned.\n *\n * @param url  JDBC connection URL\n * .\n * @param info a list of arbitrary string tag/value pairs as\n *             connection arguments. Normally at least a \"user\" and\n *             \"password\" property should be included.\n *\n * @return     a <code>Connection</code> object that represents a\n *             connection to the URL.\n *\n * @throws SQLException if a database access error occurs\n */\n", "func_signal": "public Connection connect(String url, Properties info) throws SQLException", "code": "{\n  Driver d = getUnderlyingDriver(url);\n  if (d == null)\n  {\n    return null;\n  }\n\n  // get actual URL that the real driver expects\n  // (strip off \"jdbc:log4\" from url)\n  url = url.substring(9);\n\n  lastUnderlyingDriverRequested = d;\n  Connection c = d.connect(url, info);\n\n  if (c == null)\n  {\n    throw new SQLException(\"invalid or unknown driver url: \" + url);\n  }\n  if (log.isJdbcLoggingEnabled())\n  {\n    ConnectionSpy cspy = new ConnectionSpy(c);\n    RdbmsSpecifics r = null;\n    String dclass = d.getClass().getName();\n    if (dclass != null && dclass.length() > 0)\n    {\n      r = (RdbmsSpecifics) rdbmsSpecifics.get(dclass);\n    }\n\n    if (r == null)\n    {\n      r = defaultRdbmsSpecifics;\n    }\n    cspy.setRdbmsSpecifics(r);\n    return cspy;\n  }\n  else\n  {\n    return c;\n  }\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\DriverSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * Create a new ResultSetSpy that wraps another ResultSet object, that logs all method calls, expceptions, etc.\n *\n * @param parent Statement that generated this ResultSet.\n * @param realResultSet real underlying ResultSet that is being wrapped.\n */\n", "func_signal": "public ResultSetSpy(StatementSpy parent, ResultSet realResultSet)", "code": "{\n  if (realResultSet == null)\n  {\n    throw new IllegalArgumentException(\"Must provide a non null real ResultSet\");\n  }\n  this.realResultSet = realResultSet;\n  this.parent = parent;\n  log = SpyLogFactory.getSpyLogDelegator();\n  reportReturn(\"new ResultSet\");\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\ResultSetSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * Conveniance method to report (for logging) that a method returned a long value.\n *\n * @param methodCall description of method call and arguments passed to it that returned.\n * @param value long return value.\n * @return the long return value as passed in.\n */\n", "func_signal": "protected long reportReturn(String methodCall, long value)", "code": "{\n  reportAllReturns(methodCall, \"\" + value);\n  return value;\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\ResultSetSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * Conveniance method to report (for logging) that a method returned an Object.\n *\n * @param methodCall description of method call and arguments passed to it that returned.\n * @param value return Object.\n * @return the return Object as passed in.\n */\n", "func_signal": "protected Object reportReturn(String methodCall, Object value)", "code": "{\n  reportAllReturns(methodCall, \"\" + value);\n  return value;\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\ResultSetSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * Report whether the underlying driver is JDBC compliant.  If there is no\n * underlying driver, false will be returned, because the driver cannot\n * actually do any work without an underlying driver.\n *\n * @return <code>true</code> if the underlying driver is JDBC Compliant;\n *         <code>false</code> otherwise.\n */\n", "func_signal": "public boolean jdbcCompliant()", "code": "{\n  return lastUnderlyingDriverRequested != null &&\n    lastUnderlyingDriverRequested.jdbcCompliant();\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\DriverSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/**\n * Given a <code>jdbc:log4</code> type URL, find the underlying real driver\n * that accepts the URL.\n *\n * @param url JDBC connection URL.\n *\n * @return Underlying driver for the given URL. Null is returned if the URL is\n *         not a <code>jdbc:log4</code> type URL or there is no underlying\n *         driver that accepts the URL.\n *\n * @throws SQLException if a database access error occurs.\n */\n", "func_signal": "private Driver getUnderlyingDriver(String url) throws SQLException", "code": "{\n  if (url.startsWith(\"jdbc:log4\"))\n  {\n    url = url.substring(9);\n\n    Enumeration e = DriverManager.getDrivers();\n\n    Driver d;\n    while (e.hasMoreElements())\n    {\n      d = (Driver) e.nextElement();\n\n      if (d.acceptsURL(url))\n      {\n        return d;\n      }\n    }\n  }\n  return null;\n}", "path": "src-jdbc3\\net\\sf\\log4jdbc\\DriverSpy.java", "repo_name": "azzoti/log4jdbc-remix", "stars": 4, "license": "None", "language": "java", "size": 248}
{"docstring": "/** To write out the value of an ASTExpr, invoke the evaluator in eval.g\n *  to walk the tree writing out the values.  For efficiency, don't\n *  compute a bunch of strings and then pack them together.  Write out directly.\n\t *\n\t *  Compute separator and wrap expressions, save as strings so we don't\n\t *  recompute for each value in a multi-valued attribute or expression.\n\t *\n\t *  If they set anchor option, then inform the writer to push current\n\t *  char position.\n */\n", "func_signal": "public int write(StringTemplate self, StringTemplateWriter out) throws IOException", "code": "{\n    if ( exprTree==null || self==null || out==null ) {\n        return 0;\n    }\n\t\t// handle options, anchor, wrap, separator...\n\t\tStringTemplateAST anchorAST = (StringTemplateAST)getOption(\"anchor\");\n\t\tif ( anchorAST!=null ) { // any non-empty expr means true; check presence\n\t\t\tout.pushAnchorPoint();\n\t\t}\n    out.pushIndentation(getIndentation());\n\t\thandleExprOptions(self);\n\t\t//System.out.println(\"evaluating tree: \"+exprTree.toStringList());\n    ActionEvaluator eval =\n            new ActionEvaluator(self,this,out);\n\t\tint n = 0;\n    try {\n        n = eval.action(exprTree); // eval and write out tree\n    }\n    catch (RecognitionException re) {\n        self.error(\"can't evaluate tree: \"+exprTree.toStringList(), re);\n    }\n    out.popIndentation();\n\t\tif ( anchorAST!=null ) {\n\t\t\tout.popAnchorPoint();\n\t\t}\n\t\treturn n;\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\language\\ASTExpr.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Return the length of a multiple valued attribute or 1 if it is a\n *  single attribute. If attribute is null return 0.\n *  Special case several common collections and primitive arrays for\n *  speed.  This method by Kay Roepke.\n */\n", "func_signal": "public Object length(Object attribute)", "code": "{\n\tif ( attribute == null) {\n\t\treturn new Integer(0);\n\t}\n\tint i = 1;\t\t// we have at least one of something. Iterator and arrays might be empty.\n\tif (attribute instanceof Map) {\n\t\ti = ((Map)attribute).size();\n\t}\n\telse if (attribute instanceof Collection) {\n\t\ti = ((Collection)attribute).size();\n\t}\n\telse if ( attribute instanceof Object[] ) {\n\t\tObject[] list = (Object[])attribute;\n\t\ti = list.length;\n\t}\n\telse if ( attribute instanceof int[] ) {\n\t\tint[] list = (int[])attribute;\n\t\ti = list.length;\n\t}\n\telse if ( attribute instanceof long[] ) {\n\t\tlong[] list = (long[])attribute;\n\t\ti = list.length;\n\t}\n\telse if ( attribute instanceof float[] ) {\n\t\tfloat[] list = (float[])attribute;\n\t\ti = list.length;\n\t}\n\telse if ( attribute instanceof double[] ) {\n\t\tdouble[] list = (double[])attribute;\n\t\ti = list.length;\n\t}\n\telse if ( attribute instanceof Iterator) {\n\t\tIterator it = (Iterator)attribute;\n\t\ti = 0;\n\t\twhile ( it.hasNext() ) {\n\t\t\tit.next();\n\t\t\ti++;\n\t\t}\n\t}\n\treturn new Integer(i);\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\language\\ASTExpr.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Do a standard conversion of array attributes to a List.  Wrap the\n *  array instead of copying like old version.  Make an\n *  ArrayWrappedInList that knows to create an ArrayIterator.\n */\n", "func_signal": "public static Object convertArrayToList(Object value)", "code": "{\n\tif ( value==null ) {\n\t\treturn null;\n\t}\n\tif ( value.getClass().isArray() ) {\n\t\tif ( value.getClass().getComponentType().isPrimitive() ) {\n\t\t\treturn new ArrayWrappedInList(value);\n\t\t}\n\t\treturn Arrays.asList((Object[])value);\n\t}\n\treturn value;\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\language\\ASTExpr.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Grab and cache options; verify options are valid */\n", "func_signal": "protected void handleExprOptions(StringTemplate self)", "code": "{\n\t// make sure options don't use format / renderer.  They are usually\n\t// strings which might invoke a string renderer etc...\n\tformatString = null;\n\tStringTemplateAST wrapAST = (StringTemplateAST)getOption(\"wrap\");\n\tif ( wrapAST!=null ) {\n\t\twrapString = evaluateExpression(self,wrapAST);\n\t}\n\tStringTemplateAST nullValueAST = (StringTemplateAST)getOption(\"null\");\n\tif ( nullValueAST!=null ) {\n\t\tnullValue = evaluateExpression(self,nullValueAST);\n\t}\n\tStringTemplateAST separatorAST = (StringTemplateAST)getOption(\"separator\");\n\tif ( separatorAST!=null ) {\n\t\tseparatorString = evaluateExpression(self, separatorAST);\n\t}\n\t// following addition inspired by John Snyders\n\tStringTemplateAST formatAST =\n\t\t(StringTemplateAST)getOption(\"format\");\n\tif ( formatAST!=null ) {\n\t\tformatString = evaluateExpression(self, formatAST);\n\t}\n\n\t// Check that option is valid\n\tif ( options != null ) {\n\t\tIterator it = options.keySet().iterator();\n\t\twhile ( it.hasNext() ) {\n\t\t\tString option = (String)it.next();\n\t\t\tif (!supportedOptions.contains(option)) {\n\t\t\t\tself.warning(\"ignoring unsupported option: \"+option);\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\language\\ASTExpr.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Return the first attribute if multiple valued or the attribute\n *  itself if single-valued.  Used in <names:first()>\n */\n", "func_signal": "public Object first(Object attribute)", "code": "{\n\tif ( attribute==null ) {\n\t\treturn null;\n\t}\n\tObject f = attribute;\n\tattribute = convertAnythingIteratableToIterator(attribute);\n\tif ( attribute instanceof Iterator ) {\n\t\tIterator it = (Iterator)attribute;\n\t\tif ( it.hasNext() ) {\n\t\t\tf = it.next();\n\t\t}\n\t}\n\n\treturn f;\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\language\\ASTExpr.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Get a child object.  If Conditional then return subtemplate.\n\t *  If ASTExpr and INCLUDE then return ith chunk of sub StringTemplate\n\t */\n", "func_signal": "public Object getChild(Object parent, int index)", "code": "{\n\t\t//System.out.println(\"Get index \"+index+\" of \"+parent.toString()+\":\"+parent.getClass().getName());\n    if (parent == null) {\n        return null;\n    }\n\t\treturn ((Wrapper)parent).getChild(parent, index);\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\misc\\JTreeStringTemplateModel.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** For <names,phones:{n,p | ...}> treat the names, phones as lists\n *  to be walked in lock step as n=names[i], p=phones[i].\n */\n", "func_signal": "public Object applyTemplateToListOfAttributes(StringTemplate self,\n\t\t\t\t\t\t\t\t\t\t\t  List attributes,\n\t\t\t\t\t\t\t\t\t\t\t  StringTemplate templateToApply)", "code": "{\n\tif ( attributes==null || templateToApply==null || attributes.size()==0 ) {\n\t\treturn null; // do not apply if missing templates or empty values\n\t}\n\tMap argumentContext = null;\n\t// indicate it's an ST-created list\n\tList results = new StringTemplate.STAttributeList();\n\n\t// convert all attributes to iterators even if just one value\n\tfor (int a = 0; a < attributes.size(); a++) {\n\t\tObject o = (Object) attributes.get(a);\n\t\tif ( o!=null ) {\n\t\t\to = convertAnythingToIterator(o);\n\t\t\tattributes.set(a, o); // alter the list in place\n\t\t}\n\t}\n\n\tint numAttributes = attributes.size();\n\n\t// ensure arguments line up\n\tMap formalArguments = templateToApply.getFormalArguments();\n\tif ( formalArguments==null || formalArguments.size()==0 ) {\n\t\tself.error(\"missing arguments in anonymous\"+\n\t\t\t\t   \" template in context \"+self.getEnclosingInstanceStackString());\n\t\treturn null;\n\t}\n\tObject[] formalArgumentNames = formalArguments.keySet().toArray();\n\tif ( formalArgumentNames.length!=numAttributes ) {\n\t\tself.error(\"number of arguments \"+formalArguments.keySet()+\n\t\t\t\t   \" mismatch between attribute list and anonymous\"+\n\t\t\t\t   \" template in context \"+self.getEnclosingInstanceStackString());\n\t\t// truncate arg list to match smaller size\n\t\tint shorterSize = Math.min(formalArgumentNames.length, numAttributes);\n\t\tnumAttributes = shorterSize;\n\t\tObject[] newFormalArgumentNames = new Object[shorterSize];\n\t\tSystem.arraycopy(formalArgumentNames, 0,\n\t\t\t\t\t\t newFormalArgumentNames, 0,\n\t\t\t\t\t\t shorterSize);\n\t\tformalArgumentNames = newFormalArgumentNames;\n\t}\n\n\t// keep walking while at least one attribute has values\n\tint i = 0; // iteration number from 0\n\twhile ( true ) {\n\t\targumentContext = new HashMap();\n\t\t// get a value for each attribute in list; put into arg context\n\t\t// to simulate template invocation of anonymous template\n\t\tint numEmpty = 0;\n\t\tfor (int a = 0; a < numAttributes; a++) {\n\t\t\tIterator it = (Iterator) attributes.get(a);\n\t\t\tif ( it!=null && it.hasNext() ) {\n\t\t\t\tString argName = (String)formalArgumentNames[a];\n\t\t\t\tObject iteratedValue = it.next();\n\t\t\t\targumentContext.put(argName, iteratedValue);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnumEmpty++;\n\t\t\t}\n\t\t}\n\t\tif ( numEmpty==numAttributes ) {\n\t\t\tbreak;\n\t\t}\n\t\targumentContext.put(DEFAULT_INDEX_VARIABLE_NAME, new Integer(i+1));\n\t\targumentContext.put(DEFAULT_INDEX0_VARIABLE_NAME, new Integer(i));\n\t\tStringTemplate embedded = templateToApply.getInstanceOf();\n\t\tembedded.setEnclosingInstance(self);\n\t\tembedded.setArgumentContext(argumentContext);\n\t\tresults.add(embedded);\n\t\ti++;\n\t}\n\n\treturn results;\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\language\\ASTExpr.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** For now, we can only add two objects as strings; convert objects to\n\t *  Strings then cat.\n */\n", "func_signal": "public Object add(Object a, Object b)", "code": "{\n    if ( a==null ) { // a null value means don't do cat, just return other value\n        return b;\n    }\n    else if ( b==null ) {\n        return a;\n    }\n\t\treturn a.toString() + b.toString();\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\language\\ASTExpr.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Evaluate an argument list within the context of the enclosing\n *  template but store the values in the context of self, the\n *  new embedded template.  For example, bold(item=item) means\n *  that bold.item should get the value of enclosing.item.\n */\n", "func_signal": "protected void evaluateArguments(StringTemplate self)", "code": "{\n        StringTemplateAST argumentsAST = self.getArgumentsAST();\n        if ( argumentsAST==null || argumentsAST.getFirstChild()==null )\t{\n            // return immediately if missing tree or no actual args\n            return;\n        }\n\n\t// Evaluate args in the context of the enclosing template, but we\n\t// need the predefined args like 'it', 'attr', and 'i' to be\n\t// available as well so we put a dummy ST between the enclosing\n\t// context and the embedded context.  The dummy has the predefined\n\t// context as does the embedded.\n\tStringTemplate enclosing = self.getEnclosingInstance();\n\tStringTemplate argContextST = new StringTemplate(self.getGroup(), \"\");\n\targContextST.setName(\"<invoke \"+self.getName()+\" arg context>\");\n\targContextST.setEnclosingInstance(enclosing);\n\targContextST.setArgumentContext(self.getArgumentContext());\n\n        ActionEvaluator eval =\n                new ActionEvaluator(argContextST,this,null);\n\t/*\n\tSystem.out.println(\"eval args: \"+argumentsAST.toStringList());\n\tSystem.out.println(\"ctx is \"+self.getArgumentContext());\n\t*/\n        try {\n            // using any initial argument context (such as when obj is set),\n            // evaluate the arg list like bold(item=obj).  Since we pass\n            // in any existing arg context, that context gets filled with\n            // new values.  With bold(item=obj), context becomes:\n            // {[obj=...],[item=...]}.\n            Map ac = eval.argList(argumentsAST, self, self.getArgumentContext());\n            self.setArgumentContext(ac);\n        }\n        catch (RecognitionException re) {\n            self.error(\"can't evaluate tree: \"+argumentsAST.toStringList(), re);\n        }\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\language\\ASTExpr.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Return the last attribute if multiple valued or the attribute\n *  itself if single-valued.  Used in <names:last()>.  This is pretty\n *  slow as it iterates until the last element.  Ultimately, I could\n *  make a special case for a List or Vector.\n */\n", "func_signal": "public Object last(Object attribute)", "code": "{\n\tif ( attribute==null ) {\n\t\treturn null;\n\t}\n\tObject last = attribute;\n\tattribute = convertAnythingIteratableToIterator(attribute);\n\tif ( attribute instanceof Iterator ) {\n\t\tIterator it = (Iterator)attribute;\n\t\twhile ( it.hasNext() ) {\n\t\t\tlast = it.next();\n\t\t}\n\t}\n\n\treturn last;\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\language\\ASTExpr.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** A expr is normally just a string literal, but is still an AST that\n *  we must evaluate.  The expr can be any expression such as a template\n *  include or string cat expression etc...  Evaluate with its own writer\n *  so that we can convert to string and then reuse, don't want to compute\n *  all the time; must precompute w/o writing to output buffer.\n */\n", "func_signal": "public String evaluateExpression(StringTemplate self,\n                                 Object expr)", "code": "{\n    if ( expr ==null ) {\n        return null;\n    }\n    if ( expr instanceof StringTemplateAST ) {\n\t\t\tStringTemplateAST exprAST = (StringTemplateAST)expr;\n\t\t\t// must evaluate, writing to a string so we can hang on to it\n        StringWriter buf = new StringWriter();\n\t\t\tStringTemplateWriter sw =\n\t\t\t\tself.getGroup().getStringTemplateWriter(buf);\n\t\t\t {\n\t\t\t\tActionEvaluator eval =\n\t\t\t\t\t\tnew ActionEvaluator(self,this,sw);\n\t\t\t\ttry {\n\t\t\t\t\teval.action(exprAST); // eval tree\n\t\t\t\t}\n\t\t\t\tcatch (RecognitionException re) {\n\t\t\t\t\tself.error(\"can't evaluate tree: \"+exprTree.toStringList(), re);\n\t\t\t\t}\n        }\n        return buf.toString();\n    }\n    else {\n        // just in case we expand in the future and it's something else\n        return expr.toString();\n    }\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\language\\ASTExpr.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Just print out the string; no reference to self because this\n     *  is a literal--not sensitive to attribute values.  These strings\n *  never wrap because they are not part of an <...> expression.\n *  <\"foo\"; wrap=\"\\n\"> should wrap though if necessary.\n     */\n", "func_signal": "public int write(StringTemplate self, StringTemplateWriter out) throws IOException", "code": "{\n\tif ( str!=null ) {\n\t\tint n = out.write(str);\n\t\treturn n;\n\t}\n\treturn 0;\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\language\\StringRef.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Get a wrapper object by adding \"Wrapper\" to class name.\n *  If not present, return the object.\n */\n", "func_signal": "public static Object wrap(Object o)", "code": "{\n\tObject wrappedObject = o;\n\tClass wrapperClass = null;\n\ttry {\n\t\twrapperClass = (Class)classNameToWrapperMap.get(o.getClass().getName());\n\t\tConstructor ctor = wrapperClass.getConstructor(new Class[]{Object.class});\n\t\twrappedObject = ctor.newInstance(new Object[] {o});\n\t}\n\tcatch (Exception e) {\n\t\t// some problem...oh well, just use the object\n\t\t;\n\t}\n\treturn wrappedObject;\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\misc\\JTreeStringTemplateModel.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/*\tWrite o relative to self to out.\n *\n *  John Snyders fixes here for formatString.  Basically, any time\n *  you are about to write a value, check formatting.\n */\n", "func_signal": "protected int write(StringTemplate self,\n\t\t\t\t\tObject o,\n\t\t\t\t\tStringTemplateWriter out)", "code": "{\n        if ( o==null ) {\n\t\tif ( nullValue==null ) {\n\t\t\treturn MISSING;\n\t\t}\n\t\to = nullValue; // continue with null option if specified\n        }\n        int n = 0;\n        try {\n            if ( o instanceof StringTemplate ) return writeTemplate(self, o, out);\n            o = convertAnythingIteratableToIterator(o); // normalize\n            if ( o instanceof Iterator ) return writeIterableValue(self, o, out);\n            return writePOJO(self, o, out);\n        }\n        catch (IOException io) {\n            self.error(\"problem writing object: \"+o, io);\n        }\n\treturn n;\n    }", "path": "src\\java\\org\\antlr\\stringtemplate\\language\\ASTExpr.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Return o.getPropertyName() given o and propertyName.  If o is\n     *  a stringtemplate then access it's attributes looking for propertyName\n     *  instead (don't check any of the enclosing scopes; look directly into\n     *  that object).  Also try isXXX() for booleans.  Allow Map\n *  as special case (grab value for key).\n *\n *  Cache repeated requests for obj.prop within same group.\n     */\n", "func_signal": "public Object getObjectProperty(StringTemplate self,\n\t\t\t\t\t\t\t\tfinal Object o,\n\t\t\t\t\t\t\t\tfinal Object propertyName)", "code": "{\n\tif ( o==null || propertyName==null ) {\n\t\treturn null;\n\t}\n\t/*\n\t// see if property is cached in group's cache\n\tObject cachedValue =\n\t\tself.getGroup().getCachedObjectProperty(o,propertyName);\n\tif ( cachedValue!=null ) {\n\t\treturn cachedValue;\n\t}\n\tObject value = rawGetObjectProperty(self, o, propertyName);\n\t// take care of array properties...convert to a List so we can\n\t// apply templates to the elements etc...\n\tvalue = convertArrayToList(value);\n\tself.getGroup().cacheObjectProperty(o,propertyName,value);\n\t*/\n\tObject value = rawGetObjectProperty(self, o, propertyName);\n\t// take care of array properties...convert to a List so we can\n\t// apply templates to the elements etc...\n\tvalue = convertArrayToList(value);\n\treturn value;\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\language\\ASTExpr.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Return all but the last element.  trunc(x)=null if x is single-valued. */\n", "func_signal": "public Object trunc(Object attribute)", "code": "{\n\tif ( attribute==null ) {\n\t\treturn null;\n\t}\n\tattribute = convertAnythingIteratableToIterator(attribute);\n\tif ( attribute instanceof Iterator ) {\n\t\tList a = new ArrayList();\n\t\tIterator it = (Iterator)attribute;\n\t\twhile (it.hasNext()) {\n\t\t\tObject o = (Object) it.next();\n\t\t\tif ( it.hasNext() ) a.add(o); // only add if not last one\n\t\t}\n\t\treturn a;\n\t}\n\treturn null; // trunc(x)==null when x single-valued attribute\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\language\\ASTExpr.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Return the everything but the first attribute if multiple valued\n *  or null if single-valued.  Used in <names:rest()>.\n */\n", "func_signal": "public Object rest(Object attribute)", "code": "{\n\tif ( attribute==null ) {\n\t\treturn null;\n\t}\n\tObject theRest = attribute;\n\tattribute = convertAnythingIteratableToIterator(attribute);\n\tif ( attribute instanceof Iterator ) {\n\t\tList a = new ArrayList();\n\t\tIterator it = (Iterator)attribute;\n            if ( !it.hasNext() ) {\n                return null; // if not even one value return null\n            }\n            it.next(); // ignore first value\n\t\twhile (it.hasNext()) {\n\t\t\tObject o = (Object) it.next();\n\t\t\tif ( o!=null ) a.add(o);\n\t\t}\n\t\treturn a;\n\t}\n\telse {\n\t\ttheRest = null;  // rest of single-valued attribute is null\n\t}\n\n\treturn theRest;\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\language\\ASTExpr.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Display different things depending on the ASTExpr type */\n", "func_signal": "public String toString()", "code": "{\n\tif ( expr instanceof ASTExpr ) {\n\t\tAST tree = ((ASTExpr)expr).getAST();\n\t\tif ( tree.getType()==ActionEvaluatorTokenTypes.INCLUDE ) {\n\t\t\treturn \"$include$\";\n\t\t}\n\t\treturn \"$\"+((ASTExpr)expr).getAST().toStringList()+\"$\";\n\t}\n\tif ( expr instanceof StringRef ) {\n\t\treturn expr.toString();\n\t}\n\treturn \"<invalid node type>\";\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\misc\\JTreeStringTemplateModel.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Return a new list w/o null values. */\n", "func_signal": "public Object strip(Object attribute)", "code": "{\n\tif ( attribute==null ) {\n\t\treturn null;\n\t}\n\tattribute = convertAnythingIteratableToIterator(attribute);\n\tif ( attribute instanceof Iterator ) {\n\t\tList a = new ArrayList();\n\t\tIterator it = (Iterator)attribute;\n\t\twhile (it.hasNext()) {\n\t\t\tObject o = (Object) it.next();\n\t\t\tif ( o!=null ) a.add(o);\n\t\t}\n\t\treturn a;\n\t}\n\treturn attribute; // strip(x)==x when x single-valued attribute\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\language\\ASTExpr.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Look in each relative directory for the file called 'name'.\n *  Load via classpath.\n */\n", "func_signal": "protected BufferedReader locate(String name) throws IOException", "code": "{\n\tfor (int i = 0; i < dirs.size(); i++) {\n\t\tString dir = (String) dirs.get(i);\n\t\tString fileName = dir+\"/\"+name;\n\t\t//System.out.println(\"trying \"+fileName);\n\t\tClassLoader cl = Thread.currentThread().getContextClassLoader();\n\t\tInputStream is = cl.getResourceAsStream(fileName);\n\t\tif ( is==null ) {\n\t\t\tcl = this.getClass().getClassLoader();\n\t\t\tis = cl.getResourceAsStream(fileName);\n\t\t}\n\t\tif ( is!=null ) {\n\t\t\treturn new BufferedReader(getInputStreamReader(is));\n\t\t}\n\t}\n\treturn null;\n}", "path": "src\\java\\org\\antlr\\stringtemplate\\CommonGroupLoader.java", "repo_name": "ewiger/stringtemplate", "stars": 6, "license": "None", "language": "java", "size": 268}
{"docstring": "/// @param __size C type : char[20]\n", "func_signal": "public pthread_barrier_t(byte __size[])", "code": "{\n\tsuper();\n\tif (__size.length != this.__size.length) \n\t\tthrow new java.lang.IllegalArgumentException(\"Wrong array size !\");\n\tthis.__size = __size;\n\tsetType(byte[].class);\n}", "path": "src\\main\\java\\libusbone\\pthread_barrier_t.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/// @param __size C type : char[8]\n", "func_signal": "public pthread_rwlockattr_t(byte __size[])", "code": "{\n\tsuper();\n\tif (__size.length != this.__size.length) \n\t\tthrow new java.lang.IllegalArgumentException(\"Wrong array size !\");\n\tthis.__size = __size;\n\tsetType(byte[].class);\n}", "path": "src\\main\\java\\libusbone\\pthread_rwlockattr_t.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/// @param __data C type : __data_struct\n", "func_signal": "public pthread_cond_t(__data_struct __data)", "code": "{\n\tsuper();\n\tthis.__data = __data;\n\tsetType(__data_struct.class);\n}", "path": "src\\main\\java\\libusbone\\pthread_cond_t.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/*\n * typedef struct { float32 float32 float32 float32 uint16 float64\n * radian_position_type float32 float32 float32 float32 sint16 uint32 }\n * D800_Pvt_Data_Type;\n */\n", "func_signal": "private static void unpackD800(byte[] data) throws IOException", "code": "{\n\tDateTime systemNow=new DateTime();\n\tByteBuffer buffer = wrap(data).order(LITTLE_ENDIAN);\n\tfloat alt = buffer.getFloat();\n\tfloat epe = buffer.getFloat();\n\tfloat eph = buffer.getFloat();\n\tfloat epv = buffer.getFloat();\n\tint fix = buffer.getShort();\n\tdouble tow = buffer.getDouble();\n\tDuration towDuration = new Duration(round(1000*tow));\n\t\n\tBasicDataTypes.Coord.fromRadianPositionType(buffer);\n\t\n\tfloat east = buffer.getFloat();\n\tfloat north = buffer.getFloat();\n\tfloat up = buffer.getFloat();\n\tfloat msl_hght = buffer.getFloat();\n\tshort leap_scnds = buffer.getShort();\n\tDuration leapSeconds=Duration.standardSeconds(leap_scnds);\n\tSystem.out.println(fix+\" \"+tow+\" \"+leap_scnds);\n\t\n\tint wn_days = buffer.getInt();\n\tPeriod daysFromStartOfEpochToStartOfWeek = Period.days(wn_days);\n\t\n\tDateTime utcNow = BasicDataTypes.EPOCH.plus(daysFromStartOfEpochToStartOfWeek).plus(towDuration).minus(leapSeconds);\n\tSystem.out.println(utcNow + \" \"+new Duration(utcNow, systemNow));\n}", "path": "src\\main\\java\\com\\madgag\\garmin\\PositionVelocityTimeProtocol.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/**\n * @param length Length of data to request in this packet<br>\n * @param actual_length Amount of data that was actually transferred<br>\n * @param status Status code for this packet<br>\n * @see libusb_transfer_status<br>\n * C type : libusb_transfer_status\n */\n", "func_signal": "public libusb_iso_packet_descriptor(int length, int actual_length, int status)", "code": "{\n\tsuper();\n\tthis.length = length;\n\tthis.actual_length = actual_length;\n\tthis.status = status;\n}", "path": "src\\main\\java\\libusbone\\libusb_iso_packet_descriptor.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/// @param __data C type : __data_struct\n", "func_signal": "public pthread_rwlock_t(__data_struct __data)", "code": "{\n\tsuper();\n\tthis.__data = __data;\n\tsetType(__data_struct.class);\n}", "path": "src\\main\\java\\libusbone\\pthread_rwlock_t.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/**\n * @param __val Type of file system IDs.<br>\n * C type : int[2]\n */\n", "func_signal": "public __fsid_t(int __val[])", "code": "{\n\tsuper();\n\tif (__val.length != this.__val.length) \n\t\tthrow new java.lang.IllegalArgumentException(\"Wrong array size !\");\n\tthis.__val = __val;\n}", "path": "src\\main\\java\\libusbone\\__fsid_t.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/// @param __size C type : char[4]\n", "func_signal": "public pthread_barrierattr_t(byte __size[])", "code": "{\n\tsuper();\n\tif (__size.length != this.__size.length) \n\t\tthrow new java.lang.IllegalArgumentException(\"Wrong array size !\");\n\tthis.__size = __size;\n\tsetType(byte[].class);\n}", "path": "src\\main\\java\\libusbone\\pthread_barrierattr_t.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/// @param __next C type : __pthread_internal_slist*\n", "func_signal": "public __pthread_internal_slist(libusbone.__pthread_internal_slist.ByReference __next)", "code": "{\n\tsuper();\n\tthis.__next = __next;\n}", "path": "src\\main\\java\\libusbone\\__pthread_internal_slist.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/// @param __mutex C type : void*\n", "func_signal": "public __data_struct(int __lock, int __futex, long __total_seq, long __wakeup_seq, long __woken_seq, com.sun.jna.Pointer __mutex, int __nwaiters, int __broadcast_seq)", "code": "{\n\tsuper();\n\tthis.__lock = __lock;\n\tthis.__futex = __futex;\n\tthis.__total_seq = __total_seq;\n\tthis.__wakeup_seq = __wakeup_seq;\n\tthis.__woken_seq = __woken_seq;\n\tthis.__mutex = __mutex;\n\tthis.__nwaiters = __nwaiters;\n\tthis.__broadcast_seq = __broadcast_seq;\n}", "path": "src\\main\\java\\libusbone\\pthread_cond_t.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/**\n * @param bmRequestType Request type. Bits 0:4 determine recipient, see<br>\n * \\ref libusb_request_recipient. Bits 5:6 determine type, see<br>\n * \\ref libusb_request_type. Bit 7 determines data transfer direction, see<br>\n * \\ref libusb_endpoint_direction.<br>\n * @param bRequest Request. If the type bits of bmRequestType are equal to<br>\n * \\ref libusb_request_type::LIBUSB_REQUEST_TYPE_STANDARD<br>\n * \"LIBUSB_REQUEST_TYPE_STANDARD\" then this field refers to<br>\n * \\ref libusb_standard_request. For other cases, use of this field is<br>\n * application-specific.<br>\n * @param wValue Value. Varies according to request<br>\n * @param wIndex Index. Varies according to request, typically used to pass an index<br>\n * or offset<br>\n * @param wLength Number of bytes to transfer\n */\n", "func_signal": "public libusb_control_setup(byte bmRequestType, byte bRequest, short wValue, short wIndex, short wLength)", "code": "{\n\tsuper();\n\tthis.bmRequestType = bmRequestType;\n\tthis.bRequest = bRequest;\n\tthis.wValue = wValue;\n\tthis.wIndex = wIndex;\n\tthis.wLength = wLength;\n}", "path": "src\\main\\java\\libusbone\\libusb_control_setup.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/// @param __size C type : char[36]\n", "func_signal": "public pthread_attr_t(byte __size[])", "code": "{\n\tsuper();\n\tif (__size.length != this.__size.length) \n\t\tthrow new java.lang.IllegalArgumentException(\"Wrong array size !\");\n\tthis.__size = __size;\n\tsetType(byte[].class);\n}", "path": "src\\main\\java\\libusbone\\pthread_attr_t.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/**\n * @param tz_minuteswest Minutes west of GMT.<br>\n * @param tz_dsttime Nonzero if DST is ever in effect.\n */\n", "func_signal": "public timezone(int tz_minuteswest, int tz_dsttime)", "code": "{\n\tsuper();\n\tthis.tz_minuteswest = tz_minuteswest;\n\tthis.tz_dsttime = tz_dsttime;\n}", "path": "src\\main\\java\\libusbone\\timezone.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/// @param __size C type : char[48]\n", "func_signal": "public pthread_cond_t(byte __size[])", "code": "{\n\tsuper();\n\tif (__size.length != this.__size.length) \n\t\tthrow new java.lang.IllegalArgumentException(\"Wrong array size !\");\n\tthis.__size = __size;\n\tsetType(byte[].class);\n}", "path": "src\\main\\java\\libusbone\\pthread_cond_t.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/// @param __size C type : char[4]\n", "func_signal": "public pthread_mutexattr_t(byte __size[])", "code": "{\n\tsuper();\n\tif (__size.length != this.__size.length) \n\t\tthrow new java.lang.IllegalArgumentException(\"Wrong array size !\");\n\tthis.__size = __size;\n\tsetType(byte[].class);\n}", "path": "src\\main\\java\\libusbone\\pthread_mutexattr_t.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/// @param b8 C type : uint8_t[2]\n", "func_signal": "public _tmp_union(byte b8[])", "code": "{\n\tsuper();\n\tif (b8.length != this.b8.length) \n\t\tthrow new java.lang.IllegalArgumentException(\"Wrong array size !\");\n\tthis.b8 = b8;\n\tsetType(byte[].class);\n}", "path": "src\\main\\java\\libusbone\\_tmp_union.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/**\n * @param tv_sec Seconds.<br>\n * C type : __time_t<br>\n * @param tv_usec Microseconds.<br>\n * C type : __suseconds_t\n */\n", "func_signal": "public timeval(int tv_sec, int tv_usec)", "code": "{\n\tsuper();\n\tthis.tv_sec = tv_sec;\n\tthis.tv_usec = tv_usec;\n}", "path": "src\\main\\java\\libusbone\\timeval.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/**\n * @param it_interval Value to put into `it_value' when the timer expires.<br>\n * C type : timeval<br>\n * @param it_value Time to the next timer expiration.<br>\n * C type : timeval\n */\n", "func_signal": "public itimerval(libusbone.timeval it_interval, libusbone.timeval it_value)", "code": "{\n\tsuper();\n\tthis.it_interval = it_interval;\n\tthis.it_value = it_value;\n}", "path": "src\\main\\java\\libusbone\\itimerval.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/*\n * static void garmin_unpack_d1009 ( D1009 * run, uint8 ** pos ) {\n * GETU16(run->track_index); GETU16(run->first_lap_index);\n * GETU16(run->last_lap_index); GETU8(run->sport_type);\n * GETU8(run->program_type); GETU8(run->multisport); SKIP(3);\n * GETU32(run->quick_workout.time); GETF32(run->quick_workout.distance);\n * garmin_unpack_d1008(&run->workout,pos); }\n */\n", "func_signal": "private static boolean isGarmin(libusb_device_descriptor desc)", "code": "{\n\treturn desc.idVendor == GARMIN_USB_VID\n\t\t\t&& desc.idProduct == GARMIN_USB_PID;\n}", "path": "src\\main\\java\\com\\madgag\\garmin\\Main.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/// @param __size C type : char[4]\n", "func_signal": "public pthread_condattr_t(byte __size[])", "code": "{\n\tsuper();\n\tif (__size.length != this.__size.length) \n\t\tthrow new java.lang.IllegalArgumentException(\"Wrong array size !\");\n\tthis.__size = __size;\n\tsetType(byte[].class);\n}", "path": "src\\main\\java\\libusbone\\pthread_condattr_t.java", "repo_name": "rtyley/JNA-USB", "stars": 6, "license": "None", "language": "java", "size": 154}
{"docstring": "/**\n * Main method for the commandline version of this program.\n *\n * reads the arguments in the given stringarray and calls the factorymethod\n * {@link Program#createAndRunFromStdio} to instantiate a new Program\n * and run it with the given commandline options.\n * On any Exceptions, print a short info about the cause and the stacktrace to\n * System.err\n *\n * @param args a <code>String[]</code> value\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    if ((args.length>=1) && args[0].matches(\".*help.*\")) {\n        printHelp();\n        return;\n    }\n    // assume args[1] and args[2] are the optional arguments -> no whitespace in vector-args!\n    try {\n        switch(args.length) {\n            case 0:\n                Program.createAndRunFromStdio(defaultCamDirection, defaultCamPosition);\n                break;\n            case 1:\n                Program.createAndRunFromStdio(defaultCamDirection, args[0]);\n                break;\n            case 2:\n                Program.createAndRunFromStdio(args[1], args[0]);\n                break;\n            default:\n                System.err.println(\"Fehler - zuviele Parameter im Programmaufruf\");\n        }\n    }\n    catch (IllegalArgumentException e) {\n        System.err.println(\"Formatfehler: \" + e.getMessage());\n        e.printStackTrace(System.err);\n    }\n    catch (IOException e) {\n        System.err.println(\"Fehler in der Ein-/Ausgabe: \" + e.getMessage());\n        e.printStackTrace(System.err);\n    }\n}", "path": "src\\gruppe4\\Main.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Returns a readable version of the Triangle.\n *\n * @return a <code>String</code> value\n */\n", "func_signal": "public String toString()", "code": "{\n\t\tStringBuilder stringBuilder = new StringBuilder();\n    stringBuilder\n        .append(points[0]).append(\" \")\n        .append(points[1]).append(\" \")\n        .append(points[2]);\n\t\treturn stringBuilder.toString();\n}", "path": "src\\gruppe4\\geom\\Triangle3D.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Projects all vector-points of this triangle according to {@link Vector3D#project}\n * (Note: the normal of this triangle does not get projected)\n *\n * @param d the offset factor\n * @return the projected Triangle\n */\n", "func_signal": "public Triangle3D project(float d)", "code": "{        \n    return new Triangle3D(points[0].project(d),\n                          points[1].project(d),\n                          points[2].project(d));\n\n}", "path": "src\\gruppe4\\geom\\Triangle3D.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Translates this worlds triangles according to the params\n *\n * @param rotM a rotation matrix\n * @param transV a translation vector\n */\n", "func_signal": "public void transform(Matrix3D rotM, Vector3D transV)", "code": "{\n    ArrayList<Triangle3D> lt = new ArrayList<Triangle3D>(triangles.size());\n    for(Triangle3D t : triangles) {\n        lt.add(t.transform(rotM,transV));\n    }\n    triangles = lt;\n}", "path": "src\\gruppe4\\World.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Creates a new normalized instance of this Vector.\n *\n * @return a new normalized <code>Vector3D</code>.\n */\n", "func_signal": "public Vector3D normalize()", "code": "{\n    float oneOverMagnitude = 0;\n    float mag = magnitude();\n    \n    if (mag!=0) {\n        oneOverMagnitude = 1 / mag;\n    }\n\n    return this.product(oneOverMagnitude);\n}", "path": "src\\gruppe4\\geom\\Vector3D.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Subtract Vector3D v from this Vector and return the result as a new Vector3D.\n *\n * @param v the vector to subtract.\n * @return the resulting vector.\n */\n", "func_signal": "public Vector3D subtract(Vector3D v)", "code": "{\n    return new Vector3D(this.x - v.getX(),\n                        this.y - v.getY(),\n                        this.z - v.getZ());\n}", "path": "src\\gruppe4\\geom\\Vector3D.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Creates a String representation of the Vector, which is readable with the Vector String constructor.\n *\n * @return a <code>String</code> of 3 floats separated by spaces\n */\n", "func_signal": "public String toString()", "code": "{\n\t\tStringBuilder stringBuilder = new StringBuilder();\n    stringBuilder\n        .append(this.x).append(\" \")\n        .append(this.y).append(\" \")\n        .append(this.z);\n\t\treturn stringBuilder.toString();\n}", "path": "src\\gruppe4\\geom\\Vector3D.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Remove all triangles behind the x-y plane.\n *\n * @param minDistance The distance considered beeing behind.\n */\n", "func_signal": "public void filterBackface(float minDistance)", "code": "{\n    ArrayList<Triangle3D> lt = new ArrayList<Triangle3D>();\n    for(Triangle3D t : triangles) {\n        if (Util.min3f(t.getA().getZ(),\n                       t.getB().getZ(),\n                       t.getC().getZ())\n            >=minDistance)\n            {\n                lt.add(t);\n            }\n    }\n    triangles = lt;\n}", "path": "src\\gruppe4\\World.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Create a string representation of this world.\n *\n * @return a <code>String</code>\n */\n", "func_signal": "public String toString()", "code": "{\n\t\tStringBuilder sb = new StringBuilder();\n\n    for(Triangle3D t : triangles) {\n        sb.append(t).append(System.getProperty(\"line.separator\"));\n    }\n\t\treturn sb.toString();\n}", "path": "src\\gruppe4\\World.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Project the Worlds Triangles according to {@link Triangle3D#project}.\n *\n * @param d the projection offset\n */\n", "func_signal": "public void project(float d)", "code": "{        \n    ArrayList<Triangle3D> tri2D = new ArrayList<Triangle3D>(triangles.size());\n    \n    for(Triangle3D t : triangles) { \n        tri2D.add(t.project(d));\n    }\n    triangles = tri2D;\n}", "path": "src\\gruppe4\\World.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n     * Creates a new <code>Triangle3D</code> instance out of a String of 9 (floating-point) numbers.\n     *\n     * @param inp a <code>String</code> of 9 numbers, read with the <code>parseFloat</code> method\n     *  and separated by spaces or commas.\n     *\n     * @throws IllegalArgumentException when src doesn't contain a valid vector koordinate\n     * @throws NumberFormatException when a number cannot be read\n     */\n", "func_signal": "public Triangle3D(String inp) throws IllegalArgumentException", "code": "{\n        String inputArrray[] = inp.split(\"[, ]+\");\n\n        if (inputArrray.length != 9)\n            throw new java.lang.IllegalArgumentException(\"wrong number of tokens\");\n\n        points = new Vector3D[3];\n        \n        for(int v=0;v<3;v++) {\n            points[v] = new Vector3D(Float.parseFloat(inputArrray[v*3]),\n                                     Float.parseFloat(inputArrray[v*3+1]),\n                                     Float.parseFloat(inputArrray[v*3+2]));\n        }\n}", "path": "src\\gruppe4\\geom\\Triangle3D.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Remove all triangles from this world which are invisible to the camera at [0 0 0] looking to [0 1 0].\n * \n */\n", "func_signal": "public void filterVisible()", "code": "{\n    ArrayList<Triangle3D> lt = new ArrayList<Triangle3D>();\n    for(Triangle3D t : triangles) {            \n        if (0<t.normal().getZ()) {\n            lt.add(t);\n        }\n    }\n    triangles = lt;\n}", "path": "src\\gruppe4\\World.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Translates this triangle vector-points according to {@link Vector3D#transform}.\n *\n * @param rotM a rotation matrix\n * @param transV a translation vector\n * @return the transformed Triangle3D\n */\n", "func_signal": "public Triangle3D transform(Matrix3D rotM, Vector3D transV)", "code": "{\n    return new Triangle3D(points[0].transform(rotM,transV),\n                          points[1].transform(rotM,transV),\n                          points[2].transform(rotM,transV));\n}", "path": "src\\gruppe4\\geom\\Triangle3D.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Creates the product of this matrix and another vector.\n *\n * @param v a vector to multiply with\n * @return the resulting vector\n */\n", "func_signal": "public Vector3D product(Vector3D v)", "code": "{\n    return new Vector3D(a[0].dot(v),\n                        a[1].dot(v),\n                        a[2].dot(v));\n}", "path": "src\\gruppe4\\geom\\Matrix3D.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Creates a new <code>Triangle3D</code> out of 3 Vector3Ds.\n *\n */\n", "func_signal": "public Triangle3D(Vector3D a, Vector3D b, Vector3D c)", "code": "{\n    points = new Vector3D[3];\n    points[0] = a;\n    points[1] = b;\n    points[2] = c;\n}", "path": "src\\gruppe4\\geom\\Triangle3D.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Creates a new <code>World</code> instance from a string-stream of float numbers.\n *\n * @param input a <code>Reader</code>\n * @exception IOException if an error occurs\n */\n", "func_signal": "public World(Reader input) throws IOException", "code": "{\n\n    BufferedReader br = new BufferedReader(input);\n    triangles = new ArrayList<Triangle3D>();\n    \n    String line;\n    while ((line=br.readLine())!=null) {\n        triangles.add(new Triangle3D(line));\n    }\n}", "path": "src\\gruppe4\\World.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n     * Tries to create a Vector from a String of the format <code>\"x y z\"</code>\n     * where x,y and z are Floats and blank and \",\" are considered whitespace.\n     * @throws IllegalArgumentException when src doesn't contain a valid vector koordinate\n     * @throws NumberFormatException when a number cannot be read\n     */\n", "func_signal": "public Vector3D(String src) throws IllegalArgumentException", "code": "{\n        String[] s = src.split(\"[, ]+\");\n\n        if (s.length != 3) {\n            throw new IllegalArgumentException(\"String param does not contain 3 tokens\");\n        }\n        else {\n            this.x = Float.parseFloat(s[0]);\n            this.y = Float.parseFloat(s[1]);\n            this.z = Float.parseFloat(s[2]);            \n        }\n}", "path": "src\\gruppe4\\geom\\Vector3D.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Compute the cross-product of this and another Vector\n *\n * @return a new <code>Vector3D</code>.\n */\n", "func_signal": "public Vector3D crossProduct(Vector3D b)", "code": "{\n    Vector3D a = this;\n    return new Vector3D(a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x);\n}", "path": "src\\gruppe4\\geom\\Vector3D.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Calculate and cache the normal of this Triangle.\n *\n * @return the normal\n */\n", "func_signal": "public Vector3D normal()", "code": "{       \n    //         _\n    //         A \n    //          |\\\n    //          | \\     \n    //         _|__\\ _\n    //         C     B\n    //              _ _   _ _\n    //  normal() = (B-A)x(C-A)\n\n    if (normal == null) {\n        normal = points[1].subtract(points[0]).crossProduct(points[2].subtract(points[0]));\n    }\n    return normal;\n}", "path": "src\\gruppe4\\geom\\Triangle3D.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n     * Creates a new <code>Vector3D</code> instance.\n     */\n", "func_signal": "public Vector3D(float x, float y, float z)", "code": "{\n\tthis.x = x;\n\tthis.y = y;\n\tthis.z = z;\n}", "path": "src\\gruppe4\\geom\\Vector3D.java", "repo_name": "hoeck/psei", "stars": 4, "license": "None", "language": "java", "size": 3828}
{"docstring": "/**\n * Print selected options before test starts.\n */\n", "func_signal": "protected static void printSelectedOptions()", "code": "{\n    System.out.println(\"will sleep : \" + SLEEP_BETWEEN_SENDING);\n    if(SLEEP_BETWEEN_SENDING)\n        System.out.println(\"sleep time : \" + SLEEP_TIME);\n\n    System.out.println(\"msg num : \" + MESSAGE_NUMBER);\n\n\n}", "path": "tests\\junit-functional\\org\\jgroups\\tests\\EncryptMessageOrderTestCase.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/**\n * Handles becoming server - resetting queue settings\n * and setting keyserver address to be local address.\n *\n * @param tmpKeyServer\n */\n", "func_signal": "private void becomeKeyServer(Address tmpKeyServer)", "code": "{\n    keyServerAddr = tmpKeyServer;\n    keyServer =true;\n    if (log.isInfoEnabled())\n        log.info(\"I have become key server \" + keyServerAddr);\n    queue_down = false;\n    queue_up = false;\n}", "path": "src\\org\\jgroups\\protocols\\ENCRYPT.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/*\n  * GetAlgorithm: Get the algorithm name from \"algorithm/mode/padding\"\n  *  taken m original ENCRYPT file\n  */\n", "func_signal": "private static String getAlgorithm(String s)", "code": "{\n    int index = s.indexOf(\"/\");\n    if (index == -1)\n        return s;\n\n    return s.substring(0, index);\n}", "path": "src\\org\\jgroups\\protocols\\ENCRYPT.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/**\n * Iterates through all the protocols <em>from top to bottom</em> and does the following:\n * <ol>\n * <li>Waits until all messages in the down queue have been flushed (ie., size is 0)\n * <li>Calls stop() on the protocol\n * </ol>\n */\n", "func_signal": "public void stopStack(String cluster_name)", "code": "{\n    if(stopped) return;\n    Configurator.stopProtocolStack(getProtocols(), cluster_name, singleton_transports);\n    stopped=true;\n}", "path": "src\\org\\jgroups\\stack\\ProtocolStack.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/**\n * Initialises the Ciphers for both encryption and decryption using the\n * generated or supplied secret key.\n *\n * @param algorithm\n * @param secret\n * @throws Exception\n */\n", "func_signal": "private void initSymCiphers(String algorithm, SecretKey secret) throws Exception", "code": "{\n\n    if (log.isInfoEnabled())\n        log.info(\" Initializing symmetric ciphers\");\n\n    symEncodingCipher = Cipher.getInstance(algorithm);\n    symDecodingCipher = Cipher.getInstance(algorithm);\n    symEncodingCipher.init(Cipher.ENCRYPT_MODE, secret);\n    symDecodingCipher.init(Cipher.DECRYPT_MODE, secret);\n\n    //set the version\n    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n    digest.reset();\n    digest.update(secret.getEncoded());\n\n    symVersion = new String(digest.digest(), \"UTF-8\");\n    if (log.isInfoEnabled()) {\n        // log.info(\" Initialized symmetric ciphers with secret key (\" + symVersion.length() + \" bytes) \" +symVersion);\n        StringBuilder sb=new StringBuilder(\" Initialized symmetric ciphers with secret key (\" + symVersion.length() + \" bytes) \");\n        char[] arr=symVersion.toCharArray();\n        for(int i=0; i < arr.length; i++) {\n            char c=arr[i];\n            sb.append((int)c);\n        }\n        log.info(sb.toString());\n    }\n}", "path": "src\\org\\jgroups\\protocols\\ENCRYPT.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/**\n *  Initialisation if a supplied key is defined in the properties. This\n *  supplied key must be in a keystore which can be generated using the\n *  keystoreGenerator file in demos. The keystore must be on the classpath\n *  to find it.\n *\n * @throws KeyStoreException\n * @throws Exception\n * @throws IOException\n * @throws NoSuchAlgorithmException\n * @throws CertificateException\n * @throws UnrecoverableKeyException\n */\n", "func_signal": "private void initConfiguredKey() throws Exception", "code": "{\n    InputStream inputStream = null;\n    // must not use default keystore type - as does not support secret keys\n    KeyStore store = KeyStore.getInstance(\"JCEKS\");\n\n    SecretKey tempKey = null;\n    try\n    {\n        // load in keystore using this thread's classloader\n        inputStream = Thread.currentThread().getContextClassLoader()\n                .getResourceAsStream(keyStoreName);\n        // we can't find a keystore here -\n        if (inputStream == null)\n        {\n            throw new Exception(\"Unable to load keystore \" + keyStoreName +\n                    \" ensure file is on classpath\");\n        }\n        // we have located a file lets load the keystore\n        try{\n        store.load(inputStream, storePassword.toCharArray());\n        // loaded keystore - get the key\n        tempKey = (SecretKey) store\n                .getKey(alias, keyPassword.toCharArray());\n        } catch (IOException e){\n            throw new Exception(\"Unable to load keystore \"+ keyStoreName + \": \" + e);\n        }catch (NoSuchAlgorithmException e){\n            throw new Exception(\"No Such algorithm \"+ keyStoreName + \": \" + e);\n        }catch(CertificateException e){\n            throw new Exception(\"Certificate exception \"+ keyStoreName + \": \" + e);\n        }\n\n        if (tempKey == null)\n        {\n            throw new Exception(\"Unable to retrieve key '\" + alias\n                    + \"' from keystore \" + keyStoreName);\n        }\n        //set the key here\n        setSecretKey(tempKey);\n\n        if (symAlgorithm.equals(DEFAULT_SYM_ALGO)) {\n        symAlgorithm = tempKey.getAlgorithm();\n        }\n\n        // set the fact we are using a supplied key\n\n        suppliedKey = true;\n        queue_down =false;\n        queue_up =false;\n    } finally\n    {\n        Util.close(inputStream);\n    }\n\n}", "path": "src\\org\\jgroups\\protocols\\ENCRYPT.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/**\n *\n * @return Map<String,Map<key,val>>\n */\n", "func_signal": "public Map<String,Object> dumpStats()", "code": "{\n    Protocol p;\n    Map<String,Object> retval=new HashMap<String,Object>(), tmp;\n    String prot_name;\n\n    p=top_prot;\n    while(p != null) {\n        prot_name=p.getName();\n        tmp=p.dumpStats();\n        if(prot_name != null && tmp != null)\n            retval.put(prot_name, tmp);\n        p=p.getDownProtocol();\n    }\n    return retval;\n}", "path": "src\\org\\jgroups\\stack\\ProtocolStack.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/** Close the barrier. Temporarily remove all threads which are waiting or blocked, re-insert them after the call */\n", "func_signal": "private void closeBarrier()", "code": "{\n    if(!barrier_closed.compareAndSet(false, true))\n        return; // barrier was already closed\n\n    Set<Thread> threads=new HashSet<Thread>();\n\n    lock.lock();\n    try {\n        // wait until all pending (= in-progress, runnable threads) msgs have returned\n        in_flight_threads.remove(Thread.currentThread());\n        while(!in_flight_threads.isEmpty()) {\n            for(Iterator<Thread> it=in_flight_threads.keySet().iterator(); it.hasNext();) {\n                Thread thread=it.next();\n                Thread.State state=thread.getState();\n                if(state != Thread.State.RUNNABLE && state != Thread.State.NEW) {\n                    threads.add(thread);\n                    it.remove();\n                }\n            }\n            if(!in_flight_threads.isEmpty()) {\n                try {\n                    no_msgs_pending.await(1000, TimeUnit.MILLISECONDS);\n                }\n                catch(InterruptedException e) {\n                }\n            }\n        }\n    }\n    finally {\n        for(Thread thread: threads)\n            in_flight_threads.put(thread, NULL);\n        lock.unlock();\n    }\n    \n    if(log.isTraceEnabled())\n        log.trace(\"barrier was closed\");\n\n    if(max_close_time > 0)\n        scheduleBarrierOpener();\n}", "path": "src\\org\\jgroups\\protocols\\BARRIER.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/** Tests whether retransmits are called at correct times for 1000 messages */\n", "func_signal": "public void testRetransmits()", "code": "{\n\tEntry entry;\n\tint   num_non_correct_entries=0;\n\n\twin=new AckSenderWindow(new MyRetransmitCommand(), new StaticInterval(xmit_timeouts));\n\t\n\t// 1. Send NUM_MSGS messages:\n\tSystem.out.println(\"-- sending \" + NUM_MSGS + \" messages:\");\n\tfor(long i=0; i < NUM_MSGS; i++) {\n\t    msgs.put(new Long(i), new Entry());\n\t    win.add(i, new Message());\n\t}\n\tSystem.out.println(\"-- done\");\n\n\t// 2. Wait for at least 4 xmits/msg: total of 1000 + 2000 + 4000 + 8000ms = 15000ms; wait for 20000ms\n\tSystem.out.println(\"-- waiting for 20 secs for all retransmits\");\n\tUtil.sleep(20000);\n\t\n\t// 3. Check whether all Entries have correct retransmission times\n\tfor(long i=0; i < NUM_MSGS; i++) {\n\t    entry=(Entry)msgs.get(new Long(i));\n\t    if(!entry.isCorrect(i)) {\n\t\tnum_non_correct_entries++;\n\t    }\n\t}\n\t\n\tif(num_non_correct_entries > 0)\n\t    System.err.println(\"Number of incorrect retransmission timeouts: \" + num_non_correct_entries);\n\tassertTrue(num_non_correct_entries == 0);\n\twin.reset();\n}", "path": "tests\\junit-functional\\org\\jgroups\\tests\\AckSenderWindowTest.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/**\n * Used to initialise the symmetric key if none is supplied in a keystore.\n * @throws Exception\n */\n", "func_signal": "public void initSymKey() throws Exception", "code": "{\n    KeyGenerator keyGen = null;\n    // see if we have a provider specified\n    if (symProvider != null && symProvider.trim().length() > 0)\n    {\n        keyGen = KeyGenerator.getInstance(getAlgorithm(symAlgorithm),\n                                          symProvider);\n    } else\n    {\n        keyGen = KeyGenerator.getInstance(getAlgorithm(symAlgorithm));\n    }\n    // generate the key using the defined init properties\n    keyGen.init(symInit);\n    secretKey = keyGen.generateKey();\n\n    setSecretKey(secretKey);\n\n    if (log.isInfoEnabled())\n        log.info(\" Symmetric key generated \");\n}", "path": "src\\org\\jgroups\\protocols\\ENCRYPT.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/**\n * @deprecated Use {@link org.jgroups.protocols.TP#getTimer()} instead to fetch the timer from the\n * transport and then invoke the method on it\n * @return\n */\n", "func_signal": "public String dumpTimerQueue()", "code": "{\n    TP transport=getTransport();\n    TimeScheduler timer;\n    if(transport != null) {\n        timer=transport.getTimer();\n        if(timer != null)\n            return timer.dumpTaskQueue();\n    }\n    return \"\";\n}", "path": "src\\org\\jgroups\\stack\\ProtocolStack.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/**\n * Sets up the peer for a new keyserver - this is\n * setting queueing to buffer messages until we have a new\n * secret key from the key server and sending a key request\n * to the new keyserver.\n *\n * @param newKeyServer\n */\n", "func_signal": "private void handleNewKeyServer(Address newKeyServer)", "code": "{\n    // start queueing until we have new key\n    // to make sure we are not sending with old key\n    queue_up =true;\n    queue_down = true;\n    // set new keyserver address\n    keyServerAddr = newKeyServer;\n    keyServer =false;\n    if (log.isInfoEnabled())\n        log.info(\"Sending key request\");\n\n    // create a key request message\n    sendKeyRequest();\n}", "path": "src\\org\\jgroups\\protocols\\ENCRYPT.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/**\n * Start all layers. The {@link Protocol#start()} method is called in each protocol,\n * <em>from top to bottom</em>.\n * Each layer can perform some initialization, e.g. create a multicast socket\n */\n", "func_signal": "public void startStack(String cluster_name) throws Exception", "code": "{\n    if(stopped == false) return;\n    Configurator.startProtocolStack(getProtocols(), cluster_name, singleton_transports);\n    stopped=false;\n}", "path": "src\\org\\jgroups\\stack\\ProtocolStack.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "// default stack from JChannel\n", "func_signal": "public QuoteClient()", "code": "{\n       super();\n       try {\n           channel=new JChannel(props);\n           channel.setOpt(Channel.LOCAL, Boolean.FALSE);\n           disp=new RpcDispatcher(channel, null, this, this);\n           channel.connect(channel_name);\n       }\n       catch(Exception e) {\n           System.err.println(\"QuoteClient(): \" + e);\n       }\n       addWindowListener(this);\n   }", "path": "src\\org\\jgroups\\demos\\QuoteClient.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/**\n * Test method. This method adds a message listener to the PullPushAdapter\n * on channel 1, and starts sending specified number of messages into\n * channel 1 or 2 depending if we are in loopback mode or not. Each message\n * containg timestamp when it was created. By measuring time on message\n * delivery we can calculate message trip time. Listener is controlled by\n * two string messages \"start\" and \"stop\". After sender has finished to\n * send messages, it waits until listener receives all messages or \"stop\"\n * message. Then test is finished and calculations are showed.\n * <p/>\n * Also we calculate how much memory\n * was allocated before excuting a test and after executing a test.\n */\n", "func_signal": "public void testLoad()", "code": "{\n    try {\n        final String startMessage=\"start\";\n        final String stopMessage=\"stop\";\n\n        final Object mutex=new Object();\n\n        final Vector receivedTimes=new Vector(MESSAGE_NUMBER);\n        final Vector normalMessages=new Vector(MESSAGE_NUMBER);\n        final Vector tooQuickMessages=new Vector();\n        final Vector tooSlowMessages=new Vector();\n\n        adapter1.setListener(new MessageListener() {\n            private boolean started=false;\n            private boolean stopped=false;\n\n            private long counter = 0L;\n            \n            public byte[] getState() {\n                return null;\n            }\n\n            public void setState(byte[] state) {\n            }\n\n            public void receive(Message jgMessage) {\n                Object message=jgMessage.getObject();\n\n                if(startMessage.equals(message)) {\n                    started=true;\n                    finishedReceiving=false;\n                }\n                else if(stopMessage.equals(message)) {\n                    stopped=true;\n                    finishedReceiving=true;\n\n                    synchronized(mutex) {\n                        mutex.notifyAll();\n                    }\n\n                }\n                else if(message instanceof Long) {\n                    Long travelTime=new Long(System.currentTimeMillis() - ((Long)message).longValue());\n\n                    try {\n                    \tassertEquals(counter, ((EncryptOrderTestHeader)((Message)jgMessage).getHeader(\"EncryptOrderTest\")).seqno);\n                    \tcounter++;\n                    } catch (Exception e){\n                    \tlog.warn(e);\n                    \torderCounterFailure =true;\n                    }\n                    if(!started)\n                        tooQuickMessages.add(message);\n                    else if(started && !stopped) {\n                        receivedTimes.add(travelTime);\n                        normalMessages.add(message);\n                    }\n                    else\n                        tooSlowMessages.add(message);\n                }\n            }\n        });\n\n        System.out.println(\"Free memory: \" + Runtime.getRuntime().freeMemory());\n        System.out.println(\"Total memory: \" + Runtime.getRuntime().totalMemory());\n        System.out.println(\"Starting sending messages.\");\n\n        long time=System.currentTimeMillis();\n\n        Message startJgMessage=new Message();\n        startJgMessage.setObject(startMessage);\n\n        JChannel sender= channel2;\n\n        sender.send(startJgMessage);\n\n        for(int i=0; i < MESSAGE_NUMBER; i++) {\n            Long message=new Long(System.currentTimeMillis());\n\n            \n            Message jgMessage=new Message();\n            jgMessage.putHeader(\"EncryptOrderTest\", new EncryptOrderTestHeader(i));\n            jgMessage.setObject(message);\n\n            sender.send(jgMessage);\n\n            if(i % 1000 == 0)\n                System.out.println(\"sent \" + i + \" messages.\");\n\n            if(SLEEP_BETWEEN_SENDING)\n                org.jgroups.util.Util.sleep(1, true);\n        }\n\n        Message stopJgMessage=new Message();\n        stopJgMessage.setObject(stopMessage);\n        sender.send(stopJgMessage);\n\n        time=System.currentTimeMillis() - time;\n\n        System.out.println(\"Finished sending messages. Operation took \" + time);\n\n        synchronized(mutex) {\n\n            int received=0;\n\n            while(!finishedReceiving) {\n                mutex.wait(1000);\n\n                if(receivedTimes.size() != received) {\n                    received=receivedTimes.size();\n\n                    System.out.println();\n                    System.out.print(\"Received \" + receivedTimes.size() + \" messages.\");\n                }\n                else {\n                    System.out.print(\".\");\n                }\n            }\n        }\n\n        try {\n            Thread.sleep(1000);\n        }\n        catch(Exception ex) {\n        }\n\n        double avgDeliveryTime=-1.0;\n        long maxDeliveryTime=Long.MIN_VALUE;\n        long minDeliveryTime=Long.MAX_VALUE;\n\n        Iterator iterator=receivedTimes.iterator();\n        while(iterator.hasNext()) {\n            Long message=(Long)iterator.next();\n\n            if(avgDeliveryTime == -1.0)\n                avgDeliveryTime=message.longValue();\n            else\n                avgDeliveryTime=(avgDeliveryTime + message.doubleValue()) / 2.0;\n\n            if(message.longValue() > maxDeliveryTime)\n                maxDeliveryTime=message.longValue();\n\n            if(message.longValue() < minDeliveryTime)\n                minDeliveryTime=message.longValue();\n        }\n\n        System.out.println(\"Sent \" + MESSAGE_NUMBER + \" messages.\");\n        System.out.println(\"Received \" + receivedTimes.size() + \" messages.\");\n        System.out.println(\"Average delivery time \" + avgDeliveryTime + \" ms\");\n        System.out.println(\"Minimum delivery time \" + minDeliveryTime + \" ms\");\n        System.out.println(\"Maximum delivery time \" + maxDeliveryTime + \" ms\");\n        System.out.println(\"Received \" + tooQuickMessages.size() + \" too quick messages\");\n        System.out.println(\"Received \" + tooSlowMessages.size() + \" too slow messages\");\n    }\n    catch(Exception ex) {\n        ex.printStackTrace();\n    }\n\n    System.out.println(\"Free memory: \" + Runtime.getRuntime().freeMemory());\n    System.out.println(\"Total memory: \" + Runtime.getRuntime().totalMemory());\n\n    System.out.println(\"Performing GC\");\n\n    Runtime.getRuntime().gc();\n\n    try {\n        Thread.sleep(2000);\n    }\n    catch(InterruptedException ex) {\n    }\n\n    System.out.println(\"Free memory: \" + Runtime.getRuntime().freeMemory());\n    System.out.println(\"Total memory: \" + Runtime.getRuntime().totalMemory());\n\n    assertTrue(\"Message ordering is incorrect - check log output\",(!orderCounterFailure));\n}", "path": "tests\\junit-functional\\org\\jgroups\\tests\\EncryptMessageOrderTestCase.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/** Returns the bottom most protocol */\n", "func_signal": "public TP getTransport()", "code": "{\n    Vector<Protocol> prots=getProtocols();\n    return (TP)(!prots.isEmpty()? prots.lastElement() : null);\n}", "path": "src\\org\\jgroups\\stack\\ProtocolStack.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/**\n * @deprecated Use {@link org.jgroups.stack.Protocol#getThreadFactory()}  instead\n * @return\n */\n", "func_signal": "public ThreadFactory getThreadFactory()", "code": "{\n    getTransport().getThreadFactory();\n    TP transport=getTransport();\n    return transport != null? transport.getThreadFactory() : null;\n}", "path": "src\\org\\jgroups\\stack\\ProtocolStack.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/**\n * Main method to start a test case from the command line. Parameters are:\n * <ul>\n * <li><code>-sleep n</code> - means that after each message sending, sender\n * thread will sleep for <code>n</code> milliseconds;\n * <li><code>-msg_num n</code> - <code>n</code> is number of messages to send;;\n * <li><code>-debug</code> - pop-up protocol debugger;\n * </ul>\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    for(int i=0; i < args.length; i++) {\n        if(\"-sleep\".equals(args[i])) {\n            SLEEP_BETWEEN_SENDING=true;\n            if(!(i < args.length - 1))\n                throw new RuntimeException(\"You have to specify sleep time\");\n\n            try {\n                SLEEP_TIME=Integer.parseInt(args[++i]);\n            }\n            catch(NumberFormatException nfex) {\n                throw new RuntimeException(\"Cannot parse sleep time\");\n            }\n\n        }\n        else if(\"-msg_num\".equals(args[i])) {\n            if(!(i < args.length - 1))\n                throw new RuntimeException(\"You have to specify messages number\");\n\n            try {\n                MESSAGE_NUMBER=Integer.parseInt(args[++i]);\n            }\n            catch(NumberFormatException nfex) {\n                throw new RuntimeException(\"Cannot parse messages number\");\n            }\n\n        }\n       \n        else if(\"-help\".equals(args[i])) {\n            help();\n            return;\n        }\n    }\n\n    junit.textui.TestRunner.run(EncryptMessageOrderTestCase.class);\n}", "path": "tests\\junit-functional\\org\\jgroups\\tests\\EncryptMessageOrderTestCase.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/* (non-Javadoc)\n  * @see org.jgroups.stack.Protocol#up(org.jgroups.Event)\n  */\n", "func_signal": "public Object up(Event evt)", "code": "{\n    switch (evt.getType()) {\n\n        // we need to know what our address is\n        case Event.SET_LOCAL_ADDRESS :\n            local_addr = (Address) evt.getArg();\n            if (log.isDebugEnabled())\n                log.debug(\"set local address to \" + local_addr);\n            break;\n        case Event.VIEW_CHANGE:\n            View view=(View)evt.getArg();\n            if (log.isInfoEnabled())\n                log.info(\"handling view-change up: \" + view);\n            if (!suppliedKey){\n                handleViewChange(view, false);\n            }\n            break;\n        case Event.TMP_VIEW:\n            view=(View)evt.getArg();\n            if (log.isInfoEnabled())\n                log.info(\"handling tmp-view up: \" + view);\n            if (!suppliedKey){\n                // if a tmp_view then we are trying to become coordinator so\n                // make us keyserver\n                handleViewChange(view, true);\n            }\n            break;\n        // we try and decrypt all messages\n        case Event.MSG :\n            try\n            {\n                handleUpMessage(evt);\n            } catch (Exception e)\n            {\n                log.warn(\"exception occurred decrypting message\", e);\n            }\n            return null;\n        default :\n            break;\n    }\n    return passItUp(evt);\n}", "path": "src\\org\\jgroups\\protocols\\ENCRYPT.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "/**\n * Tears down test case. This method closes all opened channels.\n */\n", "func_signal": "protected void tearDown() throws Exception", "code": "{\n    super.tearDown();\n    \n    adapter2.stop();\n    channel2.close();\n\n    adapter1.stop();\n    channel1.close();\n}", "path": "tests\\junit-functional\\org\\jgroups\\tests\\EncryptMessageOrderTestCase.java", "repo_name": "jadahl/jgroups-android", "stars": 5, "license": "lgpl-2.1", "language": "java", "size": 8244}
{"docstring": "// This method returns true if the object \"other\"\n// has the same values for age, salary and \n", "func_signal": "public boolean Equal(Element other)", "code": "{\n\tboolean ret_val ;\n\tint aux01 ;\n\tint aux02 ;\n\tint nt ;\n\tret_val = true ;\n\n\taux01 = other.GetAge();\n\tif (!this.Compare(aux01,Age)) ret_val = false ;\n\telse { \n\t    aux02 = other.GetSalary();\n\t    if (!this.Compare(aux02,Salary)) ret_val = false ;\n\t    else \n\t\tif (Married) \n\t\t    if (!other.GetMarried()) ret_val = false;\n\t\t    else nt = 0 ;\n\t\telse\n\t\t    if (other.GetMarried()) ret_val = false;\n\t\t    else nt = 0 ;\n\t}\n\n\treturn ret_val ;\n}", "path": "miniJava\\samples\\LinkedList-error.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "// Update the the pointer to the next node\n", "func_signal": "public boolean SetNext(List v_next)", "code": "{\n\tnext = v_next ;\n\treturn 0 ;  //TE\n}", "path": "miniJava\\samples\\LinkedList-error.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "// Initialize the values of a new node\n", "func_signal": "public boolean InitNew(Element v_elem, List v_next, boolean v_end)", "code": "{\n\tend = v_end ;\n\telem = v_elem ;\n\tnext = v_next ;\n\treturn true ;\n}", "path": "miniJava\\samples\\LinkedList-error.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "// Insert a new node at the beginning of the list\n", "func_signal": "public List Insert(Element new_elem)", "code": "{\n\tboolean ret_val ;\n\tList aux03 ;\n\tList aux02 ;\n\taux03 = this ;\n\taux02 = new List();\n\tret_val = aux02.InitNew(new_elem,aux03,false);\n\treturn aux02 ;\n}", "path": "miniJava\\samples\\LinkedList-error.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "// Search for an element e on the list\n", "func_signal": "public int Search(Element e)", "code": "{\n\tint int_ret_val ;\n\tList aux01 ;\n\tElement var_elem ;\n\tboolean var_end ;\n\tint nt ;\n\n\tint_ret_val = 0 ;\n\taux01 = this ;\n\tvar_end = end;\n\tvar_elem = elem ;\n\twhile (!var_end){\n\t    if (e.Equal(var_elem)){\n\t\tint_ret_val = 1 ;\n\t    }\n\t    else nt = 0 ;\n\t    aux01 = aux01.GetNext() ;\n\t    var_end = aux01.GetEnd();\n\t    var_elem = aux01.GetElem();\n\t}\n\treturn int_ret_val ;\n}", "path": "miniJava\\samples\\LinkedList-error.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "/**\n * Used to convert raw characters to their escaped version\n * when these raw version cannot be used as part of an ASCII\n * string literal.\n */\n", "func_signal": "protected String add_escapes(String str)", "code": "{\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n      switch (str.charAt(i))\n      {\n         case 0 :\n            continue;\n         case '\\b':\n            retval.append(\"\\\\b\");\n            continue;\n         case '\\t':\n            retval.append(\"\\\\t\");\n            continue;\n         case '\\n':\n            retval.append(\"\\\\n\");\n            continue;\n         case '\\f':\n            retval.append(\"\\\\f\");\n            continue;\n         case '\\r':\n            retval.append(\"\\\\r\");\n            continue;\n         case '\\\"':\n            retval.append(\"\\\\\\\"\");\n            continue;\n         case '\\'':\n            retval.append(\"\\\\\\'\");\n            continue;\n         case '\\\\':\n            retval.append(\"\\\\\\\\\");\n            continue;\n         default:\n            if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n               String s = \"0000\" + Integer.toString(ch, 16);\n               retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n            } else {\n               retval.append(ch);\n            }\n            continue;\n      }\n    }\n    return retval.toString();\n }", "path": "miniJava\\src\\edu\\ucla\\parser\\miniJava\\javacc\\ParseException.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "// Initialize the node list as the last node\n", "func_signal": "public boolean Init()", "code": "{\n\tend = true ;\n\treturn true ;\n}", "path": "miniJava\\samples\\LinkedList-error.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "/************************************\n * The MiniJava Grammar Starts Here *\n ************************************/\n", "func_signal": "static final public void Goal() throws ParseException", "code": "{\n /*@bgen(jjtree) Goal */\n  ASTGoal jjtn000 = new ASTGoal(JJTGOAL);\n  boolean jjtc000 = true;\n  jjtree.openNodeScope(jjtn000);\n    try {\n      MainClass();\n      label_1:\n      while (true) {\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case CLASS:\n          ;\n          break;\n        default:\n          jj_la1[0] = jj_gen;\n          break label_1;\n        }\n        TypeDeclaration();\n      }\n      jj_consume_token(0);\n    } catch (Throwable jjte000) {\n    if (jjtc000) {\n      jjtree.clearNodeScope(jjtn000);\n      jjtc000 = false;\n    } else {\n      jjtree.popNode();\n    }\n    if (jjte000 instanceof RuntimeException) {\n      {if (true) throw (RuntimeException)jjte000;}\n    }\n    if (jjte000 instanceof ParseException) {\n      {if (true) throw (ParseException)jjte000;}\n    }\n    {if (true) throw (Error)jjte000;}\n    } finally {\n    if (jjtc000) {\n      jjtree.closeNodeScope(jjtn000, true);\n    }\n    }\n  }", "path": "miniJava\\src\\edu\\ucla\\parser\\miniJava\\javacc\\MiniJavaParser.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "/**\n * The following constructors are for use by you for whatever\n * purpose you can think of.  Constructing the exception in this\n * manner makes the exception behave in the normal way - i.e., as\n * documented in the class \"Throwable\".  The fields \"errorToken\",\n * \"expectedTokenSequences\", and \"tokenImage\" do not contain\n * relevant information.  The JavaCC generated code does not use\n * these constructors.\n */\n", "func_signal": "public ParseException()", "code": "{\n  super();\n  specialConstructor = false;\n}", "path": "miniJava\\src\\edu\\ucla\\parser\\miniJava\\javacc\\ParseException.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "// Invoke the Initialization, Sort and Printing\n// Methods\n", "func_signal": "public int Start(int sz)", "code": "{\n\tint aux01 ;\n\taux01 = this.Init(sz);\n\taux01 = this.Print();\n\tSystem.out.println(99999);\n\taux01 = this.Sort();\n\taux01 = this.Print();\n\treturn 0 ;\n}", "path": "miniJava\\samples\\BinaryTree-error.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "// Printing method\n", "func_signal": "public int Print()", "code": "{\n\tint j ;\n\tj = 0 ;\n\twhile (j < (size)) {\n\t    System.out.println(number[j]);\n\t    j = j + 1 ;\n\t}\n\treturn 0 ;\n}", "path": "miniJava\\samples\\BinaryTree-error.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "// Print the linked list\n", "func_signal": "public boolean Print()", "code": "{\n\tList aux01 ;\n\tboolean var_end ;\n\tElement  var_elem ;\n\n\taux01 = this ;\n\tvar_end = end ;\n\tvar_elem = elem ;\n\twhile (!var_end){\n\t    System.out.println(var_elem.GetAge());\n\t    aux01 = aux01.GetNext() ;\n\t    var_end = aux01.GetEnd();\n\t    var_elem = aux01.GetElem();\n\t}\n\n\treturn true ;\n}", "path": "miniJava\\samples\\LinkedList-error.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "// Delete an element e from the list\n", "func_signal": "public List Delete(Element e)", "code": "{\n\tList my_head ;\n\tboolean ret_val ;\n\tboolean aux05;\n\tList aux01 ;\n\tList prev ;\n\tboolean var_end ;\n\tElement var_elem ;\n\tint aux04 ;\n\tint nt ;\n\n\n\tmy_head = this ;\n\tret_val = false ;\n\taux04 = 0 - 1 ;\n\taux01 = this ;\n\tprev = this ;\n\tvar_end = end;\n\tvar_elem = elem ;\n\twhile ((!var_end) && (!ret_val)){\n\t    if (e.Equal(var_elem)){\n\t\tret_val = true ;\n\t\tif (aux04 < 0) { \n\t\t    // delete first element\n\t\t    my_head = aux01.GetNext() ;\n\t\t} \n\t\telse{ // delete a non first element\n\t\t    System.out.println(0-555);\n\t\t    aux05 = prev.SetNext(aux01.GetNext());\n\t\t    System.out.println(0-555);\n\t\t    \n\t\t}\n\t    } else nt = 0 ;\n\t    if (!ret_val){\n\t\tprev = aux01 ;\n\t\taux01 = aux01.GetNext() ;\n\t\tvar_end = aux01.GetEnd();\n\t\tvar_elem = aux01.GetElem();\n\t\taux04 = 1 ; \n\t    } else nt = 0 ;\n\t}\n\treturn my_head ;\n}", "path": "miniJava\\samples\\LinkedList-error.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "/**\n * This method has the standard behavior when this object has been\n * created using the standard constructors.  Otherwise, it uses\n * \"currentToken\" and \"expectedTokenSequences\" to generate a parse\n * error message and returns it.  If this object has been created\n * due to a parse error, and you do not catch it (it gets thrown\n * from the parser), then this method is called during the printing\n * of the final stack trace, and hence the correct error message\n * gets displayed.\n */\n", "func_signal": "public String getMessage()", "code": "{\n  if (!specialConstructor) {\n    return super.getMessage();\n  }\n  StringBuffer expected = new StringBuffer();\n  int maxSize = 0;\n  for (int i = 0; i < expectedTokenSequences.length; i++) {\n    if (maxSize < expectedTokenSequences[i].length) {\n      maxSize = expectedTokenSequences[i].length;\n    }\n    for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(\" \");\n    }\n    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n      expected.append(\"...\");\n    }\n    expected.append(eol).append(\"    \");\n  }\n  String retval = \"Encountered \\\"\";\n  Token tok = currentToken.next;\n  for (int i = 0; i < maxSize; i++) {\n    if (i != 0) retval += \" \";\n    if (tok.kind == 0) {\n      retval += tokenImage[0];\n      break;\n    }\n    retval += add_escapes(tok.image);\n    tok = tok.next; \n  }\n  retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn;\n  retval += \".\" + eol;\n  if (expectedTokenSequences.length == 1) {\n    retval += \"Was expecting:\" + eol + \"    \";\n  } else {\n    retval += \"Was expecting one of:\" + eol + \"    \";\n  }\n  retval += expected.toString();\n  return retval;\n}", "path": "miniJava\\src\\edu\\ucla\\parser\\miniJava\\javacc\\ParseException.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "// This method compares two integers and\n// returns true if they are equal and false\n// otherwise\n", "func_signal": "public boolean Compare(int num1 , int num2)", "code": "{\n\tboolean retval ;\n\tint aux02 ;\n\tretval = false ;\n\taux02 = num2 + 1 ;\n\tif (num1 < num2) retval = false ;\n\telse if (!(num1 < aux02)) retval = false ;\n\telse retval = true ;\n\treturn retval ;\n}", "path": "miniJava\\samples\\LinkedList-error.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "// Initialize array of integers\n", "func_signal": "public int Init(int sz)", "code": "{\n\tsize = sz ;\n\tnumber = new int[sz] ;\n\t\n\tnumber[0] = 20 ;\n\tnumber[1] = 7  ; \n\tnumber[2] = 12 ;\n\tnumber[3] = 18 ;\n\tnumber[4] = 2  ; \n\tnumber[5] = 11 ;\n\tnumber[6] = 6  ; \n\tnumber[7] = 9  ; \n\tnumber[8] = 19 ; \n\tnumber[9] = 5  ;\n\t\n\treturn false ;\t//TE\n}", "path": "miniJava\\samples\\BinaryTree-error.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "/**\n * This constructor is used by the method \"generateParseException\"\n * in the generated parser.  Calling this constructor generates\n * a new object of this type with the fields \"currentToken\",\n * \"expectedTokenSequences\", and \"tokenImage\" set.  The boolean\n * flag \"specialConstructor\" is also set to true to indicate that\n * this constructor was used to create this object.\n * This constructor calls its super class with the empty string\n * to force the \"toString\" method of parent class \"Throwable\" to\n * print the error message in the form:\n *     ParseException: <result of getMessage>\n */\n", "func_signal": "public ParseException(Token currentTokenVal,\n                      int[][] expectedTokenSequencesVal,\n                      String[] tokenImageVal\n                     )", "code": "{\n  super(\"\");\n  specialConstructor = true;\n  currentToken = currentTokenVal;\n  expectedTokenSequences = expectedTokenSequencesVal;\n  tokenImage = tokenImageVal;\n}", "path": "miniJava\\src\\edu\\ucla\\parser\\miniJava\\javacc\\ParseException.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "// Sort array of integers using Bublesort method\n", "func_signal": "public int Sort()", "code": "{\n\tint nt ;\n\tint i ;\n\tint aux02 ;\n\tint aux04 ;\n\tint aux05 ;\n\tint aux06 ;\n\tint aux07 ;\n\tint j ;\n\tint t ;\n\ti = size - 1 ;\n\taux02 = 0 - 1 ;\n\twhile (aux02 < i) {\n\t    j = 1 ;\n\t    //aux03 = i+1 ;\n\t    while (j < (i+1)){\n\t\taux07 = j - 1 ;\n\t\taux04 = number[aux07] ;\n\t\taux05 = number[j] ;\n\t\tif (aux05 < aux04) {\n\t\t    aux06 = j - 1 ;\n\t\t    t = number[aux06] ;\n\t\t    number[aux06] = number[j] ;\n\t\t    number[j] = t;\n\t\t}\n\t\telse nt = 0 ;\n\t\tj = j + 1 ;\n\t    }\n\t    i = i - 1 ;\n\t}\n\treturn 0 ;\n}", "path": "miniJava\\samples\\BinaryTree-error.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "// Initialize some class variables\n", "func_signal": "public boolean Init(int v_Age, int v_Salary, boolean v_Married)", "code": "{\n\tAge = v_Age ;\n\tSalary = v_Salary ;\n\tMarried = v_Married ;\n\treturn true ;\n}", "path": "miniJava\\samples\\LinkedList-error.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "// method=where, invoke=on what line, node=what\n", "func_signal": "public GraphNode addEdge( Function method, Call invoke, String node )", "code": "{\n\tGraphNode n=CallGraph._all_nodes.get( node );\n\tn._calls.add( method._name.getName(),invoke );\n\t_methods.add( method );\n\t_out_s.add( n );\n\tn._in_s.add( this );\n\treturn this;\n}", "path": "miniJava\\src\\edu\\ucla\\parser\\miniJava\\callgraph\\GraphNode.java", "repo_name": "cawka/minijavaparser", "stars": 4, "license": "None", "language": "java", "size": 11308}
{"docstring": "/**\n * Vraci hodnotu v bunkce, pokud se jedna o prvni sloupce tak vraci cislo \n * radku, v druhem sloupci je radek diffu na tomto radku.\n * \n * @param rowIndex Cislo radku.\n * @param columnIndex Cislo sloupce.\n * @return Hodnota bunky.\n */\n", "func_signal": "public Object getValueAt(int rowIndex, int columnIndex)", "code": "{\n        if (columnIndex == 0) {\n            return rowIndex+1;\n        } else {\n            return diff.get(rowIndex);\n        }\n    }", "path": "src\\diffGui\\DiffTableModel.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * Otevreni druheho souboru.\n *\n * @param evt Event.\n */\n", "func_signal": "private void openSecondFileButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_openSecondFileButtonActionPerformed\n\tJFileChooser fc = new JFileChooser(bfst);\n\tif (fc.showOpenDialog(menu) == JFileChooser.APPROVE_OPTION) {\n\t\tbsnd = fc.getSelectedFile();\n\t\tsecondFileField.setText(bsnd.getName());\n\t}\n}", "path": "src\\diffGui\\Window.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * Zpocita statistiky pro diff.\n * @param d Diff, jehoz statistiky maji byt zpocitany.\n */\n", "func_signal": "protected void computeStatistics(List<SequenceElement<String>> d)", "code": "{\n\tfor (SequenceElement<String> s : d) {\n\t\tswitch (s.getStatus()) {\n\t\t\tcase REMOVED:\n\t\t\t\tremovedLines++;\n\t\t\t\t break;\n\t\t\tcase ADDED:\n\t\t\t\taddedLines++;\n\t\t\t\tbreak;\n\t\t\tcase UNTOUCHED:\n\t\t\t\tbreak;\n\t\t}\n\t}\n}", "path": "src\\diff\\DiffStatistics.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * Algoritmus projiti tabulky a ziskani diffu. Algoritmus projde tabulku\n * vytvorenou pomoci metody computeLength. Vlevo tabulky je prvni\n * posloupnost, nahore je druha posloupnost. Pokud se tedy pohybujeme\n * doleva, pak zahazujeme prvek z druhe posloupnosti, pokud se pohybujeme\n * nahoru, pak opoustime prvek z prvni posloupnosti.\n *\n * Zacneme pravo dole a postupujeme nahoru a doleva. Pokud zjistime, ze\n * prvky na souradnicich i,j jsou stejne, pak je pridame do vysledne\n * posloupnosti jako UNTOUCHED(nezmenene) a posuneme se doleva a nahoru.\n * Pokud se nerovnaji, pak se vydame na sousedni prvek, ktery ma vetsi\n * hodnotu. Pritom pridame bud prvek z druhe posloupnosti, pokud se v\n * tabulce pohybujeme doleva, protoze tento prvek se urcite nerovna zadnemu\n * z prvni posloupnosti. Oznacime jej jako ADDED(pridan). Pokud se presuneme\n * na horni prvek pak pridame prvek z prvni posloupnosti, take uz se nemuze\n * rovnat zadnemu z druhe. Tento bude REMOVED(odebran).\n *\n * @return Vysledna posloupnost\n */\n", "func_signal": "public List<SequenceElement<T>> findDiff()", "code": "{\n    LinkedList<SequenceElement<T>> sequence = new LinkedList<SequenceElement<T>>();\n    int[][] table = computeLength();\n\n    int i = table.length-1;\n    int j = table[0].length-1;\n    while (i > 0 && j > 0)  {\n\n        if (firstList.get(i-1).equals(secondList.get(j-1))) {\n            sequence.addFirst(new SequenceElement<T>(firstList.get(i-1), SequenceElement.Status.UNTOUCHED));\n            i--; j--;\n        } else if (table[i][j-1] >= table[i-1][j]) {\n            sequence.addFirst(new SequenceElement<T>(secondList.get(j-1), SequenceElement.Status.ADDED));\n            j--;\n        } else {\n            sequence.addFirst(new SequenceElement<T>(firstList.get(i-1), SequenceElement.Status.REMOVED));\n            i--;\n        }\n    }\n\n    while (i > 0) {\n        sequence.addFirst(new SequenceElement<T>(firstList.get(i-1), SequenceElement.Status.REMOVED));\n        i--;\n    }\n    while (j > 0) {\n         sequence.addFirst(new SequenceElement<T>(secondList.get(j-1), SequenceElement.Status.ADDED));\n         j--;\n    }\n\n    return sequence;\n}", "path": "src\\diff\\LongestCommonSubsequence.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * @brief Odstraneni spolecnych casti.\n *\n * Pro zrychleni algoritmu se odrizne spolecny zacatek a konec obou souboru\n */\n", "func_signal": "protected void stripMargin()", "code": "{\n    while (!firstFile.isEmpty() && !secondFile.isEmpty() && firstFile.getFirst().equals(secondFile.getFirst())) {\n        beginOffset.addLast(new SequenceElement<String>(firstFile.pollFirst(), SequenceElement.Status.UNTOUCHED));\n        secondFile.pollFirst();\n    }\n\n    while (!firstFile.isEmpty() && !secondFile.isEmpty() && firstFile.getLast().equals(secondFile.getLast())) {\n        endOffset.addFirst(new SequenceElement<String>(firstFile.pollLast(), SequenceElement.Status.UNTOUCHED));\n        secondFile.pollLast();\n    }\n}", "path": "src\\diff\\CreateDiff.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * Ukonceni aplikace.\n *\n * @param evt Event.\n */\n", "func_signal": "private void exitMenuItem1ActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_exitMenuItem1ActionPerformed\n\tthis.setVisible(false);\n\tthis.dispose();\n\tSystem.exit(0); // Pouhy dispose nekdy nestacil.\n}", "path": "src\\diffGui\\Window.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * Ulozit normal diff.\n *\n * @param evt Event.\n */\n", "func_signal": "private void exportNormalDiffMenuItemActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_exportNormalDiffMenuItemActionPerformed\n\ttry {\n\t\tCreateNormalDiff cnd = new CreateNormalDiff(((DiffTableModel) diffTable.getModel()).getData());\n\t\texportDiff(cnd);\n\t} catch (Exception e) {\n\t\tJOptionPane.showMessageDialog(this, \"Nothing to export.\", \"Error\", JOptionPane.ERROR_MESSAGE);\n\t}\n}", "path": "src\\diffGui\\Window.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n* @param args the command line arguments\n*/\n", "func_signal": "public static void main(String args[])", "code": "{\n    java.awt.EventQueue.invokeLater(new Runnable() {\n        public void run() {\n            try {\n                new Window().setVisible(true);\n            } catch (FileNotFoundException ex) {\n                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);\n            } catch (IOException ex) {\n                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);\n            }\n        }\n    });\n}", "path": "src\\diffGui\\Window.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    chooseDiffFiles = new javax.swing.JDialog();\n    openFirstFileButton = new javax.swing.JButton();\n    firstFileField = new javax.swing.JTextField();\n    openSecondFileButton = new javax.swing.JButton();\n    secondFileField = new javax.swing.JTextField();\n    okChooseDiffFilesButton = new javax.swing.JButton();\n    cancelChooseDiffFilesButton = new javax.swing.JButton();\n    jScrollPane1 = new javax.swing.JScrollPane();\n    diffTable = new javax.swing.JTable();\n    removedLinesLabel = new javax.swing.JLabel();\n    removedLinesValueLabel = new javax.swing.JLabel();\n    addedLinesLabel = new javax.swing.JLabel();\n    addedLinesValueLabel = new javax.swing.JLabel();\n    menu = new javax.swing.JMenuBar();\n    fileMenu = new javax.swing.JMenu();\n    newDiffMenuItem = new javax.swing.JMenuItem();\n    jSeparator2 = new javax.swing.JSeparator();\n    exportMenu = new javax.swing.JMenu();\n    exportNormalDiffMenuItem = new javax.swing.JMenuItem();\n    exportUnifiedDiffMenuItem = new javax.swing.JMenuItem();\n    jSeparator1 = new javax.swing.JSeparator();\n    exitMenuItem1 = new javax.swing.JMenuItem();\n\n    chooseDiffFiles.setTitle(\"Choose Diff Files\");\n    chooseDiffFiles.setMinimumSize(new java.awt.Dimension(438, 155));\n    chooseDiffFiles.setModal(true);\n    chooseDiffFiles.setResizable(false);\n\n    openFirstFileButton.setText(\"Open first file\");\n    openFirstFileButton.setNextFocusableComponent(openSecondFileButton);\n    openFirstFileButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            openFirstFileButtonActionPerformed(evt);\n        }\n    });\n\n    firstFileField.setEnabled(false);\n\n    openSecondFileButton.setText(\"Open second file\");\n    openSecondFileButton.setNextFocusableComponent(okChooseDiffFilesButton);\n    openSecondFileButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            openSecondFileButtonActionPerformed(evt);\n        }\n    });\n\n    secondFileField.setEnabled(false);\n\n    okChooseDiffFilesButton.setText(\"OK\");\n    okChooseDiffFilesButton.setNextFocusableComponent(cancelChooseDiffFilesButton);\n    okChooseDiffFilesButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            okChooseDiffFilesButtonActionPerformed(evt);\n        }\n    });\n\n    cancelChooseDiffFilesButton.setText(\"Cancel\");\n    cancelChooseDiffFilesButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            cancelChooseDiffFilesButtonActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout chooseDiffFilesLayout = new javax.swing.GroupLayout(chooseDiffFiles.getContentPane());\n    chooseDiffFiles.getContentPane().setLayout(chooseDiffFilesLayout);\n    chooseDiffFilesLayout.setHorizontalGroup(\n        chooseDiffFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(chooseDiffFilesLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(chooseDiffFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(chooseDiffFilesLayout.createSequentialGroup()\n                    .addGroup(chooseDiffFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                        .addComponent(openFirstFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addComponent(openSecondFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addGroup(chooseDiffFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(firstFileField, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)\n                        .addComponent(secondFileField, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)))\n                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, chooseDiffFilesLayout.createSequentialGroup()\n                    .addComponent(okChooseDiffFilesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(cancelChooseDiffFilesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))\n            .addContainerGap())\n    );\n\n    chooseDiffFilesLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelChooseDiffFilesButton, okChooseDiffFilesButton});\n\n    chooseDiffFilesLayout.setVerticalGroup(\n        chooseDiffFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(chooseDiffFilesLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(chooseDiffFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(openFirstFileButton)\n                .addComponent(firstFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addGroup(chooseDiffFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(openSecondFileButton)\n                .addComponent(secondFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addGap(18, 18, 18)\n            .addGroup(chooseDiffFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(okChooseDiffFilesButton)\n                .addComponent(cancelChooseDiffFilesButton))\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n\n    chooseDiffFilesLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {openSecondFileButton, secondFileField});\n\n    chooseDiffFilesLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {firstFileField, openFirstFileButton});\n\n    chooseDiffFilesLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cancelChooseDiffFilesButton, okChooseDiffFilesButton});\n\n    chooseDiffFiles.getAccessibleContext().setAccessibleParent(jScrollPane1);\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n    setTitle(\"Diff\");\n    setName(\"window\"); // NOI18N\n\n    diffTable.setModel(new diffGui.DiffTableModel());\n    diffTable.setColumnSelectionAllowed(true);\n    diffTable.setFillsViewportHeight(true);\n    diffTable.setFocusable(false);\n    diffTable.setShowHorizontalLines(false);\n    diffTable.getTableHeader().setReorderingAllowed(false);\n    jScrollPane1.setViewportView(diffTable);\n    diffTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);\n\n    removedLinesLabel.setText(\"Removed lines:\");\n\n    removedLinesValueLabel.setText(\"0\");\n\n    addedLinesLabel.setText(\"Added lines:\");\n\n    addedLinesValueLabel.setText(\"0\");\n\n    fileMenu.setMnemonic('F');\n    fileMenu.setText(\"File\");\n\n    newDiffMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));\n    newDiffMenuItem.setMnemonic('N');\n    newDiffMenuItem.setText(\"New Diff\");\n    newDiffMenuItem.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            newDiffMenuItemActionPerformed(evt);\n        }\n    });\n    fileMenu.add(newDiffMenuItem);\n    fileMenu.add(jSeparator2);\n\n    exportMenu.setMnemonic('E');\n    exportMenu.setText(\"Export\");\n\n    exportNormalDiffMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));\n    exportNormalDiffMenuItem.setMnemonic('N');\n    exportNormalDiffMenuItem.setText(\"Normal Diff\");\n    exportNormalDiffMenuItem.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            exportNormalDiffMenuItemActionPerformed(evt);\n        }\n    });\n    exportMenu.add(exportNormalDiffMenuItem);\n\n    exportUnifiedDiffMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));\n    exportUnifiedDiffMenuItem.setMnemonic('U');\n    exportUnifiedDiffMenuItem.setText(\"Unified Diff\");\n    exportUnifiedDiffMenuItem.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            exportUnifiedDiffMenuItemActionPerformed(evt);\n        }\n    });\n    exportMenu.add(exportUnifiedDiffMenuItem);\n\n    fileMenu.add(exportMenu);\n    fileMenu.add(jSeparator1);\n\n    exitMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));\n    exitMenuItem1.setMnemonic('x');\n    exitMenuItem1.setText(\"Exit\");\n    exitMenuItem1.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            exitMenuItem1ActionPerformed(evt);\n        }\n    });\n    fileMenu.add(exitMenuItem1);\n\n    menu.add(fileMenu);\n\n    setJMenuBar(menu);\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(removedLinesLabel)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(removedLinesValueLabel)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(addedLinesLabel)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(addedLinesValueLabel)))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(removedLinesLabel)\n                .addComponent(removedLinesValueLabel)\n                .addComponent(addedLinesLabel)\n                .addComponent(addedLinesValueLabel))\n            .addContainerGap())\n    );\n\n    pack();\n}", "path": "src\\diffGui\\Window.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * Algoritmus pracuje nad dvema seznamy prvku. Prvky mohou byt jakehokoli \n * typu, ale musi byt porovnatelne.\n * \n * @param first Prvni seznam prvku.\n * @param second Druhy seznam prvku.\n */\n", "func_signal": "public LongestCommonSubsequence(List<T> first, List<T> second)", "code": "{\n    this.firstList = new ArrayList<T>(first);\n    this.secondList = new ArrayList<T>(second);\n}", "path": "src\\diff\\LongestCommonSubsequence.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * Konstruktor\n * @param d Diff, jehoz statistiky maji byt zpocitany.\n */\n", "func_signal": "public DiffStatistics(List<SequenceElement<String>> d)", "code": "{\n\taddedLines = removedLines = 0;\n\tcomputeStatistics(d);\n}", "path": "src\\diff\\DiffStatistics.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * Pouzijeme dynamickeho programovani a zpocitame nejdelsi podposloupnost.\n * Algoritmus ma slozitost O(N*M), kazdy prvek z prvniho seznamu porovname\n * s kazdym prvkem druheho seznamu. Vysledky si zapisujeme do tabulky o\n * velikosti O(N*M). N je velikost prvniho seznamu, M je velikost druheho.\n * \n * Pokud najdeme dva prvky na indexech i a j, pak do tabulky na pozici i,j\n * zapiseme maximalni velikost spolecne posloupnosti, ktera je na pozici \n * i-1, j-1, a zvetsime ji o jedna. Pokud se prvky na indexech i a j \n * nerovnaji, pak do tabulky zapiseme maximum z leve a horni bunky. Timto \n * zpusobem si zarucime, ze maximalni hodnota (velikost podposloupnosti) nam\n * propadne az do praveho dolniho rohu.\n * \n * Pro zjisteni maximalni delky nam tedy staci podivat se na pravy dolni roh\n * tabulky, tuto tabulku si vsak uchovavame, protoze z ni ziskame posleze \n * nejen velikost, ale i celou spolecnou podposloupnost.\n * \n * @return Tabulka delky spolecne podposloupnosti pro zadane seznamy.\n */\n", "func_signal": "protected int[][] computeLength()", "code": "{\n    int table[][] = new int[this.firstList.size()+1][this.secondList.size()+1];\n    \n    for (int i = 0; i < firstList.size(); i++) {\n        for (int j = 0; j < secondList.size(); j++) {\n            if (firstList.get(i).equals(secondList.get(j))) {\n                table[i+1][j+1] = table[i][j] + 1;\n            } else {\n                table[i+1][j+1] = Math.max(table[i+1][j], table[i][j+1]);\n            }\n        }\n    }\n    \n    return table;\n}", "path": "src\\diff\\LongestCommonSubsequence.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * Otevreni prvniho souboru\n *\n * @param evt Event.\n */\n", "func_signal": "private void openFirstFileButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_openFirstFileButtonActionPerformed\n\tJFileChooser fc = new JFileChooser(\".\");\n\tif (fc.showOpenDialog(menu) == JFileChooser.APPROVE_OPTION) {\n\t\tbfst = fc.getSelectedFile();\n\t\tfirstFileField.setText(bfst.getName());\n\t}\n}", "path": "src\\diffGui\\Window.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/** \n * Nastaveni dat, ktera se maji zobrazit.\n * @param diff Diff, ktery se ma zobrazit.\n */\n", "func_signal": "public void setData(List<SequenceElement<String>> diff)", "code": "{\n        this.diff = diff;\n        this.fireTableStructureChanged();\n    }", "path": "src\\diffGui\\DiffTableModel.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * @brief Zpocitani diffu.\n *\n * Vytvori instanci tridy LongestCommonSubsequence a zpocita diff, nakonec\n * prida i odrizle casti ze zacatku a konce.\n */\n", "func_signal": "protected void diffFiles()", "code": "{\n    LongestCommonSubsequence<String> lcs = new LongestCommonSubsequence<String>(firstFile, secondFile);\n    diff = new ArrayList<SequenceElement<String>>(beginOffset);\n    diff.addAll(lcs.findDiff());\n    diff.addAll(endOffset);\n}", "path": "src\\diff\\CreateDiff.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * Ulozit unified diff.\n *\n * @param evt Event.\n */\n", "func_signal": "private void exportUnifiedDiffMenuItemActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_exportUnifiedDiffMenuItemActionPerformed\n\ttry {\n\t\tCreateUnifiedDiff cud = new CreateUnifiedDiff(fst, snd, ((DiffTableModel) diffTable.getModel()).getData());\n\t\texportDiff(cud);\n\t} catch (Exception e) {\n\t\tJOptionPane.showMessageDialog(this, \"Nothing to export.\", \"Error\", JOptionPane.ERROR_MESSAGE);\n\t}\n}", "path": "src\\diffGui\\Window.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * Vraci tridu, kterou maji prvky v zadanem sloupci, v prvnim sloupci jsou\n * cisla radku, tedy Integer. Ve druhem sloupci jsou radky diffu, tedy\n * SequenceElement.\n * @param c Cislo sloupce.\n * @return Trida prvku v sloupci.\n */\n", "func_signal": "@Override\n    public Class getColumnClass(int c)", "code": "{\n        if (c == 0) {\n            return Integer.class;\n        } else {\n            return String.class;\n        }\n    }", "path": "src\\diffGui\\DiffTableModel.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * Ulozi diff do souboru.\n * \n * @param cd Diff, ktery se ma ulozit.\n */\n", "func_signal": "private void exportDiff(CreateDiff cd)", "code": "{\n\tJFileChooser fc = new JFileChooser(fst);\n\tif (fc.showSaveDialog(menu) == JFileChooser.APPROVE_OPTION) {\n\t\tFile save = fc.getSelectedFile();\n\t\ttry {\n\t\t\tFileWriter fw;\n\t\t\tfw = new FileWriter(save);\n\t\t\tfw.write(cd.toString());\n\t\t\tfw.close();\n\t\t} catch (IOException ex) {\n\t\t\tLogger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);\n\t\t}\n\t}\n}", "path": "src\\diffGui\\Window.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * @brief Nacteni radku souboru.\n *\n * Nacte soubor radek po radku.\n *\n * @param f Soubor, ktery se ma nacist.\n * @return Seznam radku souboru.\n * @throws java.io.FileNotFoundException\n * @throws java.io.IOException\n */\n", "func_signal": "protected LinkedList<String> loadLines(File f) throws FileNotFoundException, IOException", "code": "{\n    BufferedReader reader = new BufferedReader(new FileReader(f));\n    LinkedList<String> lines = new LinkedList<String>();\n    String l;\n    while ((l = reader.readLine()) != null) {\n        lines.addLast(l);\n    }\n    return lines;\n}", "path": "src\\diff\\CreateDiff.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * Po zmakcnuti tlacitka OK ve vyberovem dialogu se zpocita diff a zobrazi se.\n *\n * @param evt Event.\n */\n", "func_signal": "private void okChooseDiffFilesButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_okChooseDiffFilesButtonActionPerformed\n\tif (firstFileField.getText().length() > 0 && secondFileField.getText().length() > 0) {\n\t\t// Vytvoreni diffu.\n\t\tCreateDiff cd;\n\t\ttry {\n\t\t\tcd = new CreateDiff(bfst, bsnd);\n\t\t\tfst = bfst;\n\t\t\tsnd = bsnd;\n\t\t} catch (IOException e) {\n\t\t\tJOptionPane.showMessageDialog(this, \"Choose files you want to diff.\", \"Error\", JOptionPane.ERROR_MESSAGE);\n\t\t\treturn;\n\t\t}\n\n\t\t// Nastaveni diffu do tabulky.\n\t\tList<SequenceElement<String>> d = cd.getDiff();\n\t\t((DiffTableModel) diffTable.getModel()).setData(d);\n\t\tdiffTable.getColumnModel().getColumn(1).setCellRenderer(new DiffLineCellRenderer());\n\n\t\t// Nevim proc je potreba vzdy nastavovat minimalni a maximalni sirku, ale jinak to nefunguje\n\t\tdiffTable.getColumnModel().getColumn(0).setMinWidth(0);\n\t\tdiffTable.getColumnModel().getColumn(0).setMaxWidth(200);\n\t\tdiffTable.getColumnModel().getColumn(0).setPreferredWidth((int) Math.floor((Math.log10(d.size()))+1) * 12);\n\n\t\t// Zpocitani statistik diffu.\n\t\tDiffStatistics ds = new DiffStatistics(d);\n\t\tremovedLinesValueLabel.setText(Integer.toString(ds.getRemovedLines()));\n\t\taddedLinesValueLabel.setText(Integer.toString(ds.getAddedLines()));\n\n\t\t// Zavreni dialogu.\n\t\tchooseDiffFiles.setVisible(false);\n\n\t} else {\n\t\tJOptionPane.showMessageDialog(this, \"Choose files you want to diff.\", \"Error\", JOptionPane.ERROR_MESSAGE);\n\t}\n}", "path": "src\\diffGui\\Window.java", "repo_name": "davidmarek/diff", "stars": 4, "license": "None", "language": "java", "size": 220}
{"docstring": "/**\n * A pseudo copy constructor.  Takes the handles to the font and formatting\n * records\n * \n * @exception IOException \n * @param w the workbook to copy\n * @param os the output stream to write the data to\n * @param cs TRUE if the workbook should close the output stream, FALSE\n * @param ws the configuration for this workbook\n */\n", "func_signal": "public WritableWorkbookImpl(OutputStream os,\n                            Workbook w,\n                            boolean cs,\n                            WorkbookSettings ws) throws IOException", "code": "{\n  super();\n  WorkbookParser wp = (WorkbookParser) w;\n\n  // Reset the statically declared styles.  These are no longer needed\n  // because the Styles class will intercept all calls within \n  // CellValue.setCellDetails and if it detects a standard format, then it\n  // will return a clone.  In short, the static cell values will\n  // never get initialized anyway.  Still, just to be extra sure...\n  synchronized(SYNCHRONIZER)\n  {\n    WritableWorkbook.ARIAL_10_PT.uninitialize();\n    WritableWorkbook.HYPERLINK_FONT.uninitialize();\n    WritableWorkbook.NORMAL_STYLE.uninitialize();\n    WritableWorkbook.HYPERLINK_STYLE.uninitialize();\n    WritableWorkbook.HIDDEN_STYLE.uninitialize();\n    DateRecord.defaultDateFormat.uninitialize();\n   }\n\n  closeStream = cs;\n  sheets = new ArrayList();\n  sharedStrings = new SharedStrings();\n  nameRecords = new HashMap();\n  fonts = wp.getFonts();\n  formatRecords = wp.getFormattingRecords();\n  wbProtected = false;\n  settings = ws;\n  rcirCells = new ArrayList();\n  styles = new Styles();\n  outputFile = new File(os, ws, wp.getCompoundFile());\n\n  containsMacros = false;\n  if (!ws.getPropertySetsDisabled())\n  {\n    containsMacros = wp.containsMacros();\n  }\n\n  // Copy the country settings\n  if (wp.getCountryRecord() != null)\n  {\n    countryRecord = new CountryRecord(wp.getCountryRecord());\n  }\n\n  // Copy any add in functions\n  addInFunctionNames = wp.getAddInFunctionNames();\n\n  // Copy XCT records\n  xctRecords = wp.getXCTRecords();\n\n  // Copy any external sheets\n  if (wp.getExternalSheetRecord() != null)\n  {\n    externSheet = new ExternalSheetRecord(wp.getExternalSheetRecord());\n\n    // Get the associated supbooks\n    jxl.read.biff.SupbookRecord[] readsr = wp.getSupbookRecords();\n    supbooks = new ArrayList(readsr.length);\n\n    for (int i = 0; i < readsr.length; i++)\n    {\n      jxl.read.biff.SupbookRecord readSupbook = readsr[i];\n      if (readSupbook.getType() == readSupbook.INTERNAL ||\n          readSupbook.getType() == readSupbook.EXTERNAL)\n      {\n        supbooks.add(new SupbookRecord(readSupbook, settings));\n      }\n      else\n      {\n        if (readSupbook.getType() != readSupbook.ADDIN)\n        {\n          logger.warn(\"unsupported supbook type - ignoring\");\n        }\n      }\n    }\n  }\n\n  // Copy any drawings.  These must be present before we try and copy\n  // the images from the read workbook\n  if (wp.getDrawingGroup() != null)\n  {\n    drawingGroup = new DrawingGroup(wp.getDrawingGroup());\n  }\n\n  // Copy the property set references\n  if (containsMacros && wp.getButtonPropertySet() != null)\n  {\n    buttonPropertySet = new ButtonPropertySetRecord\n      (wp.getButtonPropertySet());\n  }\n\n  // Copy any names\n  if (!settings.getNamesDisabled())\n  {\n    jxl.read.biff.NameRecord[] na = wp.getNameRecords();\n    names = new ArrayList(na.length);\n    \n    for (int i = 0; i < na.length; i++)\n    {\n      if (na[i].isBiff8())\n      {\n        NameRecord n = new NameRecord(na[i], i);\n        names.add(n);\n        String name = n.getName();\n        nameRecords.put(name, n);\n      }\n      else\n      {\n        logger.warn(\"Cannot copy Biff7 name records - ignoring\");\n      }\n    }\n  }\n  \n  copyWorkbook(w);\n\n  // The copy process may have caused some critical fields in the \n  // read drawing group to change.  Make sure these updates are reflected\n  // in the writable drawing group\n  if (drawingGroup != null)\n  {\n    drawingGroup.updateData(wp.getDrawingGroup());\n  }\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Gets the index of the external sheet for the name\n *\n * @param sheetName\n * @return the sheet index of the external sheet index\n */\n", "func_signal": "public int getExternalSheetIndex(int index)", "code": "{\n  if (externSheet == null)\n  {\n    return index;\n  }\n\n  Assert.verify(externSheet != null);\n\n  int firstTab = externSheet.getFirstTabIndex(index);\n\n  return firstTab;\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * The internal method implementation for creating new sheets\n *\n * @param name\n * @param index\n * @param handleRefs flag indicating whether or not to handle external\n *                   sheet references\n * @return \n */\n", "func_signal": "private WritableSheet createSheet(String name, int index, \n                                  boolean handleRefs)", "code": "{\n  WritableSheet w = new WritableSheetImpl(name, \n                                          outputFile, \n                                          formatRecords, \n                                          sharedStrings,\n                                          settings,\n                                          this);\n\n  int pos = index;\n\n  if (index <= 0)\n  {\n    pos = 0;\n    sheets.add(0, w);\n  }\n  else if (index > sheets.size())\n  {\n    pos = sheets.size();\n    sheets.add(w);\n  }\n  else\n  {\n    sheets.add(index, w);\n  }\n\n  if (handleRefs && externSheet != null)\n  {\n    externSheet.sheetInserted(pos);\n  }\n\n  if (supbooks != null && supbooks.size() > 0)\n  {\n    SupbookRecord supbook = (SupbookRecord) supbooks.get(0);\n    if (supbook.getType() == SupbookRecord.INTERNAL)\n    {\n      supbook.adjustInternal(sheets.size());\n    }\n  }\n\n  return w;\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Gets the named cell from this workbook.  If the name refers to a\n * range of cells, then the cell on the top left is returned.  If\n * the name cannot be found, null is returned\n *\n * @param  the name of the cell/range to search for\n * @return the cell in the top left of the range if found, NULL\n *         otherwise\n */\n", "func_signal": "public WritableCell findCellByName(String name)", "code": "{\n  NameRecord nr = (NameRecord) nameRecords.get(name);\n\n  if (nr == null)\n  {\n    return null;\n  }\n\n  NameRecord.NameRange[] ranges = nr.getRanges();\n\n  // Go and retrieve the first cell in the first range\n  int sheetIndex = getExternalSheetIndex(ranges[0].getExternalSheet());\n  WritableSheet s    = getSheet(sheetIndex);\n  WritableCell  cell = s.getWritableCell(ranges[0].getFirstColumn(), \n                                         ranges[0].getFirstRow());\n\n  return cell;\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Removes a sheet from this workbook, the other sheets indices being\n * altered accordingly. If the sheet referenced by the index\n * does not exist, then no action is taken.\n * \n * @param index the index of the sheet to remove\n */\n", "func_signal": "public void removeSheet(int index)", "code": "{\n  int pos = index;\n  if (index <= 0)\n  {\n    pos = 0;\n    sheets.remove(0);\n  }\n  else if (index >= sheets.size())\n  {\n    pos = sheets.size() - 1;\n    sheets.remove(sheets.size() - 1);\n  }\n  else\n  {\n    sheets.remove(index);\n  }\n\n  if (externSheet != null)\n  {\n    externSheet.sheetRemoved(pos);\n  }\n\n  if (supbooks != null && supbooks.size() > 0)\n  {\n    SupbookRecord supbook = (SupbookRecord) supbooks.get(0);\n    if (supbook.getType() == SupbookRecord.INTERNAL)\n    {\n      supbook.adjustInternal(sheets.size());\n    }\n  }\n\n  if (names != null && names.size() > 0)\n  {\n    for (int i=0; i< names.size();i++)\n    {\n      NameRecord n = (NameRecord) names.get(i);\n      int oldRef = n.getSheetRef();\n      if(oldRef == (pos+1))\n      {\n        n.setSheetRef(0); // make a global name reference\n      } \n      else if (oldRef > (pos+1))\n      {\n        if(oldRef < 1)\n        {\n          oldRef = 1;\n        }\n        n.setSheetRef(oldRef-1); // move one sheet\n      }\n    }\n  }\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Gets the sheet names\n *\n * @return an array of strings containing the sheet names\n */\n", "func_signal": "public String[] getSheetNames()", "code": "{\n  String[] sheetNames = new String[getNumberOfSheets()];\n\n  for (int i = 0 ; i < sheetNames.length ; i++)\n  {\n    sheetNames[i] = getSheet(i).getName();\n  }\n\n  return sheetNames;\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Produces a writable copy of the workbook passed in by \n * creating copies of each sheet in the specified workbook and adding \n * them to its own record\n * \n * @param w the workbook to copy\n */\n", "func_signal": "private void copyWorkbook(Workbook w)", "code": "{\n  int numSheets = w.getNumberOfSheets();\n  wbProtected = w.isProtected();\n  Sheet s = null;\n  WritableSheetImpl ws = null;\n  for (int i = 0 ; i < numSheets; i++)\n  {\n    s = w.getSheet(i);\n    ws = (WritableSheetImpl) createSheet(s.getName(),i, false);\n    ws.copy(s);\n  }\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Adjusts all the relative cell references in this formula by the\n * amount specified.  Used when copying formulas\n *\n * @param colAdjust the amount to add on to each relative cell reference\n * @param rowAdjust the amount to add on to each relative row reference\n */\n", "func_signal": "public void adjustRelativeCellReferences(int colAdjust, int rowAdjust)", "code": "{\n  if (columnRelative)\n  {\n    column += colAdjust;\n  }\n\n  if (rowRelative)\n  {\n    row += rowAdjust;\n  }\n}", "path": "WEB-INF\\src\\java\\jxl\\biff\\formula\\CellReference3d.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Gets the internal sheet index for a sheet name\n *\n * @param name the sheet name\n * @return the internal sheet index\n */\n", "func_signal": "private int getInternalSheetIndex(String name)", "code": "{\n  int index = -1;\n  String[] names = getSheetNames();\n  for (int i = 0 ; i < names.length; i++)\n  {\n    if (name.equals(names[i]))\n    {\n      index = i;\n      break;\n    }\n  }\n\n  return index;\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Gets the external sheet index for the sheet name\n *\n * @param sheetName \n * @return the sheet index or -1 if the sheet could not be found\n */\n", "func_signal": "public int getExternalSheetIndex(String sheetName)", "code": "{\n  if (externSheet == null)\n  {\n    externSheet = new ExternalSheetRecord();\n    supbooks = new ArrayList();\n    supbooks.add(new SupbookRecord(getNumberOfSheets(), settings));\n  }\n\n  // Iterate through the sheets records\n  boolean found = false;\n  Iterator i = sheets.iterator();\n  int sheetpos = 0;\n  WritableSheetImpl s = null;\n\n  while (i.hasNext() && !found)\n  {\n    s = (WritableSheetImpl) i.next();\n    \n    if (s.getName().equals(sheetName))\n    {\n      found = true;\n    }\n    else\n    {\n      sheetpos++;\n    }\n  }\n\n  if (found)\n  {\n    // Check that the supbook record at position zero is internal and\n    // contains all the sheets\n    SupbookRecord supbook = (SupbookRecord) supbooks.get(0);\n    if (supbook.getType() != SupbookRecord.INTERNAL ||\n        supbook.getNumberOfSheets() != getNumberOfSheets())\n    {\n      logger.warn(\"Cannot find sheet \" + sheetName + \" in supbook record\");\n    }\n    \n    return externSheet.getIndex(0, sheetpos);\n  }\n\n  // Check for square brackets\n  int closeSquareBracketsIndex = sheetName.lastIndexOf(']');\n  int openSquareBracketsIndex = sheetName.lastIndexOf('[');\n  \n  if (closeSquareBracketsIndex == -1 ||\n      openSquareBracketsIndex == -1)\n  {\n    logger.warn(\"Square brackets\");\n    return -1;\n  }\n\n  String worksheetName = sheetName.substring(closeSquareBracketsIndex+1);\n  String workbookName = sheetName.substring(openSquareBracketsIndex+1, \n                                            closeSquareBracketsIndex);\n  String path = sheetName.substring(0, openSquareBracketsIndex);\n  String fileName = path + workbookName;\n\n  boolean supbookFound = false;\n  SupbookRecord externalSupbook = null;\n  int supbookIndex = -1;\n  for (int ind = 0; ind < supbooks.size() && !supbookFound ; ind++)\n  {\n    externalSupbook = (SupbookRecord) supbooks.get(ind);\n    if (externalSupbook.getType() == SupbookRecord.EXTERNAL &&\n        externalSupbook.getFileName().equals(fileName))\n    {\n      supbookFound = true;\n      supbookIndex = ind;\n    }\n  }\n\n  if (!supbookFound)\n  {\n    externalSupbook = new SupbookRecord(fileName, settings);\n    supbookIndex = supbooks.size();\n    supbooks.add(externalSupbook);\n  }\n  \n  int sheetIndex = externalSupbook.getSheetIndex(worksheetName);\n\n  return externSheet.getIndex(supbookIndex, sheetIndex);\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Gets the sheets within this workbook.  Use of this method for\n * large worksheets can cause performance problems.\n * \n * @return an array of the individual sheets\n */\n", "func_signal": "public WritableSheet[] getSheets()", "code": "{\n  WritableSheet[] sheetArray = new WritableSheet[getNumberOfSheets()];\n  \n  for (int i = 0 ; i < getNumberOfSheets() ; i++)\n  {\n    sheetArray[i] = getSheet(i);\n  }\n  return sheetArray;\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Gets the sheet with the specified name from within this workbook\n * \n * @param name the sheet name\n * @return The sheet with the specified name, or null if it is not found\n */\n", "func_signal": "public WritableSheet getSheet(String name)", "code": "{\n  // Iterate through the boundsheet records\n  boolean found = false;\n  Iterator i = sheets.iterator();\n  WritableSheet s = null;\n\n  while (i.hasNext() && !found)\n  {\n    s = (WritableSheet) i.next();\n    \n    if (s.getName().equals(name))\n    {\n      found = true;\n    }\n  }\n\n  return found ? s : null;\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**This method is for the Save Bookmark.*/\n", "func_signal": "public void doSave(RunData data,Context context)", "code": "{       \n\ttry{\n        \t\tParameterParser pp=data.getParameters();\n\t\tLangFile=data.getUser().getTemp(\"LangFile\").toString();\n\t\t/**\n                        * Get username for the user currently logged in\n                        */\n\t\tString userName=data.getUser().getName();\n\t\tString group=(String)data.getUser().getTemp(\"course_id\");\n\t\tString topicdesc=pp.getString(\"description\",\"\");\n\t\tString topicname=pp.getString(\"name\",\"\");\n\t\tString comment=pp.getString(\"comment\",\"\");\n\t\tString urllocation=pp.getString(\"location\",\"\");\n\t\tString dirname=pp.getString(\"valfolder\",\"\");\n\t\tString type=pp.getString(\"type\",\"\");\n\t\tErrorDumpUtil.ErrorLog(\"\\ndirname\"+dirname);\n\t\tif(StringUtil.checkString(topicname) != -1)\n                        {\n                                data.addMessage(MultilingualUtil.ConvertedString(\"usr_prof1\",LangFile));\n                                return;\n                        }\n\t\tcontext.put(\"topics\",topicname);\n                       \tFile f=new File(BookmarksPath+\"/\"+userName);\n\t\tif(!f.exists())\n                        \tf.mkdirs();\n\n\t\t/**\n\t\t*Creating the blank xml for maintaining the record\n\t\t*@see TopicMetaDataXmlWriter in Util.\n\t\t*/\n\t\tString filepath=(BookmarksPath+\"/\"+userName);\n\t\tFile Bookmarkslistxml= new File(filepath+\"/BookmarksList.xml\");\n                        if(!Bookmarkslistxml.exists())\n                                TopicMetaDataXmlWriter.writeWithRootOnly(Bookmarkslistxml.getAbsolutePath());\n\t\tXmlWriter xmlWriter=null;\n                        boolean found=false;\n                        String xmlfile=\"/BookmarksList.xml\";\n                        if(!Bookmarkslistxml.exists())\n                        {\n                                xmlWriter=new XmlWriter(filepath+\"/\"+xmlfile);\n                        }\n                        /**\n                        *Checking for  the existing Bookmark\n                        *@see TopicMetaDataXmlReader in Util.\n                        */\n                        else\n                        {\n                                TopicMetaDataXmlReader topicmetadata=null;\n                                topicmetadata=new TopicMetaDataXmlReader(filepath+\"/\"+xmlfile);\n                                Vector collect=topicmetadata.getBookmarksDetails();\n                                if(collect!=null)\n                                {\n                                        for(int i=0;i<collect.size();i++)\n\t\t\t\t{//for\n                                        \tString Bookmarkname =((FileEntry) collect.elementAt(i)).getTopic();\n                                        \tString type1 =((FileEntry) collect.elementAt(i)).gettype();\n\t\t\t\t\tString urllocation1 =((FileEntry) collect.elementAt(i)).getUrl();\n                                                //if(topicname.equals(Bookmarkname)&&(type.equals(type1))\n                                                if((topicname.equals(Bookmarkname))&&(urllocation1.equals(urllocation)))\n                                                        found=true;\n                                                \t//data.setMessage(\"This Bookmark is already exists !!\");\n\t\t\tdata.setMessage(MultilingualUtil.ConvertedString(\"brih_This\",LangFile)+\" \"+MultilingualUtil.ConvertedString(\"brih_Bookmark\",LangFile)+\" \"+MultilingualUtil.ConvertedString(\"brih_is\",LangFile)+\" \"+MultilingualUtil.ConvertedString(\"Wikiaction6\",LangFile)+\" \"+\"!!\");\n                                        }//for\n                                }//if\n                        }//else\n\n                        /**\n                        *Appending the entry in the xml File\n                        *@see TopicMetaDataXmlWriter in Util.\n                        */\n                        if(found==false)\n                        {\n                                xmlWriter=TopicMetaDataXmlWriter.Bookmarksxml(filepath,xmlfile);\n\t\t\tif((type.equals(\"Course\"))||(type.equals(\"Course_file\")))\n\t\t\tdirname=group;\n                                TopicMetaDataXmlWriter.appendBookmarks(xmlWriter,topicname,urllocation,dirname,type,comment);\n                                xmlWriter.writeXmlFile();\n\t\t\tif((!dirname.equals(\"\"))&&(type.equals(\"general\")))\n\t\t\t{\n                       \t\t\tString filepath1=(filepath+\"/\"+dirname);\n\t\t\t\tFile topicdesxml =new File(filepath1+\"/\"+dirname+\"_des.xml\");\n                        \t\tif(!topicdesxml.exists())\n                        \t\t{\n                        \t\t\txmlWriter=new XmlWriter(filepath1+\"/\"+dirname+\"_des.xml\");\n                        \t\t}//if\n                        \t\telse\n                        \t\t\txmlWriter=TopicMetaDataXmlWriter.Bookmarksxml(filepath1,dirname+\"_des.xml\");\n                                \t\tTopicMetaDataXmlWriter.appendBookmarks(xmlWriter,topicname,urllocation,dirname,type,comment);\n                                \t\txmlWriter.changeData(\"Desc\",topicdesc,0);\n                                \t\txmlWriter.writeXmlFile();\n\t\t\t}//\n\t\tdata.setMessage(MultilingualUtil.ConvertedString(\"brih_Bookmark\",LangFile)+\" \"+MultilingualUtil.ConvertedString(\"brih_Added\",LangFile)+\" \"+MultilingualUtil.ConvertedString(\"brih_successfully\",LangFile));\n\t\t}\n\t\t//data.setMessage(\"Bookmark Add Successfully !!\");\n\t}//try\n\tcatch(Exception e){\n\t\t\t \tErrorDumpUtil.ErrorLog(\"The exception in doCreate_resrepo \"+e);\n                        \t\tSystem.out.println(\"See Exception message in ExceptionLog.txt file:: \");\n\t\t}\n}", "path": "WEB-INF\\src\\java\\org\\iitk\\brihaspati\\modules\\actions\\Bookmarks.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Returns the cell for the specified location eg. \"Sheet1!A4\".  \n * This is identical to using the CellReferenceHelper with its\n * associated performance overheads, consequently it should\n * be use sparingly\n *\n * @param loc the cell to retrieve\n * @return the cell at the specified location\n */\n", "func_signal": "public WritableCell getWritableCell(String loc)", "code": "{\n  WritableSheet s = getSheet(CellReferenceHelper.getSheet(loc)); \n  return s.getWritableCell(loc);\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Constructor\n */\n", "func_signal": "public SplitMenuColors()", "code": "{\n  super(EscherRecordType.SPLIT_MENU_COLORS);\n  setVersion(0);\n  setInstance(4);\n\n  data = new byte[]\n    {(byte) 0x0d, (byte) 0x00, (byte) 0x00, (byte) 0x08,\n     (byte) 0x0c, (byte) 0x00, (byte) 0x00, (byte) 0x08,\n     (byte) 0x17, (byte) 0x00, (byte) 0x00, (byte) 0x08,\n     (byte) 0xf7, (byte) 0x00, (byte) 0x00, (byte) 0x10};\n}", "path": "WEB-INF\\src\\java\\jxl\\biff\\drawing\\SplitMenuColors.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Gets the index of the external sheet for the name\n *\n * @param sheetName\n * @return the sheet index of the external sheet index\n */\n", "func_signal": "public int getLastExternalSheetIndex(int index)", "code": "{\n  if (externSheet == null)\n  {\n    return index;\n  }\n\n  Assert.verify(externSheet != null);\n\n  int lastTab = externSheet.getLastTabIndex(index);\n\n  return lastTab;\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Gets the name at the specified index\n *\n * @param index the index into the name table\n * @return the name of the cell\n */\n", "func_signal": "public String getName(int index)", "code": "{\n  Assert.verify(index >= 0 && index < names.size());\n  NameRecord n = (NameRecord) names.get(index);\n  return n.getName();\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Removes the specified named range from the workbook\n *\n * @param name the name to remove\n */\n", "func_signal": "public void removeRangeName(String name)", "code": "{\n  int pos = 0;\n  boolean found = false;\n  for (Iterator i = names.iterator(); i.hasNext() && !found ;)\n  {\n    NameRecord nr = (NameRecord) i.next();\n    if (nr.getName().equals(name))\n    {\n      found = true;\n    }\n    else\n    {\n      pos++;\n    }\n  }\n\n  // Remove the name from the list of names and the associated hashmap\n  // of names (used to retrieve the name index).  If the name cannot\n  // be found, a warning is displayed\n  if (found)\n  {\n    names.remove(pos);\n    if (nameRecords.remove(name) == null)\n    {\n      logger.warn(\"Could not remove \" + name + \" from index lookups\");\n    }\n  }\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Rationalizes the cell formats, and then passes the resultant XF index\n * mappings to each sheet in turn\n */\n", "func_signal": "private void rationalize()", "code": "{\n  IndexMapping fontMapping   = formatRecords.rationalizeFonts();\n  IndexMapping formatMapping = formatRecords.rationalizeDisplayFormats();\n  IndexMapping xfMapping     = formatRecords.rationalize(fontMapping, \n                                                         formatMapping);\n\n  WritableSheetImpl wsi = null;\n  for (int i = 0; i < sheets.size(); i++)\n  {\n    wsi = (WritableSheetImpl) sheets.get(i);\n    wsi.rationalize(xfMapping, fontMapping, formatMapping);\n  }\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n * Moves the specified sheet within this workbook to another index\n * position.\n * \n * @param fromIndex the zero based index of the reQuired sheet\n * @param toIndex the zero based index of the reQuired sheet\n * @return the sheet that has been moved\n */\n", "func_signal": "public WritableSheet moveSheet(int fromIndex, int toIndex)", "code": "{\n  // Handle dodgy index \n  fromIndex = Math.max(fromIndex, 0);\n  fromIndex = Math.min(fromIndex, sheets.size() - 1);\n  toIndex   = Math.max(toIndex, 0);\n  toIndex   = Math.min(toIndex, sheets.size() - 1);\n\n  WritableSheet sheet= (WritableSheet)sheets.remove(fromIndex);\n  sheets.add(toIndex, sheet);\n  \n  return sheet;\n}", "path": "WEB-INF\\src\\java\\jxl\\write\\biff\\WritableWorkbookImpl.java", "repo_name": "vivekp/Timetable-Generation", "stars": 5, "license": "None", "language": "java", "size": 2420}
{"docstring": "/**\n* Main method which is called by the java interpreter. Basically displays the window and returns.\n*\n* @param args the command line arguments (currently none available)\n*/\n", "func_signal": "public static void main (String args[])", "code": "{\n    UIManager.put(\"org.mediavirus.parvis.gui.ParallelDisplayUI\", \"org.mediavirus.parvis.gui.BasicParallelDisplayUI\");\n    new MainFrame().show();\n}", "path": "src\\org\\mediavirus\\parvis\\ParvisMain.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Reads the data lines.\n */\n", "func_signal": "protected void readData(Reader in) throws IOException", "code": "{\n    String line, value;\n    int i, j, s;\n    \n    String label;\n    \n    float curVal[];\n    \n    while ((line = readLine(in)) != null){\n        bytesRead += line.length();\n\n        float progress = (float)bytesRead / filesize;\n        fireProgressEvent(new ProgressEvent(this, ProgressEvent.PROGRESS_UPDATE, progress, \"loading file\"));\n\n        StringTokenizer str = new StringTokenizer(line);\n        curVal = new float[numDimensions];\n        \n        j=0;\n        s=0;\n        label = null;\n        \n        for (i = 0; i<tempNumDimensions; i++){\n            value = str.nextToken();\n//                System.out.println(\"value \" + i + \": \" + value);\n            \n            if (!isStringLabel[i]) {\n                try {\n                    float val = Float.parseFloat(value);\n                    curVal[j++] = val;\n                }\n                catch (NumberFormatException nfe){\n                    System.out.println(\"Invalid Number Format: \" + nfe.getMessage() + \" -> dicarding & setting 0.0f\");\n                    curVal[j++] = 0.0f;\n                }\n            }\n            else {\n                value = value.replace('_',' ');\n                value = value.substring(0,1).toUpperCase() + value.substring(1);\n                \n                int spcidx = 0;\n                while ((spcidx = value.indexOf(' ', spcidx+1)) != -1){\n                    value = value.substring(0,spcidx+1) + value.substring(spcidx+1,spcidx+2).toUpperCase() + value.substring(spcidx+2);\n                }\n                    \n                if (label == null) {\n                    label = stringLabels.elementAt(s++) + \": \" + value;\n                }\n                else {\n                    label += \"\\n\" + stringLabels.elementAt(s++) + \": \" + value;\n                }\n            }\n                            \n        }\n        \n        addRecord(curVal, label);\n            \n    }\n}", "path": "src\\org\\mediavirus\\parvis\\file\\STFFile.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/** \n * Reads the header lines and sets up the variable types.\n */\n", "func_signal": "protected void readHeaderLines(Reader in) throws IOException", "code": "{\n    int i;\n    int j=0;\n    String line;\n    \n    int numDimensions = tempNumDimensions;\n    Vector labels = new Vector();\n    \n    for (i=0; i<tempNumDimensions; i++){\n        line = readLine(in);\n        bytesRead += line.length();\n        \n        StringTokenizer str = new StringTokenizer(line);\n        String label = str.nextToken();\n        String type = str.nextToken();\n                    \n        if (type.equalsIgnoreCase(\"string\")){\n            isStringLabel[i] = true;\n            stringLabels.addElement(label);\n            \n            numDimensions--;\n            //System.out.println(\"Recordlabel \" + label);\n        }\n        else {\n            labels.addElement(label);\n            System.out.println(\"Axis \" + j++ + \" label \" + label + \" type \" + type + \".\");\n        }\n            \n    }\n    \n    this.initNumDimensions(numDimensions);\n    String tempLabels[] = (String[])labels.toArray(new String[numDimensions]);\n    this.setAxisLabels(tempLabels);\n}", "path": "src\\org\\mediavirus\\parvis\\file\\STFFile.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Sets a single value label for a specific axis.\n *\n * @param dimension The dimension to set the label for.\n * @param value The value to set the label for.\n * @param label The label to set.\n */\n", "func_signal": "public void setValueLabel(int dimension, float value, String label)", "code": "{\n    \n    if (valueLabels[dimension] == null){\n        valueLabels[dimension] = new Hashtable();\n    }\n    \n    valueLabels[dimension].put(new Float(value), label);\n\n}", "path": "src\\org\\mediavirus\\parvis\\model\\SimpleParallelSpaceModel.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Reads on line, skipping comments and empty lines.\n */\n", "func_signal": "protected String readLine(Reader in) throws IOException", "code": "{\n    char buf[] = new char[128];\n    int offset = 0;\n    int ch;\n    \n    boolean skip = false;\n\n    for (;;) {\n        ch = in.read();\n        \n        if (ch == -1){\n            break;\n        }\n        \n        if (ch == '\\n' || ch == '\\r') {\n            if (offset == 0 && !skip){\n                //skip empty line -> do nothing\n                skip = true;\n//                    System.out.println(\"skipping line: empty\");\n            }\n            \n            if (skip){\n                // next line reached -> stop skipping\n                skip = false;\n            }\n            else {\n                // line finished -> break and return\n                break;\n            }                             \n        }\n        else if(ch == '#' && offset == 0){\n            // skip this line\n            skip = true;\n//                System.out.println(\"skipping line: comment\");\n        }\n        else if (!skip){\n            if (offset == buf.length) {\n                char tmpbuf[] = buf;\n                buf = new char[tmpbuf.length * 2];\n                System.arraycopy(tmpbuf, 0, buf, 0, offset);\n            }\n            buf[offset++] = (char) ch;\n        }\n                    \n    }\n    \n    if ((offset == 0) || skip){ //eof\n        return null;\n    }\n    return String.copyValueOf(buf, 0, offset);\n}", "path": "src\\org\\mediavirus\\parvis\\file\\STFFile.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Sets up all internal variables for the given number of dimensions.\n * This must be done only once, usually in the constructor or by the first\n * addRecord(). After the first call the number of dimensions is fixed and\n * cannot be changed!\n *\n * @param num The number of dimensions.\n */\n", "func_signal": "protected void initNumDimensions(int num)", "code": "{\n    \n    if (numDimensions != 0){\n        throw new IllegalArgumentException(\"Number of Dimensions already set to \" + numDimensions + \"!\");\n    }\n    \n    numDimensions = num;\n    \n    axisLabels = new String[num];\n    valueLabels = new Hashtable[num];\n    \n    for (int i=0; i<num; i++){\n        axisLabels[i] = null;\n        valueLabels[i] = null;\n    }\n    \n}", "path": "src\\org\\mediavirus\\parvis\\model\\SimpleParallelSpaceModel.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Main method for testing purposes.\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n    try {\n        STFFile f = new STFFile(\"data/cars.stf\");\n    \n        f.readContents();\n    }\n    catch (MalformedURLException e){\n        System.out.println(\"malformed url!\");\n    }\n    catch (IOException ex){\n        System.out.println(\"IOException: \" + ex.getMessage());\n    }\n        \n}", "path": "src\\org\\mediavirus\\parvis\\file\\STFFile.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Reads the first data line of the file and sets up the number of dimensions.\n */\n", "func_signal": "protected void readFirstLine(Reader in) throws IOException", "code": "{\n    String line = readLine(in);\n    bytesRead += line.length();\n    \n    if (line.indexOf(' ') != -1)\n        tempNumDimensions = Integer.parseInt(line.substring(0,line.indexOf(' ')));\n    else \n        tempNumDimensions = Integer.parseInt(line);\n                \n    //System.out.println(\"num dimensions: \" + tempNumDimensions);\n    \n    isStringLabel = new boolean[tempNumDimensions];\n    for (int i=0; i<tempNumDimensions; i++){\n        isStringLabel[i] = false;\n    }\n}", "path": "src\\org\\mediavirus\\parvis\\file\\STFFile.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "//GEN-END:initComponents\n", "func_signal": "private void colButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_colButtonActionPerformed\n\n        Color current = bgColButton.getBackground();\n\n        if (evt.getSource() == recordColButton) { \n            current = recordColButton.getBackground();\n        }\n        else if (evt.getSource() == axisColButton) { \n            current = axisColButton.getBackground();\n        }\n        else if (evt.getSource() == brushColButton) { \n            current = brushColButton.getBackground();\n        } \n\n        // Bring up a color chooser \n        Color c = JColorChooser.showDialog(this, \"Choose Color\", current); \n\n        if (evt.getSource() == bgColButton) { \n            bgColButton.setBackground(c);\n            parent.setBackground(c);\n        }\n        else if (evt.getSource() == recordColButton) { \n            recordColButton.setBackground(c);\n            parent.setPreference(\"recordColor\", c);\n        }\n        else if (evt.getSource() == axisColButton) { \n            axisColButton.setBackground(c);\n            parent.setForeground(c);\n        }\n        else { \n            brushColButton.setBackground(c);\n            parent.setPreference(\"brushColor\", c);\n        } \n    }", "path": "src\\org\\mediavirus\\parvis\\gui\\PrefsFrame.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Returns the label for a single value in a specific dimension, if present.\n * \n * @param dimension The dimension.\n * @param value The value to look up a label for.\n *\n * @return A String with the label, null if no label is set.\n */\n", "func_signal": "public String getValueLabel(int dimension, float value)", "code": "{\n    if (valueLabels[dimension] != null){\n        return (String) (valueLabels[dimension].get(new Float(value)));\n    }\n    else {\n        return null;\n    }\n}", "path": "src\\org\\mediavirus\\parvis\\model\\SimpleParallelSpaceModel.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Returns the maximum value for the given dimension.\n *\n * @return Maximum value of all records for the given dimension.\n */\n", "func_signal": "public float getMaxValue(int dimension)", "code": "{\n    \n    float maxval = ((float[])values.firstElement())[dimension];\n    for (int i=0; i<values.size(); i++){\n        if (((float[])values.elementAt(i))[dimension] > maxval) maxval = ((float[])values.elementAt(i))[dimension];\n    }\n    \n    return maxval;\n        \n}", "path": "src\\org\\mediavirus\\parvis\\model\\SimpleParallelSpaceModel.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Returns the minimum value for the given dimension.\n *\n * @return Minimum value of all records for the given dimension.\n */\n", "func_signal": "public float getMinValue(int dimension)", "code": "{\n    \n    float minval = ((float[])values.firstElement())[dimension];\n    for (int i=0; i<values.size(); i++){\n        if (((float[])values.elementAt(i))[dimension] < minval) minval = ((float[])values.elementAt(i))[dimension];\n    }\n    \n    return minval;\n        \n}", "path": "src\\org\\mediavirus\\parvis\\model\\SimpleParallelSpaceModel.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Reads the contents of the file and exposes them vis the ParallelSpaceModel\n * interface of the class. String values are stripped out of the model and\n * set as record labels.\n */\n", "func_signal": "public void readContents() throws IOException", "code": "{\n    \n    fireProgressEvent(new ProgressEvent(this, ProgressEvent.PROGRESS_START, 0.0f, \"loading file\"));\n\n    File f = new File(fileName);\n    filesize = (int) f.length();\n//        System.out.println(\"filesize: \" + filesize);\n    \n    InputStreamReader in = new InputStreamReader(new FileInputStream(f));\n    \n    readFirstLine(in);\n    readHeaderLines(in);\n    readData(in);\n\n    fireProgressEvent(new ProgressEvent(this, ProgressEvent.PROGRESS_FINISH, 1.0f, \"loading file\"));\n\n}", "path": "src\\org\\mediavirus\\parvis\\file\\STFFile.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n", "func_signal": "private void initComponents()", "code": "{//GEN-BEGIN:initComponents\n    java.awt.GridBagConstraints gridBagConstraints;\n\n    histoWidthGroup = new javax.swing.ButtonGroup();\n    colorPanel = new javax.swing.JPanel();\n    label1 = new javax.swing.JLabel();\n    bgColButton = new javax.swing.JButton();\n    label2 = new javax.swing.JLabel();\n    recordColButton = new javax.swing.JButton();\n    label3 = new javax.swing.JLabel();\n    axisColButton = new javax.swing.JButton();\n    label31 = new javax.swing.JLabel();\n    brushColButton = new javax.swing.JButton();\n    histogramPanel = new javax.swing.JPanel();\n    label32 = new javax.swing.JLabel();\n    binsField = new javax.swing.JTextField();\n    label33 = new javax.swing.JLabel();\n    jPanel1 = new javax.swing.JPanel();\n    totalRadio = new javax.swing.JRadioButton();\n    binRadio = new javax.swing.JRadioButton();\n    brushedRadio = new javax.swing.JRadioButton();\n\n    getContentPane().setLayout(new java.awt.GridBagLayout());\n\n    addWindowListener(new java.awt.event.WindowAdapter() {\n        public void windowClosing(java.awt.event.WindowEvent evt) {\n            exitForm(evt);\n        }\n    });\n\n    colorPanel.setLayout(new java.awt.GridBagLayout());\n\n    colorPanel.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), \"Colors\"));\n    label1.setFont(new java.awt.Font(\"Dialog\", 0, 11));\n    label1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);\n    label1.setText(\"Background\");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 0;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n    gridBagConstraints.insets = new java.awt.Insets(4, 4, 2, 4);\n    colorPanel.add(label1, gridBagConstraints);\n\n    bgColButton.setBackground(new java.awt.Color(255, 255, 255));\n    bgColButton.setFont(new java.awt.Font(\"Dialog\", 1, 3));\n    bgColButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2));\n    bgColButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);\n    bgColButton.setMargin(new java.awt.Insets(0, 0, 0, 0));\n    bgColButton.setMaximumSize(new java.awt.Dimension(10, 10));\n    bgColButton.setMinimumSize(new java.awt.Dimension(10, 10));\n    bgColButton.setPreferredSize(new java.awt.Dimension(14, 14));\n    bgColButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            colButtonActionPerformed(evt);\n        }\n    });\n\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 1;\n    gridBagConstraints.gridy = 0;\n    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n    colorPanel.add(bgColButton, gridBagConstraints);\n\n    label2.setFont(new java.awt.Font(\"Dialog\", 0, 11));\n    label2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);\n    label2.setText(\"Records\");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 1;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n    gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);\n    colorPanel.add(label2, gridBagConstraints);\n\n    recordColButton.setBackground(new java.awt.Color(0, 0, 0));\n    recordColButton.setFont(new java.awt.Font(\"Dialog\", 1, 3));\n    recordColButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2));\n    recordColButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);\n    recordColButton.setMargin(new java.awt.Insets(0, 0, 0, 0));\n    recordColButton.setMaximumSize(new java.awt.Dimension(10, 10));\n    recordColButton.setMinimumSize(new java.awt.Dimension(10, 10));\n    recordColButton.setPreferredSize(new java.awt.Dimension(14, 14));\n    recordColButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            colButtonActionPerformed(evt);\n        }\n    });\n\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 1;\n    gridBagConstraints.gridy = 1;\n    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n    colorPanel.add(recordColButton, gridBagConstraints);\n\n    label3.setFont(new java.awt.Font(\"Dialog\", 0, 11));\n    label3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);\n    label3.setText(\"Axes & Labels\");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 2;\n    gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);\n    colorPanel.add(label3, gridBagConstraints);\n\n    axisColButton.setBackground(new java.awt.Color(0, 0, 0));\n    axisColButton.setFont(new java.awt.Font(\"Dialog\", 1, 3));\n    axisColButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2));\n    axisColButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);\n    axisColButton.setMargin(new java.awt.Insets(0, 0, 0, 0));\n    axisColButton.setMaximumSize(new java.awt.Dimension(10, 10));\n    axisColButton.setMinimumSize(new java.awt.Dimension(10, 10));\n    axisColButton.setPreferredSize(new java.awt.Dimension(14, 14));\n    axisColButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            colButtonActionPerformed(evt);\n        }\n    });\n\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 1;\n    gridBagConstraints.gridy = 2;\n    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n    colorPanel.add(axisColButton, gridBagConstraints);\n\n    label31.setFont(new java.awt.Font(\"Dialog\", 0, 11));\n    label31.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);\n    label31.setText(\"Default Brush\");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 3;\n    gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);\n    colorPanel.add(label31, gridBagConstraints);\n\n    brushColButton.setBackground(new java.awt.Color(0, 0, 0));\n    brushColButton.setFont(new java.awt.Font(\"Dialog\", 1, 3));\n    brushColButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2));\n    brushColButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);\n    brushColButton.setMargin(new java.awt.Insets(0, 0, 0, 0));\n    brushColButton.setMaximumSize(new java.awt.Dimension(10, 10));\n    brushColButton.setMinimumSize(new java.awt.Dimension(10, 10));\n    brushColButton.setPreferredSize(new java.awt.Dimension(14, 14));\n    brushColButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            colButtonActionPerformed(evt);\n        }\n    });\n\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 1;\n    gridBagConstraints.gridy = 3;\n    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);\n    colorPanel.add(brushColButton, gridBagConstraints);\n\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 0;\n    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n    getContentPane().add(colorPanel, gridBagConstraints);\n\n    histogramPanel.setLayout(new java.awt.GridBagLayout());\n\n    histogramPanel.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), \"Histogram\"));\n    label32.setFont(new java.awt.Font(\"Dialog\", 0, 11));\n    label32.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);\n    label32.setText(\"Bins: \");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 0;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);\n    histogramPanel.add(label32, gridBagConstraints);\n\n    binsField.setFont(new java.awt.Font(\"Dialog\", 0, 10));\n    binsField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);\n    binsField.setText(\"10\");\n    binsField.setPreferredSize(new java.awt.Dimension(36, 18));\n    binsField.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            binsFieldActionPerformed(evt);\n        }\n    });\n\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 1;\n    gridBagConstraints.gridy = 0;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n    histogramPanel.add(binsField, gridBagConstraints);\n\n    label33.setFont(new java.awt.Font(\"Dialog\", 0, 11));\n    label33.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);\n    label33.setText(\"Width: \");\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 1;\n    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;\n    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);\n    histogramPanel.add(label33, gridBagConstraints);\n\n    jPanel1.setLayout(new java.awt.GridLayout(3, 1));\n\n    totalRadio.setFont(new java.awt.Font(\"Dialog\", 0, 10));\n    totalRadio.setSelected(true);\n    totalRadio.setText(\"total # of records\");\n    histoWidthGroup.add(totalRadio);\n    totalRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));\n    totalRadio.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            binWidthActionPerformed(evt);\n        }\n    });\n\n    jPanel1.add(totalRadio);\n\n    binRadio.setFont(new java.awt.Font(\"Dialog\", 0, 10));\n    binRadio.setText(\"max # in bin\");\n    histoWidthGroup.add(binRadio);\n    binRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));\n    binRadio.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            binWidthActionPerformed(evt);\n        }\n    });\n\n    jPanel1.add(binRadio);\n\n    brushedRadio.setFont(new java.awt.Font(\"Dialog\", 0, 10));\n    brushedRadio.setText(\"max brushed in bin\");\n    histoWidthGroup.add(brushedRadio);\n    brushedRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));\n    brushedRadio.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            binWidthActionPerformed(evt);\n        }\n    });\n\n    jPanel1.add(brushedRadio);\n\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 1;\n    gridBagConstraints.gridy = 1;\n    histogramPanel.add(jPanel1, gridBagConstraints);\n\n    gridBagConstraints = new java.awt.GridBagConstraints();\n    gridBagConstraints.gridx = 1;\n    gridBagConstraints.gridy = 0;\n    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n    getContentPane().add(histogramPanel, gridBagConstraints);\n\n    pack();\n}", "path": "src\\org\\mediavirus\\parvis\\gui\\PrefsFrame.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Dispatches a ProgressEvent to all listeners.\n *\n * @param e The ProgressEvent to send.\n */\n", "func_signal": "protected void fireProgressEvent(ProgressEvent e)", "code": "{\n    Vector list = (Vector)progressListeners.clone();\n    for (int i=0; i<list.size(); i++){\n        ProgressListener l = (ProgressListener)list.elementAt(i);\n        l.processProgressEvent(e);\n    }\n}", "path": "src\\org\\mediavirus\\parvis\\file\\STFFile.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Adds a record. The record must have the same number of dimensions as the currently\n * stored records.\n *\n * @param values The float values of the record.\n * @param label A String label for the record.\n */\n", "func_signal": "public void addRecord(float values[], String label)", "code": "{\n    \n    if (numDimensions == 0){\n        initNumDimensions(values.length);\n    }\n    else if (values.length != numDimensions){\n        throw new IllegalArgumentException(\"Recordsets must have same number of dimensions (\" + numDimensions + \")\");\n    }\n       \n    this.values.addElement(values);\n    recordLabels.addElement(label);\n    \n}", "path": "src\\org\\mediavirus\\parvis\\model\\SimpleParallelSpaceModel.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "//GEN-LAST:event_binsFieldActionPerformed\n", "func_signal": "private void binWidthActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_binWidthActionPerformed\n        if (totalRadio.isSelected()) {\n            parent.setIntPreference(\"histogramWidth\", ParallelDisplay.HISTO_TOTALREC);\n        }\n        else if (binRadio.isSelected()) {\n            parent.setIntPreference(\"histogramWidth\", ParallelDisplay.HISTO_BINREC);\n        }\n        else if (brushedRadio.isSelected()) {\n            parent.setIntPreference(\"histogramWidth\", ParallelDisplay.HISTO_BRUSHREC);\n        }\n    }", "path": "src\\org\\mediavirus\\parvis\\gui\\PrefsFrame.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/** \n * Initializes the model with a given float[][] array of values.\n *\n * @param values A float[][] containing records (first index) with float values for each dimension (second index).<br>\n *               All records must have the same number of dimensions! \n */\n", "func_signal": "public SimpleParallelSpaceModel(float values[][])", "code": "{\n    int i;\n            \n    int len = values[0].length;\n    \n    for (i=0; i<values.length; i++){\n        if (values[i].length != len) {\n            throw new IllegalArgumentException(\"Recordsets must have same number of dimensions\");\n        }\n    }\n\n    for (i=0; i<values.length; i++){\n        this.values.addElement(values[i]);\n    }\n\n    initNumDimensions(len);\n}", "path": "src\\org\\mediavirus\\parvis\\model\\SimpleParallelSpaceModel.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/** Creates new form PrefsFrame */\n", "func_signal": "public PrefsFrame(ParallelDisplay parent)", "code": "{\n    this.parent = parent;\n    \n    initComponents();\n    \n    updatePrefs();\n}", "path": "src\\org\\mediavirus\\parvis\\gui\\PrefsFrame.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/** \n * Creates a new STFFile with the given url. The content is not read until\n * readContents() is called.\n *\n * @param url The url of the file to read.\n */\n", "func_signal": "public STFFile(String fname)", "code": "{\n\tfileName = fname;\n    name = fname.substring(name.lastIndexOf('/') + 1);\n}", "path": "src\\org\\mediavirus\\parvis\\file\\STFFile.java", "repo_name": "eagereyes/ParVis", "stars": 6, "license": "gpl-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Dummy constructor for initializing the basic includes and excludes object\n */\n", "func_signal": "protected BasicIncludesVisitor()", "code": "{\n\tsuper();\n\t\n\t// Class variables are initialized\n\tpathExpressions = new ArrayList<PathExpression>();\n}", "path": "src\\flexjson\\visitors\\BasicIncludesVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This method adds a string object to the JSON string.\n * \n * @param obj String object\n */\n", "func_signal": "protected void string(Object obj)", "code": "{\n\t// The object is transformed to a string value\n    String value = obj.toString();\n    // The string is enclosed in parantheses\n    add('\\\"');\n    int last = 0;\n    int len = value.length();\n    // For all the characters in the string\n    for(int i = 0; i < len; i++) {\n    \t\n    \t// Special characters are encoded\n    \t// (\", \\, whitespace and line change characters)\n    \t\n        char c = value.charAt(i);\n        if (c == '\"') {\n            last = add(value, last, i, \"\\\\\\\"\");\n        } else if (c == '\\\\') {\n            last = add(value, last, i, \"\\\\\\\\\");\n        } else if (c == '\\b') {\n            last = add(value, last, i, \"\\\\b\");\n        } else if (c == '\\f') {\n            last = add(value, last, i, \"\\\\f\");\n        } else if (c == '\\n') {\n            last = add(value, last, i, \"\\\\n\");\n        } else if (c == '\\r') {\n            last = add(value, last, i, \"\\\\r\");\n        } else if (c == '\\t') {\n            last = add(value, last, i, \"\\\\t\");\n        } else if (Character.isISOControl(c)) {\n        \t// Any other character is added to the JSON string (as a unicode encoded character)\n            last = add(value, last, i) + 1;\n            unicode(c);\n        }\n    }\n    // The last character is added to the string\n    if(last < value.length()) {\n        add(value, last, value.length());\n    }\n    \n    // The string is enclosed in parantheses\n    add('\\\"');\n}", "path": "src\\flexjson\\visitors\\ObjectVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This method adds an indent to the JSON string.\n * \n * @param c Character to add\n */\n", "func_signal": "protected void indent(int amount)", "code": "{\n\t// The indent is set\n    for(int i = 0; i < amount; i++) {\n        builder.append(\" \");\n    }\n}", "path": "src\\flexjson\\visitors\\ObjectVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This method starts the serialization of an object.\n * It is used for pretty print purposes.\n */\n", "func_signal": "protected void beginObject()", "code": "{\n\t// Pretty print\n    if(prettyPrint) {\n        if(insideArray) {\n            indent(amount);\n        }\n        amount += 4;\n    }\n    // The object start character is inserted\n    add('{');\n}\n\n/**\n * This method ends the serialization of an object.\n * It is used for pretty print purposes.\n */\nprotected void endObject() {\n\t// Pretty print\n    if(prettyPrint) {\n        addNewline();\n        amount -= 4;\n        indent(amount);\n    }\n    // The object end character is inserted\n    add('}');\n}", "path": "src\\flexjson\\visitors\\ObjectVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This method serializes the given object to its JSON string and saves this string.\n * \n * @param object Object to serialize\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n\tprotected void json(Object object)", "code": "{\n\t// The JSON string for the object is determined\n    if (object == null) {\n    \t// Null -> \"null\"\n    \tadd(\"null\");\n    } else if (object instanceof Class) {\n    \t// Class -> Classname (String)\n        string(((Class)object).getName());\n    } else if (object instanceof Boolean) {\n    \t// Boolean -> \"true\"/\"false\"\n        bool(((Boolean) object));\n    } else if (object instanceof Number) {\n    \t// Number -> String\n        add(object);\n    } else if (object instanceof String) {\n    \t// String -> String\n        string(object);\n    } else if (object instanceof Character) {\n    \t// Character -> String\n    \tstring(object);\n    } else if (object instanceof Map) {\n    \t// Map -> Further JSON mapping\n        map((Map)object);\n    } else if (object.getClass().isArray()) {\n    \t// Array -> Further JSON mapping\n        array(object);\n    } else if (object instanceof Iterable) {\n    \t// Iterator (array) -> Further JSON mapping\n        array(((Iterable) object).iterator());\n    } else if(object instanceof Date) {\n    \t// Date -> DateString\n        date((Date)object);\n    } else if(object instanceof Enum) {\n    \t// Enumerable -> Enum string\n        enumerate((Enum)object);\n    } else {\n    \t// Bean -> Further JSON mapping\n        bean(object);\n    }\n}", "path": "src\\flexjson\\visitors\\ObjectVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This constructor initializes the basic includes and excludes object using the given path expressions\n * \n * @param pathExpressions Path expressions\n */\n", "func_signal": "protected BasicIncludesVisitor(ArrayList<PathExpression> pathExpressions)", "code": "{\n\tsuper();\n\t\n\t// Class variables are set\n\tthis.pathExpressions = pathExpressions;\n}", "path": "src\\flexjson\\visitors\\BasicIncludesVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This method takes in a dot expression representing fields\n * to exclude when serialize method is called. You\n * can hand it one or more fields. Example are: \"password\",\n * \"bankaccounts.number\", \"people.socialsecurity\", or\n * \"people.medicalHistory\". In exclude method dot notations\n * will only exclude the final field (i.e. rightmost field).\n * All the fields to the left of the last field will be included.\n * In order to exclude the medicalHistory field we have to\n * include the people field since people would've been excluded\n * anyway since it's a Collection of Person objects. The order of\n * evaluation is the order in which you call the exclude method. \n * The first call to exclude will be evaluated before other calls to\n * include or exclude. The field expressions are evaluated in order\n * you pass to this method.\n *\n * @param fields One or more field expressions to exclude.\n */\n", "func_signal": "public void excludePath(String... fields)", "code": "{\n\tif (fields.length > 0) {\n\t\t// All the path expressions are excluded\n\t        for(String field : fields) {\n\t            addPathExclude(field);\n\t        }\n\t}\n}", "path": "src\\flexjson\\visitors\\BasicIncludesVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This method sets the fields included in serialization. These fields must be in dot notation. \n * This is just here so that JSONSerializer can be treated like a bean so it will\n * integrate with Spring or other frameworks.\n * @param fields The list of fields to be included for serialization.  The fields arg should be a\n * list of strings in dot notation.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n\tpublic void setPathIncludes(List fields)", "code": "{\n\t\t// All the path expressions are included\n    for (Object field : fields) {\n        pathExpressions.add(new PathExpression(field.toString(), true));\n    }\n}", "path": "src\\flexjson\\visitors\\BasicIncludesVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This method transforms an array (in iterator form) to its JSON string value.\n * \n * @param object Array object\n */\n", "func_signal": "protected void array(Object object)", "code": "{\n\t// The array serialization is started\n    beginArray();\n    int length = Array.getLength(object);\n    // For each element in the array\n    for (int i = 0; i < length; ++i) {\n    \t// The object is printed nicely (if this is preferred)\n        if (prettyPrint) {\n            addNewline();\n        }\n    \t// The element JSON string is added to the JSON string (possibly recursive)\n        addArrayElement(Array.get(object, i), i < length - 1);\n    }\n    // The array serialization is ended\n    endArray();\n}", "path": "src\\flexjson\\visitors\\ObjectVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This method takes in a dot expression representing fields to\n * include when serialize method is called. You can hand\n * it one or more fields. Examples are: \"hobbies\",\n * \"hobbies.people\", \"people.emails\", or \"character.inventory\".\n * When using dot notation each field between the dots will\n * be included in the serialization process. The order of\n * evaluation is the order in which you call the include method. \n * The first call to include will be evaluated before other calls to\n * include or exclude. The field expressions are evaluated in order\n * you pass to this method.\n *\n * @param fields One or more field expressions to include\n */\n", "func_signal": "public void includePath(String... fields)", "code": "{\n\tif (fields.length > 0) {\n\t\t// All the path expressions are included\n\t        for(String field : fields) {\n\t            pathExpressions.add(new PathExpression( field, true));\n\t        }\n\t}\n}", "path": "src\\flexjson\\visitors\\BasicIncludesVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This method returns the fields included in serialization. These fields will be in dot notation.\n *\n * @return A List of dot notation fields included in serialization.\n */\n", "func_signal": "public List<PathExpression> getPathIncludes()", "code": "{\n    List<PathExpression> expressions = new ArrayList<PathExpression>();\n    // For all the path expressions\n    for( PathExpression expression : pathExpressions ) {\n    \t// If the path is included, it is added to the includes list\n        if( expression.isIncluded()) {\n            expressions.add(expression);\n        }\n    }\n    return expressions;\n}", "path": "src\\flexjson\\visitors\\BasicIncludesVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This method starts the serialization of an array.\n * It is used for pretty print purposes.\n */\n", "func_signal": "protected void beginArray()", "code": "{\n\t// Pretty print\n    if(prettyPrint) {\n        amount += 4;\n        insideArray = true;\n    }\n    // The array start character is inserted\n    add('[');\n}", "path": "src\\flexjson\\visitors\\ObjectVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * Dummy constructor (initializing the objects)\n */\n", "func_signal": "protected ObjectVisitor()", "code": "{\n\t// Class variables are initialized\n    builder = new StringBuilder();\n    path = new Path();\n}", "path": "src\\flexjson\\visitors\\ObjectVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * Return the fields excluded from serialization. These fields will be in dot notation.\n *\n * @return A List of dot notation fields excluded from serialization.\n */\n", "func_signal": "public List<PathExpression> getPathExcludes()", "code": "{\n    List<PathExpression> excludes = new ArrayList<PathExpression>();\n    // For all the path expressions\n    for(PathExpression expression : pathExpressions) {\n    \t// If the path is included, it is added to the includes list\n        if( !expression.isIncluded() ) {\n            excludes.add(expression);\n        }\n    }\n    return excludes;\n}", "path": "src\\flexjson\\visitors\\BasicIncludesVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This method adds a path exclude to the path expression list.\n * \n * @param field The dot notation field to be excluded\n */\n", "func_signal": "private void addPathExclude(Object field)", "code": "{\n\t// First, the containing object is added to the path includes\n    String name = field.toString();\n    int index = name.lastIndexOf('.');\n    if (index > 0) {\n    \t// If there is at least one \".\" in the expression, a path include for the containing object is created\n        PathExpression expression = new PathExpression(name.substring(0, index), true);\n        if(!expression.isWildcard()) {\n        \t// If the include field is not a wildcard, a  is added to the expression list\n            pathExpressions.add(expression);\n        }\n    }\n    \n    // The original path expression is added to the path exclude list\n    pathExpressions.add(new PathExpression(name, false));\n}", "path": "src\\flexjson\\visitors\\BasicIncludesVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This method add a comma to the JSON string.\n * \n * @param firstField Flag indicating whether the currently active field is the first field before the operation\n * @return Flag indicating whether the currently active field is the first field after the operation\n */\n", "func_signal": "protected boolean addComma(boolean firstField)", "code": "{\n\t// The comma is inserted if the field is not the first field (otherwise, the firstField value is flipped)\n    if (!firstField) {\n        add(',');\n    } else {\n        firstField = false;\n    }\n    return firstField;\n}", "path": "src\\flexjson\\visitors\\ObjectVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This method adds a part of a string object to the current JSON string.\n * \n * @param value JSON string value\n * @param begin Index of the character to start with\n * @param end Index of the character to end with\n * @param append Additionally appended string value\n * @return Index of the character to end with\n */\n", "func_signal": "protected int add(String value, int begin, int end, String append)", "code": "{\n\t// The string and the appended string is added to the string builder\n    builder.append(value, begin, end);\n    builder.append(append);\n    // The new end index value is returned\n    return end + 1;\n}", "path": "src\\flexjson\\visitors\\ObjectVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This method transforms a map to its JSON string value.\n * \n * @param map Map object\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n\tprotected void map(Map map)", "code": "{\n\t// The object serialization is started\n    beginObject();\n    // An iterator is created from the map\n    Iterator it = map.keySet().iterator();\n    boolean firstField = true;\n    // For each element in the map\n    while (it.hasNext()) {\n    \t// The element is added to the JSON string\n        Object key = it.next();\n        int len = builder.length();\n        add(key, map.get(key), firstField);\n        if(len < builder.length()) {\n            firstField = false;\n        }\n    }\n    // The object serialization is ended\n    endObject();\n}", "path": "src\\flexjson\\visitors\\ObjectVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This method adds a unicode character to the JSON string.\n * \n * @param c Character to be encoded\n */\n", "func_signal": "protected void unicode(char c)", "code": "{\n\t// The character is unicode encoded and added to the JSON string\n    add(\"\\\\u\");\n    int n = c;\n    for (int i = 0; i < 4; ++i) {\n        int digit = (n & 0xf000) >> 12;\n        add(ObjectVisitor.HEX[digit]);\n        n <<= 4;\n    }\n}", "path": "src\\flexjson\\visitors\\ObjectVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * This method adds a JSON object value to the JSON string.\n * \n * @param key Key that is serialized to the JSON string\n * @param value Value that is serialized to the JSON string\n * @param prependComma Flag indicating whether a comma should be inserted before the object\n */\n", "func_signal": "protected void add(Object key, Object value, boolean prependComma)", "code": "{\n    int start = builder.length();\n    \n    // Comma and key are inserted into the JSON string\n    addComma(prependComma);\n    addAttribute(key);\n\n    int len = builder.length();\n    \n    // The value is inserted into the JSON string\n    json(value);\n    \n    // Erase the attribute key if we didn't output anything.\n    if(len == builder.length()) {\n        builder.delete(start, len);\n    }\n}", "path": "src\\flexjson\\visitors\\ObjectVisitor.java", "repo_name": "theone1984/FireP4j", "stars": 7, "license": "None", "language": "java", "size": 5236}
{"docstring": "/**\n * Returns a SystemProperty\n * \n * @param propName\n *            The Property to retrieve\n * @return The Property, or NULL if not found\n */\n", "func_signal": "public static String getSystemProperty(String propName)", "code": "{\n\tString line;\n\tBufferedReader input = null;\n        try\n        {\n        \tProcess p = Runtime.getRuntime().exec(\"getprop \" + propName);\n            input = new BufferedReader(new InputStreamReader(p.getInputStream()), 1024);\n            line = input.readLine();\n            input.close();\n        }\n        catch (IOException ex)\n        {\n        \tLog.e(TAG, \"Unable to read sysprop \" + propName, ex);\n        \treturn null;\n        }\n        finally\n        {\n        \tif(input != null)\n        \t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tinput.close();\n\t\t\t}\n\t\t\tcatch (IOException e)\n\t\t\t{\n\t\t\t\tLog.e(TAG, \"Exception while closing InputStream\", e);\n\t\t\t}\n        \t}\n        }\n        return line;\n}", "path": "src\\openeclairupdaterapp\\utils\\SysUtils.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "// enable all Featured Themes\n", "func_signal": "public boolean enableAllFeaturedThemes()", "code": "{\n\tContentValues newValue = new ContentValues();\n\tnewValue.put(KEY_THEMELIST_ENABLED, 1);\n\treturn db.update(DATABASE_TABLE_THEMELIST, newValue, KEY_THEMELIST_FEATURED + \"= ?\", new String[]{ \"1\" }) > 0;\n}", "path": "src\\openeclairupdaterapp\\database\\DbAdapter.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "/** Gets be called on the following structure:\n * <tag>characters</tag> */\n", "func_signal": "@Override\n\tpublic void characters(char ch[], int start, int length)", "code": "{\n\tString a = new String(ch, start, length);\n\ta = a.replaceAll(\"\\\\n\", \"\");\n\ta = a.replaceAll(\"\\\\r\", \"\");\n\ta = a.replaceAll(\"\\\\t\", \"\");\n\t// If the object is not initialized because of junk data in the xml like the xml starting tag and so\n\tif (currentVersion != null && currentVersion.ChangeLogText != null && a != \"\")\n\t\tcurrentVersion.ChangeLogText.add(a);\n}", "path": "src\\openeclairupdaterapp\\changelog\\ChangelogHandler.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "/** Gets be called on closing tags like:\n* </tag> */\n", "func_signal": "@Override\npublic void endElement(String namespaceURI, String localName, String qName) throws SAXException", "code": "{\n\tif (localName.equalsIgnoreCase(Constants.FEATURED_THEMES_TAG))\n\t{\n\t\tif(!error)\n\t\t\tfullThemeList.addThemeToList(currentTheme);\n\t\telse\n\t\t\tLog.e(TAG, \"There was an error in the XML File. A value was NULL\");\n\t\tcurrentTheme = null;\n\t}\n}", "path": "src\\openeclairupdaterapp\\featuredThemes\\FeaturedThemesHandler.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "// Insert a new Screenshot\n", "func_signal": "public long insertScreenshot(Screenshot _screenshot)", "code": "{\n\t\n\tContentValues newValues = new ContentValues();\n\tnewValues.put(KEY_SCREENSHOT_THEMELIST_ID, _screenshot.ForeignThemeListKey);\n\tnewValues.put(KEY_SCREENSHOT_URI, _screenshot.url.toString());\n\tnewValues.put(KEY_SCREENSHOT_MODIFYDATE, _screenshot.getModifyDate());\n\tnewValues.put(KEY_SCREENSHOT_SCREENSHOT, _screenshot.getPictureAsByteArray());\n\treturn db.insert(DATABASE_TABLE_SCREENSHOT, null, newValues);\n}", "path": "src\\openeclairupdaterapp\\database\\DbAdapter.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "/** Gets be called on opening tags like:\n * <tag>\n * Can provide attribute(s), when xml was like:\n * <tag attribute=\"attributeValue\">*/\n", "func_signal": "public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException", "code": "{\n     if (localName.equalsIgnoreCase(Constants.VERSION_TAG))\n     {\n    \t //New Version. Start a new Object\n    \t currentVersion = new Version();\n         currentVersion.Version = atts.getValue(Constants.VERSION_NAME_TAG);\n     }\n}", "path": "src\\openeclairupdaterapp\\changelog\\ChangelogHandler.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "//Checks if a Screenshot already exists. Cause the Primary Key is Stored in the Screenshot Object\n//The contains() Method will not work cause theres no Primary Key on Download\n//Will return a Screenshotobject with only the PrimaryKey if found, otherwise -1,the Modifydate and the blob\n", "func_signal": "public Screenshot ScreenshotExists(int ForeignKey, String Url) throws SQLException", "code": "{\n\tScreenshot retValue = new Screenshot();\n\tCursor cursor = db.query(true, DATABASE_TABLE_SCREENSHOT,\n\t\t\tnew String[]\n\t\t\t           {\n\t\t\t\t\t\tKEY_SCREENSHOT_ID,\n\t\t\t\t\t\tKEY_SCREENSHOT_THEMELIST_ID,\n\t\t\t\t\t\tKEY_SCREENSHOT_URI,\n\t\t\t\t\t\tKEY_SCREENSHOT_MODIFYDATE,\n\t\t\t\t\t\tKEY_SCREENSHOT_SCREENSHOT\n\t\t\t           }, KEY_SCREENSHOT_THEMELIST_ID + \"= ? AND \" +\n\t\t\t           KEY_SCREENSHOT_URI + \"= ?\",\n\t\t\t           new String[]{ Integer.toString(ForeignKey), Url }, null, null, null, null);\n\tif ((cursor.getCount() != 0) && cursor.moveToFirst())\n\t{\n\t\tretValue.PrimaryKey = cursor.getInt(COLUMN_SCREENSHOT_ID);\n\t\tretValue.ForeignThemeListKey = cursor.getInt(COLUMN_SCREENSHOT_THEMELIST_ID);\n\t\tretValue.url = URI.create(cursor.getString(COLUMN_SCREENSHOT_URI));\n\t\tretValue.setModifyDate(cursor.getString(COLUMN_SCREENSHOT_MODIFYDATE));\n\t\tretValue.setBitmapFromByteArray(cursor.getBlob(COLUMN_SCREENSHOT_SCREENSHOT));\n\t}\n\tcursor.close();\n\treturn retValue;\n}", "path": "src\\openeclairupdaterapp\\database\\DbAdapter.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "//Get single Screenshots by Id\n", "func_signal": "public Screenshot getScreenshotById(long _index) throws SQLException", "code": "{\n\tCursor cursor = db.query(true, DATABASE_TABLE_SCREENSHOT,\n\t\t\tnew String[]\n\t\t\t           {\n\t\t\t\t\t\tKEY_SCREENSHOT_ID,\n\t\t\t\t\t\tKEY_SCREENSHOT_THEMELIST_ID,\n\t\t\t\t\t\tKEY_SCREENSHOT_URI,\n\t\t\t\t\t\tKEY_SCREENSHOT_MODIFYDATE,\n\t\t\t\t\t\tKEY_SCREENSHOT_SCREENSHOT\n\t\t\t           }, KEY_SCREENSHOT_ID + \"= ?\", new String[]{ Long.toString(_index) }, null, null, null, null);\n\tif ((cursor.getCount() == 0) || !cursor.moveToFirst())\n\t{\n\t\tcursor.close();\n\t\tthrow new SQLException(\"No Screenshot found for Key: \" + _index);\n\t}\n\n\tScreenshot result = new Screenshot();\n\tresult.PrimaryKey = cursor.getInt(COLUMN_SCREENSHOT_ID);\n\tresult.ForeignThemeListKey = cursor.getInt(COLUMN_SCREENSHOT_THEMELIST_ID);\n\tresult.url = URI.create(cursor.getString(COLUMN_SCREENSHOT_URI));\n\tresult.setModifyDate(cursor.getString(COLUMN_SCREENSHOT_MODIFYDATE));\n\tresult.setBitmapFromByteArray(cursor.getBlob(COLUMN_SCREENSHOT_SCREENSHOT));\n\tcursor.close();\n\treturn result;\n}", "path": "src\\openeclairupdaterapp\\database\\DbAdapter.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "//Get all Screenshots for a Theme\n", "func_signal": "public List<Screenshot> getAllScreenshotsForTheme(long _themeIndex) throws SQLException", "code": "{\n\tCursor cursor = db.query(true, DATABASE_TABLE_SCREENSHOT,\n\t\t\tnew String[]\n\t\t\t           {\n\t\t\t\t\t\tKEY_SCREENSHOT_ID,\n\t\t\t\t\t\tKEY_SCREENSHOT_THEMELIST_ID,\n\t\t\t\t\t\tKEY_SCREENSHOT_URI,\n\t\t\t\t\t\tKEY_SCREENSHOT_MODIFYDATE,\n\t\t\t\t\t\tKEY_SCREENSHOT_SCREENSHOT\n\t\t\t           }, KEY_SCREENSHOT_THEMELIST_ID + \"= ?\", new String[]{ Long.toString(_themeIndex) }, null, null, null, null);\n\tif ((cursor.getCount() == 0) || !cursor.moveToFirst())\n\t{\n\t\tcursor.close();\n\t\treturn null;\n\t}\n\n\tList<Screenshot> result = new LinkedList<Screenshot>();\n\n\tcursor.moveToFirst();\n\tdo\n\t{\n\t\tScreenshot item = new Screenshot();\n\t\titem.PrimaryKey = cursor.getInt(COLUMN_SCREENSHOT_ID);\n\t\titem.ForeignThemeListKey = cursor.getInt(COLUMN_SCREENSHOT_THEMELIST_ID);\n\t\titem.url = URI.create(cursor.getString(COLUMN_SCREENSHOT_URI));\n\t\titem.setModifyDate(cursor.getString(COLUMN_SCREENSHOT_MODIFYDATE));\n\t\titem.setBitmapFromByteArray(cursor.getBlob(COLUMN_SCREENSHOT_SCREENSHOT));\n\t\tresult.add(item);\n\t} while (cursor.moveToNext());\n\tcursor.close();\n\treturn result;\n}", "path": "src\\openeclairupdaterapp\\database\\DbAdapter.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "/** Gets be called on opening tags like:\n* <tag>\n* Can provide attribute(s), when xml was like:\n* <tag attribute=\"attributeValue\">*/\n", "func_signal": "public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException", "code": "{\n\tif (localName.equalsIgnoreCase(Constants.FEATURED_THEMES_TAG))\n\t{\n\t\t//New Theme. Start a new Object\n\t\tcurrentTheme = new ThemeList();\n\t\tcurrentTheme.featured = true;\n\t\tcurrentTheme.enabled = true;\n\t\tif (atts.getValue(Constants.FEATURES_THEMES_TAG_NAME) == null)\n\t\t\terror = true;\n\t\telse\n\t\t\tcurrentTheme.name = atts.getValue(Constants.FEATURES_THEMES_TAG_NAME).trim();\n\t\tif (atts.getValue(Constants.FEATURES_THEMES_TAG_URI) == null)\n\t\t\terror = true;\n\t\telse\n\t\t\tcurrentTheme.url = URI.create(atts.getValue(Constants.FEATURES_THEMES_TAG_URI).trim());\n\t}\n}", "path": "src\\openeclairupdaterapp\\featuredThemes\\FeaturedThemesHandler.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "/**\n * Checks if there is enough Space on SDCard\n * \n * @param UpdateSize\n *            Size to Check\n * @return True if the Update will fit on SDCard, false if not enough space on SDCard\n * \t\tWill also return false, if the SDCard is not mounted as read/write\n */\n", "func_signal": "public static boolean EnoughSpaceOnSdCard(long UpdateSize)", "code": "{\n\tString status = Environment.getExternalStorageState();\n\tif (!status.equals(Environment.MEDIA_MOUNTED))\n\t\treturn false;\n\tFile path = Environment.getExternalStorageDirectory();\n        StatFs stat = new StatFs(path.getPath());\n        long blockSize = stat.getBlockSize();\n        long availableBlocks = stat.getAvailableBlocks();\n        return (UpdateSize < availableBlocks * blockSize);\n}", "path": "src\\openeclairupdaterapp\\utils\\SysUtils.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "// create a new ImageView for each item referenced by the Adapter\n", "func_signal": "public View getView(int position, View convertView, ViewGroup parent)", "code": "{\n\tboolean ImageLoaded = items.size() > position;\n\n    ImageView imageView = null;\n    if (convertView == null) // if it's not recycled, initialize some attributes\n    {\n\t            imageView = new ImageView(mContext);\n\t    \t\timageView.setLayoutParams(new GridView.LayoutParams(85, 85));\n\t    \t\timageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n\t    \t\timageView.setPadding(8, 8, 8, 8);\n    }\n    else\n    {\n    \timageView = (ImageView) convertView;\n    }\n\n    if (!ImageLoaded)\n    {\n    \timageView.setImageResource(Constants.SCREENSHOTS_LOADING_IMAGE);\n    }\n    else\n    {\n\t        try\n\t        {\n\t        \tBitmap temp = items.get(position).getBitmap();\n\t        \tif (!temp.isRecycled())\n\t        \t\timageView.setImageBitmap(temp);\n\t        \telse\n\t        \t\timageView.setImageResource(Constants.SCREENSHOTS_FALLBACK_IMAGE);\n\t        }\n\t        catch (InvalidPictureException ex)\n\t        {\n\t        \timageView.setImageResource(Constants.SCREENSHOTS_FALLBACK_IMAGE);\n\t        }\n    }\n    return imageView;\n}", "path": "src\\openeclairupdaterapp\\listadapters\\ScreenshotGridViewAdapter.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "// Disable all Themes\n", "func_signal": "public boolean disableAllThemes()", "code": "{\n\tContentValues newValue = new ContentValues();\n\tnewValue.put(KEY_THEMELIST_ENABLED, 0);\n\treturn db.update(DATABASE_TABLE_THEMELIST, newValue, null, null) > 0;\n}", "path": "src\\openeclairupdaterapp\\database\\DbAdapter.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "// Disable all Featured Themes\n", "func_signal": "public boolean disableAllFeaturedThemes()", "code": "{\n\tContentValues newValue = new ContentValues();\n\tnewValue.put(KEY_THEMELIST_ENABLED, 0);\n\treturn db.update(DATABASE_TABLE_THEMELIST, newValue, KEY_THEMELIST_FEATURED + \"= ?\", new String[]{ \"1\" }) > 0;\n}", "path": "src\\openeclairupdaterapp\\database\\DbAdapter.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "/**\n * Returns (if available) a human-readable string containing current mod version\n * \n * @return a human-readable string containing current mod version\n */\n", "func_signal": "public static String getModVersion()", "code": "{\n\tString modVer = getSystemProperty(Customization.SYS_PROP_MOD_VERSION);\n\t\n\treturn (modVer == null || modVer.length() == 0 ? \"Unknown\" : modVer);\n}", "path": "src\\openeclairupdaterapp\\utils\\SysUtils.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "/**\n * Converts a String array to an String, joined by the Seperator\n * \n * @param items\n *            The String Array to Join\n * @param seperator\n *            The Seperator used to join the String\n * @return The Joined String\n */\n", "func_signal": "public static String arrayToString(String[] items, String seperator)", "code": "{\n\tif ((items == null) || (items.length == 0))\n\t{\n\t\treturn \"\";\n\t}\n\telse\n\t{\n\t\tStringBuffer buffer = new StringBuffer(items[0]);\n\t\tfor (int i = 1; i < items.length; i++)\n\t\t{\n\t\t\tbuffer.append(seperator);\n\t\t\tbuffer.append(items[i]);\n\t\t}\n\t\treturn buffer.toString();\n\t}\n}", "path": "src\\openeclairupdaterapp\\utils\\StringUtils.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "// Remove all Screenshots for given Theme except the ones in the parameter\n", "func_signal": "public boolean removeScreenshotExcept(int ForeignKey, String[] primaryKeysNotToRemove)", "code": "{\n\tif (primaryKeysNotToRemove == null || primaryKeysNotToRemove.length == 0)\n\t\treturn false;\n\tString temp = StringUtils.arrayToString(primaryKeysNotToRemove, \",\");\n\treturn db.delete(DATABASE_TABLE_SCREENSHOT, KEY_SCREENSHOT_THEMELIST_ID + \"= ? AND \"\n\t\t\t+ KEY_SCREENSHOT_ID + \" not in (?)\", new String[]{ Integer.toString(ForeignKey), temp }) > 0;\n}", "path": "src\\openeclairupdaterapp\\database\\DbAdapter.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "// Enable all Themes\n", "func_signal": "public boolean enableAllThemes()", "code": "{\n\tContentValues newValue = new ContentValues();\n\tnewValue.put(KEY_THEMELIST_ENABLED, 1);\n\treturn db.update(DATABASE_TABLE_THEMELIST, newValue, null, null) > 0;\n}", "path": "src\\openeclairupdaterapp\\database\\DbAdapter.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "//Gets the AppChangelog in a Thread\n", "func_signal": "public void run()", "code": "{\n\tURL url;\n\tInputSource i;\n\n\tMessage m = MainActivity.ChangelogProgressHandler.obtainMessage();\n\ttry\n\t{\n\t\turl = new URL(p.getChangelogURL());\n\t\ti = new InputSource(url.openStream());\n        \tSAXParserFactory spf = SAXParserFactory.newInstance(); \n        \tSAXParser sp = spf.newSAXParser();\n        \tXMLReader xr = sp.getXMLReader(); \n        \tChangelogHandler ch = new ChangelogHandler(); \n        \txr.setContentHandler(ch); \n        \txr.parse(i);  \n        \tm.obj = ch.getParsedData();\n        }\n        catch (MalformedURLException e)\n\t{\n        \tm.obj = e.toString();\n\t\tLog.e(TAG, \"Malformed URL!\", e);\n\t}\n\tcatch (IOException e)\n\t{\n\t\tm.obj = e.toString();\n\t\tLog.e(TAG, \"Exception on opening Input Stream\", e);\n\t}\n\tcatch (ParserConfigurationException e)\n\t{\n\t\tm.obj = e.toString();\n\t\tLog.e(TAG, \"Exception on parsing XML File\", e);\n\t}\n\tcatch (SAXException e)\n\t{\n\t\tm.obj = e.toString();\n\t\tLog.e(TAG, \"Exception while creating SAXParser\", e);\n\t}\n\tMainActivity.ChangelogProgressHandler.sendMessage(m);\n}", "path": "src\\openeclairupdaterapp\\changelog\\Changelog.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "// Insert a new Theme\n", "func_signal": "public long insertTheme(ThemeList _theme)", "code": "{\n\tContentValues newValues = new ContentValues();\n\tnewValues.put(KEY_THEMELIST_NAME, _theme.name);\n\tnewValues.put(KEY_THEMELIST_URI, _theme.url.toString());\n\tif(_theme.enabled) newValues.put(KEY_THEMELIST_ENABLED, 1);\n\telse newValues.put(KEY_THEMELIST_ENABLED, 0);\n\tif(_theme.featured) newValues.put(KEY_THEMELIST_FEATURED, 1);\n\telse newValues.put(KEY_THEMELIST_FEATURED, 0);\n\treturn db.insert(DATABASE_TABLE_THEMELIST, null, newValues);\n}", "path": "src\\openeclairupdaterapp\\database\\DbAdapter.java", "repo_name": "openeclair/OEUpdater", "stars": 7, "license": "None", "language": "java", "size": 3821}
{"docstring": "/**\n * Loads the resource resourceName and returns a set of strings such that each line in the input resource becomes an entry of the set.\n * \n * @param resourceName\n * @return each line from the loaded resource becomes a string in the returned array\n * @throws IOException\n *             if the resource cannot be found\n */\n", "func_signal": "protected Set<String> getStrings(String resourceName) throws IOException", "code": "{\n    Set<String> strings=new HashSet<String>();\n    BufferedReader reader=new BufferedReader(new InputStreamReader(getClass().getResource(resourceName).openStream()));\n    try {\n        String line=reader.readLine();\n        while (line!=null) {\n            strings.add(line);\n            line=reader.readLine();\n        }\n    }\n    finally {\n        reader.close();\n    }\n    return strings;\n}", "path": "test\\org\\semanticweb\\HermiT\\reasoner\\AbstractReasonerTest.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/**\n * Tests whether the given individual is an instance of the given concept and asserts that this coincides with the expected result.\n * \n * @param concept\n * @param individual\n * @param expectedResult\n */\n", "func_signal": "protected void assertInstanceOf(OWLDescription concept,OWLIndividual individual,boolean expectedResult)", "code": "{\n    boolean result=m_reasoner.isInstanceOf(concept,individual);\n    assertEquals(expectedResult,result);\n}", "path": "test\\org\\semanticweb\\HermiT\\reasoner\\AbstractReasonerTest.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/**\n * Tests whether the atomic concept subAtomicConcept is subsumed by the atomic concept superAtomicConcept and asserts that this coincides with the expected result.\n * \n * @param subAtomicConcept\n *            a string that represents an atomic concept. If no namespace is given, file:/c/test.owl# is used as prefix\n * @param superAtomicConcept\n *            a string that represents an atomic concept. If no namespace is given, file:/c/test.owl# is used as prefix\n * @param expectedResult\n */\n", "func_signal": "protected void assertSubsumedBy(String subAtomicConcept,String superAtomicConcept,boolean expectedResult)", "code": "{\n    if (!subAtomicConcept.contains(\"#\"))\n        subAtomicConcept=\"file:/c/test.owl#\"+subAtomicConcept;\n    if (!superAtomicConcept.contains(\"#\"))\n        superAtomicConcept=\"file:/c/test.owl#\"+superAtomicConcept;\n    boolean result=m_reasoner.isClassSubsumedBy(subAtomicConcept,superAtomicConcept);\n    assertEquals(expectedResult,result);\n}", "path": "test\\org\\semanticweb\\HermiT\\reasoner\\AbstractReasonerTest.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/**\n * Tests whether the atomic concept atomicConcept is satisfiable and asserts that this coincides with the expected result (satisfiable).\n * \n * @param atomicConcept\n *            a string that represents an atomic concept. If no namespace is given, file:/c/test.owl# is used as prefix\n * @param satisfiable\n */\n", "func_signal": "protected void assertSatisfiable(String atomicConcept,boolean satisfiable)", "code": "{\n    if (!atomicConcept.contains(\"#\"))\n        atomicConcept=\"file:/c/test.owl#\"+atomicConcept;\n    assertEquals(satisfiable,m_reasoner.isClassSatisfiable(atomicConcept));\n}", "path": "test\\org\\semanticweb\\HermiT\\reasoner\\AbstractReasonerTest.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/**\n * Loads the resource resourceName and returns its content as a string.\n * \n * @param resourceName\n * @return the content of the loaded resource as one string\n * @throws IOException\n *             if the resource cannot be found\n */\n", "func_signal": "protected String getResourceText(String resourceName) throws IOException", "code": "{\n    CharArrayWriter buffer=new CharArrayWriter();\n    PrintWriter output=new PrintWriter(buffer);\n    BufferedReader reader=new BufferedReader(new InputStreamReader(getClass().getResource(resourceName).openStream()));\n    try {\n        String line=reader.readLine();\n        while (line!=null) {\n            output.println(line);\n            line=reader.readLine();\n        }\n    }\n    finally {\n        reader.close();\n    }\n    output.flush();\n    return buffer.toString();\n}", "path": "test\\org\\semanticweb\\HermiT\\reasoner\\AbstractReasonerTest.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/**\n * Create a restriction for an unknown datatypes that can be interpreted as anything. \n * @param datatype should be DT.UNKNOWN\n */\n", "func_signal": "public DatatypeRestrictionUnknown(DT datatype)", "code": "{\n    this.datatype = datatype;\n    this.supportedFacets = new HashSet<Facet>();\n}", "path": "src\\org\\semanticweb\\HermiT\\datatypes\\DatatypeRestrictionUnknown.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/* (non-Javadoc)\n * @see org.semanticweb.HermiT.model.dataranges.CanonicalDataRange#accepts(org.semanticweb.HermiT.model.dataranges.DataConstant)\n */\n", "func_signal": "public boolean accepts(DataConstant constant)", "code": "{\n    if (!oneOf.isEmpty()) {\n        return oneOf.contains(constant);\n    }\n    return true; \n}", "path": "src\\org\\semanticweb\\HermiT\\datatypes\\DatatypeRestrictionUnknown.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/* (non-Javadoc)\n * @see org.semanticweb.HermiT.model.dataranges.DataRange#addFacet(org.semanticweb.HermiT.model.dataranges.DatatypeRestriction.Facets, java.lang.String)\n */\n", "func_signal": "public void addFacet(Facet facet, String value)", "code": "{\n    throw new IllegalArgumentException(\"Facets are not supported for \" +\n                    \"unknown datatypes.\");\n}", "path": "src\\org\\semanticweb\\HermiT\\datatypes\\DatatypeRestrictionUnknown.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/**\n * Tests containment. \n * @param decimal a decimal\n * @return true if the interval contains this decimal and false otherwise. \n */\n", "func_signal": "public boolean contains(BigDecimal decimal)", "code": "{\n    boolean contains = true;\n    if (min != null) {\n        contains = contains \n                && (min.compareTo(decimal) <= 0 \n                && (!openMin || min.compareTo(decimal) != 0));\n    }\n    if (max != null) {\n        contains = contains \n                && (max.compareTo(decimal) >= 0 \n                && (!openMin || max.compareTo(decimal) != 0));\n    }\n    return contains;\n}", "path": "src\\org\\semanticweb\\HermiT\\datatypes\\DecimalInterval.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/* (non-Javadoc)\n * @see org.semanticweb.HermiT.model.dataranges.CanonicalDataRange#getEnumerationSize()\n */\n", "func_signal": "public BigInteger getEnumerationSize()", "code": "{ \n    if (!oneOf.isEmpty()) {\n        return new BigInteger(\"\" + oneOf.size());\n    }\n    return null;\n}", "path": "src\\org\\semanticweb\\HermiT\\datatypes\\DatatypeRestrictionUnknown.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/**\n * Prints a text representation for the description graph given as an argument. \n */\n", "func_signal": "public void execute()", "code": "{\n    if (args.length<2) {\n        debugger.getOutput().println(\"Graph name is missing.\");\n        return;\n    }\n    String graphName=args[1];\n    for (DescriptionGraph descriptionGraph : debugger.getTableau().getDLOntology().getAllDescriptionGraphs())\n        if (descriptionGraph.getName().equals(graphName)) {\n            CharArrayWriter buffer=new CharArrayWriter();\n            PrintWriter writer=new PrintWriter(buffer);\n            writer.println(\"===========================================\");\n            writer.println(\"    Contents of the graph '\"+graphName+\"'\");\n            writer.println(\"===========================================\");\n            writer.println(descriptionGraph.getTextRepresentation());\n            writer.flush();\n            showTextInWindow(buffer.toString(),\"Contents of the graph '\"+graphName+\"'\");\n            selectConsoleWindow();\n            return;\n        }\n    debugger.getOutput().println(\"Graph '\"+graphName+\"' not found.\");\n}", "path": "src\\org\\semanticweb\\HermiT\\debugger\\commands\\ShowDescriptionGraphCommand.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/**\n * Loads the ontology from ontologyResource and the string in controlResource and compares the computed taxonomy for the ontology with the one in the controlResource by comparing the sorted ancestor list.\n * \n * @param ontologyResource\n *            the ontology\n * @param controlResource\n *            the expected taxonomy (sorted ancestor list)\n * @throws URISyntaxException\n *             if the resources cannot be converted to URIs\n * @throws OWLException\n *             if the ontology is invalid\n * @throws LoadingException\n *             if an error occurs during loading\n * @throws IllegalArgumentException\n *             in case of illegal arguments\n * @throws IOException\n *             if the controlString cannot be loaded\n */\n", "func_signal": "protected void assertSubsumptionHierarchy(String controlResource) throws Exception", "code": "{\n    String taxonomy=getSubsumptionHierarchyAsText();\n    String controlString=getResourceText(controlResource);\n    assertEquals(taxonomy,controlString);\n}", "path": "test\\org\\semanticweb\\HermiT\\reasoner\\AbstractReasonerTest.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/**\n * Returns a string with a sorted ancestor list that represents the taxonomy of the ontology that is currently loaded in the reasoner.\n * \n * @return the taxonomy\n */\n", "func_signal": "protected String getSubsumptionHierarchyAsText()", "code": "{\n    Map<String,HierarchyPosition<String>> taxonomy=m_reasoner.getClassHierarchy();\n    CharArrayWriter buffer=new CharArrayWriter();\n    PrintWriter output=new PrintWriter(buffer);\n    Reasoner.printSortedAncestorLists(output,taxonomy);\n    return buffer.toString();\n}", "path": "test\\org\\semanticweb\\HermiT\\reasoner\\AbstractReasonerTest.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "public String toString()", "code": "{\n    StringBuffer buffer = new StringBuffer();\n    if (min != null) {\n        buffer.append((isOpenMin() ? \"> \" : \">= \") + min);\n    }\n    if (max != null) {\n        if (min != null) buffer.append(\" \");\n        buffer.append((isOpenMax() ? \"< \" : \"<= \") + max);\n    }\n    return buffer.toString();\n}", "path": "src\\org\\semanticweb\\HermiT\\datatypes\\DecimalInterval.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/**\n * Creates a decimal interval. \n * @param min the lower bound\n * @param max the upper bound\n * @param openMin if true then the interval excludes the lower bound \n *                otherwise it includes the lower bound\n * @param openMax if true then the interval excludes the upper bound \n *                otherwise it includes the upper bound\n */\n", "func_signal": "public DecimalInterval(BigDecimal min, BigDecimal max, \n        boolean openMin, boolean openMax)", "code": "{\n    this.min = min;\n    this.max = max;\n    this.openMin = openMin;\n    this.openMax = openMax;\n}", "path": "src\\org\\semanticweb\\HermiT\\datatypes\\DecimalInterval.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/* (non-Javadoc)\n * @see org.semanticweb.HermiT.model.dataranges.CanonicalDataRange#getSmallestAssignment()\n */\n", "func_signal": "public DataConstant getSmallestAssignment()", "code": "{ \n    if (!oneOf.isEmpty()) {\n        SortedSet<DataConstant> sortedOneOfs = new TreeSet<DataConstant>(oneOf);\n        return sortedOneOfs.first();\n    }\n    return null;\n}", "path": "src\\org\\semanticweb\\HermiT\\datatypes\\DatatypeRestrictionUnknown.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/**\n * Tests whether the possibly complex concept subConcept is subsumed by the possibly complex concept superConcept and asserts that this coincides with the expected result.\n * \n * @param subConcept\n * @param superConcept\n * @param expectedResult\n */\n", "func_signal": "protected void assertSubsumedBy(OWLDescription subConcept,OWLDescription superConcept,boolean expectedResult)", "code": "{\n    boolean result=m_reasoner.isClassSubsumedBy(subConcept,superConcept);\n    assertEquals(expectedResult,result);\n}", "path": "test\\org\\semanticweb\\HermiT\\reasoner\\AbstractReasonerTest.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/* (non-Javadoc)\n * @see org.semanticweb.HermiT.model.dataranges.CanonicalDataRange#hasMinCardinality(java.math.BigInteger)\n */\n", "func_signal": "public boolean hasMinCardinality(BigInteger n)", "code": "{\n    if (!oneOf.isEmpty()) {\n        return (new BigInteger(\"\" + oneOf.size()).compareTo(n) >= 0);\n    }\n    return true;\n}", "path": "src\\org\\semanticweb\\HermiT\\datatypes\\DatatypeRestrictionUnknown.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/**\n * Intersect with the given interval. After the intersection, this interval \n * will have min and max values that are those of the intersection and the \n * open/closed values are adapted accordingly. \n * @param i an interval\n */\n", "func_signal": "public void intersectWith(DecimalInterval i)", "code": "{\n    if (max == null) {\n        max = i.getMax();\n        openMax = i.isOpenMax();\n    } else {\n        if (i.getMax() != null) {\n            // both not null\n            if (i.getMax().compareTo(max) == 0 && !i.isOpenMax()) {\n                openMax = false;\n            } else if (i.getMax().compareTo(max) < 0) {\n                max = i.getMax();\n                openMax = i.isOpenMax();\n            }\n        }\n    }\n    if (min == null) {\n        min = i.getMin();\n        openMin = i.isOpenMin();\n    } else {\n        if (i.getMin() != null) {\n            // both not null\n            if (i.getMin().compareTo(min) == 0 && !i.isOpenMin()) {\n                openMin = false;\n            } else if (i.getMin().compareTo(min) > 0) {\n                min = i.getMin();\n                openMin = i.isOpenMin();\n            }\n        }\n    }\n}", "path": "src\\org\\semanticweb\\HermiT\\datatypes\\DecimalInterval.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/**\n * creates and loads an ontology that contains the given axioms\n * \n * @param configuration\n *            a configuration for the reasoner instance\n * @param axioms\n *            in functional style syntax\n * @param keys\n *            a set of key axioms (till the OWL API supports them)\n * @throws OWLOntologyCreationException\n *             if the ontology could not be created\n */\n", "func_signal": "protected void loadOntologyWithAxiomsAndKeys(Configuration configuration,String axioms,Set<OWLHasKeyDummy> keys) throws OWLOntologyCreationException", "code": "{\n    StringBuffer buffer=new StringBuffer();\n    buffer.append(\"Namespace(=<file:/c/test.owl#>)\");\n    buffer.append(\"Namespace(rdfs=<http://www.w3.org/2000/01/rdf-schema#>)\");\n    buffer.append(\"Namespace(owl2xml=<http://www.w3.org/2006/12/owl2-xml#>)\");\n    buffer.append(\"Namespace(test=<file:/c/test.owl#>)\");\n    buffer.append(\"Namespace(owl=<http://www.w3.org/2002/07/owl#>)\");\n    buffer.append(\"Namespace(xsd=<http://www.w3.org/2001/XMLSchema#>)\");\n    buffer.append(\"Namespace(rdf=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)\");\n    buffer.append(\"Ontology(<file:/c/test.owl>\");\n    buffer.append(axioms);\n    buffer.append(\")\");\n    OWLOntologyInputSource input=new StringInputSource(buffer.toString());\n    m_ontology=m_ontologyManager.loadOntology(input);\n    m_reasoner=new Reasoner(configuration,m_ontologyManager,m_ontology,null,keys);\n}", "path": "test\\org\\semanticweb\\HermiT\\reasoner\\AbstractReasonerTest.java", "repo_name": "rvcx/hermit", "stars": 6, "license": "None", "language": "java", "size": 3920}
{"docstring": "/**\n * Get a written description of recorded events. Note that the return string\n * will have many new line chars.\n * \n * @return a long string description\n */\n", "func_signal": "public String toDescription()", "code": "{\n    String d = new String();\n    d += testEvents.size() + \" test events:\\n\";\n    for (TestEvent e : testEvents) {\n        d += e.property \n          + \" runs=\" + e.times \n          + \" seed=\" + e.randomSeed + \"\\n\";\n    }\n    return d;\n}", "path": "src\\tbc\\supercheck\\Recording.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/**\n * Creates an arbitrary array, whose contents are arbitrary objects. There\n * is a 10% chance that a zero-length array will be returned. Otherwise,\n * the array with have a length between 1 and 10, inclusive. The arbitraryT\n * type must implement an arbitrary() method.\n * <p>\n * An example, where Point2D also implements arbitrary():\n * <pre>public static PointSet arbitrary(Gen gen) {\n *     return new PointSet.fromArray(arbArray(Point2D.class))\n * }</pre>\n * \n * Be careful of circular dependency. If an arbitrary() definition in class\n * A calls this method, passing class A, then infinite recursion will occur.\n * \n * @return an arbitrary object array\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic <A> A[] arbArray(Class<A> arbitraryT)", "code": "{\n    switch (select(0.1f, 0.9f)) {\n    case 0:\n        return (A[]) Array.newInstance(arbitraryT, 0);\n    case 1: default:\n    \tint maxLength = getParams().getInt(PARAM_MAX_ARRAY_LENGTH,\n    \t\t\t                           MAX_ARRAY_LENGTH_DEFAULT);\n        A[] ary = (A[]) Array.newInstance(arbitraryT, choose(1, maxLength));\n        for (int idx=0; idx<ary.length; idx++) {\n            ary[idx] = (A) createArbitraryFor(arbitraryT);\n        }\n        return ary;\n    }\n}", "path": "src\\tbc\\supercheck\\Gen.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/**\n * Answers an arbitrary short. Like with {@link #arbInt()}, the values \n * MAX_VALUE, MIN_VALUE, 0, -1 and 1 have a hightened chance of selection.\n * \n * @return an arbitrary short\n */\n", "func_signal": "public short arbShort()", "code": "{\n    switch (select(0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.75f)) {\n    case 0:\n        return 0;\n    case 1:\n        return Short.MAX_VALUE;\n    case 2:\n        return Short.MIN_VALUE;\n    case 3:\n        return -1;\n    case 4:\n        return 1;\n    case 5: default:\n        return (short) random.nextInt();\n    }\n}", "path": "src\\tbc\\supercheck\\Gen.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/** \n * Answers a random value from `from` to `to`, inclusive both  sides. Each \n * integer in the range has an equal chance of being chosen.\n * <p>\n * An example:\n * <pre>switch (choose(1, 4)) {\n *     case 1:\n *         return new Square.createWithin(Circle.arbitrary());\n *     case 2:\n *         return new Circle(gen.arbInt(), gen.arbInt(), gen.arbInt());\n *     case 3:\n *         return new Triangle.createWithin(Circle.arbitrary());\n *     case 4: default:\n *         return new Line(gen.arbInt(), gen.arbInt());\n * }</pre>\n * \n * @return an int in the range [from, to]\n */\n", "func_signal": "public int choose(int from, int to)", "code": "{\n    if (from == to) return from;\n    \n    return random.nextInt(to - from + 1) + from;\n}", "path": "src\\tbc\\supercheck\\Gen.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/**\n * Run arbitrary data through all the properties defined in a single class.\n * Any method in the class \"invariants\" whose simple name begins with the\n * prefix \"prop_\" will be considered as a test property, and will be executed\n * with arbitrary data, \"timesForEach\" times.\n */\n", "func_signal": "public void runOn(Class<?> invariants, int timesForEach) throws TestException", "code": "{\n    for (Method m : invariants.getMethods()) {\n        if (m.getName().startsWith(\"prop_\")) {\n            runOn(m, timesForEach);\n        }\n    }\n}", "path": "src\\tbc\\supercheck\\TestRun.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/**\n * Answers a float within the integer range [from, to]. In this example a \n * loose quad tree is created with a k value (real number) somewhere between \n * 1 and 3:\n * \n * <pre>LooseQuadTree.createWithK(within(1, 3))</pre>\n * \n * The integer boundary values have a 20% probability of being returned.\n * \n * @return a float within the range [from, to]\n */\n", "func_signal": "public float within(int from, int to)", "code": "{\n    if (from == to) return from;\n    \n    switch (select(0.1f, 0.1f, 0.8f)) {\n    case 0:\n        return from;\n    case 1:\n        return to;\n    case 2: default:\n        return random.nextFloat() + choose(from, to - 1);\n    }\n}", "path": "src\\tbc\\supercheck\\Gen.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/**\n * Answers an arbitrary string, with an inflated probability of returning\n * an empty string. Generated strings have a maximum length of 1024 characters.\n * Characters within the string will all be on the latin-1 page.\n * \n * @return an arbitrary string\n */\n", "func_signal": "public String arbString()", "code": "{\n    switch (select(0.2f, 0.8f)) {\n    case 0:\n        return \"\";\n    case 1: default:\n    \tint maxLength = getParams().getInt(PARAM_MAX_STR_LENGTH,\n    \t\t\t                           MAX_STR_LENGTH_DEFAULT);\n        char[] cs = new char[choose(1, maxLength)];\n        for (int idx=0; idx<cs.length; idx++) {\n            cs[idx] = (char) random.nextInt(256); // inline of arbChar()\n        }\n        return new String(cs);\n    }\n}", "path": "src\\tbc\\supercheck\\Gen.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/**\n * Answers an arbitrary byte.  Like with {@link #arbInt()}, the values \n * MAX_VALUE, MIN_VALUE, 0, -1 and 1 have a hightened chance of selection.\n * \n * @return an arbitrary byte\n */\n", "func_signal": "public byte arbByte()", "code": "{\n    switch (select(0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.75f)) {\n    case 0:\n        return 0;\n    case 1:\n        return Byte.MAX_VALUE;\n    case 2:\n        return Byte.MIN_VALUE;\n    case 3:\n        return -1;\n    case 4:\n        return 1;\n    case 5: default:\n        return (byte) random.nextInt();\n    }\n}", "path": "src\\tbc\\supercheck\\Gen.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/**\n * Set to true to continue to test a property after it has failed for\n * some data. E.g.:\n * \n * <pre>new TestRun().setContProp(true).runOn(SomeInvariants.class, 1000);</pre>\n */\n", "func_signal": "public TestRun setContProp(boolean b)", "code": "{\n    continuePropAfterFail = b;\n    return this;\n}", "path": "src\\tbc\\supercheck\\TestRun.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/** \n * Answers an arbitrary float. Like with {@link #arbInt()}, the  values NaN, \n * POSITIVE_INFINITY, NEGATIVE_INFINITY, MAX_VALUE, MIN_VALUE and 0.0f (though \n * not -1 and 1) have a hightened chance of selection.\n * \n * @return an arbitrary float\n */\n", "func_signal": "public float arbNastyFloat()", "code": "{\n    switch (select(0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.7f)) {\n    case 0:\n        return Float.NaN;\n    case 1:\n        return Float.POSITIVE_INFINITY;\n    case 2:\n        return Float.NEGATIVE_INFINITY;\n    case 3:\n        return Float.MAX_VALUE;\n    case 4:\n        return Float.MIN_VALUE;\n    case 5:\n        return 0.0f;\n    case 6: default:\n        return random.nextFloat() + random.nextInt();\n    }\n}", "path": "src\\tbc\\supercheck\\Gen.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/** \n * Answers an arbitrary double, but never NaN, POSITIVE_INFINITY or \n * NEGATIVE_INFINITY.\n * \n * @return an arbitrary double\n */\n", "func_signal": "public double arbDouble()", "code": "{\n    switch (select(0.05f, 0.05f, 0.05f, 0.85f)) {\n    case 0:\n        return Double.MAX_VALUE;\n    case 1:\n        return Double.MIN_VALUE;\n    case 2:\n        return 0.0d;\n    case 3: default:\n        return random.nextDouble() + random.nextInt();\n    }\n}", "path": "src\\tbc\\supercheck\\Gen.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/**\n * Set to true to make TestRun print out details of successful property \n * tests, not just those that fail. E.g.:\n * \n * <pre>new TestRun().setVerbose(true).runOn(SomeInvariants.class, 1000);</pre>\n */\n", "func_signal": "public TestRun setVerbose(boolean b)", "code": "{\n    printSuccessRuns = b;\n    return this;\n}", "path": "src\\tbc\\supercheck\\TestRun.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/** \n * Answers an index into the probability array. The index is selected \n * randomly, where the random selection takes the probability schematic \n * provided by the probability array. Probabilities will be normalised \n * if they do not sum to 1.0f.\n * <p>\n * An example:\n * <pre>switch (select(0.05, 0.95)) {\n *     case 0: // 0.05\n *         return MyObject.SPECIAL_VALUE_NOT_OFTEN_ENCOUNTERED;\n *     case 1: default: // 0.95\n *         return new MyObject(...bunch of random data...);\n * }</pre>\n * \n * @return an index of the probabilities array\n */\n", "func_signal": "public int select(float... probabilities)", "code": "{\n    probabilities = probabilities.clone(); // avoid modifying input\n    \n    float sum = 0.0f;\n    for (float f : probabilities) {\n        sum += f;\n    }\n    \n    if (sum != 1.0f) {\n        for (int idx = 0; idx < probabilities.length; idx++) {\n            probabilities[idx] = probabilities[idx] / sum;\n        }\n    }\n    \n    float ran = random.nextFloat(), totalThusFar = 0.0f;\n    for (int idx=0; idx<probabilities.length; idx++) {\n        totalThusFar += probabilities[idx];\n        if (ran <= totalThusFar) {\n            return idx;\n        }\n    }\n    return probabilities.length - 1; // because our normalisation\n                                     // may suffer rounding errors\n}", "path": "src\\tbc\\supercheck\\Gen.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/** \n * Answers an arbitrary double. Like with {@link #arbInt()}, the  values \n * NaN, POSITIVE_INFINITY, NEGATIVE_INFINITY, MAX_VALUE, MIN_VALUE and 0.0d \n * (though not -1 and 1) have a hightened chance of selection.\n * \n * @return an arbitrary double\n */\n", "func_signal": "public double arbNastyDouble()", "code": "{\n    switch (select(0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.7f)) {\n    case 0:\n        return Double.NaN;\n    case 1:\n        return Double.POSITIVE_INFINITY;\n    case 2:\n        return Double.NEGATIVE_INFINITY;\n    case 3:\n        return Double.MAX_VALUE;\n    case 4:\n        return Double.MIN_VALUE;\n    case 5:\n        return 0.0d;\n    case 6: default:\n        return random.nextDouble() + random.nextInt();\n    }\n}", "path": "src\\tbc\\supercheck\\Gen.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/** \n * Answers an arbitrary integer, with an inflated probability of returing \n * the values MAX_VALUE, MIN_VALUE, 0, -1 and 1. That is, the probability of \n * receiving these values is higher than with a call to Random.nextInt(), but \n * is still low in comparison to the probability of receiving an integer that \n * is not of these values. This is intended to improve the testing of corner \n * cases.\n * \n * @return an arbitrary int\n */\n", "func_signal": "public int arbInt()", "code": "{\n    switch (select(0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.75f)) {\n    case 0:\n        return 0;\n    case 1:\n        return Integer.MAX_VALUE;\n    case 2:\n        return Integer.MIN_VALUE;\n    case 3:\n        return -1;\n    case 4:\n        return 1;\n    case 5: default:\n        return random.nextInt();\n    }\n}", "path": "src\\tbc\\supercheck\\Gen.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/** \n * Answers an arbitrary long. Like with {@link #arbInt()}, the values \n * MAX_VALUE, MIN_VALUE, 0, -1 and 1 have a hightened chance of selection.\n * \n * @return an arbitrary long\n */\n", "func_signal": "public long arbLong()", "code": "{\n    switch (select(0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.75f)) {\n    case 0:\n        return 0l;\n    case 1:\n        return Long.MAX_VALUE;\n    case 2:\n        return Long.MIN_VALUE;\n    case 3:\n        return -1l;\n    case 4:\n        return 1l;\n    case 5: default:\n        return random.nextLong();\n    }\n}", "path": "src\\tbc\\supercheck\\Gen.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/**\n * Run arbitrary data through a particular property. The property name\n * specified should be the full simple name of the method that represents \n * the property (including the \"prop_\" prefix). For example:\n * \n * <pre>runOn(QuickSortInvariants.class, \"prop_idempotent\", 10000);</pre>\n */\n", "func_signal": "public void runOn(Class<?> invariants, String propName, int times) throws TestException", "code": "{\n    Method[] ms = invariants.getDeclaredMethods();\n    for (Method m : ms) {\n        if (m.getName().equals(propName)) {\n            runOn(m, times);\n        }\n    }\n}", "path": "src\\tbc\\supercheck\\TestRun.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/** \n * Run the next tests with the set of parameters passed in here. The next \n * call, and only the next call, to a runOn() method will use these \n * parameters. For example:\n * \n * <pre>new TestRun().with(params).runOn(Invariants.class, 10000);</pre>\n */\n", "func_signal": "public TestRun with(ParameterBunch pb)", "code": "{\n\tnextParams = pb;\n\treturn this;\n}", "path": "src\\tbc\\supercheck\\TestRun.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/**\n * Answers an arbitrary float in the [0, range] range.\n * \n * @return an arbitrary float\n */\n", "func_signal": "public float arbFloat(int range)", "code": "{\n\tswitch (select(0.05f, 0.05f, 0.9f)) {\n\tcase 0:\n\t\treturn 0.0f;\n\tcase 1:\n\t\treturn range;\n\tcase 2: default:\n\t\treturn random.nextFloat() + random.nextInt(range);\n\t}\n}", "path": "src\\tbc\\supercheck\\Gen.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/** \n * Answers an arbitrary float, but never NaN, POSITIVE_INFINITY or\n * NEGATIVE_INFINITY.\n * \n * @return an arbitrary float\n */\n", "func_signal": "public float arbFloat()", "code": "{\n    switch (select(0.05f, 0.05f, 0.05f, 0.85f)) {\n    case 0:\n        return Float.MAX_VALUE;\n    case 1:\n        return Float.MIN_VALUE;\n    case 2:\n        return 0.0f;\n    case 3: default:\n        return random.nextFloat() + random.nextInt();\n    }\n}", "path": "src\\tbc\\supercheck\\Gen.java", "repo_name": "kjw/supercheck", "stars": 4, "license": "None", "language": "java", "size": 136}
{"docstring": "/**\n * Overloaded to remove relation with RSSSource\n */\n", "func_signal": "public void remove() throws RemoveException", "code": "{\n\tSystem.out.println(\"Removing headline: \" + getHeadline());\n\ttry {\n\t\tSystem.out.println(\"Removing RSSSource relation\");\n\t\tidoRemoveFrom(RSSSource.class);\n\t} catch(IDORelationshipException e) {\n\t\te.printStackTrace();\n\t\tthrow new RemoveException(\"Could not remove relationship with RSSSource\");\n\t}\n\tsuper.remove();\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\data\\RSSHeadlineBMPBean.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/* (non-Javadoc)\n * @see com.idega.data.IDOLegacyEntity#initializeAttributes()\n */\n", "func_signal": "public void initializeAttributes()", "code": "{\n    // Skapa tabellkolumner i db fr bnan\n        //  Kolumnnamn fr primrnyckel\n        addAttribute(getIDColumnName());\n        //      kolumnnamn, kolumnbesk, Kolumntyp(Varchar 255)\n        addAttribute(\"LINK_URL\", \"Link url\", String.class);\n        //setUnique(\"LINK_URL\", true); // got keysize to big for index using interbase\n        addAttribute(\"HEADLINE\", \"Link text\", String.class);\n\taddManyToManyRelationShip(RSSSource.class);\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\data\\RSSHeadlineBMPBean.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/* (non-Javadoc)\n * @see com.idega.builder.handler.ICPropertyHandler#onUpdate(java.lang.String[], com.idega.presentation.IWContext)\n */\n", "func_signal": "public void onUpdate(String[] values, IWContext iwc)", "code": "{\n\tif(values!=null && values.length>0) {\n\t\tString rssSourceId = values[0];\n\t\tSystem.out.println(\"Selected rss source \\\"\" + rssSourceId + \"\\\"\");\n\t}\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\presentation\\RSSSourceHandler.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/* (non-Javadoc)\n\t * @see com.idega.data.GenericEntity#equals(java.lang.Object)\n\t */\n", "func_signal": "public boolean equals(Object obj)", "code": "{\n\t\tif(obj instanceof RSSHeadline) {\n\t\t\treturn getLink().equals(((RSSHeadline)obj).getLink());\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\data\\RSSHeadlineBMPBean.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/**\n * Creates a new RSSSource\n * @param name The name of the new source (same as url if null or empty)\n * @param url The URL for the RSS source\n * @return true if a new source was created, otherwise false (for example, if\n *         an equivalent source already existed)\n */\n", "func_signal": "public boolean createNewRSSSource(String name, String url)", "code": "{\n\tif(url!=null && url.trim().length()!=0) {\n\t\turl = url.trim();\n\t\tif(name==null || name.trim().length()==0) {\n\t\t\tname = url;\n\t\t}\n\t\tname = name.trim();\n\t} else {\n\t\t// not added because url was empty\n\t\treturn false;\n\t}\n\tIterator sourcesIter = getAllRSSSources().iterator();\n\twhile(sourcesIter.hasNext()) {\n\t\tRSSSource source = (RSSSource) sourcesIter.next();\n\t\tif(source.getSourceURL().equals(url.trim())) {\n\t\t\t// not added because it already exists\n\t\t\treturn false;\n\t\t}\n\t}\n\ttry {\n\t\tRSSSourceHome sHome = (RSSSourceHome) getIDOHome(RSSSource.class);\n\t\tRSSSource source = sHome.create();\n\t\tsource.setName(name);\n\t\tsource.setSourceURL(url);\n\t\tsource.store();\n\t\tboolean ok = RSSBusinessPoller.getInstance(this.getIWApplicationContext()).updateRSSHeadlinesForRSSSource(source);\n\t\tif(!ok) {\n\t\t\tSystem.out.println(\"Coulnd't fetch and save source, url may be wrong\");\n\t\t\tsource.remove();\n\t\t\treturn false;\n\t\t}\n\t} catch(Exception e){\n\t\tSystem.out.println(\"Couldn't add RSS source: \" + name);\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\business\\RSSBusinessBean.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/* (non-Javadoc)\n * @see com.idega.idegaweb.IWBundleStartable#start(com.idega.idegaweb.IWBundle)\n */\n", "func_signal": "public void start(IWBundle starterBundle)", "code": "{\n\tString strPollInterval = starterBundle.getProperty(BUNDLE_PROPERTY_NAME_POLL_INTERVAL);\n\tif(strPollInterval!=null && strPollInterval.length()>0) {\n\t\ttry {\n\t\t\tpollInterval = Integer.parseInt(strPollInterval.trim());\n\t\t\tSystem.out.println(\"Poll interval set to \" + pollInterval + \" minutes\");\n\t\t} catch(NumberFormatException e) {\n\t\t\tSystem.out.println(\"Could not set rss poll interval to \" + strPollInterval);\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t_instance = this;\n\tif (tManager==null) {\n\t\ttManager = new TimerManager();\n\t}\n\tif(pollTimerEntry==null) {\n\t\ttry {\n\t\t\tpollTimerEntry = tManager.addTimer(pollInterval, true, new TimerListener() {\n\t\t\t\tpublic void handleTimer(TimerEntry entry) {\n\t\t\t\t\tupdateAllRSSHeadlines();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch(PastDateException e) {\n\t\t\tpollTimerEntry = null;\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\business\\RSSBusinessPoller.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/**\n * Brings all RSSHeadlines for a given RSSSource up to date\n * @param rssSource The RSSSource to bring headlines up to date for\n * @return true if headlines are up to date, false otherwise (if, for\n *         example, the no rss response was retrieved from the url)\n */\n", "func_signal": "public boolean updateRSSHeadlinesForRSSSource(RSSSource rssSource)", "code": "{\n\t//String sourceUrl = rssSource.getSourceURL();\n\t//String sourceId = rssSource.getSourceId();\n\tSystem.out.println(\"Saving snapshot of rss source \" + rssSource);\n\ttry {\n\t\tCollection newHeadlines = getLatestHeadlinesFromRSSByRSSSource(rssSource);\n\t\tif(newHeadlines.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\tRSSBusiness business = getBusiness();\n\t\tCollection oldHeadlines = business.getHeadlinesByRSSSource(rssSource);\n\t\tIterator newHeadlineIter = newHeadlines.iterator();\n\t\tif(newHeadlineIter.hasNext()) {\n\t\t\twhile (newHeadlineIter.hasNext()) {\n\t\t\t\ttry{\n\t\t\t\t\tRSSHeadline headline = (RSSHeadline) newHeadlineIter.next();\n\t\t\t\t\tif(oldHeadlines.contains(headline)) {\n\t\t\t\t\t\t// headline already exists, don't reinsert and don't remove later\n\t\t\t\t\t\tSystem.out.println(\"Headline from rss already exists: \" + headline);\n\t\t\t\t\t\toldHeadlines.remove(headline);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.println(\"Inserting new Headline from rss: \" + headline);\n\t\t\t\t\t\theadline.store();\n\t\t\t\t\t\trssSource.addHeadline(headline);\n\t\t\t\t\t}\n\t\t\t\t} catch(Exception e){\n\t\t\t\t\tSystem.out.println(\"Exception inserting headline\");\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// now go through the remaining headlines in existingHeadlines (they are the\n\t\t// ones that no longer exists in the rss response) and remove them\n\t\tIterator oldHeadlineIter = oldHeadlines.iterator();\n\t\tif(oldHeadlineIter.hasNext()) {\n\t\t\twhile (oldHeadlineIter.hasNext()) {\n\t\t\t\ttry {\n\t\t\t\t\tRSSHeadline headline = (RSSHeadline) oldHeadlineIter.next();\n\t\t\t\t\tif(!newHeadlines.contains(headline)) {\n\t\t\t\t\t\tSystem.out.println(\"Removing headline no longer in rss (\" + headline +\")\");\n\t\t\t\t\t\theadline.remove();\n\t\t\t\t\t}\n\t\t\t\t} catch(Exception e){\n\t\t\t\t\tSystem.out.println(\"Exception removing headline\");\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\business\\RSSBusinessPoller.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/**\n * Gets an instance of RSSBusiness\n * @return An instance of RSSBusiness\n */\n", "func_signal": "private RSSBusiness getBusiness()", "code": "{\n\tif(this._business==null) {\n\t\ttry {\n\t\t\tRSSBusinessHome businessHome = new RSSBusinessHomeImpl();\n\t\t\tthis._business = businessHome.create();\n\t\t} catch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn this._business;\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\business\\RSSBusinessPoller.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/**\n * Collects all elements with name \"item\" below an element into a collection \n * @param element search this element and its descendants\n * @param col The collection to add \"item\" elements into\n */\n", "func_signal": "private void collectItems(Element element, List col)", "code": "{\n\tif(\"item\".equals(element.getName())) {\n\t\tcol.add(element);\n\t}\n\tjava.util.List children = element.getChildren();\n\tIterator iter = children.iterator();\n\twhile (iter.hasNext()) {\n\t\tElement item = (Element) iter.next();\n\t\tcollectItems(item, col);\n\t}\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\business\\RSSBusinessPoller.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/**\n * @param string\n */\n", "func_signal": "public void setMaxLinks(String string)", "code": "{\n\ttry {\n\t\tthis.maxLinks = Integer.parseInt(string);\n\t} catch(Exception e) {\n\t\tSystem.err.println(\"Couldn't save new max link value\");\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\presentation\\RSSViewer.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/**\n * This is where everything happens.\n */\n", "func_signal": "public void main(IWContext iwc) throws Exception", "code": "{\n\tIWResourceBundle iwrb = this.getResourceBundle(iwc);\n\t//if no selected rss source display an error message\n\tif(this.sourceId == -1) {\n\t\tText msg = new Text(iwrb.getLocalizedString(\"no.rss.source.selected\",\"No RSS source selected, please select one in the property window.\"));\n\t\tmsg.setBold();\n\t\tadd(msg);\n\t\treturn;\n\t}\n\telse {\n\t\ttry {\n\t\t\t//get the data with the business bean\n\t\t\tRSSBusiness business = getRSSBusiness(iwc);\n\t\t\tRSSSource rssSource = business.getRSSSourceBySourceId(this.sourceId);\n\t\t\tCollection headlines = business.getRSSHeadlinesByRSSSource(rssSource);\n\t\t\t\n\t\t\t//add stuff to the block\n\t\t\tif (this.description!=null && this.description.length()>0) {\n\t\t\t\tText text = new Text(this.description);\n\t\t\t\tadd(text);\n\t\t\t}\n\t\t\t\n\t\t\tTable table = new Table();\n\t\t\t//it does not really matter if this is done here or after adding to the table\n\t\t\tadd(table);\n\t\t\t\n\t\t\tint row = 1;\n\t\t\tint maxLinksTmp = this.maxLinks;\n\t\t\tif(maxLinksTmp<1)  {\n\t\t\t\t// if maxLinks is zero (or negative), no limit\n\t\t\t\tmaxLinksTmp = 10000;\n\t\t\t}\n\t\t\tfor (Iterator loop = headlines.iterator(); row<=maxLinksTmp && loop.hasNext();) {\n\t\t\t\tRSSHeadline rssHeadline = (RSSHeadline) loop.next();\n\t\t\t\tString headLine = rssHeadline.getHeadline();\n\t\t\t\tLink link = new Link(headLine, rssHeadline.getLink());\n\t\t\t\tif(this.style!=null) {\n\t\t\t\t\tlink.setFontStyle(this.style);\n\t\t\t\t}\n\t\t\t\tlink.setTarget(this.linkTargetType);\n\t\t\t\ttable.add(link, 1, row++);\n\t\t\t}\n\t\t} catch (RemoteException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\presentation\\RSSViewer.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/* (non-Javadoc)\n * @see com.idega.idegaweb.IWBundleStartable#stop(com.idega.idegaweb.IWBundle)\n */\n", "func_signal": "public void stop(IWBundle starterBundle)", "code": "{\n\tif(tManager!=null) {\n\t\tif (pollTimerEntry != null) {\n\t\t\ttManager.removeTimer(pollTimerEntry);\n\t\t\tpollTimerEntry = null;\n\t\t}\n\t}\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\business\\RSSBusinessPoller.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/**\n * Removes the source definition and all headlines for a RSSSource\n * @param id The id of the RSSSource\n * @return true if a source definition was successfully removed, \n *         false otherwise\n */\n", "func_signal": "public boolean removeSourceById(int id)", "code": "{\n\ttry {\n\t\tRSSSource source = getRSSSourceBySourceId(id);\n\t\tif(source!=null) {\n\t\t\tsource.removeHeadlines();\n\t\t\t// remove source definition\n\t\t\tsource.remove();\n\t\t\tSystem.out.println(\"Removed RSS source: \");\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\business\\RSSBusinessBean.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/**\n * Gets all RSSHeadlines for a given RSSSource\n * @param rssSource The RSSSource\n * @return A Collection of RSSHeadlines for the given RSSSource\n */\n", "func_signal": "public Collection getRSSHeadlinesByRSSSource(RSSSource rssSource)", "code": "{\n\tCollection headlines = Collections.EMPTY_LIST;\n\tif(rssSource!=null) {\n\t\ttry {\n\t\t\theadlines = getHeadlinesByRSSSource(rssSource);                    \n\t\t} catch (RemoteException re) {\n\t\t\tre.printStackTrace();\n\t\t\theadlines = ListUtil.getEmptyList();\n\t\t} catch (FinderException fe) {\n\t\t\tfe.printStackTrace();\n\t\t\theadlines = ListUtil.getEmptyList();            \n\t\t}\n\t}\n\treturn headlines;\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\business\\RSSBusinessBean.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/**\n * Gets an RSSSource by its Id\n * @param sourceId The Id of the RSSSource\n * @return The RSSSource\n */\n", "func_signal": "public RSSSource getRSSSourceBySourceId(int sourceId)", "code": "{\n\tRSSSource source = null;\n\ttry {\n\t\tRSSSourceHome sHome = (RSSSourceHome) getIDOHome(RSSSource.class);\n\t\tCollection sources = sHome.findSourceById(sourceId);\n\t\tif(sources.size()>0) {\n\t\t\tsource = (RSSSource) sources.iterator().next();\n\t\t}\n\t} catch (Exception e) {\n\t\t//String msg = e.getMessage();\n\t\te.printStackTrace();\n\t}\n\treturn source;\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\business\\RSSBusinessBean.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/**\n * Gets an instance of RSSBusinessPoller\n * @return An instance of RSSBusinessPoller\n */\n", "func_signal": "public static RSSBusinessPoller getInstance(IWApplicationContext iwac)", "code": "{\n\tif(_instance == null){\n\t\t(new RSSBusinessPoller()).start(iwac.getIWMainApplication().getBundle(IW_BUNDLE_IDENTIFIER));\n\t}\n\treturn _instance;\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\business\\RSSBusinessPoller.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/**\n * @param string\n */\n", "func_signal": "public void setSourceId(String id)", "code": "{\n\t//System.out.println(\"setting rss source id to \" + id);\n\ttry {\n\t\tthis.sourceId = Integer.parseInt(id);\n\t} catch(Exception e) {\n\t\tSystem.err.println(\"Couldn't save new source id value\");\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\presentation\\RSSViewer.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/**\n * Retrieves the latest RSSHeadlines for a given RSSSource by making a \n * request to the RSS server. Note: The headlines in the list have not\n * been stored persistently.\n * @param rssSource The RSSSource to retrieve latest RSSHeadline from\n * @return A List of latest RSSHeadlines\n */\n", "func_signal": "public List getLatestHeadlinesFromRSSByRSSSource(RSSSource rssSource)", "code": "{\n\tSAXBuilder builder = new SAXBuilder();\n\tArrayList theReturn = new ArrayList();\n\ttry {\n\t\tURL url = new URL(rssSource.getSourceURL());\n\t\tDocument doc = builder.build(url);\n\t\tArrayList items = new ArrayList(8);\n\t\tcollectItems(doc.getRootElement(), items);\n\t\tint numItems = items.size();\n\t\tfor(int i=0; i<numItems; i++) {\n\t\t\tElement item = (Element) items.get(i);\n\t\t\tElement eTitle = item.getChild(\"title\", item.getNamespace());\n\t\t\tElement eLink = item.getChild(\"link\", item.getNamespace());\n\t\t\tif(eTitle==null || eLink==null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tString sTitle = eTitle.getText();\n\t\t\tString sLink = eLink.getText();\n\t\t\tif(sTitle==null || sLink==null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tRSSHeadlineHome hHome = new RSSHeadlineHomeImpl();\n\t\t\tRSSHeadline h = hHome.create();\n\t\t\th.setHeadline(sTitle);\n\t\t\th.setLink(sLink);\n\t\t\ttheReturn.add(h);\n\t\t}\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t} catch (Exception e) {\n\t\t//String msg = e.getMessage();\n\t\te.printStackTrace();\n\t}\n\treturn theReturn;\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\business\\RSSBusinessPoller.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/* (non-Javadoc)\n * @see com.idega.builder.handler.ICPropertyHandler#getHandlerObject(java.lang.String, java.lang.String, com.idega.presentation.IWContext)\n */\n", "func_signal": "public PresentationObject getHandlerObject(String name, String stringValue, IWContext iwc)", "code": "{\n\t//System.out.println(\"Handling property rss source, name=[\" + name + \"], value=[\" + stringValue + \"]\");\n\tIWResourceBundle iwrb = iwc.getIWMainApplication().getBundle(IW_BUNDLE_IDENTIFIER).getResourceBundle(iwc);\n\t\n\t// create view\n\tTable result = new Table();\n\tint row = 1;\n\tPresentationObject menu = createSourceMenu(name, stringValue, iwc);\n\tresult.add(menu, 1, row++);\n\t\n\tString textOnButton = iwrb.getLocalizedString(\"edit.rss.sources\",\"Edit RSS Sources\");\n\tGenericButton editButton = new GenericButton(textOnButton,textOnButton);\n\teditButton.setWindowToOpen(RSSSourceDefWindow.class);\n\tresult.addBreak();\n\tresult.add(editButton);\n\treturn result;\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\presentation\\RSSSourceHandler.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/**\n * Gets all defined RSSSources\n * @return A List of all defined RSSSources  \n */\n", "func_signal": "public List getAllRSSSources()", "code": "{\n\tList sources = null;\n\ttry {\n\t\tRSSSourceHome sHome = (RSSSourceHome) getIDOHome(RSSSource.class);\n\t\tsources = new ArrayList(sHome.findSources());\n\t} catch(Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn sources;\n}", "path": "src\\java\\com\\idega\\block\\demo\\rssreader\\business\\RSSBusinessBean.java", "repo_name": "idega/com.idega.block.demo", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/**\n * Removes the attribute with the given name.\n * \n * @param attributeName the name of the attribute to remove\n * @return the removed attribute, or null if there wasn't one\n */\n", "func_signal": "public XML.Attr remove(String attributeName)", "code": "{\n  XML.Attr attribute = getAttr(attributeName);\n  if (attribute != null) {\n    remove(attribute);\n  }\n  return attribute;\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Creates and return a document parsed from the given file.\n * \n * @param file the file to parse from\n * @return a new parsed document\n */\n", "func_signal": "public static XML.Doc doc(File file)", "code": "{\n  try {\n    Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(file);\n    return XML.doc(document);\n  }\n  catch (Throwable t) {\n    throw new IllegalArgumentException(\"Failed to parse a document from the provided file.\", t);\n  }\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Returns the child element with the given name from this element, or null if there isn't one.\n * \n * @param name the name of the element to look up\n * @return the child element with the given name from this element, or null if there isn't one\n */\n", "func_signal": "public XML.E child(String name)", "code": "{\n  XML.E matchingElement = null;\n  if (_children != null) {\n    for (XML.Node node : _children) {\n      if (node instanceof XML.E && ((XML.E) node)._name.equals(name)) {\n        if (matchingElement == null) {\n          matchingElement = (XML.E) node;\n        }\n        else {\n          throw new IllegalStateException(\"There was more than one child named '\" + name + \"'.\");\n        }\n      }\n    }\n  }\n  return matchingElement;\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Converts a W3C Document into an XML.Doc.\n * \n * @param w3cDocument the W3C Document\n * @return the equivalent XML.Doc\n */\n", "func_signal": "public static XML.Doc doc(org.w3c.dom.Document w3cDocument)", "code": "{\n  org.w3c.dom.Element w3cElement = w3cDocument.getDocumentElement();\n  Doc doc = XML.doc();\n  doc.setRoot(XML.e(w3cElement));\n  return doc;\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Constructs a new Declaration.\n * \n * @param version the version of XML used by this document\n * @param encoding the encoding used by this document\n */\n", "func_signal": "public Declaration(String version, String encoding)", "code": "{\n  _version = version;\n  _encoding = encoding;\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Sets the attribute of the given name to the given value. If there is\n * already an attribute with this name, it is replaced.\n * \n * @param name the name of the attribute\n * @param value the value of the attribute\n * @return this element\n */\n", "func_signal": "public XML.E set(String name, String value)", "code": "{\n  remove(name);\n  add(new XML.Attr(name, value));\n  return this;\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Returns the text of the child element with the given name from this element, or null if there isn't one.\n * \n * @param name the name of the element to look up\n * @return the text of the child element with the given name from this element, or null if there isn't one\n */\n", "func_signal": "public String childText(String name)", "code": "{\n  XML.E child = child(name);\n  return (child != null) ? child.text() : null;\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Sets the declaration for this document.\n * \n * @param declaration the declaration for this document\n */\n", "func_signal": "public void setDeclaration(XML.Declaration declaration)", "code": "{\n  if (_declaration != null) {\n    remove(_declaration);\n  }\n  _declaration = declaration;\n  if (_declaration != null) {\n    _declaration.setParent(this);\n    _children.add(0, _declaration);\n  }\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Adds a new child to this document. No validation is performed of these items.\n * \n * @param <T> the type of the item\n * @param child the child to add\n * @return the newly added item\n */\n", "func_signal": "public <T extends XML.Item> T add(T child)", "code": "{\n  if (_root == null && child instanceof XML.E) {\n    setRoot((XML.E) child);\n  }\n  else if (child instanceof XML.Declaration) {\n    setDeclaration((XML.Declaration) child);\n  }\n  else {\n    _add(child);\n  }\n  return child;\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Returns the int variant of the value of the attribute with the given name, or null if there isn't one.\n * \n * @param attributeName the name of the attribute to lookup\n * @param defaultValue the default value to return if there is no attribute, or if the attribute value is null\n * @return the int variant of the value of the attribute with the given name, or null if there isn't one.\n */\n", "func_signal": "public int getInt(String attributeName, int defaultValue)", "code": "{\n  int value = defaultValue;\n  String text = get(attributeName);\n\tif (text != null) {\n\t\tvalue = Integer.parseInt(text);\n\t}\n  return value;\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Removes the given attribute from this element.\n * \n * @param attribute the attribute to remove\n */\n", "func_signal": "public void remove(XML.Attr attribute)", "code": "{\n  _attributes.remove(attribute);\n  if (_attributes.size() == 0) {\n    _attributes = null;\n  }\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Returns a list of direct children of this element that have the given name, or an empty\n * list if there aren't any.\n *  \n * @param name the name of the children elements to look up\n * @return a list of direct children of this element that have the given name, or an empty\n * list if there aren't any\n */\n", "func_signal": "public List<XML.E> children(String name)", "code": "{\n  List<XML.E> children = new LinkedList<XML.E>();\n  if (_children != null) {\n    for (XML.Node node : _children) {\n      if (node instanceof XML.E && ((XML.E) node)._name.equals(name)) {\n        children.add((XML.E) node);\n      }\n    }\n  }\n  return children;\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Returns the enum variant of the child element with the given name from this element, or defaultValue if there isn't one.\n * \n * @param name the name of the element to look up\n * @param enumClass the class of the enum to return\n * @param defaultValue the default value to return if there is no child node, or if the child node is empty\n * @return the enum variant of the child element with the given name from this element, or defaultValue if there isn't one.\n */\n", "func_signal": "public <T extends Enum<T>> T childEnum(String name, Class<T> enumClass, T defaultValue)", "code": "{\n\tT value = defaultValue;\n  XML.E child = child(name);\n  if (child != null) {\n  \tString text = child.text();\n  \tif (text != null) {\n  \t\tvalue = Enum.valueOf(enumClass, text);\n  \t}\n  }\n  return value;\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Returns the boolean variant of the child element with the given name from this element, or defaultValue if there isn't one.\n * \n * @param name the name of the element to look up\n * @param defaultValue the default value to return if there is no child node, or if the child node is empty\n * @return the boolean variant of the child element with the given name from this element, or defaultValue if there isn't one.\n */\n", "func_signal": "public boolean childBoolean(String name, boolean defaultValue)", "code": "{\n\tboolean value = defaultValue;\n  XML.E child = child(name);\n  if (child != null) {\n  \tString text = child.text();\n  \tif (text != null) {\n  \t\tvalue = Boolean.parseBoolean(text);\n  \t}\n  }\n  return value;\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Sets the text value of this element. This will replace an existing Text child with\n * the provided string, or create a new one if one doesn't exist. If there is already\n * a child in this element that is not a Text node, this will throw an exception.\n * \n * @param text the new text value for this node\n * @return this element\n */\n", "func_signal": "public XML.E setText(String text)", "code": "{\n  if (_children != null) {\n    if (_children.size() == 1) {\n      XML.Node node = _children.get(0);\n      if (node instanceof XML.Text) {\n        ((XML.Text) node).setText(text);\n      }\n      else {\n        throw new IllegalStateException(\"There was already a non-text child of this element: \" + node);\n      }\n    }\n    else {\n      throw new IllegalStateException(\"There was more than one child of this element: \" + this);\n    }\n  }\n  else {\n    text(text);\n  }\n  return this;\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Returns the XML document, or null if it isn't in a document.\n *  \n * @return the XML document, or null if it isn't in a document\n */\n", "func_signal": "public XML.Doc doc()", "code": "{\n  XML.Item item = this;\n  XML.Item parent = null;\n  while ((parent = item.parent()) != null) {\n    item = parent;\n  }\n  XML.Doc doc = null;\n  if (item instanceof XML.Doc) {\n    doc = (XML.Doc) item;\n  }\n  return doc;\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Returns the int variant of the child element with the given name from this element, or defaultValue if there isn't one.\n * \n * @param name the name of the element to look up\n * @param defaultValue the default value to return if there is no child node, or if the child node is empty\n * @return the int variant of the child element with the given name from this element, or defaultValue if there isn't one.\n */\n", "func_signal": "public int childInt(String name, int defaultValue)", "code": "{\n  int value = defaultValue;\n  XML.E child = child(name);\n  if (child != null) {\n  \tString text = child.text();\n  \tif (text != null) {\n  \t\tvalue = Integer.parseInt(text);\n  \t}\n  }\n  return value;\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Returns a set of the text of the descendent elements of this element that have the given name, or an empty\n * list if there aren't any.\n *  \n * @param name the name of the descendent elements to look up\n * @return a set of the text of the descendents of this element that have the given name, or an empty\n * set if there aren't any\n */\n", "func_signal": "public Set<String> descendentsText(String name)", "code": "{\n  Set<XML.E> descendents = descendents(name);\n  Set<String> descendentsText = new LinkedHashSet<String>();\n  for (XML.E descendent : descendents) {\n    descendentsText.add(descendent.text());\n  }\n  return descendentsText;\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Creates a new root element with the given name and initial text contents and returns \n * it. If there is already a root element, this will throw an exception.\n * \n * @param name the name of the new root element\n * @param value the initial text value of this element\n * @return the new root element\n */\n", "func_signal": "public XML.E root(String name, String value)", "code": "{\n  checkNullRoot();\n  XML.E root = XML.e(name, value);\n  setRoot(root);\n  return root;\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "/**\n * Creates and return a document parsed from the given string.\n * \n * @param documentString the string to parse as XML\n * @return a new parsed document\n */\n", "func_signal": "public static XML.Doc doc(String documentString)", "code": "{\n  try {\n  \tXML.Doc doc;\n  \tif (documentString == null || documentString.trim().length() == 0) {\n  \t\tdoc = XML.doc();\n  \t}\n  \telse {\n  \t\tDocument document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new InputSource(new StringReader(documentString)));\n    \tdoc = XML.doc(document);\n  \t}\n  \treturn doc;\n  }\n  catch (Throwable t) {\n    throw new IllegalArgumentException(\"Failed to parse a document from the provided string.\", t);\n  }\n}", "path": "src\\org\\xiss\\XML.java", "repo_name": "mschrag/xiss", "stars": 7, "license": "None", "language": "java", "size": 88}
{"docstring": "//\n// PRIVATE METHODS\n//\n", "func_signal": "private Double findMaximumValue()", "code": "{\n\tSet<Pair<STATE_TYPE, ACTION_TYPE>> keys = table.keySet();\n\tif (keys.size() > 0) {\n\t\tDouble maxValue = table.get(keys.toArray()[0]);\n\t\tfor (Pair<STATE_TYPE, ACTION_TYPE> key : keys) {\n\t\t\tDouble v = table.get(key);\n\t\t\tif (v > maxValue) {\n\t\t\t\tmaxValue = v;\n\t\t\t}\n\t\t}\n\t\treturn maxValue;\n\n\t} else {\n\t\treturn 0.0;\n\t}\n}", "path": "java\\aima-core\\src\\main\\java\\aima\\core\\learning\\reinforcement\\QTable.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "//\n// START-InferenceProcedure\n", "func_signal": "public InferenceResult ask(FOLKnowledgeBase KB, Sentence alpha)", "code": "{\n\n\t// clauses <- the set of clauses in CNF representation of KB ^ ~alpha\n\tSet<Clause> clauses = new LinkedHashSet<Clause>();\n\tfor (Clause c : KB.getAllClauses()) {\n\t\tc = KB.standardizeApart(c);\n\t\tc.setStandardizedApartCheckNotRequired();\n\t\tclauses.addAll(c.getFactors());\n\t}\n\tSentence notAlpha = new NotSentence(alpha);\n\t// Want to use an answer literal to pull\n\t// query variables where necessary\n\tLiteral answerLiteral = KB.createAnswerLiteral(notAlpha);\n\tSet<Variable> answerLiteralVariables = KB\n\t\t\t.collectAllVariables(answerLiteral.getAtomicSentence());\n\tClause answerClause = new Clause();\n\n\tif (answerLiteralVariables.size() > 0) {\n\t\tSentence notAlphaWithAnswer = new ConnectedSentence(Connectors.OR,\n\t\t\t\tnotAlpha, answerLiteral.getAtomicSentence());\n\t\tfor (Clause c : KB.convertToClauses(notAlphaWithAnswer)) {\n\t\t\tc = KB.standardizeApart(c);\n\t\t\tc.setProofStep(new ProofStepGoal(c));\n\t\t\tc.setStandardizedApartCheckNotRequired();\n\t\t\tclauses.addAll(c.getFactors());\n\t\t}\n\n\t\tanswerClause.addLiteral(answerLiteral);\n\t} else {\n\t\tfor (Clause c : KB.convertToClauses(notAlpha)) {\n\t\t\tc = KB.standardizeApart(c);\n\t\t\tc.setProofStep(new ProofStepGoal(c));\n\t\t\tc.setStandardizedApartCheckNotRequired();\n\t\t\tclauses.addAll(c.getFactors());\n\t\t}\n\t}\n\n\tTFMAnswerHandler ansHandler = new TFMAnswerHandler(answerLiteral,\n\t\t\tanswerLiteralVariables, answerClause, maxQueryTime);\n\n\t// new <- {}\n\tSet<Clause> newClauses = new LinkedHashSet<Clause>();\n\tSet<Clause> toAdd = new LinkedHashSet<Clause>();\n\t// loop do\n\tint noOfPrevClauses = clauses.size();\n\tdo {\n\t\tif (null != tracer) {\n\t\t\ttracer.stepStartWhile(clauses, clauses.size(), newClauses\n\t\t\t\t\t.size());\n\t\t}\n\n\t\tnewClauses.clear();\n\n\t\t// for each Ci, Cj in clauses do\n\t\tClause[] clausesA = new Clause[clauses.size()];\n\t\tclauses.toArray(clausesA);\n\t\t// Basically, using the simple T)wo F)inger M)ethod here.\n\t\tfor (int i = 0; i < clausesA.length; i++) {\n\t\t\tClause cI = clausesA[i];\n\t\t\tif (null != tracer) {\n\t\t\t\ttracer.stepOuterFor(cI);\n\t\t\t}\n\t\t\tfor (int j = i; j < clausesA.length; j++) {\n\t\t\t\tClause cJ = clausesA[j];\n\n\t\t\t\tif (null != tracer) {\n\t\t\t\t\ttracer.stepInnerFor(cI, cJ);\n\t\t\t\t}\n\n\t\t\t\t// resolvent <- FOL-RESOLVE(Ci, Cj)\n\t\t\t\tSet<Clause> resolvents = cI.binaryResolvents(cJ);\n\n\t\t\t\tif (resolvents.size() > 0) {\n\t\t\t\t\ttoAdd.clear();\n\t\t\t\t\t// new <- new <UNION> resolvent\n\t\t\t\t\tfor (Clause rc : resolvents) {\n\t\t\t\t\t\ttoAdd.addAll(rc.getFactors());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (null != tracer) {\n\t\t\t\t\t\ttracer.stepResolved(cI, cJ, toAdd);\n\t\t\t\t\t}\n\n\t\t\t\t\tansHandler.checkForPossibleAnswers(toAdd);\n\n\t\t\t\t\tif (ansHandler.isComplete()) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tnewClauses.addAll(toAdd);\n\t\t\t\t}\n\n\t\t\t\tif (ansHandler.isComplete()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ansHandler.isComplete()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tnoOfPrevClauses = clauses.size();\n\n\t\t// clauses <- clauses <UNION> new\n\t\tclauses.addAll(newClauses);\n\n\t\tif (ansHandler.isComplete()) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// if new is a <SUBSET> of clauses then finished\n\t\t// searching for an answer\n\t\t// (i.e. when they were added the # clauses\n\t\t// did not increase).\n\t} while (noOfPrevClauses < clauses.size());\n\n\tif (null != tracer) {\n\t\ttracer.stepFinished(clauses, ansHandler);\n\t}\n\n\treturn ansHandler;\n}", "path": "java\\aima-core\\src\\main\\java\\aima\\core\\logic\\fol\\inference\\FOLTFMResolution.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "/** Prints a way entity. */\n", "func_signal": "protected void printWay(MapWay way, DefaultEntityViewInfo pInfo, boolean asArea)", "code": "{\n\tList<MapNode> nodes = generalizeWay(way.getNodes());\n\tif (nodes != null) {\n\t\tNameInfo textInfo = null;\n\t\tif (transformer.getScale() >= pInfo.minNameScale * displayFactor) {\n\t\t\tString name = way.getName();\n\t\t\tif (name != null && pInfo.nameColor != null) {\n\t\t\t\tif (way.isOneway())\n\t\t\t\t\tname = \">\" + name;\n\t\t\t\ttextInfo = new NameInfo(name, pInfo.nameColor);\n\t\t\t}\n\t\t}\n\t\tprintLine(g2, nodes, pInfo, asArea, textInfo);\n\t}\n}", "path": "java\\aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\DefaultEntityRenderer.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "// END-AtomicSentence\n//\n", "func_signal": "@Override\npublic boolean equals(Object o)", "code": "{\n\n\tif (this == o) {\n\t\treturn true;\n\t}\n\tif ((o == null) || (this.getClass() != o.getClass())) {\n\t\treturn false;\n\t}\n\tTermEquality te = (TermEquality) o;\n\n\treturn te.getTerm1().equals(term1) && te.getTerm2().equals(term2);\n}", "path": "java\\aima-core\\src\\main\\java\\aima\\core\\logic\\fol\\parsing\\ast\\TermEquality.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "/** Constructor for general use. */\n", "func_signal": "public DefaultEntityViewInfo(float minScale, float minNameScale, Color nameColor,\n\t\tEntityIcon icon, boolean isWayIcon, Color wayColor, float wayWidth, boolean wayDashed,\n\t\tColor wayFillColor, boolean fillAreasOnly, int printOrder)", "code": "{\n\tthis.minVisibleScale = minScale;\n\tthis.minNameScale = minNameScale;\n\tthis.nameColor = nameColor;\n\tthis.icon = icon;\n\tthis.isWayIcon = isWayIcon;\n\tthis.wayColor = wayColor;\n\tthis.wayWidth = wayWidth;\n\tthis.wayDashed = wayDashed;\n\tthis.wayFillColor = wayFillColor;\n\tthis.fillAreasOnly = fillAreasOnly;\n\tthis.printOrder = printOrder;\n}", "path": "java\\aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\DefaultEntityViewInfo.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "/** Starts the demo. */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tAimaDemoFrame frame = new AimaDemoFrame();\n\tregisterDemos(frame);\n\tframe.setSize(1000, 600);\n\tframe.setVisible(true);\n}", "path": "java\\aima-gui\\src\\main\\java\\aima\\gui\\applications\\AimaDemoApp.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "/** Finds a good place for printing the name of a way entity. */\n", "func_signal": "protected void setWayNamePosition(NameInfo info,\n\t\tint [] xPoints, int [] yPoints, boolean area)", "code": "{\n\tint x = 0;\n\tint y = 0;\n\tint max = debugMode ? 1 : (area ? xPoints.length : 2);\n\tfor (int i = 0; i < max; i++) {\n\t\tx += xPoints[i];\n\t\ty += yPoints[i];\n\t}\n\tinfo.x = x / max;\n\tinfo.y = y / max;\n\tif (debugMode)\n\t\tinfo.y+=displayFactor*fontSize;\n}", "path": "java\\aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\DefaultEntityRenderer.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "//\n// PRIVATE METHODS\n//\n", "func_signal": "private Matrix createDerivativeMatrix(Vector lastInducedField)", "code": "{\n\tList<Double> lst = new ArrayList<Double>();\n\tfor (int i = 0; i < lastInducedField.size(); i++) {\n\t\tlst.add(new Double(layer.getActivationFunction().deriv(\n\t\t\t\tlastInducedField.getValue(i))));\n\t}\n\treturn Matrix.createDiagonalMatrix(lst);\n}", "path": "java\\aima-core\\src\\main\\java\\aima\\core\\learning\\neural\\LayerSensitivity.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "/** Reduces the level of detail by selecting some of the given nodes. */\n", "func_signal": "protected List<MapNode> generalizeWay(List<MapNode> wayNodes)", "code": "{\n\tint size = wayNodes.size();\n\tif (wayGeneralizationValue == 1)\n\t\treturn wayNodes;\n\telse {\n\t\tList<MapNode> result = new ArrayList<MapNode>(size / wayGeneralizationValue + 2);\n\t\tint i = 0;\n\t\tfor (MapNode node : wayNodes) {\n\t\t\tif (i == 0 || i == size-1 ||\n\t\t\t\t\tnode.getId() % wayGeneralizationValue == 0)\n\t\t\t\tresult.add(node);\n\t\t\ti++;\n\t\t}\n\t\tif (wayNodes.get(0) == wayNodes.get(size-1) && result.size() < 4)\n\t\t\treturn null;\n\t\telse\n\t\t\treturn result;\n\t}\n}", "path": "java\\aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\DefaultEntityRenderer.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "/** Clears the default classification result and all rules. */\n", "func_signal": "public void clear()", "code": "{\n\trules.clear();\n\tdefaultEntityClass = null;\n}", "path": "java\\aimax-osm\\src\\main\\java\\aimax\\osm\\data\\EntityClassifier.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "/** Prints a line or fills an area. */\n", "func_signal": "protected void printLine(Graphics2D g2, List<MapNode> nodes,\n\t\tDefaultEntityViewInfo pInfo, boolean asArea, NameInfo textInfo)", "code": "{\n\t//count++;\n\tint [] xPoints = new int[nodes.size()];\n\tint [] yPoints = new int[nodes.size()];\n\tint i = 0;\n\tfor (MapNode node : nodes) {\n\t\txPoints[i]  = transformer.x(node.getLon());\n\t\tyPoints[i]  = transformer.y(node.getLat());\n\t\t++i;\n\t}\n\tboolean filled = false;\n\tif (asArea) {\n\t\tg2.setColor(pInfo.wayFillColor != null ? pInfo.wayFillColor : pInfo.wayColor);\n\t\tg2.setStroke(standardStroke);\n\t\tg2.fillPolygon(xPoints, yPoints, nodes.size());\n\t\tfilled = true;\n\t}\n\tif (!filled || pInfo.wayFillColor != null && !pInfo.wayFillColor.equals(pInfo.wayColor)) {\n\t\tfloat dash[] =  null;\n\t\tif (pInfo.wayDashed) {\n\t\t\tdash = new float[] { pInfo.wayWidth * 2f * displayFactor };\n\t\t}\n\t\tg2.setColor(pInfo.wayColor);\n\t\tg2.setStroke(new BasicStroke(pInfo.wayWidth * displayFactor, BasicStroke.CAP_BUTT,\n\t\t        BasicStroke.JOIN_ROUND, 10.0f, dash, 0.0f));\n\t\tg2.drawPolyline(xPoints, yPoints, nodes.size());\n\t}\n\tif (textInfo != null) {\n\t\tsetWayNamePosition(textInfo, xPoints, yPoints, filled);\n\t\tnameInfoBuffer.add(textInfo);\n\t}\n\tif (debugMode && transformer.getScale()\n\t\t\t>= 2 * pInfo.minNameScale * displayFactor) {\n\t\ti = 0;\n\t\tfor (MapNode node : nodes) {\n\t\t\ttextInfo = new NameInfo\n\t\t\t(Long.toString(node.getId()), pInfo.nameColor);\n\t\t\ttextInfo.x = xPoints[i];\n\t\t\ttextInfo.y = yPoints[i];\n\t\t\tnameInfoBuffer.add(textInfo);\n\t\t\t++i;\n\t\t}\n\t}\n}", "path": "java\\aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\DefaultEntityRenderer.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "/** Prints a node entity. */\n", "func_signal": "protected void printNode(MapNode node, DefaultEntityViewInfo pInfo)", "code": "{\n\tint x = transformer.x(node.getLon());\n\tint y = transformer.y(node.getLat());\n\tint width = 0;\n\t\n\tif (pInfo.icon != null) {\n\t\twidth = Math.round(pInfo.icon.size * displayFactor);\n\t\tpInfo.icon.draw(g2, x, y, displayFactor);\n\t}\n\t\n\tif (transformer.getScale() >= pInfo.minNameScale * displayFactor) {\n\t\tString name = node.getName();\n\t\tif (name != null && pInfo.nameColor != null) {\n\t\t\tNameInfo info = new NameInfo(name, pInfo.nameColor);\n\t\t\tinfo.x = x + width;\n\t\t\tinfo.y = y + width/4;\n\t\t\tnameInfoBuffer.add(info);\n\t\t}\n\t}\n}", "path": "java\\aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\DefaultEntityRenderer.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "/** Prints a point of interest. */\n", "func_signal": "protected void printPoint(Graphics2D g2, MapNode node, DefaultEntityViewInfo pInfo, Color nameColor)", "code": "{\n\tint x = transformer.x(node.getLon());\n\tint y = transformer.y(node.getLat());\n\tint width = 0;\n\t\n\tif (pInfo.icon != null) {\n\t\twidth = Math.round(pInfo.icon.size * displayFactor);\n\t\tpInfo.icon.draw(g2, x, y, displayFactor);\n\t}\n\t\n\tif (nameColor != null) {\n\t\tString name = (debugMode)\n\t\t? \"P\"+Long.toString(node.getId()) : node.getName();\n\t\tif (name != null) {\n\t\t\tNameInfo info = new NameInfo(name, nameColor);\n\t\t\tinfo.x = x + width;\n\t\t\tinfo.y = y + width/4;\n\t\t\tnameInfoBuffer.add(info);\n\t\t}\n\t}\n}", "path": "java\\aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\DefaultEntityRenderer.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "/** Standard constructor. */\n", "func_signal": "public DefaultEntityRenderer()", "code": "{\n\tareaBuffer = new ArrayList<MapWay>();\n\twayBuffer = new ArrayList<MapWay>();\n\tnodeBuffer = new ArrayList<MapEntity>();\n\ttrackBuffer = new ArrayList<Track>();\n\tnameInfoBuffer = new ArrayList<NameInfo>();\n\ttmpNodeBuffer = new ArrayList<MapNode>();\n\tsetBackgroundColor(Color.WHITE);\n}", "path": "java\\aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\DefaultEntityRenderer.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "/** Registers agent applications and console program demos. */\n", "func_signal": "public static void registerDemos(AimaDemoFrame frame)", "code": "{\n\tframe.addApp(VacuumApp.class);\n\tframe.addApp(RouteFindingAgentApp.class);\n\t\n\tframe.addDemo(EightPuzzleDemo.class);\n\tframe.addDemo(TicTacToeDemo.class);\n\tframe.addDemo(NQueensDemo.class);\n\tframe.addDemo(CSPDemo.class);\n\t\n\tframe.addDemo(TTEntailsDemo.class);\n\tframe.addDemo(PLFCEntailsDemo.class);\n\tframe.addDemo(PLResolutionDemo.class);\n\tframe.addDemo(DPLLDemo.class);\n\tframe.addDemo(WalkSatDemo.class);\n\tframe.addDemo(FolDemo.class);\n\t\n\tframe.addDemo(ProbabilityDemo.class);\n\t\n\tframe.addDemo(LearningDemo.class);\n}", "path": "java\\aima-gui\\src\\main\\java\\aima\\gui\\applications\\AimaDemoApp.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "//\n// PRIVATE METHODS\n// \n", "func_signal": "private BayesNet createBurglaryNetwork()", "code": "{\n\tBayesNetNode burglary = new BayesNetNode(\"Burglary\");\n\tBayesNetNode earthquake = new BayesNetNode(\"EarthQuake\");\n\tBayesNetNode alarm = new BayesNetNode(\"Alarm\");\n\tBayesNetNode johnCalls = new BayesNetNode(\"JohnCalls\");\n\tBayesNetNode maryCalls = new BayesNetNode(\"MaryCalls\");\n\n\talarm.influencedBy(burglary, earthquake);\n\tjohnCalls.influencedBy(alarm);\n\tmaryCalls.influencedBy(alarm);\n\n\tburglary.setProbability(true, 0.001);// TODO behaviour changes if\n\t// root node\n\tearthquake.setProbability(true, 0.002);\n\n\talarm.setProbability(true, true, 0.95);\n\talarm.setProbability(true, false, 0.94);\n\talarm.setProbability(false, true, 0.29);\n\talarm.setProbability(false, false, 0.001);\n\n\tjohnCalls.setProbability(true, 0.90);\n\tjohnCalls.setProbability(false, 0.05);\n\n\tmaryCalls.setProbability(true, 0.70);\n\tmaryCalls.setProbability(false, 0.01);\n\n\tBayesNet net = new BayesNet(burglary, earthquake);\n\treturn net;\n}", "path": "java\\aima-core\\src\\test\\java\\aima\\test\\core\\unit\\probability\\EnumerationAskTest.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "/** Prints all buffered entities according to their rendering informations. */\n", "func_signal": "public void printBufferedObjects()", "code": "{\n\tComparator<MapEntity> comp = new MapEntityComparator();\n\tCollections.sort(areaBuffer, comp);\n\tif (wayBuffer.size() < 10000)\n\t\tCollections.sort(wayBuffer, comp);\n\tif (nodeBuffer.size() < 10000)\n\t\tCollections.sort(nodeBuffer, comp);\n\tfor (MapWay area: areaBuffer)\n\t\tprintWay(area, (DefaultEntityViewInfo) area.getViewInfo(), true);\n\tfor (MapWay way: wayBuffer)\n\t\tprintWay(way, (DefaultEntityViewInfo) way.getViewInfo(), false);\n\tfor (MapEntity node: nodeBuffer) {\n\t\tMapNode n;\n\t\tif (node instanceof MapWay)\n\t\t\tn = ((MapWay) node).getNodes().get(0);\n\t\telse\n\t\t\tn = (MapNode) node;\n\t\tprintNode(n, (DefaultEntityViewInfo) node.getViewInfo());\n\t}\n\tfor (Track track: trackBuffer)\n\t\tprintTrack(track);\n\n\t// remove identical names at the same place...\n\tHashtable<String, NameInfo> hash = new Hashtable<String, NameInfo>();\n\tfor (int i = nameInfoBuffer.size()-1; i>=0; i--) {\n\t\tNameInfo iNew = nameInfoBuffer.get(i);\n\t\tNameInfo iOld = hash.get(iNew.name);\n\t\tif (iOld == null)\n\t\t\thash.put(iNew.name, iNew);\n\t\telse if (Math.abs(iNew.x-iOld.x)+Math.abs(iNew.y-iOld.y)\n\t\t\t\t< 4*fontSize*displayFactor)\n\t\t\tnameInfoBuffer.remove(i);\n\t}\n\tfor (NameInfo textInfo : nameInfoBuffer) {\n\t\tg2.setColor(textInfo.color);\n\t\tg2.drawString(textInfo.name, textInfo.x, textInfo.y);\n\t}\n}", "path": "java\\aimax-osm\\src\\main\\java\\aimax\\osm\\viewer\\DefaultEntityRenderer.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "//\n// PRIVATE METHODS\n//\n", "func_signal": "private List<BayesNetNode> getVariableNodes()", "code": "{\n\t// TODO dicey initalisation works fine but unclear . clarify\n\tif (variableNodes == null) {\n\t\tList<BayesNetNode> newVariableNodes = new ArrayList<BayesNetNode>();\n\t\tList<BayesNetNode> parents = roots;\n\t\tList<BayesNetNode> traversedParents = new ArrayList<BayesNetNode>();\n\n\t\twhile (parents.size() != 0) {\n\t\t\tList<BayesNetNode> newParents = new ArrayList<BayesNetNode>();\n\t\t\tfor (BayesNetNode parent : parents) {\n\t\t\t\t// if parent unseen till now\n\t\t\t\tif (!(traversedParents.contains(parent))) {\n\t\t\t\t\tnewVariableNodes.add(parent);\n\t\t\t\t\t// add any unseen children to next generation of parents\n\t\t\t\t\tList<BayesNetNode> children = parent.getChildren();\n\t\t\t\t\tfor (BayesNetNode child : children) {\n\t\t\t\t\t\tif (!newParents.contains(child)) {\n\t\t\t\t\t\t\tnewParents.add(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttraversedParents.add(parent);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparents = newParents;\n\t\t}\n\t\tvariableNodes = newVariableNodes;\n\t}\n\n\treturn variableNodes;\n}", "path": "java\\aima-core\\src\\main\\java\\aima\\core\\probability\\BayesNet.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "/**\n * A contrapositive of a chain is a permutation in which a different literal\n * is placed at the front. The contrapositives of a chain are logically\n * equivalent to the original chain.\n * \n * @return a list of contrapositives for this chain.\n */\n", "func_signal": "public List<Chain> getContrapositives()", "code": "{\n\tList<Chain> contrapositives = new ArrayList<Chain>();\n\tList<Literal> lits = new ArrayList<Literal>();\n\n\tfor (int i = 1; i < literals.size(); i++) {\n\t\tlits.clear();\n\t\tlits.add(literals.get(i));\n\t\tlits.addAll(literals.subList(0, i));\n\t\tlits.addAll(literals.subList(i + 1, literals.size()));\n\t\tChain cont = new Chain(lits);\n\t\tcont.setProofStep(new ProofStepChainContrapositive(cont, this));\n\t\tcontrapositives.add(cont);\n\t}\n\n\treturn contrapositives;\n}", "path": "java\\aima-core\\src\\main\\java\\aima\\core\\logic\\fol\\kb\\data\\Chain.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "/**\n * Adds a new agent application / console program demo to the specified menu.\n */\n", "func_signal": "private JMenuItem addAppToMenu(JMenu menu, Class demoClass)", "code": "{\n\tJMenuItem item = new JMenuItem(demoClass.getSimpleName());\n\tJMenu subMenu = null;\n\tString[] pname = demoClass.getPackage().getName().split(\"\\\\.\");\n\tString pn = pname[pname.length-1];\n\tfor (Component comp : menu.getMenuComponents()) {\n\t\tif (((JMenu) comp).getText().equals(pn))\n\t\t\tsubMenu = (JMenu) comp;\n\t}\n\tif (subMenu == null) {\n\t\tsubMenu = new JMenu(pn);\n\t\tmenu.add(subMenu);\n\t}\n\tsubMenu.add(item);\n\treturn item;\n}", "path": "java\\aima-gui\\src\\main\\java\\aima\\gui\\applications\\AimaDemoFrame.java", "repo_name": "zahardzhan/aima", "stars": 7, "license": "None", "language": "java", "size": 9008}
{"docstring": "//end private static void printContainersAndContent () throws IOException, HttpException, FilesAuthorizationException\n", "func_signal": "private static void printContainersAll (boolean humanReadable) throws IOException, HttpException, FilesException", "code": "{\n\t\tFilesClient client = new FilesClient();\n\t\tif ( client.login() )\n\t\t{\n\t\t\tList<FilesContainer> containers = client.listContainers();\n\t\t\tSystem.out.println (client.getAccount() + \" containers: \");\n\t\t\tfor (FilesContainer value: containers )\n\t\t\t{\n\t\t\t\tFilesContainerInfo info = value.getInfo();                \n\t\t\t\tSystem.out.println (\"\\t\"+value.getName ()+\" - \"+info.getObjectCount()+\" objects:\");\n\n\t\t\t\tList<FilesObject> objects = value.getObjects();\n\t\t\t\tfor (FilesObject obj: objects)\n\t\t\t\t{\n\t\t\t\t\tif (humanReadable)\n\t\t\t\t\t\tSystem.out.println (\"\\t\\t\"+StringUtils.rightPad(obj.getName (), 35) + obj.getSizeString());\n\t\t\t\t\telse\n\t\t\t\t\t\tSystem.out.println (\"\\t\\t\"+StringUtils.rightPad(obj.getName (), 35) + obj.getSize()+\"Bytes\");                \n\t\t\t\t}\n\n\t\t\t\tif (humanReadable)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println (\"\\tTotal Size: \"+info.getTotalSize()/1024+\"KB\\n\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tSystem.out.println (\"\\tTotal Size: \"+info.getTotalSize()+\"Bytes\\n\");\n\t\t\t}\n\t\t}\n\t}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\sample\\FilesList.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * @return The MIME type of the object, pulled from the server\n * @throws HttpException\n * @throws IOException\n * @throws FilesAuthorizationException \n * @throws FilesInvalidNameException \n */\n", "func_signal": "public String getMimeType() throws HttpException, IOException, FilesAuthorizationException, FilesInvalidNameException", "code": "{\n    if (mimeType == null) {\n    \tgetMetaData();\n    }\n    return mimeType;\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesObject.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * Calculates the MD5 checksum of an array of data\n * \n * @param data The data to checksum\n * @return The checksum, represented as a base 16 encoded string.\n * @throws IOException\n  */\n", "func_signal": "public static String md5Sum (byte[] data) throws IOException", "code": "{\n\ttry {\n\t\tMessageDigest digest = MessageDigest.getInstance(\"MD5\");\n    \tbyte[] md5sum = digest.digest(data);\n    \tBigInteger bigInt = new BigInteger(1, md5sum);\n\n    \t// Front load any zeros cut off by BigInteger\n    \tString md5 = bigInt.toString(16);\n    \twhile (md5.length() != 32) {\n    \t\tmd5 = \"0\" + md5;\n    \t}\n    \treturn md5;\n\t}\n\tcatch (NoSuchAlgorithmException nsae) {\n\t\tlogger.fatal(\"Major problems with your Java configuration\", nsae);\n\t\treturn null;\n\t}\n\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesClient.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * This method uses the default connection time out of CONNECTON_TIMEOUT and username, password, \n * and account from FilesUtil\n * \n */\n", "func_signal": "public FilesClient()", "code": "{\n    this (FilesUtil.getProperty(\"username\"), \n    \t  FilesUtil.getProperty(\"password\"), \n    \t  FilesUtil.getProperty(\"account\"), \n    \t  FilesUtil.getIntProperty(\"connection_timeout\"));\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesClient.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * Get's the given object's content as a stream\n * \n * @param container  The name of the container\n * @param objName    The name of the object\n * @return An input stream that will give the objects content when read from.\n * @throws IOException   There was an IO error doing network communication\n * @throws HttpException There was an error with the http protocol\n * @throws FilesAuthorizationException \n * @throws FilesInvalidNameException \n */\n", "func_signal": "public InputStream getObjectAsStream (String container, String objName) throws IOException, HttpException, FilesAuthorizationException, FilesInvalidNameException", "code": "{\n\tif (this.isLoggedin())\n\t{\n\t\tif (isValidContianerName(container) && isValidObjectName(objName))\n\t\t{\n\t\t\tif (objName.length() > FilesConstants.OBJECT_NAME_LENGTH)\n\t\t\t{\n\t\t\t\tlogger.warn (\"Object Name supplied was truncated to Max allowed of \" + FilesConstants.OBJECT_NAME_LENGTH + \" characters !\");\n\t\t\t\tobjName = objName.substring(0, FilesConstants.OBJECT_NAME_LENGTH);\n\t\t\t\tlogger.warn (\"Truncated Object Name is: \" + objName);\n\t\t\t}\n\n\t\t\tGetMethod method = new GetMethod(storageURL+\"/\"+sanitizeForURI(container)+\"/\"+sanitizeForURI(objName));\n\t\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\n\t\t\tclient.executeMethod(method);\n\n\t\t\tFilesResponse response = new FilesResponse(method);\n\n\t\t\tif (response.getStatusCode() == HttpStatus.SC_OK)\n\t\t\t{\n\t\t\t\tlogger.info (\"Object data retreived  : \"+objName);\n\t\t\t\treturn response.getResponseBodyAsStream();\n\t\t\t}\n\t\t\telse if (response.getStatusCode() == HttpStatus.SC_NOT_FOUND)\n\t\t\t{\n\t\t\t\tlogger.info (\"Object \" + objName + \" was not found  !\");\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tmethod.releaseConnection();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!isValidObjectName(objName)) {\n\t\t\t\tthrow new FilesInvalidNameException(objName);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new FilesInvalidNameException(container);\n\t\t\t}\n\t\t}\n\t}\n\telse {\n   \t\tthrow new FilesAuthorizationException(\"You must be logged in\", null, null);\n\t}\n\treturn null;\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesClient.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "//end private static void printContainersAndContent () throws IOException, HttpException, FilesAuthorizationException\n", "func_signal": "private static void printContainers (boolean humanReadable) throws IOException, HttpException, FilesException", "code": "{\n\t\tFilesClient client = new FilesClient();\n\t\tif ( client.login() )\n\t\t{\n\t\t\tList<FilesContainer> containers = client.listContainers();\n\t\t\tSystem.out.println (client.getAccount() + \" containers: \");\n\t\t\tfor (FilesContainer value: containers )\n\t\t\t{\n\t\t\t\tFilesContainerInfo info = value.getInfo();\n\t\t\t\tSystem.out.println (\"\\t\"+value.getName ()+\" - \"+info.getObjectCount()+\" objects:\");            \n\n\t\t\t\tif (humanReadable)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println (\"\\tTotal Size: \"+ getSizeString (info.getTotalSize())+\"\\n\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tSystem.out.println (\"\\tTotal Size: \"+info.getTotalSize()+\"Bytes\\n\");                \n\t\t\t}\n\t\t}\n\t}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\sample\\FilesList.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * Gets list of all of the containers associated with this account.\n * \n * @param limit The maximum number of container names to return\n * @param marker All of the names will come after <code>marker</code> lexicographically.\n * @return A list of containers\n * \n * @throws IOException   There was an IO error doing network communication\n * @throws HttpException There was an error with the http protocol\n * @throws FilesException \n */\n", "func_signal": "public List<FilesCDNContainer> listCdnContainerInfo(int limit, String marker) throws IOException, HttpException, FilesException", "code": "{\n\tif (this.isLoggedin())\n\t{\n\t\tGetMethod method = null;\n\t\ttry {\n\t\t\tmethod = new GetMethod(cdnManagementURL);\n\t\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\t\t\tLinkedList<NameValuePair> params = new LinkedList<NameValuePair>();\n\t\t\tparams.add(new NameValuePair(\"format\", \"xml\"));\n\t\t\tif (limit > 0) {\n\t\t\t\tparams.add(new NameValuePair(\"limit\", String.valueOf(limit)));\n\t\t\t}\n\t\t\tif (marker != null) {\n\t\t\t\tparams.add(new NameValuePair(\"marker\", marker));\n\t\t\t}\n\t\t\tmethod.setQueryString(params.toArray(new NameValuePair[params.size()]));\n\t\t\n\t\t\tclient.executeMethod(method);\n\t\t\tFilesResponse response = new FilesResponse(method);\n\n\t\t\tif (response.getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n\t\t\t\tmethod.releaseConnection();\n\t\t\t\tif(login()) {\n\t\t\t\t\tmethod = new GetMethod(cdnManagementURL);\n\t\t\t\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t\t\t\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\t\t\t\t\tmethod.setQueryString(params.toArray(new NameValuePair[params.size()]));\n\t    \t\t\t\n\t\t\t\t\tclient.executeMethod(method);\n\t\t\t\t\tresponse = new FilesResponse(method);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new FilesAuthorizationException(\"Re-login failed\", response.getResponseHeaders(), response.getStatusLine());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (response.getStatusCode() == HttpStatus.SC_OK)\n\t\t\t{\n \t\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n \t\t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n \t\t\t\tDocument document = builder.parse(response.getResponseBodyAsStream());\n\n \t    \t\tNodeList nodes = document.getChildNodes();\n \t    \t\tNode accountNode = nodes.item(0);\n \t    \t\tif (! \"account\".equals(accountNode.getNodeName())) {\n \t    \t\t\tlogger.error(\"Got unexpected type of XML\");\n \t    \t\t\treturn null;\n \t    \t\t}\n \t    \t\tArrayList <FilesCDNContainer> containerList = new ArrayList<FilesCDNContainer>();\n \t    \t\tNodeList containerNodes = accountNode.getChildNodes();\n \t    \t\tfor(int i=0; i < containerNodes.getLength(); ++i) {\n \t    \t\t\tNode containerNode = containerNodes.item(i);\n \t    \t\t\tif(!\"container\".equals(containerNode.getNodeName())) continue;\n \t    \t\t\tFilesCDNContainer container = new FilesCDNContainer();\n \t    \t\t\tNodeList objectData = containerNode.getChildNodes(); \n \t    \t\t\tfor(int j=0; j < objectData.getLength(); ++j) {   \t\t\t\t\t\n \t    \t\t\t\tNode data = objectData.item(j);\n \t    \t\t\t\tif (\"name\".equals(data.getNodeName())) {\n \t    \t\t\t\t\tcontainer.setName(data.getTextContent());\n \t    \t\t\t\t}\n \t    \t\t\t\telse if (\"cdn_url\".equals(data.getNodeName())) {\n \t    \t\t\t\t\tcontainer.setCdnURL(data.getTextContent());\n \t    \t\t\t\t}\n \t    \t\t\t\telse if (\"cdn_enabled\".equals(data.getNodeName())) {\n \t    \t\t\t\t\tcontainer.setEnabled(Boolean.parseBoolean(data.getTextContent()));\n \t    \t\t\t\t}\n \t    \t\t\t\telse if (\"ttl\".equals(data.getNodeName())) {\n \t    \t\t\t\t\tcontainer.setTtl(Integer.parseInt(data.getTextContent()));\n \t    \t\t\t\t}\n \t    \t\t\t\telse {\n \t    \t\t\t\t\t//logger.warn(\"Unexpected container-info tag:\" + data.getNodeName());\n \t    \t\t\t\t}\n \t    \t\t\t}\t\n \t    \t\t\tif (container.getName() != null) {\n \t    \t\t\t\tcontainerList.add(container);\n \t    \t\t\t}\n \t    \t\t}\n \t    \t\treturn containerList;\n\t\t\t}\t\n\t\t\telse if (response.getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n\t\t\t\tlogger.warn(\"Unauthorized access\");\n\t\t\t\tthrow new FilesAuthorizationException(\"User not Authorized!\",response.getResponseHeaders(), response.getStatusLine());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new FilesException(\"Unexpected server response\",response.getResponseHeaders(), response.getStatusLine());\n\t\t\t}\n\t\t}\n\t\tcatch (SAXException ex) {\n\t\t\t// probably a problem parsing the XML\n\t\t\tthrow new FilesException(\"Problem parsing XML\", ex);\n\t\t}\n\t\tcatch (ParserConfigurationException ex) {\n\t\t\t// probably a problem parsing the XML\n\t\t\tthrow new FilesException(\"Problem parsing XML\", ex);\n\t\t}\n\t\tfinally {\n\t\t\tif (method != null) method.releaseConnection();\n\t\t}\n\t}\n\telse {\n\t\tthrow new FilesAuthorizationException(\"You must be logged in\", null, null);\n\t}\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesClient.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * Store a file on the server, including metadata\n * \n * @param container   The name of the container\n * @param obj         The File containing the file to copy over\n * @param contentType The MIME type of the file\n * @param name        The name of the file on the server\n * @param metadata    A map with the metadata as key names and values as the metadata values\n * @param callback    The object to which any callbacks will be sent (null if you don't want callbacks)\n * @throws IOException   There was an IO error doing network communication\n * @throws HttpException There was an error with the http protocol\n * @throws FilesException \n */\n", "func_signal": "public boolean storeObject(String container, byte obj[], String contentType, String name, Map<String,String> metadata, IFilesTransferCallback callback) throws IOException, HttpException, FilesException", "code": "{\n\tif (this.isLoggedin())\n\t{\n\t\tString objName\t =  name;\n\t\tif (isValidContianerName(container) && isValidObjectName(objName))\n\t\t{\n\n\t\t\tPutMethod method = null;\n\t\t\ttry {\n\t\t\t\tmethod = new PutMethod(storageURL+\"/\"+sanitizeForURI(container)+\"/\"+sanitizeForURI(objName));\n\t\t\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t\t\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\t\t\t\tif (useETag) {\n\t\t\t\t\tmethod.setRequestHeader(FilesConstants.E_TAG, md5Sum (obj));\n\t\t\t\t}\n\t\t\t\tmethod.setRequestEntity(new RequestEntityWrapper(new ByteArrayRequestEntity (obj, contentType), callback));\n\t\t\t\tfor(String key : metadata.keySet()) {\n\t\t\t\t\t// logger.warn(\"Key:\" + key + \":\" + sanitizeForURI(metadata.get(key)));\n\t\t\t\t\tmethod.setRequestHeader(FilesConstants.X_OBJECT_META + key, sanitizeForURI(metadata.get(key)));\n\t\t\t\t}\n\t\t\t\tclient.executeMethod(method);\n\t\t\t\tFilesResponse response = new FilesResponse(method);\n\n\t\t\t\tif (response.getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n\t\t\t\t\tmethod.releaseConnection();\n\t\t\t\t\tif(login()) {\n\t\t\t\t\t\tmethod = new PutMethod(storageURL+\"/\"+sanitizeForURI(container)+\"/\"+sanitizeForURI(objName));\n\t\t\t\t\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t\t\t\t\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\t\t\t\t\t\tif (useETag) {\n\t\t\t\t\t\t\tmethod.setRequestHeader(FilesConstants.E_TAG, md5Sum (obj));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmethod.setRequestEntity(new RequestEntityWrapper(new ByteArrayRequestEntity (obj, contentType), callback));\n\t\t\t\t\t\tfor(String key : metadata.keySet()) {\n\t\t\t\t\t\t\tmethod.setRequestHeader(FilesConstants.X_OBJECT_META + key, sanitizeForURI(metadata.get(key)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclient.executeMethod(method);\n\t\t\t\t\t\tresponse = new FilesResponse(method);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow new FilesAuthorizationException(\"Re-login failed\", response.getResponseHeaders(), response.getStatusLine());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (response.getStatusCode() == HttpStatus.SC_CREATED)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse if (response.getStatusCode() == HttpStatus.SC_PRECONDITION_FAILED)\n\t\t\t\t{\n\t\t\t\t\tthrow new FilesException(\"Etag missmatch\", response.getResponseHeaders(), response.getStatusLine());\n\t\t\t\t}\n\t\t\t\telse if (response.getStatusCode() == HttpStatus.SC_LENGTH_REQUIRED)\n\t\t\t\t{\n\t\t\t\t\tthrow new FilesException(\"Length miss-match\", response.getResponseHeaders(), response.getStatusLine());\n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\tthrow new FilesException(\"Unexpected Server Response\", response.getResponseHeaders(), response.getStatusLine());\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally{\n\t\t\t\tif (method != null) method.releaseConnection();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!isValidObjectName(objName)) {\n\t\t\t\tthrow new FilesInvalidNameException(objName);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new FilesInvalidNameException(container);\n\t\t\t}\n\t\t}\n\t}\n\telse {       \t\t\n\t\tthrow new FilesAuthorizationException(\"You must be logged in\", null, null);\n\t}\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesClient.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * Enables access of files in this container via the Content Delivery Network.\n * \n * @param name The name of the container to enable\n * @return The CDN Url of the container\n * @throws IOException   There was an IO error doing network communication\n * @throws HttpException There was an error with the http protocol\n * @throws FilesException There was an error talking to the CDN Server.\n */\n", "func_signal": "public String cdnEnableContainer(String name) throws IOException, HttpException, FilesException", "code": "{\n\tString returnValue = null;\n\tif (this.isLoggedin())\n\t{\n\t\tif (isValidContianerName(name))\n\t\t{\n\t\t\tPutMethod method = null;\n\t\t\ttry {\n\t\t\t\tmethod = new PutMethod(cdnManagementURL+\"/\"+sanitizeForURI(name));\n\t\t\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t\t\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\t\t\t\tclient.executeMethod(method);\n\n\t\t\t\tFilesResponse response = new FilesResponse(method);\n\n\t\t\t\tif (response.getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n\t\t\t\t\tmethod.releaseConnection();\n\t\t\t\t\tif(login()) {\n\t\t\t\t\t\tmethod = new PutMethod(cdnManagementURL+\"/\"+sanitizeForURI(name));\n\t\t\t\t\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t\t\t\t\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\t\t\t\t\t\tclient.executeMethod(method);\n\t\t\t\t\t\tresponse = new FilesResponse(method);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow new FilesAuthorizationException(\"Re-login failed\", response.getResponseHeaders(), response.getStatusLine());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (response.getStatusCode() == HttpStatus.SC_CREATED || response.getStatusCode() == HttpStatus.SC_ACCEPTED)\n\t\t\t\t{\n\t\t\t\t\treturnValue = response.getCdnUrl();\n\t\t\t\t}\n\t\t\t\telse if (response.getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n\t\t\t\t\tlogger.warn(\"Unauthorized access\");\n\t\t\t\t\tthrow new FilesAuthorizationException(\"User not Authorized!\",response.getResponseHeaders(), response.getStatusLine());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new FilesException(\"Unexpected Server Response\",response.getResponseHeaders(), response.getStatusLine());\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\t{\n\t\t\t\tmethod.releaseConnection();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new FilesInvalidNameException(name);\n\t\t}\n\t}\n\telse\n\t\t{\n   \t\tthrow new FilesAuthorizationException(\"You must be logged in\", null, null);\n\t\t}\n\treturn returnValue;\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesClient.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * Returns the size of the object, in bytes\n * \n * @return The size of the object in bytes\n * @throws HttpException\n * @throws IOException\n * @throws FilesAuthorizationException \n * @throws FilesInvalidNameException \n */\n", "func_signal": "public long getSize() throws HttpException, IOException, FilesAuthorizationException, FilesInvalidNameException", "code": "{\n    if (size == -1) {\n    \tgetMetaData();\n    }\n    return size;\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesObject.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * Set's the objects name (up to a maximum of 128 characters)\n * \n * @param name The new name\n */\n", "func_signal": "public void setName(String name)", "code": "{\n    if (name.length() > FilesConstants.OBJECT_NAME_LENGTH)\n    {\n        logger.warn(\"Object name larger than \" + FilesConstants.OBJECT_NAME_LENGTH + \" characters truncating from: \"+name);\n        this.name = name.substring(0, FilesConstants.OBJECT_NAME_LENGTH);\n        logger.warn(\"Object name truncated to : \"+name);\n    }\n    this.name = name;\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesObject.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * Store a file on the server, including metadata\n * \n * @param container   The name of the container\n * @param obj         The File containing the file to copy over\n * @param contentType The MIME type of the file\n * @param name        The name of the file on the server\n * @param metadata    A map with the metadata as key names and values as the metadata values\n * @param metadata    The callback object that will be called as the data is sent\n * @throws IOException   There was an IO error doing network communication\n * @throws HttpException There was an error with the http protocol\n * @throws FilesException \n */\n", "func_signal": "public boolean storeObjectAs (String container, File obj, String contentType, String name, Map<String,String> metadata, IFilesTransferCallback callback) throws IOException, HttpException, FilesException", "code": "{\n\tif (this.isLoggedin())\n\t{\n\t\tif (isValidContianerName(container) && isValidObjectName(name) )\n\t\t{\n\t\t\tif (!obj.exists())\n\t\t\t{\n\t\t\t\tthrow new FileNotFoundException(name + \" does not exist\");\n\t\t\t}\n\n\t\t\tif (obj.isDirectory())\n\t\t\t{\n\t\t\t\tthrow new IOException(\"The alleged file was a directory\");\t\t\t\t\n\t\t\t}\n\n\t\t\tPutMethod method = null;\n\t\t\ttry {\n\t\t\t\tmethod = new PutMethod(storageURL+\"/\"+sanitizeForURI(container)+\"/\"+sanitizeForURI(name));\n\t\t\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t\t\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\t\t\t\tif (useETag) {\n\t\t\t\t\tmethod.setRequestHeader(FilesConstants.E_TAG, md5Sum (obj));\n\t\t\t\t}\n\t\t\t\tmethod.setRequestEntity( new RequestEntityWrapper(new FileRequestEntity (obj, contentType), callback));\n\t\t\t\tfor(String key : metadata.keySet()) {\n\t\t\t\t\tmethod.setRequestHeader(FilesConstants.X_OBJECT_META + key, sanitizeForURI(metadata.get(key)));\n\t\t\t\t}\n\t\t\t\tclient.executeMethod(method);\n\t\t\t\tFilesResponse response = new FilesResponse(method);\n\t\t\t\t\n\t\t\t\tif (response.getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n\t       \t\t\tmethod.releaseConnection();\n\t    \t\t\tif(login()) {\n\t    \t\t\t\tmethod = new PutMethod(storageURL+\"/\"+sanitizeForURI(container)+\"/\"+sanitizeForURI(name));\n\t    \t\t\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t    \t\t\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\t    \t\t\t\tif (useETag) {\n\t    \t\t\t\t\tmethod.setRequestHeader(FilesConstants.E_TAG, md5Sum (obj));\n\t    \t\t\t\t}\n\t    \t\t\t\tmethod.setRequestEntity( new RequestEntityWrapper(new FileRequestEntity (obj, contentType), callback));\n\t    \t\t\t\tfor(String key : metadata.keySet()) {\n\t    \t\t\t\t\tmethod.setRequestHeader(FilesConstants.X_OBJECT_META + key, sanitizeForURI(metadata.get(key)));\n\t    \t\t\t\t}\n\t    \t\t\t\tclient.executeMethod(method);\n\t    \t\t\t\tresponse = new FilesResponse(method);\n\t    \t\t\t}\n\t    \t\t\telse {\n\t    \t\t\t\tthrow new FilesAuthorizationException(\"Re-login failed\", response.getResponseHeaders(), response.getStatusLine());\n\t    \t\t\t}\n\t\t\t\t}\n\t\t\t\tif (response.getStatusCode() == HttpStatus.SC_CREATED)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse if (response.getStatusCode() == HttpStatus.SC_PRECONDITION_FAILED)\n\t\t\t\t{\n\t\t\t\t\tthrow new FilesException(\"Etag missmatch\", response.getResponseHeaders(), response.getStatusLine());\n\t\t\t\t}\n\t\t\t\telse if (response.getStatusCode() == HttpStatus.SC_LENGTH_REQUIRED)\n\t\t\t\t{\n\t\t\t\t\tthrow new FilesException(\"Length miss-match\", response.getResponseHeaders(), response.getStatusLine());\n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\tthrow new FilesException(\"Unexpected Server Response\", response.getResponseHeaders(), response.getStatusLine());\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (method != null) method.releaseConnection();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!isValidObjectName(name)) {\n\t\t\t\tthrow new FilesInvalidNameException(name);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new FilesInvalidNameException(container);\n\t\t\t}\n\t\t}\n\t}\n\telse {\n   \t\tthrow new FilesAuthorizationException(\"You must be logged in\", null, null);\n\t}\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesClient.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * Gets current CDN sharing status of the container\n * \n * @param name The name of the container to enable\n * @return Information on the container\n * @throws IOException   There was an IO error doing network communication\n * @throws HttpException There was an error with the http protocol\n * @throws FilesException There was an error talking to the CloudFiles Server\n */\n", "func_signal": "public FilesCDNContainer getCDNContainerInfo(String container) throws IOException, HttpException, FilesException", "code": "{\n\tif (isLoggedin()) {\n\t\tif (isValidContianerName(container))\n\t\t{\n\t\t\tHeadMethod method = null;\n\t\t\ttry {\n\t\t\t\tmethod= new HeadMethod(cdnManagementURL+\"/\"+sanitizeForURI(container));\n\t\t\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t\t\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\t\t\t\tclient.executeMethod(method);\n\n\t\t\t\tFilesResponse response = new FilesResponse(method);\n\n\t\t\t\tif (response.getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n\t\t\t\t\tmethod.releaseConnection();\n\t\t\t\t\tif(login()) {\n\t\t\t\t\t\tmethod= new HeadMethod(cdnManagementURL+\"/\"+sanitizeForURI(container));\n\t\t\t\t\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t\t\t\t\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\t\t\t\t\t\tclient.executeMethod(method);\n\t\t\t\t\t\tresponse = new FilesResponse(method);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow new FilesAuthorizationException(\"Re-login failed\", response.getResponseHeaders(), response.getStatusLine());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (response.getStatusCode() == HttpStatus.SC_NO_CONTENT)\n\t\t\t\t{\n\t\t\t\t\tFilesCDNContainer result = new FilesCDNContainer(response.getCdnUrl());\n\t\t\t\t\tresult.setName(container);\n\t\t\t\t\tfor (Header hdr : response.getResponseHeaders()) { \n\t\t\t\t\t\tString name = hdr.getName().toLowerCase();\n\t\t\t\t\t\tif (\"x-cdn-enabled\".equals(name)) {\n\t\t\t\t\t\t\tresult.setEnabled(Boolean.valueOf(hdr.getValue()));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (\"x-ttl\".equals(name)) {\n\t\t\t\t\t\t\tresult.setTtl(Integer.parseInt(hdr.getValue()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\telse if (response.getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n\t\t\t\t\tlogger.warn(\"Unauthorized access\");\n\t\t\t\t\tthrow new FilesAuthorizationException(\"User not Authorized!\",response.getResponseHeaders(), response.getStatusLine());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new FilesException(\"Unexpected result from server: \", response.getResponseHeaders(), response.getStatusLine());\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (method != null) {\n\t\t\t\t\tmethod.releaseConnection();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new FilesInvalidNameException(container);\n\t\t}\n\t}\n\telse {\n\t\tthrow new FilesAuthorizationException(\"You must be logged in\", null, null);\n\t}\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesClient.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * Get an object's metadata\n * \n * @param container The name of the container\n * @param objName   The name of the object\n * @return The object's metadata\n * @throws IOException   There was an IO error doing network communication\n * @throws HttpException There was an error with the http protocol\n * @throws FilesAuthorizationException The Client's Login was invalid.  \n * @throws FilesInvalidNameException The container or object name was not valid\n */\n", "func_signal": "public FilesObjectMetaData getObjectMetaData (String container, String objName) throws IOException, HttpException, FilesAuthorizationException, FilesInvalidNameException", "code": "{\n\tFilesObjectMetaData metaData;\n\tif (this.isLoggedin())\n\t{\n\t\tif (isValidContianerName(container) && isValidObjectName(objName))\n\t\t{\n\t\t\tHeadMethod method = new HeadMethod(storageURL+\"/\"+sanitizeForURI(container)+\"/\"+sanitizeForURI(objName));\n\t\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\n\t\t\tclient.executeMethod(method);\n\n\t\t\tFilesResponse response = new FilesResponse(method);\n\n\t\t\tif (response.getStatusCode() == HttpStatus.SC_NO_CONTENT)\n\t\t\t{\n\t\t\t\tlogger.debug (\"Object metadata retreived  : \"+objName);\n\t\t\t\tString mimeType = response.getContentType();\n\t\t\t\tString lastModified = response.getLastModified();\n\t\t\t\tString eTag = response.getETag();\n\t\t\t\tString contentLength = response.getContentLength();\n\n\t\t\t\tmetaData = new FilesObjectMetaData(mimeType, contentLength, eTag, lastModified);\n\n\t\t\t\tHeader [] headers = response.getResponseHeaders();\n\t\t\t\tHashMap<String,String> headerMap = new HashMap<String,String>();\n\n\t\t\t\tfor (Header h: headers)\n\t\t\t\t{\n\t\t\t\t\tif ( h.getName().startsWith(FilesConstants.X_OBJECT_META) )\n\t\t\t\t\t{\n\t\t\t\t\t\theaderMap.put(h.getName().substring(FilesConstants.X_OBJECT_META.length()), unencodeURI(h.getValue()));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (headerMap.size() > 0)\n\t\t\t\t\tmetaData.setMetaData(headerMap);\n\n\t\t\t\treturn metaData;\n\t\t\t}\n\t\t\telse if (response.getStatusCode() == HttpStatus.SC_NOT_FOUND)\n\t\t\t{\n\t\t\t\tlogger.info (\"Object \" + objName + \" was not found  !\");\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tmethod.releaseConnection();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!isValidObjectName(objName)) {\n\t\t\t\tthrow new FilesInvalidNameException(objName);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new FilesInvalidNameException(container);\n\t\t\t}\n\t\t}\n\t}\n\telse {\n   \t\tthrow new FilesAuthorizationException(\"You must be logged in\", null, null);\n\t}\n\treturn null;\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesClient.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * List the containers available in an account, ordered by container name.\n *\n *  @param limit The maximum number of containers to return.  -1 returns an unlimited number.\n\t *  @param marker Return containers that occur after this lexicographically.  \n\t *  \n *  @return null if the user is not logged in or the Account is not found.  A List of FSContainers with all of the containers in the account.  \n *         if there are no containers in the account, the list will be zero length.\n * @throws IOException   There was an IO error doing network communication\n * @throws HttpException There was an error with the http protocol\n * @throws FilesException There was another error in the request to the server.\n * @throws FilesAuthorizationException The client's login was invalid.\n */\n", "func_signal": "public List<FilesContainerInfo> listContainersInfo(int limit, String marker) throws IOException, HttpException, FilesAuthorizationException, FilesException", "code": "{\n\tif (!this.isLoggedin()) {\n\t\tthrow new FilesAuthorizationException(\"You must be logged in\", null, null);\n\t}\n\tGetMethod method = null;\n\ttry {\n\t\tmethod = new GetMethod(storageURL);\n\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\n\t\tLinkedList<NameValuePair> parameters = new LinkedList<NameValuePair>();\n   \t\tif(limit > 0) {\n\t\t\tparameters.add(new NameValuePair(\"limit\", String.valueOf(limit)));\n\t\t}\n   \t\tif(marker != null) {\n\t\t\tparameters.add(new NameValuePair(\"marker\", marker));\n\t\t}\n   \t\tparameters.add(new NameValuePair(\"format\", \"xml\"));\n   \t\tmethod.setQueryString(parameters.toArray(new NameValuePair[parameters.size()]));\n\t\t\tclient.executeMethod(method);\n\t\tFilesResponse response = new FilesResponse(method);\n\t\t\n\t\tif (response.getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n\t\t\tmethod.removeRequestHeader(FilesConstants.X_AUTH_TOKEN);\n\t\t\tif(login()) {\n\t\t\t\tmethod = new GetMethod(storageURL);\n\t    \t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t    \t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\t    \t\tmethod.setQueryString(parameters.toArray(new NameValuePair[parameters.size()]));\n\t\t\t\tclient.executeMethod(method);\n\t\t\t\tresponse = new FilesResponse(method);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new FilesAuthorizationException(\"Re-login failed\", response.getResponseHeaders(), response.getStatusLine());\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (response.getStatusCode() == HttpStatus.SC_OK)\n\t\t{\n\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\t\tDocument document = builder.parse(response.getResponseBodyAsStream());\n\n\t\t\tNodeList nodes = document.getChildNodes();\n\t\t\tNode accountNode = nodes.item(0);\n\t\t\tif (! \"account\".equals(accountNode.getNodeName())) {\n\t\t\t\tlogger.error(\"Got unexpected type of XML\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tArrayList <FilesContainerInfo> containerList = new ArrayList<FilesContainerInfo>();\n\t\t\tNodeList containerNodes = accountNode.getChildNodes();\n\t\t\tfor(int i=0; i < containerNodes.getLength(); ++i) {\n\t\t\t\tNode containerNode = containerNodes.item(i);\n\t\t\t\tif(!\"container\".equals(containerNode.getNodeName())) continue;\n\t\t\t\tString name = null;\n\t\t\t\tint count = -1;\n\t\t\t\tlong size = -1;\n\t\t\t\tNodeList objectData = containerNode.getChildNodes(); \n\t\t\t\tfor(int j=0; j < objectData.getLength(); ++j) {   \t\t\t\t\t\n\t\t\t\t\tNode data = objectData.item(j);\n\t\t\t\t\tif (\"name\".equals(data.getNodeName())) {\n\t\t\t\t\t\tname = data.getTextContent();\n\t\t\t\t\t}\n\t\t\t\t\telse if (\"bytes\".equals(data.getNodeName())) {\n\t\t\t\t\t\tsize = Long.parseLong(data.getTextContent());\n\t\t\t\t\t}\n\t\t\t\t\telse if (\"count\".equals(data.getNodeName())) {\n\t\t\t\t\t\tcount = Integer.parseInt(data.getTextContent());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlogger.warn(\"Unexpected container-info tag:\" + data.getNodeName());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (name != null) {\n\t\t\t\t\tFilesContainerInfo obj = new FilesContainerInfo(name, count, size);\n\t\t\t\t\tcontainerList.add(obj);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn containerList;\n\t\t}\t\t\n\t\telse if (response.getStatusCode() == HttpStatus.SC_NO_CONTENT)\n\t\t{\t\n\t\t\treturn new ArrayList<FilesContainerInfo>();\n\t\t}\n\t\telse if (response.getStatusCode() == HttpStatus.SC_NOT_FOUND)\n\t\t{\n\t\t\tthrow new FilesNotFoundException(\"Account not Found\", response.getResponseHeaders(), response.getStatusLine());\n\t\t}\n\t\telse {\n\t\t\tthrow new FilesException(\"Unexpected Return Code\", response.getResponseHeaders(), response.getStatusLine());\n\t\t}\n\t}\n\tcatch (Exception ex) {\n\t\tthrow new FilesException(\"Unexpected problem, probably in parsing Server XML\", ex);\n\t}\n\tfinally {\n\t\tif (method != null)\n\t\t\tmethod.releaseConnection();\n\t}\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesClient.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * Gets information for the given account.\n * \n * @return The FilesAccountInfo with information about the number of containers and number of bytes used\n *         by the given account.\n * @throws IOException   There was an IO error doing network communication\n * @throws HttpException There was an error with the http protocol\n * @throws FilesException There was another error in the request to the server.\n * @throws FilesAuthorizationException The client's login was invalid.\n */\n", "func_signal": "public FilesAccountInfo getAccountInfo() throws IOException, HttpException, FilesAuthorizationException, FilesException", "code": "{\n\tif (this.isLoggedin()) {\n\t\t\tHeadMethod method = new HeadMethod(storageURL);\n\t\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\t\t\tclient.executeMethod(method);\n\n\t\t\tFilesResponse response = new FilesResponse(method);\n   \t\tif (response.getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n\t\t\tmethod.removeRequestHeader(FilesConstants.X_AUTH_TOKEN);\n\t\t\tif(login()) {\n\t\t\t\tmethod = new HeadMethod(storageURL);\n\t\t\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t\t\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\t\t\t\tclient.executeMethod(method);\n\t\t\t\tresponse = new FilesResponse(method);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new FilesAuthorizationException(\"Re-login failed\", response.getResponseHeaders(), response.getStatusLine());\n\t\t\t}\n\t\t}\n\n\t\t\tif (response.getStatusCode() == HttpStatus.SC_NO_CONTENT)\n\t\t\t{\n\t\t\t\tint nContainers = response.getAccountContainerCount();\n\t\t\t\tlong totalSize  = response.getAccountBytesUsed();\n\t\t\t\treturn new FilesAccountInfo(totalSize,nContainers);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new FilesException(\"Unexpected return from server\", response.getResponseHeaders(), response.getStatusLine());\n\t\t\t}\n\t}\n\telse {\n   \t\tthrow new FilesAuthorizationException(\"You must be logged in\", null, null);\n\t}\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesClient.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * Deletes a container\n * \n * @param name  The name of the container\n * @throws IOException   There was an IO error doing network communication\n * @throws HttpException There was an error with the http protocol\n * @throws FilesAuthorizationException The user is not Logged in\n * @throws FilesInvalidNameException   The container name is invalid\n * @throws FilesNotFoundException      The container doesn't exist\n * @throws FilesContainerNotEmptyException The container was not empty\n */\n", "func_signal": "public boolean deleteContainer(String name) throws IOException, HttpException, FilesAuthorizationException, FilesInvalidNameException, FilesNotFoundException, FilesContainerNotEmptyException", "code": "{\n\tif (this.isLoggedin())\n\t{\n\t\tif (isValidContianerName(name))\n\t\t{\n\t\t\tDeleteMethod method = new DeleteMethod(storageURL+\"/\"+sanitizeForURI(name));\n\t\t\ttry {\n\t\t\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t   \t\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n    \t\t\tclient.executeMethod(method);\n    \t\t\tFilesResponse response = new FilesResponse(method);\n\n\t       \t\tif (response.getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n\t       \t\t\tmethod.releaseConnection();\n\t    \t\t\tif(login()) {\n\t    \t   \t\t\tmethod = new DeleteMethod(storageURL+\"/\"+sanitizeForURI(name));\n\t    \t\t\t\tmethod.getParams().setSoTimeout(connectionTimeOut);\n\t    \t   \t\t\tmethod.setRequestHeader(FilesConstants.X_AUTH_TOKEN, authToken);\n\t        \t\t\tclient.executeMethod(method);\n\t    \t\t\t\tresponse = new FilesResponse(method);\n\t    \t\t\t}\n\t    \t\t\telse {\n\t    \t\t\t\tthrow new FilesAuthorizationException(\"Re-login failed\", response.getResponseHeaders(), response.getStatusLine());\n\t    \t\t\t}\n\t    \t\t}\n\n\t       \t\tif (response.getStatusCode() == HttpStatus.SC_NO_CONTENT)\n    \t\t\t{\n    \t\t\t\tlogger.debug (\"Container Deleted : \"+name);\n    \t\t\t\treturn true;\n    \t\t\t}\n    \t\t\telse if (response.getStatusCode() == HttpStatus.SC_NOT_FOUND)\n    \t\t\t{\n    \t\t\t\tlogger.debug (\"Container does not exist !\");\n       \t\t\t\tthrow new FilesNotFoundException(\"You can't delete an non-empty container\", response.getResponseHeaders(), response.getStatusLine());\n    \t\t\t}\n    \t\t\telse if (response.getStatusCode() == HttpStatus.SC_CONFLICT)\n    \t\t\t{\n    \t\t\t\tlogger.debug (\"Container is not empty, can not delete a none empty container !\");\n    \t\t\t\tthrow new FilesContainerNotEmptyException(\"You can't delete an non-empty container\", response.getResponseHeaders(), response.getStatusLine());\n    \t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tmethod.releaseConnection();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n       \t\tthrow new FilesInvalidNameException(name);\n\t\t}\n\t}\n\t\telse\n\t\t{\n   \t\tthrow new FilesAuthorizationException(\"You must be logged in\", null, null);\n\t\t}\n\treturn false;\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesClient.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * Get's the MD5 Checksum for this object \n * \n * @return The MD5 checksum, returned as a base 16 encoded string\n * @throws HttpException\n * @throws IOException\n * @throws FilesAuthorizationException \n * @throws FilesInvalidNameException \n */\n", "func_signal": "public String getMd5sum() throws HttpException, IOException, FilesAuthorizationException, FilesInvalidNameException", "code": "{\n    if (md5sum == null) {\n    \tgetMetaData();\n    }\n    return md5sum;\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesObject.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * Convenience method to test for the existence of a container in Cloud Files.\n * \n * @param container\n * @return true if the container exists.  false otherwise.\n * @throws IOException\n * @throws IOException   There was an IO error doing network communication\n * @throws HttpException There was an error with the http protocol\n */\n", "func_signal": "public boolean containerExists (String container) throws IOException, HttpException", "code": "{\n    try {\n    \tthis.getContainerInfo(container);\n    \treturn true;\n    }\n    catch(FilesException fnfe) {\n    \treturn false;\n    }\n }", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesClient.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * Encode any unicode characters that will cause us problems.\n * \n * @param str\n * @return The string encoded for a URI\n */\n", "func_signal": "public static String sanitizeForURI(String str)", "code": "{\n\tURLCodec codec= new URLCodec();\n\ttry {\n\t\treturn codec.encode(str).replaceAll(\"\\\\+\", \"%20\").replaceAll(\"%2F\", \"/\");\n\t}\n\tcatch (EncoderException ee) {\n\t\tlogger.warn(\"Error trying to encode string for URI\", ee);\n\t\treturn str;\n\t}\n}", "path": "src\\main\\java\\com\\mosso\\client\\cloudfiles\\FilesClient.java", "repo_name": "denwill/java-cloudfiles", "stars": 4, "license": "other", "language": "java", "size": 2343}
{"docstring": "/**\n * Sets the eGL config chooser.\n *\n * @param configChooser the new eGL config chooser\n */\n", "func_signal": "public void setEGLConfigChooser(EGLConfigChooser configChooser)", "code": "{\n    checkRenderThreadState();\n    mEGLConfigChooser = configChooser;\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\GLWallpaperService.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "//\n// Create direct buffers objects...\n//\n/**\n * Builds the buffers.\n */\n", "func_signal": "private void buildBuffers()", "code": "{\n    vertices_direct = ByteBuffer.allocateDirect(vertices.length\n            * (Float.SIZE >> 3));\n    vertices_direct.order(ByteOrder.nativeOrder());\n    vertices_buffer = vertices_direct.asFloatBuffer();\n\n    faces_direct = ByteBuffer.allocateDirect(faces.length\n            * (Short.SIZE >> 3));\n    faces_direct.order(ByteOrder.nativeOrder());\n    faces_buffer = faces_direct.asShortBuffer();\n\n    colors_buffer = ByteBuffer.allocateDirect(colors.length);\n\n    texture_direct = ByteBuffer.allocateDirect(texture.length\n            * (Float.SIZE >> 3));\n    texture_direct.order(ByteOrder.nativeOrder());\n    texture_buffer = texture_direct.asFloatBuffer();\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\Tunnel3D.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "//\n// Blit faces data in garbage memory into direct memory heap (buffers)...\n//\n/**\n * Fill faces.\n */\n", "func_signal": "private void fillFaces()", "code": "{\n    faces_buffer.clear();\n    faces_buffer.put(faces);\n    faces_buffer.position(0);\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\Tunnel3D.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "/**\n * Surface created.\n *\n * @param holder the holder\n */\n", "func_signal": "public void surfaceCreated(SurfaceHolder holder)", "code": "{\n    mHolder = holder;\n    synchronized (sGLThreadManager) {\n        if (LOG_THREADS) {\n            Log.i(\"GLThread\", \"surfaceCreated tid=\" + getId());\n        }\n        mHasSurface = true;\n        sGLThreadManager.notifyAll();\n    }\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\GLWallpaperService.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "/**\n * This private method should only be called inside a\n * synchronized(sGLThreadManager) block.\n */\n", "func_signal": "private void stopEglLocked()", "code": "{\n    if (mHaveEgl) {\n        mHaveEgl = false;\n        mEglHelper.destroySurface();\n        sGLThreadManager.releaseEglSurface(this);\n    }\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\GLWallpaperService.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "/* (non-Javadoc)\n * @see android.service.wallpaper.WallpaperService.Engine#onSurfaceDestroyed(android.view.SurfaceHolder)\n */\n", "func_signal": "@Override\npublic void onSurfaceDestroyed(SurfaceHolder holder)", "code": "{\n    Log.d(TAG, \"onSurfaceDestroyed()\");\n    mGLThread.surfaceDestroyed();\n    super.onSurfaceDestroyed(holder);\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\GLWallpaperService.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "/**\n * Request exit and wait.\n */\n", "func_signal": "public void requestExitAndWait()", "code": "{\n    // don't call this from GLThread thread or it is a guaranteed\n    // deadlock!\n    synchronized (sGLThreadManager) {\n        mDone = true;\n        sGLThreadManager.notifyAll();\n    }\n    try {\n        join();\n    } catch (InterruptedException ex) {\n        Thread.currentThread().interrupt();\n    }\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\GLWallpaperService.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "/**\n * Creates a new DefaultWindowSurface object.\n *\n * @param egl the egl\n * @param display the display\n * @param config the config\n * @param nativeWindow the native window\n * @return the EGL surface\n * @see com.mobilebytes.drwholivewallpaper.EGLWindowSurfaceFactory#createWindowSurface(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, java.lang.Object)\n */\n", "func_signal": "public EGLSurface createWindowSurface(EGL10 egl, EGLDisplay display,\n            EGLConfig config, Object nativeWindow)", "code": "{\n        // this is a bit of a hack to work around Droid init problems - if you\n        // don't have this, it'll get hung up on orientation changes\n        EGLSurface eglSurface = null;\n        while (eglSurface == null) {\n            try {\n                eglSurface = egl.eglCreateWindowSurface(display, config,\n                        nativeWindow, null);\n            } catch (Throwable t) {\n            } finally {\n                if (eglSurface == null) {\n                    try {\n                        Thread.sleep(10);\n                    } catch (InterruptedException t) {\n                    }\n                }\n            }\n        }\n        return eglSurface;\n    }", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\GLWallpaperService.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "/**\n * Choose config.\n *\n * @param egl the egl\n * @param display the display\n * @return the eGL config\n * @see com.mobilebytes.drwholivewallpaper.EGLConfigChooser#chooseConfig(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay)\n */\n", "func_signal": "public EGLConfig chooseConfig(EGL10 egl, EGLDisplay display)", "code": "{\n    int[] num_config = new int[1];\n    egl.eglChooseConfig(display, mConfigSpec, null, 0, num_config);\n\n    int numConfigs = num_config[0];\n\n    if (numConfigs <= 0) {\n        throw new IllegalArgumentException(\"No configs match configSpec\");\n    }\n\n    EGLConfig[] configs = new EGLConfig[numConfigs];\n    egl.eglChooseConfig(display, mConfigSpec, configs, numConfigs,\n            num_config);\n    EGLConfig config = chooseConfig(egl, display, configs);\n    if (config == null) {\n        throw new IllegalArgumentException(\"No config chosen\");\n    }\n    return config;\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\GLWallpaperService.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "/**\n * Sets the renderer.\n *\n * @param renderer the new renderer\n */\n", "func_signal": "public void setRenderer(Renderer renderer)", "code": "{\n    checkRenderThreadState();\n    if (mEGLConfigChooser == null) {\n        mEGLConfigChooser = new SimpleEGLConfigChooser(true);\n    }\n    if (mEGLContextFactory == null) {\n        mEGLContextFactory = new DefaultContextFactory();\n    }\n    if (mEGLWindowSurfaceFactory == null) {\n        mEGLWindowSurfaceFactory = new DefaultWindowSurfaceFactory();\n    }\n    mGLThread = new GLThread(renderer, mEGLConfigChooser,\n            mEGLContextFactory, mEGLWindowSurfaceFactory, mGLWrapper);\n    mGLThread.start();\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\GLWallpaperService.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "//\n// Blit vertex data in garbage memory into direct memory heap (buffers)...\n//\n/**\n * Fill vertex.\n */\n", "func_signal": "private void fillVertex()", "code": "{\n    vertices_buffer.clear();\n    vertices_buffer.put(vertices);\n    vertices_buffer.position(0);\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\Tunnel3D.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "/**\n * Checks if is done.\n *\n * @return true, if is done\n */\n", "func_signal": "private boolean isDone()", "code": "{\n    synchronized (sGLThreadManager) {\n        return mDone;\n    }\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\GLWallpaperService.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "/**\n * Instantiates a new tunnel3 d.\n *\n * @param revolution the revolution\n * @param depth the depth\n */\n", "func_signal": "public Tunnel3D(int revolution, int depth)", "code": "{\n    start_a = 0;\n    start_v = 0;\n\n    // Calculate number of vertices...\n    nx = revolution;\n    ny = depth;\n    nv = nx * ny;\n\n    // Allocate arrays...\n    colors = new byte[nv * 3];\n    vertices = new float[nv * 3];\n    faces = new short[((nx + 1) * (ny - 1)) << 1];\n    texture = new float[nv * 2];\n\n    // Generate object data...\n    genVertex();\n    genFaces();\n    genColors();\n    genTexture();\n\n    // Build direct buffer objects...\n    buildBuffers();\n\n    // Blit data...\n    fillVertex();\n    fillFaces();\n    fillColors();\n    fillTexture();\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\Tunnel3D.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "/**\n * Destroy surface.\n */\n", "func_signal": "public void destroySurface()", "code": "{\n    if ((mEglSurface != null) && (mEglSurface != EGL10.EGL_NO_SURFACE)) {\n        mEgl.eglMakeCurrent(mEglDisplay, EGL10.EGL_NO_SURFACE,\n                EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_CONTEXT);\n        mEGLWindowSurfaceFactory.destroySurface(mEgl, mEglDisplay,\n                mEglSurface);\n        mEglSurface = null;\n    }\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\GLWallpaperService.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "/* (non-Javadoc)\n * @see android.service.wallpaper.WallpaperService.Engine#onSurfaceCreated(android.view.SurfaceHolder)\n */\n", "func_signal": "@Override\npublic void onSurfaceCreated(SurfaceHolder holder)", "code": "{\n    Log.d(TAG, \"onSurfaceCreated()\");\n    mGLThread.surfaceCreated(holder);\n    super.onSurfaceCreated(holder);\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\GLWallpaperService.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "/* (non-Javadoc)\n * @see android.service.wallpaper.WallpaperService.Engine#onDestroy()\n */\n", "func_signal": "@Override\npublic void onDestroy()", "code": "{\n    super.onDestroy();\n    // Log.d(TAG, \"GLEngine.onDestroy()\");\n    mGLThread.requestExitAndWait();\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\GLWallpaperService.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "//\n// Generate texture data (UV) for the tunnel...\n//\n/**\n * Gen texture.\n */\n", "func_signal": "private void genTexture()", "code": "{\n    int i = 0;\n    float delta_x = 1.0f / nx;\n    float delta_y = 1.0f / ny;\n\n    for (int y = 0; y < ny; y++) {\n        for (int x = 0; x < nx; x++) {\n            texture[i + 0] = x * delta_x;\n            texture[i + 1] = y * delta_y;\n            i += 2;\n        }\n    }\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\Tunnel3D.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "/**\n * Find config attrib.\n *\n * @param egl the egl\n * @param display the display\n * @param config the config\n * @param attribute the attribute\n * @param defaultValue the default value\n * @return the int\n */\n", "func_signal": "private int findConfigAttrib(EGL10 egl, EGLDisplay display,\n        EGLConfig config, int attribute, int defaultValue)", "code": "{\n\n    if (egl.eglGetConfigAttrib(display, config, attribute, mValue)) {\n        return mValue[0];\n    }\n    return defaultValue;\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\GLWallpaperService.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "/**\n * On resume.\n */\n", "func_signal": "public void onResume()", "code": "{\n    synchronized (sGLThreadManager) {\n        mPaused = false;\n        mRequestRender = true;\n        sGLThreadManager.notifyAll();\n    }\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\GLWallpaperService.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "/**\n * Tries once to acquire the right to use an EGL surface. Does not\n * block.\n *\n * @param thread the thread\n * @return true if the right to use an EGL surface was acquired.\n */\n", "func_signal": "public synchronized boolean tryAcquireEglSurface(GLThread thread)", "code": "{\n    if ((mEglOwner == thread) || (mEglOwner == null)) {\n        mEglOwner = thread;\n        notifyAll();\n        return true;\n    }\n    return false;\n}", "path": "src\\com\\mobilebytes\\drwholivewallpaper\\GLWallpaperService.java", "repo_name": "fredgrott/DrWhoLiveWallpaper", "stars": 7, "license": "None", "language": "java", "size": 4004}
{"docstring": "/**\n * Append a value.\n * @param s A string value.\n * @return this\n * @throws JSONException If the value is out of sequence.\n */\n", "func_signal": "private JSONWriter append(String s) throws JSONException", "code": "{\n    if (s == null) {\n        throw new JSONException(\"Null pointer\");\n    }\n    if (this.mode == 'o' || this.mode == 'a') {\n        try {\n            if (this.comma && this.mode == 'a') {\n                this.writer.write(',');\n            }\n            this.writer.write(s);\n        } catch (IOException e) {\n            throw new JSONException(e);\n        }\n        if (this.mode == 'o') {\n            this.mode = 'k';\n        }\n        this.comma = true;\n        return this;\n    }\n    throw new JSONException(\"Value out of sequence.\");\n}", "path": "src\\main\\java\\org\\json\\JSONWriter.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * create vector of given size with given probability of binary event\n *\n * @param size\n * @param p\n */\n", "func_signal": "public SparseBinaryVector(int size, double p)", "code": "{\n    super(size);\n    init(p);\n}", "path": "src\\main\\java\\com\\voidsearch\\voidbase\\quant\\vector\\SparseBinaryVector.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * Convert a JSONObject into a cookie list. A cookie list is a sequence\n * of name/value pairs. The names are separated from the values by '='.\n * The pairs are separated by ';'. The characters '%', '+', '=', and ';'\n * in the names and values are replaced by \"%hh\".\n * @param o A JSONObject\n * @return A cookie list string\n * @throws JSONException\n */\n", "func_signal": "public static String toString(JSONObject o) throws JSONException", "code": "{\n    boolean      b = false;\n    Iterator     keys = o.keys();\n    String       s;\n    StringBuffer sb = new StringBuffer();\n    while (keys.hasNext()) {\n        s = keys.next().toString();\n        if (!o.isNull(s)) {\n            if (b) {\n                sb.append(';');\n            }\n            sb.append(Cookie.escape(s));\n            sb.append(\"=\");\n            sb.append(Cookie.escape(o.getString(s)));\n            b = true;\n        }\n    }\n    return sb.toString();\n}", "path": "src\\main\\java\\org\\json\\CookieList.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * Make a fresh JSONWriter. It can be used to build one JSON text.\n */\n", "func_signal": "public JSONWriter(Writer w)", "code": "{\n    this.comma = false;\n    this.mode = 'i';\n    this.stack = new JSONObject[maxdepth];\n    this.top = 0;\n    this.writer = w;\n}", "path": "src\\main\\java\\org\\json\\JSONWriter.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * Append a key. The key will be associated with the next value. In an\n * object, every value must be preceded by a key.\n * @param s A key string.\n * @return this\n * @throws JSONException If the key is out of place. For example, keys\n *  do not belong in arrays or if the key is null.\n */\n", "func_signal": "public JSONWriter key(String s) throws JSONException", "code": "{\n    if (s == null) {\n        throw new JSONException(\"Null key.\");\n    }\n    if (this.mode == 'k') {\n        try {\n            stack[top - 1].putOnce(s, Boolean.TRUE);\n            if (this.comma) {\n                this.writer.write(',');\n            }\n            this.writer.write(JSONObject.quote(s));\n            this.writer.write(':');\n            this.comma = false;\n            this.mode = 'o';\n            return this;\n        } catch (IOException e) {\n            throw new JSONException(e);\n        }\n    }\n    throw new JSONException(\"Misplaced key.\");\n}", "path": "src\\main\\java\\org\\json\\JSONWriter.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * Convert a JSONObject into a cookie specification string. The JSONObject\n * must contain \"name\" and \"value\" members.\n * If the JSONObject contains \"expires\", \"domain\", \"path\", or \"secure\"\n * members, they will be appended to the cookie specification string.\n * All other members are ignored.\n * @param o A JSONObject\n * @return A cookie specification string\n * @throws JSONException\n */\n", "func_signal": "public static String toString(JSONObject o) throws JSONException", "code": "{\n    StringBuffer sb = new StringBuffer();\n\n    sb.append(escape(o.getString(\"name\")));\n    sb.append(\"=\");\n    sb.append(escape(o.getString(\"value\")));\n    if (o.has(\"expires\")) {\n        sb.append(\";expires=\");\n        sb.append(o.getString(\"expires\"));\n    }\n    if (o.has(\"domain\")) {\n        sb.append(\";domain=\");\n        sb.append(escape(o.getString(\"domain\")));\n    }\n    if (o.has(\"path\")) {\n        sb.append(\";path=\");\n        sb.append(escape(o.getString(\"path\")));\n    }\n    if (o.optBoolean(\"secure\")) {\n        sb.append(\";secure\");\n    }\n    return sb.toString();\n}", "path": "src\\main\\java\\org\\json\\Cookie.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * Begin appending a new array. All values until the balancing\n * <code>endArray</code> will be appended to this array. The\n * <code>endArray</code> method must be called to mark the array's end.\n * @return this\n * @throws JSONException If the nesting is too deep, or if the object is\n * started in the wrong place (for example as a key or after the end of the\n * outermost array or object).\n */\n", "func_signal": "public JSONWriter array() throws JSONException", "code": "{\n    if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {\n        this.push(null);\n        this.append(\"[\");\n        this.comma = false;\n        return this;\n    }\n    throw new JSONException(\"Misplaced array.\");\n}", "path": "src\\main\\java\\org\\json\\JSONWriter.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * Begin appending a new object. All keys and values until the balancing\n * <code>endObject</code> will be appended to this object. The\n * <code>endObject</code> method must be called to mark the object's end.\n * @return this\n * @throws JSONException If the nesting is too deep, or if the object is\n * started in the wrong place (for example as a key or after the end of the\n * outermost array or object).\n */\n", "func_signal": "public JSONWriter object() throws JSONException", "code": "{\n    if (this.mode == 'i') {\n        this.mode = 'o';\n    }\n    if (this.mode == 'o' || this.mode == 'a') {\n        this.append(\"{\");\n        this.push(new JSONObject());\n        this.comma = false;\n        return this;\n    }\n    throw new JSONException(\"Misplaced object.\");\n\n}\n\n\n/**\n * Pop an array or object scope.\n * @param c The scope to close.\n * @throws JSONException If nesting is wrong.\n */\nprivate void pop(char c) throws JSONException {\n    if (this.top <= 0) {\n        throw new JSONException(\"Nesting error.\");\n    }\n    char m = this.stack[this.top - 1] == null ? 'a' : 'k';\n    if (m != c) {\n        throw new JSONException(\"Nesting error.\");\n    }\n    this.top -= 1;\n    this.mode = this.top == 0 ? 'd' : this.stack[this.top - 1] == null ? 'a' : 'k';\n}\n\n/**\n * Push an array or object scope.\n * @param c The scope to open.\n * @throws JSONException If nesting is too deep.\n */\nprivate void push(JSONObject jo) throws JSONException {\n    if (this.top >= maxdepth) {\n        throw new JSONException(\"Nesting too deep.\");\n    }\n    this.stack[this.top] = jo;\n    this.mode = jo == null ? 'a' : 'k';\n    this.top += 1;\n}\n\n\n/**\n * Append either the value <code>true</code> or the value\n * <code>false</code>.\n * @param b A boolean.\n * @return this\n * @throws JSONException\n */\npublic JSONWriter value(boolean b) throws JSONException {\n    return this.append(b ? \"true\" : \"false\");\n}\n\n/**\n * Append a double value.\n * @param d A double.\n * @return this\n * @throws JSONException If the number is not finite.\n */\npublic JSONWriter value(double d) throws JSONException {\n    return this.value(new Double(d));\n}\n\n/**\n * Append a long value.\n * @param l A long.\n * @return this\n * @throws JSONException\n */\npublic JSONWriter value(long l) throws JSONException {\n    return this.append(Long.toString(l));\n}\n\n\n/**\n * Append an object value.\n * @param o The object to append. It can be null, or a Boolean, Number,\n *   String, JSONObject, or JSONArray, or an object with a toJSONString()\n *   method.\n * @return this\n * @throws JSONException If the value is out of sequence.\n */\npublic JSONWriter value(Object o) throws JSONException {\n    return this.append(JSONObject.valueToString(o));\n}\n}", "path": "src\\main\\java\\org\\json\\JSONWriter.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * Convert a cookie list into a JSONObject. A cookie list is a sequence\n * of name/value pairs. The names are separated from the values by '='.\n * The pairs are separated by ';'. The names and the values\n * will be unescaped, possibly converting '+' and '%' sequences.\n *\n * To add a cookie to a cooklist,\n * cookielistJSONObject.put(cookieJSONObject.getString(\"name\"),\n *     cookieJSONObject.getString(\"value\"));\n * @param string  A cookie list string\n * @return A JSONObject\n * @throws JSONException\n */\n", "func_signal": "public static JSONObject toJSONObject(String string) throws JSONException", "code": "{\n    JSONObject o = new JSONObject();\n    JSONTokener x = new JSONTokener(string);\n    while (x.more()) {\n        String name = Cookie.unescape(x.nextTo('='));\n        x.next('=');\n        o.put(name, Cookie.unescape(x.nextTo(';')));\n        x.next();\n    }\n    return o;\n}", "path": "src\\main\\java\\org\\json\\CookieList.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "//\n// CONVERT UTILS\n//\n", "func_signal": "public static String toString(Object o)", "code": "{\n\n  if (o.getClass() == String.class) {\n    return (String)o;\n  }\n  if (o.getClass() == Integer.class) {\n    return Integer.toString((Integer)o);\n  }\n  if (o.getClass() == Long.class) {\n    return Long.toString((Long)o);\n  }\n  if (o.getClass() == Double.class) {\n    return Double.toString((Double)o);\n  }\n  if (o.getClass() == Float.class) {\n    return Float.toString((Float)o);\n  }\n\n  return null;\n}", "path": "src\\main\\java\\com\\voidsearch\\voidbase\\util\\GenericUtil.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * Reverse the JSONML transformation, making an XML text from a JSONArray.\n * @param ja A JSONArray.\n * @return An XML string.\n * @throws JSONException\n */\n", "func_signal": "public static String toString(JSONArray ja) throws JSONException", "code": "{\n\tObject\t\t e;\n\tint\t\t\t i;\n\tJSONObject   jo;\n\tString       k;\n\t    Iterator     keys;\n\t    int\t\t\t length;\n\tStringBuffer sb = new StringBuffer();\n\t    String       tagName;\n\t    String       v;\n\t    \n// Emit <tagName\t    \n\t\n\ttagName = ja.getString(0);\n\t\tXML.noSpace(tagName);\n\t\ttagName = XML.escape(tagName);\n\t\tsb.append('<');\n\t\tsb.append(tagName);\n\t\t\n\t\te = ja.opt(1);\n\t\tif (e instanceof JSONObject) {\n\t\t\ti = 2;\n\t\t\tjo = (JSONObject)e;\n\t\t\t\n// Emit the attributes\n\t\t\t\n\t        keys = jo.keys();\n\t        while (keys.hasNext()) {\n\t            k = keys.next().toString();\n        \tXML.noSpace(k);\n\t            v = jo.optString(k);\n\t            if (v != null) {\n\t\t            sb.append(' ');\n\t\t            sb.append(XML.escape(k));\n\t\t            sb.append('=');\n\t\t            sb.append('\"');\n\t\t            sb.append(XML.escape(v));\n\t\t            sb.append('\"');\n\t            }\n\t        }  \n\t\t} else {\n\t\t\ti = 1;\n\t\t}\n\t     \t\n//Emit content in body\n\t    \t\n\t\tlength = ja.length();\n\t\tif (i >= length) {\n\t        sb.append('/');\n\t        sb.append('>');\n\t\t} else {\n\t        sb.append('>');\n\t\t\tdo {\n\t\t\t    e = ja.get(i);\n\t\t\t    i += 1;\n\t\t\t    if (e != null) {\n\t\t\t    \tif (e instanceof String) {\n\t\t\t    \t\tsb.append(XML.escape(e.toString()));\n\t\t\t\t\t} else if (e instanceof JSONObject) {\n\t\t\t\t\t\tsb.append(toString((JSONObject)e));\n\t\t\t\t\t} else if (e instanceof JSONArray) {\n\t\t\t\t\t\tsb.append(toString((JSONArray)e));\n\t\t\t\t\t}\n\t\t\t    }\n\t\t\t} while (i < length);\n\t\t\tsb.append('<');\n\t        sb.append('/');\n\t\t\tsb.append(tagName);\n\t        sb.append('>');\n\t    }\n    return sb.toString();\n}", "path": "src\\main\\java\\org\\json\\JSONML.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * Convert a cookie specification string into a JSONObject. The string\n * will contain a name value pair separated by '='. The name and the value\n * will be unescaped, possibly converting '+' and '%' sequences. The\n * cookie properties may follow, separated by ';', also represented as\n * name=value (except the secure property, which does not have a value).\n * The name will be stored under the key \"name\", and the value will be\n * stored under the key \"value\". This method does not do checking or\n * validation of the parameters. It only converts the cookie string into\n * a JSONObject.\n * @param string The cookie specification string.\n * @return A JSONObject containing \"name\", \"value\", and possibly other\n *  members.\n * @throws JSONException\n */\n", "func_signal": "public static JSONObject toJSONObject(String string) throws JSONException", "code": "{\n    String         n;\n    JSONObject     o = new JSONObject();\n    Object         v;\n    JSONTokener x = new JSONTokener(string);\n    o.put(\"name\", x.nextTo('='));\n    x.next('=');\n    o.put(\"value\", x.nextTo(';'));\n    x.next();\n    while (x.more()) {\n        n = unescape(x.nextTo(\"=;\"));\n        if (x.next() != '=') {\n            if (n.equals(\"secure\")) {\n                v = Boolean.TRUE;\n            } else {\n                throw x.syntaxError(\"Missing '=' in cookie parameter.\");\n            }\n        } else {\n            v = unescape(x.nextTo(';'));\n            x.next();\n        }\n        o.put(n, v);\n    }\n    return o;\n}", "path": "src\\main\\java\\org\\json\\Cookie.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * Produce a copy of a string in which the characters '+', '%', '=', ';'\n * and control characters are replaced with \"%hh\". This is a gentle form\n * of URL encoding, attempting to cause as little distortion to the\n * string as possible. The characters '=' and ';' are meta characters in\n * cookies. By convention, they are escaped using the URL-encoding. This is\n * only a convention, not a standard. Often, cookies are expected to have\n * encoded values. We encode '=' and ';' because we must. We encode '%' and\n * '+' because they are meta characters in URL encoding.\n * @param string The source string.\n * @return       The escaped result.\n */\n", "func_signal": "public static String escape(String string)", "code": "{\n    char         c;\n    String       s = string.trim();\n    StringBuffer sb = new StringBuffer();\n    int          len = s.length();\n    for (int i = 0; i < len; i += 1) {\n        c = s.charAt(i);\n        if (c < ' ' || c == '+' || c == '%' || c == '=' || c == ';') {\n            sb.append('%');\n            sb.append(Character.forDigit((char)((c >>> 4) & 0x0f), 16));\n            sb.append(Character.forDigit((char)(c & 0x0f), 16));\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}", "path": "src\\main\\java\\org\\json\\Cookie.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * End something.\n * @param m Mode\n * @param c Closing character\n * @return this\n * @throws JSONException If unbalanced.\n */\n", "func_signal": "private JSONWriter end(char m, char c) throws JSONException", "code": "{\n    if (this.mode != m) {\n        throw new JSONException(m == 'o' ? \"Misplaced endObject.\" :\n            \"Misplaced endArray.\");\n    }\n    this.pop(m);\n    try {\n        this.writer.write(c);\n    } catch (IOException e) {\n        throw new JSONException(e);\n    }\n    this.comma = true;\n    return this;\n}", "path": "src\\main\\java\\org\\json\\JSONWriter.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * Convert <code>%</code><i>hh</i> sequences to single characters, and\n * convert plus to space.\n * @param s A string that may contain\n *      <code>+</code>&nbsp;<small>(plus)</small> and\n *      <code>%</code><i>hh</i> sequences.\n * @return The unescaped string.\n */\n", "func_signal": "public static String unescape(String s)", "code": "{\n    int len = s.length();\n    StringBuffer b = new StringBuffer();\n    for (int i = 0; i < len; ++i) {\n        char c = s.charAt(i);\n        if (c == '+') {\n            c = ' ';\n        } else if (c == '%' && i + 2 < len) {\n            int d = JSONTokener.dehexchar(s.charAt(i + 1));\n            int e = JSONTokener.dehexchar(s.charAt(i + 2));\n            if (d >= 0 && e >= 0) {\n                c = (char)(d * 16 + e);\n                i += 2;\n            }\n        }\n        b.append(c);\n    }\n    return b.toString();\n}", "path": "src\\main\\java\\org\\json\\Cookie.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * get size for binary and json serialization \n *\n * @param num_entries\n * @param maxIntValue\n * @param stringSize\n * @param out\n * @throws Exception\n */\n", "func_signal": "public void getSerializationSize(int num_entries, int maxIntValue, int stringSize, Writer out) throws Exception", "code": "{\n\n    Schema s = Schema.parse(new File(\"src/data/avro/sample/fb_user.avpr\"));\n    ByteArrayOutputStream bao = new ByteArrayOutputStream();\n\n    GenericDatumWriter<GenericRecord> w = new GenericDatumWriter<GenericRecord>(s);\n    Encoder jsonEncoder = new JsonEncoder(s, bao);\n    Encoder binaryEncoder = new BinaryEncoder(bao);\n\n    jsonEncoder.init(new FileOutputStream(new File(\"test_data_json.avro\")));\n    binaryEncoder.init(new FileOutputStream(new File(\"test_data_binary.avro\")));\n\n\n    for (int i=0; i<num_entries; i++) {\n        GenericRecord r = new GenericData.Record(s);\n        r.put(\"name\", new org.apache.avro.util.Utf8(getRandomString(stringSize)));\n        r.put(\"num_likes\", rnd.nextInt(maxIntValue));\n        r.put(\"num_photos\", rnd.nextInt(maxIntValue));\n        r.put(\"num_groups\", rnd.nextInt(maxIntValue));\n        w.write(r, jsonEncoder);\n        w.write(r, binaryEncoder);\n    }\n\n    jsonEncoder.flush();\n    binaryEncoder.flush();\n\n    File jStat = new File(\"test_data_json.avro\");\n    File bStat = new File(\"test_data_binary.avro\");\n    out.write(num_entries + \",\" + jStat.length() + \",\" + bStat.length() + \"\\n\");\n    System.out.println(num_entries + \",\" + jStat.length() + \",\" + bStat.length() + \" = \" + (double)jStat.length()/(double)bStat.length() + \" x\");\n\n}", "path": "src\\test\\java\\com\\voidsearch\\data\\avro\\simple\\SimpleAvroPerformanceTest.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * Parse XML values and store them in a JSONArray.\n * @param x       The XMLTokener containing the source string.\n * @param arrayForm true if array form, false if object form.\n * @param ja      The JSONArray that is containing the current tag or null\n *     if we are at the outermost level.\n * @return A JSONArray if the value is the outermost tag, otherwise null.\n * @throws JSONException\n */\n", "func_signal": "private static Object parse(XMLTokener x, boolean arrayForm, \n\t\tJSONArray ja) throws JSONException", "code": "{\n    String     attribute;\n    char       c;\n    String\t   closeTag = null;\n    int        i;\n    JSONArray  newja = null;\n    JSONObject newjo = null;\n    Object     token;\n    String\t   tagName = null;\n    \n// Test for and skip past these forms:\n//      <!-- ... -->\n//      <![  ... ]]>\n//      <!   ...   >\n//      <?   ...  ?>\n    \n    while (true) {\n    \ttoken = x.nextContent();\n\t\tif (token == XML.LT) {\n\t\t\ttoken = x.nextToken();\n\t\t\tif (token instanceof Character) {\n\t\t\t        if (token == XML.SLASH) {\n\n// Close tag </\n\n\t\t\t        \ttoken = x.nextToken();\n\t\t\t        \tif (!(token instanceof String)) {\n\t\t\t        \t\tthrow new JSONException(\n\t\t\t        \t\t\t\t\"Expected a closing name instead of '\" + \n\t\t\t        \t\t\t\ttoken + \"'.\");\n\t\t\t        \t}\n\t\t\t            if (x.nextToken() != XML.GT) {\n\t\t\t                throw x.syntaxError(\"Misshaped close tag\");\n\t\t\t            }\n\t\t\t            return token;\n\t\t\t        } else if (token == XML.BANG) {\n    \t\t\n// <!\n    \t\n\t\t\t            c = x.next();\n\t\t\t            if (c == '-') {\n\t\t\t                if (x.next() == '-') {\n\t\t\t                    x.skipPast(\"-->\");\n\t\t\t                }\n\t\t\t                x.back();\n\t\t\t            } else if (c == '[') {\n\t\t\t                token = x.nextToken();\n\t\t\t                if (token.equals(\"CDATA\") && x.next() == '[') {\n\t\t\t                \tif (ja != null) {\n\t\t\t                \t\tja.put(x.nextCDATA());\n\t\t\t                \t}\n\t\t\t                } else {\n\t\t\t                \tthrow x.syntaxError(\"Expected 'CDATA['\");\n\t\t\t                }\n\t\t\t            } else {\n\t\t\t\t            i = 1;\n\t\t\t\t            do {\n\t\t\t\t                token = x.nextMeta();\n\t\t\t\t                if (token == null) {\n\t\t\t\t                    throw x.syntaxError(\"Missing '>' after '<!'.\");\n\t\t\t\t                } else if (token == XML.LT) {\n\t\t\t\t                    i += 1;\n\t\t\t\t                } else if (token == XML.GT) {\n\t\t\t\t                    i -= 1;\n\t\t\t\t                }\n\t\t\t\t            } while (i > 0);\n\t\t\t            }\n\t\t\t        } else if (token == XML.QUEST) {\n\n// <?\n\n\t\t\t        \tx.skipPast(\"?>\");\n\t\t\t        } else {\n\t\t\t            throw x.syntaxError(\"Misshaped tag\");\n\t\t\t        }\n\n// Open tag <\n\n\t\t        } else {\n\t\t        \tif (!(token instanceof String)) {\n\t\t\t            throw x.syntaxError(\"Bad tagName '\" + token + \"'.\");\t\t        \t\t\n\t\t        \t}\n\t\t        \ttagName = (String)token;\n\t\t            newja = new JSONArray();\t\t\n\t\t            newjo = new JSONObject();\n\t\t        \tif (arrayForm) {\n\t\t\t            newja.put(tagName);\n\t\t\t            if (ja != null) {\n\t\t\t            \tja.put(newja);\n\t\t\t            }\n\t\t\t        } else {\n\t\t        \t\tnewjo.put(\"tagName\", tagName);\n\t\t        \t\tif (ja != null) {\n\t\t\t            \tja.put(newjo);\n\t\t\t            }\n\t\t\t        }\n\t\t            token = null;\n\t\t            for (;;) {\n\t\t                if (token == null) {\n\t\t                    token = x.nextToken();\n\t\t                }\n\t\t                if (token == null) {\n\t\t                \tthrow x.syntaxError(\"Misshaped tag\");\n\t\t                }\n\t\t                if (!(token instanceof String)) {\n\t\t                \tbreak;\n\t\t                }\n\n//\t\t              attribute = value\n\n\t                    attribute = (String)token;\n\t\t\t        \tif (!arrayForm && (attribute == \"tagName\" || attribute == \"childNode\")) {\n                        throw x.syntaxError(\"Reserved attribute.\");\t\t\t        \t\t\n\t\t\t        \t}\n\t                    token = x.nextToken();\n\t                    if (token == XML.EQ) {\n\t                        token = x.nextToken();\n\t                        if (!(token instanceof String)) {\n\t                            throw x.syntaxError(\"Missing value\");\n\t                        }\n\t                        newjo.accumulate(attribute, JSONObject.stringToValue((String)token));\n\t                        token = null;\n\t                    } else {\n\t                    \tnewjo.accumulate(attribute, \"\");\n\t                    }\n\t\t            }\n                if (arrayForm && newjo.length() > 0) {\n                \tnewja.put(newjo);\n                }\n\n// Empty tag <.../>\n\n\t                if (token == XML.SLASH) {\n\t                    if (x.nextToken() != XML.GT) {\n\t                        throw x.syntaxError(\"Misshaped tag\");\n\t                    }\n\t                    if (ja == null) {\n\t                    \tif (arrayForm) {\n\t                    \t\treturn newja;\n\t                    \t} else {\n\t                    \t\treturn newjo;\n\t                    \t}\n\t                    }\n\n// Content, between <...> and </...>\n\n\t                } else {\n\t                \tif (token != XML.GT) {\n\t                \t\tthrow x.syntaxError(\"Misshaped tag\");\n\t                \t}\n\t                \tcloseTag = (String)parse(x, arrayForm, newja);\n\t                \tif (closeTag != null) {\n\t\t                \tif (!closeTag.equals(tagName)) {\n\t\t                \t\tthrow x.syntaxError(\"Mismatched '\" + tagName + \n\t\t                \t\t\t\t\"' and '\" + closeTag + \"'\");\n\t\t\t\t\t        }\n\t\t                \ttagName = null;\n\t\t            \t\tif (!arrayForm && newja.length() > 0) {\n\t\t            \t\t\tnewjo.put(\"childNodes\", newja);\n\t\t            \t\t}\n\t\t                \tif (ja == null) {\n\t\t                    \tif (arrayForm) {\n\t\t                    \t\treturn newja;\n\t\t                    \t} else {\n\t\t                    \t\treturn newjo;\n\t\t                    \t}\n\t\t                \t}\n\t                \t}\n            \t}\n\t            }\n\t\t    } else {\n\t\t    \tif (ja != null) {\n\t\t    \t\tja.put(token instanceof String ? \n\t\t    \t\t\t\tJSONObject.stringToValue((String)token) : token);\n\t\t    \t}\n\t\t    }\n    }\n}", "path": "src\\main\\java\\org\\json\\JSONML.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * Reverse the JSONML transformation, making an XML text from a JSONObject.\n * The JSONObject must contain a \"tagName\" property. If it has children, \n * then it must have a \"childNodes\" property containing an array of objects. \n * The other properties are attributes with string values.\n * @param jo A JSONObject.\n * @return An XML string.\n * @throws JSONException\n */\n", "func_signal": "public static String toString(JSONObject jo) throws JSONException", "code": "{\n\t    StringBuffer sb = new StringBuffer();\n\t    Object\t\t e;\n\t    int          i;\n\t    JSONArray    ja;\n\t    String       k;\n\t    Iterator     keys;\n\t    int          len;\n\t    String       tagName;\n\t    String       v;\n\t\n//Emit <tagName\n\t\n\t\ttagName = jo.optString(\"tagName\");\n\t\tif (tagName == null) {\n\t\t\treturn XML.escape(jo.toString());\n\t\t}\n\t\tXML.noSpace(tagName);\n\t\ttagName = XML.escape(tagName);\n\t\tsb.append('<');\n\t\tsb.append(tagName);\n\t\n//Emit the attributes\n\t\n    keys = jo.keys();\n    while (keys.hasNext()) {\n        k = keys.next().toString();\n        if (!k.equals(\"tagName\") && !k.equals(\"childNodes\")) {\n        \tXML.noSpace(k);\n\t            v = jo.optString(k);\n\t            if (v != null) {\n\t\t            sb.append(' ');\n\t\t            sb.append(XML.escape(k));\n\t\t            sb.append('=');\n\t\t            sb.append('\"');\n\t\t            sb.append(XML.escape(v));\n\t\t            sb.append('\"');\n\t            }\n        }\n    }    \n\t\t     \t\n//Emit content in body\n\t\n\t\tja = jo.optJSONArray(\"childNodes\");\n\t\tif (ja == null) {\n\t        sb.append('/');\n\t        sb.append('>');\n\t\t} else {\n\t        sb.append('>');\n\t\t\tlen = ja.length();\n\t\t\tfor (i = 0; i < len; i += 1) {\n\t\t\t    e = ja.get(i);\n\t\t\t    if (e != null) {\n\t\t\t    \tif (e instanceof String) {\n\t\t\t    \t\tsb.append(XML.escape(e.toString()));\n\t\t\t\t\t} else if (e instanceof JSONObject) {\n\t\t\t\t\t\tsb.append(toString((JSONObject)e));\n\t\t\t\t\t} else if (e instanceof JSONArray) {\n\t\t\t\t\t\tsb.append(toString((JSONArray)e));\n\t\t\t\t\t}\n\t\t\t    }\n\t\t\t}\n\t\t\tsb.append('<');\n\t        sb.append('/');\n\t\t\tsb.append(tagName);\n\t        sb.append('>');\n\t    }\n    return sb.toString();\n}", "path": "src\\main\\java\\org\\json\\JSONML.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "//\n// VALIDATION\n//\n", "func_signal": "public static Boolean isEmpty(String s)", "code": "{\n  if (s != null && !s.equals(\"\") && !s.equals(\"\\\\N\") && !s.toLowerCase().equals(\"null\"))\n    return false;\n\n  return true;\n}", "path": "src\\main\\java\\com\\voidsearch\\voidbase\\util\\GenericUtil.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * get random string of specified size\n *\n * @param len\n * @return\n */\n", "func_signal": "public String getRandomString( int len )", "code": "{\n  StringBuilder sb = new StringBuilder(len);\n  for( int i = 0; i < len; i++ ) {\n      sb.append(VALID_CHARS.charAt(rnd.nextInt(VALID_CHARS.length())));\n  }\n  return sb.toString();\n}", "path": "src\\test\\java\\com\\voidsearch\\data\\avro\\simple\\SimpleAvroPerformanceTest.java", "repo_name": "voidsearch/voidbase", "stars": 6, "license": "None", "language": "java", "size": 17383}
{"docstring": "/**\n * A fixable procedure must subclass one of the following methods\n */\n", "func_signal": "public Value apply() throws ContinuationException", "code": "{\n    throwArgSizeException();\n    return VOID;\n}", "path": "src\\sisc\\nativefun\\FixableProcedure.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/**\n * Copies all values from the specified attribute table.\n * If some attribute is exist its value should be overridden.\n *\n * @param table  the attribute table with new values\n */\n", "func_signal": "private void addTable(Hashtable<String, Object> table)", "code": "{\n    if ((table != null) && !table.isEmpty()) {\n        getTable().putAll(table);\n    }\n}", "path": "src\\neomantic\\java\\beans\\FeatureDescriptor.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/// 6.2.5 Numerical operations\n", "func_signal": "public void testNumbers()\n    throws Exception", "code": "{\n    check(\"(+ 3 4)\", \"7\");\n    check(\"(+ 3)\", \"3\");\n    check(\"(+)\", \"0\");\n    check(\"(* 4)\", \"4\");\n    check(\"(*)\", \"1\");\n\n\n    check(\"(+)\", \"0\");\n    check(\"(*)\", \"1\");\n\n    check(\"(- 1)\", \"-1\");\n    check(\"(/ 1)\",  \"1\");\n\n    check(\"(+ 3 3)\", \"6\");\n    check(\"(- 3 3)\", \"0\");\n    check(\"(* 3 3)\", \"9\");\n    check(\"(/ 3 3)\", \"1\");\n\n    check(\"(+  1 2 3 4)\", \"10\");\n    check(\"(-  1 2 3 4)\", \"-8\");\n    check(\"(*  1 2 3 4)\", \"24\");\n    check(\"(/ 24 2 3 4)\",  \"1\");\n}", "path": "src\\sisc\\tests\\TestR5RS.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/// 4.2.1 Conditionals\n", "func_signal": "public void no_test4_2_1()\n    throws Exception", "code": "{\n    check(\n        \"(cond ((> 3 2) 'greater)\\n\" +\n        \"      ((< 3 2) 'less))\",\n        \"greater\"\n    );\n    check(\n        \"(cond ((> 3 3) 'greater)\\n\" +\n        \"      ((< 3 3) 'less))\\n\" +\n        \"      (else 'equal))\",\n        \"equal\"\n    );\n    check(\n        \"(cond ((assv 'b '((a 1) (b 2))) => cadr)\\n\" +\n        \"      (else #f))\",\n        \"2\"\n    );\n}", "path": "src\\sisc\\tests\\TestR5RS.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/// 4.2.3 Sequencing\n", "func_signal": "public void test4_2_3()\n    throws Exception", "code": "{\n    eval(\"(define x 0)\");\n    check(\n        \"(begin (set! x 5)\\n\" +\n        \"       (+ x 1))\",\n        \"6\"\n    );\n}", "path": "src\\sisc\\tests\\TestR5RS.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/**\n * Retrieve a named attribute with this feature.\n *\n * @param attributeName  The locale-independent name of the attribute\n * @return  The value of the attribute.  May be null if\n *     the attribute is unknown.\n */\n", "func_signal": "public Object getValue(String attributeName)", "code": "{\n    return (this.table != null)\n            ? this.table.get(attributeName)\n            : null;\n}", "path": "src\\neomantic\\java\\beans\\FeatureDescriptor.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/// 6.4 Control features\n", "func_signal": "public void test6_4_procedureq()\n    throws Exception", "code": "{\n    check(\"(procedure?  car)\", \"#t\");\n    check(\"(procedure? 'car)\", \"#f\");\n    check(\"(procedure?  (lambda (x) (* x x)))\", \"#t\");\n    check(\"(procedure? '(lambda (x) (* x x)))\", \"#f\");\n    check(\"(call-with-current-continuation procedure?)\", \"#t\");\n}", "path": "src\\sisc\\tests\\TestR5RS.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/// 6.1 Equivalence predicates\n", "func_signal": "public void test6_1a()\n    throws Exception", "code": "{\n    // eqv?\n    check(\"(eqv? 'a 'a)\", \"#t\");\n    check(\"(eqv? 'a 'b)\", \"#f\");\n    check(\"(eqv? 2 2)\", \"#t\");\n    check(\"(eqv? '() '())\", \"#t\");\n    check(\"(eqv? 100000000 100000000)\", \"#t\");\n    check(\"(eqv? (cons 1 2) (cons 1 2))\", \"#f\");\n    check(\"(eqv? (lambda () 1) (lambda () 2))\", \"#f\");\n    check(\"(eqv? #f 'nil)\", \"#f\");\n    check(\"(let ((p (lambda (x) x))) (eqv? p p))\", \"#t\");\n\n    eval(\n        \"(define gen-counter \" +\n        \"  (lambda () \" +\n        \"    (let ((n 0)) \" +\n        \"      (lambda () \" +\n        \"        (set! n (+ n 1)) \" +\n        \"        n))))\"\n    );\n\n    check(\"(let ((g (gen-counter))) (eqv? g g))\", \"#t\");\n    check(\"(eqv? (gen-counter) (gen-counter))\", \"#f\");\n    \n    check(\"(let ((x '(a))) (eqv? x x))\", \"#t\");\n}", "path": "src\\sisc\\tests\\TestR5RS.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/// 4.2.6 Quasiquotation\n", "func_signal": "public void test4_2_6()\n    throws Exception", "code": "{\n    check(\"`(list ,(+ 1 2) 4)\", \"(list 3 4)\");\n    check(\n        \"(let ((name 'a)) `(list ,name ',name))\",\n        \"(list a (quote a))\"\n    );\n    check(\n        \"`(a ,(+ 1 2) ,@(list 4 5 6) b)\",\n        \"(a 3 4 5 6 b)\"\n    );\n    check(\n        \"`#(10 5 ,(+ 1 1) ,@(list 4 3) 8)\",\n        \"#(10 5 2 4 3 8)\"\n    );\n    check(\n        \"`(a `(b ,(+ 1 2) ,(foo ,(+ 1 3) d) e) f)\",\n        \"(a `(b ,(+ 1 2) ,(foo 4 d) e) f)\"\n    );\n    check(\n        \"(let ((name1 'x) (name2 'y)) `(a `(b ,,name1 ,',name2 d) e))\",\n        \"(a `(b ,x ,'y d) e))\"\n    );\n}", "path": "src\\sisc\\tests\\TestR5RS.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/**\n * Gets the localized display name of this feature.\n *\n * @return The localized display name for the property/method/event.\n *  This defaults to the same as its programmatic name from getName.\n */\n", "func_signal": "public String getDisplayName()", "code": "{\n    if (displayName == null) {\n        return getName();\n    }\n    return displayName;\n}", "path": "src\\neomantic\\java\\beans\\FeatureDescriptor.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/**\n * Gets the short description of this feature.\n *\n * @return  A localized short description associated with this\n *   property/method/event.  This defaults to be the display name.\n */\n", "func_signal": "public String getShortDescription()", "code": "{\n    if (shortDescription == null) {\n        return getDisplayName();\n    }\n    return shortDescription;\n}", "path": "src\\neomantic\\java\\beans\\FeatureDescriptor.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/// 4.1.6 Assignments\n", "func_signal": "public void test4_1_6()\n    throws Exception", "code": "{\n    eval(\"(define x 2)\");\n    check(\"(+ x 1)\", \"3\");\n    eval(\"(set! x 4)\");\n    check(\"(+ x 1)\", \"5\");\n}", "path": "src\\sisc\\tests\\TestR5RS.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/**\n * Returns the initialized attribute table.\n *\n * @return the initialized attribute table\n */\n", "func_signal": "private Hashtable<String, Object> getTable()", "code": "{\n    if (this.table == null) {\n        this.table = new Hashtable<String, Object>();\n    }\n    return this.table;\n}", "path": "src\\neomantic\\java\\beans\\FeatureDescriptor.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/// 4.1.3 Procedure calls\n", "func_signal": "public void test4_1_3a()\n    throws Exception", "code": "{\n    check(\"(+ 3 4)\"          , \"7\" );\n    check(\"((if #f + *) 3 4)\", \"12\");\n}", "path": "src\\sisc\\tests\\TestR5RS.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/// 6.3.3 Symbols\n", "func_signal": "public void test6_3_3()\n    throws Exception", "code": "{\n    // symbol?\n    check(\"(symbol? 'foo)\"        , \"#t\");\n    check(\"(symbol? (car '(a b)))\", \"#t\");\n    check(\"(symbol? \\\"bar\\\")\"     , \"#f\");\n    check(\"(symbol? 'nil)\"        , \"#t\");\n    check(\"(symbol? '())\"         , \"#f\");\n    check(\"(symbol? #f)\"          , \"#f\");\n\n    // symbol->string\n    // string->symbol\n    check(\"(symbol->string 'flying-fish)\", \"\\\"flying-fish\\\"\");\n    check(\"(symbol->string 'Martin)\"     , \"\\\"martin\\\"\");\n    check(\"(symbol->string (string->symbol \\\"Malvia\\\"))\", \"\\\"Malvia\\\"\");\n}", "path": "src\\sisc\\tests\\TestR5RS.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/* (non-Javadoc)\n * @see sisc.exprs.OptimisticHost#alter(int, sisc.data.Expression)\n */\n", "func_signal": "public synchronized void alter(Interpreter r, int uexpPosition, Expression replaceWith)", "code": "{\n    switch(uexpPosition) {\n    case POS_PRE:\n        pre=replaceWith;\n        if (preImmediate && !(replaceWith instanceof Immediate)) {\n            preImmediate=false;\n        }\n        break;\n    case POS_POST:\n        post=replaceWith;\n        break;\n    }\n}", "path": "src\\sisc\\exprs\\EvalExp.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/// 4.1.4 Procedures\n", "func_signal": "public void test4_1_4()\n    throws Exception", "code": "{\n    assertTrue(eval(\"(lambda (x) (+ x x))\") instanceof Procedure);\n    check(\"((lambda (x) (+ x x)) 4)\", \"8\");\n\n    eval(\n        \"(define reverse-subtract\\n\" +\n        \"  (lambda (x y) (- y x)))\"\n    );\n    check(\"(reverse-subtract 7 10)\", \"3\");\n\n    eval(\n        \"(define add4\\n\" +\n        \"  (let ((x 4))\\n\" +\n        \"    (lambda (y) (+ x y))))\"\n    );\n    check(\"(add4 6)\", \"10\");\n}", "path": "src\\sisc\\tests\\TestR5RS.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/// 4.1.1 Variable references\n", "func_signal": "public void test4_1_1()\n    throws Exception", "code": "{\n    eval(\"(define x 28)\");\n    check(\"x\", \"28\");\n}", "path": "src\\sisc\\tests\\TestR5RS.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/// 6.3.6 Vectors\n", "func_signal": "public void test6_3_6()\n    throws Exception", "code": "{\n    check(\"(vector-ref '#(1 1 2 3 5 8 13 21) 5)\", \"8\");\n    check(\"(vector 'a 'b 'c)\", \"#(a b c)\");\n\n    check(\"(vector-length '#(1 2 3 4))\", \"4\");\n\n\n}", "path": "src\\sisc\\tests\\TestR5RS.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/// 4.1.5 Conditionals\n", "func_signal": "public void test4_1_5()\n    throws Exception", "code": "{\n    check(\"(if (> 3 2) 'yes 'no)\", \"yes\");\n    check(\"(if (> 2 3) 'yes 'no)\", \"no\");\n    check(\"(if (> 3 2)\\n\" +\n          \"    (- 3 2)\\n\" +\n          \"    (+ 3 2))\",\n          \"1\"\n    );\n}", "path": "src\\sisc\\tests\\TestR5RS.java", "repo_name": "neomantic-zz/Android-SISC-Scheme-Eval", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 864}
{"docstring": "/**\n * Updates the digest using the specified byte.\n * Requires internal buffering, and may be slow.\n *\n * Overrides the protected abstract method of\n * java.security.MessageDigestSpi.\n * @param input  the byte to use for the update.\n */\n", "func_signal": "public void engineUpdate(byte input)", "code": "{\n    bytes++;\n    if (padding < 63) {\n        pad[padding++] = input;\n        return;\n    }\n    pad[63] = input;\n    computeBlock(pad, 0);\n    padding = 0;\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\util\\Sha1.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/**\n * Completes the hash computation by performing final operations\n * such as padding. Once engineDigest has been called, the engine\n * will be automatically reset (see engineReset).\n *\n * Overrides the protected abstract method of\n * java.security.MessageDigestSpi.\n * @param hashvalue  the output buffer in which to store the digest.\n * @param offset  offset to start from in the output buffer\n * @param len  number of bytes within buf allotted for the digest.\n *             Both this default implementation and the SUN provider\n *             do not return partial digests.  The presence of this\n *             parameter is solely for consistency in our API's.\n *             If the value of this parameter is less than the\n *             actual digest length, the method will throw a\n *             DigestException.  This parameter is ignored if its\n *             value is greater than or equal to the actual digest\n *             length.\n * @return  the length of the digest stored in the output buffer.\n */\n", "func_signal": "public int engineDigest(byte[] hashvalue, int offset, final int len)\n        throws DigestException", "code": "{\n    if (len >= HASH_LENGTH) {\n        if (hashvalue.length - offset >= HASH_LENGTH) {\n            /* Flush the trailing bytes, adding padding bytes into last\n             * blocks. */\n            int i;\n            /* Add padding null bytes but replace the last 8 padding bytes\n             * by the little-endian 64-bit digested message bit-length. */\n            pad[i = padding] = (byte)0x80; /* required 1st padding byte */\n            /* Check if 8 bytes available in pad to store the total\n             * message size */\n            switch (i) { /* INVARIANT: i must be in [0..63] */\n            case 52: pad[53] = (byte)0x00; /* no break; falls thru */\n            case 53: pad[54] = (byte)0x00; /* no break; falls thru */\n            case 54: pad[55] = (byte)0x00; /* no break; falls thru */\n            case 55: break;\n            case 56: pad[57] = (byte)0x00; /* no break; falls thru */\n            case 57: pad[58] = (byte)0x00; /* no break; falls thru */\n            case 58: pad[59] = (byte)0x00; /* no break; falls thru */\n            case 59: pad[60] = (byte)0x00; /* no break; falls thru */\n            case 60: pad[61] = (byte)0x00; /* no break; falls thru */\n            case 61: pad[62] = (byte)0x00; /* no break; falls thru */\n            case 62: pad[63] = (byte)0x00; /* no break; falls thru */\n            case 63:\n                computeBlock(pad, 0);\n                /* Clear the 56 first bytes of pad[]. */\n                i = 52;\n                do {\n                    pad[i    ] = (byte)0x00;\n                    pad[i + 1] = (byte)0x00;\n                    pad[i + 2] = (byte)0x00;\n                    pad[i + 3] = (byte)0x00;\n                } while ((i -= 4) >= 0);\n                break;\n            default:\n                /* Clear the rest of 56 first bytes of pad[]. */\n                switch (i & 3) {\n                case 3: i++;\n                        break;\n                case 2: pad[(i += 2) - 1] = (byte)0x00;\n                        break;\n                case 1: pad[(i += 3) - 2] = (byte)0x00;\n                        pad[ i       - 1] = (byte)0x00;\n                        break;\n                case 0: pad[(i += 4) - 3] = (byte)0x00;\n                        pad[ i       - 2] = (byte)0x00;\n                        pad[ i       - 1] = (byte)0x00;\n                }\n                do {\n                    pad[i    ] = (byte)0x00;\n                    pad[i + 1] = (byte)0x00;\n                    pad[i + 2] = (byte)0x00;\n                    pad[i + 3] = (byte)0x00;\n                } while ((i += 4) < 56);\n            }\n            /* Convert the message size from bytes to big-endian bits. */\n            pad[56] = (byte)((i = (int)(bytes >>> 29)) >> 24);\n            pad[57] = (byte)(i >>> 16);\n            pad[58] = (byte)(i >>> 8);\n            pad[59] = (byte)i;\n            pad[60] = (byte)((i = (int)bytes << 3) >> 24);\n            pad[61] = (byte)(i >>> 16);\n            pad[62] = (byte)(i >>> 8);\n            pad[63] = (byte)i;\n            computeBlock(pad, 0);\n            /* Return the computed digest in big-endian byte order. */\n            hashvalue[offset     ] = (byte)((i = hA) >>> 24);\n            hashvalue[offset +  1] = (byte)(i >>> 16);\n            hashvalue[offset +  2] = (byte)(i >>> 8);\n            hashvalue[offset +  3] = (byte)i;\n            hashvalue[offset +  4] = (byte)((i = hB) >>> 24);\n            hashvalue[offset += 5] = (byte)(i >>> 16);\n            hashvalue[offset +  1] = (byte)(i >>> 8);\n            hashvalue[offset +  2] = (byte)i;\n            hashvalue[offset +  3] = (byte)((i = hC) >>> 24);\n            hashvalue[offset +  4] = (byte)(i >>> 16);\n            hashvalue[offset += 5] = (byte)(i >>> 8);\n            hashvalue[offset +  1] = (byte)i;\n            hashvalue[offset +  2] = (byte)((i = hD) >>> 24);\n            hashvalue[offset +  3] = (byte)(i >>> 16);\n            hashvalue[offset +  4] = (byte)(i >>> 8);\n            hashvalue[offset += 5] = (byte)i;\n            hashvalue[offset +  1] = (byte)((i = hE) >>> 24);\n            hashvalue[offset +  2] = (byte)(i >>> 16);\n            hashvalue[offset +  3] = (byte)(i >>> 8);\n            hashvalue[offset +  4] = (byte)i;\n            engineReset(); /* clear the evidence */\n            return HASH_LENGTH;\n        }\n        throw new DigestException(\n            \"insufficient space in output buffer to store the digest\");\n    }\n    throw new DigestException(\"partial digests not returned\");\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\util\\Sha1.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/*\n * Read the specified number of bytes as a little-endian (least significant\n * byte first) integer. Note: bytes must be less than the byte width of\n * \"unsigned long int\" on your platform (e.g. 8 for 32-bit systems).\n */\n", "func_signal": "public static int readLE(RandomAccessFile stm, int bytes) throws IOException", "code": "{\n\n\tint x, res = 0;\n\n\tfor (x = 0; x < bytes; x++) {\n\t\tres |= stm.read() << (x * 8);\n\t}\n\treturn res;\n}", "path": "plugins\\org.bitpedia.collider.video\\src\\org\\bitpedia\\collider\\video\\VideoUtils.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/**\n * Decodes the given Base32 String to a raw byte array.\n *\n * @param base32\n * @return Decoded <code>base32</code> String as a raw byte array.\n */\n", "func_signal": "static public byte[] decode(final String base32)", "code": "{\n    int i, index, lookup, offset, digit;\n    byte[] bytes = new byte[base32.length() * 5 / 8];\n\n    for (i = 0, index = 0, offset = 0; i < base32.length(); i++) {\n        lookup = base32.charAt(i) - '0';\n\n        /* Skip chars outside the lookup table */\n        if (lookup < 0 || lookup >= base32Lookup.length) {\n            continue;\n        }\n\n        digit = base32Lookup[lookup];\n\n        /* If this digit is not in the table, ignore it */\n        if (digit == 0xFF) {\n            continue;\n        }\n\n        if (index <= 3) {\n            index = (index + 5) % 8;\n            if (index == 0) {\n                bytes[offset] |= digit;\n                offset++;\n                if (offset >= bytes.length)\n                    break;\n            } else {\n                bytes[offset] |= digit << (8 - index);\n            }\n        } else {\n            index = (index + 5) % 8;\n            bytes[offset] |= (digit >>> index);\n            offset++;\n\n            if (offset >= bytes.length) {\n                break;\n            }\n            bytes[offset] |= digit << (8 - index);\n        }\n    }\n    return bytes;\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\util\\Base32.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/**\n * Constructor\n */\n", "func_signal": "public TigerTree()", "code": "{\n    super(\"tigertree\");\n    buffer = new byte[BLOCKSIZE];\n    bufferOffset = 0;\n    byteCount = 0;\n    blockCount = 0;\n    nodes = new LinkedList();\n    tiger = new Tiger();\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\util\\TigerTree.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/* A full KZTREE_BLOCKSIZE bytes have become available; \n * hash those, and possibly composite together siblings. */\n", "func_signal": "private void kztreeBlock()", "code": "{\n\n  byte[] md5 = Md5Handler.md5(leaf, index);\n  System.arraycopy(md5, 0, nodes, topIndex, md5.length);\n  topIndex += MD5_SIZE;\n  \n  ++count;\n  gen = count; \n  while(gen == ((gen >> 1)<<1)) { // while evenly divisible by 2...\n    kztreeCompose();\n    gen = gen >> 1;\n  }\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\collider\\core\\KzTreeHandler.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/**\n * Updates the digest using the specified array of bytes,\n * starting at the specified offset, but an implied length\n * of exactly 64 bytes.\n *\n * Requires no internal buffering, but assumes a fixed input size,\n * in which the required padding bytes may have been added.\n *\n * @param input  the array of bytes to use for the update.\n * @param offset  the offset to start from in the array of bytes.\n */\n", "func_signal": "private void computeBlock(final byte[] input, int offset)", "code": "{\n    /* Local temporary work variables for intermediate digests. */\n    int a, b, c, d, e;\n    /* Cache the input block into the local working set of 32-bit\n     * values, in big-endian byte order. Be careful when\n     * widening bytes or integers due to sign extension! */\n    int i00, i01, i02, i03, i04, i05, i06, i07,\n        i08, i09, i10, i11, i12, i13, i14, i15;\n    /* Use hash schedule function Ch (rounds 0..19):\n     *   Ch(x,y,z) = (x & y) ^ (~x & z) = (x & (y ^ z)) ^ z,\n     * and K00 = .... = K19 = 0x5a827999. */\n    /* First pass, on big endian input (rounds 0..15). */\n    e =  hE\n      +  (((a = hA) << 5) | (a >>> 27)) + 0x5a827999 // K00\n      +  (((b = hB) & ((c = hC)      ^ (d = hD))) ^ d) // Ch(b,c,d)\n      +  (i00 =  input[offset     ] << 24\n              | (input[offset +  1] & 0xff) << 16\n              | (input[offset +  2] & 0xff) << 8\n              | (input[offset +  3] & 0xff)); // W00\n    d += ((e << 5) | (e >>> 27)) + 0x5a827999 // K01\n      +  ((a & ((b = (b << 30) | (b >>> 2)) ^ c)) ^ c) // Ch(a,b,c)\n      +  (i01 =  input[offset +  4] << 24\n              | (input[offset += 5] & 0xff) << 16\n              | (input[offset +  1] & 0xff) << 8\n              | (input[offset +  2] & 0xff)); // W01\n    c += ((d << 5) | (d >>> 27)) + 0x5a827999 // K02\n      +  ((e & ((a = (a << 30) | (a >>> 2)) ^ b)) ^ b) // Ch(e,a,b)\n      +  (i02 =  input[offset +  3] << 24\n              | (input[offset +  4] & 0xff) << 16\n              | (input[offset += 5] & 0xff) << 8\n              | (input[offset +  1] & 0xff)); // W02\n    b += ((c << 5) | (c >>> 27)) + 0x5a827999 // K03\n      +  ((d & ((e = (e << 30) | (e >>> 2)) ^ a)) ^ a) // Ch(d,e,a)\n      +  (i03 =  input[offset +  2] << 24\n              | (input[offset +  3] & 0xff) << 16\n              | (input[offset +  4] & 0xff) << 8\n              | (input[offset += 5] & 0xff)); // W03\n    a += ((b << 5) | (b >>> 27)) + 0x5a827999 // K04\n      +  ((c & ((d = (d << 30) | (d >>> 2)) ^ e)) ^ e) // Ch(c,d,e)\n      +  (i04 =  input[offset +  1] << 24\n              | (input[offset +  2] & 0xff) << 16\n              | (input[offset +  3] & 0xff) << 8\n              | (input[offset +  4] & 0xff)); // W04\n    e += ((a << 5) | (a >>> 27)) + 0x5a827999 // K05\n      +  ((b & ((c = (c << 30) | (c >>> 2)) ^ d)) ^ d) // Ch(b,c,d)\n      +  (i05 =  input[offset += 5] << 24\n              | (input[offset +  1] & 0xff) << 16\n              | (input[offset +  2] & 0xff) << 8\n              | (input[offset +  3] & 0xff)); // W05\n    d += ((e << 5) | (e >>> 27)) + 0x5a827999 // K06\n      +  ((a & ((b = (b << 30) | (b >>> 2)) ^ c)) ^ c) // Ch(a,b,c)\n      +  (i06 =  input[offset +  4] << 24\n              | (input[offset += 5] & 0xff) << 16\n              | (input[offset +  1] & 0xff) << 8\n              | (input[offset +  2] & 0xff)); // W06\n    c += ((d << 5) | (d >>> 27)) + 0x5a827999 // K07\n      +  ((e & ((a = (a << 30) | (a >>> 2)) ^ b)) ^ b) // Ch(e,a,b)\n      +  (i07 =  input[offset +  3] << 24\n              | (input[offset +  4] & 0xff) << 16\n              | (input[offset += 5] & 0xff) << 8\n              | (input[offset +  1] & 0xff)); // W07\n    b += ((c << 5) | (c >>> 27)) + 0x5a827999 // K08\n      +  ((d & ((e = (e << 30) | (e >>> 2)) ^ a)) ^ a) // Ch(d,e,a)\n      +  (i08 =  input[offset +  2] << 24\n              | (input[offset +  3] & 0xff) << 16\n              | (input[offset +  4] & 0xff) << 8\n              | (input[offset += 5] & 0xff)); // W08\n    a += ((b << 5) | (b >>> 27)) + 0x5a827999 // K09\n      +  ((c & ((d = (d << 30) | (d >>> 2)) ^ e)) ^ e) // Ch(c,d,e)\n      +  (i09 =  input[offset +  1] << 24\n              | (input[offset +  2] & 0xff) << 16\n              | (input[offset +  3] & 0xff) << 8\n              | (input[offset +  4] & 0xff)); // W09\n    e += ((a << 5) | (a >>> 27)) + 0x5a827999 // K10\n      +  ((b & ((c = (c << 30) | (c >>> 2)) ^ d)) ^ d) // Ch(b,c,d)\n      +  (i10 =  input[offset += 5] << 24\n              | (input[offset +  1] & 0xff) << 16\n              | (input[offset +  2] & 0xff) << 8\n              | (input[offset +  3] & 0xff)); // W10\n    d += ((e << 5) | (e >>> 27)) + 0x5a827999 // K11\n      +  ((a & ((b = (b << 30) | (b >>> 2)) ^ c)) ^ c) // Ch(a,b,c)\n      +  (i11 =  input[offset +  4] << 24\n              | (input[offset += 5] & 0xff) << 16\n              | (input[offset +  1] & 0xff) << 8\n              | (input[offset +  2] & 0xff)); // W11\n    c += ((d << 5) | (d >>> 27)) + 0x5a827999 // K12\n      +  ((e & ((a = (a << 30) | (a >>> 2)) ^ b)) ^ b) // Ch(e,a,b)\n      +  (i12 =  input[offset +  3] << 24\n              | (input[offset +  4] & 0xff) << 16\n              | (input[offset += 5] & 0xff) << 8\n              | (input[offset +  1] & 0xff)); // W12\n    b += ((c << 5) | (c >>> 27)) + 0x5a827999 // K13\n      +  ((d & ((e = (e << 30) | (e >>> 2)) ^ a)) ^ a) // Ch(d,e,a)\n      +  (i13 =  input[offset +  2] << 24\n              | (input[offset +  3] & 0xff) << 16\n              | (input[offset +  4] & 0xff) << 8\n              | (input[offset += 5] & 0xff)); // W13\n    a += ((b << 5) | (b >>> 27)) + 0x5a827999 // K14\n      +  ((c & ((d = (d << 30) | (d >>> 2)) ^ e)) ^ e) // Ch(c,d,e)\n      +  (i14 =  input[offset +  1] << 24\n              | (input[offset +  2] & 0xff) << 16\n              | (input[offset +  3] & 0xff) << 8\n              | (input[offset +  4] & 0xff)); // W14\n    e += ((a << 5) | (a >>> 27)) + 0x5a827999 // K15\n      +  ((b & ((c = (c << 30) | (c >>> 2)) ^ d)) ^ d) // Ch(b,c,d)\n      +  (i15 =  input[offset += 5] << 24\n              | (input[offset +  1] & 0xff) << 16\n              | (input[offset +  2] & 0xff) << 8\n              | (input[offset +  3] & 0xff)); // W15\n    /* Second pass, on scheduled input (rounds 16..31). */\n    d += ((e << 5) | (e >>> 27)) + 0x5a827999 // K16\n      +  ((a & ((b = (b << 30) | (b >>> 2)) ^ c)) ^ c) // Ch(a,b,c)\n      +  (i00 = ((i00 ^= i02 ^ i08 ^ i13) << 1) | (i00 >>> 31)); // W16\n    c += ((d << 5) | (d >>> 27)) + 0x5a827999 // K17\n      +  ((e & ((a = (a << 30) | (a >>> 2)) ^ b)) ^ b) // Ch(e,a,b)\n      +  (i01 = ((i01 ^= i03 ^ i09 ^ i14) << 1) | (i01 >>> 31)); // W17\n    b += ((c << 5) | (c >>> 27)) + 0x5a827999 // K18\n      +  ((d & ((e = (e << 30) | (e >>> 2)) ^ a)) ^ a) // Ch(d,e,a)\n      +  (i02 = ((i02 ^= i04 ^ i10 ^ i15) << 1) | (i02 >>> 31)); // W18\n    a += ((b << 5) | (b >>> 27)) + 0x5a827999 // K19\n      +  ((c & ((d = (d << 30) | (d >>> 2)) ^ e)) ^ e) // Ch(c,d,e)\n      +  (i03 = ((i03 ^= i05 ^ i11 ^ i00) << 1) | (i03 >>> 31)); // W19\n    /* Use hash schedule function Parity (rounds 20..39):\n     *   Parity(x,y,z) = x ^ y ^ z,\n     * and K20 = .... = K39 = 0x6ed9eba1. */\n    e += ((a << 5) | (a >>> 27)) + 0x6ed9eba1 // K20\n      +  (b ^ (c = (c << 30) | (c >>> 2)) ^ d) // Parity(b,c,d)\n      +  (i04 = ((i04 ^= i06 ^ i12 ^ i01) << 1) | (i04 >>> 31)); // W20\n    d += ((e << 5) | (e >>> 27)) + 0x6ed9eba1 // K21\n      +  (a ^ (b = (b << 30) | (b >>> 2)) ^ c) // Parity(a,b,c)\n      +  (i05 = ((i05 ^= i07 ^ i13 ^ i02) << 1) | (i05 >>> 31)); // W21\n    c += ((d << 5) | (d >>> 27)) + 0x6ed9eba1 // K22\n      +  (e ^ (a = (a << 30) | (a >>> 2)) ^ b) // Parity(e,a,b)\n      +  (i06 = ((i06 ^= i08 ^ i14 ^ i03) << 1) | (i06 >>> 31)); // W22\n    b += ((c << 5) | (c >>> 27)) + 0x6ed9eba1 // K23\n      +  (d ^ (e = (e << 30) | (e >>> 2)) ^ a) // Parity(d,e,a)\n      +  (i07 = ((i07 ^= i09 ^ i15 ^ i04) << 1) | (i07 >>> 31)); // W23\n    a += ((b << 5) | (b >>> 27)) + 0x6ed9eba1 // K24\n      +  (c ^ (d = (d << 30) | (d >>> 2)) ^ e) // Parity(c,d,e)\n      +  (i08 = ((i08 ^= i10 ^ i00 ^ i05) << 1) | (i08 >>> 31)); // W24\n    e += ((a << 5) | (a >>> 27)) + 0x6ed9eba1 // K25\n      +  (b ^ (c = (c << 30) | (c >>> 2)) ^ d) // Parity(b,c,d)\n      +  (i09 = ((i09 ^= i11 ^ i01 ^ i06) << 1) | (i09 >>> 31)); // W25\n    d += ((e << 5) | (e >>> 27)) + 0x6ed9eba1 // K26\n      +  (a ^ (b = (b << 30) | (b >>> 2)) ^ c) // Parity(a,b,c)\n      +  (i10 = ((i10 ^= i12 ^ i02 ^ i07) << 1) | (i10 >>> 31)); // W26\n    c += ((d << 5) | (d >>> 27)) + 0x6ed9eba1 // K27\n      +  (e ^ (a = (a << 30) | (a >>> 2)) ^ b) // Parity(e,a,b)\n      +  (i11 = ((i11 ^= i13 ^ i03 ^ i08) << 1) | (i11 >>> 31)); // W27\n    b += ((c << 5) | (c >>> 27)) + 0x6ed9eba1 // K28\n      +  (d ^ (e = (e << 30) | (e >>> 2)) ^ a) // Parity(d,e,a)\n      +  (i12 = ((i12 ^= i14 ^ i04 ^ i09) << 1) | (i12 >>> 31)); // W28\n    a += ((b << 5) | (b >>> 27)) + 0x6ed9eba1 // K29\n      +  (c ^ (d = (d << 30) | (d >>> 2)) ^ e) // Parity(c,d,e)\n      +  (i13 = ((i13 ^= i15 ^ i05 ^ i10) << 1) | (i13 >>> 31)); // W29\n    e += ((a << 5) | (a >>> 27)) + 0x6ed9eba1 // K30\n      +  (b ^ (c = (c << 30) | (c >>> 2)) ^ d) // Parity(b,c,d)\n      +  (i14 = ((i14 ^= i00 ^ i06 ^ i11) << 1) | (i14 >>> 31)); // W30\n    d += ((e << 5) | (e >>> 27)) + 0x6ed9eba1 // K31\n      +  (a ^ (b = (b << 30) | (b >>> 2)) ^ c) // Parity(a,b,c)\n      +  (i15 = ((i15 ^= i01 ^ i07 ^ i12) << 1) | (i15 >>> 31)); // W31\n    /* Third pass, on scheduled input (rounds 32..47). */\n    c += ((d << 5) | (d >>> 27)) + 0x6ed9eba1 // K32\n      +  (e ^ (a = (a << 30) | (a >>> 2)) ^ b) // Parity(e,a,b)\n      +  (i00 = ((i00 ^= i02 ^ i08 ^ i13) << 1) | (i00 >>> 31)); // W32\n    b += ((c << 5) | (c >>> 27)) + 0x6ed9eba1 // K33\n      +  (d ^ (e = (e << 30) | (e >>> 2)) ^ a) // Parity(d,e,a)\n      +  (i01 = ((i01 ^= i03 ^ i09 ^ i14) << 1) | (i01 >>> 31)); // W33\n    a += ((b << 5) | (b >>> 27)) + 0x6ed9eba1 // K34\n      +  (c ^ (d = (d << 30) | (d >>> 2)) ^ e) // Parity(c,d,e)\n      +  (i02 = ((i02 ^= i04 ^ i10 ^ i15) << 1) | (i02 >>> 31)); // W34\n    e += ((a << 5) | (a >>> 27)) + 0x6ed9eba1 // K35\n      +  (b ^ (c = (c << 30) | (c >>> 2)) ^ d) // Parity(b,c,d)\n      +  (i03 = ((i03 ^= i05 ^ i11 ^ i00) << 1) | (i03 >>> 31)); // W35\n    d += ((e << 5) | (e >>> 27)) + 0x6ed9eba1 // K36\n      +  (a ^ (b = (b << 30) | (b >>> 2)) ^ c) // Parity(a,b,c)\n      +  (i04 = ((i04 ^= i06 ^ i12 ^ i01) << 1) | (i04 >>> 31)); // W36\n    c += ((d << 5) | (d >>> 27)) + 0x6ed9eba1 // K37\n      +  (e ^ (a = (a << 30) | (a >>> 2)) ^ b) // Parity(e,a,b)\n      +  (i05 = ((i05 ^= i07 ^ i13 ^ i02) << 1) | (i05 >>> 31)); // W37\n    b += ((c << 5) | (c >>> 27)) + 0x6ed9eba1 // K38\n      +  (d ^ (e = (e << 30) | (e >>> 2)) ^ a) // Parity(d,e,a)\n      +  (i06 = ((i06 ^= i08 ^ i14 ^ i03) << 1) | (i06 >>> 31)); // W38\n    a += ((b << 5) | (b >>> 27)) + 0x6ed9eba1 // K39\n      +  (c ^ (d = (d << 30) | (d >>> 2)) ^ e) // Parity(c,d,e)\n      +  (i07 = ((i07 ^= i09 ^ i15 ^ i04) << 1) | (i07 >>> 31)); // W39\n    /* Use hash schedule function Maj (rounds 40..59):\n     *   Maj(x,y,z) = (x&y) ^ (x&z) ^ (y&z) = (x & y) | ((x | y) & z),\n     * and K40 = .... = K59 = 0x8f1bbcdc. */\n    e += ((a << 5) | (a >>> 27)) + 0x8f1bbcdc // K40\n      +  ((b & (c = (c << 30) | (c >>> 2))) | ((b | c) & d)) // Maj(b,c,d)\n      +  (i08 = ((i08 ^= i10 ^ i00 ^ i05) << 1) | (i08 >>> 31)); // W40\n    d += ((e << 5) | (e >>> 27)) + 0x8f1bbcdc // K41\n      +  ((a & (b = (b << 30) | (b >>> 2))) | ((a | b) & c)) // Maj(a,b,c)\n      +  (i09 = ((i09 ^= i11 ^ i01 ^ i06) << 1) | (i09 >>> 31)); // W41\n    c += ((d << 5) | (d >>> 27)) + 0x8f1bbcdc // K42\n      +  ((e & (a = (a << 30) | (a >>> 2))) | ((e | a) & b)) // Maj(e,a,b)\n      +  (i10 = ((i10 ^= i12 ^ i02 ^ i07) << 1) | (i10 >>> 31)); // W42\n    b += ((c << 5) | (c >>> 27)) + 0x8f1bbcdc // K43\n      +  ((d & (e = (e << 30) | (e >>> 2))) | ((d | e) & a)) // Maj(d,e,a)\n      +  (i11 = ((i11 ^= i13 ^ i03 ^ i08) << 1) | (i11 >>> 31)); // W43\n    a += ((b << 5) | (b >>> 27)) + 0x8f1bbcdc // K44\n      +  ((c & (d = (d << 30) | (d >>> 2))) | ((c | d) & e)) // Maj(c,d,e)\n      +  (i12 = ((i12 ^= i14 ^ i04 ^ i09) << 1) | (i12 >>> 31)); // W44\n    e += ((a << 5) | (a >>> 27)) + 0x8f1bbcdc // K45\n      +  ((b & (c = (c << 30) | (c >>> 2))) | ((b | c) & d)) // Maj(b,c,d)\n      +  (i13 = ((i13 ^= i15 ^ i05 ^ i10) << 1) | (i13 >>> 31)); // W45\n    d += ((e << 5) | (e >>> 27)) + 0x8f1bbcdc // K46\n      +  ((a & (b = (b << 30) | (b >>> 2))) | ((a | b) & c)) // Maj(a,b,c)\n      +  (i14 = ((i14 ^= i00 ^ i06 ^ i11) << 1) | (i14 >>> 31)); // W46\n    c += ((d << 5) | (d >>> 27)) + 0x8f1bbcdc // K47\n      +  ((e & (a = (a << 30) | (a >>> 2))) | ((e | a) & b)) // Maj(e,a,b)\n      +  (i15 = ((i15 ^= i01 ^ i07 ^ i12) << 1) | (i15 >>> 31)); // W47\n    /* Fourth pass, on scheduled input (rounds 48..63). */\n    b += ((c << 5) | (c >>> 27)) + 0x8f1bbcdc // K48\n      +  ((d & (e = (e << 30) | (e >>> 2))) | ((d | e) & a)) // Maj(d,e,a)\n      +  (i00 = ((i00 ^= i02 ^ i08 ^ i13) << 1) | (i00 >>> 31)); // W48\n    a += ((b << 5) | (b >>> 27)) + 0x8f1bbcdc // K49\n      +  ((c & (d = (d << 30) | (d >>> 2))) | ((c | d) & e)) // Maj(c,d,e)\n      +  (i01 = ((i01 ^= i03 ^ i09 ^ i14) << 1) | (i01 >>> 31)); // W49\n    e += ((a << 5) | (a >>> 27)) + 0x8f1bbcdc // K50\n      +  ((b & (c = (c << 30) | (c >>> 2))) | ((b | c) & d)) // Maj(b,c,d)\n      +  (i02 = ((i02 ^= i04 ^ i10 ^ i15) << 1) | (i02 >>> 31)); // W50\n    d += ((e << 5) | (e >>> 27)) + 0x8f1bbcdc // K51\n      +  ((a & (b = (b << 30) | (b >>> 2))) | ((a | b) & c)) // Maj(a,b,c)\n      +  (i03 = ((i03 ^= i05 ^ i11 ^ i00) << 1) | (i03 >>> 31)); // W51\n    c += ((d << 5) | (d >>> 27)) + 0x8f1bbcdc // K52\n      +  ((e & (a = (a << 30) | (a >>> 2))) | ((e | a) & b)) // Maj(e,a,b)\n      +  (i04 = ((i04 ^= i06 ^ i12 ^ i01) << 1) | (i04 >>> 31)); // W52\n    b += ((c << 5) | (c >>> 27)) + 0x8f1bbcdc // K53\n      +  ((d & (e = (e << 30) | (e >>> 2))) | ((d | e) & a)) // Maj(d,e,a)\n      +  (i05 = ((i05 ^= i07 ^ i13 ^ i02) << 1) | (i05 >>> 31)); // W53\n    a += ((b << 5) | (b >>> 27)) + 0x8f1bbcdc // K54\n      +  ((c & (d = (d << 30) | (d >>> 2))) | ((c | d) & e)) // Maj(c,d,e)\n      +  (i06 = ((i06 ^= i08 ^ i14 ^ i03) << 1) | (i06 >>> 31)); // W54\n    e += ((a << 5) | (a >>> 27)) + 0x8f1bbcdc // K55\n      +  ((b & (c = (c << 30) | (c >>> 2))) | ((b | c) & d)) // Maj(b,c,d)\n      +  (i07 = ((i07 ^= i09 ^ i15 ^ i04) << 1) | (i07 >>> 31)); // W55\n    d += ((e << 5) | (e >>> 27)) + 0x8f1bbcdc // K56\n      +  ((a & (b = (b << 30) | (b >>> 2))) | ((a | b) & c)) // Maj(a,b,c)\n      +  (i08 = ((i08 ^= i10 ^ i00 ^ i05) << 1) | (i08 >>> 31)); // W56\n    c += ((d << 5) | (d >>> 27)) + 0x8f1bbcdc // K57\n      +  ((e & (a = (a << 30) | (a >>> 2))) | ((e | a) & b)) // Maj(e,a,b)\n      +  (i09 = ((i09 ^= i11 ^ i01 ^ i06) << 1) | (i09 >>> 31)); // W57\n    b += ((c << 5) | (c >>> 27)) + 0x8f1bbcdc // K58\n      +  ((d & (e = (e << 30) | (e >>> 2))) | ((d | e) & a)) // Maj(d,e,a)\n      +  (i10 = ((i10 ^= i12 ^ i02 ^ i07) << 1) | (i10 >>> 31)); // W58\n    a += ((b << 5) | (b >>> 27)) + 0x8f1bbcdc // K59\n      +  ((c & (d = (d << 30) | (d >>> 2))) | ((c | d) & e)) // Maj(c,d,e)\n      +  (i11 = ((i11 ^= i13 ^ i03 ^ i08) << 1) | (i11 >>> 31)); // W59\n    /* Use hash schedule function Parity (rounds 60..79):\n     *   Parity(x,y,z) = x ^ y ^ z,\n     * and K60 = .... = K79 = 0xca62c1d6. */\n    e += ((a << 5) | (a >>> 27)) + 0xca62c1d6 // K60\n      +  (b ^ (c = (c << 30) | (c >>> 2)) ^ d) // Parity(b,c,d)\n      +  (i12 = ((i12 ^= i14 ^ i04 ^ i09) << 1) | (i12 >>> 31)); // W60\n    d += ((e << 5) | (e >>> 27)) + 0xca62c1d6 // K61\n      +  (a ^ (b = (b << 30) | (b >>> 2)) ^ c) // Parity(a,b,c)\n      +  (i13 = ((i13 ^= i15 ^ i05 ^ i10) << 1) | (i13 >>> 31)); // W61\n    c += ((d << 5) | (d >>> 27)) + 0xca62c1d6 // K62\n      +  (e ^ (a = (a << 30) | (a >>> 2)) ^ b) // Parity(e,a,b)\n      +  (i14 = ((i14 ^= i00 ^ i06 ^ i11) << 1) | (i14 >>> 31)); // W62\n    b += ((c << 5) | (c >>> 27)) + 0xca62c1d6 // K63\n      +  (d ^ (e = (e << 30) | (e >>> 2)) ^ a) // Parity(d,e,a)\n      +  (i15 = ((i15 ^= i01 ^ i07 ^ i12) << 1) | (i15 >>> 31)); // W63\n    /* Fifth pass, on scheduled input (rounds 64..79). */\n    a += ((b << 5) | (b >>> 27)) + 0xca62c1d6 // K64\n      +  (c ^ (d = (d << 30) | (d >>> 2)) ^ e) // Parity(c,d,e)\n      +  (i00 = ((i00 ^= i02 ^ i08 ^ i13) << 1) | (i00 >>> 31)); // W64\n    e += ((a << 5) | (a >>> 27)) + 0xca62c1d6 // K65\n      +  (b ^ (c = (c << 30) | (c >>> 2)) ^ d) // Parity(b,c,d)\n      +  (i01 = ((i01 ^= i03 ^ i09 ^ i14) << 1) | (i01 >>> 31)); // W65\n    d += ((e << 5) | (e >>> 27)) + 0xca62c1d6 // K66\n      +  (a ^ (b = (b << 30) | (b >>> 2)) ^ c) // Parity(a,b,c)\n      +  (i02 = ((i02 ^= i04 ^ i10 ^ i15) << 1) | (i02 >>> 31)); // W66\n    c += ((d << 5) | (d >>> 27)) + 0xca62c1d6 // K67\n      +  (e ^ (a = (a << 30) | (a >>> 2)) ^ b) // Parity(e,a,b)\n      +  (i03 = ((i03 ^= i05 ^ i11 ^ i00) << 1) | (i03 >>> 31)); // W67\n    b += ((c << 5) | (c >>> 27)) + 0xca62c1d6 // K68\n      +  (d ^ (e = (e << 30) | (e >>> 2)) ^ a) // Parity(d,e,a)\n      +  (i04 = ((i04 ^= i06 ^ i12 ^ i01) << 1) | (i04 >>> 31)); // W68\n    a += ((b << 5) | (b >>> 27)) + 0xca62c1d6 // K69\n      +  (c ^ (d = (d << 30) | (d >>> 2)) ^ e) // Parity(c,d,e)\n      +  (i05 = ((i05 ^= i07 ^ i13 ^ i02) << 1) | (i05 >>> 31)); // W69\n    e += ((a << 5) | (a >>> 27)) + 0xca62c1d6 // K70\n      +  (b ^ (c = (c << 30) | (c >>> 2)) ^ d) // Parity(b,c,d)\n      +  (i06 = ((i06 ^= i08 ^ i14 ^ i03) << 1) | (i06 >>> 31)); // W70\n    d += ((e << 5) | (e >>> 27)) + 0xca62c1d6 // K71\n      +  (a ^ (b = (b << 30) | (b >>> 2)) ^ c) // Parity(a,b,c)\n      +  (i07 = ((i07 ^= i09 ^ i15 ^ i04) << 1) | (i07 >>> 31)); // W71\n    c += ((d << 5) | (d >>> 27)) + 0xca62c1d6 // K72\n      +  (e ^ (a = (a << 30) | (a >>> 2)) ^ b) // Parity(e,a,b)\n      +  (i08 = ((i08 ^= i10 ^ i00 ^ i05) << 1) | (i08 >>> 31)); // W72\n    b += ((c << 5) | (c >>> 27)) + 0xca62c1d6 // K73\n      +  (d ^ (e = (e << 30) | (e >>> 2)) ^ a) // Parity(d,e,a)\n      +  (i09 = ((i09 ^= i11 ^ i01 ^ i06) << 1) | (i09 >>> 31)); // W73\n    a += ((b << 5) | (b >>> 27)) + 0xca62c1d6 // K74\n      +  (c ^ (d = (d << 30) | (d >>> 2)) ^ e) // Parity(c,d,e)\n      +  (i10 = ((i10 ^= i12 ^ i02 ^ i07) << 1) | (i10 >>> 31)); // W74\n    e += ((a << 5) | (a >>> 27)) + 0xca62c1d6 // K75\n      +  (b ^ (c = (c << 30) | (c >>> 2)) ^ d) // Parity(b,c,d)\n      +  (i11 = ((i11 ^= i13 ^ i03 ^ i08) << 1) | (i11 >>> 31)); // W75\n    d += ((e << 5) | (e >>> 27)) + 0xca62c1d6 // K76\n      +  (a ^ (b = (b << 30) | (b >>> 2)) ^ c) // Parity(a,b,c)\n      +  (i12 = ((i12 ^= i14 ^ i04 ^ i09) << 1) | (i12 >>> 31)); // W76\n    c += ((d << 5) | (d >>> 27)) + 0xca62c1d6 // K77\n      +  (e ^ (a = (a << 30) | (a >>> 2)) ^ b) // Parity(e,a,b)\n      +  (i13 = ((i13 ^= i15 ^ i05 ^ i10) << 1) | (i13 >>> 31)); // W77\n    /* Terminate the last two rounds of fifth pass,\n     * feeding the final digest on the fly. */\n    hB +=\n    b += ((c << 5) | (c >>> 27)) + 0xca62c1d6 // K78\n      +  (d ^ (e = (e << 30) | (e >>> 2)) ^ a) // Parity(d,e,a)\n      +  (i14 = ((i14 ^= i00 ^ i06 ^ i11) << 1) | (i14 >>> 31)); // W78\n    hA +=\n    a += ((b << 5) | (b >>> 27)) + 0xca62c1d6 // K79\n      +  (c ^ (d = (d << 30) | (d >>> 2)) ^ e) // Parity(c,d,e)\n      +  (i15 = ((i15 ^= i01 ^ i07 ^ i12) << 1) | (i15 >>> 31)); // W79\n    hE += e;\n    hD += d;\n    hC += /* c= */ (c << 30) | (c >>> 2);\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\util\\Sha1.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/** For testing, take a command-line argument in Base32, decode, print in hex,\n * encode, print\n *\n * @param args\n */\n", "func_signal": "static public void main(String[] args)", "code": "{\n    if (args.length == 0) {\n        System.out.println(\"Supply a Base32-encoded argument.\");\n        return;\n    }\n    System.out.println(\" Original: \" + args[0]);\n    byte[] decoded = Base32.decode(args[0]);\n    System.out.print(\"      Hex: \");\n    for (int i = 0; i < decoded.length; i++) {\n        int b = decoded[i];\n        if (b < 0) {\n            b += 256;\n        }\n        System.out.print((Integer.toHexString(b + 256)).substring(1));\n    }\n    System.out.println();\n    System.out.println(\"Reencoded: \" + Base32.encode(decoded));\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\util\\Base32.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/**\n * Updates the digest using the specified array of bytes,\n * starting at the specified offset.\n *\n * Input length can be any size. May require internal buffering,\n * if input blocks are not multiple of 64 bytes.\n *\n * Overrides the protected abstract method of\n * java.security.MessageDigestSpi.\n * @param input  the array of bytes to use for the update.\n * @param offset  the offset to start from in the array of bytes.\n * @param len  the number of bytes to use, starting at offset.\n */\n", "func_signal": "public void engineUpdate(byte[] input, int offset, int len)", "code": "{\n    if (offset >= 0 && len >= 0 && offset + len <= input.length) {\n        bytes += len;\n        /* Terminate the previous block. */\n        int padlen = 64 - padding;\n        if (padding > 0 && len >= padlen) {\n            System.arraycopy(input, offset, pad, padding, padlen);\n            computeBlock(pad, 0);\n            padding = 0;\n            offset += padlen;\n            len -= padlen;\n        }\n        /* Loop on large sets of complete blocks. */\n        while (len >= 512) {\n            computeBlock(input, offset);\n            computeBlock(input, offset + 64);\n            computeBlock(input, offset + 128);\n            computeBlock(input, offset + 192);\n            computeBlock(input, offset + 256);\n            computeBlock(input, offset + 320);\n            computeBlock(input, offset + 384);\n            computeBlock(input, offset + 448);\n            offset += 512;\n            len -= 512;\n        }\n        /* Loop on remaining complete blocks. */\n        while (len >= 64) {\n            computeBlock(input, offset);\n            offset += 64;\n            len -= 64;\n        }\n        /* remaining bytes kept for next block. */\n        if (len > 0) {\n            System.arraycopy(input, offset, pad, padding, len);\n            padding += len;\n        }\n        return;\n    }\n    throw new ArrayIndexOutOfBoundsException(offset);\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\util\\Sha1.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/**\n * Initialize the digest context.\n */\n", "func_signal": "protected void init()", "code": "{\n    hA = 0x67452301;\n    hB = 0xefcdab89;\n    hC = 0x98badcfe;\n    hD = 0x10325476;\n    hE = 0xc3d2e1f0;\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\util\\Sha1.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/**\n * Update the internal state with a single block of size 1024 (or less, in\n * final block) from the internal buffer.\n */\n", "func_signal": "protected void blockUpdate()", "code": "{\n    tiger.reset();\n    tiger.update((byte) 0); // leaf prefix\n    tiger.update(buffer, 0, bufferOffset);\n    if ((bufferOffset == 0) & (nodes.size() > 0))\n        return; // don't remember a zero-size hash except at very beginning\n    nodes.add(tiger.digest());\n    blockCount++;\n    long interimNode = blockCount; \n    while((interimNode % 2)==0) { // even\n        composeNodes();\n        interimNode >>= 1;\n    }\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\util\\TigerTree.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/**\n * \n */\n", "func_signal": "protected void composeNodes()", "code": "{\n    byte[] right = (byte[]) nodes.removeLast(); \n    byte[] left = (byte[]) nodes.removeLast();\n    tiger.reset();\n    tiger.update((byte)1); // internal node prefix\n    tiger.update(left);\n    tiger.update(right);\n    nodes.add(tiger.digest());\n    \n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\util\\TigerTree.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/* Encodes input (int[]) into output (byte[]). \n * Assumes len is a multiple of 4. */\n", "func_signal": "private static void encode(byte[] output, int[] input, int len)", "code": "{\n\t\n\tByteBuffer buf = ByteBuffer.allocate(len);\n\tbuf.order(ByteOrder.LITTLE_ENDIAN);\n\tIntBuffer intBuf = buf.asIntBuffer();\n\tintBuf.put(input, 0, len / 4);\n\tbuf.get(output, 0, len);\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\collider\\core\\Md4Handler.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/**\n * Encodes byte array to Base32 String.\n *\n * @param bytes Bytes to encode.\n * @return Encoded byte array <code>bytes</code> as a String.\n *\n */\n", "func_signal": "static public String encode(final byte[] bytes)", "code": "{\n    int i = 0, index = 0, digit = 0;\n    int currByte, nextByte;\n    StringBuffer base32 = new StringBuffer((bytes.length + 7) * 8 / 5);\n\n    while (i < bytes.length) {\n        currByte = (bytes[i] >= 0) ? bytes[i] : (bytes[i] + 256); // unsign\n\n        /* Is the current digit going to span a byte boundary? */\n        if (index > 3) {\n            if ((i + 1) < bytes.length) {\n                nextByte =\n                    (bytes[i + 1] >= 0) ? bytes[i + 1] : (bytes[i + 1] + 256);\n            } else {\n                nextByte = 0;\n            }\n\n            digit = currByte & (0xFF >> index);\n            index = (index + 5) % 8;\n            digit <<= index;\n            digit |= nextByte >> (8 - index);\n            i++;\n        } else {\n            digit = (currByte >> (8 - (index + 5))) & 0x1F;\n            index = (index + 5) % 8;\n            if (index == 0)\n                i++;\n        }\n        base32.append(base32Chars.charAt(digit));\n    }\n\n    return base32.toString();\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\util\\Base32.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/* Decodes input (unsigned char) into output (w32). \n * Assumes len is a multiple of 4. */\n", "func_signal": "private static void decode(int[] output, byte[] input, int ofs, int len)", "code": "{\n\t\n\tByteBuffer buf = ByteBuffer.wrap(input, ofs, len);\n\tbuf.order(ByteOrder.LITTLE_ENDIAN);\n\tIntBuffer intBuf = buf.asIntBuffer();\n\tintBuf.get(output, 0, len / 4);\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\collider\\core\\Md4Handler.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/**\n * Clones this object.\n */\n", "func_signal": "public Object clone() throws CloneNotSupportedException", "code": "{\n    Sha1 that = (Sha1)super.clone();\n    that.pad = (byte[])this.pad.clone();\n    return that;\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\util\\Sha1.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/**\n * Completes the hash computation by performing final operations\n * such as padding. Computes the final hash and returns the final\n * value as a byte[20] array. Once engineDigest has been called,\n * the engine will be automatically reset as specified in the\n * JavaSecurity MessageDigest specification.\n *\n * For faster operations with multiple digests, allocate your own\n * array and use engineDigest(byte[], int offset, int len).\n *\n * Overrides the protected abstract method of\n * java.security.MessageDigestSpi.\n * @return the length of the digest stored in the output buffer.\n */\n", "func_signal": "public byte[] engineDigest()", "code": "{\n    try {\n        final byte hashvalue[] = new byte[HASH_LENGTH];\n        engineDigest(hashvalue, 0, HASH_LENGTH);\n        return hashvalue;\n    } catch (DigestException e) {\n        return null;\n    }\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\util\\Sha1.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/* Same as above, but big-endian (most significant byte first) ordering */\n", "func_signal": "public static int readBE(RandomAccessFile stm, int bytes) throws IOException", "code": "{\n\n\tint x, res = 0;\n\n\tfor (x = bytes - 1; x >= 0; x--) {\n\t\tres |= stm.read() << (x * 8);\n\t}\n\n\treturn res;\n}", "path": "plugins\\org.bitpedia.collider.video\\src\\org\\bitpedia\\collider\\video\\VideoUtils.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/**\n * Reset athen initialize the digest context.\n *\n * Overrides the protected abstract method of\n * <code>java.security.MessageDigestSpi</code>.\n */\n", "func_signal": "protected void engineReset()", "code": "{\n    int i = 60;\n    do {\n       pad[i    ] = (byte)0x00;\n       pad[i + 1] = (byte)0x00;\n       pad[i + 2] = (byte)0x00;\n       pad[i + 3] = (byte)0x00;\n    } while ((i -= 4) >= 0);\n    padding = 0;\n    bytes = 0;\n    init();\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\util\\Sha1.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/**\n * Creates a SHA1 object with default initial state.\n */\n", "func_signal": "public Sha1()", "code": "{\n    super(\"SHA-1\");\n    pad = new byte[64];\n    init();\n}", "path": "plugins\\org.bitpedia.collider.core\\src\\org\\bitpedia\\util\\Sha1.java", "repo_name": "bitpedia/jbitcollider", "stars": 5, "license": "other", "language": "java", "size": 1204}
{"docstring": "/**\n * Draws the outline of the specified rectangle using the current color. Use drawRect(x, y, width-1, height-1) to\n * draw the outline inside the specified rectangle.\n *\n * @param x      the x coordinate\n * @param y      the y coordinate\n * @param width  the width of the rectangle\n * @param height the height of the rectangle\n * @see #fillRect\n * @see #clearRect\n */\n", "func_signal": "public void drawRect(int x, int y, int width, int height)", "code": "{\n    prt(\"%drawRect\");\n    doRect(x, y, width, height, false);\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * Draws the specified image at the specified coordinate (x, y). If the image is incomplete the image observer will\n * be notified later.\n *\n * @param img      the specified image to be drawn\n * @param x        the x coordinate\n * @param y        the y coordinate\n * @param observer notifies if the image is complete or not\n * @see Image\n * @see ImageObserver\n */\n", "func_signal": "public boolean drawImage(Image img, int x, int y, ImageObserver observer)", "code": "{\n    prt(\"%drawImage-1\");\n\n    return doImage(img, x, y, 0, 0, observer, null);\n\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * Fills the specified rectangle with the current color.\n *\n * @param x      the x coordinate\n * @param y      the y coordinate\n * @param width  the width of the rectangle\n * @param height the height of the rectangle\n * @see #drawRect\n * @see #clearRect\n */\n", "func_signal": "public void fillRect(int x, int y, int width, int height)", "code": "{\n    prt(\"%fillRect\");\n    doRect(x, y, width, height, true);\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * Sets the current color to the specified color. All subsequent graphics operations will use this specified color.\n *\n * @param c the color to be set\n * @see Color\n * @see #getColor\n */\n", "func_signal": "public void setColor(Color c)", "code": "{\n    if (c != null) clr = c;\n    double r = clr.getRed() / 255.0;\n    double g = clr.getGreen() / 255.0;\n    double b = clr.getBlue() / 255.0;\n    prt(r, g, b, \"setrgbcolor\");\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * Draws the specified image inside the specified rectangle. The image is scaled if necessary. If the image is\n * incomplete the image observer will be notified later.\n *\n * @param img      the specified image to be drawn\n * @param x        the x coordinate\n * @param y        the y coordinate\n * @param width    the width of the rectangle\n * @param height   the height of the rectangle\n * @param bgcolor  the background color\n * @param observer notifies if the image is complete or not\n * @see Image\n * @see ImageObserver NOTE: PSGr ignores the background color.\n */\n", "func_signal": "public boolean drawImage(Image img, int x, int y,\n                         int width, int height, Color bgcolor,\n                         ImageObserver observer)", "code": "{\n    prt(\"%drawImage-4\");\n    return doImage(img, x, y, width, height, observer, bgcolor);\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * Draws a highlighted 3-D rectangle.\n *\n * @param x      the x coordinate\n * @param y      the y coordinate\n * @param width  the width of the rectangle\n * @param height the height of the rectangle\n * @param raised a boolean that states whether the rectangle is raised or not\n */\n", "func_signal": "public void draw3DRect(int x, int y, int width, int height, boolean raised)", "code": "{\n    prt(\"%draw3DRect\");\n    Color c = getColor();\n    Color brighter = c.brighter();\n    Color darker = c.darker();\n\n    setColor(raised ? brighter : darker);\n    drawLine(x, y, x, y + height);\n    drawLine(x + 1, y, x + width - 1, y);\n    setColor(raised ? darker : brighter);\n    drawLine(x + 1, y + height, x + width, y + height);\n    drawLine(x + width, y, x + width, y + height);\n    setColor(c);\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * Draws an oval inside the specified rectangle using the current color.\n *\n * @param x      the x coordinate\n * @param y      the y coordinate\n * @param width  the width of the rectangle\n * @param height the height of the rectangle\n * @see #fillOval\n */\n", "func_signal": "public void drawOval(int x, int y, int width, int height)", "code": "{\n    prt(\"%drawOval\");\n    doArc(x, y, width, height, 0, 360, false);\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * Draws a polygon defined by the specified point.\n *\n * @param p the specified polygon\n * @see #fillPolygon\n */\n", "func_signal": "public void drawPolygon(Polygon p)", "code": "{\n    prt(\"%drawPoly\");\n    doPoly(p.xpoints, p.ypoints, p.npoints, false);\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * Draws the specified String using the current font and color. The x,y position is the starting point of the\n * baseline of the String.\n *\n * @param str the String to be drawn\n * @param x   the x coordinate\n * @param y   the y coordinate\n * @see #drawChars\n * @see #drawBytes\n */\n", "func_signal": "public void drawString(String str, int x, int y)", "code": "{\n    y = transformY(y);\n    prt(x, y, \"moveto (\" + str + \") show stroke\");\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * Draws the specified image inside the specified rectangle. The image is scaled if necessary. If the image is\n * incomplete the image observer will be notified later.\n *\n * @param img      the specified image to be drawn\n * @param x        the x coordinate\n * @param y        the y coordinate\n * @param width    the width of the rectangle\n * @param height   the height of the rectangle\n * @param observer notifies if the image is complete or not\n * @see Image\n * @see ImageObserver\n */\n", "func_signal": "public boolean drawImage(Image img, int x, int y,\n                         int width, int height,\n                         ImageObserver observer)", "code": "{\n    prt(\"%drawImage-2\");\n    return doImage(img, x, y, width, height, observer, null);\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * check whether Rserve is currently running (on local machine and default port).\n *\n * @return <code>true</code> if local Rserve instance is running, <code>false</code> otherwise\n */\n", "func_signal": "public static boolean isRserveRunning()", "code": "{\n    try {\n        RConnection c = new RConnection();\n        System.out.println(\"Rserve is running.\");\n        c.close();\n\n        hasR = true;\n\n        return true;\n    } catch (Exception e) {\n        System.out.println(\"First connect try failed with: \" + e.getMessage());\n    }\n    return false;\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\r\\RService.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "// This constructor added by David Binger.\n", "func_signal": "public PSGr(OutputStream o, Graphics g, Dimension s, Point origin, String[] extras)", "code": "{\n    os = new PrintWriter(o);\n    this.g = g;\n    int bbax = origin.x;\n    int bbay = PAGEHEIGHT - origin.y - s.height;\n    int bbbx = bbax + s.width;\n    int bbby = bbay + s.height;\n    prt(\"%!PS-Adobe-2.0 EPSF-1.2\");\n    prt(\"%%BoundingBox: \" + bbax + \" \" + bbay + \" \" + bbbx + \" \" + bbby);\n    if (extras != null)\n        for (int j = 0; j < extras.length; j++)\n            prt(\"%\" + extras[j]);\n    prt(\"% Output Generated by PSGr Java PostScript Context\");\n    //    translate(tx,ty);\n    setFont(font);\n    // cliprect(bbax,bbay,s.width,s.height);\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * Clips to a rectangle. The resulting clipping area is the intersection of the current clipping area and the\n * specified rectangle. Graphic operations have no effect outside of the clipping area.\n *\n * @param x      the x coordinate\n * @param y      the y coordinate\n * @param width  the width of the rectangle\n * @param height the height of the rectangle\n * @see #getClipBounds()\n */\n", "func_signal": "public void clipRect(int x, int y, int width, int height)", "code": "{\n    prt(\"%clipRect\");\n    y = transformY(y);\n    clippingRect = new Rectangle(x, y, width, height);\n    prt(\"initclip\");\n    prt(x, y, \"moveto\");\n    prt(x + width, y, \"lineto\");\n    prt(x + width, y - height, \"lineto\");\n    prt(x, y - height, \"lineto\");\n    prt(\"closepath eoclip newpath\");\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * Disposes of this graphics context.  The Graphics context cannot be used after being disposed of.\n *\n * @see #finalize\n */\n", "func_signal": "public void dispose()", "code": "{\n    prt(\"%dispose\");\n    os.flush();\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * Constructs a new PSGr Object. Unlike regular Graphics objects, PSGr contexts can be created directly.\n *\n * @param o Output stream for PostScript output\n * @see #create\n */\n", "func_signal": "public PSGr(OutputStream o, Graphics g)", "code": "{\n    os = new PrintWriter(o);\n    this.g = g;\n    emitProlog();\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * Draws an outlined rounded corner rectangle using the current color.\n *\n * @param x         the x coordinate\n * @param y         the y coordinate\n * @param width     the width of the rectangle\n * @param height    the height of the rectangle\n * @param arcWidth  the diameter of the arc\n * @param arcHeight the radius of the arc\n * @see #fillRoundRect\n */\n", "func_signal": "public void drawRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)", "code": "{\n    prt(\"%drawRoundRect\");\n    doRoundRect(x, y, width, height, arcWidth, arcHeight, false);\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * Sets the font for all subsequent text-drawing operations.\n *\n * @param f the specified font\n * @see Font\n * @see #getFont\n * @see #drawString\n * @see #drawBytes\n * @see #drawChars\n */\n", "func_signal": "public void setFont(Font f)", "code": "{\n    if (f != null) {\n        this.font = f;\n        String javaName = font.getName();\n        int javaStyle = font.getStyle();\n        String psName;\n\n        if (javaName.equals(\"Symbol\"))\n            psName = \"Symbol\";\n            // The constant was \"Times\" in the next line,\n            // but David Binger changed it to \"TimesRoman\".\n        else if (javaName.equals(\"TimesRoman\")) {\n            psName = \"Times-\";\n            switch (javaStyle) {\n                case Font.PLAIN:\n                    psName += \"Roman\";\n                    break;\n                case Font.BOLD:\n                    psName += \"Bold\";\n                    break;\n                case Font.ITALIC:\n                    psName += \"Italic\";\n                    break;\n                case (Font.ITALIC + Font.BOLD):\n                    psName += \"BoldItalic\";\n                    break;\n            }\n        } else if (javaName.equals(\"Helvetica\") || javaName.equals(\"Courier\")) {\n            psName = javaName;\n            switch (javaStyle) {\n                case Font.PLAIN:\n                    break;\n                case Font.BOLD:\n                    psName += \"-Bold\";\n                    break;\n                case Font.ITALIC:\n                    psName += \"-Oblique\";\n                    break;\n                case (Font.ITALIC + Font.BOLD):\n                    psName += \"BoldOblique\";\n                    break;\n            }\n        } else\n            psName = \"Courier\";\n        String s = \"/\" + psName + \" findfont \";\n        s += font.getSize() + \" scalefont setfont\";\n        prt(s);\n    }\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * attempt to start Rserve. Note: parameters are <b>not</b> quoted, so avoid using any quotes in arguments\n *\n * @param cmd      command necessary to start R\n * @param rargs    arguments are are to be passed to R\n * @param rsrvargs arguments to be passed to Rserve\n * @return <code>true</code> if Rserve is running or was successfully started, <code>false</code> otherwise.\n */\n", "func_signal": "public static boolean launchRserve(String cmd, String rargs, String rsrvargs, boolean debug)", "code": "{\n    try {\n        Process p;\n        boolean isWindows = false;\n        String osname = System.getProperty(\"os.name\");\n        if (osname != null && osname.length() >= 7 && osname.substring(0, 7).equals(\"Windows\")) {\n            isWindows = true; /* Windows startup */\n            p = Runtime.getRuntime().exec(\"\\\"\" + cmd + \"\\\" -e \\\"library(Rserve);Rserve(\" + (debug ? \"TRUE\" : \"FALSE\") + \",args='\" + rsrvargs + \"')\\\" \" + rargs);\n        } else /* unix startup */\n            p = Runtime.getRuntime().exec(new String[]{\n                    \"/bin/sh\", \"-c\",\n                    \"echo 'library(Rserve);Rserve(\" + (debug ? \"TRUE\" : \"FALSE\") + \",args=\\\"\" + rsrvargs + \"\\\")'|\" + cmd + \" \" + rargs\n            });\n        System.out.println(\"waiting for Rserve to start ... (\" + p + \")\");\n        // we need to fetch the output - some platforms will die if you don't ...\n        StreamHog errorHog = new StreamHog(p.getErrorStream(), false);\n        StreamHog outputHog = new StreamHog(p.getInputStream(), false);\n        if (!isWindows) /* on Windows the process will never return, so we cannot wait */\n            p.waitFor();\n        System.out.println(\"call terminated, let us try to connect ...\");\n    } catch (Exception x) {\n        System.out.println(\"failed to start Rserve process with \" + x.getMessage());\n        return false;\n    }\n    int attempts = 5; /* try up to 5 times before giving up. We can be conservative here, because at this point the process execution itself was successful and the start up is usually asynchronous */\n    while (attempts > 0) {\n        try {\n            RConnection c = new RConnection();\n            System.out.println(\"Rserve is running.\");\n            c.close();\n            return true;\n        } catch (Exception e2) {\n            System.out.println(\"Try failed with: \" + e2.getMessage());\n        }\n        /* a safety sleep just in case the start up is delayed or asynchronous */\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException ignored) {\n        }\n        attempts--;\n    }\n    return false;\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\r\\RService.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * This constructor requires a Frame and a desired size\n */\n", "func_signal": "public Scatter2DPlot(MFrame frame, int width, int height, DataSet data, int[] Vars, JList varList, boolean matrix)", "code": "{\n    super(frame);\n    boolean matrix1 = matrix;\n    this.data = data;\n    this.width = width;\n    this.height = height;\n    if (matrix) {\n        super.printable = false;\n        border = 15;\n        xShift = 12;\n        yShift = -12;\n    } else {\n        border = 30;\n        xShift = 0;\n        yShift = 0;\n    }\n    this.varList = varList;\n    this.Vars = Vars;\n\n    //    this.setBackground(new Color(255, 255, 152));\n    //this.setBackground(new Color(0, 0, 0));\n\n    // the events we are interested in.\n    this.enableEvents(AWTEvent.MOUSE_MOTION_EVENT_MASK);\n    this.enableEvents(AWTEvent.ITEM_EVENT_MASK);\n    this.requestFocus();\n\n    if (data.n < 50)\n        alphap = 12;\n    else if (data.n < 100)\n        alphap = 10;\n    else if (data.n < 500)\n        alphap = 9;\n    else if (data.n < 1000)\n        alphap = 8;\n    else if (data.n < 2000)\n        alphap = 6;\n    else\n        alphap = 5;\n    alpha = alphas[alphap];\n\n    xMin = data.getMin(Vars[0]);\n    xMax = data.getMax(Vars[0]);\n    double yMin = data.getMin(Vars[1]);\n    double yMax = data.getMax(Vars[1]);\n\n    setCoordinates(xMin, yMin, xMax, yMax, -1);\n\n    create();\n\n    roundX = (int) Math.max(0, 2 - Math.round((Math.log(xMax - xMin) / Math.log(10))));\n    roundY = (int) Math.max(0, 2 - Math.round((Math.log(yMax - yMin) / Math.log(10))));\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\plots\\Scatter2DPlot.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * Clears the specified rectangle by filling it with the current background color of the current drawing surface.\n * Which drawing surface it selects depends on how the graphics context was created.\n *\n * @param x      the x coordinate\n * @param y      the y coordinate\n * @param width  the width of the rectangle\n * @param height the height of the rectangle\n * @see #fillRect\n * @see #drawRect\n */\n", "func_signal": "public void clearRect(int x, int y, int width, int height)", "code": "{\n    prt(\"%clearRect\");\n    prt(\"gsave\");\n    prt(\"1 1 1 setrgbcolor\");\n    doRect(x, y, width, height, true);\n    prt(\"grestore\");\n}", "path": "src\\de\\mpicbg\\sweng\\mondrian\\util\\postscript\\PSGr.java", "repo_name": "knime-mpicbg/mondrian", "stars": 5, "license": "None", "language": "java", "size": 2672}
{"docstring": "/**\n * Set threshold number\n */\n", "func_signal": "public void setCompressionThreshold(int threshold)", "code": "{\n    if (debug > 1) {\n        System.out.println(\"setCompressionThreshold to \" + threshold);\n    }\n    this.threshold = threshold;\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\servlets-examples\\WEB-INF\\classes\\compressionFilters\\CompressionServletResponseWrapper.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Flush the buffer and commit this response.\n *\n * @exception IOException if an input/output error occurs\n */\n", "func_signal": "public void flushBuffer() throws IOException", "code": "{\n    if (debug > 1) {\n        System.out.println(\"flush buffer @ CompressionServletResponseWrapper\");\n    }\n    ((CompressionResponseStream)stream).flush();\n\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\jsp-examples\\WEB-INF\\classes\\compressionFilters\\CompressionServletResponseWrapper.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Finish a response.\n */\n", "func_signal": "public void finishResponse()", "code": "{\n    try {\n        if (writer != null) {\n            writer.close();\n        } else {\n            if (stream != null)\n                stream.close();\n        }\n    } catch (IOException e) {\n    }\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\servlets-examples\\WEB-INF\\classes\\compressionFilters\\CompressionServletResponseWrapper.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Return the servlet output stream associated with this Response.\n *\n * @exception IllegalStateException if <code>getWriter</code> has\n *  already been called for this response\n * @exception IOException if an input/output error occurs\n */\n", "func_signal": "public ServletOutputStream getOutputStream() throws IOException", "code": "{\n\n    if (writer != null)\n        throw new IllegalStateException(\"getWriter() has already been called for this response\");\n\n    if (stream == null)\n        stream = createOutputStream();\n    if (debug > 1) {\n        System.out.println(\"stream is set to \"+stream+\" in getOutputStream\");\n    }\n\n    return (stream);\n\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\jsp-examples\\WEB-INF\\classes\\compressionFilters\\CompressionServletResponseWrapper.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Return the servlet output stream associated with this Response.\n *\n * @exception IllegalStateException if <code>getWriter</code> has\n *  already been called for this response\n * @exception IOException if an input/output error occurs\n */\n", "func_signal": "public ServletOutputStream getOutputStream() throws IOException", "code": "{\n\n    if (writer != null)\n        throw new IllegalStateException(\"getWriter() has already been called for this response\");\n\n    if (stream == null)\n        stream = createOutputStream();\n    if (debug > 1) {\n        System.out.println(\"stream is set to \"+stream+\" in getOutputStream\");\n    }\n\n    return (stream);\n\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\servlets-examples\\WEB-INF\\classes\\compressionFilters\\CompressionServletResponseWrapper.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Created by IntelliJ IDEA.\n * User: Z173466\n * Date: Jun 20, 2010\n * Time: 8:04:30 AM\n * To change this template use File | Settings | File Templates.\n */\n", "func_signal": "@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Description", "code": "{\n    @DescriptorKey(\"description\")\n    String value();\n}", "path": "src\\java\\com\\kgawa\\jmx\\Description.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Place this filter into service.\n *\n * @param filterConfig The filter configuration object\n */\n", "func_signal": "public void init(FilterConfig filterConfig) throws ServletException", "code": "{\n\n\tthis.filterConfig = filterConfig;\n    this.encoding = filterConfig.getInitParameter(\"encoding\");\n    String value = filterConfig.getInitParameter(\"ignore\");\n    if (value == null)\n        this.ignore = true;\n    else if (value.equalsIgnoreCase(\"true\"))\n        this.ignore = true;\n    else if (value.equalsIgnoreCase(\"yes\"))\n        this.ignore = true;\n    else\n        this.ignore = false;\n\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\jsp-examples\\WEB-INF\\classes\\filters\\SetCharacterEncodingFilter.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Flush the buffer and commit this response.\n *\n * @exception IOException if an input/output error occurs\n */\n", "func_signal": "public void flushBuffer() throws IOException", "code": "{\n    if (debug > 1) {\n        System.out.println(\"flush buffer @ CompressionServletResponseWrapper\");\n    }\n    ((CompressionResponseStream)stream).flush();\n\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\servlets-examples\\WEB-INF\\classes\\compressionFilters\\CompressionServletResponseWrapper.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Set threshold number\n */\n", "func_signal": "public void setCompressionThreshold(int threshold)", "code": "{\n    if (debug > 1) {\n        System.out.println(\"setCompressionThreshold to \" + threshold);\n    }\n    this.threshold = threshold;\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\jsp-examples\\WEB-INF\\classes\\compressionFilters\\CompressionServletResponseWrapper.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Calls the parent constructor which creates a ServletResponse adaptor\n * wrapping the given response object.\n */\n", "func_signal": "public CompressionServletResponseWrapper(HttpServletResponse response)", "code": "{\n    super(response);\n    origResponse = response;\n    if (debug > 1) {\n        System.out.println(\"CompressionServletResponseWrapper constructor gets called\");\n    }\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\jsp-examples\\WEB-INF\\classes\\compressionFilters\\CompressionServletResponseWrapper.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Set content type\n */\n", "func_signal": "public void setContentType(String contentType)", "code": "{\n    if (debug > 1) {\n        System.out.println(\"setContentType to \"+contentType);\n    }\n    this.contentType = contentType;\n    origResponse.setContentType(contentType);\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\servlets-examples\\WEB-INF\\classes\\compressionFilters\\CompressionServletResponseWrapper.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * The <code>doFilter</code> method of the Filter is called by the container\n * each time a request/response pair is passed through the chain due\n * to a client request for a resource at the end of the chain.\n * The FilterChain passed into this method allows the Filter to pass on the\n * request and response to the next entity in the chain.<p>\n * This method first examines the request to check whether the client support\n * compression. <br>\n * It simply just pass the request and response if there is no support for\n * compression.<br>\n * If the compression support is available, it creates a\n * CompressionServletResponseWrapper object which compresses the content and\n * modifies the header if the content length is big enough.\n * It then invokes the next entity in the chain using the FilterChain object\n * (<code>chain.doFilter()</code>), <br>\n **/\n", "func_signal": "public void doFilter ( ServletRequest request, ServletResponse response,\n                    FilterChain chain ) throws IOException, ServletException", "code": "{\n\n    if (debug > 0) {\n        System.out.println(\"@doFilter\");\n    }\n\n    if (compressionThreshold == 0) {\n        if (debug > 0) {\n            System.out.println(\"doFilter gets called, but compressionTreshold is set to 0 - no compression\");\n        }\n        chain.doFilter(request, response);\n        return;\n    }\n\n    boolean supportCompression = false;\n    if (request instanceof HttpServletRequest) {\n        if (debug > 1) {\n            System.out.println(\"requestURI = \" + ((HttpServletRequest)request).getRequestURI());\n        }\n\n        // Are we allowed to compress ?\n        String s = (String) ((HttpServletRequest)request).getParameter(\"gzip\");\n        if (\"false\".equals(s)) {\n            if (debug > 0) {\n                System.out.println(\"got parameter gzip=false --> don't compress, just chain filter\");\n            }\n            chain.doFilter(request, response);\n            return;\n        }\n\n        Enumeration e =\n            ((HttpServletRequest)request).getHeaders(\"Accept-Encoding\");\n        while (e.hasMoreElements()) {\n            String name = (String)e.nextElement();\n            if (name.indexOf(\"gzip\") != -1) {\n                if (debug > 0) {\n                    System.out.println(\"supports compression\");\n                }\n                supportCompression = true;\n            } else {\n                if (debug > 0) {\n                    System.out.println(\"no support for compresion\");\n                }\n            }\n        }\n    }\n\n    if (!supportCompression) {\n        if (debug > 0) {\n            System.out.println(\"doFilter gets called wo compression\");\n        }\n        chain.doFilter(request, response);\n        return;\n    } else {\n        if (response instanceof HttpServletResponse) {\n            CompressionServletResponseWrapper wrappedResponse =\n                new CompressionServletResponseWrapper((HttpServletResponse)response);\n            wrappedResponse.setDebugLevel(debug);\n            wrappedResponse.setCompressionThreshold(compressionThreshold);\n            if (debug > 0) {\n                System.out.println(\"doFilter gets called with compression\");\n            }\n            try {\n                chain.doFilter(request, wrappedResponse);\n            } finally {\n                wrappedResponse.finishResponse();\n            }\n            return;\n        }\n    }\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\servlets-examples\\WEB-INF\\classes\\compressionFilters\\CompressionFilter.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Process start tag\n *\n * @return EVAL_BODY_INCLUDE\n */\n", "func_signal": "public int doStartTag() throws JspException", "code": "{\n    i = 0;\n\treturn EVAL_BODY_TAG;\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\jsp-examples\\WEB-INF\\classes\\examples\\FooTag.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Calls the parent constructor which creates a ServletResponse adaptor\n * wrapping the given response object.\n */\n", "func_signal": "public CompressionServletResponseWrapper(HttpServletResponse response)", "code": "{\n    super(response);\n    origResponse = response;\n    if (debug > 1) {\n        System.out.println(\"CompressionServletResponseWrapper constructor gets called\");\n    }\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\servlets-examples\\WEB-INF\\classes\\compressionFilters\\CompressionServletResponseWrapper.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Return the writer associated with this Response.\n *\n * @exception IllegalStateException if <code>getOutputStream</code> has\n *  already been called for this response\n * @exception IOException if an input/output error occurs\n */\n", "func_signal": "public PrintWriter getWriter() throws IOException", "code": "{\n\n    if (writer != null)\n        return (writer);\n\n    if (stream != null)\n        throw new IllegalStateException(\"getOutputStream() has already been called for this response\");\n\n    stream = createOutputStream();\n    if (debug > 1) {\n        System.out.println(\"stream is set to \"+stream+\" in getWriter\");\n    }\n    //String charset = getCharsetFromContentType(contentType);\n    String charEnc = origResponse.getCharacterEncoding();\n    if (debug > 1) {\n        System.out.println(\"character encoding is \" + charEnc);\n    }\n    // HttpServletResponse.getCharacterEncoding() shouldn't return null\n    // according the spec, so feel free to remove that \"if\"\n    if (charEnc != null) {\n        writer = new PrintWriter(new OutputStreamWriter(stream, charEnc));\n    } else {\n        writer = new PrintWriter(stream);\n    }\n    \n    return (writer);\n\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\jsp-examples\\WEB-INF\\classes\\compressionFilters\\CompressionServletResponseWrapper.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Create and return a ServletOutputStream to write the content\n * associated with this Response.\n *\n * @exception IOException if an input/output error occurs\n */\n", "func_signal": "public ServletOutputStream createOutputStream() throws IOException", "code": "{\n    if (debug > 1) {\n        System.out.println(\"createOutputStream gets called\");\n    }\n\n    CompressionResponseStream stream = new CompressionResponseStream(origResponse);\n    stream.setDebugLevel(debug);\n    stream.setBuffer(threshold);\n\n    return stream;\n\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\jsp-examples\\WEB-INF\\classes\\compressionFilters\\CompressionServletResponseWrapper.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Create and return a ServletOutputStream to write the content\n * associated with this Response.\n *\n * @exception IOException if an input/output error occurs\n */\n", "func_signal": "public ServletOutputStream createOutputStream() throws IOException", "code": "{\n    if (debug > 1) {\n        System.out.println(\"createOutputStream gets called\");\n    }\n\n    CompressionResponseStream stream = new CompressionResponseStream(origResponse);\n    stream.setDebugLevel(debug);\n    stream.setBuffer(threshold);\n\n    return stream;\n\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\servlets-examples\\WEB-INF\\classes\\compressionFilters\\CompressionServletResponseWrapper.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Set content type\n */\n", "func_signal": "public void setContentType(String contentType)", "code": "{\n    if (debug > 1) {\n        System.out.println(\"setContentType to \"+contentType);\n    }\n    this.contentType = contentType;\n    origResponse.setContentType(contentType);\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\jsp-examples\\WEB-INF\\classes\\compressionFilters\\CompressionServletResponseWrapper.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Place this filter into service.\n *\n * @param filterConfig The filter configuration object\n */\n", "func_signal": "public void init(FilterConfig filterConfig)", "code": "{\n\n    config = filterConfig;\n    if (filterConfig != null) {\n        String value = filterConfig.getInitParameter(\"debug\");\n        if (value!=null) {\n            debug = Integer.parseInt(value);\n        } else {\n            debug = 0;\n        }\n        String str = filterConfig.getInitParameter(\"compressionThreshold\");\n        if (str!=null) {\n            compressionThreshold = Integer.parseInt(str);\n            if (compressionThreshold != 0 && compressionThreshold < minThreshold) {\n                if (debug > 0) {\n                    System.out.println(\"compressionThreshold should be either 0 - no compression or >= \" + minThreshold);\n                    System.out.println(\"compressionThreshold set to \" + minThreshold);\n                }\n                compressionThreshold = minThreshold;\n            }\n        } else {\n            compressionThreshold = 0;\n        }\n\n    } else {\n        compressionThreshold = 0;\n    }\n\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\servlets-examples\\WEB-INF\\classes\\compressionFilters\\CompressionFilter.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "/**\n * Return the writer associated with this Response.\n *\n * @exception IllegalStateException if <code>getOutputStream</code> has\n *  already been called for this response\n * @exception IOException if an input/output error occurs\n */\n", "func_signal": "public PrintWriter getWriter() throws IOException", "code": "{\n\n    if (writer != null)\n        return (writer);\n\n    if (stream != null)\n        throw new IllegalStateException(\"getOutputStream() has already been called for this response\");\n\n    stream = createOutputStream();\n    if (debug > 1) {\n        System.out.println(\"stream is set to \"+stream+\" in getWriter\");\n    }\n    //String charset = getCharsetFromContentType(contentType);\n    String charEnc = origResponse.getCharacterEncoding();\n    if (debug > 1) {\n        System.out.println(\"character encoding is \" + charEnc);\n    }\n    // HttpServletResponse.getCharacterEncoding() shouldn't return null\n    // according the spec, so feel free to remove that \"if\"\n    if (charEnc != null) {\n        writer = new PrintWriter(new OutputStreamWriter(stream, charEnc));\n    } else {\n        writer = new PrintWriter(stream);\n    }\n    \n    return (writer);\n\n}", "path": "support\\apache-tomcat-5.5.29\\webapps\\servlets-examples\\WEB-INF\\classes\\compressionFilters\\CompressionServletResponseWrapper.java", "repo_name": "lkb2k/SampleSpring2App", "stars": 5, "license": "None", "language": "java", "size": 10772}
{"docstring": "//> STATIC CONSTANTS\n\t/** Default row format used in {@link #testContactExport()}.  N.B. This will have to be kept up-to-date if there\n\t * is a change to how the export works in the UI, as this may change the export order. \n\t * @return default row format for exporting contacts */\n", "func_signal": "private static final CsvRowFormat getContactExportRowFormat()", "code": "{\n\t\tCsvRowFormat rowFormat = new CsvRowFormat();\n\t\trowFormat.addMarker(CsvUtils.MARKER_CONTACT_NAME);\n\t\trowFormat.addMarker(CsvUtils.MARKER_CONTACT_PHONE);\n\t\trowFormat.addMarker(CsvUtils.MARKER_CONTACT_OTHER_PHONE);\n\t\trowFormat.addMarker(CsvUtils.MARKER_CONTACT_EMAIL);\n\t\trowFormat.addMarker(CsvUtils.MARKER_CONTACT_STATUS);\n\t\trowFormat.addMarker(CsvUtils.MARKER_CONTACT_NOTES);\n\t\trowFormat.addMarker(CsvUtils.MARKER_CONTACT_GROUPS);\n\t\treturn rowFormat;\n\t}", "path": "src\\test\\java\\net\\frontlinesms\\csv\\CsvExportTests.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "//> TEST METHODS\n\t/**\n\t * Test {@link CsvExporter#exportContacts(File, List, CsvRowFormat)}.\n\t * @throws IOException If there was an unexpected error writing or reading to a file\n\t */\n", "func_signal": "public void testContactExport() throws IOException", "code": "{\n\t\t// Export a number of contacts to a file, and check that the generated file is as expected.\n\t\tArrayList<Contact> contacts = new ArrayList<Contact>();\n\t\tcontacts.add(new Contact(\"Test Number\", \"000\", \"\", \"\", \"\", true));\n\t\tcontacts.add(new Contact(\"\u0634\u0626\u0647\u0629\", \"07890123456\", \"0987654321\", \"azim@mo.jo\", \"\", false));\n\t\tcontacts.add(new Contact(\"Sly Eddie\", \"01234567890\", \"554466221133\", \"sly.eddie@ramprakash.co.uk\", \"Sly Eddie is a sneaky chap.\", true));\n\t\tcontacts.add(new Contact(\"Richard E. Grant\", \"+44852774\", \"+1800-RICH-ARDE\", \"\", \"\\\"What a piece of work is a man!\\\"\", true));\n\n\t\t// Make sure the English i18n bundle is available to provision the export column names\n\t\tLanguageBundle englishBundle = InternationalisationUtils.getLanguageBundleFromClasspath(\"/resources/languages/frontlineSMS.properties\");\n\t\tThinlet.DEFAULT_ENGLISH_BUNDLE = englishBundle.getProperties();\n\t\t\n\t\tFile generatedFile = super.getOutputFile(this.getClass().getSimpleName() + \".contacts.csv\");\n\t\tCsvExporter.exportContacts(generatedFile, contacts, getContactExportRowFormat());\n\t\t//assertEquals(\"Generated CSV file did not contain the expected values.\", this.getClass().getResourceAsStream(this.getClass().getSimpleName() + \".contacts.csv\"), new FileInputStream(generatedFile));\n\t}", "path": "src\\test\\java\\net\\frontlinesms\\csv\\CsvExportTests.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "/** Increment the import progress bar */\n", "func_signal": "public void incProgress()", "code": "{\n\tObject progress = find(currentPage, COMPONENT_PROGRESS);\n\tsetInteger(progress, VALUE, getInteger(progress, VALUE) + 1);\n}", "path": "src\\main\\java\\net\\frontlinesms\\ui\\FirstTimeWizard.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "/**\n * This Load Balancing implementation returns every other available gateway\n * on each invocation.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic AGateway balance(OutboundMessage msg, List candidates)", "code": "{\n\tif (currentGateway >= candidates.size()) currentGateway = 0;\n\treturn ((AGateway) candidates.get(currentGateway++));\n}", "path": "src\\main\\java\\org\\smslib\\v3\\RoundRobinLoadBalancer.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "//> STATIC HELPER METHODS\n\t/**\n\t * Sleeps the thread for the requested number of millis.  If the thread is interrupted, it is ignored.\n\t * @param millis passed to {@link Thread#sleep(long)}\n\t */\n", "func_signal": "private void sleep(long millis)", "code": "{\n\t\ttry {\n\t\t\tif(this.eventListener != null) this.eventListener.actionPerformed(new ActionEvent(this, DatabaseConnectionTesterEventListener.ACTION_SLEEPING, Long.toString(millis)));\n\t\t\tThread.sleep(millis);\n\t\t} catch (InterruptedException ex) {\n\t\t\t/* ignore this */\n\t\t}\t\n\t}", "path": "src\\main\\java\\net\\frontlinesms\\DatabaseConnectionTester.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "/**\n * Convert an array of {@link String}s into a comma-separated list of {@link String}s.\n * @param strings\n * @return A list of the strings provided in the array separated by commas and surrounded by curly braces\n */\n", "func_signal": "private static final String toString(String[] strings)", "code": "{\n\tString ret = \"{\";\n\tfor(String s : strings) {\n\t\tret += s + \", \";\n\t}\n\treturn ret.substring(0, ret.length()-2) + \"}\";\n}", "path": "src\\test\\java\\net\\frontlinesms\\csv\\CsvExportTests.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "/**\n * Blocking method which will check that the database can connect.  If connection fails, this will be conveyed\n * to the user, who can then re-attempt connection, or modify their settings.\n */\n", "func_signal": "public void ensureConnected()", "code": "{\n\tint retryInMillis = 1000;\n\twhile(!checkConnection()) {\n\t\tSystem.out.println(\"Connection failed.  Will retry in \" + retryInMillis + \"ms\"); // FIXME remove sysout\n\t\t// TODO we should display a UI to the user with the following\n\t\t// 1. details of the connection problem\n\t\t// 2. the option to change database settings\n\t\t// 3. a button to attempt reconnection\n\t\tsleep(retryInMillis);\n\t\t// Double the time til the next retry.\n\t\tretryInMillis <<= 1;\n\t}\n\t// Connected successfully, so it's now safe to return\n}", "path": "src\\main\\java\\net\\frontlinesms\\DatabaseConnectionTester.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "//> ACCESSORS\n\t/**\n\t * @return the pdu of this sms \n\t * @throws IllegalStateException if this sms comprises more than one pdu \n\t */\n", "func_signal": "public String getMessagePdu() throws IllegalStateException", "code": "{\n\t\tif(this.messagePdus.length != 1) {\n\t\t\tthrow new IllegalStateException(\"Cannot get single PDU of a multipart message.\");\n\t\t}\n\t\treturn this.messagePdus[0];\n\t}", "path": "src\\test\\java\\org\\smslib\\IncomingSmsTestData.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "//> INSTANCE HELPER METHODS\n\t/** Populate and display the language selection form. */\n", "func_signal": "private void showLanguageSelection()", "code": "{\n\t\tObject language = loadComponentFromFile(UI_FILE_LANGUAGE_SELECTION);\n\t\tObject languagesList = find(language, COMPONENT_LANGUAGES_LIST);\n\t\tfor (LanguageBundle languageBundle : InternationalisationUtils.getLanguageBundles()) {\n\t\t\tObject item = createListItem(languageBundle.getLanguage(), languageBundle.getFilename());\n\t\t\tsetIcon(item, getFlagIcon(languageBundle));\n\t\t\tint index = -1;\n\t\t\tif (languageBundle.getCountry().equals(COUNTRY_GB)) {\n\t\t\t\tsetSelected(item, true);\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\tadd(languagesList, item, index);\n\t\t}\n\t\tif (currentPage != null) remove(currentPage);\n\t\tcurrentPage = language;\n\t\tadd(language);\n\t}", "path": "src\\main\\java\\net\\frontlinesms\\ui\\FirstTimeWizard.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "/**\n * Flags the internal thread to stop running.\n */\n", "func_signal": "public void stopRunning()", "code": "{\n\tthis.running = false;\n\tfor (EmailAccount acc : serverHandlers.keySet()) {\n\t\tserverHandlers.get(acc).stopRunning();\n\t}\n}", "path": "src\\main\\java\\net\\frontlinesms\\EmailServerHandler.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "/**\n * Show a particular page.\n * The page is selected by index from {@link #pages}.\n * @param newPageIndex the index into {@link #pages} of the next page to show. */\n", "func_signal": "private void showPage(int newPageIndex)", "code": "{\n\tremove(currentPage);\n\tthis.currentPageIndex = newPageIndex;\n\tif (currentPageIndex != -1) {\n\t\tcurrentPage = pages.get(currentPageIndex);\n\t\tadd(currentPage);\n\t} else {\n\t\tshowLanguageSelection();\n\t}\n}", "path": "src\\main\\java\\net\\frontlinesms\\ui\\FirstTimeWizard.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "//> CONSTRUCTORS\n\t/**\n\t * Create a new {@link DatabaseConnectionTester}.\n\t * @param frontlineSms \n\t */\n", "func_signal": "public DatabaseConnectionTester(FrontlineSMS frontlineSms)", "code": "{\n\t\t// Cache the contact DAO so we can run tests using it.\n\t\tthis.contactDao = frontlineSms.getContactDao();\n\t\tassert(this.contactDao != null) : \"The \" + this.getClass() + \" requires a \" + ContactDao.class.getSimpleName() + \" to function correctly.\";\n\t}", "path": "src\\main\\java\\net\\frontlinesms\\DatabaseConnectionTester.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "/**\n * Save the selected language\n * @param list\n */\n", "func_signal": "public void setLanguage(Object list)", "code": "{\n\tObject sel = getSelectedItem(list);\n\tAppProperties appProperties = AppProperties.getInstance();\n\tString filename = getAttachedObject(sel).toString();\n\tappProperties.setLanguageFilename(filename);\n\tLanguageBundle languageBundle = InternationalisationUtils.getLanguageBundle(new File(ResourceUtils.getConfigDirectoryPath() + \"languages/\" + filename));\n\tFrontlineUI.currentResourceBundle = languageBundle;\n\tsetResourceBundle(languageBundle.getProperties(), languageBundle.isRightToLeft());\n\tFont font = languageBundle.getFont();\n\tif(font != null) {\n\t\tsetFont(new Font(font.getName(), getFont().getStyle(), getFont().getSize()));\n\t}\n\tappProperties.saveToDisk();\n\tframeLauncher.setTitle(InternationalisationUtils.getI18NString(I18N_FIRST_TIME_WIZARD_TITLE));\n\tloadPages();\n\tshowPage(0);\n}", "path": "src\\main\\java\\net\\frontlinesms\\ui\\FirstTimeWizard.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "//> INSTANCE METHODS\n\t/**\n\t * Gets all files from the supplied directory and its subdirectories.\n\t * @param directory \n\t * @return  all files in the supplied directory and its subdirectories\n\t */\n", "func_signal": "public Collection<File> getFiles(File directory)", "code": "{\n\t\tHashSet<File> files = new HashSet<File>();\n\t\t\n\t\tfor(File f : directory.listFiles()) {\n\t\t\tif(f.isDirectory()) {\n\t\t\t\tfiles.addAll(getFiles(f));\n\t\t\t} else {\n\t\t\t\tfiles.add(f);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn files;\n\t}", "path": "src\\tools\\java\\net\\frontlinesms\\logging\\logreader\\LocalLogFetcher.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "/**\n * Method called when user make the mode selection.\n * @param isAdvanced\n */\n", "func_signal": "public void selectedMode(boolean isAdvanced)", "code": "{\n\tclassicView = !isAdvanced;\n\tgotoNextPage();\n}", "path": "src\\main\\java\\net\\frontlinesms\\ui\\FirstTimeWizard.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "/** @see CATHandler#listMessages(MessageClass) */\n", "func_signal": "@Override\nprotected String listMessages(MessageClass messageClass) throws IOException, SMSLibDeviceException", "code": "{\n\tString response = super.listMessages(messageClass);\n\tBufferedReader reader = new BufferedReader(new StringReader(response));\n\tString line;\n\tStringBuilder resp = new StringBuilder();\n\twhile ( (line = reader.readLine()) != null) {\n\t\tline = line.trim();\n\t\tif (line.length() > 0) {\n\t\t\tif (!line.toUpperCase().contains(\"ERROR\")) {\n\t\t\t\tresp.append(line).append(\"\\n\");\n\t\t\t}\n\t\t}\n\t}\n\tresp.append(\"OK\");\n\treturn resp.toString();\n}", "path": "src\\main\\java\\org\\smslib\\handler\\CATHandler_Motorola_RAZRV3x.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "/**\n * Test {@link CsvUtils#escapeValue(String)}\n * TODO move this to CsvUtilsTest class\n */\n", "func_signal": "public void testCsvEscape()", "code": "{\n\ttestCsvEscaped(\"one\", \"one\", \"\\\"one\\\"\");\n\ttestCsvEscaped(\"on\\\"e\", \"\\\"on\\\"\\\"e\\\"\");\n\ttestCsvEscaped(\"column0\\tcolumn1\", \"column0\\tcolumn1\", \"\\\"column0\\tcolumn1\\\"\");\n\ttestCsvEscaped(\"line0\\rline1\", \"\\\"line0\\rline1\\\"\");\n}", "path": "src\\test\\java\\net\\frontlinesms\\csv\\CsvExportTests.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "/**\n * Remove the supplied email from outbox.\n * \n * @param deleted\n */\n", "func_signal": "public void removeFromOutbox(Email deleted)", "code": "{\n\tLOG.trace(\"ENTER\");\n\toutbox.remove(deleted);\n\tLOG.debug(\"Email [\" + deleted + \"] removed from outbox. Size is [\" + outbox.size() + \"]\");\n\tLOG.trace(\"EXIT\");\n}", "path": "src\\main\\java\\net\\frontlinesms\\EmailServerHandler.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "/**\n * Start the FrontlineSMS user interface. \n * @throws Throwable if {@link Throwable} was thrown by {@link UiGeneratorController}'s constructor.\n */\n", "func_signal": "public void startFrontline() throws Throwable", "code": "{\n\tAppProperties appProperties = AppProperties.getInstance();\n\tappProperties.setShowWizard(false);\n\tappProperties.saveToDisk();\n\t\n\tUiProperties uiProperties = UiProperties.getInstance();\n\tuiProperties.setViewModeClassic(this.classicView);\n\tuiProperties.saveToDisk();\n\t\n\tframeLauncher.dispose();\n\tnew UiGeneratorController(frontline, true);\n}", "path": "src\\main\\java\\net\\frontlinesms\\ui\\FirstTimeWizard.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "//> STATIC HELPER METHODS\n\t/**\n\t * Internal test method for {@link #testCsvEscape()}\n\t * @param unescaped\n\t * @param acceptedEscaped\n\t */\n", "func_signal": "private static void testCsvEscaped(String unescaped, String... acceptedEscaped)", "code": "{\n\t\tString escaped = CsvUtils.escapeValue(unescaped);\n\t\tfor(String expectedEscaped : acceptedEscaped) {\n\t\t\tif(escaped.equals(expectedEscaped)) return;\n\t\t}\n\t\t\n\t\tthrow new IllegalArgumentException(\"Expected result not achieved:\" +\n\t\t\t\t\"\\nunescaped: \" + unescaped +\n\t\t\t\t\"\\nescaped  : \" + escaped + \n\t\t\t\t\"\\naccepted : \" + toString(acceptedEscaped));\n\t}", "path": "src\\test\\java\\net\\frontlinesms\\csv\\CsvExportTests.java", "repo_name": "ekala/Ushahidi_FrontlineSMS", "stars": 5, "license": "None", "language": "java", "size": 100523}
{"docstring": "/**\n * Handle incomming protocol command with id.\n */\n", "func_signal": "private void handleIncomingRawCommand(String cmd)", "code": "{\n\tSystem.out.println(\"R:\" + cmd);\n\tint break_index = cmd.indexOf(':');\n\tif (break_index == -1) {\n\t\tprotocolFailure(\"no ':' found\");\n\t\treturn;\n\t}\n\tint id = Integer.parseInt(cmd.substring(0, break_index).trim());\n\tif (id != messageInCounter) {\n\t\tprotocolFailure(\n\t\t\t\t\"invalid id: \"\n\t\t\t\t+ String.valueOf(id)\n\t\t\t\t+ \"; should be: \"\n\t\t\t\t+ String.valueOf(messageInCounter)\n\t\t\t\t);\n\t}\n\tmessageInCounter++;\n\thandleIncomingCommand(cmd.substring(\n\t\t\t\tbreak_index+1, cmd.length()\n\t\t\t\t).trim());\n}", "path": "src\\net\\CommonTransportHandler.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Is game currently active.\n */\n", "func_signal": "public boolean isActive()", "code": "{\n\tif (gameController == null) {\n\t\treturn false;\n\t}\n\n\tif (!gameController.isActive()) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "src\\Goban.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Called after connection was estabilished.\n */\n", "func_signal": "public void handleTransportConnected(\n\t\tRemoteGameControllerTransport t, String s\n\t\t)", "code": "{\n\tparent.handleRemoteGameControllerInfo(\n\t\t\tthis,\n\t\t\t\"GC Transport: connected: \" + s\n\t\t\t);\n}", "path": "src\\net\\RemoteGameController.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Start application.\n */\n", "func_signal": "protected void startApp()", "code": "{\n\tdisplay = Display.getDisplay(this);\n\tdisplay.setCurrent(goban);\n\n\ttry {\n\t\tthread = new Thread(goban);\n\t\tthread.start();\n\t} catch (Error e) {\n\t\tdestroyApp(false);\n\t\tnotifyDestroyed();\n\t}\n}", "path": "src\\GameMain.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Ctor.\n */\n", "func_signal": "public Goban()", "code": "{\n\tlogView.appendString(\"---\");\n\tlogView.appendString(\"Welcome in DPC Goban!\");\n\tlogView.appendString(\"---\");\n\tlogView.appendString(\n\t\t\t\"Use menu help option\"\n\t\t\t);\n\n\taddCommand(exitCmd);\n\n\tboard = new Board(this, boardView);\n\n\taddCommand(moveReqCmd);\n\taddCommand(passReqCmd);\n\taddCommand(playWhiteCmd);\n\taddCommand(playBlackCmd);\n\taddCommand(beServerCmd);\n\taddCommand(beClientCmd);\n\taddCommand(printHelpCmd);\n\taddCommand(muteToggleCmd);\n\trepaintUI();\n\n}", "path": "src\\Goban.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Request from current server giving user control over the black stones.\n */\n", "func_signal": "public void playBlack()", "code": "{\n\tif (gameController != null) {\n\t\tgameController.handleColor(Board.COLOR_BLACK);\n\t}\n}", "path": "src\\Goban.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Create local go server (arbiter) and\n * play game locally, listening for\n * incoming players.\n */\n", "func_signal": "public void beServer()", "code": "{\n\tshutdown();\n\ttry {\n\t\tLocalArbiter arbiter = new LocalArbiter(this);\n\t\tgameController = new LocalGameController(board, logView);\n\t\tarbiter.connected(gameController);\n\t\tthis.arbiter = arbiter;\n\t} catch (LocalArbiter.CreationError e) {\n\t\tlogView.appendString(\n\t\t\t\"Couldn't create server. Reason: `\"\n\t\t\t+ e.getMessage() + \"'\"\n\t\t\t);\n\t}\n}", "path": "src\\Goban.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Repaint board.\n *\n * Board need redrawing crosshair every time, so it overloads\n * paint function.\n */\n", "func_signal": "public void paint(Graphics g)", "code": "{\n\tsuper.paint(g);\n\tpaintCrosshair(g);\n\tbgRefreshNeeded = false;\n\tlastTime = System.currentTimeMillis();\n}", "path": "src\\ui\\BoardView.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Current screen division point x-coordinated.\n */\n", "func_signal": "public int getXDiv()", "code": "{\n\tif (timerToggled) {\n\t\treturn getWidth();\n\t}\n\treturn getWidth() * 3 / 4;\n}", "path": "src\\Goban.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Handle key presses.\n */\n", "func_signal": "public void keyPressed(int keycode)", "code": "{\n\tif (fullSizeLogMode) {\n\t\tfullSizeLogMode = false;\n\t\trepaintUI();\n\t}\n\n\tif (board == null) {\n\t\treturn;\n\t}\n\n\n\tswitch (getGameAction(keycode)) {\n\t\tcase UP:\n\t\t\tboard.moveCrosshair(Board.MOVE_UP);\n\t\t\tbreak;\n\t\tcase DOWN:\n\t\t\tboard.moveCrosshair(Board.MOVE_DOWN);\n\t\t\tbreak;\n\t\tcase LEFT:\n\t\t\tboard.moveCrosshair(Board.MOVE_LEFT);\n\t\t\tbreak;\n\t\tcase RIGHT:\n\t\t\tboard.moveCrosshair(Board.MOVE_RIGHT);\n\t\t\tbreak;\n\t\tcase GAME_A:\n\t\t\tboard.zoomView(Board.ZOOM_OUT);\n\t\t\tbreak;\n\t\tcase GAME_B:\n\t\t\tboard.zoomView(Board.ZOOM_IN);\n\t\t\tbreak;\n\t\tcase GAME_C:\n\t\t\tchatToggled = !chatToggled;\n\t\t\trepaintUI();\n\t\t\tbreak;\n\t\tcase GAME_D:\n\t\t\tfullSizeLogMode = true;\n\t\t\trepaintUI();\n\t\t\tbreak;\n\t\tcase FIRE:\n\t\t\tmoveReq();\n\t\t\tbreak;\n\t}\n}", "path": "src\\Goban.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Pause application.\n */\n", "func_signal": "protected void pauseApp()", "code": "{\n\ttry {\n\t\tgoban.stop();\n\t\tthread.join();\n\t} catch (InterruptedException ie) {}\n}", "path": "src\\GameMain.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Try connecting to some remote game\n * and play game there.\n */\n", "func_signal": "public void beClient()", "code": "{\n\tshutdown();\n\ttry {\n\t\tRemoteArbiter arbiter = new RemoteArbiter(\n\t\t\t\tthis,\n\t\t\t\tRemoteArbiterTransport.BLUETOOTH\n\t\t\t\t);\n\t\tgameController = new LocalGameController(board, logView);\n\t\tarbiter.connected(gameController);\n\t\tthis.arbiter = arbiter;\n\t} catch (RemoteArbiter.CreationError e) {\n\t\tlogView.appendString(\n\t\t\t\"Couldn't connect to server. Reason: `\"\n\t\t\t+ e.getMessage() + \"'\"\n\t\t\t);\n\t}\n}", "path": "src\\Goban.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Thread loop.\n */\n", "func_signal": "public void run()", "code": "{\n\twhile (!finished) {\n\t\tloopThroghGameControllers();\n\t}\n}", "path": "src\\net\\LocalArbiterPoller.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Ctor.\n */\n", "func_signal": "public LogView(Parent parent)", "code": "{\n\tsuper(parent);\n\n\tlogFont = Font.getFont(\n\t\t\tFont.FACE_SYSTEM, Font.STYLE_PLAIN, Font.SIZE_SMALL\n\t\t\t);\n\n\tchatImage = Image.createImage(\n\t\tparent.getXSize(),\n\t\tparent.getYSize()\n\t\t);\n}", "path": "src\\ui\\LogView.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Request from current server giving user control over white stones.\n */\n", "func_signal": "public void playWhite()", "code": "{\n\tif (gameController != null) {\n\t\tgameController.handleColor(Board.COLOR_WHITE);\n\t}\n}", "path": "src\\Goban.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Register new GameController in poller.\n */\n", "func_signal": "public void registerNewRemoteGameControllerTransport(\n\t\tRemoteGameControllerTransport gct\n\t\t)", "code": "{\n\tsynchronized (remoteGameControllerTransports) {\n\t\tfor (int i = 0; i < remoteGameControllerTransports.size(); ++i) {\n\t\t\tif (remoteGameControllerTransports.elementAt(i) == null) {\n\t\t\t\tremoteGameControllerTransports.setElementAt(gct, i);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tremoteGameControllerTransports.addElement(gct);\n\t}\n}", "path": "src\\net\\LocalArbiterPoller.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Poll all the registered objects.\n */\n", "func_signal": "protected void loopThroghGameControllers()", "code": "{\n\tsynchronized (remoteGameControllerTransports) {\n\t\tfor (int i = 0; i < remoteGameControllerTransports.size(); ++i) {\n\t\t\tif (remoteGameControllerTransports.elementAt(i) != null) {\n\t\t\t\tRemoteGameControllerTransport gc =\n\t\t\t\t\t(RemoteGameControllerTransport)\n\t\t\t\t\tremoteGameControllerTransports.elementAt(i);\n\t\t\t\ttry {\n\t\t\t\t\tgc.poll();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t// TODO: unregister anywere?\n\t\t\t\t\tremoteGameControllerTransports.setElementAt(null, i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\net\\LocalArbiterPoller.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Append string to log.\n *\n * FIX: binary search would be soo much better...\n */\n", "func_signal": "public synchronized void appendString(String str)", "code": "{\n\tif (str.length() == 0) {\n\t\treturn;\n\t}\n\tfor (int l = str.length(); l > 0; --l) {\n\t\tif (logFont.substringWidth(str, 0, l) < parent.getXSize()) {\n\t\t\tdrawString(str.substring(0, l));\n\t\t\tappendString(str.substring(l, str.length()));\n\t\t\treturn;\n\t\t}\n\t}\n\tdrawString(\"??? ASSERT ERROR !!!\");\n}", "path": "src\\ui\\LogView.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Receive from stream.\n *\n * Non-blocking function that should\n * handle incoming acks and commands.\n */\n", "func_signal": "private boolean receiveOne() throws IOException", "code": "{\n\tint available = in.available();\n\t// XXX: TODO: potential bug\n\t// utf strings that comes partially may be\n\t// broken in such a way that\n\t// String(new_data) will fail\n\t// screw that for now\n\tif (available > 0) {\n\t\tbyte new_data[] = new byte[available];\n\t\tin.read(new_data);\n\t\tint newBufSize = receivingBuf.length + available;\n\t\tbyte[] newBuf = new byte[newBufSize];\n\t\tfor (int i = 0; i < receivingBuf.length; ++i) {\n\t\t\tnewBuf[i] = receivingBuf[i];\n\t\t}\n\n\t\tfor (int i = receivingBuf.length; i < newBufSize; ++i) {\n\t\t\tnewBuf[i] = new_data[i - receivingBuf.length];\n\t\t}\n\t\treceivingBuf = newBuf;\n\t}\n\tString bufString = new String(receivingBuf, \"UTF8\");\n\n\tint break_index = bufString.indexOf('\\n');\n\tif (break_index != -1) {\n\t\t// cmd without break\n\t\tString cmd = bufString.substring(0, break_index);\n\t\t// rest of the buf without break\n\t\treceivingBuf = bufString.substring(\n\t\t\t\tbreak_index + 1, bufString.length()\n\t\t\t\t).getBytes(\"UTF8\");\n\t\t\t\tif (!cmd.equals(\"\")) {\n\t\t\thandleIncomingRawCommand(cmd);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "path": "src\\net\\CommonTransportHandler.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Start poller thread.\n */\n", "func_signal": "public void start()", "code": "{\n\tfinished = false;\n\tthread.start();\n}", "path": "src\\net\\LocalArbiterPoller.java", "repo_name": "dpc/dpcgoban", "stars": 4, "license": "other", "language": "java", "size": 940}
{"docstring": "/**\n * Returns the descriptors of the properties for the connection\n * \n * @return\n */\n", "func_signal": "private IPropertyDescriptor[] initializePropertyDescriptors()", "code": "{\n    // the flow properties\n    String flowCategory = Messages.getLabelString(SELECTED_FLOW_ID) + \" { \"\n            + flowInfo.getIdentifier() + \" }\";\n    ArrayList<IPropertyDescriptor> descriptors = new ArrayList<IPropertyDescriptor>();\n\n    PropertyDescriptor descriptor = new PropertyDescriptor(ID_ID, Messages\n            .getLabelString(ID_ID));\n    descriptor.setDescription(Messages.getLabelString(ID_DESCRIPTION));\n    descriptor.setCategory(flowCategory);\n    descriptors.add(descriptor);\n\n    descriptor = new PropertyDescriptor(STATUS_ID, Messages\n            .getLabelString(STATUS_ID));\n    descriptor.setDescription(Messages.getLabelString(STATUS_DESCRIPTION));\n    descriptor.setCategory(flowCategory);\n    descriptors.add(descriptor);\n\n    descriptor = new PropertyDescriptor(CREATION_TIME_ID, Messages\n            .getLabelString(CREATION_TIME_ID));\n    descriptor.setDescription(Messages\n            .getLabelString(CREATION_TIME_DESCRIPTION));\n    descriptor.setCategory(flowCategory);\n    descriptors.add(descriptor);\n\n    descriptor = new PropertyDescriptor(REPLYABLE_ID, Messages\n            .getLabelString(REPLYABLE_ID));\n    descriptor.setDescription(Messages\n            .getLabelString(REPLYABLE_DESCRIPTION));\n    descriptor.setCategory(flowCategory);\n    descriptors.add(descriptor);\n\n    descriptor = new PropertyDescriptor(ACK_COUNT_ID, Messages\n            .getLabelString(ACK_COUNT_ID));\n    descriptor.setDescription(Messages\n            .getLabelString(ACK_COUNT_DESCRIPTION));\n    descriptor.setCategory(flowCategory);\n    descriptors.add(descriptor);\n\n    descriptor = new PropertyDescriptor(ACK_EXPECTED_COUNT_ID, Messages\n            .getLabelString(ACK_EXPECTED_COUNT_ID));\n    descriptor.setDescription(Messages\n            .getLabelString(ACK_EXPECTED_COUNT_DESCRIPTION));\n    descriptor.setCategory(flowCategory);\n    descriptors.add(descriptor);\n\n    descriptor = new PropertyDescriptor(REPLAY_TIME_ID, Messages\n            .getLabelString(REPLAY_TIME_ID));\n    descriptor.setDescription(Messages\n            .getLabelString(REPLY_TIME_DESCRIPTION));\n    descriptor.setCategory(flowCategory);\n    descriptors.add(descriptor);\n\n    descriptor = new PropertyDescriptor(NAK_COUNT_ID, Messages\n            .getLabelString(NAK_COUNT_ID));\n    descriptor.setDescription(Messages\n            .getLabelString(NAK_COUNT_DESCRIPTION));\n    descriptor.setCategory(flowCategory);\n    descriptors.add(descriptor);\n\n    descriptor = new PropertyDescriptor(REPLY_COUNT_ID, Messages\n            .getLabelString(REPLY_COUNT_ID));\n    descriptor.setDescription(Messages\n            .getLabelString(REPLY_COUNT_DESCRIPTION));\n    descriptor.setCategory(flowCategory);\n    descriptors.add(descriptor);\n\n    descriptor = new PropertyDescriptor(APPLICATION_ID, Messages\n            .getLabelString(APPLICATION_ID));\n    descriptor.setDescription(Messages\n            .getLabelString(APPLICATION_DESCRIPTION));\n    descriptor.setCategory(flowCategory);\n    descriptors.add(descriptor);\n\n    descriptor = new PropertyDescriptor(PARTS_COUNT_ID, Messages\n            .getLabelString(PARTS_COUNT_ID));\n    descriptor.setDescription(Messages\n            .getLabelString(PARTS_COUNT_DESCRIPTION));\n    descriptor.setCategory(flowCategory);\n    descriptors.add(descriptor);\n\n    // The part properties\n    for (IFlowPartInfo info : flowInfo.getPartInfos()) {\n        String path = info.getPath();\n\n        String thisPathCategory = Messages.getLabelString(FLOW_PART_ID)\n                + \" { \" + info.getPath() + \" }\";\n\n        String pid = budildFlowPartPropertyId(FLOW_PART_STATUS_ID, path);\n        descriptor = new PropertyDescriptor(pid, Messages\n                .getLabelString(FLOW_PART_STATUS_ID));\n        descriptor.setDescription(Messages\n                .getLabelString(FLOW_PART_STATUS_DESCRIPTION));\n        descriptor.setCategory(thisPathCategory);\n        descriptor.setAlwaysIncompatible(true);\n        descriptors.add(descriptor);\n\n        pid = budildFlowPartPropertyId(FLOW_PART_CONTRIBUTION_COUNT_ID,\n                path);\n        descriptor = new PropertyDescriptor(pid, Messages\n                .getLabelString(FLOW_PART_CONTRIBUTION_COUNT_ID));\n        descriptor.setDescription(Messages\n                .getLabelString(FLOW_PART_CONTRIBUTION_COUNT_DESCRIPTION));\n        descriptor.setCategory(thisPathCategory);\n        descriptor.setAlwaysIncompatible(true);\n        descriptors.add(descriptor);\n\n        pid = budildFlowPartPropertyId(FLOW_PART_PATH_ID, path);\n        descriptor = new PropertyDescriptor(pid, Messages\n                .getLabelString(FLOW_PART_PATH_ID));\n        descriptor.setDescription(Messages\n                .getLabelString(FLOW_PART_PATH_ID));\n        descriptor.setCategory(thisPathCategory);\n        descriptor.setAlwaysIncompatible(true);\n        descriptors.add(descriptor);\n\n        pid = budildFlowPartPropertyId(FLOW_PART_FILTER_TIME_ID, path);\n        descriptor = new PropertyDescriptor(pid, Messages\n                .getLabelString(FLOW_PART_FILTER_TIME_ID));\n        descriptor.setDescription(Messages\n                .getLabelString(FLOW_PART_FILTER_TIME_DESCRIPTION));\n        descriptor.setCategory(thisPathCategory);\n        descriptor.setAlwaysIncompatible(true);\n        descriptors.add(descriptor);\n\n        pid = budildFlowPartPropertyId(FLOW_PART_CONTRIBUTION_TIME_ID, path);\n        descriptor = new PropertyDescriptor(pid, Messages\n                .getLabelString(FLOW_PART_CONTRIBUTION_TIME_ID));\n        descriptor.setDescription(Messages\n                .getLabelString(FLOW_PART_CONTRIBUTION_TIME_DESCRIPTION));\n        descriptor.setCategory(thisPathCategory);\n        descriptor.setAlwaysIncompatible(true);\n        descriptors.add(descriptor);\n\n        pid = budildFlowPartPropertyId(FLOW_PART_DURATION_MS_ID, path);\n        descriptor = new PropertyDescriptor(pid, Messages\n                .getLabelString(FLOW_PART_DURATION_MS_ID));\n        descriptor.setDescription(Messages\n                .getLabelString(FLOW_PART_DURATION_MS_DESCRIPTION));\n        descriptor.setCategory(thisPathCategory);\n        descriptor.setAlwaysIncompatible(true);\n        descriptors.add(descriptor);\n\n    }\n\n    return descriptors.toArray(new IPropertyDescriptor[descriptors.size()]);\n}", "path": "manager\\org.openehealth.ipf.tools.manager.flowmanager\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\flowmanager\\ui\\properties\\FlowPropertiesSource.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/**\n * Saves plug-in appropriate data of the XMLMemento.\n * \n * @param memento\n */\n", "func_signal": "public static void saveMementoToFile(XMLMemento memento)", "code": "{\n    File stateFile = getStateFile();\n    if (stateFile != null) {\n        try {\n            FileOutputStream stream = new FileOutputStream(stateFile);\n            OutputStreamWriter writer = new OutputStreamWriter(stream,\n                    \"UTF-8\"); //$NON-NLS-1$\n            memento.save(writer);\n            writer.close();\n        } catch (IOException ioe) {\n            stateFile.delete();\n        }\n    }\n}", "path": "manager\\org.openehealth.ipf.tools.manager.connection\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\connection\\Activator.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/**\n * Returns null if the id is not correct\n * \n * @param id\n * @return\n */\n", "func_signal": "protected String getPathFromFlowPartPropertyId(String id)", "code": "{\n    if (id == null) {\n        return null;\n    }\n\n    int delimeterIndex = id.indexOf(\"@@\");\n    String path = id.substring(delimeterIndex + \"@@\".length());\n    return path;\n}", "path": "manager\\org.openehealth.ipf.tools.manager.flowmanager\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\flowmanager\\ui\\properties\\FlowPropertiesSource.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/**\n * @see java.util.Observer#update(java.util.Observable, java.lang.Object)\n */\n", "func_signal": "public void update(Observable o, Object arg)", "code": "{\n    if (arg instanceof JMXExplorerEvent) {\n        // respond to attribute change events\n        JMXExplorerEvent event = (JMXExplorerEvent) arg;\n        ObjectName targetObjectName = event.getObjectName();\n        IConnectionConfiguration connectionConfiguration = (IConnectionConfiguration) this\n                .getEditorInput()\n                .getAdapter(IConnectionConfiguration.class);\n        switch (event.getType()) {\n        case JMXExplorerEvent.INVOKE_OPERATION_RESULT:\n        case JMXExplorerEvent.INVOKE_OPERATION_ERROR:\n        case JMXExplorerEvent.CHANGE_ATTRIBUTE_VALUE_ERROR:\n        case JMXExplorerEvent.ATTRIBUTE_VALUE_CHANGED:\n            if (connectionConfiguration.equals(event\n                    .getConnectionConfigurationContext())) {\n                // if this is the same Attribute, update it\n                if (editor != null) {\n                    if (editor.getTargetNode().getObjectName().equals(\n                            targetObjectName)) {\n                        UpdateRunnable runnable = new UpdateRunnable(event);\n                        JobUtils.runSafe(runnable);\n                    }\n                }\n            }\n            break;\n        }\n    } else if (arg instanceof ConnectionEvent) {\n        // respond to connection events\n        ConnectionEvent event = (ConnectionEvent) arg;\n        IConnectionConfiguration connectionConfiguration = (IConnectionConfiguration) this\n                .getEditorInput()\n                .getAdapter(IConnectionConfiguration.class);\n        if (connectionConfiguration.equals(event\n                .getConnectionConfigurationContext())) {\n            switch (event.getType()) {\n            case ConnectionEvent.CONNECTION_REMOVED:\n            case ConnectionEvent.JMX_CONNECTION_CLOSED:\n                SetEnabledRunnable runnableDisabled = new SetEnabledRunnable(\n                        false);\n                JobUtils.runSafe(runnableDisabled);\n                break;\n            case ConnectionEvent.JMX_CONNECTION_OPEN:\n                SetEnabledRunnable runnableEnable = new SetEnabledRunnable(\n                        true);\n                JobUtils.runSafe(runnableEnable);\n                break;\n            }\n        }\n    }\n}", "path": "manager\\org.openehealth.ipf.tools.manager.jmxexplorer\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\jmxexplorer\\ui\\editor\\MBeanNodeEditor.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/**\n * Constructs a flowPart info with the given path with status CLEAN with\n * initial values.\n * \n * @param path\n */\n", "func_signal": "public FlowPartInfoMock(String path)", "code": "{\n    this.path = path;\n    this.status = true;\n    this.contributionDate = new Date();\n    this.pathDuration = 100;\n    this.contributionCount = 1;\n    this.filterTime = null;\n    this.filterCount = 0;\n}", "path": "manager\\org.openehealth.ipf.tools.manager.flowmanager.test\\src\\test\\java\\org\\openehealth\\ipf\\tools\\manager\\flowmanager\\mock\\FlowPartInfoMock.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/**\n * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)\n */\n", "func_signal": "public Object getPropertyValue(Object id)", "code": "{\n    if (id instanceof MBeanOperationInfo) {\n        MBeanOperationInfo oi = (MBeanOperationInfo) id;\n        return MBeanUtils.buildOperationSignature(oi);\n    }\n    return null;\n}", "path": "manager\\org.openehealth.ipf.tools.manager.jmxexplorer\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\jmxexplorer\\ui\\properties\\MBeanOperationsGroupPropertySource.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/**\n * Creates mbean node with the given Name and ObjectName\n * \n * @param name\n */\n", "func_signal": "public MBeanNode(String name, ObjectName objectName, MBeanInfo mbeanInfo)", "code": "{\n    super(name);\n    this.addObjectName(objectName);\n    this.mbeanInfo = mbeanInfo;\n    this.propertySouce = new MBeanPropertySource(mbeanInfo, objectName);\n}", "path": "manager\\org.openehealth.ipf.tools.manager.jmxexplorer\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\jmxexplorer\\ui\\tree\\MBeanNode.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java\n * .lang.Object)\n */\n", "func_signal": "public Object getPropertyValue(Object id)", "code": "{\n    String representationStringOfId = id.toString();\n    try {\n        if (id.equals(REPLY_COUNT_ID)) {\n            return this.flowInfo.getReplayCount();\n        } else if (id.equals(PARTS_COUNT_ID)) {\n            return String.valueOf(flowInfo.getPartInfos().size());\n        } else if (id.equals(REPLYABLE_ID)) {\n            return flowInfo.isReplayable();\n        } else if (id.equals(ACK_COUNT_ID)) {\n            return flowInfo.getAckCount();\n        } else if (id.equals(ACK_EXPECTED_COUNT_ID)) {\n            return flowInfo.getAckCountExpected();\n        } else if (id.equals(REPLAY_TIME_ID)) {\n            Date date = flowInfo.getReplayTime();\n            if (date == null) {\n                return \"\";\n            }\n            SimpleDateFormat format = new SimpleDateFormat(DATE_FORMAT);\n            return format.format(date);\n        } else if (id.equals(NAK_COUNT_ID)) {\n            return flowInfo.getNakCount();\n        } else if (id.equals(APPLICATION_ID)) {\n            return flowInfo.getApplication();\n        } else if (id.equals(STATUS_ID)) {\n            return flowInfo.getStatus();\n        } else if (id.equals(CREATION_TIME_ID)) {\n            Date date = flowInfo.getCreationTime();\n            if (date == null) {\n                return \"\";\n            }\n            SimpleDateFormat format = new SimpleDateFormat(DATE_FORMAT);\n            return format.format(date);\n        } else if (id.equals(ID_ID)) {\n            return flowInfo.getIdentifier();\n        } else if (representationStringOfId.indexOf(FLOW_PART_STATUS_ID) >= 0) {\n            return getFlowPartById(id).getStatus();\n\n        } else if (representationStringOfId\n                .indexOf(FLOW_PART_CONTRIBUTION_COUNT_ID) >= 0) {\n            return getFlowPartById(id).getContributionCount();\n        } else if (representationStringOfId\n                .indexOf(FLOW_PART_FILTER_TIME_ID) >= 0) {\n            IFlowPartInfo i = getFlowPartById(id);\n            Date d = i.getFilterTime();\n            if (d != null) {\n                SimpleDateFormat format = new SimpleDateFormat(DATE_FORMAT);\n                return format.format(i.getFilterTime());\n            } else {\n                return \"\";\n            }\n\n        } else if (representationStringOfId\n                .indexOf(FLOW_PART_CONTRIBUTION_TIME_ID) >= 0) {\n            IFlowPartInfo i = getFlowPartById(id);\n            Date d = i.getContributionTime();\n            if (d != null) {\n                SimpleDateFormat format = new SimpleDateFormat(DATE_FORMAT);\n                return format.format(i.getContributionTime());\n            } else {\n                return \"\";\n            }\n        } else if (representationStringOfId\n                .indexOf(FLOW_PART_DURATION_MS_ID) >= 0) {\n            IFlowPartInfo i = getFlowPartById(id);\n            long pathDuration = i.getPathDuration();\n            String result = String.valueOf(pathDuration);\n            return result;\n        } else if (representationStringOfId.indexOf(FLOW_PART_PATH_ID) >= 0) {\n            IFlowPartInfo i = getFlowPartById(id);\n            String path = i.getPath();\n            return path;\n        }\n    } catch (Exception e) {\n        Activator.getDefault().error(\"Error in the property: \" + id, e);\n    }\n    return \"\";\n}", "path": "manager\\org.openehealth.ipf.tools.manager.flowmanager\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\flowmanager\\ui\\properties\\FlowPropertiesSource.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * org.eclipse.core.commands.AbstractHandler#execute(org.eclipse.core.commands\n * .ExecutionEvent)\n */\n", "func_signal": "public Object execute(ExecutionEvent event) throws ExecutionException", "code": "{\n    IEditorPart editor = HandlerUtil.getActiveEditorChecked(event);\n    if (editor == null) {\n        return null;\n    }\n    if (editor instanceof FlowManagerEditor) {\n        FlowManagerEditor fmEditor = (FlowManagerEditor) editor;\n\n        IEditorInput editorInput = fmEditor.getEditorInput();\n        IConnectionConfiguration connectionConfiguration = (IConnectionConfiguration) editorInput\n                .getAdapter(IConnectionConfiguration.class);\n        new ChangeFlowManagerFlowFilteringJob(Display.getCurrent(),\n                connectionConfiguration).schedule();\n\n    }\n    return null;\n}", "path": "manager\\org.openehealth.ipf.tools.manager.flowmanager\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\flowmanager\\ui\\handlers\\ChangeFlowManagerFlowFilteringHandler.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/**\n * Executes safely the runnable in the Eclipse UI thread. If the Thread\n * cannot be associated with a UI session in RAP, does nothing.\n * \n * @param runnable\n */\n", "func_signal": "public static void runSafe(Runnable runnable)", "code": "{\n\n    IJobManager jobMan = Job.getJobManager();\n    Job job = jobMan.currentJob();\n    if (job instanceof SessionSafeWorkerJob) {\n        SessionSafeWorkerJob sessionWorkerJob = (SessionSafeWorkerJob) job;\n        sessionWorkerJob.getDisplay().asyncExec(runnable);\n    } else if (Display.getCurrent() != null) {\n        runnable.run();\n    } else {\n        Thread t = Thread.currentThread();\n        if (Display.getDefault() == null) {\n            // this is the RAP case\n            Activator\n                    .getDefault()\n                    .error(\n                            \"Updating the GUI from a notitfication forwarder is not handle currently in RAP! (Unable to determine the UI session)\");\n        } else {\n            if (t.getName().contains(\"ClientNotifForwarder\")) {\n                Display.getDefault().asyncExec(runnable);\n                return;\n            }\n        }\n        throw new IllegalStateException(\n                \"Updating the GUI from a non SessionSafeWorkerJob!\");\n    }\n}", "path": "manager\\org.openehealth.ipf.tools.manager.connection\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\connection\\ui\\utils\\jobs\\JobUtils.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/**\n * Invokes the specified operationInfo in the given connection. The\n * parameters follows the MbeanServerConnection.invoke conventions;\n * \n * @param connectionConfiguration\n *            the connection context\n * @param objectName\n *            the ObjectName of the MBean\n * @param operationInfo\n *            The OperationInfo for this operation\n * @param parameterValues\n *            The parameterValues for the operation.\n * @param parameterSignatures\n *            The parameter signatures of the operation.\n */\n", "func_signal": "public void invokeOperation(\n        IConnectionConfiguration connectionConfiguration,\n        ObjectName objectName, MBeanOperationInfo operationInfo,\n        List<String> parameterValues, List<String> parameterSignatures)", "code": "{\n\n    JMXExplorerEvent event;\n    try {\n        List<Object> parameterObjectValues = new ArrayList<Object>();\n        for (int t = 0; t < parameterValues.size(); t++) {\n            String textValue = parameterValues.get(t);\n            Object value = convertStringValueToObjectValue(\n                    parameterSignatures.get(t), textValue);\n            parameterObjectValues.add(value);\n        }\n\n        String[] parameterSignaturesString = new String[parameterSignatures\n                .size()];\n        Object result = mBeanServerConnection.invoke(objectName,\n                operationInfo.getName(), parameterObjectValues.toArray(),\n                parameterSignatures.toArray(parameterSignaturesString));\n\n        event = new JMXExplorerEvent(connectionConfiguration,\n                JMXExplorerEvent.INVOKE_OPERATION_RESULT, objectName,\n                result, operationInfo);\n    } catch (Throwable t) {\n        Activator.getDefault().error(\"invokeOperation failed\", t);\n        event = new JMXExplorerEvent(connectionConfiguration,\n                JMXExplorerEvent.INVOKE_OPERATION_ERROR, objectName, t,\n                operationInfo);\n    }\n    jmxExplorerMediator.notifyObserversWithJMXEvent(event);\n}", "path": "manager\\org.openehealth.ipf.tools.manager.jmxexplorer\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\jmxexplorer\\impl\\MBeanServerConnectionFacadeImpl.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/**\n * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()\n */\n", "func_signal": "@Override\npublic IPropertyDescriptor[] getPropertyDescriptors()", "code": "{\n    ArrayList<IPropertyDescriptor> descriptors = new ArrayList<IPropertyDescriptor>();\n    PropertyDescriptor pd = new PropertyDescriptor(DESCRIPTION_KEY,\n            descriptionDisplayName);\n    pd.setAlwaysIncompatible(true);\n    pd.setCategory(propertiesCategoryDisplayName);\n    descriptors.add(pd);\n\n    pd = new PropertyDescriptor(TYPE_KEY, typeDisplayName);\n    pd.setCategory(propertiesCategoryDisplayName);\n    pd.setAlwaysIncompatible(true);\n    descriptors.add(pd);\n\n    pd = new PropertyDescriptor(NAME_KEY, nameDisplayName);\n    pd.setFilterFlags(new String[] { propertiesCategoryDisplayName,\n            nameDisplayName });\n    pd.setAlwaysIncompatible(true);\n    pd.setCategory(propertiesCategoryDisplayName);\n    descriptors.add(pd);\n\n    pd = new PropertyDescriptor(READABLE_KEY, readableDisplayName);\n    pd.setCategory(propertiesCategoryDisplayName);\n    pd.setAlwaysIncompatible(true);\n    descriptors.add(pd);\n\n    pd = new PropertyDescriptor(WRITABLE_KEY, writableDisplayName);\n    pd.setCategory(propertiesCategoryDisplayName);\n    pd.setAlwaysIncompatible(true);\n    descriptors.add(pd);\n\n    if (MBeanUtils.isSimpleWritableType(objectName, attributeInfo)) {\n        pd = new MBeanSimpleWritableAttributePropertyDescriptor(\n                connectionConfiguration, objectName, attributeInfo,\n                VALUE_KEY, attributeInfo.getName());\n    } else {\n        pd = new PropertyDescriptor(VALUE_KEY, attributeInfo.getName());\n    }\n    pd.setAlwaysIncompatible(true);\n    pd.setCategory(editableCategoryDisplayName);\n    pd.setFilterFlags(new String[] { this.objectName.toString(),\n            propertiesCategoryDisplayName, attributeInfo.getName() });\n    descriptors.add(pd);\n\n    pd = new PropertyDescriptor(IS_IS_KEY, isIsDisplayName);\n    pd.setCategory(propertiesCategoryDisplayName);\n    descriptors.add(pd);\n    descriptors.addAll(Arrays.asList(super.getPropertyDescriptors()));\n    return descriptors.toArray(new IPropertyDescriptor[descriptors.size()]);\n}", "path": "manager\\org.openehealth.ipf.tools.manager.jmxexplorer\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\jmxexplorer\\ui\\properties\\MBeanAttributePropertySource.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "// expect no exception\n", "func_signal": "public void testNullAware()", "code": "{\n    IConnectionConfiguration connectionConfiguration = connectionManager\n            .getConnectionConfigurations().get(0);\n\n    flowManagerApplicationController.setApplication(null, null);\n    flowManagerApplicationController.setApplication(null, \"a\");\n    flowManagerApplicationController.setApplication(\n            connectionConfiguration, null);\n    flowManagerApplicationController.setApplication(\n            connectionConfiguration, \"\");\n\n    // expect no exception\n    flowManagerApplicationController.changeFlowCleanup(null);\n    flowManagerApplicationController.replayFlows(null, null, null, null);\n    flowManagerApplicationController.searchFlows(null,\n            new FlowManagerSearchCriteriaImpl(new Date(System\n                    .currentTimeMillis() / 10000), new Date(System\n                    .currentTimeMillis()), true, false, null), null, null);\n\n}", "path": "manager\\org.openehealth.ipf.tools.manager.flowmanager.test\\src\\test\\java\\org\\openehealth\\ipf\\tools\\manager\\flowmanager\\internal\\impl\\test\\FlowManagerApplicationControllerTest.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/**\n * Returns the file where, the \"last\" state has been saved\n * \n * @return\n */\n", "func_signal": "public static File getStateFile()", "code": "{\n    IPath path = getDefault().getStateLocation();\n    if (path == null) {\n        return null;\n    }\n    path = path.append(\"Connection.xml\");\n    return path.toFile();\n}", "path": "manager\\org.openehealth.ipf.tools.manager.connection\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\connection\\Activator.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext\n * )\n */\n", "func_signal": "@Override\npublic void start(BundleContext context) throws Exception", "code": "{\n    super.start(context);\n    plugin = this;\n\n    serializer = new ConnectionRepositoryObjectStreamSerializer();\n    info(\"Starting IPF Manager Connection bundle\");\n    ConnectionConfigurationRepository repository = serializer.read(null);\n    jMXConnectionManager = new JMXConnectionManagerImpl(repository);\n\n    jMXConnectionManagerServiceRegistration = context.registerService(\n            IJMXConnectionManager.class.getName(), jMXConnectionManager,\n            new Hashtable<String, String>());\n    info(\"IJMXConnectionManager service registered.\");\n    connectionPreferences.updateSystemProperties();\n}", "path": "manager\\org.openehealth.ipf.tools.manager.connection\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\connection\\Activator.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/**\n * Writes this attribute value to the MBEan server.\n * \n * @param connectionConfiguration\n *            the connection context.\n * @param objectName\n *            the ObjectName of the specified MBean\n * @param attributeInfo\n *            the AtributeInfo object.\n * @param attributeValue\n *            the new Value\n */\n", "func_signal": "public void writeAttributeValue(\n        IConnectionConfiguration connectionConfiguration,\n        ObjectName objectName, MBeanAttributeInfo attributeInfo,\n        String attributeValue)", "code": "{\n    // convert\n    Object value = convertStringValueToObjectValue(attributeInfo.getType(),\n            attributeValue);\n    Attribute attribute = new Attribute(attributeInfo.getName(), value);\n    JMXExplorerEvent event;\n    try {\n        mBeanServerConnection.setAttribute(objectName, attribute);\n\n        event = new JMXExplorerEvent(connectionConfiguration,\n                JMXExplorerEvent.ATTRIBUTE_VALUE_CHANGED, objectName,\n                attribute, attributeInfo);\n    } catch (Exception t) {\n        // we fould exception, no mather what, the attribute value was not\n        // set\n        Activator.getDefault().error(\"writeAttributeValue failed\", t);\n        event = new JMXExplorerEvent(connectionConfiguration,\n                JMXExplorerEvent.CHANGE_ATTRIBUTE_VALUE_ERROR, objectName,\n                t, attributeInfo);\n        return;\n    }\n    jmxExplorerMediator.notifyObserversWithJMXEvent(event);\n}", "path": "manager\\org.openehealth.ipf.tools.manager.jmxexplorer\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\jmxexplorer\\impl\\MBeanServerConnectionFacadeImpl.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/**\n * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)\n */\n", "func_signal": "@Override\npublic Object getPropertyValue(Object id)", "code": "{\n    if (id instanceof String) {\n        String idValue = (String) id;\n        if (idValue.equals(DESCRIPTION_KEY)) {\n            return attributeInfo.getDescription();\n        } else if (idValue.equals(NAME_KEY)) {\n            return attributeInfo.getName();\n        } else if (idValue.equals(TYPE_KEY)) {\n            return attributeInfo.getType();\n        } else if (idValue.equals(READABLE_KEY)) {\n            return new Boolean(attributeInfo.isReadable());\n        } else if (idValue.equals(WRITABLE_KEY)) {\n            return new Boolean(attributeInfo.isWritable());\n        } else if (idValue.equals(IS_IS_KEY)) {\n            return new Boolean(attributeInfo.isIs());\n        } else if (idValue.equals(VALUE_KEY)) {\n\n            IJMXExplorerMediator mediator = Activator.getDefault()\n                    .getJMXExplorerMediator();\n            try {\n                if (!attributeInfo.isReadable()) {\n                    return \"\";\n                }\n                IMBeanServerConnectionFacade facade = mediator\n                        .getMBeanServerConnectionConfigurationFacade(connectionConfiguration);\n\n                Object attribute = facade.readAttributeValue(\n                        connectionConfiguration, objectName, attributeInfo\n                                .getName());\n                return MBeanUtils.getPropertySourceObject(attribute,\n                        attributeInfo);\n\n                // return MBeanUtils.readAttributeValue(c, this.objectName,\n                // attributeInfo);\n            } catch (Throwable e) {\n                // print only the message header\n                Activator.getDefault().error(\"Unable to get attribute value\" + idValue + \" \"\n                        + e.getMessage());\n                return attributeNotAvailableDisplayName;\n            }\n        }\n    }\n    return super.getPropertyValue(id);\n}", "path": "manager\\org.openehealth.ipf.tools.manager.jmxexplorer\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\jmxexplorer\\ui\\properties\\MBeanAttributePropertySource.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/**\n * Constructs MbeanAttributePropertySource\n * \n * @param connectionConfiguration\n *            the connection to which this property belongs\n * @param objectName\n *            the ObjectName of the MBean to which this property belongs\n * @param attributeInfo\n *            the AttributeInfo for this property\n */\n", "func_signal": "public MBeanAttributePropertySource(\n        IConnectionConfiguration connectionConfiguration,\n        ObjectName objectName, MBeanAttributeInfo attributeInfo)", "code": "{\n    super(attributeInfo.getDescriptor());\n    this.objectName = objectName;\n    this.attributeInfo = attributeInfo;\n    this.connectionConfiguration = connectionConfiguration;\n}", "path": "manager\\org.openehealth.ipf.tools.manager.jmxexplorer\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\jmxexplorer\\ui\\properties\\MBeanAttributePropertySource.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/**\n * @see org.eclipse.jface.viewers.CellEditor#createControl(org.eclipse.swt.widgets.Composite)\n */\n", "func_signal": "@Override\nprotected Control createControl(Composite parent)", "code": "{\n    composite = new Composite(parent, SWT.NONE);\n    GridLayout layout = new GridLayout(2, false);\n    layout.marginHeight = 0;\n    layout.marginBottom = 0;\n    layout.horizontalSpacing = 0;\n    layout.marginWidth = 0;\n    layout.marginLeft = 0;\n    layout.verticalSpacing = 0;\n\n    composite.setLayout(layout);\n\n    text = new Text(composite, SWT.PUSH);\n    text.setEditable(true);\n    text.setEnabled(true);\n\n    GridData textLayoutData = new GridData(SWT.FILL, SWT.NONE, true, false,\n            1, 1);\n    textLayoutData.heightHint = 15;\n    textLayoutData.minimumWidth = 40;\n    text.setLayoutData(textLayoutData);\n\n    Button setButton = new Button(composite, SWT.PUSH);\n    GridData bLayoutData = new GridData(SWT.NONE, SWT.NONE, false, false,\n            1, 1);\n    bLayoutData.heightHint = 15;\n    setButton.setLayoutData(bLayoutData);\n    setButton.addSelectionListener(this);\n    setButton.setText(setButtonText);\n    return composite;\n}", "path": "manager\\org.openehealth.ipf.tools.manager.jmxexplorer\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\jmxexplorer\\ui\\editor\\MBeanAttributeCellEditorAbstract.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/**\n * @see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()\n */\n", "func_signal": "public IPropertyDescriptor[] getPropertyDescriptors()", "code": "{\n    MBeanOperationInfo[] infos = mbeanInfo.getOperations();\n    ArrayList<IPropertyDescriptor> descriptors = new ArrayList<IPropertyDescriptor>();\n    for (int t = 0; t < infos.length; t++) {\n        MBeanOperationInfo operationInfo = infos[t];\n        PropertyDescriptor pd = new PropertyDescriptor(operationInfo,\n                operationInfo.getName());\n        pd.setDescription(operationInfo.getDescription());\n        descriptors.add(pd);\n    }\n\n    return descriptors.toArray(new IPropertyDescriptor[descriptors.size()]);\n}", "path": "manager\\org.openehealth.ipf.tools.manager.jmxexplorer\\src\\main\\java\\org\\openehealth\\ipf\\tools\\manager\\jmxexplorer\\ui\\properties\\MBeanOperationsGroupPropertySource.java", "repo_name": "krasserm/ipf-tools", "stars": 7, "license": "None", "language": "java", "size": 513}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n    java.awt.EventQueue.invokeLater(new Runnable() {\n        public void run() {\n            ErrorPanel dialog = new ErrorPanel(new javax.swing.JFrame(), true);\n            dialog.addWindowListener(new java.awt.event.WindowAdapter() {\n                public void windowClosing(java.awt.event.WindowEvent e) {\n                    System.exit(0);\n                }\n            });\n            dialog.setVisible(true);\n        }\n    });\n}", "path": "src\\net\\atomique\\ksar\\ErrorPanel.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jPanel1 = new javax.swing.JPanel();\n    jPanel2 = new javax.swing.JPanel();\n    jScrollPane1 = new javax.swing.JScrollPane();\n    jTextArea1 = new javax.swing.JTextArea();\n    jPanel3 = new javax.swing.JPanel();\n    jButton1 = new javax.swing.JButton();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);\n    setTitle(\"Error\");\n    setAlwaysOnTop(true);\n\n    jPanel1.setLayout(new java.awt.BorderLayout());\n\n    jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));\n    jPanel2.setLayout(new java.awt.BorderLayout());\n\n    jTextArea1.setColumns(20);\n    jTextArea1.setRows(5);\n    jScrollPane1.setViewportView(jTextArea1);\n\n    jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);\n\n    jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);\n\n    jButton1.setText(\"Close\");\n    jButton1.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jButton1ActionPerformed(evt);\n        }\n    });\n    jPanel3.add(jButton1);\n\n    jPanel1.add(jPanel3, java.awt.BorderLayout.SOUTH);\n\n    getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);\n\n    pack();\n}", "path": "src\\net\\atomique\\ksar\\ErrorPanel.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    desktopPane = new javax.swing.JDesktopPane();\n    menuBar = new javax.swing.JMenuBar();\n    fileMenu = new javax.swing.JMenu();\n    openMenuItem = new javax.swing.JMenuItem();\n    automenu = new javax.swing.JMenu();\n    autoempty = new javax.swing.JMenuItem();\n    jSeparator2 = new javax.swing.JSeparator();\n    exitMenuItem = new javax.swing.JMenuItem();\n    triggermenu = new javax.swing.JMenu();\n    jmenusolaristrigger = new javax.swing.JMenuItem();\n    jmenulinuxtrigger = new javax.swing.JMenuItem();\n    jMenuItem3 = new javax.swing.JMenuItem();\n    jMenuItem4 = new javax.swing.JMenuItem();\n    windowmenu = new javax.swing.JMenu();\n    tileitem = new javax.swing.JMenuItem();\n    optmenu = new javax.swing.JMenu();\n    colormenu = new javax.swing.JMenuItem();\n    jSeparator1 = new javax.swing.JSeparator();\n    refreshopt = new javax.swing.JMenuItem();\n    jSeparator3 = new javax.swing.JSeparator();\n    alloptions = new javax.swing.JMenuItem();\n    jSeparator4 = new javax.swing.JSeparator();\n    autowinconfig = new javax.swing.JMenuItem();\n    helpMenu = new javax.swing.JMenu();\n    checkforupdate = new javax.swing.JMenuItem();\n    aboutMenuItem = new javax.swing.JMenuItem();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);\n    setTitle(\"kSar : a sar grapher\");\n    addWindowListener(new java.awt.event.WindowAdapter() {\n        public void windowClosing(java.awt.event.WindowEvent evt) {\n            formWindowClosing(evt);\n        }\n    });\n\n    desktopPane.setPreferredSize(null);\n    getContentPane().add(desktopPane, java.awt.BorderLayout.CENTER);\n\n    fileMenu.setText(\"File\");\n\n    openMenuItem.setText(\"New window\");\n    openMenuItem.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            openMenuItemActionPerformed(evt);\n        }\n    });\n    fileMenu.add(openMenuItem);\n\n    automenu.setText(\"Auto window\");\n\n    autoempty.setText(\"Empty window\");\n    autoempty.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            autoemptyActionPerformed(evt);\n        }\n    });\n    automenu.add(autoempty);\n\n    fileMenu.add(automenu);\n    fileMenu.add(jSeparator2);\n\n    exitMenuItem.setText(\"Exit\");\n    exitMenuItem.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            exitMenuItemActionPerformed(evt);\n        }\n    });\n    fileMenu.add(exitMenuItem);\n\n    menuBar.add(fileMenu);\n\n    triggermenu.setText(\"Triggers\");\n\n    jmenusolaristrigger.setText(\"Solaris\");\n    jmenusolaristrigger.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jmenusolaristriggerActionPerformed(evt);\n        }\n    });\n    triggermenu.add(jmenusolaristrigger);\n\n    jmenulinuxtrigger.setText(\"Linux\");\n    jmenulinuxtrigger.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jmenulinuxtriggerActionPerformed(evt);\n        }\n    });\n    triggermenu.add(jmenulinuxtrigger);\n\n    jMenuItem3.setText(\"AIX\");\n    triggermenu.add(jMenuItem3);\n\n    jMenuItem4.setText(\"HP-UX\");\n    triggermenu.add(jMenuItem4);\n\n    menuBar.add(triggermenu);\n\n    windowmenu.setText(\"Window\");\n\n    tileitem.setText(\"Tile\");\n    tileitem.setAutoscrolls(true);\n    tileitem.setDoubleBuffered(true);\n    tileitem.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            tileitemActionPerformed(evt);\n        }\n    });\n    windowmenu.add(tileitem);\n\n    menuBar.add(windowmenu);\n\n    optmenu.setText(\"Options\");\n\n    colormenu.setText(\"Setup lines colors\");\n    colormenu.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            colormenuActionPerformed(evt);\n        }\n    });\n    optmenu.add(colormenu);\n    optmenu.add(jSeparator1);\n\n    refreshopt.setText(\"Refresh options\");\n    refreshopt.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            refreshoptActionPerformed(evt);\n        }\n    });\n    optmenu.add(refreshopt);\n    optmenu.add(jSeparator3);\n\n    alloptions.setText(\"Preferences\");\n    alloptions.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            alloptionsActionPerformed(evt);\n        }\n    });\n    optmenu.add(alloptions);\n    optmenu.add(jSeparator4);\n\n    autowinconfig.setText(\"Config window\");\n    autowinconfig.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            autowinconfigActionPerformed(evt);\n        }\n    });\n    optmenu.add(autowinconfig);\n\n    menuBar.add(optmenu);\n\n    helpMenu.setText(\"Help\");\n\n    checkforupdate.setText(\"Check for update\");\n    checkforupdate.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            checkforupdateActionPerformed(evt);\n        }\n    });\n    helpMenu.add(checkforupdate);\n\n    aboutMenuItem.setText(\"About\");\n    aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            aboutMenuItemActionPerformed(evt);\n        }\n    });\n    helpMenu.add(aboutMenuItem);\n\n    //menuBar.add(javax.swing.Box.createHorizontalGlue());\n\n    menuBar.add(helpMenu);\n\n    setJMenuBar(menuBar);\n\n    pack();\n}", "path": "src\\net\\atomique\\ksar\\kSarDesktop.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jPanel1 = new javax.swing.JPanel();\n    jPanel4 = new javax.swing.JPanel();\n    jLabel2 = new javax.swing.JLabel();\n    jSpinner2 = new javax.swing.JSpinner();\n    jPanel7 = new javax.swing.JPanel();\n    jLabel6 = new javax.swing.JLabel();\n    jSpinner1 = new javax.swing.JSpinner();\n    jLabel1 = new javax.swing.JLabel();\n    jSpinner5 = new javax.swing.JSpinner();\n    jPanel6 = new javax.swing.JPanel();\n    jLabel7 = new javax.swing.JLabel();\n    jSpinner6 = new javax.swing.JSpinner();\n    jLabel5 = new javax.swing.JLabel();\n    jSpinner4 = new javax.swing.JSpinner();\n    jPanel5 = new javax.swing.JPanel();\n    jLabel4 = new javax.swing.JLabel();\n    jSpinner3 = new javax.swing.JSpinner();\n    jPanel2 = new javax.swing.JPanel();\n    resetButton = new javax.swing.JButton();\n    okButton = new javax.swing.JButton();\n    closeButton = new javax.swing.JButton();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n\n    jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));\n\n    jLabel2.setText(\"always refresh until datapoint grow up to\");\n    jPanel4.add(jLabel2);\n\n    jSpinner2.setModel(new javax.swing.SpinnerNumberModel(100, 1, 4997, 1));\n    jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {\n        public void stateChanged(javax.swing.event.ChangeEvent evt) {\n            jSpinner2StateChanged(evt);\n        }\n    });\n    jPanel4.add(jSpinner2);\n\n    jPanel1.add(jPanel4);\n\n    jLabel6.setText(\"refresh every \");\n    jPanel7.add(jLabel6);\n\n    jSpinner1.setModel(new javax.swing.SpinnerNumberModel(10, 1, 1000, 1));\n    jPanel7.add(jSpinner1);\n\n    jLabel1.setText(\"when datapoint is under\");\n    jPanel7.add(jLabel1);\n\n    jSpinner5.setModel(new javax.swing.SpinnerNumberModel(500, 2, 4998, 1));\n    jSpinner5.addChangeListener(new javax.swing.event.ChangeListener() {\n        public void stateChanged(javax.swing.event.ChangeEvent evt) {\n            jSpinner5StateChanged(evt);\n        }\n    });\n    jPanel7.add(jSpinner5);\n\n    jPanel1.add(jPanel7);\n\n    jLabel7.setText(\"refresh every \");\n    jPanel6.add(jLabel7);\n\n    jSpinner6.setModel(new javax.swing.SpinnerNumberModel(100, 1, 1000, 1));\n    jPanel6.add(jSpinner6);\n\n    jLabel5.setText(\"when datapoint is under\");\n    jPanel6.add(jLabel5);\n\n    jSpinner4.setModel(new javax.swing.SpinnerNumberModel(1000, 3, 4999, 1));\n    jSpinner4.addChangeListener(new javax.swing.event.ChangeListener() {\n        public void stateChanged(javax.swing.event.ChangeEvent evt) {\n            jSpinner4StateChanged(evt);\n        }\n    });\n    jPanel6.add(jSpinner4);\n\n    jPanel1.add(jPanel6);\n\n    jLabel4.setText(\"don't refresh graph if datapoint is over\");\n    jPanel5.add(jLabel4);\n\n    jSpinner3.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(5000), Integer.valueOf(4), null, Integer.valueOf(1)));\n    jSpinner3.setMinimumSize(new java.awt.Dimension(83, 24));\n    jSpinner3.setOpaque(false);\n    jSpinner3.setPreferredSize(new java.awt.Dimension(83, 24));\n    jSpinner3.addChangeListener(new javax.swing.event.ChangeListener() {\n        public void stateChanged(javax.swing.event.ChangeEvent evt) {\n            jSpinner3StateChanged(evt);\n        }\n    });\n    jPanel5.add(jSpinner3);\n\n    jPanel1.add(jPanel5);\n\n    getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);\n\n    resetButton.setText(\"Reset to defaults\");\n    resetButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            resetButtonActionPerformed(evt);\n        }\n    });\n    jPanel2.add(resetButton);\n\n    okButton.setText(\"Ok\");\n    okButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            okButtonActionPerformed(evt);\n        }\n    });\n    jPanel2.add(okButton);\n\n    closeButton.setText(\"Close\");\n    closeButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            closeButtonActionPerformed(evt);\n        }\n    });\n    jPanel2.add(closeButton);\n\n    getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);\n\n    pack();\n}", "path": "src\\net\\atomique\\ksar\\ParserOptions.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "/* (non-Javadoc)\n * @see net.atomique.ksar.IMessageCreator#showTextInputDialog(java.lang.String, java.lang.String)\n */\n", "func_signal": "@Override\npublic String showTextInputDialog(String title, String message, boolean maskedInput)", "code": "{\n    if (maskedInput) {\n        JPasswordField passwordField = new JPasswordField();\n        passwordField.setToolTipText(message);\n        \n        int result = JOptionPane.showConfirmDialog(this.parent, passwordField, title, JOptionPane.OK_CANCEL_OPTION);\n        \n        if (result == JOptionPane.OK_OPTION) {\n            return new String(passwordField.getPassword());\n        }\n        \n        return null;\n    }\n    else {\n        return JOptionPane.showInputDialog(this.parent, message, title, JOptionPane.PLAIN_MESSAGE);    \n    }\n}", "path": "src\\net\\atomique\\ksar\\JOptionPaneMessageCreator.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "//GEN-LAST:event_jmenusolaristriggerActionPerformed\n", "func_signal": "private void jmenulinuxtriggerActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_jmenulinuxtriggerActionPerformed\n        LinuxTrigger tmptrigger = new LinuxTrigger();\n        tmptrigger.setVisible(true);\n        desktopPane.add(tmptrigger);\n        try {\n            tmptrigger.setSelected(true);\n        } catch (java.beans.PropertyVetoException vetoe) {\n        }\n}", "path": "src\\net\\atomique\\ksar\\kSarDesktop.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "//GEN-LAST:event_refreshoptActionPerformed\n", "func_signal": "public void load_shortcut()", "code": "{\n        if (kSarConfig.shortcut_window_list == null) {\n            return;\n        }\n        for (Iterator<String> it = kSarConfig.shortcut_window_list.keySet().iterator(); it.hasNext();) {\n            String key = it.next();\n            String value = kSarConfig.shortcut_window_list.get(key);\n            add_shortcut((String) value);\n        }\n    }", "path": "src\\net\\atomique\\ksar\\kSarDesktop.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "//GEN-LAST:event_resetButtonActionPerformed\n", "func_signal": "private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt)", "code": "{//GEN-FIRST:event_jSpinner2StateChanged\n        Integer tmp = (Integer)jSpinner2.getValue();\n        Integer nexttmp = (Integer)jSpinner5.getValue();\n        if ( tmp.intValue() >= nexttmp.intValue() ) {\n            jSpinner5.setValue(new Integer(tmp.intValue()+1));\n        }\n    }", "path": "src\\net\\atomique\\ksar\\ParserOptions.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "// access   commit   create     link   lookup    mkdir     read  readlnk   remove   rename    rmdir  symlink    write\n", "func_signal": "public void add(final Second now, final Float val1, final Float val2, final Float val3, final Float val4, final Float val5,\n        final Float val6, final Float val7, final Float val8, final Float val9, final Float val10,\n        final Float val11, final Float val12, final Float val13)", "code": "{\n    this.t_access.add(now, val1, do_notify());\n    this.t_commit.add(now, val2, do_notify());\n    this.t_create.add(now, val3, do_notify());\n    this.t_link.add(now, val4, do_notify());\n    this.t_lookup.add(now, val5, do_notify());\n    this.t_mkdir.add(now, val6, do_notify());\n    this.t_read.add(now, val7, do_notify());\n    this.t_readlnk.add(now, val8, do_notify());\n    this.t_remove.add(now, val9, do_notify());\n    this.t_rename.add(now, val10, do_notify());\n    this.t_rmdir.add(now, val11, do_notify());\n    this.t_symlink.add(now, val12, do_notify());\n    this.t_write.add(now, val13, do_notify());\n    number_of_sample++;\n}", "path": "src\\net\\atomique\\ksar\\Esar\\nfsv3Sar.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "/* (non-Javadoc)\n * @see net.atomique.ksar.IMessageCreator#showTextInputWithSuggestionDialog(java.lang.String, java.lang.String, java.lang.Iterable, java.lang.String)\n */\n", "func_signal": "@Override\npublic String showTextInputWithSuggestionDialog(String title, String message, Iterable<String> suggestions, String defaultValue)", "code": "{\n    DefaultComboBoxModel model = new DefaultComboBoxModel();\n    \n    if (suggestions != null) {\n        for (String suggestion : suggestions) {\n            model.addElement(suggestion);\n        }\n    }\n    \n    if (defaultValue != null) {\n        model.setSelectedItem(defaultValue);\n    }\n    \n    JComboBox comboBox = new JComboBox(model);\n    comboBox.setEditable(true);\n    comboBox.setToolTipText(message);\n    \n    int result = JOptionPane.showConfirmDialog(this.parent, comboBox, title, JOptionPane.OK_CANCEL_OPTION);\n    \n    if (result == JOptionPane.OK_OPTION \n            && comboBox.getSelectedItem() != null) {\n        return comboBox.getSelectedItem().toString();\n    }\n    \n    return null;\n}", "path": "src\\net\\atomique\\ksar\\JOptionPaneMessageCreator.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "//GEN-LAST:event_jSpinner2StateChanged\n", "func_signal": "private void jSpinner5StateChanged(javax.swing.event.ChangeEvent evt)", "code": "{//GEN-FIRST:event_jSpinner5StateChanged\n        Integer tmp = (Integer)jSpinner5.getValue();\n        Integer prevtmp = (Integer)jSpinner2.getValue();\n        Integer nexttmp = (Integer)jSpinner4.getValue();\n        if ( tmp.intValue() >= nexttmp.intValue() ) {\n            jSpinner4.setValue(new Integer(tmp.intValue()+1));\n        }\n        if ( tmp.intValue() <= prevtmp.intValue() ) {\n            jSpinner2.setValue(new Integer(tmp.intValue()-1));\n        }\n    }", "path": "src\\net\\atomique\\ksar\\ParserOptions.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n    java.awt.EventQueue.invokeLater(new Runnable() {\n        public void run() {\n            ParserOptions dialog = new ParserOptions(new javax.swing.JFrame(), true);\n            dialog.addWindowListener(new java.awt.event.WindowAdapter() {\n                public void windowClosing(java.awt.event.WindowEvent e) {\n                    System.exit(0);\n                }\n            });\n            dialog.setVisible(true);\n        }\n    });\n}", "path": "src\\net\\atomique\\ksar\\ParserOptions.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void okButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_okButtonActionPerformed\n        save_value();\n        this.dispose();\n}", "path": "src\\net\\atomique\\ksar\\ParserOptions.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "/** Creates new form kSarDesktop */\n", "func_signal": "public kSarDesktop()", "code": "{\n    currentVersion = VersionNumber.getInstance();\n    kSarConfig.hasUI=true;\n    int wmargins = 90;\n    int hmargins = 60;\n    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n    initComponents();\n    load_shortcut();\n    setBounds(wmargins, hmargins, screenSize.width - wmargins * 2, screenSize.height - hmargins * 2);\n    desktopPane.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);\n    setVisible(true);\n}", "path": "src\\net\\atomique\\ksar\\kSarDesktop.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "//GEN-LAST:event_checkforupdateActionPerformed\n", "func_signal": "private void alloptionsActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_alloptionsActionPerformed\n        IConfigurationViewModel configurationViewModel = kSarConfig.getInstance();\n        ConfigurationDialog configDialog = new ConfigurationDialog(configurationViewModel);\n        configDialog.setModal(true);\n        configDialog.setVisible(true);\n        \n        if (configDialog.getResult() == ConfigurationDialog.OK_RESULT) {\n            kSarConfig.writeDefault();\n            \n            try {\n                for (LookAndFeelInfo lookAndFeel : UIManager.getInstalledLookAndFeels()) {\n                    if (lookAndFeel.getName().equals(configurationViewModel.getLookAndFeel())) {\n                        UIManager.setLookAndFeel(lookAndFeel.getClassName());\n                        break;\n                    }\n                }\n\n                SwingUtilities.updateComponentTreeUI(this);\n            }\n            catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n}", "path": "src\\net\\atomique\\ksar\\kSarDesktop.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "//GEN-LAST:event_jSpinner4StateChanged\n", "func_signal": "private void jSpinner3StateChanged(javax.swing.event.ChangeEvent evt)", "code": "{//GEN-FIRST:event_jSpinner3StateChanged\n        Integer tmp = (Integer)jSpinner3.getValue();\n        Integer prevtmp = (Integer)jSpinner4.getValue();\n        if ( tmp.intValue() <= prevtmp.intValue() ) {\n            jSpinner4.setValue(new Integer(tmp.intValue()-1));\n        }\n    }", "path": "src\\net\\atomique\\ksar\\ParserOptions.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "//GEN-LAST:event_jSpinner5StateChanged\n", "func_signal": "private void jSpinner4StateChanged(javax.swing.event.ChangeEvent evt)", "code": "{//GEN-FIRST:event_jSpinner4StateChanged\n        Integer tmp = (Integer)jSpinner4.getValue();\n        Integer prevtmp = (Integer)jSpinner5.getValue();\n        Integer nexttmp = (Integer)jSpinner3.getValue();\n        if ( tmp.intValue() >= nexttmp.intValue() ) {\n            jSpinner3.setValue(new Integer(tmp.intValue()+1));\n        }\n        if ( tmp.intValue() <= prevtmp.intValue() ) {\n            jSpinner5.setValue(new Integer(tmp.intValue()-1));\n        }\n    }", "path": "src\\net\\atomique\\ksar\\ParserOptions.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "/* (non-Javadoc)\n * @see net.atomique.ksar.IOsSpecificParser#parseOsInfo(java.util.StringTokenizer)\n */\n", "func_signal": "@Override\npublic void parseOsInfo(StringTokenizer matcher)", "code": "{\n    if (this.mysar.myOS == null) {\n        this.mysar.myOS = new OSInfo(\"AIX\", \"automatically\");\n    }\n    this.mysar.hostName = matcher.nextToken();\n    this.mysar.myOS.setHostname(this.mysar.hostName);\n    String tmpstr = matcher.nextToken();\n    String osVersion = new String(matcher.nextToken() + \".\" + tmpstr);\n    this.mysar.myOS.setOSversion(osVersion);\n    tmpstr = matcher.nextToken();\n    this.mysar.myOS.setMacAddress(tmpstr);\n    \n    String sarDate = matcher.nextToken();\n    this.mysar.myOS.setDate(sarDate);\n    String[] dateSplit = sarDate.split(\"/\");\n    if (dateSplit.length == 3) {\n        this.mysar.day = Integer.parseInt(dateSplit[1]);\n        this.mysar.month = Integer.parseInt(dateSplit[0]);\n        this.mysar.year = Integer.parseInt(dateSplit[2]);\n        if (this.mysar.year < 100) { // solaris 8 show date on two digit\n            this.mysar.year += 2000;\n        }\n    }\n    \n    this.mysar.parseAlternatediskname();\n    this.mysar.solarispagesize = 0;\n}", "path": "src\\net\\atomique\\ksar\\AIX\\Parser.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "/** Creates new form ErrorPanel */\n", "func_signal": "public ErrorPanel(java.awt.Frame parent, boolean modal)", "code": "{\n    super(parent, modal);\n    initComponents();\n}", "path": "src\\net\\atomique\\ksar\\ErrorPanel.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "//GEN-LAST:event_jSpinner3StateChanged\n", "func_signal": "private void save_value()", "code": "{\n        kSarConfig.alwaysrefresh = ((Integer)jSpinner2.getValue()).intValue();\n        kSarConfig.somerefresh = ((Integer)jSpinner5.getValue()).intValue();\n        kSarConfig.lessrefresh = ((Integer)jSpinner4.getValue()).intValue();\n        kSarConfig.norefresh = ((Integer)jSpinner3.getValue()).intValue();\n        kSarConfig.somerefresh_time = ((Integer)jSpinner1.getValue()).intValue();\n        kSarConfig.lessrefresh_time = ((Integer)jSpinner6.getValue()).intValue();\n        kSarConfig.writeDefault();\n    }", "path": "src\\net\\atomique\\ksar\\ParserOptions.java", "repo_name": "czerwonk/ksar-fork", "stars": 4, "license": "other", "language": "java", "size": 7998}
{"docstring": "/**\n * Display the settings dialog.\n * If the user clicks ok, all changes are reflected in the properties of this object.\n * Otherwise changes are discarded.\n * @param frame parent frame (needed for creating a modal dialog)\n * @return <code>OK</code> when user accepted changes, <code>CANCEL</code> otherwise\n */\n", "func_signal": "public int showDialog(Frame frame)", "code": "{\n\tinitDialog(frame);\n\tupdateFields();\n\tresult = CANCEL;\n\tdialog.setVisible(true);\n\treturn (result);\n}", "path": "client\\org\\sump\\analyzer\\DiagramLabels.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * This is the SPI protocol decoder core\n *\n * The decoder scans for a decode start event like CS high to\n * low edge or the trigger of the captured data. After this the\n * decoder starts to decode the data by the selected mode, number\n * of bits and bit order. The decoded data are put to a JTable\n * object directly.\n */\n", "func_signal": "private void decode()", "code": "{\n\t// process the captured data and write to output\n\tint a,b,c;\n\tint bitCount, mosivalue, misovalue, maxbits;\n\t\n\t// clear old data\n\tdecodedData.clear();\n\t\n\t/*\n\t * Buid bitmasks based on the SCK, MISO, MOSI and CS\n\t * pins.\n\t */\n\tint csmask = (1 << cs.getSelectedIndex());\n\tint sckmask = (1 << sck.getSelectedIndex());\n\tint misomask = (1 << miso.getSelectedIndex());\n\tint mosimask = (1 << mosi.getSelectedIndex());\n\t\n\tSystem.out.println(\"csmask   = 0x\" + Integer.toHexString(csmask));\n\tSystem.out.println(\"sckmask  = 0x\" + Integer.toHexString(sckmask));\n\tSystem.out.println(\"misomask = 0x\" + Integer.toHexString(misomask));\n\tSystem.out.println(\"mosimask = 0x\" + Integer.toHexString(mosimask));\n\t\n\t\n\t/*\n\t * For analyze scan the CS line for a falling edge. If\n\t * no edge could be found, the position of the trigger\n\t * is used for start of analysis. If no trigger and no\n\t * edge is found the analysis fails.\n\t */\n\ta = analysisData.values[0] & csmask;\n\tc = 0;\n\tb = 0;\n\tfor (int i = 0; i < analysisData.values.length; i++) {\n\t\tif (a > (analysisData.values[i] & csmask)) {\n\t\t\t// cs to low found here\n\t\t\tb = i;\n\t\t\tc = 1;\n\t\t\tSystem.out.println(\"CS found at \" + i);\n\t\t\tbreak;\n\t\t}\n\t\ta = analysisData.values[i] & csmask;\n\t}\n\tif (c == 0)\n\t{\n\t\t// no CS edge found, look for trigger\n\t\tif (analysisData.hasTriggerData())\n\t\t\tb = analysisData.triggerPosition;\n\t}\n\t// now the trigger is in b, add trigger event to table\n\tdecodedData.addElement(new SPIProtocolAnalysisDataSet(b, \"CSLOW\"));\n\tstartOfDecode = b;\n\t\n\t/*\n\t * Use the mode parameter to determine which eges are\n\t * to detect. Mode 0 and mode 3 are sampling on the\n\t * rising clk edge, mode 2 and 4 are sampling on the\n\t * falling edge.\n\t * a is used for start of value, c is register for \n\t * detect line changes.\n\t */\n\tif ((mode.getSelectedItem().equals(\"0\")) || (mode.getSelectedItem().equals(\"2\"))) {\n\t\t// scanning for rising clk edges\n\t\tc = analysisData.values[b] & sckmask;\n\t\ta = analysisData.values[b] & csmask;\n\t\tbitCount = Integer.parseInt((String)bits.getSelectedItem()) - 1;\n\t\tmaxbits = bitCount;\n\t\tmisovalue = 0;\n\t\tmosivalue = 0;\n\t\tfor (int i = b; i < analysisData.values.length; i++) {\n\t\t\tif(c < (analysisData.values[i] & sckmask)) {\n\t\t\t\t// sample here\n\t\t\t\tif (order.getSelectedItem().equals(\"MSB first\")) {\n\t\t\t\t\tif ((analysisData.values[i] & misomask) == misomask)\n\t\t\t\t\t\tmisovalue |= (1 << bitCount);\n\t\t\t\t\tif ((analysisData.values[i] & mosimask) == mosimask)\n\t\t\t\t\t\tmosivalue |= (1 << bitCount);\n\t\t\t\t} else {\n\t\t\t\t\tif ((analysisData.values[i] & misomask) == misomask)\n\t\t\t\t\t\tmisovalue |= (1 << (maxbits - bitCount));\n\t\t\t\t\tif ((analysisData.values[i] & mosimask) == mosimask)\n\t\t\t\t\t\tmosivalue |= (1 << (maxbits - bitCount));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (bitCount > 0) {\n\t\t\t\t\tbitCount--;\n\t\t\t\t} else {\n\t\t\t\t\tdecodedData.addElement(new SPIProtocolAnalysisDataSet(i,mosivalue,misovalue));\n\n\t\t\t\t\tSystem.out.println(\"MISO = 0x\" + Integer.toHexString(misovalue));\n\t\t\t\t\tSystem.out.println(\"MOSI = 0x\" + Integer.toHexString(mosivalue));\n\t\t\t\t\tbitCount = Integer.parseInt((String)bits.getSelectedItem()) - 1;\n\t\t\t\t\tmisovalue = 0;\n\t\t\t\t\tmosivalue = 0;\n\n\t\t\t\t\t/*\n\t\t\t\t\t * CS edge detection is only done when a complete value is decoded\n\t\t\t\t\t */\n\t\t\t\t\tif(a > (analysisData.values[i] & csmask)) {\n\t\t\t\t\t\t// falling edge\n\t\t\t\t\t\tdecodedData.addElement(new SPIProtocolAnalysisDataSet(i,\"CSLOW\"));\n\t\t\t\t\t} else if (a < (analysisData.values[i] & csmask)) {\n\t\t\t\t\t\t// rising edge\n\t\t\t\t\t\tdecodedData.addElement(new SPIProtocolAnalysisDataSet(i,\"CSHIGH\"));\n\t\t\t\t\t}\n\t\t\t\t\ta = analysisData.values[i] & csmask;\n\t\t\t\t}\n\t\t\t}\n\t\t\tc = analysisData.values[i] & sckmask;\n\t\t}\n\t} else {\n\t\t// scanning for falling clk edges\n\t\tc = analysisData.values[b] & sckmask;\n\t\ta = analysisData.values[b] & csmask;\n\t\tbitCount = Integer.parseInt((String)bits.getSelectedItem()) - 1;\n\t\tmaxbits = bitCount;\n\t\tmisovalue = 0;\n\t\tmosivalue = 0;\n\t\tfor (int i = b; i < analysisData.values.length; i++) {\n\t\t\tif(c > (analysisData.values[i] & sckmask)) {\n\t\t\t\t// sample here\n\t\t\t\tif (order.getSelectedItem().equals(\"MSB first\")) {\n\t\t\t\t\tif ((analysisData.values[i] & misomask) == misomask)\n\t\t\t\t\t\tmisovalue |= (1 << bitCount);\n\t\t\t\t\tif ((analysisData.values[i] & mosimask) == mosimask)\n\t\t\t\t\t\tmosivalue |= (1 << bitCount);\n\t\t\t\t} else {\n\t\t\t\t\tif ((analysisData.values[i] & misomask) == misomask)\n\t\t\t\t\t\tmisovalue |= (1 << (maxbits - bitCount));\n\t\t\t\t\tif ((analysisData.values[i] & mosimask) == mosimask)\n\t\t\t\t\t\tmosivalue |= (1 << (maxbits - bitCount));\n\t\t\t\t}\n\n\t\t\t\tif (bitCount > 0) {\n\t\t\t\t\tbitCount--;\n\t\t\t\t} else {\n\t\t\t\t\tdecodedData.addElement(new SPIProtocolAnalysisDataSet(i,mosivalue,misovalue));\n\n\t\t\t\t\tSystem.out.println(\"MISO = 0x\" + Integer.toHexString(misovalue));\n\t\t\t\t\tSystem.out.println(\"MOSI = 0x\" + Integer.toHexString(mosivalue));\n\t\t\t\t\tbitCount = Integer.parseInt((String)bits.getSelectedItem()) - 1;\n\t\t\t\t\tmisovalue = 0;\n\t\t\t\t\tmosivalue = 0;\n\n\t\t\t\t\t/*\n\t\t\t\t\t * CS edge detection is only done when a complete value is decoded\n\t\t\t\t\t */\n\t\t\t\t\tif(a > (analysisData.values[i] & csmask)) {\n\t\t\t\t\t\t// falling edge\n\t\t\t\t\t\tdecodedData.addElement(new SPIProtocolAnalysisDataSet(i,\"CSLOW\"));\n\t\t\t\t\t} else if (a < (analysisData.values[i] & csmask)) {\n\t\t\t\t\t\t// rising edge\n\t\t\t\t\t\tdecodedData.addElement(new SPIProtocolAnalysisDataSet(i,\"CSHIGH\"));\n\t\t\t\t\t}\n\t\t\t\t\ta = analysisData.values[i] & csmask;\n\t\t\t\t}\n\t\t\t}\n\t\t\tc = analysisData.values[i] & sckmask;\n\t\t}\n\t}\n\toutTable.setModel(toTableData());\n}", "path": "client\\org\\sump\\analyzer\\tools\\SPIProtocolAnalysis.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * Constructs diagram labels component.\n */\n", "func_signal": "public DiagramLabels()", "code": "{\n\tsuper();\n\tsetLayout(new GridBagLayout());\n\tsetBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n\n\tJPanel modePane = new JPanel();\n\tmodePane.setLayout(new GridBagLayout());\n\tmodePane.setBorder(BorderFactory.createCompoundBorder(\n\t\t\tBorderFactory.createTitledBorder(\"Diagram Labels\"),\n\t\t\tBorderFactory.createEmptyBorder(5, 5, 5, 5)\n\t));\n\t\n\tlabelFields = new JTextField[32];\n\tdiagramLabels = new String[32];\n\tfor (int col = 0; col < 2; col++) {\n\t\tfor (int row = 0; row < 16; row++) {\n\t\t\tint num = 16 * col + row;\n\t\t\tmodePane.add(new JLabel(\"Channel \" + num + \": \"), createConstraints(2 * col, row, 1, 1, 0, 0));\n\t\t\tlabelFields[num] = new JTextField(20);\n\t\t\tmodePane.add(labelFields[num], createConstraints(2 * col + 1, row, 1, 1, 0, 0));\n\t\t\tdiagramLabels[num] = new String();\n\t\t}\n\t}\n\tadd(modePane, createConstraints(0, 0, 5, 1, 0, 0));\n\t\n\tJButton ok = new JButton(\"Ok\");\n\tok.addActionListener(this);\n\tadd(ok, createConstraints(0, 1, 1, 1, 0.34, 0));\n\tJButton cancel = new JButton(\"Cancel\");\n\tcancel.addActionListener(this);\n\tadd(cancel, createConstraints(1, 1, 1, 1, 0.33, 0));\n\tJButton clear = new JButton(\"Clear\");\n\tclear.addActionListener(this);\n\tadd(clear, createConstraints(2, 1, 1, 1, 0.33, 0));\n}", "path": "client\\org\\sump\\analyzer\\DiagramLabels.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * Constructs CapturedData based on the data read from the given file.\n * \n * @param file\t\t\tfile to read captured data from\n * @throws IOException when reading from file failes\n */\n", "func_signal": "public CapturedData(File file) throws IOException", "code": "{\n\tint size = 0, r = -1, t = -1, channels = 32, enabledChannels = -1;\n\tString line;\n\tBufferedReader br = new BufferedReader(new FileReader(file));\n\tdo {\n\t\tline = br.readLine();\n\t\tif (line == null)\n\t\t\tthrow new IOException(\"File appears to be corrupted.\");\n\t\telse if (line.startsWith(\";Size: \"))\n\t\t\tsize = Integer.parseInt(line.substring(7));\n\t\telse if (line.startsWith(\";Rate: \"))\n\t\t\tr = Integer.parseInt(line.substring(7));\n\t\telse if (line.startsWith(\";Channels: \"))\n\t\t\tchannels = Integer.parseInt(line.substring(11));\n\t\telse if (line.startsWith(\";TriggerPosition: \"))\n\t\t\tt = Integer.parseInt(line.substring(18));\n\t\telse if (line.startsWith(\";EnabledChannels: \"))\n\t\t\tenabledChannels = Integer.parseInt(line.substring(18));\n\t} while (line.startsWith(\";\"));\n\n\tif (size <= 0 || size > 1024 * 256)\n\t\tthrow new IOException(\"Invalid size encountered.\");\n\t\t\n\tvalues = new int[size];\n\ttry {\n\t\tfor (int i = 0; i < values.length && line != null; i++) {\n\t\t\t// TODO: modify to work with all channel counts up to 32\n\t\t\tif (channels > 16) {\n\t\t\t\tvalues[i] =\n\t\t\t\t\tInteger.parseInt(line.substring(0, 4), 16) << 16\n\t\t\t\t\t| Integer.parseInt(line.substring(4, 8), 16);\n\t\t\t} else {\n\t\t\t\tvalues[i] = Integer.parseInt(line.substring(0, 4), 16);\t\t\t\t\t\n\t\t\t}\n\t\t\tline = br.readLine();\n\t\t}\n\t} catch (NumberFormatException E) {\n\t\tthrow new IOException(\"Invalid data encountered.\");\n\t}\n\n\tthis.triggerPosition = t;\n\tthis.rate = r;\n\tthis.channels = channels;\n\tthis.enabledChannels = enabledChannels;\n\n\tbr.close();\n}", "path": "client\\org\\sump\\analyzer\\CapturedData.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * Handles all user interaction.\n */\n", "func_signal": "public void actionPerformed(ActionEvent event)", "code": "{\n\tString label = event.getActionCommand();\n\t// if no action command, check if button and if so, use icon description as action\n\tif (label.equals(\"\")) {\n\t\tif (event.getSource() instanceof JButton)\n\t\t\tlabel = ((ImageIcon)((JButton)event.getSource()).getIcon()).getDescription();\n\t}\n\tSystem.out.println(label);\n\ttry {\n\t\t\n\t\tif (label.equals(\"Open...\")) {\n\t\t\tif (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {\n\t\t\t\tFile file = fileChooser.getSelectedFile();\n\t\t\t\tif (file.isFile())\n\t\t\t\t\tloadData(file);\n\t\t\t}\n\t\t\n\t\t} else if (label.equals(\"Save as...\")) {\n\t\t\tif (fileChooser.showSaveDialog(frame) == JFileChooser.APPROVE_OPTION) {\n\t\t\t\tFile file = fileChooser.getSelectedFile();\n\t\t\t\tSystem.out.println(\"Saving: \" + file.getName() + \".\");\n\t\t\t\tdiagram.getCapturedData().writeToFile(file);\n\t\t\t}\n\n\t\t} else if (label.equals(\"Open Project...\")) {\n\t\t\tif (projectChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {\n\t\t\t\tFile file = projectChooser.getSelectedFile();\n\t\t\t\tif (file.isFile())\n\t\t\t\t\tloadProject(file);\n\t\t\t}\n\t\t\t\n\t\t} else if (label.equals(\"Save Project as...\")) {\n\t\t\tif (projectChooser.showSaveDialog(frame) == JFileChooser.APPROVE_OPTION) {\n\t\t\t\tFile file = projectChooser.getSelectedFile();\n\t\t\t\tSystem.out.println(\"Saving Project: \" + file.getName() + \".\");\n\t\t\t\tproject.store(file);\n\t\t\t}\n\t\t\n\t\t} else if (label.equals(\"Capture...\")) {\n\t\t\tif (controller.showCaptureDialog(frame) == DeviceController.DONE) {\n\t\t\t\tdiagram.setCapturedData(controller.getDeviceData());\n\t\t\t}\n\n\t\t} else if (label.equals(\"Repeat Capture\")) {\n\t\t\tif (controller.showCaptureProgress(frame) == DeviceController.DONE) {\n\t\t\t\tdiagram.setCapturedData(controller.getDeviceData());\n\t\t\t}\n\n\t\t} else if (label.equals(\"Exit\")) {\n\t\t\texit();\n\t\t\n\t\t} else if (label.equals(\"Zoom In\")) {\n\t\t\tdiagram.zoomIn();\n\t\t\n\t\t} else if (label.equals(\"Zoom Out\")) {\n\t\t\tdiagram.zoomOut();\n\n\t\t} else if (label.equals(\"Default Zoom\")) {\n\t\t\tdiagram.zoomDefault();\n\n\t\t} else if (label.equals(\"Diagram Settings...\")) {\n\t\t\tdiagram.showSettingsDialog(frame);\n\t\t\t\n\t\t} else if (label.equals(\"Labels...\")) {\n\t\t\tdiagram.showLabelsDialog(frame);\n\n\t\t} else if (label.equals(\"About\")) {\n\t\t\tJOptionPane.showMessageDialog(null,\n\t\t\t\t\t\"Sump's Logic Analyzer Client\\n\"\n\t\t\t\t\t+ \"\\n\"\n\t\t\t\t\t+ \"Copyright 2006 Michael Poppitz\\n\"\n\t\t\t\t\t+ \"This software is released under the GNU GPL.\\n\"\n\t\t\t\t\t+ \"\\n\"\n\t\t\t\t\t+ \"For more information see:\\n\"\n\t\t\t\t\t+ \"http://www.sump.org/projects/analyzer/\",\n\t\t\t\t\"About\", JOptionPane.INFORMATION_MESSAGE\n\t\t\t);\n\t\t} else {\n\t\t\t// check if a tool has been selected and if so, process captured data by tool\n\t\t\tfor (int i = 0; i < tools.length; i++)\n\t\t\t\tif (label.equals(tools[i].getName())) {\n\t\t\t\t\tCapturedData newData = tools[i].process(diagram.getCapturedData());\n\t\t\t\t\tif (newData != null)\n\t\t\t\t\t\tdiagram.setCapturedData(newData);\n\t\t\t\t}\n\t\t}\n\t\tenableDataDependingFunctions(diagram.hasCapturedData());\n\t\t\t\n\t} catch(Exception E) {\n\t\tE.printStackTrace(System.out);\n\t}\n}", "path": "client\\org\\sump\\analyzer\\MainWindow.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * Convert captured data from timing data to state data using the given channel as clock.\n * @param data - captured data to work on\n * @return always <code>null</code>\n */\n", "func_signal": "public CapturedData process(CapturedData data)", "code": "{\n\tspad.showDialog(data);\n\treturn(null);\n}", "path": "client\\org\\sump\\analyzer\\tools\\SPIProtocolAnalysis.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * Load the given file as data.\n * @param file file to be loaded as data\n * @throws IOException when an IO error occurs\n */\n", "func_signal": "public void loadData(File file) throws IOException", "code": "{\n\tSystem.out.println(\"Opening: \" + file.getName());\n\tdiagram.setCapturedData(new CapturedData(file));\n}", "path": "client\\org\\sump\\analyzer\\MainWindow.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * Load the given file as project.\n * @param file file to be loaded as projects\n * @throws IOException when an IO error occurs\n */\n", "func_signal": "public void loadProject(File file) throws IOException", "code": "{\n\tSystem.out.println(\"Opening Project: \" + file.getName());\n\tproject.load(file);\n}", "path": "client\\org\\sump\\analyzer\\MainWindow.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * converts the analyzed data to table data\n * @return the prepared table data\n */\n", "func_signal": "private DefaultTableModel toTableData()", "code": "{\n\tString data[][] = new String[decodedData.size()][4];\n\tSPIProtocolAnalysisDataSet ds;\n\tfor (int i = 0; i < decodedData.size(); i++) {\n\t\tds = (SPIProtocolAnalysisDataSet)decodedData.get(i);\n\t\tif (ds.isEvent()) {\n\t\t\t// index\n\t\t\tdata[i][0] = new String(\"\" + (i+1));\n\t\t\t// time\n\t\t\tdata[i][1] = new String(indexToTime(ds.time));\n\t\t\t// MOSI\n\t\t\tdata[i][2] = new String(ds.event);\n\t\t\t// MISO\n\t\t\tdata[i][3] = new String(ds.event);\n\t\t} else {\n\t\t\t// index\n\t\t\tdata[i][0] = new String(\"\" + (i+1));\n\t\t\t// time\n\t\t\tdata[i][1] = new String(indexToTime(ds.time));\n\t\t\t// MOSI\n\t\t\tdata[i][2] = new String(\"0x\" + Integer.toHexString(ds.mosi) + \",\" + ds.mosi);\n\t\t\t// MISO\n\t\t\tdata[i][3] = new String(\"0x\" + Integer.toHexString(ds.miso) + \",\" + ds.miso);\n\t\t}\n\t}\n\tDefaultTableModel mod = new DefaultTableModel(data, colNames);\n\treturn(mod);\n}", "path": "client\\org\\sump\\analyzer\\tools\\SPIProtocolAnalysis.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * Creates tool icons and adds them the the given tool bar.\n * \n * @param tools tool bar to add icons to\n * @param files array of icon file names\n * @param descriptions array of icon descriptions\n */\n", "func_signal": "private void createTools(JToolBar tools, String[] files, String[] descriptions)", "code": "{\n\tfor (int i = 0; i < files.length; i++) {\n\t\tURL u = MainWindow.class.getResource(\"icons/\" + files[i]);\n\t\tJButton b = new JButton(new ImageIcon(u, descriptions[i]));\n\t\tb.setMargin(new Insets(0,0,0,0));\n\t\tb.addActionListener(this);\n\t\ttools.add(b);\n\t}\n}", "path": "client\\org\\sump\\analyzer\\MainWindow.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * Enables or disables functions that can only operate when captured data has been added to the diagram.\n * @param enable set <code>true</code> to enable these functions, <code>false</code> to disable them\n */\n", "func_signal": "private void enableDataDependingFunctions(boolean enable)", "code": "{\n\tdiagramMenu.setEnabled(enable);\n\ttoolMenu.setEnabled(enable);\n}", "path": "client\\org\\sump\\analyzer\\MainWindow.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * Reads user settings from given properties.\n * Uses the property prefix \"DiagramLabels\".\n * @param properties properties to read settings from\n */\n", "func_signal": "public void readProperties(Properties properties)", "code": "{\n\tfor (int i = 0; i < 32; i++)\n\t\tif (properties.containsKey(\"DiagramLabels.channel\" + i))\n\t\t\tdiagramLabels[i] = properties.getProperty(\"DiagramLabels.channel\" + i);\n}", "path": "client\\org\\sump\\analyzer\\DiagramLabels.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * Creates a JMenu containing items as specified.\n * If an item name is empty, a separator will be added in its place.\n * \n * @param name Menu name\n * @param entries array of menu item names.\n * @return created menu\n */\n", "func_signal": "private JMenu createMenu(String name, String[] entries)", "code": "{\n\tJMenu menu = new JMenu(name);\n\tfor (int i = 0; i < entries.length; i++) {\n\t\tif (!entries[i].equals(\"\")) {\n\t\t\tJMenuItem item = new JMenuItem(entries[i]);\n\t\t\titem.addActionListener(this);\n\t\t\tmenu.add(item);\n\t\t} else {\n\t\t\tmenu.add(new JSeparator());\n\t\t}\n\t}\n\treturn (menu);\n}", "path": "client\\org\\sump\\analyzer\\MainWindow.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * Internal method that initializes a dialog and add this component to it.\n * @param frame owner of the dialog\n */\n", "func_signal": "private void initDialog(Frame frame)", "code": "{\n\t// check if dialog exists with different owner and dispose if so\n\tif (dialog != null && dialog.getOwner() != frame) {\n\t\tdialog.dispose();\n\t\tdialog = null;\n\t}\n\t// if no valid dialog exists, create one\n\tif (dialog == null) {\n\t\tdialog = new JDialog(frame, \"Diagram Labels\", true);\n\t\tdialog.getContentPane().add(this);\n\t\tdialog.pack();\n\t\tdialog.setResizable(false);\n\t}\n}", "path": "client\\org\\sump\\analyzer\\DiagramLabels.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * shows the dialog and sets the data to use\n * @param data data to use for analysis\n */\n", "func_signal": "public void showDialog(CapturedData data)", "code": "{\n\tanalysisData = data;\n\tif (analysisData.hasTimingData()) {\n\t\tfloat step = 1 / analysisData.rate;\n\t\t\n\t\tunitFactor = 1;\n\t\tunitName = \"s\";\n\t\tif (step <= 0.000001) { unitFactor = 1000000000; unitName = \"ns\"; } \n\t\telse if (step <= 0.001) { unitFactor = 1000000; unitName = \"\u00b5s\"; } \n\t\telse if (step <= 1) { unitFactor = 1000; unitName = \"ms\"; } \n\t} else {\n\t\tunitFactor = 1;\n\t\tunitName = \"\";\n\t}\n\n\tsetVisible(true);\n}", "path": "client\\org\\sump\\analyzer\\tools\\SPIProtocolAnalysis.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * exports the table data to a CSV file\n * @param file File object\n */\n", "func_signal": "private void storeToFile(File file)", "code": "{\n\tSystem.out.println(\"writing decoded data to \" + file.getPath());\n\ttry {\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(file));\n\t\t\n\t\tfor (int i = 0; i < outTable.getRowCount(); i++) {\n\t\t\tbw.write(\"\\\"\" + \n\t\t\t\t\t(String)outTable.getValueAt(i, 0) + \n\t\t\t\t\t\"\\\",\\\"\" + \n\t\t\t\t\t(String)outTable.getValueAt(i, 1) +\n\t\t\t\t\t\"\\\",\\\"\" + \n\t\t\t\t\t(String)outTable.getValueAt(i, 2) +\n\t\t\t\t\t\"\\\",\\\"\" + \n\t\t\t\t\t(String)outTable.getValueAt(i, 3) + \n\t\t\t\t\t\"\\\"\");\n\t\t\tbw.newLine();\n\t\t}\n\t\tbw.close();\n\t} catch (Exception E) {\n\t\tE.printStackTrace(System.out);\n\t}\n}", "path": "client\\org\\sump\\analyzer\\tools\\SPIProtocolAnalysis.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * Writes user settings to given properties.\n * Uses the property prefix \"DiagramLabels\".\n * @param properties properties to write settings to\n */\n", "func_signal": "public void writeProperties(Properties properties)", "code": "{\n\tfor (int i = 0; i < 32; i++)\n\t\tproperties.setProperty(\"DiagramLabels.channel\" + i, diagramLabels[i]);\n}", "path": "client\\org\\sump\\analyzer\\DiagramLabels.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * Default constructor.\n *\n */\n", "func_signal": "public MainWindow()", "code": "{\n\tsuper();\n\tproject = new Project();\n}", "path": "client\\org\\sump\\analyzer\\MainWindow.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * Constructs CapturedData based on the given data.\n * \n * @param values 32bit values as read from device\n * @param triggerPosition position of trigger as index of values array\n * @param rate sampling rate (may be set to <code>NOT_AVAILABLE</code>)\n * @param channels number of used channels\n * @param enabledChannels bit mask identifying used channels\n */\n", "func_signal": "public CapturedData(int[] values, int triggerPosition, int rate, int channels, int enabledChannels)", "code": "{\n\tthis.values = values;\n\tthis.triggerPosition = triggerPosition;\n\tthis.rate = rate;\n\tthis.channels = channels;\n\tthis.enabledChannels = enabledChannels;\n}", "path": "client\\org\\sump\\analyzer\\CapturedData.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * Writes device data to given file.\n * \n * @param file\t\t\tfile to write to\n * @throws IOException when writing to file failes\n */\n", "func_signal": "public void writeToFile(File file) throws IOException", "code": "{\n\ttry {\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(file));\n\t\t\n\t\tbw.write(\";Size: \" + values.length);\n\t\tbw.newLine();\n\t\tbw.write(\";Rate: \" + rate);\n\t\tbw.newLine();\n\t\tbw.write(\";Channels: \" + channels);\n\t\tbw.newLine();\n\t\tbw.write(\";EnabledChannels: \" + enabledChannels);\n\t\tbw.newLine();\n\t\tif (triggerPosition >= 0) {\n\t\t\tbw.write(\";TriggerPosition: \" + triggerPosition);\n\t\t\tbw.newLine();\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < values.length; i++) {\n\t\t\tString hexVal = Integer.toHexString(values[i]);\n\t\t\tbw.write(\"00000000\".substring(hexVal.length()) + hexVal);\n\t\t\tbw.newLine();\n\t\t}\n\t\tbw.close();\n\t} catch (Exception E) {\n\t\tE.printStackTrace(System.out);\n\t}\n}", "path": "client\\org\\sump\\analyzer\\CapturedData.java", "repo_name": "nall/FPGA-la", "stars": 5, "license": "None", "language": "java", "size": 424}
{"docstring": "/**\n * \u30a2\u30ab\u30a6\u30f3\u30c8\u5165\u529b\u30c0\u30a4\u30a2\u30ed\u30b0\u8868\u793a\n * @return\n */\n", "func_signal": "private Dialog showAccountNameDialog()", "code": "{\n    LayoutInflater factory = LayoutInflater.from(mContext);\n    final View entryView = factory.inflate(R.layout.dialog_entry, null);\n    final EditText edit = (EditText) entryView.findViewById(R.id.username_edit);\n    final CheckBox check = (CheckBox) entryView.findViewById(R.id.reaccount_use);\n\n    // \u30a2\u30ab\u30a6\u30f3\u30c8\u540d\u304c\u30d7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306b\u3042\u308c\u3070\u30a8\u30c7\u30a3\u30bf\u306b\u8a2d\u5b9a\n    edit.setText(getPreferences(\"name\", \"\"));\n    check.setChecked(Boolean.valueOf(getPreferences(\"reload\", \"true\")));\n\n    // \u30ad\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n    edit.setOnKeyListener(new View.OnKeyListener(){\n        public boolean onKey(View v, int keyCode, KeyEvent event) {\n             // Enter\u30ad\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n            if (KeyEvent.KEYCODE_ENTER == keyCode) {\n                // \u62bc\u3057\u305f\u3068\u304d\u306b\u6539\u884c\u3092\u633f\u5165\u9632\u6b62\u51e6\u7406\n                if (KeyEvent.ACTION_DOWN == event.getAction()) {\n                    return true;\n                }\n                 // \u96e2\u3057\u305f\u3068\u304d\u306b\u30c0\u30a4\u30a2\u30ed\u30b0\u4e0a\u306e[\u8aad\u8fbc]\u51e6\u7406\u3092\u5b9f\u884c\n                else if (KeyEvent.ACTION_UP == event.getAction()) {\n                    if (edit != null && edit.length() != 0) {\n                        // \u975e\u540c\u671f\u3067\u753b\u50cf\u53d6\u5f97\n                        String accountName = edit.getText().toString();\n                        String reloadCheck = String.valueOf(check.isChecked());\n                        loadThreadStart(accountName, reloadCheck);\n                        mDialog.dismiss();\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n    });\n\n    // \u521d\u671f\u30c0\u30a4\u30a2\u30ed\u30b0\u4f5c\u6210\n    return new AlertDialog.Builder(mActivity)\n        .setIcon(R.drawable.icon)\n        .setTitle(R.string.load_alert_name_dialog_title)\n        .setView(entryView)\n        .setCancelable(false)\n        .setPositiveButton(R.string.load_alert_name_dialog_button1, new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int whichButton) {\n                // \u975e\u540c\u671f\u3067\u753b\u50cf\u53d6\u5f97\n                String accountName = edit.getText().toString();\n                String reloadCheck = String.valueOf(check.isChecked());\n                loadThreadStart(accountName, reloadCheck);\n            }\n        }).setNegativeButton(R.string.load_alert_name_dialog_button2, new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int whichButton) {\n                finish();\n            }\n        }).create();\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\TumblrWallpaper.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u7a7a\u30ea\u30b9\u30c8\u9078\u629e\u30c0\u30a4\u30a2\u30ed\u30b0\u3092\u8868\u793a\n * @return\n */\n", "func_signal": "private AlertDialog showNullRowSelDialog()", "code": "{\n    return new AlertDialog.Builder(mActivity)\n    .setIcon(R.drawable.alert_dialog_icon)\n    .setTitle(R.string.null_row_sel_dialog_title)\n    .setMessage(R.string.null_row_sel_dialog_mes)\n    .setPositiveButton(R.string.err_alert_dialog_button, new DialogInterface.OnClickListener() {\n        public void onClick(DialogInterface dialog, int whichButton) {\n        }\n    })\n    .create();\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\TumblrWallpaper.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u30b9\u30ec\u30c3\u30c9\u95a2\u4fc2\u306e\u30af\u30e9\u30b9\u5909\u6570\u3092\u30af\u30ea\u30a2\n */\n", "func_signal": "private void clearThreadData()", "code": "{\n    mWallpaperBitmap = null;\n    if (mBitmapThreads != null) {\n        for (int i = 0; i < mBitmapThreads.length; i++) {\n            if (mBitmapThreads[i] != null && mBitmapThreads[i].isAlive() == true) {\n                mBitmapThreads[i].interrupt();\n                mBitmapThreads[i] = null;\n            }\n        }\n        mBitmapThreads = null;\n    }\n    mBitmapScaleThread = null;\n    if (mAsyncTask != null && mAsyncTask.getStatus() == AsyncTask.Status.RUNNING) {\n        mAsyncTask.cancel(true);\n    }\n    mAsyncTask = null;\n    mListData = null;\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\TumblrWallpaper.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * Tumblr\u304b\u3089\u306e\u60c5\u5831\u3092\u8a2d\u5b9a\n * @param tumblrUrl\n * @param page : URL\u306e\u30da\u30fc\u30b8\u6570\u3002\u6700\u521d\u306f1\u304b\u3089\u3002\n * @throws IOException\n * @throws RuntimeException\n */\n", "func_signal": "private void setListData(String tumblrUrl, int page) throws IOException, RuntimeException", "code": "{\n    int count = 0;\n    int barCountDown = 40;\n    mBitmapThreads = new DownloadBitmapThread[BUTTON_MAX];\n    while (count < BUTTON_MAX && page < PAGE_MAX) {\n        try {\n            URL url = new URL(tumblrUrl + Integer.toString(page++));\n            HttpURLConnection urlCon = (HttpURLConnection) url.openConnection();\n            Pattern p = Pattern\n                    .compile(\"http\\\\:\\\\/\\\\/\\\\d+.media\\\\.tumblr\\\\.com\\\\/(?!avatar_)[\\\\-_\\\\.\\\\!\\\\~\\\\*\\\\'\\\\(\\\\)a-zA-Z0-9\\\\;\\\\/\\\\?\\\\:@&=\\\\$\\\\,\\\\%\\\\#]+\\\\.(jpg|jpeg|png|gif|bmp)\");\n            urlCon.setRequestMethod(\"GET\");\n            BufferedReader urlIn = new BufferedReader(new InputStreamReader(urlCon.getInputStream()));\n            if (barCountDown > 10) {\n                mProgressDialog.incrementProgressBy(10);\n                barCountDown -= 10;\n            }\n\n            String str;\n            while ((str = urlIn.readLine()) != null && count < BUTTON_MAX) {\n                Matcher m = p.matcher(str);\n                if (m.find()) {\n                    // \u753b\u50cfURL\u53d6\u5f97\n                    mListData[count] = new ListData();\n                    mListData[count].position = count;\n                    String urlStr = \"\";\n                    // \u4e00\u89a7\u8868\u793a\u30b5\u30a4\u30ba\u3092250px\u306b\u5408\u308f\u305b\u308b\n                    urlStr = m.group().replaceAll(\"_500.\", \"_250.\");\n                    urlStr = m.group().replaceAll(\"_400.\", \"_250.\");\n                    mListData[count].url = urlStr;\n\n                    // Bitmap\u60c5\u5831\u3092\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u53d6\u5f97\n                    mBitmapThreads[count] = new DownloadBitmapThread(count, 0);\n                    mBitmapThreads[count].start();\n\n                    count++;\n                }\n                if (barCountDown != 0) {\n                    mProgressDialog.incrementProgressBy(1);\n                    barCountDown--;\n                }\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // \u4e00\u4ef6\u3082\u753b\u50cf\u3092\u53d6\u5f97\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u30a8\u30e9\u30fc\n    if (mBitmapThreads[0] == null) {\n        throw new RuntimeException();\n    }\n\n    // \u6b8b\u3063\u3066\u3044\u308b\u30ab\u30a6\u30f3\u30c8\u30c0\u30a6\u30f3\u5206\u3092ProgressBar\u306b\u52a0\u7b97\n    mProgressDialog.incrementProgressBy(barCountDown);\n\n    // Bitmap\u53d6\u5f97\u30b9\u30ec\u30c3\u30c9\u304c\u5168\u3066\u7d42\u308f\u308b\u307e\u3067\u5f85\u6a5f\n    for (int threadCount = 0; threadCount < BUTTON_MAX; threadCount++) {\n        if (mBitmapThreads[threadCount] != null) {\n            try {\n                mBitmapThreads[threadCount].join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            mBitmapThreads[threadCount] = null;\n        }\n    }\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\TumblrWallpaper.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u30d7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u60c5\u5831\u53d6\u5f97\n * @param key\n * @param value : \u30d7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u304b\u3089\u53d6\u5f97\u5931\u6557\u3057\u305f\u6642\u306b\u8a2d\u5b9a\u3055\u308c\u308b\u5024\n * @return\n */\n", "func_signal": "private String getPreferences(String key, String value)", "code": "{\n    SharedPreferences settings = getSharedPreferences(\"TumblrWallpaper\", MODE_PRIVATE);\n    return settings.getString(key, value);\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\TumblrWallpaper.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u58c1\u7d19\u8cbc\u308a\u4ed8\u3051\u78ba\u8a8d\u30a2\u30e9\u30fc\u30c8\u30c0\u30a4\u30a2\u30ed\u30b0\n * @return\n */\n", "func_signal": "private AlertDialog showCheckWallpaperDialog()", "code": "{\n    return new AlertDialog.Builder(mActivity)\n    .setIcon(R.drawable.icon)\n    .setTitle(R.string.check_wallpaper_dialog_title)\n    .setMessage(R.string.check_wallpaper_dialog_mes)\n    .setPositiveButton(R.string.check_wallpaper_dialog_button1, new DialogInterface.OnClickListener() {\n        public void onClick(DialogInterface dialog, int whichButton) {\n            // \u58c1\u7d19\u8a2d\u5b9a\n            mAsyncTask = new Wallpaper().execute();\n        }\n    })\n    .setNegativeButton(R.string.check_wallpaper_dialog_button2, new DialogInterface.OnClickListener() {\n        public void onClick(DialogInterface dialog, int whichButton) {\n        }\n    })\n    .create();\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\TumblrWallpaper.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * menu\u30dc\u30bf\u30f3\u4f5c\u6210\n */\n", "func_signal": "@Override\npublic final boolean onCreateOptionsMenu(Menu menu)", "code": "{\n    super.onCreateOptionsMenu(menu);\n    MenuInflater inflater = getMenuInflater();\n    inflater.inflate(R.menu.menu, menu);\n    return true;\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\TumblrWallpaper.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u30d7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u60c5\u5831\u8a2d\u5b9a\n * @param key\n * @param value\n */\n", "func_signal": "private void setPreferences(String key, String value)", "code": "{\n    SharedPreferences settings = getSharedPreferences(\"TumblrWallpaper\", MODE_PRIVATE);\n    SharedPreferences.Editor editor = settings.edit();\n    editor.putString(key, value);\n    editor.commit();\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\TumblrWallpaper.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u8b66\u544a\u30c0\u30a4\u30a2\u30ed\u30b0\u3092\u8868\u793a\n * @return\n */\n", "func_signal": "private AlertDialog showAlertDialog()", "code": "{\n    return new AlertDialog.Builder(mActivity)\n    .setIcon(R.drawable.alert_dialog_icon)\n    .setTitle(titleId)\n    .setMessage(mesId)\n    .setPositiveButton(R.string.err_alert_dialog_button, new DialogInterface.OnClickListener() {\n        public void onClick(DialogInterface dialog, int whichButton) {\n            mDialog = showAccountNameDialog();\n            mDialog.show();\n        }\n    })\n    .create();\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\TumblrWallpaper.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u30a2\u30ab\u30a6\u30f3\u30c8\u5165\u529b\u30c0\u30a4\u30a2\u30ed\u30b0\u8868\u793a\n * @return\n */\n", "func_signal": "private Dialog showReloadSettingDialog()", "code": "{\n    LayoutInflater factory = LayoutInflater.from(mContext);\n    final View entryView = factory.inflate(R.layout.dialog_entry, null);\n    final EditText edit = (EditText) entryView.findViewById(R.id.username_edit);\n    final CheckBox check = (CheckBox) entryView.findViewById(R.id.reaccount_use);\n\n    // \u30a2\u30ab\u30a6\u30f3\u30c8\u540d\u304c\u30d7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306b\u3042\u308c\u3070\u30a8\u30c7\u30a3\u30bf\u306b\u8a2d\u5b9a\n    edit.setText(getPreferences(\"name\", \"\"));\n    check.setChecked(Boolean.valueOf(getPreferences(\"reload\", \"true\")));\n\n    // \u30ad\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n    edit.setOnKeyListener(new View.OnKeyListener(){\n        public boolean onKey(View v, int keyCode, KeyEvent event) {\n             // Enter\u30ad\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n            if (KeyEvent.KEYCODE_ENTER == keyCode) {\n                // \u62bc\u3057\u305f\u3068\u304d\u306b\u6539\u884c\u3092\u633f\u5165\u9632\u6b62\u51e6\u7406\n                if (KeyEvent.ACTION_DOWN == event.getAction()) {\n                    return true;\n                }\n                 // \u96e2\u3057\u305f\u3068\u304d\u306b\u30c0\u30a4\u30a2\u30ed\u30b0\u4e0a\u306e[\u518d\u8aad\u8fbc/\u518d\u8a2d\u5b9a]\u51e6\u7406\u3092\u5b9f\u884c\n                else if (KeyEvent.ACTION_UP == event.getAction()) {\n                    if (edit != null && edit.length() != 0) {\n                        mDialog.dismiss();\n                        String accountName = edit.getText().toString();\n                        String reloadCheck = String.valueOf(check.isChecked());\n                        loadThreadStart(accountName, reloadCheck);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n    });\n\n    // \u8a2d\u5b9a\u30c0\u30a4\u30a2\u30ed\u30b0\u3092\u4f5c\u6210\n    return new AlertDialog.Builder(mActivity)\n            .setIcon(R.drawable.icon)\n            .setTitle(R.string.load_alert_name_dialog_title)\n            .setView(entryView)\n            .setPositiveButton(R.string.reload_setting_dialog_button1, new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int whichButton) {\n                    String accountName = edit.getText().toString();\n                    String reloadCheck = String.valueOf(check.isChecked());\n                    loadThreadStart(accountName, reloadCheck);\n                }\n            })\n            .setNeutralButton(R.string.reload_setting_dialog_button2, new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int whichButton) {\n                    String accountName = edit.getText().toString();\n                    String reloadCheck = String.valueOf(check.isChecked());\n                    setAccountInfo(accountName, reloadCheck);\n                }\n            })\n            .setNegativeButton(R.string.reload_setting_dialog_button3, new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int whichButton) {\n                    // \u51e6\u7406\u306a\u3057\n                }\n            })\n            .create();\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\TumblrWallpaper.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * Bitmap\u3092\u53d6\u5f97\u3057\u3066\u304d\u307e\u3059\n * @param urlStr : \u753b\u50cfURL\n * @return\n */\n", "func_signal": "public static final Bitmap getBitmap(final String urlStr, final ProgressDialog progressDialog)", "code": "{\n    Bitmap bmp = null;\n    byte[] line = new byte[1024];\n    int byteSize = 0;\n\n    try {\n        URL url = new URL(urlStr);\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        con.setRequestMethod(\"GET\");\n        con.connect();\n        InputStream is = con.getInputStream();\n        \n        // \u30d0\u30a4\u30c8\u5358\u4f4d\u3067\u306e\u8aad\u8fbc\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        while ((byteSize = is.read(line)) > 0) {\n            out.write(line, 0, byteSize);\n        }\n\n        byte[] byteArray = out.toByteArray();\n        bmp = BitmapFactory.decodeByteArray(byteArray, 0, byteArray.length);\n        is.close();\n    } catch (MalformedURLException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        String newStr = \"\";\n        if (Pattern.compile(\".+_500\\\\..+\").matcher(urlStr).matches()) {\n            newStr = urlStr.replaceAll(\"_500.\", \"_400.\");\n        } else if (Pattern.compile(\".+_400\\\\..+\").matcher(urlStr).matches()) {\n            newStr = urlStr.replaceAll(\"_400.\", \"_250.\");\n        } else if (Pattern.compile(\".+_250\\\\..+\").matcher(urlStr).matches()) {\n            newStr = urlStr.replaceAll(\"_250.\", \"_100.\");\n        } else {\n            // \u3010\u672a\u5b9f\u88c5\u3011\u58c1\u7d19\u8cbc\u308a\u4ed8\u3051\u5931\u6557\u30c0\u30a4\u30a2\u30ed\u30b0\u8868\u793a\n            e.printStackTrace();\n        }\n        bmp = getBitmap(newStr, null);\n    }\n\n    if (progressDialog != null) {\n        setProgressBarCount(progressDialog);\n    }\n\n    return bmp;\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\BitmapUtil.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u30b9\u30b1\u30fc\u30eb\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\n * @param bmpSize : \u753b\u50cf\u306e\u30b5\u30a4\u30ba(\u73fe\u5728\u306f\u9ad8\u3055\u3092\u57fa\u6e96\u306b\u3057\u3066\u3044\u308b)\n * @param changeSize : \u753b\u9762\u306e\u30b5\u30a4\u30ba(\u4eca\u306f\uff52\uff59)\n * @return\n */\n", "func_signal": "private static BigDecimal scaleData(int bmpSize, int changeSize)", "code": "{\n    BigDecimal afterSize = new BigDecimal(bmpSize + changeSize);\n    BigDecimal scale = afterSize.divide(new BigDecimal(Integer.toString(bmpSize)), 4,\n            BigDecimal.ROUND_CEILING);\n\n    return scale;\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\BitmapUtil.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u30c0\u30a4\u30a2\u30ed\u30b0\u8868\u793a\n * @param title\n * @param mes\n */\n", "func_signal": "private void showPrrogressBarDialog()", "code": "{\n    mProgressDialog = new ProgressDialog(mActivity);\n    mProgressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);\n    mProgressDialog.setTitle(R.string.load_progress_bar_dialog_title);\n    mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n    mProgressDialog.setMax(MAX_PROGRESS);\n    // \u521d\u671f\u30c0\u30a4\u30a2\u30ed\u30b0\u8868\u793a\n    mProgressDialog.setButton(getText(R.string.load_progress_bar_dialog_button1), new DialogInterface.OnClickListener() {\n        public void onClick(DialogInterface dialog, int whichButton) {\n            clearThreadData();\n            mProgressDialog.dismiss();\n            mDialog = showAccountNameDialog();\n            mDialog.show();\n        }\n    });\n    // \u30a2\u30d7\u30ea\u7d42\u4e86\n    mProgressDialog.setButton2(getText(R.string.load_progress_bar_dialog_button2), new DialogInterface.OnClickListener() {\n        public void onClick(DialogInterface dialog, int whichButton) {\n            finish();\n        }\n    });\n    mProgressDialog.show();\n\n    // \u30d0\u30c3\u30af\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\n    mProgressDialog.setOnCancelListener(new OnCancelListener(){\n        @Override\n        public void onCancel(DialogInterface dialog) {\n            finish();\n        }\n   });\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\TumblrWallpaper.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u30b9\u30b1\u30fc\u30eb\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3057\u307e\u3059\n * @param bmp : \u30b9\u30b1\u30fc\u30eb\u5bfe\u8c61bitmap\n * @param width : \u753b\u9762\u306e\u5e45\n * @param height : \u753b\u9762\u306e\u9ad8\u3055\n * @return\n */\n", "func_signal": "private static Point saleSize(Bitmap bmp, int width, int height)", "code": "{\n    Point point = new Point(0, 0);\n\n    // \u753b\u50cf\u306e\u5e45\u3068\u9ad8\u3055\n    int bmpWidth = bmp.getWidth();\n    int bmpHeight = bmp.getHeight();\n\n    int changeX = width - bmpWidth;\n    int changeY = height - bmpHeight;\n    BigDecimal scale = new BigDecimal(\"0\");\n    // \u5dee\u304c\u30de\u30a4\u30ca\u30b9\u3067\u3042\u308b\u3053\u3068\u3092\u6700\u512a\u5148\u306b\u78ba\u8a8d\u3057\u307e\u3059\n    scale = scaleData(bmpHeight, changeY);\n    // scale = scaleData(bmpWidth, changeX);\n\n    point.x = scale.multiply(new BigDecimal(Integer.toString(bmpWidth))).intValue();\n    point.y = scale.multiply(new BigDecimal(Integer.toString(bmpHeight))).intValue();\n\n    return point;\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\BitmapUtil.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * List\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u9078\u629e\u753b\u50cf\u3092\u58c1\u7d19\u8a2d\u5b9a\u3059\u308b\n * @param parent : \u77e5\u3089\u3093\n * @param v : \u9078\u629e\u3055\u308c\u305fList\u306eView\n * @param position : \u9078\u629e\u3055\u308c\u305fList\u306e\u4e0a\u304b\u3089\u6570\u3048\u305f\u3068\u304d\u306e\u756a\u53f7\n * @param id : \u77e5\u3089\u3093\n */\n", "func_signal": "public final void onListItemClick(ListView parent, View v, final int position, long id)", "code": "{\n    // \u9078\u629e\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u7a7a\u306e\u5834\u5408\n    if (mListData[position] == null) {\n        showNullRowSelDialog().show();\n    } else {\n        mBitmapScaleThread = new Thread(new Runnable() {\n            public void run() {\n                // \u7aef\u672b\u306e\u5e45\u3068\u9ad8\u3055\n                int hw = getWallpaperDesiredMinimumWidth();\n                int hh = getWallpaperDesiredMinimumHeight();\n\n                // \u753b\u50cf\u3092\u53d6\u5f97\u3057\u3066\u30b9\u30b1\u30fc\u30eb\n                String str = mListData[position].url.replaceAll(\"_250.\", \"_500.\");\n                mWallpaperBitmap = BitmapUtil.getScaleBitmap(BitmapUtil.getBitmap(str, null), hw, hh);\n            }\n        });\n        mBitmapScaleThread.start();\n\n        showCheckWallpaperDialog().show();\n    }\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\TumblrWallpaper.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * meny\u62bc\u4e0b\u6642\u306e\u30a4\u30d9\u30f3\u30c8\n */\n", "func_signal": "@Override\npublic final boolean onOptionsItemSelected(MenuItem items)", "code": "{\n    switch (items.getItemId()) {\n    case R.id.menu_reload_setting:\n        mDialog = showReloadSettingDialog();\n        mDialog.show();\n        return true;\n    }\n    return false;\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\TumblrWallpaper.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * Load\u6642\u306e\u30b9\u30ec\u30c3\u30c9\u958b\u59cb\u51e6\u7406\n * @param accountName : \u30a2\u30ab\u30a6\u30f3\u30c8\u540d\n * @param reloadCheck : \u300c\u6b21\u56de\u304b\u3089\u81ea\u52d5\u8aad\u307f\u8fbc\u307f\u300d\u30d5\u30e9\u30b0\n */\n", "func_signal": "private void loadThreadStart(String accountName, String reloadCheck)", "code": "{\n    // \u975e\u540c\u671f\u3067\u753b\u50cf\u53d6\u5f97\n    String url = \"http://\" + accountName + \".tumblr.com/page/\";\n    mAsyncTask = new ImageTask().execute(url);\n\n    setAccountInfo(accountName, reloadCheck);\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\TumblrWallpaper.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u753b\u9762\u306b\u8868\u793a\u3055\u308c\u308b\u6bce\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\n * @param position : \u8868\u793a\u3059\u308b\u5bfe\u8c61List\u306e\u4e00\u89a7\u3092\u4e0a\u304b\u3089\u6570\u3048\u305f\u3068\u304d\u306e\u756a\u53f7\n * @param convertView : \u8868\u793a\u3059\u308b\u5bfe\u8c61List\u306eView\n * @param parent : \u77e5\u3089\u3093\n */\n", "func_signal": "final public View getView(int position, View convertView, ViewGroup parent)", "code": "{\n    View row = convertView;\n\n    if (mListData[position] != null) {\n        // \u753b\u50cf\u30a4\u30e1\u30fc\u30b8\u3092\u4f5c\u6210\n        if (row == null || row.getTag() == null) {\n            LayoutInflater inflater = LayoutInflater.from(mContext);\n            row = inflater.inflate(R.layout.row, null);\n\n            mListData[position].img = (ImageView) row.findViewById(R.id.image);\n            row.setTag(mListData[position].img);\n        } else {\n            // \u753b\u50cf\u30a4\u30e1\u30fc\u30b8\u3092\u8aad\u307f\u8fbc\u307f\n            mListData[position].img = (ImageView) row.getTag();\n        }\n\n        if (mListData[position] != null && mListData[position].img != null) {\n            mListData[position].img.setImageBitmap(mListData[position].bitmap);\n            mListData[position].img.setTag(mListData[position].url);\n        } else {\n            mListData[position].img.setImageBitmap(null);\n            mListData[position].img.setTag(\"\");\n        }\n    } else {\n        LayoutInflater inflater = LayoutInflater.from(mContext);\n        row = inflater.inflate(R.layout.row, null);\n    }\n    return row;\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\TumblrWallpaper.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u30a2\u30ab\u30a6\u30f3\u30c8\u60c5\u5831\u3092\u30d7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306b\u4fdd\u5b58\n * @param accountName : \u30a2\u30ab\u30a6\u30f3\u30c8\u540d\n * @param reloadCheck : \u300c\u6b21\u56de\u304b\u3089\u81ea\u52d5\u8aad\u307f\u8fbc\u307f\u300d\u30d5\u30e9\u30b0\n */\n", "func_signal": "private void setAccountInfo(String accountName, String reloadCheck)", "code": "{\n    setPreferences(\"name\", accountName);\n    setPreferences(\"reload\", reloadCheck);\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\TumblrWallpaper.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "/**\n * \u30b9\u30b1\u30fc\u30eb\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092\u53d6\u5f97\u3057\u307e\u3059\n * @param bmp : \u30b9\u30b1\u30fc\u30eb\u5bfe\u8c61bitmap\n * @param width : \u753b\u9762\u306e\u5e45\n * @param height : \u753b\u9762\u306e\u9ad8\u3055\n * @return\n */\n", "func_signal": "public static final Bitmap getScaleBitmap(Bitmap bmp, int width, int height)", "code": "{\n    if (bmp != null) {\n        Point point = saleSize(bmp, width, height);\n        bmp = Bitmap.createScaledBitmap(bmp, point.x, point.y, true);\n        /* 2.0\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306e\u5bfe\u51e6\u6cd5\n        Bitmap backBmp = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n        // bmp = backBmp.createBitmap(bmp, 0, 0, point.x, point.y);\n        Canvas canvas = new Canvas(backBmp);\n        canvas.drawBitmap(bmp, 0, 0, null);\n        BitmapDrawable drawable = new BitmapDrawable(backBmp);\n        drawable.draw(canvas);\n        bmp = drawable.getBitmap();\n        // drawable.draw(canvas);\n         */\n        }\n    return bmp;\n}", "path": "src\\jp\\hyoromo\\android\\tumblrwallpaper\\BitmapUtil.java", "repo_name": "hyoromo/TumblrWallpaper", "stars": 4, "license": "None", "language": "java", "size": 784}
{"docstring": "// Returns the production of the given player.\n", "func_signal": "public int Production(int playerID)", "code": "{\n\tint prod = 0;\n\tfor (Planet p : planets) {\n\t    if (p.Owner() == playerID) {\n\t\tprod += p.GrowthRate();\n\t    }\n\t}\n\treturn prod;\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Subtracts one turn remaining. Call this function to make the fleet get\n// one turn closer to its destination.\n", "func_signal": "public void TimeStep()", "code": "{\n\tif (turnsRemaining > 0) {\n\t    --turnsRemaining;\n\t} else {\n\t    turnsRemaining = 0;\n\t}\n}", "path": "example_bots\\Fleet.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Initializes a fleet.\n", "func_signal": "public Fleet(int owner,\n\t\t int numShips,\n\t\t int sourcePlanet,\n\t\t int destinationPlanet,\n\t\t int totalTripLength,\n\t\t int turnsRemaining)", "code": "{\n\tthis.owner = owner;\n\tthis.numShips = numShips;\n\tthis.sourcePlanet = sourcePlanet;\n\tthis.destinationPlanet = destinationPlanet;\n\tthis.totalTripLength = totalTripLength;\n\tthis.turnsRemaining = turnsRemaining;\n}", "path": "example_bots\\Fleet.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Initializes a fleet.\n", "func_signal": "public Fleet(int owner,\n\t\t int numShips)", "code": "{\n\tthis.owner = owner;\n\tthis.numShips = numShips;\n\tthis.sourcePlanet = -1;\n\tthis.destinationPlanet = -1;\n\tthis.totalTripLength = -1;\n\tthis.turnsRemaining = -1;\n}", "path": "example_bots\\Fleet.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Return a list of all the planets that are not owned by the current\n// player. This includes all enemy planets and neutral planets.\n", "func_signal": "public List<Planet> NotMyPlanets()", "code": "{\n\tList<Planet> r = new ArrayList<Planet>();\n\tfor (Planet p : planets) {\n\t    if (p.Owner() != 1) {\n\t\tr.add(p);\n\t    }\n\t}\n\treturn r;\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Returns true if the named player owns at least one planet or fleet.\n// Otherwise, the player is deemed to be dead and false is returned.\n", "func_signal": "public boolean IsAlive(int playerID)", "code": "{\n\tfor (Planet p : planets) {\n\t    if (p.Owner() == playerID) {\n\t\treturn true;\n\t    }\n\t}\n\tfor (Fleet f : fleets) {\n\t    if (f.Owner() == playerID) {\n\t\treturn true;\n\t    }\n\t}\n\treturn false;\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Return a list of all the planets owned by the current player. By\n// convention, the current player is always player number 1.\n", "func_signal": "public List<Planet> MyPlanets()", "code": "{\n\tList<Planet> r = new ArrayList<Planet>();\n\tfor (Planet p : planets) {\n\t    if (p.Owner() == 1) {\n\t\tr.add(p);\n\t    }\n\t}\n\treturn r;\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Returns the distance between two planets, rounded up to the next highest\n// integer. This is the number of discrete time steps it takes to get\n// between the two planets.\n", "func_signal": "public int Distance(int sourcePlanet, int destinationPlanet)", "code": "{\n\tPlanet source = planets.get(sourcePlanet);\n\tPlanet destination = planets.get(destinationPlanet);\n\tdouble dx = source.X() - destination.X();\n\tdouble dy = source.Y() - destination.Y();\n\treturn (int)Math.ceil(Math.sqrt(dx * dx + dy * dy));\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Parses a game state from a string. On success, returns 1. On failure,\n// returns 0.\n", "func_signal": "private int ParseGameState(String s)", "code": "{\n\tplanets.clear();\n\tfleets.clear();\n\tint planetID = 0;\n\tString[] lines = s.split(\"\\n\");\n\tfor (int i = 0; i < lines.length; ++i) {\n\t    String line = lines[i];\n\t    int commentBegin = line.indexOf('#');\n\t    if (commentBegin >= 0) {\n\t\tline = line.substring(0, commentBegin);\n\t    }\n\t    if (line.trim().length() == 0) {\n\t\tcontinue;\n\t    }\n\t    String[] tokens = line.split(\" \");\n\t    if (tokens.length == 0) {\n\t\tcontinue;\n\t    }\n\t    if (tokens[0].equals(\"P\")) {\n\t\tif (tokens.length != 6) {\n\t\t    return 0;\n\t\t}\n\t\tdouble x = Double.parseDouble(tokens[1]);\n\t\tdouble y = Double.parseDouble(tokens[2]);\n\t\tint owner = Integer.parseInt(tokens[3]);\n\t\tint numShips = Integer.parseInt(tokens[4]);\n\t\tint growthRate = Integer.parseInt(tokens[5]);\n\t\tPlanet p = new Planet(planetID++,\n\t\t\t\t      owner,\n\t\t\t\t      numShips,\n\t\t\t\t      growthRate,\n\t\t\t\t      x, y);\n\t\tplanets.add(p);\n\t    } else if (tokens[0].equals(\"F\")) {\n\t\tif (tokens.length != 7) {\n\t\t    return 0;\n\t\t}\n\t\tint owner = Integer.parseInt(tokens[1]);\n\t\tint numShips = Integer.parseInt(tokens[2]);\n\t\tint source = Integer.parseInt(tokens[3]);\n\t\tint destination = Integer.parseInt(tokens[4]);\n\t\tint totalTripLength = Integer.parseInt(tokens[5]);\n\t\tint turnsRemaining = Integer.parseInt(tokens[6]);\n\t\tFleet f = new Fleet(owner,\n\t\t\t\t    numShips,\n\t\t\t\t    source,\n\t\t\t\t    destination,\n\t\t\t\t    totalTripLength,\n\t\t\t\t    turnsRemaining);\n\t\tfleets.add(f);\n\t    } else {\n\t\treturn 0;\n\t    }\n\t}\n\treturn 1;\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Sends an order to the game engine. An order is composed of a source\n// planet number, a destination planet number, and a number of ships. A\n// few things to keep in mind:\n//   * you can issue many orders per turn if you like.\n//   * the planets are numbered starting at zero, not one.\n//   * you must own the source planet. If you break this rule, the game\n//     engine kicks your bot out of the game instantly.\n//   * you can't move more ships than are currently on the source planet.\n//   * the ships will take a few turns to reach their destination. Travel\n//     is not instant. See the Distance() function for more info.\n", "func_signal": "public void IssueOrder(int sourcePlanet,\n                       int destinationPlanet,\n                       int numShips)", "code": "{\n    System.out.println(\"\" + sourcePlanet + \" \" + destinationPlanet + \" \" +\n      numShips);\n\tSystem.out.flush();\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Return a list of all neutral planets.\n", "func_signal": "public List<Planet> NeutralPlanets()", "code": "{\n\tList<Planet> r = new ArrayList<Planet>();\n\tfor (Planet p : planets) {\n\t    if (p.Owner() == 0) {\n\t\tr.add(p);\n\t    }\n\t}\n\treturn r;\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Returns the distance between two planets, rounded up to the next highest\n// integer. This is the number of discrete time steps it takes to get\n// between the two planets.\n", "func_signal": "public int Distance(Planet source, Planet destination)", "code": "{\n\tdouble dx = source.X() - destination.X();\n\tdouble dy = source.Y() - destination.Y();\n\treturn (int)Math.ceil(Math.sqrt(dx * dx + dy * dy));\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Loads a map from a text file. The text file contains a description of\n// the starting state of a game. See the project wiki for a description of\n// the file format. It should be called the Planet Wars Point-in-Time\n// format. On success, return 1. On failure, returns 0.\n", "func_signal": "private int LoadMapFromFile(String mapFilename)", "code": "{\n\tString s = \"\";\n\tBufferedReader in = null;\n\ttry {\n\t\tin = new BufferedReader(new FileReader(mapFilename));\n\t\tint c;\n\t\twhile ((c = in.read()) >= 0) {\n\t\t    s += (char)c;\n\t\t}\n\t} catch (Exception e) {\n\t    return 0;\n\t} finally {\n\t    try {\n\t\tin.close();\n\t    } catch (Exception e) {\n\t\t// Fucked.\n\t    }\n\t}\n\treturn ParseGameState(s);\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Sends an order to the game engine. An order is composed of a source\n// planet number, a destination planet number, and a number of ships. A\n// few things to keep in mind:\n//   * you can issue many orders per turn if you like.\n//   * the planets are numbered starting at zero, not one.\n//   * you must own the source planet. If you break this rule, the game\n//     engine kicks your bot out of the game instantly.\n//   * you can't move more ships than are currently on the source planet.\n//   * the ships will take a few turns to reach their destination. Travel\n//     is not instant. See the Distance() function for more info.\n", "func_signal": "public void IssueOrder(Planet source, Planet dest, int numShips)", "code": "{\n    System.out.println(\"\" + source.PlanetID() + \" \" + dest.PlanetID() +\n      \" \" + numShips);\n\tSystem.out.flush();\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Returns the number of ships that the current player has, either located\n// on planets or in flight.\n", "func_signal": "public int NumShips(int playerID)", "code": "{\n\tint numShips = 0;\n\tfor (Planet p : planets) {\n\t    if (p.Owner() == playerID) {\n\t\tnumShips += p.NumShips();\n\t    }\n\t}\n\tfor (Fleet f : fleets) {\n\t    if (f.Owner() == playerID) {\n\t\tnumShips += f.NumShips();\n\t    }\n\t}\n\treturn numShips;\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Constructs a PlanetWars object instance, given a string containing a\n// description of a game state.\n", "func_signal": "public PlanetWars(String gameStateString)", "code": "{\n\tplanets = new ArrayList<Planet>();\n\tfleets = new ArrayList<Fleet>();\n\tParseGameState(gameStateString);\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Return a list of all the fleets owned by the current player.\n", "func_signal": "public List<Fleet> MyFleets()", "code": "{\n\tList<Fleet> r = new ArrayList<Fleet>();\n\tfor (Fleet f : fleets) {\n\t    if (f.Owner() == 1) {\n\t\tr.add(f);\n\t    }\n\t}\n\treturn r;\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Return a list of all the planets owned by rival players. This excludes\n// planets owned by the current player, as well as neutral planets.\n", "func_signal": "public List<Planet> EnemyPlanets()", "code": "{\n\tList<Planet> r = new ArrayList<Planet>();\n\tfor (Planet p : planets) {\n\t    if (p.Owner() >= 2) {\n\t\tr.add(p);\n\t    }\n\t}\n\treturn r;\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// Sends the game engine a message to let it know that we're done sending\n// orders. This signifies the end of our turn.\n", "func_signal": "public void FinishTurn()", "code": "{\n\tSystem.out.println(\"go\");\n\tSystem.out.flush();\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "// If the game is not yet over (ie: at least two players have planets or\n// fleets remaining), returns -1. If the game is over (ie: only one player\n// is left) then that player's number is returned. If there are no\n// remaining players, then the game is a draw and 0 is returned.\n", "func_signal": "public int Winner()", "code": "{\n\tSet<Integer> remainingPlayers = new TreeSet<Integer>();\n\tfor (Planet p : planets) {\n\t    remainingPlayers.add(p.Owner());\n\t}\n\tfor (Fleet f : fleets) {\n\t    remainingPlayers.add(f.Owner());\n\t}\n\tswitch (remainingPlayers.size()) {\n\tcase 0:\n\t    return 0;\n\tcase 1:\n\t    return ((Integer)remainingPlayers.toArray()[0]).intValue();\n\tdefault:\n\t    return -1;\n\t}\n}", "path": "example_bots\\PlanetWars.java", "repo_name": "ihodes/ai-contest-planet-wars-clj", "stars": 6, "license": "None", "language": "java", "size": 1138}
{"docstring": "/**\n *  rendezvousEvent the rendezvous event\n *\n *@param  event   rendezvousEvent\n */\n", "func_signal": "public synchronized void rendezvousEvent(RendezvousEvent event)", "code": "{\n    if (event.getType() == event.RDVCONNECT ||\n        event.getType() == event.RDVRECONNECT ) {\n        notify();\n    }\n}", "path": "src\\java\\com\\idega\\cluster\\PipeExample.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "//start the JXTA platform\n", "func_signal": "private void startJxta()", "code": "{\n     try {\n         netPeerGroup = PeerGroupFactory.newNetPeerGroup();\n     } catch ( PeerGroupException e) {\n         // could not instantiate the group, print the stack and exit\n         System.out.println(\"fatal error : group creation failure\");\n         e.printStackTrace();\n         //System.exit(1);\n     }\n\n     // Get the discovery service from our peer group\n     discovery = netPeerGroup.getDiscoveryService();\n }", "path": "src\\java\\com\\idega\\cluster\\DiscoveryDemo.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/**\n * Create a PipeID based on the BinaryID type with a digest of the clearTextID and function.\n *\n * @param peerGroupID Parent peer group ID.\n * @param clearTextID String used as the significant part of the address\n * @param function String used to diferentiate different clearTextID addresses (can be null).\n * @return PipeBinaryID with the digest hash of the string: clearTextID+\"~\"+function.\n */\n", "func_signal": "public static final net.jxta.pipe.PipeID createPipeID(net.jxta.peergroup.PeerGroupID peerGroupID,String clearTextID, String function)", "code": "{\n    LOG.info(\"Creatig pipe ID = peerGroupID:\"+peerGroupID+\", clearText:'\"+clearTextID+\"' , function:'\"+function+\"'\");\n    byte[] digest = generateHash(clearTextID, function);\n    return (net.jxta.pipe.PipeID)net.jxta.id.IDFactory.newPipeID(peerGroupID, digest );\n}", "path": "src\\java\\com\\idega\\cluster\\MD5ID.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/**\n * By implementing PipeMsgListener, define this method to deal with\n * messages as they arrive\n */\n", "func_signal": "public void pipeMsgEvent(PipeMsgEvent event)", "code": "{\n\n    Message msg=null;\n    try {\n        // grab the message from the event\n        msg = event.getMessage();\n        if (msg == null) {\n            return;\n        }\n        printMessageStats(msg, true);\n    } catch (Exception e) {\n        e.printStackTrace();\n        return;\n    }\n\n    // get all the message elements\n    Message.ElementIterator en = msg.getMessageElements();\n    if (!en.hasNext()) {\n        return;\n    }\n\n    // get the message element named SenderMessage\n    MessageElement msgElement = msg.getMessageElement(null, SenderMessage);\n    // Get message\n    if (msgElement.toString() == null) {\n        System.out.println(\"null msg received\");\n    } else {\n        Date date = new Date(System.currentTimeMillis());\n        System.out.println(\"Message received at :\"+ date.toString());\n        System.out.println(\"Message  created at :\"+ msgElement.toString());\n    }\n}", "path": "src\\java\\com\\idega\\cluster\\PipeListener.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "// returns true if a port was found false if a port has been created\n", "func_signal": "private boolean findPortNumber(String peerIPs)", "code": "{\n\tif (peerIPs == null) {\n\t\tmyTCPPort = DEFAULT_TCP_PORT;\n\t\treturn false;\n\t}\t\n\t// analyse peerIPs - create a list of found peers\n\t\n\tStringTokenizer tokenizer = new StringTokenizer(peerIPs,TOKEN, true);\n\tList foundPeersWithSameIP = new ArrayList();\n\tboolean uriFollows = true;\n\tURI currentURI = null;\n\tString currentPath = null;\n\twhile (tokenizer.hasMoreTokens()) {\n\t\tString element = tokenizer.nextToken();\n\t\tif (AD.equals(element)) {\n\t\t\turiFollows = true;\n\t\t\tstoreCurrentPeer(currentURI, currentPath, foundPeersWithSameIP);\n\t\t\t// store current peer\n\t\t\t// reset current peer\n\t\t\tcurrentURI = null;\n\t\t\tcurrentPath = null;\n\t\t}\n\t\telse if (HASH.equals(element)) {\n\t\t\turiFollows = false;\n\t\t}\n\t\telse if (uriFollows) {\n\t\t\t// element should be an URI\n\t\t\ttry {\n\t\t\t\tcurrentURI = new URI(element);\n\t\t\t}\n\t\t\tcatch (URISyntaxException e) {\n\t\t\t\tgetLogger().warning(\"[PeerIdentifierSetter] URI syntax in database wrong: \" + element);\n\t\t\t\t// ignore this entry by setting to null\n\t\t\t\tcurrentURI = null;\n\t\t\t}\n\t\t\t\t\n\t\t}\n\t\telse {\n\t\t\tcurrentPath = element;\n\t\t}\n\t}\n\t// do not forget to store the last peer\n\tstoreCurrentPeer(currentURI, currentPath, foundPeersWithSameIP);\n\t\n\t// analyse all peers with the same ip address\n\t\t\n\t// case 1: no peers with same ip address found\n\tif (foundPeersWithSameIP.size() == 0) {\n\t\tmyTCPPort = DEFAULT_TCP_PORT;\n\t\t// return not found\n\t\treturn false;\n\t}\n\t// case 2: only one found - ignore identifier \n\t// in that way someone can put an entry into the database without an identifier\n\t// or the application can be moved around on the same machine\n\tif (foundPeersWithSameIP.size() == 1) {\n\t\t// special case: someone put the entry in the database manually without an identifier, accept this case\n\t\tPeerIdentifier peerIdentifier = (PeerIdentifier) foundPeersWithSameIP.get(0);\n\t\tString tempIdentifer = peerIdentifier.getIdentifier();\n\t\tif (StringHandler.isEmpty(tempIdentifer)) {\n\t\t\tint tempPort = peerIdentifier.getUri().getPort();\n\t\t\tmyTCPPort = new Integer(tempPort);\n\t\t\t// return found\n\t\t\treturn true;\n\t\t}\n\t}\n\t// case 3: one or more peers with identifiers found\n\tList usedPorts = new ArrayList();\n\tIterator iterator = foundPeersWithSameIP.iterator();\n\twhile (iterator.hasNext()) {\n\t\tPeerIdentifier peerIdentifier = (PeerIdentifier) iterator.next();\n\t\tString identifier = peerIdentifier.getIdentifier();\n\t\tint tempPort = peerIdentifier.getUri().getPort();\n\t\tif (myIdentifier.equals(identifier)) {\n\t\t\tmyTCPPort = new Integer(tempPort);\n\t\t}\n\t\telse {\n\t\t\t// add the one with the different identifier to the others peers\n\t\t\tseedPeers.add(peerIdentifier);\n\t\t\tusedPorts.add(new Integer(tempPort));\n\t\t}\n\t}\n\tif (myTCPPort != null) {\n\t\t// return found\n\t\treturn true;\n\t}\n\t// find a port number\n\n\t// start at 9700 that is the default\n\tmyTCPPort = DEFAULT_TCP_PORT;\n\twhile (usedPorts.contains(myTCPPort)) {\n\t\tmyTCPPort = new Integer(myTCPPort.intValue() + 2);\n\t}\n\t// not found\n\treturn false;\n}", "path": "src\\java\\com\\idega\\cluster\\net\\config\\id\\PeerIdentifierSetter.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "// returns true if successful\n", "func_signal": "private boolean setPeerIdentifierIntoDatabase(IWApplicationContext iwac) throws IOException", "code": "{\n\t// get ip address\n\ttry {\n\t\t// there is sometimes a problem here, see:\n\t\t// http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4073539\n\t\t//myIP = \"157.157.121.37\";//myIPAddress.getHostAddress();\n\t\tmyIP = InetAddress.getLocalHost().getHostAddress();\n\t}\n\tcatch (UnknownHostException e) {\n\t\tgetLogger().warning(\"[PeerIdentifierSetter] Own IP address could not be retrieved\");\n\t\tthrow new IOException(\"[PeerIdentifierSetter] Own IP address could not be retrieved\");\n\t}\n\t// get identifier\n\tString path = iwac.getIWMainApplication().getApplicationRealPath();\n\tmyIdentifier = Integer.toString(path.hashCode());\n\t// get other peers\n\tIWMainApplicationSettings iwMainApplicationSettings =iwac.getApplicationSettings();\n\t// step 1 reading\n\tString peerIPs = iwMainApplicationSettings.getProperty(APPLICATION_PEERS);\n\tif (findPortNumber(peerIPs)) {\n\t\t// nothing to do, entry found\n\t\treturn true;\n\t}\n\t// add entry \n\tStringBuffer buffer = new StringBuffer();\n\tif (peerIPs != null) {\n\t\tbuffer.append(peerIPs);\n\t\tbuffer.append(AD);\n\t}\n\t// assemble identifier  uri:myIdentifer\n\tint myPort = myTCPPort.intValue();\n\tURI myURI = null;\n\ttry {\n\t\tmyURI = new URI(\"tcp\",null,myIP,myPort,null,null,null);\n\t}\n\tcatch (URISyntaxException e1) {\n\t\tgetLogger().warning(\"[PeerIdentifierSetter] Own IP address could not be created\");\n\t\tthrow new IOException(\"[PeerIdentifierSetter] Own IP address could not be created\");\n\t}\n\tbuffer.append(myURI.toString());\n\tbuffer.append(HASH);\n\tbuffer.append(myIdentifier);\n\t// extend peerIDs\n\tString extendedPeerIDs = buffer.toString(); \n\t\n\t// step 2 writing\n\tiwMainApplicationSettings.setProperty(APPLICATION_PEERS, extendedPeerIDs);\n\t// go sleeping for a while\n\ttry {\n\t\tThread.sleep(4000);\n\t}\n\tcatch (InterruptedException e) {\n\t\tgetLogger().warning(\"[PeerURISetter] Sleeping thread was interrupted\");\n\t}\n\t// check now if some other application has written to the database during the time between step 1 and step 2\n\t// do not use the cache read database\n\tICApplicationBindingBusiness applicationBindingBusiness = getApplicationBindingBusiness(iwac);\n\ttry {\n\t\tString secondPeerIds = applicationBindingBusiness.get(APPLICATION_PEERS);\n\t\t// not successful if the strings are different\n\t\treturn secondPeerIds.equals(extendedPeerIDs);\n\t}\n\tcatch (RemoteException re) {\n\t\tgetLogger().warning(\"[PeerURISetter] ICApplicationBindingBusiness could not be found\");\n\t\tthrow new IBORuntimeException(re.getMessage());\n\t}\n}", "path": "src\\java\\com\\idega\\cluster\\net\\config\\id\\PeerIdentifierSetter.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/**\n *  main\n *\n *@param  args  command line arguments\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n    PipeExample myapp = new PipeExample();\n    myapp.startJxta(null);\n    myapp.run();\n}", "path": "src\\java\\com\\idega\\cluster\\PipeExample.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/* (non-Javadoc)\n * @see com.idega.core.event.MethodCallEventHandler#handleEvent(com.idega.core.event.MethodCallEvent)\n */\n", "func_signal": "public void handleEvent(MethodCallEvent methodCallEvent)", "code": "{\n\t// put a wrapper around the event\n\t// and change the sender to the application messenger ID !\n\tString messageSender = applicationMessenger.getSender();\n\tSimpleMessage simpleMessage = new SimpleMessageEvent(messageSender, methodCallEvent);\n\tapplicationMessenger.sendMessage(simpleMessage);\n}", "path": "src\\java\\com\\idega\\cluster\\event\\MessageEventHandler.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/**\n *  Starts jxta, and get the pipe, and discovery service\n */\n", "func_signal": "private void startJxta(PeerGroup peerGroup)", "code": "{\n    try {\n    \tif (peerGroup == null) {\n\t            // create, and Start the default jxta NetPeerGroup\n\t            netPeerGroup = PeerGroupFactory.newNetPeerGroup();\n    \t}\n    \telse {\n    \t\tnetPeerGroup = peerGroup;\n    \t}\n        rendezvous = netPeerGroup.getRendezVousService();\n        rendezvous.addListener(this);\n        // uncomment the following line if you want to start the app defined\n        // the NetPeerGroup Advertisement (by default it's the shell)\n        // in this case we want use jxta directly.\n        // netPeerGroup.startApp(null);\n\n    } catch (PeerGroupException e) {\n        // could not instantiate the group, print the stack and exit\n        System.out.println(\"fatal error : group creation failure\");\n        e.printStackTrace();\n        System.exit(-1);\n    }\n\n    // get the pipe service, and discovery\n    pipe = netPeerGroup.getPipeService();\n    discovery = netPeerGroup.getDiscoveryService();\n    System.out.println(\"Reading in pipexample.adv\");\n    try {\n    \tString path = System.getProperty(\"JXTA_HOME\");\n    \tFile jxtaHome = new File(path);\n    \tFile pipexampleAdv = new File(jxtaHome.getParentFile(), \"pipexample.adv\");\n    \tFileInputStream is = new FileInputStream(pipexampleAdv);\n        pipeAdv = (PipeAdvertisement) AdvertisementFactory.newAdvertisement(MimeMediaType.XMLUTF8, is);\n        is.close();\n    } catch (Exception e) {\n        System.out.println(\"failed to read/parse pipe advertisement\");\n        e.printStackTrace();\n        System.exit(-1);\n    }\n}", "path": "src\\java\\com\\idega\\cluster\\PipeExample.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/**\n *  main\n *\n * @param  args  command line args\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n\n    PipeListener myapp = new PipeListener();\n    myapp.startJxta();\n    myapp.run();\n}", "path": "src\\java\\com\\idega\\cluster\\PipeListener.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/* (non-Javadoc)\n * @see com.idega.idegaweb.IWBundleStartable#start(com.idega.idegaweb.IWBundle)\n */\n", "func_signal": "public void startPrivateNet(IWBundle starterBundle)", "code": "{\n\tIWApplicationContext iwac = starterBundle.getApplication().getIWApplicationContext();\n\ttry {\n\t\tapplicationMessenger = new ApplicationPeerGroupPipe();\n\t\tif (! applicationMessenger.start(iwac)) {\n\t\t\tapplicationMessenger = null;\n\t\t\tSystem.err.println(\"[IWBundleStarter] Could not start an application messenger\");\n\t\t\treturn;\n\t\t}\n\t}\n\tcatch (Exception e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n\t// testing\n\tString sender = applicationMessenger.getSender();\n\tSimpleMessage messageToSend = SimpleMessageImpl.getInstanceForSending(sender,\"test\");\n\tapplicationMessenger.sendMessage(messageToSend);\n\t\n\t// registering filters for receiving\n\tReceiveFilter receiveFilter = new IgnoreOwnMessage(sender);\n\tapplicationMessenger.addReceiveFilter(receiveFilter);\n\tapplicationMessenger.addReceiveFilter(new IgnoreAlreadyReceivedMessage());\n\t\n\t// registering listeners that are sending messages\n\tClusterCacheManagerListener.getInstanceAddedToEhCache(applicationMessenger);\n\t\n\t// registering listeners that are getting messages\n\tClusterCacheMapNotifier.getInstanceAddedToEhCache(applicationMessenger);\n\t\n\t// registering to event system\n\tMethodCallEventConnector connector = new MethodCallEventConnector();\n\tconnector.connectToMethodCallEventSystem(applicationMessenger);\n\n\t\n\t// \n\t//File home = new File(\"/Users/thomas/workspaces/workspace_ePlatform_rvk_20061127/applications/reykjavik/target/reykjavik/idegaweb/bundles/com.idega.cluster.bundle/properties\");\n\t\n\t//File home = new File(\"/Users/thomas/workspaces/targets/tomcat2/reykjavik/idegaweb/bundles/com.idega.cluster.bundle/properties/\");\n//\t\ttry {\n//\t\t\tSystem.out.println(\"Home of JXTA: \" + home.getCanonicalPath());\n//\t\t}\n//\t\tcatch (IOException ex) {\n//\t\t}\n\t\n\t\n\t//File home = new File(\"/home/thomas/workspaces/targets/targetA3/reykjavik/idegaweb/bundles/com.idega.cluster.bundle/properties\");\n//        try {\n//\n//        \tJxtaConfig.main(null);\n//        \t/*\n//        \t * Register the default Edge platform configurator\n//        \t */\n//        \t//AbstractConfigurator.register(ApplicationJxtaNetConfigurator.class);\n//        \t//PeerGroupFactory.setConfiguratorClass(ApplicationJxtaNetConfigurator.class);\n//        \tIWApplicationContext iwac = starterBundle.getApplication().getIWApplicationContext();\n//            PeerGroup defaultPeerGroup = PeerGroupFactory.newNetPeerGroup();\n//            DiscoveryService discovery = defaultPeerGroup.getDiscoveryService();\n////          this step helps when running standalone (local sub-net without any redezvous setup)\n//            discovery.getRemoteAdvertisements(null, DiscoveryService.ADV, null, null, 1, null);\n//            ApplicationPeerGroup applicationPeerGroup = new ApplicationPeerGroup(defaultPeerGroup, iwac);\n//            applicationPeerGroup.toString();\n//            ApplicationPeerGroupPipe applicationPeerGroupPipe = new ApplicationPeerGroupPipe(applicationPeerGroup, iwac);\n//            SimpleMessage messageToSend = new SimpleMessage(\"cache\",\"hello world\");\n//            applicationPeerGroupPipe.sendMessage(messageToSend);\n//        }\n//        catch (Exception ex) {\n//        \tSystem.out.println(\"Hello\");\n//        }\n//    \t//JxtaConfig.main(null);\n\t//SimpleJxtaApp.main(null);\n    \t//DiscoveryDemo.main(null);\n        //PipeListener.main(null);\n        //PipeExample.main(null);\n\n        \n        //JoinDemo.main(null);\n\t\n}", "path": "src\\java\\com\\idega\\cluster\\IWBundleStarter.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/**\n * Generates an SHA-1 digest hash of the string: clearTextID+\"-\"+function or: clearTextID if function was blank.<p>\n *\n * Note that the SHA-1 used only creates a 20 byte hash.<p>\n *\n * @param clearTextID A string that is to be hashed. This can be any string used for hashing or hiding data.\n * @param function A function related to the clearTextID string. This is used to create a hash associated with clearTextID so that it is a uique code.\n *\n * @return array of bytes containing the hash of the string: clearTextID+\"-\"+function or clearTextID if function was blank. Can return null if SHA-1 does not exist on platform.\n */\n", "func_signal": "public static final byte[] generateHash(String clearTextID, String function)", "code": "{\n    String id;\n    \n    if (function == null) {\n        id = clearTextID;\n    } else {\n        id = clearTextID + functionSeperator + function;\n    }\n    byte[] buffer = id.getBytes();\n    \n    MessageDigest algorithm = null;\n    \n    try {\n        algorithm = MessageDigest.getInstance(\"MD5\");\n    } catch (Exception e) {\n        LOG.error(\"Cannot load selected Digest Hash implementation\",e);\n        return null;\n    }\n    \n    \n    // Generate the digest.\n    algorithm.reset();\n    algorithm.update(buffer);\n    \n    try{\n        byte[] digest1 = algorithm.digest();\n        return digest1;\n    }catch(Exception de){\n        LOG.error(\"Failed to creat a digest.\",de);\n        return null;\n    }\n}", "path": "src\\java\\com\\idega\\cluster\\MD5ID.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/**\n * wait for msgs\n *\n */\n", "func_signal": "public void run()", "code": "{\n\n    try {\n        // the following creates the inputpipe, and registers \"this\"\n        // as the PipeMsgListener, when a message arrives pipeMsgEvent is called\n        System.out.println(\"Creating input pipe\");\n        pipeIn = pipe.createInputPipe(pipeAdv, this);\n    } catch (Exception e) {\n        return;\n    }\n    if (pipeIn == null) {\n        System.out.println(\" cannot open InputPipe\");\n        System.exit(-1);\n    }\n    System.out.println(\"Waiting for msgs on input pipe\");\n}", "path": "src\\java\\com\\idega\\cluster\\PipeListener.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/* (non-Javadoc)\n * @see com.idega.idegaweb.IWBundleStartable#stop(com.idega.idegaweb.IWBundle)\n */\n", "func_signal": "public void stop(IWBundle starterBundle)", "code": "{\n\tif (applicationMessenger != null) {\n\t\tIWApplicationContext iwac = starterBundle.getApplication().getIWApplicationContext();\n\t\tapplicationMessenger.stop(iwac);\n\t}\n\tapplicationMessenger = null;\n\t// TODO Auto-generated method stub\n}", "path": "src\\java\\com\\idega\\cluster\\IWBundleStarter.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/**\n *  by implementing OutputPipeListener we must define this method which\n *  is called when the output pipe is created\n *\n *@param  event  event object from which to get output pipe object\n */\n", "func_signal": "public void outputPipeEvent(OutputPipeEvent event)", "code": "{\n\n    System.out.println(\" Got an output pipe event\");\n    OutputPipe op = event.getOutputPipe();\n    Message msg = null;\n\n    try {\n        System.out.println(\"Sending message\");\n        msg = new Message();\n        Date date = new Date(System.currentTimeMillis());\n        StringMessageElement sme = new StringMessageElement(SenderMessage, date.toString() , null);\n        msg.addMessageElement(null, sme);\n        op.send(msg);\n    } catch (IOException e) {\n        System.out.println(\"failed to send message\");\n        e.printStackTrace();\n        System.exit(-1);\n    }\n    op.close();\n    System.out.println(\"message sent\");\n}", "path": "src\\java\\com\\idega\\cluster\\PipeExample.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/**\n * Create a PeerGroupID based on the BinaryID type with a digest of the clearTextID and function.\n *\n * @param peerGroupID Parent peer group ID.\n * @param clearTextID String used as the significant part of the address\n * @param function String used to diferentiate different clearTextID addresses (can be null).\n * @return PeerGroupBinaryID with the digest hash of the string: clearTextID+\"~\"+function.\n */\n", "func_signal": "public static final net.jxta.peergroup.PeerGroupID createPeerGroupID(net.jxta.peergroup.PeerGroupID parentPeerGroupID,String clearTextID, String function)", "code": "{\n    LOG.info(\"Creating peer group ID = peerGroupID:\"+parentPeerGroupID+\", clearText:'\"+clearTextID+\"' , function:'\"+function+\"'\");\n    byte[] digest = generateHash(clearTextID, function);\n    //net.jxta.impl.id.UUID.PeerGroupID pg = (net.jxta.impl.id.UUID.PeerGroupID)parentPeerGroupID;\n    System.out.println(\"parentPeerGroupID:\"+parentPeerGroupID.getClass().getName());\n    net.jxta.peergroup.PeerGroupID peerGroupID = IDFactory.newPeerGroupID( parentPeerGroupID, digest );\n    //net.jxta.peergroup.PeerGroupID peerGroupID = new net.jxta.impl.id.UUID.PeerGroupID((net.jxta.impl.id.UUID.PeerGroupID)parentPeerGroupID,digest);\n    return peerGroupID;\n}", "path": "src\\java\\com\\idega\\cluster\\MD5ID.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/**\n * This thread loops forever discovering peers\n * every minute, and displaying the results.\n */\n", "func_signal": "public void run()", "code": "{\n    try {\n        // Add ourselves as a DiscoveryListener for DiscoveryResponse events\n        discovery.addDiscoveryListener(this);\n        while (true) {\n            System.out.println(\"Sending a Discovery Message\");\n            // look for any peer\n            discovery.getRemoteAdvertisements(null, DiscoveryService.PEER,\n                                              null, null, 5);\n            // wait a bit before sending next discovery message\n            try {\n                Thread.sleep(60 * 1000);\n            } catch(Exception e) {}\n\n        } //end while\n    } catch(Exception e) {\n        e.printStackTrace();\n    }\n}", "path": "src\\java\\com\\idega\\cluster\\DiscoveryDemo.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/**\n * by implementing DiscoveryListener we must define this method\n * to deal to discovery responses\n */\n", "func_signal": "public void discoveryEvent(DiscoveryEvent ev)", "code": "{\n\n    DiscoveryResponseMsg res = ev.getResponse();\n    String name = \"unknown\";\n\n    // Get the responding peer's advertisement\n    PeerAdvertisement peerAdv = res.getPeerAdvertisement();\n    // some peers may not respond with their peerAdv\n    if (peerAdv != null) { \n        name = peerAdv.getName();\n    }\n\n    System.out.println(\"Got a Discovery Response [\" +\n                       res.getResponseCount() + \" elements] from peer: \" +\n                       name);\n    //printout each discovered peer\n    PeerAdvertisement adv = null;\n    Enumeration en = res.getAdvertisements();\n    if (en != null ) {\n        while (en.hasMoreElements()) {\n            adv = (PeerAdvertisement) en.nextElement();\n            System.out.println (\" Peer name = \" + adv.getName());\n        }\n    }\n}", "path": "src\\java\\com\\idega\\cluster\\DiscoveryDemo.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/**\n *  the thread which creates (resolves) the output pipe\n *  and sends a message once it's resolved\n */\n", "func_signal": "public synchronized void run()", "code": "{\n    try {\n        // this step helps when running standalone (local sub-net without any redezvous setup)\n        discovery.getRemoteAdvertisements(null, DiscoveryService.ADV, null, null, 1, null);\n        // create output pipe with asynchronously\n        // Send out the first pipe resolve call\n        System.out.println(\"Attempting to create a OutputPipe\");\n        pipe.createOutputPipe(pipeAdv, this);\n        // send out a second pipe resolution after we connect\n        // to a rendezvous\n        if (!rendezvous.isConnectedToRendezVous()) {\n            System.out.println(\"Waiting for Rendezvous Connection\");\n            try {\n                wait();\n                System.out.println(\"Connected to Rendezvous, attempting to create a OutputPipe\");\n                pipe.createOutputPipe(pipeAdv, this);\n            } catch (InterruptedException e) {\n                // got our notification\n            }\n        }\n    } catch (IOException e) {\n        System.out.println(\"OutputPipe creation failure\");\n        e.printStackTrace();\n        System.exit(-1);\n    }\n}", "path": "src\\java\\com\\idega\\cluster\\PipeExample.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/**\n * Starts jxta\n *\n */\n", "func_signal": "private void startJxta()", "code": "{\n    try {\n        // create, and Start the default jxta NetPeerGroup\n        netPeerGroup = PeerGroupFactory.newNetPeerGroup();\n\n        // uncomment the following line if you want to start the app defined\n        // the NetPeerGroup Advertisement (by default it's the shell)\n        // at which case you must include jxtashell.jar in the classpath\n        // in this case we want use jxta directly.\n\n        // netPeerGroup.startApp(null);\n\n    }\n    catch (PeerGroupException e) {\n        // could not instantiate the group, print the stack and exit\n        System.out.println(\"fatal error : group creation failure\");\n        e.printStackTrace();\n        System.exit(1);\n    }\n\n    pipe = netPeerGroup.getPipeService();\n    System.out.println(\"Reading in pipexample.adv\");\n    try {\n    \tString path = System.getProperty(\"JXTA_HOME\");\n    \tFile jxtaHome = new File(path);\n    \tFile pipexampleAdv = new File(jxtaHome.getParentFile(), \"pipexample.adv\");\n    \tFileInputStream is = new FileInputStream(pipexampleAdv);\n        pipeAdv = (PipeAdvertisement) AdvertisementFactory.newAdvertisement(MimeMediaType.XMLUTF8, is);\n        is.close();\n    } catch (Exception e) {\n        System.out.println(\"failed to read/parse pipe advertisement\");\n        e.printStackTrace();\n        System.exit(-1);\n    }\n}", "path": "src\\java\\com\\idega\\cluster\\PipeListener.java", "repo_name": "idega/com.idega.cluster", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 188}
{"docstring": "/**\n * @return GeoLine from NorthEast to SouthEast\n */\n", "func_signal": "public GeoLine getEastGeoLine()", "code": "{\n\tif(this.mEastGeoLine == null) {\n\t\tthis.mEastGeoLine = new GeoLine(this.mLatNorthE6, this.mLonEastE6, this.mLatSouthE6, this.mLonEastE6);\n\t}\n\treturn this.mEastGeoLine;\n}", "path": "src\\org\\andnav2\\osm\\adt\\BoundingBoxE6.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "/**\n * @param coords to be used to construct the uri to the tile. <b>Example:</b> <code>[11187, 17171]</code> will result i.e. in <code>http://c.tile.openstreetmap.org/15/<b>17171/11187</b>.png</code>\n * @param zoomLevel used together with <code>coords</code> to determine the final url. <b>Example:</b> <code>15</code> will result i.e. in <code>http://c.tile.openstreetmap.org/<b>15</b>/17171/11187.png</code>\n * @param h the Handler to send a message to success or failure.\n * @return <code>false</code>, when MapTile is already pending for download or already existing on the FS. <code>false</code> otherwise.\n */\n", "func_signal": "public boolean preloadMaptileAsync(final OSMTileInfo aTileInfo, final Handler h)", "code": "{\n\tfinal String aRawTileURLString = this.mProviderInfo.getTileURLString(aTileInfo);\n\tfinal String aSaveableURLString = this.mProviderInfo.getSaveableTileURLString(aTileInfo, this.mFSTileCache.getStoragePolicy());\n\n\tif(this.mFSTileCache.exists(aRawTileURLString, aSaveableURLString)) {\n\t\treturn false;\n\t}\n\n\treturn this.mTileProvider.requestMapTileAsync(aTileInfo, aRawTileURLString, aSaveableURLString, h);\n}", "path": "src\\org\\andnav2\\osm\\views\\tiles\\OSMMapTileManager.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "// ===========================================================\n// Methods from SuperClass/Interfaces\n// ===========================================================\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\treturn new StringBuffer()\n\t.append(\"N:\").append(this.mLatNorthE6)\n\t.append(\"; E:\").append(this.mLonEastE6)\n\t.append(\"; S:\").append(this.mLatSouthE6)\n\t.append(\"; W:\").append(this.mLonWestE6)\n\t.toString();\n}", "path": "src\\org\\andnav2\\osm\\adt\\BoundingBoxE6.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "/**\n * Get a MapTile, based on <code>coords</code> and <code>zoomLevel</code>. Used the handler passed with the constructor, to inform of successful or failed loadings.\n * @param coords to be used to construct the uri to the tile. <b>Example:</b> <code>[11187, 17171]</code> will result i.e. in <code>http://c.tile.openstreetmap.org/15/<b>17171/11187</b>.png</code>\n * @param zoomLevel used together with <code>coords</code> to determine the final url. <b>Example:</b> <code>15</code> will result i.e. in <code>http://c.tile.openstreetmap.org/<b>15</b>/17171/11187.png</code>\n * @return Either: <ul><li><code>MAPTILE_DOWNLOADING</code> when the tile is currently being downloaded. </li><li><code>MAPTILE_LOADING</code> if the tile is currently being loaded from the FileSystem to the MemoryCache.</li><li> The actual bitmap if already was downloaded and loaded to the MemoryCache.</li></ul>\n */\n", "func_signal": "public Bitmap getMapTile(final OSMTileInfo aTileInfo)", "code": "{\n\tfinal String aSaveableTileURLString = this.mProviderInfo.getSaveableTileURLString(aTileInfo, this.mFSTileCache.getStoragePolicy());\n\n\tfinal Bitmap ret = this.mMemoryTileCache.getMapTile(aSaveableTileURLString);\n\tif(ret != null){\n\t\tif(DEBUGMODE) {\n\t\t\tLog.i(DEBUGTAG, \"MapTileCache succeded for: \" + aSaveableTileURLString);\n\t\t}\n\n\t\tif(ret.isRecycled()){\n\t\t\tthis.mMemoryTileCache.onRemoveRecycledBitmapFromMemoryCache(aSaveableTileURLString);\n\t\t}else{\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\tfinal String formattedTileURLStringDirty = aSaveableTileURLString + OSMMapTileMemoryCache.FLAG_DIRTY;\n\tfinal Bitmap retDirty = this.mMemoryTileCache.getMapTile(formattedTileURLStringDirty);\n\n\tfinal String aRawTileURLString = this.mProviderInfo.getTileURLString(aTileInfo);\n\n\tif(DEBUGMODE) {\n\t\tLog.i(DEBUGTAG, \"Cache failed, trying from FS.\");\n\t}\n\n\t/* Check if file is either being loaded from FS or is pending for download. */\n\tif(this.mFSTileCache.isPending(aSaveableTileURLString)){\n\t\tif(retDirty == null) {\n\t\t\treturn this.MAPTILE_LOADING;\n\t\t}\n\t}else if(this.mTileProvider.isPending(aRawTileURLString)){\n\t\tif(retDirty == null){\n\t\t\tswitch (this.mProviderInfo.PROVIDER_TYPE) {\n\t\t\t\tcase LOCAL_PROVIDER:\n\t\t\t\t\treturn this.MAPTILE_GENERATING;\n\t\t\t\tcase DOWNLOAD_PROVIDER:\n\t\t\t\tdefault:\n\t\t\t\t\treturn this.MAPTILE_DOWNLOADING;\n\t\t\t}\n\t\t}\n\t}\n\n\tfinal boolean existsInFSAndNowLoading = this.mFSTileCache.loadMapTileToMemCacheAsync(aTileInfo, aSaveableTileURLString, this.mLoadCallbackHandler);\n\tif(existsInFSAndNowLoading){\n\t\tif(retDirty == null) {\n\t\t\treturn this.MAPTILE_LOADING;\n\t\t}\n\t}else{\n\t\tif(DEBUGMODE) {\n\t\t\tLog.d(DEBUGTAG, \"File: '\" + aSaveableTileURLString + \"' not found in Filesystem\");\n\t\t}\n\n\t\t/* If possible, try to create a bitmap from the parent and put it to the memcache. */\n\t\tif(aTileInfo.zoom > 0 && retDirty == null && !this.mFSTileCache.isPending(formattedTileURLStringDirty)) {\n\t\t\tthis.mFSTileCache.tryLoadMapTileByParentToMemCacheAsync(aTileInfo, aSaveableTileURLString, this.mLoadCallbackHandler);\n\t\t}\n\t}\n\t/* FS did not contain the MapTile, we need to download it asynchronous. */\n\tif(DEBUGMODE) {\n\t\tLog.i(DEBUGTAG, \"Requesting Maptile for download.\");\n\t}\n\n\tthis.mTileProvider.requestMapTileAsync(aTileInfo, aRawTileURLString, aSaveableTileURLString, this.mLoadCallbackHandler);\n\tif(retDirty == null){\n\t\tswitch (this.mProviderInfo.PROVIDER_TYPE) {\n\t\t\tcase LOCAL_PROVIDER:\n\t\t\t\treturn this.MAPTILE_GENERATING;\n\t\t\tcase DOWNLOAD_PROVIDER:\n\t\t\tdefault:\n\t\t\t\treturn this.MAPTILE_DOWNLOADING;\n\t\t}\n\t}\n\n\treturn retDirty;\n}", "path": "src\\org\\andnav2\\osm\\views\\tiles\\OSMMapTileManager.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "// ===========================================================\n// Constructors\n// ===========================================================\n", "func_signal": "public OSMMapTileManager(final Context ctx, final OSMMapTileProviderInfo pProviderInfo, final Handler aLoadFinishedListener)", "code": "{\n\tthis.mCtx = ctx;\n\tthis.MAPTILE_LOADING = BitmapFactory.decodeResource(ctx.getResources(), R.drawable.maptile_loading);\n\tthis.MAPTILE_DOWNLOADING = BitmapFactory.decodeResource(ctx.getResources(), R.drawable.maptile_downloading);\n\tthis.MAPTILE_GENERATING = BitmapFactory.decodeResource(ctx.getResources(), R.drawable.maptile_generating);\n\tthis.mMemoryTileCache = new OSMMapTileMemoryCache();\n\ttry {\n\t\tthis.mFSTileCache = new OSMMapTileFilesystemCache(ctx, Preferences.getFilesystemCachePolicy(ctx), Preferences.getMaxCacheSizeUpperLimit(ctx) * 1024 * 1024, this.mMemoryTileCache, pProviderInfo);\n\t} catch (final ExternalStorageNotMountedException e) {\n\t\tToast.makeText(ctx, \"No external media attached, caching to internal ROM!\", Toast.LENGTH_LONG).show(); // TODO i18n\n\t\tLog.e(DEBUGTAG, \"StoragePolicy was EXTERNAL, but no External Media attached!\", e);\n\t\ttry {\n\t\t\tthis.mFSTileCache = new OSMMapTileFilesystemCache(ctx, StoragePolicy.INTERNALROM, Preferences.getMaxCacheSizeUpperLimit(ctx) * 1024 * 1024, this.mMemoryTileCache, pProviderInfo);\n\t\t} catch (final ExternalStorageNotMountedException e1) {\n\t\t\t// Can not happen!\n\t\t}\n\t}\n\n\tswitch (pProviderInfo.PROVIDER_TYPE) {\n\t\tcase LOCAL_PROVIDER:\n\t\t\tthis.mTileProvider = new OSMMapTileRenderProvider(ctx, pProviderInfo, this.mFSTileCache);\n\t\t\tbreak;\n\t\tcase DOWNLOAD_PROVIDER:\n\t\tdefault:\n\t\t\tthis.mTileProvider = new OSMMapTileDownloadProvider(ctx, pProviderInfo, this.mFSTileCache);\n\t\t\tbreak;\n\t}\n\n\tthis.mProviderInfo = pProviderInfo;\n\tthis.mLoadFinishedListenerHander = aLoadFinishedListener;\n}", "path": "src\\org\\andnav2\\osm\\views\\tiles\\OSMMapTileManager.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "// ===========================================================\n// Methods\n// ===========================================================\n", "func_signal": "protected void applyTopMenuButtonListeners()", "code": "{\n\t/* Set Listener for Back-Button. */\n\tnew OnClickOnFocusChangedListenerAdapter(this.findViewById(R.id.ibtn_sd_savedtracechooser_back)) {\n\t\t@Override\n\t\tpublic void onClicked(final View me) {\n\t\t\tif (SDSavedTraceChooser.super.mMenuVoiceEnabled) {\n\t\t\t\tMediaPlayer.create(SDSavedTraceChooser.this, R.raw.close).start();\n\t\t\t}\n\n\t\t\t/* Back one level. */\n\t\t\tSDSavedTraceChooser.this.setResult(SUBACTIVITY_RESULTCODE_UP_ONE_LEVEL);\n\t\t\tSDSavedTraceChooser.this.finish();\n\t\t}\n\t};\n\n\t/* Set Listener for Close-Button. */\n\tnew OnClickOnFocusChangedListenerAdapter(this.findViewById(R.id.ibtn_sd_savedtracechooser_close)) {\n\t\t@Override\n\t\tpublic void onClicked(final View me) {\n\t\t\tif (SDSavedTraceChooser.super.mMenuVoiceEnabled) {\n\t\t\t\tMediaPlayer.create(SDSavedTraceChooser.this, R.raw.close).start();\n\t\t\t}\n\t\t\t/*\n\t\t\t * Set ResultCode that the calling activity knows that we want\n\t\t\t * to go back to the Base-Menu\n\t\t\t */\n\t\t\tSDSavedTraceChooser.this.setResult(SUBACTIVITY_RESULTCODE_CHAINCLOSE_QUITTED);\n\t\t\tSDSavedTraceChooser.this.finish();\n\t\t}\n\t};\n}", "path": "src\\org\\andnav2\\ui\\sd\\SDSavedTraceChooser.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "// ===========================================================\n// Methods\n// ===========================================================\n", "func_signal": "protected void applyTopMenuButtonListeners()", "code": "{\n\t/* Set Listener for Close-Button. */\n\tnew OnClickOnFocusChangedListenerAdapter(this.findViewById(R.id.ibtn_settings_orsserver_close)) {\n\n\t\t@Override\n\t\tpublic void onBoth(final View me, final boolean focused) {\n\t\t\tif (focused && SettingsORSServer.super.mMenuVoiceEnabled) {\n\t\t\t\tMediaPlayer.create(SettingsORSServer.this, R.raw.close).start();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void onClicked(final View me) {\n\t\t\t/*\n\t\t\t * Set ResultCode that the calling activity knows that we want\n\t\t\t * to go back to the Base-Menu\n\t\t\t */\n\t\t\tSettingsORSServer.this.setResult(SUBACTIVITY_RESULTCODE_CHAINCLOSE_QUITTED);\n\t\t\tSettingsORSServer.this.finish();\n\t\t}\n\t};\n}", "path": "src\\org\\andnav2\\ui\\settings\\SettingsORSServer.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "/**\n * @return GeoLine from SouthEast to SouthWest\n */\n", "func_signal": "public GeoLine getSouthGeoLine()", "code": "{\n\tif(this.mSouthGeoLine == null) {\n\t\tthis.mSouthGeoLine = new GeoLine(this.mLatSouthE6, this.mLonEastE6, this.mLatSouthE6, this.mLonWestE6);\n\t}\n\treturn this.mSouthGeoLine;\n}", "path": "src\\org\\andnav2\\osm\\adt\\BoundingBoxE6.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "/**\n * @return GeoLine from NorthWest to NorthEast\n */\n", "func_signal": "public GeoLine getNorthLine()", "code": "{\n\tif(this.mNorthGeoLine == null) {\n\t\tthis.mNorthGeoLine = new GeoLine(this.mLatNorthE6, this.mLonWestE6, this.mLatNorthE6, this.mLonEastE6);\n\t}\n\treturn this.mNorthGeoLine;\n}", "path": "src\\org\\andnav2\\osm\\adt\\BoundingBoxE6.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "/**\n * @return GeoPoint center of this BoundingBox\n */\n", "func_signal": "public GeoPoint getCenter()", "code": "{\n\tif(this.mCenterGeoPoint == null) {\n\t\tthis.mCenterGeoPoint = new GeoPoint((this.mLatNorthE6 + this.mLatSouthE6) / 2, (this.mLonEastE6 + this.mLonWestE6) / 2);\n\t}\n\n\treturn this.mCenterGeoPoint;\n}", "path": "src\\org\\andnav2\\osm\\adt\\BoundingBoxE6.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "/**\n * \n */\n", "func_signal": "public OSMMapViewMarkerForFocus(\n\t\tfinal Drawable marker, \n\t\tfinal Point hotspot,\n\t\tfinal int backgroundColor)", "code": "{\n\tsuper(marker, hotspot);\n\tthis.mBackgroundColor = backgroundColor;\n//\t\tif(pFocusedBackgroundColor != NOT_SET) {\n//\t\t\tthis.mMarkerFocusedBackgroundColor = mMarkerFocusedBase.getBackgroundColor();\n//\t\t\tpFocusedBackgroundColor;\n//\t\t} else {\n//\t\t\tthis.mMarkerFocusedBackgroundColor = DEFAULTMARKER_BACKGROUNDCOLOR;\n//\t\t}\n}", "path": "src\\org\\andnav2\\osm\\views\\overlay\\OSMMapViewMarkerForFocus.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(final Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState, false);\n\tPreferences.applySharedSettings(this);\n\tthis.setContentView(R.layout.settings_orsserver);\n\n\t/*\n\t * Save the Extras Bundle of the Intent this Activity was created with,\n\t * because it contains the Information, that will finally be used for a\n\t * GeoCode API.\n\t */\n\tthis.bundleCreatedWith = this.getIntent().getExtras();\n\tthis.mServerList = (ListView) this.findViewById(R.id.list_orsservers);\n\n\tfinal TextView empty = new TextView(this);\n\tempty.setText(R.string.list_empty);\n\tthis.mServerList.setEmptyView(empty);\n\n\tthis.applyTopMenuButtonListeners();\n\n\tinitListView();\n\n\tif(savedInstanceState == null){ // First start\n\t\tupdateServerListItems();\n\t\tsetServerAdapter();\n\t}\n}", "path": "src\\org\\andnav2\\ui\\settings\\SettingsORSServer.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "/**\n * @param ctx Needed to get i18n Strings like \"Streetnumber\".\n */\n", "func_signal": "public String toString(final Context ctx, final UnitSystem aUs, final boolean addDistanceOrAccuracy)", "code": "{\n\tfinal StringBuilder sb = new StringBuilder();\n\n\tif(this.mStreetNumber != null && this.mStreetNumber.length() > 0) {\n\t\tsb.append(ctx.getString(R.string.wherami_dialog_streetnumber)).append(' ').append(this.mStreetNumber).append('\\n');\n\t}\n\n\tif(this.mStreetNameOfficial != null && this.mStreetNameOfficial.length() > 0) {\n\t\tsb.append(ctx.getString(R.string.wherami_dialog_streetname)).append(' ').append(this.mStreetNameOfficial).append('\\n');\n\t}\n\n\tif(this.mMunicipality != null && this.mMunicipality.length() > 0) {\n\t\tsb.append(ctx.getString(R.string.wherami_dialog_cityname)).append(' ').append(this.mMunicipality).append('\\n');\n\t}\n\n\tif(this.mPostalCode != null && this.mPostalCode.length() > 0) {\n\t\tsb.append(ctx.getString(R.string.wherami_dialog_zipcode)).append(' ').append(this.mPostalCode).append('\\n');\n\t}\n\n\tif(this.mCountrySubdivision != null && this.mCountrySubdivision.length() > 0) {\n\t\tsb.append(ctx.getString(R.string.wherami_dialog_adminarea)).append(' ').append(this.mCountrySubdivision).append('\\n');\n\t}\n\n\tif(this.mNationality != null) {\n\t\tsb.append(ctx.getString(R.string.wherami_dialog_country)).append(' ').append(ctx.getString(this.mNationality.NAMERESID)).append('\\n');\n\t}\n\n\tif(aUs != null && addDistanceOrAccuracy){\n\t\tfinal String[] distStringParts = aUs.getDistanceString((int)this.mAccuracy, null);\n\t\tfinal String formattedDistance = distStringParts[UnitSystem.DISTSTRINGS_DIST_ID] + distStringParts[UnitSystem.DISTSTRINGS_UNIT_ID];\n\n\t\tsb.append(ctx.getString(R.string.wherami_dialog_distance)).append(' ').append(formattedDistance).append('\\n');\n\t}\n\n\ttry{\n\t\tfinal double lat = this.mLatitudeE6 / 1E6;\n\t\tfinal double lon = this.mLongitudeE6 / 1E6;\n\t\tsb.append('\\n');\n\t\tsb.append(ctx.getString(R.string.latitude)).append(\": \").append(lat).append('\\n');\n\t\tsb.append(ctx.getString(R.string.longitude)).append(\": \").append(lon);\n\t}catch(final IllegalStateException ise){ }\n\n\tif(sb.charAt(sb.length() - 1) == '\\n') {\n\t\tsb.setLength(sb.length() - 1);\n\t}\n\treturn sb.toString();\n}", "path": "src\\org\\andnav2\\sys\\ors\\adt\\GeocodedAddress.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "/**\n * Changes the ProviderInfo of the underlying Provider and the caches.\n */\n", "func_signal": "public void setProviderInfo(final OSMMapTileProviderInfo pProviderInfo)", "code": "{\n\tif(pProviderInfo == this.mProviderInfo) {\n\t\treturn;\n\t}\n\n\tif(this.mProviderInfo.PROVIDER_TYPE == pProviderInfo.PROVIDER_TYPE){\n\t\tthis.mTileProvider.setProviderInfo(pProviderInfo);\n\t}else{ /* PROVIDER_TYPE of the Provider has changed! */\n\t\tswitch (pProviderInfo.PROVIDER_TYPE) {\n\t\t\tcase LOCAL_PROVIDER:\n\t\t\t\tthis.mTileProvider = new OSMMapTileRenderProvider(this.mCtx, pProviderInfo, this.mFSTileCache);\n\t\t\t\tbreak;\n\t\t\tcase DOWNLOAD_PROVIDER:\n\t\t\tdefault:\n\t\t\t\tthis.mTileProvider = new OSMMapTileDownloadProvider(this.mCtx, pProviderInfo, this.mFSTileCache);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tthis.mFSTileCache.setProviderInfo(pProviderInfo);\n\tthis.mProviderInfo = pProviderInfo;\n}", "path": "src\\org\\andnav2\\osm\\views\\tiles\\OSMMapTileManager.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "// ===========================================================\n// FastScrollView-Methods\n// ===========================================================\n", "func_signal": "public int getPositionForSection(final int section)", "code": "{\n\n\tfinal String firstChar = this.mAlphabet[section];\n\n\t/* Find the index, of the firstchar within the Contact-Items */\n\tint position = Collections.binarySearch(this.mItems, new SavedTraceItem(firstChar));\n\n\tif(position < 0){\n\t\t/* Negative result means the insertion-point.\n\t\t * See definition of Collections.binarySearch */\n\t\tposition = -(position + 1);\n\t}\n\n\treturn position;\n}", "path": "src\\org\\andnav2\\ui\\sd\\SDSavedTraceChooser.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(final Bundle icicle)", "code": "{\n\tsuper.onCreate(icicle, true); // We need DataState-Info\n\tPreferences.applySharedSettings(this);\n\tthis.setContentView(R.layout.sd_savedtracechooser);\n\n\tthis.bundleCreatedWith = this.getIntent().getExtras();\n\n\tthis.mSavedTracesList = (ListView)this.findViewById(R.id.list_savedtraces);\n\n\t/* Set empty view for the list. */\n\tfinal TextView empty = new TextView(this);\n\tempty.setText(R.string.list_empty);\n\tthis.mSavedTracesList.setEmptyView(empty);\n\n\tif(!android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n\t\t/* Should not happen as the activity is not selectable in SDMainChoose, when no external media is inserted. */\n\t}else{\n\t\tEXTERNAL_STORAGE_BASEDIRECTORY = Util.getAndNavExternalStoragePath();\n\n\t\t// Ensure the traces-directory exists.\n\t\tnew File(EXTERNAL_STORAGE_BASEDIRECTORY + SDCARD_SAVEDTRACES_PATH).mkdirs();\n\n\t\tinitListView();\n\n\t\tupdateTraceListItems();\n\t}\n\n\tapplyTopMenuButtonListeners();\n}", "path": "src\\org\\andnav2\\ui\\sd\\SDSavedTraceChooser.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "// ===========================================================\n// Constructors\n// ===========================================================\n", "func_signal": "public BoundingBoxE6(final int northE6, final int eastE6, final int southE6, final int westE6)", "code": "{\n\tthis.mLatNorthE6 = northE6;\n\tthis.mLatSouthE6 = southE6;\n\tthis.mLonWestE6 = westE6;\n\tthis.mLonEastE6 = eastE6;\n}", "path": "src\\org\\andnav2\\osm\\adt\\BoundingBoxE6.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "/**\n * \n * @param aLatitude\n * @param aLongitude\n * @param reuse\n * @return relative position determined from the upper left corner.<br />\n * {0,0} would be the upper left corner.\n * {1,1} would be the lower right corner.\n * {1,0} would be the lower left corner.\n * {0,1} would be the upper right corner.\n */\n", "func_signal": "public float[] getRelativePositionOfGeoPointInBoundingBoxWithLinearInterpolation(final int aLatitude, final int aLongitude, final float[] reuse)", "code": "{\n\tfinal float[] out = (reuse != null) ? reuse : new float[2];\n\tout[Y] = ((float)(this.mLatNorthE6 - aLatitude) / getLatitudeSpanE6());\n\tout[X] = 1 - ((float)(this.mLonEastE6 - aLongitude) / getLongitudeSpanE6());\n\treturn out;\n}", "path": "src\\org\\andnav2\\osm\\adt\\BoundingBoxE6.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "/**\n * @return GeoLine from SouthWest to NorthWest\n */\n", "func_signal": "public GeoLine getWestGeoLine()", "code": "{\n\tif(this.mWestGeoLine == null) {\n\t\tthis.mWestGeoLine = new GeoLine(this.mLatSouthE6, this.mLonWestE6, this.mLatNorthE6, this.mLonWestE6);\n\t}\n\treturn this.mWestGeoLine;\n}", "path": "src\\org\\andnav2\\osm\\adt\\BoundingBoxE6.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "// ===========================================================\n// Methods from SuperClass/Interfaces\n// ===========================================================\n", "func_signal": "@Override\nprotected Dialog onCreateDialog(final int id)", "code": "{\n\tswitch(id){\n\t\tcase DIALOG_RENAMESELECTEDTRACE_ID:\n\t\t\treturn CommonDialogFactory.createInputDialog(this, R.string.dlg_sd_savedtracechooser_contextmenu_rename_hint, new CommonCallbackAdapter<String>(){\n\t\t\t\t@Override\n\t\t\t\tpublic void onSuccess(final String result) {\n\t\t\t\t\tfinal String oldFilename = SDSavedTraceChooser.this.mSelectedSavedTrace.mFileName;\n\n\t\t\t\t\tif(result != null){\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tfinal boolean success = new File(EXTERNAL_STORAGE_BASEDIRECTORY + SDCARD_SAVEDTRACES_PATH + oldFilename).renameTo(new File(EXTERNAL_STORAGE_BASEDIRECTORY + SDCARD_SAVEDTRACES_PATH + result));\n\n\t\t\t\t\t\t\tif(success){\n\t\t\t\t\t\t\t\tupdateTraceListItems();\n\t\t\t\t\t\t\t\tToast.makeText(SDSavedTraceChooser.this, R.string.dlg_sd_savedtracechooser_contextmenu_rename_success, Toast.LENGTH_LONG).show();\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tToast.makeText(SDSavedTraceChooser.this, R.string.dlg_sd_savedtracechooser_contextmenu_rename_fail, Toast.LENGTH_LONG).show();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}catch(final Throwable t){\n\t\t\t\t\t\t\tToast.makeText(SDSavedTraceChooser.this, R.string.dlg_sd_savedtracechooser_contextmenu_rename_fail, Toast.LENGTH_LONG).show();\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tToast.makeText(SDSavedTraceChooser.this, R.string.dlg_sd_savedtracechooser_contextmenu_rename_fail, Toast.LENGTH_LONG).show();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\tcase DIALOG_SHOWSELECTEDTRACEOPTIONS_ID:\n\t\t\treturn CommonDialogFactory.createSavedTraceSelectionOptions(this, new CommonCallbackAdapter<CreateSavedTraceSelectionOptions>(){\n\t\t\t\t@Override\n\t\t\t\tpublic void onSuccess(final CreateSavedTraceSelectionOptions result) {\n\t\t\t\t\tfinal String filename = SDSavedTraceChooser.this.mSelectedSavedTrace.mFileName;\n\n\t\t\t\t\tswitch(result){\n\t\t\t\t\t\tcase SHARE_TRAILMAPPING:\n\n\t\t\t\t\t\t\t/* TODO Trace-Sharing */\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase INFORMATION:\n\t\t\t\t\t\t\t/* TODO Extract Information from Trace, like number of points, etc... */\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase RENAME:\n\t\t\t\t\t\t\tshowDialog(DIALOG_RENAMESELECTEDTRACE_ID);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase USE:\n\t\t\t\t\t\t\t/* Proceed to next screen. */\n\t\t\t\t\t\t\t// TODO advance to WhereAmI\n\t\t\t\t\t\t\tfinal int mode = SDSavedTraceChooser.this.bundleCreatedWith.getInt(MODE_SD);\n\t\t\t\t\t\t\tswitch(mode){\n\t\t\t\t\t\t\t\tcase MODE_SD_DESTINATION:\n\t\t\t\t\t\t\t\t\tfinal Intent directIntent = new Intent(SDSavedTraceChooser.this, OpenStreetDDMap.class);\n\t\t\t\t\t\t\t\t\tfinal Bundle b = new Bundle();\n\t\t\t\t\t\t\t\t\tb.putInt(EXTRAS_MODE, EXTRAS_MODE_LOAD_SAVED_ROUTE);\n\n\t\t\t\t\t\t\t\t\tb.putString(EXTRAS_SAVED_ROUTE_FILENAME_ID, filename);\n\n\t\t\t\t\t\t\t\t\tdirectIntent.putExtras(b);\n\t\t\t\t\t\t\t\t\tSDSavedTraceChooser.this.startActivityForResult(directIntent, REQUESTCODE_DDMAP);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase MODE_SD_RESOLVE:\n\t\t\t\t\t\t\t\tcase MODE_SD_SETHOME:\n\t\t\t\t\t\t\t\tcase MODE_SD_WAYPOINT:\n\t\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Only MODE_SD_DESTINATION is possible.\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}", "path": "src\\org\\andnav2\\ui\\sd\\SDSavedTraceChooser.java", "repo_name": "phreed/AndNav2", "stars": 5, "license": "None", "language": "java", "size": 33844}
{"docstring": "//--------------- Cache Methods --------------------//\n  /**\n   * Returns the image portion that this regeion represents scaled to the given size.\n   *\n   * @param width The target width\n   * @param height The target height\n   * @return A thumbnail of the image this region represents.\n   */\n", "func_signal": "public BufferedImage toThumbnail(String path, int width, int height)", "code": "{\n    thumbnail = new BufferedImage(width, height, Constants.THUMBNAIL_IMAGETYPE);\n    Graphics2D graphics = (Graphics2D) thumbnail.getGraphics();\n    BufferedImage file = null;\n    try {\n      file = ImageIO.read(new File(image));\n    } catch (IOException io) {\n      System.out.println(\"Could not read '\" + image + \"': \" + io.getMessage());\n      return null;\n    }\n    // scale to fit size\n    double scaleX = (double)width / (double) this.width;\n    double scaleY = (double)height / (double) this.height;\n    graphics.scale(scaleX, scaleY);\n    \n    // We are never rotated\n    // center rotation point on region and rotate\n    // graphics.translate(Math.round((double)getWidth()/2),Math.round((double)getHeight()/2));\n    // graphics.rotate(Math.toRadians(angle));\n    \n    graphics.drawImage(file,-x,-y,null);\n\n    return thumbnail;\n}", "path": "src\\faint\\Region.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "// For testing\n", "func_signal": "public static void main(String[] args)", "code": "{\n  OpenCV detector = new OpenCV();\n  Region[] faces = detector.detectFaces(args[0]);\n  if (faces != null) {\n    for (int i=0; i<faces.length; i++) {\n      Region region = faces[i];\n      System.out.println(\"Found region: \" + region.toString());      \n    }     \n  }\n}", "path": "src\\faint\\OpenCV.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/**\n * Constructor that builds up the matrix and calculates\n * the Eigenvalues and Vectors internally.\n * \n * @param vectors\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")        \npublic CovarianceMatrix(short[][] vectors)", "code": "{\n\t\n\tint vectorLength = vectors[0].length;\n\tdimension = vectors.length;\n\t\n\t// build \"small\" matrix\n\t// FIXME: if (vectors.length > lenght of single vector) then the small matrix will be the bigger one!\n\tsmallMatrix = new double[dimension][dimension];\n\tfor (int rowIndex = 0; rowIndex < smallMatrix.length; rowIndex++){\n\t\t\n\t\tfor (int colIndex=0; colIndex < rowIndex+1; colIndex++){\n\t\t\t\n\t\t\t// calculate element\n\t\t\tsmallMatrix[rowIndex][colIndex] = 0;\n\t\t\tfor(int i = 0; i<vectorLength; i++){\n\t\t\t\tsmallMatrix[rowIndex][colIndex] += vectors[rowIndex][i] * vectors[colIndex][i];\n\t\t\t}\n\t\t\t\n\t\t\t// set same value for mirrored element (matrix is symmetrical)\n\t\t\tsmallMatrix[colIndex][rowIndex] = smallMatrix[rowIndex][colIndex];\n\t\t}\n\t}\n\t\n\t// tridiagonalize small matrix\n\tthis.tridiagonalize();\n\t\n\t// perform QL algorithm to find eigenvectors of small matrix\n\tthis.performQLalgorithm();\n\t\n\t/*\n\t * Note: From here on the eigenvectors are stored in the COLUMNS of the small matrix!\n\t * \n\t * Uncomment this example to print all elements of eigenvector e:\n\t * \n\t * int e = 0;\n\t * for (int j = 0; j < smallMatrix.length; j++)\n\t *   System.out.println(smallMatrix[0][e]);\n\t * \n\t */\n\t\n\t// build eigenvalues of big matrix\n\tArrayList<EigenValueAndVector> tempList = new ArrayList<EigenValueAndVector>(dimension);\n\tfor (int i = 0; i< dimension; i++){\n\t\t\n\t\tdouble[] eigenVector = new double[vectorLength];\n\t\tdouble length = 0;\n\t\t\n\t\t// calculate eigenvector\n\t\tfor (int j = 0; j<vectorLength; j++){\n\t\t\tdouble value = 0;\n\t\t\tfor (int k = 0; k < vectors.length; k++){\n\t\t\t\tvalue += (vectors[k][j]) * (smallMatrix[k][i]);\n\t\t\t}\n\t\t\teigenVector[j] = value;\n\t\t\tlength += value * value;\n\t\t}\n\t\tlength = Math.sqrt(length);\n\t\t\n\t\t// normalize eigenvector (divide it by its length)\n\t\tfor (int j = 0; j< eigenVector.length; j++){\n\t\t\teigenVector[j]/=length;\n\t\t}\n\t\t\n\t\t// store results in list\n\t\tEigenValueAndVector evv = new EigenValueAndVector();\n\t\tevv.eigenVector = eigenVector;\n\t\tevv.eigenValue = eig[i]; // eigenvalues stays the same for big matrix\n\t\ttempList.add(evv);\n\t}\n\t\n\n\t/*\n\t * Uncomment this to check if the eigenvalues are correct.\n\t * \n\tdouble[][] tempVectors = new double[tempList.size()][vectorLength];\t\t\n\tfor (int i = 0; i < vectorLength; i++){\n\t\tfor (int j = 0; j< vectorLength; j++){\n\t\t\t\n\t\t\tdouble matrixElement = getBigMatrixElement(i, j, vectors);\n\t\t\t\n\t\t\tfor (int k = 0; k < dimension; k++){\n\t\t\t\ttempVectors[k][i] +=  matrixElement * tempList.get(k).eigenVector[j];\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < tempList.size(); i++){\t\t\t\n\t\tint element = -1;\n\t\tloop: for (int j = 0; j < tempList.size(); j++){\n\t\t\tif (tempVectors[i][j] != 0){\n\t\t\t\telement = j;\n\t\t\t\tSystem.err.println(eig[i] + \" ?= \"+tempVectors[i][element] / tempList.get(i).eigenVector[element]);\n\t\t\t\tbreak loop;\n\t\t\t}\n\t\t}\n\t\ttempList.get(i).eigenValue = tempVectors[i][element] / tempList.get(i).eigenVector[element];\t\t\t\n\t}\n\t*/\n\t\n\t// Sort Eigenvectors by their eigenvalues\n\tCollections.sort(tempList);\n\t\n\t// Store Eigenvalues and corresponding Eigenvectors\n\teigenValueAndVectors = new EigenValueAndVector[dimension];\n\ttempList.toArray(eigenValueAndVectors);\n}", "path": "src\\faint\\CovarianceMatrix.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/**\n * Symmetric tridiagonal QL algorithm as used in JAMA Package.\n */\n", "func_signal": "private void performQLalgorithm ()", "code": "{\n\t\n\t//  This is derived from the Algol procedures tql2, by\n\t//  Bowdler, Martin, Reinsch, and Wilkinson, Handbook for\n\t//  Auto. Comp., Vol.ii-Linear Algebra, and the corresponding\n\t//  Fortran subroutine in EISPACK.\n\t\n\tfor (int i = 1; i < dimension; i++) {\n\t\te[i-1] = e[i];\n\t}\n\te[dimension-1] = 0.0;\n\t\n\tdouble f = 0.0;\n\tdouble tst1 = 0.0;\n\tdouble eps = Math.pow(2.0,-52.0);\n\tfor (int l = 0; l < dimension; l++) {\n\t\t\n\t\t// Find small subdiagonal element\n\t\t\n\t\ttst1 = Math.max(tst1,Math.abs(eig[l]) + Math.abs(e[l]));\n\t\tint m = l;\n\t\twhile (m < dimension) {\n\t\t\tif (Math.abs(e[m]) <= eps*tst1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tm++;\n\t\t}\n\t\t\n\t\t// If m == l, d[l] is an eigenvalue,\n\t\t// otherwise, iterate.\n\t\t\n\t\tif (m > l) {\n\t\t\tint iter = 0;\n\t\t\tdo {\n\t\t\t\titer = iter + 1;  // (Could check iteration count here.)\n\t\t\t\t\n\t\t\t\t// Compute implicit shift\n\t\t\t\t\n\t\t\t\tdouble g = eig[l];\n\t\t\t\tdouble p = (eig[l+1] - g) / (2.0 * e[l]);\n\t\t\t\tdouble r = hypot(p,1.0);\n\t\t\t\tif (p < 0) {\n\t\t\t\t\tr = -r;\n\t\t\t\t}\n\t\t\t\teig[l] = e[l] / (p + r);\n\t\t\t\teig[l+1] = e[l] * (p + r);\n\t\t\t\tdouble dl1 = eig[l+1];\n\t\t\t\tdouble h = g - eig[l];\n\t\t\t\tfor (int i = l+2; i < dimension; i++) {\n\t\t\t\t\teig[i] -= h;\n\t\t\t\t}\n\t\t\t\tf = f + h;\n\t\t\t\t\n\t\t\t\t// Implicit QL transformation.\n\t\t\t\t\n\t\t\t\tp = eig[m];\n\t\t\t\tdouble c = 1.0;\n\t\t\t\tdouble c2 = c;\n\t\t\t\tdouble c3 = c;\n\t\t\t\tdouble el1 = e[l+1];\n\t\t\t\tdouble s = 0.0;\n\t\t\t\tdouble s2 = 0.0;\n\t\t\t\tfor (int i = m-1; i >= l; i--) {\n\t\t\t\t\tc3 = c2;\n\t\t\t\t\tc2 = c;\n\t\t\t\t\ts2 = s;\n\t\t\t\t\tg = c * e[i];\n\t\t\t\t\th = c * p;\n\t\t\t\t\tr = hypot(p,e[i]);\n\t\t\t\t\te[i+1] = s * r;\n\t\t\t\t\ts = e[i] / r;\n\t\t\t\t\tc = p / r;\n\t\t\t\t\tp = c * eig[i] - s * g;\n\t\t\t\t\teig[i+1] = h + s * (c * g + s * eig[i]);\n\t\t\t\t\t\n\t\t\t\t\t// Accumulate transformation.\n\t\t\t\t\t\n\t\t\t\t\tfor (int k = 0; k < dimension; k++) {\n\t\t\t\t\t\th = smallMatrix[k][i+1];\n\t\t\t\t\t\tsmallMatrix[k][i+1] = s * smallMatrix[k][i] + c * h;\n\t\t\t\t\t\tsmallMatrix[k][i] = c * smallMatrix[k][i] - s * h;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tp = -s * s2 * c3 * el1 * e[l] / dl1;\n\t\t\t\te[l] = s * p;\n\t\t\t\teig[l] = c * p;\n\t\t\t\t\n\t\t\t\t// Check for convergence.\n\t\t\t\t\n\t\t\t} while (Math.abs(e[l]) > eps*tst1);\n\t\t}\n\t\teig[l] = eig[l] + f;\n\t\te[l] = 0.0;\n\t}\n\t\n\t// Sort eigenvalues and corresponding vectors.\n\t\n\tfor (int i = 0; i < dimension-1; i++) {\n\t\tint k = i;\n\t\tdouble p = eig[i];\n\t\tfor (int j = i+1; j < dimension; j++) {\n\t\t\tif (eig[j] < p) {\n\t\t\t\tk = j;\n\t\t\t\tp = eig[j];\n\t\t\t}\n\t\t}\n\t\tif (k != i) {\n\t\t\teig[k] = eig[i];\n\t\t\teig[i] = p;\n\t\t\tfor (int j = 0; j < dimension; j++) {\n\t\t\t\tp = smallMatrix[j][i];\n\t\t\t\tsmallMatrix[j][i] = smallMatrix[j][k];\n\t\t\t\tsmallMatrix[j][k] = p;\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\faint\\CovarianceMatrix.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/**\n * Deletes the cached thumbnail file for this region from disk.\n */\n", "func_signal": "public void deleteCachedFile(String path)", "code": "{\n\t\tif (cachedFile!=null){\n\t\t\tFile file = new File(path + File.separator + cachedFile);\n\t\t\tfile.delete();\n\t\t\tcachedFile = null;\n\t\t}\n\t}", "path": "src\\faint\\Region.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/**\n * Calculates a new set of Eigenfaces and then replaces the old set.\n *\n */\n", "func_signal": "public void updateEigenfaces()", "code": "{\n\t\n\tRegion[] knownFaces = db.getTrainingImages();\n\tint numTrainingImages = knownFaces.length;\n\n    System.out.println(\"Number of known faces: \" + knownFaces.length);\n    \t\t\n\tInteger step = this.rebuildFaceSpace;\n\tif ((step == null && Math.abs(numTrainingImages - this.lastNumberOfTrainingImages) > 0) ||\n\t\t(step != null && Math.abs(numTrainingImages - this.lastNumberOfTrainingImages) > step))\n\t{\n\t\tif (knownFaces.length > 0) {\t\t\t\t\n\t\t\tdouble factor = 1.0/knownFaces.length;\n\t\t\tbyte[] averageFace = new byte[this.VECTORLENGTH];\n\t\t\tdouble[] tempAverageFace = new double[this.VECTORLENGTH];\n\t\t\tbyte[][] faceVectors = new byte[knownFaces.length][];\n\t\t\t\n\t\t\t// convert all thumbnails to intensity images and calculate average face\n\t\t\tfor(int r = 0; r < knownFaces.length; r++){\n\t\t\t\tbyte[] intensityImage = Utilities.bufferedImageToIntensityArray(knownFaces[r].toThumbnail(this.path, Constants.FACE_THUMBNAIL_SIZE));\n\t\t\t\tfor (int i = 0; i< tempAverageFace.length; i++){\n\t\t\t\t\ttempAverageFace[i] += ((double) (intensityImage[i] & 0xFF)) * factor;\n\t\t\t\t}\n\t\t\t\tfaceVectors[r] = intensityImage;\n\t\t\t}\n\t\t\t\n\t\t\t// convert average face to byte array\n\t\t\tfor (int i = 0; i < tempAverageFace.length; i++){\n\t\t\t\taverageFace[i] = (byte) (Math.round(tempAverageFace[i]));\n\t\t\t}\n\n\t\t\t// calculate distances of all intensity images to average face\n\t\t\tshort[][] distances = new short[faceVectors.length][this.VECTORLENGTH];\n\t\t\tfor (int i = 0; i<faceVectors.length; i++){\n\t\t\t\tfor(int j = 0; j < this.VECTORLENGTH; j++){\n\t\t\t\t\tdistances[i][j] = (short) ((short)(faceVectors[i][j]  & 0xFF) - (short)(averageFace[j]  & 0xFF));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// build up covariance matrix for Eigenvector calculation\n\t\t\tCovarianceMatrix matrix = new CovarianceMatrix(distances);\n\t\t\t\n\t\t\t// calculate and store Eigenfaces\n\t\t\tArrayList<double[]> eigenFaces = new ArrayList<double[]>();\n\t\t\tint numEigenfaces = distances.length;\n\t\t\tif (this.maxEigenfaces != null && this.maxEigenfaces < numEigenfaces)\n\t\t\t\tnumEigenfaces = this.maxEigenfaces;\n\t\t\t\n\t\t\tfor (int i = 0; i< numEigenfaces; i++){\n\n\t\t\t\teigenFaces.add(matrix.getEigenVector(i));\n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\t * Umcomment this to view all eigenfaces in separate frames\n\t\t\t\t *\n\t\t\t\t * byte [] ef = Utilities.spreadGreyValues(eigenFaces.get(i));\n\t\t\t\t * BufferedImage recoFaceImage = Utilities.intensityArrayToBufferedImage(ef, Constants.FACE_THUMBNAIL_SIZE);\n\t\t\t\t * Utilities.showImageInFrame(recoFaceImage,i+\"\");\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\t \t\t\t\t\t\n\t\t\t}\n\t\t\t\n        this.lastNumberOfTrainingImages = numTrainingImages;\n        this.averageFace = averageFace;\n        this.eigenFaces = eigenFaces;\n\t\t}\n\t}\n}", "path": "src\\faint\\EigenfaceRecognition.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "// Private constructor  \t\n", "func_signal": "private Manager()", "code": "{\n\t\t// try to load database from disk\n\t\tSystem.out.println(\"Preparing face database...\");\n\t\ttry {\n\t\t\tfaceDB = FaceDatabase.recoverFromDisk(path); \n\t\t}catch(IOException ex){\n\t\t\tfaceDB = new FaceDatabase();\n\t\t}\t\t\n\t}", "path": "src\\faint\\Manager.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/* \n * Primary cli entry points. This code is seriously ugly, but I was trying to\n * to keep this section as straight-forward as possible.\n *\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n  String usage =  \"Usage: {detect|train|recognize} </path/to/image> [options]\";\n  if (\"detect\".equals(args[0])) {\n    detect(args);\n  } else if (\"train\".equals(args[0])) {\n    train(args);\n  } else if (\"recognize\".equals(args[0])) {\n    recognize(args);   \n  } else {\n    System.out.println(usage);\n    return;\n  }    \n}", "path": "src\\faint\\Manager.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Comparable#compareTo(T)\n */\n", "func_signal": "public int compareTo(Object o)", "code": "{\n\tEigenValueAndVector that = (EigenValueAndVector) o;\n\tif (this.eigenValue < that.eigenValue) return 1;\n\tif (this.eigenValue > that.eigenValue) return -1;\n\treturn 0;\n}", "path": "src\\faint\\CovarianceMatrix.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "// Currently not used\n", "func_signal": "public Region getRegionAtPoint(Point point, FaceDatabase db)", "code": "{\t\t\n\t\t// test if the point lays inside of one of the regions\n\t\tfor (Region region : db.getRegionsForImage(file.toString()))\n\t\t\tif (region.containsPoint(point))\n\t\t\t\treturn region;\n\n\t\t// return null if no region contains the given point\n\t\treturn null;\t\t\n\t}", "path": "src\\faint\\ImageModel.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/**\n *  Symmetric Householder reduction to tridiagonal form as\n *  used in JAMA Package.\n */\n", "func_signal": "private void tridiagonalize()", "code": "{\n\t\n\teig = new double[dimension];\n\te = new double[dimension];\n\t\n\t//  This is derived from the Algol procedures tred2 by\n\t//  Bowdler, Martin, Reinsch, and Wilkinson, Handbook for\n\t//  Auto. Comp., Vol.ii-Linear Algebra, and the corresponding\n\t//  Fortran subroutine in EISPACK.\n\t\n\t\n\tfor (int j = 0; j < dimension; j++) {\n\t\teig[j] = smallMatrix[dimension-1][j];\n\t}\n\t\n\t// Householder reduction to tridiagonal form.\n\t\n\tfor (int i = dimension-1; i > 0; i--) {\n\t\t\n\t\t// Scale to avoid under/overflow.\n\t\t\n\t\tdouble scale = 0.0;\n\t\tdouble h = 0.0;\n\t\tfor (int k = 0; k < i; k++) {\n\t\t\tscale = scale + Math.abs(eig[k]);\n\t\t}\n\t\tif (scale == 0.0) {\n\t\t\te[i] = eig[i-1];\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\teig[j] = smallMatrix[i-1][j];\n\t\t\t\tsmallMatrix[i][j] = 0.0;\n\t\t\t\tsmallMatrix[j][i] = 0.0;\n\t\t\t}\n\t\t} else {\n\t\t\t\n\t\t\t// Generate Householder vector.\n\t\t\t\n\t\t\tfor (int k = 0; k < i; k++) {\n\t\t\t\teig[k] /= scale;\n\t\t\t\th += eig[k] * eig[k];\n\t\t\t}\n\t\t\tdouble f = eig[i-1];\n\t\t\tdouble g = Math.sqrt(h);\n\t\t\tif (f > 0) {\n\t\t\t\tg = -g;\n\t\t\t}\n\t\t\te[i] = scale * g;\n\t\t\th = h - f * g;\n\t\t\teig[i-1] = f - g;\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\te[j] = 0.0;\n\t\t\t}\n\t\t\t\n\t\t\t// Apply similarity transformation to remaining columns.\n\t\t\t\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tf = eig[j];\n\t\t\t\tsmallMatrix[j][i] = f;\n\t\t\t\tg = e[j] + smallMatrix[j][j] * f;\n\t\t\t\tfor (int k = j+1; k <= i-1; k++) {\n\t\t\t\t\tg += smallMatrix[k][j] * eig[k];\n\t\t\t\t\te[k] += smallMatrix[k][j] * f;\n\t\t\t\t}\n\t\t\t\te[j] = g;\n\t\t\t}\n\t\t\tf = 0.0;\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\te[j] /= h;\n\t\t\t\tf += e[j] * eig[j];\n\t\t\t}\n\t\t\tdouble hh = f / (h + h);\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\te[j] -= hh * eig[j];\n\t\t\t}\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tf = eig[j];\n\t\t\t\tg = e[j];\n\t\t\t\tfor (int k = j; k <= i-1; k++) {\n\t\t\t\t\tsmallMatrix[k][j] -= (f * e[k] + g * eig[k]);\n\t\t\t\t}\n\t\t\t\teig[j] = smallMatrix[i-1][j];\n\t\t\t\tsmallMatrix[i][j] = 0.0;\n\t\t\t}\n\t\t}\n\t\teig[i] = h;\n\t}\n\t\n\t// Accumulate transformations.\n\t\n\tfor (int i = 0; i < dimension-1; i++) {\n\t\tsmallMatrix[dimension-1][i] = smallMatrix[i][i];\n\t\tsmallMatrix[i][i] = 1.0;\n\t\tdouble h = eig[i+1];\n\t\tif (h != 0.0) {\n\t\t\tfor (int k = 0; k <= i; k++) {\n\t\t\t\teig[k] = smallMatrix[k][i+1] / h;\n\t\t\t}\n\t\t\tfor (int j = 0; j <= i; j++) {\n\t\t\t\tdouble g = 0.0;\n\t\t\t\tfor (int k = 0; k <= i; k++) {\n\t\t\t\t\tg += smallMatrix[k][i+1] * smallMatrix[k][j];\n\t\t\t\t}\n\t\t\t\tfor (int k = 0; k <= i; k++) {\n\t\t\t\t\tsmallMatrix[k][j] -= g * eig[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int k = 0; k <= i; k++) {\n\t\t\tsmallMatrix[k][i+1] = 0.0;\n\t\t}\n\t}\n\tfor (int j = 0; j < dimension; j++) {\n\t\teig[j] = smallMatrix[dimension-1][j];\n\t\tsmallMatrix[dimension-1][j] = 0.0;\n\t}\n\tsmallMatrix[dimension-1][dimension-1] = 1.0;\n\te[0] = 0.0;\n}", "path": "src\\faint\\CovarianceMatrix.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/**\n * Clears the cache of this region thumbnail from memory so that the next time it is requested it will need to be\n * loaded/created again. This will attempt to cache to disk any existing thumbnail in memory overriting the\n * thumbnail that may exist there already.\n */\n", "func_signal": "private void updateCache(String path)", "code": "{\n\t\tif (cachedFile != null){\n\t\t\tdeleteCachedFile(path);\n\t\t\ttry {\n\t\t\t\tthis.cacheToDisk(path);\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tthis.thumbnail = null;\n\t}", "path": "src\\faint\\Region.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/**\n * Checks if a given point on the image lays inside of the region. Currently\n   * not used.\n   *\n * @param point\n * @return\n */\n", "func_signal": "public boolean containsPoint(Point point)", "code": "{\n\t\n\t// set point relative to center of region\n\tint x = getX() - point.x;\n\tint y = getY() - point.y;\n\t\n\t// rotate point to region coords\n\tdouble angle = Math.toRadians(getAngle());\n\tdouble finalX = x * Math.cos(angle) + y * -Math.sin(angle);\n\tdouble finalY = x * Math.sin(angle) + y * Math.cos(angle);\n\t\n\tif (Math.abs(finalX) < getWidth()/2 && Math.abs(finalY) < getHeight()/2)\t\t\t\n\t\treturn true;\n\t\n\treturn false;\n}", "path": "src\\faint\\Region.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/**\n * Print method used for debugging.\n */\n", "func_signal": "@SuppressWarnings(\"unused\")\nprivate void print()", "code": "{\n\tString whitespace = \"                            \";\n\tfor(int row = 0; row < smallMatrix.length; row++){\n\t\tfor(int col = 0; col < smallMatrix.length; col++){\n\t\t\tString number = \"\" + smallMatrix[row][col];\n\t\t\tnumber = whitespace.substring(number.length()) + number;\n\t\t\tSystem.out.print(number);\n\t\t}\n\t\tSystem.out.println();\n\t\tSystem.out.println();\n\t}\n}", "path": "src\\faint\\CovarianceMatrix.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/** \n * This method uses the active Plugin of the Recognition Hot Spot to try\n * to recognize a given face.\n * \n * @param face Region that will be analyzed.\n * @return HashTable containing names of known people and weights describing their similarity to the given face.\n */\n", "func_signal": "public HashMap<String, Integer> recognizeFace(Region face)", "code": "{\n    EigenfaceRecognition recognition = new EigenfaceRecognition(faceDB, path);\n\tHashMap<String, Integer> result = recognition.getRecognitionPoints(face);\n    \n    // Run a simple context filter (i.e., if coming from a known image, it must \n    // match a known region on that image or it is not weighted)\n\tRegion[] knownRegions = faceDB.getRegionsForImage(face.getImage());\t\t\n\tfor (String person : result.keySet()){\n\t\tfor (Region regionOnImage : knownRegions){\n\t\t\tif (!face.equals(regionOnImage) && faceDB.getAnnotation(regionOnImage).equals(person))\n\t\t\t\tresult.put(person, 0);\t\t\t\t\t\n\t\t}\n\t}\n\treturn result;\n}", "path": "src\\faint\\Manager.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/**\n * Calculates elements of the \"bigger\" matrix - used for testing purpose only.\n * \n * @param row\n * @param col\n * @param vectors\n * @return\n */\n", "func_signal": "@SuppressWarnings(\"unused\")\nprivate double getBigMatrixElement(int row, int col, short[][] vectors)", "code": "{\n\tdouble result = 0;\n\t\n\tint vectorLength = vectors.length;\n\t\n\tfor (int i = 0; i < vectorLength; i++){\n\t\tresult += vectors[i][row] * vectors[i][col];\n\t}\t\t\n\t\n\treturn result;\n}", "path": "src\\faint\\CovarianceMatrix.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/**\n * Sqrt(a^2 + b^2) without under/overflow as used in JAMA Package.\n */\n", "func_signal": "private static double hypot(double a, double b)", "code": "{\n\t\n\tdouble r;\n\t\n\tif (Math.abs(a) > Math.abs(b)) {\n\t\tr = b/a;\n\t\tr = Math.abs(a)*Math.sqrt(1+r*r);\n\t} else if (b != 0) {\n\t\tr = a/b;\n\t\tr = Math.abs(b)*Math.sqrt(1+r*r);\n\t} else {\n\t\tr = 0.0;\n\t}\n\treturn r;\n}", "path": "src\\faint\\CovarianceMatrix.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/**\n * Returns the average of the differences of all the values in the two given arrays.\n *\n * @param weightA The first array\n * @param weightB The second array\n * @return The average of the differences of the arrays.\n */\n", "func_signal": "protected double getDistanceBetweenWeights(double[] weightA, double[] weightB)", "code": "{\n\t\tdouble result = 0;\n\t\tfor(int i = 0; i<weightA.length; i++){\n\t\t\tresult+= Math.abs(weightA[i] - weightB[i]);\t\t\t\n\t\t}\n\t\treturn result/weightA.length;\n\t}", "path": "src\\faint\\EigenfaceRecognition.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/**\n * Cache the thumbnail for this region image to disk in the path.\n *\n * @throws IOException if something goes wrong writing to disk\n */\n", "func_signal": "public void cacheToDisk(String path) throws IOException", "code": "{\n\n\t\t// find next free file name\n\t\tint i = 0;\n\t\tFile file = null;\n\t\tString leadingZeros = \"00000000\";\n      // fixme: this bit could use File.createTempFile()\n      do{\n\t\t\tString fileName = \"\" + i++;\n\t\t\tfileName = leadingZeros.substring(Math.min(fileName.length(), leadingZeros.length()-1))\n\t\t\t           + fileName + \".\" + Constants.CACHED_IMAGE_TYPE;\n\t\t\t\n\t\t\tfile = new File(path + File.separator + fileName);\n\t\t}\n\t\twhile (file.exists());\n\t\t\n\n\t\t// save image\n\t\tImageIO.write(this.toThumbnail(path, Constants.FACE_THUMBNAIL_SIZE.width,\n\t\t\t\t                       Constants.FACE_THUMBNAIL_SIZE.height),\n\t\t\t\t                       Constants.CACHED_IMAGE_TYPE, file);\n\t\t// remember file\n\t\tthis.cachedFile = file.getName();\t\t\n\t}", "path": "src\\faint\\Region.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/**\n * This method uses the active Plugin of the Detection Hot Spot to\n * detect faces in an image.\n * \n * @param image  The image that will be analyzed.\n * @param storeInDB\t Determines if possible faces should be send to the database directly.\n * @return  Array of Region elements, that are probably faces or null, if no faces were found.\t \n  */\n", "func_signal": "public Region[] detectFaces(ImageModel image, boolean storeInDB)", "code": "{\t\t\n    OpenCV opencv = new OpenCV();\n\tRegion[] possibleFaces = opencv.detectFaces(image.getFile().getAbsolutePath());\n\t\n\t// Store Regions in DB\n\tif (possibleFaces != null && storeInDB) {\n\t\tfor (int i = 0; i <possibleFaces.length; i++){\n\t\t\tfaceDB.put(possibleFaces[i], Constants.UNKNOWN_FACE, this.path);\n\t\t}\n      try {\n        faceDB.writeToDisk(path);\n      } catch (IOException io) {\n        System.out.println(\"Could not write face database.\");\n        return null;\n      }\n    }\t\t\n\treturn possibleFaces;\n}", "path": "src\\faint\\Manager.java", "repo_name": "jeffrafter/faint", "stars": 4, "license": "other", "language": "java", "size": 23236}
{"docstring": "/**\n * This method removes a item from database.\n *\n * @param e the ActionEvent to process\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\tDefaultMutableTreeNode node = editor.dynTree.getLastNode();\n\n\tif(node != null) {\n\t\tItem myItem = editor.dynTree.getItem(node);\n\n\t\t// delete item\n\t\teditor.ring.removeItem(myItem);\n\n\t\t// update tree view\n\t\teditor.dynTree.populate();\n\n\t\t// save changes\n\t\ttry {\n\t\t\teditor.ring.save(dbFilename);\n\n\t\t\tmsgInformation(\"Item \" + myItem.getTitle() + \" deleted. Database \" + editor.dbFilename + \" updated.\");\n\t\t}\n\t\tcatch(Exception ex) {\n\t\t\tmsgError(ex, \"delItemListener\", false);\n\t\t}\n\t}\n}", "path": "src\\com\\otisbean\\keyring\\gui\\Editor.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "/**\n * This method shows password in clear text according to variable showPassword.\n *\n * @param e the ActionEvent to process\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\tif(showPassword == false) {\n\t\tshowPassword = true;\n\t\teditor.currentPassword.setEchoChar('\\0'); // show password in plaintext\n\t}\n\telse {\n\t\tshowPassword = false;\n\t\teditor.currentPassword.setEchoChar('*');\n\t}\n}", "path": "src\\com\\otisbean\\keyring\\gui\\Editor.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "/**\n * This method shows a copyright information dialog.\n *\n * FIXME update this.\n *\n * @param e the ActionEvent to process\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\tJOptionPane.showMessageDialog(editor.frame,\n\t\tGui.FRAMETITLE + \" \" + \"v\" + Gui.VERSION +\n\t\t\"\\n\\nCopyright 2010 Dirk Bergstrom <keyring@otisbean.com>\\n\" +\n\t\t\"http://otisbean.com/keyring/\\n\\n\" +\n\t\t\"Keyring Desktop is based on:\\n\" +\n\t\t\"KeyringEditor v1.1\\n\" +\n\t\t\"Copyright 2006 Markus Griessnig <markus.griessnig@gmx.at>\\n\\n\" +\n\t\t\"This program is free software: you can redistribute it and/or modify\\n\" +\n\t\t\"it under the terms of the GNU General Public License as published by\\n\" +\n\t\t\"the Free Software Foundation, either version 3 of the License, or\\n\" +\n\t\t\"(at your option) any later version.\\n\\n\" +\n\t\t\"This program is distributed in the hope that it will be useful,\\n\" +\n\t\t\"but WITHOUT ANY WARRANTY; without even the implied warranty of\\n\" +\n\t\t\"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n\" +\n\t\t\"GNU General Public License for more details.\\n\\n\" +\n\t\t\"You should have received a copy of the GNU General Public License\\n\" +\n\t\t\"along with this program.  If not, see <http://www.gnu.org/licenses/>.\",\n\t\t\"About\",\n\t\tJOptionPane.INFORMATION_MESSAGE);\n}", "path": "src\\com\\otisbean\\keyring\\gui\\Editor.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "// setupGui -------------------------------------------------------\n/**\n * Loads menubar, adds ActionListeners, starts PasswordTimeout Thread.\n *\n * @param dbFilename Keyring database or null\n */\n", "func_signal": "private void setupGui(String dbFilename) throws Exception", "code": "{\n// Function: setup gui\n// Parameters: keyring-database\n// Returns: -\n\n\t// MenuBar\n\tJMenuBar myMenuBar = setMenuBar();\n\tframe.setJMenuBar(myMenuBar);\n\n\t// Layout\n\tJSplitPane mySplitPane = setLayout(this);\n\tframe.setContentPane(mySplitPane);\n\n\t// MenuBar Listener\n\topenMenuItem.addActionListener(new OpenFileListener(this));\n\topenURLMenuItem.addActionListener(new OpenURLListener(this));\n\tsaveAsMenuItem.addActionListener(new SaveAsListener(this));\n\tsaveToURLMenuItem.addActionListener(new SaveToURLListener(this));\n\tcloseMenuItem.addActionListener(new CloseListener(this));\n\tquitMenuItem.addActionListener(new QuitListener(this));\n\tcategoriesMenuItem.addActionListener(new editCategoriesListener(this));\n\tcsvMenuItem.addActionListener(new csvListener(this));\n\taboutMenuItem.addActionListener(new AboutListener(this));\n\timportMenuItem.addActionListener(new ImportListener(this));\n\tnewMenuItem.addActionListener(new newListener(this));\n\n\t// itemPane Listener\n\tcurrentCategory.addActionListener(new currentCategorySelectionListener(this));\n\t// It's just a dropdown, not really a combo box\n\tcurrentCategory.setEditable(false);\n\tcurrentTitle.getDocument().addDocumentListener(new documentListener(this));\n\tcurrentUser.getDocument().addDocumentListener(new documentListener(this));\n\tcurrentPassword.getDocument().addDocumentListener(new documentListener(this));\n\tcurrentUrl.getDocument().addDocumentListener(new documentListener(this));\n\tcurrentNotes.getDocument().addDocumentListener(new documentListener(this));\n\n\t// itemListPane Listener\n\tcategoryList.addActionListener(new CategorySelectionListener(this));\n\tdynTree.getTree().addTreeSelectionListener(new treeSelectionListener(this));\n\n\t// buttonPane Listener\n\tnewItem.addActionListener(new newItemListener(this));\n\tsaveItem.addActionListener(new saveItemListener(this));\n\tdelItem.addActionListener(new delItemListener(this));\n\tbtnLock.addActionListener(new PasswordLockListener(this));\n\tcurrentPasswordShow.addActionListener(new PasswordShowListener(this));\n\n\t// Frame\n\tframe.pack();\n\tframe.setVisible(true);\n\ttoggleButtonsAndFields(false, false);\n\n\t// Passwort Timeout\n\ttimeoutThread = new PasswordTimeoutWorker(this);\n\tnew Thread(timeoutThread).start();\n\n\t// load Database\n\tloadDatabase(dbFilename);\n}", "path": "src\\com\\otisbean\\keyring\\gui\\Editor.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "// showItem ------------------------------------------------------\n\t/**\n\t * Show item and check password timeout.\n\t */\n", "func_signal": "private void showItem()", "code": "{\n\t\tDefaultMutableTreeNode node = dynTree.getLastNode();\n\n\t\tif (locked == true || null == ring) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tDate ende = timeoutThread.getEndDate();\n\t\t\tif (null == ende) {\n\t\t\t\t// timed out\n\t\t\t\tclearItem();\n\t\t\t\tsetBtnLock(true, true);\n\t\t\t\ttoggleButtonsAndFields(false, false);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\ttimeoutThread.restartTimeout();\n\t\t\t}\n\n\t\t\tif(node == null || !(node.isLeaf()) || node.isRoot()) {\n\t\t\t\t// no item\n\t\t\t\tclearItem();\n\t\t\t\ttoggleButtonsAndFields(false, true);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tObject nodeInfo = node.getUserObject();\n\n\t\t\tItem item = (Item) nodeInfo;\n\n\t\t\t// set text fields according to item\n\t\t\t// if categoryname was deleted, show first category \"no category\"\n\t\t\tif (currentCategory.getItemCount() > item.getCategoryId()) {\n\t\t\t\tcurrentCategory.setSelectedIndex(item.getCategoryId());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcurrentCategory.setSelectedIndex(0); // no category\n\t\t\t}\n\n\t\t\tcurrentTitle.setText(item.getTitle());\n\t\t\tcurrentUser.setText(item.getUsername());\n\t\t\tcurrentNotes.setText(item.getNotes());\n\t\t\tcurrentPassword.setText(item.getPass());\n\t\t\tcurrentUrl.setText(item.getUrl());\n\t\t\t// FIXME This is sleazy and ugly\n\t\t\tdateLabel.setText(\"Created: \" + ring.formatDate(item.getCreated(), false) +\n\t\t\t\t\t\" | Changed: \" + ring.formatDate(item.getChanged(), false) +\n\t\t\t\t\t\" | Viewed: \" + ring.formatDate(item.getViewed(), false));\n\n\t\t\t// initialize buttons\n\t\t\ttextFieldChanged = false;\n\t\t\ttoggleButtonsAndFields(true, true);\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\tmsgError(e, \"showItem\", true);\n\n\t\t\ttry {\n\t\t\t\t// FIXME I don't think this makes sense\n\t\t\t\tloadDatabase(null);\n\t\t\t}\n\t\t\tcatch(Exception ignore) {};\n\t\t}\n\t}", "path": "src\\com\\otisbean\\keyring\\gui\\Editor.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "/**\n * This method opens the categories dialog and updates the category combo boxes.\n *\n * @param e the ActionEvent to process\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\tmsgInformation(\"Category editing not yet supported\");\n\treturn;\n\t/* FIXME Implement this stuff!\n\tif (locked == true) {\n\t\tmsgInformation(\"Unlock application first.\");\n\t\treturn;\n\t}\n\n\t// show category dialog\n\tCategoriesDialog catDialog = new CategoriesDialog(frame, ring.getCategories());\n\n\tcatDialog.pack();\n\tcatDialog.setVisible(true);\n\n\t// update category combo boxes\n\tVector<String> newCategories = catDialog.getNewCategories();\n\tif (null != newCategories) {\n\t\t// changed categories\n\t\tsetupCategories(newCategories);\n\t\t//ring.setCategories(newCategories);\n\n\t\t// save database\n\t\ttry {\n\t\t\teditor.ring.save(dbFilename);\n\t\t}\n\t\tcatch(Exception ex) {\n\t\t\tmsgError(ex, \"Could not save entries to \" + dbFilename, false);\n\t\t}\n\t}\n*/\n}", "path": "src\\com\\otisbean\\keyring\\gui\\Editor.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "/**\n * Shows a information message.\n *\n * @param info User-defined text\n */\n", "func_signal": "private void msgInformation(String info)", "code": "{\n\tJOptionPane.showMessageDialog(frame,\n\t\tinfo,\n\t\t\"Information\",\n\t\tJOptionPane.INFORMATION_MESSAGE);\n}", "path": "src\\com\\otisbean\\keyring\\gui\\Editor.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "/**\n * This method sets the category-filter and refreshes the tree view.\n *\n * @return True if category changed otherwise false\n */\n", "func_signal": "public boolean setCategoryFilter(int filterCategory)", "code": "{\n\tboolean changed = (filterCategory != this.filterCategory);\n\tthis.filterCategory = filterCategory;\n\n\tpopulate();\n\n\treturn changed;\n}", "path": "src\\com\\otisbean\\keyring\\gui\\DynamicTree.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "/**\n * This method returns the last selected tree node.\n *\n * @return DefaultMutableTreeNode or null if node is not a leaf\n */\n", "func_signal": "public DefaultMutableTreeNode getLastNode()", "code": "{\n\tDefaultMutableTreeNode temp = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();\n\tif (null != temp && temp.isLeaf()) {\n\t\treturn temp;\n\t} else {\n\t\treturn null;\n\t}\n}", "path": "src\\com\\otisbean\\keyring\\gui\\DynamicTree.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "/**\n * This method opens a file dialog and saves the database entries to a csv file.\n *\n * @param e the ActionEvent to process\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\tif(locked == true) {\n\t\tmsgInformation(\"Unlock application first.\");\n\t\treturn;\n\t}\n\t\n\tString urlval = null != dbFilename && dbFilename.startsWith(\"http\") ?\n\t\t\tdbFilename : \"\";\n\tString url = (String) JOptionPane.showInputDialog(\n                    frame,\n                    \"URL (must start with \\\"http\\\"):\",\n                    \"Load from URL\",\n                    JOptionPane.PLAIN_MESSAGE,\n                    null,\n                    null,\n                    urlval);\n\t\n\tif (null != url) {\n\t\ttry {\n\t\t\teditor.ring.save(url);\n\t\t\tdbFilename = url;\n\t\t\t// FIXME set window title & dyntree root to reflect new URL\n\t\t\tmsgInformation(\"Keyring saved to: \" + url);\n\t\t}\n\t\tcatch(Exception ex) {\n\t\t\tmsgError(ex, \"Could not save entries to \" +\n\t\t\t\t\turl, false);\n\t\t}\n\t}\n}", "path": "src\\com\\otisbean\\keyring\\gui\\Editor.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "// ----------------------------------------------------------------\n// main -----------------------------------------------------------\n// ----------------------------------------------------------------\n/**\n * main\n *\n * @param argv Commandline parameters\n */\n", "func_signal": "public static void main(String[] argv)", "code": "{\n\tString dbFilename = null;\n\n\tEditor myEditor = new Editor();\n\n\tmyEditor.frame = new JFrame(FRAMETITLE);\n\tmyEditor.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n\t// check command line parameters\n\tif(argv.length > 1) {\n\t\tSystem.out.println(\"Usage: java -jar KeyringEditor.jar [keyring-database]\");\n\t\treturn;\n\t}\n\n\tif(argv.length > 0) {\n\t\tdbFilename = argv[0];\n\t}\n\n\t// setup gui\n\ttry {\n\t\tmyEditor.setupGui(dbFilename);\n\t}\n\tcatch(Exception e) {\n\t\tmyEditor.msgError(e, \"main\", true);\n\t}\n}", "path": "src\\com\\otisbean\\keyring\\gui\\Editor.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "/**\n * This method saves a changed item to database.\n *\n * @param e the ActionEvent to process\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\tDefaultMutableTreeNode node = editor.dynTree.getLastNode();\n\n\ttry {\n\t\t// last selected tree node\n\t\tif(node != null) {\n\t\t\t// get updated item\n\t\t\tItem myItem = editor.dynTree.getItem(node);\n\n\t\t\t// save changes\n\t\t\tmyItem.setTitle(editor.currentTitle.getText());\n\t\t\tmyItem.setUsername(editor.currentUser.getText());\n\t\t\tmyItem.setPass(String.valueOf(editor.currentPassword.getPassword()));\n\t\t\tmyItem.setUrl(editor.currentUrl.getText());\n\t\t\tmyItem.setNotes(editor.currentNotes.getText());\n\t\t\tmyItem.setCategoryId(editor.currentCategory.getSelectedIndex());\n\n\t\t\t// update tree view\n\t\t\teditor.dynTree.populate();\n\n\t\t\t// save database\n\t\t\teditor.ring.save(dbFilename);\n\t\t\t\n\t\t\t// Redisplay the item\n\t\t\teditor.dynTree.show(myItem);\n\t\t\teditor.showItem();\n\n\t\t\tmsgInformation(\"Entries saved to: \" + editor.dbFilename);\n\t\t}\n\t}\n\tcatch(Exception ex) {\n\t\tmsgError(ex, \"saveItemListener\", true);\n\t}\n}", "path": "src\\com\\otisbean\\keyring\\gui\\Editor.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "/**\n * Clear item text fields.\n */\n", "func_signal": "private void clearItem()", "code": "{\n\tif (currentCategory.getItemCount() > 0) {\n\t\tcurrentCategory.setSelectedIndex(0);\n\t}\n\tcurrentTitle.setText(\"\");\n\tcurrentUser.setText(\"\");\n\tcurrentPassword.setText(\"\");\n\tcurrentUrl.setText(\"\");\n\tdateLabel.setText(\"\");\n\tcurrentNotes.setText(\"\");\n}", "path": "src\\com\\otisbean\\keyring\\gui\\Editor.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "/**\n * This method filters the tree view according to selected category.\n *\n * @param e the ActionEvent to process\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\teditor.dynTree.setCategoryFilter(editor.categoryList.getSelectedIndex());\n\n\teditor.showItem();\n}", "path": "src\\com\\otisbean\\keyring\\gui\\Editor.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "/**\n * Enable buttons according to loaded database.\n *\n * @param enabled True if database is loaded\n * @param newItemEnabled True if the \"new item\" button should be enabled\n */\n", "func_signal": "private void toggleButtonsAndFields(boolean enabled, boolean newItemEnabled)", "code": "{\n\tdelItem.setEnabled(false);\n\tsaveItem.setEnabled(false);\n\tsaveItem.setBackground(null);\n\tcurrentCategory.setEnabled(enabled);\n\tcurrentTitle.setEditable(enabled);\n\tcurrentUser.setEditable(enabled);\n\tcurrentPassword.setEditable(enabled);\n\tcurrentUrl.setEditable(enabled);\n\tcurrentNotes.setEditable(enabled);\n\tnewItem.setEnabled(newItemEnabled);\n}", "path": "src\\com\\otisbean\\keyring\\gui\\Editor.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "/**\n * Set state of buttons, menus, etc. according to presence of Ring & dbFilename.\n */\n", "func_signal": "private void initEditorState(boolean dbLoaded)", "code": "{\n\tString title;\n\tif (dbLoaded) {\n\t\ttitle = FRAMETITLE + \": \" + null == dbFilename ? \"UNSAVED\" : dbFilename;\n\t\tsetupCategories(ring.getCategories());\n\t\tdynTree.populate();\n\t} else {\n\t\ttitle = FRAMETITLE;\n\t\tsetupCategories(null);\n\t\tdynTree.clear();\n\t}\n\tframe.setTitle(title);\n\t// Menu bar items\n\topenMenuItem.setEnabled(! dbLoaded);\n\topenURLMenuItem.setEnabled(! dbLoaded);\n\tsaveAsMenuItem.setEnabled(dbLoaded);\n\tsaveToURLMenuItem.setEnabled(dbLoaded);\n\tcloseMenuItem.setEnabled(dbLoaded);\n\tcsvMenuItem.setEnabled(dbLoaded);\n\tcategoriesMenuItem.setEnabled(dbLoaded);\n\timportMenuItem.setEnabled(! dbLoaded);\n\n\ttoggleButtonsAndFields(false, dbLoaded);\n\tsetBtnLock(false, dbLoaded);\n}", "path": "src\\com\\otisbean\\keyring\\gui\\Editor.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "/**\n * Show password dialog.\n *\n * @return Password (null if dialog canceled).\n */\n", "func_signal": "private char[] getPasswordFromDialog()", "code": "{\n\tPasswordDialog pwdDlg = new PasswordDialog(frame);\n\tpwdDlg.pack();\n\tpwdDlg.setVisible(true);\n\n\treturn pwdDlg.getPassword();\n}", "path": "src\\com\\otisbean\\keyring\\gui\\Editor.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "// ----------------------------------------------------------------\n// constructor\n// ----------------------------------------------------------------\n/**\n * Default constructor generates tree view.\n *\n * @param editor Reference to the class Editor\n */\n", "func_signal": "public DynamicTree(Editor editor)", "code": "{\n\tsuper(new GridLayout(1,0));\n\n\tthis.editor = editor;\n\n\trootNode = new DefaultMutableTreeNode(\"\");\n\ttreeModel = new DefaultTreeModel(rootNode);\n\n\ttree = new JTree(treeModel);\n\ttree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);\n\ttree.setRootVisible(true);\n\n\tJScrollPane scrollPane = new JScrollPane(tree);\n\tadd(scrollPane);\n}", "path": "src\\com\\otisbean\\keyring\\gui\\DynamicTree.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "/**\n * This method returns the item data of the tree node.\n *\n * @param node tree-node\n *\n * @return Item data of tree-node\n */\n", "func_signal": "public Item getItem(DefaultMutableTreeNode node)", "code": "{\n\tObject nodeInfo = node.getUserObject();\n\n\treturn (Item)nodeInfo;\n}", "path": "src\\com\\otisbean\\keyring\\gui\\DynamicTree.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "/**\n * This method opens the new item dialog and and saves the new item to database.\n *\n * @param e the ActionEvent to process\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\t// show edit dialog\n\tNewItemDialog editDlg = new NewItemDialog(editor.frame, editor.ring.getCategories());\n\teditDlg.pack();\n\teditDlg.setVisible(true);\n\n\tObject[] buffer = editDlg.getNewItem();\n\n\ttry {\n\t\t// new item\n\t\tif(buffer[0] != null) {\n\t\t\t/* Edit dialog returns (All String except category is Integer)\n\t\t\t * returnParameter[0] = category\n\t\t\t * returnParameter[1] = title\n\t\t\t * returnParameter[2] = user\n\t\t\t * returnParameter[3] = password\n\t\t\t * returnParameter[4] = url\n\t\t\t * returnParameter[5] = notes \n\t         * \n\t         * Item expects\n\t         * String username,\n\t         * String pass,\n\t         * String url,\n\t         * String notes,\n\t         * String title,\n\t         * int categoryId\n\t\t\t */\n\t\t\tItem myItem = new Item(\n\t\t\t\t\teditor.ring,\n\t\t\t\t\t(String) buffer[2],\n\t\t\t\t\t(String) buffer[3],\n\t\t\t\t\t(String) buffer[4],\n\t\t\t\t\t(String) buffer[5],\n\t\t\t\t\t(String) buffer[1],\n\t\t\t\t\t((Integer) buffer[0]).intValue()\n\t\t\t);\n\n\t\t\t// register new item to vector entries\n\t\t\teditor.ring.addItem(myItem);\n\n\t\t\t// update tree view\n\t\t\teditor.dynTree.populate();\n\n\t\t\t// save database\n\t\t\teditor.ring.save(dbFilename);\n\n\t\t\t// show new item\n\t\t\teditor.dynTree.show(myItem);\n\t\t\t\n\t\t\tmsgInformation(\"Entries saved to: \" + editor.dbFilename);\n\t\t}\n\t}\n\tcatch(Exception ex) {\n\t\tmsgError(ex, \"newItemListener\", true);\n\t}\n}", "path": "src\\com\\otisbean\\keyring\\gui\\Editor.java", "repo_name": "krid/keyring-java", "stars": 4, "license": "gpl-3.0", "language": "java", "size": 437}
{"docstring": "/**\n * After unserialization of login params, the Login object thus created\n * need to know the UpConnection params (because it is not serialized with the Login object)\n * @param uc The current UpConnection \n */\n", "func_signal": "public void setConnectionConfig(UpConnection uc)", "code": "{\n\tthis.uc=uc;\n\tuc.setUser(login, token);\n}", "path": "src\\connect\\Login.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * Post request to setted up host\n * it send the file given, with all its informations\n * @param f The file that will be sent\n * \n */\n", "func_signal": "private String sendData(ImageFile imf)", "code": "{\n\tString answer=\"\";\n\tif(logged & ready){\n\t\ttry {\n\t\t\tconnection.setRequestMethod(\"POST\");\n\t\t\t\n\t\t\tosr = new OutputStreamWriter(connection.getOutputStream());\n\t\t\tosr.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n\t\t    \n\t\t    /*convert the file to 64base format*/\n\t\t    FileInputStream fis = new FileInputStream(imf.getFile());\n\n\t\t    byte[] buffer = new byte[(int)imf.getFile().length()];\n\t\t    fis.read(buffer);\n\t\t    fis.close();\n\t\t    String encode = new sun.misc.BASE64Encoder().encode(buffer); //Base64.encode(buffer);\n\t\t    \n\t\t    /*Then create the xml file to send, with encoded file inside*/\n\t\t\tosr.write(\"<upshot>\");\n\t\t\tosr.write(\"<title>\"+imf.getTitle()+\"</title>\");\n\t\t\tosr.write(\"<file_name>\"+imf.getFile().getName()+\"</file_name>\");\n\t\t\tosr.write(\"<size>\"+imf.getFile().length()+\"</size>\");\n\t\t\tosr.write(\"<javafile>\"+encode+\"</javafile>\");\n\t\t\tosr.write(\"</upshot>\");\n\t\t\tosr.flush();\n\t\t\tosr.close();\n\n\t\t\t/*You have to read the response of the host to make the changes happen*/\n\t\t\tisr = new InputStreamReader(connection.getInputStream());\n\t\t\tint c ;\n\t\t\t\n\t\t\tc = isr.read();\n\t\t\twhile(c!=-1){\n\t\t\t\tanswer+=(char)c;\n\t\t\t\tc = isr.read();\n\t\t\t}\n\t\t\tisr.close();\n\t\t\t\n\t\t} catch (IOException ioe) {\n\t\t\tJOptionPane.showMessageDialog(Smash.getFrames()[0], \"UpConnection.sendData() : \"+ioe.getMessage(), \"Error\", JOptionPane.ERROR_MESSAGE);\n\t\t} \n\t\tfinally{\n\t\t\tconnection.disconnect();\n\t\t}\n\t}\n\treturn answer;\n}", "path": "src\\connect\\UpConnection.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * This give the references to the model\n * @param model The DataModel object used by the JTable to list droped images\n */\n", "func_signal": "public void setModel(DataModel model)", "code": "{\n\tthis.model=model;\n\tlist=model.getImages();\n}", "path": "src\\connect\\UpConnection.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * Clear all fields. \n * Usefull for initialization\n */\n", "func_signal": "public void init()", "code": "{\n\tloginbox.setText(\"\");\n\ttokenbox.setText(\"\");\n\tlogin = new String(\"\");\n\ttoken = new String(\"\");\n\tmessage.setText(\"\");\n\tpass = new char[128];\n}", "path": "src\\connect\\Login.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * Load serialized file\n * and recreate login object thanks to it\n */\n", "func_signal": "private void load()", "code": "{\n\tFileInputStream fis = null;\n\tObjectInputStream in = null;\n\ttry{\n\t\tfis = new FileInputStream(home+folder+file);\n\t\tin = new ObjectInputStream(fis);\n\t    log = (Login)in.readObject();\n\t    in.close();\n\t    }\n\tcatch(IOException e){\n\t\tJOptionPane.showMessageDialog(Smash.getFrames()[0], \"Smash.load() IOException : \"+e.getMessage(), \"Error\", JOptionPane.ERROR_MESSAGE);\n\t}\n\tcatch(ClassNotFoundException e){\n\t\tJOptionPane.showMessageDialog(Smash.getFrames()[0], \"Smash.load() ClassNotFoundException : \"+e.getMessage(), \"Error\", JOptionPane.ERROR_MESSAGE);\n\t}\n    log.setConnectionConfig(uc);\n    log.setResourceBundle(msg);\n}", "path": "src\\main\\Smash.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * Constructor of logging dialog box\n * @param origin will always be an instance of Smash class\n * @param uc instane of UpConnection class (created in Smash)\n */\n", "func_signal": "public Login(JFrame origin, UpConnection uc)", "code": "{\n\tsuper(origin, true);\n\tthis.setResizable(false);\n\tthis.getContentPane().setBackground(Color.decode(\"#656565\"));\n\tthis.getContentPane().setForeground(Color.WHITE);\n\t\n\tanswer=0;\n\tthis.uc=uc;\n\tlogin=new String();\n\ttoken=new String();\n\t\n\tloginbox = new JTextField(10);\n\ttokenbox= new JPasswordField(15);\n\t\ttokenbox.setActionCommand(\"OK\");\n\t\ttokenbox.addActionListener(this);\n\tok = new JButton(\"OK\");\n\t\tok.addActionListener(this);\n\t\tok.setOpaque(false);\n\t\tok.setBackground(this.getContentPane().getBackground());\n\tcancel = new JButton();\n\t\tcancel.setActionCommand(\"Cancel\");\n\t\tcancel.addActionListener(this);\n\t\tcancel.setOpaque(false);\n\t\tcancel.setBackground(this.getContentPane().getBackground());\n\tremember = new JCheckBox(\"Remember me\", false);\n\t\tremember.setOpaque(false);\n\t\tremember.setBackground(this.getContentPane().getBackground());\n\t\n\tloginlab = new JLabel(\"E-mail :\");\n\t\tloginlab.setLabelFor(loginbox);\n\ttokenlab = new JLabel(\"Token :\");\n\t\ttokenlab.setLabelFor(tokenbox);\n\tmessage = new JLabel();\n\t\tFont font = new Font(\"Verdana\",Font.BOLD,11);\n\t\tmessage.setFont(font);\n\t\t\n\tgbl = new GridBagLayout();\n\tgbc = new GridBagConstraints();\n\t\n\tgbc.gridx=0;\n\tgbc.gridy=0;\n\tInsets ins = new Insets(5, 5, 2, 0);\n\tgbc.insets=ins;\n\tgbc.gridwidth=3;\n\tgbc.anchor = GridBagConstraints.CENTER;\n\tgbc.fill = GridBagConstraints.HORIZONTAL ;\n\tgbl.setConstraints(message, gbc);\n\t\n\tgbc.gridy=1;\n\tins = new Insets(0, 5, 0, 0);\n\tgbc.insets=ins;\n\tgbc.gridwidth=1;\n\tgbc.anchor = GridBagConstraints.EAST;\n\tgbc.fill = GridBagConstraints.NONE ;\n\tgbl.setConstraints(loginlab, gbc);\n\t\n\tgbc.gridx=1;\n\tgbc.gridwidth=2;\n\tins = new Insets(0, 0, 0, 2);\n\tgbc.insets=ins;\n\tgbc.anchor=GridBagConstraints.WEST;\n\tgbl.setConstraints(loginbox, gbc);\n\t\n\tgbc.gridx=0;\n\tgbc.gridy=2;\n\tgbc.gridwidth=1;\n\tins = new Insets(0, 5, 0, 0);\n\tgbc.insets=ins;\n\tgbc.anchor=GridBagConstraints.EAST;\n\tgbl.setConstraints(tokenlab, gbc);\n\t\n\tgbc.gridx=1;\n\tgbc.gridwidth=2;\n\tins = new Insets(0, 0, 0, 2);\n\tgbc.insets=ins;\n\tgbc.anchor=GridBagConstraints.WEST;\n\tgbl.setConstraints(tokenbox, gbc);\n\t\n\tgbc.gridy=3;\n\tgbc.gridx=0;\n\tins = new Insets(0, 5, 0, 0);\n\tgbc.insets=ins;\n\tgbc.anchor=GridBagConstraints.EAST;\n\tgbl.setConstraints(remember, gbc);\n\t\n\tgbc.gridx=0;\n\tgbc.gridy=4;\n\tins = new Insets(0, 2, 2, 0);\n\tgbc.insets=ins;\n\tgbc.anchor=GridBagConstraints.SOUTHWEST;\n\tgbl.setConstraints(cancel, gbc);\n\t\n\tgbc.gridx=2;\n\tins = new Insets(0, 0, 2, 2);\n\tgbc.insets=ins;\n\tgbc.anchor=GridBagConstraints.SOUTHEAST;\n\tgbl.setConstraints(ok, gbc);\n\t\n\tthis.getContentPane().setLayout(gbl);\n\tthis.add(message);\n\tthis.add(loginlab);\n\tthis.add(loginbox);\n\tthis.add(tokenlab);\n\tthis.add(tokenbox);\n\tthis.add(remember);\n\tthis.add(cancel);\n\tthis.add(ok);\n\t\n\tinit();\n\tthis.pack();\n\tthis.setLocationRelativeTo(origin);\n}", "path": "src\\connect\\Login.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * Helping method to get an image\n * @return ImageIcon using the package path\n */\n", "func_signal": "public static ImageIcon getIcon(String name)", "code": "{\n\tURL url = Smash.class.getResource(\"/images/\"+name);\n\treturn new ImageIcon(url);\n}", "path": "src\\main\\Smash.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * Redraw all labels and buttons in the appropriate language\n */\n", "func_signal": "public void displayLanguage()", "code": "{\n\tthis.setTitle(msg.getString(\"login_title\"));\n\tcancel.setText(msg.getString(\"cancel\"));\n}", "path": "src\\connect\\Login.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * Run the thread for UpConnection, this permit to see the list of images\n * being checked after each send finished\n * \n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n\n\tString answer=\"\";\n\tSmash.getFrames()[0].setCursor(new Cursor(Cursor.WAIT_CURSOR));\n\t\n\tfor(ImageFile imf : list){\n\t\tif(!imf.isSent()){\n\t\t\timf.setSending();\n\t\t\tmodel.fireTableDataChanged();\n\t\t\tsetup(\"users/\"+id+\"/upshots.xml\");\n\t\t\tanswer = sendData(imf);\n\t\t\tif(!answer.isEmpty())\n\t\t\t\timf.setSent();\n\t\t\tmodel.fireTableDataChanged();\n\t\t}\n\t}\n\tSmash.getFrames()[0].setCursor(new Cursor(Cursor.DEFAULT_CURSOR));\n}", "path": "src\\connect\\UpConnection.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "//0:ready, 1:sending, 2:sent\n", "func_signal": "public ImageFile(File f)", "code": "{\n\t\tfile=f;\n\t\ttitle=f.getName().substring(0, f.getName().lastIndexOf(\".\"));\n\t\tstatus=0;\n\t}", "path": "src\\main\\ImageFile.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * Simple get request to retrieve informations from\n * setted up host\n * @return A code value for what happened : <br />\n *  0 : getUser() and/or setup() not yet called<br />\n *  c : ok<br />\n * -1 : login failed<br />\n */\n", "func_signal": "public int getId()", "code": "{\n\tif(logged & ready){\n\t\ttry {\n\t\t\tconnection.setRequestMethod(\"GET\");\n\t\t\tisr = new InputStreamReader(connection.getInputStream());\n\t\t\tint c = 0;\n\n\t\t\tc = isr.read();\n\t\t\tString s = new String();\n\t\t\twhile(c!=-1){\n\t\t\t\ts += (char)c;\n\t\t\t\tc = isr.read();\n\t\t\t}\n\t\t\tisr.close();\n\t\t\tid=Integer.parseInt(s);\n\t\t\treturn Integer.parseInt(s);\n\t\t} catch (IOException e) {\n\t\t\treturn -1;\n\t\t} \n\t\tfinally{\n\t\t\tconnection.disconnect();\n\t\t}\n\t}\n\treturn 0;\n}", "path": "src\\connect\\UpConnection.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * Set the language resource as given in Smash class\n * @param rb the ResourceBundle representing the language\n */\n", "func_signal": "public void setResourceBundle(ResourceBundle rb)", "code": "{\n\tmsg=rb;\n\tthis.displayLanguage();\n}", "path": "src\\table\\EditCellRender.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * Set the language resource as given in Smash class\n * @param rb the ResourceBundle representing the language\n */\n", "func_signal": "public void setResourceBundle(ResourceBundle rb)", "code": "{\n\tmsg=rb;\n\tthis.displayLanguage();\n}", "path": "src\\table\\EditCellEditor.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * Set the language resource as given in Smash class\n * @param rb the ResourceBundle representing the language\n */\n", "func_signal": "public void setResourceBundle(ResourceBundle rb)", "code": "{\n\tmsg=rb;\n\tlocale=rb.getLocale();\n\tthis.displayLanguage();\n}", "path": "src\\main\\About.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * Set the language resource from About\n * @param rb the ResourceBundle representing the language\n */\n", "func_signal": "public void setResourceBundle(ResourceBundle rb)", "code": "{\n\tmsg=rb;\n\tthis.displayLanguage();\n}", "path": "src\\main\\Smash.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * Redraw all labels and buttons in the appropriate language\n */\n", "func_signal": "private void displayLanguage()", "code": "{\n\t// For the button and labels in this frame\n    \tsender.setText(msg.getString(\"send\"));\n    \ttitle.setText(msg.getString(\"title\")+\"                           \");\n    \tformat.setText(\"          \"+msg.getString(\"format\")+\"                       \");\n    \tsize.setText(msg.getString(\"size\")+\"                              \");\n    \t\n    \t// For all other components\n\tlog.setResourceBundle(msg);\n\tdelCellRender.setResourceBundle(msg);\n\teditCellRender.setResourceBundle(msg);\n\teditCellEditor.setResourceBundle(msg);\n\ttable.repaint();\n}", "path": "src\\main\\Smash.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * This set the login and password the user will use\n * The login is the users email.\n * @param log The Login object used to retrieve the login and password\n */\n", "func_signal": "public void setUser(String login, String token)", "code": "{\n\t\tuserPass = login+\":\"+token;\n\t\tencoding = new sun.misc.BASE64Encoder().encode(userPass.getBytes());\n\t\tlogged=true;\n\t\tsetup(\"users/get_id.xml\");\n\t\t\n}", "path": "src\\connect\\UpConnection.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * Redraw all labels and buttons in the appropriate language\n */\n", "func_signal": "private void displayLanguage()", "code": "{\n\tlinks[3].setText(\"<html><body><u>\"+msg.getString(\"contactus\")+\"</u></body><html>\");\n\tString txt=\"\";\n\tif(locale.getLanguage().equals(\"en\")){\n\t\ttxt = \"<html><body><b><font size=6>Smash Uploader</font></b> is an <i>OpenSource</i> plugin for <b><font size=4>UpShot</font></b>, \" +\n\t\t\t\t\t\t\t \"distributed by <b>Studio Melipone</b> under the GNU Lesser General Public License.<br>\" +\n\t\t\t\t \t\t\t \"<br>\" +\n\t\t\t\t \t\t\t \"The goal of this <i>multiplatform</i> application is to help you to <b><font size=5>drop</font></b> several <b>images</b> from \" +\n\t\t\t\t \t\t\t \"<u><font size=4>your desktop</font></u> into a list of images, in order to instantly <b><font size=5>send</font></b> them to <u><font size=4>your UpShot account</font></u>.<br>\" +\n\t\t\t\t \t\t\t \"<br><br>\" +\n\t\t\t\t \t\t\t \"<font size=3>\" +\n\t\t\t\t \t\t\t \t\"Smash Uploader v.1.0<br>\" +\n\t\t\t\t \t\t\t \t\"Copyright 2008 Studio Melipone<br>\" +\n\t\t\t\t \t\t\t \t\"<i>GNU Lesser General Public License v.3</i>\" +\n\t\t\t\t \t\t\t \"</font>\" +\n\t\t\t\t \t\"</body></html>\";\n\t\t}\n\t\telse if(locale.getLanguage().equals(\"fr\")){\n\t\t\ttxt = \"<html><body><b><font size=6>Smash Uploader</font></b> est un plugin <i>OpenSource</i> pour <b><font size=4>UpShot</font></b>, \" +\n\t\t\t\t\t\t\t \"distribu&eacute; par <b>Studio Melipone</b> sous la licence : GNU Lesser General Public License.<br>\" +\n\t\t\t\t\t\t\t \"<br>\" +\n\t\t\t\t\t\t\t \"Le but de cette application <i>multi-platformes</i> est de vous aider &agrave; <b><font size=5>d&eacute;poser</font></b> plusieur <b>images</b> depuis \" +\n\t\t\t\t\t\t\t \"<u><font size=4>votre bureau</font></u> jusque dans une liste d'images, pour les <b><font size=5>envoyer</font></b> instantan&eacute;ment sur <u><font size=4>votre compte UpShot</font></u>.<br>\" +\n\t\t\t\t\t\t\t \"<br><br>\" +\n\t\t\t\t\t\t\t \"<font size=3>\" +\n\t\t\t\t\t\t\t \t\"Smash Uploader v.1.0<br>\" +\n\t\t\t\t\t\t\t \t\"Copyright 2008 Studio Melipone<br>\" +\n\t\t\t\t\t\t\t \t\"<i>GNU Lesser General Public License v.3</i>\" +\n\t\t\t\t\t\t\t \"</font>\" +\n\t\t\t\t  \"</body></html>\";\n\t\t}\n\tcontent.setText(txt);\n}", "path": "src\\main\\About.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * Save login information in serialized file\n */\n", "func_signal": "private void save()", "code": "{\n\tFileOutputStream fos = null;\n\tObjectOutputStream out = null;\n\n\ttry {\n\t\tfos = new FileOutputStream(home+folder+file);\n\t\tout = new ObjectOutputStream(fos);\n\t\tout.writeObject(log);\n\t\tout.close();\n\t} catch (IOException e) {\n\t\tJOptionPane.showMessageDialog(Smash.getFrames()[0], \"Smash.save() IOException : \"+e.getMessage(), \"Error\", JOptionPane.ERROR_MESSAGE);\n\t}\n}", "path": "src\\main\\Smash.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * Setup connection with needed headers and user authentication properties\n * charset UTF-8\n * XML datas\n * @param path The route used to access to wanted resource\n */\n", "func_signal": "private void setup(String path)", "code": "{\n\ttry {\n\t\turl = new URL(\"http://upshotit.com/en/\"+path);\n\t\tconnection=(HttpURLConnection)url.openConnection();\n\t\tconnection.setAllowUserInteraction(true);\n\t\t//connection.setRequestProperty(\"charset\",\"utf-8\");\n\t\tconnection.setRequestProperty(\"Host\", \"upshotit.com\");\n\t\tconnection.setRequestProperty(\"Accept\", \"*/*\");\n\t\tconnection.setRequestProperty(\"Content-Type\", \"text/xml\");\n        connection.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        connection.setDoInput(true);\n        connection.setDoOutput(true);\n        ready=true;\n\t} catch (MalformedURLException e) {\n\t\tJOptionPane.showMessageDialog(Smash.getFrames()[0], \"UpConnection.setup() MalformedURLException : \"+e.getMessage(), \"Error\", JOptionPane.ERROR_MESSAGE);\n\t} catch (IOException e) {\n\t\tJOptionPane.showMessageDialog(Smash.getFrames()[0], \"UpConnection.setup() IOException : \"+e.getMessage(), \"Error\", JOptionPane.ERROR_MESSAGE);\n\t}\n}", "path": "src\\connect\\UpConnection.java", "repo_name": "jbfeldis/upshot-smash-uploader", "stars": 4, "license": "None", "language": "java", "size": 1216}
{"docstring": "/**\n * @param recordId\n * @param layer\n * @param type\n * @param created\n * @param expiration\n */\n", "func_signal": "public GeoJSONRecord(String recordId, String layer, String type, long created, long expiration)", "code": "{\n\tsuper();\n\tsetProperties(new JSONObject());\n\t\n\tsetRecordId(recordId);\n\tsetLayer(layer);\n\tsetObjectType(type);\n\tsetCreated(created);\n\tsetExpiration(expiration);\n\tsetLatitude(0.0);\n\tsetLongitude(0.0);\n\t\n\ttry {\n\t\t\n\t\tsetType(\"Feature\");\n\t\t\n\t} catch (JSONException e) {\n\t\t\n\t\tlogger.info(\"unable to locate type key\");\n\t\t\n\t}\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/* (non-Javadoc)\n * @see com.simplegeo.client.model.IRecord#getProperties()\n */\n", "func_signal": "public JSONObject getProperties()", "code": "{\n\tJSONObject properties = null;\t\t\n\ttry {\n\t\tproperties = super.getProperties();\n\t} catch (JSONException e) {\t\t\t\n\t\tlogger.info(\"unable to locate properties\");\n\t}\n\t\n\treturn properties;\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/**\n * @see com.simplegeo.client.model.DefaultRecord#setIntProperty(String, int)\n */\n", "func_signal": "public void setIntProperty(String key, int value)", "code": "{\n\ttry {\n\t\tsuper.getProperties().put(key, value);\n\t} catch (JSONException e) {\n\t\tlogger.info(String.format(\"unable to locate %s\", key));\n\t}\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/**\n * @see com.simplegeo.client.model.DefaultRecord#getObjectProperty(String)\n */\n", "func_signal": "public Object getObjectProperty(String key)", "code": "{\n\tObject value = null;\n\ttry {\n\t\tvalue = super.getProperties().get(key);\n\t} catch (JSONException e) {\n\t\tlogger.info(String.format(\"unable to locate %s\", key));\n\t}\t\n\t\n\treturn value;\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/* (non-Javadoc)\n * @see com.simplegeo.client.model.IRecord#getLatitude()\n */\n", "func_signal": "public double getLatitude()", "code": "{\n\tdouble latitude = -1.0;\t\t\n\ttry {\n\t\tlatitude = super.getLatitude();\n\t} catch (JSONException e) {\t\t\t\n\t\tlogger.info(\"unable to locate latitude\");\n\t}\n\t\n\treturn latitude;\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/**\n * @see com.simplegeo.client.model.DefaultRecord#getIntProperty(String)\n */\n", "func_signal": "public int getIntProperty(String key)", "code": "{\n\tint value = 0;\n\ttry {\n\t\tvalue = super.getProperties().getInt(key);\n\t} catch (JSONException e) {\n\t\tlogger.info(String.format(\"unable to locate %s\", key));\n\t}\n\t\n\treturn value;\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/**\n * @see com.simplegeo.client.model.DefaultRecord#getDoubleProperty(String)\n */\n", "func_signal": "public double getDoubleProperty(String key)", "code": "{\n\tdouble value = 0.0;\n\ttry {\n\t\tvalue = super.getProperties().getDouble(key);\n\t} catch (JSONException e) {\n\t\tlogger.info(String.format(\"unable to locate %s\", key));\n\t}\t\n\t\n\treturn value;\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/* (non-Javadoc)\n * @see com.simplegeo.client.model.GeoJSONObject#setLongitude(double)\n */\n", "func_signal": "public void setLongitude(double lon)", "code": "{\n\ttry {\n\t\tsuper.setLongitude(lon);\n\t} catch (JSONException e) {\n\t\tlogger.info(\"unable to locate longitude\");\n\t}\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/* (non-Javadoc)\n * @see com.simplegeo.client.model.IRecord#getObjectType()\n */\n", "func_signal": "public String getObjectType()", "code": "{\n\t\n\tString type = null;\t\t\n\ttry {\n\t\ttype = super.getProperties().getString(\"type\");\n\t} catch (JSONException e) {\t\t\t\n\t\tlogger.info(\"unable to locate type\");\n\t}\n\t\n\treturn type;\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/* (non-Javadoc)\n * @see com.simplegeo.client.model.GeoJSONObject#setProperties(org.json.JSONObject)\n */\n", "func_signal": "public void setProperties(JSONObject properties)", "code": "{\n\t\n\ttry {\n\t\tsuper.setProperties(properties);\n\t} catch (JSONException e) {\n\t\tlogger.info(\"unable to locate properties\");\n\t}\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/**\n * @see com.simplegeo.client.model.DefaultRecord#setLayer(String)\n */\n", "func_signal": "public void setLayer(String layer)", "code": "{\n\ttry {\n\t\tsuper.put(\"layer\", layer);\n\t} catch (JSONException e) {\t\t\t\n\t\tlogger.info(\"unable to locate properties\");\n\t}\t\t\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/**\n * Calls {@link com.simplegeo.client.model.Layer#nearby(NearbyQuery)} on all\n * Layer objects registered with the manager.\n * \n * @param query the nearby query\n * @return \n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic List<IRecord> nearby(NearbyQuery query)", "code": "{\n\tList<IRecord> records = new ArrayList<IRecord>();\n\tfor(Layer layer : layers)\n\t\ttry {\n\t\t\trecords.addAll((Collection<? extends IRecord>)layer.nearby(query).getFeatures());\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\t\n\treturn records;\n}", "path": "src\\com\\simplegeo\\client\\model\\LayerManager.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/* (non-Javadoc)\n * @see com.simplegeo.client.model.IRecord#getExpiration()\n */\n", "func_signal": "public long getExpiration()", "code": "{\n\tlong expires = 0;\t\t\n\ttry {\n\t\texpires = super.getLong(\"expiration\");\n\t} catch (JSONException e) {\t\t\t\n\t\tlogger.info(\"unable to locate expiration\");\n\t}\n\t\n\treturn expires;\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/* (non-Javadoc)\n * @see com.simplegeo.client.model.IRecord#getLayer()\n */\n", "func_signal": "public String getLayer()", "code": "{\n\tString layer = null;\t\t\n\ttry {\n\t\tlayer = super.getString(\"layer\");\n\t} catch (JSONException e) {\t\t\t\n\t\tlogger.info(\"unable to locate layer\");\n\t}\n\t\n\treturn layer;\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/**\n * Calls {@link com.simplegeo.client.model.Layer#update()} on all\n * Layer objects registered with the manager.\n */\n", "func_signal": "public void update()", "code": "{\n\tfor(Layer layer : layers)\n\t\ttry {\n\t\t\tlayer.update();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n}", "path": "src\\com\\simplegeo\\client\\model\\LayerManager.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/**\n * @see com.simplegeo.client.model.DefaultRecord#setDoubleProperty(String, double)\n */\n", "func_signal": "public void setDoubleProperty(String key, double value)", "code": "{\n\ttry {\n\t\tsuper.getProperties().put(key, value);\n\t} catch (JSONException e) {\n\t\tlogger.info(String.format(\"unable to locate %s\", key));\n\t}\t\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/**\n * @see com.simplegeo.client.model.DefaultRecord#setObjectProperty(String, Object)\n */\n", "func_signal": "public void setObjectProperty(String key, Object value)", "code": "{\n\tif(value == null)\n\t\tvalue = JSONObject.NULL;\n\ttry {\n\t\tsuper.getProperties().put(key, value);\n\t} catch (JSONException e) {\n\t\tlogger.info(String.format(\"unable to locate %s\", key));\n\t}\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/**\n * Calls {@link com.simplegeo.client.model.Layer#retrieve()} on all Layer\n * objects registered with the manager.\n */\n", "func_signal": "public void retrieve()", "code": "{\n\tfor(Layer layer : layers)\n\t\ttry {\n\t\t\tlayer.retrieve();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n}", "path": "src\\com\\simplegeo\\client\\model\\LayerManager.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/* (non-Javadoc)\n * @see com.simplegeo.client.model.IRecord#getCreated()\n */\n", "func_signal": "public long getCreated()", "code": "{\n\tlong created = 0;\t\t\n\ttry {\n\t\tcreated = super.getLong(\"created\");\n\t} catch (JSONException e) {\t\t\t\n\t\tlogger.info(\"unable to locate created\");\n\t}\n\t\n\treturn created;\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/**\n * @see com.simplegeo.client.model.DefaultRecord#getLongProperty(String)\n */\n", "func_signal": "public long getLongProperty(String key)", "code": "{\n\tlong value = 0;\n\ttry {\n\t\tvalue = super.getProperties().getLong(key);\n\t} catch (JSONException e) {\n\t\tlogger.info(String.format(\"unable to locate %s\", key));\n\t}\t\n\t\n\treturn value;\n}", "path": "src\\com\\simplegeo\\client\\model\\GeoJSONRecord.java", "repo_name": "simplegeo/simplegeo-java-client", "stars": 6, "license": "bsd-3-clause", "language": "java", "size": 4281}
{"docstring": "/**\n * @see org.apache.wicket.authorization.strategies.role.IRoleCheckingStrategy#hasAnyRole(SocialSiteRoles)\n */\n", "func_signal": "public boolean hasAnyRole(final Roles roles)", "code": "{\n\tfinal SessionUser sessionUser = SocialSiteSession.get().getSessionUser();\n\tif (sessionUser != null)\n\t{\n\t\t// check whether he has the role\n\t\treturn sessionUser.hasAnyRole(roles);\n\t}\n\t// not logged in\n\treturn false;\n}", "path": "src\\main\\java\\com\\socialsite\\authentication\\UserRolesAuthorizer.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see com.socialsite.dao.AnswerDao#getAnswers(long, int, int)\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic List<Answer> getAnswers(final long questionId, final int first, final int count)", "code": "{\n\tfinal Criteria criteria = getSession().createCriteria(domainClass);\n\tcriteria.add(Restrictions.eq(\"question.id\", questionId));\n\tcriteria.setFirstResult(first);\n\tcriteria.setMaxResults(count);\n\n\t// order by date\n\tcriteria.addOrder(Order.desc(\"time\"));\n\treturn criteria.list();\n}", "path": "src\\main\\java\\com\\socialsite\\dao\\hibernate\\AnswerDaoImpl.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/**\n * set the default image for a user\n * \n * @param profile\n *            profile\n */\n", "func_signal": "public void forUser(final Profile profile)", "code": "{\n\tprofile.changeImage(getImageData(\"user-125.png\"));\n\tprofile.changeThumb(getImageData(\"user-75.png\"));\n}", "path": "src\\main\\java\\com\\socialsite\\image\\DefaultImage.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/**\n * sets the default image for a university\n * \n * @param university\n *            university\n */\n", "func_signal": "public void forUniversity(final University university)", "code": "{\n\tuniversity.changeImage(getImageData(\"university-125.png\"));\n\tuniversity.changeThumb(getImageData(\"university-75.png\"));\n}", "path": "src\\main\\java\\com\\socialsite\\image\\DefaultImage.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/**\n * gets the image as byte array\n * \n * @param name\n *            name of the image file\n * @return byte array of the image\n */\n", "func_signal": "public byte[] getImageData(final String name)", "code": "{\n\tfinal PackageResource imageRef = PackageResource.get(getClass(), name);\n\ttry\n\t{\n\t\treturn IOUtils.toByteArray(imageRef.getResourceStream().getInputStream());\n\t}\n\tcatch (final IOException e)\n\t{\n\t\tLogger.getLogger(getClass().getName()).log(Level.SEVERE, null, e);\n\t}\n\tcatch (final ResourceStreamNotFoundException e)\n\t{\n\t\tLogger.getLogger(getClass().getName()).log(Level.SEVERE, null, e);\n\t}\n\treturn null;\n}", "path": "src\\main\\java\\com\\socialsite\\image\\DefaultImage.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/**\n * \n * @param id\n *            component id\n * @param model\n *            university model\n */\n", "func_signal": "public SearchUniversityInfo(final String id, final IModel<University> model)", "code": "{\n\tsuper(id);\n\tfinal University university = model.getObject();\n\tfinal UniversityLink universityLink;\n\tadd(new ImagePanel(\"image\", university.getId(), ImageType.UNIVERSITY, university\n\t\t\t.getLastModified(), false, false));\n\tadd(universityLink = new UniversityLink(\"university\", model));\n\tuniversityLink.add(new Label(\"name\", university.getName()));\n\tadd(new Label(\"students\", universityDao.getStudentsCount(university.getId()) + \"\"));\n\tadd(new Label(\"courses\", university.getCourses().size() + \"\"));\n}", "path": "src\\main\\java\\com\\socialsite\\search\\SearchUniversityInfo.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/**\n * run this method to load some data for the site\n */\n", "func_signal": "@Test\n@NotTransactional\npublic void load()", "code": "{\n\n\t// clear the database\n\tSchemaCreator.create();\n\n\t// create some students\n\tfinal User user1 = new Student(\"user1\", \"password\");\n\tfinal User user2 = new Student(\"user2\", \"password\");\n\tfinal User user3 = new Student(\"user3\", \"password\");\n\tfinal User user4 = new Student(\"user4\", \"password\");\n\tfinal User user5 = new Student(\"user5\", \"password\");\n\tfinal User user6 = new Student(\"user6\", \"password\");\n\tfinal User user7 = new Student(\"user7\", \"password\");\n\tfinal User user8 = new Student(\"user8\", \"password\");\n\tfinal User user9 = new Student(\"user9\", \"password\");\n\tfinal User user10 = new Student(\"user10\", \"password\");\n\tfinal User user11 = new Student(\"user11\", \"password\");\n\tfinal User user12 = new Student(\"user12\", \"password\");\n\tfinal User user13 = new Student(\"user13\", \"password\");\n\tfinal User user14 = new Student(\"user14\", \"password\");\n\tfinal User user15 = new Student(\"user15\", \"password\");\n\tsaveUsers(user1, user2, user3, user4, user5, user6, user7, user8, user9, user10, user11,\n\t\t\tuser12, user13, user14, user15);\n\n\t// create the profiles\n\tcreateProfiles(user1, user2, user3, user4, user5, user6, user7, user8, user9, user10,\n\t\t\tuser11, user12, user13, user14, user15);\n\t// add some friends for all users\n\tsetFriend(user1, user2, user3, user4, user6, user7, user8, user9, user10, user11, user12);\n\tsetFriend(user2, user3, user4, user5, user6, user7, user8, user9, user10, user12);\n\tsetFriend(user3, user5);\n\tsaveUsers(user1, user2, user3, user4, user5, user6, user7, user8, user9, user10, user11,\n\t\t\tuser12, user13, user14, user15);\n\n\t// create admin for university\n\tfinal Admin admin1 = new Admin(\"admin1\", \"password\");\n\tfinal Admin admin2 = new Admin(\"admin2\", \"password\");\n\tfinal Admin admin3 = new Admin(\"admin3\", \"password\");\n\tfinal Admin admin4 = new Admin(\"admin4\", \"password\");\n\tfinal Admin admin5 = new Admin(\"admin5\", \"password\");\n\tfinal Admin admin6 = new Admin(\"admin6\", \"password\");\n\tfinal Admin admin7 = new Admin(\"admin7\", \"password\");\n\tfinal Admin admin8 = new Admin(\"admin8\", \"password\");\n\tfinal Admin admin9 = new Admin(\"admin9\", \"password\");\n\tfinal Admin admin10 = new Admin(\"admin10\", \"password\");\n\tfinal Admin admin11 = new Admin(\"admin11\", \"password\");\n\tfinal Admin admin12 = new Admin(\"admin12\", \"password\");\n\tfinal Admin admin13 = new Admin(\"admin13\", \"password\");\n\n\tsaveUsers(admin1, admin2, admin3, admin4, admin5, admin6, admin7, admin8, admin9, admin10,\n\t\t\tadmin11, admin12, admin13);\n\tcreateProfiles(admin1, admin2, admin3, admin4, admin5, admin6, admin7, admin8, admin9,\n\t\t\tadmin10, admin11, admin12, admin13);\n\n\t// create universities\n\tfinal University university1 = new University(\"University1\", admin1);\n\tfinal University university2 = new University(\"University2\", admin2);\n\tfinal University university3 = new University(\"University3\", admin2);\n\tfinal University university4 = new University(\"University4\", admin2);\n\tfinal University university5 = new University(\"University5\", admin2);\n\tfinal University university6 = new University(\"University6\", admin2);\n\tfinal University university7 = new University(\"University7\", admin2);\n\tfinal University university8 = new University(\"University8\", admin2);\n\tfinal University university9 = new University(\"University9\", admin2);\n\tfinal University university10 = new University(\"University10\", admin2);\n\tfinal University university11 = new University(\"University11\", admin2);\n\tfinal University university12 = new University(\"University12\", admin2);\n\tfinal University university13 = new University(\"University13\", admin2);\n\tfinal University university14 = new University(\"University14\", admin2);\n\tfinal University university15 = new University(\"University15\", admin2);\n\n\tsetDefaultImage(university1, university2, university3, university4, university5,\n\t\t\tuniversity6, university7, university8, university9, university10, university11,\n\t\t\tuniversity12, university13, university14, university15);\n\tsaveUniversities(university1, university2, university3, university4, university5,\n\t\t\tuniversity6, university7, university8, university9, university10, university11,\n\t\t\tuniversity12, university13, university14, university15);\n\n\t// staffs\n\tfinal Staff staff1 = new Staff(\"staff1\", \"password\", university1);\n\tfinal Staff staff2 = new Staff(\"staff2\", \"password\", university2);\n\tfinal Staff staff3 = new Staff(\"staff3\", \"password\", university2);\n\tfinal Staff staff4 = new Staff(\"staff4\", \"password\", university2);\n\tfinal Staff staff5 = new Staff(\"staff5\", \"password\", university2);\n\tfinal Staff staff6 = new Staff(\"staff6\", \"password\", university2);\n\tfinal Staff staff7 = new Staff(\"staff7\", \"password\", university2);\n\tfinal Staff staff8 = new Staff(\"staff8\", \"password\", university2);\n\tfinal Staff staff9 = new Staff(\"staff9\", \"password\", university2);\n\tfinal Staff staff10 = new Staff(\"staff10\", \"password\", university2);\n\tfinal Staff staff11 = new Staff(\"staff11\", \"password\");\n\tfinal Staff staff12 = new Staff(\"staff12\", \"password\", university3);\n\tfinal Staff staff13 = new Staff(\"staff13\", \"password\", university3);\n\tfinal Staff staff14 = new Staff(\"staff14\", \"password\", university3);\n\tfinal Staff staff15 = new Staff(\"staff15\", \"password\", university4);\n\tfinal Staff staff16 = new Staff(\"staff16\", \"password\", university4);\n\tfinal Staff staff17 = new Staff(\"staff17\", \"password\", university4);\n\tfinal Staff staff18 = new Staff(\"staff18\", \"password\", university6);\n\tfinal Staff staff19 = new Staff(\"staff19\", \"password\", university6);\n\tfinal Staff staff20 = new Staff(\"staff20\", \"password\", university7);\n\tfinal Staff staff21 = new Staff(\"staff21\", \"password\", university8);\n\tfinal Staff staff22 = new Staff(\"staff22\", \"password\", university9);\n\tfinal Staff staff23 = new Staff(\"staff23\", \"password\", university10);\n\tfinal Staff staff24 = new Staff(\"staff24\", \"password\", university2);\n\tfinal Staff staff25 = new Staff(\"staff25\", \"password\", university2);\n\tfinal Staff staff26 = new Staff(\"staff26\", \"password\", university2);\n\tfinal Staff staff27 = new Staff(\"staff27\", \"password\", university2);\n\tfinal Staff staff28 = new Staff(\"staff28\", \"password\", university2);\n\tfinal Staff staff29 = new Staff(\"staff29\", \"password\", university2);\n\tfinal Staff staff30 = new Staff(\"staff30\", \"password\", university2);\n\tfinal Staff staff31 = new Staff(\"staff32\", \"password\", university2);\n\n\n\tsaveUsers(staff1, staff2, staff3, staff4, staff5, staff6, staff7, staff8, staff9, staff10,\n\t\t\tstaff11, staff12, staff13, staff14, staff15, staff16, staff17, staff18, staff19,\n\t\t\tstaff20, staff21, staff22, staff23, staff24, staff25, staff26, staff27, staff28,\n\t\t\tstaff29, staff30, staff31);\n\tsaveUniversities(university1, university2, university3, university4, university5,\n\t\t\tuniversity6, university7, university8, university9, university10, university11,\n\t\t\tuniversity12, university13, university14, university15);\n\tcreateProfiles(staff1, staff2, staff3, staff4, staff5, staff6, staff7, staff8, staff9,\n\t\t\tstaff10, staff11, staff12, staff13, staff14, staff15, staff16, staff17, staff18,\n\t\t\tstaff19, staff20, staff21, staff22, staff23, staff24, staff25, staff26, staff27,\n\t\t\tstaff28, staff29, staff30, staff31);\n\n\n\t// courses\n\tfinal Course course1 = new Course(\"course1\", staff1);\n\tfinal Course course2 = new Course(\"course2\", staff2);\n\tfinal Course course3 = new Course(\"course3\", staff3);\n\tfinal Course course4 = new Course(\"course4\", staff1);\n\tfinal Course course5 = new Course(\"course5\", staff1);\n\tfinal Course course6 = new Course(\"course6\", staff1);\n\tfinal Course course7 = new Course(\"course7\", staff4);\n\tfinal Course course8 = new Course(\"course8\", staff5);\n\tfinal Course course9 = new Course(\"course9\", staff6);\n\tfinal Course course10 = new Course(\"course10\", staff7);\n\tfinal Course course11 = new Course(\"course11\", staff8);\n\tfinal Course course12 = new Course(\"course12\", staff4);\n\tfinal Course course13 = new Course(\"course13\", staff23);\n\tfinal Course course14 = new Course(\"course14\", staff12);\n\tfinal Course course15 = new Course(\"course15\", staff3);\n\tfinal Course course16 = new Course(\"course16\", staff3);\n\tfinal Course course17 = new Course(\"course17\", staff3);\n\tfinal Course course18 = new Course(\"course18\", staff3);\n\tfinal Course course19 = new Course(\"course19\", staff3);\n\tfinal Course course20 = new Course(\"course20\", staff3);\n\tfinal Course course21 = new Course(\"course21\", staff3);\n\tfinal Course course22 = new Course(\"course22\", staff17);\n\tfinal Course course23 = new Course(\"course23\", staff7);\n\tfinal Course course24 = new Course(\"course24\", staff7);\n\tfinal Course course25 = new Course(\"course25\", staff7);\n\tfinal Course course26 = new Course(\"course26\", staff7);\n\tfinal Course course27 = new Course(\"course27\", staff7);\n\tfinal Course course28 = new Course(\"course28\", staff7);\n\tfinal Course course29 = new Course(\"course29\", staff1);\n\tfinal Course course30 = new Course(\"course30\", staff1);\n\tfinal Course course31 = new Course(\"course31\", staff1);\n\tfinal Course course32 = new Course(\"course32\", staff1);\n\tfinal Course course33 = new Course(\"course33\", staff1);\n\tfinal Course course34 = new Course(\"course34\", staff1);\n\tfinal Course course35 = new Course(\"course35\", staff1);\n\tfinal Course course36 = new Course(\"course36\", staff1);\n\tfinal Course course37 = new Course(\"course37\", staff1);\n\tfinal Course course38 = new Course(\"course38\", staff1);\n\tfinal Course course39 = new Course(\"course39\", staff1);\n\tsetDefaultImage(course1, course2, course3, course4, course5, course6, course7, course8,\n\t\t\tcourse9, course10, course11, course12, course13, course14, course15, course16,\n\t\t\tcourse17, course16, course17, course18, course19, course20, course21, course22,\n\t\t\tcourse23, course24, course25, course26, course27, course28, course29, course30,\n\t\t\tcourse31, course32, course33, course34, course35, course36, course37, course38,\n\t\t\tcourse39);\n\tsaveCourses(course1, course2, course3, course4, course5, course6, course7, course8,\n\t\t\tcourse9, course10, course11, course12, course13, course14, course15, course16,\n\t\t\tcourse17, course16, course17, course18, course19, course20, course21, course22,\n\t\t\tcourse23, course24, course25, course26, course27, course28, course29, course30,\n\t\t\tcourse31, course32, course33, course34, course35, course36, course37, course38,\n\t\t\tcourse39);\n\tsaveUniversities(university1, university2, university3, university4, university5,\n\t\t\tuniversity6, university7, university8, university9, university10, university11,\n\t\t\tuniversity12, university13, university14, university15);\n\n\n\tjoinCourse(user1, course1, course10, course3, course4, course5, course6, course7, course8,\n\t\t\tcourse9, course10);\n\tjoinCourse(user2, course1, course10, course3, course4, course5, course6, course7, course8,\n\t\t\tcourse9, course10);\n\tjoinCourse(user3, course1, course10, course3, course4, course5, course6, course7, course8,\n\t\t\tcourse9, course10);\n\tjoinCourse(user4, course1, course10, course3, course21, course5, course6, course7, course8,\n\t\t\tcourse9, course10);\n\tjoinCourse(user5, course1, course12, course3, course22, course5, course6, course7, course8,\n\t\t\tcourse9, course10);\n\tjoinCourse(user6, course1, course16, course3, course4, course5, course6, course7, course8,\n\t\t\tcourse9, course10);\n\tjoinCourse(user7, course1, course17, course3, course23, course5, course6, course7, course8,\n\t\t\tcourse9, course10);\n\tjoinCourse(user8, course1, course19, course3, course22, course5, course6, course7, course8,\n\t\t\tcourse9, course10);\n\tjoinCourse(user9, course1, course20, course3, course11, course5, course6, course7, course8,\n\t\t\tcourse9, course10);\n\tjoinCourse(user10, course1, course10, course3, course4, course5, course6, course7, course8,\n\t\t\tcourse9, course10);\n\tjoinCourse(user11, course1, course10, course3, course4, course5, course6, course7, course8,\n\t\t\tcourse9, course10);\n\n\n\t// Questions\n\tfinal Question question1 = new Question(\"sample Question1\", course1, user1);\n\tquestion1.setText(\"<b>This is a sample Question1</b><em>this is em</em><p>new paragraph\");\n\tfinal Question question2 = new Question(\"sample Question2\", course1, user1);\n\tquestion2.setText(\"This is a sample Question2\");\n\tsaveQuestion(question1, question2);\n\n\tfinal QuestionInfoMsg questioninfoMsg1 = new QuestionInfoMsg();\n\tquestioninfoMsg1.setQuestion(question1);\n\tquestioninfoMsg1.setUsers(new HashSet<User>(course1.getStudents()));\n\tquestioninfoMsg1.setTime(new Date());\n\tfinal QuestionInfoMsg questioninfoMsg2 = new QuestionInfoMsg();\n\tquestioninfoMsg2.setQuestion(question2);\n\tquestioninfoMsg2.setUsers(new HashSet<User>(course1.getStudents()));\n\tquestioninfoMsg2.setTime(new Date());\n\tsaveMessage(questioninfoMsg1, questioninfoMsg2);\n\n\n\t// Answers\n\tfinal Answer answer1 = new Answer(question1, user2);\n\tanswer1.setText(\"this is a sample answer1\");\n\tfinal Answer answer2 = new Answer(question1, user3);\n\tanswer2.setText(\"this is a sample answer2\");\n\tsaveAnswers(answer1, answer2);\n\n\n\t// messages\n\tfinal InfoMsg infoMsg1 = new InfoMsg();\n\tinfoMsg1.setMessage(\"This is a info message\");\n\tinfoMsg1.setSender(user1);\n\t// multicast\n\tinfoMsg1.addUser(user2);\n\tinfoMsg1.addUser(user3);\n\tinfoMsg1.addUser(user4);\n\tinfoMsg1.addUser(user5);\n\tinfoMsg1.setTime(new Date());\n\n\tfinal InfoMsg infoMsg2 = new InfoMsg();\n\tinfoMsg2.setMessage(\"Hi to all friends\");\n\tinfoMsg2.setSender(user1);\n\t// if you take the set from the user and assign it to the message\n\t// hibernate removes the set from the user(???).So create a new Set\n\tinfoMsg2.setUsers(new HashSet<User>(user1.getFriends()));\n\tinfoMsg2.setTime(new Date());\n\n\tfinal InfoMsg infoMsg3 = new InfoMsg();\n\tinfoMsg3.setMessage(\" user1\");\n\tinfoMsg3.setSender(user2);\n\tinfoMsg3.addUser(user1);\n\tinfoMsg3.setTime(new Date());\n\n\t// friend reques message\n\tfinal FriendRequestMsg frnRqMsg = new FriendRequestMsg();\n\tfrnRqMsg.setSender(user5);\n\tfrnRqMsg.addUser(user1);\n\tfrnRqMsg.setMessage(\"Hai User1\");\n\tfrnRqMsg.setTime(new Date());\n\n\tsaveMessage(infoMsg1, infoMsg2, infoMsg3, frnRqMsg);\n\n\n}", "path": "src\\test\\java\\com\\socialsite\\scripts\\LoadData.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see com.socialsite.dao.AnswerDao#getAnswersCount(long)\n */\n", "func_signal": "public int getAnswersCount(final long questionId)", "code": "{\n\tfinal Criteria criteria = getSession().createCriteria(domainClass);\n\tcriteria.add(Restrictions.eq(\"question.id\", questionId));\n\tcriteria.setProjection(Projections.rowCount());\n\treturn (Integer)criteria.uniqueResult();\n}", "path": "src\\main\\java\\com\\socialsite\\dao\\hibernate\\AnswerDaoImpl.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/**\n * creates a detachable Domain object\n * \n * @param domain\n *            detachable Domain object\n * @param dao\n *            Dao to acces the Domain object\n */\n", "func_signal": "public EntityModel(final T domain, final AbstractDao<T> dao)", "code": "{\n\tsuper(domain);\n\tthis.dao = dao;\n}", "path": "src\\main\\java\\com\\socialsite\\entitymodel\\EntityModel.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/**\n * sets the default image for a course\n * \n * @param course\n *            course\n */\n", "func_signal": "public void forCourse(final Course course)", "code": "{\n\tcourse.changeImage(getImageData(\"course-125.png\"));\n\tcourse.changeThumb(getImageData(\"course-75.png\"));\n}", "path": "src\\main\\java\\com\\socialsite\\image\\DefaultImage.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/**\n * returns the Domain if available or fetch it from the database\n * \n * @return Domain\n */\n", "func_signal": "@Override\nprotected T load()", "code": "{\n\tif (domain == null)\n\t{\n\t\tdomain = dao.load(id);\n\t}\n\treturn domain;\n}", "path": "src\\main\\java\\com\\socialsite\\entitymodel\\EntityModel.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/**\n * changes the profile image\n * \n * @param image\n *            image data in byte[]\n */\n", "func_signal": "public void changeImage(final byte[] image)", "code": "{\n\tthis.image = image;\n\tsetLastModified(new Date());\n}", "path": "src\\main\\java\\com\\socialsite\\persistence\\University.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/**\n * constructor\n */\n", "func_signal": "public LogoutPage()", "code": "{\n\tsuper();\n\n\t// invalidates the session\n\tgetSession().invalidate();\n\t// redirects the user to login page\n\tsetResponsePage(LoginPage.class);\n}", "path": "src\\main\\java\\com\\socialsite\\authentication\\LogoutPage.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/**\n * @see com.socialsite.dao.MessageDao#getMessage(User, int, int)\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic List<T> getMessage(final User user, final int first, final int count)", "code": "{\n\tfinal Query query = getSession().createQuery(\n\t\t\t\" select m from Message m , User u \"\n\t\t\t\t\t+ \" where u = :user and u member of m.users order by m.time desc\");\n\tquery.setParameter(\"user\", user);\n\tquery.setFirstResult(first);\n\tquery.setMaxResults(count);\n\treturn query.list();\n}", "path": "src\\main\\java\\com\\socialsite\\dao\\hibernate\\MessageDaoImpl.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * com.socialsite.dao.hibernate.AbstractImageDaoImpl#getLastModifiedTime\n * (long)\n */\n", "func_signal": "@Override\npublic Date getLastModifiedTime(final long id)", "code": "{\n\tfinal Criteria criteria = getSession().createCriteria(User.class);\n\tcriteria.add(Restrictions.idEq(id));\n\tcriteria.setProjection(Projections.property(\"lastModified\"));\n\treturn (Date)criteria.uniqueResult();\n}", "path": "src\\main\\java\\com\\socialsite\\dao\\hibernate\\ProfileDaoImpl.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/**\n * constructor\n * \n * @param id\n *            component id\n * @param model\n *            user model object\n */\n", "func_signal": "public UserLink(final String id, final IModel<T> model)", "code": "{\n\tsuper(id, model);\n\tInjectorHolder.getInjector().inject(this);\n}", "path": "src\\main\\java\\com\\socialsite\\user\\UserLink.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see com.socialsite.image.AbstractImageResource#getImageDao()\n */\n", "func_signal": "@Override\npublic AbstractImageDao<Course> getImageDao()", "code": "{\n\tif (courseDao == null)\n\t{\n\t\t// inject the spring dao\n\t\tInjectorHolder.getInjector().inject(this);\n\t}\n\treturn courseDao;\n}", "path": "src\\main\\java\\com\\socialsite\\image\\CourseImageResource.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/**\n * I cann't send email through smtp. So here i am sending mail through a\n * proxy server. To send email through smtp server change this\n * implementation\n * \n * @param email\n */\n", "func_signal": "public void send(final Email email)", "code": "{\n\t// TODO this should run asynchronously\n\t// handle multiple receivers\n\taddParam(\"receiver\", email.getReceivers().get(0));\n\t// someone is going to send email using this thing\n\taddParam(\"secret\", \"dontMESSwithme\");\n\taddParam(\"msg\", email.getMessage());\n\taddParam(\"subject\", email.getSubject());\n\n\n\ttry\n\t{\n\n\t\tfinal URL url = new URL(ACTIVATE_URL + emailURL.toString());\n\t\tfinal BufferedReader reader = new BufferedReader(\n\t\t\t\tnew InputStreamReader(url.openStream()));\n\t\tString line;\n\t\tfinal StringBuffer reply = new StringBuffer();\n\t\twhile ((line = reader.readLine()) != null)\n\t\t{\n\t\t\treply.append(line);\n\t\t}\n\t\treader.close();\n\n\t\tif (!reply.toString().equals(\"message send successfully\"))\n\t\t{\n\t\t\t// message sending failed\n\t\t\tlogger.severe(\"Could not send Email\");\n\t\t\tlogger.severe(reply.toString());\n\t\t\tlogger.severe(\"URL\" + ACTIVATE_URL + emailURL.toString());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlogger.info(\"email send successfully\");\n\t\t}\n\n\t}\n\tcatch (final MalformedURLException e)\n\t{\n\t\tlogger.log(Level.SEVERE, \"\", e);\n\t}\n\tcatch (final IOException e)\n\t{\n\t\tlogger.log(Level.SEVERE, \"\", e);\n\t}\n}", "path": "src\\main\\java\\com\\socialsite\\email\\EmailSender.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/**\n * \n * @param component\n *            component id\n * @param id\n *            id used to fetch the image\n * @param imageType\n *            type of the image (userimage , courseimage etc)\n * @param thumb\n *            will show thumb image if true\n * @param lastModified\n *            lastmodified date of the image\n */\n", "func_signal": "public ImagePanel(final String component, final long id, final ImageType imageType,\n\t\tfinal Date lastModified, final boolean thumb, final boolean changeLink)", "code": "{\n\tsuper(component);\n\n\n\tthis.changeLink = changeLink;\n\n\t// allow the modal window to update the panel\n\tsetOutputMarkupId(true);\n\tfinal ResourceReference imageResource = new ResourceReference(imageType.name());\n\tfinal Image userImage;\n\tfinal ValueMap valueMap = new ValueMap();\n\tvalueMap.add(\"id\", id + \"\");\n\n\t// the version is used to change the url dynamically if the image is\n\t// changed. This will allow the browser to cache images\n\t// reference http://code.google.com/speed/page-speed/docs/caching.html\n\t// #Use fingerprinting to dynamically enable caching.\n\tvalueMap.add(\"version\", lastModified.getTime() + \"\");\n\tif (thumb)\n\t{\n\t\tvalueMap.add(\"thumb\", \"true\");\n\t}\n\tadd(userImage = new Image(\"userimage\", imageResource, valueMap));\n\tuserImage.setOutputMarkupId(true);\n\n\tfinal ModalWindow modal;\n\tadd(modal = new ModalWindow(\"modal\"));\n\n\tmodal.setContent(new UploadPanel(modal.getContentId())\n\t{\n\n\t\t/**\n\t\t * \n\t\t */\n\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t@Override\n\t\tpublic String onFileUploaded(final FileUpload upload)\n\t\t{\n\n\t\t\tif (upload == null || upload.getSize() == 0)\n\t\t\t{\n\t\t\t\t// No image was provided\n\t\t\t\terror(\"Please upload an image.\");\n\t\t\t}\n\t\t\telse if (!checkContentType(upload.getContentType()))\n\t\t\t{\n\t\t\t\terror(\"Only images of types png, jpg, and gif are allowed.\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsaveImage(upload.getBytes());\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic void onUploadFinished(final AjaxRequestTarget target, final String filename,\n\t\t\t\tfinal String newFileUrl)\n\t\t{\n\n\t\t\tfinal ResourceReference imageResource = new ResourceReference(imageType.name());\n\n\n\t\t\tfinal ValueMap valueMap = new ValueMap();\n\t\t\tvalueMap.add(\"id\", id + \"\");\n\t\t\t// change the image lively\n\t\t\tvalueMap.add(\"version\", new Date().getTime() + \"\");\n\t\t\tif (thumb)\n\t\t\t{\n\t\t\t\tvalueMap.add(\"thumb\", \"true\");\n\t\t\t}\n\n\t\t\tuserImage.setImageResourceReference(imageResource, valueMap);\n\t\t\t// update the image after the user changes it\n\t\t\ttarget.addComponent(userImage);\n\t\t}\n\t});\n\tmodal.setTitle(\" Select the image \");\n\tmodal.setCookieName(\"modal\");\n\n\tmodal.setCloseButtonCallback(new ModalWindow.CloseButtonCallback()\n\t{\n\t\t/**\n\t\t * \n\t\t */\n\t\tprivate static final long serialVersionUID = 1L;\n\n\t\tpublic boolean onCloseButtonClicked(final AjaxRequestTarget target)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t});\n\n\tmodal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback()\n\t{\n\t\t/**\n\t\t * \n\t\t */\n\t\tprivate static final long serialVersionUID = 1L;\n\n\t\tpublic void onClose(final AjaxRequestTarget target)\n\t\t{\n\t\t}\n\t});\n\n\tadd(new AjaxLink<Void>(\"changeimage\")\n\t{\n\t\t/**\n\t\t * \n\t\t */\n\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t@Override\n\t\tpublic boolean isVisible()\n\t\t{\n\t\t\tif (changeLink)\n\t\t\t{\n\t\t\t\t// TODO allow admins to change the university image and\n\t\t\t\t// allow\n\t\t\t\t// staffs to change the course image\n\t\t\t\t// it. don't show it for thumb images\n\t\t\t\treturn hasRole(SocialSiteRoles.OWNER) || hasRole(SocialSiteRoles.STAFF);\n\t\t\t}\n\t\t\treturn false;\n\n\t\t}\n\n\t\t@Override\n\t\tpublic void onClick(final AjaxRequestTarget target)\n\t\t{\n\t\t\tmodal.show(target);\n\t\t}\n\t});\n}", "path": "src\\main\\java\\com\\socialsite\\image\\ImagePanel.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/**\n * changes the thumb\n * \n * @param thumb\n *            thumb data in byte[]\n */\n", "func_signal": "public void changeThumb(final byte[] thumb)", "code": "{\n\tthis.thumb = thumb;\n\tsetLastModified(new Date());\n}", "path": "src\\main\\java\\com\\socialsite\\persistence\\University.java", "repo_name": "ananthakumaran/socialsite", "stars": 5, "license": "None", "language": "java", "size": 2333}
{"docstring": "/**\tIncreases the capacity of this IntArray instance, if necessary, \n * to ensure that it can hold at least the number of elements specified by the \n * minimum capacity argument. \n * \n * @param minCapacity the minimum capacity. If this value is smaller than the current\n *\tarray size, it will be ignored.\n */\n", "func_signal": "public void ensureCapacity(int minCapacity)", "code": "{\n\tif (minCapacity <= fArray.length)\n\t\treturn;\n\tint newBlocks = (minCapacity+kBlockSize-1) / kBlockSize;\n\tallocate(newBlocks*kBlockSize);\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/**\tReplaces the element at the specified position in this list with the \n * specified element. \n * \n * @param index the position in the array\n * @param element the new element\n * @exception IndexOutOfBoundsException if index < 0\n */\n", "func_signal": "public int set(int index, int element)", "code": "{\n\tif (index < 0)\n\t\tthrow new IndexOutOfBoundsException();\n\tif (index >= fSize) {\n\t\tensureCapacity(index+1);\n\t\tfSize = index+1;\n\t}\n\treturn fArray[index] = element;\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/**\n * Copies an array.\n */\n", "func_signal": "public static final void arraycopy(String[] from, int from_idx, int[] to, int to_idx, int length)", "code": "{\n\twhile (length-- > 0)\t\t\n\t\tto[to_idx++] = Integer.parseInt(from[from_idx++].trim());\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/**\tInserts the specified element at the specified position in this array. \n * \n * @param index the index in the array. If index is larger than the current size,\n *\tthe array grows automatically.\n * @param element the element to be inserted\n * @exception IndexOutOfBoundsException if index < 0\n */\n", "func_signal": "public void add(int index, int element)", "code": "{\n\tif (index<0)\n\t\tthrow new IndexOutOfBoundsException();\n\t\n\tif (index>=fSize) {\n\t\tensureCapacity(index+1);\n\t\tfSize = index+1;\n\t}\n\telse {\n\t\tensureCapacity(fSize+1);\n\t\tSystem.arraycopy(fArray,index, fArray,index+1, fSize-index);\n\t\tfSize++;\n\t}\n\tfArray[index] = element;\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/**\tReturns the element at the specified position in this array (startin at 0).\n * \n * @param index the index in the array\n * @exception IndexOutOfBoundsException if index < 0 or index >= size()\n */\n", "func_signal": "public int get(int index)", "code": "{\n\tif (index < 0 || index >= fSize)\n\t\tthrow new IndexOutOfBoundsException(\"index: \" + index + \" - size: \" + fSize);\n\treturn fArray[index];\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/** Removes the element at the specified position in this list. \n * \n * @param index the position in the list\n */\n", "func_signal": "public int remove(int index)", "code": "{\n\tint result = get(index);\n\tremoveRange(index,index+1);\n\treturn result;\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/**\tReturns an int[] array containing all of the elements in this list in the\n * correct order.\n */\n", "func_signal": "public int[] toArray()", "code": "{\n\tint[] copy = new int[fSize];\n\tSystem.arraycopy(fArray,0, copy,0,fSize);\n\treturn copy;\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/**\tReturns a copy of this IntArray instance. \n */\n", "func_signal": "public Object clone()", "code": "{\n\tIntArray clone = new IntArray(fArray.length);\n\tclone.addAll(0, fArray,0,fSize);\n\treturn clone;\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/** Returns the index of the last occurrence of the specified object in this list. \n * \n * @param elem the element to look for\n */\n", "func_signal": "public int lastIndexOf(int elem)", "code": "{\n\tfor (int i=fSize-1; i>=0; i--)\n\t\tif (fArray[i]==elem)\n\t\t\treturn i;\n\treturn -1;\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/**\tAppends all of the elements in the specified array to the end of this array. \n * \n * @param elems the elements to be added\n */\n", "func_signal": "public void addAll(IntArray elems)", "code": "{\n\tif (elems!=null)\n\t\taddAll(fSize, elems.fArray, 0, elems.size());\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/**\tReturns a String representation of this array. Elements are separated by commas\n * and enclosed in parenthesis. An empty array returns \"()\".\n * <p>\n * Example: \"(1,2,3,4)\"\n */\n", "func_signal": "public String toString()", "code": "{\n\tStringBuffer buf = new StringBuffer(\"(\");\n\tbuf.append(arrayToString(fArray,0,fSize,\",\"));\n\tbuf.append(\")\");\n\treturn buf.toString();\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/**\tConstructs an empty array with the specified initial capacity. \n * \n * @param initialCapacity the initial capacity of the array\n */\n", "func_signal": "public IntArray(int initialCapacity)", "code": "{\n\tfArray = new int[initialCapacity];\n\tfSize = 0;\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/**\tSearches for the first occurence of the given argument. \n * \n * @param elem the element to look for\n */\n", "func_signal": "public int indexOf(int elem)", "code": "{\n\tfor (int i=0; i<fSize; i++)\n\t\tif (fArray[i]==elem)\n\t\t\treturn i;\n\treturn -1;\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/**\tReturns a String representation of this array. Elements are separated by commas\n * and enclosed in parenthesis. An empty array returns \"null\".\n * <p>\n * Example: \"(1,2,3,4)\"\n */\n", "func_signal": "public static String toString(IntArray array)", "code": "{\n\tif (array==null || array.isEmpty())\n\t\treturn null;\n\telse\n\t\treturn array.toString();\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/** Removes from this List all of the elements whose index is between fromIndex, \n * inclusive and toIndex, exclusive. \n * \n * @param fromIndex the starting index (inclusive)\n * @param toIndex the end index (exclusive)\n * @exception IndexOutOfBoundsException if fromIndex < 0, or toIndex > size(),\n *\tor fromIndex > toIndex\n */\n", "func_signal": "public void removeRange(int fromIndex, int toIndex)", "code": "{\n\tif (fromIndex < 0 || toIndex > fSize || fromIndex > toIndex)\n\t\tthrow new IndexOutOfBoundsException();\n\t\n\tint remSize = toIndex-fromIndex;\n\tSystem.arraycopy(fArray,toIndex, fArray,fromIndex, fSize-toIndex);\n\tfSize -= remSize;\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/**\tInserts a subset of the elements in the specified array into this array, \n * starting at the specified position. \n * \n * @param index the index in this array where the new elements will be inserted\n * @param elems the new elements\n * @param start the start index in elements\n * @param length the number of elements to be added\n * \n * @exception IndexOutOfBoundsException if index < 0, or start+length > elements.length\n */\n", "func_signal": "public void addAll(int index, int[] elems, int start, int length)", "code": "{\n\tif (elems==null)\n\t\treturn;\n\t\n\tif (index<0)\n\t\tthrow new IndexOutOfBoundsException();\n\t\n\tif (index>=fSize) {\n\t\tensureCapacity(index+length);\n\t\tfSize = index+length;\n\t}\n\telse {\n\t\tensureCapacity(fSize + length);\n\t\tSystem.arraycopy(fArray,index, fArray,index+length, fSize-index);\n\t\tfSize += length;\n\t}\n\tSystem.arraycopy(elems,0, fArray,start,length);\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "// -------- Methods ---------------------------------------------------------\n", "func_signal": "public static BookEntry merge(BookEntry entry1, BookEntry entry2)", "code": "{\n\tBookEntry merged_entry = new BookEntry();\n\tmerged_entry.move = entry1.move;\n\tmerged_entry.add(entry1);\n\tmerged_entry.add(entry2);\n\treturn merged_entry;\n}", "path": "code\\src\\java\\de\\jose\\book\\BookEntry.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/**\tTimer callback\t*/\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\ttry {\n\t\tif (! test())\n\t\t\tshowError();\n\t\telse\n\t\t\twrite();\n\t} catch (IOException e1) {\n\t\tApplication.error(e1);\n\t}\n\n}", "path": "code\\src\\java\\de\\jose\\FileWatch.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/** sets the capacity of the array\n */\n", "func_signal": "protected void allocate(int newCapacity)", "code": "{\n\tif (newCapacity == fArray.length) return;\n\n\tint[] copy = new int[newCapacity];\n\tSystem.arraycopy(fArray,0, copy,0, fSize);\n\tfArray = copy;\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/**\tAppends all of the elements in the specified array to the end of this array. \n * \n * @param elems the elements to be added\n */\n", "func_signal": "public void addAll(int[] elems)", "code": "{\n\tif (elems!=null)\n\t\taddAll(fSize, elems, 0, elems.length);\n}", "path": "code\\src\\java\\de\\jose\\util\\IntArray.java", "repo_name": "jumcclure/jose-chess", "stars": 5, "license": "None", "language": "java", "size": 188772}
{"docstring": "/**\n * Calculates graph metrics for the current Neo4j instance, creates a comma\n * separated metrics (.met) file and populates it.\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n * @param metricsPath\n *            {@link String} representing path to .met file\n */\n", "func_signal": "public static void writeMetricsCSV(GraphDatabaseService transNeo,\n\t\tString metricsPath)", "code": "{\n\n\ttry {\n\t\t// PRINTOUT\n\t\tlong time = System.currentTimeMillis();\n\t\tSystem.out.printf(\"Writing Metrics CSV File...\");\n\n\t\tFile metricsFile = new File(metricsPath);\n\t\tMetricsWriterUndirected\n\t\t\t\t.writeMetricsCSV(transNeo, metricsFile, null);\n\n\t\t// PRINTOUT\n\t\tSystem.out.printf(\"%s\", getTimeStr(System.currentTimeMillis()\n\t\t\t\t- time));\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Creates a Neo4j instance and populates it according to a generated graph\n * topology. Examples of possible topologies are random (\n * {@link GraphTopologyRandom}) and fully connected (\n * {@link GraphTopologyFullyConnected}) graphs.\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n * @param topology\n *            instance of {@link GraphTopology} the defines generated\n *            topology\n */\n", "func_signal": "public static void writeNeoFromTopology(GraphDatabaseService transNeo,\n\t\tGraphTopology topology)", "code": "{\n\n\ttry {\n\t\tPartitioner partitioner = new PartitionerAsSingle((byte) -1);\n\t\tGraphDatabaseServicesWriter dbWrapper = GraphDatabaseServicesWriter\n\t\t\t\t.createTransactionalWrapper(transNeo);\n\t\tstorePartitionedNodesAndRelsToNeo(dbWrapper, topology, partitioner);\n\t\tdbWrapper.shutdownIndex();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Deletes all {@link Node}s that do not have at least one\n * {@link Relationship} from the Neo4j instance.\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n */\n", "func_signal": "public static void removeOrphanNodes(GraphDatabaseService transNeo)", "code": "{\n\n\tlong time = System.currentTimeMillis();\n\tSystem.out.printf(\"Deleting orphan nodes...\");\n\n\tlong deletedNodes = 0;\n\n\tTransaction tx = transNeo.beginTx();\n\n\ttry {\n\t\tfor (Node node : transNeo.getAllNodes()) {\n\n\t\t\tif (node.hasRelationship() == true)\n\t\t\t\tcontinue;\n\n\t\t\tnode.delete();\n\n\t\t\tif (++deletedNodes % Consts.STORE_BUF == 0) {\n\t\t\t\ttx.success();\n\t\t\t\ttx.finish();\n\t\t\t\ttx = transNeo.beginTx();\n\t\t\t}\n\n\t\t}\n\n\t\ttx.success();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttx.finish();\n\t}\n\n\t// PRINTOUT\n\tSystem.out.printf(\"Deleted [%d]...%s\", deletedNodes, getTimeStr(System\n\t\t\t.currentTimeMillis()\n\t\t\t- time));\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Calculates graph metrics for the current Neo4j instance, creates a\n * metrics (.met) file and populates it.\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n * @param metricsPath\n *            {@link String} representing path to .met file\n */\n", "func_signal": "public static void writeMetrics(GraphDatabaseService transNeo,\n\t\tString metricsPath)", "code": "{\n\n\ttry {\n\t\t// PRINTOUT\n\t\tlong time = System.currentTimeMillis();\n\t\tSystem.out.printf(\"Writing Metrics File...\");\n\n\t\tFile metricsFile = new File(metricsPath);\n\t\tMetricsWriterUndirected.writeMetrics(transNeo, metricsFile);\n\n\t\t// PRINTOUT\n\t\tSystem.out.printf(\"%s\", getTimeStr(System.currentTimeMillis()\n\t\t\t\t- time));\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Creates a Neo4j instance and populates it from the contents of a GML\n * (.gml) file. GML files are basically an ASCII version of the GraphML\n * format.\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n * @param gmlPath\n *            {@link String} representing path to .gml file\n */\n", "func_signal": "public static void writeNeoFromGML(GraphDatabaseService transNeo,\n\t\tString gmlPath)", "code": "{\n\n\ttry {\n\t\tGraphReader parser = new GMLParserDirected(new File(gmlPath));\n\t\tPartitioner partitioner = new PartitionerAsSingle((byte) -1);\n\t\tGraphDatabaseServicesWriter dbWrapper = GraphDatabaseServicesWriter\n\t\t\t\t.createTransactionalWrapper(transNeo);\n\t\tstorePartitionedNodesAndRelsToNeo(dbWrapper, parser, partitioner);\n\t\tdbWrapper.shutdownIndex();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Creates a Neo4j instance and populates it from the contents of a Chaco\n * (.graph) file. Chaco files are basically persistent adjacency lists.\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n * @param graphPath\n *            {@link String} representing path to .graph file\n */\n", "func_signal": "public static void writeNeoFromChaco(GraphDatabaseService transNeo,\n\t\tString graphPath)", "code": "{\n\n\ttry {\n\t\tGraphReader parser = ChacoParserFactory.getChacoParser(graphPath);\n\t\tPartitioner partitioner = new PartitionerAsSingle((byte) -1);\n\t\tGraphDatabaseServicesWriter dbWrapper = GraphDatabaseServicesWriter\n\t\t\t\t.createTransactionalWrapper(transNeo);\n\t\tstorePartitionedNodesAndRelsToNeo(dbWrapper, parser, partitioner);\n\t\tdbWrapper.shutdownIndex();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Creates a Neo4j instance using the {@link BatchInserter}, then populates\n * it from the contents of a dataset with a proprietry binary file format,\n * which contains user follows/following connectivity data from Twitter. The\n * file was obtained by crawling Twitter for 300 hours.\n * \n * @param dbDir\n *            {@link String} representing the path to a Neo4j instance\n * @param twitterPath\n *            {@link String} representing path to Twitter dataset\n */\n", "func_signal": "public static void writeNeoFromTwitterDatasetBatch(String dbDir,\n\t\tString twitterPath)", "code": "{\n\n\ttry {\n\t\tGraphReader parser = new TwitterParser(new File(twitterPath));\n\t\tPartitioner partitioner = new PartitionerAsSingle((byte) -1);\n\t\tGraphDatabaseServicesWriter dbWrapper = GraphDatabaseServicesWriter\n\t\t\t\t.createBatchWrapper(dbDir);\n\t\tstorePartitionedNodesAndRelsToNeo(dbWrapper, parser, partitioner);\n\t\tdbWrapper.shutdownDbAndIndex();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Creates a Chaco file and populates it with the adjacency list\n * representation of the current Neo4j instance. Chaco files are assumed to\n * be undirected, this means edges are duplicated in each direction.\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n * @param chacoPath\n *            {@link String} representing path to .graph file\n * @param chacoType\n *            {@link ChacoType} specifies whether node and/or edge weights\n *            are written to the chaco file\n */\n", "func_signal": "public static void writeChaco(GraphDatabaseService transNeo,\n\t\tString chacoPath, ChacoType chacoType)", "code": "{\n\n\ttry {\n\t\tFile chacoFile = new File(chacoPath);\n\t\tGraphWriter chacoWriter = ChacoWriterFactory.getChacoWriter(\n\t\t\t\tchacoType, chacoFile);\n\t\twriteGraphToFile(transNeo, chacoWriter);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Deletes duplicate {@link Relationship}s (all but one {@link Relationship}\n * between any two {@link Node}s). Useful for reducing the size of a Neo4j\n * instance while maintaining the same basic connectivity/structure.\n * {@link Direction} is considered when identifying duplicates.\n * {@link RelationshipType} is NOT considered (they are all regarded as\n * equal).\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n * @param direction\n *            {@link Direction} which defines what a duplicate is. If\n *            direction equals {@link Direction#OUTGOING} then all but one\n *            outgoing {@link Relationship}s between any two {@link Node}s\n *            are kept. In this case two {@link Relationship}s may exist\n *            between a pair of {@link Node}s. If direction equals\n *            {@link Direction#BOTH} then all but one {@link Relationship}\n *            of any direction between any two {@link Node} s is kept.\n */\n", "func_signal": "public static void removeDuplicateRelationships(\n\t\tGraphDatabaseService transNeo, Direction direction)", "code": "{\n\n\tlong time = System.currentTimeMillis();\n\tSystem.out.printf(\"Deleting duplicate relationships...\");\n\n\tint deletedRels = 0;\n\n\tTransaction tx = transNeo.beginTx();\n\n\ttry {\n\t\tfor (Node node : transNeo.getAllNodes()) {\n\n\t\t\tHashSet<Long> neighbourIds = new HashSet<Long>();\n\n\t\t\tfor (Relationship relationship : node\n\t\t\t\t\t.getRelationships(direction)) {\n\n\t\t\t\tNode neighbour = relationship.getOtherNode(node);\n\n\t\t\t\t// Neighbour has not been seen previously\n\t\t\t\tif (neighbourIds.add(neighbour.getId()) == true)\n\t\t\t\t\tcontinue;\n\n\t\t\t\trelationship.delete();\n\n\t\t\t\tif (++deletedRels % Consts.STORE_BUF == 0) {\n\t\t\t\t\ttx.success();\n\t\t\t\t\ttx.finish();\n\t\t\t\t\ttx = transNeo.beginTx();\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\ttx.success();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttx.finish();\n\t}\n\n\t// PRINTOUT\n\tSystem.out.printf(\"Deleted [%d]...%s\", deletedRels, getTimeStr(System\n\t\t\t.currentTimeMillis()\n\t\t\t- time));\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Creates a Neo4j instance and populates it from the contents of a dataset\n * with a proprietry binary file format, which contains user\n * follows/following connectivity data from Twitter. The file was obtained\n * by crawling Twitter for 300 hours. Allocates {@link Node}s to\n * partitions/clusters. Allocation scheme is defined by the\n * {@link Partitioner} parameter.\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n * @param twitterPath\n *            {@link String} representing path to Twitter dataset\n * @param partitioner\n *            implementation of {@link Partitioner} that defines\n *            cluster/partition allocation scheme\n */\n", "func_signal": "public static void writeNeoFromTwitterDatasetAndPtn(\n\t\tGraphDatabaseService transNeo, String twitterPath,\n\t\tPartitioner partitioner)", "code": "{\n\n\ttry {\n\t\tGraphReader parser = new TwitterParser(new File(twitterPath));\n\t\tGraphDatabaseServicesWriter dbWrapper = GraphDatabaseServicesWriter\n\t\t\t\t.createTransactionalWrapper(transNeo);\n\t\tstorePartitionedNodesAndRelsToNeo(dbWrapper, parser, partitioner);\n\t\tdbWrapper.shutdownIndex();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Creates a GML (.gml) file and populates it with the representation of the\n * current Neo4j instance. All {@link Node} and {@link Relationship}\n * properties are written to the GML file.\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n * @param gmlPath\n *            {@link String} representing path to .gml file\n */\n", "func_signal": "public static void writeGMLFull(GraphDatabaseService transNeo,\n\t\tString gmlPath)", "code": "{\n\n\ttry {\n\t\tFile gmlFile = new File(gmlPath);\n\t\tGraphWriter gmlWriterFull = new GMLWriterUndirectedFull(gmlFile);\n\t\twriteGraphToFile(transNeo, gmlWriterFull);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Creates a Neo4j instance using the {@link BatchInserter}, populates it\n * from the contents of a Chaco (.graph) file, then allocates {@link Node}s\n * to partitions/clusters. Chaco files are basically persistent adjacency\n * lists. Allocation scheme is defined by the {@link Partitioner} parameter.\n * \n * @param dbDir\n *            {@link String} representing the path to a Neo4j instance\n * @param graphPath\n *            {@link String} representing path to .graph file\n * @param partitioner\n *            implementation of {@link Partitioner} that defines\n *            cluster/partition allocation scheme\n */\n", "func_signal": "public static void writeNeoFromChacoAndPtnBatch(String dbDir,\n\t\tString graphPath, Partitioner partitioner)", "code": "{\n\n\ttry {\n\t\tGraphReader parser = ChacoParserFactory.getChacoParser(graphPath);\n\t\tGraphDatabaseServicesWriter dbWrapper = GraphDatabaseServicesWriter\n\t\t\t\t.createBatchWrapper(dbDir);\n\t\tstorePartitionedNodesAndRelsToNeo(dbWrapper, parser, partitioner);\n\t\tdbWrapper.shutdownDbAndIndex();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Calculates graph metrics for the current Neo4j instance and appends the\n * results to a comma separated metrics (.met) file.\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n * @param metricsPath\n *            {@link String} representing path to .met file\n * @param timeStep\n *            {@link Long} representing the time-step/iteration related to\n *            these metrics\n */\n", "func_signal": "public static void appendMetricsCSV(GraphDatabaseService transNeo,\n\t\tString metricsPath, Long timeStep)", "code": "{\n\n\ttry {\n\t\t// PRINTOUT\n\t\tlong time = System.currentTimeMillis();\n\t\tSystem.out.printf(\"Appending Metrics CSV File...\");\n\n\t\tFile metricsFile = new File(metricsPath);\n\t\tMetricsWriterUndirected.appendMetricsCSV(transNeo, metricsFile,\n\t\t\t\ttimeStep);\n\n\t\t// PRINTOUT\n\t\tSystem.out.printf(\"%s\", getTimeStr(System.currentTimeMillis()\n\t\t\t\t- time));\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Creates a Chaco (.graph) file and partition (.ptn) files, populates them\n * with the representation of the current Neo4j instance. Chaco files are\n * assumed to be undirected, this means edges are duplicated in each\n * direction.\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n * @param chacoPath\n *            {@link String} representing path to .graph file\n * @param chacoType\n *            {@link ChacoType} specifies whether node and/or edge weights\n *            are written to the chaco file\n * @param ptnPath\n *            {@link String} representing path to .ptn file\n */\n", "func_signal": "public static void writeChacoAndPtn(GraphDatabaseService transNeo,\n\t\tString chacoPath, ChacoType chacoType, String ptnPath)", "code": "{\n\n\ttry {\n\t\tFile chacoFile = new File(chacoPath);\n\t\tFile ptnFile = new File(ptnPath);\n\t\tGraphWriter chacoPtnWriter = ChacoPtnWriterFactory\n\t\t\t\t.getChacoPtnWriter(chacoType, chacoFile, ptnFile);\n\t\twriteGraphToFile(transNeo, chacoPtnWriter);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Creates a Neo4j instance and populates it from the contents of a dataset\n * with a proprietry binary file format, which contains user\n * follows/following connectivity data from Twitter. The file was obtained\n * by crawling Twitter for 300 hours.\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n * @param twitterPath\n *            {@link String} representing path to Twitter dataset\n */\n", "func_signal": "public static void writeNeoFromTwitterDataset(\n\t\tGraphDatabaseService transNeo, String twitterPath)", "code": "{\n\n\ttry {\n\t\tGraphReader parser = new TwitterParser(new File(twitterPath));\n\t\tPartitioner partitioner = new PartitionerAsSingle((byte) -1);\n\t\tGraphDatabaseServicesWriter dbWrapper = GraphDatabaseServicesWriter\n\t\t\t\t.createTransactionalWrapper(transNeo);\n\t\tstorePartitionedNodesAndRelsToNeo(dbWrapper, parser, partitioner);\n\t\tdbWrapper.shutdownIndex();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Creates a Neo4j instance, populates it from the contents of a Chaco\n * (.graph) file, then allocates {@link Node}s to partitions/clusters. Chaco\n * files are basically persistent adjacency lists. Partition/cluster\n * allocation is defined by the contents of a .ptn file. This method is only\n * included for convenience/ease of use.\n * {@link NeoFromFile#writeNeoFromChacoAndPtn(GraphDatabaseService, String, Partitioner)}\n * can achieve the same thing.\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n * @param graphPath\n *            {@link String} representing path to .graph file\n * @param ptnPath\n *            {@link String} representing path to .ptn file\n */\n", "func_signal": "public static void writeNeoFromChacoAndPtn(GraphDatabaseService transNeo,\n\t\tString graphPath, String ptnPath)", "code": "{\n\n\ttry {\n\t\tGraphReader parser = ChacoParserFactory.getChacoParser(graphPath);\n\t\tPartitioner partitioner = new PartitionerAsFile(new File(ptnPath));\n\t\tGraphDatabaseServicesWriter dbWrapper = GraphDatabaseServicesWriter\n\t\t\t\t.createTransactionalWrapper(transNeo);\n\t\tstorePartitionedNodesAndRelsToNeo(dbWrapper, parser, partitioner);\n\t\tdbWrapper.shutdownIndex();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Deletes all {@link Relationship}s of the specified\n * {@link RelationshipType} values (as given by the {@link String} values in\n * relTypes parameter) from the Neo4j instance.\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n * @param relTypes\n *            {@link HashSet} of {@link RelationshipType} representing the\n *            {@link Relationship}s that should be deleted\n */\n", "func_signal": "public static void removeRelationshipsByType(GraphDatabaseService transNeo,\n\t\tHashSet<String> relTypes)", "code": "{\n\n\tlong time = System.currentTimeMillis();\n\tSystem.out.printf(\"Deleting relationships by type...\");\n\n\tint deletedRels = 0;\n\n\tTransaction tx = transNeo.beginTx();\n\n\ttry {\n\t\tfor (Node node : transNeo.getAllNodes()) {\n\n\t\t\tif (relTypes.size() <= 0)\n\t\t\t\tbreak;\n\n\t\t\tfor (Relationship relationship : node\n\t\t\t\t\t.getRelationships(Direction.OUTGOING)) {\n\n\t\t\t\t// Don't delete Relationships of this type\n\t\t\t\tif (relTypes.contains(relationship.getType().name()) == false)\n\t\t\t\t\tcontinue;\n\n\t\t\t\trelationship.delete();\n\n\t\t\t\tif (++deletedRels % Consts.STORE_BUF == 0) {\n\t\t\t\t\ttx.success();\n\t\t\t\t\ttx.finish();\n\t\t\t\t\ttx = transNeo.beginTx();\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\ttx.success();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttx.finish();\n\t}\n\n\t// PRINTOUT\n\tSystem.out.printf(\"Deleted [%d]...%s\", deletedRels, getTimeStr(System\n\t\t\t.currentTimeMillis()\n\t\t\t- time));\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Martin's code, moved from neo4j_partitioned_api. Takes a normal Neo4j\n * instance {@link GraphDatabaseService} as input, creates a new partitioned\n * version {@link PGraphDatabaseService} in the specified directory, then\n * copies all data from the input instance into the new instance.\n * {@link Node}s must have a {@link Consts#COLOR} attribute as this is used\n * to decide which partition each {@link Node} is stored in.\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing the regular Neo4j\n *            instance\n * @param pdbPath\n *            {@link String} specifying the directory where partitioned\n *            Neo4j instance should be created\n * @return {@link PGraphDatabaseService}\n */\n", "func_signal": "public static PGraphDatabaseService writePNeoFromNeo(String pdbPath,\n\t\tGraphDatabaseService transNeo)", "code": "{\n\n\tSystem.out.println(\"Converting Neo4j to PNeo4j\");\n\n\t// PGraphDatabaseService partitionedTransNeo = new\n\t// PGraphDatabaseServiceImpl(\n\t// pdbPath, 0);\n\tPGraphDatabaseService partitionedTransNeo = new PGraphDatabaseServiceSIM(\n\t\t\tpdbPath, 0);\n\n\tArrayList<Long> nodeIDs = new ArrayList<Long>();\n\n\t// load all instance ids\n\tHashSet<Long> instIDs = new HashSet<Long>();\n\tfor (Long instID : partitionedTransNeo.getInstancesIDs()) {\n\t\tinstIDs.add(instID);\n\t}\n\n\t// PRINTOUT\n\tlong time = System.currentTimeMillis();\n\tSystem.out.printf(\"\\tCounting Nodes...\");\n\n\t// counts all nodes\n\tTransaction tx = transNeo.beginTx();\n\ttry {\n\t\tfor (Node n : transNeo.getAllNodes()) {\n\t\t\t// ignore reference node\n\t\t\tif (n.getId() == 0)\n\t\t\t\tcontinue;\n\n\t\t\tnodeIDs.add(n.getId());\n\t\t}\n\t\ttx.success();\n\t} finally {\n\t\ttx.finish();\n\t}\n\n\tint nodesInSystem = nodeIDs.size();\n\tint nodeCount;\n\tint stepSize = 1000;\n\tint stepCount;\n\n\tIterator<Long> idIter;\n\n\t// PRINTOUT\n\tSystem.out.printf(\"[%d]...%s\", nodesInSystem, getTimeStr(System\n\t\t\t.currentTimeMillis()\n\t\t\t- time));\n\n\tnodeCount = 0;\n\tstepCount = 0;\n\tidIter = nodeIDs.iterator();\n\twhile (idIter.hasNext()) {\n\t\ttx = transNeo.beginTx();\n\t\ttry {\n\n\t\t\t// PRINTOUT\n\t\t\ttime = System.currentTimeMillis();\n\t\t\tSystem.out.printf(\"\\tCreating Nodes...\");\n\n\t\t\t// my own transaction\n\t\t\tTransaction pTx = partitionedTransNeo.beginTx();\n\t\t\ttry {\n\t\t\t\twhile (idIter.hasNext() && stepCount < stepSize) {\n\t\t\t\t\tNode n = transNeo.getNodeById(idIter.next());\n\n\t\t\t\t\tlong targetInst = (Byte) n.getProperty(Consts.COLOR);\n\t\t\t\t\tlong gid = n.getId();\n\n\t\t\t\t\t// create instance if not yet existing\n\t\t\t\t\tif (!instIDs.contains(targetInst)) {\n\t\t\t\t\t\tpartitionedTransNeo.addInstance(targetInst);\n\t\t\t\t\t\tinstIDs.add(targetInst);\n\t\t\t\t\t}\n\t\t\t\t\tNode newN = partitionedTransNeo.createNodeOn(gid,\n\t\t\t\t\t\t\ttargetInst);\n\n\t\t\t\t\tfor (String key : n.getPropertyKeys()) {\n\t\t\t\t\t\tnewN.setProperty(key, n.getProperty(key));\n\t\t\t\t\t}\n\n\t\t\t\t\tstepCount++;\n\t\t\t\t\tnodeCount++;\n\t\t\t\t}\n\t\t\t\tstepCount = 0;\n\n\t\t\t\t// PRINTOUT\n\t\t\t\tSystem.out.printf(\"[%d/%d]...%s\", nodeCount, nodesInSystem,\n\t\t\t\t\t\tgetTimeStr(System.currentTimeMillis() - time));\n\n\t\t\t\tpTx.success();\n\t\t\t} finally {\n\t\t\t\tpTx.finish();\n\t\t\t}\n\t\t\ttx.success();\n\t\t} finally {\n\t\t\ttx.finish();\n\t\t}\n\t}\n\n\tnodeCount = 0;\n\tstepCount = 0;\n\tidIter = nodeIDs.iterator();\n\twhile (idIter.hasNext()) {\n\t\ttx = transNeo.beginTx();\n\t\ttry {\n\n\t\t\t// PRINTOUT\n\t\t\ttime = System.currentTimeMillis();\n\t\t\tSystem.out.printf(\"\\tCreating Relationships on Nodes...\");\n\n\t\t\t// my own transaction\n\t\t\tTransaction pTx = partitionedTransNeo.beginTx();\n\t\t\ttry {\n\t\t\t\twhile (idIter.hasNext() && stepCount < stepSize) {\n\t\t\t\t\tNode n = transNeo.getNodeById(idIter.next());\n\n\t\t\t\t\tlong curN = n.getId();\n\t\t\t\t\tNode srtNode = partitionedTransNeo.getNodeById(curN);\n\n\t\t\t\t\tfor (Relationship rs : n\n\t\t\t\t\t\t\t.getRelationships(Direction.OUTGOING)) {\n\n\t\t\t\t\t\tlong endNodeGID = rs.getEndNode().getId();\n\t\t\t\t\t\tNode endNode = partitionedTransNeo\n\t\t\t\t\t\t\t\t.getNodeById(endNodeGID);\n\t\t\t\t\t\tRelationship newRs = srtNode.createRelationshipTo(\n\t\t\t\t\t\t\t\tendNode, rs.getType());\n\n\t\t\t\t\t\t// copy all properties\n\t\t\t\t\t\tfor (String key : rs.getPropertyKeys()) {\n\t\t\t\t\t\t\tnewRs.setProperty(key, rs.getProperty(key));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstepCount++;\n\t\t\t\t\tnodeCount++;\n\t\t\t\t}\n\t\t\t\tstepCount = 0;\n\n\t\t\t\t// PRINTOUT\n\t\t\t\tSystem.out.printf(\"[%d/%d]...%s\", nodeCount, nodesInSystem,\n\t\t\t\t\t\tgetTimeStr(System.currentTimeMillis() - time));\n\n\t\t\t\tpTx.success();\n\t\t\t} finally {\n\t\t\t\tpTx.finish();\n\t\t\t}\n\t\t\ttx.success();\n\t\t} finally {\n\t\t\ttx.finish();\n\t\t}\n\t}\n\ttransNeo.shutdown();\n\n\treturn partitionedTransNeo;\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Loads the current Neo4j instance into an in-memory graph. Normalized edge\n * weights to the range [0,1].\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n * @return {@link MemGraph}\n */\n", "func_signal": "public static MemGraph readMemGraph(GraphDatabaseService transNeo)", "code": "{\n\treturn readMemGraph(transNeo, new HashSet<String>(),\n\t\t\tnew HashSet<String>());\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "/**\n * Deletes a specified number of {@link Node}s by selecting them from among\n * all {@link Node}s and then deleting them from the Neo4j instance.\n * Selection is performed uniformly random.\n * \n * @param transNeo\n *            {@link GraphDatabaseService} representing a Neo4j instance\n * @param percNodesToKeep\n *            percentage of {@link Node}s that should not be deleted\n */\n", "func_signal": "public static void removeRandomNodes(GraphDatabaseService transNeo,\n\t\tdouble percNodesToKeep)", "code": "{\n\n\tlong time = System.currentTimeMillis();\n\tlong flushTime = System.currentTimeMillis();\n\n\tSystem.out.println(\"Deleting random nodes...\");\n\n\tint deletedRelsCount = 0;\n\tint deletedNodesCount = 0;\n\tint storeBuff = 0;\n\n\tTransaction tx = transNeo.beginTx();\n\n\ttry {\n\t\tRandom rand = new Random();\n\n\t\tfor (Node node : transNeo.getAllNodes()) {\n\n\t\t\tif (rand.nextDouble() < percNodesToKeep)\n\t\t\t\tcontinue;\n\n\t\t\tfor (Relationship rel : node.getRelationships()) {\n\t\t\t\trel.delete();\n\t\t\t\tdeletedRelsCount++;\n\t\t\t\tstoreBuff++;\n\t\t\t}\n\n\t\t\tnode.delete();\n\t\t\tdeletedNodesCount++;\n\t\t\tstoreBuff++;\n\n\t\t\tif (storeBuff >= Consts.STORE_BUF) {\n\t\t\t\tstoreBuff = 0;\n\n\t\t\t\ttx.success();\n\t\t\t\ttx.finish();\n\t\t\t\ttx = transNeo.beginTx();\n\n\t\t\t\t// if ((deletedRelsCount + deletedNodesCount) % 1000000 ==\n\t\t\t\t// 0) {\n\t\t\t\tSystem.out.printf(\"\\t[%d,%d]...%s\", deletedNodesCount,\n\t\t\t\t\t\tdeletedRelsCount, getTimeStr(System\n\t\t\t\t\t\t\t\t.currentTimeMillis()\n\t\t\t\t\t\t\t\t- flushTime));\n\t\t\t\tflushTime = System.currentTimeMillis();\n\t\t\t\t// }\n\t\t\t}\n\n\t\t}\n\n\t\ttx.success();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttx.finish();\n\t}\n\n\t// PRINTOUT\n\tSystem.out\n\t\t\t.printf(\"\\tDeleted [%d,%d]...%s\", deletedNodesCount,\n\t\t\t\t\tdeletedRelsCount, getTimeStr(System.currentTimeMillis()\n\t\t\t\t\t\t\t- time));\n\n}", "path": "src\\main\\java\\graph_gen_utils\\NeoFromFile.java", "repo_name": "alexaverbuch/graph_gen_utils", "stars": 5, "license": "None", "language": "java", "size": 2016}
{"docstring": "// Search for a specific value (num) using\n// binary search\n", "func_signal": "public boolean Search(int num)", "code": "{\n  boolean bs01;\n  int right;\n  int left;\n  boolean var_cont;\n  int medium;\n  int aux01;\n  int nt;\n\n  aux01 = 0;\n  bs01 = false;\n  right = number.length;\n  right = right - 1;\n  left = 0;\n  var_cont = true;\n  while (var_cont) {\n    medium = left + right;\n    medium = this.Div(medium);\n    aux01 = number[medium];\n    if (num < aux01) {\n      right = medium - 1;\n    } else {\n      left = medium + 1;\n    }\n    if (this.Compare(aux01, num)) {\n      var_cont = false;\n    } else {\n      var_cont = true;\n    }\n    if (right < left) {\n      var_cont = false;\n    } else {\n      nt = 0;\n    }\n  }\n\n  if (this.Compare(aux01, num)) {\n    bs01 = true;\n  } else {\n    bs01 = false;\n  }\n  return bs01;\n}", "path": "test\\BinarySearch.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "// Search for an elemnt in the tree\n", "func_signal": "public int Search(int v_key)", "code": "{\n  boolean cont;\n  int ifound;\n  Tree current_node;\n  int key_aux;\n\n  current_node = this;\n  cont = true;\n  ifound = 0;\n  while (cont) {\n    key_aux = current_node.GetKey();\n    if (v_key < key_aux) {\n      if (current_node.GetHas_Left()) {\n        current_node = current_node.GetLeft();\n      } else {\n        cont = false;\n      }\n    } else if (key_aux < v_key) {\n      if (current_node.GetHas_Right()) {\n        current_node = current_node.GetRight();\n      } else {\n        cont = false;\n      }\n    } else {\n      ifound = 1;\n      cont = false;\n    }\n  }\n  return ifound;\n}", "path": "test\\BinaryTree.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "// Print the elements of the tree\n", "func_signal": "public boolean RecPrint(Tree node)", "code": "{\n  boolean ntb;\n\n  if (node.GetHas_Left()) {\n    //auxtree01 = node.GetLeft() ;\n    //ntb = this.RecPrint(auxtree01);\n    ntb = this.RecPrint(node.GetLeft());\n  } else {\n    ntb = true;\n  }\n  System.out.println(node.GetKey());\n  if (node.GetHas_Right()) {\n    //auxtree01 = node.GetRight() ;\n    //ntb = this.RecPrint(auxtree01);\n    ntb = this.RecPrint(node.GetRight());\n  } else {\n    ntb = true;\n  }\n  return true;\n}", "path": "test\\BinaryTree.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "// Copy the child key to the parent until a leaf is\n// found and remove the leaf. This is done with the\n// left subtree\n", "func_signal": "public boolean RemoveLeft(Tree p_node, Tree c_node)", "code": "{\n  boolean ntb;\n\n  while (c_node.GetHas_Left()) {\n    //auxtree01 = c_node.GetLeft() ;\n    //auxint02 = auxtree01.GetKey();\n    //ntb = c_node.SetKey(auxint02);\n    ntb = c_node.SetKey((c_node.GetLeft()).GetKey());\n    p_node = c_node;\n    c_node = c_node.GetLeft();\n  }\n  ntb = p_node.SetLeft(my_null);\n  ntb = p_node.SetHas_Left(false);\n  return true;\n}", "path": "test\\BinaryTree.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "// Initialize the integer array\n", "func_signal": "public int Init(int sz)", "code": "{\n  int j;\n  int k;\n  int aux02;\n  int aux01;\n\n  size = sz;\n  number = new int[sz];\n\n  j = 1;\n  k = size + 1;\n  while (j < (size)) {\n    aux01 = 2 * j;\n    aux02 = k - 3;\n    number[j] = aux01 + aux02;\n    j = j + 1;\n    k = k - 1;\n  }\n  return 0;\n}", "path": "test\\BinarySearch.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "// initialize array of integers with some\n// some sequence\n", "func_signal": "public int Init(int sz)", "code": "{\n  int j;\n  int k;\n  int aux01;\n  int aux02;\n\n  size = sz;\n  number = new int[sz];\n\n  j = 1;\n  k = size + 1;\n  while (j < (size)) {\n    aux01 = 2 * j;\n    aux02 = k - 3;\n    number[j] = aux01 + aux02;\n    j = j + 1;\n    k = k - 1;\n  }\n  return 0;\n}", "path": "test\\LinearSearch.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "/** Constructor with message and reason. */\n", "func_signal": "public TokenMgrError(String message, int reason)", "code": "{\n  super(message);\n  errorCode = reason;\n}", "path": "src\\minjavac\\TokenMgrError.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "// Invoke the method to really print the tree elements\n", "func_signal": "public boolean Print()", "code": "{\n  Tree current_node;\n  boolean ntb;\n\n  current_node = this;\n  ntb = this.RecPrint(current_node);\n  return true;\n}", "path": "test\\BinaryTree.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "// Insert a new element in the tree\n", "func_signal": "public boolean Insert(int v_key)", "code": "{\n  Tree new_node;\n  boolean ntb;\n  boolean cont;\n  int key_aux;\n  Tree current_node;\n\n  new_node = new Tree();\n  ntb = new_node.Init(v_key);\n  current_node = this;\n  cont = true;\n  while (cont) {\n    key_aux = current_node.GetKey();\n    if (v_key < key_aux) {\n      if (current_node.GetHas_Left()) {\n        current_node = current_node.GetLeft();\n      } else {\n        cont = false;\n        ntb = current_node.SetHas_Left(true);\n        ntb = current_node.SetLeft(new_node);\n      }\n    } else {\n      if (current_node.GetHas_Right()) {\n        current_node = current_node.GetRight();\n      } else {\n        cont = false;\n        ntb = current_node.SetHas_Right(true);\n        ntb = current_node.SetRight(new_node);\n      }\n    }\n  }\n  return true;\n}", "path": "test\\BinaryTree.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "// Update the right child with rn\n", "func_signal": "public boolean SetRight(Tree rn)", "code": "{\n  right = rn;\n  return true;\n}", "path": "test\\BinaryTree.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "/** Get the next Token. */\n", "func_signal": "public static Token getNextToken()", "code": "{\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {\n   try\n   {\n      curChar = input_stream.BeginToken();\n   }\n   catch(java.io.IOException e)\n   {\n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      matchedToken.specialToken = specialToken;\n      return matchedToken;\n   }\n\n   try { input_stream.backup(0);\n      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)\n         curChar = input_stream.BeginToken();\n   }\n   catch (java.io.IOException e1) { continue EOFLoop; }\n   jjmatchedKind = 0x7fffffff;\n   jjmatchedPos = 0;\n   curPos = jjMoveStringLiteralDfa0_0();\n   if (jjmatchedKind != 0x7fffffff)\n   {\n      if (jjmatchedPos + 1 < curPos)\n         input_stream.backup(curPos - jjmatchedPos - 1);\n      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n      {\n         matchedToken = jjFillToken();\n         matchedToken.specialToken = specialToken;\n         return matchedToken;\n      }\n      else\n      {\n         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n         {\n            matchedToken = jjFillToken();\n            if (specialToken == null)\n               specialToken = matchedToken;\n            else\n            {\n               matchedToken.specialToken = specialToken;\n               specialToken = (specialToken.next = matchedToken);\n            }\n         }\n         continue EOFLoop;\n      }\n   }\n   int error_line = input_stream.getEndLine();\n   int error_column = input_stream.getEndColumn();\n   String error_after = null;\n   boolean EOFSeen = false;\n   try { input_stream.readChar(); input_stream.backup(1); }\n   catch (java.io.IOException e1) {\n      EOFSeen = true;\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n      if (curChar == '\\n' || curChar == '\\r') {\n         error_line++;\n         error_column = 0;\n      }\n      else\n         error_column++;\n   }\n   if (!EOFSeen) {\n      input_stream.backup(1);\n      error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n   }\n   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}", "path": "src\\minjavac\\ParserTokenManager.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "// This method compares two integers and\n// returns true if they are equal and false\n// otherwise\n", "func_signal": "public boolean Compare(int num1, int num2)", "code": "{\n  boolean ntb;\n  int nti;\n\n  ntb = false;\n  nti = num2 + 1;\n  if (num1 < num2) {\n    ntb = false;\n  } else if (!(num1 < nti)) {\n    ntb = false;\n  } else {\n    ntb = true;\n  }\n  return ntb;\n}", "path": "test\\BinaryTree.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "// Print array of integers\n", "func_signal": "public int Print()", "code": "{\n  int j;\n\n  j = 1;\n  while (j < (size)) {\n    System.out.println(number[j]);\n    j = j + 1;\n  }\n  return 0;\n}", "path": "test\\LinearSearch.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "/** Constructor. */\n", "func_signal": "public ParserTokenManager(SimpleCharStream stream)", "code": "{\n   if (input_stream != null)\n      throw new TokenMgrError(\"ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.\", TokenMgrError.STATIC_LEXER_ERROR);\n   input_stream = stream;\n}", "path": "src\\minjavac\\ParserTokenManager.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\n", "func_signal": "protected static final String addEscapes(String str)", "code": "{\n  StringBuffer retval = new StringBuffer();\n  char ch;\n  for (int i = 0; i < str.length(); i++) {\n    switch (str.charAt(i))\n    {\n      case 0 :\n        continue;\n      case '\\b':\n        retval.append(\"\\\\b\");\n        continue;\n      case '\\t':\n        retval.append(\"\\\\t\");\n        continue;\n      case '\\n':\n        retval.append(\"\\\\n\");\n        continue;\n      case '\\f':\n        retval.append(\"\\\\f\");\n        continue;\n      case '\\r':\n        retval.append(\"\\\\r\");\n        continue;\n      case '\\\"':\n        retval.append(\"\\\\\\\"\");\n        continue;\n      case '\\'':\n        retval.append(\"\\\\\\'\");\n        continue;\n      case '\\\\':\n        retval.append(\"\\\\\\\\\");\n        continue;\n      default:\n        if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n          String s = \"0000\" + Integer.toString(ch, 16);\n          retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n        } else {\n          retval.append(ch);\n        }\n        continue;\n    }\n  }\n  return retval.toString();\n}", "path": "src\\minjavac\\TokenMgrError.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "/** Reinitialise parser. */\n", "func_signal": "static public void ReInit(SimpleCharStream stream, int lexState)", "code": "{\n   ReInit(stream);\n   SwitchTo(lexState);\n}", "path": "src\\minjavac\\ParserTokenManager.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "// This method computes and returns the\n// integer division of a number (num) by 2\n", "func_signal": "public int Div(int num)", "code": "{\n  int count01;\n  int count02;\n  int aux03;\n\n  count01 = 0;\n  count02 = 0;\n  aux03 = num - 1;\n  while (count02 < aux03) {\n    count01 = count01 + 1;\n    count02 = count02 + 2;\n  }\n  return count01;\n}", "path": "test\\BinarySearch.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "// Update the left child with ln\n", "func_signal": "public boolean SetLeft(Tree ln)", "code": "{\n  left = ln;\n  return true;\n}", "path": "test\\BinaryTree.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * Returns a detailed message for the Error when it is thrown by the\n * token manager to indicate a lexical error.\n * Parameters :\n *    EOFSeen     : indicates if EOF caused the lexical error\n *    curLexState : lexical state in which this error occurred\n *    errorLine   : line number when the error occurred\n *    errorColumn : column number when the error occurred\n *    errorAfter  : prefix that was seen before this error occurred\n *    curchar     : the offending character\n * Note: You can customize the lexical error message by modifying this method.\n */\n", "func_signal": "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)", "code": "{\n  return(\"Lexical error at line \" +\n        errorLine + \", column \" +\n        errorColumn + \".  Encountered: \" +\n        (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n        \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}", "path": "src\\minjavac\\TokenMgrError.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "// This method compares two integers and\n// returns true if they are equal and false\n// otherwise\n", "func_signal": "public boolean Compare(int num1, int num2)", "code": "{\n  boolean retval;\n  int aux02;\n\n  retval = false;\n  aux02 = num2 + 1;\n  if (num1 < num2) {\n    retval = false;\n  } else if (!(num1 < aux02)) {\n    retval = false;\n  } else {\n    retval = true;\n  }\n  return retval;\n}", "path": "test\\BinarySearch.java", "repo_name": "giulianoxt/minjavac", "stars": 7, "license": "None", "language": "java", "size": 224}
{"docstring": "/**\n * Inserts a long array value into the mapping of this Bundle, replacing\n * any existing value for the given key.  Either key or value may be null.\n *\n * @param key a String, or null\n * @param value a long array object, or null\n */\n", "func_signal": "public void putLongArray(String key, long[] value)", "code": "{\n    unparcel();\n    mMap.put(key, value);\n}", "path": "core\\java\\android\\os\\Bundle.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Constructs a new, empty Bundle.\n */\n", "func_signal": "public Bundle()", "code": "{\n    mMap = new HashMap<String, Object>();\n    mClassLoader = getClass().getClassLoader();\n}", "path": "core\\java\\android\\os\\Bundle.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Returns the value associated with the given key, or null if\n * no mapping of the desired type exists for the given key or a null\n * value is explicitly associated with the key.\n *\n * @param key a String, or null\n * @return a Bundle value, or null\n */\n", "func_signal": "public Bundle getBundle(String key)", "code": "{\n    unparcel();\n    Object o = mMap.get(key);\n    if (o == null) {\n        return null;\n    }\n    try {\n        return (Bundle) o;\n    } catch (ClassCastException e) {\n        typeWarning(key, o, \"Bundle\", e);\n        return null;\n    }\n}", "path": "core\\java\\android\\os\\Bundle.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Inserts a short array value into the mapping of this Bundle, replacing\n * any existing value for the given key.  Either key or value may be null.\n *\n * @param key a String, or null\n * @param value a short array object, or null\n */\n", "func_signal": "public void putShortArray(String key, short[] value)", "code": "{\n    unparcel();\n    mMap.put(key, value);\n}", "path": "core\\java\\android\\os\\Bundle.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Returns the value associated with the given key, or null if\n * no mapping of the desired type exists for the given key or a null\n * value is explicitly associated with the key.\n *\n * @param key a String, or null\n * @return a String value, or null\n */\n", "func_signal": "public String getString(String key)", "code": "{\n    unparcel();\n    Object o = mMap.get(key);\n    if (o == null) {\n        return null;\n    }\n    try {\n        return (String) o;\n    } catch (ClassCastException e) {\n        typeWarning(key, o, \"String\", e);\n        return null;\n    }\n}", "path": "core\\java\\android\\os\\Bundle.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Inserts a double array value into the mapping of this Bundle, replacing\n * any existing value for the given key.  Either key or value may be null.\n *\n * @param key a String, or null\n * @param value a double array object, or null\n */\n", "func_signal": "public void putDoubleArray(String key, double[] value)", "code": "{\n    unparcel();\n    mMap.put(key, value);\n}", "path": "core\\java\\android\\os\\Bundle.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Instantiates a new IIOException.\n * \n * @param message\n *            the detailed message.\n * @param cause\n *            the cause of this exception.\n */\n", "func_signal": "public IIOException(String message, Throwable cause)", "code": "{\n    super(message);\n    initCause(cause);\n}", "path": "awt\\javax\\imageio\\IIOException.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Returns the number of mappings contained in this Bundle.\n *\n * @return the number of mappings as an int.\n */\n", "func_signal": "public int size()", "code": "{\n    unparcel();\n    return mMap.size();\n}", "path": "core\\java\\android\\os\\Bundle.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Returns the value associated with the given key, or (char) 0 if\n * no mapping of the desired type exists for the given key.\n *\n * @param key a String\n * @return a char value\n */\n", "func_signal": "public char getChar(String key, char defaultValue)", "code": "{\n    unparcel();\n    Object o = mMap.get(key);\n    if (o == null) {\n        return defaultValue;\n    }\n    try {\n        return (Character) o;\n    } catch (ClassCastException e) {\n        typeWarning(key, o, \"Character\", defaultValue, e);\n        return defaultValue;\n    }\n}", "path": "core\\java\\android\\os\\Bundle.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Returns the value associated with the given key, or 0 if\n * no mapping of the desired type exists for the given key.\n *\n * @param key a String\n * @return an int value\n */\n", "func_signal": "public int getInt(String key)", "code": "{\n    unparcel();\n    return getInt(key, 0);\n}", "path": "core\\java\\android\\os\\Bundle.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Returns the value associated with the given key, or null if\n * no mapping of the desired type exists for the given key or a null\n * value is explicitly associated with the key.\n *\n * @param key a String, or null\n * @return a Serializable value, or null\n */\n", "func_signal": "public Serializable getSerializable(String key)", "code": "{\n    unparcel();\n    Object o = mMap.get(key);\n    if (o == null) {\n        return null;\n    }\n    try {\n        return (Serializable) o;\n    } catch (ClassCastException e) {\n        typeWarning(key, o, \"Serializable\", e);\n        return null;\n    }\n}", "path": "core\\java\\android\\os\\Bundle.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Returns the value associated with the given key, or defaultValue if\n * no mapping of the desired type exists for the given key.\n *\n * @param key a String\n * @return a byte value\n */\n", "func_signal": "public Byte getByte(String key, byte defaultValue)", "code": "{\n    unparcel();\n    Object o = mMap.get(key);\n    if (o == null) {\n        return defaultValue;\n    }\n    try {\n        return (Byte) o;\n    } catch (ClassCastException e) {\n        typeWarning(key, o, \"Byte\", defaultValue, e);\n        return defaultValue;\n    }\n}", "path": "core\\java\\android\\os\\Bundle.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Inserts a SparceArray of Parcelable values into the mapping of this\n * Bundle, replacing any existing value for the given key.  Either key\n * or value may be null.\n *\n * @param key a String, or null\n * @param value a SparseArray of Parcelable objects, or null\n */\n", "func_signal": "public void putSparseParcelableArray(String key,\n        SparseArray<? extends Parcelable> value)", "code": "{\n    unparcel();\n    mMap.put(key, value);\n    mFdsKnown = false;\n}", "path": "core\\java\\android\\os\\Bundle.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Assert that two views are top aligned, that is that their top edges\n * are on the same y location, with respect to the specified margin.\n *\n * @param first The first view\n * @param second The second view\n * @param margin The margin between the first view and the second view\n */\n", "func_signal": "static public void assertTopAligned(View first, View second, int margin)", "code": "{\n    int[] xy = new int[2];\n    first.getLocationOnScreen(xy);\n    int firstTop = xy[1];\n\n    second.getLocationOnScreen(xy);\n    int secondTop = xy[1];\n\n    assertEquals(\"views are not top aligned\", Math.abs(firstTop - secondTop), margin);\n}", "path": "test-runner\\android\\test\\ViewAsserts.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Inserts a float value into the mapping of this Bundle, replacing\n * any existing value for the given key.\n *\n * @param key a String, or null\n * @param value a float\n */\n", "func_signal": "public void putFloat(String key, float value)", "code": "{\n    unparcel();\n    mMap.put(key, value);\n}", "path": "core\\java\\android\\os\\Bundle.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Assert that view is below the visible screen.\n * @param origin The root view of the screen.\n * @param view The view\n */\n", "func_signal": "static public void assertOffScreenBelow(View origin, View view)", "code": "{\n    int[] xy = new int[2];\n    view.getLocationOnScreen(xy);\n\n    int[] xyRoot = new int[2];\n    origin.getLocationOnScreen(xyRoot);\n\n    int y = xy[1] - xyRoot[1];\n\n    assertTrue(\"view should have y location on screen greater than drawing \"\n            + \"height of origen view (\" + y + \" is not greater than \"\n            + origin.getHeight() + \")\",\n            y > origin.getHeight());\n}", "path": "test-runner\\android\\test\\ViewAsserts.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Assert that two views are left aligned, that is that their left edges\n * are on the same x location.\n *\n * @param first The first view\n * @param second The second view\n */\n", "func_signal": "static public void assertLeftAligned(View first, View second)", "code": "{\n    int[] xy = new int[2];\n    first.getLocationOnScreen(xy);\n    int firstLeft = xy[0];\n\n    second.getLocationOnScreen(xy);\n    int secondLeft = xy[0];\n\n    assertEquals(\"views are not left aligned\", firstLeft, secondLeft);\n}", "path": "test-runner\\android\\test\\ViewAsserts.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Removes all elements from the mapping of this Bundle.\n */\n", "func_signal": "public void clear()", "code": "{\n    unparcel();\n    mMap.clear();\n    mHasFds = false;\n    mFdsKnown = true;\n}", "path": "core\\java\\android\\os\\Bundle.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Assert that two views are left aligned, that is that their left edges\n * are on the same x location, with respect to the specified margin.\n *\n * @param first The first view\n * @param second The second view\n * @param margin The margin between the first view and the second view\n */\n", "func_signal": "static public void assertLeftAligned(View first, View second, int margin)", "code": "{\n    int[] xy = new int[2];\n    first.getLocationOnScreen(xy);\n    int firstLeft = xy[0];\n\n    second.getLocationOnScreen(xy);\n    int secondLeft = xy[0];\n\n    assertEquals(\"views are not left aligned\", Math.abs(firstLeft - secondLeft), margin);\n}", "path": "test-runner\\android\\test\\ViewAsserts.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Returns the value associated with the given key, or (byte) 0 if\n * no mapping of the desired type exists for the given key.\n *\n * @param key a String\n * @return a byte value\n */\n", "func_signal": "public byte getByte(String key)", "code": "{\n    unparcel();\n    return getByte(key, (byte) 0);\n}", "path": "core\\java\\android\\os\\Bundle.java", "repo_name": "prajnashi/platform-frameworks-base", "stars": 4, "license": "other", "language": "java", "size": 55080}
{"docstring": "/**\n * Overridden for performance reasons.\n * See the <a href=\"#override\">Implementation Note</a> \n * for more information.\n */\n", "func_signal": "@Override\npublic boolean isOpaque()", "code": "{ \n    Color back = getBackground();\n    Component p = getParent(); \n    if (p != null) { \n        p = p.getParent(); \n    }\n    boolean colorMatch = (back != null) && (p != null) && \n    back.equals(p.getBackground()) && \n    p.isOpaque();\n    return !colorMatch && super.isOpaque(); \n}", "path": "CastroVisualize\\src\\Visualizer\\MyVertexLabelRenderer.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/**\n * Creates a default table cell renderer.\n */\n", "func_signal": "public MyVertexLabelRenderer(Color pickedVertexLabelColor)", "code": "{\n    this.pickedVertexLabelColor = pickedVertexLabelColor;\n    setOpaque(true);\n    setBorder(noFocusBorder);\n}", "path": "CastroVisualize\\src\\Visualizer\\MyVertexLabelRenderer.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/**\n * Sets the dimensions of the available space for layout to {@code size}.\n */\n", "func_signal": "@Override\n\tpublic void setSize(Dimension size)", "code": "{\n\t\tif(initialized == false)\n\t\t\tsetInitializer(new RandomLocationTransformer<Functionality.Node>(size));\n\t\tsuper.setSize(size);\n\t}", "path": "CastroVisualize\\src\\Visualizer\\SpringLayoutWeighted.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/**\n * Create and return a table\n * \n * @return JTable\n */\n", "func_signal": "private static List<String> processQueryString(String str)", "code": "{\n\tint b = 0;\n\tint parStartIndex = -1;\n\tint normStartIndex = 0;\n\n\tList<String> terms = new ArrayList<String>();\n\n\tfor (int i = 0; i < str.length(); i++) {\n\t\tif (str.charAt(i) == '\"') {\n\t\t\tif (b == 0) {\n\t\t\t\tparStartIndex = i + 1;\n\t\t\t\tb = 1;\n\t\t\t} else {\n\t\t\t\tterms.add(str.substring(parStartIndex, i));\n\t\t\t\tparStartIndex = -1;\n\t\t\t\tb = 0;\n\t\t\t\tnormStartIndex = i + 1;\n\t\t\t}\n\t\t} else {\n\t\t\tif (str.charAt(i) == ' ' && b == 0) {\n\t\t\t\tif (normStartIndex < i) {\n\t\t\t\t\tterms.add(str.substring(normStartIndex, i));\n\n\t\t\t\t}\n\n\t\t\t\tnormStartIndex = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (normStartIndex < str.length()) {\n\t\tterms.add(str.substring(normStartIndex, str.length()));\n\t}\n\n\treturn terms;\n}", "path": "CastroVisualize\\src\\GUI\\CastroGUI.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/**\n * Implementation of the VertexMouseMenu method. \n * @param e \n */\n", "func_signal": "protected void handlePopup(MouseEvent e)", "code": "{\n\tfinal VisualizationViewer<V,E> vv =\n\t\t(VisualizationViewer<V,E>)e.getSource();\n\tPoint2D p = e.getPoint();\n\n\tGraphElementAccessor<V,E> pickSupport = vv.getPickSupport();\n\tif(pickSupport != null) {\n\t\tfinal Functionality.Node v = (Functionality.Node) pickSupport.getVertex(vv.getGraphLayout(), p.getX(), p.getY());\n\t\tif(v != null) {\n\t\t\t// System.out.println(\"Vertex \" + v + \" was right clicked\");\n\t\t\tupdateVertexMenu(v, vv, p);\n\t\t\tvertexPopup.show(vv, e.getX(), e.getY());\n\t\t}\n\t\t\n\t}\n}", "path": "CastroVisualize\\src\\Visualizer\\VertexMouseMenu.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/**\n * Constructor for a SpringLayout for a raw graph with associated component.\n *\n * @param g the {@code Graph} to lay out\n * @param length_function provides a length for each edge\n */\n", "func_signal": "public SpringLayoutWeighted(Graph<Functionality.Node,Functionality.Edge> g, Transformer<Functionality.Edge, Integer> length_function)", "code": "{\n    super(g);\n    this.lengthFunction = length_function;\n}", "path": "CastroVisualize\\src\\Visualizer\\SpringLayoutWeighted.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/*private Set<String> getNEText(Set<NamedEntity> sne)\n{\n\tNamedEntity ne;\n\tSet<String> ret = new HashSet<String>();\n\tfor (Iterator<NamedEntity> it = sne.iterator(); it.hasNext(); )\n\t{\n\t\tne = it.next();\n\t\tret.add(ne.getText());\n\t\t\n\t}\n\treturn ret;\n}*/\n", "func_signal": "private String makeStringForStringMap(Map<String, Boolean> sneID, String color)", "code": "{\n\tString text = \"\";\n\tString ne;\n\tfor (Iterator<String> it = sneID.keySet().iterator(); it.hasNext(); )\n\t{\n\t\tne = it.next();\n\t\tif (sneID.get(ne))\n\t\t{\n\t\t\ttext += \"<span style=\\\"color:\" + color + \"\\\">\" + ne + \"</span><br/>\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttext += \"<span style=\\\"color:\" + color + \"\\\"><b>\" + ne + \"</b></span><br/>\";\t\t\t\t\n\t\t}\n\t}\n\treturn text;\n}", "path": "CastroVisualize\\src\\Visualizer\\SpeechDetailPanel.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/** Creates a new instance of OpenTextMenuItem */\n", "func_signal": "public OpenTextMenuItem()", "code": "{\n    super(\"Open Text\");\n    this.addActionListener(new ActionListener(){\n        public void actionPerformed(ActionEvent e) {\n            visComp.getPickedVertexState().pick(vertex, false);\n\n    \t\tJFrame frame = new JFrame(\"Node \"+ ((Functionality.Node) vertex).getSpeech_id() + \": \" + ((Functionality.Node) vertex).getHeadline());\n    \t\tframe.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\n    \t\tJEditorPane ta = new JEditorPane();\n    \t\tta.setContentType(\"text/html\");\n    \t\t\n    \t\tString text = ((Functionality.Node) vertex).getSpeech_text(); \n    \t\t\n    \t\ttext = text.replaceAll(\"<PERSONS>\", \"<span style=\\\"color:\" + neTypeColors.getPersonsString() + \"\\\"><b>\");\n    \t\ttext = text.replaceAll(\"</PERSONS>\", \"</span></b>\");\n    \t\t\n    \t\ttext = text.replaceAll(\"<LOCATIONS>\", \"<span style=\\\"color:\" + neTypeColors.getLocationsString() + \"\\\"><b>\");\n    \t\ttext = text.replaceAll(\"</LOCATIONS>\", \"</span></b>\");\n    \t\t\n    \t\ttext = text.replaceAll(\"<ORGANIZATIONS>\", \"<span style=\\\"color:\" + neTypeColors.getOrganizationsString() + \"\\\"><b>\");\n    \t\ttext = text.replaceAll(\"</ORGANIZATIONS>\", \"</span></b>\");\n    \t\t\n    \t\tList<String> queryTerms = CastroGUI.gui.getQueryTerms();\n    \t\t\n    \t\tfor (int i = 0; i < queryTerms.size(); i++)\n    \t\t{\n    \t\t\ttext = text.replaceAll(queryTerms.get(i), \"<b><u>\" + queryTerms.get(i) + \"</u></b>\");\n    \t\t}\n    \t\t\n    \t\tSystem.err.println(text);\n    \t\t\n    \t\tta.setText(text);\n    \t\tJScrollPane sp = new JScrollPane(ta);\n    \t\t\n    \t\tContainer content = frame.getContentPane();\n    \t\tcontent.setLayout(null);\n    \t\t\n    \t\tcontent.add(sp);\n    \t\tsp.setBounds(10, 10, width - 20, height - 35);\n    \t\t\n    \t\t//frame.pack();\n    \t\tframe.setSize(width, height);\n        \tframe.setResizable(false);\n    \t\tframe.setFocusable(true);\n       \t\tframe.setVisible(true);\n                       \n            \n            visComp.repaint();\n        }\n    });\n}", "path": "CastroVisualize\\src\\Visualizer\\OpenTextMenuItem.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/** Creates a new instance of DeleteVertexMenuItem */\n", "func_signal": "public InfoMenuItem()", "code": "{\n    super(\"More Info\");\n    this.addActionListener(new ActionListener(){\n        public void actionPerformed(ActionEvent e) {\n            visComp.getPickedVertexState().pick(vertex, false);\n\n    \t\tJFrame frame = new JFrame(\"Node \"+ ((Functionality.Node) vertex).getSpeech_id()+\": \"+\n    \t\t\t\t((Functionality.Node) vertex).getHeadline());\n    \t\tframe.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\n    \t\tJPanel panel = new  JPanel();\n    \t\tJTextArea ta = new JTextArea(\n    \t\t\t\t\"Document Type: \"+((Functionality.Node) vertex).getDocument_type()+\"\\n\"+\n    \t\t\t\t\"ID: \"+((Functionality.Node) vertex).getSpeech_id()+\"\\n\"+\n    \t\t\t\t\"Headline: \"+ ((Functionality.Node) vertex).getHeadline()+\"\\n\"+\n    \t\t\t\t\"Date: \"+((Functionality.Node) vertex).getSpeech_date()+\"\\n\"+\n    \t\t\t\t\"Place: \"+((Functionality.Node) vertex).getPlace(), \n    \t\t\t\t20, 20);\n    \t\t\n    \t\tpanel.add(ta);\n    \t\tframe.getContentPane().add(panel);\n    \t\t\n    \t\tframe.pack();\n    \t\tframe.setVisible(true);\n    \t\tframe.setFocusable(true);\n            \n            \n            visComp.repaint();\n        }\n    });\n}", "path": "CastroVisualize\\src\\Visualizer\\InfoMenuItem.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\n\tgui = new CastroGUI();\n\tgui.init();\n}", "path": "CastroVisualize\\src\\GUI\\CastroGUI.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "//        protected AffineTransform scaleTransform = new AffineTransform();\n", "func_signal": "public VertexShapeSizeAspect(Functionality.Graph graphIn)", "code": "{\n        \tfor (int i = 0; i < graphIn.getNodes().size(); i++)\n        \t{\n        \t\tif (graphIn.getNodes().get(i).GetRelevance() > maxRelevance && graphIn.getNodes().get(i).GetRelevance() < 1.1) maxRelevance = graphIn.getNodes().get(i).GetRelevance();\n        \t}\n        \t\n        \tthis.graph = graphIn;\n            setSizeTransformer(new Transformer<V,Integer>() {\n\n\t\t\t\tpublic Integer transform(V v) {\n\t\t            if (scale)\n\t\t            {\n\t\t            \t//return 20;\n\t\t            \tdouble rel = ((Functionality.Node)v).GetRelevance();\n\t\t            \tif (rel > 1.1) rel = 1.1;\n\t\t            \tint retScale = (int)( (rel / maxRelevance) * 30) + 20;\n\t\t            \tif (retScale > 80)\n\t\t            \t{\n\t\t            \t\tretScale = 80;\n\t\t            \t}\n\t\t                return retScale;\n\t\t            }\n\t\t            else\n\t\t                return 20;\n\n\t\t\t\t}});\n            setAspectRatioTransformer(new Transformer<V,Float>() {\n\n\t\t\t\tpublic Float transform(V v)\n\t\t\t\t{\n\t\t                return 1.0f;\n\t\t\t\t}\n\t\t\t});\n        }", "path": "CastroVisualize\\src\\Visualizer\\Visualize.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/** Creates a new instance of MarkNeightboursVertexedge StrokeMenuItem */\n", "func_signal": "public MarkNeightboursMenuItem()", "code": "{\n\tsuper(\"Mark Neighbors\");\n\tthis.addActionListener(new ActionListener(){\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tVertexColorTransformer.vctInstance.setMarkedNodes(vertex.getNeighborsMap());\n\t\t\tvisComp.repaint();\n\t\t}\n\t});\n}", "path": "CastroVisualize\\src\\Visualizer\\MarkNeightboursMenuItem.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "//context informtion\n", "func_signal": "public Node(Integer id)", "code": "{\n\tthis.id = id;\n\tthis.marked = false;        //assumes new node is unmarked \n}", "path": "CastroVisualize\\src\\Functionality\\Node.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/**\n * Relaxation step. Moves all nodes a smidge.\n */\n", "func_signal": "public void step()", "code": "{\n\ttry {\n\t\tfor(Functionality.Node v : getGraph().getVertices()) {\n\t\t\tSpringVertexData svd = springVertexData.get(v);\n\t\t\tif (svd == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tsvd.dx /= 4;\n\t\t\tsvd.dy /= 4;\n\t\t\tsvd.edgedx = svd.edgedy = 0;\n\t\t\tsvd.repulsiondx = svd.repulsiondy = 0;\n\t\t}\n\t} catch(ConcurrentModificationException cme) {\n\t\tstep();\n\t}\n\n\trelaxEdges();\n\tcalculateRepulsion();\n\tmoveNodes();\n}", "path": "CastroVisualize\\src\\Visualizer\\SpringLayoutWeighted.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/**\n * Overridden for performance reasons.\n * See the <a href=\"#override\">Implementation Note</a> \n * for more information.\n */\n", "func_signal": "@Override\nprotected void firePropertyChange(String propertyName, Object oldValue, Object newValue)", "code": "{\t\n    // Strings get interned...\n    if (propertyName==\"text\") {\n        super.firePropertyChange(propertyName, oldValue, newValue);\n    }\n}", "path": "CastroVisualize\\src\\Visualizer\\MyVertexLabelRenderer.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/**\n * Implements the VertexMenuListener interface.\n * @param v \n * @param visComp \n */\n", "func_signal": "public void setVertexAndView(Functionality.Node v, VisualizationViewer visComp)", "code": "{\n\tthis.vertex = v;\n\tthis.visComp = visComp;\n\tthis.setText(\"Mark Neightbours\");\n\tSystem.err.println(\"Mark neightboursMenuItem!!!!!!\");\n\n\n}", "path": "CastroVisualize\\src\\Visualizer\\MarkNeightboursMenuItem.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/**\n * Implements the VertexMenuListener interface.\n * @param v \n * @param visComp \n */\n", "func_signal": "public void setVertexAndView(V v, VisualizationViewer visComp)", "code": "{\n    this.vertex = v;\n    this.visComp = visComp;\n    this.setText(\"Open text..\");\n}", "path": "CastroVisualize\\src\\Visualizer\\OpenTextMenuItem.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/**\n * Implements the VertexMenuListener interface.\n * @param v \n * @param visComp \n */\n", "func_signal": "public void setVertexAndView(V v, VisualizationViewer visComp)", "code": "{\n    this.vertex = v;\n    this.visComp = visComp;\n    this.setText(\"More details..\");\n}", "path": "CastroVisualize\\src\\Visualizer\\InfoMenuItem.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/**\n * Overrides <code>JComponent.setBackground</code> to assign\n * the unselected-background color to the specified color.\n *\n * @param c set the background color to this value\n */\n", "func_signal": "@Override\npublic void setBackground(Color c)", "code": "{\n    super.setBackground(c);\n    super.setOpaque(true);\n}", "path": "CastroVisualize\\src\\Visualizer\\MyVertexLabelRenderer.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/**\n *\n * Returns the default label renderer for a Vertex\n *\n * @param vv  the <code>VisualizationViewer</code> to render on\n * @param value  the value to assign to the label for\n *\t\t\t<code>Vertex</code>\n * @param vertex  the <code>Vertex</code>\n * @return the default label renderer\n */\n", "func_signal": "public <V> Component getVertexLabelRendererComponent(JComponent vv, Object value,\n        Font font, boolean isSelected, V vertex)", "code": "{\n    \n    super.setForeground(vv.getForeground());\n    if(isSelected) setForeground(pickedVertexLabelColor);\n    super.setBackground(vv.getBackground());\n    if(font != null) {\n        setFont(font);\n    } else {\n        setFont(vv.getFont());\n    }\n    setIcon(null);\n    setBorder(BorderFactory.createLineBorder(Color.BLACK));\n    setBackground(Color.getHSBColor(0.0f, 1.0f, 0.7f));\n    setOpaque(true);\n    setValue(value); \n    return this;\n}", "path": "CastroVisualize\\src\\Visualizer\\MyVertexLabelRenderer.java", "repo_name": "cehrler/castro", "stars": 4, "license": "None", "language": "java", "size": 95932}
{"docstring": "/**\n * Creates the field editors. Field editors are abstractions of\n * the common GUI blocks needed to manipulate various types\n * of preferences. Each field editor knows how to save and\n * restore itself.\n */\n", "func_signal": "public void createFieldEditors()", "code": "{\n\t/*addField(new DirectoryFieldEditor(PreferenceConstants.P_PATH, \n\t\t\t\"&Directory preference:\", getFieldEditorParent()));\n\taddField(\n\t\tnew BooleanFieldEditor(\n\t\t\tPreferenceConstants.P_BOOLEAN,\n\t\t\t\"&An example of a boolean preference\",\n\t\t\tgetFieldEditorParent()));\n\n\taddField(new RadioGroupFieldEditor(\n\t\t\tPreferenceConstants.P_CHOICE,\n\t\t\"An example of a multiple-choice preference\",\n\t\t1,\n\t\tnew String[][] { { \"&Choice 1\", \"choice1\" }, {\n\t\t\t\"Choice 2\", \"choice2\" }\n\t}, getFieldEditorParent()));*/\n\tString configLocation=ResourcesPlugin.getWorkspace().getRoot().getRawLocation().toOSString();\n\t\n\t//try {\n\t\t//config = new Config(configLocation+\"\\\\.coed\\\\config.ini\");\n\t\tconfig = Activator.getDefault().getController().getConfig();\n\t//} catch (InvalidConfigFileException e) {\n\t\t// TODO Auto-generated catch block\n\t\t//e.printStackTrace();\n\t//}\n\te1=new StringFieldEditor(PreferenceConstants.P_STRING1, \"Username\", getFieldEditorParent());\n\te2=new StringFieldEditor(PreferenceConstants.P_STRING2, \"Password\", getFieldEditorParent());\n\te3=new StringFieldEditor(PreferenceConstants.P_STRING3, \"Server Hostname\", getFieldEditorParent());\n\te4=new StringFieldEditor(PreferenceConstants.P_STRING4, \"Server Port\", getFieldEditorParent());\n\t\n\taddField(e4);\t\t  \n\taddField(e2);\t\t\t\n\taddField(e3);\t\t\t\n\taddField(e1);\t\t\t\n}", "path": "CoedPlugin\\src\\coed\\plugin\\preferences\\ConfigModifier.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/**\n * Get SSLContext singleton.\n *\n * @return SSLContext\n * @throws java.security.GeneralSecurityException\n *\n */\n", "func_signal": "public static SSLContext getInstance(boolean server)\n        throws GeneralSecurityException", "code": "{\n    SSLContext retInstance = null;\n    if (server) {\n        if (serverInstance == null) {\n            synchronized (BogusSSLContextFactory.class) {\n                if (serverInstance == null) {\n                    try {\n                        serverInstance = createBougusServerSSLContext();\n                    } catch (Exception ioe) {\n                        throw new GeneralSecurityException(\n                                \"Can't create Server SSLContext:\" + ioe);\n                    }\n                }\n            }\n        }\n        retInstance = serverInstance;\n    } else {\n        if (clientInstance == null) {\n            synchronized (BogusSSLContextFactory.class) {\n                if (clientInstance == null) {\n                    clientInstance = createBougusClientSSLContext();\n                }\n            }\n        }\n        retInstance = clientInstance;\n    }\n    return retInstance;\n}", "path": "ChatTest\\src\\ssl\\BogusSSLContextFactory.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/**\n * \n */\n", "func_signal": "public MySessionUsersView()", "code": "{\n\t// TODO Auto-generated constructor stub\n\tActivator.getController().attachUsersView(this);\n\troot =  new ModelDirectory(null, \"\", \"\");\n}", "path": "CoedPlugin\\src\\coed\\plugin\\views\\ui\\MySessionUsersView.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()\n */\n", "func_signal": "public void initializeDefaultPreferences()", "code": "{\n\tIPreferenceStore store = Activator.getDefault().getPreferenceStore();\n\tString configLocation=ResourcesPlugin.getWorkspace().getRoot().getRawLocation().toOSString();\n\tICoedConfig config=null;\n\ttry {\n\t\tconfig = new Config(configLocation+\"\\\\.coed\\\\config.ini\");\n\t} catch (InvalidConfigFileException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n\t\n\tstore.setDefault(PreferenceConstants.P_STRING1,config.getString(\"user.name\"));\n\tstore.setDefault(PreferenceConstants.P_STRING2,\"\");\n\tstore.setDefault(PreferenceConstants.P_STRING3,config.getString(\"server.host\"));\n\tstore.setDefault(PreferenceConstants.P_STRING4,config.getString(\"server.port\"));\n\t\n\t\n}", "path": "CoedPlugin\\src\\coed\\plugin\\preferences\\PreferenceInitializer.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/**\n * \n */\n", "func_signal": "public AllSessionsView()", "code": "{\n\t// TODO Auto-generated constructor stub\n\tActivator.getController().attachAllSessionsView(this);\n\troot =  new ModelDirectory(null, \"\", \"\");\n}", "path": "CoedPlugin\\src\\coed\\plugin\\views\\ui\\AllSessionsView.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/**\n * Processes a query and returns the result as a ResultSet.\n * Throws SQLException when query is unsuccessful\n * @param q the string containing the query\n * @return the result set\n */\n", "func_signal": "public ResultSet query(String q) throws SQLException", "code": "{\n\tStatement stat = conn.createStatement();\n\treturn  stat.executeQuery(q);\n}", "path": "CoedCollaboration\\src\\coed\\collab\\server\\db\\DBConnector.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/**\n * removes a session from the serverfile. if the removed session was the\n * last one registered on this serverfile, the serverfile will be deleted\n * from the managar. if the specified file is not in the manager, no action\n * is taken\n * \n * @param sf\n * @param s\n */\n", "func_signal": "public void removeSessionFromFile(ServerFile sf, Session s)", "code": "{\n\tif (files.containsKey(sf.getPath())) {\n\t\tsf.removeSession(s);\n\t\tif (sf.getNrOfSessions() == 0)\n\t\t\tfiles.remove(sf.getPath());\n\t}\n}", "path": "CoedCollaboration\\src\\coed\\collab\\server\\FileManager.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void start(BundleContext context) throws Exception", "code": "{\n\tsuper.start(context);\n\tplugin = this;\n\tcontroller = new Controller();\n\timageRegistry = new ImageRegistry();\n\t//TODO: add icons\n\t/* smthg like:\n\t URL myUrl=\tnew URL(MyPlugin.getInstance().getDescriptor().getInstallURL(),\"images/my_action.gif\");\n\t ImageDescriptor id = ImageDescriptor.createFromURL(myUrl);\n\t imageRegisrty.put(name, image);....\n\t */\n}", "path": "CoedPlugin\\src\\coed\\plugin\\base\\Activator.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/**\n * Alters a table's contents and returns the number of rows affected\n * Throws SQLException when query is unsuccessful\n * @param q - the string representing the query\n * @return the number of rows affected\n */\n", "func_signal": "public int alter(String q)throws SQLException", "code": "{\n\tStatement stat = conn.createStatement();\n\treturn stat.executeUpdate(q);\n}", "path": "CoedCollaboration\\src\\coed\\collab\\server\\db\\DBConnector.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tCollaboratorServer server = new CollaboratorServer(\"..\\\\.\\\\config.ini\");\n\tServerFile sf1 = new ServerFile(\"\\\\x\\\\o.txt\");\n\tSession s1 = new Session(null, null); //not interested in connection part yet\n\tSession s2 = new Session(null, null); //not interested in connection part yet\n\ts1.setUserName(\"user1\");\n\ts2.setUserName(\"user2\");\n\t\n\ttry{\n\t\tsf1.changeContents(\"This is the initial contents of the file.\");\n\t\t}catch(Exception e){}\n\t\n\tsf1.addSession(s1);\n\tsf1.addSession(s2);\n\t\n\tTextPortion tp1 = new TextPortion(0,5);\n\tTextPortion tp2 = new TextPortion(1,6);\n\t\n\tSystem.out.println(\"requesting overlapping locks by different users\");\n\tSystem.out.println(\"first lock result:\" +sf1.RequestLock(tp1, s1));\n\tSystem.out.println(\"second lock result:\" +sf1.RequestLock(tp2, s2));\n\tSystem.out.println(\"requesting overlapping locks by same user\");\n\tSystem.out.println(\"second lock result:\" +sf1.RequestLock(tp2, s1));\n\t\n\tSystem.out.println(\"request lock on (10,5)\");\n\tTextPortion tp3 = new TextPortion(10,5);\n\tsf1.RequestLock(tp3, s1);\n\tSystem.out.println(\"make a change at (9,5). thus lock should be shifted with 5\");\n\tTextModification tm1 = new TextModification(9,5,\"abcde\",\"user1\");\n\tsf1.addChange(tm1,s1);\n\tSystem.out.println(\"file's contents:\"+sf1.getCurrentContents());\n\tSystem.out.println(\"shifted lock should be at (15,5), thus trying to lock (16,2) by other user should fail\");\n\tsf1.setChangePointer(s2,3); //simulate that s2 has got all the changes til now\n\tTextPortion tp4 = new TextPortion(16,2);\n\tSystem.out.println(\"trying to lock (16,2). result: \"+sf1.RequestLock(tp4, s2));\n\t\n\tsf1.setChangePointer(s1, 3); //simulating that s1 has all the changes\n\tSystem.out.println(\"releasing lock (15,5)...\");\n\tsf1.ReleaseLock(new TextPortion(15,5), s1);\n\tSystem.out.println(\"trying to request (16,2). result: \"+sf1.RequestLock(tp4, s2));\n}", "path": "TEST\\src\\coed\\test\\collab\\server\\ServerLockTest.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/**\n * Write a serializable object to a file\n * @param obj the object to write\n * @param filename the file to write it to\n * @return true iff successful\n */\n", "func_signal": "public static boolean writeObjectToFile(Serializable obj, String filename)", "code": "{\n    //serialize the object\n\n    try {\n        //use buffering\n        OutputStream file = new FileOutputStream( filename );\n        OutputStream buffer = new BufferedOutputStream( file );\n        ObjectOutput output = new ObjectOutputStream( buffer );\n        try {\n        \toutput.writeObject(obj);\n        } finally {\n        \toutput.close();\n        }\n    } catch(IOException ex) {\n    \tex.printStackTrace();\n    \treturn false;  \n    }\n    \n    return true;\n}", "path": "Base\\src\\coed\\base\\util\\FileUtil.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/**\n * Adds a file to the Manager., if the file is not already in the manager.\n * \n * @param file\n *            the ServerFile object to be added\n */\n", "func_signal": "public ServerFile addFile(String path, String contents)", "code": "{\n\tServerFile result = new ServerFile(path, maxId++);\n\ttry {\n\t\tresult.changeContents(contents);\n\t} catch (IOException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n\tfiles.put(result.getId(), result);\n\treturn result;\n}", "path": "CoedCollaboration\\src\\coed\\collab\\server\\FileManager.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/**\n * Method used for testing\n * Remove when program finished!\n * Method sets the field editors\n */\n", "func_signal": "public void setFieldEditors()", "code": "{\n\te1.setStringValue(\"jozsi\");\n\te2.setStringValue(\"pass\");\n\te3.setStringValue(\"localhost\");\n\te4.setStringValue(\"1234\");\n}", "path": "CoedPlugin\\src\\coed\\plugin\\preferences\\ConfigModifier.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void stop(BundleContext context) throws Exception", "code": "{\n\tplugin = null;\n\tsuper.stop(context);\n}", "path": "CoedPlugin\\src\\coed\\plugin\\base\\Activator.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/**\n * Synchronized access method that returns an array of all the ServerFiles\n * that are in this FileManager(i.e. the online files)\n * \n * @return array of ServerFile objects\n */\n", "func_signal": "public ServerFile[] getAllLiveFiles()", "code": "{\n\tServerFile[] result = new ServerFile[files.size()];\n\tint i = 0;\n\tsynchronized (files) {\n\t\tfor (Map.Entry<Integer, ServerFile> entry : files.entrySet()) {\n\t\t\tresult[i] = entry.getValue();\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}", "path": "CoedCollaboration\\src\\coed\\collab\\server\\FileManager.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "//when trying to acces a change out of range\n", "func_signal": "public void testGetChangeAt()", "code": "{\n\t\tCoedFileChange chg1 = new CoedFileChange(new TextModification(1,10,\"abcdefghij\"), new Date());\n\t\tqueue.enQueueChange(chg1);\n\t\tassertTrue(queue.getChangeAt(0).equals(chg1.getMod()));\n\t\tassertNull(queue.getChangeAt(10));\n\t}", "path": "TEST\\src\\coed\\test\\collab\\server\\ChangeQueueTest1.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/**\n * \tCreates a Communicator with specified attributes\n * @param basePath the Path of the workspace (without \"\\\" at the end!!!)\n * @return Communicator object\n * @throws UnknownVersionerTypeException\n * @throws InvalidConfigFileException\n */\n", "func_signal": "public ICoedCommunicator create(String basePath) throws UnknownVersionerTypeException, InvalidConfigFileException", "code": "{\n\tConfig conf = new Config(basePath+\"\\\\.coed\\\\config.ini\");\n\tString type = conf.getString(\"versioner.type\");\n\t\n\t//must check for null, because even if the config file exists, it may be corrupt/incomplete\n\tif(type!=null && type.equals(ICoedVersioner.STATIC)) {\n\t\treturn new Communicator(new StaticVersioner(), new CollaboratorClient(conf,basePath), conf, basePath);\n\t} else if(type!=null && type.equals(ICoedVersioner.GIT)) {\n\t\t//return new Communicator(new GitVersioner(), new Collaborator());\n\t}\n\tthrow new UnknownVersionerTypeException();\n}", "path": "CoedCollaboration\\src\\coed\\collab\\client\\CoedCommunicatorFactory.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/* (non-Javadoc)\n * @see org.eclipse.ui.IWorkbenchPreferencePage#init(org.eclipse.ui.IWorkbench)\n */\n", "func_signal": "public boolean performOk()", "code": "{\n\tconfig.setString(\"user.password\", e2.getStringValue());\n\tconfig.setString(\"server.host\",e3.getStringValue());\n\tconfig.setString(\"server.port\",e4.getStringValue());\n\tconfig.setString(\"user.name\",e1.getStringValue());\n\t\n\t config.writeConfigFile();\n\t\n\treturn true;\n}", "path": "CoedPlugin\\src\\coed\\plugin\\preferences\\ConfigModifier.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/**\n * Read a serialized object from a file\n * @param filename the file to read from\n * @return the object read from the file or null if an error occurred\n */\n", "func_signal": "public static Object readObjectFromFile(String filename)", "code": "{\n\t//deserialize the the file\n      \n\ttry {\n\t\t//use buffering\n\t\tInputStream file = new FileInputStream( filename );\n\t\tInputStream buffer = new BufferedInputStream( file );\n\t\tObjectInput input = new ObjectInputStream ( buffer );\n\t\ttry {\n\t\t\t//display its data\n\t\t\treturn input.readObject();\n\t\t} finally {\n\t\t\tinput.close();\n\t\t}\n\t} catch(ClassNotFoundException ex){\n\t\tex.printStackTrace();\n\t} catch(IOException ex){\n\t\tex.printStackTrace();\n\t}\n\treturn null;\n    }", "path": "Base\\src\\coed\\base\\util\\FileUtil.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/**\n * Removes a file from the Manager\n * \n * @param path\n *            the path of the file (key).\n */\n", "func_signal": "public void removeFile(Integer id)", "code": "{\n\tif (files.containsKey(id))\n\t\tfiles.remove(id);\n}", "path": "CoedCollaboration\\src\\coed\\collab\\server\\FileManager.java", "repo_name": "szakats/coed", "stars": 4, "license": "None", "language": "java", "size": 2092}
{"docstring": "/**\n * Initialise an instance of the mechanics.\n */\n", "func_signal": "public BattleMechanics(int bytes)", "code": "{\n\tif (bytes == 4) {\n\t\tm_random = new Random();\n\t} else {\n\t\tm_random = getRandomSource(bytes);\n\t}\n}", "path": "src\\net\\k3rnel\\server\\battle\\mechanics\\BattleMechanics.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Returns true if a fishing attempt was deemed successful(Will the player pull up any monster or find nothing?)\n * @param c\n * @param d\n * @param rod\n */\n", "func_signal": "public boolean caughtFish(PlayerChar c, Direction d, int rod)", "code": "{\n\tint failureRate = 75;\n\t//Subtract the rod's power from the failure rate.\n\tfailureRate -= rod;\n\t//If that tile is a water tile, determine if you pulled anything, if not, autofail(You can't fish on dry land)\n\tif(facingWater(c, d)) { //If facing water\n\t\tc.setFishing(true);\t\t\n\t\tif((int)(Math.random()* 101) > failureRate) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\tc.getTcpSession().write(\"Ff\"); // Tell the player he can't fish on land\n\t}\n\treturn false;\n}", "path": "src\\net\\k3rnel\\server\\backend\\map\\ServerMap.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Returns the amount of EXP required to reach a level\n * based on a monster's EXP type\n * @param poke\n * @param level\n * @return\n */\n", "func_signal": "public double getExpForLevel(Monster poke, int level)", "code": "{\n\tdouble exp = 0;\n\tswitch (poke.getExpType()){\n\tcase MEDIUM: \n\t\texp = (int)java.lang.Math.pow((double)level, 3);\n\t\tbreak;\n\tcase ERRATIC: \n\t\tdouble p = 0;\n\t\tswitch (level % 3){\n\t\tcase 0:\n\t\t\tp = 0;\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tp = 0.008;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tp = 0.014;\n\t\t\tbreak;\n\t\t}\n\t\tif (level <= 50){\n\t\t\texp = java.lang.Math.pow((double)level, 3) * ((100 - (double)level) / 50);\n\t\t} else if (level <= 68){\n\t\t\texp = java.lang.Math.pow((double)level, 3) * ((150 - (double)level) / 50);\n\t\t} else if (level <= 98){\n\t\t\texp = (java.lang.Math.pow((double)level, 3) *\n\t\t\t\t\t(1.274 - ((1/50) * ((double)level / 3)) - p));\n\t\t} else {\n\t\t\texp = java.lang.Math.pow((double)level, 3) * ((160 - (double)level) / 50);\n\t\t}\n\t\tbreak;\n\tcase FAST: \n\t\texp = 4 * java.lang.Math.pow((double)level, 3) / 5;\n\t\tbreak;\n\tcase FLUCTUATING: \n\t\tif (level <= 15){\n\t\t\texp = java.lang.Math.pow((double)level, 3) * \n\t\t\t\t((24 + (((double)level + 1) / 3)) / 50);\n\t\t} else if ((double)level <= 35){\n\t\t\texp = java.lang.Math.pow((double)level, 3) * \n\t\t\t((14 + (double)level) / 50);\n\t\t} else {\n\t\t\texp = java.lang.Math.pow((double)level, 3) * \n\t\t\t((32 + ((double)level / 2)) / 50);\n\t\t}    \t\t\n\t\tbreak;\n\tcase PARABOLIC: \n\t\texp = (6 * (java.lang.Math.pow((double)level, 3) / 5)) - \n\t\t(15 * java.lang.Math.pow((double)level, 2)) + (100 * (double)level) - 140;\n\t\tbreak;\n\tcase SLOW: \n\t\texp = 5 * java.lang.Math.pow((double)level, 3) / 4;;\n\t\tbreak;\n\t}\n\treturn exp;\n}", "path": "src\\net\\k3rnel\\server\\battle\\mechanics\\BattleMechanics.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Calculates the EXP gained (per monster who defeated it) from defeating a monster\n * @param a - The defeated monster\n * @param u - How many monster defeated it\n * @return\n */\n", "func_signal": "public double calculateExpGain(Monster a, int u)", "code": "{\n\tdouble result = (((((a.getLevel() * a.getBaseExp())/7))/u));\n\treturn result / 2;\n}", "path": "src\\net\\k3rnel\\server\\battle\\mechanics\\BattleMechanics.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Poison stays through switching out.\n */\n", "func_signal": "public boolean switchOut(Monster p)", "code": "{\n    m_turns = 1;\n    return false;\n}", "path": "src\\net\\k3rnel\\server\\battle\\mechanics\\statuses\\ToxicEffect.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Returns true if a wild monster was encountered.\n * @return\n */\n", "func_signal": "public boolean isWildBattle(int x, int y, PlayerChar p)", "code": "{\n\tif (m_random.nextInt(2874) < m_wildProbability * 16) {\n\t\tif(p.isSurfing()) {\n\t\t\tif(m_waterMonsterChances != null && m_waterMonsterLevels != null)\n\t\t\t\treturn true;\n\t\t} else {\n\t\t\tif (m_grass != null && m_grass.getTileAt(x / 32, (y + 8) / 32) == '1')\n\t\t\t\tif((m_dayMonsterChances != null && m_dayMonsterLevels != null) ||\n\t\t\t\t\t\t(m_nightMonsterChances != null && m_nightMonsterLevels != null))\n\t\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "path": "src\\net\\k3rnel\\server\\backend\\map\\ServerMap.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Calcultes the level of a monster based on their EXP amount\n * @param a\n * @return\n */\n", "func_signal": "public int calculateLevel(Monster a)", "code": "{\n\tdouble result = 0;\n\tswitch (a.getExpType())\t{\n\tcase MEDIUM:\n\t{\n\t\tfor(double i = 1; i <= 100; i++)\n\t\t{\n\t\t\tif(i < 100 && a.getExp() >= (i * i * i) && a.getExp() < ((i + 1) * (i + 1) * (i + 1)))\n\t\t\t{\n\t\t\t\tresult = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(i == 100 && a.getExp() >= (i * i * i))\n\t\t\t{\n\t\t\t\tresult = 100;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(a.getExp() >= 1000000)\n\t\t\t{\n\t\t\t\tresult = 100;\n\t\t\t\ta.setExp(1000000);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tbreak;\n\tcase ERRATIC:\n\t{\n\t\tfor(double i = 1; i < 101; i++)\n\t\t{\n\t\t\tif(i < 50)\n\t\t\t{\n\t\t\t\tif((a.getExp()) >= ((i * i * i)*((100 - i)/50)) && (a.getExp()) < (((i + 1) * (i + 1) * (i + 1))*((100 - (i + 1))/50)))\n\t\t\t\t{\n\t\t\t\t\tresult = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == 50)\n\t\t\t\tresult = i;\n\t\t\telse if(i >= 51 && i < 68)\n\t\t\t{\n\t\t\t\tif((a.getExp()) >= ((i * i * i)*((150 - i)/50)) && (a.getExp()) < (((i + 1) * (i + 1) * (i + 1))*((150 - (i + 1))/50)))\n\t\t\t\t{\n\t\t\t\t\tresult = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\telse if(i == 68)\n\t\t\t\tresult = i;\n\t\t\telse if(i >= 69 && i < 98)\n\t\t\t{\n\t\t\t\tdouble temp = a.getExp();\n\t\t\t\tdouble funt = i % 3;\n\t\t\t\tdouble funt1 = (i + 1) % 3;\n\t\t\t\tif(funt == 1)\n\t\t\t\t\tfunt = 0.008;\n\t\t\t\telse if(funt == 2)\n\t\t\t\t\tfunt = 0.014;\n\t\t\t\tif(funt1 == 1)\n\t\t\t\t\tfunt1 = 0.008;\n\t\t\t\telse if(funt1 == 2)\n\t\t\t\t\tfunt1 = 0.014;\t\t\n\t\t\t\tif(temp >= ((i * i * i) * (1.274 - ((1 / 50)*(i / 3)) - funt)) && temp < (((i + 1) * (i + 1) * (i + 1)) * (1.274 - ((1 / 50)*((i + 1) / 3)) - funt1)))\n\t\t\t\t{\n\t\t\t\t\tresult = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == 98)\n\t\t\t\tresult = i;\n\t\t\telse if(i == 99)\n\t\t\t{\n\t\t\t\tif((a.getExp()) >= ((i * i * i)*((160 - i)/50)) && (a.getExp()) < (((i + 1) * (i + 1) * (i + 1))*((160 - (i + 1))/50)))\n\t\t\t\t{\n\t\t\t\t\tresult = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\t\t\t\t\t\t\n\t\t\t}\n\t\t\telse if(i == 100)\n\t\t\t{\n\t\t\t\tif((a.getExp()) >= ((i * i * i)*((160 - i)/50)))\n\t\t\t\t{\n\t\t\t\t\tresult = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\t\t\t\t\t\t\n\t\t\t}\n\t\t\telse if(a.getExp() >= 600000)\n\t\t\t{\n\t\t\t\tresult = 100;\n\t\t\t\ta.setExp(600000);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tbreak;\n\tcase FLUCTUATING:\n\t{\n\t\tfor(double i = 101; i > 36; i--)\n\t\t{\n\t\t\tif((a.getExp()) < ((i * i * i)*((32 + (i / 2))/50)))\n\t\t\t\tresult = i - 1;\t\t\n\t\t}\n\t\tfor(double i = 36; i > 15; i--)\n\t\t{\n\t\t\tSystem.out.println(i);\n\t\t\tif((a.getExp()) < ((i * i * i)*((14 + i)/50)))\n\t\t\t\tresult = i - 1;\n\t\t}\n\t\tfor(double i = 15; i > 1; i--)\n\t\t{\n\t\t\tdouble reqExp = (i * i * i)*((24 + ((i + 1) / 3))/50);\n\t\t\tif((a.getExp()) < reqExp)\n\t\t\t\tresult = i - 1;\n\t\t}\n\t\tif(a.getExp() >= 1640000)\n\t\t{\n\t\t\tresult = 100;\n\t\t\ta.setExp(1640000);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tbreak;\n\tcase PARABOLIC:\n\t{\n\t\tfor(double i = 101; i > 1; i--)\n\t\t{\n\t\t\tif(a.getExp() < (((6 * (i * i * i))/5) - (15 * (i * i)) + (100 * i) - 140))\n\t\t\t{\n\t\t\t\tresult = i - 1;\n\t\t\t}\n\t\t\telse if(a.getExp() >= 1059860)\n\t\t\t{\n\t\t\t\tresult = 100;\n\t\t\t\ta.setExp(1059860);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tbreak;\n\tcase FAST:\n\t{\n\t\tfor(double i = 101; i > 1; i--)\n\t\t{\n\t\t\tif(a.getExp() < ((4 * (i * i * i))/5))\n\t\t\t{\n\t\t\t\tresult = i - 1;\n\t\t\t}\n\t\t\telse if(a.getExp() >= 800000)\n\t\t\t{\n\t\t\t\tresult = 100;\n\t\t\t\ta.setExp(800000);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tbreak;\n\tcase SLOW:\n\t{\n\t\tfor(double i = 101; i > 1; i--)\n\t\t{\n\t\t\tif(a.getExp() < ((5 * (i * i * i))/4))\n\t\t\t{\n\t\t\t\tresult = i - 1;\n\t\t\t}\n\t\t\telse if(a.getExp() >= 1250000)\n\t\t\t{\n\t\t\t\tresult = 100;\n\t\t\t\ta.setExp(1250000);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t}\n\treturn (int) result;\n}", "path": "src\\net\\k3rnel\\server\\battle\\mechanics\\BattleMechanics.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Returns a wild monster.\n * Different players have different chances of encountering rarer Pokemon.\n * @return\n */\n", "func_signal": "public Monster getWildMonster(PlayerChar player)", "code": "{\n\tint [] range;\n\tString species;\n\tif(player.isSurfing()) {\n\t\t//Generate a Monster from the water\n\t\tspecies = getWildSpeciesWater();\n\t\trange = m_waterMonsterLevels.get(species);\n\t\treturn Monster.getRandomMonster(species, (m_random.nextInt((range[1] - range[0]) + 1)) + range[0]);\n\t} \n\telse if(player.isFishing()) {\n\t\t//Generate a monster caught by fishing\n\t\tspecies = getWildSpeciesFish();\n\t\trange = m_fishMonsterLevels.get(species);\n\t\treturn Monster.getRandomMonster(species, (m_random.nextInt((range[1] - range[0]) + 1)) + range[0]);\n\t}\n\telse {\n\t\tif(TimeService.isNight()) {\n\t\t\t//Generate a nocturnal Monster\n\t\t\tspecies = getWildSpeciesNight();\n\t\t\trange = m_nightMonsterLevels.get(species);\n\t\t\treturn Monster.getRandomMonster(species, (m_random.nextInt((range[1] - range[0]) + 1)) + range[0]);\n\t\t} else {\n\t\t\t//Generate a day Monster\n\t\t\tspecies = getWildSpeciesDay();\n\t\t\trange = m_dayMonsterLevels.get(species);\n\t\t\treturn Monster.getRandomMonster(species, (m_random.nextInt((range[1] - range[0]) + 1)) + range[0]);\n\t\t}\n\t}\n}", "path": "src\\net\\k3rnel\\server\\backend\\map\\ServerMap.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Adds a player to this map and notifies all other clients on the map.\n * @param player\n */\n", "func_signal": "public void addChar(Char c)", "code": "{\n\tif(c instanceof PlayerChar) {\n\t\tm_players.put(c.getName(), (PlayerChar) c);\n\t} else if(c instanceof NonPlayerChar || c instanceof HMObject) {\n\t\t//Set the id of the npc\n\t\tc.setId(-1 - m_npcs.size());\n\t\tm_npcs.add((NonPlayerChar) c);\n\t}\n\tsynchronized(m_players) {\n\t\tfor(PlayerChar p : m_players.values()) {\n\t\t\tif(c.getId() != p.getId()) {\n\t\t\t\tString name = c.getName();\n\t\t\t\tif(c instanceof NonPlayerChar) {\n\t\t\t\t\tname = \"!NPC!\";\n\t\t\t\t}\n\t\t\t\tp.getTcpSession().write(\"ma\" + name + \",\" + \n\t\t\t\t\t\tc.getId() + \",\" + c.getSprite() + \",\" + c.getX() + \",\" + c.getY() + \",\" + \n\t\t\t\t\t\t(c.getFacing() == Direction.Down ? \"D\" : \n\t\t\t\t\t\t\tc.getFacing() == Direction.Up ? \"U\" :\n\t\t\t\t\t\t\t\tc.getFacing() == Direction.Left ? \"L\" :\n\t\t\t\t\t\t\t\t\t\"R\"));\n\t\t\t}\n\n\t\t}\n\t}\n}", "path": "src\\net\\k3rnel\\server\\backend\\map\\ServerMap.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Returns a wild species for water\n * @return\n */\n", "func_signal": "private String getWildSpeciesWater()", "code": "{\n\tArrayList<String> potentialSpecies = new ArrayList<String>();\n\tdo {\n\t\tfor (String species : m_waterMonsterChances.keySet()) {\n\t\t\tif (m_random.nextInt(101) < m_waterMonsterChances.get(species))\n\t\t\t\tpotentialSpecies.add(species);\n\t\t}\n\t} while (potentialSpecies.size() <= 0);\n\treturn potentialSpecies.get(m_random.nextInt(potentialSpecies.size()));\n}", "path": "src\\net\\k3rnel\\server\\backend\\map\\ServerMap.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Starts an npc battle with the player if the player was challenged\n * @param p\n * @return\n */\n", "func_signal": "public boolean isNpcBattle(PlayerChar p)", "code": "{\n\tNonPlayerChar n = null;\n\tfor(int i = 0; i < m_npcs.size(); i++) {\n\t\tn = m_npcs.get(i);\n\t\tif(n != null && n.isTrainer() && !n.isGymLeader()) {\n\t\t\t/*\n\t\t\t * For the npc to be able to challenge the player, the must be on the same\n\t\t\t * axis as the player, the x axis or the y axis\n\t\t\t */\n\t\t\tif(n.getX() == p.getX()) {\n\t\t\t\t/* Same column */\n\t\t\t\tif(n.getY() > p.getY()) {\n\t\t\t\t\t/* NPC is above the player */\n\t\t\t\t\tif(n.getFacing() == Direction.Up && n.canSee(p)) {\n\t\t\t\t\t\tNpcBattleLauncher l = new NpcBattleLauncher(n, p);\n\t\t\t\t\t\tl.start();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/* NPC is below the player */\n\t\t\t\t\tif(n.getFacing() == Direction.Down && n.canSee(p)) {\n\t\t\t\t\t\tNpcBattleLauncher l = new NpcBattleLauncher(n, p);\n\t\t\t\t\t\tl.start();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if(n.getY() == p.getY()) {\n\t\t\t\t/* Same row */\n\t\t\t\tif(n.getX() > p.getX()) {\n\t\t\t\t\t/* NPC is right of the player */\n\t\t\t\t\tif(n.getFacing() == Direction.Left && n.canSee(p)) {\n\t\t\t\t\t\tNpcBattleLauncher l = new NpcBattleLauncher(n, p);\n\t\t\t\t\t\tl.start();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/* NPC is left of the player */\n\t\t\t\t\tif(n.getFacing() == Direction.Right && n.canSee(p)) {\n\t\t\t\t\t\tNpcBattleLauncher l = new NpcBattleLauncher(n, p);\n\t\t\t\t\t\tl.start();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "path": "src\\net\\k3rnel\\server\\backend\\map\\ServerMap.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Allows a player to talk to the npc in front of them, if any\n * @param p\n */\n", "func_signal": "public void talkToNpc(PlayerChar p)", "code": "{\n\tint x = 0, y = 0;\n\tswitch(p.getFacing()) {\n\tcase Up:\n\t\tx = p.getX();\n\t\ty = p.getY() - 32;\n\t\tbreak;\n\tcase Down:\n\t\tx = p.getX();\n\t\ty = p.getY() + 32;\n\t\tbreak;\n\tcase Left:\n\t\tx = p.getX() - 32;\n\t\ty = p.getY();\n\t\tbreak;\n\tcase Right:\n\t\tx = p.getX() + 32;\n\t\ty = p.getY();\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\tfor(int i = 0; i < m_npcs.size(); i++) {\n\t\tif(m_npcs.get(i).getX() == x && m_npcs.get(i).getY() == y) {\n\t\t\tif (!(m_npcs.get(i) instanceof HMObject))\n\t\t\t\tp.setTalking(true);\n\t\t\tm_npcs.get(i).talkToPlayer(p);\n\t\t\tbreak;\n\t\t}\n\t}\n}", "path": "src\\net\\k3rnel\\server\\backend\\map\\ServerMap.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Initialise the battle mechanics. Try to use the SecureRandom class for\n * the random number generator, with a seed from /dev/random. However, if\n * /dev/random is unavailable (e.g. if we are running on Windows) then an\n * instance of Random, seeded from the time, is used instead.\n *\n * For best results, use an operating system that supports /dev/random.\n */\n", "func_signal": "public static Random getRandomSource(int bytes)", "code": "{\n\ttry {\n\t\treturn new SecureRandom(/*seed*/);\n\t} catch (Exception e) {\n\t\tSystem.out.println(\"Could not use SecureRandom: \" + e.getMessage());\n\t\treturn new Random();\n\t}\n}", "path": "src\\net\\k3rnel\\server\\battle\\mechanics\\BattleMechanics.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Returns the weather id for the enforced weather on this map\n * @return\n */\n", "func_signal": "public int getWeatherId()", "code": "{\n\tif(m_forcedWeather != null) {\n\t\tswitch(m_forcedWeather) {\n\t\tcase NORMAL:\n\t\t\treturn 0;\n\t\tcase RAIN:\n\t\t\treturn 1;\n\t\tcase HAIL:\n\t\t\treturn 2;\n\t\tcase SANDSTORM:\n\t\t\treturn 3;\n\t\tcase FOG:\n\t\t\treturn 4;\n\t\tdefault:\n\t\t\treturn 0;\n\t\t}\n\t} else\n\t\treturn 0;\n}", "path": "src\\net\\k3rnel\\server\\backend\\map\\ServerMap.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Returns a wild species for fishing\n * @return\n */\n", "func_signal": "private String getWildSpeciesFish()", "code": "{\n\tArrayList<String> potentialSpecies = new ArrayList<String>();\n\tdo {\n\t\tfor (String species : m_fishMonsterChances.keySet()) {\n\t\t\tif (m_random.nextInt(101) < m_fishMonsterChances.get(species))\n\t\t\t\tpotentialSpecies.add(species);\n\t\t}\n\t} while (potentialSpecies.size() <= 0);\n\treturn potentialSpecies.get(m_random.nextInt(potentialSpecies.size()));\n}", "path": "src\\net\\k3rnel\\server\\backend\\map\\ServerMap.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n     * Sends a chat message to everyone of the same language\n     * @param message\n     * @param l\n     */\n", "func_signal": "public void sendChatMessage(String message, Language l)", "code": "{\n            synchronized(m_players) {\n                    Collection<PlayerChar> list = m_players.values();\n                    for(PlayerChar p: list) {\n                            if(p.getLanguage() == l) {\n                                    TcpProtocolHandler.writeMessage(\n                                                    p.getTcpSession(),\n                                                    new ChatMessage(ChatMessageType.LOCAL, message));\n                            }\n                    }\n            }\n    }", "path": "src\\net\\k3rnel\\server\\backend\\map\\ServerMap.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Returns true if the char is able to move\n * @param c\n * @param d\n */\n", "func_signal": "public boolean moveChar(Char c, Direction d)", "code": "{\n\tint playerX = c.getX();\n\tint playerY = c.getY();\n\tint newX;\n\tint newY;\n\n\tswitch(d) {\n\tcase Up:\n\t\tnewX = playerX / 32;\n\t\tnewY = ((playerY + 8) - 32) / 32;\n\t\tif (playerY >= 1) {\n\t\t\tif (!isBlocked(newX, newY, Direction.Up)) {\n\t\t\t\tif(m_surf != null && m_surf.getTileAt(newX, newY) == '1') {\n\t\t\t\t\tif(c.isSurfing()) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(c instanceof PlayerChar) {\n\t\t\t\t\t\t\tPlayerChar p = (PlayerChar) c;\n\t\t\t\t\t\t\tif(p.canSurf()) {\n\t\t\t\t\t\t\t\tp.setSurfing(true);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif(c.isSurfing())\n\t\t\t\t\t\tc.setSurfing(false);\n\t\t\t\t\tif(!isWarped(newX, newY, c))\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tServerMap newMap = m_mapMatrix.getMapByGamePosition(m_x, m_y - 1);\n\t\t\tif (newMap != null) {\n\t\t\t\tm_mapMatrix.moveBetweenMaps(c, this, newMap);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase Down:\n\t\tnewX = playerX / 32;\n\t\tnewY = ((playerY + 8) + 32) / 32;\n\t\tif (playerY + 40 < m_heigth * 32) {\n\t\t\tif (!isBlocked(newX, newY, Direction.Down)) {\n\t\t\t\tif(m_surf != null && m_surf.getTileAt(newX, newY) == '1') {\n\t\t\t\t\tif(c.isSurfing()) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(c instanceof PlayerChar) {\n\t\t\t\t\t\t\tPlayerChar p = (PlayerChar) c;\n\t\t\t\t\t\t\tif(p.canSurf()) {\n\t\t\t\t\t\t\t\tp.setSurfing(true);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif(c.isSurfing())\n\t\t\t\t\t\tc.setSurfing(false);\n\t\t\t\t\tif(!isWarped(newX, newY, c))\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tServerMap newMap = m_mapMatrix.getMapByGamePosition(m_x, m_y + 1);\n\t\t\tif (newMap != null) {\n\t\t\t\tm_mapMatrix.moveBetweenMaps(c, this, newMap);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase Left:\n\t\tnewX = (playerX - 32) / 32;\n\t\tnewY = (playerY + 8) / 32;\n\t\tif (playerX >= 32) {\n\t\t\tif (!isBlocked(newX, newY, Direction.Left)) {\n\t\t\t\tif(m_surf != null && m_surf.getTileAt(newX, newY) == '1') {\n\t\t\t\t\tif(c.isSurfing()) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(c instanceof PlayerChar) {\n\t\t\t\t\t\t\tPlayerChar p = (PlayerChar) c;\n\t\t\t\t\t\t\tif(p.canSurf()) {\n\t\t\t\t\t\t\t\tp.setSurfing(true);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif(c.isSurfing())\n\t\t\t\t\t\tc.setSurfing(false);\n\t\t\t\t\tif(!isWarped(newX, newY, c))\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tServerMap newMap = m_mapMatrix.getMapByGamePosition(m_x - 1, m_y);\n\t\t\tif (newMap != null) {\n\t\t\t\tm_mapMatrix.moveBetweenMaps(c, this, newMap);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase Right:\n\t\tnewX = (playerX + 32) / 32;\n\t\tnewY = (playerY + 8) / 32;\n\t\tif (playerX + 32 < m_width * 32) {\n\t\t\tif (!isBlocked(newX, newY, Direction.Right)) {\n\t\t\t\tif(m_surf != null && m_surf.getTileAt(newX, newY) == '1') {\n\t\t\t\t\tif(c.isSurfing()) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(c instanceof PlayerChar) {\n\t\t\t\t\t\t\tPlayerChar p = (PlayerChar) c;\n\t\t\t\t\t\t\tif(p.canSurf()) {\n\t\t\t\t\t\t\t\tp.setSurfing(true);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif(c.isSurfing())\n\t\t\t\t\t\tc.setSurfing(false);\n\t\t\t\t\tif(!isWarped(newX, newY, c))\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tServerMap newMap = m_mapMatrix.getMapByGamePosition(m_x + 1, m_y);\n\t\t\tif (newMap != null) {\n\t\t\t\tm_mapMatrix.moveBetweenMaps(c, this, newMap);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\t}\n\treturn false;\n}", "path": "src\\net\\k3rnel\\server\\backend\\map\\ServerMap.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Default constructor\n * @param map\n * @param x\n * @param y\n */\n", "func_signal": "public ServerMap(Map map, int x, int y)", "code": "{\n\tm_x = x;\n\tm_y = y;\n\tm_heigth = map.getHeight();\n\tm_width = map.getWidth();\n\t/*\n\t * Store all the map layers\n\t */\n\tfor(int i = 0; i < map.getTotalLayers(); i++) {\n\t\tif(map.getLayer(i).getName().equalsIgnoreCase(\"Grass\")) {\n\t\t\tm_grass = new ServerTileLayer((TileLayer) map.getLayer(i));\n\t\t} else if(map.getLayer(i).getName().equalsIgnoreCase(\"Collisions\")) {\n\t\t\tm_blocked = new ServerTileLayer((TileLayer) map.getLayer(i));\n\t\t} else if(map.getLayer(i).getName().equalsIgnoreCase(\"LedgesLeft\")) {\n\t\t\tm_ledgesLeft = new ServerTileLayer((TileLayer) map.getLayer(i));\n\t\t} else if(map.getLayer(i).getName().equalsIgnoreCase(\"LedgesRight\")) {\n\t\t\tm_ledgesRight = new ServerTileLayer((TileLayer) map.getLayer(i));\n\t\t} else if(map.getLayer(i).getName().equalsIgnoreCase(\"LedgesDown\")) {\n\t\t\tm_ledgesDown = new ServerTileLayer((TileLayer) map.getLayer(i));\n\t\t} else if(map.getLayer(i).getName().equalsIgnoreCase(\"Water\")) {\n\t\t\tm_surf = new ServerTileLayer((TileLayer) map.getLayer(i));\n\t\t}\n\t}\n\t\n\tm_players = new HashMap<String, PlayerChar>();\n\tm_npcs = new ArrayList<NonPlayerChar>();\n\t\n\t/*\n\t * Load pvp settings\n\t */\n\ttry {\n\t\tString type = map.getProperties().getProperty(\"pvp\");\n\t\tif(type.equalsIgnoreCase(\"disabled\")) {\n\t\t\tm_pvpType = PvPType.DISABLED;\n\t\t} else if(type.equalsIgnoreCase(\"enabled\")) {\n\t\t\tm_pvpType = PvPType.ENABLED;\n\t\t} else {\n\t\t\tm_pvpType = PvPType.ENFORCED;\n\t\t}\n\t} catch (Exception e) {\n\t\tm_pvpType = PvPType.ENABLED;\n\t}\n\t\n\t/*\n\t * Add enforced weather if any\n\t */\n\ttry {\n\t\tif(x < -30) {\n\t\t\tif(x != -49 || y != -3) {\n\t\t\t\tm_forcedWeather = Weather.NORMAL;\n\t\t\t}\n\t\t\telse if(x!= -36 || y != -49) {\n\t\t\t\t   m_forcedWeather = Weather.NORMAL;\n\t\t\t\t}\n\t\t} else if(map.getProperties().getProperty(\"forcedWeather\") != null && \n\t\t\t\t!map.getProperties().getProperty(\"forcedWeather\").equalsIgnoreCase(\"\")) {\n\t\t\tm_forcedWeather = Weather.valueOf(map.getProperties().getProperty(\"forcedWeather\"));\n\t\t}\n\t} catch (Exception e) {\n\t\tm_forcedWeather = null;\n\t}\n\t\n\t/*\n\t * Load offsets\n\t */\n\ttry {\n\t\tm_xOffsetModifier = Integer.parseInt(map.getProperties().getProperty(\"xOffsetModifier\"));\n\t} catch (Exception e) {\n\t\tm_xOffsetModifier = 0;\n\t}\n\ttry {\n\t\tm_yOffsetModifier = Integer.parseInt(map.getProperties().getProperty(\"yOffsetModifier\"));\n\t} catch (Exception e) {\n\t\tm_yOffsetModifier = 0;\n\t}\n\t\n\t/*\n\t * Load wild monsters\n\t */\n\ttry {\n\t\tif(!map.getProperties().getProperty(\"wildProbabilty\").equalsIgnoreCase(\"\")) {\n\t\t\tm_wildProbability = Integer.parseInt(map.getProperties().getProperty(\"wildProbabilty\"));\n\t\t} else {\n\t\t\tm_wildProbability = 28;\n\t\t}\n\t} catch (Exception e) {\n\t\tm_wildProbability = 28;\n\t}\n\t\n\tString[] species;\n\tString[] levels;\n\t//Daytime monsters\n\ttry {\n\t\tif(!map.getProperties().getProperty(\"dayPokemonChances\").equalsIgnoreCase(\"\")) {\n\t\t\tspecies = map.getProperties().getProperty(\"dayPokemonChances\").split(\";\");\n\t\t\tlevels = map.getProperties().getProperty(\"dayPokemonLevels\").split(\";\");\n\t\t\tif (!species[0].equals(\"\") && !levels[0].equals(\"\") && species.length == levels.length) {\n\t\t\t\tm_dayMonsterChances = new HashMap<String, Integer>();\n\t\t\t\tm_dayMonsterLevels = new HashMap<String, int[]> ();\n\t\t\t\t\tfor (int i = 0; i < species.length; i++) {\n\t\t\t\t\t\tString[] speciesInfo = species[i].split(\",\");\n\t\t\t\t\t\tm_dayMonsterChances.put(speciesInfo[0], Integer.parseInt(speciesInfo[1]));\n\t\t\t\t\t\tString[] levelInfo = levels[i].split(\"-\");\n\t\t\t\t\t\tm_dayMonsterLevels.put(speciesInfo[0], new int[] {\n\t\t\t\t\t\t\t\tInteger.parseInt(levelInfo[0]),\n\t\t\t\t\t\t\t\tInteger.parseInt(levelInfo[1]) });\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tm_dayMonsterChances = null;\n\t\tm_dayMonsterLevels = null;\n\t\tspecies = new String[] { \"\" };\n\t\tlevels = new String[] { \"\" };\n\t}\n\t//Nocturnal Monsters\n\ttry {\n\t\tif(!map.getProperties().getProperty(\"nightMonsterChances\").equalsIgnoreCase(\"\")) {\n\t\t\tspecies = map.getProperties().getProperty(\"nightMonsterChances\").split(\";\");\n\t\t\tlevels = map.getProperties().getProperty(\"nightMonsterLevels\").split(\";\");\n\t\t\tif (!species[0].equals(\"\") && !levels[0].equals(\"\") && species.length == levels.length) {\n\t\t\t\tm_nightMonsterChances = new HashMap<String, Integer>();\n\t\t\t\tm_nightMonsterLevels = new HashMap<String, int[]> ();\n\t\t\t\t\tfor (int i = 0; i < species.length; i++) {\n\t\t\t\t\t\tString[] speciesInfo = species[i].split(\",\");\n\t\t\t\t\t\tm_nightMonsterChances.put(speciesInfo[0], Integer.parseInt(speciesInfo[1]));\n\t\t\t\t\t\tString[] levelInfo = levels[i].split(\"-\");\n\t\t\t\t\t\tm_nightMonsterLevels.put(speciesInfo[0], new int[] {\n\t\t\t\t\t\t\t\tInteger.parseInt(levelInfo[0]),\n\t\t\t\t\t\t\t\tInteger.parseInt(levelInfo[1]) });\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tm_nightMonsterChances = null;\n\t\tm_nightMonsterLevels = null;\n\t\tspecies = new String[] { \"\" };\n\t\tlevels = new String[] { \"\" };\n\t}\n\t//Surf Pokemon\n\ttry {\n\t\tif(!map.getProperties().getProperty(\"waterMonsterChances\").equalsIgnoreCase(\"\")) {\n\t\t\tspecies = map.getProperties().getProperty(\"waterMonsterChances\").split(\";\");\n\t\t\tlevels = map.getProperties().getProperty(\"waterMonsterLevels\").split(\";\");\n\t\t\tif (!species[0].equals(\"\") && !levels[0].equals(\"\") && species.length == levels.length) {\n\t\t\t\tm_waterMonsterChances = new HashMap<String, Integer>();\n\t\t\t\tm_waterMonsterLevels = new HashMap<String, int[]> ();\n\t\t\t\t\tfor (int i = 0; i < species.length; i++) {\n\t\t\t\t\t\tString[] speciesInfo = species[i].split(\",\");\n\t\t\t\t\t\tm_waterMonsterChances.put(speciesInfo[0], Integer.parseInt(speciesInfo[1]));\n\t\t\t\t\t\tString[] levelInfo = levels[i].split(\"-\");\n\t\t\t\t\t\tm_waterMonsterLevels.put(speciesInfo[0], new int[] {\n\t\t\t\t\t\t\t\tInteger.parseInt(levelInfo[0]),\n\t\t\t\t\t\t\t\tInteger.parseInt(levelInfo[1]) });\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tm_waterMonsterChances = null;\n\t\tm_waterMonsterLevels = null;\n\t\tspecies = new String[] { \"\" };\n\t\tlevels = new String[] { \"\" };\n\t}\n\t//Fish Pokemon\n\ttry {\n\t\tif(!map.getProperties().getProperty(\"fishMonsterChances\").equalsIgnoreCase(\"\")) {\n\t\t\tspecies = map.getProperties().getProperty(\"fishMonsterChances\").split(\";\");\n\t\t\tlevels = map.getProperties().getProperty(\"fishMonsterLevels\").split(\";\");\n\t\t\tif (!species[0].equals(\"\") && !levels[0].equals(\"\") && species.length == levels.length) {\n\t\t\t\tm_fishMonsterChances = new HashMap<String, Integer>();\n\t\t\t\tm_fishMonsterLevels = new HashMap<String, int[]> ();\n\t\t\t\t\tfor (int i = 0; i < species.length; i++) {\n\t\t\t\t\t\tString[] speciesInfo = species[i].split(\",\");\n\t\t\t\t\t\tm_fishMonsterChances.put(speciesInfo[0], Integer.parseInt(speciesInfo[1]));\n\t\t\t\t\t\tString[] levelInfo = levels[i].split(\"-\");\n\t\t\t\t\t\tm_fishMonsterLevels.put(speciesInfo[0], new int[] {\n\t\t\t\t\t\t\t\tInteger.parseInt(levelInfo[0]),\n\t\t\t\t\t\t\t\tInteger.parseInt(levelInfo[1]) });\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tm_fishMonsterChances = null;\n\t\tm_fishMonsterLevels = null;\n\t\tspecies = new String[] { \"\" };\n\t\tlevels = new String[] { \"\" };\n\t}\n}", "path": "src\\net\\k3rnel\\server\\backend\\map\\ServerMap.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Sends a packet to all players on the map\n * @param message\n */\n", "func_signal": "public void sendToAll(K3RNELMessage m)", "code": "{\n\tsynchronized(m_players) {\n\t\tCollection<PlayerChar> list = m_players.values();\n\t\tfor(PlayerChar p: list) {\n\t\t\tTcpProtocolHandler.writeMessage(p.getTcpSession(), m);\n\t\t}\n\t}\n}", "path": "src\\net\\k3rnel\\server\\backend\\map\\ServerMap.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Removes a char from this map\n * @param c\n */\n", "func_signal": "public void removeChar(Char c)", "code": "{\n\tif(c instanceof PlayerChar) {\n\t\tsynchronized(m_players) {\n\t\t\tm_players.remove(c.getName());\n\t\t}\n\t} else if(c instanceof NonPlayerChar) {\n\t\tm_npcs.remove((NonPlayerChar) c);\n\t\tm_npcs.trimToSize();\n\t}\n\tsynchronized(m_players) {\n\t\tfor(PlayerChar p : m_players.values()) {\n\t\t\tp.getTcpSession().write(\"mr\" + c.getId());\n\t\t}\n\t}\n}", "path": "src\\net\\k3rnel\\server\\backend\\map\\ServerMap.java", "repo_name": "K3RNELProject/KNMonsters-ServerEngine", "stars": 4, "license": "None", "language": "java", "size": 8444}
{"docstring": "/**\n * Execute a generic command, which includes parsing the options for the\n * command and running the specific task.\n *\n * @param tokens - command arguments\n * @throws Exception\n */\n", "func_signal": "public void execute(List<String> tokens) throws Exception", "code": "{\n    // Parse the options specified by \"-\"\n    parseOptions(tokens);\n\n    if (isPrintHelp) {\n        // Print the help file of the task\n        printHelp();\n    } else {\n        // Run the specified task\n        runTask(tokens);\n    }\n}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\console\\command\\AbstractCommand.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "// big endian\n", "func_signal": "public static int getInt(byte[] stream, int offset)", "code": "{\n\treturn (((stream[offset] & 0x000000FF) << 24) | ((stream[offset + 1] & 0x000000FF) << 16) |\n\t\t\t((stream[offset + 2] & 0x000000FF) << 8) | (stream[offset + 3] & 0x000000FF));\n}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\util\\MessageUtil.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "/**\n * Parses for specific command task.\n *\n * @param tokens - command arguments\n * @throws Exception\n */\n", "func_signal": "protected void runTask(List<String> tokens) throws Exception", "code": "{\n\n    // Process task token\n    if (tokens.size() > 0) {\n        Command command=null;\n        String taskToken = tokens.remove(0);\n        if (taskToken.equals(\"start\")) {\n            command = new StartCommand();\n        } else if (taskToken.equals(\"stop\")) {\n            command = new ShutdownCommand();\n        } else if (taskToken.equals(\"help\")) {\n            printHelp();\n        } else {\n            printHelp();\n        }\n\n        if( command!=null ) {\n            command.execute(tokens);\n        }\n    } else {\n        printHelp();\n    }\n\n}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\console\\Main.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "//getString\u02bd\u02b1\u0131\n", "func_signal": "public static CharsetDecoder toDecoder()", "code": "{\n\tCharset charset = Charset.forName(\"gb2312\");\n\t\treturn charset.newDecoder();\n\t}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\util\\MiscUtils.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "//\tbig endian\n", "func_signal": "public static void putShort(short src, byte[] dst, int offset)", "code": "{\n\tdst[offset] = (byte) ((src & 0xFF00) >>> 8);\n\tdst[offset + 1] = (byte) ((src & 0x00FF));\n}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\util\\MessageUtil.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "/**\n * Handle the general options for each command, which includes -h, -?,\n * --help, -D, --version.\n *\n * @param token - option token to handle\n * @param tokens - succeeding command arguments\n * @throws Exception\n */\n", "func_signal": "protected void handleOption(String token, List<String> tokens) throws Exception", "code": "{\n    isPrintHelp = false;\n    // If token is a help option\n    if (token.equals(\"-h\") || token.equals(\"-?\") || token.equals(\"--help\")) {\n        isPrintHelp = true;\n        tokens.clear();\n    } else if (token.startsWith(\"-D\")) {\n        // If token is a system property define option\n        String key = token.substring(2);\n        String value = \"\";\n        int pos = key.indexOf(\"=\");\n        if (pos >= 0) {\n            value = key.substring(pos + 1);\n            key = key.substring(0, pos);\n        }\n        System.setProperty(key, value);\n    } else {\n        // Token is unrecognized\n        OutputFormatter.printInfo(\"Unrecognized option: \" + token);\n        isPrintHelp = true;\n    }\n}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\console\\command\\AbstractCommand.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "/**\n * \u0573\u042d\u05b8\n * @param msg \u05b8\n * @param fmt \u0178\u02bd\n * @return \u05b8\u05ae\u05bd\u0431\n */\n", "func_signal": "public static List<byte[]> splitLongMsg(String msg, int fmt)", "code": "{\n\t\tint max_length = LONG_MAXLENGTH;\n\t\tif (fmt == MessageConst.MSGFMT_ASCII)\n\t\t\tmax_length = ASCII_MAXLENGTH;\n\t\t\n\t\tList<byte[]> result = new ArrayList<byte[]>();\n\t\t\n\t\tbyte[] gbMsg = null;\n\t\ttry {\n\t\t\tgbMsg = msg.getBytes(ENCODING);\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t}\n\t\t\n\t\tif (gbMsg.length > max_length) {\n\t\t\tbyte r = (byte) new Random().nextInt(256);\n\t\t\tbyte[] header = new byte[] {0x05, 0x00, 0x03, r, 0x00, 0x00};\n\t\t\t// \u05b8\u0133\n\t\t\tint splitLen = max_length-header.length;\n\t\t\t\n\t\t\tbyte[] ucs2Msg = null;\n\t\t\ttry {\n\t\t\t\tucs2Msg = msg.getBytes(UCS2_ENCODING);\n\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tint size = ucs2Msg.length/splitLen + (ucs2Msg.length%splitLen == 0 ? 0 : 1);\n\t\t\tfor (int i=0; i < size; i++) {\n\t\t\t\t// \u0225\u05bd\u06ba\u02a3\u05bd\n\t\t\t\tint remainLen = ucs2Msg.length - i*splitLen;\n\t\t\t\t// i+1\u03b5\u0133\n\t\t\t\tint len = header.length + (remainLen > splitLen ? splitLen : remainLen);\n\t\t\t\tbyte[] b = new byte[len];\n\t\t\t\t\n\t\t\t\theader[header.length-2] = (byte) size;\n\t\t\t\theader[header.length-1] = (byte) (i+1);\n\t\t\t\t\n\t\t\t\tSystem.arraycopy(header, 0, b, 0, header.length);\n\t\t\t\tSystem.arraycopy(ucs2Msg, i*splitLen, b, header.length, b.length-header.length);\n\t\t\t\tresult.add(b);\n\t\t\t}\n\t\t} else {\n\t\t\tresult.add(gbMsg);\n\t\t}\n\t\t\n\t\treturn result;\n\t}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\util\\LongMessageUtil.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "//\tbig endian\n", "func_signal": "public static void putInt(int src, byte[] dst, int offset)", "code": "{\n\tdst[offset] = (byte) ((src & 0xFF000000) >>> 24);\n\tdst[offset + 1] = (byte) ((src & 0x00FF0000) >>> 16);\n\tdst[offset + 2] = (byte) ((src & 0x0000FF00) >>> 8);\n\tdst[offset + 3] = (byte) ((src & 0x000000FF));\n}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\util\\MessageUtil.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "/**\n * \u02340\n * @param wait \u0234\u02b1\u48ec\u03bb\n * @return {@code true} if the count reached zero and {@code false}\n *         if the waiting time elapsed before the count reached zero\n * @throws InterruptedException if the current thread is interrupted\n *         while waiting\n */\n", "func_signal": "public synchronized boolean await(long wait) throws InterruptedException", "code": "{\n    boolean timeout = false;\n    long remaining = wait;\n    long start = System.currentTimeMillis();        \n\n    while (count > 0 && !timeout) {\n        wait(remaining);\n        long elapsed = System.currentTimeMillis() - start;\n        remaining = wait - elapsed;\n        timeout = remaining <= 0;\n    }\n\n    return !timeout;\n}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\util\\Counter.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "/**\n * @see java.lang.Object#hashCode()\n */\n", "func_signal": "public int hashCode()", "code": "{\n\treturn new HashCodeBuilder(-2038111737, 1780350343).appendSuper(\n\t\t\tsuper.hashCode()).append(this.serviceCode)\n\t\t\t.append(this.provider.getId())\n\t\t\t.toHashCode();\n}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\domain\\Service.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "/**\n * Handle the --all option.\n *\n * @param token - option token to handle\n * @param tokens - succeeding command arguments\n * @throws Exception\n */\n", "func_signal": "protected void handleOption(String token, List<String> tokens) throws Exception", "code": "{\n    // Try to handle the options first\n    if (token.equals(\"--all\")) {\n        isStopAllClients = true;\n    } else {\n        // Let the super class handle the option\n        super.handleOption(token, tokens);\n    }\n}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\console\\command\\ShutdownCommand.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "// little endian\n", "func_signal": "public static int getIntLittle(byte[] stream, int offset)", "code": "{\n\treturn (((stream[offset + 3] & 0x000000FF) << 24) | ((stream[offset + 2] & 0x000000FF) << 16) |\n\t\t\t((stream[offset + 1] & 0x000000FF) << 8) | (stream[offset] & 0x000000FF));\n}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\util\\MessageUtil.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "//Object \u05ea\u03aabyte[]\n", "func_signal": "public static byte[] ObjectToByteArray(Object s) throws IOException", "code": "{\n\tByteArrayOutputStream byteStream = new ByteArrayOutputStream(20000000);\n\t\tObjectOutputStream os = new ObjectOutputStream (new BufferedOutputStream(byteStream));\n\t\tos.writeObject(s);\n\t\tos.flush();\n\t\tbyte[] buf  = byteStream.toByteArray();\n\t\tos.close();\n\t\treturn buf;\n\t}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\util\\MiscUtils.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "/**\n * @see java.lang.Object#toString()\n */\n", "func_signal": "public String toString()", "code": "{\n\treturn new ToStringBuilder(this).append(\"provider\", this.provider)\n\t\t\t.append(\"feeCode\", this.feeCode)\n\t\t\t.append(\"feeType\", this.feeType).append(\"serviceCode\",\n\t\t\t\t\tthis.serviceCode).append(\"id\", this.id).toString();\n}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\domain\\Service.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "/**\n * @see java.lang.Object#equals(Object)\n */\n", "func_signal": "public boolean equals(Object object)", "code": "{\n\tif (!(object instanceof Service)) {\n\t\treturn false;\n\t}\n\tService rhs = (Service) object;\n\treturn new EqualsBuilder().appendSuper(super.equals(object))\n\t\t\t.append(this.serviceCode, rhs.serviceCode)\n\t\t\t.append(this.provider.getId(), rhs.provider.getId()).isEquals();\n}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\domain\\Service.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "// little endian\n", "func_signal": "public static void putShortLittle(short src, byte[] dst, int offset)", "code": "{\n\tdst[offset] = (byte) ((src & 0x00FF));\n\tdst[offset + 1] = (byte) ((src & 0xFF00) >>> 8);\n}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\util\\MessageUtil.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "// \u05ba\u0136\u01f0(1/5)\u0cbb\u07339\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n       String orig = \"GB2312 \u01fa\u05b7\u0371\u0134\u0163\u022b\u03aa\u03e2\u00fa\u05b1\u05b7\u043b\ud9a7\udcba\u0379\" +\n               \"\u04b1\u05fc\u073e\u05b7\u04bb\u0170\u04bb\u04bb\u02b5\u02a9GB \u01e1\ua871 \u05b5\u013a\u01b4\u0434GB2312 \u05b7 (character set) \u05bb\u00bc\u05ba\u05a3\u053c\u04bb\u3ce3\u0138\u0377\u0163\u04aa\u0368\u0439\u00bd\u00bc\u00b5\u0235\u0621\";\n       List<byte[]> lst = splitSimpleMsg(orig, MessageConst.MSGFMT_GB);\n\n       for (byte[] b : lst) {\n           System.out.println((new String(b, \"GB2312\")) + \", bytes: \" + b.length);\n       }\n   }", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\util\\LongMessageUtil.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "// \u05bd\u05ea\u03aa16\u01b5\u05b7\u06b5\n", "func_signal": "public static final String bytesToHexString(byte[] bArray)", "code": "{\n\tStringBuffer sb = new StringBuffer(bArray.length);\n\tString sTemp;\n\tfor (int i = 0; i < bArray.length; i++) {\n\t\tsTemp = Integer.toHexString(0xFF & bArray[i]);\n\t\tif (sTemp.length() < 2)\n\t\t\tsb.append(0);\n\t\tsb.append(sTemp.toUpperCase());\n\t\t}\n\treturn sb.toString();\n}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\util\\MiscUtils.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "//\tlittle endian\n", "func_signal": "public static void putIntLittle(int src, byte[] dst, int offset)", "code": "{\n\tdst[offset + 3] = (byte) ((src & 0xFF000000) >>> 24);\n\tdst[offset + 2] = (byte) ((src & 0x00FF0000) >>> 16);\n\tdst[offset + 1] = (byte) ((src & 0x0000FF00) >>> 8);\n\tdst[offset] = (byte) ((src & 0x000000FF));\n}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\util\\MessageUtil.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "/**\n * Parse any option parameters in the command arguments specified by a '-'\n * as the first character of the token.\n *\n * @param tokens - command arguments\n * @throws Exception\n */\n", "func_signal": "protected void parseOptions(List<String> tokens) throws Exception", "code": "{\n    while (!tokens.isEmpty()) {\n        String token = tokens.remove(0);\n        if (token.startsWith(\"-\")) {\n            // Token is an option\n            handleOption(token, tokens);\n        } else {\n            // Push back to list of tokens\n            tokens.add(0, token);\n            return;\n        }\n    }\n}", "path": "src\\main\\java\\com\\enorbus\\sms\\gw\\cmpp\\console\\command\\AbstractCommand.java", "repo_name": "huzorro/cmppgw", "stars": 4, "license": "None", "language": "java", "size": 663}
{"docstring": "/**\n\t * Translates from a byte to its corresponding\n\t * message type value.\n\t * @param type The enumerated type representation of the type of message.\n\t * @return The byte representation of the type of message.\n\t */\n", "func_signal": "public static byte getMessageType(MessageType type)", "code": "{\n\t\tbyte message;\n\n\t\tswitch (type) {\n\t\t\tcase PlayerMotion:\n\t\t\t\tmessage = PLAYER_MOTION;\n\t\t\t\tbreak;\n\t\t\tcase MapChange:\n\t\t\t\tmessage = MAP_CHANGE;\n\t\t\t\tbreak;\n\t\t\tcase ScoreUpdate:\n\t\t\t\tmessage = SCORE_UPDATE;\n\t\t\t\tbreak;\n\t\t\tcase HealthUpdate:\n\t\t\t\tmessage = HEALTH_UPDATE;\n\t\t\t\tbreak;\n\t\t\tcase Chat:\n\t\t\t\tmessage = CHAT_MESSAGE;\n\t\t\t\tbreak;\n\t\t\tcase Death:\n\t\t\t\tmessage = DEATH_MESSAGE;\n\t\t\t\tbreak;\n        case Login:\n            message = LOGIN_MESSAGE;\n            break;\n        case PlayerJoin:\n            message = PLAYER_JOIN;\n            break;\n        case PlayerLeave:\n            message = PLAYER_LEAVE;\n            break;\n        case MulticastGroup:\n            message = MULTI_MESSAGE;\n            break;\n        case Projectile:\n            message = PJTILE_MESSAGE;\n            break;\n\t\t\tdefault:\n\t\t\t\tmessage = UNDEFINED;\n\t\t}\n\t\treturn message;\n}", "path": "common\\messages\\MessageAnalyzer.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/**\n * Retrieves a message given its header and the data portion of the message.\n * @return The message that the byte array represeneted.\n */\n", "func_signal": "public static Message getMessage(ByteBuffer buffer) throws Exception", "code": "{\n    // Store the header information\n    byte[] byteHeader = new byte[Header.HEADER_MAX];\n    buffer.get(byteHeader,INIT,Header.HEADER_MAX);\n   \n    // Store the data information\n    int dataLength = buffer.array().length - Header.HEADER_MAX;\n    byte[] byteData = new byte[dataLength];\n    buffer.get(byteData,INIT,dataLength);       \n\n    // Construct the header\n    Message receivedMessage = null;\n\t\t\n    switch (getMessageType(byteHeader[MESSAGE_TYPE])) {\n\t\t\tcase PlayerMotion:\n            receivedMessage = new PlayerMotionMessage(byteHeader,byteData);\n\t\t\t\tbreak;\n\t\t\tcase MapChange:\n\t\t\t\tbreak;\n\t\t\tcase ScoreUpdate:\n            receivedMessage = new ScoreUpdateMessage(byteHeader,byteData);\n\t\t\t\tbreak;\n\t\t\tcase HealthUpdate:\n            receivedMessage = new HealthUpdateMessage(byteHeader,byteData);\n\t\t\t\tbreak;\n\t\t\tcase Chat:\n            receivedMessage = new ChatMessage(byteHeader,byteData);\n\t\t\t\tbreak;\n\t\t\tcase Death:\n            receivedMessage = new DeathMessage(byteHeader,byteData);\n\t\t\t\tbreak;\n        case Login:\n            receivedMessage = new LoginMessage(byteHeader,byteData);\n            break;\n        case PlayerJoin:\n            receivedMessage = new PlayerJoinMessage(byteHeader,byteData);\n            break;\n        case PlayerLeave:\n            receivedMessage = new PlayerLeaveMessage(byteHeader,byteData);\n            break;\n        case MulticastGroup:\n            receivedMessage = new MulticastGroupMessage(byteHeader,byteData);\n            break;\n        case Projectile:\n            receivedMessage = new ProjectileMessage(byteHeader,byteData);\n            break;\n        default:\n        \tSystem.out.println(\"Unknown packet.\");\n\t\t}\n\t\treturn receivedMessage;\n}", "path": "common\\messages\\MessageAnalyzer.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n        // Map map = new Map();\n        //Map map = new Map(\"widefield\", );\n        Map map = new Map(\"widefield\", \"10 10\\n\"+\n                \"++++++++++\\n\" +\n                \"+        +\\n\" +\n                \"+        +\\n\" +\n                \"+        +\\n\" +\n                \"+        +\\n\" +\n                \"+        +\\n\" +\n                \"+        +\\n\" +\n                \"+        +\\n\" +\n                \"+        +\\n\" +\n                \"++++++++++\\n\");\n        //System.out.println(map.getName());\n        //System.out.println(map.getData());\n        //System.out.println(map.getXSize() + \" x \" + map.getYSize());\n        map.dumpVars();\n        //System.out.println(map.isWall(1, 1));\n        //System.out.println(map.isWall(9, 9));\n        map.dumpSpawnPoints();\n}", "path": "kevin\\MapTest.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/**\n * Retrieves a message given its header and the data portion of the message.\n * @return The message that the byte array represeneted.\n */\n", "func_signal": "public static Message getMessage(byte[] message) throws Exception", "code": "{\n    ByteBuffer buffer = ByteBuffer.wrap(message);\n    return getMessage(buffer);\n}", "path": "common\\messages\\MessageAnalyzer.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "// Called when the mouse is moved with at least one button down\n", "func_signal": "public void mouseDragged(MouseEvent e)", "code": "{\n\tint width = getWidth(), height = getHeight(), x = e.getX(), y = e.getY();\n\tfor (Widget w : widgetList)\n\t{\n\t\tif (!(w instanceof InteractiveWidget)) continue;\n\t\tInteractiveWidget iw = (InteractiveWidget) w;\n\t\tif (iw.containsFixed(x, y, width, height))\n\t\t{\n\t\t\tif (iw.getState() == InteractiveWidget.STATE_UNHOVERED)\n\t\t\t{\n\t\t\t\tiw.setState(InteractiveWidget.STATE_HOVERED);\n\t\t\t\trepaint(iw.getFixedBounds(width, height));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (iw.getState() == InteractiveWidget.STATE_HOVERED)\n\t\t\t{\n\t\t\t\tiw.setState(InteractiveWidget.STATE_UNHOVERED);\n\t\t\t\trepaint(iw.getFixedBounds(width, height));\n\t\t\t}\n\t\t}\n\t} // end for (w in widgetList)\n}", "path": "client\\ClientViewArea.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/**\n * Start or restart the server.\n */\n", "func_signal": "public void Start() throws SocketException", "code": "{\n    Stop();\n    for (int i = 0; i < fListeners.size(); i++)\n    {\n        ((UDPListener) fListeners.get(i)).Start();\n    }\n}", "path": "Extasys\\Network\\UDP\\Server\\ExtasysUDPServer.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/**\n * Translates from a byte to its corresponding\n * message type value.\n * @param type The byte representation of the type of message.\n * @return The enumerated type representation of the type of message.\n */\n", "func_signal": "public static MessageType getMessageType(byte type)", "code": "{\n\tMessageType message;\n\tswitch (type) {\n\t\tcase PLAYER_MOTION:\n\t\t\tmessage = MessageType.PlayerMotion;\n\t\t\tbreak;\n\t\tcase MAP_CHANGE:\n\t\t\tmessage = MessageType.MapChange;\n\t\t\tbreak;\n\t\tcase SCORE_UPDATE:\n\t\t\tmessage = MessageType.ScoreUpdate;\n\t\t\tbreak;\n\t\tcase HEALTH_UPDATE:\n\t\t\tmessage = MessageType.HealthUpdate;\n\t\t\tbreak;\n\t\tcase CHAT_MESSAGE:\n\t\t\tmessage = MessageType.Chat;\n\t\t\tbreak;\n\t\tcase DEATH_MESSAGE:\n\t\t\tmessage = MessageType.Death;\n\t\t\tbreak;\n            case LOGIN_MESSAGE:\n                message = MessageType.Login;\n                break;\n            case PLAYER_JOIN:\n                message = MessageType.PlayerJoin;\n                break;\n            case PLAYER_LEAVE:\n                message = MessageType.PlayerLeave;\n                break;\n            case MULTI_MESSAGE:\n                message = MessageType.MulticastGroup;\n                break;\n            case PJTILE_MESSAGE:\n                message = MessageType.Projectile;\n                break;\n\t\tdefault:\n\t\t\tmessage = MessageType.Undefined;\n\t}\n\treturn message;\n}", "path": "common\\messages\\MessageAnalyzer.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/**\n * Dispose the server.\n * This method stops the server and disposes all the active members of this \n * class. After calling this method you cannot re-start the server.\n */\n", "func_signal": "public void Dispose()", "code": "{\n    Stop();\n    fMyThreadPool.shutdown();\n}", "path": "Extasys\\Network\\UDP\\Server\\ExtasysUDPServer.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/**\n * Constructs a new Extasys UDP Server.\n * @param name is the name of the server.\n * @param description is the description of the server.\n * @param corePoolSize is the number of threads to keep in the pool, even if they are idle.\n * @param maximumPoolSize is the maximum number of threads to allow in the pool.\n */\n", "func_signal": "public ExtasysUDPServer(String name, String description, int corePoolSize, int maximumPoolSize)", "code": "{\n    fName = name;\n    fDescription = description;\n    fMyThreadPool = new ThreadPoolExecutor(corePoolSize, maximumPoolSize, 2, TimeUnit.SECONDS, fThreadPoolQueue);\n}", "path": "Extasys\\Network\\UDP\\Server\\ExtasysUDPServer.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/**\n     * Constructor - Creates a new message.\n     * @param type The type of message\n     */\n", "func_signal": "protected Message(MessageType type, byte playerId, int dataLength,\n              boolean isAck)", "code": "{\nheader = new Header(type,DefaultGameId,playerId,isAck);\nthis.dataLength = dataLength;\n    }", "path": "common\\messages\\Message.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/**\n * Constructor - Creates a new message.\n * @param type The type of message\n */\n", "func_signal": "protected Message(byte[] header, int dataLength)", "code": "{\n    this.header = new Header(header);\n    this.dataLength = dataLength;\n}", "path": "common\\messages\\Message.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/**\n * Stops and removes a UDP listener from this server.\n * @param name is the name of the UDP listener.\n */\n", "func_signal": "public void RemoveListener(String name)", "code": "{\n    for (int i = 0; i < fListeners.size(); i++)\n    {\n        if (((UDPListener) fListeners.get(i)).getName().equals(name))\n        {\n            ((UDPListener) fListeners.get(i)).Stop();\n            fListeners.remove(i);\n            break;\n        }\n    }\n}", "path": "Extasys\\Network\\UDP\\Server\\ExtasysUDPServer.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/**\n * Stop the server.\n */\n", "func_signal": "public void Stop()", "code": "{\n    for (int i = 0; i < fListeners.size(); i++)\n    {\n        ((UDPListener) fListeners.get(i)).Stop();\n    }\n}", "path": "Extasys\\Network\\UDP\\Server\\ExtasysUDPServer.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/**\n * Returns the total bytes received from this server.\n * @return the total bytes received from this server.\n */\n", "func_signal": "public int getBytesIn()", "code": "{\n    int bytesIn = 0;\n    try\n    {\n        for (int i = 0; i < fListeners.size(); i++)\n        {\n            try\n            {\n                bytesIn += ((UDPListener) fListeners.get(i)).getBytesIn();\n            }\n            catch (Exception ex)\n            {\n            }\n        }\n    }\n    catch (Exception ex)\n    {\n    }\n    return bytesIn;\n}", "path": "Extasys\\Network\\UDP\\Server\\ExtasysUDPServer.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "// Called when the mouse button is released\n", "func_signal": "public void mouseReleased(MouseEvent e)", "code": "{\n\tif (e.getButton() != MouseEvent.BUTTON1) return;\n\t\n\tfor (Widget w : widgetList)\n\t{\n\t\tif (!(w instanceof InteractiveWidget)) continue;\n\t\tInteractiveWidget iw = (InteractiveWidget) w;\n\t\tif (iw.getState() == InteractiveWidget.STATE_HOVERED) iw.trigger(e.getButton());\n\t\tiw.setState(InteractiveWidget.STATE_READY);\n\t}\n}", "path": "client\\ClientViewArea.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/**\n * Returns the total bytes send from this server.\n * @return the total bytes send from this server.\n */\n", "func_signal": "public int getBytesOut()", "code": "{\n    int bytesOut = 0;\n    try\n    {\n        for (int i = 0; i < fListeners.size(); i++)\n        {\n            try\n            {\n                bytesOut += ((UDPListener) fListeners.get(i)).getBytesOut();\n            }\n            catch (Exception ex)\n            {\n            }\n        }\n    }\n    catch (Exception ex)\n    {\n    }\n    return bytesOut;\n}", "path": "Extasys\\Network\\UDP\\Server\\ExtasysUDPServer.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/*\n * Allow the logger level to be set as a command-line paramater.\n * The default logger level is CONFIG by default.\n */\n", "func_signal": "public static void initialiseLogger(String[] args)", "code": "{\n\t// Server application logging\n  logger = Logger.getLogger(SERVER_LOGGER_NAME);\n\n  // Get the log level from the command-line if one is supplied\n  if (args.length > 0) {\n    /*\n     * Logger levels:\n       * SEVERE (highest value)\n       * WARNING\n       * INFO\n       * CONFIG\n       * FINE\n       * FINER\n       * FINEST (lowest value)\n     */\n\n    String level = args[0].trim().toUpperCase();\n\n    if (level.equals(\"SEVERE\")) {\n      logger.setLevel(Level.SEVERE);\n    }\n    else if (level.equals(\"WARNING\")) {\n      logger.setLevel(Level.WARNING);\n    }\n    else if (level.equals(\"INFO\")) {\n      logger.setLevel(Level.INFO);\n    }\n    else if (level.equals(\"CONFIG\")) {\n      logger.setLevel(Level.CONFIG);\n    }\n    else if (level.equals(\"FINE\")) {\n      logger.setLevel(Level.FINE);\n    }\n    else if (level.equals(\"FINER\")) {\n      logger.setLevel(Level.FINER);\n    }\n    else if (level.equals(\"FINEST\")) {\n      logger.setLevel(Level.FINEST);\n    }\n  }\n  else {\n    // Set the default log level if it is not specified\n    logger.setLevel(Level.CONFIG);\n  }\n\n  try {\n    logger.addHandler(new FileHandler(SERVER_LOG_PATH));\n  }\n  catch (IOException e) {\n    e.printStackTrace();\n\t}\n}", "path": "server\\SphereorityServer.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/**\n * Add a new listener to this server.\n * @param name is the listener's name.\n * @param ipAddress is the listener's IP address.\n * @param port is the listener's udp port.\n * @param readBufferSize is the maximum size of bytes the listener can use to read incoming bytes at a time.\n * @param readDataTimeOut is the maximum time in milliseconds a client can use to send data to the listener.\n * @return the listener.\n */\n", "func_signal": "public UDPListener AddListener(String name, InetAddress ipAddress, int port, int readBufferSize, int readDataTimeOut)", "code": "{\n    UDPListener listener = new UDPListener(this, name, ipAddress, port, readBufferSize, readDataTimeOut);\n    fListeners.add(listener);\n    return listener;\n}", "path": "Extasys\\Network\\UDP\\Server\\ExtasysUDPServer.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "// end mouseDragged()\n", "func_signal": "public void mouseMoved(MouseEvent e)", "code": "{\n\t\tint width = getWidth(), height = getHeight(), x = e.getX(), y = e.getY();\n\t\tfor (Widget w : widgetList)\n\t\t{\n\t\t\tif (!(w instanceof InteractiveWidget)) continue;\n\t\t\tInteractiveWidget iw = (InteractiveWidget) w;\n\t\t\tif (iw.containsFixed(x, y, width, height))\n\t\t\t{\n\t\t\t\tif (iw.getState() != InteractiveWidget.STATE_HOVERED)\n\t\t\t\t{\n\t\t\t\t\tiw.setState(InteractiveWidget.STATE_HOVERED);\n\t\t\t\t\trepaint(iw.getFixedBounds(width, height));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (iw.getState() != InteractiveWidget.STATE_READY)\n\t\t\t\t{\n\t\t\t\t\tiw.setState(InteractiveWidget.STATE_READY);\n\t\t\t\t\trepaint(iw.getFixedBounds(width, height));\n\t\t\t\t}\n\t\t\t}\n\t\t} // end for (Widget)\n\t}", "path": "client\\ClientViewArea.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/**\n * Send data.\n * This method sends the data from all listeners.\n * @param packet is the DatagramPacket to send.\n */\n", "func_signal": "public void SendData(DatagramPacket packet)", "code": "{\n    for (int i = 0; i < fListeners.size(); i++)\n    {\n        ((UDPListener) fListeners.get(i)).SendData(packet);\n    }\n}", "path": "Extasys\\Network\\UDP\\Server\\ExtasysUDPServer.java", "repo_name": "sphereority/sphereority", "stars": 6, "license": "mit", "language": "java", "size": 1307}
{"docstring": "/**\n * Return the next entity. These entities are translated to Characters:\n *     <code>&amp;  &apos;  &gt;  &lt;  &quot;</code>.\n * @param a An ampersand character.\n * @return  A Character or an entity String if the entity is not recognized.\n * @throws JSONException If missing ';' in XML entity.\n */\n", "func_signal": "public Object nextEntity(char a) throws JSONException", "code": "{\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        char c = next();\n        if (Character.isLetterOrDigit(c) || c == '#') {\n            sb.append(Character.toLowerCase(c));\n        } else if (c == ';') {\n            break;\n        } else {\n            throw syntaxError(\"Missing ';' in XML entity: &\" + sb);\n        }\n    }\n    String s = sb.toString();\n    Object e = entity.get(s);\n    return e != null ? e : a + s + \";\";\n}", "path": "Json\\src\\org\\com\\json\\XMLTokener.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/** Creates new form OperatorConsole */\n", "func_signal": "public OperatorConsole()", "code": "{\n    initComponents();\n    setLocationRelativeTo(null);\n    LoadPendingTickets();   \n\n}", "path": "App\\QuestionBox\\src\\questionbox\\OperatorConsole.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n * Back up one character. This provides a sort of lookahead capability,\n * so that you can test for a digit or letter before attempting to parse\n * the next number or identifier.\n */\n", "func_signal": "public void back() throws JSONException", "code": "{\n    if (useLastChar || index <= 0) {\n        throw new JSONException(\"Stepping back two steps is not supported\");\n    }\n    index -= 1;\n    useLastChar = true;\n}", "path": "Json\\src\\org\\com\\json\\JSONTokener.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n * Returns the next XML meta token. This is used for skipping over <!...>\n * and <?...?> structures.\n * @return Syntax characters (<code>< > / = ! ?</code>) are returned as\n *  Character, and strings and names are returned as Boolean. We don't care\n *  what the values actually are.\n * @throws JSONException If a string is not properly closed or if the XML\n *  is badly structured.\n */\n", "func_signal": "public Object nextMeta() throws JSONException", "code": "{\n    char c;\n    char q;\n    do {\n        c = next();\n    } while (Character.isWhitespace(c));\n    switch (c) {\n    case 0:\n        throw syntaxError(\"Misshaped meta tag\");\n    case '<':\n        return XML.LT;\n    case '>':\n        return XML.GT;\n    case '/':\n        return XML.SLASH;\n    case '=':\n        return XML.EQ;\n    case '!':\n        return XML.BANG;\n    case '?':\n        return XML.QUEST;\n    case '\"':\n    case '\\'':\n        q = c;\n        for (;;) {\n            c = next();\n            if (c == 0) {\n                throw syntaxError(\"Unterminated string\");\n            }\n            if (c == q) {\n                return Boolean.TRUE;\n            }\n        }\n    default:\n        for (;;) {\n            c = next();\n            if (Character.isWhitespace(c)) {\n                return Boolean.TRUE;\n            }\n            switch (c) {\n            case 0:\n            case '<':\n            case '>':\n            case '/':\n            case '=':\n            case '!':\n            case '?':\n            case '\"':\n            case '\\'':\n                back();\n                return Boolean.TRUE;\n            }\n        }\n    }\n}", "path": "Json\\src\\org\\com\\json\\XMLTokener.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n * Get the next XML outer token, trimming whitespace. There are two kinds\n * of tokens: the '<' character which begins a markup tag, and the content\n * text between markup tags.\n *\n * @return  A string, or a '<' Character, or null if there is no more\n * source text.\n * @throws JSONException\n */\n", "func_signal": "public Object nextContent() throws JSONException", "code": "{\n    char         c;\n    StringBuffer sb;\n    do {\n        c = next();\n    } while (Character.isWhitespace(c));\n    if (c == 0) {\n        return null;\n    }\n    if (c == '<') {\n        return XML.LT;\n    }\n    sb = new StringBuffer();\n    for (;;) {\n        if (c == '<' || c == 0) {\n            back();\n            return sb.toString().trim();\n        }\n        if (c == '&') {\n            sb.append(nextEntity(c));\n        } else {\n            sb.append(c);\n        }\n        c = next();\n    }\n}", "path": "Json\\src\\org\\com\\json\\XMLTokener.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n * This function aids loading of pending tickets from an array of tickets.\n */\n", "func_signal": "public void LoadPendingTickets()", "code": "{\n     try{\n\n    header = new Vector();\n    header.add(\"TicketID\");\n    header.add(\"StartTime\");\n    header.add(\"Query\");\n    header.add(\"Answer\");\n    header.add(\"Caller\");\n    header.add(\"Status\");\n\n    dataRows = new Vector<Vector<String>>(); // Vector of rows\n    \n     \n     ArrayList<Ticket> tickets  = Ticket.getPendingTickets(StaticMain.loggedinuser.getUserid());\n\n      for( Ticket ticket : tickets)\n       {\n          Vector<String> cells = new Vector<String>();\n          cells.add(Long.toString(ticket.getTicketid()));\n          cells.add(ticket.getStartTime().toString());\n          cells.add(Query.getQuery(ticket.getQueryid()).getDetails());\n          cells.add(Answer.getAnswer(ticket.getAnserid()).getDetails());\n          User user = User.getUser(ticket.getCallerid());\n          cells.add(user.getFname()+ \"  \" + user.getLname());\n          cells.add(Status.getStatus(ticket.getStatusid()).getDescr());\n          dataRows.add(cells);\n\n       }\n\n       tbPendingTickets.setModel(new javax.swing.table.DefaultTableModel( dataRows,header));\n     //  tbPendingTickets.setDefaultRenderer(Object.class, new MultiLineCellRenderer());\n\n\n    } catch (Exception e) {\n\n        System.out.println(e.getMessage());\n        JOptionPane.showMessageDialog(this, \"Loading pending users failed!\\n\", \"Error\", JOptionPane.ERROR_MESSAGE);\n    }\n}", "path": "App\\QuestionBox\\src\\questionbox\\OperatorConsole.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n * Get the text up but not including the specified character or the\n * end of line, whichever comes first.\n * @param  d A delimiter character.\n * @return   A string.\n */\n", "func_signal": "public String nextTo(char d) throws JSONException", "code": "{\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        char c = next();\n        if (c == d || c == 0 || c == '\\n' || c == '\\r') {\n            if (c != 0) {\n                back();\n            }\n            return sb.toString().trim();\n        }\n        sb.append(c);\n    }\n}", "path": "Json\\src\\org\\com\\json\\JSONTokener.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n * Return the characters up to the next close quote character.\n * Backslash processing is done. The formal JSON format does not\n * allow strings in single quotes, but an implementation is allowed to\n * accept them.\n * @param quote The quoting character, either\n *      <code>\"</code>&nbsp;<small>(double quote)</small> or\n *      <code>'</code>&nbsp;<small>(single quote)</small>.\n * @return      A String.\n * @throws JSONException Unterminated string.\n */\n", "func_signal": "public String nextString(char quote) throws JSONException", "code": "{\n    char c;\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        c = next();\n        switch (c) {\n        case 0:\n        case '\\n':\n        case '\\r':\n            throw syntaxError(\"Unterminated string\");\n        case '\\\\':\n            c = next();\n            switch (c) {\n            case 'b':\n                sb.append('\\b');\n                break;\n            case 't':\n                sb.append('\\t');\n                break;\n            case 'n':\n                sb.append('\\n');\n                break;\n            case 'f':\n                sb.append('\\f');\n                break;\n            case 'r':\n                sb.append('\\r');\n                break;\n            case 'u':\n                sb.append((char)Integer.parseInt(next(4), 16));\n                break;\n            case 'x' :\n                sb.append((char) Integer.parseInt(next(2), 16));\n                break;\n            default:\n                sb.append(c);\n            }\n            break;\n        default:\n            if (c == quote) {\n                return sb.toString();\n            }\n            sb.append(c);\n        }\n    }\n}", "path": "Json\\src\\org\\com\\json\\JSONTokener.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n * Consume the next character, and check that it matches a specified\n * character.\n * @param c The character to match.\n * @return The character.\n * @throws JSONException if the character does not match.\n */\n", "func_signal": "public char next(char c) throws JSONException", "code": "{\n    char n = next();\n    if (n != c) {\n        throw syntaxError(\"Expected '\" + c + \"' and instead saw '\" +\n                n + \"'\");\n    }\n    return n;\n}", "path": "Json\\src\\org\\com\\json\\JSONTokener.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n * Determine if the source string still contains characters that next()\n * can consume.\n * @return true if not yet at the end of the source.\n */\n", "func_signal": "public boolean more() throws JSONException", "code": "{\n    char nextChar = next();\n    if (nextChar == 0) {\n        return false;\n    } \n    back();\n    return true;\n}", "path": "Json\\src\\org\\com\\json\\JSONTokener.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n * Get the next value. The value can be a Boolean, Double, Integer,\n * JSONArray, JSONObject, Long, or String, or the JSONObject.NULL object.\n * @throws JSONException If syntax error.\n *\n * @return An object.\n */\n", "func_signal": "public Object nextValue() throws JSONException", "code": "{\n    char c = nextClean();\n    String s;\n\n    switch (c) {\n        case '\"':\n        case '\\'':\n            return nextString(c);\n        case '{':\n            back();\n            return new JSONObject(this);\n        case '[':\n        case '(':\n            back();\n            return new JSONArray(this);\n    }\n\n    /*\n     * Handle unquoted text. This could be the values true, false, or\n     * null, or it can be a number. An implementation (such as this one)\n     * is allowed to also accept non-standard forms.\n     *\n     * Accumulate characters until we reach the end of the text or a\n     * formatting character.\n     */\n\n    StringBuffer sb = new StringBuffer();\n    while (c >= ' ' && \",:]}/\\\\\\\"[{;=#\".indexOf(c) < 0) {\n        sb.append(c);\n        c = next();\n    }\n    back();\n\n    s = sb.toString().trim();\n    if (s.equals(\"\")) {\n        throw syntaxError(\"Missing value\");\n    }\n    return JSONObject.stringToValue(s);\n}\n\n\n/**\n * Skip characters until the next character is the requested character.\n * If the requested character is not found, no characters are skipped.\n * @param to A character to skip to.\n * @return The requested character, or zero if the requested character\n * is not found.\n */\npublic char skipTo(char to) throws JSONException {\n    char c;\n    try {\n        int startIndex = this.index;\n        reader.mark(Integer.MAX_VALUE);\n        do {\n            c = next();\n            if (c == 0) {\n                reader.reset();\n                this.index = startIndex;\n                return c;\n            }\n        } while (c != to);\n    } catch (IOException exc) {\n        throw new JSONException(exc);\n    }\n\n    back();\n    return c;\n}\n\n/**\n * Make a JSONException to signal a syntax error.\n *\n * @param message The error message.\n * @return  A JSONException object, suitable for throwing\n */\npublic JSONException syntaxError(String message) {\n    return new JSONException(message + toString());\n}\n\n\n/**\n * Make a printable string of this JSONTokener.\n *\n * @return \" at character [this.index]\"\n */\npublic String toString() {\n    return \" at character \" + index;\n}\n}", "path": "Json\\src\\org\\com\\json\\JSONTokener.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n * Get the text in the CDATA block.\n * @return The string up to the <code>]]&gt;</code>.\n * @throws JSONException If the <code>]]&gt;</code> is not found.\n */\n", "func_signal": "public String nextCDATA() throws JSONException", "code": "{\n    char         c;\n    int          i;\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        c = next();\n        if (c == 0) {\n            throw syntaxError(\"Unclosed CDATA\");\n        }\n        sb.append(c);\n        i = sb.length() - 3;\n        if (i >= 0 && sb.charAt(i) == ']' &&\n                      sb.charAt(i + 1) == ']' && sb.charAt(i + 2) == '>') {\n            sb.setLength(i);\n            return sb.toString();\n        }\n    }\n}", "path": "Json\\src\\org\\com\\json\\XMLTokener.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n * Get the text up but not including one of the specified delimiter\n * characters or the end of line, whichever comes first.\n * @param delimiters A set of delimiter characters.\n * @return A string, trimmed.\n */\n", "func_signal": "public String nextTo(String delimiters) throws JSONException", "code": "{\n    char c;\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        c = next();\n        if (delimiters.indexOf(c) >= 0 || c == 0 ||\n                c == '\\n' || c == '\\r') {\n            if (c != 0) {\n                back();\n            }\n            return sb.toString().trim();\n        }\n        sb.append(c);\n    }\n}", "path": "Json\\src\\org\\com\\json\\JSONTokener.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jBAddTicket = new javax.swing.JButton();\n    jScrollPane1 = new javax.swing.JScrollPane();\n    tbPendingTickets = new javax.swing.JTable();\n    btnEditticket = new javax.swing.JButton();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(questionbox.QuestionBoxApp.class).getContext().getResourceMap(OperatorConsole.class);\n    setTitle(resourceMap.getString(\"Form.title\")); // NOI18N\n    setName(\"Form\"); // NOI18N\n\n    jBAddTicket.setText(resourceMap.getString(\"jBAddTicket.text\")); // NOI18N\n    jBAddTicket.setName(\"jBAddTicket\"); // NOI18N\n    jBAddTicket.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jBAddTicketActionPerformed(evt);\n        }\n    });\n\n    jScrollPane1.setName(\"jScrollPane1\"); // NOI18N\n\n    tbPendingTickets.setModel(new javax.swing.table.DefaultTableModel(\n        new Object [][] {\n            {null, null, null, null},\n            {null, null, null, null},\n            {null, null, null, null},\n            {null, null, null, null}\n        },\n        new String [] {\n            \"Title 1\", \"Title 2\", \"Title 3\", \"Title 4\"\n        }\n    ));\n    tbPendingTickets.setName(\"tbPendingTickets\"); // NOI18N\n    jScrollPane1.setViewportView(tbPendingTickets);\n\n    btnEditticket.setText(resourceMap.getString(\"btnEditticket.text\")); // NOI18N\n    btnEditticket.setName(\"btnEditticket\"); // NOI18N\n    btnEditticket.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            btnEditticketActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addGroup(layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 707, Short.MAX_VALUE))\n                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                    .addGap(192, 192, 192)\n                    .addComponent(btnEditticket)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 228, Short.MAX_VALUE)\n                    .addComponent(jBAddTicket)\n                    .addGap(133, 133, 133)))\n            .addGap(27, 27, 27))\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)\n            .addGap(18, 18, 18)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(btnEditticket)\n                .addComponent(jBAddTicket))\n            .addGap(26, 26, 26))\n    );\n\n    pack();\n}", "path": "App\\QuestionBox\\src\\questionbox\\OperatorConsole.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n * Get the next n characters.\n *\n * @param n     The number of characters to take.\n * @return      A string of n characters.\n * @throws JSONException\n *   Substring bounds error if there are not\n *   n characters remaining in the source string.\n */\n", "func_signal": "public String next(int n) throws JSONException", "code": "{\n     if (n == 0) {\n         return \"\";\n     }\n\n     char[] buffer = new char[n];\n     int pos = 0;\n\n     if (this.useLastChar) {\n    \t this.useLastChar = false;\n         buffer[0] = this.lastChar;\n         pos = 1;\n     }\n\n     try {\n         int len;\n         while ((pos < n) && ((len = reader.read(buffer, pos, n - pos)) != -1)) {\n             pos += len;\n         }\n     } catch (IOException exc) {\n         throw new JSONException(exc);\n     }\n     this.index += pos;\n\n     if (pos < n) {\n         throw syntaxError(\"Substring bounds error\");\n     }\n\n     this.lastChar = buffer[n - 1];\n     return new String(buffer);\n }", "path": "Json\\src\\org\\com\\json\\JSONTokener.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n * Get the hex value of a character (base16).\n * @param c A character between '0' and '9' or between 'A' and 'F' or\n * between 'a' and 'f'.\n * @return  An int between 0 and 15, or -1 if c was not a hex digit.\n */\n", "func_signal": "public static int dehexchar(char c)", "code": "{\n    if (c >= '0' && c <= '9') {\n        return c - '0';\n    }\n    if (c >= 'A' && c <= 'F') {\n        return c - ('A' - 10);\n    }\n    if (c >= 'a' && c <= 'f') {\n        return c - ('a' - 10);\n    }\n    return -1;\n}", "path": "Json\\src\\org\\com\\json\\JSONTokener.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n * Get the next char in the string, skipping whitespace.\n * @throws JSONException\n * @return  A character, or 0 if there are no more characters.\n */\n", "func_signal": "public char nextClean() throws JSONException", "code": "{\n    for (;;) {\n        char c = next();\n        if (c == 0 || c > ' ') {\n            return c;\n        }\n    }\n}", "path": "Json\\src\\org\\com\\json\\JSONTokener.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n * Construct a JSONTokener from a string.\n *\n * @param reader     A reader.\n */\n", "func_signal": "public JSONTokener(Reader reader)", "code": "{\n    this.reader = reader.markSupported() ? \n    \t\treader : new BufferedReader(reader);\n    this.useLastChar = false;\n    this.index = 0;\n}", "path": "Json\\src\\org\\com\\json\\JSONTokener.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n * This function aids the Editing of tickets already created from the database\n *\n */\n", "func_signal": "private void btnEditticketActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_btnEditticketActionPerformed\n\n      // being created.\n    try\n    {\n        if(tbPendingTickets.getSelectedRowCount() == 1 )\n        {\n            int Rowid = tbPendingTickets.getSelectedRow();\n            long Ticketid = Long.parseLong(dataRows.get(Rowid).get(0));\n            Ticketfrm ticketfrm = new Ticketfrm(Ticket.getTicket(Ticketid));\n            this.dispose();\n            ticketfrm.show();\n        }\n        else\n        {\n             JOptionPane.showMessageDialog(this, \"Please select exactly one row.\",\"Error\",JOptionPane.ERROR_MESSAGE);\n        }\n    } catch (Exception e) {\n        System.out.println(e.getMessage());\n        JOptionPane.showMessageDialog(this, \"Failed to open ticket windows \\n\" , \"Error\", JOptionPane.ERROR_MESSAGE);\n    }\n\n}", "path": "App\\QuestionBox\\src\\questionbox\\OperatorConsole.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "/**\n* @param args the command line arguments\n*/\n", "func_signal": "public static void main(String args[])", "code": "{\n    java.awt.EventQueue.invokeLater(new Runnable() {\n        public void run() {\n            OperatorConsole operatorConsole = new OperatorConsole();\n            operatorConsole.setResizable(false);\n            operatorConsole.setVisible(true);\n        }\n    });\n}", "path": "App\\QuestionBox\\src\\questionbox\\OperatorConsole.java", "repo_name": "jongos/Question_Box_Desktop", "stars": 7, "license": "lgpl-3.0", "language": "java", "size": 1673}
{"docstring": "// Setup ==================================================================\n", "func_signal": "public TabStringTokenizer(String line)", "code": "{\n\tthis.line = line;\n\n\tfetchNextToken();\n}", "path": "plugins\\cvs\\javacvs-src\\org\\netbeans\\lib\\cvsclient\\command\\reservedcheckout\\TabStringTokenizer.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "//executed in manager thread\n", "func_signal": "public void connectorIsReady()", "code": "{\n  DebuggerInvocationUtil.invokeLater(getProject(), new Runnable() {\n    public void run() {\n      RemoteConnection connection = myDebugProcess.getConnection();\n      final String addressDisplayName = DebuggerBundle.getAddressDisplayName(connection);\n      final String transportName = DebuggerBundle.getTransportName(connection);\n      final String connectionStatusMessage = connection.isServerMode() ? DebuggerBundle.message(\"status.listening\", addressDisplayName, transportName) : DebuggerBundle.message(\"status.connecting\", addressDisplayName, transportName);\n      getContextManager().setState(SESSION_EMPTY_CONTEXT, DebuggerSession.STATE_WAITING_ATTACH, DebuggerSession.EVENT_START_WAIT_ATTACH, connectionStatusMessage);\n    }\n  });\n}", "path": "java\\debugger\\impl\\src\\com\\intellij\\debugger\\impl\\DebuggerSession.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/**\n * ImportUtils currently checks all inner classes, even those that are\n * contained in inner classes themselves, because it doesn't know the\n * location of the original fully qualified reference. It should really only\n * check if the containing class of the fully qualified reference has any\n * conflicting inner classes.\n */\n", "func_signal": "private static boolean containsConflictingInnerClass(String fqName,\n                                                     PsiClass aClass)", "code": "{\n    final String shortName = ClassUtil.extractClassName(fqName);\n    if(shortName.equals(aClass.getName())){\n        if(!fqName.equals(aClass.getQualifiedName())){\n            return true;\n        }\n    }\n    final PsiClass[] classes = aClass.getInnerClasses();\n    for (PsiClass innerClass : classes) {\n        if (containsConflictingInnerClass(fqName, innerClass)) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "plugins\\IntentionPowerPak\\src\\com\\siyeh\\ipp\\psiutils\\ImportUtils.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/**\n * @return selected content or <code>null</code>\n */\n", "func_signal": "private Content getContent(final DataContext context)", "code": "{\n  ContentManager contentManager = ContentManagerUtil.getContentManagerFromContext(context, true);\n  if (contentManager == null){\n    return null;\n  }\n  return contentManager.getSelectedContent();\n}", "path": "platform\\platform-impl\\src\\com\\intellij\\ide\\actions\\PinActiveTabAction.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/**\n * Shows code style settings sutable for the project passed. I.e. it shows project code style page if one\n * is configured to use own code style scheme or global one in other case.\n * @param project\n * @return Returns true if settings were modified during editing session.\n */\n", "func_signal": "public boolean showCodeStyleSettings(Project project, final Class pageToSelect)", "code": "{\n  CodeStyleSettingsManager settingsManager = CodeStyleSettingsManager.getInstance(project);\n  CodeStyleSettings savedSettings = settingsManager.getCurrentSettings().clone();\n  final CodeStyleSchemesConfigurable configurable = CodeStyleSchemesConfigurable.getInstance(project);\n  Runnable selectPage = new Runnable() {\n    public void run() {\n      if (pageToSelect != null) {\n        configurable.selectPage(pageToSelect);\n      }\n    }\n  };\n  ShowSettingsUtil.getInstance().editConfigurable(project, configurable, selectPage);\n\n  return !savedSettings.equals(settingsManager.getCurrentSettings());\n}", "path": "platform\\lang-impl\\src\\com\\intellij\\application\\options\\CodeStyleSettingsUtilImpl.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/**\n * Pushes the specified amount of characters back into the input stream.\n *\n * They will be read again by then next call of the scanning method\n *\n * @param number  the number of characters to be read again.\n *                This number must not be greater than yylength()!\n */\n", "func_signal": "public void yypushback(int number)", "code": "{\n  if ( number > yylength() )\n    zzScanError(ZZ_PUSHBACK_2BIG);\n\n  zzMarkedPos -= number;\n}", "path": "plugins\\groovy\\src\\org\\jetbrains\\plugins\\groovy\\lang\\groovydoc\\lexer\\_GroovyDocLexer.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/** \n * Unpacks the compressed character translation table.\n *\n * @param packed   the packed character translation table\n * @return         the unpacked character translation table\n */\n", "func_signal": "private static char [] zzUnpackCMap(String packed)", "code": "{\n  char [] map = new char[0x10000];\n  int i = 0;  /* index in packed string  */\n  int j = 0;  /* index in unpacked array */\n  while (i < 1250) {\n    int  count = packed.charAt(i++);\n    char value = packed.charAt(i++);\n    do map[j++] = value; while (--count > 0);\n  }\n  return map;\n}", "path": "plugins\\groovy\\src\\org\\jetbrains\\plugins\\groovy\\lang\\groovydoc\\lexer\\_GroovyDocLexer.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/**\n * actually state changes not in the same sequence as you call setState\n * the 'resuming' setState with context.getSuspendContext() == null may be set prior to\n * the setState for the context with context.getSuspendContext()\n *\n * in this case we assume that the latter setState is ignored\n * since the thread was resumed\n */\n", "func_signal": "public void setState(final DebuggerContextImpl context, final int state, final int event, final String description)", "code": "{\n  ApplicationManager.getApplication().assertIsDispatchThread();\n  LOG.assertTrue(context.getDebuggerSession() == DebuggerSession.this || context.getDebuggerSession() == null);\n  final Runnable setStateRunnable = new Runnable() {\n    public void run() {\n      LOG.assertTrue(myDebuggerContext.isInitialised());\n      myDebuggerContext = context;\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"DebuggerSession state = \" + state + \", event = \" + event);\n      }\n\n      myIsEvaluating = false;\n\n      myState = new DebuggerSessionState(state, description);\n      fireStateChanged(context, event);\n    }\n  };\n\n  if(context.getSuspendContext() == null) {\n    setStateRunnable.run();\n  }\n  else {\n    getProcess().getManagerThread().schedule(new SuspendContextCommandImpl(context.getSuspendContext()) {\n      public void contextAction() throws Exception {\n        context.initCaches();\n        DebuggerInvocationUtil.swingInvokeLater(getProject(), setStateRunnable);\n      }\n    });\n  }\n}", "path": "java\\debugger\\impl\\src\\com\\intellij\\debugger\\impl\\DebuggerSession.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/**\n * @param strict  if strict is true this method checks if the conflicting\n * class which is imported is actually used in the file. If it isn't the\n * on demand import can be overridden with an exact import for the fqName\n * without breaking stuff.\n */\n", "func_signal": "private static boolean hasOnDemandImportConflict(@NotNull String fqName,\n                                                 @NotNull PsiJavaFile file,\n                                                 boolean strict)", "code": "{\n    final PsiImportList imports = file.getImportList();\n    if(imports == null){\n        return false;\n    }\n    final PsiImportStatement[] importStatements =\n            imports.getImportStatements();\n    final int lastDotIndex = fqName.lastIndexOf((int) '.');\n    final String shortName = fqName.substring(lastDotIndex + 1);\n    final String packageName = ClassUtil.extractPackageName(fqName);\n    for(final PsiImportStatement importStatement : importStatements){\n        if (!importStatement.isOnDemand()) {\n            continue;\n        }\n        final PsiJavaCodeReferenceElement importReference =\n                importStatement.getImportReference();\n        if(importReference == null){\n            continue;\n        }\n        final String packageText = importReference.getText();\n        if(packageText.equals(packageName)){\n            continue;\n        }\n        final PsiElement element = importReference.resolve();\n        if (element == null || !(element instanceof PsiPackage)) {\n            continue;\n        }\n        final PsiPackage aPackage = (PsiPackage) element;\n        final PsiClass[] classes = aPackage.getClasses();\n        for(final PsiClass aClass : classes){\n            final String className = aClass.getName();\n            if (!shortName.equals(className)) {\n                continue;\n            }\n            if (!strict) {\n                return true;\n            }\n            final String qualifiedClassname = aClass.getQualifiedName();\n            final ClassReferenceVisitor visitor =\n                    new ClassReferenceVisitor(qualifiedClassname);\n            file.accept(visitor);\n            return visitor.isReferenceFound();\n        }\n    }\n    if (hasDefaultImportConflict(fqName, file)) {\n        return true;\n    }\n    return hasJavaLangImportConflict(fqName, file);\n}", "path": "plugins\\IntentionPowerPak\\src\\com\\siyeh\\ipp\\psiutils\\ImportUtils.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/**\n * @return selected editor or <code>null</code>\n */\n", "func_signal": "private VirtualFile getFile(final DataContext context)", "code": "{\n  Project project = PlatformDataKeys.PROJECT.getData(context);\n  if(project == null){\n    return null;\n  }\n\n  // To provide file from editor manager, editor component should be active\n  if(!ToolWindowManager.getInstance(project).isEditorComponentActive()){\n    return null;\n  }\n\n  return PlatformDataKeys.VIRTUAL_FILE.getData(context);\n}", "path": "platform\\platform-impl\\src\\com\\intellij\\ide\\actions\\PinActiveTabAction.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/**\n * Contains user EOF-code, which will be executed exactly once,\n * when the end of file is reached\n */\n", "func_signal": "private void zzDoEOF()", "code": "{\n  if (!zzEOFDone) {\n    zzEOFDone = true;\n  \n  }\n}", "path": "plugins\\groovy\\src\\org\\jetbrains\\plugins\\groovy\\lang\\groovydoc\\lexer\\_GroovyDocLexer.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/**\n * total component made invalid => for test connection to be forbidden when for ex. ambiguous settings given\n */\n", "func_signal": "public void setIsValid(final boolean valid)", "code": "{\n  for (int i = 0; i < myRoot.getChildCount(); i++) {\n    final MyNode node = (MyNode) myRoot.getChildAt(i);\n    final GroupConfigurable groupConfigurable = (GroupConfigurable) ((MyNode) node).getConfigurable();\n    groupConfigurable.setIsValid(valid);\n  }\n}", "path": "plugins\\svn4idea\\src\\org\\jetbrains\\idea\\svn\\config\\SvnConfigureProxiesComponent.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/* Stepping */\n", "func_signal": "private void resumeAction(final DebugProcessImpl.ResumeCommand command, int event)", "code": "{\n  getContextManager().setState(SESSION_EMPTY_CONTEXT, STATE_WAIT_EVALUATION, event, null);\n  myDebugProcess.getManagerThread().schedule(command);\n}", "path": "java\\debugger\\impl\\src\\com\\intellij\\debugger\\impl\\DebuggerSession.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/**\n * A constructor\n *\n * @param value     primary value of the element\n * @param generator a generator to use\n */\n", "func_signal": "public GeneratorItem(String value, final Generator generator)", "code": "{\n  super(value);\n  myGenerator = generator;\n}", "path": "java\\compiler\\impl\\src\\com\\intellij\\compiler\\ant\\ModuleChunkClasspath.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/**\n * Is called inside atomic action.\n *\n * @param refUsages usages to be filtered\n * @return true if preprocessed successfully\n */\n", "func_signal": "protected boolean preprocessUsages(Ref<UsageInfo[]> refUsages)", "code": "{\n  prepareSuccessful();\n  return true;\n}", "path": "platform\\lang-impl\\src\\com\\intellij\\refactoring\\BaseRefactoringProcessor.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/**\n * Process the module. The logic is different for compile-time case and runtime case.\n * In the case of runtime, only directly referenced objects are included in classpath.\n * Indirectly referenced are\n *\n * @param module a module to process.\n * @param dependencyLevel is increased with every of recursion.\n * @param isModuleExported if true the module is exported from the previous level\n */\n", "func_signal": "public void processModule(final Module module, final int dependencyLevel, final boolean isModuleExported)", "code": "{\n  if (processedModules.contains(module)) {\n    // the module is already processed, nothing should be done\n    return;\n  }\n  if (dependencyLevel > 1 && !isModuleExported && !(genOptions.inlineRuntimeClasspath && generateRuntimeClasspath)) {\n    // the module is not in exports and it is not directly included skip it in the case of library pathgeneration\n    return;\n  }\n  processedModules.add(module);\n  final ProjectEx project = (ProjectEx)chunk.getProject();\n  final File baseDir = BuildProperties.getProjectBaseDir(project);\n  for (final OrderEntry orderEntry : ModuleRootManager.getInstance(module).getOrderEntries()) {\n    if (!orderEntry.isValid()) {\n      continue;\n    }\n    if (!generateRuntimeClasspath) {\n      // needed for compilation classpath only\n      if ((orderEntry instanceof ModuleSourceOrderEntry)) {\n        // this is the entry for outpath of the currently processed module\n        if (dependencyLevel == 0 || chunk.contains(module)) {\n          // the root module is never included\n          continue;\n        }\n      }\n      else {\n        final boolean isExported = (orderEntry instanceof ExportableOrderEntry) && ((ExportableOrderEntry)orderEntry).isExported();\n        if (dependencyLevel > 0 && !isExported) {\n          if (!(orderEntry instanceof ModuleOrderEntry)) {\n            // non-exported dependencies are excluded and not processed\n            continue;\n          }\n        }\n      }\n    }\n    if (orderEntry instanceof JdkOrderEntry) {\n      if (genOptions.forceTargetJdk && !generateRuntimeClasspath) {\n        pathItems\n          .add(new PathRefItem(BuildProperties.propertyRef(BuildProperties.getModuleChunkJdkClasspathProperty(chunk.getName()))));\n      }\n    }\n    else if (orderEntry instanceof ModuleOrderEntry) {\n      final ModuleOrderEntry moduleOrderEntry = (ModuleOrderEntry)orderEntry;\n      final Module dependentModule = moduleOrderEntry.getModule();\n      if (!chunk.contains(dependentModule)) {\n        if (generateRuntimeClasspath && !genOptions.inlineRuntimeClasspath) {\n          // in case of runtime classpath, just an referenced to corresponding classpath is created\n          final ModuleChunk depChunk = genOptions.getChunkByModule(dependentModule);\n          if (!processedChunks.contains(depChunk)) {\n            // chunk references are included in the runtime classpath only once\n            processedChunks.add(depChunk);\n            pathItems.add(new PathRefItem(BuildProperties.getRuntimeClasspathProperty(depChunk.getName())));\n          }\n        }\n        else {\n          // in case of compile classpath or inlined runtime classpath,\n          // the referenced module is processed recursively\n          processModule(dependentModule, dependencyLevel + 1, moduleOrderEntry.isExported());\n        }\n      }\n    }\n    else if (orderEntry instanceof LibraryOrderEntry) {\n      final LibraryOrderEntry libraryOrderEntry = (LibraryOrderEntry)orderEntry;\n      final String libraryName = libraryOrderEntry.getLibraryName();\n      if (((LibraryOrderEntry)orderEntry).isModuleLevel()) {\n        CompositeGenerator gen = new CompositeGenerator();\n        gen.setHasLeadingNewline(false);\n        LibraryDefinitionsGeneratorFactory.genLibraryContent(project, genOptions, libraryOrderEntry.getLibrary(), baseDir, gen);\n        pathItems.add(new GeneratorItem(libraryName, gen));\n      }\n      else {\n        pathItems.add(new PathRefItem(BuildProperties.getLibraryPathId(libraryName)));\n      }\n    }\n    else {\n      // Module source entry?\n      for (String url : getCompilationClasses(orderEntry, ((GenerationOptionsImpl)genOptions), generateRuntimeClasspath)) {\n        if (url.endsWith(JarFileSystem.JAR_SEPARATOR)) {\n          url = url.substring(0, url.length() - JarFileSystem.JAR_SEPARATOR.length());\n        }\n        final String propertyRef = genOptions.getPropertyRefForUrl(url);\n        if (propertyRef != null) {\n          pathItems.add(new PathElementItem(propertyRef));\n        }\n        else {\n          final String path = VirtualFileManager.extractPath(url);\n          pathItems.add(new PathElementItem(\n            GenerationUtils.toRelativePath(path, chunk.getBaseDir(), moduleChunkBasedirProperty, genOptions)));\n        }\n      }\n    }\n  }\n}", "path": "java\\compiler\\impl\\src\\com\\intellij\\compiler\\ant\\ModuleChunkClasspath.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "// Utils ==================================================================\n", "func_signal": "private void fetchNextToken()", "code": "{\n\tnextToken = null;\n\tif (startIndex >= line.length()) {\n\t\treturn;\n\t}\n\n\tfinal int nextIndex = line.indexOf('\\t', startIndex);\n\tif (nextIndex >= 0) {\n\t\tnextToken = line.substring(startIndex, nextIndex);\n\t\tstartIndex = nextIndex + 1;\n\t}\n\telse {\n\t\tnextToken = line.substring(startIndex);\n\t\tstartIndex = line.length();\n\t}\n}", "path": "plugins\\cvs\\javacvs-src\\org\\netbeans\\lib\\cvsclient\\command\\reservedcheckout\\TabStringTokenizer.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/**\n * Reports an error that occured while scanning.\n *\n * In a wellformed scanner (no or only correct usage of\n * yypushback(int) and a match-all fallback rule) this method\n * will only be called with things that \"Can't Possibly Happen\".\n * If this method is called, something is seriously wrong\n * (e.g. a JFlex bug producing a faulty scanner etc.).\n *\n * Usual syntax/scanner level error handling should be done\n * in error fallback rules.\n *\n * @param   errorCode  the code of the errormessage to display\n */\n", "func_signal": "private void zzScanError(int errorCode)", "code": "{\n  String message;\n  try {\n    message = ZZ_ERROR_MSG[errorCode];\n  }\n  catch (ArrayIndexOutOfBoundsException e) {\n    message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];\n  }\n\n  throw new Error(message);\n}", "path": "plugins\\groovy\\src\\org\\jetbrains\\plugins\\groovy\\lang\\groovydoc\\lexer\\_GroovyDocLexer.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "// Actions ================================================================\n", "func_signal": "public String nextToken()", "code": "{\n\tfinal String token = nextToken;\n\tfetchNextToken();\n\treturn token;\n}", "path": "plugins\\cvs\\javacvs-src\\org\\netbeans\\lib\\cvsclient\\command\\reservedcheckout\\TabStringTokenizer.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/**\n * Resumes scanning until the next regular expression is matched,\n * the end of input is encountered or an I/O-Error occurs.\n *\n * @return      the next token\n * @exception   java.io.IOException  if any I/O-Error occurs\n */\n", "func_signal": "public IElementType advance() throws java.io.IOException", "code": "{\n  int zzInput;\n  int zzAction;\n\n  // cached fields:\n  int zzCurrentPosL;\n  int zzMarkedPosL;\n  int zzEndReadL = zzEndRead;\n  CharSequence zzBufferL = zzBuffer;\n  char[] zzBufferArrayL = zzBufferArray;\n  char [] zzCMapL = ZZ_CMAP;\n\n  int [] zzTransL = ZZ_TRANS;\n  int [] zzRowMapL = ZZ_ROWMAP;\n  int [] zzAttrL = ZZ_ATTRIBUTE;\n\n  while (true) {\n    zzMarkedPosL = zzMarkedPos;\n\n    zzAction = -1;\n\n    zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n\n    zzState = zzLexicalState;\n\n\n    zzForAction: {\n      while (true) {\n\n        if (zzCurrentPosL < zzEndReadL)\n          zzInput = zzBufferL.charAt(zzCurrentPosL++);\n        else if (zzAtEOF) {\n          zzInput = YYEOF;\n          break zzForAction;\n        }\n        else {\n          // store back cached positions\n          zzCurrentPos  = zzCurrentPosL;\n          zzMarkedPos   = zzMarkedPosL;\n          boolean eof = zzRefill();\n          // get translated positions and possibly new buffer\n          zzCurrentPosL  = zzCurrentPos;\n          zzMarkedPosL   = zzMarkedPos;\n          zzBufferL      = zzBuffer;\n          zzEndReadL     = zzEndRead;\n          if (eof) {\n            zzInput = YYEOF;\n            break zzForAction;\n          }\n          else {\n            zzInput = zzBufferL.charAt(zzCurrentPosL++);\n          }\n        }\n        int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\n        if (zzNext == -1) break zzForAction;\n        zzState = zzNext;\n\n        int zzAttributes = zzAttrL[zzState];\n        if ( (zzAttributes & 1) == 1 ) {\n          zzAction = zzState;\n          zzMarkedPosL = zzCurrentPosL;\n          if ( (zzAttributes & 8) == 8 ) break zzForAction;\n        }\n\n      }\n    }\n\n    // store back cached position\n    zzMarkedPos = zzMarkedPosL;\n\n    switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n      case 9: \n        { yybegin(COMMENT_DATA); return mGDOC_WHITESPACE;\n        }\n      case 21: break;\n      case 15: \n        { yybegin(DOC_TAG_VALUE); return mGDOC_TAG_VALUE_RPAREN;\n        }\n      case 22: break;\n      case 2: \n        { yybegin(COMMENT_DATA); return mGDOC_COMMENT_DATA;\n        }\n      case 23: break;\n      case 1: \n        { return mGDOC_COMMENT_BAD_CHARACTER;\n        }\n      case 24: break;\n      case 6: \n        { return mGDOC_COMMENT_DATA;\n        }\n      case 25: break;\n      case 19: \n        { yybegin(COMMENT_DATA_START); return mGDOC_COMMENT_START;\n        }\n      case 26: break;\n      case 20: \n        { yybegin(PARAM_TAG_SPACE); return mGDOC_TAG_NAME;\n        }\n      case 27: break;\n      case 18: \n        { yybegin(TAG_DOC_SPACE); return mGDOC_TAG_NAME;\n        }\n      case 28: break;\n      case 4: \n        { if (checkAhead('@')){\n  yybegin(INLINE_TAG_NAME);\n}\nelse{\n  yybegin(COMMENT_DATA);\n}\nreturn mGDOC_INLINE_TAG_START;\n        }\n      case 29: break;\n      case 16: \n        { yybegin(COMMENT_DATA); return mGDOC_TAG_VALUE_GT;\n        }\n      case 30: break;\n      case 3: \n        { return mGDOC_WHITESPACE;\n        }\n      case 31: break;\n      case 11: \n        { yybegin(DOC_TAG_VALUE_IN_PAREN); return mGDOC_TAG_VALUE_LPAREN;\n        }\n      case 32: break;\n      case 5: \n        { yybegin(COMMENT_DATA); return mGDOC_INLINE_TAG_END;\n        }\n      case 33: break;\n      case 7: \n        { if (checkAhead('<') || checkAhead('\\\"')) yybegin(COMMENT_DATA);\nelse if (checkAhead('\\u007b') ) yybegin(COMMENT_DATA); //lbrace -  there's some error in JLex when typing lbrace directly\nelse yybegin(DOC_TAG_VALUE);\n\n return mGDOC_WHITESPACE;\n        }\n      case 34: break;\n      case 8: \n        { yybegin(DOC_TAG_VALUE); return mGDOC_WHITESPACE;\n        }\n      case 35: break;\n      case 17: \n        { return mGDOC_COMMENT_END;\n        }\n      case 36: break;\n      case 10: \n        { return mGDOC_TAG_VALUE_TOKEN;\n        }\n      case 37: break;\n      case 14: \n        { yybegin(DOC_TAG_VALUE_IN_LTGT); return mGDOC_TAG_VALUE_LT;\n        }\n      case 38: break;\n      case 13: \n        { return mGDOC_TAG_VALUE_COMMA;\n        }\n      case 39: break;\n      case 12: \n        { return mGDOC_TAG_VALUE_SHARP_TOKEN;\n        }\n      case 40: break;\n      default:\n        if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n          zzAtEOF = true;\n          zzDoEOF();\n          return null;\n        }\n        else {\n          zzScanError(ZZ_NO_MATCH);\n        }\n    }\n  }\n}", "path": "plugins\\groovy\\src\\org\\jetbrains\\plugins\\groovy\\lang\\groovydoc\\lexer\\_GroovyDocLexer.java", "repo_name": "jexp/idea2", "stars": 7, "license": "apache-2.0", "language": "java", "size": 627071}
{"docstring": "/** \n * Create a Set Tempo meta event. Takes a tempo in BPMs.\n */\n", "func_signal": "public static MidiEvent createSetTempoEvent(long tick, long tempo)", "code": "{\n\t// microseconds per quarternote\n\tlong mpqn = DebugMidi.MICROSECONDS_PER_MINUTE / tempo;\n\n\tMetaMessage metaMessage = new MetaMessage();\n\n\t// create the tempo byte array\n\tbyte [] array = new byte[]{0, 0, 0};\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tint shift = (3 - 1 - i) * 8;\n\t\tarray[i] = (byte) (mpqn >> shift);\n\t}\n\n\t// now set the message\n\ttry {\n\t\tmetaMessage.setMessage(81, array, 3);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tSystem.exit(1);\n\t}\n\n\treturn new MidiEvent(metaMessage, tick);\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/**\n * Return a clone of a track.\n */\n", "func_signal": "public static Track cloneTrack(Track track)", "code": "{\n\tTrack newTrack = null;\n\n\ttry {\n\t\tSequence seq = new Sequence(IdealSequence.getDivisionType(),\n\t\t\t\tIdealSequence.getResolution());\n\t\tnewTrack = seq.createTrack();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tSystem.exit(1);\n\t}\n\n\tassert newTrack != null;\n\n\n\tfor (int i = 0; i < track.size(); i++)\n\t{\n\t\tMidiEvent event = track.get(i);\n\t\tnewTrack.add(event);\n\t}\n\n\tassert track.size() == newTrack.size();\n\n\treturn newTrack;\n\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/**\n * Updated look and feel to run like a GTK application if the GTK theme is available.\n */\n", "func_signal": "protected void setLookAndFeel()", "code": "{\n\tUIManager.LookAndFeelInfo[] infos = UIManager.getInstalledLookAndFeels();\n\n\tfor (UIManager.LookAndFeelInfo i : infos)\n\t{\n\t\tif (i.getName().contains(\"GTK\"))\n\t\t{\n\t\t\ttry {\n\t\t\t\tUIManager.setLookAndFeel(i.getClassName());\n\t\t\t\tSwingUtilities.updateComponentTreeUI(this);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\n\t\t}\n\t}\n\n}", "path": "PopulationViewer.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/**\n * Return the number of note on and note off events in track.\n */\n", "func_signal": "public static int noteOnOffsInTrack(Track track)", "code": "{\n\tint count = 0;\n\n\tfor (int i = 0; i < track.size(); i++)\n\t{\n\t\tMidiEvent event = track.get(i);\n\t\tif (isNoteOnEvent(event) || isNoteOffEvent(event))\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/**\n * Close the sequencer (so that the program can exit instead of just hanging).\n */\n", "func_signal": "public static void closeSequencer()", "code": "{\n\ttry{\n\n\t\tif (sequencer != null)\n\t\t{\n\t\t\tif (sequencer.isOpen())\n\t\t\t{\n\t\t\t\tstopPlaying();\n\t\t\t\tsequencer.close();\n\t\t\t}\n\t\t}\n\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tSystem.exit(1);\n\t}\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/** \n * Create a note on event.\n */\n", "func_signal": "public static MidiEvent createNoteOnEvent(long tick, int channel, \n\t\tint note, int velocity)", "code": "{\n\tShortMessage shortMessage = new ShortMessage();\n\ttry {\n\t\tshortMessage.setMessage(ShortMessage.NOTE_ON, channel, note, velocity);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tSystem.exit(1);\n\t}\n\treturn new MidiEvent(shortMessage, tick);\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/** \n * Create a note off event.\n */\n", "func_signal": "public static MidiEvent createNoteOffEvent(long tick, int channel, \n\t\tint note, int velocity)", "code": "{\n\tShortMessage shortMessage = new ShortMessage();\n\ttry {\n\t\tshortMessage.setMessage(ShortMessage.NOTE_OFF, channel, note, velocity);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tSystem.exit(1);\n\t}\n\treturn new MidiEvent(shortMessage, tick);\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/** \n * Play a sequence.  Stops playing any currently playing sequences.\n */\n", "func_signal": "public static void play(Sequence sequence)", "code": "{\n\ttry{\n\n\t\t// if the sequencer hasn't been initialized, \n\t\t// initialize it\n\t\tif (sequencer == null)\n\t\t{\n\t\t\tsequencer = MidiSystem.getSequencer();\n\t\t}\n\n\t\t// if the sequencer hasn't been opened, open it for playing\n\t\tif (!sequencer.isOpen())\n\t\t{\n\t\t\tsequencer.open();\n\t\t}\n\t\t\n\t\t// if the sequencer is running, we need to stop it\n\t\tif (sequencer.isRunning())\n\t\t{\n\t\t\tsequencer.stop();\n\t\t}\n\n\t\t// rewind it to the beginning and start playing again\n\t\tsequencer.setTickPosition(0);\n\t\tsequencer.setSequence(sequence);\n\t\tsequencer.start();\n\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tSystem.exit(1);\n\t}\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/**\n * Return a vector containing all the notes from allNotes that are playing at tick.\n */\n", "func_signal": "public static Vector<Note> getNotesPlayingAtTick(Vector<Note> allNotes, long tick)", "code": "{\n\tVector<Note> playingNotes = new Vector<Note>();\n\n\tfor (Note n : allNotes)\n\t{\n\t\tif (tick >= n.getStartTick() && tick < n.getEndTick())\n\t\t{\n\t\t\tplayingNotes.add(n);\n\t\t}\n\t}\n\n\treturn playingNotes;\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/** \n * Tests it two events are the same event.\n * (Their tick is the same, their note number is the same,\n * and their velocity is the same.)\n * Note: This does not make sure their channel is the same.\n */\n", "func_signal": "public static boolean isEqualMidiEvents(MidiEvent aEvent, MidiEvent bEvent)", "code": "{\n\tassert aEvent != null && bEvent != null;\n\t//assert isNoteOnEvent(aEvent) || isNoteOffEvent(aEvent); \n\t//assert isNoteOnEvent(bEvent) || isNoteOffEvent(bEvent);\n\t\n\n\tif (aEvent.getTick() != bEvent.getTick())\n\t{\n\t\treturn false;\n\t}\n\n\tMidiMessage a = aEvent.getMessage();\n\tMidiMessage b = bEvent.getMessage();\n\n\t// test if they are note on messages\n\tif (isNoteOnMessage(a))\n\t{\n\t\tif (!isNoteOnMessage(b))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (isNoteOnMessage(b))\n\t\t{\n\t\t\treturn getVelocity(aEvent) == getVelocity(bEvent) &&\n\t\t\t\tgetNoteValue(aEvent) == getNoteValue(bEvent);\n\t\t}\n\t}\n\n\t// test if they are note off messages\n\tif (isNoteOffMessage(a))\n\t{\n\t\tif (!isNoteOffMessage(b))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (isNoteOffMessage(b))\n\t\t{\n\t\t\treturn getNoteValue(aEvent) == getNoteValue(bEvent);\n\t\t}\n\t}\n\t\n\t// test if they are metamessages\n\tif (a.getMessage()[0] == (byte)255 && b.getMessage()[0] == (byte)255)\n\t{\n\t\treturn java.util.Arrays.equals(a.getMessage(), b.getMessage());\n\t}\n\n\n\treturn false;\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/** \n * Stop playing a sequence.\n */\n", "func_signal": "public static void stopPlaying()", "code": "{\n\ttry{\n\n\t\tif (sequencer != null)\n\t\t{\n\t\t\tif (sequencer.isOpen())\n\t\t\t{\n\t\t\t\tif (sequencer.isRunning())\n\t\t\t\t{\n\t\t\t\t\tsequencer.stop();\n\t\t\t\t\tsequencer.setTickPosition(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tSystem.exit(1);\n\t}\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/**\n * Return the note value for a note on or note off event.\n */\n", "func_signal": "public static int getNoteValue(MidiEvent noteOnOff)", "code": "{\n\tassert isNoteOnEvent(noteOnOff) || isNoteOffEvent(noteOnOff);\n\n\treturn getNoteValue(noteOnOff.getMessage());\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/** \n * This is hard because it will System.exit() if it can't \n * find a matching note off event.\n */\n", "func_signal": "@Test\npublic void testFindMatchingNoteOff()", "code": "{\n\ttry \n\t{\n\t\tSequence sequence = new Sequence(0, 480);\n\t\tTrack track = sequence.createTrack();\n\n\t\t// add a new note to the track\n\t\tNote note1 = new Note(track, 0, 480, 0, \"C5\", 100);\n\t\tnote1.addToTrack();\n\n\t\t// make sure that the first note in the track is the same as\n\t\t// note1's getNoteOnEvent().\n\t\tassertTrue(MidiHelper.isEqualMidiEvents(track.get(0), note1.getNoteOnEvent())); \n\n\t\t// make sure the matching noteOff for this track is the same\n\t\t// as note1's getNoteOffEvent().\n\t\tassertTrue(\n\t\t\t\tMidiHelper.isEqualMidiEvents(\n\t\t\t\t\tMidiHelper.findMatchingNoteOff(track, 0, note1.getNoteOnEvent()),\n\t\t\t\t\tnote1.getNoteOffEvent()\n\t\t\t\t) \n\t\t\t);\n\n\t\t// add new note to track\n\t\tNote note2 = new Note(track, 100, 200, 0, \"C5\", 100);\n\t\tnote2.addToTrack();\n\t\t\n\t\t// make sure it's the second note on the track and it's not equal to \n\t\t// the first note\n\t\tassertTrue(MidiHelper.isEqualMidiEvents(track.get(1), note2.getNoteOnEvent()));\n\t\tassertFalse(MidiHelper.isEqualMidiEvents(track.get(1), note1.getNoteOnEvent()));\n\n\t\t// make sure the second note on event corresponds to it's own note off\n\t\tassertTrue(\n\t\t\t\tMidiHelper.isEqualMidiEvents(\n\t\t\t\t\tMidiHelper.findMatchingNoteOff(track, 0, note2.getNoteOnEvent()),\n\t\t\t\t\tnote2.getNoteOffEvent()\n\t\t\t\t) \n\t\t\t);\n\n\t\t// now note1's note off will correspond to note2's note off\n\t\t// (since they are the same note and note2's note off comes sooner)\n\t\tassertTrue(\n\t\t\t\tMidiHelper.isEqualMidiEvents(\n\t\t\t\t\tMidiHelper.findMatchingNoteOff(track, 0, note1.getNoteOnEvent()),\n\t\t\t\t\tnote2.getNoteOffEvent()\n\t\t\t\t) \n\t\t\t);\n\t}\n\tcatch (Exception e)\n\t{\n\t\te.printStackTrace();\n\t\tSystem.exit(1);\n\t}\n\n}", "path": "MidiHelperTest.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/**\n * Return the note value for a note on or off message.\n */\n", "func_signal": "public static int getNoteValue(MidiMessage noteOnOff)", "code": "{\n\tassert isNoteOnMessage(noteOnOff) || isNoteOffMessage(noteOnOff);\n\n\treturn noteOnOff.getMessage()[1];\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/**\n * Find the same MidiEvent in track as the argument midiEvent.\n */\n", "func_signal": "public static MidiEvent findSameEvent(Track track, MidiEvent midiEvent)\n\tthrows Exception", "code": "{\n\tfor (int i = 0; i < track.size(); i++)\n\t{\n\t\tMidiEvent trackEvent = track.get(i);\n\n\t\tif (isEqualMidiEvents(trackEvent, midiEvent))\n\t\t{\n\t\t\treturn trackEvent;\n\t\t}\n\t}\n\n\tSystem.out.println(\"There is no event \" + \n\t\t\tDebugMidi.midiEventToString(midiEvent) +\n\t\t\t\" in track: \" + DebugMidi.trackEventsToString(track));\n\tthrow new Exception();\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/**\n * Detect whether or not there is anything playing.\n */\n", "func_signal": "public static boolean isPlaying()", "code": "{\n\ttry{\n\t\tif (sequencer == null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t// if it is not open, then it's not playing\n\t\tif (!sequencer.isOpen())\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn sequencer.isRunning();\n\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tSystem.exit(1);\n\t\treturn false;\n\t}\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/**\n * Given a musical pitch (C4, C#-1, D9...), give back the midi value.\n */\n", "func_signal": "public static int getValueFromNote(String noteAndOctave)", "code": "{\n\t// I got this from here:\n\t// http://www.harmony-central.com/MIDI/Doc/table2.html\n\tif (!noteAndOctave.matches(\"^(C|C#|D|D#|E|F|F#|G|G#|A|A#|B)(-1|[0-9])$\"))\n\t{\n\t\tSystem.out.println(\"note \" + noteAndOctave + \" is not a muscial note.\");\n\t\tSystem.exit(1);\n\t}\n\n\tchar note = noteAndOctave.charAt(0);\n\n\tint noteValue = -100;\n\n\tswitch(note)\n\t{\n\t\tcase 'C':\n\t\t\tnoteValue = 0;\n\t\t\tbreak;\n\t\tcase 'D':\n\t\t\tnoteValue = 2;\n\t\t\tbreak;\n\t\tcase 'E':\n\t\t\tnoteValue = 4;\n\t\t\tbreak;\n\t\tcase 'F':\n\t\t\tnoteValue = 5;\n\t\t\tbreak;\n\t\tcase 'G':\n\t\t\tnoteValue = 7;\n\t\t\tbreak;\n\t\tcase 'A':\n\t\t\tnoteValue = 9;\n\t\t\tbreak;\n\t\tcase 'B':\n\t\t\tnoteValue = 11;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tSystem.out.println(\"This should never be reached.\");\n\t\t\tSystem.exit(1);\n\t\t\tbreak;\n\t}\n\n\tboolean sharp = noteAndOctave.contains(\"#\");\n\n\t// if it's sharp, the note value goes up by one\n\tif (sharp) \n\t{\n\t\t//System.out.println(\"There is a sharp\");\n\t\tnoteValue += 1;\n\t}\n\t\n\t//System.out.println(\"notevalue: \" + noteValue);\n\n\tint octaveIndex = -100;\n\n\t// set the starting index for the octave\n\tif (sharp) \n\t\toctaveIndex = 2;\n\telse \n\t\toctaveIndex = 1;\n\n\t//System.out.println(\"octaveIndex is \" + octaveIndex);\n\n\tint octave = -100;\n\n\ttry {\n\t\t// figure out the octave\n\t\toctave = Integer.parseInt( noteAndOctave.substring(octaveIndex) );\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tSystem.exit(1);\n\t}\n\n\t//System.out.println(\"octave is \" + octave);\n\n\treturn (octave + 1) * 12 + noteValue;\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/** \n * Return true if message is a Note Off message.\n */\n", "func_signal": "public static boolean isNoteOffMessage(MidiMessage message)", "code": "{\n\t// It is a note off event if the status indicates it is a \n\t// note off message.  Or, if it is a note on message and\n\t// the velocity is zero.\n\treturn (message.getStatus() >= 128 && \n\t\t\tmessage.getStatus() < 144) ||\n\t\t(message.getStatus() >= 144 && \n\t\t message.getStatus() < 160 &&\n\t\t getVelocity(message) == 0);\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/**\n * Take the NOTE_ON event noteOn (which is event i in track), and \n * find the matching NOTE_OFF event.\n */\n", "func_signal": "public static MidiEvent findMatchingNoteOff(Track track, int noteOnIndex, MidiEvent noteOn)", "code": "{\n\tassert isNoteOnEvent(noteOn);\n\n\tfor (int i = noteOnIndex; i < track.size(); i++)\n\t{\n\t\tMidiEvent event = track.get(i);\n\t\tif (isNoteOffEvent(event) && \n\t\t\t\t(getNoteValue(noteOn) == getNoteValue(event)))\n\t\t{\n\t\t\treturn event;\n\t\t}\n\t}\n\n\tSystem.out.println(\"Could not find note off event for: \" + \n\t\t\tDebugMidi.midiEventToString(noteOn));\n\tSystem.exit(1);\n\treturn null;\n\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/**\n * Given a midi picth value (0-127), give back the musical note.\n */\n", "func_signal": "public static String getNoteFromValue(int value)", "code": "{\n\tif (value > 127 || value < 0)\n\t{\n\t\tSystem.out.println(\"value is out of range\");\n\t\tSystem.exit(1);\n\t}\n\n\tint octave = -100;\n\n\toctave = (int) Math.floor(value / 12) - 1;\n\n\t//System.out.println(\"octave: \" + octave);\n\n\tint noteValue = value - ((octave + 1) * 12);\n\n\t//System.out.println(\"noteValue: \" + noteValue);\n\n\tString note = \"\";\n\n\tswitch (noteValue)\n\t{\n\t\tcase 0:\n\t\t\tnote = \"C\";\t\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tnote = \"C#\";\t\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tnote = \"D\";\t\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tnote = \"D#\";\t\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tnote = \"E\";\t\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tnote = \"F\";\t\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tnote = \"F#\";\t\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tnote = \"G\";\t\n\t\t\tbreak;\n\t\tcase 8:\n\t\t\tnote = \"G#\";\t\n\t\t\tbreak;\n\t\tcase 9:\n\t\t\tnote = \"A\";\t\n\t\t\tbreak;\n\t\tcase 10:\n\t\t\tnote = \"A#\";\t\n\t\t\tbreak;\n\t\tcase 11:\n\t\t\tnote = \"B\";\t\n\t\t\tbreak;\n\t}\n\n\treturn note + octave;\n}", "path": "MidiHelper.java", "repo_name": "cdepillabout/geneticmidi", "stars": 4, "license": "None", "language": "java", "size": 160}
{"docstring": "/**\n * Returns the protocol for the url.\n *\n * @param urlString String\n * @return String\n * @throws MalformedURLException\n */\n", "func_signal": "private String getProtocol(String urlString)\n        throws MalformedURLException", "code": "{\n    URL url = new URL(urlString);\n    return url.getProtocol();\n}", "path": "src\\edu\\stanford\\ejalbert\\launching\\windows\\WindowsBrowserLaunching.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * Accesses the Windows registry to look for browser exes. The\n * browsers search for are in the browsersToCheck list. The returned\n * map will use display names and exe names as keys to the\n * {@link WindowsBrowser WindowsBrowser} objects.\n *\n * @param browsersToCheck List\n * @return Map\n */\n", "func_signal": "private Map getAvailableBrowsers(List tempBrowsersToCheck)", "code": "{\n    logger.debug(\"finding available browsers using registry\");\n    logger.debug(\"browsers to check: \" + tempBrowsersToCheck);\n    Map browsersAvailable = new TreeMap(String.CASE_INSENSITIVE_ORDER);\n    try {\n        // create map of exe names to win browser objects\n        Map exesToBrowserObjs = getExeNamesToBrowsers(tempBrowsersToCheck);\n        // access and look in registry\n        Regor regor = new Regor();\n        String subKeyName =\n                \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\App Paths\";\n        int key = regor.openKey(Regor.HKEY_LOCAL_MACHINE,\n                                subKeyName);\n        if (key > -1) {\n            List keys = regor.listKeys(key);\n            Collections.sort(keys, String.CASE_INSENSITIVE_ORDER);\n            Iterator keysIter = exesToBrowserObjs.keySet().iterator();\n            while (keysIter.hasNext()) {\n                String exeKey = (String) keysIter.next();\n                int index = Collections.binarySearch(\n                        keys,\n                        exeKey,\n                        String.CASE_INSENSITIVE_ORDER);\n                if (index >= 0) {\n                    WindowsBrowser winBrowser = getBrowserFromRegistryEntry(\n                            regor,\n                            key,\n                            (String) keys.get(index),\n                            exeKey,\n                            exesToBrowserObjs);\n                    if (winBrowser != null) {\n                        if (logger.isDebugEnabled()) {\n                            logger.debug(\"Adding browser \" +\n                                         winBrowser.\n                                         getBrowserDisplayName() +\n                                         \" to available list.\");\n                            logger.debug(winBrowser.getPathToExe());\n                        }\n                        // adding display and exe for backward compatibility and\n                        // ease of use if someone passes in the name of an exe\n                        browsersAvailable.put(winBrowser.\n                                              getBrowserDisplayName(),\n                                              winBrowser);\n                        browsersAvailable.put(winBrowser.\n                                              getBrowserApplicationName(),\n                                              winBrowser);\n                        tempBrowsersToCheck.remove(winBrowser);\n                    }\n                }\n            }\n        }\n    }\n    catch (RegistryErrorException ex) {\n        logger.error(\"problem accessing registry\", ex);\n    }\n    return browsersAvailable;\n}", "path": "src\\edu\\stanford\\ejalbert\\launching\\windows\\WindowsBrowserLaunching.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * This is a callback that will allow us\n * to create the viewer and initialize it.\n */\n", "func_signal": "public void createPartControl(Composite parent)", "code": "{\n\tviewer = new TreeViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);\n\tdrillDownAdapter = new DrillDownAdapter(viewer);\n\tviewer.setContentProvider(new ViewContentProvider());\n\tviewer.setLabelProvider(new ViewLabelProvider());\n\tviewer.setInput(getViewSite());\n\tmakeActions();\n\thookContextMenu();\n\thookDoubleClickAction();\n}", "path": "src\\com\\idega\\app\\eplatform\\HistoryView.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * Returns map of browser names and exe names to\n * {@link WindowsBrowser WindowsBrowser} objects.\n * <p>\n * This is the preferred method for accessing the browser name and exe map.\n * @return Map\n */\n", "func_signal": "private Map getBrowserMap()", "code": "{\n    // Handles lazy instantiation of available browser map.\n    synchronized (WindowsBrowserLaunching.class) {\n        if (browserNameAndExeMap == null) {\n            browserNameAndExeMap = new HashMap();\n            // pull additional browsers from system property??\n            // ---------\n            // create temporary list of browsers to check to track which\n            // ones have been found\n            // we will remove items from this temp list\n            List tempBrowsersToCheck = new ArrayList(browsersToCheck);\n            // first try the registry\n            if (useRegistry) {\n                browserNameAndExeMap.putAll(\n                        getAvailableBrowsers(tempBrowsersToCheck));\n            }\n            // if there are still browsers to find, try file path\n            if (!tempBrowsersToCheck.isEmpty()) {\n                browserNameAndExeMap.putAll(\n                        processFilePathsForBrowsers(tempBrowsersToCheck));\n            }\n        }\n    }\n    return browserNameAndExeMap;\n}", "path": "src\\edu\\stanford\\ejalbert\\launching\\windows\\WindowsBrowserLaunching.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * Checks that the windows key is valid.\n *\n * @param logger AbstractLogger\n * @param windowsKey String\n */\n", "func_signal": "public WindowsBrowserLaunching(AbstractLogger logger,\n                               String windowsKey)", "code": "{\n    if (windowsKey == null) {\n        throw new IllegalArgumentException(\"windowsKey cannot be null\");\n    }\n    if (Arrays.binarySearch(WIN_KEYS, windowsKey) < 0) {\n        throw new IllegalArgumentException(windowsKey + \" is invalid\");\n    }\n    this.logger = logger;\n    this.windowsKey = windowsKey;\n    logger.info(windowsKey);\n}", "path": "src\\edu\\stanford\\ejalbert\\launching\\windows\\WindowsBrowserLaunching.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * Secondary method for browser discovery.\n * <p>\n * Uses IE to get the path to the Program Files directory;\n * then gets a list of the sub dirs and checks them against\n * the remaining browsers.\n *\n * @param iePath String\n * @param browsersAvailable Map\n * @param tmpBrowsersToCheck List\n */\n", "func_signal": "private Map processFilePathsForBrowsers(\n        List tmpBrowsersToCheck)", "code": "{\n    logger.debug(\"finding available browsers in program files path\");\n    logger.debug(\"browsers to check: \" + tmpBrowsersToCheck);\n    Map browsersAvailable = new HashMap();\n    File progFilesPath = getProgramFilesPath();\n    if (progFilesPath != null) {\n        logger.debug(\"program files path: \" + progFilesPath.getPath());\n        File[] subDirs = progFilesPath.listFiles(new DirFileFilter());\n        int subDirsCnt = subDirs != null ? subDirs.length : 0;\n        // create and populate map of dir names to win browser objects\n        Iterator iter = tmpBrowsersToCheck.iterator();\n        Map dirNameToBrowser = new HashMap();\n        while (iter.hasNext()) {\n            WindowsBrowser wBrowser = (WindowsBrowser) iter.next();\n            dirNameToBrowser.put(wBrowser.getSubDirName(), wBrowser);\n        }\n        // iterate over subdirs and compare to map entries\n        for (int idx = 0; idx < subDirsCnt && !tmpBrowsersToCheck.isEmpty();\n                       idx++) {\n            if (dirNameToBrowser.containsKey(subDirs[idx].getName())) {\n                WindowsBrowser wBrowser = (WindowsBrowser) dirNameToBrowser.\n                                          get(\n                        subDirs[idx].getName());\n                // need to search folder and sub-folders for exe to find\n                // the full path\n                String exeName = wBrowser.getBrowserApplicationName() +\n                                 \".exe\";\n                File fullPathToExe = findExeFilePath(\n                        subDirs[idx],\n                        exeName);\n                if (fullPathToExe != null) {\n                    logger.debug(\"Adding browser \" +\n                                 wBrowser.getBrowserDisplayName() +\n                                 \" to available list.\");\n                    wBrowser.setPathToExe(fullPathToExe.getPath());\n                    logger.debug(wBrowser.getPathToExe());\n                    // adding display and exe for backward compatibility and\n                    // ease of use if someone passes in the name of an exe\n                    browsersAvailable.put(wBrowser.getBrowserDisplayName(),\n                                          wBrowser);\n                    browsersAvailable.put(wBrowser.\n                                          getBrowserApplicationName(),\n                                          wBrowser);\n                    tmpBrowsersToCheck.remove(wBrowser);\n                }\n            }\n        }\n    }\n    return browsersAvailable;\n}", "path": "src\\edu\\stanford\\ejalbert\\launching\\windows\\WindowsBrowserLaunching.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * Returns displayname and executable name for debugging.\n *\n * @return String\n */\n", "func_signal": "public String toString()", "code": "{\n    StringBuffer buf = new StringBuffer();\n    buf.append(displayName);\n    buf.append(\": ForceWindowArg=\");\n    buf.append(forceWindowArgs);\n    buf.append(\"; SubDir name=\");\n    buf.append(subDirName);\n    buf.append(\"; Path to exe=\");\n    if(pathToExe != null) {\n        buf.append(pathToExe);\n    }\n    buf.append(\"; Exe name=\");\n    buf.append(exe);\n    return buf.toString();\n}", "path": "src\\edu\\stanford\\ejalbert\\launching\\windows\\WindowsBrowser.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/*\n * We will set up a dummy model to initialize tree heararchy.\n * In a real code, you will connect to a real model and\n * expose its hierarchy.\n */\n", "func_signal": "private void initialize()", "code": "{\n\t\t\tTreeObject to1 = new TreeObject(\"Leaf 1\");\n\t\t\tTreeObject to2 = new TreeObject(\"Leaf 2\");\n\t\t\tTreeObject to3 = new TreeObject(\"Leaf 3\");\n\t\t\tTreeParent p1 = new TreeParent(\"Parent 1\");\n\t\t\tp1.addChild(to1);\n\t\t\tp1.addChild(to2);\n\t\t\tp1.addChild(to3);\n\t\t\t\n\t\t\tTreeObject to4 = new TreeObject(\"Leaf 4\");\n\t\t\tTreeParent p2 = new TreeParent(\"Parent 2\");\n\t\t\tp2.addChild(to4);\n\t\t\t\n\t\t\tTreeParent root = new TreeParent(\"Root\");\n\t\t\troot.addChild(p1);\n\t\t\troot.addChild(p2);\n\t\t\t\n\t\t\tinvisibleRoot = new TreeParent(\"\");\n\t\t\tinvisibleRoot.addChild(root);\n\t\t}", "path": "src\\com\\idega\\app\\eplatform\\HistoryView.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * Attempts to open a url with the specified browser. This is\n * a utility method called by the openUrl methods.\n *\n * @param winBrowser WindowsBrowser\n * @param protocol String\n * @param urlString String\n * @return boolean\n * @throws BrowserLaunchingExecutionException\n */\n", "func_signal": "private boolean openUrlWithBrowser(WindowsBrowser winBrowser,\n                                   String protocol,\n                                   String urlString)\n        throws BrowserLaunchingExecutionException", "code": "{\n    boolean success = false;\n    try {\n        logger.info(winBrowser.getBrowserDisplayName());\n        logger.info(urlString);\n        logger.info(protocol);\n        String args = getCommandArgs(\n                protocol,\n                winBrowser,\n                urlString,\n                forceNewWindow);\n        if (logger.isDebugEnabled()) {\n            logger.debug(args);\n        }\n        Process process = Runtime.getRuntime().exec(args);\n        // This avoids a memory leak on some versions of Java on Windows.\n        // That's hinted at in <http://developer.java.sun.com/developer/qow/archive/68/>.\n        process.waitFor();\n        // some browsers (mozilla, firefox) return 1 if you attempt to\n        // open a url and an instance of that browser is already running\n        // not clear why because the call is succeeding, ie the browser\n        // opens the url.\n        // If we don't say 1 is also a success, we get two browser\n        // windows or tabs opened to the url.\n        //\n        // We could make this check smarter in the future if we run\n        // into problems. the winBrowser object could handle the\n        // check to make it browser specific.\n        int exitValue = process.exitValue();\n        success = exitValue == 0 || exitValue == 1;\n    }\n    // Runtimes may throw InterruptedException\n    // want to catch every possible exception and wrap it\n    catch (Exception e) {\n        throw new BrowserLaunchingExecutionException(e);\n    }\n    return success;\n}", "path": "src\\edu\\stanford\\ejalbert\\launching\\windows\\WindowsBrowserLaunching.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * Returns the windows arguments for launching a default browser.\n *\n * @param protocol String\n * @param urlString String\n * @return String[]\n */\n", "func_signal": "private String[] getCommandArgs(String protocol,\n                                String urlString)", "code": "{\n    String commandArgs = LaunchingUtils.replaceArgs(\n            commandsDefaultBrowser,\n            null,\n            urlString);\n    return commandArgs.split(\"[ ]\");\n}", "path": "src\\edu\\stanford\\ejalbert\\launching\\windows\\WindowsBrowserLaunching.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * @deprecated\n * @param clazz Class\n * @return Logger\n */\n", "func_signal": "public static Logger getLogger(Class clazz)", "code": "{\n    if (clazz == null) {\n        throw new NullPointerException(\"parameter clazz must not be null\");\n    }\n    return getLogger(clazz.getName());\n}", "path": "src\\net\\sf\\wraplog\\Logger.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * Initializes the browser launcher from the windows config\n * file. It initializes the browsers to check list and\n * the command line args to use for version of windows\n * referenced by the windowsKey.\n *\n * @see windowsKey\n * @throws BrowserLaunchingInitializingException\n */\n", "func_signal": "public void initialize()\n        throws BrowserLaunchingInitializingException", "code": "{\n    try {\n        URL configUrl = getClass().getResource(CONFIGFILE_WINDOWS);\n        if (configUrl == null) {\n            throw new BrowserLaunchingInitializingException(\n                    \"unable to find config file: \" + CONFIGFILE_WINDOWS);\n        }\n        Properties configProps = new Properties();\n        configProps.load(configUrl.openStream());\n        // get sep char\n        String sepChar = configProps.getProperty(PROP_KEY_DELIMITER);\n        // load different types of browsers\n        Iterator keysIter = configProps.keySet().iterator();\n        while (keysIter.hasNext()) {\n            String key = (String) keysIter.next();\n            if (key.startsWith(PROP_KEY_BROWSER_PREFIX)) {\n                WindowsBrowser winBrowser = new WindowsBrowser(\n                        sepChar,\n                        configProps.getProperty(key));\n                browsersToCheck.add(winBrowser);\n            }\n        }\n        // load the type of windows based on the windows key\n        String windowsConfigStr = configProps.getProperty(\n                windowsKey,\n                null);\n        if (windowsConfigStr == null) {\n            throw new BrowserLaunchingInitializingException(\n                    windowsKey + \" is not a valid property\");\n        }\n        String[] winConfigItems = windowsConfigStr.split(sepChar);\n        commandsDefaultBrowser = winConfigItems[0];\n        commandsTargettedBrowser = winConfigItems[1];\n        Boolean boolVal = new Boolean(winConfigItems[2]);\n        useRegistry = boolVal.booleanValue();\n        // check for override of useRegistry from system prop\n        // need to explicitly check BOTH values to filter out\n        // invalid prop values\n        String propValue = System.getProperty(\n                IBrowserLaunching.WINDOWS_BROWSER_DISC_POLICY_PROPERTY,\n                null);\n        if (IBrowserLaunching.WINDOWS_BROWSER_DISC_POLICY_DISK.equals(\n                propValue)) {\n            useRegistry = false;\n        }\n        else if (IBrowserLaunching.WINDOWS_BROWSER_DISC_POLICY_REGISTRY.\n                 equals(propValue)) {\n            useRegistry = true;\n        }\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Browser discovery policy property value=\" +\n                         (propValue == null ? \"null\" : propValue));\n            logger.debug(\"useRegistry=\" + Boolean.toString(useRegistry));\n        }\n        // get info for checking Program Files folder\n        programFilesFolderTemplate = configProps.getProperty(\n                \"program.files.template\",\n                null);\n        driveLetters = configProps.getProperty(\n                \"drive.letters\",\n                null);\n        // set brwosersToCheck to a non-modifiable list\n        browsersToCheck = Collections.unmodifiableList(browsersToCheck);\n    }\n    catch (IOException ioex) {\n        throw new BrowserLaunchingInitializingException(ioex);\n    }\n}", "path": "src\\edu\\stanford\\ejalbert\\launching\\windows\\WindowsBrowserLaunching.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * Allows user to target several browsers. The names of\n * potential browsers can be accessed via the\n * {@link #getBrowserList() getBrowserList} method.\n * <p>\n * The browsers from the list will be tried in order\n * (first to last) until one of the calls succeeds. If\n * all the calls to the requested browsers fail, the code\n * will fail over to the default browser.\n *\n * @param browsers List\n * @param urlString String\n * @throws UnsupportedOperatingSystemException\n * @throws BrowserLaunchingExecutionException\n * @throws BrowserLaunchingInitializingException\n */\n", "func_signal": "public void openUrl(List browsers,\n                    String urlString)\n        throws UnsupportedOperatingSystemException,\n        BrowserLaunchingExecutionException,\n        BrowserLaunchingInitializingException", "code": "{\n    if (browsers == null || browsers.isEmpty()) {\n        logger.debug(\"falling through to non-targetted openUrl\");\n        openUrl(urlString);\n    }\n    else {\n        String protocol = null;\n        try {\n            protocol = getProtocol(urlString);\n        }\n        catch (MalformedURLException malrulex) {\n            throw new BrowserLaunchingExecutionException(malrulex);\n        }\n        Map browserMap = getBrowserMap();\n        boolean success = false;\n        Iterator iter = browsers.iterator();\n        while (iter.hasNext() && !success) {\n            WindowsBrowser winBrowser = (WindowsBrowser) browserMap.get(\n                    iter.next());\n            if (winBrowser != null) {\n                success = openUrlWithBrowser(winBrowser,\n                                             protocol,\n                                             urlString);\n            }\n        }\n        if (!success) {\n            logger.debug(\n                    \"none of listed browsers succeeded; falling through to non-targetted openUrl\");\n            openUrl(urlString);\n        }\n    }\n}", "path": "src\\edu\\stanford\\ejalbert\\launching\\windows\\WindowsBrowserLaunching.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * Returns a list of browsers to be used for browser targetting.\n * This list will always contain at least one item--the BROWSER_DEFAULT.\n *\n * @return List\n */\n", "func_signal": "public List getBrowserList()", "code": "{\n    List browserList = new ArrayList(1);\n    browserList.add(IBrowserLaunching.BROWSER_DEFAULT);\n    return browserList;\n}", "path": "src\\edu\\stanford\\ejalbert\\launching\\macos\\MacOs2_1BrowserLaunching.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * Opens a url using the default browser.\n *\n * @param urlString String\n * @throws UnsupportedOperatingSystemException\n * @throws BrowserLaunchingExecutionException\n * @throws BrowserLaunchingInitializingException\n */\n", "func_signal": "public void openUrl(String urlString)\n        throws UnsupportedOperatingSystemException,\n        BrowserLaunchingExecutionException,\n        BrowserLaunchingInitializingException", "code": "{\n    try {\n        logger.info(urlString);\n        String protocol = getProtocol(urlString);\n        logger.info(protocol);\n        // try the system prop first\n        boolean successfullSystemPropLaunch = false;\n        String browserName = System.getProperty(\n                IBrowserLaunching.BROWSER_SYSTEM_PROPERTY,\n                null);\n        if (browserName != null) {\n            Map browserMap = getBrowserMap();\n            WindowsBrowser winBrowser = (WindowsBrowser) browserMap.get(\n                    browserName);\n            if (winBrowser != null) {\n                logger.debug(\"using browser from system property\");\n                successfullSystemPropLaunch = openUrlWithBrowser(\n                        winBrowser,\n                        protocol,\n                        urlString);\n            }\n        }\n        if (!successfullSystemPropLaunch) {\n            String[] args = getCommandArgs(protocol,\n                                           urlString);\n            if (logger.isDebugEnabled()) {\n                logger.debug(getArrayAsString(args));\n            }\n            Process process = Runtime.getRuntime().exec(args);\n            // This avoids a memory leak on some versions of Java on Windows.\n            // That's hinted at in <http://developer.java.sun.com/developer/qow/archive/68/>.\n            process.waitFor();\n            process.exitValue();\n        }\n    }\n    catch (Exception e) {\n        logger.error(\"fatal exception\", e);\n        throw new BrowserLaunchingExecutionException(e);\n    }\n}", "path": "src\\edu\\stanford\\ejalbert\\launching\\windows\\WindowsBrowserLaunching.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * Returns a list of browsers to be used for browser targetting.\n * This list will always contain at least one item--the BROWSER_DEFAULT.\n *\n * @return List\n */\n", "func_signal": "public List getBrowserList()", "code": "{\n    List browserList = new ArrayList(1);\n    browserList.add(IBrowserLaunching.BROWSER_DEFAULT);\n    return browserList;\n}", "path": "src\\edu\\stanford\\ejalbert\\launching\\macos\\MacOs3_0BrowserLaunching.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * Returns the windows arguments for launching a specified browser.\n * <p>\n * Depending on the forceNewWindow boolean, the args may also contain the\n * args to force a new window.\n *\n * @param protocol String\n * @param winbrowser WindowsBrowser\n * @param urlString String\n * @param forceNewWindow boolean\n * @return String[]\n */\n", "func_signal": "private String getCommandArgs(String protocol,\n                              WindowsBrowser winbrowser,\n                              String urlString,\n                              boolean forceNewWindow)", "code": "{\n    String commandArgs = LaunchingUtils.replaceArgs(\n            commandsTargettedBrowser,\n            winbrowser.getBrowserApplicationName(),\n            urlString);\n    String args = \"\";\n    if (forceNewWindow) {\n        args = winbrowser.getForceNewWindowArgs();\n    }\n    commandArgs = commandArgs.replaceAll(\"<args>\", args);\n    int pathLoc = commandArgs.indexOf(\"<path>\");\n    if (pathLoc > 0) {\n        StringBuffer buf = new StringBuffer();\n        buf.append(commandArgs.substring(0, pathLoc));\n        buf.append(winbrowser.getPathToExe());\n        buf.append(commandArgs.substring(pathLoc + 6));\n        commandArgs = buf.toString();\n    }\n    return commandArgs; //.split(\"[ ]\");\n}", "path": "src\\edu\\stanford\\ejalbert\\launching\\windows\\WindowsBrowserLaunching.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * Opens a url using a specific browser.\n * <p>\n * If the specified browser is not available, the method will\n * fall through to calling the default openUrl method.\n *\n * @param browser String\n * @param urlString String\n * @throws UnsupportedOperatingSystemException\n * @throws BrowserLaunchingExecutionException\n * @throws BrowserLaunchingInitializingException\n */\n", "func_signal": "public void openUrl(String browser,\n                    String urlString)\n        throws UnsupportedOperatingSystemException,\n        BrowserLaunchingExecutionException,\n        BrowserLaunchingInitializingException", "code": "{\n    if (IBrowserLaunching.BROWSER_DEFAULT.equals(browser) ||\n        browser == null) {\n        logger.info(\n                \"default or null browser target; falling through to non-targetted openUrl\");\n        openUrl(urlString);\n    }\n    else {\n        Map browserMap = getBrowserMap();\n        WindowsBrowser winBrowser = (WindowsBrowser) browserMap.get(browser);\n        if (winBrowser == null) {\n            logger.info(\"the available browsers list does not contain: \" +\n                        browser);\n            logger.info(\"falling through to non-targetted openUrl\");\n            openUrl(urlString);\n        }\n        else {\n            String protocol = null;\n            try {\n                protocol = getProtocol(urlString);\n            }\n            catch (MalformedURLException malrulex) {\n                throw new BrowserLaunchingExecutionException(malrulex);\n            }\n            boolean successfullLaunch = openUrlWithBrowser(\n                    winBrowser,\n                    protocol,\n                    urlString);\n            if (!successfullLaunch) {\n                logger.debug(\"falling through to non-targetted openUrl\");\n                openUrl(urlString);\n            }\n        }\n    }\n}", "path": "src\\edu\\stanford\\ejalbert\\launching\\windows\\WindowsBrowserLaunching.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * Provided that <code>getLevel()</code> accepts it, log\n * <code>message</code> and <code>error</code>. Otherwise, do nothing.\n */\n", "func_signal": "public void log(int logLevel, String message, Throwable error)", "code": "{\n    if (isEnabled(logLevel)) {\n        try {\n            reallyLog(logLevel, message, error);\n            loggedMessageCount += 1;\n        }\n        catch (Exception error2) {\n            throw new LoggingException(\"cannot log message: \" + message,\n                                       error2);\n        }\n    }\n}", "path": "src\\net\\sf\\wraplog\\AbstractLogger.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * Use program files folder template from properties file and\n * the list of drive letters from that properties file\n * @return File\n */\n", "func_signal": "private File getProgramFilesPath()", "code": "{\n    File progFilesPath = null;\n    if (driveLetters != null && programFilesFolderTemplate != null) {\n        String[] drives = driveLetters.split(\";\");\n        for (int idx = 0; idx < drives.length && progFilesPath == null; idx++) {\n            String path = MessageFormat.format(\n                    programFilesFolderTemplate,\n                    new Object[] {drives[idx]});\n            File pfPath = new File(path);\n            logger.debug(path);\n            logger.debug(pfPath.getPath());\n            if (pfPath.exists()) {\n                progFilesPath = pfPath;\n            }\n        }\n    }\n    return progFilesPath;\n}", "path": "src\\edu\\stanford\\ejalbert\\launching\\windows\\WindowsBrowserLaunching.java", "repo_name": "idega/com.idega.app.eplatform", "stars": 6, "license": "gpl-3.0", "language": "java", "size": 720}
{"docstring": "/**\n * The main NGSession loop.  This gets the next socket to process, runs\n * the nail for the socket, and loops until shut down.\n */\n", "func_signal": "public void run()", "code": "{\n\n\tupdateThreadName(null);\n\t\n\tSocket socket = nextSocket();\n\twhile (socket != null) {\n\t\ttry {\n\t\t\t// buffer for reading headers\n\t\t\tbyte[] lbuf = new byte[5];\n\t\t\tjava.io.DataInputStream sockin = new java.io.DataInputStream(socket.getInputStream());\n\t\t\tjava.io.OutputStream sockout = socket.getOutputStream();\n\n\t\t\t// client info - command line arguments and environment\n\t\t\tList remoteArgs = new java.util.ArrayList();\n\t\t\tProperties remoteEnv = new Properties();\n\t\t\t\n\t\t\tString cwd = null;\t\t\t// working directory\n\t\t\tString command = null;\t\t// alias or class name\n\t\t\t\n\t\t\t// read everything from the client up to and including the command\n\t\t\twhile (command == null) {\n\t\t\t\tsockin.readFully(lbuf);\n\t\t\t\tlong bytesToRead = LongUtils.fromArray(lbuf, 0);\n\t\t\t\tchar chunkType = (char) lbuf[4];\n\t\t\t\t\n\t\t\t\tbyte[] b = new byte[(int) bytesToRead];\n\t\t\t\tsockin.readFully(b);\n\t\t\t\tString line = new String(b, \"US-ASCII\");\n\n\t\t\t\tswitch(chunkType) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\tcase NGConstants.CHUNKTYPE_ARGUMENT:\n\t\t\t\t\t\t\t\t//\tcommand line argument\n\t\t\t\t\t\t\t\tremoteArgs.add(line);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase NGConstants.CHUNKTYPE_ENVIRONMENT:\n\t\t\t\t\t\t\t\t//\tparse environment into property\n\t\t\t\t\t\t\t\tint equalsIndex = line.indexOf('=');\n\t\t\t\t\t\t\t\tif (equalsIndex > 0) {\n\t\t\t\t\t\t\t\t\tremoteEnv.setProperty(\n\t\t\t\t\t\t\t\t\t\t\tline.substring(0, equalsIndex),\n\t\t\t\t\t\t\t\t\t\t\tline.substring(equalsIndex + 1));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tString key = line.substring(0, equalsIndex);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\tcase NGConstants.CHUNKTYPE_COMMAND:\n\t\t\t\t\t\t\t\t// \tcommand (alias or classname)\n\t\t\t\t\t\t\t\tcommand = line;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\tcase NGConstants.CHUNKTYPE_WORKINGDIRECTORY:\n\t\t\t\t\t\t\t\t//\tclient working directory\n\t\t\t\t\t\t\t\tcwd = line;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\tdefault:\t// freakout?\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdateThreadName(socket.getInetAddress().getHostAddress() + \": \" + command);\n\t\t\t\n\t\t\t// can't create NGInputStream until we've received a command, because at\n\t\t\t// that point the stream from the client will only include stdin and stdin-eof\n\t\t\t// chunks\n\t\t\tInputStream in = new NGInputStream(sockin);\n\t\t\tPrintStream out = new PrintStream(new NGOutputStream(sockout, NGConstants.CHUNKTYPE_STDOUT));\n\t\t\tPrintStream err = new PrintStream(new NGOutputStream(sockout, NGConstants.CHUNKTYPE_STDERR));\n\t\t\tPrintStream exit = new PrintStream(new NGOutputStream(sockout, NGConstants.CHUNKTYPE_EXIT));\n\n\t\t\t// ThreadLocal streams for System.in/out/err redirection\n\t\t\t((ThreadLocalInputStream) System.in).init(in);\n\t\t\t((ThreadLocalPrintStream) System.out).init(out);\n\t\t\t((ThreadLocalPrintStream) System.err).init(err);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tAlias alias = server.getAliasManager().getAlias(command);\n\t\t\t\tClass cmdclass = null;\n\t\t\t\tif (alias != null) {\n\t\t\t\t\tcmdclass = alias.getAliasedClass();\n\t\t\t\t} else if (server.allowsNailsByClassName()) {\n\t\t\t\t\tcmdclass = Class.forName(command);\n\t\t\t\t} else {\n\t\t\t\t\tcmdclass = server.getDefaultNailClass();\n\t\t\t\t}\n\n\t\t\t\tObject[] methodArgs = new Object[1];\n\t\t\t\tMethod mainMethod = null; // will be either main(String[]) or nailMain(NGContext)\n\t\t\t\tString[] cmdlineArgs = (String[]) remoteArgs.toArray(new String[remoteArgs.size()]);\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tmainMethod = cmdclass.getMethod(\"nailMain\", nailMainSignature);\n\t\t\t\t\tNGContext context = new NGContext();\n\t\t\t\t\tcontext.setArgs(cmdlineArgs);\n\t\t\t\t\tcontext.in = in;\n\t\t\t\t\tcontext.out = out;\n\t\t\t\t\tcontext.err = err;\n\t\t\t\t\tcontext.setCommand(command);\n\t\t\t\t\tcontext.setExitStream(exit);\n\t\t\t\t\tcontext.setNGServer(server);\n\t\t\t\t\tcontext.setEnv(remoteEnv);\n\t\t\t\t\tcontext.setInetAddress(socket.getInetAddress());\n\t\t\t\t\tcontext.setPort(socket.getPort());\n\t\t\t\t\tcontext.setWorkingDirectory(cwd);\n\t\t\t\t\tmethodArgs[0] = context;\n\t\t\t\t} catch (NoSuchMethodException toDiscard) {\n\t\t\t\t\t// that's ok - we'll just try main(String[]) next.\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (mainMethod == null) {\n\t\t\t\t\tmainMethod = cmdclass.getMethod(\"main\", mainSignature);\n\t\t\t\t\tmethodArgs[0] = cmdlineArgs;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (mainMethod != null) {\n\t\t\t\t\tserver.nailStarted(cmdclass);\n                        NGSecurityManager.setExit(exit);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tmainMethod.invoke(null, methodArgs);\n\t\t\t\t\t} catch (InvocationTargetException ite) {\n\t\t\t\t\t\tthrow(ite.getCause());\n\t\t\t\t\t} catch (Throwable t) {\n\t\t\t\t\t\tthrow(t);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tserver.nailFinished(cmdclass);\n\t\t\t\t\t}\n\t\t\t\t\texit.println(0);\n\t\t\t\t}\n\n\t\t\t} catch (ExitException exitEx) {\n                    exit.println(exitEx.getStatus());\n                    server.out.println(Thread.currentThread().getName() + \" exited with status \" + exitEx.getStatus());\n\t\t\t} catch (Throwable t) {\n\t\t\t\tt.printStackTrace();\n\t\t\t\texit.println(NGConstants.EXIT_EXCEPTION); // remote exception constant\n\t\t\t}\n\t\t\t\n\t\t\tsocket.close();\n\n\t\t} catch (Throwable t) {\n\t\t\tt.printStackTrace();\n\t\t}\n\n\t\t((ThreadLocalInputStream) System.in).init(null);\n\t\t((ThreadLocalPrintStream) System.out).init(null);\n\t\t((ThreadLocalPrintStream) System.err).init(null);\n\t\t\n\t\tupdateThreadName(null);\n\t\tsessionPool.give(this);\n\t\tsocket = nextSocket();\n\t}\n\n//\t\tserver.out.println(\"Shutdown NGSession \" + instanceNumber);\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\NGSession.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Removes the Alias with the specified name from the AliasManager.\n * If no such Alias exists in this AliasManager, this method has no effect.\n * @param aliasName the name of the Alias to remove\n */\n", "func_signal": "public void removeAlias(String aliasName)", "code": "{\n\tsynchronized (aliases) {\n\t\taliases.remove(aliasName);\n\t}\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\AliasManager.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Returns the current NailStats object for the specified class, creating\n * a new one if necessary\n * @param nailClass the class for which we're gathering stats\n * @return a NailStats object for the specified class\n */\n", "func_signal": "private NailStats getOrCreateStatsFor(Class nailClass)", "code": "{\n\tNailStats result = null;\n\tsynchronized(allNailStats) {\n\t\tresult = (NailStats) allNailStats.get(nailClass);\n\t\tif (result == null) {\n\t\t\tresult = new NailStats(nailClass);\n\t\t\tallNailStats.put(nailClass, result);\n\t\t}\n\t}\n\treturn (result);\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\NGServer.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Sets up the NGServer internals\n * @param addr the InetAddress to bind to\n * @param port the port on which to listen\n */\n", "func_signal": "private void init(InetAddress addr, int port)", "code": "{\n\tthis.addr = addr;\n\tthis.port = port;\n\t\n\tthis.aliasManager = new AliasManager();\n\tallNailStats = new java.util.HashMap();\n\t// allow a maximum of 10 idle threads.  probably too high a number\n\t// and definitely should be configurable in the future\n\tsessionPool = new NGSessionPool(this, 10);\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\NGServer.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Adds an Alias, replacing any previous entries with the\n * same name.\n * @param alias the Alias to add\n */\n", "func_signal": "public void addAlias(Alias alias)", "code": "{\n\tsynchronized (aliases) {\n\t\taliases.put(alias.getName(), alias);\n\t}\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\AliasManager.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * <p>Shuts down the server.  The server will stop listening\n * and its thread will finish.  Any running nails will be allowed\n * to finish.</p>\n * \n * <p>Any nails that provide a\n * <pre><code>public static void nailShutdown(NGServer)</code></pre>\n * method will have this method called with this NGServer as its sole\n * parameter.</p>\n * \n * @param exitVM if true, this method will also exit the JVM after\n * calling nailShutdown() on any nails.  This may prevent currently\n * running nails from exiting gracefully, but may be necessary in order\n * to perform some tasks, such as shutting down any AWT or Swing threads\n * implicitly launched by your nails.\n */\n", "func_signal": "public void shutdown(boolean exitVM)", "code": "{\n\tsynchronized(this) {\n\t\tif (shutdown) return;\n\t\tshutdown = true;\n\t}\n\t\n\ttry {\n\t\tserversocket.close();\n\t} catch (Throwable toDiscard) {}\n\t\n\tsessionPool.shutdown();\n\t\n\tClass[] argTypes = new Class[1];\n\targTypes[0] = NGServer.class;\n\tObject[] argValues = new Object[1];\n\targValues[0] = this;\n\t\n\t// make sure that all aliased classes have associated nailstats\n\t// so they can be shut down.\n\tfor (Iterator i = getAliasManager().getAliases().iterator(); i.hasNext();) {\n\t\tAlias alias = (Alias) i.next();\n\t\tgetOrCreateStatsFor(alias.getAliasedClass());\n\t}\n\t\n\tsynchronized(allNailStats) {\n\t\tfor (Iterator i = allNailStats.values().iterator(); i.hasNext();) {\n\t\t\tNailStats ns = (NailStats) i.next();\n\t\t\tClass nailClass = ns.getNailClass();\n\t\t\t\n\t\t\t// yes, I know this is lazy, relying upon the exception\n\t\t\t// to handle the case of no nailShutdown method.\n\t\t\ttry {\n\t\t\t\tMethod nailShutdown = nailClass.getMethod(\"nailShutdown\", argTypes);\n\t\t\t\tnailShutdown.invoke(null, argValues);\n\t\t\t} catch (Throwable toDiscard) {}\n\t\t}\n\t}\n\t\n\t// restore system streams\n\tSystem.setIn(in);\n\tSystem.setOut(out);\n\tSystem.setErr(err);\n\t\n\tSystem.setSecurityManager(originalSecurityManager);\n\t\n\tif (exitVM) {\n\t\tSystem.exit(0);\n\t}\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\NGServer.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Creates a new Alias with the specified properties.\n * @param name the alias name (short command)\n * @param description a description of the command\n * @param clazz the class implementing the command\n */\n", "func_signal": "public Alias(String name, String description, Class clazz)", "code": "{\n\tif (name == null) throw (new IllegalArgumentException(\"Alias must have a name.\"));\n\tthis.name = name.trim();\n\tif (this.name.length() == 0) throw (new IllegalArgumentException(\"Alias must have a name.\"));\n\t\n\tif (clazz == null) throw (new IllegalArgumentException(\"Alias must have an associated class.\"));\n\tthis.description = description;\n\tthis.clazz = clazz;\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\Alias.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Listens for new connections and launches NGSession threads\n * to process them.\n */\n", "func_signal": "public void run()", "code": "{\n\trunning = true;\n\tNGSession sessionOnDeck = null;\n\t\n\toriginalSecurityManager = System.getSecurityManager();\n        System.setSecurityManager(\n                new NGSecurityManager(\n                        originalSecurityManager));\n  \n\n\tsynchronized(System.in) {\n\t\tif (!(System.in instanceof ThreadLocalInputStream)) {\n\t\t\tSystem.setIn(new ThreadLocalInputStream(in));\n\t\t\tSystem.setOut(new ThreadLocalPrintStream(out));\n\t\t\tSystem.setErr(new ThreadLocalPrintStream(err));\t\t\t\t\n\t\t}\n\t}\n\t\n\ttry {\n\t\tif (addr == null) {\n\t\t\tserversocket = new ServerSocket(port);\n\t\t} else {\n\t\t\tserversocket = new ServerSocket(port, 0, addr);\n\t\t}\n\t\t\n\t\twhile (!shutdown) {\n\t\t\tsessionOnDeck = sessionPool.take();\n\t\t\tSocket socket = serversocket.accept();\n\t\t\tsessionOnDeck.run(socket);\n\t\t}\n\n\t} catch (Throwable t) {\n\t\t// if shutdown is called while the accept() method is blocking,\n\t\t// an exception will be thrown that we don't care about.  filter\n\t\t// those out.\n\t\tif (!shutdown) {\n\t\t\tt.printStackTrace();\n\t\t}\n\t}\n\tif (sessionOnDeck != null) {\n\t\tsessionOnDeck.shutdown();\n\t}\n\trunning = false;\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\NGServer.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Loads Aliases from a java.util.Properties file located at the\n * specified URL.  The properties must be of the form:\n * <pre><code>[alias name]=[fully qualified classname]</code></pre>\n * each of which may have an optional\n * <pre><code>[alias name].desc=[alias description]</code></pre>\n * \n * For example, to create an alias called \"<code>myprog</code>\" for\n * class <code>com.mydomain.myapp.MyProg</code>, the following properties\n * would be defined:\n * \n * <pre><code>myprog=com.mydomain.myapp.MyProg\n *myprog.desc=Runs my program.\n * </code></pre>\n * @param properties the Properties to load.\n */\n", "func_signal": "public void loadFromProperties(java.util.Properties properties)", "code": "{\n\tfor (Iterator i = properties.keySet().iterator(); i.hasNext();) {\n\t\tString key = (String) i.next();\n\t\tif (!key.endsWith(\".desc\")) {\n\t\t\ttry {\n\t\t\t\tClass clazz = Class.forName(properties.getProperty(key));\n\t\t\t\tString desc = properties.getProperty(key + \".desc\", \"\");\n\t\t\t\taddAlias(new Alias(key, desc, clazz));\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tSystem.err.println(\"Unable to locate class \" + properties.getProperty(key));\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\AliasManager.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Adds the specified URL (for a jar or a directory) to the System\n * ClassLoader.  This code was written by antony_miguel and posted on\n * http://forum.java.sun.com/thread.jsp?forum=32&thread=300557&message=1191210\n * I assume it has been placed in the public domain.\n * \n * @param url the URL of the resource (directory or jar) to add to the\n * System classpath \n * @throws Exception if anything goes wrong.  The most likely culprit, should\n * this ever arise, would be that your VM is not using a URLClassLoader as the\n * System ClassLoader.  This would result in a ClassClastException that you\n * probably can't do much about.\n */\n", "func_signal": "private static void addToSystemClassLoader(URL url) throws Exception", "code": "{\n\tURLClassLoader sysloader = (URLClassLoader) ClassLoader.getSystemClassLoader();\n\tClass sysclass = URLClassLoader.class;\n\n\tjava.lang.reflect.Method method = sysclass.getDeclaredMethod(\"addURL\", new Class[] {URL.class});\n\tmethod.setAccessible(true);\n\tmethod.invoke(sysloader, new Object[]{url});\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\builtins\\NGClasspath.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Returns a snapshot of this NGServer's nail statistics.  The result is a <code>java.util.Map</code>,\n * keyed by class name, with <a href=\"NailStats.html\">NailStats</a> objects as values.\n * \n * @return a snapshot of this NGServer's nail statistics.\n */\n", "func_signal": "public Map getNailStats()", "code": "{\n\tMap result = new java.util.TreeMap();\n\tsynchronized(allNailStats) {\n\t\tfor (Iterator i = allNailStats.keySet().iterator(); i.hasNext();) {\n\t\t\tClass nailclass = (Class) i.next();\n\t\t\tresult.put(nailclass.getName(), ((NailStats) allNailStats.get(nailclass)).clone());\n\t\t}\n\t}\n\treturn (result);\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\NGServer.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Instructs this NGSession to process the specified socket, after which\n * this NGSession will return itself to the pool from which it came.\n * @param socket the socket (connected to a client) to process\n */\n", "func_signal": "public void run(Socket socket)", "code": "{\n\tsynchronized(lock) {\n\t\tnextSocket = socket;\n\t\tlock.notify();\n\t}\n\tThread.yield();\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\NGSession.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Constructs an exit exception.\n * @param status the status code returned via System.exit()\n */\n", "func_signal": "public ExitException(int status)", "code": "{\n    super(\"ExitException: status \" + status);\n    this.status = status;\n}", "path": "src\\main\\java\\org\\apache\\tools\\ant\\ExitException.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Throws a <code>java.lang.SecurityException</code> if the client is not\n * connected from the local machine.\n */\n", "func_signal": "public void assertLocalClient()", "code": "{\n\tNetworkInterface iface = null;\n\ttry {\n\t\tiface = NetworkInterface.getByInetAddress(getInetAddress());\n\t} catch (java.net.SocketException se) {\n\t\tthrow (new SecurityException(\"Unable to determine if client is local.  Assuming he isn't.\"));\n\t}\n\t\n\tif ((iface == null) && (!getInetAddress().isLoopbackAddress())) {\n\t\tthrow (new SecurityException(\"Client is not local.\"));\n\t}\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\NGContext.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Constructs an exit exception.\n * @param msg the message to be displayed.\n * @param status the status code returned via System.exit()\n */\n", "func_signal": "public ExitException(String msg, int status)", "code": "{\n    super(msg);\n    this.status = status;\n}", "path": "src\\main\\java\\org\\apache\\tools\\ant\\ExitException.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Returns true iff the specified <code>NailStats</code> object\n * is tracking the same class.\n * @param o the NailStats object to check\n * @return true iff the specified <code>NailStats</code> object\n * is tracking the same class.\n */\n", "func_signal": "public boolean equals(Object o)", "code": "{\n\tNailStats other = (NailStats) o;\n\treturn (nailclass.equals(other.nailclass));\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\NailStats.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Creates and starts a new <code>NGServer</code>.  A single optional\n * argument is valid, specifying the port on which this <code>NGServer</code>\n * should listen.  If omitted, <code>NGServer.DEFAULT_PORT</code> will be used.\n * @param args a single optional argument specifying the port on which to listen.\n * @throws NumberFormatException if a non-numeric port is specified\n */\n", "func_signal": "public static void main(String[] args) throws NumberFormatException, UnknownHostException", "code": "{\n\n\tif (args.length > 1) {\n\t\tusage();\n\t\treturn;\n\t}\n\n\t// null server address means bind to everything local\n\tInetAddress serverAddress = null;\n\tint port = NGConstants.DEFAULT_PORT;\n\t\n\t// parse the sole command line parameter, which\n\t// may be an inetaddress to bind to, a port number,\n\t// or an inetaddress followed by a port, separated\n\t// by a colon\n\tif (args.length != 0) {\n\t\tString[] argParts = args[0].split(\":\");\n\t\tString addrPart = null;\n\t\tString portPart = null;\n\t\tif (argParts.length == 2) {\n\t\t\taddrPart = argParts[0];\n\t\t\tportPart = argParts[1];\n\t\t} else if (argParts[0].indexOf('.') >= 0) {\n\t\t\taddrPart = argParts[0];\n\t\t} else {\n\t\t\tportPart = argParts[0];\n\t\t}\n\t\tif (addrPart != null) {\n\t\t\tserverAddress = InetAddress.getByName(addrPart);\n\t\t}\n\t\tif (portPart != null) {\n\t\t\tport = Integer.parseInt(portPart);\n\t\t}\n\t}\n\n\tNGServer server = new NGServer(serverAddress, port);\n\tThread t = new Thread(server);\n\tt.setName(\"NGServer(\" + serverAddress + \", \" + port + \")\");\n\tt.start();\n\n\tRuntime.getRuntime().addShutdownHook(new NGServerShutdowner(server));\n\t\n\t// if the port is 0, it will be automatically determined.\n\t// add this little wait so the ServerSocket can fully\n\t// initialize and we can see what port it chose.\n\tint runningPort = server.getPort();\n\twhile (runningPort == 0) {\n\t\ttry { Thread.sleep(50); } catch (Throwable toIgnore) {}\n\t\trunningPort = server.getPort();\n\t}\n\t\n\tSystem.out.println(\"NGServer started on \"\n\t\t\t\t\t\t+ ((serverAddress == null) \n\t\t\t\t\t\t\t? \"all interfaces\" \n\t\t\t\t\t\t\t: serverAddress.getHostAddress())\n\t                    + \", port \" \n\t\t\t\t\t\t+ runningPort \n\t\t\t\t\t\t+ \".\");\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\NGServer.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Creates a new AliasManager, populating it with\n * default Aliases.\n */\n", "func_signal": "public AliasManager()", "code": "{\n\taliases = new java.util.HashMap();\n\t\n\ttry {\n\t\tProperties props = new Properties();\n\t\tprops.load(getClass().getClassLoader().getResourceAsStream(\"com/martiansoftware/nailgun/builtins/builtins.properties\"));\n\t\tloadFromProperties(props);\n\t} catch (java.io.IOException e) {\n\t\tSystem.err.println(\"Unable to load builtins.properties: \" + e.getMessage());\n\t}\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\AliasManager.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Returns the next socket to process.  This will block the NGSession\n * thread until there's a socket to process or the NGSession has been\n * shut down.\n * \n * @return the next socket to process, or <code>null</code> if the NGSession\n * has been shut down.\n */\n", "func_signal": "private Socket nextSocket()", "code": "{\n\tSocket result = null;\n\tsynchronized(lock) {\n\t\tresult = nextSocket;\n\t\twhile (!done && result == null) {\n\t\t\ttry {\n\t\t\t\tlock.wait();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\tdone = true;\n\t\t\t}\n\t\t\tresult = nextSocket;\n\t\t}\n\t\tnextSocket = null;\n\t}\n\treturn (result);\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\NGSession.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/**\n * Returns a Set that is a snapshot of the Alias list.\n * Modifications to this Set will not impact the AliasManager\n * in any way.\n * @return a Set that is a snapshot of the Alias list.\n */\n", "func_signal": "public Set getAliases()", "code": "{\n\tSet result = new java.util.TreeSet();\n\tsynchronized(aliases) {\n\t\tresult.addAll(aliases.values());\n\t}\n\treturn (result);\n}", "path": "src\\main\\java\\com\\martiansoftware\\nailgun\\AliasManager.java", "repo_name": "catharinejm/vimclojure", "stars": 6, "license": "mit", "language": "java", "size": 1490}
{"docstring": "/*\n http://www.adobe.com/devnet/opentype/archives/glyphlist.txt\n # ###################################################################################\n # Copyright (c) 1997,1998,2002,2007 Adobe Systems Incorporated\n # \n # Permission is hereby granted, free of charge, to any person obtaining a\n # copy of this documentation file to use, copy, publish, distribute,\n # sublicense, and/or sell copies of the documentation, and to permit\n # others to do the same, provided that:\n # - No modification, editing or other alteration of this document is\n # allowed, new Character((char)0x and\n # - The above copyright notice and this permission notice shall be\n # included in all copies of the documentation.\n # \n # Permission is hereby granted, free of charge, to any person obtaining a\n # copy of this documentation file, to create their own derivative works\n # from the content of this document to use, copy, publish, distribute,\n # sublicense, and/or sell the derivative works, and to permit others to do\n # the same, provided that the derived work is not represented as being a\n # copy or version of this document.\n # \n # Adobe shall not be liable to any party for any loss of revenue or profit\n # or for indirect, incidental, special, consequential, or other similar\n # damages, whether based on tort (including without limitation negligence\n # or strict liability), contract or other legal or equitable grounds even\n # if Adobe has been advised or had reason to know of the possibility of\n # such damages. The Adobe materials are provided on an \"AS IS\" basis.\n # Adobe specifically disclaims all express, statutory, or implied\n # warranties relating to the Adobe materials, including but not limited to\n # those concerning merchantability or fitness for a particular purpose or\n # non-infringement of any third party rights regarding the Adobe\n # materials.\n # ###################################################################################\n # Name:          Adobe Glyph List\n # Table version: 2.0\n # Date:          September 20, 2002\n #\n # See http://partners.adobe.com/asn/developer/typeforum/unicodegn.html\n #\n # Format: Semicolon-delimited fields:\n #            (1) glyph name\n #            (2) Unicode scalar value\n */\n", "func_signal": "private static void initAI()", "code": "{\n\tlist.put(\"A\", new Character((char) 0x0041));\n\tlist.put(\"AE\", new Character((char) 0x00C6));\n\tlist.put(\"AEacute\", new Character((char) 0x01FC));\n\tlist.put(\"AEmacron\", new Character((char) 0x01E2));\n\tlist.put(\"AEsmall\", new Character((char) 0xF7E6));\n\tlist.put(\"Aacute\", new Character((char) 0x00C1));\n\tlist.put(\"Aacutesmall\", new Character((char) 0xF7E1));\n\tlist.put(\"Abreve\", new Character((char) 0x0102));\n\tlist.put(\"Abreveacute\", new Character((char) 0x1EAE));\n\tlist.put(\"Abrevecyrillic\", new Character((char) 0x04D0));\n\tlist.put(\"Abrevedotbelow\", new Character((char) 0x1EB6));\n\tlist.put(\"Abrevegrave\", new Character((char) 0x1EB0));\n\tlist.put(\"Abrevehookabove\", new Character((char) 0x1EB2));\n\tlist.put(\"Abrevetilde\", new Character((char) 0x1EB4));\n\tlist.put(\"Acaron\", new Character((char) 0x01CD));\n\tlist.put(\"Acircle\", new Character((char) 0x24B6));\n\tlist.put(\"Acircumflex\", new Character((char) 0x00C2));\n\tlist.put(\"Acircumflexacute\", new Character((char) 0x1EA4));\n\tlist.put(\"Acircumflexdotbelow\", new Character((char) 0x1EAC));\n\tlist.put(\"Acircumflexgrave\", new Character((char) 0x1EA6));\n\tlist.put(\"Acircumflexhookabove\", new Character((char) 0x1EA8));\n\tlist.put(\"Acircumflexsmall\", new Character((char) 0xF7E2));\n\tlist.put(\"Acircumflextilde\", new Character((char) 0x1EAA));\n\tlist.put(\"Acute\", new Character((char) 0xF6C9));\n\tlist.put(\"Acutesmall\", new Character((char) 0xF7B4));\n\tlist.put(\"Acyrillic\", new Character((char) 0x0410));\n\tlist.put(\"Adblgrave\", new Character((char) 0x0200));\n\tlist.put(\"Adieresis\", new Character((char) 0x00C4));\n\tlist.put(\"Adieresiscyrillic\", new Character((char) 0x04D2));\n\tlist.put(\"Adieresismacron\", new Character((char) 0x01DE));\n\tlist.put(\"Adieresissmall\", new Character((char) 0xF7E4));\n\tlist.put(\"Adotbelow\", new Character((char) 0x1EA0));\n\tlist.put(\"Adotmacron\", new Character((char) 0x01E0));\n\tlist.put(\"Agrave\", new Character((char) 0x00C0));\n\tlist.put(\"Agravesmall\", new Character((char) 0xF7E0));\n\tlist.put(\"Ahookabove\", new Character((char) 0x1EA2));\n\tlist.put(\"Aiecyrillic\", new Character((char) 0x04D4));\n\tlist.put(\"Ainvertedbreve\", new Character((char) 0x0202));\n\tlist.put(\"Alpha\", new Character((char) 0x0391));\n\tlist.put(\"Alphatonos\", new Character((char) 0x0386));\n\tlist.put(\"Amacron\", new Character((char) 0x0100));\n\tlist.put(\"Amonospace\", new Character((char) 0xFF21));\n\tlist.put(\"Aogonek\", new Character((char) 0x0104));\n\tlist.put(\"Aring\", new Character((char) 0x00C5));\n\tlist.put(\"Aringacute\", new Character((char) 0x01FA));\n\tlist.put(\"Aringbelow\", new Character((char) 0x1E00));\n\tlist.put(\"Aringsmall\", new Character((char) 0xF7E5));\n\tlist.put(\"Asmall\", new Character((char) 0xF761));\n\tlist.put(\"Atilde\", new Character((char) 0x00C3));\n\tlist.put(\"Atildesmall\", new Character((char) 0xF7E3));\n\tlist.put(\"Aybarmenian\", new Character((char) 0x0531));\n\tlist.put(\"B\", new Character((char) 0x0042));\n\tlist.put(\"Bcircle\", new Character((char) 0x24B7));\n\tlist.put(\"Bdotaccent\", new Character((char) 0x1E02));\n\tlist.put(\"Bdotbelow\", new Character((char) 0x1E04));\n\tlist.put(\"Becyrillic\", new Character((char) 0x0411));\n\tlist.put(\"Benarmenian\", new Character((char) 0x0532));\n\tlist.put(\"Beta\", new Character((char) 0x0392));\n\tlist.put(\"Bhook\", new Character((char) 0x0181));\n\tlist.put(\"Blinebelow\", new Character((char) 0x1E06));\n\tlist.put(\"Bmonospace\", new Character((char) 0xFF22));\n\tlist.put(\"Brevesmall\", new Character((char) 0xF6F4));\n\tlist.put(\"Bsmall\", new Character((char) 0xF762));\n\tlist.put(\"Btopbar\", new Character((char) 0x0182));\n\tlist.put(\"C\", new Character((char) 0x0043));\n\tlist.put(\"Caarmenian\", new Character((char) 0x053E));\n\tlist.put(\"Cacute\", new Character((char) 0x0106));\n\tlist.put(\"Caron\", new Character((char) 0xF6CA));\n\tlist.put(\"Caronsmall\", new Character((char) 0xF6F5));\n\tlist.put(\"Ccaron\", new Character((char) 0x010C));\n\tlist.put(\"Ccedilla\", new Character((char) 0x00C7));\n\tlist.put(\"Ccedillaacute\", new Character((char) 0x1E08));\n\tlist.put(\"Ccedillasmall\", new Character((char) 0xF7E7));\n\tlist.put(\"Ccircle\", new Character((char) 0x24B8));\n\tlist.put(\"Ccircumflex\", new Character((char) 0x0108));\n\tlist.put(\"Cdot\", new Character((char) 0x010A));\n\tlist.put(\"Cdotaccent\", new Character((char) 0x010A));\n\tlist.put(\"Cedillasmall\", new Character((char) 0xF7B8));\n\tlist.put(\"Chaarmenian\", new Character((char) 0x0549));\n\tlist.put(\"Cheabkhasiancyrillic\", new Character((char) 0x04BC));\n\tlist.put(\"Checyrillic\", new Character((char) 0x0427));\n\tlist.put(\"Chedescenderabkhasiancyrillic\", new Character((char) 0x04BE));\n\tlist.put(\"Chedescendercyrillic\", new Character((char) 0x04B6));\n\tlist.put(\"Chedieresiscyrillic\", new Character((char) 0x04F4));\n\tlist.put(\"Cheharmenian\", new Character((char) 0x0543));\n\tlist.put(\"Chekhakassiancyrillic\", new Character((char) 0x04CB));\n\tlist.put(\"Cheverticalstrokecyrillic\", new Character((char) 0x04B8));\n\tlist.put(\"Chi\", new Character((char) 0x03A7));\n\tlist.put(\"Chook\", new Character((char) 0x0187));\n\tlist.put(\"Circumflexsmall\", new Character((char) 0xF6F6));\n\tlist.put(\"Cmonospace\", new Character((char) 0xFF23));\n\tlist.put(\"Coarmenian\", new Character((char) 0x0551));\n\tlist.put(\"Csmall\", new Character((char) 0xF763));\n\tlist.put(\"D\", new Character((char) 0x0044));\n\tlist.put(\"DZ\", new Character((char) 0x01F1));\n\tlist.put(\"DZcaron\", new Character((char) 0x01C4));\n\tlist.put(\"Daarmenian\", new Character((char) 0x0534));\n\tlist.put(\"Dafrican\", new Character((char) 0x0189));\n\tlist.put(\"Dcaron\", new Character((char) 0x010E));\n\tlist.put(\"Dcedilla\", new Character((char) 0x1E10));\n\tlist.put(\"Dcircle\", new Character((char) 0x24B9));\n\tlist.put(\"Dcircumflexbelow\", new Character((char) 0x1E12));\n\tlist.put(\"Dcroat\", new Character((char) 0x0110));\n\tlist.put(\"Ddotaccent\", new Character((char) 0x1E0A));\n\tlist.put(\"Ddotbelow\", new Character((char) 0x1E0C));\n\tlist.put(\"Decyrillic\", new Character((char) 0x0414));\n\tlist.put(\"Deicoptic\", new Character((char) 0x03EE));\n\tlist.put(\"Delta\", new Character((char) 0x2206));\n\tlist.put(\"Deltagreek\", new Character((char) 0x0394));\n\tlist.put(\"Dhook\", new Character((char) 0x018A));\n\tlist.put(\"Dieresis\", new Character((char) 0xF6CB));\n\tlist.put(\"DieresisAcute\", new Character((char) 0xF6CC));\n\tlist.put(\"DieresisGrave\", new Character((char) 0xF6CD));\n\tlist.put(\"Dieresissmall\", new Character((char) 0xF7A8));\n\tlist.put(\"Digammagreek\", new Character((char) 0x03DC));\n\tlist.put(\"Djecyrillic\", new Character((char) 0x0402));\n\tlist.put(\"Dlinebelow\", new Character((char) 0x1E0E));\n\tlist.put(\"Dmonospace\", new Character((char) 0xFF24));\n\tlist.put(\"Dotaccentsmall\", new Character((char) 0xF6F7));\n\tlist.put(\"Dslash\", new Character((char) 0x0110));\n\tlist.put(\"Dsmall\", new Character((char) 0xF764));\n\tlist.put(\"Dtopbar\", new Character((char) 0x018B));\n\tlist.put(\"Dz\", new Character((char) 0x01F2));\n\tlist.put(\"Dzcaron\", new Character((char) 0x01C5));\n\tlist.put(\"Dzeabkhasiancyrillic\", new Character((char) 0x04E0));\n\tlist.put(\"Dzecyrillic\", new Character((char) 0x0405));\n\tlist.put(\"Dzhecyrillic\", new Character((char) 0x040F));\n\tlist.put(\"E\", new Character((char) 0x0045));\n\tlist.put(\"Eacute\", new Character((char) 0x00C9));\n\tlist.put(\"Eacutesmall\", new Character((char) 0xF7E9));\n\tlist.put(\"Ebreve\", new Character((char) 0x0114));\n\tlist.put(\"Ecaron\", new Character((char) 0x011A));\n\tlist.put(\"Ecedillabreve\", new Character((char) 0x1E1C));\n\tlist.put(\"Echarmenian\", new Character((char) 0x0535));\n\tlist.put(\"Ecircle\", new Character((char) 0x24BA));\n\tlist.put(\"Ecircumflex\", new Character((char) 0x00CA));\n\tlist.put(\"Ecircumflexacute\", new Character((char) 0x1EBE));\n\tlist.put(\"Ecircumflexbelow\", new Character((char) 0x1E18));\n\tlist.put(\"Ecircumflexdotbelow\", new Character((char) 0x1EC6));\n\tlist.put(\"Ecircumflexgrave\", new Character((char) 0x1EC0));\n\tlist.put(\"Ecircumflexhookabove\", new Character((char) 0x1EC2));\n\tlist.put(\"Ecircumflexsmall\", new Character((char) 0xF7EA));\n\tlist.put(\"Ecircumflextilde\", new Character((char) 0x1EC4));\n\tlist.put(\"Ecyrillic\", new Character((char) 0x0404));\n\tlist.put(\"Edblgrave\", new Character((char) 0x0204));\n\tlist.put(\"Edieresis\", new Character((char) 0x00CB));\n\tlist.put(\"Edieresissmall\", new Character((char) 0xF7EB));\n\tlist.put(\"Edot\", new Character((char) 0x0116));\n\tlist.put(\"Edotaccent\", new Character((char) 0x0116));\n\tlist.put(\"Edotbelow\", new Character((char) 0x1EB8));\n\tlist.put(\"Efcyrillic\", new Character((char) 0x0424));\n\tlist.put(\"Egrave\", new Character((char) 0x00C8));\n\tlist.put(\"Egravesmall\", new Character((char) 0xF7E8));\n\tlist.put(\"Eharmenian\", new Character((char) 0x0537));\n\tlist.put(\"Ehookabove\", new Character((char) 0x1EBA));\n\tlist.put(\"Eightroman\", new Character((char) 0x2167));\n\tlist.put(\"Einvertedbreve\", new Character((char) 0x0206));\n\tlist.put(\"Eiotifiedcyrillic\", new Character((char) 0x0464));\n\tlist.put(\"Elcyrillic\", new Character((char) 0x041B));\n\tlist.put(\"Elevenroman\", new Character((char) 0x216A));\n\tlist.put(\"Emacron\", new Character((char) 0x0112));\n\tlist.put(\"Emacronacute\", new Character((char) 0x1E16));\n\tlist.put(\"Emacrongrave\", new Character((char) 0x1E14));\n\tlist.put(\"Emcyrillic\", new Character((char) 0x041C));\n\tlist.put(\"Emonospace\", new Character((char) 0xFF25));\n\tlist.put(\"Encyrillic\", new Character((char) 0x041D));\n\tlist.put(\"Endescendercyrillic\", new Character((char) 0x04A2));\n\tlist.put(\"Eng\", new Character((char) 0x014A));\n\tlist.put(\"Enghecyrillic\", new Character((char) 0x04A4));\n\tlist.put(\"Enhookcyrillic\", new Character((char) 0x04C7));\n\tlist.put(\"Eogonek\", new Character((char) 0x0118));\n\tlist.put(\"Eopen\", new Character((char) 0x0190));\n\tlist.put(\"Epsilon\", new Character((char) 0x0395));\n\tlist.put(\"Epsilontonos\", new Character((char) 0x0388));\n\tlist.put(\"Ercyrillic\", new Character((char) 0x0420));\n\tlist.put(\"Ereversed\", new Character((char) 0x018E));\n\tlist.put(\"Ereversedcyrillic\", new Character((char) 0x042D));\n\tlist.put(\"Escyrillic\", new Character((char) 0x0421));\n\tlist.put(\"Esdescendercyrillic\", new Character((char) 0x04AA));\n\tlist.put(\"Esh\", new Character((char) 0x01A9));\n\tlist.put(\"Esmall\", new Character((char) 0xF765));\n\tlist.put(\"Eta\", new Character((char) 0x0397));\n\tlist.put(\"Etarmenian\", new Character((char) 0x0538));\n\tlist.put(\"Etatonos\", new Character((char) 0x0389));\n\tlist.put(\"Eth\", new Character((char) 0x00D0));\n\tlist.put(\"Ethsmall\", new Character((char) 0xF7F0));\n\tlist.put(\"Etilde\", new Character((char) 0x1EBC));\n\tlist.put(\"Etildebelow\", new Character((char) 0x1E1A));\n\tlist.put(\"Euro\", new Character((char) 0x20AC));\n\tlist.put(\"Ezh\", new Character((char) 0x01B7));\n\tlist.put(\"Ezhcaron\", new Character((char) 0x01EE));\n\tlist.put(\"Ezhreversed\", new Character((char) 0x01B8));\n\tlist.put(\"F\", new Character((char) 0x0046));\n\tlist.put(\"Fcircle\", new Character((char) 0x24BB));\n\tlist.put(\"Fdotaccent\", new Character((char) 0x1E1E));\n\tlist.put(\"Feharmenian\", new Character((char) 0x0556));\n\tlist.put(\"Feicoptic\", new Character((char) 0x03E4));\n\tlist.put(\"Fhook\", new Character((char) 0x0191));\n\tlist.put(\"Fitacyrillic\", new Character((char) 0x0472));\n\tlist.put(\"Fiveroman\", new Character((char) 0x2164));\n\tlist.put(\"Fmonospace\", new Character((char) 0xFF26));\n\tlist.put(\"Fourroman\", new Character((char) 0x2163));\n\tlist.put(\"Fsmall\", new Character((char) 0xF766));\n\tlist.put(\"G\", new Character((char) 0x0047));\n\tlist.put(\"GBsquare\", new Character((char) 0x3387));\n\tlist.put(\"Gacute\", new Character((char) 0x01F4));\n\tlist.put(\"Gamma\", new Character((char) 0x0393));\n\tlist.put(\"Gammaafrican\", new Character((char) 0x0194));\n\tlist.put(\"Gangiacoptic\", new Character((char) 0x03EA));\n\tlist.put(\"Gbreve\", new Character((char) 0x011E));\n\tlist.put(\"Gcaron\", new Character((char) 0x01E6));\n\tlist.put(\"Gcedilla\", new Character((char) 0x0122));\n\tlist.put(\"Gcircle\", new Character((char) 0x24BC));\n\tlist.put(\"Gcircumflex\", new Character((char) 0x011C));\n\tlist.put(\"Gcommaaccent\", new Character((char) 0x0122));\n\tlist.put(\"Gdot\", new Character((char) 0x0120));\n\tlist.put(\"Gdotaccent\", new Character((char) 0x0120));\n\tlist.put(\"Gecyrillic\", new Character((char) 0x0413));\n\tlist.put(\"Ghadarmenian\", new Character((char) 0x0542));\n\tlist.put(\"Ghemiddlehookcyrillic\", new Character((char) 0x0494));\n\tlist.put(\"Ghestrokecyrillic\", new Character((char) 0x0492));\n\tlist.put(\"Gheupturncyrillic\", new Character((char) 0x0490));\n\tlist.put(\"Ghook\", new Character((char) 0x0193));\n\tlist.put(\"Gimarmenian\", new Character((char) 0x0533));\n\tlist.put(\"Gjecyrillic\", new Character((char) 0x0403));\n\tlist.put(\"Gmacron\", new Character((char) 0x1E20));\n\tlist.put(\"Gmonospace\", new Character((char) 0xFF27));\n\tlist.put(\"Grave\", new Character((char) 0xF6CE));\n\tlist.put(\"Gravesmall\", new Character((char) 0xF760));\n\tlist.put(\"Gsmall\", new Character((char) 0xF767));\n\tlist.put(\"Gsmallhook\", new Character((char) 0x029B));\n\tlist.put(\"Gstroke\", new Character((char) 0x01E4));\n\tlist.put(\"H\", new Character((char) 0x0048));\n\tlist.put(\"H18533\", new Character((char) 0x25CF));\n\tlist.put(\"H18543\", new Character((char) 0x25AA));\n\tlist.put(\"H18551\", new Character((char) 0x25AB));\n\tlist.put(\"H22073\", new Character((char) 0x25A1));\n\tlist.put(\"HPsquare\", new Character((char) 0x33CB));\n\tlist.put(\"Haabkhasiancyrillic\", new Character((char) 0x04A8));\n\tlist.put(\"Hadescendercyrillic\", new Character((char) 0x04B2));\n\tlist.put(\"Hardsigncyrillic\", new Character((char) 0x042A));\n\tlist.put(\"Hbar\", new Character((char) 0x0126));\n\tlist.put(\"Hbrevebelow\", new Character((char) 0x1E2A));\n\tlist.put(\"Hcedilla\", new Character((char) 0x1E28));\n\tlist.put(\"Hcircle\", new Character((char) 0x24BD));\n\tlist.put(\"Hcircumflex\", new Character((char) 0x0124));\n\tlist.put(\"Hdieresis\", new Character((char) 0x1E26));\n\tlist.put(\"Hdotaccent\", new Character((char) 0x1E22));\n\tlist.put(\"Hdotbelow\", new Character((char) 0x1E24));\n\tlist.put(\"Hmonospace\", new Character((char) 0xFF28));\n\tlist.put(\"Hoarmenian\", new Character((char) 0x0540));\n\tlist.put(\"Horicoptic\", new Character((char) 0x03E8));\n\tlist.put(\"Hsmall\", new Character((char) 0xF768));\n\tlist.put(\"Hungarumlaut\", new Character((char) 0xF6CF));\n\tlist.put(\"Hungarumlautsmall\", new Character((char) 0xF6F8));\n\tlist.put(\"Hzsquare\", new Character((char) 0x3390));\n\tlist.put(\"I\", new Character((char) 0x0049));\n\tlist.put(\"IAcyrillic\", new Character((char) 0x042F));\n\tlist.put(\"IJ\", new Character((char) 0x0132));\n\tlist.put(\"IUcyrillic\", new Character((char) 0x042E));\n\tlist.put(\"Iacute\", new Character((char) 0x00CD));\n\tlist.put(\"Iacutesmall\", new Character((char) 0xF7ED));\n\tlist.put(\"Ibreve\", new Character((char) 0x012C));\n\tlist.put(\"Icaron\", new Character((char) 0x01CF));\n\tlist.put(\"Icircle\", new Character((char) 0x24BE));\n\tlist.put(\"Icircumflex\", new Character((char) 0x00CE));\n\tlist.put(\"Icircumflexsmall\", new Character((char) 0xF7EE));\n\tlist.put(\"Icyrillic\", new Character((char) 0x0406));\n\tlist.put(\"Idblgrave\", new Character((char) 0x0208));\n\tlist.put(\"Idieresis\", new Character((char) 0x00CF));\n\tlist.put(\"Idieresisacute\", new Character((char) 0x1E2E));\n\tlist.put(\"Idieresiscyrillic\", new Character((char) 0x04E4));\n\tlist.put(\"Idieresissmall\", new Character((char) 0xF7EF));\n\tlist.put(\"Idot\", new Character((char) 0x0130));\n\tlist.put(\"Idotaccent\", new Character((char) 0x0130));\n\tlist.put(\"Idotbelow\", new Character((char) 0x1ECA));\n\tlist.put(\"Iebrevecyrillic\", new Character((char) 0x04D6));\n\tlist.put(\"Iecyrillic\", new Character((char) 0x0415));\n\tlist.put(\"Ifraktur\", new Character((char) 0x2111));\n\tlist.put(\"Igrave\", new Character((char) 0x00CC));\n\tlist.put(\"Igravesmall\", new Character((char) 0xF7EC));\n\tlist.put(\"Ihookabove\", new Character((char) 0x1EC8));\n\tlist.put(\"Iicyrillic\", new Character((char) 0x0418));\n\tlist.put(\"Iinvertedbreve\", new Character((char) 0x020A));\n\tlist.put(\"Iishortcyrillic\", new Character((char) 0x0419));\n\tlist.put(\"Imacron\", new Character((char) 0x012A));\n\tlist.put(\"Imacroncyrillic\", new Character((char) 0x04E2));\n\tlist.put(\"Imonospace\", new Character((char) 0xFF29));\n\tlist.put(\"Iniarmenian\", new Character((char) 0x053B));\n\tlist.put(\"Iocyrillic\", new Character((char) 0x0401));\n\tlist.put(\"Iogonek\", new Character((char) 0x012E));\n\tlist.put(\"Iota\", new Character((char) 0x0399));\n\tlist.put(\"Iotaafrican\", new Character((char) 0x0196));\n\tlist.put(\"Iotadieresis\", new Character((char) 0x03AA));\n\tlist.put(\"Iotatonos\", new Character((char) 0x038A));\n\tlist.put(\"Ismall\", new Character((char) 0xF769));\n\tlist.put(\"Istroke\", new Character((char) 0x0197));\n\tlist.put(\"Itilde\", new Character((char) 0x0128));\n\tlist.put(\"Itildebelow\", new Character((char) 0x1E2C));\n\tlist.put(\"Izhitsacyrillic\", new Character((char) 0x0474));\n\tlist.put(\"Izhitsadblgravecyrillic\", new Character((char) 0x0476));\n\tlist.put(\"J\", new Character((char) 0x004A));\n\tlist.put(\"Jaarmenian\", new Character((char) 0x0541));\n\tlist.put(\"Jcircle\", new Character((char) 0x24BF));\n\tlist.put(\"Jcircumflex\", new Character((char) 0x0134));\n\tlist.put(\"Jecyrillic\", new Character((char) 0x0408));\n\tlist.put(\"Jheharmenian\", new Character((char) 0x054B));\n\tlist.put(\"Jmonospace\", new Character((char) 0xFF2A));\n\tlist.put(\"Jsmall\", new Character((char) 0xF76A));\n\tlist.put(\"K\", new Character((char) 0x004B));\n\tlist.put(\"KBsquare\", new Character((char) 0x3385));\n\tlist.put(\"KKsquare\", new Character((char) 0x33CD));\n\tlist.put(\"Kabashkircyrillic\", new Character((char) 0x04A0));\n\tlist.put(\"Kacute\", new Character((char) 0x1E30));\n\tlist.put(\"Kacyrillic\", new Character((char) 0x041A));\n\tlist.put(\"Kadescendercyrillic\", new Character((char) 0x049A));\n\tlist.put(\"Kahookcyrillic\", new Character((char) 0x04C3));\n\tlist.put(\"Kappa\", new Character((char) 0x039A));\n\tlist.put(\"Kastrokecyrillic\", new Character((char) 0x049E));\n\tlist.put(\"Kaverticalstrokecyrillic\", new Character((char) 0x049C));\n\tlist.put(\"Kcaron\", new Character((char) 0x01E8));\n\tlist.put(\"Kcedilla\", new Character((char) 0x0136));\n\tlist.put(\"Kcircle\", new Character((char) 0x24C0));\n\tlist.put(\"Kcommaaccent\", new Character((char) 0x0136));\n\tlist.put(\"Kdotbelow\", new Character((char) 0x1E32));\n\tlist.put(\"Keharmenian\", new Character((char) 0x0554));\n\tlist.put(\"Kenarmenian\", new Character((char) 0x053F));\n\tlist.put(\"Khacyrillic\", new Character((char) 0x0425));\n\tlist.put(\"Kheicoptic\", new Character((char) 0x03E6));\n\tlist.put(\"Khook\", new Character((char) 0x0198));\n\tlist.put(\"Kjecyrillic\", new Character((char) 0x040C));\n\tlist.put(\"Klinebelow\", new Character((char) 0x1E34));\n\tlist.put(\"Kmonospace\", new Character((char) 0xFF2B));\n\tlist.put(\"Koppacyrillic\", new Character((char) 0x0480));\n\tlist.put(\"Koppagreek\", new Character((char) 0x03DE));\n\tlist.put(\"Ksicyrillic\", new Character((char) 0x046E));\n\tlist.put(\"Ksmall\", new Character((char) 0xF76B));\n\tlist.put(\"L\", new Character((char) 0x004C));\n\tlist.put(\"LJ\", new Character((char) 0x01C7));\n\tlist.put(\"LL\", new Character((char) 0xF6BF));\n\tlist.put(\"Lacute\", new Character((char) 0x0139));\n\tlist.put(\"Lambda\", new Character((char) 0x039B));\n\tlist.put(\"Lcaron\", new Character((char) 0x013D));\n\tlist.put(\"Lcedilla\", new Character((char) 0x013B));\n\tlist.put(\"Lcircle\", new Character((char) 0x24C1));\n\tlist.put(\"Lcircumflexbelow\", new Character((char) 0x1E3C));\n\tlist.put(\"Lcommaaccent\", new Character((char) 0x013B));\n\tlist.put(\"Ldot\", new Character((char) 0x013F));\n\tlist.put(\"Ldotaccent\", new Character((char) 0x013F));\n\tlist.put(\"Ldotbelow\", new Character((char) 0x1E36));\n\tlist.put(\"Ldotbelowmacron\", new Character((char) 0x1E38));\n\tlist.put(\"Liwnarmenian\", new Character((char) 0x053C));\n\tlist.put(\"Lj\", new Character((char) 0x01C8));\n\tlist.put(\"Ljecyrillic\", new Character((char) 0x0409));\n\tlist.put(\"Llinebelow\", new Character((char) 0x1E3A));\n\tlist.put(\"Lmonospace\", new Character((char) 0xFF2C));\n\tlist.put(\"Lslash\", new Character((char) 0x0141));\n\tlist.put(\"Lslashsmall\", new Character((char) 0xF6F9));\n\tlist.put(\"Lsmall\", new Character((char) 0xF76C));\n\tlist.put(\"M\", new Character((char) 0x004D));\n\tlist.put(\"MBsquare\", new Character((char) 0x3386));\n\tlist.put(\"Macron\", new Character((char) 0xF6D0));\n\tlist.put(\"Macronsmall\", new Character((char) 0xF7AF));\n\tlist.put(\"Macute\", new Character((char) 0x1E3E));\n\tlist.put(\"Mcircle\", new Character((char) 0x24C2));\n\tlist.put(\"Mdotaccent\", new Character((char) 0x1E40));\n\tlist.put(\"Mdotbelow\", new Character((char) 0x1E42));\n\tlist.put(\"Menarmenian\", new Character((char) 0x0544));\n\tlist.put(\"Mmonospace\", new Character((char) 0xFF2D));\n\tlist.put(\"Msmall\", new Character((char) 0xF76D));\n\tlist.put(\"Mturned\", new Character((char) 0x019C));\n\tlist.put(\"Mu\", new Character((char) 0x039C));\n\tlist.put(\"N\", new Character((char) 0x004E));\n\tlist.put(\"NJ\", new Character((char) 0x01CA));\n\tlist.put(\"Nacute\", new Character((char) 0x0143));\n\tlist.put(\"Ncaron\", new Character((char) 0x0147));\n\tlist.put(\"Ncedilla\", new Character((char) 0x0145));\n\tlist.put(\"Ncircle\", new Character((char) 0x24C3));\n\tlist.put(\"Ncircumflexbelow\", new Character((char) 0x1E4A));\n\tlist.put(\"Ncommaaccent\", new Character((char) 0x0145));\n\tlist.put(\"Ndotaccent\", new Character((char) 0x1E44));\n\tlist.put(\"Ndotbelow\", new Character((char) 0x1E46));\n\tlist.put(\"Nhookleft\", new Character((char) 0x019D));\n\tlist.put(\"Nineroman\", new Character((char) 0x2168));\n\tlist.put(\"Nj\", new Character((char) 0x01CB));\n\tlist.put(\"Njecyrillic\", new Character((char) 0x040A));\n\tlist.put(\"Nlinebelow\", new Character((char) 0x1E48));\n\tlist.put(\"Nmonospace\", new Character((char) 0xFF2E));\n\tlist.put(\"Nowarmenian\", new Character((char) 0x0546));\n\tlist.put(\"Nsmall\", new Character((char) 0xF76E));\n\tlist.put(\"Ntilde\", new Character((char) 0x00D1));\n\tlist.put(\"Ntildesmall\", new Character((char) 0xF7F1));\n\tlist.put(\"Nu\", new Character((char) 0x039D));\n\tlist.put(\"O\", new Character((char) 0x004F));\n\tlist.put(\"OE\", new Character((char) 0x0152));\n\tlist.put(\"OEsmall\", new Character((char) 0xF6FA));\n\tlist.put(\"Oacute\", new Character((char) 0x00D3));\n\tlist.put(\"Oacutesmall\", new Character((char) 0xF7F3));\n\tlist.put(\"Obarredcyrillic\", new Character((char) 0x04E8));\n\tlist.put(\"Obarreddieresiscyrillic\", new Character((char) 0x04EA));\n\tlist.put(\"Obreve\", new Character((char) 0x014E));\n\tlist.put(\"Ocaron\", new Character((char) 0x01D1));\n\tlist.put(\"Ocenteredtilde\", new Character((char) 0x019F));\n\tlist.put(\"Ocircle\", new Character((char) 0x24C4));\n\tlist.put(\"Ocircumflex\", new Character((char) 0x00D4));\n\tlist.put(\"Ocircumflexacute\", new Character((char) 0x1ED0));\n\tlist.put(\"Ocircumflexdotbelow\", new Character((char) 0x1ED8));\n\tlist.put(\"Ocircumflexgrave\", new Character((char) 0x1ED2));\n\tlist.put(\"Ocircumflexhookabove\", new Character((char) 0x1ED4));\n\tlist.put(\"Ocircumflexsmall\", new Character((char) 0xF7F4));\n\tlist.put(\"Ocircumflextilde\", new Character((char) 0x1ED6));\n\tlist.put(\"Ocyrillic\", new Character((char) 0x041E));\n\tlist.put(\"Odblacute\", new Character((char) 0x0150));\n\tlist.put(\"Odblgrave\", new Character((char) 0x020C));\n\tlist.put(\"Odieresis\", new Character((char) 0x00D6));\n\tlist.put(\"Odieresiscyrillic\", new Character((char) 0x04E6));\n\tlist.put(\"Odieresissmall\", new Character((char) 0xF7F6));\n\tlist.put(\"Odotbelow\", new Character((char) 0x1ECC));\n\tlist.put(\"Ogoneksmall\", new Character((char) 0xF6FB));\n\tlist.put(\"Ograve\", new Character((char) 0x00D2));\n\tlist.put(\"Ogravesmall\", new Character((char) 0xF7F2));\n\tlist.put(\"Oharmenian\", new Character((char) 0x0555));\n\tlist.put(\"Ohm\", new Character((char) 0x2126));\n\tlist.put(\"Ohookabove\", new Character((char) 0x1ECE));\n\tlist.put(\"Ohorn\", new Character((char) 0x01A0));\n\tlist.put(\"Ohornacute\", new Character((char) 0x1EDA));\n\tlist.put(\"Ohorndotbelow\", new Character((char) 0x1EE2));\n\tlist.put(\"Ohorngrave\", new Character((char) 0x1EDC));\n\tlist.put(\"Ohornhookabove\", new Character((char) 0x1EDE));\n\tlist.put(\"Ohorntilde\", new Character((char) 0x1EE0));\n\tlist.put(\"Ohungarumlaut\", new Character((char) 0x0150));\n\tlist.put(\"Oi\", new Character((char) 0x01A2));\n\tlist.put(\"Oinvertedbreve\", new Character((char) 0x020E));\n\tlist.put(\"Omacron\", new Character((char) 0x014C));\n\tlist.put(\"Omacronacute\", new Character((char) 0x1E52));\n\tlist.put(\"Omacrongrave\", new Character((char) 0x1E50));\n\tlist.put(\"Omega\", new Character((char) 0x2126));\n\tlist.put(\"Omegacyrillic\", new Character((char) 0x0460));\n\tlist.put(\"Omegagreek\", new Character((char) 0x03A9));\n\tlist.put(\"Omegaroundcyrillic\", new Character((char) 0x047A));\n\tlist.put(\"Omegatitlocyrillic\", new Character((char) 0x047C));\n\tlist.put(\"Omegatonos\", new Character((char) 0x038F));\n\tlist.put(\"Omicron\", new Character((char) 0x039F));\n\tlist.put(\"Omicrontonos\", new Character((char) 0x038C));\n\tlist.put(\"Omonospace\", new Character((char) 0xFF2F));\n\tlist.put(\"Oneroman\", new Character((char) 0x2160));\n\tlist.put(\"Oogonek\", new Character((char) 0x01EA));\n\tlist.put(\"Oogonekmacron\", new Character((char) 0x01EC));\n\tlist.put(\"Oopen\", new Character((char) 0x0186));\n\tlist.put(\"Oslash\", new Character((char) 0x00D8));\n\tlist.put(\"Oslashacute\", new Character((char) 0x01FE));\n\tlist.put(\"Oslashsmall\", new Character((char) 0xF7F8));\n\tlist.put(\"Osmall\", new Character((char) 0xF76F));\n\tlist.put(\"Ostrokeacute\", new Character((char) 0x01FE));\n\tlist.put(\"Otcyrillic\", new Character((char) 0x047E));\n\tlist.put(\"Otilde\", new Character((char) 0x00D5));\n\tlist.put(\"Otildeacute\", new Character((char) 0x1E4C));\n\tlist.put(\"Otildedieresis\", new Character((char) 0x1E4E));\n\tlist.put(\"Otildesmall\", new Character((char) 0xF7F5));\n\tlist.put(\"P\", new Character((char) 0x0050));\n\tlist.put(\"Pacute\", new Character((char) 0x1E54));\n\tlist.put(\"Pcircle\", new Character((char) 0x24C5));\n\tlist.put(\"Pdotaccent\", new Character((char) 0x1E56));\n\tlist.put(\"Pecyrillic\", new Character((char) 0x041F));\n\tlist.put(\"Peharmenian\", new Character((char) 0x054A));\n\tlist.put(\"Pemiddlehookcyrillic\", new Character((char) 0x04A6));\n\tlist.put(\"Phi\", new Character((char) 0x03A6));\n\tlist.put(\"Phook\", new Character((char) 0x01A4));\n\tlist.put(\"Pi\", new Character((char) 0x03A0));\n\tlist.put(\"Piwrarmenian\", new Character((char) 0x0553));\n\tlist.put(\"Pmonospace\", new Character((char) 0xFF30));\n\tlist.put(\"Psi\", new Character((char) 0x03A8));\n\tlist.put(\"Psicyrillic\", new Character((char) 0x0470));\n\tlist.put(\"Psmall\", new Character((char) 0xF770));\n\tlist.put(\"Q\", new Character((char) 0x0051));\n\tlist.put(\"Qcircle\", new Character((char) 0x24C6));\n\tlist.put(\"Qmonospace\", new Character((char) 0xFF31));\n\tlist.put(\"Qsmall\", new Character((char) 0xF771));\n\tlist.put(\"R\", new Character((char) 0x0052));\n\tlist.put(\"Raarmenian\", new Character((char) 0x054C));\n\tlist.put(\"Racute\", new Character((char) 0x0154));\n\tlist.put(\"Rcaron\", new Character((char) 0x0158));\n\tlist.put(\"Rcedilla\", new Character((char) 0x0156));\n\tlist.put(\"Rcircle\", new Character((char) 0x24C7));\n\tlist.put(\"Rcommaaccent\", new Character((char) 0x0156));\n\tlist.put(\"Rdblgrave\", new Character((char) 0x0210));\n\tlist.put(\"Rdotaccent\", new Character((char) 0x1E58));\n\tlist.put(\"Rdotbelow\", new Character((char) 0x1E5A));\n\tlist.put(\"Rdotbelowmacron\", new Character((char) 0x1E5C));\n\tlist.put(\"Reharmenian\", new Character((char) 0x0550));\n\tlist.put(\"Rfraktur\", new Character((char) 0x211C));\n\tlist.put(\"Rho\", new Character((char) 0x03A1));\n\tlist.put(\"Ringsmall\", new Character((char) 0xF6FC));\n\tlist.put(\"Rinvertedbreve\", new Character((char) 0x0212));\n\tlist.put(\"Rlinebelow\", new Character((char) 0x1E5E));\n\tlist.put(\"Rmonospace\", new Character((char) 0xFF32));\n\tlist.put(\"Rsmall\", new Character((char) 0xF772));\n\tlist.put(\"Rsmallinverted\", new Character((char) 0x0281));\n\tlist.put(\"Rsmallinvertedsuperior\", new Character((char) 0x02B6));\n\tlist.put(\"S\", new Character((char) 0x0053));\n\tlist.put(\"SF010000\", new Character((char) 0x250C));\n\tlist.put(\"SF020000\", new Character((char) 0x2514));\n\tlist.put(\"SF030000\", new Character((char) 0x2510));\n\tlist.put(\"SF040000\", new Character((char) 0x2518));\n\tlist.put(\"SF050000\", new Character((char) 0x253C));\n\tlist.put(\"SF060000\", new Character((char) 0x252C));\n\tlist.put(\"SF070000\", new Character((char) 0x2534));\n\tlist.put(\"SF080000\", new Character((char) 0x251C));\n\tlist.put(\"SF090000\", new Character((char) 0x2524));\n\tlist.put(\"SF100000\", new Character((char) 0x2500));\n\tlist.put(\"SF110000\", new Character((char) 0x2502));\n\tlist.put(\"SF190000\", new Character((char) 0x2561));\n\tlist.put(\"SF200000\", new Character((char) 0x2562));\n\tlist.put(\"SF210000\", new Character((char) 0x2556));\n\tlist.put(\"SF220000\", new Character((char) 0x2555));\n\tlist.put(\"SF230000\", new Character((char) 0x2563));\n\tlist.put(\"SF240000\", new Character((char) 0x2551));\n\tlist.put(\"SF250000\", new Character((char) 0x2557));\n\tlist.put(\"SF260000\", new Character((char) 0x255D));\n\tlist.put(\"SF270000\", new Character((char) 0x255C));\n\tlist.put(\"SF280000\", new Character((char) 0x255B));\n\tlist.put(\"SF360000\", new Character((char) 0x255E));\n\tlist.put(\"SF370000\", new Character((char) 0x255F));\n\tlist.put(\"SF380000\", new Character((char) 0x255A));\n\tlist.put(\"SF390000\", new Character((char) 0x2554));\n\tlist.put(\"SF400000\", new Character((char) 0x2569));\n\tlist.put(\"SF410000\", new Character((char) 0x2566));\n\tlist.put(\"SF420000\", new Character((char) 0x2560));\n\tlist.put(\"SF430000\", new Character((char) 0x2550));\n\tlist.put(\"SF440000\", new Character((char) 0x256C));\n\tlist.put(\"SF450000\", new Character((char) 0x2567));\n\tlist.put(\"SF460000\", new Character((char) 0x2568));\n\tlist.put(\"SF470000\", new Character((char) 0x2564));\n\tlist.put(\"SF480000\", new Character((char) 0x2565));\n\tlist.put(\"SF490000\", new Character((char) 0x2559));\n\tlist.put(\"SF500000\", new Character((char) 0x2558));\n\tlist.put(\"SF510000\", new Character((char) 0x2552));\n\tlist.put(\"SF520000\", new Character((char) 0x2553));\n\tlist.put(\"SF530000\", new Character((char) 0x256B));\n\tlist.put(\"SF540000\", new Character((char) 0x256A));\n\tlist.put(\"Sacute\", new Character((char) 0x015A));\n\tlist.put(\"Sacutedotaccent\", new Character((char) 0x1E64));\n\tlist.put(\"Sampigreek\", new Character((char) 0x03E0));\n\tlist.put(\"Scaron\", new Character((char) 0x0160));\n\tlist.put(\"Scarondotaccent\", new Character((char) 0x1E66));\n\tlist.put(\"Scaronsmall\", new Character((char) 0xF6FD));\n\tlist.put(\"Scedilla\", new Character((char) 0x015E));\n\tlist.put(\"Schwa\", new Character((char) 0x018F));\n\tlist.put(\"Schwacyrillic\", new Character((char) 0x04D8));\n\tlist.put(\"Schwadieresiscyrillic\", new Character((char) 0x04DA));\n\tlist.put(\"Scircle\", new Character((char) 0x24C8));\n\tlist.put(\"Scircumflex\", new Character((char) 0x015C));\n\tlist.put(\"Scommaaccent\", new Character((char) 0x0218));\n\tlist.put(\"Sdotaccent\", new Character((char) 0x1E60));\n\tlist.put(\"Sdotbelow\", new Character((char) 0x1E62));\n\tlist.put(\"Sdotbelowdotaccent\", new Character((char) 0x1E68));\n\tlist.put(\"Seharmenian\", new Character((char) 0x054D));\n\tlist.put(\"Sevenroman\", new Character((char) 0x2166));\n\tlist.put(\"Shaarmenian\", new Character((char) 0x0547));\n\tlist.put(\"Shacyrillic\", new Character((char) 0x0428));\n\tlist.put(\"Shchacyrillic\", new Character((char) 0x0429));\n\tlist.put(\"Sheicoptic\", new Character((char) 0x03E2));\n\tlist.put(\"Shhacyrillic\", new Character((char) 0x04BA));\n\tlist.put(\"Shimacoptic\", new Character((char) 0x03EC));\n\tlist.put(\"Sigma\", new Character((char) 0x03A3));\n\tlist.put(\"Sixroman\", new Character((char) 0x2165));\n\tlist.put(\"Smonospace\", new Character((char) 0xFF33));\n\tlist.put(\"Softsigncyrillic\", new Character((char) 0x042C));\n\tlist.put(\"Ssmall\", new Character((char) 0xF773));\n\tlist.put(\"Stigmagreek\", new Character((char) 0x03DA));\n\tlist.put(\"T\", new Character((char) 0x0054));\n\tlist.put(\"Tau\", new Character((char) 0x03A4));\n\tlist.put(\"Tbar\", new Character((char) 0x0166));\n\tlist.put(\"Tcaron\", new Character((char) 0x0164));\n\tlist.put(\"Tcedilla\", new Character((char) 0x0162));\n\tlist.put(\"Tcircle\", new Character((char) 0x24C9));\n\tlist.put(\"Tcircumflexbelow\", new Character((char) 0x1E70));\n\tlist.put(\"Tcommaaccent\", new Character((char) 0x0162));\n\tlist.put(\"Tdotaccent\", new Character((char) 0x1E6A));\n\tlist.put(\"Tdotbelow\", new Character((char) 0x1E6C));\n\tlist.put(\"Tecyrillic\", new Character((char) 0x0422));\n\tlist.put(\"Tedescendercyrillic\", new Character((char) 0x04AC));\n\tlist.put(\"Tenroman\", new Character((char) 0x2169));\n\tlist.put(\"Tetsecyrillic\", new Character((char) 0x04B4));\n\tlist.put(\"Theta\", new Character((char) 0x0398));\n\tlist.put(\"Thook\", new Character((char) 0x01AC));\n\tlist.put(\"Thorn\", new Character((char) 0x00DE));\n\tlist.put(\"Thornsmall\", new Character((char) 0xF7FE));\n\tlist.put(\"Threeroman\", new Character((char) 0x2162));\n\tlist.put(\"Tildesmall\", new Character((char) 0xF6FE));\n\tlist.put(\"Tiwnarmenian\", new Character((char) 0x054F));\n\tlist.put(\"Tlinebelow\", new Character((char) 0x1E6E));\n\tlist.put(\"Tmonospace\", new Character((char) 0xFF34));\n\tlist.put(\"Toarmenian\", new Character((char) 0x0539));\n\tlist.put(\"Tonefive\", new Character((char) 0x01BC));\n\tlist.put(\"Tonesix\", new Character((char) 0x0184));\n\tlist.put(\"Tonetwo\", new Character((char) 0x01A7));\n\tlist.put(\"Tretroflexhook\", new Character((char) 0x01AE));\n\tlist.put(\"Tsecyrillic\", new Character((char) 0x0426));\n\tlist.put(\"Tshecyrillic\", new Character((char) 0x040B));\n\tlist.put(\"Tsmall\", new Character((char) 0xF774));\n\tlist.put(\"Twelveroman\", new Character((char) 0x216B));\n\tlist.put(\"Tworoman\", new Character((char) 0x2161));\n\tlist.put(\"U\", new Character((char) 0x0055));\n\tlist.put(\"Uacute\", new Character((char) 0x00DA));\n\tlist.put(\"Uacutesmall\", new Character((char) 0xF7FA));\n\tlist.put(\"Ubreve\", new Character((char) 0x016C));\n\tlist.put(\"Ucaron\", new Character((char) 0x01D3));\n\tlist.put(\"Ucircle\", new Character((char) 0x24CA));\n\tlist.put(\"Ucircumflex\", new Character((char) 0x00DB));\n\tlist.put(\"Ucircumflexbelow\", new Character((char) 0x1E76));\n\tlist.put(\"Ucircumflexsmall\", new Character((char) 0xF7FB));\n\tlist.put(\"Ucyrillic\", new Character((char) 0x0423));\n\tlist.put(\"Udblacute\", new Character((char) 0x0170));\n\tlist.put(\"Udblgrave\", new Character((char) 0x0214));\n\tlist.put(\"Udieresis\", new Character((char) 0x00DC));\n\tlist.put(\"Udieresisacute\", new Character((char) 0x01D7));\n\tlist.put(\"Udieresisbelow\", new Character((char) 0x1E72));\n\tlist.put(\"Udieresiscaron\", new Character((char) 0x01D9));\n\tlist.put(\"Udieresiscyrillic\", new Character((char) 0x04F0));\n\tlist.put(\"Udieresisgrave\", new Character((char) 0x01DB));\n\tlist.put(\"Udieresismacron\", new Character((char) 0x01D5));\n\tlist.put(\"Udieresissmall\", new Character((char) 0xF7FC));\n\tlist.put(\"Udotbelow\", new Character((char) 0x1EE4));\n\tlist.put(\"Ugrave\", new Character((char) 0x00D9));\n\tlist.put(\"Ugravesmall\", new Character((char) 0xF7F9));\n\tlist.put(\"Uhookabove\", new Character((char) 0x1EE6));\n\tlist.put(\"Uhorn\", new Character((char) 0x01AF));\n\tlist.put(\"Uhornacute\", new Character((char) 0x1EE8));\n\tlist.put(\"Uhorndotbelow\", new Character((char) 0x1EF0));\n\tlist.put(\"Uhorngrave\", new Character((char) 0x1EEA));\n\tlist.put(\"Uhornhookabove\", new Character((char) 0x1EEC));\n\tlist.put(\"Uhorntilde\", new Character((char) 0x1EEE));\n\tlist.put(\"Uhungarumlaut\", new Character((char) 0x0170));\n\tlist.put(\"Uhungarumlautcyrillic\", new Character((char) 0x04F2));\n\tlist.put(\"Uinvertedbreve\", new Character((char) 0x0216));\n\tlist.put(\"Ukcyrillic\", new Character((char) 0x0478));\n\tlist.put(\"Umacron\", new Character((char) 0x016A));\n\tlist.put(\"Umacroncyrillic\", new Character((char) 0x04EE));\n\tlist.put(\"Umacrondieresis\", new Character((char) 0x1E7A));\n\tlist.put(\"Umonospace\", new Character((char) 0xFF35));\n\tlist.put(\"Uogonek\", new Character((char) 0x0172));\n\tlist.put(\"Upsilon\", new Character((char) 0x03A5));\n\tlist.put(\"Upsilon1\", new Character((char) 0x03D2));\n\tlist.put(\"Upsilonacutehooksymbolgreek\", new Character((char) 0x03D3));\n\tlist.put(\"Upsilonafrican\", new Character((char) 0x01B1));\n\tlist.put(\"Upsilondieresis\", new Character((char) 0x03AB));\n\tlist\n\t\t\t.put(\"Upsilondieresishooksymbolgreek\", new Character(\n\t\t\t\t\t(char) 0x03D4));\n\tlist.put(\"Upsilonhooksymbol\", new Character((char) 0x03D2));\n\tlist.put(\"Upsilontonos\", new Character((char) 0x038E));\n\tlist.put(\"Uring\", new Character((char) 0x016E));\n\tlist.put(\"Ushortcyrillic\", new Character((char) 0x040E));\n\tlist.put(\"Usmall\", new Character((char) 0xF775));\n\tlist.put(\"Ustraightcyrillic\", new Character((char) 0x04AE));\n\tlist.put(\"Ustraightstrokecyrillic\", new Character((char) 0x04B0));\n\tlist.put(\"Utilde\", new Character((char) 0x0168));\n\tlist.put(\"Utildeacute\", new Character((char) 0x1E78));\n\tlist.put(\"Utildebelow\", new Character((char) 0x1E74));\n\tlist.put(\"V\", new Character((char) 0x0056));\n\tlist.put(\"Vcircle\", new Character((char) 0x24CB));\n\tlist.put(\"Vdotbelow\", new Character((char) 0x1E7E));\n\tlist.put(\"Vecyrillic\", new Character((char) 0x0412));\n\tlist.put(\"Vewarmenian\", new Character((char) 0x054E));\n\tlist.put(\"Vhook\", new Character((char) 0x01B2));\n\tlist.put(\"Vmonospace\", new Character((char) 0xFF36));\n\tlist.put(\"Voarmenian\", new Character((char) 0x0548));\n\tlist.put(\"Vsmall\", new Character((char) 0xF776));\n\tlist.put(\"Vtilde\", new Character((char) 0x1E7C));\n\tlist.put(\"W\", new Character((char) 0x0057));\n\tlist.put(\"Wacute\", new Character((char) 0x1E82));\n\tlist.put(\"Wcircle\", new Character((char) 0x24CC));\n\tlist.put(\"Wcircumflex\", new Character((char) 0x0174));\n\tlist.put(\"Wdieresis\", new Character((char) 0x1E84));\n\tlist.put(\"Wdotaccent\", new Character((char) 0x1E86));\n\tlist.put(\"Wdotbelow\", new Character((char) 0x1E88));\n\tlist.put(\"Wgrave\", new Character((char) 0x1E80));\n\tlist.put(\"Wmonospace\", new Character((char) 0xFF37));\n\tlist.put(\"Wsmall\", new Character((char) 0xF777));\n\tlist.put(\"X\", new Character((char) 0x0058));\n\tlist.put(\"Xcircle\", new Character((char) 0x24CD));\n\tlist.put(\"Xdieresis\", new Character((char) 0x1E8C));\n\tlist.put(\"Xdotaccent\", new Character((char) 0x1E8A));\n\tlist.put(\"Xeharmenian\", new Character((char) 0x053D));\n\tlist.put(\"Xi\", new Character((char) 0x039E));\n\tlist.put(\"Xmonospace\", new Character((char) 0xFF38));\n\tlist.put(\"Xsmall\", new Character((char) 0xF778));\n\tlist.put(\"Y\", new Character((char) 0x0059));\n\tlist.put(\"Yacute\", new Character((char) 0x00DD));\n\tlist.put(\"Yacutesmall\", new Character((char) 0xF7FD));\n\tlist.put(\"Yatcyrillic\", new Character((char) 0x0462));\n\tlist.put(\"Ycircle\", new Character((char) 0x24CE));\n\tlist.put(\"Ycircumflex\", new Character((char) 0x0176));\n\tlist.put(\"Ydieresis\", new Character((char) 0x0178));\n\tlist.put(\"Ydieresissmall\", new Character((char) 0xF7FF));\n\tlist.put(\"Ydotaccent\", new Character((char) 0x1E8E));\n\tlist.put(\"Ydotbelow\", new Character((char) 0x1EF4));\n\tlist.put(\"Yericyrillic\", new Character((char) 0x042B));\n\tlist.put(\"Yerudieresiscyrillic\", new Character((char) 0x04F8));\n\tlist.put(\"Ygrave\", new Character((char) 0x1EF2));\n\tlist.put(\"Yhook\", new Character((char) 0x01B3));\n\tlist.put(\"Yhookabove\", new Character((char) 0x1EF6));\n\tlist.put(\"Yiarmenian\", new Character((char) 0x0545));\n\tlist.put(\"Yicyrillic\", new Character((char) 0x0407));\n\tlist.put(\"Yiwnarmenian\", new Character((char) 0x0552));\n\tlist.put(\"Ymonospace\", new Character((char) 0xFF39));\n\tlist.put(\"Ysmall\", new Character((char) 0xF779));\n\tlist.put(\"Ytilde\", new Character((char) 0x1EF8));\n\tlist.put(\"Yusbigcyrillic\", new Character((char) 0x046A));\n\tlist.put(\"Yusbigiotifiedcyrillic\", new Character((char) 0x046C));\n\tlist.put(\"Yuslittlecyrillic\", new Character((char) 0x0466));\n\tlist.put(\"Yuslittleiotifiedcyrillic\", new Character((char) 0x0468));\n\tlist.put(\"Z\", new Character((char) 0x005A));\n\tlist.put(\"Zaarmenian\", new Character((char) 0x0536));\n\tlist.put(\"Zacute\", new Character((char) 0x0179));\n\tlist.put(\"Zcaron\", new Character((char) 0x017D));\n\tlist.put(\"Zcaronsmall\", new Character((char) 0xF6FF));\n\tlist.put(\"Zcircle\", new Character((char) 0x24CF));\n\tlist.put(\"Zcircumflex\", new Character((char) 0x1E90));\n\tlist.put(\"Zdot\", new Character((char) 0x017B));\n\tlist.put(\"Zdotaccent\", new Character((char) 0x017B));\n\tlist.put(\"Zdotbelow\", new Character((char) 0x1E92));\n\tlist.put(\"Zecyrillic\", new Character((char) 0x0417));\n\tlist.put(\"Zedescendercyrillic\", new Character((char) 0x0498));\n\tlist.put(\"Zedieresiscyrillic\", new Character((char) 0x04DE));\n\tlist.put(\"Zeta\", new Character((char) 0x0396));\n\tlist.put(\"Zhearmenian\", new Character((char) 0x053A));\n\tlist.put(\"Zhebrevecyrillic\", new Character((char) 0x04C1));\n\tlist.put(\"Zhecyrillic\", new Character((char) 0x0416));\n\tlist.put(\"Zhedescendercyrillic\", new Character((char) 0x0496));\n\tlist.put(\"Zhedieresiscyrillic\", new Character((char) 0x04DC));\n\tlist.put(\"Zlinebelow\", new Character((char) 0x1E94));\n\tlist.put(\"Zmonospace\", new Character((char) 0xFF3A));\n\tlist.put(\"Zsmall\", new Character((char) 0xF77A));\n\tlist.put(\"Zstroke\", new Character((char) 0x01B5));\n\tlist.put(\"a\", new Character((char) 0x0061));\n\tlist.put(\"aabengali\", new Character((char) 0x0986));\n\tlist.put(\"aacute\", new Character((char) 0x00E1));\n\tlist.put(\"aadeva\", new Character((char) 0x0906));\n\tlist.put(\"aagujarati\", new Character((char) 0x0A86));\n\tlist.put(\"aagurmukhi\", new Character((char) 0x0A06));\n\tlist.put(\"aamatragurmukhi\", new Character((char) 0x0A3E));\n\tlist.put(\"aarusquare\", new Character((char) 0x3303));\n\tlist.put(\"aavowelsignbengali\", new Character((char) 0x09BE));\n\tlist.put(\"aavowelsigndeva\", new Character((char) 0x093E));\n\tlist.put(\"aavowelsigngujarati\", new Character((char) 0x0ABE));\n\tlist.put(\"abbreviationmarkarmenian\", new Character((char) 0x055F));\n\tlist.put(\"abbreviationsigndeva\", new Character((char) 0x0970));\n\tlist.put(\"abengali\", new Character((char) 0x0985));\n\tlist.put(\"abopomofo\", new Character((char) 0x311A));\n\tlist.put(\"abreve\", new Character((char) 0x0103));\n\tlist.put(\"abreveacute\", new Character((char) 0x1EAF));\n\tlist.put(\"abrevecyrillic\", new Character((char) 0x04D1));\n\tlist.put(\"abrevedotbelow\", new Character((char) 0x1EB7));\n\tlist.put(\"abrevegrave\", new Character((char) 0x1EB1));\n\tlist.put(\"abrevehookabove\", new Character((char) 0x1EB3));\n\tlist.put(\"abrevetilde\", new Character((char) 0x1EB5));\n\tlist.put(\"acaron\", new Character((char) 0x01CE));\n\tlist.put(\"acircle\", new Character((char) 0x24D0));\n\tlist.put(\"acircumflex\", new Character((char) 0x00E2));\n\tlist.put(\"acircumflexacute\", new Character((char) 0x1EA5));\n\tlist.put(\"acircumflexdotbelow\", new Character((char) 0x1EAD));\n\tlist.put(\"acircumflexgrave\", new Character((char) 0x1EA7));\n\tlist.put(\"acircumflexhookabove\", new Character((char) 0x1EA9));\n\tlist.put(\"acircumflextilde\", new Character((char) 0x1EAB));\n\tlist.put(\"acute\", new Character((char) 0x00B4));\n\tlist.put(\"acutebelowcmb\", new Character((char) 0x0317));\n\tlist.put(\"acutecmb\", new Character((char) 0x0301));\n\tlist.put(\"acutecomb\", new Character((char) 0x0301));\n\tlist.put(\"acutedeva\", new Character((char) 0x0954));\n\tlist.put(\"acutelowmod\", new Character((char) 0x02CF));\n\tlist.put(\"acutetonecmb\", new Character((char) 0x0341));\n\tlist.put(\"acyrillic\", new Character((char) 0x0430));\n\tlist.put(\"adblgrave\", new Character((char) 0x0201));\n\tlist.put(\"addakgurmukhi\", new Character((char) 0x0A71));\n\tlist.put(\"adeva\", new Character((char) 0x0905));\n\tlist.put(\"adieresis\", new Character((char) 0x00E4));\n\tlist.put(\"adieresiscyrillic\", new Character((char) 0x04D3));\n\tlist.put(\"adieresismacron\", new Character((char) 0x01DF));\n\tlist.put(\"adotbelow\", new Character((char) 0x1EA1));\n\tlist.put(\"adotmacron\", new Character((char) 0x01E1));\n\tlist.put(\"ae\", new Character((char) 0x00E6));\n\tlist.put(\"aeacute\", new Character((char) 0x01FD));\n\tlist.put(\"aekorean\", new Character((char) 0x3150));\n\tlist.put(\"aemacron\", new Character((char) 0x01E3));\n\tlist.put(\"afii00208\", new Character((char) 0x2015));\n\tlist.put(\"afii08941\", new Character((char) 0x20A4));\n\tlist.put(\"afii10017\", new Character((char) 0x0410));\n\tlist.put(\"afii10018\", new Character((char) 0x0411));\n\tlist.put(\"afii10019\", new Character((char) 0x0412));\n\tlist.put(\"afii10020\", new Character((char) 0x0413));\n\tlist.put(\"afii10021\", new Character((char) 0x0414));\n\tlist.put(\"afii10022\", new Character((char) 0x0415));\n\tlist.put(\"afii10023\", new Character((char) 0x0401));\n\tlist.put(\"afii10024\", new Character((char) 0x0416));\n\tlist.put(\"afii10025\", new Character((char) 0x0417));\n\tlist.put(\"afii10026\", new Character((char) 0x0418));\n\tlist.put(\"afii10027\", new Character((char) 0x0419));\n\tlist.put(\"afii10028\", new Character((char) 0x041A));\n\tlist.put(\"afii10029\", new Character((char) 0x041B));\n\tlist.put(\"afii10030\", new Character((char) 0x041C));\n\tlist.put(\"afii10031\", new Character((char) 0x041D));\n\tlist.put(\"afii10032\", new Character((char) 0x041E));\n\tlist.put(\"afii10033\", new Character((char) 0x041F));\n\tlist.put(\"afii10034\", new Character((char) 0x0420));\n\tlist.put(\"afii10035\", new Character((char) 0x0421));\n\tlist.put(\"afii10036\", new Character((char) 0x0422));\n\tlist.put(\"afii10037\", new Character((char) 0x0423));\n\tlist.put(\"afii10038\", new Character((char) 0x0424));\n\tlist.put(\"afii10039\", new Character((char) 0x0425));\n\tlist.put(\"afii10040\", new Character((char) 0x0426));\n\tlist.put(\"afii10041\", new Character((char) 0x0427));\n\tlist.put(\"afii10042\", new Character((char) 0x0428));\n\tlist.put(\"afii10043\", new Character((char) 0x0429));\n\tlist.put(\"afii10044\", new Character((char) 0x042A));\n\tlist.put(\"afii10045\", new Character((char) 0x042B));\n\tlist.put(\"afii10046\", new Character((char) 0x042C));\n\tlist.put(\"afii10047\", new Character((char) 0x042D));\n\tlist.put(\"afii10048\", new Character((char) 0x042E));\n\tlist.put(\"afii10049\", new Character((char) 0x042F));\n\tlist.put(\"afii10050\", new Character((char) 0x0490));\n\tlist.put(\"afii10051\", new Character((char) 0x0402));\n\tlist.put(\"afii10052\", new Character((char) 0x0403));\n\tlist.put(\"afii10053\", new Character((char) 0x0404));\n\tlist.put(\"afii10054\", new Character((char) 0x0405));\n\tlist.put(\"afii10055\", new Character((char) 0x0406));\n\tlist.put(\"afii10056\", new Character((char) 0x0407));\n\tlist.put(\"afii10057\", new Character((char) 0x0408));\n\tlist.put(\"afii10058\", new Character((char) 0x0409));\n\tlist.put(\"afii10059\", new Character((char) 0x040A));\n\tlist.put(\"afii10060\", new Character((char) 0x040B));\n\tlist.put(\"afii10061\", new Character((char) 0x040C));\n\tlist.put(\"afii10062\", new Character((char) 0x040E));\n\tlist.put(\"afii10063\", new Character((char) 0xF6C4));\n\tlist.put(\"afii10064\", new Character((char) 0xF6C5));\n\tlist.put(\"afii10065\", new Character((char) 0x0430));\n\tlist.put(\"afii10066\", new Character((char) 0x0431));\n\tlist.put(\"afii10067\", new Character((char) 0x0432));\n\tlist.put(\"afii10068\", new Character((char) 0x0433));\n\tlist.put(\"afii10069\", new Character((char) 0x0434));\n\tlist.put(\"afii10070\", new Character((char) 0x0435));\n\tlist.put(\"afii10071\", new Character((char) 0x0451));\n\tlist.put(\"afii10072\", new Character((char) 0x0436));\n\tlist.put(\"afii10073\", new Character((char) 0x0437));\n\tlist.put(\"afii10074\", new Character((char) 0x0438));\n\tlist.put(\"afii10075\", new Character((char) 0x0439));\n\tlist.put(\"afii10076\", new Character((char) 0x043A));\n\tlist.put(\"afii10077\", new Character((char) 0x043B));\n\tlist.put(\"afii10078\", new Character((char) 0x043C));\n\tlist.put(\"afii10079\", new Character((char) 0x043D));\n\tlist.put(\"afii10080\", new Character((char) 0x043E));\n\tlist.put(\"afii10081\", new Character((char) 0x043F));\n\tlist.put(\"afii10082\", new Character((char) 0x0440));\n\tlist.put(\"afii10083\", new Character((char) 0x0441));\n\tlist.put(\"afii10084\", new Character((char) 0x0442));\n\tlist.put(\"afii10085\", new Character((char) 0x0443));\n\tlist.put(\"afii10086\", new Character((char) 0x0444));\n\tlist.put(\"afii10087\", new Character((char) 0x0445));\n\tlist.put(\"afii10088\", new Character((char) 0x0446));\n\tlist.put(\"afii10089\", new Character((char) 0x0447));\n\tlist.put(\"afii10090\", new Character((char) 0x0448));\n\tlist.put(\"afii10091\", new Character((char) 0x0449));\n\tlist.put(\"afii10092\", new Character((char) 0x044A));\n\tlist.put(\"afii10093\", new Character((char) 0x044B));\n\tlist.put(\"afii10094\", new Character((char) 0x044C));\n\tlist.put(\"afii10095\", new Character((char) 0x044D));\n\tlist.put(\"afii10096\", new Character((char) 0x044E));\n\tlist.put(\"afii10097\", new Character((char) 0x044F));\n\tlist.put(\"afii10098\", new Character((char) 0x0491));\n\tlist.put(\"afii10099\", new Character((char) 0x0452));\n\tlist.put(\"afii10100\", new Character((char) 0x0453));\n\tlist.put(\"afii10101\", new Character((char) 0x0454));\n\tlist.put(\"afii10102\", new Character((char) 0x0455));\n\tlist.put(\"afii10103\", new Character((char) 0x0456));\n\tlist.put(\"afii10104\", new Character((char) 0x0457));\n\tlist.put(\"afii10105\", new Character((char) 0x0458));\n\tlist.put(\"afii10106\", new Character((char) 0x0459));\n\tlist.put(\"afii10107\", new Character((char) 0x045A));\n\tlist.put(\"afii10108\", new Character((char) 0x045B));\n\tlist.put(\"afii10109\", new Character((char) 0x045C));\n\tlist.put(\"afii10110\", new Character((char) 0x045E));\n\tlist.put(\"afii10145\", new Character((char) 0x040F));\n\tlist.put(\"afii10146\", new Character((char) 0x0462));\n\tlist.put(\"afii10147\", new Character((char) 0x0472));\n\tlist.put(\"afii10148\", new Character((char) 0x0474));\n\tlist.put(\"afii10192\", new Character((char) 0xF6C6));\n\tlist.put(\"afii10193\", new Character((char) 0x045F));\n\tlist.put(\"afii10194\", new Character((char) 0x0463));\n\tlist.put(\"afii10195\", new Character((char) 0x0473));\n\tlist.put(\"afii10196\", new Character((char) 0x0475));\n\tlist.put(\"afii10831\", new Character((char) 0xF6C7));\n\tlist.put(\"afii10832\", new Character((char) 0xF6C8));\n\tlist.put(\"afii10846\", new Character((char) 0x04D9));\n\tlist.put(\"afii299\", new Character((char) 0x200E));\n\tlist.put(\"afii300\", new Character((char) 0x200F));\n\tlist.put(\"afii301\", new Character((char) 0x200D));\n\tlist.put(\"afii57381\", new Character((char) 0x066A));\n\tlist.put(\"afii57388\", new Character((char) 0x060C));\n\tlist.put(\"afii57392\", new Character((char) 0x0660));\n\tlist.put(\"afii57393\", new Character((char) 0x0661));\n\tlist.put(\"afii57394\", new Character((char) 0x0662));\n\tlist.put(\"afii57395\", new Character((char) 0x0663));\n\tlist.put(\"afii57396\", new Character((char) 0x0664));\n\tlist.put(\"afii57397\", new Character((char) 0x0665));\n\tlist.put(\"afii57398\", new Character((char) 0x0666));\n\tlist.put(\"afii57399\", new Character((char) 0x0667));\n\tlist.put(\"afii57400\", new Character((char) 0x0668));\n\tlist.put(\"afii57401\", new Character((char) 0x0669));\n\tlist.put(\"afii57403\", new Character((char) 0x061B));\n\tlist.put(\"afii57407\", new Character((char) 0x061F));\n\tlist.put(\"afii57409\", new Character((char) 0x0621));\n\tlist.put(\"afii57410\", new Character((char) 0x0622));\n\tlist.put(\"afii57411\", new Character((char) 0x0623));\n\tlist.put(\"afii57412\", new Character((char) 0x0624));\n\tlist.put(\"afii57413\", new Character((char) 0x0625));\n\tlist.put(\"afii57414\", new Character((char) 0x0626));\n\tlist.put(\"afii57415\", new Character((char) 0x0627));\n\tlist.put(\"afii57416\", new Character((char) 0x0628));\n\tlist.put(\"afii57417\", new Character((char) 0x0629));\n\tlist.put(\"afii57418\", new Character((char) 0x062A));\n\tlist.put(\"afii57419\", new Character((char) 0x062B));\n\tlist.put(\"afii57420\", new Character((char) 0x062C));\n\tlist.put(\"afii57421\", new Character((char) 0x062D));\n\tlist.put(\"afii57422\", new Character((char) 0x062E));\n\tlist.put(\"afii57423\", new Character((char) 0x062F));\n\tlist.put(\"afii57424\", new Character((char) 0x0630));\n\tlist.put(\"afii57425\", new Character((char) 0x0631));\n\tlist.put(\"afii57426\", new Character((char) 0x0632));\n\tlist.put(\"afii57427\", new Character((char) 0x0633));\n\tlist.put(\"afii57428\", new Character((char) 0x0634));\n\tlist.put(\"afii57429\", new Character((char) 0x0635));\n\tlist.put(\"afii57430\", new Character((char) 0x0636));\n\tlist.put(\"afii57431\", new Character((char) 0x0637));\n\tlist.put(\"afii57432\", new Character((char) 0x0638));\n\tlist.put(\"afii57433\", new Character((char) 0x0639));\n\tlist.put(\"afii57434\", new Character((char) 0x063A));\n\tlist.put(\"afii57440\", new Character((char) 0x0640));\n\tlist.put(\"afii57441\", new Character((char) 0x0641));\n\tlist.put(\"afii57442\", new Character((char) 0x0642));\n\tlist.put(\"afii57443\", new Character((char) 0x0643));\n\tlist.put(\"afii57444\", new Character((char) 0x0644));\n\tlist.put(\"afii57445\", new Character((char) 0x0645));\n\tlist.put(\"afii57446\", new Character((char) 0x0646));\n\tlist.put(\"afii57448\", new Character((char) 0x0648));\n\tlist.put(\"afii57449\", new Character((char) 0x0649));\n\tlist.put(\"afii57450\", new Character((char) 0x064A));\n\tlist.put(\"afii57451\", new Character((char) 0x064B));\n\tlist.put(\"afii57452\", new Character((char) 0x064C));\n\tlist.put(\"afii57453\", new Character((char) 0x064D));\n\tlist.put(\"afii57454\", new Character((char) 0x064E));\n\tlist.put(\"afii57455\", new Character((char) 0x064F));\n\tlist.put(\"afii57456\", new Character((char) 0x0650));\n\tlist.put(\"afii57457\", new Character((char) 0x0651));\n\tlist.put(\"afii57458\", new Character((char) 0x0652));\n\tlist.put(\"afii57470\", new Character((char) 0x0647));\n\tlist.put(\"afii57505\", new Character((char) 0x06A4));\n\tlist.put(\"afii57506\", new Character((char) 0x067E));\n\tlist.put(\"afii57507\", new Character((char) 0x0686));\n\tlist.put(\"afii57508\", new Character((char) 0x0698));\n\tlist.put(\"afii57509\", new Character((char) 0x06AF));\n\tlist.put(\"afii57511\", new Character((char) 0x0679));\n\tlist.put(\"afii57512\", new Character((char) 0x0688));\n\tlist.put(\"afii57513\", new Character((char) 0x0691));\n\tlist.put(\"afii57514\", new Character((char) 0x06BA));\n\tlist.put(\"afii57519\", new Character((char) 0x06D2));\n\tlist.put(\"afii57534\", new Character((char) 0x06D5));\n\tlist.put(\"afii57636\", new Character((char) 0x20AA));\n\tlist.put(\"afii57645\", new Character((char) 0x05BE));\n\tlist.put(\"afii57658\", new Character((char) 0x05C3));\n\tlist.put(\"afii57664\", new Character((char) 0x05D0));\n\tlist.put(\"afii57665\", new Character((char) 0x05D1));\n\tlist.put(\"afii57666\", new Character((char) 0x05D2));\n\tlist.put(\"afii57667\", new Character((char) 0x05D3));\n\tlist.put(\"afii57668\", new Character((char) 0x05D4));\n\tlist.put(\"afii57669\", new Character((char) 0x05D5));\n\tlist.put(\"afii57670\", new Character((char) 0x05D6));\n\tlist.put(\"afii57671\", new Character((char) 0x05D7));\n\tlist.put(\"afii57672\", new Character((char) 0x05D8));\n\tlist.put(\"afii57673\", new Character((char) 0x05D9));\n\tlist.put(\"afii57674\", new Character((char) 0x05DA));\n\tlist.put(\"afii57675\", new Character((char) 0x05DB));\n\tlist.put(\"afii57676\", new Character((char) 0x05DC));\n\tlist.put(\"afii57677\", new Character((char) 0x05DD));\n\tlist.put(\"afii57678\", new Character((char) 0x05DE));\n\tlist.put(\"afii57679\", new Character((char) 0x05DF));\n\tlist.put(\"afii57680\", new Character((char) 0x05E0));\n\tlist.put(\"afii57681\", new Character((char) 0x05E1));\n\tlist.put(\"afii57682\", new Character((char) 0x05E2));\n\tlist.put(\"afii57683\", new Character((char) 0x05E3));\n\tlist.put(\"afii57684\", new Character((char) 0x05E4));\n\tlist.put(\"afii57685\", new Character((char) 0x05E5));\n\tlist.put(\"afii57686\", new Character((char) 0x05E6));\n\tlist.put(\"afii57687\", new Character((char) 0x05E7));\n\tlist.put(\"afii57688\", new Character((char) 0x05E8));\n\tlist.put(\"afii57689\", new Character((char) 0x05E9));\n\tlist.put(\"afii57690\", new Character((char) 0x05EA));\n\tlist.put(\"afii57694\", new Character((char) 0xFB2A));\n\tlist.put(\"afii57695\", new Character((char) 0xFB2B));\n\tlist.put(\"afii57700\", new Character((char) 0xFB4B));\n\tlist.put(\"afii57705\", new Character((char) 0xFB1F));\n\tlist.put(\"afii57716\", new Character((char) 0x05F0));\n\tlist.put(\"afii57717\", new Character((char) 0x05F1));\n\tlist.put(\"afii57718\", new Character((char) 0x05F2));\n\tlist.put(\"afii57723\", new Character((char) 0xFB35));\n\tlist.put(\"afii57793\", new Character((char) 0x05B4));\n\tlist.put(\"afii57794\", new Character((char) 0x05B5));\n\tlist.put(\"afii57795\", new Character((char) 0x05B6));\n\tlist.put(\"afii57796\", new Character((char) 0x05BB));\n\tlist.put(\"afii57797\", new Character((char) 0x05B8));\n\tlist.put(\"afii57798\", new Character((char) 0x05B7));\n\tlist.put(\"afii57799\", new Character((char) 0x05B0));\n\tlist.put(\"afii57800\", new Character((char) 0x05B2));\n\tlist.put(\"afii57801\", new Character((char) 0x05B1));\n\tlist.put(\"afii57802\", new Character((char) 0x05B3));\n\tlist.put(\"afii57803\", new Character((char) 0x05C2));\n\tlist.put(\"afii57804\", new Character((char) 0x05C1));\n\tlist.put(\"afii57806\", new Character((char) 0x05B9));\n\tlist.put(\"afii57807\", new Character((char) 0x05BC));\n\tlist.put(\"afii57839\", new Character((char) 0x05BD));\n\tlist.put(\"afii57841\", new Character((char) 0x05BF));\n\tlist.put(\"afii57842\", new Character((char) 0x05C0));\n\tlist.put(\"afii57929\", new Character((char) 0x02BC));\n\tlist.put(\"afii61248\", new Character((char) 0x2105));\n\tlist.put(\"afii61289\", new Character((char) 0x2113));\n\tlist.put(\"afii61352\", new Character((char) 0x2116));\n\tlist.put(\"afii61573\", new Character((char) 0x202C));\n\tlist.put(\"afii61574\", new Character((char) 0x202D));\n\tlist.put(\"afii61575\", new Character((char) 0x202E));\n\tlist.put(\"afii61664\", new Character((char) 0x200C));\n\tlist.put(\"afii63167\", new Character((char) 0x066D));\n\tlist.put(\"afii64937\", new Character((char) 0x02BD));\n\tlist.put(\"agrave\", new Character((char) 0x00E0));\n\tlist.put(\"agujarati\", new Character((char) 0x0A85));\n\tlist.put(\"agurmukhi\", new Character((char) 0x0A05));\n\tlist.put(\"ahiragana\", new Character((char) 0x3042));\n\tlist.put(\"ahookabove\", new Character((char) 0x1EA3));\n\tlist.put(\"aibengali\", new Character((char) 0x0990));\n\tlist.put(\"aibopomofo\", new Character((char) 0x311E));\n\tlist.put(\"aideva\", new Character((char) 0x0910));\n\tlist.put(\"aiecyrillic\", new Character((char) 0x04D5));\n\tlist.put(\"aigujarati\", new Character((char) 0x0A90));\n\tlist.put(\"aigurmukhi\", new Character((char) 0x0A10));\n\tlist.put(\"aimatragurmukhi\", new Character((char) 0x0A48));\n\tlist.put(\"ainarabic\", new Character((char) 0x0639));\n\tlist.put(\"ainfinalarabic\", new Character((char) 0xFECA));\n\tlist.put(\"aininitialarabic\", new Character((char) 0xFECB));\n\tlist.put(\"ainmedialarabic\", new Character((char) 0xFECC));\n\tlist.put(\"ainvertedbreve\", new Character((char) 0x0203));\n\tlist.put(\"aivowelsignbengali\", new Character((char) 0x09C8));\n\tlist.put(\"aivowelsigndeva\", new Character((char) 0x0948));\n\tlist.put(\"aivowelsigngujarati\", new Character((char) 0x0AC8));\n\tlist.put(\"akatakana\", new Character((char) 0x30A2));\n\tlist.put(\"akatakanahalfwidth\", new Character((char) 0xFF71));\n\tlist.put(\"akorean\", new Character((char) 0x314F));\n\tlist.put(\"alef\", new Character((char) 0x05D0));\n\tlist.put(\"alefarabic\", new Character((char) 0x0627));\n\tlist.put(\"alefdageshhebrew\", new Character((char) 0xFB30));\n\tlist.put(\"aleffinalarabic\", new Character((char) 0xFE8E));\n\tlist.put(\"alefhamzaabovearabic\", new Character((char) 0x0623));\n\tlist.put(\"alefhamzaabovefinalarabic\", new Character((char) 0xFE84));\n\tlist.put(\"alefhamzabelowarabic\", new Character((char) 0x0625));\n\tlist.put(\"alefhamzabelowfinalarabic\", new Character((char) 0xFE88));\n\tlist.put(\"alefhebrew\", new Character((char) 0x05D0));\n\tlist.put(\"aleflamedhebrew\", new Character((char) 0xFB4F));\n\tlist.put(\"alefmaddaabovearabic\", new Character((char) 0x0622));\n\tlist.put(\"alefmaddaabovefinalarabic\", new Character((char) 0xFE82));\n\tlist.put(\"alefmaksuraarabic\", new Character((char) 0x0649));\n\tlist.put(\"alefmaksurafinalarabic\", new Character((char) 0xFEF0));\n\tlist.put(\"alefmaksurainitialarabic\", new Character((char) 0xFEF3));\n\tlist.put(\"alefmaksuramedialarabic\", new Character((char) 0xFEF4));\n\tlist.put(\"alefpatahhebrew\", new Character((char) 0xFB2E));\n\tlist.put(\"alefqamatshebrew\", new Character((char) 0xFB2F));\n\tlist.put(\"aleph\", new Character((char) 0x2135));\n\tlist.put(\"allequal\", new Character((char) 0x224C));\n\tlist.put(\"alpha\", new Character((char) 0x03B1));\n\tlist.put(\"alphatonos\", new Character((char) 0x03AC));\n\tlist.put(\"amacron\", new Character((char) 0x0101));\n\tlist.put(\"amonospace\", new Character((char) 0xFF41));\n\tlist.put(\"ampersand\", new Character((char) 0x0026));\n\tlist.put(\"ampersandmonospace\", new Character((char) 0xFF06));\n\tlist.put(\"ampersandsmall\", new Character((char) 0xF726));\n\tlist.put(\"amsquare\", new Character((char) 0x33C2));\n\tlist.put(\"anbopomofo\", new Character((char) 0x3122));\n\tlist.put(\"angbopomofo\", new Character((char) 0x3124));\n\tlist.put(\"angkhankhuthai\", new Character((char) 0x0E5A));\n\tlist.put(\"angle\", new Character((char) 0x2220));\n\tlist.put(\"anglebracketleft\", new Character((char) 0x3008));\n\tlist.put(\"anglebracketleftvertical\", new Character((char) 0xFE3F));\n\tlist.put(\"anglebracketright\", new Character((char) 0x3009));\n\tlist.put(\"anglebracketrightvertical\", new Character((char) 0xFE40));\n\tlist.put(\"angleleft\", new Character((char) 0x2329));\n\tlist.put(\"angleright\", new Character((char) 0x232A));\n\tlist.put(\"angstrom\", new Character((char) 0x212B));\n\tlist.put(\"anoteleia\", new Character((char) 0x0387));\n\tlist.put(\"anudattadeva\", new Character((char) 0x0952));\n\tlist.put(\"anusvarabengali\", new Character((char) 0x0982));\n\tlist.put(\"anusvaradeva\", new Character((char) 0x0902));\n\tlist.put(\"anusvaragujarati\", new Character((char) 0x0A82));\n\tlist.put(\"aogonek\", new Character((char) 0x0105));\n\tlist.put(\"apaatosquare\", new Character((char) 0x3300));\n\tlist.put(\"aparen\", new Character((char) 0x249C));\n\tlist.put(\"apostrophearmenian\", new Character((char) 0x055A));\n\tlist.put(\"apostrophemod\", new Character((char) 0x02BC));\n\tlist.put(\"apple\", new Character((char) 0xF8FF));\n\tlist.put(\"approaches\", new Character((char) 0x2250));\n\tlist.put(\"approxequal\", new Character((char) 0x2248));\n\tlist.put(\"approxequalorimage\", new Character((char) 0x2252));\n\tlist.put(\"approximatelyequal\", new Character((char) 0x2245));\n\tlist.put(\"araeaekorean\", new Character((char) 0x318E));\n\tlist.put(\"araeakorean\", new Character((char) 0x318D));\n\tlist.put(\"arc\", new Character((char) 0x2312));\n\tlist.put(\"arighthalfring\", new Character((char) 0x1E9A));\n\tlist.put(\"aring\", new Character((char) 0x00E5));\n\tlist.put(\"aringacute\", new Character((char) 0x01FB));\n\tlist.put(\"aringbelow\", new Character((char) 0x1E01));\n\tlist.put(\"arrowboth\", new Character((char) 0x2194));\n\tlist.put(\"arrowdashdown\", new Character((char) 0x21E3));\n\tlist.put(\"arrowdashleft\", new Character((char) 0x21E0));\n\tlist.put(\"arrowdashright\", new Character((char) 0x21E2));\n\tlist.put(\"arrowdashup\", new Character((char) 0x21E1));\n\tlist.put(\"arrowdblboth\", new Character((char) 0x21D4));\n\tlist.put(\"arrowdbldown\", new Character((char) 0x21D3));\n\tlist.put(\"arrowdblleft\", new Character((char) 0x21D0));\n\tlist.put(\"arrowdblright\", new Character((char) 0x21D2));\n\tlist.put(\"arrowdblup\", new Character((char) 0x21D1));\n\tlist.put(\"arrowdown\", new Character((char) 0x2193));\n\tlist.put(\"arrowdownleft\", new Character((char) 0x2199));\n\tlist.put(\"arrowdownright\", new Character((char) 0x2198));\n\tlist.put(\"arrowdownwhite\", new Character((char) 0x21E9));\n\tlist.put(\"arrowheaddownmod\", new Character((char) 0x02C5));\n\tlist.put(\"arrowheadleftmod\", new Character((char) 0x02C2));\n\tlist.put(\"arrowheadrightmod\", new Character((char) 0x02C3));\n\tlist.put(\"arrowheadupmod\", new Character((char) 0x02C4));\n\tlist.put(\"arrowhorizex\", new Character((char) 0xF8E7));\n\tlist.put(\"arrowleft\", new Character((char) 0x2190));\n\tlist.put(\"arrowleftdbl\", new Character((char) 0x21D0));\n\tlist.put(\"arrowleftdblstroke\", new Character((char) 0x21CD));\n\tlist.put(\"arrowleftoverright\", new Character((char) 0x21C6));\n\tlist.put(\"arrowleftwhite\", new Character((char) 0x21E6));\n\tlist.put(\"arrowright\", new Character((char) 0x2192));\n\tlist.put(\"arrowrightdblstroke\", new Character((char) 0x21CF));\n\tlist.put(\"arrowrightheavy\", new Character((char) 0x279E));\n\tlist.put(\"arrowrightoverleft\", new Character((char) 0x21C4));\n\tlist.put(\"arrowrightwhite\", new Character((char) 0x21E8));\n\tlist.put(\"arrowtableft\", new Character((char) 0x21E4));\n\tlist.put(\"arrowtabright\", new Character((char) 0x21E5));\n\tlist.put(\"arrowup\", new Character((char) 0x2191));\n\tlist.put(\"arrowupdn\", new Character((char) 0x2195));\n\tlist.put(\"arrowupdnbse\", new Character((char) 0x21A8));\n\tlist.put(\"arrowupdownbase\", new Character((char) 0x21A8));\n\tlist.put(\"arrowupleft\", new Character((char) 0x2196));\n\tlist.put(\"arrowupleftofdown\", new Character((char) 0x21C5));\n\tlist.put(\"arrowupright\", new Character((char) 0x2197));\n\tlist.put(\"arrowupwhite\", new Character((char) 0x21E7));\n\tlist.put(\"arrowvertex\", new Character((char) 0xF8E6));\n\tlist.put(\"asciicircum\", new Character((char) 0x005E));\n\tlist.put(\"asciicircummonospace\", new Character((char) 0xFF3E));\n\tlist.put(\"asciitilde\", new Character((char) 0x007E));\n\tlist.put(\"asciitildemonospace\", new Character((char) 0xFF5E));\n\tlist.put(\"ascript\", new Character((char) 0x0251));\n\tlist.put(\"ascriptturned\", new Character((char) 0x0252));\n\tlist.put(\"asmallhiragana\", new Character((char) 0x3041));\n\tlist.put(\"asmallkatakana\", new Character((char) 0x30A1));\n\tlist.put(\"asmallkatakanahalfwidth\", new Character((char) 0xFF67));\n\tlist.put(\"asterisk\", new Character((char) 0x002A));\n\tlist.put(\"asteriskaltonearabic\", new Character((char) 0x066D));\n\tlist.put(\"asteriskarabic\", new Character((char) 0x066D));\n\tlist.put(\"asteriskmath\", new Character((char) 0x2217));\n\tlist.put(\"asteriskmonospace\", new Character((char) 0xFF0A));\n\tlist.put(\"asterisksmall\", new Character((char) 0xFE61));\n\tlist.put(\"asterism\", new Character((char) 0x2042));\n\tlist.put(\"asuperior\", new Character((char) 0xF6E9));\n\tlist.put(\"asymptoticallyequal\", new Character((char) 0x2243));\n\tlist.put(\"at\", new Character((char) 0x0040));\n\tlist.put(\"atilde\", new Character((char) 0x00E3));\n\tlist.put(\"atmonospace\", new Character((char) 0xFF20));\n\tlist.put(\"atsmall\", new Character((char) 0xFE6B));\n\tlist.put(\"aturned\", new Character((char) 0x0250));\n\tlist.put(\"aubengali\", new Character((char) 0x0994));\n\tlist.put(\"aubopomofo\", new Character((char) 0x3120));\n\tlist.put(\"audeva\", new Character((char) 0x0914));\n\tlist.put(\"augujarati\", new Character((char) 0x0A94));\n\tlist.put(\"augurmukhi\", new Character((char) 0x0A14));\n\tlist.put(\"aulengthmarkbengali\", new Character((char) 0x09D7));\n\tlist.put(\"aumatragurmukhi\", new Character((char) 0x0A4C));\n\tlist.put(\"auvowelsignbengali\", new Character((char) 0x09CC));\n\tlist.put(\"auvowelsigndeva\", new Character((char) 0x094C));\n\tlist.put(\"auvowelsigngujarati\", new Character((char) 0x0ACC));\n\tlist.put(\"avagrahadeva\", new Character((char) 0x093D));\n\tlist.put(\"aybarmenian\", new Character((char) 0x0561));\n\tlist.put(\"ayin\", new Character((char) 0x05E2));\n\tlist.put(\"ayinaltonehebrew\", new Character((char) 0xFB20));\n\tlist.put(\"ayinhebrew\", new Character((char) 0x05E2));\n\tlist.put(\"b\", new Character((char) 0x0062));\n\tlist.put(\"babengali\", new Character((char) 0x09AC));\n\tlist.put(\"backslash\", new Character((char) 0x005C));\n\tlist.put(\"backslashmonospace\", new Character((char) 0xFF3C));\n\tlist.put(\"badeva\", new Character((char) 0x092C));\n\tlist.put(\"bagujarati\", new Character((char) 0x0AAC));\n\tlist.put(\"bagurmukhi\", new Character((char) 0x0A2C));\n\tlist.put(\"bahiragana\", new Character((char) 0x3070));\n\tlist.put(\"bahtthai\", new Character((char) 0x0E3F));\n\tlist.put(\"bakatakana\", new Character((char) 0x30D0));\n\tlist.put(\"bar\", new Character((char) 0x007C));\n\tlist.put(\"barmonospace\", new Character((char) 0xFF5C));\n\tlist.put(\"bbopomofo\", new Character((char) 0x3105));\n\tlist.put(\"bcircle\", new Character((char) 0x24D1));\n\tlist.put(\"bdotaccent\", new Character((char) 0x1E03));\n\tlist.put(\"bdotbelow\", new Character((char) 0x1E05));\n\tlist.put(\"beamedsixteenthnotes\", new Character((char) 0x266C));\n\tlist.put(\"because\", new Character((char) 0x2235));\n\tlist.put(\"becyrillic\", new Character((char) 0x0431));\n\tlist.put(\"beharabic\", new Character((char) 0x0628));\n\tlist.put(\"behfinalarabic\", new Character((char) 0xFE90));\n\tlist.put(\"behinitialarabic\", new Character((char) 0xFE91));\n\tlist.put(\"behiragana\", new Character((char) 0x3079));\n\tlist.put(\"behmedialarabic\", new Character((char) 0xFE92));\n\tlist.put(\"behmeeminitialarabic\", new Character((char) 0xFC9F));\n\tlist.put(\"behmeemisolatedarabic\", new Character((char) 0xFC08));\n\tlist.put(\"behnoonfinalarabic\", new Character((char) 0xFC6D));\n\tlist.put(\"bekatakana\", new Character((char) 0x30D9));\n\tlist.put(\"benarmenian\", new Character((char) 0x0562));\n\tlist.put(\"bet\", new Character((char) 0x05D1));\n\tlist.put(\"beta\", new Character((char) 0x03B2));\n\tlist.put(\"betasymbolgreek\", new Character((char) 0x03D0));\n\tlist.put(\"betdagesh\", new Character((char) 0xFB31));\n\tlist.put(\"betdageshhebrew\", new Character((char) 0xFB31));\n\tlist.put(\"bethebrew\", new Character((char) 0x05D1));\n\tlist.put(\"betrafehebrew\", new Character((char) 0xFB4C));\n\tlist.put(\"bhabengali\", new Character((char) 0x09AD));\n\tlist.put(\"bhadeva\", new Character((char) 0x092D));\n\tlist.put(\"bhagujarati\", new Character((char) 0x0AAD));\n\tlist.put(\"bhagurmukhi\", new Character((char) 0x0A2D));\n\tlist.put(\"bhook\", new Character((char) 0x0253));\n\tlist.put(\"bihiragana\", new Character((char) 0x3073));\n\tlist.put(\"bikatakana\", new Character((char) 0x30D3));\n\tlist.put(\"bilabialclick\", new Character((char) 0x0298));\n\tlist.put(\"bindigurmukhi\", new Character((char) 0x0A02));\n\tlist.put(\"birusquare\", new Character((char) 0x3331));\n\tlist.put(\"blackcircle\", new Character((char) 0x25CF));\n\tlist.put(\"blackdiamond\", new Character((char) 0x25C6));\n\tlist.put(\"blackdownpointingtriangle\", new Character((char) 0x25BC));\n\tlist.put(\"blackleftpointingpointer\", new Character((char) 0x25C4));\n\tlist.put(\"blackleftpointingtriangle\", new Character((char) 0x25C0));\n\tlist.put(\"blacklenticularbracketleft\", new Character((char) 0x3010));\n\tlist.put(\"blacklenticularbracketleftvertical\", new Character(\n\t\t\t(char) 0xFE3B));\n\tlist.put(\"blacklenticularbracketright\", new Character((char) 0x3011));\n\tlist.put(\"blacklenticularbracketrightvertical\", new Character(\n\t\t\t(char) 0xFE3C));\n\tlist.put(\"blacklowerlefttriangle\", new Character((char) 0x25E3));\n\tlist.put(\"blacklowerrighttriangle\", new Character((char) 0x25E2));\n\tlist.put(\"blackrectangle\", new Character((char) 0x25AC));\n\tlist.put(\"blackrightpointingpointer\", new Character((char) 0x25BA));\n\tlist.put(\"blackrightpointingtriangle\", new Character((char) 0x25B6));\n\tlist.put(\"blacksmallsquare\", new Character((char) 0x25AA));\n\tlist.put(\"blacksmilingface\", new Character((char) 0x263B));\n\tlist.put(\"blacksquare\", new Character((char) 0x25A0));\n\tlist.put(\"blackstar\", new Character((char) 0x2605));\n\tlist.put(\"blackupperlefttriangle\", new Character((char) 0x25E4));\n\tlist.put(\"blackupperrighttriangle\", new Character((char) 0x25E5));\n\tlist.put(\"blackuppointingsmalltriangle\", new Character((char) 0x25B4));\n\tlist.put(\"blackuppointingtriangle\", new Character((char) 0x25B2));\n\tlist.put(\"blank\", new Character((char) 0x2423));\n\tlist.put(\"blinebelow\", new Character((char) 0x1E07));\n\tlist.put(\"block\", new Character((char) 0x2588));\n\tlist.put(\"bmonospace\", new Character((char) 0xFF42));\n\tlist.put(\"bobaimaithai\", new Character((char) 0x0E1A));\n\tlist.put(\"bohiragana\", new Character((char) 0x307C));\n\tlist.put(\"bokatakana\", new Character((char) 0x30DC));\n\tlist.put(\"bparen\", new Character((char) 0x249D));\n\tlist.put(\"bqsquare\", new Character((char) 0x33C3));\n\tlist.put(\"braceex\", new Character((char) 0xF8F4));\n\tlist.put(\"braceleft\", new Character((char) 0x007B));\n\tlist.put(\"braceleftbt\", new Character((char) 0xF8F3));\n\tlist.put(\"braceleftmid\", new Character((char) 0xF8F2));\n\tlist.put(\"braceleftmonospace\", new Character((char) 0xFF5B));\n\tlist.put(\"braceleftsmall\", new Character((char) 0xFE5B));\n\tlist.put(\"bracelefttp\", new Character((char) 0xF8F1));\n\tlist.put(\"braceleftvertical\", new Character((char) 0xFE37));\n\tlist.put(\"braceright\", new Character((char) 0x007D));\n\tlist.put(\"bracerightbt\", new Character((char) 0xF8FE));\n\tlist.put(\"bracerightmid\", new Character((char) 0xF8FD));\n\tlist.put(\"bracerightmonospace\", new Character((char) 0xFF5D));\n\tlist.put(\"bracerightsmall\", new Character((char) 0xFE5C));\n\tlist.put(\"bracerighttp\", new Character((char) 0xF8FC));\n\tlist.put(\"bracerightvertical\", new Character((char) 0xFE38));\n\tlist.put(\"bracketleft\", new Character((char) 0x005B));\n\tlist.put(\"bracketleftbt\", new Character((char) 0xF8F0));\n\tlist.put(\"bracketleftex\", new Character((char) 0xF8EF));\n\tlist.put(\"bracketleftmonospace\", new Character((char) 0xFF3B));\n\tlist.put(\"bracketlefttp\", new Character((char) 0xF8EE));\n\tlist.put(\"bracketright\", new Character((char) 0x005D));\n\tlist.put(\"bracketrightbt\", new Character((char) 0xF8FB));\n\tlist.put(\"bracketrightex\", new Character((char) 0xF8FA));\n\tlist.put(\"bracketrightmonospace\", new Character((char) 0xFF3D));\n\tlist.put(\"bracketrighttp\", new Character((char) 0xF8F9));\n\tlist.put(\"breve\", new Character((char) 0x02D8));\n\tlist.put(\"brevebelowcmb\", new Character((char) 0x032E));\n\tlist.put(\"brevecmb\", new Character((char) 0x0306));\n\tlist.put(\"breveinvertedbelowcmb\", new Character((char) 0x032F));\n\tlist.put(\"breveinvertedcmb\", new Character((char) 0x0311));\n\tlist.put(\"breveinverteddoublecmb\", new Character((char) 0x0361));\n\tlist.put(\"bridgebelowcmb\", new Character((char) 0x032A));\n\tlist.put(\"bridgeinvertedbelowcmb\", new Character((char) 0x033A));\n\tlist.put(\"brokenbar\", new Character((char) 0x00A6));\n\tlist.put(\"bstroke\", new Character((char) 0x0180));\n\tlist.put(\"bsuperior\", new Character((char) 0xF6EA));\n\tlist.put(\"btopbar\", new Character((char) 0x0183));\n\tlist.put(\"buhiragana\", new Character((char) 0x3076));\n\tlist.put(\"bukatakana\", new Character((char) 0x30D6));\n\tlist.put(\"bullet\", new Character((char) 0x2022));\n\tlist.put(\"bulletinverse\", new Character((char) 0x25D8));\n\tlist.put(\"bulletoperator\", new Character((char) 0x2219));\n\tlist.put(\"bullseye\", new Character((char) 0x25CE));\n\tlist.put(\"c\", new Character((char) 0x0063));\n\tlist.put(\"caarmenian\", new Character((char) 0x056E));\n\tlist.put(\"cabengali\", new Character((char) 0x099A));\n\tlist.put(\"cacute\", new Character((char) 0x0107));\n\tlist.put(\"cadeva\", new Character((char) 0x091A));\n\tlist.put(\"cagujarati\", new Character((char) 0x0A9A));\n\tlist.put(\"cagurmukhi\", new Character((char) 0x0A1A));\n\tlist.put(\"calsquare\", new Character((char) 0x3388));\n\tlist.put(\"candrabindubengali\", new Character((char) 0x0981));\n\tlist.put(\"candrabinducmb\", new Character((char) 0x0310));\n\tlist.put(\"candrabindudeva\", new Character((char) 0x0901));\n\tlist.put(\"candrabindugujarati\", new Character((char) 0x0A81));\n\tlist.put(\"capslock\", new Character((char) 0x21EA));\n\tlist.put(\"careof\", new Character((char) 0x2105));\n\tlist.put(\"caron\", new Character((char) 0x02C7));\n\tlist.put(\"caronbelowcmb\", new Character((char) 0x032C));\n\tlist.put(\"caroncmb\", new Character((char) 0x030C));\n\tlist.put(\"carriagereturn\", new Character((char) 0x21B5));\n\tlist.put(\"cbopomofo\", new Character((char) 0x3118));\n\tlist.put(\"ccaron\", new Character((char) 0x010D));\n\tlist.put(\"ccedilla\", new Character((char) 0x00E7));\n\tlist.put(\"ccedillaacute\", new Character((char) 0x1E09));\n\tlist.put(\"ccircle\", new Character((char) 0x24D2));\n\tlist.put(\"ccircumflex\", new Character((char) 0x0109));\n\tlist.put(\"ccurl\", new Character((char) 0x0255));\n\tlist.put(\"cdot\", new Character((char) 0x010B));\n\tlist.put(\"cdotaccent\", new Character((char) 0x010B));\n\tlist.put(\"cdsquare\", new Character((char) 0x33C5));\n\tlist.put(\"cedilla\", new Character((char) 0x00B8));\n\tlist.put(\"cedillacmb\", new Character((char) 0x0327));\n\tlist.put(\"cent\", new Character((char) 0x00A2));\n\tlist.put(\"centigrade\", new Character((char) 0x2103));\n\tlist.put(\"centinferior\", new Character((char) 0xF6DF));\n\tlist.put(\"centmonospace\", new Character((char) 0xFFE0));\n\tlist.put(\"centoldstyle\", new Character((char) 0xF7A2));\n\tlist.put(\"centsuperior\", new Character((char) 0xF6E0));\n\tlist.put(\"chaarmenian\", new Character((char) 0x0579));\n\tlist.put(\"chabengali\", new Character((char) 0x099B));\n\tlist.put(\"chadeva\", new Character((char) 0x091B));\n\tlist.put(\"chagujarati\", new Character((char) 0x0A9B));\n\tlist.put(\"chagurmukhi\", new Character((char) 0x0A1B));\n\tlist.put(\"chbopomofo\", new Character((char) 0x3114));\n\tlist.put(\"cheabkhasiancyrillic\", new Character((char) 0x04BD));\n\tlist.put(\"checkmark\", new Character((char) 0x2713));\n\tlist.put(\"checyrillic\", new Character((char) 0x0447));\n\tlist.put(\"chedescenderabkhasiancyrillic\", new Character((char) 0x04BF));\n\tlist.put(\"chedescendercyrillic\", new Character((char) 0x04B7));\n\tlist.put(\"chedieresiscyrillic\", new Character((char) 0x04F5));\n\tlist.put(\"cheharmenian\", new Character((char) 0x0573));\n\tlist.put(\"chekhakassiancyrillic\", new Character((char) 0x04CC));\n\tlist.put(\"cheverticalstrokecyrillic\", new Character((char) 0x04B9));\n\tlist.put(\"chi\", new Character((char) 0x03C7));\n\tlist.put(\"chieuchacirclekorean\", new Character((char) 0x3277));\n\tlist.put(\"chieuchaparenkorean\", new Character((char) 0x3217));\n\tlist.put(\"chieuchcirclekorean\", new Character((char) 0x3269));\n\tlist.put(\"chieuchkorean\", new Character((char) 0x314A));\n\tlist.put(\"chieuchparenkorean\", new Character((char) 0x3209));\n\tlist.put(\"chochangthai\", new Character((char) 0x0E0A));\n\tlist.put(\"chochanthai\", new Character((char) 0x0E08));\n\tlist.put(\"chochingthai\", new Character((char) 0x0E09));\n\tlist.put(\"chochoethai\", new Character((char) 0x0E0C));\n\tlist.put(\"chook\", new Character((char) 0x0188));\n\tlist.put(\"cieucacirclekorean\", new Character((char) 0x3276));\n\tlist.put(\"cieucaparenkorean\", new Character((char) 0x3216));\n\tlist.put(\"cieuccirclekorean\", new Character((char) 0x3268));\n\tlist.put(\"cieuckorean\", new Character((char) 0x3148));\n\tlist.put(\"cieucparenkorean\", new Character((char) 0x3208));\n\tlist.put(\"cieucuparenkorean\", new Character((char) 0x321C));\n\tlist.put(\"circle\", new Character((char) 0x25CB));\n\tlist.put(\"circlemultiply\", new Character((char) 0x2297));\n\tlist.put(\"circleot\", new Character((char) 0x2299));\n\tlist.put(\"circleplus\", new Character((char) 0x2295));\n\tlist.put(\"circlepostalmark\", new Character((char) 0x3036));\n\tlist.put(\"circlewithlefthalfblack\", new Character((char) 0x25D0));\n\tlist.put(\"circlewithrighthalfblack\", new Character((char) 0x25D1));\n\tlist.put(\"circumflex\", new Character((char) 0x02C6));\n\tlist.put(\"circumflexbelowcmb\", new Character((char) 0x032D));\n\tlist.put(\"circumflexcmb\", new Character((char) 0x0302));\n\tlist.put(\"clear\", new Character((char) 0x2327));\n\tlist.put(\"clickalveolar\", new Character((char) 0x01C2));\n\tlist.put(\"clickdental\", new Character((char) 0x01C0));\n\tlist.put(\"clicklateral\", new Character((char) 0x01C1));\n\tlist.put(\"clickretroflex\", new Character((char) 0x01C3));\n\tlist.put(\"club\", new Character((char) 0x2663));\n\tlist.put(\"clubsuitblack\", new Character((char) 0x2663));\n\tlist.put(\"clubsuitwhite\", new Character((char) 0x2667));\n\tlist.put(\"cmcubedsquare\", new Character((char) 0x33A4));\n\tlist.put(\"cmonospace\", new Character((char) 0xFF43));\n\tlist.put(\"cmsquaredsquare\", new Character((char) 0x33A0));\n\tlist.put(\"coarmenian\", new Character((char) 0x0581));\n\tlist.put(\"colon\", new Character((char) 0x003A));\n\tlist.put(\"colonmonetary\", new Character((char) 0x20A1));\n\tlist.put(\"colonmonospace\", new Character((char) 0xFF1A));\n\tlist.put(\"colonsign\", new Character((char) 0x20A1));\n\tlist.put(\"colonsmall\", new Character((char) 0xFE55));\n\tlist.put(\"colontriangularhalfmod\", new Character((char) 0x02D1));\n\tlist.put(\"colontriangularmod\", new Character((char) 0x02D0));\n\tlist.put(\"comma\", new Character((char) 0x002C));\n\tlist.put(\"commaabovecmb\", new Character((char) 0x0313));\n\tlist.put(\"commaaboverightcmb\", new Character((char) 0x0315));\n\tlist.put(\"commaaccent\", new Character((char) 0xF6C3));\n\tlist.put(\"commaarabic\", new Character((char) 0x060C));\n\tlist.put(\"commaarmenian\", new Character((char) 0x055D));\n\tlist.put(\"commainferior\", new Character((char) 0xF6E1));\n\tlist.put(\"commamonospace\", new Character((char) 0xFF0C));\n\tlist.put(\"commareversedabovecmb\", new Character((char) 0x0314));\n\tlist.put(\"commareversedmod\", new Character((char) 0x02BD));\n\tlist.put(\"commasmall\", new Character((char) 0xFE50));\n\tlist.put(\"commasuperior\", new Character((char) 0xF6E2));\n\tlist.put(\"commaturnedabovecmb\", new Character((char) 0x0312));\n\tlist.put(\"commaturnedmod\", new Character((char) 0x02BB));\n\tlist.put(\"compass\", new Character((char) 0x263C));\n\tlist.put(\"congruent\", new Character((char) 0x2245));\n\tlist.put(\"contourintegral\", new Character((char) 0x222E));\n\tlist.put(\"control\", new Character((char) 0x2303));\n\tlist.put(\"controlACK\", new Character((char) 0x0006));\n\tlist.put(\"controlBEL\", new Character((char) 0x0007));\n\tlist.put(\"controlBS\", new Character((char) 0x0008));\n\tlist.put(\"controlCAN\", new Character((char) 0x0018));\n\tlist.put(\"controlCR\", new Character((char) 0x000D));\n\tlist.put(\"controlDC1\", new Character((char) 0x0011));\n\tlist.put(\"controlDC2\", new Character((char) 0x0012));\n\tlist.put(\"controlDC3\", new Character((char) 0x0013));\n\tlist.put(\"controlDC4\", new Character((char) 0x0014));\n\tlist.put(\"controlDEL\", new Character((char) 0x007F));\n\tlist.put(\"controlDLE\", new Character((char) 0x0010));\n\tlist.put(\"controlEM\", new Character((char) 0x0019));\n\tlist.put(\"controlENQ\", new Character((char) 0x0005));\n\tlist.put(\"controlEOT\", new Character((char) 0x0004));\n\tlist.put(\"controlESC\", new Character((char) 0x001B));\n\tlist.put(\"controlETB\", new Character((char) 0x0017));\n\tlist.put(\"controlETX\", new Character((char) 0x0003));\n\tlist.put(\"controlFF\", new Character((char) 0x000C));\n\tlist.put(\"controlFS\", new Character((char) 0x001C));\n\tlist.put(\"controlGS\", new Character((char) 0x001D));\n\tlist.put(\"controlHT\", new Character((char) 0x0009));\n\tlist.put(\"controlLF\", new Character((char) 0x000A));\n\tlist.put(\"controlNAK\", new Character((char) 0x0015));\n\tlist.put(\"controlRS\", new Character((char) 0x001E));\n\tlist.put(\"controlSI\", new Character((char) 0x000F));\n\tlist.put(\"controlSO\", new Character((char) 0x000E));\n\tlist.put(\"controlSOT\", new Character((char) 0x0002));\n\tlist.put(\"controlSTX\", new Character((char) 0x0001));\n\tlist.put(\"controlSUB\", new Character((char) 0x001A));\n\tlist.put(\"controlSYN\", new Character((char) 0x0016));\n\tlist.put(\"controlUS\", new Character((char) 0x001F));\n\tlist.put(\"controlVT\", new Character((char) 0x000B));\n\tlist.put(\"copyright\", new Character((char) 0x00A9));\n\tlist.put(\"copyrightsans\", new Character((char) 0xF8E9));\n\tlist.put(\"copyrightserif\", new Character((char) 0xF6D9));\n\tlist.put(\"cornerbracketleft\", new Character((char) 0x300C));\n\tlist.put(\"cornerbracketlefthalfwidth\", new Character((char) 0xFF62));\n\tlist.put(\"cornerbracketleftvertical\", new Character((char) 0xFE41));\n\tlist.put(\"cornerbracketright\", new Character((char) 0x300D));\n\tlist.put(\"cornerbracketrighthalfwidth\", new Character((char) 0xFF63));\n\tlist.put(\"cornerbracketrightvertical\", new Character((char) 0xFE42));\n\tlist.put(\"corporationsquare\", new Character((char) 0x337F));\n\tlist.put(\"cosquare\", new Character((char) 0x33C7));\n\tlist.put(\"coverkgsquare\", new Character((char) 0x33C6));\n\tlist.put(\"cparen\", new Character((char) 0x249E));\n\tlist.put(\"cruzeiro\", new Character((char) 0x20A2));\n\tlist.put(\"cstretched\", new Character((char) 0x0297));\n\tlist.put(\"curlyand\", new Character((char) 0x22CF));\n\tlist.put(\"curlyor\", new Character((char) 0x22CE));\n\tlist.put(\"currency\", new Character((char) 0x00A4));\n\tlist.put(\"cyrBreve\", new Character((char) 0xF6D1));\n\tlist.put(\"cyrFlex\", new Character((char) 0xF6D2));\n\tlist.put(\"cyrbreve\", new Character((char) 0xF6D4));\n\tlist.put(\"cyrflex\", new Character((char) 0xF6D5));\n\tlist.put(\"d\", new Character((char) 0x0064));\n\tlist.put(\"daarmenian\", new Character((char) 0x0564));\n\tlist.put(\"dabengali\", new Character((char) 0x09A6));\n\tlist.put(\"dadarabic\", new Character((char) 0x0636));\n\tlist.put(\"dadeva\", new Character((char) 0x0926));\n\tlist.put(\"dadfinalarabic\", new Character((char) 0xFEBE));\n\tlist.put(\"dadinitialarabic\", new Character((char) 0xFEBF));\n\tlist.put(\"dadmedialarabic\", new Character((char) 0xFEC0));\n\tlist.put(\"dagesh\", new Character((char) 0x05BC));\n\tlist.put(\"dageshhebrew\", new Character((char) 0x05BC));\n\tlist.put(\"dagger\", new Character((char) 0x2020));\n\tlist.put(\"daggerdbl\", new Character((char) 0x2021));\n\tlist.put(\"dagujarati\", new Character((char) 0x0AA6));\n\tlist.put(\"dagurmukhi\", new Character((char) 0x0A26));\n\tlist.put(\"dahiragana\", new Character((char) 0x3060));\n\tlist.put(\"dakatakana\", new Character((char) 0x30C0));\n\tlist.put(\"dalarabic\", new Character((char) 0x062F));\n\tlist.put(\"dalet\", new Character((char) 0x05D3));\n\tlist.put(\"daletdagesh\", new Character((char) 0xFB33));\n\tlist.put(\"daletdageshhebrew\", new Character((char) 0xFB33));\n\t// list.put(\"dalethatafpatah\", new Character((char)0x05D3 05B2));\n\t// list.put(\"dalethatafpatahhebrew\", new Character((char)0x05D3 05B2));\n\t// list.put(\"dalethatafsegol\", new Character((char)0x05D3 05B1));\n\t// list.put(\"dalethatafsegolhebrew\", new Character((char)0x05D3 05B1));\n\tlist.put(\"dalethebrew\", new Character((char) 0x05D3));\n\t// list.put(\"dalethiriq\", new Character((char)0x05D3 05B4));\n\t// list.put(\"dalethiriqhebrew\", new Character((char)0x05D3 05B4));\n\t// list.put(\"daletholam\", new Character((char)0x05D3 05B9));\n\t// list.put(\"daletholamhebrew\", new Character((char)0x05D3 05B9));\n\t// list.put(\"daletpatah\", new Character((char)0x05D3 05B7));\n\t// list.put(\"daletpatahhebrew\", new Character((char)0x05D3 05B7));\n\t// list.put(\"daletqamats\", new Character((char)0x05D3 05B8));\n\t// list.put(\"daletqamatshebrew\", new Character((char)0x05D3 05B8));\n\t// list.put(\"daletqubuts\", new Character((char)0x05D3 05BB));\n\t// list.put(\"daletqubutshebrew\", new Character((char)0x05D3 05BB));\n\t// list.put(\"daletsegol\", new Character((char)0x05D3 05B6));\n\t// list.put(\"daletsegolhebrew\", new Character((char)0x05D3 05B6));\n\t// list.put(\"daletsheva\", new Character((char)0x05D3 05B0));\n\t// list.put(\"daletshevahebrew\", new Character((char)0x05D3 05B0));\n\t// list.put(\"dalettsere\", new Character((char)0x05D3 05B5));\n\t// list.put(\"dalettserehebrew\", new Character((char)0x05D3 05B5));\n\tlist.put(\"dalfinalarabic\", new Character((char) 0xFEAA));\n\tlist.put(\"dammaarabic\", new Character((char) 0x064F));\n\tlist.put(\"dammalowarabic\", new Character((char) 0x064F));\n\tlist.put(\"dammatanaltonearabic\", new Character((char) 0x064C));\n\tlist.put(\"dammatanarabic\", new Character((char) 0x064C));\n\tlist.put(\"danda\", new Character((char) 0x0964));\n\tlist.put(\"dargahebrew\", new Character((char) 0x05A7));\n\tlist.put(\"dargalefthebrew\", new Character((char) 0x05A7));\n\tlist.put(\"dasiapneumatacyrilliccmb\", new Character((char) 0x0485));\n\tlist.put(\"dblGrave\", new Character((char) 0xF6D3));\n\tlist.put(\"dblanglebracketleft\", new Character((char) 0x300A));\n\tlist.put(\"dblanglebracketleftvertical\", new Character((char) 0xFE3D));\n\tlist.put(\"dblanglebracketright\", new Character((char) 0x300B));\n\tlist.put(\"dblanglebracketrightvertical\", new Character((char) 0xFE3E));\n\tlist.put(\"dblarchinvertedbelowcmb\", new Character((char) 0x032B));\n\tlist.put(\"dblarrowleft\", new Character((char) 0x21D4));\n\tlist.put(\"dblarrowright\", new Character((char) 0x21D2));\n\tlist.put(\"dbldanda\", new Character((char) 0x0965));\n\tlist.put(\"dblgrave\", new Character((char) 0xF6D6));\n\tlist.put(\"dblgravecmb\", new Character((char) 0x030F));\n\tlist.put(\"dblintegral\", new Character((char) 0x222C));\n\tlist.put(\"dbllowline\", new Character((char) 0x2017));\n\tlist.put(\"dbllowlinecmb\", new Character((char) 0x0333));\n\tlist.put(\"dbloverlinecmb\", new Character((char) 0x033F));\n\tlist.put(\"dblprimemod\", new Character((char) 0x02BA));\n\tlist.put(\"dblverticalbar\", new Character((char) 0x2016));\n\tlist.put(\"dblverticallineabovecmb\", new Character((char) 0x030E));\n\tlist.put(\"dbopomofo\", new Character((char) 0x3109));\n\tlist.put(\"dbsquare\", new Character((char) 0x33C8));\n\tlist.put(\"dcaron\", new Character((char) 0x010F));\n\tlist.put(\"dcedilla\", new Character((char) 0x1E11));\n\tlist.put(\"dcircle\", new Character((char) 0x24D3));\n\tlist.put(\"dcircumflexbelow\", new Character((char) 0x1E13));\n\tlist.put(\"dcroat\", new Character((char) 0x0111));\n\tlist.put(\"ddabengali\", new Character((char) 0x09A1));\n\tlist.put(\"ddadeva\", new Character((char) 0x0921));\n\tlist.put(\"ddagujarati\", new Character((char) 0x0AA1));\n\tlist.put(\"ddagurmukhi\", new Character((char) 0x0A21));\n\tlist.put(\"ddalarabic\", new Character((char) 0x0688));\n\tlist.put(\"ddalfinalarabic\", new Character((char) 0xFB89));\n\tlist.put(\"dddhadeva\", new Character((char) 0x095C));\n\tlist.put(\"ddhabengali\", new Character((char) 0x09A2));\n\tlist.put(\"ddhadeva\", new Character((char) 0x0922));\n\tlist.put(\"ddhagujarati\", new Character((char) 0x0AA2));\n\tlist.put(\"ddhagurmukhi\", new Character((char) 0x0A22));\n\tlist.put(\"ddotaccent\", new Character((char) 0x1E0B));\n\tlist.put(\"ddotbelow\", new Character((char) 0x1E0D));\n\tlist.put(\"decimalseparatorarabic\", new Character((char) 0x066B));\n\tlist.put(\"decimalseparatorpersian\", new Character((char) 0x066B));\n\tlist.put(\"decyrillic\", new Character((char) 0x0434));\n\tlist.put(\"degree\", new Character((char) 0x00B0));\n\tlist.put(\"dehihebrew\", new Character((char) 0x05AD));\n\tlist.put(\"dehiragana\", new Character((char) 0x3067));\n\tlist.put(\"deicoptic\", new Character((char) 0x03EF));\n\tlist.put(\"dekatakana\", new Character((char) 0x30C7));\n\tlist.put(\"deleteleft\", new Character((char) 0x232B));\n\tlist.put(\"deleteright\", new Character((char) 0x2326));\n\tlist.put(\"delta\", new Character((char) 0x03B4));\n\tlist.put(\"deltaturned\", new Character((char) 0x018D));\n\tlist.put(\"denominatorminusonenumeratorbengali\", new Character(\n\t\t\t(char) 0x09F8));\n\tlist.put(\"dezh\", new Character((char) 0x02A4));\n\tlist.put(\"dhabengali\", new Character((char) 0x09A7));\n\tlist.put(\"dhadeva\", new Character((char) 0x0927));\n\tlist.put(\"dhagujarati\", new Character((char) 0x0AA7));\n\tlist.put(\"dhagurmukhi\", new Character((char) 0x0A27));\n\tlist.put(\"dhook\", new Character((char) 0x0257));\n\tlist.put(\"dialytikatonos\", new Character((char) 0x0385));\n\tlist.put(\"dialytikatonoscmb\", new Character((char) 0x0344));\n\tlist.put(\"diamond\", new Character((char) 0x2666));\n\tlist.put(\"diamondsuitwhite\", new Character((char) 0x2662));\n\tlist.put(\"dieresis\", new Character((char) 0x00A8));\n\tlist.put(\"dieresisacute\", new Character((char) 0xF6D7));\n\tlist.put(\"dieresisbelowcmb\", new Character((char) 0x0324));\n\tlist.put(\"dieresiscmb\", new Character((char) 0x0308));\n\tlist.put(\"dieresisgrave\", new Character((char) 0xF6D8));\n\tlist.put(\"dieresistonos\", new Character((char) 0x0385));\n\tlist.put(\"dihiragana\", new Character((char) 0x3062));\n\tlist.put(\"dikatakana\", new Character((char) 0x30C2));\n\tlist.put(\"dittomark\", new Character((char) 0x3003));\n\tlist.put(\"divide\", new Character((char) 0x00F7));\n\tlist.put(\"divides\", new Character((char) 0x2223));\n\tlist.put(\"divisionslash\", new Character((char) 0x2215));\n\tlist.put(\"djecyrillic\", new Character((char) 0x0452));\n\tlist.put(\"dkshade\", new Character((char) 0x2593));\n\tlist.put(\"dlinebelow\", new Character((char) 0x1E0F));\n\tlist.put(\"dlsquare\", new Character((char) 0x3397));\n\tlist.put(\"dmacron\", new Character((char) 0x0111));\n\tlist.put(\"dmonospace\", new Character((char) 0xFF44));\n\tlist.put(\"dnblock\", new Character((char) 0x2584));\n\tlist.put(\"dochadathai\", new Character((char) 0x0E0E));\n\tlist.put(\"dodekthai\", new Character((char) 0x0E14));\n\tlist.put(\"dohiragana\", new Character((char) 0x3069));\n\tlist.put(\"dokatakana\", new Character((char) 0x30C9));\n\tlist.put(\"dollar\", new Character((char) 0x0024));\n\tlist.put(\"dollarinferior\", new Character((char) 0xF6E3));\n\tlist.put(\"dollarmonospace\", new Character((char) 0xFF04));\n\tlist.put(\"dollaroldstyle\", new Character((char) 0xF724));\n\tlist.put(\"dollarsmall\", new Character((char) 0xFE69));\n\tlist.put(\"dollarsuperior\", new Character((char) 0xF6E4));\n\tlist.put(\"dong\", new Character((char) 0x20AB));\n\tlist.put(\"dorusquare\", new Character((char) 0x3326));\n\tlist.put(\"dotaccent\", new Character((char) 0x02D9));\n\tlist.put(\"dotaccentcmb\", new Character((char) 0x0307));\n\tlist.put(\"dotbelowcmb\", new Character((char) 0x0323));\n\tlist.put(\"dotbelowcomb\", new Character((char) 0x0323));\n\tlist.put(\"dotkatakana\", new Character((char) 0x30FB));\n\tlist.put(\"dotlessi\", new Character((char) 0x0131));\n\tlist.put(\"dotlessj\", new Character((char) 0xF6BE));\n\tlist.put(\"dotlessjstrokehook\", new Character((char) 0x0284));\n\tlist.put(\"dotmath\", new Character((char) 0x22C5));\n\tlist.put(\"dottedcircle\", new Character((char) 0x25CC));\n\tlist.put(\"doubleyodpatah\", new Character((char) 0xFB1F));\n\tlist.put(\"doubleyodpatahhebrew\", new Character((char) 0xFB1F));\n\tlist.put(\"downtackbelowcmb\", new Character((char) 0x031E));\n\tlist.put(\"downtackmod\", new Character((char) 0x02D5));\n\tlist.put(\"dparen\", new Character((char) 0x249F));\n\tlist.put(\"dsuperior\", new Character((char) 0xF6EB));\n\tlist.put(\"dtail\", new Character((char) 0x0256));\n\tlist.put(\"dtopbar\", new Character((char) 0x018C));\n\tlist.put(\"duhiragana\", new Character((char) 0x3065));\n\tlist.put(\"dukatakana\", new Character((char) 0x30C5));\n\tlist.put(\"dz\", new Character((char) 0x01F3));\n\tlist.put(\"dzaltone\", new Character((char) 0x02A3));\n\tlist.put(\"dzcaron\", new Character((char) 0x01C6));\n\tlist.put(\"dzcurl\", new Character((char) 0x02A5));\n\tlist.put(\"dzeabkhasiancyrillic\", new Character((char) 0x04E1));\n\tlist.put(\"dzecyrillic\", new Character((char) 0x0455));\n\tlist.put(\"dzhecyrillic\", new Character((char) 0x045F));\n\tlist.put(\"e\", new Character((char) 0x0065));\n\tlist.put(\"eacute\", new Character((char) 0x00E9));\n\tlist.put(\"earth\", new Character((char) 0x2641));\n\tlist.put(\"ebengali\", new Character((char) 0x098F));\n\tlist.put(\"ebopomofo\", new Character((char) 0x311C));\n\tlist.put(\"ebreve\", new Character((char) 0x0115));\n\tlist.put(\"ecandradeva\", new Character((char) 0x090D));\n\tlist.put(\"ecandragujarati\", new Character((char) 0x0A8D));\n\tlist.put(\"ecandravowelsigndeva\", new Character((char) 0x0945));\n\tlist.put(\"ecandravowelsigngujarati\", new Character((char) 0x0AC5));\n\tlist.put(\"ecaron\", new Character((char) 0x011B));\n\tlist.put(\"ecedillabreve\", new Character((char) 0x1E1D));\n\tlist.put(\"echarmenian\", new Character((char) 0x0565));\n\tlist.put(\"echyiwnarmenian\", new Character((char) 0x0587));\n\tlist.put(\"ecircle\", new Character((char) 0x24D4));\n\tlist.put(\"ecircumflex\", new Character((char) 0x00EA));\n\tlist.put(\"ecircumflexacute\", new Character((char) 0x1EBF));\n\tlist.put(\"ecircumflexbelow\", new Character((char) 0x1E19));\n\tlist.put(\"ecircumflexdotbelow\", new Character((char) 0x1EC7));\n\tlist.put(\"ecircumflexgrave\", new Character((char) 0x1EC1));\n\tlist.put(\"ecircumflexhookabove\", new Character((char) 0x1EC3));\n\tlist.put(\"ecircumflextilde\", new Character((char) 0x1EC5));\n\tlist.put(\"ecyrillic\", new Character((char) 0x0454));\n\tlist.put(\"edblgrave\", new Character((char) 0x0205));\n\tlist.put(\"edeva\", new Character((char) 0x090F));\n\tlist.put(\"edieresis\", new Character((char) 0x00EB));\n\tlist.put(\"edot\", new Character((char) 0x0117));\n\tlist.put(\"edotaccent\", new Character((char) 0x0117));\n\tlist.put(\"edotbelow\", new Character((char) 0x1EB9));\n\tlist.put(\"eegurmukhi\", new Character((char) 0x0A0F));\n\tlist.put(\"eematragurmukhi\", new Character((char) 0x0A47));\n\tlist.put(\"efcyrillic\", new Character((char) 0x0444));\n\tlist.put(\"egrave\", new Character((char) 0x00E8));\n\tlist.put(\"egujarati\", new Character((char) 0x0A8F));\n\tlist.put(\"eharmenian\", new Character((char) 0x0567));\n\tlist.put(\"ehbopomofo\", new Character((char) 0x311D));\n\tlist.put(\"ehiragana\", new Character((char) 0x3048));\n\tlist.put(\"ehookabove\", new Character((char) 0x1EBB));\n\tlist.put(\"eibopomofo\", new Character((char) 0x311F));\n\tlist.put(\"eight\", new Character((char) 0x0038));\n\tlist.put(\"eightarabic\", new Character((char) 0x0668));\n\tlist.put(\"eightbengali\", new Character((char) 0x09EE));\n\tlist.put(\"eightcircle\", new Character((char) 0x2467));\n\tlist.put(\"eightcircleinversesansserif\", new Character((char) 0x2791));\n\tlist.put(\"eightdeva\", new Character((char) 0x096E));\n\tlist.put(\"eighteencircle\", new Character((char) 0x2471));\n\tlist.put(\"eighteenparen\", new Character((char) 0x2485));\n\tlist.put(\"eighteenperiod\", new Character((char) 0x2499));\n\tlist.put(\"eightgujarati\", new Character((char) 0x0AEE));\n\tlist.put(\"eightgurmukhi\", new Character((char) 0x0A6E));\n\tlist.put(\"eighthackarabic\", new Character((char) 0x0668));\n\tlist.put(\"eighthangzhou\", new Character((char) 0x3028));\n\tlist.put(\"eighthnotebeamed\", new Character((char) 0x266B));\n\tlist.put(\"eightideographicparen\", new Character((char) 0x3227));\n\tlist.put(\"eightinferior\", new Character((char) 0x2088));\n\tlist.put(\"eightmonospace\", new Character((char) 0xFF18));\n\tlist.put(\"eightoldstyle\", new Character((char) 0xF738));\n\tlist.put(\"eightparen\", new Character((char) 0x247B));\n\tlist.put(\"eightperiod\", new Character((char) 0x248F));\n\tlist.put(\"eightpersian\", new Character((char) 0x06F8));\n\tlist.put(\"eightroman\", new Character((char) 0x2177));\n\tlist.put(\"eightsuperior\", new Character((char) 0x2078));\n\tlist.put(\"eightthai\", new Character((char) 0x0E58));\n\tlist.put(\"einvertedbreve\", new Character((char) 0x0207));\n\tlist.put(\"eiotifiedcyrillic\", new Character((char) 0x0465));\n\tlist.put(\"ekatakana\", new Character((char) 0x30A8));\n\tlist.put(\"ekatakanahalfwidth\", new Character((char) 0xFF74));\n\tlist.put(\"ekonkargurmukhi\", new Character((char) 0x0A74));\n\tlist.put(\"ekorean\", new Character((char) 0x3154));\n\tlist.put(\"elcyrillic\", new Character((char) 0x043B));\n\tlist.put(\"element\", new Character((char) 0x2208));\n\tlist.put(\"elevencircle\", new Character((char) 0x246A));\n\tlist.put(\"elevenparen\", new Character((char) 0x247E));\n\tlist.put(\"elevenperiod\", new Character((char) 0x2492));\n\tlist.put(\"elevenroman\", new Character((char) 0x217A));\n\tlist.put(\"ellipsis\", new Character((char) 0x2026));\n\tlist.put(\"ellipsisvertical\", new Character((char) 0x22EE));\n\tlist.put(\"emacron\", new Character((char) 0x0113));\n\tlist.put(\"emacronacute\", new Character((char) 0x1E17));\n\tlist.put(\"emacrongrave\", new Character((char) 0x1E15));\n\tlist.put(\"emcyrillic\", new Character((char) 0x043C));\n\tlist.put(\"emdash\", new Character((char) 0x2014));\n\tlist.put(\"emdashvertical\", new Character((char) 0xFE31));\n\tlist.put(\"emonospace\", new Character((char) 0xFF45));\n\tlist.put(\"emphasismarkarmenian\", new Character((char) 0x055B));\n\tlist.put(\"emptyset\", new Character((char) 0x2205));\n\tlist.put(\"enbopomofo\", new Character((char) 0x3123));\n\tlist.put(\"encyrillic\", new Character((char) 0x043D));\n\tlist.put(\"endash\", new Character((char) 0x2013));\n\tlist.put(\"endashvertical\", new Character((char) 0xFE32));\n\tlist.put(\"endescendercyrillic\", new Character((char) 0x04A3));\n\tlist.put(\"eng\", new Character((char) 0x014B));\n\tlist.put(\"engbopomofo\", new Character((char) 0x3125));\n\tlist.put(\"enghecyrillic\", new Character((char) 0x04A5));\n\tlist.put(\"enhookcyrillic\", new Character((char) 0x04C8));\n\tlist.put(\"enspace\", new Character((char) 0x2002));\n\tlist.put(\"eogonek\", new Character((char) 0x0119));\n\tlist.put(\"eokorean\", new Character((char) 0x3153));\n\tlist.put(\"eopen\", new Character((char) 0x025B));\n\tlist.put(\"eopenclosed\", new Character((char) 0x029A));\n\tlist.put(\"eopenreversed\", new Character((char) 0x025C));\n\tlist.put(\"eopenreversedclosed\", new Character((char) 0x025E));\n\tlist.put(\"eopenreversedhook\", new Character((char) 0x025D));\n\tlist.put(\"eparen\", new Character((char) 0x24A0));\n\tlist.put(\"epsilon\", new Character((char) 0x03B5));\n\tlist.put(\"epsilontonos\", new Character((char) 0x03AD));\n\tlist.put(\"equal\", new Character((char) 0x003D));\n\tlist.put(\"equalmonospace\", new Character((char) 0xFF1D));\n\tlist.put(\"equalsmall\", new Character((char) 0xFE66));\n\tlist.put(\"equalsuperior\", new Character((char) 0x207C));\n\tlist.put(\"equivalence\", new Character((char) 0x2261));\n\tlist.put(\"erbopomofo\", new Character((char) 0x3126));\n\tlist.put(\"ercyrillic\", new Character((char) 0x0440));\n\tlist.put(\"ereversed\", new Character((char) 0x0258));\n\tlist.put(\"ereversedcyrillic\", new Character((char) 0x044D));\n\tlist.put(\"escyrillic\", new Character((char) 0x0441));\n\tlist.put(\"esdescendercyrillic\", new Character((char) 0x04AB));\n\tlist.put(\"esh\", new Character((char) 0x0283));\n\tlist.put(\"eshcurl\", new Character((char) 0x0286));\n\tlist.put(\"eshortdeva\", new Character((char) 0x090E));\n\tlist.put(\"eshortvowelsigndeva\", new Character((char) 0x0946));\n\tlist.put(\"eshreversedloop\", new Character((char) 0x01AA));\n\tlist.put(\"eshsquatreversed\", new Character((char) 0x0285));\n\tlist.put(\"esmallhiragana\", new Character((char) 0x3047));\n\tlist.put(\"esmallkatakana\", new Character((char) 0x30A7));\n\tlist.put(\"esmallkatakanahalfwidth\", new Character((char) 0xFF6A));\n\tlist.put(\"estimated\", new Character((char) 0x212E));\n\tlist.put(\"esuperior\", new Character((char) 0xF6EC));\n\tlist.put(\"eta\", new Character((char) 0x03B7));\n\tlist.put(\"etarmenian\", new Character((char) 0x0568));\n\tlist.put(\"etatonos\", new Character((char) 0x03AE));\n\tlist.put(\"eth\", new Character((char) 0x00F0));\n\tlist.put(\"etilde\", new Character((char) 0x1EBD));\n\tlist.put(\"etildebelow\", new Character((char) 0x1E1B));\n\tlist.put(\"etnahtafoukhhebrew\", new Character((char) 0x0591));\n\tlist.put(\"etnahtafoukhlefthebrew\", new Character((char) 0x0591));\n\tlist.put(\"etnahtahebrew\", new Character((char) 0x0591));\n\tlist.put(\"etnahtalefthebrew\", new Character((char) 0x0591));\n\tlist.put(\"eturned\", new Character((char) 0x01DD));\n\tlist.put(\"eukorean\", new Character((char) 0x3161));\n\tlist.put(\"euro\", new Character((char) 0x20AC));\n\tlist.put(\"evowelsignbengali\", new Character((char) 0x09C7));\n\tlist.put(\"evowelsigndeva\", new Character((char) 0x0947));\n\tlist.put(\"evowelsigngujarati\", new Character((char) 0x0AC7));\n\tlist.put(\"exclam\", new Character((char) 0x0021));\n\tlist.put(\"exclamarmenian\", new Character((char) 0x055C));\n\tlist.put(\"exclamdbl\", new Character((char) 0x203C));\n\tlist.put(\"exclamdown\", new Character((char) 0x00A1));\n\tlist.put(\"exclamdownsmall\", new Character((char) 0xF7A1));\n\tlist.put(\"exclammonospace\", new Character((char) 0xFF01));\n\tlist.put(\"exclamsmall\", new Character((char) 0xF721));\n\tlist.put(\"existential\", new Character((char) 0x2203));\n\tlist.put(\"ezh\", new Character((char) 0x0292));\n\tlist.put(\"ezhcaron\", new Character((char) 0x01EF));\n\tlist.put(\"ezhcurl\", new Character((char) 0x0293));\n\tlist.put(\"ezhreversed\", new Character((char) 0x01B9));\n\tlist.put(\"ezhtail\", new Character((char) 0x01BA));\n\tlist.put(\"f\", new Character((char) 0x0066));\n\tlist.put(\"fadeva\", new Character((char) 0x095E));\n\tlist.put(\"fagurmukhi\", new Character((char) 0x0A5E));\n\tlist.put(\"fahrenheit\", new Character((char) 0x2109));\n\tlist.put(\"fathaarabic\", new Character((char) 0x064E));\n\tlist.put(\"fathalowarabic\", new Character((char) 0x064E));\n\tlist.put(\"fathatanarabic\", new Character((char) 0x064B));\n\tlist.put(\"fbopomofo\", new Character((char) 0x3108));\n\tlist.put(\"fcircle\", new Character((char) 0x24D5));\n\tlist.put(\"fdotaccent\", new Character((char) 0x1E1F));\n\tlist.put(\"feharabic\", new Character((char) 0x0641));\n\tlist.put(\"feharmenian\", new Character((char) 0x0586));\n\tlist.put(\"fehfinalarabic\", new Character((char) 0xFED2));\n\tlist.put(\"fehinitialarabic\", new Character((char) 0xFED3));\n\tlist.put(\"fehmedialarabic\", new Character((char) 0xFED4));\n\tlist.put(\"feicoptic\", new Character((char) 0x03E5));\n\tlist.put(\"female\", new Character((char) 0x2640));\n\tlist.put(\"ff\", new Character((char) 0xFB00));\n\tlist.put(\"ffi\", new Character((char) 0xFB03));\n\tlist.put(\"ffl\", new Character((char) 0xFB04));\n\tlist.put(\"fi\", new Character((char) 0xFB01));\n\tlist.put(\"fifteencircle\", new Character((char) 0x246E));\n\tlist.put(\"fifteenparen\", new Character((char) 0x2482));\n\tlist.put(\"fifteenperiod\", new Character((char) 0x2496));\n\tlist.put(\"figuredash\", new Character((char) 0x2012));\n\tlist.put(\"filledbox\", new Character((char) 0x25A0));\n\tlist.put(\"filledrect\", new Character((char) 0x25AC));\n\tlist.put(\"finalkaf\", new Character((char) 0x05DA));\n\tlist.put(\"finalkafdagesh\", new Character((char) 0xFB3A));\n\tlist.put(\"finalkafdageshhebrew\", new Character((char) 0xFB3A));\n\tlist.put(\"finalkafhebrew\", new Character((char) 0x05DA));\n\t// list.put(\"finalkafqamats\", new Character((char)0x05DA 05B8));\n\t// list.put(\"finalkafqamatshebrew\", new Character((char)0x05DA 05B8));\n\t// list.put(\"finalkafsheva\", new Character((char)0x05DA 05B0));\n\t// list.put(\"finalkafshevahebrew\", new Character((char)0x05DA 05B0));\n\tlist.put(\"finalmem\", new Character((char) 0x05DD));\n\tlist.put(\"finalmemhebrew\", new Character((char) 0x05DD));\n\tlist.put(\"finalnun\", new Character((char) 0x05DF));\n\tlist.put(\"finalnunhebrew\", new Character((char) 0x05DF));\n\tlist.put(\"finalpe\", new Character((char) 0x05E3));\n\tlist.put(\"finalpehebrew\", new Character((char) 0x05E3));\n\tlist.put(\"finaltsadi\", new Character((char) 0x05E5));\n\tlist.put(\"finaltsadihebrew\", new Character((char) 0x05E5));\n\tlist.put(\"firsttonechinese\", new Character((char) 0x02C9));\n\tlist.put(\"fisheye\", new Character((char) 0x25C9));\n\tlist.put(\"fitacyrillic\", new Character((char) 0x0473));\n\tlist.put(\"five\", new Character((char) 0x0035));\n\tlist.put(\"fivearabic\", new Character((char) 0x0665));\n\tlist.put(\"fivebengali\", new Character((char) 0x09EB));\n\tlist.put(\"fivecircle\", new Character((char) 0x2464));\n\tlist.put(\"fivecircleinversesansserif\", new Character((char) 0x278E));\n\tlist.put(\"fivedeva\", new Character((char) 0x096B));\n\tlist.put(\"fiveeighths\", new Character((char) 0x215D));\n\tlist.put(\"fivegujarati\", new Character((char) 0x0AEB));\n\tlist.put(\"fivegurmukhi\", new Character((char) 0x0A6B));\n\tlist.put(\"fivehackarabic\", new Character((char) 0x0665));\n\tlist.put(\"fivehangzhou\", new Character((char) 0x3025));\n\tlist.put(\"fiveideographicparen\", new Character((char) 0x3224));\n\tlist.put(\"fiveinferior\", new Character((char) 0x2085));\n\tlist.put(\"fivemonospace\", new Character((char) 0xFF15));\n\tlist.put(\"fiveoldstyle\", new Character((char) 0xF735));\n\tlist.put(\"fiveparen\", new Character((char) 0x2478));\n\tlist.put(\"fiveperiod\", new Character((char) 0x248C));\n\tlist.put(\"fivepersian\", new Character((char) 0x06F5));\n\tlist.put(\"fiveroman\", new Character((char) 0x2174));\n\tlist.put(\"fivesuperior\", new Character((char) 0x2075));\n\tlist.put(\"fivethai\", new Character((char) 0x0E55));\n\tlist.put(\"fl\", new Character((char) 0xFB02));\n\tlist.put(\"florin\", new Character((char) 0x0192));\n\tlist.put(\"fmonospace\", new Character((char) 0xFF46));\n\tlist.put(\"fmsquare\", new Character((char) 0x3399));\n\tlist.put(\"fofanthai\", new Character((char) 0x0E1F));\n\tlist.put(\"fofathai\", new Character((char) 0x0E1D));\n\tlist.put(\"fongmanthai\", new Character((char) 0x0E4F));\n\tlist.put(\"forall\", new Character((char) 0x2200));\n\tlist.put(\"four\", new Character((char) 0x0034));\n\tlist.put(\"fourarabic\", new Character((char) 0x0664));\n\tlist.put(\"fourbengali\", new Character((char) 0x09EA));\n\tlist.put(\"fourcircle\", new Character((char) 0x2463));\n\tlist.put(\"fourcircleinversesansserif\", new Character((char) 0x278D));\n\tlist.put(\"fourdeva\", new Character((char) 0x096A));\n\tlist.put(\"fourgujarati\", new Character((char) 0x0AEA));\n\tlist.put(\"fourgurmukhi\", new Character((char) 0x0A6A));\n\tlist.put(\"fourhackarabic\", new Character((char) 0x0664));\n\tlist.put(\"fourhangzhou\", new Character((char) 0x3024));\n\tlist.put(\"fourideographicparen\", new Character((char) 0x3223));\n\tlist.put(\"fourinferior\", new Character((char) 0x2084));\n\tlist.put(\"fourmonospace\", new Character((char) 0xFF14));\n\tlist.put(\"fournumeratorbengali\", new Character((char) 0x09F7));\n\tlist.put(\"fouroldstyle\", new Character((char) 0xF734));\n\tlist.put(\"fourparen\", new Character((char) 0x2477));\n\tlist.put(\"fourperiod\", new Character((char) 0x248B));\n\tlist.put(\"fourpersian\", new Character((char) 0x06F4));\n\tlist.put(\"fourroman\", new Character((char) 0x2173));\n\tlist.put(\"foursuperior\", new Character((char) 0x2074));\n\tlist.put(\"fourteencircle\", new Character((char) 0x246D));\n\tlist.put(\"fourteenparen\", new Character((char) 0x2481));\n\tlist.put(\"fourteenperiod\", new Character((char) 0x2495));\n\tlist.put(\"fourthai\", new Character((char) 0x0E54));\n\tlist.put(\"fourthtonechinese\", new Character((char) 0x02CB));\n\tlist.put(\"fparen\", new Character((char) 0x24A1));\n\tlist.put(\"fraction\", new Character((char) 0x2044));\n\tlist.put(\"franc\", new Character((char) 0x20A3));\n\tlist.put(\"g\", new Character((char) 0x0067));\n\tlist.put(\"gabengali\", new Character((char) 0x0997));\n\tlist.put(\"gacute\", new Character((char) 0x01F5));\n\tlist.put(\"gadeva\", new Character((char) 0x0917));\n\tlist.put(\"gafarabic\", new Character((char) 0x06AF));\n\tlist.put(\"gaffinalarabic\", new Character((char) 0xFB93));\n\tlist.put(\"gafinitialarabic\", new Character((char) 0xFB94));\n\tlist.put(\"gafmedialarabic\", new Character((char) 0xFB95));\n\tlist.put(\"gagujarati\", new Character((char) 0x0A97));\n\tlist.put(\"gagurmukhi\", new Character((char) 0x0A17));\n\tlist.put(\"gahiragana\", new Character((char) 0x304C));\n\tlist.put(\"gakatakana\", new Character((char) 0x30AC));\n\tlist.put(\"gamma\", new Character((char) 0x03B3));\n\tlist.put(\"gammalatinsmall\", new Character((char) 0x0263));\n\tlist.put(\"gammasuperior\", new Character((char) 0x02E0));\n\tlist.put(\"gangiacoptic\", new Character((char) 0x03EB));\n\tlist.put(\"gbopomofo\", new Character((char) 0x310D));\n\tlist.put(\"gbreve\", new Character((char) 0x011F));\n\tlist.put(\"gcaron\", new Character((char) 0x01E7));\n\tlist.put(\"gcedilla\", new Character((char) 0x0123));\n\tlist.put(\"gcircle\", new Character((char) 0x24D6));\n\tlist.put(\"gcircumflex\", new Character((char) 0x011D));\n\tlist.put(\"gcommaaccent\", new Character((char) 0x0123));\n\tlist.put(\"gdot\", new Character((char) 0x0121));\n\tlist.put(\"gdotaccent\", new Character((char) 0x0121));\n\tlist.put(\"gecyrillic\", new Character((char) 0x0433));\n\tlist.put(\"gehiragana\", new Character((char) 0x3052));\n\tlist.put(\"gekatakana\", new Character((char) 0x30B2));\n\tlist.put(\"geometricallyequal\", new Character((char) 0x2251));\n\tlist.put(\"gereshaccenthebrew\", new Character((char) 0x059C));\n\tlist.put(\"gereshhebrew\", new Character((char) 0x05F3));\n\tlist.put(\"gereshmuqdamhebrew\", new Character((char) 0x059D));\n\tlist.put(\"germandbls\", new Character((char) 0x00DF));\n\tlist.put(\"gershayimaccenthebrew\", new Character((char) 0x059E));\n\tlist.put(\"gershayimhebrew\", new Character((char) 0x05F4));\n\tlist.put(\"getamark\", new Character((char) 0x3013));\n\tlist.put(\"ghabengali\", new Character((char) 0x0998));\n\tlist.put(\"ghadarmenian\", new Character((char) 0x0572));\n\tlist.put(\"ghadeva\", new Character((char) 0x0918));\n\tlist.put(\"ghagujarati\", new Character((char) 0x0A98));\n\tlist.put(\"ghagurmukhi\", new Character((char) 0x0A18));\n\tlist.put(\"ghainarabic\", new Character((char) 0x063A));\n\tlist.put(\"ghainfinalarabic\", new Character((char) 0xFECE));\n\tlist.put(\"ghaininitialarabic\", new Character((char) 0xFECF));\n\tlist.put(\"ghainmedialarabic\", new Character((char) 0xFED0));\n\tlist.put(\"ghemiddlehookcyrillic\", new Character((char) 0x0495));\n\tlist.put(\"ghestrokecyrillic\", new Character((char) 0x0493));\n\tlist.put(\"gheupturncyrillic\", new Character((char) 0x0491));\n\tlist.put(\"ghhadeva\", new Character((char) 0x095A));\n\tlist.put(\"ghhagurmukhi\", new Character((char) 0x0A5A));\n\tlist.put(\"ghook\", new Character((char) 0x0260));\n\tlist.put(\"ghzsquare\", new Character((char) 0x3393));\n\tlist.put(\"gihiragana\", new Character((char) 0x304E));\n\tlist.put(\"gikatakana\", new Character((char) 0x30AE));\n\tlist.put(\"gimarmenian\", new Character((char) 0x0563));\n\tlist.put(\"gimel\", new Character((char) 0x05D2));\n\tlist.put(\"gimeldagesh\", new Character((char) 0xFB32));\n\tlist.put(\"gimeldageshhebrew\", new Character((char) 0xFB32));\n\tlist.put(\"gimelhebrew\", new Character((char) 0x05D2));\n\tlist.put(\"gjecyrillic\", new Character((char) 0x0453));\n\tlist.put(\"glottalinvertedstroke\", new Character((char) 0x01BE));\n\tlist.put(\"glottalstop\", new Character((char) 0x0294));\n\tlist.put(\"glottalstopinverted\", new Character((char) 0x0296));\n\tlist.put(\"glottalstopmod\", new Character((char) 0x02C0));\n\tlist.put(\"glottalstopreversed\", new Character((char) 0x0295));\n\tlist.put(\"glottalstopreversedmod\", new Character((char) 0x02C1));\n\tlist.put(\"glottalstopreversedsuperior\", new Character((char) 0x02E4));\n\tlist.put(\"glottalstopstroke\", new Character((char) 0x02A1));\n\tlist.put(\"glottalstopstrokereversed\", new Character((char) 0x02A2));\n\tlist.put(\"gmacron\", new Character((char) 0x1E21));\n\tlist.put(\"gmonospace\", new Character((char) 0xFF47));\n\tlist.put(\"gohiragana\", new Character((char) 0x3054));\n\tlist.put(\"gokatakana\", new Character((char) 0x30B4));\n\tlist.put(\"gparen\", new Character((char) 0x24A2));\n\tlist.put(\"gpasquare\", new Character((char) 0x33AC));\n\tlist.put(\"gradient\", new Character((char) 0x2207));\n\tlist.put(\"grave\", new Character((char) 0x0060));\n\tlist.put(\"gravebelowcmb\", new Character((char) 0x0316));\n\tlist.put(\"gravecmb\", new Character((char) 0x0300));\n\tlist.put(\"gravecomb\", new Character((char) 0x0300));\n\tlist.put(\"gravedeva\", new Character((char) 0x0953));\n\tlist.put(\"gravelowmod\", new Character((char) 0x02CE));\n\tlist.put(\"gravemonospace\", new Character((char) 0xFF40));\n\tlist.put(\"gravetonecmb\", new Character((char) 0x0340));\n\tlist.put(\"greater\", new Character((char) 0x003E));\n\tlist.put(\"greaterequal\", new Character((char) 0x2265));\n\tlist.put(\"greaterequalorless\", new Character((char) 0x22DB));\n\tlist.put(\"greatermonospace\", new Character((char) 0xFF1E));\n\tlist.put(\"greaterorequivalent\", new Character((char) 0x2273));\n\tlist.put(\"greaterorless\", new Character((char) 0x2277));\n\tlist.put(\"greateroverequal\", new Character((char) 0x2267));\n\tlist.put(\"greatersmall\", new Character((char) 0xFE65));\n\tlist.put(\"gscript\", new Character((char) 0x0261));\n\tlist.put(\"gstroke\", new Character((char) 0x01E5));\n\tlist.put(\"guhiragana\", new Character((char) 0x3050));\n\tlist.put(\"guillemotleft\", new Character((char) 0x00AB));\n\tlist.put(\"guillemotright\", new Character((char) 0x00BB));\n\tlist.put(\"guilsinglleft\", new Character((char) 0x2039));\n\tlist.put(\"guilsinglright\", new Character((char) 0x203A));\n\tlist.put(\"gukatakana\", new Character((char) 0x30B0));\n\tlist.put(\"guramusquare\", new Character((char) 0x3318));\n\tlist.put(\"gysquare\", new Character((char) 0x33C9));\n\tlist.put(\"h\", new Character((char) 0x0068));\n\tlist.put(\"haabkhasiancyrillic\", new Character((char) 0x04A9));\n\tlist.put(\"haaltonearabic\", new Character((char) 0x06C1));\n\tlist.put(\"habengali\", new Character((char) 0x09B9));\n\tlist.put(\"hadescendercyrillic\", new Character((char) 0x04B3));\n\tlist.put(\"hadeva\", new Character((char) 0x0939));\n\tlist.put(\"hagujarati\", new Character((char) 0x0AB9));\n\tlist.put(\"hagurmukhi\", new Character((char) 0x0A39));\n\tlist.put(\"haharabic\", new Character((char) 0x062D));\n\tlist.put(\"hahfinalarabic\", new Character((char) 0xFEA2));\n\tlist.put(\"hahinitialarabic\", new Character((char) 0xFEA3));\n\tlist.put(\"hahiragana\", new Character((char) 0x306F));\n\tlist.put(\"hahmedialarabic\", new Character((char) 0xFEA4));\n\tlist.put(\"haitusquare\", new Character((char) 0x332A));\n\tlist.put(\"hakatakana\", new Character((char) 0x30CF));\n\tlist.put(\"hakatakanahalfwidth\", new Character((char) 0xFF8A));\n\tlist.put(\"halantgurmukhi\", new Character((char) 0x0A4D));\n\tlist.put(\"hamzaarabic\", new Character((char) 0x0621));\n\t// list.put(\"hamzadammaarabic\", new Character((char)0x0621 064F));\n\t// list.put(\"hamzadammatanarabic\", new Character((char)0x0621 064C));\n\t// list.put(\"hamzafathaarabic\", new Character((char)0x0621 064E));\n\t// list.put(\"hamzafathatanarabic\", new Character((char)0x0621 064B));\n\tlist.put(\"hamzalowarabic\", new Character((char) 0x0621));\n\t// list.put(\"hamzalowkasraarabic\", new Character((char)0x0621 0650));\n\t// list.put(\"hamzalowkasratanarabic\", new Character((char)0x0621 064D));\n\t// list.put(\"hamzasukunarabic\", new Character((char)0x0621 0652));\n\tlist.put(\"hangulfiller\", new Character((char) 0x3164));\n\tlist.put(\"hardsigncyrillic\", new Character((char) 0x044A));\n\tlist.put(\"harpoonleftbarbup\", new Character((char) 0x21BC));\n\tlist.put(\"harpoonrightbarbup\", new Character((char) 0x21C0));\n\tlist.put(\"hasquare\", new Character((char) 0x33CA));\n\tlist.put(\"hatafpatah\", new Character((char) 0x05B2));\n\tlist.put(\"hatafpatah16\", new Character((char) 0x05B2));\n\tlist.put(\"hatafpatah23\", new Character((char) 0x05B2));\n\tlist.put(\"hatafpatah2f\", new Character((char) 0x05B2));\n\tlist.put(\"hatafpatahhebrew\", new Character((char) 0x05B2));\n\tlist.put(\"hatafpatahnarrowhebrew\", new Character((char) 0x05B2));\n\tlist.put(\"hatafpatahquarterhebrew\", new Character((char) 0x05B2));\n\tlist.put(\"hatafpatahwidehebrew\", new Character((char) 0x05B2));\n\tlist.put(\"hatafqamats\", new Character((char) 0x05B3));\n\tlist.put(\"hatafqamats1b\", new Character((char) 0x05B3));\n\tlist.put(\"hatafqamats28\", new Character((char) 0x05B3));\n\tlist.put(\"hatafqamats34\", new Character((char) 0x05B3));\n\tlist.put(\"hatafqamatshebrew\", new Character((char) 0x05B3));\n\tlist.put(\"hatafqamatsnarrowhebrew\", new Character((char) 0x05B3));\n\tlist.put(\"hatafqamatsquarterhebrew\", new Character((char) 0x05B3));\n\tlist.put(\"hatafqamatswidehebrew\", new Character((char) 0x05B3));\n\tlist.put(\"hatafsegol\", new Character((char) 0x05B1));\n\tlist.put(\"hatafsegol17\", new Character((char) 0x05B1));\n\tlist.put(\"hatafsegol24\", new Character((char) 0x05B1));\n\tlist.put(\"hatafsegol30\", new Character((char) 0x05B1));\n\tlist.put(\"hatafsegolhebrew\", new Character((char) 0x05B1));\n\tlist.put(\"hatafsegolnarrowhebrew\", new Character((char) 0x05B1));\n\tlist.put(\"hatafsegolquarterhebrew\", new Character((char) 0x05B1));\n\tlist.put(\"hatafsegolwidehebrew\", new Character((char) 0x05B1));\n\tlist.put(\"hbar\", new Character((char) 0x0127));\n\tlist.put(\"hbopomofo\", new Character((char) 0x310F));\n\tlist.put(\"hbrevebelow\", new Character((char) 0x1E2B));\n\tlist.put(\"hcedilla\", new Character((char) 0x1E29));\n\tlist.put(\"hcircle\", new Character((char) 0x24D7));\n\tlist.put(\"hcircumflex\", new Character((char) 0x0125));\n\tlist.put(\"hdieresis\", new Character((char) 0x1E27));\n\tlist.put(\"hdotaccent\", new Character((char) 0x1E23));\n\tlist.put(\"hdotbelow\", new Character((char) 0x1E25));\n\tlist.put(\"he\", new Character((char) 0x05D4));\n\tlist.put(\"heart\", new Character((char) 0x2665));\n\tlist.put(\"heartsuitblack\", new Character((char) 0x2665));\n\tlist.put(\"heartsuitwhite\", new Character((char) 0x2661));\n\tlist.put(\"hedagesh\", new Character((char) 0xFB34));\n\tlist.put(\"hedageshhebrew\", new Character((char) 0xFB34));\n\tlist.put(\"hehaltonearabic\", new Character((char) 0x06C1));\n\tlist.put(\"heharabic\", new Character((char) 0x0647));\n\tlist.put(\"hehebrew\", new Character((char) 0x05D4));\n\tlist.put(\"hehfinalaltonearabic\", new Character((char) 0xFBA7));\n\tlist.put(\"hehfinalalttwoarabic\", new Character((char) 0xFEEA));\n\tlist.put(\"hehfinalarabic\", new Character((char) 0xFEEA));\n\tlist.put(\"hehhamzaabovefinalarabic\", new Character((char) 0xFBA5));\n\tlist.put(\"hehhamzaaboveisolatedarabic\", new Character((char) 0xFBA4));\n\tlist.put(\"hehinitialaltonearabic\", new Character((char) 0xFBA8));\n\tlist.put(\"hehinitialarabic\", new Character((char) 0xFEEB));\n\tlist.put(\"hehiragana\", new Character((char) 0x3078));\n\tlist.put(\"hehmedialaltonearabic\", new Character((char) 0xFBA9));\n\tlist.put(\"hehmedialarabic\", new Character((char) 0xFEEC));\n\tlist.put(\"heiseierasquare\", new Character((char) 0x337B));\n\tlist.put(\"hekatakana\", new Character((char) 0x30D8));\n\tlist.put(\"hekatakanahalfwidth\", new Character((char) 0xFF8D));\n\tlist.put(\"hekutaarusquare\", new Character((char) 0x3336));\n\tlist.put(\"henghook\", new Character((char) 0x0267));\n\tlist.put(\"herutusquare\", new Character((char) 0x3339));\n\tlist.put(\"het\", new Character((char) 0x05D7));\n\tlist.put(\"hethebrew\", new Character((char) 0x05D7));\n\tlist.put(\"hhook\", new Character((char) 0x0266));\n\tlist.put(\"hhooksuperior\", new Character((char) 0x02B1));\n\tlist.put(\"hieuhacirclekorean\", new Character((char) 0x327B));\n\tlist.put(\"hieuhaparenkorean\", new Character((char) 0x321B));\n\tlist.put(\"hieuhcirclekorean\", new Character((char) 0x326D));\n\tlist.put(\"hieuhkorean\", new Character((char) 0x314E));\n\tlist.put(\"hieuhparenkorean\", new Character((char) 0x320D));\n\tlist.put(\"hihiragana\", new Character((char) 0x3072));\n\tlist.put(\"hikatakana\", new Character((char) 0x30D2));\n\tlist.put(\"hikatakanahalfwidth\", new Character((char) 0xFF8B));\n\tlist.put(\"hiriq\", new Character((char) 0x05B4));\n\tlist.put(\"hiriq14\", new Character((char) 0x05B4));\n\tlist.put(\"hiriq21\", new Character((char) 0x05B4));\n\tlist.put(\"hiriq2d\", new Character((char) 0x05B4));\n\tlist.put(\"hiriqhebrew\", new Character((char) 0x05B4));\n\tlist.put(\"hiriqnarrowhebrew\", new Character((char) 0x05B4));\n\tlist.put(\"hiriqquarterhebrew\", new Character((char) 0x05B4));\n\tlist.put(\"hiriqwidehebrew\", new Character((char) 0x05B4));\n\tlist.put(\"hlinebelow\", new Character((char) 0x1E96));\n\tlist.put(\"hmonospace\", new Character((char) 0xFF48));\n\tlist.put(\"hoarmenian\", new Character((char) 0x0570));\n\tlist.put(\"hohipthai\", new Character((char) 0x0E2B));\n\tlist.put(\"hohiragana\", new Character((char) 0x307B));\n\tlist.put(\"hokatakana\", new Character((char) 0x30DB));\n\tlist.put(\"hokatakanahalfwidth\", new Character((char) 0xFF8E));\n\tlist.put(\"holam\", new Character((char) 0x05B9));\n\tlist.put(\"holam19\", new Character((char) 0x05B9));\n\tlist.put(\"holam26\", new Character((char) 0x05B9));\n\tlist.put(\"holam32\", new Character((char) 0x05B9));\n\tlist.put(\"holamhebrew\", new Character((char) 0x05B9));\n\tlist.put(\"holamnarrowhebrew\", new Character((char) 0x05B9));\n\tlist.put(\"holamquarterhebrew\", new Character((char) 0x05B9));\n\tlist.put(\"holamwidehebrew\", new Character((char) 0x05B9));\n\tlist.put(\"honokhukthai\", new Character((char) 0x0E2E));\n\tlist.put(\"hookabovecomb\", new Character((char) 0x0309));\n\tlist.put(\"hookcmb\", new Character((char) 0x0309));\n\tlist.put(\"hookpalatalizedbelowcmb\", new Character((char) 0x0321));\n\tlist.put(\"hookretroflexbelowcmb\", new Character((char) 0x0322));\n\tlist.put(\"hoonsquare\", new Character((char) 0x3342));\n\tlist.put(\"horicoptic\", new Character((char) 0x03E9));\n\tlist.put(\"horizontalbar\", new Character((char) 0x2015));\n\tlist.put(\"horncmb\", new Character((char) 0x031B));\n\tlist.put(\"hotsprings\", new Character((char) 0x2668));\n\tlist.put(\"house\", new Character((char) 0x2302));\n\tlist.put(\"hparen\", new Character((char) 0x24A3));\n\tlist.put(\"hsuperior\", new Character((char) 0x02B0));\n\tlist.put(\"hturned\", new Character((char) 0x0265));\n\tlist.put(\"huhiragana\", new Character((char) 0x3075));\n\tlist.put(\"huiitosquare\", new Character((char) 0x3333));\n\tlist.put(\"hukatakana\", new Character((char) 0x30D5));\n\tlist.put(\"hukatakanahalfwidth\", new Character((char) 0xFF8C));\n\tlist.put(\"hungarumlaut\", new Character((char) 0x02DD));\n\tlist.put(\"hungarumlautcmb\", new Character((char) 0x030B));\n\tlist.put(\"hv\", new Character((char) 0x0195));\n\tlist.put(\"hyphen\", new Character((char) 0x002D));\n\tlist.put(\"hypheninferior\", new Character((char) 0xF6E5));\n\tlist.put(\"hyphenmonospace\", new Character((char) 0xFF0D));\n\tlist.put(\"hyphensmall\", new Character((char) 0xFE63));\n\tlist.put(\"hyphensuperior\", new Character((char) 0xF6E6));\n\tlist.put(\"hyphentwo\", new Character((char) 0x2010));\n\tlist.put(\"i\", new Character((char) 0x0069));\n\tlist.put(\"iacute\", new Character((char) 0x00ED));\n\tlist.put(\"iacyrillic\", new Character((char) 0x044F));\n\tlist.put(\"ibengali\", new Character((char) 0x0987));\n\tlist.put(\"ibopomofo\", new Character((char) 0x3127));\n\tlist.put(\"ibreve\", new Character((char) 0x012D));\n\tlist.put(\"icaron\", new Character((char) 0x01D0));\n\tlist.put(\"icircle\", new Character((char) 0x24D8));\n\tlist.put(\"icircumflex\", new Character((char) 0x00EE));\n\tlist.put(\"icyrillic\", new Character((char) 0x0456));\n\tlist.put(\"idblgrave\", new Character((char) 0x0209));\n\tlist.put(\"ideographearthcircle\", new Character((char) 0x328F));\n\tlist.put(\"ideographfirecircle\", new Character((char) 0x328B));\n\tlist.put(\"ideographicallianceparen\", new Character((char) 0x323F));\n\tlist.put(\"ideographiccallparen\", new Character((char) 0x323A));\n\tlist.put(\"ideographiccentrecircle\", new Character((char) 0x32A5));\n\tlist.put(\"ideographicclose\", new Character((char) 0x3006));\n\tlist.put(\"ideographiccomma\", new Character((char) 0x3001));\n\tlist.put(\"ideographiccommaleft\", new Character((char) 0xFF64));\n\tlist\n\t\t\t.put(\"ideographiccongratulationparen\", new Character(\n\t\t\t\t\t(char) 0x3237));\n\tlist.put(\"ideographiccorrectcircle\", new Character((char) 0x32A3));\n\tlist.put(\"ideographicearthparen\", new Character((char) 0x322F));\n\tlist.put(\"ideographicenterpriseparen\", new Character((char) 0x323D));\n\tlist.put(\"ideographicexcellentcircle\", new Character((char) 0x329D));\n\tlist.put(\"ideographicfestivalparen\", new Character((char) 0x3240));\n\tlist.put(\"ideographicfinancialcircle\", new Character((char) 0x3296));\n\tlist.put(\"ideographicfinancialparen\", new Character((char) 0x3236));\n\tlist.put(\"ideographicfireparen\", new Character((char) 0x322B));\n\tlist.put(\"ideographichaveparen\", new Character((char) 0x3232));\n\tlist.put(\"ideographichighcircle\", new Character((char) 0x32A4));\n\tlist.put(\"ideographiciterationmark\", new Character((char) 0x3005));\n\tlist.put(\"ideographiclaborcircle\", new Character((char) 0x3298));\n\tlist.put(\"ideographiclaborparen\", new Character((char) 0x3238));\n\tlist.put(\"ideographicleftcircle\", new Character((char) 0x32A7));\n\tlist.put(\"ideographiclowcircle\", new Character((char) 0x32A6));\n\tlist.put(\"ideographicmedicinecircle\", new Character((char) 0x32A9));\n\tlist.put(\"ideographicmetalparen\", new Character((char) 0x322E));\n\tlist.put(\"ideographicmoonparen\", new Character((char) 0x322A));\n\tlist.put(\"ideographicnameparen\", new Character((char) 0x3234));\n\tlist.put(\"ideographicperiod\", new Character((char) 0x3002));\n\tlist.put(\"ideographicprintcircle\", new Character((char) 0x329E));\n\tlist.put(\"ideographicreachparen\", new Character((char) 0x3243));\n\tlist.put(\"ideographicrepresentparen\", new Character((char) 0x3239));\n\tlist.put(\"ideographicresourceparen\", new Character((char) 0x323E));\n\tlist.put(\"ideographicrightcircle\", new Character((char) 0x32A8));\n\tlist.put(\"ideographicsecretcircle\", new Character((char) 0x3299));\n\tlist.put(\"ideographicselfparen\", new Character((char) 0x3242));\n\tlist.put(\"ideographicsocietyparen\", new Character((char) 0x3233));\n\tlist.put(\"ideographicspace\", new Character((char) 0x3000));\n\tlist.put(\"ideographicspecialparen\", new Character((char) 0x3235));\n\tlist.put(\"ideographicstockparen\", new Character((char) 0x3231));\n\tlist.put(\"ideographicstudyparen\", new Character((char) 0x323B));\n\tlist.put(\"ideographicsunparen\", new Character((char) 0x3230));\n\tlist.put(\"ideographicsuperviseparen\", new Character((char) 0x323C));\n\tlist.put(\"ideographicwaterparen\", new Character((char) 0x322C));\n\tlist.put(\"ideographicwoodparen\", new Character((char) 0x322D));\n\tlist.put(\"ideographiczero\", new Character((char) 0x3007));\n\tlist.put(\"ideographmetalcircle\", new Character((char) 0x328E));\n\tlist.put(\"ideographmooncircle\", new Character((char) 0x328A));\n\tlist.put(\"ideographnamecircle\", new Character((char) 0x3294));\n\tlist.put(\"ideographsuncircle\", new Character((char) 0x3290));\n\tlist.put(\"ideographwatercircle\", new Character((char) 0x328C));\n\tlist.put(\"ideographwoodcircle\", new Character((char) 0x328D));\n\tlist.put(\"ideva\", new Character((char) 0x0907));\n\tlist.put(\"idieresis\", new Character((char) 0x00EF));\n\tlist.put(\"idieresisacute\", new Character((char) 0x1E2F));\n\tlist.put(\"idieresiscyrillic\", new Character((char) 0x04E5));\n\tlist.put(\"idotbelow\", new Character((char) 0x1ECB));\n\tlist.put(\"iebrevecyrillic\", new Character((char) 0x04D7));\n\tlist.put(\"iecyrillic\", new Character((char) 0x0435));\n\tlist.put(\"ieungacirclekorean\", new Character((char) 0x3275));\n\tlist.put(\"ieungaparenkorean\", new Character((char) 0x3215));\n\tlist.put(\"ieungcirclekorean\", new Character((char) 0x3267));\n\tlist.put(\"ieungkorean\", new Character((char) 0x3147));\n\tlist.put(\"ieungparenkorean\", new Character((char) 0x3207));\n\tlist.put(\"igrave\", new Character((char) 0x00EC));\n\tlist.put(\"igujarati\", new Character((char) 0x0A87));\n\tlist.put(\"igurmukhi\", new Character((char) 0x0A07));\n\tlist.put(\"ihiragana\", new Character((char) 0x3044));\n\tlist.put(\"ihookabove\", new Character((char) 0x1EC9));\n\tlist.put(\"iibengali\", new Character((char) 0x0988));\n\tlist.put(\"iicyrillic\", new Character((char) 0x0438));\n\tlist.put(\"iideva\", new Character((char) 0x0908));\n\tlist.put(\"iigujarati\", new Character((char) 0x0A88));\n\tlist.put(\"iigurmukhi\", new Character((char) 0x0A08));\n\tlist.put(\"iimatragurmukhi\", new Character((char) 0x0A40));\n\tlist.put(\"iinvertedbreve\", new Character((char) 0x020B));\n\tlist.put(\"iishortcyrillic\", new Character((char) 0x0439));\n\tlist.put(\"iivowelsignbengali\", new Character((char) 0x09C0));\n\tlist.put(\"iivowelsigndeva\", new Character((char) 0x0940));\n\tlist.put(\"iivowelsigngujarati\", new Character((char) 0x0AC0));\n\tlist.put(\"ij\", new Character((char) 0x0133));\n\tlist.put(\"ikatakana\", new Character((char) 0x30A4));\n\tlist.put(\"ikatakanahalfwidth\", new Character((char) 0xFF72));\n\tlist.put(\"ikorean\", new Character((char) 0x3163));\n\tlist.put(\"ilde\", new Character((char) 0x02DC));\n\tlist.put(\"iluyhebrew\", new Character((char) 0x05AC));\n\tlist.put(\"imacron\", new Character((char) 0x012B));\n\tlist.put(\"imacroncyrillic\", new Character((char) 0x04E3));\n\tlist.put(\"imageorapproximatelyequal\", new Character((char) 0x2253));\n\tlist.put(\"imatragurmukhi\", new Character((char) 0x0A3F));\n\tlist.put(\"imonospace\", new Character((char) 0xFF49));\n\tlist.put(\"increment\", new Character((char) 0x2206));\n\tlist.put(\"infinity\", new Character((char) 0x221E));\n\tlist.put(\"iniarmenian\", new Character((char) 0x056B));\n\tlist.put(\"integral\", new Character((char) 0x222B));\n\tlist.put(\"integralbottom\", new Character((char) 0x2321));\n\tlist.put(\"integralbt\", new Character((char) 0x2321));\n\tlist.put(\"integralex\", new Character((char) 0xF8F5));\n\tlist.put(\"integraltop\", new Character((char) 0x2320));\n\tlist.put(\"integraltp\", new Character((char) 0x2320));\n\tlist.put(\"intersection\", new Character((char) 0x2229));\n\tlist.put(\"intisquare\", new Character((char) 0x3305));\n\tlist.put(\"invbullet\", new Character((char) 0x25D8));\n\tlist.put(\"invcircle\", new Character((char) 0x25D9));\n\tlist.put(\"invsmileface\", new Character((char) 0x263B));\n\tlist.put(\"iocyrillic\", new Character((char) 0x0451));\n\tlist.put(\"iogonek\", new Character((char) 0x012F));\n\tlist.put(\"iota\", new Character((char) 0x03B9));\n\tlist.put(\"iotadieresis\", new Character((char) 0x03CA));\n\tlist.put(\"iotadieresistonos\", new Character((char) 0x0390));\n\tlist.put(\"iotalatin\", new Character((char) 0x0269));\n\tlist.put(\"iotatonos\", new Character((char) 0x03AF));\n\tlist.put(\"iparen\", new Character((char) 0x24A4));\n\tlist.put(\"irigurmukhi\", new Character((char) 0x0A72));\n\tlist.put(\"ismallhiragana\", new Character((char) 0x3043));\n\tlist.put(\"ismallkatakana\", new Character((char) 0x30A3));\n\tlist.put(\"ismallkatakanahalfwidth\", new Character((char) 0xFF68));\n\tlist.put(\"issharbengali\", new Character((char) 0x09FA));\n\tlist.put(\"istroke\", new Character((char) 0x0268));\n\tlist.put(\"isuperior\", new Character((char) 0xF6ED));\n\tlist.put(\"iterationhiragana\", new Character((char) 0x309D));\n\tlist.put(\"iterationkatakana\", new Character((char) 0x30FD));\n\tlist.put(\"itilde\", new Character((char) 0x0129));\n\tlist.put(\"itildebelow\", new Character((char) 0x1E2D));\n\tlist.put(\"iubopomofo\", new Character((char) 0x3129));\n\tlist.put(\"iucyrillic\", new Character((char) 0x044E));\n\tlist.put(\"ivowelsignbengali\", new Character((char) 0x09BF));\n\tlist.put(\"ivowelsigndeva\", new Character((char) 0x093F));\n\tlist.put(\"ivowelsigngujarati\", new Character((char) 0x0ABF));\n\tlist.put(\"izhitsacyrillic\", new Character((char) 0x0475));\n\tlist.put(\"izhitsadblgravecyrillic\", new Character((char) 0x0477));\n}", "path": "ps\\src\\test\\java\\org\\freehep\\psviewer\\test\\UnicodeGlyphList.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "// FIXME\n", "func_signal": "@Override\npublic boolean execute(OperandStack os)", "code": "{\n\tos.pop();\n\tos.pop();\n\tos.pop();\n\tPSPackedArray p = os.popPackedArray();\n\tos.gstate().setTransfer(p);\n\treturn true;\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\operators\\DeviceOperator.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "// skips whitespace until next token\n", "func_signal": "private int readNext() throws IOException", "code": "{\n\tboolean ws;\n\tint next;\n\tdo {\n\t\tnext = in.read();\n\t\tswitch (next) {\n\t\tcase '\\r':\n\t\t\tnext = in.read();\n\t\t\tif ((next != '\\n') && (next > 0)) {\n\t\t\t\tin.unread(next);\n\t\t\t}\n\t\t\t// fallthrough\n\t\tcase '\\n':\n\t\t\tlineNo++;\n\t\t\tws = true;\n\t\t\tbreak;\n\t\tcase '\\000':\n\t\tcase '\\b':\n\t\tcase '\\t':\n\t\tcase '\\f':\n\t\tcase ' ':\n\t\t\tws = true;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tws = false;\n\t\t}\n\t} while ((next != -1) && ws);\n\n\treturn (ws) ? -1 : next;\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\processor\\Scanner.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "// FIXME\n", "func_signal": "@Override\npublic boolean equals(Object o)", "code": "{\n\tif (o instanceof PSFontID) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\types\\PSFontID.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\n\tDictionaryStack stack = new DictionaryStack();\n\tPSDictionary system = stack.systemDictionary();\n\t\n\tfill(system.getArray(DictionaryStack.standardEncoding.getValue()));\n\tfill(system.getArray(DictionaryStack.isoLatin1Encoding.getValue()));\n\tfill(system.getArray(DictionaryStack.symbolEncoding.getValue()));\n\tfill(system.getArray(DictionaryStack.zapfDingbatsEncoding.getValue()));\n\t\n\tSystem.out.println(\"list = new HashMap<String, Character>(600);\");\n\tfor (Iterator<String> i=list.keySet().iterator(); i.hasNext(); ) {\n\t\tString name = i.next();\n\t\tchar c = list.get(name);\n\t\tSystem.out.println(\"list.put(\\\"\"+name+\"\\\", new Character((char) 0x\"+Integer.toHexString((int)c)+\"));\");\n\t}\n}", "path": "ps\\src\\test\\java\\org\\freehep\\psviewer\\test\\GenerateShortGlyphList.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "// FIXME\n", "func_signal": "@Override\npublic boolean execute(OperandStack os)", "code": "{\n\tos.push(60);\n\tos.push(0);\n\tos.push(halftone);\n\n\tos.push(60);\n\tos.push(0);\n\tos.push(halftone);\n\n\tos.push(60);\n\tos.push(0);\n\tos.push(halftone);\n\n\tos.push(60);\n\tos.push(0);\n\tos.push(halftone);\n\n\treturn true;\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\operators\\DeviceOperator.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "// FIXME: handles only RGB, GRAY and CMYK\n", "func_signal": "@Override\npublic boolean execute(OperandStack os)", "code": "{\n\tif (os.checkType(PSNumber.class)) {\n\t\tString space = os.gstate().colorSpace();\n\t\tif (space.equals(Constants.DEVICE_GRAY)) {\n\t\t\tPSNumber g = os.popNumber();\n\t\t\tos.gstate().setColor(new float[] { g.getFloat() });\n\t\t} else if (space.equals(Constants.DEVICE_RGB)) {\n\t\t\tPSNumber blue = os.popNumber();\n\t\t\tPSNumber green = os.popNumber();\n\t\t\tPSNumber red = os.popNumber();\n\t\t\tos.gstate().setColor(\n\t\t\t\t\tnew float[] { red.getFloat(), green.getFloat(),\n\t\t\t\t\t\t\tblue.getFloat() });\n\t\t} else if (space.equals(Constants.DEVICE_CMYK)) {\n\t\t\tPSNumber black = os.popNumber();\n\t\t\tPSNumber yellow = os.popNumber();\n\t\t\tPSNumber magenta = os.popNumber();\n\t\t\tPSNumber cyan = os.popNumber();\n\t\t\tos.gstate().setColor(\n\t\t\t\t\tnew float[] { cyan.getFloat(), magenta.getFloat(),\n\t\t\t\t\t\t\tyellow.getFloat(), black.getFloat() });\n\t\t} else {\n\t\t\terror(os, new Undefined());\n\t\t}\n\t} else if (os.checkType(PSDictionary.class)) {\n\t\tPSDictionary pattern = os.popDictionary();\n\t\tPSPaint paint = (PSPaint) pattern.get(\"Implementation\");\n\t\tint patternType = pattern.getInteger(\"PatternType\");\n\t\tint paintType = pattern.getInteger(\"PaintType\");\n\t\tif ((patternType == 1) && (paintType == 2)) {\n\t\t\tint n = os.gstate().getNumberOfColorSpaceComponents();\n\t\t\tPSObject[] params = new PSObject[n];\n\t\t\tfor (int i = n - 1; i >= 0; i--) {\n\t\t\t\tparams[i] = os.popNumber();\n\t\t\t}\n\t\t\tos.gstate().setColor(paint.getValue(), params);\n\t\t} else {\n\t\t\tos.gstate().setColor(paint.getValue());\n\t\t}\n\n\t} else {\n\t\terror(os, new TypeCheck());\n\t}\n\treturn true;\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\operators\\GraphicsStateOperator.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "/**\n * @throws IOException\n * \n */\n", "func_signal": "public void close() throws IOException", "code": "{\n\tif (bos != null)\n\t\tbos.close();\n\tif (raf != null)\n\t\traf.close();\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\types\\OnDiskProperties.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "// FIXME\n", "func_signal": "@Override\npublic boolean execute(OperandStack os)", "code": "{\n\terror(os, new Unimplemented());\n\treturn true;\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\operators\\DeviceOperator.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "// Level 3\n", "func_signal": "@Override\npublic boolean execute(OperandStack os)", "code": "{\n\terror(os, new Unimplemented());\n\treturn true;\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\operators\\DeviceOperator.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "// Level 3\n", "func_signal": "@Override\npublic boolean execute(OperandStack os)", "code": "{\n\terror(os, new Unimplemented());\n\treturn true;\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\operators\\DeviceOperator.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "// FIXME: this call should allow UCR and BG to be processed from DeviceCMYK\n", "func_signal": "@Override\npublic boolean execute(OperandStack os)", "code": "{\n\tfloat[] color = os.gstate().color();\n\t// FIXME: handle pattern color space\n\tfor (int i = 0; i < color.length; i++) {\n\t\tos.push(color[i]);\n\t}\n\treturn true;\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\operators\\GraphicsStateOperator.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "// FIXME: ignored\n", "func_signal": "@Override\npublic boolean execute(OperandStack os)", "code": "{\n\tif (os.checkType(PSNumber.class, PSNumber.class, PSPackedArray.class)) {\n\t\tos.pop();\n\t\tos.pop();\n\t\tos.pop();\n\t} else if (os.checkType(PSNumber.class, PSNumber.class,\n\t\t\tPSDictionary.class)) {\n\t\tos.pop();\n\t\tos.pop();\n\t\tos.pop();\n\t} else {\n\t\terror(os, new TypeCheck());\n\t}\n\treturn true;\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\operators\\DeviceOperator.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "// FIXME\n", "func_signal": "@Override\npublic boolean execute(OperandStack os)", "code": "{\n\tos.push(overprint);\n\treturn true;\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\operators\\DeviceOperator.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "// FREEHEP-155: nothing done about InvalidAccess\n", "func_signal": "@Override\npublic boolean execute(OperandStack os)", "code": "{\n\tPSInteger n = os.popInteger();\n\tif (n.getValue() < 0) {\n\t\terror(os, new RangeCheck());\n\t} else {\n\t\tPSObject[] a = new PSObject[n.getValue()];\n\t\tfor (int i = n.getValue() - 1; i >= 0; i--) {\n\t\t\tPSObject o = os.popObject();\n\t\t\ta[i] = o;\n\t\t}\n\n\t\tos.push(new PSPackedArray(a));\n\t}\n\treturn true;\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\operators\\PackedArrayOperator.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.applet.Applet#init()\n */\n", "func_signal": "@Override\npublic void init()", "code": "{\n\ttry {\n\t\tString version = PSViewer.getVersion();\n\t\t// Popup Menu\n\t\tfinal URL aboutURL = new URL(\n\t\t\t\t\"http://freehep.github.com/freehep-psviewer\");\n\t\tmenu = new PopupMenu();\n\t\tadd(menu);\n\n\t\t// about\n\t\tMenuItem aboutMenu = new MenuItem(\n\t\t\t\t\"About the FreeHEP Postscript Viewer \" + version + \"...\");\n\t\tmenu.add(aboutMenu);\n\t\taboutMenu.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tgetAppletContext().showDocument(aboutURL);\n\t\t\t}\n\t\t});\n\t\tenableEvents(AWTEvent.MOUSE_EVENT_MASK);\n\n\t\tString file = getParameter(FILE, \"examples/cookbook/program_00.ps\");\n\t\tint pageNo = getParameter(PAGE, 1);\n\t\tdouble sx = getParameter(SX, 1.0);\n\t\tdouble sy = getParameter(SY, 1.0);\n\t\tdouble tx = getParameter(TX, 0.0);\n\t\tdouble ty = getParameter(TY, 0.0);\n\t\tint buffer = getParameter(BUFFER, 0x8000);\n\t\tfinal URL url = new URL(getDocumentBase(), file);\n\n\t\tMenuItem urlMenu = new MenuItem(url.toExternalForm());\n\t\tmenu.add(urlMenu);\n\t\turlMenu.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tgetAppletContext().showDocument(url);\n\t\t\t}\n\t\t});\n\n\t\tProcessor processor = new Processor(new AWTPanelDevice(this), false);\n\t\tnew PSViewer(processor, url, pageNo, sx, sy, tx, ty, buffer, false);\n\t} catch (IOException e) {\n\t\tshowStatus(e.getMessage());\n\t}\n\trepaint();\n}", "path": "awt\\src\\main\\java\\org\\freehep\\postscript\\viewer\\PSApplet.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "// FIXME\n", "func_signal": "@Override\npublic boolean execute(OperandStack os)", "code": "{\n\terror(os, new Unimplemented());\n\treturn true;\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\operators\\DeviceOperator.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.lang.Object#finalize()\n */\n", "func_signal": "@Override\nprotected void finalize() throws Throwable", "code": "{\n\tsuper.finalize();\n\traf.close();\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\types\\OnDiskProperties.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "// FIXME\n", "func_signal": "@Override\npublic boolean execute(OperandStack os)", "code": "{\n\tos.push(os.gstate().transfer());\n\tos.push(os.gstate().transfer());\n\tos.push(os.gstate().transfer());\n\tos.push(os.gstate().transfer());\n\treturn true;\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\operators\\DeviceOperator.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "// FIXME\n", "func_signal": "@Override\npublic boolean execute(OperandStack os)", "code": "{\n\toverprint = os.popBoolean().getValue();\n\treturn true;\n}", "path": "ps\\src\\main\\java\\org\\freehep\\postscript\\operators\\DeviceOperator.java", "repo_name": "freehep/freehep-psviewer", "stars": 5, "license": "None", "language": "java", "size": 6108}
{"docstring": "/**\n * Writes a message with an Exception to the log file.\n */\n", "func_signal": "public void log(Throwable e, String prefix, String logEntry)", "code": "{\n\tif (!logging)\n\t\treturn;\n\tlog(prefix, logEntry);\n\te.printStackTrace(log);\n\tlog.flush();\n}", "path": "src\\snaq\\util\\LogUtil.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Populates the pool with the given number of database connections.\n * If the pool already contains open connections then they will be counted\n * towards the number created by this method.\n */\n", "func_signal": "public void run()", "code": "{\n\tif (num > 0  &&  num <= poolSize  &&  getSize() < num)\n\t{\n\t\tint count = 0;\n\t\twhile (!stopped  &&  getSize() < num  &&  num <= poolSize)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tReusable o = create();\n\t\t\t\tif (o == null)\n\t\t\t\t\tthrow new RuntimeException(\"Null item created\");\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfree.add(new TimeWrapper(null, o, expiryTime));\n\t\t\t\t\tcount++;\n\t\t\t\t\tif (debug)\n\t\t\t\t\t\tlog(\"Initialized new item in pool\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\tlog(ex, \"Unable to initialize items in pool\");\n\t\t\t\tstopped = true;\n\t\t\t}\n\t\t}\n\t\tif (debug)\n\t\t\tlog(\"Initialized pool with \" + count + \" new item\" + (count > 1 ? \"s\" : \"\"));\n\t}\n}", "path": "src\\snaq\\util\\ObjectPool.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Writes a message to the log, with an optional prefix.\n */\n", "func_signal": "public synchronized void log(String prefix, String logEntry)", "code": "{\n\tif (!logging)\n\t\treturn;\n\tStringBuffer sb = new StringBuffer();\n\tif (dateFormat != null)\n\t\tsb.append(dateFormat.format(new Date()));\n\telse\n\t{\n\t\tif (ddf == null)\n\t\t\tddf = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG);\n\t\tsb.append(ddf.format(new Date()));\n\t}\n\n\tsb.append(\": \");\n\tif (prefix != null)\n\t\tsb.append(prefix);\n\tsb.append(logEntry);\n\tif (log != null)\n\t{\n\t\tsynchronized(log)\n\t\t{\n\t\t\tlog.println(sb.toString());\n//\t\t\t\tlog.flush();\n\t\t}\n\t}\n}", "path": "src\\snaq\\util\\LogUtil.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Handles the expiry of old objects.\n */\n", "func_signal": "public void run()", "code": "{\n\twhile (pool.cleaner == Thread.currentThread()  &&  !stopped)\n\t{\n\t\tsynchronized(pool)\n\t\t{\n\t\t\tif (!pool.purge())\n\t\t\t{\n\t\t\t\ttry { pool.wait(); }\n\t\t\t\tcatch (InterruptedException e) {}\n\t\t\t}\n\t\t}\n\t\tif (!stopped)\n\t\t{\n\t\t\ttry { sleep(interval); }\n\t\t\tcatch (InterruptedException e) {}\n\t\t}\n\t}\n}", "path": "src\\snaq\\util\\ObjectPool.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Sets the log stream and enables logging.\n */\n", "func_signal": "public synchronized void setLog(OutputStream out)", "code": "{\n\tif (log != null)\n\t\tclose();\n\tif (out != null)\n\t\tlog = new PrintStream(out);\n\tlogging = true;\n}", "path": "src\\snaq\\util\\LogUtil.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Checks an object into the pool, and notify other\n * threads that may be waiting for one.\n * @param o object to check in\n */\n", "func_signal": "protected final void checkIn(Reusable o)", "code": "{\n\tif (o == null)\n\t{\n\t\tlog(\"Attempt to return null item\");\n\t\treturn;\n\t}\n\n\tsynchronized(this)\n\t{\n\t\tfirePoolCheckInEvent();\n\n\t\t// Check if item is from this pool\n\t\tif (!used.remove(o))\n\t\t{\n\t\t\tlog(\"Attempt to return item not belonging to pool\");\n\t\t\tthrow new RuntimeException(\"Attempt to return item not belonging to pool \" + name);\n\t\t}\n\n\t\t// If pool is full destroy object, else place in pool\n\t\tboolean kill = maxSize > 0  &&  (free.size() + used.size() >= poolSize);\n\t\tkill = kill  ||  (maxSize == 0  &&  free.size() >= poolSize);\n\t\tif (kill)\n\t\t{\n\t\t\tdestroyObject(o);\n\t\t\tif (debug)\n\t\t\t\tlog(\"Checkin* - \" + used.size() + \"/\" + (used.size()+free.size()));\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t//  Recycle object for next use\n\t\t\t\to.recycle();\n\t\t\t\t//  Add object to free list\n\t\t\t\tfree.add(new TimeWrapper(null, o, expiryTime));\n\t\t\t\tif (debug)\n\t\t\t\t\tlog(\"Checkin  - \" + used.size() + \"/\" + (used.size()+free.size()));\n\t\t\t\tnotifyAll();\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\t// If unable to recycle object, destroy it\n\t\t\t\tdestroyObject(o);\n\t\t\t\tlog(e, \"Unable to recycle item - destroyed\");\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\snaq\\util\\ObjectPool.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Closes the log.\n */\n", "func_signal": "public synchronized void close()", "code": "{\n\tlogging = false;\n\tif (log != null)\n\t{\n\t\tlog.flush();\n\t\tif (!isSystemLog())\n\t\t\tlog.close();\n\t}\n\tlog = null;\n}", "path": "src\\snaq\\util\\LogUtil.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Sets the pooling parameters.\n * Any items currently in the pool will remain, subject to the new parameters.\n * (The hit rate counters are reset when this method is called.)\n * @param poolSize number of items to be keep in pool\n * @param maxSize maximum number of items to be created\n * @param expiryTime expiry time for unused items (milliseconds) (0 = no expiry)\n */\n", "func_signal": "public final void setParameters(int poolSize, int maxSize, long expiryTime)", "code": "{\n\tsynchronized(this)\n\t{\n\t\tif (cleaner != null)\n\t\t\tcleaner.halt();\n\n\t\tthis.poolSize = Math.max(poolSize, 0);\n\t\tthis.maxSize = Math.max(maxSize, 0);\n\t\tthis.expiryTime = Math.max(expiryTime, 0);\n\t\tif (this.maxSize > 0  &&  this.maxSize < this.poolSize)\n\t\t\tthis.maxSize = this.poolSize;\n\t\tresetHitCounter();\n\n\t\t//  Update pooled items to use new expiry\n\t\tTimeWrapper tw = null;\n\t\tfor (Iterator iter = free.iterator(); iter.hasNext();)\n\t\t{\n\t\t\ttw = (TimeWrapper)iter.next();\n\t\t\ttw.setLiveTime(expiryTime);\n\t\t}\n\t\t//  Creates cleaner thread with check interval of at most 5 seconds.\n\t\tif (this.expiryTime > 0)\n\t\t{\n\t\t\tlong iVal = Math.min(5000, this.expiryTime / 5);\n\t\t\t(cleaner = new Cleaner(this, iVal)).start();\n\t\t}\n\t}\n\tif (debug)\n\t{\n\t\tString info = \"pool=\" + this.poolSize + \",max=\" + this.maxSize + \",expiry=\";\n\t\tinfo += this.expiryTime == 0 ? \"none\" : this.expiryTime + \"ms\";\n\t\tlog(\"Parameters changed (\" + info + \")\");\n\t}\n\tfireParametersChangedEvent();\n}", "path": "src\\snaq\\util\\ObjectPool.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Initializes the given number of items in the pool.\n * This spawns a new thread to create them in the background.\n */\n", "func_signal": "public final void init(int num)", "code": "{\n\tif (num == 0)\n\t\treturn;\n\tif (num > 0  &&  num <= getMaxSize())\n\t{\n\t\tif (initer != null)\n\t\t{\n\t\t\tiniter.halt();\n\t\t\ttry { initer.join(); } catch (InterruptedException ie) {}\n\t\t}\n\t\tiniter = new InitThread(num);\n\t\tiniter.start();\n\t}\n\telse\n\t\tthrow new IllegalArgumentException(\"Invalid number of items specified for initialization\");\n}", "path": "src\\snaq\\util\\ObjectPool.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Sets the log writer and enables logging.\n */\n", "func_signal": "public synchronized void setLog(PrintStream ps)", "code": "{\n\tif (log != null)\n\t\tclose();\n\tlog = ps;\n\tlogging = true;\n}", "path": "src\\snaq\\util\\LogUtil.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Flushes the pool of all currently available items, emptying the pool.\n */\n", "func_signal": "public final void flush()", "code": "{\n\tint count = 0;\n\tsynchronized(this)\n\t{\n\t\tTimeWrapper tw = null;\n\t\tfor (Iterator iter = free.iterator(); iter.hasNext();)\n\t\t{\n\t\t\ttw = (TimeWrapper)iter.next();\n\t\t\titer.remove();\n\t\t\tdestroyObject((Reusable)tw.getObject());\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count > 0  &&  debug)\n\t\tlog(\"Flushed all spare items from pool\");\n}", "path": "src\\snaq\\util\\ObjectPool.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Safely stops the thread from running.\n */\n", "func_signal": "public void halt()", "code": "{\n\tif (!isHalted())\n\t{\n\t\tstopped = true;\n\t\tinterrupt();  // Wake cleaner if necessary\n\t}\n}", "path": "src\\snaq\\util\\ObjectPool.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Creates new object pool.\n * @param name pool name\n * @param poolSize maximum number of pooled objects, or 0 for no limit\n * @param maxSize maximum number of possible objects, or 0 for no limit\n * @param expiryTime expiry time (milliseconds) for pooled object, or 0 for no expiry\n */\n", "func_signal": "protected ObjectPool(String name, int poolSize, int maxSize, long expiryTime)", "code": "{\n\tClass type = getPoolClass();\n\tif (!List.class.isAssignableFrom(type))\n\t\tthrow new RuntimeException(\"Invalid pool class type specified: \" + type.getName() + \" (must implement java.util.List)\");\n\ttry\n\t{\n\t\tfree = (List)type.newInstance();\n\t\tused = (List)type.newInstance();\n\t}\n\tcatch (Exception e)\n\t{\n\t\tthrow new RuntimeException(\"Unable to instantiate pool class type: \" + type.getName());\n\t}\n\tthis.name = name;\n\tthis.setParameters(poolSize, maxSize, expiryTime);\n}", "path": "src\\snaq\\util\\ObjectPool.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Checks out an item from the pool. If no free item\n * is available, a new item is created unless the maximum\n * number of items has been reached. If a free item\n * is not valid it is removed from the pool and another\n * is retrieved.\n * @return item from the pool, or null if nothing available\n * @exception Exception if there is an error creating a new object\n */\n", "func_signal": "protected final synchronized Reusable checkOut() throws Exception", "code": "{\n\tif (released)\n\t\tthrow new RuntimeException(\"Pool no longer valid for use\");\n\tint oldTotalConns = used.size() + free.size();\n\n\tTimeWrapper tw = null;\n\tReusable o = null;\n\tif (free.size() > 0)\n\t{\n\t\t//  Get an object from the free list\n\t\tswitch(accessMethod)\n\t\t{\n\t\t\tcase ACCESS_FIFO:\n\t\t\t\ttw = (TimeWrapper)free.remove(0);\n\t\t\t\tbreak;\n\t\t\tcase ACCESS_RANDOM:\n\t\t\t\ttw = (TimeWrapper)free.remove((int)(free.size() * Math.random()));\n\t\t\t\tbreak;\n\t\t\tcase ACCESS_LIFO:\n\t\t\tdefault:\n\t\t\t\ttw = (TimeWrapper)free.remove(free.size() - 1);\n\t\t}\n\t\to = (Reusable)tw.getObject();\n\t\tboolean valid = isValid(o);\n\t\twhile (!valid  &&  free.size() > 0)\n\t\t{\n\t\t\tdestroyObject(o);\n\t\t\tlog(\"Removed invalid item from pool\");\n\t\t\ttw = (TimeWrapper)free.remove(0);\n\t\t\to = (Reusable)tw.getObject();\n\t\t\tvalid = isValid(o);\n\t\t}\n\t\tif (free.size() == 0  &&  !valid)\n\t\t\to = null;\n\t}\n\tboolean hit = (o != null);\n\n\t// If no free items and can create more...create new item\n\tif (o == null)\n\t{\n\t\tif (maxSize > 0  &&  used.size() == maxSize)\n\t\t\tfireMaxSizeLimitErrorEvent();\n\t\telse if (used.size() < maxSize  ||  maxSize == 0)\n\t\t{\n\t\t\to = create();\n\t\t\tif (!isValid(o))\n\t\t\t\tthrow new RuntimeException(\"Unable to create a valid connection\");\n\t\t}\n\t}\n\n\t// If a connection has been obtained/created, add it to used items collection\n\tif (o != null)\n\t{\n\t\tused.add(o);\n\t\trequests++;\n\t\tif (hit)\n\t\t\thits++;\n\t\tfirePoolCheckOutEvent();\n\t\t// Check for limit reaching so events can be fired.\n\t\t// (Events only fired on increase of connection numbers).\n\t\tint totalConns = used.size() + free.size();\n\t\tif (totalConns == poolSize  &&  totalConns > oldTotalConns)\n\t\t\tfireMaxPoolLimitReachedEvent();\n\t\telse if (totalConns == poolSize + 1  &&  totalConns > oldTotalConns)\n\t\t\tfireMaxPoolLimitExceededEvent();\n\t\tif (totalConns == maxSize  &&  totalConns > oldTotalConns)\n\t\t\tfireMaxSizeLimitReachedEvent();\n\t}\n\tif (debug)\n\t{\n\t\tString ratio = used.size() + \"/\" + (used.size() + free.size());\n\t\tString hitRate = \" (HitRate=\" + getHitRate() + \"%)\";\n\t\tlog(\"Checkout - \" + ratio + hitRate + (o == null ? \" - null returned\" : \"\"));\n\t}\n\treturn o;\n}", "path": "src\\snaq\\util\\ObjectPool.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Releases all items from the pool, and shuts the pool down.\n * @param forced whether to forcibly destroy items, or let them be checked-in\n */\n", "func_signal": "private final void release(boolean forced)", "code": "{\n\t// Set released flag to prevent check-out of new items\n\tif (released)\n\t\treturn;\n\treleased = true;\n\t//  Destroy cleaner thread\n\tif (cleaner != null)\n\t{\n\t\tcleaner.halt();\n\t\ttry { cleaner.join(); }\n\t\tcatch (InterruptedException ie) { log(ie, \"Interrupted during halting of old cleaner thread\"); }\n\t\tcleaner = null;\n\t}\n\n\tsynchronized(this)\n\t{\n\t\tint rel = 0, failed = 0;\n\t\tTimeWrapper tw = null;\n\t\tReusable o = null;\n\t\t// Destroy all items still in use\n\t\tif (forced)\n\t\t{\n\t\t\tfor (Iterator iter = used.iterator(); iter.hasNext();)\n\t\t\t{\n\t\t\t\to = (Reusable)iter.next();\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tdestroy(o);\n\t\t\t\t\trel++;\n\t\t\t\t}\n\t\t\t\tcatch (Exception ex)\n\t\t\t\t{\n\t\t\t\t\tfailed++;\n\t\t\t\t\tlog(ex, \"Unable to release item in pool\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tused.clear();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (debug  &&  used.size() > 0)\n\t\t\t\tlog(\"Waiting for used items to be checked-in...\");\n\t\t\twhile (used.size() > 0)\n\t\t\t{\n\t\t\t\ttry { wait(); }\n\t\t\t\tcatch (InterruptedException e) {}\n\t\t\t}\n\t\t}\n\n\t\t// Destroy all currently free items\n\t\tfor (Iterator iter = free.iterator(); iter.hasNext();)\n\t\t{\n\t\t\ttw = (TimeWrapper)iter.next();\n\t\t\to = (Reusable)tw.getObject();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tdestroy(o);\n\t\t\t\trel++;\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\tfailed++;\n\t\t\t\tlog(ex, \"Unable to release item in pool\");\n\t\t\t}\n\t\t}\n\t\tfree.clear();\n\n\t\t//  Destroy log reference\n\t\tif (debug)\n\t\t{\n\t\t\tString s = \"Released \" + rel + (rel > 1 ? \" items\" : \" item\");\n\t\t\tif (failed > 0)\n\t\t\t\ts += \" (failed to release \" + failed + (failed > 1 ? \" items)\" : \" item)\");\n\t\t\tlog(s);\n\t\t}\n\t\tfirePoolReleasedEvent();\n\t\tlisteners.clear();\n\t\tsuper.close();\n\t}\n}", "path": "src\\snaq\\util\\ObjectPool.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Destroys the given object (asynchronously if necessary).\n */\n", "func_signal": "private final void destroyObject(final Reusable o)", "code": "{\n\tif (o == null)\n\t\treturn;\n\tif (asyncDestroy)\n\t{\n\t\tThread t = new Thread(new Runnable()\n\t\t{\n\t\t\tpublic void run() { destroy(o); }\n\t\t});\n\t\tt.start();\n\t}\n\telse\n\t\tdestroy(o);\n}", "path": "src\\snaq\\util\\ObjectPool.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Creates a new PoolEvent.\n */\n", "func_signal": "public ObjectPoolEvent(ObjectPool pool, int type)", "code": "{\n\tsuper(pool);\n\tthis.type = type;\n}", "path": "src\\snaq\\util\\ObjectPoolEvent.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Checks out an item from the pool.\n * If there is no pooled item available and the maximum number\n * possible has not been reached, another is created.\n * If a free item is detected as being invalid it is removed\n * from the pool and the another is retrieved.\n * If an item is not available and the maximum number possible\n * has been reached, the method waits for the timeout period\n * for one to become available by being checked in.\n * @param timeout timeout value in milliseconds\n * @return item from the pool, or null if nothing available within timeout period\n * @exception Exception if there is an error creating a new object\n */\n", "func_signal": "protected final synchronized Reusable checkOut(long timeout) throws Exception", "code": "{\n\tlong time = System.currentTimeMillis();\n\tReusable o = null;\n\to = checkOut();\n\twhile (o == null  &&  (System.currentTimeMillis() - time < timeout))\n\t{\n\t\ttry\n\t\t{\n\t\t\tif (debug)\n\t\t\t\tlog(\"No pooled items spare...waiting for up to \" + timeout + \"ms\");\n\t\t\twait(timeout);\n\t\t\to = checkOut();\n\t\t}\n\t\tcatch (InterruptedException e) { log(e, \"Connection checkout interrupted\"); }\n\t}\n\treturn o;\n}", "path": "src\\snaq\\util\\ObjectPool.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Shuts down the object pool.\n * If overridden the sub-class should make sure super.finalize() is called.\n */\n", "func_signal": "public void finalize()", "code": "{\n\tif (cleaner != null)\n\t{\n\t\tcleaner.halt();\n\t\tcleaner = null;\n\t}\n\tif (initer != null)\n\t{\n\t\tiniter.halt();\n\t\tiniter = null;\n\t}\n}", "path": "src\\snaq\\util\\ObjectPool.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Releases all items from the pool, and shuts the pool down.\n * This method returns immediately; a background thread is created to perform the release.\n */\n", "func_signal": "private final void releaseAsync(final boolean forced)", "code": "{\n\tThread t = new Thread(new Runnable()\n\t{\n\t\tpublic void run() { release(forced); }\n\t});\n\tt.start();\n}", "path": "src\\snaq\\util\\ObjectPool.java", "repo_name": "djspiewak/dbpool", "stars": 5, "license": "None", "language": "java", "size": 116}
{"docstring": "// adds samples to the database from a correctly formated json array\n", "func_signal": "public long insertRows(JSONArray json)", "code": "{\n\tlong rowid = -1;\n\n\tfor (int i = 0; i < json.length(); i++) {\n\t\tJSONObject object;\n\t\ttry {\n\t\t\tobject = json.getJSONObject(i);\n\t\t\tIterator keys = object.keys();\n\t\t\tContentValues vals = new ContentValues();\n\n\t\t\twhile (keys.hasNext()) {\n\t\t\t\tString key = keys.next().toString();\n\t\t\t\tString value = object.get(key).toString();\n\n\t\t\t\tvals.put(key, value);\n\t\t\t}\n\n\t\t\t// should be set that they are synced\n\t\t\tvals.put(\"synced\", true);\n\n\t\t\trowid = insertRow(vals);\n\n\t\t} catch (JSONException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tLog.d(TAG, \"did not insert element\");\n\t\t}\n\n\t}\n\n\treturn rowid;\n}", "path": "src\\edu\\ucla\\cens\\budburst\\data\\SyncableDatabase.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "//helper function to create a species item in the list\n", "func_signal": "public Map<String,?> createItem(SpeciesRow species)", "code": "{\n\tMap<String,String> item = new HashMap<String,String>();\n\titem.put(ITEM_COMMON_NAME, species.common_name);\n\titem.put(ITEM_SPECIES_NAME, species.species_name);\n\titem.put(\"icon\", species.getImagePath());\n\titem.put(\"_id\", species._id.toString());\n\treturn item;\n}", "path": "src\\edu\\ucla\\cens\\budburst\\AddPlant.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "/* Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.splashscreen);\n\n\tnew Handler().postDelayed(new Runnable() {\n\t\tpublic void run() {\n\t\t\tstartActivity(new Intent(SplashScreen.this, LoginScreen.class));\n\n\t\t\tSplashScreen.this.finish();\n\t\t}\n\t}, SPLASH_DISPLAY_LENGHT);\n\n\t// Budburst.getDatabaseManager().initDBs();\n\n}", "path": "src\\edu\\ucla\\cens\\budburst\\SplashScreen.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "//creates a new instance of the current type of row\n//probably do not need to extend\n", "func_signal": "public Row newRow()", "code": "{\n\ttry {\n\t\treturn this.getClass().newInstance();\n\t} catch (IllegalAccessException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t} catch (InstantiationException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n\treturn null;\n}", "path": "src\\edu\\ucla\\cens\\budburst\\data\\Row.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "//if you have an activity that you want to download content for, it shoud implement\n//downloadable. you will have two functions consumeInputstream, and onDownloaded.\n//consumeInputstream should return the inputstream returned by the http call into\n//an object that can be used a String for example.\\\n//onDownloaded returns the object you created from consumeInputstream back to your activity\n//this is where you can actually use the dat that you downloaded.\n", "func_signal": "public void download(Downloadable context, int what, Download d)", "code": "{\n\tLog.d(TAG, \"start to download for \" + context.toString());\n\tif (!cache.containsKey(d) || d.isVolitile()) {\n\t\tnew DownloadTask().execute(new DownloadObject(context, what, d));\n\t\tcache.put(d, null);\n\t} else if (cache.get(d) != null) {\n\t\tMessage msg = new Message();\n\t\tmsg.what = what;\n\t\tmsg.obj = cache.get(d);\n\t\tcontext.onDownloaded(msg, d);\n\t}\n}", "path": "src\\edu\\ucla\\cens\\budburst\\DownloadManager.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "/**\n * @param stream InputStream of data from httpResponse.getContent()\n * @return a String with the contents from the response.\n */\n", "func_signal": "public static String generateString(InputStream stream)", "code": "{\n\tInputStreamReader reader = new InputStreamReader(stream);\n\tBufferedReader buffer = new BufferedReader(reader);\n\tStringBuilder sb = new StringBuilder();\n\n\ttry {\n\t\tString cur;\n\t\tboolean begun = false;\n\t\twhile ((cur = buffer.readLine()) != null) {\n\t\t\tif (begun)\n\t\t\t\tsb.append(\"\\n\");\n\t\t\telse\n\t\t\t\tbegun = true;\n\t\t\tsb.append(cur);\n\t\t}\n\t} catch (IOException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n\n\ttry {\n\t\tstream.close();\n\t} catch (IOException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n\tString returnVal = sb.toString();\n\treturn returnVal;\n}", "path": "src\\edu\\ucla\\cens\\budburst\\helper\\netUtils.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "//automatically calculates the fields and values using the public fields of the object\n//probably do not need to extend\n", "func_signal": "public ContentValues vals()", "code": "{\n\tContentValues vals = new ContentValues();\n\n\tField[] fields = getFields();\n\tfor (int i = 0; i < fields.length; i++) {\n\t\ttry {\n\t\t\tObject o = fields[i].get(this);\n\t\t\tif (o != null)\n\t\t\t\tvals.put(fields[i].getName(), o.toString());\n\t\t} catch (IllegalArgumentException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IllegalAccessException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn vals;\n}", "path": "src\\edu\\ucla\\cens\\budburst\\data\\Row.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "// removes the users databases (if they are logged out and log in as another user for example, the database should be cleared.\n", "func_signal": "public void destroyUserDatabases()", "code": "{\n\t((SyncableDatabase) getDatabase(\"site\")).removeAll();\n\t((SyncableDatabase) getDatabase(\"plant\")).removeAll();\n\t((SyncableDatabase) getDatabase(\"observation\")).removeAll();\n}", "path": "src\\edu\\ucla\\cens\\budburst\\BudburstDatabaseManager.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "/**\n * \n */\n", "func_signal": "public static String[] postData(String url, List<NameValuePair> arguments)", "code": "{\n\t// Create a new HttpClient and Post Header\n\tHttpClient httpclient = new DefaultHttpClient();\n\tHttpPost httppost = new HttpPost(url.toString());\n\n\tint status = 0;\n\tString responseVal = \"\";\n\n\ttry {\n\t\t// Add your data\n\n\t\t// List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n\t\t// nameValuePairs.add(new BasicNameValuePair(\"id\", \"12345\"));\n\t\t// nameValuePairs.add(new BasicNameValuePair(\"stringdata\", \"AndDev is Cool!\"));\n\n\t\thttppost.setEntity(new UrlEncodedFormEntity(arguments));\n\n\t\t// Execute HTTP Post Request\n\t\tHttpResponse response = httpclient.execute(httppost);\n\n\t\tHttpEntity entity = response.getEntity();\n\n\t\tresponseVal = netUtils.generateString(entity.getContent());\n\n\t\t// Get status.\n\t\tstatus = response.getStatusLine().getStatusCode();\n\n\t} catch (ClientProtocolException e) {\n\t\t// TODO Auto-generated catch block\n\t} catch (IOException e) {\n\t\t// TODO Auto-generated catch block\n\t}\n\n\tString[] response = new String[2];\n\tresponse[0] = Integer.toString(status);\n\tresponse[1] = responseVal;\n\n\treturn response;\n}", "path": "src\\edu\\ucla\\cens\\budburst\\helper\\netUtils.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "/**\n * \n * @param ctx - pass this from your Activity or Service\n * @return true if the phone has a connection to the Internet.\n */\n", "func_signal": "public static boolean isConnected(Context ctx)", "code": "{\n\tConnectivityManager cm = (ConnectivityManager) ctx.getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo[] ni = cm.getAllNetworkInfo();\n\tboolean connected = false;\n\tfor (int n = 0; n < ni.length; n++) {\n\t\t// Log.d(TAG,\"Network \"+ni[n].getTypeName() + \" is \"+ ni[n].getDetailedState().name() + \"\\n\");\n\t\tif (ni[n].getDetailedState().name() == \"CONNECTED\")\n\t\t\tconnected = true;\n\t}\n\treturn connected;\n}", "path": "src\\edu\\ucla\\cens\\budburst\\helper\\netUtils.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "// returns You if the username matches this users username\n", "func_signal": "public static String getUserIdentifier(Context ctx, String username)", "code": "{\n\tSharedPreferences settings = ctx.getSharedPreferences(ctx.getString(R.string.prefs), 0);\n\tif (username.equals(settings.getString(\"current_username\", no_user)))\n\t\treturn \"You\";\n\n\treturn username;\n}", "path": "src\\edu\\ucla\\cens\\budburst\\PreferencesManager.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "// YYYY-MM-DD\n", "func_signal": "@Override\n\tpublic ArrayList<String> primaryKeys()", "code": "{\n\t\tArrayList<String> ret = new ArrayList<String>();\n\t\tret.add(\"species_id\");\n\t\tret.add(\"site_id\");\n\t\tret.add(\"phenophase_id\");\n\t\treturn ret;\n\t}", "path": "src\\edu\\ucla\\cens\\budburst\\models\\ObservationRow.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "/** Everytime screen is redrawn, this function is called */\n", "func_signal": "@Override\npublic void onResume()", "code": "{\n\tsuper.onResume();\n\n\t// if(netUtils.isConnected(loginScreen.this))\n\t// {\n\tif (PreferencesManager.isUserIn(this)) {\n\t\tgotoMainScreen();\n\t} else {\n\t\tsetContentView(R.layout.loginscreen);\n\t\tvibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);\n\t\tusernameInput = (EditText) this.findViewById(R.id.username_text);\n\t\tpasswordInput = (EditText) this.findViewById(R.id.password_text);\n\t\tregisterButton = (Button) this.findViewById(R.id.register_button);\n\n\t\tif (PreferencesManager.getDefaultUser(this) != PreferencesManager.no_user) {\n\t\t\tusernameInput.setText(PreferencesManager.getDefaultUser(this));\n\t\t}\n\n\t\tregisterButton.setOnClickListener(new View.OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tIntent intent = new Intent(Intent.ACTION_VIEW);\n\t\t\t\tintent.setData(Uri.parse(getString(R.string.registerURL)));\n\t\t\t\tstartActivity(intent);\n\t\t\t}\n\t\t});\n\n\t\tloginButton = (Button) this.findViewById(R.id.login_button);\n\t\tloginButton.setOnClickListener(new View.OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tInputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\n\t\t\t\timm.hideSoftInputFromWindow(usernameInput.getWindowToken(), 0);\n\t\t\t\tattemptLogin();\n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t\ttestLoginButton = (Button) this.findViewById(R.id.test_login_button);\n\t\ttestLoginButton.setOnClickListener(new View.OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tPreferencesManager.letUserIn(\"test\", \"test\", LoginScreen.this);\n\t\t\t\tgotoMainScreen();\n\t\t\t}\n\t\t});\n\t}\n\t// }\n\t// else\n\t// {\n\t// setContentView(R.layout.loginscreen);\n\t//\n\t// // Warn the user that there is no internet.\n\t// AlertDialog.Builder builder = new AlertDialog.Builder(\n\t// loginScreen.this);\n\t// builder\n\t// .setMessage(\n\t// \"Currently there is no network connection.  Please open up the web browser and see what message appears.  If the browser says you need to upgrade data plan, please contact UCLA.  Otherwise, just retry this when you have proper cell service.\")\n\t// .setCancelable(false).setPositiveButton(\n\t// \"Okay\",\n\t// new DialogInterface.OnClickListener() {\n\t// public void onClick(\n\t// DialogInterface dialog, int id) {\n\t// loginScreen.this.finish();\n\t// }\n\t// });\n\t// AlertDialog alert = builder.create();\n\t// alert.show();\n\t//\n\t// }\n}", "path": "src\\edu\\ucla\\cens\\budburst\\LoginScreen.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "//similar to has one, but used for models which have many of another model\n//returns hasMany for table name, on field match with value value, with optional filter\n//uses a RelationRow to do the maping with an optional filter\n//look at SpeciesRow, PhenophaseRow, and SpeciesPhenophaseRow for an example of how it\n//is used\n", "func_signal": "protected ArrayList<Row> hasMany(String name, String match, String value, String filter)", "code": "{\n\tArrayList<Row> this_that = Budburst.getDatabaseManager().getDatabase(getName() + \"_\" + name).find(match + \"=\" + value);\n\t// for (Iterator<Row> i = this_that.iterator(); i.hasNext();) {\n\t// Log.d(TAG, i.next().toString());\n\t// }\n\tif (filter != null && !filter.trim().equals(\"\"))\n\t\tfilter += \" AND \";\n\treturn Budburst.getDatabaseManager().getDatabase(name).find(this_that, name + \"_id\", filter);\n}", "path": "src\\edu\\ucla\\cens\\budburst\\data\\Row.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\n\t// Re-task if the request was cancelled.\n\tmLoginTask = (LoginTask) getLastNonConfigurationInstance();\n\tif (mLoginTask != null && mLoginTask.isCancelled()) {\n\t\tmLoginTask = new LoginTask().execute();\n\t}\n}", "path": "src\\edu\\ucla\\cens\\budburst\\LoginScreen.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "//Automatically creates all the correct databases which will be used with budburst\n", "func_signal": "public BudburstDatabaseManager(Context context)", "code": "{\n\tsuper(context);\n\tcreateDatabase(\"species_phenophase\", R.raw.species_phenophase_db, new SpeciesPhenophaseRow());\n\tcreateDatabase(\"phenophase\", R.raw.phenophase_db, new PhenophaseRow());\n\n\tString downSiteURL = context.getString(R.string.phone_service_url) + \"?get_my_species\";\n\tString upSiteURL = \"\";\n\tcreateSyncableDatabase(\"species\", R.raw.species_db, downSiteURL, upSiteURL, new SpeciesRow());\n\n\tdownSiteURL = context.getString(R.string.phone_service_url) + \"?get_my_sites\";\n\tupSiteURL = \"\";\n\tcreateSyncableDatabase(\"site\", downSiteURL, upSiteURL, new SiteRow());\n\n\tString downPlantURL = context.getString(R.string.phone_service_url) + \"?get_my_plants\";\n\tString upPlantURL = context.getString(R.string.phone_service_url) + \"?add_plant\";\n\tcreateSyncableDatabase(\"plant\", downPlantURL, upPlantURL, new PlantRow());\n\n\tString downObsURL = context.getString(R.string.phone_service_url) + \"?get_my_obs\";\n\tString upObsURL = context.getString(R.string.uploadObservationsUrl);\n\tcreateSyncableDatabase(\"observation\", downObsURL, upObsURL, new ObservationRow());\n}", "path": "src\\edu\\ucla\\cens\\budburst\\BudburstDatabaseManager.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "//reads in the cursor returned from the database to create a model\n", "func_signal": "public void readCursor(Cursor c)", "code": "{\n\tField[] fields = getFields();\n\tfor (int i = 0; i < fields.length; i++) {\n\t\ttry {\n\t\t\tif (fields[i].getType().equals(Long.class))\n\t\t\t\tfields[i].set(this, c.getLong(i));\n\t\t\telse if (fields[i].getType().equals(String.class))\n\t\t\t\tfields[i].set(this, c.getString(i));\n\t\t\telse if (fields[i].getType().equals(Boolean.class))\n\t\t\t\tfields[i].set(this, c.getString(i).equals(\"true\"));\n\t\t\telse if (fields[i].getType().equals(Double.class))\n\t\t\t\tfields[i].set(this, c.getDouble(i));\n\t\t} catch (IllegalArgumentException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IllegalAccessException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "path": "src\\edu\\ucla\\cens\\budburst\\data\\Row.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.main);\n\t\n\t//Starting point for application\n\n\tstartActivity(new Intent(this, SplashScreen.class));\n\n\t// create references to the databaseManager and downloadManager\n\t// this can both be used from other activites by calling Budburst.getDownloadManager() or Budburst.getDatabaseManager(). They allow you to access the downloadManager or databaseManager.\n\tdbManager = new BudburstDatabaseManager(this);\n\tdownloadManager = new DownloadManager();\n\n\t// Debugging code\n\t// PreferencesManager.letUserIn(\"android4\", \"android4\", this);\n\n\tif (PreferencesManager.isFirstRun(this)) {\n\n\t\t// First Time stuff\n\t\t// make sure budburst directory is set\n\t\tif (!new File(BASE_PATH).exists())\n\t\t\tnew File(BASE_PATH).mkdirs();\n\t\tif (!new File(OBSERVATION_PATH).exists())\n\t\t\tnew File(OBSERVATION_PATH).mkdirs();\n\t\tif (!new File(SPECIES_PATH).exists())\n\t\t\tnew File(SPECIES_PATH).mkdirs();\n\n\t\t// move species_images\n\t\ttry {\n\t\t\tString[] images = getAssets().list(\"species_images\");\n\t\t\tfor (int i = 0; i < images.length; i++) {\n\n\t\t\t\tOutputStream outputStream = new FileOutputStream(SPECIES_PATH + images[i]);\n\t\t\t\tInputStream inputStream;\n\n\t\t\t\tbyte[] buffer = new byte[1024];\n\t\t\t\tinputStream = getAssets().open(\"species_images/\" + images[i]);\n\t\t\t\twhile ((inputStream.read(buffer)) > 0) {\n\t\t\t\t\toutputStream.write(buffer);\n\t\t\t\t}\n\t\t\t\tinputStream.close();\n\n\t\t\t\toutputStream.flush();\n\t\t\t\toutputStream.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t// End first time stuff\n\n\tfinish();\n}", "path": "src\\edu\\ucla\\cens\\budburst\\Budburst.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "// complicated code to work with downloading data from the budburst databases\n// first any new observations or plants are uploaded.\n// then any new sites, plants, and observations are downloaded\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.download_data);\n\n\tdbManager = Budburst.getDatabaseManager();\n\tdownloadManager = Budburst.getDownloadManager();\n\n\t// start uploads first, downloads will start when uploads are done\n\tuploads();\n\n}", "path": "src\\edu\\ucla\\cens\\budburst\\SyncDatabases.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "//actually commits the data to the database\n", "func_signal": "public void put()", "code": "{\n\t//run onDelete in case we are replacing a row\n\t//Ex. we need to delete an old image\n\tif(_id != null)\n\t\t((WritableDatabase) Budburst.getDatabaseManager().getDatabase(getName())).find(_id).onDelete();\n\t((WritableDatabase) Budburst.getDatabaseManager().getDatabase(getName())).insertRow(this);\n}", "path": "src\\edu\\ucla\\cens\\budburst\\data\\Row.java", "repo_name": "cketcham/budburst-android-client", "stars": 5, "license": "None", "language": "java", "size": 2768}
{"docstring": "/**\n * Helper method to expand all annotations that cover <code>point</code>,\n * and shift the ones that start after.\n * \n * @param point the starting point of that determines which annotations\n *     should be shifted.\n * @param length the length of the entity that is about to be inserted,\n *     which determines the shift amount.\n */\n", "func_signal": "private void expandOrShiftAnnotations(int point, int length)", "code": "{\n  for (Annotation annotation : blipData.getAnnotations()) {\n    // Shift the starting index of the annotation.\n    int start = annotation.getRange().getStart();\n    if (start >= point) {\n      annotation.getRange().setStart(start + length);\n    }\n\n    // Shift the end index of the annotation.\n    int end = annotation.getRange().getEnd();\n    if (end >= point) {\n      annotation.getRange().setEnd(end + length);\n    }\n  }\n}", "path": "java\\src\\com\\google\\wave\\api\\impl\\TextViewImpl.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Constructs an empty gadget.\n */\n", "func_signal": "public Gadget()", "code": "{\n  super(ElementType.GADGET);\n  setUrl(\"\");\n}", "path": "java\\src\\com\\google\\wave\\api\\Gadget.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Constructs a StyledText object, initializing it with a string of text and\n * an initial style.\n * \n * @param text The text to styled.\n * @param style The style to be applied to the text.\n */\n", "func_signal": "public StyledText(String text, StyleType style)", "code": "{\n  this(text);\n  styles.add(style);\n}", "path": "java\\src\\com\\google\\wave\\api\\StyledText.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Creates a deep copy/clone of a blip's data.\n * \n * @param blip The original blip to be copied. \n */\n", "func_signal": "public BlipData(BlipData blip)", "code": "{\n  // Deep copy annotations.\n  annotations = new ArrayList<Annotation>();\n  for (Annotation annotation : blip.getAnnotations()) {\n    annotations.add(new Annotation(annotation.getName(), annotation.getValue(),\n        annotation.getRange()));\n  }\n  \n  // Deep copy form elements.\n  elements = new HashMap<String, Element>();\n  for (Entry<String, Element> entry : blip.getElements().entrySet()) {\n    elements.put(entry.getKey(), new Element(entry.getValue()));\n  }\n  \n  creator = blip.getCreator();\n  childBlipIds = blip.getChildBlipIds();\n  content = blip.getContent();\n  contributors = blip.getContributors();\n  blipId = blip.getBlipId();\n  lastModifiedTime = blip.getLastModifiedTime();\n  version = blip.getVersion();\n  parentBlipId = blip.getParentBlipId();\n  waveId = blip.getWaveId();\n  waveletId = blip.getWaveletId();\n}", "path": "java\\src\\com\\google\\wave\\api\\impl\\BlipData.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Return whether the lookingFor event is contained in this bundle.\n */\n", "func_signal": "public boolean hasEvent(EventType lookingFor)", "code": "{\n  for (EventData event : events) {\n    if (event.getType().equals(lookingFor)) {\n      return true;\n    }\n  }\n  return false;\n}", "path": "java\\src\\com\\google\\wave\\api\\impl\\EventMessageBundle.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * EventData copy constructor used to initialize classes that extend\n * EventData.\n * \n * @param event the event. \n */\n", "func_signal": "public EventData(EventData event)", "code": "{\n  timestamp = event.timestamp;\n  modifiedBy = event.modifiedBy;\n  type = event.type;\n  properties = event.properties;\n}", "path": "java\\src\\com\\google\\wave\\api\\impl\\EventData.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Constructs a StyledText object, initializing it with the given text.\n */\n", "func_signal": "public StyledText(String text)", "code": "{\n  this.text = text;\n  this.styles = new ArrayList<StyleType>();\n}", "path": "java\\src\\com\\google\\wave\\api\\StyledText.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Creates a copy of an existing form element.\n */\n", "func_signal": "public FormElement(FormElement formElement)", "code": "{\n  this(formElement.getType(),\n      (String) formElement.getProperty(\"label\"),\n      (String) formElement.getProperty(\"name\"),\n      (String) formElement.getProperty(\"defaultValue\"),\n      (String) formElement.getProperty(\"value\"));\n}", "path": "java\\src\\com\\google\\wave\\api\\FormElement.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Helper method to subtract annotations that covers <code>point</code> to\n * <code>length</code> range, and shift the ones that start after.\n * \n * @param point the starting point of that determines which annotations\n *     should be shifted.\n * @param length the length of the entity that is about to be deleted\n */\n", "func_signal": "private void shrinkOrShiftAnnotations(int point, int length)", "code": "{\n  ListIterator<Annotation> iterator = blipData.getAnnotations().listIterator();\n  while (iterator.hasNext()) {\n    Range range = iterator.next().getRange();\n    int start = range.getStart();\n    int end = range.getEnd();\n    \n    // There are six cases to consider, since start and end can each be in three different\n    // states: before, in, or after the \"deleted\" range. However, we ignore the case where\n    // both start and end are before the \"deleted\" range. We also assume that start < end.\n    if (start < point) {\n      if (end >= point + length) {\n        // Case 1: Start is before, end is after the deleted range.\n        range.setEnd(end - length);\n      } else if (end >= point) {\n        // Case 2: Start is before, end is in the deleted range.\n        range.setEnd(point);\n      } else {\n        // Case 3: Start and end are before the deleted range. Do nothing.\n      }\n    } else if (start >= point + length) {\n      // Case 4: Start and end are after the deleted range.\n      range.setStart(start - length);\n      range.setEnd(end - length);\n    } else {\n      if (end > point + length) {\n        // Case 5: Start is inside, end is after the deleted range.\n        range.setStart(point);\n        range.setEnd(end - length);\n      } else {\n        // Case 6: Start is inside, end is inside the deleted range. Delete the annotation.\n        iterator.remove();\n      }\n    }\n  }\n}", "path": "java\\src\\com\\google\\wave\\api\\impl\\TextViewImpl.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Constructs an empty BlipData object.\n */\n", "func_signal": "public BlipData()", "code": "{\n  annotations = new ArrayList<Annotation>();\n  elements = new HashMap<String, Element>();\n  creator = null;\n  childBlipIds = new ArrayList<String>();\n  content = \"\\n\";\n  contributors = new ArrayList<String>();\n  blipId = null;\n  lastModifiedTime = -1L;\n  version = -1L;\n  parentBlipId = null;\n  waveId = null;\n  waveletId = null;\n}", "path": "java\\src\\com\\google\\wave\\api\\impl\\BlipData.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Inserts text at the starting index provided. Styles applying to the current\n * text will apply to the combined text. If the index does not exist,\n * the text is appended to the end of the document.\n * \n * @param start index into current text with which to perform the insertion.\n * @param text the text to be inserted.\n */\n", "func_signal": "public void insertText(int start, String text)", "code": "{\n  StringBuilder sb = new StringBuilder(this.text);\n  sb.insert(start, text);\n  this.text = sb.toString();\n}", "path": "java\\src\\com\\google\\wave\\api\\StyledText.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Constructs a form element specifying all fields.\n */\n", "func_signal": "public FormElement(ElementType type, String label, String name, String defaultValue,\n    String value)", "code": "{\n  super(type);\n  setProperty(\"label\", label);\n  setProperty(\"name\", name);\n  setProperty(\"defaultValue\", defaultValue);\n  setProperty(\"value\", value);\n}", "path": "java\\src\\com\\google\\wave\\api\\FormElement.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Validates the members of the annotation.\n */\n", "func_signal": "private void validate()", "code": "{\n  if (name == null || name.isEmpty()) {\n    throw new IllegalArgumentException(\"The annotation name must not be null or empty.\");\n  }\n  \n  if (value == null) {\n    throw new IllegalArgumentException(\"The annotation value must not be null.\");\n  }\n}", "path": "java\\src\\com\\google\\wave\\api\\Annotation.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Removes the requested style from the list of styles for this text.\n * \n * @param style the style to be removed.\n */\n", "func_signal": "public void removeStyle(StyleType style)", "code": "{\n  while (styles.remove(style)) {\n  }\n}", "path": "java\\src\\com\\google\\wave\\api\\StyledText.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Constructs a Wave image given an attachment id and a caption.\n * \n * @param attachmentId the attachment id of the wave image.\n * @param caption the captopm for the image.\n */\n", "func_signal": "public Image(String attachmentId, String caption)", "code": "{\n  this();\n  setAttachmentId(attachmentId);\n  setCaption(caption);\n}", "path": "java\\src\\com\\google\\wave\\api\\Image.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Require the availability of the specified blipId for this bundle.\n * \n * @param blipId the id of the blip that is required.\n * @param contexts we need for this blip.\n */\n", "func_signal": "public void requireBlip(String blipId, List<Context> contexts)", "code": "{\n  Set<Context> contextSet = requiredBlips.get(blipId);\n  if (contextSet == null) {\n    contextSet = new HashSet<Context>();\n    requiredBlips.put(blipId, contextSet);\n  }\n  for (Context context : contexts) {\n    contextSet.add(context);\n  }\n}", "path": "java\\src\\com\\google\\wave\\api\\impl\\EventMessageBundle.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Parse version identifier from the capabilities.xml file, and set it to\n * {@code version} static variable.\n */\n", "func_signal": "private static void parseVersionIdentifier()", "code": "{\n\ttry {\n\t\tDocumentBuilder builder = DocumentBuilderFactory.newInstance()\n\t\t\t\t.newDocumentBuilder();\n\t\tDocument document = builder.parse(new FileInputStream(\n\t\t\t\tWAVE_CAPABILITIES_XML_FILE_PATH));\n\t\tNodeList elements = document\n\t\t\t\t.getElementsByTagName(CAPABILITIES_XML_VERSION_TAG_NAME);\n\t\tif (elements.getLength() >= 1) {\n\t\t\tNode versionNode = elements.item(0);\n\t\t\tversion = versionNode.getTextContent();\n\t\t}\n\t} catch (IOException e) {\n\t\tlog.warning(\"Problem opening capabilities.xml file. Cause: \"\n\t\t\t\t+ e.getMessage());\n\t} catch (SAXException e) {\n\t\tlog.warning(\"Problem parsing capabilities.xml file. Cause: \"\n\t\t\t\t+ e.getMessage());\n\t} catch (ParserConfigurationException e) {\n\t\tlog.warning(\"Problem setting up XML parser. Cause: \"\n\t\t\t\t+ e.getMessage());\n\t}\n}", "path": "java\\src\\com\\google\\wave\\api\\AbstractRobotServlet.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Constructs a range object given a start and end index into the document.\n * \n * @param start Start of the range.\n * @param end End of the range.\n */\n", "func_signal": "public Range(int start, int end)", "code": "{\n  // TODO(scovitz): Figure out why Spelly generates zero length range here.\n//    if (end - start <= 0) {\n//      throw new RuntimeException(\"Range length cannot be zero or negative.\");\n//    } else {\n    this.start = start;\n    this.end = end;\n//    }\n}", "path": "java\\src\\com\\google\\wave\\api\\Range.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Constructs an external image given a url, image dimensions, and a caption.\n * \n * @param url the url for the external image.\n * @param width the width of the image.\n * @param height the height of the image.\n * @param caption the caption for the image.\n */\n", "func_signal": "public Image(String url, int width, int height, String caption)", "code": "{\n  this();\n  setUrl(url);\n  setWidth(width);\n  setHeight(height);\n  setCaption(caption);\n}", "path": "java\\src\\com\\google\\wave\\api\\Image.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * Constructs a gadget for the specified url.\n *  \n * @param url the url of the gadget specification.\n */\n", "func_signal": "public Gadget(String url)", "code": "{\n  super(ElementType.GADGET);\n  setUrl(url);\n}", "path": "java\\src\\com\\google\\wave\\api\\Gadget.java", "repo_name": "avital/thewe-clojure-relay", "stars": 4, "license": "None", "language": "java", "size": 5772}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public void populateUser1()", "code": "{\n    DefaultListModel model = new DefaultListModel();\n    user1Deck.setModel(model);\n\n    Set s = user1.getDeckList().deckSet();\n    for (Object o : s) {\n        model.addElement((String) o);\n    }\n}", "path": "src\\GameStartUI.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    playerOneText = new javax.swing.JTextField();\n    playerTwoText = new javax.swing.JTextField();\n    LoginLabel = new javax.swing.JLabel();\n    playerOneLabel = new javax.swing.JLabel();\n    playerTwoLabel = new javax.swing.JLabel();\n    playerOneEditButton = new javax.swing.JButton();\n    playerTwoEditButton = new javax.swing.JButton();\n    startButton = new javax.swing.JButton();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n    setTitle(\"Login\");\n\n    playerOneText.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            playerOneTextActionPerformed(evt);\n        }\n    });\n    playerOneText.addPropertyChangeListener(new java.beans.PropertyChangeListener() {\n        public void propertyChange(java.beans.PropertyChangeEvent evt) {\n            playerOneTextPropertyChange(evt);\n        }\n    });\n    playerOneText.addKeyListener(new java.awt.event.KeyAdapter() {\n        public void keyTyped(java.awt.event.KeyEvent evt) {\n            playerOneTextKeyTyped(evt);\n        }\n    });\n\n    playerTwoText.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            playerTwoTextActionPerformed(evt);\n        }\n    });\n    playerTwoText.addPropertyChangeListener(new java.beans.PropertyChangeListener() {\n        public void propertyChange(java.beans.PropertyChangeEvent evt) {\n            playerTwoTextPropertyChange(evt);\n        }\n    });\n    playerTwoText.addKeyListener(new java.awt.event.KeyAdapter() {\n        public void keyTyped(java.awt.event.KeyEvent evt) {\n            playerTwoTextKeyTyped(evt);\n        }\n    });\n\n    LoginLabel.setFont(new java.awt.Font(\"Calibri\", 0, 36));\n    LoginLabel.setForeground(new java.awt.Color(204, 0, 0));\n    LoginLabel.setText(\"Login\");\n\n    playerOneLabel.setText(\"Player 1\");\n\n    playerTwoLabel.setText(\"Player 2\");\n\n    playerOneEditButton.setText(\"Edit P1\");\n    playerOneEditButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            playerOneEditButtonActionPerformed(evt);\n        }\n    });\n\n    playerTwoEditButton.setText(\"Edit P2\");\n    playerTwoEditButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            playerTwoEditButtonActionPerformed(evt);\n        }\n    });\n\n    startButton.setText(\"Start Kadrigam!\");\n    startButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            startButtonActionPerformed(evt);\n        }\n    });\n    startButton.addPropertyChangeListener(new java.beans.PropertyChangeListener() {\n        public void propertyChange(java.beans.PropertyChangeEvent evt) {\n            startButtonPropertyChange(evt);\n        }\n    });\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGap(145, 145, 145)\n            .addComponent(LoginLabel)\n            .addContainerGap(182, Short.MAX_VALUE))\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addGroup(layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(startButton))\n                .addGroup(layout.createSequentialGroup()\n                    .addGap(38, 38, 38)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                        .addComponent(playerOneLabel)\n                        .addComponent(playerTwoLabel))\n                    .addGap(33, 33, 33)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(playerTwoText, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)\n                        .addComponent(playerOneText, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))\n                    .addGap(28, 28, 28)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(playerOneEditButton)\n                        .addComponent(playerTwoEditButton))))\n            .addGap(44, 44, 44))\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n            .addGap(25, 25, 25)\n            .addComponent(LoginLabel)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(playerOneText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(playerOneEditButton))\n                .addComponent(playerOneLabel))\n            .addGap(31, 31, 31)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(playerTwoLabel)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(playerTwoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(playerTwoEditButton)))\n            .addGap(39, 39, 39)\n            .addComponent(startButton)\n            .addGap(48, 48, 48))\n    );\n\n    pack();\n}", "path": "src\\LoginUI.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "//GEN-LAST:event_jPanel2MouseMoved\n", "func_signal": "private void moreHandActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_moreHandActionPerformed\n        offset = (offset + 1) % max_offset;\n        update();\n    }", "path": "src\\GameBoard.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n    java.awt.EventQueue.invokeLater(new Runnable() {\n\n        public void run() {\n            new LoginUI().setVisible(true);\n        }\n    });\n\n}", "path": "src\\LoginUI.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "//GEN-LAST:event_playerOneTextKeyTyped\n", "func_signal": "private void playerTwoTextKeyTyped(java.awt.event.KeyEvent evt)", "code": "{//GEN-FIRST:event_playerTwoTextKeyTyped\n        if (playerOneText.getText().length() > 0\n                && playerTwoText.getText().length() > 0) {\n            startButton.setEnabled(true);\n        } else {\n            startButton.setEnabled(false);\n        }\n    }", "path": "src\\LoginUI.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "/** Creates new form GameStartUI */\n", "func_signal": "public GameStartUI(User u1, User u2)", "code": "{\n    initComponents();\n    user1 = u1;\n    user2 = u2;\n    populateUser1();\n    populateUser2();\n}", "path": "src\\GameStartUI.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "//GEN-LAST:event_playerOneEditButtonActionPerformed\n", "func_signal": "private void playerTwoEditButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_playerTwoEditButtonActionPerformed\n        String player2 = playerTwoText.getText();\n\n        String filename = player2 + \".ser\";\n\n        User user2 = null;\n        FileInputStream fis = null;\n        ObjectInputStream in = null;\n\n        try {\n            fis = new FileInputStream(filename);\n            in = new ObjectInputStream(fis);\n            user2 = (User) in.readObject();\n            in.close();\n        } catch (IOException readEx) {\n            user2 = new User(player2);\n            Login.serialize(user2, player2);\n\n            //readEx.printStackTrace();\n        } catch (ClassNotFoundException ex) {\n            ex.printStackTrace();\n        }\n        EditorUI e = new EditorUI(user2);\n        e.run(user2);\n    }", "path": "src\\LoginUI.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "//GEN-LAST:event_playerTwoEditButtonActionPerformed\n", "func_signal": "private void startButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_startButtonActionPerformed\n        String player1 = playerOneText.getText();\n        String player2 = playerTwoText.getText();\n\n        String filename1 = player1 + \".ser\";\n        String filename2 = player2 + \".ser\";\n\n        // unserialize user1\n        User user1 = null;\n        FileInputStream fis = null;\n        ObjectInputStream in = null;\n\n        try {\n            fis = new FileInputStream(filename1);\n            in = new ObjectInputStream(fis);\n            user1 = (User) in.readObject();\n            in.close();\n        } catch (IOException readEx) {\n            user1 = new User(player1);\n            Login.serialize(user1, player1);\n\n        } catch (ClassNotFoundException ex) {\n            ex.printStackTrace();\n        }\n\n        // unserialize user2\n        User user2 = null;\n        FileInputStream fis2 = null;\n        ObjectInputStream in2 = null;\n\n        try {\n            fis2 = new FileInputStream(filename2);\n            in2 = new ObjectInputStream(fis2);\n            user2 = (User) in2.readObject();\n            in2.close();\n        } catch (IOException readEx2) {\n            user2 = new User(player2);\n            Login.serialize(user2, player2);\n\n        } catch (ClassNotFoundException ex2) {\n            ex2.printStackTrace();\n        }\n        GameStartUI g = new GameStartUI(user1,user2);\n        g.run();\n    }", "path": "src\\LoginUI.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void startActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_startActionPerformed\n        // TODO add your handling code here:\n        String s1 = (String) user1Deck.getSelectedValue();\n        String s2 = (String) user2Deck.getSelectedValue();\n        CardCollection c1 = user1.getDeck(s1);\n        CardCollection c2 = user2.getDeck(s2);\n        CardPile deck1 = c1.shuffleToPile();\n        CardPile deck2 = c2.shuffleToPile();\n        Player p1 = new HumanPlayer(deck1,user1.getAccountName());\n        Player p2 = new HumanPlayer(deck2,user2.getAccountName());\n        Game g = new StandardGame(p1, p2);\n        System.out.println(\"Game set up\");\n        dispose();\n        //g.play();\n    }", "path": "src\\GameStartUI.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "/** Creates new form LoginUI */\n", "func_signal": "public LoginUI()", "code": "{\n    initComponents();\n    startButton.setEnabled(false);\n\n}", "path": "src\\LoginUI.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "//GEN-LAST:event_playerTwoTextActionPerformed\n", "func_signal": "private void playerOneEditButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_playerOneEditButtonActionPerformed\n        String player1 = playerOneText.getText();\n\n        String filename = player1 + \".ser\";\n\n        User user1 = null;\n        FileInputStream fis = null;\n        ObjectInputStream in = null;\n\n        try {\n            fis = new FileInputStream(filename);\n            in = new ObjectInputStream(fis);\n            user1 = (User) in.readObject();\n            in.close();\n        } catch (IOException readEx) {\n            user1 = new User(player1);\n            Login.serialize(user1, player1);\n\n            // testing print\n            //readEx.printStackTrace();\n        } catch (ClassNotFoundException ex) {\n            ex.printStackTrace();\n        }\n\n\n        EditorUI e = new EditorUI(user1);\n        e.run(user1);\n\n    }", "path": "src\\LoginUI.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "// Ends game\n", "func_signal": "public Player winner()", "code": "{\n    //TODO: Make game end\n    boolean p1lost = true;\n    boolean p2lost = true;\n\n\n    p1lost = p1lost && (p.getLife().get(Color.NEUTRAL) == 0);\n    p2lost = p2lost && (opp.getLife().get(Color.NEUTRAL) == 0);\n    p1lost = (p1lost || p.getDeck().isEmpty());\n    p2lost = (p2lost || opp.getDeck().isEmpty());\n\n    if (p1lost && !p2lost) {\n        return opp;\n    } else if (p2lost && !p1lost) {\n        return p;\n    } else //Throw a tie game exception?\n    {\n        return null;\n    }\n\n}", "path": "src\\GameBoard.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "/** Creates new form GameBoard */\n", "func_signal": "public GameBoard(Player p, Player opp, Rules r)", "code": "{\n    this.p = p;\n    this.opp = opp;\n    this.r = r;\n    offset = 0;\n\n    initComponents();\n    update();\n}", "path": "src\\GameBoard.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    mainPanel = new javax.swing.JPanel();\n    enemies = new javax.swing.JPanel();\n    enemy1 = new javax.swing.JButton();\n    enemy2 = new javax.swing.JButton();\n    enemy3 = new javax.swing.JButton();\n    enemy4 = new javax.swing.JButton();\n    enemy5 = new javax.swing.JButton();\n    allies = new javax.swing.JPanel();\n    ally1 = new javax.swing.JButton();\n    ally2 = new javax.swing.JButton();\n    ally3 = new javax.swing.JButton();\n    ally4 = new javax.swing.JButton();\n    ally5 = new javax.swing.JButton();\n    hand = new javax.swing.JPanel();\n\n    mainPanel.setName(\"mainPanel\"); // NOI18N\n\n    enemies.setName(\"enemies\"); // NOI18N\n\n    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(kadrigamgui.KadrigamGUIApp.class).getContext().getResourceMap(KadrigamGUIView.class);\n    enemy1.setText(resourceMap.getString(\"enemy1.text\")); // NOI18N\n    enemy1.setName(\"enemy1\"); // NOI18N\n\n    enemy2.setText(resourceMap.getString(\"enemy2.text\")); // NOI18N\n    enemy2.setName(\"enemy2\"); // NOI18N\n\n    enemy3.setText(resourceMap.getString(\"enemy3.text\")); // NOI18N\n    enemy3.setName(\"enemy3\"); // NOI18N\n\n    enemy4.setText(resourceMap.getString(\"enemy4.text\")); // NOI18N\n    enemy4.setName(\"enemy4\"); // NOI18N\n\n    enemy5.setText(resourceMap.getString(\"enemy5.text\")); // NOI18N\n    enemy5.setName(\"enemy5\"); // NOI18N\n\n    org.jdesktop.layout.GroupLayout enemiesLayout = new org.jdesktop.layout.GroupLayout(enemies);\n    enemies.setLayout(enemiesLayout);\n    enemiesLayout.setHorizontalGroup(\n        enemiesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(enemiesLayout.createSequentialGroup()\n            .add(enemy1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 204, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(enemy2)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(enemy3)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(enemy4)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(enemy5)\n            .addContainerGap(100, Short.MAX_VALUE))\n    );\n\n    enemiesLayout.linkSize(new java.awt.Component[] {enemy1, enemy2, enemy3, enemy4, enemy5}, org.jdesktop.layout.GroupLayout.HORIZONTAL);\n\n    enemiesLayout.setVerticalGroup(\n        enemiesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(enemiesLayout.createSequentialGroup()\n            .add(enemiesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)\n                .add(enemy1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 286, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n                .add(enemy2)\n                .add(enemy3)\n                .add(enemy4)\n                .add(enemy5))\n            .addContainerGap(30, Short.MAX_VALUE))\n    );\n\n    enemiesLayout.linkSize(new java.awt.Component[] {enemy1, enemy2, enemy3, enemy4, enemy5}, org.jdesktop.layout.GroupLayout.VERTICAL);\n\n    allies.setName(\"allies\"); // NOI18N\n\n    ally1.setText(resourceMap.getString(\"ally1.text\")); // NOI18N\n    ally1.setName(\"ally1\"); // NOI18N\n    ally1.addChangeListener(new javax.swing.event.ChangeListener() {\n        public void stateChanged(javax.swing.event.ChangeEvent evt) {\n            ally1StateChanged(evt);\n        }\n    });\n\n    ally2.setText(resourceMap.getString(\"ally2.text\")); // NOI18N\n    ally2.setName(\"ally2\"); // NOI18N\n\n    ally3.setText(resourceMap.getString(\"ally3.text\")); // NOI18N\n    ally3.setName(\"ally3\"); // NOI18N\n\n    ally4.setText(resourceMap.getString(\"ally4.text\")); // NOI18N\n    ally4.setName(\"ally4\"); // NOI18N\n\n    ally5.setText(resourceMap.getString(\"ally5.text\")); // NOI18N\n    ally5.setName(\"ally5\"); // NOI18N\n\n    org.jdesktop.layout.GroupLayout alliesLayout = new org.jdesktop.layout.GroupLayout(allies);\n    allies.setLayout(alliesLayout);\n    alliesLayout.setHorizontalGroup(\n        alliesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(alliesLayout.createSequentialGroup()\n            .add(5, 5, 5)\n            .add(ally1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 204, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(ally2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(ally3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)\n            .add(ally4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(ally5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(331, Short.MAX_VALUE))\n    );\n\n    alliesLayout.linkSize(new java.awt.Component[] {ally1, ally2, ally3, ally4, ally5}, org.jdesktop.layout.GroupLayout.HORIZONTAL);\n\n    alliesLayout.setVerticalGroup(\n        alliesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(alliesLayout.createSequentialGroup()\n            .add(alliesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE, false)\n                .add(ally1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 314, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n                .add(ally2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 109, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n                .add(ally5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 109, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n                .add(ally3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 109, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n                .add(ally4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 109, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n\n    alliesLayout.linkSize(new java.awt.Component[] {ally1, ally2, ally3, ally4, ally5}, org.jdesktop.layout.GroupLayout.VERTICAL);\n\n    hand.setName(\"hand\"); // NOI18N\n\n    org.jdesktop.layout.GroupLayout handLayout = new org.jdesktop.layout.GroupLayout(hand);\n    hand.setLayout(handLayout);\n    handLayout.setHorizontalGroup(\n        handLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(0, 1494, Short.MAX_VALUE)\n    );\n    handLayout.setVerticalGroup(\n        handLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(0, 296, Short.MAX_VALUE)\n    );\n\n    org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);\n    mainPanel.setLayout(mainPanelLayout);\n    mainPanelLayout.setHorizontalGroup(\n        mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()\n            .addContainerGap(359, Short.MAX_VALUE)\n            .add(allies, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addContainerGap())\n        .add(mainPanelLayout.createSequentialGroup()\n            .add(168, 168, 168)\n            .add(hand, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(91, Short.MAX_VALUE))\n        .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()\n            .addContainerGap(367, Short.MAX_VALUE)\n            .add(enemies, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n            .add(242, 242, 242))\n    );\n    mainPanelLayout.setVerticalGroup(\n        mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()\n            .addContainerGap(471, Short.MAX_VALUE)\n            .add(enemies, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)\n            .add(allies, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n            .add(12, 12, 12)\n            .add(hand, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n            .add(62, 62, 62))\n    );\n\n    setComponent(mainPanel);\n}", "path": "KadrigamGUI\\src\\kadrigamgui\\KadrigamGUIView.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jPanel1 = new javax.swing.JPanel();\n    jScrollPane1 = new javax.swing.JScrollPane();\n    jTree1 = new javax.swing.JTree();\n    jScrollPane2 = new javax.swing.JScrollPane();\n    jEditorPane1 = new javax.swing.JEditorPane();\n    dialog = new javax.swing.JDialog();\n    winnerName = new javax.swing.JLabel();\n    jLabel2 = new javax.swing.JLabel();\n    exit = new javax.swing.JButton();\n    jPanel2 = new javax.swing.JPanel();\n    handPanel = new javax.swing.JPanel();\n    card1 = new MiniPanel();\n    card2 = new MiniPanel();\n    card3 = new MiniPanel();\n    card4 = new MiniPanel();\n    card5 = new MiniPanel();\n    card6 = new MiniPanel();\n    card7 = new MiniPanel();\n    moreHand = new javax.swing.JButton();\n    allAllyPanel = new javax.swing.JPanel();\n    oppAllyPanel = new javax.swing.JPanel();\n    oppAlly1 = new MiniPanel();\n    oppAlly2 = new MiniPanel();\n    oppAlly3 = new MiniPanel();\n    oppAlly4 = new MiniPanel();\n    oppAlly5 = new MiniPanel();\n    allyPanel = new javax.swing.JPanel();\n    ally1 = new MiniPanel();\n    ally2 = new MiniPanel();\n    ally3 = new MiniPanel();\n    ally5 = new MiniPanel();\n    ally4 = new MiniPanel();\n    pilePanel = new javax.swing.JPanel();\n    gravePanel = new javax.swing.JPanel();\n    grave = new MiniPanel();\n    deck = new CardBack();\n    oppPilePanel = new javax.swing.JPanel();\n    oppGravePanel = new javax.swing.JPanel();\n    oppGrave = new MiniPanel();\n    oppDeck = new CardBack();\n    oppHandPanel = new javax.swing.JPanel();\n    oppHandLabel = new javax.swing.JLabel();\n    oppHand = new CardBack();\n    spellPanel = new javax.swing.JPanel();\n    oppSpellStack = new MiniPanel();\n    spellStack = new MiniPanel();\n    phasePanel = new javax.swing.JPanel();\n    phaseLabel = new javax.swing.JLabel();\n    phaseButton = new javax.swing.JButton();\n    damagePanel = new javax.swing.JPanel();\n    damageLabel = new javax.swing.JLabel();\n    damageButton = new javax.swing.JButton();\n    damageSlider = new javax.swing.JSlider();\n    damageLeftPanel = new javax.swing.JPanel();\n    damageLeftLabel = new javax.swing.JLabel();\n    leftLabel = new javax.swing.JLabel();\n    pHealth = new javax.swing.JPanel();\n    neutLife = new javax.swing.JLabel();\n    life = new javax.swing.JLabel();\n    redLife = new javax.swing.JLabel();\n    blueLife = new javax.swing.JLabel();\n    greenLife = new javax.swing.JLabel();\n    blackLife = new javax.swing.JLabel();\n    whiteLife = new javax.swing.JLabel();\n    pNameLabel = new javax.swing.JLabel();\n    oppHealth = new javax.swing.JPanel();\n    neutLife1 = new javax.swing.JLabel();\n    life1 = new javax.swing.JLabel();\n    redLife1 = new javax.swing.JLabel();\n    blueLife1 = new javax.swing.JLabel();\n    greenLife1 = new javax.swing.JLabel();\n    blackLife1 = new javax.swing.JLabel();\n    whiteLife1 = new javax.swing.JLabel();\n    oppNameLabel = new javax.swing.JLabel();\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 100, Short.MAX_VALUE)\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 100, Short.MAX_VALUE)\n    );\n\n    jScrollPane1.setViewportView(jTree1);\n\n    jScrollPane2.setViewportView(jEditorPane1);\n\n    winnerName.setText(\"PLAYER\");\n\n    jLabel2.setText(\"WINS!\");\n\n    exit.setText(\"Exit\");\n    exit.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            exitActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout dialogLayout = new javax.swing.GroupLayout(dialog.getContentPane());\n    dialog.getContentPane().setLayout(dialogLayout);\n    dialogLayout.setHorizontalGroup(\n        dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(dialogLayout.createSequentialGroup()\n            .addGap(169, 169, 169)\n            .addGroup(dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)\n                .addComponent(jLabel2)\n                .addComponent(winnerName)\n                .addComponent(exit))\n            .addContainerGap(156, Short.MAX_VALUE))\n    );\n    dialogLayout.setVerticalGroup(\n        dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(dialogLayout.createSequentialGroup()\n            .addGap(98, 98, 98)\n            .addComponent(winnerName)\n            .addGap(18, 18, 18)\n            .addComponent(jLabel2)\n            .addGap(29, 29, 29)\n            .addComponent(exit)\n            .addContainerGap(94, Short.MAX_VALUE))\n    );\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n    setLocationByPlatform(true);\n    addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            formMouseClicked(evt);\n        }\n    });\n\n    jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {\n        public void mouseMoved(java.awt.event.MouseEvent evt) {\n            jPanel2MouseMoved(evt);\n        }\n    });\n\n    handPanel.setBackground(new java.awt.Color(204, 204, 204));\n    handPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, \"Hand\", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font(\"Charlemagne Std\", 0, 14))); // NOI18N\n    handPanel.setMaximumSize(new java.awt.Dimension(1022, 207));\n\n    card1.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            card1MouseClicked(evt);\n        }\n    });\n\n    card2.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            card2MouseClicked(evt);\n        }\n    });\n\n    card3.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            card3MouseClicked(evt);\n        }\n    });\n\n    card4.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            card4MouseClicked(evt);\n        }\n    });\n\n    card5.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            card5MouseClicked(evt);\n        }\n    });\n\n    card6.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            card6MouseClicked(evt);\n        }\n    });\n\n    card7.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            card7MouseClicked(evt);\n        }\n    });\n\n    moreHand.setText(\">>More>>\");\n    moreHand.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            moreHandActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout handPanelLayout = new javax.swing.GroupLayout(handPanel);\n    handPanel.setLayout(handPanelLayout);\n    handPanelLayout.setHorizontalGroup(\n        handPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(handPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(card1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(card2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(card3, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(card4, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(card5, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(card6, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(card7, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, handPanelLayout.createSequentialGroup()\n            .addContainerGap(1107, Short.MAX_VALUE)\n            .addComponent(moreHand, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap())\n    );\n    handPanelLayout.setVerticalGroup(\n        handPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, handPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(handPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(card6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)\n                .addComponent(card5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)\n                .addComponent(card4, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)\n                .addComponent(card3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)\n                .addComponent(card2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)\n                .addComponent(card1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)\n                .addComponent(card7, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(moreHand))\n    );\n\n    allAllyPanel.setBackground(new java.awt.Color(241, 223, 167));\n    allAllyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, \"Creatures\", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font(\"Charlemagne Std\", 0, 14))); // NOI18N\n    allAllyPanel.setMaximumSize(new java.awt.Dimension(860, 403));\n\n    oppAllyPanel.setMaximumSize(new java.awt.Dimension(840, 187));\n    oppAllyPanel.setPreferredSize(new java.awt.Dimension(840, 187));\n\n    oppAlly1.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            oppAlly1MouseClicked(evt);\n        }\n    });\n\n    oppAlly2.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            oppAlly2MouseClicked(evt);\n        }\n    });\n\n    oppAlly3.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            oppAlly3MouseClicked(evt);\n        }\n    });\n\n    oppAlly4.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            oppAlly4MouseClicked(evt);\n        }\n    });\n\n    oppAlly5.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            oppAlly5MouseClicked(evt);\n        }\n    });\n\n    javax.swing.GroupLayout oppAllyPanelLayout = new javax.swing.GroupLayout(oppAllyPanel);\n    oppAllyPanel.setLayout(oppAllyPanelLayout);\n    oppAllyPanelLayout.setHorizontalGroup(\n        oppAllyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(oppAllyPanelLayout.createSequentialGroup()\n            .addComponent(oppAlly1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(oppAlly2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(oppAlly3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(oppAlly4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(oppAlly5, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))\n    );\n    oppAllyPanelLayout.setVerticalGroup(\n        oppAllyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(oppAllyPanelLayout.createSequentialGroup()\n            .addGroup(oppAllyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(oppAlly1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(oppAlly2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(oppAlly3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(oppAlly4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(oppAlly5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n\n    allyPanel.setMaximumSize(new java.awt.Dimension(840, 187));\n    allyPanel.setPreferredSize(new java.awt.Dimension(840, 187));\n\n    ally1.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            ally1MouseClicked(evt);\n        }\n    });\n\n    ally2.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            ally2MouseClicked(evt);\n        }\n    });\n\n    ally3.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            ally3MouseClicked(evt);\n        }\n    });\n\n    ally5.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            ally5MouseClicked(evt);\n        }\n    });\n\n    ally4.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            ally4MouseClicked(evt);\n        }\n    });\n\n    javax.swing.GroupLayout allyPanelLayout = new javax.swing.GroupLayout(allyPanel);\n    allyPanel.setLayout(allyPanelLayout);\n    allyPanelLayout.setHorizontalGroup(\n        allyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(allyPanelLayout.createSequentialGroup()\n            .addComponent(ally1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(ally2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(ally3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(ally4, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(ally5, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))\n    );\n    allyPanelLayout.setVerticalGroup(\n        allyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(allyPanelLayout.createSequentialGroup()\n            .addGroup(allyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(ally1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(ally2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(ally3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(ally4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(ally5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n\n    javax.swing.GroupLayout allAllyPanelLayout = new javax.swing.GroupLayout(allAllyPanel);\n    allAllyPanel.setLayout(allAllyPanelLayout);\n    allAllyPanelLayout.setHorizontalGroup(\n        allAllyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, allAllyPanelLayout.createSequentialGroup()\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addComponent(allyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 905, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addGap(38, 38, 38))\n        .addGroup(allAllyPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(oppAllyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 902, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(41, Short.MAX_VALUE))\n    );\n    allAllyPanelLayout.setVerticalGroup(\n        allAllyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(allAllyPanelLayout.createSequentialGroup()\n            .addGap(24, 24, 24)\n            .addComponent(oppAllyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(allyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap())\n    );\n\n    pilePanel.setBackground(new java.awt.Color(204, 204, 204));\n    pilePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, \"Your Deck\", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font(\"Charlemagne Std\", 0, 12))); // NOI18N\n\n    gravePanel.setBackground(new java.awt.Color(204, 204, 204));\n    gravePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, \"Your Graveyard\", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font(\"Charlemagne Std\", 0, 12))); // NOI18N\n\n    javax.swing.GroupLayout gravePanelLayout = new javax.swing.GroupLayout(gravePanel);\n    gravePanel.setLayout(gravePanelLayout);\n    gravePanelLayout.setHorizontalGroup(\n        gravePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(gravePanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(grave, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n    gravePanelLayout.setVerticalGroup(\n        gravePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(gravePanelLayout.createSequentialGroup()\n            .addComponent(grave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n\n    javax.swing.GroupLayout deckLayout = new javax.swing.GroupLayout(deck);\n    deck.setLayout(deckLayout);\n    deckLayout.setHorizontalGroup(\n        deckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 128, Short.MAX_VALUE)\n    );\n    deckLayout.setVerticalGroup(\n        deckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 166, Short.MAX_VALUE)\n    );\n\n    javax.swing.GroupLayout pilePanelLayout = new javax.swing.GroupLayout(pilePanel);\n    pilePanel.setLayout(pilePanelLayout);\n    pilePanelLayout.setHorizontalGroup(\n        pilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(pilePanelLayout.createSequentialGroup()\n            .addGroup(pilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(pilePanelLayout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(deck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addComponent(gravePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n    pilePanelLayout.setVerticalGroup(\n        pilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(pilePanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(deck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addGap(18, 18, 18)\n            .addComponent(gravePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(35, Short.MAX_VALUE))\n    );\n\n    oppPilePanel.setBackground(new java.awt.Color(51, 51, 51));\n\n    oppGravePanel.setBackground(new java.awt.Color(51, 51, 51));\n\n    javax.swing.GroupLayout oppDeckLayout = new javax.swing.GroupLayout(oppDeck);\n    oppDeck.setLayout(oppDeckLayout);\n    oppDeckLayout.setHorizontalGroup(\n        oppDeckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 128, Short.MAX_VALUE)\n    );\n    oppDeckLayout.setVerticalGroup(\n        oppDeckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 166, Short.MAX_VALUE)\n    );\n\n    javax.swing.GroupLayout oppGravePanelLayout = new javax.swing.GroupLayout(oppGravePanel);\n    oppGravePanel.setLayout(oppGravePanelLayout);\n    oppGravePanelLayout.setHorizontalGroup(\n        oppGravePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(oppGravePanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(oppGravePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(oppGrave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(oppDeck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap())\n    );\n    oppGravePanelLayout.setVerticalGroup(\n        oppGravePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(oppGravePanelLayout.createSequentialGroup()\n            .addComponent(oppGrave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(oppDeck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n\n    javax.swing.GroupLayout oppPilePanelLayout = new javax.swing.GroupLayout(oppPilePanel);\n    oppPilePanel.setLayout(oppPilePanelLayout);\n    oppPilePanelLayout.setHorizontalGroup(\n        oppPilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(oppPilePanelLayout.createSequentialGroup()\n            .addComponent(oppGravePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n    oppPilePanelLayout.setVerticalGroup(\n        oppPilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(oppPilePanelLayout.createSequentialGroup()\n            .addContainerGap(20, Short.MAX_VALUE)\n            .addComponent(oppGravePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n    );\n\n    oppHandPanel.setBackground(new java.awt.Color(51, 51, 51));\n\n    oppHandLabel.setText(\"x\");\n\n    javax.swing.GroupLayout oppHandLayout = new javax.swing.GroupLayout(oppHand);\n    oppHand.setLayout(oppHandLayout);\n    oppHandLayout.setHorizontalGroup(\n        oppHandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 128, Short.MAX_VALUE)\n    );\n    oppHandLayout.setVerticalGroup(\n        oppHandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 166, Short.MAX_VALUE)\n    );\n\n    javax.swing.GroupLayout oppHandPanelLayout = new javax.swing.GroupLayout(oppHandPanel);\n    oppHandPanel.setLayout(oppHandPanelLayout);\n    oppHandPanelLayout.setHorizontalGroup(\n        oppHandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(oppHandPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(oppHand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(oppHandLabel)\n            .addContainerGap())\n    );\n    oppHandPanelLayout.setVerticalGroup(\n        oppHandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(oppHandPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(oppHandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)\n                .addComponent(oppHandLabel)\n                .addComponent(oppHand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap(20, Short.MAX_VALUE))\n    );\n\n    spellPanel.setBackground(new java.awt.Color(204, 204, 204));\n    spellPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, \"Spell Stacks\", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font(\"Charlemagne Std\", 0, 12))); // NOI18N\n\n    javax.swing.GroupLayout spellPanelLayout = new javax.swing.GroupLayout(spellPanel);\n    spellPanel.setLayout(spellPanelLayout);\n    spellPanelLayout.setHorizontalGroup(\n        spellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(spellPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(spellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(oppSpellStack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(spellStack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap(31, Short.MAX_VALUE))\n    );\n    spellPanelLayout.setVerticalGroup(\n        spellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(spellPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(oppSpellStack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(spellStack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n\n    phasePanel.setBackground(allAllyPanel.getBackground());\n    phasePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, \"Phase Controller\", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font(\"Charlemagne Std\", 0, 12))); // NOI18N\n\n    phaseLabel.setText(\"jLabel1\");\n\n    phaseButton.setText(\"jButton1\");\n    phaseButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            phaseButtonActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout phasePanelLayout = new javax.swing.GroupLayout(phasePanel);\n    phasePanel.setLayout(phasePanelLayout);\n    phasePanelLayout.setHorizontalGroup(\n        phasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(phasePanelLayout.createSequentialGroup()\n            .addGroup(phasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(phasePanelLayout.createSequentialGroup()\n                    .addGap(73, 73, 73)\n                    .addComponent(phaseLabel))\n                .addGroup(phasePanelLayout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(phaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))\n            .addContainerGap(26, Short.MAX_VALUE))\n    );\n    phasePanelLayout.setVerticalGroup(\n        phasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(phasePanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(phaseLabel)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(phaseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    damagePanel.setBackground(new java.awt.Color(204, 204, 204));\n    damagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, \"Damage Deal\", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font(\"Charlemagne Std\", 0, 12))); // NOI18N\n\n    damageLabel.setText(\"\" + damageSlider.getValue());\n\n    damageButton.setText(\"Deal Damage\");\n    damageButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            damageButtonActionPerformed(evt);\n        }\n    });\n\n    damageSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n        public void stateChanged(javax.swing.event.ChangeEvent evt) {\n            damageSliderStateChanged(evt);\n        }\n    });\n    damageSlider.addPropertyChangeListener(new java.beans.PropertyChangeListener() {\n        public void propertyChange(java.beans.PropertyChangeEvent evt) {\n            damageSliderPropertyChange(evt);\n        }\n    });\n\n    damageLeftPanel.setBackground(new java.awt.Color(255, 255, 153));\n\n    damageLeftLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    damageLeftLabel.setText(\"Damage to be Dealt\");\n\n    leftLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    leftLabel.setText(\"Damage to be Dealt:\");\n\n    javax.swing.GroupLayout damageLeftPanelLayout = new javax.swing.GroupLayout(damageLeftPanel);\n    damageLeftPanel.setLayout(damageLeftPanelLayout);\n    damageLeftPanelLayout.setHorizontalGroup(\n        damageLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(damageLeftPanelLayout.createSequentialGroup()\n            .addGroup(damageLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(damageLeftPanelLayout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(leftLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))\n                .addGroup(damageLeftPanelLayout.createSequentialGroup()\n                    .addGap(52, 52, 52)\n                    .addComponent(damageLeftLabel)))\n            .addContainerGap())\n    );\n    damageLeftPanelLayout.setVerticalGroup(\n        damageLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(damageLeftPanelLayout.createSequentialGroup()\n            .addGap(20, 20, 20)\n            .addComponent(leftLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(damageLeftLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap())\n    );\n\n    javax.swing.GroupLayout damagePanelLayout = new javax.swing.GroupLayout(damagePanel);\n    damagePanel.setLayout(damagePanelLayout);\n    damagePanelLayout.setHorizontalGroup(\n        damagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(damagePanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(damagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(damagePanelLayout.createSequentialGroup()\n                    .addGap(18, 18, 18)\n                    .addComponent(damageSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGroup(damagePanelLayout.createSequentialGroup()\n                    .addGap(7, 7, 7)\n                    .addComponent(damageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGap(18, 18, 18)\n                    .addComponent(damageLabel))\n                .addComponent(damageLeftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap(31, Short.MAX_VALUE))\n    );\n    damagePanelLayout.setVerticalGroup(\n        damagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(damagePanelLayout.createSequentialGroup()\n            .addComponent(damageLeftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(damageSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(damagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(damageButton)\n                .addComponent(damageLabel))\n            .addGap(34, 34, 34))\n    );\n\n    pHealth.setBackground(allAllyPanel.getBackground());\n    pHealth.setBorder(javax.swing.BorderFactory.createTitledBorder(null, \"Player Life\", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font(\"Charlemagne Std\", 0, 12))); // NOI18N\n\n    neutLife.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    neutLife.setText(\"\" + p.getLife().get(Color.NEUTRAL));\n\n    life.setText(\"Health\");\n    life.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            lifeMouseClicked(evt);\n        }\n    });\n    life.addPropertyChangeListener(new java.beans.PropertyChangeListener() {\n        public void propertyChange(java.beans.PropertyChangeEvent evt) {\n            lifePropertyChange(evt);\n        }\n    });\n\n    redLife.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    redLife.setText(\"\" + p.getLife().get(Color.RED));\n\n    blueLife.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    blueLife.setText(\"\" + p.getLife().get(Color.BLUE));\n\n    greenLife.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    greenLife.setText(\"\" + p.getLife().get(Color.GREEN));\n\n    blackLife.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    blackLife.setText(\"\" + p.getLife().get(Color.BLACK));\n\n    whiteLife.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    whiteLife.setText(\"\" + p.getLife().get(Color.WHITE));\n\n    pNameLabel.setFont(new java.awt.Font(\"Charlemagne Std\", 1, 14));\n    pNameLabel.setText(p.getName());\n\n    javax.swing.GroupLayout pHealthLayout = new javax.swing.GroupLayout(pHealth);\n    pHealth.setLayout(pHealthLayout);\n    pHealthLayout.setHorizontalGroup(\n        pHealthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(pHealthLayout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(life, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(neutLife)\n            .addGap(6, 6, 6)\n            .addComponent(redLife, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(greenLife, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addGap(3, 3, 3)\n            .addComponent(blueLife, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(whiteLife, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addGap(3, 3, 3)\n            .addComponent(blackLife, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap())\n        .addGroup(pHealthLayout.createSequentialGroup()\n            .addGap(8, 8, 8)\n            .addComponent(pNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)\n            .addGap(406, 406, 406))\n    );\n    pHealthLayout.setVerticalGroup(\n        pHealthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(pHealthLayout.createSequentialGroup()\n            .addComponent(pNameLabel)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(pHealthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pHealthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(neutLife)\n                    .addComponent(life, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addComponent(redLife, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(greenLife, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(blueLife, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(whiteLife, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(blackLife, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap())\n    );\n\n    pHealthLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {blackLife, blueLife, greenLife, life, neutLife, redLife, whiteLife});\n\n    neutLife.setForeground(java.awt.Color.GRAY);\n    redLife.setForeground(java.awt.Color.RED);\n    blueLife.setForeground(java.awt.Color.BLUE);\n    greenLife.setForeground(java.awt.Color.GREEN);\n    blackLife.setForeground(java.awt.Color.BLACK);\n    whiteLife.setForeground(java.awt.Color.WHITE);\n\n    oppHealth.setBackground(new java.awt.Color(51, 51, 51));\n    oppHealth.setBorder(javax.swing.BorderFactory.createTitledBorder(null, \"Opponent Life\", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font(\"Charlemagne Std\", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N\n\n    neutLife1.setForeground(new java.awt.Color(255, 255, 255));\n    neutLife1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    neutLife1.setText(\"\" + opp.getLife().get(Color.NEUTRAL));\n\n    life1.setForeground(new java.awt.Color(255, 255, 255));\n    life1.setText(\"Health\");\n    life1.addMouseListener(new java.awt.event.MouseAdapter() {\n        public void mouseClicked(java.awt.event.MouseEvent evt) {\n            life1MouseClicked(evt);\n        }\n    });\n    life1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {\n        public void propertyChange(java.beans.PropertyChangeEvent evt) {\n            life1PropertyChange(evt);\n        }\n    });\n\n    redLife1.setForeground(new java.awt.Color(255, 255, 255));\n    redLife1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    redLife1.setText(\"\" + opp.getLife().get(Color.RED));\n\n    blueLife1.setForeground(new java.awt.Color(255, 255, 255));\n    blueLife1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    blueLife1.setText(\"\" + opp.getLife().get(Color.BLUE));\n\n    greenLife1.setForeground(new java.awt.Color(255, 255, 255));\n    greenLife1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    greenLife1.setText(\"\" + opp.getLife().get(Color.GREEN));\n\n    blackLife1.setForeground(new java.awt.Color(255, 255, 255));\n    blackLife1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    blackLife1.setText(\"\" + opp.getLife().get(Color.BLACK));\n\n    whiteLife1.setForeground(new java.awt.Color(255, 255, 255));\n    whiteLife1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    whiteLife1.setText(\"\" + opp.getLife().get(Color.WHITE));\n\n    oppNameLabel.setFont(new java.awt.Font(\"Charlemagne Std\", 1, 14));\n    oppNameLabel.setForeground(new java.awt.Color(255, 255, 255));\n    oppNameLabel.setText(opp.getName());\n\n    javax.swing.GroupLayout oppHealthLayout = new javax.swing.GroupLayout(oppHealth);\n    oppHealth.setLayout(oppHealthLayout);\n    oppHealthLayout.setHorizontalGroup(\n        oppHealthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(oppHealthLayout.createSequentialGroup()\n            .addGroup(oppHealthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(oppHealthLayout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(life1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(neutLife1)\n                    .addGap(6, 6, 6)\n                    .addComponent(redLife1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(greenLife1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGap(3, 3, 3)\n                    .addComponent(blueLife1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(whiteLife1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGap(3, 3, 3)\n                    .addComponent(blackLife1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGroup(oppHealthLayout.createSequentialGroup()\n                    .addGap(9, 9, 9)\n                    .addComponent(oppNameLabel)))\n            .addContainerGap(32, Short.MAX_VALUE))\n    );\n    oppHealthLayout.setVerticalGroup(\n        oppHealthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(oppHealthLayout.createSequentialGroup()\n            .addComponent(oppNameLabel)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(oppHealthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, oppHealthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(neutLife1)\n                    .addComponent(life1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addComponent(redLife1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(greenLife1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(blueLife1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(whiteLife1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(blackLife1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap())\n    );\n\n    oppHealthLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {blackLife1, blueLife1, greenLife1, life1, neutLife1, redLife1, whiteLife1});\n\n    neutLife1.setForeground(java.awt.Color.GRAY);\n    redLife1.setForeground(java.awt.Color.RED);\n    blueLife1.setForeground(java.awt.Color.BLUE);\n    greenLife1.setForeground(java.awt.Color.GREEN);\n    blackLife1.setForeground(java.awt.Color.BLACK);\n    whiteLife1.setForeground(java.awt.Color.WHITE);\n\n    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n    jPanel2.setLayout(jPanel2Layout);\n    jPanel2Layout.setHorizontalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel2Layout.createSequentialGroup()\n            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(jPanel2Layout.createSequentialGroup()\n                    .addContainerGap(43, Short.MAX_VALUE)\n                    .addComponent(oppPilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGap(1, 1, 1))\n                .addGroup(jPanel2Layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(pilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))\n            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(jPanel2Layout.createSequentialGroup()\n                    .addComponent(oppHandPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                        .addComponent(pHealth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addComponent(oppHealth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(damagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(phasePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGroup(jPanel2Layout.createSequentialGroup()\n                    .addGap(16, 16, 16)\n                    .addComponent(allAllyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGap(18, 18, 18)\n                    .addComponent(spellPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGroup(jPanel2Layout.createSequentialGroup()\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(handPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))\n            .addContainerGap())\n    );\n    jPanel2Layout.setVerticalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel2Layout.createSequentialGroup()\n            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(jPanel2Layout.createSequentialGroup()\n                    .addGap(20, 20, 20)\n                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addGroup(jPanel2Layout.createSequentialGroup()\n                            .addComponent(oppPilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)\n                            .addComponent(pilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addGroup(jPanel2Layout.createSequentialGroup()\n                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                                    .addGroup(jPanel2Layout.createSequentialGroup()\n                                        .addComponent(oppHealth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                        .addComponent(pHealth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                    .addComponent(oppHandPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                .addGroup(jPanel2Layout.createSequentialGroup()\n                                    .addGap(62, 62, 62)\n                                    .addComponent(phasePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))\n                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                .addGroup(jPanel2Layout.createSequentialGroup()\n                                    .addGap(18, 18, 18)\n                                    .addComponent(allAllyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                .addGroup(jPanel2Layout.createSequentialGroup()\n                                    .addGap(24, 24, 24)\n                                    .addComponent(spellPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(handPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))\n                .addGroup(jPanel2Layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(damagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))\n            .addContainerGap())\n    );\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(49, Short.MAX_VALUE))\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    pack();\n}", "path": "src\\GameBoard.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "// serialize the user\n", "func_signal": "public static boolean serialize(User u, String s)", "code": "{\n\n    String filename = s + \".ser\";\n\n    User user = u;\n    FileOutputStream fos = null;\n    ObjectOutputStream out = null;\n\n    try {\n        fos = new FileOutputStream(filename);\n        out = new ObjectOutputStream(fos);\n        out.writeObject(user);\n        out.close();\n    } catch (IOException writeEx) {\n        writeEx.printStackTrace();\n        return false;\n    }\n    System.out.println(\"just serialized \" + filename);\n    return true;\n}", "path": "src\\Login.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "//GEN-LAST:event_moreHandActionPerformed\n", "func_signal": "private void phaseButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_phaseButtonActionPerformed\n        // TODO add your handling code here:\n        Type t = p.getPhase();\n        switch (t) {\n            case DRAW:\n                Move draw = new DrawMove(p);\n                if (draw.isLegal(r)) {\n                    draw.execute();\n                } else if (isOver()) {\n                    winner();\n                }\n\n                p.setPhase(Type.SACRIFICE);\n                break;\n            case SACRIFICE:\n                p.setPhase(Type.PLAY1);\n                break;\n            case PLAY1:\n                p.setPhase(Type.ATTACK);\n                break;\n            case ATTACK:\n                p.setPhase(Type.WAIT);\n                opp.setPhase(Type.DAMAGE);\n                break;\n            case DAMAGE:\n                dealDirect();\n                p.setPhase(Type.WAIT);\n                opp.setPhase(Type.PLAY2);\n                break;\n            case PLAY2:\n                p.setPhase(Type.DISCARD);\n                break;\n            case DISCARD:\n                if (p.getHand().size() >= 8) {\n                    break;\n                }\n\n                p.setPhase(Type.WAIT);\n                opp.setPhase(Type.DRAW);\n                break;\n            case WAIT:\n                break;\n            default:\n                p.setPhase(Type.SACRIFICE);\n                break;\n        }\n\n        updateButton();\n\n        update();\n\n    }", "path": "src\\GameBoard.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "//GEN-LAST:event_playerTwoTextPropertyChange\n", "func_signal": "private void playerOneTextKeyTyped(java.awt.event.KeyEvent evt)", "code": "{//GEN-FIRST:event_playerOneTextKeyTyped\n        if (playerOneText.getText().length() > 0\n                && playerTwoText.getText().length() > 0) {\n            startButton.setEnabled(true);\n        } else {\n            startButton.setEnabled(false);\n        }\n    }", "path": "src\\LoginUI.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "//GEN-LAST:event_formMouseClicked\n", "func_signal": "private void damageButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_damageButtonActionPerformed\n        damagePanel.setVisible(false);\n        \n\n        if (selected == null)\n        {\n            damageSlider.setValue(0);\n            return;\n        }\n\n        int dmg = damageSlider.getValue();\n        Move m = new DamageMove(p, selected, dmg);\n\n        if (m.isLegal(r)) {\n            m.execute();\n            opp.subDamage(dmg);\n        }\n\n        damageSlider.setValue(0);\n        update();\n\n    }", "path": "src\\GameBoard.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jScrollPane1 = new javax.swing.JScrollPane();\n    user2Deck = new javax.swing.JList();\n    jScrollPane2 = new javax.swing.JScrollPane();\n    user1Deck = new javax.swing.JList();\n    start = new javax.swing.JButton();\n    jLabel1 = new javax.swing.JLabel();\n    jLabel2 = new javax.swing.JLabel();\n    jLabel3 = new javax.swing.JLabel();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n    jScrollPane1.setViewportView(user2Deck);\n\n    jScrollPane2.setViewportView(user1Deck);\n\n    start.setText(\"Start Game!\");\n    start.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            startActionPerformed(evt);\n        }\n    });\n\n    jLabel1.setText(\"jLabel1\");\n\n    jLabel2.setText(\"jLabel2\");\n\n    jLabel3.setText(\"Please Select Decks to Use\");\n\n    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(layout.createSequentialGroup()\n            .add(27, 27, 27)\n            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(start)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)\n            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)\n            .addContainerGap())\n        .add(layout.createSequentialGroup()\n            .add(131, 131, 131)\n            .add(jLabel3)\n            .addContainerGap(129, Short.MAX_VALUE))\n        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()\n            .add(65, 65, 65)\n            .add(jLabel2)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 215, Short.MAX_VALUE)\n            .add(jLabel1)\n            .add(57, 57, 57))\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(layout.createSequentialGroup()\n            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)\n                .add(layout.createSequentialGroup()\n                    .addContainerGap()\n                    .add(jLabel3)\n                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 46, Short.MAX_VALUE))\n                .add(layout.createSequentialGroup()\n                    .addContainerGap()\n                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)\n                        .add(jLabel1)\n                        .add(jLabel2))\n                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))\n            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)\n                .add(layout.createSequentialGroup()\n                    .add(79, 79, 79)\n                    .add(start, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))\n                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n\n    pack();\n}", "path": "src\\GameStartUI.java", "repo_name": "strican/kadrigam", "stars": 4, "license": "None", "language": "java", "size": 1536}
{"docstring": "/**\n * Get the long value associated with a key. If the number value is too\n * long for a long, it will be clipped.\n *\n * @param key   A key string.\n * @return      The long value.\n * @throws   JSONException if the key is not found or if the value cannot\n *  be converted to a long.\n */\n", "func_signal": "public long getLong(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    return o instanceof Number ?\n            ((Number)o).longValue() : (long)getDouble(key);\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/**\n * Put a key/value pair in the JSONObject. If the value is null,\n * then the key will be removed from the JSONObject if it is present.\n * @param key   A key string.\n * @param value An object which is the value. It should be of one of these\n *  types: Boolean, Double, Integer, JSONArray, JSONObject, Long, String,\n *  or the JSONObject.NULL object.\n * @return this.\n * @throws JSONException If the value is non-finite number\n *  or if the key is null.\n */\n", "func_signal": "public JSONObject put(String key, Object value) throws JSONException", "code": "{\n    if (key == null) {\n        throw new JSONException(\"Null key.\");\n    }\n    if (value != null) {\n        testValidity(value);\n        this.map.put(key, value);\n    } else {\n        remove(key);\n    }\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/**\n * Produce a string from a double. The string \"null\" will be returned if\n * the number is not finite.\n * @param  d A double.\n * @return A String.\n */\n", "func_signal": "static public String doubleToString(double d)", "code": "{\n    if (Double.isInfinite(d) || Double.isNaN(d)) {\n        return \"null\";\n    }\n\n// Shave off trailing zeros and decimal point, if possible.\n\n    String s = Double.toString(d);\n    if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {\n        while (s.endsWith(\"0\")) {\n            s = s.substring(0, s.length() - 1);\n        }\n        if (s.endsWith(\".\")) {\n            s = s.substring(0, s.length() - 1);\n        }\n    }\n    return s;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/**\n * Construct a JSONObject from a Map.\n * \n * Note: Use this constructor when the map contains <key,bean>.\n * \n * @param map - A map with Key-Bean data.\n * @param includeSuperClass - Tell whether to include the super class properties.\n */\n", "func_signal": "public JSONObject(Map map, boolean includeSuperClass)", "code": "{\n   \tthis.map = new HashMap();\n   \tif (map != null){\n        for (Iterator i = map.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry e = (Map.Entry)i.next();\n            this.map.put(e.getKey(), new JSONObject(e.getValue(), includeSuperClass));\n        }\n   \t}\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/*\n * Transforms 'foo': ... into foo: ... whenever possible, saving 2 bytes.\n */\n", "func_signal": "private static void optimizeObjLitMemberDecl(ArrayList tokens)", "code": "{\n\n    String tv;\n    int i, length;\n    JavaScriptToken token;\n\n    for (i = 0, length = tokens.size(); i < length; i++) {\n        if (((JavaScriptToken) tokens.get(i)).getType() == Token.OBJECTLIT &&\n                i > 0 && ((JavaScriptToken) tokens.get(i - 1)).getType() == Token.STRING) {\n            token = (JavaScriptToken) tokens.get(i - 1);\n            tv = token.getValue();\n            tv = tv.substring(1, tv.length() - 1);\n            if (isValidIdentifier(tv)) {\n                tokens.set(i - 1, new JavaScriptToken(Token.NAME, tv));\n            }\n        }\n    }\n}", "path": "src\\com\\yahoo\\platform\\yui\\compressor\\JavaScriptCompressor.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/*\n * If either 'eval' or 'with' is used in a local scope, we must make\n * sure that all containing local scopes don't get munged. Otherwise,\n * the obfuscation would potentially introduce bugs.\n */\n", "func_signal": "private void protectScopeFromObfuscation(ScriptOrFnScope scope)", "code": "{\n    assert scope != null;\n\n    if (scope == globalScope) {\n        // The global scope does not get obfuscated,\n        // so we don't need to worry about it...\n        return;\n    }\n\n    // Find the highest local scope containing the specified scope.\n    while (scope.getParentScope() != globalScope) {\n        scope = scope.getParentScope();\n    }\n\n    assert scope.getParentScope() == globalScope;\n    scope.preventMunging();\n}", "path": "src\\com\\yahoo\\platform\\yui\\compressor\\JavaScriptCompressor.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/**\n * Put a key/value pair in the JSONObject, where the value will be a\n * JSONArray which is produced from a Collection.\n * @param key   A key string.\n * @param value A Collection value.\n * @return      this.\n * @throws JSONException\n */\n", "func_signal": "public JSONObject put(String key, Collection value) throws JSONException", "code": "{\n    put(key, new JSONArray(value));\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/**\n * Produce a string in double quotes with backslash sequences in all the\n * right places. A backslash will be inserted within </, allowing JSON\n * text to be delivered in HTML. In JSON text, a string cannot contain a\n * control character or an unescaped quote or backslash.\n * @param string A String\n * @return  A String correctly formatted for insertion in a JSON text.\n */\n", "func_signal": "public static String quote(String string)", "code": "{\n    if (string == null || string.length() == 0) {\n        return \"\\\"\\\"\";\n    }\n\n    char         b;\n    char         c = 0;\n    int          i;\n    int          len = string.length();\n    StringBuffer sb = new StringBuffer(len + 4);\n    String       t;\n\n    sb.append('\"');\n    for (i = 0; i < len; i += 1) {\n        b = c;\n        c = string.charAt(i);\n        switch (c) {\n        case '\\\\':\n        case '\"':\n            sb.append('\\\\');\n            sb.append(c);\n            break;\n        case '/':\n            if (b == '<') {\n                sb.append('\\\\');\n            }\n            sb.append(c);\n            break;\n        case '\\b':\n            sb.append(\"\\\\b\");\n            break;\n        case '\\t':\n            sb.append(\"\\\\t\");\n            break;\n        case '\\n':\n            sb.append(\"\\\\n\");\n            break;\n        case '\\f':\n            sb.append(\"\\\\f\");\n            break;\n        case '\\r':\n            sb.append(\"\\\\r\");\n            break;\n        default:\n            if (c < ' ' || (c >= '\\u0080' && c < '\\u00a0') ||\n                           (c >= '\\u2000' && c < '\\u2100')) {\n                t = \"000\" + Integer.toHexString(c);\n                sb.append(\"\\\\u\" + t.substring(t.length() - 4));\n            } else {\n                sb.append(c);\n            }\n        }\n    }\n    sb.append('\"');\n    return sb.toString();\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/**\n * Get the int value associated with a key. If the number value is too\n * large for an int, it will be clipped.\n *\n * @param key   A key string.\n * @return      The integer value.\n * @throws   JSONException if the key is not found or if the value cannot\n *  be converted to an integer.\n */\n", "func_signal": "public int getInt(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    return o instanceof Number ?\n            ((Number)o).intValue() : (int)getDouble(key);\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/**\n * Put a key/value pair in the JSONObject, but only if the\n * key and the value are both non-null.\n * @param key   A key string.\n * @param value An object which is the value. It should be of one of these\n *  types: Boolean, Double, Integer, JSONArray, JSONObject, Long, String,\n *  or the JSONObject.NULL object.\n * @return this.\n * @throws JSONException If the value is a non-finite number.\n */\n", "func_signal": "public JSONObject putOpt(String key, Object value) throws JSONException", "code": "{\n    if (key != null && value != null) {\n        put(key, value);\n    }\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/*\n * Returns the identifier for the specified symbol defined in\n * the specified scope or in any scope above it. Returns null\n * if this symbol does not have a corresponding identifier.\n */\n", "func_signal": "private JavaScriptIdentifier getIdentifier(String symbol, ScriptOrFnScope scope)", "code": "{\n    JavaScriptIdentifier identifier;\n    while (scope != null) {\n        identifier = scope.getIdentifier(symbol);\n        if (identifier != null) {\n            return identifier;\n        }\n        scope = scope.getParentScope();\n    }\n    return null;\n}", "path": "src\\com\\yahoo\\platform\\yui\\compressor\\JavaScriptCompressor.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/**\n * Get the JSONObject value associated with a key.\n *\n * @param key   A key string.\n * @return      A JSONObject which is the value.\n * @throws   JSONException if the key is not found or\n *  if the value is not a JSONObject.\n */\n", "func_signal": "public JSONObject getJSONObject(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    if (o instanceof JSONObject) {\n        return (JSONObject)o;\n    }\n    throw new JSONException(\"JSONObject[\" + quote(key) +\n            \"] is not a JSONObject.\");\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/**\n * Produce a JSONArray containing the names of the elements of this\n * JSONObject.\n * @return A JSONArray containing the key strings, or null if the JSONObject\n * is empty.\n */\n", "func_signal": "public JSONArray names()", "code": "{\n    JSONArray ja = new JSONArray();\n    Iterator  keys = keys();\n    while (keys.hasNext()) {\n        ja.put(keys.next());\n    }\n    return ja.length() == 0 ? null : ja;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/**\n * Get the value object associated with a key.\n *\n * @param key   A key string.\n * @return      The object associated with the key.\n * @throws   JSONException if the key is not found.\n */\n", "func_signal": "public Object get(String key) throws JSONException", "code": "{\n    Object o = opt(key);\n    if (o == null) {\n        throw new JSONException(\"JSONObject[\" + quote(key) +\n                \"] not found.\");\n    }\n    return o;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/**\n * Construct JSONObject from the given bean. This will also create JSONObject\n * for all internal object (List, Map, Inner Objects) of the provided bean.\n * \n * -- See Documentation of JSONObject(Object bean) also.\n * \n * @param bean An object that has getter methods that should be used\n * to make a JSONObject.\n * @param includeSuperClass - Tell whether to include the super class properties.\n */\n", "func_signal": "public JSONObject(Object bean, boolean includeSuperClass)", "code": "{\n\tthis();\n    populateInternalMap(bean, includeSuperClass);\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/**\n * Get an array of field names from an Object.\n *\n * @return An array of field names, or null if there are no names.\n */\n", "func_signal": "public static String[] getNames(Object object)", "code": "{\n\tif (object == null) {\n\t\treturn null;\n\t}\n\tClass klass = object.getClass();\n\tField[] fields = klass.getFields();\n\tint length = fields.length;\n\tif (length == 0) {\n\t\treturn null;\n\t}\n\tString[] names = new String[length];\n\tfor (int i = 0; i < length; i += 1) {\n\t\tnames[i] = fields[i].getName();\n\t}\n    return names;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/**\n * Put a key/value pair in the JSONObject, where the value will be a\n * JSONObject which is produced from a Map.\n * @param key   A key string.\n * @param value A Map value.\n * @return      this.\n * @throws JSONException\n */\n", "func_signal": "public JSONObject put(String key, Map value) throws JSONException", "code": "{\n    put(key, new JSONObject(value));\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/**\n     * Construct a JSONObject from an Object, using reflection to find the\n     * public members. The resulting JSONObject's keys will be the strings\n     * from the names array, and the values will be the field values associated\n     * with those keys in the object. If a key is not found or not visible,\n     * then it will not be copied into the new JSONObject.\n     * @param object An object that has fields that should be used to make a\n     * JSONObject.\n     * @param names An array of strings, the names of the fields to be obtained\n     * from the object.\n     */\n", "func_signal": "public JSONObject(Object object, String names[])", "code": "{\n        this();\n        Class c = object.getClass();\n        for (int i = 0; i < names.length; i += 1) {\n            String name = names[i];\n        \ttry {\n                putOpt(name, c.getField(name).get(object));\n        \t} catch (Exception e) {\n                /* forget about it */\n            }\n        }    \n    }", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/**\n * Produce a string from a Number.\n * @param  n A Number\n * @return A String.\n * @throws JSONException If n is a non-finite number.\n */\n", "func_signal": "static public String numberToString(Number n)\n        throws JSONException", "code": "{\n    if (n == null) {\n        throw new JSONException(\"Null pointer\");\n    }\n    testValidity(n);\n\n// Shave off trailing zeros and decimal point, if possible.\n\n    String s = n.toString();\n    if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {\n        while (s.endsWith(\"0\")) {\n            s = s.substring(0, s.length() - 1);\n        }\n        if (s.endsWith(\".\")) {\n            s = s.substring(0, s.length() - 1);\n        }\n    }\n    return s;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "/**\n * Put a key/value pair in the JSONObject, but only if the key and the \n * value are both non-null, and only if there is not already a member \n * with that name.\n * @param key\n * @param value\n * @return his.\n * @throws JSONException if the key is a duplicate\n */\n", "func_signal": "public JSONObject putOnce(String key, Object value) throws JSONException", "code": "{\n    if (key != null && value != null) {\n    \tif (opt(key) != null) {\n            throw new JSONException(\"Duplicate key \\\"\" + key + \"\\\"\");\n    \t}\n        put(key, value);\n    }\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "alandipert/golf", "stars": 4, "license": "None", "language": "java", "size": 18845}
{"docstring": "// $ANTLR start \"access_clause\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:231:1: access_clause : ACCESS ( MODE )? ( IS )? access_clause_alt ( relative_clause )? -> ^( ACCESS access_clause_alt ( relative_clause )? ) ;\n", "func_signal": "public final EnvironmentDivision.access_clause_return access_clause() throws RecognitionException", "code": "{\n    EnvironmentDivision.access_clause_return retval = new EnvironmentDivision.access_clause_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token ACCESS179=null;\n    Token MODE180=null;\n    Token IS181=null;\n    EnvironmentDivision.access_clause_alt_return access_clause_alt182 = null;\n\n    EnvironmentDivision.relative_clause_return relative_clause183 = null;\n\n\n    CommonTree ACCESS179_tree=null;\n    CommonTree MODE180_tree=null;\n    CommonTree IS181_tree=null;\n    RewriteRuleTokenStream stream_ACCESS=new RewriteRuleTokenStream(adaptor,\"token ACCESS\");\n    RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,\"token IS\");\n    RewriteRuleTokenStream stream_MODE=new RewriteRuleTokenStream(adaptor,\"token MODE\");\n    RewriteRuleSubtreeStream stream_access_clause_alt=new RewriteRuleSubtreeStream(adaptor,\"rule access_clause_alt\");\n    RewriteRuleSubtreeStream stream_relative_clause=new RewriteRuleSubtreeStream(adaptor,\"rule relative_clause\");\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:232:2: ( ACCESS ( MODE )? ( IS )? access_clause_alt ( relative_clause )? -> ^( ACCESS access_clause_alt ( relative_clause )? ) )\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:232:4: ACCESS ( MODE )? ( IS )? access_clause_alt ( relative_clause )?\n        {\n        ACCESS179=(Token)match(input,ACCESS,FOLLOW_ACCESS_in_access_clause1762);  \n        stream_ACCESS.add(ACCESS179);\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:232:11: ( MODE )?\n        int alt72=2;\n        int LA72_0 = input.LA(1);\n\n        if ( (LA72_0==MODE) ) {\n            alt72=1;\n        }\n        switch (alt72) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:232:11: MODE\n                {\n                MODE180=(Token)match(input,MODE,FOLLOW_MODE_in_access_clause1764);  \n                stream_MODE.add(MODE180);\n\n\n                }\n                break;\n\n        }\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:232:17: ( IS )?\n        int alt73=2;\n        int LA73_0 = input.LA(1);\n\n        if ( (LA73_0==IS) ) {\n            alt73=1;\n        }\n        switch (alt73) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:232:17: IS\n                {\n                IS181=(Token)match(input,IS,FOLLOW_IS_in_access_clause1767);  \n                stream_IS.add(IS181);\n\n\n                }\n                break;\n\n        }\n\n        pushFollow(FOLLOW_access_clause_alt_in_access_clause1770);\n        access_clause_alt182=access_clause_alt();\n\n        state._fsp--;\n\n        stream_access_clause_alt.add(access_clause_alt182.getTree());\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:232:39: ( relative_clause )?\n        int alt74=2;\n        int LA74_0 = input.LA(1);\n\n        if ( (LA74_0==RELATIVE) ) {\n            int LA74_1 = input.LA(2);\n\n            if ( (LA74_1==WORD||LA74_1==IS||LA74_1==KEY) ) {\n                alt74=1;\n            }\n        }\n        switch (alt74) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:232:39: relative_clause\n                {\n                pushFollow(FOLLOW_relative_clause_in_access_clause1772);\n                relative_clause183=relative_clause();\n\n                state._fsp--;\n\n                stream_relative_clause.add(relative_clause183.getTree());\n\n                }\n                break;\n\n        }\n\n\n\n        // AST REWRITE\n        // elements: ACCESS, relative_clause, access_clause_alt\n        // token labels: \n        // rule labels: retval\n        // token list labels: \n        // rule list labels: \n        // wildcard labels: \n        retval.tree = root_0;\n        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n        root_0 = (CommonTree)adaptor.nil();\n        // 232:56: -> ^( ACCESS access_clause_alt ( relative_clause )? )\n        {\n            // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:232:59: ^( ACCESS access_clause_alt ( relative_clause )? )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot(stream_ACCESS.nextNode(), root_1);\n\n            adaptor.addChild(root_1, stream_access_clause_alt.nextTree());\n            // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:232:86: ( relative_clause )?\n            if ( stream_relative_clause.hasNext() ) {\n                adaptor.addChild(root_1, stream_relative_clause.nextTree());\n\n            }\n            stream_relative_clause.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n        }\n\n        retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"in_of\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:275:1: in_of : ( IN | OF ) WORD -> WORD ;\n", "func_signal": "public final EnvironmentDivision.in_of_return in_of() throws RecognitionException", "code": "{\n    EnvironmentDivision.in_of_return retval = new EnvironmentDivision.in_of_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token IN253=null;\n    Token OF254=null;\n    Token WORD255=null;\n\n    CommonTree IN253_tree=null;\n    CommonTree OF254_tree=null;\n    CommonTree WORD255_tree=null;\n    RewriteRuleTokenStream stream_WORD=new RewriteRuleTokenStream(adaptor,\"token WORD\");\n    RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,\"token IN\");\n    RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,\"token OF\");\n\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:275:7: ( ( IN | OF ) WORD -> WORD )\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:275:9: ( IN | OF ) WORD\n        {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:275:9: ( IN | OF )\n        int alt111=2;\n        int LA111_0 = input.LA(1);\n\n        if ( (LA111_0==IN) ) {\n            alt111=1;\n        }\n        else if ( (LA111_0==OF) ) {\n            alt111=2;\n        }\n        else {\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 111, 0, input);\n\n            throw nvae;\n        }\n        switch (alt111) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:275:10: IN\n                {\n                IN253=(Token)match(input,IN,FOLLOW_IN_in_in_of2296);  \n                stream_IN.add(IN253);\n\n\n                }\n                break;\n            case 2 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:275:15: OF\n                {\n                OF254=(Token)match(input,OF,FOLLOW_OF_in_in_of2300);  \n                stream_OF.add(OF254);\n\n\n                }\n                break;\n\n        }\n\n        WORD255=(Token)match(input,WORD,FOLLOW_WORD_in_in_of2303);  \n        stream_WORD.add(WORD255);\n\n\n\n        // AST REWRITE\n        // elements: WORD\n        // token labels: \n        // rule labels: retval\n        // token list labels: \n        // rule list labels: \n        // wildcard labels: \n        retval.tree = root_0;\n        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n        root_0 = (CommonTree)adaptor.nil();\n        // 275:26: -> WORD\n        {\n            adaptor.addChild(root_0, stream_WORD.nextNode());\n\n        }\n\n        retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * For a given token, determines the type as needed by the antlr parser.\n * @param token The original cobol token.\n * @return The type extracted from X.tokens (via Properties).\n */\n", "func_signal": "private int getTypeFor(final CobolToken token)", "code": "{\n    String value = null;\n    String correct = null;\n    CobolType originalType = token.getType();\n    String content = token.getText();\n    switch (originalType) {\n        case WORD:\n            /*  WORD includes keywords (like PERFORM) and data names.\n             *  For keywords, the type is specific; for data names,\n             *  the type is always generic (WORD).\n             */\n\n            //  Antlr names use \"_\" instead of Cobol's \"-\".\n            //  Antlr grammar always use uppercase.\n            if (content.equals(\"-\")) {\n                //  Single hypen.\n                correct = content;\n            }\n            else {\n                correct = content.replace('-', '_').toUpperCase();\n                }\n\n            /**\n             * Synonyms:\n             * THROUGH same type as THRU\n             * AREAS same type as AREA.\n             * Operators:\n             * '+' -> Use 'OP_PLUS' to search in the dictionary.\n             * '-' -> Use 'OP_MINUS' ...\n             */\n            char first = correct.charAt(0);\n            if (!Character.isDigit(first)) {\n                correct = (Character.isLetter(first)) ? getSynonym(correct) : getTextForOperator(correct);\n                }\n\n            value = tokenDictionary.getProperty(correct);\n            if (value == null) {\n                value = tokenDictionary.getProperty(\"WORD\");\n            }\n            break;\n        case SEPARATOR:\n            if (content.equals(\".\")) {\n                value = tokenDictionary.getProperty(\"PERIOD\");\n            }\n            if (content.equals(\",\")) {\n                value = tokenDictionary.getProperty(\"COMMA_SEP\");\n            }\n            if (content.equals(\";\")) {\n                value = tokenDictionary.getProperty(\"SEMICOLON_SEP\");\n            }\n            break;\n        default:\n            String key = originalType.toString();\n            value = tokenDictionary.getProperty(key);\n            break;\n    }\n    assert value != null : \"Type not found for text='\" + content + \"'\";\n    return Integer.parseInt(value);\n}", "path": "src\\jcobol\\parser\\antlr\\TokenFactory.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"padding_clause\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:225:1: padding_clause : PADDING ( CHARACTER )? ( IS )? data_or_literal -> ^( PADDING data_or_literal ) ;\n", "func_signal": "public final EnvironmentDivision.padding_clause_return padding_clause() throws RecognitionException", "code": "{\n    EnvironmentDivision.padding_clause_return retval = new EnvironmentDivision.padding_clause_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token PADDING167=null;\n    Token CHARACTER168=null;\n    Token IS169=null;\n    EnvironmentDivision.data_or_literal_return data_or_literal170 = null;\n\n\n    CommonTree PADDING167_tree=null;\n    CommonTree CHARACTER168_tree=null;\n    CommonTree IS169_tree=null;\n    RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,\"token IS\");\n    RewriteRuleTokenStream stream_CHARACTER=new RewriteRuleTokenStream(adaptor,\"token CHARACTER\");\n    RewriteRuleTokenStream stream_PADDING=new RewriteRuleTokenStream(adaptor,\"token PADDING\");\n    RewriteRuleSubtreeStream stream_data_or_literal=new RewriteRuleSubtreeStream(adaptor,\"rule data_or_literal\");\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:226:2: ( PADDING ( CHARACTER )? ( IS )? data_or_literal -> ^( PADDING data_or_literal ) )\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:226:4: PADDING ( CHARACTER )? ( IS )? data_or_literal\n        {\n        PADDING167=(Token)match(input,PADDING,FOLLOW_PADDING_in_padding_clause1693);  \n        stream_PADDING.add(PADDING167);\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:226:12: ( CHARACTER )?\n        int alt67=2;\n        int LA67_0 = input.LA(1);\n\n        if ( (LA67_0==CHARACTER) ) {\n            alt67=1;\n        }\n        switch (alt67) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:226:12: CHARACTER\n                {\n                CHARACTER168=(Token)match(input,CHARACTER,FOLLOW_CHARACTER_in_padding_clause1695);  \n                stream_CHARACTER.add(CHARACTER168);\n\n\n                }\n                break;\n\n        }\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:226:23: ( IS )?\n        int alt68=2;\n        int LA68_0 = input.LA(1);\n\n        if ( (LA68_0==IS) ) {\n            alt68=1;\n        }\n        switch (alt68) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:226:23: IS\n                {\n                IS169=(Token)match(input,IS,FOLLOW_IS_in_padding_clause1698);  \n                stream_IS.add(IS169);\n\n\n                }\n                break;\n\n        }\n\n        pushFollow(FOLLOW_data_or_literal_in_padding_clause1701);\n        data_or_literal170=data_or_literal();\n\n        state._fsp--;\n\n        stream_data_or_literal.add(data_or_literal170.getTree());\n\n\n        // AST REWRITE\n        // elements: data_or_literal, PADDING\n        // token labels: \n        // rule labels: retval\n        // token list labels: \n        // rule list labels: \n        // wildcard labels: \n        retval.tree = root_0;\n        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n        root_0 = (CommonTree)adaptor.nil();\n        // 226:43: -> ^( PADDING data_or_literal )\n        {\n            // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:226:46: ^( PADDING data_or_literal )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot(stream_PADDING.nextNode(), root_1);\n\n            adaptor.addChild(root_1, stream_data_or_literal.nextTree());\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n        }\n\n        retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"literal\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:184:1: literal : ( WORD | STRING );\n", "func_signal": "public final EnvironmentDivision.literal_return literal() throws RecognitionException", "code": "{\n    EnvironmentDivision.literal_return retval = new EnvironmentDivision.literal_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token set111=null;\n\n    CommonTree set111_tree=null;\n\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:184:9: ( WORD | STRING )\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:\n        {\n        root_0 = (CommonTree)adaptor.nil();\n\n        set111=(Token)input.LT(1);\n        if ( input.LA(1)==STRING||input.LA(1)==WORD ) {\n            input.consume();\n            adaptor.addChild(root_0, (CommonTree)adaptor.create(set111));\n            state.errorRecovery=false;\n        }\n        else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            throw mse;\n        }\n\n\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"source_computer\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:133:1: source_computer : SOURCE_COMPUTER PERIOD ( source_computer_name )? -> ^( SOURCE_COMPUTER ( source_computer_name )? ) ;\n", "func_signal": "public final EnvironmentDivision.source_computer_return source_computer() throws RecognitionException", "code": "{\n    EnvironmentDivision.source_computer_return retval = new EnvironmentDivision.source_computer_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token SOURCE_COMPUTER15=null;\n    Token PERIOD16=null;\n    EnvironmentDivision.source_computer_name_return source_computer_name17 = null;\n\n\n    CommonTree SOURCE_COMPUTER15_tree=null;\n    CommonTree PERIOD16_tree=null;\n    RewriteRuleTokenStream stream_SOURCE_COMPUTER=new RewriteRuleTokenStream(adaptor,\"token SOURCE_COMPUTER\");\n    RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,\"token PERIOD\");\n    RewriteRuleSubtreeStream stream_source_computer_name=new RewriteRuleSubtreeStream(adaptor,\"rule source_computer_name\");\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:134:2: ( SOURCE_COMPUTER PERIOD ( source_computer_name )? -> ^( SOURCE_COMPUTER ( source_computer_name )? ) )\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:134:4: SOURCE_COMPUTER PERIOD ( source_computer_name )?\n        {\n        SOURCE_COMPUTER15=(Token)match(input,SOURCE_COMPUTER,FOLLOW_SOURCE_COMPUTER_in_source_computer581);  \n        stream_SOURCE_COMPUTER.add(SOURCE_COMPUTER15);\n\n        PERIOD16=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_source_computer583);  \n        stream_PERIOD.add(PERIOD16);\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:134:27: ( source_computer_name )?\n        int alt6=2;\n        int LA6_0 = input.LA(1);\n\n        if ( (LA6_0==WORD) ) {\n            alt6=1;\n        }\n        switch (alt6) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:134:27: source_computer_name\n                {\n                pushFollow(FOLLOW_source_computer_name_in_source_computer585);\n                source_computer_name17=source_computer_name();\n\n                state._fsp--;\n\n                stream_source_computer_name.add(source_computer_name17.getTree());\n\n                }\n                break;\n\n        }\n\n\n\n        // AST REWRITE\n        // elements: SOURCE_COMPUTER, source_computer_name\n        // token labels: \n        // rule labels: retval\n        // token list labels: \n        // rule list labels: \n        // wildcard labels: \n        retval.tree = root_0;\n        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n        root_0 = (CommonTree)adaptor.nil();\n        // 134:49: -> ^( SOURCE_COMPUTER ( source_computer_name )? )\n        {\n            // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:134:52: ^( SOURCE_COMPUTER ( source_computer_name )? )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot(stream_SOURCE_COMPUTER.nextNode(), root_1);\n\n            // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:134:70: ( source_computer_name )?\n            if ( stream_source_computer_name.hasNext() ) {\n                adaptor.addChild(root_1, stream_source_computer_name.nextTree());\n\n            }\n            stream_source_computer_name.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n        }\n\n        retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Constructor.\n *\n * @param tokenDictionary The properties file generated by antlr\n * for the parser. For a grammar X, the file name is X.tokens\n */\n", "func_signal": "public TokenFactory(Properties tokenDictionary)", "code": "{\n    this.tokenDictionary = tokenDictionary;\n    this.filterType = new TokenFilterByType();\n    this.filterType.addType(CobolType.COMMENT, false);\n    this.filterType.addType(CobolType.NEW_PAGE, false);\n    this.filterType.addType(CobolType.SPECIAL_LINE, false);\n    this.filterText = new TokenFilterByText();\n    this.filterText.addText(\",\", false);\n    this.filterText.addText(\";\", false);\n}", "path": "src\\jcobol\\parser\\antlr\\TokenFactory.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"crt_status\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:156:1: crt_status : CRT STATUS ( IS )? data_name -> ^( CRT data_name ) ;\n", "func_signal": "public final EnvironmentDivision.crt_status_return crt_status() throws RecognitionException", "code": "{\n    EnvironmentDivision.crt_status_return retval = new EnvironmentDivision.crt_status_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token CRT60=null;\n    Token STATUS61=null;\n    Token IS62=null;\n    EnvironmentDivision.data_name_return data_name63 = null;\n\n\n    CommonTree CRT60_tree=null;\n    CommonTree STATUS61_tree=null;\n    CommonTree IS62_tree=null;\n    RewriteRuleTokenStream stream_CRT=new RewriteRuleTokenStream(adaptor,\"token CRT\");\n    RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,\"token IS\");\n    RewriteRuleTokenStream stream_STATUS=new RewriteRuleTokenStream(adaptor,\"token STATUS\");\n    RewriteRuleSubtreeStream stream_data_name=new RewriteRuleSubtreeStream(adaptor,\"rule data_name\");\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:156:11: ( CRT STATUS ( IS )? data_name -> ^( CRT data_name ) )\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:156:13: CRT STATUS ( IS )? data_name\n        {\n        CRT60=(Token)match(input,CRT,FOLLOW_CRT_in_crt_status850);  \n        stream_CRT.add(CRT60);\n\n        STATUS61=(Token)match(input,STATUS,FOLLOW_STATUS_in_crt_status852);  \n        stream_STATUS.add(STATUS61);\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:156:24: ( IS )?\n        int alt21=2;\n        int LA21_0 = input.LA(1);\n\n        if ( (LA21_0==IS) ) {\n            alt21=1;\n        }\n        switch (alt21) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:156:24: IS\n                {\n                IS62=(Token)match(input,IS,FOLLOW_IS_in_crt_status854);  \n                stream_IS.add(IS62);\n\n\n                }\n                break;\n\n        }\n\n        pushFollow(FOLLOW_data_name_in_crt_status857);\n        data_name63=data_name();\n\n        state._fsp--;\n\n        stream_data_name.add(data_name63.getTree());\n\n\n        // AST REWRITE\n        // elements: CRT, data_name\n        // token labels: \n        // rule labels: retval\n        // token list labels: \n        // rule list labels: \n        // wildcard labels: \n        retval.tree = root_0;\n        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n        root_0 = (CommonTree)adaptor.nil();\n        // 156:38: -> ^( CRT data_name )\n        {\n            // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:156:41: ^( CRT data_name )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot(stream_CRT.nextNode(), root_1);\n\n            adaptor.addChild(root_1, stream_data_name.nextTree());\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n        }\n\n        retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"multiple_clause\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:261:1: multiple_clause : MULTIPLE FILE ( TAPE )? ( CONTAINS )? ( position )+ -> ^( MULTIPLE ( position )+ ) ;\n", "func_signal": "public final EnvironmentDivision.multiple_clause_return multiple_clause() throws RecognitionException", "code": "{\n    EnvironmentDivision.multiple_clause_return retval = new EnvironmentDivision.multiple_clause_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token MULTIPLE243=null;\n    Token FILE244=null;\n    Token TAPE245=null;\n    Token CONTAINS246=null;\n    EnvironmentDivision.position_return position247 = null;\n\n\n    CommonTree MULTIPLE243_tree=null;\n    CommonTree FILE244_tree=null;\n    CommonTree TAPE245_tree=null;\n    CommonTree CONTAINS246_tree=null;\n    RewriteRuleTokenStream stream_FILE=new RewriteRuleTokenStream(adaptor,\"token FILE\");\n    RewriteRuleTokenStream stream_TAPE=new RewriteRuleTokenStream(adaptor,\"token TAPE\");\n    RewriteRuleTokenStream stream_CONTAINS=new RewriteRuleTokenStream(adaptor,\"token CONTAINS\");\n    RewriteRuleTokenStream stream_MULTIPLE=new RewriteRuleTokenStream(adaptor,\"token MULTIPLE\");\n    RewriteRuleSubtreeStream stream_position=new RewriteRuleSubtreeStream(adaptor,\"rule position\");\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:262:2: ( MULTIPLE FILE ( TAPE )? ( CONTAINS )? ( position )+ -> ^( MULTIPLE ( position )+ ) )\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:262:4: MULTIPLE FILE ( TAPE )? ( CONTAINS )? ( position )+\n        {\n        MULTIPLE243=(Token)match(input,MULTIPLE,FOLLOW_MULTIPLE_in_multiple_clause2177);  \n        stream_MULTIPLE.add(MULTIPLE243);\n\n        FILE244=(Token)match(input,FILE,FOLLOW_FILE_in_multiple_clause2179);  \n        stream_FILE.add(FILE244);\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:262:18: ( TAPE )?\n        int alt105=2;\n        int LA105_0 = input.LA(1);\n\n        if ( (LA105_0==TAPE) ) {\n            alt105=1;\n        }\n        switch (alt105) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:262:18: TAPE\n                {\n                TAPE245=(Token)match(input,TAPE,FOLLOW_TAPE_in_multiple_clause2181);  \n                stream_TAPE.add(TAPE245);\n\n\n                }\n                break;\n\n        }\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:262:24: ( CONTAINS )?\n        int alt106=2;\n        int LA106_0 = input.LA(1);\n\n        if ( (LA106_0==CONTAINS) ) {\n            alt106=1;\n        }\n        switch (alt106) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:262:24: CONTAINS\n                {\n                CONTAINS246=(Token)match(input,CONTAINS,FOLLOW_CONTAINS_in_multiple_clause2184);  \n                stream_CONTAINS.add(CONTAINS246);\n\n\n                }\n                break;\n\n        }\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:262:34: ( position )+\n        int cnt107=0;\n        loop107:\n        do {\n            int alt107=2;\n            int LA107_0 = input.LA(1);\n\n            if ( (LA107_0==WORD) ) {\n                alt107=1;\n            }\n\n\n            switch (alt107) {\n        \tcase 1 :\n        \t    // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:262:34: position\n        \t    {\n        \t    pushFollow(FOLLOW_position_in_multiple_clause2187);\n        \t    position247=position();\n\n        \t    state._fsp--;\n\n        \t    stream_position.add(position247.getTree());\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    if ( cnt107 >= 1 ) break loop107;\n                    EarlyExitException eee =\n                        new EarlyExitException(107, input);\n                    throw eee;\n            }\n            cnt107++;\n        } while (true);\n\n\n\n        // AST REWRITE\n        // elements: position, MULTIPLE\n        // token labels: \n        // rule labels: retval\n        // token list labels: \n        // rule list labels: \n        // wildcard labels: \n        retval.tree = root_0;\n        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n        root_0 = (CommonTree)adaptor.nil();\n        // 262:45: -> ^( MULTIPLE ( position )+ )\n        {\n            // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:262:48: ^( MULTIPLE ( position )+ )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot(stream_MULTIPLE.nextNode(), root_1);\n\n            if ( !(stream_position.hasNext()) ) {\n                throw new RewriteEarlyExitException();\n            }\n            while ( stream_position.hasNext() ) {\n                adaptor.addChild(root_1, stream_position.nextTree());\n\n            }\n            stream_position.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n        }\n\n        retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"file_control\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:206:1: file_control : FILE_CONTROL PERIOD ( file_control_para )* -> ^( FILE_CONTROL ( file_control_para )* ) ;\n", "func_signal": "public final EnvironmentDivision.file_control_return file_control() throws RecognitionException", "code": "{\n    EnvironmentDivision.file_control_return retval = new EnvironmentDivision.file_control_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token FILE_CONTROL133=null;\n    Token PERIOD134=null;\n    EnvironmentDivision.file_control_para_return file_control_para135 = null;\n\n\n    CommonTree FILE_CONTROL133_tree=null;\n    CommonTree PERIOD134_tree=null;\n    RewriteRuleTokenStream stream_FILE_CONTROL=new RewriteRuleTokenStream(adaptor,\"token FILE_CONTROL\");\n    RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,\"token PERIOD\");\n    RewriteRuleSubtreeStream stream_file_control_para=new RewriteRuleSubtreeStream(adaptor,\"rule file_control_para\");\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:207:2: ( FILE_CONTROL PERIOD ( file_control_para )* -> ^( FILE_CONTROL ( file_control_para )* ) )\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:207:4: FILE_CONTROL PERIOD ( file_control_para )*\n        {\n        FILE_CONTROL133=(Token)match(input,FILE_CONTROL,FOLLOW_FILE_CONTROL_in_file_control1451);  \n        stream_FILE_CONTROL.add(FILE_CONTROL133);\n\n        PERIOD134=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_file_control1453);  \n        stream_PERIOD.add(PERIOD134);\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:207:24: ( file_control_para )*\n        loop52:\n        do {\n            int alt52=2;\n            int LA52_0 = input.LA(1);\n\n            if ( (LA52_0==SELECT) ) {\n                alt52=1;\n            }\n\n\n            switch (alt52) {\n        \tcase 1 :\n        \t    // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:207:24: file_control_para\n        \t    {\n        \t    pushFollow(FOLLOW_file_control_para_in_file_control1455);\n        \t    file_control_para135=file_control_para();\n\n        \t    state._fsp--;\n\n        \t    stream_file_control_para.add(file_control_para135.getTree());\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop52;\n            }\n        } while (true);\n\n\n\n        // AST REWRITE\n        // elements: FILE_CONTROL, file_control_para\n        // token labels: \n        // rule labels: retval\n        // token list labels: \n        // rule list labels: \n        // wildcard labels: \n        retval.tree = root_0;\n        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n        root_0 = (CommonTree)adaptor.nil();\n        // 207:43: -> ^( FILE_CONTROL ( file_control_para )* )\n        {\n            // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:207:46: ^( FILE_CONTROL ( file_control_para )* )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot(stream_FILE_CONTROL.nextNode(), root_1);\n\n            // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:207:61: ( file_control_para )*\n            while ( stream_file_control_para.hasNext() ) {\n                adaptor.addChild(root_1, stream_file_control_para.nextTree());\n\n            }\n            stream_file_control_para.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n        }\n\n        retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"source_computer_name\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:135:1: source_computer_name : WORD ( ( WITH )? DEBUGGING MODE )? PERIOD ;\n", "func_signal": "public final EnvironmentDivision.source_computer_name_return source_computer_name() throws RecognitionException", "code": "{\n    EnvironmentDivision.source_computer_name_return retval = new EnvironmentDivision.source_computer_name_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token WORD18=null;\n    Token WITH19=null;\n    Token DEBUGGING20=null;\n    Token MODE21=null;\n    Token PERIOD22=null;\n\n    CommonTree WORD18_tree=null;\n    CommonTree WITH19_tree=null;\n    CommonTree DEBUGGING20_tree=null;\n    CommonTree MODE21_tree=null;\n    CommonTree PERIOD22_tree=null;\n\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:136:2: ( WORD ( ( WITH )? DEBUGGING MODE )? PERIOD )\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:136:4: WORD ( ( WITH )? DEBUGGING MODE )? PERIOD\n        {\n        root_0 = (CommonTree)adaptor.nil();\n\n        WORD18=(Token)match(input,WORD,FOLLOW_WORD_in_source_computer_name603); \n        WORD18_tree = (CommonTree)adaptor.create(WORD18);\n        adaptor.addChild(root_0, WORD18_tree);\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:136:9: ( ( WITH )? DEBUGGING MODE )?\n        int alt8=2;\n        int LA8_0 = input.LA(1);\n\n        if ( ((LA8_0>=WITH && LA8_0<=DEBUGGING)) ) {\n            alt8=1;\n        }\n        switch (alt8) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:136:10: ( WITH )? DEBUGGING MODE\n                {\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:136:14: ( WITH )?\n                int alt7=2;\n                int LA7_0 = input.LA(1);\n\n                if ( (LA7_0==WITH) ) {\n                    alt7=1;\n                }\n                switch (alt7) {\n                    case 1 :\n                        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:136:14: WITH\n                        {\n                        WITH19=(Token)match(input,WITH,FOLLOW_WITH_in_source_computer_name606); \n\n                        }\n                        break;\n\n                }\n\n                DEBUGGING20=(Token)match(input,DEBUGGING,FOLLOW_DEBUGGING_in_source_computer_name610); \n                DEBUGGING20_tree = (CommonTree)adaptor.create(DEBUGGING20);\n                adaptor.addChild(root_0, DEBUGGING20_tree);\n\n                MODE21=(Token)match(input,MODE,FOLLOW_MODE_in_source_computer_name612); \n\n                }\n                break;\n\n        }\n\n        PERIOD22=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_source_computer_name617); \n\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"object_computer_name\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:140:1: object_computer_name : WORD ( memory_size )? ( program_collating )? ( segment_limit )? PERIOD ;\n", "func_signal": "public final EnvironmentDivision.object_computer_name_return object_computer_name() throws RecognitionException", "code": "{\n    EnvironmentDivision.object_computer_name_return retval = new EnvironmentDivision.object_computer_name_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token WORD26=null;\n    Token PERIOD30=null;\n    EnvironmentDivision.memory_size_return memory_size27 = null;\n\n    EnvironmentDivision.program_collating_return program_collating28 = null;\n\n    EnvironmentDivision.segment_limit_return segment_limit29 = null;\n\n\n    CommonTree WORD26_tree=null;\n    CommonTree PERIOD30_tree=null;\n\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:141:2: ( WORD ( memory_size )? ( program_collating )? ( segment_limit )? PERIOD )\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:141:4: WORD ( memory_size )? ( program_collating )? ( segment_limit )? PERIOD\n        {\n        root_0 = (CommonTree)adaptor.nil();\n\n        WORD26=(Token)match(input,WORD,FOLLOW_WORD_in_object_computer_name651); \n        WORD26_tree = (CommonTree)adaptor.create(WORD26);\n        adaptor.addChild(root_0, WORD26_tree);\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:141:9: ( memory_size )?\n        int alt10=2;\n        int LA10_0 = input.LA(1);\n\n        if ( (LA10_0==MEMORY) ) {\n            alt10=1;\n        }\n        switch (alt10) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:141:9: memory_size\n                {\n                pushFollow(FOLLOW_memory_size_in_object_computer_name653);\n                memory_size27=memory_size();\n\n                state._fsp--;\n\n                adaptor.addChild(root_0, memory_size27.getTree());\n\n                }\n                break;\n\n        }\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:141:22: ( program_collating )?\n        int alt11=2;\n        int LA11_0 = input.LA(1);\n\n        if ( ((LA11_0>=PROGRAM && LA11_0<=SEQUENCE)) ) {\n            alt11=1;\n        }\n        switch (alt11) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:141:22: program_collating\n                {\n                pushFollow(FOLLOW_program_collating_in_object_computer_name656);\n                program_collating28=program_collating();\n\n                state._fsp--;\n\n                adaptor.addChild(root_0, program_collating28.getTree());\n\n                }\n                break;\n\n        }\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:141:41: ( segment_limit )?\n        int alt12=2;\n        int LA12_0 = input.LA(1);\n\n        if ( (LA12_0==SEGMENT_LIMIT) ) {\n            alt12=1;\n        }\n        switch (alt12) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:141:41: segment_limit\n                {\n                pushFollow(FOLLOW_segment_limit_in_object_computer_name659);\n                segment_limit29=segment_limit();\n\n                state._fsp--;\n\n                adaptor.addChild(root_0, segment_limit29.getTree());\n\n                }\n                break;\n\n        }\n\n        PERIOD30=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_object_computer_name662); \n\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"word_list\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:192:1: word_list : ( WORD )+ -> ^( P_LIST ( WORD )+ ) ;\n", "func_signal": "public final EnvironmentDivision.word_list_return word_list() throws RecognitionException", "code": "{\n    EnvironmentDivision.word_list_return retval = new EnvironmentDivision.word_list_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token WORD118=null;\n\n    CommonTree WORD118_tree=null;\n    RewriteRuleTokenStream stream_WORD=new RewriteRuleTokenStream(adaptor,\"token WORD\");\n\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:193:2: ( ( WORD )+ -> ^( P_LIST ( WORD )+ ) )\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:193:4: ( WORD )+\n        {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:193:4: ( WORD )+\n        int cnt46=0;\n        loop46:\n        do {\n            int alt46=2;\n            int LA46_0 = input.LA(1);\n\n            if ( (LA46_0==WORD) ) {\n                int LA46_2 = input.LA(2);\n\n                if ( (LA46_2==IS) ) {\n                    int LA46_3 = input.LA(3);\n\n                    if ( (LA46_3==WORD) ) {\n                        alt46=1;\n                    }\n\n\n                }\n                else if ( (LA46_2==EOF||(LA46_2>=PERIOD && LA46_2<=WORD)||LA46_2==CONFIGURATION||LA46_2==SOURCE_COMPUTER||LA46_2==OBJECT_COMPUTER||LA46_2==SPECIAL_NAMES||LA46_2==ALPHABET||LA46_2==SYMBOLIC||(LA46_2>=IN && LA46_2<=INPUT_OUTPUT)||(LA46_2>=CONSOLE && LA46_2<=CURRENCY)||(LA46_2>=CURSOR && LA46_2<=NUMERIC)) ) {\n                    alt46=1;\n                }\n\n\n            }\n\n\n            switch (alt46) {\n        \tcase 1 :\n        \t    // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:193:4: WORD\n        \t    {\n        \t    WORD118=(Token)match(input,WORD,FOLLOW_WORD_in_word_list1305);  \n        \t    stream_WORD.add(WORD118);\n\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    if ( cnt46 >= 1 ) break loop46;\n                    EarlyExitException eee =\n                        new EarlyExitException(46, input);\n                    throw eee;\n            }\n            cnt46++;\n        } while (true);\n\n\n\n        // AST REWRITE\n        // elements: WORD\n        // token labels: \n        // rule labels: retval\n        // token list labels: \n        // rule list labels: \n        // wildcard labels: \n        retval.tree = root_0;\n        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n        root_0 = (CommonTree)adaptor.nil();\n        // 193:13: -> ^( P_LIST ( WORD )+ )\n        {\n            // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:193:16: ^( P_LIST ( WORD )+ )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(P_LIST, \"P_LIST\"), root_1);\n\n            if ( !(stream_WORD.hasNext()) ) {\n                throw new RewriteEarlyExitException();\n            }\n            while ( stream_WORD.hasNext() ) {\n                adaptor.addChild(root_1, stream_WORD.nextNode());\n\n            }\n            stream_WORD.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n        }\n\n        retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"input_output_clause\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:204:1: input_output_clause : ( file_control | i_o_control );\n", "func_signal": "public final EnvironmentDivision.input_output_clause_return input_output_clause() throws RecognitionException", "code": "{\n    EnvironmentDivision.input_output_clause_return retval = new EnvironmentDivision.input_output_clause_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    EnvironmentDivision.file_control_return file_control131 = null;\n\n    EnvironmentDivision.i_o_control_return i_o_control132 = null;\n\n\n\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:205:2: ( file_control | i_o_control )\n        int alt51=2;\n        int LA51_0 = input.LA(1);\n\n        if ( (LA51_0==FILE_CONTROL) ) {\n            alt51=1;\n        }\n        else if ( (LA51_0==I_O_CONTROL) ) {\n            alt51=2;\n        }\n        else {\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 51, 0, input);\n\n            throw nvae;\n        }\n        switch (alt51) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:205:4: file_control\n                {\n                root_0 = (CommonTree)adaptor.nil();\n\n                pushFollow(FOLLOW_file_control_in_input_output_clause1438);\n                file_control131=file_control();\n\n                state._fsp--;\n\n                adaptor.addChild(root_0, file_control131.getTree());\n\n                }\n                break;\n            case 2 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:205:19: i_o_control\n                {\n                root_0 = (CommonTree)adaptor.nil();\n\n                pushFollow(FOLLOW_i_o_control_in_input_output_clause1442);\n                i_o_control132=i_o_control();\n\n                state._fsp--;\n\n                adaptor.addChild(root_0, i_o_control132.getTree());\n\n                }\n                break;\n\n        }\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"cursor\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:158:1: cursor : CURSOR ( IS )? data_name -> ^( CURSOR data_name ) ;\n", "func_signal": "public final EnvironmentDivision.cursor_return cursor() throws RecognitionException", "code": "{\n    EnvironmentDivision.cursor_return retval = new EnvironmentDivision.cursor_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token CURSOR68=null;\n    Token IS69=null;\n    EnvironmentDivision.data_name_return data_name70 = null;\n\n\n    CommonTree CURSOR68_tree=null;\n    CommonTree IS69_tree=null;\n    RewriteRuleTokenStream stream_CURSOR=new RewriteRuleTokenStream(adaptor,\"token CURSOR\");\n    RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,\"token IS\");\n    RewriteRuleSubtreeStream stream_data_name=new RewriteRuleSubtreeStream(adaptor,\"rule data_name\");\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:158:8: ( CURSOR ( IS )? data_name -> ^( CURSOR data_name ) )\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:158:10: CURSOR ( IS )? data_name\n        {\n        CURSOR68=(Token)match(input,CURSOR,FOLLOW_CURSOR_in_cursor894);  \n        stream_CURSOR.add(CURSOR68);\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:158:17: ( IS )?\n        int alt24=2;\n        int LA24_0 = input.LA(1);\n\n        if ( (LA24_0==IS) ) {\n            alt24=1;\n        }\n        switch (alt24) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:158:17: IS\n                {\n                IS69=(Token)match(input,IS,FOLLOW_IS_in_cursor896);  \n                stream_IS.add(IS69);\n\n\n                }\n                break;\n\n        }\n\n        pushFollow(FOLLOW_data_name_in_cursor899);\n        data_name70=data_name();\n\n        state._fsp--;\n\n        stream_data_name.add(data_name70.getTree());\n\n\n        // AST REWRITE\n        // elements: CURSOR, data_name\n        // token labels: \n        // rule labels: retval\n        // token list labels: \n        // rule list labels: \n        // wildcard labels: \n        retval.tree = root_0;\n        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n        root_0 = (CommonTree)adaptor.nil();\n        // 158:32: -> ^( CURSOR data_name )\n        {\n            // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:158:35: ^( CURSOR data_name )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot(stream_CURSOR.nextNode(), root_1);\n\n            adaptor.addChild(root_1, stream_data_name.nextTree());\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n        }\n\n        retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"relative_clause\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:235:1: relative_clause : RELATIVE ( KEY )? ( IS )? data_name -> ^( RELATIVE data_name ) ;\n", "func_signal": "public final EnvironmentDivision.relative_clause_return relative_clause() throws RecognitionException", "code": "{\n    EnvironmentDivision.relative_clause_return retval = new EnvironmentDivision.relative_clause_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token RELATIVE185=null;\n    Token KEY186=null;\n    Token IS187=null;\n    EnvironmentDivision.data_name_return data_name188 = null;\n\n\n    CommonTree RELATIVE185_tree=null;\n    CommonTree KEY186_tree=null;\n    CommonTree IS187_tree=null;\n    RewriteRuleTokenStream stream_RELATIVE=new RewriteRuleTokenStream(adaptor,\"token RELATIVE\");\n    RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,\"token IS\");\n    RewriteRuleTokenStream stream_KEY=new RewriteRuleTokenStream(adaptor,\"token KEY\");\n    RewriteRuleSubtreeStream stream_data_name=new RewriteRuleSubtreeStream(adaptor,\"rule data_name\");\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:236:2: ( RELATIVE ( KEY )? ( IS )? data_name -> ^( RELATIVE data_name ) )\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:236:4: RELATIVE ( KEY )? ( IS )? data_name\n        {\n        RELATIVE185=(Token)match(input,RELATIVE,FOLLOW_RELATIVE_in_relative_clause1809);  \n        stream_RELATIVE.add(RELATIVE185);\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:236:13: ( KEY )?\n        int alt75=2;\n        int LA75_0 = input.LA(1);\n\n        if ( (LA75_0==KEY) ) {\n            alt75=1;\n        }\n        switch (alt75) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:236:13: KEY\n                {\n                KEY186=(Token)match(input,KEY,FOLLOW_KEY_in_relative_clause1811);  \n                stream_KEY.add(KEY186);\n\n\n                }\n                break;\n\n        }\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:236:18: ( IS )?\n        int alt76=2;\n        int LA76_0 = input.LA(1);\n\n        if ( (LA76_0==IS) ) {\n            alt76=1;\n        }\n        switch (alt76) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:236:18: IS\n                {\n                IS187=(Token)match(input,IS,FOLLOW_IS_in_relative_clause1814);  \n                stream_IS.add(IS187);\n\n\n                }\n                break;\n\n        }\n\n        pushFollow(FOLLOW_data_name_in_relative_clause1817);\n        data_name188=data_name();\n\n        state._fsp--;\n\n        stream_data_name.add(data_name188.getTree());\n\n\n        // AST REWRITE\n        // elements: data_name, RELATIVE\n        // token labels: \n        // rule labels: retval\n        // token list labels: \n        // rule list labels: \n        // wildcard labels: \n        retval.tree = root_0;\n        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n        root_0 = (CommonTree)adaptor.nil();\n        // 236:32: -> ^( RELATIVE data_name )\n        {\n            // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:236:35: ^( RELATIVE data_name )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot(stream_RELATIVE.nextNode(), root_1);\n\n            adaptor.addChild(root_1, stream_data_name.nextTree());\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n        }\n\n        retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"file_control_para\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:209:1: file_control_para : SELECT ( OPTIONAL )? WORD ( file_clause )* PERIOD -> ^( SELECT WORD ( OPTIONAL )? ( file_clause )* ) ;\n", "func_signal": "public final EnvironmentDivision.file_control_para_return file_control_para() throws RecognitionException", "code": "{\n    EnvironmentDivision.file_control_para_return retval = new EnvironmentDivision.file_control_para_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token SELECT136=null;\n    Token OPTIONAL137=null;\n    Token WORD138=null;\n    Token PERIOD140=null;\n    EnvironmentDivision.file_clause_return file_clause139 = null;\n\n\n    CommonTree SELECT136_tree=null;\n    CommonTree OPTIONAL137_tree=null;\n    CommonTree WORD138_tree=null;\n    CommonTree PERIOD140_tree=null;\n    RewriteRuleTokenStream stream_WORD=new RewriteRuleTokenStream(adaptor,\"token WORD\");\n    RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,\"token SELECT\");\n    RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,\"token PERIOD\");\n    RewriteRuleTokenStream stream_OPTIONAL=new RewriteRuleTokenStream(adaptor,\"token OPTIONAL\");\n    RewriteRuleSubtreeStream stream_file_clause=new RewriteRuleSubtreeStream(adaptor,\"rule file_clause\");\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:210:2: ( SELECT ( OPTIONAL )? WORD ( file_clause )* PERIOD -> ^( SELECT WORD ( OPTIONAL )? ( file_clause )* ) )\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:210:4: SELECT ( OPTIONAL )? WORD ( file_clause )* PERIOD\n        {\n        SELECT136=(Token)match(input,SELECT,FOLLOW_SELECT_in_file_control_para1475);  \n        stream_SELECT.add(SELECT136);\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:210:11: ( OPTIONAL )?\n        int alt53=2;\n        int LA53_0 = input.LA(1);\n\n        if ( (LA53_0==OPTIONAL) ) {\n            alt53=1;\n        }\n        switch (alt53) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:210:11: OPTIONAL\n                {\n                OPTIONAL137=(Token)match(input,OPTIONAL,FOLLOW_OPTIONAL_in_file_control_para1477);  \n                stream_OPTIONAL.add(OPTIONAL137);\n\n\n                }\n                break;\n\n        }\n\n        WORD138=(Token)match(input,WORD,FOLLOW_WORD_in_file_control_para1480);  \n        stream_WORD.add(WORD138);\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:210:26: ( file_clause )*\n        loop54:\n        do {\n            int alt54=2;\n            int LA54_0 = input.LA(1);\n\n            if ( (LA54_0==STATUS||(LA54_0>=FILE && LA54_0<=SEQUENTIAL)||(LA54_0>=ORGANIZATION && LA54_0<=RECORD)||LA54_0==ASSIGN||LA54_0==ALTERNATE||(LA54_0>=BINARY && LA54_0<=LINE)) ) {\n                alt54=1;\n            }\n\n\n            switch (alt54) {\n        \tcase 1 :\n        \t    // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:210:26: file_clause\n        \t    {\n        \t    pushFollow(FOLLOW_file_clause_in_file_control_para1482);\n        \t    file_clause139=file_clause();\n\n        \t    state._fsp--;\n\n        \t    stream_file_clause.add(file_clause139.getTree());\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop54;\n            }\n        } while (true);\n\n        PERIOD140=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_file_control_para1485);  \n        stream_PERIOD.add(PERIOD140);\n\n\n\n        // AST REWRITE\n        // elements: WORD, SELECT, file_clause, OPTIONAL\n        // token labels: \n        // rule labels: retval\n        // token list labels: \n        // rule list labels: \n        // wildcard labels: \n        retval.tree = root_0;\n        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n        root_0 = (CommonTree)adaptor.nil();\n        // 210:46: -> ^( SELECT WORD ( OPTIONAL )? ( file_clause )* )\n        {\n            // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:210:49: ^( SELECT WORD ( OPTIONAL )? ( file_clause )* )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot(stream_SELECT.nextNode(), root_1);\n\n            adaptor.addChild(root_1, stream_WORD.nextNode());\n            // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:210:63: ( OPTIONAL )?\n            if ( stream_OPTIONAL.hasNext() ) {\n                adaptor.addChild(root_1, stream_OPTIONAL.nextNode());\n\n            }\n            stream_OPTIONAL.reset();\n            // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:210:73: ( file_clause )*\n            while ( stream_file_clause.hasNext() ) {\n                adaptor.addChild(root_1, stream_file_clause.nextTree());\n\n            }\n            stream_file_clause.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n        }\n\n        retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"organization_clause\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:219:1: organization_clause : ( ( ORGANIZATION ( IS )? )? ( bin_line )? SEQUENTIAL -> ^( P_ORGANIZATION SEQUENTIAL ( bin_line )? ) | ( ORGANIZATION ( IS )? )? INDEXED -> ^( P_ORGANIZATION INDEXED ) | ( ORGANIZATION ( IS )? )? RELATIVE -> ^( P_ORGANIZATION RELATIVE ) );\n", "func_signal": "public final EnvironmentDivision.organization_clause_return organization_clause() throws RecognitionException", "code": "{\n    EnvironmentDivision.organization_clause_return retval = new EnvironmentDivision.organization_clause_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token ORGANIZATION156=null;\n    Token IS157=null;\n    Token SEQUENTIAL159=null;\n    Token ORGANIZATION160=null;\n    Token IS161=null;\n    Token INDEXED162=null;\n    Token ORGANIZATION163=null;\n    Token IS164=null;\n    Token RELATIVE165=null;\n    EnvironmentDivision.bin_line_return bin_line158 = null;\n\n\n    CommonTree ORGANIZATION156_tree=null;\n    CommonTree IS157_tree=null;\n    CommonTree SEQUENTIAL159_tree=null;\n    CommonTree ORGANIZATION160_tree=null;\n    CommonTree IS161_tree=null;\n    CommonTree INDEXED162_tree=null;\n    CommonTree ORGANIZATION163_tree=null;\n    CommonTree IS164_tree=null;\n    CommonTree RELATIVE165_tree=null;\n    RewriteRuleTokenStream stream_INDEXED=new RewriteRuleTokenStream(adaptor,\"token INDEXED\");\n    RewriteRuleTokenStream stream_RELATIVE=new RewriteRuleTokenStream(adaptor,\"token RELATIVE\");\n    RewriteRuleTokenStream stream_ORGANIZATION=new RewriteRuleTokenStream(adaptor,\"token ORGANIZATION\");\n    RewriteRuleTokenStream stream_SEQUENTIAL=new RewriteRuleTokenStream(adaptor,\"token SEQUENTIAL\");\n    RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,\"token IS\");\n    RewriteRuleSubtreeStream stream_bin_line=new RewriteRuleSubtreeStream(adaptor,\"rule bin_line\");\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:220:2: ( ( ORGANIZATION ( IS )? )? ( bin_line )? SEQUENTIAL -> ^( P_ORGANIZATION SEQUENTIAL ( bin_line )? ) | ( ORGANIZATION ( IS )? )? INDEXED -> ^( P_ORGANIZATION INDEXED ) | ( ORGANIZATION ( IS )? )? RELATIVE -> ^( P_ORGANIZATION RELATIVE ) )\n        int alt66=3;\n        switch ( input.LA(1) ) {\n        case ORGANIZATION:\n            {\n            switch ( input.LA(2) ) {\n            case IS:\n                {\n                switch ( input.LA(3) ) {\n                case RELATIVE:\n                    {\n                    alt66=3;\n                    }\n                    break;\n                case INDEXED:\n                    {\n                    alt66=2;\n                    }\n                    break;\n                case SEQUENTIAL:\n                case BINARY:\n                case LINE:\n                    {\n                    alt66=1;\n                    }\n                    break;\n                default:\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"\", 66, 5, input);\n\n                    throw nvae;\n                }\n\n                }\n                break;\n            case RELATIVE:\n                {\n                alt66=3;\n                }\n                break;\n            case INDEXED:\n                {\n                alt66=2;\n                }\n                break;\n            case SEQUENTIAL:\n            case BINARY:\n            case LINE:\n                {\n                alt66=1;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 66, 1, input);\n\n                throw nvae;\n            }\n\n            }\n            break;\n        case SEQUENTIAL:\n        case BINARY:\n        case LINE:\n            {\n            alt66=1;\n            }\n            break;\n        case INDEXED:\n            {\n            alt66=2;\n            }\n            break;\n        case RELATIVE:\n            {\n            alt66=3;\n            }\n            break;\n        default:\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 66, 0, input);\n\n            throw nvae;\n        }\n\n        switch (alt66) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:220:4: ( ORGANIZATION ( IS )? )? ( bin_line )? SEQUENTIAL\n                {\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:220:4: ( ORGANIZATION ( IS )? )?\n                int alt60=2;\n                int LA60_0 = input.LA(1);\n\n                if ( (LA60_0==ORGANIZATION) ) {\n                    alt60=1;\n                }\n                switch (alt60) {\n                    case 1 :\n                        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:220:5: ORGANIZATION ( IS )?\n                        {\n                        ORGANIZATION156=(Token)match(input,ORGANIZATION,FOLLOW_ORGANIZATION_in_organization_clause1605);  \n                        stream_ORGANIZATION.add(ORGANIZATION156);\n\n                        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:220:18: ( IS )?\n                        int alt59=2;\n                        int LA59_0 = input.LA(1);\n\n                        if ( (LA59_0==IS) ) {\n                            alt59=1;\n                        }\n                        switch (alt59) {\n                            case 1 :\n                                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:220:18: IS\n                                {\n                                IS157=(Token)match(input,IS,FOLLOW_IS_in_organization_clause1607);  \n                                stream_IS.add(IS157);\n\n\n                                }\n                                break;\n\n                        }\n\n\n                        }\n                        break;\n\n                }\n\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:220:24: ( bin_line )?\n                int alt61=2;\n                int LA61_0 = input.LA(1);\n\n                if ( ((LA61_0>=BINARY && LA61_0<=LINE)) ) {\n                    alt61=1;\n                }\n                switch (alt61) {\n                    case 1 :\n                        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:220:24: bin_line\n                        {\n                        pushFollow(FOLLOW_bin_line_in_organization_clause1612);\n                        bin_line158=bin_line();\n\n                        state._fsp--;\n\n                        stream_bin_line.add(bin_line158.getTree());\n\n                        }\n                        break;\n\n                }\n\n                SEQUENTIAL159=(Token)match(input,SEQUENTIAL,FOLLOW_SEQUENTIAL_in_organization_clause1615);  \n                stream_SEQUENTIAL.add(SEQUENTIAL159);\n\n\n\n                // AST REWRITE\n                // elements: bin_line, SEQUENTIAL\n                // token labels: \n                // rule labels: retval\n                // token list labels: \n                // rule list labels: \n                // wildcard labels: \n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                root_0 = (CommonTree)adaptor.nil();\n                // 220:45: -> ^( P_ORGANIZATION SEQUENTIAL ( bin_line )? )\n                {\n                    // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:220:48: ^( P_ORGANIZATION SEQUENTIAL ( bin_line )? )\n                    {\n                    CommonTree root_1 = (CommonTree)adaptor.nil();\n                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(P_ORGANIZATION, \"P_ORGANIZATION\"), root_1);\n\n                    adaptor.addChild(root_1, stream_SEQUENTIAL.nextNode());\n                    // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:220:76: ( bin_line )?\n                    if ( stream_bin_line.hasNext() ) {\n                        adaptor.addChild(root_1, stream_bin_line.nextTree());\n\n                    }\n                    stream_bin_line.reset();\n\n                    adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;\n                }\n                break;\n            case 2 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:221:4: ( ORGANIZATION ( IS )? )? INDEXED\n                {\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:221:4: ( ORGANIZATION ( IS )? )?\n                int alt63=2;\n                int LA63_0 = input.LA(1);\n\n                if ( (LA63_0==ORGANIZATION) ) {\n                    alt63=1;\n                }\n                switch (alt63) {\n                    case 1 :\n                        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:221:5: ORGANIZATION ( IS )?\n                        {\n                        ORGANIZATION160=(Token)match(input,ORGANIZATION,FOLLOW_ORGANIZATION_in_organization_clause1632);  \n                        stream_ORGANIZATION.add(ORGANIZATION160);\n\n                        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:221:18: ( IS )?\n                        int alt62=2;\n                        int LA62_0 = input.LA(1);\n\n                        if ( (LA62_0==IS) ) {\n                            alt62=1;\n                        }\n                        switch (alt62) {\n                            case 1 :\n                                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:221:18: IS\n                                {\n                                IS161=(Token)match(input,IS,FOLLOW_IS_in_organization_clause1634);  \n                                stream_IS.add(IS161);\n\n\n                                }\n                                break;\n\n                        }\n\n\n                        }\n                        break;\n\n                }\n\n                INDEXED162=(Token)match(input,INDEXED,FOLLOW_INDEXED_in_organization_clause1639);  \n                stream_INDEXED.add(INDEXED162);\n\n\n\n                // AST REWRITE\n                // elements: INDEXED\n                // token labels: \n                // rule labels: retval\n                // token list labels: \n                // rule list labels: \n                // wildcard labels: \n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                root_0 = (CommonTree)adaptor.nil();\n                // 221:34: -> ^( P_ORGANIZATION INDEXED )\n                {\n                    // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:221:37: ^( P_ORGANIZATION INDEXED )\n                    {\n                    CommonTree root_1 = (CommonTree)adaptor.nil();\n                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(P_ORGANIZATION, \"P_ORGANIZATION\"), root_1);\n\n                    adaptor.addChild(root_1, stream_INDEXED.nextNode());\n\n                    adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;\n                }\n                break;\n            case 3 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:222:4: ( ORGANIZATION ( IS )? )? RELATIVE\n                {\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:222:4: ( ORGANIZATION ( IS )? )?\n                int alt65=2;\n                int LA65_0 = input.LA(1);\n\n                if ( (LA65_0==ORGANIZATION) ) {\n                    alt65=1;\n                }\n                switch (alt65) {\n                    case 1 :\n                        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:222:5: ORGANIZATION ( IS )?\n                        {\n                        ORGANIZATION163=(Token)match(input,ORGANIZATION,FOLLOW_ORGANIZATION_in_organization_clause1655);  \n                        stream_ORGANIZATION.add(ORGANIZATION163);\n\n                        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:222:18: ( IS )?\n                        int alt64=2;\n                        int LA64_0 = input.LA(1);\n\n                        if ( (LA64_0==IS) ) {\n                            alt64=1;\n                        }\n                        switch (alt64) {\n                            case 1 :\n                                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:222:18: IS\n                                {\n                                IS164=(Token)match(input,IS,FOLLOW_IS_in_organization_clause1657);  \n                                stream_IS.add(IS164);\n\n\n                                }\n                                break;\n\n                        }\n\n\n                        }\n                        break;\n\n                }\n\n                RELATIVE165=(Token)match(input,RELATIVE,FOLLOW_RELATIVE_in_organization_clause1662);  \n                stream_RELATIVE.add(RELATIVE165);\n\n\n\n                // AST REWRITE\n                // elements: RELATIVE\n                // token labels: \n                // rule labels: retval\n                // token list labels: \n                // rule list labels: \n                // wildcard labels: \n                retval.tree = root_0;\n                RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                root_0 = (CommonTree)adaptor.nil();\n                // 222:35: -> ^( P_ORGANIZATION RELATIVE )\n                {\n                    // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:222:38: ^( P_ORGANIZATION RELATIVE )\n                    {\n                    CommonTree root_1 = (CommonTree)adaptor.nil();\n                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(P_ORGANIZATION, \"P_ORGANIZATION\"), root_1);\n\n                    adaptor.addChild(root_1, stream_RELATIVE.nextNode());\n\n                    adaptor.addChild(root_0, root_1);\n                    }\n\n                }\n\n                retval.tree = root_0;\n                }\n                break;\n\n        }\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"separate\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:162:1: separate : SEPARATE ( CHARACTERS )? -> SEPARATE ;\n", "func_signal": "public final EnvironmentDivision.separate_return separate() throws RecognitionException", "code": "{\n    EnvironmentDivision.separate_return retval = new EnvironmentDivision.separate_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token SEPARATE80=null;\n    Token CHARACTERS81=null;\n\n    CommonTree SEPARATE80_tree=null;\n    CommonTree CHARACTERS81_tree=null;\n    RewriteRuleTokenStream stream_CHARACTERS=new RewriteRuleTokenStream(adaptor,\"token CHARACTERS\");\n    RewriteRuleTokenStream stream_SEPARATE=new RewriteRuleTokenStream(adaptor,\"token SEPARATE\");\n\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:162:9: ( SEPARATE ( CHARACTERS )? -> SEPARATE )\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:162:11: SEPARATE ( CHARACTERS )?\n        {\n        SEPARATE80=(Token)match(input,SEPARATE,FOLLOW_SEPARATE_in_separate970);  \n        stream_SEPARATE.add(SEPARATE80);\n\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:162:20: ( CHARACTERS )?\n        int alt28=2;\n        int LA28_0 = input.LA(1);\n\n        if ( (LA28_0==CHARACTERS) ) {\n            alt28=1;\n        }\n        switch (alt28) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:162:20: CHARACTERS\n                {\n                CHARACTERS81=(Token)match(input,CHARACTERS,FOLLOW_CHARACTERS_in_separate972);  \n                stream_CHARACTERS.add(CHARACTERS81);\n\n\n                }\n                break;\n\n        }\n\n\n\n        // AST REWRITE\n        // elements: SEPARATE\n        // token labels: \n        // rule labels: retval\n        // token list labels: \n        // rule list labels: \n        // wildcard labels: \n        retval.tree = root_0;\n        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n        root_0 = (CommonTree)adaptor.nil();\n        // 162:33: -> SEPARATE\n        {\n            adaptor.addChild(root_0, stream_SEPARATE.nextNode());\n\n        }\n\n        retval.tree = root_0;\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "// $ANTLR start \"configuration_section_clause\"\n// /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:131:1: configuration_section_clause : ( source_computer | object_computer | special_names );\n", "func_signal": "public final EnvironmentDivision.configuration_section_clause_return configuration_section_clause() throws RecognitionException", "code": "{\n    EnvironmentDivision.configuration_section_clause_return retval = new EnvironmentDivision.configuration_section_clause_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    EnvironmentDivision.source_computer_return source_computer12 = null;\n\n    EnvironmentDivision.object_computer_return object_computer13 = null;\n\n    EnvironmentDivision.special_names_return special_names14 = null;\n\n\n\n    try {\n        // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:132:2: ( source_computer | object_computer | special_names )\n        int alt5=3;\n        switch ( input.LA(1) ) {\n        case SOURCE_COMPUTER:\n            {\n            alt5=1;\n            }\n            break;\n        case OBJECT_COMPUTER:\n            {\n            alt5=2;\n            }\n            break;\n        case SPECIAL_NAMES:\n            {\n            alt5=3;\n            }\n            break;\n        default:\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 5, 0, input);\n\n            throw nvae;\n        }\n\n        switch (alt5) {\n            case 1 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:132:4: source_computer\n                {\n                root_0 = (CommonTree)adaptor.nil();\n\n                pushFollow(FOLLOW_source_computer_in_configuration_section_clause565);\n                source_computer12=source_computer();\n\n                state._fsp--;\n\n                adaptor.addChild(root_0, source_computer12.getTree());\n\n                }\n                break;\n            case 2 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:132:22: object_computer\n                {\n                root_0 = (CommonTree)adaptor.nil();\n\n                pushFollow(FOLLOW_object_computer_in_configuration_section_clause569);\n                object_computer13=object_computer();\n\n                state._fsp--;\n\n                adaptor.addChild(root_0, object_computer13.getTree());\n\n                }\n                break;\n            case 3 :\n                // /home/andres/NetBeansProjects/jCobolParser/src/jcobol/parser/divisions/EnvironmentDivision.g:132:40: special_names\n                {\n                root_0 = (CommonTree)adaptor.nil();\n\n                pushFollow(FOLLOW_special_names_in_configuration_section_clause573);\n                special_names14=special_names();\n\n                state._fsp--;\n\n                adaptor.addChild(root_0, special_names14.getTree());\n\n                }\n                break;\n\n        }\n        retval.stop = input.LT(-1);\n\n        retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "src\\jcobol\\parser\\divisions\\EnvironmentDivision.java", "repo_name": "agrinob/jCobolParser", "stars": 4, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Method calculates the nearest grid point from given coordinates.\n */\n", "func_signal": "public Point3d getGridPointFrom3dCoordinates(Point3d coord)\n\t\tthrows Exception", "code": "{\n\tPoint3d gridPoint = new Point3d();\n\n\tif (coord.x >= minx & coord.x <= maxx) {\n\t\tgridPoint.x = (int) Math.round(Math.abs(minx - coord.x)\n\t\t\t\t/ latticeConstant);\n\t} else {\n\t\tthrow new Exception(\n\t\t\t\t\"CDKGridError: Given coordinates are not in grid\");\n\t}\n\tif (coord.y >= miny & coord.y <= maxy) {\n\t\tgridPoint.y = (int) Math.round(Math.abs(miny - coord.y)\n\t\t\t\t/ latticeConstant);\n\t} else {\n\t\tthrow new Exception(\n\t\t\t\t\"CDKGridError: Given coordinates are not in grid\");\n\t}\n\tif (coord.z >= minz & coord.z <= maxz) {\n\t\tgridPoint.z = (int) Math.round(Math.abs(minz - coord.z)\n\t\t\t\t/ latticeConstant);\n\t} else {\n\t\tthrow new Exception(\n\t\t\t\t\"CDKGridError: Given coordinates are not in grid\");\n\t}\n\n\treturn gridPoint;\n}", "path": "plugins\\org.openscience.cdk.extra\\src\\org\\openscience\\cdk\\tools\\GridGenerator.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n * Sets the formal neighbour count of this atom.\n *\n * @param  count  The neighbour count\n *\n * @see    #getFormalNeighbourCount\n */\n", "func_signal": "public void setFormalNeighbourCount(Integer count)", "code": "{\n    this.formalNeighbourCount = count;\n\tnotifyChanged();\n}", "path": "plugins\\org.openscience.cdk.data\\src\\org\\openscience\\cdk\\AtomType.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n * Define this CMLReader to take the input from a java.io.Reader\n * class. Possible readers are (among others) StringReader and FileReader.\n * The given ReaderListener catches the events thrown to signal that a\n * a new molecule is read.\n *\n * @param input    Reader type input\n * @param listener ReaderListener that listens to newMolecule events. \n */\n", "func_signal": "public EventCMLReader(Reader input, IReaderListener listener,\n\t\t              IChemObjectBuilder builder)", "code": "{\n    this.init();\n    this.input = input;\n    this.cdo = new EventCMLHandler(this, builder);\n    this.builder = builder;\n    this.addChemObjectIOListener(listener);\n}", "path": "plugins\\org.openscience.cdk.io\\src\\org\\openscience\\cdk\\io\\iterator\\event\\EventCMLReader.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n * Returns an array of names for each descriptor value calculated.\n * <p/>\n * Many descriptors return multiple values. In general it is useful for the\n * descriptor to indicate the names for each value. When a descriptor creates\n * a <code>DescriptorValue</code> object, it should supply an array of names equal\n * in length to the number of descriptor calculated.\n * <p/>\n * In many cases, these names can be as simple as X1, X2, ..., XN where X is a prefix\n * and 1, 2, ..., N are the indices. On the other hand it is also possible to return\n * other arbitrary names, which should be documented in the Javadocs for the decsriptor\n * (e.g., the CPSA descriptor).\n * <p/>\n * Note that by default if a descriptor returns a single value (such as {@link org.openscience.cdk.qsar.descriptors.molecular.ALOGPDescriptor}\n * the return array will have a single element\n * <p/>\n * In case a descriptor creates a <code>DescriptorValue</code> object with no names, this\n * method will generate a set of names based on the {@link DescriptorSpecification} object\n * supplied at instantiation.\n *\n * @return An array of descriptor names.\n */\n", "func_signal": "@TestMethod(\"testGetNames\")\npublic String[] getNames()", "code": "{\n    if (descriptorNames == null || descriptorNames.length == 0) {\n        String title = specification.getImplementationTitle();\n        if (value instanceof BooleanResult ||\n                value instanceof DoubleResult ||\n                value instanceof IntegerResult) {\n            descriptorNames = new String[1];\n            descriptorNames[0] = title;\n        } else {\n            int ndesc = 0;\n            if (value instanceof DoubleArrayResult) {\n                ndesc = value.length();\n            } else if (value instanceof IntegerArrayResult) {\n                ndesc = value.length();\n            }\n            descriptorNames = new String[ndesc];\n            for (int i = 1; i < ndesc+1; i++) descriptorNames[i] = title+i;\n        }\n    }\n    return descriptorNames;\n}", "path": "plugins\\org.openscience.cdk.standard\\src\\org\\openscience\\cdk\\qsar\\DescriptorValue.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n *  Sets the the exact electron valency of the AtomType object.\n *\n * @param  valency  The new valency value\n * @see #getValency\n *\n */\n", "func_signal": "public void setValency(Integer valency)", "code": "{\n\tthis.electronValency = valency;\n\tnotifyChanged();\n}", "path": "plugins\\org.openscience.cdk.data\\src\\org\\openscience\\cdk\\AtomType.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n * Method initialise the given grid points with a value.\n */\n", "func_signal": "public double[][][] initializeGrid(double grid[][][], double value)", "code": "{\n\tfor (int i = 0; i < grid.length; i++) {\n\t\tfor (int j = 0; j < grid[0].length; j++) {\n\t\t\tfor (int k = 0; k < grid[0][0].length; k++) {\n\t\t\t\tgrid[k][j][i] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn grid;\n}", "path": "plugins\\org.openscience.cdk.extra\\src\\org\\openscience\\cdk\\tools\\GridGenerator.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n *  Sets the MaxBondOrder attribute of the AtomType object.\n *\n * @param  maxBondOrder  The new MaxBondOrder value\n     *\n     * @see       #getMaxBondOrder\n */\n", "func_signal": "public void setMaxBondOrder(IBond.Order maxBondOrder)", "code": "{\n\tthis.maxBondOrder = maxBondOrder;\n\tnotifyChanged();\n}", "path": "plugins\\org.openscience.cdk.data\\src\\org\\openscience\\cdk\\AtomType.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/* \n * construct a new reader from a Reader type object\n *\n * @param input reader from which input is read\n */\n", "func_signal": "public SMILESReader(Reader input)", "code": "{\n    this.input = new BufferedReader(input);\n    sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n}", "path": "plugins\\org.openscience.cdk.smiles\\src\\org\\openscience\\cdk\\io\\SMILESReader.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n *  Sets the hybridization of this atom.\n *\n * @param  hybridization  The hybridization\n *\n * @see    #getHybridization\n */\n", "func_signal": "public void setHybridization(IAtomType.Hybridization hybridization)", "code": "{\n    this.hybridization = hybridization;\n    notifyChanged();\n}", "path": "plugins\\org.openscience.cdk.data\\src\\org\\openscience\\cdk\\AtomType.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n * reads the content from a XYZ input. It can only return a\n * IChemObject of type ChemFile\n *\n * @param object class must be of type ChemFile\n *\n * @see IChemFile\n */\n", "func_signal": "@TestMethod(\"testReading,testReadingSmiFile_1,testReadingSmiFile_2,testReadingSmiFile_3\")\npublic IChemObject read(IChemObject object) throws CDKException", "code": "{\n    if (object instanceof IMoleculeSet) {\n        return readMoleculeSet((IMoleculeSet)object);\n    } else if (object instanceof IChemFile) {\n        IChemFile file = (IChemFile)object;\n        IChemSequence sequence = file.getBuilder().newChemSequence();\n        IChemModel chemModel = file.getBuilder().newChemModel();\n        chemModel.setMoleculeSet(readMoleculeSet(\n        \tfile.getBuilder().newMoleculeSet()\n        ));\n        sequence.addChemModel(chemModel);\n        file.addChemSequence(sequence);\n        return file;\n    } else {\n        throw new CDKException(\"Only supported is reading of MoleculeSet objects.\");\n    }\n}", "path": "plugins\\org.openscience.cdk.smiles\\src\\org\\openscience\\cdk\\io\\SMILESReader.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n * Method initialise the given grid points with a value.\n */\n", "func_signal": "public void initializeGrid(double value)", "code": "{\n\tfor (int i = 0; i < grid.length; i++) {\n\t\tfor (int j = 0; j < grid[0].length; j++) {\n\t\t\tfor (int k = 0; k < grid[0][0].length; k++) {\n\t\t\t\tgrid[k][j][i] = value;\n\t\t\t}\n\t\t}\n\t}\n}", "path": "plugins\\org.openscience.cdk.extra\\src\\org\\openscience\\cdk\\tools\\GridGenerator.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n *  Sets the formal charge of this atom.\n *\n * @param  charge  The formal charge\n *\n * @see    #getFormalCharge\n */\n", "func_signal": "public void setFormalCharge(Integer charge)", "code": "{\n\tthis.formalCharge = charge;\n\tnotifyChanged();\n}", "path": "plugins\\org.openscience.cdk.data\\src\\org\\openscience\\cdk\\AtomType.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n *  Private method that actually parses the input to read a ChemFile\n *  object.\n *\n * @param som The set of molecules that came fron the file\n * @return A ChemFile containing the data parsed from input.\n */\n", "func_signal": "private IMoleculeSet readMoleculeSet(IMoleculeSet som)", "code": "{\n    try {\n        String line = input.readLine().trim();\n        while (line != null) {\n            logger.debug(\"Line: \", line);\n\n            String[] tokens = line.split(\"[\\\\s\\\\t]+\",2);\n            if (tokens.length > 2) throw new Exception(\"Malformed line\");\n\n            String SMILES = tokens[0];\n            String name = null;\n            if (tokens.length == 2) name = tokens[1];\n\n            logger.debug(\"Line contains SMILES and name: \", SMILES, \" + \" , name);\n\n            try {\n                IMolecule molecule = sp.parseSmiles(SMILES);\n                som.addMolecule(molecule);\n                if (name != null) {\n                    molecule.setProperty(\"SMIdbNAME\", name);\n                }\n            } catch (Exception exception) {\n                logger.warn(\"This SMILES could not be parsed: \", SMILES);\n                logger.warn(\"Because of: \", exception.getMessage());\n                logger.debug(exception);\n            }\n            if (input.ready()) { line = input.readLine(); } else { line = null; }\n        }\n    } catch (Exception exception) {\n        logger.error(\"Error while reading SMILES line: \", exception.getMessage());\n        logger.debug(exception);\n    }\n    return som;\n}", "path": "plugins\\org.openscience.cdk.smiles\\src\\org\\openscience\\cdk\\io\\SMILESReader.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n * Method transforms the grid into pmesh format. Only grid points\n * with specific value defined with cutoff are considered.\n * <pre>\n * cutoff <0, the values considered must be <=cutoff\n * cutoff >0, the values considered must be >=cutoff\n * </pre>\n */\n", "func_signal": "public void writeGridInPmeshFormat(String outPutFileName, double cutOff)\n\t\tthrows IOException", "code": "{\n\tBufferedWriter writer = new BufferedWriter(new FileWriter(\n\t\t\toutPutFileName + \".pmesh\"));\n\tboolean negative = false;\n\tif (cutOff < 0) {\n\t\tnegative = true;\n\t} else {\n\t\tnegative = false;\n\t}\n\tint numberOfGridPoints = 0;\n\tfor (int z = 0; z < grid[0][0].length; z++) {\n\t\tfor (int y = 0; y < grid[0].length; y++) {\n\t\t\tfor (int x = 0; x < grid.length; x++) {\n\t\t\t\tif (negative) {\n\t\t\t\t\tif (grid[x][y][z] <= cutOff) {\n\t\t\t\t\t\tnumberOfGridPoints++;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (grid[x][y][z] >= cutOff) {\n\t\t\t\t\t\tnumberOfGridPoints++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\twriter.write(numberOfGridPoints + \"\\n\");\n\tfor (int z = 0; z < grid[0][0].length; z++) {\n\t\tfor (int y = 0; y < grid[0].length; y++) {\n\t\t\tfor (int x = 0; x < grid.length; x++) {\n\t\t\t\tPoint3d coords = getCoordinatesFromGridPoint(new Point3d(x,\n\t\t\t\t\t\ty, z));\n\t\t\t\tif (negative) {\n\t\t\t\t\tif (grid[x][y][z] <= cutOff) {\n\t\t\t\t\t\twriter.write(coords.x + \"\\t\" + coords.y + \"\\t\"\n\t\t\t\t\t\t\t\t+ coords.z + \"\\n\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (grid[x][y][z] >= cutOff) {\n\t\t\t\t\t\twriter.write(coords.x + \"\\t\" + coords.y + \"\\t\"\n\t\t\t\t\t\t\t\t+ coords.z + \"\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\twriter.close();\n}", "path": "plugins\\org.openscience.cdk.extra\\src\\org\\openscience\\cdk\\tools\\GridGenerator.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n * Main method creates a grid between given boundaries (dimensions).\n * The grid my be extended over the given boundaries with the \n * variable extendGrid.\n */\n", "func_signal": "public void generateGrid()", "code": "{\n\tminx = minx - extendGrid;\n\tmaxx = maxx + extendGrid;\n\tminy = miny - extendGrid;\n\tmaxy = maxy + extendGrid;\n\tminz = minz - extendGrid;\n\tmaxz = maxz + extendGrid;\n\n\tdim[0] = (int) Math.round(Math.abs(maxx - minx) / latticeConstant);\n\tdim[1] = (int) Math.round(Math.abs(maxy - miny) / latticeConstant);\n\tdim[2] = (int) Math.round(Math.abs(maxz - minz) / latticeConstant);\n\n\tgrid = new double[dim[0] + 1][dim[1] + 1][dim[2] + 1];\n}", "path": "plugins\\org.openscience.cdk.extra\\src\\org\\openscience\\cdk\\tools\\GridGenerator.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n * @param initialValue used as initial value for the grid points\n */\n", "func_signal": "public GridGenerator(double min, double max, double initialValue)", "code": "{\n\tsetDimension(min, max);\n\tgenerateGrid();\n\tinitializeGrid(initialValue);\n}", "path": "plugins\\org.openscience.cdk.extra\\src\\org\\openscience\\cdk\\tools\\GridGenerator.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n * Compares a atom type with this atom type.\n *\n * @param  object Object of type AtomType\n * @return        true if the atom types are equal\n */\n", "func_signal": "public boolean compare(Object object)", "code": "{\n    if (!(object instanceof IAtomType)) {\n        return false;\n    }\n    if (!super.compare(object)) {\n        return false;\n    }\n    AtomType type = (AtomType) object;\n    return (getAtomTypeName() == type.getAtomTypeName()) &&\n            (maxBondOrder == type.maxBondOrder) &&\n            (bondOrderSum == type.bondOrderSum);\n}", "path": "plugins\\org.openscience.cdk.data\\src\\org\\openscience\\cdk\\AtomType.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n * Method calculates coordiantes from a given grid array position.\n */\n", "func_signal": "public Point3d getCoordinatesFromGridPoint(int gridPoint)", "code": "{\n\tint dimCounter = 0;\n\tPoint3d point = new Point3d(0, 0, 0);\n\tfor (int z = 0; z < grid[0][0].length; z++) {\n\t\tfor (int y = 0; y < grid[0].length; y++) {\n\t\t\tfor (int x = 0; x < grid.length; x++) {\n\t\t\t\tif (dimCounter == gridPoint) {\n\t\t\t\t\tpoint.x = minx + latticeConstant * x;\n\t\t\t\t\tpoint.y = miny + latticeConstant * y;\n\t\t\t\t\tpoint.z = minz + latticeConstant * z;\n\t\t\t\t\treturn point;\n\t\t\t\t}\n\t\t\t\tdimCounter++;\n\t\t\t}\n\t\t}\n\t}\n\treturn point;\n}", "path": "plugins\\org.openscience.cdk.extra\\src\\org\\openscience\\cdk\\tools\\GridGenerator.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n * Starts the reading of the CML file. Whenever a new Molecule is read,\n * a event is thrown to the ReaderListener.\n */\n", "func_signal": "public void process() throws CDKException", "code": "{\n    logger.debug(\"Started parsing from input...\");\n    try {\n        parser.setFeature(\"http://xml.org/sax/features/validation\", false);\n        logger.info(\"Deactivated validation\");\n    } catch (SAXException e) {\n        logger.warn(\"Cannot deactivate validation.\");\n    }\n    parser.setContentHandler(new EventCMLHandler(this, builder));\n    parser.setEntityResolver(new CMLResolver());\n    parser.setErrorHandler(new CMLErrorHandler());\n    try {\n        logger.debug(\"Parsing from Reader\");\n        parser.parse(new InputSource(input));\n    } catch (IOException e) {\n        String error = \"Error while reading file: \" + e.getMessage();\n        logger.error(error);\n        logger.debug(e);\n        throw new CDKException(error, e);\n    } catch (SAXParseException saxe) {\n        SAXParseException spe = (SAXParseException)saxe;\n        String error = \"Found well-formedness error in line \" + spe.getLineNumber();\n        logger.error(error);\n        logger.debug(saxe);\n        throw new CDKException(error, saxe);\n    } catch (SAXException saxe) {\n        String error = \"Error while parsing XML: \" + saxe.getMessage();\n        logger.error(error);\n        logger.debug(saxe);\n        throw new CDKException(error, saxe);\n    }\n}", "path": "plugins\\org.openscience.cdk.io\\src\\org\\openscience\\cdk\\io\\iterator\\event\\EventCMLReader.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "/**\n\t * Constructor for the AtomType object.\n *\n * Defaults to a zero formal charge. All\n * other fields are set to {@link org.openscience.cdk.CDKConstants.UNSET}.\n *\n * @param elementSymbol  Symbol of the atom\n\t */\n", "func_signal": "public AtomType(String elementSymbol)", "code": "{\n\t\tsuper(elementSymbol);\n\t\tthis.formalCharge = 0;\n\t}", "path": "plugins\\org.openscience.cdk.data\\src\\org\\openscience\\cdk\\AtomType.java", "repo_name": "egonw/org.openscience.cdk", "stars": 6, "license": "None", "language": "java", "size": 15740}
{"docstring": "// Power functions\n", "func_signal": "private static int sqrt(LuaCallFrame callFrame, int nArguments)", "code": "{\n\tBaseLib.luaAssert(nArguments >= 1, \"Not enough arguments\");\n\tdouble x = LuaState.fromDouble(callFrame.get(0));\n\tcallFrame.push(LuaState.toDouble(Math.sqrt(x)));\n\treturn 1;\n}", "path": "src\\se\\krka\\kahlua\\stdlib\\MathLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "// implementation of asin\n", "func_signal": "public static double asin(double arg)", "code": "{\n    double temp;\n    int sign;\n\n    sign = 0;\n    if(arg < 0)\n\t    {\n\t\targ = -arg;\n\t\tsign++;\n\t    }\n    if(arg > 1) {\n\t\t\treturn Double.NaN;\n\t\t}\n    temp = Math.sqrt(1 - arg*arg);\n    if(arg > 0.7) {\n\t\t\ttemp = PIO2 - atan(temp/arg);\n\t\t} else {\n\t\t\ttemp = atan(arg/temp);\n\t\t}\n    if(sign > 0) {\n\t\t\ttemp = -temp;\n\t\t}\n    return temp;\n}", "path": "src\\se\\krka\\kahlua\\stdlib\\MathLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "/*\n * End of stack code\n */\n", "func_signal": "public final void closeUpvalues(int closeIndex)", "code": "{\n\t// close all open upvalues\n\t\n\tint loopIndex = liveUpvalues.size();\n\twhile (--loopIndex >= 0) {\n\t\tUpValue uv = (UpValue) liveUpvalues.elementAt(loopIndex);\n\t\tif (uv.index < closeIndex) {\n\t\t\treturn;\n\t\t}\n\t\tuv.value = objectStack[uv.index];\n\t\tuv.thread = null;\n\t\tliveUpvalues.removeElementAt(loopIndex);\n\t}\n}", "path": "src\\se\\krka\\kahlua\\vm\\LuaThread.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "/**\n * Rounds to keep <em>precision</em> decimals. Rounds towards even numbers.\n * @param x the number to round\n * @param precision the precision to round to. A precision of 3 will for instance round 1.65432 to 1.654\n * @return the rounded number\n */\n", "func_signal": "public static double roundToPrecision(double x, int precision)", "code": "{\n\tdouble roundingOffset = MathLib.ipow(10, precision);\n\treturn round(x * roundingOffset) / roundingOffset;\n}", "path": "src\\se\\krka\\kahlua\\stdlib\\MathLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "// implementation of atan2\n", "func_signal": "public static double atan2(double arg1, double arg2)", "code": "{\n\t// both are 0 or arg1 is +/- inf\n\tif(arg1+arg2 == arg1) {\n\t\tif(arg1 > 0) {\n\t\t\t\treturn PIO2;\n\t\t\t}\n\t\tif(arg1 < 0) {\n\t\t\t\treturn -PIO2;\n\t\t\t}\n\t\treturn 0;\n\t}\n\targ1 = atan(arg1/arg2);\n\tif(arg2 < 0) {\n\t\tif(arg1 <= 0) {\n\t\t\t\treturn arg1 + Math.PI;\n\t\t\t}\n\t\treturn arg1 - Math.PI;\n\t}\n\treturn arg1;\n}", "path": "src\\se\\krka\\kahlua\\stdlib\\MathLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "/*\n * Simple implementation of the taylor expansion of\n * ln(1 - t) = t - t^2/2 -t^3/3 - ... - t^n/n + ...\n */\n", "func_signal": "public static double ln(double x)", "code": "{\n\tboolean negative = false;\n\n\tif (x < 0) {\n    \t\treturn Double.NaN;\n    \t}\n    \tif (x == 0) {\n    \t\treturn Double.NEGATIVE_INFINITY;\n    \t}\n    \tif (Double.isInfinite(x)) {\n    \t\treturn Double.POSITIVE_INFINITY;\n    \t}\n    \tif (x < 1) {\n    \t\tnegative = true;\n    \t\tx = 1 / x;\n    \t}\n    \tint multiplier = 1;\n\n    \t // x must be between 0 and 2 - close to 1 means faster taylor expansion\n    \twhile (x >= 1.1) {\n    \t\tmultiplier *= 2;\n    \t\tx = Math.sqrt(x);\n    \t}\n    \tdouble t = 1 - x;\n    \tdouble tpow = t;\n    \tint divisor = 1;\n    \tdouble result = 0;\n\n    \tdouble toSubtract;\n    \twhile (Math.abs((toSubtract = tpow / divisor)) > EPS) {\n    \t\tresult -= toSubtract;\n    \t\ttpow *= t;\n    \t\tdivisor++;\n    \t}\n    \tdouble res = multiplier * result;\n    \tif (negative) {\n    \t\treturn -res;\n    \t}\n    \treturn res;\n    }", "path": "src\\se\\krka\\kahlua\\stdlib\\MathLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "/* Thanks rici lake for ipow-implementation */\n", "func_signal": "public static double ipow(double base, int exponent)", "code": "{\n\t\tboolean inverse = false;\n\t\tif (MathLib.isNegative(exponent)) {\n\t\t\texponent = -exponent;\n\t\t\tinverse = true;\n\t\t}\n\t\tdouble b = 1;\n\t\tfor (b = (exponent & 1) != 0 ? base : 1, exponent >>= 1; exponent != 0; exponent >>= 1) {\n\t\t\tbase *= base;\n\t\t\tif ((exponent & 1) != 0) {\n\t\t\t\tb *= base;\n\t\t\t}\n\t\t}\n\t\tif (inverse) {\n\t\t\treturn 1 / b;\n\t\t}\n\t\treturn b;\n}", "path": "src\\se\\krka\\kahlua\\stdlib\\MathLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "// Hyperbolic functions\n", "func_signal": "private static int cosh(LuaCallFrame callFrame, int nArguments)", "code": "{\n\tBaseLib.luaAssert(nArguments >= 1, \"Not enough arguments\");\n\tdouble x = LuaState.fromDouble(callFrame.get(0));\n\n\tdouble exp_x = exp(x);\n\tdouble res = (exp_x + 1 / exp_x) * 0.5;\n\n\tcallFrame.push(LuaState.toDouble(res));\n\treturn 1;\n}", "path": "src\\se\\krka\\kahlua\\stdlib\\MathLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "// Random functions\n", "func_signal": "private int random(LuaCallFrame callFrame, int nArguments)", "code": "{\n\tRandom random = callFrame.thread.state.random;\n\tif (nArguments == 0) {\n\t\tcallFrame.push(LuaState.toDouble(random.nextDouble()));\n\t\treturn 1;\n\t}\n\n\tdouble tmp = LuaState.fromDouble(callFrame.get(0));\n\tint m = (int) tmp;\n\tint n;\n\tif (nArguments == 1) {\n\t\tn = m;\n\t\tm = 1;\n\t} else {\n\t\ttmp = LuaState.fromDouble(callFrame.get(1));\n\t\tn = (int) tmp;\n\t}\n\tcallFrame.push(LuaState.toDouble(m + random.nextInt(n - m + 1)));\n\n\treturn 1;\n}", "path": "src\\se\\krka\\kahlua\\stdlib\\MathLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "/**\n * Rounds towards even numbers\n * @param x\n */\n", "func_signal": "public static double round(double x)", "code": "{\n\tif (x < 0) {\n\t\treturn -round(-x);\n\t}\n\tx += 0.5;\n\tdouble x2 = Math.floor(x);\n\tif (x2 == x) {\n\t\treturn x2 - ((long) x2 & 1); \n\t}\n\treturn x2;\n}", "path": "src\\se\\krka\\kahlua\\stdlib\\MathLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "// Trig functions\n", "func_signal": "private static int deg(LuaCallFrame callFrame, int nArguments)", "code": "{\n\tBaseLib.luaAssert(nArguments >= 1, \"Not enough arguments\");\n\tdouble x = LuaState.fromDouble(callFrame.get(0));\n\tcallFrame.push(LuaState.toDouble(Math.toDegrees(x)));\n\treturn 1;\n}", "path": "src\\se\\krka\\kahlua\\stdlib\\MathLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "/*\n * Simple implementation of the taylor expansion of\n * exp(x) = 1 + x + x^2/2 + x^3/6 + ...\n */\n", "func_signal": "public static double exp(double x)", "code": "{\n    \tdouble x_acc = 1;\n    \tdouble div = 1;\n\n    \tdouble res = 0;\n    \twhile (Math.abs(x_acc) > EPS) {\n    \t\tres = res + x_acc;\n\n    \t\tx_acc *= x;\n    \t\tx_acc /= div;\n    \t\tdiv++;\n    \t}\n    \treturn res;\n    }", "path": "src\\se\\krka\\kahlua\\stdlib\\MathLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "// NOTE: known weakness - will crash if a string is longer than 2^16 - 1\n", "func_signal": "private static String readLuaString(DataInputStream in, int size_t, boolean littleEndian) throws IOException", "code": "{\n\tlong len = 0;\n\n\tif (size_t == 4) {\n\t\tlen = toInt(in.readInt(), littleEndian);\n\t} else if (size_t == 8) {\n\t\tlen = toLong(in.readLong(), littleEndian);\n\t} else {\n\t\tloadAssert(false);\n\t}\n\n\tif (len == 0) {\n\t\treturn null;\n\t}\n\n\tlen = len - 1;\n\n\t// Change this to a proper string loader if you need longer strings.\n\t// The extra code needed seems unnecessary for the common use cases.\n\tloadAssert(len < 0x10000);\n\n\tint iLen = (int) len;\n\tbyte[] stringData = new byte[2 + 1 + iLen];\n\n\tstringData[0] = (byte) ((iLen >> 8) & 0xff);\n\tstringData[1] = (byte) (iLen & 0xff);\n\n\t// Remember to read the trailing 0 too\n\tint bytesRead = in.read(stringData, 2, iLen + 1);\n\tloadAssert(bytesRead == iLen + 1);\n\tloadAssert(stringData[2 + iLen] == 0);\n\n\tDataInputStream dis = new DataInputStream(new ByteArrayInputStream(stringData));\n\tString s = dis.readUTF();\n\tdis.close();\n\n\treturn s;\n}", "path": "src\\se\\krka\\kahlua\\vm\\LuaPrototype.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "/**\n * \n * @param callFrame\n * @param n\n * @param type must be \"string\" or \"number\" or one of the other built in types. Note that this parameter must be interned!\n * It's not valid to call it with new String(\"number\").  Use null if you don't care which type or expect \n * more than one type for this argument.\n * @param function name of the function that calls this. Only for pretty exceptions.\n * @return variable with index n on the stack, returned as type \"type\".\n */\n", "func_signal": "public static Object getArg(LuaCallFrame callFrame, int n, String type,\n\t\t\tString function)", "code": "{\n\tObject o = callFrame.get(n - 1);\n\tif (o == null) {\n\t\tthrow new RuntimeException(\"bad argument #\" + n + \"to '\" + function +\n\t\t\t\"' (\" + type + \" expected, got no value)\");\n\t}\n\t// type coercion\n\tif (type == TYPE_STRING) {\n\t\tString res = rawTostring(o);\n\t\tif (res != null) {\n\t\t\treturn res;\n\t\t}\n\t} else if (type == TYPE_NUMBER) {\n\t\tDouble d = rawTonumber(o);\n\t\tif (d != null) {\n\t\t\treturn d;\n\t\t}\n\t\tthrow new RuntimeException(\"bad argument #\" + n + \" to '\" + function +\n\t\t\"' (number expected, got string)\");\n\t}\n\tif (type != null) {\n\t\t// type checking\n\t\tString isType = type(o);\n\t\tluaAssert(type == isType,\n\t\t\t\t\"bad argument #\" + n + \" to '\" + function +\"' (\" + type +\n\t\t\t\t\" expected, got \" + isType + \")\");\n\t}\n\treturn o;\n\n}", "path": "src\\se\\krka\\kahlua\\stdlib\\BaseLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "// implementation of atan\n", "func_signal": "public static double atan(double arg)", "code": "{\n    if(arg > 0) {\n\t\t\treturn msatan(arg);\n\t\t}\n    return -msatan(-arg);\n}", "path": "src\\se\\krka\\kahlua\\stdlib\\MathLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "// reduce\n", "func_signal": "private static double mxatan(double arg)", "code": "{\n    double argsq, value;\n\n    argsq = arg*arg;\n    value = ((((p4*argsq + p3)*argsq + p2)*argsq + p1)*argsq + p0);\n    value = value/(((((argsq + q4)*argsq + q3)*argsq + q2)*argsq + q1)*argsq + q0);\n    return value*arg;\n}", "path": "src\\se\\krka\\kahlua\\stdlib\\MathLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "// For debugging purposes only\n/*\npublic static void main(String[] args) {\n\tLuaState s = new LuaState();\n\ttry {\n\t\tLuaClosure closure = LuaPrototype.loadByteCode(new FileInputStream(\"coroutine.lbc\"), s.getEnvironment());\n\t\ts.pcall(closure, null);\n\t} catch (FileNotFoundException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n}\n*/\n", "func_signal": "public final void reset()", "code": "{\n\tcurrentThread = new LuaThread(this, new LuaTable());\n\n\tuserdataMetatables = new LuaTable();\n\tgetEnvironment().rawset(\"_G\", getEnvironment());\n\tgetEnvironment().rawset(\"_VERSION\", \"Lua 5.1 for CLDC 1.1\");\n\t\n\tBaseLib.register(this);\n\tStringLib.register(this);\n\tMathLib.register(this);\n\tCoroutineLib.register(this);\n\tOsLib.register(this);\n\n\tLuaClosure closure = loadByteCodeFromResource(\"stdlib\", getEnvironment());\n\tcall(closure, null, null, null);\n}", "path": "src\\se\\krka\\kahlua\\vm\\LuaState.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "// reduce\n", "func_signal": "private static double msatan(double arg)", "code": "{\n    if(arg < sq2m1) {\n\t\t\treturn mxatan(arg);\n\t\t}\n    if(arg > sq2p1) {\n\t\t\treturn PIO2 - mxatan(1/arg);\n\t\t}\n\treturn PIO2/2 + mxatan((arg-1)/(arg+1));\n}", "path": "src\\se\\krka\\kahlua\\stdlib\\MathLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "/**\n * converts the relevant fields in the given luatable to a Date object.\n * @param time LuaTable with entries for year month and day, and optionally hour/min/sec\n * @return a date object representing the date frim the luatable.\n */\n", "func_signal": "public static Date getDateFromTable(LuaTable time)", "code": "{\n\tCalendar c = Calendar.getInstance(tzone);\n\tc.set(Calendar.YEAR,(int)LuaState.fromDouble(time.rawget(YEAR)));\n\tc.set(Calendar.MONTH,(int)LuaState.fromDouble(time.rawget(MONTH))-1);\n\tc.set(Calendar.DAY_OF_MONTH,(int)LuaState.fromDouble(time.rawget(DAY)));\n\tObject hour = time.rawget(HOUR);\n\tObject minute = time.rawget(MIN);\n\tObject seconds = time.rawget(SEC);\n\t//Object isDst = time.rawget(ISDST);\n\tif (hour != null) {\n\t\tc.set(Calendar.HOUR_OF_DAY,(int)LuaState.fromDouble(hour));\n\t} else {\n\t\tc.set(Calendar.HOUR_OF_DAY, 0);\n\t}\n\tif (minute != null) {\n\t\tc.set(Calendar.MINUTE,(int)LuaState.fromDouble(minute));\n\t} else {\n\t\tc.set(Calendar.MINUTE, 0);\n\t}\n\tif (seconds != null) {\n\t\tc.set(Calendar.SECOND,(int)LuaState.fromDouble(seconds));\n\t} else {\n\t\tc.set(Calendar.SECOND, 0);\n\t}\n\t// TODO: daylight savings support(is it possible?)\n\treturn c.getTime();\n}", "path": "src\\se\\krka\\kahlua\\stdlib\\OsLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "// implementation of acos\n", "func_signal": "public static double acos(double arg)", "code": "{\n    if(arg > 1 || arg < -1) {\n\t\t\treturn Double.NaN;\n\t\t}\n    return PIO2 - asin(arg);\n}", "path": "src\\se\\krka\\kahlua\\stdlib\\MathLib.java", "repo_name": "fab13n/kahmetalua", "stars": 4, "license": "None", "language": "java", "size": 303}
{"docstring": "/**\n * Returns a collection of games in the user's headquarters that are not\n * finished\n * \n * @return a collection of games in the user's headquarters that are not\n *         finished\n * @throws IOException\n * @throws JDOMException\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic Collection<HqGame> headquarterGames() throws IOException,\n\t\tJDOMException", "code": "{\n\tString xml = httpRequest(apiUrlPrefix + \"headquarters\", username,\n\t\t\ttoken, null);\n\tSAXBuilder builder = new SAXBuilder();\n\tDocument doc = builder.build(new StringReader(xml));\n\tCollection<HqGame> ret = new LinkedList<HqGame>();\n\tCollection<Element> games = doc.getRootElement().getChildren(\"game\");\n\tfor (Element gameEle : games) {\n\t\tif (!gameEle.getChildText(\"state\").equals(\"finished\")) {\n\t\t\tint id = Integer.parseInt(gameEle.getChildText(\"id\"));\n\t\t\tElement gameEleWithMoreInfo = getGameXmlElement(id);\n\t\t\tHqGame g = new HqGame();\n\t\t\tg.parseHqXmlElement(gameEle);\n\t\t\t// a little redundant because some fields are overwritten with\n\t\t\t// the same info, but it's necessary to get the whole picture\n\t\t\tg.parseXmlElement(gameEleWithMoreInfo);\n\t\t\tret.add(g);\n\t\t}\n\t}\n\treturn ret;\n}", "path": "src\\weewarai\\communication\\Eliza.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * Returns whether this unit can exert zone of control on the given unit. It\n * can when 1) this unit can attack the given unit and 2) this unit's\n * minimum range against the given unit is greater than 1\n * \n * @param unit\n *            the unit to be tested against\n * @return whether this unit can exert ZoC on the given unit\n */\n", "func_signal": "public boolean canExertZocOn(Unit unit)", "code": "{\n\treturn Specs.unitAttack.get(getType()).get(unit.getUnitType()) > 0\n\t\t\t&& Specs.unitMinRange.get(getType()).get(unit.getUnitType()) == 1;\n}", "path": "src\\weewarai\\model\\Unit.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * Returns the attack coordinates of a unit from a particular coordinate.\n * Also performs random check against the Eliza implementation to make sure\n * the local version is accurate.\n * \n * @param eliza\n * @param game\n * @param playerName\n * @param unit\n * @param location\n * @return the attack coordinates of a unit from a particular coordinate\n */\n", "func_signal": "public static List<Coordinate> getAttackCoords(Eliza eliza, Game game,\n\t\tString playerName, Unit unit, Coordinate location)", "code": "{\n\n\tFaction myFaction = game.getFactionByPlayerName(playerName);\n\tString type = unit.getType();\n\tList<Coordinate> elizaCoords = null;\n\n\t// only check a small sample of cases for errors\n\tint randomChoice = Util.dice(100);\n\tif (randomChoice <= checkAttackCoordsRatio) {\n\t\ttry {\n\t\t\telizaCoords = eliza.getAttackCoords(game.getId(), location,\n\t\t\t\t\ttype);\n\t\t} catch (JDOMException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tList<Coordinate> localCoords = getAttackCoords(game, myFaction, unit,\n\t\t\tlocation);\n\n\tif (elizaCoords != null) {\n\t\tCollections.sort(localCoords, comp);\n\t\tCollections.sort(elizaCoords, comp);\n\t\tif (!(localCoords.equals(elizaCoords))) {\n\t\t\tDebug.print(\"getAttackCoords is broken\");\n\t\t\tDebug.print(\"Location: \" + location);\n\t\t\tDebug.print(\"Eliza: \" + elizaCoords);\n\t\t\tDebug.print(\"Local: \" + localCoords);\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"getAttackCoords new implementation is broken\");\n\t\t}\n\t}\n\n\treturn localCoords;\n}", "path": "src\\weewarai\\util\\ElizaLocal.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * @return the shortest distance from the source to the given c, or\n *         {@link MovementPath#INFINITE_DISTANCE} if there is no route to\n *         the destination.\n */\n", "func_signal": "public int getShortestDistance(Coordinate c)", "code": "{\n\tInteger d = shortestDistances.get(c);\n\treturn (d == null) ? INFINITE_DISTANCE : d;\n}", "path": "src\\weewarai\\model\\MovementPath.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * Compute new shortest distance for neighboring nodes and update if a\n * shorter distance is found.\n * \n * @param u\n *            the node\n */\n", "func_signal": "private void relaxNeighbors(Coordinate u, int maxMoveCost,\n\t\tboolean ignoreUnits)", "code": "{\n\tFaction unitFaction = unit.getFaction();\n\tList<Unit> myUnits = unitFaction.getUnits();\n\n\tList<Coordinate> circle1 = u.getCircle(1);\n\tfor (Coordinate v : circle1) {\n\t\t// if outside the map or node has already settled\n\t\tTerrain terrain = wmap.get(v);\n\t\tif (terrain == null || isSettled(v)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tint nextStepDistance = wmap.getDistanceForUnitType(u, v, unit);\n\t\tint shortDist = getShortestDistance(u) + nextStepDistance;\n\n\t\t// a bit redundant && check\n\t\tif ((shortDist < UNPASSABLE) && (nextStepDistance < UNPASSABLE)) {\n\t\t\tUnit unitOnWay = game.getUnit(v);\n\t\t\tif ((unitOnWay != null) && !ignoreUnits) {\n\t\t\t\tif (!myUnits.contains(unitOnWay)) {\n\t\t\t\t\tif (unit.canExertZocOn(unitOnWay)) {\n\t\t\t\t\t\tshortDist = UNPASSABLE;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// subs can not pass enemy bases\n\t\t\tif (unit.cannotEnterEnemyHarbor()) {\n\t\t\t\tFaction terrainOwner = game.getTerrainOwner(u);\n\t\t\t\tif ((terrainOwner != null)\n\t\t\t\t\t\t&& (!terrainOwner.equals(unitFaction))) {\n\t\t\t\t\tshortDist = UNPASSABLE;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// ZOC - if v next to a unit and u was next to a unit\n\t\t\tif (!ignoreUnits\n\t\t\t\t\t&& (isNextToEnemyUnitThatCanExertZOC(v, unit, myUnits))) {\n\t\t\t\tif (maxMoveCost >= shortDist) {\n\t\t\t\t\tshortDist = Math.max(shortDist, LAST_MOVE);\n\t\t\t\t} else {\n\t\t\t\t\tshortDist = UNPASSABLE;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// if there is a real step possible\n\t\tif (shortDist < UNPASSABLE) {\n\t\t\tif (shortDist < getShortestDistance(v)) {\n\t\t\t\t// if (shortDist < maxMoveCost)\n\t\t\t\t{\n\t\t\t\t\t// assign new shortest distance and mark unsettled\n\t\t\t\t\tsetShortestDistance(v, shortDist);\n\n\t\t\t\t\t// assign predecessor in shortest path\n\t\t\t\t\tsetPredecessor(v, u);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\weewarai\\model\\MovementPath.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/** Constructor. */\n", "func_signal": "public MovementPath(WeewarMap wmap, Game detailed, Unit unit)", "code": "{\n\tthis.wmap = wmap;\n\tthis.unit = unit;\n\tthis.game = detailed;\n}", "path": "src\\weewarai\\model\\MovementPath.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * Returns the movement coordinates of a unit from a particular coordinate.\n * Also performs random check against the Eliza implementation to make sure\n * the local version is accurate.\n * \n * @param eliza\n * @param game\n * @param wmap\n * @param playerName\n * @param unit\n * @param location\n * @return the movement coordinates of a unit from a particular coordinate\n */\n", "func_signal": "public static List<Coordinate> getMovementCoords(Eliza eliza, Game game,\n\t\tWeewarMap wmap, String playerName, Unit unit, Coordinate location)", "code": "{\n\n\tFaction myFaction = game.getFactionByPlayerName(playerName);\n\tString type = unit.getType();\n\tList<Coordinate> elizaCoords = null;\n\n\t// only check a small sample of cases for errors\n\tint randomChoice = Util.dice(100);\n\tif (randomChoice <= checkAttackCoordsRatio) {\n\t\ttry {\n\t\t\telizaCoords = eliza.getMovementCoords(game.getId(), location,\n\t\t\t\t\ttype);\n\t\t} catch (JDOMException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tList<Coordinate> localCoords = getMovementCoords(game, wmap, myFaction,\n\t\t\tunit, location);\n\n\tif ((elizaCoords != null)) {\n\t\tCollections.sort(localCoords, comp);\n\t\tCollections.sort(elizaCoords, comp);\n\t\tif (!(localCoords.equals(elizaCoords))) {\n\t\t\t// eliza is broken for secondary move count\n\t\t\tif (unit.getMoveCount() == 0) {\n\t\t\t\tDebug.print(\"getMovementCoords is broken\");\n\t\t\t\tDebug.print(\"Location = \" + location);\n\t\t\t\tDebug.print(\"Local = \" + localCoords);\n\t\t\t\tDebug.print(\"Eliza = \" + elizaCoords);\n\n\t\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\t\"getMovementCoords new implementation is broken\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn localCoords;\n}", "path": "src\\weewarai\\util\\ElizaLocal.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * Set the new shortest distance for the given node, and re-balance the\n * queue according to new shortest distances.\n * \n * @param c\n *            the node to set\n * @param distance\n *            new shortest distance value\n */\n", "func_signal": "private void setShortestDistance(Coordinate c, int distance)", "code": "{\n\t/*\n\t * This crucial step ensures no duplicates are created in the queue when\n\t * an existing unsettled node is updated with a new shortest distance.\n\t * Note: this operation takes linear time. If performance is a concern,\n\t * consider using a TreeSet instead instead of a PriorityQueue.\n\t * TreeSet.remove() performs in logarithmic time, but the PriorityQueue\n\t * is simpler. (An earlier version of this class used a TreeSet.)\n\t */\n\tunsettledNodes.remove(c);\n\n\t/*\n\t * Update the shortest distance.\n\t */\n\tshortestDistances.put(c, distance);\n\n\t/*\n\t * Re-balance the queue according to the new shortest distance found\n\t * (see the comparator the queue was initialized with).\n\t */\n\tunsettledNodes.add(c);\n}", "path": "src\\weewarai\\model\\MovementPath.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * Creates a new Game object with the game state information from the eliza\n * API of the game with the given id\n * \n * @param id\n *            the game id\n * @return a new Game with complete game state information from the eliza\n *         API\n * @throws IOException\n * @throws JDOMException\n */\n", "func_signal": "public Game getGameState(int id) throws IOException, JDOMException", "code": "{\n\tDocument doc = getGameStateXML(id);\n\tGame g = new Game(username);\n\tg.parseXmlElement(doc.getRootElement(), true);\n\treturn g;\n}", "path": "src\\weewarai\\communication\\Eliza.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "// // Send calls to API ////\n", "func_signal": "public boolean acceptInvite(int id) throws IOException", "code": "{\n\tString requestXML = \"<weewar game=\\\"\" + id\n\t\t\t+ \"\\\"><acceptInvitation/></weewar>\";\n\tString result = elizaRequest(requestXML);\n\treturn result.contains(\"<ok/>\");\n}", "path": "src\\weewarai\\communication\\Eliza.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/** How much does it cost to move from one location to another. */\n", "func_signal": "public static int calculateMovementCost(List<Coordinate> path,\n\t\tWeewarMap wmap2, Unit unit2)", "code": "{\n\tint movementCost = 0;\n\n\tCoordinate lastStep = null;\n\tfor (Coordinate step : path) {\n\t\tif (lastStep != null) {\n\t\t\tmovementCost = movementCost\n\t\t\t\t\t+ wmap2.getDistanceForUnitType(lastStep, step, unit2);\n\t\t}\n\t\tlastStep = step;\n\t}\n\n\treturn movementCost;\n}", "path": "src\\weewarai\\model\\MovementPath.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * Sorts a HashMap by its values. (A SortedMap can only be sorted by its\n * keys) I got this algorithm from\n * http://www.theserverside.com/discussions/thread.tss?thread_id=29569, by\n * Tim Ringwood\n */\n", "func_signal": "private LinkedHashMap<String, Integer> sortHashMapByValues(\n\t\tMap<String, Integer> passedMap, boolean ascending)", "code": "{\n\n\tList<String> mapKeys = new ArrayList<String>(passedMap.keySet());\n\tList<Integer> mapValues = new ArrayList<Integer>(passedMap.values());\n\tCollections.sort(mapKeys);\n\tCollections.sort(mapValues);\n\n\tif (!ascending) {\n\t\tCollections.reverse(mapValues);\n\t}\n\n\tLinkedHashMap<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n\n\tfor (Integer val : mapValues) {\n\t\tfor (String key : mapKeys) {\n\t\t\tif (passedMap.get(key) == val) {\n\t\t\t\tpassedMap.remove(key);\n\t\t\t\tmapKeys.remove(key);\n\t\t\t\tsortedMap.put(key, val);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn sortedMap;\n}", "path": "src\\weewarai\\stats\\FactionStats.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * Returns a String representation of a Unit in the form of: Trooper (6) on\n * [15,14], not finished (ai_botbot)\n * \n * @return a String representation of a Unit\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\treturn type + \"(\" + quantity + \") on \" + coordinate + \", \"\n\t\t\t+ (finished ? \"\" : \"not \") + \"finished  (\"\n\t\t\t+ faction.getPlayerName() + \")\";\n}", "path": "src\\weewarai\\model\\Unit.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * Selects coordinates with the best defense value from the list of\n * coordinates that has the smallest associated movement cost\n */\n", "func_signal": "@Override\npublic List<Coordinate> select(WeewarMap wmap, Unit unit,\n\t\tSortedMap<Integer, List<Coordinate>> possibleMoves)", "code": "{\n\tif (possibleMoves.isEmpty())\n\t\treturn null;\n\tList<Coordinate> shortestDistMoves = possibleMoves.get(possibleMoves.firstKey());\n\n\tint highestTerrainDefMod = Integer.MIN_VALUE;\n\tList<Coordinate> newBestMoves = new LinkedList<Coordinate>();\n\n\tfor (Coordinate m : shortestDistMoves) {\n\t\tint terrainDefMod = wmap.get(m).getDefenseMod(unit);\n\t\tif (highestTerrainDefMod < terrainDefMod) {\n\t\t\thighestTerrainDefMod = terrainDefMod;\n\t\t\tnewBestMoves.clear();\n\t\t\tnewBestMoves.add(m);\n\t\t} else if (terrainDefMod == highestTerrainDefMod) {\n\t\t\tnewBestMoves.add(m);\n\t\t}\n\t}\n\treturn newBestMoves;\n\n}", "path": "src\\weewarai\\util\\moveselectalgs\\SelectByHighestDef.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * Run Dijkstra's shortest path algorithm on the map. The results of the\n * algorithm are available through {@link #getPredecessor(Coordinate)} and\n * {@link #getShortestDistance(Coordinate)} upon completion of this method.\n * \n * @param start\n *            the starting c\n * @param destination\n *            the destination c. If this argument is <code>null</code>, the\n *            algorithm is run on the entire graph, instead of being stopped\n *            as soon as the destination is reached.\n * @param ignoreUnits\n *            whether other units should be ignored\n */\n", "func_signal": "public ArrayList<Coordinate> execute(Coordinate start,\n\t\tCoordinate destination, boolean ignoreUnits)", "code": "{\n\tinit(start);\n\n\t// the current node\n\tCoordinate u;\n\n\t// extract the node with the shortest distance\n\twhile ((u = unsettledNodes.poll()) != null) {\n\t\tassert !isSettled(u);\n\n\t\t// destination reached, stop\n\t\tif (u == destination) {\n\t\t\tbreak;\n\t\t}\n\n\t\tsettledNodes.add(u);\n\n\t\trelaxNeighbors(u, unit.getMovementPoints(), ignoreUnits);\n\t}\n\n\tArrayList<Coordinate> l = new ArrayList<Coordinate>();\n\n\tfor (Coordinate c = destination; c != null; c = getPredecessor(c)) {\n\t\tl.add(c);\n\t}\n\n\tCollections.reverse(l);\n\n\treturn l;\n}", "path": "src\\weewarai\\model\\MovementPath.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * Initialize all data structures used by the algorithm.\n * \n * @param start\n *            the source node\n */\n", "func_signal": "private void init(Coordinate start)", "code": "{\n\tsettledNodes.clear();\n\tunsettledNodes.clear();\n\n\tshortestDistances.clear();\n\tpredecessors.clear();\n\n\t// add source\n\tsetShortestDistance(start, 0);\n\tunsettledNodes.add(start);\n}", "path": "src\\weewarai\\model\\MovementPath.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * Updates the data of only a specific Faction\n * \n * @param id\n *            the game id\n * @param f\n *            the faction\n * @throws IOException\n * @throws JDOMException\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic void refreshFaction(int id, Faction f) throws IOException,\n\t\tJDOMException", "code": "{\n\tDocument doc = getGameStateXML(id);\n\tElement gameEle = doc.getRootElement();\n\tif (gameEle.getChild(\"factions\") != null) {\n\t\tList<Element> factions = gameEle.getChild(\"factions\").getChildren(\n\t\t\t\t\"faction\");\n\t\tfor (Element factionEle : factions) {\n\t\t\tif (f.getPlayerName().equals(\n\t\t\t\t\tfactionEle.getAttributeValue(\"playerName\"))) {\n\t\t\t\tf.parseXmlElement(factionEle);\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\weewarai\\communication\\Eliza.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * Returns the movement coordinates of a unit from a particular coordinate.\n * \n * @param game\n * @param wmap\n * @param myFaction\n * @param unit\n * @param location\n * @return the movement coordinates of a unit from a particular coordinate\n */\n", "func_signal": "public static List<Coordinate> getMovementCoords(Game game, WeewarMap wmap,\n\t\tFaction myFaction, Unit unit, Coordinate location)", "code": "{\n\n\tint maxMoveCost = unit.getMovementPoints();\n\t// TODO deal with second move\n\n\tList<Unit> myUnits = myFaction.getUnits();\n\n\tList<Coordinate> maxMoveCircle = location\n\t\t\t.getCircle(Specs.MAX_MOVE_RANGE);\n\n\tList<Coordinate> finishedList = new LinkedList<Coordinate>();\n\tList<Coordinate> enemyList = new LinkedList<Coordinate>();\n\tList<Coordinate> notOnMapList = new LinkedList<Coordinate>();\n\n\t// remove finished units and enemy units\n\tfor (Coordinate resultListTarget : maxMoveCircle) {\n\t\tif (wmap.get(resultListTarget) == null) {\n\t\t\tnotOnMapList.add(resultListTarget);\n\t\t} else {\n\t\t\tUnit unitAtLocation = game.getUnit(resultListTarget);\n\t\t\tif (unitAtLocation != null) {\n\t\t\t\tif (myUnits.contains(unitAtLocation)) {\n\t\t\t\t\tif (unitAtLocation.isFinished()) {\n\t\t\t\t\t\tfinishedList.add(resultListTarget);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tenemyList.add(resultListTarget);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tmaxMoveCircle.removeAll(finishedList);\n\tmaxMoveCircle.removeAll(enemyList);\n\tmaxMoveCircle.removeAll(notOnMapList);\n\t\n\t// reworked\n\tboolean ignoreUnits = false;\n\tList<Coordinate> resultList = MovementPath.getMovesAtCostLessThan(wmap,\n\t\t\tgame, unit, location, maxMoveCost, Specs.MAX_MOVE_RANGE,\n\t\t\tmaxMoveCircle, ignoreUnits);\n\t\n\tfor (Coordinate circle1Target : location.getCircle(1)) {\n\t\tif (!location.equals(circle1Target)) {\n\t\t\tUnit unitAtLocation = game.getUnit(circle1Target);\n\t\t\tif ((unitAtLocation == null)\n\t\t\t\t\t|| (myUnits.contains(unitAtLocation) && (!unitAtLocation\n\t\t\t\t\t\t\t.isFinished()))) {\n\t\t\t\tint nextStepDistance = wmap.getDistanceForUnitType(\n\t\t\t\t\t\tlocation, circle1Target, unit);\n\t\t\t\tif (nextStepDistance < Specs.UNPASSABLE) {\n\t\t\t\t\tif (!resultList.contains(circle1Target)) {\n\t\t\t\t\t\tresultList.add(circle1Target);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// a sub, destroyer and battleship can not move onto an enemy base\n\tif (!unit.cannotEnterEnemyHarbor()) {\n\t\tList<Coordinate> enemyBases = new LinkedList<Coordinate>();\n\t\tfor (Coordinate movementLocations : resultList) {\n\t\t\tFaction terrainOwner = game.getTerrainOwner(movementLocations);\n\t\t\tif ((terrainOwner != null) && (!terrainOwner.equals(myFaction))) {\n\t\t\t\tenemyBases.add(movementLocations);\n\t\t\t}\n\t\t}\n\t\tresultList.remove(enemyBases);\n\t}\n\n\treturn resultList;\n}", "path": "src\\weewarai\\util\\ElizaLocal.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * Returns the attack coordinates of a unit from a particular coordinate.\n * \n * @param game\n * @param myFaction\n * @param unit\n * @param location\n * @return the attack coordinates of a unit from a particular coordinate.\n */\n", "func_signal": "public static List<Coordinate> getAttackCoords(Game game,\n\t\tFaction myFaction, Unit unit, Coordinate location)", "code": "{\n\tList<Coordinate> coords = new LinkedList<Coordinate>();\n\n\tList<Coordinate> outerCircle = location.getCircle(unit.getMaxRange());\n\tList<Coordinate> innerCircle = location\n\t\t\t.getCircle(unit.getMinRange() - 1);\n\touterCircle.removeAll(innerCircle);\n\tList<Coordinate> rangeRing = outerCircle;\n\n\tfor (Coordinate c : rangeRing) {\n\t\tUnit u = game.getUnit(c);\n\t\tif (u != null && !u.getFaction().equals(myFaction)) {\n\t\t\tint dist = location.getDirectDistance(c);\n\t\t\t// need to confirm because Anti-Air has different range based\n\t\t\t// on enemy type\n\t\t\tif (unit.getMinRange(u) <= dist && dist <= unit.getMaxRange(u))\n\t\t\t\tcoords.add(c);\n\t\t}\n\t}\n\treturn coords;\n}", "path": "src\\weewarai\\util\\ElizaLocal.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * Adds faction/unit data from the eliza API to an existing Game object\n * \n * @param game\n *            the Game object\n * @throws IOException\n * @throws JDOMException\n */\n", "func_signal": "public void getGameState(Game game) throws IOException, JDOMException", "code": "{\n\tDocument doc = getGameStateXML(game.getId());\n\tgame.parseXmlElement(doc.getRootElement(), false);\n}", "path": "src\\weewarai\\communication\\Eliza.java", "repo_name": "spadequack/weewar-ai-lib", "stars": 4, "license": "None", "language": "java", "size": 512}
{"docstring": "/**\n * Initializes all classes in current classpath.\n */\n", "func_signal": "public static void initializeClassPath()", "code": "{\n    String classPath = System.getProperty(\"java.class.path\");\n    String pathSeparator = System.getProperty(\"path.separator\");\n    if ((classPath == null) || (pathSeparator == null)) {\n        StandardLog\n                .warning(\"Cannot initialize classpath through system properties\");\n        return;\n    }\n    initialize(classPath, pathSeparator);\n}", "path": "src\\fig\\basic\\ClassInitializer.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "// Return a permuted array.\n// Example:\n//   data = (A, B, C), perm = (2, 0, 1)\n//   newData = (C, A, B)\n", "func_signal": "public static int[] applyPermutation(int[] data, int[] perm)", "code": "{\n  assert data.length == perm.length;\n  int[] newData = new int[data.length];\n  for(int i = 0; i < data.length; i++)\n    newData[i] = data[perm[i]];\n  return newData;\n}", "path": "src\\fig\\basic\\ListUtils.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "/**\n * Initializes all the classes in the specified jar file.\n * \n * @param jarName the jar filename. \n */\n", "func_signal": "public static void initializeJar(String jarName)", "code": "{\n    try {\n        StandardLog.fine(\"Initialize Jar file: \" + jarName);\n        ZipFile jarFile = new ZipFile(jarName);\n        if (!jarFile.getClass().getName().equals(\"java.util.zip.ZipFile\")) {\n            StandardLog\n                    .warning(\"Initialization of classes in jar file not supported for J2ME build\");\n            return;\n        }\n        Enumeration e = jarFile.entries();\n        while (e.hasMoreElements()) {\n            ZipEntry entry = (ZipEntry) e.nextElement();\n            String entryName = entry.getName();\n            if (entryName.endsWith(\".class\")) {\n                String className = entryName.substring(0, entryName\n                        .length() - 6);\n                className = className.replace('/', '.');\n                Class cls = Reflection.getClass(className);\n                if (cls != null) {\n                    StandardLog.finer(className + \" initialized\");\n                }\n            }\n        }\n    } catch (Exception e) {\n        StandardLog.error(e);\n    }\n}", "path": "src\\fig\\basic\\ClassInitializer.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "// Note: e^709 is the largest double java can handle.\n", "func_signal": "private static double getScaleFactor(double logScale)", "code": "{\n\tif (logScale == 0.0) return 1.0;\n\tif (logScale == 1.0) return SCALE;\n\tif (logScale == 2.0) return SCALE * SCALE;\n\tif (logScale == 3.0) return SCALE * SCALE * SCALE;\t\t\n\tif (logScale == -1.0) return 1.0 / SCALE;\n\tif (logScale == -2.0) return 1.0 / SCALE / SCALE;\n\tif (logScale == -3.0) return 1.0 / SCALE / SCALE / SCALE;\t\t\n\treturn Math.pow(SCALE, logScale);\n}", "path": "src\\edu\\berkeley\\nlp\\sequence\\stationary\\StationaryForwardBackward.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "// Probability of being positive\n", "func_signal": "public void add(double trueProb, double predProb)", "code": "{\n  pp += trueProb * predProb;\n  pn += trueProb * (1-predProb);\n  np += (1-trueProb) * predProb;\n  nn += (1-trueProb) * (1-predProb);\n  count++;\n}", "path": "src\\fig\\basic\\EvalResult.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "/**\n * Initializes all runtime and classpath classes.\n * \n * @see #initializeRuntime()\n * @see #initializeClassPath()\n */\n", "func_signal": "public static void initializeAll()", "code": "{\n    initializeRuntime();\n    initializeClassPath();\n}", "path": "src\\fig\\basic\\ClassInitializer.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "// Return the array (0, 1, 2, ..., n-1)\n", "func_signal": "public static int[] identityMapArray(int n)", "code": "{\n  int[] arr = new int[n];\n  for(int i = 0; i < n; i++) arr[i] = i;\n  return arr;\n}", "path": "src\\fig\\basic\\ListUtils.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "// Return the indices: the first element contains the smallest\n", "func_signal": "public static int[] sortedIndices(double[] list, boolean reverse)", "code": "{\n  int n = list.length;\n  // Sort\n  List<Pair<Double,Integer>> pairList = new ArrayList<Pair<Double,Integer>>(n);\n  for(int i = 0; i < n; i++)\n    pairList.add(new Pair<Double,Integer>(list[i], i));\n  Collections.sort(pairList,\n    reverse ? new Pair.ReverseFirstComparator<Double,Integer>()\n            : new Pair.FirstComparator<Double,Integer>());\n  // Extract the indices\n  int[] indices = new int[n];\n  for(int i = 0; i < n; i++)\n    indices[i] = pairList.get(i).getSecond();\n  return indices;\n}", "path": "src\\fig\\basic\\ListUtils.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "// Adapted from IOUtils to handle lowercasing and uppercasing\n// Return number of characters copied\n", "func_signal": "public static int copy(Reader in, Writer out) throws IOException", "code": "{\n  char[] buf = new char[16384];\n  int total = 0, n;\n  while((n = in.read(buf)) != -1) {\n    if(uppercase)\n      for(int i = 0; i < n; i++)\n        buf[i] = Character.toUpperCase(buf[i]);\n    if(lowercase)\n      for(int i = 0; i < n; i++)\n        buf[i] = Character.toLowerCase(buf[i]);\n    total += n;\n    out.write(buf, 0, n);\n  }\n  out.flush();\n  return total;\n}", "path": "src\\fig\\basic\\ConvertEncoding.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "//\t\tpublic boolean isStartState() {\n//\t\t\treturn isStart;\n//\t\t}\n//\t\tpublic boolean isStopState() {\n//\t\t\treturn isStop;\n//\t\t}\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n\tfinal int prime = 31;\n\tint result = 1;\n\tresult = prime * result\n\t+ ((current == null) ? 0 : current.hashCode());\n\tresult = prime * result\n\t+ ((history == null) ? 0 : history.hashCode());\n\treturn result;\n}", "path": "src\\edu\\berkeley\\nlp\\prototype\\MarkovStateEncoder.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "/**\n * Creates a test sentence with one reference\n * @param pair\n */\n", "func_signal": "public TestSentence(SentencePair pair)", "code": "{\n\tthis.foreignSentence = pair.getForeignWords();\n\tthis.references = Lists.newList(pair.getEnglishWords());\n}", "path": "src\\edu\\berkeley\\nlp\\mt\\TestSentence.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "// Apply the hint, and on each node we're keeping, apply the cmd\n// on that node with specified the local environment.\n", "func_signal": "public static RecordNode applyHint(SubsetHint hint, RecordNode result,\n    CommandNode cmd, LocalCommandEnv localEnv)", "code": "{\n  // Don't change anything\n  if(hint == ConstantSubsetHint.allHint && cmd == null) return result;\n\n  // Aggregate new results here\n  FullRecordNode newResult =\n    new FullRecordNode(result.getKey(), result.getValue());\n  List<RecordNode> childRecords = result.getChildren();\n\n  SubsetOracle oracle = hint.getOracle(childRecords.size());\n  int lower = oracle.getLowerBound();\n  int upper = Math.min(oracle.getUpperBound(), childRecords.size());\n\n  // Loop through the relevant parts of the result.\n  for(int i = lower; i < upper; i++) {\n    RecordNode childRecord = childRecords.get(i);\n    if(!oracle.inSubset(i)) continue;\n    if(cmd == null)\n      newResult.addChild(childRecord);\n    else\n      newResult.addChild(cmd.exec(localEnv.withCurrRecord(childRecord).withIndex(i)));\n  }\n  return newResult;\n}", "path": "src\\fig\\record\\SubsetHintUtils.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "/**\n * Test for MarkovStateEncoder\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tIndexer<String> labels = new Indexer<String>(CollectionUtils.makeList(\"A\",\"B\"));\n\tMarkovStateEncoder<String> encoder = new MarkovStateEncoder<String>(labels,\"START\",\"STOP\",1);\n\tList<MarkovState<String>> states = encoder.getStates();\n\tfor (MarkovState<String> state: states) {\n\t\tSystem.out.println(state);\n\t}\n}", "path": "src\\edu\\berkeley\\nlp\\prototype\\MarkovStateEncoder.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "//\tpublic int getLabelIndex(int stateIndex) {\n//\t\treturn stateToLabelIndex[stateIndex];\n//\t}\n", "func_signal": "private Tree<MarkovState<L>> buildTreeRec(MarkovState<L> state, int curDepth)", "code": "{\n\n\tcurDepth += 1;\n\n\tList<L> history = state.getHistory();\n\tif (history.size() == order-1 || startLabel.equals(state.current) || (history.size() > 0 && history.get(0).equals(startLabel))) {\n\t\tif ((!startLabel.equals(state.current) || state.history.isEmpty()) && !state.history.contains(stopLabel)) {\n\t\t\tif (!stopLabel.equals(state.current) || !state.history.isEmpty()) {\n\t\t\t\tstateIndexer.add(state);\n\t\t\t\tstate.index = stateIndexer.indexOf(state);\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\n\tif (curDepth > order) {\n\t\treturn new Tree<MarkovState<L>>(state, new ArrayList<Tree<MarkovState<L>>>());\n\t}\n\n\tSet<L> nextLabels = new HashSet<L>(labels);\n\n\tif (curDepth == order) {\n\t\tnextLabels.add(stopLabel);\n\t}\t\n\tif (curDepth == 1) {\n\t\tnextLabels.add(startLabel);\n\t}\n\n\tList<Tree<MarkovState<L>>> childTrees = new ArrayList<Tree<MarkovState<L>>>();\n\tfor (L nextLabel: nextLabels) {\n\t\tList<L> newHistory = new ArrayList<L>(state.getHistory());\n\t\tif (state.getCurrentLabel() != null) newHistory.add(state.getCurrentLabel());\n\t\tMarkovState<L> child = new MarkovState<L>(nextLabel,newHistory);\n\t\tTree<MarkovState<L>> childTree = buildTreeRec(child, curDepth);\n\t\tchildTrees.add(childTree);\n\t}\n\treturn new Tree<MarkovState<L>>(state, childTrees);\n}", "path": "src\\edu\\berkeley\\nlp\\prototype\\MarkovStateEncoder.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "/**\n* Stolen from Radford Neal's fbm package.\n* digamma(x) is defined as (d/dx) log Gamma(x).  It is computed here\n* using an asymptotic expansion when x>5.  For x<=5, the recurrence\n* relation digamma(x) = digamma(x+1) - 1/x is used repeatedly.  See\n* Venables & Ripley, Modern Applied Statistics with S-Plus, pp. 151-152.\n* COMPUTE THE DIGAMMA FUNCTION.  Returns -inf if the argument is an integer\n* less than or equal to zero.\n*/\n", "func_signal": "public static double digamma(double x)", "code": "{\n  assert x > 0 : x;\n  double r, f, t;\n  r = 0;\n  while (x<=5) {\n    r -= 1/x;\n    x += 1;\n  }\n  f = 1/(x*x);\n  t = f*(-1/12.0 + f*(1/120.0 + f*(-1/252.0 + f*(1/240.0 + f*(-1/132.0\n      + f*(691/32760.0 + f*(-1/12.0 + f*3617/8160.0)))))));\n  return r + Math.log(x) - 0.5/x + t;\n}", "path": "src\\fig\\basic\\NumUtils.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "// Vector, matrix operations {\n", "func_signal": "public static boolean normalize(float[] data)", "code": "{\n  float sum = 0;\n  for(float x : data) sum += x;\n  if(sum == 0) return false;\n  for(int i = 0; i < data.length; i++) data[i] /= sum;\n  return true;\n}", "path": "src\\fig\\basic\\NumUtils.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "// v1 += factor * v2\n", "func_signal": "public static double[] incr(double[] v1, double factor, double[] v2)", "code": "{\n  for(int i = 0; i < v1.length; i++)\n    v1[i] += factor * v2[i];\n  return v1;\n}", "path": "src\\fig\\basic\\ListUtils.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "// If sum is 0, set to uniform\n// Return false if we had to set to uniform\n", "func_signal": "public static boolean normalizeForce(double[] data)", "code": "{\n  double sum = 0;\n  for(double x : data) sum += x;\n  if(sum == 0) {\n    for(int i = 0; i < data.length; i++) data[i] = 1.0/data.length;\n    return false;\n  }\n  else {\n    for(int i = 0; i < data.length; i++) data[i] /= sum;\n    return true;\n  }\n}", "path": "src\\fig\\basic\\NumUtils.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "/**\n * Initializes runtime classes (bootstrap classes in <code>\n * System.getProperty(\"sun.boot.class.path\"))</code>  and the \n * extension <code>.jar</code> in <code>lib/ext</code> directory). \n */\n", "func_signal": "public static void initializeRuntime()", "code": "{\n    String bootPath = System.getProperty(\"sun.boot.class.path\");\n    String pathSeparator = System.getProperty(\"path.separator\");\n    if ((bootPath == null) || (pathSeparator == null)) {\n        StandardLog\n                .warning(\"Cannot initialize boot path through system properties\");\n        return;\n    }\n    initialize(bootPath, pathSeparator);\n    String javaHome = System.getProperty(\"java.home\");\n    String fileSeparator = System.getProperty(\"file.separator\");\n    if ((javaHome == null) || (fileSeparator == null)) {\n        StandardLog\n                .warning(\"Cannot initialize extension library through system properties\");\n        return;\n    }\n    File extDir = new File(javaHome + fileSeparator + \"lib\" + fileSeparator\n            + \"ext\");\n    if (!extDir.getClass().getName().equals(\"java.io.File\")) {\n        StandardLog\n                .warning(\"Extension classes initialization not supported for J2ME build\");\n        return;\n    }\n    if (extDir.isDirectory()) {\n        File[] files = extDir.listFiles();\n        for (int i = 0; i < files.length; i++) {\n            String path = files[i].getPath();\n            if (path.endsWith(\".jar\") || path.endsWith(\".zip\")) {\n                initializeJar(path);\n            }\n        }\n    } else {\n        StandardLog.warning(extDir + \" is not a directory\");\n    }\n}", "path": "src\\fig\\basic\\ClassInitializer.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "/**\n * Initializes all the classes in the specified directory.\n * \n * @param dirName the name of the directory containing the classes to\n *         initialize. \n */\n", "func_signal": "public static void initializeDir(String dirName)", "code": "{\n    StandardLog.fine(\"Initialize Directory: \" + dirName);\n    File file = new File(dirName);\n    if (!file.getClass().getName().equals(\"java.io.File\")) {\n        StandardLog\n                .warning(\"Initialization of classes in directory not supported for J2ME build\");\n        return;\n    }\n    if (file.isDirectory()) {\n        File[] files = file.listFiles();\n        for (int i = 0; i < files.length; i++) {\n            initialize(\"\", files[i]);\n        }\n    } else {\n        StandardLog.warning(dirName + \" is not a directory\");\n    }\n}", "path": "src\\fig\\basic\\ClassInitializer.java", "repo_name": "aria42/prototype-sequence-modeling", "stars": 7, "license": "gpl-3.0", "language": "java", "size": 1740}
{"docstring": "/*\n * method called by clients to set up data set and make it ready for\n * processing\n */\n", "func_signal": "public void createExamplesFromFile(String filename) throws Exception", "code": "{\n\tcreateNormalizedDataFromFile(filename);\n\tsetTargetColumns();\n\tcreateExamples();\n\n}", "path": "trunk\\Bicing\\src\\aima\\learning\\neural\\NNDataSet.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "// function TABLE-DRIVEN-AGENT(percept) returns an action\n", "func_signal": "@Override\npublic String execute(Percept percept)", "code": "{\n\t// append percept to end of percepts\n\tpercepts.append(percept);\n\n\t// action <- LOOKUP(percepts, table)\n\t// return action\n\treturn lookupCurrentAction();\n}", "path": "trunk\\Bicing\\src\\aima\\basic\\vaccum\\TableDrivenAgentProgram.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Returns the Euclidean distance between a specified point\n * and this point.\n */\n", "func_signal": "public double distance(Point2D pt)", "code": "{\n\tdouble result = (pt.getX() - x) * (pt.getX() - x);\n\tresult += (pt.getY() - y) * (pt.getY() - y);\n\treturn Math.sqrt(result);\n}", "path": "trunk\\Bicing\\src\\aima\\search\\map\\Point2D.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "/*\n * Gets (and removes) a random example from the 'presentlyProcessed'\n */\n", "func_signal": "public NNExample getExampleAtRandom()", "code": "{\n\n\tint i = Util.randomNumberBetween(0, (presentlyProcessed.size() - 1));\n\treturn presentlyProcessed.remove(i);\n}", "path": "trunk\\Bicing\\src\\aima\\learning\\neural\\NNDataSet.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Constructs a string tokenizer for the specified string. All characters in\n * the delim argument are the delimiters for separating tokens. If the\n * returnTokens flag is true, then the delimiter characters are also\n * returned as tokens. Each delimiter is returned as a string of length one.\n * If the flag is false, the delimiter characters are skipped and only serve\n * as separators between tokens. Then tokenizes the str and return an\n * String[] array with tokens.\n * \n * @param str\n *            a string to be parsed\n * @param delim\n *            the delimiters\n * @param returnTokens\n *            flag indicating whether to return the delimiters as tokens\n * \n * @return array with tokens\n */\n", "func_signal": "public static String[] tokenize(String str, String delim,\n\t\tboolean returnTokens)", "code": "{\n\n\tTokenizer tokenizer = new Tokenizer(str, delim, returnTokens);\n\tString[] tokens = new String[tokenizer.countTokens()];\n\n\tfor (int i = 0; i < tokens.length; i++)\n\t\ttokens[i] = tokenizer.nextToken();\n\n\treturn tokens;\n}", "path": "trunk\\Bicing\\src\\aima\\basic\\Tokenizer.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Factory method, responsible for creating the frame. This\n * implementation shows how the {@code AgentAppFrame} can be\n * configured with respect to the needs of the application\n * even without creating a subclass.\n */\n", "func_signal": "public AgentAppFrame createFrame()", "code": "{\n\tAgentAppFrame result = new AgentAppFrame();\n\tresult.setAgentView(new AgentView());\n\tresult.setSelectors(\n\t\t\tnew String[]{\"XSelect\", \"YSelect\"},\n\t\t\tnew String[]{\"Select X\", \"Select Y\"});\n\tresult.setSelectorItems(\"XSelect\", new String[]{\"X1 (Small)\", \"X2 (Large)\"}, 1);\n\tresult.setSelectorItems(\"YSelect\", new String[]{\"Y=1\", \"Y=2\", \"Y=3\"}, 0);\n\tresult.setTitle(\"Demo Agent Application\");\n\tresult.setSplitPaneResizeWeight(0.5); // puts split bar in center position.\n\tresult.setSize(600, 400);\n\tresult.setUpdateDelay(500);\n\treturn result;\n}", "path": "trunk\\Bicing\\src\\aima\\gui\\framework\\SimpleAgentAppDemo.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Calculates the number of times that this tokenizer's nextToken method can\n * be called before it generates an exception. The current position is not\n * advanced.\n * \n * @return the number of tokens remaining in the string using the current\n *         delimiter set\n */\n", "func_signal": "public int countTokens()", "code": "{\n\tint curr = current;\n\tint count = 0;\n\n\tfor (int i = curr; i < max; i++) {\n\t\tif (delim.indexOf(str.charAt(i)) >= 0)\n\t\t\tcount++;\n\n\t\tcurr++;\n\t}\n\n\treturn count + (returnTokens ? count : 0) + 1;\n}", "path": "trunk\\Bicing\\src\\aima\\basic\\Tokenizer.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "/*\n * create a normalized data \"table\" from the data in the file. At this\n * stage, the data is *not* split into input pattern and tragets\n */\n", "func_signal": "public void createNormalizedDataFromFile(String filename) throws Exception", "code": "{\n\n\tList<List<Double>> rds = new ArrayList<List<Double>>();\n\n\t// create raw data set\n\tBufferedReader reader = new BufferedReader(\n\t\t\tnew InputStreamReader(this.getClass().getResourceAsStream(\n\t\t\t\t\t\"../data/\" + filename + \".csv\")));\n\tString line;\n\twhile ((line = reader.readLine()) != null) {\n\t\trds.add(exampleFromString(line, \",\"));\n\t}\n\n\t// normalize raw dataset\n\tnds = normalize(rds);\n}", "path": "trunk\\Bicing\\src\\aima\\learning\\neural\\NNDataSet.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "// END-Sentence\n//\n", "func_signal": "@Override\npublic boolean equals(Object o)", "code": "{\n\n\tif (this == o) {\n\t\treturn true;\n\t}\n\tif ((o == null) || (this.getClass() != o.getClass())) {\n\t\treturn false;\n\t}\n\tQuantifiedSentence cs = (QuantifiedSentence) o;\n\treturn cs.quantifier.equals(quantifier)\n\t\t\t&& cs.variables.equals(variables)\n\t\t\t&& cs.quantified.equals(quantified);\n}", "path": "trunk\\Bicing\\src\\aima\\logic\\fol\\parsing\\ast\\QuantifiedSentence.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Tests if there are more tokens available from this tokenizer's string. If\n * this method returns true, then a subsequent call to nextToken with no\n * argument will successfully return a token.\n * \n * @return true if and only if there is at least one token in the string\n *         after the current position; false otherwise.\n */\n", "func_signal": "public boolean hasMoreTokens()", "code": "{\n\treturn ((current < max) ? (true)\n\t\t\t: (((current == max) && (max == 0 || (returnTokens && delim\n\t\t\t\t\t.indexOf(str.charAt(previous)) >= 0)))));\n}", "path": "trunk\\Bicing\\src\\aima\\basic\\Tokenizer.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "/*\n * create a normalized data \"table\" from the DataSet using numerizer. At\n * this stage, the data is *not* split into input pattern and targets TODO\n * remove redundancy of recreating the target columns. the numerizer has\n * already isolated the targets\n */\n", "func_signal": "public void createNormalizedDataFromDataSet(DataSet ds, Numerizer numerizer)\n\t\tthrows Exception", "code": "{\n\n\tList<List<Double>> rds = rawExamplesFromDataSet(ds, numerizer);\n\t// normalize raw dataset\n\tnds = normalize(rds);\n}", "path": "trunk\\Bicing\\src\\aima\\learning\\neural\\NNDataSet.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Creates an agent application, makes the parts know\n * each other, and finally sets the frame visible.\n */\n", "func_signal": "public void startApplication()", "code": "{\n\tAgentAppModel model = createModel();\n\tAgentAppFrame frame = createFrame();\n\tAgentAppController controller = createController();\n\tframe.setController(controller);\n\tframe.setModel(model);\n\tcontroller.setFrame(frame);\n\tcontroller.setModel(model);\n\tmodel.addModelChangedListener(frame);\n\tframe.setVisible(true);\n\tframe.setDefaultSelection();\n}", "path": "trunk\\Bicing\\src\\aima\\gui\\framework\\SimpleAgentAppDemo.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "// static: percepts, a sequence, initially empty\n// table, a table of actions, indexed by percept sequences, initially fully\n// specified\n", "func_signal": "public TableDrivenAgentProgram(\n\t\tMap<PerceptSequence, String> perceptSequenceActions)", "code": "{\n\tList<PerceptSequence> rowHeaders = new ArrayList<PerceptSequence>(\n\t\t\tperceptSequenceActions.keySet());\n\n\tList<String> colHeaders = new ArrayList<String>();\n\tcolHeaders.add(ACTION);\n\n\ttable = new Table<PerceptSequence, String, String>(rowHeaders,\n\t\t\tcolHeaders);\n\n\tfor (PerceptSequence row : rowHeaders) {\n\t\ttable.set(row, ACTION, perceptSequenceActions.get(row));\n\t}\n}", "path": "trunk\\Bicing\\src\\aima\\basic\\vaccum\\TableDrivenAgentProgram.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Returns the next token from this string tokenizer.\n * \n * @return the next token from this string tokenizer\n * \n * @exception NoSuchElementException\n *                if there are no more tokens in this tokenizer's string\n */\n", "func_signal": "public String nextToken() throws NoSuchElementException", "code": "{\n\tif (current == max\n\t\t\t&& (max == 0 || (returnTokens && delim.indexOf(str\n\t\t\t\t\t.charAt(previous)) >= 0))) {\n\n\t\tcurrent++;\n\t\treturn new String();\n\t}\n\n\tif (current >= max)\n\t\tthrow new NoSuchElementException();\n\n\tint start = current;\n\tString result = null;\n\n\tif (delim.indexOf(str.charAt(start)) >= 0) {\n\t\tif (previous == -1\n\t\t\t\t|| (returnTokens && previous != current && delim\n\t\t\t\t\t\t.indexOf(str.charAt(previous)) >= 0)) {\n\n\t\t\tresult = new String();\n\t\t} else if (returnTokens)\n\t\t\tresult = str.substring(start, ++current);\n\n\t\tif (!returnTokens)\n\t\t\tcurrent++;\n\t}\n\n\tprevious = start;\n\tstart = current;\n\n\tif (result == null)\n\t\twhile (current < max && delim.indexOf(str.charAt(current)) < 0)\n\t\t\tcurrent++;\n\n\treturn result == null ? str.substring(start, current) : result;\n}", "path": "trunk\\Bicing\\src\\aima\\basic\\Tokenizer.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "/*\n * create Example instances from a normalized data \"table\".\n */\n", "func_signal": "private void createExamples()", "code": "{\n\tdataset = new ArrayList<NNExample>();\n\tfor (List<Double> dataLine : nds) {\n\t\tList<Double> input = new ArrayList<Double>();\n\t\tList<Double> target = new ArrayList<Double>();\n\t\tfor (int i = 0; i < dataLine.size(); i++) {\n\t\t\tif (targetColumnNumbers.contains(i)) {\n\t\t\t\ttarget.add(dataLine.get(i));\n\t\t\t} else {\n\t\t\t\tinput.add(dataLine.get(i));\n\t\t\t}\n\t\t}\n\t\tdataset.add(new NNExample(input, target));\n\t}\n\trefreshDataset();// to populate the preentlyProcessed dataset\n}", "path": "trunk\\Bicing\\src\\aima\\learning\\neural\\NNDataSet.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Returns the next token in this string tokenizer's string. First, the set\n * of characters considered to be delimiters by this Tokenizer object is\n * changed to be the characters in the string delim. Then the next token in\n * the string after the current position is returned. The current position\n * is advanced beyond the recognized token. The new delimiter set remains\n * the default after this call.\n * \n * @param delim\n *            the new delimiters\n * \n * @return the next token, after switching to the new delimiter set\n * \n * @exception NoSuchElementException\n *                if there are no more tokens in this tokenizer's string.\n */\n", "func_signal": "public String nextToken(String delim) throws NoSuchElementException", "code": "{\n\tthis.delim = delim;\n\treturn nextToken();\n}", "path": "trunk\\Bicing\\src\\aima\\basic\\Tokenizer.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Resets this tokenizer's state so the tokenizing starts from the begin.\n */\n", "func_signal": "public void reset()", "code": "{\n\tprevious = -1;\n\tcurrent = 0;\n}", "path": "trunk\\Bicing\\src\\aima\\basic\\Tokenizer.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "//\n// Protected Methods\n//\n", "func_signal": "protected void testDefiniteClauseKBKingsQueryCriminalXFalse(\n\t\tInferenceProcedure infp)", "code": "{\n\tFOLKnowledgeBase kkb = FOLKnowledgeBaseFactory\n\t\t\t.createKingsKnowledgeBase(infp);\n\tList<Term> terms = new ArrayList<Term>();\n\tterms.add(new Variable(\"x\"));\n\tPredicate query = new Predicate(\"Criminal\", terms);\n\tInferenceResult answer = kkb.ask(query);\n\tassertTrue(null != answer);\n\tassertTrue(answer.isPossiblyFalse());\n\tassertFalse(answer.isTrue());\n\tassertFalse(answer.isUnknownDueToTimeout());\n\tassertFalse(answer.isPartialResultDueToTimeout());\n\tassertTrue(0 == answer.getProofs().size());\n}", "path": "trunk\\Bicing\\test\\aima\\test\\logictest\\foltest\\CommonFOLInferenceProcedureTests.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "/*\n * method called by clients to set up data set and make it ready for\n * processing\n */\n", "func_signal": "public void createExamplesFromDataSet(DataSet ds, Numerizer numerizer)\n\t\tthrows Exception", "code": "{\n\tcreateNormalizedDataFromDataSet(ds, numerizer);\n\tsetTargetColumns();\n\tcreateExamples();\n\n}", "path": "trunk\\Bicing\\src\\aima\\learning\\neural\\NNDataSet.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "//\n// PRIVATE METHODS\n//\n", "func_signal": "private String lookupCurrentAction()", "code": "{\n\tString action;\n\n\taction = table.get(percepts, ACTION);\n\tif (null == action) {\n\t\taction = NO_OP;\n\t}\n\n\treturn action;\n}", "path": "trunk\\Bicing\\src\\aima\\basic\\vaccum\\TableDrivenAgentProgram.java", "repo_name": "deric/bicing", "stars": 4, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * <p>Load and combined property files found in directory trees rooted at specified paths</p>\n *\n * @param paths List of paths to search\n * @param propertyFileNameRegex Regex for Name of property file to load\n * @return Properties instance with contents of all properties files combined\n *\n */\n", "func_signal": "public static Properties loadAndCombineProperties(ArrayList<String> paths, String propertyFileNameRegex)", "code": "{\n    CombinedPropertyFileManager propertyFileLoader = new CombinedPropertyFileManager();\n    propertyFileLoader.setSearchPaths(paths);\n    propertyFileLoader.setPropertyFileName(propertyFileNameRegex);\n    return propertyFileLoader.loadAllFromPaths();\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\CombinedPropertyFileManager.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * Load a single file from a supplied virtual file entry\n *\n * @param virtualFileEntry\n * @param properties Properties instance, if null a new properties instance is created and returned\n * @return Properties file instance with the specified file loaded, or empty instance if any errors\n */\n", "func_signal": "public Properties loadSingle(VirtualFileEntry virtualFileEntry,Properties properties)", "code": "{\n\n    if (properties == null) {\n        properties = new Properties();\n    }\n\n    try {\n        if (virtualFileEntry.getFileType() == VirtualFileEntry.TYPE_JAR) {\n            JarFile jarFile = new JarFile(virtualFileEntry.getAbsoluteFilePath());\n            JarEntry jarEntry = jarFile.getJarEntry(virtualFileEntry.getRelativeFilePath());\n            InputStream jarEntryInputStream = jarFile.getInputStream(jarEntry);\n            if (consoleTracing) System.out.format(\"CombinedPropertyFileManager:loadSingle About to load properties file from JAR %s:%s\\n\", virtualFileEntry.getAbsoluteFilePath() , virtualFileEntry.getRelativeFilePath());\n            if (virtualFileEntry.getRelativeFilePath().endsWith(\".xml\")) {\n                properties.loadFromXML(jarEntryInputStream);\n            }\n            else {\n                properties.load(jarEntryInputStream);\n            }\n            jarEntryInputStream.close();\n            jarFile.close();;\n        }\n        else if (virtualFileEntry.getFileType() == virtualFileEntry.TYPE_FILE) {\n            if (consoleTracing) System.out.format(\"CombinedPropertyFileManager:loadSingle About to load properties file %s\\n\", virtualFileEntry.getAbsoluteFilePath());\n            if (virtualFileEntry.getAbsoluteFilePath().endsWith(\".xml\")) {\n                properties.loadFromXML(new FileInputStream(virtualFileEntry.getAbsoluteFilePath()));\n            }\n            else {\n                properties.load(new FileInputStream(virtualFileEntry.getAbsoluteFilePath()));\n            }\n        }\n    }\n    catch (Exception ex) {\n        if (consoleTracing) {\n            System.out.format(\"CombinedPropertyFileManager:loadSingle. Error while loading properties files. Ignoring .. %s\\n\" + ex.toString());\n            ex.printStackTrace(System.out);\n        }\n\n    }\n\n    return properties;\n\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\CombinedPropertyFileManager.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * Find all the properties in the search paths listed\n *\n * @return List of all matching properties files\n */\n", "func_signal": "public ArrayList<VirtualFileEntry> findAllFromPaths()", "code": "{\n    ArrayList<String> paths = new ArrayList<String>();\n    ArrayList<VirtualFileEntry> matchingFileList = MatchingFileAndJarTraverser.findFilesFromPaths(searchPaths,propertyFileName);\n    return matchingFileList;\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\CombinedPropertyFileManager.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * <p>Find all the files in the directory trees rooted in the given paths that are in a directory corresponding\n * to the package of the specified ciass and match the file name specified.</p>\n *\n * @param klass Class for package to search\n * @param paths List of fully-qualified path names to search\n * @param matchingFilename name for files to match\n * @return Array of fully-qualitifed matching file names\n */\n", "func_signal": "public static ArrayList<String> findFilesFromPackageAndPaths(Class klass, ArrayList<String> paths, String matchingFilename)", "code": "{\n\n    boolean  consoleTracing = false;\n    if (System.getProperty(\"net.olioinfo.fileutils.consoleTracing\") != null) {\n        if (System.getProperty(\"net.olioinfo.fileutils.consoleTracing\").equalsIgnoreCase(\"true\")) {\n            consoleTracing = true;\n        }\n        else {\n            consoleTracing = false;\n        }\n    }\n\n\n\n    ArrayList<String> matchingPaths = new ArrayList<String>();\n\n    String packageName = klass.getPackage().getName();\n    for (String currentPath : paths ) {\n        String fullPathName = null;\n        try {\n            fullPathName  = String.format(\"%s/%s\",currentPath,convertPackageNameToDirectoriesSegment(packageName));\n            MatchingFileTraverser matchingFileTraverser = new MatchingFileTraverser();\n            matchingFileTraverser.setMatchingString(matchingFilename);\n            try {\n                matchingFileTraverser.traverse(new File(fullPathName));\n            }\n            catch (Exception ex) {\n                if (consoleTracing) {\n                    System.out.format(\"MatchingFileTravers.findFilesFromPackageAndPaths ignoring exception %s\\n\",ex.toString());\n                    ex.printStackTrace(System.out);\n                }\n            }\n\n            ArrayList<String> matchingFileList = matchingFileTraverser.getFileList();\n            for (String matchingFile : matchingFileList ) {\n                matchingPaths.add(matchingFile);\n                if (consoleTracing) {\n                    System.out.format(\"MatchingFileTraverser.findFilesFromyPackageAndPaths adding %s\\n\", matchingFile);\n                }\n            }\n        }\n        catch (Exception ex) {\n            if (consoleTracing) {\n                System.out.format(\"MatchingFileTraverser.findFilesFromyPackageAndPaths Ignoring error %s which matching path %s\\n\", ex.toString(), fullPathName);\n                ex.printStackTrace(System.out);\n            }\n        }\n    }\n    return matchingPaths;\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\MatchingFileTraverser.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * <p>Find all the files in the directory trees rooted in the given paths that match the file name specified.</p>\n *\n * @param paths List of fully-qualified path names to search\n * @param fileNameRegex name for files to match\n * @return Array of fully-qualitifed matching file names\n */\n", "func_signal": "public static ArrayList<VirtualFileEntry> findFilesFromPaths(ArrayList<String> paths, String fileNameRegex)", "code": "{\n\n    boolean  consoleTracing = false;\n    if (System.getProperty(\"net.olioinfo.fileutils.consoleTracing\") != null) {\n        if (System.getProperty(\"net.olioinfo.fileutils.consoleTracing\").equalsIgnoreCase(\"true\")) {\n            consoleTracing = true;\n        }\n        else {\n            consoleTracing = false;\n        }\n    }\n\n\n    final String finalFileNameRegex = fileNameRegex;\n\n    class FileAndJarTraverser extends AbstractFileAndJarTraverser {\n\n\n        @Override\n        public boolean includeFile(VirtualFileEntry virtualFileEntry) {\n            Pattern matchingPattern = Pattern.compile(finalFileNameRegex);\n\n            if (virtualFileEntry.getFileType() == VirtualFileEntry.TYPE_JAR) {\n                Matcher matcher = matchingPattern.matcher(virtualFileEntry.getRelativeFilePath());\n                if (matcher.matches()) {\n                    if (consoleTracing) {\n                        System.out.format(\"MatchingFileAndJarTraverser.findFilesFromPaths adding JAR file %s with entry %s to matching list\\n\", virtualFileEntry.getAbsoluteFilePath(),virtualFileEntry.getRelativeFilePath());\n                    }\n                    return true;\n                }\n            }\n            else if (virtualFileEntry.getFileType() == VirtualFileEntry.TYPE_FILE) {\n                Matcher matcher = matchingPattern.matcher(virtualFileEntry.getRelativeFilePath());\n                if (matcher.matches()) {\n                    if (consoleTracing) {\n                        System.out.format(\"MatchingFileAndJarTraverser.findFilesFromPaths adding reqular file %s with entry %s to matching list\\n\", virtualFileEntry.getAbsoluteFilePath(),virtualFileEntry.getRelativeFilePath());\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        @Override\n        public boolean includeDirectory(VirtualFileEntry virtualFileEntry) {\n            return false;  //To change body of implemented methods use File | Settings | File Templates.\n        }\n\n    }\n\n    try {\n\n        ArrayList<VirtualFileEntry> allFileEntries = new  ArrayList<VirtualFileEntry>();\n        for (String path : paths) {\n            FileAndJarTraverser fileAndJarTraverser = new FileAndJarTraverser();\n            fileAndJarTraverser.traverse(new File(path));\n            ArrayList<VirtualFileEntry> fileList = fileAndJarTraverser.getFileList();\n            allFileEntries.addAll(fileList);                        \n        }\n        return allFileEntries;\n    }\n    catch (Exception ex) {\n        if (consoleTracing) {\n            System.out.format(\"MatchingFileAndJarTraverser.findFilesFromPaths exception %s\\n\",ex.toString());\n            ex.printStackTrace(System.out);\n        }\n    }\n\n    return null;\n\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\MatchingFileAndJarTraverser.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * Merge two sets of properties, returnning the original set (now merged)\n * \n * @param original\n * @param fresh\n * @return Merged set\n */\n", "func_signal": "public static Properties mergeProperties(Properties original, Properties fresh)", "code": "{\n    Enumeration freshPropsEnum = fresh.keys();\n    while (freshPropsEnum.hasMoreElements()) {\n        String key = (String) freshPropsEnum.nextElement();\n        String value = fresh.getProperty(key);\n        original.setProperty(key,value);\n    }\n    return original;\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\CombinedPropertyFileManager.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * Traverse a tree from a given starting point\n *\n * @param f File object indicating starting point\n * @throws IOException\n */\n", "func_signal": "public final void traverse( final File f ) throws IOException", "code": "{\n    if (consoleTracing) System.out.format(\"AbstractFileTraverser: traverse: file %s\\n\", f.getAbsolutePath());\n    if (f.exists()) {\n        if (consoleTracing) System.out.format(\"AbstractFileTraverser: traverse: file exists %s\\n\", f.getAbsolutePath());\n        if (f.isDirectory()) {\n            if (consoleTracing) System.out.format(\"AbstractFileTraverser: traverse: file is a directory %s\\n\", f.getAbsolutePath());\n            onDirectory(f);\n            final File[] children = f.listFiles();\n            for( File child : children ) {\n                traverse(child);\n            }\n            return;\n        }\n        onFile(f);\n    }\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\AbstractFileTraverser.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * <p>Find all the files in the directory trees rooted in the given paths that are in a directory corresponding\n * to the package of the specified ciass and match the file name specified.</p>\n *\n * @param klass Class for package to search\n * @param paths List of fully-qualified path names to search\n * @param fileNameRegex name for files to match\n * @return Array of fully-qualitifed matching file entries\n */\n", "func_signal": "public static ArrayList<VirtualFileEntry> findFilesFromPackageAndPaths(Class klass, ArrayList<String> paths, String fileNameRegex)", "code": "{\n\n    boolean  consoleTracing = false;\n    if (System.getProperty(\"net.olioinfo.fileutils.consoleTracing\") != null) {\n        if (System.getProperty(\"net.olioinfo.fileutils.consoleTracing\").equalsIgnoreCase(\"true\")) {\n            consoleTracing = true;\n        }\n        else {\n            consoleTracing = false;\n        }\n    }\n\n    String packageFileNameRegex = null;\n    if (klass.getPackage() == null) {\n        packageFileNameRegex = fileNameRegex;\n    }\n    else {\n        String packageName = klass.getPackage().getName();\n        String packagePath = convertPackageNameToDirectoriesSegment(packageName);\n        packageFileNameRegex = String.format(\".*%s/%s$\", packagePath , fileNameRegex);\n    }\n\n    if (consoleTracing) {\n        System.out.format(\"MatchingFileAndJarTraverser.findFilesFromPackageAndPaths calling MatchingFileAndJarTraverser.findFilesFromPaths with file name pattern %s\\n\",packageFileNameRegex);\n    }\n\n    return MatchingFileAndJarTraverser.findFilesFromPaths(paths,packageFileNameRegex);\n\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\MatchingFileAndJarTraverser.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * Load all the properties in the search paths listed\n *\n * @return Properties instance with contents of all properties files combined\n */\n", "func_signal": "public Properties loadAllFromPackageAndPaths()", "code": "{\n\n    ArrayList<VirtualFileEntry> allPropertyFileEntries = findAllFromPackageAndPaths();\n    for (VirtualFileEntry virtualFileEntry: allPropertyFileEntries ) {\n        loadSingle(virtualFileEntry,combinedProperties);\n    }\n    // Hand back whatever was found. Errors are logged but don't get loaded (obviously!)\n    return combinedProperties;\n\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\CombinedPropertyFileManager.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * <p>Load and combine property files found in directory tree rooted at path.</p>\n *\n *\n * @param path Top of tree\n * @param propertyFileNameRegex Regex for Name of property file to load\n * @return Properties instance with contents of all properties files combined\n * \n */\n", "func_signal": "public static Properties loadAndCombineProperties(String path, String propertyFileNameRegex)", "code": "{\n    ArrayList<String> pathList = new ArrayList<String>();\n    pathList.add(path);\n    return CombinedPropertyFileManager.loadAndCombineProperties(pathList,propertyFileNameRegex);\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\CombinedPropertyFileManager.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * Reset the file and directory lists\n */\n", "func_signal": "public void resetList()", "code": "{\n    this.fileList = new ArrayList<String>();\n    this.directoryList = new ArrayList<String>();\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\MatchingFileTraverser.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * <p>Create an instance of AbstractFileTraverser.</p>\n *\n * <p>Initialize logging using log4j. The default 'WARN' logging level can be overridden by specifying\n * -Dnet.olioinfo.fileutils.logLevel=TRACE (or other level) when starting the JVM.\n * </p>\n *\n * <p>To change the logging for this module in a log4j / log4j-ext properties file use the class names</p>\n * <ul>\n *   <li>net.olioinfo.fileutils.AbstractFileTraverser</li>\n *   <li>net.olioinfo.fileutils.AbstractFileAndJarTraverser</li>\n *   <li>net.olioinfo.fileutils.CombinedPropertyFileManager</li>\n * </ul>\n */\n", "func_signal": "public AbstractFileTraverser()", "code": "{\n    if (System.getProperty(\"net.olioinfo.fileutils.consoleTracing\") != null) {\n        if (System.getProperty(\"net.olioinfo.fileutils.consoleTracing\").equalsIgnoreCase(\"true\")) {\n            consoleTracing = true;\n        }\n        else {\n            consoleTracing = false;\n        }\n    }\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\AbstractFileTraverser.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * <p>Create an instance of CombinedPropertyFileManager.</p>\n *\n */\n", "func_signal": "public CombinedPropertyFileManager()", "code": "{\n    if (System.getProperty(\"net.olioinfo.fileutils.consoleTracing\") != null) {\n        consoleTracing = true;\n    }\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\CombinedPropertyFileManager.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * Rigourous Test :-)\n */\n", "func_signal": "public void testAbstractFileTraverser()", "code": "{\n    final ArrayList<String> fileList = new ArrayList<String>();\n\n\n    class FileTraverser extends AbstractFileTraverser {\n\n\n        @Override\n        public void onDirectory(File d) {\n            //To change body of implemented methods use File | Settings | File Templates.\n        }\n\n        @Override\n        public void onFile(File f) {\n            if (f.getAbsolutePath().endsWith(\"properties\")) {\n                if (f.getName().startsWith(\"fileutils\")) {\n                    fileList.add(f.getAbsolutePath());\n                }\n            }\n        }\n    }\n\n    try {\n        FileTraverser fileTraverser = new FileTraverser();\n        fileTraverser.traverse(new File(String.format(\"%s/src\",System.getProperty(\"user.dir\"))));\n    }\n    catch (Exception ex) {\n        System.out.format(\"testAbstractFileTraverser exception %s\\n\",ex.toString());\n        ex.printStackTrace(System.out);\n    }\n    assertTrue(\"There should be four matching files\", fileList.size() == 4);\n\n}", "path": "src\\test\\java\\net\\olioinfo\\test\\fileutils\\AbstractFileTraverserTest.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * <p>Load and combine property files qualified by package found in directory tree rooted at path.</p>\n *\n * @param klass Class from which to derive package\n * @param path Top of tree\n * @param propertyFileNameRegex Regex for Name of property file to load\n * @return Properties instance with contents of all properties files combined\n *\n */\n", "func_signal": "public static Properties loadAndCombinePackageProperties(Class klass, String path, String propertyFileNameRegex)", "code": "{\n    ArrayList<String> pathList = new ArrayList<String>();\n    pathList.add(path);\n    return CombinedPropertyFileManager.loadAndCombinePackageProperties(klass,pathList,propertyFileNameRegex);\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\CombinedPropertyFileManager.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * <p>Load and combined property files qualified by package found in directory trees rooted at specified paths</p>\n *\n * @param klass Class from which to derive package\n * @param paths List of paths to search\n * @param propertyFileNameRegex Regex for Name of property file to load\n * @return Properties instance with contents of all properties files combined\n *\n */\n", "func_signal": "public static Properties loadAndCombinePackageProperties(Class klass, ArrayList<String> paths, String propertyFileNameRegex)", "code": "{\n    CombinedPropertyFileManager propertyFileLoader = new CombinedPropertyFileManager();\n    propertyFileLoader.setSearchPaths(paths);\n\n    propertyFileLoader.setPropertyFileName(propertyFileNameRegex);\n    propertyFileLoader.klass = klass;\n    return propertyFileLoader.loadAllFromPackageAndPaths();\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\CombinedPropertyFileManager.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * Test load with simple file name\n */\n", "func_signal": "public void testCombinedPropertyFileLoaderTest()", "code": "{\n    Properties combinedProps = CombinedPropertyFileManager.loadAndCombineProperties(System.getProperty(\"user.dir\"),\".*fileutils-test-defaults.properties$\");\n\n    combinedProps.list(System.out);\n//         assertEquals(\"second unique\" , combinedProps.getProperty(\"test.props.2\"));\n//         assertEquals(\"first unique\" , combinedProps.getProperty(\"test.props.1\"));\n//         assertEquals(\"second\" , combinedProps.getProperty(\"test.props.common\"));\n\n}", "path": "src\\test\\java\\net\\olioinfo\\test\\fileutils\\CombinedPropertyFileLoaderTest.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * Find all the properties in the search paths listed\n *\n * @return List of all matching properties files\n */\n", "func_signal": "public ArrayList<VirtualFileEntry> findAllFromPackageAndPaths()", "code": "{\n    ArrayList<String> paths = new ArrayList<String>();\n    ArrayList<VirtualFileEntry> matchingFileList = MatchingFileAndJarTraverser.findFilesFromPackageAndPaths(klass,searchPaths,propertyFileName);\n    return matchingFileList;\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\CombinedPropertyFileManager.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * Rigourous Test :-)\n */\n", "func_signal": "public void testAbstractFileAndJarTraverser()", "code": "{\n\n    ArrayList<VirtualFileEntry> fileList = null;\n\n    class FileAndJarTraverser extends AbstractFileAndJarTraverser {\n\n\n        @Override\n        public boolean includeFile(VirtualFileEntry virtualFileEntry) {\n            if (virtualFileEntry.getFileType() == VirtualFileEntry.TYPE_JAR) {\n                if (virtualFileEntry.getRelativeFilePath().endsWith(\"properties\")) {\n                    if (virtualFileEntry.getRelativeFilePath().startsWith(\"fileutils\")) {\n                        return true;\n                    }\n                }\n            }\n            else if (virtualFileEntry.getFileType() == VirtualFileEntry.TYPE_FILE) {\n                if (virtualFileEntry.getAbsoluteFilePath().endsWith(\"properties\")) {\n                    if (virtualFileEntry.getRelativeFilePath().startsWith(\"fileutils\")) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        @Override\n        public boolean includeDirectory(VirtualFileEntry virtualFileEntry) {\n            return false;  //To change body of implemented methods use File | Settings | File Templates.\n        }\n\n    }\n\n    try {\n        FileAndJarTraverser fileAndJarTraverser = new FileAndJarTraverser();\n        fileAndJarTraverser.traverse(new File(String.format(\"%s/src\",System.getProperty(\"user.dir\"))));\n        fileList = fileAndJarTraverser.getFileList();\n    }\n    catch (Exception ex) {\n        System.out.format(\"testAbstractFileAndJarTraverser exception %s\\n\",ex.toString());\n        ex.printStackTrace(System.out);\n    }\n    assertTrue(\"There should be eight matching files\", fileList.size() == 8);\n//        for(VirtualFileEntry virtualFileEntry : fileList) {\n//            System.out.format(\"%s:%s\\n\",virtualFileEntry.getAbsoluteFilePath(),virtualFileEntry.getRelativeFilePath());\n//        }\n\n}", "path": "src\\test\\java\\net\\olioinfo\\test\\fileutils\\AbstractFleAndJarTraverserTest.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * Load all the properties in the search paths listed\n *\n * @return Properties instance with contents of all properties files combined\n */\n", "func_signal": "public Properties loadAllFromPaths()", "code": "{\n\n    ArrayList<VirtualFileEntry> allPropertyFileEntries = findAllFromPaths();\n    for (VirtualFileEntry virtualFileEntry: allPropertyFileEntries ) {\n        loadSingle(virtualFileEntry,combinedProperties);\n    }\n    // Hand back whatever was found. Errors are logged but don't get loaded (obviously!)\n    return combinedProperties;\n\n}", "path": "src\\main\\java\\net\\olioinfo\\fileutils\\CombinedPropertyFileManager.java", "repo_name": "tflynn/fileutils", "stars": 4, "license": "None", "language": "java", "size": 180}
{"docstring": "/**\n * \n * @param serviceName\n * @return\n */\n", "func_signal": "public String findServiceClassPath(String serviceName)", "code": "{\n\tString serviceClassPath = null;\n\n\tif (serviceConfigureInfosList.isEmpty()) {\n\t\treturn serviceClassPath;\n\t}\n\n\tfor (int index = 0; index < serviceConfigureInfosList.size(); index++) {\n\t\tif (serviceConfigureInfosList.get(index).getServiceName().equals(\n\t\t\t\tserviceName)) {\n\t\t\tserviceClassPath = serviceConfigureInfosList.get(index)\n\t\t\t\t\t.getServiceClassPath();\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn serviceClassPath;\n}", "path": "src\\main\\com\\ics\\tcg\\web\\workflow\\server\\ServiceConfigureXmlParse.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "/** check if the name is available */\n", "func_signal": "@Override\npublic String saveUser(User_Client userC)", "code": "{\n\tUser user = new User();\n\tuser.setUserid(userC.getUserid());\n\tuser.setAccount(userC.getAccount());\n\tuser.setAge(userC.getAge());\n\tuser.setBirthday(userC.getBirthday());\n\tuser.setBymail(userC.isBymail());\n\tuser.setBymobile(userC.isBymobile());\n\tuser.setEmail(userC.getEmail());\n\tuser.setSex(userC.getSex());\n\tuser.setTel(userC.getTel());\n\tuser.setPassword(userC.password);\n\n\tuserdao.insertUser(user);\n\treturn \"success\";\n\n}", "path": "src\\main\\com\\ics\\tcg\\web\\reg\\server\\Reg_ServiceImpl.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "// \u7528\u4e8e\u533a\u5206\uff0c\u662f\u5426\u4e3a\u8d77\u59cb\u8282\u70b9\u7684\u989c\u8272label\n", "func_signal": "public SetStartCommand(Widget w, DiagramBuilder d, MenuItem menuItem)", "code": "{\n\t\tworkflowtasknode = (Workflowtasknode) w;\n\t\tdiagrambuilderexample = d;\n\t\tthis.menuItem = menuItem;\n\t}", "path": "src\\main\\com\\ics\\tcg\\web\\workflow\\client\\command\\SetStartCommand.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "/**\n * Constructor that uses default text values for buttons.\n * \n * @param labelText\n *            The initial text of the label.\n * @param onUpdate\n *            Handler object for performing actions once label is updated.\n */\n", "func_signal": "public ChoiceTask(String labelText, DiagramBuilder d)", "code": "{\n\tdbe = d;\n\tcreateEditableLabel(labelText, \"I\", \"O\", \"F\");\n}", "path": "src\\main\\com\\ics\\tcg\\web\\workflow\\client\\task\\ChoiceTask.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "// date\u5224\u65ad\u8f85\u52a9\u7c7b\n", "func_signal": "private static boolean dateFormatHelper(String dateString)", "code": "{\n\tString[] tempSplits = new String[3];\n\ttry {\n\t\ttempSplits = dateString.split(\"-\");\n\t\tif ((Integer.parseInt(tempSplits[0]) >= 0 && Integer\n\t\t\t\t.parseInt(tempSplits[0]) <= 3000)\n\t\t\t\t&& (Integer.parseInt(tempSplits[1]) >= 1 && Integer\n\t\t\t\t\t\t.parseInt(tempSplits[1]) <= 12)\n\t\t\t\t&& (Integer.parseInt(tempSplits[2]) >= 1 && Integer\n\t\t\t\t\t\t.parseInt(tempSplits[2]) <= 31)) {\n\t\t\t// \u83b7\u5f97\u5f53\u524d\u6708\u4efd \u5982\u679c\u662f 4 6 9 11\u6708\u4efd\u5219\u5e94\u8be5\u662f30\u5929\n\t\t\tint tmpMonth = Integer.parseInt(tempSplits[1]);\n\t\t\tint tmpDate = Integer.parseInt(tempSplits[2]);\n\t\t\tint tmpYear = Integer.parseInt(tempSplits[0]);\n\n\t\t\tif (tmpMonth == 4 || tmpMonth == 6 || tmpMonth == 9\n\t\t\t\t\t|| tmpMonth == 11) {\n\t\t\t\tif (tmpDate > 30) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (tmpMonth == 2) {\n\t\t\t\t// \u5bf9\u4e8e2\u6708\u4efd\u5929\u6570\u7684\u5224\u65ad\n\t\t\t\tif (tmpYear % 4 == 0) {\n\t\t\t\t\tif (tmpDate > 29) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (tmpDate > 28) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (NumberFormatException e) {\n\t\t// TODO Auto-generated catch block\n\t\treturn false;\n\t}\n}", "path": "src\\main\\com\\ics\\tcg\\web\\workflow\\client\\task\\ServiceTask.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "/** create grid */\n", "func_signal": "private Grid createGrid()", "code": "{\n\tfinal Grid grid = new Grid(1, 1);\n\tfinal Table table = createTable();\n\ttable.setSize(\"100%\", \"200\");\n\tgrid.setWidget(0, 0, table);\n\tgrid.getRowFormatter().setVerticalAlign(0,\n\t\t\tHasVerticalAlignment.ALIGN_TOP);\n\tgrid.getCellFormatter().setWidth(0, 0, \"100%\");\n\tgrid.getCellFormatter().setHeight(0, 0, \"100%\");\n\tgrid.setSize(\"100%\", \"100%\");\n\treturn grid;\n}", "path": "src\\main\\com\\ics\\tcg\\web\\user\\client\\panels\\List_Friend.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "/** create the widgets */\n", "func_signal": "public void Init()", "code": "{\n\n\tfinal AbsolutePanel main_Panel = new AbsolutePanel();\n\tsuper.add(main_Panel);\n\n\tmain_Panel.setSize(\"600px\", \"400px\");\n\n\t// scroll panel\n\tfinal ScrollPanel scrollPanel = new ScrollPanel();\n\tmain_Panel.add(scrollPanel, 10, 10);\n\tscrollPanel.setSize(\"580px\", \"350px\");\n\n\t// block include 3 part\n\tfinal VerticalPanel block_Panel = new VerticalPanel();\n\tblock_Panel.setSpacing(5);\n\tscrollPanel.add(block_Panel);\n\n\t// create part 1,2,3\n\tcreatePart1(block_Panel);\n\tcreatePart2(block_Panel);\n\tcreatePart3(block_Panel);\n\n\t// create confirm\n\tHorizontalPanel confirm_button = createConfirm();\n\tmain_Panel.add(confirm_button, 50, 360);\n}", "path": "src\\main\\com\\ics\\tcg\\web\\user\\client\\qos\\QosDialog.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "/** create table */\n", "func_signal": "private Table createTable()", "code": "{\n\t// Set up the columns we want to be displayed\n\tfinal Column[] columns = { new Column(0, false, \"Name\", \"20%\"),\n\t\t\tnew Column(1, false, \"Age\", \"20%\"),\n\t\t\tnew Column(2, false, \"Sex\", \"20%\"),\n\t\t\tnew Column(3, false, \"Email\", \"40%\"),\n\t\t\tnew Column(4, false, \"id\", \"0%\") };\n\t// Generate 0 data\n\tfinal Row[] rows = new Row[0];\n\t// Now configure the table\n\tColumnLayout layout = new ColumnLayout(columns);\n\tfinal Table table = new Table(layout);\n\ttable.show(4, false);\n\tContentProvider provider = new ContentProvider() {\n\t\tpublic void load(int begin, int end, final int sortId,\n\t\t\t\tboolean ascending) {\n\t\t\tfinal int sign = ascending ? 1 : -1;\n\t\t\tRow[] tmp = new Row[rows.length];\n\t\t\tfor (int i = 0; i < rows.length; ++i)\n\t\t\t\ttmp[i] = rows[i];\n\t\t\tswitch (sortId) {\n\t\t\tcase 0:\n\t\t\t\tArrays.sort(tmp, new Comparator<Row>() {\n\t\t\t\t\tpublic int compare(Row o1, Row o2) {\n\t\t\t\t\t\tString v1 = (String) o1.getValue(sortId);\n\t\t\t\t\t\tString v2 = (String) o2.getValue(sortId);\n\t\t\t\t\t\treturn sign * (v1.compareTo(v2));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tArrays.sort(tmp, new Comparator<Row>() {\n\t\t\t\t\tpublic int compare(Row o1, Row o2) {\n\t\t\t\t\t\tInteger v1 = (Integer) o1.getValue(sortId);\n\t\t\t\t\t\tInteger v2 = (Integer) o2.getValue(sortId);\n\t\t\t\t\t\treturn sign * (v1 < v2 ? -1 : (v1 == v2 ? 0 : 1));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tArrays.sort(tmp, new Comparator<Row>() {\n\t\t\t\t\tpublic int compare(Row o1, Row o2) {\n\t\t\t\t\t\tString v1 = ((String) o1.getValue(sortId));\n\t\t\t\t\t\tString v2 = ((String) o2.getValue(sortId));\n\t\t\t\t\t\treturn sign * (v1.compareTo(v2));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tRow[] srows = new Row[Math.min(end - begin, tmp.length - begin)];\n\t\t\tfor (int i = 0; i < srows.length; ++i)\n\t\t\t\tsrows[i] = tmp[begin + i];\n\t\t\ttable.onSuccess(new Rows(srows, begin, sortId, ascending));\n\t\t}\n\t};\n\ttable.setContentProvider(provider);\n\ttable.addTableListener(new TableListenerAdapter() {\n\t\tpublic void onCellClicked(SourcesTableEvents sender, Row row,\n\t\t\t\tColumn column) {\n\t\t}\n\n\t\tpublic void onRowClicked(SourcesTableEvents sender, Row row) {\n\t\t\tfor (int i = 0; i < rows.length; ++i)\n\t\t\t\trows[i].setState(Row.State.NONE);\n\t\t\trow.setState(Row.State.SELECT);\n\t\t\ttable.refreshRowState();\n\t\t}\n\n\t\tpublic void onClick(SourcesTableEvents sender, Row row,\n\t\t\t\tColumn column, Widget widget) {\n\t\t\tif (widget instanceof CheckBox) {\n\t\t\t\trow.setValue(0,\n\t\t\t\t\t\tnew Boolean(((CheckBox) widget).isChecked()));\n\t\t\t} else if (widget instanceof Button) {\n\t\t\t\tWindow.alert(((Button) widget).getHTML());\n\t\t\t} else if (widget instanceof Hyperlink) {\n\t\t\t\tWindow.alert(((Hyperlink) widget).getHTML());\n\t\t\t} else if (widget instanceof Image) {\n\t\t\t\tWindow.alert(((Image) widget).getUrl());\n\t\t\t}\n\t\t}\n\n\t\tpublic void onChange(SourcesTableEvents sender, Row row,\n\t\t\t\tColumn column, Widget widget) {\n\t\t\tif (widget instanceof ListBox) {\n\t\t\t\tListBox listBox = (ListBox) widget;\n\t\t\t\trow.setValue(6, listBox\n\t\t\t\t\t\t.getValue(listBox.getSelectedIndex()));\n\t\t\t} else if (widget instanceof TextBox) {\n\t\t\t\trow.setValue(8, ((TextBox) widget).getText());\n\t\t\t}\n\t\t}\n\t});\n\ttable.update();\n\treturn table;\n}", "path": "src\\main\\com\\ics\\tcg\\web\\user\\client\\panels\\List_Friend.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "/** on show */\n", "func_signal": "public void onShow()", "code": "{\n\t// lock the finished\n\tif (calendar_panel.workflowApp.calendarClient.isLocked() == true) {\n\t\ttextBox1.setEnabled(false);\n\t\ttextBox3.setEnabled(false);\n\t\t((DateBox) textBox2.getWidget(0)).setEnabled(false);\n\t\t((TextBox) textBox2.getWidget(1)).setEnabled(false);\n\t\t((TextBox) textBox2.getWidget(3)).setEnabled(false);\n\t\t((DateBox) textBox2.getWidget(4)).setEnabled(false);\n\t\t((Button) (((AbsolutePanel) getWidget(1)).getWidget(1)))\n\t\t\t\t.setEnabled(false);\n\t\t((Button) (((AbsolutePanel) getWidget(1)).getWidget(2)))\n\t\t\t\t.setEnabled(false);\n\t\t((Button) (((AbsolutePanel) getWidget(1)).getWidget(3)))\n\t\t\t\t.setEnabled(false);\n\n\t\t((AbsolutePanel) this.getWidget(2)).getWidget(1).setVisible(true);\n\t\t((AbsolutePanel) this.getWidget(2)).setWidgetPosition(\n\t\t\t\t((AbsolutePanel) this.getWidget(2)).getWidget(1),\n\t\t\t\t((AbsolutePanel) this.getWidget(2)).getWidget(0)\n\t\t\t\t\t\t.getOffsetWidth() + 30, 10);\n\n\t} else {\n\t\ttextBox1.setEnabled(true);\n\t\ttextBox3.setEnabled(true);\n\t\t((DateBox) textBox2.getWidget(0)).setEnabled(true);\n\t\t((TextBox) textBox2.getWidget(1)).setEnabled(true);\n\t\t((TextBox) textBox2.getWidget(3)).setEnabled(true);\n\t\t((DateBox) textBox2.getWidget(4)).setEnabled(true);\n\t\t((Button) (((AbsolutePanel) getWidget(1)).getWidget(1)))\n\t\t\t\t.setEnabled(true);\n\t\t((Button) (((AbsolutePanel) getWidget(1)).getWidget(2)))\n\t\t\t\t.setEnabled(true);\n\t\t((Button) (((AbsolutePanel) getWidget(1)).getWidget(3)))\n\t\t\t\t.setEnabled(true);\n\n\t\t((AbsolutePanel) this.getWidget(2)).getWidget(1).setVisible(false);\n\t}\n\tbase.diagramBuilderExample.scrollPanel.scrollToLeft();\n\tbase.diagramBuilderExample.scrollPanel.scrollToTop();\n\n\ttextBox1.setText(calendar_panel.workflowApp.getTitle());\n\ttextBox3.setText(calendar_panel.workflowApp.getDescription());\n\t((DateBox) textBox2.getWidget(0)).getTextBox().setText(\n\t\t\tdateFormat1.format(calendar_panel.workflowApp.getStart()));\n\t((TextBox) textBox2.getWidget(1)).setText(dateFormat2\n\t\t\t.format(calendar_panel.workflowApp.getStart()));\n\t((TextBox) textBox2.getWidget(3)).setText(dateFormat2\n\t\t\t.format(calendar_panel.workflowApp.getEnd()));\n\t((DateBox) textBox2.getWidget(4)).getTextBox().setText(\n\t\t\tdateFormat1.format(calendar_panel.workflowApp.getEnd()));\n\n\ttext_What = textBox1.getText();\n\ttext_Des = textBox3.getText();\n\ttime_Start = dateFormat.format(calendar_panel.workflowApp.getStart());\n\ttime_End = dateFormat.format(calendar_panel.workflowApp.getEnd());\n\n\tbase.clearpanel();\n\n\tif (calendar_panel.workflowApp.calendarClient.getCalendarid() != null) {\n\t\toverview_panel.calendar_Service.getWorkflow(\n\t\t\t\tcalendar_panel.workflowApp.calendarClient.getCalendarid(),\n\t\t\t\tnew AsyncCallback<Client_Workflow>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onFailure(Throwable arg0) {\n\t\t\t\t\t\tWindow.alert(\"fail to load\");\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onSuccess(Client_Workflow client_Workflow) {\n\t\t\t\t\t\tbase.diagramBuilderExample\n\t\t\t\t\t\t\t\t.load_workflow_from_server(client_Workflow);\n\t\t\t\t\t\t((HTML) ((AbsolutePanel) (((AbsolutePanel) panel_Workflow\n\t\t\t\t\t\t\t\t.getWidget(2)).getWidget(1))).getWidget(0))\n\t\t\t\t\t\t\t\t.setHTML(\"<span style='color:white;'>Risk is :<br></span><h1 style='color:red;'>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\"\n\t\t\t\t\t\t\t\t\t\t+ client_Workflow.getRisk()\n\t\t\t\t\t\t\t\t\t\t+ \"</h1>\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t} else {\n\t\tbase.diagramBuilderExample.load_workflow_from_server(null);\n\t}\n\n\t// update service\n\tbase.diagramBuilderExample.update_service();\n\n\t// set layout\n\tworkflowPanel_inner.setHeight(Integer.toString(panel_Workflow\n\t\t\t.getOffsetHeight() - 235));\n\n\tbase.tabs.setSize(\"100%\", Integer.toString(workflowPanel_inner\n\t\t\t.getOffsetHeight() - 65));\n\tbase.diagramBuilderExample.getArea().setSize(\n\t\t\tInteger.toString(workflowPanel_inner.getOffsetWidth() - 30),\n\t\t\tInteger.toString(workflowPanel_inner.getOffsetHeight() - 70));\n\tbase.diagramBuilderExample.getPanel().setSize(\"1200\", \"500\");\n\tbase.diagramBuilderExample.scrollPanel.setSize(Integer\n\t\t\t.toString(workflowPanel_inner.getOffsetWidth() - 210), Integer\n\t\t\t.toString(workflowPanel_inner.getOffsetHeight() - 70));\n\n\tWindow.addResizeHandler(new ResizeHandler() {\n\t\t@Override\n\t\tpublic void onResize(ResizeEvent event) {\n\t\t\tif (panel_Workflow.isVisible() == true) {\n\t\t\t\tworkflowPanel_inner.setHeight(Integer\n\t\t\t\t\t\t.toString(panel_Workflow.getOffsetHeight() - 235));\n\t\t\t\tbase.tabs.setHeight(Integer.toString(workflowPanel_inner\n\t\t\t\t\t\t.getOffsetHeight() - 35));\n\t\t\t\tbase.diagramBuilderExample.getArea().setSize(\n\t\t\t\t\t\tInteger.toString(workflowPanel_inner\n\t\t\t\t\t\t\t\t.getOffsetWidth() - 30),\n\t\t\t\t\t\tInteger.toString(workflowPanel_inner\n\t\t\t\t\t\t\t\t.getOffsetHeight() - 70));\n\t\t\t\tbase.diagramBuilderExample.scrollPanel.setSize(\n\t\t\t\t\t\tInteger.toString(workflowPanel_inner\n\t\t\t\t\t\t\t\t.getOffsetWidth() - 210), Integer\n\t\t\t\t\t\t\t\t.toString(workflowPanel_inner\n\t\t\t\t\t\t\t\t\t\t.getOffsetHeight() - 70));\n\t\t\t}\n\t\t\t((AbsolutePanel) panel_Workflow.getWidget(2))\n\t\t\t\t\t.setWidgetPosition(((AbsolutePanel) panel_Workflow\n\t\t\t\t\t\t\t.getWidget(2)).getWidget(1),\n\t\t\t\t\t\t\t((AbsolutePanel) panel_Workflow.getWidget(2))\n\t\t\t\t\t\t\t\t\t.getWidget(0).getOffsetWidth() + 30, 10);\n\t\t}\n\t});\n}", "path": "src\\main\\com\\ics\\tcg\\web\\user\\client\\panels\\Panel_Workflow.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "/** init the panel */\n", "func_signal": "public void init()", "code": "{\n\tshow_Grid();\n\tloadMail(table);\n\tthis.setHeight(Window.getClientHeight() - 90 + \"px\");\n\tdetail_body_panel.setHeight(Window.getClientHeight() - 220 + \"px\");\n}", "path": "src\\main\\com\\ics\\tcg\\web\\user\\client\\panels\\Panel_Mail.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "// \u6b64\u65f6\u7684paraminfo\u5df2\u7ecf\u662f\u57fa\u672c\u7c7b\u578b\u7684\n", "func_signal": "public AbsolutePanel Generate_empty_downpanel(final ParamInfo paramInfo)", "code": "{\n\tfinal AbsolutePanel downlist_panelAbsolutePanel = new AbsolutePanel();\n\tdownlist_panelAbsolutePanel.setSize(\"325\", \"28\");\n\n\tfinal TextBox textBox = new TextBox();\n\tif (paramInfo.getParamTypeName().equals(\"Date\")) {\n\t\ttextBox.setReadOnly(true);\n\t}\n\ttextBox.addClickHandler(new ClickHandler() {\n\n\t\tpublic void onClick(ClickEvent event) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tif (paramInfo.getParamTypeName().equals(\"Date\")) {\n\t\t\t\tsetDateInTextBox(textBox, paramInfo);\n\t\t\t}\n\t\t}\n\n\t});\n\n\ttextBox.addFocusListener(new FocusListener() {\n\n\t\tpublic void onFocus(Widget sender) {\n\t\t\t// TODO Auto-generated method stub\n\n\t\t}\n\n\t\t// \u6bcf\u6b21\u5931\u53bb\u7126\u70b9\uff0c\u90fd\u8981\u66f4\u65b0paraminfo\u4fdd\u5b58\u7684\u503c\n\t\tpublic void onLostFocus(Widget sender) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\t// \u83b7\u5f97\u4e8b\u4ef6\u54cd\u5e94\u7684\u5b9e\u9645\u63a7\u4ef6\n\t\t\tTextBox innerTextBox = (TextBox) sender;\n\t\t\tString value = innerTextBox.getValue();\n\t\t\tif (value != null) {\n\t\t\t\t/*\n\t\t\t\t * \u5148\u505a\u4e2aisuserfilled\u68c0\u67e5\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u53ef\u80fd\u7531\u4e8e\u7528\u6237\u8bef\u70b9\u8fdb\u5165\u7f16\u8f91\u72b6\u6001\uff0c\n\t\t\t\t * \u4e0d\u6539\u53d8paramvalue\u503c\uff0c\u5982\u679c\u4e0d\u662f\u7528\u6237\u8f93\u5165\uff0c\u5219\u8fdb\u884c\u7c7b\u578b\u68c0\u6d4b\uff0c\u5408\u6cd5\u60c5\u51b5\u4e0b\u5237\u65b0\u4fdd\u5b58\u7684\u503c\n\t\t\t\t */\n\t\t\t\tif (!UserFilled(value)) {\n\n\t\t\t\t} else {\n\t\t\t\t\t// \u5982\u679c\u7c7b\u578b\u5408\u6cd5\uff0c\u5e76\u4e14\u5185\u5bb9\u5408\u6cd5\uff0c\u5219\u5c06\u5185\u5bb9\u4fdd\u5b58\u8d77\u6765\n\t\t\t\t\tif (isTypelegal(value, paramInfo.getParamTypeName())\n\t\t\t\t\t\t\t&& isContentlegal(value, paramInfo\n\t\t\t\t\t\t\t\t\t.getParamName())) {\n\t\t\t\t\t\tsender.removeStyleName(\"x-form-invalid\");\n\n\t\t\t\t\t\tAbsolutePanel current_innerAbsolutePanel = (AbsolutePanel) innerTextBox\n\t\t\t\t\t\t\t\t.getParent();\n\t\t\t\t\t\tAbsolutePanel outterAbsolutePanel = (AbsolutePanel) current_innerAbsolutePanel\n\t\t\t\t\t\t\t\t.getParent();\n\n\t\t\t\t\t\tfor (int i = 0; i < outterAbsolutePanel\n\t\t\t\t\t\t\t\t.getWidgetCount(); i++) {\n\t\t\t\t\t\t\tAbsolutePanel innerAbsolutePanel = (AbsolutePanel) outterAbsolutePanel\n\t\t\t\t\t\t\t\t\t.getWidget(i);\n\t\t\t\t\t\t\tTextBox currentTextBox = (TextBox) innerAbsolutePanel\n\t\t\t\t\t\t\t\t\t.getWidget(0);\n\t\t\t\t\t\t\t// \u8bbe\u7f6e\u4fdd\u5b58\u7684\u503c\u7684\u6765\u6e90\uff0c\u7528\u8def\u5f84\u7684\u65b9\u5f0f\u8868\u793a,\u4fdd\u5b58\u7684\u65f6\u5019\u628a\u670d\u52a1\u540d\u6362\u6210id\u53f7\n\t\t\t\t\t\t\tString valueString = currentTextBox.getValue();\n\t\t\t\t\t\t\t// String value_for_save =\n\t\t\t\t\t\t\t// treeItemName.replace((CharSequence)valueString,(CharSequence)Integer.toString(service_id.get(valueString)));\n\t\t\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\t\t\tparamInfo.setParamValue(valueString);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tparamInfo.setParamValue(paramInfo\n\t\t\t\t\t\t\t\t\t\t.getParamValue()\n\t\t\t\t\t\t\t\t\t\t+ \"+\" + valueString);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (value.equals(\"\")) {\n\t\t\t\t\t\t\tsender.removeStyleName(\"x-form-invalid\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsender.addStyleName(\"x-form-invalid\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tparamInfo.setIsUserFilled(true); // \u7528\u6765\u6307\u660e\u4fe1\u606f\u4e3a\u7528\u6237\u8f93\u5165\uff0c\u4e3b\u8981\u7528\u6765\u4e0b\u6b21\u521d\u59cb\u5316\u670d\u52a1\u914d\u7f6e\u7a97\u53e3\u7684\u663e\u793a\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsender.removeStyleName(\"x-form-invalid\");\n\t\t\t}\n\t\t}\n\n\t});\n\ttextBox.setSize(\"275\", \"25\");\n\tdownlist_panelAbsolutePanel.add(textBox, 15, 2);\n\ttextBox.setTextAlignment(TextBoxBase.ALIGN_LEFT);\n\n\tfinal Image downlist = new Image(\"img/downlist.PNG\");\n\tdownlist.addClickHandler(new ClickHandler() {\n\n\t\tpublic void onClick(ClickEvent event) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\t// \u5982\u679c\u4e0b\u62c9\u5217\u8868\u672a\u5c55\u5f00\uff0c\u5c06\u5176\u5c55\u5f00\n\t\t\tif (isopen == false) {\n\n\t\t\t\tisopen = true;\n\n\t\t\t\tfinal Tree staticTree = new Tree();\n\t\t\t\tstaticTree.setAnimationEnabled(true);\n\t\t\t\tstaticTree.ensureDebugId(\"cwTree-staticTree\");\n\t\t\t\tstaticTree.addMouseDownHandler(new MouseDownHandler() {\n\n\t\t\t\t\tpublic void onMouseDown(MouseDownEvent event) {\n\t\t\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\t\t\tTree tree = (Tree) event.getSource();\n\t\t\t\t\t\tTreeItem treeItem = tree.getSelectedItem(); // \u6b64\u5904\u83b7\u53d6\u9009\u4e2d\u8282\u70b9\u6709\u4e9b\u95ee\u9898\uff0c\u662f\u5426\u70b9\u9009\u7684\u4e3a\u52a0\u53f7\u800c\u975e\u5185\u5bb9\u6240\u81f4\n\t\t\t\t\t\tif (treeItem != null\n\t\t\t\t\t\t\t\t&& treeItem.getChildCount() == 0) {\n\t\t\t\t\t\t\tString treeItemName = treeItem.getText();\n\n\t\t\t\t\t\t\t// \u4ece\u53f6\u5b50\u8282\u70b9\u5411\u6839\u8282\u70b9\u56de\u6eaf\uff0c\u627e\u5230\u7edd\u5bf9\u8def\u5f84\n\t\t\t\t\t\t\twhile (treeItem.getParentItem() != null) {\n\t\t\t\t\t\t\t\ttreeItem = treeItem.getParentItem();\n\t\t\t\t\t\t\t\ttreeItemName = treeItem.getText() + \".\"\n\t\t\t\t\t\t\t\t\t\t+ treeItemName;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tScrollPanel currentScrollPanel = (ScrollPanel) tree\n\t\t\t\t\t\t\t\t\t.getParent();\n\t\t\t\t\t\t\tAbsolutePanel current_innerAbsolutePanel = (AbsolutePanel) currentScrollPanel\n\t\t\t\t\t\t\t\t\t.getParent();\n\t\t\t\t\t\t\tTextBox textBox = (TextBox) current_innerAbsolutePanel\n\t\t\t\t\t\t\t\t\t.getWidget(0);\n\t\t\t\t\t\t\ttextBox.setValue(treeItemName);\n\t\t\t\t\t\t\t// currentAbsolutePanel.remove(currentScrollPanel);\n\t\t\t\t\t\t\t// //\u70b9\u9009\u5b8c\u6bd5\u540e\uff0c\u79fb\u9664\u4e0b\u62c9\u5217\u8868\n\n\t\t\t\t\t\t\tisopen = false;\n\t\t\t\t\t\t\tAbsolutePanel outterAbsolutePanel = (AbsolutePanel) current_innerAbsolutePanel\n\t\t\t\t\t\t\t\t\t.getParent();\n\t\t\t\t\t\t\tcurrent_innerAbsolutePanel\n\t\t\t\t\t\t\t\t\t.remove(total_staticTreeWrapper); // \u5df2\u77e5\u65b0\u52a0\u5165\u7684scrollpanel\u7684index\u662f2\uff0c\u6240\u4ee5\u76f4\u63a5\u5220\u9664\uff0c\u5426\u5219\u5bb9\u6613\u51fa\u73b0\u8d8a\u754c\u9519\u8bef\n\t\t\t\t\t\t\tcurrent_innerAbsolutePanel.setSize(\"325\", \"28\");\n\t\t\t\t\t\t\tint location = outterAbsolutePanel\n\t\t\t\t\t\t\t\t\t.getWidgetIndex(current_innerAbsolutePanel);\n\t\t\t\t\t\t\tfor (; location + 1 < outterAbsolutePanel\n\t\t\t\t\t\t\t\t\t.getWidgetCount(); location++) {\n\t\t\t\t\t\t\t\tAbsolutePanel absolutePanel = (AbsolutePanel) outterAbsolutePanel\n\t\t\t\t\t\t\t\t\t\t.getWidget(location + 1);\n\t\t\t\t\t\t\t\tint relative_height = absolutePanel\n\t\t\t\t\t\t\t\t\t\t.getAbsoluteTop()\n\t\t\t\t\t\t\t\t\t\t- outterAbsolutePanel\n\t\t\t\t\t\t\t\t\t\t\t\t.getAbsoluteTop();\n\t\t\t\t\t\t\t\toutterAbsolutePanel.setWidgetPosition(\n\t\t\t\t\t\t\t\t\t\tabsolutePanel, 0,\n\t\t\t\t\t\t\t\t\t\trelative_height - 300);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tint widget_count = outterAbsolutePanel\n\t\t\t\t\t\t\t\t\t.getWidgetCount();\n\t\t\t\t\t\t\toutterAbsolutePanel.setSize(\"325\", Integer\n\t\t\t\t\t\t\t\t\t.toString(widget_count * 28));\n\t\t\t\t\t\t\tFlexTable current_flextable = (FlexTable) outterAbsolutePanel\n\t\t\t\t\t\t\t\t\t.getParent();\n\n\t\t\t\t\t\t\tint row = user_for_flextable\n\t\t\t\t\t\t\t\t\t.get(current_innerAbsolutePanel);\n\t\t\t\t\t\t\tcurrent_flextable.getCellFormatter().setHeight(\n\t\t\t\t\t\t\t\t\trow,\n\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\tInteger.toString(outterAbsolutePanel\n\t\t\t\t\t\t\t\t\t\t\t.getOffsetHeight()));\n\n\t\t\t\t\t\t\tparamInfo.setIsUserFilled(false);\n\t\t\t\t\t\t\t// \u5982\u679c\u8def\u5f84\u4fe1\u606f\u8fd8\u662f\u7a7a\u7684\uff0c\u5219\u76f4\u63a5\u4fdd\u5b58\uff0c\u5426\u5219\u628a\u8fd9\u6b21\u8def\u5f84\u4fe1\u606f\u62fc\u63a5\u5230\u4e0a\u6b21\u4fe1\u606f\u7684\u672b\u5c3e\uff0c\u5e76\u4e14\u4fdd\u8bc1\u8def\u5f84\u4fe1\u606f\u6765\u6e90\u662f\u4e0b\u62c9\u5217\u8868\u4ece\u4e0a\u5f80\u4e0b\u7684\u5f97\u5230\u7684\n\t\t\t\t\t\t\tfor (int i = 0; i < outterAbsolutePanel\n\t\t\t\t\t\t\t\t\t.getWidgetCount(); i++) {\n\t\t\t\t\t\t\t\tAbsolutePanel innerAbsolutePanel = (AbsolutePanel) outterAbsolutePanel\n\t\t\t\t\t\t\t\t\t\t.getWidget(i);\n\t\t\t\t\t\t\t\tTextBox currentTextBox = (TextBox) innerAbsolutePanel\n\t\t\t\t\t\t\t\t\t\t.getWidget(0);\n\t\t\t\t\t\t\t\t// \u8bbe\u7f6e\u4fdd\u5b58\u7684\u503c\u7684\u6765\u6e90\uff0c\u7528\u8def\u5f84\u7684\u65b9\u5f0f\u8868\u793a,\u4fdd\u5b58\u7684\u65f6\u5019\u628a\u670d\u52a1\u540d\u6362\u6210id\u53f7\n\t\t\t\t\t\t\t\tString valueString = currentTextBox\n\t\t\t\t\t\t\t\t\t\t.getValue();\n\t\t\t\t\t\t\t\t// \u5c06\u4fdd\u5b58\u7684\u8def\u5f84\u4fe1\u606f\u4e2d\u7684\u670d\u52a1\u540d\u66ff\u6362\u4e3aid\u53f7\n\t\t\t\t\t\t\t\tString[] divided = valueString.split(\"\\\\.\");\n\t\t\t\t\t\t\t\tString value_for_save;\n\n\t\t\t\t\t\t\t\t// if the last String of divided equals\n\t\t\t\t\t\t\t\t// \"currentDate\",it imply the configure is a\n\t\t\t\t\t\t\t\t// loop variable\n\t\t\t\t\t\t\t\tif (divided[divided.length - 1]\n\t\t\t\t\t\t\t\t\t\t.equals(\"currentDate (Variable)\")) {\n\t\t\t\t\t\t\t\t\tString total_name = \"\";\n\t\t\t\t\t\t\t\t\tfor (int j = divided.length - 2; j >= 0; j--) {\n\t\t\t\t\t\t\t\t\t\tString loopTaskName = divided[j];\n\t\t\t\t\t\t\t\t\t\tif (j == divided.length - 2) {\n\t\t\t\t\t\t\t\t\t\t\ttotal_name = loopTaskName;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ttotal_name = loopTaskName + \".\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t+ total_name;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tString loopID = dbe.service_name_to_id\n\t\t\t\t\t\t\t\t\t\t\t.get(total_name);\n\n\t\t\t\t\t\t\t\t\tvalue_for_save = loopID + \".\"\n\t\t\t\t\t\t\t\t\t\t\t+ \"currentDate (Variable)\";\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tint current_level = dbe.gde.tabs\n\t\t\t\t\t\t\t\t\t\t\t.getWidgetCount();\n\t\t\t\t\t\t\t\t\tif (isIsstart()) {\n\t\t\t\t\t\t\t\t\t\tString serviceName = divided[0];\n\t\t\t\t\t\t\t\t\t\tfor (int j = 1; j < current_level - 1; j++) {\n\t\t\t\t\t\t\t\t\t\t\tserviceName += \".\" + divided[j];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tString serviceID = dbe.service_name_to_id\n\t\t\t\t\t\t\t\t\t\t\t\t.get(serviceName);\n\t\t\t\t\t\t\t\t\t\tvalue_for_save = valueString\n\t\t\t\t\t\t\t\t\t\t\t\t.replace(serviceName,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tserviceID);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tString serviceName = divided[0];\n\t\t\t\t\t\t\t\t\t\tfor (int j = 1; j < current_level; j++) {\n\t\t\t\t\t\t\t\t\t\t\tserviceName += \".\" + divided[j];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tString serviceID = dbe.service_name_to_id\n\t\t\t\t\t\t\t\t\t\t\t\t.get(serviceName);\n\t\t\t\t\t\t\t\t\t\tvalue_for_save = valueString\n\t\t\t\t\t\t\t\t\t\t\t\t.replace(serviceName,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tserviceID);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// //current_level\u8868\u793a\u5f53\u524d\u7684\u5b50\u5de5\u4f5c\u6d41\u7684\u6df1\u5ea6\n\t\t\t\t\t\t\t\t// int current_level =\n\t\t\t\t\t\t\t\t// dbe.gde.tabs.getWidgetCount();\n\t\t\t\t\t\t\t\t// //\u5982\u679c\u5b57\u7b26\u4e32\u88ab\u5206\u6210\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf4\u660e\u914d\u7f6e\u53c2\u6570\u662f\u4e00\u4e2aloop\u7684\u5185\u90e8\u53d8\u91cf\n\t\t\t\t\t\t\t\t// if(divided.length==current_level){\n\t\t\t\t\t\t\t\t// String variableName =\n\t\t\t\t\t\t\t\t// divided[divided.length-1];\n\t\t\t\t\t\t\t\t// SubDiagram subDiagram = (SubDiagram)dbe;\n\t\t\t\t\t\t\t\t// LoopTask loopTask = subDiagram.loopTask;\n\t\t\t\t\t\t\t\t// String LoopID = loopTask.getID();\n\t\t\t\t\t\t\t\t// value_for_save = LoopID+\".\"+variableName;\n\t\t\t\t\t\t\t\t//\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t\t// //\u5426\u5219\u5c31\u662f\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u8f93\u51fa\u8def\u5f84\n\t\t\t\t\t\t\t\t// else{\n\t\t\t\t\t\t\t\t// if(isIsstart()){\n\t\t\t\t\t\t\t\t// String serviceName = divided[0];\n\t\t\t\t\t\t\t\t// for(int j=1;j<current_level-1;j++){\n\t\t\t\t\t\t\t\t// serviceName += \".\"+divided[j];\n\t\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t\t// String serviceID =\n\t\t\t\t\t\t\t\t// dbe.service_name_to_id.get(serviceName);\n\t\t\t\t\t\t\t\t// value_for_save =\n\t\t\t\t\t\t\t\t// valueString.replace(serviceName,serviceID);\n\t\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t\t// else{\n\t\t\t\t\t\t\t\t// String serviceName=divided[0];\n\t\t\t\t\t\t\t\t// for(int j=1;j<current_level;j++){\n\t\t\t\t\t\t\t\t// serviceName += \".\"+divided[j];\n\t\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t\t// String serviceID =\n\t\t\t\t\t\t\t\t// dbe.service_name_to_id.get(serviceName);\n\t\t\t\t\t\t\t\t// value_for_save =\n\t\t\t\t\t\t\t\t// valueString.replace(serviceName,serviceID);\n\t\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t\t//\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t\t\t// String value_for_save =\n\t\t\t\t\t\t\t\t// treeItemName.replace((CharSequence)valueString,(CharSequence)Integer.toString(service_id.get(valueString)));\n\t\t\t\t\t\t\t\t// if there is only one input configure ,\n\t\t\t\t\t\t\t\t// set the value directly,else concatenate\n\t\t\t\t\t\t\t\t// all the input configure\n\t\t\t\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\t\t\t\tparamInfo.setParamValue(value_for_save);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tparamInfo.setParamValue(paramInfo\n\t\t\t\t\t\t\t\t\t\t\t.getParamValue()\n\t\t\t\t\t\t\t\t\t\t\t+ \"+\" + value_for_save);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t\t// Get_preTask_all(); //\u5728Configure_Service\u65b9\u6cd5\u4e2d\u5df2\u7ecf\u8c03\u7528\u8fc7\u4e00\u6b21\n\t\t\t\t// \u5982\u679c\u662f\u5b50\u5de5\u4f5c\u6d41\u4e2d\u7684\u8282\u70b9\uff0c\u5219\u5728\u914d\u7f6e\u670d\u52a1\u7684\u53ef\u9009\u9879\u4e2d\uff0c\u52a0\u5165\u6b64\u5b50\u5de5\u4f5c\u6d41\u6240\u5c5e\u7684loop\u7684date\u5c5e\u6027\n\t\t\t\tif (belongToSubWorkflow) {\n\t\t\t\t\tSubDiagram subDiagram = (SubDiagram) dbe;\n\t\t\t\t\tif (subDiagram.loopTask.getText().equals(\"Loop\")) {\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstaticTree.addItem(subDiagram.loopTask.getTitle()\n\t\t\t\t\t\t\t\t+ \".\"\n\t\t\t\t\t\t\t\t+ subDiagram.loopTask.getVariableName()\n\t\t\t\t\t\t\t\t+ \" (Variable)\");\n\t\t\t\t\t}\n\t\t\t\t\tif (subDiagram.loopTask.belongToSubWorkflow) {\n\t\t\t\t\t\tSubDiagram subDiagram2 = (SubDiagram) subDiagram.loopTask.dbe;\n\t\t\t\t\t\tif (!subDiagram2.loopTask.getText().equals(\"Loop\")) {\n\t\t\t\t\t\t\tstaticTree.addItem(subDiagram2.loopTask\n\t\t\t\t\t\t\t\t\t.getTitle()\n\t\t\t\t\t\t\t\t\t+ \".\"\n\t\t\t\t\t\t\t\t\t+ subDiagram2.loopTask\n\t\t\t\t\t\t\t\t\t\t\t.getVariableName()\n\t\t\t\t\t\t\t\t\t+ \" (Variable)\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (Iterator<Workflowtasknode> iterator = preTaskList.iterator(); iterator\n\t\t\t\t\t\t.hasNext();) {\n\t\t\t\t\tWorkflowtasknode workflowtasknode = (Workflowtasknode) iterator.next();\n\t\t\t\t\t// \u5224\u65ad\u524d\u7aef\u76f8\u90bb\u8282\u70b9\u662f\u5426\u4e3achoice\uff0c\u5982\u679c\u662f\u7684\u8bdd\u8868\u793a\u5176\u63a7\u5236\u6d41\u7684\u529f\u80fd\uff0c\u4e0d\u9700\u8981\u914d\u7f6e\u6570\u636e\u5c5e\u6027\n\t\t\t\t\tif (!workflowtasknode.getText().equals(\"Choice\")) {\n\t\t\t\t\t\tif (workflowtasknode.getText().equals(\"Loop\")) {\n\t\t\t\t\t\t\tLoopTask loopTask = (LoopTask) workflowtasknode;\n\t\t\t\t\t\t\tif (loopTask.getServiceConfigure()\n\t\t\t\t\t\t\t\t\t.getMethodInfo() != null) {\n\t\t\t\t\t\t\t\tTreeItem serviceName = staticTree\n\t\t\t\t\t\t\t\t\t\t.addItem(loopTask.getTitle());\n\t\t\t\t\t\t\t\tservice_id.put(loopTask.getTitle(),\n\t\t\t\t\t\t\t\t\t\tloopTask.hashCode());\n\t\t\t\t\t\t\t\t// for(Iterator<MethodInfo> iterator2 =\n\t\t\t\t\t\t\t\t// simpleTask.getServiceInfo().getMethodInfoArray().iterator();iterator2.hasNext();){\n\t\t\t\t\t\t\t\t// MethodInfo methodInfo =\n\t\t\t\t\t\t\t\t// (MethodInfo)iterator2.next();\n\t\t\t\t\t\t\t\t// TreeItem output =\n\t\t\t\t\t\t\t\t// serviceName.addItem(methodInfo.getMethodName()+\".OutputInfo\");\n\t\t\t\t\t\t\t\t// addParamInfoInTree(output,paramInfo,\n\t\t\t\t\t\t\t\t// methodInfo.getOutputInfo().getParamInfoArray());\n\t\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t\tMethodInfo methodInfo = loopTask\n\t\t\t\t\t\t\t\t\t\t.getServiceConfigure()\n\t\t\t\t\t\t\t\t\t\t.getMethodInfo();\n\t\t\t\t\t\t\t\tif (methodInfo != null) {\n\t\t\t\t\t\t\t\t\tTreeItem output = serviceName\n\t\t\t\t\t\t\t\t\t\t\t.addItem(methodInfo\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getMethodName()\n\t\t\t\t\t\t\t\t\t\t\t\t\t+ \".OutputInfo\");\n\t\t\t\t\t\t\t\t\taddParamInfoInTree(output, paramInfo,\n\t\t\t\t\t\t\t\t\t\t\tmethodInfo.getOutputInfo()\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getParamInfoArray());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (workflowtasknode.getText().equals(\"TLoop\")) {\n\t\t\t\t\t\t\tNonFixedFor nonFixedFor = (NonFixedFor) workflowtasknode;\n\t\t\t\t\t\t\tif (nonFixedFor.getServiceConfigure()\n\t\t\t\t\t\t\t\t\t.getMethodInfo() != null) {\n\t\t\t\t\t\t\t\tTreeItem serviceName = staticTree\n\t\t\t\t\t\t\t\t\t\t.addItem(nonFixedFor.getTitle());\n\t\t\t\t\t\t\t\tservice_id.put(nonFixedFor.getTitle(),\n\t\t\t\t\t\t\t\t\t\tnonFixedFor.hashCode());\n\t\t\t\t\t\t\t\t// for(Iterator<MethodInfo> iterator2 =\n\t\t\t\t\t\t\t\t// simpleTask.getServiceInfo().getMethodInfoArray().iterator();iterator2.hasNext();){\n\t\t\t\t\t\t\t\t// MethodInfo methodInfo =\n\t\t\t\t\t\t\t\t// (MethodInfo)iterator2.next();\n\t\t\t\t\t\t\t\t// TreeItem output =\n\t\t\t\t\t\t\t\t// serviceName.addItem(methodInfo.getMethodName()+\".OutputInfo\");\n\t\t\t\t\t\t\t\t// addParamInfoInTree(output,paramInfo,\n\t\t\t\t\t\t\t\t// methodInfo.getOutputInfo().getParamInfoArray());\n\t\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t\tMethodInfo methodInfo = nonFixedFor\n\t\t\t\t\t\t\t\t\t\t.getServiceConfigure()\n\t\t\t\t\t\t\t\t\t\t.getMethodInfo();\n\t\t\t\t\t\t\t\tif (methodInfo != null) {\n\t\t\t\t\t\t\t\t\tTreeItem output = serviceName\n\t\t\t\t\t\t\t\t\t\t\t.addItem(methodInfo\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getMethodName()\n\t\t\t\t\t\t\t\t\t\t\t\t\t+ \".OutputInfo\");\n\t\t\t\t\t\t\t\t\taddParamInfoInTree(output, paramInfo,\n\t\t\t\t\t\t\t\t\t\t\tmethodInfo.getOutputInfo()\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getParamInfoArray());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// check whether preNode has been configured\n\t\t\t\t\t\t\t// ,then determine how to display the preNode\n\t\t\t\t\t\t\t// information\n\t\t\t\t\t\t\tServiceTask serviceTask = (ServiceTask)workflowtasknode;\n\t\t\t\t\t\t\tif (serviceTask.getServiceConfigure()\n\t\t\t\t\t\t\t\t\t.getMethodInfo() != null) {\n\t\t\t\t\t\t\t\tTreeItem serviceName = staticTree\n\t\t\t\t\t\t\t\t\t\t.addItem(workflowtasknode.getTitle());\n\t\t\t\t\t\t\t\tservice_id.put(workflowtasknode.getTitle(),\n\t\t\t\t\t\t\t\t\t\tworkflowtasknode.hashCode());\n\t\t\t\t\t\t\t\t// for(Iterator<MethodInfo> iterator2 =\n\t\t\t\t\t\t\t\t// simpleTask.getServiceInfo().getMethodInfoArray().iterator();iterator2.hasNext();){\n\t\t\t\t\t\t\t\t// MethodInfo methodInfo =\n\t\t\t\t\t\t\t\t// (MethodInfo)iterator2.next();\n\t\t\t\t\t\t\t\t// TreeItem output =\n\t\t\t\t\t\t\t\t// serviceName.addItem(methodInfo.getMethodName()+\".OutputInfo\");\n\t\t\t\t\t\t\t\t// addParamInfoInTree(output,paramInfo,\n\t\t\t\t\t\t\t\t// methodInfo.getOutputInfo().getParamInfoArray());\n\t\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t\tMethodInfo methodInfo = serviceTask\n\t\t\t\t\t\t\t\t\t\t.getServiceConfigure()\n\t\t\t\t\t\t\t\t\t\t.getMethodInfo();\n\t\t\t\t\t\t\t\tif (methodInfo != null) {\n\t\t\t\t\t\t\t\t\tTreeItem output = serviceName\n\t\t\t\t\t\t\t\t\t\t\t.addItem(methodInfo\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getMethodName()\n\t\t\t\t\t\t\t\t\t\t\t\t\t+ \".OutputInfo\");\n\t\t\t\t\t\t\t\t\taddParamInfoInTree(output, paramInfo,\n\t\t\t\t\t\t\t\t\t\t\tmethodInfo.getOutputInfo()\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getParamInfoArray());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttotal_staticTreeWrapper = new ScrollPanel(staticTree);\n\t\t\t\ttotal_staticTreeWrapper\n\t\t\t\t\t\t.ensureDebugId(\"cwTree-staticTree-Wrapper\");\n\t\t\t\ttotal_staticTreeWrapper\n\t\t\t\t\t\t.addStyleName(\"no-transparent-panel\");\n\t\t\t\ttotal_staticTreeWrapper.setSize(\"300px\", \"300px\");\n\n\t\t\t\t/************************************** \u5c06\u51e0\u5c42absolutepanel\u6574\u4f53\u6269\u5927 *************************/\n\t\t\t\tImage current_image = (Image) event.getSource();\n\t\t\t\tAbsolutePanel current_innerAbsolutePanel = (AbsolutePanel) current_image\n\t\t\t\t\t\t.getParent();\n\t\t\t\tAbsolutePanel outterAbsolutePanel = (AbsolutePanel) current_innerAbsolutePanel\n\t\t\t\t\t\t.getParent();\n\t\t\t\tint image_relativeheight = current_innerAbsolutePanel\n\t\t\t\t\t\t.getAbsoluteTop()\n\t\t\t\t\t\t- outterAbsolutePanel.getAbsoluteTop();\n\t\t\t\tcurrent_innerAbsolutePanel.setSize(\"325\", \"328\");\n\t\t\t\toutterAbsolutePanel.setSize(\"325\", Integer\n\t\t\t\t\t\t.toString(300 + 28 * outterAbsolutePanel\n\t\t\t\t\t\t\t\t.getWidgetCount()));\n\t\t\t\tFlexTable current_flextable = (FlexTable) outterAbsolutePanel\n\t\t\t\t\t\t.getParent(); // \u6b64\u5757\u7684\u8bbe\u7f6e\u4f7f\u5f97absolutepanel\u4e27\u5931\u4e86\u677e\u8026\u5408\u7279\u6027\n\n\t\t\t\tint row = user_for_flextable\n\t\t\t\t\t\t.get(current_innerAbsolutePanel);\n\t\t\t\tcurrent_flextable.getCellFormatter().setHeight(row, 1,\n\t\t\t\t\t\tInteger.toString(328 + image_relativeheight));\n\n\t\t\t\tcurrent_innerAbsolutePanel.add(total_staticTreeWrapper, 15,\n\t\t\t\t\t\t28);\n\n\t\t\t\tint location = outterAbsolutePanel\n\t\t\t\t\t\t.getWidgetIndex(current_innerAbsolutePanel);\n\t\t\t\tfor (; location + 1 < outterAbsolutePanel.getWidgetCount(); location++) {\n\t\t\t\t\tAbsolutePanel absolutePanel = (AbsolutePanel) outterAbsolutePanel\n\t\t\t\t\t\t\t.getWidget(location + 1);\n\t\t\t\t\tint relative_height = absolutePanel.getAbsoluteTop()\n\t\t\t\t\t\t\t- outterAbsolutePanel.getAbsoluteTop();\n\t\t\t\t\toutterAbsolutePanel.setWidgetPosition(absolutePanel, 0,\n\t\t\t\t\t\t\trelative_height + 300);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// \u82e5\u4e0b\u62c9\u5217\u8868\u5c55\u5f00\u4e86\uff0c\u5219\u5c06\u5176\u6536\u56de\n\t\t\telse {\n\n\t\t\t\tisopen = false;\n\t\t\t\tImage current_image = (Image) event.getSource();\n\t\t\t\tAbsolutePanel current_innerAbsolutePanel = (AbsolutePanel) current_image\n\t\t\t\t\t\t.getParent();\n\t\t\t\tAbsolutePanel outterAbsolutePanel = (AbsolutePanel) current_innerAbsolutePanel\n\t\t\t\t\t\t.getParent();\n\t\t\t\tcurrent_innerAbsolutePanel.remove(total_staticTreeWrapper); // \u5df2\u77e5\u65b0\u52a0\u5165\u7684scrollpanel\u7684index\u662f2\uff0c\u6240\u4ee5\u76f4\u63a5\u5220\u9664\uff0c\u5426\u5219\u5bb9\u6613\u51fa\u73b0\u8d8a\u754c\u9519\u8bef\n\t\t\t\tcurrent_innerAbsolutePanel.setSize(\"325\", \"28\");\n\t\t\t\tint location = outterAbsolutePanel\n\t\t\t\t\t\t.getWidgetIndex(current_innerAbsolutePanel);\n\t\t\t\tfor (; location + 1 < outterAbsolutePanel.getWidgetCount(); location++) {\n\t\t\t\t\tAbsolutePanel absolutePanel = (AbsolutePanel) outterAbsolutePanel\n\t\t\t\t\t\t\t.getWidget(location + 1);\n\t\t\t\t\tint relative_height = absolutePanel.getAbsoluteTop()\n\t\t\t\t\t\t\t- outterAbsolutePanel.getAbsoluteTop();\n\t\t\t\t\toutterAbsolutePanel.setWidgetPosition(absolutePanel, 0,\n\t\t\t\t\t\t\trelative_height - 300);\n\t\t\t\t}\n\t\t\t\tint widget_count = outterAbsolutePanel.getWidgetCount();\n\t\t\t\toutterAbsolutePanel.setSize(\"325\", Integer\n\t\t\t\t\t\t.toString(widget_count * 28));\n\t\t\t\tFlexTable current_flextable = (FlexTable) outterAbsolutePanel\n\t\t\t\t\t\t.getParent();\n\n\t\t\t\tint row = user_for_flextable\n\t\t\t\t\t\t.get(current_innerAbsolutePanel);\n\t\t\t\tcurrent_flextable.getCellFormatter().setHeight(\n\t\t\t\t\t\trow,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tInteger.toString(outterAbsolutePanel\n\t\t\t\t\t\t\t\t.getOffsetHeight()));\n\t\t\t}\n\n\t\t}\n\n\t});\n\tdownlist_panelAbsolutePanel.add(downlist, 290, 2);\n\tdownlist.setSize(\"25\", \"23\");\n\n\treturn downlist_panelAbsolutePanel;\n}", "path": "src\\main\\com\\ics\\tcg\\web\\workflow\\client\\task\\ServiceTask.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "/** save a user */\n", "func_signal": "@Override\npublic Integer check(String username)", "code": "{\n\tint id = userdao.getIDByAccount(username);\n\treturn id;\n}", "path": "src\\main\\com\\ics\\tcg\\web\\reg\\server\\Reg_ServiceImpl.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "/**\n * parse the xml to create serviceConfigure information\n * @throws ParserConfigurationException\n * @throws SAXException\n * @throws IOException\n */\n", "func_signal": "public void parse() throws ParserConfigurationException, SAXException,\n\t\tIOException", "code": "{\n\tFile xmlFile = new File(xmlFilePath);\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(xmlFile);\n\n\tElement rootElement = doc.getDocumentElement();\n\tcreateServiceInfo(rootElement);\n}", "path": "src\\main\\com\\ics\\tcg\\web\\workflow\\server\\ServiceConfigureXmlParse.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "/**\n * @author lms\n * @param rootElement\n */\n", "func_signal": "public void createServiceInfo(Element rootElement)", "code": "{\n\tServiceConfigureInfo serviceInfo;\n\tNodeList nodeList = rootElement.getChildNodes();\n\n\tfor (int index = 0; index < nodeList.getLength(); index++) {\n\t\tNode node = nodeList.item(index);\n\n\t\tif (node instanceof Element) {\n\t\t\tserviceInfo = new ServiceConfigureInfo();\n\t\t\tNodeList childNodeList = node.getChildNodes();\n\n\t\t\tfor (int itemIndex = 0; itemIndex < childNodeList.getLength(); itemIndex++) {\n\t\t\t\tNode childNode = childNodeList.item(itemIndex);\n\n\t\t\t\tif (childNode instanceof Element) {\n\t\t\t\t\tif (((Element) childNode).getTagName().equals(\"Name\")) {\n\t\t\t\t\t\tserviceInfo.setServiceName(childNode\n\t\t\t\t\t\t\t\t.getTextContent());\n\t\t\t\t\t}\n\n\t\t\t\t\telse if (((Element) childNode).getTagName().equals(\n\t\t\t\t\t\t\t\"ClassPath\")) {\n\t\t\t\t\t\tserviceInfo.setServiceClassPath(childNode\n\t\t\t\t\t\t\t\t.getTextContent());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tserviceConfigureInfosList.add(serviceInfo);\n\t\t}\n\t}\n}", "path": "src\\main\\com\\ics\\tcg\\web\\workflow\\server\\ServiceConfigureXmlParse.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "// \u5224\u65ad\u6bcf\u4e2a\u8f93\u5165\u9879\u662f\u5426\u90fd\u914d\u7f6e\u8fc7\u4e86\uff0c\u5982\u679c\u914d\u7f6e\u4e86\uff0c\u5219\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\n", "func_signal": "public boolean check_Paraminfo(ParamInfo paramInfo)", "code": "{\n\tif (paramInfo.isPrimitive()) {\n\t\tif (paramInfo.getParamValue() != null) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\tfor (Iterator<ParamInfo> iterator = paramInfo.getFieldInfoArray()\n\t\t\t\t.iterator(); iterator.hasNext();) {\n\t\t\tif (check_Paraminfo((ParamInfo) iterator.next()) == false) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}", "path": "src\\main\\com\\ics\\tcg\\web\\workflow\\client\\task\\ServiceTask.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "/**\n * Constructor that uses default text values for buttons.\n * \n * @param labelText\n *            The initial text of the label.\n * @param onUpdate\n *            Handler object for performing actions once label is updated.\n */\n", "func_signal": "public ChoiceTask(String labelText, String in, String out, String fault,\n\t\tDiagramBuilder d)", "code": "{\n\tdbe = d;\n\tcreateEditableLabel(labelText, in, out, fault);\n}", "path": "src\\main\\com\\ics\\tcg\\web\\workflow\\client\\task\\ChoiceTask.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "/** workflow */\n", "func_signal": "public Panel_Workflow(Panel_Overview panel_Overview,\n\t\tPanel_Calendar panelGoogleCalendar)", "code": "{\n\n\toverview_panel = panel_Overview;\n\tcalendar_panel = panelGoogleCalendar;\n\tbase = new WorkflowEditModule(overview_panel);\n\tbase.onModuleLoad();\n\n\t// workflow style\n\tthis.setSize(\"100%\", \"100%\");\n\tDOM.setStyleAttribute(this.getElement(), \"borderLeft\",\n\t\t\t\"10px solid #C3D9FF\");\n\tDOM.setStyleAttribute(this.getElement(), \"borderBottom\",\n\t\t\t\"10px solid #C3D9FF\");\n\n\t// Create a pop up to show the contact info when a contact is clicked\n\tPopup = new PopupPanel(true, false);\n\tPopup.removeStyleName(\"gwt-PopupPanel\");\n\tPopup.setSize(\"80\", \"180\");\n\n\t// head\n\tLabel head = new Label(\"Event&Workflow\");\n\t{\n\t\thead.setSize(\"100%\", \"30\");\n\t\tDOM.setStyleAttribute(head.getElement(), \"paddingTop\", \"6px\");\n\t\tDOM.setStyleAttribute(head.getElement(), \"paddingBottom\", \"3px\");\n\t\tDOM.setStyleAttribute(head.getElement(), \"fontFamily\",\n\t\t\t\t\"Arial, sans-serif\");\n\t\tDOM.setStyleAttribute(head.getElement(), \"fontSize\", \"13pt\");\n\t\tDOM.setStyleAttribute(head.getElement(), \"fontWeight\", \"bold\");\n\t\tDOM.setStyleAttribute(head.getElement(), \"backgroundColor\",\n\t\t\t\t\"#C3D9FF\");\n\t}\n\tthis.add(head, 0, 0);\n\n\t// confirm\n\tfinal AbsolutePanel confirm = new AbsolutePanel();\n\t{\n\t\tconfirm.setWidth(\"100%\");\n\t\tconfirm.setHeight(\"30\");\n\t\tDOM.setStyleAttribute(confirm.getElement(), \"backgroundColor\",\n\t\t\t\t\"#E1EDF9\");\n\t\tHyperlink hyperlink = new Hyperlink(\"\u00ab Back to Calendar\", \"back\");\n\t\tDOM.setStyleAttribute(hyperlink.getElement(), \"fontSize\", \"10pt\");\n\t\thyperlink.addClickHandler(new ClickHandler() {\n\t\t\t@Override\n\t\t\tpublic void onClick(ClickEvent event) {\n\t\t\t\toverview_panel.calendar_show();\n\t\t\t}\n\t\t});\n\t\tButton ok = new Button(\"Save\");\n\t\tButton cancel = new Button(\"Cancel\");\n\t\tButton delete = new Button(\"Delete\");\n\t\tok.removeStyleName(\"gwt-Button\");\n\t\tcancel.removeStyleName(\"gwt-Button\");\n\t\tdelete.removeStyleName(\"gwt-Button\");\n\t\tDOM.setStyleAttribute(ok.getElement(), \"fontSize\", \"8pt\");\n\t\tDOM.setStyleAttribute(cancel.getElement(), \"fontSize\", \"8pt\");\n\t\tDOM.setStyleAttribute(delete.getElement(), \"fontSize\", \"8pt\");\n\n\t\tconfirm.add(hyperlink, 10, 10);\n\t\tconfirm.add(ok, 130, 5);\n\t\tconfirm.add(cancel, 175, 5);\n\t\tconfirm.add(delete, 228, 5);\n\t}\n\tthis.add(confirm, 0, 30);\n\n\t// calendar settings\n\tAbsolutePanel calendarsettings = new AbsolutePanel();\n\tcalendarsettings.setWidth(\"100%\");\n\tcalendarsettings.setHeight(\"140\");\n\tAbsolutePanel detailpanel = setDetail();\n\tcalendarsettings.add(detailpanel, 10, 10);\n\tAbsolutePanel riskPanel = setRisk();\n\tcalendarsettings.add(riskPanel, detailpanel.getOffsetWidth() + 30, 10);\n\tthis.add(calendarsettings, 0, 60);\n\n\t// add workflow\n\tfinal AbsolutePanel workflowPanel_outer = new AbsolutePanel();\n\tworkflowPanel_outer.setWidth(\"100%\");\n\tworkflowPanel_outer.setHeight(\"100%\");\n\n\tworkflowPanel_inner = new AbsolutePanel();\n\tworkflowPanel_inner.setSize(\"99%\", \"99%\");\n\tDOM.setStyleAttribute(workflowPanel_inner.getElement(), \"border\",\n\t\t\t\"10px solid #DDDDDD\");\n\tDOM.setStyleAttribute(workflowPanel_inner.getElement(), \"borderTop\",\n\t\t\t\"5px solid #DDDDDD\");\n\n\tLabel label_w = new Label(\"Edit Workflow\");\n\tlabel_w.setWidth(\"100%\");\n\tlabel_w.setHeight(\"22\");\n\tDOM.setStyleAttribute(label_w.getElement(), \"backgroundColor\",\n\t\t\t\"#DDDDDD\");\n\tDOM.setStyleAttribute(label_w.getElement(), \"fontSize\", \"11pt\");\n\tDOM.setStyleAttribute(label_w.getElement(), \"fontWeight\", \"bold\");\n\tworkflowPanel_inner.add(label_w, 0, 0);\n\tworkflowPanel_inner.add(base.tabs, 0, 22);\n\tworkflowPanel_outer.add(workflowPanel_inner, 10, 15);\n\tthis.add(workflowPanel_outer, 0, 200);\n\n\t// save button click handler\n\t((Button) (confirm.getWidget(1))).addClickHandler(new ClickHandler() {\n\t\t@Override\n\t\tpublic void onClick(ClickEvent event) {\n\n\t\t\ttime_Start = ((DateBox) textBox2.getWidget(0)).getTextBox()\n\t\t\t\t\t.getText()\n\t\t\t\t\t+ \" \" + ((TextBox) textBox2.getWidget(1)).getText();\n\t\t\ttime_End = ((DateBox) textBox2.getWidget(4)).getTextBox()\n\t\t\t\t\t.getText()\n\t\t\t\t\t+ \" \" + ((TextBox) textBox2.getWidget(3)).getText();\n\n\t\t\t// set client_workflow value\n\t\t\tClient_Workflow client_Workflow = base.diagramBuilderExample\n\t\t\t\t\t.save_workflow_in_workflowmode();\n\t\t\tif (base.diagramBuilderExample.check == false) {\n\n\t\t\t} else {\n\t\t\t\t// set appointment value\n\t\t\t\tcalendar_panel.workflowApp.setDescription(text_Des);\n\t\t\t\tcalendar_panel.workflowApp.setEnd(dateFormat\n\t\t\t\t\t\t.parse(time_End));\n\t\t\t\tcalendar_panel.workflowApp.setStart(dateFormat\n\t\t\t\t\t\t.parse(time_Start));\n\t\t\t\tcalendar_panel.workflowApp.setTitle(text_What);\n\t\t\t\tif (calendar_panel.workflowApp.getStart().getYear() != calendar_panel.workflowApp\n\t\t\t\t\t\t.getEnd().getYear()\n\t\t\t\t\t\t|| calendar_panel.workflowApp.getStart().getMonth() != calendar_panel.workflowApp\n\t\t\t\t\t\t\t\t.getEnd().getMonth()\n\t\t\t\t\t\t|| calendar_panel.workflowApp.getStart().getDate() != calendar_panel.workflowApp\n\t\t\t\t\t\t\t\t.getEnd().getDate()) {\n\t\t\t\t\tcalendar_panel.workflowApp.setMultiDay(true);\n\t\t\t\t}\n\t\t\t\t// set calendar_client\n\t\t\t\tcalendar_panel.workflowApp.setAtoC();\n\t\t\t\tcalendar_panel.workflowApp.calendarClient\n\t\t\t\t\t\t.setUserid(overview_panel.userid);\n\t\t\t\tcalendar_panel.workflowApp.calendarClient.setDone(false);\n\n\t\t\t\t// if this is a new event (cos calendarid=null)\n\t\t\t\tif (calendar_panel.workflowApp.calendarClient\n\t\t\t\t\t\t.getCalendarid() == null\n\t\t\t\t\t\t|| calendar_panel.workflowApp.calendarClient\n\t\t\t\t\t\t\t\t.getCalendarid() == 0) {\n\n\t\t\t\t\toverview_panel.calendar_Service.saveCalendar(\n\t\t\t\t\t\t\tcalendar_panel.workflowApp.calendarClient,\n\t\t\t\t\t\t\tclient_Workflow, new AsyncCallback<Integer>() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void onFailure(Throwable caught) {\n\t\t\t\t\t\t\t\t\tWindow.alert(\"fail to save\");\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void onSuccess(Integer result) {\n\t\t\t\t\t\t\t\t\tif (result != -1 && result != -2\n\t\t\t\t\t\t\t\t\t\t\t&& result != null) {\n\t\t\t\t\t\t\t\t\t\tcalendar_panel.workflowApp.calendarClient\n\t\t\t\t\t\t\t\t\t\t\t\t.setCalendarid(result);\n\t\t\t\t\t\t\t\t\t\tcalendar_panel.dayView\n\t\t\t\t\t\t\t\t\t\t\t\t.addAppointment(calendar_panel.workflowApp);\n\t\t\t\t\t\t\t\t\t\toverview_panel.calendar_show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (result == -1)\n\t\t\t\t\t\t\t\t\t\tWindow.alert(\"NamingError\");\n\t\t\t\t\t\t\t\t\tif (result == -2)\n\t\t\t\t\t\t\t\t\t\tWindow.alert(\"IOError\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t} else\n\t\t\t\t// else update the event\n\t\t\t\t{\n\t\t\t\t\toverview_panel.calendar_Service.updateCalendar(\n\t\t\t\t\t\t\tcalendar_panel.workflowApp.calendarClient,\n\t\t\t\t\t\t\tclient_Workflow, new AsyncCallback<Integer>() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void onFailure(Throwable caught) {\n\t\t\t\t\t\t\t\t\tWindow.alert(\"fail to update\");\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void onSuccess(Integer result) {\n\t\t\t\t\t\t\t\t\tif (result != -1 && result != -2\n\t\t\t\t\t\t\t\t\t\t\t&& result != null) {\n\t\t\t\t\t\t\t\t\t\tcalendar_panel.dayView\n\t\t\t\t\t\t\t\t\t\t\t\t.updateAppointment(calendar_panel.workflowApp);\n\t\t\t\t\t\t\t\t\t\toverview_panel.calendar_show();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (result == -1)\n\t\t\t\t\t\t\t\t\t\tWindow.alert(\"NamingError\");\n\t\t\t\t\t\t\t\t\tif (result == -2)\n\t\t\t\t\t\t\t\t\t\tWindow.alert(\"IOError\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t});\n\n\t// cancel button click handler\n\t((Button) (confirm.getWidget(2))).addClickHandler(new ClickHandler() {\n\t\t@Override\n\t\tpublic void onClick(ClickEvent event) {\n\t\t\t// turn the appointment to original\n\t\t\toverview_panel.calendar_show();\n\t\t}\n\t});\n\n\t// delete button click handler\n\t((Button) (confirm.getWidget(3))).addClickHandler(new ClickHandler() {\n\t\t@Override\n\t\tpublic void onClick(ClickEvent event) {\n\t\t\t// turn the appointment to original\n\t\t\tif (calendar_panel.workflowApp.calendarClient.getCalendarid() == null\n\t\t\t\t\t|| calendar_panel.workflowApp.calendarClient\n\t\t\t\t\t\t\t.getCalendarid() == 0) {\n\t\t\t\toverview_panel.calendar_show();\n\t\t\t} else {\n\t\t\t\toverview_panel.calendar_Service.deleteCalendar(\n\t\t\t\t\t\tcalendar_panel.workflowApp.calendarClient\n\t\t\t\t\t\t\t\t.getCalendarid(),\n\t\t\t\t\t\tnew AsyncCallback<String>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onFailure(Throwable caught) {\n\t\t\t\t\t\t\t\tWindow.alert(\"fail to remove the calendar\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onSuccess(String result) {\n\t\t\t\t\t\t\t\tcalendar_panel.dayView\n\t\t\t\t\t\t\t\t\t\t.removeAppointment(calendar_panel.workflowApp);\n\t\t\t\t\t\t\t\toverview_panel.calendar_show();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\t// resize the window\n\tthis.setHeight(Window.getClientHeight() - 90 + \"px\");\n\tWindow.addResizeHandler(new ResizeHandler() {\n\t\t@Override\n\t\tpublic void onResize(ResizeEvent event) {\n\t\t\tint h = event.getHeight();\n\t\t\tpanel_Workflow.setHeight(h - 90 + \"px\");\n\t\t}\n\t});\n}", "path": "src\\main\\com\\ics\\tcg\\web\\user\\client\\panels\\Panel_Workflow.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "// public ArrayList<String> GetServiceName() {\n// ServiceConfigureXmlParse xmlParse = new ServiceConfigureXmlParse();\n// ArrayList<ServiceConfigureInfo> serviceInfolist = new\n// ArrayList<ServiceConfigureInfo>();\n//\t\t\n// try\n// {\n// xmlParse.parse();\n// }\n// catch (ParserConfigurationException e)\n// {\n// e.printStackTrace();\n// }\n// catch (SAXException e)\n// {\n// e.printStackTrace();\n// }\n// catch (IOException e)\n// {\n// e.printStackTrace();\n// }\n// serviceInfolist = xmlParse.getServiceConfigureInfosList();\n//\t\t\n// ArrayList<String> serviceNameList = new ArrayList<String>();\n// for(Iterator iterator = serviceInfolist.iterator();iterator.hasNext();){\n// ServiceConfigureInfo serviceConfigureInfo =\n// (ServiceConfigureInfo)iterator.next();\n// serviceNameList.add(serviceConfigureInfo.getServiceName());\n// }\n//\t\t\n// return serviceNameList;\n// }\n", "func_signal": "public ServiceInfo getServiceInfo(String ServiceName)", "code": "{\n\n\tCreateServiceInfo service = new CreateServiceInfo(ServiceName);\n\tServiceInfo serviceInfo = new ServiceInfo();\n\n\ttry {\n\t\tservice.parseClass();\n\t}\n\n\tcatch (ClassNotFoundException e) {\n\t\te.printStackTrace();\n\t}\n\n\tserviceInfo = service.getServiceInfo();\n\n\treturn serviceInfo;\n}", "path": "src\\main\\com\\ics\\tcg\\web\\workflow\\server\\ServerStatus_ServiceImpl.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "// update output display ,traverse the outport list and display them again\n", "func_signal": "public void refresh()", "code": "{\n\t// int addheight = 20;\n\tpanel1.setHeight(\"60\");\n\tinstance.setHeight(\"60\");\n\tsetHeight(\"60\");\n\tinstance.add(panel2, 0, 10);\n\tinstance.add(panel4, 85, 45);\n\tfor (int index = 0; index < outport_count; index++) {\n\t\tint panel1_original_height = panel1.getOffsetHeight();\n\t\tint instance_original_height = instance.getOffsetHeight();\n\t\tint looptask_original_height = getOffsetHeight();\n\t\tpanel1.setHeight(Integer.toString(panel1_original_height + 20));\n\t\tinstance.setHeight(Integer.toString(instance_original_height + 20));\n\t\tsetHeight(Integer.toString(looptask_original_height + 20));\n\n\t\tLabel key_label = (Label) label_array.get(index);\n\t\tMyPanel value_panel = (MyPanel) outport.get(key_label);\n\t\tpanel1.add(key_label, 24, 10 + (index) * 20);\n\t\tinstance.add(value_panel, 85, 10 + index * 20);\n\t\tinstance.add(panel4, 85, 65 + index * 20);\n\t}\n}", "path": "src\\main\\com\\ics\\tcg\\web\\workflow\\client\\task\\ChoiceTask.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "/** create mailbox table */\n", "func_signal": "private PagingTable createTable()", "code": "{\n\t// Set up the columns we want to be displayed\n\t// final CheckBox checkAll = new CheckBox();\n\tfinal Column[] columns = {\n\t\t\tnew Column(0, false, \"\", \"8\", new CheckBoxRenderer()),\n\t\t\tnew Column(1, false, \"Sender\", \"100\"),\n\t\t\tnew Column(2, false, \"Mail\", \"500\"),\n\t\t\tnew Column(3, false, \"SentTime\", \"15\"),\n\t\t\tnew Column(4, false, \"id\", \"0\") };\n\t// data\n\tfinal Row[] rows = new Row[0];\n\t// Now configure the table\n\tColumnLayout layout = new ColumnLayout(columns);\n\tfinal PagingBar pagingBar = new PagingBar(0, 0, 5, new int[] { 5, 10,\n\t\t\t20, 50, 100 });\n\tfinal PagingTable table = new PagingTable(layout, pagingBar);\n\t// Create provider\n\tContentProvider provider = new ContentProvider() {\n\t\t@Override\n\t\tpublic void load(int begin, int end, int sortId, boolean ascending) {\n\t\t\ttable.onSuccess(new Rows(rows, 0, -1, false));\n\t\t}\n\t};\n\ttable.setContentProvider(provider);\n\ttable.show(4, false);\n\ttable.update();\n\treturn table;\n}", "path": "src\\main\\com\\ics\\tcg\\web\\user\\client\\panels\\Panel_Mail.java", "repo_name": "mathematix/artemis-calendar", "stars": 6, "license": "None", "language": "java", "size": 5771}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jLabel1 = new javax.swing.JLabel();\n    jPanel1 = new javax.swing.JPanel();\n\n    setClosable(true);\n    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n    setName(\"Form\"); // NOI18N\n\n    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(kryptoprojekt.KryptoProjektApp.class).getContext().getResourceMap(HammingWeightFrame.class);\n    jLabel1.setText(resourceMap.getString(\"jLabel1.text\")); // NOI18N\n    jLabel1.setName(\"jLabel1\"); // NOI18N\n\n    jPanel1.setName(\"jPanel1\"); // NOI18N\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 380, Short.MAX_VALUE)\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 286, Short.MAX_VALUE)\n    );\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)\n                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel1)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    pack();\n}", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\coderFrames\\HammingWeightFrame.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "/** Creates new form MultiplyFrame */\n", "func_signal": "public MultiplicationFrame(ConnectionHandler handler)", "code": "{\n    super(handler);\n    initComponents();\n    initLogicComponents();\n    jLabel1.setText(Kit.xmlReader.getTagElement(\"MultiplicationFrame\", \"HeaderLabel\"));\n}", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\basicFrames\\MultiplicationFrame.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "/** Creates new form hammingDistanceFrame */\n", "func_signal": "public HammingWeightFrame(ConnectionHandler handler)", "code": "{\n    super(handler);\n    initComponents();\n    initLogicComponents();\n    jLabel1.setText(Kit.xmlReader.getTagElement(\"HammingWeightFrame\", \"HeaderLabel\"));\n}", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\coderFrames\\HammingWeightFrame.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "/** Creates new form PrimeFieldElementFrame */\n", "func_signal": "public PrimeFieldElementFrame(ConnectionHandler handler)", "code": "{\n    super(handler);\n    initComponents();\n    initLogicComponents();\n    jLabel1.setText(Kit.xmlReader.getTagElement(\"PrimeFieldElementFrame\", \"HeaderLabel\"));\n    addTableBtn.setText(Kit.xmlReader.getTagElement(\"PrimeFieldElementFrame\", \"AddTableBtn\"));\n    mulTableBtn.setText(Kit.xmlReader.getTagElement(\"PrimeFieldElementFrame\", \"MulTableBtn\"));\n}", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\basicFrames\\PrimeFieldElementFrame.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jLabel1 = new javax.swing.JLabel();\n    jPanel1 = new javax.swing.JPanel();\n\n    setClosable(true);\n    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n    setName(\"Form\"); // NOI18N\n\n    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(kryptoprojekt.KryptoProjektApp.class).getContext().getResourceMap(MatrixMultiplyFrame.class);\n    jLabel1.setText(resourceMap.getString(\"jLabel1.text\")); // NOI18N\n    jLabel1.setName(\"jLabel1\"); // NOI18N\n\n    jPanel1.setName(\"jPanel1\"); // NOI18N\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 380, Short.MAX_VALUE)\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 286, Short.MAX_VALUE)\n    );\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)\n                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel1)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    pack();\n}", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\matrixFrames\\MatrixMultiplyFrame.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "/** Creates new form NewJFrame */\n", "func_signal": "public MatrixMultiplyFrame(ConnectionHandler handler)", "code": "{\n    super(handler);\n    initComponents();\n    initLogicComponents();\n    jLabel1.setText(Kit.xmlReader.getTagElement(\"MatrixMultiplyFrame\", \"HeaderLabel\"));\n}", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\matrixFrames\\MatrixMultiplyFrame.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_jButton1ActionPerformed\n        ResultFrame frame = new ResultFrame(getTitle() + \"_extension\");\n        frame.setLocation(getX(), getY());\n        frame.setSize(320, 240);\n        frame.addText(extension);\n        frame.setVisible(true);\n        getParent().add(frame);\n    }", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\basicFrames\\GCDFrame.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void addTableBtnActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_addTableBtnActionPerformed\n        KryptoType baseValue;\n        try {\n            if (textField2.getResult() != null) {\n                baseValue = (KryptoType) textField2.getResult();\n            } else {\n                baseValue = new Z(textField2.getText());\n            }\n\n            ResultFrame frame = new ResultFrame(getTitle() + \"_extension\");\n            frame.setLocation(getX(), getY());\n            frame.setSize(320, 240);\n            frame.addText(new PrimeFieldElement(new Z(1), (Z) baseValue).getAddTable().toStringWithIndex());\n            frame.setVisible(true);\n            getParent().add(frame);\n        } catch (Exception e) {\n            JOptionPane.showMessageDialog(null, Kit.xmlReader.getTagElement(\"PrimeFieldElementFrame\", \"guiTableException\"));\n        }\n    }", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\basicFrames\\PrimeFieldElementFrame.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "/* Determine the factors of an even number and returns the power to the base 2 an the odd factor.\n * If the number can't broken into factors, -1 is returned.\n * If non even number was passed, an exception will thrown.\n */\n", "func_signal": "protected Tuple<E, E> factorizeEven(E evenNumber)", "code": "{\n    //Precondition\n    assert evenNumber.compareTo(evenNumber.newInstance(\"1\")) > 0 : \"An even number cannot be less than <2. argument passed: \" +evenNumber;\n\n    E dividend;\n    final E divisor = evenNumber.newInstance(\"2\");\n    E quotient = evenNumber;\n    int power = 0;\n    if (!quotient.mod(divisor).isZERO()){\n        throw new IllegalArgumentException(\"You have to pass an odd number!!!\");\n    }\n    while(quotient.mod(divisor).isZERO()){\n        dividend = quotient;\n        quotient = dividend.divide(divisor);\n        ++power;\n        assert evenNumber.compareTo(Basic.squareAndMultiply(divisor, evenNumber.newInstance(String.valueOf(power))).first()) >=0: \"Too many Iterations. even number: \" +evenNumber+ \", \" +power+ \" to the power of \" +divisor+\": \" +Basic.squareAndMultiply(divisor, evenNumber.newInstance(String.valueOf(power)));\n    }\n    if (Basic.squareAndMultiply(divisor, evenNumber.newInstance(String.valueOf(power))).first().multiply(quotient).compareTo(evenNumber) == 0) {\n        //Postcondition\n        assert (evenNumber.newInstance(String.valueOf(power))).compareTo(evenNumber.newInstance(\"0\")) >=0 ||  (evenNumber.newInstance(String.valueOf(quotient))).compareTo(evenNumber.newInstance(\"0\")) >0:\"power or quotient(odd number) have a wrong value. power: \" +power+ \", quotient: \" +quotient;\n        //quotient is the odd factor\n        return new Tuple(evenNumber.newInstance(String.valueOf(power)), quotient);\n    } else{\n        return new Tuple(evenNumber.newInstance(\"-1\"), evenNumber.newInstance(\"-1\"));\n    }\n}", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\model\\MillerRabinTest.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "//GEN-LAST:event_addTableBtnActionPerformed\n", "func_signal": "private void mulTableBtnActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_mulTableBtnActionPerformed\n        KryptoType baseValue;\n        try {\n            if (textField2.getResult() != null) {\n                baseValue = (KryptoType) textField2.getResult();\n            } else {\n                baseValue = new Z(textField2.getText());\n            }\n\n            ResultFrame frame = new ResultFrame(getTitle() + \"_extension\");\n            frame.setLocation(getX(), getY());\n            frame.setSize(320, 240);\n            frame.addText(new PrimeFieldElement(new Z(1), (Z) baseValue).getMultiplyTable().toStringWithIndex());\n            frame.setVisible(true);\n            getParent().add(frame);\n        } catch (Exception e) {\n            JOptionPane.showMessageDialog(null, Kit.xmlReader.getTagElement(\"PrimeFieldElementFrame\", \"guiTableException\"));\n        }\n    }", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\basicFrames\\PrimeFieldElementFrame.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void initLogicComponents()", "code": "{\n\n        textField1.addKeyListener(new KeyListener() {\n\n            public void keyTyped(KeyEvent e) {\n            }\n\n            public void keyPressed(KeyEvent e) {\n            }\n\n            public void keyReleased(KeyEvent e) {\n                if (LogicValidator.isInteger(textField1.getText())) {\n                    textField1.setForeground(Color.black);\n                } else {\n                    textField1.setForeground(Color.red);\n                }\n            }\n        });\n\n        textField2.addKeyListener(new KeyListener() {\n\n            public void keyTyped(KeyEvent e) {\n            }\n\n            public void keyPressed(KeyEvent e) {\n            }\n\n            public void keyReleased(KeyEvent e) {\n                if (LogicValidator.isInteger(textField2.getText())) {\n                    textField2.setForeground(Color.black);\n                } else {\n                    textField2.setForeground(Color.red);\n                }\n            }\n        });\n\n        jPanel1.setLayout(new GridBagLayout());\n        GridBagConstraints c = new GridBagConstraints();\n        c.weightx = 0.495;\n        c.fill = GridBagConstraints.BOTH;\n        c.gridx = 0;\n        c.gridy = 0;\n        jPanel1.add(textField1, c);\n\n        c.weightx = 0.01;\n        c.fill = GridBagConstraints.BOTH;\n        c.gridx = 1;\n        c.gridy = 0;\n        jPanel1.add(new JLabel(\"*\"), c);\n\n        c.weightx = 0.495;\n        c.fill = GridBagConstraints.BOTH;\n        c.gridx = 2;\n        c.gridy = 0;\n        jPanel1.add(textField2, c);\n\n        c.weightx = 1;\n        c.fill = GridBagConstraints.BOTH;\n        c.gridwidth = 3;\n        c.gridx = 0;\n        c.gridy = 1;\n        jPanel1.add(getDragList(new Object[]{getTitle() + \"_product\"}), c);\n\n        this.setSize(160, 120);\n    }", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\basicFrames\\MultiplicationFrame.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "/**\n * Starts the Lucas-Test for natural numbers.\n *\n * @return List of results by using the Lucas-Test (whether 'modul' is probably prime, probability, intermediate values).\n * @throws IllegalArgumentException  IllegalArgumentException if the paramters are incorrect (bases have to be: 1 < base < moduls, moduls have to be: 1 < modul > bases. modul = {@code prime factors + summand})\n */\n", "func_signal": "public ArrayList<Triple<Boolean, Double, LinkedList<String>>> test()\n            throws IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, ClassCastException", "code": "{\n    ArrayList<Z> prime;\n    double probability;\n\n    //the passed parameters are correct/incorrect\n    boolean checkPrimeArgAnswer = checkPrimeArguments().first();\n    //message about the parameters answer correct/incorrect (e.g. Base 'a' too large ...)\n    String argsCorrectMessage = checkPrimeArguments().second();\n\n    ArrayList<Triple<Boolean, Double, LinkedList<String>>> primeResult = new ArrayList<Triple<Boolean, Double, LinkedList<String>>>();\n    if (checkPrimeArgAnswer) {\n        assert new TreeSet<Z>(maxBases).first().compareTo(new Z(1)) >= 0: \"Found prime number less than 2: value prime number = \" +new TreeSet<Z>(maxBases).first().add(new Z(1))+ \", value base = \"+new TreeSet<Z>(maxBases).first();\n        ArrayList<TreeSet<Z>> checkBases = new ArrayList<TreeSet<Z>>(basesSet);\n        ArrayList<ArrayList<Tuple<Z, Z>>> listTuplesPrimeFactors = new ArrayList<ArrayList<Tuple<Z, Z>>>(primeFactorsInListTuples);\n        ArrayList<Tuple<Z, Z>> summands = new ArrayList<Tuple<Z, Z>>(summandCollection);\n        ArrayList<Z> maxBasesA = new ArrayList<Z>(maxBases);\n        Triple<Boolean, Double, LinkedList<String>> result;\n\n        int factorLines = primeFactorsCollection.size();\n        for (int i = 0; i<factorLines; i++){\n            prime = new ArrayList();\n            prime.add(calculatePrime(listTuplesPrimeFactors.get(i), summands.get(i)));\n            intermediateValues = new LinkedList<String>();\n            intermediateValues.add(prime.get(i).toString());\n            result = new FermatZ(checkBases.get(i), prime, false).test().get(0);\n            intermediateValues.add(result.third().getFirst());\n            //all numbers that have passed the Fermat-Test\n            if (result.first()){\n                //boolean isPrime = lucasCheck(checkBases.get(i), getPrimeFactors(listTuplesPrimeFactors.get(i)), prime.get(0)); //please keep\n                boolean isPrime = lucasCheck(checkBases.get(i), new ArrayList<Z>(primeFactorizationTreeSet(listTuplesPrimeFactors.get(i))), prime.get(0)); //only to test the phi function\n                //all numbers that have passed the Lucas-Test\n                if(isPrime){\n                    if (calcProb){\n                        //Postcondition\n                        assert checkPrimeArgAnswer == true && isPrime == true && calcProb == true: \"checkPrimeArgAnswer or isPrime have a false state: checkPrimeArgAnswer = \" +checkPrimeArgAnswer+ \", isPrime = \" +isPrime;\n                        primeResult.add(new Triple<Boolean, Double, LinkedList<String>>(isPrime, 1.0, intermediateValues));\n                        continue;\n                    } else{\n                        assert checkPrimeArgAnswer == true && isPrime == true && calcProb == false: \"checkPrimeArgAnswer or isPrime have a false state: checkPrimeArgAnswer = \" +checkPrimeArgAnswer+ \", isPrime = \" +isPrime;\n                        //no probability should be calculated\n                        primeResult.add(new Triple<Boolean, Double, LinkedList<String>>(isPrime, -1.0, intermediateValues));\n                        continue;\n                    }\n                }\n             //all numbers that have failed the Fermat-Test\n            }else{\n                primeResult.add(new Triple<Boolean, Double, LinkedList<String>>(false, 1.0, intermediateValues));\n                continue;\n            }\n            /*\n             * all numbers that have failed the Lucas-Test\n             * probability = 1 --> it is not a prime number; probability = -2 --> it could be a prime number\n             */\n            //probability = calculateProbability(maxBasesA.get(i), checkBases.get(i), listTuplesPrimeFactors.get(i));\n            probability = calculateProbability(maxBasesA.get(i), checkBases.get(i), calculatePrime(listTuplesPrimeFactors.get(i), summands.get(i)));\n            primeResult.add(new Triple<Boolean, Double, LinkedList<String>>(false, probability, intermediateValues));\n        }\n        //Postcondition\n        assert !primeResult.isEmpty():\"primeResult is empty: primeResult = \" +primeResult.toString();\n        return primeResult;\n    } else{\n        throw new IllegalArgumentException(argsCorrectMessage);\n    }\n}", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\model\\LucasZ.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jLabel1 = new javax.swing.JLabel();\n    jPanel1 = new javax.swing.JPanel();\n    jButton1 = new javax.swing.JButton();\n\n    setClosable(true);\n    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n    setName(\"Form\"); // NOI18N\n\n    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(kryptoprojekt.KryptoProjektApp.class).getContext().getResourceMap(GCDFrame.class);\n    jLabel1.setText(resourceMap.getString(\"jLabel1.text\")); // NOI18N\n    jLabel1.setName(\"jLabel1\"); // NOI18N\n\n    jPanel1.setName(\"jPanel1\"); // NOI18N\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 382, Short.MAX_VALUE)\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 297, Short.MAX_VALUE)\n    );\n\n    jButton1.setText(resourceMap.getString(\"jButton1.text\")); // NOI18N\n    jButton1.setName(\"jButton1\"); // NOI18N\n    jButton1.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jButton1ActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jButton1)))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel1)\n                .addComponent(jButton1))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    pack();\n}", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\basicFrames\\GCDFrame.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "/* checks whether the parameter values are correct: probably prime greater than 1 and base '1 < base < modul'\n * returns Tuple:\n * 1. argument = prime arguments (number greater than 1, 1 < base < modul) are correct true/false\n * 2. argument = message to describe what's false or all correct\n */\n", "func_signal": "private Tuple<Boolean, String> checkPrimeArguments()\n        throws IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, ClassCastException", "code": "{\n    //Precondition\n    assert !basesSet.isEmpty() && !maxBases.isEmpty() && !primeFactorsCollection.isEmpty() && !summandCollection.isEmpty(): \"At least one variable is empty. Number basesSet = \" +basesSet.size()+ \", Number maxBases = \" +maxBases.size()+ \", Number primeFactorsCollection = \"+primeFactorsCollection.size()+ \", Number summandCollection =\"+summandCollection.size();\n\n    boolean argsCorrect = true;\n    String argsAnswer = \"Arguments are correct.\";\n    Z one = new Z(\"1\");\n\n    //checks whether the probably primes are greater than 1\n    if(argsCorrect){\n        for (Z primeCheck : maxBases){\n            //Beware! The probably prime is greater +1 than the base, therefore test <0. The prime 2 let be passed.\n            if (primeCheck.compareTo(one)< 0){\n                 argsCorrect = false;\n                 argsAnswer = \"There are only prime numbers >1\";\n                 break;\n            }\n        }\n    } //end of testing probability prime\n\n    //checks whether 'bases' > 1 && bases < probably prime (max. possible base +1)\n    if(argsCorrect){\n        int i = 0;\n        for(TreeSet<Z> base : basesSet){\n            if (base.last().compareTo(new ArrayList<Z>(maxBases).get(i)) >0 && !new ArrayList<Z>(maxBases).get(i).equals(one)){\n                argsCorrect = false;\n                argsAnswer = \"Base 'a' too large. Lucas-Test requires a base:  1 < a < prime: base = \" +base.last()+ \" prime = \" +new ArrayList<Z>(maxBases).get(i);\n                break;\n            }\n            if (base.first().compareTo(one) <= 0){\n                if(base.first().isONE()){\n                    if(base.size() > 1){\n                        Iterator<Z> itModuls = base.iterator();\n                        itModuls.next();\n                        if(base.last().compareTo(itModuls.next()) >=0){\n                            argsCorrect = false;\n                            argsAnswer = \"Base 'a' too large. Lucas-Test requires a base:  1 < a < prime\";\n                        }\n                    }\n                    if(isPrimeTwo(i)){\n                        i++;\n                        continue;\n                    }\n                }\n                argsCorrect = false;\n                argsAnswer = \"Base 'a' too small. Lucas-Test requires a base:  1 < a < prime: base = \" +base.first();\n                break;\n            }\n            i++;\n        }\n    }//end of testing bases\n\n    //check, wheter the passed factor lines are consistent (there have to the same number of base lines like summands).\n    if(argsCorrect){\n        if (maxBases.size() != summandCollection.size()){\n            argsCorrect = false;\n            argsAnswer = \"Error: Different number of factor bases and summands: bases = \" +maxBases.size()+ \" summands = \" +summandCollection.size();\n        }\n    }//end of testing lines of factors lines and summands\n    return new Tuple<Boolean, String>(argsCorrect, argsAnswer);\n}", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\model\\LucasZ.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    closeButton = new javax.swing.JButton();\n    javax.swing.JLabel appTitleLabel = new javax.swing.JLabel();\n    javax.swing.JLabel versionLabel = new javax.swing.JLabel();\n    javax.swing.JLabel appVersionLabel = new javax.swing.JLabel();\n    javax.swing.JLabel vendorLabel = new javax.swing.JLabel();\n    javax.swing.JLabel appVendorLabel = new javax.swing.JLabel();\n    javax.swing.JLabel homepageLabel = new javax.swing.JLabel();\n    javax.swing.JLabel appHomepageLabel = new javax.swing.JLabel();\n    javax.swing.JLabel appDescLabel = new javax.swing.JLabel();\n    javax.swing.JLabel imageLabel = new javax.swing.JLabel();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(kryptoprojekt.KryptoProjektApp.class).getContext().getResourceMap(KryptoProjektAboutBox.class);\n    setTitle(resourceMap.getString(\"title\")); // NOI18N\n    setModal(true);\n    setName(\"aboutBox\"); // NOI18N\n    setResizable(false);\n\n    javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(kryptoprojekt.KryptoProjektApp.class).getContext().getActionMap(KryptoProjektAboutBox.class, this);\n    closeButton.setAction(actionMap.get(\"closeAboutBox\")); // NOI18N\n    closeButton.setName(\"closeButton\"); // NOI18N\n\n    appTitleLabel.setFont(appTitleLabel.getFont().deriveFont(appTitleLabel.getFont().getStyle() | java.awt.Font.BOLD, appTitleLabel.getFont().getSize()+4));\n    appTitleLabel.setText(resourceMap.getString(\"Application.title\")); // NOI18N\n    appTitleLabel.setName(\"appTitleLabel\"); // NOI18N\n\n    versionLabel.setFont(versionLabel.getFont().deriveFont(versionLabel.getFont().getStyle() | java.awt.Font.BOLD));\n    versionLabel.setText(resourceMap.getString(\"versionLabel.text\")); // NOI18N\n    versionLabel.setName(\"versionLabel\"); // NOI18N\n\n    appVersionLabel.setText(resourceMap.getString(\"Application.version\")); // NOI18N\n    appVersionLabel.setName(\"appVersionLabel\"); // NOI18N\n\n    vendorLabel.setFont(vendorLabel.getFont().deriveFont(vendorLabel.getFont().getStyle() | java.awt.Font.BOLD));\n    vendorLabel.setText(resourceMap.getString(\"vendorLabel.text\")); // NOI18N\n    vendorLabel.setName(\"vendorLabel\"); // NOI18N\n\n    appVendorLabel.setText(resourceMap.getString(\"Application.vendor\")); // NOI18N\n    appVendorLabel.setName(\"appVendorLabel\"); // NOI18N\n\n    homepageLabel.setFont(homepageLabel.getFont().deriveFont(homepageLabel.getFont().getStyle() | java.awt.Font.BOLD));\n    homepageLabel.setText(resourceMap.getString(\"homepageLabel.text\")); // NOI18N\n    homepageLabel.setName(\"homepageLabel\"); // NOI18N\n\n    appHomepageLabel.setText(resourceMap.getString(\"Application.homepage\")); // NOI18N\n    appHomepageLabel.setName(\"appHomepageLabel\"); // NOI18N\n\n    appDescLabel.setText(resourceMap.getString(\"appDescLabel.text\")); // NOI18N\n    appDescLabel.setName(\"appDescLabel\"); // NOI18N\n\n    imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/kryptoprojekt/resources/hfu.png\"))); // NOI18N\n    imageLabel.setName(\"imageLabel\"); // NOI18N\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(versionLabel)\n                        .addComponent(vendorLabel)\n                        .addComponent(homepageLabel))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(appVersionLabel)\n                        .addComponent(appVendorLabel)\n                        .addComponent(appHomepageLabel)))\n                .addComponent(appTitleLabel, javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(appDescLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(closeButton)))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(appTitleLabel)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(appDescLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(versionLabel)\n                .addComponent(appVersionLabel))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(vendorLabel)\n                .addComponent(appVendorLabel))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(homepageLabel)\n                .addComponent(appHomepageLabel))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(closeButton, javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n\n    pack();\n}", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\KryptoProjektAboutBox.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jLabel1 = new javax.swing.JLabel();\n    jPanel1 = new javax.swing.JPanel();\n    mulTableBtn = new javax.swing.JButton();\n    addTableBtn = new javax.swing.JButton();\n\n    setClosable(true);\n    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n    setName(\"Form\"); // NOI18N\n\n    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(kryptoprojekt.KryptoProjektApp.class).getContext().getResourceMap(PrimeFieldElementFrame.class);\n    jLabel1.setText(resourceMap.getString(\"jLabel1.text\")); // NOI18N\n    jLabel1.setName(\"jLabel1\"); // NOI18N\n\n    jPanel1.setName(\"jPanel1\"); // NOI18N\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 417, Short.MAX_VALUE)\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 297, Short.MAX_VALUE)\n    );\n\n    mulTableBtn.setFont(resourceMap.getFont(\"mulTableBtn.font\")); // NOI18N\n    mulTableBtn.setText(resourceMap.getString(\"mulTableBtn.text\")); // NOI18N\n    mulTableBtn.setName(\"mulTableBtn\"); // NOI18N\n    mulTableBtn.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            mulTableBtnActionPerformed(evt);\n        }\n    });\n\n    addTableBtn.setFont(resourceMap.getFont(\"addTableBtn.font\")); // NOI18N\n    addTableBtn.setText(resourceMap.getString(\"addTableBtn.text\")); // NOI18N\n    addTableBtn.setName(\"addTableBtn\"); // NOI18N\n    addTableBtn.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            addTableBtnActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(addTableBtn)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(mulTableBtn))\n                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel1)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(addTableBtn)\n                .addComponent(mulTableBtn))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    pack();\n}", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\basicFrames\\PrimeFieldElementFrame.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "/** Creates new form GCDFrame */\n", "func_signal": "public GCDFrame(ConnectionHandler handler)", "code": "{\n    super(handler);\n    initComponents();\n    initLogicComponents();\n    jLabel1.setText(Kit.xmlReader.getTagElement(\"GCDFrame\", \"HeaderLabel\"));\n    jButton1.setText(Kit.xmlReader.getTagElement(\"GCDFrame\", \"ExtendBtn\"));\n}", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\basicFrames\\GCDFrame.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jLabel1 = new javax.swing.JLabel();\n    jPanel1 = new javax.swing.JPanel();\n\n    setClosable(true);\n    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n    setName(\"Form\"); // NOI18N\n\n    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(kryptoprojekt.KryptoProjektApp.class).getContext().getResourceMap(MultiplicationFrame.class);\n    jLabel1.setText(resourceMap.getString(\"jLabel1.text\")); // NOI18N\n    jLabel1.setName(\"jLabel1\"); // NOI18N\n\n    jPanel1.setName(\"jPanel1\"); // NOI18N\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 219, Short.MAX_VALUE)\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 161, Short.MAX_VALUE)\n    );\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)\n                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel1)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    pack();\n}", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\basicFrames\\MultiplicationFrame.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void initLogicComponents()", "code": "{\n\n        textField1.setEditable(false);\n        textField2.setEditable(false);\n\n        jPanel1.setLayout(new GridBagLayout());\n        GridBagConstraints c = new GridBagConstraints();\n        c.weightx = 0.49;\n        c.fill = GridBagConstraints.BOTH;\n        c.gridx = 0;\n        c.gridy = 0;\n        jPanel1.add(textField1, c);\n\n        c.weightx = 0.01;\n        c.fill = GridBagConstraints.BOTH;\n        c.gridx = 1;\n        c.gridy = 0;\n        jPanel1.add(new JLabel(\"*\"), c);\n\n        c.weightx = 0.49;\n        c.fill = GridBagConstraints.BOTH;\n        c.gridx = 2;\n        c.gridy = 0;\n        jPanel1.add(textField2, c);\n\n        c.weightx = 1;\n        c.fill = GridBagConstraints.BOTH;\n        c.gridwidth = 3;\n        c.gridx = 0;\n        c.gridy = 1;\n        jPanel1.add(getDragList(new Object[]{getTitle() + \"_matMul\"}), c);\n\n        this.setSize(200, 120);\n    }", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\matrixFrames\\MatrixMultiplyFrame.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "/*\n * This is the Lucas-Test\n * 1.argument: list of bases to be used for the Lucas-Test for this Lucas term\n * 2.argument: primefactor_base\n * 3.argument: the probably prime\n */\n", "func_signal": "private boolean lucasCheck(Set<Z> bases, Collection<Z> primeFactors, Z checkPrime)\n        throws IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, ClassCastException", "code": "{\n    Z modul = checkPrime;\n    Z phiOfModul = modul.subtract(new Z(1)); //this is n-1\n    Z result;\n\n    if(!checkPrime.equals(new Z(\"2\"))){\n        ArrayList<Z> primeFactorsA = new ArrayList<Z>(primeFactors);\n        boolean isPrime = false;\n        int basesCounter = 0;\n        int basesSize = bases.size();\n        for(Z base : bases){\n            for(Z factor : primeFactorsA){\n                if(factor.isONE()){\n                    continue;\n                }\n                isPrime = true;\n                result = Basic.squareAndMultiply(base, (phiOfModul.divide(factor)),modul).first();\n                intermediateValues.add(base+ \"^(\" +phiOfModul+ \"/\" +factor+ \") mod \" +modul+ \" = \" +result);\n                if(result.isONE()){\n                    isPrime = false;\n                    if(++basesCounter < basesSize){\n                        intermediateValues.add(\"\");\n                    }\n                    break;\n                }\n            }\n            if(isPrime){\n                return true;\n            }\n        }\n        return false;\n    }else{\n        assert Integer.parseInt(checkPrime.toString()) == 2: \"Error, checkPrime != 2. checkPrime: \" +checkPrime.toString();\n        //intermediateValues.add(checkPrime+ \" = 1\"); //This is already inserted by Fermat-Test.\n        return true;\n    }\n}", "path": "Implementation\\KryptoProjekt\\src\\kryptoprojekt\\model\\LucasZ.java", "repo_name": "PhilippStussak/KryptoProjekt", "stars": 5, "license": "None", "language": "java", "size": 29734}
{"docstring": "/**\n * Retrieves a list of the current Commons institutions.\n *\n * This method does not require authentication.\n *\n * @return List of Institution\n * @throws FlickrException\n * @throws IOException\n * @throws SAXException\n */\n", "func_signal": "public ArrayList getInstitutions() throws FlickrException, IOException, SAXException", "code": "{\n    ArrayList institutions = new ArrayList();\n    List parameters = new ArrayList();\n    parameters.add(new Parameter(\"method\", METHOD_GET_INSTITUTIONS));\n    parameters.add(new Parameter(\"api_key\", apiKey));\n\n    Response response = transportAPI.get(transportAPI.getPath(), parameters);\n    if (response.isError()) {\n        throw new FlickrException(response.getErrorCode(), response.getErrorMessage());\n    }\n    Element mElement = response.getPayload();\n\n    NodeList mNodes = mElement.getElementsByTagName(\"institution\");\n    for (int i = 0; i < mNodes.getLength(); i++) {\n        Element element = (Element) mNodes.item(i);\n        institutions.add(parseInstitution(element));\n    }\n    return institutions;\n}", "path": "src\\com\\aetrion\\flickr\\commons\\CommonsInterface.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Get a signature for a list of parameters using the given shared secret.\n *\n * @param sharedSecret The shared secret\n * @param params The parameters\n * @return The signature String\n */\n", "func_signal": "public static String getSignature(String sharedSecret, List params)", "code": "{\n    addAuthToken(params);\n\n    StringBuffer buffer = new StringBuffer();\n    buffer.append(sharedSecret);\n    Collections.sort(params, new ParameterAlphaComparator());\n    Iterator iter = params.iterator();\n    while (iter.hasNext()) {\n        Parameter param = (Parameter) iter.next();\n        buffer.append(param.getName());\n        buffer.append(param.getValue());\n    }\n\n    try {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        return ByteUtilities.toHexString(md.digest(buffer.toString().getBytes(\"UTF-8\")));\n    } catch (NoSuchAlgorithmException e) {\n        throw new RuntimeException(e);\n    } catch (UnsupportedEncodingException u) {\n        throw new RuntimeException(u);\n    }\n}", "path": "src\\com\\aetrion\\flickr\\auth\\AuthUtilities.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Construct the BuddyIconUrl.<p>\n * If none available, return the \n * <a href=\"http://www.flickr.com/images/buddyicon.jpg\">default</a>,\n * or an URL assembled from farm, iconserver and nsid.\n *\n * @see <a href=\"http://flickr.com/services/api/misc.buddyicons.html\">Flickr Documentation</a>\n * @param iconFarm\n * @param iconServer\n * @param id\n * @return The BuddyIconUrl\n */\n", "func_signal": "public static String createBuddyIconUrl(\n    int iconFarm,\n    int iconServer,\n    String id\n)", "code": "{\n    /**\n     * The default-URL, if the iconServer equals 0.\n     */\n    String iconUrl = \"http://www.flickr.com/images/buddyicon.jpg\";\n    if (iconServer > 0) {\n        iconUrl = \"http://farm\"\n        + iconFarm + \".static.flickr.com/\"\n        + iconServer + \"/buddyicons/\"\n        + id + \".jpg\";\n    }\n    return iconUrl;\n}", "path": "src\\com\\aetrion\\flickr\\util\\UrlUtilities.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Get the context for a photo in the group pool.\n *\n * This method does not require authentication.\n *\n * @param photoId The photo ID\n * @param groupId The group ID\n * @return The PhotoContext\n * @throws IOException\n * @throws SAXException\n * @throws FlickrException\n */\n", "func_signal": "public PhotoContext getContext(String photoId, String groupId) throws IOException, SAXException, FlickrException", "code": "{\n    List parameters = new ArrayList();\n    parameters.add(new Parameter(\"method\", METHOD_GET_GROUPS));\n    parameters.add(new Parameter(\"api_key\", apiKey));\n\n    parameters.add(new Parameter(\"photo_id\", photoId));\n    parameters.add(new Parameter(\"group_id\", groupId));\n\n    Response response = transport.get(transport.getPath(), parameters);\n    if (response.isError()) {\n        throw new FlickrException(response.getErrorCode(), response.getErrorMessage());\n    }\n    Collection payload = response.getPayloadCollection();\n    Iterator iter = payload.iterator();\n    PhotoContext photoContext = new PhotoContext();\n    while (iter.hasNext()) {\n        Element element = (Element) iter.next();\n        String elementName = element.getTagName();\n        if (elementName.equals(\"prevphoto\")) {\n            Photo photo = new Photo();\n            photo.setId(element.getAttribute(\"id\"));\n            photoContext.setPreviousPhoto(photo);\n        } else if (elementName.equals(\"nextphoto\")) {\n            Photo photo = new Photo();\n            photo.setId(element.getAttribute(\"id\"));\n            photoContext.setNextPhoto(photo);\n        } else {\n            System.err.println(\"unsupported element name: \" + elementName);\n        }\n    }\n    return photoContext;\n}", "path": "src\\com\\aetrion\\flickr\\groups\\pools\\PoolsInterface.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Remove the specified photo from the group.\n *\n * @param photoId The photo ID\n * @param groupId The group ID\n * @throws IOException\n * @throws SAXException\n * @throws FlickrException\n */\n", "func_signal": "public void remove(String photoId, String groupId) throws IOException, SAXException,\n        FlickrException", "code": "{\n    List parameters = new ArrayList();\n    parameters.add(new Parameter(\"method\", METHOD_REMOVE));\n    parameters.add(new Parameter(\"api_key\", apiKey));\n\n    parameters.add(new Parameter(\"photo_id\", photoId));\n    parameters.add(new Parameter(\"group_id\", groupId));\n    parameters.add(\n        new Parameter(\n            \"api_sig\",\n            AuthUtilities.getSignature(sharedSecret, parameters)\n        )\n    );\n\n    Response response = transport.post(transport.getPath(), parameters);\n    if (response.isError()) {\n        throw new FlickrException(response.getErrorCode(), response.getErrorMessage());\n    }\n}", "path": "src\\com\\aetrion\\flickr\\groups\\pools\\PoolsInterface.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Get the specified user IDs public contacts.\n *\n * This method does not require authentication.\n *\n * @param userId The user ID\n * @param perPage The optional per page value.  Values <= 0 will be ignored.\n * @param page The optional page to view.  Values <= 0 will be ignored\n * @param extras A Set of extra parameters to send\n * @return A Collection of Photo objects\n * @throws IOException\n * @throws SAXException\n * @throws FlickrException\n * @see com.aetrion.flickr.photos.Extras\n */\n", "func_signal": "public PhotoList getPublicList(String userId, int perPage, int page, Set extras)\n        throws IOException, SAXException, FlickrException", "code": "{\n    PhotoList photos = new PhotoList();\n\n    List parameters = new ArrayList();\n    parameters.add(new Parameter(\"method\", METHOD_GET_PUBLIC_LIST));\n    parameters.add(new Parameter(\"api_key\", apiKey));\n\n    parameters.add(new Parameter(\"user_id\", userId));\n\n    if (extras != null) {\n        parameters.add(new Parameter(\"extras\", StringUtilities.join(extras, \",\")));\n    }\n    if (perPage > 0) {\n        parameters.add(new Parameter(\"per_page\", new Integer(perPage)));\n    }\n    if (page > 0) {\n        parameters.add(new Parameter(\"page\", new Integer(page)));\n    }\n\n    Response response = transportAPI.get(transportAPI.getPath(), parameters);\n    if (response.isError()) {\n        throw new FlickrException(response.getErrorCode(), response.getErrorMessage());\n    }\n\n    Element photosElement = response.getPayload();\n    photos.setPage(photosElement.getAttribute(\"page\"));\n\t\tphotos.setPages(photosElement.getAttribute(\"pages\"));\n\t\tphotos.setPerPage(photosElement.getAttribute(\"perpage\"));\n\t\tphotos.setTotal(photosElement.getAttribute(\"total\"));\n    NodeList photoNodes = photosElement.getElementsByTagName(\"photo\");\n    for (int i = 0; i < photoNodes.getLength(); i++) {\n        Element photoElement = (Element) photoNodes.item(i);\n        photos.add(PhotoUtils.createPhoto(photoElement));\n    }\n    return photos;\n}", "path": "src\\com\\aetrion\\flickr\\favorites\\FavoritesInterface.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Get a signature for a list of parameters using the shared secret from the RequestContext.\n *\n * @param parameters The parameters\n * @return The signature String\n * @deprecated\n */\n", "func_signal": "public static String getSignature(List parameters)", "code": "{\n    RequestContext requestContext = RequestContext.getRequestContext();\n    return getSignature(requestContext.getSharedSecret(), parameters);\n}", "path": "src\\com\\aetrion\\flickr\\auth\\AuthUtilities.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Add a photo to a group's pool.\n *\n * @param photoId The photo ID\n * @param groupId The group ID\n */\n", "func_signal": "public void add(String photoId, String groupId) throws IOException, SAXException,\n        FlickrException", "code": "{\n    List parameters = new ArrayList();\n    parameters.add(new Parameter(\"method\", METHOD_ADD));\n    parameters.add(new Parameter(\"api_key\", apiKey));\n\n    parameters.add(new Parameter(\"photo_id\", photoId));\n    parameters.add(new Parameter(\"group_id\", groupId));\n    parameters.add(\n        new Parameter(\n            \"api_sig\",\n            AuthUtilities.getSignature(sharedSecret, parameters)\n        )\n    );\n\n    Response response = transport.post(transport.getPath(), parameters);\n    if (response.isError()) {\n        throw new FlickrException(response.getErrorCode(), response.getErrorMessage());\n    }\n}", "path": "src\\com\\aetrion\\flickr\\groups\\pools\\PoolsInterface.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Return a list of Flickr pandas, from whom you can request photos using\n * the {@link com.aetrion.flickr.panda.PandaInterface#getPhotos(Panda, Set, int, int)}\n * API method.\n *\n * This method does not require authentication.\n *\n * @return A list of pandas\n * @throws FlickrException\n * @throws IOException\n * @throws SAXException\n */\n", "func_signal": "public ArrayList getList() throws FlickrException, IOException, SAXException", "code": "{\n    ArrayList pandas = new ArrayList();\n    List parameters = new ArrayList();\n    parameters.add(new Parameter(\"method\", METHOD_GET_LIST));\n    parameters.add(new Parameter(\"api_key\", apiKey));\n\n    Response response = transportAPI.get(transportAPI.getPath(), parameters);\n    if (response.isError()) {\n        throw new FlickrException(response.getErrorCode(), response.getErrorMessage());\n    }\n    Element pandaElement = response.getPayload();\n    NodeList pandaNodes = pandaElement.getElementsByTagName(\"panda\");\n    for (int i = 0; i < pandaNodes.getLength(); i++) {\n        pandaElement = (Element) pandaNodes.item(i);\n        Panda panda = new Panda();\n        panda.setName(XMLUtilities.getValue(pandaElement));\n        pandas.add(panda);\n    }\n    return pandas;\n}", "path": "src\\com\\aetrion\\flickr\\panda\\PandaInterface.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Check, if we are authenticated.\n *\n * @param params\n * @return isAuthenticated\n */\n", "func_signal": "public static boolean isAuthenticated(List params)", "code": "{\n    Iterator it = params.iterator();\n    boolean tokenFlag = false;\n    while (it.hasNext()) {\n        if (((Parameter) it.next()).getName().equals(\"auth_token\")) {\n            tokenFlag = true;\n        }\n    }\n\n    if (!tokenFlag) {\n        if (RequestContext.getRequestContext().getAuth() != null) {\n            String authToken = RequestContext.getRequestContext().getAuth().getToken();\n            if (authToken != null && !authToken.equals(\"\")) {\n                tokenFlag = true;\n            }\n        }\n    }\n    return tokenFlag;\n}", "path": "src\\com\\aetrion\\flickr\\auth\\AuthUtilities.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/*\n * Test method for 'com.aetrion.flickr.interestingness.InterestingnessInterface.getList(String, Set, int, int)'\n */\n", "func_signal": "public void testGetListStringSetIntInt() throws FlickrException, IOException, SAXException", "code": "{\n\tassertNotNull(flickr);\n\tInterestingnessInterface ii = flickr.getInterestingnessInterface();\n\tassertNotNull(ii);\n\tPhotoList list = ii.getList(\"2006-09-11\", Extras.ALL_EXTRAS, 10, 9);\n\tassertNotNull(list);\n\tassertEquals(10, list.size());\n\tassertEquals(9, list.getPage());\n\tassertEquals(10, list.getPerPage());\n\tassertEquals(50, list.getPages());\n\tassertEquals(500, list.getTotal());\n\tassertTrue(list.get(0) instanceof Photo);\n\tPhoto photo = (Photo)list.get(1);\n\tassertNotNull(photo.getId());\n\tassertNotNull(photo.getLicense());\n\tassertNotNull(photo.getOwner());\n\t\n\tlist = ii.getList(\"2006-09-11\", null, 500, 1);\n\tassertNotNull(list);\n\tassertEquals(500, list.size());\n\t\n\tlist = ii.getList((String)null, Extras.ALL_EXTRAS, 100, 1);\n\tassertNotNull(list);\n\tassertEquals(100, list.size());\n\tphoto = (Photo)list.get(0);\n\tfor (int i = list.size() - 1; i >= 0; --i) {\n\t\tphoto = (Photo)list.get(i);\n\t\tif (photo.hasGeoData()) {\n\t\t\t//System.out.println(photo.getId() + \" \" + photo.getGeoData() + \" \" + photo.getUrl());\n\t\t}\n\t}\n\t\n\t// date in the far future\n\ttry {\n\t\tlist = ii.getList(\"2030-01-01\", null, 100, 3);\n\t\tfail(\"Expected exception not thrown\");\n\t} catch (FlickrException e) {\n\t\t// everything ok. we expect that\n\t}\n\n    }", "path": "test\\src\\com\\aetrion\\flickr\\InterestingnessInterfaceTest.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Get the collection of favorites for the calling user or the specified user ID.\n *\n * @param userId The optional user ID.  Null value will be ignored.\n * @param perPage The optional per page value.  Values <= 0 will be ignored.\n * @param page The page to view.  Values <= 0 will be ignored.\n * @param extras a Set Strings representing extra parameters to send\n * @return The Collection of Photo objects\n * @see com.aetrion.flickr.photos.Extras\n * @throws IOException\n * @throws SAXException\n */\n", "func_signal": "public PhotoList getList(String userId, int perPage, int page, Set extras) throws IOException,\n        SAXException, FlickrException", "code": "{\n    PhotoList photos = new PhotoList();\n\n    List parameters = new ArrayList();\n    parameters.add(new Parameter(\"method\", METHOD_GET_LIST));\n    parameters.add(new Parameter(\"api_key\", apiKey));\n\n    if (userId != null) {\n        parameters.add(new Parameter(\"user_id\", userId));\n    }\n    if (extras != null) {\n        parameters.add(new Parameter(\"extras\", StringUtilities.join(extras, \",\")));\n    }\n    if (perPage > 0) {\n        parameters.add(new Parameter(\"per_page\", new Integer(perPage)));\n    }\n    if (page > 0) {\n        parameters.add(new Parameter(\"page\", new Integer(page)));\n    }\n    parameters.add(\n        new Parameter(\n            \"api_sig\",\n            AuthUtilities.getSignature(sharedSecret, parameters)\n        )\n    );\n\n    Response response = transportAPI.get(transportAPI.getPath(), parameters);\n    if (response.isError()) {\n        throw new FlickrException(response.getErrorCode(), response.getErrorMessage());\n    }\n\n    Element photosElement = response.getPayload();\n    photos.setPage(photosElement.getAttribute(\"page\"));\n\t\tphotos.setPages(photosElement.getAttribute(\"pages\"));\n\t\tphotos.setPerPage(photosElement.getAttribute(\"perpage\"));\n\t\tphotos.setTotal(photosElement.getAttribute(\"total\"));\n    NodeList photoNodes = photosElement.getElementsByTagName(\"photo\");\n    for (int i = 0; i < photoNodes.getLength(); i++) {\n        Element photoElement = (Element) photoNodes.item(i);\n        photos.add(PhotoUtils.createPhoto(photoElement));\n    }\n    return photos;\n}", "path": "src\\com\\aetrion\\flickr\\favorites\\FavoritesInterface.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Ask the Flickr Pandas for a list of recent public (and \"safe\") photos.\n *\n * This method does not require authentication.\n *\n * @param panda The panda to ask for photos from.\n * @param extras A set of Strings controlling the extra information to fetch for each returned record. {@link com.aetrion.flickr.photos.Extras#ALL_EXTRAS}\n * @param perPage The number of photos to show per page\n * @param page The page offset\n * @return A PhotoList\n * @throws FlickrException\n * @throws IOException\n * @throws SAXException\n * @see com.aetrion.flickr.photos.Extras\n */\n", "func_signal": "public PhotoList getPhotos(Panda panda, Set extras, int perPage, int page) throws FlickrException, IOException, SAXException", "code": "{\n    ArrayList pandas = new ArrayList();\n    List parameters = new ArrayList();\n    parameters.add(new Parameter(\"method\", METHOD_GET_PHOTOS));\n    parameters.add(new Parameter(\"api_key\", apiKey));\n\n    parameters.add(new Parameter(\"panda_name\", panda.getName()));\n\n    if (extras != null && !extras.isEmpty()) {\n        parameters.add(new Parameter(\"extras\", StringUtilities.join(extras, \",\")));\n    }\n    if (perPage > 0) {\n        parameters.add(new Parameter(\"per_page\", perPage));\n    }\n    if (page > 0) {\n        parameters.add(new Parameter(\"page\", page));\n    }\n\n    Response response = transportAPI.get(transportAPI.getPath(), parameters);\n    if (response.isError()) {\n        throw new FlickrException(response.getErrorCode(), response.getErrorMessage());\n    }\n    Element photosElement = response.getPayload();\n    PhotoList photos = PhotoUtils.createPhotoList(photosElement);\n    return photos;\n}", "path": "src\\com\\aetrion\\flickr\\panda\\PandaInterface.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Add a photo to the user's favorites.\n *\n * @param photoId The photo ID\n * @throws IOException\n * @throws SAXException\n * @throws FlickrException\n */\n", "func_signal": "public void add(String photoId) throws IOException, SAXException, FlickrException", "code": "{\n    List parameters = new ArrayList();\n    parameters.add(new Parameter(\"method\", METHOD_ADD));\n    parameters.add(new Parameter(\"api_key\", apiKey));\n\n    parameters.add(new Parameter(\"photo_id\", photoId));\n    parameters.add(\n        new Parameter(\n            \"api_sig\",\n            AuthUtilities.getSignature(sharedSecret, parameters)\n        )\n    );\n\n    Response response = transportAPI.post(transportAPI.getPath(), parameters);\n    if (response.isError()) {\n        throw new FlickrException(response.getErrorCode(), response.getErrorMessage());\n    }\n}", "path": "src\\com\\aetrion\\flickr\\favorites\\FavoritesInterface.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Get the info for the specified method.\n *\n * @param methodName The method name\n * @return The Method object\n * @throws IOException\n * @throws SAXException\n * @throws FlickrException\n */\n", "func_signal": "public Method getMethodInfo(String methodName) throws IOException, SAXException, FlickrException", "code": "{\n    List parameters = new ArrayList();\n    parameters.add(new Parameter(\"method\", METHOD_GET_METHOD_INFO));\n    parameters.add(new Parameter(\"api_key\", apiKey));\n\n    parameters.add(new Parameter(\"method_name\", methodName));\n    parameters.add(\n        new Parameter(\n            \"api_sig\",\n            AuthUtilities.getSignature(sharedSecret, parameters)\n        )\n    );\n\n    Response response = transport.get(transport.getPath(), parameters);\n    if (response.isError()) {\n        throw new FlickrException(response.getErrorCode(), response.getErrorMessage());\n    }\n\n    Element methodElement = response.getPayload();\n    Method method = new Method();\n    method.setName(methodElement.getAttribute(\"name\"));\n    method.setNeedsLogin(\"1\".equals(methodElement.getAttribute(\"needslogin\")));\n    method.setNeedsSigning(\"1\".equals(methodElement.getAttribute(\"needssigning\")));\n    String requiredPermsStr = methodElement.getAttribute(\"requiredperms\");\n    if (requiredPermsStr != null && requiredPermsStr.length() > 0) {\n        try {\n            int perms = Integer.parseInt(requiredPermsStr);\n            method.setRequiredPerms(perms);\n        } catch (NumberFormatException e) {\n            // what shall we do?\n            e.printStackTrace();\n        }\n    }\n    method.setDescription(XMLUtilities.getChildValue(methodElement, \"description\"));\n    method.setResponse(XMLUtilities.getChildValue(methodElement, \"response\"));\n    method.setExplanation(XMLUtilities.getChildValue(methodElement, \"explanation\"));\n\n    List arguments = new ArrayList();\n    Element argumentsElement = XMLUtilities.getChild(methodElement, \"arguments\");\n    // tolerant fix for incorrect nesting of the <arguments> element\n    // as observed in current flickr responses of this method\n    //\n    // specified as \n    // <rsp>\n    //\t<method>\n    //   <arguments>\n    //   <errors>\n    //  <method>\n    // </rsp>\n    //\n    // observed as\n    // <rsp>\n    //  <method>\n    //  <arguments>\n    //  <errors>\n    // </rsp>\n    //\n    if (argumentsElement == null) {\n    \t//System.err.println(\"getMethodInfo: Using workaround for arguments array\");\n        Element parent = (Element)methodElement.getParentNode();\n        Element child = XMLUtilities.getChild(parent, \"arguments\");\n        if (child != null) {\n        \targumentsElement = child;\n        }\n    }\n    NodeList argumentElements = argumentsElement.getElementsByTagName(\"argument\");\n    for (int i = 0; i < argumentElements.getLength(); i++) {\n        Argument argument = new Argument();\n        Element argumentElement = (Element) argumentElements.item(i);\n        argument.setName(argumentElement.getAttribute(\"name\"));\n        argument.setOptional(\"1\".equals(argumentElement.getAttribute(\"optional\")));\n        argument.setDescription(XMLUtilities.getValue(argumentElement));\n        arguments.add(argument);\n    }\n    method.setArguments(arguments);\n\n    Element errorsElement = XMLUtilities.getChild(methodElement, \"errors\");\n    // tolerant fix for incorrect nesting of the <errors> element\n    // as observed in current flickr responses of this method\n    // as of 2006-09-15\n    //\n    // specified as \n    // <rsp>\n    //\t<method>\n    //   <arguments>\n    //   <errors>\n    //  <method>\n    // </rsp>\n    //\n    // observed as\n    // <rsp>\n    //  <method>\n    //  <arguments>\n    //  <errors>\n    // </rsp>\n    //\n    if (errorsElement == null) {\n       \t//System.err.println(\"getMethodInfo: Using workaround for errors array\");\n        Element parent = (Element)methodElement.getParentNode();\n        Element child = XMLUtilities.getChild(parent, \"errors\");\n        if (child != null) {\n        \terrorsElement = child;\n        }\n    }\n    List errors = new ArrayList();\n    NodeList errorElements = errorsElement.getElementsByTagName(\"error\");\n    for (int i = 0; i < errorElements.getLength(); i++) {\n        Error error = new Error();\n        Element errorElement = (Element) errorElements.item(i);\n        error.setCode(errorElement.getAttribute(\"code\"));\n        error.setMessage(errorElement.getAttribute(\"message\"));\n        error.setExplaination(XMLUtilities.getValue(errorElement));\n        errors.add(error);\n    }\n    method.setErrors(errors);\n\n    return method;\n}", "path": "src\\com\\aetrion\\flickr\\reflection\\ReflectionInterface.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Get a list of all methods.\n *\n * @return The method names\n * @throws IOException\n * @throws SAXException\n * @throws FlickrException\n */\n", "func_signal": "public Collection getMethods() throws IOException, SAXException, FlickrException", "code": "{\n    List parameters = new ArrayList();\n    parameters.add(new Parameter(\"method\", METHOD_GET_METHODS));\n    parameters.add(new Parameter(\"api_key\", apiKey));\n\n    parameters.add(\n        new Parameter(\n            \"api_sig\",\n            AuthUtilities.getSignature(sharedSecret, parameters)\n        )\n    );\n\n    Response response = transport.get(transport.getPath(), parameters);\n    if (response.isError()) {\n        throw new FlickrException(response.getErrorCode(), response.getErrorMessage());\n    }\n\n    Element methodsElement = response.getPayload();\n\n    List methods = new ArrayList();\n    NodeList methodElements = methodsElement.getElementsByTagName(\"method\");\n    for (int i = 0; i < methodElements.getLength(); i++) {\n        Element methodElement = (Element) methodElements.item(i);\n        methods.add(XMLUtilities.getValue(methodElement));\n    }\n    return methods;\n}", "path": "src\\com\\aetrion\\flickr\\reflection\\ReflectionInterface.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Construct a ReflectionInterface.\n *\n * @param apiKey The API key\n * @param sharedSecret The Shared Secret\n * @param transport The Transport interface\n */\n", "func_signal": "public ReflectionInterface(\n    String apiKey,\n    String sharedSecret,\n    Transport transport\n)", "code": "{\n    this.apiKey = apiKey;\n    this.sharedSecret = sharedSecret;\n    this.transport = transport;\n}", "path": "src\\com\\aetrion\\flickr\\reflection\\ReflectionInterface.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Get the photos for the specified group pool, optionally filtering by taf.\n *\n * This method does not require authentication.\n *\n * @see com.aetrion.flickr.photos.Extras\n * @param groupId The group ID\n * @param tags The optional tags (may be null)\n * @param extras Set of extra-attributes to include (may be null)\n * @param perPage The number of photos per page (0 to ignore)\n * @param page The page offset (0 to ignore)\n * @return A Collection of Photo objects\n * @throws IOException\n * @throws SAXException\n * @throws FlickrException\n */\n", "func_signal": "public PhotoList getPhotos(String groupId, String[] tags, Set extras, int perPage, int page)\n  throws IOException, SAXException, FlickrException", "code": "{\n    PhotoList photos = new PhotoList();\n\n    List parameters = new ArrayList();\n    parameters.add(new Parameter(\"method\", METHOD_GET_PHOTOS));\n    parameters.add(new Parameter(\"api_key\", apiKey));\n\n    parameters.add(new Parameter(\"group_id\", groupId));\n    if (tags != null) {\n        parameters.add(new Parameter(\"tags\", StringUtilities.join(tags, \" \")));\n    }\n    if (perPage > 0) {\n        parameters.add(new Parameter(\"per_page\", new Integer(perPage)));\n    }\n    if (page > 0) {\n        parameters.add(new Parameter(\"page\", new Integer(page)));\n    }\n\n    if (extras != null) {\n        StringBuffer sb = new StringBuffer();\n        Iterator it = extras.iterator();\n        for (int i = 0; it.hasNext(); i++) {\n            if (i > 0) {\n                sb.append(\",\");\n            }\n            sb.append(it.next());\n        }\n        parameters.add(new Parameter(Extras.KEY_EXTRAS, sb.toString()));\n    }\n    parameters.add(\n        new Parameter(\n            \"api_sig\",\n            AuthUtilities.getSignature(sharedSecret, parameters)\n        )\n    );\n\n    Response response = transport.get(transport.getPath(), parameters);\n    if (response.isError()) {\n        throw new FlickrException(response.getErrorCode(), response.getErrorMessage());\n    }\n    Element photosElement = response.getPayload();\n    photos.setPage(photosElement.getAttribute(\"page\"));\n    photos.setPages(photosElement.getAttribute(\"pages\"));\n    photos.setPerPage(photosElement.getAttribute(\"perpage\"));\n    photos.setTotal(photosElement.getAttribute(\"total\"));\n\n    NodeList photoNodes = photosElement.getElementsByTagName(\"photo\");\n    for (int i = 0; i < photoNodes.getLength(); i++) {\n        Element photoElement = (Element) photoNodes.item(i);\n        photos.add(PhotoUtils.createPhoto(photoElement));\n    }\n\n    return photos;\n}", "path": "src\\com\\aetrion\\flickr\\groups\\pools\\PoolsInterface.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Get a collection of all of the user's groups.\n *\n * @return A Collection of Group objects\n * @throws IOException\n * @throws SAXException\n * @throws FlickrException\n */\n", "func_signal": "public Collection getGroups() throws IOException, SAXException, FlickrException", "code": "{\n    List groups = new ArrayList();\n\n    List parameters = new ArrayList();\n    parameters.add(new Parameter(\"method\", METHOD_GET_GROUPS));\n    parameters.add(new Parameter(\"api_key\", apiKey));\n    parameters.add(\n        new Parameter(\n            \"api_sig\",\n            AuthUtilities.getSignature(sharedSecret, parameters)\n        )\n    );\n\n    Response response = transport.get(transport.getPath(), parameters);\n    if (response.isError()) {\n        throw new FlickrException(response.getErrorCode(), response.getErrorMessage());\n    }\n    Element groupsElement = response.getPayload();\n    NodeList groupNodes = groupsElement.getElementsByTagName(\"group\");\n    for (int i = 0; i < groupNodes.getLength(); i++) {\n        Element groupElement = (Element) groupNodes.item(i);\n        Group group = new Group();\n        group.setId(groupElement.getAttribute(\"id\"));\n        group.setName(groupElement.getAttribute(\"name\"));\n        group.setAdmin(\"1\".equals(groupElement.getAttribute(\"admin\")));\n        group.setPrivacy(groupElement.getAttribute(\"privacy\"));\n        groups.add(group);\n    }\n    return groups;\n}", "path": "src\\com\\aetrion\\flickr\\groups\\pools\\PoolsInterface.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Adds the auth_token to the parameter list if it is necessary.\n * @param params\n */\n", "func_signal": "public static void addAuthToken(List params)", "code": "{\n    //Checking for the auth_token parameter\n    Iterator it = params.iterator();\n    boolean tokenFlag = false;\n    while (it.hasNext()) {\n        if (((Parameter) it.next()).getName().equals(\"auth_token\")) {\n            tokenFlag = true;\n        }\n    }\n\n    if (!tokenFlag) {\n        if (RequestContext.getRequestContext().getAuth() != null) {\n            String authToken = RequestContext.getRequestContext().getAuth().getToken();\n            if(authToken != null && !authToken.equals(\"\"))\n                params.add(new Parameter(\"auth_token\", authToken));\n        }\n    }\n}", "path": "src\\com\\aetrion\\flickr\\auth\\AuthUtilities.java", "repo_name": "mohlendo/flickrj", "stars": 4, "license": "other", "language": "java", "size": 2921}
{"docstring": "/**\n * Sets up the servlet tester, loads the keystore and passes the appropriate\n * parameters.\n * \n * @throws Exception\n */\n", "func_signal": "@Before\npublic void setUp() throws Exception", "code": "{\n    /*\n     * Passes the keystore via JNDI to the servlet.\n     */\n    Context ctx = null;\n    try {\n        Properties props = new Properties();\n        props.setProperty(Context.INITIAL_CONTEXT_FACTORY,\n                \"org.mortbay.naming.InitialContextFactory\");\n        ctx = (Context) new InitialContext(props).lookup(\"java:comp\");\n        try {\n            ctx = (Context) ctx.lookup(\"env\");\n        } catch (NameNotFoundException e) {\n            ctx = ctx.createSubcontext(\"env\");\n        }\n        try {\n            ctx = (Context) ctx.lookup(\"foafsslidp\");\n        } catch (NameNotFoundException e) {\n            ctx = ctx.createSubcontext(\"foafsslidp\");\n        }\n        ctx.rebind(\"signingKeyStore\", getKeyStore());\n        ctx.rebind(\"signingKeyPasswordArray\", KEYSTORE_PASSWORD);\n    } finally {\n        if (ctx != null) {\n            ctx.close();\n        }\n    }\n\n    /*\n     * Creates a mock URLConnection not to make outside connections to\n     * de-reference the FOAF file for the tests.\n     */\n    URLStreamHandlerFactory mockStreamHandlerFactory = new URLStreamHandlerFactory() {\n        public URLStreamHandler createURLStreamHandler(String protocol) {\n            if (\"http\".equals(protocol) || \"https\".equals(protocol)) {\n                return new URLStreamHandler() {\n                    @Override\n                    protected URLConnection openConnection(URL u) throws IOException {\n                        return new HttpURLConnection(u) {\n                            @Override\n                            public void disconnect() {\n                            }\n\n                            @Override\n                            public boolean usingProxy() {\n                                return false;\n                            }\n\n                            @Override\n                            public void connect() throws IOException {\n                            }\n\n                            @Override\n                            public String getContentType() {\n                                return \"application/rdf+xml\";\n                            }\n\n                            @Override\n                            public InputStream getInputStream() throws IOException {\n                                return ShortRedirectIdpServletTest.class\n                                        .getResourceAsStream(TEST_FOAF_FILENAME);\n                            }\n                        };\n                    }\n                };\n            }\n            return null;\n        }\n    };\n    try {\n        URL.setURLStreamHandlerFactory(mockStreamHandlerFactory);\n    } catch (Throwable e) {\n    }\n\n    /*\n     * Creates the servlet tester.\n     */\n    idpServletTester = new ServletTester();\n    idpServletTester.setContextPath(\"/idp\");\n    @SuppressWarnings(\"unused\")\n    ServletHolder servletHolder = idpServletTester.addServlet(ShortRedirectIdpServlet.class,\n            \"/*\");\n    idpServletTester.start();\n}", "path": "foafssl-identity-provider\\src\\test\\java\\net\\java\\dev\\sommer\\foafssl\\login\\ShortRedirectIdpServletTest.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * Create a cert Valid for one Hour\n * \n * @param foaf\n *            the local foaf document name\n * @return an X509Claim\n * @throws Exception\n */\n", "func_signal": "private X509Claim createOneHourCert(String foaf) throws Exception", "code": "{\n    CertCreator create = new CertCreator();\n    create.addDurationInHours(\"1\");\n    create.setSubjectCommonName(\"TEST\");\n    URL webIdDoc = X509ClaimTest.class.getResource(foaf);\n    webIdDoc = new URL(webIdDoc.getProtocol(), \"localhost\", webIdDoc.getFile());\n    URL webId = new URL(webIdDoc, \"#me\");\n    create.setSubjectWebID(webId.toString());\n    create.setSubjectPublicKey(goodKey);\n    create.generate();\n    X509Certificate cert = create.getCertificate();\n    X509Claim x509claim = new X509Claim(cert);\n    return x509claim;\n}", "path": "foafssl-verifier\\src\\test\\java\\net\\java\\dev\\sommer\\foafssl\\verifier\\X509ClaimTest.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * Builds FOAF+SSL Principal.\n * \n * @param uri\n *            Web ID.\n * @param publicKey\n *            public key used to verify this Web ID.\n * @param dereferencedSecurely\n *            true if dereferenced securely (via HTTPS).\n * @param foafServerCertificateChain\n *            certificate chain of the server hosting the dereferenced FOAF\n *            file.\n */\n", "func_signal": "public DereferencedFoafSslPrincipal(URI uri, PublicKey publicKey, boolean dereferencedSecurely,\n        List<Certificate> foafServerCertificateChain)", "code": "{\n    super(uri);\n    this.publicKey = publicKey;\n    this.deferencedSecurely = dereferencedSecurely;\n    if (foafServerCertificateChain != null) {\n        this.foafServerCertificateChain = Collections\n                .unmodifiableList(foafServerCertificateChain);\n    } else {\n        this.foafServerCertificateChain = null;\n    }\n}", "path": "foafssl-verifier\\src\\main\\java\\net\\java\\dev\\sommer\\foafssl\\principals\\DereferencedFoafSslPrincipal.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * Loads the 'localhost' keystore from the test keystore.\n * \n * @return test keystore.\n * @throws Exception\n */\n", "func_signal": "public KeyStore getKeyStore() throws Exception", "code": "{\n    KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n    InputStream ksis = ClassLoader.getSystemResourceAsStream(CERTIFICATES_DIRECTORY\n            + \"localhost.p12\");\n    ks.load(ksis, KEYSTORE_PASSWORD);\n    ksis.close();\n    return ks;\n}", "path": "foafssl-identity-provider\\src\\test\\java\\net\\java\\dev\\sommer\\foafssl\\login\\ShortRedirectIdpServletTest.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * Creates a Web ID claim.\n * \n * @param webid\n *            Web ID.\n * @param key\n *            the public key claimed to be associated with this WebID\n *            (obtained from the certificate).\n */\n", "func_signal": "public WebIdClaim(URI webid, PublicKey key)", "code": "{\n    this.webid = webid;\n    this.pubKey = key;\n}", "path": "foafssl-verifier\\src\\main\\java\\net\\java\\dev\\sommer\\foafssl\\claims\\WebIdClaim.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * This is not fool proof.\n *\n * @param readlimit\n */\n", "func_signal": "@Override\npublic void mark(int readlimit)", "code": "{\n    if (markSupported()) {\n        pointer = read;\n        super.mark(readlimit);\n    }\n}", "path": "foafssl-verifier\\src\\main\\java\\net\\java\\dev\\sommer\\foafssl\\util\\SafeInputStream.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * Given a URL this method fetches the contents of it from the cache or the\n * web.\n * \n * <p>\n * Really what I would like is for this to return a graph of information\n * (not as currently: a connector to the whole database\n * </p>\n * TODO: replace the WebId argument with an interface that takes something\n * and error message logs.\n * \n * @param webidClaim\n *            the WebId to fetch\n * @return the repository connection containing the graph of the resource\n */\n", "func_signal": "public SailRepositoryConnection fetch(WebIdClaim webidClaim)", "code": "{\n    java.net.URI webid = webidClaim.getWebId();\n    String scheme = webid.getScheme();\n    if (!(\"http\".equals(scheme) || \"https\".equals(scheme) || \"ftp\".equals(scheme)\n            || \"ftps\".equals(scheme) || \"file\".equals(scheme))) {\n        /*\n         * \"file\" is for debugging purposes the above could be made more\n         * generic by tying it to the URLConnection lib or something.\n         */\n        webidClaim.fail(\"Cannot dereference \" + scheme + \" urls\");\n        /*\n         * one could do some further logic somehow, by checking if any\n         * trusted statements were made by trusted sources...\n         */\n        return null;\n    }\n\n    URL purl = null;\n    URL base = null;\n    try {\n        purl = webid.toURL();\n        base = new URL(purl.getProtocol(), purl.getHost(), purl.getPort(), purl.getFile());\n    } catch (MalformedURLException e) {\n        webidClaim.addProblem(new Error(\"WebId is not one we know to dereference \", e));\n        /*\n         * TODO: one could do other things: like look at trusted graphs...\n         * but for the moment to keep things simple, we fail in any case one\n         * would need trusted graphs for this to work, and without a large\n         * number of users, it won't have much value\n         */\n        return null;\n    }\n\n    InputStream foafDocInputStream = null;\n    RDFFormat rdfFormat = null;\n    try {\n\n        try {\n            URLConnection conn;\n            conn = purl.openConnection();\n            if (conn instanceof HttpURLConnection) {\n\n                /*\n                 * TODO: add the type of connection as metadata on this\n                 * graph eg, whether this is a secure connection or not\n                 * \n                 * TODO: note there is an rfc where HTTP connections can be\n                 * secure too, not widely deployed but it would be nice if\n                 * it were.\n                 */\n                if (conn instanceof HttpsURLConnection) {\n                    Certificate[] serverCertificates = ((HttpsURLConnection) conn)\n                            .getServerCertificates();\n                    webidClaim.setServerCertificateChain(serverCertificates);\n                }\n\n                HttpURLConnection hconn = (HttpURLConnection) conn;\n                /*\n                 * set by default to True, but might as well override\n                 * instances here, in case a default is set somewhere else\n                 * in the code.\n                 */\n                hconn.setInstanceFollowRedirects(true);\n                hconn\n                        .addRequestProperty(\"Accept:\",\n                                \"application/rdf+xml; q=1.0, text/html;q=0.7, application/xhtml+xml;q=0.8\");\n            }\n\n            conn.connect();\n            String mimeType = mimeType(conn.getContentType());\n            rdfFormat = RDFFormat.forMIMEType(mimeType);\n            foafDocInputStream = conn.getInputStream();\n\n        } catch (IOException e) {\n            webidClaim.fail(\"could not connect to resource \" + purl, e);\n            return null;\n        }\n\n        URI foafdocUri = getVF().createURI(base.toString());\n        SailRepositoryConnection repconn = null;\n\n        try {\n            repconn = getSailRep().getConnection();\n        } catch (RepositoryException e) {\n            webidClaim.fail(\"internal error. Could not connect to rdf repository\", e);\n        }\n        try {\n            SafeInputStream stream = new SafeInputStream(foafDocInputStream, MAX_LENGTH);\n            repconn.add(stream, base.toString(), rdfFormat, foafdocUri);\n            if (stream.wasCutShort()) {\n                webidClaim.warn(\"Input from resource was cut off at \" + stream.getMax()\n                        + \" Data could be missing.\");\n            }\n        } catch (IOException e) {\n            webidClaim.fail(\"Could not read input from resource \" + purl, e);\n            /*\n             * TODO: need not return null. It could try to continue and read\n             * from cache\n             */\n            return null;\n        } catch (RDFParseException e) {\n            webidClaim.fail(\"Could not parse resource \" + purl, e);\n            /*\n             * TODO: need not return null. It could try to continue and read\n             * from cache\n             */\n            return null;\n        } catch (RepositoryException e) {\n            webidClaim.fail(\"Internal error. Could not add information to repository\", e);\n            return null;\n        }\n        return repconn;\n    } finally {\n        if (foafDocInputStream != null) {\n            try {\n                foafDocInputStream.close();\n            } catch (IOException e) {\n\n            }\n        }\n    }\n}", "path": "foafssl-verifier\\src\\main\\java\\net\\java\\dev\\sommer\\foafssl\\cache\\GraphCache.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * Wrap an input stream from which no more than maxInput will be read\n *\n * @param wrapped  the intput stream to read from\n * @param maxInput the max number of bytes to read\n */\n", "func_signal": "public SafeInputStream(InputStream wrapped, int maxInput)", "code": "{\n    super(wrapped);\n    this.maxInput = maxInput;\n}", "path": "foafssl-verifier\\src\\main\\java\\net\\java\\dev\\sommer\\foafssl\\util\\SafeInputStream.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * This transforms a literal into a number if possible ie, it returns the\n * BigInteger of \"ddd\"^^type\n * \n * @param num\n *            the string representation of the number\n * @param type\n *            the type of the string representation\n * @return the number\n */\n", "func_signal": "private static BigInteger toInteger_helper(String num, String type)", "code": "{\n    if (type.equals(cert + \"decimal\") || type.equals(cert + \"int\")\n            || type.equals(xsd + \"integer\") || type.equals(xsd + \"int\")\n            || type.equals(xsd + \"nonNegativeInteger\")) {\n        // cert:decimal is deprecated\n        return new BigInteger(num.trim(), 10);\n    } else if (type.equals(cert + \"hex\")) {\n        String strval = cleanHex(num);\n        return new BigInteger(strval, 16);\n    } else {\n        // it could be some other encoding - one should really write a\n        // special literal transformation class\n    }\n    return null;\n}", "path": "foafssl-verifier\\src\\main\\java\\net\\java\\dev\\sommer\\foafssl\\verifier\\SesameFoafSslVerifier.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * Returns the public key matching the private key used to sign the\n * assertion.\n * \n * @return public key matching the private key used to sign the assertion.\n * @throws Exception\n */\n", "func_signal": "public PublicKey getPublicKey() throws Exception", "code": "{\n    KeyStore keyStore = getKeyStore();\n    Enumeration<String> aliases = keyStore.aliases();\n    while (aliases.hasMoreElements()) {\n        String alias = aliases.nextElement();\n        if (keyStore.isKeyEntry(alias)) {\n            return keyStore.getCertificate(alias).getPublicKey();\n        }\n    }\n    return null;\n}", "path": "foafssl-identity-provider\\src\\test\\java\\net\\java\\dev\\sommer\\foafssl\\login\\ShortRedirectIdpServletTest.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * Initialises the servlet: loads the keystore/keys to use to sign the\n * assertions and the issuer name.\n */\n", "func_signal": "@Override\npublic void init() throws ServletException", "code": "{\n    super.init();\n\n    KeyStore keyStore = null;\n\n    String keystorePath = getInitParameter(KEYSTORE_PATH_INITPARAM);\n    String keystoreType = getInitParameter(KEYSTORE_TYPE_INITPARAM);\n    char[] keystorePasswordArray = null;\n    char[] keyPasswordArray = null;\n    {\n        String keystorePassword = getInitParameter(KEYSTORE_PASSWORD_INITPARAM);\n        if (keystorePassword != null) {\n            keystorePasswordArray = keystorePassword.toCharArray();\n        }\n        String keyPassword = getInitParameter(KEY_PASSWORD_INITPARAM);\n        if (keyPassword != null) {\n            keyPasswordArray = keyPassword.toCharArray();\n        } else {\n            keyPasswordArray = keystorePasswordArray;\n        }\n    }\n    String alias = getInitParameter(ALIAS_INITPARAM);\n    Certificate certificate = null;\n    PrivateKey privateKey = null;\n\n    try {\n\n        // todo: this should be done via lookup\n        GraphCacheLookup.setCache(new MemoryGraphCache());\n\n    } catch (Exception e) {\n        throw new ServletException(e);\n    }\n\n    try {\n\n        Context initCtx = new InitialContext();\n        Context ctx = (Context) initCtx.lookup(\"java:comp/env\");\n        try {\n            try {\n                certificate = (Certificate) ctx.lookup(CERTIFICATE_JNDI_NAME);\n            } catch (NameNotFoundException e) {\n                LOG.log(Level.FINE, \"JNDI name not found\", e);\n            }\n\n            try {\n                privateKey = (PrivateKey) ctx.lookup(PRIVATEKEY_JNDI_NAME);\n            } catch (NameNotFoundException e) {\n                LOG.log(Level.FINE, \"JNDI name not found\", e);\n            }\n\n            try {\n                keyStore = (KeyStore) ctx.lookup(KEYSTORE_JNDI_NAME);\n            } catch (NameNotFoundException e) {\n                LOG.log(Level.FINE, \"JNDI name not found\", e);\n            }\n\n            try {\n                String jndiKeystorePath = (String) ctx.lookup(KEYSTOREPATH_JNDI_NAME);\n                if (jndiKeystorePath != null) {\n                    keystorePath = jndiKeystorePath;\n                }\n            } catch (NameNotFoundException e) {\n                LOG.log(Level.FINE, \"JNDI name not found\", e);\n            }\n            try {\n                String jndiKeystoreType = (String) ctx.lookup(KEYSTORETYPE_JNDI_NAME);\n                if (jndiKeystoreType != null) {\n                    keystoreType = jndiKeystoreType;\n                }\n            } catch (NameNotFoundException e) {\n                LOG.log(Level.FINE, \"JNDI name not found\", e);\n            }\n\n            try {\n                String jndiKeystorePassword = (String) ctx.lookup(KEYSTOREPASSWORD_JNDI_NAME);\n                if (jndiKeystorePassword != null) {\n                    keystorePasswordArray = jndiKeystorePassword.toCharArray();\n                }\n            } catch (NameNotFoundException e) {\n            }\n            try {\n                char[] jndiKeystorePasswordArray = (char[]) ctx\n                        .lookup(KEYSTOREPASSWORDARRAY_JNDI_NAME);\n                if (jndiKeystorePasswordArray != null) {\n                    keystorePasswordArray = jndiKeystorePasswordArray;\n                }\n            } catch (NameNotFoundException e) {\n                LOG.log(Level.FINE, \"JNDI name not found\", e);\n            }\n\n            try {\n                String jndiKeyPassword = (String) ctx.lookup(KEYPASSWORD_JNDI_NAME);\n                if (jndiKeyPassword != null) {\n                    keyPasswordArray = jndiKeyPassword.toCharArray();\n                }\n            } catch (NameNotFoundException e) {\n                LOG.log(Level.FINE, \"JNDI name not found\", e);\n            }\n            try {\n                char[] jndiKeyPasswordArray = (char[]) ctx.lookup(KEYPASSWORDARRAY_JNDI_NAME);\n                if (jndiKeyPasswordArray != null) {\n                    keyPasswordArray = jndiKeyPasswordArray;\n                }\n            } catch (NameNotFoundException e) {\n                LOG.log(Level.FINE, \"JNDI name not found\", e);\n            }\n\n            try {\n                String jndiKeyAlias = (String) ctx.lookup(KEYALIAS_JNDI_NAME);\n                if (jndiKeyAlias != null) {\n                    alias = jndiKeyAlias;\n                }\n            } catch (NameNotFoundException e) {\n                LOG.log(Level.FINE, \"JNDI name not found\", e);\n            }\n        } finally {\n            if (ctx != null) {\n                ctx.close();\n            }\n            if (initCtx != null) {\n                initCtx.close();\n            }\n        }\n    } catch (NameNotFoundException e) {\n        LOG.log(Level.INFO, \"Unable to load JNDI context.\", e);\n    } catch (NamingException e) {\n        LOG.log(Level.INFO, \"Unable to load JNDI context.\", e);\n    }\n\n    if (keyPasswordArray == null) {\n        keyPasswordArray = keystorePasswordArray;\n    }\n\n    if ((certificate == null) || (privateKey == null)) {\n        if (keyStore == null) {\n            try {\n                InputStream ksInputStream = null;\n\n                try {\n                    if (keystorePath != null) {\n                        ksInputStream = new FileInputStream(keystorePath);\n                    }\n                    keyStore = KeyStore.getInstance((keystoreType != null) ? keystoreType\n                            : KeyStore.getDefaultType());\n                    keyStore.load(ksInputStream, keystorePasswordArray);\n                } finally {\n                    if (ksInputStream != null) {\n                        ksInputStream.close();\n                    }\n                }\n            } catch (FileNotFoundException e) {\n                LOG\n                        .log(Level.SEVERE,\n                                \"Error configuring servlet (could not load keystore).\", e);\n                throw new ServletException(\"Could not load keystore.\");\n            } catch (KeyStoreException e) {\n                LOG\n                        .log(Level.SEVERE,\n                                \"Error configuring servlet (could not load keystore).\", e);\n                throw new ServletException(\"Could not load keystore.\");\n            } catch (NoSuchAlgorithmException e) {\n                LOG\n                        .log(Level.SEVERE,\n                                \"Error configuring servlet (could not load keystore).\", e);\n                throw new ServletException(\"Could not load keystore.\");\n            } catch (CertificateException e) {\n                LOG\n                        .log(Level.SEVERE,\n                                \"Error configuring servlet (could not load keystore).\", e);\n                throw new ServletException(\"Could not load keystore.\");\n            } catch (IOException e) {\n                LOG\n                        .log(Level.SEVERE,\n                                \"Error configuring servlet (could not load keystore).\", e);\n                throw new ServletException(\"Could not load keystore.\");\n            }\n        }\n\n        try {\n            if (alias == null) {\n                Enumeration<String> aliases = keyStore.aliases();\n                while (aliases.hasMoreElements()) {\n                    String tempAlias = aliases.nextElement();\n                    if (keyStore.isKeyEntry(tempAlias)) {\n                        alias = tempAlias;\n                        break;\n                    }\n                }\n            }\n            if (alias == null) {\n                LOG\n                        .log(\n                                Level.SEVERE,\n                                \"Error configuring servlet, invalid keystore configuration: alias unspecified or couldn't find key at alias: \"\n                                        + alias);\n                throw new ServletException(\n                        \"Invalid keystore configuration: alias unspecified or couldn't find key at alias: \"\n                                + alias);\n            }\n            if (privateKey == null) {\n                privateKey = (PrivateKey) keyStore.getKey(alias, keyPasswordArray);\n            }\n            if (certificate == null) {\n                certificate = keyStore.getCertificate(alias);\n            }\n        } catch (UnrecoverableKeyException e) {\n            LOG.log(Level.SEVERE, \"Error configuring servlet (could not load keystore).\", e);\n            throw new ServletException(\"Could not load keystore.\");\n        } catch (KeyStoreException e) {\n            LOG.log(Level.SEVERE, \"Error configuring servlet (could not load keystore).\", e);\n            throw new ServletException(\"Could not load keystore.\");\n        } catch (NoSuchAlgorithmException e) {\n            LOG.log(Level.SEVERE, \"Error configuring servlet (could not load keystore).\", e);\n            throw new ServletException(\"Could not load keystore.\");\n        }\n    }\n\n    this.certificate = certificate;\n    this.publicKey = certificate.getPublicKey();\n    this.privateKey = privateKey;\n}", "path": "foafssl-identity-provider\\src\\main\\java\\net\\java\\dev\\sommer\\foafssl\\login\\AbstractIdpServlet.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * If the server from which the Web ID when dereferenced serves a\n * representation, has a certificate chain then this is saved here\n * \n * @param serverCertificateChain\n */\n", "func_signal": "public void setServerCertificateChain(Certificate[] serverCertificateChain)", "code": "{\n    if (foafServerCertificateChain != null) {\n        ArrayList<Certificate> certs = new ArrayList<Certificate>(serverCertificateChain.length);\n        certs.addAll(Arrays.asList(serverCertificateChain));\n        this.foafServerCertificateChain = Collections.unmodifiableList(certs);\n    }\n}", "path": "foafssl-verifier\\src\\main\\java\\net\\java\\dev\\sommer\\foafssl\\claims\\WebIdClaim.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * Same test as testGoodLocalFoafXhtmlRDFaFile() but with a different mime\n * type\n * \n * @throws Exception\n */\n", "func_signal": "@Test\npublic void testGoodLocalFoafXhtmlRDFaFile2() throws Exception", "code": "{\n    mockStreamHandlerFactory.setUp(\"application/xhtml+xml\", TEST_GOOD_FOAF_XHTML_FILENAME);\n    WebIdClaim pr = new WebIdClaim(TEST_WEB_ID_URI, pubkey);\n    assertTrue(pr.verify());\n}", "path": "foafssl-verifier\\src\\test\\java\\net\\java\\dev\\sommer\\foafssl\\verifier\\WebIdClaimTest.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * This is not fool proof\n *\n * @throws IOException\n */\n", "func_signal": "@Override\npublic void reset() throws IOException", "code": "{\n    if (markSupported()) {\n        read = pointer;\n        super.reset();\n    }\n}", "path": "foafssl-verifier\\src\\main\\java\\net\\java\\dev\\sommer\\foafssl\\util\\SafeInputStream.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * @param verifiedWebIDs\n *            a list of webIds identifying the user (only the fist will be\n *            used)\n * @param replyTo\n *            the service that the response is sent to\n * @return the URL of the response with the webid, timestamp appended and\n *         signed\n * @throws NoSuchAlgorithmException\n * @throws UnsupportedEncodingException\n * @throws InvalidKeyException\n * @throws SignatureException\n */\n", "func_signal": "private String createSignedResponse(Collection<? extends WebIdClaim> verifiedWebIDs,\n        String replyTo) throws NoSuchAlgorithmException, UnsupportedEncodingException,\n        InvalidKeyException, SignatureException", "code": "{\n    /*\n     * Reads the FoafSsl simple authn request.\n     */\n    String authnResp = replyTo;\n\n    String sigAlg = null;\n    if (\"RSA\".equals(privateKey.getAlgorithm())) {\n        sigAlg = \"SHA1withRSA\";\n    } else if (\"DSA\".equals(privateKey.getAlgorithm())) {\n        sigAlg = \"SHA1withDSA\";\n    } else {\n        throw new NoSuchAlgorithmException(\"Unsupported key algorithm type.\");\n    }\n\n    URI webId = verifiedWebIDs.iterator().next().getWebId();\n    authnResp += \"?\" + WEBID_PARAMNAME + \"=\"\n            + URLEncoder.encode(webId.toASCIIString(), \"UTF-8\");\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n    authnResp += \"&\" + TIMESTAMP_PARAMNAME + \"=\"\n            + URLEncoder.encode(dateFormat.format(Calendar.getInstance().getTime()), \"UTF-8\");\n\n    String signedMessage = authnResp;\n    Signature signature = Signature.getInstance(sigAlg);\n    signature.initSign(privateKey);\n    signature.update(signedMessage.getBytes(\"UTF-8\"));\n    byte[] signatureBytes = signature.sign();\n    authnResp += \"&\" + SIGNATURE_PARAMNAME + \"=\"\n            + URLEncoder.encode(new String(Base64.encode(signatureBytes)), \"UTF-8\");\n    return authnResp;\n}", "path": "foafssl-identity-provider\\src\\main\\java\\net\\java\\dev\\sommer\\foafssl\\login\\ShortRedirectIdpServlet.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * Get the mime type\n * \n * @param contentType\n *            the content type header\n * @return the basic mime type\n */\n", "func_signal": "private String mimeType(String contentType)", "code": "{\n    int i = contentType.indexOf(';');\n    if (i > 0) {\n        contentType = contentType.substring(0, i);\n    }\n    return contentType.trim();\n}", "path": "foafssl-verifier\\src\\main\\java\\net\\java\\dev\\sommer\\foafssl\\cache\\GraphCache.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * Checks whether the certificate is valid at a given date.\n * \n * @param validityDate\n *            date to test\n * @return true if the date is after notBefore and before notAfter.\n */\n", "func_signal": "public boolean isCurrent(Date validityDate)", "code": "{\n    /*\n     * notAfter and notBefore are mandatory in X.509, so these two dates\n     * should always be present in a certificate.\n     */\n    Date notBeforeDate = certClaim.getNotBefore();\n    if (notBeforeDate == null || validityDate.before(notBeforeDate)) {\n        return false;\n    }\n    Date notAfterDate = certClaim.getNotAfter();\n    if (notAfterDate == null || validityDate.after(notAfterDate)) {\n        return false;\n    }\n    return true;\n}", "path": "foafssl-verifier\\src\\main\\java\\net\\java\\dev\\sommer\\foafssl\\claims\\X509Claim.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * Extracts the URIs in the subject alternative name extension of an X.509\n * certificate (perhaps others such as email addresses could also be\n * useful).\n * \n * @param cert\n *            X.509 certificate from which to extract the URIs.\n * @return list of java.net.URIs built from the URIs in the subjectAltName\n *         extension.\n */\n", "func_signal": "public static List<URI> getAlternativeURIName(X509Certificate cert)\n        throws CertificateParsingException", "code": "{\n    ArrayList<URI> answers = new ArrayList<URI>();\n    try {\n        if (cert == null) {\n            return answers;\n        }\n        Collection<List<?>> names = cert.getSubjectAlternativeNames();\n        if (names == null) {\n            return answers;\n        }\n        for (Iterator<List<?>> it = names.iterator(); it.hasNext();) {\n            List<?> altNameList = it.next();\n            Integer altNameType = (Integer) altNameList.get(0);\n            if (altNameType == 6) {\n                /*\n                 * See X.509 spec, section 8.3.2.1 these are the URIs!\n                 */\n                Object altNameValue = altNameList.get(1);\n                if (altNameValue instanceof String) {\n                    try {\n                        URI foafid = new URI((String) altNameValue);\n                        answers.add(foafid);\n                    } catch (URISyntaxException e) {\n                        throw new CertificateParsingException(\n                                \"Invalid URI in subject alt. name.\", e);\n                    }\n                } else {\n                    throw new CertificateParsingException(\"Invalid URI in subject alt. name.\");\n                }\n            }\n        }\n    } catch (CertificateParsingException e) {\n        LOG.log(Level.WARNING,\n                \"Unable to parse certificate for extracting the subjectAltNames.\", e);\n        throw e;\n    }\n    return answers;\n}", "path": "foafssl-verifier\\src\\main\\java\\net\\java\\dev\\sommer\\foafssl\\claims\\X509Claim.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * skipping also increments the counter.\n * Other behavior could be imagined. This won't work well on streams that allow rewinding\n *\n * @param n the number of bytes to skip\n * @return the bytes skipped\n * @throws IOException\n */\n", "func_signal": "@Override\npublic long skip(long n) throws IOException", "code": "{\n    n = Math.min(n, maxInput - read);\n    long skpd = super.skip(n);\n    read += skpd;\n    return skpd;\n}", "path": "foafssl-verifier\\src\\main\\java\\net\\java\\dev\\sommer\\foafssl\\util\\SafeInputStream.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n * Redirect request to the given url\n * \n * @param response\n * @param respUrl\n *            1the response Url to redirect to\n */\n", "func_signal": "private void redirect(HttpServletResponse response, String respUrl)", "code": "{\n    response.setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);\n    response.setHeader(\"Location\", respUrl);\n}", "path": "foafssl-identity-provider\\src\\main\\java\\net\\java\\dev\\sommer\\foafssl\\login\\ShortRedirectIdpServlet.java", "repo_name": "harbulot/foafssl-java", "stars": 4, "license": "other", "language": "java", "size": 460}
{"docstring": "/**\n   \u0425\u0225\u0425\u00e5\u0565ARC\uc973\u0264\u03e4ARC\uc973\u0264\u07a4\n   \u0425\u0225\u0425\u00e5\u0565\u03b0\u05a4ARC\uc973\u0264\u01ac\u03b0\u05a4\u01e4\u02a4\u0424\u02a4\u07a4\n   \u03e1\u0425\u0225\u0425\u00e5\u0565\u03b0\u05a4ARC\uc973\u0264\u03bc\u03b0\n   \u02f0\u01b0\u07a4\n\n   @param bb \u0425\u0225\u0425\u00e5\u0565\n   @throws IOException \u03e5\u987c\n*/\n", "func_signal": "public ArcRecord(final ByteBuffer bb) throws IOException", "code": "{\n\tendIndex = bb.getInt();\n\tflags = bb.getInt();\n}", "path": "src\\src\\com\\maroontress\\gcovparser\\gcno\\ArcRecord.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   gcno\u0565\u07a4\n\n   @param files \u0565\u033e\n   @param inputFile \u03e4\ua979\u0224\u03a5\u0565\u033e\u03e5\u0565\udb46\udca4\u07a4null\n   @throws IOException \u03e5\u987c\n*/\n", "func_signal": "public final void run(final String[] files,\n\t\t\t  final String inputFile) throws IOException", "code": "{\n\tverifyHeapSize();\n\tpre();\n\tfor (String arg : files) {\n\t    processFile(arg);\n\t}\n\tif (inputFile != null) {\n\t    processFileList(inputFile);\n\t}\n\tpost();\n\tverifyHeapSize();\n}", "path": "src\\src\\com\\maroontress\\coverture\\Processor.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   \u0425\u0225\u0425\u00e5\u0565ANNOUNCE_FUNCTION\uc973\u0264\u03e4\n   ANNOUNCE_FUNCTION\uc973\u0264\u07a4\u0425\u0225\u0425\u00e5\u0565\u03b0\u05a4\n   ANNOUNCE_FUNCTION\uc973\u0264\u01ac\u03b0\u05a4\u01e4\u02a4\u0424\u02a4\u07a4\n   \u03e1\u0425\u0225\u0425\u00e5\u0565\u03b0\u05a4ANNOUNCE_FUNCTION\uc973\u0264\u03bc\n   \u03b0\u05a4\u02f0\u01b0\u07a4\n\n   @param bb \u0425\u0225\u0425\u00e5\u0565\n   @throws IOException \u03e5\u987c\n   @throws UnexpectedTagException \u037d\u02a4\udaa2\udc7d\n*/\n", "func_signal": "public AnnounceFunctionRecord(final ByteBuffer bb)\n\tthrows IOException, UnexpectedTagException", "code": "{\n\tint tag = bb.getInt();\n\tint length = bb.getInt();\n\tint next = bb.position() + Parser.SIZE_INT32 * length;\n\n\tif (tag != Tag.FUNCTION) {\n\t    String m = String.format(\"unexpected tag: 0x%x\", tag);\n\t    throw new UnexpectedTagException(m);\n\t}\n\tid = bb.getInt();\n\tchecksum = bb.getInt();\n\tfunctionName = Parser.getString(bb);\n\tsourceFile = Parser.getInternString(bb);\n\tlineNumber = bb.getInt();\n\tbb.position(next);\n}", "path": "src\\src\\com\\maroontress\\gcovparser\\gcno\\AnnounceFunctionRecord.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   \u0565\ub92bgcno\u0565\u033e\u03a5\ua979\u0224\u03e4gcno\u0565\n   \u07a4\n\n   \u0565\u033e\u03e5\u0565\u03be\u03e1\u0278\u03e4\u0565\u033e\u03a5\ua979\u0224\n   \u03e4\u07a4\n\n   @param inputFile \u03e4\ua979\u0224\u03a5\u0565\u033e\u07a4\u03e5\u03e5\u0565\n   @throws IOException \u03e5\u987c\n*/\n", "func_signal": "private void processFileList(final String inputFile)\n\tthrows IOException", "code": "{\n\ttry {\n\t    InputStreamReader in;\n\t    if (inputFile.equals(\"-\")) {\n\t\tin = new InputStreamReader(System.in);\n\t    } else {\n\t\tin = new FileReader(inputFile);\n\t    }\n\t    BufferedReader rd = new BufferedReader(in);\n\t    String name;\n\t    while ((name = rd.readLine()) != null) {\n\t\tprocessFile(name);\n\t    }\n\t} catch (FileNotFoundException e) {\n\t    System.err.printf(\"%s: not found: %s%n\",\n\t\t\t      inputFile, e.getMessage());\n\t    System.exit(1);\n\t}\n}", "path": "src\\src\\com\\maroontress\\coverture\\Processor.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   \u02a4\u03a5\u05e5\u0272\u00e4\u07a4\n\n   @param name \u05e5\u033e\n   @param listener \u05e5\ua979\n   @param help \u0625\u05e5\u00e5\n*/\n", "func_signal": "public void add(final String name,\n\t\t    final OptionListener listener,\n\t\t    final String help)", "code": "{\n\tlistenerMap.put(name, listener);\n\tadd(name, help);\n}", "path": "src\\src\\com\\maroontress\\cui\\Options.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   gcov\u0565\u07a4\n\n   @param note \u03a1\n*/\n", "func_signal": "protected final void createSourceList(final Note note)", "code": "{\n\tif (props.isGcovEnabled()) {\n\t    note.createSourceList(props);\n\t}\n}", "path": "src\\src\\com\\maroontress\\coverture\\Processor.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   XML\u01fd\u03e4\u01e4\u8926\u02e5\u05e4\u02b8\u07a4\n\n   @param s \u02b8\n   @return \u05e4\u02b8\n*/\n", "func_signal": "public static String escape(final String s)", "code": "{\n    StringBuilder b = new StringBuilder();\n    int n = s.length();\n    for (int k = 0; k < n; ++k) {\n        char c = s.charAt(k);\n        String m = map.get(c);\n        if (m != null) {\n            b.append(m);\n        } else {\n            b.append(c);\n        }\n    }\n    return b.toString();\n}", "path": "src\\src\\com\\maroontress\\coverture\\XML.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   \udb57\ude65\udb57\ude64\u07a4\n\n   @param props \u03e5\u05e5\u0465\u01a5\n   @param threads \u04e5\u03a5\u00e5\u027f\n*/\n", "func_signal": "public DeliveryProcessor(final IOProperties props, final int threads)", "code": "{\n\tsuper(props);\n\tservice = new DeliveryService<Note>(threads);\n}", "path": "src\\src\\com\\maroontress\\coverture\\DeliveryProcessor.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   \u05e5\u07a4\n\n   @param indentWidth \u05e5\u03a5\u01e5\n   @return \n*/\n", "func_signal": "public String getHelpMessage(final int indentWidth)", "code": "{\n\tint width = Math.max(MIN_INDENT_WIDTH, indentWidth);\n\tString helpIndent = \"\\n\";\n\tfor (int k = 0; k < width; ++k) {\n\t    helpIndent += \" \";\n\t}\n\tSet<Map.Entry<String, String>> set = helpMap.entrySet();\n\tString format = \"--%-\" + (width - MIN_INDENT_WIDTH) + \"s  %s\\n\";\n\tString m = \"\";\n\tfor (Map.Entry<String, String> e : set) {\n\t    String desc = e.getValue().replace(\"\\n\", helpIndent);\n\t    m += String.format(format, e.getKey(), desc);\n\t}\n\treturn m;\n}", "path": "src\\src\\com\\maroontress\\cui\\Options.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   \u07a5\u0265\u9964\u03b0\u0461\u07a4\n\n   --\u01fb\u03e4\u07a4\uda56\udea5\u05e5\u0224\u01b2\u1937\u07a4\u02b3\u03b0\n   \u02b3\u01e5\u0461\u03bb\u07a4\n\n   @param av \u07a5\u0265\u9964\u03b0\n   @return \u07a5\u0265\u9964\u03b0\u03a4\u01fd\u02fd\u0438\udb56\udea5\u05e5\n   \u03b0\u01f8\u03b0\u07a4\u01e4\n   @throws OptionsParsingException \u02a5\u05e5\u03bb\n*/\n", "func_signal": "public String[] parseFore(final String[] av)\n\tthrows OptionsParsingException", "code": "{\n\tString s;\n\tint k;\n\n\tfor (k = 0; k < av.length && isOption(s = av[k]); ++k) {\n\t    parseOption(s);\n\t}\n\treturn Arrays.copyOfRange(av, k, av.length);\n}", "path": "src\\src\\com\\maroontress\\cui\\Options.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   \u05e5\u0461\u07a4\n\n   @param s \u05e5\n   @throws OptionsParsingException \u05e5\u03a5\u0461\u02fc\u0524\n   \u02e5\u07a4\n*/\n", "func_signal": "private void parseOption(final String s) throws OptionsParsingException", "code": "{\n\tString argName;\n\tString argValue;\n\tSet<String> set;\n\tint n = s.indexOf('=');\n\tif (n < 0) {\n\t    argName = s.substring(2);\n\t    argValue = null;\n\t    set = options;\n\t} else {\n\t    argName = s.substring(2, n);\n\t    argValue = s.substring(n + 1);\n\t    set = argOptions;\n\t}\n\tif (!set.contains(argName)) {\n\t    throw new OptionsParsingException(\"invalid option: \" + s);\n\t}\n\tOptionListener listener = listenerMap.get(argName);\n\tif (listener != null) {\n\t    listener.run(argName, argValue);\n\t}\n\tvalueMap.put(argName, argValue);\n}", "path": "src\\src\\com\\maroontress\\cui\\Options.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   \u07a5\u0265\u9964\u03b0\u0461\u07a4\n\n   --\u01fb\u03e4\u07a4\uda56\udea5\u05e5\u0224\u01b2\u1937\u07a4\u02b3\u03b0\u03e5\n   \u05e5\u0224\u01b2\u193b\u00e5\u05e4\u07a4\n\n   @param av \u07a5\u0265\u9964\u03b0\n   @return \u05e5\u01e4\u03e4\u02a4\n   @throws OptionsParsingException \u02a5\u05e5\u03bb\n*/\n", "func_signal": "public String[] parse(final String[] av) throws OptionsParsingException", "code": "{\n\tArrayList<String> args = new ArrayList<String>();\n\n\tfor (String s : av) {\n\t    if (!isOption(s)) {\n\t\targs.add(s);\n\t\tcontinue;\n\t    }\n\t    parseOption(s);\n\t}\n\treturn args.toArray(new String[args.size()]);\n}", "path": "src\\src\\com\\maroontress\\cui\\Options.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   \u03a5\u05e5\u0272\u00e4\u07a4\n\n   @param name \u05e5\u033e\n   @param argName \u033e\n   @param help \u0625\u05e5\u00e5\n*/\n", "func_signal": "public void add(final String name,\n\t\t    final String argName,\n\t\t    final String help)", "code": "{\n\targOptions.add(name);\n\thelpMap.put(name + \"=\" + argName, help);\n}", "path": "src\\src\\com\\maroontress\\cui\\Options.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "protected void processFile(final String name) throws IOException", "code": "{\n\tservice.submit(new Callable<Note>() {\n\t    public Note call() throws Exception {\n\t\tNote note = Note.parse(name);\n\t\tif (note == null) {\n\t\t    return null;\n\t\t}\n\t\tcreateSourceList(note);\n\t\treturn note;\n\t    }\n\t});\n}", "path": "src\\src\\com\\maroontress\\coverture\\DeliveryProcessor.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "protected void post() throws IOException", "code": "{\n\tfinal Set<Note> set = new TreeSet<Note>(Note.getOriginComparator());\n\ttry {\n\t    service.deliver(new DeliveryListener<Note>() {\n\t        public void deliver(final Note note) {\n\t\t    set.add(note);\n\t\t}\n\t    });\n\t} catch (ExecutionException e) {\n\t    e.getCause().printStackTrace();\n\t    System.exit(1);\n\t}\n\n\tPrintWriter out = new PrintWriter(System.out);\n\tout.print(\"<gcno>\\n\");\n\tfor (Note note : set) {\n\t    note.printXML(out);\n\t}\n\tout.print(\"</gcno>\\n\");\n\tout.close();\n}", "path": "src\\src\\com\\maroontress\\coverture\\DeliveryProcessor.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   \u03a5\u05e5\u0272\u00e4\u07a4\n\n   @param name \u05e5\u033e\n   @param listener \u05e5\ua979\n   @param argName \u033e\n   @param help \u0625\u05e5\u00e5\n*/\n", "func_signal": "public void add(final String name,\n\t\t    final OptionListener listener,\n\t\t    final String argName,\n\t\t    final String help)", "code": "{\n\tlistenerMap.put(name, listener);\n\tadd(name, argName, help);\n}", "path": "src\\src\\com\\maroontress\\cui\\Options.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   \u07a5\u0265\u9964\udb56\udea5\u05e5\u07a4\n*/\n", "func_signal": "public Options()", "code": "{\n\toptions = new HashSet<String>();\n\targOptions = new HashSet<String>();\n\tvalueMap = new HashMap<String, String>();\n\tlistenerMap = new HashMap<String, OptionListener>();\n\thelpMap = new TreeMap<String, String>();\n}", "path": "src\\src\\com\\maroontress\\cui\\Options.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   \u02a4\u03a5\u05e5\u0272\u00e4\u07a4\n\n   @param name \u05e5\u033e\n   @param help \u0625\u05e5\u00e5\n*/\n", "func_signal": "public void add(final String name,\n\t\t    final String help)", "code": "{\n\toptions.add(name);\n\thelpMap.put(name, help);\n}", "path": "src\\src\\com\\maroontress\\cui\\Options.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   verbose\u287c\u0264\u03a4\u0224\u02e5\u04a1\u05e5\u0278\u0968\u987c\u03e4\u027d\u07a4\n*/\n", "func_signal": "private void verifyHeapSize()", "code": "{\n\tif (props.isVerbose()) {\n\t    Runtime t = Runtime.getRuntime();\n\t    t.gc();\n\t    System.err.printf(\"heap: %d/%d%n\", t.freeMemory(), t.maxMemory());\n\t}\n}", "path": "src\\src\\com\\maroontress\\coverture\\Processor.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n   gcov\u0565gcov\u0565\u03e4\u01e5\uc96f\u0225\n   \u07a4\n*/\n", "func_signal": "protected final void makeOutputDir()", "code": "{\n\tif (props.isGcovEnabled()) {\n\t    props.makeOutputDir();\n\t}\n}", "path": "src\\src\\com\\maroontress\\coverture\\Processor.java", "repo_name": "maroontress-tomohisa/coverture", "stars": 4, "license": "None", "language": "java", "size": 368}
{"docstring": "/**\n * Partitions {@code items} into exactly two groups by applying the supplied {@code partitionCondition} to each\n * item.  All items for which {@code partitionCondition} returns {@code true} will be placed into one group, and all\n * items for which it returns {@code false} will be placed into the other.\n *\n * @param items              items to partition\n * @param partitionCondition {@link Condition} to use to separate items into two groups.\n * @param trueResults        all items for which {@code partitionCondition} returns {@code true} will be placed in\n *                           this {@link Collection}\n * @param falseResults       all items for which {@code partitionCondition} returns {@code false} will be placed in\n *                           this {@link Collection}\n *\n * @return a new {@link java.util.Map} of all items by their partition key.\n */\n", "func_signal": "public static <X> void partition(final Iterable<X> items,\n                                 final Collection<X> trueResults,\n                                 final Collection<X> falseResults,\n                                 final Condition<X> partitionCondition)", "code": "{\n    for (X item : items) {\n        // Quite pleased that this actually works in Java\n        (partitionCondition.eval(item) ? trueResults : falseResults).add(item);\n    }\n}", "path": "src\\org\\bc\\iterate\\Algorithms.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * Sorts {@code itemsToSort} based on the order of items in {@code exampleOrder}.  Any items in {@code itemsToSort}\n * that do not appear in {@code exampleOrder} <em>will not</em> be included in the returned results.\n *\n * @param exampleOrder example ordering by which {@code itemsToSort} will be sorted\n * @param xKeyFunction {@link Function} to provide a key by which items in {@code exampleOrder} and {@code\n *                     itemsToSort} can be matched\n * @param itemsToSort  items to be sorted.  Note that unlike {@link Collections#sort(java.util.List)}, this method\n *                     does not modify {@code itemsToSort}.\n * @param yKeyFunction {@link Function} to provide a key by which items in {@code itemsToSort} and {@code\n *                     itemsToSort} can be matched\n *\n * @return a {@link List} sorted in the order provided in {@code exampleOrder}\n */\n", "func_signal": "public static <K, X, Y> List<Y> sortByExample(final Iterable<X> exampleOrder,\n                                              final Function<? super X, K> xKeyFunction,\n                                              final Iterable<Y> itemsToSort,\n                                              final Function<? super Y, K> yKeyFunction)", "code": "{\n    // Use an inner join to correlate exampleOrder and itemsToSort to only items with appear in itemsToSort, but\n    // preserving the order provided in exampleOrder.\n    return Iterate.each(exampleOrder).join(Join.inner(xKeyFunction, yKeyFunction), itemsToSort)\n            .map(Pair.<X, Y>y()).add(new ArrayList<Y>(Iterate.estimateSize(itemsToSort)));\n}", "path": "src\\org\\bc\\iterate\\Algorithms.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * @param boxedPrimitive boxed primitive\n *\n * @return the primitive {@link Class} (e.g. int.class) representing the type of the supplied boxed primitive (e.g.\n *         {@link Integer})\n */\n", "func_signal": "public static Class getUnboxedClass(Object boxedPrimitive)", "code": "{\n    final Class<?> c = boxedPrimitive.getClass();\n    final Class unboxed = getUnboxedClass(c);\n    return unboxed == null ? c : unboxed;\n}", "path": "src\\org\\bc\\iterate\\reflect\\ReflectionUtil.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * @param random {@link Random} to use to generate random {@link Float}s\n *\n * @return a inexhaustable {@link Iterable} of random {@link Float}s using the supplied {@link Random}. See {@link\n *         java.util.Random#nextFloat()} for numeric range of returned values.\n */\n", "func_signal": "public static Iterate<Float> random(final Random random)", "code": "{\n    return Iterate.each(new Iterable<Float>()\n    {\n        @Override\n        public Iterator<Float> iterator()\n        {\n            return new AbstractIterator<Float>()\n            {\n                public boolean hasNext()\n                {\n                    return true;\n                }\n\n                @SuppressWarnings({\"IteratorNextCanNotThrowNoSuchElementException\"})\n                public Float next()\n                {\n                    return random.nextFloat();\n                }\n            };\n        }\n    });\n}", "path": "src\\org\\bc\\iterate\\Floats.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * a {@link BinaryVisitor} that will add all elements of the {@link Iterable} {@code x} to the {@link Collection}\n * {@code y}\n *\n * @return a {@link BinaryVisitor} that will add all elements of the {@link Iterable} {@code x} to the {@link\n *         Collection} {@code y}\n */\n", "func_signal": "public static <X, IterableType extends Iterable<X>, CollectionType extends Collection<? super X>> BinaryVisitor<IterableType, CollectionType> addAll()", "code": "{\n    return new BinaryVisitor<IterableType, CollectionType>()\n    {\n        public void visit(IterableType iterable, CollectionType cx)\n        {\n            for (X x : iterable) {\n                cx.add(x);\n            }\n        }\n    };\n}", "path": "src\\org\\bc\\iterate\\Iterate.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * @return a {@link Function} that returns the result of squaring its argument, i.e. {@code x * x}\n */\n", "func_signal": "public static Monoid<Integer> square()", "code": "{\n    return new Monoid<Integer>()\n    {\n        public Integer apply(Integer i)\n        {\n            return i * i;\n        }\n    };\n}", "path": "src\\org\\bc\\iterate\\Integers.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * Finds the named method that accepts the supplied parameter types.\n *\n * @return the found method, if it exists.\n *\n * @throws NoSuchMethodException if a method with the supplied {@code name} that accepts the supplied {@code\n *                               paramTypes}.\n */\n", "func_signal": "public static Method getMethod(Class clazz, String name, Class... paramTypes) throws NoSuchMethodException", "code": "{\n    final MethodCacheKey cacheKey = createMethodCacheKey(clazz, name, paramTypes);\n    Method targetMethod = methodCache.get(cacheKey);\n    if (targetMethod == null) {\n        targetMethod = clazz.getMethod(name, paramTypes);\n        methodCache.put(cacheKey, targetMethod);\n    }\n\n    return targetMethod;\n}", "path": "src\\org\\bc\\iterate\\reflect\\ReflectionUtil.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * Partitions {@code items} into groups based on the partition key generated by {@code groupFunction}.\n *\n * @param items         items to partition\n * @param groupFunction {@link Function} to be used to generate a partition key for each item\n *\n * @return a new {@link java.util.Map} of all items by their partition key.\n */\n", "func_signal": "public static <X, Y> Map<Y, Collection<X>> partition(final Iterable<X> items, final Function<X, Y> groupFunction)", "code": "{\n    final int size = Iterate.estimateSize(items);\n    final int groupSize = (size / 2) + 1;\n    return Iterate.each(items).visit(new BinaryVisitor<X, Map<Y, Collection<X>>>()\n    {\n        public void visit(X item, Map<Y, Collection<X>> results)\n        {\n            Y key = groupFunction.apply(item);\n            Collection<X> group = results.get(key);\n            if (group == null) {\n                group = new ArrayList<X>(groupSize);\n                results.put(key, group);\n            }\n\n            group.add(item);\n        }\n    }, new HashMap<Y, Collection<X>>(size));\n}", "path": "src\\org\\bc\\iterate\\Algorithms.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * Finds the named method that accepts the supplied actual parameters.\n *\n * @return the found method, if it exists.\n *\n * @throws NoSuchMethodException if a method with the supplied {@code name} that accepts the supplied {@code\n *                               actualParams}.\n */\n", "func_signal": "public static Method getMethod(Class clazz, String name, Object... actualParams) throws NoSuchMethodException", "code": "{\n    Class[] paramTypes = new Class[actualParams.length];\n    for (int i = 0; i < actualParams.length; i++) {\n        paramTypes[i] = getUnboxedClass(actualParams[i]);\n    }\n\n    return getMethod(clazz, name, paramTypes);\n}", "path": "src\\org\\bc\\iterate\\reflect\\ReflectionUtil.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * Returns the first item in {@code items} for which {@code criteria#apply(item) == true}\n *\n * @param items    items to search\n * @param criteria {@link Condition} to evaluate for each item\n *\n * @return the first item for which {@code criteria#apply(item) == true}\n */\n", "func_signal": "public static <X> X first(final Iterable<X> items, final Condition<? super X> criteria)", "code": "{\n    for (X item : items) {\n        if (criteria.eval(item)) {\n            return item;\n        }\n    }\n\n    return null;\n}", "path": "src\\org\\bc\\iterate\\Algorithms.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * @param items    items from which to select\n * @param criteria items matching this {@link Condition} will be selected and returned in the resulting {@link\n *                 java.util.Collection}\n *\n * @return {@link Collection} of items from {@code items} matching {@code criteria}\n */\n", "func_signal": "public static <X> Collection<X> select(final Iterable<X> items, final Condition<X> criteria)", "code": "{\n    return Iterate.each(items).where(criteria)\n            .visit(Iterate.collect(), new ArrayList<X>(Iterate.estimateSize(items)));\n}", "path": "src\\org\\bc\\iterate\\Algorithms.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * @param items    items to evaluate\n * @param criteria criteria to use to evaluate {@code items}\n *\n * @return true iff {@code criteria} evaluates to {@code true} for aLL items in {@code items}.\n */\n", "func_signal": "public static <X> boolean all(final Iterable<X> items, final Condition<? super X> criteria)", "code": "{\n    for (X item : items) {\n        if (!criteria.eval(item)) {\n            return false;\n        }\n    }\n\n    return true;\n}", "path": "src\\org\\bc\\iterate\\Algorithms.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * @param random {@link Random} to use to generate random {@link Float}s\n *\n * @return a inexhaustable {@link Iterable} of random {@link Long}s using the supplied {@link Random}. See {@link\n *         java.util.Random#nextLong()} for numeric range of returned values.\n */\n", "func_signal": "public static Iterate<Long> random(final Random random)", "code": "{\n    return Iterate.each(new Iterable<Long>()\n    {\n        @Override\n        public Iterator<Long> iterator()\n        {\n            return new AbstractIterator<Long>()\n            {\n\n                public boolean hasNext()\n                {\n                    return true;\n                }\n\n                @SuppressWarnings({\"IteratorNextCanNotThrowNoSuchElementException\"})\n                public Long next()\n                {\n                    return random.nextLong();\n                }\n            };\n        }\n    });\n}", "path": "src\\org\\bc\\iterate\\Longs.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * @param random            {@link Random} to use to generate random integers.\n * @param maxValueExclusive random integers strictly less than this value will be returned by the {@link Iterable}\n *\n * @return a inexhaustable {@link Iterable} of random integers from {@code 0} to {@code maxValueExclusive} using the\n *         supplied {@link Random}\n */\n", "func_signal": "public static Iterate<Integer> random(final Random random, final int maxValueExclusive)", "code": "{\n    return Iterate.each(new Iterable<Integer>()\n    {\n        @Override\n        public Iterator<Integer> iterator()\n        {\n            return new AbstractIterator<Integer>()\n            {\n                public boolean hasNext()\n                {\n                    return true;\n                }\n\n                @SuppressWarnings({\"IteratorNextCanNotThrowNoSuchElementException\"})\n                public Integer next()\n                {\n                    return random.nextInt(maxValueExclusive);\n                }\n            };\n        }\n    });\n}", "path": "src\\org\\bc\\iterate\\Integers.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * @return a {@link Function} that will parse a {@link String} into an {@link Integer}\n */\n", "func_signal": "public static Function<String, Integer> parse()", "code": "{\n    return new Function<String, Integer>()\n    {\n        public Integer apply(String s)\n        {\n            return Integer.valueOf(s);\n        }\n    };\n}", "path": "src\\org\\bc\\iterate\\Integers.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * Partitions {@code items} into exactly two groups by applying the supplied {@code partitionCondition} to each\n * item.  All items for which {@code partitionCondition} returns {@code true} will be placed into one group, and all\n * items for which it returns {@code false} will be placed into the other.\n *\n * @param items              items to partition\n * @param partitionCondition {@link Condition} to use to separate items into two groups.\n *\n * @return a new {@link java.util.Map} of all items by their partition key.\n */\n", "func_signal": "public static <X> Map<Boolean, Collection<X>> partition(final Iterable<X> items,\n                                                        final Condition<X> partitionCondition)", "code": "{\n    final int size = (Iterate.estimateSize(items) / 2) + 1;\n    final ArrayList<X> falseResults = new ArrayList<X>(size);\n    final ArrayList<X> trueResults = new ArrayList<X>(size);\n\n    partition(items, trueResults, falseResults, partitionCondition);\n\n    Map<Boolean, Collection<X>> results = new HashMap<Boolean, Collection<X>>(2);\n    results.put(false, falseResults);\n    results.put(true, trueResults);\n\n    return results;\n}", "path": "src\\org\\bc\\iterate\\Algorithms.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * @deprecated will be removed before version 1.0\n */\n", "func_signal": "public <Y, Z> Z visit(TernaryVisitor<? super X, ? super Y, Z> visitor,\n                      Function<? super X, ? extends Y> f,\n                      Z param)", "code": "{\n    for (X x : this) {\n        visitor.visit(x, f.apply(x), param);\n    }\n\n    return param;\n}", "path": "src\\org\\bc\\iterate\\Iterate.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * a {@link BinaryVisitor} that will app the value {@code x} to a supplied {@link Map} using the key generated by\n * apply {@code mapFunction} to {@code x}\n *\n * @param mapFunction {@link Function} that will be used to generate map keys for each item\n *\n * @return a {@link BinaryVisitor} that will app the value {@code x} to a supplied {@link Map} using the key\n *         generated by apply {@code mapFunction} to {@code x}\n */\n", "func_signal": "public static <X, Y> BinaryVisitor<? super X, Map<Y, X>> map(final Function<X, Y> mapFunction)", "code": "{\n    return new BinaryVisitor<X, Map<Y, X>>()\n    {\n        public void visit(X x, Map<Y, X> yxMap)\n        {\n            yxMap.put(mapFunction.apply(x), x);\n        }\n    };\n}", "path": "src\\org\\bc\\iterate\\Iterate.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * @return a {@link BinaryFunction} that returns the result of adding its two arguments, i.e. {@code x + y}\n */\n", "func_signal": "public static BinaryFunction<Integer, Integer, Integer> sum()", "code": "{\n    return new BinaryFunction<Integer, Integer, Integer>()\n    {\n        public Integer apply(Integer i1, Integer i2)\n        {\n            return i1 + i2;\n        }\n\n        public String toString()\n        {\n            return \"+\";\n        }\n    };\n}", "path": "src\\org\\bc\\iterate\\Integers.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * a {@link BinaryVisitor} that will add the item {@code x} to the {@code Collection y}\n *\n * @return a {@link BinaryVisitor} that will add the item {@code x} to the {@code Collection y}\n */\n", "func_signal": "public static <X> BinaryVisitor<X, Collection> collect()", "code": "{\n    return new BinaryVisitor<X, Collection>()\n    {\n        public void visit(X x, Collection collection)\n        {\n            //noinspection unchecked\n            collection.add(x);\n        }\n    };\n}", "path": "src\\org\\bc\\iterate\\Iterate.java", "repo_name": "briancavalier/iterate", "stars": 6, "license": "None", "language": "java", "size": 1329}
{"docstring": "/**\n * Test\n */\n", "func_signal": "public void testScalar()", "code": "{\n    final OctaveEngine octave = new OctaveEngineFactory().getScriptEngine();\n    octave.eval(\"s.one=1;\");\n    octave.eval(\"s.two=[2 3];\");\n\n    final OctaveStruct cell = octave.get(\"s\");\n\n    final OctaveNdMatrix two = (OctaveNdMatrix) cell.get(\"two\");\n    assertEquals(1, two.rows());\n    assertEquals(2, two.columns());\n    assertEquals(2d, two.get(1, 1));\n    assertEquals(3d, two.get(1, 2));\n\n    final OctaveNdMatrix one = (OctaveNdMatrix) cell.get(\"one\");\n    assertEquals(1, one.rows());\n    assertEquals(1, one.columns());\n    assertEquals(1d, one.get(1, 1));\n\n    octave.close();\n}", "path": "java\\javaoctave\\test\\dk\\ange\\octave\\io\\impl\\TestOctaveNdMatrix.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/** */\n", "func_signal": "public void testResize()", "code": "{\n    final OctaveNdMatrix matrix = new OctaveNdMatrix(0, 4);\n    assertEquals(2, matrix.getSize().length);\n    assertEquals(0, matrix.getSize()[0]);\n    assertEquals(4, matrix.getSize()[1]);\n    // assertEquals(0, matrix.getData().length); is 0\n    assertTrue(matrix.getData().length >= 0);\n\n    matrix.set(42.0, 1, 1);\n    assertEquals(42.0, matrix.get(1, 1));\n    assertEquals(2, matrix.getSize().length);\n    assertEquals(1, matrix.getSize()[0]);\n    assertEquals(4, matrix.getSize()[1]);\n    // assertEquals(4, matrix.getData().length); is 8\n    assertTrue(matrix.getData().length >= 4);\n}", "path": "java\\javaoctave\\test\\dk\\ange\\octave\\type\\TestOctaveNdMatrix.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n * @param row\n * @param column\n * @param value\n */\n", "func_signal": "public void set(final int row, final int column, final OctaveType value)", "code": "{\n    if (row < 1) {\n        throw new IllegalArgumentException(\"row cannot be less or equal to 0\");\n    }\n    if (column < 1) {\n        throw new IllegalArgumentException(\"column cannot be less or equal to 0\");\n    }\n\n    // Expand if needed\n    resize(Math.max(row, rows), Math.max(column, columns));\n\n    // Finally, set value\n    data.get(row - 1).set(column - 1, value);\n}", "path": "java\\javaoctave\\src\\dk\\ange\\octave\\type\\OctaveCell.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n */\n", "func_signal": "public void testPerformance()", "code": "{\n    OctaveNdMatrix matrix = new OctaveNdMatrix(30, 0);\n    long t = System.currentTimeMillis();\n    // 4125 was the number of containers in a real job.\n    for (int pos = 1; pos <= 4125; ++pos) {\n        matrix.set(4.2, 1, pos);\n        matrix.set(4.2, 30, pos);\n    }\n    long timeused = System.currentTimeMillis() - t;\n    if (timeused > 500) {\n        fail(\"Performance test didn't finish in 500ms (used \" + timeused + \"ms)\");\n    }\n\n    matrix = new OctaveNdMatrix(0, 30);\n    t = System.currentTimeMillis();\n    // 700 is just some random number\n    for (int pos = 1; pos <= 700; ++pos) {\n        matrix.set(4.2, pos, 1);\n        matrix.set(4.2, pos, 30);\n    }\n    timeused = System.currentTimeMillis() - t;\n    if (timeused > 500) {\n        fail(\"Performance test didn't finish in 500ms (used \" + timeused + \"ms)\");\n    }\n}", "path": "java\\javaoctave\\test\\dk\\ange\\octave\\type\\TestOctaveMatrix.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n * @param type\n * @return The OctaveDataReader or null if it does not exist\n */\n", "func_signal": "public static OctaveDataReader getOctaveDataReader(final String type)", "code": "{\n    initIfNecessary();\n    return readers.get(type);\n}", "path": "java\\javaoctave\\src\\dk\\ange\\octave\\io\\spi\\OctaveDataReader.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n */\n", "func_signal": "public void testSizeConstructor()", "code": "{\n    final OctaveNdMatrix matrix = new OctaveNdMatrix(3, 6, 5, 4);\n    assertEquals(matrix.getSize().length, 4);\n    assertEquals(matrix.getSize()[0], 3);\n    assertEquals(matrix.getSize()[1], 6);\n    assertEquals(matrix.getSize()[2], 5);\n    assertEquals(matrix.getSize()[3], 4);\n\n    final OctaveNdMatrix matrixEmpty = new OctaveNdMatrix(0, 0);\n    assertEquals(matrixEmpty.getData().length, 0);\n\n    try {\n        new OctaveNdMatrix(1);\n        fail(\"OctaveNdMatrixes does not support less than one dimension. \");\n    } catch (final IllegalArgumentException e) {\n        // OK\n    }\n}", "path": "java\\javaoctave\\test\\dk\\ange\\octave\\type\\TestOctaveNdMatrix.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n * Flushes the writer and looses the connection to it.\n * \n * @throws IOException\n *                 from the underlying writer.\n */\n", "func_signal": "@Override\npublic void close() throws IOException", "code": "{\n    log.debug(\"ignoring close() on a writer\");\n    if (writer == null) {\n        return;\n    }\n    writer.flush();\n    writer = null;\n}", "path": "java\\javaoctave\\src\\dk\\ange\\octave\\util\\NoCloseWriter.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n * Create empty cell\n */\n", "func_signal": "public OctaveCell()", "code": "{\n    data = new ArrayList<ArrayList<OctaveType>>();\n    rows = 0;\n    columns = 0;\n}", "path": "java\\javaoctave\\src\\dk\\ange\\octave\\type\\OctaveCell.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n * Test\n */\n", "func_signal": "public void testMatices()", "code": "{\n    final OctaveEngine octave = new OctaveEngineFactory().getScriptEngine();\n    octave.eval(\"s = struct();\");\n    final int[] i123 = { 1, 2, 3 };\n    for (final int i : i123) {\n        octave.eval(setMatrix(i));\n        for (final int j : i123) {\n            octave.eval(setMatrix(i, j));\n            for (final int k : i123) {\n                octave.eval(setMatrix(i, j, k));\n                for (final int l : i123) {\n                    octave.eval(setMatrix(i, j, k, l));\n                }\n            }\n        }\n    }\n    final OctaveStruct s1 = octave.get(\"s\");\n    octave.put(\"s1\", s1);\n    octave.eval(\"t = 1.0*isequal(s, s1);\"); // \"1.0*\" is a typecast from bool to scalar\n    final OctaveScalar t = octave.get(\"t\");\n    assertEquals(1.0, t.getDouble());\n    final OctaveStruct s2 = octave.get(\"s1\");\n    assertEquals(s1, s2);\n    octave.close();\n}", "path": "java\\javaoctave\\test\\dk\\ange\\octave\\io\\impl\\TestOctaveStruct.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n */\n", "func_signal": "public void testGetAndSet()", "code": "{\n    final OctaveNdMatrix matrix = new OctaveNdMatrix(3, 6, 5, 4);\n    matrix.set(2.0, 2, 5, 2, 3);\n    for (int row = 1; row <= 3; row++) {\n        for (int column = 1; column <= 6; column++) {\n            for (int depth = 1; depth <= 5; depth++) {\n                for (int coffee = 1; coffee <= 4; coffee++) {\n                    if (row == 2 && column == 5 && depth == 2 && coffee == 3) {\n                        assertEquals(matrix.get(row, column, depth, coffee), 2.0);\n                    } else {\n                        assertEquals(matrix.get(row, column, depth, coffee), 0.0);\n                    }\n                }\n            }\n        }\n    }\n    try {\n        matrix.get(2, 3, 1, 0);\n        fail(\"Attempt to get with a position that includes a 0 should fail\");\n    } catch (final IndexOutOfBoundsException e) {\n        // ok\n    }\n    try {\n        matrix.get(2, 3, 10, 3);\n        fail(\"Attempt to get with a position that exceeds range should fail\");\n    } catch (final IndexOutOfBoundsException e) {\n        // ok\n    }\n    try {\n        matrix.get(2, 3, 2, 3, 4);\n        fail(\"Attempt to get with a position that exceeds dimensions should fail\");\n    } catch (final IndexOutOfBoundsException e) {\n        // ok\n    }\n\n}", "path": "java\\javaoctave\\test\\dk\\ange\\octave\\type\\TestOctaveNdMatrix.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n */\n", "func_signal": "public void testConstructor()", "code": "{\n    final OctaveType struct = new OctaveStruct();\n    Assert.assertEquals(\"# name: mystruct\\n# type: struct\\n# length: 0\\n\", OctaveIO.toText(struct, \"mystruct\"));\n}", "path": "java\\javaoctave\\test\\dk\\ange\\octave\\io\\impl\\TestOctaveStruct.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n * Tests that the get methods returns a copy\n */\n", "func_signal": "public void testReturnCopy()", "code": "{\n    final OctaveCell cell = new OctaveCell();\n    cell.set(1, 1, new OctaveScalar(2));\n    final OctaveScalar scalar = (OctaveScalar) cell.get(1, 1);\n    scalar.set(10.0);\n    assertEquals(scalar.getDouble(), 10.0);\n    assertEquals(((OctaveScalar) cell.get(1, 1)).getDouble(), 2.0);\n}", "path": "java\\javaoctave\\test\\dk\\ange\\octave\\type\\TestOctaveCell.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n */\n", "func_signal": "public void testOctaveConnection()", "code": "{\n    final OctaveStruct struct = new OctaveStruct();\n    struct.set(\"scalar\", new OctaveScalar(42));\n    final OctaveStruct nested_struct = new OctaveStruct();\n    nested_struct.set(\"string\", new OctaveString(\"a cheese called Horace\"));\n    struct.set(\"mynestedstruct\", nested_struct);\n\n    final OctaveEngine octave = new OctaveEngineFactory().getScriptEngine();\n    octave.put(\"mystruct\", struct);\n    final OctaveStruct mystruct_copy = octave.get(\"mystruct\");\n    Assert.assertEquals(struct, mystruct_copy);\n}", "path": "java\\javaoctave\\test\\dk\\ange\\octave\\io\\impl\\TestOctaveStruct.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n * matrixzero doesn't work because of bug in octave\n */\n", "func_signal": "public void testGrowth()", "code": "{\n    final OctaveNdMatrix matrix = new OctaveNdMatrix(3, 3, 3, 3);\n    matrix.set(42.0, 2, 2, 2, 2);\n    matrix.set(1.0, 3, 2, 2, 2);\n    matrix.set(2.0, 2, 3, 2, 2);\n    matrix.set(3.0, 2, 2, 3, 2);\n    matrix.set(4.0, 2, 2, 2, 3);\n    assertEquals(42.0, matrix.get(2, 2, 2, 2));\n    assertEquals(1.0, matrix.get(3, 2, 2, 2));\n    assertEquals(2.0, matrix.get(2, 3, 2, 2));\n    assertEquals(3.0, matrix.get(2, 2, 3, 2));\n    assertEquals(4.0, matrix.get(2, 2, 2, 3));\n\n    matrix.set(Math.PI, 4, 5, 7, 6);\n    assertEquals(42.0, matrix.get(2, 2, 2, 2));\n    assertEquals(1.0, matrix.get(3, 2, 2, 2));\n    assertEquals(2.0, matrix.get(2, 3, 2, 2));\n    assertEquals(3.0, matrix.get(2, 2, 3, 2));\n    assertEquals(4.0, matrix.get(2, 2, 2, 3));\n    assertEquals(Math.PI, matrix.get(4, 5, 7, 6));\n}", "path": "java\\javaoctave\\test\\dk\\ange\\octave\\type\\TestOctaveNdMatrix.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n * @param row\n * @param column\n * @return (shallow copyof ) value for row and column. Empty cells are 0x0 matrixes.\n */\n", "func_signal": "public OctaveType get(final int row, final int column)", "code": "{\n    if (row < 1 || row > rows) {\n        throw new IndexOutOfBoundsException(\"row was \" + row + \" and must be between 1 and \" + rows);\n    }\n    if (column < 1 || column > columns) {\n        throw new IndexOutOfBoundsException(\"column was \" + column + \" and must be between 1 and \" + columns);\n    }\n    return OctaveType.copy(data.get(row - 1).get(column - 1));\n}", "path": "java\\javaoctave\\src\\dk\\ange\\octave\\type\\OctaveCell.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n * This reader will read from octaveReader until a single line equal() spacer is read, after that this reader will\n * return eof. When this reader is closed it will update the state of octave to NONE.\n * \n * @param octaveReader\n * @param spacer\n */\n", "func_signal": "public OctaveExecuteReader(final BufferedReader octaveReader, final String spacer)", "code": "{\n    this.octaveReader = octaveReader;\n    this.spacer = spacer;\n}", "path": "java\\javaoctave\\src\\dk\\ange\\octave\\exec\\OctaveExecuteReader.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/** Test */\n", "func_signal": "public void testSetAndGetOctave()", "code": "{\n    final OctaveEngine octave = new OctaveEngineFactory().getScriptEngine();\n    final TreeMap<String, OctaveType> vars = new TreeMap<String, OctaveType>();\n    final double[] bigdata = new double[2 * 3 * 4];\n    for (int idx = 0; idx < bigdata.length; idx++) {\n        bigdata[idx] = idx + 1.0;\n    }\n    final double[] data2d = { 1.0, 2.0, 3.0, 5.0, 8.0, 13.0 };\n    final double[] datascalar = { 42.0 };\n    vars.put(\"bigmatrix\", new OctaveNdMatrix(bigdata, 1, 2, 3, 4));\n    vars.put(\"matrix2d\", new OctaveNdMatrix(data2d, 2, 3));\n    vars.put(\"matrixscalar\", new OctaveNdMatrix(datascalar, 1, 1));\n    vars.put(\"matrixzero\", new OctaveNdMatrix(0, 0, 0, 0));\n    vars.put(\"matrixzero2d\", new OctaveNdMatrix(0, 0));\n    octave.putAll(vars);\n    final OctaveNdMatrix matrixzero = octave.get(\"matrixzero\");\n    final OctaveNdMatrix matrix2d = octave.get(\"matrix2d\");\n    final OctaveNdMatrix bigmatrix = octave.get(\"bigmatrix\");\n    final OctaveNdMatrix matrixzero2d = octave.get(\"matrixzero2d\");\n    final OctaveNdMatrix matrixscalar = octave.get(\"matrixscalar\");\n    assertEquals(matrixzero, vars.get(\"matrixzero\"));\n    assertEquals(matrixzero2d, vars.get(\"matrixzero2d\"));\n    assertEquals(matrixscalar, vars.get(\"matrixscalar\"));\n    assertEquals(matrix2d, vars.get(\"matrix2d\"));\n    assertEquals(bigmatrix, vars.get(\"bigmatrix\"));\n    octave.close();\n\n    assertEquals(\"\" + //\n            \"# name: matrixzero2d\\n\" + //\n            \"# type: matrix\\n\" + //\n            \"# rows: 0\\n\" + //\n            \"# columns: 0\\n\\n\" //\n    , OctaveIO.toText(matrixzero2d, \"matrixzero2d\"));\n\n    assertEquals(\"\" + //\n            \"# name: matrixzero\\n\" + //\n            \"# type: matrix\\n\" + //\n            \"# ndims: 4\\n\" + //\n            \" 0 0 0 0\\n\\n\" // \n    , OctaveIO.toText(matrixzero, \"matrixzero\"));\n\n    assertEquals(\"\" + //\n            \"# name: matrixscalar\\n\" + //\n            \"# type: matrix\\n\" + //\n            \"# rows: 1\\n\" + //\n            \"# columns: 1\\n\" + //\n            \" 42.0\\n\\n\" //\n    , OctaveIO.toText(matrixscalar, \"matrixscalar\"));\n\n    assertEquals(\"\" + //\n            \"# name: matrix2d\\n\" + //\n            \"# type: matrix\\n\" + //\n            \"# rows: 2\\n\" + //\n            \"# columns: 3\\n\" + //\n            \" 1.0 3.0 8.0\\n\" + //\n            \" 2.0 5.0 13.0\\n\\n\" //\n    , OctaveIO.toText(matrix2d, \"matrix2d\"));\n\n    assertEquals(\"\" + //\n            \"# name: bigmatrix\\n\" + //\n            \"# type: matrix\\n\" + //\n            \"# ndims: 4\\n\" + //\n            \" 1 2 3 4\\n\" + //\n            \" 1.0\\n\" + //\n            \" 2.0\\n\" + //\n            \" 3.0\\n\" + //\n            \" 4.0\\n\" + //\n            \" 5.0\\n\" + //\n            \" 6.0\\n\" + //\n            \" 7.0\\n\" + //\n            \" 8.0\\n\" + //\n            \" 9.0\\n\" + //\n            \" 10.0\\n\" + //\n            \" 11.0\\n\" + //\n            \" 12.0\\n\" + //\n            \" 13.0\\n\" + //\n            \" 14.0\\n\" + //\n            \" 15.0\\n\" + //\n            \" 16.0\\n\" + //\n            \" 17.0\\n\" + //\n            \" 18.0\\n\" + //\n            \" 19.0\\n\" + //\n            \" 20.0\\n\" + //\n            \" 21.0\\n\" + //\n            \" 22.0\\n\" + //\n            \" 23.0\\n\" + //\n            \" 24.0\\n\\n\" //\n    , OctaveIO.toText(bigmatrix, \"bigmatrix\"));\n}", "path": "java\\javaoctave\\test\\dk\\ange\\octave\\io\\impl\\TestOctaveNdMatrix.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n */\n", "func_signal": "public void testDataSizeConstructor()", "code": "{\n    final double[] data = new double[2 * 3 * 4];\n    for (int idx = 0; idx < data.length; idx++) {\n        data[idx] = idx + 1.0;\n    }\n    final OctaveNdMatrix matrix = new OctaveNdMatrix(data, 2, 3, 4);\n    double d = 1.0;\n    for (int depth = 1; depth <= 4; depth++) {\n        for (int column = 1; column <= 3; column++) {\n            for (int row = 1; row <= 2; row++) {\n                assertEquals(d, matrix.get(row, column, depth));\n                d++;\n            }\n        }\n    }\n\n    // a larger data array is ok\n    new OctaveNdMatrix(data, 2, 2, 4);\n\n    try {\n        new OctaveNdMatrix(data, 2, 4, 4);\n        fail(\"should throw IllegalArgumentException\");\n    } catch (final IllegalArgumentException e) {\n        assertEquals(\"length of data(24) is smaller than size([2, 4, 4])\", e.getMessage());\n    }\n}", "path": "java\\javaoctave\\test\\dk\\ange\\octave\\type\\TestOctaveNdMatrix.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n */\n", "func_signal": "public void testSet()", "code": "{\n    final OctaveStruct struct1 = new OctaveStruct();\n    struct1.set(\"a\", new OctaveScalar(42));\n    Assert.assertEquals(\"\" + //\n            \"# name: mystruct\\n\" + //\n            \"# type: struct\\n\" + //\n            \"# length: 1\\n\" + //\n            \"# name: a\\n\" + //\n            \"# type: cell\\n\" + //\n            \"# rows: 1\\n\" + //\n            \"# columns: 1\\n\" + //\n            \"# name: <cell-element>\\n\" + //\n            \"# type: scalar\\n\" + //\n            \"42.0\\n\\n\" // \n    , OctaveIO.toText(struct1, \"mystruct\"));\n    final OctaveStruct struct2 = new OctaveStruct();\n    final OctaveCell octaveCell = new OctaveCell();\n    octaveCell.set(1, 1, new OctaveScalar(42));\n    struct2.set(\"mycell\", octaveCell);\n    Assert.assertEquals(\"\" + //\n            \"# name: mystruct\\n\" + //\n            \"# type: struct\\n\" + //\n            \"# length: 1\\n\" + //\n            \"# name: mycell\\n\" + //\n            \"# type: cell\\n\" + //\n            \"# rows: 1\\n\" + //\n            \"# columns: 1\\n\" + //\n            \"# name: <cell-element>\\n\" + //\n            \"# type: cell\\n\" + //\n            \"# rows: 1\\n\" + //\n            \"# columns: 1\\n\" + //\n            \"# name: <cell-element>\\n\" + //\n            \"# type: scalar\\n\" + //\n            \"42.0\\n\\n\\n\" // \n    , OctaveIO.toText(struct2, \"mystruct\"));\n}", "path": "java\\javaoctave\\test\\dk\\ange\\octave\\io\\impl\\TestOctaveStruct.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n * Test\n */\n", "func_signal": "public void testValues()", "code": "{\n    final OctaveString s1a = new OctaveString(\"1\");\n    final OctaveString s1b = new OctaveString(\"1\");\n    final OctaveString s1c = new OctaveString(\"0\");\n    s1c.setString(\"1\");\n\n    assertEquals(s1a, s1b);\n    assertEquals(s1a, s1c);\n    assertEquals(s1b, s1c);\n    assertNotSame(s1a, s1b);\n    assertNotSame(s1a, s1c);\n    assertNotSame(s1b, s1c);\n\n    final OctaveString s0 = new OctaveString(\"0\");\n    final OctaveString s2 = new OctaveString(\"2\");\n\n    assertFalse(s1a.equals(s0));\n    assertFalse(s1a.equals(s2));\n}", "path": "java\\javaoctave\\test\\dk\\ange\\octave\\type\\TestOctaveString.java", "repo_name": "kimhanse/JavaOctave", "stars": 6, "license": "None", "language": "java", "size": 1456}
{"docstring": "/**\n * Simple test to ensure that nothing has changed.  Of course\n * if the output should have changed, then this will have to be altered\n * to match.\n */\n", "func_signal": "@Test\npublic void testSize() throws FileNotFoundException", "code": "{\n\tMain.main(new String[]{\n\t\t\tArgs.TEST_STYLE_ARG,\n\t\t\t\"--route\",\n\t\t\tArgs.TEST_RESOURCE_OSM + \"uk-test-1.osm.gz\",\n\t\t\tArgs.TEST_RESOURCE_MP + \"test1.mp\"\n\t});\n\n\tFileSystem fs = ImgFS.openFs(Args.DEF_MAP_ID + \".img\");\n\tassertNotNull(\"file exists\", fs);\n\n\tList<DirectoryEntry> entries = fs.list();\n\tint count = 0;\n\tfor (DirectoryEntry ent : entries) {\n\t\tString ext = ent.getExt();\n\n\t\tint size = ent.getSize();\n\t\tif (ext.equals(\"RGN\")) {\n\t\t\tcount++;\n\t\t\tassertThat(\"RGN size\", size, new RangeMatcher(141999));\n\t\t} else if (ext.equals(\"TRE\")) {\n\t\t\tcount++;\n\t\t\tassertEquals(\"TRE size\", 1329, size);\n\t\t} else if (ext.equals(\"LBL\")) {\n\t\t\tcount++;\n\t\t\tassertEquals(\"LBL size\", 27693, size);\n\t\t} else if (ext.equals(\"NET\")) {\n\t\t\tcount++;\n\t\t\tassertEquals(\"NET size\", 73850, size);\n\t\t} else if (ext.equals(\"NOD\")) {\n\t\t\tcount++;\n\t\t\tassertEquals(\"NOD size\", 195187, size);\n\t\t}\n\t}\n\tassertTrue(\"enough checks run\", count == 5);\n\n\tfs = ImgFS.openFs(Args.DEF_MAP_FILENAME2);\n\tassertNotNull(\"file exists\", fs);\n\n\tentries = fs.list();\n\tcount = 0;\n\tfor (DirectoryEntry ent : entries) {\n\t\tString ext = ent.getExt();\n\n\t\tint size = ent.getSize();\n\t\tif (ext.equals(\"RGN\")) {\n\t\t\tcount++;\n\t\t\tassertThat(\"RGN size\", size, new RangeMatcher(2934));\n\t\t} else if (ext.equals(\"TRE\")) {\n\t\t\tcount++;\n\t\t\tassertEquals(\"TRE size\", 579, size);\n\t\t} else if (ext.equals(\"LBL\")) {\n\t\t\tcount++;\n\t\t\tassertEquals(\"LBL size\", 984, size);\n\t\t} else if (ext.equals(\"NET\")) {\n\t\t\tcount++;\n\t\t\tassertEquals(\"NET size\", 1280, size);\n\t\t} else if (ext.equals(\"NOD\")) {\n\t\t\tcount++;\n\t\t\tassertEquals(\"NOD size\", 3114, size);\n\t\t}\n\t}\n\tassertTrue(\"enough checks run\", count == 5);\n}", "path": "test\\func\\route\\SimpleRouteTest.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * Write the rest of the header.  It is guaranteed that the writer will be set\n * to the correct position before calling.\n *\n * @param writer The header is written here.\n */\n", "func_signal": "protected void writeFileHeader(ImgFileWriter writer)", "code": "{\n\troadDefinitions.writeSectionInfo(writer);\n\n\twriter.put(roadShift); // offset multiplier\n\n\tsegmentedRoads.writeSectionInfo(writer);\n\n\twriter.put(segmentShift); // offset multiplier\n\n\tsortedRoads.writeSectionInfo(writer);\n\n\twriter.putInt(0);\n\twriter.put((byte) 1);\n\twriter.put((byte) 0);\n}", "path": "src\\uk\\me\\parabola\\imgfmt\\app\\net\\NETHeader.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * Very simple test that the bit reader is working.\n */\n", "func_signal": "@Test\npublic void testGetBits()", "code": "{\n\t// Add your code here\n\tBitReader br = new BitReader(new byte[]{\n\t\t\t(byte) 0xf1, 0x73, (byte) 0xc2, 0x5\n\t});\n\n\tassertTrue(\"first bit\", br.get1());\n\tassertEquals(\"five bits\", 0x18, br.get(5));\n\tassertEquals(\"four bits\", 0xf, br.get(4));\n\tassertEquals(\"sixteen bits\", 0x709c, br.get(16));\n}", "path": "test\\uk\\me\\parabola\\imgfmt\\app\\BitReaderTest.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * This value is made from the third value, combined with the raw\n * map id values.\n */\n", "func_signal": "private void calcFirst()", "code": "{\n\tbyte[] out = values[0];\n\tbyte[] v3 = values[3];\n\n\t// First bytes are the low bytes of the mapId, with the corresponding\n\t// value from value[3] added.\n\tout[0] = (byte) (mapIdDigit(4) + v3[0]);\n\tout[1] = (byte) (mapIdDigit(5) + v3[1]);\n\tout[2] = (byte) (mapIdDigit(6) + v3[2]);\n\tout[3] = (byte) (mapIdDigit(7) + v3[3]);\n\n\t// Copies of v3\n\tout[4] = v3[4];\n\tout[5] = v3[5];\n\tout[6] = v3[6];\n\n\t// Always (?) one more.  The one likely comes from some other\n\t// part of the header, but we don't know if or where.\n\tout[7] = (byte) (v3[7] + 1);\n}", "path": "src\\uk\\me\\parabola\\imgfmt\\app\\trergn\\MapValues.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * We draw points, lines and polygons separately.  They should be in\n * order from west to east of the generated map, starting in the bottom\n * left hand corner (SW).\n *\n * @param map Collector for the generated points etc.\n * @param startLat The S coord.\n * @param startLong The W coord.\n */\n", "func_signal": "private void drawTestMap(MapCollector map, double startLat, double startLong)", "code": "{\n\tdouble lng = startLong;\n\n\tdrawPoints(map, startLat, lng);\n\n\tlng += MAX_POINT_TYPE * ELEMENT_SPACING;\n\tdrawLines(map, startLat, lng);\n\n\tlng += MAX_LINE_TYPE_X * ELEMENT_SPACING;\n\tdrawPolygons(map, startLat, lng);\n}", "path": "src\\uk\\me\\parabola\\mkgmap\\reader\\test\\AllElements.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * search for the first matching name pattern and set the element name\n * to it.\n *\n * If the element name is already set, then nothing is done.\n *\n * @param el The element on which the name may be set.\n */\n", "func_signal": "public void perform(Element el)", "code": "{\n\tif (el.getName() != null)\n\t\treturn;\n\t\n\tfor (ValueBuilder vb : names) {\n\t\tString s = vb.build(el, el);\n\t\tif (s != null) {\n\t\t\tel.setName(s);\n\t\t\tbreak;\n\t\t}\n\t}\n}", "path": "src\\uk\\me\\parabola\\mkgmap\\osmstyle\\actions\\NameAction.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * Set minLevel and maxLevel based on the resolution values set and\n * the given levels info.  We do this because we used to work only\n * on resolution, but we want to move more towards working with\n * levels.\n */\n", "func_signal": "public void fixLevels(LevelInfo[] levels)", "code": "{\n\tfor (LevelInfo info : levels) {\n\t\tif (info.getBits() <= minResolution)\n\t\t\tmaxLevel = info.getLevel();\n\t\tif (info.getBits() <= maxResolution)\n\t\t\tminLevel = info.getLevel();\n\t}\n}", "path": "src\\uk\\me\\parabola\\mkgmap\\reader\\osm\\GType.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * The offset of this label in the LBL file.  The first byte of this file\n * is zero and an offset of zero means that the label has a zero length/is\n * empty.\n *\n * @return The offset within the LBL file of this string.\n */\n", "func_signal": "public int getOffset()", "code": "{\n\tif (text == null || text.isEmpty())\n\t\treturn 0;\n\telse\n\t\treturn offset;\n}", "path": "src\\uk\\me\\parabola\\imgfmt\\app\\Label.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * This is made from various parts of the third value and the raw digits\n * from the map id.  There are two digits where the header length digits\n * are used (or that could be a coincidence, but it holds up well so far).\n */\n", "func_signal": "private void calcSecond()", "code": "{\n\tbyte[] out = values[1];\n\tbyte[] v3 = values[3];\n\n\t// Just same as in v3\n\tout[0] = v3[0];\n\tout[1] = v3[1];\n\n\tint h1 = length >> 4;\n\tint h2 = length;\n\tout[2] = (byte) ((v3[2] + h1) & 0xf);\n\tout[3] = (byte) ((v3[3] + h2) & 0xf);\n\n\t// The following are the sum of individual nibbles in U3 and the\n\t// corresponding nibble in the top half of mapId.\n\tout[4] = (byte) (v3[4] + mapIdDigit(0));\n\tout[5] = (byte) (v3[5] + mapIdDigit(1));\n\tout[6] = (byte) (v3[6] + mapIdDigit(2));\n\tout[7] = (byte) (v3[7] + mapIdDigit(3));\n}", "path": "src\\uk\\me\\parabola\\imgfmt\\app\\trergn\\MapValues.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * There are four values.  Get value n.\n * @param n Get value n, starting at 0 up to four.\n */\n", "func_signal": "public int value(int n)", "code": "{\n\tbyte[] out = values[n];\n\n\tint res = 0;\n\tfor (int i = 0; i < 8; i++) {\n\t\tres |= ((out[i] & 0xf) << (4 * (7 - i)));\n\t}\n\treturn res;\n}", "path": "src\\uk\\me\\parabola\\imgfmt\\app\\trergn\\MapValues.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * Loading the map in this case means generating it.\n *\n * @param mapper Used to collect the generated points etc.\n */\n", "func_signal": "public void load(MapCollector mapper)", "code": "{\n\tdouble baseLat = 51.7;\n\n\tString sBaseLat = System.getenv(\"BASE_LAT\");\n\tString sBaseLong = System.getenv(\"BASE_LONG\");\n\n\tif (sBaseLat != null)\n\t\tbaseLat = Double.valueOf(sBaseLat);\n\n\tdouble baseLong = 0.24;\n\tif (sBaseLong != null)\n\t\tbaseLong = Double.valueOf(sBaseLong);\n\n\tdrawTestMap(mapper, baseLat, baseLong);\n}", "path": "src\\uk\\me\\parabola\\mkgmap\\reader\\test\\AllElements.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n* Returns the list of values associated with the given key.\n*\n* @param o the key to get the values for.\n* @return a list of values for the given keys or the empty list of no such\n*         value exist.\n*/\n", "func_signal": "public List<V> get(K key)", "code": "{\n\tList<V> result = super.get(key);\n\treturn result == null ? emptyList : result;\n}", "path": "src\\uk\\me\\parabola\\util\\MultiHashMap.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * Called after all cities to sort and number them.\n */\n", "func_signal": "public void finishCities()", "code": "{\n\tlocalCitySize = numberToPointerSize(maxCityIndex + 1);\n\t\n\tCollections.sort(cities);\n\n\tint count = 1;\n\tfor (Mdr5Record c : cities)\n\t\tc.setGlobalCityIndex(count++);\n}", "path": "src\\uk\\me\\parabola\\imgfmt\\app\\mdr\\Mdr5.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * Note: this class has a natural ordering that is inconsistent with equals.\n * (But perhaps it shouldn't?)\n */\n", "func_signal": "public int compareTo(Label other)", "code": "{\n\tif(this == other)\n\t\treturn 0;\n\treturn text.compareToIgnoreCase(other.text);\n}", "path": "src\\uk\\me\\parabola\\imgfmt\\app\\Label.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * This is made of the hex digits of the map id in a given order\n * translated according to a given table of values.\n */\n", "func_signal": "private void calcThird()", "code": "{\n\tbyte[] out = values[2];\n\tfor (int i = 0; i < 8; i++) {\n\t\tint n = mapIdDigit(i);\n\t\tout[(i ^ 1)] = mapIdCodeTable[n];\n\t}\n}", "path": "src\\uk\\me\\parabola\\imgfmt\\app\\trergn\\MapValues.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * Add an offset to all previously calculated values.\n */\n", "func_signal": "private void addOffset()", "code": "{\n\t// To get the offset value we add up all the even nibbles of the map\n\t// number and transform via a table.\n\tint n = mapIdDigit(1) + mapIdDigit(3) + mapIdDigit(5) + mapIdDigit(7);\n\n\tint offset = offsetMap[n & 0xf];\n\tfor (int i = 0; i < 4; i++) {\n\t\tfor (int j = 0; j < 8; j++) {\n\t\t\tvalues[i][j] += offset;\n\t\t}\n\t}\n}", "path": "src\\uk\\me\\parabola\\imgfmt\\app\\trergn\\MapValues.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * Read the rest of the header.  Specific to the given file.  It is guaranteed\n * that the file position will be set to the correct place before this is\n * called.\n *\n * @param reader The header is read from here.\n */\n", "func_signal": "protected void readFileHeader(ImgFileReader reader) throws ReadFailedException", "code": "{\n\troadDefinitions.readSectionInfo(reader, false);\n\troadShift = reader.get();\n\n\tsegmentedRoads.readSectionInfo(reader, false);\n\tsegmentShift = reader.get();\n\n\tsortedRoads.readSectionInfo(reader, true);\n\n\treader.getInt();\n\treader.get();\n\treader.get();\n}", "path": "src\\uk\\me\\parabola\\imgfmt\\app\\net\\NETHeader.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * Write this label to the given img file.\n *\n * @param writer The LBL file to write to.\n * @param textEncoder The encoder to use for this text.  Converts the\n * unicode string representation to the correct byte stream for the file.\n * This depends on encoding format, character set etc.\n */\n", "func_signal": "public void write(ImgFileWriter writer, CharacterEncoder textEncoder)", "code": "{\n\tEncodedText encText = textEncoder.encodeText(text);\n\tassert encText != null;\n\n\tif (encText.getLength() > 0)\n\t\twriter.put(encText.getCtext(), 0, encText.getLength());\n}", "path": "src\\uk\\me\\parabola\\imgfmt\\app\\Label.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * Put the map city index.  This is the index within the individual map\n * and not the global city index used in mdr11.\n */\n", "func_signal": "private void putLocalCityIndex(ImgFileWriter writer, int cityIndex)", "code": "{\n\tif (localCitySize == 2) // 3 probably not possible in actual maps.\n\t\twriter.putChar((char) cityIndex);\n\telse\n\t\twriter.put((byte) cityIndex);\n}", "path": "src\\uk\\me\\parabola\\imgfmt\\app\\mdr\\Mdr5.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * Base size of 8, plus enough bytes to represent the map number\n * and the city number.\n * @return The size of a record in this section.\n */\n", "func_signal": "public int getItemSize()", "code": "{\n\tPointerSizes sizes = getSizes();\n\treturn sizes.getMapSize() + localCitySize + 5 + sizes.getStrOffSize();\n}", "path": "src\\uk\\me\\parabola\\imgfmt\\app\\mdr\\Mdr5.java", "repo_name": "burto/mkgmap", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 4120}
{"docstring": "/**\n * Returns the attribute value by namespace and attribute name.\n */\n", "func_signal": "public String getAttributeValue(NamespaceDefinition namespace, String attributeName)", "code": "{\n\tif (getNamespaceDefinition().equals(namespace)) {\n\t\treturn getAttributeValue(attributeName);\n\t} else {\n\t\treturn getAttributeValue(namespace, namespace.getForeignAttribute(attributeName));\n\t}\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\tinydom\\Tag.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "/**\n * Checks if an adapter to clazz is available in this context. Returns this\n * adapter or null if none available.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static <A> A adaptTo(Class<A> clazz)", "code": "{\n\tContext ctx = context.get();\n\tif (ctx == null) {\n\t\treturn null;\n\t}\n\tfor (IAdaptable adapter : ctx.adapters) {\n\t\tObject obj = adapter.getAdapter(clazz);\n\t\tif (obj != null) {\n\t\t\treturn (A) obj;\n\t\t}\n\t}\n\treturn null;\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\util\\context\\Context.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "/**\n * Checks whether the extension of the filename is one of those specified.\n * <p>\n * This method obtains the extension as the textual part of the filename\n * after the last dot. There must be no directory separator after the dot.\n * The extension check is case-sensitive on all platforms.\n * \n * @param filename\n *            the filename to query, null returns false\n * @param extensions\n *            the extensions to check for, null checks for no extension\n * @return true if the filename is one of the extensions\n */\n", "func_signal": "public static boolean isExtension(String filename, Collection extensions)", "code": "{\n\tif (filename == null) {\n\t\treturn false;\n\t}\n\tif (extensions == null || extensions.isEmpty()) {\n\t\treturn (indexOfExtension(filename) == -1);\n\t}\n\tString fileExt = getExtension(filename);\n\tfor (Iterator it = extensions.iterator(); it.hasNext();) {\n\t\tif (fileExt.equals(it.next())) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\util\\lang\\FilenameUtils.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "/**\n * Same as Class.getFields() but with private fields included. Returns all\n * fields of <type> and its superclasses.\n */\n", "func_signal": "private Collection<Field> getAllFields(Class<?> type)", "code": "{\n\tList<Field> fields = new ArrayList<Field>();\n\twhile (type != null) {\n\t\tfor (Field field : type.getDeclaredFields()) {\n\t\t\tif (!field.isSynthetic()) {\n\t\t\t\tfields.add(field);\n\t\t\t}\n\t\t}\n\t\ttype = type.getSuperclass();\n\t}\n\treturn fields;\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\util\\reflector\\FieldQuery.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "/**\n * Returns the attribute value by name for attributes having the same\n * namespace as the tag.\n */\n", "func_signal": "public String getAttributeValue(String attributeName)", "code": "{\n\treturn getAttributeValue(getNamespaceDefinition(), getTagDefinition().getAttribute(\n\t\t\tattributeName));\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\tinydom\\Tag.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "/**\n * Returns the index of the last directory separator character.\n * <p>\n * This method will handle a file in either Unix or Windows format. The\n * position of the last forward or backslash is returned.\n * <p>\n * The output will be the same irrespective of the machine that the code is\n * running on.\n * \n * @param filename\n *            the filename to find the last path separator in, null returns\n *            -1\n * @return the index of the last separator character, or -1 if there is no\n *         such character\n */\n", "func_signal": "public static int indexOfLastSeparator(String filename)", "code": "{\n\tif (filename == null) {\n\t\treturn -1;\n\t}\n\tint lastUnixPos = filename.lastIndexOf(UNIX_SEPARATOR);\n\tint lastWindowsPos = filename.lastIndexOf(WINDOWS_SEPARATOR);\n\treturn Math.max(lastUnixPos, lastWindowsPos);\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\util\\lang\\FilenameUtils.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "/**\n * Calls the given visitors for this node and its children elements. All\n * children elements are visited before going up again (Depth first).\n */\n", "func_signal": "public void visitDepthFirst(ITagVisitor... visitors)", "code": "{\n\tfor (ITagVisitor visitor : visitors) {\n\t\ttry {\n\t\t\tvisitor.visit(this);\n\t\t} catch (Exception e) {\n\t\t\tthrow new ParseException(this.getLocationInfo() + e.getMessage(), e);\n\t\t}\n\t}\n\tfor (Tag child : getChildren()) {\n\t\tchild.visitDepthFirst(visitors);\n\t}\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\tinydom\\Tag.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "/**\n * Gets the name minus the path from a full filename.\n * <p>\n * This method will handle a file in either Unix or Windows format. The text\n * after the last forward or backslash is returned.\n * \n * <pre>\n * a/b/c.txt --&gt; c.txt\n * a.txt     --&gt; a.txt\n * a/b/c     --&gt; c\n * a/b/c/    --&gt; &quot;&quot;\n * </pre>\n * <p>\n * The output will be the same irrespective of the machine that the code is\n * running on.\n * \n * @param filename\n *            the filename to query, null returns null\n * @return the name of the file without the path, or an empty string if none\n *         exists\n */\n", "func_signal": "public static String getName(String filename)", "code": "{\n\tif (filename == null) {\n\t\treturn null;\n\t}\n\tint index = indexOfLastSeparator(filename);\n\treturn filename.substring(index + 1);\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\util\\lang\\FilenameUtils.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "// -----------------------------------------------------------------------\n/**\n * Checks whether the extension of the filename is that specified.\n * <p>\n * This method obtains the extension as the textual part of the filename\n * after the last dot. There must be no directory separator after the dot.\n * The extension check is case-sensitive on all platforms.\n * \n * @param filename\n *            the filename to query, null returns false\n * @param extension\n *            the extension to check for, null or empty checks for no\n *            extension\n * @return true if the filename has the specified extension\n */\n", "func_signal": "public static boolean isExtension(String filename, String extension)", "code": "{\n\tif (filename == null) {\n\t\treturn false;\n\t}\n\tif (extension == null || extension.length() == 0) {\n\t\treturn (indexOfExtension(filename) == -1);\n\t}\n\tString fileExt = getExtension(filename);\n\treturn fileExt.equals(extension);\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\util\\lang\\FilenameUtils.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "// -----------------------------------------------------------------------\n/**\n * Returns the length of the filename prefix, such as <code>C:/</code> or\n * <code>~/</code>.\n * <p>\n * This method will handle a file in either Unix or Windows format.\n * <p>\n * The prefix length includes the first slash in the full filename if\n * applicable. Thus, it is possible that the length returned is greater than\n * the length of the input string.\n * \n * <pre>\n * Windows:\n * a\\b\\c.txt           --&gt; &quot;&quot;          --&gt; relative\n * \\a\\b\\c.txt          --&gt; &quot;\\&quot;         --&gt; current drive absolute\n * C:a\\b\\c.txt         --&gt; &quot;C:&quot;        --&gt; drive relative\n * C:\\a\\b\\c.txt        --&gt; &quot;C:\\&quot;       --&gt; absolute\n * \\\\server\\a\\b\\c.txt  --&gt; &quot;\\\\server\\&quot; --&gt; UNC\n * \n * Unix:\n * a/b/c.txt           --&gt; &quot;&quot;          --&gt; relative\n * /a/b/c.txt          --&gt; &quot;/&quot;         --&gt; absolute\n * &tilde;/a/b/c.txt         --&gt; &quot;&tilde;/&quot;        --&gt; current user\n * &tilde;                   --&gt; &quot;&tilde;/&quot;        --&gt; current user (slash added)\n * &tilde;user/a/b/c.txt     --&gt; &quot;&tilde;user/&quot;    --&gt; named user\n * &tilde;user               --&gt; &quot;&tilde;user/&quot;    --&gt; named user (slash added)\n * </pre>\n * <p>\n * The output will be the same irrespective of the machine that the code is\n * running on. ie. both Unix and Windows prefixes are matched regardless.\n * \n * @param filename\n *            the filename to find the prefix in, null returns -1\n * @return the length of the prefix, -1 if invalid or null\n */\n", "func_signal": "public static int getPrefixLength(String filename)", "code": "{\n\tif (filename == null) {\n\t\treturn -1;\n\t}\n\tint len = filename.length();\n\tif (len == 0) {\n\t\treturn 0;\n\t}\n\tchar ch0 = filename.charAt(0);\n\tif (ch0 == ':') {\n\t\treturn -1;\n\t}\n\tif (len == 1) {\n\t\tif (ch0 == '~') {\n\t\t\treturn 2; // return a length greater than the input\n\t\t}\n\t\treturn (isSeparator(ch0) ? 1 : 0);\n\t} else {\n\t\tif (ch0 == '~') {\n\t\t\tint posUnix = filename.indexOf(UNIX_SEPARATOR, 1);\n\t\t\tint posWin = filename.indexOf(WINDOWS_SEPARATOR, 1);\n\t\t\tif (posUnix == -1 && posWin == -1) {\n\t\t\t\treturn len + 1; // return a length greater than the input\n\t\t\t}\n\t\t\tposUnix = (posUnix == -1 ? posWin : posUnix);\n\t\t\tposWin = (posWin == -1 ? posUnix : posWin);\n\t\t\treturn Math.min(posUnix, posWin) + 1;\n\t\t}\n\t\tchar ch1 = filename.charAt(1);\n\t\tif (ch1 == ':') {\n\t\t\tch0 = Character.toUpperCase(ch0);\n\t\t\tif (ch0 >= 'A' && ch0 <= 'Z') {\n\t\t\t\tif (len == 2 || isSeparator(filename.charAt(2)) == false) {\n\t\t\t\t\treturn 2;\n\t\t\t\t}\n\t\t\t\treturn 3;\n\t\t\t}\n\t\t\treturn -1;\n\n\t\t} else if (isSeparator(ch0) && isSeparator(ch1)) {\n\t\t\tint posUnix = filename.indexOf(UNIX_SEPARATOR, 2);\n\t\t\tint posWin = filename.indexOf(WINDOWS_SEPARATOR, 2);\n\t\t\tif ((posUnix == -1 && posWin == -1) || posUnix == 2 || posWin == 2) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tposUnix = (posUnix == -1 ? posWin : posUnix);\n\t\t\tposWin = (posWin == -1 ? posUnix : posWin);\n\t\t\treturn Math.min(posUnix, posWin) + 1;\n\t\t} else {\n\t\t\treturn (isSeparator(ch0) ? 1 : 0);\n\t\t}\n\t}\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\util\\lang\\FilenameUtils.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "/**\n * Returns the attribute value by namespace and attribute definition.\n */\n", "func_signal": "public String getAttributeValue(INamespaceDefinition namespace, IAttributeDefinition attribute)", "code": "{\n\tMap<IAttributeDefinition, String> attributes = attributeMap.get(namespace);\n\treturn attributes != null ? attributes.get(attribute) : null;\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\tinydom\\Tag.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "/**\n * Converts all separators to the Windows separator of backslash.\n * \n * @param path\n *            the path to be changed, null ignored\n * @return the updated path\n */\n", "func_signal": "public static String separatorsToWindows(String path)", "code": "{\n\tif (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {\n\t\treturn path;\n\t}\n\treturn path.replace(UNIX_SEPARATOR, WINDOWS_SEPARATOR);\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\util\\lang\\FilenameUtils.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "/**\n * Runs the given runnable with an inner Context. You will see everything\n * which was in the outer (original) Context, but changes will be only\n * visible in the inner context.\n */\n", "func_signal": "public static void runWith(Runnable runnable)", "code": "{\n\tContext oldContext = Context.context.get();\n\tif (oldContext != null) {\n\t\tContext.context.set(new Context(oldContext));\n\t}\n\ttry {\n\t\trunnable.run();\n\t} finally {\n\t\tContext.context.set(oldContext);\n\t}\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\util\\context\\Context.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "/**\n * Returns the index of the last extension separator character, which is a\n * dot.\n * <p>\n * This method also checks that there is no directory separator after the\n * last dot. To do this it uses {@link #indexOfLastSeparator(String)} which\n * will handle a file in either Unix or Windows format.\n * <p>\n * The output will be the same irrespective of the machine that the code is\n * running on.\n * \n * @param filename\n *            the filename to find the last path separator in, null returns\n *            -1\n * @return the index of the last separator character, or -1 if there is no\n *         such character\n */\n", "func_signal": "public static int indexOfExtension(String filename)", "code": "{\n\tif (filename == null) {\n\t\treturn -1;\n\t}\n\tint extensionPos = filename.lastIndexOf(EXTENSION_SEPARATOR);\n\tint lastSeparator = indexOfLastSeparator(filename);\n\treturn (lastSeparator > extensionPos ? -1 : extensionPos);\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\util\\lang\\FilenameUtils.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "/**\n * Converts all separators to the system separator.\n * \n * @param path\n *            the path to be changed, null ignored\n * @return the updated path\n */\n", "func_signal": "public static String separatorsToSystem(String path)", "code": "{\n\tif (path == null) {\n\t\treturn null;\n\t}\n\tif (isSystemWindows()) {\n\t\treturn separatorsToWindows(path);\n\t} else {\n\t\treturn separatorsToUnix(path);\n\t}\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\util\\lang\\FilenameUtils.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "/**\n * Inspects 'object' for fields annotated with the {@link ById} annotation.\n * For all such fields it resolves the value by the field name using\n * 'idResolver' and injects these values in the fields.\n * \n * @throws ReflectorException\n *             if no value could be resolved for a field or on Java\n *             reflection errors.\n */\n", "func_signal": "public void inject(Object object, IIdResolver idResolver) throws ReflectorException", "code": "{\n\tAssert.isNotNull(object, \"object\");\n\tAssert.isNotNull(idResolver, \"idResolver\");\n\n\tCollection<Field> fields = Reflector.findFields(Visibility.PRIVATE, Subclasses.INCLUDE)\n\t\t\t.annotatedWith(ById.class).all(object.getClass());\n\n\tfor (Field field : fields) {\n\t\ttry {\n\t\t\tObject value = idResolver.getById(field.getName(), field.getType());\n\t\t\tif (value == null) {\n\t\t\t\tthrow new ReflectorException(\"No element with id \\\"\" + field.getName()\n\t\t\t\t\t\t+ \"\\\" found for injecting @ById \" + object.getClass() + \".\"\n\t\t\t\t\t\t+ field.getName());\n\t\t\t}\n\t\t\tboolean oldAccess = field.isAccessible();\n\t\t\tfield.setAccessible(true);\n\t\t\tfield.set(object, value);\n\t\t\tfield.setAccessible(oldAccess);\n\t\t} catch (Exception e) {\n\t\t\tthrow new ReflectorException(e);\n\t\t}\n\t}\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\swt\\byid\\ByIdInjector.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "// -----------------------------------------------------------------------\n/**\n * Converts all separators to the Unix separator of forward slash.\n * \n * @param path\n *            the path to be changed, null ignored\n * @return the updated path\n */\n", "func_signal": "public static String separatorsToUnix(String path)", "code": "{\n\tif (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {\n\t\treturn path;\n\t}\n\treturn path.replace(WINDOWS_SEPARATOR, UNIX_SEPARATOR);\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\util\\lang\\FilenameUtils.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "// -----------------------------------------------------------------------\n/**\n * Removes the extension from a filename.\n * <p>\n * This method returns the textual part of the filename before the last dot.\n * There must be no directory separator after the dot.\n * \n * <pre>\n * foo.txt    --&gt; foo\n * a\\b\\c.jpg  --&gt; a\\b\\c\n * a\\b\\c      --&gt; a\\b\\c\n * a.b\\c      --&gt; a.b\\c\n * </pre>\n * <p>\n * The output will be the same irrespective of the machine that the code is\n * running on.\n * \n * @param filename\n *            the filename to query, null returns null\n * @return the filename minus the extension\n */\n", "func_signal": "public static String removeExtension(String filename)", "code": "{\n\tif (filename == null) {\n\t\treturn null;\n\t}\n\tint index = indexOfExtension(filename);\n\tif (index == -1) {\n\t\treturn filename;\n\t} else {\n\t\treturn filename.substring(0, index);\n\t}\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\util\\lang\\FilenameUtils.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "/**\n * Returns a list of all definitions from the given namespace which\n * specified set for this tag.\n */\n", "func_signal": "public Collection<IAttributeDefinition> getAttributes(INamespaceDefinition namespace)", "code": "{\n\tMap<IAttributeDefinition, String> attributes = attributeMap.get(namespace);\n\tif (attributes != null) {\n\t\treturn attributes.keySet();\n\t} else {\n\t\treturn Collections.emptyList();\n\t}\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\tinydom\\Tag.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "/**\n * Does the work of getting the path.\n * \n * @param filename\n *            the filename\n * @param includeSeparator\n *            true to include the end separator\n * @return the path\n */\n", "func_signal": "private static String doGetFullPath(String filename, boolean includeSeparator)", "code": "{\n\tif (filename == null) {\n\t\treturn null;\n\t}\n\tint prefix = getPrefixLength(filename);\n\tif (prefix < 0) {\n\t\treturn null;\n\t}\n\tif (prefix >= filename.length()) {\n\t\tif (includeSeparator) {\n\t\t\treturn getPrefix(filename); // add end slash if necessary\n\t\t} else {\n\t\t\treturn filename;\n\t\t}\n\t}\n\tint index = indexOfLastSeparator(filename);\n\tif (index < 0) {\n\t\treturn filename.substring(0, prefix);\n\t}\n\tint end = index + (includeSeparator ? 1 : 0);\n\treturn filename.substring(0, end);\n}", "path": "plugins\\com.swtxml\\src\\com\\swtxml\\util\\lang\\FilenameUtils.java", "repo_name": "ralfebert/swtxml", "stars": 5, "license": "None", "language": "java", "size": 2300}
{"docstring": "/**\n * Convert ARGB pixels to a ByteBuffer containing RGBA pixels.  The GL_RGBA format is\n * a default format used in OpenGL 1.0, but requires that we move the Alpha byte for\n * each pixel in the image (slow).  Would be better to use OpenGL 1.2 GL_BGRA format\n * and leave pixels in the ARGB format (faster) but this pixel format caused problems\n * when creating mipmaps (see note above).\n * .<P>\n * If flipVertically is true, pixels will be flipped vertically (for OpenGL coord system).\n * @return ByteBuffer\n */\n", "func_signal": "public static ByteBuffer convertImagePixelsRGBA(int[] jpixels, int imgw, int imgh, boolean flipVertically)", "code": "{\n    byte[] bytes;     // will hold pixels as RGBA bytes\n    if (flipVertically) {\n        jpixels = flipPixels(jpixels, imgw, imgh); // flip Y axis\n    }\n    bytes = convertARGBtoRGBA(jpixels);\n    return allocBytes(bytes);  // convert to ByteBuffer and return\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Scale this GLImage so width and height are powers of 2.  Recreate pixels and pixelBuffer.\n */\n", "func_signal": "public void convertToPowerOf2()", "code": "{\n  // make BufferedImage from original pixels\n  BufferedImage image = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\n  image.setRGB(0, 0, w, h, pixels, 0, w);\n\n  // scale into new image\n  BufferedImage scaledImg = convertToPowerOf2(image);\n\n  // resample pixel data\n  w = scaledImg.getWidth(null);\n    h = scaledImg.getHeight(null);\n    pixels = getImagePixels(scaledImg);  // pixels in default Java ARGB format\n    pixelBuffer = convertImagePixelsRGBA(pixels,w,h,false);  // convert to bytes in RGBA format\n    textureW = getPowerOfTwoBiggerThan(w); // the texture size big enough to hold this image\n    textureH = getPowerOfTwoBiggerThan(h); // the texture size big enough to hold this image\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Same function as in GLApp.java.  Allocates a ByteBuffer to hold the given\n * array of bytes.\n *\n * @param bytearray\n * @return  ByteBuffer containing the contents of the byte array\n */\n", "func_signal": "public static ByteBuffer allocBytes(byte[] bytearray)", "code": "{\n    ByteBuffer bb = ByteBuffer.allocateDirect(bytearray.length).order(ByteOrder.nativeOrder());\n    bb.put(bytearray).flip();\n    return bb;\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Create GLImage from pixels passed in a ByteBuffer.  This is a non-standard approach\n * that may give unpredictable results.\n * @param pixels\n * @param w\n * @param h\n */\n", "func_signal": "public GLImage(ByteBuffer gl_pixels, int w, int h)", "code": "{\n  if (gl_pixels != null) {\n        this.pixelBuffer = gl_pixels;\n     this.pixels = null;\n     this.h = h;\n     this.w = w;\n  }\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Scale the given BufferedImage to the given width and height.\n * Return the new scaled BufferedImage.\n */\n", "func_signal": "public static BufferedImage scale(BufferedImage bsrc, int width, int height)", "code": "{\n    AffineTransform at = AffineTransform.getScaleInstance((double)width/bsrc.getWidth(),(double)height/bsrc.getHeight());\n    BufferedImage bdest = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n    Graphics2D g = bdest.createGraphics();\n    g.drawRenderedImage(bsrc,at);\n    return bdest;\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Save an array of ARGB pixels to a PNG file.\n * If flipY is true, flip the pixels on the Y axis before saving.\n */\n", "func_signal": "public static void savePixelsToPNG(int[] pixels, int width, int height, String imageFilename, boolean flipY)", "code": "{\n   if (pixels != null && imageFilename != null) {\n      if (flipY) {\n         // flip the pixels vertically (opengl has 0,0 at lower left, java is upper left)\n         pixels = GLImage.flipPixels(pixels, width, height);\n      }\n      try {\n         // Create a BufferedImage with the RGB pixels then save as PNG\n         BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n         image.setRGB(0, 0, width, height, pixels, 0, width);\n         javax.imageio.ImageIO.write(image, \"png\", new File(imageFilename));\n      }\n      catch (Exception e) {\n         System.err.println(\"GLImage.savePixelsToPNG(\" +imageFilename+ \"): exception \" + e);\n      }\n   }\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Convert pixels from java default ARGB int format to byte array in RGBA format.\n * @param jpixels\n * @return\n */\n", "func_signal": "public static byte[] convertARGBtoRGBA(int[] jpixels)", "code": "{\n    byte[] bytes = new byte[jpixels.length*4];  // will hold pixels as RGBA bytes\n    int p, r, g, b, a;\n    int j=0;\n    for (int i = 0; i < jpixels.length; i++) {\n        p = jpixels[i];\n        a = (p >> 24) & 0xFF;  // get pixel bytes in ARGB order\n        r = (p >> 16) & 0xFF;\n        g = (p >> 8) & 0xFF;\n        b = (p >> 0) & 0xFF;\n        bytes[j+0] = (byte)r;  // fill in bytes in RGBA order\n        bytes[j+1] = (byte)g;\n        bytes[j+2] = (byte)b;\n        bytes[j+3] = (byte)a;\n        j += 4;\n    }\n    return bytes;\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Scale the given BufferedImage to width and height that are powers of two.\n * Return the new scaled BufferedImage.\n */\n", "func_signal": "public static BufferedImage convertToPowerOf2(BufferedImage bsrc)", "code": "{\n    // find powers of 2 equal to or greater than current dimensions\n    int newW = getPowerOfTwoBiggerThan(bsrc.getWidth());\n    int newH = getPowerOfTwoBiggerThan(bsrc.getHeight());\n    if (newW == bsrc.getWidth() && newH == bsrc.getHeight()) {\n     return bsrc;    // no change necessary\n    }\n    else {\n       AffineTransform at = AffineTransform.getScaleInstance((double)newW/bsrc.getWidth(),(double)newH/bsrc.getHeight());\n       BufferedImage bdest = new BufferedImage(newW, newH, BufferedImage.TYPE_INT_ARGB);\n       Graphics2D g = bdest.createGraphics();\n       g.drawRenderedImage(bsrc,at);\n       return bdest;\n    }\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Create GLImage from image file bytes (the contents of a jpg, gif or png file). Flip Y axis.\n * @param pixels\n * @param w\n * @param h\n */\n", "func_signal": "public GLImage(byte[] bytes)", "code": "{\n    BufferedImage img = makeBufferedImage(bytes);\n    if (makeGLImage(img,true,false)) {\n     System.out.println(\"GLImage(byte[]): loaded image from bytes[\" + bytes.length + \"]\");\n  }\n  else {\n     System.err.println(\"GLImage(byte[]): could not create Image from bytes[\" + bytes.length + \"]\");\n  }\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Load an image from the given filename.  If convertToPow2 is true then convert\n * the image to a power of two.  Store pixels as ARGB ints in the pixels array\n * and as RGBA bytes in the pixelBuffer ByteBuffer.  Hold onto image width/height.\n * @param imgName\n */\n", "func_signal": "public boolean makeGLImage(BufferedImage tmpi, boolean flipYaxis, boolean convertToPow2)", "code": "{\n    if (tmpi != null) {\n        if (flipYaxis) {\n           tmpi = flipY(tmpi);\n     }\n        if (convertToPow2) {\n           tmpi = convertToPowerOf2(tmpi);\n        }\n        w = tmpi.getWidth(null);\n        h = tmpi.getHeight(null);\n        pixels = getImagePixels(tmpi);  // pixels in default Java ARGB format\n        pixelBuffer = convertImagePixelsRGBA(pixels,w,h,false);  // convert to bytes in RGBA format\n        textureW = getPowerOfTwoBiggerThan(w); // the texture size big enough to hold this image\n        textureH = getPowerOfTwoBiggerThan(h); // the texture size big enough to hold this image\n        //GLApp.msg(\"GLImage: loaded \" + imgName + \", width=\" + w + \" height=\" + h);\n        return true;\n    }\n    else {\n        //GLApp.err(\"GLImage: FAILED TO LOAD IMAGE \" + imgName);\n        pixels = null;\n        pixelBuffer = null;\n        h = w = 0;\n        return false;\n    }\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Load pixels from an image file.  Convert to RGBA format.\n * @param imgName\n */\n", "func_signal": "public GLImage(String imgName, boolean flipYaxis, boolean convertPow2)", "code": "{\n  BufferedImage img = loadJavaImage(imgName);\n    if (makeGLImage(img,flipYaxis,convertPow2)) {\n     System.out.println(\"GLImage(String,bool,bool): loaded \" + imgName + \", width=\" + w + \" height=\" + h);\n  }\n   }", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Load pixels from an image file.  Flip Y axis.  Convert to RGBA format.\n * @param imgName\n */\n", "func_signal": "public GLImage(String imgName)", "code": "{\n  BufferedImage img = loadJavaImage(imgName);\n    if (makeGLImage(img,true,false)) {\n     System.out.println(\"GLImage(String): loaded \" + imgName + \", width=\" + w + \" height=\" + h);\n  }\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Return the Image pixels in default Java int ARGB format.\n * @return\n */\n", "func_signal": "public static int[] getImagePixels(Image image)", "code": "{\n  int[] pixelsARGB = null;\n    if (image != null) {\n     int imgw = image.getWidth(null);\n     int imgh = image.getHeight(null);\n     pixelsARGB = new int[ imgw * imgh];\n        PixelGrabber pg = new PixelGrabber(image, 0, 0, imgw, imgh, pixelsARGB, 0, imgw);\n        try {\n            pg.grabPixels();\n        }\n        catch (Exception e) {\n           System.err.println(\"Pixel Grabbing interrupted!\");\n            return null;\n        }\n    }\n    return pixelsARGB;\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Make a BufferedImage from the contents of an image file.  \n * @param imageFileContents  byte array containing the guts of a JPG, GIF, or PNG\n */\n", "func_signal": "public BufferedImage makeBufferedImage(byte[] imageFileContents)", "code": "{\n  BufferedImage bi = null;\n  try {\n     InputStream in = new ByteArrayInputStream(imageFileContents);\n        bi = javax.imageio.ImageIO.read(in);\n    }\n  catch (IOException ioe) {\n     System.err.println(\"GLImage.makeBufferedImage(): \" + ioe);\n  }  \n    return bi;\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Flip an array of pixels vertically\n * @param imgPixels\n * @param imgw\n * @param imgh\n * @return int[]\n */\n", "func_signal": "public static int[] flipPixels(int[] imgPixels, int imgw, int imgh)", "code": "{\n    int[] flippedPixels = null;\n    if (imgPixels != null) {\n        flippedPixels = new int[imgw * imgh];\n        for (int y = 0; y < imgh; y++) {\n            for (int x = 0; x < imgw; x++) {\n                flippedPixels[ ( (imgh - y - 1) * imgw) + x] = imgPixels[ (y * imgw) + x];\n            }\n        }\n    }\n    return flippedPixels;\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Flip the given BufferedImage vertically.\n * Return the new flipped BufferedImage.\n */\n", "func_signal": "public static BufferedImage flipY(BufferedImage bsrc)", "code": "{\n    AffineTransform tx = AffineTransform.getScaleInstance(1, -1);\n    tx.translate(0, -bsrc.getHeight(null));\n    AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);\n    return op.filter(bsrc, null);\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Find a power of two equal to or greater than the given value.\n * Ie. getPowerOfTwoBiggerThan(800) will return 1024.\n * <P>\n * @see makeTextureForScreen()\n * @param dimension\n * @return a power of two equal to or bigger than the given dimension\n */\n", "func_signal": "public static int getPowerOfTwoBiggerThan(int n)", "code": "{\n    if (n < 0)\n        return 0;\n    --n;\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    return n+1;\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Copy ARGB pixels to a ByteBuffer without changing the ARGB byte order. If used to make a\n * texture, the pixel format is GL12.GL_BGRA.  With this format we can leave pixels in ARGB\n * order (faster), but unfortunately I had problems building mipmaps in BGRA format\n * (GLU.gluBuild2DMipmaps() did not recognize GL_UNSIGNED_INT_8_8_8_8 and\n * GL_UNSIGNED_INT_8_8_8_8_REV types so screwed up the BGRA/ARGB byte order on Mac).\n *\n * @return ByteBuffer\n */\n", "func_signal": "public static ByteBuffer convertImagePixelsARGB(int[] jpixels, int imgw, int imgh, boolean flipVertically)", "code": "{\n  // flip Y axis\n    if (flipVertically) {\n        jpixels = flipPixels(jpixels, imgw, imgh); // flip Y axis\n    }\n    // put int pixels into Byte Buffer\n  ByteBuffer bb = allocBytes(jpixels.length * 4);  // 4 bytes per pixel\n  bb.asIntBuffer().put(jpixels);\n    return bb;\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Create GLImage from image file bytes (the contents of a jpg, gif or png file).\n * @param pixels\n * @param w\n * @param h\n */\n", "func_signal": "public GLImage(byte[] bytes, boolean flipYaxis, boolean convertPow2)", "code": "{\n    BufferedImage img = makeBufferedImage(bytes);\n    if (makeGLImage(img,flipYaxis,convertPow2)) {\n     System.out.println(\"GLImage(byte[],bool,bool): loaded image from bytes[\" + bytes.length + \"]\");\n  }\n  else {\n     System.err.println(\"GLImage(byte[],bool,bool): could not create Image from bytes[\" + bytes.length + \"]\");\n  }\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * Load a BufferedImage from the given image file name.  File can be in the local filesytem,\n * in the applet folder, or in a jar.\n */\n", "func_signal": "public BufferedImage loadJavaImage(String imgName)", "code": "{\n   BufferedImage tmpi = null;\n   try {\n      tmpi = ImageIO.read(getInputStream(imgName));\n   }\n   catch (Exception e) {\n      System.err.println(\"GLImage.loadJavaImage() exception: FAILED TO LOAD IMAGE \" + e);\n   }\n   return tmpi;\n}", "path": "GLImage.java", "repo_name": "galfgarion/skunkjets", "stars": 6, "license": "None", "language": "java", "size": 1616}
{"docstring": "/**\n * implementing the UploadListner Interface\n * updates the progressbar by increasing the progress by the given value\n */\n", "func_signal": "public void updateProgressValue(int inc)", "code": "{\n\tSystem.out.println(\"Prgressbar: \" + progressbar.getValue());\n\tprogressbar.setValue(progressbar.getValue() + inc);\n}", "path": "src\\de\\ueller\\midlet\\gps\\GuiGpx.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "// start the LocationProvider in background\n", "func_signal": "public void run()", "code": "{\n\ttry {\n\t\t\n\t\tif (running){\n\t\t\treceiveMessage(\"GPS starter already running\");\n\t\t\treturn;\n\t\t}\n\n\t\t//#debug info\n\t\tlogger.info(\"start thread init locationprovider\");\n\t\tif (locationProducer != null) {\n\t\t\treceiveMessage(\"Location provider already running\");\n\t\t\treturn;\n\t\t}\n\t\tif (Configuration.getLocationProvider() == Configuration.LOCATIONPROVIDER_NONE) {\n\t\t\treceiveMessage(\"No location provider\");\n\t\t\treturn;\n\t\t}\n\t\trunning=true;\n\t\tint locprov = Configuration.getLocationProvider();\n\t\treceiveMessage(\"Connect to \"+Configuration.LOCATIONPROVIDER[locprov]);\n\t\tswitch (locprov){\n\t\t\tcase Configuration.LOCATIONPROVIDER_SIRF:\n\t\t\t\tlocationProducer = new SirfInput();\n\t\t\t\tbreak;\n\t\t\tcase Configuration.LOCATIONPROVIDER_NMEA:\n\t\t\t\tlocationProducer = new NmeaInput();\n\t\t\t\tbreak;\n\t\t\tcase Configuration.LOCATIONPROVIDER_SECELL:\n\t\t\t\tlocationProducer = new SECellID();\n\t\t\t\tbreak;\n\t\t\tcase Configuration.LOCATIONPROVIDER_JSR179:\n\t\t\t\t//#if polish.api.locationapi\n\t\t\t\ttry {\n\t\t\t\t\tString jsr179Version = null;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tjsr179Version = System.getProperty(\"microedition.location.version\");\n\t\t\t\t\t} catch (RuntimeException re) {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Some phones throw exceptions if trying to access properties that don't\n\t\t\t\t\t\t * exist, so we have to catch these and just ignore them.\n\t\t\t\t\t\t */\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * See above \n\t\t\t\t\t\t */\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tif (jsr179Version != null && jsr179Version.length() > 0) {\n\t\t\t\t\t\tClass jsr179Class = Class.forName(\"de.ueller.gps.jsr179.JSR179Input\");\n\t\t\t\t\t\tlocationProducer = (LocationMsgProducer) jsr179Class.newInstance();\n\t\t\t\t\t}\n\t\t\t\t} catch (ClassNotFoundException cnfe) {\n\t\t\t\t\tlocationDecoderEnd();\n\t\t\t\t\tlogger.exception(\"Your phone does not support JSR179, please use a different location provider\", cnfe);\n\t\t\t\t\trunning = false;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//#else\n\t\t\t\t// keep eclipse happy \n\t\t\t\tif (true){\n\t\t\t\t\tlogger.error(\"JSR179 is not compiled in this version of GpsMid\");\n\t\t\t\t\trunning = false;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//#endif\n\t\t\t\tbreak;\n\n\t\t}\n\t\t//#if polish.api.fileconnection\t\n\t\t/**\n\t\t * Allow for logging the raw data coming from the gps\n\t\t */\n\n\t\tString url = Configuration.getGpsRawLoggerUrl();\n\t\t//logger.error(\"Raw logging url: \" + url);\n\t\tif (Configuration.getGpsRawLoggerEnable() && (url != null)) {\n\t\t\ttry {\n\t\t\t\tlogger.info(\"Raw Location logging to: \" + url);\n\t\t\t\turl += \"rawGpsLog\" + HelperRoutines.formatSimpleDateNow() + \".txt\";\n\n\t\t\t\tjavax.microedition.io.Connection logCon = Connector.open(url);\t\t\t\t\n\t\t\t\tif (logCon instanceof FileConnection) {\n\t\t\t\t\tFileConnection fileCon = (FileConnection)logCon;\n\t\t\t\t\tif (!fileCon.exists())\n\t\t\t\t\t\tfileCon.create();\n\t\t\t\t\tlocationProducer.enableRawLogging(((FileConnection)logCon).openOutputStream());\n\t\t\t\t\t\n\t\t\t\t\t/**\n\t\t\t\t\t * Help out the OpenCellId.org project by gathering and logging\n\t\t\t\t\t * data of cell ids together with current Gps location. This information\n\t\t\t\t\t * can then be uploaded to their web site to determine the position of the\n\t\t\t\t\t * cell towers. It currently only works for SE phones\n\t\t\t\t\t */\n\t\t\t\t\tSECellLocLogger secl = new SECellLocLogger();\n\t\t\t\t\tif (secl.init()) {\n\t\t\t\t\t\tlocationProducer.addLocationMsgReceiver(secl);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlogger.info(\"Trying to perform raw logging of NMEA on anything else than filesystem is currently not supported\");\n\t\t\t\t}\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tlogger.exception(\"Couldn't open file for raw logging of Gps data\",ioe);\n\t\t\t} catch (SecurityException se) {\n\t\t\t\tlogger.error(\"Permission to write data for NMEA raw logging was denied\");\n\t\t\t}\t\t\t\t\n\t\t}\n\t\t//#endif\n\t\tif (locationProducer == null) {\n\t\t\tlogger.error(\"Your phone does not seem to support this method of location input, please choose a different one\");\n\t\t\trunning  = false;\n\t\t\treturn;\n\t\t}\n\t\tif (!locationProducer.init(this)) {\n\t\t\tlogger.info(\"Failed to initialise location producer\");\n\t\t\trunning = false;\n\t\t\treturn;\n\t\t}\n\t\tif (Configuration.getCfgBitState(Configuration.CFGBIT_SND_CONNECT)) {\n\t\t\tGpsMid.mNoiseMaker.playSound(\"CONNECT\");\n\t\t}\n\t\t//#debug debug\n\t\tlogger.debug(\"rm connect, add disconnect\");\n\t\tremoveCommand(CMDS[CONNECT_GPS_CMD]);\n\t\taddCommand(CMDS[DISCONNECT_GPS_CMD]);\n\t\t//#debug info\n\t\tlogger.info(\"end startLocationPovider thread\");\n\t\t//\t\tsetTitle(\"lp=\"+Configuration.getLocationProvider() + \" \" + Configuration.getBtUrl());\t\t\t\n\t} catch (SecurityException se) {\n\t\t/**\n\t\t * The application was not permitted to connect to the required resources\n\t\t * Not much we can do here other than gracefully shutdown the thread\t\t\t *  \n\t\t */\n\t} catch (OutOfMemoryError oome) { \n\t\tlogger.fatal(\"Trace thread crashed as out of memory: \" + oome.getMessage()); \n\t\toome.printStackTrace(); \n\t} catch (Exception e) {\n\t\tlogger.fatal(\"Trace thread crashed unexpectadly with error \" +  e.getMessage());\n\t\te.printStackTrace();\n\t} finally {\n\t\trunning = false;\n\t}\n\trunning = false;\n}", "path": "src\\de\\ueller\\midlet\\gps\\Trace.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/**\n * Invoked by system when a new remote device is found - remember the found device.\n */\n", "func_signal": "public void deviceDiscovered(RemoteDevice btDevice, DeviceClass cod)", "code": "{\n\t// same device may found several times during single search\n\tparent.addDevice(\"found \"+btDevice.getBluetoothAddress());\t\t\n\tif (devices.indexOf(btDevice) == -1) {\n\t\tdevices.addElement(btDevice);\n\t}\n}", "path": "src\\de\\ueller\\midlet\\gps\\DiscoverGps.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/** Cancel's the devices/services search. */\n", "func_signal": "public void cancelSearch()", "code": "{\n\tcancelDeviceSearch();\n\tcancelServiceSearch();\n}", "path": "src\\de\\ueller\\midlet\\gps\\DiscoverGps.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/*\tprivate void shutdown() {\n\t\tstopImageCollector();\n\t\tif (namesThread != null) {\n\t\t\tnamesThread.stop();\n\t\t\tnamesThread = null;\n\t\t}\n\t\tif (dictReader != null) {\n\t\t\tdictReader.shutdown();\n\t\t\tdictReader = null;\n\t\t}\n\t\tif (tileReader != null) {\n\t\t\ttileReader.shutdown();\n\t\t\ttileReader = null;\n\t\t}\n\n\t\tif (locationProducer != null){\n\t\t\tlocationProducer.close();\n\t\t}\n\n\t}*/\n", "func_signal": "protected void sizeChanged(int w, int h)", "code": "{\n\t\tif (imageCollector != null){\n\t\t\tlogger.info(\"Size of Canvas changed to \" + w + \"|\" + h);\n\t\t\tstopImageCollector();\n\t\t\ttry {\n\t\t\t\tstartImageCollector();\n\t\t\t\timageCollector.resume();\n\t\t\t\timageCollector.newDataReady();\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.exception(\"Could not reinitialise Image Collector after size change\", e);\n\t\t\t}\n\t\t\t/**\n\t\t\t * Recalculate the projection, as it may depends on the size of the screen\n\t\t\t */\n\t\t\tupdatePosition();\n\t\t}\n\t}", "path": "src\\de\\ueller\\midlet\\gps\\Trace.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/**\n\tThere's no pow()-function in J2ME so manually\n\tcalculate 1.5^detailBoost to get factor\n\tto multiply with Zoom Level limits\n**/\n", "func_signal": "private static void calculateDetailBoostMultiplier()", "code": "{\n\t\tdetailBoostMultiplier=1;\n\t\tfor(int i=1;i<=detailBoost;i++) {\n\t\t\tdetailBoostMultiplier*=1.5;\n\t\t}\n\t}", "path": "src\\de\\ueller\\gps\\data\\Configuration.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/**\n * Show an alert window with the given title that cannot be dismissed by\n * the user, i.e. a modal progress dialog. This Alert Window also has a progressbar indicating the progress\n * \n * @param title The title of the alert\n * @param progEndValue the maximum value for the progressbar\n */\n", "func_signal": "protected void showProgressDisplay(String title, int progEndValue)", "code": "{\n\tint progrMode = 0;\n\t//catch illegal argument\n\tif (progEndValue < 1){\n\t\tprogEndValue = Gauge.INDEFINITE;\n\t\t//Set mode for progressbar\n\t\tprogrMode = Gauge.CONTINUOUS_RUNNING;\n\t}\n\t\n\tif (progressDisplay == null) {\n\t\tprogressDisplay = new Alert(title);\n\t\tprogressDisplay.setCommandListener(this);\n\t\tprogressDisplay.setTimeout(Alert.FOREVER);\n\t\t//create a progressbar that gives an indication about how many waypoints have already been exported\n\t\tprogressbar = new Gauge(null, false, progEndValue, progrMode);\n\t\tprogressDisplay.setIndicator(progressbar);\n\t} else {\n\t\tprogressDisplay.setTitle(title);\n\t\tprogressbar.setMaxValue(progEndValue);\n\t\tprogressbar.setValue(progrMode);\n\t\tprogressDisplay.setIndicator(progressbar);\n\t}\n\t// Empty string buffer for alert text.\n\tsbProgress = new StringBuffer();\n\t// At least on Sony Ericsson phones, the alert won't be shown\n\t// until it contains some text, so let's put in a dummy. \n\tprogressDisplay.setString(\" \");\t\t\n\ttry {\n\t\tGpsMid.getInstance().show(progressDisplay);\n\t\tprogressCloseable = false;\n\t} catch (IllegalArgumentException iae) {\n\t\t/**\n\t\t * Nokia S40 phones seem to throw an exception\n\t\t * if one tries to set an Alert displayable when\n\t\t * the current displayable is an alert too.\n\t\t * \n\t\t * Not much we can do about this, other than just\n\t\t * ignore the exception and not display the new\n\t\t * alert. \n\t\t */\n\t\tlogger.info(\"Could not display progress alert, \" + iae.getMessage());\n\t}\n}", "path": "src\\de\\ueller\\midlet\\gps\\GuiGpx.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/* After this method was called, the user can dismiss the \n * alert window (which has no timeout).\n */\n", "func_signal": "protected void finishProgressDisplay()", "code": "{\n\t//some phones only show a progressbar that's continuous running. So we remove the bar to show that the action is completed\n\tprogressDisplay.setIndicator(null);\n\tprogressCloseable = true;\n}", "path": "src\\de\\ueller\\midlet\\gps\\GuiGpx.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/** updates the Vector of gpxtracks that should be processed by another method**/\n", "func_signal": "private void updateProcessVector()", "code": "{\t\n\t// find out which tracks should be exported **/\n\tboolean[] boolSelected = new boolean[this.size()];\n\tthis.getSelectedFlags(boolSelected);\n\t// create new list of tracks which need to be processed /exported \n\tprocessTracks.removeAllElements();\n\tfor (int i = 0; i < boolSelected.length; i++) {\n\t\tif (boolSelected[i] == true) {\n\t\t\tprocessTracks.addElement(trks[i]);\n\t\t}\n\t}\n}", "path": "src\\de\\ueller\\midlet\\gps\\GuiGpx.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/* Add text to the progress alert window.\n * @param text Text to be added\n */\n", "func_signal": "protected void addProgressText(String text)", "code": "{\n\tif (sbProgress != null && progressDisplay != null) {\n\t\tsbProgress.append(text);\n\t\tprogressDisplay.setString(sbProgress.toString());\n\t}\n}", "path": "src\\de\\ueller\\midlet\\gps\\GuiGpx.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/**\n * This is the callback routine if RouteCalculation is ready\n * @param route\n */\n", "func_signal": "public void setRoute(Vector route)", "code": "{\n\tsynchronized(this) {\n\t\tthis.route = route;\n\t\tif (route!=null) {\n\t\t\tif (ri==null) {\n\t\t\t\tri = new RouteInstructions(this);\n\t\t\t}\n\t\t\tri.newRoute(route, target);\n\t\t\toldRecalculationTime = System.currentTimeMillis();\n\t\t\tRouteInstructions.resetOffRoute(route, center);\n\t\t}\n\t\trouteCalc=false;\n\t\trouteEngine=null;\n\t}\n\ttry {\n\t\tif ((Configuration.isStopAllWhileRouteing())&&(imageCollector == null)){\n\t\t\tstartImageCollector();\n\t\t\t// imageCollector thread starts up suspended,\n\t\t\t// so we need to resume it\n\t\t\timageCollector.resume();\n\t\t}\n\t\trepaint();\n\t} catch (Exception e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\de\\ueller\\midlet\\gps\\Trace.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/**\n * Read tracks from the GPX recordStore and display the names in the list on screen.\n */\n", "func_signal": "private void initTracks()", "code": "{\n\tthis.deleteAll();\t\t\n\ttrks = parent.gpx.listTrks();\n\tfor (int i = 0; i < trks.length; i++) {\n\t\tthis.append(trks[i].displayName, null);\n\t}\n}", "path": "src\\de\\ueller\\midlet\\gps\\GuiGpx.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/**\n * Invoked by system when device discovery is done.\n * <p>\n * Use a trick here - just remember the discType and process its evaluation in another thread.\n */\n", "func_signal": "public void inquiryCompleted(int discType)", "code": "{\n\tthis.discType = discType;\n\t// parent.showState(\"search complete\");\n\tparent.addDevice(\"inquiry Complete\");\n\tsynchronized (this) {\n\t\tnotify();\n\t}\n}", "path": "src\\de\\ueller\\midlet\\gps\\DiscoverGps.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/**\n * Draws a map scale onto screen.\n * This calculation is currently horribly\n * inefficient. There must be a better way\n * than this.\n * \n * @param pc Paint context for drawing\n */\n", "func_signal": "public void showScale(PaintContext pc)", "code": "{\n\tNode n1 = new Node();\n\tNode n2 = new Node();\n\t\n\tfloat scale;\n\tint scalePx;\n\t\n\t//Calculate the lat and lon coordinates of two\n\t//points that are 35 pixels apart\n\tpc.getP().inverse(10, 10, n1);\n\tpc.getP().inverse(45, 10, n2);\n\t\n\t//Calculate the distance between them in meters\n\tfloat d = ProjMath.getDistance(n1, n2);\n\t//round this distance up to the nearest 5 or 10\n\tint ordMag = (int)(MoreMath.log(d)/MoreMath.log(10.0f));\n\tif (d < 2.5*MoreMath.pow(10,ordMag)) {\n\t\tscale = 2.5f*MoreMath.pow(10,ordMag);\n\t} else if (d < 5*MoreMath.pow(10,ordMag)) {\n\t\tscale = 5*MoreMath.pow(10,ordMag);\n\t} else {\n\t\tscale = 10*MoreMath.pow(10,ordMag);\n\t}\n\t//Calculate how many pixels this distance is apart\n\tscalePx = (int)(35.0f*scale/d);\n\t\n\t//Draw the scale bar\n\tpc.g.setColor(0x00000000);\n\tpc.g.drawLine(10,10, 10 + scalePx, 10);\n\tpc.g.drawLine(10,11, 10 + scalePx, 11); //double line width\n\tpc.g.drawLine(10, 8, 10, 13);\n\tpc.g.drawLine(10 + scalePx, 8, 10 + scalePx, 13);\n\tif (scale > 1000) {\n\t\tpc.g.drawString(Integer.toString((int)(scale/1000.0f)) + \"km\", 10 + scalePx/2 ,12, Graphics.HCENTER | Graphics.TOP);\n\t} else {\n\t\tpc.g.drawString(Integer.toString((int)scale) + \"m\", 10 + scalePx/2 ,12, Graphics.HCENTER | Graphics.TOP);\n\t}\n}", "path": "src\\de\\ueller\\midlet\\gps\\Trace.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/**\n * Draws the position square, the movement line and the center cross.\n * \n * @param g Graphics context for drawing\n */\n", "func_signal": "public void showMovement(Graphics g)", "code": "{\n\tg.setColor(0, 0, 0);\n\tint centerX = getWidth() / 2;\n\tint centerY = getHeight() / 2;\n\tint posX, posY;\n\tif (!gpsRecenter) {\n\t\tIntPoint p1 = new IntPoint(0,0);\t\t\t\t\n\t\tpc.getP().forward((float)(pos.latitude/360.0*2*Math.PI), (float)(pos.longitude/360.0*2*Math.PI),p1);\n\t\tposX = p1.getX();\n\t\tposY = p1.getY();\t\t\n\t} else {\n\t\tposX = centerX;\n\t\tposY = centerY;\n\t}\n\tfloat radc = (float) (course * Math.PI / 180d);\n\tint px = posX + (int) (Math.sin(radc) * 20);\n\tint py = posY - (int) (Math.cos(radc) * 20);\n\tg.drawRect(posX - 2, posY - 2, 4, 4);\n\tg.drawLine(posX, posY, px, py);\n\tg.drawLine(centerX - 2, centerY - 2, centerX + 2, centerY + 2);\n\tg.drawLine(centerX - 2, centerY + 2, centerX + 2, centerY - 2);\n}", "path": "src\\de\\ueller\\midlet\\gps\\Trace.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/**\n * Read tracks from the GPX recordStore and display the names in the list on screen.\n */\n", "func_signal": "private void initWaypoints()", "code": "{\n\tthis.deleteAll();\t\t\n\twaypoints = parent.gpx.listWayPt();\n\tfor (int i = 0; i < waypoints.length; i++) {\n\t\tif ((waypoints[i].displayName == null) || (waypoints[i].displayName.equals(\"\"))) {\n\t\t\tthis.append(\"(unnamed)\",null);\n\t\t} else {\n\t\t\tthis.append(waypoints[i].displayName,null);\n\t\t}\n\t}\n}", "path": "src\\de\\ueller\\midlet\\gps\\GuiWaypoint.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/**\n * Try and determine the maximum available memory. As some phones have\n * dynamic growing heaps, we need to try and cause a out of memory error, as\n * that indicates the maximum size to which the heap can grow\n * \n * @return maximum heap size\n */\n", "func_signal": "private long determinPhoneMaxMemory()", "code": "{\n\tlong maxMem = Runtime.getRuntime().totalMemory();\n\t// int [][] buf = new int[2048][];\n\t// try {\n\t// for (int i = 0; i < 2048; i++) {\n\t// buf[i] = new int[16000];\n\t// }\n\t// } catch (OutOfMemoryError oome) {\n\t// //l.info(\"Hit out of memory while determining maximum heap size\");\n\t// maxMem = Runtime.getRuntime().totalMemory();\n\t// } finally {\n\t// for (int i = 0; i < 2048; i++) {\n\t// buf[i] = null;\n\t// }\n\t// }\n\t// System.gc();\n\tlog.info(\"Maximum phone memory: \" + maxMem);\n\treturn maxMem;\n}", "path": "src\\de\\ueller\\midlet\\gps\\GpsMid.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/**\n * Show next screen in the sequence of data screens\n * (tacho, trip, satellites).\n * @param currentScreen Data screen currently shown, use the DATASCREEN_XXX\n *    constants from this class. Use DATASCREEN_NONE if none of them\n *    is on screen i.e. the first one should be shown.\n */\n", "func_signal": "public void showNextDataScreen(int currentScreen)", "code": "{\n\tswitch (currentScreen)\n\t{\n\t\tcase DATASCREEN_TACHO:\n\t\t\t// Tacho is followed by Trip.\n\t\t\tif (guiTrip == null) {\n\t\t\t\tguiTrip = new GuiTrip(this);\n\t\t\t}\n\t\t\tif (guiTrip != null) {\n\t\t\t\tguiTrip.show();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase DATASCREEN_TRIP:\n\t\t\t// TODO: Trip is followed by Satellites.\n\t\t\tthis.show();\n\t\t\tbreak;\n\t\tcase DATASCREEN_SATS:\n\t\t\t// After satellites, go back to map.\n\t\t\tthis.show();\n\t\t\tbreak;\n\t\tcase DATASCREEN_NONE:\n\t\tdefault:\n\t\t\t// Tacho is first data screen\n\t\t\tif (guiTacho == null) {\n\t\t\t\tguiTacho = new GuiTacho(this);\n\t\t\t}\n\t\t\tif (guiTacho != null) {\n\t\t\t\tguiTacho.show();\n\t\t\t}\n\t\t\tbreak;\n\t}\n}", "path": "src\\de\\ueller\\midlet\\gps\\Trace.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/**\n * \n */\n", "func_signal": "private void getPC()", "code": "{\n\t\tpc.course=course;\n\t\tpc.scale=scale;\n\t\tpc.center=center.clone();\n//\t\t\tpc.setP( projection);\n//\t\t\tprojection.inverse(pc.xSize, 0, pc.screenRU);\n//\t\t\tprojection.inverse(0, pc.ySize, pc.screenLD);\n\t\tpc.target=target;\n}", "path": "src\\de\\ueller\\midlet\\gps\\Trace.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/* Show an alert window with the given title that cannot be dismissed by\n * the user, i.e. a modal progress dialog.\n * @param title The title of the alert\n */\n", "func_signal": "protected void showProgressDisplay(String title)", "code": "{\n\tif (progressDisplay == null) {\n\t\tprogressDisplay = new Alert(title);\n\t\tprogressDisplay.setCommandListener(this);\n\t\tprogressDisplay.setTimeout(Alert.FOREVER);\n\t\t//creates a progressbar - not used in this case but it should be created when the alert is first created so it's present later\n\t\tprogressbar = new Gauge(null, false, Gauge.INDEFINITE, Gauge.CONTINUOUS_RUNNING);\n\t} else {\n\t\tprogressDisplay.setTitle(title);\n\t\tprogressDisplay.setIndicator(null);\n\t}\n\t// Empty string buffer for alert text.\n\tsbProgress = new StringBuffer();\n\t// At least on Sony Ericsson phones, the alert won't be shown\n\t// until it contains some text, so let's put in a dummy. \n\tprogressDisplay.setString(\" \");\t\t\n\ttry {\n\t\tGpsMid.getInstance().show(progressDisplay);\n\t\tprogressCloseable = false;\n\t} catch (IllegalArgumentException iae) {\n\t\t/**\n\t\t * Nokia S40 phones seem to throw an exception\n\t\t * if one tries to set an Alert displayable when\n\t\t * the current displayable is an alert too.\n\t\t * \n\t\t * Not much we can do about this, other than just\n\t\t * ignore the exception and not display the new\n\t\t * alert. \n\t\t */\n\t\tlogger.info(\"Could not display progress alert, \" + iae.getMessage());\n\t}\n}", "path": "src\\de\\ueller\\midlet\\gps\\GuiGpx.java", "repo_name": "janrose/gpsmid", "stars": 4, "license": "gpl-2.0", "language": "java", "size": 2016}
{"docstring": "/**\n * initializes class members\n */\n", "func_signal": "private void initComponents()", "code": "{\n    if (Constants.isWindows)\n        fsv = FileSystemView.getFileSystemView();\n    \n    initRoot();\n    setCellRenderer(new FileTreeCellRenderer());\n    setEditable(false);\n}", "path": "src\\com\\arashpayan\\filetree\\FileTree.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * returns a renderered node for the tree\n * @param tree the tree to render the node for\n * @param value the value of the node\n * @param selected if the node is selected\n * @param expanded if it's expanded\n * @param leaf if its a leaf or not\n * @param row the row number\n * @param hasFocus if it has focus\n * @return a renderered node for the tree\n */\n", "func_signal": "public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus)", "code": "{\n    super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);\n    \n    Object userObject = ((DefaultMutableTreeNode)value).getUserObject();\n    if (userObject instanceof FileTreeNode)\n    {\n        FileTreeNode fileTreeNode = (FileTreeNode)userObject;\n        \n        if (!Constants.isWindows)\n        {\n            try { setIcon(fileChooser.getIcon(fileTreeNode.file)); }\n            catch (Exception e) { e.printStackTrace(); }\n        }\n        else\n        {\n            try { setIcon(fsv.getSystemIcon(fileTreeNode.file)); }\n            catch (Exception e) { e.printStackTrace(); }\n        }\n    }\n\n    return this;\n}", "path": "src\\com\\arashpayan\\filetree\\FileTree.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * returns the selected file in the tree. If there are multiple selections in the\n * tree, then it will return the <code>File</code> associated with the value\n * returned from <code>getSelectionPath</code>. You can enable/disable mutliple\n * selections by changing the mode of the <code>TreeSelectionModel</code>.\n * @return the selected file in the tree\n */\n", "func_signal": "public File getSelectedFile()", "code": "{\n    TreePath treePath = getSelectionPath();\n    if (treePath == null)\n        return null;\n    \n    DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode)treePath.getLastPathComponent();\n    FileTreeNode fileTreeNode = (FileTreeNode)treeNode.getUserObject();\n    return fileTreeNode.file;\n}", "path": "src\\com\\arashpayan\\filetree\\FileTree.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * Expands the tree to the <code>File</code> specified by the argument, and selects\n * it as well. If the <code>currFile</code> does not exist or is null, calling this\n * method will have no effect.\n * @param currFile The file or directory to expand the tree to and select.\n */\n", "func_signal": "public void setCurrentFile(File currFile)", "code": "{\n    if (currFile == null || !currFile.exists())\n        return;\n    \n    String path = currFile.getPath();\n    String [] pathParts = null;\n    if (Constants.isWindows)\n        pathParts = path.split(\"\\\\\\\\\");\n    else\n        pathParts = path.split(File.separator);\n    \n    if (Constants.isWindows)\n    {\n        int childCount = rootNode.getChildCount();\n        DefaultMutableTreeNode myComputer = null;\n        for (int i=0; i<childCount; i++)\n        {\n            FileTreeNode fileTreeNode = \n                    (FileTreeNode)((DefaultMutableTreeNode)rootNode.getChildAt(i)).getUserObject();\n            if (fileTreeNode.file.getPath().equals(FileTreeNode.WINDOWS_MYCOMPUTER))\n            {\n                myComputer = (DefaultMutableTreeNode)rootNode.getChildAt(i);\n                TreePath treePath = new TreePath(myComputer.getPath());\n                expandPath(treePath);\n                break;\n            }\n        }\n        \n        DefaultMutableTreeNode currNode = myComputer;\n        for (String part:pathParts)\n        {\n            childCount = currNode.getChildCount();\n            for (int i=0; i<childCount; i++)\n            {\n                DefaultMutableTreeNode childNode = (DefaultMutableTreeNode)currNode.getChildAt(i);\n                FileTreeNode fileTreeNode = (FileTreeNode)childNode.getUserObject();\n                String pathName = fileTreeNode.file.getName();\n                if (pathName.length() == 0)\n                    pathName = fileTreeNode.file.getPath().substring(0, 2);\n                if (pathName.equals(part))\n                {\n                    TreePath treePath = new TreePath(childNode.getPath());\n                    expandPath(treePath);\n                    selectionModel.setSelectionPath(treePath);\n                    currNode = childNode;\n                    break;\n                }\n            }\n        }\n        \n    }\n    else\n    {\n        DefaultMutableTreeNode currNode = rootNode;\n        for (String part:pathParts)\n        {\n            int childCount = currNode.getChildCount();\n            for (int i=0; i<childCount; i++)\n            {\n                DefaultMutableTreeNode childNode = (DefaultMutableTreeNode)currNode.getChildAt(i);\n                FileTreeNode fileTreeNode = (FileTreeNode)childNode.getUserObject();\n                if (fileTreeNode.file.getName().equals(part))\n                {\n                    TreePath treePath = new TreePath(childNode.getPath());\n                    expandPath(treePath);\n                    selectionModel.setSelectionPath(treePath);\n                    currNode = childNode;\n                    break;\n                }\n            }\n        }\n    }\n}", "path": "src\\com\\arashpayan\\filetree\\FileTree.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/** Creates a new instance of FileTree */\n", "func_signal": "public FileTree()", "code": "{\n    super(new DefaultTreeModel(new DefaultMutableTreeNode(\"root\")));\n    fileTreeModel = (DefaultTreeModel)treeModel;\n    showHiddenFiles = false;\n    showFiles = true;\n    navigateOSXApps = false;\n    \n    initComponents();\n    initListeners();\n}", "path": "src\\com\\arashpayan\\filetree\\FileTree.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * returns the representation of this <code>File</code> best suited for use in\n * the <code>FileTree</code>.\n * @return the representation of this <code>File</code> as a <code>String</code>\n */\n", "func_signal": "public String toString()", "code": "{\n    String name = file.getName();\n    if (!Constants.isWindows)\n        return name;\n\n    if (name.length() == 0)\n        return file.getPath();\n\n    if (Constants.isVista)\n    {\n        if (name.equals(WINDOWS_MYCOMPUTER))\n            return \"Computer\";\n        if (name.equals(WINDOWSVISTA_NETWORK))\n            return \"Network\";\n        return name;\n    }\n\n    // the Windows XP and 2K case\n    if (name.equals(WINDOWS_MYCOMPUTER))\n        return \"My Computer\";\n    if (name.equals(WINDOWS_MYNETWORKPLACES))\n        return \"My Network Places\";\n\n    return name;\n}", "path": "src\\com\\arashpayan\\filetree\\FileTreeNode.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * constructor for the action to delete a file or directory\n * @param treePath the treepath of the node to act on\n */\n", "func_signal": "public DeleteFileAction(TreePath treePath)", "code": "{\n    this.treePath = treePath;\n    \n    if (Constants.isOSX)\n        putValue(Action.NAME, \"Move to Trash\");\n    else\n    {\n        putValue(Action.NAME, \"Delete\");\n        putValue(Action.MNEMONIC_KEY, KeyEvent.VK_D);\n    }\n    \n    DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode)treePath.getLastPathComponent();\n    fileTreeNode = (FileTreeNode)treeNode.getUserObject();\n    if (!fileTreeNode.file.canWrite())\n        setEnabled(false);\n}", "path": "src\\com\\arashpayan\\filetree\\FileTreeListener.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * Toggle the showing of files in the tree (as opposed to just directories)\n * @param showFiles <code>true</code> shows files in the tree. <code>false</code> does not.\n */\n", "func_signal": "public void setShowFiles(boolean showFiles)", "code": "{\n    if (this.showFiles != showFiles)\n    {\n        this.showFiles = showFiles;\n        initRoot();\n    }\n}", "path": "src\\com\\arashpayan\\filetree\\FileTree.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * Creates a new instance of FileTreeNode\n * @param file The <code>File</code> that will be represented by this class.\n */\n", "func_signal": "public FileTreeNode(File file)", "code": "{\n    if (file == null)\n        throw new IllegalArgumentException(\"Null file not allowed\");\n\n    this.file = file;\n}", "path": "src\\com\\arashpayan\\filetree\\FileTreeNode.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * Listens for right-clicks on the tree.\n * @param e contains information about the mouse click event\n */\n", "func_signal": "public void mousePressed(MouseEvent e)", "code": "{\n    if (e.getButton() == MouseEvent.BUTTON3)\n        rightClick(e.getX(), e.getY());\n}", "path": "src\\com\\arashpayan\\filetree\\FileTreeListener.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * initializes the tree model\n */\n", "func_signal": "private void initRoot()", "code": "{\n    File[] roots = null;\n    if (Constants.isWindows)\n        roots = fsv.getRoots();\n    else\n        roots = File.listRoots();\n    \n    if (roots.length == 1)\n    {\n        rootNode = new DefaultMutableTreeNode(new FileTreeNode(roots[0]));\n        populateSubTree(rootNode);\n    }\n    else if (roots.length > 1)\n    {\n        rootNode = new DefaultMutableTreeNode(\"Computer\");\n        for (File root:roots)\n            rootNode.add(new DefaultMutableTreeNode(root));\n    }\n    else\n        rootNode = new DefaultMutableTreeNode(\"Error\");\n    \n    fileTreeModel.setRoot(rootNode);\n}", "path": "src\\com\\arashpayan\\filetree\\FileTree.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * Allows or disallows the showing of hidden files and directories in the tree.\n * @param showHiddenFiles <code>true</code> shows hidden files. <code>false</code> does not.\n */\n", "func_signal": "public void setShowHiddenFiles(boolean showHiddenFiles)", "code": "{\n    if (showHiddenFiles != this.showHiddenFiles)\n    {\n        this.showHiddenFiles = showHiddenFiles;\n        initRoot();\n    }\n}", "path": "src\\com\\arashpayan\\filetree\\FileTree.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * returns an array of the files selected in the tree. To enable/disable multiple\n * selections, you can change the selection mode in the\n * <code>TreeSelectionModel</code>.\n * @return an array of the files selected in the tree\n */\n", "func_signal": "public File[] getSelectedFiles()", "code": "{\n    TreePath[] treePaths = getSelectionPaths();\n    if (treePaths == null)\n        return null;\n    \n    File [] files = new File[treePaths.length];\n    for (int i=0; i<treePaths.length; i++)\n    {\n        DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode)treePaths[i].getLastPathComponent();\n        FileTreeNode fileTreeNode = (FileTreeNode)treeNode.getUserObject();\n        files[i] = fileTreeNode.file;\n    }\n    \n    return files;\n}", "path": "src\\com\\arashpayan\\filetree\\FileTree.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * Creates a new instance of FileTreeListener\n * @param fileTree the <code>FileTree</code> to listen for\n */\n", "func_signal": "public FileTreeListener(FileTree fileTree)", "code": "{\n    if (fileTree == null)\n        throw new IllegalArgumentException(\"Null argument not allowed\");\n    \n    this.fileTree = fileTree;\n}", "path": "src\\com\\arashpayan\\filetree\\FileTreeListener.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * called whenever a node is expanded\n * @param node the node to expand\n */\n", "func_signal": "private void populateSubTree(DefaultMutableTreeNode node)", "code": "{\n    Object userObject = node.getUserObject();\n    if (userObject instanceof FileTreeNode)\n    {\n        FileTreeNode fileTreeNode = (FileTreeNode)userObject;\n        File []files = fileTreeNode.file.listFiles();\n        \n        // Windows displays directories before regular files, so we're going\n        // to sort the list of files such that directories appear first\n        if (Constants.isWindows)\n        {\n            Arrays.sort(files, new Comparator<File>() {\n                public int compare(File f1, File f2) {\n                    boolean f1IsDir = f1.isDirectory();\n                    boolean f2IsDir = f2.isDirectory();\n                    \n                    if (f1IsDir == f2IsDir)\n                        return f1.compareTo(f2);\n                    if (f1IsDir && !f2IsDir)\n                        return -1;\n                    \n                    // here we assume that f1 is a file, and f2 is a directory\n                    return 1;\n                }\n            });\n        }\n        else\n            Arrays.sort(files);\n        \n        for (File file:files)\n        {\n            if (file.isFile() && !showFiles)\n                continue;\n            \n            if (!showHiddenFiles && file.isHidden())\n                continue;\n            \n            FileTreeNode subFile = new FileTreeNode(file);\n            DefaultMutableTreeNode subNode = new DefaultMutableTreeNode(subFile);\n            if (file.isDirectory())\n            {\n                if (!Constants.isOSX || navigateOSXApps || !file.getName().endsWith(\".app\"))\n                    subNode.add(new DefaultMutableTreeNode(\"Fake\"));\n            }\n            node.add(subNode);\n        }\n    }\n}", "path": "src\\com\\arashpayan\\filetree\\FileTree.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * \n * @param x the x coordinate of the mouse when it was pressed\n * @param y the y coordinate of the mouse when it was pressed\n */\n", "func_signal": "private void rightClick(int x, int y)", "code": "{\n    TreePath treePath = fileTree.getPathForLocation(x, y);\n    if (treePath == null)\n        return;\n    \n    if (!fileTree.isDeleteEnabled())\n        return;\n    \n    JPopupMenu popup = new JPopupMenu();\n    \n    popup.add(new DeleteFileAction(treePath));\n    popup.show(fileTree, x, y);\n}", "path": "src\\com\\arashpayan\\filetree\\FileTreeListener.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * the action called when the user wants to delete a file or directory\n * @param e information about the event that caused this method to be called\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n    int choice = JOptionPane.showConfirmDialog(fileTree.getRootPane(),\n            \"Are you sure you want to delete '\" + fileTreeNode.file.getName()+\"'?\",\n            \"Confirm delete\",\n            JOptionPane.YES_NO_OPTION,\n            JOptionPane.QUESTION_MESSAGE);\n    if (choice == 1)\n        return; // they selected no\n    \n    boolean success = false;\n    if (fileTreeNode.file.isDirectory())\n        success = deleteDirectory(fileTreeNode.file);\n    else\n        success = fileTreeNode.file.delete();\n    \n    if (success)\n    {\n        fileTree.getFileTreeModel().removeNodeFromParent(\n                (DefaultMutableTreeNode)treePath.getLastPathComponent());\n    }\n        \n}", "path": "src\\com\\arashpayan\\filetree\\FileTreeListener.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * deletes a directory and its content\n * @param dir The directory to delete\n * @return true on success, false otherwise\n */\n", "func_signal": "private boolean deleteDirectory(File dir)", "code": "{\n    if (dir == null || !dir.exists() || !dir.isDirectory())\n        return false;\n    \n    boolean success = true;\n    File [] list = dir.listFiles();\n    for (File file:list)\n    {\n        if (file.isDirectory())\n        {\n            if (!deleteDirectory(file))\n                success = false;\n        }\n        else\n        {\n            if (!file.delete())\n                success = false;\n        }\n    }\n    if (!dir.delete())  // finally delete the actual directory\n        success = false;\n    \n    return success;\n}", "path": "src\\com\\arashpayan\\filetree\\FileTreeListener.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    JFrame jframe = new JFrame();\n    jframe.addWindowListener(new WindowAdapter() {\n        public void windowClosing(WindowEvent e) {\n            System.exit(0);\n        }\n    });\n    Container container = jframe.getContentPane();\n    container.setLayout(new BorderLayout());\n    FileTree fileTree = new FileTree();\n    fileTree.setShowHiddenFiles(false);\n    fileTree.setDeleteEnabled(true);\n    JScrollPane scrollPane = new JScrollPane(fileTree);\n    container.add(scrollPane, BorderLayout.CENTER);\n    jframe.setSize(400, 500);\n    jframe.setLocationByPlatform(true);\n    jframe.setVisible(true);\n}", "path": "src\\com\\arashpayan\\filetree\\Main.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * sets up the listeners for the tree\n */\n", "func_signal": "private void initListeners()", "code": "{\n    addTreeExpansionListener(new TreeExpansionListener() {\n        public void treeCollapsed(TreeExpansionEvent event) {\n        }\n        public void treeExpanded(TreeExpansionEvent event) {\n            TreePath path = event.getPath();\n            DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) path.getLastPathComponent();\n            treeNode.removeAllChildren();\n            populateSubTree(treeNode);\n            fileTreeModel.nodeStructureChanged(treeNode);\n        }\n    });\n    \n    FileTreeListener ftl = new FileTreeListener(this);\n    addMouseListener(ftl);\n}", "path": "src\\com\\arashpayan\\filetree\\FileTree.java", "repo_name": "arashpayan/FileTree", "stars": 5, "license": "lgpl-3.0", "language": "java", "size": 104}
{"docstring": "/**\n * Create a new distributed lookup service using the license key\n *\n * @param options  Resevered for future use\n * @param licenseKey license key provided by Maxmind to access distributed service\n */\n", "func_signal": "public LookupService(int options,String licenseKey) throws IOException", "code": "{\n    this.licenseKey = licenseKey;\n    dnsService = 1;\n    init();\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n* Returns the country the IP address is in.\n*\n* @param ipAddress the IP address in long format.\n* @return the country the IP address is from.\n*/\n", "func_signal": "public Country getCountry(long ipAddress)", "code": "{\n   if (file == null && (dboptions & GEOIP_MEMORY_CACHE) == 0) {\n       throw new IllegalStateException(\"Database has been closed.\");\n   }\n   int ret = seekCountry(ipAddress) - COUNTRY_BEGIN;\n   if (ret == 0) {\n       return UNKNOWN_COUNTRY;\n   }\n   else {\n       return new Country(countryCode[ret], countryName[ret]);\n   }\n    }", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n * Returns information about the database.\n *\n * @return database info.\n */\n", "func_signal": "public synchronized DatabaseInfo getDatabaseInfo()", "code": "{\n    if (databaseInfo != null) {\n        return databaseInfo;\n    }\n    try {\n        _check_mtime();\n        boolean hasStructureInfo = false;\n        byte [] delim = new byte[3];\n        // Advance to part of file where database info is stored.\n        file.seek(file.length() - 3);\n        for (int i=0; i<STRUCTURE_INFO_MAX_SIZE; i++) {\n            int read = file.read( delim );\n            if( read==3 && (delim[0]&0xFF)==255 && (delim[1]&0xFF) == 255 && (delim[2]&0xFF)==255 ){\n                    hasStructureInfo = true;\n                    break;\n            }\n            file.seek(file.getFilePointer() - 4);\n\n        }\n        if (hasStructureInfo) {\n                file.seek(file.getFilePointer() - 6);\n        }\n        else {\n            // No structure info, must be pre Sep 2002 database, go back to end.\n            file.seek(file.length() - 3);\n        }\n        // Find the database info string.\n        for (int i=0; i<DATABASE_INFO_MAX_SIZE; i++) {\n            file.readFully(delim);\n                if (delim[0]==0 && delim[1]==0 && delim[2]==0) {\n                    byte[] dbInfo = new byte[i];\n                file.readFully(dbInfo);\n                    // Create the database info object using the string.\n                    this.databaseInfo = new DatabaseInfo(new String(dbInfo));\n                    return databaseInfo;\n                }\n                file.seek(file.getFilePointer() -4);\n            }\n        }\n    catch (Exception e) {\n        e.printStackTrace();\n    }\n    return new DatabaseInfo(\"\");\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "// GeoIP Organization and ISP Edition methods\n", "func_signal": "public synchronized String getOrg(long ipnum)", "code": "{\n    int seek_org;\n    int record_pointer;\n    int str_length = 0;\n    byte [] buf = new byte[MAX_ORG_RECORD_LENGTH];\n    String org_buf;\n\n    try {\n        seek_org = seekCountry(ipnum);\n        if (seek_org == databaseSegments[0]) {\n\t\treturn null;\n        }\n\n        record_pointer = seek_org + (2 * recordLength - 1) * databaseSegments[0];\n        if ((dboptions & GEOIP_MEMORY_CACHE) == 1) {\n            //read from memory\n\t\tSystem.arraycopy(dbbuffer, record_pointer, buf, 0, Math.min(dbbuffer.length - record_pointer, MAX_ORG_RECORD_LENGTH));\n        } else {\n\t\t//read from disk\n            file.seek(record_pointer);\n            file.readFully(buf);\n        }\n        while (buf[str_length] != '\\0') {\n\t\tstr_length++;\n        }\n        org_buf = new String(buf, 0, str_length, \"ISO-8859-1\");\n        return org_buf;\n    }\n    catch (IOException e) {\n        System.out.println(\"IO Exception\");\n        return null;\n    }\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n * Finds the country index value given an IP address.\n *\n * @param ipAddress the ip address to find in long format.\n * @return the country index.\n */\n", "func_signal": "private synchronized int seekCountry(long ipAddress)", "code": "{\n\tbyte [] buf = new byte[2 * MAX_RECORD_LENGTH];\n\tint [] x = new int[2];\n    int offset = 0;\n    _check_mtime();\n    for (int depth = 31; depth >= 0; depth--) {\n        if ((dboptions & GEOIP_MEMORY_CACHE) == 1) {\n\t\t//read from memory\n            for (int i = 0;i < 2 * MAX_RECORD_LENGTH;i++) {\n\t\t    buf[i] = dbbuffer[(2 * recordLength * offset)+i];\n\t\t}\n        } else if ((dboptions & GEOIP_INDEX_CACHE) != 0) {\n            //read from index cache\n            for (int i = 0;i < 2 * MAX_RECORD_LENGTH;i++) {\n\t\t    buf[i] = index_cache[(2 * recordLength * offset)+i];\n\t\t}            \n        } else {\n\t\t//read from disk \n\t\ttry {\n                file.seek(2 * recordLength * offset);\n                file.readFully(buf);\n            }\n            catch (IOException e) {\n                System.out.println(\"IO Exception\");\n            }\n        }\n        for (int i = 0; i<2; i++) {\n            x[i] = 0;\n            for (int j = 0; j<recordLength; j++) {\n                int y = buf[i*recordLength+j];\n                if (y < 0) {\n                    y+= 256;\n                }\n                x[i] += (y << (j * 8));\n            }\n        }\n\n        if ((ipAddress & (1 << depth)) > 0) {\n            if (x[1] >= databaseSegments[0]) {\n                last_netmask = 32 - depth;\n                return x[1];\n            }\n            offset = x[1];\n        }\n        else {\n            if (x[0] >= databaseSegments[0]) {\n                last_netmask = 32 - depth;\n                return x[0];\n            }\n            offset = x[0];\n\t    }\n\t}\n\n    // shouldn't reach here\n    System.err.println(\"Error seeking country while seeking \" + ipAddress);\n    return 0;\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n * Returns the date of the database.\n *\n * @return the date of the database.\n */\n", "func_signal": "public Date getDate()", "code": "{\n    for (int i=0; i<info.length()-9; i++) {\n        if (Character.isWhitespace(info.charAt(i))) {\n            String dateString = info.substring(i+1, i+9);\n            try {\n                synchronized (formatter) {\n                    return formatter.parse(dateString);\n                }\n            }\n            catch (ParseException pe) {  }\n            break;\n        }\n    }\n    return null;\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\DatabaseInfo.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n * Create a new lookup service using the specified database file.\n *\n * @param databaseFile the database file.\n * @throws java.io.IOException if an error occured creating the lookup service\n *      from the database file.\n */\n", "func_signal": "public LookupService(File databaseFile) throws IOException", "code": "{\n    this.databaseFile = databaseFile;\n    this.file = new RandomAccessFile(databaseFile, \"r\");\n    init();\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n * Create a new distributed lookup service using the license key\n *\n * @param databaseFile the database file.\n * @param licenseKey license key provided by Maxmind to access distributed service\n */\n", "func_signal": "public LookupService(File databaseFile,String licenseKey) throws IOException", "code": "{\n    this(databaseFile);\n    this.licenseKey = licenseKey;\n    dnsService = 1;\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n * Reads meta-data from the database file.\n *\n * @throws java.io.IOException if an error occurs reading from the database file.\n */\n", "func_signal": "private void init() throws IOException", "code": "{\n    int i, j;\n    byte [] delim = new byte[3];\n    byte [] buf = new byte[SEGMENT_RECORD_LENGTH];\n\n\tif (file == null) {\n      return;\n\t}\n\tif ((dboptions & GEOIP_CHECK_CACHE) != 0) {\n        mtime = databaseFile.lastModified();\n\t}\n\tfile.seek(file.length() - 3);\n    for (i = 0; i < STRUCTURE_INFO_MAX_SIZE; i++) {\n        file.readFully(delim);\n        if (delim[0] == -1 && delim[1] == -1 && delim[2] == -1) {\n            databaseType = file.readByte();\n            if (databaseType >= 106) {\n                // Backward compatibility with databases from April 2003 and earlier\n                databaseType -= 105;\n            }\n            // Determine the database type.\n            if (databaseType == DatabaseInfo.REGION_EDITION_REV0) {\n                databaseSegments = new int[1];\n                databaseSegments[0] = STATE_BEGIN_REV0;\n                recordLength = STANDARD_RECORD_LENGTH;\n            }else if (databaseType == DatabaseInfo.REGION_EDITION_REV1){\n                databaseSegments = new int[1];\n                databaseSegments[0] = STATE_BEGIN_REV1;\n                recordLength = STANDARD_RECORD_LENGTH;\n\t\t}\n            else if (databaseType == DatabaseInfo.CITY_EDITION_REV0 ||\n\t\t\t databaseType == DatabaseInfo.CITY_EDITION_REV1 ||\n\t\t\t databaseType == DatabaseInfo.ORG_EDITION ||\n\t\t\t databaseType == DatabaseInfo.ISP_EDITION ||\n\t\t\t databaseType == DatabaseInfo.ASNUM_EDITION) {\n\t\t\tdatabaseSegments = new int[1];\n\t\t\tdatabaseSegments[0] = 0;\n\t\t\tif (databaseType == DatabaseInfo.CITY_EDITION_REV0 ||\n\t\t\t    databaseType == DatabaseInfo.CITY_EDITION_REV1 ||\n\t\t\t    databaseType == DatabaseInfo.ASNUM_EDITION) {\n\t\t\t    recordLength = STANDARD_RECORD_LENGTH;\n\t\t\t}\n\t\t\telse {\n\t\t\t    recordLength = ORG_RECORD_LENGTH;\n\t\t\t}\n\t\t\tfile.readFully(buf);\n\t\t\tfor (j = 0; j < SEGMENT_RECORD_LENGTH; j++) {\n\t\t\t    databaseSegments[0] += (unsignedByteToInt(buf[j]) << (j * 8));\n\t\t\t}\n\t\t    }\n            break;\n        }\n        else {\n            file.seek(file.getFilePointer() - 4);\n        }\n    }\n    if ((databaseType == DatabaseInfo.COUNTRY_EDITION) ||\n        (databaseType == DatabaseInfo.COUNTRY_EDITION_V6) ||\n\t    (databaseType == DatabaseInfo.PROXY_EDITION) ||\n\t    (databaseType == DatabaseInfo.NETSPEED_EDITION)) {\n        databaseSegments = new int[1];\n        databaseSegments[0] = COUNTRY_BEGIN;\n        recordLength = STANDARD_RECORD_LENGTH;\n    }\n    if ((dboptions & GEOIP_MEMORY_CACHE) == 1) {\n\t    int l = (int) file.length();\n\t    dbbuffer = new byte[l];\n\t    file.seek(0);\n\t    file.readFully(dbbuffer,0,l);\n\t    databaseInfo = this.getDatabaseInfo();\n\t    file.close();\n\t}\n    if ((dboptions & GEOIP_INDEX_CACHE) != 0) {\n      int l = databaseSegments[0] * recordLength * 2;\n      index_cache = new byte[l];\n      if (index_cache != null){\n        file.seek(0);\n        file.readFully(index_cache,0,l);     \n      }          \n    } else {\n      index_cache = null;\n    }\n }", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n * Creates a new Country.\n *\n * @param code the country code.\n * @param name the country name.\n */\n", "func_signal": "public Country(String code, String name)", "code": "{\n    this.code = code;\n    this.name = name;\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\Country.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n * Create a new lookup service using the specified database file.\n *\n * @param databaseFile the database file.\n * @param options database flags to use when opening the database\n * GEOIP_STANDARD read database from disk\n * GEOIP_MEMORY_CACHE cache the database in RAM and read it from RAM\n * @throws java.io.IOException if an error occured creating the lookup service\n *      from the database file.\n */\n", "func_signal": "public LookupService(File databaseFile, int options) throws IOException", "code": "{\n    this.databaseFile = databaseFile;\n\tthis.file = new RandomAccessFile(databaseFile, \"r\");\n\tdboptions = options;\n\tinit();\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n * Returns the country the IP address is in.\n *\n * @param ipAddress String version of an IPv6 address, i.e. \"::127.0.0.1\"\n * @return the country the IP address is from.\n */\n", "func_signal": "public Country getCountryV6(String ipAddress)", "code": "{\n\tInetAddress addr;\n\ttry {\n\t    addr = Inet6Address.getByName(ipAddress);\n\t}\n\tcatch (UnknownHostException e) {\n        return UNKNOWN_COUNTRY;\n\t}\n\treturn getCountryV6(addr);\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "// for GeoIP City only\n", "func_signal": "public Location getLocation(String str)", "code": "{\n    if (dnsService == 0) {\n        InetAddress addr;\n        try {\n            addr = InetAddress.getByName(str);\n        }\n        catch (UnknownHostException e) {\n            return null;\n        }\n\n        return getLocation(addr);\n    } else {\n        String str2 = getDnsAttributes(str);\n \t    return getLocationwithdnsservice(str2);\n\t    // TODO if DNS is not available, go to local file as backup\n\t}\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/////city test\n", "func_signal": "@Test\npublic void testCityXml() throws IOException", "code": "{\n    Response response = get(\"/cities/212.101.97.206.xml\");\n    assertEquals(200, response.status);\n    assertEquals(\"OK\", response.message);\n    assertEquals(\"application/xml\", response.contentType);\n    assertTrue(\"X-Server is present\", response.headers.get(\"X-Server\").size() > 0);\n    assertTrue(\"Contains </city> end tag\", response.body.contains(\"</city>\"));\n}", "path": "src\\test\\java\\ign\\geoip\\integration\\GeoIPApiIntegrationTest.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n * Returns the long version of an IP address given an InetAddress object.\n *\n * @param address the InetAddress.\n * @return the long form of the IP address.\n */\n", "func_signal": "private static long bytesToLong(byte [] address)", "code": "{\n    long ipnum = 0;\n    for (int i = 0; i < 4; ++i) {\n        long y = address[i];\n        if (y < 0) {\n            y+= 256;\n        }\n        ipnum += y << ((3-i)*8);\n    }\n    return ipnum;\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n * Create a new distributed lookup service using the license key\n *\n * @param databaseFile String representation of the database file.\n * @param licenseKey license key provided by Maxmind to access distributed service\n */\n", "func_signal": "public LookupService(String databaseFile,String licenseKey) throws IOException", "code": "{\n    this(new File(databaseFile));\n    this.licenseKey = licenseKey;\n    dnsService = 1;\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n * Closes the lookup service.\n */\n", "func_signal": "public void close()", "code": "{\n\ttry {\n\t    if (file != null){\n\t\tfile.close();\n\t    }\n        file = null;\n    }\n    catch (Exception e) { }\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n * Finds the country index value given an IPv6 address.\n *\n * @param addr the ip address to find in long format.\n * @return the country index.\n */\n", "func_signal": "private synchronized int seekCountryV6(InetAddress addr)", "code": "{\n    byte [] v6vec = addr.getAddress();\n\tbyte [] buf = new byte[2 * MAX_RECORD_LENGTH];\n\tint [] x = new int[2];\n    int offset = 0;\n    _check_mtime();\n    for (int depth = 127; depth >= 0; depth--) {\n        if ((dboptions & GEOIP_MEMORY_CACHE) == 1) {\n\t\t//read from memory\n            for (int i = 0;i < 2 * MAX_RECORD_LENGTH;i++) {\n\t\t    buf[i] = dbbuffer[(2 * recordLength * offset)+i];\n\t\t}\n        } else if ((dboptions & GEOIP_INDEX_CACHE) != 0) {\n            //read from index cache\n            for (int i = 0;i < 2 * MAX_RECORD_LENGTH;i++) {\n\t\t    buf[i] = index_cache[(2 * recordLength * offset)+i];\n\t\t}            \n        } else {\n\t\t//read from disk \n\t\ttry {\n                file.seek(2 * recordLength * offset);\n                file.readFully(buf);\n            }\n            catch (IOException e) {\n                System.out.println(\"IO Exception\");\n            }\n        }\n        for (int i = 0; i<2; i++) {\n            x[i] = 0;\n            for (int j = 0; j<recordLength; j++) {\n                int y = buf[i*recordLength+j];\n                if (y < 0) {\n                    y+= 256;\n                }\n                x[i] += (y << (j * 8));\n            }\n        }\n\n        int bnum = 127 - depth;\n        int idx = bnum >> 3;\n        int b_mask = 1 << ( bnum & 7 ^ 7 );\n        if ((v6vec[idx] & b_mask) > 0) {\n            if (x[1] >= databaseSegments[0]) {\n                last_netmask = 128 - depth;\n                return x[1];\n            }\n            offset = x[1];\n        }\n        else {\n            if (x[0] >= databaseSegments[0]) {\n                last_netmask = 128 - depth;\n                return x[0];\n            }\n            offset = x[0];\n\t    }\n\t}\n\n    // shouldn't reach here\n    System.err.println(\"Error seeking country while seeking \" + addr.getHostAddress() );\n    return 0;\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n * Returns the country the IP address is in.\n *\n * @param ipAddress String version of an IP address, i.e. \"127.0.0.1\"\n * @return the country the IP address is from.\n */\n", "func_signal": "public Country getCountry(String ipAddress)", "code": "{\n\tInetAddress addr;\n\ttry {\n\t    addr = InetAddress.getByName(ipAddress);\n\t}\n\tcatch (UnknownHostException e) {\n        return UNKNOWN_COUNTRY;\n\t}\n\treturn getCountry(bytesToLong(addr.getAddress()));\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n * Returns the country the IP address is in.\n *\n * @param addr the IP address as Inet6Address.\n * @return the country the IP address is from.\n */\n", "func_signal": "public Country getCountryV6(InetAddress addr)", "code": "{\n    if (file == null && (dboptions & GEOIP_MEMORY_CACHE) == 0) {\n        throw new IllegalStateException(\"Database has been closed.\");\n    }\n    int ret = seekCountryV6(addr) - COUNTRY_BEGIN;\n    if (ret == 0) {\n        return UNKNOWN_COUNTRY;\n    }\n    else {\n        return new Country(countryCode[ret], countryName[ret]);\n    }\n}", "path": "src\\main\\java\\com\\maxmind\\geoip\\LookupService.java", "repo_name": "cpatni/geoip-rest", "stars": 4, "license": "lgpl-2.1", "language": "java", "size": 361}
{"docstring": "/**\n * Strips the directory from a file path (if any) using the specified\n * character as a separator. If an empty path is supplied then an empty is\n * returned.\n * \n * @param path path\n * @param separator separator\n * @return path\n */\n", "func_signal": "public static String basename(String path, char separator)", "code": "{\n    if (path.equals(\"\")) {\n        return path;\n    }\n    while (path.endsWith(String.valueOf(separator))) {\n        path = path.substring(0, path.length() - 1);\n    }\n    int idx = path.lastIndexOf(separator);\n    return idx == -1 ? path : path.substring(idx + 1);\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * Strip all leading slashes\n * \n * @param path\n * @return new path\n */\n", "func_signal": "public static String stripLeadingSlash(String path)", "code": "{\n    while (path != null && path.startsWith(\"/\")) {\n        path = path.substring(1);\n    }\n    return path;\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * Concatent two paths\n * \n * @param original original path\n * @param append path to append\n * @return new path\n */\n", "func_signal": "public static String concatenatePaths(String original, String append)", "code": "{\n    if (append != null) {\n        if (original.endsWith(\"/\")) {\n            original = original.concat(stripLeadingSlash(append));\n        } else {\n            if (append.startsWith(\"/\")) {\n                original = original.concat(append);\n            } else {\n                original = original.concat(\"/\".concat(append));\n            }\n        }\n    }\n    return original;\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * Strips any trailing slashes then returns anything up to last slash (i.e.\n * the filename part is stripped leave the directory name). If the path is\n * already /, <code>null</code> will be returned.\n * \n * @param path path\n * @return dirname\n */\n", "func_signal": "public static String dirname(String path)", "code": "{\n    String s = stripTrailingSlash(path);\n    if (s.equals(\"\")) {\n        return null;\n    }\n    return s.substring(0, s.lastIndexOf(\"/\"));\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * Encode  a path suitable for use in a URI.\n * \n * @param path path\n * @param encodeSlash encode forward slashes (/)\n * @return encoded path\n */\n", "func_signal": "public static String encodePath(String path, boolean encodeSlash, String charset)", "code": "{\n    /* Encode the string */\n    StringBuffer buffer = new StringBuffer();\n    byte encoded[];\n    try {\n        if(charset==null)\n            encoded = path.getBytes();\n        else\n            encoded = path.getBytes(charset);\n        for (int x = 0; x < encoded.length; x++) {\n            if (((int) encoded[x] == '%' && encodeSlash) || ACCEPTABLE.indexOf((int) encoded[x]) < 0) {\n                buffer.append('%');\n                buffer.append(DAVUtilities.toHexString(encoded[x]));\n                continue;\n            }\n            buffer.append((char) encoded[x]);\n        }\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n        return path;\n    }\n\n    return buffer.toString();\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * Get the parent path or <code>null</code> if at the root\n * \n * @param path\n * @return parent path\n */\n", "func_signal": "public static String getParentPath(String path)", "code": "{\n    path = stripTrailingSlash(path);\n    String parent = null;\n    if (!path.equals(\"\")) {\n        int idx = path.lastIndexOf(\"/\");\n        if (idx == -1) {\n            parent = \"/\";\n        } else {\n            parent = path.substring(0, idx + 1);\n        }\n    }\n    return parent;\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * <p>\n * Return the HEX representation of a char.\n * </p>\n * \n * @param number the char to convert in a HEX {@link String}.\n * @return a <b>non-null</b> 4-characters {@link String} instance.\n */\n", "func_signal": "public static String toHexString(char number)", "code": "{\n    char output[] = new char[4];\n    output[0] = DAVUtilities.toHexDigit((int) (number >> 12));\n    output[1] = DAVUtilities.toHexDigit((int) (number >> 8));\n    output[2] = DAVUtilities.toHexDigit((int) (number >> 4));\n    output[3] = DAVUtilities.toHexDigit((int) (number));\n    return new String(output);\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * <p>\n * Return the HEX representation of a long integer.\n * </p>\n * \n * @param number the long to convert in a HEX {@link String}.\n * @return a <b>non-null</b> 16-characters {@link String} instance.\n */\n", "func_signal": "public static String toHexString(long number)", "code": "{\n    char output[] = new char[16];\n    output[0] = DAVUtilities.toHexDigit((int) (number >> 60));\n    output[1] = DAVUtilities.toHexDigit((int) (number >> 56));\n    output[2] = DAVUtilities.toHexDigit((int) (number >> 52));\n    output[3] = DAVUtilities.toHexDigit((int) (number >> 48));\n    output[4] = DAVUtilities.toHexDigit((int) (number >> 44));\n    output[5] = DAVUtilities.toHexDigit((int) (number >> 40));\n    output[6] = DAVUtilities.toHexDigit((int) (number >> 36));\n    output[7] = DAVUtilities.toHexDigit((int) (number >> 32));\n    output[8] = DAVUtilities.toHexDigit((int) (number >> 28));\n    output[9] = DAVUtilities.toHexDigit((int) (number >> 24));\n    output[10] = DAVUtilities.toHexDigit((int) (number >> 20));\n    output[11] = DAVUtilities.toHexDigit((int) (number >> 16));\n    output[12] = DAVUtilities.toHexDigit((int) (number >> 12));\n    output[13] = DAVUtilities.toHexDigit((int) (number >> 8));\n    output[14] = DAVUtilities.toHexDigit((int) (number >> 4));\n    output[15] = DAVUtilities.toHexDigit((int) (number));\n    return new String(output);\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * Process a URI for replacements and encode the result correctly  \n * \n * @param uri\n * @param session session info to use for replacements\n * @return processed uri\n * @throws MalformedURIException\n */\n", "func_signal": "public static URI processAndEncodeURI(String uri, SessionInfo session, String charset) throws MalformedURIException", "code": "{\n    // TODO We have problems with passwords containing @ characters here\n    String path = session == null ? uri : SessionInfoReplacer.replace(session, uri);\n    URI nuri = new URI(path);\n    if(nuri.getUserinfo() != null) {\n        nuri.setUserinfo(encodeURIUserInfo(nuri.getUserinfo()));\n    }\n    if(nuri.getPath() != null && !nuri.getPath().equals(\"\")) {\n        nuri.setPath(encodePath(nuri.getPath(), charset));\n    }\n    return nuri;\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * <p>\n * Return the HEX representation of an array of bytes.\n * </p>\n * \n * @param buffer the array of bytes to convert in a HEX {@link String}.\n * @return a <b>non-null</b> {@link String} instance.\n */\n", "func_signal": "public static String toHexString(byte buffer[])", "code": "{\n    char output[] = new char[buffer.length * 2];\n    int position = 0;\n    for (int x = 0; x < buffer.length; x++) {\n        output[position++] = DAVUtilities.toHexDigit(buffer[x] >> 4);\n        output[position++] = DAVUtilities.toHexDigit(buffer[x]);\n    }\n    return new String(output);\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * <p>\n * Return the HEX representation of an integer.\n * </p>\n * \n * @param number the int to convert in a HEX {@link String}.\n * @return a <b>non-null</b> 8-characters {@link String} instance.\n */\n", "func_signal": "public static String toHexString(int number)", "code": "{\n    char output[] = new char[8];\n    output[0] = DAVUtilities.toHexDigit((int) (number >> 28));\n    output[1] = DAVUtilities.toHexDigit((int) (number >> 24));\n    output[2] = DAVUtilities.toHexDigit((int) (number >> 20));\n    output[3] = DAVUtilities.toHexDigit((int) (number >> 16));\n    output[4] = DAVUtilities.toHexDigit((int) (number >> 12));\n    output[5] = DAVUtilities.toHexDigit((int) (number >> 8));\n    output[6] = DAVUtilities.toHexDigit((int) (number >> 4));\n    output[7] = DAVUtilities.toHexDigit((int) (number));\n    return new String(output);\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * Get ETAG\n * \n * @param path\n * @param lastModified\n * @return ETAG\n */\n", "func_signal": "public static String getETAG(String path, Date lastModified)", "code": "{\n    StringBuffer etag = new StringBuffer();\n    etag.append('\"');\n\n    /* Append the MD5 hash of this resource name */\n    try {\n        MessageDigest digester = MessageDigest.getInstance(\"MD5\");\n        digester.reset();\n        digester.update(path.getBytes(\"UTF8\"));\n        etag.append(DAVUtilities.toHexString(digester.digest()));\n        etag.append('-');\n    } catch (Exception e) {\n        // If we can't get the MD5 HASH, let's ignore and hope...\n    }\n\n    /* Append the hashCode of this resource name */\n    etag.append(DAVUtilities.toHexString(path.hashCode()));\n\n    /* Append the last modification date if possible */\n    if (lastModified != null) {\n        etag.append('-');\n        etag.append(DAVUtilities.toHexString(lastModified.getTime()));\n    }\n\n    /* Close the ETag */\n    etag.append('\"');\n    return (etag.toString());\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * Encode the user info part of a URI\n * \n * @param uriUserInfo URI user info\n * @return encoded URI user info\n */\n", "func_signal": "public static String encodeURIUserInfo(String uriUserInfo)", "code": "{\n    int idx = uriUserInfo.indexOf(':');\n    if(idx != -1) {\n        return URLUTF8Encoder.encode(uriUserInfo.substring(0, idx), true) + \":\" + \n        URLUTF8Encoder.encode(uriUserInfo.substring(idx + 1), true);\n    }\n    return Util.urlEncode(uriUserInfo);\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * <p>\n * Return the HEX representation of a byte.\n * </p>\n * \n * @param number the byte to convert in a HEX {@link String}.\n * @return a <b>non-null</b> 2-characters {@link String} instance.\n */\n", "func_signal": "public static String toHexString(byte number)", "code": "{\n    char output[] = new char[2];\n    output[0] = DAVUtilities.toHexDigit((int) (number >> 4));\n    output[1] = DAVUtilities.toHexDigit((int) (number));\n    return new String(output);\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * <p>\n * Format an {@link Object} according to the HTTP/1.1 RFC.\n * </p>\n * \n * @param object the {@link Object} to format.\n * @return a {@link String} instance or <b>null</b> if the object was null.\n */\n", "func_signal": "public static String format(Object object)", "code": "{\n    if (object == null)\n        return null;\n    if (object instanceof String)\n        return ((String) object);\n    if (object instanceof Date) {\n        SimpleDateFormat formatter = new SimpleDateFormat(FORMAT_822, Locale.ENGLISH);\n        formatter.setTimeZone(TIMEZONE_822);\n        return formatter.format((Date) object);\n    }\n    return (object.toString());\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * <p>\n * Return the single digit character representing the HEX encoding of the\n * lower four bits of a given integer.\n * </p>\n * \n * @param number number to conver\n * @return hex character\n */\n", "func_signal": "private static char toHexDigit(int number)", "code": "{\n    switch (number & 0x0F) {\n        case 0x00:\n            return '0';\n        case 0x01:\n            return '1';\n        case 0x02:\n            return '2';\n        case 0x03:\n            return '3';\n        case 0x04:\n            return '4';\n        case 0x05:\n            return '5';\n        case 0x06:\n            return '6';\n        case 0x07:\n            return '7';\n        case 0x08:\n            return '8';\n        case 0x09:\n            return '9';\n        case 0x0A:\n            return 'A';\n        case 0x0B:\n            return 'B';\n        case 0x0C:\n            return 'C';\n        case 0x0D:\n            return 'D';\n        case 0x0E:\n            return 'E';\n        case 0x0F:\n            return 'F';\n    }\n    String message = \"Invalid HEX digit \" + Integer.toHexString(number);\n    throw new IllegalArgumentException(message);\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * String the user info section from a URI\n * @param uri\n * @return\n */\n", "func_signal": "public static String stripUserInfo(String uri)", "code": "{\n\t\n\tint idx1 = uri.indexOf(\"//\");\n\tint idx2 = uri.indexOf('@');\n\t\n\tif(idx1 > -1 && idx2 > -1 && idx1 < idx2) {\n\t\treturn uri.substring(0, idx1+2) + uri.substring(idx2);\n\t} else\n\t\treturn uri;\n\t\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * <p>\n * Return a {@link String} message given an HTTP status code.\n * </p>\n * \n * @param status status code\n * @return status strings\n */\n", "func_signal": "public static String getStatusMessage(int status)", "code": "{\n    switch (status) {\n        /* HTTP/1.1 RFC-2616 */\n        case 100:\n            return \"100 Continue\";\n        case 101:\n            return \"101 Switching Protocols\";\n        case 200:\n            return \"200 OK\";\n        case 201:\n            return \"201 Created\";\n        case 202:\n            return \"202 Accepted\";\n        case 203:\n            return \"203 Non-Authoritative Information\";\n        case 204:\n            return \"204 No Content\";\n        case 205:\n            return \"205 Reset Content\";\n        case 206:\n            return \"206 Partial Content\";\n        case 300:\n            return \"300 Multiple Choices\";\n        case 301:\n            return \"301 Moved Permanently\";\n        case 302:\n            return \"302 Found\";\n        case 303:\n            return \"303 See Other\";\n        case 304:\n            return \"304 Not Modified\";\n        case 305:\n            return \"305 Use Proxy\";\n        case 306:\n            return \"306 (Unused)\";\n        case 307:\n            return \"307 Temporary Redirect\";\n        case 400:\n            return \"400 Bad Request\";\n        case 401:\n            return \"401 Unauthorized\";\n        case 402:\n            return \"402 Payment Required\";\n        case 403:\n            return \"403 Forbidden\";\n        case 404:\n            return \"404 Not Found\";\n        case 405:\n            return \"405 Method Not Allowed\";\n        case 406:\n            return \"406 Not Acceptable\";\n        case 407:\n            return \"407 Proxy Authentication Required\";\n        case 408:\n            return \"408 Request Timeout\";\n        case 409:\n            return \"409 Conflict\";\n        case 410:\n            return \"410 Gone\";\n        case 411:\n            return \"411 Length Required\";\n        case 412:\n            return \"412 Precondition Failed\";\n        case 413:\n            return \"413 Request Entity Too Large\";\n        case 414:\n            return \"414 Request-URI Too Long\";\n        case 415:\n            return \"415 Unsupported Media Type\";\n        case 416:\n            return \"416 Requested Range Not Satisfiable\";\n        case 417:\n            return \"417 Expectation Failed\";\n        case 500:\n            return \"500 Internal Server Error\";\n        case 501:\n            return \"501 Not Implemented\";\n        case 502:\n            return \"502 Bad Gateway\";\n        case 503:\n            return \"503 Service Unavailable\";\n        case 504:\n            return \"504 Gateway Timeout\";\n        case 505:\n            return \"505 HTTP Version Not Supported\";\n\n            /* DAV/1.0 RFC-2518 */\n        case 102:\n            return \"102 Processing\";\n        case 207:\n            return \"207 Multi-Status\";\n        case 422:\n            return \"422 Unprocessable Entity\";\n        case 423:\n            return \"423 Locked\";\n        case 424:\n            return \"424 Failed Dependency\";\n        case 507:\n            return \"507 Insufficient Storage\";\n\n            /* Unknown */\n        default:\n            return null;\n    }\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * Strip the first element in a path\n * \n * @param path\n * @return new path\n */\n", "func_signal": "public static String stripFirstPath(String path)", "code": "{\n    if (path.length() < 1) {\n        return path;\n    }\n    int idx = path.indexOf('/', 1);\n    return idx == -1 ? path : path.substring(idx);\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * Strip all trailing slashes\n * \n * @param path\n * @return new path\n */\n", "func_signal": "public static String stripTrailingSlash(String path)", "code": "{\n    while (path.endsWith(\"/\")) {\n        path = path.substring(0, path.length() - 1);\n    }\n    return path;\n}", "path": "adito\\src\\com\\adito\\vfs\\webdav\\DAVUtilities.java", "repo_name": "yellowstonemay/adito-VDA", "stars": 4, "license": "None", "language": "java", "size": 16263}
{"docstring": "/**\n * SQS message to SI message transformation.\n * @param message source\n * @return the SI message\n */\n", "func_signal": "private Message<Object> handleReceivedMessage(final com.amazonaws.queue.doc._2009_02_01.Message message)", "code": "{\n\tMessage<Object> result;\n\tif (isExtractPayload()) {\n\t\ttry {\n\t\t\tresult = extractPayload(message);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new MessageTransformationException(\"Failed to convert payload of sqs message: \" + message, e);\n\t\t}\n\t}\n\telse {\n\t\tresult = new GenericMessage<Object>(message);\n\t}\n\tlog.debug(\"Received as: \" + result);\n\treturn result;\n}", "path": "org.springframework.integration.sqs\\src\\main\\java\\org\\springframework\\integration\\sqs\\SQSInboundGateway.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * Gets the value of the attribute property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the attribute property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getAttribute().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link Attribute }\n * \n * \n */\n", "func_signal": "public List<Attribute> getAttribute()", "code": "{\n    if (attribute == null) {\n        attribute = new ArrayList<Attribute>();\n    }\n    return this.attribute;\n}", "path": "org.springframework.integration.sqs\\src\\main\\java\\com\\amazonaws\\queue\\doc\\_2009_02_01\\ListQueues.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic boolean accept(Message<?> message)", "code": "{\n\tif (!(message.getPayload() instanceof IncomingDirectMessage)) {\n\t\treturn false;\n\t}\n\tIncomingDirectMessage payload = (IncomingDirectMessage) message.getPayload();\n\tIncomingDirectMessage persistedPayload = messageRepository.findIncomingMessage(payload\n\t\t\t.getMessageId());\n\tboolean result = persistedPayload == null;\n\tif (log.isDebugEnabled() && !result) {\n\t\tlog.debug(String.format(\"Rejecting message with twitterId %s!\", payload\n\t\t\t\t.getMessageId()));\n\t}\n\treturn result;\n}", "path": "mixed\\src\\main\\java\\org\\springframework\\integration\\ext\\samples\\twitter\\gateway\\DuplicateMessageFilterFactory.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * Sample EPL statement to fetch orderNumber and duration from ordering to\n * delivery with a subscriber attached who submits the result into spring\n * integration via gateway.\n * \n * @return statement\n */\n", "func_signal": "@Bean\npublic EPStatement getDurationSelectWithRegistredSubscriber()", "code": "{\n\tString expression = String\n\t\t\t.format(\n\t\t\t\t\t\"select cOrder.number as number, (current_timestamp() - cOrder.dateCreated) as duration from `%s`.win:time(30 min) as cOrder, \"\n\t\t\t\t\t\t\t+ \"%s.std:lastevent() as cDelivery where cDelivery.orderNumber = cOrder.number\",\n\t\t\t\t\tDrinkOrder.class.getName(), Delivery.class.getName());\n\n\tEPStatement statement = getEpService().getEPAdministrator().createEPL(expression);\n\tlog.debug(\"Addded Esper statement: \" + expression);\n\tstatement.setSubscriber(gateway);\n\treturn statement;\n}", "path": "mixed\\src\\main\\java\\org\\springframework\\integration\\ext\\samples\\cafe\\esper\\EsperStatementsInitialization.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * Gets the value of the queueUrl property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the queueUrl property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getQueueUrl().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link String }\n * \n * \n */\n", "func_signal": "public List<String> getQueueUrl()", "code": "{\n    if (queueUrl == null) {\n        queueUrl = new ArrayList<String>();\n    }\n    return this.queueUrl;\n}", "path": "org.springframework.integration.sqs\\src\\main\\java\\com\\amazonaws\\queue\\doc\\_2009_02_01\\ListQueuesResult.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public Object deserialize(final String payload) throws Exception", "code": "{\n\tbyte[] transformPayload = payload.getBytes(DEFAULT_ENCODING);\n\ttransformPayload = Base64.decodeBase64(transformPayload);\n\treturn transformPayload(transformPayload);\n}", "path": "org.springframework.integration.sqs\\src\\main\\java\\org\\springframework\\integration\\sqs\\SQSInboundGateway.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * Gets the value of the any property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the any property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getAny().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link Element }\n * {@link Object }\n * \n * \n */\n", "func_signal": "public List<Object> getAny()", "code": "{\n    if (any == null) {\n        any = new ArrayList<Object>();\n    }\n    return this.any;\n}", "path": "org.springframework.integration.sqs\\src\\main\\java\\com\\amazonaws\\queue\\doc\\_2009_02_01\\Error.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * @param message\n */\n", "func_signal": "public void sendMessage(Message<OutgoingMessage> message)", "code": "{\n\tlog.debug(\"sending message: \" + message);\n\ttry {\n\t\tOutgoingMessage payload = message.getPayload();\n\t\ttemplate.sendDirectMessage(payload.getRecipientIdentifier(), payload.getText());\n\t}\n\tcatch (Exception e) {\n\t\tthrow new MessageTransformationException(message,\n\t\t\t\t\"Failed to transform message/payload\", e);\n\t}\n}", "path": "mixed\\src\\main\\java\\org\\springframework\\integration\\ext\\samples\\twitter\\gateway\\DirectMessageOutboundGateway.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * Gets the value of the attribute property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the attribute property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getAttribute().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link Attribute }\n * \n * \n */\n", "func_signal": "public List<Attribute> getAttribute()", "code": "{\n    if (attribute == null) {\n        attribute = new ArrayList<Attribute>();\n    }\n    return this.attribute;\n}", "path": "org.springframework.integration.sqs\\src\\main\\java\\com\\amazonaws\\queue\\doc\\_2009_02_01\\ChangeMessageVisibility.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public Message<Object> receive()", "code": "{\n\tif (transaction\n\t\t\t&& (!TransactionSynchronizationManager.isActualTransactionActive() || TransactionSynchronizationManager\n\t\t\t\t\t.isCurrentTransactionReadOnly())) {\n\t\tthrow new IllegalStateException(\"An active non read only transaction is required!\");\n\t}\n\tString queueName = getQueueName();\n\tfinal com.amazonaws.queue.doc._2009_02_01.Message message = template.receive(queueName);\n\tlog.debug(\"Pulled message: \" + message);\n\tif (message == null) {\n\t\treturn null;\n\t}\n\tMessage<Object> result = handleReceivedMessage(message);\n\tpostReceive(queueName, message);\n\treturn result;\n}", "path": "org.springframework.integration.sqs\\src\\main\\java\\org\\springframework\\integration\\sqs\\SQSInboundGateway.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * Gets the value of the message property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the message property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getMessage().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link Message }\n * \n * \n */\n", "func_signal": "public List<Message> getMessage()", "code": "{\n    if (message == null) {\n        message = new ArrayList<Message>();\n    }\n    return this.message;\n}", "path": "org.springframework.integration.sqs\\src\\main\\java\\com\\amazonaws\\queue\\doc\\_2009_02_01\\ReceiveMessageResult.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected BeanDefinitionBuilder parseHandler(Element element, ParserContext context)", "code": "{\n\tBeanDefinitionBuilder builder = BeanDefinitionBuilder\n\t\t\t.genericBeanDefinition(OnlineMQOutboundGateway.class);\n\n\tString template = element.getAttribute(\"template\");\n\tString queueName = element.getAttribute(\"queueName\");\n\tif (!StringUtils.hasText(template) || !StringUtils.hasText(queueName)) {\n\t\tthrow new BeanCreationException(String.format(\n\t\t\t\t\"Failed to create Bean with template bean ref=%s and queueName=%s\", template,\n\t\t\t\tqueueName));\n\t}\n\n\tbuilder.addPropertyReference(\"template\", template);\n\tbuilder.addPropertyValue(\"queueName\", queueName);\n\tString extractPayloadValue = element.getAttribute(\"extract-payload\");\n\tif (StringUtils.hasText(extractPayloadValue)) {\n\t\tbuilder.addPropertyValue(\"extractPayload\", extractPayloadValue);\n\t}\n\treturn builder;\n\n}", "path": "mixed\\src\\main\\java\\org\\springframework\\integration\\ext\\samples\\onlinemq\\config\\OnlineMQOutboundGatewayParser.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * @param message\n * @return\n * @throws MessageHandlingException\n */\n", "func_signal": "public static MessageChannel fetchReplyChannel(Message<?> message,\n\t\tChannelResolver channelResolver)", "code": "{\n\t// copy/paste from MessageHandlerChain.ReplyForwardingMessageChannel\n\tObject replyChannelHeader = message.getHeaders().getReplyChannel();\n\tif (replyChannelHeader == null) {\n\t\tthrow new MessageHandlingException(message, \"no replyChannel header available\");\n\t}\n\tMessageChannel replyChannel = null;\n\tif (replyChannelHeader instanceof MessageChannel) {\n\t\treplyChannel = (MessageChannel) replyChannelHeader;\n\t}\n\telse if (replyChannelHeader instanceof String) {\n\t\tAssert.notNull(channelResolver, \"ChannelResolver is required\");\n\t\treplyChannel = channelResolver.resolveChannelName((String) replyChannelHeader);\n\t}\n\telse {\n\t\tthrow new MessageHandlingException(message, \"invalid replyChannel type [\"\n\t\t\t\t+ replyChannelHeader.getClass() + \"]\");\n\t}\n\treturn replyChannel;\n}", "path": "mixed\\src\\main\\java\\org\\springframework\\integration\\ext\\samples\\twitter\\util\\MessageChannelUtils.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * @param url\n */\n", "func_signal": "private SimpleGetRequest(String url)", "code": "{\n\tsuper();\n\ttry {\n\t\tthis.targetUrl = new URL(url);\n\t}\n\tcatch (MalformedURLException e) {\n\t\tthrow new IllegalArgumentException(\"Malformed URL: \" + url, e);\n\t}\n}", "path": "mixed\\src\\main\\java\\org\\springframework\\integration\\ext\\samples\\twitter\\gateway\\SimpleGetRequest.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected void callProcessManager()", "code": "{\n\tsuper.callProcessManager();\n\twaitForAllTasksToComplete();\n}", "path": "mixed\\src\\test\\java\\org\\springframework\\integration\\ext\\samples\\twitter\\processmanager\\AsyncProcessManagerTests.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * Gets the value of the attribute property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the attribute property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getAttribute().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link Attribute }\n * \n * \n */\n", "func_signal": "public List<Attribute> getAttribute()", "code": "{\n    if (attribute == null) {\n        attribute = new ArrayList<Attribute>();\n    }\n    return this.attribute;\n}", "path": "org.springframework.integration.sqs\\src\\main\\java\\com\\amazonaws\\queue\\doc\\_2009_02_01\\GetQueueAttributesResult.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * \n */\n", "func_signal": "private void waitForAllTasksToComplete()", "code": "{\n\t// wait until all executor threads are finished\n\tTaskExecutor taskExecutor = ((AsyncProcessManager) manager).getTaskExecutor();\n\tassertThat(taskExecutor, is(ThreadPoolTaskExecutor.class));\n\tThreadPoolTaskExecutor threadPoolTaskExecutor = (ThreadPoolTaskExecutor) taskExecutor;\n\ttry {\n\t\twhile (threadPoolTaskExecutor.getActiveCount() != 0) {\n\n\t\t\tThread.sleep(200);\n\t\t}\n\t\t// give the last thread time to compute\n\t\tThread.sleep(200);\n\t}\n\tcatch (InterruptedException e) {\n\t\tthrow new IllegalStateException(e);\n\t}\n}", "path": "mixed\\src\\test\\java\\org\\springframework\\integration\\ext\\samples\\twitter\\processmanager\\AsyncProcessManagerTests.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * Gets the value of the attributeName property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the attributeName property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getAttributeName().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link String }\n * \n * \n */\n", "func_signal": "public List<String> getAttributeName()", "code": "{\n    if (attributeName == null) {\n        attributeName = new ArrayList<String>();\n    }\n    return this.attributeName;\n}", "path": "org.springframework.integration.sqs\\src\\main\\java\\com\\amazonaws\\queue\\doc\\_2009_02_01\\ReceiveMessage.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * Gets the value of the attribute property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the attribute property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getAttribute().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link Attribute }\n * \n * \n */\n", "func_signal": "public List<Attribute> getAttribute()", "code": "{\n    if (attribute == null) {\n        attribute = new ArrayList<Attribute>();\n    }\n    return this.attribute;\n}", "path": "org.springframework.integration.sqs\\src\\main\\java\\com\\amazonaws\\queue\\doc\\_2009_02_01\\CreateQueue.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * @param recipientIdentifier\n * @param text\n */\n", "func_signal": "private OutgoingMessage(String recipientIdentifier, String text)", "code": "{\n\tsuper();\n\tthis.recipientIdentifier = recipientIdentifier;\n\tthis.text = text;\n}", "path": "mixed\\src\\main\\java\\org\\springframework\\integration\\ext\\samples\\twitter\\gateway\\OutgoingMessage.java", "repo_name": "alpe/spring-integration-sandbox", "stars": 5, "license": "None", "language": "java", "size": 2479}
{"docstring": "/**\n * Javadoc comment to be ignored.\n * \n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tint i = 7 + 8 * 9;\n\tif (!true) null else i = 2*(i); // missing semicolon after 'then' statement \n\tSystem.out.println(1);\n\t\n\tTest1a t = new Test1a();\n\tint a = t.m1(false);\n\tSystem.out.println(true);\n\t// System.out.println arg must be an integer, but this is probably \n\t// handled by the typechecker later\n// }", "path": "Test\\Files\\Parser\\Early\\Bad\\testcase03_04.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "// Pseudo-constructor for Test1b\n", "func_signal": "public Test1b init(int d, boolean e)", "code": "{\n\tTest1b temp = new Test1b();\n\t// temp.d = d; // not valid MiniJava\n\t// temp.e = e; // not valid MiniJava\n\tint wastedVar = 7 + 8 * 9 / 10;\n\tboolean wastedVar2 = true || false || true && false && !false == \n\t\t\t\t\t\t\t\t\t!true && 7 > 8 || 0 != 1000;\n\treturn temp;\n}", "path": "Test\\Files\\Parser\\Early\\Bad\\testcase03_04.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "//Near as I can tell this is valid minijava...\n", "func_signal": "public Evil Evil()", "code": "{\n\tEvil evil = new Evil();\n\treturn evil;//its funny how weird this word starts to look\n}", "path": "Test\\Files\\Parser\\FullParserTestCases\\Good\\FullTests\\testcase91-00.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "// boolean ntb ;\n //boolean cont ;\n //boolean found ;\n //int ifound ;\n  //  boolean is_root ;\n  //  int     nti ;\n  //  int key_aux ;\n// int auxkey1 ;\n// int auxkey2 ;\n", "func_signal": "public boolean Init(int v_key)", "code": "{\n\tkey = v_key ;\n\thas_left = false ;\n\thas_right = false ;\n\treturn true ;\n }", "path": "Test\\Files\\Parser\\MiniJava\\treevisitor.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "// Pseudo-constructor for Test1b\n", "func_signal": "public Test1b init(int d, boolean e)", "code": "{\n\tTest1b temp = new Test1b();\n\t// temp.d = d; // not valid MiniJava\n\t// temp.e = e; // not valid MiniJava\n\tint wastedVar = 7 + 8 * 9 / 10;\n\tboolean wastedVar2 = true || false || true && false && !false == \n\t\t\t\t\t!true && 7 > 8 || 0 != 1000;\n\treturn temp;\n}", "path": "Test\\Files\\Parser\\FullParserTestCases\\Good\\FullTests\\testcase03_01.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "//source of error\n", "func_signal": "public int setsms(boolean x)", "code": "{\n\t\tsms = x;\n\t\treturn 0;\n\t}", "path": "Test\\Files\\DeclTypeChecker\\FullTestCases\\FullTests\\testcase94-05.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "// Modeled after an exam question from CSSE 230\n", "func_signal": "public boolean swap(int a, int b)", "code": "{\n\tboolean ret = false; // originally had boolean ret; which is invalid MiniJava\n\tif (a == b)\n\t\tret = false;\n\telse {\n\t\tint temp = a;\n\t\ta = b;\n\t\tb = temp;\n\t\tret = true;\n\t}\t\t\n\treturn ret;\n}", "path": "Test\\Files\\Parser\\FullParserTestCases\\Good\\FullTests\\testcase03_03.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "//this is a class declaration.\n", "func_signal": "public static void main(String[] args)", "code": "{\n   \tint x = 5+3;\n   \tboolean x= 5-3;\n\t}", "path": "Test\\Files\\ExpressionTypeChecker\\Full\\FullTests\\testcase00_55.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "// no private methods, only public\n// \"String\" should be okay... treated as <ID>\n", "func_signal": "private int method(String s)", "code": "{\n\t// valid\n\tPoint p = new Point();\n\t// invalid -- constructors cannot have params\n\tPoint r2 = new Point(5,7);\n}", "path": "Test\\Files\\Parser\\FullParserTestCases\\Bad\\FullTests\\testcase00_15.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "// Assuming 32-bit signed (but positive) integers and we don't and the\n// uppermost bit.\n", "func_signal": "public int almostAnd(int lhs, int rhs)", "code": "{\n    int retval = 0;\n    boolean lhsOn = false;\n    boolean rhsOn = false;\n    \n    /* Bit 30 */\n    if (lhs - 1073741824 >= 0) {\n        lhs = lhs - 1073741824;\n        lhsOn = true;\n    } else\n        lhsOn = false;\n    \n    if (rhs - 1073741824 >= 0) {\n        rhs = rhs - 1073741824;\n        rhsOn = true;\n    } else\n        rhsOn = false;\n    \n    if (lhsOn && rhsOn)\n        retval = retval + 1073741824;\n    else\n        retval = retval + 0;\n    \n    /* Bit 29 */\n    if (lhs - 536870912 >= 0) {\n        lhs = lhs - 536870912;\n        lhsOn = true;\n    } else\n        lhsOn = false;\n    \n    if (rhs - 536870912 >= 0) {\n        rhs = rhs - 536870912;\n        rhsOn = true;\n    } else\n        rhsOn = false;\n    \n    if (lhsOn && rhsOn)\n        retval = retval + 536870912;\n    else\n        retval = retval + 0;\n    \n    /* Bit 28 */\n    if (lhs - 268435456 >= 0) {\n        lhs = lhs - 268435456;\n        lhsOn = true;\n    } else\n        lhsOn = false;\n    \n    if (rhs - 268435456 >= 0) {\n        rhs = rhs - 268435456;\n        rhsOn = true;\n    } else\n        rhsOn = false;\n    \n    if (lhsOn && rhsOn)\n        retval = retval + 268435456;\n    else\n        retval = retval + 0;\n    \n    /* Bit 27 */\n    if (lhs - 134217728 >= 0) {\n        lhs = lhs - 134217728;\n        lhsOn = true;\n    } else\n        lhsOn = false;\n    \n    if (rhs - 134217728 >= 0) {\n        rhs = rhs - 134217728;\n        rhsOn = true;\n    } else\n        rhsOn = false;\n    \n    if (lhsOn && rhsOn)\n        retval = retval + 134217728;\n    else\n        retval = retval + 0;\n    \n    /* Bit 26 */\n    if (lhs - 67108864 >= 0) {\n        lhs = lhs - 67108864;\n        lhsOn = true;\n    } else\n        lhsOn = false;\n    \n    if (rhs - 67108864 >= 0) {\n        rhs = rhs - 67108864;\n        rhsOn = true;\n    } else\n        rhsOn = false;\n    \n    if (lhsOn && rhsOn)\n        retval = retval + 67108864;\n    else\n        retval = retval + 0;\n    \n    /* Bit 25 */\n    if (lhs - 33554432 >= 0) {\n        lhs = lhs - 33554432;\n        lhsOn = true;\n    } else\n        lhsOn = false;\n    \n    if (rhs - 33554432 >= 0) {\n        rhs = rhs - 33554432;\n        rhsOn = true;\n    } else\n        rhsOn = false;\n    \n    if (lhsOn && rhsOn)\n        retval = retval + 33554432;\n    else\n        retval = retval + 0;\n    /* Well, we ran out of room, but we're pretty sure you get the idea.\n     * Just for completeness, here are the remaining decimal values:\n     * Bit 24: 16777216\n     * Bit 23:  8388608\n     * Bit 22:  4194304\n     * Bit 21:  2097152\n     * Bit 20:  1048576\n     * Bit 19:   524288\n     * Bit 18:   262144\n     * Bit 17:   131072\n     * Bit 16:    65536\n     * Bit 15:    32768\n     * Bit 14:    16384\n     * Bit 13:     8192\n     * Bit 12:     4096\n     * Bit 11:     2048\n     * Bit 10:     1024\n     * Bit 9:       512\n     * Bit 8:       256\n     * Bit 7:       128\n     * Bit 6:        64\n     * Bit 5:        32\n     * Bit 4:        16\n     * Bit 3:         8\n     * Bit 2:         4\n     * Bit 1:         2\n     * Bit 0:         1\n     *\n     * Obviously, bitwise or is just a copy and paste of this code with\n     * if (lshOn && rhsOn) changed to if (lshOn || rhsOn).\n     */\n     return retval;\n}", "path": "Test\\Files\\Parser\\FullParserTestCases\\Good\\FullTests\\testcase00_11.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "// can't have methods in <MainClassDecl>\n", "func_signal": "public int fib(int n)", "code": "{\n\t// one-armed if\n\tif (n == 0) return 1;\n\n\tif (n == 1) return 1;\n\telse{\n\t\treturn f(n-1) + f(n-2);\n\t}\n\n\t//return statements not as last line of method\n}", "path": "Test\\Files\\Parser\\FullParserTestCases\\Bad\\FullTests\\testcase00_15.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "// Pseudo-constructor for Test1b\n", "func_signal": "public Test1b init(int d, boolean e)", "code": "{\n\tTest1b temp = new Test1b();\n\t// temp.d = d; // not valid MiniJava\n\t// temp.e = e; // not valid MiniJava\n\tint wastedVar = 7 + 8 * 9 / 10;\n\tboolean wastedVar2 = true || false || true && false && !false == \n\t\t\t\t\t\t\t\t\t!true && 7 > 8 || 0 != 1000;\n\treturn temp;\n}", "path": "Test\\Files\\Parser\\FullParserTestCases\\Bad\\FullTests\\testcase03_04.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "/**\n * Javadoc comment to be ignored.\n * \n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tint i = 7 + 8 * 9;\n\tif (!true) null else i = 2*(i); // missing semicolon after 'then' statement \n\tSystem.out.println(1);\n\t\n\tTest1a t = new Test1a();\n\tint a = t.m1(false);\n\tSystem.out.println(true);\n\t// System.out.println arg must be an integer, but this is probably \n\t// handled by the typechecker later\n// }", "path": "Test\\Files\\Parser\\FullParserTestCases\\Bad\\FullTests\\testcase03_04.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "// ZOMG constructor WTF\n", "func_signal": "public Point(int length, int width)", "code": "{\n\t/* these are wrong -- \n\tthis.l does not match <<ID = Expr;>> as assignment <Stmt>\n\t*/\n\tthis.l = length;\n\tthis.w = width\n}", "path": "Test\\Files\\Parser\\FullParserTestCases\\Bad\\FullTests\\testcase00_15.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tString message = helloWorld; // Closest thing to a string that exists in the language\n\tSystem.out.println(0);\n}", "path": "Test\\Files\\Round1\\testcase83_01.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "// My own constructor contract\n", "func_signal": "public int initialize()", "code": "{\n\there = 0;\n\tnext = null;\n\treturn 1;\n}", "path": "Test\\Files\\CodeGen\\Full\\FullTests\\testcase00_20.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "// We're assuming 32-bit signed integers with no errors on an overflow\n", "func_signal": "public int complement(int val)", "code": "{\n    complementCount = complementCount + 1;\n    return 2147483647 - val;\n}", "path": "Test\\Files\\Parser\\FullParserTestCases\\Good\\FullTests\\testcase00_11.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "// If MiniJava does not support method overloading, delete the following\n// method\n", "func_signal": "public boolean complement(boolean val)", "code": "{\n    complementCount = complementCount + 1;\n    return !val;\n}", "path": "Test\\Files\\Parser\\FullParserTestCases\\Good\\FullTests\\testcase00_11.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "// email me if you want the original joke. I'm Sriram\n", "func_signal": "public static void main (String[ ] ID)", "code": "{ \n\tDude minister = new Minister();\n\tDude priest = new Priest();\n\tRabbi rabbi = new Rabbi();\n\n\tif (minister.walkOnWater(true))\n\t{\n\t\tint i = rabbi.astonish();\n\t}\n\telse {}\n\tif (priest.walkOnWater(true))\n\t{\n\t\tint i = rabbi.astonish();\n\t}\n\telse {}\n\tboolean b = rabbi.walkOnWater(false);\n\tint i = priest.speculate();\n}", "path": "Test\\Files\\CodeGen\\Full\\FullTests\\testcase97-02.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "/**\n * Javadoc comment to be ignored.\n * \n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t// TODO Auto-generated method stub (ignore this comment)\n\tint i = 7 + 8 * 9;\n\tif (!true) i = -i; else i = 2*(i); \n\tSystem.out.println(1);\n\t\n\tTest1a t = new Test1a();\n\tint a = t.m1();\n\tSystem.out.println(a);\n}", "path": "Test\\Files\\ExpressionTypeChecker\\Full\\FullTests\\testcase03_01.java", "repo_name": "chandlerkent/HKCD", "stars": 6, "license": "None", "language": "java", "size": 763}
{"docstring": "/**\n * Constructs a Line These objects are defined by their two end-points.\n * \n * @param color\n *            the color for this object\n * @param lineStyle\n *            the line style for this object\n * @param x1\n *            the virtual X coordinate of the first end-point\n * @param y1\n *            the virtual Y coordinate of the first end-point\n * @param x2\n *            the virtual X coordinate of the second end-point\n * @param y2\n *            the virtual Y coordinate of the second end-point\n */\n", "func_signal": "public LineFigure(Color foregroundColor, Color backgroundColor, int lineStyle, int x1, int y1, int x2, int y2)", "code": "{\n\tthis.foregroundColor = foregroundColor;\n\tthis.backgroundColor = backgroundColor;\n\tthis.lineStyle = lineStyle;\n\tthis.x1 = x1;\n\tthis.y1 = y1;\n\tthis.x2 = x2;\n\tthis.y2 = y2;\n}", "path": "org.eclipse.swt.examples\\src\\org\\eclipse\\swt\\examples\\paint\\LineFigure.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void start(BundleContext context) throws Exception", "code": "{\n\tsuper.start(context);\n\tplugin = this;\n}", "path": "org.eclipse.swtbot.eclipse.ui\\src\\org\\eclipse\\swtbot\\eclipse\\ui\\Activator.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void stop(BundleContext context) throws Exception", "code": "{\n\tplugin = null;\n\tsuper.stop(context);\n}", "path": "org.eclipse.swtbot.eclipse.ui\\src\\org\\eclipse\\swtbot\\eclipse\\ui\\Activator.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/*\n * {@inheritDoc}\n *\n * @see net.sf.swtbot.eclipse.gef.matchers.AbstractToolEntryMatcher#matches(org.eclipse.gef.palette.ToolEntry)\n */\n", "func_signal": "@Override\nprotected boolean matches(final ToolEntry toolEntry)", "code": "{\n\tfinal String label = toolEntry.getLabel();\n\tif (label == null) {\n\t\treturn false;\n\t}\n\tfinal Matcher matcher = pattern.matcher(label);\n\treturn matcher.matches();\n}", "path": "org.eclipse.swtbot.eclipse.gef.finder\\src\\org\\eclipse\\swtbot\\eclipse\\gef\\finder\\matchers\\ToolEntryLabelMatcher.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/**\n * Creates and installs pertinent EditPolicies.\n */\n", "func_signal": "protected void createEditPolicies()", "code": "{\n\tsuper.createEditPolicies();\n\tinstallEditPolicy(EditPolicy.CONTAINER_ROLE, new LogicContainerEditPolicy());\n\tinstallEditPolicy(EditPolicy.TREE_CONTAINER_ROLE, new LogicTreeContainerEditPolicy());\n\t//If this editpart is the contents of the viewer, then it is not deletable!\n\tif (getParent() instanceof RootEditPart)\n\t\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy());\n}", "path": "examples\\gef\\org.eclipse.gef.examples.logic\\src\\org\\eclipse\\gef\\examples\\logicdesigner\\edit\\LogicContainerTreeEditPart.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "// This is expected to be called from within the UI thread. If not it will throw\n// exceptions based on invalid thread access.\n", "func_signal": "private List<SWTBotViewMenu> getMenuItemsInternal(IContributionItem[] items, Matcher<?> matcher, boolean recursive)", "code": "{\n\tList<SWTBotViewMenu> l = new ArrayList<SWTBotViewMenu>();\n\n\tfor (int i = 0; i < items.length; i++) {\n\t\tIContributionItem item = items[i];\n\n\t\ttry {\n\t\t\tif ((item instanceof MenuManager) && recursive) {\n\t\t\t\t// Sub menus\n\t\t\t\tMenuManager menuManager = (MenuManager) item;\n\n\t\t\t\tl.addAll(getMenuItemsInternal(menuManager.getItems(), matcher, recursive));\n\t\t\t} else if (item instanceof ActionContributionItem) {\n\t\t\t\t// Menus\n\t\t\t\tActionContributionItem actionContribution = (ActionContributionItem) item;\n\n\t\t\t\tif (matcher.matches(actionContribution.getAction()))\n\t\t\t\t\tl.add(new SWTBotViewMenu(actionContribution));\n\t\t\t}\n\t\t} catch (WidgetNotFoundException e) {\n\t\t\tlog.warn(e);\n\t\t}\n\t}\n\n\treturn l;\n}", "path": "org.eclipse.swtbot.eclipse.finder\\src\\org\\eclipse\\swtbot\\eclipse\\finder\\finders\\ViewMenuFinder.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/**\n * Creates an instance of a LayoutExample embedded inside the supplied parent Composite.\n * \n * @param parent\n *            the container of the example\n */\n", "func_signal": "public LayoutExample(Composite parent)", "code": "{\n\ttabFolder = new TabFolder(parent, SWT.NONE);\n\tTab[] tabs = new Tab[] { new FillLayoutTab(this), new RowLayoutTab(this), new GridLayoutTab(this),\n\t\t\tnew FormLayoutTab(this), };\n\tfor (int i = 0; i < tabs.length; i++) {\n\t\tTabItem item = new TabItem(tabFolder, SWT.NONE);\n\t\titem.setText(tabs[i].getTabText());\n\t\titem.setControl(tabs[i].createTabFolderPage(tabFolder));\n\t}\n}", "path": "org.eclipse.swt.examples\\src\\org\\eclipse\\swt\\examples\\layoutexample\\LayoutExample.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/**\n * Gets a list of all menus within the view.\n *\n * @param view the view to probe for menus.\n * @param matcher the matcher that can match menus and menu items.\n * @param recursive if set to <code>true</code>, will find sub-menus as well.\n * @return The list of menus (IContributionItems) that match the matcher.\n * @since 2.0\n */\n", "func_signal": "public List<SWTBotViewMenu> findMenus(final IViewReference view, final Matcher<?> matcher, final boolean recursive)", "code": "{\n\treturn UIThreadRunnable.syncExec(new ListResult<SWTBotViewMenu>() {\n\n\t\tpublic List<SWTBotViewMenu> run() {\n\t\t\tViewPane viewPane = (ViewPane) ((WorkbenchPartReference) view).getPane();\n\t\t\tMenuManager mgr = viewPane.getMenuManager();\n\t\t\tList<SWTBotViewMenu> l = new ArrayList<SWTBotViewMenu>();\n\n\t\t\tl.addAll(getMenuItemsInternal(mgr.getItems(), matcher, recursive));\n\n\t\t\treturn l;\n\t\t}\n\t});\n}", "path": "org.eclipse.swtbot.eclipse.finder\\src\\org\\eclipse\\swtbot\\eclipse\\finder\\finders\\ViewMenuFinder.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/**\n * Nulls out any changes to this and its subclasses as\n * they are of fixed size.\n */\n", "func_signal": "public void setPropertyValue(Object id, Object value)", "code": "{\n\tif(ID_SIZE.equals(id)) \n\t\tsuper.setPropertyValue(id,new Dimension(getSize()));\n\telse\n\t\tsuper.setPropertyValue(id,value);\n}", "path": "examples\\gef\\org.eclipse.gef.examples.logic\\src\\org\\eclipse\\gef\\examples\\logicdesigner\\model\\SimpleOutput.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.eclipse.swt.examples.graphics.GraphicsTab#paint(org.eclipse.swt.graphics.GC, int, int)\n */\n", "func_signal": "public void paint(GC gc, int width, int height)", "code": "{\n\tif (!example.checkAdvancedGraphics())\n\t\treturn;\n\tDevice device = gc.getDevice();\n\n\tFont font = new Font(device, FontBounceTab.getPlatformFontFace(fontFace), fontSize, fontStyle);\n\tgc.setFont(font);\n\n\tPoint size = gc.stringExtent(text);\n\ttextWidth = size.x;\n\ttextHeight = size.y;\n\n\tPath path = new Path(device);\n\tpath.addString(text, x, y, font);\n\n\tgc.setForeground(device.getSystemColor(foreGrdColor));\n\tgc.setBackground(device.getSystemColor(fillColor));\n\n\tgc.fillPath(path);\n\tgc.drawPath(path);\n\tfont.dispose();\n\tpath.dispose();\n}", "path": "org.eclipse.swt.examples\\src\\org\\eclipse\\swt\\examples\\graphics\\FontBounceTab.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/**\n * Refreshes the visual properties of the TreeItem for this part.\n */\n", "func_signal": "protected void refreshVisuals()", "code": "{\n\tif (getWidget() instanceof Tree)\n\t\treturn;\n\tImage image = getLogicSubpart().getIcon();\n\tTreeItem item = (TreeItem)getWidget();\n\tif (image != null)\n\t\timage.setBackground(item.getParent().getBackground());\n\tsetWidgetImage(image);\n\tsetWidgetText(getLogicSubpart().toString());\n}", "path": "examples\\gef\\org.eclipse.gef.examples.logic\\src\\org\\eclipse\\gef\\examples\\logicdesigner\\edit\\LogicTreeEditPart.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/**\n * @see PasteTemplateAction#getPasteLocation(GraphicalEditPart)\n */\n", "func_signal": "protected Point getPasteLocation(GraphicalEditPart container)", "code": "{\n\tPoint result = new Point(10, 10);\n\tIFigure fig = container.getContentPane();\n\tresult.translate(fig.getClientArea(Rectangle.SINGLETON).getLocation());\n\tfig.translateToAbsolute(result);\n\treturn result;\n}", "path": "examples\\gef\\org.eclipse.gef.examples.logic\\src\\org\\eclipse\\gef\\examples\\logicdesigner\\actions\\LogicPasteTemplateAction.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "// FIXME: optimize the if() code block, use strategy or something else.\n", "func_signal": "protected boolean doMatch(Object obj)", "code": "{\n\ttry {\n\t\tboolean result = false;\n\t\tif (ignoreCase)\n\t\t\tresult = getText(obj).equalsIgnoreCase(text);\n\t\telse\n\t\t\tresult = getText(obj).equals(text);\n\t\treturn result;\n\t} catch (Exception e) {\n\t\t// do nothing\n\t}\n\treturn false;\n}", "path": "org.eclipse.swtbot.swt.finder\\src\\org\\eclipse\\swtbot\\swt\\finder\\matchers\\WithText.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tDisplay display = new Display();\n\n\tShell shell = new Shell(display);\n\tshell.setLayout(new FillLayout());\n\tnew Snippet052DoubleClickCellEditor(shell);\n\tshell.open();\n\n\twhile (!shell.isDisposed()) {\n\t\tif (!display.readAndDispatch())\n\t\t\tdisplay.sleep();\n\t}\n\n\tdisplay.dispose();\n\n}", "path": "org.eclipse.swt.examples\\src\\org\\eclipse\\jface\\snippets\\viewers\\Snippet052DoubleClickCellEditor.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/**\n * Creates and installs pertinent EditPolicies\n * for this.\n */\n", "func_signal": "protected void createEditPolicies()", "code": "{\n\tEditPolicy component;\n\tif (getModel() instanceof LED)\n\t\tcomponent = new LEDEditPolicy();\n\telse\n\t\tcomponent = new LogicElementEditPolicy();\n\tinstallEditPolicy(EditPolicy.COMPONENT_ROLE, component);\n\tinstallEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new LogicTreeEditPolicy());\n}", "path": "examples\\gef\\org.eclipse.gef.examples.logic\\src\\org\\eclipse\\gef\\examples\\logicdesigner\\edit\\LogicTreeEditPart.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.eclipse.swt.examples.graphics.AnimatedGraphicsTab#next(int, int)\n */\n", "func_signal": "public void next(int width, int height)", "code": "{\n\n\tfloat h = height;\n\tfloat w = width;\n\n\ttranslateX = (translateX + 3) % width;\n\ttranslateY = (translateY + 5) % height;\n\n\tdiagTranslateX1 = (diagTranslateX1 + 6) % width;\n\tdiagTranslateY1 = diagTranslateX1 * h / w;\n\n\tdiagTranslateX2 = (diagTranslateX2 + 8) % width;\n\tdiagTranslateY2 = -diagTranslateX2 * h / w + h;\n}", "path": "org.eclipse.swt.examples\\src\\org\\eclipse\\swt\\examples\\graphics\\RGBTab.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/**\n * Constructor\n * \n * @param example\n *            A GraphicsExample\n */\n", "func_signal": "public RGBTab(GraphicsExample example)", "code": "{\n\tsuper(example);\n\ttranslateX = translateY = 0;\n\tdiagTranslateX1 = diagTranslateX2 = diagTranslateY1 = diagTranslateY2 = 0;\n}", "path": "org.eclipse.swt.examples\\src\\org\\eclipse\\swt\\examples\\graphics\\RGBTab.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.eclipse.swt.examples.graphics.GraphicsTab#paint(org.eclipse.swt.graphics.GC, int, int)\n */\n", "func_signal": "public void paint(GC gc, int width, int height)", "code": "{\n\tif (!example.checkAdvancedGraphics())\n\t\treturn;\n\tDevice device = gc.getDevice();\n\n\t// horizontal rectangle\n\tTransform transform = new Transform(device);\n\ttransform.translate(0, translateY);\n\tgc.setTransform(transform);\n\ttransform.dispose();\n\n\tPath path = new Path(device);\n\tpath.addRectangle(0, 0, width, 50);\n\tPattern pattern = new Pattern(device, 0, 0, width, 50, device.getSystemColor(SWT.COLOR_BLUE), 0x7f, device\n\t\t\t.getSystemColor(SWT.COLOR_RED), 0x7f);\n\tgc.setBackgroundPattern(pattern);\n\tgc.fillPath(path);\n\tgc.drawPath(path);\n\tpath.dispose();\n\n\t// vertical rectangle\n\ttransform = new Transform(device);\n\ttransform.translate(translateX, 0);\n\tgc.setTransform(transform);\n\ttransform.dispose();\n\n\tpath = new Path(device);\n\tpath.addRectangle(0, 0, 50, height);\n\tpattern.dispose();\n\tpattern = new Pattern(device, 0, 0, 50, height, device.getSystemColor(SWT.COLOR_DARK_CYAN), 0x7f, device\n\t\t\t.getSystemColor(SWT.COLOR_WHITE), 0x7f);\n\tgc.setBackgroundPattern(pattern);\n\tgc.fillPath(path);\n\tgc.drawPath(path);\n\tpath.dispose();\n\n\t// diagonal rectangle from bottom right corner\n\tRectangle rect = new Rectangle(0, 0, 50, height);\n\ttransform = new Transform(device);\n\ttransform.translate(width - diagTranslateX1, height / 2 - diagTranslateY1);\n\n\t// rotate on center of rectangle\n\ttransform.translate(rect.width / 2, rect.height / 2);\n\ttransform.rotate(45);\n\ttransform.translate(-rect.width / 2, -rect.height / 2);\n\tgc.setTransform(transform);\n\ttransform.dispose();\n\n\tpath = new Path(device);\n\tpath.addRectangle(rect.x, rect.y, rect.width, rect.height);\n\tpattern.dispose();\n\tpattern = new Pattern(device, rect.x, rect.y, rect.width, rect.height, device\n\t\t\t.getSystemColor(SWT.COLOR_DARK_GREEN), 0x7f, device.getSystemColor(SWT.COLOR_DARK_MAGENTA), 0x7f);\n\tgc.setBackgroundPattern(pattern);\n\tgc.fillPath(path);\n\tgc.drawPath(path);\n\tpath.dispose();\n\n\t// diagonal rectangle from top right corner\n\ttransform = new Transform(device);\n\ttransform.translate(width - diagTranslateX2, height / 2 - diagTranslateY2);\n\n\t// rotate on center of rectangle\n\ttransform.translate(rect.width / 2, rect.height / 2);\n\ttransform.rotate(-45);\n\ttransform.translate(-rect.width / 2, -rect.height / 2);\n\tgc.setTransform(transform);\n\ttransform.dispose();\n\n\tpath = new Path(device);\n\tpath.addRectangle(rect.x, rect.y, rect.width, rect.height);\n\tpattern.dispose();\n\tpattern = new Pattern(device, rect.x, rect.y, rect.width, rect.height, device\n\t\t\t.getSystemColor(SWT.COLOR_DARK_RED), 0x7f, device.getSystemColor(SWT.COLOR_YELLOW), 0x7f);\n\tgc.setBackgroundPattern(pattern);\n\tgc.fillPath(path);\n\tgc.drawPath(path);\n\tpattern.dispose();\n\tpath.dispose();\n}", "path": "org.eclipse.swt.examples\\src\\org\\eclipse\\swt\\examples\\graphics\\RGBTab.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/**\n * Invokes as a standalone program.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tfinal Display display = new Display();\n\tfinal Shell shell = new Shell(display);\n\tshell.setLayout(new FillLayout());\n\tnew LayoutExample(shell);\n\tshell.setText(LayoutExample.getResourceString(\"window.title\"));\n\tshell.addShellListener(new ShellAdapter() {\n\t\tpublic void shellClosed(ShellEvent e) {\n\t\t\tShell[] shells = display.getShells();\n\t\t\tfor (int i = 0; i < shells.length; i++)\n\t\t\t\tif (shells[i] != shell)\n\t\t\t\t\tshells[i].close();\n\t\t}\n\t});\n\tshell.open();\n\twhile (!shell.isDisposed())\n\t\tif (!display.readAndDispatch())\n\t\t\tdisplay.sleep();\n}", "path": "org.eclipse.swt.examples\\src\\org\\eclipse\\swt\\examples\\layoutexample\\LayoutExample.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/**\n * Gets a list of all command matching the matcher.\n *\n * @param service the {@link ICommandService} instance to use.\n * @param matcher the matcher that can match the command item.\n * @return The list of {@link Command}s that match the matcher.\n */\n", "func_signal": "public List<SWTBotCommand> findCommand(final ICommandService service, final Matcher<?> matcher)", "code": "{\n\treturn UIThreadRunnable.syncExec(new ListResult<SWTBotCommand>() {\n\n\t\tpublic List<SWTBotCommand> run() {\n\t\t\tList<SWTBotCommand> l = new ArrayList<SWTBotCommand>();\n\t\t\tCommand[] commands = service.getDefinedCommands();\n\n\t\t\tfor (int i = 0; i < commands.length; i++)\n\t\t\t\ttry {\n\t\t\t\t\tString name = commands[i].getName();\n\t\t\t\t\tif (matcher.matches(name))\n\t\t\t\t\t\tl.add(new SWTBotCommand(commands[i]));\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlog.error(\"Failed with an exception on the command: \" + commands[i].toString(), e); //$NON-NLS-1$\n\t\t\t\t}\n\n\t\t\treturn l;\n\t\t}\n\t});\n}", "path": "org.eclipse.swtbot.eclipse.finder\\src\\org\\eclipse\\swtbot\\eclipse\\finder\\finders\\CommandFinder.java", "repo_name": "ketan/swtbot-original", "stars": 7, "license": "None", "language": "java", "size": 4674}
{"docstring": "/**\n * Recycles a PreparedStatement-SQLQuery pair of delete type in the pool,\n * after it's parameters are cleared. Use of this method is MANDATORY after\n * using getDelete method. If PreparedStatements are not recycled the system\n * will hang when the pool runs empty.\n * @param pair the Entry pair that needs recycling.\n * @param t the JTable in which the Entry belongs.\n */\n", "func_signal": "public void recycleDelete(Pair<PreparedStatement, SQLQuery> pair, JTable t)", "code": "{\n    try {\n        pair.getKey().clearParameters();\n        delete.get(t).add(pair);\n    } catch (SQLException ex) {\n        throw new RuntimeException(ex);\n    }\n}", "path": "src\\org\\kinkydesign\\decibell\\db\\StatementPool.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * Register a component in a database identified by a {@link DeciBell } object.\n * @param toBeWritten\n *      The object to be registered in the database. Note that only objects which\n *      can be cast as Components is possible to be written in the database.\n * @throws DuplicateKeyException\n *      In case the object is already in the database. Formally, this exception is\n *      thrown is the following conditions do hold: <code>toBeWritten.search(db).size==1</code>\n *      and <code>toBeWritten.search(db).get(0).equals(toBeWritten)</code>.\n * @throws ImproperRegistration\n *      A component cannot be written in the database if it has a Collection-type\n *      field which is <code>null</code>. This is because, when a collection\n *      is written in the database, DeciBell also stores the specific implementation\n *      of that list, to be able afterwards to retrieve these data in the proper form.\n */\n", "func_signal": "public void register(Component toBeWritten)\n        throws DuplicateKeyException, ImproperRegistration", "code": "{\n    try {\n        save(toBeWritten);\n    } catch (SQLException ex) {\n        if (ex.getSQLState().equals(__DuplicateKey_State__)) {\n            throw new DuplicateKeyException(toBeWritten, db.getDbConnector(), ex);\n        } else {\n            throw new RuntimeException(ex);\n        }\n    }\n}", "path": "src\\org\\kinkydesign\\decibell\\db\\engine\\RegistrationEngine.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * Inializes the pool for a given table by creating PreparedStatement objects\n * for all query types and inserting them to the pool.\n * @param table the JTable to be initiated.\n */\n", "func_signal": "private void initTable(JTable table)", "code": "{\n    search.put(table, new ArrayBlockingQueue<Pair<PreparedStatement, SQLQuery>>(queueSize));\n    searchpk.put(table, new ArrayBlockingQueue<Pair<PreparedStatement, SQLQuery>>(queueSize));\n    register.put(table, new ArrayBlockingQueue<Pair<PreparedStatement, SQLQuery>>(queueSize));\n    delete.put(table, new ArrayBlockingQueue<Pair<PreparedStatement, SQLQuery>>(queueSize));\n    update.put(table, new ArrayBlockingQueue<Pair<PreparedStatement, SQLQuery>>(queueSize));\n    for (int i = 0; i < poolSize; i++) {\n        register.get(table).add(StatementFactory.createRegister(table, con));\n        delete.get(table).add(StatementFactory.createDelete(table, con));\n        search.get(table).add(StatementFactory.createSearch(table, con));\n        searchpk.get(table).add(StatementFactory.createSearchPK(table, con));\n        update.get(table).add(StatementFactory.createUpdate(table, con));\n    }\n}", "path": "src\\org\\kinkydesign\\decibell\\db\\StatementPool.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * <p  align=\"justify\" style=\"width:60%\">\n * Start the connection to the database and, if the database does not exist,\n * create it using the entity-relation structure perscribed by the attached classes\n * and the annotations therein. Upon startup, some SQL statements are prepared.\n * </p>\n */\n", "func_signal": "public void start() throws ImproperDatabaseException", "code": "{\n    System.err.println(\"DeciBell >>> Engine Ignition: Beware of the flames!\");\n    connector.connect();\n    System.err.println(\"DeciBell <<< Connected!\");\n    if (this.components == null) {\n        Reflections reflections = new Reflections(\"\");\n        components = reflections.getSubTypesOf(Component.class);\n    }\n    checkConsistencybefore();\n    TablesGenerator tables = new DerbyTablesGenerator(this, components);\n    tables.construct();\n    StatementPool.getPool(connector);\n    System.err.println(\"DeciBell >>> CONNECT '\" + getDatabaseUrl() + \"';\\n\");\n}", "path": "src\\org\\kinkydesign\\decibell\\DeciBell.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * Recycles a PreparedStatement-SQLQuery pair of search-primary-keys-only type in the pool,\n * after it's parameters are cleared. Use of this method is MANDATORY after\n * using getSearchPK method. If PreparedStatements are not recycled the system\n * will hang when the pool runs empty.\n * @param pair the Entry pair that needs recycling.\n * @param t the JTable in which the Entry belongs.\n */\n", "func_signal": "public void recycleSearchPK(Pair<PreparedStatement, SQLQuery> pair, JTable t)", "code": "{\n    try {\n        pair.getKey().clearParameters();\n        searchpk.get(t).add(pair);\n    } catch (SQLException ex) {\n        throw new RuntimeException(ex);\n    }\n}", "path": "src\\org\\kinkydesign\\decibell\\db\\StatementPool.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * Directly executes an sql command.\n * @param sql an sql command String.\n */\n", "func_signal": "public void execute(String sql)", "code": "{\n    Statement stmt = null;\n    try {\n        stmt = connection.createStatement();\n        stmt.execute(sql);\n    } catch (SQLException ex) {\n        if (!ex.getSQLState().equals(\"X0Y32\") && !ex.getSQLState().equals(\"42Y55\")) {\n            System.out.println(ex.getSQLState());\n            System.err.println(\"BUGGY : \" + sql);\n            throw new RuntimeException(ex);\n        }\n\n    } finally {\n        if (stmt != null) {\n            try {\n                stmt.close();\n            } catch (SQLException ex) {\n                throw new RuntimeException(\"Could not close the SQL statement!\", ex);\n            }\n        }\n    }\n}", "path": "src\\org\\kinkydesign\\decibell\\db\\DbConnector.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * <p  align=\"justify\" style=\"width:60%\">\n * Attaches to the list of components the classes contained in the specified\n * packages. Provide the package name without any regual expressions at the end\n * like <code>.*</code> or the beggining like <code>*.util</code>.\n * </p>\n * @param packageNames\n *      List of packages. The components found therein will be used to create\n *      the database.\n */\n", "func_signal": "public void attachFromPackages(String... packageNames)", "code": "{\n\n    if (components == null) {\n        components = new HashSet<Class<? extends Component>>();\n    }\n    StringBuffer packages = new StringBuffer();\n\n    for (int i = 0; i < packageNames.length; i++) {\n        packages.append(\"+\" + packageNames[i]+\".*\");\n        if (i<packageNames.length-1){\n            packages.append(\",\");\n        }\n    }\n    \n    Reflections reflections = new Reflections(\n            new ConfigurationBuilder().filterInputsBy(FilterBuilder.parse(packages.toString())).\n            setUrls(ClasspathHelper.getUrlsForCurrentClasspath()).\n            setScanners(new SubTypesScanner()));\n\n    components.addAll(reflections.getSubTypesOf(Component.class));\n    System.out.println(components.iterator().next());\n}", "path": "src\\org\\kinkydesign\\decibell\\DeciBell.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * <p  align=\"justify\" style=\"width:60%\">\n * Initialize a new Registration engine providing the {@link DeciBell } object\n * which identifies a datbase connection.\n * </p>\n * @param db\n *      The DeciBell object that identifies the connections the engine will use\n *      to register the data.\n */\n", "func_signal": "public RegistrationEngine(final DeciBell db)", "code": "{\n\n    this.db = db;\n    registry = ComponentRegistry.getRegistry(db.getDbConnector());\n    pool = StatementPool.getPool(db.getDbConnector());\n}", "path": "src\\org\\kinkydesign\\decibell\\db\\engine\\RegistrationEngine.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * Recycles a PreparedStatement-SQLQuery pair of search type in the pool,\n * after it's parameters are cleared. Use of this method is MANDATORY after\n * using getSearch method. If PreparedStatements are not recycled the system\n * will hang when the pool runs empty.\n * @param pair the Entry pair that needs recycling.\n * @param t the JTable in which the Entry belongs.\n */\n", "func_signal": "public void recycleSearch(Pair<PreparedStatement, SQLQuery> pair, JTable t)", "code": "{\n    try {\n        pair.getKey().clearParameters();\n        search.get(t).add(pair);\n    } catch (SQLException ex) {\n        throw new RuntimeException(ex);\n    }\n}", "path": "src\\org\\kinkydesign\\decibell\\db\\StatementPool.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n *\n * <p align=\"justify\" style=\"width:60%\">\n * An <em>attribute</em> in ER-terms, that is a characteristic of an entity we need to\n * write to/read from the relational database.\n * </p>\n *\n * <p align=\"justify\" style=\"width:60%\">\n * Note: Database creation takes into account all fields annotated with the <code>@Entry</code>\n * annotation to create a proper structure that allows this information to be registered\n * in and/or be read from the database. No knowledge of the database structure is needed,\n * once you understand the relations between the classes you have defined, that is the\n * normal java hierarchical structure.\n * </p>\n * <p align=\"justify\" style=\"width:60%\">\n * Here we provide a brief example of use of this annotation, its meaning and\n * consequences. So suppose one wants to maintain a database that stores information\n * about customers. Every customer has a name, id, phone number and a debt. The customer is also characterized\n * by his/her age but consider that this information is not of any specific interest (at\n * least for the time). This naturally leads\n * to the introduction of the following java class in ones code:\n * </p>\n *\n * <p align=\"justify\" style=\"width:60%\">\n * <code>class Customer {<br/><br/>\n *\n *   public String name;<br/>\n *   public int id;<br/>\n *   public String phoneNumber;<br/>\n *   public int debt;<br/>\n *   public int age;<br/><br/>\n *\n * }\n * </code>\n * </p>\n *\n * <p align=\"justify\" style=\"width:60%\">\n * If we need to store information contained in Customer type objects and retreive\n * such information from the database, we have to modify the class <code>Customer</code>\n * a little bit. First of all, the class Customer shall become subclass of {@link Component }\n * and the annotation <code>@Entry</code> will be used to declare which information we\n * need to be used by DeciBell&copy;. Note that, in any case one of the entries has to\n * be characterized as {@link PrimaryKey primary key}. Assume that here <code>id</code>\n * will act as the primary key. Here is the modified code for the class <code>Customer</code> :\n * </p>\n * <p align=\"justify\" style=\"width:60%\">\n * <code>class Customer extends {@link Component } {</code><br/><br/>\n *\n *   <code>@{@link Entry }({@link Entry#unique() unique } = true, {@link Entry#notNull() notNull} = true) public String name;</code><br/>\n *   <code>@{@link PrimaryKey } public int id;</code><br/>\n *   <code>@{@link Entry } public String phoneNumber;</code><br/>\n *   <code>@{@link Entry } public int debt;</code><br/>\n *   <code>public int age;<br/><br/>\n *\n * }\n * </code>\n * </p>\n *\n * @author Pantelis Sopasakis\n * @author Charalampos Chomenides\n *\n * @see Component\n * @see PrimaryKey\n * @see ForeignKey\n */\n", "func_signal": "@Retention(RetentionPolicy.RUNTIME)\n@Inherited\n@Target(ElementType.FIELD)\n@Documented\npublic @interface Entry", "code": "{\n\n    /**\n     *\n     * <p align=\"justify\" style=\"width:60%\">\n     * The key is unique among all entities. Every field annotated with the <code>@Entry</code>\n     * annotation with the extra characterization <code>unique=true</code> should have\n     * unique values over all instances of that class, at least when database registration\n     * operations are performed.\n     * </p>\n     *\n     * @return \n     *      <code>true</code> if is unique\n     */\n    boolean unique() default false;\n    \n    /**\n     * This key cannot be null\n     * @return true if is not null\n     */\n    boolean notNull() default false;\n\n    /**\n     *\n     * Default value for the annotated field\n     *\n     * @return\n     *      Value to be assigned to the key if no other value is provided.\n     */\n    String defaultValue() default \"\";\n\n\n    /**\n     *\n     * <p align=\"justify\" style=\"width:60%\">\n     * Whether the entry is automatically generated (always) as identity. Applies only\n     * on integer type attributes.\n     * </p>\n     * @return\n     *      <code>true</code> if the entry is automatically generated as identity.\n     */\n    boolean autoGenerated() default false;\n\n    \n    \n}", "path": "src\\org\\kinkydesign\\decibell\\annotations\\Entry.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * Returns the pool associated with the specified DbConnector.\n * @param con a DbConnector that represents a database managed by DeciBell.\n * @return the StatementPool object associated with the specified DbConnector.\n */\n", "func_signal": "public static StatementPool getPool(DbConnector con)", "code": "{\n    if (pools.get(con) == null) {\n        synchronized (lock) {\n            pools.put(con, new StatementPool(con));\n        }\n    }\n    return pools.get(con);\n}", "path": "src\\org\\kinkydesign\\decibell\\db\\StatementPool.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * Check the consistency of the attached components before the\n * @throws ImproperDatabaseException\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\"Check Consistency of Attached Components - Before DB creation\">\n", "func_signal": "private void checkConsistencybefore() throws ImproperDatabaseException", "code": "{\n    for (Class<? extends Component> c : components) {\n        Constructor<? extends Component> constructor = null;\n        try {\n            constructor = c.getDeclaredConstructor();\n        } catch (NoSuchMethodException ex) {\n            throw new ImproperDatabaseException(\"The class \" + c.getName() + \" does \"\n                    + \"not have a constructor with no parameters.\", ex);\n        } catch (SecurityException ex) {\n            throw new ImproperDatabaseException(\"The class \" + c.getName() + \" has \"\n                    + \"a constructor with no parameters which is not accessible.\", ex);\n        }\n        try {\n            Component component = (Component) constructor.newInstance();\n            if (component.getPrimaryKeyFields().size() == 0 && component.getClass().getSuperclass().equals(Component.class)) {\n                throw new NoPrimaryKeyException(\"Every component should have (at least) one \"\n                        + \"primary key. Use @PrimaryKey to annotate your primary key fields.\");\n            }\n            List<Field> foreignFields = component.getForeignKeyFields();\n            for (Field f : foreignFields) {\n                Class fieldType = f.getType();\n                if (!components.contains(fieldType) && !Collection.class.isAssignableFrom(fieldType)) {\n                    throw new ImproperDatabaseException(\"Did you forget to attach the class \" + f.getType().getSimpleName() + \" in the\"\n                            + \" DeciBell object?\");\n                }\n                if (Collection.class.isAssignableFrom(fieldType)) {\n                    try {\n                        ParameterizedType parametrizedType = (ParameterizedType) f.getGenericType();\n                        Type collectionType = parametrizedType.getActualTypeArguments()[0];\n                        if (!Component.class.isAssignableFrom((Class<?>) collectionType)) {\n                            throw new ImproperDatabaseException(\"A collection of non-component elements (\" + ((Class) collectionType).getName() + \") \"\n                                    + \"cannot use the @ForeignKey annotation. Use @Entry instead.\");\n                        }\n                    } catch (ClassCastException ex) {\n                        throw new ImproperDatabaseException(\"A non-parametrized collection should not be annotated with \"\n                                + \"a @ForeignKey annotation.\");\n                    }\n                } else if (!Component.class.isAssignableFrom(fieldType)) {\n                    throw new ImproperDatabaseException(\"Use @ForeignKey only with Components and collections of such.\");\n                }\n            }\n        } catch (InstantiationException ex) {\n            throw new ImproperDatabaseException(\"The constructor of the class\" + c.getName() + \" fails \"\n                    + \"to instantiate new objects! (InstantiationException)\", ex);\n        } catch (IllegalAccessException ex) {\n            throw new ImproperDatabaseException(\"The class \" + c.getName() + \" has \"\n                    + \"a non-accessible (not public) constructor with no parameters. Make it public.\", ex);\n        } catch (InvocationTargetException ex) {\n            throw new ImproperDatabaseException(\"The constructor of the class\" + c.getName() + \" failed \"\n                    + \"to instantiate new objects because it threw an exception.\\nSee next exception for details...\", ex);\n        }\n\n    }\n}", "path": "src\\org\\kinkydesign\\decibell\\DeciBell.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * <p  align=\"justify\" style=\"width:60%\">\n * Removes a register operation type PreparedStatement-SQLQuery pair from the pool\n * for a given JTable. This pair holds both the PreparedStatement and the\n * Query specifics to assist in feeding the prepared statement with values.\n * This method will block when the pool is empty of prepared statements for\n * the specific type.\n * </p>\n * @param t the JTable for which a register type prepared statement is needed.\n * @return a PreparedStatement-SQLQuer pair of type Register for the given JTable.\n */\n", "func_signal": "public Pair<PreparedStatement, SQLQuery> getRegister(JTable t)", "code": "{\n    try {\n        return register.get(t).take();\n    } catch (InterruptedException ex) {\n        return getRegister(t);\n    }\n}", "path": "src\\org\\kinkydesign\\decibell\\db\\StatementPool.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * <p  align=\"justify\" style=\"width:60%\">\n * Attach a new java class to the relational database structure. One or more\n * tables are going to be created due to this attachment so that the submitted\n * class will have a counterpart in the database.\n * </p>\n * @param c\n *      The class to be attached to the collection of relational entities.\n */\n", "func_signal": "public void attach(Class<? extends Component> c)", "code": "{\n    c.asSubclass(Component.class);\n    if (components == null) {\n        components = new HashSet<Class<? extends Component>>();\n    }\n\n    this.components.add(c);\n    componentDBmap.put(c, this);\n}", "path": "src\\org\\kinkydesign\\decibell\\DeciBell.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * Removes a delete operation type PreparedStatement-SQLQuery pair from the pool\n * for a given JTable. This pair holds both the PreparedStatement and the\n * Query specifics to assist in feeding the prepared statement with values.\n * This method will block when the pool is empty of prepared statements for\n * the specific type.\n * @param t the JTable for which a delete type prepared statement is needed.\n * @return a PreparedStatement-SQLQuer pair of type Delete for the given JTable.\n */\n", "func_signal": "public Pair<PreparedStatement, SQLQuery> getDelete(JTable t)", "code": "{\n    try {\n        return delete.get(t).take();\n    } catch (InterruptedException ex) {\n        return getDelete(t);\n    }\n}", "path": "src\\org\\kinkydesign\\decibell\\db\\StatementPool.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * Returns true if the driver is already connected to the database.\n * @return True if the driver is already connected to the database.\n */\n", "func_signal": "public boolean isConnected()", "code": "{\n    if (connection != null) {\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "src\\org\\kinkydesign\\decibell\\db\\DbConnector.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * Removes an update operation type PreparedStatement-SQLQuery pair from the pool\n * for a given JTable. This pair holds both the PreparedStatement and the\n * Query specifics to assist in feeding the prepared statement with values.\n * This method will block when the pool is empty of prepared statements for\n * the specific type.\n * @param t the JTable for which an update type prepared statement is needed.\n * @return a PreparedStatement-SQLQuer pair of type Update for the given JTable.\n */\n", "func_signal": "public Pair<PreparedStatement, SQLQuery> getUpdate(JTable t)", "code": "{\n    try {\n        return update.get(t).take();\n    } catch (InterruptedException ex) {\n        return getUpdate(t);\n    }\n}", "path": "src\\org\\kinkydesign\\decibell\\db\\StatementPool.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * Recycles a PreparedStatement-SQLQuery pair of register type in the pool,\n * after it's parameters are cleared. Use of this method is MANDATORY after\n * using getRegister method. If PreparedStatements are not recycled the system\n * will hang when the pool runs empty.\n * @param pair the Entry pair that needs recycling.\n * @param t the JTable in which the Entry belongs.\n */\n", "func_signal": "public void recycleRegister(Pair<PreparedStatement, SQLQuery> pair, JTable t)", "code": "{\n    try {\n        pair.getKey().clearParameters();\n        register.get(t).add(pair);\n    } catch (SQLException ex) {\n        throw new RuntimeException(ex);\n    }\n}", "path": "src\\org\\kinkydesign\\decibell\\db\\StatementPool.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * Removes a search-primary-keys-only operation type PreparedStatement-SQLQuery pair from the pool\n * for a given JTable. This pair holds both the PreparedStatement and the\n * Query specifics to assist in feeding the prepared statement with values.\n * This method will block when the pool is empty of prepared statements for\n * the specific type.\n * @param t the JTable for which a search-primary-keys-only type prepared statement is needed.\n * @return a PreparedStatement-SQLQuer pair of type Search-primary-keys-only for the given JTable.\n */\n", "func_signal": "public Pair<PreparedStatement, SQLQuery> getSearchPK(JTable t)", "code": "{\n    try {\n        return searchpk.get(t).take();\n    } catch (InterruptedException ex) {\n        return getSearchPK(t);\n    }\n}", "path": "src\\org\\kinkydesign\\decibell\\db\\StatementPool.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * <p  align=\"justify\" style=\"width:60%\">\n * Stops the connection and kills the Database server.\n * </p>\n */\n", "func_signal": "public void stop()", "code": "{\n    connector.disconnect();\n    connector.killServer();\n    try {\n        while (connector.isConnected() || connector.isServerRunning()) {\n            Thread.sleep(100);\n        }\n        Thread.sleep(1000); // <== wait a little bit more\n    } catch (InterruptedException ex) {\n        throw new RuntimeException(\"Interrupted while stopping...\", ex);\n    }\n}", "path": "src\\org\\kinkydesign\\decibell\\DeciBell.java", "repo_name": "hampos/DeciBell", "stars": 5, "license": "None", "language": "java", "size": 3168}
{"docstring": "/**\n * Test what happens if we abandon the attempt to acquire a lock that ends\n * in a timeout, and then try again after the conflicting transaction\n * completes.  Note that we don't currently provide an API for doing this\n * in Darkstar.\n */\n", "func_signal": "@Test\npublic void testLockAfterTimeout() throws Exception", "code": "{\n\tinit(1L, numKeyMaps);\n\tassertGranted(acquireLock(locker, \"o1\", true));\n\tLocker<String> locker2 = createLocker(lockManager);\n\tAcquireLock acquire2 = new AcquireLock(locker2, \"o1\", true);\n\tacquire2.assertBlocked();\n\tThread.sleep(2);\n\tassertTimeout(acquire2.getResult(), locker);\n\tlockManager.releaseLock(locker, \"o1\");\n\tassertGranted(acquireLock(locker2, \"o1\", true));\n}", "path": "sgs-server\\src\\test\\java\\com\\sun\\sgs\\test\\impl\\util\\lock\\TestLockManager.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * Reports an object access.\n *\n * @param\ttxn the transaction\n * @param\toid the object ID\n * @param\ttype the type of access\n * @throws\tIllegalArgumentException if {@code oid} is negative\n */\n", "func_signal": "protected void reportObjectAccess(\n\tTransaction txn, long oid, AccessType type)", "code": "{\n\tcheckOid(oid);\n\ttry {\n\t    objectAccesses.reportObjectAccess(txn, oid, type);\n\t} catch (IllegalArgumentException e) {\n\t    throw new TransactionNotActiveException(\n\t        \"Problem with transaction \" + txn + \": \" + e.getMessage(), e);\n\t}\n}", "path": "sgs-server\\src\\main\\java\\com\\sun\\sgs\\impl\\service\\data\\store\\AbstractDataStore.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * Returns the name to use for reporting access to a name binding.  Uses\n * the value \"z.end\" instead of {@code null} to represent a name beyond the\n * last known name.  Add the prefix \"z\" to any name whose first character\n * is \"z\".  Note that this scheme does not preserve order, but access\n * reporting does not require that.\n *\n * @param\tname the name or {@code null}\n * @return\tthe name to use for reporting object accesses\n */\n", "func_signal": "protected static String getNameForAccess(String name)", "code": "{\n\tif (name == null) {\n\t    return \"z.end\";\n\t} else if (name.startsWith(\"z\")) {\n\t    return 'z' + name;\n\t} else {\n\t    return name;\n\t}\n}", "path": "sgs-server\\src\\main\\java\\com\\sun\\sgs\\impl\\service\\data\\store\\AbstractDataStore.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * Test read/write conflict\n *\n * locker2: read o1\t\t=> granted\n * locker:  write o1\t=> blocked\n * locker2: commit\n * locker:\t\t\t=> granted\n */\n", "func_signal": "@Test\npublic void testReadWriteConflict() throws Exception", "code": "{\n\tLocker<String> locker2 = createLocker(lockManager);\n\tassertGranted(acquireLock(locker2, \"o1\", false));\n\tAcquireLock acquire = new AcquireLock(locker, \"o1\", true);\n\tacquire.assertBlocked();\n\tlockManager.releaseLock(locker2, \"o1\");\n\tassertGranted(acquire.getResult());\n}", "path": "sgs-server\\src\\test\\java\\com\\sun\\sgs\\test\\impl\\util\\lock\\TestLockManager.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * {@inheritDoc} <p>\n *\n * This implementation does logging and calls {@link #prepareInternal\n * prepareInternal} to perform the actual operation.\n */\n", "func_signal": "public boolean prepare(Transaction txn)", "code": "{\n\tlogger.log(FINER, \"prepare txn:{0}\", txn);\n\ttry {\n\t    boolean result = prepareInternal(txn);\n\t    if (logger.isLoggable(FINER)) {\n\t\tlogger.log(FINER, \"prepare txn:{0} returns {1}\", txn, result);\n\t    }\n\t    return result;\n\t} catch (RuntimeException e) {\n\t    throw handleException(txn, FINER, e, \"prepare txn:\" + txn);\n\t}\n}", "path": "sgs-server\\src\\main\\java\\com\\sun\\sgs\\impl\\service\\data\\store\\AbstractDataStore.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * {@inheritDoc} <p>\n *\n * This implementation does logging and calls {@link\n * #getLocalNodeIdInternal} to perform the actual operation.\n */\n", "func_signal": "public long getLocalNodeId()", "code": "{\n\tlogger.log(FINEST, \"getLocalNodeId\");\n\ttry {\n\t    long result = getLocalNodeIdInternal();\n\t    if (logger.isLoggable(FINEST)) {\n\t\tlogger.log(\n\t\t    FINEST, \"getLocalNodeId returns nodeId:{0}\", result);\n\t    }\n\t    return result;\n\t} catch (RuntimeException e) {\n\t    throw handleException(null, FINEST, e, \"getLocalNodeId\");\n\t}\n}", "path": "sgs-server\\src\\main\\java\\com\\sun\\sgs\\impl\\service\\data\\store\\AbstractDataStore.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * Reports access to what should be the next name after a given name.\n * Confirms that the next name is correct after obtaining access, repeating\n * the operation if the name has changed, and returning actual next name.\n * Note that the next name may change if the one obtained prior to checking\n * access was created by a transaction that aborts.\n *\n * @param\ttxn the transaction under which the operation should take place\n * @param\tname the name, which may be {@code null}\n * @param\tnext the next name after {@code name}, which may be\n *\t\t{@code null}\n * @param\taccessType the type of access to the next name to report\n * @return\tthe actual next name, which may be {@code null}\n */\n", "func_signal": "private String reportNextNameAccess(Transaction txn,\n\t\t\t\t\tString name,\n\t\t\t\t\tString next,\n\t\t\t\t\tAccessType accessType)", "code": "{\n\twhile (true) {\n\t    reportNameAccess(txn, next, accessType);\n\t    String check = nextBoundNameInternal(txn, name);\n\t    if (check == null ? next == null : check.equals(next)) {\n\t\treturn next;\n\t    }\n\t    next = check;\n\t}\n}", "path": "sgs-server\\src\\main\\java\\com\\sun\\sgs\\impl\\service\\data\\store\\AbstractDataStore.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * {@inheritDoc} <p>\n *\n * This implementation does logging, checks that {@code oid} is valid, \n * reports object accesses, and calls {@link #markForUpdateInternal\n * markForUpdateInternal} to perform the actual operation.\n */\n", "func_signal": "public void markForUpdate(Transaction txn, long oid)", "code": "{\n\tif (logger.isLoggable(FINEST)) {\n\t    logger.log(\n\t\tFINEST, \"markForUpdate txn:{0}, oid:{1,number,#}\", txn, oid);\n\t}\n\ttry {\n\t    reportObjectAccess(txn, oid, WRITE);\n\t    markForUpdateInternal(txn, oid);\n\t    if (logger.isLoggable(FINEST)) {\n\t\tlogger.log(FINEST,\n\t\t\t   \"markForUpdate txn:{0}, oid:{1,number,#} returns\",\n\t\t\t   txn, oid);\n\t    }\n\t} catch (RuntimeException e) {\n\t    throw handleException(\n\t\ttxn, FINEST, e, \"markForUpdate txn:\" + txn + \", oid:\" + oid);\n\t}\t\t\n}", "path": "sgs-server\\src\\main\\java\\com\\sun\\sgs\\impl\\service\\data\\store\\AbstractDataStore.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * {@inheritDoc} <p>\n *\n * This implementation does logging and calls {@link #commitInternal\n * commitInternal} to perform the actual operation.\n */\n", "func_signal": "public void commit(Transaction txn)", "code": "{\n\tlogger.log(FINER, \"commit txn:{0}\", txn);\n\ttry {\n\t    commitInternal(txn);\n\t    logger.log(FINER, \"commit txn:{0} returns\", txn);\n\t} catch (RuntimeException e) {\n\t    throw handleException(txn, FINER, e, \"commit txn:\" + txn);\n\t}\n}", "path": "sgs-server\\src\\main\\java\\com\\sun\\sgs\\impl\\service\\data\\store\\AbstractDataStore.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * {@inheritDoc} <p>\n *\n * This implementation does logging and calls {@link #shutdownInternal\n * shutdownInternal} to perform the actual operation.\n */\n", "func_signal": "public void shutdown()", "code": "{\n\tlogger.log(FINER, \"shutdown\");\n\ttry {\n\t    shutdownInternal();\n\t    logger.log(FINER, \"shutdown complete\");\n\t} catch (RuntimeException e) {\n\t    throw handleException(null, FINER, e, \"shutdown\");\n\t}\n}", "path": "sgs-server\\src\\main\\java\\com\\sun\\sgs\\impl\\service\\data\\store\\AbstractDataStore.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * {@inheritDoc} <p>\n *\n * This implementation does logging, checks that {@code name} is not {@code\n * null}, reports name accesses, and calls {@link #removeBindingInternal\n * removeBindingInternal} to perform the actual operation.\n */\n", "func_signal": "public void removeBinding(Transaction txn, String name)", "code": "{\n\tif (logger.isLoggable(FINEST)) {\n\t    logger.log(FINEST, \"removeBinding txn:{0}, name:{1}\", txn, name);\n\t}\n\ttry {\n\t    checkNull(\"name\", name);\n\t    /*\n\t     * Write lock the name even though we don't know yet if it is\n\t     * bound.  Doing this means that another transaction cannot change\n\t     * or observe the existence of the binding until this transaction\n\t     * commits.  Without performing this check first, we would need to\n\t     * recheck the existence after locking the next key.\n\t     */\n\t    reportNameAccess(txn, name, WRITE);\n\t    BindingValue result = removeBindingInternal(txn, name);\n\t    if (!result.isNameBound()) {\n\t\t/*\n\t\t * Read lock the next name to prevent another transaction from\n\t\t * creating the name.  We are locking the non-existent name\n\t\t * within AbstractDataStore, which will lock out others locally\n\t\t * from creating the name.  But the server side will only want\n\t\t * to lock existing items, so it depends on locking the next\n\t\t * name.\n\t\t */\n\t\treportNextNameAccess(txn, name, result.getNextName(), READ);\n\t\tthrow new NameNotBoundException(\"Name not bound: \" + name);\n\t    }\n\t    /*\n\t     * Write lock the next name if the binding is being removed to\n\t     * prevent other transactions from observing its status as the next\n\t     * binding until this transaction commits.\n\t     */\n\t    reportNextNameAccess(txn, name, result.getNextName(), WRITE);\n\t    if (logger.isLoggable(FINEST)) {\n\t\tlogger.log(FINEST, \"removeBinding txn:{0}, name:{1} returns\",\n\t\t\t   txn, name);\n\t    }\n\t} catch (RuntimeException e) {\n\t    throw handleException(\n\t\ttxn, FINEST, e, \"removeBinding txn:\" + txn + \", name:\" + name);\n\t}\n}", "path": "sgs-server\\src\\main\\java\\com\\sun\\sgs\\impl\\service\\data\\store\\AbstractDataStore.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * {@inheritDoc} <p>\n *\n * This implementation does logging and calls {@link\n * #prepareAndCommitInternal prepareAndCommitInternal} to perform the\n * actual operation.\n */\n", "func_signal": "public void prepareAndCommit(Transaction txn)", "code": "{\n\tlogger.log(FINER, \"prepareAndCommit txn:{0}\", txn);\n\ttry {\n\t    prepareAndCommitInternal(txn);\n\t    logger.log(FINER, \"prepareAndCommit txn:{0} returns\", txn);\n\t} catch (RuntimeException e) {\n\t    throw handleException(\n\t\ttxn, FINER, e, \"prepareAndCommit txn:\" + txn);\n\t}\n}", "path": "sgs-server\\src\\main\\java\\com\\sun\\sgs\\impl\\service\\data\\store\\AbstractDataStore.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/* -- Test constructor -- */\n", "func_signal": "@Test\npublic void testConstructorIllegalLockTimeout()", "code": "{\n\tlong[] values = { 0, -37 };\n\tfor (long value : values) {\n\t    try {\n\t\tcreateLockManager(value, 1);\n\t\tfail(\"Expected IllegalArgumentException\");\n\t    } catch (IllegalArgumentException e) {\n\t\tSystem.err.println(e);\n\t    }\n\t}\n}", "path": "sgs-server\\src\\test\\java\\com\\sun\\sgs\\test\\impl\\util\\lock\\TestLockManager.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * {@inheritDoc} <p>\n *\n * This implementation does logging, checks that {@code oid} is valid,\n * reports object accesses, and calls {@link #getObjectInternal\n * getObjectInternal} to perform the actual operation.\n */\n", "func_signal": "public byte[] getObject(Transaction txn, long oid, boolean forUpdate)", "code": "{\n\tif (logger.isLoggable(FINEST)) {\n\t    logger.log(FINEST,\n\t\t       \"getObject txn:{0}, oid:{1,number,#}, forUpdate:{2}\",\n\t\t       txn, oid, forUpdate);\n\t}\n\ttry {\n\t    reportObjectAccess(txn, oid, forUpdate ? WRITE : READ);\n\t    byte[] result = getObjectInternal(txn, oid, forUpdate);\n\t    if (logger.isLoggable(FINEST)) {\n\t\tlogger.log(FINEST,\n\t\t\t   \"getObject txn:{0}, oid:{1,number,#}\" +\n\t\t\t   \", forUpdate:{2} returns\",\n\t\t\t   txn, oid, forUpdate);\n\t    }\n\t    return result;\n\t} catch (RuntimeException e) {\n\t    throw handleException(txn, FINEST, e,\n\t\t\t\t  \"getObject txn:\" + txn + \", oid:\" + oid +\n\t\t\t\t  \", forUpdate:\" + forUpdate);\n\n\t}\n}", "path": "sgs-server\\src\\main\\java\\com\\sun\\sgs\\impl\\service\\data\\store\\AbstractDataStore.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * {@inheritDoc} <p>\n *\n * This implementation does logging, checks that {@code name} is not {@code\n * null}, reports name accesses, and calls {@link #getBindingInternal\n * getBindingInternal} to perform the actual operation.\n */\n", "func_signal": "public long getBinding(Transaction txn, String name)", "code": "{\n\tif (logger.isLoggable(FINEST)) {\n\t    logger.log(FINEST, \"getBinding txn:{0}, name:{1}\", txn, name);\n\t}\n\ttry {\n\t    checkNull(\"name\", name);\n\t    /*\n\t     * Read lock the name even though we don't know yet if it is bound.\n\t     * Doing this means that the value we obtain, if there is one, will\n\t     * be known to be correct.\n\t     */\n\t    reportNameAccess(txn, name, READ);\n\t    BindingValue result = getBindingInternal(txn, name);\n\t    if (!result.isNameBound()) {\n\t\t/*\n\t\t * Read lock the next name if the requested name is not bound\n\t\t * to prevent a concurrent transaction from observing a\n\t\t * different next name than this transaction would.\n\t\t */\n\t\treportNextNameAccess(txn, name, result.getNextName(), READ);\n\t\tthrow new NameNotBoundException(\"Name not bound: \" + name);\n\t    }\n\t    if (logger.isLoggable(FINEST)) {\n\t\tlogger.log(FINEST,\n\t\t\t   \"getBinding txn:{0}, name:{1} returns \" +\n\t\t\t   \"oid:{2,number,#}\",\n\t\t\t   txn, name, result.getObjectId());\n\t    }\n\t    return result.getObjectId();\n\t} catch (RuntimeException e) {\n\t    throw handleException(\n\t\ttxn, FINEST, e, \"getBinding txn:\" + txn + \", name:\" + name);\n\t}\n}", "path": "sgs-server\\src\\main\\java\\com\\sun\\sgs\\impl\\service\\data\\store\\AbstractDataStore.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * Reports a name access.\n *\n * @param\ttxn the transaction\n * @param\tname the name\n * @param\ttype the type of access\n */\n", "func_signal": "protected void reportNameAccess(\n\tTransaction txn, String name, AccessType type)", "code": "{\n\ttry {\n\t    nameAccesses.reportObjectAccess(txn, getNameForAccess(name), type);\n\t} catch (IllegalArgumentException e) {\n\t    throw new TransactionNotActiveException(\n\t        \"Problem with transaction \" + txn + \": \" + e.getMessage(), e);\n\t}\n}", "path": "sgs-server\\src\\main\\java\\com\\sun\\sgs\\impl\\service\\data\\store\\AbstractDataStore.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * Test upgrade conflict with waiter\n *\n * locker:  read o1\t\t=> granted\n * locker2: read o1\t\t=> granted\n * locker3: write o1\t=> blocked\n * locker2: write o1\t=> blocked\n * locker:  commit\n * locker2:\t\t\t=> blocked\n * locker3:\t\t\t=> blocked\n */\n", "func_signal": "@Test\npublic void testUpgradeWaiterConflict()", "code": "{\n\tassertGranted(acquireLock(locker, \"o1\", false));\n\tLocker<String> locker2 = createLocker(lockManager);\n\tassertGranted(acquireLock(locker2, \"o1\", false));\n\tLocker<String> locker3 = createLocker(lockManager);\n\tAcquireLock acquire3 = new AcquireLock(locker3, \"o1\", true);\n\tacquire3.assertBlocked();\n\tAcquireLock acquire2 = new AcquireLock(locker2, \"o1\", true);\n\tacquire2.assertBlocked();\n\tlockManager.releaseLock(locker, \"o1\");\n\tacquire2.assertBlocked();\n\tacquire3.assertBlocked();\n}", "path": "sgs-server\\src\\test\\java\\com\\sun\\sgs\\test\\impl\\util\\lock\\TestLockManager.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * {@inheritDoc} <p>\n *\n * This implementation does logging, reports name accesses, and calls\n * {@link #nextBoundNameInternal nextBoundNameInternal} to perform the\n * actual operation.\n */\n", "func_signal": "public String nextBoundName(Transaction txn, String name)", "code": "{\n\tif (logger.isLoggable(FINEST)) {\n\t    logger.log(FINEST, \"nextBoundName txn:{0}, name:{1}\", txn, name);\n\t}\n\ttry {\n\t    String result = reportNextNameAccess(\n\t\ttxn, name, nextBoundNameInternal(txn, name), READ);\n\t    if (logger.isLoggable(FINEST)) {\n\t\tlogger.log(FINEST,\n\t\t\t   \"nextBoundName txn:{0}, name:{1} returns {2}\",\n\t\t\t   txn, name, result);\n\t    }\n\t    return result;\n\t} catch (RuntimeException e) {\n\t    throw handleException(\n\t\ttxn, FINEST, e, \"nextBoundName txn:\" + txn + \", name:\" + name);\n\t}\n}", "path": "sgs-server\\src\\main\\java\\com\\sun\\sgs\\impl\\service\\data\\store\\AbstractDataStore.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void setBindingDescription(\n\tTransaction txn, String name, Object description)", "code": "{\n\tcheckNull(\"name\", name);\n\tcheckNull(\"description\", description);\n\ttry {\n\t    nameAccesses.setObjectDescription(\n\t\ttxn, getNameForAccess(name), description);\n\t} catch (IllegalArgumentException e) {\n\t    throw new IllegalStateException(\n\t\t\"Problem with transaction \" + txn + \": \" + e.getMessage(), e);\n\t}\n}", "path": "sgs-server\\src\\main\\java\\com\\sun\\sgs\\impl\\service\\data\\store\\AbstractDataStore.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "/**\n * Test read/upgrade conflict\n *\n * locker2: read o1\t\t=> granted\n * locker:  read o1\t\t=> granted\n * locker:  write o1\t=> blocked\n * locker2: commit\n * locker:\t\t\t=> granted\n */\n", "func_signal": "@Test\npublic void testUpgradeConflict() throws Exception", "code": "{\n\tLocker<String> locker2 = createLocker(lockManager);\n\tassertGranted(acquireLock(locker2, \"o1\", false));\n\tassertGranted(acquireLock(locker, \"o1\", false));\n\tAcquireLock acquire = new AcquireLock(locker, \"o1\", true);\n\tacquire.assertBlocked();\n\tlockManager.releaseLock(locker2, \"o1\");\n\tassertGranted(acquire.getResult());\n}", "path": "sgs-server\\src\\test\\java\\com\\sun\\sgs\\test\\impl\\util\\lock\\TestLockManager.java", "repo_name": "luontola/sgs-server", "stars": 7, "license": "None", "language": "java", "size": 5331}
{"docstring": "//GEN-LAST:event_jMenuItem1ActionPerformed\n", "func_signal": "private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_jMenuItem2ActionPerformed\n        // TODO add your handling code here:\n        try  {\n                new About().setVisible(true);\n            } catch (Exception ex) {\n                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);\n            }\n    }", "path": "Steganography\\src\\encryptFrame.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jScrollPane1 = new javax.swing.JScrollPane();\n    jTextArea1 = new javax.swing.JTextArea();\n    OK = new javax.swing.JButton();\n    jLabel1 = new javax.swing.JLabel();\n    selectfile = new javax.swing.JTextField();\n    cancel = new javax.swing.JButton();\n    browse = new javax.swing.JButton();\n    jLabel3 = new javax.swing.JLabel();\n    jTextField2 = new javax.swing.JTextField();\n    jLabel4 = new javax.swing.JLabel();\n    jLabel5 = new javax.swing.JLabel();\n    jMenuBar1 = new javax.swing.JMenuBar();\n    jMenu1 = new javax.swing.JMenu();\n    jMenuItem1 = new javax.swing.JMenuItem();\n    jMenu2 = new javax.swing.JMenu();\n    jMenuItem2 = new javax.swing.JMenuItem();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n    jTextArea1.setColumns(20);\n    jTextArea1.setEditable(false);\n    jTextArea1.setRows(5);\n    jScrollPane1.setViewportView(jTextArea1);\n\n    OK.setText(\"OK\");\n    OK.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            OKActionPerformed(evt);\n        }\n    });\n\n    jLabel1.setText(\"Text hidden is:\");\n\n    selectfile.setEditable(false);\n    selectfile.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            selectfileActionPerformed(evt);\n        }\n    });\n\n    cancel.setText(\"Cancel\");\n    cancel.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            cancelActionPerformed(evt);\n        }\n    });\n\n    browse.setText(\"Browse\");\n    browse.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            browseActionPerformed(evt);\n        }\n    });\n\n    jLabel3.setText(\"Enter PIN\");\n\n    jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {\n        public void keyPressed(java.awt.event.KeyEvent evt) {\n            jTextField2KeyPressed(evt);\n        }\n        public void keyReleased(java.awt.event.KeyEvent evt) {\n            jTextField2KeyReleased(evt);\n        }\n        public void keyTyped(java.awt.event.KeyEvent evt) {\n            jTextField2KeyTyped(evt);\n        }\n    });\n\n    jLabel4.setText(\"Choose Image\");\n\n    jLabel5.setText(\"\u00a9 rSteg 1.0\");\n\n    jMenu1.setText(\"File\");\n\n    jMenuItem1.setText(\"Exit\");\n    jMenuItem1.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jMenuItem1ActionPerformed(evt);\n        }\n    });\n    jMenu1.add(jMenuItem1);\n\n    jMenuBar1.add(jMenu1);\n\n    jMenu2.setText(\"Help\");\n\n    jMenuItem2.setText(\"About\");\n    jMenuItem2.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jMenuItem2ActionPerformed(evt);\n        }\n    });\n    jMenu2.add(jMenuItem2);\n\n    jMenuBar1.add(jMenu2);\n\n    setJMenuBar(jMenuBar1);\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(layout.createSequentialGroup()\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(jLabel4)\n                        .addGroup(layout.createSequentialGroup()\n                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                .addGroup(layout.createSequentialGroup()\n                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                                        .addComponent(OK, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                        .addGroup(layout.createSequentialGroup()\n                                            .addComponent(jLabel3)\n                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                    .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                .addComponent(selectfile, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE))\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                            .addComponent(browse, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))\n                        .addComponent(jLabel1)\n                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE))\n                    .addContainerGap())\n                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)))\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel4)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(selectfile, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(browse))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel3)\n                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addGap(22, 22, 22)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(OK)\n                .addComponent(cancel))\n            .addGap(14, 14, 14)\n            .addComponent(jLabel1)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)\n            .addComponent(jLabel5))\n    );\n\n    pack();\n}", "path": "Steganography\\src\\decryptFrame.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "//GEN-LAST:event_cancelActionPerformed\n", "func_signal": "private void browseActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_browseActionPerformed\n        // TODO add your handling code here:\n        int returnVal = fc.showOpenDialog(decryptFrame.this);\n        if (returnVal == JFileChooser.APPROVE_OPTION) {\n            file = fc.getSelectedFile();\n            filename = \"\" + file;\n            selectfile.setText(filename);\n            //This is where a real application would open the file.\n            //log.append(\"Opening: \" + file.getName() + \".\" + newline);\n\n        }\n        // log.setCaretPosition(log.getDocument().getLength());\n}", "path": "Steganography\\src\\decryptFrame.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "//Accept all directories and all gif, jpg, tiff, or png files.\n", "func_signal": "public boolean accept(File f)", "code": "{\n    if (f.isDirectory()) {\n        return true;\n    }\n\n    String extension = Utils.getExtension(f);\n    if (extension != null) {\n        if (extension.equals(Utils.tiff) ||\n            extension.equals(Utils.tif) ||\n            extension.equals(Utils.gif) ||\n            extension.equals(Utils.jpeg) ||\n            extension.equals(Utils.jpg) ||\n            extension.equals(Utils.png)) {\n                return true;\n        } else {\n            return false;\n        }\n    }\n\n    return false;\n}", "path": "Steganography\\src\\ImageFilter.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "//GEN-LAST:event_jButton2ActionPerformed\n", "func_signal": "private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_jMenuItem1ActionPerformed\n        // TODO add your handling code here:\n        try  {\n                new About().setVisible(true);\n            } catch (Exception ex) {\n                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);\n            }\n    }", "path": "Steganography\\src\\Main.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "// End of variables declaration//GEN-END:variables\n", "func_signal": "public static BigInteger toDecimal(BigInteger t)", "code": "{\n    BigInteger s=new BigInteger(\"0\"),rem,two=new BigInteger(\"2\");\n    BigInteger i=new BigInteger(\"1\");\n    while(t.compareTo(new BigInteger(\"0\"))!=0)\n    {\n        rem=t.remainder(new BigInteger(\"10\"));\n        //System.out.println(\"remainder:\"+rem);\n        s=s.add(rem.multiply(i));\n        //System.out.println(\"s=\"+s);\n        i=i.multiply(new BigInteger(\"2\"));\n        //System.out.println(\"i=\"+i);\n        t=t.divide(new BigInteger(\"10\"));\n    }\n    return s;\n}", "path": "Steganography\\src\\decryptFrame.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "//GEN-LAST:event_jMenuItem1ActionPerformed\n", "func_signal": "private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_jMenuItem2ActionPerformed\n        // TODO add your handling code here:\n        try  {\n                new About().setVisible(true);\n            } catch (Exception ex) {\n                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);\n            }\n    }", "path": "Steganography\\src\\decryptFrame.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void browseActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_browseActionPerformed\n        // TODO add your handling code here:\n        int returnVal = fc.showOpenDialog(encryptFrame.this);\n        if (returnVal == JFileChooser.APPROVE_OPTION) {\n                file = fc.getSelectedFile();\n                String filename = \"\" + file;\n                selectfile.setText(filename);\n                //This is where a real application would open the file.\n                //log.append(\"Opening: \" + file.getName() + \".\" + newline);\n\n            } \n           // log.setCaretPosition(log.getDocument().getLength());\n}", "path": "Steganography\\src\\encryptFrame.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jLabel1 = new javax.swing.JLabel();\n    jLabel3 = new javax.swing.JLabel();\n    jButton1 = new javax.swing.JButton();\n    jButton2 = new javax.swing.JButton();\n    jLabel2 = new javax.swing.JLabel();\n    jLabel4 = new javax.swing.JLabel();\n    jMenuBar1 = new javax.swing.JMenuBar();\n    jMenu1 = new javax.swing.JMenu();\n    jMenuItem2 = new javax.swing.JMenuItem();\n    jMenu2 = new javax.swing.JMenu();\n    jMenuItem1 = new javax.swing.JMenuItem();\n\n    jLabel1.setText(\"jLabel1\");\n\n    jLabel3.setText(\"jLabel3\");\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n    jButton1.setText(\"Encryption\");\n    jButton1.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jButton1ActionPerformed(evt);\n        }\n    });\n\n    jButton2.setText(\"Decryption\");\n    jButton2.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jButton2ActionPerformed(evt);\n        }\n    });\n\n    jLabel2.setText(\"Choose one option:\");\n\n    jLabel4.setText(\"\u00a9 rSteg 1.0\");\n\n    jMenu1.setText(\"File\");\n\n    jMenuItem2.setText(\"Exit\");\n    jMenuItem2.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jMenuItem2ActionPerformed(evt);\n        }\n    });\n    jMenu1.add(jMenuItem2);\n\n    jMenuBar1.add(jMenu1);\n\n    jMenu2.setText(\"Help\");\n\n    jMenuItem1.setText(\"About\");\n    jMenuItem1.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jMenuItem1ActionPerformed(evt);\n        }\n    });\n    jMenu2.add(jMenuItem1);\n\n    jMenuBar1.add(jMenu2);\n\n    setJMenuBar(jMenuBar1);\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGap(26, 26, 26)\n            .addComponent(jButton1)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)\n            .addComponent(jButton2)\n            .addGap(39, 39, 39))\n        .addGroup(layout.createSequentialGroup()\n            .addGap(79, 79, 79)\n            .addComponent(jLabel2)\n            .addContainerGap(88, Short.MAX_VALUE))\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n            .addContainerGap(215, Short.MAX_VALUE)\n            .addComponent(jLabel4))\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGap(29, 29, 29)\n            .addComponent(jLabel2)\n            .addGap(18, 18, 18)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jButton1)\n                .addComponent(jButton2))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)\n            .addComponent(jLabel4))\n    );\n\n    pack();\n}", "path": "Steganography\\src\\Main.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "/**\n* @param args the command line arguments\n*/\n", "func_signal": "public static void main(String args[])", "code": "{\n    java.awt.EventQueue.invokeLater(new Runnable() {\n\n        public void run() {\n            try {\n                new encryptFrame().setVisible(true);\n            } catch (Exception ex) {\n\n                Logger.getLogger(encryptFrame.class.getName()).log(Level.SEVERE, null, ex);\n            }\n        }\n    });\n}", "path": "Steganography\\src\\encryptFrame.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "/**\n* @param args the command line arguments\n*/\n", "func_signal": "public static void main(String args[])", "code": "{\n    java.awt.EventQueue.invokeLater(new Runnable() {\n        public void run() {\n            try {\n                new About().setVisible(true);\n            } catch (IOException ex) {\n                Logger.getLogger(About.class.getName()).log(Level.SEVERE, null, ex);\n            }\n    \n\n        }\n    });\n}", "path": "Steganography\\src\\About.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "//GEN-LAST:event_jButton1ActionPerformed\n", "func_signal": "private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_jButton2ActionPerformed\n        // TODO add your handling code here:\n        try  {\n                new decryptFrame().setVisible(true);\n            } catch (Exception ex) {\n                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);\n            }\n    }", "path": "Steganography\\src\\Main.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jButton1 = new javax.swing.JButton();\n    jLabel1 = new javax.swing.JLabel();\n    jScrollPane1 = new javax.swing.JScrollPane();\n    jTextArea1 = new javax.swing.JTextArea();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n    jButton1.setText(\"Done\");\n    jButton1.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jButton1ActionPerformed(evt);\n        }\n    });\n\n    jLabel1.setText(\"About rSteg\");\n\n    jTextArea1.setColumns(20);\n    jTextArea1.setEditable(false);\n    jTextArea1.setRows(5);\n    jTextArea1.setText(\"Version 1.0\\n\\nrSteg has been developed in java\\nusing netbeans.\\n\\nIt has been made by Abhinav Kumar\\nKushwaha, Alok Ranjan, Saurabh Gupta\\nas a part of their IV semester software lab.\\n\\nAll copyrights are reserved to\\nthese people.\");\n    jScrollPane1.setViewportView(jTextArea1);\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(jLabel1))\n                .addGroup(layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE))\n                .addGroup(layout.createSequentialGroup()\n                    .addGap(131, 131, 131)\n                    .addComponent(jButton1)))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel1)\n            .addGap(18, 18, 18)\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addGap(18, 18, 18)\n            .addComponent(jButton1)\n            .addContainerGap(24, Short.MAX_VALUE))\n    );\n\n    pack();\n}", "path": "Steganography\\src\\About.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "/*\n * Get the extension of a file.\n */\n", "func_signal": "public static String getExtension(File f)", "code": "{\n    String ext = null;\n    String s = f.getName();\n    int i = s.lastIndexOf('.');\n\n    if (i > 0 &&  i < s.length() - 1) {\n        ext = s.substring(i+1).toLowerCase();\n    }\n    return ext;\n}", "path": "Steganography\\src\\Utils.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "//GEN-LAST:event_browseActionPerformed\n", "func_signal": "private void OKActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_OKActionPerformed\n        int returnValue = fs.showSaveDialog(encryptFrame.this);\n        if(returnValue == JFileChooser.APPROVE_OPTION)\n        {\n        savefile = fs.getSelectedFile();\n        String saveFileName = \"\" +savefile;\n        int saveFileLength = saveFileName.length();\n        //System.out.println(saveFileName + \"      \"+saveFileLength);\n        if(saveFileLength<4)\n            saveFileName += \".png\";\n        if(saveFileName.charAt(saveFileLength-4)!='.'\n                && saveFileName.charAt(saveFileLength-3)!='p'\n                && saveFileName.charAt(saveFileLength-2)!='n'\n                && saveFileName.charAt(saveFileLength-1)!='g')\n            saveFileName += \".png\";\n        saveFileLength = saveFileName.length();\n        //System.out.println(saveFileName + \"      \"+saveFileLength);\n        msg=jTextArea1.getText();\n        pass = jTextField2.getText();\n        //System.out.println(\"msg=\"+msg+\" pass= \"+pass);\n        //System.out.println(str);\n        code=crypt(new BigInteger(\"3078434453\"),new BigInteger(\"5\"),msg);\n        code1=crypt(new BigInteger(\"3078434453\"),new BigInteger(\"5\"),pass);\n        //System.out.println(\"code=\"+code);\n        int k=code.length();\n        bin1=binary_code(k,code);\n        k = code1.length();\n        bin2 = binary_code(k,code1);\n        //System.out.println(\"bin1=\"+bin1);\n        //System.out.println(\"bin2=\"+bin2);\n        a=bin1.length()+ bin2.length();\n        a1 = bin2.length();\n        bin1 =bin1+ bin2;\n        \n        //System.out.println(\"a=\"+a);\n                    try {\n                        encode(a, file, saveFileName);\n                    } catch (IOException ex1) {\n                        Logger.getLogger(encryptFrame.class.getName()).log(Level.SEVERE, null, ex1);\n                    }\n        }\n        else\n            return;\n\n        this.setVisible(false);\n}", "path": "Steganography\\src\\encryptFrame.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "//GEN-LAST:event_jMenuItem2ActionPerformed\n", "func_signal": "private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_jButton1ActionPerformed\n        try  {\n                new encryptFrame().setVisible(true);\n            } catch (Exception ex) {\n                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);\n            }\n\n    }", "path": "Steganography\\src\\Main.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "// End of variables declaration//GEN-END:variables\n", "func_signal": "public static String crypt(BigInteger n,BigInteger e, String msg1)", "code": "{\n int fp=0,lp=32,j=0,i,c=0;\n BigInteger encod[]=new BigInteger[1000000];\n BigInteger encry[]=new BigInteger[1000000];\n String binary=\"\";\n String coded=new String();\n String sixteen[]=new String[1000000];\n String str=\"\";\n for(i=0;i<msg1.length();i++)\n {\n binary=Integer.toBinaryString(msg1.charAt(i));\n for(j=binary.length();j<8;j++)\n     binary=\"0\"+binary;\n str=str+binary;\n if(i%4==3)\n { sixteen[c++]=str.substring(fp,lp);\n fp=lp;lp=lp+32;}\n\n }\nif(i%4!=0)\n { sixteen[c++]=str.substring(fp,str.length());\n   for(j=sixteen[c-1].length();j<32;j++)\n       sixteen[c-1]=\"0\"+sixteen[c-1];\n}\n for(i=0;i<c;i++)\n {\n     encod[i]=new BigInteger(sixteen[i].toString(), 2);\n     encry[i]=encod[i].modPow(e,n);\n     //System.out.println(sixteen[i]+\" \\t \"+encod[i]+\" \\t \"+encry[i]);\n     binary=Integer.toBinaryString(encry[i].intValue());\n     for(j=binary.length();j<32;j++) binary=\"0\"+binary;\n     //System.out.println(\"okoii\"+binary);\n     //System.out.println(Integer.parseInt(binary.substring(0,8),2));\n     for(j=0;j<32;j+=8)\n    coded=coded+(char)Integer.parseInt(binary.substring(j,j+8),2);\n  }\n    //System.out.println(\"The binarytext is \\\"\"+binary+\"\\\"\");\n//        System.out.println(\"The ciphertext is \\\"\"+coded+\"\\\"\");\n    return(coded);\n}", "path": "Steganography\\src\\encryptFrame.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "/**\n* @param args the command line arguments\n*/\n", "func_signal": "public static void main(String args[])", "code": "{\n    java.awt.EventQueue.invokeLater(new Runnable() {\n        public void run() {\n            new decryptFrame().setVisible(true);\n        }\n    });\n}", "path": "Steganography\\src\\decryptFrame.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jLabel2 = new javax.swing.JLabel();\n    jFrame1 = new javax.swing.JFrame();\n    jScrollPane1 = new javax.swing.JScrollPane();\n    jTextArea1 = new javax.swing.JTextArea();\n    jLabel1 = new javax.swing.JLabel();\n    selectfile = new javax.swing.JTextField();\n    browse = new javax.swing.JButton();\n    OK = new javax.swing.JButton();\n    cancel = new javax.swing.JButton();\n    jLabel3 = new javax.swing.JLabel();\n    jTextField2 = new javax.swing.JTextField();\n    jLabel4 = new javax.swing.JLabel();\n    jLabel5 = new javax.swing.JLabel();\n    jMenuBar1 = new javax.swing.JMenuBar();\n    jMenu1 = new javax.swing.JMenu();\n    jMenuItem1 = new javax.swing.JMenuItem();\n    jMenu2 = new javax.swing.JMenu();\n    jMenuItem2 = new javax.swing.JMenuItem();\n\n    jLabel2.setText(\"jLabel2\");\n\n    javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());\n    jFrame1.getContentPane().setLayout(jFrame1Layout);\n    jFrame1Layout.setHorizontalGroup(\n        jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 400, Short.MAX_VALUE)\n    );\n    jFrame1Layout.setVerticalGroup(\n        jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 300, Short.MAX_VALUE)\n    );\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n    addComponentListener(new java.awt.event.ComponentAdapter() {\n        public void componentHidden(java.awt.event.ComponentEvent evt) {\n            formComponentHidden(evt);\n        }\n    });\n\n    jTextArea1.setColumns(20);\n    jTextArea1.setRows(5);\n    jScrollPane1.setViewportView(jTextArea1);\n\n    jLabel1.setText(\"Enter Text\");\n\n    selectfile.setEditable(false);\n    selectfile.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            selectfileActionPerformed(evt);\n        }\n    });\n\n    browse.setText(\"Browse\");\n    browse.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            browseActionPerformed(evt);\n        }\n    });\n\n    OK.setText(\"OK\");\n    OK.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            OKActionPerformed(evt);\n        }\n    });\n\n    cancel.setText(\"Cancel\");\n    cancel.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            cancelActionPerformed(evt);\n        }\n    });\n\n    jLabel3.setText(\"Enter PIN\");\n\n    jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {\n        public void keyPressed(java.awt.event.KeyEvent evt) {\n            jTextField2KeyPressed(evt);\n        }\n        public void keyReleased(java.awt.event.KeyEvent evt) {\n            jTextField2KeyReleased(evt);\n        }\n        public void keyTyped(java.awt.event.KeyEvent evt) {\n            jTextField2KeyTyped(evt);\n        }\n    });\n\n    jLabel4.setText(\"Choose Image\");\n\n    jLabel5.setText(\"\u00a9 rSteg 1.0\");\n\n    jMenu1.setText(\"File\");\n\n    jMenuItem1.setText(\"Exit\");\n    jMenuItem1.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jMenuItem1ActionPerformed(evt);\n        }\n    });\n    jMenu1.add(jMenuItem1);\n\n    jMenuBar1.add(jMenu1);\n\n    jMenu2.setText(\"Help\");\n\n    jMenuItem2.setText(\"About\");\n    jMenuItem2.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jMenuItem2ActionPerformed(evt);\n        }\n    });\n    jMenu2.add(jMenuItem2);\n\n    jMenuBar1.add(jMenu2);\n\n    setJMenuBar(jMenuBar1);\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(layout.createSequentialGroup()\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)\n                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                                .addComponent(OK, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addGroup(layout.createSequentialGroup()\n                                    .addComponent(jLabel1)\n                                    .addGap(331, 331, 331))\n                                .addComponent(selectfile, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE))\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                                .addComponent(cancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                .addComponent(browse, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)))\n                        .addComponent(jLabel4)\n                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                            .addComponent(jLabel3)\n                            .addGap(18, 18, 18)\n                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                    .addContainerGap())\n                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)))\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGap(22, 22, 22)\n            .addComponent(jLabel1)\n            .addGap(18, 18, 18)\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(jLabel3))\n            .addGap(36, 36, 36)\n            .addComponent(jLabel4)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(browse)\n                .addComponent(selectfile, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addGap(18, 18, 18)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(cancel)\n                .addComponent(OK))\n            .addGap(22, 22, 22)\n            .addComponent(jLabel5))\n    );\n\n    pack();\n}", "path": "Steganography\\src\\encryptFrame.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void OKActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_OKActionPerformed\n        try {\n            // TODO add your handling code here:\n            msg = decrypt(code(filename), new BigInteger(\"3078434453\"), new BigInteger(\"1846993025\"));\n        } catch (IOException ex) {\n            Logger.getLogger(decryptFrame.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        if(pass.equals(jTextField2.getText()))\n            jTextArea1.setText(msg);\n        else\n        {JOptionPane.showMessageDialog(this, \"You have entered a wrong PIN !\");}\n}", "path": "Steganography\\src\\decryptFrame.java", "repo_name": "akush/rSteg", "stars": 4, "license": "None", "language": "java", "size": 4012}
{"docstring": "/**\n * Set one word, 4 bytes, in memory\n * @param start Location in memory from which to offset from\n * @param offset Offset in memory\n * @param rt 32 bit (4 bytes) integer to set in memory\n */\n", "func_signal": "public void setMemory(int start,int offset, int rt)", "code": "{\n\tif(start >= 0x10010000 && start <= 0x10010000 + 4*1024)\n\t\tthis.data.set(start+offset, rt);\n\tif(start <= 0x7FFFEFFF && start >= 0x7FFFEFFF-2*1024)\n\t\tthis.stack.set(start+offset, rt);\n\tif(start >= 0x00400000 && start <= 0x00400000 + 2*1024)\n\t\tthis.instr.set(start+offset, rt);\n}", "path": "MIPSEmulator.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Size in bytes (divisible by 4 so word aligned)\n */\n", "func_signal": "public Memory(int size, int start)", "code": "{\n\tmem = new Integer[(size / 4)];\n\tfor(int i = 0; i < mem.length; i++) {\n\t\tmem[i] = null;\n\t}\n\tthis.size = (size / 4);\n\tthis.start = start;\n\tcurrent = start;\n}", "path": "Memory.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Read a hexidecimal string\n * Can't use parseInt because it fails for 8 character values\n * @param s String to be parsed\n * @return int value from inputed hexadecimal string\n * @throws NumberFormatException throws exception if not a true hex string\n */\n", "func_signal": "public static int loadHex(String s) throws NumberFormatException", "code": "{\n\tint full = 0;\n\tfor(int i = 0; i < s.length(); i++) {\n\t\tint t = Integer.parseInt(s.charAt(i) + \"\", 16);\n\t\tfull = full << 4;\n\t\tfull = full | t;\n\t}\n\treturn full;\n}", "path": "MIPSEmulator.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * If running from command prompt, can run by: \n * java MIPSEmulator a.in\n * Otherwise will ask for a filename\n * @param args optional first argument can be the filename to bread\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tString s = \"\";\n\tif(args.length > 0)\n\t\ts = args[0];\n\tMIPSEmulator m = new MIPSEmulator(s);\n}", "path": "MIPSEmulator.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Set a byte of memory to given value\n * @param start Location in memory to set\n * @param offset Offset from the start location\n * @param val 8 bit value to be saved\n */\n", "func_signal": "public void setMemoryByte(int start, int offset, int val)", "code": "{\n\tval = Memory.getBitsFromVal(val, 0, 7, false);\n\tint word = getFromMemory(start+offset, 0);\n\tint byteOffset= (start+offset) % 4;\n\tword = (Memory.getBitsFromVal(word, 31-8*byteOffset, 31, false) << (31-8*byteOffset)) | (Memory.getBitsFromVal(word, 0, 7*(3-byteOffset), false));\n\t//word = Memory.getBitsFromVal(word, 8, 31, false) << 8;\n\tint newVal = word | (val<<(8*(3-byteOffset)));\n\tthis.setMemory(start+offset, 0, newVal);\n}", "path": "MIPSEmulator.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Display command help\n */\n", "func_signal": "private void outputHelp()", "code": "{\n\tout(\"p [#/HI/LO/PC/all] - print registers either specific #, hi, lo, pc, or all registers\");\n\tout(\"d [#/data/stack] - print memory at specific location, default takes a decimal int\\n\\t-h : take in hex\\n\\t-oh : output hex\\n\\t-ob : output binary\");\n\tout(\"s # - execute next # instructions (# is decimal)\");\n\tout(\"q - quit\");\n}", "path": "MIPSEmulator.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "//Constructor - all executed during object instantiation\n", "func_signal": "public MIPSEmulator(String s)", "code": "{\n\treg = new Register();\n\tdata = new DataSegment();\n\tinstr = new TextSegment();\n\tstack = new StackSegment();\n\t\n\tclrscr();\n\t\n\ttry {\n\t\tif(s.equals(\"\"))\n\t\t\ts = getUserInput(\"Name of your file: \");\n\t\tloadFile(s);\n\t} catch (IOException e) {\n\t\tout(\"failed loading file\");\n\t\treturn;\n\t}\n\t\n\t//Initialize register values\n\treg.pc = instr.getStart();\n\treg.set(29, 0x7FFFEFFC); //initialize $sp\n\treg.set(31, -1); // $ra so as to know when to end the program (on jr -1)\n\treg.set(28, 0x10011000); // set $gp\n\treg.set(30, 0x7FFFEFFC); // set $fp (not sure if right but never really used)\n\t\n\t\n\tString opt = getUserInput(\"Single step (s) or run to complete (c): \");\n\tif(opt.toLowerCase().charAt(0) == 's') {\n\t\tsingleStep();\n\t} else {\n\t\trunToCompletion();\n\t}\n\t\n}", "path": "MIPSEmulator.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Read 8 bits from memory\n * @param start Memory location\n * @param offset Optional offset from memory location\n * @param signed Take the byte as a signed or unsigned value\n * @return the value at the given location byte is returned as an int\n */\n", "func_signal": "public int getMemoryByte(int start, int offset, boolean signed)", "code": "{\n\tint word = getFromMemory(start, offset);\n\tint byteOffset = (start+offset) % 4;\n\tint val = Memory.getBitsFromVal(word,24-8*byteOffset,31-8*byteOffset, signed);\n\treturn val;\n}", "path": "MIPSEmulator.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Load instructions and static data from file into data and instr objects\n * @param filename file to read for hexadecimal formatted commands and data\n * @throws IOException throws exception in case of error reading the file\n */\n", "func_signal": "public void loadFile(String filename) throws IOException", "code": "{\n\tSystem.out.println(\"load file\");\n\tBufferedReader in = new BufferedReader(new FileReader(filename));\n\tString line = \"\";\n\tint i = 0;\n\tboolean hasStartedStaticData = false;\n\twhile((line = in.readLine()) != null) {\n\t\tif(line.equals(\"DATA SEGMENT\")) {\n\t\t\thasStartedStaticData = true;\n\t\t} else if(!line.startsWith(\"0x\")) {\n\t\t\tSystem.out.println(\"ERROR on line \"+ i + \": \" + line);\n\t\t} else {\n\t\t\tif(hasStartedStaticData) {\n\t\t\t\tString[] nums = line.split(\" \");\n\t\t\t\tint loc = loadHex(nums[0].substring(2));\n\t\t\t\tint val = loadHex(nums[1].substring(2));\n\t\t\t\tthis.setMemory(loc, 0, val);\n\t\t\t} else {\n\t\t\t\tline = line.substring(2);\n\t\t\t\tint val = loadHex(line);\n\t\t\t\tinstr.add((Integer)val);\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tin.close();\n}", "path": "MIPSEmulator.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Add a value to the next available spot in memory\n * @param o value to add\n */\n", "func_signal": "public void add(int o)", "code": "{\n\tfor(int i = 0; i < mem.length; i++) {\n\t\tif(mem[i] != null) continue;\n\t\telse {\n\t\t\tmem[i] = o;\n\t\t\treturn;\n\t\t}\n\t}\n\tthrowOverflowError();\n}", "path": "Memory.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Gets the 4 bytes at given memory location\n * This assumes word aligned (4 bytes asked for can not span across two words)\n * @param loc Memory location\n * @return 32 bits (4 bytes) at that location\n */\n", "func_signal": "public int get(Integer loc)", "code": "{\n\tif(mem[getRealLoc(loc)] == null)\n\t\treturn 0;\n\treturn mem[getRealLoc(loc)];\n}", "path": "Memory.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Get specific bits from a memory location\n * @param loc Memory location to pull from\n * @param start starting bit value\n * @param end end bit value\n * @param signed Boolean for whether or not to sign extend\n * @return Requested bits in an int\n */\n", "func_signal": "public int getBits(int loc, int start, int end, boolean signed)", "code": "{\n\tif(start > end) {\n\t\tint temp = end;\n\t\tend = start;\n\t\tstart = temp;\n\t}\n\tint val = mem[getRealLoc(loc)];\n\treturn getBitsFromVal(val, start, end, signed);\n}", "path": "Memory.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Helper function to output to command line\n * @param\ts\t\tMessage to be output\n * @param\tnewLine\tWhether or not to use print or println\n */\n", "func_signal": "public static void out(String s, boolean newLine)", "code": "{\n\tif(newLine) System.out.println(s);\n\telse System.out.print(s);\n}", "path": "MIPSEmulator.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Format an int to be output as hexidecimal\n * similar to Integer.toHexString() but always 8 characters long\n * @param n 32 bit integer to be output as hex\n * @return a string of 8 uppercase hexadecimal characters\n */\n", "func_signal": "public static String formatHex(int n)", "code": "{\n\tString s = Integer.toHexString(n).toUpperCase();\n\twhile(s.length() < 8) {\n\t\ts = \"0\"+s;\n\t}\n\treturn s;\n\t\t\n}", "path": "MIPSEmulator.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Static function to output a message and wait for user input\n * @param message message to output before user input\n * @return the user inputed string\n */\n", "func_signal": "public static String getUserInput(String message)", "code": "{\n\tSystem.out.print(message);\n\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\tString ret = \"\";\n\ttry {\n\t\tret = br.readLine();\n\t} catch (IOException ioe) {\n\t\tSystem.out.println(\"IO ERROR\");\n\t\treturn \"\";\n\t}\t\n\treturn ret;\n}", "path": "MIPSEmulator.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Parse instruction input if it is command involving memory\n * @param instruction input from user\n * @return boolean for if there was an error in the command\n */\n", "func_signal": "private boolean dInstruction(String instruction)", "code": "{\n\tif(instruction.length() <= 2) return false;\n\tString[] parts = instruction.split(\"\\\\s+\");\n\tif(parts.length < 2) return false;\n\tint location = 0;\n\tString address = parts[parts.length-1];\n\tboolean inputHex = false;\n\tint output = 0; //0 is decimal, 1 is binary, 2 is hex;\n\tfor(int i = 1; i < parts.length-1; i++) {\n\t\tif(parts[i].equals(\"-h\"))\n\t\t\tinputHex = true;\n\t\tif(parts[i].equals(\"-oh\"))\n\t\t\toutput = 2;\n\t\tif(parts[i].equals(\"-ob\"))\n\t\t\toutput = 1;\n\t}\n\tif(address.equals(\"stack\")) {\n\t\tthis.stack.printAll();\n\t\treturn true;\n\t}else if (address.equals(\"data\")) {\n\t\tthis.data.printAll();\n\t\treturn true;\n\t} else if(inputHex) {\n\t\ttry {\n\t\t\tif(address.startsWith(\"0x\"))\n\t\t\t\taddress = address.substring(2);\n\t\t\tlocation = loadHex(address);\n\t\t\taddress = \"0x\"+address;\n\t\t} catch (NumberFormatException e) {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\ttry{\n\t\t\tlocation = Integer.parseInt(address);\n\t\t} catch (NumberFormatException e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tString out = \"\";\n\tif(output == 0)\n\t\tout = getFromMemory(location, 0) + \"\";\n\telse if (output == 1)\n\t\tout = Integer.toBinaryString(getFromMemory(location, 0));\n\telse if (output == 2)\n\t\tout = \"0x\"+MIPSEmulator.formatHex(getFromMemory(location, 0));\n\tSystem.out.println(\"MEM[ \" + address + \" ] = \" + out);\n\treturn true;\n}", "path": "MIPSEmulator.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Parse instruction input if it is command involving registers\n * @param instruction input from user\n * @return boolean for if there was an error in the command\n */\n", "func_signal": "private boolean pInstruction(String instruction)", "code": "{\n\tif(instruction.length() <= 2) return false;\n\tString spec = instruction.substring(2);\n\tint loc = 0;\n\tboolean isInt = true;\n\ttry{\n\t\tloc = Integer.parseInt(spec);\n\t} catch (NumberFormatException e) {\n\t\tisInt = false;\n\t}\n\tif (spec.equals(\"all\"))\n\t\treg.printAll();\n\telse if( isInt || spec.equals(\"hi\") || spec.equals(\"lo\") || spec.equals(\"pc\"))\n\t\tif (isInt) reg.printReg(loc);\n\t\telse reg.printReg(spec);\n\telse\n\t\treturn false;\n\treturn true;\n}", "path": "MIPSEmulator.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Static function to get specific bits from a given value\n * @param val Value to take bits from\n * @param start starting bit value\n * @param end ending bit value\n * @param signed boolean for whether or not to sign extend\n * @return requested bits as an int\n */\n", "func_signal": "public static int getBitsFromVal(int val, int start, int end,  boolean signed)", "code": "{\n\tint max = 0xFFFFFFFF;\n\tint mask = (max >>> (31-end)) & (max << start);\n\tval = val & mask;\n\tif(signed) {\n\t\tval = val << (31 - end);\n\t\treturn val >> (start + (31-end));\n\t}\n\treturn val >>> start;\n}", "path": "Memory.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Print all memory locations with a value that is not 0 or null.\n */\n", "func_signal": "public void printAll()", "code": "{\n\tfor(int i = 0; i < mem.length; i++) {\n\t\tif(mem[i] != null && mem[i] != 0) {\n\t\t\tint loc = i*4 + start;\n\t\t\tSystem.out.println(\"0x\"+MIPSEmulator.formatHex(loc).toUpperCase()+\": 0x\"+MIPSEmulator.formatHex(mem[i]).toUpperCase());\n\t\t}\n\t}\n}", "path": "Memory.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Command used to keep screen cleared except for current and last command.\n */\n", "func_signal": "private void clrscr()", "code": "{\n\tfor(int i = 0; i < 100; i++) {\n\t\tout(\"\\n\");\n\t}\n}", "path": "MIPSEmulator.java", "repo_name": "alexbeutel/mips-emulator", "stars": 6, "license": "None", "language": "java", "size": 230}
{"docstring": "/**\n * Configures threshold and interval\n * And registers a listener and start listening\n * @param accelerometerListener\n * \t\t\tcallback for accelerometer events\n * @param threshold\n * \t\t\tminimum acceleration variation for considering shaking\n * @param interval\n * \t\t\tminimum interval between to shake events\n */\n", "func_signal": "public static void startListening(\n\t\tAccelerometerListener accelerometerListener, \n\t\tint threshold, int interval)", "code": "{\n\tconfigure(threshold, interval);\n\tstartListening(accelerometerListener);\n}", "path": "SampleCollection\\SampleAccelerometerSensor\\src\\net\\androgames\\bolg\\sample\\accelerometer\\AccelerometerManager.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/**\n * Create the custom dialog\n */\n", "func_signal": "public CustomDialog create()", "code": "{\n    LayoutInflater inflater = (LayoutInflater) context\n            .getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    // instantiate the dialog with the custom Theme\n    final CustomDialog dialog = new CustomDialog(context, \n    \t\tR.style.Dialog);\n    View layout = inflater.inflate(R.layout.dialog, null);\n    dialog.addContentView(layout, new LayoutParams(\n            LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));\n    // set the dialog title\n    ((TextView) layout.findViewById(R.id.title)).setText(title);\n    // set the confirm button\n    if (positiveButtonText != null) {\n        ((Button) layout.findViewById(R.id.positiveButton))\n                .setText(positiveButtonText);\n        if (positiveButtonClickListener != null) {\n            ((Button) layout.findViewById(R.id.positiveButton))\n                    .setOnClickListener(new View.OnClickListener() {\n                        public void onClick(View v) {\n                            positiveButtonClickListener.onClick(\n                            \t\tdialog, \n                                    DialogInterface.BUTTON_POSITIVE);\n                        }\n                    });\n        }\n    } else {\n        // if no confirm button just set the visibility to GONE\n        layout.findViewById(R.id.positiveButton).setVisibility(\n                View.GONE);\n    }\n    // set the cancel button\n    if (negativeButtonText != null) {\n        ((Button) layout.findViewById(R.id.negativeButton))\n                .setText(negativeButtonText);\n        if (negativeButtonClickListener != null) {\n            ((Button) layout.findViewById(R.id.negativeButton))\n                    .setOnClickListener(new View.OnClickListener() {\n                        public void onClick(View v) {\n                            positiveButtonClickListener.onClick(\n                            \t\tdialog, \n                                    DialogInterface.BUTTON_NEGATIVE);\n                        }\n                    });\n        }\n    } else {\n        // if no confirm button just set the visibility to GONE\n        layout.findViewById(R.id.negativeButton).setVisibility(\n                View.GONE);\n    }\n    // set the content message\n    if (message != null) {\n        ((TextView) layout.findViewById(\n        \t\tR.id.message)).setText(message);\n    } else if (contentView != null) {\n        // if no message set\n        // add the contentView to the dialog body\n        ((LinearLayout) layout.findViewById(R.id.content))\n                .removeAllViews();\n        ((LinearLayout) layout.findViewById(R.id.content))\n                .addView(contentView, \n                        new LayoutParams(\n                                LayoutParams.WRAP_CONTENT, \n                                LayoutParams.WRAP_CONTENT));\n    }\n    dialog.setContentView(layout);\n    return dialog;\n}", "path": "SampleCollection\\SampleCustomDialog\\src\\net\\androgames\\blog\\sample\\customdialog\\dialog\\CustomDialog.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/**\n * Set the positive button resource and it's listener\n * @param positiveButtonText\n * @param listener\n * @return\n */\n", "func_signal": "public Builder setPositiveButton(int positiveButtonText,\n        DialogInterface.OnClickListener listener)", "code": "{\n    this.positiveButtonText = (String) context\n            .getText(positiveButtonText);\n    this.positiveButtonClickListener = listener;\n    return this;\n}", "path": "SampleCollection\\SampleCustomDialog\\src\\net\\androgames\\blog\\sample\\customdialog\\dialog\\CustomDialog.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/**\n * Set the positive button text and it's listener\n * @param positiveButtonText\n * @param listener\n * @return\n */\n", "func_signal": "public Builder setPositiveButton(String positiveButtonText,\n        DialogInterface.OnClickListener listener)", "code": "{\n    this.positiveButtonText = positiveButtonText;\n    this.positiveButtonClickListener = listener;\n    return this;\n}", "path": "SampleCollection\\SampleCustomDialog\\src\\net\\androgames\\blog\\sample\\customdialog\\dialog\\CustomDialog.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/**\n * Set the Dialog message from String\n * @param title\n * @return\n */\n", "func_signal": "public Builder setMessage(String message)", "code": "{\n    this.message = message;\n    return this;\n}", "path": "SampleCollection\\SampleCustomDialog\\src\\net\\androgames\\blog\\sample\\customdialog\\dialog\\CustomDialog.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n}", "path": "SampleCollection\\SampleXMLDrawable\\src\\net\\androgames\\blog\\sample\\xmldrawable\\XMLDrawable.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/**\n * Registers a listener and start listening\n * @param accelerometerListener\n * \t\t\tcallback for accelerometer events\n */\n", "func_signal": "public static void startListening(\n\t\tAccelerometerListener accelerometerListener)", "code": "{\n\tsensorManager = (SensorManager) Accelerometer.getContext().\n\t\t\tgetSystemService(Context.SENSOR_SERVICE);\n\tList<Sensor> sensors = sensorManager.getSensorList(\n\t\t\tSensor.TYPE_ACCELEROMETER);\n\tif (sensors.size() > 0) {\n\t\tsensor = sensors.get(0);\n\t\trunning = sensorManager.registerListener(\n\t\t\t\tsensorEventListener, sensor, \n\t\t\t\tSensorManager.SENSOR_DELAY_GAME);\n\t\tlistener = accelerometerListener;\n\t}\n}", "path": "SampleCollection\\SampleAccelerometerSensor\\src\\net\\androgames\\bolg\\sample\\accelerometer\\AccelerometerManager.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n}", "path": "SampleCollection\\SampleVideoRecorder\\src\\net\\androgames\\blog\\sample\\videorecorder\\VideoRecorder.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/**\n * Set a custom content view for the Dialog.\n * If a message is set, the contentView is not\n * added to the Dialog...\n * @param v\n * @return\n */\n", "func_signal": "public Builder setContentView(View v)", "code": "{\n    this.contentView = v;\n    return this;\n}", "path": "SampleCollection\\SampleCustomDialog\\src\\net\\androgames\\blog\\sample\\customdialog\\dialog\\CustomDialog.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n\n    try {\n\t\t\tURL rssUrl = new URL(\"http://feeds.feedburner.com/Android-er?format=xml\");\n\t\t\tSAXParserFactory mySAXParserFactory = SAXParserFactory.newInstance();\n\t\t\tSAXParser mySAXParser = mySAXParserFactory.newSAXParser();\n\t\t\tXMLReader myXMLReader = mySAXParser.getXMLReader();\n\t\t\tRSSHandler myRSSHandler = new RSSHandler();\n\t\t\tmyXMLReader.setContentHandler(myRSSHandler);\n\t\t\tInputSource myInputSource = new InputSource(rssUrl.openStream());\n\t\t\tmyXMLReader.parse(myInputSource);\n\t\t\t\n\t\t} catch (MalformedURLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (ParserConfigurationException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (SAXException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n    \n\t\tArrayAdapter<String> itemList = new ArrayAdapter<String>(this, R.layout.rsslist, item);\n\t\tsetListAdapter(itemList);\n}", "path": "AndroidSaxRssReader\\AndroidRssReader.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/**\n * Set the Dialog title from String\n * @param title\n * @return\n */\n", "func_signal": "public Builder setTitle(String title)", "code": "{\n    this.title = title;\n    return this;\n}", "path": "SampleCollection\\SampleCustomDialog\\src\\net\\androgames\\blog\\sample\\customdialog\\dialog\\CustomDialog.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n}", "path": "SampleCollection\\SampleCustomListView\\src\\net\\androgames\\blog\\sample\\customlistview\\CustomListView.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n  \n    VideoView myVideoView = (VideoView)findViewById(R.id.videoview);\n  \n    String viewSource =\"***SOURCE HERE****\"; //3gp\n  \n    myVideoView.setVideoURI(Uri.parse(viewSource));\n    myVideoView.setMediaController(new MediaController(this));\n    myVideoView.requestFocus();\n    myVideoView.start();\n\n}", "path": "AndroidVideoView\\src\\AndroidVideoView.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/**\n * Set the Dialog title from resource\n * @param title\n * @return\n */\n", "func_signal": "public Builder setTitle(int title)", "code": "{\n    this.title = (String) context.getText(title);\n    return this;\n}", "path": "SampleCollection\\SampleCustomDialog\\src\\net\\androgames\\blog\\sample\\customdialog\\dialog\\CustomDialog.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/**\n * Unregisters listeners\n */\n", "func_signal": "public static void stopListening()", "code": "{\n\trunning = false;\n\ttry {\n\t\tif (sensorManager != null && sensorEventListener != null) {\n\t\t\tsensorManager.unregisterListener(sensorEventListener);\n\t\t}\n\t} catch (Exception e) {}\n}", "path": "SampleCollection\\SampleAccelerometerSensor\\src\\net\\androgames\\bolg\\sample\\accelerometer\\AccelerometerManager.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/**\n * Set the negative button resource and it's listener\n * @param negativeButtonText\n * @param listener\n * @return\n */\n", "func_signal": "public Builder setNegativeButton(int negativeButtonText,\n        DialogInterface.OnClickListener listener)", "code": "{\n    this.negativeButtonText = (String) context\n            .getText(negativeButtonText);\n    this.negativeButtonClickListener = listener;\n    return this;\n}", "path": "SampleCollection\\SampleCustomDialog\\src\\net\\androgames\\blog\\sample\\customdialog\\dialog\\CustomDialog.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/**\n * Set the negative button text and it's listener\n * @param negativeButtonText\n * @param listener\n * @return\n */\n", "func_signal": "public Builder setNegativeButton(String negativeButtonText,\n        DialogInterface.OnClickListener listener)", "code": "{\n    this.negativeButtonText = negativeButtonText;\n    this.negativeButtonClickListener = listener;\n    return this;\n}", "path": "SampleCollection\\SampleCustomDialog\\src\\net\\androgames\\blog\\sample\\customdialog\\dialog\\CustomDialog.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/**\n * Returns true if at least one Accelerometer sensor is available\n */\n", "func_signal": "public static boolean isSupported()", "code": "{\n\tif (supported == null) {\n\t\tif (Accelerometer.getContext() != null) {\n\t\t\tsensorManager = (SensorManager) Accelerometer.getContext().\n\t\t\t\t\tgetSystemService(Context.SENSOR_SERVICE);\n\t\t\tList<Sensor> sensors = sensorManager.getSensorList(\n\t\t\t\t\tSensor.TYPE_ACCELEROMETER);\n\t\t\tsupported = new Boolean(sensors.size() > 0);\n\t\t} else {\n\t\t\tsupported = Boolean.FALSE;\n\t\t}\n\t}\n\treturn supported;\n}", "path": "SampleCollection\\SampleAccelerometerSensor\\src\\net\\androgames\\bolg\\sample\\accelerometer\\AccelerometerManager.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/**\n * Set the Dialog message from resource\n * @param title\n * @return\n */\n", "func_signal": "public Builder setMessage(int message)", "code": "{\n    this.message = (String) context.getText(message);\n    return this;\n}", "path": "SampleCollection\\SampleCustomDialog\\src\\net\\androgames\\blog\\sample\\customdialog\\dialog\\CustomDialog.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/**\n * Configure the listener for shaking\n * @param threshold\n * \t\t\tminimum acceleration variation for considering shaking\n * @param interval\n * \t\t\tminimum interval between to shake events\n */\n", "func_signal": "public static void configure(int threshold, int interval)", "code": "{\n\tAccelerometerManager.threshold = threshold;\n\tAccelerometerManager.interval = interval;\n}", "path": "SampleCollection\\SampleAccelerometerSensor\\src\\net\\androgames\\bolg\\sample\\accelerometer\\AccelerometerManager.java", "repo_name": "vladikoff/AndroidLibs", "stars": 5, "license": "None", "language": "java", "size": 708}
{"docstring": "/** Allows the camera to freely look around its origin */\n", "func_signal": "public void look(float azimuthOffset, float elevationOffset)", "code": "{\n\n\n\n    // Calculate the new azimuth and elevation for the camera\n\n    elevation = constrain(elevation - elevationOffset, TOL-HALF_PI, HALF_PI-TOL);\n\n    azimuth = (azimuth - azimuthOffset + TWO_PI) % TWO_PI;\n\n\n\n    // Orbit to the new azimuth and elevation while maintaining the shot distance\n\n    targetX = cameraX - ( shotLength * sin(HALF_PI + elevation) * sin(azimuth));\n\n    targetY = cameraY - (-shotLength * cos(HALF_PI + elevation));\n\n    targetZ = cameraZ - ( shotLength * sin(HALF_PI + elevation) * cos(azimuth));\n\n\n\n    // update the up vector\n\n    updateUp();\n\n}", "path": "spherical_outline\\applet\\spherical_outline.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "/** Jumps the camera to the specified position */\n", "func_signal": "public void jump(float positionX, float positionY, float positionZ)", "code": "{\n\n\n\n    // Move the camera\n\n    this.cameraX = positionX;\n\n    this.cameraY = positionY;\n\n    this.cameraZ = positionZ;\n\n\n\n    // Describe the new vector between the camera and the target\n\n    dx = cameraX - targetX;\n\n    dy = cameraY - targetY;\n\n    dz = cameraZ - targetZ;\n\n\n\n    // Describe the new azimuth and elevation for the camera\n\n    shotLength = sqrt(dx * dx + dy * dy + dz * dz);\n\n    azimuth    = atan2(dx, dz);\n\n    elevation  = constrain(atan2(dy, sqrt(dz * dz + dx * dx)), TOL-HALF_PI, HALF_PI-TOL);\n\n    \n\n    // update the up vector\n\n    updateUp();\n\n}", "path": "spherical_outline\\applet\\spherical_outline.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "/** Send what this camera sees to the view port */\n", "func_signal": "public void feed()", "code": "{\n\n  parent.perspective(fov, aspect, nearClip, farClip);\n\n  parent.camera(cameraX, cameraY, cameraZ,\n\n         targetX, targetY, targetZ,\n\n         upX,     upY,     upZ);\n\n}", "path": "spherical_outline\\applet\\spherical_outline.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "// I mean it! Give me the controls already!\n", "func_signal": "public OCDCamera(PApplet parent,\n\n              float cameraX, float cameraY, float cameraZ,\n\n              float targetX, float targetY, float targetZ,\n\n              float upX,     float upY,     float upZ,\n\n              float fov, float aspect, float nearClip, float farClip)", "code": "{\n\n    this.parent = parent;\n\n    this.cameraX = cameraX;\n\n    this.cameraY = cameraY;\n\n    this.cameraZ = cameraZ;\n\n    this.targetX = targetX;\n\n    this.targetY = targetY;\n\n    this.targetZ = targetZ;\n\n    this.upX = upX;\n\n    this.upY = upY;\n\n    this.upZ = upZ;\n\n    this.fov = fov;\n\n    this.aspect = aspect;\n\n    this.nearClip = nearClip;\n\n    this.farClip = farClip;\n\n    \n\n    dx = cameraX - targetX;\n\n    dy = cameraY - targetY;\n\n    dz = cameraZ - targetZ;\n\n    \n\n    shotLength = sqrt(dx * dx + dy * dy + dz * dz);\n\n    azimuth    = atan2(dx, dz);\n\n    elevation  = atan2(dy, sqrt(dz * dz + dx * dx));\n\n    \n\n    if (elevation > HALF_PI - TOL) {\n\n      this.upY =  0;\n\n      this.upZ = -1;\n\n    }\n\n\n\n    if (elevation < TOL - HALF_PI) {\n\n      this.upY =  0;\n\n      this.upZ =  1;\n\n    }\n\n}", "path": "spherical_outline\\applet\\spherical_outline.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "// ================================================== \n// Super Fast Blur v1.1 \n// by Mario Klingemann  \n// <http://incubator.quasimondo.com> \n// ================================================== \n", "func_signal": "public void fastblur(PImage img,int radius)", "code": "{ \n if (radius<1){ \n    return; \n  } \n  int w=img.width; \n  int h=img.height; \n  int wm=w-1; \n  int hm=h-1; \n  int wh=w*h; \n  int div=radius+radius+1; \n  int r[]=new int[wh]; \n  int g[]=new int[wh]; \n  int b[]=new int[wh]; \n  int rsum,gsum,bsum,x,y,i,p,p1,p2,yp,yi,yw; \n  int vmin[] = new int[max(w,h)]; \n  int vmax[] = new int[max(w,h)]; \n  int[] pix=img.pixels; \n  int dv[]=new int[256*div]; \n  for (i=0;i<256*div;i++){ \n    dv[i]=(i/div); \n  } \n \n  yw=yi=0; \n \n  for (y=0;y<h;y++){ \n    rsum=gsum=bsum=0; \n    for(i=-radius;i<=radius;i++){ \n      p=pix[yi+min(wm,max(i,0))]; \n      rsum+=(p & 0xff0000)>>16; \n      gsum+=(p & 0x00ff00)>>8; \n      bsum+= p & 0x0000ff; \n    } \n    for (x=0;x<w;x++){ \n \n      r[yi]=dv[rsum]; \n      g[yi]=dv[gsum]; \n      b[yi]=dv[bsum]; \n \n      if(y==0){ \n        vmin[x]=min(x+radius+1,wm); \n        vmax[x]=max(x-radius,0); \n      } \n      p1=pix[yw+vmin[x]]; \n      p2=pix[yw+vmax[x]]; \n \n      rsum+=((p1 & 0xff0000)-(p2 & 0xff0000))>>16; \n      gsum+=((p1 & 0x00ff00)-(p2 & 0x00ff00))>>8; \n      bsum+= (p1 & 0x0000ff)-(p2 & 0x0000ff); \n      yi++; \n    } \n    yw+=w; \n  } \n \n  for (x=0;x<w;x++){ \n    rsum=gsum=bsum=0; \n    yp=-radius*w; \n    for(i=-radius;i<=radius;i++){ \n      yi=max(0,yp)+x; \n      rsum+=r[yi]; \n      gsum+=g[yi]; \n      bsum+=b[yi]; \n      yp+=w; \n    } \n    yi=x; \n    for (y=0;y<h;y++){ \n      pix[yi]=0xff000000 | (dv[rsum]<<16) | (dv[gsum]<<8) | dv[bsum]; \n      if(x==0){ \n        vmin[y]=min(y+radius+1,hm)*w; \n        vmax[y]=max(y-radius,0)*w; \n      } \n      p1=x+vmin[y]; \n      p2=x+vmax[y]; \n \n      rsum+=r[p1]-r[p2]; \n      gsum+=g[p1]-g[p2]; \n      bsum+=b[p1]-b[p2]; \n \n      yi+=w; \n    } \n  } \n \n}", "path": "sketch_071021c\\application.windows\\source\\sketch_071021c.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "// ================================================== \n// captureEvent() \n// ================================================== \n", "func_signal": "public void captureEvent(Capture cam)", "code": "{ \n\tcam.read(); \n        aboveThreshold = new ArrayList();\n        clusters = new ArrayList();\n              smartPixel[][] newPixels = new smartPixel[cam.width][cam.height];\n              int redthresh=50;\n              int bluethresh=100;\n              int greenthresh=100;\n              int pointx=0;\n              int pointy=0;\n              int numpoints=0;\n              double z;\n              double f0=12;\n              double k=1/14.0f;\n              for(int i=0;i<cam.width*cam.height;i++)\n               {\n                  if((red(cam.pixels[i])<redthresh)||(blue(cam.pixels[i])<bluethresh)||(green(cam.pixels[i])<greenthresh)){\n                      cam.pixels[i]=color(0,0,0);\n                      newPixels[i%cam.width][i/cam.width] = new smartPixel(null, color(0,0,0), i%cam.width, i/cam.width);\n               }else{\n                     int xpos = (i%cam.width);\n                     int ypos = (i/cam.width);\n                     pointx+=(i%cam.width);\n                     pointy+=(i/cam.width);\n                     numpoints++;\n                     \n                     smartPixel newp = new smartPixel(null, color(255,255,255), xpos, ypos);\n                     \n                     if (xpos > 0) {\n                       smartPixel p1 = newPixels[xpos-1][ypos];\n                     \n                       if (p1.c == color(255,255,255)) {\n                        \n                           p1.clust.sm.add(newp);\n                           newp.clust = p1.clust;\n                           p1.clust.centerx = (p1.clust.centerx*p1.clust.sm.size()+newp.x)/(p1.clust.sm.size()+1);\n                           p1.clust.centery = (p1.clust.centery*p1.clust.sm.size()+newp.y)/(p1.clust.sm.size()+1);\n                         \n                       }\n                     }\n                     if (ypos > 0 && xpos >0) {\n                       smartPixel p2 = newPixels[xpos-1][ypos-1];\n                       if (p2.c == color(255,255,255)) {\n                         if(newp.clust != null) {\n                           unionClusters(newp.clust, p2.clust);\n                         } else {\n                           p2.clust.sm.add(newp);\n                           newp.clust = p2.clust;\n                           p2.clust.centerx = (p2.clust.centerx*p2.clust.sm.size()+newp.x)/(p2.clust.sm.size()+1);\n                           p2.clust.centery = (p2.clust.centery*p2.clust.sm.size()+newp.y)/(p2.clust.sm.size()+1);\n                         }\n                       }\n                     }\n                     if (ypos > 0) {\n                       smartPixel p3 = newPixels[xpos][ypos-1];\n                       if (p3.c == color(255,255,255)) {\n                         if(newp.clust != null) {\n                           unionClusters(newp.clust, p3.clust);\n                         } else {\n                           p3.clust.sm.add(newp);\n                           newp.clust = p3.clust;\n                           p3.clust.centerx = (p3.clust.centerx*p3.clust.sm.size()+newp.x)/(p3.clust.sm.size()+1);\n                           p3.clust.centery = (p3.clust.centery*p3.clust.sm.size()+newp.y)/(p3.clust.sm.size()+1);\n                         }\n                       }\n                     }\n                     if(newp.clust == null) {\n                       cluster newc = new cluster(newp);\n                       clusters.add(newc);\n                       newp.clust = newc;\n                     }\n                     newPixels[xpos][ypos] = newp;\n                     aboveThreshold.add(newp);\n                     \n                     //cam.pixels[i]=color(255,255,255);\n                     \n                  }\n               }\n               /*\n               if(numpoints!=0)\n               {\n               pointx=pointx/numpoints;\n               pointy=pointy/numpoints;\n               }\n               \n               cam.pixels[pointx+pointy*cam.width]=color(255,0,0);\n               if(pointx<(cam.width/2))\n                 z=f0-k*((cam.width/2)-(double)pointx);\n              else\n                z=f0+k*((double)pointx-(cam.width/2));\n                println(\"POINT: \" + pointx);\n                println(z);\n                */\n                for(int q=0;q<clusters.size();++q) {\n                  cluster cc  = (cluster) clusters.get(q);\n                  cam.pixels[PApplet.parseInt(cc.centery)*cam.width+PApplet.parseInt(cc.centerx)] = color(255,0,0); \n                  println(cc.sm.size());\n                }\n\tnewFrame = true; \n}", "path": "sketch_071021c\\applet\\sketch_071021c.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "// ================================================== \n// setup() \n// ================================================== \n", "func_signal": "public void setup()", "code": "{ \n\t// Size of applet \n\tsize(320, 240); \n\t// Capture \n\tcam = new Capture(this, 320, 240, 15); \n\t// BlobDetection \n\t// img which will be sent to detection (a smaller copy of the cam frame); \n\timg = new PImage(320,240);  \n\t//theBlobDetection = new BlobDetection(img.width, img.height); \n\t//theBlobDetection.setPosDiscrimination(true); \n\t//theBlobDetection.setThreshold(0.2f); // will detect bright areas whose luminosity > 0.2f; \n      clusters = new ArrayList();\n}", "path": "sketch_071021c\\application.linux\\source\\sketch_071021c.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "// ================================================== \n// setup() \n// ================================================== \n", "func_signal": "public void setup()", "code": "{ \n\t// Size of applet \n\tsize(320, 240); \n\t// Capture \n\tcam = new Capture(this, 320, 240, 15); \n\t// BlobDetection \n\t// img which will be sent to detection (a smaller copy of the cam frame); \n\timg = new PImage(320,240);  \n\t//theBlobDetection = new BlobDetection(img.width, img.height); \n\t//theBlobDetection.setPosDiscrimination(true); \n\t//theBlobDetection.setThreshold(0.2f); // will detect bright areas whose luminosity > 0.2f; \n      clusters = new ArrayList();\n}", "path": "sketch_071021c\\applet\\sketch_071021c.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "/** Rotates the camera about its Z axis\n\n *  NOTE: rolls will NOT affect the azimuth, but WILL affect plans, trucks, and booms\n\n */\n", "func_signal": "public void roll(float amount)", "code": "{\n\n    // Change the roll amount\n\n    roll += amount;\n\n    \n\n    // Update the up vector\n\n    updateUp();\n\n}", "path": "spherical_outline\\applet\\spherical_outline.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "// ================================================== \n// draw() \n// ================================================== \n", "func_signal": "public void draw()", "code": "{ \n\tif (newFrame) \n\t{ \n                background(255);\n\t\tnewFrame=false; \n\t\t\n\t\timg.copy(cam, 0, 0, cam.width, cam.height,  \n\t\t\t\t0, 0, img.width, img.height);\n                image(cam,0,0,width,height); \n           \n\t\t//fastblur(img, 2);\n                \n\t\t//theBlobDetection.computeBlobs(img.pixels); \n\t\t//drawBlobsAndEdges(true,true); \n\t} \n}", "path": "sketch_071021c\\application.linux\\source\\sketch_071021c.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "// ================================================== \n// captureEvent() \n// ================================================== \n", "func_signal": "public void captureEvent(Capture cam)", "code": "{ \n\tcam.read(); \n        aboveThreshold = new ArrayList();\n        clusters = new ArrayList();\n              smartPixel[][] newPixels = new smartPixel[cam.width][cam.height];\n              int redthresh=50;\n              int bluethresh=100;\n              int greenthresh=100;\n              int pointx=0;\n              int pointy=0;\n              int numpoints=0;\n              double z;\n              double f0=12;\n              double k=1/14.0f;\n              for(int i=0;i<cam.width*cam.height;i++)\n               {\n                  if((red(cam.pixels[i])<redthresh)||(blue(cam.pixels[i])<bluethresh)||(green(cam.pixels[i])<greenthresh)){\n                      cam.pixels[i]=color(0,0,0);\n                      newPixels[i%cam.width][i/cam.width] = new smartPixel(null, color(0,0,0), i%cam.width, i/cam.width);\n               }else{\n                     int xpos = (i%cam.width);\n                     int ypos = (i/cam.width);\n                     pointx+=(i%cam.width);\n                     pointy+=(i/cam.width);\n                     numpoints++;\n                     \n                     smartPixel newp = new smartPixel(null, color(255,255,255), xpos, ypos);\n                     \n                     if (xpos > 0) {\n                       smartPixel p1 = newPixels[xpos-1][ypos];\n                     \n                       if (p1.c == color(255,255,255)) {\n                        \n                           p1.clust.sm.add(newp);\n                           newp.clust = p1.clust;\n                           p1.clust.centerx = (p1.clust.centerx*p1.clust.sm.size()+newp.x)/(p1.clust.sm.size()+1);\n                           p1.clust.centery = (p1.clust.centery*p1.clust.sm.size()+newp.y)/(p1.clust.sm.size()+1);\n                         \n                       }\n                     }\n                     if (ypos > 0 && xpos >0) {\n                       smartPixel p2 = newPixels[xpos-1][ypos-1];\n                       if (p2.c == color(255,255,255)) {\n                         if(newp.clust != null) {\n                           unionClusters(newp.clust, p2.clust);\n                         } else {\n                           p2.clust.sm.add(newp);\n                           newp.clust = p2.clust;\n                           p2.clust.centerx = (p2.clust.centerx*p2.clust.sm.size()+newp.x)/(p2.clust.sm.size()+1);\n                           p2.clust.centery = (p2.clust.centery*p2.clust.sm.size()+newp.y)/(p2.clust.sm.size()+1);\n                         }\n                       }\n                     }\n                     if (ypos > 0) {\n                       smartPixel p3 = newPixels[xpos][ypos-1];\n                       if (p3.c == color(255,255,255)) {\n                         if(newp.clust != null) {\n                           unionClusters(newp.clust, p3.clust);\n                         } else {\n                           p3.clust.sm.add(newp);\n                           newp.clust = p3.clust;\n                           p3.clust.centerx = (p3.clust.centerx*p3.clust.sm.size()+newp.x)/(p3.clust.sm.size()+1);\n                           p3.clust.centery = (p3.clust.centery*p3.clust.sm.size()+newp.y)/(p3.clust.sm.size()+1);\n                         }\n                       }\n                     }\n                     if(newp.clust == null) {\n                       cluster newc = new cluster(newp);\n                       clusters.add(newc);\n                       newp.clust = newc;\n                     }\n                     newPixels[xpos][ypos] = newp;\n                     aboveThreshold.add(newp);\n                     \n                     //cam.pixels[i]=color(255,255,255);\n                     \n                  }\n               }\n               /*\n               if(numpoints!=0)\n               {\n               pointx=pointx/numpoints;\n               pointy=pointy/numpoints;\n               }\n               \n               cam.pixels[pointx+pointy*cam.width]=color(255,0,0);\n               if(pointx<(cam.width/2))\n                 z=f0-k*((cam.width/2)-(double)pointx);\n              else\n                z=f0+k*((double)pointx-(cam.width/2));\n                println(\"POINT: \" + pointx);\n                println(z);\n                */\n                for(int q=0;q<clusters.size();++q) {\n                  cluster cc  = (cluster) clusters.get(q);\n                  cam.pixels[PApplet.parseInt(cc.centery)*cam.width+PApplet.parseInt(cc.centerx)] = color(255,0,0); \n                  println(cc.sm.size());\n                }\n\tnewFrame = true; \n}", "path": "sketch_071021c\\application.linux\\source\\sketch_071021c.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "/** Moves the camera and target simultaneously along the camera's Y axis */\n", "func_signal": "public void boom(float amount)", "code": "{\n\n    // Perform the boom\n\n    cameraX += amount * upX;\n\n    cameraY += amount * upY;\n\n    cameraZ += amount * upZ;\n\n    targetX += amount * upX;\n\n    targetY += amount * upY;\n\n    targetZ += amount * upZ;\n\n}", "path": "spherical_outline\\applet\\spherical_outline.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "// ================================================== \n// setup() \n// ================================================== \n", "func_signal": "public void setup()", "code": "{ \n\t// Size of applet \n\tsize(320, 240); \n\t// Capture \n\tcam = new Capture(this, 320, 240, 15); \n\t// BlobDetection \n\t// img which will be sent to detection (a smaller copy of the cam frame); \n\timg = new PImage(320,240);  \n\t//theBlobDetection = new BlobDetection(img.width, img.height); \n\t//theBlobDetection.setPosDiscrimination(true); \n\t//theBlobDetection.setThreshold(0.2f); // will detect bright areas whose luminosity > 0.2f; \n      clusters = new ArrayList();\n}", "path": "sketch_071021c\\application.windows\\source\\sketch_071021c.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "/** Arcs the camera over (under) a center of interest along a set azimuth*/\n", "func_signal": "public void arc(float elevationOffset)", "code": "{\n\n\n\n    // Calculate the new elevation for the camera\n\n    elevation = constrain(elevation + elevationOffset, TOL-HALF_PI, HALF_PI-TOL);\n\n\n\n    // Orbit to the new azimuth and elevation while maintaining the shot distance\n\n    cameraX = targetX + ( shotLength * sin(HALF_PI + elevation) * sin(azimuth));\n\n    cameraY = targetY + (-shotLength * cos(HALF_PI + elevation));\n\n    cameraZ = targetZ + ( shotLength * sin(HALF_PI + elevation) * cos(azimuth));\n\n\n\n    // update the up vector\n\n    updateUp();\n\n}", "path": "spherical_outline\\applet\\spherical_outline.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "/** Moves the camera and target along the view vector */\n", "func_signal": "public void dolly(float amount)", "code": "{\n\n    float dirX = dx / shotLength;\n\n    float dirY = dy / shotLength;\n\n    float dirZ = dz / shotLength;\n\n    \n\n    cameraX += amount * dirX;\n\n    cameraY += amount * dirY;\n\n    cameraZ += amount * dirZ;\n\n    targetX += amount * dirX;\n\n    targetY += amount * dirY;\n\n    targetZ += amount * dirZ;\n\n}", "path": "spherical_outline\\applet\\spherical_outline.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "/** Rotates the camera about its X axis */\n", "func_signal": "public void tilt(float elevationOffset)", "code": "{\n\n\n\n    // Calculate the new elevation for the camera\n\n    elevation = constrain(elevation - elevationOffset, TOL-HALF_PI, HALF_PI-TOL);\n\n\n\n    // Orbit to the new azimuth and elevation while maintaining the shot distance\n\n    targetX = cameraX - ( shotLength * sin(HALF_PI + elevation) * sin(azimuth));\n\n    targetY = cameraY - (-shotLength * cos(HALF_PI + elevation));\n\n    targetZ = cameraZ - ( shotLength * sin(HALF_PI + elevation) * cos(azimuth));\n\n\n\n    // update the up vector\n\n    updateUp();\n\n}", "path": "spherical_outline\\applet\\spherical_outline.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "// ================================================== \n// draw() \n// ================================================== \n", "func_signal": "public void draw()", "code": "{ \n\tif (newFrame) \n\t{ \n                background(255);\n\t\tnewFrame=false; \n\t\t\n\t\timg.copy(cam, 0, 0, cam.width, cam.height,  \n\t\t\t\t0, 0, img.width, img.height);\n                image(cam,0,0,width,height); \n           \n\t\t//fastblur(img, 2);\n                \n\t\t//theBlobDetection.computeBlobs(img.pixels); \n\t\t//drawBlobsAndEdges(true,true); \n\t} \n}", "path": "sketch_071021c\\application.windows\\source\\sketch_071021c.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "/** */\n", "func_signal": "private void updateUp()", "code": "{\n\n\n\n    // Describe the new vector between the camera and the target\n\n    dx = cameraX - targetX;\n\n    dy = cameraY - targetY;\n\n    dz = cameraZ - targetZ;\n\n\n\n    // Calculate the new \"up\" vector for the camera\n\n    upX = -dx * dy;\n\n    upY =  dz * dz + dx * dx;\n\n    upZ = -dz * dy;\n\n\n\n    // Normalize the \"up\" vector\n\n    float magnitude = sqrt(upX * upX + upY * upY + upZ * upZ);\n\n    magnitude = (magnitude < TOL) ? 1 : magnitude;\n\n    upX /= magnitude;\n\n    upY /= magnitude;\n\n    upZ /= magnitude;\n\n    \n\n    // Calculate the roll if there is one\n\n    if (roll != 0) {\n\n\n\n        // Calculate the camera's \"X\" vector\n\n        float cXx = dy * upZ - dz * upY;\n\n        float cXy = dx * upZ - dz * upX;\n\n        float cXz = dx * upY - dy * upX;\n\n\n\n        // Normalize the \"X\" vector so that it can be scaled\n\n        magnitude = sqrt(cXx * cXx + cXy * cXy + cXz * cXz);\n\n        magnitude = (magnitude < 0.001f) ? 1 : magnitude;\n\n        cXx /= magnitude;\n\n        cXy /= magnitude;\n\n        cXz /= magnitude;\n\n\n\n        // Perform the roll\n\n        cXx *= sin(roll);        \n\n        cXy *= sin(roll);        \n\n        cXz *= sin(roll);        \n\n        upX *= cos(roll);\n\n        upY *= cos(roll);\n\n        upZ *= cos(roll);\n\n        upX += cXx;\n\n        upY += cXy;\n\n        upZ += cXz;\n\n    }\n\n}", "path": "spherical_outline\\applet\\spherical_outline.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "/** Moves the camera and target simultaneously along the camera's X axis */\n", "func_signal": "public void truck(float amount)", "code": "{\n\n\n\n    // Calculate the camera's \"X\" vector\n\n    float cXx = dy * upZ - dz * upY;\n\n    float cXy = dx * upZ - dz * upX;\n\n    float cXz = dx * upY - dy * upX;\n\n\n\n    // Normalize the \"X\" vector so that it can be scaled\n\n    float magnitude = sqrt(cXx * cXx + cXy * cXy + cXz * cXz);\n\n    magnitude = (magnitude < TOL) ? 1 : magnitude;\n\n    cXx /= magnitude;\n\n    cXy /= magnitude;\n\n    cXz /= magnitude;\n\n\n\n    // Perform the truck, if any\n\n    cameraX -= amount * cXx;\n\n    cameraY -= amount * cXy;\n\n    cameraZ -= amount * cXz;\n\n    targetX -= amount * cXx;\n\n    targetY -= amount * cXy;\n\n    targetZ -= amount * cXz;\n\n}", "path": "spherical_outline\\applet\\spherical_outline.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "// ================================================== \n// Super Fast Blur v1.1 \n// by Mario Klingemann  \n// <http://incubator.quasimondo.com> \n// ================================================== \n", "func_signal": "public void fastblur(PImage img,int radius)", "code": "{ \n if (radius<1){ \n    return; \n  } \n  int w=img.width; \n  int h=img.height; \n  int wm=w-1; \n  int hm=h-1; \n  int wh=w*h; \n  int div=radius+radius+1; \n  int r[]=new int[wh]; \n  int g[]=new int[wh]; \n  int b[]=new int[wh]; \n  int rsum,gsum,bsum,x,y,i,p,p1,p2,yp,yi,yw; \n  int vmin[] = new int[max(w,h)]; \n  int vmax[] = new int[max(w,h)]; \n  int[] pix=img.pixels; \n  int dv[]=new int[256*div]; \n  for (i=0;i<256*div;i++){ \n    dv[i]=(i/div); \n  } \n \n  yw=yi=0; \n \n  for (y=0;y<h;y++){ \n    rsum=gsum=bsum=0; \n    for(i=-radius;i<=radius;i++){ \n      p=pix[yi+min(wm,max(i,0))]; \n      rsum+=(p & 0xff0000)>>16; \n      gsum+=(p & 0x00ff00)>>8; \n      bsum+= p & 0x0000ff; \n    } \n    for (x=0;x<w;x++){ \n \n      r[yi]=dv[rsum]; \n      g[yi]=dv[gsum]; \n      b[yi]=dv[bsum]; \n \n      if(y==0){ \n        vmin[x]=min(x+radius+1,wm); \n        vmax[x]=max(x-radius,0); \n      } \n      p1=pix[yw+vmin[x]]; \n      p2=pix[yw+vmax[x]]; \n \n      rsum+=((p1 & 0xff0000)-(p2 & 0xff0000))>>16; \n      gsum+=((p1 & 0x00ff00)-(p2 & 0x00ff00))>>8; \n      bsum+= (p1 & 0x0000ff)-(p2 & 0x0000ff); \n      yi++; \n    } \n    yw+=w; \n  } \n \n  for (x=0;x<w;x++){ \n    rsum=gsum=bsum=0; \n    yp=-radius*w; \n    for(i=-radius;i<=radius;i++){ \n      yi=max(0,yp)+x; \n      rsum+=r[yi]; \n      gsum+=g[yi]; \n      bsum+=b[yi]; \n      yp+=w; \n    } \n    yi=x; \n    for (y=0;y<h;y++){ \n      pix[yi]=0xff000000 | (dv[rsum]<<16) | (dv[gsum]<<8) | dv[bsum]; \n      if(x==0){ \n        vmin[y]=min(y+radius+1,hm)*w; \n        vmax[y]=max(y-radius,0)*w; \n      } \n      p1=x+vmin[y]; \n      p2=x+vmax[y]; \n \n      rsum+=r[p1]-r[p2]; \n      gsum+=g[p1]-g[p2]; \n      bsum+=b[p1]-b[p2]; \n \n      yi+=w; \n    } \n  } \n \n}", "path": "sketch_071021c\\application.linux\\source\\sketch_071021c.java", "repo_name": "enjrolas/processingprojects", "stars": 4, "license": "None", "language": "java", "size": 33868}
{"docstring": "// End of variables declaration//GEN-END:variables\n", "func_signal": "@Override\npublic void setup_page(WizardSettings settings)", "code": "{\n    BigInteger euler = new BigInteger((String)settings.get(\"Euler\"));\n    BigInteger E = new BigInteger((String)settings.get(\"E\"));\n    \n    // Docs: http://en.wikipedia.org/wiki/Modular_multiplicative_inverse \n    D.setText(E.modInverse(euler).toString());\n}", "path": "src\\playrsa\\pages\\Step4.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "// End of variables declaration//GEN-END:variables\n", "func_signal": "@Override\npublic void setup_page(WizardSettings settings)", "code": "{\n    BigInteger P = new BigInteger((String) settings.get(\"P\"));\n    BigInteger Q = new BigInteger((String) settings.get(\"Q\"));\n    N.setText(P.multiply(Q).toString());\n    \n    BigInteger one = new BigInteger(\"1\");\n    Euler.setText(P.subtract(one).multiply(Q.subtract(one)).toString());\n}", "path": "src\\playrsa\\pages\\Step2.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jTabbedPane1 = new javax.swing.JTabbedPane();\n    jPanel1 = new javax.swing.JPanel();\n    jLabel5 = new javax.swing.JLabel();\n    jLabel6 = new javax.swing.JLabel();\n    jLabel7 = new javax.swing.JLabel();\n    jLabel8 = new javax.swing.JLabel();\n    jLabel9 = new javax.swing.JLabel();\n    jLabel11 = new javax.swing.JLabel();\n    jLabel12 = new javax.swing.JLabel();\n    jLabel13 = new javax.swing.JLabel();\n    jLabel14 = new javax.swing.JLabel();\n    jLabel15 = new javax.swing.JLabel();\n    jPanel2 = new javax.swing.JPanel();\n    jLabel3 = new javax.swing.JLabel();\n    jTextPane1 = new javax.swing.JTextPane();\n    jLabel1 = new javax.swing.JLabel();\n    jTextPane4 = new javax.swing.JTextPane();\n    jSeparator1 = new javax.swing.JSeparator();\n    jLabel16 = new javax.swing.JLabel();\n    jLabel2 = new javax.swing.JLabel();\n    D = new javax.swing.JTextField();\n    D.setName(\"D\");\n    jTextPane2 = new javax.swing.JTextPane();\n\n    jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));\n    jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);\n\n    jPanel1.setBackground(new java.awt.Color(255, 255, 255));\n\n    jLabel5.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel5.setText(\"1. Algoritm RSA - Generalitati\");\n\n    jLabel6.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel6.setText(\"1.1 Pas 1\");\n\n    jLabel7.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel7.setText(\"1.2 Pas 2\");\n\n    jLabel8.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel8.setText(\"1.3 Pas 3\");\n\n    jLabel9.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel9.setText(\"1.4 Pas 4\");\n\n    jLabel11.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel11.setText(\"2. Perechea de chei\");\n\n    jLabel12.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel12.setText(\"3. Introducere mesaj\");\n\n    jLabel13.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel13.setText(\"4. Mesaj criptat\");\n\n    jLabel14.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel14.setText(\"5. Mesaj decriptat\");\n\n    jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/playrsa/pages/rsa.jpeg\"))); // NOI18N\n    jLabel15.setMaximumSize(new java.awt.Dimension(145, 89));\n    jLabel15.setMinimumSize(new java.awt.Dimension(125, 89));\n    jLabel15.setPreferredSize(new java.awt.Dimension(100, 100));\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()\n                        .addGap(10, 10, 10)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel6)\n                            .addComponent(jLabel7)\n                            .addComponent(jLabel8)\n                            .addComponent(jLabel9))))\n                .addComponent(jLabel11)\n                .addComponent(jLabel12)\n                .addComponent(jLabel13)\n                .addComponent(jLabel14))\n            .addContainerGap())\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel5)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jLabel6)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel7)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel8)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel9)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel11)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel12)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel13)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel14)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    jTabbedPane1.addTab(\"Pasi\", jPanel1);\n\n    jPanel2.setBackground(new java.awt.Color(255, 255, 255));\n\n    jLabel3.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel3.setText(\"Algoritmul extins al lui Euclid\");\n\n    jTextPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));\n    jTextPane1.setEditable(false);\n    jTextPane1.setFont(new java.awt.Font(\"Tahoma\", 0, 13));\n    jTextPane1.setText(\"este o extindere a algoritmului Euclidian, pentru gasirea celui mai mare divizor comun [greatest common divisor (GCD)] a doua numere intregi a si b: gaseste de asemenea si intregii x si y din Identitatea lui Bezout.\\n        ax + by = gcd(a,b) \\n(in mod normal fie x fie y sunt negative)\\n   Algoritmul extins al lu Euclid este folositor in mod particular cand a si b sunt coprime, x fiind in acest caz multiplu modular invers al a modulo b \");\n\n    jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/playrsa/pages/euclid.jpg\"))); // NOI18N\n\n    jTextPane4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));\n    jTextPane4.setEditable(false);\n    jTextPane4.setFont(new java.awt.Font(\"Tahoma\", 0, 13));\n    jTextPane4.setText(\"Euclid\\nfl. 300BC\");\n\n    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n    jPanel2.setLayout(jPanel2Layout);\n    jPanel2Layout.setHorizontalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()\n            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(jTextPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)\n                .addGroup(jPanel2Layout.createSequentialGroup()\n                    .addGap(10, 10, 10)\n                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))\n            .addGap(0, 0, 0))\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jTextPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)\n            .addGap(18, 18, 18)\n            .addComponent(jLabel1)\n            .addContainerGap())\n    );\n    jPanel2Layout.setVerticalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel2Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jTextPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(jLabel1)\n                .addComponent(jTextPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap())\n    );\n\n    jTabbedPane1.addTab(\"Ajutor\", jPanel2);\n\n    jSeparator1.setForeground(new java.awt.Color(0, 0, 0));\n\n    jLabel16.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel16.setText(\"Calcularea lui d - exponent secret\");\n\n    jLabel2.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel2.setText(\"d:\");\n\n    jTextPane2.setBackground(new java.awt.Color(238, 238, 238));\n    jTextPane2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));\n    jTextPane2.setEditable(false);\n    jTextPane2.setFont(new java.awt.Font(\"Tahoma\", 0, 14)); // NOI18N\n    jTextPane2.setText(\"   Se calculeaza exponentul secret [secret exponent] / exponentul de decriptare [decryption exponent] d care satisface conditiile:\\n\\n             -  1 < d < \u03c6\\n             -  e x d = 1 mod  \u03c6\\n\\ncu ajutorul algoritmului extins al lui Euclid (numit si inversare modulo)\\n\\n             d= e ^ (-1) mod \u03c6 \\n\\nsau altfel spus, d satisface relatia de congruenta (din aritmetica modulara introdusa de Gauss in 1801) de \u039e   1 (mod \u03c6(pq) ), adica ed - 1 se imparte in mod exact la functia lui Euler (p-1)(q-1)\\n\\n   Valoarea exponentului d calculata este prezentata mai jos:\\n\");\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n    this.setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(jTextPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)\n                .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(jLabel2)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(D, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGroup(layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(jLabel16)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGap(11, 11, 11)\n                    .addComponent(jTextPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGap(18, 18, 18)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(D, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(jLabel2))))\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n}", "path": "src\\playrsa\\pages\\Step4.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "// End of variables declaration//GEN-END:variables\n", "func_signal": "@Override\npublic void setup_page(WizardSettings settings)", "code": "{\n    String encryptedMessage = (String) settings.get(\"EncryptedMessage\");\n    String parts[] = encryptedMessage.trim().split(\" \");\n\n    BigInteger n = new BigInteger((String) settings.get(\"N\"));\n    BigInteger d = new BigInteger((String) settings.get(\"D\"));\n\n    String result = \"\";\n    for(String ch : parts) {\n        BigInteger c = new BigInteger(ch);\n        BigInteger m = c.modPow(d, n);\n        result += (char)m.intValue();\n    }\n    DecryptedMessage.setText(result);\n}", "path": "src\\playrsa\\pages\\DecryptedMessagePage.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_jButton1ActionPerformed\n        generatePrime(P, numberOfBits / 2);\n        generatePrime(Q, numberOfBits / 2);\n    }", "path": "src\\playrsa\\pages\\Step1.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "// End of variables declaration//GEN-END:variables\n", "func_signal": "@Override\npublic void setup_page(WizardSettings settings)", "code": "{\n    BigInteger n= new BigInteger((String)settings.get(\"N\"));\n    BigInteger euler= new BigInteger((String)settings.get(\"E\"));\n    BigInteger d= new BigInteger((String)settings.get(\"D\"));\n    PUK.setText(\"(\"+n.toString()+\",\"+euler.toString()+\")\");\n    PRK.setText(\"(\"+n.toString()+\",\"+d.toString()+\")\");        \n}", "path": "src\\playrsa\\pages\\KeyPairPage.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jTabbedPane1 = new javax.swing.JTabbedPane();\n    jPanel1 = new javax.swing.JPanel();\n    jLabel5 = new javax.swing.JLabel();\n    jLabel6 = new javax.swing.JLabel();\n    jLabel7 = new javax.swing.JLabel();\n    jLabel8 = new javax.swing.JLabel();\n    jLabel9 = new javax.swing.JLabel();\n    jLabel11 = new javax.swing.JLabel();\n    jLabel12 = new javax.swing.JLabel();\n    jLabel13 = new javax.swing.JLabel();\n    jLabel14 = new javax.swing.JLabel();\n    jLabel15 = new javax.swing.JLabel();\n    jPanel2 = new javax.swing.JPanel();\n    jLabel1 = new javax.swing.JLabel();\n    jTextPane1 = new javax.swing.JTextPane();\n    jLabel2 = new javax.swing.JLabel();\n    jLabel10 = new javax.swing.JLabel();\n    jTextPane4 = new javax.swing.JTextPane();\n    jSeparator1 = new javax.swing.JSeparator();\n    jLabel16 = new javax.swing.JLabel();\n    jLabel3 = new javax.swing.JLabel();\n    N = new javax.swing.JTextField();\n    N.setName(\"N\");\n    jLabel4 = new javax.swing.JLabel();\n    Euler = new javax.swing.JTextField();\n    Euler.setName(\"Euler\");\n    jTextPane2 = new javax.swing.JTextPane();\n    jTextPane3 = new javax.swing.JTextPane();\n\n    jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));\n    jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);\n\n    jPanel1.setBackground(new java.awt.Color(255, 255, 255));\n\n    jLabel5.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel5.setText(\"1. Algoritm RSA - Generalitati\");\n\n    jLabel6.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel6.setText(\"1.1 Pas 1\");\n\n    jLabel7.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel7.setText(\"1.2 Pas 2\");\n\n    jLabel8.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel8.setText(\"1.3 Pas 3\");\n\n    jLabel9.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel9.setText(\"1.4 Pas 4\");\n\n    jLabel11.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel11.setText(\"2. Perechea de chei\");\n\n    jLabel12.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel12.setText(\"3. Introducere mesaj\");\n\n    jLabel13.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel13.setText(\"4. Mesaj criptat\");\n\n    jLabel14.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel14.setText(\"5. Mesaj decriptat\");\n\n    jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/playrsa/pages/rsa.jpeg\"))); // NOI18N\n    jLabel15.setMaximumSize(new java.awt.Dimension(145, 89));\n    jLabel15.setMinimumSize(new java.awt.Dimension(125, 89));\n    jLabel15.setPreferredSize(new java.awt.Dimension(100, 100));\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)\n                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addGroup(jPanel1Layout.createSequentialGroup()\n                    .addGap(10, 10, 10)\n                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(jLabel6)\n                        .addComponent(jLabel7)\n                        .addComponent(jLabel8)\n                        .addComponent(jLabel9)))\n                .addComponent(jLabel11)\n                .addComponent(jLabel12)\n                .addComponent(jLabel13)\n                .addComponent(jLabel14))\n            .addContainerGap())\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel5)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jLabel6)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel7)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel8)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel9)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel11)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel12)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel13)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel14)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    jTabbedPane1.addTab(\"Pasi\", jPanel1);\n\n    jPanel2.setBackground(new java.awt.Color(255, 255, 255));\n\n    jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/playrsa/pages/Euler.jpg\"))); // NOI18N\n\n    jTextPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));\n    jTextPane1.setEditable(false);\n    jTextPane1.setFont(new java.awt.Font(\"Tahoma\", 0, 13));\n    jTextPane1.setText(\"          Leonhard Euler a fost un matematician \u015fi fizician elve\u0163ian pionier ce si-a petrecut cea mai mare parte a vie\u0163ii \u00een Rusia \u015fi Germania. A facut descoperiri importante \u00een domenii diverse, cum ar fi calculul infinitezimal \u015fi teoria grafurilor. El a introdus, de asemenea, o mare parte a terminologiei si notatiei matematice moderne, \u00een special pentru analiza matematica, cum ar fi no\u0163iunea unei func\u0163ii matematice.Este renumit, de asemenea, pentru activitatea sa in\");\n\n    jLabel2.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel2.setText(\"Leonhard Euler\");\n\n    jLabel10.setText(\"(15 Aprilie 1707 \u2013 18 Septembrie 1783)\");\n\n    jTextPane4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));\n    jTextPane4.setEditable(false);\n    jTextPane4.setFont(new java.awt.Font(\"Tahoma\", 0, 13));\n    jTextPane4.setText(\"mecanica, dinamica fluidelor, optica si astronomie.\\n          \");\n\n    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n    jPanel2.setLayout(jPanel2Layout);\n    jPanel2Layout.setHorizontalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel2Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel2)\n            .addContainerGap(102, Short.MAX_VALUE))\n        .addGroup(jPanel2Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel10)\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()\n            .addGap(4, 4, 4)\n            .addComponent(jTextPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addGap(22, 22, 22))\n        .addComponent(jTextPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)\n    );\n    jPanel2Layout.setVerticalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel2Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel2)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel10)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jTextPane1)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jTextPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n\n    jTabbedPane1.addTab(\"Ajutor\", jPanel2);\n\n    jSeparator1.setForeground(new java.awt.Color(0, 0, 0));\n\n    jLabel16.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel16.setText(\"Calcularea lui n si \u03c6\");\n\n    jLabel3.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel3.setText(\"n:\");\n\n    jLabel4.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel4.setText(\"\u03c6:\");\n\n    jTextPane2.setBackground(new java.awt.Color(238, 238, 238));\n    jTextPane2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));\n    jTextPane2.setEditable(false);\n    jTextPane2.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jTextPane2.setText(\"    Se calculeaza numerul n ca fiind produsul celor doua numere prime p si q alese la pasul precedent. Rezultatul este cel de mai jos:\");\n\n    jTextPane3.setBackground(new java.awt.Color(238, 238, 238));\n    jTextPane3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));\n    jTextPane3.setEditable(false);\n    jTextPane3.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jTextPane3.setText(\"    Se calculeaza \u03c6(n) - Functia totient a lui Euler\\n    Aceasta functie are ca rezultat numarul de numere intregi pozitive mai mici decat n si coprime cu n. Pentru a putea evalua valoarea functiei \u03c6(n), plecam de la Teorema fundamentala a aritmeticii, care ne spune ca orice numar natural mai mare ca 1, are o factorizare unica in termeni reprezentati de numere prime.\\n    De exemplu, daca avem numarul 30, factorizarea acestuia de numere prime va fi 2 x 3 x 5. De asemenea pentru n=72, vom gasi ca se factorizeaza in 8 x 9 = 2^3 x 3^2.\\n    Pentru n numar prim, va rezulta ca toate numerele pozitive intregi mai mici decat n, vor fi coprime cu n, asadar \u03c6(n)=n-1.\\n   Tinand cont de faptul ca \u03c6(1)=1 si functia totient a lui Euler este multiplicativa, putem ajunge usor la concluzia ca \u03c6(n x m)= \u03c6(n) x \u03c6(m).\\n   Asadar, in cazul nostru, vom avea \u03c6(n) = \u03c6(p) x \u03c6(q) = (p-1) x (q-1). Rezultatul este cel de mai jos:   \\n\\t\\n    \\t\");\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n    this.setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jTextPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)\n                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                    .addComponent(jLabel3)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(N, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE))\n                .addComponent(jTextPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)\n                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                    .addComponent(jLabel4)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(Euler, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGroup(layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(jLabel16)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGap(11, 11, 11)\n                    .addComponent(jTextPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(jLabel3)\n                        .addComponent(N, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jTextPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(Euler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(jLabel4))))\n            .addContainerGap())\n    );\n}", "path": "src\\playrsa\\pages\\Step2.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jTabbedPane1 = new javax.swing.JTabbedPane();\n    jPanel1 = new javax.swing.JPanel();\n    jLabel5 = new javax.swing.JLabel();\n    jLabel6 = new javax.swing.JLabel();\n    jLabel7 = new javax.swing.JLabel();\n    jLabel8 = new javax.swing.JLabel();\n    jLabel10 = new javax.swing.JLabel();\n    jLabel11 = new javax.swing.JLabel();\n    jLabel12 = new javax.swing.JLabel();\n    jLabel13 = new javax.swing.JLabel();\n    jLabel14 = new javax.swing.JLabel();\n    jLabel15 = new javax.swing.JLabel();\n    jPanel2 = new javax.swing.JPanel();\n    jSeparator1 = new javax.swing.JSeparator();\n    jLabel16 = new javax.swing.JLabel();\n    jLabel17 = new javax.swing.JLabel();\n    E = new javax.swing.JTextField();\n    E.setName(\"E\");\n    jButton1 = new javax.swing.JButton();\n    jTextPane2 = new javax.swing.JTextPane();\n\n    jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));\n    jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);\n\n    jPanel1.setBackground(new java.awt.Color(255, 255, 255));\n\n    jLabel5.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel5.setText(\"1. Algoritm RSA - Generalitati\");\n\n    jLabel6.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel6.setText(\"1.1 Pas 1\");\n\n    jLabel7.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel7.setText(\"1.2 Pas 2\");\n\n    jLabel8.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel8.setText(\"1.3 Pas 3\");\n\n    jLabel10.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel10.setText(\"1.4 Pas 4\");\n\n    jLabel11.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel11.setText(\"2. Perechea de chei\");\n\n    jLabel12.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel12.setText(\"3. Introducere mesaj\");\n\n    jLabel13.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel13.setText(\"4. Mesaj criptat\");\n\n    jLabel14.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel14.setText(\"5. Mesaj decriptat\");\n\n    jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/playrsa/pages/rsa.jpeg\"))); // NOI18N\n    jLabel15.setMaximumSize(new java.awt.Dimension(145, 89));\n    jLabel15.setMinimumSize(new java.awt.Dimension(125, 89));\n    jLabel15.setPreferredSize(new java.awt.Dimension(100, 100));\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()\n                        .addGap(10, 10, 10)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel6)\n                            .addComponent(jLabel7)\n                            .addComponent(jLabel8)\n                            .addComponent(jLabel10))))\n                .addComponent(jLabel11)\n                .addComponent(jLabel12)\n                .addComponent(jLabel13)\n                .addComponent(jLabel14))\n            .addContainerGap())\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel5)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jLabel6)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel7)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel8)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel10)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel11)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel12)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel13)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel14)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    jTabbedPane1.addTab(\"Pasi\", jPanel1);\n\n    jPanel2.setBackground(new java.awt.Color(255, 255, 255));\n\n    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n    jPanel2.setLayout(jPanel2Layout);\n    jPanel2Layout.setHorizontalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 221, Short.MAX_VALUE)\n    );\n    jPanel2Layout.setVerticalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 422, Short.MAX_VALUE)\n    );\n\n    jTabbedPane1.addTab(\"Ajutor\", jPanel2);\n\n    jSeparator1.setForeground(new java.awt.Color(0, 0, 0));\n\n    jLabel16.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel16.setText(\"Alegerea lui e - exponent public\");\n\n    jLabel17.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel17.setText(\"e:\");\n\n    jButton1.setText(\"Regenereaza\");\n    jButton1.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jButton1ActionPerformed(evt);\n        }\n    });\n\n    jTextPane2.setBackground(new java.awt.Color(238, 238, 238));\n    jTextPane2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));\n    jTextPane2.setEditable(false);\n    jTextPane2.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jTextPane2.setText(\"   Se alege un numar intreg e - numit exponent public [public exponent] / exponent de criptare [encryption exponent] care sa satisfaca urmatoarele conditii :\\n\\n             -  1 < e < \u03c6\\n             -  cmmdc (e, \u03c6) = 1 \\n\\n(unde cmmdc (x,y) este cel mai mare divizor comun al numerelor x si y)\\n   In practica se aleg, de regula: 3, 17 si 65 537 (= 2^16 +1) - numere Fermat care fac ridicarea la putere modulo (din algoritmul de decriptare - detaliat in unul din pasii urmatori) sa se faca mai usor.\\n   O alegere potrivita a lui e este aceea avand doar doi biti de valoare 1 (\\\"greutatea\\\" Hamming sa fie egala cu 2); valorile 3, 17, 65 537 (sugerate mai sus) indeplinesc aceasta cerinta (primul la exprimarea in binar, celelalte doua in hexazecimal).Cu toate acestea, valori mici prem 3, s-au dovedit a fi mai putin sigure in anuite configuratii. Un numar e (ce indeplineste conditiile) generat aleator este prezentat mai jos :\");\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n    this.setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                    .addComponent(jTextPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 675, Short.MAX_VALUE)\n                    .addContainerGap())\n                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                        .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addGap(89, 89, 89))\n                .addGroup(layout.createSequentialGroup()\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                            .addComponent(jLabel17)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                            .addComponent(E, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE))\n                        .addComponent(jButton1))\n                    .addContainerGap())))\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGroup(layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(jLabel16)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(jTextPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGap(18, 18, 18)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(E, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(jLabel17))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(jButton1)))\n            .addContainerGap(89, Short.MAX_VALUE))\n    );\n}", "path": "src\\playrsa\\pages\\Step3.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jLabel1 = new javax.swing.JLabel();\n    jScrollPane1 = new javax.swing.JScrollPane();\n    Message = new javax.swing.JTextArea();\n    Message.setName(\"Message\");\n    jTabbedPane1 = new javax.swing.JTabbedPane();\n    jPanel1 = new javax.swing.JPanel();\n    jLabel5 = new javax.swing.JLabel();\n    jLabel6 = new javax.swing.JLabel();\n    jLabel7 = new javax.swing.JLabel();\n    jLabel8 = new javax.swing.JLabel();\n    jLabel9 = new javax.swing.JLabel();\n    jLabel11 = new javax.swing.JLabel();\n    jLabel12 = new javax.swing.JLabel();\n    jLabel13 = new javax.swing.JLabel();\n    jLabel14 = new javax.swing.JLabel();\n    jLabel15 = new javax.swing.JLabel();\n    jPanel2 = new javax.swing.JPanel();\n    jTextPane1 = new javax.swing.JTextPane();\n    jLabel16 = new javax.swing.JLabel();\n    jSeparator1 = new javax.swing.JSeparator();\n    jTextPane3 = new javax.swing.JTextPane();\n\n    jLabel1.setFont(new java.awt.Font(\"Tahoma\", 0, 14)); // NOI18N\n    jLabel1.setText(\"Mesaj\");\n\n    Message.setColumns(20);\n    Message.setRows(5);\n    Message.setText(\"A random text message\");\n    jScrollPane1.setViewportView(Message);\n\n    jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));\n    jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);\n\n    jPanel1.setBackground(new java.awt.Color(255, 255, 255));\n\n    jLabel5.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel5.setText(\"1. Algoritm RSA - Generalitati\");\n\n    jLabel6.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel6.setText(\"1.1 Pas 1\");\n\n    jLabel7.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel7.setText(\"1.2 Pas 2\");\n\n    jLabel8.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel8.setText(\"1.3 Pas 3\");\n\n    jLabel9.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel9.setText(\"1.4 Pas 4\");\n\n    jLabel11.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel11.setText(\"2. Perechea de chei\");\n\n    jLabel12.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel12.setText(\"3. Introducere mesaj\");\n\n    jLabel13.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel13.setText(\"4. Mesaj criptat\");\n\n    jLabel14.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel14.setText(\"5. Mesaj decriptat\");\n\n    jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/playrsa/pages/rsa.jpeg\"))); // NOI18N\n    jLabel15.setMaximumSize(new java.awt.Dimension(145, 89));\n    jLabel15.setMinimumSize(new java.awt.Dimension(125, 89));\n    jLabel15.setPreferredSize(new java.awt.Dimension(100, 100));\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()\n                        .addGap(10, 10, 10)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(jLabel7)\n                            .addComponent(jLabel6)\n                            .addComponent(jLabel8)\n                            .addComponent(jLabel9))))\n                .addComponent(jLabel11)\n                .addComponent(jLabel12)\n                .addComponent(jLabel13)\n                .addComponent(jLabel14))\n            .addContainerGap())\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel5)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jLabel6)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel7)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel8)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel9)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel11)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel12)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel13)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel14)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    jTabbedPane1.addTab(\"Pasi\", jPanel1);\n\n    jPanel2.setBackground(new java.awt.Color(255, 255, 255));\n\n    jTextPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));\n    jTextPane1.setEditable(false);\n    jTextPane1.setFont(new java.awt.Font(\"Tahoma\", 0, 13)); // NOI18N\n    jTextPane1.setText(\"   In practica, nu se lucreaza cu numere naturale mici (ca in exemplul din dreapta) pentru a cripta date, ci se folosesc numere mari.\\n   De asemenea, in loc de a incerca sa se reprezinte textul clar direct prin numere naturale, se prefera generarea unei chei de sesiune [session key] aleatoare si utilizarea acesteia pentru a cripta textul clar cu ajutorul unui algoritm conventional cu cheie simetrica (precum TDES) - care este mult mai rapid; apoi se va utiliza altoritmul RSA - mult mai lent - pentru a cripta doar cheia de sesiune. \\n   Astfel, expeditorul A va transmite un mesaj cu cheia si textul criptat.\\n   Destinatarul B va extrage din mesajul cheia de sesiune criptata si va utiliza cheia lui privata pentru a o decripta. Apoi o va folosi intr-un algoritm conventional de decriptare cu cheie simetrica pentru a decripta intregul text cifrat.\");\n\n    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n    jPanel2.setLayout(jPanel2Layout);\n    jPanel2Layout.setHorizontalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel2Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jTextPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE))\n    );\n    jPanel2Layout.setVerticalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel2Layout.createSequentialGroup()\n            .addComponent(jTextPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(19, Short.MAX_VALUE))\n    );\n\n    jTabbedPane1.addTab(\"Ajutor\", jPanel2);\n\n    jLabel16.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel16.setText(\"Introducere mesaj\");\n\n    jSeparator1.setForeground(new java.awt.Color(0, 0, 0));\n\n    jTextPane3.setBackground(new java.awt.Color(238, 238, 238));\n    jTextPane3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));\n    jTextPane3.setEditable(false);\n    jTextPane3.setFont(new java.awt.Font(\"Tahoma\", 0, 14)); // NOI18N\n    jTextPane3.setText(\"   Pentru exemplificarea mai usoara a algoritmului, fiecarei litere a textului introdus ii este asociat un numar natural m, conditia necesara pentru ca algoritmul sa functioneze fiind ca m sa fie mai mic decat n. Pentru fiecare numar m, se va calcula un unic cod C, din acelasi domeniu, asa cum vom vedea la partea de criptare a mesajului.\\n   Cu acest sistem putem cripta un text clar alegand drept valori m literele alfabetulu englezesc: A = 2, B = 3, ... , Z = 27. In aceste conditii, mesajul (text clar) de exemplu HELLOWORLD va fi reprezentat de multimea de numere naturale (m1, m2, ...)\\n\\n{9, 6, 13, 13, 16, 24, 16, 19, 13, 5}\");\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n    this.setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(jLabel1)\n                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)\n                .addComponent(jTextPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(jLabel16)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jLabel1)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(jTextPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap(27, Short.MAX_VALUE))\n    );\n}", "path": "src\\playrsa\\pages\\GetMessagePage.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "/** Creates new form Step3 */\n", "func_signal": "public Step3()", "code": "{\n    super(\"step3\", \"\");\n    initComponents();\n}", "path": "src\\playrsa\\pages\\Step3.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "/** Creates new form GetMessagePage */\n", "func_signal": "public GetMessagePage()", "code": "{\n    super(\"getmessage\", \"\");\n    initComponents();\n}", "path": "src\\playrsa\\pages\\GetMessagePage.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jLabel1 = new javax.swing.JLabel();\n    jScrollPane1 = new javax.swing.JScrollPane();\n    PUK = new javax.swing.JTextArea();\n    PUK.setName(\"PUK\");\n    jLabel2 = new javax.swing.JLabel();\n    jScrollPane2 = new javax.swing.JScrollPane();\n    PRK = new javax.swing.JTextArea();\n    PRK.setName(\"PRK\");\n    jTabbedPane1 = new javax.swing.JTabbedPane();\n    jPanel1 = new javax.swing.JPanel();\n    jLabel5 = new javax.swing.JLabel();\n    jLabel6 = new javax.swing.JLabel();\n    jLabel7 = new javax.swing.JLabel();\n    jLabel8 = new javax.swing.JLabel();\n    jLabel9 = new javax.swing.JLabel();\n    jLabel11 = new javax.swing.JLabel();\n    jLabel12 = new javax.swing.JLabel();\n    jLabel13 = new javax.swing.JLabel();\n    jLabel14 = new javax.swing.JLabel();\n    jLabel15 = new javax.swing.JLabel();\n    jPanel2 = new javax.swing.JPanel();\n    jTextPane1 = new javax.swing.JTextPane();\n    jLabel16 = new javax.swing.JLabel();\n    jSeparator1 = new javax.swing.JSeparator();\n    jTextPane2 = new javax.swing.JTextPane();\n    jTextPane3 = new javax.swing.JTextPane();\n\n    jLabel1.setFont(new java.awt.Font(\"Tahoma\", 0, 14)); // NOI18N\n    jLabel1.setText(\"Cheia publica\");\n\n    PUK.setColumns(20);\n    PUK.setEditable(false);\n    PUK.setRows(3);\n    jScrollPane1.setViewportView(PUK);\n\n    jLabel2.setFont(new java.awt.Font(\"Tahoma\", 0, 14)); // NOI18N\n    jLabel2.setText(\"Cheia privata\");\n\n    PRK.setColumns(20);\n    PRK.setEditable(false);\n    PRK.setRows(3);\n    jScrollPane2.setViewportView(PRK);\n\n    jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));\n    jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);\n\n    jPanel1.setBackground(new java.awt.Color(255, 255, 255));\n\n    jLabel5.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel5.setText(\"1. Algoritm RSA - Generalitati\");\n\n    jLabel6.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel6.setText(\"1.1 Pas 1\");\n\n    jLabel7.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel7.setText(\"1.2 Pas 2\");\n\n    jLabel8.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel8.setText(\"1.3 Pas 3\");\n\n    jLabel9.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel9.setText(\"1.4 Pas 4\");\n\n    jLabel11.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel11.setText(\"2. Perechea de chei\");\n\n    jLabel12.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel12.setText(\"3. Introducere mesaj\");\n\n    jLabel13.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel13.setText(\"4. Mesaj criptat\");\n\n    jLabel14.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel14.setText(\"5. Mesaj decriptat\");\n\n    jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/playrsa/pages/rsa.jpeg\"))); // NOI18N\n    jLabel15.setMaximumSize(new java.awt.Dimension(145, 89));\n    jLabel15.setMinimumSize(new java.awt.Dimension(125, 89));\n    jLabel15.setPreferredSize(new java.awt.Dimension(100, 100));\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()\n                        .addGap(10, 10, 10)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(jLabel7)\n                            .addComponent(jLabel6)\n                            .addComponent(jLabel8)\n                            .addComponent(jLabel9))))\n                .addComponent(jLabel11)\n                .addComponent(jLabel12)\n                .addComponent(jLabel13)\n                .addComponent(jLabel14))\n            .addContainerGap())\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel5)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jLabel6)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel7)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel8)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel9)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel11)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel12)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel13)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel14)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    jTabbedPane1.addTab(\"Pasi\", jPanel1);\n\n    jPanel2.setBackground(new java.awt.Color(255, 255, 255));\n\n    jTextPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));\n    jTextPane1.setEditable(false);\n    jTextPane1.setFont(new java.awt.Font(\"Tahoma\", 0, 13)); // NOI18N\n    jTextPane1.setText(\"   O metoda alternativa de reprezentare a cheii private o reprezinta teorema restului chinezesc [Chinese remainder Theorem (CRT)] - care transporta calculele din inelul Zn in inelul Zp x Zq si, intrucat suma dimensiunilor in biti ale lui p si q este egala cu dimensiunea in biti a lui n, face ca p si q sa fie mult mai mici decat n, marind considerabil (de aproximativ 4 ori) viteza de calcul a exponentierii modulare. (Pentru detalii privind CRT recomandam [Chrom,94] si [Grah,94])\\n   In lumina acestei teoreme, cheia privata este reprezentata prin cvintuplul (p,q,dP,dQ,qlnv), unde p si q sunt factori primi ai lui n, dP si dQ sunt asa numitii exponenti CRT iar qlnv este asa numitul coeficient CRT.\\n   Chiar daca acesta procedura contine mai multi pasi, exponentierea modulara utilizeaza exponenti mult mai scurti, fiind astfel mult mai rapida per total.\");\n\n    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n    jPanel2.setLayout(jPanel2Layout);\n    jPanel2Layout.setHorizontalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addComponent(jTextPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)\n    );\n    jPanel2Layout.setVerticalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel2Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jTextPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(24, Short.MAX_VALUE))\n    );\n\n    jTabbedPane1.addTab(\"Ajutor\", jPanel2);\n\n    jLabel16.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel16.setText(\"Perechea de chei\");\n\n    jSeparator1.setForeground(new java.awt.Color(0, 0, 0));\n\n    jTextPane2.setBackground(new java.awt.Color(238, 238, 238));\n    jTextPane2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));\n    jTextPane2.setEditable(false);\n    jTextPane2.setFont(new java.awt.Font(\"Tahoma\", 0, 14)); // NOI18N\n    jTextPane2.setText(\"    Cheia publica este perechea E = (n, e)\");\n\n    jTextPane3.setBackground(new java.awt.Color(238, 238, 238));\n    jTextPane3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));\n    jTextPane3.setEditable(false);\n    jTextPane3.setFont(new java.awt.Font(\"Tahoma\", 0, 14)); // NOI18N\n    jTextPane3.setText(\"    Cheia prvata este perechea D = (n,d)\\n\\nObservatie: Valorile p, q, si \u03c6 trebuie tinute secrete.\");\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n    this.setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jLabel2)\n                .addComponent(jTextPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)\n                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(jLabel1)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)\n                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)\n                .addComponent(jTextPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGroup(layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(jLabel16)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jLabel1)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jTextPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(jLabel2)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(jTextPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n}", "path": "src\\playrsa\\pages\\KeyPairPage.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "/** Creates new form DecryptedPage */\n", "func_signal": "public DecryptedMessagePage()", "code": "{\n    super(\"decryptedpage\", \"\");\n    initComponents();\n}", "path": "src\\playrsa\\pages\\DecryptedMessagePage.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "@Override\n    public void rendering(List<WizardPage> path, WizardSettings settings)", "code": "{\n        super.rendering(path, settings);\n        setFinishEnabled(true);\n        setNextEnabled(false);\n    }", "path": "src\\playrsa\\pages\\DecryptedMessagePage.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "/** Creates new form Step2 */\n", "func_signal": "public Step2()", "code": "{\n    super(\"step2\", \"\");\n    initComponents();\n}", "path": "src\\playrsa\\pages\\Step2.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "/** Creates new form Step4 */\n", "func_signal": "public Step4()", "code": "{\n    super(\"step4\", \"\");\n    initComponents();\n}", "path": "src\\playrsa\\pages\\Step4.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jLabel1 = new javax.swing.JLabel();\n    jScrollPane1 = new javax.swing.JScrollPane();\n    DecryptedMessage = new javax.swing.JTextArea();\n    jTabbedPane1 = new javax.swing.JTabbedPane();\n    jPanel1 = new javax.swing.JPanel();\n    jLabel5 = new javax.swing.JLabel();\n    jLabel6 = new javax.swing.JLabel();\n    jLabel7 = new javax.swing.JLabel();\n    jLabel8 = new javax.swing.JLabel();\n    jLabel9 = new javax.swing.JLabel();\n    jLabel11 = new javax.swing.JLabel();\n    jLabel12 = new javax.swing.JLabel();\n    jLabel13 = new javax.swing.JLabel();\n    jLabel14 = new javax.swing.JLabel();\n    jLabel15 = new javax.swing.JLabel();\n    jPanel2 = new javax.swing.JPanel();\n    jLabel16 = new javax.swing.JLabel();\n    jSeparator1 = new javax.swing.JSeparator();\n    jTextPane3 = new javax.swing.JTextPane();\n\n    jLabel1.setFont(new java.awt.Font(\"Tahoma\", 0, 14)); // NOI18N\n    jLabel1.setText(\"Mesajul decriptat este urmatorul:\");\n\n    DecryptedMessage.setColumns(20);\n    DecryptedMessage.setRows(5);\n    jScrollPane1.setViewportView(DecryptedMessage);\n\n    jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));\n    jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);\n\n    jPanel1.setBackground(new java.awt.Color(255, 255, 255));\n\n    jLabel5.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel5.setText(\"1. Algoritm RSA - Generalitati\");\n\n    jLabel6.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel6.setText(\"1.1 Pas 1\");\n\n    jLabel7.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel7.setText(\"1.2 Pas 2\");\n\n    jLabel8.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel8.setText(\"1.3 Pas 3\");\n\n    jLabel9.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel9.setText(\"1.4 Pas 4\");\n\n    jLabel11.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel11.setText(\"2. Perechea de chei\");\n\n    jLabel12.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel12.setText(\"3. Introducere mesaj\");\n\n    jLabel13.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel13.setText(\"4. Mesaj criptat\");\n\n    jLabel14.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel14.setText(\"5. Mesaj decriptat\");\n\n    jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/playrsa/pages/rsa.jpeg\"))); // NOI18N\n    jLabel15.setMaximumSize(new java.awt.Dimension(145, 89));\n    jLabel15.setMinimumSize(new java.awt.Dimension(125, 89));\n    jLabel15.setPreferredSize(new java.awt.Dimension(100, 100));\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()\n                        .addGap(10, 10, 10)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(jLabel7)\n                            .addComponent(jLabel6)\n                            .addComponent(jLabel8)\n                            .addComponent(jLabel9))))\n                .addComponent(jLabel11)\n                .addComponent(jLabel12)\n                .addComponent(jLabel13)\n                .addComponent(jLabel14))\n            .addContainerGap())\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel5)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jLabel6)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel7)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel8)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel9)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel11)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel12)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel13)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel14)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    jTabbedPane1.addTab(\"Pasi\", jPanel1);\n\n    jPanel2.setBackground(new java.awt.Color(255, 255, 255));\n\n    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n    jPanel2.setLayout(jPanel2Layout);\n    jPanel2Layout.setHorizontalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 232, Short.MAX_VALUE)\n    );\n    jPanel2Layout.setVerticalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 437, Short.MAX_VALUE)\n    );\n\n    jTabbedPane1.addTab(\"Ajutor\", jPanel2);\n\n    jLabel16.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel16.setText(\"Mesaj decriptat\");\n\n    jSeparator1.setForeground(new java.awt.Color(0, 0, 0));\n\n    jTextPane3.setBackground(new java.awt.Color(238, 238, 238));\n    jTextPane3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));\n    jTextPane3.setEditable(false);\n    jTextPane3.setFont(new java.awt.Font(\"Tahoma\", 0, 14)); // NOI18N\n    jTextPane3.setText(\"   Algoritmul de decriptare (la destinatarul B) este urmatorul :\\n\\n1.  Utilizand cheia privata D, se calculeaza numarul m aferent textului clar\\n\\t         m = C^d mod n\\n\\n2.  Se extrage textul clar P din reprezentarea lui ca numar natural m\\n\\n    Precizari:\\n- trebuie tinut cont de faptul ca - aidoma tuturor sistemelor de criptare - decriptare - algoritmul RSA este si el vulnerabil la atacurile cu text clar, atunci cand un tert poate sa aleaga in mod repetat (sau sa afle pe o cale) o parte din textul clar si poate examina rezultatele criptarii.\\n-dezvoltarea in urmatoarele decenii a calculatoarelor cuantice - capabile de numeroase calcule simultane - va putea permite spargerea cifrului RSA in intervale de timp relativ scurte.\\n   Mai multe informatii despre algoritmul RSA si securitatea oferita de el, se pot gasi in [Kali,93] si [Stin,95]\");\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n    this.setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(jLabel1)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)\n                .addComponent(jTextPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(jLabel16)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jLabel1)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jTextPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap(40, Short.MAX_VALUE))\n    );\n}", "path": "src\\playrsa\\pages\\DecryptedMessagePage.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "/** Creates new form Step1 */\n", "func_signal": "public Step1()", "code": "{\n    super(\"step1\", \"\");\n    initComponents();\n}", "path": "src\\playrsa\\pages\\Step1.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jTabbedPane6 = new javax.swing.JTabbedPane();\n    jPanel6 = new javax.swing.JPanel();\n    jLabel60 = new javax.swing.JLabel();\n    jLabel61 = new javax.swing.JLabel();\n    jLabel62 = new javax.swing.JLabel();\n    jLabel63 = new javax.swing.JLabel();\n    jLabel64 = new javax.swing.JLabel();\n    jLabel66 = new javax.swing.JLabel();\n    jLabel67 = new javax.swing.JLabel();\n    jLabel68 = new javax.swing.JLabel();\n    jLabel69 = new javax.swing.JLabel();\n    jLabel70 = new javax.swing.JLabel();\n    jPanel7 = new javax.swing.JPanel();\n    jTextPane1 = new javax.swing.JTextPane();\n    jSeparator1 = new javax.swing.JSeparator();\n    jLabel16 = new javax.swing.JLabel();\n    P = new javax.swing.JTextField();\n    P.setName(\"P\");\n    Q = new javax.swing.JTextField();\n    Q.setName(\"Q\");\n    jLabel2 = new javax.swing.JLabel();\n    jLabel3 = new javax.swing.JLabel();\n    jButton1 = new javax.swing.JButton();\n    jTextPane2 = new javax.swing.JTextPane();\n\n    setPreferredSize(new java.awt.Dimension(620, 407));\n\n    jTabbedPane6.setBackground(new java.awt.Color(255, 255, 255));\n    jTabbedPane6.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);\n\n    jPanel6.setBackground(new java.awt.Color(255, 255, 255));\n\n    jLabel60.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel60.setText(\"1. Algoritm RSA - Generalitati\");\n\n    jLabel61.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel61.setText(\"1.1 Pas 1\");\n\n    jLabel62.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel62.setText(\"1.2 Pas 2\");\n\n    jLabel63.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel63.setText(\"1.3 Pas 3\");\n\n    jLabel64.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel64.setText(\"1.4 Pas 4\");\n\n    jLabel66.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel66.setText(\"2. Perechea de chei\");\n\n    jLabel67.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel67.setText(\"3. Introducere mesaj\");\n\n    jLabel68.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel68.setText(\"4. Mesaj criptat\");\n\n    jLabel69.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel69.setText(\"5. Mesaj decriptat\");\n\n    jLabel70.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/playrsa/pages/rsa.jpeg\"))); // NOI18N\n    jLabel70.setMaximumSize(new java.awt.Dimension(145, 89));\n    jLabel70.setMinimumSize(new java.awt.Dimension(125, 89));\n    jLabel70.setPreferredSize(new java.awt.Dimension(100, 100));\n\n    javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);\n    jPanel6.setLayout(jPanel6Layout);\n    jPanel6Layout.setHorizontalGroup(\n        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel6Layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jLabel70, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)\n                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                    .addComponent(jLabel60, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()\n                        .addGap(10, 10, 10)\n                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel62)\n                            .addComponent(jLabel61)\n                            .addComponent(jLabel63)\n                            .addComponent(jLabel64))))\n                .addComponent(jLabel66)\n                .addComponent(jLabel67)\n                .addComponent(jLabel68)\n                .addComponent(jLabel69))\n            .addContainerGap())\n    );\n    jPanel6Layout.setVerticalGroup(\n        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel6Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jLabel60)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jLabel61)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel62)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel63)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel64)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel66)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel67)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel68)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jLabel69)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jLabel70, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    jTabbedPane6.addTab(\"Pasi\", jPanel6);\n\n    jPanel7.setBackground(new java.awt.Color(255, 255, 255));\n\n    jTextPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));\n    jTextPane1.setEditable(false);\n    jTextPane1.setFont(new java.awt.Font(\"Tahoma\", 0, 13));\n    jTextPane1.setText(\"     Descompunerea in factori primi a unui numar natural n este o operatie dificila, intrucat singura metoda cunoscuta consta in verificarea  tuturor numerelor (si sunt aproximativ n / ln(n) numere prime) - sau cel putin pana la descoperirea celui mai mic factor prim - adica a p / ln(p) numere, unde p = \u221an.\\n     Astfel, de exemplu, intr-o cheie pe 128 de biti, exista aproimativ 2^128 / ln(2^128) factori primi; cu o putere de calcul care poate testa 109 numere pe secunda, tot ar fi necesari cca. 120 x 10^15 ani - adica de 10 milioane de ori durata actuala a universului.\\n     Iar daca avem de-a face cu numere naturale exprimate in binar, lucrurile stau si mai prost, in pofida faptului ca exista un algoritm de cautare a factorilor primi pentru astfel de numere  - algoritm cunoscut sub numele de sita pentru campuri de numere [Number Field Sieve(NFS)].\");\n\n    javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);\n    jPanel7.setLayout(jPanel7Layout);\n    jPanel7Layout.setHorizontalGroup(\n        jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel7Layout.createSequentialGroup()\n            .addComponent(jTextPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n    jPanel7Layout.setVerticalGroup(\n        jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel7Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jTextPane1))\n    );\n\n    jTabbedPane6.addTab(\"Ajutor\", jPanel7);\n\n    jSeparator1.setForeground(new java.awt.Color(0, 0, 0));\n\n    jLabel16.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel16.setText(\"Alegerea celor doua numere prime mari p si q\");\n\n    jLabel2.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel2.setText(\"P:\");\n\n    jLabel3.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jLabel3.setText(\"Q:\");\n\n    jButton1.setText(\"Regenerare\");\n    jButton1.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            jButton1ActionPerformed(evt);\n        }\n    });\n\n    jTextPane2.setBackground(new java.awt.Color(238, 238, 238));\n    jTextPane2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));\n    jTextPane2.setEditable(false);\n    jTextPane2.setFont(new java.awt.Font(\"Tahoma\", 0, 14));\n    jTextPane2.setText(\"     Principiul de baza al algoritmului RSA este dificultatea factorizarii numerelor mari.\\n     Acesta utilizeaza o expresie matematica bazata pe inmultirea a doua numere prime mari . In esenta cheia publica rezulta din produsul a doua numere prime mari, alese aleator, iar cheia privata este constituita din insasi cele doua numere prime. \\n    Algoritmul cripteaza textul clar utilizand cele doua numere prime si decripteaza textul cifrat cu cele doua numere prime.\\n    Desi in practica cele doua numere prime mari alese au sute de cifre, ducand la obtinerea de chei de minim 1024 de biti (o cheie de numai 512 biti nemaifiind considerata sigura), pentru o exemplificare clara a algoritmului, numerele prime alese in cazul nostru vor fi semnificativ mai mici.\\n    Acestea sunt generate mai jos :\");\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n    this.setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addComponent(jTabbedPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                            .addComponent(jLabel2)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                            .addComponent(P, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE))\n                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                            .addComponent(jLabel3)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                            .addComponent(Q, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))\n                        .addComponent(jButton1))\n                    .addContainerGap())\n                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                        .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)\n                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE))\n                    .addGap(29, 29, 29))\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(jTextPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)\n                    .addContainerGap())))\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jTabbedPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGroup(layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(jLabel16)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(jTextPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGap(18, 18, 18)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(jLabel2)\n                        .addComponent(P, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(jLabel3)\n                        .addComponent(Q, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jButton1)))\n            .addContainerGap(28, Short.MAX_VALUE))\n    );\n}", "path": "src\\playrsa\\pages\\Step1.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "/** Creates new form KeyPair */\n", "func_signal": "public KeyPairPage()", "code": "{\n    super(\"keypair\", \"\");\n    initComponents();\n}", "path": "src\\playrsa\\pages\\KeyPairPage.java", "repo_name": "andreisavu/playrsa", "stars": 4, "license": "None", "language": "java", "size": 9812}
{"docstring": "/**\n * Constructs a new GraticuleHighlightOverlay with the given Graticule\n * selected. Note that if the Graticule is null, this won't draw anything\n * until the user taps something.\n * \n * @param c\n *            Context from whence this came (needed for resource\n *            information)\n * @param g\n *            Graticule to draw (or null to not draw anything yet)\n * @param gcl\n *            listener to pay attention to taps when new graticules are\n *            selected\n */\n", "func_signal": "public GraticuleHighlightOverlay(Context c, Graticule g,\n        GraticuleChangedListener gcl)", "code": "{\n    mContext = c;\n    mGraticule = g;\n    mListener = gcl;\n\n    // Make both paints here and stash them for later.\n    if (outlinePaint == null) {\n        outlinePaint = new Paint();\n        outlinePaint.setColor(mContext.getResources().getColor(\n                R.color.graticule_stroke));\n        outlinePaint.setStrokeWidth(2);\n        outlinePaint.setStrokeJoin(Join.ROUND);\n    }\n\n    if (fillPaint == null) {\n        fillPaint = new Paint();\n        fillPaint.setStyle(Paint.Style.FILL);\n        fillPaint.setColor(mContext.getResources().getColor(\n                R.color.graticule_fill));\n    }\n}", "path": "src\\net\\exclaimindustries\\geohashdroid\\GraticuleHighlightOverlay.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Attempt to get the stock value stored in the database for the given\n * already-adjusted date.  This won't go to the internet; that's the\n * responsibility of a StockRunner.\n * \n * @param con Context used to retrieve the database, if needed \n * @param c already-adjusted date to check\n * @return the String representation of the stock, or null if it's not there\n */\n", "func_signal": "public static String getStoredStock(Context con, Calendar c)", "code": "{\n    // We don't quickcache the stock values.\n    Log.d(DEBUG_TAG, \"Going to the database for a stock for \" + DateTools.getDateString(c));\n    \n    return getStore(con).getStock(c);\n}", "path": "src\\net\\exclaimindustries\\geohashdroid\\HashBuilder.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Build an Info object.  Since this assumes we already have a stock price\n * AND the Graticule can tell us if we need to use the 30W rule, use the\n * REAL date on the Calendar object.\n * \n * @param c date from which this hash comes\n * @param stockPrice effective stock price (already adjusted for the 30W Rule)\n * @param g the graticule in question\n * @return\n */\n", "func_signal": "protected static Info createInfo(Calendar c, String stockPrice, Graticule g)", "code": "{\n    // This creates the Info object that'll go right back to whatever was\n    // calling it.  In general, this is the Handler in StockRunner.\n    \n    // So to that end, we first build up the hash.\n    String hash = makeHash(c, stockPrice);\n    \n    // Then, get the latitude and longitude from that.\n    double lat = getLatitude(g, hash);\n    double lon = getLongitude(g, hash);\n    \n    // And finally...\n    return new Info(lat, lon, g, c);\n}", "path": "src\\net\\exclaimindustries\\geohashdroid\\HashBuilder.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Gets the longitude value of the location for the current date. This is\n * attached to the current graticule integer value to produce the latitude.\n * \n * @return the fractional longitude value\n */\n", "func_signal": "private static double getLongitudeHash(String hash)", "code": "{\n    String chunk = hash.substring(16, 32);\n    return HexFraction.calculate(chunk);\n}", "path": "src\\net\\exclaimindustries\\geohashdroid\\HashBuilder.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Sets the date on the button.\n * \n * @param newDate new date to be set\n */\n", "func_signal": "public void setDate(Calendar newDate)", "code": "{\n    mDate = newDate;\n    setText(DateFormat.getDateInstance(DateFormat.LONG).format(\n            mDate.getTime()));\n}", "path": "src\\net\\exclaimindustries\\tools\\DateButton.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n *<p>\n * Finishes up output from a conversion. This means putting the right\n * decimals in, adding commas, and attaching the suffix.\n *</p>\n * \n * @param input\n *            number to convert\n * @param suffix\n *            suffix to attach to the result\n * @return the appropriately formatted number\n */\n", "func_signal": "private static String finishIt(float input, String suffix)", "code": "{\n    NumberFormat nf = NumberFormat.getInstance();\n\n    // If the resulting number is >= 1,000, just return\n    // the int part of it and appropriate commas.\n    if (Math.abs(input) >= 1000) {\n        nf.setMaximumFractionDigits(0);\n        return nf.format(input) + suffix;\n    }\n\n    // In the range of 100 to 999, we want one decimal\n    if (Math.abs(input) < 1000 && Math.abs(input) >= 100) {\n        nf.setMaximumFractionDigits(1);\n        return nf.format(input) + suffix;\n    }\n\n    // In the range of 0 to 99, we want two decimals\n\n    if (Math.abs(input) < 100 && Math.abs(input) >= 0) {\n        nf.setMaximumFractionDigits(2);\n        return nf.format(input) + suffix;\n    }\n\n    // And now we just kinda die.\n    return nf.format(input) + suffix;\n}", "path": "src\\net\\exclaimindustries\\tools\\HumanBytes.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Stores Info data away in the database.  This won't do anything if the\n * day's Info already exists therein.\n * \n * @param con Context used to retrieve the database, if needed\n * @param i an Info bundle with everything we need\n */\n", "func_signal": "private synchronized static void storeInfo(Context con, Info i)", "code": "{\n\t// First, replace the last-known results.\n\tquickCache(i);\n\t\n\tStockStoreDatabase store = getStore(con);\n\t\n\t// Then, write it to the database.\n    store.storeInfo(i);\n    store.cleanup();\n}", "path": "src\\net\\exclaimindustries\\geohashdroid\\HashBuilder.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Builds a new Info object by applying a new Graticule to an existing Info\n * object.  That is to say, change the destination of an Info object to\n * somewhere else.  As if it were the same day and same stock value (and\n * thus the same hash).  Note that this will throw an exception if the \n * existing Info's 30W-alignment isn't the same as the new Graticule's,\n * because that would require a trip back to the internet, and by this\n * point, we should know that we don't need to do so.\n * \n * @param i old Info object to clone\n * @param g new Graticule to apply\n * @throws InvalidParameterException the Info and Graticule do not lie on the same side of the 30W line.\n * @return\n */\n", "func_signal": "protected static Info cloneInfo(Info i, Graticule g)", "code": "{\n    // This sort of requires the 30W-itude of both to match.\n    if(i.getGraticule().uses30WRule() != g.uses30WRule())\n        throw new InvalidParameterException(\"The given Info and Graticule do not lie on the same side of the 30W line; this should not have happened.\");\n    \n    // Get the destination set...\n    double lat = (g.getLatitude() + i.getLatitudeHash()) * (g.isSouth() ? -1 : 1);\n    double lon = (g.getLongitude() + i.getLongitudeHash()) * (g.isWest() ? -1 : 1);\n    \n    // Then...\n    return new Info(lat, lon, g, i.getCalendar());\n}", "path": "src\\net\\exclaimindustries\\geohashdroid\\HashBuilder.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Abort the current connection, if one exists.\n */\n", "func_signal": "public void abort()", "code": "{\n\tif(mRequest != null)\n    \t    {\n\t    // Bail out of the request (if there is one)...\n    \t        mRequest.abort();\n    \t    }\n\t        // Put the brakes on the handler...\n\t        mHandler = null;\n\t        // And change status.\n\t        mStatus = ABORTED;\n}", "path": "src\\net\\exclaimindustries\\geohashdroid\\HashBuilder.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Initializes HashBuilder.  This should be called only once.  Well, it can\n * be called more often, but it won't do anything past the first time.\n */\n", "func_signal": "public static synchronized void initialize(Context c)", "code": "{\n    if(mStore == null) {\n        mStore = new StockStoreDatabase(c).init();\n    }\n}", "path": "src\\net\\exclaimindustries\\geohashdroid\\HashBuilder.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Turns the given long into a terabyte representation.\n * \n * @param input\n *            long to convert\n * @return String representation of the input in terabytes\n */\n", "func_signal": "public static String toTera(long input)", "code": "{\n    float toReturn = (float)(input) / ONETERA;\n    return finishIt(toReturn, \"TB\");\n}", "path": "src\\net\\exclaimindustries\\tools\\HumanBytes.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Initializes and returns a StockStoreDatabase object.  This should be used\n * in ALL cases the mStore is needed to ensure it actually exists.  It can,\n * for instance, stop existing if the app is destroyed to reclaim memory.\n * \n * @param c Context with which StockStoreDatabase will be initialized.\n * @return\n */\n", "func_signal": "private static synchronized StockStoreDatabase getStore(Context c)", "code": "{\n    if(mStore == null) {\n        mStore = new StockStoreDatabase(c).init();\n    }\n    \n    return mStore;\n}", "path": "src\\net\\exclaimindustries\\geohashdroid\\HashBuilder.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Turns the given long into a gigabyte representation.\n * \n * @param input\n *            long to convert\n * @return String representation of the input in gigabytes\n */\n", "func_signal": "public static String toGiga(long input)", "code": "{\n    float toReturn = (float)(input) / ONEGIG;\n    return finishIt(toReturn, \"GB\");\n}", "path": "src\\net\\exclaimindustries\\tools\\HumanBytes.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n *<p>\n * Turns the specified long into whatever the most ideal qualifier is. That\n * is, reduce it to whatever makes the most sense. For some examples:\n *</p>\n * \n *<ul>\n *<li><code>HumanBytes.toIdeal(54099l)</code> returns \"54.83kB\"\n *<li><code>HumanBytes.toIdeal(84312267l)</code> returns \"80.41MB\"\n *<li><code>HumanBytes.toIdeal(463311975466l)</code> returns \"431.5GB\"\n *</ul>\n * \n *<p>\n * Thus, this simply calls other methods depending on the size of the long.\n * Note that this will account for negatives if need be.\n *</p>\n * \n * @param input\n *            long to convert\n * @return a String of the ideal human-readable representation of the long\n */\n", "func_signal": "public static String toIdeal(long input)", "code": "{\n    // NOTE TO SELF: A long is a 64-bit signed value. 64 bits of value\n    // is 18,446,744,073,709,551,616. So, 64 bits of signed value would\n    // be in the 9e18 range. (base), k, M, G, T, P.\n\n    // First off, if this is less than 1024 (by absoluteness), just return\n    // it.\n    if (Math.abs(input) < 1024)\n        return input + \"B\";\n\n    // Now, go in order from biggest to smallest. Comparisons are easier\n    // on the system than comparisons and divisions.\n    if (Math.abs(input) >= ONEPETA)\n        return toPeta(input);\n    if (Math.abs(input) >= ONETERA)\n        return toTera(input);\n    if (Math.abs(input) >= ONEGIG)\n        return toGiga(input);\n    if (Math.abs(input) >= ONEMEG)\n        return toMega(input);\n    if (Math.abs(input) >= ONEKILO)\n        return toKilo(input);\n\n    // Fall out; this can't happen\n    return input + \"B\";\n}", "path": "src\\net\\exclaimindustries\\tools\\HumanBytes.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Turns the given long into a kilobyte representation.\n * \n * @param input\n *            long to convert\n * @return String representation of the input in kilobytes\n */\n", "func_signal": "public static String toKilo(long input)", "code": "{\n    float toReturn = (float)(input) / ONEKILO;\n    return finishIt(toReturn, \"kB\");\n}", "path": "src\\net\\exclaimindustries\\tools\\HumanBytes.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Gets the latitude value of the location for the current date. This is\n * attached to the current graticule integer value to produce the longitude.\n * \n * @return the fractional latitude value\n */\n", "func_signal": "private static double getLatitudeHash(String hash)", "code": "{\n    String chunk = hash.substring(0, 16);\n    return HexFraction.calculate(chunk);\n}", "path": "src\\net\\exclaimindustries\\geohashdroid\\HashBuilder.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Generate the hash string from the date and stock price.  The REAL date,\n * that is.  Not a 30W Rule-adjusted date.\n * \n * @param c date to use\n * @param stockPrice stock price to use\n * @return the hash you're looking for\n */\n", "func_signal": "protected static String makeHash(Calendar c, String stockPrice)", "code": "{\n    // Just reset the hash. This can be handy alone if the graticule has\n    // changed.  Remember, c is the REAL date, not the STOCK date!\n    String monthStr;\n    String dayStr;\n\n    // Zero-pad the month and date...\n    if (c.get(Calendar.MONTH) + 1 < 10)\n        monthStr = \"0\" + (c.get(Calendar.MONTH) + 1);\n    else\n        monthStr = new Integer(c.get(Calendar.MONTH) + 1).toString();\n\n    if (c.get(Calendar.DAY_OF_MONTH) < 10)\n        dayStr = \"0\" + c.get(Calendar.DAY_OF_MONTH);\n    else\n        dayStr = new Integer(c.get(Calendar.DAY_OF_MONTH)).toString();\n\n    // And here it goes!\n    String fullLine = c.get(Calendar.YEAR) + \"-\" + monthStr + \"-\"\n            + dayStr + \"-\" + stockPrice;\n    return MD5Tools.MD5hash(fullLine);\n}", "path": "src\\net\\exclaimindustries\\geohashdroid\\HashBuilder.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Takes the given stream and makes a String out of whatever data it has. Be\n * really careful with this, as it will just attempt to read whatever's in\n * the stream until it stops, meaning it'll spin endlessly if this isn't the\n * sort of stream that ends.\n * \n * @param stream\n *            InputStream to read from\n * @return a String consisting of the data from the stream\n */\n", "func_signal": "protected static String getStringFromStream(InputStream stream)\n        throws IOException", "code": "{\n    BufferedReader buff = new BufferedReader(new InputStreamReader(stream));\n\n    // Load it up...\n    StringBuffer tempstring = new StringBuffer();\n    char bean[] = new char[1024];\n    int read = 0;\n    while ((read = buff.read(bean)) != -1) {\n        tempstring.append(bean, 0, read);\n    }\n\n    return tempstring.toString();\n}", "path": "src\\net\\exclaimindustries\\geohashdroid\\HashBuilder.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Turns the given long into a petabyte representation.\n * \n * @param input\n *            long to convert\n * @return String representation of the input in petabytes\n */\n", "func_signal": "public static String toPeta(long input)", "code": "{\n    float toReturn = (float)(input) / ONEPETA;\n    return finishIt(toReturn, \"PB\");\n}", "path": "src\\net\\exclaimindustries\\tools\\HumanBytes.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Manually set the Graticule after construction. Note that the MapView will\n * need to be invalidated afterward.\n * \n * @param g\n *            new Graticule to set\n */\n", "func_signal": "public void setGraticule(Graticule g)", "code": "{\n    mGraticule = g;\n    mListener.graticuleUpdated(mGraticule);\n}", "path": "src\\net\\exclaimindustries\\geohashdroid\\GraticuleHighlightOverlay.java", "repo_name": "floatingatoll/geohashdroid-fork", "stars": 4, "license": "other", "language": "java", "size": 248}
{"docstring": "/**\n * Make a direct NIO FloatBuffer from an array of floats\n * @param arr The array\n * @return The newly created FloatBuffer\n */\n", "func_signal": "protected static FloatBuffer makeFloatBuffer(float[] arr)", "code": "{\n\tByteBuffer bb = ByteBuffer.allocateDirect(arr.length*4);\n\tbb.order(ByteOrder.nativeOrder());\n\tFloatBuffer fb = bb.asFloatBuffer();\n\tfb.put(arr);\n\tfb.position(0);\n\treturn fb;\n}", "path": "src\\raisin\\android\\app\\AndroidGL\\GLTutorialBase.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * Override the key listener to receive keyUp events.\n * \n * Check for the DPad presses left, right, up, down and middle.\n * Change the rotation speed according to the presses\n * or change the texture filter used through the middle press.\n */\n", "func_signal": "@Override\npublic boolean onKeyUp(int keyCode, KeyEvent event)", "code": "{\n\t//\n\tif(keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {\n\t\tyspeed -= 0.1f;\n\t\t\n\t} else if(keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {\n\t\tyspeed += 0.1f;\n\t\t\n\t} else if(keyCode == KeyEvent.KEYCODE_DPAD_UP) {\n\t\txspeed -= 0.1f;\n\t\t\n\t} else if(keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {\n\t\txspeed += 0.1f;\n\t\t\n\t} else if(keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {\n\t\tfilter += 1;\n\t\tif(filter > 2) {\n\t\t\tfilter = 0;\n\t\t}\n\t}\n\telse return false;\n\n\t//We handled the event\n\treturn true;\n}", "path": "src\\raisin\\android\\app\\lesson8\\Lesson08.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/* Creates the menu items */\n", "func_signal": "public boolean onCreateOptionsMenu(Menu menu)", "code": "{\n    menu.add(0, MENU_NEW_GAME, 0, \"New Game\");\n    menu.add(0, MENU_QUIT, 0, \"Quit\");\n    return true;\n}", "path": "src\\raisin\\android\\engine2\\GameActivity.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "//\t\tprivate long rnd;\n//\t\t\n//\t\tpublic long randomLong() {\n//\t\t\t  rnd ^= (rnd << 21);\n//\t\t\t  rnd ^= (rnd >>> 35);\n//\t\t\t  rnd ^= (rnd << 4);\n//\t\t\t  return rnd;\n//\t\t}\n//\n//\t\tpublic float randomFloat() {\n//\t\t\t  rnd ^= (rnd << 21);\n//\t\t\t  rnd ^= (rnd >>> 35);\n//\t\t\t  rnd ^= (rnd << 4);\n//\t\t\t  return rnd / ;\n//\t\t}\n/*\n\t\tfloat lightAmbient[] = new float[] { 0.2f, 0.2f, 0.2f, 1.0f };\n\t\tfloat lightDiffuse[] = new float[] { 1f, 1f, 1f, 1.0f };\n\t\tfloat[] lightPos = new float[] {0,0,3,1};\n\t\t\n\t\tfloat matAmbient[] = new float[] { 1f, 1f, 1f, 1.0f };\n\t\tfloat matDiffuse[] = new float[] { 1f, 1f, 1f, 1.0f };\n*/\n", "func_signal": "public void draw(GL10 gl)", "code": "{\n\n/*\n\t\t\tgl.glEnable(GL10.GL_LIGHTING);\n\t\t\tgl.glEnable(GL10.GL_LIGHT0);\n\t\t\tgl.glMaterialfv(GL10.GL_FRONT_AND_BACK, GL10.GL_AMBIENT, matAmbient, 0);\n\t\t\tgl.glMaterialfv(GL10.GL_FRONT_AND_BACK, GL10.GL_DIFFUSE, matDiffuse, 0);\n\t\t\t\n\t\t\tgl.glLightfv(GL10.GL_LIGHT0, GL10.GL_AMBIENT, lightAmbient,\t0);\n\t\t\tgl.glLightfv(GL10.GL_LIGHT0, GL10.GL_DIFFUSE, lightDiffuse,\t0);\n\t\t\tgl.glLightfv(GL10.GL_LIGHT0, GL10.GL_POSITION, lightPos, 0);\n\t\t\t\n\t\t\tgl.glEnable(GL10.GL_DEPTH_TEST);\n\t\t\tgl.glDepthFunc(GL10.GL_LEQUAL);\n\t\t\t\n\t\t\tgl.glEnable(GL10.GL_TEXTURE_2D);\n\t\t\t\n\t\t\tgl.glClearColor(0.0f, 0.0f, 0.0f, 0.0f);\n\t\t\tgl.glClearDepthf(1.0f);\n\t\t\t\n\t\t\tgl.glEnable(GL10.GL_CULL_FACE);\n*/\n            \n            // http://www.gamedev.net/community/forums/topic.asp?topic_id=462270\n            \n\t        glActiveTexture(GL_TEXTURE0);\n            glEnable(GL_TEXTURE_2D);\n            gl.glBindTexture(GL10.GL_TEXTURE_2D, textureID);\n\t        gl.glClientActiveTexture(GL10.GL_TEXTURE0); \n            gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);\n            glTexCoordPointer(2, GL_FLOAT, 0, rectangle.mTexBuffer);\n\n            float colv= clamp(1 - posz, 0, 1);\n            float[] col = { colv, colv, colv, 0.5f };\n            glTexEnvfv(GL_TEXTURE_ENV, GL_TEXTURE_ENV_COLOR, col, 0);\n\n            glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE);\n            glTexEnvi(GL_TEXTURE_ENV, GL_COMBINE_RGB, GL_MODULATE);\n            glTexEnvi(GL_TEXTURE_ENV, GL_SRC0_RGB, GL_TEXTURE);\n            glTexEnvi(GL_TEXTURE_ENV, GL_SRC1_RGB, GL_CONSTANT);\n\n            long diff = SystemClock.uptimeMillis() - started;\n\n\t        glPushMatrix();\n\n\t        jitterx= random.plusMinusClamped(jitterx, 0.0025f, 0.2f);\n\t        jittery= random.plusMinusClamped(jittery, 0.0025f, 0.1f);\n\n\t        float x= posx + diff * driftx + jitterx;\n\t        float y= 2f - diff * speed + jittery;\n\t        float z= posz;\n\t        \n\t        glTranslatef(x, y, z);\n\n\t        float angle = angleSpeed * diff;\n\t        glRotatef(angle, 0, 0, 1.0f);\n\t        \n\t        float scale= 0.3f * (1 - z);\n\t        glScalef(scale, scale, 1f);\n\t        \n\t        rectangle.draw(gl);\n\n\t        \n//            glBindTexture(GL_TEXTURE_2D, blendID);\n//            glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n//            glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n//            rectangle.draw(gl);\n\t        \n\t        \n\t        glPopMatrix();\n\n\t        \n\t        \n\t\t//\tgl.glActiveTexture(GL10.GL_TEXTURE0); \n\t\t//\tgl.glClientActiveTexture(GL10.GL_TEXTURE0); \n\n\t        //float y= 2f-diff*speed;\n\t        \n\t        finished = y < ThreeRuntime.screenHeight * -2f / 653f;\n\t\t}", "path": "src\\raisin\\android\\app\\three\\StaticRectangleRenderer.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * If the surface changes, reset the view\n */\n", "func_signal": "public void onSurfaceChanged(GL10 gl, int width, int height)", "code": "{\n\tif(height == 0) { \t\t\t\t\t\t//Prevent A Divide By Zero By\n\t\theight = 1; \t\t\t\t\t\t//Making Height Equal One\n\t}\n\n\tgl.glViewport(0, 0, width, height); \t//Reset The Current Viewport\n\tgl.glMatrixMode(GL10.GL_PROJECTION); \t//Select The Projection Matrix\n\tgl.glLoadIdentity(); \t\t\t\t\t//Reset The Projection Matrix\n\n\t//Calculate The Aspect Ratio Of The Window\n\tGLU.gluPerspective(gl, 45.0f, (float)width / (float)height, 0.1f, 100.0f);\n\n\tgl.glMatrixMode(GL10.GL_MODELVIEW); \t//Select The Modelview Matrix\n\tgl.glLoadIdentity(); \t\t\t\t\t//Reset The Modelview Matrix\n}", "path": "src\\raisin\\android\\app\\lesson8\\Lesson08.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * Initiate our @see Lesson08.java,\n * which is GLSurfaceView and Renderer\n */\n", "func_signal": "@Override\nprotected void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\t\n\t//Initiate our Lesson with this Activity Context handed over\n\tlesson08 = new Lesson08(this);\n\t//Set the lesson as View to the Activity\n\tsetContentView(lesson08);\n}", "path": "src\\raisin\\android\\app\\lesson8\\Run.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * Here we do our drawing\n */\n", "func_signal": "public void onDrawFrame(GL10 gl)", "code": "{\n\t//Clear Screen And Depth Buffer\n\tgl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);\t\n\tgl.glLoadIdentity();\t\t\t\t\t//Reset The Current Modelview Matrix\n\t\n\t//Check if the light flag has been set to enable/disable lighting\n\tif(light) {\n\t\tgl.glEnable(GL10.GL_LIGHTING);\n\t} else {\n\t\tgl.glDisable(GL10.GL_LIGHTING);\n\t}\n\t\n\t//Check if the blend flag has been set to enable/disable blending\n\tif(blend) {\n\t\tgl.glEnable(GL10.GL_BLEND);\t\t\t//Turn Blending On ( NEW )\n\t\tgl.glDisable(GL10.GL_DEPTH_TEST);\t//Turn Depth Testing Off ( NEW )\n\t\t\n\t} else {\n\t\tgl.glDisable(GL10.GL_BLEND);\t\t//Turn Blending On ( NEW )\n\t\tgl.glEnable(GL10.GL_DEPTH_TEST);\t//Turn Depth Testing Off ( NEW )\n\t}\n\t\n\t//Drawing\n\tgl.glTranslatef(0.0f, 0.0f, z);\t\t\t//Move z units into the screen\n\tgl.glScalef(0.8f, 0.8f, 0.8f); \t\t\t//Scale the Cube to 80 percent, otherwise it would be too large for the screen\n\t\n\t//Rotate around the axis based on the rotation matrix (rotation, x, y, z)\n\tgl.glRotatef(xrot, 1.0f, 0.0f, 0.0f);\t//X\n\tgl.glRotatef(yrot, 0.0f, 1.0f, 0.0f);\t//Y\n\t\t\t\n\tcube.draw(gl, filter);\t\t\t\t\t//Draw the Cube\t\n\t\n\t//Change rotation factors\n\txrot += xspeed;\n\tyrot += yspeed;\n}", "path": "src\\raisin\\android\\app\\lesson8\\Lesson08.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * Make a direct NIO IntBuffer from an array of ints\n * @param arr The array\n * @return The newly created IntBuffer\n */\n", "func_signal": "protected static IntBuffer makeFloatBuffer(int[] arr)", "code": "{\n\tByteBuffer bb = ByteBuffer.allocateDirect(arr.length*4);\n\tbb.order(ByteOrder.nativeOrder());\n\tIntBuffer ib = bb.asIntBuffer();\n\tib.put(arr);\n\tib.position(0);\n\treturn ib;\n}", "path": "src\\raisin\\android\\app\\AndroidGL\\GLTutorialBase.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * Remember to resume our Lesson\n */\n", "func_signal": "@Override\nprotected void onResume()", "code": "{\n\tsuper.onResume();\n\tlesson08.onResume();\n}", "path": "src\\raisin\\android\\app\\lesson8\\Run.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * Invoked when the Activity loses user focus.\n */\n", "func_signal": "@Override\nprotected void onPause()", "code": "{\n\n\tLog.w(\"Act1\", \"onPause\");\n    \n\tsuper.onPause();\n    mGameView.pause();\n}", "path": "src\\raisin\\android\\engine2\\GameActivity.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * Create a texture and send it to the graphics system\n * @param gl The GL object\n * @param bmp The bitmap of the texture\n * @param reverseRGB Should the RGB values be reversed?  (necessary workaround for loading .pngs...)\n * @return The newly created identifier for the texture.\n */\n", "func_signal": "protected static int loadTexture(GL10 gl, Bitmap bmp)", "code": "{\n\tint[] tmp_tex = new int[1];\n\n\tgl.glGenTextures(1, tmp_tex, 0);\n\tint tex = tmp_tex[0];\n\n\tint type= GL_TEXTURE_2D;\n\tint width= bmp.getWidth();\n\tint height= bmp.getHeight();\n\t\n//\t\tloadTexture(tex, GL10.GL_TEXTURE_2D, bmp, gl);\n\tgl.glBindTexture(type, tex);\n\tgl.glTexImage2D(type, 0, GL10.GL_RGBA, width, height, 0, GL10.GL_RGBA, GL10.GL_UNSIGNED_BYTE, null);\n//\t\tgl.glTexSubImage2D(type, 0, 0, 0, width, height, GL10.GL_RGBA, GL10.GL_UNSIGNED_BYTE, bb);\n\tgl.glTexParameterf(type, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_LINEAR);\n\tgl.glTexParameterf(type, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);\n\n\tGLUtils.texImage2D(GL_TEXTURE_2D, 0, bmp, 0);\n\treturn tex;\n}", "path": "src\\raisin\\android\\app\\AndroidGL\\GLTutorialBase.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * Constructor for animated views\n * @param c The View's context\n * @param fps The frames per second for the animation.\n */\n", "func_signal": "public GLTutorialBase(Context context, int fps)", "code": "{\n\tsuper(context);\n\tthis.context = context;\n\tthis.fps = fps;\n\t\n\tcubeBuff = makeFloatBuffer(box);\n\ttexBuff = makeFloatBuffer(texCoords);\n}", "path": "src\\raisin\\android\\app\\AndroidGL\\GLTutorialBase.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * Instance the Cube object and set the Activity Context \n * handed over. Initiate the light buffers and set this \n * class as renderer for this now GLSurfaceView.\n * Request Focus and set if focusable in touch mode to\n * receive the Input from Screen and Buttons  \n * \n * @param context - The Activity Context\n */\n", "func_signal": "public Lesson08(Context context)", "code": "{\n\tsuper(context);\n\t\n\t//Set this as Renderer\n\tthis.setRenderer(this);\n\t//Request focus, otherwise buttons won't react\n\tthis.requestFocus();\n\tthis.setFocusableInTouchMode(true);\n\t\n\t//\n\tthis.context = context;\t\t\n\t\n\t//\n\tByteBuffer byteBuf = ByteBuffer.allocateDirect(lightAmbient.length * 4);\n\tbyteBuf.order(ByteOrder.nativeOrder());\n\tlightAmbientBuffer = byteBuf.asFloatBuffer();\n\tlightAmbientBuffer.put(lightAmbient);\n\tlightAmbientBuffer.position(0);\n\t\n\tbyteBuf = ByteBuffer.allocateDirect(lightDiffuse.length * 4);\n\tbyteBuf.order(ByteOrder.nativeOrder());\n\tlightDiffuseBuffer = byteBuf.asFloatBuffer();\n\tlightDiffuseBuffer.put(lightDiffuse);\n\tlightDiffuseBuffer.position(0);\n\t\n\tbyteBuf = ByteBuffer.allocateDirect(lightPosition.length * 4);\n\tbyteBuf.order(ByteOrder.nativeOrder());\n\tlightPositionBuffer = byteBuf.asFloatBuffer();\n\tlightPositionBuffer.put(lightPosition);\n\tlightPositionBuffer.position(0);\n\t\n\t//\n\tcube = new Cube();\n}", "path": "src\\raisin\\android\\app\\lesson8\\Lesson08.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * Initialization of the Activity after it is first created.  Must at least\n * call {@link android.app.Activity#setContentView setContentView()} to\n * describe what is to be displayed in the screen.\n */\n", "func_signal": "@Override\n\tprotected void onCreate(Bundle savedInstanceState)", "code": "{\n    // Be sure to call the super class.\n    super.onCreate(savedInstanceState);\n\n    // See assets/res/any/layout/hello_world.xml for this\n    // view layout definition, which is being set here as\n    // the content of our screen.\n    setContentView(R.layout.hello_world);\n}", "path": "src\\raisin\\android\\app\\HelloWorld.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * Constructor\n * @param view The view to animate\n * @param fps Frames/sec. for the animation\n */\n", "func_signal": "public ViewAnimator(View view, int fps)", "code": "{\n\trunning = false;\n\tthis.view = view;\n\tthis.diff = 1000/fps;\n}", "path": "src\\raisin\\android\\app\\AndroidGL\\ViewAnimator.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * {@inheritDoc}\n **/\n", "func_signal": "public void handleMessage(Message msg)", "code": "{\n\tif (running && msg.what == NEXT) {\n\t\tview.invalidate();\n\t\tmsg = obtainMessage(NEXT);\n\t\tlong current = SystemClock.uptimeMillis();\n\t\tif (nextTime < current) {\n\t\t\tnextTime = current + diff;\n\t\t}\n\t\tsendMessageAtTime(msg, nextTime);\n\t\tnextTime += diff;\n\t}\n}", "path": "src\\raisin\\android\\app\\AndroidGL\\ViewAnimator.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * Starts this animation.\n */\n", "func_signal": "public void start()", "code": "{\n\tif (!running) {\n\t\trunning = true;\n\t\tMessage msg = obtainMessage(NEXT);\n\t\tsendMessageAtTime(msg, SystemClock.uptimeMillis());\n\t}\n}", "path": "src\\raisin\\android\\app\\AndroidGL\\ViewAnimator.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * The Surface is created/init()\n */\n", "func_signal": "public void onSurfaceCreated(GL10 gl, EGLConfig config)", "code": "{\t\t\n\t//And there'll be light!\n\tgl.glLightfv(GL10.GL_LIGHT0, GL10.GL_AMBIENT, lightAmbientBuffer);\t\t//Setup The Ambient Light\n\tgl.glLightfv(GL10.GL_LIGHT0, GL10.GL_DIFFUSE, lightDiffuseBuffer);\t\t//Setup The Diffuse Light\n\tgl.glLightfv(GL10.GL_LIGHT0, GL10.GL_POSITION, lightPositionBuffer);\t//Position The Light\n\tgl.glEnable(GL10.GL_LIGHT0);\t\t\t\t\t\t\t\t\t\t\t//Enable Light 0\n\t\n\t//Blending\n\tgl.glColor4f(1.0f, 1.0f, 1.0f, 0.5f);\t\t\t\t//Full Brightness. 50% Alpha ( NEW )\n\tgl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE);\t\t//Set The Blending Function For Translucency ( NEW )\n\n\t//Settings\n\tgl.glDisable(GL10.GL_DITHER);\t\t\t\t//Disable dithering\n\tgl.glEnable(GL10.GL_TEXTURE_2D);\t\t\t//Enable Texture Mapping\n\tgl.glShadeModel(GL10.GL_SMOOTH); \t\t\t//Enable Smooth Shading\n\tgl.glClearColor(0.0f, 0.0f, 0.0f, 0.5f); \t//Black Background\n\tgl.glClearDepthf(1.0f); \t\t\t\t\t//Depth Buffer Setup\n\tgl.glEnable(GL10.GL_DEPTH_TEST); \t\t\t//Enables Depth Testing\n\tgl.glDepthFunc(GL10.GL_LEQUAL); \t\t\t//The Type Of Depth Testing To Do\n\t\n\t//Really Nice Perspective Calculations\n\tgl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_NICEST); \n\t\t\t\n\t//Load the texture for the cube once during Surface creation\n\tcube.loadGLTexture(gl, this.context);\n}", "path": "src\\raisin\\android\\app\\lesson8\\Lesson08.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/* Handles item selections */\n", "func_signal": "public boolean onOptionsItemSelected(MenuItem item)", "code": "{\n        switch (item.getItemId()) {\n\n        case MENU_NEW_GAME:\n\n            mGameView.restartGame();\n\n/*\n        \tfinal CharSequence[] items = {\"Red\", \"Green\", \"Blue\"};\n\n        \tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n        \tbuilder.setTitle(\"Pick a color\");\n        \tbuilder.setItems(items, new DialogInterface.OnClickListener() {\n        \t    public void onClick(DialogInterface dialog, int item) {\n        \t        Toast.makeText(getApplicationContext(), items[item], Toast.LENGTH_SHORT).show();\n        \t    }\n        \t});\n        \tAlertDialog alert = builder.create();\n        \talert.show();\n        \t// newGame();\n*/\n            return true;\n\n        case MENU_QUIT:\n        \tfinish();\n            return true;\n        }\n        return false;\n    }", "path": "src\\raisin\\android\\engine2\\GameActivity.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * Override the touch screen listener.\n * \n * React to moves and presses on the touchscreen.\n */\n", "func_signal": "@Override\npublic boolean onTouchEvent(MotionEvent event)", "code": "{\n\t//\n\tfloat x = event.getX();\n        float y = event.getY();\n        \n        //If a touch is moved on the screen\n        if(event.getAction() == MotionEvent.ACTION_MOVE) {\n        \t//Calculate the change\n        \tfloat dx = x - oldX;\n        float dy = y - oldY;\n        \t//Define an upper area of 10% on the screen\n        \tint upperArea = this.getHeight() / 10;\n        \t\n        \t//Zoom in/out if the touch move has been made in the upper\n        \tif(y < upperArea) {\n        \t\tz -= dx * TOUCH_SCALE / 2;\n        \t\n        \t//Rotate around the axis otherwise\n        \t} else {        \t\t\n    \t        xrot += dy * TOUCH_SCALE;\n    \t        yrot += dx * TOUCH_SCALE;\n        \t}        \n        \n        //A press on the screen\n        } else if(event.getAction() == MotionEvent.ACTION_UP) {\n        \t//Define an upper area of 10% to define a lower area\n        \tint upperArea = this.getHeight() / 10;\n        \tint lowerArea = this.getHeight() - upperArea;\n        \t\n        \t//\n        \tif(y > lowerArea) {\n        \t\t//Change the blend setting if the lower area left has been pressed ( NEW ) \n        \t\tif(x < (this.getWidth() / 2)) {\n        \t\t\tif(blend) {\n        \t\t\t\tblend = false;\n            \t\t} else {\n            \t\t\tblend = true;\n            \t\t}\n        \t\t\t\n        \t\t//Change the light setting if the lower area right has been pressed \n        \t\t} else {\n        \t\t\tif(light) {\n            \t\t\tlight = false;\n            \t\t} else {\n            \t\t\tlight = true;\n            \t\t}\t\n        \t\t}\n        \t}\n        \telse {\n        \t\t// cycle all filters on tap anywhere else\n        \t\tfilter= (filter + 1) % 3;\n        \t}\n        }\n        \n        //Remember the values\n        oldX = x;\n        oldY = y;\n        \n        //We handled the event\n\treturn true;\n}", "path": "src\\raisin\\android\\app\\lesson8\\Lesson08.java", "repo_name": "steppicrew/Android-Skiing", "stars": 4, "license": "None", "language": "java", "size": 940}
{"docstring": "/**\n * The constructor.\n */\n", "func_signal": "public DataSourceDataContentHandler(DataContentHandler dch, DataSource ds)", "code": "{\n\tthis.ds = ds;\n\tthis.dch = dch;\n}", "path": "src\\main\\java\\javax\\activation\\DataHandler.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Get an OutputStream for this DataHandler to allow overwriting\n * the underlying data.\n * If the DataHandler was created with a DataSource, the\n * DataSource's <code>getOutputStream</code> method is called.\n * Otherwise, <code>null</code> is returned.\n *\n * @return the OutputStream\n *\n * @see javax.activation.DataSource#getOutputStream\n * @see javax.activation.URLDataSource\n */\n", "func_signal": "public OutputStream getOutputStream() throws IOException", "code": "{\n\tif (dataSource != null)\n\t    return dataSource.getOutputStream();\n\telse\n\t    return null;\n}", "path": "src\\main\\java\\javax\\activation\\DataHandler.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Write the data to an <code>OutputStream</code>.<p>\n *\n * If the DataHandler was created with a DataSource, writeTo\n * retrieves the InputStream and copies the bytes from the\n * InputStream to the OutputStream passed in.\n * <p>\n * If the DataHandler was created with an object, writeTo\n * retrieves the DataContentHandler for the object's type.\n * If the DataContentHandler was found, it calls the\n * <code>writeTo</code> method on the <code>DataContentHandler</code>.\n *\n * @param os\tthe OutputStream to write to\n * @exception IOException\tif an I/O error occurs\n */\n", "func_signal": "public void writeTo(OutputStream os) throws IOException", "code": "{\n\t// for the DataSource case\n\tif (dataSource != null) {\n\t    InputStream is = null;\n\t    byte data[] = new byte[8*1024];\n\t    int bytes_read;\n\n\t    is = dataSource.getInputStream();\n\n\t    try {\n\t\twhile ((bytes_read = is.read(data)) > 0) {\n\t\t    os.write(data, 0, bytes_read);\n\t\t}\n\t    } finally {\n\t\tis.close();\n\t\tis = null;\n\t    }\n\t} else { // for the Object case\n\t    DataContentHandler dch = getDataContentHandler();\n\t    dch.writeTo(object, objectMimeType, os);\n\t}\n}", "path": "src\\main\\java\\javax\\activation\\DataHandler.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Return the Transfer Data of type DataFlavor from InputStream.\n * @param df\tthe DataFlavor\n * @param ds\tthe DataSource\n * @return\t\tthe constructed Object\n */\n", "func_signal": "public Object getTransferData(DataFlavor df, DataSource ds) throws\n\t\t\t\tUnsupportedFlavorException, IOException", "code": "{\n\n\tif (dch != null)\n\t    return dch.getTransferData(df, ds);\n\telse if (df.equals(getTransferDataFlavors()[0])) // only have one now\n\t    return ds.getInputStream();\n\telse\n\t    throw new UnsupportedFlavorException(df);\n}", "path": "src\\main\\java\\javax\\activation\\DataHandler.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Constructor\n */\n", "func_signal": "public TextEditor()", "code": "{\npanel_gb = new GridBagLayout();\nsetLayout(panel_gb);\n\nbutton_panel = new Panel();\n//\tbutton_panel.setBackground(Color.white);\nbutton_panel.setLayout( new FlowLayout() );\nsave_button = new Button(\"SAVE\");\nbutton_panel.add(save_button);\naddGridComponent(this,\n\t\t button_panel,\n\t\t panel_gb,\n\t\t 0,0,\n\t\t 1,1,\n\t\t 1,0);\n\n// create the text area\ntext_area = new TextArea(\"This is text\",24, 80, \n\t\t\t TextArea.SCROLLBARS_VERTICAL_ONLY );\n//\ttext_area.setBackground(Color.lightGray);\ntext_area.setEditable( true );\n\naddGridComponent(this,\n\t\t text_area,\n\t\t panel_gb,\n\t\t 0,1,\n\t\t 1,2,\n\t\t 1,1);\n\n// add listeners\nsave_button.addActionListener( this );\n\n    }", "path": "src\\main\\java\\com\\sun\\activation\\viewers\\TextEditor.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "//--------------------------------------------------------------------\n", "func_signal": "public void setCommandContext(String verb, DataHandler dh) throws IOException", "code": "{\n\t_dh = dh;\n\tthis.setInputStream( _dh.getInputStream() );\n\n  }", "path": "src\\main\\java\\com\\sun\\activation\\viewers\\TextEditor.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Create a <code>DataHandler</code> instance referencing the\n * specified DataSource.  The data exists in a byte stream form.\n * The DataSource will provide an InputStream to access the data.\n *\n * @param ds\tthe DataSource\n */\n", "func_signal": "public DataHandler(DataSource ds)", "code": "{\n\t// save a reference to the incoming DS\n\tdataSource = ds;\n\toldFactory = factory; // keep track of the factory\n}", "path": "src\\main\\java\\javax\\activation\\DataHandler.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Return all the commands for this type of data.\n * This method returns an array containing all commands\n * for the type of data represented by this DataHandler. The\n * MIME type for the underlying data represented by this DataHandler\n * is used to call through to the <code>getAllCommands</code> method\n * of the CommandMap associated with this DataHandler.\n *\n * @return\tthe CommandInfo objects representing all the commands\n *\n * @see javax.activation.CommandMap#getAllCommands\n */\n", "func_signal": "public CommandInfo[] getAllCommands()", "code": "{\n\tif (dataSource != null)\n\t    return getCommandMap().getAllCommands(getBaseType(), dataSource);\n\telse\n\t    return getCommandMap().getAllCommands(getBaseType());\n}", "path": "src\\main\\java\\javax\\activation\\DataHandler.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Create a <code>DataHandler</code> instance representing an object\n * of this MIME type.  This constructor is\n * used when the application already has an in-memory representation\n * of the data in the form of a Java Object.\n *\n * @param obj\tthe Java Object\n * @param mimeType\tthe MIME type of the object\n */\n", "func_signal": "public DataHandler(Object obj, String mimeType)", "code": "{\n\tobject = obj;\n\tobjectMimeType = mimeType;\n\toldFactory = factory; // keep track of the factory\n}", "path": "src\\main\\java\\javax\\activation\\DataHandler.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Return the data in its preferred Object form. <p>\n *\n * If the DataHandler was instantiated with an object, return\n * the object. <p>\n *\n * If the DataHandler was instantiated with a DataSource,\n * this method uses a DataContentHandler to return the content\n * object for the data represented by this DataHandler. If no\n * <code>DataContentHandler</code> can be found for the\n * the type of this data, the DataHandler returns an\n * InputStream for the data.\n *\n * @return the content.\n * @exception IOException if an IOException occurs during\n *                              this operation.\n */\n", "func_signal": "public Object getContent() throws IOException", "code": "{\n\tif (object != null)\n\t    return object;\n\telse\n\t    return getDataContentHandler().getContent(getDataSource());\n}", "path": "src\\main\\java\\javax\\activation\\DataHandler.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Return the MIME type of this object as retrieved from\n * the source object. Note that this is the <i>full</i>\n * type with parameters.\n *\n * @return\tthe MIME type\n */\n", "func_signal": "public String getContentType()", "code": "{\n\tif (dataSource != null) // data source case\n\t    return dataSource.getContentType();\n\telse\n\t    return objectMimeType; // obj/type case\n}", "path": "src\\main\\java\\javax\\activation\\DataHandler.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Return the Transfer Data of type DataFlavor from InputStream.\n * @param df\tthe DataFlavor\n * @param ds\tthe DataSource\n * @return\t\tthe constructed Object\n */\n", "func_signal": "public Object getTransferData(DataFlavor df, DataSource ds)\n\t\t\t\tthrows UnsupportedFlavorException, IOException", "code": "{\n\n\tif (dch != null)\n\t    return dch.getTransferData(df, ds);\n\telse if (df.equals(getTransferDataFlavors()[0])) // only have one now\n\t    return obj;\n\telse\n\t    throw new UnsupportedFlavorException(df);\n\n}", "path": "src\\main\\java\\javax\\activation\\DataHandler.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * A convenience method that takes a CommandInfo object\n * and instantiates the corresponding command, usually\n * a JavaBean component.\n * <p>\n * This method calls the CommandInfo's <code>getCommandObject</code>\n * method with the <code>ClassLoader</code> used to load\n * the <code>javax.activation.DataHandler</code> class itself.\n *\n * @param cmdinfo\tthe CommandInfo corresponding to a command\n * @return\tthe instantiated command object\n */\n", "func_signal": "public Object getBean(CommandInfo cmdinfo)", "code": "{\n\tObject bean = null;\n\n\ttry {\n\t    // make the bean\n\t    ClassLoader cld = null;\n\t    // First try the \"application's\" class loader.\n\t    cld = SecuritySupport.getContextClassLoader();\n\t    if (cld == null)\n\t\tcld = this.getClass().getClassLoader();\n\t    bean = cmdinfo.getCommandObject(this, cld);\n\t} catch (IOException e) {\n\t} catch (ClassNotFoundException e) { }\n\n\treturn bean;\n}", "path": "src\\main\\java\\javax\\activation\\DataHandler.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Returns whether the specified data flavor is supported\n * for this object.<p>\n *\n * This method iterates through the DataFlavors returned from\n * <code>getTransferDataFlavors</code>, comparing each with\n * the specified flavor.\n *\n * @param flavor\tthe requested flavor for the data\n * @return\t\ttrue if the data flavor is supported\n * @see javax.activation.DataHandler#getTransferDataFlavors\n */\n", "func_signal": "public boolean isDataFlavorSupported(DataFlavor flavor)", "code": "{\n\tDataFlavor[] lFlavors = getTransferDataFlavors();\n\n\tfor (int i = 0; i < lFlavors.length; i++) {\n\t    if (lFlavors[i].equals(flavor))\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "src\\main\\java\\javax\\activation\\DataHandler.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Write the object to the output stream.\n */\n", "func_signal": "public void writeTo(Object obj, String mimeType, OutputStream os)\n\t\t\t\t\t\tthrows IOException", "code": "{\n\tif (dch != null)\n\t    dch.writeTo(obj, mimeType, os);\n\telse\n\t    throw new UnsupportedDataTypeException(\n\t\t\t\"no DCH for content type \" + ds.getContentType());\n}", "path": "src\\main\\java\\javax\\activation\\DataHandler.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "///////////////////////////////////////////////////////////////////////\n", "func_signal": "private void performSaveOperation()", "code": "{\n\tOutputStream fos = null;\n\ttry {\n\t    fos = _dh.getOutputStream();\n\t} catch (Exception e) {}\n\t\n\tString buffer = text_area.getText();\n\t\n\t// make sure we got one\n\tif(fos == null) {\n\t    System.out.println(\"Invalid outputstream in TextEditor!\");\n\t    System.out.println(\"not saving!\");\n\t    return;\n\t}\n\t\n\ttry {\n\t    fos.write( buffer.getBytes() );\n\t    fos.flush(); // flush it!\n\t    fos.close(); // close it!\n\t} catch(IOException e)\n\t    {\n\t\tSystem.out.println(\"TextEditor Save Operation failed with: \" + e);\n\t    }\n\t\n}", "path": "src\\main\\java\\com\\sun\\activation\\viewers\\TextEditor.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * set the data stream, component to assume it is ready to\n * be read.\n */\n", "func_signal": "public void setInputStream(InputStream ins) throws IOException", "code": "{\n\t\n\tbyte data[] = new byte[1024];\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tint bytes_read = 0;\n\t// check that we can actually read\n\t\n\twhile((bytes_read = ins.read(data)) >0)\n\t    baos.write(data, 0, bytes_read);\n\tins.close();\n\n    \n\t// convert the buffer into a string\n\t// popuplate the buffer\n\ttext_buffer = baos.toString();\n\n\t// place in the text area\n\ttext_area.setText(text_buffer);\n  }", "path": "src\\main\\java\\com\\sun\\activation\\viewers\\TextEditor.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Sets the DataContentHandlerFactory.  The DataContentHandlerFactory\n * is called first to find DataContentHandlers.\n * The DataContentHandlerFactory can only be set once.\n * <p>\n * If the DataContentHandlerFactory has already been set,\n * this method throws an Error.\n *\n * @param newFactory\tthe DataContentHandlerFactory\n * @exception Error\tif the factory has already been defined.\n *\n * @see javax.activation.DataContentHandlerFactory\n */\n", "func_signal": "public static synchronized void setDataContentHandlerFactory(\n\t\t\t\t\t DataContentHandlerFactory newFactory)", "code": "{\n\tif (factory != null)\n\t    throw new Error(\"DataContentHandlerFactory already defined\");\n\n\tSecurityManager security = System.getSecurityManager();\n\tif (security != null) {\n\t    try {\n\t\t// if it's ok with the SecurityManager, it's ok with me...\n\t\tsecurity.checkSetFactory();\n\t    } catch (SecurityException ex) {\n\t\t// otherwise, we also allow it if this code and the\n\t\t// factory come from the same class loader (e.g.,\n\t\t// the JAF classes were loaded with the applet classes).\n\t\tif (DataHandler.class.getClassLoader() !=\n\t\t\tnewFactory.getClass().getClassLoader())\n\t\t    throw ex;\n\t    }\n\t}\n\tfactory = newFactory;\n}", "path": "src\\main\\java\\javax\\activation\\DataHandler.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Return the <i>preferred</i> commands for this type of data.\n * This method calls the <code>getPreferredCommands</code> method\n * in the CommandMap associated with this instance of DataHandler.\n * This method returns an array that represents a subset of\n * available commands. In cases where multiple commands for the\n * MIME type represented by this DataHandler are present, the\n * installed CommandMap chooses the appropriate commands.\n *\n * @return\tthe CommandInfo objects representing the preferred commands\n *\n * @see javax.activation.CommandMap#getPreferredCommands\n */\n", "func_signal": "public CommandInfo[] getPreferredCommands()", "code": "{\n\tif (dataSource != null)\n\t    return getCommandMap().getPreferredCommands(getBaseType(),\n\t\t\t\t\t\t\tdataSource);\n\telse\n\t    return getCommandMap().getPreferredCommands(getBaseType());\n}", "path": "src\\main\\java\\javax\\activation\\DataHandler.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Return the CommandMap for this instance of DataHandler.\n */\n", "func_signal": "private synchronized CommandMap getCommandMap()", "code": "{\n\tif (currentCommandMap != null)\n\t    return currentCommandMap;\n\telse\n\t    return CommandMap.getDefaultCommandMap();\n}", "path": "src\\main\\java\\javax\\activation\\DataHandler.java", "repo_name": "kohsuke/javax.activation", "stars": 6, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Gets the {@link Event} that was specified through the intent or null if\n * no or wrongly specified event.\n * \n * @return The Event or null.\n */\n", "func_signal": "private Event getEvent()", "code": "{\n\n\t// Get the extras\n\tfinal Bundle extras = getIntent().getExtras();\n\tif (extras == null)\n\t\treturn null;\n\n\t// Get id from extras\n\tif (!(extras.get(ID) instanceof Integer))\n\t\treturn null;\n\tfinal int id = (Integer) extras.get(ID);\n\n\t// Load event with specified id from the db\n\tfinal DBAdapter db = new DBAdapter(this);\n\ttry {\n\t\tdb.open();\n\t\treturn db.getEventById(id);\n\t} finally {\n\t\tdb.close();\n\t}\n}", "path": "src\\org\\fosdem\\schedules\\DisplayEvent.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * Fetch the Date when the Schedule database has been imported\n * \n * @return Date of the last Database update\n */\n", "func_signal": "private Date getDBLastUpdated()", "code": "{\n\tSharedPreferences settings = getSharedPreferences(Main.PREFS, 0);\n\tlong timestamp = settings.getLong(\"db_last_updated\", 0);\n\tif (timestamp == 0)\n\t\treturn null;\n\treturn new Date(timestamp * 1000);\n}", "path": "src\\org\\fosdem\\schedules\\Main.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * @return\n */\n", "func_signal": "private Dialog createAboutDialog()", "code": "{\n\tfinal AlertDialog.Builder builder = new AlertDialog.Builder(this);\n\tfinal View view = getLayoutInflater().inflate(R.layout.about, null,\n\t\t\tfalse);\n\tString version = \"\";\n\tPackageInfo pinfo;\n\ttry {\n\t\tpinfo = getPackageManager().getPackageInfo(getPackageName(), 0);\n\t\tversion = pinfo.versionName;\n\t} catch (NameNotFoundException e) {\n\t}\n\t\n\tbuilder.setTitle(getString(R.string.app_name) + \" - V. \" + version);\n\tbuilder.setIcon(android.R.drawable.ic_dialog_info);\n\tbuilder.setView(view);\n\tbuilder.setPositiveButton(getString(android.R.string.ok), null);\n\tbuilder.setCancelable(true);\n\treturn builder.create();\n}", "path": "src\\org\\fosdem\\schedules\\Main.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * Loads the contents of the event with into the gui.\n * \n * @param event\n *            The event to show\n */\n", "func_signal": "private void showEvent(Event event)", "code": "{\n\tString eventAbstract = StringUtil.niceify(event\n\t\t\t.getAbstract_description());\n\tif (eventAbstract.length() == 0)\n\t\teventAbstract = \"No abstract available.\";\n\tString eventDescription = StringUtil.niceify(event.getDescription());\n\tif (eventDescription.length() == 0)\n\t\teventDescription = \"No lecture description avablable.\";\n\n\tsetTextViewText(R.id.event_title, event.getTitle());\n\tsetTextViewText(R.id.event_track, event.getTrack());\n\tsetTextViewText(R.id.event_room, event.getRoom());\n\tsetTextViewText(R.id.event_time, StringUtil.datesToString(event\n\t\t\t.getStart(), event.getDuration()));\n\tsetTextViewText(R.id.event_speaker, StringUtil.personsToString(event\n\t\t\t.getPersons()));\n\tsetTextViewText(R.id.event_abstract, eventAbstract);\n\tsetTextViewText(R.id.event_description, eventDescription);\n\n\t// setImageViewImage(R.id.room_image,\n\t// StringUtil.roomNameToURL(event.getRoom()));\n\tprefetchImageViewImageAndShowIt(StringUtil.roomNameToURL(event\n\t\t\t.getRoom()));\n}", "path": "src\\org\\fosdem\\schedules\\DisplayEvent.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "// TODO eMich - get cachelocation from Android environment\n", "func_signal": "public static Object fetch(String address) throws MalformedURLException,\n\t\t\tIOException", "code": "{\n\t\tURL url = new URL(address);\n\t\tObject content = url.getContent();\n\t\treturn content;\n\t}", "path": "src\\org\\fosdem\\util\\FileUtil.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * All queries for this provider are for the search suggestion and shortcut\n * refresh mime type.\n */\n", "func_signal": "public String getType(Uri uri)", "code": "{\n\tswitch (sURIMatcher.match(uri)) {\n\tcase SEARCH_SUGGEST:\n\t\treturn SearchManager.SUGGEST_MIME_TYPE;\n\tcase SHORTCUT_REFRESH:\n\t\treturn SearchManager.SHORTCUT_MIME_TYPE;\n\tdefault:\n\t\tthrow new IllegalArgumentException(\"Unknown URL \" + uri);\n\t}\n}", "path": "src\\org\\fosdem\\providers\\SearchProvider.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * Prefetches the rooms images\n */\n", "func_signal": "private void updateRooms()", "code": "{\n\n\tsendMessage(Main.ROOMIMGSTART);\n\n\t// get the list of the rooms\n\tfinal String[] rooms;\n\tfinal DBAdapter db = new DBAdapter(context);\n\tdb.open();\n\ttry {\n\t\trooms = db.getRooms();\n\t} finally {\n\t\tdb.close();\n\t}\n\n\t// Download the images in the background\n\tfor (final String room : rooms) {\n\t\t// Log.d(LOG_TAG, \"Downloading room image:\" + room);\n\t\ttry {\n\t\t\tFileUtil.fetchCached(StringUtil.roomNameToURL(room));\n\t\t} catch (MalformedURLException e) {\n\t\t} catch (IOException e) {\n\t\t}\n\t}\n\n\tsendMessage(Main.ROOMIMGDONE);\n}", "path": "src\\org\\fosdem\\schedules\\BackgroundUpdater.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * Helper method to set the text of the {@link TextView} identified by\n * specified id.\n * \n * @param id\n *            Id of the view (must be a TextView)\n * @param value\n *            Text to set.\n */\n", "func_signal": "private void setTextViewText(int id, String value)", "code": "{\n\tfinal TextView tv = (TextView) findViewById(id);\n\n\tif (value == null) {\n\t\ttv.setText(\"\");\n\t\treturn;\n\t}\n\n\ttv.setText(value);\n}", "path": "src\\org\\fosdem\\schedules\\DisplayEvent.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * Sets up a uri matcher for search suggestion and shortcut refresh queries.\n */\n", "func_signal": "private static UriMatcher buildUriMatcher()", "code": "{\n\tUriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);\n\tmatcher.addURI(AUTHORITY, SearchManager.SUGGEST_URI_PATH_QUERY,\n\t\t\tSEARCH_SUGGEST);\n\tmatcher.addURI(AUTHORITY, SearchManager.SUGGEST_URI_PATH_QUERY + \"/*\",\n\t\t\tSEARCH_SUGGEST);\n\tmatcher.addURI(AUTHORITY, SearchManager.SUGGEST_URI_PATH_SHORTCUT,\n\t\t\tSHORTCUT_REFRESH);\n\tmatcher.addURI(AUTHORITY, SearchManager.SUGGEST_URI_PATH_SHORTCUT\n\t\t\t+ \"/*\", SHORTCUT_REFRESH);\n\treturn matcher;\n}", "path": "src\\org\\fosdem\\providers\\SearchProvider.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * Converts a cursor over the events table to a list of {@link Event}s. If\n * the cursor is empty, will return an empty list.\n *\n * @param eventsCursor\n *            The cursor.\n * @return A list of events.\n */\n", "func_signal": "protected List<Event> getEventsFromCursor(Cursor eventsCursor)", "code": "{\n\teventsCursor.moveToFirst();\n\tfinal List<Event> events = new ArrayList<Event>();\n\tfor (int i = 0; i < eventsCursor.getCount(); i++) {\n\t\tfinal Event event = new Event();\n\t\tevent.setId(eventsCursor.getInt(eventsCursor.getColumnIndex(ID)));\n\t\tevent.setStart(new Date(eventsCursor.getLong(eventsCursor\n\t\t\t\t.getColumnIndex(START))));\n\t\tevent.setDuration(eventsCursor.getInt(eventsCursor\n\t\t\t\t.getColumnIndex(DURATION)));\n\t\tevent.setRoom(eventsCursor.getString(eventsCursor\n\t\t\t\t.getColumnIndex(ROOM)));\n\t\tevent.setTag(eventsCursor.getString(eventsCursor\n\t\t\t\t.getColumnIndex(TAG)));\n\t\tevent.setTitle(eventsCursor.getString(eventsCursor\n\t\t\t\t.getColumnIndex(TITLE)));\n\t\tevent.setSubtitle(eventsCursor.getString(eventsCursor\n\t\t\t\t.getColumnIndex(SUBTITLE)));\n\t\tevent.setTrack(eventsCursor.getString(eventsCursor\n\t\t\t\t.getColumnIndex(TRACK)));\n\t\tevent.setType(eventsCursor.getString(eventsCursor\n\t\t\t\t.getColumnIndex(EVENTTYPE)));\n\t\tevent.setLanguage(eventsCursor.getString(eventsCursor\n\t\t\t\t.getColumnIndex(LANGUAGE)));\n\t\tevent.setAbstract_description(eventsCursor.getString(eventsCursor\n\t\t\t\t.getColumnIndex(ABSTRACT)));\n\t\tevent.setDescription(eventsCursor.getString(eventsCursor\n\t\t\t\t.getColumnIndex(DESCRIPTION)));\n\t\tevent.setDayindex(eventsCursor.getInt(eventsCursor\n\t\t\t\t.getColumnIndex(DAYINDEX)));\n\t\tevents.add(event);\n\t\tevent.setPersons(getPersonsForEvent(event.getId()));\n\t\teventsCursor.moveToNext();\n\t}\n\teventsCursor.close();\n\treturn events;\n}", "path": "src\\org\\fosdem\\db\\DBAdapter.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * Downloads the xml and repopulates the database\n * \n * @throws ParserException\n * @throws IOException\n * \n */\n", "func_signal": "private void updateXml() throws ParserException, IOException", "code": "{\n\t\n\tsendMessage(Main.STARTFETCHING);\n\n\t// Parse\n\tfinal ScheduleParser parser = new ScheduleParser(Main.XML_URL);\n\tparser.addTagEventListener(parseEventListener);\n\tfinal Schedule s = parser.parse();\n\n\tsendMessage(Main.DONEFETCHING);\n\n\t// Persist\n\tfinal DBAdapter db = new DBAdapter(context);\n\tdb.open();\n\ttry {\n\t\tdb.persistSchedule(s, handler);\n\t} finally {\n\t\tdb.close();\n\t}\n\n\tsendMessage(Main.DONELOADINGDB);\n}", "path": "src\\org\\fosdem\\schedules\\BackgroundUpdater.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * Retrieves the event for given id, or null if no such event exists.\n *\n * @param id\n *            The id of the requested event.\n * @return The event or null.\n */\n", "func_signal": "public Event getEventById(int id)", "code": "{\n\tfinal Cursor eventsById = db.query(TABLE_EVENTS, new String[] { ID,\n\t\t\tSTART, DURATION, ROOM, TAG, TITLE, SUBTITLE, TRACK, EVENTTYPE,\n\t\t\tLANGUAGE, ABSTRACT, DESCRIPTION, DAYINDEX }, \"id = :1\",\n\t\t\tnew String[] { Integer.toString(id) }, null, null, START, null);\n\n\tif (eventsById.getCount() < 1)\n\t\treturn null;\n\n\treturn getEventsFromCursor(eventsById).get(0);\n}", "path": "src\\org\\fosdem\\db\\DBAdapter.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * Returns the persons in the list as a comma separated string of their the\n * names.\n * \n * @param persons\n *            A list of persons\n * @return A string with their names\n */\n", "func_signal": "public static String personsToString(final List<Person> persons)", "code": "{\n\tfinal StringBuffer sb = new StringBuffer();\n\tboolean first = true;\n\tfor (final Person person : persons) {\n\t\tif (!first)\n\t\t\tsb.append(\", \");\n\t\tsb.append(person.getName());\n\t\tfirst = false;\n\t}\n\treturn sb.toString();\n}", "path": "src\\org\\fosdem\\util\\StringUtil.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * Set NOW as the time that the Schedule database has been imported.\n */\n", "func_signal": "private void setDBLastUpdated()", "code": "{\n\tSharedPreferences.Editor editor = getSharedPreferences(Main.PREFS, 0)\n\t\t\t.edit();\n\tlong timestamp = System.currentTimeMillis() / 1000;\n\teditor.putLong(\"db_last_updated\", timestamp);\n\teditor.commit(); // Don't forget to commit your edits!!!\n}", "path": "src\\org\\fosdem\\schedules\\Main.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\t\n\tfinal Intent intent = getIntent();\n\tfinal String queryAction = intent.getAction();\n\tif (Intent.ACTION_SEARCH.equals(queryAction)) {\n\t\tEventListActivity.doSearchWithIntent(this, intent);\n\t\tfinish();\n\t}\n\tif (Intent.ACTION_VIEW.equals(queryAction)) {\n\t\tIntent i = new Intent(this, DisplayEvent.class);\n\t\ti.putExtra(DisplayEvent.ID, Integer\n\t\t\t\t.parseInt(intent.getDataString()));\n\t\tstartActivity(i);\n\t\tfinish();\n\t}\n\t\n\tIntent initialLoadIntent = new Intent(FavoritesBroadcast.ACTION_FAVORITES_INITIAL_LOAD);\n\tsendBroadcast(initialLoadIntent);\n\n\tsetContentView(R.layout.main);\n\t\n\tcreateButtons();\n\t\n\tbtnFavorites = (Button) findViewById(R.id.btn_favorites);\n\tbtnFavorites.setOnClickListener(this);\n\t\n\tbtnCurrentEvents = (Button) findViewById(R.id.current_event);\n\tbtnCurrentEvents.setOnClickListener(this);\n\n\ttvProgress = (TextView) findViewById(R.id.progress);\n\ttvDbVer = (TextView) findViewById(R.id.db_ver);\n\n}", "path": "src\\org\\fosdem\\schedules\\Main.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * Takes a string an makes it nice for displaying. For use on unclean\n * strings that come from XML: single returns are removed, multiple returns\n * are kept. Tabs are replaced by spaces and duplicate spaces are joined\n * into one space.\n * \n * @param value\n *            An unclean string value\n * @return A niceified version of the value\n */\n", "func_signal": "public static String niceify(final String value)", "code": "{\n\tif (value == null) return \"\";\n\t\n\tfinal StringBuffer sb = new StringBuffer(value.length());\n\tfinal int length = value.length();\n\tint state = STATE_NORMAL;\n\tint i = 0;\n\tchar c;\n\twhile (i < length) {\n\t\tc = value.charAt(i++);\n\t\tswitch (c) {\n\t\tcase ' ':\n\t\tcase '\\t':\n\t\t\tif ((state & STATE_IN_WHITESPACE) == 0)\n\t\t\t\tsb.append(' ');\n\t\t\tstate = STATE_IN_WHITESPACE;\n\t\t\tbreak;\n\t\tcase '\\n':\n\t\t\tswitch (state & RETURN_STATES) {\n\t\t\tcase STATE_IN_SUBSEQUENT_RETURNS:\n\t\t\t\tsb.append('\\n');\n\t\t\t\tbreak;\n\t\t\tcase STATE_IN_FIRST_RETURN:\n\t\t\t\tsb.append(\"\\n\\n\");\n\t\t\t\tstate = STATE_IN_SUBSEQUENT_RETURNS;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif ((state & STATE_IN_WHITESPACE) == 0)\n\t\t\t\t\tsb.append(' ');\n\t\t\t\tstate = STATE_IN_FIRST_RETURN | STATE_IN_WHITESPACE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tsb.append(c);\n\t\t\tstate = STATE_NORMAL;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn sb.toString();\n}", "path": "src\\org\\fosdem\\util\\StringUtil.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * @return\n */\n", "func_signal": "private Dialog createUpdateDialog()", "code": "{\n\n\tfinal AlertDialog.Builder builder = new AlertDialog.Builder(this);\n\n\tbuilder.setTitle(getString(R.string.updater_title));\n\n\tfinal boolean[] selection = { true, true };\n\tbuilder.setMultiChoiceItems(R.array.updater_dialog_choices, selection,\n\t\t\tnew OnMultiChoiceClickListener() {\n\n\t\t\t\tpublic void onClick(DialogInterface dialog, int which,\n\t\t\t\t\t\tboolean isChecked) {\n\t\t\t\t\tselection[which] = isChecked;\n\t\t\t\t}\n\t\t\t});\n\n\tbuilder.setPositiveButton(getString(android.R.string.ok),\n\t\t\tnew DialogInterface.OnClickListener() {\n\n\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\n\t\t\t\t\t// if none selected, skip\n\t\t\t\t\tif (!(selection[0] || selection[1]))\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tfinal Thread t = new Thread(new BackgroundUpdater(\n\t\t\t\t\t\t\thandler, Main.this, getApplicationContext(),\n\t\t\t\t\t\t\tselection[0], selection[1]));\n\t\t\t\t\tt.start();\n\t\t\t\t}\n\n\t\t\t});\n\n\tbuilder.setNegativeButton(getString(android.R.string.cancel), null);\n\tbuilder.setCancelable(true);\n\n\treturn builder.create();\n}", "path": "src\\org\\fosdem\\schedules\\Main.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * Constructor\n * \n * @param handler\n *            Handler that gets messages about progress\n * @param parseEventListener\n *            Listener that gets messages about the progress of parsing the\n *            xml.\n * @param context\n *            The application context.\n */\n", "func_signal": "public BackgroundUpdater(Handler handler, ParserEventListener parseEventListener, Context context, boolean updateXml, boolean updateRooms)", "code": "{\n\tthis.handler = handler;\n\tthis.parseEventListener = parseEventListener;\n\tthis.context = context;\n\tthis.doUpdateRooms = updateRooms;\n\tthis.doUpdateXml = updateXml;\n}", "path": "src\\org\\fosdem\\schedules\\BackgroundUpdater.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * Gets the {@link Event} that was specified through the intent or null if\n * no or wrongly specified event.\n *\n * @return The Event or null.\n */\n", "func_signal": "private ArrayList<Event> getEventList(Boolean favoritesOnly)", "code": "{\n\n\tif (query == null && trackName == null && roomName == null\n\t\t\t&& dayIndex == -1 && timeSearch == null\n\t\t\t&& (favoritesOnly == null || !favoritesOnly)) {\n\t\tLog.e(LOG_TAG,\n\t\t\t\t\"You are loading this class with no valid room parameter\");\n\t\treturn null;\n\t}\n\n\t// Load event with specified id from the db\n\tfinal DBAdapter db = new DBAdapter(this);\n\ttry {\n\t\tdb.open();\n\n\t\tif (trackName != null) {\n\t\t\tsetTitle(\"Events on Track \" + trackName + \" for Day \" + dayIndex);\n\t\t\treturn (ArrayList<Event>) db.getEventsByTrackNameAndDayIndex(\n\t\t\t\t\ttrackName, dayIndex);\n\t\t} else if (query != null) {\n\t\t\tString[] queryArgs = new String[] { query };\n\t\t\treturn (ArrayList<Event>) db.getEventsFilteredLike(null, null,\n\t\t\t\t\tqueryArgs, queryArgs, queryArgs, queryArgs, queryArgs,\n\t\t\t\t\tnull, queryArgs);\n\t\t} else if (favorites != null && favorites) {\n\t\t\tLog.e(LOG_TAG, \"Getting favorites...\");\n\n\t\t\tSharedPreferences prefs = getSharedPreferences(Main.PREFS, Context.MODE_PRIVATE);\n\t\t\tDate startDate=prefs.getBoolean(Preferences.PREF_UPCOMING, false)?new Date():null;\n\n\t\t\treturn db.getFavoriteEvents(startDate);\n\t\t} else if (roomName != null) {\n\t\t\tsetTitle(\"Events in Room \" + roomName + \" on Day \" + dayIndex);\n\t\t\treturn (ArrayList<Event>) db.getEventsbyRoomNameAndDayIndex(roomName, dayIndex);\n\t\t} else if (dayIndex != -1){\n\t\t\treturn (ArrayList<Event>) db.getEventsbyDayIndex(dayIndex);\n\t\t} else if (timeSearch != null) {\n\t\t\tsetTitle(\"Upcoming Events\");\n\t\t\tDate beginDate = new Date(timeSearch -CURRENT_TIME_SLICE);\n\t\t\treturn (ArrayList<Event>) db.getUpcomingEvents(beginDate);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n \t\t} finally {\n\t\tdb.close();\n\t}\n}", "path": "src\\org\\fosdem\\schedules\\EventListActivity.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * Sends a message to the handler of the specific type (in arg1)\n * \n * @param type\n */\n", "func_signal": "private void sendMessage(int type)", "code": "{\n\tfinal Message msg = Message.obtain();\n\tmsg.what = type;\n\thandler.sendMessage(msg);\n}", "path": "src\\org\\fosdem\\schedules\\BackgroundUpdater.java", "repo_name": "mrud/debconf10-android", "stars": 5, "license": "None", "language": "java", "size": 555}
{"docstring": "/**\n * return object's state as string.\n * @return text\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\t\treturn id + \"\\t\" + symbol + \"\\t\" + exchange + \"\\t\" + vendor + \"\\t\" + currency\n\t\t\t\t+ \"\\t\" + securityType + \"\\t\" + expiry + \"\\t\" + contractRight\n\t\t\t\t+ \"\\t\" + strike;\n\t}", "path": "src\\main\\java\\org\\activequant\\core\\domainmodel\\InstrumentSpecification.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * This method destroys the object, closing all outstanding subscriptions.\n * If using Spring, declare this method as bean's \"destroy-method\".\n * \n * @throws Exception\n */\n", "func_signal": "public void destroy()", "code": "{\n\tfor(ISubscription<Quote> s : managedOrders.values()) {\n\t\ts.cancel();\n\t}\n}", "path": "src\\main\\java\\org\\activequant\\tradesystem\\broker\\integration\\QuoteTrackingBrokerBase.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * Creates new source.\n * \n * @param connectionPointUrl the url of ActiveMQ server.\n * @throws JMSException if something goes wrong.\n */\n", "func_signal": "public ActiveMqQuoteSource(String connectionPointUrl) throws JMSException", "code": "{\n\tsuper(\"ActiveMqQuoteSource (multi vendor)\");\n\n\tthis.connectionPointUrl = connectionPointUrl;\n\tconnect();\n}", "path": "src\\main\\java\\org\\activequant\\data\\retrieval\\integration\\jms\\ActiveMqQuoteSource.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * Converts an array of stacktrace elements to a string.\n * @param elements\n * @return a string representation of a stack trace. \n */\n", "func_signal": "public static String getStackTraceMessage(StackTraceElement[] elements)", "code": "{\n        // Create message\n        String separator = System.getProperty(\"line.separator\");\n        String message = \"\";\n        for(int i = 0; i < elements.length; i++) {\n            message += elements[i].toString() + separator;\n        }\n        return message;        \n    }", "path": "src\\main\\java\\org\\activequant\\util\\tools\\StackTraceParser.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * Gets the shared instance of this Class\n *\n * @return the shared service locator instance.\n */\n", "func_signal": "public static final ServiceLocator instance(final String beanFactoryReferenceLocation)", "code": "{\n\tinstance.init(beanFactoryReferenceLocation);\n    return instance;\n}", "path": "src\\main\\java\\org\\activequant\\util\\spring\\ServiceLocator.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n\t * Initializes the Spring application context from the given\n\t * <code>beanFactoryReferenceLocation</code>. If <code>null</code> is\n\t * specified for the <code>beanFactoryReferenceLocation</code> then the\n\t * default application context will be used.\n\t * \n\t * @param beanFactoryReferenceLocation\n\t *            the location of the beanRefFactory reference.\n\t */\n", "func_signal": "public synchronized void init(final String beanFactoryReferenceLocation)", "code": "{\n\t\tthis.beanFactoryReferenceLocation = beanFactoryReferenceLocation;\n\t\tthis.beanFactoryReference = null;\n\t}", "path": "src\\main\\java\\org\\activequant\\util\\spring\\ServiceLocator.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public int compareTo(Candle other)", "code": "{\n\t\t// ATTENTION: keep in sync with hashCode();\n\t\tint rc;\n\n\t\trc = safeCompare(this.getInstrumentSpecification(), other.getInstrumentSpecification());\n\t\tif(rc != 0) return rc;\n\t\trc = safeCompare(this.getTimeStamp(), other.getTimeStamp());\n\t\tif(rc != 0) return rc;\n\t\trc = safeCompare(this.timeFrame, other.timeFrame);\n\t\tif(rc != 0) return rc;\n\t\trc = safeCompare(this.openPrice, other.openPrice);\n\t\tif(rc != 0) return rc;\n\t\trc = safeCompare(this.highPrice, other.highPrice);\n\t\tif(rc != 0) return rc;\n\t\trc = safeCompare(this.lowPrice, other.lowPrice);\n\t\tif(rc != 0) return rc;\n\t\trc = safeCompare(this.closePrice, other.closePrice);\n\t\tif(rc != 0) return rc;\n\t\trc = safeCompare(this.volume, other.volume);\n\t\tif(rc != 0) return rc;\n\t\trc = safeCompare(this.highStamp, other.highStamp);\n\t\tif(rc != 0) return rc;\n\t\trc = safeCompare(this.lowStamp, other.lowStamp);\n\t\tif(rc != 0) return rc;\n\t\t\n\t\treturn rc;\n\t}", "path": "src\\main\\java\\org\\activequant\\core\\domainmodel\\Candle.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * @param innerSeries the innerSeries to set\n */\n", "func_signal": "public void setInnerCandles(TimeFrame timeFrame, Candle[] innerSeries)", "code": "{\n\tSeriesSpecification spec = new SeriesSpecification(this.getInstrumentSpecification(), timeFrame);\n\tthis.innerCandles = new CandleSeries(spec, innerSeries);\n}", "path": "src\\main\\java\\org\\activequant\\core\\domainmodel\\Candle.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * return object's state as string.\n * @return text\n */\n", "func_signal": "@Override\n\tpublic String toString()", "code": "{\n\t\treturn \" D : \" + getTimeStamp() + \" O : \" + openPrice + \" H : \" + highPrice + \" L : \" + lowPrice\n\t\t\t\t+ \" C : \" + closePrice + \" V : \" + volume;\n\t}", "path": "src\\main\\java\\org\\activequant\\core\\domainmodel\\Candle.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n\t * Shuts down the ServiceLocator and releases any used resources.\n\t */\n", "func_signal": "public synchronized void shutdown()", "code": "{\n\t\tif (this.beanFactoryReference != null) {\n\t\t\tthis.beanFactoryReference.release();\n\t\t\tthis.beanFactoryReference = null;\n\t\t}\n\t}", "path": "src\\main\\java\\org\\activequant\\util\\spring\\ServiceLocator.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * \n * @param symbol\n * @param exchange\n * @param vendor\n * @param currency\n * @param securityType\n * @param expiry\n * @param strike\n * @param contractRight\n * @param decorations\n */\n", "func_signal": "public InstrumentSpecification(Symbol symbol, String exchange,\n\t\tString vendor, String currency, String securityType, Expiry expiry,\n\t\tdouble strike, String contractRight, DecorationsMap decorations)", "code": "{\n\tthis.symbol = symbol;\n\tthis.exchange = exchange;\n\tthis.vendor = vendor;\n\tthis.currency = currency;\n\tthis.securityType = securityType;\n\tthis.expiry = expiry;\n\tthis.strike = strike;\n\tthis.contractRight = contractRight;\n\tthis.decorations = decorations;\n}", "path": "src\\main\\java\\org\\activequant\\core\\domainmodel\\InstrumentSpecification.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * copy constructor.\n * @param instrumentSpecification\n */\n", "func_signal": "public InstrumentSpecification(InstrumentSpecification spec)", "code": "{\n\tthis.id = spec.getId();\n\tthis.symbol = spec.getSymbol();\n\tthis.exchange = spec.getExchange();\n\tthis.vendor = spec.getVendor();\n\tthis.currency = spec.getCurrency();\n\tthis.securityType = spec.getSecurityType();\n\tthis.expiry = spec.getExpiry();\n\tthis.decorations = spec.getDecorationMap();\n\tthis.contractRight = spec.getContractRight();\n\tthis.strike = spec.getStrike();\n}", "path": "src\\main\\java\\org\\activequant\\core\\domainmodel\\InstrumentSpecification.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * \n * @param symbol\n * @param exchange\n * @param vendor\n * @param currency\n * @param securityType\n * @param expiry\n * @param strike\n * @param contractRight\n * @param infos\n */\n", "func_signal": "public InstrumentSpecification(Symbol symbol, String exchange,\n\t\tString vendor, String currency, String securityType, Expiry expiry,\n\t\tdouble strike, String contractRight, String infos)", "code": "{\n\tthis.symbol = symbol;\n\tthis.exchange = exchange;\n\tthis.vendor = vendor;\n\tthis.currency = currency;\n\tthis.securityType = securityType;\n\tthis.expiry = expiry;\n\tthis.strike = strike;\n\tthis.contractRight = contractRight;\n\tdecorations.addDecorations(infos);\n}", "path": "src\\main\\java\\org\\activequant\\core\\domainmodel\\InstrumentSpecification.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * clone this instance.\n * @return cloned object\n */\n", "func_signal": "@Override\n\tpublic Candle clone()", "code": "{\n\t\treturn new Candle(getInstrumentSpecification(), \n\t\t\t\tgetTimeStamp(), \n\t\t\t\topenPrice, \n\t\t\t\thighPrice, \n\t\t\t\tlowPrice, \n\t\t\t\tclosePrice, \n\t\t\t\tvolume,\n\t\t\t\ttimeFrame);\n\t}", "path": "src\\main\\java\\org\\activequant\\core\\domainmodel\\Candle.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * Stops the service. Please, mark this as Spring's bean \n * \"destroy-method\" so that service is disconnected upon \n * Spring context destruction\n * \n * @throws JMSException\n */\n", "func_signal": "public void stop() throws JMSException", "code": "{\n\tlog.info(\"Stopping listener.\");\n\tconnection.close();\n}", "path": "src\\main\\java\\org\\activequant\\data\\retrieval\\integration\\jms\\ActiveMqQuoteSource.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * method to fully execute an order at a given quotation. \n * Only important for PaperBroker!!!!\n * \n * @param order\n * @param priceIndication\n */\n", "func_signal": "private void executeOrder(Order order, TimeStamp date, double price, double quantity) throws Exception", "code": "{\n\t\n\tif(quantity > order.getOpenQuantity()){\n\t\tquantity = order.getOpenQuantity();\n\t}\n\t\n\t\n\t// create a new execution report. \n\tExecution execution = new Execution();\n\texecution.setExecutionTimeStamp(date);\n\texecution.setExecutionQuantity(quantity);\n\texecution.setExecutionPrice(price);\n\texecution.setOrder(order);\n\tlog.info(\"\" + order.getOrderTimeStamp().getDate().toLocaleString()  + \" \" + order.getSide() + \"  \" +order.getQuantity() + \"  \" + \n\t\t\torder.getSymbol() + \" \" +  this.getBrokerAccount().getBalanceBook().getCurrentBalance() );\n\t// bill the commission. \n\tthis.getBrokerAccount().getBalanceBook().addBalanceEntry(-commission, execution.getExecutionTimeStamp());\n\t\n\t// call the super class execution method. \n\tsuper.processExecution(execution);\n\n}", "path": "src\\main\\java\\org\\activequant\\tradesystem\\broker\\integration\\PaperBroker.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public int compareTo(InstrumentSpecification other)", "code": "{\n\t// ATTENTION: keep in sync with hashCode();\n\tint rc;\n\t\n\trc = safeCompare(this.symbol, other.symbol);\n\tif(rc != 0) return rc;\n\trc = safeCompare(this.exchange, other.exchange);\n\tif(rc != 0) return rc;\n\trc = safeCompare(this.vendor, other.vendor);\n\tif(rc != 0) return rc;\n\trc = safeCompare(this.currency, other.currency);\n\tif(rc != 0) return rc;\n\trc = safeCompare(this.securityType, other.securityType);\n\tif(rc != 0) return rc;\n\trc = safeCompare(this.expiry, other.expiry);\n\tif(rc != 0) return rc;\n\trc = safeCompare(this.strike, other.strike);\n\tif(rc != 0) return rc;\n\trc = safeCompare(this.contractRight, other.contractRight);\n\tif(rc != 0) return rc;\n\t\n\treturn rc;\n}", "path": "src\\main\\java\\org\\activequant\\core\\domainmodel\\InstrumentSpecification.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * Call this method to initialize the object (all properties must be already set).\n * When using Spring, declare this as bean's \"init-method\".\n * \n * @throws Exception if something goes wrong.\n */\n", "func_signal": "public void init() throws Exception", "code": "{\n\t\tOrder[] openOrders = this.getBrokerAccount().getOrderBook().getOpenOrders();\n\t\tfor(Order o : openOrders) {\n\t\t\tquoteTracker.addToManagedOrders(o);\n\t\t}\n}", "path": "src\\main\\java\\org\\activequant\\tradesystem\\broker\\integration\\PaperBroker.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * stub implementation, override in your trade system.\n */\n", "func_signal": "@Override\npublic Order[] onExecution(Account account, Execution execution,  Order changedOrder) throws Exception", "code": "{\n\tlog.info(\"Execution \" + execution + \" \\n Order status change :\"+changedOrder.toString()+\"\\ncurrent position count \"+account.getPortfolio().getPositions().length);\n\n\tif(msg != null) {\n\t\tmsg.sendMessage(targetJid, null, \"Execution \" +execution.toString()+\" \\n Order status change :\"+changedOrder.toString()+\"\\ncurrent position count \"+account.getPortfolio().getPositions().length);\n\t}\n\t\n\tList<Order> orders = new ArrayList<Order>();\n\tif(changedOrder.getType()==OrderType.LIMIT || changedOrder.getType()==OrderType.STOP || changedOrder.getType()==OrderType.TRAILING_STOP \n\t\t\t|| changedOrder.getType()==OrderType.STOP_LIMIT){\n\t\t// cancel all other orders. \n\t\tfor(Order openOrder : account.getOrderBook().getOpenOrders()){\n\t\t\topenOrder.setState(OrderState.CANCELED);\n\t\t\t// verydirtyharry.\n\t\t\torders.add(openOrder);\n\t\t\tlog.info(\"Execution CANCELLING: \" + openOrder);\n\t\t}\n\t\tflat = true; \n\t}\n\telse{\n\t\t\n\t\tif(changedOrder.getMessage()!=null && changedOrder.getMessage().equals(\"OPEN\")){\n\t\t\t\n\t\t\tif(changedOrder.getSide() == OrderSide.BUY){\n\n\t\t\t\t// check if it was a simple buy order ... \n\t\t\t\t// add a target profit order. \n\t\t\t\tOrder targetProfitOrder = changedOrder.clone();\n\t\t\t\ttargetProfitOrder.setSide(OrderSide.SELL);\n\t\t\t\ttargetProfitOrder.setType(OrderType.LIMIT);\n\t\t\t\ttargetProfitOrder.setLimitPrice(changedOrder.getAveragePrice()+20);\n\t\t\t\t\n\t\t\t\t// add a stop loss order\n\t\t\t\tOrder stopLossOrder = changedOrder.clone();\n\t\t\t\tstopLossOrder.setSide(OrderSide.SELL);\n\t\t\t\tstopLossOrder.setType(OrderType.STOP);\n\t\t\t\tstopLossOrder.setStopPrice(changedOrder.getAveragePrice()-80);\n\t\t\t\t\n\t\t\t\t// add a trailing order. \n\t\t\t\tOrder trailingOrder = changedOrder.clone();\n\t\t\t\ttrailingOrder.setSide(OrderSide.SELL);\n\t\t\t\ttrailingOrder.setType(OrderType.TRAILING_STOP);\n\t\t\t\ttrailingOrder.setLimitPrice(changedOrder.getAveragePrice()+2);\n\t\t\t\ttrailingOrder.setTrailingDistance(2);\n\t\t\t\t\n\t\t\t\torders.add(targetProfitOrder);\n\t\t\t\torders.add(stopLossOrder);\n\t\t\t\torders.add(trailingOrder);\n\t\t\t\tlog.info(\"Execution ADDING: \" + targetProfitOrder);\n\t\t\t\tlog.info(\"Execution ADDING: \" + stopLoss);\n\t\t\t\tlog.info(\"Execution ADDING: \" + trailingOrder);\n\t\t\t}\n\t\t\telse{\n\t\t\t\t// add a target profit order. \n\t\t\t\tOrder targetProfitOrder = changedOrder.clone();\n\t\t\t\ttargetProfitOrder.setSide(OrderSide.BUY);\n\t\t\t\ttargetProfitOrder.setType(OrderType.LIMIT);\n\t\t\t\ttargetProfitOrder.setLimitPrice(changedOrder.getAveragePrice()-20);\n\t\t\t\t\n\t\t\t\t// add a stop loss order\n\t\t\t\tOrder stopLossOrder = changedOrder.clone();\n\t\t\t\tstopLossOrder.setSide(OrderSide.BUY);\n\t\t\t\tstopLossOrder.setType(OrderType.STOP);\n\t\t\t\tstopLossOrder.setStopPrice(changedOrder.getAveragePrice()+80);\n\t\t\t\t\n\t\t\t\t// add a trailing order. \n\t\t\t\tOrder trailingOrder = changedOrder.clone();\n\t\t\t\ttrailingOrder.setSide(OrderSide.BUY);\n\t\t\t\ttrailingOrder.setType(OrderType.TRAILING_STOP);\n\t\t\t\ttrailingOrder.setLimitPrice(changedOrder.getAveragePrice()-2);\n\t\t\t\ttrailingOrder.setTrailingDistance(2);\n\t\t\t\n\n\t\t\t\torders.add(targetProfitOrder);\n\t\t\t\torders.add(stopLossOrder);\n\t\t\t\torders.add(trailingOrder);\t\n\t\t\t\tlog.info(\"Execution ADDING: \" + targetProfitOrder);\n\t\t\t\tlog.info(\"Execution ADDING: \" + stopLoss);\n\t\t\t\tlog.info(\"Execution ADDING: \" + trailingOrder);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\tif(account.getPortfolio().getPositions().length == 0){\n\t\tflat = true; \n\t\tlog.info(\"Execution declares FLAT\");\n\t}\n\t**/\n\t\n\treturn orders.toArray(new Order[]{});\n}", "path": "src\\main\\java\\org\\activequant\\tradesystem\\system\\integration\\WeightedMASlopeSystem.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
{"docstring": "/**\n * clone this instance.\n * @return cloned object\n */\n", "func_signal": "@Override\n\tpublic InstrumentSpecification clone()", "code": "{\n\t\treturn new InstrumentSpecification(\n\t\t\t\tsymbol,\n\t\t\t\texchange,\n\t\t\t\tvendor,\n\t\t\t\tcurrency,\n\t\t\t\tsecurityType,\n\t\t\t\texpiry,\n\t\t\t\tstrike,\n\t\t\t\tcontractRight,\n\t\t\t\tdecorations);\n\t}", "path": "src\\main\\java\\org\\activequant\\core\\domainmodel\\InstrumentSpecification.java", "repo_name": "lydonchandra/activequant0", "stars": 5, "license": "None", "language": "java", "size": 448}
