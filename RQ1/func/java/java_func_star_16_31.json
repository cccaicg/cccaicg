{"docstring": "/**\n * <p>\n * Take the requested resource and clean anything out which might cause a problem, such as \"..\" etc.\n * </p>\n * @param pResource String to clean\n * @return Cleaned string\n */\n", "func_signal": "protected static String cleanResource(String pResource)", "code": "{\n\tString result = pResource.replace(CLEANER_DOUBLE_DOT, CLEANER_EMPTY_STRING);\n\tresult = result.replace(CLEANER_DOUBLE_SLASH, CLEANER_SINGLE_SLASH);\n\t\n\treturn result;\n}", "path": "library\\src\\org\\matt1\\http\\workers\\AbstractWorker.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Creates a new simple worker exception.\n * </p>\n * @param pStatus\n */\n", "func_signal": "public SimpleWorkerException(HttpStatus pStatus, String pMessage)", "code": "{\n\tsuper(pMessage);\n\tmStatus = pStatus;\n}", "path": "library\\src\\org\\matt1\\http\\workers\\simple\\SimpleWorkerException.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Selects an appropriate worker based on the requested resource.  If nothing suitable is found then the\n * default SimpleWrokerDispatcher is returned.\n * </p>\n * @param pRequest\n * @return\n * @throws InstantiationException \n * @throws IllegalAccessException \n */\n", "func_signal": "public AbstractWorker getWorker(String pRequest) throws IllegalAccessException, InstantiationException", "code": "{\n\t\n\tAbstractWorker result = null;\n\tPattern workerPattern;\n\t\n\tfor (Entry<Pattern, Class<AbstractWorker>> e : mWorkers.entrySet()) {\t\t\t\n\t\tworkerPattern = e.getKey();\n\t\tif (workerPattern.matcher(pRequest).matches()) {\n\t\t\tresult = e.getValue().newInstance();\n\t\t\tbreak;\n\t\t}\t\t\t\t\t\t\n\t}\n\t\n\tif (result == null) {\n\t\tresult = SimpleWorkerDispatcher.class.newInstance();\n\t}\n\t\n\treturn result;\n\t\n}", "path": "library\\src\\org\\matt1\\http\\workers\\WorkerFactory.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Given the data and the socket, write the response to the client.  Will automatically provide headers for\n * content-length, but content type should be provided by the worker as a separate header\n * </p>\n * @param pData Actual bytes to write\n * @param pSocket Socket to write to\n * @param pHeaders Any additional headers to provide\n */\n", "func_signal": "protected void writeResponse(byte[] pData, Socket pSocket, List<HttpHeader> pHeaders, HttpStatus pStatus)", "code": "{\n\ttry {\n\t\t\n\t\tif (!pSocket.isClosed() && pSocket.isConnected()) {\n\t\t\n\t\t\tOutputStream outStream = pSocket.getOutputStream();\t\t\t\t\n\t\t\toutStream.write(ByteUtils.getBytesFromString(HTTP_VERSION + pStatus.getDescription() + LINE_SEPARATOR));\n\t\t\t\n\t\t\t// Do headers\n\t\t\tfor (HttpHeader header : pHeaders) {\n\t\t\t\toutStream.write(header.getBytes());\n\t\t\t}\n\t\t\toutStream.write(new HttpHeader(CONTENT_LENGTH, String.valueOf(pData.length)).getBytes());\n\t\t\t//outStream.write(new DateHttpHeader().getBytes());\n\t\t\toutStream.write(mServerHeader.getBytes());\n\t\t\toutStream.write(ByteUtils.getBytesFromString(LINE_SEPARATOR));\n\t\t\t\n\t\t\toutStream.write(pData, 0, pData.length);\n\t\t\t\n\t\t\toutStream.close();\n\t\t\tpSocket.close();\n\t\t} else {\n\t\t\tLogger.debug(\"Socket was closed or disconnected before we could send response!\");\n\t\t}\t\t\t\n\t} catch (SocketException se) {\n\t\tLogger.debug(\"Got socket exception: \" + se.getMessage());\n\t} catch (IOException e) {\n\t\tLogger.error(\"IOException when trying to write response!\");\n\t} \t\n}", "path": "library\\src\\org\\matt1\\http\\workers\\AbstractWorker.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Triggers the request event if the handler is not null\n * </p>\n * @param pResource\n */\n", "func_signal": "protected void triggerRequestServedEvent(String pResource)", "code": "{\n\tif (mRequestListener != null) {\n\t\tmRequestListener.onRequestServed(pResource);\n\t}\n}", "path": "library\\src\\org\\matt1\\http\\workers\\AbstractWorker.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Creates a new simple worker exception.\n * </p>\n * @param pStatus\n */\n", "func_signal": "public SimpleWorkerException(HttpStatus pStatus, String pMessage, Exception pCause)", "code": "{\n\tsuper(pMessage, pCause);\n\tmStatus = pStatus;\n}", "path": "library\\src\\org\\matt1\\http\\workers\\simple\\SimpleWorkerException.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Writes a simple text HTML response out to the socket\n * </p>\n * @param pResponse Stream of bytes to write\n */\n", "func_signal": "protected void writeResponse(String pResponse, Socket pSocket, HttpStatus pStatus)", "code": "{\n\tList<HttpHeader> headers = new Vector<HttpHeader>();\n\theaders.add(new ContentTypeHttpHeader(\"text/html\"));\n\twriteResponse(pResponse.getBytes(), pSocket, headers, HttpStatus.HTTP200);\n}", "path": "library\\src\\org\\matt1\\http\\workers\\AbstractWorker.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Process the request for a directory and return a HTML directory listing.\n * </p>\n * @throws SimpleWorkerException \n */\n", "func_signal": "public SimpleResponse handlePackage(SimpleRequest pRequest) throws SimpleWorkerException", "code": "{\n        \t\t\n\tSimpleResponse response = null;\n\tFile resource = null;\n\t\n\ttry {\n\t\t\n\t\tif (pRequest.getMethod() != HttpMethod.GET) {\n\t\t\tthrow new SimpleWorkerException(HttpStatus.HTTP405);\n\t\t} else {\n\t\t\t\n\t\t\tresource = new File(Server.getRoot() + URLDecoder.decode(pRequest.getResource()));\n\t\t\t\n\t\t\tif (!resource.exists() || !resource.canRead()) {\n\t\t\t\tthrow new SimpleWorkerException(HttpStatus.HTTP404);\n\t\t\t} else if (!resource.isDirectory()) {\n\t\t\t\tthrow new SimpleWorkerException(HttpStatus.HTTP500);\t\t\t\n\t\t\t} else {\t\n\t\t\t\t\n\t\t\t\tFile[] children = resource.listFiles();\n\t\t\t\tStringBuffer buffer = new StringBuffer();\n\t\t\t\t\n\t\t\t\tbuffer.append(\"<h1>\").append(pRequest.getResource()).append(\"</h1>\");\n\t\t\t\t\n\t\t\t\tif (children == null || children.length == 0) {\n\t\t\t\t\tbuffer.append(\"This directory has no files.\");\n\t\t\t\t} else {\n\t\t\t\t\tArrays.sort(children);\n\t\t\t\t\tfor (File child : children) {\n\t\t\n\t\t\t\t\t\tif (child.isDirectory()) {\n\t\t\t\t\t\t\tbuffer.append(\"[dir] <a href=\\\"\").append(pRequest.getResource()).append(child.getName()).append(\"/\\\">\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbuffer.append(\"<a href=\\\"\").append(pRequest.getResource()).append(child.getName()).append(\"\\\">\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tbuffer.append(child.getName());\n\t\t\t\t\t\tbuffer.append(\"</a><br />\");\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString type = \"text/html\";\n\t\t\t\t\t\t\t\t\t\n\t\t\t\tresponse = new SimpleResponse(type, ByteUtils.getBytesFromString(buffer.toString()));\n\t\t\t}\n\t\t}\n\n\t} catch (OutOfMemoryError e) {\n\t\tLogger.error(\"OutOfMemoryError when trying to serve \" + pRequest.getResource() + e.toString());\n\t\tthrow new SimpleWorkerException(HttpStatus.HTTP503);\n\t}\n\t\n\treturn response;\n}", "path": "library\\src\\org\\matt1\\http\\workers\\simple\\implementations\\SimpleDirectoryWorker.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Creates a new server\n * </p>\n * @param pInterface\n */\n", "func_signal": "public Server(InetAddress pInterface, int pPort, String pRoot)", "code": "{\n\tmRunFlag = true;\n\tmInterface = pInterface;\n\tmWebRoot = new File(pRoot);\n\tmPort = pPort;\n}", "path": "library\\src\\org\\matt1\\http\\Server.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Create a new error worker in case things went wrong\n * </p>\n * @param pError\n * @param pSocket\n */\n", "func_signal": "private ErrorWorker createErrorWorker(HttpStatus pError, Socket pSocket)", "code": "{\n\tErrorWorker result = new ErrorWorker();\n\tresult.InitialiseWorker(null, null, pSocket);\n\tresult.SetError(pError);\n\treturn result;\n}", "path": "library\\src\\org\\matt1\\http\\workers\\AbstractWorker.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Sets up event handlers - events from workers will be thrown up to the GUI as appropriate.\n * </p>\n */\n", "func_signal": "private void initEventHandling()", "code": "{\n\t\t\t\t\t\t\t\n\tmWorkerRequestListener = new WorkerEventListener() {\t\t\t\n\t\tpublic void onRequestServed(String pResource) {\n\t\t\tif (mRequestListener != null) {\n\t\t\t\tmRequestListener.onRequestServed(pResource);\t\t\n\t\t\t}\n\t\t}\t\t\t\n\t\tpublic void onRequestError(String pResource) {\n\t\t\tif (mRequestListener != null) {\n\t\t\t\tmRequestListener.onRequestError(pResource);\n\t\t\t}\n\t\t}\n\t};\t\n}", "path": "library\\src\\org\\matt1\\http\\Server.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Creates a new simple response object\n * </p>\n * @param pMimeType\n * @param pResponse\n */\n", "func_signal": "public SimpleResponse(String pMimeType, byte[] pResponse)", "code": "{\n\tmResponse = pResponse;\n\tmMimeType = pMimeType;\n}", "path": "library\\src\\org\\matt1\\http\\workers\\simple\\SimpleResponse.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Triggers the  error event if the handler is not null\n * </p>\n * @param pResource\n */\n", "func_signal": "protected void triggerRequestErrorEvent(String pResource)", "code": "{\n\tif (mRequestListener != null) {\n\t\tmRequestListener.onRequestError(pResource);\n\t}\n}", "path": "library\\src\\org\\matt1\\http\\workers\\AbstractWorker.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Creates a new Work Package for a worker to use to process the request.\n * </p>\n * @param pMethod\n * @param pResource\n */\n", "func_signal": "public SimpleRequest(HttpMethod pMethod, String pResource)", "code": "{\n\tmMethod = pMethod;\n\tmResource = pResource;\n}", "path": "library\\src\\org\\matt1\\http\\workers\\simple\\SimpleRequest.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Creates a new HTTP Header element.\n * </p>\n * @param pKey The key to use (do not include the colon character)\n * @param pValue The value to use\n */\n", "func_signal": "public HttpHeader(String pKey, String pValue)", "code": "{\n\tmKey = pKey;\n\tmValue = pValue;\n}", "path": "library\\src\\org\\matt1\\http\\utils\\headers\\HttpHeader.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Takes a request from the AbstractWorker and calls the appropriate SimpleWorkerImplementation\n * </p>\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n\t\n\tif (Looper.myLooper() == null) {\n\t\tLooper.prepare();\n\t}\n        \t\t\n\tif (mSocket == null || mSocket.isClosed()) {\n\t\tLogger.warn(\"Socket was null or closed when trying to serve thread!\");\n\t\treturn;\n\t}\n\t\n\ttry {\n\t\t\tSimpleWorkerInterface sp;\n\t\t\t\n\t\t\tif (mRequest.getResource().endsWith(\"/\")) {\n\t\t\t\tsp = new SimpleDirectoryWorker();\n\t\t\t} else {\n\t\t\t\tsp = new SimpleFileWorker();\n\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\tSimpleResponse response = sp.handlePackage(mRequest);\n\t\t\t\n\t\t\tVector<HttpHeader> headers = new Vector<HttpHeader>();\n\t\t\theaders.add(new ContentTypeHttpHeader(response.getMimeType()));\n\t\t\t\n\t\t\t// Trigger event\n\t\t\ttriggerRequestServedEvent(mRequest.getResource());\n\t\t\t\n\t\t\twriteResponse(response.getResponse(), mSocket, headers, HttpStatus.HTTP200);\n\t\t\tif (mSocket != null && !mSocket.isClosed()) {\n\t\t\t\tmSocket.close();\n\t\t\t}\n\t\t\n\t} catch (SimpleWorkerException e) {\n\t\tLogger.debug(\"PackWorker threw exception: \" + e.getStatus().toString());\n\t\twriteStatus(mSocket, e.getStatus());\n\t} catch (IOException e) {\n\t\tLogger.debug(\"IOException when trying to close SimpleWorker socket.\");\n\t}\n\n}", "path": "library\\src\\org\\matt1\\http\\workers\\SimpleWorkerDispatcher.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Gets the request line of the incoming request and returns an appropriate type of worker to handle it.\n * </p>\n * @param pSocket\n * @return\n */\n", "func_signal": "public static AbstractWorker getWorkerInstance(Socket pSocket, File pRoot)", "code": "{\n \t\t\n\tAbstractWorker worker = null;\n\tif (pSocket == null || pSocket.isClosed()) {\n\t\tLogger.warn(\"Socket was null or closed when trying to serve thread!\");\n\t\treturn worker;\n\t}\n\t\n\ttry {\n\t\t\n\t\t// Setup some socket bits and pieces\n\t\tpSocket.setSoTimeout(mTimeout);\n\t\tpSocket.setTcpNoDelay(true);\n\t\t\n\t\tBufferedReader reader =  new BufferedReader(new InputStreamReader(pSocket.getInputStream()), BUFFER_SIZE);\n\t\tString request = reader.readLine();\n\t\t\n\t\tif (request == null || CLEANER_EMPTY_STRING.equals(request)) {\n\t\t\tLogger.error(\"HTTP Request was null or zero-length\");\n\t\t\tworker = new ErrorWorker();\n\t\t\tworker.InitialiseWorker(null, null, pSocket);\n\t\t\t((ErrorWorker) worker).SetError(HttpStatus.HTTP400);\n\t\t} else {\n\t\t\tLogger.debug(\"Request: \" + request);\n\t\t\t\t\t\n\t\t\t// TODO: malformed request handler.\n\t\t\tString[] tokens = request.split(REQUEST_SEPARATOR);\n\t\t\t\t\t\t\n\t\t\tHttpMethod method = HttpMethod.valueOf(tokens[0]);\n\t\t\tString resource = tokens[1];\n\n\t\t\tworker = WorkerFactory.getInstance().getWorker(resource);\t\t\t\t\t\t\t\n\t\t\tworker.InitialiseWorker(method, resource, pSocket);\n\t\t}\n\n\t} catch (SocketTimeoutException ste) {\n\t\tLogger.error(\"Socket timed out after \" + mTimeout + \"ms when trying to serve thread\");\n\t\t// No socket so don't bother creating error worker.\n\t} catch (IOException e) {\n\t\tLogger.error(\"IOException when trying to serve thread: \" + e.toString());\n\t\tworker.createErrorWorker(HttpStatus.HTTP500, pSocket);\n\t} catch (IllegalAccessException e) {\n\t\tLogger.error(\"IllegalAccessException when trying to create Worker: \" + e.toString());\n\t\tworker.createErrorWorker(HttpStatus.HTTP500, pSocket);\n\t} catch (InstantiationException e) {\n\t\tLogger.error(\"InstantiationException when trying to create Worker: \" + e.toString());\n\t\tworker.createErrorWorker(HttpStatus.HTTP500, pSocket);\n\t}\n\n\treturn worker;\n\t\n}", "path": "library\\src\\org\\matt1\\http\\workers\\AbstractWorker.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Process the request and serves back the requested file with the appropriate mimetype\n * </p>\n * @throws SimpleWorkerException \n */\n", "func_signal": "public SimpleResponse handlePackage(SimpleRequest pRequest) throws SimpleWorkerException", "code": "{\n        \t\t\n\tSimpleResponse response = null;\n\tFile resource = null;\n\t\n\ttry {\n\t\t\n\t\tif (pRequest.getMethod() != HttpMethod.GET) {\n\t\t\tthrow new SimpleWorkerException(HttpStatus.HTTP405);\n\t\t} else {\n\t\t\t\t\t\n\t\t\tresource = new File(Server.getRoot() + URLDecoder.decode(pRequest.getResource()));\n\t\t\t\n\t\t\tif (!resource.exists() || !resource.canRead()) {\n\t\t\t\tthrow new SimpleWorkerException(HttpStatus.HTTP404, resource.toString() + \" can not be read.\");\n\t\t\t} else {\t\t\t\t\t\t\t\t\n\t\t\t\tFileInputStream fileReader = new FileInputStream(resource);\n\t\t\t\tbyte[] fileContent = new byte[(int) resource.length()];\n\t\t\t\tfileReader.read(fileContent, 0, (int) resource.length());\n\t\t\t\tfileReader.close();\n\t\t\t\tString ext = MimeTypeMap.getFileExtensionFromUrl(resource.getAbsolutePath());\n\t\t\t\tString type = MimeTypeMap.getSingleton().getMimeTypeFromExtension(ext);\n\t\t\t\tif (null == type || \"\".equals(type)) {\n\t\t\t\t\ttype = \"text/html\";\n\t\t\t\t}\t\t\n\t\t\t\t\n\t\t\t\tresponse = new SimpleResponse(type, fileContent);\n\t\t\t}\n\t\t}\n\t\n\t\n\t} catch (IOException e) {\n\t\tLogger.error(\"IOException when trying to serve \" + pRequest.getResource() + e.toString());\n\t\tthrow new SimpleWorkerException(HttpStatus.HTTP500, e);\n\t} catch (OutOfMemoryError e) {\n\t\tLogger.error(\"OutOfMemoryError when trying to serve \" + pRequest.getResource() + e.toString());\n\t\tthrow new SimpleWorkerException(HttpStatus.HTTP503);\n\t}\n\t\n\treturn response;\n}", "path": "library\\src\\org\\matt1\\http\\workers\\simple\\implementations\\SimpleFileWorker.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Creates a new simple worker exception.\n * </p>\n * @param pStatus\n */\n", "func_signal": "public SimpleWorkerException(HttpStatus pStatus, Exception pCause)", "code": "{\n\tsuper(pCause);\n\tmStatus = pStatus;\n}", "path": "library\\src\\org\\matt1\\http\\workers\\simple\\SimpleWorkerException.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * <p>\n * Stops the server\n * </p>\n */\n", "func_signal": "public void stop()", "code": "{\n\ttry {\n\t\tif (mSocket != null) {\n\t\t\tmSocket.close();\n\t\t}\n\t} catch (IOException e) {\n\t\tLogger.debug(\"IOException closing socket.\");\n\t}\n}", "path": "library\\src\\org\\matt1\\http\\Server.java", "repo_name": "matt1/AndroidHTTPServer", "stars": 31, "license": "mit", "language": "java", "size": 314}
{"docstring": "/**\n * Get an instance of ReferenceSet.\n */\n", "func_signal": "public ReferenceSet()", "code": "{\n    super();\n\n    contents = new HashSet<Reference<T>>();\n}", "path": "library\\src\\com\\jenxsol\\timelock\\utils\\ReferenceSet.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Will grab the date that the app was built and return it too you as a\n * Date();\n * \n * @param app\n * @return the date the app was built, otherwise\n */\n", "func_signal": "public static final Date getApplicationBuildDate(Context app)", "code": "{\n    long time = 0;\n    ZipFile zf = null;\n    try\n    {\n        ApplicationInfo ai = app.getPackageManager()\n                .getApplicationInfo(app.getPackageName(), 0);\n        zf = new ZipFile(ai.sourceDir);\n        ZipEntry ze = zf.getEntry(\"classes.dex\");\n        time = ze.getTime();\n        // String s = SimpleDateFormat.getInstance().format(new\n        // java.util.Date(time));\n\n    }\n    catch (Exception e)\n    {\n    }\n    finally\n    {\n        if (zf != null)\n        {\n            try\n            {\n                zf.close();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n    }\n    return new Date(time);\n}", "path": "library\\src\\com\\jenxsol\\timelock\\utils\\TimeLockSupport.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Will return the date when the app will stop working\n * \n * @since 1.2\n * @return date in the future (unless its already past)\n */\n", "func_signal": "public Date getExpiresDate()", "code": "{\n    final Calendar cal = Calendar.getInstance();\n    cal.setTime(mAppCreatedDate);\n    cal.add(Calendar.SECOND, (int) (timeout / 1000));\n    return cal.getTime();\n}", "path": "library\\src\\com\\jenxsol\\timelock\\app\\TimeLock.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Create a ReferenceSet with the given capacity.\n * \n * @param n\n *            the initial capacity\n */\n", "func_signal": "public ReferenceSet(int n)", "code": "{\n    super();\n    contents = new HashSet<Reference<T>>(n);\n}", "path": "library\\src\\com\\jenxsol\\timelock\\utils\\ReferenceSet.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * <p>\n * Initialise the time lock library.\n * </p>\n * <p>\n * By default this class is enabled by default when\n * {@link BuildConfig#DEBUG} is true, which is when you generate a debug\n * build (running inside eclipse).<br>\n * Then false if exporting the application.<br>\n * This can be overridden with {@link #setEnabled(boolean)}\n * </p>\n * <p>\n * Default Time Lock is 1 Week. This can be overridden with\n * {@link #setTimeOut(long)}.\n * </p>\n * <p>\n * Default is for the App to show a dialog.\n * </p>\n * <p>\n * Its worth noting that this method is not always quick especially on old\n * devices with slow IO. I recommend you wrap this in an async task. I shall\n * try to improve this in the future.\n * </p>\n * \n * \n * This holds a {@link SoftReference} to the {@link TimeLock} to reduce full\n * checks for the App being out dated.\n * \n * @param app\n * @return {@link TimeLock} instance\n */\n", "func_signal": "public static TimeLock get(Context ctx)", "code": "{\n    if (null == mSelf || null == mSelf.get())\n        mSelf = new SoftReference<TimeLock>(new TimeLock(ctx));\n    mSelf.get().setContext(ctx);\n    return mSelf.get();\n}", "path": "library\\src\\com\\jenxsol\\timelock\\app\\TimeLock.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Writes system time (milliseconds since January 1, 1970) as an NTP time\n * stamp at the given offset in the buffer.\n */\n", "func_signal": "private void writeTimeStamp(byte[] buffer, int offset, long time)", "code": "{\n    long seconds = time / 1000L;\n    long milliseconds = time - seconds * 1000L;\n    seconds += OFFSET_1900_TO_1970;\n\n    // write seconds in big endian format\n    buffer[offset++] = (byte) (seconds >> 24);\n    buffer[offset++] = (byte) (seconds >> 16);\n    buffer[offset++] = (byte) (seconds >> 8);\n    buffer[offset++] = (byte) (seconds >> 0);\n\n    long fraction = milliseconds * 0x100000000L / 1000L;\n    // write fraction in big endian format\n    buffer[offset++] = (byte) (fraction >> 24);\n    buffer[offset++] = (byte) (fraction >> 16);\n    buffer[offset++] = (byte) (fraction >> 8);\n    // low order bits should be random data\n    buffer[offset++] = (byte) (Math.random() * 255.0);\n}", "path": "library\\src\\com\\jenxsol\\timelock\\utils\\SntpClient.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Add an object to the Set.\n * \n * @param o\n *            the object\n * @return true if the object did not already exist\n */\n", "func_signal": "@Override\npublic boolean add(T o)", "code": "{\n    boolean rv = false;\n\n    if (!contains(o))\n    {\n        contents.add(getReference(o));\n        rv = true;\n    }\n\n    return (rv);\n}", "path": "library\\src\\com\\jenxsol\\timelock\\utils\\ReferenceSet.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Sends an SNTP request to the given host and processes the response.\n * \n * @param host\n *            host name of the server.\n * @param timeout\n *            network timeout in milliseconds.\n * @return true if the transaction was successful.\n */\n", "func_signal": "public boolean requestTime(String host, int timeout)", "code": "{\n    try\n    {\n        DatagramSocket socket = new DatagramSocket();\n        socket.setSoTimeout(timeout);\n        InetAddress address = InetAddress.getByName(host);\n        byte[] buffer = new byte[NTP_PACKET_SIZE];\n        DatagramPacket request = new DatagramPacket(buffer, buffer.length, address, NTP_PORT);\n\n        // set mode = 3 (client) and version = 3\n        // mode is in low 3 bits of first byte\n        // version is in bits 3-5 of first byte\n        buffer[0] = NTP_MODE_CLIENT | (NTP_VERSION << 3);\n\n        // get current time and write it to the request packet\n        long requestTime = System.currentTimeMillis();\n        long requestTicks = SystemClock.elapsedRealtime();\n        writeTimeStamp(buffer, TRANSMIT_TIME_OFFSET, requestTime);\n\n        socket.send(request);\n\n        // read the response\n        DatagramPacket response = new DatagramPacket(buffer, buffer.length);\n        socket.receive(response);\n        long responseTicks = SystemClock.elapsedRealtime();\n        long responseTime = requestTime + (responseTicks - requestTicks);\n        socket.close();\n\n        // extract the results\n        long originateTime = readTimeStamp(buffer, ORIGINATE_TIME_OFFSET);\n        long receiveTime = readTimeStamp(buffer, RECEIVE_TIME_OFFSET);\n        long transmitTime = readTimeStamp(buffer, TRANSMIT_TIME_OFFSET);\n        long roundTripTime = responseTicks - requestTicks - (transmitTime - receiveTime);\n        // receiveTime = originateTime + transit + skew\n        // responseTime = transmitTime + transit - skew\n        // clockOffset = ((receiveTime - originateTime) + (transmitTime -\n        // responseTime))/2\n        // = ((originateTime + transit + skew - originateTime) +\n        // (transmitTime - (transmitTime + transit - skew)))/2\n        // = ((transit + skew) + (transmitTime - transmitTime - transit +\n        // skew))/2\n        // = (transit + skew - transit + skew)/2\n        // = (2 * skew)/2 = skew\n        long clockOffset = ((receiveTime - originateTime) + (transmitTime - responseTime)) / 2;\n        // if (Config.LOGD) Log.d(TAG, \"round trip: \" + roundTripTime +\n        // \" ms\");\n        // if (Config.LOGD) Log.d(TAG, \"clock offset: \" + clockOffset +\n        // \" ms\");\n\n        // save our results - use the times on this side of the network\n        // latency\n        // (response rather than request time)\n        mNtpTime = responseTime + clockOffset;\n        mNtpTimeReference = responseTicks;\n        mRoundTripTime = roundTripTime;\n    } catch (Exception e)\n    {\n        if (BuildConfig.DEBUG)\n            Log.d(TAG, \"request time failed: \" + e);\n        return false;\n    }\n\n    return true;\n}", "path": "library\\src\\com\\jenxsol\\timelock\\utils\\SntpClient.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Auto exit checker, will basically exit how ever it knows best\n * \n * @param ctx\n */\n", "func_signal": "public static final void exit(Context ctx)", "code": "{\n    if (ctx instanceof Activity)\n    {\n        ((Activity) ctx).finish();\n        for (Activity a : TimeLock.getActivityStack())\n        {\n            if (null != a)\n            {\n                a.finish();\n            }\n        }\n\n    }\n    else\n    {\n        System.exit(0);\n    }\n}", "path": "library\\src\\com\\jenxsol\\timelock\\utils\\TimeLockSupport.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Checks if is application, very trivial\n * \n * @param ctx\n * @return\n */\n", "func_signal": "public static final boolean isApplication(Context ctx)", "code": "{\n    if (ctx instanceof Application)\n    {\n        return true;\n    }\n    return false;\n}", "path": "library\\src\\com\\jenxsol\\timelock\\utils\\TimeLockSupport.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Get a ReferenceSet with the contents from the given Collection.\n * \n * @param c\n *            the collection\n */\n", "func_signal": "public ReferenceSet(Collection<T> c)", "code": "{\n    super();\n    if (c == null)\n    {\n        throw new NullPointerException(\"Null collection provided to ReferenceSet\");\n    }\n\n    contents = new HashSet<Reference<T>>(c.size() * 2);\n\n    // Copy references into the content map\n    for (T o : c)\n    {\n        add(o);\n    }\n}", "path": "library\\src\\com\\jenxsol\\timelock\\utils\\ReferenceSet.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Get the current size of the Set. This is not an entirely cheap operation,\n * as it walks the entire iterator to make sure all entries are still valid\n * references.\n */\n", "func_signal": "@Override\npublic int size()", "code": "{\n    int rv = 0;\n    for (Iterator<T> i = iterator(); i.hasNext();)\n    {\n        i.next();\n        rv++;\n    }\n    return (rv);\n}", "path": "library\\src\\com\\jenxsol\\timelock\\utils\\ReferenceSet.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Show a time out dialog that when cancelled / finished will kill the app.\n * It's quite dirty but thats the point. It shouldn't try to do anything\n * else.\n * \n * @param ctx\n *            the current app context\n * @param title\n *            the dialog title\n * @param message\n *            the message to tell the user, make it relative informative!\n */\n", "func_signal": "public static final void timeOutDialog(final Context ctx, final String title,\n        final String message)", "code": "{\n    AlertDialog.Builder b = new AlertDialog.Builder(ctx);\n    b.setTitle(title);\n    b.setMessage(message);\n    b.setIcon(android.R.drawable.ic_dialog_info);\n    b.setCancelable(false);\n    b.setOnCancelListener(new OnCancelListener()\n    {\n\n        @Override\n        public void onCancel(DialogInterface dialog)\n        {\n            TimeLockSupport.exit(ctx);\n        }\n    });\n    b.setPositiveButton(android.R.string.ok, new OnClickListener()\n    {\n\n        @Override\n        public void onClick(DialogInterface dialog, int which)\n        {\n            TimeLockSupport.exit(ctx);\n        }\n    });\n    try\n    {\n        b.create().show();\n    } catch (Exception e)\n    {\n    }\n}", "path": "library\\src\\com\\jenxsol\\timelock\\utils\\DialogSupport.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Sets the KillDialog text, as well as setting the TimeOutEffect to\n * {@link TimeOutEffect#KILL_DIALOG}\n * \n * @param title\n *            dialog title\n * @param message\n *            dialog message\n * @return self\n * @since 1.1\n */\n", "func_signal": "public TimeLock setKillDialog(String title, String message)", "code": "{\n    mKillTitle = title;\n    mKillMessage = message;\n    timeOutEffect = TimeOutEffect.KILL_DIALOG;\n    return this;\n}", "path": "library\\src\\com\\jenxsol\\timelock\\app\\TimeLock.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Set the time locking featured to enabled or not. If enabling again will\n * force a re-check of the time. (Meaning it will kill the app if its now\n * moved past the build time limit).\n * \n * @return self.\n */\n", "func_signal": "public TimeLock setEnabled(boolean enable)", "code": "{\n    boolean check = (!TimeLock.enable && enable);\n    TimeLock.enable = enable;\n    if (check)\n    {\n        doCheck();\n    }\n    return this;\n}", "path": "library\\src\\com\\jenxsol\\timelock\\app\\TimeLock.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Fires a check of now vs the app creation date and the settings provided.\n * \n * @return\n */\n", "func_signal": "public TimeLock check()", "code": "{\n    if (mCtx instanceof Application)\n    {\n        throw new InstantiationError(\n                \"Please don't call check() from the application object, do it from onCreate of your activities\");\n    }\n    doCheck();\n    return this;\n}", "path": "library\\src\\com\\jenxsol\\timelock\\app\\TimeLock.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * This is the time out in millis from when the app is built. The Class\n * defaults to 1 Week. You can use {@link TimeLengths} for built in lengths.<Br>\n * Setting this time out will check for a vaild time again. Meaning if the\n * app has expired it will kill it.\n * \n * @param timeLength\n *            the length of time the app is valid for, this is only a\n *            measurement not a future time.<br>\n *            So for a 1 hour build pass in 3600000. Or to make your life\n *            easy! Use {@link TimeLengths}.\n * @return self\n */\n", "func_signal": "public TimeLock setTimeOut(long timeLength)", "code": "{\n    timeout = timeLength;\n    // Wont auto fire check on application class\n    if (!TimeLockSupport.isApplication(mCtx)) doCheck();\n    return this;\n}", "path": "library\\src\\com\\jenxsol\\timelock\\app\\TimeLock.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Reads the NTP time stamp at the given offset in the buffer and returns it\n * as a system time (milliseconds since January 1, 1970).\n */\n", "func_signal": "private long readTimeStamp(byte[] buffer, int offset)", "code": "{\n    long seconds = read32(buffer, offset);\n    long fraction = read32(buffer, offset + 4);\n    return ((seconds - OFFSET_1900_TO_1970) * 1000) + ((fraction * 1000L) / 0x100000000L);\n}", "path": "library\\src\\com\\jenxsol\\timelock\\utils\\SntpClient.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Reads an unsigned 32 bit big endian number from the given offset in the\n * buffer.\n */\n", "func_signal": "private long read32(byte[] buffer, int offset)", "code": "{\n    byte b0 = buffer[offset];\n    byte b1 = buffer[offset + 1];\n    byte b2 = buffer[offset + 2];\n    byte b3 = buffer[offset + 3];\n\n    // convert signed bytes to unsigned values\n    int i0 = ((b0 & 0x80) == 0x80 ? (b0 & 0x7F) + 0x80 : b0);\n    int i1 = ((b1 & 0x80) == 0x80 ? (b1 & 0x7F) + 0x80 : b1);\n    int i2 = ((b2 & 0x80) == 0x80 ? (b2 & 0x7F) + 0x80 : b2);\n    int i3 = ((b3 & 0x80) == 0x80 ? (b3 & 0x7F) + 0x80 : b3);\n\n    return ((long) i0 << 24) + ((long) i1 << 16) + ((long) i2 << 8) + i3;\n}", "path": "library\\src\\com\\jenxsol\\timelock\\utils\\SntpClient.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/**\n * Will look at the TimeOutEffect and perform based on that\n */\n", "func_signal": "private void handleExit()", "code": "{\n    // We have called expired before.. so skip repeating messages to users\n    // if (mHasExpired)\n    // {\n    // TimeLockSupport.exit(mCtx);\n    // }\n    switch (timeOutEffect)\n    {\n\n        case KILL_TOAST:\n            // TODO show toast and go bye bye\n        case KILL_DIALOG:\n            DialogSupport.timeOutDialog(mCtx, mKillTitle, mKillMessage);\n            break;\n        case ASSASSINATE:\n            // Good by :'(\n            TimeLockSupport.exit(mCtx);\n            break;\n\n        case NONE:\n        default:\n            // TODO: how should be handle this?\n            break;\n\n    }\n}", "path": "library\\src\\com\\jenxsol\\timelock\\app\\TimeLock.java", "repo_name": "chrisjenx/AndroidTimeLock", "stars": 30, "license": "None", "language": "java", "size": 153}
{"docstring": "/*\n================\nDraw_Char\n\nDraws one 8*8 graphics character with 0 being transparent.\nIt can be clipped to the top of the screen to allow the console to be\nsmoothly scrolled off.\n================\n*/\n", "func_signal": "public void Draw_Char(int x, int y, int num)", "code": "{\n\n\tnum &= 255;\n\n\tif ( (num&127) == 32 ) return; // space\n\n\tif (y <= -8) return; // totally off screen\n\n\tint row = num>>4;\n\tint col = num&15;\n\n\tfloat frow = row*0.0625f;\n\tfloat fcol = col*0.0625f;\n\tfloat size = 0.0625f;\n\n\tGL_Bind(draw_chars.texnum);\n\n\tgl.glBegin (GL_QUADS);\n\tgl.glTexCoord2f (fcol, frow);\n\tgl.glVertex2f (x, y);\n\tgl.glTexCoord2f (fcol + size, frow);\n\tgl.glVertex2f (x+8, y);\n\tgl.glTexCoord2f (fcol + size, frow + size);\n\tgl.glVertex2f (x+8, y+8);\n\tgl.glTexCoord2f (fcol, frow + size);\n\tgl.glVertex2f (x, y+8);\n\tgl.glEnd ();\n}", "path": "src\\jake2\\render\\fast\\Draw.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/*\n=============\nDraw_GetPicSize\n=============\n*/\n", "func_signal": "public void Draw_GetPicSize(Dimension dim, String pic)", "code": "{\n\n\timage_t image = Draw_FindPic(pic);\n\tdim.width = (image != null) ? image.width : -1;\n\tdim.height = (image != null) ? image.height : -1;\n}", "path": "src\\jake2\\render\\fast\\Draw.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/**\n * This method hasn't an effect on <code>width</code> and <code>height</code>\n * directly. The new values will be active after an <code>update()</code>\n * call.\n * \n * @param width\n *                the visible render screen width.\n * @param height\n *                the visible render screen height.\n */\n", "func_signal": "public synchronized void setSize(int width, int height)", "code": "{\n\tnewWidth = width;\n\tnewHeight = height;\n}", "path": "src\\jake2\\client\\viddef_t.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/*\n=============\nDraw_TileClear\n\nThis repeats a 64*64 tile graphic to fill the screen around a sized down\nrefresh window.\n=============\n*/\n", "func_signal": "public void Draw_TileClear(int x, int y, int w, int h, String pic)", "code": "{\n\timage_t\timage;\n\n\timage = Draw_FindPic(pic);\n\tif (image == null)\n\t{\n\t\tVID.Printf(Defines.PRINT_ALL, \"Can't find pic: \" + pic + '\\n');\n\t\treturn;\n\t}\n\n\tif ( ( ( gl_config.renderer == GL_RENDERER_MCD ) || ( (gl_config.renderer & GL_RENDERER_RENDITION) != 0 ) )  && !image.has_alpha)\n\t\tgl.glDisable(GL_ALPHA_TEST);\n\n\tGL_Bind(image.texnum);\n\tgl.glBegin (GL_QUADS);\n\tgl.glTexCoord2f(x/64.0f, y/64.0f);\n\tgl.glVertex2f (x, y);\n\tgl.glTexCoord2f( (x+w)/64.0f, y/64.0f);\n\tgl.glVertex2f(x+w, y);\n\tgl.glTexCoord2f( (x+w)/64.0f, (y+h)/64.0f);\n\tgl.glVertex2f(x+w, y+h);\n\tgl.glTexCoord2f( x/64.0f, (y+h)/64.0f );\n\tgl.glVertex2f (x, y+h);\n\tgl.glEnd ();\n\n\tif ( ( ( gl_config.renderer == GL_RENDERER_MCD ) || ( (gl_config.renderer & GL_RENDERER_RENDITION) != 0 ) )  && !image.has_alpha)\n\t\tgl.glEnable(GL_ALPHA_TEST);\n}", "path": "src\\jake2\\render\\fast\\Draw.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/** Constructor. */\n", "func_signal": "public edict_t(int i)", "code": "{\n    s.number = i;\n    index = i;\n}", "path": "src\\jake2\\game\\edict_t.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/*\n=============\nDraw_FindPic\n=============\n*/\n", "func_signal": "public image_t Draw_FindPic(String name)", "code": "{\n\tif (!name.startsWith(\"/\") && !name.startsWith(\"\\\\\"))\n\t{\n\t\treturn GL_FindImage(name, it_pic);\n\t} else {\n\t\treturn GL_FindImage(name.substring(1), it_pic);\n\t}\n}", "path": "src\\jake2\\render\\fast\\Draw.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/*\n=============\nDraw_Fill\n\nFills a box of pixels with a single color\n=============\n*/\n", "func_signal": "public void Draw_Fill(int x, int y, int w, int h, int colorIndex)", "code": "{\n\n\tif ( colorIndex > 255)\n\t\tCom.Error(Defines.ERR_FATAL, \"Draw_Fill: bad color\");\n\n\tgl.glDisable(GL_TEXTURE_2D);\n\n\tint color = d_8to24table[colorIndex]; \n\n\tgl.glColor3ub(\n\t\t(byte)((color >> 0) & 0xff), // r\n\t\t(byte)((color >> 8) & 0xff), // g\n\t\t(byte)((color >> 16) & 0xff) // b\n\t);\n\n\tgl.glBegin (GL_QUADS);\n\n\tgl.glVertex2f(x,y);\n\tgl.glVertex2f(x+w, y);\n\tgl.glVertex2f(x+w, y+h);\n\tgl.glVertex2f(x, y+h);\n\n\tgl.glEnd();\n\tgl.glColor3f(1,1,1);\n\tgl.glEnable(GL_TEXTURE_2D);\n}", "path": "src\\jake2\\render\\fast\\Draw.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/////////////////////////////////////////////////\n", "func_signal": "public boolean setField(String key, String value)", "code": "{\n\n    if (key.equals(\"classname\")) {\n        classname = GameSpawn.ED_NewString(value);\n        return true;\n    } // F_LSTRING),\n\n    if (key.equals(\"model\")) {\n        model = GameSpawn.ED_NewString(value);\n        return true;\n    } // F_LSTRING),\n\n    if (key.equals(\"spawnflags\")) {\n        spawnflags = Lib.atoi(value);\n        return true;\n    } // F_INT),\n\n    if (key.equals(\"speed\")) {\n        speed = Lib.atof(value);\n        return true;\n    } // F_FLOAT),\n\n    if (key.equals(\"accel\")) {\n        accel = Lib.atof(value);\n        return true;\n    } // F_FLOAT),\n\n    if (key.equals(\"decel\")) {\n        decel = Lib.atof(value);\n        return true;\n    } // F_FLOAT),\n\n    if (key.equals(\"target\")) {\n        target = GameSpawn.ED_NewString(value);\n        return true;\n    } // F_LSTRING),\n\n    if (key.equals(\"targetname\")) {\n        targetname = GameSpawn.ED_NewString(value);\n        return true;\n    } // F_LSTRING),\n\n    if (key.equals(\"pathtarget\")) {\n        pathtarget = GameSpawn.ED_NewString(value);\n        return true;\n    } // F_LSTRING),\n\n    if (key.equals(\"deathtarget\")) {\n        deathtarget = GameSpawn.ED_NewString(value);\n        return true;\n    } // F_LSTRING),\n    if (key.equals(\"killtarget\")) {\n        killtarget = GameSpawn.ED_NewString(value);\n        return true;\n    } // F_LSTRING),\n\n    if (key.equals(\"combattarget\")) {\n        combattarget = GameSpawn.ED_NewString(value);\n        return true;\n    } // F_LSTRING),\n\n    if (key.equals(\"message\")) {\n        message = GameSpawn.ED_NewString(value);\n        return true;\n    } // F_LSTRING),\n\n    if (key.equals(\"team\")) {\n        team = GameSpawn.ED_NewString(value);\n        Com.dprintln(\"Monster Team:\" + team);\n        return true;\n    } // F_LSTRING),\n\n    if (key.equals(\"wait\")) {\n        wait = Lib.atof(value);\n        return true;\n    } // F_FLOAT),\n\n    if (key.equals(\"delay\")) {\n        delay = Lib.atof(value);\n        return true;\n    } // F_FLOAT),\n\n    if (key.equals(\"random\")) {\n        random = Lib.atof(value);\n        return true;\n    } // F_FLOAT),\n\n    if (key.equals(\"move_origin\")) {\n        move_origin = Lib.atov(value);\n        return true;\n    } // F_VECTOR),\n\n    if (key.equals(\"move_angles\")) {\n        move_angles = Lib.atov(value);\n        return true;\n    } // F_VECTOR),\n\n    if (key.equals(\"style\")) {\n        style = Lib.atoi(value);\n        return true;\n    } // F_INT),\n\n    if (key.equals(\"count\")) {\n        count = Lib.atoi(value);\n        return true;\n    } // F_INT),\n\n    if (key.equals(\"health\")) {\n        health = Lib.atoi(value);\n        return true;\n    } // F_INT),\n\n    if (key.equals(\"sounds\")) {\n        sounds = Lib.atoi(value);\n        return true;\n    } // F_INT),\n\n    if (key.equals(\"light\")) {\n        return true;\n    } // F_IGNORE),\n\n    if (key.equals(\"dmg\")) {\n        dmg = Lib.atoi(value);\n        return true;\n    } // F_INT),\n\n    if (key.equals(\"mass\")) {\n        mass = Lib.atoi(value);\n        return true;\n    } // F_INT),\n\n    if (key.equals(\"volume\")) {\n        volume = Lib.atof(value);\n        return true;\n    } // F_FLOAT),\n\n    if (key.equals(\"attenuation\")) {\n        attenuation = Lib.atof(value);\n        return true;\n    } // F_FLOAT),\n\n    if (key.equals(\"map\")) {\n        map = GameSpawn.ED_NewString(value);\n        return true;\n    } // F_LSTRING),\n\n    if (key.equals(\"origin\")) {\n        s.origin = Lib.atov(value);\n        return true;\n    } // F_VECTOR),\n\n    if (key.equals(\"angles\")) {\n        s.angles = Lib.atov(value);\n        return true;\n    } // F_VECTOR),\n\n    if (key.equals(\"angle\")) {\n        s.angles = new float[] { 0, Lib.atof(value), 0 };\n        return true;\n    } // F_ANGLEHACK),\n\n    if (key.equals(\"item\")) {\n        GameBase.gi.error(\"ent.set(\\\"item\\\") called.\");\n        return true;\n    } // F_ITEM)\n\n    return false;\n}", "path": "src\\jake2\\game\\edict_t.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/**\n * Updates the buffered <code>width</code> and <code>height</code>. The\n * method should be called once at the beginning of a frame.\n */\n", "func_signal": "public synchronized void update()", "code": "{\n\twidth = newWidth;\n\theight = newHeight;\n}", "path": "src\\jake2\\client\\viddef_t.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/*\n@@@@@@@@@@@@@@@@@@@@@\nR_RegisterModel\n\n@@@@@@@@@@@@@@@@@@@@@\n*/\n", "func_signal": "public model_t R_RegisterModel(String name)", "code": "{\n\tmodel_t\tmod = null;\n\tint\t\ti;\n\tqfiles.dsprite_t sprout;\n\tqfiles.dmdl_t pheader;\n\n\tmod = Mod_ForName(name, false);\n\tif (mod != null)\n\t{\n\t\tmod.registration_sequence = registration_sequence;\n\n\t\t// register any images used by the models\n\t\tif (mod.type == mod_sprite)\n\t\t{\n\t\t\tsprout = (qfiles.dsprite_t)mod.extradata;\n\t\t\tfor (i=0 ; i<sprout.numframes ; i++)\n\t\t\t\tmod.skins[i] = GL_FindImage(sprout.frames[i].name, it_sprite);\n\t\t}\n\t\telse if (mod.type == mod_alias)\n\t\t{\n\t\t\tpheader = (qfiles.dmdl_t)mod.extradata;\n\t\t\tfor (i=0 ; i<pheader.num_skins ; i++)\n\t\t\t\tmod.skins[i] = GL_FindImage(pheader.skinNames[i], it_skin);\n\t\t\t// PGM\n\t\t\tmod.numframes = pheader.num_frames;\n\t\t\t// PGM\n\t\t}\n\t\telse if (mod.type == mod_brush)\n\t\t{\n\t\t\tfor (i=0 ; i<mod.numtexinfo ; i++)\n\t\t\t\tmod.texinfo[i].image.registration_sequence = registration_sequence;\n\t\t}\n\t}\n\treturn mod;\n}", "path": "src\\jake2\\render\\basic\\Model.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "// begin on this sample\n", "func_signal": "public void clear()", "code": "{\n           prev = next = null;\n           sfx = null;\n           volume = attenuation = begin = entnum = entchannel = 0;\n           fixed_origin = false;\n           Math3D.VectorClear(origin);\n       }", "path": "src\\jake2\\sound\\jsound\\SND_MIX.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/** Reads the game locals from a file. */\n", "func_signal": "public void load(QuakeFile f) throws IOException", "code": "{\n    String date = f.readString();\n\n    helpmessage1 = f.readString();\n    helpmessage2 = f.readString();\n\n    helpchanged = f.readInt();\n    // gclient_t*\n\n    spawnpoint = f.readString();\n    maxclients = f.readInt();\n    maxentities = f.readInt();\n    serverflags = f.readInt();\n    num_items = f.readInt();\n    autosaved = f.readInt() != 0;\n\n    // rst's checker :-)\n    if (f.readInt() != 1928)\n        Com.DPrintf(\"error in loading game_locals, 1928\\n\");\n\n}", "path": "src\\jake2\\game\\game_locals_t.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/*\n * QUAKED monster_gladiator (1 .5 0) (-32 -32 -24) (32 32 64) Ambush\n * Trigger_Spawn Sight\n */\n", "func_signal": "public static void SP_monster_gladiator(edict_t self)", "code": "{\n    if (GameBase.deathmatch.value != 0) {\n        GameUtil.G_FreeEdict(self);\n        return;\n    }\n\n    sound_pain1 = GameBase.gi.soundindex(\"gladiator/pain.wav\");\n    sound_pain2 = GameBase.gi.soundindex(\"gladiator/gldpain2.wav\");\n    sound_die = GameBase.gi.soundindex(\"gladiator/glddeth2.wav\");\n    sound_gun = GameBase.gi.soundindex(\"gladiator/railgun.wav\");\n    sound_cleaver_swing = GameBase.gi.soundindex(\"gladiator/melee1.wav\");\n    sound_cleaver_hit = GameBase.gi.soundindex(\"gladiator/melee2.wav\");\n    sound_cleaver_miss = GameBase.gi.soundindex(\"gladiator/melee3.wav\");\n    sound_idle = GameBase.gi.soundindex(\"gladiator/gldidle1.wav\");\n    sound_search = GameBase.gi.soundindex(\"gladiator/gldsrch1.wav\");\n    sound_sight = GameBase.gi.soundindex(\"gladiator/sight.wav\");\n\n    self.movetype = Defines.MOVETYPE_STEP;\n    self.solid = Defines.SOLID_BBOX;\n    self.s.modelindex = GameBase.gi\n            .modelindex(\"models/monsters/gladiatr/tris.md2\");\n    Math3D.VectorSet(self.mins, -32, -32, -24);\n    Math3D.VectorSet(self.maxs, 32, 32, 64);\n\n    self.health = 400;\n    self.gib_health = -175;\n    self.mass = 400;\n\n    self.pain = gladiator_pain;\n    self.die = gladiator_die;\n\n    self.monsterinfo.stand = gladiator_stand;\n    self.monsterinfo.walk = gladiator_walk;\n    self.monsterinfo.run = gladiator_run;\n    self.monsterinfo.dodge = null;\n    self.monsterinfo.attack = gladiator_attack;\n    self.monsterinfo.melee = gladiator_melee;\n    self.monsterinfo.sight = gladiator_sight;\n    self.monsterinfo.idle = gladiator_idle;\n    self.monsterinfo.search = gladiator_search;\n\n    GameBase.gi.linkentity(self);\n    self.monsterinfo.currentmove = gladiator_move_stand;\n    self.monsterinfo.scale = MODEL_SCALE;\n\n    GameAI.walkmonster_start.think(self);\n}", "path": "src\\jake2\\game\\monsters\\M_Gladiator.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/*\n===============\nDraw_GetPalette\n===============\n*/\n", "func_signal": "protected void Draw_GetPalette()", "code": "{\n\tint r, g, b;\n\tbyte[][] palette = new byte[1][]; //new byte[768];\n\n\t// get the palette\n\n\tLoadPCX(\"pics/colormap.pcx\", palette, null);\n\n\tif (palette[0] == null || palette[0].length != 768)\n\t\tCom.Error(Defines.ERR_FATAL, \"Couldn't load pics/colormap.pcx\");\n\n\tbyte[] pal = palette[0];\n\n\tint j = 0;\n\tfor (int i = 0; i < 256; i++) {\n\t\tr = pal[j++] & 0xFF;\n\t\tg = pal[j++] & 0xFF;\n\t\tb = pal[j++] & 0xFF;\n\n\t\td_8to24table[i] = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\t}\n\n\td_8to24table[255] &= 0x00FFFFFF; // 255 is transparent\n\n\tparticle_t.setColorPalette(d_8to24table);\n}", "path": "src\\jake2\\render\\fast\\Image.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/** Writes the entity to the file. */\n", "func_signal": "public void write(QuakeFile f) throws IOException", "code": "{\n\n    s.write(f);\n    f.writeBoolean(inuse);\n    f.writeInt(linkcount);\n    f.writeInt(num_clusters);\n\n    f.writeInt(9999);\n\n    if (clusternums == null)\n        f.writeInt(-1);\n    else {\n        f.writeInt(Defines.MAX_ENT_CLUSTERS);\n        for (int n = 0; n < Defines.MAX_ENT_CLUSTERS; n++)\n            f.writeInt(clusternums[n]);\n\n    }\n    f.writeInt(headnode);\n    f.writeInt(areanum);\n    f.writeInt(areanum2);\n    f.writeInt(svflags);\n    f.writeVector(mins);\n    f.writeVector(maxs);\n    f.writeVector(absmin);\n    f.writeVector(absmax);\n    f.writeVector(size);\n    f.writeInt(solid);\n    f.writeInt(clipmask);\n\n    f.writeInt(movetype);\n    f.writeInt(flags);\n\n    f.writeString(model);\n    f.writeFloat(freetime);\n    f.writeString(message);\n    f.writeString(classname);\n    f.writeInt(spawnflags);\n    f.writeFloat(timestamp);\n\n    f.writeFloat(angle);\n\n    f.writeString(target);\n    f.writeString(targetname);\n    f.writeString(killtarget);\n    f.writeString(team);\n    f.writeString(pathtarget);\n    f.writeString(deathtarget);\n    f.writeString(combattarget);\n\n    f.writeEdictRef(target_ent);\n\n    f.writeFloat(speed);\n    f.writeFloat(accel);\n    f.writeFloat(decel);\n\n    f.writeVector(movedir);\n\n    f.writeVector(pos1);\n    f.writeVector(pos2);\n\n    f.writeVector(velocity);\n    f.writeVector(avelocity);\n\n    f.writeInt(mass);\n    f.writeFloat(air_finished);\n\n    f.writeFloat(gravity);\n\n    f.writeEdictRef(goalentity);\n    f.writeEdictRef(movetarget);\n\n    f.writeFloat(yaw_speed);\n    f.writeFloat(ideal_yaw);\n\n    f.writeFloat(nextthink);\n\n    f.writeAdapter(prethink);\n    f.writeAdapter(think);\n    f.writeAdapter(blocked);\n\n    f.writeAdapter(touch);\n    f.writeAdapter(use);\n    f.writeAdapter(pain);\n    f.writeAdapter(die);\n\n    f.writeFloat(touch_debounce_time);\n    f.writeFloat(pain_debounce_time);\n    f.writeFloat(damage_debounce_time);\n\n    f.writeFloat(fly_sound_debounce_time);\n    f.writeFloat(last_move_time);\n\n    f.writeInt(health);\n    f.writeInt(max_health);\n\n    f.writeInt(gib_health);\n    f.writeInt(deadflag);\n    f.writeInt(show_hostile);\n\n    f.writeFloat(powerarmor_time);\n\n    f.writeString(map);\n\n    f.writeInt(viewheight);\n    f.writeInt(takedamage);\n    f.writeInt(dmg);\n    f.writeInt(radius_dmg);\n    f.writeFloat(dmg_radius);\n\n    f.writeInt(sounds);\n    f.writeInt(count);\n\n    f.writeEdictRef(chain);\n    f.writeEdictRef(enemy);\n    f.writeEdictRef(oldenemy);\n    f.writeEdictRef(activator);\n    f.writeEdictRef(groundentity);\n    f.writeInt(groundentity_linkcount);\n    f.writeEdictRef(teamchain);\n    f.writeEdictRef(teammaster);\n\n    f.writeEdictRef(mynoise);\n    f.writeEdictRef(mynoise2);\n\n    f.writeInt(noise_index);\n    f.writeInt(noise_index2);\n\n    f.writeFloat(volume);\n    f.writeFloat(attenuation);\n    f.writeFloat(wait);\n    f.writeFloat(delay);\n    f.writeFloat(random);\n\n    f.writeFloat(teleport_time);\n\n    f.writeInt(watertype);\n    f.writeInt(waterlevel);\n    f.writeVector(move_origin);\n    f.writeVector(move_angles);\n\n    f.writeInt(light_level);\n    f.writeInt(style);\n\n    f.writeItem(item);\n\n    moveinfo.write(f);\n    monsterinfo.write(f);\n    if (client == null)\n        f.writeInt(-1);\n    else\n        f.writeInt(client.index);\n\n    f.writeEdictRef(owner);\n\n    // rst's checker :-)\n    f.writeInt(9876);\n}", "path": "src\\jake2\\game\\edict_t.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/** Writes the game locals to a file. */\n", "func_signal": "public void write(QuakeFile f) throws IOException", "code": "{\n    f.writeString(new Date().toString());\n\n    f.writeString(helpmessage1);\n    f.writeString(helpmessage2);\n\n    f.writeInt(helpchanged);\n    // gclient_t*\n\n    f.writeString(spawnpoint);\n    f.writeInt(maxclients);\n    f.writeInt(maxentities);\n    f.writeInt(serverflags);\n    f.writeInt(num_items);\n    f.writeInt(autosaved ? 1 : 0);\n    // rst's checker :-)\n    f.writeInt(1928);\n}", "path": "src\\jake2\\game\\game_locals_t.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "// an auto test client\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t\n\t// program starts\n\tSystem.out.println(\"hello world.\");\n\t\n\tt1 t1 = new t1();\n\tt2 t2 = new t2();\n\tt2 t3 = new t2();\n\tSystem.out.println(t1.test());\n\tSystem.out.println(t2.test());\n\tSystem.out.println(t2.test(5));\n\tSystem.out.println(t3.test(5));\n\t\n\tSystem.out.println(\"good bye world.\");\n\t// program ends\n}", "path": "test\\AdapterRegister.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/*\n=============\nDraw_Pic\n=============\n*/\n", "func_signal": "public void Draw_Pic(int x, int y, String pic)", "code": "{\n\timage_t image;\n\n\timage = Draw_FindPic(pic);\n\tif (image == null)\n\t{\n\t\tVID.Printf(Defines.PRINT_ALL, \"Can't find pic: \" +pic + '\\n');\n\t\treturn;\n\t}\n\tif (scrap_dirty)\n\t\tScrap_Upload();\n\n\tif ( ( ( gl_config.renderer == GL_RENDERER_MCD ) || ( (gl_config.renderer & GL_RENDERER_RENDITION) != 0 ) ) && !image.has_alpha)\n\t\tgl.glDisable (GL_ALPHA_TEST);\n\n\tGL_Bind(image.texnum);\n\n\tgl.glBegin (GL_QUADS);\n\tgl.glTexCoord2f (image.sl, image.tl);\n\tgl.glVertex2f (x, y);\n\tgl.glTexCoord2f (image.sh, image.tl);\n\tgl.glVertex2f (x+image.width, y);\n\tgl.glTexCoord2f (image.sh, image.th);\n\tgl.glVertex2f (x+image.width, y+image.height);\n\tgl.glTexCoord2f (image.sl, image.th);\n\tgl.glVertex2f (x, y+image.height);\n\tgl.glEnd ();\n\n\tif ( ( ( gl_config.renderer == GL_RENDERER_MCD ) || ( (gl_config.renderer & GL_RENDERER_RENDITION) != 0 ) )  && !image.has_alpha)\n\t\tgl.glEnable (GL_ALPHA_TEST);\n}", "path": "src\\jake2\\render\\fast\\Draw.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/*\n@@@@@@@@@@@@@@@@@@@@@\nR_EndRegistration\n\n@@@@@@@@@@@@@@@@@@@@@\n*/\n", "func_signal": "public void R_EndRegistration()", "code": "{\n\tmodel_t\tmod;\n\n\tfor (int i=0; i<mod_numknown ; i++)\n\t{\n\t\tmod = mod_known[i];\n\t\tif (mod.name.length() == 0)\n\t\t\tcontinue;\n\t\tif (mod.registration_sequence != registration_sequence)\n\t\t{\t// don't need this model\n\t\t\tMod_Free(mod);\n\t\t}\n\t}\n\tGL_FreeUnusedImages();\n}", "path": "src\\jake2\\render\\basic\\Model.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/*\n================\nDraw_FadeScreen\n================\n*/\n", "func_signal": "public void Draw_FadeScreen()", "code": "{\n\tgl.glEnable(GL_BLEND);\n\tgl.glDisable(GL_TEXTURE_2D);\n\tgl.glColor4f(0, 0, 0, 0.8f);\n\tgl.glBegin(GL_QUADS);\n\n\tgl.glVertex2f(0,0);\n\tgl.glVertex2f(vid.getWidth(), 0);\n\tgl.glVertex2f(vid.getWidth(), vid.getHeight());\n\tgl.glVertex2f(0, vid.getHeight());\n\n\tgl.glEnd();\n\tgl.glColor4f(1,1,1,1);\n\tgl.glEnable(GL_TEXTURE_2D);\n\tgl.glDisable(GL_BLEND);\n}", "path": "src\\jake2\\render\\fast\\Draw.java", "repo_name": "mbien/jake2", "stars": 29, "license": "gpl-2.0", "language": "java", "size": 19460}
{"docstring": "/**\n * Get a child by its name or path.\n * @param name element name or path/to/element\n * @return the first matching element\n */\n", "func_signal": "public XML getChild(String name)", "code": "{\n  if (name.indexOf('/') != -1) {\n    return getChildRecursive(PApplet.split(name, '/'), 0);\n  }\n  int childCount = getChildCount();\n  for (int i = 0; i < childCount; i++) {\n    XML kid = getChild(i);\n    String kidName = kid.getName();\n    if (kidName != null && kidName.equals(name)) {\n      return kid;\n    }\n  }\n  return null;\n}", "path": "TextureMappingMultipleP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "/**\n * Returns an array containing all the child elements.\n */\n", "func_signal": "public XML[] getChildren()", "code": "{\n  //    NodeList children = node.getChildNodes();\n  //    int childCount = children.getLength();\n  //    XMLElement[] kids = new XMLElement[childCount];\n  //    for (int i = 0; i < childCount; i++) {\n  //      Node kid = children.item(i);\n  //      kids[i] = new XMLElement(this, kid);\n  //    }\n  //    return kids;\n  checkChildren();\n  return children;\n}", "path": "TextureMappingMultipleP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "/**\n * Get any children that match this name or path. Similar to getChild(),\n * but will grab multiple matches rather than only the first.\n * @param name element name or path/to/element\n * @return array of child elements that match\n * @author processing.org\n */\n", "func_signal": "public XML[] getChildren(String name)", "code": "{\n  if (name.indexOf('/') != -1) {\n    return getChildrenRecursive(PApplet.split(name, '/'), 0);\n  }\n  // if it's a number, do an index instead\n  // (returns a single element array, since this will be a single match\n  if (Character.isDigit(name.charAt(0))) {\n    return new XML[] { \n      getChild(Integer.parseInt(name))\n    };\n  }\n  int childCount = getChildCount();\n  XML[] matches = new XML[childCount];\n  int matchCount = 0;\n  for (int i = 0; i < childCount; i++) {\n    XML kid = getChild(i);\n    String kidName = kid.getName();\n    if (kidName != null && kidName.equals(name)) {\n      matches[matchCount++] = kid;\n    }\n  }\n  return (XML[]) PApplet.subset(matches, 0, matchCount);\n}", "path": "TextureMappingMultipleP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "/**\n * Returns the value of an attribute.\n *\n * @param name the non-null full name of the attribute.\n * @param defaultValue the default value of the attribute.\n *\n * @return the value, or defaultValue if the attribute does not exist.\n */\n", "func_signal": "public int getInt(String name, int defaultValue)", "code": "{\n  String value = getString(name);\n  return (value == null) ? defaultValue : Integer.parseInt(value);\n}", "path": "TextureMappingTemplateP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "/**\n * Put the names of all children into an array. Same as looping through \n * each child and calling getName() on each XMLElement.\n */\n", "func_signal": "public String[] listChildren()", "code": "{\n  //    NodeList children = node.getChildNodes();\n  //    int childCount = children.getLength();\n  //    String[] outgoing = new String[childCount];\n  //    for (int i = 0; i < childCount; i++) {\n  //      Node kid = children.item(i);\n  //      if (kid.getNodeType() == Node.ELEMENT_NODE) {\n  //        outgoing[i] = kid.getNodeName();\n  //      } // otherwise just leave him null\n  //    }\n  checkChildren();\n  String[] outgoing = new String[children.length];\n  for (int i = 0; i < children.length; i++) {\n    outgoing[i] = children[i].getName();\n  }\n  return outgoing;\n}", "path": "TextureMappingMultipleP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "/**\n * Get any children that match this name or path. Similar to getChild(),\n * but will grab multiple matches rather than only the first.\n * @param name element name or path/to/element\n * @return array of child elements that match\n * @author processing.org\n */\n", "func_signal": "public XML[] getChildren(String name)", "code": "{\n  if (name.indexOf('/') != -1) {\n    return getChildrenRecursive(PApplet.split(name, '/'), 0);\n  }\n  // if it's a number, do an index instead\n  // (returns a single element array, since this will be a single match\n  if (Character.isDigit(name.charAt(0))) {\n    return new XML[] { \n      getChild(Integer.parseInt(name))\n    };\n  }\n  int childCount = getChildCount();\n  XML[] matches = new XML[childCount];\n  int matchCount = 0;\n  for (int i = 0; i < childCount; i++) {\n    XML kid = getChild(i);\n    String kidName = kid.getName();\n    if (kidName != null && kidName.equals(name)) {\n      matches[matchCount++] = kid;\n    }\n  }\n  return (XML[]) PApplet.subset(matches, 0, matchCount);\n}", "path": "TextureMappingTemplateP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "/**\n * Returns an array containing all the child elements.\n */\n", "func_signal": "public XML[] getChildren()", "code": "{\n  //    NodeList children = node.getChildNodes();\n  //    int childCount = children.getLength();\n  //    XMLElement[] kids = new XMLElement[childCount];\n  //    for (int i = 0; i < childCount; i++) {\n  //      Node kid = children.item(i);\n  //      kids[i] = new XMLElement(this, kid);\n  //    }\n  //    return kids;\n  checkChildren();\n  return children;\n}", "path": "TextureMappingTemplateP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "/**\n * Returns the value of an attribute.\n *\n * @param name the non-null full name of the attribute.\n * @param defaultValue the default value of the attribute.\n *\n * @return the value, or defaultValue if the attribute does not exist.\n */\n", "func_signal": "public double getDouble(String name, double defaultValue)", "code": "{\n  String value = getString(name);\n  return (value == null) ? defaultValue : Double.parseDouble(value);\n}", "path": "TextureMappingMultipleP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "/**\n * Returns the number of children.\n * @return the count.\n */\n", "func_signal": "public int getChildCount()", "code": "{\n  checkChildren();\n  return children.length;\n}", "path": "TextureMappingTemplateP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "// TODO is there a more efficient way of doing this? wow.\n// i.e. can we use one static document object for all PNodeXML objects?\n", "func_signal": "public XML(String name)", "code": "{\n  try {\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document document = builder.newDocument();\n    node = document.createElement(name);\n\n    this.name = name;\n    this.parent = null;\n  } \n  catch (ParserConfigurationException e) {\n    e.printStackTrace();\n  }\n}", "path": "TextureMappingMultipleP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "/**\n * Returns the value of an attribute.\n *\n * @param name the non-null full name of the attribute.\n * @param defaultValue the default value of the attribute.\n *\n * @return the value, or defaultValue if the attribute does not exist.\n */\n", "func_signal": "public float getFloat(String name, float defaultValue)", "code": "{\n  String value = getString(name);\n  return (value == null) ? defaultValue : Float.parseFloat(value);\n}", "path": "TextureMappingMultipleP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "/**\n * Returns the value of an attribute.\n *\n * @param name the non-null full name of the attribute.\n * @param defaultValue the default value of the attribute.\n *\n * @return the value, or defaultValue if the attribute does not exist.\n */\n", "func_signal": "public double getDouble(String name, double defaultValue)", "code": "{\n  String value = getString(name);\n  return (value == null) ? defaultValue : Double.parseDouble(value);\n}", "path": "TextureMappingTemplateP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "/**\n * Internal helper function for getChild(String).\n * @param items result of splitting the query on slashes\n * @param offset where in the items[] array we're currently looking\n * @return matching element or null if no match\n * @author processing.org\n */\n", "func_signal": "protected XML getChildRecursive(String[] items, int offset)", "code": "{\n  // if it's a number, do an index instead\n  if (Character.isDigit(items[offset].charAt(0))) {\n    XML kid = getChild(Integer.parseInt(items[offset]));\n    if (offset == items.length-1) {\n      return kid;\n    } \n    else {\n      return kid.getChildRecursive(items, offset+1);\n    }\n  }\n  int childCount = getChildCount();\n  for (int i = 0; i < childCount; i++) {\n    XML kid = getChild(i);\n    String kidName = kid.getName();\n    if (kidName != null && kidName.equals(items[offset])) {\n      if (offset == items.length-1) {\n        return kid;\n      } \n      else {\n        return kid.getChildRecursive(items, offset+1);\n      }\n    }\n  }\n  return null;\n}", "path": "TextureMappingMultipleP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "/**\n * Quick accessor for an element at a particular index.\n * @author processing.org\n */\n", "func_signal": "public XML getChild(int index)", "code": "{\n  checkChildren();\n  return children[index];\n}", "path": "TextureMappingTemplateP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "//  public XML(String xml) {\n//    this(new StringReader(xml));\n//  }\n", "func_signal": "public XML(Reader reader)", "code": "{\n  try {\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    //      factory.setValidating(false);\n    //      factory.setAttribute(\"http://xml.org/sax/features/namespaces\", true);\n    //      factory.setAttribute(\"http://xml.org/sax/features/validation\", false);\n    //      factory.setAttribute(\"http://xml.org/sax/features/validation\", true);\n    //      factory.setAttribute(\"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\", false);\n    // enable this to temporarily get around some parsing quirks (and get a proper error msg)\n    //      factory.setFeature(\"http://apache.org/xml/features/dom/defer-node-expansion\", false);\n    // Prevent 503 errors from www.w3.org\n    factory.setAttribute(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n    //      factory.setAttribute(\"http://apache.org/xml/features/dom/create-entity-ref-nodes\", false);\n    factory.setExpandEntityReferences(false);\n    //      factory.setExpandEntityReferences(true);\n    //      factory.setCoalescing(true);\n    //      builderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    //      builder.setEntityResolver()\n\n    //      SAXParserFactory spf = SAXParserFactory.newInstance();\n    //      spf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n    //      SAXParser p = spf.newSAXParser();\n\n    //    builder = DocumentBuilderFactory.newDocumentBuilder();\n    //    builder = new SAXBuilder();\n    //    builder.setValidation(validating);\n\n    //      print(dataPath(\"1broke.html\"), System.out);\n\n    //      Document document = builder.parse(dataPath(\"1_alt.html\"));\n    Document document = builder.parse(new InputSource(reader));\n    node = document.getDocumentElement();\n    name = node.getNodeName();\n    //      NodeList nodeList = document.getDocumentElement().getChildNodes();\n    //      for (int i = 0; i < nodeList.getLength(); i++) {\n    //      }\n    //      print(createWriter(\"data/1_alt_reparse.html\"), document.getDocumentElement(), 0);\n  } \n  catch (ParserConfigurationException pce) {\n    pce.printStackTrace();\n  } \n  catch (IOException e1) {\n    e1.printStackTrace();\n  } \n  catch (SAXException e2) {\n    e2.printStackTrace();\n  }\n}", "path": "TextureMappingMultipleP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "/**\n * Honey, can you just check on the kids? Thanks.\n */\n", "func_signal": "protected void checkChildren()", "code": "{\n  if (children == null) {\n    NodeList kids = node.getChildNodes();\n    int childCount = kids.getLength();\n    children = new XML[childCount];\n    for (int i = 0; i < childCount; i++) {\n      children[i] = new XML(this, kids.item(i));\n    }\n  }\n}", "path": "TextureMappingMultipleP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "//  public PNodeXML(String name, PNode parent) {\n//    PNodeXML pxml = PNodeXML.parse(\"<\" + name + \">\");\n//    this.node = pxml.node;\n//    this.name = name;\n//    this.parent = parent;\n//  }\n", "func_signal": "protected XML(XML parent, Node node)", "code": "{\n  this.node = node;\n  this.parent = parent;\n\n  if (node.getNodeType() == Node.ELEMENT_NODE) {\n    name = node.getNodeName();\n  }\n}", "path": "TextureMappingTemplateP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "//  public XML(String xml) {\n//    this(new StringReader(xml));\n//  }\n", "func_signal": "public XML(Reader reader)", "code": "{\n  try {\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    //      factory.setValidating(false);\n    //      factory.setAttribute(\"http://xml.org/sax/features/namespaces\", true);\n    //      factory.setAttribute(\"http://xml.org/sax/features/validation\", false);\n    //      factory.setAttribute(\"http://xml.org/sax/features/validation\", true);\n    //      factory.setAttribute(\"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\", false);\n    // enable this to temporarily get around some parsing quirks (and get a proper error msg)\n    //      factory.setFeature(\"http://apache.org/xml/features/dom/defer-node-expansion\", false);\n    // Prevent 503 errors from www.w3.org\n    factory.setAttribute(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n    //      factory.setAttribute(\"http://apache.org/xml/features/dom/create-entity-ref-nodes\", false);\n    factory.setExpandEntityReferences(false);\n    //      factory.setExpandEntityReferences(true);\n    //      factory.setCoalescing(true);\n    //      builderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    //      builder.setEntityResolver()\n\n    //      SAXParserFactory spf = SAXParserFactory.newInstance();\n    //      spf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n    //      SAXParser p = spf.newSAXParser();\n\n    //    builder = DocumentBuilderFactory.newDocumentBuilder();\n    //    builder = new SAXBuilder();\n    //    builder.setValidation(validating);\n\n    //      print(dataPath(\"1broke.html\"), System.out);\n\n    //      Document document = builder.parse(dataPath(\"1_alt.html\"));\n    Document document = builder.parse(new InputSource(reader));\n    node = document.getDocumentElement();\n    name = node.getNodeName();\n    //      NodeList nodeList = document.getDocumentElement().getChildNodes();\n    //      for (int i = 0; i < nodeList.getLength(); i++) {\n    //      }\n    //      print(createWriter(\"data/1_alt_reparse.html\"), document.getDocumentElement(), 0);\n  } \n  catch (ParserConfigurationException pce) {\n    pce.printStackTrace();\n  } \n  catch (IOException e1) {\n    e1.printStackTrace();\n  } \n  catch (SAXException e2) {\n    e2.printStackTrace();\n  }\n}", "path": "TextureMappingTemplateP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "/**\n * Honey, can you just check on the kids? Thanks.\n */\n", "func_signal": "protected void checkChildren()", "code": "{\n  if (children == null) {\n    NodeList kids = node.getChildNodes();\n    int childCount = kids.getLength();\n    children = new XML[childCount];\n    for (int i = 0; i < childCount; i++) {\n      children[i] = new XML(this, kids.item(i));\n    }\n  }\n}", "path": "TextureMappingTemplateP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "//  public PNodeXML(String name, PNode parent) {\n//    PNodeXML pxml = PNodeXML.parse(\"<\" + name + \">\");\n//    this.node = pxml.node;\n//    this.name = name;\n//    this.parent = parent;\n//  }\n", "func_signal": "protected XML(XML parent, Node node)", "code": "{\n  this.node = node;\n  this.parent = parent;\n\n  if (node.getNodeType() == Node.ELEMENT_NODE) {\n    name = node.getNodeName();\n  }\n}", "path": "TextureMappingMultipleP1_5\\XML.java", "repo_name": "pixelpusher/P5ProjectionMapping", "stars": 20, "license": "None", "language": "java", "size": 5175}
{"docstring": "/**\n * calculates the total size of this list.\n * This method takes O(# factors) time.\n */\n", "func_signal": "public int size()", "code": "{\n    int product = 1;\n    for(List<?> l : factors) {\n        product *= l.size();\n    }\n    return product;\n}", "path": "src\\de\\fencing_game\\paul\\examples\\ProductList.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * available() should return the number of bytes that can be read without\n * running into blocking wait. Accomplishing this feast would eventually\n * require to pre-inflate a huge chunk of data, so we rather opt for a\n * more relaxed contract (java.util.zip.InflaterInputStream does not \n * fit the bill). \n * This code has been tested to work with BufferedReader.readLine();\n */\n", "func_signal": "public int available() throws IOException", "code": "{\n    if (!inf.finished() && !inf.needsInput()) {\n        return 1;\n    } else {\n        return in.available();\n    }\n}", "path": "src\\de\\fencing_game\\tools\\DecompressingInputStream.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * Strokes the given Shape with this stroke, creating an outline.\n *\n * This outline is distorted by our AffineTransform relative to the\n * outline which would be given by the base stroke, but only in terms\n * of scaling (i.e. thickness of the lines), as translation and rotation\n * are undone after the stroking.\n */\n", "func_signal": "public Shape createStrokedShape(Shape s)", "code": "{\n    Shape sTrans = transform.createTransformedShape(s);\n    Shape sTransStroked = stroke.createStrokedShape(sTrans);\n    Shape sStroked = inverse.createTransformedShape(sTransStroked);\n    return sStroked;\n}", "path": "src\\de\\fencing_game\\gui\\basics\\TransformedStroke.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * an optimized lastIndexOf() implementation, runs in\n * O(sum n_i) time instead of O(prod n_i) time\n * (if the individual indexOf() calls take O(n_i) time).\n * Runs in O(1) space.\n */\n", "func_signal": "public int lastIndexOf(Object o)", "code": "{\n    if(!(o instanceof List))\n        return -1;\n    List<?> list = (List<?>)o;\n    if (list.size() != factors.size())\n        return -1;\n    int index = 0;\n    for(int i = 0; i < factors.size(); i++) {\n        List<?> subList = factors.get(i);\n        Object candidate = list.get(i);\n        int subIndex = subList.lastIndexOf(candidate);\n        if(subIndex < 0)\n            return -1;\n        index = index * subList.size() + subIndex;\n    }\n    return index;\n}", "path": "src\\de\\fencing_game\\paul\\examples\\ProductList.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * a test method which creates a list of lists and\n * shows the cartesian product of this.\n */\n", "func_signal": "public static void main(String[] params)", "code": "{\n    List<List<?>> factors =\n        Arrays.<List<?>>asList(Arrays.asList(1,2),\n                               Arrays.asList(10,20,30, 20),\n                               Arrays.asList(100));\n    System.out.println(\"factors: \" + factors);\n    List<List<Object>> product =\n        new ProductList<Object>(factors);\n    System.out.println(\"product: \" + product);\n    List<?> example = Arrays.asList(2,20,100);\n    System.out.println(\"indexOf(\" + example +\") = \" +\n                       product.indexOf(example));\n    System.out.println(\"lastIndexOf(\" + example +\") = \" +\n                       product.lastIndexOf(example));\n}", "path": "src\\de\\fencing_game\\paul\\examples\\ProductList.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * Returns a list view of the entries of this map.\n *\n * This list view is ordered by the indexes.\n *\n * It supports removal by entry, iterator or sublist.clear in O(n) time.\n * (n being the length of the total list, not the sublist).\n *\n * It supports adding new entries at the end, if the key\n * is not already used in this map, in amortized O(1) time.\n *\n * Containment check runs in O(1).\n */\n", "func_signal": "public List<Map.Entry<K,V>> entryList()", "code": "{\n    return new AbstractList<Map.Entry<K,V>>() {\n        public void clear() {\n            baseMap.clear();\n            entries.clear();\n        }\n        public Map.Entry<K,V> get(int index) {\n            return entries.get(index);\n        }\n        public int size() {\n            return entries.size();\n        }\n        public Map.Entry<K,V> remove(int index) {\n            Map.Entry<K,V> e = entries.remove(index);\n            baseMap.remove(e.getKey());\n            return e;\n        }\n        public void add(int index, Map.Entry<K,V> newEntry) {\n            K key = newEntry.getKey();\n            SimpleEntry<K,V> clone = new SimpleEntry<K,V>(newEntry);\n            if(baseMap.containsKey(key)) {\n                throw new IllegalArgumentException(\"duplicate key \" +\n                                                   key);\n            }\n            entries.add(index, clone);\n            baseMap.put(key, clone);\n        }\n\n        public boolean contains(Object o) {\n            if(o instanceof Map.Entry) {\n                SimpleEntry<K,V> inMap =\n                    baseMap.get(((Map.Entry<?,?>)o).getKey());\n                return inMap != null &&\n                    inMap.equals(o);\n            }\n            return false;\n        }\n\n        public boolean remove(Object o) {\n            if (!(o instanceof Map.Entry)) {\n                Map.Entry<?,?> e = (Map.Entry<?,?>)o;\n                SimpleEntry<K,V> inMap = baseMap.get(e.getKey());\n                if(inMap != null && inMap.equals(e)) {\n                    entries.remove(inMap);\n                    baseMap.remove(inMap.getKey());\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        protected void removeRange(int fromIndex, int toIndex) {\n            List<SimpleEntry<K,V>> subList =\n                entries.subList(fromIndex, toIndex);\n            for(SimpleEntry<K,V> entry : subList){\n                baseMap.remove(entry.getKey());\n            }\n            subList.clear();\n        }\n\n    };\n}", "path": "src\\de\\fencing_game\\paul\\examples\\ArrayHashMap.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * Returns a set view of the entries of this map.\n *\n * This set view is ordered by the indexes.\n *\n * It supports removal by entry or iterator in O(n) time.\n *\n * It supports adding new entries at the end, if the key\n * is not already used in this map, in amortized O(1) time.\n *\n * Containment check runs in O(1).\n */\n", "func_signal": "public Set<Map.Entry<K,V>> entrySet()", "code": "{\n    return new AbstractSet<Map.Entry<K,V>>() {\n\n        public void clear() {\n            entryList().clear();\n        }\n\n        public int size() {\n            return entries.size();\n        }\n        public Iterator<Map.Entry<K,V>> iterator() {\n            return entryList().iterator();\n        }\n        public boolean add(Map.Entry<K,V> e) {\n            return entryList().add(e);\n        }\n\n        public boolean contains(Object o) {\n            return entryList().contains(o);\n        }\n\n        public boolean remove(Object o) {\n            return entryList().remove(o);\n        }\n\n\n    };\n}", "path": "src\\de\\fencing_game\\paul\\examples\\ArrayHashMap.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * Wir schlie\u00dfen auch den (selbst erstellten) Deflater, wenn\n * wir fertig sind.\n */\n", "func_signal": "public void close()\n    throws IOException", "code": "{\n    super.close();\n    def.end();\n}", "path": "src\\de\\fencing_game\\tools\\CompressingOutputStream.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * an optimized indexOf() implementation, runs in\n * O(sum n_i) instead of O(prod n_i)\n * (if the individual indexOf() calls take O(n_i) time).\n *\n * Runs in O(1) space.\n */\n", "func_signal": "public int indexOf(Object o)", "code": "{\n    if(!(o instanceof List))\n        return -1;\n    List<?> list = (List<?>)o;\n    if (list.size() != factors.size())\n        return -1;\n    int index = 0;\n    for(int i = 0; i < factors.size(); i++) {\n        List<?> subList = factors.get(i);\n        Object candidate = list.get(i);\n        int subIndex = subList.indexOf(candidate);\n        if(subIndex < 0)\n            return -1;\n        index = index * subList.size() + subIndex;\n    }\n    return index;\n}", "path": "src\\de\\fencing_game\\paul\\examples\\ProductList.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * retrieves the value for a key.\n *\n *   This method runs in O(1) time.\n *\n * @return null if there is no such mapping,\n *   else the value for the key.\n */\n", "func_signal": "public V get(Object key)", "code": "{\n    SimpleEntry<K,V> entry = baseMap.get(key);\n    return entry == null ? null : entry.getValue();\n}", "path": "src\\de\\fencing_game\\paul\\examples\\ArrayHashMap.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * Creates a TransformedStroke based on another Stroke\n * and an AffineTransform.\n */\n", "func_signal": "public TransformedStroke(Stroke base, AffineTransform at)\n    throws NoninvertibleTransformException", "code": "{\n    this.transform = new AffineTransform(at);\n    this.inverse = transform.createInverse();\n    this.stroke = base;\n}", "path": "src\\de\\fencing_game\\gui\\basics\\TransformedStroke.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * returns an element of the product list by index.\n *\n * This method calls the get method of each list,\n * so needs needs O(#factors) time if the individual\n * list's get methods are in O(1).\n * The space complexity is O(#factors), since we have to store\n * the result somewhere.\n *\n * @return the element at the given index.\n * The resulting list is of fixed-length and after return independent\n * of this product list. (You may freely modify it like an array.)\n */\n", "func_signal": "public List<X> get(int index)", "code": "{\n    if(index < 0)\n        throw new IndexOutOfBoundsException(\"index \" + index+ \" < 0\");\n\n    List<X> result = Utils.createFixedList(factors.size());\n\n    // we iteratively lookup the components, using\n    // modulo and division to calculate the right\n    // indexes.\n    for(int i = factors.size() - 1; i >= 0; i--) {\n        List<? extends X> subList = factors.get(i);\n        int subIndex = index % subList.size();\n        result.set(i, subList.get(subIndex));\n        index = index / subList.size();\n    }\n    if(index > 0)\n        throw new IndexOutOfBoundsException(\"too large index\");\n\n    return result;\n}", "path": "src\\de\\fencing_game\\paul\\examples\\ProductList.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * Returns a List view of the values in this map.\n *\n * It allows get and set by index in O(1) time (set changes the mapping).\n *\n * Removal by value, index, iterator or sublist.clear is possible\n * in O(n) time, this removes the corresponding keys too (only the first\n * key with this value for remove(value)).\n *\n * Containment check needs an iteration, thus O(n) time.\n */\n", "func_signal": "public List<V> values()", "code": "{\n    return new AbstractList<V>() {\n        public int size() {\n            return entries.size();\n        }\n        public void clear() {\n            entryList().clear();\n        }\n        public V get(int index) {\n            return entries.get(index).getValue();\n        }\n        public V set(int index, V newValue) {\n            Map.Entry<K,V> e = entries.get(index);\n            return e.setValue(newValue);\n        }\n\n        public V remove(int index) {\n            Map.Entry<K,V> e = entries.remove(index);\n            baseMap.remove(e.getKey());\n            return e.getValue();\n        }\n        protected void removeRange(int fromIndex, int toIndex) {\n            entryList().subList(fromIndex, toIndex).clear();\n        }\n    };\n}", "path": "src\\de\\fencing_game\\paul\\examples\\ArrayHashMap.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * Wir schlie\u00dfen auch den (selbst erstellten) Inflater, wenn\n * wir fertig sind.\n */\n", "func_signal": "public void close()\n    throws IOException", "code": "{\n    super.close();\n    inf.end();\n}", "path": "src\\de\\fencing_game\\tools\\DecompressingInputStream.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * Returns a List view of the keys in this map.\n *\n * It allows index read access and key containment check in O(1).\n * Changing a key is not allowed.\n *\n * Removal by key, index, iterator or sublist.clear runs in O(n) time\n * (this removes the corresponding values, too).\n */\n", "func_signal": "public List<K> keyList()", "code": "{\n    return new AbstractList<K>() {\n        public void clear() {\n            entryList().clear();\n        }\n        public K get(int index) {\n            return entries.get(index).getKey();\n        }\n        public int size() {\n            return entries.size();\n        }\n        public K remove(int index) {\n            Map.Entry<K,V> e = entries.remove(index);\n            baseMap.remove(e.getKey());\n            return e.getKey();\n        }\n\n        public boolean remove(Object key) {\n            SimpleEntry<K,V> entry = baseMap.remove(key);\n            if(entry == null) {\n                return false;\n            }\n            entries.remove(entry);\n            return true;\n        }\n\n        public boolean contains(Object key) {\n            return baseMap.containsKey(key);\n        }\n\n        protected void removeRange(int fromIndex, int toIndex) {\n            entryList().subList(fromIndex, toIndex).clear();\n        }\n    };\n}", "path": "src\\de\\fencing_game\\paul\\examples\\ArrayHashMap.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * creates a new ArrayHashMap with default parameters.\n * (TODO: add more constructors which allow tuning.)\n */\n", "func_signal": "public ArrayHashMap()", "code": "{\n    this.baseMap = new HashMap<K,SimpleEntry<K,V>>();\n    this.entries = new ArrayList<SimpleEntry<K,V>>();\n}", "path": "src\\de\\fencing_game\\paul\\examples\\ArrayHashMap.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * Insure all remaining data will be output.\n */\n", "func_signal": "public void flush() throws IOException", "code": "{\n    /**\n     * Now this is tricky: We force the Deflater to flush\n     * its data by switching compression level.\n     * As yet, a perplexingly simple workaround for \n     *  http://developer.java.sun.com/developer/bugParade/bugs/4255743.html \n    */\n    def.setInput(EMPTYBYTEARRAY, 0, 0);\n\n    def.setLevel(Deflater.NO_COMPRESSION);\n    deflate();\n\n    def.setLevel(Deflater.DEFAULT_COMPRESSION);\n    deflate();\n\n    out.flush();\n}", "path": "src\\de\\fencing_game\\tools\\CompressingOutputStream.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * puts a new key-value mapping, or changes an existing one.\n *\n * If new, the mapping gets an index at the end (i.e. {@link #size()}\n * before it gets increased).\n *\n * This method runs in O(1) time for changing an existing value,\n *  amortized O(1) time for adding a new value.\n *\n * @return the old value, if such, else null.\n */\n", "func_signal": "public V put(K key, V value)", "code": "{\n    SimpleEntry<K,V> entry = baseMap.get(key);\n    if(entry == null) {\n        entry = new SimpleEntry<K,V>(key, value);\n        baseMap.put(key, entry);\n        entries.add(entry);\n        return null;\n    }\n    return entry.setValue(value);\n}", "path": "src\\de\\fencing_game\\paul\\examples\\ArrayHashMap.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * an usage example method.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    IndexedMap<String,String> imap = new ArrayHashMap<String, String>();\n    \n    for(int i = 0; i < args.length-1; i+=2) {\n        imap.put(args[i], args[i+1]);\n    }\n    System.out.println(imap.values());\n    System.out.println(imap.keyList());\n    System.out.println(imap.entryList());\n    System.out.println(imap);\n    System.out.println(imap.getKey(0));\n    System.out.println(imap.getValue(0));\n\n}", "path": "src\\de\\fencing_game\\paul\\examples\\ArrayHashMap.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * removes a key from the map.\n *\n *   This method runs in O(n) time, n being the size of this map.\n *\n * @return the old value, if any.\n */\n", "func_signal": "public V remove(Object key)", "code": "{\n    SimpleEntry<K,V> entry = baseMap.remove(key);\n    if(entry == null) {\n        return null;\n    }\n    entries.remove(entry);\n    return entry.getValue();\n}", "path": "src\\de\\fencing_game\\paul\\examples\\ArrayHashMap.java", "repo_name": "ePaul/stackoverflow-examples", "stars": 20, "license": "None", "language": "java", "size": 234}
{"docstring": "/**\n * Returns the value of the given registry entry, which had better be an integer.\n *\n * @param entryName  the registry entry we want the value for\n * @return the value of the entry\n * @throws RegistryException for missing keys or type mismatches\n */\n", "func_signal": "public int getInt(String entryName)\n\tthrows RegistryException", "code": "{\n\t// retrieve the entry\n\tRegistryEntry entry = validateAccess(entryName, RegistryEntry.Type.INT);\n\n\t// return the value\n\treturn (Integer) entry.getValue();\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\registry\\Registry.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/**\n * Performs post-construction updating of the trusted weights in a graph derived from\n * the Truthy feed.\n * \n * There are three possible situations that can boost the trust in an edge:\n * \n *   An partly trusted edge becomes completely trusted.\n *   An actor->actor edge becomes completely trusted if it is bidirectional.\n *   A meme->actor edge becomes trusted if the actor has any trusted actor->actor edges.\n */\n", "func_signal": "public void updateTrust(Graph g)", "code": "{\n\tfor (Edge e : g.edges())\n\t\t\n\t\tif (e.trust() < e.weight()) {\n\t\t\t\n\t\t\t// get the endpoints of the edge \n\t\t\tGephiNode src     = (GephiNode) e.src();\n\t\t\tGephiNode dst     = (GephiNode) e.dst();\n\t\t\tboolean   upgrade = false;\n\t\t\t\n\t\t\t// a partly trusted edge becomes trusted\n\t\t\tif (e.trust() > 0.0)\n\t\t\t\tupgrade = true;\n\t\t\t\n\t\t\t// an actor->actor edge becomes trusted if it is bidirectional\n\t\t\tif ((src.type() == Node.TYPE_ACTOR) && (dst.type() == Node.TYPE_ACTOR) && g.hasEdge(new GephiEdge(dst, src)))\n\t\t\t\tupgrade = true;\n\t\t\t\n\t\t\t// a meme->actor edge becomes trusted if the actor has trusted edges to other actors\n\t\t\tif ((src.type() == Node.TYPE_MEME) && (dst.type() == Node.TYPE_ACTOR))\n\t\t\t\tfor (Edge e2 : g.edgesOut(dst))\n\t\t\t\t\tif ((e2.trust() > 0.0) && (e2.dst().type() == Node.TYPE_ACTOR)) {\n\t\t\t\t\t\tupgrade = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\n\t\t\t// upgrade the edge if we should\n\t\t\tif (upgrade)\n\t\t\t\tg.add(new GephiEdge(src, dst, e.startTime(), e.endTime(), 0.0, e.weight() - e.trust()));\n\t\t}\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\feed\\Truthy.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/** Returns an iterator over all memes connected to the given meme. */\n", "func_signal": "public Iterator<Integer> memeLinks (int memeId)", "code": "{\n\ttry {\n\t\t\n\t\tPreparedStatement q = query.get(Query.MEME_LINKS);\n\t\tq.setInt(1, memeId);\n\t\tq.setInt(2, memeId);\n\t\t\n\t\treturn new SqlIntegerIterator(q.executeQuery());\n\t\t\n\t} catch (SQLException e) {\n\t\tthrow new IllegalArgumentException(e);\n\t}\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\feed\\Truthy.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/**\n * Returns the value of the given registry entry, which had better be a filename.\n *\n * @param entryName  the registry entry we want the value for\n * @return the value of the entry\n * @throws RegistryException for missing keys or type mismatches\n */\n", "func_signal": "public String getFilename(String entryName)\n\tthrows RegistryException", "code": "{\n\t// retrieve the entry\n\tRegistryEntry entry = validateAccess(entryName, RegistryEntry.Type.FILENAME);\n\n\t// return the value\n\treturn fixFilename((String) entry.getValue());\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\registry\\Registry.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/**\n * Called to close the database connection during object finalization. \n */\n", "func_signal": "protected void finalize()\nthrows Throwable", "code": "{\n\ttry {\n\t\tif (cxn != null)\n\t\t\tcxn.close();\n\t} catch (SQLException e) {}\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\feed\\Truthy.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/**\n * Takes the given pathname and returns a new pathname with every '/'\n * replaced with the local file separator.\n *\n * @param filename  the input path\n * @return the translated output path\n */\n", "func_signal": "private String fixFilename(String filename)", "code": "{\n\tStringBuffer buffer = new StringBuffer(filename.length());\n\n\t// copy the buffer over, substituting for '/'\n \tfor (int index = 0; index < filename.length(); ++index)\n \t\tif (filename.charAt(index) == '/')\n \t\t\tbuffer.append(File.separator);\n \t\telse\n \t\t\tbuffer.append(filename.charAt(index));\n\n \t// and return the new path\n \treturn buffer.toString();\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\registry\\Registry.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/**\n * Returns the value of the given registry entry, which had better be a string.\n *\n * @param entryName  the registry entry we want the value for\n * @return the value of the entry\n * @throws RegistryException for missing keys or type mismatches\n */\n", "func_signal": "public String getString(String entryName)\n\tthrows RegistryException", "code": "{\n\t// retrieve the entry\n\tRegistryEntry entry = validateAccess(entryName, RegistryEntry.Type.STRING);\n\n\t// return the value\n\treturn ((String) entry.getValue());\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\registry\\Registry.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/** Returns an iterator over all events for the given actor. */\n", "func_signal": "public Iterator<Event> actorEvents(int actorId)", "code": "{\n\ttry {\n\t\t\n\t\tPreparedStatement q = query.get(Query.EVENTS_BY_ACTOR);\n\t\tq.setInt(1, actorId);\n\t\tq.setInt(2, actorId);\n\t\tq.setInt(3, actorId);\n\t\t\n\t\treturn new SqlEventIterator(q.executeQuery());\n\t\t\n\t} catch (SQLException e) {\n\t\tthrow new IllegalArgumentException(e);\n\t}\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\feed\\Truthy.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/** Maps from a meme's label to its ID. */\n", "func_signal": "public int memeId(String meme)\nthrows IllegalArgumentException", "code": "{\n\ttry {\n\t\t\n\t\tPreparedStatement q = query.get(Query.MEME_ID);\n\t\tq.setString(1, meme);\n\t\t\n\t\tResultSet result = q.executeQuery();\n\t\tif (result.next())\n\t\t\treturn result.getInt(1);\n\t\telse\n\t\t\tthrow new IllegalArgumentException(\"unknown meme\");\n\t\n\t} catch (SQLException e) {\n\t\tthrow new IllegalArgumentException(e);\n\t}\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\feed\\Truthy.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/** Maps from an actor's label to its ID. */\n", "func_signal": "public int actorId(String actor)\nthrows IllegalArgumentException", "code": "{\n\ttry {\n\t\n\t\tPreparedStatement q = query.get(Query.ACTOR_ID);\n\t\tq.setString(1, actor);\n\t\n\t\tResultSet result = q.executeQuery();\n\t\tif (result.next())\n\t\t\treturn result.getInt(1);\n\t\telse\n\t\t\tthrow new IllegalArgumentException(\"unknown actor\");\n\n\t} catch (SQLException e) {\n\t\tthrow new IllegalArgumentException(e);\n\t}\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\feed\\Truthy.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/**\n * Takes care of actually submitting a query to the database and returning the results.\n */\n", "func_signal": "public ResultSet query(String queryText)\nthrows IllegalArgumentException", "code": "{\n\tStatement statement;\n\t\n\ttry {\n\t\tstatement = cxn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n\t\treturn statement.executeQuery(queryText);\n\t} catch (SQLException e) {\n\t\tSystem.err.println(\"SQL error\");\n\t\te.printStackTrace();\n\t\tthrow new IllegalArgumentException(e);\n\t}\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\feed\\Truthy.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/** Returns an iterator over all events for the given actor in the given time interval. */\n", "func_signal": "public Iterator<Event> actorEvents(int actorId, int startTime, int endTime)", "code": "{\n\ttry {\n\t\t\n\t\tPreparedStatement q = query.get(Query.EVENTS_BY_ACTOR_DATE);\n\t\tq.setInt (1, actorId);\n\t\tq.setInt (2, actorId);\n\t\tq.setInt (3, actorId);\n\t\tq.setDate(4, new java.sql.Date(startTime * 1000L));\n\t\tq.setDate(5, new java.sql.Date(endTime   * 1000L));\n\t\t\n\t\treturn new SqlEventIterator(q.executeQuery());\n\t\t\n\t} catch (SQLException e) {\n\t\tthrow new IllegalArgumentException(e);\n\t}\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\feed\\Truthy.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/**\n * Initializes the registry system using the given path.\n * \n * @param filename  the path to the \"registry.xml\" file\n */\n", "func_signal": "public Registry(String filename)", "code": "{\n\t// allocate the hash table\n\tregistry = new HashMap<String,Object>();\n\n\ttry {\n\n\t\t// parse the registry file\n\t\tDocument document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(\"file:\" + filename);\n\n\t\t// get the list of top-level groups\n\t\tElement  root   = document.getDocumentElement();\n\t\tNodeList groups = root.getChildNodes();\n\n\t\t// process each of those groups\n\t\tfor (int i = 0; i < groups.getLength(); ++i) {\n\t\t\tNode child = groups.item(i);\n\t\t\tif (child.getNodeName().equals(\"group\"))\n\t\t\t\taddGroup(\"\", child);\n\t\t}\n\n\t} catch (ParserConfigurationException e) { System.err.println(\"Error reading registry: \" + e.getMessage());\n\t} catch (IOException                  e) { System.err.println(\"Error reading registry: \" + e.getMessage());\n\t} catch (SAXException                 e) { System.err.println(\"Error reading registry: \" + e.getMessage());\n\t} catch (RegistryException            e) { System.err.println(\"Error reading registry: \" + e.getMessage()); }\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\registry\\Registry.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/**\n * Creates a new object for connecting to the Truthy database.  The single parameter should be a dictionary\n * containing overrides for the default parameters, which are stored in the registry:\n * \n *   host     (String)\n *   port     (Number)\n *   database (String)\n *   username (String)\n *   password (String)\n *   \n * Note that this does not try to establish the connection -- that must be done with {@link #connect}.\n */\n", "func_signal": "public Truthy(Value ... ls)\nthrows EvaluationException", "code": "{\n\tString host, database;\n\tint    port;\n\t\n\ttry {\n\t\thost     = Main.registry.getString(\"truthy.host\");\n\t\tport     = Main.registry.getInt   (\"truthy.port\");\n\t\tdatabase = Main.registry.getString(\"truthy.database\");\n\t\tusername = Main.registry.getString(\"truthy.username\");\n\t\tpassword = Main.registry.getString(\"truthy.password\");\n\t} catch (RegistryException e) {\n\t\tthrow new EvaluationException(e.getMessage());\n\t}\n\t\n\tif (ls.length > 0) {\n\t\tVDictionary dict = (VDictionary) ls[0].requireType(VDictionary.class);\n\t\tif (((VBoolean) dict.method_has(new VString(\"host\")))    .val)  host     =       ((VString) dict.method_get(new VString(\"host\")))    .val;\n\t\tif (((VBoolean) dict.method_has(new VString(\"port\")))    .val)  port     = (int) ((VNumber) dict.method_get(new VString(\"port\")))    .val;\n\t\tif (((VBoolean) dict.method_has(new VString(\"database\"))).val)  database =       ((VString) dict.method_get(new VString(\"database\"))).val;\n\t\tif (((VBoolean) dict.method_has(new VString(\"username\"))).val)  username =       ((VString) dict.method_get(new VString(\"username\"))).val;\n\t\tif (((VBoolean) dict.method_has(new VString(\"password\"))).val)  password =       ((VString) dict.method_get(new VString(\"password\"))).val;\n\t}\n\t\n\tdb  = \"jdbc:mysql://\" + host + \":\" + port + \"/\" + database;\n\tcxn = null;\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\feed\\Truthy.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/** Returns an iterator over all events for the given meme. */\n", "func_signal": "public Iterator<Event> memeEvents(int memeId)", "code": "{\n\ttry {\n\t\t\n\t\tPreparedStatement q = query.get(Query.EVENTS_BY_MEME);\n\t\tq.setInt(1, memeId);\n\t\t\n\t\treturn new SqlEventIterator(q.executeQuery());\n\t\t\n\t} catch (SQLException e) {\n\t\tthrow new IllegalArgumentException(e);\n\t}\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\feed\\Truthy.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/** Maps from an actor's ID to its label. */\n", "func_signal": "public String actorLabel(int actorId)\nthrows IllegalArgumentException", "code": "{\ntry {\n\t\t\n\t\tPreparedStatement q = query.get(Query.ACTOR_LABEL);\n\t\tq.setInt(1, actorId);\n\t\t\n\t\tResultSet result = q.executeQuery();\n\t\tif (result.next())\n\t\t\treturn result.getString(1);\n\t\telse\n\t\t\tthrow new IllegalArgumentException(\"unknown actor\");\n\t\n\t} catch (SQLException e) {\n\t\tthrow new IllegalArgumentException(e);\n\t}\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\feed\\Truthy.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/**\n * Adds the registry subgroups and attributes in the given group to the registry map.\n *\n * @param prefix  the current built-up prefix for this group\n * @param group   the Node containing the group\n */\n", "func_signal": "private void addGroup(String prefix, Node group)\nthrows RegistryException", "code": "{\n\t// extend the prefix with this group's name\n\tprefix += group.getAttributes().getNamedItem(\"name\").getNodeValue().trim() + \".\"; \n\n\t// for each child element\n\tNodeList children = group.getChildNodes();\n\tfor (int i = 0; i < children.getLength(); ++i) {\n\n\t\t// get a hold of the element\n\t\tNode child = children.item(i);\t\n\n  \t// recur on groups\n\t\tif (child.getNodeName().equals(\"group\"))\n\t\t\taddGroup(prefix, child);\n\n  \t// and create a new object for entries\n\t\telse if (child.getNodeName().equals(\"entry\")) {\n\t\t\tRegistryEntry entry = new RegistryEntry(prefix, child);\n\t\t\tregistry.put(prefix + entry.getName(), entry);\n  \t}\n\t}\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\registry\\Registry.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/**\n * Validates the registry access operation for the given entry name and type.\n *\n * @param entry   the entry we're validating\n * @param type    the type we must match\n * @return the registry entry\n * @throws RegistryException if the entry does not validate\n */\n", "func_signal": "private RegistryEntry validateAccess(String entryName, RegistryEntry.Type type)\nthrows RegistryException", "code": "{\n\t// retrieve the entry\n\tRegistryEntry entry = (RegistryEntry) registry.get(entryName);\n\n\t// make sure we know about this key\n\tif (entry == null)\n\t\tthrow new RegistryException(\"Missing registry entry '\" + entry + \"'\");\n\n\t// make sure the type matches\n \tif (entry.getType() != type)\n \t\tthrow new RegistryException(\"Registry entry '\" + entryName + \"' has the wrong type\");\n\n  // return the entry\n  return entry;\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\registry\\Registry.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/** Maps from a meme's ID to its label. */\n", "func_signal": "public String memeLabel(int memeId)\nthrows IllegalArgumentException", "code": "{\n\ttry {\n\t\t\n\t\tPreparedStatement q = query.get(Query.MEME_LABEL);\n\t\tq.setInt(1, memeId);\n\t\t\n\t\tResultSet result = q.executeQuery();\n\t\tif (result.next())\n\t\t\treturn result.getString(1);\n\t\telse\n\t\t\tthrow new IllegalArgumentException(\"unknown meme\");\n\t} catch (SQLException e) {\n\t\tthrow new IllegalArgumentException(e);\n\t}\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\feed\\Truthy.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/**\n * Returns the value of the given registry entry, which had better be a boolean.\n *\n * @param entryName  the registry entry we want the value for\n * @return the value of the entry\n * @throws RegistryException for missing keys or type mismatches\n */\n", "func_signal": "public boolean getBoolean(String entryName)\nthrows RegistryException", "code": "{\n\t// retrieve the entry\n \tRegistryEntry entry = validateAccess(entryName, RegistryEntry.Type.BOOLEAN);\n\n \t// return the value\n \treturn (Boolean) entry.getValue();\n}", "path": "src\\edu\\iu\\cnets\\klatsch\\registry\\Registry.java", "repo_name": "osome-iu/klatsch", "stars": 23, "license": "None", "language": "java", "size": 14839}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see android.app.Activity#onCreate(android.os.Bundle)\n */\n", "func_signal": "@Override\nprotected void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.add_field);\n\tsetTitle(\"Add field\");\n\tloadFieldTypes();\n\n\tBundle extras = getIntent().getExtras();\n\tif (extras != null) {\n\t\texistingFields = extras.keySet().toArray(new String[extras.keySet().size()]);\n\t}\n\n\tif (savedInstanceState != null) {\n\t\tEditText etxName = (EditText) findViewById(R.id.etx_fieldname);\n\t\tEditText etxPrompt = (EditText) findViewById(R.id.etx_fieldprompt);\n\t\tSpinner spinnerFieldTypes = (Spinner) findViewById(R.id.cbx_fieldtype);\n\n\t\tetxName.setText(savedInstanceState.getString(ResultConstants.RESULT_KEY_FIELDNAME));\n\t\tetxPrompt.setText(savedInstanceState.getString(ResultConstants.RESULT_KEY_DESCRIPTION));\n\t\tint position = savedInstanceState.getInt(ResultConstants.RESULT_KEY_FIELDTYPE_ID);\n\t\tif (position >= 0) {\n\t\t\tspinnerFieldTypes.setSelection(position);\n\t\t}\n\t}\n\n}", "path": "rapidandroid\\org.rapidandroid\\src\\org\\rapidandroid\\activity\\AddField.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see junit.framework.TestCase#setUp()\n */\n", "func_signal": "@Override\nprotected void setUp() throws Exception", "code": "{\n\t// TODO Auto-generated method stub\n\tsuper.setUp();\n\n\tregexes = new Vector<String>();\n\tregexes.add(\"^(t|f|true|false|y|no|yes|n|n0)(\\\\s|$)\"); // bool\n\tregexes.add(\"^(\\\\d+)(\\\\s*(cm|mm|m|meter|meters))($|\\\\s)\"); // height\n\tregexes.add(\"^(\\\\d+\\\\:\\\\d+)|(\\\\d+\\\\/\\\\d+)|(\\\\d+\\\\s*%)|(\\\\d+\\\\s*pct)\");// ratio\n\tregexes.add(\"^(\\\\d+)(\\\\s*(cm|m))($|\\\\s)\"); // length\n\tregexes.add(\"^(\\\\d+)(\\\\s*(kg|kilo|kilos))($|\\\\s)\"); // weight\n\tregexes.add(\"^(\\\\d+)($|\\\\s)\"); // number\n\tregexes.add(\"^([A-Za-z]+)($|\\\\s)\");// word\n\t// System.out.println(\"Setting up regexes \" + regexes.size());\n}", "path": "rapidjava\\org.rapidsms.java\\unittests\\org\\rapidsms\\java\\test\\JavaParsingTests.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "// private Context mContext = null;\n", "func_signal": "public synchronized static void initFormCache()", "code": "{\n\tforms = ModelTranslator.getAllForms();\n\tprefixes = new String[forms.length];\n\tfor (int i = 0; i < forms.length; i++) {\n\t\tprefixes[i] = forms[i].getPrefix();\n\t}\n}", "path": "rapidandroid\\org.rapidandroid\\src\\org\\rapidandroid\\receiver\\SmsParseReceiver.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "/**\n * @param context\n */\n", "func_signal": "public SingleRowHeaderView(Context context, Form f, int screenWidth)", "code": "{\n\tsuper(context);\n\tint itemCounter = 0;\n\n\t// mMessageIDCol = new TextView(context);\n\t// mMessageIDCol.setText(\"ID |\");\n\t// mMessageIDCol.setGravity(1);\n\t// mRow.addView(mMessageIDCol, itemCounter++);\n\t//\t\t\n\t// mMonitorCol = new TextView(context);\n\t// mMonitorCol.setText(\" Mon | \");\n\t// mMonitorCol.setGravity(1);\n\t// mRow.addView(mMonitorCol, itemCounter++);\n\n\tmDataCols = new Vector<TextView>();\n\tmColCount = f.getFields().length;\n\tint width = screenWidth / mColCount;\n\tField[] fields = f.getFields();\n\tString suffix = \" | \";\n\tfor (int i = 0; i < mColCount; i++) {\n\t\tTextView coldata = new TextView(getContext());\n\t\tcoldata.setText(fields[i].getName());\n\t\tcoldata.setTextSize(14);\n\t\t// coldata.setTextAppearance(context, android.R.style)\n\t\tcoldata.setGravity(Gravity.LEFT);\n\t\tcoldata.setEllipsize(TruncateAt.END); // makeit ellipsize instead of\n\t\t\t\t\t\t\t\t\t\t\t\t// spillage!!!\n\t\tcoldata.setWidth(width);\n\n\t\tmDataCols.add(coldata);\n\t\taddView(coldata);\n\t}\n\tthis.setPadding(2, 2, 8, 2);\n\t// this.setBackgroundResource(android.R.drawable.);\n}", "path": "rapidandroid\\org.rapidandroid\\src\\org\\rapidandroid\\view\\SingleRowHeaderView.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see junit.framework.TestCase#tearDown()\n */\n", "func_signal": "@Override\nprotected void tearDown() throws Exception", "code": "{\n\t// TODO Auto-generated method stub\n\tsuper.tearDown();\n\tregexes.clear();\n}", "path": "rapidjava\\org.rapidsms.java\\unittests\\org\\rapidsms\\java\\test\\JavaParsingTests.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "//sms/inbox\");\n", "func_signal": "private void insertMessageToContentProvider(Context context, SmsMessage mesg)", "code": "{\n\n\t\tUri writeMessageUri = RapidSmsDBConstants.Message.CONTENT_URI;\n\n\t\tContentValues messageValues = new ContentValues();\n\t\tmessageValues.put(RapidSmsDBConstants.Message.MESSAGE, mesg.getMessageBody());\n\n\t\tTimestamp ts = new Timestamp(mesg.getTimestampMillis());\n\n\t\tMonitor monitor = MessageTranslator.GetMonitorAndInsertIfNew(context, mesg.getOriginatingAddress());\n\n\t\tmessageValues.put(RapidSmsDBConstants.Message.MONITOR, monitor.getID());\n\t\tmessageValues.put(RapidSmsDBConstants.Message.TIME, Message.SQLDateFormatter.format(ts)); // expensive\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// string\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// formatting\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// operation.\n\t\t// messageValues.put(RapidSmsDBConstants.Message.TIME,\n\t\t// mesg.getTimestampMillis()); //longs don't store as datetimes\n\t\tmessageValues.put(RapidSmsDBConstants.Message.IS_OUTGOING, false);\n\t\tDate now = new Date();\n\t\tmessageValues.put(RapidSmsDBConstants.Message.RECEIVE_TIME, Message.SQLDateFormatter.format(now)); // profile\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// has\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// shown\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// this\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// is\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// an\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// expensive\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// operation\n\t\t// messageValues.put(RapidSmsDBConstants.Message.RECEIVE_TIME,\n\t\t// now.getTime()); //but this doesn't fracking work to convert to a\n\t\t// datetime value.\n\t\tboolean successfulSave = false;\n\t\tUri msgUri = null;\n\t\ttry {\n\t\t\tmsgUri = context.getContentResolver().insert(writeMessageUri, messageValues);\n\t\t\tsuccessfulSave = true;\n\t\t} catch (Exception ex) {\n\n\t\t}\n\n\t\tif (successfulSave) {\n\t\t\tIntent broadcast = new Intent(\"org.rapidandroid.intents.SMS_SAVED\");\n\t\t\tbroadcast.putExtra(\"from\", mesg.getOriginatingAddress());\n\t\t\tbroadcast.putExtra(\"body\", mesg.getMessageBody());\n\t\t\tbroadcast.putExtra(\"msgid\", Integer.valueOf(msgUri.getPathSegments().get(1)));\n\t\t\t//DeleteSMSFromInbox(context, mesg);\n\t\t\tcontext.sendBroadcast(broadcast);\n\t\t}\n\t}", "path": "rapidandroid\\org.rapidandroid\\src\\org\\rapidandroid\\receiver\\SmsReceiver.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "// public String get() {\n// Random rand = new Random();\n// String ret = \"[\";\n// for(int i = 0; i < 7; i++) {\n// ret += \"[\" + i + \",\" + rand.nextInt(12) + \"]\";\n// if(i != 6) {\n// ret += \",\";\n// }\n// }\n// ret += \"]\";\n// Log.d(\"graphdebug\", ret);\n//\t\t\t\n// return ret;\n// }\n", "func_signal": "public void loadGraph()", "code": "{\n\tJSONArray arr = new JSONArray();\n\n\tJSONObject result = new JSONObject();\n\ttry {\n\t\tresult.put(\"data\", getRawDataJSON());\n\t\tresult.put(\"lines\", getLineOptionsJSON());\n\t\tresult.put(\"points\", getFalseJSON());\n\t\tarr.put(result);\n\n\t} catch (Exception ex) {\n\t\t//\n\t}\n\n\t// String ret = \"var data = \" + arr.toString() + \";\";\n\t// Log.d(\"graphdebug\", ret);\n\tmAppView.loadUrl(\"javascript:GotGraph(\" + arr.toString() + \")\");\n\n}", "path": "sandbox\\charttest\\src\\com\\dimagi\\charttest\\LineData.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see android.widget.CursorAdapter#bindView(android.view.View,\n * android.content.Context, android.database.Cursor)\n */\n", "func_signal": "@Override\npublic void bindView(View view, Context context, Cursor cursor)", "code": "{\n\tif (view != null) {\n\t\tSingleGridRowView srv = (SingleGridRowView) view;\n\t\tsrv.setData(cursor);\n\t}\n\n}", "path": "rapidandroid\\org.rapidandroid\\src\\org\\rapidandroid\\view\\adapter\\FormDataGridCursorAdapter.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see android.widget.CursorAdapter#newView(android.content.Context,\n * android.database.Cursor, android.view.ViewGroup)\n */\n", "func_signal": "@Override\npublic View newView(Context context, Cursor cursor, ViewGroup parent)", "code": "{\n\tSingleGridRowView srv = new SingleGridRowView(context, cursor, mColWidth);\n\treturn srv;\n}", "path": "rapidandroid\\org.rapidandroid\\src\\org\\rapidandroid\\view\\adapter\\FormDataGridCursorAdapter.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "/**\n * Gets the display type for this, based on the start and end dates\n * \n * @return\n */\n", "func_signal": "protected DateDisplayTypes getDisplayType(Date startDate, Date endDate)", "code": "{\n\tCalendar startCal = Calendar.getInstance();\n\tstartCal.setTime(startDate);\n\tCalendar endCal = Calendar.getInstance();\n\tendCal.setTime(endDate);\n\n\tCalendar tempCal = Calendar.getInstance();\n\ttempCal.setTime(startDate);\n\ttempCal.add(Calendar.DATE, 3);\n\tif (endCal.before(tempCal)) {\n\t\t// within 3 days, we do it by hour. with day shading\n\t\treturn DateDisplayTypes.Hourly;\n\t}\n\n\ttempCal.setTime(startDate);\n\ttempCal.add(Calendar.MONTH, 3);\n\n\tif (endCal.before(tempCal)) {\n\t\t// within 3 months, we break it down by day with week & month\n\t\t// shading?\n\t\treturn DateDisplayTypes.Daily;\n\t}\n\ttempCal.setTime(startDate);\n\ttempCal.add(Calendar.YEAR, 2);\n\tif (endCal.before(tempCal)) {\n\t\t// within 2 years, we break it down by week with month shading\n\t\treturn DateDisplayTypes.Weekly;\n\t}\n\ttempCal.setTime(startDate);\n\ttempCal.add(Calendar.YEAR, 4);\n\n\tif (endCal.before(tempCal)) {\n\t\t// 2-4 years break it down by month with year shading\n\t\treturn DateDisplayTypes.Monthly;\n\t} else { // if(endCal.get(Calendar.YEAR) - startCal.get(Calendar.YEAR)\n\t\t\t\t// >= 4) {\n\t\t// we need to break it down by year. with year shading\n\t\treturn DateDisplayTypes.Yearly;\n\t}\n}\n\nprotected String getSelectionString(DateDisplayTypes displayType) {\n\tswitch (displayType) {\n\t\tcase Hourly:\n\t\t\treturn \"  strftime('%Y-%m-%d %H',time) \";\n\t\tcase Daily:\n\t\t\treturn \" strftime('%Y-%m-%d', time) \";\n\t\tcase Weekly:\n\t\t\treturn \" strftime('%Y-%W', time) \";\n\t\tcase Monthly:\n\t\t\treturn \" strftime('%Y-%m',time) \";\n\t\tcase Yearly:\n\t\t\treturn \" strftime('%Y',time) \";\n\t\tdefault:\n\t\t\treturn \"\";\n\n\t}\n}\n\nprotected String getLegendString(DateDisplayTypes displayType) {\n\tswitch (displayType) {\n\t\tcase Hourly:\n\t\t\treturn \"Hourly count\";\n\t\tcase Daily:\n\t\t\treturn \"Daily count\";\n\t\tcase Weekly:\n\t\t\treturn \"Weekly count\";\n\t\tcase Monthly:\n\t\t\treturn \"Monthly count\";\n\t\tcase Yearly:\n\t\t\treturn \"Annual count\";\n\t\tdefault:\n\t\t\treturn \"\";\n\t}\n}\n\nprivate String getFormatString(DateDisplayTypes displayType) {\n\tswitch (displayType) {\n\t\tcase Hourly:\n\t\t\treturn \"%m/%d %H:%M\";\n\t\tcase Daily:\n\t\tcase Weekly:\n\t\t\treturn \"%m/%d/%y\";\n\t\tcase Monthly:\n\t\t\treturn \"%m/%y\";\n\t\tcase Yearly:\n\t\t\treturn \"%y\";\n\t\tdefault:\n\t\t\treturn \"%m/%d/%y\";\n\t}\n}\n\nprotected Date getNextValue(DateDisplayTypes displayType, Date date) {\n\tCalendar cal = Calendar.getInstance();\n\tcal.setTime(date);\n\tswitch (displayType) {\n\t\tcase Hourly:\n\t\t\tcal.add(Calendar.HOUR, 1);\n\t\t\tbreak;\n\t\tcase Daily:\n\t\t\tcal.add(Calendar.DATE, 1);\n\t\t\tbreak;\n\t\tcase Weekly:\n\t\t\tcal.add(Calendar.WEEK_OF_YEAR, 1);\n\t\t\tbreak;\n\t\tcase Monthly:\n\t\t\tcal.add(Calendar.MONTH, 1);\n\t\t\tbreak;\n\t\tcase Yearly:\n\t\t\tcal.add(Calendar.YEAR, 1);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new IllegalArgumentException(\"Bad display type: \" + displayType);\n\t}\n\treturn cal.getTime();\n}\n\nprotected boolean isBefore(DateDisplayTypes displayType, Date date1, Date date2) {\n\tCalendar cal1 = Calendar.getInstance();\n\tcal1.setTime(date1);\n\tCalendar cal2 = Calendar.getInstance();\n\tcal2.setTime(date2);\n\tif (cal2.before(cal1)) {\n\t\treturn false;\n\t}\n\t// i really feel like there should be a cleaner way to do this but it\n\t// escapes me\n\tif (cal1.get(Calendar.YEAR) < cal2.get(Calendar.YEAR)) {\n\t\treturn true;\n\t} else if (cal1.get(Calendar.YEAR) > cal2.get(Calendar.YEAR) || displayType == DateDisplayTypes.Yearly) {\n\t\treturn false;\n\t}\n\t// we know the years are the same and we're comparing less than years\n\tif (cal1.get(Calendar.MONTH) < cal2.get(Calendar.MONTH)) {\n\t\treturn true;\n\t} else if (cal1.get(Calendar.MONTH) > cal2.get(Calendar.MONTH) || displayType == DateDisplayTypes.Monthly) {\n\t\treturn false;\n\t}\n\t// we know months and years are the same and we're comparing less than\n\t// months\n\tif (cal1.get(Calendar.WEEK_OF_YEAR) < cal2.get(Calendar.WEEK_OF_YEAR)) {\n\t\treturn true;\n\t} else if (cal1.get(Calendar.WEEK_OF_YEAR) > cal2.get(Calendar.WEEK_OF_YEAR)\n\t\t\t|| displayType == DateDisplayTypes.Weekly) {\n\t\treturn false;\n\t}\n\t// we know months, years, and weeks are the same and we're comparing\n\t// less than weeks\n\tif (cal1.get(Calendar.DATE) < cal2.get(Calendar.DATE)) {\n\t\treturn true;\n\t} else if (cal1.get(Calendar.DATE) > cal2.get(Calendar.DATE) || displayType == DateDisplayTypes.Daily) {\n\t\treturn false;\n\t}\n\t// we know months, years,weeks, and days are the same and we're\n\t// comparing less than days\n\tif (cal1.get(Calendar.HOUR) < cal2.get(Calendar.HOUR)) {\n\t\treturn true;\n\t}\n\t// anything else is not before\n\treturn false;\n}\n\nprotected Date getDate(DateDisplayTypes displayType, String string) {\n\n\tDate rawDate;\n\ttry {\n\t\trawDate = sqlDateFormat.parse(string);\n\t} catch (ParseException e) {\n\t\tLog.d(\"ChartBroker\", \"unparseable date: \" + string);\n\t\t// this is actually a hard failure. Just not sure what to do\n\t\treturn Constants.NULLDATE;\n\t}\n\tCalendar rawCal = Calendar.getInstance();\n\trawCal.setTime(rawDate);\n\tCalendar calToReturn = Calendar.getInstance();\n\trawCal.set(Calendar.MINUTE, 0);\n\trawCal.set(Calendar.SECOND, 0);\n\tswitch (displayType) {\n\t\tcase Hourly:\n\t\t\tbreak;\n\t\tcase Daily:\n\t\t\trawCal.set(Calendar.HOUR, 0);\n\t\t\tbreak;\n\t\tcase Weekly:\n\t\t\trawCal.set(Calendar.HOUR, 0);\n\t\t\trawCal.set(Calendar.DAY_OF_WEEK, 1);\n\t\t\tbreak;\n\t\tcase Monthly:\n\t\t\trawCal.set(Calendar.HOUR, 0);\n\t\t\trawCal.set(Calendar.DAY_OF_MONTH, 1);\n\t\t\tbreak;\n\t\tcase Yearly:\n\t\t\trawCal.set(Calendar.HOUR, 0);\n\t\t\trawCal.set(Calendar.DAY_OF_MONTH, 1);\n\t\t\trawCal.set(Calendar.MONTH, 1);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn rawCal.getTime();\n\t}\n\tDate toReturn = calToReturn.getTime();\n\tDate reallyToReturn = rawCal.getTime();\n\treturn reallyToReturn;\n\n}\n\nprotected JSONGraphData getDateQuery(DateDisplayTypes displayType, Cursor cr, SQLiteDatabase db) {\n\t// TODO Auto-generated method stub\n\tint barCount = cr.getCount();\n\n\tif (barCount == 0) {\n\t\tdb.close();\n\t\tcr.close();\n\t} else {\n\t\tDate[] xVals = new Date[barCount];\n\t\tint[] yVals = new int[barCount];\n\t\tcr.moveToFirst();\n\t\tint i = 0;\n\t\tdo {\n\t\t\txVals[i] = getDate(displayType, cr.getString(0));\n\t\t\tyVals[i] = cr.getInt(1);\n\t\t\ti++;\n\t\t} while (cr.moveToNext());\n\n\t\ttry {\n\t\t\t// result.put(\"label\", fieldToPlot.getName());\n\t\t\t// result.put(\"data\", prepareData(xVals, yVals));\n\t\t\t// result.put(\"bars\", getShowTrue());\n\t\t\t// result.put(\"xaxis\", getXaxisOptions(xVals));\n\t\t\t// todo\n\t\t\tString legend = this.getLegendString(displayType);\n\t\t\treturn new JSONGraphData(prepareDateHistogramData(displayType, xVals, yVals, legend),\n\t\t\t\t\t\t\t\t\t\tloadOptionsForDateGraph(xVals, true, displayType));\n\n\t\t} catch (Exception ex) {\n\n\t\t} finally {\n\t\t\tif (!cr.isClosed()) {\n\n\t\t\t\tcr.close();\n\t\t\t}\n\t\t\tif (db.isOpen()) {\n\t\t\t\tdb.close();\n\t\t\t}\n\t\t}\n\t}\n\t// either there was no data or something bad happened\n\treturn new JSONGraphData(getEmptyData(), new JSONObject());\n}\n\nprotected JSONObject loadOptionsForDateGraph(Date[] vals, boolean displayLegend, DateDisplayTypes displayType)\n\t\tthrows JSONException {\n\n\tJSONObject toReturn = new JSONObject();\n\t// bars: { show: true }, points: { show: false }, xaxis: { mode: \"time\",\n\t// timeformat:\"%y/%m/%d\" }\n\ttoReturn.put(\"bars\", getShowFalse());\n\ttoReturn.put(\"lines\", getShowTrue());\n\t// if just a couple points, show them\n\tif (vals.length < 10) {\n\t\ttoReturn.put(\"points\", getShowTrue());\n\t} else {\n\t\ttoReturn.put(\"points\", getShowFalse());\n\t}\n\n\ttoReturn.put(\"xaxis\", getXaxisOptionsForDate(displayType));\n\tif (displayLegend) {\n\t\ttoReturn.put(\"legend\", getShowTrue());\n\t}\n\ttoReturn.put(\"grid\", getJSONObject(\"clickable\", false));\n\treturn toReturn;\n}\n\nprotected static JSONObject getShowTrue() {\n\tJSONObject ret = new JSONObject();\n\ttry {\n\t\tret.put(\"show\", true);\n\t} catch (Exception ex) {\n\n\t}\n\treturn ret;\n}\n\nprotected JSONObject getShowFalse() {\n\tJSONObject ret = new JSONObject();\n\ttry {\n\t\tret.put(\"show\", false);\n\t} catch (Exception ex) {\n\n\t}\n\treturn ret;\n}\n\nprotected JSONObject getXaxisOptionsForDate(DateDisplayTypes displayType) throws JSONException {\n\tJSONObject toReturn = new JSONObject();\n\ttoReturn.put(\"mode\", \"time\");\n\ttoReturn.put(\"timeformat\", getFormatString(displayType));\n\treturn toReturn;\n}\n\nprotected JSONObject loadOptionsForHistogram(String[] labels) throws JSONException {\n\n\tJSONObject toReturn = new JSONObject();\n\ttoReturn.put(\"xaxis\", this.getXaxisOptions(labels));\n\ttoReturn.put(\"grid\", getJSONObject(\"clickable\", true));\n\treturn toReturn;\n}\n\nprotected JSONObject getXaxisOptions(String[] tickvalues) {\n\tJSONObject rootxaxis = new JSONObject();\n\tJSONArray arr = new JSONArray();\n\tint ticklen = tickvalues.length;\n\n\tfor (int i = 0; i < ticklen; i++) {\n\t\tJSONArray elem = new JSONArray();\n\t\telem.put(i);\n\t\telem.put(tickvalues[i]);\n\t\tarr.put(elem);\n\t}\n\n\ttry {\n\t\trootxaxis.put(\"min\", 0);\n\t\trootxaxis.put(\"max\", tickvalues.length + tickvalues.length / 5 + 1);\n\t\trootxaxis.put(\"ticks\", arr);\n\t\trootxaxis.put(\"tickFormatter\", \"string\");\n\t} catch (Exception ex) {\n\n\t}\n\treturn rootxaxis;\n}\n\nprotected JSONObject getJSONObject(String string, Object o) {\n\tJSONObject toReturn = new JSONObject();\n\ttry {\n\t\ttoReturn.put(string, o);\n\t} catch (Exception ex) {\n\t}\n\treturn toReturn;\n}\n\nprivate JSONArray prepareDateHistogramData(DateDisplayTypes displayType, Date[] xvals, int[] yvals, String legend)\n\t\tthrows JSONException {\n\tJSONArray outerArray = new JSONArray();\n\tJSONArray innerArray = getJSONArrayForValues(displayType, xvals, yvals);\n\tJSONObject finalObj = new JSONObject();\n\tfinalObj.put(\"data\", innerArray);\n\tfinalObj.put(\"label\", legend);\n\touterArray.put(finalObj);\n\treturn outerArray;\n}\n\nprotected JSONArray getJSONArrayForValues(DateDisplayTypes displayType, Date[] xvals, int[] yvals) {\n\tJSONArray toReturn = new JSONArray();\n\tint datalen = xvals.length;\n\tDate prevVal = null;\n\tfor (int i = 0; i < datalen; i++) {\n\t\tDate thisVal = xvals[i];\n\t\tif (prevVal != null) {\n\t\t\t// add logic to fill in zeros\n\t\t\tDate nextInSeries = getNextValue(displayType, prevVal);\n\t\t\twhile (isBefore(displayType, nextInSeries, thisVal)) {\n\t\t\t\tJSONArray elem = new JSONArray();\n\t\t\t\telem.put(nextInSeries.getTime());\n\t\t\t\telem.put(0);\n\t\t\t\ttoReturn.put(elem);\n\t\t\t\tnextInSeries = getNextValue(displayType, nextInSeries);\n\t\t\t}\n\t\t}\n\t\tJSONArray elem = new JSONArray();\n\t\telem.put(xvals[i].getTime());\n\t\telem.put(yvals[i]);\n\t\ttoReturn.put(elem);\n\t\tprevVal = thisVal;\n\t}\n\treturn toReturn;\n}\n\nprotected JSONArray getEmptyData() {\n\tJSONArray toReturn = new JSONArray();\n\tJSONArray innerArray = new JSONArray();\n\tinnerArray.put(0);\n\tinnerArray.put(0);\n\ttoReturn.put(innerArray);\n\treturn toReturn;\n}\n\n/**\n * This gets called by the javascript file after the graph is done plotting\n */\npublic void jsFinishGraph() {\n\tLog.d(\"ChartBroker\", \"begin finishGraph\");\n\tgetPrettyTitleString();\n\tmDialogHandler.post(mStopThinker);\n\tLog.d(\"ChartBroker\", \"stopped thinker\");\n\tmTitleHandler.post(mUpdateActivityTitle);\n\tif (!hasData()) {\n\t\tmDialogHandler.post(mEmptyData);\n\t}\n\tLog.d(\"ChartBroker\", \"end finishGraph\");\n\tthis.isShowing = true;\n\tthis.mAppView.setVisibility(0);\n\t\n}\n\npublic abstract String getGraphTitle();\n\npublic synchronized void setVariable(int id) {\n\tmChosenVariable = id;\n\tmGraphData = null;\n\tmGraphOptions = null;\n}\n\npublic synchronized void setRange(Date startTime, Date endTime) {\n\tmStartDate = startTime;\n\tmEndDate = endTime;\n\n\tmGraphData = null;\n\tmGraphOptions = null;\n}\n\npublic String[] getVariables() {\n\treturn mVariableStrings;\n}\n\npublic abstract String getName();\n}", "path": "rapidandroid\\org.rapidandroid\\src\\org\\rapidandroid\\activity\\chart\\ChartBroker.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see android.database.sqlite.SQLiteOpenHelper#getReadableDatabase()\n */\n", "func_signal": "@Override\npublic synchronized SQLiteDatabase getReadableDatabase()", "code": "{\n\tif (useLocal) {\n\t\treturn super.getReadableDatabase();\n\t}\n\n\tif (mDatabase != null && mDatabase.isOpen()) {\n\t\treturn mDatabase; // The database is already open for business\n\t}\n\n\tif (mIsInitializing) {\n\t\tthrow new IllegalStateException(\"getReadableDatabase called recursively\");\n\t}\n\n\ttry {\n\t\treturn getWritableDatabase();\n\t} catch (SQLiteException e) {\n\t\tLog.e(TAG, \"Couldn't open \" + DATABASE_NAME + \" for writing (will try read-only):\", e);\n\t}\n\n\tSQLiteDatabase db = null;\n\ttry {\n\t\tmIsInitializing = true;\n\t\tdb = SQLiteDatabase.openDatabase(dbPathToUse, null, SQLiteDatabase.OPEN_READONLY);\n\t\tif (db.getVersion() != DATABASE_VERSION) {\n\t\t\tthrow new SQLiteException(\"Can't upgrade read-only database from version \" + db.getVersion() + \" to \"\n\t\t\t\t\t+ DATABASE_VERSION + \": \" + dbPathToUse);\n\t\t}\n\n\t\tonOpen(db);\n\t\tLog.w(TAG, \"Opened \" + DATABASE_NAME + \" in read-only mode\");\n\t\tmDatabase = db;\n\t\treturn mDatabase;\n\t} finally {\n\t\tmIsInitializing = false;\n\t\tif (db != null && db != mDatabase)\n\t\t\tdb.close();\n\t}\n}", "path": "rapidandroid\\org.rapidandroid\\src\\org\\rapidandroid\\data\\SmsDbHelper.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "/**\n * Register this ChartBroker to the WebView as a javascript interface.\n */\n", "func_signal": "public void bindChartToHTML()", "code": "{\n\tmAppView.addJavascriptInterface(this, JAVASCRIPT_PROPERTYNAME);\n\tLog.d(\"ChartBroker\", \"addJavascriptInterface: \" + JAVASCRIPT_PROPERTYNAME);\n\tmAppView.loadUrl(CHART_FILE);\n\tLog.d(\"ChartBroker\", \"loadUrl: \" + CHART_FILE);\n}", "path": "rapidandroid\\org.rapidandroid\\src\\org\\rapidandroid\\activity\\chart\\ChartBroker.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "// source: http://www.devx.com/wireless/Article/39495/1954\n", "func_signal": "public void onReceive(Context context, Intent intent)", "code": "{\n\tif (!intent.getAction().equals(\"android.provider.Telephony.SMS_RECEIVED\")) {// {\n\t\treturn;\n\t}\n\n\tSmsMessage msgs[] = getMessagesFromIntent(intent);\n\n\tfor (int i = 0; i < msgs.length; i++) {\n\t\tString message = msgs[i].getDisplayMessageBody();\n\n\t\tif (message != null && message.length() > 0) {\n\t\t\tLog.d(\"MessageListener\", message);\n\n\t\t\t// //Our trigger message must be generic and human redable\n\t\t\t// because it will end up\n\t\t\t// //In the SMS inbox of the phone.\n\t\t\t// if(message.startsWith(\"dimagi\"))\n\t\t\t// {\n\t\t\t// //DO SOMETHING\n\t\t\t// }\n\n\t\t\tinsertMessageToContentProvider(context, msgs[i]);\n\t\t}\n\t}\n\n}\n\n// source: http://www.devx.com/wireless/Article/39495/1954\nprivate SmsMessage[] getMessagesFromIntent(Intent intent) {\n\tSmsMessage retMsgs[] = null;\n\tBundle bdl = intent.getExtras();\n\ttry {\n\t\tObject pdus[] = (Object[]) bdl.get(\"pdus\");\n\t\tretMsgs = new SmsMessage[pdus.length];\n\t\tfor (int n = 0; n < pdus.length; n++) {\n\t\t\tbyte[] byteData = (byte[]) pdus[n];\n\t\t\tretMsgs[n] = SmsMessage.createFromPdu(byteData);\n\t\t}\n\n\t} catch (Exception e) {\n\t\tLog.e(\"GetMessages\", \"fail\", e);\n\t}\n\treturn retMsgs;\n}\n\n}", "path": "rapidandroid\\org.rapidandroid\\src\\org\\rapidandroid\\receiver\\SmsReceiver.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "/**\n * This is the primary method that the JavaScript in our HTML form will need\n * access to in order to display graph data.\n * \n * This SHOULD NOT be called from java, javascript should call it.\n */\n", "func_signal": "public synchronized final void jsLoadGraph()", "code": "{\t\t\n\t// Debug.startMethodTracing(\"graphing_\" + this.getClass().getName() +\n\t// traceCount++);\n\t// trying to get this to work, but it's quite annoying\n\t// if (!mAlreadyLoading) {\n\tmDialogHandler.post(mStartThinker);\n\tif (mGraphData == null && mGraphOptions == null) {\n\t\tdoLoadGraph();\n\t}\n\tloadGraphFinish();\n\t// } else {\n\t// mAlreadyLoading = false;\n\t// }\n}", "path": "rapidandroid\\org.rapidandroid\\src\\org\\rapidandroid\\activity\\chart\\ChartBroker.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "/**\n * @param id\n * @param firstName\n * @param lastName\n * @param alias\n * @param phone\n * @param email\n * @param incomingMessages\n */\n", "func_signal": "public Monitor(int id, String firstName, String lastName, String alias, String phone, String email,\n\t\tint incomingMessages, boolean receiveReply)", "code": "{\n\tsuper();\n\tmId = id;\n\tmFirstName = firstName;\n\tmLastName = lastName;\n\tmAlias = alias;\n\tmPhone = phone;\n\tmEmail = email;\n\tmIncomingMessages = incomingMessages;\n\tmReceiveReply = receiveReply;\n\n}", "path": "rapidjava\\org.rapidsms.java\\src\\org\\rapidsms\\java\\core\\model\\Monitor.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.rapidandroid.activity.chart.ChartBroker#doLoadGraph()\n */\n", "func_signal": "@Override\npublic void doLoadGraph()", "code": "{\n\t// mParentActivity.showDialog(160);\n\t// Progress = ProgressDialog.show(mAppView.getContext(),\n\t// \"Rendering Graph...\", \"Please Wait\",true,false);\n\t// isLoading..mToggleThinkerHandler.post(mToggleThinker);\n\tJSONGraphData allData = null;\n\tif (mChosenVariable == 0) {\n\t\t// this is a count of messages per day\n\t\t// select date(time), count(*) from rapidandroid_message group by\n\t\t// date(time)\n\t\tallData = loadMessageTrends();\n\t} else if (mChosenVariable == 1) {\n\t\tallData = chartMessagesPerHour();\n\t}\n\tif (allData != null) {\n\t\tmGraphData = allData.getData();\n\t\tmGraphOptions = allData.getOptions();\n\t} else {\n\t\tmGraphData = this.getEmptyData();\n\t\tmGraphOptions = new JSONObject();\n\t}\n\n}", "path": "rapidandroid\\org.rapidandroid\\src\\org\\rapidandroid\\activity\\chart\\message\\MessageDataBroker.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "/**\n * Upon message receipt, determine the form in question, then call the\n * corresponding parsing logic.\n */\n", "func_signal": "@Override\npublic void onReceive(Context context, Intent intent)", "code": "{\n\tApplicationGlobals.initGlobals(context);\n\n\tif (prefixes == null) {\n\t\tinitFormCache(); // profiler shows us that this is being called\n\t\t\t\t\t\t\t// frequently on new messages.\n\t}\n\t// TODO Auto-generated method stub\n\tString body = intent.getStringExtra(\"body\");\n\n\tif (body.startsWith(\"notifications@dimagi.com /  / \")) {\n\t\tbody = body.replace(\"notifications@dimagi.com /  / \", \"\");\n\t\tLog.d(\"SmsParseReceiver\", \"Debug, snipping out the email address\");\n\t}\n\n\tint msgid = intent.getIntExtra(\"msgid\", 0);\n\n\tForm form = determineForm(body);\n\tif (form == null) {\t\t\t\n\t\tif (ApplicationGlobals.doReplyOnFail()) {\n\t\t\tIntent broadcast = new Intent(\"org.rapidandroid.intents.SMS_REPLY\");\n\t\t\tbroadcast.putExtra(SmsReplyReceiver.KEY_DESTINATION_PHONE, intent.getStringExtra(\"from\"));\n\t\t\tbroadcast.putExtra(SmsReplyReceiver.KEY_MESSAGE, ApplicationGlobals.getParseFailText());\n\t\t\tcontext.sendBroadcast(broadcast);\n\t\t}\n\t\treturn;\n\t} else {\n\t\tMonitor mon = MessageTranslator.GetMonitorAndInsertIfNew(context, intent.getStringExtra(\"from\"));\n\t\t// if(mon.getReplyPreference()) {\n\t\tif (ApplicationGlobals.doReplyOnParse()) {\n\t\t\t// for debug purposes, we'll just ack every time.\n\t\t\tIntent broadcast = new Intent(\"org.rapidandroid.intents.SMS_REPLY\");\n\t\t\tbroadcast.putExtra(SmsReplyReceiver.KEY_DESTINATION_PHONE, intent.getStringExtra(\"from\"));\n\t\t\tbroadcast.putExtra(SmsReplyReceiver.KEY_MESSAGE, ApplicationGlobals.getParseSuccessText());\n\t\t\tcontext.sendBroadcast(broadcast);\n\t\t}\n\t\tVector<IParseResult> results = ParsingService.ParseMessage(form, body);\n\t\tParsedDataTranslator.InsertFormData(context, form, msgid, results);\n\t}\n}\n}", "path": "rapidandroid\\org.rapidandroid\\src\\org\\rapidandroid\\receiver\\SmsParseReceiver.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see android.database.sqlite.SQLiteOpenHelper#getWritableDatabase()\n */\n", "func_signal": "@Override\npublic synchronized SQLiteDatabase getWritableDatabase()", "code": "{\n\tif (useLocal) {\n\t\treturn super.getWritableDatabase();\n\t}\n\tif (mDatabase != null && mDatabase.isOpen() && !mDatabase.isReadOnly()) {\n\t\treturn mDatabase; // The database is already open for business\n\t}\n\n\tif (mIsInitializing) {\n\t\tthrow new IllegalStateException(\"getWritableDatabase called recursively\");\n\t}\n\n\t// If we have a read-only database open, someone could be using it\n\t// (though they shouldn't), which would cause a lock to be held on\n\t// the file, and our attempts to open the database read-write would\n\t// fail waiting for the file lock. To prevent that, we acquire the\n\t// lock on the read-only database, which shuts out other users.\n\n\tboolean success = false;\n\tSQLiteDatabase db = null;\n\t// if (mDatabase != null) mDatabase.lock(); //can't call the locks for\n\t// some reason. beginTransaction does lock it though\n\ttry {\n\t\tmIsInitializing = true;\n\t\tdb = SQLiteDatabase.openOrCreateDatabase(dbPathToUse, null);\n\t\tint version = db.getVersion();\n\t\tif (version != DATABASE_VERSION) {\n\t\t\tdb.beginTransaction();\n\t\t\ttry {\n\t\t\t\tif (version == 0) {\n\t\t\t\t\tonCreate(db);\n\t\t\t\t} else {\n\t\t\t\t\tonUpgrade(db, version, DATABASE_VERSION);\n\t\t\t\t}\n\t\t\t\tdb.setVersion(DATABASE_VERSION);\n\t\t\t\tdb.setTransactionSuccessful();\n\t\t\t} finally {\n\t\t\t\tdb.endTransaction();\n\t\t\t}\n\t\t}\n\n\t\tonOpen(db);\n\t\tsuccess = true;\n\t\treturn db;\n\t} finally {\n\t\tmIsInitializing = false;\n\t\tif (success) {\n\t\t\tif (mDatabase != null) {\n\t\t\t\ttry {\n\t\t\t\t\tmDatabase.close();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\t\t// mDatabase.unlock();\n\t\t\t}\n\t\t\tmDatabase = db;\n\t\t} else {\n\t\t\t// if (mDatabase != null) mDatabase.unlock();\n\t\t\tif (db != null)\n\t\t\t\tdb.close();\n\t\t}\n\t}\n\n}", "path": "rapidandroid\\org.rapidandroid\\src\\org\\rapidandroid\\data\\SmsDbHelper.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "// add a bunch and confirm that the number of messages are ok\n// add messages as well and see if the number of\n", "func_signal": "public void testMessageInsertMessage()", "code": "{\n\n\tString msg1 = \"alert unlocked supply room at WSMA\";\n\tString date1 = \"10/30/2008 19:51\";\n\tString phone1 = \"251912149840\";\n\tdoSendMessage(msg1, date1, phone1);\n\n\tmsg1 = \"PN WKIG  23   0  0  0  PN OOZM  5  0  0  0 PN VHPF 5  0  0  0 PN XDQQ 6 0  0  0\";\n\tdate1 = \"10/31/2008 11:50\";\n\tphone1 = \"251913086827\";\n\tdoSendMessage(msg1, date1, phone1);\n\n\tmsg1 = \"PN WKIG  23   0  0  0\";\n\tdate1 = \"10/31/2008 11:51\";\n\tphone1 = \"251913086827\";\n\tdoSendMessage(msg1, date1, phone1);\n\n\tmsg1 = \"PN OOZM  5  0  0  0\";\n\tdate1 = \"10/31/2008 11:52\";\n\tphone1 = \"251913086827\";\n\tdoSendMessage(msg1, date1, phone1);\n\n\tmsg1 = \"PN VHPF 5  0  0  0\";\n\tdate1 = \"10/31/2008 11:53\";\n\tphone1 = \"251913086827\";\n\tdoSendMessage(msg1, date1, phone1);\n\n\tmsg1 = \"Alert problem in meyu werda shortage of transport and pn because of this pn distrbution for 2wk stop but now started.In thise werda no of otps are 6.\";\n\tdate1 = \"10/31/2008 11:58\";\n\tphone1 = \"251911877430\";\n\tdoSendMessage(msg1, date1, phone1);\n\n\tmsg1 = \"CANCEL TO  CHIROO WOREDA\";\n\tdate1 = \"10/31/2008 12:58\";\n\tphone1 = \"251911877430\";\n\tdoSendMessage(msg1, date1, phone1);\n\n\t// confirm the numbers\n\tCursor msgcount = getContext().getContentResolver().query(RapidSmsDBConstants.Message.CONTENT_URI, null, null,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnull, null);\n\tassertEquals(7, msgcount.getCount());\n\tmsgcount.close();\n\n\tCursor monitorcount = getContext().getContentResolver().query(RapidSmsDBConstants.Monitor.CONTENT_URI, null,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnull, null, null);\n\tassertEquals(3, monitorcount.getCount());\n\tmonitorcount.close();\n}", "path": "rapidandroid\\org.rapidandroid\\unittests\\org\\rapidandroid\\tests\\ContentProviderTests.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "/**\n * @param context\n * @param c\n */\n", "func_signal": "public FormDataGridCursorAdapter(Context context, Form form, Cursor c, int screenWidth)", "code": "{\n\tsuper(context, c);\n\tmForm = form;\n\tmContext = context;\n\tmWidth = screenWidth;\n\tmColWidth = screenWidth / (c.getColumnCount() - 5);\n\n}", "path": "rapidandroid\\org.rapidandroid\\src\\org\\rapidandroid\\view\\adapter\\FormDataGridCursorAdapter.java", "repo_name": "dimagi/rapidandroid", "stars": 20, "license": "None", "language": "java", "size": 2115}
{"docstring": "/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\n", "func_signal": "public static byte[] encodeBytesToBytes( byte[] source )", "code": "{\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes( source, 0, source.length, Base64.NO_OPTIONS );\n    } catch( java.io.IOException ex ) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * Reads <tt>infile</tt> and decodes it to <tt>outfile</tt>.\n *\n * @param infile Input file\n * @param outfile Output file\n * @throws java.io.IOException if there is an error\n * @since 2.2\n */\n", "func_signal": "public static void decodeFileToFile( String infile, String outfile )\n        throws java.io.IOException", "code": "{\n\n    byte[] decoded = Base64.decodeFromFile( infile );\n    java.io.OutputStream out = null;\n    try{\n        out = new java.io.BufferedOutputStream(\n                new java.io.FileOutputStream( outfile ) );\n        out.write( decoded );\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and release to execute finally{}\n    }   // end catch\n    finally {\n        try { out.close(); }\n        catch( Exception ex ){}\n    }   // end finally\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\n", "func_signal": "public static byte[] encodeBytesToBytes( byte[] source, int off, int len, int options ) throws java.io.IOException", "code": "{\n\n    if( source == null ){\n        throw new NullPointerException( \"Cannot serialize a null array.\" );\n    }   // end if: null\n\n    if( off < 0 ){\n        throw new IllegalArgumentException( \"Cannot have negative offset: \" + off );\n    }   // end if: off < 0\n\n    if( len < 0 ){\n        throw new IllegalArgumentException( \"Cannot have length offset: \" + len );\n    }   // end if: len < 0\n\n    if( off + len > source.length  ){\n        throw new IllegalArgumentException(\n                String.format( \"Cannot have offset of %d and length of %d with array of length %d\", off,len,source.length));\n    }   // end if: off < 0\n\n\n\n    // Compress?\n    if( (options & GZIP) != 0 ) {\n        java.io.ByteArrayOutputStream  baos  = null;\n        java.util.zip.GZIPOutputStream gzos  = null;\n        Base64.OutputStream            b64os = null;\n\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream( baos, ENCODE | options );\n            gzos  = new java.util.zip.GZIPOutputStream( b64os );\n\n            gzos.write( source, off, len );\n            gzos.close();\n        }   // end try\n        catch( java.io.IOException e ) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        }   // end catch\n        finally {\n            try{ gzos.close();  } catch( Exception e ){}\n            try{ b64os.close(); } catch( Exception e ){}\n            try{ baos.close();  } catch( Exception e ){}\n        }   // end finally\n\n        return baos.toByteArray();\n    }   // end if: compress\n\n    // Else, don't compress. Better not to use streams at all then.\n    else {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        int encLen = ( len / 3 ) * 4 + ( len % 3 > 0 ? 4 : 0 ); // Bytes needed for actual encoding\n        if( breakLines ){\n            encLen += encLen / MAX_LINE_LENGTH; // Plus extra newline characters\n        }\n        byte[] outBuff = new byte[ encLen ];\n\n\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for( ; d < len2; d+=3, e+=4 ) {\n            encode3to4( source, d+off, 3, outBuff, e, options );\n\n            lineLength += 4;\n            if( breakLines && lineLength >= MAX_LINE_LENGTH )\n            {\n                outBuff[e+4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }   // end if: end of line\n        }   // en dfor: each piece of array\n\n        if( d < len ) {\n            encode3to4( source, d+off, len - d, outBuff, e, options );\n            e += 4;\n        }   // end if: some padding needed\n\n\n        // Only resize array if we didn't guess it right.\n        if( e <= outBuff.length - 1 ){\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff,0, finalOut,0,e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n\n    }   // end else: don't compress\n\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * Returns one of the _SOMETHING_ALPHABET byte arrays depending on\n * the options specified.\n * It's possible, though silly, to specify ORDERED <b>and</b> URLSAFE\n * in which case one of them will be picked, though there is\n * no guarantee as to which one will be picked.\n */\n", "func_signal": "private final static byte[] getAlphabet( int options )", "code": "{\n    if ((options & URL_SAFE) == URL_SAFE) {\n        return _URL_SAFE_ALPHABET;\n    } else if ((options & ORDERED) == ORDERED) {\n        return _ORDERED_ALPHABET;\n    } else {\n        return _STANDARD_ALPHABET;\n    }\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * Writes the byte to the output stream after\n * converting to/from Base64 notation.\n * When encoding, bytes are buffered three\n * at a time before the output stream actually\n * gets a write() call.\n * When decoding, bytes are buffered four\n * at a time.\n *\n * @param theByte the byte to write\n * @since 1.3\n */\n", "func_signal": "@Override\npublic void write(int theByte)\n        throws java.io.IOException", "code": "{\n    // Encoding suspended?\n    if( suspendEncoding ) {\n        this.out.write( theByte );\n        return;\n    }   // end if: supsended\n\n    // Encode?\n    if( encode ) {\n        buffer[ position++ ] = (byte)theByte;\n        if( position >= bufferLength ) { // Enough to encode.\n\n            this.out.write( encode3to4( b4, buffer, bufferLength, options ) );\n\n            lineLength += 4;\n            if( breakLines && lineLength >= MAX_LINE_LENGTH ) {\n                this.out.write( NEW_LINE );\n                lineLength = 0;\n            }   // end if: end of line\n\n            position = 0;\n        }   // end if: enough to output\n    }   // end if: encoding\n\n    // Else, Decoding\n    else {\n        // Meaningful Base64 character?\n        if( decodabet[ theByte & 0x7f ] > WHITE_SPACE_ENC ) {\n            buffer[ position++ ] = (byte)theByte;\n            if( position >= bufferLength ) { // Enough to output.\n\n                int len = Base64.decode4to3( buffer, 0, b4, 0, options );\n                out.write( b4, 0, len );\n                position = 0;\n            }   // end if: enough to output\n        }   // end if: meaningful base64 character\n        else if( decodabet[ theByte & 0x7f ] != WHITE_SPACE_ENC ) {\n            throw new java.io.IOException( \"Invalid character in Base64 data.\" );\n        }   // end else: not white space either\n    }   // end else: decoding\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "// saving the file to Gallery\n", "func_signal": "public void saveFile(Bitmap bitmap)", "code": "{\n    String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n    File mediaStorageDir = Environment.getExternalStorageDirectory();\n    if (! mediaStorageDir.exists()){\n        if (! mediaStorageDir.mkdirs()){\n            System.out.println(\"saveFile: failed to create directory\");\n            return;\n        }\n    }\n    try {\n        String saved = MediaStore.Images.Media.insertImage(this.getContentResolver(), bitmap, \"title\", \"description\");\n        Uri sdCardUri = Uri.parse(\"file://\" + Environment.getExternalStorageDirectory());\n        sendBroadcast(new Intent(Intent.ACTION_MEDIA_MOUNTED, sdCardUri));\n        finish();\n        System.out.println(\"SpyPhone saveFile: \");\n    } catch (Exception e) {\n        System.out.println(\"saveFile: \" + e.toString());\n        e.printStackTrace();\n        finish();\n    }\n}", "path": "src\\com\\spyphone\\SpyCameraActivity.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * Reads enough of the input stream to convert\n * to/from Base64 and returns the next byte.\n *\n * @return next byte\n * @since 1.3\n */\n", "func_signal": "@Override\npublic int read() throws java.io.IOException", "code": "{\n\n    // Do we need to get data?\n    if( position < 0 ) {\n        if( encode ) {\n            byte[] b3 = new byte[3];\n            int numBinaryBytes = 0;\n            for( int i = 0; i < 3; i++ ) {\n                int b = in.read();\n\n                // If end of stream, b is -1.\n                if( b >= 0 ) {\n                    b3[i] = (byte)b;\n                    numBinaryBytes++;\n                } else {\n                    break; // out of for loop\n                }   // end else: end of stream\n\n            }   // end for: each needed input byte\n\n            if( numBinaryBytes > 0 ) {\n                encode3to4( b3, 0, numBinaryBytes, buffer, 0, options );\n                position = 0;\n                numSigBytes = 4;\n            }   // end if: got data\n            else {\n                return -1;  // Must be end of stream\n            }   // end else\n        }   // end if: encoding\n\n        // Else decoding\n        else {\n            byte[] b4 = new byte[4];\n            int i = 0;\n            for( i = 0; i < 4; i++ ) {\n                // Read four \"meaningful\" bytes:\n                int b = 0;\n                do{ b = in.read(); }\n                while( b >= 0 && decodabet[ b & 0x7f ] <= WHITE_SPACE_ENC );\n\n                if( b < 0 ) {\n                    break; // Reads a -1 if end of stream\n                }   // end if: end of stream\n\n                b4[i] = (byte)b;\n            }   // end for: each needed input byte\n\n            if( i == 4 ) {\n                numSigBytes = decode4to3( b4, 0, buffer, 0, options );\n                position = 0;\n            }   // end if: got four characters\n            else if( i == 0 ){\n                return -1;\n            }   // end else if: also padded correctly\n            else {\n                // Must have broken out from above.\n                throw new java.io.IOException( \"Improperly padded Base64 input.\" );\n            }   // end\n\n        }   // end else: decode\n    }   // end else: get data\n\n    // Got data?\n    if( position >= 0 ) {\n        // End of relevant data?\n        if( /*!encode &&*/ position >= numSigBytes ){\n            return -1;\n        }   // end if: got data\n\n        if( encode && breakLines && lineLength >= MAX_LINE_LENGTH ) {\n            lineLength = 0;\n            return '\\n';\n        }   // end if\n        else {\n            lineLength++;   // This isn't important when decoding\n            // but throwing an extra \"if\" seems\n            // just as wasteful.\n\n            int b = buffer[ position++ ];\n\n            if( position >= bufferLength ) {\n                position = -1;\n            }   // end if: end\n\n            return b & 0xFF; // This is how you \"cast\" a byte that's\n            // intended to be unsigned.\n        }   // end else\n    }   // end if: position >= 0\n\n    // Else error\n    else {\n        throw new java.io.IOException( \"Error in Base64 code reading stream.\" );\n    }   // end else\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\n", "func_signal": "public static String encodeFromFile( String filename )\n        throws java.io.IOException", "code": "{\n\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try\n    {\n        // Set up some useful variables\n        java.io.File file = new java.io.File( filename );\n        byte[] buffer = new byte[ Math.max((int)(file.length() * 1.4+1),40) ]; // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        int length   = 0;\n        int numBytes = 0;\n\n        // Open a stream\n        bis = new Base64.InputStream(\n                new java.io.BufferedInputStream(\n                        new java.io.FileInputStream( file ) ), Base64.ENCODE );\n\n        // Read until done\n        while( ( numBytes = bis.read( buffer, length, 4096 ) ) >= 0 ) {\n            length += numBytes;\n        }   // end while\n\n        // Save in a variable to return\n        encodedData = new String( buffer, 0, length, Base64.PREFERRED_ENCODING );\n\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and release to execute finally{}\n    }   // end catch: java.io.IOException\n    finally {\n        try{ bis.close(); } catch( Exception e) {}\n    }   // end finally\n\n    return encodedData;\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\n", "func_signal": "public static String encodeBytes( byte[] source, int off, int len, int options ) throws java.io.IOException", "code": "{\n    byte[] encoded = encodeBytesToBytes( source, off, len, options );\n\n    // Return value according to relevant encoding.\n    try {\n        return new String( encoded, PREFERRED_ENCODING );\n    }   // end try\n    catch (java.io.UnsupportedEncodingException uue) {\n        return new String( encoded );\n    }   // end catch\n\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * Reads <tt>infile</tt> and encodes it to <tt>outfile</tt>.\n *\n * @param infile Input file\n * @param outfile Output file\n * @throws java.io.IOException if there is an error\n * @since 2.2\n */\n", "func_signal": "public static void encodeFileToFile( String infile, String outfile )\n        throws java.io.IOException", "code": "{\n\n    String encoded = Base64.encodeFromFile( infile );\n    java.io.OutputStream out = null;\n    try{\n        out = new java.io.BufferedOutputStream(\n                new java.io.FileOutputStream( outfile ) );\n        out.write( encoded.getBytes(\"US-ASCII\") ); // Strict, 7-bit output.\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and release to execute finally{}\n    }   // end catch\n    finally {\n        try { out.close(); }\n        catch( Exception ex ){}\n    }   // end finally\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\n", "func_signal": "public static Object decodeToObject(\n        String encodedObject, int options, final ClassLoader loader )\n        throws java.io.IOException, java.lang.ClassNotFoundException", "code": "{\n\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode( encodedObject, options );\n\n    java.io.ByteArrayInputStream  bais = null;\n    java.io.ObjectInputStream     ois  = null;\n    Object obj = null;\n\n    try {\n        bais = new java.io.ByteArrayInputStream( objBytes );\n\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if( loader == null ){\n            ois  = new java.io.ObjectInputStream( bais );\n        }   // end if: no loader provided\n\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        else {\n            ois = new java.io.ObjectInputStream(bais){\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass)\n                        throws java.io.IOException, ClassNotFoundException {\n                    Class c = Class.forName(streamClass.getName(), false, loader);\n                    if( c == null ){\n                        return super.resolveClass(streamClass);\n                    } else {\n                        return c;   // Class loader knows of this class.\n                    }   // end else: not null\n                }   // end resolveClass\n            };  // end ois\n        }   // end else: no custom class loader\n\n        obj = ois.readObject();\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e;    // Catch and throw in order to execute finally{}\n    }   // end catch\n    catch( java.lang.ClassNotFoundException e ) {\n        throw e;    // Catch and throw in order to execute finally{}\n    }   // end catch\n    finally {\n        try{ bais.close(); } catch( Exception e ){}\n        try{ ois.close();  } catch( Exception e ){}\n    }   // end finally\n\n    return obj;\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/** A safe way to get an instance of the Camera object. */\n", "func_signal": "public static Camera getCameraInstance()", "code": "{\n    Camera c = null;\n    try {\n        c = Camera.open(); // attempt to get a Camera instance\n    }\n    catch (Exception e){\n        System.out.println(\"Camera error:\" + e.toString());\n        // Camera is not available (in use or does not exist)\n    }\n    return c; // returns null if camera is unavailable\n}", "path": "src\\com\\spyphone\\SpyCameraActivity.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\n", "func_signal": "public static String encodeObject( java.io.Serializable serializableObject, int options )\n        throws java.io.IOException", "code": "{\n\n    if( serializableObject == null ){\n        throw new NullPointerException( \"Cannot serialize a null object.\" );\n    }   // end if: null\n\n    // Streams\n    java.io.ByteArrayOutputStream  baos  = null;\n    java.io.OutputStream           b64os = null;\n    java.util.zip.GZIPOutputStream gzos  = null;\n    java.io.ObjectOutputStream     oos   = null;\n\n\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos  = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream( baos, ENCODE | options );\n        if( (options & GZIP) != 0 ){\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream( gzos );\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream( b64os );\n        }\n        oos.writeObject( serializableObject );\n    }   // end try\n    catch( java.io.IOException e ) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    }   // end catch\n    finally {\n        try{ oos.close();   } catch( Exception e ){}\n        try{ gzos.close();  } catch( Exception e ){}\n        try{ b64os.close(); } catch( Exception e ){}\n        try{ baos.close();  } catch( Exception e ){}\n    }   // end finally\n\n    // Return value according to relevant encoding.\n    try {\n        return new String( baos.toByteArray(), PREFERRED_ENCODING );\n    }   // end try\n    catch (java.io.UnsupportedEncodingException uue){\n        // Fall back to some Java default\n        return new String( baos.toByteArray() );\n    }   // end catch\n\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\n", "func_signal": "public static String encodeBytes( byte[] source, int off, int len )", "code": "{\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes( source, off, len, NO_OPTIONS );\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }   // end catch\n    assert encoded != null;\n    return encoded;\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * <p>Encodes up to three bytes of the array <var>source</var>\n * and writes the resulting four Base64 bytes to <var>destination</var>.\n * The source and destination arrays can be manipulated\n * anywhere along their length by specifying\n * <var>srcOffset</var> and <var>destOffset</var>.\n * This method does not check to make sure your arrays\n * are large enough to accomodate <var>srcOffset</var> + 3 for\n * the <var>source</var> array or <var>destOffset</var> + 4 for\n * the <var>destination</var> array.\n * The actual number of significant bytes in your array is\n * given by <var>numSigBytes</var>.</p>\n * <p>This is the lowest level of the encoding methods with\n * all possible parameters.</p>\n *\n * @param source the array to convert\n * @param srcOffset the index where conversion begins\n * @param numSigBytes the number of significant bytes in your array\n * @param destination the array to hold the conversion\n * @param destOffset the index where output will be put\n * @return the <var>destination</var> array\n * @since 1.3\n */\n", "func_signal": "private static byte[] encode3to4(\n        byte[] source, int srcOffset, int numSigBytes,\n        byte[] destination, int destOffset, int options )", "code": "{\n\n    byte[] ALPHABET = getAlphabet( options );\n\n    //           1         2         3\n    // 01234567890123456789012345678901 Bit position\n    // --------000000001111111122222222 Array position from threeBytes\n    // --------|    ||    ||    ||    | Six bit groups to index ALPHABET\n    //          >>18  >>12  >> 6  >> 0  Right shift necessary\n    //                0x3f  0x3f  0x3f  Additional AND\n\n    // Create buffer with zero-padding if there are only one or two\n    // significant bytes passed in the array.\n    // We have to shift left 24 in order to flush out the 1's that appear\n    // when Java treats a value as negative that is cast from a byte to an int.\n    int inBuff =   ( numSigBytes > 0 ? ((source[ srcOffset     ] << 24) >>>  8) : 0 )\n            | ( numSigBytes > 1 ? ((source[ srcOffset + 1 ] << 24) >>> 16) : 0 )\n            | ( numSigBytes > 2 ? ((source[ srcOffset + 2 ] << 24) >>> 24) : 0 );\n\n    switch( numSigBytes )\n    {\n        case 3:\n            destination[ destOffset     ] = ALPHABET[ (inBuff >>> 18)        ];\n            destination[ destOffset + 1 ] = ALPHABET[ (inBuff >>> 12) & 0x3f ];\n            destination[ destOffset + 2 ] = ALPHABET[ (inBuff >>>  6) & 0x3f ];\n            destination[ destOffset + 3 ] = ALPHABET[ (inBuff       ) & 0x3f ];\n            return destination;\n\n        case 2:\n            destination[ destOffset     ] = ALPHABET[ (inBuff >>> 18)        ];\n            destination[ destOffset + 1 ] = ALPHABET[ (inBuff >>> 12) & 0x3f ];\n            destination[ destOffset + 2 ] = ALPHABET[ (inBuff >>>  6) & 0x3f ];\n            destination[ destOffset + 3 ] = EQUALS_SIGN;\n            return destination;\n\n        case 1:\n            destination[ destOffset     ] = ALPHABET[ (inBuff >>> 18)        ];\n            destination[ destOffset + 1 ] = ALPHABET[ (inBuff >>> 12) & 0x3f ];\n            destination[ destOffset + 2 ] = EQUALS_SIGN;\n            destination[ destOffset + 3 ] = EQUALS_SIGN;\n            return destination;\n\n        default:\n            return destination;\n    }   // end switch\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * Performs Base64 encoding on the <code>raw</code> ByteBuffer,\n * writing it to the <code>encoded</code> CharBuffer.\n * This is an experimental feature. Currently it does not\n * pass along any options (such as {@link #DO_BREAK_LINES}\n * or {@link #GZIP}.\n *\n * @param raw input buffer\n * @param encoded output buffer\n * @since 2.3\n */\n", "func_signal": "public static void encode( java.nio.ByteBuffer raw, java.nio.CharBuffer encoded )", "code": "{\n    byte[] raw3 = new byte[3];\n    byte[] enc4 = new byte[4];\n\n    while( raw.hasRemaining() ){\n        int rem = Math.min(3,raw.remaining());\n        raw.get(raw3,0,rem);\n        Base64.encode3to4(enc4, raw3, rem, Base64.NO_OPTIONS );\n        for( int i = 0; i < 4; i++ ){\n            encoded.put( (char)(enc4[i] & 0xFF) );\n        }\n    }   // end input remaining\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\n", "func_signal": "public static byte[] decode( String s, int options ) throws java.io.IOException", "code": "{\n\n    if( s == null ){\n        throw new NullPointerException( \"Input string was null.\" );\n    }   // end if\n\n    byte[] bytes;\n    try {\n        bytes = s.getBytes( PREFERRED_ENCODING );\n    }   // end try\n    catch( java.io.UnsupportedEncodingException uee ) {\n        bytes = s.getBytes();\n    }   // end catch\n    //</change>\n\n    // Decode\n    bytes = decode( bytes, 0, bytes.length, options );\n\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if( (bytes != null) && (bytes.length >= 4) && (!dontGunzip) ) {\n\n        int head = ((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if( java.util.zip.GZIPInputStream.GZIP_MAGIC == head )  {\n            java.io.ByteArrayInputStream  bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int    length = 0;\n\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream( bytes );\n                gzis = new java.util.zip.GZIPInputStream( bais );\n\n                while( ( length = gzis.read( buffer ) ) >= 0 ) {\n                    baos.write(buffer,0,length);\n                }   // end while: reading input\n\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n\n            }   // end try\n            catch( java.io.IOException e ) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            }   // end catch\n            finally {\n                try{ baos.close(); } catch( Exception e ){}\n                try{ gzis.close(); } catch( Exception e ){}\n                try{ bais.close(); } catch( Exception e ){}\n            }   // end finally\n\n        }   // end if: gzipped\n    }   // end if: bytes.length >= 2\n\n    return bytes;\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * Convenience method for encoding data to a file.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param dataToEncode byte array of data to encode in base64 form\n * @param filename Filename for saving encoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if dataToEncode is null\n * @since 2.1\n */\n", "func_signal": "public static void encodeToFile( byte[] dataToEncode, String filename )\n        throws java.io.IOException", "code": "{\n\n    if( dataToEncode == null ){\n        throw new NullPointerException( \"Data to encode was null.\" );\n    }   // end iff\n\n    Base64.OutputStream bos = null;\n    try {\n        bos = new Base64.OutputStream(\n                new java.io.FileOutputStream( filename ), Base64.ENCODE );\n        bos.write( dataToEncode );\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and throw to execute finally{} block\n    }   // end catch: java.io.IOException\n    finally {\n        try{ bos.close(); } catch( Exception e ){}\n    }   // end finally\n\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * Returns one of the _SOMETHING_DECODABET byte arrays depending on\n * the options specified.\n * It's possible, though silly, to specify ORDERED and URL_SAFE\n * in which case one of them will be picked, though there is\n * no guarantee as to which one will be picked.\n */\n", "func_signal": "private final static byte[] getDecodabet( int options )", "code": "{\n    if( (options & URL_SAFE) == URL_SAFE) {\n        return _URL_SAFE_DECODABET;\n    } else if ((options & ORDERED) == ORDERED) {\n        return _ORDERED_DECODABET;\n    } else {\n        return _STANDARD_DECODABET;\n    }\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "/**\n * Constructs a {@link Base64.OutputStream} in\n * either ENCODE or DECODE mode.\n * <p>\n * Valid options:<pre>\n *   ENCODE or DECODE: Encode or Decode as data is read.\n *   DO_BREAK_LINES: don't break lines at 76 characters\n *     (only meaningful when encoding)</i>\n * </pre>\n * <p>\n * Example: <code>new Base64.OutputStream( out, Base64.ENCODE )</code>\n *\n * @param out the <tt>java.io.OutputStream</tt> to which data will be written.\n * @param options Specified options.\n * @see Base64#ENCODE\n * @see Base64#DECODE\n * @see Base64#DO_BREAK_LINES\n * @since 1.3\n */\n", "func_signal": "public OutputStream( java.io.OutputStream out, int options )", "code": "{\n    super( out );\n    this.breakLines   = (options & DO_BREAK_LINES) != 0;\n    this.encode       = (options & ENCODE) != 0;\n    this.bufferLength = encode ? 3 : 4;\n    this.buffer       = new byte[ bufferLength ];\n    this.position     = 0;\n    this.lineLength   = 0;\n    this.suspendEncoding = false;\n    this.b4           = new byte[4];\n    this.options      = options;\n    this.decodabet    = getDecodabet(options);\n}", "path": "src\\com\\spyphone\\Base64.java", "repo_name": "NJFsoft/spyphone-for-android", "stars": 31, "license": "None", "language": "java", "size": 462}
{"docstring": "// input space to hashed space\n", "func_signal": "protected void project(double[] values, double[] gp)", "code": "{\n  double sum = 0.0d;\n  for(int i = 0; i < gp.length; i++) {\n    if (null != stretch) {\n      gp[i] = values[i] / stretch[i];\n    } else {\n      gp[i] = values[i];\t\t\n    }\n    sum += gp[i];\n  }\n  double musum = MU * sum;\n  for(int i = 0; i < gp.length; i++) {\n    gp[i] = (gp[i] / S3 + musum);\n  }\n}", "path": "mahout\\src\\mahout\\lsh\\mahout\\core\\VertexTransitiveHasher.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "// give two ratings.dat files, training and test\n", "func_signal": "private static void trainingTestCompare(String[] args) throws IOException, TasteException", "code": "{\n  GroupLensDataModel glModel = new GroupLensDataModel(new File(args[0])); \n  GroupLensDataModel glModel2 = new GroupLensDataModel(new File(args[1])); \n  DataModel glModelTraining = new SamplingDataModel(glModel, 0.0, 0.7, SamplingDataModel.Distribution.USER); \n  DataModel glModelTest = new SamplingDataModel(glModel2, 0.7, 1.0, SamplingDataModel.Distribution.USER); \n  RecommenderEvaluator bsrv = new OrderBasedRecommenderEvaluator();\n  RunningAverage tracker = new FullRunningAverage();\n\n//    Recommender trainingRecco = doEstimatingSimplexUser(glModelTraining);\n//    Recommender testRecco = doEstimatingSimplexUser(glModelTest);\n//    bsrv.evaluate(testRecco, trainingRecco, SAMPLES, MEANRANK, tracker, \"simplex_training_test\");\n//    System.err.println(\"Training v.s Test score: \" + tracker.getAverage());\n  Recommender trainingRecco = doEstimatingUser(glModelTraining);\n  Recommender testRecco = doEstimatingUser(glModelTest);\n  bsrv.evaluate(testRecco, trainingRecco, SAMPLES, tracker, MEANRANK);\n  System.err.println(\"Training v.s Test score: \" + tracker.getAverage());\n}", "path": "mahout\\test\\src\\org\\apache\\mahout\\cf\\taste\\impl\\model\\CompareRecommendersSubsample.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "// hashed space to input space\n", "func_signal": "@Override\npublic void unhash(int[] hash, double[] values)", "code": "{\n  double sum = 0.0;\n  for(int i = 0; i < hash.length; i++) {\n    sum += hash[i];\n  }\n  sum = sum / (1.0 / S3 + MU * hash.length); \n  for(int i = 0; i < hash.length; i++) {\n    if (null != stretch) {\n      values[i] = S3 * (hash[i] -  MU * sum * stretch[i]);\n    } else {\n      values[i] = S3 * (hash[i] -  MU * sum);\n    }\n  }\n}", "path": "mahout\\src\\mahout\\lsh\\mahout\\core\\VertexTransitiveHasher.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "// give two ratings.dat files, training and test\n", "func_signal": "private static void trainingTestComparePrefs(String[] args) throws IOException, TasteException", "code": "{\n  GroupLensDataModel glModel = new GroupLensDataModel(new File(args[0])); \n  DataModel glModelTraining = new SamplingDataModel(glModel, 0.0, 0.9, SamplingDataModel.Distribution.USER); \n  DataModel glModelTest = glModel; // new SamplingDataModel(glModel, 0.0, 1.1, SamplingDataModel.Mode.USER); \n//    DataModel glModelTraining = new SamplingDataModel(glModel, 0.0, 0.7, SamplingDataModel.Mode.HOLOGRAPHIC); \n//    DataModel glModelTest = new SamplingDataModel(glModel, 0.7, 1.0, SamplingDataModel.Mode.HOLOGRAPHIC); \n  RecommenderEvaluator pbre = new PreferenceBasedRecommenderEvaluator();\n  RunningAverage tracker = new FullRunningAverage();\n\n//    Recommender trainingRecco = doEstimatingSimplexUser(glModelTraining);\n//    Recommender testRecco = doEstimatingSimplexUser(glModelTest);\n//    bsrv.evaluate(testRecco, trainingRecco, SAMPLES, MEANRANK, tracker, \"simplex_training_test\");\n//    System.err.println(\"Training v.s Test score: \" + tracker.getAverage());\n  Recommender trainingRecco = doEstimatingUser(glModelTraining);\n  Recommender testRecco = doEstimatingUser(glModelTest);\n  pbre.evaluate(testRecco, trainingRecco, SAMPLES, tracker, MEANRANK);\n  System.err.println(\"Training v.s Test preference-based score: \" + tracker.getAverage());\n}", "path": "mahout\\test\\src\\org\\apache\\mahout\\cf\\taste\\impl\\model\\CompareRecommendersSubsample.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "/**\n *  Math.pow is clever about integer-valued doubles\n */\n", "func_signal": "@Override\npublic double distance(Vector v1, Vector v2)", "code": "{\n  Vector distVector = v1.minus(v2);\n  double sum = 0.0;\n  Iterator<Element> it = distVector.iterateNonZero();\n  while (it.hasNext()) {\n    Element e = it.next();\n    if (exact)\n      sum += Math.pow(Math.abs(e.get()), exponent);\n    else\n      sum += Approximations.pow(Math.abs(e.get()), exponent);\n  }\n  return Math.pow(sum, 1.0 / exponent);\n}", "path": "extras\\mahout\\src\\org\\apache\\mahout\\common\\distance\\MinkowskiDistanceMeasure.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "//  @Test  \n//  public void testSerialization() throws Exception {\n//    GenericDataModel model = (GenericDataModel) getDataModel();\n//    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n//    ObjectOutputStream out = new ObjectOutputStream(baos);\n//    out.writeObject(model);\n//    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n//    ObjectInputStream in = new ObjectInputStream(bais);\n//    GenericDataModel newModel = (GenericDataModel) in.readObject();\n//    assertEquals(model.getNumItems(), newModel.getNumItems());\n//    assertEquals(model.getNumUsers(), newModel.getNumUsers());\n//    assertEquals(model.getPreferencesFromUser(1L), newModel.getPreferencesFromUser(1L));    \n//    assertEquals(model.getPreferencesForItem(1L), newModel.getPreferencesForItem(1L));\n//    assertEquals(model.getRawUserData(), newModel.getRawUserData());\n//  }\n//  \n//  @Test\n//  public void testRecommend() throws Exception {\n//    UserSimilarity userSimilarity = new PearsonCorrelationSimilarity(model);\n//    UserNeighborhood neighborhood = new NearestNUserNeighborhood(3, userSimilarity, model);\n//    Recommender recommender = new GenericUserBasedRecommender(model, neighborhood, userSimilarity);\n//    int recSize = recommender.recommend(123, 2).size();\n//    assertEquals(1, recSize);\n//    recSize = recommender.recommend(234, 3).size();\n//    assertEquals(0, recSize);\n//    recSize = recommender.recommend(345, 2).size();\n//    assertEquals(1, recSize);\n//    \n//    // Make sure this doesn't throw an exception\n//    model.refresh(null);\n//  }\n", "func_signal": "@Test\n  public void testTranspose() throws Exception", "code": "{\n    PreferenceArray userPrefs = model.getPreferencesFromUser(456);\n    assertNotNull(\"user prefs are null and it shouldn't be\", userPrefs);\n    PreferenceArray pref = model.getPreferencesForItem(654);\n    assertNotNull(\"pref is null and it shouldn't be\", pref);\n    assertEquals(\"pref Size: \" + pref.length() + \" is not: \" + 4, 4, pref.length());\n  }", "path": "extras\\mahout\\test\\java\\org\\apache\\mahout\\cf\\taste\\impl\\model\\VectorDataModelTest.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n  double[] big = new double[HUGE];\n  // prewarm caches\n  for(int i = 0; i < HUGE; i++)\n    big[i] = i;\n  for(int i = 0; i < HUGE; i++)\n    count += big[i];\n  Random rnd = new Random(0);\n  Random mm = new MurmurHashRandom(0);\n  Random mersenne = RandomUtils.getRandom(0);\n  check(\"JDK\", big, rnd);\n  check(\"MurmurHash\", big, mm);\n  check(\"MersenneTwister\", big, mersenne);\n}", "path": "extras\\mahout\\test\\java\\org\\apache\\mahout\\cf\\taste\\impl\\common\\MurmurBench.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "// sorts from highest to lowest\n", "func_signal": "@Override\npublic int compare(Pair a, Pair b)", "code": "{\n  if (a.value < b.value)\n    return 1;\n  else if (a.value > b.value)\n    return -1;\n  else\n    return 0;\n}", "path": "mahout\\src\\mahout\\lsh\\mahout\\core\\Hasher.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "// return indexes of values sorted in reverse\n", "func_signal": "private List<Integer> sort_as_perm(double[] values)", "code": "{\n  List<Pair> pairs = new ArrayList<Pair>();\n  int dimensions = values.length;\n  int index = 0;\n  for(int i = 0; i < dimensions; i++) {\n    Pair p = new Pair(i, values[i]);\n    pairs.add(p);\n    index++;\n  }\n  // sort by value highest to lowest, preserving order of indexes\n  Collections.sort(pairs, sorter);\n  List<Integer> indexes = new ArrayList<Integer>();\n  for(Pair p: pairs) {\n    indexes.add(new Integer(p.index));\n  }\n  return indexes;\n}", "path": "mahout\\src\\mahout\\lsh\\mahout\\core\\Hasher.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "/*\n * Check run with fixed random sequence\n */\n", "func_signal": "@Test\npublic void testBasics()", "code": "{\n  Random rnd = RandomUtils.getRandom();\n  Sampler<Integer> samp = new ReservoirSampler<Integer>(10, rnd);\n  samp.addSample(1);\n  samp.addSample(2);\n  samp.addSample(3);\n  samp.addSample(3);\n  samp.addSample(4);\n  samp.addSample(5);\n  Iterator<Integer> sit = samp.getSamples(false);\n  int count = 0;\n  while(sit.hasNext()) {\n    Integer sample = sit.next();\n    assertTrue(\"Wrong samples come out\", sample <= 5);\n    count++;\n  }\n  sit = samp.getSamples(true);\n  count = 0;\n  while(sit.hasNext()) {\n    Integer sample = sit.next();\n    assertTrue(\"Wrong samples come out\", sample <= 5);\n    count++;\n  }\n  sit = samp.getSamples(true);\n  assertFalse(\"All samples should be flushed\", sit.hasNext());\n}", "path": "extras\\mahout\\test\\java\\org\\apache\\mahout\\math\\stats\\TestReservoirSampler.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "/*\n * Several runs with different random numbers.\n */\n", "func_signal": "@Test\npublic void testMultiple()", "code": "{\n  int N = 1000;\n  int SIZE = 200;\n  Random rnd = RandomUtils.getRandom();\n  for(int x = 0; x < 100; x++) {\n    Sampler<Integer> samp = fillUniqueSamples(N, SIZE, rnd);\n    Iterator<Integer> sit = samp.getSamples(true);\n    int count = 0;\n    int sum = 0;\n    int sizeSum = 0;\n    while(sit.hasNext()) {\n      Integer sample = sit.next();\n      sum += sample;\n      count++;\n      sizeSum += count;\n    }\n//      System.out.println(\"pass: \" + x + \", sum: \" + sum);\n    assertTrue(\"pass: \" + x + \", reservoir sum is far too small\", sum >= sizeSum);\n    assertTrue(\"pass: \" + x + \", reservoir sum is far too large\", sum <= 26000);\n  }\n}", "path": "extras\\mahout\\test\\java\\org\\apache\\mahout\\math\\stats\\TestReservoirSampler.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "// input space to hashed space\n", "func_signal": "protected void project(double[] values, double[] gp, double factor)", "code": "{\n  double musum = MU * factor;\n  for(int i = 0; i < gp.length; i++) {\n    gp[i] = ((values[i] / gridsize) / S3 + musum);\n  }\n}", "path": "mahout\\src\\mahout\\org\\apache\\mahout\\math\\simplex\\VertexTransitiveHasher.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "// hashed space to input space\n", "func_signal": "@Override\npublic void unhashDense(int[] hash, double[] values, Double factor)", "code": "{\n  double sum = factor / (1.0 / S3 + MU * hash.length); \n  for(int i = 0; i < hash.length; i++) {\n    values[i] = S3 * (hash[i] -  MU * sum * gridsize);\n  }\n}", "path": "mahout\\src\\mahout\\org\\apache\\mahout\\math\\simplex\\VertexTransitiveHasher.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "//  private static VectorDataModel doGenericSemanticV(DataModel dataModel) throws TasteException {\n//    int dimensions = 2;\n//    SemanticVectorFactory svf = new SemanticVectorFactory(dataModel, dimensions);\n//    DistanceMeasure measure = new EuclideanDistanceMeasure();\n//    Map<Long,Vector> itemVecs = new HashMap<Long,Vector>();\n//    VectorDataModel vdm = new VectorDataModel(dimensions, measure);\n//    \n//    int minimum = 5;\n//    LongPrimitiveIterator itemIDs = dataModel.getItemIDs();\n//    while (itemIDs.hasNext()) {\n//      Long itemID = itemIDs.next();\n//      Vector itemV = svf.projectItemDense(itemID, minimum);\n//      itemVecs.put(itemID, itemV);\n//    }\n//    \n//    LongPrimitiveIterator userIDs = dataModel.getUserIDs();\n//    while (userIDs.hasNext()) {\n//      Long userID = userIDs.next();\n//      Vector userV = svf.getRandomUserVector(userID);\n//      PreferenceArray pa = dataModel.getPreferencesFromUser(userID);\n//      Iterator<Preference> prefiter = pa.iterator();\n//      while(prefiter.hasNext()) {\n//        Preference pref = prefiter.next();\n//        long itemID = pref.getItemID();\n//        Vector itemV = itemVecs.get(itemID);\n//        vdm.addUser(userID, userV);  \n//        vdm.addItem(itemID, itemV);  \n//      }\n//    }\n//    \n//    return vdm;\n//  }\n//  \n", "func_signal": "private static Recommender doEstimatingUser(DataModel bcModel) throws TasteException", "code": "{\n    //    UserSimilarity similarity = new CachingUserSimilarity(new EuclideanDistanceSimilarity(bcModel), bcModel);\n    UserSimilarity similarity = new EuclideanDistanceSimilarity(bcModel);\n    UserNeighborhood neighborhood = new NearestNUserNeighborhood(10, 0.2, similarity, bcModel, 0.2);\n    return new EstimatingUserBasedRecommender(bcModel, neighborhood, similarity);\n  }", "path": "extras\\mahout\\test\\java\\org\\apache\\mahout\\cf\\taste\\impl\\eval\\RegressOrderBasedRecommender.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "// This is really slow, but try it if you like\n", "func_signal": "private static Recommender doKNN_LL_NegQO_Recco(DataModel model)", "code": "{\n  Recommender recco;\n  ItemSimilarity similarity = new LogLikelihoodSimilarity(model);\n  Optimizer optimizer = new NonNegativeQuadraticOptimizer();\n  recco = new EstimatingKnnItemBasedRecommender(model, similarity, optimizer, 6040);\n  return recco;\n}", "path": "extras\\mahout\\test\\java\\org\\apache\\mahout\\cf\\taste\\impl\\eval\\RegressOrderBasedRecommender.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "// This is really slow, but try it if you like\n", "func_signal": "private static Recommender doKNN_LL_NegQO_Recco(DataModel model)", "code": "{\n  Recommender recco;\n  ItemSimilarity similarity = new LogLikelihoodSimilarity(model);\n  Optimizer optimizer = new NonNegativeQuadraticOptimizer();\n  recco = new EstimatingKnnItemBasedRecommender(model, similarity, optimizer, 6040);\n  return recco;\n}", "path": "mahout\\test\\src\\org\\apache\\mahout\\cf\\taste\\impl\\model\\CompareRecommendersSubsample.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "// give two ratings.dat files, training and test\n", "func_signal": "private static void trainingTestCompare(String[] args) throws IOException, TasteException", "code": "{\n  GroupLensDataModel glModel = new GroupLensDataModel(new File(args[0])); \n  DataModel glModelTraining = new SamplingDataModel(glModel, 0.0, 0.8, Distribution.USER); \n  DataModel glModelTest = new SamplingDataModel(glModel, 0.6, 1.0, Distribution.USER); \n  OrderBasedRecommenderEvaluator obre;\n  RunningAverage tracker = new FullRunningAverage();\n  \n  //    Recommender trainingRecco = doEstimatingSimplexUser(glModelTraining);\n  //    Recommender testRecco = doEstimatingSimplexUser(glModelTest);\n  Recommender trainingRecco = doEstimatingUser(glModelTraining);\n  Recommender testRecco = doEstimatingUser(glModelTest);\n  double delta = obre.evaluate(trainingRecco, testRecco);\n  System.err.println(\"Training v.s Test score: \" + delta);\n}", "path": "extras\\mahout\\test\\java\\org\\apache\\mahout\\cf\\taste\\impl\\eval\\RegressOrderBasedRecommender.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "/*\n * Check run with fixed random sequence\n */\n", "func_signal": "@Test\npublic void testDeterministic()", "code": "{\n  int N = 1000;\n  int SIZE = 200;\n  Random rnd = RandomUtils.getRandom();\n  Sampler<Integer> samp = fillUniqueSamples(N, SIZE, rnd);\n  Iterator<Integer> sit = samp.getSamples(true);\n  int count = 0;\n  int sum = 0;\n  int sizeSum = 0;\n  Set<Integer> intSet = new HashSet<Integer>();\n  while(sit.hasNext()) {\n    Integer sample = sit.next();\n    sum += sample;\n    count++;\n    sizeSum += count;\n    intSet.add(sample);\n  }\n  assertTrue(\"Samples required: \" + SIZE, count == SIZE);\n  assertEquals(\"reservoir does not save correct values\", 24234, sum);\n  assertTrue(\"reservoir samples must all be unique\", intSet.size() == SIZE);\n}", "path": "extras\\mahout\\test\\java\\org\\apache\\mahout\\math\\stats\\TestReservoirSampler.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "// input space to hashed space\n", "func_signal": "@Override\npublic Double getFactor(double[] values)", "code": "{\n  double sum = 0.0d;\n  for(int i = 0; i < values.length; i++) {\n    double x = values[i] / gridsize;   \n    sum += x;\n  }\n  return sum;\n}", "path": "mahout\\src\\mahout\\org\\apache\\mahout\\math\\simplex\\VertexTransitiveHasher.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "/*\n * Recommender generators\n * These are all from examples in the web site and the book. Given that none of them \n * generate similar recommendations, I'd say they are suspect.\n */\n", "func_signal": "private static Recommender doEstimatingSimplexUser(DataModel bcModel) throws TasteException", "code": "{\n  int DIMS = 100;\n//    UserSimilarity similarity = new CachingUserSimilarity(new EuclideanDistanceSimilarity(bcModel), bcModel);\n  SimplexSpace userSpace = getSpace(DIMS);\n  SimplexSpace userSpaceLOD = getSpace(DIMS);\n//    userSpace.doUnhash = false;\n//    userSpaceLOD.doUnhash = false;\n  userSpaceLOD.setLOD(3);\n  addUserSimplices(userSpace, userSpaceLOD, bcModel);\n  SimplexSpace itemSpace = getSpace(DIMS);\n//    itemSpace.doUnhash = false;\n  addItemSimplices(itemSpace, bcModel);\n  UserSimilarity similarity = new SimplexSimilarity(userSpace, itemSpace, null);\n  UserNeighborhood neighborhood = new SimplexUserNeighborhood(userSpace, userSpaceLOD);\n  sun = (SimplexUserNeighborhood) neighborhood;\n  return new EstimatingUserBasedRecommender(bcModel, neighborhood, similarity);\n}", "path": "mahout\\test\\src\\org\\apache\\mahout\\cf\\taste\\impl\\model\\CompareRecommendersSubsample.java", "repo_name": "LanceNorskog/LSH-Hadoop", "stars": 28, "license": "None", "language": "java", "size": 52464}
{"docstring": "/**\n * From a {@link CDataFile} construct a casper dataset file definition that\n * returns a int array.\n * \n * @param cDataFile\n *            dataset file definition\n * @param sourceColumn\n *            The dataset column of {@code cDataFile} that contains ints.\n */\n", "func_signal": "public CDataFileIntArray(CDataFile cDataFile, String sourceColumn)", "code": "{\n\tthis.cDataFile = cDataFile;\n\tthis.sourceColumn = sourceColumn;\n}", "path": "casperdatasets-ext\\src\\main\\java\\net\\casper\\ext\\file\\def\\CDataFileIntArray.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * Construct a new CDataCacheContainer from a builder.\n * \n * @param builder builder\n * @return a CDataCacheContainer built from {@code builder}.\n * @throws CDataGridException if problem creating container. \n */\n", "func_signal": "public CDataCacheContainer(CBuilder builder) \n\tthrows CDataGridException", "code": "{\n\n\ttry {\n\t\t\n\t\tbuilder.open();\n\n\t\tinit(builder.getName(), new CRowMetaData(\n\t\t\t\tbuilder.getColumnNames(), builder.getColumnTypes(),\n\t\t\t\tbuilder.getPrimaryKeyColumns()), builder.getConcreteMap());\n\n\t\tObject[] nextRow = null;\n\t\t\t\n\t\tList cRows = new LinkedList();\n\t\t\n\t\twhile ((nextRow = builder.readRow()) != null) {\n\t\t\t// Create a new CDataRow from the read in row\n\t\t\t// and add it to the container\n\t\t\tCDataRow cRow = new CDataRow(nextRow);\n\t\t\tcRows.add(cRow);\n\t\t}\n\t\t\n\t\t// Convert list to array of CDataRow objects\n\t\tCDataRow[] cRowsArray = new CDataRow[cRows.size()];\n\t\tcRows.toArray(cRowsArray);\n\t\t\n\t\t// Add all rows at once (more efficient than \n\t\t// one by one) and update indices.\n\t\taddData(cRowsArray);\n\n\t\tbuilder.close();\n\t\t\n\t} catch (IOException e) {\n\t\tbuilder.close();\n\t\tthrow new CDataGridException(\"Error building container\", e);\n\t}\n}", "path": "casperdatasets\\src\\main\\java\\net\\casper\\data\\model\\CDataCacheContainer.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * Check primary keys, ie: if primary keys are specified make sure they\n * exist in in the table header.\n * \n * @param specifiedPKs\n *            primary keys expected\n * @param columnsAvailable\n *            columns read in the table\n * @return clone of specifiedPKs if checks pass\n * @throws IOException\n *             if problem with primary keys\n */\n", "func_signal": "private String[] checkPrimaryKeys(String[] specifiedPKs,\n\t\tString[] columnsAvailable) throws IOException", "code": "{\n\n\tif (specifiedPKs == null) {\n\t\treturn null;\n\t}\n\n\t// check the primary key columns exist in the table\n\tString missingPK = ArrayUtil.firstStringComplement(columnsAvailable,\n\t\t\tspecifiedPKs, false);\n\tif (missingPK != null) {\n\t\tthrow new IOException(\"Primary key column \\\"\" + missingPK\n\t\t\t\t+ \"\\\" does not exist/not read from \" + tblreader.getName());\n\n\t}\n\n\treturn specifiedPKs.clone();\n\n}", "path": "casperdatasets-io\\src\\main\\java\\net\\casper\\io\\CBuildFromTableReader.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * Convenience method to add a single row of data. After calling this, particularly \n * if called repeatedly, call {@link #updateIndices()}.\n *  \n * @param row raw data row\n * @throws CDataGridException if problem adding the row \n */\n", "func_signal": "public void addSingleRow(Object[] oRow) throws CDataGridException", "code": "{\n\tCDataRow cRow = new CDataRow();\n\tcRow.setRawData(oRow);\n\taddData(new CDataRow[] { cRow });\n}", "path": "casperdatasets\\src\\main\\java\\net\\casper\\data\\model\\CDataCacheContainer.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n *\tThis method is called after data has been added or removed from the\n *\tcache.  This method effectively rebuilds all configured indices in \n *\tthe cache container.\n *\n *\t@throws CDataGridException \n */\n", "func_signal": "public void updateIndices()\n\tthrows CDataGridException", "code": "{\n\t//\tNo need to re-build indices \n\tif (indexMap == null || indexMap.size() < 1)\n\t\treturn;\n\n\t//\tIterate through all indices, perform full re-build. \n\tCDataRow[] allRows = getAllRows();\n\tfor (Iterator iter = indexMap.keySet().iterator(); iter.hasNext(); ) {\n\t\tCDataCacheIndex index = (CDataCacheIndex) iter.next();\n\t\tindex.update(allRows);\n\t}\n\t\n\t// \tSystem.out.println(\"CDataCacheContainer :: Indices not implemented for now...\");\n}", "path": "casperdatasets\\src\\main\\java\\net\\casper\\data\\model\\CDataCacheContainer.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * Determine narrowest type for each column in the rowset.\n * \n * @param rowset\n *            rowset\n * @return narrowest type for column\n * @throws CDataGridException\n *             if problem reading rowset.\n */\n", "func_signal": "private Class<?>[] calcNarrowColTypes(CDataRowSet rowset)\n\t\tthrows CDataGridException", "code": "{\n\n\tCRowMetaData dsmeta = rowset.getMetaDefinition();\n\tint cols = dsmeta.getColumnCount();\n\n\tClass<?>[] narrowType = new Class[cols];\n\tint col = 0;\n\n\tString[] columnNames = dsmeta.getColumnNames();\n\tfor (String columnName : columnNames) {\n\n\t\tObject[] columnValues = rowset.getColumnValues(columnName);\n\t\tnarrowType[col++] = NarrowUtil.calcNarrowestType(columnValues,\n\t\t\t\tconvertMissing);\n\n\t}\n\n\treturn narrowType;\n}", "path": "casperdatasets-ext\\src\\main\\java\\net\\casper\\ext\\narrow\\CBuildNarrowed.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * Return the array of doubles loaded from the column.\n * \n * @return double array\n */\n", "func_signal": "public double[] getDoubleArray()", "code": "{\n\tif (array == null) {\n\t\tthrow new IllegalStateException(\"Array not been loaded. \"\n\t\t\t\t+ \"Has loadDataset(file) been called?\");\n\t}\n\n\treturn array;\n}", "path": "casperdatasets-ext\\src\\main\\java\\net\\casper\\ext\\file\\def\\CDataFileDoubleArray.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * If set, then missing integers and doubles will be returned as\n * {@link org.omancode.rmt.cellreader.CellReaders#MISSING_VALUE_INTEGER} or\n * {@link org.omancode.rmt.cellreader.CellReaders#MISSING_VALUE_DOUBLE}\n * instead.\n * \n * @param convertMissing\n *            true to convert missing ints/doubles\n * @return this\n */\n", "func_signal": "public CBuildNarrowed setConvertMissing(boolean convertMissing)", "code": "{\n\tthis.convertMissing = convertMissing;\n\treturn this;\n}", "path": "casperdatasets-ext\\src\\main\\java\\net\\casper\\ext\\narrow\\CBuildNarrowed.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * Creates a new {@link CDataCacheContainer} with rows in order of insertion.\n * \n * @throws CDataGridException if problem creating container \n */\n", "func_signal": "public static CDataCacheContainer newInsertionOrdered(String cacheName,\n\t\tString columnNames, Class[] columnTypes) throws CDataGridException", "code": "{\n\t\n\n\t// create a container without a primary key\n\t// this will mean the primary key is the identity PK\n\tCRowMetaData metaDef =\n\t\tnew CRowMetaData(columnNames.split(\",\"), columnTypes,\n\t\t\t\tnull);\n\t\n\t// use a LinkedHashMap so that the primary key (ie: the identity) is ordered\n\treturn\n\t\t\tnew CDataCacheContainer(cacheName, metaDef, new LinkedHashMap());\n\n}", "path": "casperdatasets\\src\\main\\java\\net\\casper\\data\\model\\CDataCacheContainer.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * Return the array of ints loaded from the column.\n * \n * @return int array\n */\n", "func_signal": "public int[] getIntArray()", "code": "{\n\tif (array == null) {\n\t\tthrow new IllegalStateException(\"Array not been loaded. \"\n\t\t\t\t+ \"Has loadDataset(file) been called?\");\n\t}\n\n\treturn array;\n}", "path": "casperdatasets-ext\\src\\main\\java\\net\\casper\\ext\\file\\def\\CDataFileIntArray.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * Create narrowed delimited file builder using default delimiter settings.\n * Container name is the file name and will read column header from the\n * file. Missing values are converted during narrowing.\n * \n * @param file\n *            file\n * @param primaryKeys\n *            {@code null} if no primary key otherwise the column names of\n *            primary keys, separated by comma, eg: \"firstname,lastname\" NB:\n *            do not include a space after the comma.\n * @throws IOException\n *             if IO problem reading file header.\n */\n", "func_signal": "public CBuildNarrowedFile(File file, String primaryKeys) throws IOException", "code": "{\n\tthis(file, null, null, (primaryKeys == null) ? null : primaryKeys\n\t\t\t.split(\",\"));\n}", "path": "casperdatasets-ext\\src\\main\\java\\net\\casper\\ext\\narrow\\CBuildNarrowedFile.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * Create new filter \n * \n * @param columnName\n * @param columnIndex\n * @throws CDataGridException\n */\n", "func_signal": "public CDataFilter(String columnName)\n\tthrows CDataGridException", "code": "{\n\t//\tCheck / validate values \n\tif (columnName == null) \n\t\tthrow new CDataGridException(\"Column name to match upon cannot be null.\");\n\n\tthis.columnName = columnName;\n}", "path": "casperdatasets\\src\\main\\java\\net\\casper\\data\\model\\filters\\CDataFilter.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * Returns CDataCacheIndex object with a given column name \n * \n */\n", "func_signal": "public CDataCacheIndex getCacheIndexByColumnName(String columnName)", "code": "{\n\tif (indexMap == null)\n\t\treturn null;\n\treturn (CDataCacheIndex) indexMap.get(columnName);\n}", "path": "casperdatasets\\src\\main\\java\\net\\casper\\data\\model\\CDataCacheContainer.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * \tMerges another data container into the current data container.  \n * \tThere are the following limitations to the merge operation: \n * \n * \t(1) Both data containers must have the same primary key\n * \t(2) Only the data columns that exist in both the destination container (current) and\n * \t\tthe source container (\"mergeFrom\") will exist in the \n * \n * \t@param mergeFrom - CDataCacheContainer to merge into current container\n * \t@param joinColumns - columns to join by\n * \t@return number rows merged \n * \t@throws CDataGridException\n */\n", "func_signal": "public int merge(CDataCacheContainer mergeFrom, String[] joinColumns)\n\tthrows CDataGridException", "code": "{\n\tif (mergeFrom == null)\n\t\tthrow new CDataGridException(\"Data container to merge cannot be null.\");\n\t\n\tCDataRowSet fromRowSet = mergeFrom.getAll();\n\treturn merge(fromRowSet, joinColumns);\n}", "path": "casperdatasets\\src\\main\\java\\net\\casper\\data\\model\\CDataCacheContainer.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * Export this CDataCacheContainer via an exporter.\n * \n * @param exporter exporter\n * @throws CDataGridException if problem exporting container\n */\n", "func_signal": "public Object export(\n\t\tCExporter exporter) throws CDataGridException", "code": "{\n\t\n\ttry {\n\t\tCRowMetaData meta = getMetaDefinition();\n\t\t\n\t\texporter.setName(getCacheName());\n\t\texporter.setColumnNames(meta.getColumnNames());\n\t\texporter.setColumnTypes(meta.getColumnTypes());\n\t\texporter.setPrimaryKeyColumns(meta.getPrimaryKeyColumns());\n\t\texporter.open();\n\t\t\n\t\tCDataRowSet rowset = getAll();\n\t\t\n\t\twhile (rowset.next()) {\n\t\t\tCDataRow cRow = rowset.getCurrentRow();\n\t\t\texporter.writeRow(cRow.getRawData());\n\t\t}\n\n\t} catch (IOException e) {\n\t\texporter.close();\n\t\tthrow new CDataGridException(\"Error exporting container: \" + e.getMessage(), e);\n\t}\n\n\treturn exporter.close();\n\n}", "path": "casperdatasets\\src\\main\\java\\net\\casper\\data\\model\\CDataCacheContainer.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n *\tReturns a collection of data objects.  \n *\tThis overloaded method makes it easier for a user to \n *\tperform a multi-value match using equality-based matching.  This method merely constructs\n *\tan equality-based filter into a filter clause to perform the general search on records in this cache. \n *\n *\t@param columnName - column to perform match on \n *\t@param values - values to match \n *\t@param sortColumnNames - names of columns to sort data by \n *\t@param ascending - true, to return in ascending order; false to reverse\n *\t@return CDataRowSet - rowset of all matching rows \n *\t@throws CDataGridException \n */\n", "func_signal": "public CDataRowSet get(String columnName, Object[] values, String[] sortColumnNames, boolean ascending)\n\tthrows CDataGridException", "code": "{\n\t//\tConstruct a filter clause, based on equality values; \n\tEqualsFilter filter = new EqualsFilter(columnName, values);\n\tCDataFilterClause filterClause = new CDataFilterClause();\n\tfilterClause.addFilter(filter);\n\t\n\t//\tReturn matching rowset\n\treturn get(filterClause, sortColumnNames, ascending);\n}", "path": "casperdatasets\\src\\main\\java\\net\\casper\\data\\model\\CDataCacheContainer.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * Builds a data cache from the given Collection. Introspection is used to\n * determine the bean properties (i.e.: getter methods) that are exposed,\n * and each one becomes a column in the data cache.\n * \n * @param name\n *            the name of the data cache to create.\n * @param source\n *            the Java collection to convert.\n * @param stopClass\n *            Columns are created for all getter methods that are defined by\n *            {@code stopClass}'s subclasses. {@code stopClass}'s getter\n *            methods and superclass getter methods are not converted to\n *            columns in the dataframe.\n * @param primaryKeyPropNames\n *            property names of the primary key(s), separated by commas, eg:\n *            \"firstname,lastname\" (NB: do not include a space after the\n *            comma), or {@code null} if no primary key.\n */\n", "func_signal": "public CBuildFromCollection(String name, Collection<?> source,\n\t\tClass<?> stopClass, String primaryKeyPropNames)", "code": "{\n\tthis.name = name;\n\tthis.source = source;\n\tthis.stopClass = stopClass;\n\n\tthis.primaryKeyPropNames = (primaryKeyPropNames == null) ? null\n\t\t\t: primaryKeyPropNames.split(\",\");\n}", "path": "casperdatasets-io\\src\\main\\java\\net\\casper\\io\\beans\\CBuildFromCollection.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * Checks if column has been initialized or not \n * @throws CDataGridException\n */\n", "func_signal": "public void checkColumnIndexInitialized() \n\tthrows CDataGridException", "code": "{\n\t//\tOnly run this if column index has not been initialized yet \n\tif (columnIndex < 0)\n\t{\n\t\tif (columnName == null)\n\t\t\tthrow new CDataGridException(\"Column name not properly initialized\");\n\t\t\n\t\t//\tMeta definition has not been set: therefore, \n\t\tif (metaDefinition == null)\n\t\t\tthrow new CDataGridException(\"Meta definition not initialized\");\n\t\t\n\t\t//\tIf column doesn't exist, the filter will throw an exception\n\t\tcolumnIndex = metaDefinition.getColumnIndex(columnName);\n\t}\n}", "path": "casperdatasets\\src\\main\\java\\net\\casper\\data\\model\\filters\\CDataFilter.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * Constructor for narrowing casper rowset. Constructs a new casper cache\n * from the (non thread-safe) rowset.\n * \n * @param cacheName\n *            name of narrowed cache\n * @param source\n *            casper rowset\n * @throws CDataGridException\n *             if problems reading source.\n */\n", "func_signal": "public CBuildNarrowed(String cacheName, CDataRowSet source)\n\t\tthrows CDataGridException", "code": "{\n\n\t// build new container from rowset\n\tCDataCacheContainer newContainer = new CDataCacheContainer(cacheName,\n\t\t\tsource.getMetaDefinition());\n\tnewContainer.addData(source.getAllRows());\n\tthis.container = newContainer;\n}", "path": "casperdatasets-ext\\src\\main\\java\\net\\casper\\ext\\narrow\\CBuildNarrowed.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/**\n * Returns all data rows in unsorted raw format. \n * @return\n */\n", "func_signal": "public CDataRow[] getAllRows()", "code": "{\n\tCollection values = dataRowMap.values();\n\tCDataRow[] rows = new CDataRow[values.size()];\n\tvalues.toArray(rows);\n\treturn rows; \n}", "path": "casperdatasets\\src\\main\\java\\net\\casper\\data\\model\\CDataCacheContainer.java", "repo_name": "casperds/casperdatasets", "stars": 18, "license": "None", "language": "java", "size": 8399}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void writeShort(int value)", "code": "{\n    int writeAt = cursor;\n    int end = writeAt + 2;\n\n    if (stretchy) {\n        ensureCapacity(end);\n    } else if (end > data.length) {\n        throwBounds();\n        return;\n    }\n\n    data[writeAt] = (byte) value;\n    data[writeAt + 1] = (byte) (value >> 8);\n    cursor = end;\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArrayOutput.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/**\n * Indicates that this instance should keep annotations. This method may\n * be called only once per instance, and only before any data has been\n * written to the it.\n *\n * @param annotationWidth &gt;= 40; the desired maximum annotation width\n * @param verbose whether or not to indicate verbose annotations\n */\n", "func_signal": "public void enableAnnotations(int annotationWidth, boolean verbose)", "code": "{\n    if ((annotations != null) || (cursor != 0)) {\n        throw new RuntimeException(\"cannot enable annotations\");\n    }\n\n    if (annotationWidth < 40) {\n        throw new IllegalArgumentException(\"annotationWidth < 40\");\n    }\n\n    int hexCols = (((annotationWidth - 7) / 15) + 1) & ~1;\n    if (hexCols < 6) {\n        hexCols = 6;\n    } else if (hexCols > 10) {\n        hexCols = 10;\n    }\n\n    this.annotations = new ArrayList<Annotation>(1000);\n    this.annotationWidth = annotationWidth;\n    this.hexCols = hexCols;\n    this.verbose = verbose;\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArrayOutput.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void write(ByteArray bytes)", "code": "{\n    int blen = bytes.size();\n    int writeAt = cursor;\n    int end = writeAt + blen;\n\n    if (stretchy) {\n        ensureCapacity(end);\n    } else if (end > data.length) {\n        throwBounds();\n        return;\n    }\n\n    bytes.getBytes(data, writeAt);\n    cursor = end;\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArrayOutput.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public int writeSignedLeb128(int value)", "code": "{\n    int remaining = value >> 7;\n    int count = 0;\n    boolean hasMore = true;\n    int end = ((value & Integer.MIN_VALUE) == 0) ? 0 : -1;\n\n    while (hasMore) {\n        hasMore = (remaining != end)\n            || ((remaining & 1) != ((value >> 6) & 1));\n\n        writeByte((value & 0x7f) | (hasMore ? 0x80 : 0));\n        value = remaining;\n        remaining >>= 7;\n        count++;\n    }\n\n    return count;\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArrayOutput.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/**\n * Gets the <code>unsigned byte</code> value at a particular offset.\n *\n * @param off <code>&gt;= 0, &lt; size(); offset to fetch\n * @return <code>unsigned byte</code> at that offset\n */\n", "func_signal": "public int getUnsignedByte(int off)", "code": "{\n    checkOffsets(off, off + 1);\n    return getUnsignedByte0(off);\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArray.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/**\n * Internal constructor.\n *\n * @param data non-null; data array to use for output\n * @param stretchy whether the instance is to be stretchy\n */\n", "func_signal": "private ByteArrayOutput(byte[] data, boolean stretchy)", "code": "{\n    if (data == null) {\n        throw new NullPointerException(\"data == null\");\n    }\n\n    this.stretchy = stretchy;\n    this.data = data;\n    this.cursor = 0;\n    this.verbose = false;\n    this.annotations = null;\n    this.annotationWidth = 0;\n    this.hexCols = 0;\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArrayOutput.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/**\n * Sets the end as given, but only if the instance is unclosed;\n * otherwise, do nothing.\n *\n * @param end &gt;= start; the end\n */\n", "func_signal": "public void setEndIfUnset(int end)", "code": "{\n    if (this.end == Integer.MAX_VALUE) {\n        this.end = end;\n    }\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArrayOutput.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/**\n * Constructs and returns a new <code>byte[]</code> that contains\n * the written contents exactly (that is, with no extra unwritten\n * bytes at the end).\n *\n * @see #getArray\n *\n * @return non-null; an appropriately-constructed array\n */\n", "func_signal": "public byte[] toByteArray()", "code": "{\n    byte[] result = new byte[cursor];\n    System.arraycopy(data, 0, result, 0, cursor);\n    return result;\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArrayOutput.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public int writeUnsignedLeb128(int value)", "code": "{\n    int remaining = value >>> 7;\n    int count = 0;\n\n    while (remaining != 0) {\n        writeByte((value & 0x7f) | 0x80);\n        value = remaining;\n        remaining >>>= 7;\n        count++;\n    }\n\n    writeByte(value & 0x7f);\n    return count + 1;\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArrayOutput.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void endAnnotation()", "code": "{\n    if (annotations == null) {\n        return;\n    }\n\n    int sz = annotations.size();\n\n    if (sz != 0) {\n        annotations.get(sz - 1).setEndIfUnset(cursor);\n    }\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArrayOutput.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/**\n * Gets the <code>unsigned short</code> value at a particular offset.\n *\n * @param off <code>&gt;= 0, &lt; (size() - 1); offset to fetch\n * @return <code>unsigned short</code> at that offset\n */\n", "func_signal": "public int getUnsignedShort(int off)", "code": "{\n    checkOffsets(off, off + 2);\n    return (getUnsignedByte0(off) << 8) | getUnsignedByte0(off + 1);\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArray.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/**\n * Copies the contents of this instance into the given raw\n * <code>byte[]</code> at the given offset. The given array must be\n * large enough.\n *\n * @param out non-null; array to hold the output\n * @param offset non-null; index into <code>out</code> for the first\n * byte of output\n */\n", "func_signal": "public void getBytes(byte[] out, int offset)", "code": "{\n    if ((out.length - offset) < size) {\n        throw new IndexOutOfBoundsException(\"(out.length - offset) < \" +\n                                            \"size()\");\n    }\n\n    System.arraycopy(bytes, start, out, offset, size);\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArray.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/**\n * Constructs an instance.\n *\n * @param start &gt;= 0; start of annotated range\n * @param end &gt;= start; end of annotated range (exclusive) or\n * <code>Integer.MAX_VALUE</code> if unclosed\n * @param text non-null; annotation text\n */\n", "func_signal": "public Annotation(int start, int end, String text)", "code": "{\n    this.start = start;\n    this.end = end;\n    this.text = text;\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArrayOutput.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void annotate(int amt, String msg)", "code": "{\n    if (annotations == null) {\n        return;\n    }\n\n    endAnnotation();\n\n    int asz = annotations.size();\n    int lastEnd = (asz == 0) ? 0 : annotations.get(asz - 1).getEnd();\n    int startAt;\n\n    if (lastEnd <= cursor) {\n        startAt = cursor;\n    } else {\n        startAt = lastEnd;\n    }\n\n    annotations.add(new Annotation(startAt, startAt + amt, msg));\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArrayOutput.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void assertCursor(int expectedCursor)", "code": "{\n    if (cursor != expectedCursor) {\n        throw new ExceptionWithContext(\"expected cursor \" +\n                expectedCursor + \"; actual value: \" + cursor);\n    }\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArrayOutput.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void writeInt(int value)", "code": "{\n    int writeAt = cursor;\n    int end = writeAt + 4;\n\n    if (stretchy) {\n        ensureCapacity(end);\n    } else if (end > data.length) {\n        throwBounds();\n        return;\n    }\n\n    data[writeAt] = (byte) value;\n    data[writeAt + 1] = (byte) (value >> 8);\n    data[writeAt + 2] = (byte) (value >> 16);\n    data[writeAt + 3] = (byte) (value >> 24);\n    cursor = end;\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArrayOutput.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void writeZeroes(int count)", "code": "{\n    if (count < 0) {\n        throw new IllegalArgumentException(\"count < 0\");\n    }\n\n    int end = cursor + count;\n\n    if (stretchy) {\n        ensureCapacity(end);\n    } else if (end > data.length) {\n        throwBounds();\n        return;\n    }\n\n    /*\n     * There is no need to actually write zeroes, since the array is\n     * already preinitialized with zeroes.\n     */\n\n    cursor = end;\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArrayOutput.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/**\n * Returns the offset into the given array represented by the given\n * offset into this instance.\n *\n * @param offset offset into this instance\n * @param bytes non-null; (alleged) underlying array\n * @return corresponding offset into <code>bytes</code>\n * @throws IllegalArgumentException thrown if <code>bytes</code> is\n * not the underlying array of this instance\n */\n", "func_signal": "public int underlyingOffset(int offset, byte[] bytes)", "code": "{\n    if (bytes != this.bytes) {\n        throw new IllegalArgumentException(\"wrong bytes\");\n    }\n\n    return start + offset;\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArray.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/**\n * Gets the <code>signed byte</code> value at a particular offset.\n *\n * @param off <code>&gt;= 0, &lt; size(); offset to fetch\n * @return <code>signed byte</code> at that offset\n */\n", "func_signal": "public int getByte(int off)", "code": "{\n    checkOffsets(off, off + 1);\n    return getByte0(off);\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArray.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/**\n * Checks a range of offsets for validity, throwing if invalid.\n *\n * @param s start offset (inclusive)\n * @param e end offset (exclusive)\n */\n", "func_signal": "private void checkOffsets(int s, int e)", "code": "{\n    if ((s < 0) || (e < s) || (e > size)) {\n        throw new IllegalArgumentException(\"bad range: \" + s + \"..\" + e +\n                                           \"; actual size \" + size);\n    }\n}", "path": "dexlib\\src\\main\\java\\org\\jf\\dexlib\\Util\\ByteArray.java", "repo_name": "broo2s/brut.apktool.smali", "stars": 17, "license": "None", "language": "java", "size": 346}
{"docstring": "/**\n * Populates the list with all the current users playlists \n */\n", "func_signal": "public void populate( String JSONString )", "code": "{\n\t//Parse JSON and populate arraylist with new Playlist objects\n\tGson gson = new Gson();\n\t\t\n\tType listType = new TypeToken<ArrayList<String>>(){}.getType();\n\tArrayList<String> playlistNames = gson.fromJson(JSONString, listType);\n\t\n\tfor(String playlistName : playlistNames) {\n\t\tplaylists.add( new Playlist(playlistName) );\n\t}\n\t\n\trunOnUiThread(returnRes);\n}", "path": "MIUN-Youtube-Music-Player\\src\\miun\\player\\Playlists.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Switch background text for the mute/unmute button depending on current\n * state (audioOn)\n */\n", "func_signal": "public void switchMuteButtonState(boolean audioOn)", "code": "{\n\tif (audioOn) {\n\t\tthis.muteButton.setText(\"Mute\");\n\t} else {\n\t\tthis.muteButton.setText(\"UnMute\");\n\t}\n}", "path": "MIUN-Youtube-Music-Player\\src\\miun\\player\\AudioPlayer.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Override finish method\n */\n", "func_signal": "@Override\npublic void finish()", "code": "{\n\tIntent exit = new Intent();\n\tsetResult(RESULT_OK, exit);\n\tsuper.finish();\n}", "path": "MusicPlayer\\src\\miun\\player\\PlaylistActivity.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Converts the *.mp4 to *.mp3 using the externa ffmpeg tool\n * @return filepath to the *.m3u (e.g. http://example.com/example.m3u)\n */\n", "func_signal": "private boolean convertToMp3()", "code": "{\n  \n    String cmdString = \"cmd.exe /c D:\\\\Programmering\\\\Git\\\\MIUN-YoutubeToMP3StreamAndroidPlayer\\\\MIUN-Youtube-Music-Converter\\\\ffmpeg.exe -i \" + currentVideo + \".flv \" + currentVideo + \".mp3\";\n    Process p;\n    \n    try {\n        p = Runtime.getRuntime().exec( cmdString );\n        \n        //Handling the streams so that dead lock situation never occurs.  \n        ProcessHandler inputStream = new ProcessHandler(p.getInputStream(),\"INPUT\");\n        ProcessHandler errorStream = new ProcessHandler(p.getErrorStream(),\"ERROR\");\n        \n        //Start the stream threads \n        inputStream.start();\n        errorStream.start();\n        \n\n        //Wait for convertion to complete\n        p.waitFor();\n        \n        if (p.exitValue() == 0) {\n            System.out.println(\"CONVERTER: ffmpeg - Command Successful\");\n            return true;\n        } else {\n            System.out.println(\"CONVERTER: ffmpeg - Command Failure\");\n            return false;\n        }\n    } catch (Exception e) {\n        System.out.println( \"CONVERTER: ffmpeg conversion failed, error: \" + e.toString() );\n        return false;\n    }\n}", "path": "MIUN-Youtube-Music-Converter\\src\\java\\miun\\player\\converter\\Converter.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Parse JSON string and return song m3u \n * @param jsonString\n * @return String containing the songs m3u path\n */\n", "func_signal": "private String parseJSONToString(String JSONString)", "code": "{\n\t\n\tGson gson = new Gson();\n\tString m3uLink = gson.fromJson(JSONString, String.class);\n\t\n\treturn m3uLink;\n}", "path": "MusicPlayer\\src\\miun\\player\\PlaylistActivity.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Switch background text for the mute/unmute button depending on current\n * state (audioOn)\n */\n", "func_signal": "public void switchPlayButtonState(boolean isPlaying)", "code": "{\n\tif (isPlaying) {\n\t\tthis.playButton.setText(\"Play\");\n\t} else {\n\t\tthis.playButton.setText(\"Pause\");\n\t}\n}", "path": "MusicPlayer\\src\\miun\\player\\AudioPlayerActivity.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Return GSON/JSON object containing all songs in playlist\n * @return GSON/JSON object containing all songs in playlist\n */\n", "func_signal": "public String getListOfSongsAsJSONObject()", "code": "{\n    Gson gson = new Gson();\n    ArrayList<String> listOfSongsNames = new ArrayList<String>();\n    \n    //Store all song names in a arraylist\n    for(Song song : listOfSongs) {\n        listOfSongsNames.add( song.getTitle() );\n    }\n    \n    //Create JSON object\n    Type listType = new TypeToken<ArrayList<String>>(){}.getType();\n            \n    return gson.toJson(listOfSongsNames, listType);\n}", "path": "BackboneController\\src\\java\\miun\\player\\controller\\Playlist.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Creates an *m3u file with the new *.mp3 file\n */\n", "func_signal": "private void createM3uFile()", "code": "{\n    \n    String[] output = { \"#EXTM3U\\n\",\n                        \"#EXTINF:123,Sample Artist - Sample title\\n\", \n                        \"C:\\\\Dropbox\\\\Skolarbete\\\\Datateknik (AV) - Service Oriented Architecture SOA (7.5hp)\\\\Project\\\\MIUN-Youtube-Music-Converter\\\\\" + currentVideo + \".mp3\" };\n    \n    try {\n        FileWriter fstream = new FileWriter( currentVideo + \".m3u\");\n        BufferedWriter out = new BufferedWriter(fstream);\n       \n        for(String line : output) {\n            out.write(line);\n        }\n        \n        //Close the output stream\n        out.close();\n    }catch (Exception e){//Catch exception if any\n        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, \"Error: \" + e.getMessage(), e);\n    }\n}", "path": "Test\\src\\test\\Test.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Switch background text for the mute/unmute button depending on current\n * state (audioOn)\n */\n", "func_signal": "public void switchMuteButtonState(boolean audioOn)", "code": "{\n\tif (audioOn) {\n\t\tthis.muteButton.setText(\"Mute\");\n\t} else {\n\t\tthis.muteButton.setText(\"UnMute\");\n\t}\n}", "path": "MusicPlayer\\src\\miun\\player\\AudioPlayerActivity.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Override finish method\n */\n", "func_signal": "@Override\npublic void finish()", "code": "{\n\tmp.reset();\n\tIntent exit = new Intent();\n\tsetResult(RESULT_OK, exit);\n\tsuper.finish();\n}", "path": "MusicPlayer\\src\\miun\\player\\AudioPlayerActivity.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Mute mediaplayer sound\n */\n", "func_signal": "public void isMute()", "code": "{\n\n\t\tif (mIsMute) {\n\t\t\tmAm.setStreamMute(AudioManager.STREAM_MUSIC, false);\n\t\t\tmIsMute = false;\n\n\t\t} else {\n\t\t\tmAm.setStreamMute(AudioManager.STREAM_MUSIC, true);\n\t\t\tmIsMute = true;\n\t\t}\n}", "path": "MIUN-Youtube-Music-Player\\src\\miun\\player\\AudioPlayer.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    Test a = new Test();\n    \n    a.tes();\n}", "path": "Test\\src\\test\\Test.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Plays given song\n */\n", "func_signal": "private void playSong()", "code": "{\n\t\ttry {\n\t\t\tmp.reset();\n\t\t\tmp.setDataSource(m3uLink);\n\t\t\tmp.prepare();\n\t\t\tmp.start();\n\t\t} catch (IOException e) {\n\t\t\tLog.v(getString(R.string.app_name), e.getMessage());\n\t\t}\n\t}", "path": "MIUN-Youtube-Music-Player\\src\\miun\\player\\AudioPlayer.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Creates an *m3u file with the new *.mp3 file\n */\n", "func_signal": "private boolean createM3uFile()", "code": "{\n   \n       \n    \n    try {\n        FileWriter fstream = new FileWriter( currentVideo + \".m3u\" );\n        BufferedWriter out = new BufferedWriter(fstream);\n    \n//          FacesContext context = FacesContext.getCurrentInstance(); \n//          ServletContext sc = (ServletContext) context.getExternalContext().getContext(); \n        String path = \"http://10.0.2.2/\"; //getDocRoot();//sc.getRealPath(currentVideo + \".m3u\");\n\n        String[] output = { \"#EXTM3U\\n\", \"#EXTINF:123,Sample Artist - Sample title\\n\", path + currentVideo + \".mp3\" };\n        \n        for(String line : output) {\n            out.write(line);\n        }\n        \n        //Close the output stream\n        out.close();\n    } catch (Exception e){\n        System.out.println(\"CONVERTER: m3u creation failed, error: \" + e.toString() );\n        Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, \"Error: \" + e.getMessage(), e);\n        return false;\n    }\n    return true;\n}", "path": "MIUN-Youtube-Music-Converter\\src\\java\\miun\\player\\converter\\Converter.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Override finish method\n */\n", "func_signal": "@Override\npublic void finish()", "code": "{\n\tIntent exit = new Intent();\n\tsetResult(RESULT_OK, exit);\n\tsuper.finish();\n}", "path": "MIUN-Youtube-Music-Player\\src\\miun\\player\\AudioPlayer.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Populates the playlist with songs \n */\n", "func_signal": "public void populate()", "code": "{\n\n    try {\n            playListFeed = Controller.SERVICE.getFeed(new URL( getIdentifier() ), PlaylistFeed.class);\n    } catch (MalformedURLException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n    } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n    } catch (ServiceException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n    }\n\n    for(PlaylistEntry playlistEntry : playListFeed.getEntries()) {\n            listOfSongs.add( new Song(playlistEntry) );\n    }\n}", "path": "BackboneController\\src\\java\\miun\\player\\controller\\Playlist.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Copy files to XAMPP htdocs directory\n * @return \n */\n", "func_signal": "private String copyFiles()", "code": "{\n    \n    //FIRST_COPY: Copy m3u file\n                   \n    String srcDir = \"C:\\\\Users\\\\Jonas\\\\.netbeans\\\\7.0\\\\config\\\\GF3\\\\domain1\\\\\" + currentVideo + \".m3u\";\n    String dest = \"C:\\\\Users\\\\Jonas\\\\xampp\\\\htdocs\\\\\";\n    String[] command = { \"cmd.exe\", \"/c\", \"copy\", srcDir, dest };\n        Process p1;\n            \n    try {\n        //Execute command\n         p1 = Runtime.getRuntime().exec( command );\n    \n        try {\n            //Wait for process to finish\n            p1.waitFor();\n        } catch (InterruptedException ex) {\n            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);\n            return \"\";\n        }\n\n        //Check if successful\n        if (p1.exitValue() == 0) {\n            System.out.println(\"FIRST_COPY: Command Successful\");\n            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, \"FIRST_COPY: Command Successful\");\n        } else {\n            System.out.println(\"FIRST_COPY: Command Failure\");\n            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, \"FIRST_COPY: Command Failure\");\n            return \"\"; //\"CONVERTER: Command Failure\"; \n        }\n    \n    } catch (IOException ex) {\n        Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);\n        return \"\";\n    }\n    \n    \n    \n    //SECOND_COPY: Copy mp3\n    \n    srcDir = \"C:\\\\Users\\\\Jonas\\\\.netbeans\\\\7.0\\\\config\\\\GF3\\\\domain1\\\\\" + currentVideo + \".mp3\";\n    dest = \"C:\\\\Users\\\\Jonas\\\\xampp\\\\htdocs\\\\\";\n    String command2[] = { \"cmd.exe\", \"/c\", \"copy\", srcDir, dest };\n    Process p2;\n            \n    try {\n        //Execute command\n        p2 = Runtime.getRuntime().exec( command2 );\n        \n        try {\n            //Wait for process to finish\n            p2.waitFor();\n        } catch (InterruptedException ex) {\n            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);\n            return \"\";\n        }\n\n        //Check if successful\n        if (p2.exitValue() == 0) {\n            System.out.println(\"SECOND_COPY: Command Successful\");\n            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, \"SECOND_COPY: Command Successful\");\n            return \"http://10.0.2.2/\" + currentVideo + \".mp3\"; //TODO Change to m3u if player can handle it\n        } else {\n            System.out.println(\"SECOND_COPY: Command Failure\");\n            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, \"SECOND_COPY: Command Failure\");\n            return \"\"; //\"CONVERTER: Command Failure\"; \n        }  \n\n        //return \"http://10.0.2.2/\" + currentVideo + \".mp3\"; //TODO Change to m3u if player can handle it\n        \n    } catch (IOException ex) {\n        Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);\n        return \"\";\n    }\n    \n}", "path": "MIUN-Youtube-Music-Converter\\src\\java\\miun\\player\\converter\\Converter.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Mute mediaplayer sound\n */\n", "func_signal": "public void isMute()", "code": "{\n\t\t \t\t \n\t\tif (mIsMute) {\n\t\t\ttry {\n\t\t\t\tmAm.setStreamMute(AudioManager.STREAM_MUSIC, false);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLog.e(\"SET MUTE\", e.getMessage() );\n\t\t\t}\n\t\t\tmIsMute = false;\n\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tmAm.setStreamMute(AudioManager.STREAM_MUSIC, true);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLog.e(\"SET MUTE\", e.getMessage() );\n\t\t\t}\n\t\t\tmIsMute = true;\n\t\t}\n}", "path": "MusicPlayer\\src\\miun\\player\\AudioPlayerActivity.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Plays given song\n */\n", "func_signal": "private void playSong()", "code": "{\n\t\ttry {\n\t\t\tmp.reset();\n\t\t\t\t\t\t\n\t\t\tmp.setDataSource(m3uLink);\n\t\t\tmp.prepare();\n\t\t\tmp.start();\n\t\t\t//mIsMute = false; //Set sound mutable\n\t\t} catch (IOException e) {\n\t\t\tLog.v(getString(R.string.app_name), e.getMessage());\n\t\t}\n\t}", "path": "MusicPlayer\\src\\miun\\player\\AudioPlayerActivity.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "/**\n * Switch background text for the mute/unmute button depending on current\n * state (audioOn)\n */\n", "func_signal": "public void switchPlayButtonState(boolean isPlaying)", "code": "{\n\tif (isPlaying) {\n\t\tthis.playButton.setText(\"Pause\");\n\t} else {\n\t\tthis.playButton.setText(\"Play\");\n\t}\n}", "path": "MIUN-Youtube-Music-Player\\src\\miun\\player\\AudioPlayer.java", "repo_name": "sidsjobackis/MIUN-YoutubeToMP3StreamAndroidPlayer", "stars": 17, "license": "None", "language": "java", "size": 39330}
{"docstring": "// Component Creation and Initialization ********************************\n", "func_signal": "private void initComponents(ValueModel triggerChannel)", "code": "{\n    chShowTipsBox = ComponentsFactory.createCheckBox(\n        Strings.message(\"userprefs.tab.general.show.tip.of.the.day\"),\n        new ToggleButtonAdapter(new BufferedValueModel(TipOfTheDayDialog.showingTipsModel(),\n            triggerChannel)));\n\n    String msg = Strings.message(\"userprefs.tab.general.check.for.new.versions\");\n    if (ApplicationLauncher.isAutoUpdatesEnabled())\n    {\n        chDoUpdatesCheck = ComponentsFactory.createCheckBox(\n            msg, new ToggleButtonAdapter(new BufferedValueModel(new PropertyAdapter(userPrefs,\n                UserPreferences.PROP_CHECKING_FOR_UPDATES_ON_STARTUP),\n                triggerChannel)));\n    } else\n    {\n        msg = msg.replaceAll(\"&\", \"\");\n        chDoUpdatesCheck = new JCheckBox(msg);\n        chDoUpdatesCheck.setSelected(true);\n        chDoUpdatesCheck.setEnabled(false);\n    }\n\n    chAlwaysUseEnglish = ComponentsFactory.createCheckBox(\n        Strings.message(\"userprefs.tab.advanced.always.use.english\"),\n        new ToggleButtonAdapter(new BufferedValueModel(new PropertyAdapter(userPrefs,\n            UserPreferences.PROP_ALWAYS_USE_ENGLISH),\n            triggerChannel)));\n    \n    tfInternetBrowser = new JTextField();\n    tfInternetBrowser.setDocument(new DocumentAdapter(new BufferedValueModel(\n        new PropertyAdapter(userPrefs, UserPreferences.PROP_INTERNET_BROWSER),\n        triggerChannel)));\n\n    if (BrowserLauncher.isUsingJWSBrowser())\n    {\n        tfInternetBrowser.setEnabled(false);\n        tfInternetBrowser.setToolTipText(Strings.message(\"userprefs.tab.advanced.browser.tooltip.disabled\"));\n    } else\n    {\n        tfInternetBrowser.setEnabled(true);\n        tfInternetBrowser.setToolTipText(Strings.message(\"userprefs.tab.advanced.browser.tooltip.enabled\"));\n    }\n\n    initProxyComponents(triggerChannel);\n\n    SpinnerModelAdapter spinModelFeedSelectionDelay = new SpinnerModelAdapter(\n        new BoundedRangeAdapter(new BufferedValueModel(new PropertyAdapter(userPrefs,\n            UserPreferences.PROP_FEED_SELECTION_DELAY), triggerChannel), 0, 0, 1000));\n    spinModelFeedSelectionDelay.setStepSize(100);\n\n    chAAText = createCheckBox(userPrefs, Strings.message(\"userprefs.tab.advanced.antialiased.fonts\"),\n        UserPreferences.PROP_AA_TEXT);\n\n    // The following code registers listener on Apply/Accept actions to track down\n    // changes in BlogStarz limits. If changes are detected then channel list is\n    // repainted.\n\n    saveInitialLimits();\n    triggerChannel.addValueChangeListener(new PropertyChangeListener()\n    {\n        public void propertyChange(PropertyChangeEvent evt)\n        {\n            if (Boolean.TRUE.equals(evt.getNewValue())) doRepaintChannelList();\n        }\n    });\n\n    chShowUnreadButtonMenu = createCheckBox(userPrefs,\n        Strings.message(\"userprefs.tab.advanced.show.the.unread.buttons.menu\"),\n        UserPreferences.PROP_SHOW_UNREAD_BUTTON_MENU);\n\n    SpinnerModelAdapter spinModelFeedImportLimit =\n        new SpinnerModelAdapter(new BoundedRangeAdapter(\n            new BufferedValueModel(new PropertyAdapter(userPrefs,\n                UserPreferences.PROP_FEED_IMPORT_LIMIT),\n                triggerChannel), 1, 1, UserPreferences.MAX_FEED_IMPORT_LIMITATION));\n    spinModelFeedImportLimit.setStepSize(100);\n    spinFeedImportLimit = new JSpinner(spinModelFeedImportLimit);\n\n    initGuideComponents(triggerChannel);\n\n    chHideOldArticles = createCheckBox(feedRS,\n        Strings.message(\"userprefs.tab.articles.hide.articles.older.than\"), \"suppressingOlderThan\");\n    chDisplayFullTitles = createCheckBox(feedRS,\n        Strings.message(\"userprefs.tab.articles.display.full.titles\"), \"displayingFullTitles\");\n    chSortingAscending = createCheckBox(feedRS,\n        Strings.message(\"userprefs.tab.articles.sort.earlier.articles.first\"), \"sortingAscending\");\n\n    tfSuppressOlderThan = new JTextField();\n    tfSuppressOlderThan.setDocument(new DocumentAdapter(new BufferedValueModel(\n        new PropertyAdapter(feedRS, \"suppressOlderThanString\"), triggerChannel)));\n\n    chCopyLinksInHREFFormat = createCheckBox(userPrefs,\n        Strings.message(\"userprefs.tab.articles.use.href.format.for.links.copied.to.clipboard\"),\n        UserPreferences.PROP_COPY_LINKS_IN_HREF_FORMAT);\n    chBrowseOnTitleDblClick = createCheckBox(userPrefs,\n        Strings.message(\"userprefs.tab.articles.browse.on.double.click.over.the.title\"),\n        UserPreferences.PROP_BROWSE_ON_DBL_CLICK);\n\n    chShowAppIconInSystray = createCheckBox(userPrefs,\n        Strings.message(\"userprefs.tab.advanced.show.appicon.in.systray\"),\n        UserPreferences.PROP_SHOW_APPICON_IN_SYSTRAY);\n    chMinimizeToSystray = createCheckBox(userPrefs,\n        Strings.message(\"userprefs.tab.advanced.minimize.to.systray\"),\n        UserPreferences.PROP_MINIMIZE_TO_SYSTRAY);\n\n    // Dock icon\n    ValueModel modeModel = new BufferedValueModel(\n        new BIDModeToStringConverter(new PropertyAdapter(userPrefs, UserPreferences.PROP_DIB_MODE)),\n        triggerChannel);\n\n    cbBIDMode = new JComboBox(new ComboBoxAdapter(BIDModeToStringConverter.MODES, modeModel));\n}", "path": "src\\com\\salas\\bb\\dialogs\\AdvancedPreferencesPanel.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Creates a FormLayout and adds the UI components using a PanelBuilder.\n */\n", "func_signal": "private void build()", "code": "{\n    JPanel panel = new VertialScrollablePanel();\n\n    String version = System.getProperty(\"java.vm.version\");\n    boolean is15 = version != null && version.startsWith(\"1.5\");\n\n    BBFormBuilder builder = new BBFormBuilder(\"7dlu, p, 2dlu, 40dlu, 70dlu:grow\", panel);\n    builder.setDefaultDialogBorder();\n\n    builder.appendSeparator(Strings.message(\"userprefs.tab.advanced.separator.on.startup\"));\n    builder.setLeadingColumnOffset(1);\n    builder.append(chShowTipsBox, 4);\n    builder.append(chDoUpdatesCheck, 4);\n    builder.append(chAlwaysUseEnglish, 4);\n\n    builder.setLeadingColumnOffset(1);\n    builder.appendSeparator(Strings.message(\"userprefs.tab.advanced.separator.network\"));\n    builder.nextColumn();\n    builder.append(Strings.message(\"userprefs.tab.advanced.browser\"), tfInternetBrowser, 2);\n    builder.append(chProxyEnabled);\n    builder.append(buildProxyPanel(), 2);\n    builder.append(lbProxyExclusions);\n    builder.append(tfProxyExclusions, 2);\n    tfProxyExclusions.setToolTipText(Strings.message(\"userprefs.tab.advanced.no.proxy.for.notes\"));\n\n    builder.appendSeparator(Strings.message(\"userprefs.tab.advanced.separator.interface\"));\n    builder.nextLine();\n    builder.append(Strings.message(\"userprefs.tab.advanced.feed.import.limit\"), spinFeedImportLimit);\n    builder.nextLine();\n    builder.append(chShowUnreadButtonMenu, 4);\n    if (is15) builder.append(chAAText, 4);\n\n    if (NotificationArea.isSupported())\n    {\n        if (!SystemUtils.IS_OS_MAC) builder.append(chShowAppIconInSystray, 4);\n        if (OSSettings.isMinimizeToSystraySupported()) builder.append(chMinimizeToSystray, 4);\n    }\n\n    // Mac-specific Dock icon settings\n    if (SystemUtils.IS_OS_MAC) builder.append(Strings.message(\"userprefs.tab.advanced.dock.icon\"), cbBIDMode, 2);\n\n    builder.appendSeparator(Strings.message(\"userprefs.tab.guides.on.selection\"));\n    builder.append(rbGSMFirst, 4);\n    builder.append(rbGSMLastSeen, 4);\n    builder.append(rbGSMNoFeed, 4);\n\n    builder.appendSeparator(Strings.message(\"userprefs.tab.guides.on.publication\"));\n    builder.append(chPing);\n    builder.append(tfPingURL, 2);\n\n    builder.appendSeparator(Strings.message(\"userprefs.tab.advanced.articles\"));\n    builder.append(chSortingAscending, 4);\n    builder.append(chHideOldArticles, tfSuppressOlderThan);\n    builder.nextLine();\n    builder.append(chDisplayFullTitles, 4);\n    builder.append(chCopyLinksInHREFFormat, 4);\n    builder.append(chBrowseOnTitleDblClick, 4);\n\n    // Finish\n    setLayout(new BorderLayout());\n    JScrollPane sp = new JScrollPane(panel);\n    sp.setBorder(BorderFactory.createEmptyBorder());\n    sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\n    add(sp, BorderLayout.CENTER);\n}", "path": "src\\com\\salas\\bb\\dialogs\\AdvancedPreferencesPanel.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Sets the flag of author visibility assigned to some mode.\n *\n * @param mode  mode.\n * @param flag  flag.\n */\n", "func_signal": "public void setAuthorVisible(int mode, boolean flag)", "code": "{\n    boolean oldValue = author[mode];\n    author[mode] = flag;\n\n    if (oldValue != flag) fireModeChanged(mode);\n}", "path": "src\\com\\salas\\bb\\domain\\prefs\\ViewModePreferences.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Highlight range in the pane with given color.\n *\n * @param aPane         pane.\n * @param aRange        range.\n * @param aBackground   background color.\n */\n", "func_signal": "public static void highlight(JEditorPane aPane, TextRange aRange, Color aBackground)", "code": "{\n    javax.swing.text.Highlighter highlighter = aPane.getHighlighter();\n\n    DefaultHighlighter.DefaultHighlightPainter painter =\n        new DefaultHighlighter.DefaultHighlightPainter(aBackground);\n\n    try\n    {\n        highlighter.addHighlight(aRange.getStart(), aRange.getEnd(), painter);\n    } catch (BadLocationException e)\n    {\n        // Failed to put highligh marks\n    }\n}", "path": "src\\com\\salas\\bb\\views\\feeds\\html\\Highlighter.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Sets the flag of categories visibility assigned to some mode.\n *\n * @param mode  mode.\n * @param flag  flag.\n */\n", "func_signal": "public void setCategoriesVisible(int mode, boolean flag)", "code": "{\n    boolean oldValue = categories[mode];\n    categories[mode] = flag;\n\n    if (oldValue != flag) fireModeChanged(mode);\n}", "path": "src\\com\\salas\\bb\\domain\\prefs\\ViewModePreferences.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Takes the property from preferences and analyzes it. The property should be\n * 3 characters corresponding to three modes. When the character is '1' it means\n * that the field is enabled.\n *\n * @param prefs     preferences storage.\n * @param property  property name.\n * @param field     field mode list.\n */\n", "func_signal": "private void restore(Map prefs, String property, boolean[] field)", "code": "{\n    byte[] bytes = (byte[])prefs.get(property);\n    String value = bytes == null ? null : StringUtils.fromUTF8(bytes);\n    if (value != null && value.length() == 3)\n    {\n        for (int i = 0; i < 3; i++) field[i] = value.charAt(i) == '1';\n    }\n}", "path": "src\\com\\salas\\bb\\domain\\prefs\\ViewModePreferences.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Restores preferences from the storage.\n *\n * @param prefs preferences storage.\n */\n", "func_signal": "public void restore(Map prefs)", "code": "{\n    restore(prefs, AUTHOR_VISIBLE, author);\n    restore(prefs, CATEGORIES_VISIBLE, categories);\n    restore(prefs, DATE_VISIBLE, date);\n    restore(prefs, TIME_VISIBLE, time);\n    restore(prefs, PIN_VISIBLE, pin);\n    restore(prefs, URL_VISIBLE, url);\n    restore(prefs, COLOR_CODE_VISIBLE, colorCode);\n}", "path": "src\\com\\salas\\bb\\domain\\prefs\\ViewModePreferences.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Actual action.\n *\n * @param event original event object.\n */\n", "func_signal": "protected void doAction(ActionEvent event)", "code": "{\n    String message;\n    int type;\n    try\n    {\n        PersistenceManagerConfig.getManager().compact();\n        message = \"Compacting is complete\";\n        type = JOptionPane.INFORMATION_MESSAGE;\n    } catch (PersistenceException e)\n    {\n        LOG.log(Level.SEVERE, \"Compacting failed.\", e);\n\n        message = \"Compacting failed.\\n\\n\" +\n            \"It's recommended to export your\\n\" +\n            \"subscriptions and restart.\";\n        type = JOptionPane.WARNING_MESSAGE;\n    }\n\n    // Completion note\n    final String fMessage = message;\n    final int fType = type;\n    SwingUtilities.invokeLater(new Runnable()\n    {\n        public void run()\n        {\n            JOptionPane.showMessageDialog(GlobalController.SINGLETON.getMainFrame(),\n                fMessage,\n                \"Database Compacting\",\n                fType);\n        }\n    });\n}", "path": "src\\com\\salas\\bb\\core\\actions\\DatabaseCompactAction.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Removes all highlights.\n *\n * @param aPane pane.\n */\n", "func_signal": "public static void removeHighlights(JEditorPane aPane)", "code": "{\n    javax.swing.text.Highlighter aHighlighter = aPane.getHighlighter();\n    aHighlighter.removeAllHighlights();\n}", "path": "src\\com\\salas\\bb\\views\\feeds\\html\\Highlighter.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Sets the pin visibility flag.\n *\n * @param mode  mode.\n * @param flag  flag.\n */\n", "func_signal": "public void setPinVisible(int mode, boolean flag)", "code": "{\n    boolean oldValue = pin[mode];\n    pin[mode] = flag;\n\n    if (oldValue != flag) fireModeChanged(mode);\n}", "path": "src\\com\\salas\\bb\\domain\\prefs\\ViewModePreferences.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Sets the date visibility flag.\n *\n * @param mode  mode.\n * @param flag  flag.\n */\n", "func_signal": "public void setDateVisible(int mode, boolean flag)", "code": "{\n    boolean oldValue = date[mode];\n    date[mode] = flag;\n\n    if (oldValue != flag) fireModeChanged(mode);\n}", "path": "src\\com\\salas\\bb\\domain\\prefs\\ViewModePreferences.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Stores single field to modes map into preferences storage.\n *\n * @param prefs     preferences storage.\n * @param property  property name.\n * @param field     field mode list.\n */\n", "func_signal": "private void store(Preferences prefs, String property, boolean[] field)", "code": "{\n    StringBuffer buf = new StringBuffer(3);\n    for (boolean f : field) buf.append(f ? 1 : 0);\n\n    prefs.put(property, buf.toString());\n}", "path": "src\\com\\salas\\bb\\domain\\prefs\\ViewModePreferences.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Stores modes to the preferences storage.\n *\n * @param prefs preference storage.\n */\n", "func_signal": "public void store(Preferences prefs)", "code": "{\n    store(prefs, AUTHOR_VISIBLE, author);\n    store(prefs, CATEGORIES_VISIBLE, categories);\n    store(prefs, DATE_VISIBLE, date);\n    store(prefs, TIME_VISIBLE, time);\n    store(prefs, PIN_VISIBLE, pin);\n    store(prefs, URL_VISIBLE, url);\n    store(prefs, COLOR_CODE_VISIBLE, colorCode);\n}", "path": "src\\com\\salas\\bb\\domain\\prefs\\ViewModePreferences.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Converts from the subject model.\n *\n * @param object object.\n *\n * @return converted version.\n */\n", "func_signal": "public Object convertFromSubject(Object object)", "code": "{\n    int mode = (Integer)object;\n    return MODES[mode];\n}", "path": "src\\com\\salas\\bb\\dialogs\\AdvancedPreferencesPanel.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Creates proxy panel.\n *\n * @return panel.\n */\n", "func_signal": "private JPanel buildProxyPanel()", "code": "{\n    BBFormBuilder builder = new BBFormBuilder(\"50dlu:grow, 10dlu, pref, 2dlu, 30dlu\");\n    builder.append(tfProxyHost);\n    builder.append(lbProxyPort, spinProxyPort);\n    lbProxyPort.setLabelFor(spinProxyPort);\n\n    return builder.getPanel();\n}", "path": "src\\com\\salas\\bb\\dialogs\\AdvancedPreferencesPanel.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Saves the limits of parameters for future comparison.\n */\n", "func_signal": "private void saveInitialLimits()", "code": "{\n    initActivityLimit = starzPrefs.getTopActivity();\n    initHightlightsLimit = starzPrefs.getTopHighlights();\n}", "path": "src\\com\\salas\\bb\\dialogs\\AdvancedPreferencesPanel.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Sets the color code visibility flag.\n *\n * @param mode  mode.\n * @param flag  flag.\n */\n", "func_signal": "public void setColorCodeVisible(int mode, boolean flag)", "code": "{\n    boolean oldValue = colorCode[mode];\n    colorCode[mode] = flag;\n\n    if (oldValue != flag) fireModeChanged(mode);\n}", "path": "src\\com\\salas\\bb\\domain\\prefs\\ViewModePreferences.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Sets value into the subject mode.\n *\n * @param object value.\n */\n", "func_signal": "public void setValue(Object object)", "code": "{\n    // Arrays.binarySearch doesn't work\n    int index = -1;\n    for (int i = 0; index < 0 && i < MODES.length; i++)\n    {\n        String mode = MODES[i];\n        if (mode.equals(object)) index = i;\n    }\n\n    subject.setValue(index);\n}", "path": "src\\com\\salas\\bb\\dialogs\\AdvancedPreferencesPanel.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Initializes proxy components.\n *\n * @param triggerChannel trigger.\n */\n", "func_signal": "private void initProxyComponents(ValueModel triggerChannel)", "code": "{\n    chProxyEnabled = createCheckBox(userPrefs, Strings.message(\"userprefs.tab.advanced.use.proxy\"),\n        UserPreferences.PROP_PROXY_ENABLED);\n\n    tfProxyHost = new JTextField();\n    tfProxyHost.setDocument(new DocumentAdapter(new BufferedValueModel(\n        new PropertyAdapter(userPrefs, UserPreferences.PROP_PROXY_HOST), triggerChannel)));\n\n    lbProxyPort = ComponentsFactory.createLabel(Strings.message(\"userprefs.tab.advanced.use.proxy.port\"));\n    spinProxyPort = new JSpinner(new SpinnerModelAdapter(new BoundedRangeAdapter(\n        new BufferedValueModel(new PropertyAdapter(userPrefs, UserPreferences.PROP_PROXY_PORT),\n        triggerChannel), 80, 80, 65536)));\n    spinProxyPort.setEditor(new JSpinner.NumberEditor(spinProxyPort, \"#\"));\n\n    lbProxyExclusions = ComponentsFactory.createLabel(Strings.message(\"userprefs.tab.advanced.no.proxy.for\"));\n    tfProxyExclusions = new JTextField();\n    tfProxyExclusions.setDocument(new DocumentAdapter(new BufferedValueModel(\n        new PropertyAdapter(userPrefs, UserPreferences.PROP_PROXY_EXCLUSIONS), triggerChannel)));\n\n    StateUpdatingToggleListener.install(chProxyEnabled, tfProxyHost, lbProxyPort, spinProxyPort,\n        lbProxyExclusions, tfProxyExclusions);\n}", "path": "src\\com\\salas\\bb\\dialogs\\AdvancedPreferencesPanel.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "/**\n * Creates preferences.\n */\n", "func_signal": "public ViewModePreferences()", "code": "{\n    listeners = new CopyOnWriteArrayList<IViewModePreferencesChangeListener>();\n\n    author = new boolean[] { false, true, true };\n    categories = new boolean[] { false, false, true};\n    date = new boolean[] { true, true, true };\n    time = new boolean[] { false, false, true };\n    pin = new boolean[] { true, true, true };\n    colorCode = new boolean[] { true, true, true };\n    url = new boolean[] { false, false, false };\n}", "path": "src\\com\\salas\\bb\\domain\\prefs\\ViewModePreferences.java", "repo_name": "pitosalas/blogbridge", "stars": 28, "license": "gpl-2.0", "language": "java", "size": 8136}
{"docstring": "//iQuery\u4e2d:parent\u7684\u5b9e\u73b0\u4e8ejquery\u4e0d\u540c\uff0c\u5426\u5219\u5c31\u6ca1\u6709\u529e\u6cd5\u627e\u5230\u7236\u7ea7\u8282\u70b9\u4e86\n//\"(:parent)\u5339\u914d\u542b\u6709\u5b50\u5143\u7d20\u6216\u8005\u6587\u672c\u7684\u5143\u7d20\"\n", "func_signal": "@Test\npublic void Test22() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"> UIAButton:parent\");\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl:parent\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tString type = outTreeNodeList.get(0).getType();\n\tAssert.assertTrue( type.equalsIgnoreCase(\"UIAWindow\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIAWindows:parent\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIANavigationBar:parent\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\ttype = outTreeNodeList.get(0).getType();\n\tAssert.assertTrue( type.equalsIgnoreCase(\"UIAWindow\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIATextField:parent\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"[:attr = float])\u5339\u914d\u4f2a\u5c5e\u6027\"\n", "func_signal": "@Test\npublic void Test4() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"> [:height = 31]\", false);\n\tregisterPseudoAttributes(parser);\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\t//List<String> errors= parser.getErrors();\n\tAssert.assertTrue( outTreeNodeList.size()==2);\n\tString type = outTreeNodeList.get(0).getType();\n\tAssert.assertTrue( type.equalsIgnoreCase(\"UIATextField\"));\n\ttype = outTreeNodeList.get(1).getType();\n\tAssert.assertTrue( type.equalsIgnoreCase(\"UIASecureTextField\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> [:top = 214]\", false);\n\tregisterPseudoAttributes(parser);\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\ttype = outTreeNodeList.get(0).getType();\n\tAssert.assertTrue( type.equalsIgnoreCase(\"UIASwitch\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> [:left = 204]\", false);\n\tregisterPseudoAttributes(parser);\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\ttype = outTreeNodeList.get(0).getType();\n\tAssert.assertTrue( type.equalsIgnoreCase(\"UIASwitch\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> [:width = 79]\", false);\n\tregisterPseudoAttributes(parser);\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\ttype = outTreeNodeList.get(0).getType();\n\tAssert.assertTrue( type.equalsIgnoreCase(\"UIASwitch\"));\n\t\n\t// TODO: Case Issue\uff0c\u6ca1\u6709:bottom\u7684\u503c\u4e3a241\u7684\u63a7\u4ef6\n\tparser = iQueryIdeParser.createParser(\"> [:bottom = 241]\", false);\n\tregisterPseudoAttributes(parser);\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\ttype = outTreeNodeList.get(0).getType();\n\tAssert.assertTrue( type.equalsIgnoreCase(\"UIASwitch\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> [:right = 283]\", false);\n\tregisterPseudoAttributes(parser);\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\ttype = outTreeNodeList.get(0).getType();\n\tAssert.assertTrue( type.equalsIgnoreCase(\"UIASwitch\"));\n\t\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"(:text)\u5339\u914d\u6240\u6709\u7684\u5355\u884c\u6587\u672c\u6846\"\n", "func_signal": "@Test\npublic void Test35() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"> :text\", false);\n\tparser.registerPseudoClass(\"text\", new IPseudoClass() {\n\t\tpublic boolean resolve(ITreeNode node) {\n\t\t    return iQueryIdeParser.filterByNameEndsWith(node, \"TextField\");\n\t\t}\n\t    });\n\t\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==2); // UIASecureTextField\uff0c\u4e5f\u5e94\u8be5\u662ftext\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"([attribute])\u5339\u914d\u5305\u542b\u7ed9\u5b9a\u5c5e\u6027\u7684\u5143\u7d20\"\n", "func_signal": "@Test\npublic void Test25() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"> UIAButton[name]\");\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==3);\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIAButton[something]\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"(:gt(index))\u5339\u914d\u6240\u6709\u5927\u4e8e\u7ed9\u5b9a\u7d22\u5f15\u503c\u7684\u5143\u7d20\"\n", "func_signal": "@Test\n\tpublic void Test17() throws IOException, RecognitionException", "code": "{\n\t\tiQueryParser parser = iQueryIdeParser.createParser(\"> UIAButton:gt(1)\");\n\t\tList<ITreeNode> candidates=  getRoot();\n\t\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\t\tAssert.assertTrue( outTreeNodeList.size()==1);\n\t\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Gestures\"));\n\t\t\n\t\tparser = iQueryIdeParser.createParser(\"> UIAButton:gt(5)\");\n\t\toutTreeNodeList = parser.query(candidates);\n\t\tAssert.assertTrue( outTreeNodeList.size()==0);\n\t\t\n\t\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton:gt(1)\");\n\t\toutTreeNodeList = parser.query(candidates);\n\t\tAssert.assertTrue( outTreeNodeList.size()==1);\n\t\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Third\"));\n\t}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"([attribute^=value])\u5339\u914d\u7ed9\u5b9a\u7684\u5c5e\u6027\u662f\u4ee5\u67d0\u4e9b\u503c\u5f00\u59cb\u7684\u5143\u7d20\"\n", "func_signal": "@Test\npublic void Test28() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton[name^='Second']\");\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Second\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton[name^='Sec']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Second\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIAButton[name^='sec']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIAButton[name^='ddd']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIAButton[something^='Second']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIATextField[name^='StbTest']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"(:first-child)\u5339\u914d\u7b2c\u4e00\u4e2a\u5b50\u5143\u7d20\"\n", "func_signal": "@Test\npublic void Test33() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"> UIASegmentedControl :first-child\");\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"First\"));\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"(:radio)\u5339\u914d\u6240\u6709\u5355\u9009\u6309\u94ae\"\n", "func_signal": "@Test\npublic void Test36() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"> :radio\", false);\n\tparser.registerPseudoClass(\"radio\", new IPseudoClass() {\n\t\tpublic boolean resolve(ITreeNode node) {\n\t\t    return iQueryIdeParser.filterByNameEndsWith(node, \"UIASwitch\");\n\t\t}\n\t    });\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1); \n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\u6d4b\u8bd5\u5bf9UIAElement\u7684\u6269\u5c55\n", "func_signal": "@Test\npublic void Test1() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"> [value >= 59%]\");\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\t//List<String> errors= parser.getErrors();\n\tAssert.assertTrue( outTreeNodeList.size()==2);\n\t\n\tparser = iQueryIdeParser.createParser(\"> :button\");\n\tITreeNode segmentedControl= candidates.get(0).getChildren().get(3);\n\tList<ITreeNode> candidates1=new ArrayList<ITreeNode>();\n\tcandidates1.add(segmentedControl);\n\toutTreeNodeList = parser.query(candidates1);\n\tAssert.assertTrue( outTreeNodeList.size()==3);\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"(:not(selector))\u53bb\u9664\u6240\u6709\u4e0e\u7ed9\u5b9a\u9009\u62e9\u5668\u5339\u914d\u7684\u5143\u7d20\"\n", "func_signal": "@Test\npublic void Test15() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"> UIAButton:not(:first)\");\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==2);\n\tAssert.assertTrue( outTreeNodeList.get(1).getName().equalsIgnoreCase(\"Gestures\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton:not(:button)\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton:not(:text)\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==3);\n\tAssert.assertTrue( outTreeNodeList.get(2).getName().equalsIgnoreCase(\"Third\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIATextField:not([name='tbTest'])\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\t\n\tparser = iQueryIdeParser.createParser(\">> UIAStaticText:not([name!='TestUIDemo'])\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"TestUIDemo\"));\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"(ancestor >> descendant)\u5728\u7ed9\u5b9a\u7684\u7956\u5148\u5143\u7d20\u4e0b\u5339\u914d\u6240\u6709\u7684\u540e\u4ee3\u5143\u7d20\"\n", "func_signal": "@Test\npublic void Test9() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"UIAWindow >> UIAButton\");\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==6);\n\t\n\tparser = iQueryIdeParser.createParser(\"UIAWindow > UIASegmentedControl > UIAButton\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==3);\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//(element)\u6839\u636e\u7ed9\u5b9a\u7684\u5143\u7d20\u540d\u5339\u914d\u6240\u6709\u5143\u7d20\n", "func_signal": "@Test\npublic void Test6() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"UIAWindow >> UIAButton\");\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==6);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Pickers\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"UIAWindow > UIATextField\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tString type = outTreeNodeList.get(0).getType();\n\tAssert.assertTrue( type.equalsIgnoreCase(\"UIATextField\"));\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"(:empty)\u5339\u914d\u6240\u6709\u4e0d\u5305\u542b\u5b50\u5143\u7d20\u6216\u8005\u6587\u672c\u7684\u7a7a\u5143\u7d20\"\n", "func_signal": "@Test\npublic void Test20() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"> UIAButton:empty\");\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==3);\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIATable:empty\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl:empty\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"(parent > child)\u5728\u7ed9\u5b9a\u7684\u7236\u5143\u7d20\u4e0b\u5339\u914d\u6240\u6709\u7684\u5b50\u5143\u7d20\"\n", "func_signal": "@Test\npublic void Test10() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"UIAWindow > UIAButton\");\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==3);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Pickers\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"UIAWindow > UIASegmentedControl > UIAButton\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==3);\n\tAssert.assertTrue( outTreeNodeList.get(1).getName().equalsIgnoreCase(\"Second\"));\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"(:last)\u83b7\u53d6\u6700\u540e\u4e2a\u5143\u7d20\"\n", "func_signal": "@Test\npublic void Test14() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"> UIAButton:last\");\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Gestures\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton:last\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Third\"));\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"([selector1][selector2][selectorN])\u590d\u5408\u5c5e\u6027\u9009\u62e9\u5668\uff0c\u9700\u8981\u540c\u65f6\u6ee1\u8db3\u591a\u4e2a\u6761\u4ef6\u65f6\u4f7f\u7528\"\n", "func_signal": "@Test\npublic void Test31() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton[name$='ond'][name^='Sec']\");\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Second\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton[name$='cond'][name^='Sec']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Second\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton[name$='Cond'][name^='Sec']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton[name*='i'][name^='T'][name$='d']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Third\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton[name*='I'][name^='T'][name$='d']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n\n\tparser = iQueryIdeParser.createParser(\"> UIATextField[name$='tbTest'][name!='tbTest'][name^='tbTest']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n\t\n\t /* \n    query = \"> UIATextField[name$='tbTest'][name*='tbTest'][name^='tbTest']\";\n    result = $(query);\n    Assert.assertTrue(.Equals(1, result.length);\n    Assert.assertTrue(.Equals(\"tbTest\", result[0].name());\n    */\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"([attribute$=value])\u5339\u914d\u7ed9\u5b9a\u7684\u5c5e\u6027\u662f\u4ee5\u67d0\u4e9b\u503c\u7ed3\u5c3e\u7684\u5143\u7d20\"\n", "func_signal": "@Test\npublic void Test29() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton[name$='Second']\");\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Second\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton[name$='nd']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Second\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton[name$='d']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==2);  // Second & Third\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton[name$='D']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton[something$='Second']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIATextField[name$='StbTest']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"([attribute*=value])\u5339\u914d\u7ed9\u5b9a\u7684\u5c5e\u6027\u662f\u4ee5\u5305\u542b\u67d0\u4e9b\u503c\u7684\u5143\u7d20\"\n", "func_signal": "@Test\npublic void Test30() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton[name*='Second']\");\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Second\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton[name*='nd']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Second\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIAButton[name*='Pick']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Pickers\"));\n\t\n\tparser = iQueryIdeParser.createParser(\">> UIAButton[name*='i']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==3);   // Pickers & First & Third\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIAButton[name*='I']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIAButton[something*='Second']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIATextField[name*='StbTest']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==0);\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"([attribute!=value])\u5339\u914d\u6240\u6709\u4e0d\u542b\u6709\u6307\u5b9a\u7684\u5c5e\u6027\uff0c\u6216\u8005\u5c5e\u6027\u4e0d\u7b49\u4e8e\u7279\u5b9a\u503c\u7684\u5143\u7d20\"\n", "func_signal": "@Test\npublic void Test27() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"> UIAButton[name!='Second']\");\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==3);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Pickers\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIATextField[name!='Second']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\t\n\t/*\n\tparser = iQueryIdeParser.createParser(\"> UIATextField[someAttribute!='Second']\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1;\n\n    // \u5728ios 5\u4e0a\u9762\u6ca1\u6709\u529e\u6cd5\u83b7\u53d6name\u5c5e\u6027\n    \n    Assert.assertTrue(.Equals('tbTest', result[0].name());\n\n    query = \"> UIATextField[name!='tbTest']\";\n    result = $(query);\n    Assert.assertTrue(.Equals(0, result.length);\n    */\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "//\"(:first)\u83b7\u53d6\u7b2c\u4e00\u4e2a\u5143\u7d20\"\n", "func_signal": "@Test\npublic void Test13() throws IOException, RecognitionException", "code": "{\n\tiQueryParser parser = iQueryIdeParser.createParser(\"UIAWindow > UIAButton:first\");\n\tList<ITreeNode> candidates=  getRoot();\n\tList<ITreeNode> outTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"Pickers\"));\n\t\n\tparser = iQueryIdeParser.createParser(\"> UIASegmentedControl > UIAButton:first\");\n\toutTreeNodeList = parser.query(candidates);\n\tAssert.assertTrue( outTreeNodeList.size()==1);\n\tAssert.assertTrue( outTreeNodeList.get(0).getName().equalsIgnoreCase(\"First\"));\n}", "path": "hierarchyviewerlib.test\\src\\hierarchyviewerlib\\test\\AllTests.java", "repo_name": "vowei/HierarchyViewer-4-iOS", "stars": 28, "license": "None", "language": "java", "size": 2153}
{"docstring": "/**\n * If true, framerate and memory is periodically calculated and Log'ed,\n * and gettable thru fps()\n */\n", "func_signal": "public void logFps(boolean $b)", "code": "{\n    _logFps = $b;\n\n    if (_logFps) { // init\n        _timeLastSample = System.currentTimeMillis();\n        _frameCount = 0;\n    }\n}", "path": "src\\min3d\\core\\Renderer.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "/**\n * Resets Scene to default settings.\n * Removes and clears any attached Object3ds.\n * Resets light list.\n */\n", "func_signal": "public void reset()", "code": "{\n    clearChildren(this);\n\n    _children = new ArrayList<Object3d>();\n\n    _camera = new CameraVo();\n\n    _backgroundColor = new Color4Managed(0,0,0,255, this);\n\n    _lights = new ManagedLightList();\n\n    lightingEnabled(true);\n}", "path": "src\\min3d\\core\\Scene.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "//\n", "func_signal": "private void addVerticalSurface(boolean $isOuter)", "code": "{\n    int off = (_vertices.size() / 2);\n\n    for (int i = 0; i < _segs - 1; i++)\n    {\n        int ul = i*2;\n        int bl = ul + off;\n        int ur = i*2 + 2;\n        int br = ur + off;\n\n        if (!$isOuter) {\n            ul++;\n            bl++;\n            ur++;\n            br++;\n        }\n        addQuad(ul,bl,ur,br, $isOuter);\n    }\n\n    int ul = (_segs-1)*2;\n    int bl = ul + off;\n    int ur = 0*2;\n    int br = ur + off;\n\n    if (!$isOuter) {\n        ul++;\n        bl++;\n        ur++;\n        br++;\n    }\n\n    addQuad(ul,bl,ur,br, $isOuter);\n}", "path": "src\\min3d\\objectPrimitives\\HollowCylinder.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "/**\n * Convenience method which casts the int arguments to short for you.\n */\n", "func_signal": "public Color4(int $r, int $g, int $b, int $a)", "code": "{\n    r = (short)$r;\n    g = (short)$g;\n    b = (short)$b;\n    a = (short)$a;\n}", "path": "src\\min3d\\vos\\Color4.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "/**\n * Setting this to false stops the render loop, and initScene() and onInitScene() will no longer fire.\n * Setting this to true resumes it.\n */\n", "func_signal": "public void renderContinuously(boolean $b)", "code": "{\n    _renderContinuously = $b;\n    _glSurfaceView.setRenderMode(_renderContinuously ?\n        GLSurfaceView.RENDERMODE_CONTINUOUSLY : GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n}", "path": "src\\min3d\\core\\RendererActivity.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "/**\n * Convenience method\n */\n", "func_signal": "public void toFloatBuffer(FloatBuffer $floatBuffer)", "code": "{\n    $floatBuffer.position(0);\n    $floatBuffer.put(_x);\n    $floatBuffer.put(_y);\n    $floatBuffer.put(_z);\n    $floatBuffer.position(0);\n}", "path": "src\\min3d\\vos\\Number3dManaged.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "/**\n * Return available system memory in bytes\n */\n", "func_signal": "public long availMem()", "code": "{\n    _activityManager.getMemoryInfo(_memoryInfo);\n    return _memoryInfo.availMem;\n}", "path": "src\\min3d\\core\\Renderer.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "/**\n * Create a parser of the specified type.\n * @param type\n * @param resources\n * @param resourceID\n * @return\n */\n", "func_signal": "public static IParser createParser(Type type, Resources resources, String resourceID, boolean generateMipMap)", "code": "{\n    switch(type)\n    {\n        case OBJ:\n            return new ObjParser(resources, resourceID, generateMipMap);\n        case MAX_3DS:\n            return new Max3DSParser(resources, resourceID, generateMipMap);\n        case MD2:\n            return new MD2Parser(resources, resourceID, generateMipMap);\n    }\n\n    return null;\n}", "path": "src\\min3d\\parser\\Parser.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "//\n", "func_signal": "public void add(Face $f)", "code": "{\n    set( _numElements, $f );\n    _numElements++;\n}", "path": "src\\min3d\\core\\FacesBufferedList.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "/**\n * TODO: Use better lookup\n */\n", "func_signal": "public Object3d getChildByName(String $name)", "code": "{\n    for (int i = 0; i < _children.size(); i++)\n    {\n        if (_children.get(0).name() == $name) return _children.get(0);\n    }\n    return null;\n}", "path": "src\\min3d\\core\\Scene.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "/**\n * Convenience method to set all properties off one 32-bit argb value\n */\n", "func_signal": "public void setAll(long $argb32)", "code": "{\n    a = (short) (($argb32 >> 24) & 0x000000FF);\n    r = (short) (($argb32 >> 16) & 0x000000FF);\n    g = (short) (($argb32 >> 8) & 0x000000FF);\n    b = (short) (($argb32) & 0x000000FF);\n}", "path": "src\\min3d\\vos\\Color4.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "//\n", "func_signal": "public void initScene()", "code": "{\n\t\tscene.lights().add(new Light());\n\t\t\n\t\tIParser parser = Parser.createParser(Parser.Type.MD2,\n\t\t\t\tgetResources(), \"min3d.sampleProject1:raw/ogro\", false);\n\t\tparser.parse();\n\n\t\togre = parser.getParsedAnimationObject();\n\t\togre.scale().x = ogre.scale().y = ogre.scale().z = .07f;\n\t\togre.rotation().z = -90;\n\t\togre.rotation().x = -90;\n\t\tscene.addChild(ogre);\n\t\togre.setFps(70);\n\t}", "path": "sampleProjects\\min3dSampleProject1\\src\\min3d\\sampleProject1\\ExampleKeyframeAnimation.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "//boolean customResult = o.customRenderer(_gl);\n//if (customResult) return;\n", "func_signal": "protected void drawObject(Object3d $o)", "code": "{\n    if (!$o.isVisible()) return;\n\n    // Various per-object settings:\n\n    // Normals\n\n    if ($o.hasNormals() && $o.normalsEnabled()) {\n        $o.vertices().normals().buffer().position(0);\n        _gl.glNormalPointer(GL10.GL_FLOAT, 0, $o.vertices().normals().buffer());\n        _gl.glEnableClientState(GL10.GL_NORMAL_ARRAY);\n    } else {\n        _gl.glDisableClientState(GL10.GL_NORMAL_ARRAY);\n    }\n\n    // Is lighting enabled for object...\n\n    /*\n    // *** this version not working properly on emulator - why not? ***\n    _scratchIntBuffer.position(0);\n    _gl.glGetIntegerv(GL10.GL_LIGHTING, _scratchIntBuffer);\n    if (useLighting != _scratchIntBuffer.get(0)) {\n        if (useLighting == 1) {\n            _gl.glEnable(GL10.GL_LIGHTING);\n        } else {\n            _gl.glDisable(GL10.GL_LIGHTING);\n        }\n    }\n    */\n\n    boolean useLighting = (_scene.lightingEnabled() && $o.hasNormals() && $o.normalsEnabled() && $o.lightingEnabled());\n    if (useLighting) {\n        _gl.glEnable(GL10.GL_LIGHTING);\n    } else {\n        _gl.glDisable(GL10.GL_LIGHTING);\n    }\n\n    // Shademodel\n\n    _gl.glGetIntegerv(GL11.GL_SHADE_MODEL, _scratchIntBuffer);\n    if ($o.shadeModel().glConstant() != _scratchIntBuffer.get(0)) {\n        _gl.glShadeModel($o.shadeModel().glConstant());\n    }\n\n    // Colors: either per-vertex, or per-object\n\n    if ($o.hasVertexColors() && $o.vertexColorsEnabled()) {\n        $o.vertices().colors().buffer().position(0);\n        _gl.glColorPointer(4, GL10.GL_UNSIGNED_BYTE, 0, $o.vertices().colors().buffer());\n        _gl.glEnableClientState(GL10.GL_COLOR_ARRAY);\n    } else {\n        _gl.glColor4f(\n            $o.defaultColor().r / 255f,\n            $o.defaultColor().g / 255f,\n            $o.defaultColor().b / 255f,\n            $o.defaultColor().a / 255f\n        );\n        _gl.glDisableClientState(GL10.GL_COLOR_ARRAY);\n    }\n\n    // Colormaterial\n\n    _gl.glGetIntegerv(GL10.GL_COLOR_MATERIAL, _scratchIntBuffer);\n    _scratchB = (_scratchIntBuffer.get(0) != 0);\n    if ($o.colorMaterialEnabled() != _scratchB) {\n        if ($o.colorMaterialEnabled())\n            _gl.glEnable(GL10.GL_COLOR_MATERIAL);\n        else\n            _gl.glDisable(GL10.GL_COLOR_MATERIAL);\n    }\n\n    // Point size\n\n    if ($o.renderType() == RenderType.POINTS) {\n        if ($o.pointSmoothing())\n            _gl.glEnable(GL10.GL_POINT_SMOOTH);\n        else\n            _gl.glDisable(GL10.GL_POINT_SMOOTH);\n\n        _gl.glPointSize($o.pointSize());\n    }\n\n    // Line properties\n\n    if ($o.renderType() == RenderType.LINES || $o.renderType() == RenderType.LINE_STRIP || $o.renderType() == RenderType.LINE_LOOP) {\n        if ($o.lineSmoothing()) {\n            _gl.glEnable(GL10.GL_LINE_SMOOTH);\n        } else {\n            _gl.glDisable(GL10.GL_LINE_SMOOTH);\n        }\n\n        _gl.glLineWidth($o.lineWidth());\n    }\n\n    // Backface culling\n\n    if ($o.doubleSidedEnabled()) {\n        _gl.glDisable(GL10.GL_CULL_FACE);\n    } else {\n        _gl.glEnable(GL10.GL_CULL_FACE);\n    }\n\n\n    drawObject_textures($o);\n\n\n    // Matrix operations in modelview\n\n    _gl.glPushMatrix();\n\n    _gl.glTranslatef($o.position().x, $o.position().y, $o.position().z);\n\n    _gl.glRotatef($o.rotation().x, 1,0,0);\n    _gl.glRotatef($o.rotation().y, 0,1,0);\n    _gl.glRotatef($o.rotation().z, 0,0,1);\n\n    _gl.glScalef($o.scale().x, $o.scale().y, $o.scale().z);\n\n    // Draw\n\n    $o.vertices().points().buffer().position(0);\n    _gl.glVertexPointer(3, GL10.GL_FLOAT, 0, $o.vertices().points().buffer());\n\n    if (! $o.ignoreFaces()) {\n        int pos, len;\n\n        if (! $o.faces().renderSubsetEnabled()) {\n            pos = 0;\n            len = $o.faces().size();\n        } else {\n            pos = $o.faces().renderSubsetStartIndex() * FacesBufferedList.PROPERTIES_PER_ELEMENT;\n            len = $o.faces().renderSubsetLength();\n        }\n\n        $o.faces().buffer().position(pos);\n\n        _gl.glDrawElements(\n                $o.renderType().glValue(),\n                len * FacesBufferedList.PROPERTIES_PER_ELEMENT,\n                GL10.GL_UNSIGNED_SHORT,\n                $o.faces().buffer());\n    } else {\n        _gl.glDrawArrays($o.renderType().glValue(), 0, $o.vertices().size());\n    }\n\n    //\n    // Recurse on children\n    //\n\n    if ($o instanceof Object3dContainer) {\n        Object3dContainer container = (Object3dContainer)$o;\n\n        for (Object3d o : container.children()) {\n            drawObject(o);\n        }\n    }\n\n    // Restore matrix\n\n    _gl.glPopMatrix();\n}", "path": "src\\min3d\\core\\Renderer.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "//\n", "func_signal": "public void setAll(float $x, float $y, float $z)", "code": "{\n    x = $x;\n    y = $y;\n    z = $z;\n}", "path": "src\\min3d\\vos\\Number3d.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "/**\n * Convenience method which casts the float arguments to short for you.\n */\n", "func_signal": "public Color4(float $r, float $g, float $b, float $a)", "code": "{\n    r = (short)$r;\n    g = (short)$g;\n    b = (short)$b;\n    a = (short)$a;\n}", "path": "src\\min3d\\vos\\Color4.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "/**\n * Adds Object3d to Scene. Object3ds must be added to Scene in order to be rendered\n * Returns always true.\n */\n", "func_signal": "public void addChild(Object3d $o)", "code": "{\n    if (_children.contains($o)) return;\n\n    _children.add($o);\n\n    $o.parent(this);\n    $o.scene(this);\n}", "path": "src\\min3d\\core\\Scene.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "/**\n * Removes Object3d from Scene.\n * Returns false if unsuccessful\n */\n", "func_signal": "public boolean removeChild(Object3d $o)", "code": "{\n    $o.parent(null);\n    $o.scene(null);\n    return _children.remove($o);\n}", "path": "src\\min3d\\core\\Scene.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "/**\n *  Convenience method to set all properties in one line.\n */\n", "func_signal": "public void setAll(short $r, short $g, short $b, short $a)", "code": "{\n    r = $r;\n    g = $g;\n    b = $b;\n    a = $a;\n}", "path": "src\\min3d\\vos\\Color4.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "/**\n * Convenience method\n */\n", "func_signal": "public void setAll(int $pname, int $param)", "code": "{\n    pname = $pname;\n    param = $param;\n}", "path": "src\\min3d\\vos\\TexEnvxVo.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "//\n", "func_signal": "public void add(Uv $uv)", "code": "{\n    set( _numElements, $uv );\n    _numElements++;\n}", "path": "src\\min3d\\core\\UvBufferList.java", "repo_name": "deadmoose/min3d", "stars": 20, "license": "None", "language": "java", "size": 7511}
{"docstring": "/** Appends seven instruction sequences */\n", "func_signal": "protected static Sequence appendSequences(\n    Sequence seq1, Sequence seq2, Sequence seq3,\n    Sequence seq4, Sequence seq5, Sequence seq6,\n    Sequence seq7)", "code": "{\n    return seq1.appendSequence(seq2).appendSequence(seq3)\n               .appendSequence(seq4).appendSequence(seq5)\n               .appendSequence(seq6).appendSequence(seq7);\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\scheme\\SchemeCompiler.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Compiles all the operands.  n is the index of this operand.\n * If there are fewer than maxDirectArgs arguments, each is just pushed\n * onto the stack.  If not, then each is added to the array which\n * compileOperands will push onto the stack.\n */\n", "func_signal": "protected Sequence compileOperands(\n    Object rands, int num_rands)\n    throws SchemeException", "code": "{\n    Sequence seq = new EmptySequence();\n    if(num_rands <= maxDirectArgs)\n    {\n        while(rands instanceof Cons)\n        {\n            seq = appendSequences(\n                seq,\n                compileExpression(SchemeSyntax.firstOperand(rands)));\n            rands = SchemeSyntax.restOperands(rands);\n        }\n    }\n    else\n    {\n        while(rands instanceof Cons)\n        {\n            seq = appendSequences(\n                seq,\n                new New(\"COM/sootNsmoke/scheme/Cons\"),\n                new Dup(),\n                compileExpression(SchemeSyntax.firstOperand(rands)));\n            rands = SchemeSyntax.restOperands(rands);\n        }\n        seq = appendSequences(\n            seq,\n            new AconstNull());\n        for(int i = 0; i < num_rands; i++)\n        {\n            seq = appendSequences(\n                seq,\n                new InvokeSpecial(\n                    \"COM/sootNsmoke/scheme/Cons\",\n                    \"<init>\",\n                    \"(Ljava/lang/Object;Ljava/lang/Object;)V\",\n                    2));\n        }\n    }\n    return seq;\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\scheme\\SchemeCompiler.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Compiles an expression into a complete method body.\n * This is basically just compiling the expression, with\n * a little code around it to set up the binding environment\\\n * and return the result.\n */\n", "func_signal": "public Sequence compileTopLevelFunction(Object exp)\n    throws SchemeException", "code": "{\n    return appendSequences(\n        new Aload(0),\n        new Getfield(\n            \"COM/sootNsmoke/scheme/CompiledProcedure\",\n            \"env\",\n            \"LCOM/sootNsmoke/scheme/BindingEnv;\"),\n        new Astore(1),\n        compileExpression(exp),\n        new Areturn());\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\scheme\\SchemeCompiler.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Arguments to this class are a list of file names. Produces\n * a hex dump to the standard output\n */\n", "func_signal": "public static void main(String[] a)", "code": "{\n    // Parse args\n    int next_arg = 0;\n\n    for(int i = next_arg; i < a.length; i++)\n    {\n        try\n        {\n            InputStream is = new FileInputStream(a[i]);\n            dump(System.out, is);\n        }\n        catch(Exception e)\n        {\n            System.err.println(e.getMessage());\n        }\n        System.out.flush();\n    }\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\oolong\\hd.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Syntax: (and <test1> ...)\n * The <test> expressions are evaluated from left to right,\n * and the value of the first expression that evaluates\n * to a false value is returned.  Any remaining expresisons\n * are not evaluated.  If all the expressions evaluate to\n * true values, the value of the last expression is returned.\n * If there are no expressions then #t is returned\n *\n *\n * Compiles to:\n *    <test1>\n *    dup\n *    getfield java/lang/Boolean/FALSE Ljava/lang/Boolean;\n *    if_acmpeq done\n *    pop\n *    [repeat for tests 2..n-1]\n *    <testn>\n * done:\n */\n", "func_signal": "protected Sequence compileAnd(Object cond) throws SchemeException", "code": "{\n\n    Sequence seq = comment(write(cond));\n    String done = Counter.makeNewLabel(\"done\");\n\n    Cons c = (Cons) cond;\n\n    if(c.cdr() instanceof Cons)\n    {\n        c = (Cons) c.cdr();\n        Object expr = c.car();\n        seq = seq.append(compileExpression(expr));\n        while(true)\n        {\n            if(c.cdr() instanceof Cons)\n                c = (Cons) c.cdr();\n            else if(c.cdr() == null)\n                break;\n            else\n                throw new SyntaxError(\"Improper list in and expression \" +\n                    write(c));\n\n            expr = c.car();\n\n            seq = appendSequences(\n                seq,\n                dup(),\n                getstatic(\"java/lang/Boolean\",\n                         \"FALSE\",\n                         \"Ljava/lang/Boolean;\"),\n                if_acmpeq(done),\n                pop(),\n                compileExpression(expr));\n        }\n        seq = seq.append(label(done));\n    }\n    else\n        seq = seq.append(getstatic(\"java/lang/Boolean\",\n                         \"TRUE\",\n                         \"Ljava/lang/Boolean;\"));\n    return seq;\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\scheme\\SchemeCompiler.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Syntax: (set! <variable> <expression>)\n * <expresion> is evaluated, and teh resulting value is\n * stored in the location to which <variable> is bound.\n * <Variable> must be bound either in some region enclosing\n * the set! expresion or at top level.  The result of the\n * set! expression is undefined.\n *\n * Compiles to:\n *    aload_1\n *    <variable>\n *    <expression>\n *    invokevirtual BindingEnv/set(LString;LObject;)V\n *    aconst_null\n */\n", "func_signal": "protected Sequence compileSetBang(Object exp) throws SchemeException", "code": "{\n    Object body = ((Cons) exp).cdr();\n    if(!(body instanceof Cons))\n        throw new SyntaxError(\"Invalid set! expression \" +\n            write(exp));\n    Object variable = ((Cons) body).car();\n    Object expr = ((Cons) body).cdr();\n    return appendSequences(\n        aload(1),\n        compileConstant(((Symbol) variable).getName()),\n        compileSequence(expr),\n        invokevirtual(\"COM/sootNsmoke/scheme/BindingEnv\",\n                      \"set\",\n                      \"(Ljava/lang/String;Ljava/lang/Object;)V\"),\n        aconst_null());\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\scheme\\SchemeCompiler.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Compiles a sequence.  The sequence\n * takes the form (expr1 expr2 ... exprn) and compiles it\n * into:\n *    <expr1>\n *    pop\n *    <expr2>\n *    pop\n *    ...\n *    <exprn>\n */\n", "func_signal": "protected Sequence compileSequence(\n    Object seq) throws SchemeException", "code": "{\n    if(SchemeSyntax.isNull(seq))\n        return aconst_null();\n    if(SchemeSyntax.isLastExp(seq))\n        return compileExpression(SchemeSyntax.firstExp(seq));\n    else\n        return appendSequences(\n            compileExpression(SchemeSyntax.firstExp(seq)),\n            new Pop(),\n            compileSequence(SchemeSyntax.restExps(seq)));\n\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\scheme\\SchemeCompiler.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/**\n * An if expression of the form (if test consequent alternative)\n * is implemented as:\n *     test\n *     if true goto l1\n *     alternative\n *     goto l2:\n * l1:\n *     consequent\n * l2:\n */\n", "func_signal": "protected Sequence compileIf(Object exp) throws SchemeException", "code": "{\n    Object test_expr = SchemeSyntax.testOf(exp);\n    Object true_expr = SchemeSyntax.consequenceOf(exp);\n    Object false_expr = SchemeSyntax.alternateOf(exp);\n\n    String l1 = Counter.makeNewLabel(\"label\");\n    String l2 = Counter.makeNewLabel(\"label\");\n    Sequence test = compileExpression(test_expr);\n    Sequence consequent =\n        appendSequences(\n            new Label(l1),\n            compileExpression(true_expr));\n    Sequence alternative =\n        appendSequences(\n            compileExpression(false_expr),\n            new Goto(l2));\n\n    Sequence alternative_and_consequent =\n        parallelSequences(alternative, consequent);\n    Sequence seq = appendSequences(\n        test,\n        new Getstatic(\"java/lang/Boolean\",\n                                 \"FALSE\",\n                                 \"Ljava/lang/Boolean;\"),\n        new IfAcmpNe(l1),\n        alternative_and_consequent,\n        new Label(l2));\n    return seq;\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\scheme\\SchemeCompiler.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Returns arg1/arg2. */\n", "func_signal": "public static Number divide(Number arg1, Number arg2)", "code": "{\n    if(arg1 instanceof Integer && arg2 instanceof Integer)\n    {\n        int a = ((Integer) arg1).intValue();\n        int b = ((Integer) arg2).intValue();\n        if(b == 1)\n            return arg1;\n        return new Rational(a, b);\n    }\n    if(arg1 instanceof Float && arg2 instanceof Float)\n    {\n        Float a = (Float) arg1;\n        Float b = (Float) arg2;\n        return new Float(a.floatValue() / b.floatValue());\n    }\n    if(arg1 instanceof Complex || arg2 instanceof Complex)\n    {\n        Complex a = Complex.coerceComplex(arg1);\n        Complex b = Complex.coerceComplex(arg2);\n        return a.divide(b);\n    }\n    if(arg1 instanceof Double || arg1 instanceof Float ||\n       arg2 instanceof Double || arg2 instanceof Float)\n    {\n        double a = ((Number) arg1).doubleValue();\n        double b = ((Number) arg2).doubleValue();\n        if(arg1 instanceof Double || arg2 instanceof Double)\n            return new Double(a/b);\n        else\n            return new Float(a/b);\n    }\n    if(arg1 instanceof Rational || arg2 instanceof Rational)\n    {\n        Rational a = Rational.coerceRational(arg1);\n        Rational b = Rational.coerceRational(arg2);\n        return a.divide(b);\n    }\n    if(arg1 instanceof Integer || arg1 instanceof Long ||\n       arg2 instanceof Integer || arg2 instanceof Long)\n    {\n        long a = ((Number) arg1).longValue();\n        long b = ((Number) arg2).longValue();\n        if(b == 1)\n            return arg1;\n        return new Rational(a, b);\n    }\n    throw new SchemeException(\"Cannot multiply \" +\n        arg1 + \" and \" + arg2);\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\scheme\\Numbers.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Takes a string {boolean, char, float, double, byte,\n * short, int, long } and returns the corresponding atype.\n * If it's none, returns -1.\n */\n", "func_signal": "public static byte atype(String str)", "code": "{\n    if(str.length() == 1)\n    {\n        switch(str.charAt(0))\n        {\n            case 'Z':\n                return (byte) T_BOOLEAN;\n            case 'C':\n                return (byte) T_CHAR;\n            case 'F':\n                return (byte) T_FLOAT;\n            case 'D':\n                return (byte) T_DOUBLE;\n            case 'B':\n                return (byte) T_BYTE;\n            case 'S':\n                return (byte) T_SHORT;\n            case 'I':\n                return (byte) T_INT;\n            case 'J':\n                return (byte) T_LONG;\n            default:\n                return (byte) -1;\n        }\n    }\n\n    if(str.equals(\"boolean\"))\n        return (byte) T_BOOLEAN;\n    else if(str.equals(\"char\"))\n        return (byte) T_CHAR;\n    else if(str.equals(\"float\"))\n        return (byte) T_FLOAT;\n    else if(str.equals(\"double\"))\n        return (byte) T_DOUBLE;\n    else if(str.equals(\"byte\"))\n        return (byte) T_BYTE;\n    else if(str.equals(\"short\"))\n        return (byte) T_SHORT;\n    else if(str.equals(\"int\"))\n        return (byte) T_INT;\n    else if(str.equals(\"long\"))\n        return (byte) T_LONG;\n    try\n    {\n        int i = Integer.parseInt(str);\n        return (byte) i;\n    }\n    catch(Exception e)\n    {\n        // Badly formatted number\n    }\n\n    return (byte) -1;\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\instructions\\Newarray.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Compiles a Scheme expression (define var value) into\n * env.bind(var, <value>)\n */\n", "func_signal": "protected Sequence compileDefinition(\n    Object exp) throws SchemeException", "code": "{\n    Object variable = SchemeSyntax.definitionVariable(exp);\n    return appendSequences(\n    new Aload(1),\n    new Ldc(((Symbol) variable).getName()),\n    compileExpression(SchemeSyntax.definitionValue(exp)),\n    new InvokeVirtual(\n        \"COM/sootNsmoke/scheme/BindingEnv\",\n        \"bind\",\n        \"(Ljava/lang/String;Ljava/lang/Object;)V\",\n         2),\n    new AconstNull());\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\scheme\\SchemeCompiler.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Converts the instruction sequence into an array of bytes.\n * Constants are put into the JavaClass cf.\n */\n", "func_signal": "public byte[] toByteArray(JavaClass cf) throws UndefinedLabelException", "code": "{\n    Bytecodes bc = new Bytecodes(this, cf);\n    return bc.toByteArray();\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\instructions\\Sequence.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Generate code to extend the environment with the arguments */\n", "func_signal": "protected Sequence makeEnvironmentSwitch(Object params)", "code": "{\n    int num_params = numParams(params);\n    // Push a new binding environment on the stack\n    Sequence seq = appendSequences(\n        new Aload(0),\n        new Getfield(\"COM/sootNsmoke/scheme/CompiledProcedure\",\n                     \"env\",\n                     \"LCOM/sootNsmoke/scheme/BindingEnv;\"),\n        new InvokeVirtual(\"COM/sootNsmoke/scheme/BindingEnv\",\n                          \"push\",\n                          \"()LCOM/sootNsmoke/scheme/BindingEnv;\",\n                          0));\n\n    Object params_list = params;\n\n    // Special case where there are only a few parameters\n    if(num_params <= maxDirectArgs &&\n       num_params != arbitraryParameterLength)\n    {\n        int num_args = 0;\n        while(params_list != null)\n        {\n            Symbol sym = (Symbol) ((Cons) params_list).car();\n            params_list = ((Cons) params_list).cdr();\n\n            // Push the binding environment into which this arg will be bound\n            // Put the symbol name on the stack\n            // Put the arg on the stack\n            // Do the binding\n            seq = appendSequences(\n                seq,\n                new Dup(),\n                new Ldc(((Symbol) sym).getName()),\n                new Aload(num_args+1),\n                new InvokeVirtual(\n                    \"COM/sootNsmoke/scheme/BindingEnv\",\n                    \"bind\",\n                    \"(Ljava/lang/String;Ljava/lang/Object;)V\",\n                    2));\n            num_args++;\n        }\n    }\n    else    // General case (many params, or variable number\n    {\n        // cdr down the list of params.\n        // For each one, bind the car of the argument list to it\n        while(params_list instanceof Cons)\n        {\n            Symbol sym = (Symbol) ((Cons) params_list).car();\n            params_list = ((Cons) params_list).cdr();\n\n            seq = appendSequences(\n                seq,\n                new Dup(),\n                new Ldc(((Symbol) sym).getName()),\n                appendSequences(\n                    new Aload(1),\n                    new CheckCast(\"COM/sootNsmoke/scheme/Cons\"),\n                    new InvokeVirtual(\n                        \"COM/sootNsmoke/scheme/Cons\",\n                        \"car\",\n                        \"()Ljava/lang/Object;\",\n                        0),\n                    new InvokeVirtual(\n                        \"COM/sootNsmoke/scheme/BindingEnv\",\n                        \"bind\",\n                        \"(Ljava/lang/String;Ljava/lang/Object;)V\",\n                        2)),\n                appendSequences(\n                    new Aload(1),\n                    new CheckCast(\"COM/sootNsmoke/scheme/Cons\"),\n                    new InvokeVirtual(\n                        \"COM/sootNsmoke/scheme/Cons\",\n                        \"cdr\",\n                        \"()Ljava/lang/Object;\",\n                        0),\n                    new Astore(1)));\n        }\n\n        // If there's a symbol left, bind the rest of the list to it\n        if(params_list instanceof Symbol)\n        {\n\t\t    Symbol sym = (Symbol) params_list;\n            seq = appendSequences(\n                seq,\n                new Dup(),\n                new Ldc(((Symbol) sym).getName()),\n                new Aload(1),\n        \t    new InvokeVirtual(\n        \t        \"COM/sootNsmoke/scheme/BindingEnv\",\n                    \"bind\",\n                    \"(Ljava/lang/String;Ljava/lang/Object;)V\",\n                    2));\n        }\n    }\n\n    // Store new env in a convenient place\n    return appendSequences(\n        seq,\n        new Astore(1));\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\scheme\\SchemeCompiler.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Syntax: (case <key> <clause1> <clause2> ...)\n * <Key> may be any expression.  Each <clause>\n * should have the form:\n *     ((<datum1> ...) <expression1> <expression2>)\n * where each <datum,> is a external represetnation fo some\n * object.  All the <datum>s must be distinct.  The last\n * <clause> may be an \"else clause\", which has the form:\n *     (else <expression1> <expression2> ...)\n * Semantics: A case expression is evaluated as follows.\n * <Key> is evaluated and its result is compared against each\n * <datum>.  If the result of evaluating <key> is equivalent\n * (in the sense of eqv?) to a <datum>, then the expressions\n * are evaluated from left to right and the result of the lsat\n * expression in the <clause> is returned as the result of\n * the case expression.  If the result of evaluating <key>\n * is different frome very <datum>, then if there is an else\n * clause its expressions are evaluated and the result of the\n * lasat is the result of the case expression; otherwise,\n * the result of the case expression is unspecified.\n *\n * Compiles to:\n *    <key>\n *    dup\n *    <clause1-datum1>\n *    invokestatic isEqv/isEqv\n *    ifne label1:\n *    [more datum comparisons]\n *    goto label2\n * label1\n *    <clause1-expression1> <clause1-expression2> ...\n *    goto end\n * label2:\n *    [more clauses]\n * else:\n *    <else-clause>  (or aconst_null)\n * end:\n */\n", "func_signal": "protected Sequence compileCase(Object exp) throws SchemeException", "code": "{\n    Sequence else_seq = null;\n    String end = Counter.makeNewLabel(\"end\");\n    Cons c = (Cons) ((Cons) exp).cdr();\n    Object key_expr = c.car();\n    Sequence seq = compileExpression(key_expr);\n\n    while(c.cdr() != null)\n    {\n        c = (Cons) c.cdr();\n        Cons clause = (Cons) c.car();\n        if(SchemeSyntax.isForm(clause, \"else\"))\n        {\n            Object expressions = clause.cdr();\n            else_seq = compileSequence(expressions);\n        }\n        else\n        {\n            Object data = clause.car();\n            Object expressions = clause.cdr();\n            if(!(data instanceof Cons))\n                throw new SchemeException(\"Elements of case must be a list\");\n            Cons datums = (Cons) data;\n            Sequence datums_seq = comment(\n                \"Compare \" + key_expr + \" to \" + data);\n            String label1 = Counter.makeNewLabel(\"label1_\");\n            String label2 = Counter.makeNewLabel(\"label2_\");\n            while(datums != null)\n            {\n                Object datum = datums.car();\n                datums = (Cons) datums.cdr();\n                datums_seq = appendSequences(\n                    datums_seq,\n                    dup(),\n                    compileConstant(datum),\n                    invokestatic(\"COM/sootNsmoke/scheme/SchemeLibrary\",\n                                 \"isEqv\",\n                                 \"(Ljava/lang/Object;Ljava/lang/Object;)Z\"),\n                    ifne(label1));\n            }\n            seq = parallelSequences(\n                seq,\n                appendSequences(\n                    datums_seq,\n                    goto_(label2),\n                    label(label1),\n                    compileSequence(expressions),\n                    goto_(end),\n                    label(label2)));\n        }\n    }\n\n    if(else_seq == null)\n        else_seq = new AconstNull();\n\n    seq = parallelSequences(seq, else_seq).append(\n        new Label(end));\n    return seq;\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\scheme\\SchemeCompiler.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Multply two numbers.  See add for more about\n * how this relates to the type system.\n */\n", "func_signal": "public static Number multiply(Number arg1, Number arg2)", "code": "{\n    if(arg1 instanceof Integer && arg2 instanceof Integer)\n    {\n        Integer a = (Integer) arg1;\n        Integer b = (Integer) arg2;\n        return new Integer(a.intValue() * b.intValue());\n    }\n    if(arg1 instanceof Float && arg2 instanceof Float)\n    {\n        Float a = (Float) arg1;\n        Float b = (Float) arg2;\n        return new Float(a.floatValue() * b.floatValue());\n    }\n    if(arg1 instanceof Complex || arg2 instanceof Complex)\n    {\n        Complex a = Complex.coerceComplex(arg1);\n        Complex b = Complex.coerceComplex(arg2);\n        return a.multiply(b);\n    }\n    if(arg1 instanceof Double || arg1 instanceof Float ||\n       arg2 instanceof Double || arg2 instanceof Float)\n    {\n        double a = ((Number) arg1).doubleValue();\n        double b = ((Number) arg2).doubleValue();\n        if(arg1 instanceof Double || arg2 instanceof Double)\n            return new Double(a*b);\n        else\n            return new Float(a*b);\n    }\n    if(arg1 instanceof Rational || arg2 instanceof Rational)\n    {\n        Rational a = Rational.coerceRational(arg1);\n        Rational b = Rational.coerceRational(arg2);\n        return a.multiply(b);\n    }\n    if(arg1 instanceof Integer || arg1 instanceof Long ||\n       arg2 instanceof Integer || arg2 instanceof Long)\n    {\n        long a = ((Number) arg1).longValue();\n        long b = ((Number) arg2).longValue();\n        return new Long(a*b);\n    }\n    throw new SchemeException(\"Cannot multiply \" +\n        arg1 + \" and \" + arg2);\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\scheme\\Numbers.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Create a new Sequence with the given max_stack, net_stack and\n * max_vars\n */\n", "func_signal": "protected Sequence(int max_stack, int net_stack, int max_vars)", "code": "{\n    this.max_stack = max_stack;\n    this.net_stack = net_stack;\n    this.max_vars = max_vars;\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\instructions\\Sequence.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Generates code to give the variable the value of init, where init\n * is code which leaves the initial value of the variable on the stack.\n */\n", "func_signal": "protected Sequence makeVariableBinding(Object variable, Sequence init)", "code": "{\n    Sequence seq = appendSequences(\n        new Aload(1),\n        new Ldc(((Symbol) variable).getName()),\n        appendSequences(\n            init,\n            new InvokeVirtual(\n                \"COM/sootNsmoke/scheme/BindingEnv\",\n                \"bind\",\n                \"(Ljava/lang/String;Ljava/lang/Object;)V\",\n                 2),\n            new AconstNull()));\n    return seq;\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\scheme\\SchemeCompiler.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Compiles a form of the form (cond <clause1> <clause2>...),\n * where each <clause> is of the form:\n *    (<test> <expression1>, <expression2>, ...)).\n * Semantics: A cond expresison is evaluated by evaluating the\n * <test> expressions of successive <clauses>s in order until\n * one of them eavlauates to a true value.  When a <test>\n * evaluates to a true value, then the remaining <expressions>\n * in its <clause> are evaluated in order,and the result of the\n * last <expression> in the <clause> is returned as the result\n * of the entire <cond> expression.  If the selected <clause>\n * contains only the <test> and no <expressions>s then the\n * value of the <test> is returned as the result.  If all\n * <test>s evaluate to false values, and there is no else cause,\n * then the result of the conditional expression is unspecified;\n * if there is an else clause, then it's expressions are\n * evaluated, and the value of the last one is returned. */\n", "func_signal": "protected Sequence compileCond(Object cond) throws SchemeException", "code": "{\n    Sequence seq = new EmptySequence();\n    Sequence else_seq = null;\n    String end = Counter.makeNewLabel(\"end\");\n    Cons c = (Cons) cond;\n\n    while(c.cdr() != null)\n    {\n        c = (Cons) c.cdr();\n        Cons clause = (Cons) c.car();\n        String l2 = Counter.makeNewLabel(\"label\");\n        if(SchemeSyntax.isForm(clause, \"else\"))\n        {\n            Object expressions = clause.cdr();\n            else_seq = compileSequence(expressions);\n        }\n        else\n        {\n            Object test = clause.car();\n            Object expressions = clause.cdr();\n            Sequence test_seq = compileExpression(test);\n            Sequence expr_seq = compileSequence(expressions);\n            Sequence clause_seq =\n                        test_seq\n                .append(new Getstatic(\"java/lang/Boolean\",\n                             \"FALSE\",\n                             \"Ljava/lang/Boolean;\"))\n                .append(new IfAcmpEq(l2))\n                .append(expr_seq)\n                .append(new Goto(end))\n                .append(new Label(l2));\n            seq = parallelSequences(seq, clause_seq);\n        }\n    }\n\n    if(else_seq == null)\n        else_seq = new AconstNull();\n\n    seq = parallelSequences(seq, else_seq).append(\n        new Label(end));\n    return seq;\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\scheme\\SchemeCompiler.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/** Coerce n to be a rational number, if possible */\n", "func_signal": "public static Rational coerceRational(Object n)", "code": "{\n    if(n instanceof Rational)\n        return (Rational) n;\n    if(n instanceof Integer || n instanceof Long)\n        return new Rational(((Number) n).longValue(), 1);\n    throw new SchemeException(n + \" cannot be coerced to a rational\");\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\scheme\\Rational.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "/**\n * Returns a new Sequence which places a reference to\n * the compiled procedure on the stack.  The body is\n * compiled into a compiled procedure, which is loaded\n * using the loader.\n *\n */\n", "func_signal": "protected Sequence compileLambda(\n    Object exp) throws SchemeException", "code": "{\n    String lambda_name = Counter.makeNewLabel(\"lambda\");\n    Sequence code = compileLambdaBody(exp);\n\n    int num_params = numParams(SchemeSyntax.lambdaParameters(exp));\n    JavaClass javaclass = buildClass(lambda_name, code, num_params);\n\n    try {\n        ByteArrayOutputStream os = new java.io.ByteArrayOutputStream();\n        javaclass.write(os);\n        loader.load(lambda_name, os.toByteArray());\n    }\n    catch(Exception e)\n    {\n        // Not really expecting exceptions here\n        e.printStackTrace();\n    }\n\n    Sequence createClosure =\n        appendSequences(\n            new New(lambda_name),\n            new Dup(),\n            new Aload(1),\n            new InvokeSpecial(\n                lambda_name,\n                \"<init>\",\n                \"(LCOM/sootNsmoke/scheme/BindingEnv;)V\",\n                1));\n\n    return createClosure;\n}", "path": "src\\main\\java\\COM\\sootNsmoke\\scheme\\SchemeCompiler.java", "repo_name": "ymasory/programming-for-the-jvm", "stars": 21, "license": "other", "language": "java", "size": 229}
{"docstring": "// Default Tx Attribute; create a new Tx if not present, else use the existing\n", "func_signal": "public BigDecimal withdraw(long accountId, BigDecimal amount) throws IllegalArgumentException,\n      InsufficientBalanceException", "code": "{\n   // Get the account\n   final Account account = this.getAccount(accountId);\n\n   // Withdraw\n   return account.withdraw(amount);\n}", "path": "ch17-transactions\\src\\main\\java\\org\\jboss\\ejb3\\examples\\ch17\\transactions\\impl\\BankBean.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "/**\n * Obtains the base of the code source\n */\n", "func_signal": "private static URL getBaseConnectUrl()", "code": "{\n   try\n   {\n      return new URL(\"http://localhost:\" + HTTP_TEST_BIND_PORT);\n   }\n   catch (final MalformedURLException e)\n   {\n      throw new RuntimeException(\"Error in creating the base URL during set setup\", e);\n   }\n}", "path": "ch07-rsscache\\src\\test\\java\\org\\jboss\\ejb3\\examples\\ch07\\rsscache\\RssCacheUnitTestCase.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "// Don't require a Tx is in play, but respect a currently-operating \n// one so we get the correct visibility from inside the Tx\n", "func_signal": "public BigDecimal getBalance(long accountId) throws IllegalArgumentException", "code": "{\n   // Get the account\n   final Account account = this.getAccount(accountId);\n\n   // We don't expose this account object to callers at all; its changes\n   // elsewhere in the (optional) Tx should not be synchronized with the DB\n   // in case of a write\n   em.detach(account);\n\n   // Return the current balance\n   return account.getBalance();\n\n}", "path": "ch17-transactions\\src\\main\\java\\org\\jboss\\ejb3\\examples\\ch17\\transactions\\impl\\BankBean.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "// Default Tx Attribute; create a new Tx if not present, else use the existing\n", "func_signal": "public void transfer(long accountIdFrom, long accountIdTo, BigDecimal amount) throws IllegalArgumentException,\n      InsufficientBalanceException", "code": "{\n   // Get the accounts in question\n   final Account accountFrom = this.getAccount(accountIdFrom);\n   final Account accountTo = this.getAccount(accountIdTo);\n\n   // Delegate\n   this.transfer(accountFrom, accountTo, amount);\n\n}", "path": "ch17-transactions\\src\\main\\java\\org\\jboss\\ejb3\\examples\\ch17\\transactions\\impl\\BankBean.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "/**\n * Obtains the {@link Account} with the specified ID\n * \n * @throws IllegalArgumentException If the ID does not represent a valid Account\n */\n", "func_signal": "private Account getAccount(final long accountId) throws IllegalArgumentException", "code": "{\n   // Get the account\n   final Account account;\n   try\n   {\n      account = em.find(Account.class, new Long(accountId));\n   }\n   // Translate the exception; we were given a bad input\n   catch (final EntityNotFoundException enfe)\n   {\n      throw new IllegalArgumentException(\"Could not find account with ID \" + accountId);\n   }\n\n   // Return\n   return account;\n}", "path": "ch17-transactions\\src\\main\\java\\org\\jboss\\ejb3\\examples\\ch17\\transactions\\impl\\BankBean.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "/**\n * Deposits the specified amount from the account, returning the \n * new balance.\n * @param amount\n * @throws IllegalArgumentException\n */\n", "func_signal": "@Transient\npublic BigDecimal deposit(final BigDecimal amount) throws IllegalArgumentException", "code": "{\n   // Precondition checks\n   if (amount == null)\n   {\n      throw new IllegalArgumentException(\"amount must be specified\");\n   }\n\n   // Add and return the new balance\n   final BigDecimal newBalanceShoes = balance.add(amount);\n   this.setBalance(newBalanceShoes);\n   return newBalanceShoes;\n}", "path": "ch17-transactions\\src\\main\\java\\org\\jboss\\ejb3\\examples\\ch17\\transactions\\entity\\Account.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "/**\n * Creates a POJO instance to mock the real Container EJB @Singleton\n * before any tests are run\n */\n", "func_signal": "@BeforeClass\npublic static void createPojo()", "code": "{\n   // Instanciate and set\n   final TestRssCacheBean bean = new TestRssCacheBean();\n   RssCacheUnitTestCase.bean = bean;\n   log.info(\"Created POJO instance: \" + bean);\n\n   // Set the URL of the Mock RSS File\n   URL url = null;\n   try\n   {\n      url = new URL(getBaseConnectUrl(), FILENAME_RSS_FEED);\n   }\n   catch (final MalformedURLException murle)\n   {\n      throw new RuntimeException(\"Error in test setup while constructing the mock RSS feed URL\", murle);\n   }\n   bean.setUrl(url);\n\n   // Mock container initialization upon the bean\n   bean.refresh();\n}", "path": "ch07-rsscache\\src\\test\\java\\org\\jboss\\ejb3\\examples\\ch07\\rsscache\\RssCacheUnitTestCase.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "/**\n * {@inheritDoc}\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n   return Task.class.getSimpleName() + \" [description=\" + description + \", owners=\" + owners + \", getId()=\"\n         + getId() + \"]\";\n}", "path": "ch09-14-employeeregistry\\src\\main\\java\\org\\jboss\\ejb3\\examples\\employeeregistry\\ch11\\relationships\\Task.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "/**\n * {@inheritDoc}\n * @see javax.jms.MessageListener#onMessage(javax.jms.Message)\n */\n", "func_signal": "@Override\npublic void onMessage(final Message message)", "code": "{\n   // Cast\n   if (!(message instanceof TextMessage))\n   {\n      throw new IllegalArgumentException(\"Expecting message of type \" + TextMessage.class.getName() + \"; got: \"\n            + message);\n   }\n\n   final TextMessage txtMessage = (TextMessage) message;\n   final String contents;\n   try\n   {\n      contents = txtMessage.getText();\n   }\n   catch (final JMSException e)\n   {\n      throw new RuntimeException(\"Could not get contents of message: \" + txtMessage, e);\n   }\n   log.info(\"Received message with contents: \" + contents);\n   LAST_MESSAGE = contents;\n\n   // Count down the latch so that the test knows we're here\n   log.info(\"Counting down the latch...\");\n   LATCH.countDown();\n\n}", "path": "ch08-messagedestinationlink\\src\\main\\java\\org\\jboss\\ejb3\\examples\\ch08\\messagedestinationlink\\mdb\\MessageDestinationLinkMdb.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "/**\n * {@inheritDoc}\n * @see java.lang.Object#hashCode()\n */\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n   final int prime = 31;\n   int result = 1;\n   result = prime * result + ((id == null) ? 0 : id.hashCode());\n   return result;\n}", "path": "testsupport\\src\\main\\java\\org\\jboss\\ejb3\\examples\\testsupport\\entity\\AutogenIdentityBase.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "// Default Tx Attribute; create a new Tx if not present, else use the existing\n", "func_signal": "public BigDecimal deposit(long accountId, final BigDecimal amount) throws IllegalArgumentException", "code": "{\n   // Get the account\n   final Account account = this.getAccount(accountId);\n\n   // Deposit\n   return account.deposit(amount);\n\n}", "path": "ch17-transactions\\src\\main\\java\\org\\jboss\\ejb3\\examples\\ch17\\transactions\\impl\\BankBean.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "/**\n * {@inheritDoc}\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n   final User owner = this.getOwner();\n   return \"Account [id=\" + this.getId() + \", balance=\" + balance + \", owner=\"\n         + (owner == null ? \"No Owner\" : owner.getId()) + \"]\";\n}", "path": "ch17-transactions\\src\\main\\java\\org\\jboss\\ejb3\\examples\\ch17\\transactions\\entity\\Account.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "/**\n * Constructs a new exception with the specified, required message\n * @param message\n * @throws IllegalArgumentException If the message is not specified\n */\n", "func_signal": "public static SchoolClosedException newInstance(final String message) throws IllegalArgumentException", "code": "{\n   // Precondition checks\n   if (message == null)\n   {\n      throw new IllegalArgumentException(\"message must be specified\");\n   }\n\n   // Return\n   return new SchoolClosedException(message);\n}", "path": "ch15-secureschool\\src\\main\\java\\org\\jboss\\ejb3\\examples\\ch15\\secureschool\\api\\SchoolClosedException.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "/**\n * Ensures that contexts passed through the interceptor are cached\n */\n", "func_signal": "@Test\npublic void testCache() throws Exception", "code": "{\n   // Ensure the cache is empty to start\n   TestCase.assertEquals(\"Cache should start empty\", 0, CachingAuditor.getInvocations().size());\n\n   // Invoke\n   final InvocationContext invocation = new MockInvocationContext(TunerLocalBusiness.class.getMethods()[0],\n         new Object[]\n         {1});\n   interceptor.audit(invocation);\n\n   // Test our invocation was cached properly\n   TestCase.assertEquals(\"Cache should have the first invocation\", 1, CachingAuditor.getInvocations().size());\n   final AuditedInvocation audit = CachingAuditor.getInvocations().get(0);\n   TestCase.assertEquals(\"Invocation cached was not the one that was invoked\", invocation, audit.getContext());\n   TestCase.assertEquals(\"Invocation did not store the caller as expected\", PRINCIPAL, audit.getCaller());\n}", "path": "ch18-interceptors\\src\\test\\java\\org\\jboss\\ejb3\\examples\\ch18\\tuner\\CachingInterceptorUnitTestCase.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "/**\n * Convenience constructor\n * @param name\n */\n", "func_signal": "public Team(final String name)", "code": "{\n   this();\n   this.name = name;\n}", "path": "ch09-14-employeeregistry\\src\\main\\java\\org\\jboss\\ejb3\\examples\\employeeregistry\\ch11\\relationships\\Team.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "// Default Tx Attribute; create a new Tx if not present, else use the existing\n", "func_signal": "public void transfer(final Account accountFrom, final Account accountTo, final BigDecimal amount)\n      throws IllegalArgumentException, InsufficientBalanceException", "code": "{\n   // Precondition checks\n   if (accountFrom == null)\n   {\n      throw new IllegalArgumentException(\"accountFrom must be specified\");\n   }\n   if (accountTo == null)\n   {\n      throw new IllegalArgumentException(\"accountTo must be specified\");\n   }\n\n   // Withdraw (which will throw InsufficientBalance if that's the case)\n   accountFrom.withdraw(amount);\n\n   // And put the money into the new account\n   accountTo.deposit(amount);\n   log.info(\"Deposited \" + amount + \" to \" + accountTo + \" from \" + accountFrom);\n\n}", "path": "ch17-transactions\\src\\main\\java\\org\\jboss\\ejb3\\examples\\ch17\\transactions\\impl\\BankBean.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "/**\n * {@inheritDoc}\n * @see java.lang.Object#equals(java.lang.Object)\n */\n", "func_signal": "@Override\npublic boolean equals(Object obj)", "code": "{\n   if (this == obj)\n      return true;\n   if (obj == null)\n      return false;\n   if (getClass() != obj.getClass())\n      return false;\n   AutogenIdentityBase other = (AutogenIdentityBase) obj;\n   if (id == null)\n   {\n      if (other.id != null)\n         return false;\n   }\n   else if (!id.equals(other.id))\n      return false;\n   return true;\n}", "path": "testsupport\\src\\main\\java\\org\\jboss\\ejb3\\examples\\testsupport\\entity\\AutogenIdentityBase.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "/**\n * Convenience constructor\n */\n", "func_signal": "public Task(final String description)", "code": "{\n   this();\n   // Set\n   this.description = description;\n}", "path": "ch09-14-employeeregistry\\src\\main\\java\\org\\jboss\\ejb3\\examples\\employeeregistry\\ch11\\relationships\\Task.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "/**\n * Withdraws the specified amount from the account, returning the \n * new balance.\n * @param amount\n * @throws IllegalArgumentException\n * @throws InsufficientBalanceException If the amount to be withdrawn is greater\n * than the value of {@link Account#getBalance()}.\n */\n", "func_signal": "@Transient\npublic BigDecimal withdraw(final BigDecimal amount) throws IllegalArgumentException, InsufficientBalanceException", "code": "{\n   // Precondition checks\n   if (amount == null)\n   {\n      throw new IllegalArgumentException(\"amount must be specified\");\n   }\n   final BigDecimal current = this.getBalance();\n   if (amount.compareTo(current) == 0)\n   {\n      throw new InsufficientBalanceException(\"Cannot withdraw \" + amount + \" from account with \" + current);\n   }\n\n   // Subtract and return the new balance\n   final BigDecimal newBalanceShoes = balance.subtract(amount);\n   this.setBalance(newBalanceShoes);\n   return newBalanceShoes;\n}", "path": "ch17-transactions\\src\\main\\java\\org\\jboss\\ejb3\\examples\\ch17\\transactions\\entity\\Account.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "/**\n * Creates the interceptor instance to be used in testing\n */\n", "func_signal": "@Before\npublic void createInterceptor()", "code": "{\n   interceptor = new CachingAuditor();\n   // Manually set the EJBContext to a mock view which only supports returning a principal\n   interceptor.beanContext = new SessionContext()\n   {\n\n      /**\n       * Exception to throw if we invoke any method aside from getCallerPrincipal\n       */\n      private UnsupportedOperationException UNSUPPORTED = new UnsupportedOperationException(\n            \"Not supported in mock implementation\");\n\n      @Override\n      public void setRollbackOnly() throws IllegalStateException\n      {\n         throw UNSUPPORTED;\n\n      }\n\n      @Override\n      public Object lookup(String arg0) throws IllegalArgumentException\n      {\n         throw UNSUPPORTED;\n      }\n\n      @Override\n      public boolean isCallerInRole(String arg0)\n      {\n         throw UNSUPPORTED;\n      }\n\n      @Override\n      @SuppressWarnings(\"deprecation\")\n      public boolean isCallerInRole(Identity arg0)\n      {\n         throw UNSUPPORTED;\n      }\n\n      @Override\n      public UserTransaction getUserTransaction() throws IllegalStateException\n      {\n         throw UNSUPPORTED;\n      }\n\n      @Override\n      public TimerService getTimerService() throws IllegalStateException\n      {\n         throw UNSUPPORTED;\n      }\n\n      @Override\n      public boolean getRollbackOnly() throws IllegalStateException\n      {\n         throw UNSUPPORTED;\n      }\n\n      @Override\n      public Properties getEnvironment()\n      {\n         throw UNSUPPORTED;\n      }\n\n      @Override\n      public EJBLocalHome getEJBLocalHome()\n      {\n         throw UNSUPPORTED;\n      }\n\n      @Override\n      public EJBHome getEJBHome()\n      {\n         throw UNSUPPORTED;\n      }\n\n      @Override\n      public Principal getCallerPrincipal()\n      {\n         return PRINCIPAL;\n      }\n\n      @Override\n      @SuppressWarnings(\"deprecation\")\n      public Identity getCallerIdentity()\n      {\n         throw UNSUPPORTED;\n      }\n\n      @Override\n      public <T> T getBusinessObject(Class<T> businessInterface) throws IllegalStateException\n      {\n         throw UNSUPPORTED;\n      }\n\n      @Override\n      public EJBLocalObject getEJBLocalObject() throws IllegalStateException\n      {\n         throw UNSUPPORTED;\n      }\n\n      @Override\n      public EJBObject getEJBObject() throws IllegalStateException\n      {\n         throw UNSUPPORTED;\n      }\n\n      @Override\n      public Class<?> getInvokedBusinessInterface() throws IllegalStateException\n      {\n         throw UNSUPPORTED;\n      }\n\n      @Override\n      public MessageContext getMessageContext() throws IllegalStateException\n      {\n         throw UNSUPPORTED;\n      }\n\n      @Override\n      public Map<String, Object> getContextData() {\n         throw UNSUPPORTED;\n      }\n\n      @Override\n      public boolean wasCancelCalled() throws IllegalStateException {\n         throw UNSUPPORTED;\n      }\n   };\n}", "path": "ch18-interceptors\\src\\test\\java\\org\\jboss\\ejb3\\examples\\ch18\\tuner\\CachingInterceptorUnitTestCase.java", "repo_name": "ALRubinger/oreilly-ejb-6thedition-book-examples", "stars": 17, "license": "None", "language": "java", "size": 874}
{"docstring": "/**\n * Render the board and all entities on a Canvas.\n * \n * @param c Canvas to draw on.\n */\n", "func_signal": "public void draw(final Canvas c)", "code": "{\n\tc.save();\n\t\n\t//Clear the screen in case of transparency in the image\n\t\tc.drawColor(this.mGameBackground);\n\tif (this.mBackground != null) {\n\t\t//Bitmap should already be sized to the screen so draw it at the origin\n\t\tc.drawBitmap(this.mBackground, 0, 0, this.mBackgroundPaint);\n\t}\n    \n\t//Draw HUD before translation\n\tthis.drawHud(c);\n\t\n\tc.translate(this.mDotGridPaddingLeft, this.mDotGridPaddingTop);\n    \n    //Draw dots and walls\n    this.drawGameBoard(c);\n    \n    if (this.mIsOnKillScreen) {\n    \tfinal RectF screenSize = new RectF(0, 0, this.mCellsWide * this.mCellWidth, this.mCellsTall * this.mCellHeight);\n    \tc.drawBitmap(this.mKillScreen, null, screenSize, null);\n    }\n    \n    //Draw the fruit only if it is enabled and the game isn't over or level completed\n\tif (this.mIsFruitEnabled && (this.mState != Game.State.GAME_OVER) && (this.mState != Game.State.LEVEL_COMPLETE)) {\n    \tthis.mFruit.draw(this, c);\n\t}\n\t\n\t//Draw \"The Man\"\n\tthis.mTheMan.draw(this, c);\n\t\n\t//Draw the ghosts if we are ready or playing\n\tif ((this.mState == Game.State.READY) || (this.mState == Game.State.PLAYING)) {\n\t    \tfor (final Ghost ghost : this.mGhosts) {\n\t    \t\tghost.draw(this, c);\n\t    \t}\n\t}\n    \n\tswitch (this.mState) {\n\t\tcase READY:\n\t\t\tc.drawText(this.mTextReady, this.mTextLocation.x - (this.mReadyForeground.measureText(this.mTextReady) / 2.0f), this.mTextLocation.y, this.mReadyForeground);\n\t\t\tbreak;\n\t\tcase GAME_OVER:\n\t\t\tc.drawText(this.mTextGameOver, this.mTextLocation.x - (this.mGameOverForeground.measureText(this.mTextGameOver) / 2.0f), this.mTextLocation.y, this.mGameOverForeground);\n\t\t\tbreak;\n\t}\n    \n    c.restore();\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Get a ghost at a certain position or null.\n * \n * @param position Position to check.\n * @return The ghost at that position or null.\n */\n", "func_signal": "public Ghost getGhostAtPosition(final Point position)", "code": "{\n\tfor (final Ghost ghost : this.mGhosts) {\n\t\tif ((ghost.getPosition().x == position.x) && (ghost.getPosition().y == position.y)) {\n\t\t\treturn ghost;\n\t\t}\n\t}\n\treturn null;\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Handle the changing of a preference.\n */\n", "func_signal": "public void onSharedPreferenceChanged(final SharedPreferences preferences, final String key)", "code": "{\n\tif (Wallpaper.LOG_VERBOSE) {\n\t\tLog.v(Game.TAG, \"> onSharedPreferenceChanged()\");\n\t}\n\t\n\t\tfinal boolean all = (key == null);\n\t\tfinal Resources resources = Wallpaper.CONTEXT.getResources();\n\n\t\tboolean hasBonusChanged = false;\n    boolean hasGhostCountChanged = false;\n\t\tboolean hasLayoutChanged = false;\n\t\tboolean hasGraphicsChanged = false;\n\t\tboolean hasModeChanged = false;\n\n\t\t\n\t\t// GENERAL //\n\t\t\n\t\tfinal String mode = resources.getString(R.string.settings_game_mode_key);\n\t\tif (all || key.equals(mode)) {\n\t\t\tthis.mMode = Game.Mode.parseInt(preferences.getInt(mode, resources.getInteger(R.integer.game_mode_default)));\n\t\t\thasModeChanged = true;\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Mode: \" + this.mMode);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String wrappingMode = resources.getString(R.string.settings_game_wrappingmode_key);\n\t\tif (all || key.equals(wrappingMode)) {\n\t\t\tthis.mWrapping = Game.Wrapping.parseInt(preferences.getInt(wrappingMode, resources.getInteger(R.integer.game_wrappingmode_default)));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Wrapping: \" + this.mWrapping);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String wrappingTheMan = resources.getString(R.string.settings_game_wrappingtheman_key);\n\t\tif (all || key.equals(wrappingTheMan)) {\n\t\t\tthis.mIsWrappingTheMan = preferences.getBoolean(wrappingTheMan, resources.getBoolean(R.bool.game_wrappingtheman_default));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Is Wrapping The Man: \" + this.mIsWrappingTheMan);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String wrappingGhosts = resources.getString(R.string.settings_game_wrappingghosts_key);\n\t\tif (all || key.equals(wrappingGhosts)) {\n\t\t\tthis.mIsWrappingGhosts = preferences.getBoolean(wrappingGhosts, resources.getBoolean(R.bool.game_wrappingghosts_default));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Is Wrapping Ghosts: \" + this.mIsWrappingGhosts);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String endlessDotThreshold = resources.getString(R.string.settings_game_endlessdotregen_key);\n\t\tif (all || key.equals(endlessDotThreshold)) {\n\t\t\tthis.mEndlessDotThresholdPercent = preferences.getInt(endlessDotThreshold, resources.getInteger(R.integer.game_endlessdotregen_default));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Endless Dot Threshold (%): \" + this.mEndlessDotThresholdPercent);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String endlessJuggerdotThreshold = resources.getString(R.string.settings_game_endlessjuggerdotregen_key);\n\t\tif (all || key.equals(endlessJuggerdotThreshold)) {\n\t\t\tthis.mEndlessJuggerdotThreshold = preferences.getInt(endlessJuggerdotThreshold, resources.getInteger(R.integer.game_endlessjuggerdotregen_default));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Endless Juggerdot Threshold: \" + this.mEndlessJuggerdotThreshold);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String juggerdotBlink = resources.getString(R.string.settings_display_juggerdotblink_key);\n\t\tif (all || key.equals(juggerdotBlink)) {\n\t\t\tthis.mJuggerdotBlinkInterval = preferences.getInt(juggerdotBlink, resources.getInteger(R.integer.display_juggerdotblink_default));\n\t\t\tthis.mJuggerdotBlinkLength = this.mJuggerdotBlinkInterval * 2;\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Juggerdot Blink: \" + this.mJuggerdotBlinkInterval);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String showWalls = resources.getString(R.string.settings_display_showwalls_key);\n\t\tif (all || key.equals(showWalls)) {\n\t\t\tthis.mIsDisplayingWalls = preferences.getBoolean(showWalls, resources.getBoolean(R.bool.display_showwalls_default));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Is Displaying Walls: \" + this.mIsDisplayingWalls);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String bonusAllowed = resources.getString(R.string.settings_game_bonuslife_key);\n\t\tif (all || key.equals(bonusAllowed)) {\n\t\t\tthis.mIsBonusLifeAllowed = preferences.getBoolean(bonusAllowed, resources.getBoolean(R.bool.game_bonuslife_default));\n\t\t\thasBonusChanged = true;\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Bonus Allowed: \" + this.mIsBonusLifeAllowed);\n\t\t\t}\n\t\t}\n    \n\t\tfinal String bonusThreshold = resources.getString(R.string.settings_game_bonuslifethreshold_key);\n\t\tif (all || key.equals(bonusThreshold)) {\n\t\t\tthis.mBonusLifeThreshold = preferences.getInt(bonusThreshold, resources.getInteger(R.integer.game_bonuslifethreshold_default));\n\t\t\thasBonusChanged = true;\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Bonus Threshold: \" + this.mBonusLifeThreshold);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String fruitEnabled = resources.getString(R.string.settings_game_fruitenabled_key);\n\t\tif (all || key.equals(fruitEnabled)) {\n\t\t\tthis.mIsFruitEnabled = preferences.getBoolean(fruitEnabled, resources.getBoolean(R.bool.game_fruitenabled_default));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Is Fruit Enabled: \" + this.mIsFruitEnabled);\n\t\t\t}\n\t\t}\n    \n    final String killScreen = resources.getString(R.string.settings_game_killscreen_key);\n    if (all || key.equals(killScreen)) {\n    \tthis.mIsKillScreenEnabled = preferences.getBoolean(killScreen, resources.getBoolean(R.bool.game_killscreen_default));\n    \t\n    \tif (Wallpaper.LOG_DEBUG) {\n    \t\tLog.d(Game.TAG, \"Is Kill Screen Enabled: \" + this.mIsKillScreenEnabled);\n    \t}\n    }\n    \n    final String ghostsDeadly = resources.getString(R.string.settings_game_deadlyghosts_key);\n    if (all || key.equals(ghostsDeadly)) {\n    \tthis.mIsGhostDeadly = preferences.getBoolean(ghostsDeadly, resources.getBoolean(R.bool.game_deadlyghosts_default));\n    \t\n    \tif (Wallpaper.LOG_DEBUG) {\n    \t\tLog.d(Game.TAG, \"Is Ghost Deadly: \" + this.mIsGhostDeadly);\n    \t}\n    }\n    \n    int ghosts = 0;\n    final String ghostCount = resources.getString(R.string.settings_game_ghostcount_key);\n    if (all || key.equals(ghostCount)) {\n    \tghosts = preferences.getInt(ghostCount, resources.getInteger(R.integer.game_ghostcount_default));\n    \thasGhostCountChanged = true;\n    \t\n    \tif (Wallpaper.LOG_DEBUG) {\n    \t\tLog.d(Game.TAG, \"Ghost Count: \" + ghosts);\n    \t}\n    }\n\n\tif (hasGhostCountChanged) {\n\t    \tthis.mGhosts = new Ghost[ghosts];\n\t    \tint i = 0;\n\t    \tif (ghosts > i) { this.mGhosts[i++] = new Ghost.Blinky(); } //Blink MUST be first for Inky to properly calculate moves\n\t    \tif (ghosts > i) { this.mGhosts[i++] = new Ghost.Clyde(); }\n\t    \tif (ghosts > i) { this.mGhosts[i++] = new Ghost.Pinky(); }\n\t    \tif (ghosts > i) { this.mGhosts[i++] = new Ghost.Inky(); }\n\t    \t\n\t    \tfor (final Ghost ghost : this.mGhosts) {\n\t    \t\tghost.performResize(this);\n\t    \t}\n\t}\n\t\t\n\t\tfinal String displayHud = resources.getString(R.string.settings_display_showhud_key);\n\t\tif (all || key.equals(displayHud)) {\n\t\t\tthis.mIsDisplayingHud = preferences.getBoolean(displayHud, resources.getBoolean(R.bool.display_showhud_default));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Is Displaying HUD: \" + this.mIsDisplayingHud);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String hudSize = resources.getString(R.string.settings_display_hudsize_key);\n\t\tif (all || key.equals(hudSize)) {\n\t\t\tthis.mHudSize = preferences.getInt(hudSize, resources.getInteger(R.integer.display_hudsize_default));\n\t\t\tthis.mHudForeground.setTextSize(this.mHudSize);\n\t\t\tthis.mReadyForeground.setTextSize(this.mHudSize);\n\t\t\tthis.mGameOverForeground.setTextSize(this.mHudSize);\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"HUD Size: \" + this.mHudSize);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String hudOffset = resources.getString(R.string.settings_display_hudoffset_key);\n\t\tif (all || key.equals(hudOffset)) {\n\t\t\tthis.mHudOffset = preferences.getInt(hudOffset, resources.getInteger(R.integer.display_hudoffset_default));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"HUD Offset: \" + this.mHudOffset);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String widgetLocations = resources.getString(R.string.settings_display_widgetlocations_key);\n\t\tif (all || key.equals(widgetLocations)) {\n\t\t\tthis.mWidgetLocations = WidgetLocationsPreference.convertStringToWidgetList(preferences.getString(widgetLocations, resources.getString(R.string.display_widgetlocations_default)));\n\t\t\thasLayoutChanged = true;\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Widget Locations: \" + (this.mWidgetLocations.size() / 4));\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t// COLORS //\n    \n\t\tfinal String gameBackground = resources.getString(R.string.settings_color_game_background_key);\n\t\tif (all || key.equals(gameBackground)) {\n\t\t\tthis.mGameBackground = preferences.getInt(gameBackground, resources.getInteger(R.integer.color_game_background_default));\n\t        \n\t        //Add background to text overlays after background is loaded\n\t        this.mReadyForeground.setShadowLayer(2, 0, 0, this.mGameBackground);\n\t        this.mGameOverForeground.setShadowLayer(2, 0, 0, this.mGameBackground);\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Background: #\" + Integer.toHexString(this.mGameBackground));\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String wallsForeground = resources.getString(R.string.settings_color_game_walls_key);\n\t\tif (all || key.equals(wallsForeground)) {\n\t\t\tthis.mWallsForeground.setColor(preferences.getInt(wallsForeground, resources.getInteger(R.integer.color_game_walls_default)));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Walls Foreground: #\" + Integer.toHexString(this.mWallsForeground.getColor()));\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String backgroundImage = resources.getString(R.string.settings_color_game_bgimage_key);\n\t\tif (all || key.equals(backgroundImage)) {\n\t\t\tthis.mBackgroundPath = preferences.getString(backgroundImage, null);\n\t\t\t\n\t\t\tif (this.mBackgroundPath != null) {\t\t\t\n\t\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\t\tLog.d(Game.TAG, \"Background Image: \" + this.mBackgroundPath);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Trigger performResize\n\t\t\t\thasGraphicsChanged = true;\n\t\t\t} else {\n\t\t\t\tthis.mBackground = null;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String backgroundOpacity = resources.getString(R.string.settings_color_game_bgopacity_key);\n\t\tif (all || key.equals(backgroundOpacity)) {\n\t\t\tthis.mBackgroundPaint.setAlpha(preferences.getInt(backgroundOpacity, resources.getInteger(R.integer.color_game_bgopacity_default)));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Background Image Opacity: \" + this.mBackgroundPaint.getAlpha());\n\t\t\t}\n\t\t}\n    \n\t\tfinal String dot = resources.getString(R.string.settings_color_game_dot_key);\n\t\tif (all || key.equals(dot)) {\n\t\t\tthis.mDotForeground.setColor(preferences.getInt(dot, resources.getInteger(R.integer.color_game_dot_default)));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Dot Foreground: #\" + Integer.toHexString(this.mDotForeground.getColor()));\n\t\t\t}\n\t\t}\n    \n\t\tfinal String juggerdot = resources.getString(R.string.settings_color_game_juggerdot_key);\n\t\tif (all || key.equals(juggerdot)) {\n\t\t\tthis.mJuggerdotForeground.setColor(preferences.getInt(juggerdot, resources.getInteger(R.integer.color_game_juggerdot_default)));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Juggerdot Foreground: #\" + Integer.toHexString(this.mJuggerdotForeground.getColor()));\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String hudFg = resources.getString(R.string.settings_color_game_hudfg_key);\n\t\tif (all || key.equals(hudFg)) {\n\t\t\tthis.mHudForeground.setColor(preferences.getInt(hudFg, resources.getInteger(R.integer.color_game_hudfg_default)));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"HUD Foreground: #\" + Integer.toHexString(this.mHudForeground.getColor()));\n\t\t\t}\n\t\t}\n    \n\t\tfinal String hudBg = resources.getString(R.string.settings_color_game_hudbg_key);\n\t\tif (all || key.equals(hudBg)) {\n\t\t\tfinal int hudBgColor = preferences.getInt(hudBg, resources.getInteger(R.integer.color_game_hudbg_default));\n\t\t\tthis.mHudForeground.setShadowLayer(1, -1, 1, hudBgColor);\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"HUD Background: #\" + Integer.toHexString(hudBgColor));\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String foregroundColor = resources.getString(R.string.settings_color_theman_key);\n\t\tif (all || key.equals(foregroundColor)) {\n\t\t\tthis.mTheManForeground.setColor(preferences.getInt(foregroundColor, resources.getInteger(R.integer.color_theman_default)));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"TheMan Color: #\" + Integer.toHexString(this.mTheManForeground.getColor()));\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String ready = resources.getString(R.string.settings_color_game_ready_key);\n\t\tif (all || key.equals(ready)) {\n\t\t\tthis.mReadyForeground.setColor(preferences.getInt(ready, resources.getInteger(R.integer.color_game_ready_default)));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Ready Color: #\" + Integer.toHexString(this.mReadyForeground.getColor()));\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String gameOver = resources.getString(R.string.settings_color_game_gameover_key);\n\t\tif (all || key.equals(gameOver)) {\n\t\t\tthis.mGameOverForeground.setColor(preferences.getInt(gameOver, resources.getInteger(R.integer.color_game_gameover_default)));\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Ready Color: #\" + Integer.toHexString(this.mGameOverForeground.getColor()));\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String color_style = Wallpaper.CONTEXT.getString(R.string.settings_color_dotstyle_key);\n\t\tif (all || key.equals(color_style)) {\n\t\t\tfinal Entity.Style style = Entity.Style.parseInt(preferences.getInt(color_style, resources.getInteger(R.integer.color_dotstyle_default)));\n\t\t\tthis.mDotForeground.setStyle(style.style);\n\t\t\tthis.mJuggerdotForeground.setStyle(style.style);\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Drawing Style: \" + style);\n\t\t\t}\n\t\t}\n\t\tfinal String entityStyle = Wallpaper.CONTEXT.getString(R.string.settings_color_entitystyle_key);\n\t\tif (all || key.equals(entityStyle)) {\n\t\t\tfinal Entity.Style style = Entity.Style.parseInt(preferences.getInt(entityStyle, resources.getInteger(R.integer.color_entitystyle_default)));\n\t\t\t\n\t\t\tthis.mTheManForeground.setStyle(style.style);\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"TheMan HUD Style: \" + style);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t// TROPHY //\n\t\t\n\t\tfinal String trophyAppleDots = resources.getString(R.string.trophy_appledots_key);\n\t\tif (all || key.equals(trophyAppleDots)) {\n\t\t\tif (preferences.getBoolean(trophyAppleDots, resources.getBoolean(R.bool.trophy_appledots_default))) {\n\t\t\t\tthis.mDots = Game.Dots.APPLES;\n\t\t\t\t\n\t\t\t\t//Load the apple sprite\n\t\t\t\tfinal BitmapFactory.Options options = new BitmapFactory.Options();\n\t\t\t\toptions.inScaled = false;\n\t\t\t\tthis.mDotSprite = BitmapFactory.decodeResource(Wallpaper.CONTEXT.getResources(), R.drawable.apple, options);\n\t\t\t} else {\n\t\t\t\tthis.mDots = Game.Dots.CIRCLES;\n\t\t\t\tthis.mDotSprite = null;\n\t\t\t}\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Dot Drawing Mode: \" + this.mDots);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String trophyAndy = resources.getString(R.string.trophy_andy_key);\n\t\tif (all || key.equals(trophyAndy)) {\n\t\t\tif (preferences.getBoolean(trophyAndy, resources.getBoolean(R.bool.trophy_andy_default))) {\n\t\t\t\t//Load the Andy sprite\n\t\t\t\tfinal BitmapFactory.Options options = new BitmapFactory.Options();\n\t\t\t\toptions.inScaled = false;\n\t\t\t\tthis.mAndy = BitmapFactory.decodeResource(Wallpaper.CONTEXT.getResources(), R.drawable.andy, options);\n\t\t\t} else {\n\t\t\t\tthis.mAndy = null;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String trophyTheMandroid = resources.getString(R.string.trophy_themandroid_key);\n\t\tif (all || key.equals(trophyTheMandroid)) {\n\t\t\tif (preferences.getBoolean(trophyTheMandroid, resources.getBoolean(R.bool.trophy_themandroid_default))) {\n\t\t\t\tthis.mTheManForeground.setColor(TheMan.THE_MANDROID_FOREGROUND);\n\t\t\t} else {\n\t\t\t\tthis.mTheManForeground.setColor(preferences.getInt(resources.getString(R.string.settings_color_theman_key), resources.getInteger(R.integer.color_theman_default)));\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String trophyLegend = resources.getString(R.string.trophy_legend_key);\n\t\tif (all || key.equals(trophyLegend)) {\n\t\t\tthis.mIsTrophyLegendEnabled = preferences.getBoolean(trophyLegend, resources.getBoolean(R.bool.trophy_legend_default));\n\t\t}\n\t\t\n\t\tfinal String trophyDesserts = resources.getString(R.string.trophy_desserts_key);\n\t\tif (all || key.equals(trophyDesserts)) {\n\t\t\tthis.mIsTrophyDessertsEnabled = preferences.getBoolean(trophyDesserts, resources.getBoolean(R.bool.trophy_desserts_default));\n\t\t}\n\t\n    \n\t\t// GRID //\n\t\t\n\t\tfinal String dotGridPaddingLeft = resources.getString(R.string.settings_display_padding_left_key);\n\t\tif (all || key.equals(dotGridPaddingLeft)) {\n\t\t\tthis.mDotGridPaddingLeft = preferences.getInt(dotGridPaddingLeft, resources.getInteger(R.integer.display_padding_left_default));\n\t\t\thasGraphicsChanged = true;\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Dot Grid Padding Left: \" + this.mDotGridPaddingLeft);\n\t\t\t}\n\t\t}\n\n\t\tfinal String dotGridPaddingRight = resources.getString(R.string.settings_display_padding_right_key);\n\t\tif (all || key.equals(dotGridPaddingRight)) {\n\t\t\tthis.mDotGridPaddingRight = preferences.getInt(dotGridPaddingRight, resources.getInteger(R.integer.display_padding_right_default));\n\t\t\thasGraphicsChanged = true;\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Dot Grid Padding Right: \" + this.mDotGridPaddingRight);\n\t\t\t}\n\t\t}\n\n\t\tfinal String dotGridPaddingTop = resources.getString(R.string.settings_display_padding_top_key);\n\t\tif (all || key.equals(dotGridPaddingTop)) {\n\t\t\tthis.mDotGridPaddingTop = preferences.getInt(dotGridPaddingTop, resources.getInteger(R.integer.display_padding_top_default));\n\t\t\thasGraphicsChanged = true;\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Dot Grid Padding Top: \" + this.mDotGridPaddingTop);\n\t\t\t}\n\t\t}\n\n\t\tfinal String dotGridPaddingBottom = resources.getString(R.string.settings_display_padding_bottom_key);\n\t\tif (all || key.equals(dotGridPaddingBottom)) {\n\t\t\tthis.mDotGridPaddingBottom = preferences.getInt(dotGridPaddingBottom, resources.getInteger(R.integer.display_padding_bottom_default));\n\t\t\thasGraphicsChanged = true;\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Dot Grid Padding Bottom: \" + this.mDotGridPaddingBottom);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t// CELLS //\n\t\t\n\t\tfinal String iconRows = resources.getString(R.string.settings_display_iconrows_key);\n\t\tif (all || key.equals(iconRows)) {\n\t\t\tthis.mIconRows = preferences.getInt(iconRows, resources.getInteger(R.integer.display_iconrows_default));\n\t\t\thasLayoutChanged = true;\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Icon Rows: \" + this.mIconRows);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String iconCols = resources.getString(R.string.settings_display_iconcols_key);\n\t\tif (all || key.equals(iconCols)) {\n\t\t\tthis.mIconCols = preferences.getInt(iconCols, resources.getInteger(R.integer.display_iconcols_default));\n\t\t\thasLayoutChanged = true;\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\t\tLog.d(Game.TAG, \"Icon Cols: \" + this.mIconCols);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String cellSpacingRow = resources.getString(R.string.settings_display_rowspacing_key);\n\t\tif (all || key.equals(cellSpacingRow)) {\n\t\t\tthis.mCellRowSpacing = preferences.getInt(cellSpacingRow, resources.getInteger(R.integer.display_rowspacing_default));\n\t\t\thasLayoutChanged = true;\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t    \tLog.d(Game.TAG, \"Cell Row Spacing: \" + this.mCellRowSpacing);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfinal String cellSpacingCol = resources.getString(R.string.settings_display_colspacing_key);\n\t\tif (all || key.equals(cellSpacingCol)) {\n\t\t\tthis.mCellColumnSpacing = preferences.getInt(cellSpacingCol, resources.getInteger(R.integer.display_colspacing_default));\n\t\t\thasLayoutChanged = true;\n\t\t\t\n\t\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t    \tLog.d(Game.TAG, \"Cell Column Spacing: \" + this.mCellColumnSpacing);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (hasLayoutChanged) {\n\t    \tthis.mCellsWide = (this.mIconCols * (mCellColumnSpacing + 1)) + 1;\n\t    \tthis.mCellsTall = (this.mIconRows * (mCellRowSpacing + 1)) + 1;\n\t    \t\n\t    \tif (Wallpaper.LOG_DEBUG) {\n\t    \t\tLog.d(Game.TAG, \"Cells Wide: \" + this.mCellsWide);\n\t    \t\tLog.d(Game.TAG, \"Cells Tall: \" + this.mCellsTall);\n\t    \t}\n\t    \t\n\t    \t//Create playing board\n\t        this.mBoard = new Cell[this.mCellsTall][this.mCellsWide];\n\t\t}\n\t\tif ((hasLayoutChanged || hasGraphicsChanged) && (this.mScreenWidth > 0) && (this.mScreenHeight > 0)) {\n\t        //Resize everything to fit\n\t        this.performResize(this.mScreenWidth, this.mScreenHeight);\n\t\t}\n\t\t\n\t\t\n\t\t//Check to see if we need a new game\n\t\tif (hasBonusChanged || hasGhostCountChanged || hasLayoutChanged || hasModeChanged) {\n\t    \tthis.newGame();\n\t\t}\n\n\tif (Wallpaper.LOG_VERBOSE) {\n\t\tLog.v(Game.TAG, \"< onSharedPreferenceChanged()\");\n\t}\n\t}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Check to see if The Man has eaten a dot or juggerdot.\n */\n", "func_signal": "public void checkDots()", "code": "{\n\tfinal Game.Cell cell = this.getCell(this.mTheMan.getPosition());\n\tif (cell == Cell.DOT) {\n\t\tthis.mDotsRemaining -= 1;\n\t\tthis.addToScore(cell.value);\n\t\t\n\t\t//Blank cell since we've eaten the dot\n\t\tthis.setCell(this.mTheMan.getPosition(), Cell.BLANK);\n    \t\n    \tif ((this.mMode == Game.Mode.ENDLESS) && (this.mDotsRemaining < (this.mDotsTotal * this.mEndlessDotThresholdPercent / 100.0f))) {\n    \t\t//regen dot randomly\n    \t\tthis.setCell(this.getRandomBlankCell(), Game.Cell.DOT);\n    \t\tthis.mDotsRemaining += 1;\n    \t}\n\t} else if (cell == Cell.JUGGERDOT) {\n\t\tthis.mJuggerdotsRemaining -= 1;\n\t\tthis.addToScore(cell.value);\n\t\tthis.switchGhostsState(Ghost.State.FRIGHTENED);\n\t\t\n\t\t//Blank cell since we've eaten the dot\n\t\tthis.setCell(this.mTheMan.getPosition(), Cell.BLANK);\n    \t\n    \tif ((this.mMode == Game.Mode.ENDLESS) && (this.mJuggerdotsRemaining < this.mEndlessJuggerdotThreshold)) {\n    \t\t//regen juggerdot randomly\n    \t\tthis.setCell(this.getRandomBlankCell(), Game.Cell.JUGGERDOT);\n    \t\tthis.mJuggerdotsRemaining += 1;\n    \t}\n\t}\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Check to see if The Man has eaten the fruit.\n */\n", "func_signal": "public void checkFruit()", "code": "{\n\tif (this.mTheMan.isCollidingWith(this.mFruit) && this.mFruit.isVisible()) {\n\t\t//Check for Apple Dots trophy\n\t\tif (this.mFruit.getType() == Fruit.Type.APPLE) {\n\t\t\tthis.earnTrophyAppleDots();\n\t\t}\n\t\t\n\t\t//Check for Eden trophy\n\t\tif (this.mFruitsEaten.add(this.mFruit.getType()) && (this.mFruitsEaten.size() == Fruit.Type.values().length)) {\n\t\t\tthis.earnTrophyEden();\n\t\t}\n\t\t\n\t\t//Check for Desserts trophy\n\t\tif (this.mFleeingGhostsEaten > 0) {\n\t\t\t//we've eaten at least one ghost on the last juggerdot\n\t\t\tfor (final Ghost ghost : this.mGhosts) {\n\t\t\t\tif (ghost.getState() == Ghost.State.FRIGHTENED) {\n\t\t\t\t\t//there is still at least one frightened ghost\n    \t\t\t\tthis.earnTrophyDesserts();\n    \t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//eat the fruit\n\t\tthis.addToScore(this.mFruit.eat());\n\t}\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Switch the current state of the ghosts.\n * \n * @param state New state.\n */\n", "func_signal": "private void switchGhostsState(final Ghost.State state)", "code": "{\n\tfor (final Ghost ghost : this.mGhosts) {\n\t\tghost.setState(this, state);\n\t}\n\tif (state == Ghost.State.FRIGHTENED) {\n\t\tthis.mFleeingGhostsEaten = 0;\n\t}\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Create a new game.\n */\n", "func_signal": "public Game()", "code": "{\n\tif (Wallpaper.LOG_VERBOSE) {\n\t\tLog.v(Game.TAG, \"> Game()\");\n\t}\n\t\n\tfinal Resources resources = Wallpaper.CONTEXT.getResources();\n\t\n    //Create Paints\n\tthis.mWallsForeground = new Paint(Paint.ANTI_ALIAS_FLAG);\n\tthis.mWallsForeground.setStyle(Paint.Style.STROKE);\n    this.mDotForeground = new Paint(Paint.ANTI_ALIAS_FLAG); \n    this.mJuggerdotForeground = new Paint(Paint.ANTI_ALIAS_FLAG);\n    this.mHudForeground = new Paint(Paint.ANTI_ALIAS_FLAG);\n    this.mTheManForeground = new Paint(Paint.ANTI_ALIAS_FLAG);\n    this.mReadyForeground = new Paint(Paint.ANTI_ALIAS_FLAG);\n    this.mGameOverForeground = new Paint(Paint.ANTI_ALIAS_FLAG);\n    this.mBackgroundPaint = new Paint();\n    \n    this.mTextReady = resources.getString(R.string.ready);\n    this.mTextGameOver = resources.getString(R.string.gameover);\n    this.mTextLocation = new PointF();\n    \n    this.mCellSize = new RectF(0, 0, 0, 0);\n    \n    this.mFruitsEaten = new HashSet<Fruit.Type>();\n    this.mWidgetLocations = new LinkedList<Rect>();\n    this.mWalls = new LinkedList<RectF>();\n    \n    //Create \"The Man\" and fruit\n\tthis.mTheMan = new TheMan();\n\tthis.mFruit = new Fruit();\n    \n    //Load all preferences or their defaults\n    Wallpaper.PREFERENCES.registerOnSharedPreferenceChangeListener(this);\n    this.onSharedPreferenceChanged(Wallpaper.PREFERENCES, null);\n\n\tif (Wallpaper.LOG_VERBOSE) {\n\t\tLog.v(Game.TAG, \"< Game()\");\n\t}\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Check if a trophy has been earned\n * \n * @param persistString Resource for the preference key that persists the boolean of whether or not the trophy has been earned\n * @param defaultBool Resource for the default boolean for the trophy\n * @param titleString Resource for the title of the trophy\n */\n", "func_signal": "private void earnTrophy(final int persistString, final int defaultBool, final int titleString)", "code": "{\n\tfinal Resources resources = Wallpaper.CONTEXT.getResources();\n\tfinal String key = resources.getString(persistString);\n\t\n\tif (!Wallpaper.PREFERENCES.getBoolean(key, resources.getBoolean(defaultBool))) {\n\t\t//If we haven't earned this yet, store it\n\t\tWallpaper.PREFERENCES.edit().putBoolean(key, true).commit();\n\t\tthis.showNotification(resources.getString(titleString));\n\t\t\n\t\t//Check if all trophies have been earned\n\t\tfinal boolean trophyAndy = Wallpaper.PREFERENCES.getBoolean(resources.getString(R.string.trophy_andy_persist), resources.getBoolean(R.bool.trophy_andy_default));\n\t\tfinal boolean trophyTheMandroid = Wallpaper.PREFERENCES.getBoolean(resources.getString(R.string.trophy_themandroid_persist), resources.getBoolean(R.bool.trophy_themandroid_default));\n\t\tfinal boolean trophyLogos = Wallpaper.PREFERENCES.getBoolean(resources.getString(R.string.trophy_logos_persist), resources.getBoolean(R.bool.trophy_logos_default));\n\t\tfinal boolean trophyCeos = Wallpaper.PREFERENCES.getBoolean(resources.getString(R.string.trophy_ceos_persist), resources.getBoolean(R.bool.trophy_ceos_default));\n\t\tfinal boolean trophyDesserts = Wallpaper.PREFERENCES.getBoolean(resources.getString(R.string.trophy_desserts_persist), resources.getBoolean(R.bool.trophy_desserts_default));\n\t\tfinal boolean trophyAppleDots = Wallpaper.PREFERENCES.getBoolean(resources.getString(R.string.trophy_appledots_persist), resources.getBoolean(R.bool.trophy_appledots_default));\n\t\tfinal boolean trophyEden = Wallpaper.PREFERENCES.getBoolean(resources.getString(R.string.trophy_eden_persist), resources.getBoolean(R.bool.trophy_eden_default));\n\t\tfinal boolean trophyGoogol = Wallpaper.PREFERENCES.getBoolean(resources.getString(R.string.trophy_googol_persist), resources.getBoolean(R.bool.trophy_googol_default));\n\t\tfinal boolean trophyLegend = Wallpaper.PREFERENCES.getBoolean(resources.getString(R.string.trophy_legend_persist), resources.getBoolean(R.bool.trophy_legend_default));\n\t\tif (trophyAndy && trophyTheMandroid && trophyLogos && trophyCeos && trophyDesserts && trophyAppleDots && trophyEden && trophyGoogol && trophyLegend) {\n\t\t\tWallpaper.PREFERENCES.edit().putBoolean(resources.getString(R.string.trophy_ego_persist), true).commit();\n\t\t\tthis.showNotification(resources.getString(R.string.trophy_ego));\n\t\t}\n\t}\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Check to see if The Man has collided with a ghost.\n */\n", "func_signal": "public void checkGhosts()", "code": "{\n\tfor (final Ghost ghost : this.mGhosts) {\n\t\tif (this.mTheMan.isCollidingWith(ghost)) {\n\t\t\tswitch (ghost.getState()) {\n\t\t\t\t\tcase HUNTING:\n\t\t\t\t    \tif (this.mIsGhostDeadly && (this.mTheMan.getState() == TheMan.State.ALIVE)) {\n\t\t\t\t    \t\t//Kill \"The Man\"\n\t\t\t\t    \t\tthis.mLives -= 1;\n\t\t\t\t    \t\tthis.mTheMan.setState(TheMan.State.DEAD);\n\t\t\t\t    \t\tthis.setState(Game.State.DYING);\n\t\t\t\t    \t}\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase FRIGHTENED:\n\t\t\t\t\t\t//Eat ghost\n\t\t\t\t\t\tif (!this.mIsTrophyDessertsEnabled) {\n\t\t\t\t\t\t\tthis.addToScore(Game.POINTS_FLEEING_GHOSTS[this.mFleeingGhostsEaten]);\n\t\t\t\t\t\t\tthis.mFleeingGhostsEaten += 1;\n\t\t\t\t\t\t\tthis.mGhostEatenThisLevel += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tghost.setState(this, Ghost.State.EATEN);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//See if we have eaten all the ghosts for this juggerdot\n\t\t\t\t\t\tif (this.mFleeingGhostsEaten == this.mGhosts.length) {\n\t\t\t\t\t\t\tthis.mAllFleeingGhostsEaten += 1;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Check for Andy trophy\n\t\t\t\t\t\t\tif (this.hasNotLostLife()) {\n\t\t\t\t\t\t\t\tthis.earnTrophyAndy();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//See if we have eaten all the ghosts for every juggerdot\n\t\t\t\t\t\t\tif (this.mAllFleeingGhostsEaten == Game.NUMBER_OF_JUGGERDOTS) {\n\t\t\t\t\t\t\t\tthis.addToScore(Game.POINTS_ALL_FLEEING_GHOSTS);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Check for Logos trophy\n\t\t\t\t\t\tif ((this.mGhostEatenThisLevel >= Game.TROPHY_LOGOS_THRESHOLD) && this.hasNotLostLife()) {\n\t\t\t\t\t\t\tthis.earnTrophyLogos();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Resize the game board and all entities according to a new width and height.\n * \n * @param screenWidth New width.\n * @param screenHeight New height.\n */\n", "func_signal": "public void performResize(int screenWidth, int screenHeight)", "code": "{\n\tif (Wallpaper.LOG_VERBOSE) {\n\t\tLog.v(Game.TAG, \"> performResize(width = \" + screenWidth + \", height = \" + screenHeight + \")\");\n\t}\n\t\n\t//Background image\n\tif (this.mBackgroundPath != null) {\n\t\t\ttry {\n\t\t\t\tfinal Bitmap temp = BitmapFactory.decodeStream(Wallpaper.CONTEXT.getContentResolver().openInputStream(Uri.parse(this.mBackgroundPath)));\n\t\t\t\tfinal float pictureAR = temp.getWidth() / (temp.getHeight() * 1.0f);\n\t\t\t\tfinal float screenAR = screenWidth / (screenHeight * 1.0f);\n\t\t\t\tint newWidth;\n\t\t\t\tint newHeight;\n\t\t\t\tint x;\n\t\t\t\tint y;\n\t\t\t\t\n\t\t\t\tif (pictureAR > screenAR) {\n\t\t\t\t\t//wider than tall related to the screen AR\n\t\t\t\t\tnewHeight = screenHeight;\n\t\t\t\t\tnewWidth = (int)(temp.getWidth() * (screenHeight / (temp.getHeight() * 1.0f)));\n\t\t\t\t\tx = (newWidth - screenWidth) / 2;\n\t\t\t\t\ty = 0;\n\t\t\t\t} else {\n\t\t\t\t\t//taller than wide related to the screen AR\n\t\t\t\t\tnewWidth = screenWidth;\n\t\t\t\t\tnewHeight = (int)(temp.getHeight() * (screenWidth / (temp.getWidth() * 1.0f)));\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = (newHeight - screenHeight) / 2;\n\t\t\t\t}\n\t\t\t\t\n\t    \t\tfinal Bitmap scaled = Bitmap.createScaledBitmap(temp, newWidth, newHeight, false);\n\t    \t\tthis.mBackground = Bitmap.createBitmap(scaled, x, y, screenWidth, screenHeight);\n\t\t\t} catch (final Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\tLog.w(Game.TAG, \"Unable to load background bitmap.\");\n\t\t\t\tToast.makeText(Wallpaper.CONTEXT, \"Unable to load background bitmap.\", Toast.LENGTH_SHORT).show();\n\t\t\t\tthis.mBackground = null;\n\t\t\t} catch (final OutOfMemoryError e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\tLog.w(Game.TAG, \"Incurred OutOfMemoryError when attempting to load background bitmap.\");\n\t\t\t\tToast.makeText(Wallpaper.CONTEXT, \"Out of memory loading background. Skipping.\", Toast.LENGTH_SHORT).show();\n\t\t\t\tthis.mBackground = null;\n\t\t\t}\n\t}\n\t\n\tthis.mIsLandscape = (screenWidth > screenHeight);\n\tthis.mScreenWidth = screenWidth;\n\tthis.mScreenHeight = screenHeight;\n\t\n\tif (this.mIsLandscape) {\n\t\tthis.mCellWidth = (screenWidth - this.mDotGridPaddingBottom) / (this.mCellsWide * 1.0f);\n\t\tthis.mCellHeight = (screenHeight - (this.mDotGridPaddingTop + this.mDotGridPaddingLeft + this.mDotGridPaddingRight)) / (this.mCellsTall * 1.0f);\n\t} else {\n\t\tthis.mCellWidth = (screenWidth - (this.mDotGridPaddingLeft + this.mDotGridPaddingRight)) / (this.mCellsWide * 1.0f);\n\t\tthis.mCellHeight = (screenHeight - (this.mDotGridPaddingTop + this.mDotGridPaddingBottom)) / (this.mCellsTall * 1.0f);\n\t}\n\t\n\t//Update cell size\n\tthis.mCellSize.right = this.mCellWidth;\n\tthis.mCellSize.bottom = this.mCellHeight;\n\t\n\tif (Wallpaper.LOG_DEBUG) {\n\t\tLog.d(Game.TAG, \"Is Landscape: \" + this.mIsLandscape);\n\t\tLog.d(Game.TAG, \"Screen Width: \" + screenWidth);\n\t\tLog.d(Game.TAG, \"Screen Height: \" + screenHeight);\n\t\tLog.d(Game.TAG, \"Cell Width: \" + this.mCellWidth);\n\t\tLog.d(Game.TAG, \"Cell Height: \" + this.mCellHeight);\n\t}\n\t\n\t//Resize entities\n\tthis.mFruit.performResize(this);\n\tthis.mTheMan.performResize(this);\n\tfor (final Ghost ghost : this.mGhosts) {\n\t\tghost.performResize(this);\n\t}\n\t\n\t//For on-board HUD text\n\tfinal Point theManInitial = this.mTheMan.getInitialPosition(this);\n\tthis.mTextLocation.x = (theManInitial.x + 0.5f) * this.mCellWidth;\n\tthis.mTextLocation.y = (theManInitial.y - 0.1f) * this.mCellHeight;\n\t\n\t//Calculate walls\n\tthis.mWalls.clear();\n\tfinal float cellOverEight = ((this.mCellWidth < this.mCellHeight) ? this.mCellHeight : this.mCellWidth) / 8.0f;\n\t\t\n\t//Widget walls\n\tfor (final Rect widget : this.mWidgetLocations) {\n\t\t\tfloat left = ((widget.left * (this.mCellColumnSpacing + 1)) + 1) * this.mCellWidth;\n\t\t\tfloat top = ((widget.top * (this.mCellRowSpacing + 1)) + 1) * this.mCellHeight;\n\t\tfloat right = (((widget.right * (this.mCellColumnSpacing + 1)) + this.mCellColumnSpacing + 1)) * this.mCellWidth;\n\t\tfloat bottom = (((widget.bottom * (this.mCellRowSpacing + 1)) + this.mCellRowSpacing + 1)) * this.mCellHeight;\n\t\t\t\n\t\t\tthis.mWalls.add(new RectF(left, top, right, bottom));\n\t\t\t\n\t\t\tleft += cellOverEight;\n\t\t\ttop += cellOverEight;\n\t\t\tright -= cellOverEight;\n\t\t\tbottom -= cellOverEight;\n\n\t\t\tthis.mWalls.add(new RectF(left, top, right, bottom));\n\t}\n\t\t\n\t//Icon walls\n\tfor (int y = 0; y < this.mIconRows; y++) {\n\t\tfor (int x = 0; x < this.mIconCols; x++) {\n\t\t\tboolean contained = false;\n\t\t\tfor (final Rect widget : this.mWidgetLocations) {\n\t\t\t\tif (x >= widget.left && x <= widget.right && y >= widget.top && y <= widget.bottom) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (contained) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tfloat left = ((x * (this.mCellColumnSpacing + 1)) + 1) * this.mCellWidth;\n\t\t\tfloat top = ((y * (this.mCellRowSpacing + 1)) + 1) * this.mCellHeight;\n\t\t\tfloat right = ((x * (this.mCellColumnSpacing + 1)) + 1 + this.mCellColumnSpacing) * this.mCellWidth;\n\t\t\tfloat bottom = ((y * (this.mCellRowSpacing + 1)) + 1 + this.mCellRowSpacing) * this.mCellHeight;\n\n\t\t\tthis.mWalls.add(new RectF(left, top, right, bottom));\n\t\t\t\n\t\t\tleft += cellOverEight;\n\t\t\ttop += cellOverEight;\n\t\t\tright -= cellOverEight;\n\t\t\tbottom -= cellOverEight;\n\n\t\t\tthis.mWalls.add(new RectF(left, top, right, bottom));\n\t\t}\n\t}\n\n\tif (Wallpaper.LOG_VERBOSE) {\n\t\tLog.v(Game.TAG, \"< performResize()\");\n\t}\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Draw the lives, score, and level.\n * \n * @param c Canvas to draw on.\n */\n", "func_signal": "private void drawHud(final Canvas c)", "code": "{\n\tif (this.mIsDisplayingHud && !this.mIsLandscape) {\n\t        //Lives and score\n\t        final float top = this.mScreenHeight - this.mHudOffset;\n\t        String score;\n\n\t        if (this.mMode != Game.Mode.ENDLESS) {\n\t\t        for (int i = 0; i < this.mLives; i++) {\n\t\t        \tfinal RectF dest = new RectF((i * (this.mHudSize + Game.HUD_PADDING)) + Game.HUD_PADDING, top - this.mHudSize, ((i + 1) * (this.mHudSize + Game.HUD_PADDING)), top);\n\t\t        \tswitch (this.mTheMan.getCharacter()) {\n\t\t        \t\tcase THEMAN:\n\t\t        \t\tcase GOOGOL:\n\t\t        \t\tcase THEMANDROID:\n\t\t\t        \t\tc.drawArc(dest, Game.HUD_THEMAN_ANGLE, Game.HUD_THEMAN_ARC, true, this.mTheManForeground);\n\t\t        \t\t\tbreak;\n\t\t        \t\t\t\n\t\t        \t\tcase ANDY:\n\t\t        \t\t\tc.drawBitmap(this.mAndy, null, dest, Entity.SPRITE_PAINT);\n\t\t        \t\t\tbreak;\n\t\t        \t}\n\t\t        }\n\t\t        \n\t\t        //Don't display larger than 999,999 (bug in original game)\n\t\t        score = String.valueOf(Game.SCORE_FORMAT.format(this.mScore % Game.SCORE_FLIPPING)) + \" L\" + String.valueOf(this.mLevel);\n\t        } else {\n\t        \t//In endless mode display actual score\n\t        \tscore = String.valueOf(this.mScore);\n\t        }\n\t        \n\t        c.drawText(score, this.mScreenWidth - this.mHudForeground.measureText(score) - Game.HUD_PADDING, top, this.mHudForeground);\n\t}\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Find a random blank and valid cell position on the board\n * \n * @return Blank cell position\n */\n", "func_signal": "private Point getRandomBlankCell()", "code": "{\n\twhile (true) {\n\t\tfinal Point cell = new Point(Game.RANDOM.nextInt(this.mCellsWide), Game.RANDOM.nextInt(this.mCellsTall));\n\t\tif (this.isValidBoardPosition(cell) && (this.getCell(cell) == Game.Cell.BLANK)) {\n\t\t\t\treturn cell;\n\t\t\t}\n\t}\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Test if a Point is a valid coordinate on the game board for an entity.\n * \n * @param entity Entity for whom to check.\n * @param position Point representing coordinate.\n * @return Boolean indicating whether or not the position is valid.\n */\n", "func_signal": "public boolean isValidPosition(final Entity entity, final Point position)", "code": "{\n\tif (((entity instanceof TheMan) && this.mIsWrappingTheMan) || ((entity instanceof Ghost) && this.mIsWrappingGhosts)) {\n\t\t//wrap past bounds positively and negatively\n\t\tif ((this.mWrapping == Game.Wrapping.ALL) || (position.y == ((this.mIconRows / 2) * (this.mCellRowSpacing + 1)))) {\n\t    \t\tif (position.x < 0) {\n\t    \t\t\tposition.x = this.mCellsWide + position.x;\n\t    \t\t} else {\n\t    \t\t\tposition.x %= this.mCellsWide;\n\t    \t\t}\n\t\t}\n\t\tif (this.mWrapping == Game.Wrapping.ALL) {\n\t    \t\tif (position.y < 0) {\n\t    \t\t\tposition.y = this.mCellsTall + position.y;\n\t    \t\t} else {\n\t    \t\t\tposition.y %= this.mCellsTall;\n\t    \t\t}\n\t\t}\n\t}\n\t\n\treturn this.isValidBoardPosition(position);\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Iterate all entities one step.\n * \n * @throws SomethingIsCausingEntitiesToNullPointerException \n */\n", "func_signal": "public void tick() throws SomethingIsCausingEntitiesToNullPointerException", "code": "{\n\tthis.mTickCount += 1;\n\t\n\t//Check for level complete\n\tif ((this.mDotsRemaining <= 0) && (this.mState != Game.State.LEVEL_COMPLETE)) {\n\t\t//Check for The Mandroid trophy\n\t\tif (this.hasNotLostLife() && (this.mGhostEatenThisLevel == 0) && (this.mJuggerdotsRemaining == 0)) {\n\t\t\tthis.earnTrophyTheMandroid();\n\t\t}\n\t\t\n    \tthis.setState(Game.State.LEVEL_COMPLETE);\n\t}\n\t\n\t//Always tick the fruit if the level is active, it waits for no one, living or dead\n\tif (this.mState != Game.State.LEVEL_COMPLETE) {\n\t\tthis.mFruit.tick(this);\n\t}\n\t\n\tif (this.mState != Game.State.PLAYING) {\n\t\t//continue to tick The Man in death\n\t\tif (this.mState == Game.State.DYING) {\n\t\t\tthis.mTheMan.tick(this);\n\t\t}\n\t\t\n\t\t//check if current state has expired\n\t\tif ((System.currentTimeMillis() - this.mStateTimestamp) > this.mState.length) {\n\t    \t\tswitch (this.mState) {\n\t    \t\t\tcase GAME_OVER:\n\t    \t\t\t\tthis.newGame();\n\t    \t\t\t\tbreak;\n\t    \t\t\t\t\n\t    \t\t\tcase DYING:\n\t    \t\t\t\tif ((this.mLives < 0) && (this.mMode != Game.Mode.ENDLESS)) {\n\t    \t\t\t\t\tthis.setState(Game.State.GAME_OVER);\n\t    \t\t\t\t\tbreak;\n\t    \t\t\t\t} else {\n\t    \t\t\t\t\tthis.newLife();\n\t    \t\t\t\t\t//fall through to next case\n\t    \t\t\t\t}\n\t    \t\t\t\t\n\t    \t\t\tcase READY:\n\t    \t\t\t\tthis.setState(Game.State.PLAYING);\n\t    \t\t\t\tbreak;\n\t    \t\t\t\t\n\t    \t\t\tcase LEVEL_COMPLETE:\n\t    \t\t\t\tthis.newLevel();\n\t    \t\t\t\tbreak;\n\t    \t\t}\n\t\t}\n\t} else {\n\t    \t//The Man is ticked when playing\n\t    \tthis.mTheMan.tick(this);\n\t    \t\n\t    \t//Ghosts are only ticked when playing\n\t    \tfor (final Ghost ghost : this.mGhosts) {\n\t    \t\tghost.tick(this);\n\t    \t}\n\t}\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Switch the current state of the game.\n * \n * @param state New state.\n */\n", "func_signal": "private void setState(final Game.State state)", "code": "{\n\tthis.mState = state;\n\tthis.mStateTimestamp = System.currentTimeMillis();\n\t\n\tif (Wallpaper.LOG_DEBUG) {\n\t\tLog.d(Game.TAG, \"Changing game state to \" + state);\n\t}\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Add an amount to the player's score.\n * \n * @param amount Amount to add.\n */\n", "func_signal": "private void addToScore(final int amount)", "code": "{\n\tthis.mScore += amount;\n\t\n\t//Check bonus life\n\tif (this.mIsBonusLifeAllowed && !this.mIsBonusLifeGiven && (this.mScore > this.mBonusLifeThreshold)) {\n\t\tthis.mIsBonusLifeGiven = true;\n\t\tthis.mLives += 1;\n\t}\n\t\n\t//Check for Googol trophy\n\tif (this.mScore >= Game.TROPHY_GOOGOL_THRESHOLD) {\n\t\tthis.earnTrophyGoogol();\n\t}\n\t\n\t//Check for Legend trophy\n\tif (this.mScore >= Game.TROPHY_LEGEND_THRESHOLD) {\n\t\tthis.earnTrophyLegend();\n\t}\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Test if a Point is a valid coordinate on the game board.\n * \n * @param position Point representing coordinate.\n * @return Boolean indicating whether or not the position is valid.\n */\n", "func_signal": "public boolean isValidBoardPosition(final Point position)", "code": "{\n\treturn ((position.x >= 0) && (position.x < this.mCellsWide)\n\t\t    && (position.y >= 0) && (position.y < this.mCellsTall)\n\t\t    && (this.mBoard[position.y][position.x] != Cell.WALL));\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Reset the board state to that of a level's first initialization.\n */\n", "func_signal": "private void newLevel()", "code": "{\n\tif (Wallpaper.LOG_VERBOSE) {\n\t\tLog.v(Game.TAG, \"> newLevel()\");\n\t}\n\t\n\tthis.mLevel += 1;\n\tthis.setState(Game.State.READY);\n\t\n\t//Kill screen on level 256\n\tif ((this.mIsKillScreenEnabled && (this.mLevel == Game.KILL_SCREEN_LEVEL)) || (this.mIsTrophyLegendEnabled && (Game.RANDOM.nextInt(Game.KILL_SCREEN_TROPHY_PROBABILITY) == 0))) {\n\t\tthis.mIsOnKillScreen = true;\n\t\t\n\t\t\t//Load the kill screen sprite\n\t\t\tfinal BitmapFactory.Options options = new BitmapFactory.Options();\n\t\t\toptions.inScaled = false;\n\t\t\tthis.mKillScreen = BitmapFactory.decodeResource(Wallpaper.CONTEXT.getResources(), R.drawable.killscreen, options);\n\t\t\n\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\tLog.d(Game.TAG, \"Kill screen enabled for this level\");\n\t\t}\n\t} else {\n\t\tif (this.mIsKillScreenEnabled && (this.mLevel > Game.KILL_SCREEN_LEVEL)) {\n\t\t\t//Loop levels\n\t\t\tthis.mLevel = 1;\n\t\t}\n\t\t\n\t\tthis.mIsOnKillScreen = false;\n\t\tthis.mKillScreen = null;\n\t}\n\t\n\t//Check trophy CEOs earned\n\tif (this.mLevel == Game.TROPHY_CEOS_THRESHOLD) {\n\t\tthis.earnTrophyCeos();\n\t}\n\t\n\t//Initialize dot grid\n\tfinal int cellWidth = this.mCellColumnSpacing + 1;\n\tfinal int cellHeight = this.mCellRowSpacing + 1;\n\tfor (int y = 0; y < this.mCellsTall; y++) {\n\t\tfor (int x = 0; x < this.mCellsWide; x++) {\n\t\t\t\n\t\t\tif ((x % cellWidth == 0) || (y % cellHeight == 0)) {\n\t\t\t\tthis.mBoard[y][x] = Game.Cell.DOT;\n\t\t\t} else {\n\t\t\t\tthis.mBoard[y][x] = Game.Cell.WALL;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//Remove dots under widgets\n\tfor (final Rect widget : this.mWidgetLocations) {\n\t\tif (Wallpaper.LOG_DEBUG) {\n\t\t\tLog.d(Game.TAG, \"T: \" + widget.top + \", L: \" + widget.left + \", B: \" + widget.bottom + \", R: \" + widget.right);\n\t\t}\n\n\t\tfinal int top = (widget.top * cellHeight) + 1;\n\t\tfinal int left = (widget.left * cellWidth) + 1;\n\t\tfinal int bottom = (widget.bottom * cellHeight) + this.mCellRowSpacing;\n\t\tfinal int right = (widget.right * cellWidth) + this.mCellColumnSpacing;\n\t\tfor (int y = top; y <= bottom; y++) {\n\t\t\tfor (int x = left; x <= right; x++) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.mBoard[y][x] = Game.Cell.WALL;\n\t\t\t\t} catch (final ArrayIndexOutOfBoundsException e) {\n\t    \t\t\tLog.i(Game.TAG, \"T: \" + widget.top + \", L: \" + widget.left + \", B: \" + widget.bottom + \", R: \" + widget.right);\n\t\t\t\t\tLog.e(Game.TAG, \"Error removing dot under aforementioned widget at location (\" + x + \",\" + y + \")\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//Initialize juggerdots\n\tthis.mBoard[this.mCellRowSpacing + 1][0] = Cell.JUGGERDOT;\n\tthis.mBoard[0][this.mCellsWide - this.mCellColumnSpacing - 2] = Cell.JUGGERDOT;\n\tthis.mBoard[this.mCellsTall - this.mCellRowSpacing - 2][this.mCellsWide - 1] = Cell.JUGGERDOT;\n\tthis.mBoard[this.mCellsTall - 1][this.mCellColumnSpacing + 1] = Cell.JUGGERDOT;\n\tthis.mJuggerdotsRemaining = Game.NUMBER_OF_JUGGERDOTS;\n\t\n\t//Count dots\n\tthis.mDotsRemaining = 0;\n\tfor (int y = 0; y < this.mCellsTall; y++) {\n\t\tfor (int x = 0; x < this.mCellsWide; x++) {\n\t\t\tif (this.mBoard[y][x] == Cell.DOT) {\n\t\t\t\tthis.mDotsRemaining += 1;\n\t\t\t\t}\n\t\t}\n\t}\n\tthis.mDotsTotal = this.mDotsRemaining + this.mJuggerdotsRemaining;\n\t\n\tthis.mAllFleeingGhostsEaten = 0;\n\tthis.mGhostEatenThisLevel = 0;\n\t\n\t//Initialize entities\n\tthis.mTheMan.newLevel(this);\n\tthis.mFruit.newLevel(this);\n\tfor (final Ghost ghost : this.mGhosts) {\n\t\tghost.newLevel(this);\n\t}\n\t\n\tif (Wallpaper.LOG_VERBOSE) {\n\t\tLog.v(Game.TAG, \"< newLevel()\");\n\t}\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Called after The Man dies to reset entity positions.\n */\n", "func_signal": "private void newLife()", "code": "{\n\tthis.mTheMan.newLife(this);\n\tfor (final Ghost ghost : this.mGhosts) {\n\t\tghost.newLife(this);\n\t}\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * Test if a Point is an intersection on the game board.\n * \n * @param position Point representing coordinate.\n * @return Boolean indicating whether or not the position is in an intersection.\n */\n", "func_signal": "public boolean isIntersection(final Point position)", "code": "{\n\tint directions = 0;\n\tfor (final Entity.Direction direction : Entity.Direction.values()) {\n\t\tif (this.isValidBoardPosition(Entity.move(position, direction))) {\n\t\t\tdirections += 1;\n\t\t}\n\t}\n\t\n\t//TODO: this is wrong. should be >2 but then the nextRandomDirection methods fail on a corner\n\treturn (directions > 1);\n}", "path": "src\\com\\jakewharton\\wakkawallpaper\\Game.java", "repo_name": "JakeWharton/WakkaWallpaper", "stars": 21, "license": "None", "language": "java", "size": 1206}
{"docstring": "/**\n * @deprecated Use {@link #getTypeTag(Class)}\n * and {@link #convertArg(Context, Scriptable, Object, int)}\n * for type convertion.\n */\n", "func_signal": "public static Object convertArg(Context cx, Scriptable scope,\n                                Object arg, Class desired)", "code": "{\n    int tag = getTypeTag(desired);\n    if (tag == JAVA_UNSUPPORTED_TYPE) {\n        throw Context.reportRuntimeError1\n            (\"msg.cant.convert\", desired.getName());\n    }\n    return convertArg(cx, scope, arg, tag);\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\FunctionObject.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n * Generate a salt for use with the BCrypt.hashpw() method\n * @param log_rounds\tthe log2 of the number of rounds of\n * hashing to apply - the work factor therefore increases as\n * 2**log_rounds.\n * @param random\t\tan instance of SecureRandom to use\n * @return\tan encoded salt value\n */\n", "func_signal": "public static String gensalt(int log_rounds, SecureRandom random)", "code": "{\n\tStringBuffer rs = new StringBuffer();\n\tbyte rnd[] = new byte[BCRYPT_SALT_LEN];\n\n\trandom.nextBytes(rnd);\n\n\trs.append(\"$2a$\");\n\tif (log_rounds < 10)\n\t\trs.append(\"0\");\n\trs.append(Integer.toString(log_rounds));\n\trs.append(\"$\");\n\trs.append(encode_base64(rnd, rnd.length));\n\treturn rs.toString();\n}", "path": "infrastructure\\net.appjet.common\\util\\BCrypt.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n * Encode a byte array using bcrypt's slightly-modified base64\n * encoding scheme. Note that this is *not* compatible with\n * the standard MIME-base64 encoding.\n *\n * @param d\tthe byte array to encode\n * @param len\tthe number of bytes to encode\n * @return\tbase64-encoded string\n * @exception IllegalArgumentException if the length is invalid\n */\n", "func_signal": "private static String encode_base64(byte d[], int len)\n\tthrows IllegalArgumentException", "code": "{\n\tint off = 0;\n\tStringBuffer rs = new StringBuffer();\n\tint c1, c2;\n\n\tif (len <= 0 || len > d.length)\n\t\tthrow new IllegalArgumentException (\"Invalid len\");\n\n\twhile (off < len) {\n\t\tc1 = d[off++] & 0xff;\n\t\trs.append(base64_code[(c1 >> 2) & 0x3f]);\n\t\tc1 = (c1 & 0x03) << 4;\n\t\tif (off >= len) {\n\t\t\trs.append(base64_code[c1 & 0x3f]);\n\t\t\tbreak;\n\t\t}\n\t\tc2 = d[off++] & 0xff;\n\t\tc1 |= (c2 >> 4) & 0x0f;\n\t\trs.append(base64_code[c1 & 0x3f]);\n\t\tc1 = (c2 & 0x0f) << 2;\n\t\tif (off >= len) {\n\t\t\trs.append(base64_code[c1 & 0x3f]);\n\t\t\tbreak;\n\t\t}\n\t\tc2 = d[off++] & 0xff;\n\t\tc1 |= (c2 >> 6) & 0x03;\n\t\trs.append(base64_code[c1 & 0x3f]);\n\t\trs.append(base64_code[c2 & 0x3f]);\n\t}\n\treturn rs.toString();\n}", "path": "infrastructure\\net.appjet.common\\util\\BCrypt.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n * Updates the internal state of this NamespaceHelper to reflect the\n * existance of the XML token pointed to by the cursor.\n */\n", "func_signal": "private void processName(XmlCursor cursor, ObjArray declarations)", "code": "{\n    javax.xml.namespace.QName qname = cursor.getName();\n    String uri = qname.getNamespaceURI();\n    Set prefixes = (Set)uriToPrefix.get(uri);\n    if(prefixes == null || prefixes.size() == 0)\n    {\n        undeclared.add(uri);\n        if(declarations != null)\n            declarations.add(new Namespace(lib, uri));\n    }\n}", "path": "infrastructure\\rhino1_7R1\\deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\NamespaceHelper.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n    This experimental interface is undocumented.\n */\n", "func_signal": "public static org.w3c.dom.Node toDomNode(Object xmlObject)", "code": "{\n    //    Could return DocumentFragment for XMLList\n    //    Probably a single node for XMLList with one element\n    if (xmlObject instanceof XML) {\n        return ((XML)xmlObject).toDomNode();\n    } else {\n        throw new IllegalArgumentException(\"xmlObject is not an XML object in JavaScript.\");\n    }\n}", "path": "infrastructure\\rhino1_7R1\\xmlimplsrc\\org\\mozilla\\javascript\\xmlimpl\\XMLLibImpl.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n * Hash a password using the OpenBSD bcrypt scheme\n * @param password\tthe password to hash\n * @param salt\tthe salt to hash with (perhaps generated\n * using BCrypt.gensalt)\n * @return\tthe hashed password\n */\n", "func_signal": "public static String hashpw(String password, String salt)", "code": "{\n\tBCrypt B;\n\tString real_salt;\n\tbyte passwordb[], saltb[], hashed[];\n\tchar minor = (char)0;\n\tint rounds, off = 0;\n\tStringBuffer rs = new StringBuffer();\n\n\tif (salt.charAt(0) != '$' || salt.charAt(1) != '2')\n\t\tthrow new IllegalArgumentException (\"Invalid salt version\");\n\tif (salt.charAt(1) != '$') {\n\t\tminor = salt.charAt(2);\n\t\tif (minor != 'a' || salt.charAt(3) != '$')\n\t\t\tthrow new IllegalArgumentException (\"Invalid salt revision\");\n\t\toff = 4;\n\t} else\n\t\toff = 3;\n\n\t// Extract number of rounds\n\tif (salt.charAt(off + 2) > '$')\n\t\tthrow new IllegalArgumentException (\"Missing salt rounds\");\n\trounds = Integer.parseInt(salt.substring(off, off + 2));\n\n\treal_salt = salt.substring(off + 3, off + 25);\n\ttry {\n\t\tpasswordb = (password + (minor >= 'a' ? \"\\000\" : \"\")).getBytes(\"US-ASCII\");\n\t} catch (UnsupportedEncodingException uee) {\n\t\t// The JDK guarantees that US-ASCII is supported.\n\t\tthrow new AssertionError(\"US-ASCII is not supported\");\n\t}\n\n\tsaltb = decode_base64(real_salt, BCRYPT_SALT_LEN);\n\n\tB = new BCrypt();\n\thashed = B.crypt_raw(passwordb, saltb, rounds);\n\n\trs.append(\"$2\");\n\tif (minor >= 'a')\n\t\trs.append(minor);\n\trs.append(\"$\");\n\tif (rounds < 10)\n\t\trs.append(\"0\");\n\trs.append(Integer.toString(rounds));\n\trs.append(\"$\");\n\trs.append(encode_base64(saltb, saltb.length));\n\trs.append(encode_base64(hashed,\n\t    bf_crypt_ciphertext.length * 4 - 1));\n\treturn rs.toString();\n}", "path": "infrastructure\\net.appjet.common\\util\\BCrypt.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n * Initialise the Blowfish key schedule\n */\n", "func_signal": "private void init_key()", "code": "{\n\tP = (int[])P_orig.clone();\n\tS = (int[])S_orig.clone();\n}", "path": "infrastructure\\net.appjet.common\\util\\BCrypt.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n * Key the Blowfish cipher\n * @param key\tan array containing the key\n */\n", "func_signal": "private void key(byte key[])", "code": "{\n\tint i;\n\tint koffp[] = { 0 };\n\tint lr[] = { 0, 0 };\n\tint plen = P.length, slen = S.length;\n\n\tfor (i = 0; i < plen; i++)\n\t\tP[i] = P[i] ^ streamtoword(key, koffp);\n\n\tfor (i = 0; i < plen; i += 2) {\n\t\tencipher(lr, 0);\n\t\tP[i] = lr[0];\n\t\tP[i + 1] = lr[1];\n\t}\n\n\tfor (i = 0; i < slen; i += 2) {\n\t\tencipher(lr, 0);\n\t\tS[i] = lr[0];\n\t\tS[i + 1] = lr[1];\n\t}\n}", "path": "infrastructure\\net.appjet.common\\util\\BCrypt.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n * Get stream encoding or NULL if stream is uninitialized.\n * Call init() or read() method to initialize it.\n */\n", "func_signal": "public String getEncoding()", "code": "{\n   if (internalIn2 == null) return null;\n   return internalIn2.getEncoding();\n}", "path": "infrastructure\\net.appjet.common\\util\\BetterFile.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "//    Called by QName\n//    TODO    Move functionality from QName lookupPrefix to here\n", "func_signal": "private void setPrefix(String prefix)", "code": "{\n    if (prefix == null) throw new IllegalArgumentException();\n    this.prefix = prefix;\n}", "path": "infrastructure\\rhino1_7R1\\xmlimplsrc\\org\\mozilla\\javascript\\xmlimpl\\XmlNode.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "//    returns true if node was found, false otherwise\n", "func_signal": "private static boolean setContent(Element node, String id, String content)", "code": "{\n    if (node.getAttribute(\"id\").equals(id)) {\n        node.setTextContent(node.getTextContent() + \"\\n\" + content);\n        return true;\n    } else {\n        NodeList children = node.getChildNodes();\n        for (int i=0; i<children.getLength(); i++) {\n            if (children.item(i) instanceof Element) {\n                Element e = (Element)children.item(i);\n                boolean rv = setContent( e, id, content );\n                if (rv) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "path": "infrastructure\\rhino1_7R1\\testsrc\\org\\mozilla\\javascript\\drivers\\JsDriver.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n * Declared a new namespace\n *\n * @param prefix\n * @param uri\n * @param declarations\n */\n", "func_signal": "private void declareNamespace(String prefix, String uri, ObjArray declarations)", "code": "{\n    Set prefixes = (Set)uriToPrefix.get(uri);\n    if(prefixes == null)\n    {\n        prefixes = new HashSet();\n        uriToPrefix.put(uri, prefixes);\n    }\n\n    if(!prefixes.contains(prefix))\n    {\n        String oldURI = (String)prefixToURI.get(prefix);\n\n        // Add the new mapping\n        prefixes.add(prefix);\n        prefixToURI.put(prefix, uri);\n        if(declarations != null)\n            declarations.add(new Namespace(lib, prefix, uri));\n\n        if(oldURI != null)\n        {\n            // Update the existing mapping\n            prefixes = (Set)uriToPrefix.get(oldURI);\n            prefixes.remove(prefix);\n        }\n    }\n}", "path": "infrastructure\\rhino1_7R1\\deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\NamespaceHelper.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n * Perform the \"enhanced key schedule\" step described by\n * Provos and Mazieres in \"A Future-Adaptable Password Scheme\"\n * http://www.openbsd.org/papers/bcrypt-paper.ps\n * @param data\tsalt information\n * @param key\tpassword information\n */\n", "func_signal": "private void ekskey(byte data[], byte key[])", "code": "{\n\tint i;\n\tint koffp[] = { 0 }, doffp[] = { 0 };\n\tint lr[] = { 0, 0 };\n\tint plen = P.length, slen = S.length;\n\n\tfor (i = 0; i < plen; i++)\n\t\tP[i] = P[i] ^ streamtoword(key, koffp);\n\n\tfor (i = 0; i < plen; i += 2) {\n\t\tlr[0] ^= streamtoword(data, doffp);\n\t\tlr[1] ^= streamtoword(data, doffp);\n\t\tencipher(lr, 0);\n\t\tP[i] = lr[0];\n\t\tP[i + 1] = lr[1];\n\t}\n\n\tfor (i = 0; i < slen; i += 2) {\n\t\tlr[0] ^= streamtoword(data, doffp);\n\t\tlr[1] ^= streamtoword(data, doffp);\n\t\tencipher(lr, 0);\n\t\tS[i] = lr[0];\n\t\tS[i + 1] = lr[1];\n\t}\n}", "path": "infrastructure\\net.appjet.common\\util\\BCrypt.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n * @return One of <tt>JAVA_*_TYPE</tt> constants to indicate desired type\n *         or {@link #JAVA_UNSUPPORTED_TYPE} if the convertion is not\n *         possible\n */\n", "func_signal": "public static int getTypeTag(Class type)", "code": "{\n    if (type == ScriptRuntime.StringClass)\n        return JAVA_STRING_TYPE;\n    if (type == ScriptRuntime.IntegerClass || type == Integer.TYPE)\n        return JAVA_INT_TYPE;\n    if (type == ScriptRuntime.BooleanClass || type == Boolean.TYPE)\n        return JAVA_BOOLEAN_TYPE;\n    if (type == ScriptRuntime.DoubleClass || type == Double.TYPE)\n        return JAVA_DOUBLE_TYPE;\n    if (ScriptRuntime.ScriptableClass.isAssignableFrom(type))\n        return JAVA_SCRIPTABLE_TYPE;\n    if (type == ScriptRuntime.ObjectClass)\n        return JAVA_OBJECT_TYPE;\n\n    // Note that the long type is not supported; see the javadoc for\n    // the constructor for this class\n\n    return JAVA_UNSUPPORTED_TYPE;\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\FunctionObject.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n * Define this function as a JavaScript constructor.\n * <p>\n * Sets up the \"prototype\" and \"constructor\" properties. Also\n * calls setParent and setPrototype with appropriate values.\n * Then adds the function object as a property of the given scope, using\n *      <code>prototype.getClassName()</code>\n * as the name of the property.\n *\n * @param scope the scope in which to define the constructor (typically\n *              the global object)\n * @param prototype the prototype object\n * @see org.mozilla.javascript.Scriptable#setParentScope\n * @see org.mozilla.javascript.Scriptable#setPrototype\n * @see org.mozilla.javascript.Scriptable#getClassName\n */\n", "func_signal": "public void addAsConstructor(Scriptable scope, Scriptable prototype)", "code": "{\n    initAsConstructor(scope, prototype);\n    defineProperty(scope, prototype.getClassName(),\n                   this, ScriptableObject.DONTENUM);\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\FunctionObject.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n * Updates the internal state of this NamespaceHelper with the\n * namespace information of the element pointed to by the cursor.\n */\n", "func_signal": "private void update(XmlCursor cursor, ObjArray declarations)", "code": "{\n    // Process the Namespace declarations\n    cursor.push();\n    while(cursor.toNextToken().isAnyAttr())\n    {\n        if(cursor.isNamespace())\n        {\n            javax.xml.namespace.QName name = cursor.getName();\n            String prefix = name.getLocalPart();\n            String uri = name.getNamespaceURI();\n\n            declareNamespace(prefix, uri, declarations);\n        }\n    }\n    cursor.pop();\n\n    // Process the element\n    processName(cursor, declarations);\n\n    // Process the attributes\n    cursor.push();\n    boolean hasNext = cursor.toFirstAttribute();\n    while(hasNext)\n    {\n        processName(cursor, declarations);\n        hasNext = cursor.toNextAttribute();\n    }\n    cursor.pop();\n}", "path": "infrastructure\\rhino1_7R1\\deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\NamespaceHelper.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n * Decode a string encoded using bcrypt's base64 scheme to a\n * byte array. Note that this is *not* compatible with\n * the standard MIME-base64 encoding.\n * @param s\tthe string to decode\n * @param maxolen\tthe maximum number of bytes to decode\n * @return\tan array containing the decoded bytes\n * @throws IllegalArgumentException if maxolen is invalid\n */\n", "func_signal": "private static byte[] decode_base64(String s, int maxolen)\n\tthrows IllegalArgumentException", "code": "{\n\tStringBuffer rs = new StringBuffer();\n\tint off = 0, slen = s.length(), olen = 0;\n\tbyte ret[];\n\tbyte c1, c2, c3, c4, o;\n\n\tif (maxolen <= 0)\n\t\tthrow new IllegalArgumentException (\"Invalid maxolen\");\n\n\twhile (off < slen - 1 && olen < maxolen) {\n\t\tc1 = char64(s.charAt(off++));\n\t\tc2 = char64(s.charAt(off++));\n\t\tif (c1 == -1 || c2 == -1)\n\t\t\tbreak;\n\t\to = (byte)(c1 << 2);\n\t\to |= (c2 & 0x30) >> 4;\n\t\trs.append((char)o);\n\t\tif (++olen >= maxolen || off >= slen)\n\t\t\tbreak;\n\t\tc3 = char64(s.charAt(off++));\n\t\tif (c3 == -1)\n\t\t\tbreak;\n\t\to = (byte)((c2 & 0x0f) << 4);\n\t\to |= (c3 & 0x3c) >> 2;\n\t\trs.append((char)o);\n\t\tif (++olen >= maxolen || off >= slen)\n\t\t\tbreak;\n\t\tc4 = char64(s.charAt(off++));\n\t\to = (byte)((c3 & 0x03) << 6);\n\t\to |= c4;\n\t\trs.append((char)o);\n\t\t++olen;\n\t}\n\n\tret = new byte[olen];\n\tfor (off = 0; off < olen; off++)\n\t\tret[off] = (byte)rs.charAt(off);\n\treturn ret;\n}", "path": "infrastructure\\net.appjet.common\\util\\BCrypt.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n * Read-ahead four bytes and check for BOM marks. Extra bytes are\n * unread back to the stream, only BOM bytes are skipped.\n */\n", "func_signal": "protected void init() throws IOException", "code": "{\n   if (internalIn2 != null) return;\n\n   String encoding;\n   byte bom[] = new byte[BOM_SIZE];\n   int n, unread;\n   n = internalIn.read(bom, 0, bom.length);\n\n   if ( (bom[0] == (byte)0x00) && (bom[1] == (byte)0x00) &&\n               (bom[2] == (byte)0xFE) && (bom[3] == (byte)0xFF) ) {\n      encoding = \"UTF-32BE\";\n      unread = n - 4;\n   } else if ( (bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE) &&\n               (bom[2] == (byte)0x00) && (bom[3] == (byte)0x00) ) {\n      encoding = \"UTF-32LE\";\n      unread = n - 4;\n   } else if (  (bom[0] == (byte)0xEF) && (bom[1] == (byte)0xBB) &&\n         (bom[2] == (byte)0xBF) ) {\n      encoding = \"UTF-8\";\n      unread = n - 3;\n   } else if ( (bom[0] == (byte)0xFE) && (bom[1] == (byte)0xFF) ) {\n      encoding = \"UTF-16BE\";\n      unread = n - 2;\n   } else if ( (bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE) ) {\n      encoding = \"UTF-16LE\";\n      unread = n - 2;\n   } else {\n      // Unicode BOM mark not found, unread all bytes\n      encoding = defaultEnc;\n      unread = n;\n   }    \n   //System.out.println(\"read=\" + n + \", unread=\" + unread);\n\n   if (unread > 0) internalIn.unread(bom, (n - unread), unread);\n\n   // Use given encoding\n   if (encoding == null) {\n      internalIn2 = new InputStreamReader(internalIn);\n   } else {\n      internalIn2 = new InputStreamReader(internalIn, encoding);\n   }\n}", "path": "infrastructure\\net.appjet.common\\util\\BetterFile.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n * @return Prefix to URI map of all namespaces in scope at the cursor.\n */\n", "func_signal": "public static Map getAllNamespaces(XMLLibImpl lib, XmlCursor cursor)", "code": "{\n    NamespaceHelper helper = new NamespaceHelper(lib);\n\n    cursor.push();\n\n    int depth = 0;\n    while(cursor.hasPrevToken())\n    {\n        if(cursor.isContainer())\n        {\n            cursor.push();\n            depth++;\n        }\n\n        cursor.toParent();\n    }\n\n    for(int i = 0; i < depth; i++)\n    {\n        cursor.pop();\n        helper.update(cursor, null);\n    }\n\n    cursor.pop();\n\n    return helper.prefixToURI;\n}", "path": "infrastructure\\rhino1_7R1\\deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\NamespaceHelper.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "/**\n * @return Object[] array of Namespace objects in scope at the cursor.\n */\n", "func_signal": "public static Object[] inScopeNamespaces(XMLLibImpl lib, XmlCursor cursor)", "code": "{\n    ObjArray namespaces = new ObjArray();\n    NamespaceHelper helper = new NamespaceHelper(lib);\n\n    cursor.push();\n\n    int depth = 0;\n    while(cursor.hasPrevToken())\n    {\n        if(cursor.isContainer())\n        {\n            cursor.push();\n            depth++;\n        }\n\n        cursor.toParent();\n    }\n\n    for(int i = 0; i < depth; i++)\n    {\n        cursor.pop();\n        helper.update(cursor, null);\n    }\n\n    Iterator i = helper.prefixToURI.entrySet().iterator();\n    while(i.hasNext())\n    {\n        Map.Entry entry = (Map.Entry)i.next();\n        Namespace ns = new Namespace(lib, (String)entry.getKey(),\n                                        (String)entry.getValue());\n        namespaces.add(ns);\n    }\n\n    i = helper.undeclared.iterator();\n    while(i.hasNext())\n    {\n        Namespace ns = new Namespace(lib, (String)i.next());\n        namespaces.add(ns);\n    }\n\n    cursor.pop();\n\n    return namespaces.toArray();\n}", "path": "infrastructure\\rhino1_7R1\\deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\NamespaceHelper.java", "repo_name": "karteek/etherpad", "stars": 18, "license": "apache-2.0", "language": "java", "size": 18007}
{"docstring": "////////////////////////////\n////    DATA SENDING    ////\n////////////////////////////\n", "func_signal": "public static String displayProtectedCuboids()", "code": "{\n\tString cuboidsList = \"\";\n\tint size = ProtectedCuboidsNames.size();\n\tif (size > 0){\n\t\tfor( int i = 0; i<size; i++){\n\t\t\tcuboidsList += \" \"+ProtectedCuboidsNames.get(i);\n\t\t}\n\t}\n\telse{\n\t\tcuboidsList = \" <list is empty>\";\n\t}\n\treturn cuboidsList;\n}", "path": "cuboid\\src\\CuboidProtection.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "//Basic command handling\n", "func_signal": "public boolean onCommand(Player player, String[] split)", "code": "{\n\tif(split[0].equalsIgnoreCase(\"/swiss\") && player.canUseCommand(\"/swiss\"))\n\t{\n\t\tSwissSettings settings = getSettings(player);\n\t\tif (split.length > 1)\n\t\t{\n\t\t\tif (split[1].equalsIgnoreCase(\"help\"))\n\t\t\t{\n\t\t\t\tplayer.sendMessage(\"USAGE: /swiss [type]\");\n\t\t\t\treturn(true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsettings.type = Integer.parseInt(split[1]);\n\n\t\t\t\tplayer.sendMessage(\"SwissArmyTorch  --  Mode: \" + settings.mode.name() + \"  ID: \" + settings.type);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsettings.switchMode();\n\t\t\tplayer.sendMessage(\"SwissArmyTorch  --  Mode: \" + settings.mode.name() + \"  ID: \" + settings.type);\n\t\t}\n\t\treturn(true);\n\t}\n\treturn(false);\n}", "path": "swissarmytorch\\src\\SwissArmyTorch.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "// Get marker index, create if doesnt exist\n", "func_signal": "private static int getMarkerIndex(String label)", "code": "{\n\tboolean inList = false;\n\tfor (String l : markerList) {\n\t\tif (l.equals(label))\n\t\t\tinList = true;\n\t}\n\t\n\tif (!inList) {\n\t\tmarkerList.add(label);\n\t\tmarkersArray.add(new JSONObject());\n\t}\n\t\n\treturn markerList.indexOf(label);\n}", "path": "mapmarkers\\src\\MapMarkers.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "// CONNECTIONS\n", "func_signal": "public void setKick(String reason)", "code": "{\n\tthis.recordType = RecordType.KICK;\n\tthis.reason = reason;\n\t\n}", "path": "statslog\\src\\StatsLog.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "/**\n * This must be called to setup the plug-in!\n * @param name - The name for the config/logfile.\n */\n", "func_signal": "public SuperPlugin(String name)", "code": "{\n\tconfig = new PropertiesFile(name+\".txt\");\n\tthis.name = name;\n\treloadConfig();\n}", "path": "sessionprotect\\src\\SuperPlugin.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "//Hooking on arm animation to fire torch\n", "func_signal": "public void onArmSwing(Player player)", "code": "{\n\tif (player.canUseCommand(\"/swiss\"))\n\t{\n\t\tSwissSettings settings = getSettings(player);\n\t\n\t    if ((settings.mode != Mode.OFF) && player.getItemInHand() == 76)\n\t\t{\n\t\t\tHitBlox blox = new HitBlox(player, 100, 0.1);\n\t\t\t\n\t\t\tswitch (settings.mode)\n\t\t\t\t{\n\t\t\t\t// SNIPE mode replaces the block you are aimed at\n\t\t\t\t case SNIPE:\n\t\t\t\t\twhile ((blox.getNextBlock() != null) && (blox.getCurBlock().getType() == 0));\n\t\t\t\t\tif (blox.getCurBlock() != null)\n\t\t\t\t\t\tblox.setCurBlock(settings.type);\n\t\t\t\t\tbreak;\n\t\t\t\t// STICK mode replaces the block that protrudes from the face of the block you are aimed at\n\t\t\t\t case STICK:\n\t\t\t\t\twhile ((blox.getNextBlock() != null) && (blox.getCurBlock().getType() == 0));\n\t\t\t\t\tif (blox.getCurBlock() != null)\n\t\t\t\t\t\tblox.setLastBlock(settings.type);\n\t\t\t\t\tbreak;\n\t\t\t\t// LASER replaces all air along the path to the block you are aimed at\n\t\t\t\t// LASER replaces all non-air in a line behind the block you are aimed at until it hits air or range\n\t\t\t\t case LASER:\n\t\t\t\t\tif (settings.type == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t//while not at limit AND either current is solid or last is air\n\t\t\t\t\t\twhile ((blox.getNextBlock() != null) && ((blox.getCurBlock().getType() != 0) || ((blox.getLastBlock().getType() == 0))))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tblox.setLastBlock(settings.type);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\twhile ((blox.getNextBlock() != null) && (blox.getCurBlock().getType() == 0))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tblox.setLastBlock(settings.type);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t// BEAM is idenitcal to LASER, but zaps a 3x3x3 for each block that LASER would.\n\t\t\t\t case BEAM:\n\t\t\t\t\tArrayList<Block> blocks = new ArrayList<Block>();\n\t\t\t\t\tif (settings.type == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t//while not at limit AND either current is solid or last is air\n\t\t\t\t\t\twhile ((blox.getNextBlock() != null) && ((blox.getCurBlock().getType() != 0) || ((blox.getLastBlock().getType() == 0))))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tblocks.add(blox.getLastBlock());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\twhile ((blox.getNextBlock() != null) && (blox.getCurBlock().getType() == 0))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tblocks.add(blox.getLastBlock());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (Block b : blocks)\n\t\t\t\t\t for (int tx = -1; tx <= 1; tx++)\n\t\t\t\t\t  for (int ty = -1; ty <= 1; ty++)\n\t\t\t\t\t   for (int tz = -1; tz <= 1; tz++)\n\t\t\t\t\t    etc.getServer().setBlockAt(settings.type, b.getX() + tx, b.getZ() + ty, b.getZ() + tz);\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t}\n\t\t//SETTING ID USING REGULAR TORCHES\n\t\telse if (player.getItemInHand() == 50)\n\t\t{\n\t\t\tHitBlox blox = new HitBlox(player, 100, 0.1);\n\t\t\t\n\t\t\twhile ((blox.getNextBlock() != null) && (blox.getCurBlock().getType() == 0));\n\t\t\tif (blox.getCurBlock() == null)\n\t\t\t{\n\t\t\t\tif (settings.mode == Mode.OFF)\n\t\t\t\t{\n\t\t\t\t\tsettings.switchMode();\n\t\t\t\t\tsettings.type = 0;\n\t\t\t\t}\n\t\t\t\telse if (settings.type == 0)\n\t\t\t\t{\n\t\t\t\t\tsettings.switchMode();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tsettings.type = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif  (settings.mode == Mode.OFF)\n\t\t\t\t{\n\t\t\t\t\tsettings.switchMode();\n\t\t\t\t\tsettings.type = blox.getCurBlock().getType();\n\t\t\t\t}\n\t\t\t\telse if (settings.type == blox.getCurBlock().getType())\n\t\t\t\t{\n\t\t\t\t\tsettings.switchMode();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tsettings.type = blox.getCurBlock().getType();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tplayer.sendMessage(\"SwissArmyTorch  --  Mode: \" + settings.mode.name() + \"  ID: \" + settings.type);\n\t\t}\n\t}\n}", "path": "swissarmytorch\\src\\SwissArmyTorch.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "//!TODO!Extend superplugin from forum.hey0.net, to remove boilerplate code\n", "func_signal": "public MapMarkers()", "code": "{\n\tpropertiesFile = new PropertiesFile(\"mapmarkers.properties\");\n\tdateFormat = new SimpleDateFormat(\"yyMMdd HH:mm:ss\");\n}", "path": "mapmarkers\\src\\MapMarkers.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "// MOVEMENTS\n", "func_signal": "public void setMovement(Location from, Location to, double distance)", "code": "{\n\tthis.recordType = RecordType.MOVE;\n\tthis.from = from;\n\tthis.to = to;\n\tthis.distance = distance;\n}", "path": "statslog\\src\\StatsLog.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "// Ricin\n", "func_signal": "public void setMarker(String label, double x, double y, double z, int id, Date markerDate)", "code": "{\n\t\tint index = getMarkerIndex(label);\n\t\tJSONObject newMarker = new JSONObject();\n\t\tnewMarker.put(\"msg\",label);\n\t\tnewMarker.put(\"x\",x);\n\t\tnewMarker.put(\"y\",y);\n\t\tnewMarker.put(\"z\",z);\n\t\tnewMarker.put(\"id\",id);\n\t\tnewMarker.put(\"timestamp\",dateFormat.format(markerDate));\n\t\tmarkersArray.set(index,newMarker);\n\t}", "path": "mapmarkers\\src\\MapMarkers.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "// ACTIONS\n", "func_signal": "public void setDestroy(Block block)", "code": "{\n\tthis.recordType = RecordType.DESTROY;\n\tthis.blockDestroyed = block;\n}", "path": "statslog\\src\\StatsLog.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "//Returns a SwissSettings for the player, making a new one if it has to\n", "func_signal": "public SwissSettings getSettings(Player player)", "code": "{\n\tSwissSettings settings = (SwissSettings)playerSettings.get(player.getName());\n\tif (settings == null)\n\t{\n\t\tplayerSettings.put(player.getName(), new SwissSettings());\n\t\tsettings = (SwissSettings)playerSettings.get(player.getName());\n\t}\n\n\treturn(settings);\n}", "path": "swissarmytorch\\src\\SwissArmyTorch.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "//////////////////////////////\n////    DATA TREATMENT    ////\n//////////////////////////////\n", "func_signal": "public static byte protegerCuboid(String playerName, ArrayList<String> ownersList, String cuboidName, boolean highProtect)", "code": "{\n\t\t\t\n\tfor(String test : ProtectedCuboidsNames){\n\t\tif(test.equals(cuboidName)){\n\t\t\tif (CuboidPlugin.logging)\n\t\t\t\tCuboidPlugin.log.info(playerName+\" failed to create a protected cuboid named \"+cuboidName+\" (aleady used)\");\n\t\t\treturn 1;\n\t\t}\n\t}\n\t\t\n\tint[] firstPoint = Cuboid.getPoint(playerName, false);\n\tint[] secondPoint = Cuboid.getPoint(playerName, true);\n\t\n\tif ( highProtect ){\n\t\tfirstPoint[1] = 0;\n\t\tsecondPoint[1] = 128;\n\t}\n\telse if( firstPoint[1] == secondPoint[1] ){\t// s'ils sont  la mme hauteur\n\t\tfirstPoint[1]-=addedHeight;\n\t\tsecondPoint[1]+=addedHeight;\n\t}\n\t\n\tProtectedCuboids.add(firstPoint[0]);\t// Mthode plus lgante\n\tProtectedCuboids.add(firstPoint[1]);\n\tProtectedCuboids.add(firstPoint[2]);\n\tProtectedCuboids.add(secondPoint[0]);\n\tProtectedCuboids.add(secondPoint[1]);\n\tProtectedCuboids.add(secondPoint[2]);\n\tProtectedCuboidsOwners.add(ownersList);\n\tProtectedCuboidsNames.add(cuboidName);\n\t\t\n\ttry {\n\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(\"cuboids/protectedCuboids.txt\", true));\n\t\tString newProtectedCuboid = firstPoint[0]+\",\"+firstPoint[1]+\",\"+firstPoint[2]+\",\"+secondPoint[0]+\",\"+secondPoint[1]\n\t\t       +\",\"+secondPoint[2]+\",\"+ownersString(ownersList)+\",\"+cuboidName;\n\t\twriter.append(newProtectedCuboid);\n\t\twriter.newLine();\n\t\twriter.close();\n\t} catch (Exception e) {\n\t\tCuboidPlugin.log.log(Level.SEVERE, \"Cuboid plugin : Error while writing protectedCuboids.txt\", e);\n\t\treturn 2;\n\t}\n\tif (CuboidPlugin.logging)\n\t\tCuboidPlugin.log.info(playerName+\" created a new protected cuboid named \"+cuboidName);\n\t\n\tCuboid.updateChestsState(firstPoint[0], firstPoint[1], firstPoint[2], secondPoint[0], secondPoint[1], secondPoint[2]);\n\t\n\treturn 0;\n}", "path": "cuboid\\src\\CuboidProtection.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "// Sends a message to all players!\n", "func_signal": "public void broadcast(String message)", "code": "{\n\tfor (Player p : etc.getServer().getPlayerList()) {\n\t\tp.sendMessage(message);\n\t}\n}", "path": "template\\src\\Template.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "// Write markers from memory into file\n", "func_signal": "public synchronized boolean writeMarkers()", "code": "{\n\ttry {\n\t\tif (staleTimeout > 0) {\n\t\t\t// Remove stale markers\n\t\t\t\n\t\t\t// Determine timeout date\n\t\t\tCalendar cal = Calendar.getInstance();\n\t\t\tcal.add(Calendar.SECOND, -staleTimeout); // Reil: Should be negative\n\t\t\tdate = cal.getTime();\n\t\t\t\n\t\t\t// Only dealing with player positons\n\t\t\t//!TODO!Use enums\n\t\t\tint markerId = 4;\n\t\t\t\n\t\t\ttry {\n\t\t\t\tfor(Object obj : markersArray){\n\t\t\t\t\ttry {\n\t\t\t\t\t\tJSONObject marker = (JSONObject)obj;\n\t\t\t\t\t\tmarkerId = Integer.parseInt((String)marker.get(\"id\"));\n\t\t\t\t\t\t//!TODO!Enums\n\t\t\t\t\t\tif (markerId == 4) {\n\t\t\t\t\t\t\t// Only remove player positions\n\t\t\t\t\t\t\toldDate = dateFormat.parse ((String)marker.get(\"timestamp\"));\n\t\t\t\t\t\t\tif (oldDate.before(date)) {\n\t\t\t\t\t\t\t\tremoveMarker((String)marker.get(\"msg\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (java.text.ParseException e) {\n\t\t\t\t\t\tlog.log(Level.WARNING, LOG_PREFIX + \"Unable to parse existing timestamp.  If you changed the format and reloaded the plugin, that is probably the cause.\", e);\n\t\t\t\t\t} catch(Exception e) {\n\t\t\t\t\t\t//ee.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Write file and close\n\t\tBufferedWriter fout = new BufferedWriter(new FileWriter(markersFile));\n\t\tfout.write(markersArray.toString());\n\t\tfout.close();\n\t\t\n\t} catch (Exception e) {\n\t\tlog.log(Level.SEVERE, LOG_PREFIX + \"Exception while updating label\", e);\n\t\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}", "path": "mapmarkers\\src\\MapMarkers.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "// Remove marker from memory\n", "func_signal": "public void removeMarker(String label)", "code": "{\n\tint index = getMarkerIndex(label);\n\tmarkersArray.remove(index);\n\tmarkerList.remove(index);\n}", "path": "mapmarkers\\src\\MapMarkers.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "// Load markers from file into memory\n", "func_signal": "public void loadMarkers()", "code": "{\n\tJSONArray tempmarkersArray = new JSONArray();\n\ttry {\n\t\tFile inFile = new File(markersFile);\n\t\tBufferedReader fin = new BufferedReader(new FileReader(inFile));\n\t\t\n\t\tJSONParser parser = new JSONParser();\n\t\t\n\t\ttry {\n\t\t\tObject obj= parser.parse(fin);\n\t\t\t\n\t\t\ttempmarkersArray =(JSONArray)obj;\n\t\t\t\n\t\t\tfor(int i = 0; i < tempmarkersArray.size(); i++)\n\t\t\t{\n\t\t\t\ttry {\n\t\t\t\t\tJSONObject marker = (JSONObject)tempmarkersArray.get(i);\n\t\t\t\t\tsetMarker((String)marker.get(\"msg\"), (Double)marker.get(\"x\"), (Double)marker.get(\"y\"), (Double)marker.get(\"z\"), (Integer)marker.get(\"id\"), dateFormat.parse((String)marker.get(\"timestamp\")));\n\t\t\t\t}\n\t\t\t\tcatch(Exception e) {\n\t\t\t\t\t//ee.printStackTrace();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\t\n\n\t\t}\n\t\tcatch(ParseException pe){\n\t\t\tlog.log(Level.SEVERE, LOG_PREFIX + \"Parse exception while parsing line\", pe);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlog.log(Level.SEVERE, LOG_PREFIX + \"Exception while parsing line\", e);\n\t\t}\n\t\t\n\t\tfin.close();\n\t\t\n\t} catch (Exception e) {\n\t\tlog.log(Level.SEVERE, LOG_PREFIX + \"Exception while reading markers\", e);\n\t}\n\t\n}", "path": "mapmarkers\\src\\MapMarkers.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "/**\n * Sends a message to all players!\n * @param String - Message to send to all players.\n */\n", "func_signal": "public void broadcast(String message)", "code": "{\n\tfor (Player p : etc.getServer().getPlayerList()) {\n\t\tp.sendMessage(message);\n\t}\n}", "path": "sessionprotect\\src\\SuperPlugin.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "//Cleans up settings when player leaves\n", "func_signal": "public void onDisconnect(Player player)", "code": "{\n\tSwissSettings settings = (SwissSettings)playerSettings.get(player.getName());\n\tif (settings == null)\n\t\treturn;\n\tplayerSettings.remove(player.getName());\n}", "path": "swissarmytorch\\src\\SwissArmyTorch.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "/*\npublic String onLoginChecks(String user) {\n\treturn null;\n}\n*/\n", "func_signal": "public void onLogin(Player player)", "code": "{\n\t// Player Message\n\tplayer.sendMessage(Colors.Yellow + \"Currently running plugin: \" + p.name + \" v\" + p.version + \"!\");\n\t\n\t// Global Message\n\tp.broadcast(Colors.Green + player.getName() + \" has joined the server! Wooo~\");\n}", "path": "template\\src\\Template.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "//Stop from placing redstone torches when enabled\n", "func_signal": "public boolean onBlockCreate(Player player, Block blockPlaced, Block blockClicked, int itemInHand)", "code": "{\n\tif (player.canUseCommand(\"/swiss\"))\n\t{\n\t\tSwissSettings settings = getSettings(player);\n\t    if ((settings.mode != Mode.OFF) && itemInHand == 76)\n\t\t\treturn(true);\n\t}\n\treturn(false);\n}", "path": "swissarmytorch\\src\\SwissArmyTorch.java", "repo_name": "mrsheen/minecraft-hey0-plugins", "stars": 18, "license": "None", "language": "java", "size": 2470}
{"docstring": "// For Mapper interface\n", "func_signal": "public void map(LongWritable key, GIS value, OutputCollector<LongWritable, GIS> output, Reporter reporter) throws IOException", "code": "{\n\t// Keep records that intersect with the box\n\tif(value.geometry.intersects(box)) {\n\t\toutput.collect(key, value);\n\t}\n}", "path": "src\\examples\\filter.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Tool interface\n", "func_signal": "public int run(String[] args) throws Exception", "code": "{\n\tJobConf job = new JobConf(new Configuration(), this.getClass());\n\n\tGISInputFormat.setInputPaths(job, new Path(\"/user/alaster/gis/jobs.gis\"));\n\tGISOutputFormat.setOutputPath(job, new Path(\"output\"));\n\n\tjob.setJobName(\"hadoopGIS.examples.chained\");\n\n\tjob.setMapperClass(this.getClass());\n\t//job.setCombinerClass(this.getClass());\n\tjob.setReducerClass(this.getClass());\n     \n\tjob.setInputFormat(GISInputFormat.class);\n\t//job.setOutputFormat(TextOutputFormat.class);\n\tjob.setOutputValueClass(LongWritable.class);\n\n\tPath p = new Path (\"/user/alaster/gis/jobs.names\");\n\tDistributedCache.addCacheFile (p.toUri (), job);\n\tjob.set (\"columnNames\", p.getName ());\n\n\tp = new Path (\"/user/alaster/gis/parcels.names\");\n\tDistributedCache.addCacheFile (p.toUri (), job);\n\tjob.set (\"parcelColumnNames\", p.getName ());\n\n\tp = new Path (\"/user/alaster/gis/parcels.gis\");\n\tDistributedCache.addCacheFile (p.toUri (), job);\n\tjob.set (\"parcelData\", p.getName ());\n\n\treturn JobClient.runJob(job).getJobState();\n \t}", "path": "src\\examples\\chained.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Mapper (via JobConfigurable) interface\n", "func_signal": "public void configure(JobConf job)", "code": "{\n\tString columnFilename = job.get (\"parcelColumnNames\");\n\tString dataFilename = job.get (\"parcelData\");\n\tPath[] distCacheFiles = new Path[0];\n\ttry { distCacheFiles = DistributedCache.getLocalCacheFiles(job); }\n\tcatch (IOException e)   { return; }\n\n\tArrayList<String> parcelColumnList = new ArrayList<String>();\n\tparcels = new ArrayList<GIS>();\n\n\tBufferedReader reader = null;\n\tString line;\n\tfor (int i=0; i<distCacheFiles.length; i++)\n\t{\n\t\tif (distCacheFiles [i].getName ().equals (columnFilename))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\treader = new BufferedReader(new FileReader(distCacheFiles [i].toString ()));\n\t\t\t\twhile ((line = reader.readLine()) != null)\n\t\t\t\t\tparcelColumnList.add (line);\n\t\t\t}\n\t\t\tcatch (Exception e) { }\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tGIS myGIS;\n\tfor (int i=0; i<distCacheFiles.length; i++)\n\t{\n\t\tif (distCacheFiles [i].getName ().equals (dataFilename))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\treader = new BufferedReader(new FileReader(distCacheFiles [i].toString ()));\n\t\t\t\twhile ((line = reader.readLine()) != null)\n\t\t\t\t{\n\t\t\t\t\tmyGIS = new GIS();\n\t\t\t\t\tmyGIS.update (new Text (line), parcelColumnList);\n\t\t\t\t\tif (!myGIS.attributes.get (\"devtype\").equals(\"R\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tparcels.add (myGIS);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) { }\n\n\t\t\tbreak;\n\t\t}\n\t}\n}", "path": "src\\examples\\chained.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Tool interface\n", "func_signal": "public int run(String[] args) throws Exception", "code": "{\n\tJobConf job = new JobConf(new Configuration(), this.getClass());\n\n\tGISInputFormat.setInputPaths(job, new Path(\"/user/alaster/gis/parcels.gis\"));\n\tPath p = new Path (\"/user/alaster/gis/parcels.names\");\n\tDistributedCache.addCacheFile (p.toUri (), job);\n\tjob.set (\"columnNames\", p.getName ());\n\n\tGISOutputFormat.setOutputPath(job, new Path(\"output\"));\n\n\tjob.setJobName(\"hadoopGIS.examples.filter\");\n\n\tjob.setMapperClass(this.getClass());\n\t//job.setCombinerClass(this.getClass());\n\tjob.setReducerClass(this.getClass());\n     \n\tjob.setInputFormat(GISInputFormat.class);\n\t//job.setOutputFormat(TextOutputFormat.class);\n\tjob.setOutputValueClass(GIS.class);\n\tjob.setOutputFormat(GISOutputFormat.class);\n\n\treturn JobClient.runJob(job).getJobState();\n \t}", "path": "src\\examples\\filter.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Reducer interface\n", "func_signal": "public void reduce(LongWritable key, Iterator<GIS> values, OutputCollector<LongWritable, GIS> output, Reporter reporter)", "code": "{\n\twhile(values.hasNext()) {\n\t\ttry {\n\t\t\toutput.collect(key, values.next());\n\t\t} catch (IOException e) {}\n\t}\n}", "path": "src\\examples\\delete.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Tool interface\n", "func_signal": "public int run(String[] args) throws Exception", "code": "{\n\tJobConf job = new JobConf(new Configuration(), this.getClass());\n\n\tGISInputFormat.setInputPaths(job, new Path(\"/user/alaster/gis/parcels.gis\"));\n\tPath p = new Path (\"/user/alaster/gis/parcels.names\");\n\tDistributedCache.addCacheFile (p.toUri (), job);\n\tjob.set (\"columnNames\", p.getName ());\n\n\tGISOutputFormat.setOutputPath(job, new Path(\"output\"));\n\n\tjob.setJobName(\"hadoopGIS.examples.delete\");\n\n\tjob.setMapperClass(this.getClass());\n\t//job.setCombinerClass(this.getClass());\n\tjob.setReducerClass(this.getClass());\n     \n\tjob.setInputFormat(GISInputFormat.class);\n\t//job.setOutputFormat(TextOutputFormat.class);\n\tjob.setOutputValueClass(GIS.class);\n\tjob.setOutputFormat(GISOutputFormat.class);\n\n\treturn JobClient.runJob(job).getJobState();\n \t}", "path": "src\\examples\\delete.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Mapper interface\n", "func_signal": "public void map(LongWritable key, GIS value, OutputCollector<LongWritable, GIS> output, Reporter reporter) throws IOException", "code": "{\n\t// Change record 1008130 to a Commercial parcel\n\tif(key.equals(new LongWritable(1008130))) {\n\t\tvalue.attributes.put(\"devtype\", \"C\");\n\t}\n\toutput.collect(key, value);\n}", "path": "src\\examples\\update.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Mapper (via JobConfigurable) interface\n", "func_signal": "public void configure(JobConf job)", "code": "{\n\tString columnFilename = job.get (\"parcelColumnNames\");\n\tString dataFilename = job.get (\"parcelData\");\n\tPath[] distCacheFiles = new Path[0];\n\ttry { distCacheFiles = DistributedCache.getLocalCacheFiles(job); }\n\tcatch (IOException e)   { return; }\n\n\tparcelColumnList = new ArrayList<String>();\n\tG = new HashMap<Integer, Geometry>(); \n\tC = new HashMap<Integer, Geometry>(); \n\tI = new HashMap<Integer, Geometry>();\n\n\tBufferedReader reader = null;\n\tString line;\n\tfor (int i=0; i<distCacheFiles.length; i++)\n\t{\n\t\tif (distCacheFiles [i].getName ().equals (columnFilename))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\treader = new BufferedReader(new FileReader(distCacheFiles [i].toString ()));\n\t\t\t\twhile ((line = reader.readLine()) != null)\n\t\t\t\t\tparcelColumnList.add (line);\n\t\t\t}\n\t\t\tcatch (Exception e) { }\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tGIS myGIS = new GIS ();\n\tfor (int i=0; i<distCacheFiles.length; i++)\n\t{\n\t\tif (distCacheFiles [i].getName ().equals (dataFilename))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\treader = new BufferedReader(new FileReader(distCacheFiles [i].toString ()));\n\t\t\t\twhile ((line = reader.readLine()) != null)\n\t\t\t\t{\n\t\t\t\t\tmyGIS.update (new Text (line), parcelColumnList);\n\t\t\t\t\tif (myGIS.attributes.get (\"devtype\").equals(\"C\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tGeometry geom = (Geometry) myGIS.geometry.clone ();\n\t\t\t\t\t\tC.put (new Integer (myGIS.attributes.get (\"id\")), geom);\n\t\t\t\t\t}\n\t\t\t\t\telse if (myGIS.attributes.get (\"devtype\").equals(\"I\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tGeometry geom = (Geometry) myGIS.geometry.clone ();\n\t\t\t\t\t\tI.put (new Integer (myGIS.attributes.get (\"id\")), geom);\n\t\t\t\t\t}\n\t\t\t\t\telse if (myGIS.attributes.get (\"devtype\").equals(\"G\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tGeometry geom = (Geometry) myGIS.geometry.clone ();\n\t\t\t\t\t\tG.put (new Integer (myGIS.attributes.get (\"id\")), geom);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) { }\n\n\t\t\tbreak;\n\t\t}\n\t}\n}", "path": "src\\examples\\TestGIS.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Tool interface\n", "func_signal": "public int run(String[] args) throws Exception", "code": "{\n\tJobConf job = new JobConf(new Configuration(), this.getClass());\n\n\tGISInputFormat.setInputPaths(job, new Path(\"/user/alaster/gis/parcels.gis\"));\n\tPath p = new Path (\"/user/alaster/gis/parcels.names\");\n\tDistributedCache.addCacheFile (p.toUri (), job);\n\tjob.set (\"columnNames\", p.getName ());\n\n\tGISOutputFormat.setOutputPath(job, new Path(\"output\"));\n\n\tjob.setJobName(\"hadoopGIS.examples.read\");\n\n\tjob.setMapperClass(this.getClass());\n\t//job.setCombinerClass(this.getClass());\n\tjob.setReducerClass(this.getClass());\n     \n\tjob.setInputFormat(GISInputFormat.class);\n\t//job.setOutputFormat(TextOutputFormat.class);\n\tjob.setOutputValueClass(GIS.class);\n\tjob.setOutputFormat(GISOutputFormat.class);\n\n\treturn JobClient.runJob(job).getJobState();\n\n \t}", "path": "src\\examples\\read.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Mapper interface\n", "func_signal": "public void map(LongWritable key, GIS value, OutputCollector<LongWritable, GIS> output, Reporter reporter) throws IOException", "code": "{\n\t// emit only the record with the correct key\n\tif(key.equals(new LongWritable(1008130))) {\n\t\toutput.collect(key, value);\n\t}\n}", "path": "src\\examples\\read.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Reducer interface\n", "func_signal": "public void reduce(LongWritable key, Iterator<GIS> values, OutputCollector<LongWritable, GIS> output, Reporter reporter)", "code": "{\n\twhile(values.hasNext()) {\n\t\ttry {\n\t\t\toutput.collect(key, values.next());\n\t\t} catch (IOException e) {}\n\t}\n}", "path": "src\\examples\\read.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Mapper interface\n", "func_signal": "public void map(LongWritable key, GIS value, OutputCollector<LongWritable, LongWritable> output, Reporter reporter) throws IOException", "code": "{\n\tdouble minDistance = Double.MAX_VALUE, currDistance;\n\tint closestParcel = -1;\n\n/*\n\tGIS myGIS;\n\tString line;\n\tArrayList<String> parcelColumnList = new ArrayList<String> ();\n\tBufferedReader reader = new BufferedReader(new FileReader(parcelDataFile));\n\twhile ((line = reader.readLine()) != null)\n\t{\n\t\tmyGIS.update (new Text (line), parcelColumnList);\n\n\t\tcurrDistance = myGIS.geometry.distance (value.geometry);\n\t\tif (currDistance < minDistance)\n\t\t{\n\t\t\tminDistance = currDistance;\n\t\t\tclosestParcel = myGIS.attributes.get(\"id\");\n\t\t}\n\t}\n*/\n\n\tHashMap<Integer,Geometry> parcels = null;\n\tif (value.attributes.get (\"devtype\").equals (\"C\"))\n\t\tparcels = C;\n\telse if (value.attributes.get (\"devtype\").equals (\"G\"))\n\t\tparcels = G;\n\telse if (value.attributes.get (\"devtype\").equals (\"I\"))\n\t\tparcels = I;\n\n\tIterator it = parcels.entrySet().iterator();\n\twhile (it.hasNext())\n\t{\n\t\tMap.Entry entry = (Map.Entry) it.next();\n\n\t\tcurrDistance = value.geometry.distance ((Geometry) entry.getValue ());\n\t\tif (currDistance < minDistance)\n\t\t{\n\t\t\tminDistance = currDistance;\n\t\t\tclosestParcel = ((Integer) entry.getKey ()).intValue ();\n\t\t}\n\t}\n\n\tLongWritable lngClosestParcel = new LongWritable (closestParcel);\n\toutput.collect(key, lngClosestParcel);\n}", "path": "src\\examples\\TestGIS.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Reducer interface\n", "func_signal": "public void reduce(LongWritable key, Iterator<GIS> values, OutputCollector<LongWritable, GIS> output, Reporter reporter)", "code": "{\n\twhile(values.hasNext()) {\n\t\ttry {\n\t\t\toutput.collect(key, values.next());\n\t\t} catch (IOException e) {}\n\t}\n}", "path": "src\\examples\\update.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Reducer interface\n", "func_signal": "public void reduce(LongWritable key, Iterator<LongWritable> values, OutputCollector<LongWritable, LongWritable> output, Reporter reporter)", "code": "{\n\twhile(values.hasNext()) {\n\t\ttry {\n\t\t\toutput.collect(key, values.next());\n\t\t} catch (IOException e) {}\n\t}\n}", "path": "src\\examples\\TestGIS.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Tool interface\n", "func_signal": "public int run(String[] args) throws Exception", "code": "{\n\tJobConf job = new JobConf(new Configuration(), this.getClass());\n\n\tGISInputFormat.setInputPaths(job, new Path(\"/user/alaster/gis/jobs.gis\"));\n\tGISOutputFormat.setOutputPath(job, new Path(\"output\"));\n\n\tjob.setJobName(\"test GIS - Large Jobs/Parcels\");\n\n\tjob.setMapperClass(this.getClass());\n\t//job.setCombinerClass(this.getClass());\n\tjob.setReducerClass(this.getClass());\n     \n\tjob.setInputFormat(GISInputFormat.class);\n\t//job.setOutputFormat(TextOutputFormat.class);\n\tjob.setOutputValueClass(LongWritable.class);\n\n\tPath p = new Path (\"/user/alaster/gis/jobs.names\");\n\tDistributedCache.addCacheFile (p.toUri (), job);\n\tjob.set (\"columnNames\", p.getName ());\n\n\tp = new Path (\"/user/alaster/gis/parcels.names\");\n\tDistributedCache.addCacheFile (p.toUri (), job);\n\tjob.set (\"parcelColumnNames\", p.getName ());\n\n\tp = new Path (\"/user/alaster/gis/parcels.gis\");\n\tDistributedCache.addCacheFile (p.toUri (), job);\n\tjob.set (\"parcelData\", p.getName ());\n\n\treturn JobClient.runJob(job).getJobState();\n \t}", "path": "src\\examples\\TestGIS.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Tool interface\n", "func_signal": "public int run(String[] args) throws Exception", "code": "{\n\tJobConf job = new JobConf(new Configuration(), this.getClass());\n\n\tGISInputFormat.setInputPaths(job, new Path(\"/user/alaster/gis/parcels.gis\"));\n\tPath p = new Path (\"/user/alaster/gis/parcels.names\");\n\tDistributedCache.addCacheFile (p.toUri (), job);\n\tjob.set (\"columnNames\", p.getName ());\n\n\tGISOutputFormat.setOutputPath(job, new Path(\"output\"));\n\n\tjob.setJobName(\"hadoopGIS.examples.update\");\n\n\tjob.setMapperClass(this.getClass());\n\t//job.setCombinerClass(this.getClass());\n\tjob.setReducerClass(this.getClass());\n     \n\tjob.setInputFormat(GISInputFormat.class);\n\t//job.setOutputFormat(TextOutputFormat.class);\n\tjob.setOutputValueClass(GIS.class);\n\tjob.setOutputFormat(GISOutputFormat.class);\n\n\treturn JobClient.runJob(job).getJobState();\n \t}", "path": "src\\examples\\update.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Mapper (via JobConfigurable) interface\n", "func_signal": "public void configure(JobConf job)", "code": "{\n\tArrayList<String> columns = new ArrayList<String>();\n\n\t// Create the column list that is used\n\tcolumns.add(\"id\");\n\tcolumns.add(\"the_geom\");\n\tcolumns.add(\"devtype\");\n\n\t// Create the box\n\ttry {\n\t\tbox = new WKTReader().read(\"POLYGON((-112.0859375 33.4349975585938,-112.0859375 33.4675445556641,-112.059799194336 33.4675445556641,-112.059799194336 33.4349975585938,-112.0859375 33.4349975585938))\");\n\t} catch(com.vividsolutions.jts.io.ParseException e) {}\n}", "path": "src\\examples\\filter.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Reducer interface\n", "func_signal": "public void reduce(LongWritable key, Iterator<LongWritable> values, OutputCollector<LongWritable, LongWritable> output, Reporter reporter)", "code": "{\n\twhile(values.hasNext()) {\n\t\ttry {\n\t\t\toutput.collect(key, values.next());\n\t\t} catch (IOException e) {}\n\t}\n}", "path": "src\\examples\\chained.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Mapper interface\n", "func_signal": "public void map(LongWritable key, GIS value, OutputCollector<LongWritable, GIS> output, Reporter reporter) throws IOException", "code": "{\n\t// emit only the record with the correct key\n\tif(!key.equals(new LongWritable(1008130))) {\n\t\toutput.collect(key, value);\n\t}\n}", "path": "src\\examples\\delete.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "// For Mapper interface\n", "func_signal": "public void map(LongWritable key, GIS value, OutputCollector<LongWritable, LongWritable> output, Reporter reporter) throws IOException", "code": "{\n\tdouble minDistance = Double.MAX_VALUE, currDistance;\n\tint closestParcel = -1;\n\n\tIterator it = parcels.iterator();\n\twhile (it.hasNext())\n\t{\n\t\tGIS parcel = (GIS) it.next();\n\n\t\tcurrDistance = value.geometry.distance(parcel.geometry);\n\t\tif (currDistance < minDistance)\n\t\t{\n\t\t\tminDistance = currDistance;\n\t\t\tclosestParcel = new Integer(parcel.attributes.get(\"id\"));\n\t\t}\n\t}\n\n\tLongWritable lngClosestParcel = new LongWritable (closestParcel);\n\toutput.collect(key, lngClosestParcel);\n}", "path": "src\\examples\\chained.java", "repo_name": "nathankerr/hadoopGIS", "stars": 28, "license": "mit", "language": "java", "size": 145}
{"docstring": "/**\n * Subclasses must call <code>super.resume()</code>.\n */\n", "func_signal": "@Override\npublic void resume()", "code": "{\n  if (assetManager!=null) {\n    assetManager.finishLoading();\n  }\n  prefs = createPreferences();\n}", "path": "src\\de\\onyxbits\\bureauengine\\BureauGame.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Bring the symbol to a halt ASAP. Note: For safety reasons, this\n * method does nothing if the this <code>Symbol</code> is currently\n * in a stop position (braking in a stop position would jam the reels).\n * @return true if the symbol was decelerated successfully and will stop\n * ASAP.\n */\n", "func_signal": "public boolean handbrake()", "code": "{\n  if (getY() % symbolHeight == 0) return false;\n  doBreak=true;\n  return true;\n}", "path": "src\\de\\onyxbits\\pocketbandit\\Symbol.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Restart the trialcounter by removing all the keys from the storage.\n */\n", "func_signal": "public void reset()", "code": "{\n  prefs.remove(keyLaunchCount);\n  prefs.remove(keyFirstLaunch);\n  prefs.remove(keyState);\n  prefs.flush();\n}", "path": "src\\de\\onyxbits\\bureauengine\\util\\TrialPeriod.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Get the bonus payout. This method calculates the bonus payout on the assumption that\n * the lucky coin has been played.\n * @param bet how many coins were bet (0-3)\n * @return number of bonus coins to award (always 0 if no coins were bet).\n */\n", "func_signal": "public int getBonus(int bet)", "code": "{\n  int ret =0;\n  if (bet>0 && bet <4 && SlotMachine.rng.nextFloat()<=luckyCoinChance[bet-1]) {\n    ret=luckyCoinBonus;\n  }\n  return ret;\n}", "path": "src\\de\\onyxbits\\pocketbandit\\Variation.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Randomly select a new symbol.\n * @param reel which <code>weightTable</code> (0-2) to take probilities from.\n * @return the rolled image as an index into <code>symbolNames</code>\n */\n", "func_signal": "public int pick(int reel)", "code": "{\n  int ret = 0;\n  if (symbolSequence!=null && symbolSequenceIndex<symbolSequence.length) {\n    ret = symbolSequence[symbolSequenceIndex];\n    symbolSequenceIndex++;\n  }\n  else {\n    int idx = SlotMachine.rng.nextInt(weightTable[reel].length);\n    ret=weightTable[reel][idx];\n  }\n  return ret;\n}", "path": "src\\de\\onyxbits\\pocketbandit\\Variation.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Subclasses must call </code>super.dispose()</code>\n */\n", "func_signal": "@Override\npublic void dispose()", "code": "{\n  if (prefs!=null) prefs.flush();\n  super.dispose();\n  if (spriteBatch!=null) spriteBatch.dispose();\n  if (assetManager!=null) assetManager.dispose();\n}", "path": "src\\de\\onyxbits\\bureauengine\\BureauGame.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Configure the minimum amount of launches that have to occur before <code>isOver()</code>\n * returns true\n * @param minLauncher number of times the game has to be started in addition to minimum time.\n * @return the object for method chaining.\n */\n", "func_signal": "public TrialPeriod withMinLaunches(long minLaunches)", "code": "{\n  this.minLaunches=minLaunches;\n  return this;\n}", "path": "src\\de\\onyxbits\\bureauengine\\util\\TrialPeriod.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Set this <code>Actor</code> in motion\n * @param stops after how many stops to come to rest. Must be at leat 1.\n */\n", "func_signal": "protected void spin(int stops, int velocity)", "code": "{\n  totalStops=stops;\n  remainingStops=stops;\n  doBreak=false;\n  if (stops>0) {\n    gambleScreen.inMotion(this,true);\n  }\n  this.velocity=velocity;\n}", "path": "src\\de\\onyxbits\\pocketbandit\\Symbol.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Should be called once everytime the application is started\n * @return the object for method chaining.\n */\n", "func_signal": "public TrialPeriod trialed()", "code": "{\n  long tmp = prefs.getLong(keyFirstLaunch,0);\n  if (tmp==0) {\n    prefs.putLong(keyFirstLaunch,System.currentTimeMillis());\n  }\n  tmp = prefs.getLong(keyLaunchCount,0);\n  prefs.putLong(keyLaunchCount,tmp+1);\n  prefs.flush();\n  return this;\n}", "path": "src\\de\\onyxbits\\bureauengine\\util\\TrialPeriod.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Configure the minimum amount of time that has to pass since the first launch before\n * <code>isOver()</code> will return true;\n * @param minTime time in milliseconds\n * @return the object for method chaining.\n */\n", "func_signal": "public TrialPeriod withMinTime(long minTime)", "code": "{\n  this.minTime=minTime;\n  return this;\n}", "path": "src\\de\\onyxbits\\bureauengine\\util\\TrialPeriod.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Subclasses must call <code>super.pause()</code>.\n */\n", "func_signal": "@Override\npublic void pause()", "code": "{\n  if (prefs!=null) prefs.flush();\n  super.pause();\n}", "path": "src\\de\\onyxbits\\bureauengine\\BureauGame.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Set the state of the trial. Note: The state is not evaluated internally.\n * It is recommended to use the predefined states, but not nescessary.\n * @param int encoded state.\n */\n", "func_signal": "public void setState(int state)", "code": "{\n  prefs.putInteger(keyState,state);\n  prefs.flush();\n}", "path": "src\\de\\onyxbits\\bureauengine\\util\\TrialPeriod.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Query symbol faces to show on the reels initially.\n * @return 3x3 symbol faces (index into <code>symbolNames</code>) packed into a single\n * array. A new reel begins every three symbols, within the reel, symbols are ordered from\n * bottom to top.\n */\n", "func_signal": "public int[] getInitialFaces()", "code": "{\n  // Note: to make things easy, we just show winning combinations, so there\n  // need to be at least three rules at the start of the paytable that don't\n  // contain jokers.\n  // Also note: This assumes that the best paying combo is the first in the\n  // paytable (and should be shown on the payline).\n  int[] ret = {\n    paytable[1][0],\n    paytable[0][0],\n    paytable[2][0],\n    \n    paytable[1][1],\n    paytable[0][1],\n    paytable[2][1],\n    \n    paytable[1][2],\n    paytable[0][2],\n    paytable[2][2],\n  };\n  return ret;\n}", "path": "src\\de\\onyxbits\\pocketbandit\\Variation.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Check if the trialperiod is over\n * @return true if the time is over and the minimum number of launches have occured\n */\n", "func_signal": "public boolean isOver()", "code": "{\n  long fl = prefs.getLong(keyFirstLaunch,-1);\n  long lc = prefs.getLong(keyLaunchCount,-1);\n  if (lc >= minLaunches && fl+minTime <= System.currentTimeMillis()) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}", "path": "src\\de\\onyxbits\\bureauengine\\util\\TrialPeriod.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Only use this constructor!\n * @param variation game rules\n * @param symbols <code>Drawable</code> version of <code>Variation.SYMBOLNAMES</code>. Symbol heights\n * must be a multiple of 2.\n * @param inital index into <code>symbols</code>: The initial face to show.\n * @param reel the reel on which this <code>Symbol</code> sits.\n * @param gambleScreen callback to notify about reels starting/stopping.\n */\n", "func_signal": "public Symbol(Variation variation, Drawable[] symbols, int initial, int reel, GambleScreen gambleScreen)", "code": "{\n  super(symbols[initial]);\n  this.player=player;\n  this.reel=reel;\n  this.variation=variation;\n  this.symbols=symbols;\n  this.gambleScreen=gambleScreen;\n  face=initial;\n  symbolHeight=(int)symbols[initial].getMinHeight();\n}", "path": "src\\de\\onyxbits\\pocketbandit\\Symbol.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Calculate the payout for a given payline\n * @param bet how many coins (0-3) were bet\n * @param payline the three symbols on the payline (index into <code>symbolNames</code>\n * @return -1 if the payline does not match the paytable (\"player lost\"). 0 if there\n * is a match, but there was no wager. Any value greater zero is how much to add to the\n * player'S casho on hand.\n */\n", "func_signal": "public int getPayout(int bet, int[] payline)", "code": "{\n  int tmp=match(payline);\n  if (tmp==-1) {\n    return -1;\n  }\n  else {\n    return paytable[tmp][3]*bet;\n  }\n}", "path": "src\\de\\onyxbits\\pocketbandit\\Variation.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Register this handler on a button as an eventlistener and assign an uri to open\n * when the <code>Actor</code> is clicked.\n * @param actor the <code>Actor</code> in question.\n * @param uri the url to open when the <code>actor</code> is clicked or null to deregister\n * @return the actor object that was passed in.\n */\n", "func_signal": "public Actor register(Actor actor, String uri)", "code": "{\n  if (uri==null) {\n    actor.removeListener(this);\n  }\n  else {\n    actor.addListener(this);\n  }\n  linkMap.put(actor,uri);\n  return actor;\n}", "path": "src\\de\\onyxbits\\bureauengine\\screen\\LinkHandler.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Match a payline against the <code>paytable</code>.\n * @param payline the three symbols on the payline (index into <code>symbolNames</code>\n * @return index into paytable or -1 if no rule matched. If several rules match, the first\n * one matching is returned (lower index=higher priority).\n */\n", "func_signal": "private int match(int[] payline)", "code": "{\n  for (int x=0;x<paytable.length;x++) {\n    if (payline[0]==paytable[x][0] || paytable[x][0]==-1) {\n      if (payline[1]==paytable[x][1] || paytable[x][1]==-1) {\n        if (payline[2]==paytable[x][2] || paytable[x][2]==-1) {\n          return x;\n        }\n      }\n    }\n  }\n  return -1;\n}", "path": "src\\de\\onyxbits\\pocketbandit\\Variation.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * The game is booted in this order:<p>\n * <code>createPreferences()</code>\n * <code>bootGame()</code>\n * <code>create*Manager()</code>\n * <code>createFirstScreen()</code>\n * <p>\n * Afterwards the first screen is directly shown.\n */\n", "func_signal": "@Override\npublic void create()", "code": "{\n  prefs = createPreferences();\n  bootGame();\n  spriteBatch = createSpriteBatch();\n  assetManager = createAssetManager();\n  muteManager = createMuteManager();\n  \n  BureauScreen tmp = createStartUpScreen();\n  tmp.prepareAssets(true);\n  tmp.readyScreen();\n  setScreen(tmp);\n  Texture.setAssetManager(assetManager);\n}", "path": "src\\de\\onyxbits\\bureauengine\\BureauGame.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "/**\n * Configure the persistant storage.\n * @param prefs persistent storage\n * @param directFlush whether or not to call <code>Preferences.flush()</code>.\n * @param keyLaunchCount name of the key with which to count how often the game was started\n * @param keyFirstLaunch name of the key with which to record the date of the first launch\n * @param keyActive name of the key with which to store the state.\n */\n", "func_signal": "public TrialPeriod(Preferences prefs, String keyLaunchCount, String keyFirstLaunch, String keyState)", "code": "{\n  if (prefs==null || keyLaunchCount==null || keyFirstLaunch == null || keyState==null) {\n    throw new NullPointerException(); // Crash early\n  }\n  this.prefs=prefs;\n  this.keyLaunchCount=keyLaunchCount;\n  this.keyFirstLaunch=keyFirstLaunch;\n  this.keyState=keyState;\n}", "path": "src\\de\\onyxbits\\bureauengine\\util\\TrialPeriod.java", "repo_name": "onyxbits/pocketbandit", "stars": 22, "license": "apache-2.0", "language": "java", "size": 18975}
{"docstring": "// $ANTLR start \"OR\"\n", "func_signal": "public final void mOR() throws RecognitionException", "code": "{\n    try {\n        int _type = OR;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:50:4: ( '||' )\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:50:6: '||'\n        {\n        match(\"||\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S006SimpleBooleanLexer.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "// $ANTLR start \"ENDSYMBOL\"\n", "func_signal": "public final void mENDSYMBOL() throws RecognitionException", "code": "{\n    try {\n        int _type = ENDSYMBOL;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S003HelloWordWithErrorHandling.g:37:10: ( '!' )\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S003HelloWordWithErrorHandling.g:37:11: '!'\n        {\n        match('!'); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S003HelloWordWithErrorHandlingLexer.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "//override method\n", "func_signal": "public void reportError(RecognitionException e)", "code": "{\n  displayRecognitionError(this.getTokenNames(), e);\n  throw new S006Error(\":(\", e); \n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S006SimpleBooleanParser.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "// $ANTLR start \"LPAREN\"\n", "func_signal": "public final void mLPAREN() throws RecognitionException", "code": "{\n    try {\n        int _type = LPAREN;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:47:8: ( '(' )\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:47:10: '('\n        {\n        match('('); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S006SimpleBooleanLexer.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "// $ANTLR end \"ENDSYMBOL\"\n", "func_signal": "public void mTokens() throws RecognitionException", "code": "{\n    // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S003HelloWordWithErrorHandling.g:1:8: ( SALUTATION | ENDSYMBOL )\n    int alt1=2;\n    switch ( input.LA(1) ) {\n    case 'H':\n        {\n        alt1=1;\n        }\n        break;\n    case '!':\n        {\n        alt1=2;\n        }\n        break;\n    default:\n        NoViableAltException nvae =\n            new NoViableAltException(\"\", 1, 0, input);\n\n        throw nvae;\n    }\n\n    switch (alt1) {\n        case 1 :\n            // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S003HelloWordWithErrorHandling.g:1:10: SALUTATION\n            {\n            mSALUTATION(); \n\n            }\n            break;\n        case 2 :\n            // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S003HelloWordWithErrorHandling.g:1:21: ENDSYMBOL\n            {\n            mENDSYMBOL(); \n\n            }\n            break;\n\n    }\n\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S003HelloWordWithErrorHandlingLexer.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "// $ANTLR start \"expression\"\n// org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:61:1: expression : andexpression ;\n", "func_signal": "public final S006SimpleBooleanParser.expression_return expression() throws RecognitionException", "code": "{\n    S006SimpleBooleanParser.expression_return retval = new S006SimpleBooleanParser.expression_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    S006SimpleBooleanParser.andexpression_return andexpression1 = null;\n\n\n\n    try {\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:61:12: ( andexpression )\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:61:14: andexpression\n        {\n        root_0 = (Object)adaptor.nil();\n\n        pushFollow(FOLLOW_andexpression_in_expression172);\n        andexpression1=andexpression();\n\n        state._fsp--;\n\n        adaptor.addChild(root_0, andexpression1.getTree());\n\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S006SimpleBooleanParser.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Abstract syntax tree generated from \"Hello word!\" should have an unnamed \n * root node with two children. First child corresponds to salutation token \n * and second child corresponds to end symbol token.\n * \n * Token type constants are defined in generated S002HelloWordWithErrorHandlingParser class.\n */\n", "func_signal": "@Test\npublic void testCorrectExpression()", "code": "{\n\t//compile the expression\n\tS002HelloWordWithErrorHandlingCompiler compiler = new S002HelloWordWithErrorHandlingCompiler();\n\tCommonTree ast = compiler.compile(\"Hello word!\");\n\t\n\t//check AST structure\n\tassertEquals(S002HelloWordWithErrorHandlingParser.SALUTATION, ast.getChild(0).getType());\n\tassertEquals(S002HelloWordWithErrorHandlingParser.ENDSYMBOL, ast.getChild(1).getType());\n}", "path": "src\\test\\java\\org\\meri\\antlr_step_by_step\\parsers\\S002HelloWordWithErrorHandlingTest.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "// $ANTLR start \"andexpression\"\n// org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:63:1: andexpression : orexpression ( AND orexpression )* ;\n", "func_signal": "public final S006SimpleBooleanParser.andexpression_return andexpression() throws RecognitionException", "code": "{\n    S006SimpleBooleanParser.andexpression_return retval = new S006SimpleBooleanParser.andexpression_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    Token AND3=null;\n    S006SimpleBooleanParser.orexpression_return orexpression2 = null;\n\n    S006SimpleBooleanParser.orexpression_return orexpression4 = null;\n\n\n    Object AND3_tree=null;\n\n    try {\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:63:15: ( orexpression ( AND orexpression )* )\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:63:17: orexpression ( AND orexpression )*\n        {\n        root_0 = (Object)adaptor.nil();\n\n        pushFollow(FOLLOW_orexpression_in_andexpression180);\n        orexpression2=orexpression();\n\n        state._fsp--;\n\n        adaptor.addChild(root_0, orexpression2.getTree());\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:63:30: ( AND orexpression )*\n        loop1:\n        do {\n            int alt1=2;\n            switch ( input.LA(1) ) {\n            case AND:\n                {\n                alt1=1;\n                }\n                break;\n\n            }\n\n            switch (alt1) {\n        \tcase 1 :\n        \t    // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:63:31: AND orexpression\n        \t    {\n        \t    AND3=(Token)match(input,AND,FOLLOW_AND_in_andexpression183); \n        \t    AND3_tree = (Object)adaptor.create(AND3);\n        \t    root_0 = (Object)adaptor.becomeRoot(AND3_tree, root_0);\n\n        \t    pushFollow(FOLLOW_orexpression_in_andexpression186);\n        \t    orexpression4=orexpression();\n\n        \t    state._fsp--;\n\n        \t    adaptor.addChild(root_0, orexpression4.getTree());\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop1;\n            }\n        } while (true);\n\n\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S006SimpleBooleanParser.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "// $ANTLR start \"atom\"\n// org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:69:1: atom : ( NAME | LPAREN andexpression RPAREN );\n", "func_signal": "public final S006SimpleBooleanParser.atom_return atom() throws RecognitionException", "code": "{\n    S006SimpleBooleanParser.atom_return retval = new S006SimpleBooleanParser.atom_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    Token NAME11=null;\n    Token LPAREN12=null;\n    Token RPAREN14=null;\n    S006SimpleBooleanParser.andexpression_return andexpression13 = null;\n\n\n    Object NAME11_tree=null;\n    Object LPAREN12_tree=null;\n    Object RPAREN14_tree=null;\n\n    try {\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:69:6: ( NAME | LPAREN andexpression RPAREN )\n        int alt4=2;\n        switch ( input.LA(1) ) {\n        case NAME:\n            {\n            alt4=1;\n            }\n            break;\n        case LPAREN:\n            {\n            alt4=2;\n            }\n            break;\n        default:\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 4, 0, input);\n\n            throw nvae;\n        }\n\n        switch (alt4) {\n            case 1 :\n                // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:69:8: NAME\n                {\n                root_0 = (Object)adaptor.nil();\n\n                NAME11=(Token)match(input,NAME,FOLLOW_NAME_in_atom227); \n                NAME11_tree = (Object)adaptor.create(NAME11);\n                adaptor.addChild(root_0, NAME11_tree);\n\n\n                }\n                break;\n            case 2 :\n                // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:69:15: LPAREN andexpression RPAREN\n                {\n                root_0 = (Object)adaptor.nil();\n\n                LPAREN12=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_atom231); \n                pushFollow(FOLLOW_andexpression_in_atom234);\n                andexpression13=andexpression();\n\n                state._fsp--;\n\n                adaptor.addChild(root_0, andexpression13.getTree());\n                RPAREN14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_atom236); \n\n                }\n                break;\n\n        }\n        retval.stop = input.LT(-1);\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S006SimpleBooleanParser.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "// $ANTLR start \"SALUTATION\"\n", "func_signal": "public final void mSALUTATION() throws RecognitionException", "code": "{\n    try {\n        int _type = SALUTATION;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S003HelloWordWithErrorHandling.g:36:11: ( 'Hello word' )\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S003HelloWordWithErrorHandling.g:36:12: 'Hello word'\n        {\n        match(\"Hello word\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S003HelloWordWithErrorHandlingLexer.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "// $ANTLR end \"WS\"\n", "func_signal": "public void mTokens() throws RecognitionException", "code": "{\n    // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:1:8: ( LPAREN | RPAREN | AND | OR | NOT | NAME | WS )\n    int alt3=7;\n    switch ( input.LA(1) ) {\n    case '(':\n        {\n        alt3=1;\n        }\n        break;\n    case ')':\n        {\n        alt3=2;\n        }\n        break;\n    case '&':\n        {\n        alt3=3;\n        }\n        break;\n    case '|':\n        {\n        alt3=4;\n        }\n        break;\n    case '!':\n        {\n        alt3=5;\n        }\n        break;\n    case '0':\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n    case 'a':\n    case 'b':\n    case 'c':\n    case 'd':\n    case 'e':\n    case 'f':\n    case 'g':\n    case 'h':\n    case 'i':\n    case 'j':\n    case 'k':\n    case 'l':\n    case 'm':\n    case 'n':\n    case 'o':\n    case 'p':\n    case 'q':\n    case 'r':\n    case 's':\n    case 't':\n    case 'u':\n    case 'v':\n    case 'w':\n    case 'x':\n    case 'y':\n    case 'z':\n        {\n        alt3=6;\n        }\n        break;\n    case '\\t':\n    case '\\n':\n    case '\\r':\n    case ' ':\n        {\n        alt3=7;\n        }\n        break;\n    default:\n        NoViableAltException nvae =\n            new NoViableAltException(\"\", 3, 0, input);\n\n        throw nvae;\n    }\n\n    switch (alt3) {\n        case 1 :\n            // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:1:10: LPAREN\n            {\n            mLPAREN(); \n\n            }\n            break;\n        case 2 :\n            // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:1:17: RPAREN\n            {\n            mRPAREN(); \n\n            }\n            break;\n        case 3 :\n            // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:1:24: AND\n            {\n            mAND(); \n\n            }\n            break;\n        case 4 :\n            // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:1:28: OR\n            {\n            mOR(); \n\n            }\n            break;\n        case 5 :\n            // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:1:31: NOT\n            {\n            mNOT(); \n\n            }\n            break;\n        case 6 :\n            // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:1:35: NAME\n            {\n            mNAME(); \n\n            }\n            break;\n        case 7 :\n            // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:1:40: WS\n            {\n            mWS(); \n\n            }\n            break;\n\n    }\n\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S006SimpleBooleanLexer.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "// $ANTLR start \"NOT\"\n", "func_signal": "public final void mNOT() throws RecognitionException", "code": "{\n    try {\n        int _type = NOT;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:51:5: ( '!' )\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:51:7: '!'\n        {\n        match('!'); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S006SimpleBooleanLexer.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "//override method\n", "func_signal": "public void reportError(RecognitionException e)", "code": "{\n  displayRecognitionError(this.getTokenNames(), e);\n  throw new S006Error(\":(\", e); \n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S006SimpleBooleanLexer.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "// $ANTLR start \"orexpression\"\n// org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:65:1: orexpression : notexpression ( OR notexpression )* ;\n", "func_signal": "public final S006SimpleBooleanParser.orexpression_return orexpression() throws RecognitionException", "code": "{\n    S006SimpleBooleanParser.orexpression_return retval = new S006SimpleBooleanParser.orexpression_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    Token OR6=null;\n    S006SimpleBooleanParser.notexpression_return notexpression5 = null;\n\n    S006SimpleBooleanParser.notexpression_return notexpression7 = null;\n\n\n    Object OR6_tree=null;\n\n    try {\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:65:14: ( notexpression ( OR notexpression )* )\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:65:16: notexpression ( OR notexpression )*\n        {\n        root_0 = (Object)adaptor.nil();\n\n        pushFollow(FOLLOW_notexpression_in_orexpression196);\n        notexpression5=notexpression();\n\n        state._fsp--;\n\n        adaptor.addChild(root_0, notexpression5.getTree());\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:65:30: ( OR notexpression )*\n        loop2:\n        do {\n            int alt2=2;\n            switch ( input.LA(1) ) {\n            case OR:\n                {\n                alt2=1;\n                }\n                break;\n\n            }\n\n            switch (alt2) {\n        \tcase 1 :\n        \t    // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:65:31: OR notexpression\n        \t    {\n        \t    OR6=(Token)match(input,OR,FOLLOW_OR_in_orexpression199); \n        \t    OR6_tree = (Object)adaptor.create(OR6);\n        \t    root_0 = (Object)adaptor.becomeRoot(OR6_tree, root_0);\n\n        \t    pushFollow(FOLLOW_notexpression_in_orexpression202);\n        \t    notexpression7=notexpression();\n\n        \t    state._fsp--;\n\n        \t    adaptor.addChild(root_0, notexpression7.getTree());\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop2;\n            }\n        } while (true);\n\n\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S006SimpleBooleanParser.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "// $ANTLR start \"AND\"\n", "func_signal": "public final void mAND() throws RecognitionException", "code": "{\n    try {\n        int _type = AND;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:49:5: ( '&&' )\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:49:7: '&&'\n        {\n        match(\"&&\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S006SimpleBooleanLexer.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "// $ANTLR start \"NAME\"\n", "func_signal": "public final void mNAME() throws RecognitionException", "code": "{\n    try {\n        int _type = NAME;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:52:6: ( ( 'a' .. 'z' | '0' .. '9' )+ )\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:52:8: ( 'a' .. 'z' | '0' .. '9' )+\n        {\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:52:8: ( 'a' .. 'z' | '0' .. '9' )+\n        int cnt1=0;\n        loop1:\n        do {\n            int alt1=2;\n            switch ( input.LA(1) ) {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            case 'a':\n            case 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'g':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'k':\n            case 'l':\n            case 'm':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case 's':\n            case 't':\n            case 'u':\n            case 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n            case 'z':\n                {\n                alt1=1;\n                }\n                break;\n\n            }\n\n            switch (alt1) {\n        \tcase 1 :\n        \t    // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:\n        \t    {\n        \t    if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='a' && input.LA(1)<='z') ) {\n        \t        input.consume();\n\n        \t    }\n        \t    else {\n        \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n        \t        recover(mse);\n        \t        throw mse;}\n\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    if ( cnt1 >= 1 ) break loop1;\n                    EarlyExitException eee =\n                        new EarlyExitException(1, input);\n                    throw eee;\n            }\n            cnt1++;\n        } while (true);\n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S006SimpleBooleanLexer.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "// $ANTLR start \"notexpression\"\n// org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:67:1: notexpression : ( NOT atom | atom );\n", "func_signal": "public final S006SimpleBooleanParser.notexpression_return notexpression() throws RecognitionException", "code": "{\n    S006SimpleBooleanParser.notexpression_return retval = new S006SimpleBooleanParser.notexpression_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    Token NOT8=null;\n    S006SimpleBooleanParser.atom_return atom9 = null;\n\n    S006SimpleBooleanParser.atom_return atom10 = null;\n\n\n    Object NOT8_tree=null;\n\n    try {\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:67:15: ( NOT atom | atom )\n        int alt3=2;\n        switch ( input.LA(1) ) {\n        case NOT:\n            {\n            alt3=1;\n            }\n            break;\n        case LPAREN:\n        case NAME:\n            {\n            alt3=2;\n            }\n            break;\n        default:\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 3, 0, input);\n\n            throw nvae;\n        }\n\n        switch (alt3) {\n            case 1 :\n                // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:67:17: NOT atom\n                {\n                root_0 = (Object)adaptor.nil();\n\n                NOT8=(Token)match(input,NOT,FOLLOW_NOT_in_notexpression212); \n                NOT8_tree = (Object)adaptor.create(NOT8);\n                root_0 = (Object)adaptor.becomeRoot(NOT8_tree, root_0);\n\n                pushFollow(FOLLOW_atom_in_notexpression215);\n                atom9=atom();\n\n                state._fsp--;\n\n                adaptor.addChild(root_0, atom9.getTree());\n\n                }\n                break;\n            case 2 :\n                // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:67:29: atom\n                {\n                root_0 = (Object)adaptor.nil();\n\n                pushFollow(FOLLOW_atom_in_notexpression219);\n                atom10=atom();\n\n                state._fsp--;\n\n                adaptor.addChild(root_0, atom10.getTree());\n\n                }\n                break;\n\n        }\n        retval.stop = input.LT(-1);\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S006SimpleBooleanParser.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "// $ANTLR start \"WS\"\n", "func_signal": "public final void mWS() throws RecognitionException", "code": "{\n    try {\n        int _type = WS;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:53:4: ( ( ' ' | '\\\\t' | '\\\\r' | '\\\\n' )+ )\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:53:6: ( ' ' | '\\\\t' | '\\\\r' | '\\\\n' )+\n        {\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:53:6: ( ' ' | '\\\\t' | '\\\\r' | '\\\\n' )+\n        int cnt2=0;\n        loop2:\n        do {\n            int alt2=2;\n            switch ( input.LA(1) ) {\n            case '\\t':\n            case '\\n':\n            case '\\r':\n            case ' ':\n                {\n                alt2=1;\n                }\n                break;\n\n            }\n\n            switch (alt2) {\n        \tcase 1 :\n        \t    // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:\n        \t    {\n        \t    if ( (input.LA(1)>='\\t' && input.LA(1)<='\\n')||input.LA(1)=='\\r'||input.LA(1)==' ' ) {\n        \t        input.consume();\n\n        \t    }\n        \t    else {\n        \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n        \t        recover(mse);\n        \t        throw mse;}\n\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    if ( cnt2 >= 1 ) break loop2;\n                    EarlyExitException eee =\n                        new EarlyExitException(2, input);\n                    throw eee;\n            }\n            cnt2++;\n        } while (true);\n\n         _channel = HIDDEN; \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S006SimpleBooleanLexer.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "// $ANTLR start \"RPAREN\"\n", "func_signal": "public final void mRPAREN() throws RecognitionException", "code": "{\n    try {\n        int _type = RPAREN;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:48:8: ( ')' )\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S006SimpleBoolean.g:48:10: ')'\n        {\n        match(')'); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S006SimpleBooleanLexer.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "// $ANTLR start \"expression\"\n// org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S001HelloWord.g:30:1: expression : SALUTATION ENDSYMBOL ;\n", "func_signal": "public final S001HelloWordParser.expression_return expression() throws RecognitionException", "code": "{\n    S001HelloWordParser.expression_return retval = new S001HelloWordParser.expression_return();\n    retval.start = input.LT(1);\n\n    Object root_0 = null;\n\n    Token SALUTATION1=null;\n    Token ENDSYMBOL2=null;\n\n    Object SALUTATION1_tree=null;\n    Object ENDSYMBOL2_tree=null;\n\n    try {\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S001HelloWord.g:30:12: ( SALUTATION ENDSYMBOL )\n        // org\\\\meri\\\\antlr_step_by_step\\\\parsers\\\\S001HelloWord.g:30:14: SALUTATION ENDSYMBOL\n        {\n        root_0 = (Object)adaptor.nil();\n\n        SALUTATION1=(Token)match(input,SALUTATION,FOLLOW_SALUTATION_in_expression79); \n        SALUTATION1_tree = (Object)adaptor.create(SALUTATION1);\n        adaptor.addChild(root_0, SALUTATION1_tree);\n\n        ENDSYMBOL2=(Token)match(input,ENDSYMBOL,FOLLOW_ENDSYMBOL_in_expression81); \n        ENDSYMBOL2_tree = (Object)adaptor.create(ENDSYMBOL2);\n        adaptor.addChild(root_0, ENDSYMBOL2_tree);\n\n\n        }\n\n        retval.stop = input.LT(-1);\n\n        retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n\tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n    }\n    finally {\n    }\n    return retval;\n}", "path": "target\\generated-sources\\antlr3\\org\\meri\\antlr_step_by_step\\parsers\\S001HelloWordParser.java", "repo_name": "SomMeri/antlr-step-by-step", "stars": 25, "license": "None", "language": "java", "size": 164}
{"docstring": "/**\n * Create a Midi Device from a java MidiDeviceInfo structure. This should not be used unless you know what you are doing.\n * @param _info The javax.sound.midi.MidiDevice.Info structure\n */\n", "func_signal": "public MidiDevice(javax.sound.midi.MidiDevice.Info _info)", "code": "{\n\tinfo = _info;\n\tdevice = null;\n}", "path": "src\\rwmidi\\MidiDevice.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * Create an input object for the device.\n * @return the created input\n */\n", "func_signal": "public MidiInput createInput()", "code": "{\n\ttry {\n\t\treturn new MidiInput(this);\n\t} catch (MidiUnavailableException e) {\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n}", "path": "src\\rwmidi\\MidiInputDevice.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * \n * @return the list of the available input devices.\n */\n", "func_signal": "public static MidiInputDevice[] getInputDevices()", "code": "{\n\tjavax.sound.midi.MidiDevice.Info infos[] = MidiSystem.getMidiDeviceInfo();\n\tArrayList<MidiInputDevice> result = new ArrayList<MidiInputDevice>();\n\tfor (javax.sound.midi.MidiDevice.Info info : infos) {\n\t\tjavax.sound.midi.MidiDevice device;\n\t\ttry {\n\t\t\tdevice = MidiSystem.getMidiDevice(info);\n\t\t\tif (device.getMaxTransmitters() == 0)\n\t\t\t\tcontinue;\n\t\t\tresult.add(new MidiInputDevice(info));\n\t\t} catch (MidiUnavailableException e) {\n\t\t\te.printStackTrace();\n\t\t\tcontinue;\n\t\t}\n\t}\n\treturn result.toArray(new MidiInputDevice[0]);\n}", "path": "src\\rwmidi\\RWMidi.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * Returns a specific output device\n * @param name the name of the output device\n * @return\n */\n", "func_signal": "public static MidiOutputDevice getOutputDevice(String name)", "code": "{\n\tMidiOutputDevice[] devices = getOutputDevices();\n\t\n\tfor (MidiOutputDevice device : devices) {\n\t\tif (name.equals(device.getName()))\n\t\t\treturn device;\n\t}\n\t\n\treturn null;\n}", "path": "src\\rwmidi\\RWMidi.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * Send a Controller change message on this output.\n * @param channel Channel on which to send the message\n * @param cc Controller Change number\n * @param value Controller Change value\n * @return 1 on success, 0 on error\n */\n", "func_signal": "public int sendController(int channel, int cc, int value)", "code": "{\n\tShortMessage msg = new ShortMessage();\n\ttry {\n\t\tmsg.setMessage(MidiEvent.CONTROL_CHANGE, channel, cc, value);\n\t\treceiver.send(msg, -1);\n\t\treturn 1;\n\t} catch (InvalidMidiDataException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t\treturn 0;\n\t}\n}", "path": "src\\rwmidi\\MidiOutput.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * Register an object with standard midi callbacks on a specific channels. The callbacks are noteOnReceived(Note),\n * noteOffReceived(Note), controllerChangeReceived(Controller), programChangeReceived(ProgramChange) and\n * sysexReceived(SysexMessage).\n * @param obj the object with standard callbacks\n * @param channel the channel on which to receive note and controller change messages \n */\n", "func_signal": "public void plug(Object obj, int channel)", "code": "{\n\tif (obj != null) {\n\t\tplug(obj, \"noteOnReceived\", channel, MidiEvent.NOTE_ON);\n\t\tplug(obj, \"noteOffReceived\", channel, MidiEvent.NOTE_OFF);\n\t\tplug(obj, \"controllerChangeReceived\", channel, MidiEvent.CONTROL_CHANGE);\n\t\tplug(obj, \"programChangeReceived\", -1, MidiEvent.PROGRAM_CHANGE);\n\t\tplug(obj, \"sysexReceived\", -1, MidiEvent.SYSEX_START);\n\t}\n}", "path": "src\\rwmidi\\MidiInput.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * Create a Midi Device from a java MidiDevice structure. This should not be used unless you know what you are doing.\n * @param _device The javax.sound.midi.MidiDevice structure\n */\n", "func_signal": "public MidiDevice(javax.sound.midi.MidiDevice _device)", "code": "{\n\tdevice = _device;\n\tinfo = _device.getDeviceInfo();\n}", "path": "src\\rwmidi\\MidiDevice.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * Send a Program Change on this output\n * @param channel Channel on which to send the message\n * @param value Program Change value\n * @return 1 on success, 0 on error\n */\n", "func_signal": "public int sendProgramChange(int value)", "code": "{\n\tShortMessage msg = new ShortMessage();\n\ttry {\n\t\tmsg.setMessage(MidiEvent.PROGRAM_CHANGE, value, -1);\n\t\treceiver.send(msg, -1);\n\t\treturn 1;\n\t} catch (InvalidMidiDataException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t\treturn 0;\n\t}\n}", "path": "src\\rwmidi\\MidiOutput.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * \n * @return the list of the available output devices.\n */\n", "func_signal": "public static MidiOutputDevice[] getOutputDevices()", "code": "{\n\tjavax.sound.midi.MidiDevice.Info infos[] = MidiSystem.getMidiDeviceInfo();\n\tArrayList<MidiOutputDevice> result = new ArrayList<MidiOutputDevice>();\n\tfor (javax.sound.midi.MidiDevice.Info info : infos) {\n\t\tjavax.sound.midi.MidiDevice device;\n\t\ttry {\n\t\t\tdevice = MidiSystem.getMidiDevice(info);\n\t\t\tif (device.getMaxReceivers() == 0)\n\t\t\t\tcontinue;\n\t\t\tresult.add(new MidiOutputDevice(info));\n\t\t} catch (MidiUnavailableException e) {\n\t\t\te.printStackTrace();\n\t\t\tcontinue;\n\t\t}\n\t}\n\treturn result.toArray(new MidiOutputDevice[0]);\n}", "path": "src\\rwmidi\\RWMidi.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * \n * @return a list of the output devices names\n */\n", "func_signal": "public static String[] getOutputDeviceNames()", "code": "{\n\tMidiOutputDevice[] devices = getOutputDevices();\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (MidiOutputDevice device : devices) {\n\t\tresult.add(device.getName());\n\t}\n\treturn result.toArray(new String[0]);\n}", "path": "src\\rwmidi\\RWMidi.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * Register a callback method on a specific channel for a specific MIDI command. The value field is the MIDI status byte, \n * for example 0x90 for NOTE ON.\n * @param _object Callback object\n * @param _methodName Name of the method of the callback object that will be called by the input\n * @param channel Channel of the message, -1 for all channels\n * @param value MIDI status byte, -1 for all messages\n */\n", "func_signal": "public void plug(final Object _object, \n\t\t  final String _methodName,\n\t\t  final int channel,\n\t\t  final int value)", "code": "{\n\tif (Plug.objectHasMethod(_object, _methodName)) {\n\t\tPlug plug = new Plug(_object, _methodName, channel, value);\n\t\tplugList.add(plug);\n\t}\n}", "path": "src\\rwmidi\\MidiInput.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * Returns a specific input device\n * @param name the name of the input device\n * @return\n */\n", "func_signal": "public static MidiInputDevice getInputDevice(String name)", "code": "{\n\tMidiInputDevice[] devices = getInputDevices();\n\t\n\tfor (MidiInputDevice device : devices) {\n\t\tif (name.equals(device.getName()))\n\t\t\treturn device;\n\t}\n\t\n\treturn null;\n}", "path": "src\\rwmidi\\RWMidi.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * \n * @return the second data byte of this message\n */\n", "func_signal": "public int getData2()", "code": "{\n\tif (length > 2){\n\t\treturn (data[2] & 0xFF);\n\t}\n\treturn 0;\n}", "path": "src\\rwmidi\\MidiEvent.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * Create an output object for the MIDI device.\n * @return the created output\n */\n", "func_signal": "public MidiOutput createOutput()", "code": "{\n\ttry {\n\t\treturn new MidiOutput(this);\n\t} catch (MidiUnavailableException e) {\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n}", "path": "src\\rwmidi\\MidiOutputDevice.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * Send a SYSEX MIDI message on this output\n * @param msg Bytes of the sysex message, have to contain 0xF0 at the beginning and 0xF7 at the end\n * @return 1 on success, 0 on error\n */\n", "func_signal": "public int sendSysex(byte [] msg)", "code": "{\n\tjavax.sound.midi.SysexMessage msg2 = new javax.sound.midi.SysexMessage();\n\ttry {\n\t\tmsg2.setMessage(msg, msg.length);\n\t\treceiver.send(msg2,0);\n\t\treturn 1;\n\t} catch (InvalidMidiDataException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t\treturn 0;\n\t}\n}", "path": "src\\rwmidi\\MidiOutput.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * static start point for the ruin & wesen doclet\n * \n * @param root\n * @return true\n */\n", "func_signal": "public static boolean start(RootDoc root)", "code": "{\n\tRWDoclet doclet = new RWDoclet();\n\n\t//get the sourcepath from the sourcepath option setup with javadoc call\n\tString libfolder = \".\";\n\tFile libFolder;\n\tfor(String[] options:root.options()){\n\t\tif(options[0].equals(\"-sourcepath\")){\n\t\t\tlibfolder = options[1];\n\t\t}\n\t}\n\t\n\tlibFolder = new File(libfolder);\n\t\n\t//get the docfolder and copies the ressource files from the templatefolder \n\toutputDir = libfolder + \"/\"+\"documentation/\";\n\t\n\n\tClassDoc[] classes = doclet.classDocs(root.classes());\n\tFile dirFile = new File(outputDir);\n\tdirFile.mkdirs();\n\tfor (int i = classes.length - 1; i >= 0; i--) {\n\t\tClassDoc myClass = classes[i];\n\t\n\t\tdoclet.writeClassFile(myClass, classes);\n\t\tfor (ExecutableMemberDoc myMethod : doclet.classMethods(myClass)) {\n\t\t\tdoclet.writeMethodFile(myMethod, myClass, classes);\n\t\t}\n\t}\n\treturn true;\n}", "path": "src\\rwdoclet\\src\\com\\ruinwesen\\doclet\\RWDoclet.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * Send a NOTE ON message on this output.\n * @param channel Channel on which to send the message\n * @param note Note pitch\n * @param velocity Note velocity\n * @return 1 on success, 0 on error\n */\n", "func_signal": "public int sendNoteOn(int channel, int note, int velocity)", "code": "{\n\tShortMessage msg = new ShortMessage();\n\ttry {\n\t\tmsg.setMessage(MidiEvent.NOTE_ON, channel, note, velocity);\n\t\treceiver.send(msg, -1);\n\t\treturn 1;\n\t} catch (InvalidMidiDataException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t\treturn 0;\n\t}\n}", "path": "src\\rwmidi\\MidiOutput.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * \n * @return the first data byte of this message\n */\n", "func_signal": "public int getData1()", "code": "{\n\tif (length > 1){\n\t\treturn (data[1] & 0xFF);\n\t}\n\treturn 0;\n}", "path": "src\\rwmidi\\MidiEvent.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * \n * @return a list of the output devices names\n */\n", "func_signal": "public static String[] getInputDeviceNames()", "code": "{\n\tMidiInputDevice[] devices = getInputDevices();\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (MidiInputDevice device : devices) {\n\t\tresult.add(device.getName());\n\t}\n\treturn result.toArray(new String[0]);\n}", "path": "src\\rwmidi\\RWMidi.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "/**\n * Create an input object for the device and register the object given as argument as a callback for messages on the given channel.\n * @param obj Object to be registered as callback\n * @param channel Channel on which the object is to be registered\n * @return the created input\n */\n", "func_signal": "public MidiInput createInput(Object obj, int channel)", "code": "{\n\tMidiInput input = createInput();\n\tinput.plug(obj, channel);\n\treturn input;\n}", "path": "src\\rwmidi\\MidiInputDevice.java", "repo_name": "wesen/rwmidi", "stars": 17, "license": "None", "language": "java", "size": 334}
{"docstring": "// Switching between alphabet shift locked and symbols.\n", "func_signal": "public void testAlphabetShiftLockedAndSymbols()", "code": "{\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"ABC\" key, back to alphabet shift locked.\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n\n    // Press/release \"=\\<\" key, enter into symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Press/release \"ABC\" key, back to alphabet shift locked.\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n    // Press/release \"?123\" key, back to symbols (not symbols shifted).\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Automatic switch back to alphabet shift locked test by space key.\n", "func_signal": "public void testSwitchBackBySpaceShiftLocked()", "code": "{\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Enter symbol letter.\n    pressAndReleaseKey('1', SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Enter space, switch back to alphabet shift locked.\n    pressAndReleaseKey(CODE_SPACE, SYMBOLS_UNSHIFTED, ALPHABET_SHIFT_LOCKED);\n\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"=\\<\" key, enter into symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Enter symbol shift letter.\n    pressAndReleaseKey('~', SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Enter space, switch back to alphabet shift locked.\n    pressAndReleaseKey(CODE_SPACE, SYMBOLS_SHIFTED, ALPHABET_SHIFT_LOCKED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Change focus to new text field.\n", "func_signal": "public void testChangeFocus()", "code": "{\n    // Press/release shift key.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Change focus to new text field.\n    loadKeyboard(ALPHABET_UNSHIFTED);\n\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n    // Change focus to new text field.\n    loadKeyboard(ALPHABET_UNSHIFTED);\n\n    // Press/release \"?123\" key.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Change focus to new text field.\n    loadKeyboard(ALPHABET_UNSHIFTED);\n\n    // Press/release \"?123\" key.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"=\\<\" key.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Change focus to new text field.\n    loadKeyboard(ALPHABET_UNSHIFTED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Rapidly type shift key.\n", "func_signal": "public void testRapidShiftTyping()", "code": "{\n    // Press/release shift key\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Rapidly press/release letter key.\n    secondPressAndReleaseKey('J', ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n    // Rapidly press/release shift key.\n    secondPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Rapidly press/release letter key.\n    secondPressAndReleaseKey('J', ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n    // Rapidly press/release shift key.\n    secondPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Rapidly press/release letter key.\n    secondPressAndReleaseKey('J', ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n\n    // Press/release shift key to enter alphabet manual shifted.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Press/release shift key\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n    // Rapidly press/release letter key.\n    secondPressAndReleaseKey('j', ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n    // Rapidly press/release shift key.\n    secondPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Rapidly press/release letter key.\n    secondPressAndReleaseKey('J', ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n    // Rapidly press/release shift key.\n    secondPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Rapidly press/release letter key.\n    secondPressAndReleaseKey('J', ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n\n    // Long press shift key to enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n    // Press/release shift key\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_SHIFT_LOCK_SHIFTED, ALPHABET_UNSHIFTED);\n    // Rapidly press/release letter key.\n    secondPressAndReleaseKey('j', ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n    // Rapidly press/release shift key.\n    secondPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Rapidly press/release letter key.\n    secondPressAndReleaseKey('J', ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n    // Rapidly press/release shift key.\n    secondPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Rapidly press/release letter key.\n    secondPressAndReleaseKey('J', ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n\n    // Set capitalize the first character of all words mode.\n    setAutoCapsMode(CAP_MODE_WORDS);\n    // Press/release auto caps trigger letter to enter alphabet automatic shifted.\n    pressAndReleaseKey(CODE_AUTO_CAPS_TRIGGER, ALPHABET_UNSHIFTED, ALPHABET_AUTOMATIC_SHIFTED);\n    // Press/release shift key\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n    // Rapidly press/release letter key.\n    secondPressAndReleaseKey('j', ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n    // Rapidly press/release shift key.\n    secondPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Rapidly press/release letter key.\n    secondPressAndReleaseKey('J', ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n    // Rapidly press/release shift key.\n    secondPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Rapidly press/release letter key.\n    secondPressAndReleaseKey('J', ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Switching between alphabet and symbols.\n", "func_signal": "public void testAlphabetAndSymbols()", "code": "{\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"ABC\" key, back to alphabet.\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n\n    // Press/release \"=\\<\" key, enter into symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Press/release \"ABC\" key, back to alphabet.\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n    // Press/release \"?123\" key, back to symbols (not symbols shifted).\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Shift key in alphabet.\n", "func_signal": "public void testShiftAlphabet()", "code": "{\n    // Press/release shift key, enter into alphabet shifted.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n\n    // Press/release shift key, back to alphabet.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n\n    // Press/release shift key, enter into alphabet shifted.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Press/release letter key, switch back to alphabet.\n    pressAndReleaseKey('Z', ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Update shift state.\n", "func_signal": "public void testUpdateShiftState()", "code": "{\n    // Set auto caps mode off.\n    setAutoCapsMode(CAP_MODE_OFF);\n    // Load keyboard, should be in alphabet.\n    loadKeyboard(ALPHABET_UNSHIFTED);\n    // Update shift state, remained in alphabet.\n    updateShiftState(ALPHABET_UNSHIFTED);\n\n    // Press/release shift key, enter alphabet shifted.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Update shift state, back to alphabet.\n    updateShiftState(ALPHABET_UNSHIFTED);\n\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n    // Update shift state, remained in alphabet shift locked.\n    updateShiftState(ALPHABET_SHIFT_LOCKED);\n    // Long press shift key, back to alphabet.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_SHIFT_LOCK_SHIFTED, ALPHABET_SHIFT_LOCK_SHIFTED,\n            ALPHABET_UNSHIFTED);\n\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Update shift state, remained in symbols.\n    updateShiftState(SYMBOLS_UNSHIFTED);\n\n    // Press/release \"=\\<\" key, enter symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Update shift state, remained in symbols shifted.\n    updateShiftState(SYMBOLS_SHIFTED);\n\n    // Set capitalize the first character of all words mode.\n    setAutoCapsMode(CAP_MODE_WORDS);\n    // Load keyboard, should be in automatic shifted.\n    loadKeyboard(ALPHABET_AUTOMATIC_SHIFTED);\n    // Update shift state, remained in automatic shifted.\n    updateShiftState(ALPHABET_AUTOMATIC_SHIFTED);\n\n    // Press/release shift key, enter alphabet.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n    // Press/release shift key, enter alphabet shifted.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Update shift state, enter to automatic shifted (not alphabet shifted).\n    updateShiftState(ALPHABET_AUTOMATIC_SHIFTED);\n\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n    // Update shift state, remained in alphabet shift locked (not automatic shifted).\n    updateShiftState(ALPHABET_SHIFT_LOCKED);\n    // Long press shift key, back to alphabet.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_SHIFT_LOCK_SHIFTED, ALPHABET_SHIFT_LOCK_SHIFTED,\n            ALPHABET_UNSHIFTED);\n\n    // Load keyboard, should be in automatic shifted.\n    loadKeyboard(ALPHABET_AUTOMATIC_SHIFTED);\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Update shift state, remained in symbols.\n    updateShiftState(SYMBOLS_UNSHIFTED);\n\n    // Press/release \"=\\<\" key, enter symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Update shift state, remained in symbols shifted.\n    updateShiftState(SYMBOLS_SHIFTED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Shift key in symbols.\n", "func_signal": "public void testShiftSymbols()", "code": "{\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n\n    // Press/release \"=\\<\" key, enter into symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n\n    // Press/release \"?123\" key, back to symbols.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n\n    // Press/release \"=\\<\" key, enter into symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Press/release symbol letter key, remain in symbols shifted.\n    pressAndReleaseKey('1', SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Sliding input in symbols.\n", "func_signal": "public void testSlidingSymbols()", "code": "{\n    // Symbols -> \"=\\<\" key + letter -> symbols.\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press and slide from shift key, enter symols shifted.\n    pressAndSlideFromKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Enter/release symbol shifted letter key, switch back to symbols.\n    pressAndReleaseKey('~', SYMBOLS_SHIFTED, SYMBOLS_UNSHIFTED);\n\n    // Symbols -> \"ABC\" key + letter -> Symbols.\n    // Press and slide from \"ABC\" key, enter alphabet.\n    pressAndSlideFromKey(CODE_SYMBOL, ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n    // Enter/release letter key, switch back to symbols.\n    pressAndReleaseKey('a', ALPHABET_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"ABC\" key, switch to alphabet.\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n\n    // Alphabet shifted -> symbols -> \"ABC\" key + letter -> symbols ->\n    // alphabet.\n    // Load keyboard\n    loadKeyboard(ALPHABET_UNSHIFTED);\n    // Press/release shift key, enter alphabet shifted.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press and slide from \"ABC\" key.\n    pressAndSlideFromKey(CODE_SYMBOL, ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n    // Enter/release letter key, switch back to symbols.\n    pressAndReleaseKey('a', ALPHABET_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"ABC\" key, switch to alphabet (not alphabet shifted).\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n\n    // Alphabet shift locked -> symbols -> \"ABC\" key + letter -> symbols ->\n    // alphabet shift locked.\n    // Load keyboard\n    loadKeyboard(ALPHABET_UNSHIFTED);\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press and slide from \"ABC\" key, enter alphabet shift locked.\n    pressAndSlideFromKey(CODE_SYMBOL, ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n    // Enter/release letter key, switch back to symbols.\n    pressAndReleaseKey('A', ALPHABET_SHIFT_LOCKED, SYMBOLS_UNSHIFTED);\n    // Press/release \"ABC\" key, switch to alphabet shift locked.\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n\n    // Alphabet shift locked -> symbols -> \"=\\<\" key + letter -> symbols ->\n    // alphabet shift locked.\n    // Load keyboard\n    loadKeyboard(ALPHABET_UNSHIFTED);\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press and slide from \"=\\<\" key, enter symbols shifted.\n    pressAndSlideFromKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Enter/release symbols shift letter key, switch back to symbols.\n    pressAndReleaseKey('~', SYMBOLS_SHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"ABC\" key, switch to alphabet shift locked.\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Automatic upper case test\n", "func_signal": "public void testAutomaticUpperCase()", "code": "{\n    // Set capitalize the first character of all words mode.\n    setAutoCapsMode(CAP_MODE_WORDS);\n    // Load keyboard, should be in automatic shifted.\n    loadKeyboard(ALPHABET_AUTOMATIC_SHIFTED);\n\n    // Press/release letter key, switch to alphabet.\n    pressAndReleaseKey('A', ALPHABET_AUTOMATIC_SHIFTED, ALPHABET_UNSHIFTED);\n    // Press/release auto caps trigger letter, should be in automatic shifted.\n    pressAndReleaseKey(CODE_AUTO_CAPS_TRIGGER, ALPHABET_UNSHIFTED, ALPHABET_AUTOMATIC_SHIFTED);\n\n    // Press/release shift key, back to alphabet.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n    // Press/release letter key, remain in alphabet.\n    pressAndReleaseKey('a', ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n    // Press/release auto caps trigger letter, should be in automatic shifted.\n    pressAndReleaseKey(CODE_AUTO_CAPS_TRIGGER, ALPHABET_UNSHIFTED, ALPHABET_AUTOMATIC_SHIFTED);\n\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release symbol letter key, remain in symbols.\n    pressAndReleaseKey('1', SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release space, switch back to automatic shifted.\n    pressAndReleaseKey(CODE_SPACE, SYMBOLS_UNSHIFTED, ALPHABET_AUTOMATIC_SHIFTED);\n\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"=\\<\" key, enter into symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Press/release symbol shift letter key, remain in symbols shifted.\n    pressAndReleaseKey('~', SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Press/release space, switch back to automatic shifted.\n    pressAndReleaseKey(CODE_SPACE, SYMBOLS_SHIFTED, ALPHABET_AUTOMATIC_SHIFTED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Automatic switch back to alphabet by space key.\n", "func_signal": "public void testSwitchBackBySpace()", "code": "{\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Enter symbol letter.\n    pressAndReleaseKey('1', SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Enter space, switch back to alphabet.\n    pressAndReleaseKey(CODE_SPACE, SYMBOLS_UNSHIFTED, ALPHABET_UNSHIFTED);\n\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"=\\<\" key, enter into symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Enter symbol shift letter.\n    pressAndReleaseKey('~', SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Enter space, switch back to alphabet.\n    pressAndReleaseKey(CODE_SPACE, SYMBOLS_SHIFTED, ALPHABET_UNSHIFTED);\n    // Press/release \"?123\" key, enter into symbols (not symbols shifted).\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Change focus to auto caps text field.\n", "func_signal": "public void testChangeFocusAutoCaps()", "code": "{\n    // Set capitalize the first character of all words mode.\n    setAutoCapsMode(CAP_MODE_WORDS);\n    // Change focus to new text field.\n    loadKeyboard(ALPHABET_AUTOMATIC_SHIFTED);\n\n    // Press/release shift key, enter alphabet.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n    // Change focus to new text field.\n    loadKeyboard(ALPHABET_AUTOMATIC_SHIFTED);\n\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n    // Change focus to new text field.\n    loadKeyboard(ALPHABET_AUTOMATIC_SHIFTED);\n\n    // Press/release \"?123\" key.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Change focus to new text field.\n    loadKeyboard(ALPHABET_AUTOMATIC_SHIFTED);\n\n    // Press/release \"?123\" key.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"=\\<\" key.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Change focus to new text field.\n    loadKeyboard(ALPHABET_AUTOMATIC_SHIFTED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Automatic switch back to alphabet shift locked by registered letters.\n", "func_signal": "public void testSwitchBackCharShiftLocked()", "code": "{\n    // Set switch back chars.\n    final String switchBackSymbols = \"'\";\n    final int switchBackCode = switchBackSymbols.codePointAt(0);\n    setLayoutSwitchBackSymbols(switchBackSymbols);\n    loadKeyboard(ALPHABET_UNSHIFTED);\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Enter symbol letter.\n    pressAndReleaseKey('1', SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Enter switch back letter, switch back to alphabet shift locked.\n    pressAndReleaseKey(switchBackCode, SYMBOLS_UNSHIFTED, ALPHABET_SHIFT_LOCKED);\n\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"=\\<\" key, enter into symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Enter symbol shift letter.\n    pressAndReleaseKey(CODE_SPACE, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Enter switch back letter, switch back to alphabet shift locked.\n    pressAndReleaseKey(switchBackCode, SYMBOLS_SHIFTED, ALPHABET_SHIFT_LOCKED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Automatic switch back to alphabet by registered letters.\n", "func_signal": "public void testSwitchBackChar()", "code": "{\n    // Set switch back chars.\n    final String switchBackSymbols = \"'\";\n    final int switchBackCode = switchBackSymbols.codePointAt(0);\n    setLayoutSwitchBackSymbols(switchBackSymbols);\n    loadKeyboard(ALPHABET_UNSHIFTED);\n\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Enter symbol letter.\n    pressAndReleaseKey('1', SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Enter switch back letter, switch back to alphabet.\n    pressAndReleaseKey(switchBackCode, SYMBOLS_UNSHIFTED, ALPHABET_UNSHIFTED);\n\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"=\\<\" key, enter into symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Enter symbol shift letter.\n    pressAndReleaseKey('~', SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Enter switch abck letter, switch back to alphabet.\n    pressAndReleaseKey(switchBackCode, SYMBOLS_SHIFTED, ALPHABET_UNSHIFTED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Sliding input in symbols shifted.\n", "func_signal": "public void testSlidingSymbolsShifted()", "code": "{\n    // Symbols shifted -> \"?123\" + letter -> symbols shifted.\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"=\\<\" key, enter into symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Press and slide from shift key, enter symbols.\n    pressAndSlideFromKey(CODE_SHIFT, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Enter/release symbol letter key, switch back to symbols shifted.\n    pressAndReleaseKey('1', SYMBOLS_UNSHIFTED, SYMBOLS_SHIFTED);\n\n    // Symbols shifted -> \"ABC\" key + letter -> symbols shifted.\n    // Press and slide from \"ABC\" key, enter alphabet.\n    pressAndSlideFromKey(CODE_SYMBOL, ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n    // Enter/release letter key, switch back to symbols shifted.\n    pressAndReleaseKey('a', ALPHABET_UNSHIFTED, SYMBOLS_SHIFTED);\n    // Press/release \"ABC\" key, switch to alphabet.\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n\n    // Alphabet shifted -> symbols shifted -> \"ABC\" + letter -> symbols shifted ->\n    // alphabet.\n    // Load keyboard\n    loadKeyboard(ALPHABET_UNSHIFTED);\n    // Press/release shift key, enter alphabet shifted.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"=\\<\" key, enter into symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Press and slide from \"ABC\" key.\n    pressAndSlideFromKey(CODE_SYMBOL, ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n    // Enter/release letter key, switch back to symbols shifted.\n    pressAndReleaseKey('a', ALPHABET_UNSHIFTED, SYMBOLS_SHIFTED);\n    // Press/release \"ABC\" key, switch to alphabet (not alphabet shifted).\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n\n    // Alphabet shift locked -> symbols shifted -> \"ABC\" + letter -> symbols shifted ->\n    // alphabet shift locked.\n    // Load keyboard\n    loadKeyboard(ALPHABET_UNSHIFTED);\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"=\\<\" key, enter into symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Press and slide from \"ABC\" key.\n    pressAndSlideFromKey(CODE_SYMBOL, ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n    // Enter/release letter key, switch back to symbols shifted.\n    pressAndReleaseKey('A', ALPHABET_SHIFT_LOCKED, SYMBOLS_SHIFTED);\n    // Press/release \"ABC\" key, switch to alphabet shift locked.\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n\n    // Alphabet shift locked -> symbols shifted -> \"?123\" + letter -> symbols shifted ->\n    // alphabet shift locked.\n    // Load keyboard\n    loadKeyboard(ALPHABET_UNSHIFTED);\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"=\\<\" key, enter into symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Press and slide from \"?123\" key.\n    pressAndSlideFromKey(CODE_SHIFT, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Enter/release symbol letter key, switch back to symbols shifted.\n    pressAndReleaseKey('1', SYMBOLS_UNSHIFTED, SYMBOLS_SHIFTED);\n    // Press/release \"ABC\" key, switch to alphabet shift locked.\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Change orientation.\n", "func_signal": "public void testChangeOrientation()", "code": "{\n    // Alphabet -> rotate -> alphabet.\n    updateShiftState(ALPHABET_UNSHIFTED);\n    // Rotate device, remain in alphabet.\n    rotateDevice(ALPHABET_UNSHIFTED);\n\n    // Alphabet shifted -> rotate -> alphabet shifted.\n    // Press/release shift key, enter alphabet shifted.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Rotate device, remain in alphabet shifted.\n    rotateDevice(ALPHABET_MANUAL_SHIFTED);\n\n    // Alphabet shift locked -> rotate -> alphabet shift locked.\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n    // Rotate device, remain in alphabet shift locked.\n    rotateDevice(ALPHABET_SHIFT_LOCKED);\n\n    // Alphabet shift locked -> symbols -> rotate -> symbols ->\n    // Alphabet shift locked.\n    // Press/release \"?123\" key, enter symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Rotate device, remain in symbols,\n    rotateDevice(SYMBOLS_UNSHIFTED);\n    // Press/release \"ABC\" key, alphabet shift locked state should be maintained.\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n\n    // Alphabet shift locked -> symbols shifted -> rotate -> symbols shifted ->\n    // Alphabet shift locked.\n    // Press/release \"?123\" key, enter symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"=\\<\" key, enter symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Rotate device, remain in symbols shifted.\n    rotateDevice(SYMBOLS_SHIFTED);\n    // Press/release \"ABC\" key, alphabet shift locked state should be maintained.\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n\n    // Alphabet shift locked -> symbols shifted -> alphabet shift locked -> rotate ->\n    // Alphabet shift locked -> symbols.\n    // Press/release \"?123\" key, enter symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"=\\<\" key, enter symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Press/release \"ABC\" key, enter alphabet shift locked.\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n    // Rotate device, remain in alphabet shift locked.\n    rotateDevice(ALPHABET_SHIFT_LOCKED);\n    // Press/release \"?123\" key, enter symbols (not symbols shifted).\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n\n    // Alphabet -> symbols shifted -> alphabet -> rotate ->\n    // Alphabet -> symbols.\n    loadKeyboard(ALPHABET_UNSHIFTED);\n    // Press/release \"?123\" key, enter symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"=\\<\" key, enter symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Press/release \"ABC\" key, enter alphabet.\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n    // Rotate device, remain in alphabet shift locked.\n    rotateDevice(ALPHABET_UNSHIFTED);\n    // Press/release \"?123\" key, enter symbols (not symbols shifted).\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Long press shift key.\n", "func_signal": "public void testLongPressShift()", "code": "{\n    // Set auto caps mode off.\n    setAutoCapsMode(CAP_MODE_OFF);\n    // Load keyboard, should be in alphabet.\n    loadKeyboard(ALPHABET_UNSHIFTED);\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n    // Press/release shift key, back to alphabet.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_SHIFT_LOCK_SHIFTED, ALPHABET_UNSHIFTED);\n\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n    // Press/release letter key, remain in shift locked.\n    pressAndReleaseKey('A', ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n    // Press/release word separator, remain in shift locked.\n    pressAndReleaseKey(CODE_SPACE, ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n    // Press/release shift key, back to alphabet.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_SHIFT_LOCK_SHIFTED, ALPHABET_UNSHIFTED);\n\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n    // Long press shift key, back to alphabet.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_SHIFT_LOCK_SHIFTED, ALPHABET_SHIFT_LOCK_SHIFTED,\n            ALPHABET_UNSHIFTED);\n\n    // Press/release shift key, enter alphabet shifted.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n    // Press/release shift key, back to alphabet.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_SHIFT_LOCK_SHIFTED, ALPHABET_UNSHIFTED);\n\n    // Set capitalize the first character of all words mode.\n    setAutoCapsMode(CAP_MODE_WORDS);\n    // Load keyboard, should be in automatic shifted.\n    loadKeyboard(ALPHABET_AUTOMATIC_SHIFTED);\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n    // Press/release shift key, back to alphabet.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_SHIFT_LOCK_SHIFTED, ALPHABET_UNSHIFTED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Double tap shift key.\n", "func_signal": "public void testDoubleTapShift()", "code": "{\n    // First shift key tap.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Second shift key tap.\n    secondPressAndReleaseKey(CODE_SHIFT, ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n\n    // First shift key tap.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_SHIFT_LOCK_SHIFTED, ALPHABET_UNSHIFTED);\n    // Second shift key tap.\n    secondPressAndReleaseKey(CODE_SHIFT, ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n\n    // Press/release shift key, enter alphabet manual shifted.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n\n    // First shift key tap.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n    // Second shift key tap.\n    secondPressAndReleaseKey(CODE_SHIFT, ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n\n    // First shift key tap.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_SHIFT_LOCK_SHIFTED, ALPHABET_UNSHIFTED);\n    // Second shift key tap.\n    secondPressAndReleaseKey(CODE_SHIFT, ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n\n    // Set capitalize the first character of all words mode.\n    setAutoCapsMode(CAP_MODE_WORDS);\n    // Load keyboard, should be in automatic shifted.\n    loadKeyboard(ALPHABET_AUTOMATIC_SHIFTED);\n\n    // First shift key tap.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n    // Second shift key tap.\n    secondPressAndReleaseKey(CODE_SHIFT, ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n\n    // First shift key tap.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_SHIFT_LOCK_SHIFTED, ALPHABET_UNSHIFTED);\n    // Second shift key tap.\n    secondPressAndReleaseKey(CODE_SHIFT, ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Switching between alphabet shifted and symbols.\n", "func_signal": "public void testAlphabetShiftedAndSymbols()", "code": "{\n    // Press/release shift key, enter into alphabet shifted.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"ABC\" key, back to alphabet (not alphabet shifted).\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n\n    // Press/release shift key, enter into alphabet shifted.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Press/release \"?123\" key, enter into symbols.\n    pressAndReleaseKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Press/release \"=\\< key, enter into symbols shifted.\n    pressAndReleaseKey(CODE_SHIFT, SYMBOLS_SHIFTED, SYMBOLS_SHIFTED);\n    // Press/release \"ABC\" key, back to alphabet (not alphabet shifted).\n    pressAndReleaseKey(CODE_SYMBOL, ALPHABET_UNSHIFTED, ALPHABET_UNSHIFTED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "// Sliding input in alphabet.\n", "func_signal": "public void testSlidingAlphabet()", "code": "{\n    // Alphabet -> shift key + letter -> alphabet.\n    // Press and slide from shift key, enter alphabet shifted.\n    pressAndSlideFromKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Enter/release letter key, switch back to alphabet.\n    pressAndReleaseKey('Z', ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n\n    // Alphabet -> \"?123\" key + letter -> alphabet.\n    // Press and slide from \"123?\" key, enter symbols.\n    pressAndSlideFromKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Enter/release into symbol letter key, switch back to alphabet.\n    pressAndReleaseKey('!', SYMBOLS_UNSHIFTED, ALPHABET_UNSHIFTED);\n\n    // Alphabet shifted -> shift key + letter -> alphabet.\n    // Press/release shift key, enter alphabet shifted.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Press and slide from shift key, remain alphabet shifted.\n    pressAndSlideFromKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Enter/release letter key, switch back to alphabet (not alphabet shifted).\n    pressAndReleaseKey('Z', ALPHABET_MANUAL_SHIFTED, ALPHABET_UNSHIFTED);\n\n    // Alphabet shifted -> \"?123\" key + letter -> alphabet.\n    // Press/release shift key, enter alphabet shifted.\n    pressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED);\n    // Press and slide from \"123?\" key, enter symbols.\n    pressAndSlideFromKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Enter/release into symbol letter key, switch back to alphabet (not alphabet shifted).\n    pressAndReleaseKey('!', SYMBOLS_UNSHIFTED, ALPHABET_UNSHIFTED);\n\n    // Alphabet shift locked -> shift key + letter -> alphabet shift locked.\n    // Long press shift key, enter alphabet shift locked.\n    longPressAndReleaseKey(CODE_SHIFT, ALPHABET_MANUAL_SHIFTED, ALPHABET_MANUAL_SHIFTED,\n            ALPHABET_SHIFT_LOCKED);\n    // Press and slide from \"123?\" key, enter symbols.\n    pressAndSlideFromKey(CODE_SYMBOL, SYMBOLS_UNSHIFTED, SYMBOLS_UNSHIFTED);\n    // Enter/release into symbol letter key, switch back to alphabet shift locked.\n    pressAndReleaseKey('!', SYMBOLS_UNSHIFTED, ALPHABET_SHIFT_LOCKED);\n\n    // Alphabet shift locked -> \"?123\" key + letter -> alphabet shift locked.\n    // Press and slide from shift key, enter alphabet shifted.\n    pressAndSlideFromKey(CODE_SHIFT, ALPHABET_SHIFT_LOCK_SHIFTED, ALPHABET_SHIFT_LOCKED);\n    // Enter/release letter key, switch back to shift locked.\n    pressAndReleaseKey('Z', ALPHABET_SHIFT_LOCKED, ALPHABET_SHIFT_LOCKED);\n}", "path": "tests\\src\\com\\android\\inputmethod\\keyboard\\internal\\KeyboardStateSingleTouchTests.java", "repo_name": "AgeOfMobile/Vietnamese-LatinIME", "stars": 20, "license": "None", "language": "java", "size": 49216}
{"docstring": "/**\n * Executes a query and compares it to the expected result.\n * \n * @param query\n *            The XAPI URL query to make.\n * @param expectedResults\n *            Set of entities which are expected to be returned.\n */\n", "func_signal": "private void execQuery(String query, Set<EntityRef> expectedResults)", "code": "{\n    XAPIQueryInfo info = null;\n    try {\n        info = XAPIQueryInfo.fromString(query);\n    } catch (XAPIParseException ex) {\n        Assert.fail(\"Parsing query shouldn't fail.\", ex);\n    }\n\n    PostgreSqlDatasetContext context = new PostgreSqlDatasetContext(loginCredentials, preferences);\n    ReleasableIterator<EntityContainer> iterator = XapiServlet.makeRequestIterator(context, info);\n\n    try {\n        HashSet<EntityRef> workingSet = new HashSet<EntityRef>(expectedResults);\n        while (iterator.hasNext()) {\n            EntityContainer ent = iterator.next();\n            EntityRef ref = new EntityRef(ent.getEntity().getType(), ent.getEntity().getId());\n            // don't bother to account for bound elements at the moment...\n            if (ent.getEntity().getType() != EntityType.Bound) {\n                if (!workingSet.contains(ref)) {\n                    Assert.fail(\"Unexpected element: \" + ref.toString() + \".\");\n                }\n            }\n            workingSet.remove(ref);\n        }\n\n        if (!workingSet.isEmpty()) {\n            StringBuilder str = new StringBuilder();\n            str.append(\"Returned set doesn't contain all expected elements. Missing: [\");\n            for (EntityRef ref : workingSet) {\n                str.append(ref.toString());\n                str.append(\", \");\n            }\n            str.append(\"].\");\n            Assert.fail(str.toString());\n        }\n\n    } finally {\n        iterator.release();\n        iterator = null;\n\n        context.complete();\n        context.release();\n        context = null;\n    }\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// wildcard tag selection\n", "func_signal": "@Test\npublic void testTagNodeWildcardSelection()", "code": "{\n    HashSet<EntityRef> expected = new HashSet<EntityRef>();\n    expected.add(new EntityRef(EntityType.Node, 1));\n    expected.add(new EntityRef(EntityType.Node, 2));\n    expected.add(new EntityRef(EntityType.Node, 3));\n    execQuery(\"node[amenity=*]\", expected);\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// select by tag using multiple keys\n", "func_signal": "@Test\npublic void testTagWithMultipleKeys()", "code": "{\n    HashSet<EntityRef> expected = new HashSet<EntityRef>();\n    expected.add(new EntityRef(EntityType.Node, 1));\n    expected.add(new EntityRef(EntityType.Node, 2));\n    expected.add(new EntityRef(EntityType.Node, 5));\n    execQuery(\"node[amenity|shop=pub]\", expected);\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// internal method to setup the data being used in the tests.\n", "func_signal": "private void setupSample()", "code": "{\n    dbCtx = new DatabaseContext(loginCredentials);\n\n    // then copy in the sample data\n    PostgreSqlCopyWriter writer = new PostgreSqlCopyWriter(loginCredentials, preferences,\n            NodeLocationStoreType.InMemory);\n    Collection<EntityContainer> ents = dataSample();\n    for (EntityContainer ec : ents) {\n        writer.process(ec);\n    }\n    writer.complete();\n    writer.release();\n\n    dbCtx.release();\n    dbCtx = null;\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// node is not used in a way\n", "func_signal": "@Test\npublic void testNodeIsNotUsedInWay()", "code": "{\n    HashSet<EntityRef> expected = new HashSet<EntityRef>();\n    expected.add(new EntityRef(EntityType.Node, 4));\n    expected.add(new EntityRef(EntityType.Node, 5));\n    expected.add(new EntityRef(EntityType.Node, 6));\n    execQuery(\"node[not(way)]\", expected);\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// has way nodes\n", "func_signal": "@Test\npublic void testWayHasNodes()", "code": "{\n    HashSet<EntityRef> expected = new HashSet<EntityRef>();\n    expected.add(new EntityRef(EntityType.Way, 1));\n    // way result will also return the nodes belonging to the way...\n    expected.add(new EntityRef(EntityType.Node, 1));\n    expected.add(new EntityRef(EntityType.Node, 2));\n    expected.add(new EntityRef(EntityType.Node, 3));\n    execQuery(\"way[nd]\", expected);\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// select by tag using multiple values\n", "func_signal": "@Test\npublic void testTagWithMultipleValues()", "code": "{\n    HashSet<EntityRef> expected = new HashSet<EntityRef>();\n    expected.add(new EntityRef(EntityType.Node, 1));\n    expected.add(new EntityRef(EntityType.Node, 2));\n    expected.add(new EntityRef(EntityType.Node, 3));\n    execQuery(\"node[amenity=pub|restaurant]\", expected);\n    execQuery(\"node[amenity=pub][amenity=restaurant]\", expected);\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// anything which has no tags\n", "func_signal": "@Test\npublic void testAnyChildPredicateNotTags()", "code": "{\n    HashSet<EntityRef> expected = new HashSet<EntityRef>();\n    expected.add(new EntityRef(EntityType.Node, 4));\n    execQuery(\"*[not(tag)]\", expected);\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// relation has node member\n", "func_signal": "@Test\npublic void testRelationHasNodeMember()", "code": "{\n    HashSet<EntityRef> expected = new HashSet<EntityRef>();\n    expected.add(new EntityRef(EntityType.Relation, 1));\n    execQuery(\"relation[node]\", expected);\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// has no way nodes\n", "func_signal": "@Test\npublic void testWayHasNoNodes()", "code": "{\n    HashSet<EntityRef> expected = new HashSet<EntityRef>();\n    expected.add(new EntityRef(EntityType.Way, 2));\n    execQuery(\"way[not(nd)]\", expected);\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// utility function to build elements\n", "func_signal": "private EntityContainer node(long id, int version, double lon, double lat, String... tags)", "code": "{\n    Date timestamp = new Date();\n    LinkedList<Tag> constructedTags = new LinkedList<Tag>();\n    for (int i = 0; i < tags.length; i += 2) {\n        constructedTags.add(new Tag(tags[i], tags[i + 1]));\n    }\n    Node n = new Node(id, version, timestamp, OsmUser.NONE, 1, constructedTags, lon, lat);\n    return new NodeContainer(n);\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// select by tag using multiple keys and wildcard\n", "func_signal": "@Test\npublic void testTagWithMultipleKeysAndWildcard()", "code": "{\n    HashSet<EntityRef> expected = new HashSet<EntityRef>();\n    expected.add(new EntityRef(EntityType.Node, 1));\n    expected.add(new EntityRef(EntityType.Node, 2));\n    expected.add(new EntityRef(EntityType.Node, 3));\n    expected.add(new EntityRef(EntityType.Node, 5));\n    expected.add(new EntityRef(EntityType.Node, 6));\n    execQuery(\"node[amenity|shop=*]\", expected);\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// test tag & bbox\n", "func_signal": "@Test\npublic void testTagAndBboxNodeSelection()", "code": "{\n    HashSet<EntityRef> expected = new HashSet<EntityRef>();\n    expected.add(new EntityRef(EntityType.Node, 1));\n    execQuery(\"node[amenity=pub][bbox=-0.01,-0.01,0.01,0.01]\", expected);\n\n    expected.add(new EntityRef(EntityType.Node, 3));\n    execQuery(\"node[bbox=-0.01,-0.01,0.01,0.01][amenity=*]\", expected);\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "/**** bbox selection tests ****/\n", "func_signal": "@Test\npublic void testBboxNodeSelection()", "code": "{\n    HashSet<EntityRef> expected = new HashSet<EntityRef>();\n    expected.add(new EntityRef(EntityType.Node, 1));\n    expected.add(new EntityRef(EntityType.Node, 3));\n    expected.add(new EntityRef(EntityType.Node, 4));\n    execQuery(\"node[bbox=-0.01,-0.01,0.01,0.01]\", expected);\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// node has tags\n", "func_signal": "@Test\npublic void testNodeChildPredicateTags()", "code": "{\n    HashSet<EntityRef> expected = new HashSet<EntityRef>();\n    expected.add(new EntityRef(EntityType.Node, 1));\n    expected.add(new EntityRef(EntityType.Node, 2));\n    expected.add(new EntityRef(EntityType.Node, 3));\n    expected.add(new EntityRef(EntityType.Node, 5));\n    expected.add(new EntityRef(EntityType.Node, 6));\n    execQuery(\"node[tag]\", expected);\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// node has no tags\n", "func_signal": "@Test\npublic void testNodeChildPredicateNotTags()", "code": "{\n    HashSet<EntityRef> expected = new HashSet<EntityRef>();\n    expected.add(new EntityRef(EntityType.Node, 4));\n    execQuery(\"node[not(tag)]\", expected);\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// node is used in a way\n", "func_signal": "@Test\npublic void testNodeIsUsedInWay()", "code": "{\n    HashSet<EntityRef> expected = new HashSet<EntityRef>();\n    expected.add(new EntityRef(EntityType.Node, 1));\n    expected.add(new EntityRef(EntityType.Node, 2));\n    expected.add(new EntityRef(EntityType.Node, 3));\n    execQuery(\"node[way]\", expected);\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// wildcard tag selection on any type\n", "func_signal": "@Test\npublic void testTagAnyWildcardSelection()", "code": "{\n    HashSet<EntityRef> expected = new HashSet<EntityRef>();\n    expected.add(new EntityRef(EntityType.Node, 1));\n    expected.add(new EntityRef(EntityType.Node, 2));\n    expected.add(new EntityRef(EntityType.Node, 3));\n    execQuery(\"*[amenity=*]\", expected);\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "// internal function to drop all data to the database (ensure that the tests\n// are run on the same\n// data each time.)\n", "func_signal": "private void truncate()", "code": "{\n    dbCtx = new DatabaseContext(loginCredentials);\n\n    // make sure that the table is empty first\n    PostgreSqlTruncator truncator = new PostgreSqlTruncator(loginCredentials, preferences);\n    truncator.run();\n\n    // the truncator will release the database context anyway...\n    dbCtx = null;\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "/**\n * @return The data to be used to fill the database for the tests.\n */\n", "func_signal": "private Collection<EntityContainer> dataSample()", "code": "{\n    LinkedList<EntityContainer> list = new LinkedList<EntityContainer>();\n\n    list.add(node(1, 1, 0.0, 0.0, \"amenity\", \"pub\"));\n    list.add(node(2, 1, 1.0, 1.0, \"amenity\", \"pub\"));\n    list.add(node(3, 1, 0.0, 0.0, \"amenity\", \"restaurant\"));\n    list.add(node(4, 1, 0.0, 0.0));\n    list.add(node(5, 1, 2.0, 2.0, \"shop\", \"pub\"));\n    list.add(node(6, 1, 2.0, 2.0, \"shop\", \"supermarket\"));\n\n    long way1_nodes[] = { 1, 2, 3 };\n    long way2_nodes[] = {};\n    list.add(way(1, 1, way1_nodes, \"highway\", \"residential\"));\n    list.add(way(2, 1, way2_nodes, \"highway\", \"residential\"));\n\n    RelationMember rel1_members[] = { new RelationMember(1, EntityType.Node, \"foo\"),\n            new RelationMember(1, EntityType.Way, \"bar\") };\n    list.add(relation(1, 1, rel1_members, \"type\", \"route\"));\n\n    return list;\n}", "path": "src\\test\\java\\com\\yellowbkpk\\geo\\xapi\\servlet\\XapiServletTest.java", "repo_name": "iandees/xapi-servlet", "stars": 27, "license": "None", "language": "java", "size": 369}
{"docstring": "/**\n * Sets the value stored in this Map Entry.\n * <p/>\n * This Map Entry is not connected to a Map, so only the local data is changed.\n *\n * @param value the new value\n * @return the previous value\n */\n", "func_signal": "public V setValue(V value)", "code": "{\n    V answer = this.value;\n    this.value = value;\n    return answer;\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\Cache.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * Adds a node to the beginning of the list.\n *\n * @param node the node to add to the beginning of the list.\n * @return the node\n */\n", "func_signal": "public LinkedListNode addFirst(LinkedListNode node)", "code": "{\n    node.next = head.next;\n    node.previous = head;\n    node.previous.next = node;\n    node.next.previous = node;\n    return node;\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\Cache.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * \u83b7\u53d6\u4e00\u4e2a\u5faa\u73af\u4f53\u6e90\u5bf9\u8c61\u5305\u542b\u7684\u5bf9\u8c61\u6570\u7ec4, \u5982\u679c\u6e90\u5bf9\u8c61\u662fMap, \u5c06\u53d6\u56de\u5173\u952e\u5b57\u5bf9\u5e94\u7684\u6570\u7ec4,\n * \u5982\u679c\u65e0\u6cd5\u5c06\u6e90\u5bf9\u8c61\u8f6c\u6362\u6210\u7b49\u4ef7\u7684\u5bf9\u8c61\u6570\u7ec4, \u6e90\u5bf9\u8c61\u5c06\u76f4\u63a5\u88ab\u8fd4\u56de\n * \n * @param o\n *          \u9700\u8981\u5faa\u73af\u7684\u6e90\u5bf9\u8c61\n * @return \u6e90\u5bf9\u8c61\u6570\u7ec4\n */\n", "func_signal": "public static Object[] getLooper(Object o)", "code": "{\n  if (o instanceof List) {\n    return ((List<?>) o).toArray();\n  } else if (o instanceof Object[]) {\n    return (Object[]) o;\n  } else if (o instanceof Map) {\n    return ((Map<?, ?>) o).entrySet().toArray();\n  } else {\n    return new Object[] { o };\n  }\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\statement\\function\\$foreach.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * Removes this node from the linked list that it is a part of.\n */\n", "func_signal": "public void remove()", "code": "{\n    previous.next = next;\n    next.previous = previous;\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\Cache.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * Removes the least recently used elements if the cache size is greater than\n * or equal to the maximum allowed size until the cache is at least 10% empty.\n */\n", "func_signal": "protected synchronized void cullCache()", "code": "{\n    // Check if a max cache size is defined.\n    if (maxCacheSize < 0) {\n        return;\n    }\n    // See if the cache is too big. If so, clean out cache until it's 10% free.\n    if (map.size() > maxCacheSize) {\n        // First, delete any old entries to see how much memory that frees.\n        deleteExpiredEntries();\n        // Next, delete the least recently used elements until 10% of the cache\n        // has been freed.\n        int desiredSize = (int) (maxCacheSize * .90);\n        for (int i = map.size(); i > desiredSize; i--) {\n            // Get the key and invoke the remove method on it.\n            if (remove(lastAccessedList.getLast().object, true) == null) {\n                System.err.println(\"Error attempting to cullCache with remove(\"\n                        + lastAccessedList.getLast().object\n                        .toString()\n                        + \") - \"\n                        + \"cacheObject not found in cache!\");\n                lastAccessedList.getLast().remove();\n            }\n        }\n    }\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\Cache.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * \u83b7\u53d6\u4e8c\u8fdb\u5236\u8f93\u51fa\u6d41\u3002\n * \n * @return \u4e0e\u5f53\u524d\u6587\u672c\u8f93\u51fa\u5bf9\u8c61\u5173\u8054\u7684\u4e8c\u8fdb\u5236\u8f93\u51fa\u6d41\n * @throws IOException\n *           \u5237\u65b0\u4e4b\u524d\u63d0\u4ea4\u7684\u4fe1\u606f\u65f6\u4ea7\u751fIO\u9519\u8bef\n */\n", "func_signal": "public OutputStream getOutputStream() throws IOException", "code": "{\n  flush();\n  return out;\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\TemplateWriter.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * Gets a debugging String view of the pair.\n *\n * @return a String view of the entry\n */\n", "func_signal": "public String toString()", "code": "{\n    return new StringBuilder().append(getKey()).append('=').append(\n            getValue()).toString();\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\Cache.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * \u83b7\u53d6\u4e00\u4e2a\u5faa\u73af\u4f53\u6e90\u5bf9\u8c61\u5305\u542b\u7684\u5bf9\u8c61\u6570\u7ec4, \u5982\u679c\u6e90\u5bf9\u8c61\u662fMap, \u5c06\u53d6\u56de\u5173\u952e\u5b57\u5bf9\u5e94\u7684\u6570\u7ec4,\n * \u5982\u679c\u65e0\u6cd5\u5c06\u6e90\u5bf9\u8c61\u8f6c\u6362\u6210\u7b49\u4ef7\u7684\u5bf9\u8c61\u6570\u7ec4, \u6e90\u5bf9\u8c61\u5c06\u76f4\u63a5\u88ab\u8fd4\u56de\n * \n * @param o\n *          \u9700\u8981\u5faa\u73af\u7684\u6e90\u5bf9\u8c61\n * @param start\n *          \u6570\u7ec4\u5f00\u59cb\u4f4d\u7f6e\n * @param step\n *          \u5faa\u73af\u6b65\u957f\n * @param max\n *          \u6700\u591a\u7684\u5faa\u73af\u6b21\u6570, \u5982\u679c\u4e3a0\u8868\u793a\u8981\u5faa\u73af\u6240\u6709\u7684\u503c\n * @return \u6e90\u5bf9\u8c61\u6570\u7ec4\n */\n", "func_signal": "public static Object[] getLooper(Object o, int start, int step, int max)", "code": "{\n  Object[] list;\n  if (o instanceof List) {\n    list = ((List<?>) o).toArray();\n  } else if (o instanceof Object[]) {\n    list = (Object[]) o;\n  } else if (o instanceof Map) {\n    list = ((Map<?, ?>) o).values().toArray();\n  } else {\n    list = new Object[] { o };\n  }\n  int size = list.length - 1;\n  if (start > size) {\n    start = size;\n  }\n  size = step > 0 ? (size - start) / step + 1 : start / -step + 1;\n  if (max > 0 && max < size) {\n    size = max;\n  }\n  Object[] result = new Object[size];\n  for (int i = 0; i < size; i++) {\n    result[i] = list[start];\n    start += step;\n  }\n  return result;\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\statement\\function\\$section.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * Returns a String representation of the linked list with a comma\n * delimited list of all the elements in the list.\n *\n * @return a String representation of the LinkedList.\n */\n", "func_signal": "public String toString()", "code": "{\n    LinkedListNode node = head.next;\n    StringBuilder buf = new StringBuilder();\n    while (node != head) {\n        buf.append(node.toString()).append(\", \");\n        node = node.next;\n    }\n    return buf.toString();\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\Cache.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * Returns the last linked list node in the list.\n *\n * @return the last element of the list.\n */\n", "func_signal": "public LinkedListNode getLast()", "code": "{\n    LinkedListNode node = head.previous;\n    if (node == head) {\n        return null;\n    }\n    return node;\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\Cache.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * Adds an object to the beginning of the list by automatically creating a\n * a new node and adding it to the beginning of the list.\n *\n * @param object the object to add to the beginning of the list.\n * @return the node created to wrap the object.\n */\n", "func_signal": "public LinkedListNode addFirst(Object object)", "code": "{\n    LinkedListNode node = new LinkedListNode(object, head.next,\n            head);\n    node.previous.next = node;\n    node.next.previous = node;\n    return node;\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\Cache.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * Constructs a new linked list node.\n *\n * @param object   the Object that the node represents.\n * @param next     a reference to the next LinkedListNode in the list.\n * @param previous a reference to the previous LinkedListNode in the list.\n */\n", "func_signal": "public LinkedListNode(Object object, LinkedListNode next,\n                      LinkedListNode previous)", "code": "{\n    this.object = object;\n    this.next = next;\n    this.previous = previous;\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\Cache.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/*\n* Remove operation with a flag so we can tell coherence if the remove was\n* caused by cache internal processing such as eviction or loading\n*/\n", "func_signal": "public synchronized V remove(Object key, boolean internal)", "code": "{\n    //noinspection SuspiciousMethodCalls\n    CacheObject<V> cacheObject = map.remove(key);\n    // If the object is not in cache, stop trying to remove it.\n    if (cacheObject == null) {\n        return null;\n    }\n    // Remove from the cache order list\n    cacheObject.lastAccessedListNode.remove();\n    cacheObject.ageListNode.remove();\n    // Remove references to linked list nodes\n    cacheObject.ageListNode = null;\n    cacheObject.lastAccessedListNode = null;\n\n    return cacheObject.object;\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\Cache.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * Adds an object to the end of the list by automatically creating a\n * a new node and adding it to the end of the list.\n *\n * @param object the object to add to the end of the list.\n * @return the node created to wrap the object.\n */\n", "func_signal": "public LinkedListNode addLast(Object object)", "code": "{\n    LinkedListNode node = new LinkedListNode(object, head,\n            head.previous);\n    node.previous.next = node;\n    node.next.previous = node;\n    return node;\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\Cache.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * \u521b\u5efa\u4e8c\u5143\u6574\u6570\u64cd\u4f5c\u8868\u8fbe\u5f0f\u8282\u70b9\n * \n * @param exp1\n *          \u8868\u8fbe\u5f0f1\n * @param exp2\n *          \u8868\u8fbe\u5f0f2\n */\n", "func_signal": "public BinaryDouble(IExpression exp1, IExpression exp2)", "code": "{\n  this.exp1 = exp1 instanceof DoubleExpression ? (DoubleExpression) exp1\n      : new TranslateDouble(exp1);\n  this.exp2 = exp2 instanceof DoubleExpression ? (DoubleExpression) exp2\n      : new TranslateDouble(exp2);\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\expression\\number\\BinaryDouble.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * Compares this Map Entry with another Map Entry.\n * <p/>\n * Implemented per API documentation of {@link java.util.Map.Entry#equals(Object)}\n *\n * @param obj the object to compare to\n * @return true if equal key and value\n */\n", "func_signal": "public boolean equals(Object obj)", "code": "{\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof Entry)) {\n        return false;\n    }\n    Map.Entry other = (Map.Entry) obj;\n    return (getKey() == null ? other.getKey() == null : getKey()\n            .equals(other.getKey()))\n            && (getValue() == null ? other.getValue() == null\n            : getValue().equals(other.getValue()));\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\Cache.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * Erases all elements in the list and re-initializes it.\n */\n", "func_signal": "public void clear()", "code": "{\n    //Remove all references in the list.\n    LinkedListNode node = getLast();\n    while (node != null) {\n        node.remove();\n        node = getLast();\n    }\n\n    //Re-initialize.\n    head.next = head.previous = head;\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\Cache.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * Clears all entries out of cache where the entries are older than the\n * maximum defined age.\n */\n", "func_signal": "protected synchronized void deleteExpiredEntries()", "code": "{\n    // Check if expiration is turned on.\n    if (maxLifetime <= 0) {\n        return;\n    }\n\n    // Remove all old entries. To do this, we remove objects from the end\n    // of the linked list until they are no longer too old. We get to avoid\n    // any hash lookups or looking at any more objects than is strictly\n    // neccessary.\n    LinkedListNode node = ageList.getLast();\n    // If there are no entries in the age list, return.\n    if (node == null) {\n        return;\n    }\n\n    // Determine the expireTime, which is the moment in time that elements\n    // should expire from cache. Then, we can do an easy check to see\n    // if the expire time is greater than the expire time.\n    long expireTime = System.currentTimeMillis() - maxLifetime;\n\n    while (expireTime > node.timestamp) {\n        if (remove(node.object, true) == null) {\n            System.err.println(\"Error attempting to remove(\"\n                    + node.object.toString()\n                    + \") - cacheObject not found in cache!\");\n            // remove from the ageList\n            node.remove();\n        }\n\n        // Get the next node.\n        node = ageList.getLast();\n        // If there are no more entries in the age list, return.\n        if (node == null) {\n            return;\n        }\n    }\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\Cache.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * \u521b\u5efa\u4e8c\u8fdb\u5236/\u6587\u672c\u8f6c\u6362\u8f93\u51fa\u6d41\u5bf9\u8c61\u3002\n * \n * @param out\n *          \u4e8c\u8fdb\u5236\u8f93\u51fa\u6d41\n * @param encoding\n *          \u7f16\u7801\u96c6\n * @throws IOException\n *           \u6784\u9020\u5bf9\u8c61\u65f6\u4ea7\u751fIO\u9519\u8bef\n */\n", "func_signal": "public TemplateWriter(OutputStream out, String encoding) throws IOException", "code": "{\n  super(new OutputStreamWriter(out, encoding));\n  this.out = out;\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\TemplateWriter.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * Constructs a new pair with the specified key and given value.\n *\n * @param key   the key for the entry, may be null\n * @param value the value for the entry, may be null\n */\n", "func_signal": "protected AbstractKeyValue(K key, V value)", "code": "{\n    super();\n    this.key = key;\n    this.value = value;\n}", "path": "src\\main\\java\\org\\lilystudio\\smarty4j\\Cache.java", "repo_name": "linux-china/smarty4j", "stars": 23, "license": "None", "language": "java", "size": 305}
{"docstring": "/**\n * Updates a scheduling pattern in the collector.\n * \n * @param id\n *            The ID of the scheduled couple.\n */\n", "func_signal": "public synchronized void update(String id, SchedulingPattern pattern)", "code": "{\n\tint index = ids.indexOf(id);\n\tif (index > -1) {\n\t\tpatterns.set(index, pattern);\n\t}\n}", "path": "src\\it\\sauronsoftware\\cron4j\\MemoryTaskCollector.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * It waits until the given task executor is dead. It is similar to\n * {@link TaskExecutor#join()}, but this one avoids\n * {@link InterruptedException} instances.\n * \n * @param executor\n *            The task executor.\n */\n", "func_signal": "private void tillExecutorDies(TaskExecutor executor)", "code": "{\n\tboolean dead = false;\n\tdo {\n\t\ttry {\n\t\t\texecutor.join();\n\t\t\tdead = true;\n\t\t} catch (InterruptedException e) {\n\t\t\t;\n\t\t}\n\t} while (!dead);\n}", "path": "src\\it\\sauronsoftware\\cron4j\\Scheduler.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * Removes a previously registered custom {@link TaskCollector} instance.\n * \n * @param collector\n *            The custom {@link TaskCollector} instance.\n */\n", "func_signal": "public void removeTaskCollector(TaskCollector collector)", "code": "{\n\tsynchronized (collectors) {\n\t\tcollectors.remove(collector);\n\t}\n}", "path": "src\\it\\sauronsoftware\\cron4j\\Scheduler.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * Returns an array containing any currently executing task, in the form of\n * {@link TaskExecutor} objects. Each running task is executed by a\n * different thread. A {@link TaskExecutor} object allows the control of the\n * running task. The inner {@link Task} representation could be retrieved,\n * the status of the task could be detected and the thread could be\n * interrupted using any standard {@link Thread} method (\n * {@link Thread#interrupt()}, {@link Thread#isAlive() etc}.\n * \n * @return An array containing any currently executing task, in the form of\n *         {@link TaskExecutor} objects.\n */\n", "func_signal": "public TaskExecutor[] getExecutingTasks()", "code": "{\n\tsynchronized (executors) {\n\t\tint size = executors.size();\n\t\tTaskExecutor[] ret = new TaskExecutor[size];\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tret[i] = (TaskExecutor) executors.get(i);\n\t\t}\n\t\treturn ret;\n\t}\n}", "path": "src\\it\\sauronsoftware\\cron4j\\Scheduler.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * Executes immediately a task, without scheduling it.\n * \n * @param task\n *            The task.\n * @return The {@link TaskExecutor} executing the given task.\n * @throws IllegalStateException\n *             If the scheduler is not started.\n */\n", "func_signal": "public TaskExecutor launch(Task task)", "code": "{\n\tsynchronized (lock) {\n\t\tif (!started) {\n\t\t\tthrow new IllegalStateException(\"Scheduler not started\");\n\t\t}\n\t\treturn spawnExecutor(task);\n\t}\n}", "path": "src\\it\\sauronsoftware\\cron4j\\Scheduler.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * It waits until the given thread is dead. It is similar to\n * {@link Thread#join()}, but this one avoids {@link InterruptedException}\n * instances.\n * \n * @param thread\n *            The thread.\n */\n", "func_signal": "private void tillThreadDies(Thread thread)", "code": "{\n\tboolean dead = false;\n\tdo {\n\t\ttry {\n\t\t\tthread.join();\n\t\t\tdead = true;\n\t\t} catch (InterruptedException e) {\n\t\t\t;\n\t\t}\n\t} while (!dead);\n}", "path": "src\\it\\sauronsoftware\\cron4j\\Scheduler.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * This method retrieves the Runnable object of a previously scheduled task.\n * \n * @param id\n *            The task ID.\n * @return The Runnable object of the task, or null if the task was not\n *         found.\n * @deprecated Use {@link Scheduler#getTask(String)}.\n */\n", "func_signal": "public Runnable getTaskRunnable(Object id)", "code": "{\n\tTask task = getTask((String) id);\n\tif (task instanceof RunnableTask) {\n\t\tRunnableTask rt = (RunnableTask) task;\n\t\treturn rt.getRunnable();\n\t} else {\n\t\treturn null;\n\t}\n}", "path": "src\\it\\sauronsoftware\\cron4j\\Scheduler.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * Adds a pattern and a task to the collector.\n * \n * @param pattern\n *            The scheduling pattern.\n * @param task\n *            The task.\n * @return An ID for the scheduled operation.\n */\n", "func_signal": "public synchronized String add(SchedulingPattern pattern, Task task)", "code": "{\n\tString id = GUIDGenerator.generate();\n\tpatterns.add(pattern);\n\ttasks.add(task);\n\tids.add(id);\n\treturn id;\n}", "path": "src\\it\\sauronsoftware\\cron4j\\MemoryTaskCollector.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * Implements {@link TaskCollector#getTasks()}.\n */\n", "func_signal": "public synchronized TaskTable getTasks()", "code": "{\n\tTaskTable ret = new TaskTable();\n\tint size = tasks.size();\n\tfor (int i = 0; i < size; i++) {\n\t\tTask t = (Task) tasks.get(i);\n\t\tSchedulingPattern p = (SchedulingPattern) patterns.get(i);\n\t\tret.add(p, t);\n\t}\n\treturn ret;\n}", "path": "src\\it\\sauronsoftware\\cron4j\\MemoryTaskCollector.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * Adds a {@link SchedulerListener} to the scheduler. A\n * {@link SchedulerListener} is notified every time a task is launching, has\n * succeeded or has failed.\n * \n * @param listener\n *            The listener.\n */\n", "func_signal": "public void addSchedulerListener(SchedulerListener listener)", "code": "{\n\tsynchronized (listeners) {\n\t\tlisteners.add(listener);\n\t}\n}", "path": "src\\it\\sauronsoftware\\cron4j\\Scheduler.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * Removes a {@link SchedulerListener} previously registered with the\n * {@link Scheduler#addSchedulerListener(SchedulerListener)} method.\n * \n * @param listener\n *            The listener.\n */\n", "func_signal": "public void removeSchedulerListener(SchedulerListener listener)", "code": "{\n\tsynchronized (listeners) {\n\t\tlisteners.remove(listener);\n\t}\n}", "path": "src\\it\\sauronsoftware\\cron4j\\Scheduler.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * Retrieves a task from the collector.\n * \n * @param id\n *            The ID of the scheduled couple.\n * @return The task with the specified assigned ID, or null if it doesn't\n *         exist.\n */\n", "func_signal": "public synchronized Task getTask(String id)", "code": "{\n\tint index = ids.indexOf(id);\n\tif (index > -1) {\n\t\treturn (Task) tasks.get(index);\n\t} else {\n\t\treturn null;\n\t}\n}", "path": "src\\it\\sauronsoftware\\cron4j\\MemoryTaskCollector.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * Tests if this scheduler is started.\n * \n * @return true if the scheduler is started, false if it is stopped.\n */\n", "func_signal": "public boolean isStarted()", "code": "{\n\tsynchronized (lock) {\n\t\treturn started;\n\t}\n}", "path": "src\\it\\sauronsoftware\\cron4j\\Scheduler.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * This method starts the scheduler. When the scheduled is started the\n * supplied tasks are executed at the given moment.\n * \n * @throws IllegalStateException\n *             Thrown if this scheduler is already started.\n */\n", "func_signal": "public void start() throws IllegalStateException", "code": "{\n\tsynchronized (lock) {\n\t\tif (started) {\n\t\t\tthrow new IllegalStateException(\"Scheduler already started\");\n\t\t}\n\t\t// Initializes required lists.\n\t\tlaunchers = new ArrayList();\n\t\texecutors = new ArrayList();\n\t\t// Starts the timer thread.\n\t\ttimer = new TimerThread(this);\n\t\ttimer.setDaemon(daemon);\n\t\ttimer.start();\n\t\t// Change the state of the scheduler.\n\t\tstarted = true;\n\t}\n}", "path": "src\\it\\sauronsoftware\\cron4j\\Scheduler.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * Adds a custom {@link TaskCollector} instance to the scheduler. The\n * supplied object, once added to the scheduler, will be query every minute\n * for its task list. The scheduler will execute any of the returned tasks\n * whose scheduling pattern matches the current system time.\n * \n * @param collector\n *            The custom {@link TaskCollector} instance.\n */\n", "func_signal": "public void addTaskCollector(TaskCollector collector)", "code": "{\n\tsynchronized (collectors) {\n\t\tcollectors.add(collector);\n\t}\n}", "path": "src\\it\\sauronsoftware\\cron4j\\Scheduler.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * Marks this scheduler daemon flag. When a scheduler is marked as a daemon\n * scheduler it spawns only daemon threads. The Java Virtual Machine exits\n * when the only threads running are all daemon threads.\n * \n * This method must be called before the scheduler is started.\n * \n * @param on\n *            If true, the scheduler will spawn only daemon threads.\n * @throws IllegalStateException\n *             If the scheduler is started.\n */\n", "func_signal": "public void setDaemon(boolean on) throws IllegalStateException", "code": "{\n\tsynchronized (lock) {\n\t\tif (started) {\n\t\t\tthrow new IllegalStateException(\"Scheduler already started\");\n\t\t}\n\t\tthis.daemon = on;\n\t}\n}", "path": "src\\it\\sauronsoftware\\cron4j\\Scheduler.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * Removes a task and its scheduling pattern from the collector.\n * \n * @param id\n *            The ID of the scheduled couple.\n */\n", "func_signal": "public synchronized void remove(String id) throws IndexOutOfBoundsException", "code": "{\n\tint index = ids.indexOf(id);\n\tif (index > -1) {\n\t\ttasks.remove(index);\n\t\tpatterns.remove(index);\n\t\tids.remove(index);\n\t}\n}", "path": "src\\it\\sauronsoftware\\cron4j\\MemoryTaskCollector.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * It builds and prepares a brand new Scheduler instance.\n */\n", "func_signal": "public Scheduler()", "code": "{\n\tcollectors.add(memoryTaskCollector);\n\tcollectors.add(fileTaskCollector);\n}", "path": "src\\it\\sauronsoftware\\cron4j\\Scheduler.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * Returns an array containing any {@link SchedulerListener} previously\n * registered with the\n * {@link Scheduler#addSchedulerListener(SchedulerListener)} method.\n * \n * @return An array containing any {@link SchedulerListener} previously\n *         registered with the\n *         {@link Scheduler#addSchedulerListener(SchedulerListener)} method.\n */\n", "func_signal": "public SchedulerListener[] getSchedulerListeners()", "code": "{\n\tsynchronized (listeners) {\n\t\tint size = listeners.size();\n\t\tSchedulerListener[] ret = new SchedulerListener[size];\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tret[i] = (SchedulerListener) listeners.get(i);\n\t\t}\n\t\treturn ret;\n\t}\n}", "path": "src\\it\\sauronsoftware\\cron4j\\Scheduler.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * This method stops the scheduler execution. Before returning, it waits the\n * end of all the running tasks previously launched. Once the scheduler has\n * been stopped it can be started again with a start() call.\n * \n * @throws IllegalStateException\n *             Thrown if this scheduler is not started.\n */\n", "func_signal": "public void stop() throws IllegalStateException", "code": "{\n\tsynchronized (lock) {\n\t\tif (!started) {\n\t\t\tthrow new IllegalStateException(\"Scheduler not started\");\n\t\t}\n\t\t// Interrupts the timer and waits for its death.\n\t\ttimer.interrupt();\n\t\ttillThreadDies(timer);\n\t\ttimer = null;\n\t\t// Interrupts any running launcher and waits for its death.\n\t\tfor (;;) {\n\t\t\tLauncherThread launcher = null;\n\t\t\tsynchronized (launchers) {\n\t\t\t\tif (launchers.size() == 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlauncher = (LauncherThread) launchers.remove(0);\n\t\t\t}\n\t\t\tlauncher.interrupt();\n\t\t\ttillThreadDies(launcher);\n\t\t}\n\t\tlaunchers = null;\n\t\t// Interrupts any running executor and waits for its death.\n\t\t// Before exiting wait for all the active tasks end.\n\t\tfor (;;) {\n\t\t\tTaskExecutor executor = null;\n\t\t\tsynchronized (executors) {\n\t\t\t\tif (executors.size() == 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\texecutor = (TaskExecutor) executors.remove(0);\n\t\t\t}\n\t\t\tif (executor.canBeStopped()) {\n\t\t\t\texecutor.stop();\n\t\t\t}\n\t\t\ttillExecutorDies(executor);\n\t\t}\n\t\texecutors = null;\n\t\t// Change the state of the object.\n\t\tstarted = false;\n\t}\n}", "path": "src\\it\\sauronsoftware\\cron4j\\Scheduler.java", "repo_name": "Takuto88/cron4j", "stars": 18, "license": "lgpl-2.1", "language": "java", "size": 192}
{"docstring": "/**\n * Sets the location of the status update in latitude and longitude. Latitude values must be between -90.0 (south) and +90.0\n * (north). Longitude values must be between -180.0 (west) and +180.0 (east).\n * \n * For example, latitude=51.502 and longitude=-0.126 are the coordinates for Westminster, London.\n * \n * @param latitude The latitude element of the location. Must be between -90.0 and +90.0, where positive values are north\n *        and negative values are south.\n * @param longitude The longitude element of the location. Must be between -180.0 and +180.0, where positive values are east\n *        and negative values are west.\n * @return The {@link StatusDetails} object\n */\n", "func_signal": "public StatusDetails setLocation(float latitude, float longitude)", "code": "{\n    this.latitude = latitude;\n    this.longitude = longitude;\n    return this;\n}", "path": "services\\twitter\\src\\main\\java\\org\\jboss\\seam\\social\\twitter\\model\\StatusDetails.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/**\n * Decodes a application/x-www-form-urlencoded string\n * \n * @param string form-urlencoded string\n * @return plain string\n */\n", "func_signal": "public static String formURLDecode(String string)", "code": "{\n    try {\n        return URLDecoder.decode(string, UTF_8);\n    } catch (UnsupportedEncodingException uee) {\n        throw new IllegalStateException(ERROR_MSG, uee);\n    }\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\social\\utils\\URLUtils.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/**\n * Sets the ID of an existing status that this status is in reply to. Will be ignored unless the text of this status\n * includes the author of the existing status (e.g., \"@author\").\n * \n * @param inReplyToStatusId the ID of an existing status that this status is in reply to.\n * @return the {@link StatusDetails} object\n */\n", "func_signal": "public StatusDetails setInReplyToStatusId(long inReplyToStatusId)", "code": "{\n    this.inReplyToStatusId = inReplyToStatusId;\n    return this;\n}", "path": "services\\twitter\\src\\main\\java\\org\\jboss\\seam\\social\\twitter\\model\\StatusDetails.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/**\n * @param pojo\n * @return\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprivate static Multimap<String, Object> pojoToMultiMap(Object pojo)", "code": "{\n    Map<String, ? extends Object> pojoMap = new BeanMap(pojo);\n    Multimap<String, Object> res = HashMultimap.create();\n    for (String key : pojoMap.keySet()) {\n        if (!\"class\".equals(key)) {\n            Object value = pojoMap.get(key);\n            if (value instanceof Map)\n                throw new IllegalArgumentException(\"Cannot convert Pojo containing a Map to a Multimap\");\n            if (value instanceof Collection) {\n                for (Object elt : (Collection<Object>) value) {\n                    res.put(key, elt);\n                }\n            } else\n                res.put(key, value);\n        }\n    }\n    return res;\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\social\\utils\\URLUtils.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/**\n * Append given parameters to the query string of the url\n * \n * @param url the url to append parameters to\n * @param parameters any map\n * @return new url with parameters on query string\n */\n", "func_signal": "public static String buildUri(String url, Map<String, ? extends Object> parameters)", "code": "{\n    String queryString = URLUtils.formURLEncodeMap(parameters);\n    if (queryString.equals(EMPTY_STRING)) {\n        return url;\n    } else {\n        url += url.indexOf(QUERY_STRING_SEPARATOR) != -1 ? PARAM_SEPARATOR : QUERY_STRING_SEPARATOR;\n        url += queryString;\n        return url;\n    }\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\social\\utils\\URLUtils.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/**\n * \n * @param user User to retrieve updates for (Set to null to retrieve for current user)\n * @param self Show updates by self (Set to false to retrieve connections updates)\n * @param recordStart First update to retrieve (Use with recordCount to iterate through updates)\n * @param recordCount Number of updates to retrieve (Use with recordCount to interate through updates)\n * @param recordsBefore Retrieve records before this Date (Set to null to not use)\n * @param recordsAfter Retrieve records after this Date (Set to null to not use)\n * @param updateAll Shortcut for All UpdateTypes (overrides updateTypes if set)\n * @param showHidden Show updates that user has set to hidden\n * @param updateTypes List of Update Types to retrieve\n */\n", "func_signal": "public NetworkUpdateParameters(String user, boolean self, int recordStart, int recordCount, Date recordsBefore,\n        Date recordsAfter, boolean updateAll, boolean showHidden, UpdateTypeInput... updateTypes)", "code": "{\n    this(user, self, recordStart, recordCount, recordsBefore, recordsAfter, updateAll, showHidden, Arrays\n            .asList(updateTypes));\n}", "path": "services\\linkedin\\src\\main\\java\\org\\jboss\\seam\\social\\linkedin\\model\\NetworkUpdateParameters.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.jboss.seam.social.rest.RestRequest#addBodyParameters(java.util.Map)\n */\n", "func_signal": "@Override\npublic void addBodyParameters(Map<String, ? extends Object> toAdd)", "code": "{\n    for (String key : toAdd.keySet()) {\n        addBodyParameter(key, toAdd.get(key).toString());\n\n    }\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\social\\scribe\\OAuthRequestScribe.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/**\n * @param parameters\n * @return\n */\n", "func_signal": "private static String doFormUrlEncode(Multimap<String, Object> parameters)", "code": "{\n    Multimap<String, String> urlEncodeMap = Multimaps.transformValues(parameters, new formUrlEncodeFunc());\n    return queryMapJoiner.join(urlEncodeMap.entries());\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\social\\utils\\URLUtils.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/**\n * Translates a string into application/x-www-form-urlencoded format\n * \n * @param plain\n * @return form-urlencoded string\n */\n", "func_signal": "public static String formURLEncode(String string)", "code": "{\n    try {\n        return URLEncoder.encode(string, UTF_8);\n    } catch (UnsupportedEncodingException uee) {\n        throw new IllegalStateException(ERROR_MSG, uee);\n    }\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\social\\utils\\URLUtils.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/**\n * Parses and form-urldecodes a querystring-like string into a map\n * \n * @param queryString querystring-like String\n * @return a map with the form-urldecoded parameters\n */\n// TODO Move to MapUtils\n", "func_signal": "public static Map<String, String> queryStringToMap(String queryString)", "code": "{\n    Map<String, String> result = new HashMap<String, String>();\n    if (queryString != null && queryString.length() > 0) {\n        for (String param : queryString.split(PARAM_SEPARATOR)) {\n            String pair[] = param.split(PAIR_SEPARATOR);\n            String key = formURLDecode(pair[0]);\n            String value = pair.length > 1 ? formURLDecode(pair[1]) : EMPTY_STRING;\n            result.put(key, value);\n        }\n    }\n    return result;\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\social\\utils\\URLUtils.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.jboss.seam.social.JsonMapper#requestObject(org.jboss.seam.social.rest.RestResponse, java.lang.Class)\n */\n", "func_signal": "@Override\npublic <T> T mapToObject(RestResponse resp, Class<T> clazz)", "code": "{\n    try {\n        String msg = resp.getBody();\n        if (resp.getCode() != 200) {\n            throw new SeamSocialRestException(resp.getCode(), resp.getUrl(), msg);\n        }\n        return objectMapper.readValue(msg, clazz);\n    } catch (IOException e) {\n        throw new SeamSocialException(\"Unable to map Json response\", e);\n    }\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\social\\JsonMapperJackson.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/**\n * This methods looks for place holders with the format {placeholder} in a given String and replace it with the value\n * associated to the corresponding key in a given map\n * \n * @param in\n * @param values\n * @return\n */\n", "func_signal": "public static String processPlaceHolders(String in, Map<String, ? extends Object> values)", "code": "{\n    String out = new String(in);\n\n    for (String key : values.keySet()) {\n        String toLook = \"{\" + key + \"}\";\n        String value = values.get(key).toString();\n        try {\n            out.replace(toLook, URLEncoder.encode(value, \"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {\n            throw new SeamSocialException(\"unable to encode \" + value, e);\n        }\n\n    }\n    return out;\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\social\\utils\\URLUtils.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/**\n * \n * @param user User to retrieve updates for (Set to null to retrieve for current user)\n * @param self Show updates by self (Set to false to retrieve connections updates)\n * @param recordStart First update to retrieve (Use with recordCount to iterate through updates)\n * @param recordCount Number of updates to retrieve (Use with recordCount to interate through updates)\n * @param recordsBefore Retrieve records before this Date (Set to null to not use)\n * @param recordsAfter Retrieve records after this Date (Set to null to not use)\n * @param updateAll Shortcut for All UpdateTypes (overrides updateTypes if set)\n * @param showHidden Show updates that user has set to hidden\n * @param updateTypes List of Update Types to retrieve\n */\n", "func_signal": "public NetworkUpdateParameters(String user, boolean self, int recordStart, int recordCount, Date recordsBefore,\n        Date recordsAfter, boolean updateAll, boolean showHidden, List<UpdateTypeInput> updateTypes)", "code": "{\n    this.user = user;\n    this.self = self;\n    this.recordStart = recordStart;\n    this.recordCount = recordCount;\n    this.recordsBefore = recordsBefore;\n    this.recordsAfter = recordsAfter;\n    this.updateTypes = updateTypes;\n    this.updateAll = updateAll;\n    this.showHidden = showHidden;\n}", "path": "services\\linkedin\\src\\main\\java\\org\\jboss\\seam\\social\\linkedin\\model\\NetworkUpdateParameters.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/**\n * Maps the {@link StatusDetails} values to a Map of Twitter parameters.\n * \n * @return A {@link Map} of parameters to be passed along in the status update post to Twitter.\n */\n", "func_signal": "public Map<String, Object> toParameterMap()", "code": "{\n    Map<String, Object> parameterMap = newHashMap();\n    if (latitude != null && longitude != null) {\n        parameterMap.put(\"lat\", latitude.toString());\n        parameterMap.put(\"long\", longitude.toString());\n    }\n\n    if (displayCoordinates) {\n        parameterMap.put(\"display_coordinates\", \"true\");\n    }\n\n    if (inReplyToStatusId != null) {\n        parameterMap.put(\"in_reply_to_status_id\", inReplyToStatusId.toString());\n    }\n\n    if (wrapLinks) {\n        parameterMap.put(\"wrap_links\", \"true\");\n    }\n\n    return parameterMap;\n}", "path": "services\\twitter\\src\\main\\java\\org\\jboss\\seam\\social\\twitter\\model\\StatusDetails.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/**\n * Percent encodes a string\n * \n * @param string plain string\n * @return percent encoded string\n */\n", "func_signal": "public static String percentEncode(String string)", "code": "{\n    String encoded = formURLEncode(string);\n    for (EncodingRule rule : ENCODING_RULES) {\n        encoded = rule.apply(encoded);\n    }\n    return encoded;\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\social\\utils\\URLUtils.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/**\n * Indicates that Twitter should pinpoint the location precisely when displaying it on a map. By default, Twitter will\n * display the status along with a map showing the general area where the tweet came from. If display coordinates is true,\n * however, it will display a map with a pin indicating the precise location of the status update.\n * \n * @param displayCoordinates If true, will pinpoint the location of the status update.\n * @return The {@link StatusDetails} object\n */\n", "func_signal": "public StatusDetails setDisplayCoordinates(boolean displayCoordinates)", "code": "{\n    this.displayCoordinates = displayCoordinates;\n    return this;\n}", "path": "services\\twitter\\src\\main\\java\\org\\jboss\\seam\\social\\twitter\\model\\StatusDetails.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/**\n * Append given parameters to the query string of the url\n * \n * @param url the url to append parameters to\n * @param params any map\n * @return new url with parameters on query string\n */\n", "func_signal": "public static String buildUri(String url, String key, String value)", "code": "{\n    if (\"\".equals(key) || key == null) {\n        return url;\n    } else {\n        url += url.indexOf(QUERY_STRING_SEPARATOR) != -1 ? PARAM_SEPARATOR : QUERY_STRING_SEPARATOR;\n        url += key + PAIR_SEPARATOR + formURLEncode(value);\n        return url;\n    }\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\social\\utils\\URLUtils.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/**\n * Concats a key-value map into a querystring-like String\n * \n * @param params key-value map\n * @return querystring-like String\n */\n// TODO Move to MapUtils\n", "func_signal": "public static String concatSortedPercentEncodedParams(Map<String, String> params)", "code": "{\n    StringBuilder result = new StringBuilder();\n    for (String key : params.keySet()) {\n        result.append(key).append(PAIR_SEPARATOR);\n        result.append(params.get(key)).append(PARAM_SEPARATOR);\n    }\n    return result.toString().substring(0, result.length() - 1);\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\social\\utils\\URLUtils.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.jboss.seam.social.oauth.OAuthRequest#send()\n */\n", "func_signal": "@Override\npublic RestResponse send()", "code": "{\n\n    RestResponse resp = null;\n    try {\n        resp = new RestResponseScribe(request.send(), request.getUrl());\n    } catch (OAuthException e) {\n        throw new SeamSocialRestException(request.getUrl(), e);\n    }\n    if (resp.getCode() >= 400)\n        throw new SeamSocialRestException(resp.getCode(), request.getUrl(), resp.getHeaders().toString());\n    return resp;\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\social\\scribe\\OAuthRequestScribe.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "// private helpers\n", "func_signal": "private JsonNode fetchConnectionList(String baseUri, int offset, int limit)", "code": "{\n    Map<String, Object> params = newHashMap();\n    params.put(\"offset\", String.valueOf(offset));\n    params.put(\"limit\", String.valueOf(limit));\n    String uri = buildUri(baseUri, params);\n    JsonNode responseNode = getService().getForObject(uri, JsonNode.class);\n    return responseNode;\n}", "path": "services\\facebook\\src\\main\\java\\org\\jboss\\seam\\social\\facebook\\impl\\FeedServiceImpl.java", "repo_name": "seam/social", "stars": 22, "license": "None", "language": "java", "size": 2111}
{"docstring": "/** \n * Sets initial state. \n * @param s state\n */\n", "func_signal": "public void setInitialState(State s)", "code": "{\n\tinitial = s;\n\tsingleton = null;\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/** \n * Checks for equality.\n * @param obj object to compare with\n * @return true if <tt>obj</tt> represents the same pair of states as this pair\n */\n", "func_signal": "@Override\npublic boolean equals(Object obj)", "code": "{\n\tif (obj instanceof StatePair) {\n\t\tStatePair p = (StatePair)obj;\n\t\treturn p.s1 == s1 && p.s2 == s2;\n\t}\n\telse\n\t\treturn false;\n}", "path": "src\\dk\\brics\\automaton\\StatePair.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/**\n * Sets or resets allow mutate flag.\n * If this flag is set, then all automata operations may modify automata given as input;\n * otherwise, operations will always leave input automata languages unmodified. \n * By default, the flag is not set.\n * @param flag if true, the flag is set\n * @return previous value of the flag\n */\n", "func_signal": "static public boolean setAllowMutate(boolean flag)", "code": "{\n\tboolean b = allow_mutation;\n\tallow_mutation = flag;\n\treturn b;\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/** \n * Returns the set of reachable accept states. \n * @return set of {@link State} objects\n */\n", "func_signal": "public Set<State> getAcceptStates()", "code": "{\n\texpandSingleton();\n\tHashSet<State> accepts = new HashSet<State>();\n\tHashSet<State> visited = new HashSet<State>();\n\tLinkedList<State> worklist = new LinkedList<State>();\n\tworklist.add(initial);\n\tvisited.add(initial);\n\twhile (worklist.size() > 0) {\n\t\tState s = worklist.removeFirst();\n\t\tif (s.accept)\n\t\t\taccepts.add(s);\n\t\tfor (Transition t : s.transitions)\n\t\t\tif (!visited.contains(t.to)) {\n\t\t\t\tvisited.add(t.to);\n\t\t\t\tworklist.add(t.to);\n\t\t\t}\n\t}\n\treturn accepts;\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/**\n * Constructs a new state pair.\n * @param s1 first state\n * @param s2 second state\n */\n", "func_signal": "public StatePair(State s1, State s2)", "code": "{\n\tthis.s1 = s1;\n\tthis.s2 = s2;\n}", "path": "src\\dk\\brics\\automaton\\StatePair.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/** \n * Constructs a new automaton that accepts the empty language.\n * Using this constructor, automata can be constructed manually from\n * {@link State} and {@link Transition} objects.\n * @see #setInitialState(State)\n * @see State\n * @see Transition\n */\n", "func_signal": "public Automaton()", "code": "{\n\tinitial = new State();\n\tdeterministic = true;\n\tsingleton = null;\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/**\n * Returns a string representation of this automaton.\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tStringBuilder b = new StringBuilder();\n\tif (isSingleton()) {\n\t\tb.append(\"singleton: \");\n\t\tfor (char c : singleton.toCharArray())\n\t\t\tTransition.appendCharString(c, b);\n\t\tb.append(\"\\n\");\n\t} else {\n\t\tSet<State> states = getStates();\n\t\tsetStateNumbers(states);\n\t\tb.append(\"initial state: \").append(initial.number).append(\"\\n\");\n\t\tfor (State s : states)\n\t\t\tb.append(s.toString());\n\t}\n\treturn b.toString();\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/** \n * Reduces this automaton.\n * An automaton is \"reduced\" by combining overlapping and adjacent edge intervals with same destination. \n */\n", "func_signal": "public void reduce()", "code": "{\n\tif (isSingleton())\n\t\treturn;\n\tSet<State> states = getStates();\n\tsetStateNumbers(states);\n\tfor (State s : states) {\n\t\tList<Transition> st = s.getSortedTransitions(true);\n\t\ts.resetTransitions();\n\t\tState p = null;\n\t\tint min = -1, max = -1;\n\t\tfor (Transition t : st) {\n\t\t\tif (p == t.to) {\n\t\t\t\tif (t.min <= max + 1) {\n\t\t\t\t\tif (t.max > max)\n\t\t\t\t\t\tmax = t.max;\n\t\t\t\t} else {\n\t\t\t\t\tif (p != null)\n\t\t\t\t\t\ts.transitions.add(new Transition((char)min, (char)max, p));\n\t\t\t\t\tmin = t.min;\n\t\t\t\t\tmax = t.max;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (p != null)\n\t\t\t\t\ts.transitions.add(new Transition((char)min, (char)max, p));\n\t\t\t\tp = t.to;\n\t\t\t\tmin = t.min;\n\t\t\t\tmax = t.max;\n\t\t\t}\n\t\t}\n\t\tif (p != null)\n\t\t\ts.transitions.add(new Transition((char)min, (char)max, p));\n\t}\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/** \n * Constructs a new transition. \n * Both end points are included in the interval.\n * @param min transition interval minimum\n * @param max transition interval maximum\n * @param to destination state\n */\n", "func_signal": "public Transition(char min, char max, State to)", "code": "{\n\tif (max < min) {\n\t\tchar t = max;\n\t\tmax = min;\n\t\tmin = t;\n\t}\n\tthis.min = min;\n\tthis.max = max;\n\tthis.to = to;\n}", "path": "src\\dk\\brics\\automaton\\Transition.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/**\n * Returns a clone of this automaton.\n */\n", "func_signal": "@Override\npublic Automaton clone()", "code": "{\n\ttry {\n\t\tAutomaton a = (Automaton)super.clone();\n\t\tif (!isSingleton()) {\n\t\t\tHashMap<State, State> m = new HashMap<State, State>();\n\t\t\tSet<State> states = getStates();\n\t\t\tfor (State s : states)\n\t\t\t\tm.put(s, new State());\n\t\t\tfor (State s : states) {\n\t\t\t\tState p = m.get(s);\n\t\t\t\tp.accept = s.accept;\n\t\t\t\tif (s == initial)\n\t\t\t\t\ta.initial = p;\n\t\t\t\tfor (Transition t : s.transitions)\n\t\t\t\t\tp.transitions.add(new Transition(t.min, t.max, m.get(t.to)));\n\t\t\t}\n\t\t}\n\t\treturn a;\n\t} catch (CloneNotSupportedException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/** \n * Returns the set of states that are reachable from the initial state.\n * @return set of {@link State} objects\n */\n", "func_signal": "public Set<State> getStates()", "code": "{\n\texpandSingleton();\n\tSet<State> visited;\n\tif (isDebug())\n\t\tvisited = new LinkedHashSet<State>();\n\telse\n\t\tvisited = new HashSet<State>();\n\tLinkedList<State> worklist = new LinkedList<State>();\n\tworklist.add(initial);\n\tvisited.add(initial);\n\twhile (worklist.size() > 0) {\n\t\tState s = worklist.removeFirst();\n\t\tCollection<Transition> tr;\n\t\tif (isDebug())\n\t\t\ttr = s.getSortedTransitions(false);\n\t\telse\n\t\t\ttr = s.transitions;\n\t\tfor (Transition t : tr)\n\t\t\tif (!visited.contains(t.to)) {\n\t\t\t\tvisited.add(t.to);\n\t\t\t\tworklist.add(t.to);\n\t\t\t}\n\t}\n\treturn visited;\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/** \n * Expands singleton representation to normal representation.\n * Does nothing if not in singleton representation. \n */\n", "func_signal": "public void expandSingleton()", "code": "{\n\tif (isSingleton()) {\n\t\tState p = new State();\n\t\tinitial = p;\n\t\tfor (int i = 0; i < singleton.length(); i++) {\n\t\t\tState q = new State();\n\t\t\tp.transitions.add(new Transition(singleton.charAt(i), q));\n\t\t\tp = q;\n\t\t}\n\t\tp.accept = true;\n\t\tdeterministic = true;\n\t\tsingleton = null;\n\t}\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/** \n * Constructs a new singleton interval transition. \n * @param c transition character\n * @param to destination state\n */\n", "func_signal": "public Transition(char c, State to)", "code": "{\n\tmin = max = c;\n\tthis.to = to;\n}", "path": "src\\dk\\brics\\automaton\\Transition.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/**\n * Returns the number of states in this automaton.\n */\n", "func_signal": "public int getNumberOfStates()", "code": "{\n\tif (isSingleton())\n\t\treturn singleton.length() + 1;\n\treturn getStates().size();\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/** \n * Returns the set of live states. A state is \"live\" if an accept state is reachable from it. \n * @return set of {@link State} objects\n */\n", "func_signal": "public Set<State> getLiveStates()", "code": "{\n\texpandSingleton();\n\treturn getLiveStates(getStates());\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/** \n * Constructs a new state. Initially, the new state is a reject state. \n */\n", "func_signal": "public State()", "code": "{\n\tresetTransitions();\n\tid = next_id++;\n}", "path": "src\\dk\\brics\\automaton\\State.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/**\n * Returns the number of transitions in this automaton. This number is counted\n * as the total number of edges, where one edge may be a character interval.\n */\n", "func_signal": "public int getNumberOfTransitions()", "code": "{\n\tif (isSingleton())\n\t\treturn singleton.length();\n\tint c = 0;\n\tfor (State s : getStates())\n\t\tc += s.transitions.size();\n\treturn c;\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/** \n * Removes transitions to dead states and calls {@link #reduce()} and {@link #clearHashCode()}.\n * (A state is \"dead\" if no accept state is reachable from it.)\n */\n", "func_signal": "public void removeDeadTransitions()", "code": "{\n\tclearHashCode();\n\tif (isSingleton())\n\t\treturn;\n\tSet<State> states = getStates();\n\tSet<State> live = getLiveStates(states);\n\tfor (State s : states) {\n\t\tSet<Transition> st = s.transitions;\n\t\ts.resetTransitions();\n\t\tfor (Transition t : st)\n\t\t\tif (live.contains(t.to))\n\t\t\t\ts.transitions.add(t);\n\t}\n\treduce();\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/** \n * Returns an automaton that accepts the shuffle (interleaving) of \n * the languages of the given automata.\n * As a side-effect, both automata are determinized, if not already deterministic.     \n * Never modifies the input automata languages.\n * <p>\n * Complexity: quadratic in number of states (if already deterministic). \n * <p>\n * <dl><dt><b>Author:</b></dt><dd>Torben Ruby \n * &lt;<a href=\"mailto:ruby@daimi.au.dk\">ruby@daimi.au.dk</a>&gt;</dd></dl>\n */\n", "func_signal": "public static Automaton shuffle(Automaton a1, Automaton a2)", "code": "{\n\ta1.determinize();\n\ta2.determinize();\n\tTransition[][] transitions1 = Automaton.getSortedTransitions(a1.getStates());\n\tTransition[][] transitions2 = Automaton.getSortedTransitions(a2.getStates());\n\tAutomaton c = new Automaton();\n\tLinkedList<StatePair> worklist = new LinkedList<StatePair>();\n\tHashMap<StatePair, StatePair> newstates = new HashMap<StatePair, StatePair>();\n\tState s = new State();\n\tc.initial = s;\n\tStatePair p = new StatePair(s, a1.initial, a2.initial);\n\tworklist.add(p);\n\tnewstates.put(p, p);\n\twhile (worklist.size() > 0) {\n\t\tp = worklist.removeFirst();\n\t\tp.s.accept = p.s1.accept && p.s2.accept;\n\t\tTransition[] t1 = transitions1[p.s1.number];\n\t\tfor (int n1 = 0; n1 < t1.length; n1++) {\n\t\t\tStatePair q = new StatePair(t1[n1].to, p.s2);\n\t\t\tStatePair r = newstates.get(q);\n\t\t\tif (r == null) {\n\t\t\t\tq.s = new State();\n\t\t\t\tworklist.add(q);\n\t\t\t\tnewstates.put(q, q);\n\t\t\t\tr = q;\n\t\t\t}\n\t\t\tp.s.transitions.add(new Transition(t1[n1].min, t1[n1].max, r.s));\n\t\t}\n\t\tTransition[] t2 = transitions2[p.s2.number];\n\t\tfor (int n2 = 0; n2 < t2.length; n2++) {\n\t\t\tStatePair q = new StatePair(p.s1, t2[n2].to);\n\t\t\tStatePair r = newstates.get(q);\n\t\t\tif (r == null) {\n\t\t\t\tq.s = new State();\n\t\t\t\tworklist.add(q);\n\t\t\t\tnewstates.put(q, q);\n\t\t\t\tr = q;\n\t\t\t}\n\t\t\tp.s.transitions.add(new Transition(t2[n2].min, t2[n2].max, r.s));\n\t\t}\n\t}\n\tc.deterministic = false;\n\tc.removeDeadTransitions();\n\tc.checkMinimizeAlways();\n\treturn c;\n}", "path": "src\\dk\\brics\\automaton\\ShuffleOperations.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/**\n * Returns hash code for this automaton. The hash code is based on the\n * number of states and transitions in the minimized automaton.\n * Invoking this method may involve minimizing the automaton.\n */\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n\tif (hash_code == 0)\n\t\tminimize();\n\treturn hash_code;\n}", "path": "src\\dk\\brics\\automaton\\Automaton.java", "repo_name": "cmf/schemely", "stars": 26, "license": "None", "language": "java", "size": 7479}
{"docstring": "/**\n * Handle incoming Zookeeper client notifications.\n * @param event check for appropriate action\n */\n", "func_signal": "@Override\npublic void process(WatchedEvent event)", "code": "{\n\t\tif (event.getType() == Event.EventType.None) {\n\t\tEvent.KeeperState state = event.getState();\n\t\tswitch (state) {\n            case SyncConnected:\n                onConnected();\n                break;\n            case Disconnected:\n                onDisconnection();\n                break;\n            case Expired:\n                onSessionExpired();\n                break;\n            }\n\t\t}\n}", "path": "src\\main\\java\\com\\btoddb\\cassandra\\queue\\zookeeper\\ZooKeeperConnectionManager.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * Permanently kill this synchronization primitive. It cannot be resurrected.\n *\n * @param rc\t\t\t\t\t\tThe code of the ZooKeeper error that killed this primitive\n */\n", "func_signal": "protected void die(Code rc)", "code": "{\n\tKeeperException killerException = KeeperException.create(rc);\n\tdie(killerException);\n}", "path": "src\\main\\java\\org\\wyki\\zookeeper\\cages\\ZkSyncPrimitive.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * stop any pending connection activities, then close\n */\n", "func_signal": "private void closeConnection()", "code": "{\n\n    //ensure no new requests will be incoming\n    synchronized (allowSessionRequestMonitor) {\n        allowSessionRequests = false;\n    }\n\n    synchronized (connectionEstablishedMonitor) {\n        if (zkConnection != null && zkConnection.getState().isAlive()) {\n            try {\n                logger.info(\"Closing connection object.\");\n                zkConnection.close();\n                zkConnection = null;\n            }\n            catch (Exception ex) {\n                logger.warn(\"Closing connection failed: \" + ex.getMessage());\n            }\n        }\n\n       connectionEstablished = false;\n    }\n\n}", "path": "src\\main\\java\\com\\btoddb\\cassandra\\queue\\zookeeper\\ZooKeeperConnectionManager.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * Graceful shutdown of this client's push/pop workers.  This is not required but will free resources\n * shared across all clients.\n */\n", "func_signal": "public void shutdownAndWait()", "code": "{\n    for (PusherImpl pusher : pusherSet) {\n        pusher.shutdownAndWait();\n    }\n\n    for (PopperImpl popper : popperSet) {\n        popper.shutdownAndWait();\n    }\n\n    if(pipeCollectionLocker != null) {\n        pipeCollectionLocker.shutdownAndWait();\n    }\n\n    if(queueStatsLocker != null) {\n        queueStatsLocker.shutdownAndWait();\n    }\n\n    if (pipeReaper != null) {\n        pipeReaper.shutdownAndWait();\n    }\n\n    if(popEmptyStat != null) {\n        popEmptyStat.shutdown();\n    }\n\n    if(popNotEmptyStat != null) {\n        popNotEmptyStat.shutdown();\n    }\n\n    if(pushStat != null) {\n        pushStat.shutdown();\n    }\n}", "path": "src\\main\\java\\com\\btoddb\\cassandra\\queue\\CassQueueImpl.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "// ----------------------\n", "func_signal": "@Before\npublic void setupTest() throws Exception", "code": "{\n    cqFactory =\n            new CassQueueFactoryImpl(qRepos, new LocalLockerImpl<QueueDescriptor>(),\n                    new LocalLockerImpl<QueueDescriptor>());\n}", "path": "src\\test\\java\\com\\btoddb\\cassandra\\queue\\PipeReaperTest.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * Wait until the primitive has reached a synchronized state. If the operation was successful,\n * this is triggered when a derived class calls <code>onStateChanged()</code> for the first time. If the\n * operation was unsuccessful, the relevant exception is thrown.\n *\n * @throws KeeperException\n * @throws InterruptedException\n */\n", "func_signal": "public void waitSynchronized() throws ZkCagesException, InterruptedException", "code": "{\n    if(maximumSyncWaitTime > 0) {\n        boolean success = isSynchronized.waitOne(maximumSyncWaitTime, TimeUnit.MILLISECONDS);\n\n        if(!success) {\n            throw new ZkCagesException(ZkCagesException.Error.LOCK_SYNC_TIMEOUT);\n        }\n    }\n    else {\n\t\t    isSynchronized.waitOne();\n    }\n\n\t\tif (getKillerException() == null)\n\t\t\treturn;\n\n\t\tthrow getKillerException();\n\t}", "path": "src\\main\\java\\org\\wyki\\zookeeper\\cages\\ZkSyncPrimitive.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * Add a listener task to be executed when the object enters the synchronized state, and every time it updates its\n * state thereafter (as marked by derived classes calling <code>onStateUpdated()</code>).\n *\n * @param handler \t\t\t\t\tThe listener task to execute when the state has changed. A weak reference is taken.\n * @param doStartupRun \t\t\t\tIf the state of the primitive is already synchronized then run the handler immediately\n */\n", "func_signal": "public void addUpdateListener(Runnable handler, boolean doStartupRun)", "code": "{\n\tsynchronized (mutex) {\n\t\tif (stateUpdateListeners == null) {\n\t\t\tstateUpdateListeners = new ArrayList<Runnable>(8);\n\t\t}\n\t\t// Add to listener set first to avoid reentrancy race\n\t\tstateUpdateListeners.add(handler);\n\t\t// If we are already synchronized then trigger\n\t\tif (doStartupRun && killedByException == null && isSynchronized.isSignalled()) {\n\t\t\thandler.run();\n\t\t}\n\t}\n}", "path": "src\\main\\java\\org\\wyki\\zookeeper\\cages\\ZkSyncPrimitive.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * Creates a Zookeeper connection.\n *\n * @throws ZooKeeperException in event of an error during connection creation\n */\n", "func_signal": "private void createConnection() throws IOException, ZooKeeperException", "code": "{\n    //ensure session requests will not be incoming\n    synchronized(allowSessionRequestMonitor){\n        allowSessionRequests = false;\n    }\n\n    //create the connection\n    synchronized (connectionEstablishedMonitor) {\n\n        logger.info(\"Creating connection object.\");\n        zkConnection = new ZooKeeper(connectString, sessionTimeout, this);\n\n        postProcessCreateConnection(zkConnection);\n    }\n\n\n}", "path": "src\\main\\java\\com\\btoddb\\cassandra\\queue\\zookeeper\\ZooKeeperConnectionManager.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "// -----------------------\n", "func_signal": "private String assertPushersPoppersWork(int numPushers, int numPoppers, int maxPushesPerPipe, int numMsgs,\n        long pushDelay, long popDelay) throws Exception", "code": "{\n    Set<CassQMsg> msgSet = new LinkedHashSet<CassQMsg>();\n    Set<String> valueSet = new HashSet<String>();\n    Queue<CassQMsg> popQ = new ConcurrentLinkedQueue<CassQMsg>();\n\n    //\n    // start a set of pushers and poppers\n    //\n\n    QueueProperties tmpProps = baseEnvProps.clone();\n    tmpProps.setNumMsgs(numMsgs);\n    tmpProps.setNumPushers(numPushers);\n    tmpProps.setPushDelay(pushDelay);\n    tmpProps.setNumPoppers(numPoppers);\n    tmpProps.setPopDelay(popDelay);\n\n    CassQueueImpl cq =\n            cqFactory.createInstance(\"test_\" + System.currentTimeMillis(), 20000, maxPushesPerPipe, 30000, false);\n    cq.setPipeReaperProcessingDelay(100);\n    WorkerThreadWatcher pusherWtw = CassQueueUtils.startPushers(cq, tmpProps);\n    WorkerThreadWatcher popperWtw = CassQueueUtils.startPoppers(cq, popQ, tmpProps);\n    List<PushPopAbstractBase> pusherSet = pusherWtw.getWorkerList();\n    List<PushPopAbstractBase> popperSet = popperWtw.getWorkerList();\n\n    boolean finishedProperly = CassQueueUtils.monitorPushersPoppers(popQ, pusherSet, popperSet, msgSet, valueSet);\n\n    assertTrue(\"monitoring of pushers/poppers finished improperly\", finishedProperly);\n\n    assertTrue(\"expected pusher to be finished\", CassQueueUtils.isPushPopOpFinished(pusherSet));\n    assertTrue(\"expected popper to be finished\", CassQueueUtils.isPushPopOpFinished(popperSet));\n\n    int totalPushed = 0;\n    for (PushPopAbstractBase pusher : pusherSet) {\n        totalPushed += pusher.getMsgsProcessed();\n    }\n    int totalPopped = 0;\n    for (PushPopAbstractBase popper : popperSet) {\n        totalPopped += popper.getMsgsProcessed();\n    }\n    assertEquals(\"did not push the expected number of messages\", numMsgs, totalPushed);\n    assertEquals(\"did not pop the expected number of messages\", numMsgs, totalPopped);\n\n    assertEquals(\"expected to have a total of \" + numMsgs + \" messages in set\", numMsgs, msgSet.size());\n    assertEquals(\"expected to have a total of \" + numMsgs + \" values in set\", numMsgs, valueSet.size());\n\n    assertEquals(\"waiting queue should be empty\", 0,\n            qRepos.getCountOfWaitingMsgs(cq.getName(), maxPushesPerPipe).totalMsgCount);\n    assertEquals(\"delivered queue should be empty\", 0, qRepos.getCountOfPendingCommitMsgs(cq.getName(),\n            maxPushesPerPipe).totalMsgCount);\n\n    pusherWtw.shutdownAndWait();\n    popperWtw.shutdownAndWait();\n    cq.shutdownAndWait();\n    assertLockerCountsAreCorrect();\n\n    return cq.getName();\n}", "path": "src\\test\\java\\com\\btoddb\\cassandra\\queue\\CassQueueTest.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * Indicate that there was a problem detected with the underlying connection, and is considered disconnected\n */\n", "func_signal": "protected void signalDisconnected()", "code": "{\n\n    synchronized (allowSessionRequestMonitor) {\n        allowSessionRequests = false;\n    }\n\n    synchronized (connectionEstablishedMonitor) {\n        connectionEstablished = false;\n    }\n}", "path": "src\\main\\java\\com\\btoddb\\cassandra\\queue\\zookeeper\\ZooKeeperConnectionManager.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * Load from raw properties file.\n * \n * @param rawProps\n */\n", "func_signal": "public QueueProperties(Properties rawProps)", "code": "{\n    this.rawProps = cloneProperties(rawProps);\n    initJmx();\n}", "path": "src\\main\\java\\com\\btoddb\\cassandra\\queue\\app\\QueueProperties.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * Truncate the queue data. The queue will still be available for push/pop,\n * but all data will be removed.\n * \n * @throws Exception\n */\n", "func_signal": "public void truncate() throws Exception", "code": "{\n    logger.debug(\"truncating queue {}\", qDesc.getName());\n    qRepos.truncateQueueData(this);\n    for ( PopperImpl popper : popperSet ) {\n        popper.clearPipeManagerSelection();\n    }\n}", "path": "src\\main\\java\\com\\btoddb\\cassandra\\queue\\CassQueueImpl.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * Attempts to acquire the resource lock (i.e. create resource lock path) and return false if already held.\n *\n * @return true if lock path created, otherwise false\n * @throws ZkCagesException\n * @throws InterruptedException\n */\n", "func_signal": "@Override\npublic boolean tryAcquire() throws ZkCagesException, InterruptedException", "code": "{\n    boolean acquired;\n\n    try {\n\n        acquired = super.tryAcquire();\n    }\n    catch(ZkCagesException e) {\n        if(ZkCagesException.Error.ZOOKEEPER_EXCEPTION.equals(e.getErrorCode()) && e.getKeeperException() != null &&\n                KeeperException.Code.NODEEXISTS.equals(e.getKeeperException().code())) {\n            //someone already created this lock path\n            acquired = false;\n        }\n        else {\n            //some other Zk error\n            throw e;\n        }\n    }\n\n    return acquired;\n}", "path": "src\\main\\java\\com\\btoddb\\cassandra\\queue\\locks\\DistributedLock.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * Prepares the next step in an asynchronous execution, based upon the return code from the previous step.\n *\n * @param rc \t\t\t\t\t\tThe ZooKeeper return code from the previous step\n * @param acceptable \t\t\t\tThe acceptable list of return codes from the previous step\n * @param operation\t\t\t\t\tThe operation from the previous step (provided so it might be retried\n * @return \t\t\t\t\t\t\tWhether the next step should be started\n */\n", "func_signal": "protected boolean passOrTryRepeat(int rc, Code[] acceptable, Runnable operation)", "code": "{\n\n\t\tCode opResult = Code.get(rc);\n\n\t\tfor (Code code : acceptable) {\n\t\t\tif (opResult == code) {\n\t\t\t\tretries = 0;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tswitch (opResult) {\n\t\tcase CONNECTIONLOSS:\n\t\t\tretryOnConnect(operation);\n\t\t\tbreak;\n\t\tcase SESSIONMOVED:\t// we assume that this is caused by request flowing over \"old\" connection. will be resolve with time.\n\t\tcase OPERATIONTIMEOUT:\n\t\t\tif (shouldRetryOnTimeout()) {\n\t\t\t\tretryAfterDelay(operation, retries++);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase SESSIONEXPIRED:\n\t\t\tif (shouldResurrectOnSessionExpiry()) {\n\t\t\t\tresynchronizeNeeded = true;\n\t\t\t\trequestRessurrection();\n\t\t\t} else {\n\t\t\t\tdie(opResult);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (shouldRetryOnError()) {\n\t\t\t\tretryAfterDelay(operation, retries++);\n\t\t\t} else {\n\t\t\t\tdie(opResult);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\treturn false;\n\t}", "path": "src\\main\\java\\org\\wyki\\zookeeper\\cages\\ZkSyncPrimitive.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * Constructor; start() should be called on the instance after creation.\n *\n * @param connectString Zookeeper connect string\n * @param sessionTimeout zookeeper session timeout\n * @param sessionPollingInterval frequency in ms that manager thread should check for session availability\n */\n", "func_signal": "public ZooKeeperConnectionManager(String connectString, Integer sessionTimeout, long sessionPollingInterval)", "code": "{\n    this.connectString = connectString;\n    this.sessionTimeout = sessionTimeout;\n    this.sessionPollingInterval = sessionPollingInterval;\n    t = new Thread(this);\n}", "path": "src\\main\\java\\com\\btoddb\\cassandra\\queue\\zookeeper\\ZooKeeperConnectionManager.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "//    @AfterClass\n//    public static void teardownCassandra() throws IOException {\n//        EmbeddedServerHelper.teardown();\n//        embedded = null;\n//    }\n", "func_signal": "protected void setupClient()", "code": "{\n        cassandraHostConfigurator = new CassandraHostConfigurator(\"127.0.0.1:9170\");\n        connectionManager = new HConnectionManager(clusterName,cassandraHostConfigurator);\n    }", "path": "src\\test\\java\\com\\btoddb\\cassandra\\queue\\CassQueueTestBase.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * Get a new {@link ZooKeeper} client.\n     *\n * @return new client session\n     * @throws ZooKeeperException in event of an error with session or underlying connection\n */\n", "func_signal": "public ZooKeeper getZookeeperSession() throws ZooKeeperException", "code": "{\n        //ensure the\n        synchronized(allowSessionRequestMonitor) {\n            if(!allowSessionRequests || zkConnection == null){\n\n                throw new ZooKeeperException(\"Connection not available.\");\n            }\n            else {\n\n                return zkConnection;\n            }\n        }\n    }", "path": "src\\main\\java\\com\\btoddb\\cassandra\\queue\\zookeeper\\ZooKeeperConnectionManager.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * Must be called by derived classes when they have successfully updated their state.\n */\n", "func_signal": "protected void onStateUpdated()", "code": "{\n\tsynchronized (mutex) {\n\t\tkilledByException = null;\n\t\t// Notify handlers ***before*** signalling state update to allow pre-processing\n\t\tif (stateUpdateListeners != null) {\n\t\t\tfor (Runnable handler : stateUpdateListeners)\n\t\t\t\thandler.run();\n\t\t}\n\t\t// Signal state updated\n\t\tisSynchronized.set();\n\t}\n}", "path": "src\\main\\java\\org\\wyki\\zookeeper\\cages\\ZkSyncPrimitive.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * Indicates we are now connected to zookeeper and should allow client requests.\n */\n", "func_signal": "protected void signalConnected()", "code": "{\n    synchronized (connectionEstablishedMonitor) {\n        connectionEstablished = true;\n    }\n\n    synchronized (allowSessionRequestMonitor) {\n        allowSessionRequests = true;\n    }\n}", "path": "src\\main\\java\\com\\btoddb\\cassandra\\queue\\zookeeper\\ZooKeeperConnectionManager.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * Preferred way to create a popper. Insures all common properties are used\n * to instantiate the popper.\n * \n * @return An instantiated {@link PopperImpl} if successful.\n */\n", "func_signal": "public PopperImpl createPopper()", "code": "{\n    logger.debug(\"creating popper for queue {}\", qDesc.getName());\n    UUID popperId = UUID.randomUUID();\n    PipeManager pipeMgr = new PipeManager(qRepos, this, popperId, pipeCollectionLocker);\n    pipeMgr.setMaxOwnerIdleTime(getMaxPopOwnerIdleTime());\n    PopperImpl popper = new PopperImpl(popperId, this, qRepos, pipeMgr, popNotEmptyStat, popEmptyStat);\n    popperSet.add(popper);\n    return popper;\n}", "path": "src\\main\\java\\com\\btoddb\\cassandra\\queue\\CassQueueImpl.java", "repo_name": "btoddb/cassandra-queue", "stars": 18, "license": "None", "language": "java", "size": 1917}
{"docstring": "/**\n * Basic constructor.\n */\n", "func_signal": "public Response( String status, String mimeType, InputStream data )", "code": "{\n\tthis.status = status;\n\tthis.mimeType = mimeType;\n\tthis.data = data;\n}", "path": "src\\com\\nevin\\NanoHTTPD.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * URL-encodes everything between \"/\"-characters.\n * Encodes spaces as '%20' instead of '+'.\n */\n", "func_signal": "private String encodeUri( String uri )", "code": "{\n\tString newUri = \"\";\n\tStringTokenizer st = new StringTokenizer( uri, \"/ \", true );\n\twhile ( st.hasMoreTokens())\n\t{\n\t\tString tok = st.nextToken();\n\t\tif ( tok.equals( \"/\" ))\n\t\t\tnewUri += \"/\";\n\t\telse if ( tok.equals( \" \" ))\n\t\t\tnewUri += \"%20\";\n\t\telse\n\t\t{\n\t\t\ttry{ \n\t\t\t\tnewUri += URLEncoder.encode( tok, \"UTF-8\" ); \n\t\t\t}catch( java.io.UnsupportedEncodingException uee ){\n\n\t\t\t}\n\t\t}\n\t}\n\treturn newUri;\n}", "path": "src\\com\\nevin\\NanoHTTPD.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * \u5728download.db\u6570\u636e\u5e93\u4e0b\u521b\u5efa\u4e00\u4e2adownload_info\u8868\u5b58\u50a8\u4e0b\u8f7d\u4fe1\u606f\n */\n", "func_signal": "@Override\npublic void onCreate(SQLiteDatabase db)", "code": "{\n    db.execSQL(\"create table download_info(\" +\n    \t\t\"_id integer PRIMARY KEY AUTOINCREMENT, \" +\n    \t\t\"url char, \"+\n    \t\t\"file_size integer, \" +\n            \"compelete_size integer, \" +\n    \t\t\"file_path char, \" +\n            \"file_md5 char\" +\n            \")\");\n}", "path": "src\\com\\nevin\\downloader\\DownloadDBHelper.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * Stops the server.\n */\n", "func_signal": "public void stop()", "code": "{\n\ttry\n\t{\n\t\tmyServerSocket.close();\n\t\tmyThread.join();\n\t}\n\tcatch ( IOException ioe ) {}\n\tcatch ( InterruptedException e ) {}\n}", "path": "src\\com\\nevin\\NanoHTTPD.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * Find the byte positions where multipart boundaries start.\n **/\n", "func_signal": "public int[] getBoundaryPositions(byte[] b, byte[] boundary)", "code": "{\n\tint matchcount = 0;\n\tint matchbyte = -1;\n\tVector matchbytes = new Vector();\n\tfor (int i=0; i<b.length; i++)\n\t{\n\t\tif (b[i] == boundary[matchcount])\n\t\t{\n\t\t\tif (matchcount == 0)\n\t\t\t\tmatchbyte = i;\n\t\t\tmatchcount++;\n\t\t\tif (matchcount==boundary.length)\n\t\t\t{\n\t\t\t\tmatchbytes.addElement(new Integer(matchbyte));\n\t\t\t\tmatchcount = 0;\n\t\t\t\tmatchbyte = -1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti -= matchcount;\n\t\t\tmatchcount = 0;\n\t\t\tmatchbyte = -1;\n\t\t}\n\t}\n\tint[] ret = new int[matchbytes.size()];\n\tfor (int i=0; i < ret.length; i++)\n\t{\n\t\tret[i] = ((Integer)matchbytes.elementAt(i)).intValue();\n\t}\n\treturn ret;\n}", "path": "src\\com\\nevin\\NanoHTTPD.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * Decodes parameters in percent-encoded URI-format\n * ( e.g. \"name=Jack%20Daniels&pass=Single%20Malt\" ) and\n * adds them to given Properties. NOTE: this doesn't support multiple\n * identical keys due to the simplicity of Properties -- if you need multiples,\n * you might want to replace the Properties with a Hashtable of Vectors or such.\n */\n", "func_signal": "private void decodeParms( String parms, Properties p )\n\t\tthrows InterruptedException", "code": "{\n\tif ( parms == null )\n\t\treturn;\n\n\tStringTokenizer st = new StringTokenizer( parms, \"&\" );\n\twhile ( st.hasMoreTokens())\n\t{\n\t\tString e = st.nextToken();\n\t\tint sep = e.indexOf( '=' );\n\t\tif ( sep >= 0 )\n\t\t\tp.put( decodePercent( e.substring( 0, sep )).trim(),\n\t\t\t\t\tdecodePercent( e.substring( sep+1 )));\n\t}\n\t\t}", "path": "src\\com\\nevin\\NanoHTTPD.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * Starts a HTTP server to given port.<p>\n * Throws an IOException if the socket is already in use\n */\n", "func_signal": "public NanoHTTPD( int port, File wwwroot ) throws IOException", "code": "{\n\tmyTcpPort = port;\n\tthis.myRootDir = wwwroot;\n\tmyServerSocket = new ServerSocket( myTcpPort );\n\tmyThread = new Thread( new Runnable(){\n\t\tpublic void run(){\n\t\t\ttry{\n\t\t\t\twhile( true )\n\t\t\t\t\tnew HTTPSession( myServerSocket.accept());\n\t\t\t}\n\t\t\tcatch ( IOException ioe ){\n\n\t\t\t}\n\t\t}\n\t});\n\tmyThread.setDaemon( true );\n\tmyThread.start();\n}", "path": "src\\com\\nevin\\NanoHTTPD.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * Decodes the sent headers and loads the data into\n * java Properties' key - value pairs\n **/\n", "func_signal": "private  void decodeHeader(BufferedReader in, Properties pre, Properties parms, Properties header)\n\t\tthrows InterruptedException", "code": "{\n\ttry {\n\t\t// Read the request line\n\t\tString inLine = in.readLine();\n\t\tif (inLine == null) return;\n\t\tStringTokenizer st = new StringTokenizer( inLine );\n\t\tif ( !st.hasMoreTokens())\n\t\t\tsendError( HTTP_BADREQUEST, \"BAD REQUEST: Syntax error. Usage: GET /example/file.html\" );\n\n\t\tString method = st.nextToken();\n\t\tpre.put(\"method\", method);\n\n\t\tif ( !st.hasMoreTokens())\n\t\t\tsendError( HTTP_BADREQUEST, \"BAD REQUEST: Missing URI. Usage: GET /example/file.html\" );\n\n\t\tString uri = st.nextToken();\n\t\tmyOut.println(\"uri: \"+uri);\n\t\t// Decode parameters from the URI\n\t\tint qmi = uri.indexOf( '?' );\n\t\tif ( qmi >= 0 )\n\t\t{\n\t\t\tdecodeParms( uri.substring( qmi+1 ), parms );\n\t\t\turi = decodePercent( uri.substring( 0, qmi ));\n\t\t\t//uri = decodeUri(uri.substring( 0, qmi ));\n\t\t}\n\t\telse{\n\t\t\turi = decodePercent(uri);\n\t\t\t//uri = decodeUri(uri);\n\t\t}\n\t\t\t\n\n\t\t// If there's another token, it's protocol version,\n\t\t// followed by HTTP headers. Ignore version but parse headers.\n\t\t// NOTE: this now forces header names lowercase since they are\n\t\t// case insensitive and vary by client.\n\t\tif ( st.hasMoreTokens())\n\t\t{\n\t\t\tString line = in.readLine();\n\t\t\twhile ( line != null && line.trim().length() > 0 )\n\t\t\t{\n\t\t\t\tint p = line.indexOf( ':' );\n\t\t\t\tif ( p >= 0 )\n\t\t\t\t\theader.put( line.substring(0,p).trim().toLowerCase(), line.substring(p+1).trim());\n\t\t\t\tline = in.readLine();\n\t\t\t}\n\t\t}\n\n\t\tpre.put(\"uri\", uri);\n\t}\n\tcatch ( IOException ioe )\n\t{\n\t\tsendError( HTTP_INTERNALERROR, \"SERVER INTERNAL ERROR: IOException: \" + ioe.getMessage());\n\t}\n\t\t}", "path": "src\\com\\nevin\\NanoHTTPD.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.main);\n\n\twebview = (WebView) findViewById(R.id.webview);\n\twebview.setVisibility(android.view.View.INVISIBLE);\n\n\ttv = (TextView) this.findViewById(R.id.textview);\n\ttv.setText(\"Ready!\");\n}", "path": "src\\com\\nevin\\LocalClient.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * Override this to customize the server.<p>\n *\n * (By default, this delegates to serveFile() and allows directory listing.)\n *\n * @param uri\tPercent-decoded URI without parameters, for example \"/index.cgi\"\n * @param method\t\"GET\", \"POST\" etc.\n * @param parms\tParsed, percent decoded parameters from URI and, in case of POST, data.\n * @param header\tHeader entries, percent decoded\n * @return HTTP response, see class Response for details\n */\n", "func_signal": "public Response serve( String uri, String method, Properties header, Properties parms, Properties files )", "code": "{\n\tmyOut.println( method + \" '\" + uri + \"' \" );\n\n\tEnumeration e = header.propertyNames();\n\twhile ( e.hasMoreElements())\n\t{\n\t\tString value = (String)e.nextElement();\n\t\tmyOut.println( \"  HDR: '\" + value + \"' = '\" +\n\t\t\t\theader.getProperty( value ) + \"'\" );\n\t}\n\te = parms.propertyNames();\n\twhile ( e.hasMoreElements())\n\t{\n\t\tString value = (String)e.nextElement();\n\t\tmyOut.println( \"  PRM: '\" + value + \"' = '\" +\n\t\t\t\tparms.getProperty( value ) + \"'\" );\n\t}\n\te = files.propertyNames();\n\twhile ( e.hasMoreElements())\n\t{\n\t\tString value = (String)e.nextElement();\n\t\tmyOut.println( \"  UPLOADED: '\" + value + \"' = '\" +\n\t\t\t\tfiles.getProperty( value ) + \"'\" );\n\t}\n\n\treturn serveFile( uri, header, myRootDir, true );\n}", "path": "src\\com\\nevin\\NanoHTTPD.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * Retrieves the content of a sent file and saves it\n * to a temporary file.\n * The full path to the saved file is returned.\n **/\n", "func_signal": "private String saveTmpFile(byte[] b, int offset, int len)", "code": "{\n\tString path = \"\";\n\tif (len > 0)\n\t{\n\t\tString tmpdir = System.getProperty(\"java.io.tmpdir\");\n\t\ttry {\n\t\t\tFile temp = File.createTempFile(\"NanoHTTPD\", \"\", new File(tmpdir));\n\t\t\tOutputStream fstream = new FileOutputStream(temp);\n\t\t\tfstream.write(b, offset, len);\n\t\t\tfstream.close();\n\t\t\tpath = temp.getAbsolutePath();\n\t\t} catch (Exception e) { // Catch exception if any\n\t\t\tmyErr.println(\"Error: \" + e.getMessage());\n\t\t}\n\t}\n\treturn path;\n}", "path": "src\\com\\nevin\\NanoHTTPD.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "//our progress bar settings\n", "func_signal": "@Override\n    protected Dialog onCreateDialog(int id)", "code": "{\n        switch (id) {\n            case DIALOG_DOWNLOAD_PROGRESS: //we set this to 0\n                mProgressDialog = new ProgressDialog(this);\n                mProgressDialog.setMessage(\"Downloading file...\");\n                mProgressDialog.setIndeterminate(false);\n                mProgressDialog.setMax(100);\n                mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n                mProgressDialog.setCancelable(true);\n                mProgressDialog.show();\n                return mProgressDialog;\n            default:\n                return null;\n        }\n    }", "path": "src\\com\\nevin\\LocalClient.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * Starts as a standalone file server and waits for Enter.\n */\n", "func_signal": "public static void main( String[] args )", "code": "{\n\tmyOut.println( \"NanoHTTPD 1.25 (C) 2001,2005-2011 Jarno Elonen and (C) 2010 Konstantinos Togias\\n\" +\n\t\t\t\"(Command line options: [-p port] [-d root-dir] [--licence])\\n\" );\n\n\t// Defaults\n\tint port = 80;\n\tFile wwwroot = new File(\".\").getAbsoluteFile();\n\n\t// Show licence if requested\n\tfor ( int i=0; i<args.length; ++i )\n\t\tif(args[i].equalsIgnoreCase(\"-p\"))\n\t\t\tport = Integer.parseInt( args[i+1] );\n\t\telse if(args[i].equalsIgnoreCase(\"-d\"))\n\t\t\twwwroot = new File( args[i+1] ).getAbsoluteFile();\n\t\telse if ( args[i].toLowerCase().endsWith( \"licence\" ))\n\t\t{\n\t\t\tmyOut.println( LICENCE + \"\\n\" );\n\t\t\tbreak;\n\t\t}\n\n\ttry\n\t{\n\t\tnew NanoHTTPD( port, wwwroot );\n\t}\n\tcatch( IOException ioe )\n\t{\n\t\tmyErr.println( \"Couldn't start server:\\n\" + ioe );\n\t\tSystem.exit( -1 );\n\t}\n\n\tmyOut.println( \"Now serving files in port \" + port + \" from \\\"\" + wwwroot + \"\\\"\" );\n\tmyOut.println( \"Hit Enter to stop.\\n\" );\n\n\ttry { System.in.read(); } catch( Throwable t ) {}\n}", "path": "src\\com\\nevin\\NanoHTTPD.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * Convenience method that makes an InputStream out of\n * given text.\n */\n", "func_signal": "public Response( String status, String mimeType, String txt )", "code": "{\n\tthis.status = status;\n\tthis.mimeType = mimeType;\n\ttry\n\t{\n\t\tthis.data = new ByteArrayInputStream( txt.getBytes(\"UTF-8\"));\n\t}\n\tcatch ( java.io.UnsupportedEncodingException uee )\n\t{\n\t\tuee.printStackTrace();\n\t}\n}", "path": "src\\com\\nevin\\NanoHTTPD.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * It returns the offset separating multipart file headers\n * from the file's data.\n **/\n", "func_signal": "private int stripMultipartHeaders(byte[] b, int offset)", "code": "{\n\tint i = 0;\n\tfor (i=offset; i<b.length; i++)\n\t{\n\t\tif (b[i] == '\\r' && b[++i] == '\\n' && b[++i] == '\\r' && b[++i] == '\\n')\n\t\t\tbreak;\n\t}\n\treturn i+1;\n}", "path": "src\\com\\nevin\\NanoHTTPD.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * Returns an error message as a HTTP response and\n * throws InterruptedException to stop further request processing.\n */\n", "func_signal": "private void sendError( String status, String msg ) throws InterruptedException", "code": "{\n\tsendResponse( status, MIME_PLAINTEXT, null, new ByteArrayInputStream( msg.getBytes()));\n\tthrow new InterruptedException();\n}", "path": "src\\com\\nevin\\NanoHTTPD.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "//\u6587\u4ef6MD5\u503c\n", "func_signal": "public DownloadInfo(String url,int fileSize,int compeleteSize,\tString filePath, String fileMd5)", "code": "{\n   \tthis.url=url;\n   \tthis.fileSize = fileSize;\n       this.compeleteSize = compeleteSize;\n       this.filePath = filePath;\n       this.fileMd5 = fileMd5;\n   }", "path": "src\\com\\nevin\\downloader\\DownloadInfo.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * Sends given response to the socket.\n */\n", "func_signal": "private void sendResponse( String status, String mime, Properties header, InputStream data )", "code": "{\n\ttry\n\t{\n\t\tif ( status == null )\n\t\t\tthrow new Error( \"sendResponse(): Status can't be null.\" );\n\n\t\tOutputStream out = mySocket.getOutputStream();\n\t\tPrintWriter pw = new PrintWriter( out );\n\t\tpw.print(\"HTTP/1.0 \" + status + \" \\r\\n\");\n\n\t\tif ( mime != null )\n\t\t\tpw.print(\"Content-Type: \" + mime + \"\\r\\n\");\n\n\t\tif ( header == null || header.getProperty( \"Date\" ) == null )\n\t\t\tpw.print( \"Date: \" + gmtFrmt.format( new Date()) + \"\\r\\n\");\n\n\t\tif ( header != null )\n\t\t{\n\t\t\tEnumeration e = header.keys();\n\t\t\twhile ( e.hasMoreElements())\n\t\t\t{\n\t\t\t\tString key = (String)e.nextElement();\n\t\t\t\tString value = header.getProperty( key );\n\t\t\t\tpw.print( key + \": \" + value + \"\\r\\n\");\n\t\t\t}\n\t\t}\n\n\t\tpw.print(\"\\r\\n\");\n\t\tpw.flush();\n\n\t\tif ( data != null )\n\t\t{\n\t\t\tint pending = data.available();\t// This is to support partial sends, see serveFile()\n\t\t\tbyte[] buff = new byte[theBufferSize];\n\t\t\twhile (pending>0)\n\t\t\t{\n\t\t\t\tint read = data.read( buff, 0, ( (pending>theBufferSize) ?  theBufferSize : pending ));\n\t\t\t\tif (read <= 0)\tbreak;\n\t\t\t\tout.write( buff, 0, read );\n\t\t\t\tpending -= read;\n\t\t\t}\n\t\t}\n\t\tout.flush();\n\t\tout.close();\n\t\tif ( data != null )\n\t\t\tdata.close();\n\t}\n\tcatch( IOException ioe )\n\t{\n\t\t// Couldn't write? No can do.\n\t\ttry { mySocket.close(); } catch( Throwable t ) {}\n\t}\n}", "path": "src\\com\\nevin\\NanoHTTPD.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * Decodes the Multipart Body data and put it\n * into java Properties' key - value pairs.\n **/\n", "func_signal": "private void decodeMultipartData(String boundary, byte[] fbuf, BufferedReader in, Properties parms, Properties files)\n\t\tthrows InterruptedException", "code": "{\n\ttry\n\t{\n\t\tint[] bpositions = getBoundaryPositions(fbuf,boundary.getBytes());\n\t\tint boundarycount = 1;\n\t\tString mpline = in.readLine();\n\t\twhile ( mpline != null )\n\t\t{\n\t\t\tif (mpline.indexOf(boundary) == -1)\n\t\t\t\tsendError( HTTP_BADREQUEST, \"BAD REQUEST: Content type is multipart/form-data but next chunk does not start with boundary. Usage: GET /example/file.html\" );\n\t\t\tboundarycount++;\n\t\t\tProperties item = new Properties();\n\t\t\tmpline = in.readLine();\n\t\t\twhile (mpline != null && mpline.trim().length() > 0)\n\t\t\t{\n\t\t\t\tint p = mpline.indexOf( ':' );\n\t\t\t\tif (p != -1)\n\t\t\t\t\titem.put( mpline.substring(0,p).trim().toLowerCase(), mpline.substring(p+1).trim());\n\t\t\t\tmpline = in.readLine();\n\t\t\t}\n\t\t\tif (mpline != null)\n\t\t\t{\n\t\t\t\tString contentDisposition = item.getProperty(\"content-disposition\");\n\t\t\t\tif (contentDisposition == null)\n\t\t\t\t{\n\t\t\t\t\tsendError( HTTP_BADREQUEST, \"BAD REQUEST: Content type is multipart/form-data but no content-disposition info found. Usage: GET /example/file.html\" );\n\t\t\t\t}\n\t\t\t\tStringTokenizer st = new StringTokenizer( contentDisposition , \"; \" );\n\t\t\t\tProperties disposition = new Properties();\n\t\t\t\twhile ( st.hasMoreTokens())\n\t\t\t\t{\n\t\t\t\t\tString token = st.nextToken();\n\t\t\t\t\tint p = token.indexOf( '=' );\n\t\t\t\t\tif (p!=-1)\n\t\t\t\t\t\tdisposition.put( token.substring(0,p).trim().toLowerCase(), token.substring(p+1).trim());\n\t\t\t\t}\n\t\t\t\tString pname = disposition.getProperty(\"name\");\n\t\t\t\tpname = pname.substring(1,pname.length()-1);\n\n\t\t\t\tString value = \"\";\n\t\t\t\tif (item.getProperty(\"content-type\") == null) {\n\t\t\t\t\twhile (mpline != null && mpline.indexOf(boundary) == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tmpline = in.readLine();\n\t\t\t\t\t\tif ( mpline != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint d = mpline.indexOf(boundary);\n\t\t\t\t\t\t\tif (d == -1)\n\t\t\t\t\t\t\t\tvalue+=mpline;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tvalue+=mpline.substring(0,d-2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (boundarycount> bpositions.length)\n\t\t\t\t\t\tsendError( HTTP_INTERNALERROR, \"Error processing request\" );\n\t\t\t\t\tint offset = stripMultipartHeaders(fbuf, bpositions[boundarycount-2]);\n\t\t\t\t\tString path = saveTmpFile(fbuf, offset, bpositions[boundarycount-1]-offset-4);\n\t\t\t\t\tfiles.put(pname, path);\n\t\t\t\t\tvalue = disposition.getProperty(\"filename\");\n\t\t\t\t\tvalue = value.substring(1,value.length()-1);\n\t\t\t\t\tdo {\n\t\t\t\t\t\tmpline = in.readLine();\n\t\t\t\t\t} while (mpline != null && mpline.indexOf(boundary) == -1);\n\t\t\t\t}\n\t\t\t\tparms.put(pname, value);\n\t\t\t}\n\t\t}\n\t}\n\tcatch ( IOException ioe )\n\t{\n\t\tsendError( HTTP_INTERNALERROR, \"SERVER INTERNAL ERROR: IOException: \" + ioe.getMessage());\n\t}\n\t\t}", "path": "src\\com\\nevin\\NanoHTTPD.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * Serves file from homeDir and its' subdirectories (only).\n * Uses only URI, ignores all headers and HTTP parameters.\n */\n", "func_signal": "public Response serveFile( String uri, Properties header, File homeDir,\n\t\tboolean allowDirectoryListing )", "code": "{\n\tResponse res = null;\n\n\t// Make sure we won't die of an exception later\n\tif ( !homeDir.isDirectory())\n\t\tres = new Response( HTTP_INTERNALERROR, MIME_PLAINTEXT,\n\t\t\t\t\"INTERNAL ERRROR: serveFile(): given homeDir is not a directory.\" );\n\n\tif ( res == null )\n\t{\n\t\t// Remove URL arguments\n\t\turi = uri.trim().replace( File.separatorChar, '/' );\n\t\tif ( uri.indexOf( '?' ) >= 0 )\n\t\t\turi = uri.substring(0, uri.indexOf( '?' ));\n\n\t\t// Prohibit getting out of current directory\n\t\tif ( uri.startsWith( \"..\" ) || uri.endsWith( \"..\" ) || uri.indexOf( \"../\" ) >= 0 )\n\t\t\tres = new Response( HTTP_FORBIDDEN, MIME_PLAINTEXT,\n\t\t\t\t\t\"FORBIDDEN: Won't serve ../ for security reasons.\" );\n\t}\n\n\tFile f = new File( homeDir, uri );\n\tif ( res == null && !f.exists())\n\t\tres = new Response( HTTP_NOTFOUND, MIME_PLAINTEXT,\n\t\t\t\t\"Error 404, file not found.\" );\n\n\t// List the directory, if necessary\n\tif ( res == null && f.isDirectory())\n\t{\n\t\t// Browsers get confused without '/' after the\n\t\t// directory, send a redirect.\n\t\tif ( !uri.endsWith( \"/\" ))\n\t\t{\n\t\t\turi += \"/\";\n\t\t\tres = new Response( HTTP_REDIRECT, MIME_HTML,\n\t\t\t\t\t\"<html><body>Redirected: <a href=\\\"\" + uri + \"\\\">\" +\n\t\t\t\t\t\t\turi + \"</a></body></html>\");\n\t\t\tres.addHeader( \"Location\", uri );\n\t\t}\n\n\t\tif ( res == null )\n\t\t{\n\t\t\t// First try index.html and index.htm\n\t\t\tif ( new File( f, \"index.html\" ).exists())\n\t\t\t\tf = new File( homeDir, uri + \"/index.html\" );\n\t\t\telse if ( new File( f, \"index.htm\" ).exists())\n\t\t\t\tf = new File( homeDir, uri + \"/index.htm\" );\n\t\t\t// No index file, list the directory if it is readable\n\t\t\telse if ( allowDirectoryListing && f.canRead() )\n\t\t\t{\n\t\t\t\tString[] files = f.list();\n\t\t\t\tString msg = \"<html><body><h1>Directory \" + uri + \"</h1><br/>\";\n\n\t\t\t\tif ( uri.length() > 1 )\n\t\t\t\t{\n\t\t\t\t\tString u = uri.substring( 0, uri.length()-1 );\n\t\t\t\t\tint slash = u.lastIndexOf( '/' );\n\t\t\t\t\tif ( slash >= 0 && slash  < u.length())\n\t\t\t\t\t\tmsg += \"<b><a href=\\\"\" + uri.substring(0, slash+1) + \"\\\">..</a></b><br/>\";\n\t\t\t\t}\n\n\t\t\t\tif (files!=null)\n\t\t\t\t{\n\t\t\t\t\tfor ( int i=0; i<files.length; ++i )\n\t\t\t\t\t{\n\t\t\t\t\t\tFile curFile = new File( f, files[i] );\n\t\t\t\t\t\tboolean dir = curFile.isDirectory();\n\t\t\t\t\t\tif ( dir )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmsg += \"<b>\";\n\t\t\t\t\t\t\tfiles[i] += \"/\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmsg += \"<a href=\\\"\" + encodeUri( uri + files[i] ) + \"\\\">\" +\n\t\t\t\t\t\t\t\tfiles[i] + \"</a>\";\n\n\t\t\t\t\t\t// Show file size\n\t\t\t\t\t\tif ( curFile.isFile())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlong len = curFile.length();\n\t\t\t\t\t\t\tmsg += \" &nbsp;<font size=2>(\";\n\t\t\t\t\t\t\tif ( len < 1024 )\n\t\t\t\t\t\t\t\tmsg += len + \" bytes\";\n\t\t\t\t\t\t\telse if ( len < 1024 * 1024 )\n\t\t\t\t\t\t\t\tmsg += len/1024 + \".\" + (len%1024/10%100) + \" KB\";\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tmsg += len/(1024*1024) + \".\" + len%(1024*1024)/10%100 + \" MB\";\n\n\t\t\t\t\t\t\tmsg += \")</font>\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmsg += \"<br/>\";\n\t\t\t\t\t\tif ( dir ) msg += \"</b>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmsg += \"</body></html>\";\n\t\t\t\tres = new Response( HTTP_OK, MIME_HTML, msg );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tres = new Response( HTTP_FORBIDDEN, MIME_PLAINTEXT,\n\t\t\t\t\t\t\"FORBIDDEN: No directory listing.\" );\n\t\t\t}\n\t\t}\n\t}\n\n\ttry\n\t{\n\t\tif ( res == null )\n\t\t{\n\t\t\t// Get MIME type from file name extension, if possible\n\t\t\tString mime = null;\n\t\t\tint dot = f.getCanonicalPath().lastIndexOf( '.' );\n\t\t\tif ( dot >= 0 )\n\t\t\t\tmime = (String)theMimeTypes.get( f.getCanonicalPath().substring( dot + 1 ).toLowerCase());\n\t\t\tif ( mime == null )\n\t\t\t\tmime = MIME_DEFAULT_BINARY;\n\n\t\t\t// Calculate etag\n\t\t\tString etag = Integer.toHexString((f.getAbsolutePath() + f.lastModified() + \"\" + f.length()).hashCode());\n\n\t\t\t// Support (simple) skipping:\n\t\t\tlong startFrom = 0;\n\t\t\tlong endAt = -1;\n\t\t\tString range = header.getProperty( \"range\" );\n\t\t\tif ( range != null )\n\t\t\t{\n\t\t\t\tif ( range.startsWith( \"bytes=\" ))\n\t\t\t\t{\n\t\t\t\t\trange = range.substring( \"bytes=\".length());\n\t\t\t\t\tint minus = range.indexOf( '-' );\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif ( minus > 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstartFrom = Long.parseLong( range.substring( 0, minus ));\n\t\t\t\t\t\t\tendAt = Long.parseLong( range.substring( minus+1 ));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch ( NumberFormatException nfe ) {}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Change return code and add Content-Range header when skipping is requested\n\t\t\tlong fileLen = f.length();\n\t\t\tif (range != null && startFrom >= 0)\n\t\t\t{\n\t\t\t\tif ( startFrom >= fileLen)\n\t\t\t\t{\n\t\t\t\t\tres = new Response( HTTP_RANGE_NOT_SATISFIABLE, MIME_PLAINTEXT, \"\" );\n\t\t\t\t\tres.addHeader( \"Content-Range\", \"bytes 0-0/\" + fileLen);\n\t\t\t\t\tres.addHeader( \"ETag\", etag);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif ( endAt < 0 )\n\t\t\t\t\t\tendAt = fileLen-1;\n\t\t\t\t\tlong newLen = endAt - startFrom + 1;\n\t\t\t\t\tif ( newLen < 0 ) newLen = 0;\n\n\t\t\t\t\tfinal long dataLen = newLen;\n\t\t\t\t\tFileInputStream fis = new FileInputStream( f ) {\n\t\t\t\t\t\tpublic int available() throws IOException { return (int)dataLen; }\n\t\t\t\t\t};\n\t\t\t\t\tfis.skip( startFrom );\n\n\t\t\t\t\tres = new Response( HTTP_PARTIALCONTENT, mime, fis );\n\t\t\t\t\tres.addHeader( \"Content-Length\", \"\" + dataLen);\n\t\t\t\t\tres.addHeader( \"Content-Range\", \"bytes \" + startFrom + \"-\" + endAt + \"/\" + fileLen);\n\t\t\t\t\tres.addHeader( \"ETag\", etag);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (etag.equals(header.getProperty(\"if-none-match\")))\n\t\t\t\t\tres = new Response( HTTP_NOTMODIFIED, mime, \"\");\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tres = new Response( HTTP_OK, mime, new FileInputStream( f ));\n\t\t\t\t\tres.addHeader( \"Content-Length\", \"\" + fileLen);\n\t\t\t\t\tres.addHeader( \"ETag\", etag);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcatch( IOException ioe )\n\t{\n\t\tres = new Response( HTTP_FORBIDDEN, MIME_PLAINTEXT, \"FORBIDDEN: Reading file failed.\" );\n\t}\n\n\tres.addHeader( \"Accept-Ranges\", \"bytes\"); // Announce that the file server accepts partial content requestes\n\treturn res;\n}", "path": "src\\com\\nevin\\NanoHTTPD.java", "repo_name": "xiahua/AndroidHttpServer", "stars": 21, "license": "None", "language": "java", "size": 218}
{"docstring": "/**\n * Sets frame rate in frames per second. Equivalent to\n * <code>setDelay(1000/fps)</code>.\n * \n * @param fps\n *          float frame rate (frames per second)\n */\n", "func_signal": "public void setFrameRate(float fps)", "code": "{\n  if (fps != 0f) {\n    delay = (int)(100 / fps);\n  }\n}", "path": "src\\pro\\dbro\\timelapse\\AnimatedGifEncoder.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "/*\n * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in\n * radpower[|i-j|]\n * ---------------------------------------------------------------------------------\n */\n", "func_signal": "protected void alterneigh(int rad, int i, int b, int g, int r)", "code": "{\n\n  int j, k, lo, hi, a, m;\n  int[] p;\n\n  lo = i - rad;\n  if (lo < -1)\n    lo = -1;\n  hi = i + rad;\n  if (hi > netsize)\n    hi = netsize;\n\n  j = i + 1;\n  k = i - 1;\n  m = 1;\n  while ((j < hi) || (k > lo)) {\n    a = radpower[m++];\n    if (j < hi) {\n      p = network[j++];\n      try {\n        p[0] -= (a * (p[0] - b)) / alpharadbias;\n        p[1] -= (a * (p[1] - g)) / alpharadbias;\n        p[2] -= (a * (p[2] - r)) / alpharadbias;\n      } catch (Exception e) {\n      } // prevents 1.3 miscompilation\n    }\n    if (k > lo) {\n      p = network[k--];\n      try {\n        p[0] -= (a * (p[0] - b)) / alpharadbias;\n        p[1] -= (a * (p[1] - g)) / alpharadbias;\n        p[2] -= (a * (p[2] - r)) / alpharadbias;\n      } catch (Exception e) {\n      }\n    }\n  }\n}", "path": "src\\pro\\dbro\\timelapse\\AnimatedGifEncoder.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "/** A safe way to get an instance of the Camera object. */\n", "func_signal": "public static Camera getCameraInstance()", "code": "{\n\tCamera c = null;\n\ttry {\n\t\tif (TEST_FRONT_CAMERA) {\n\t\t\tc = Camera.open(1);\n\t\t\tCAMERA_FRONT_FACING = true;\n\t\t} else {\n\t\t\tc = Camera.open();\n\n\t\t\tif (c == null) {\n\t\t\t\t// Rear Camera is not available (in use or does not exist)\n\t\t\t\t// Try all other cameras\n\t\t\t\tint num_cameras = Camera.getNumberOfCameras();\n\t\t\t\tfor (int x = 0; x < num_cameras; x++) {\n\t\t\t\t\tc = Camera.open(x);\n\t\t\t\t\tif (c != null) {\n\t\t\t\t\t\tCAMERA_FRONT_FACING = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tLog.d(\"getCameraInstance\", e.toString());\n\t}\n\n\treturn c; // returns null if camera is unavailable\n}", "path": "src\\pro\\dbro\\timelapse\\CameraActivity.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "// This method is executed in a separate thread\n", "func_signal": "@Override\nprotected Boolean doInBackground(Integer... input)", "code": "{\n\tif(input[0] == -1){\n\t\tLog.d(TAG,\"Error: no _id given\");\n\t\treturn false;\n\t}\n\t\n\tTimeLapseApplication tla = TimeLapseApplication.applicationContext;\n\t\n\tCursor result = tla.getTimeLapseById(input[0], null);\n\tif(result.moveToFirst()){\n\t\tString tlPath = result.getString(result.getColumnIndex(SQLiteWrapper.COLUMN_DIRECTORY_PATH));\n\t\tFile timelapse_directory = new File(tlPath);\n\t\tDeleteRecursive(timelapse_directory);\n\t\t// delete record in ContentProvider\n\t\ttla.deleteTimeLapseById(input[0]);\n\n\t\tresult.close();\n\t\treturn true;\n\t}\n\tresult.close();\n\treturn false;\n}", "path": "src\\pro\\dbro\\timelapse\\FileUtils.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "/**\n * Adds next GIF frame. The frame is not written immediately, but is actually\n * deferred until the next frame is received so that timing data can be\n * inserted. Invoking <code>finish()</code> flushes all frames. If\n * <code>setSize</code> was not invoked, the size of the first image is used\n * for all subsequent frames.\n * \n * @param im\n *          BufferedImage containing frame to write.\n * @return true if successful.\n */\n", "func_signal": "public boolean addFrame(Bitmap im)", "code": "{\n  if ((im == null) || !started) {\n    return false;\n  }\n  boolean ok = true;\n  try {\n    if (!sizeSet) {\n      // use first frame's size\n      setSize(im.getWidth(), im.getHeight());\n    }\n    image = im;\n    getImagePixels(); // convert to correct format if necessary\n    analyzePixels(); // build color table & map pixels\n    if (firstFrame) {\n      writeLSD(); // logical screen descriptior\n      writePalette(); // global color table\n      if (repeat >= 0) {\n        // use NS app extension to indicate reps\n        writeNetscapeExt();\n      }\n    }\n    writeGraphicCtrlExt(); // write graphic control extension\n    writeImageDesc(); // image descriptor\n    if (!firstFrame) {\n      writePalette(); // local color table\n    }\n    writePixels(); // encode and write pixel data\n    firstFrame = false;\n  } catch (IOException e) {\n    ok = false;\n  }\n\n  return ok;\n}", "path": "src\\pro\\dbro\\timelapse\\AnimatedGifEncoder.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "/*\n * Insertion sort of network and building of netindex[0..255] (to do after\n * unbias)\n * -------------------------------------------------------------------------------\n */\n", "func_signal": "public void inxbuild()", "code": "{\n\n  int i, j, smallpos, smallval;\n  int[] p;\n  int[] q;\n  int previouscol, startpos;\n\n  previouscol = 0;\n  startpos = 0;\n  for (i = 0; i < netsize; i++) {\n    p = network[i];\n    smallpos = i;\n    smallval = p[1]; /* index on g */\n    /* find smallest in i..netsize-1 */\n    for (j = i + 1; j < netsize; j++) {\n      q = network[j];\n      if (q[1] < smallval) { /* index on g */\n        smallpos = j;\n        smallval = q[1]; /* index on g */\n      }\n    }\n    q = network[smallpos];\n    /* swap p (i) and q (smallpos) entries */\n    if (i != smallpos) {\n      j = q[0];\n      q[0] = p[0];\n      p[0] = j;\n      j = q[1];\n      q[1] = p[1];\n      p[1] = j;\n      j = q[2];\n      q[2] = p[2];\n      p[2] = j;\n      j = q[3];\n      q[3] = p[3];\n      p[3] = j;\n    }\n    /* smallval entry is now in position i */\n    if (smallval != previouscol) {\n      netindex[previouscol] = (startpos + i) >> 1;\n      for (j = previouscol + 1; j < smallval; j++)\n        netindex[j] = i;\n      previouscol = smallval;\n      startpos = i;\n    }\n  }\n  netindex[previouscol] = (startpos + maxnetpos) >> 1;\n  for (j = previouscol + 1; j < 256; j++)\n    netindex[j] = maxnetpos; /* really 256 */\n}", "path": "src\\pro\\dbro\\timelapse\\AnimatedGifEncoder.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "/**\n * Sets the GIF frame size. The default size is the size of the first frame\n * added if this method is not invoked.\n * \n * @param w\n *          int frame width.\n * @param h\n *          int frame width.\n */\n", "func_signal": "public void setSize(int w, int h)", "code": "{\n  width = w;\n  height = h;\n  if (width < 1)\n    width = 320;\n  if (height < 1)\n    height = 240;\n  sizeSet = true;\n}", "path": "src\\pro\\dbro\\timelapse\\AnimatedGifEncoder.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "// ----------------------------------------------------------------------------\n// Return the next pixel from the image\n// ----------------------------------------------------------------------------\n", "func_signal": "private int nextPixel()", "code": "{\n  if (remaining == 0)\n    return EOF;\n\n  --remaining;\n\n  byte pix = pixAry[curPixel++];\n\n  return pix & 0xff;\n}", "path": "src\\pro\\dbro\\timelapse\\AnimatedGifEncoder.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "/** Show an AlertDialog corresponding to a Camera Error */\n", "func_signal": "private void showCameraErrorDialog()", "code": "{\n\tAlertDialog noCameraAlertDialog = new AlertDialog.Builder(\n\t\t\t(Context) context)\n\t\t\t.setTitle(\n\t\t\t\t\tgetResources().getStringArray(\n\t\t\t\t\t\t\tR.array.camera_error_dialog)[0])\n\t\t\t.setMessage(\n\t\t\t\t\tgetResources().getStringArray(\n\t\t\t\t\t\t\tR.array.camera_error_dialog)[1])\n\t\t\t.setNeutralButton(getString(R.string.dialog_ok),\n\t\t\t\t\tnew OnClickListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onClick(DialogInterface thisDialog,\n\t\t\t\t\t\t\t\tint arg1) {\n\t\t\t\t\t\t\t// Cancel the dialog\n\t\t\t\t\t\t\tthisDialog.cancel();\n\t\t\t\t\t\t}\n\t\t\t\t\t}).create();\n\n\tnoCameraAlertDialog.show();\n}", "path": "src\\pro\\dbro\\timelapse\\CameraActivity.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "// This method is executed in a separate thread\n", "func_signal": "@Override\nprotected Boolean doInBackground(String... filePath)", "code": "{\n\tTimeLapseApplication tla = TimeLapseApplication.applicationContext;\n\n\t// For now, hardcode filePath directory\n\t//File dir = new File(filePath[0]);\n\tFile dir = new File(Environment.getExternalStorageDirectory(), MEDIA_DIRECTORY);\n\tLog.d(TAG, \"reading filesystem. Root: \" + dir.getAbsolutePath());\n\t// A file exists in place of the requested root TimeLapse directory\n\t// TODO: Prompt user for action\n\tif(dir.exists() && !dir.isDirectory()){\n\t\tLog.d(TAG,\"Filename collision with TimeLapse directory\");\n\t\treturn false;\n\t}\n\telse if(!dir.exists()){\n\t\t// The TimeLapse root directory didn't exist\n\t\tLog.d(TAG,\"Creating TimeLapse directory\");\n\t\tdir.mkdir();\n\t\treturn false;\n\t}\n\telse\n\t\tLog.d(TAG,\"TimeLapse directory found!\");\n\t\n\tContentValues file_content;\n\tGson gson = new GsonBuilder().registerTypeAdapter(ContentValues.class, new FileUtils.TimeLapseDeserializer()).create();\n\tfor (File child : dir.listFiles()) {\n\t\tLog.d(TAG,\"Inspecing child: \" + child.getAbsolutePath());\n\t\tif (!child.isDirectory() || \".\".equals(child.getName()) || \"..\".equals(child.getName())) {\n\t\t\tLog.d(TAG,\"Ignoring child\");\n\t\t\tcontinue;  // Ignore the self and parent aliases. Also non-directories\n\t\t}\n\t\t// if the child is a directory, attempt to parse the expected metadata.json\n\t\tFile metadata = new File(child, METADATA_FILENAME);\n\t\tLog.d(TAG,\"Checking for : \" + metadata.getAbsolutePath());\n\t\tif (metadata.exists()){\n\t\t\tLog.d(TAG,\"Metadata found\");\n\t\t\ttry{\n\t\t\t\t// automatically deserialize JSON attributes matching TimeLapse fields\n\t\t\t\tfile_content = gson.fromJson(fileToString(metadata), ContentValues.class);\n\t\t\t\tfile_content.put(SQLiteWrapper.COLUMN_DIRECTORY_PATH, child.getAbsolutePath());\n\t\t\t\t// manually assign other attributes\n\t\t\t\t\n\t\t\t\t// count images in directory\n\t\t\t\tif (child.listFiles(FileUtils.mImageFilter) != null && child.listFiles(FileUtils.mImageFilter).length != 0){\n\t\t\t\t\tfile_content = findOrGenerateThumbnail(file_content);\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tfile_content.put(SQLiteWrapper.COLUMN_IMAGE_COUNT, 0);\n\t\t\t\t//Log.d(TAG, String.valueOf(file_content.image_count) + \" images found\");\n\t\t\t\t// set directory path\n\t\t\t\tfile_content.put(SQLiteWrapper.COLUMN_DIRECTORY_PATH, child.getPath());\n\t\t\t\t// assign id based on dir name\n\t\t\t\tfile_content.put(SQLiteWrapper.COLUMN_TIMELAPSE_ID, child.getName());\n\n\t\t\t\t// Add timelapse to the TimeLapseContentProvider\n\t\t\t\ttla.updateOrInsertTimeLapseByContentValues(file_content);\n\t\t\t\tLog.d(TAG,\"Successfully parsed timelapse\");\n\t\t\t}\n\t\t\tcatch(Throwable t){\n\t\t\t\tLog.d(TAG,\"\"+ t.toString());\n\t\t\t\t//Log.d(TAG,t.getLocalizedMessage());\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tLog.d(TAG,\"Metadata not found\");\n\t\t\tcontinue;\n\t\t}\n   \n    }\n\treturn true;\n}", "path": "src\\pro\\dbro\\timelapse\\FileUtils.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "/*\n * Move neuron i towards biased (b,g,r) by factor alpha\n * ----------------------------------------------------\n */\n", "func_signal": "protected void altersingle(int alpha, int i, int b, int g, int r)", "code": "{\n\n  /* alter hit neuron */\n  int[] n = network[i];\n  n[0] -= (alpha * (n[0] - b)) / initalpha;\n  n[1] -= (alpha * (n[1] - g)) / initalpha;\n  n[2] -= (alpha * (n[2] - r)) / initalpha;\n}", "path": "src\\pro\\dbro\\timelapse\\AnimatedGifEncoder.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "// This method is executed in a separate thread\n", "func_signal": "@Override\nprotected String doInBackground(Integer... input)", "code": "{\n\tif(input[0] == -1){\n\t\tLog.d(TAG,\"Error: no _id given\");\n\t\treturn null;\n\t}\n\t\n\tTimeLapseApplication tla = TimeLapseApplication.applicationContext;\n\t// Check that image_count -1 is available in image and thumb dir\n\t// delete image and thumb corresponding to image_count\n\t// updateTimeLapse method to update JSON\n\t\n\tCursor result = tla.getTimeLapseById(input[0], null);\n\tif(result.moveToFirst()){\n\t\tString tlPath = result.getString(result.getColumnIndex(SQLiteWrapper.COLUMN_DIRECTORY_PATH));\n\t\tint image_count = result.getInt(result.getColumnIndex(SQLiteWrapper.COLUMN_IMAGE_COUNT));\n\t\t\n\t\t// If no image exists return\n\t\tif(image_count == 0)\n\t\t\treturn null;\n\t\t\n\t\t// Delete image\n\t\tFile to_delete = new File(tlPath,String.valueOf(image_count) + \".jpeg\");\n\t\tto_delete.delete();\n\t\t\n\t\t// Delete corresponding thumbnail\n\t\tFile thumbnail_dir = new File(tlPath, TimeLapse.thumbnail_dir);\n\t\tif(thumbnail_dir.exists() && thumbnail_dir.isDirectory()){\n\t\t\tto_delete = new File(thumbnail_dir, String.valueOf(image_count) + TimeLapse.thumbnail_suffix + \".jpeg\");\n\t\t\tto_delete.delete();\n\t\t}\n\t\t\n\t\tString last_image_path = null;\n\t\tString thumbnail_path = null;\n\t\tif(image_count > 1){\n\t\t\tFile new_last_image = new File(tlPath, String.valueOf(image_count-1) + \".jpeg\");\n\t\t\tif(new_last_image.exists())\n\t\t\t\tlast_image_path = new_last_image.getAbsolutePath();\n\t\t\tFile new_thumbnail = new File(thumbnail_dir, String.valueOf(image_count-1) + TimeLapse.thumbnail_suffix + \".jpeg\");\n\t\t\tif(new_thumbnail.exists())\n\t\t\t\tthumbnail_path = new_thumbnail.getAbsolutePath();\n\t\t\t\n\t\t}\n\t\t\n\t\t// Update record in ContentProvider and filesystem\n\t\ttla.updateTimeLapseById(input[0],\n\t\t\t\tnew String[]{SQLiteWrapper.COLUMN_IMAGE_COUNT, SQLiteWrapper.COLUMN_LAST_IMAGE_PATH, SQLiteWrapper.COLUMN_THUMBNAIL_PATH}, \n\t\t\t\tnew String[]{String.valueOf(image_count-1), last_image_path, thumbnail_path});\n\t\t// update TimeLapse\n\t\t//tla.getTimeLapseById(input[0], null)\n\t\t\n\t\t// Reflect changes in TimeLapse .json\n\t\t//new FileUtils.SaveTimeLapsesOnFilesystem().execute(SQLiteWrapper.cursorRowToContentValues(tla.getTimeLapseById(input[0], null)));\n\t\t\n\t\t\n\t\tresult.close();\n\t\treturn last_image_path;\n\t}\n\tresult.close();\n\treturn null;\n}", "path": "src\\pro\\dbro\\timelapse\\FileUtils.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "/**\n * Sets the number of times the set of GIF frames should be played. Default is\n * 1; 0 means play indefinitely. Must be invoked before the first image is\n * added.\n * \n * @param iter\n *          int number of iterations.\n * @return\n */\n", "func_signal": "public void setRepeat(int iter)", "code": "{\n  if (iter >= 0) {\n    repeat = iter;\n  }\n}", "path": "src\\pro\\dbro\\timelapse\\AnimatedGifEncoder.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "// Given filepath, and required display height, width, loads scaled bitmap without occupying memory == original filesize\n", "func_signal": "public static Bitmap decodeSampledBitmapFromResource(String path,\n        int reqWidth, int reqHeight)", "code": "{\n\n    // First decode with inJustDecodeBounds=true to check dimensions\n    final BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    //BitmapFactory.decodeResource(res, resId, options);\n    BitmapFactory.decodeFile(path, options); \n\n    // Calculate inSampleSize\n    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n\n    // Decode bitmap with inSampleSize set\n    options.inJustDecodeBounds = false;\n    //return BitmapFactory.decodeResource(res, resId, options);\n    return BitmapFactory.decodeFile(path, options);\n}", "path": "src\\pro\\dbro\\timelapse\\FileUtils.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "/** Release Camera when application is finished */\n", "func_signal": "private void releaseCamera()", "code": "{\n\tif (mCamera != null) {\n\t\tLog.d(TAG,\"Stopping preview in SurfaceDestroyed().\");\n    \tmCamera.setPreviewCallback(null);\n    \tmCamera.stopPreview();\n    \tmCamera.release(); //it is important that this is done so camera is available to other applications.\n\t\t//mCamera.release(); // release the camera for other applications\n\t\t// release camera when CameraPreview destroyed\n\t\tmCamera = null;\n\t}\n}", "path": "src\\pro\\dbro\\timelapse\\CameraActivity.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "/**\n * Sets quality of color quantization (conversion of images to the maximum 256\n * colors allowed by the GIF specification). Lower values (minimum = 1)\n * produce better colors, but slow processing significantly. 10 is the\n * default, and produces good color mapping at reasonable speeds. Values\n * greater than 20 do not yield significant improvements in speed.\n * \n * @param quality\n *          int greater than 0.\n * @return\n */\n", "func_signal": "public void setQuality(int quality)", "code": "{\n  if (quality < 1)\n    quality = 1;\n  sample = quality;\n}", "path": "src\\pro\\dbro\\timelapse\\AnimatedGifEncoder.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "/**\n * Returns index of palette color closest to c\n * \n */\n", "func_signal": "protected int findClosest(int c)", "code": "{\n  if (colorTab == null)\n    return -1;\n  int r = (c >> 16) & 0xff;\n  int g = (c >> 8) & 0xff;\n  int b = (c >> 0) & 0xff;\n  int minpos = 0;\n  int dmin = 256 * 256 * 256;\n  int len = colorTab.length;\n  for (int i = 0; i < len;) {\n    int dr = r - (colorTab[i++] & 0xff);\n    int dg = g - (colorTab[i++] & 0xff);\n    int db = b - (colorTab[i] & 0xff);\n    int d = dr * dr + dg * dg + db * db;\n    int index = i / 3;\n    if (usedEntry[index] && (d < dmin)) {\n      dmin = d;\n      minpos = index;\n    }\n    i++;\n  }\n  return minpos;\n}", "path": "src\\pro\\dbro\\timelapse\\AnimatedGifEncoder.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "// Generate a thumbnail given an original, and set TimeLapse.thumbnail_path\n// if thumbnail matching last image in TimeLapse exists, set TimeLapse.thumbnail_path \n", "func_signal": "public static ContentValues findOrGenerateThumbnail(ContentValues timelapse)", "code": "{\n\t\n\tFile timelapse_dir = new File(timelapse.getAsString(SQLiteWrapper.COLUMN_DIRECTORY_PATH));\n\tLog.d(\"findOrGenerateThumbnail\",timelapse_dir.getAbsolutePath());\n\t// if the timelapse dir does not exist or is a file,\n\t// fixing the application state is beyond the scope of this method\n\t// TODO: for performance, remove this check \n\tif(!timelapse_dir.exists() || timelapse_dir.isFile())\n\t\treturn timelapse;\n\t\n\t// Make thumbnail folder if it doesn't exist\n\tFile thumbnail_dir = new File(timelapse_dir, TimeLapse.thumbnail_dir);\n    if (! thumbnail_dir.exists()){\n        if (! thumbnail_dir.mkdirs()){\n            Log.d(TAG, \"failed to create thumbnail directory\");\n            return timelapse;\n        }\n    }\n    // Determine last image in TimeLapse dir and generate thumbnail if it doesn't exist\n\tFile[] children = timelapse_dir.listFiles(new imageFilter());\n\ttimelapse.put(SQLiteWrapper.COLUMN_IMAGE_COUNT, timelapse_dir.listFiles(new imageFilter()).length);\n\t// Generate thumbnail of last image and save to storage as \"./thumbnail_dir/XXXthumbnail_suffix.jpeg\"\n\tFile original = new File(timelapse_dir, timelapse.getAsString(SQLiteWrapper.COLUMN_IMAGE_COUNT) + \".jpeg\");\n\ttimelapse.put(SQLiteWrapper.COLUMN_LAST_IMAGE_PATH, original.getAbsolutePath()); \n\tBitmap thumbnail_bitmap = FileUtils.decodeSampledBitmapFromResource(original.getAbsolutePath(), TimeLapse.thumbnail_width, TimeLapse.thumbnail_height);\n\tFile thumbnail_file = new File(thumbnail_dir, timelapse.getAsString(SQLiteWrapper.COLUMN_IMAGE_COUNT)+ TimeLapse.thumbnail_suffix +\".jpeg\");\n\tif(!thumbnail_file.exists()){\n\t\tFileOutputStream out;\n\t\ttry {\n\t\t\tout = new FileOutputStream(thumbnail_file);\n\t\t\tthumbnail_bitmap.compress(Bitmap.CompressFormat.JPEG, 90, out);\n\t\t\ttimelapse.put(SQLiteWrapper.COLUMN_THUMBNAIL_PATH, thumbnail_file.getAbsolutePath()); \n\t\t\t//Log.d(\"Thumbnail\",\"TL \" + String.valueOf(timelapse.id) + \" thumb set to \" + timelapse.thumbnail_path);\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// Not sure when this would happen...\n\t\t\t// FileOutputStream creates file if it doesn't exist (the intended case)\n\t\t\t// Maybe on permission denied...\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\telse{\n\t\t//if thumbail exists, store it with TimeLapse\n\t\ttimelapse.put(SQLiteWrapper.COLUMN_THUMBNAIL_PATH, thumbnail_file.getAbsolutePath());\n\t}\n\t\n\treturn timelapse;\n}", "path": "src\\pro\\dbro\\timelapse\\FileUtils.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "/**\n * Encodes and writes pixel data\n */\n", "func_signal": "protected void writePixels() throws IOException", "code": "{\n  LZWEncoder encoder = new LZWEncoder(width, height, indexedPixels, colorDepth);\n  encoder.encode(out);\n}", "path": "src\\pro\\dbro\\timelapse\\AnimatedGifEncoder.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "/**\n * Writes string to output stream\n */\n", "func_signal": "protected void writeString(String s) throws IOException", "code": "{\n  for (int i = 0; i < s.length(); i++) {\n    out.write((byte) s.charAt(i));\n  }\n}", "path": "src\\pro\\dbro\\timelapse\\AnimatedGifEncoder.java", "repo_name": "growpedia/Timelapse-Android", "stars": 23, "license": "None", "language": "java", "size": 1655}
{"docstring": "/**\n * Constructs an empty insertion-ordered <tt>LinkedHashMap</tt> instance\n * with the default initial capacity (16) and load factor (0.75).\n */\n", "func_signal": "public FastLinkedHashMap()", "code": "{\n    super();\n    accessOrder = false;\n}", "path": "java\\FastLinkedHashMap.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Returns a shallow copy of this <tt>HashMap</tt> instance:\n * the keys and values themselves are not cloned.\n *\n * @return a shallow copy of this map\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic FastHashMap<K,V> clone()", "code": "{\n    FastHashMap<K,V> that = null;\n    try {\n        that = (FastHashMap<K,V>)super.clone();\n    } catch (CloneNotSupportedException e) {\n    }\n    if (indexTable != null)\n        that.indexTable = Arrays.copyOf(indexTable, hashLen+threshold);\n    if (keyValueTable != null)\n        that.keyValueTable = Arrays.copyOf(keyValueTable, (threshold<<keyIndexShift)+1);\n    that.keySet = null;\n    that.values = null;\n    that.entrySet = null;\n    that.modCount = 0;\n    return that;\n}", "path": "java\\FastHashMap.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Removes the mapping for the specified key from this map if present.\n *\n * @param  key key whose mapping is to be removed from the map\n * @return the previous value associated with <tt>key</tt>, or\n *         <tt>null</tt> if there was no mapping for <tt>key</tt>.\n *         (A <tt>null</tt> return can also indicate that the map\n *         previously associated <tt>null</tt> with <tt>key</tt>.)\n */\n", "func_signal": "public V remove(Object key)", "code": "{\n    V result = removeKey(key, NO_INDEX);\n    return result == NOT_FOUND ? null : result;\n}", "path": "java\\FastHashMap.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Constructs a new <tt>HashMap</tt> with the same mappings as the\n * specified <tt>Map</tt>.  The <tt>HashMap</tt> is created with\n * default load factor (0.75) and an initial capacity sufficient to\n * hold the mappings in the specified <tt>Map</tt>.\n *\n * @param   m the map whose mappings are to be placed in this map\n * @throws  NullPointerException if the specified map is null\n */\n", "func_signal": "public FastHashMap(Map<? extends K, ? extends V> m)", "code": "{\n    this(Math.max((int) (m.size() / DEFAULT_LOAD_FACTOR) + 1,\n                  DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);\n    for (Map.Entry<? extends K, ? extends V> e : m.entrySet())\n        put(e.getKey(), e.getValue(), false);\n}", "path": "java\\FastHashMap.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Constructs an insertion-ordered <tt>LinkedHashMap</tt> instance with\n * the same mappings as the specified map.  The <tt>LinkedHashMap</tt>\n * instance is created with a default load factor (0.75) and an initial\n * capacity sufficient to hold the mappings in the specified map.\n *\n * @param  m the map whose mappings are to be placed in this map\n * @throws NullPointerException if the specified map is null\n */\n", "func_signal": "public FastLinkedHashMap(Map<? extends K, ? extends V> m)", "code": "{\n    super(m);\n    accessOrder = false;\n}", "path": "java\\FastLinkedHashMap.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n *\n * @param value\n * @return\n */\n", "func_signal": "public boolean containsValue(Object value)", "code": "{\n    if (nullKeyPresent\n            && (nullValue == value || value != null\n                    && value.equals(nullValue)))\n        return true;\n    Object[] kv = keyValueTable;\n    if (kv == null)\n        return false;\n    int len = kv.length;\n    for (int i = 0; i < len; i += 2) {\n        if (kv[i] != null) {\n            Object v = kv[i + 1];\n            if (v == value || value != null && value.equals(v))\n                return true;\n        }\n    }\n\n    // ToDo: overflowTable\n\n    return false;\n}", "path": "java\\FastHashMap2.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Compares the specified object with this map for equality.  Returns\n * <tt>true</tt> if the given object is also a map and the two maps\n * represent the same mappings.  More formally, two maps <tt>m1</tt> and\n * <tt>m2</tt> represent the same mappings if\n * <tt>m1.entrySet().equals(m2.entrySet())</tt>.  This ensures that the\n * <tt>equals</tt> method works properly across different implementations\n * of the <tt>Map</tt> interface.\n *\n * <p>This implementation first checks if the specified object is this map;\n * if so it returns <tt>true</tt>.  Then, it checks if the specified\n * object is a map whose size is identical to the size of this map; if\n * not, it returns <tt>false</tt>.  If so, it iterates over this map's\n * <tt>entrySet</tt> collection, and checks that the specified map\n * contains each mapping that this map contains.  If the specified map\n * fails to contain such a mapping, <tt>false</tt> is returned.  If the\n * iteration completes, <tt>true</tt> is returned.\n *\n * @param o object to be compared for equality with this map\n * @return <tt>true</tt> if the specified object is equal to this map\n */\n", "func_signal": "public boolean equals(Object o)", "code": "{\n    if (o == this)\n        return true;\n    if (!(o instanceof Map<?,?>))\n        return false;\n    @SuppressWarnings(\"unchecked\")\n    Map<K,V> m = (Map<K,V>) o;\n    if (m.size() != size)\n        return false;\n    for (int i = NULL_INDEX; i < firstUnusedIndex; i++)\n        if (!isEmpty(i)) {\n            Object key = i == NULL_INDEX ? null : keyValueTable[(i<<keyIndexShift)+1];\n            Object value = keyIndexShift > 0 ?\n                keyValueTable[(i<<keyIndexShift)+2] :\n                DUMMY_VALUE;\n            if (value == null) {\n                if (!(m.get(key) == null && m.containsKey(key)))\n                    return false;\n            } else {\n                Object value2 = m.get(key);\n                if (value != value2 && !value.equals(value2))\n                    return false;\n            }\n        }\n    return true;\n}", "path": "java\\FastHashMap.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Returns the value to which the specified key is mapped,\n * or {@code null} if this map contains no mapping for the key.\n *\n * <p>More formally, if this map contains a mapping from a key\n * {@code k} to a value {@code v} such that {@code (key==null ? k==null :\n * key.equals(k))}, then this method returns {@code v}; otherwise\n * it returns {@code null}.  (There can be at most one such mapping.)\n *\n * <p>A return value of {@code null} does not <i>necessarily</i>\n * indicate that the map contains no mapping for the key; it's also\n * possible that the map explicitly maps the key to {@code null}.\n * The {@link #containsKey containsKey} operation may be used to\n * distinguish these two cases.\n *\n * @see #put(Object, Object)\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic V get(Object key)", "code": "{\n    // Null special case\n    if (key == null)\n        // HashSet (keyIndexShift==0) uses only containsKey\n        return nullKeyPresent ? (V)keyValueTable[0] : null;\n    // Check arrays lazy allocation\n    if (indexTable == null)\n        return null;\n    // Compute hash index\n    int hc = hash(key.hashCode());\n    int index = indexTable[hc & (hashLen-1)];\n    // Empty?\n    int control = index & CONTROL_BITS;\n    if (control == CONTROL_EMPTY)\n        return null;\n    // Search\n    int mask = AVAILABLE_BITS ^ (hashLen-1);\n    while (true) {\n        int position = index & (hashLen-1);\n        if ((index & mask) == (hc & mask)) {\n            // HashSet (keyIndexShift==0) uses only containsKey\n            Object key1 = keyValueTable[(position<<1)+1];\n            if (key == key1 || key.equals(key1))\n                return (V)keyValueTable[(position<<1)+2];\n        }\n        // Move forward\n        if (control == CONTROL_END)\n            return null; // END is more frequent - check it first\n        else if (control == CONTROL_OVERFLOW)\n            index = indexTable[hashLen+position];\n        else if (control == CONTROL_NEXT)\n            index = indexTable[(hc+1) & (hashLen-1)];\n        else // CONTROL_EMPTY\n            return null;\n        control = index & CONTROL_BITS;\n    }\n}", "path": "java\\FastHashMap.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Constructs an empty insertion-ordered <tt>LinkedHashMap</tt> instance\n * with the specified initial capacity and load factor.\n *\n * @param  initialCapacity the initial capacity\n * @param  loadFactor      the load factor\n * @throws IllegalArgumentException if the initial capacity\n *         is too low or the load factor is nonpositive\n */\n", "func_signal": "public FastLinkedHashMap(int initialCapacity, float loadFactor)", "code": "{\n    super(initialCapacity, loadFactor);\n    accessOrder = false;\n}", "path": "java\\FastLinkedHashMap.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Returns <tt>true</tt> if this map maps one or more keys to the\n * specified value.\n *\n * @param value value whose presence in this map is to be tested\n * @return <tt>true</tt> if this map maps one or more keys to the\n *         specified value\n */\n", "func_signal": "public boolean containsValue(Object value)", "code": "{\n    // Check arrays lazy allocation\n    if (keyValueTable == null || size == 0)\n        return false;\n    // No values in table special case\n    if (keyIndexShift == 0)\n        return size > 0 && value == DUMMY_VALUE;\n    // Search\n    for (int i = NULL_INDEX; i < firstUnusedIndex ; i++)\n        if (!isEmpty(i)) { // Not deleted\n            Object o = keyValueTable[(i<<keyIndexShift)+2];\n            if (o == value || o != null && o.equals(value))\n                return true;\n        }\n    return false;\n}", "path": "java\\FastHashMap.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Internal self-test.\n */\n", "func_signal": "public void validate(String s)", "code": "{\n    //\n    if (keyValueTable == null || indexTable == null) {\n        if (threshold > 0)\n            throw new RuntimeException(\"threshold=\" + threshold\n                    + \" with null tables - \" + s);\n        return;\n    }\n\n    //\n    int size1 = nullKeyPresent ? 1 : 0, size2 = size1;\n    int len = indexTable.length, mask = len - 1, hcMask = AVAILABLE_BITS\n            & ~mask;\n\n    //\n    if (keyValueTable.length != (len << 1))\n        throw new RuntimeException(\"keyValueTable.len=\"\n                + keyValueTable.length + \", must be \" + (len << 1) + \" - \"\n                + s);\n    if (overflowTable != null && overflowTable.length != len)\n        throw new RuntimeException(\"overflowTable.len=\"\n                + overflowTable.length + \", must be \" + len + \" - \" + s);\n    //\n    for (int i = 0; i < len; i++) {\n        Object key = keyValueTable[i << 1];\n        if (key != null) {\n            size1++;\n            int ci = indexTable[i];\n            if ((ci & FOREIGN) == 0) {\n                int j = i;\n                while (true) {\n                    size2++;\n                    int hc = hash(key.hashCode());\n                    if ((hc & mask) != i)\n                        throw new RuntimeException(\"Key \" + key\n                                + \" in wrong hash bin (\" + i\n                                + \"), must be \" + (hc & mask) + \" - \" + s);\n                    if ((hc & hcMask) != (ci & hcMask))\n                        throw new RuntimeException(\"Wrong hc bits (\"\n                                + (ci & hcMask) + \" at \" + j + \" hash bin \"\n                                + i + \", must be \" + (hc & hcMask) + \" - \"\n                                + s);\n\n                    // next\n                    if ((ci & mask) == i)\n                        break;\n                    j = ci & mask;\n                    ci = indexTable[j];\n                    if ((ci & FOREIGN) == 0)\n                        throw new RuntimeException(\n                                \"FOREIGN flag not set at \" + j\n                                        + \" hash bin \" + i + \" - \" + s);\n                    key = keyValueTable[j << 1];\n                }\n            }\n        }\n\n        //\n        if (overflowTable != null && overflowTable[i] != null) {\n            // ToDo\n        }\n    }\n    if (size1 != size)\n        throw new RuntimeException(\"# of not null cella: \" + size1\n                + \", must be \" + size + \" - \" + s);\n\n    if (size2 != size)\n        throw new RuntimeException(\"# of elements: \" + size2 + \", must be \"\n                + size + \" - \" + s);\n}", "path": "java\\FastHashMap2.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Reconstitute the <tt>HashMap</tt> instance\n * from a stream (i.e., deserialize it).\n */\n", "func_signal": "private void readObject(ObjectInputStream s)\n     throws IOException, ClassNotFoundException", "code": "{\n    // Read in the threshold, loadfactor, and any hidden stuff\n    s.defaultReadObject();\n\n    // Read in number of buckets and allocate the bucket array;\n    hashLen = s.readInt();\n    keyIndexShift = 1;\n    keyValueTable = new Object[(threshold<<keyIndexShift)+1];\n    indexTable = new int[hashLen+threshold];\n    firstDeletedIndex = -1;\n\n    init();  // Give subclass a chance to do its thing.\n\n    // Read in size (number of Mappings)\n    int size = s.readInt();\n\n    // Read the keys and values, and put the mappings in the HashMap\n    for (int i=0; i<size; i++) {\n        @SuppressWarnings(\"unchecked\")\n        K key = (K) s.readObject();\n        @SuppressWarnings(\"unchecked\")\n        V value = (V) s.readObject();\n        put(key, value, false);\n    }\n}", "path": "java\\FastHashMap.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Returns a string representation of this map.  The string representation\n * consists of a list of key-value mappings in the order returned by the\n * map's <tt>entrySet</tt> view's iterator, enclosed in braces\n * (<tt>\"{}\"</tt>).  Adjacent mappings are separated by the characters\n * <tt>\", \"</tt> (comma and space).  Each key-value mapping is rendered as\n * the key followed by an equals sign (<tt>\"=\"</tt>) followed by the\n * associated value.  Keys and values are converted to strings as by\n * {@link String#valueOf(Object)}.\n *\n * @return a string representation of this map\n */\n", "func_signal": "public String toString()", "code": "{\n    if (size == 0)\n        return \"{}\";\n    StringBuilder sb = new StringBuilder();\n    sb.append('{');\n    boolean first = true;\n    for (int i = iterateFirst(); i != NO_INDEX; i = iterateNext(i)) {\n        if (first)\n            first = false;\n        else\n            sb.append(\", \");\n        Object key = i == NULL_INDEX ? null : keyValueTable[(i<<keyIndexShift)+1];\n        Object value = keyIndexShift > 0 ?\n            keyValueTable[(i<<keyIndexShift)+2] :\n            DUMMY_VALUE;\n        sb.append(key   == this ? \"(this Map)\" : key);\n        sb.append('=');\n        sb.append(value == this ? \"(this Map)\" : value);\n    }\n    return sb.append('}').toString();\n}", "path": "java\\FastHashMap.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Returns a {@link Set} view of the keys contained in this map.\n * The set is backed by the map, so changes to the map are\n * reflected in the set, and vice-versa.  If the map is modified\n * while an iteration over the set is in progress (except through\n * the iterator's own <tt>remove</tt> operation), the results of\n * the iteration are undefined.  The set supports element removal,\n * which removes the corresponding mapping from the map, via the\n * <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,\n * <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt>\n * operations.  It does not support the <tt>add</tt> or <tt>addAll</tt>\n * operations.\n */\n", "func_signal": "public Set<K> keySet()", "code": "{\n    Set<K> ks = keySet;\n    return (ks != null ? ks : (keySet = new KeySet()));\n}", "path": "java\\FastHashMap.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Remove all mappings.\n */\n", "func_signal": "public void clear()", "code": "{\n    size = 0;\n    nullKeyPresent = false;\n    nullValue = null;\n    threshold = 0;\n    keyValueTable = null;\n    indexTable = null;\n    overflowTable = null;\n}", "path": "java\\FastHashMap2.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Returns the value to which the specified key is mapped,\n * or {@code null} if this map contains no mapping for the key.\n *\n * <p>More formally, if this map contains a mapping from a key\n * {@code k} to a value {@code v} such that {@code (key==null ? k==null :\n * key.equals(k))}, then this method returns {@code v}; otherwise\n * it returns {@code null}.  (There can be at most one such mapping.)\n *\n * <p>A return value of {@code null} does not <i>necessarily</i>\n * indicate that the map contains no mapping for the key; it's also\n * possible that the map explicitly maps the key to {@code null}.\n * The {@link #containsKey containsKey} operation may be used to\n * distinguish these two cases.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic V get(Object key)", "code": "{\n    int i = positionOf(key);\n    if(i == NO_INDEX) return null;\n    updateIndex(i);\n    return (V)(keyIndexShift > 0 ?\n        keyValueTable[(i<<keyIndexShift)+2] :\n        DUMMY_VALUE);\n}", "path": "java\\FastLinkedHashMap.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Returns the hash code value for this map.  The hash code of a map is\n * defined to be the sum of the hash codes of each entry in the map's\n * <tt>entrySet()</tt> view.  This ensures that <tt>m1.equals(m2)</tt>\n * implies that <tt>m1.hashCode()==m2.hashCode()</tt> for any two maps\n * <tt>m1</tt> and <tt>m2</tt>, as required by the general contract of\n * {@link Object#hashCode}.\n *\n * <p>This implementation iterates over <tt>entrySet()</tt>, calling\n * {@link Map.Entry#hashCode hashCode()} on each element (entry) in the\n * set, and adding up the results.\n *\n * @return the hash code value for this map\n * @see Map.Entry#hashCode()\n * @see Object#equals(Object)\n * @see Set#equals(Object)\n */\n", "func_signal": "public int hashCode()", "code": "{\n    int h = 0;\n    for (int i = NULL_INDEX; i < firstUnusedIndex; i++)\n        if (!isEmpty(i)) {\n            int hc = i == NULL_INDEX ? 0 :\n                keyValueTable[(i<<keyIndexShift)+1].hashCode();\n            Object value = keyIndexShift > 0 ?\n                keyValueTable[(i<<keyIndexShift)+2] :\n                DUMMY_VALUE;\n            if (value != null) hc ^= value.hashCode();\n            h += hc;\n        }\n    return h;\n}", "path": "java\\FastHashMap.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Returns a {@link Set} view of the mappings contained in this map.\n * The set is backed by the map, so changes to the map are\n * reflected in the set, and vice-versa.  If the map is modified\n * while an iteration over the set is in progress (except through\n * the iterator's own <tt>remove</tt> operation, or through the\n * <tt>setValue</tt> operation on a map entry returned by the\n * iterator) the results of the iteration are undefined.  The set\n * supports element removal, which removes the corresponding\n * mapping from the map, via the <tt>Iterator.remove</tt>,\n * <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and\n * <tt>clear</tt> operations.  It does not support the\n * <tt>add</tt> or <tt>addAll</tt> operations.\n *\n * @return a set view of the mappings contained in this map\n */\n", "func_signal": "public Set<Map.Entry<K,V>> entrySet()", "code": "{\n    Set<Map.Entry<K,V>> es = entrySet;\n    return es != null ? es : (entrySet = new EntrySet());\n}", "path": "java\\FastHashMap.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n *\n * @param i\n * @return\n */\n", "func_signal": "final private int findFreeSpot(int i, int mask, int perturb)", "code": "{\n    Object[] kv = keyValueTable;\n\n    while (true) {\n        if (i < mask && kv[(i + 1) << 1] == null)\n            return i + 1;\n        if (i > 0 && kv[(i - 1) << 1] == null)\n            return i - 1;\n\n        // i = nextProbe(i) & mask;\n        // i = (i * 5 + 1) & mask;\n        i = ((i << 2) + i + 1 + perturb) & mask;\n        if (kv[i << 1] == null)\n            return i;\n        perturb >>>= 5;\n    }\n}", "path": "java\\FastHashMap2.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * @param key\n * @param notFoundValue\n * @return\n */\n", "func_signal": "private final V get(Object key, V notFoundValue)", "code": "{\n    // since null in keyValueTable represents an empty cell\n    // we have to handle null keys as a special case\n    if (key == null)\n        return nullKeyPresent ? nullValue : notFoundValue;\n\n    // local array copies are faster (?)\n    int[] indices = indexTable;\n    Object[] kv = keyValueTable;\n\n    // check if arrays were already initialised\n    if (kv == null)\n        return notFoundValue;\n\n    //\n    int mask = indices.length - 1;\n    int hc = hash(key.hashCode());\n    int hcMask = AVAILABLE_BITS & ~mask;\n    int i0 = hc & mask, i = i0;\n\n    // referential equality is very frequent case, check it early\n    Object key1 = kv[i << 1];\n    if (key == key1) {\n        @SuppressWarnings(\"unchecked\")\n        V result = (V) kv[(i << 1) + 1];\n        return result;\n    }\n\n    //\n    if (key1 == null)\n        return notFoundValue;\n    int ci = indices[i];\n    if ((ci & FOREIGN) != 0)\n        return notFoundValue;\n\n    //\n    int hcBits = hc & hcMask;\n    if ((ci & hcMask) == hcBits && key.equals(key1)) {\n        @SuppressWarnings(\"unchecked\")\n        V result = (V) kv[(i << 1) + 1];\n        return result;\n    }\n\n    //\n    while ((i = ci & mask) != i0) {\n        ci = indices[i];\n        if ((ci & hcMask) == hcBits) {\n            key1 = kv[i << 1];\n            if (key == key1 || key.equals(key1)) {\n                @SuppressWarnings(\"unchecked\")\n                V result = (V) kv[(i << 1) + 1];\n                return result;\n            }\n        }\n    }\n\n    // Look in old-style Entry-based overflow (very huge maps)\n    Entry<K, V>[] over = overflowTable;\n    if (over != null) {\n        for (Entry<K, V> e = over[i]; e != null; e = e.next) {\n            if (key == e.key || (hc == e.hc && key.equals(e.key)))\n                return e.value;\n        }\n    }\n\n    // Nothing was found\n    return notFoundValue;\n}", "path": "java\\FastHashMap2.java", "repo_name": "alex14n/CompactHashMap", "stars": 17, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Get the Villains Collection node\n *\n * @return the Villains Collection node\n */\n", "func_signal": "public Node getVillainsCollectionNode()", "code": "{\n      return this.getPersonsCollectionNode().getSingleRelationship(\n             RelTypes.VILLAINS_REFERENCE, Direction.OUTGOING ).getEndNode();\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDataGraph.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * fills the database with nodes and relationships, using the matrix example\n * @param graphDb the graph database to fill \n * @return MatrixDataGraph the instance for chaining purposes\n */\n", "func_signal": "public MatrixDataGraph createNodespace()", "code": "{\n     Transaction tx = this.graphDb.beginTx();\n     try {\n        Node referenceNode = this.graphDb.getReferenceNode();   \n         \n   \t //create the index for all characters that are considered good guys (sorry cypher) \n   \t IndexManager index = this.graphDb.index();\n   \t Index<Node> goodGuys = index.forNodes(\"heroes\");\n   \t//create persons collection node\n   \t Node persons = this.graphDb.createNode();\n   \t persons.setProperty(\"type\", \"Persons Collection\");\t    \t \n   \t //create heroes collection node\n   \t Node heroes = this.graphDb.createNode();\n   \t heroes.setProperty(\"type\", \"Heroes Collection\");\n   \t//create villains collection node\n   \t Node villains = this.graphDb.createNode();\n   \t villains.setProperty(\"type\", \"Villains Collection\");\n   \t // create neo node\n        Node neo = this.graphDb.createNode();\n        addMultiplePropertiesToNode(neo, MapUtil.map(\"age\",29, \"name\",\"Thomas Anderson\", \"type\", \"hero\"));\t \t         \n     \n        \n        // connect the persons collection node to the reference node\n        referenceNode.createRelationshipTo( persons, RelTypes.PERSONS_REFERENCE);\n        // connect the heroes collection node to the persons collection node\n        persons.createRelationshipTo( heroes, RelTypes.HEROES_REFERENCE);\n        // connect the villains collection node to the persons collection node\n        persons.createRelationshipTo( villains, RelTypes.VILLAINS_REFERENCE);\n        // connect neo to the reference node\n        referenceNode.createRelationshipTo( neo, RelTypes.NEO_NODE );\n        // connect neo to the heroes collection node\n        heroes.createRelationshipTo( neo, RelTypes.HERO);\n        \n        \n        // create trinity node\n        Node trinity = this.graphDb.createNode();\n        addMultiplePropertiesToNode(trinity, MapUtil.map(\"name\",\"Trinity\", \"type\", \"hero\"));\n        createRelationshipWithProperties(neo, trinity, RelTypes.KNOWS,  MapUtil.map( \"age\", \"3 days\"));\t        \n        \n        // connect trinity to the heroes collection node\n        heroes.createRelationshipTo( trinity, RelTypes.HERO);\n        \n        // create morpheus node\n        Node morpheus = this.graphDb.createNode();\n        addMultiplePropertiesToNode(morpheus, MapUtil.map( \"name\",\"Morpheus\", \"occupation\",\"Total badass\", \"rank\",\"Captain\", \"type\",\"hero\"));\t        \n        neo.createRelationshipTo( morpheus, RelTypes.KNOWS );\n        \n        createRelationshipWithProperties(morpheus, trinity, RelTypes.KNOWS,  MapUtil.map( \"age\", \"12 years\"));\t        \n        // connect morpheus to the heroes collection node\n        heroes.createRelationshipTo( morpheus, RelTypes.HERO);\n        \n        //add all good guys to the index\n        addMultipleNodesToIndex(goodGuys, \"name\", MapUtil.map(\"Neo\",neo, \"Trinity\", trinity, \"Morpheus\", morpheus));\n        \n        // create cypher node\n        Node cypher = this.graphDb.createNode();\n        addMultiplePropertiesToNode(cypher, MapUtil.map(\"last name\",\"Reagan\", \"name\",\"Cypher\", \"type\",\"villain\" ));\t        \n        trinity.createRelationshipTo( cypher, RelTypes.KNOWS );\t         \n        createRelationshipWithProperties(morpheus, cypher, RelTypes.KNOWS,  MapUtil.map( \"disclosure\", \"public\"));          \n        // connect cypher to the villains collection node\n        villains.createRelationshipTo( cypher, RelTypes.VILLAIN);\n        \n        // create smith node\n        Node smith = this.graphDb.createNode();\n        addMultiplePropertiesToNode(smith, MapUtil.map(\"language\",\"C++\", \"name\",\"Agent Smith\", \"version\",\"1.0b\", \"type\",\"villain\"));\t        \n        neo.createRelationshipTo( smith, RelTypes.FIGHTS );\n        createRelationshipWithProperties(cypher, smith, RelTypes.KNOWS,  MapUtil.map( \"age\", \"6 months\", \"disclosure\", \"secret\"));  \n      \t \n        // connect smith to the villains collection node\n        villains.createRelationshipTo( smith, RelTypes.VILLAIN);\n        \n        // create architect node\n        Node architect = this.graphDb.createNode();\n        architect.setProperty( \"name\", \"The Architect\" );\n        smith.createRelationshipTo( architect, RelTypes.CODED_BY );\n\t     \n        tx.success();\n    }  finally {\n        tx.finish();\n       \n    }\n     return this;\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDataGraph.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * get the number of all heroes that are connected to the heroes collection node\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void checkNumberOfHeroes() throws Exception", "code": "{                         \n    Traverser heroesTraverser = getHeroes();\n    int numberOfHeroes = 0;              \n    for ( Path heroPath : heroesTraverser ) {               \n \t   numberOfHeroes++;                 \n    }\n   \n    assertEquals( 3, numberOfHeroes );\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDatabaseTest.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * returns a traverser for all nodes that have an outgoing relationship of the type HERO          \n * @return the Traverser\n */\n", "func_signal": "private static Traverser getHeroes()", "code": "{\n         TraversalDescription td = Traversal.description()\n                 .breadthFirst()                            \n                 .relationships( RelTypes.HERO, Direction.OUTGOING )\n                 .evaluator( Evaluators.excludeStartPosition() );\n         return td.traverse( mdg.getHeroesCollectionNode() );\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDatabaseTest.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * Get the Persons Collection node\n *\n * @return the Persons Collection node\n */\n", "func_signal": "public Node getPersonsCollectionNode()", "code": "{\n      return this.graphDb.getReferenceNode().getSingleRelationship(\n              RelTypes.PERSONS_REFERENCE, Direction.OUTGOING ).getEndNode();\n  }", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDataGraph.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * check if rest traversal and traversal via the collection node return the same result\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void checkTraverseByCollectionNode() throws Exception", "code": "{    \t  \n    Traverser heroesTraverserRest = getHeroesViaRest();\n    Traverser heroesTraverserByCollection = getHeroesByCollectionNodeViaRest();\n    assertEquals( heroesTraverserRest.nodes().iterator().next(), heroesTraverserByCollection.nodes().iterator().next() );\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDatabaseRestTest.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * check if different REST Traversals for all heroes return the same \n * @throws Exception\n */\n", "func_signal": "@Test\npublic void checkTraverseByPropertiesRest() throws Exception", "code": "{    \t  \n    Traverser heroesTraverserRest = getHeroesViaRest();\n    Traverser heroesTraverserByPropertiesRest = getHeroesByNodePropertiesViaRest();\n    assertEquals( heroesTraverserRest.nodes().iterator().next(), heroesTraverserByPropertiesRest.nodes().iterator().next() );\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDatabaseRestTest.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * get the number of all nodes that know the neo node\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void getNeoFriends() throws Exception", "code": "{\n    Node neoNode = restmdg.getNeoNode(); \n    System.out.println(neoNode.getProperty(\"name\"));\n    Traverser friendsTraverser = getFriends( neoNode );         \n    int numberOfFriends = 0;              \n    for ( Path friendPath : friendsTraverser ) {               \n        numberOfFriends++;                 \n    }\n   \n    assertEquals( 4, numberOfFriends );\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDatabaseRestTest.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * returns a traverser for all nodes that have a property type == hero in the embedded Database\n * @return the Traverser\n */\n", "func_signal": "private Traverser getHeroesByNodeProperties()", "code": "{\n         \t  TraversalDescription td = Traversal.description()          \t\t  \t\n            .breadthFirst()                        \n            .relationships( RelTypes.PERSONS_REFERENCE, Direction.OUTGOING )\n            .relationships( RelTypes.HEROES_REFERENCE, Direction.OUTGOING )\n            .relationships( RelTypes.HERO, Direction.OUTGOING )\n            .filter(Traversal.returnAllButStartNode())               \n            .filter(new Predicate<Path>() { public boolean accept(Path path) { return path.endNode().getProperty(\"type\",\"none\").equals(\"hero\");}});\n         \t return td.traverse(mdg.getGraphDatabase().getReferenceNode());\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDatabaseTest.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * Get the Heroes Collection node\n *\n * @return the Heroes Collection node\n */\n", "func_signal": "public Node getHeroesCollectionNode()", "code": "{\n      return this.getPersonsCollectionNode().getSingleRelationship(\n             RelTypes.HEROES_REFERENCE, Direction.OUTGOING ).getEndNode();\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDataGraph.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * check if rest traversal returns the same as embedded traversal\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void checkTraverseByProperties() throws Exception", "code": "{    \t  \n    Traverser heroesTraverserRest = getHeroesViaRest();\n    Traverser heroesTraverserByProperties = getHeroesByNodeProperties();\n    assertEquals( heroesTraverserRest.nodes().iterator().next().getId(), heroesTraverserByProperties.nodes().iterator().next().getId() );\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDatabaseRestTest.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * get the number of all heroes that are connected to the heroes collection node\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void checkNumberOfHeroes() throws Exception", "code": "{                         \n    Traverser heroesTraverser = getHeroesViaRest();\n    int numberOfHeroes = 0;              \n    for ( Path heroPath : heroesTraverser ) {        \t\n \t   numberOfHeroes++;                 \n    }\n   \n    assertEquals( 3, numberOfHeroes );\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDatabaseRestTest.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * returns a traverser for all nodes that have a property type == hero in the embedded Database\n * @return the Traverser\n */\n", "func_signal": "private Traverser getHeroesByNodeProperties()", "code": "{\n    \t  TraversalDescription td = Traversal.description()          \t\t  \t\n          .breadthFirst()                        \n          .relationships( RelTypes.PERSONS_REFERENCE, Direction.OUTGOING )\n          .relationships( RelTypes.HEROES_REFERENCE, Direction.OUTGOING )\n          .relationships( RelTypes.HERO, Direction.OUTGOING )                              \n          .filter(new Predicate<Path>() { public boolean accept(Path path) { return path.endNode().getProperty(\"type\",\"none\").equals(\"hero\");}});\n    \t return td.traverse(this.embeddedmdg.getGraphDatabase().getReferenceNode());\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDatabaseRestTest.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * returns a traverser for all nodes that have a hero relationship and are connected to the hero collection node\n * @return\n */\n", "func_signal": "private Traverser getHeroesByCollectionNodeViaRest()", "code": "{\n    \t  TraversalDescription td = RestTraversal.description()   \n \t\t   .maxDepth(10)\n         .breadthFirst()                         \n         .relationships( RelTypes.HERO, Direction.OUTGOING );                     \n    return td.traverse( this.restmdg.getHeroesCollectionNode() );\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDatabaseRestTest.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * returns a traverser for all nodes that have a property type == hero via the REST API        \n * @return the Traverser\n */\n", "func_signal": "private Traverser getHeroesByNodePropertiesViaRest()", "code": "{\n    \t TraversalDescription td = RestTraversal.description()   \n \t\t   .maxDepth(3)       \t\n         .breadthFirst()                        \n         .relationships( RelTypes.PERSONS_REFERENCE, Direction.OUTGOING )\n         .relationships( RelTypes.HEROES_REFERENCE, Direction.OUTGOING )\n         .relationships( RelTypes.HERO, Direction.OUTGOING )                          \n         .filter(ScriptLanguage.JAVASCRIPT, \"position.endNode().getProperty('type','none') == 'hero';\");    \t\n    return td.traverse(this.restmdg.getGraphDatabase().getReferenceNode());\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDatabaseRestTest.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n@Test\npublic void testIfThenElse(){        \n    final String queryString = \"g.v(neo).out('KNOWS').ifThenElse{it.name.equals(\\\"Trinity\\\")}{it.name}{it.out('KNOWS').name}\";\n    final Collection<Object> result =  IteratorUtil.asCollection(queryEngine.query(queryString, MapUtil.map(\"neo\",getNeoId())));        \n    //assertEquals(createCollectionWithMultipleProperties((int)getTrinityId(),(int)getMorpheusId()) ,result); \n    System.out.println(result);\n}*/\n", "func_signal": "@Ignore\n@Test\npublic void testQueryList2()", "code": "{\n    final String queryString = \"[g.v(neo),g.v(trinity)]._().type.as('person.type').name.as('person.name').table(new Table()).cap >> 1\";       \n    final Collection<Object> result = IteratorUtil.asCollection(queryEngine.query(queryString, MapUtil.map(\"neo\", getNeoId(), \"trinity\",getTrinityId())));     \n    assertEquals(asList(MapUtil.map(\"person.type\",\"hero\", \"person.name\", \"Thomas Anderson\"), MapUtil.map(\"person.type\",\"hero\", \"person.name\", \"Trinity\")), result);\n\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\RestGremlinQueryEngineTest.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * returns a traverser for all nodes that have an outgoing CODED_BY relationship\n * based on a startnode\n * @param startNode the node to start from\n * @return the 'Traverser\n */\n", "func_signal": "private static Traverser findHackers( final Node startNode )", "code": "{\n         TraversalDescription td = Traversal.description()\n                 .breadthFirst()\n                 .relationships( RelTypes.CODED_BY, Direction.OUTGOING )\n                 .relationships( RelTypes.KNOWS, Direction.OUTGOING )\n                 .evaluator(\n                         Evaluators.returnWhereLastRelationshipTypeIs( RelTypes.CODED_BY ) );\n         return td.traverse( startNode );\n     }", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDatabaseTest.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * get the number of all nodes that know the neo node\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void getNeoFriends() throws Exception", "code": "{\n    Node neoNode = mdg.getNeoNode();             \n    Traverser friendsTraverser = getFriends( neoNode );\n    int numberOfFriends = 0;              \n    for ( Path friendPath : friendsTraverser ) {               \n        numberOfFriends++;                 \n    }\n   \n    assertEquals( 4, numberOfFriends );\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDatabaseTest.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * checks if neo has a friend named cypher\n * @throws Exception\n */\n", "func_signal": "@Test\npublic void findCypher() throws Exception", "code": "{\n        \t   Node neoNode = mdg.getNeoNode();              \n    Traverser friendsTraverser = getFriends( neoNode );\n    boolean foundCypher = false;\n    for ( Path friendPath : friendsTraverser ) {            \t  \n \t   if (friendPath.endNode().getProperty(\"name\").equals(\"Cypher\")){\n \t\t   foundCypher = true;\n \t\t   break;\n \t   }\n    }\n    assertTrue(foundCypher);\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDatabaseTest.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "/**\n * returns a traverser for all nodes that have an outgoing relationship of the type HERO an are 3 positions down in the path         \n * @return the Traverser\n */\n", "func_signal": "private Traverser getHeroesViaRest()", "code": "{\n    \t TraversalDescription td = RestTraversal.description()   \n \t\t   .maxDepth(3)       \t\n         .breadthFirst()                        \n         .relationships( RelTypes.PERSONS_REFERENCE, Direction.OUTGOING )\n         .relationships( RelTypes.HEROES_REFERENCE, Direction.OUTGOING )\n         .relationships( RelTypes.HERO, Direction.OUTGOING )                       \n         .filter(ScriptLanguage.JAVASCRIPT, \"position.length() == 3;\"); \n    return td.traverse(this.restmdg.getGraphDatabase().getReferenceNode());\n}", "path": "src\\test\\java\\org\\neo4j\\rest\\graphdb\\MatrixDatabaseRestTest.java", "repo_name": "jexp/neo4j-java-rest-binding", "stars": 22, "license": "None", "language": "java", "size": 380}
{"docstring": "// Get file name of the specified dictionary\n", "func_signal": "private boolean getUsrDictFileName(byte usr_dict[])", "code": "{\n    if (null == usr_dict) {\n        return false;\n    }\n\n    for (int i = 0; i < mUsr_dict_file.length(); i++)\n        usr_dict[i] = (byte) mUsr_dict_file.charAt(i);\n    usr_dict[mUsr_dict_file.length()] = 0;\n\n    return true;\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\PinyinDecoderService.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "// Move cursor. If offset is 0, this function can be used to adjust\n// the cursor into the bounds of the string.\n", "func_signal": "public void moveCursor(int offset)", "code": "{\n    if (offset > 1 || offset < -1) return;\n\n    if (offset != 0) {\n        int hzPos = 0;\n        for (hzPos = 0; hzPos <= mFixedLen; hzPos++) {\n            if (mCursorPos == mSplStart[hzPos + 1]) {\n                if (offset < 0) {\n                    if (hzPos > 0) {\n                        offset = mSplStart[hzPos]\n                                - mSplStart[hzPos + 1];\n                    }\n                } else {\n                    if (hzPos < mFixedLen) {\n                        offset = mSplStart[hzPos + 2]\n                                - mSplStart[hzPos + 1];\n                    }\n                }\n                break;\n            }\n        }\n    }\n    mCursorPos += offset;\n    if (mCursorPos < 0) {\n        mCursorPos = 0;\n    } else if (mCursorPos > mSurface.length()) {\n        mCursorPos = mSurface.length();\n    }\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\PinyinIME.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "// The reason why we handle candiate view's touch events here is because\n// that the view under the focused view may get touch events instead of the\n// focused one.\n", "func_signal": "@Override\npublic boolean onTouchEvent(MotionEvent event)", "code": "{\n    event.offsetLocation(-xOffsetForFlipper, 0);\n    CandidateView cv = (CandidateView) mFlipper.getCurrentView();\n    cv.onTouchEventReal(event);\n    return true;\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\CandidatesContainer.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "// The state id should be valid, and less than 255.\n// If resetIfNotFound is true and there is no such toggle state with the\n// given id, the key state will be reset.\n// If the key state is newly changed (enabled to the given state, or\n// reseted) and needs re-draw, return true.\n", "func_signal": "public boolean enableToggleState(int stateId, boolean resetIfNotFound)", "code": "{\n    int oldStateId = (mKeyMask & KEYMASK_TOGGLE_STATE);\n    if (oldStateId == stateId) return false;\n\n    mKeyMask &= (~KEYMASK_TOGGLE_STATE);\n    if (stateId > 0) {\n        mKeyMask |= (KEYMASK_TOGGLE_STATE & stateId);\n        if (getToggleState() == null) {\n            mKeyMask &= (~KEYMASK_TOGGLE_STATE);\n            if (!resetIfNotFound && oldStateId > 0) {\n                mKeyMask |= (KEYMASK_TOGGLE_STATE & oldStateId);\n            }\n            return resetIfNotFound;\n        } else {\n            return true;\n        }\n    } else {\n        return true;\n    }\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\SoftKeyToggle.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "// Set the size of the soft keyboard core. In other words, the background's\n// padding are not counted.\n", "func_signal": "public void setSkbCoreSize(int skbCoreWidth, int skbCoreHeight)", "code": "{\n    if (null == mKeyRows\n            || (skbCoreWidth == mSkbCoreWidth && skbCoreHeight == mSkbCoreHeight)) {\n        return;\n    }\n    for (int row = 0; row < mKeyRows.size(); row++) {\n        KeyRow keyRow = mKeyRows.get(row);\n        keyRow.mBottom = (int) (skbCoreHeight * keyRow.mBottomF);\n        keyRow.mTop = (int) (skbCoreHeight * keyRow.mTopF);\n\n        List<SoftKey> softKeys = keyRow.mSoftKeys;\n        for (int i = 0; i < softKeys.size(); i++) {\n            SoftKey softKey = softKeys.get(i);\n            softKey.setSkbCoreSize(skbCoreWidth, skbCoreHeight);\n        }\n    }\n    mSkbCoreWidth = skbCoreWidth;\n    mSkbCoreHeight = skbCoreHeight;\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\SoftKeyboard.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "// After the user chooses a candidate, input method will do a\n// re-decoding and give the new candidate list.\n// If candidate id is less than 0, means user is inputting Pinyin,\n// not selecting any choice.\n", "func_signal": "private void chooseDecodingCandidate(int candId)", "code": "{\n    if (mImeState != ImeState.STATE_PREDICT) {\n        resetCandidates();\n        int totalChoicesNum = 0;\n        try {\n            if (candId < 0) {\n                if (length() == 0) {\n                    totalChoicesNum = 0;\n                } else {\n                    if (mPyBuf == null)\n                        mPyBuf = new byte[PY_STRING_MAX];\n                    for (int i = 0; i < length(); i++)\n                        mPyBuf[i] = (byte) charAt(i);\n                    mPyBuf[length()] = 0;\n\n                    if (mPosDelSpl < 0) {\n                        totalChoicesNum = mIPinyinDecoderService\n                                .imSearch(mPyBuf, length());\n                    } else {\n                        boolean clear_fixed_this_step = true;\n                        if (ImeState.STATE_COMPOSING == mImeState) {\n                            clear_fixed_this_step = false;\n                        }\n                        totalChoicesNum = mIPinyinDecoderService\n                                .imDelSearch(mPosDelSpl, mIsPosInSpl,\n                                        clear_fixed_this_step);\n                        mPosDelSpl = -1;\n                    }\n                }\n            } else {\n                totalChoicesNum = mIPinyinDecoderService\n                        .imChoose(candId);\n            }\n        } catch (RemoteException e) {\n        }\n        updateDecInfoForSearch(totalChoicesNum);\n    }\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\PinyinIME.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "/**\n * Set configurations to show text label in this balloon.\n *\n * @param icon The icon used to shown in this balloon.\n * @param width The desired width of the balloon. The real width is\n *        determined by the desired width and balloon's measuring\n *        specification.\n * @param height The desired width of the balloon. The real width is\n *        determined by the desired width and balloon's measuring\n *        specification.\n */\n", "func_signal": "public void setBalloonConfig(Drawable icon, int width, int height)", "code": "{\n    mBalloonView.setIcon(icon);\n    setBalloonSize(width, height);\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\BalloonHint.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "// The state id should be valid, and less than 255.\n// If resetIfNotFound is true and there is no such toggle state with the\n// given id, the key state will be reset.\n// If the key state is newly changed and needs re-draw, return true.\n", "func_signal": "public boolean disableToggleState(int stateId, boolean resetIfNotFound)", "code": "{\n    int oldStateId = (mKeyMask & KEYMASK_TOGGLE_STATE);\n    if (oldStateId == stateId) {\n        mKeyMask &= (~KEYMASK_TOGGLE_STATE);\n        return stateId != 0;\n    }\n\n    if (resetIfNotFound) {\n        mKeyMask &= (~KEYMASK_TOGGLE_STATE);\n        return oldStateId != 0;\n    }\n    return false;\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\SoftKeyToggle.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "/**\n * Set configurations to show text label in this balloon.\n *\n * @param label The text label to show in the balloon.\n * @param textSize The text size used to show label.\n * @param textBold Used to indicate whether the label should be bold.\n * @param textColor The text color used to show label.\n * @param width The desired width of the balloon. The real width is\n *        determined by the desired width and balloon's measuring\n *        specification.\n * @param height The desired width of the balloon. The real width is\n *        determined by the desired width and balloon's measuring\n *        specification.\n */\n", "func_signal": "public void setBalloonConfig(String label, float textSize,\n        boolean textBold, int textColor, int width, int height)", "code": "{\n    mBalloonView.setTextConfig(label, textSize, textBold, textColor);\n    setBalloonSize(width, height);\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\BalloonHint.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "// Function for interface OnTouchListener, it is used to handle touch events\n// which will be delivered to the popup soft keyboard view.\n", "func_signal": "public boolean onTouch(View v, MotionEvent event)", "code": "{\n    // Translate the event to fit to the container.\n    MotionEvent newEv = MotionEvent.obtain(event.getDownTime(), event\n            .getEventTime(), event.getAction(), event.getX() + mPopupX,\n            event.getY() + mPopupY, event.getPressure(), event.getSize(),\n            event.getMetaState(), event.getXPrecision(), event\n                    .getYPrecision(), event.getDeviceId(), event\n                    .getEdgeFlags());\n    boolean ret = onTouchEvent(newEv);\n    return ret;\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\SkbContainer.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "// The caller guarantees that all parameters are in [0, 1]\n", "func_signal": "public void setKeyDimensions(float left, float top, float right,\n        float bottom)", "code": "{\n    mLeftF = left;\n    mTopF = top;\n    mRightF = right;\n    mBottomF = bottom;\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\SoftKey.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "// Call after setKeyDimensions(). The caller guarantees that the\n// keyboard with and height are valid.\n", "func_signal": "public void setSkbCoreSize(int skbWidth, int skbHeight)", "code": "{\n    mLeft = (int) (mLeftF * skbWidth);\n    mRight = (int) (mRightF * skbWidth);\n    mTop = (int) (mTopF * skbHeight);\n    mBottom = (int) (mBottomF * skbHeight);\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\SoftKey.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "// Clear any toggle state. If the key needs re-draw, return true.\n", "func_signal": "public boolean disableAllToggleStates()", "code": "{\n    int oldStateId = (mKeyMask & KEYMASK_TOGGLE_STATE);\n    mKeyMask &= (~KEYMASK_TOGGLE_STATE);\n    return oldStateId != 0;\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\SoftKeyToggle.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "// Try to find the keyboard in the pool with the cache id. If there is no\n// keyboard found, try to load it with the given xml id.\n", "func_signal": "public SoftKeyboard getSoftKeyboard(int skbCacheId, int skbXmlId,\n        int skbWidth, int skbHeight, Context context)", "code": "{\n    for (int i = 0; i < mSoftKeyboards.size(); i++) {\n        SoftKeyboard skb = mSoftKeyboards.elementAt(i);\n        if (skb.getCacheId() == skbCacheId && skb.getSkbXmlId() == skbXmlId) {\n            skb.setSkbCoreSize(skbWidth, skbHeight);\n            skb.setNewlyLoadedFlag(false);\n            return skb;\n        }\n    }\n    if (null != context) {\n        XmlKeyboardLoader xkbl = new XmlKeyboardLoader(context);\n        SoftKeyboard skb = xkbl.loadKeyboard(skbXmlId, skbWidth, skbHeight);\n        if (skb != null) {\n            if (skb.getCacheFlag()) {\n                skb.setCacheId(skbCacheId);\n                mSoftKeyboards.add(skb);\n            }\n        }\n        return skb;\n    }\n    return null;\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\SkbPool.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "// Prepare to delete before cursor. We may delete a spelling char if\n// the cursor is in the range of unfixed part, delete a whole spelling\n// if the cursor in inside the range of the fixed part.\n// This function only marks the position used to delete.\n", "func_signal": "public void prepareDeleteBeforeCursor()", "code": "{\n    if (mCursorPos > 0) {\n        int pos;\n        for (pos = 0; pos < mFixedLen; pos++) {\n            if (mSplStart[pos + 2] >= mCursorPos\n                    && mSplStart[pos + 1] < mCursorPos) {\n                mPosDelSpl = pos;\n                mCursorPos = mSplStart[pos + 1];\n                mIsPosInSpl = true;\n                break;\n            }\n        }\n        if (mPosDelSpl < 0) {\n            mPosDelSpl = mCursorPos - 1;\n            mCursorPos--;\n            mIsPosInSpl = false;\n        }\n    }\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\PinyinIME.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "/**\n * Show a page in the decoding result set previously.\n *\n * @param pageNo Which page to show.\n * @param activeCandInPage Which candidate should be set as active item.\n * @param enableActiveHighlight When false, active item will not be\n *        highlighted.\n */\n", "func_signal": "public void showPage(int pageNo, int activeCandInPage,\n        boolean enableActiveHighlight)", "code": "{\n    if (null == mDecInfo) return;\n    mPageNo = pageNo;\n    mActiveCandInPage = activeCandInPage;\n    if (mEnableActiveHighlight != enableActiveHighlight) {\n        mEnableActiveHighlight = enableActiveHighlight;\n    }\n\n    if (!calculatePage(mPageNo)) {\n        mUpdateArrowStatusWhenDraw = true;\n    } else {\n        mUpdateArrowStatusWhenDraw = false;\n    }\n\n    invalidate();\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\CandidateView.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "// keyCode can be from both hard key or soft key.\n", "func_signal": "private boolean processFunctionKeys(int keyCode, boolean realAction)", "code": "{\n    // Back key is used to dismiss all popup UI in a soft keyboard.\n    if (keyCode == KeyEvent.KEYCODE_BACK) {\n        if (isInputViewShown()) {\n            if (mSkbContainer.handleBack(realAction)) return true;\n        }\n    }\n\n    // Chinese related input is handle separately.\n    if (mInputModeSwitcher.isChineseText()) {\n        return false;\n    }\n\n    if (null != mCandidatesContainer && mCandidatesContainer.isShown()\n            && !mDecInfo.isCandidatesListEmpty()) {\n        if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {\n            if (!realAction) return true;\n\n            chooseCandidate(-1);\n            return true;\n        }\n\n        if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {\n            if (!realAction) return true;\n            mCandidatesContainer.activeCurseBackward();\n            return true;\n        }\n\n        if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {\n            if (!realAction) return true;\n            mCandidatesContainer.activeCurseForward();\n            return true;\n        }\n\n        if (keyCode == KeyEvent.KEYCODE_DPAD_UP) {\n            if (!realAction) return true;\n            mCandidatesContainer.pageBackward(false, true);\n            return true;\n        }\n\n        if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {\n            if (!realAction) return true;\n            mCandidatesContainer.pageForward(false, true);\n            return true;\n        }\n\n        if (keyCode == KeyEvent.KEYCODE_DEL &&\n                ImeState.STATE_PREDICT == mImeState) {\n            if (!realAction) return true;\n            resetToIdleState(false);\n            return true;\n        }\n    } else {\n        if (keyCode == KeyEvent.KEYCODE_DEL) {\n            if (!realAction) return true;\n            if (SIMULATE_KEY_DELETE) {\n                simulateKeyEventDownUp(keyCode);\n            } else {\n                getCurrentInputConnection().deleteSurroundingText(1, 0);\n            }\n            return true;\n        }\n        if (keyCode == KeyEvent.KEYCODE_ENTER) {\n            if (!realAction) return true;\n            sendKeyChar('\\n');\n            return true;\n        }\n        if (keyCode == KeyEvent.KEYCODE_SPACE) {\n            if (!realAction) return true;\n            sendKeyChar(' ');\n            return true;\n        }\n    }\n\n    return false;\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\PinyinIME.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "// If activeCandNo is less than 0, get the current active candidate number\n// from candidate view, otherwise use activeCandNo.\n", "func_signal": "private void chooseCandidate(int activeCandNo)", "code": "{\n    if (activeCandNo < 0) {\n        activeCandNo = mCandidatesContainer.getActiveCandiatePos();\n    }\n    if (activeCandNo >= 0) {\n        chooseAndUpdate(activeCandNo);\n    }\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\PinyinIME.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "/**\n * Enable a row with the give toggle Id. Rows with other toggle ids (except\n * the id {@link KeyRow#ALWAYS_SHOW_ROW_ID}) will be disabled.\n * \n * @param rowId The row id to enable.\n * @return True if the soft keyboard requires redrawing.\n */\n", "func_signal": "private boolean enableRow(int rowId)", "code": "{\n    if (KeyRow.ALWAYS_SHOW_ROW_ID == rowId) return false;\n\n    boolean enabled = false;\n    int rowNum = mKeyRows.size();\n    for (int row = rowNum - 1; row >= 0; row--) {\n        if (mKeyRows.get(row).mRowId == rowId) {\n            enabled = true;\n            break;\n        }\n    }\n    if (enabled) {\n        mEnabledRowId = rowId;\n    }\n    return enabled;\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\SoftKeyboard.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "/**\n * Set the composing string to show. If the IME status is\n * {@link PinyinIME.ImeState#STATE_INPUT}, the composing view's status will\n * be set to {@link ComposingStatus#SHOW_PINYIN}, otherwise the composing\n * view will set its status to {@link ComposingStatus#SHOW_STRING_LOWERCASE}\n * or {@link ComposingStatus#EDIT_PINYIN} automatically.\n */\n", "func_signal": "public void setDecodingInfo(PinyinIME.DecodingInfo decInfo,\n        PinyinIME.ImeState imeStatus)", "code": "{\n    mDecInfo = decInfo;\n\n    if (PinyinIME.ImeState.STATE_INPUT == imeStatus) {\n        mComposingStatus = ComposingStatus.SHOW_PINYIN;\n        mDecInfo.moveCursorToEdge(false);\n    } else {\n        if (decInfo.getFixedLen() != 0\n                || ComposingStatus.EDIT_PINYIN == mComposingStatus) {\n            mComposingStatus = ComposingStatus.EDIT_PINYIN;\n        } else {\n            mComposingStatus = ComposingStatus.SHOW_STRING_LOWERCASE;\n        }\n        mDecInfo.moveCursor(0);\n    }\n\n    measure(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n    requestLayout();\n    invalidate();\n}", "path": "src\\com\\android\\inputmethod\\pinyin\\ComposingView.java", "repo_name": "yuanyelele/PinyinIME", "stars": 22, "license": "other", "language": "java", "size": 2009}
{"docstring": "/**\n * Simulates combined seam-rest.jar. No extensions are enabled. Templating support is not added. SeamExceptionMapper and\n * CatchExceptionMapper is not added.\n */\n", "func_signal": "public static JavaArchive createSeamRest()", "code": "{\n    JavaArchive jar = ShrinkWrap.create(JavaArchive.class, \"seam-rest.jar\");\n    jar.addClasses(SeamRestConfiguration.class, SeamRestExtension.class);\n    jar.addPackage(RestClient.class.getPackage()); // .client\n    jar.addClasses(ExceptionMapping.class, Mapping.class, RestRequest.class, RestResource.class, UnhandledException.class); // .exceptions\n    // api\n    jar.addClasses(ErrorMessageWrapper.class, ExceptionMappingExtension.class, ResponseBuilderProducer.class); // .exceptions\n    // impl\n    jar.addClass(CatchValidationExceptionHandler.class); // .exceptions.integration\n    jar.addClasses(Annotations.class, Utils.class); // .utils\n    jar.addPackage(ValidateRequest.class.getPackage());\n    jar.addAsManifestResource(EmptyAsset.INSTANCE, \"beans.xml\");\n    // mock SeamRestStartup\n    jar.addClass(MockStartup.class);\n    return jar;\n}", "path": "testsuite\\src\\test\\java\\org\\jboss\\seam\\rest\\test\\SeamRestClientTest.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "/**\n * Producer method for proxied JAX-RS interfaces - REST Clients This method is not registered as a producer method by\n * default. It is registered by {@link RestClientExtension} only if there is an appropriate injection point.\n */\n", "func_signal": "public Object produceRestClient(InjectionPoint ip, ClientExecutor executor)", "code": "{\n    RestClient qualifier = AnnotationInspector.getAnnotation(ip.getAnnotated(), RestClient.class, manager);\n\n    if (qualifier == null || !(ip.getType() instanceof Class<?>)) {\n        // this should never happen\n        throw new IllegalStateException(\"@RestClient injection point \" + ip.getMember() + \" is not valid.\");\n    }\n\n    Class<?> clazz = (Class<?>) ip.getType();\n    String url = expressions.evaluateValueExpression(qualifier.value(), String.class);\n    return ProxyFactory.create(clazz, url, executor);\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\rest\\client\\RestClientProducer.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "/**\n * Initializes TemplatingMessageBodyWriter. <code>TemplatingProvider</code> is selected.\n *\n * @throws UnsatisfiedResolutionException if the preferred <code>TemplatingProvider</code> is selected but is not available\n *                                        for injection.\n * @throws AmbiguousResolutionException   if there are multiple <code>TemplatingProviders<code> available.\n */\n", "func_signal": "@Inject\npublic void init(Instance<TemplatingProvider> providerInstance, Instance<SeamRestConfiguration> configuration)", "code": "{\n    log.debugv(\"Initializing {0}\", getClass().getSimpleName());\n\n    Instance<? extends TemplatingProvider> instance = providerInstance;\n    Class<? extends TemplatingProvider> preferedTemplatingProvider = null;\n\n    // because of SEAMREST-15, we need to check if SeamRestConfiguration is available\n    if (!configuration.isAmbiguous() && !configuration.isUnsatisfied()) {\n        preferedTemplatingProvider = configuration.get().getPreferedTemplatingProvider();\n    }\n    if (preferedTemplatingProvider != null) {\n        log.debugv(\"Prefered templating provider specified. Selecting {0}\", preferedTemplatingProvider.getName());\n        instance = providerInstance.select(preferedTemplatingProvider);\n    }\n\n    // no templating engines found\n    if (instance.isUnsatisfied()) {\n        if (preferedTemplatingProvider == null) {\n            log.debug(\"No TemplateProvider found. Templating support disabled.\");\n            return;\n        } else {\n            throw new UnsatisfiedResolutionException(\"Unable to load prefered TemplateProvider \"\n                    + preferedTemplatingProvider.getName());\n        }\n    }\n\n    // multiple templating engines found\n    if (instance.isAmbiguous()) {\n        throw new AmbiguousResolutionException(\"Multiple TemplatingProviders found on classpath. Select the prefered one.\");\n    }\n\n    provider = instance.get();\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\rest\\templating\\TemplatingMessageBodyWriter.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "/**\n * Indicates that the HTTP response is produced using a template.\n *\n * @author <a href=\"http://community.jboss.org/people/jharting\">Jozef Hartinger</a>\n */\n", "func_signal": "@Retention(RUNTIME)\n@Target(METHOD)\n@Documented\npublic @interface ResponseTemplate", "code": "{\n    /**\n     * Path to the template to be used.\n     */\n    String value();\n\n    /**\n     * Media type produced by the template.\n     */\n    String produces() default \"*/*\";\n\n    /**\n     * Name under which the returned value is available in the template.\n     */\n    String responseName() default \"response\";\n\n    /**\n     * Defines several <code>@ResponseTemplate</code> annotations on the same element\n     *\n     * @see ResponseTemplate\n     */\n    @Target(METHOD)\n    @Retention(RUNTIME)\n    @Documented\n            @interface List {\n        ResponseTemplate[] value();\n    }\n}", "path": "api\\src\\main\\java\\org\\jboss\\seam\\rest\\templating\\ResponseTemplate.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "/**\n * Registers the RestClientProducer if there is an injection point that requires it\n */\n", "func_signal": "public void afterBeanDiscovery(@Observes AfterBeanDiscovery event, BeanManager manager)", "code": "{\n    if (enabled && !jaxrsInterfaces.isEmpty()) {\n        if (restClientProducerBean == null) {\n            log.warn(\"ProcessProducerMethod<RestClientProducer, Object> not fired. Client extension may not work properly.\");\n            return;\n        }\n        // register an additional RestClientProducer that supports all the interfaces\n        event.addBean(new RestClientProducerBean(restClientProducerBean, jaxrsInterfaces, manager));\n    }\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\rest\\client\\RestClientExtension.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "// Instance is only needed because of a bug in GF\n", "func_signal": "public void init(ServletContext servletContext)", "code": "{\n    Properties properties = new Properties();\n    properties.setProperty(\"resource.loader\", \"servlet\");\n    properties.setProperty(\"servlet.resource.loader.class\", \"org.apache.velocity.tools.view.WebappResourceLoader\");\n    Velocity.setApplicationAttribute(\"javax.servlet.ServletContext\", servletContext);\n    Velocity.init(properties);\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\rest\\templating\\velocity\\VelocityProvider.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "/**\n * Intercepts method invocations to <code>@ValidateRequest</code> annotated methods.\n * <p>\n * On the first run, the method is scanned for message body parameters and parameter object parameters and the metadata is\n * stored within {@link ValidationMetadata}.\n * </p>\n * <p/>\n * On subsequent runs, method parameters and the declaring instance are validated using {@link Validator}.\n * {@link ValidationException} is thrown if validation fails.\n *\n * @throws ValidationException\n */\n", "func_signal": "@AroundInvoke\npublic Object intercept(InvocationContext ctx) throws Exception", "code": "{\n    log.debugv(\"Validating {0}\", ctx.getMethod().toGenericString());\n\n    // do scanning only once\n    if (!metadata.containsMethodMetadata(ctx.getMethod())) {\n        scanMethod(ctx.getMethod());\n    }\n\n    Set<ConstraintViolation<Object>> violations = new HashSet<ConstraintViolation<Object>>();\n\n    MethodMetadata method = metadata.getMethodMetadata(ctx.getMethod());\n    ValidateRequest interceptorBinding = method.getInterceptorBinding();\n    Class<?>[] groups = interceptorBinding.groups();\n\n    // validate JAX-RS resource fields\n    if (interceptorBinding.validateResourceFields()) {\n        log.debugv(\"Validating JAX-RS resource {0}\", ctx.getTarget());\n        violations.addAll(validator.validate(ctx.getTarget(), groups));\n    }\n\n    // validate message body\n    if (interceptorBinding.validateMessageBody() && (method.getMessageBody() != null)) {\n        Object parameter = ctx.getParameters()[method.getMessageBody()];\n        log.debugv(\"Validating HTTP message body {0}\", parameter);\n        violations.addAll(validator.validate(parameter, groups));\n    }\n\n    // validate other parameters\n    for (Integer parameterIndex : method.getValidatedParameters()) {\n        Object parameter = ctx.getParameters()[parameterIndex];\n        log.debugv(\"Validating parameter {0}\", parameter);\n        violations.addAll(validator.validate(parameter, groups));\n    }\n\n    if (violations.isEmpty()) {\n        log.debug(\"Validation completed. No violations found.\");\n        return ctx.proceed();\n    } else {\n        log.debugv(\"Validation completed. {0} violations found.\", violations.size());\n        throw new ValidationException(violations);\n    }\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\rest\\validation\\ValidationInterceptor.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "/**\n * Modifies query passed as a parameter to filter out tasks based on their status (resolved/unresolved/all)\n */\n", "func_signal": "protected Query applyResolutionParameter(Query query, String status)", "code": "{\n    if (\"resolved\".equals(status)) {\n        // double assignment as a workaround for HHH-4541\n        return query.setParameter(\"r1\", true).setParameter(\"r2\", true);\n    } else if (\"unresolved\".equals(status)) {\n        return query.setParameter(\"r1\", false).setParameter(\"r2\", false);\n    } else {\n        return query.setParameter(\"r1\", true).setParameter(\"r2\", false);\n    }\n}", "path": "examples\\tasks\\src\\main\\java\\org\\jboss\\seam\\rest\\examples\\tasks\\resource\\CollectionBean.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "// we could do typesafe queries, but Resin (eclipselink) does not support that ATM\n", "func_signal": "public List<Category> getCategories(int start, int limit)", "code": "{\n    Query query = em.createNamedQuery(\"categories\");\n    applyPaginationParameters(query, start, limit);\n    return query.getResultList();\n}", "path": "examples\\tasks\\src\\main\\java\\org\\jboss\\seam\\rest\\examples\\tasks\\resource\\CollectionBean.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "/**\n * Initializes the <code>TemplatingProvider</code> if available.\n */\n", "func_signal": "public void init(@Observes @RestResource ServletContext context)", "code": "{\n    if (provider != null) {\n        log.debugv(\"Initializing templating provider.\");\n        provider.init(context);\n    }\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\rest\\templating\\TemplatingMessageBodyWriter.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "// SEAMREST-13\n", "func_signal": "public void testRemovingTask()", "code": "{\n    assertTrue(page.isTaskPresent(4, \"Learn new vocab for English conversations\"));\n    page.removeTask(4);\n    assertFalse(page.isTaskPresent(4));\n    page.reload(); // verify changes are stored on the server\n    assertFalse(page.isTaskPresent(4));\n}", "path": "examples\\tasks\\src\\test\\java\\org\\jboss\\seam\\rest\\examples\\tasks\\ftest\\TaskPageTest.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "/**\n * Find an instance of the annotationClass in an annotation arrays including the first level of meta-annotation.\n *\n * @return the annotationClass instance if present, null otherwise\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static <T extends Annotation> T getAnnotation(Collection<? extends Annotation> annotations, Class<T> annotationClass)", "code": "{\n    for (Annotation annotation : annotations) {\n        if (annotation.annotationType().equals(annotationClass)) {\n            return (T) annotation;\n        }\n        for (Annotation innerAnnotation : annotation.annotationType().getAnnotations()) {\n            if (innerAnnotation.annotationType().equals(annotationClass)) {\n                return (T) innerAnnotation;\n            }\n        }\n    }\n    return null;\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\rest\\util\\Annotations.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "/**\n * Scans a Bean for the following injection points\n * <p/>\n * <code>\n *\n * @Inject @RestClient private T service; </code>\n * <p/>\n * where T is a JAX-RS annotated interface and builds a collection of these types.\n */\n", "func_signal": "public <T> void scanInjectionPointsForJaxrsInterfaces(@Observes ProcessBean<T> event, BeanManager manager)", "code": "{\n    if (!enabled) {\n        return;\n    }\n\n    for (InjectionPoint ip : event.getBean().getInjectionPoints()) {\n        RestClient qualifier = AnnotationInspector.getAnnotation(ip.getAnnotated(), RestClient.class, manager);\n\n        if (qualifier != null) {\n            if (ip.getType() instanceof Class<?>) {\n                Class<?> clazz = (Class<?>) ip.getType();\n\n                if (clazz.isInterface()) // we only support interfaces\n                {\n                    jaxrsInterfaces.add(clazz);\n                }\n            }\n        }\n    }\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\rest\\client\\RestClientExtension.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "/**\n * Mappings are stored in a Map so that we can find them by the exception type.\n */\n", "func_signal": "@Inject\npublic void init(Instance<SeamRestConfiguration> configuration, ExceptionMappingExtension extension)", "code": "{\n    log.info(\"Processing exception mapping configuration.\");\n\n    // XML-configured mappings\n    if (!configuration.isAmbiguous() && !configuration.isUnsatisfied()) {\n        Set<Mapping> exceptionMappings = configuration.get().getMappings();\n        for (Mapping mapping : exceptionMappings) {\n            addExceptionMapping(mapping);\n        }\n    }\n    // annotation-configured mappings\n    for (Mapping mapping : extension.getExceptionMappings()) {\n        addExceptionMapping(mapping);\n    }\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\rest\\exceptions\\SeamExceptionMapper.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "/**\n * Produces ClientRequest instances.\n */\n", "func_signal": "@Produces\n@RestClient(\"\")\npublic ClientRequest produceClientRequest(InjectionPoint ip, ClientExecutor executor)", "code": "{\n    RestClient qualifier = AnnotationInspector.getAnnotation(ip.getAnnotated(), RestClient.class, manager);\n\n    if (qualifier == null) {\n        // this should never happen\n        throw new IllegalStateException(\"@RestClient injection point \" + ip.getMember() + \" is not valid.\");\n    }\n\n    String url = expressions.evaluateValueExpression(qualifier.value(), String.class);\n\n    return new ClientRequest(url, executor);\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\rest\\client\\RestClientProducer.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "// we could do typesafe queries, but Resin (eclipselink) does not support that ATM\n", "func_signal": "public List<Task> getTasks(int start, int limit, String status, String categoryName)", "code": "{\n    Query query = null;\n\n    if (categoryName == null) {\n        query = em.createNamedQuery(\"tasks\");\n    } else {\n        query = em.createNamedQuery(\"tasksByCategory\").setParameter(\"category\", categoryName);\n    }\n\n    query = applyResolutionParameter(query, status);\n    applyPaginationParameters(query, start, limit);\n    return query.getResultList();\n}", "path": "examples\\tasks\\src\\main\\java\\org\\jboss\\seam\\rest\\examples\\tasks\\resource\\CollectionBean.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "/**\n * Create the frame.\n */\n", "func_signal": "@Inject\npublic ApplicationFrame(TasksPanel tasksPanel, ZipPanel zipPanel)", "code": "{\n    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    setBounds(100, 100, 950, 300);\n    setLocationRelativeTo(null);\n    setTitle(\"Seam REST Client Application\");\n    contentPane = new JPanel();\n    contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));\n    contentPane.setLayout(new GridLayout(1, 2, 20, 0));\n    setContentPane(contentPane);\n    contentPane.add(zipPanel);\n    contentPane.add(tasksPanel);\n}", "path": "examples\\client\\src\\main\\java\\org\\jboss\\seam\\rest\\examples\\client\\ui\\ApplicationFrame.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "/**\n * Returns true if and only if the templating extension is enabled and the method contains the\n * <code>@ResponseTemplate</code> annotation.\n */\n", "func_signal": "public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "code": "{\n    if (provider == null) {\n        return false;\n    }\n    ResponseTemplate annotation = findAnnotation(annotations, mediaType);\n    return annotation != null;\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\rest\\templating\\TemplatingMessageBodyWriter.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "/**\n * Sets paginatation parameters\n *\n * @param query JPA query\n * @param start the first item\n * @param limit how many items to return (use 0 for unlimited result)\n * @throws IllegalArgumentException if any of the integer parameters is lesser than 0\n */\n", "func_signal": "protected void applyPaginationParameters(Query query, int start, int limit)", "code": "{\n    query.setFirstResult(start);\n    if (limit != 0) {\n        query.setMaxResults(limit);\n    }\n}", "path": "examples\\tasks\\src\\main\\java\\org\\jboss\\seam\\rest\\examples\\tasks\\resource\\CollectionBean.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "/**\n * Veto SeamRestConfiguration class from bean discovery since we want it's subclasses to be beans, not the class itself.\n */\n", "func_signal": "public void vetoSeamRestConfiguration(@Observes ProcessAnnotatedType<SeamRestConfiguration> event)", "code": "{\n    if (event.getAnnotatedType().getJavaClass().equals(SeamRestConfiguration.class)) {\n        event.veto();\n    }\n}", "path": "impl\\src\\main\\java\\org\\jboss\\seam\\rest\\SeamRestExtension.java", "repo_name": "seam/rest", "stars": 26, "license": "None", "language": "java", "size": 1588}
{"docstring": "/**\n * Updates the old features setting and returns a map of new features.\n */\n", "func_signal": "private Map<String, AboutInfo> createNewBundleGroupsMap()", "code": "{\n\t// retrieve list of installed bundle groups from last session\n\tIDialogSettings settings = IDEWorkbenchPlugin.getDefault()\n\t\t\t.getDialogSettings();\n\tString[] previousFeaturesArray = settings.getArray(INSTALLED_FEATURES);\n\n\t// get a map of currently installed bundle groups and store it for next\n\t// session\n\tMap<String, AboutInfo> bundleGroups = computeBundleGroupMap();\n\tString[] currentFeaturesArray = new String[bundleGroups.size()];\n\tbundleGroups.keySet().toArray(currentFeaturesArray);\n\tsettings.put(INSTALLED_FEATURES, currentFeaturesArray);\n\n\t// remove the previously known from the current set\n\tif (previousFeaturesArray != null) {\n\t\tfor (int i = 0; i < previousFeaturesArray.length; ++i) {\n\t\t\tbundleGroups.remove(previousFeaturesArray[i]);\n\t\t}\n\t}\n\n\treturn bundleGroups;\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\IDEWorkbenchAdvisor.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * Disconnect from the core workspace.\n */\n", "func_signal": "private void disconnectFromWorkspace()", "code": "{\n\t// save the workspace\n\tfinal MultiStatus status = new MultiStatus(\n\t\t\tIDEWorkbenchPlugin.IDE_WORKBENCH, 1,\n\t\t\tIDEWorkbenchMessages.ProblemSavingWorkbench, null);\n\tIRunnableWithProgress runnable = new IRunnableWithProgress() {\n\t\tpublic void run(IProgressMonitor monitor) {\n\t\t\ttry {\n\t\t\t\tstatus.merge(ResourcesPlugin.getWorkspace().save(true,\n\t\t\t\t\t\tmonitor));\n\t\t\t} catch (CoreException e) {\n\t\t\t\tstatus.merge(e.getStatus());\n\t\t\t}\n\t\t}\n\t};\n\ttry {\n\t\tnew ProgressMonitorJobsDialog(null).run(true, false, runnable);\n\t} catch (InvocationTargetException e) {\n\t\tstatus\n\t\t\t\t.merge(new Status(IStatus.ERROR,\n\t\t\t\t\t\tIDEWorkbenchPlugin.IDE_WORKBENCH, 1,\n\t\t\t\t\t\tIDEWorkbenchMessages.InternalError, e\n\t\t\t\t\t\t\t\t.getTargetException()));\n\t} catch (InterruptedException e) {\n\t\tstatus.merge(new Status(IStatus.ERROR,\n\t\t\t\tIDEWorkbenchPlugin.IDE_WORKBENCH, 1,\n\t\t\t\tIDEWorkbenchMessages.InternalError, e));\n\t}\n\tErrorDialog.openError(null,\n\t\t\tIDEWorkbenchMessages.ProblemsSavingWorkspace, null, status,\n\t\t\tIStatus.ERROR | IStatus.WARNING);\n\tif (!status.isOK()) {\n\t\tIDEWorkbenchPlugin.log(\n\t\t\t\tIDEWorkbenchMessages.ProblemsSavingWorkspace, status);\n\t}\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\IDEWorkbenchAdvisor.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * @see org.eclipse.ui.application.WorkbenchAdvisor#postStartup()\n */\n", "func_signal": "public void postStartup()", "code": "{\n\ttearDownSplash32Workaround();\n\ttry {\n\t\trefreshFromLocal();\n\t\tactivateProxyService();\n\t\t((Workbench) PlatformUI.getWorkbench()).registerService(\n\t\t\t\tISelectionConversionService.class,\n\t\t\t\tnew IDESelectionConversionService());\n\n\t\tinitializeSettingsChangeListener();\n\t\tDisplay.getCurrent().addListener(SWT.Settings,\n\t\t\t\tsettingsChangeListener);\n\t} finally {// Resume background jobs after we startup\n\t\tJob.getJobManager().resume();\n\t}\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\IDEWorkbenchAdvisor.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * @see org.eclipse.ui.cheatsheets.ICheatSheetViewer#createPartControl(org.eclipse.swt.widgets.Composite)\n */\n", "func_signal": "public void createPartControl(Composite parent)", "code": "{\n\tbrowser = new Browser(parent, SWT.NONE);\n\n\tbrowser.addDisposeListener(new DisposeListener()\n\t{\n\t\tpublic void widgetDisposed(DisposeEvent e)\n\t\t{\n\t\t\tdispose();\n\t\t}\n\t});\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\AptanaCheatSheetViewer.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * @see org.eclipse.ui.cheatsheets.ICheatSheetViewer#setInput(java.lang.String)\n */\n", "func_signal": "public void setInput(String id)", "code": "{\n\tif (id != null)\n\t{\n\t\tCheatSheetElement element = null;\n\t\telement = CheatSheetRegistryReader.getInstance().findCheatSheet(id);\n\t\tbrowser.setText(getContent(element));\n\t}\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\AptanaCheatSheetViewer.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * @see org.eclipse.ui.application.WorkbenchAdvisor#getWorkbenchErrorHandler()\n */\n", "func_signal": "public AbstractStatusHandler getWorkbenchErrorHandler()", "code": "{\n\tif (ideWorkbenchErrorHandler == null) {\n\t\tideWorkbenchErrorHandler = new IDEWorkbenchErrorHandler(\n\t\t\t\tgetWorkbenchConfigurer());\n\t}\n\treturn ideWorkbenchErrorHandler;\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\IDEWorkbenchAdvisor.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * @see org.eclipse.ui.application.WorkbenchAdvisor#preStartup()\n */\n", "func_signal": "public void preStartup()", "code": "{\n\t// Suspend background jobs while we startup\n\tJob.getJobManager().suspend();\n\n\t// Register the build actions\n\tIProgressService service = PlatformUI.getWorkbench()\n\t\t\t.getProgressService();\n\tImageDescriptor newImage = IDEInternalWorkbenchImages\n\t\t\t.getImageDescriptor(IDEInternalWorkbenchImages.IMG_ETOOL_BUILD_EXEC);\n\tservice.registerIconForFamily(newImage,\n\t\t\tResourcesPlugin.FAMILY_MANUAL_BUILD);\n\tservice.registerIconForFamily(newImage,\n\t\t\tResourcesPlugin.FAMILY_AUTO_BUILD);\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\IDEWorkbenchAdvisor.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * @see org.eclipse.ui.cheatsheets.ICheatSheetViewer#setFocus()\n */\n", "func_signal": "public void setFocus()", "code": "{\n\tif (browser != null)\n\t{\n\t\tbrowser.setFocus();\n\t}\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\AptanaCheatSheetViewer.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * Declares an IDE-specific workbench image.\n * \n * @param symbolicName\n *            the symbolic name of the image\n * @param path\n *            the path of the image file; this path is relative to the base\n *            of the IDE plug-in\n * @param shared\n *            <code>true</code> if this is a shared image, and\n *            <code>false</code> if this is not a shared image\n * @see IWorkbenchConfigurer#declareImage\n */\n", "func_signal": "private void declareWorkbenchImage(Bundle ideBundle, String symbolicName,\n\t\tString path, boolean shared)", "code": "{\n\tURL url = FileLocator.find(ideBundle, new Path(path), null);\n\tImageDescriptor desc = ImageDescriptor.createFromURL(url);\n\tgetWorkbenchConfigurer().declareImage(symbolicName, desc, shared);\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\IDEWorkbenchAdvisor.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.eclipse.ui.application.WorkbenchAdvisor#initialize\n */\n", "func_signal": "public void initialize(IWorkbenchConfigurer configurer)", "code": "{\n\n\tPluginActionBuilder.setAllowIdeLogging(true);\n\t\n\t// make sure we always save and restore workspace state\n\tconfigurer.setSaveAndRestore(true);\n\n\t// register workspace adapters\n\tIDE.registerAdapters();\n\n\t// get the command line arguments\n\tString[] cmdLineArgs = Platform.getCommandLineArgs();\n\n\t// include the workspace location in the title\n\t// if the command line option -showlocation is specified\n\tfor (int i = 0; i < cmdLineArgs.length; i++) {\n\t\tif (\"-showlocation\".equalsIgnoreCase(cmdLineArgs[i])) { //$NON-NLS-1$\n\t\t\tString name = null;\n\t\t\tif (cmdLineArgs.length > i + 1) {\n\t\t\t\tname = cmdLineArgs[i + 1];\n\t\t\t}\n\t\t\tif (name != null && name.indexOf(\"-\") == -1) { //$NON-NLS-1$\n\t\t\t\tworkspaceLocation = name;\n\t\t\t} else {\n\t\t\t\tworkspaceLocation = Platform.getLocation().toOSString();\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// register shared images\n\tdeclareWorkbenchImages();\n\n\t// initialize the activity helper\n\tactivityHelper = IDEWorkbenchActivityHelper.getInstance();\n\n\t// initialize idle handler\n\tidleHelper = new IDEIdleHelper(configurer);\n\t\n\t// initialize the workspace undo monitor\n\tworkspaceUndoMonitor = WorkspaceUndoMonitor.getInstance();\n\n\t// show Help button in JFace dialogs\n\tTrayDialog.setDialogHelpAvailable(true);\n\n\tPolicy.setComparator(Collator.getInstance());\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\IDEWorkbenchAdvisor.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * Returns the ordered map of versioned feature ids -> AboutInfo that are\n * new for this session.\n * \n * @return ordered map of versioned feature ids (key type:\n *         <code>String</code>) -> infos (value type:\n *         <code>AboutInfo</code>).\n */\n", "func_signal": "public Map<String, AboutInfo> getNewlyAddedBundleGroups()", "code": "{\n\tif (newlyAddedBundleGroups == null) {\n\t\tnewlyAddedBundleGroups = createNewBundleGroupsMap();\n\t}\n\treturn newlyAddedBundleGroups;\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\IDEWorkbenchAdvisor.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * @see org.eclipse.ui.cheatsheets.ICheatSheetViewer#getCheatSheetID()\n */\n", "func_signal": "public String getCheatSheetID()", "code": "{\n\tif (getContent() != null)\n\t{\n\t\treturn getContent().getID();\n\t}\n\n\treturn null;\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\AptanaCheatSheetViewer.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * @see org.eclipse.ui.application.WorkbenchAdvisor\n */\n", "func_signal": "public String getInitialWindowPerspectiveId()", "code": "{\n\tint index = PlatformUI.getWorkbench().getWorkbenchWindowCount() - 1;\n\n\tString perspectiveId = null;\n\tAboutInfo[] welcomeInfos = getWelcomePerspectiveInfos();\n\tif (index >= 0 && welcomeInfos != null && index < welcomeInfos.length) {\n\t\tperspectiveId = welcomeInfos[index].getWelcomePerspectiveId();\n\t}\n\tif (perspectiveId == null) {\n\t\tperspectiveId = IDE.RESOURCE_PERSPECTIVE_ID;\n\t}\n\treturn perspectiveId;\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\IDEWorkbenchAdvisor.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * Creates a new workbench advisor instance.\n */\n", "func_signal": "public IDEWorkbenchAdvisor()", "code": "{\n\tsuper();\n\tif (workbenchAdvisor != null) {\n\t\tthrow new IllegalStateException();\n\t}\n\tworkbenchAdvisor = this;\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\IDEWorkbenchAdvisor.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * Initialize the listener for settings changes.\n */\n", "func_signal": "private void initializeSettingsChangeListener()", "code": "{\n\tsettingsChangeListener = new Listener() {\n\n\t\tboolean currentHighContrast = Display.getCurrent()\n\t\t\t\t.getHighContrast();\n\n\t\tpublic void handleEvent(org.eclipse.swt.widgets.Event event) {\n\t\t\tif (Display.getCurrent().getHighContrast() == currentHighContrast)\n\t\t\t\treturn;\n\n\t\t\tcurrentHighContrast = !currentHighContrast;\n\n\t\t\t// make sure they really want to do this\n\t\t\tif (new MessageDialog(null,\n\t\t\t\t\tIDEWorkbenchMessages.SystemSettingsChange_title, null,\n\t\t\t\t\tIDEWorkbenchMessages.SystemSettingsChange_message,\n\t\t\t\t\tMessageDialog.QUESTION, new String[] {\n\t\t\t\t\t\t\tIDEWorkbenchMessages.SystemSettingsChange_yes,\n\t\t\t\t\t\t\tIDEWorkbenchMessages.SystemSettingsChange_no },\n\t\t\t\t\t1).open() == Window.OK) {\n\t\t\t\tPlatformUI.getWorkbench().restart();\n\t\t\t}\n\t\t}\n\t};\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\IDEWorkbenchAdvisor.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * Return true if the intro plugin is present and false otherwise.\n * \n * @return boolean\n */\n", "func_signal": "public boolean hasIntro()", "code": "{\n\treturn getWorkbenchConfigurer().getWorkbench().getIntroManager()\n\t\t\t.hasIntro();\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\IDEWorkbenchAdvisor.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * @see org.eclipse.ui.application.WorkbenchAdvisor#postShutdown\n */\n", "func_signal": "public void postShutdown()", "code": "{\n\tif (activityHelper != null) {\n\t\tactivityHelper.shutdown();\n\t\tactivityHelper = null;\n\t}\n\tif (idleHelper != null) {\n\t\tidleHelper.shutdown();\n\t\tidleHelper = null;\n\t}\n\tif (workspaceUndoMonitor != null) {\n\t\tworkspaceUndoMonitor.shutdown();\n\t\tworkspaceUndoMonitor = null;\n\t}\n\tif (IDEWorkbenchPlugin.getPluginWorkspace() != null) {\n\t\tdisconnectFromWorkspace();\n\t}\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\IDEWorkbenchAdvisor.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * @see org.eclipse.ui.cheatsheets.ICheatSheetViewer#setInput(java.lang.String, java.lang.String, java.net.URL)\n */\n", "func_signal": "public void setInput(String id, String name, URL url)", "code": "{\n\tif (url != null)\n\t{\n\t\tbrowser.setUrl(url.toString());\n\t\tbrowser.update();\n\t}\n\telse\n\t{\n\t\tsetInput(id);\n\t}\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\AptanaCheatSheetViewer.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * Activate the proxy service by obtaining it.\n */\n", "func_signal": "private void activateProxyService()", "code": "{\n\tBundle bundle = Platform.getBundle(\"org.eclipse.ui.ide\"); //$NON-NLS-1$\n\tObject proxyService = null;\n\tif (bundle != null) {\n\t\tServiceReference ref = bundle.getBundleContext().getServiceReference(IProxyService.class.getName());\n\t\tif (ref != null)\n\t\t\tproxyService = bundle.getBundleContext().getService(ref);\n\t}\n\tif (proxyService == null) {\n\t\tIDEWorkbenchPlugin.log(\"Proxy service could not be found.\"); //$NON-NLS-1$\n\t}\t\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\IDEWorkbenchAdvisor.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * Declares all IDE-specific workbench images. This includes both \"shared\"\n * images (named in {@link IDE.SharedImages}) and internal images (named in\n * {@link org.eclipse.ui.internal.ide.IDEInternalWorkbenchImages}).\n * \n * @see IWorkbenchConfigurer#declareImage\n */\n", "func_signal": "private void declareWorkbenchImages()", "code": "{\n\tfinal String ICONS_PATH = \"$nl$/icons/full/\";//$NON-NLS-1$\n\tfinal String PATH_ELOCALTOOL = ICONS_PATH + \"elcl16/\"; // Enabled //$NON-NLS-1$\n\n\t// Disabled toolbar icons\n\tfinal String PATH_DLOCALTOOL = ICONS_PATH + \"dlcl16/\"; //$NON-NLS-1$\n\t// Enabled toolbar icons\n\tfinal String PATH_ETOOL = ICONS_PATH + \"etool16/\"; //$NON-NLS-1$\n\t// Disabled toolbar icons\n\tfinal String PATH_DTOOL = ICONS_PATH + \"dtool16/\"; //$NON-NLS-1$\n\t// Model object icons\n\tfinal String PATH_OBJECT = ICONS_PATH + \"obj16/\"; //$NON-NLS-1$\n\t// Wizard icons\n\tfinal String PATH_WIZBAN = ICONS_PATH + \"wizban/\"; //$NON-NLS-1$\n\n\tBundle ideBundle = Platform.getBundle(IDEWorkbenchPlugin.IDE_WORKBENCH);\n\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_ETOOL_BUILD_EXEC, PATH_ETOOL\n\t\t\t\t\t+ \"build_exec.gif\", false); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_ETOOL_BUILD_EXEC_HOVER,\n\t\t\tPATH_ETOOL + \"build_exec.gif\", false); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_ETOOL_BUILD_EXEC_DISABLED,\n\t\t\tPATH_DTOOL + \"build_exec.gif\", false); //$NON-NLS-1$\n\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_ETOOL_SEARCH_SRC, PATH_ETOOL\n\t\t\t\t\t+ \"search_src.gif\", false); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_ETOOL_SEARCH_SRC_HOVER,\n\t\t\tPATH_ETOOL + \"search_src.gif\", false); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_ETOOL_SEARCH_SRC_DISABLED,\n\t\t\tPATH_DTOOL + \"search_src.gif\", false); //$NON-NLS-1$\n\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_ETOOL_NEXT_NAV, PATH_ETOOL\n\t\t\t\t\t+ \"next_nav.gif\", false); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_ETOOL_PREVIOUS_NAV, PATH_ETOOL\n\t\t\t\t\t+ \"prev_nav.gif\", false); //$NON-NLS-1$\n\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_WIZBAN_NEWPRJ_WIZ, PATH_WIZBAN\n\t\t\t\t\t+ \"newprj_wiz.png\", false); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_WIZBAN_NEWFOLDER_WIZ,\n\t\t\tPATH_WIZBAN + \"newfolder_wiz.png\", false); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_WIZBAN_NEWFILE_WIZ, PATH_WIZBAN\n\t\t\t\t\t+ \"newfile_wiz.png\", false); //$NON-NLS-1$\n\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_WIZBAN_IMPORTDIR_WIZ,\n\t\t\tPATH_WIZBAN + \"importdir_wiz.png\", false); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_WIZBAN_IMPORTZIP_WIZ,\n\t\t\tPATH_WIZBAN + \"importzip_wiz.png\", false); //$NON-NLS-1$\n\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_WIZBAN_EXPORTDIR_WIZ,\n\t\t\tPATH_WIZBAN + \"exportdir_wiz.png\", false); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_WIZBAN_EXPORTZIP_WIZ,\n\t\t\tPATH_WIZBAN + \"exportzip_wiz.png\", false); //$NON-NLS-1$\n\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_WIZBAN_RESOURCEWORKINGSET_WIZ,\n\t\t\tPATH_WIZBAN + \"workset_wiz.png\", false); //$NON-NLS-1$\n\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_DLGBAN_SAVEAS_DLG, PATH_WIZBAN\n\t\t\t\t\t+ \"saveas_wiz.png\", false); //$NON-NLS-1$\n\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_DLGBAN_QUICKFIX_DLG, PATH_WIZBAN\n\t\t\t\t\t+ \"quick_fix.png\", false); //$NON-NLS-1$\n\n\tdeclareWorkbenchImage(ideBundle, IDE.SharedImages.IMG_OBJ_PROJECT,\n\t\t\tPATH_OBJECT + \"prj_obj.gif\", true); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDE.SharedImages.IMG_OBJ_PROJECT_CLOSED, PATH_OBJECT\n\t\t\t\t\t+ \"cprj_obj.gif\", true); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle, IDE.SharedImages.IMG_OPEN_MARKER,\n\t\t\tPATH_ELOCALTOOL + \"gotoobj_tsk.gif\", true); //$NON-NLS-1$\n\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_ELCL_QUICK_FIX_ENABLED,\n\t\t\tPATH_ELOCALTOOL + \"smartmode_co.gif\", true); //$NON-NLS-1$\n\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_DLCL_QUICK_FIX_DISABLED,\n\t\t\tPATH_DLOCALTOOL + \"smartmode_co.gif\", true); //$NON-NLS-1$\n\n\t// task objects\n\t// declareRegistryImage(IDEInternalWorkbenchImages.IMG_OBJS_HPRIO_TSK,\n\t// PATH_OBJECT+\"hprio_tsk.gif\");\n\t// declareRegistryImage(IDEInternalWorkbenchImages.IMG_OBJS_MPRIO_TSK,\n\t// PATH_OBJECT+\"mprio_tsk.gif\");\n\t// declareRegistryImage(IDEInternalWorkbenchImages.IMG_OBJS_LPRIO_TSK,\n\t// PATH_OBJECT+\"lprio_tsk.gif\");\n\n\tdeclareWorkbenchImage(ideBundle, IDE.SharedImages.IMG_OBJS_TASK_TSK,\n\t\t\tPATH_OBJECT + \"taskmrk_tsk.gif\", true); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle, IDE.SharedImages.IMG_OBJS_BKMRK_TSK,\n\t\t\tPATH_OBJECT + \"bkmrk_tsk.gif\", true); //$NON-NLS-1$\n\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_OBJS_COMPLETE_TSK, PATH_OBJECT\n\t\t\t\t\t+ \"complete_tsk.gif\", true); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_OBJS_INCOMPLETE_TSK, PATH_OBJECT\n\t\t\t\t\t+ \"incomplete_tsk.gif\", true); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_OBJS_WELCOME_ITEM, PATH_OBJECT\n\t\t\t\t\t+ \"welcome_item.gif\", true); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_OBJS_WELCOME_BANNER, PATH_OBJECT\n\t\t\t\t\t+ \"welcome_banner.gif\", true); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_OBJS_ERROR_PATH, PATH_OBJECT\n\t\t\t\t\t+ \"error_tsk.gif\", true); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_OBJS_WARNING_PATH, PATH_OBJECT\n\t\t\t\t\t+ \"warn_tsk.gif\", true); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_OBJS_INFO_PATH, PATH_OBJECT\n\t\t\t\t\t+ \"info_tsk.gif\", true); //$NON-NLS-1$\n\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_LCL_FLAT_LAYOUT, PATH_ELOCALTOOL\n\t\t\t\t\t+ \"flatLayout.gif\", true); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_LCL_HIERARCHICAL_LAYOUT,\n\t\t\tPATH_ELOCALTOOL + \"hierarchicalLayout.gif\", true); //$NON-NLS-1$\n\tdeclareWorkbenchImage(ideBundle,\n\t\t\tIDEInternalWorkbenchImages.IMG_ETOOL_PROBLEM_CATEGORY,\n\t\t\tPATH_ETOOL + \"problem_category.gif\", true); //$NON-NLS-1$\n\n\t// synchronization indicator objects\n\t// declareRegistryImage(IDEInternalWorkbenchImages.IMG_OBJS_WBET_STAT,\n\t// PATH_OVERLAY+\"wbet_stat.gif\");\n\t// declareRegistryImage(IDEInternalWorkbenchImages.IMG_OBJS_SBET_STAT,\n\t// PATH_OVERLAY+\"sbet_stat.gif\");\n\t// declareRegistryImage(IDEInternalWorkbenchImages.IMG_OBJS_CONFLICT_STAT,\n\t// PATH_OVERLAY+\"conflict_stat.gif\");\n\n\t// content locality indicator objects\n\t// declareRegistryImage(IDEInternalWorkbenchImages.IMG_OBJS_NOTLOCAL_STAT,\n\t// PATH_STAT+\"notlocal_stat.gif\");\n\t// declareRegistryImage(IDEInternalWorkbenchImages.IMG_OBJS_LOCAL_STAT,\n\t// PATH_STAT+\"local_stat.gif\");\n\t// declareRegistryImage(IDEInternalWorkbenchImages.IMG_OBJS_FILLLOCAL_STAT,\n\t// PATH_STAT+\"filllocal_stat.gif\");\n}", "path": "plugins\\com.aptana.ide.rcp\\src\\com\\aptana\\ide\\rcp\\IDEWorkbenchAdvisor.java", "repo_name": "aptana/studio2-rcp", "stars": 25, "license": "other", "language": "java", "size": 7769}
{"docstring": "/**\n * Read a raw Varint from the stream. If larger than 32 bits, discard the\n * upper bits.\n */\n", "func_signal": "static public int readRawVarint32(InputStream is) throws IOException", "code": "{\n    byte tmp = readRawByte(is);\n    if (tmp >= 0) {\n        return tmp;\n    }\n    int result = tmp & 0x7f;\n    if ((tmp = readRawByte(is)) >= 0) {\n        result |= tmp << 7;\n    } else {\n        result |= (tmp & 0x7f) << 7;\n        if ((tmp = readRawByte(is)) >= 0) {\n            result |= tmp << 14;\n        } else {\n            result |= (tmp & 0x7f) << 14;\n            if ((tmp = readRawByte(is)) >= 0) {\n                result |= tmp << 21;\n            } else {\n                result |= (tmp & 0x7f) << 21;\n                result |= (tmp = readRawByte(is)) << 28;\n                if (tmp < 0) {\n                    // Discard upper 32 bits.\n                    for (int i = 0; i < 5; i++) {\n                        if (readRawByte(is) >= 0)\n                            return result;\n                    }\n                    throw new InvalidProtocolBufferException(\"CodedInputStream encountered a malformed varint.\");\n                }\n            }\n        }\n    }\n    return result;\n}", "path": "hawtbuf-proto\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\BaseMessage.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "/** Read a {@code string} field value from the stream. */\n", "func_signal": "public String readString() throws IOException", "code": "{\n    int size = readRawVarint32();\n    Buffer data = readRawBytes(size);\n    return new String(data.data, data.offset, data.length, \"UTF-8\");\n}", "path": "hawtbuf-proto\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\CodedInputStream.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "/**\n * Reads and discards a single field, given its tag value.\n * \n * @return {@code false} if the tag is an endgroup tag, in which case\n *         nothing is skipped. Otherwise, returns {@code true}.\n */\n", "func_signal": "public boolean skipField(int tag) throws IOException", "code": "{\n    switch (WireFormat.getTagWireType(tag)) {\n    case WireFormat.WIRETYPE_VARINT:\n        readInt32();\n        return true;\n    case WireFormat.WIRETYPE_FIXED64:\n        readRawLittleEndian64();\n        return true;\n    case WireFormat.WIRETYPE_LENGTH_DELIMITED:\n        skipRawBytes(readRawVarint32());\n        return true;\n    case WireFormat.WIRETYPE_START_GROUP:\n        skipMessage();\n        checkLastTagWas(WireFormat.makeTag(WireFormat.getTagFieldNumber(tag), WireFormat.WIRETYPE_END_GROUP));\n        return true;\n    case WireFormat.WIRETYPE_END_GROUP:\n        return false;\n    case WireFormat.WIRETYPE_FIXED32:\n        readRawLittleEndian32();\n        return true;\n    default:\n        throw InvalidProtocolBufferException.invalidWireType();\n    }\n}", "path": "hawtbuf-proto\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\CodedInputStream.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "/**\n * Attempt to read a field tag, returning zero if we have reached EOF.\n * Protocol message parsers use this to read tags, since a protocol message\n * may legally end wherever a tag occurs, and zero is not a valid tag\n * number.\n */\n", "func_signal": "public int readTag() throws IOException", "code": "{\n    if( pos >= limit ) {\n        lastTag=0;\n        return 0;\n    }\n    try {\n        lastTag = readRawVarint32();\n        if (lastTag == 0) {\n            // If we actually read zero, that's not a valid tag.\n            throw InvalidProtocolBufferException.invalidTag();\n        }\n        return lastTag;\n    } catch (EOFException e) {\n        lastTag=0;\n        return 0;\n    }\n}", "path": "hawtbuf-proto\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\CodedInputStream.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "/** Construct the description string for this exception. */\n", "func_signal": "private static String buildDescription(List<String> missingFields)", "code": "{\n    StringBuilder description = new StringBuilder(\"Message missing required fields: \");\n    boolean first = true;\n    for (String field : missingFields) {\n        if (first) {\n            first = false;\n        } else {\n            description.append(\", \");\n        }\n        description.append(field);\n    }\n    return description.toString();\n}", "path": "hawtbuf-proto\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\UninitializedMessageException.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "/**\n * Reads and discards an entire message. This will read either until EOF or\n * until an endgroup tag, whichever comes first.\n */\n", "func_signal": "public void skipMessage() throws IOException", "code": "{\n    while (true) {\n        int tag = readTag();\n        if (tag == 0 || !skipField(tag))\n            return;\n    }\n}", "path": "hawtbuf-proto\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\CodedInputStream.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "// /////////////////////////////////////////////////////////////////\n// Write related helpers.\n// /////////////////////////////////////////////////////////////////\n", "func_signal": "public void writeFramed(CodedOutputStream output) throws IOException", "code": "{\n    output.writeRawVarint32(serializedSizeUnframed());\n    writeUnframed(output);\n}", "path": "hawtbuf-proto\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\BaseMessage.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "/**\n * Read a fixed size of bytes from the input.\n * \n * @throws InvalidProtocolBufferException\n *             The end of the stream or the current limit was reached.\n */\n", "func_signal": "public Buffer readRawBytes(int size) throws IOException", "code": "{\n    if( size == 0) {\n        return new Buffer(new byte[]{});\n    }\n    if( this.pos+size > limit ) {\n        throw new EOFException();\n    }\n    \n    // If the underlying stream is a ByteArrayInputStream\n    // then we can avoid an array copy.\n    if( bis!=null ) {\n        Buffer rc = bis.readBuffer(size);\n        if( rc==null || rc.getLength() < size ) {\n            throw new EOFException();\n        }\n        this.pos += rc.getLength();\n        return rc;\n    }\n\n    // Otherwise we, have to do it the old fasioned way\n    byte[] rc = new byte[size];\n    int c;\n    int pos=0;\n    while( pos < size ) {\n        c = in.read(rc, pos, size-pos);\n        if( c < 0 ) {\n            throw new EOFException();\n        }\n        this.pos += c;\n        pos += c;\n    }\n    \n    return new Buffer(rc);\n}", "path": "hawtbuf-proto\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\CodedInputStream.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "/** Read a raw Varint from the stream. */\n", "func_signal": "public long readRawVarint64() throws IOException", "code": "{\n    int shift = 0;\n    long result = 0;\n    while (shift < 64) {\n        byte b = readRawByte();\n        result |= (long) (b & 0x7F) << shift;\n        if ((b & 0x80) == 0)\n            return result;\n        shift += 7;\n    }\n    throw InvalidProtocolBufferException.malformedVarint();\n}", "path": "hawtbuf-proto\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\CodedInputStream.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "/**\n * Verifies that the last call to readTag() returned the given tag value.\n * This is used to verify that a nested group ended with the correct end\n * tag.\n * \n * @throws InvalidProtocolBufferException\n *             {@code value} does not match the last tag.\n */\n", "func_signal": "public void checkLastTagWas(int value) throws InvalidProtocolBufferException", "code": "{\n    if (lastTag != value) {\n        throw InvalidProtocolBufferException.invalidEndTag();\n    }\n}", "path": "hawtbuf-proto\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\CodedInputStream.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "///////////////////////////////////////////////////////////////////\n// Overrides\n///////////////////////////////////////////////////////////////////\n", "func_signal": "public String toString()", "code": "{\n    if( value==null ) {\n        value = decode(this); \n    }\n    return value;\n}", "path": "hawtbuf\\src\\main\\java\\org\\fusesource\\hawtbuf\\UTF8Buffer.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "// =================================================================\n// multiple_files_test\n", "func_signal": "public void testMultipleFilesOption() throws Exception", "code": "{\n  // We mostly just want to check that things compile.\n  MessageWithNoOuter message =\n    new MessageWithNoOuter()\n      .setNested(new MessageWithNoOuter.NestedMessage().setI(1))\n      .addForeign(new TestAllTypes().setOptionalInt32(1))\n      .setNestedEnum(MessageWithNoOuter.NestedEnum.BAZ)\n      .setForeignEnum(EnumWithNoOuter.BAR)\n      ;\n  \n  byte[] data = message.toUnframedByteArray();\n  MessageWithNoOuter newMessage = MessageWithNoOuter.parseUnframed(data);\n  assertEquals(message.toString(), newMessage.toString());\n}", "path": "hawtbuf-protoc\\src\\it\\hawtbuf-proto-tests\\src\\test\\java\\org\\fusesource\\hawtbuf\\proto\\GeneratedMessageTest.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "// /////////////////////////////////////////////////////////////////\n// Read related helpers.\n// /////////////////////////////////////////////////////////////////\n", "func_signal": "public T mergeFramed(CodedInputStream input) throws IOException", "code": "{\n    int length = input.readRawVarint32();\n    int oldLimit = input.pushLimit(length);\n    T rc = mergeUnframed(input);\n    input.checkLastTagWas(0);\n    input.popLimit(oldLimit);\n    return rc;\n}", "path": "hawtbuf-proto\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\BaseMessage.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "/** Read a {@code bytes} field value from the stream. */\n", "func_signal": "public Buffer readBytes() throws IOException", "code": "{\n    int size = readRawVarint32();\n    return readRawBytes(size);\n}", "path": "hawtbuf-proto\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\CodedInputStream.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "/**\n * Checks for validation errors in the proto definition and fills them \n * into the errors list.\n * \n * @return\n */\n", "func_signal": "public void validate(List<String> errors)", "code": "{\n    for (ProtoDescriptor o : importProtoDescriptors.values()) {\n        o.validate(errors);\n    }\n    for (OptionDescriptor o : options.values()) {\n        o.validate(errors);\n    }\n    for (MessageDescriptor o : messages.values()) {\n        o.validate(errors);\n    }\n    for (EnumDescriptor o : enums.values()) {\n        o.validate(errors);\n    }\n    for (MessageDescriptor o : extendsList) {\n        o.validate(errors);\n    }\n    for (ServiceDescriptor o : services.values()) {\n        o.validate(errors);\n    }\n}", "path": "hawtbuf-protoc\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\compiler\\ProtoDescriptor.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "/** Read a 32-bit little-endian integer from the stream. */\n", "func_signal": "public int readRawLittleEndian32() throws IOException", "code": "{\n    byte b1 = readRawByte();\n    byte b2 = readRawByte();\n    byte b3 = readRawByte();\n    byte b4 = readRawByte();\n    return (((int) b1 & 0xff)) | (((int) b2 & 0xff) << 8) | (((int) b3 & 0xff) << 16) | (((int) b4 & 0xff) << 24);\n}", "path": "hawtbuf-proto\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\CodedInputStream.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "/** Read a 64-bit little-endian integer from the stream. */\n", "func_signal": "public long readRawLittleEndian64() throws IOException", "code": "{\n    byte b1 = readRawByte();\n    byte b2 = readRawByte();\n    byte b3 = readRawByte();\n    byte b4 = readRawByte();\n    byte b5 = readRawByte();\n    byte b6 = readRawByte();\n    byte b7 = readRawByte();\n    byte b8 = readRawByte();\n    return (((long) b1 & 0xff)) | (((long) b2 & 0xff) << 8) | (((long) b3 & 0xff) << 16) | (((long) b4 & 0xff) << 24) | (((long) b5 & 0xff) << 32) | (((long) b6 & 0xff) << 40) | (((long) b7 & 0xff) << 48) | (((long) b8 & 0xff) << 56);\n}", "path": "hawtbuf-proto\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\CodedInputStream.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "/**\n * Reads and discards {@code size} bytes.\n * \n * @throws InvalidProtocolBufferException\n *             The end of the stream or the current limit was reached.\n */\n", "func_signal": "public void skipRawBytes(int size) throws IOException", "code": "{\n    int pos = 0;\n    while (pos < size) {\n        int n = (int) in.skip(size - pos);\n        pos += n;\n    }\n}", "path": "hawtbuf-proto\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\CodedInputStream.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "///////////////////////////////////////////////////////////////////\n// Statics\n///////////////////////////////////////////////////////////////////\n", "func_signal": "public static UTF8Buffer utf8(String value)", "code": "{\n    if( value==null ) {\n        return null;\n    }\n    return new UTF8Buffer(value);\n}", "path": "hawtbuf\\src\\main\\java\\org\\fusesource\\hawtbuf\\UTF8Buffer.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "/**\n * Read one byte from the input.\n * \n * @throws InvalidProtocolBufferException\n *             The end of the stream or the current limit was reached.\n */\n", "func_signal": "public byte readRawByte() throws IOException", "code": "{\n    if( pos >= limit ) {\n        throw new EOFException();\n    }\n    int rc = in.read();\n    if( rc < 0 ) {\n        throw new EOFException();\n    }\n    pos++;\n    return (byte)( rc & 0xFF); \n}", "path": "hawtbuf-proto\\src\\main\\java\\org\\fusesource\\hawtbuf\\proto\\CodedInputStream.java", "repo_name": "chirino/hawtbuf", "stars": 19, "license": "apache-2.0", "language": "java", "size": 677}
{"docstring": "/**\n * Delete a public key\n * \n * @param context\n * @param number\n * @return Boolean successful\n */\n", "func_signal": "public static boolean deletePublicKey(Context context, int id)", "code": "{\n    SQLiteDatabase keyRing = openKeyring(context);\n    int num = keyRing.delete(PUBLIC_KEY_TABLE, \"_ID=\" + id, null);\n    \n    keyRing.close();\n    return num > 0;\n}", "path": "src\\org\\parandroid\\encryption\\MessageEncryptionFactory.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * Check if we have the public key for the given number\n * \n * @param context\n * @param number\n * @return boolean\n */\n", "func_signal": "public static boolean hasPublicKey(Context context, String number)", "code": "{\n\tArrayList<String> publicKeys = getPublicKeys(context);\n\tfor(String publicKey : publicKeys){\n\t\tif(PhoneNumberUtils.compare(number, publicKey)){\n\t\t\tLog.v(TAG, \"Public key exists for number '\" + number + \"'; '\" + publicKey + \"'\");\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t\tLog.v(TAG, \"No public key for number '\" + number + \"'\");\n\treturn false;\n}", "path": "src\\org\\parandroid\\encryption\\MessageEncryptionFactory.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * Get a stored private key in PKCS8 format (Used to carry private certificate keypairs (encrypted or unencrypted)\n * @see http://en.wikipedia.org/wiki/PKCS\n * @see http://tools.ietf.org/html/rfc5208\n * \n * @param context\n * @param keyFilename\n * @return private key\n * @throws IOException\n * @throws NoSuchAlgorithmException\n * @throws InvalidKeySpecException\n * @throws BadPaddingException \n * @throws IllegalBlockSizeException \n * @throws NoSuchPaddingException \n * @throws InvalidKeyException \n */\n", "func_signal": "public static PrivateKey getPrivateKey(Context context) throws Exception", "code": "{\n\t\n\tif(!isAuthenticated()) return null;\n\t\n\t\tbyte[] keyBytes = getKeyFileBytes(context, PRIVATE_KEY_FILENAME);\n\tbyte[] pk = decryptPrivateKey(keyBytes);\n\t\t\n\tPKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(pk);\n\t\tKeyFactory kf = KeyFactory.getInstance(KEY_EXCHANGE_PROTOCOL);\n\t\tPrivateKey privateKey = kf.generatePrivate(spec);\n\t\n\treturn privateKey;\n}", "path": "src\\org\\parandroid\\encryption\\MessageEncryptionFactory.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * Get the local filename of a stored public key.\n * Trailing country-codes will be omitted\n * \n * @param number\n * @return filename\n */\n", "func_signal": "public static String getPublicKeyFilename(Context context, String number)", "code": "{\n\tArrayList<String> publicKeys = getPublicKeys(context);\n\tfor(String publicKey : publicKeys){\n\t\tif(PhoneNumberUtils.compare(number, publicKey)){\n\t\t\tLog.v(TAG, \"Public key exists for number '\" + number + \"'; '\" + publicKey + \"'\");\n\t\t\treturn publicKey;\n\t\t}\n\t}\n\n\t\tLog.v(TAG, \"No public key for '\" + number + \"'\");\n\treturn number;\n}", "path": "src\\org\\parandroid\\encryption\\MessageEncryptionFactory.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * Builds the regular expression we use to find smileys in {@link #addSmileySpans}.\n */\n", "func_signal": "private Pattern buildPattern()", "code": "{\n    // Set the StringBuilder capacity with the assumption that the average\n    // smiley is 3 characters long.\n    StringBuilder patternString = new StringBuilder(mSmileyTexts.length * 3);\n\n    // Build a regex that looks like (:-)|:-(|...), but escaping the smilies\n    // properly so they will be interpreted literally by the regex matcher.\n    patternString.append('(');\n    for (String s : mSmileyTexts) {\n        patternString.append(Pattern.quote(s));\n        patternString.append('|');\n    }\n    // Replace the extra '|' with a ')'\n    patternString.replace(patternString.length() - 1, patternString.length(), \")\");\n    \n    return Pattern.compile(patternString.toString());\n}", "path": "src\\org\\parandroid\\sms\\util\\SmileyParser.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * Helper method to verify which field has the focus\n * @param focused The view that should be focused (all others should not have focus)\n */\n", "func_signal": "@SmallTest\nprivate void checkFocused(View focused)", "code": "{\n    assertEquals(focused == mRecipientsView, mRecipientsView.isFocused());\n    assertEquals(focused == mTextEditor, mTextEditor.isFocused());\n}", "path": "tests\\src\\org\\parandroid\\mms\\ui\\ComposeMessageActivityTests.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/*\n * Node Interface Methods\n */\n", "func_signal": "public Node appendChild(Node newChild) throws DOMException", "code": "{\n    ((NodeImpl)newChild).setParentNode(this);\n    mChildNodes.remove(newChild);\n    mChildNodes.add(newChild);\n    return newChild;\n}", "path": "src\\org\\parandroid\\sms\\dom\\NodeImpl.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * We have to know our width before we can compute the snippet string.  Do that\n * here and then defer to super for whatever work is normally done.\n */\n", "func_signal": "@Override\nprotected void onLayout(boolean changed, int left, int top, int right, int bottom)", "code": "{\n    String fullTextLower = mFullText.toLowerCase();\n    String targetStringLower = mTargetString.toLowerCase();\n\n    int startPos = fullTextLower.indexOf(targetStringLower);\n    int searchStringLength = targetStringLower.length();\n    int bodyLength = fullTextLower.length();\n\n    TextPaint tp = getPaint();\n\n    float searchStringWidth = tp.measureText(mTargetString);\n    float textFieldWidth = getWidth();\n\n    String snippetString = null;\n    if (searchStringWidth > textFieldWidth) {\n        snippetString = mFullText.substring(startPos, startPos + searchStringLength);\n    } else {\n        float ellipsisWidth = tp.measureText(sEllipsis);\n        textFieldWidth -= (2F * ellipsisWidth); // assume we'll need one on both ends\n\n        int offset = -1;\n        int start = -1;\n        int end = -1;\n        /* TODO: this code could be made more efficient by only measuring the additional\n         * characters as we widen the string rather than measuring the whole new\n         * string each time.\n         */\n        while (true) {\n            offset += 1;\n\n            int newstart = Math.max(0, startPos - offset);\n            int newend = Math.min(bodyLength, startPos + searchStringLength + offset);\n\n            if (newstart == start && newend == end) {\n                // if we couldn't expand out any further then we're done\n                break;\n            }\n            start = newstart;\n            end = newend;\n\n            // pull the candidate string out of the full text rather than body\n            // because body has been toLower()'ed\n            String candidate = mFullText.substring(start, end);\n            if (tp.measureText(candidate) > textFieldWidth) {\n                // if the newly computed width would exceed our bounds then we're done\n                // do not use this \"candidate\"\n                break;\n            }\n\n            snippetString = String.format(\n                    \"%s%s%s\",\n                    start == 0 ? \"\" : sEllipsis,\n                    candidate,\n                    end == bodyLength ? \"\" : sEllipsis);\n        }\n    }\n\n    String snippetStringLower = snippetString.toLowerCase();\n    SpannableString spannable = new SpannableString(snippetString);\n    int start = 0;\n    while (true) {\n        int index = snippetStringLower.indexOf(targetStringLower, start);\n        if (index == -1) {\n            break;\n        }\n//              spannable.setSpan(new ForegroundColorSpan(sHighlightColor), index, index+searchStringLength, 0);\n        spannable.setSpan(new StyleSpan(sTypefaceHighlight), index, index+searchStringLength, 0);\n        start = index + searchStringLength;\n    }\n    setText(spannable);\n\n    // do this after the call to setText() above\n    super.onLayout(changed, left, top, right, bottom);\n}", "path": "src\\org\\parandroid\\sms\\ui\\SearchActivity.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * Get the raw bytes of a file\n * \n * @param context\n * @param keyFilename\n * @return\n * @throws IOException\n */\n", "func_signal": "private static byte[] getKeyFileBytes(Context context, String keyFilename) throws IOException", "code": "{\n    \tInputStream key = context.openFileInput(keyFilename);\n    \t\n    \tDataInputStream dis = new DataInputStream(key);\n\tbyte[] keyBytes = new byte[dis.available()];\n\t\n\tdis.readFully(keyBytes);\n\tdis.close();\n\t\n\treturn keyBytes;\n    }", "path": "src\\org\\parandroid\\encryption\\MessageEncryptionFactory.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * Find a SMIL part in the MM.\n *\n * @return The existing SMIL part or null if no SMIL part was found.\n */\n", "func_signal": "private static PduPart findSmilPart(PduBody body)", "code": "{\n    int partNum = body.getPartsNum();\n    for(int i = 0; i < partNum; i++) {\n        PduPart part = body.getPart(i);\n        if (Arrays.equals(part.getContentType(),\n                        ContentType.APP_SMIL.getBytes())) {\n            // Sure only one SMIL part.\n            return part;\n        }\n    }\n    return null;\n}", "path": "src\\org\\parandroid\\sms\\model\\SmilHelper.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * Tests that a simple SMS message is successfully sent.\n */\n", "func_signal": "@LargeTest\npublic void testSendMessage() throws Throwable", "code": "{\n    final ComposeMessageActivity a = getActivity();\n\n    runTestOnUiThread(new Runnable() {\n        public void run() {\n            assertEquals(\"mMsgListAdapter.getCount\", 0, mMsgListAdapter.getCount());\n            checkFocused(mRecipientsView);\n            mRecipientsView.setText(\"4258365498\");\n            mTextEditor.setText(\"This is a test message\");\n            Button send = (Button)a.findViewById(R.id.send_button);\n            send.performClick();\n        }\n    });\n\n    // Now poll while watching the adapter to see if the message got sent\n    BoxChecker boxChecker = new BoxChecker(new int[] {4, 2});    // outbox, sent\n    long now = System.currentTimeMillis();\n    boolean success = true;\n    while (!boxChecker.isDone()) {\n        Thread.sleep(1000);\n        if (System.currentTimeMillis() - now > 10000) {\n            // Give up after ten seconds\n            success = false;\n            break;\n        }\n    }\n    assertTrue(success && boxChecker.getError() == null);\n}", "path": "tests\\src\\org\\parandroid\\mms\\ui\\ComposeMessageActivityTests.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * Disables the password, forcing the user to insert it again when trying\n * to read encrypted messages.\n */\n", "func_signal": "public static void forgetPassword()", "code": "{\n\tpassword = null;\n\tLog.i(TAG, \"Disabled the password\");\n}", "path": "src\\org\\parandroid\\encryption\\MessageEncryptionFactory.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n* Generate a keypair using diffie - hellman\n* The keys are saved in the filesystem\n* \n* @param context\n* @return keyPair\n* \n* @throws NoSuchAlgorithmException\n* @throws IOException \n* @throws InvalidAlgorithmParameterException \n * @throws BadPaddingException \n * @throws IllegalBlockSizeException \n * @throws NoSuchPaddingException \n * @throws InvalidKeyException \n * @throws InvalidKeySpecException \n*/\n", "func_signal": "public static KeyPair generateKeyPair(Context context) throws Exception", "code": "{  \t\n    \t\n    \tKeyPairGenerator keyGen = KeyPairGenerator.getInstance(KEY_EXCHANGE_PROTOCOL);\n        DHParameterSpec dhSpec = new DHParameterSpec(P, G);\n        keyGen.initialize(dhSpec);\n        KeyPair keyPair = keyGen.generateKeyPair();\n\n        // save the keys in the file system\n\tFileOutputStream pubOut = context.openFileOutput(PUBLIC_KEY_FILENAME, Context.MODE_PRIVATE);\n\tFileOutputStream privOut = context.openFileOutput(PRIVATE_KEY_FILENAME, Context.MODE_PRIVATE);\n\t\n\tpubOut.write(keyPair.getPublic().getEncoded());\n\tprivOut.write(encryptPrivateKey(keyPair.getPrivate()));\n\t\n\tpubOut.flush();\n\tprivOut.flush();\n        \n\tpubOut.close();\n        privOut.close();\n        \n    return keyPair;\n    }", "path": "src\\org\\parandroid\\encryption\\MessageEncryptionFactory.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * Check if the current device has a keypair\n * \n * @param context\n * @return boolean\n */\n", "func_signal": "public static boolean hasKeypair(Context context)", "code": "{\n\t\ttry{\n\t\t\tcontext.openFileInput(PUBLIC_KEY_FILENAME);\n\t\t\tcontext.openFileInput(PRIVATE_KEY_FILENAME);\n\t\t}catch(Exception e){\n\t\t\tLog.e(TAG,e.getMessage());\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}", "path": "src\\org\\parandroid\\encryption\\MessageEncryptionFactory.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * Get a stored public key in x509 format\n * @see http://en.wikipedia.org/wiki/X.509\n * \n * @param context\n * @param keyFilename\n * @return public key\n * @throws IOException\n * @throws NoSuchAlgorithmException\n * @throws InvalidKeySpecException\n */\n", "func_signal": "public static PublicKey getPublicKey(Context context, String number) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException", "code": "{\n\tbyte[] keyBytes = null;\n\t\n\tSQLiteDatabase keyRing = openKeyring(context);\n\tCursor c = keyRing.query(PUBLIC_KEY_TABLE, null, \"accepted=1\", null, null, null, null);\n\t\n\twhile(c.moveToNext()){\n\t\tString n = c.getString(c.getColumnIndex(\"number\"));\n\t\tif(PhoneNumberUtils.compare(number, n)){\n\t\t\tString publicKey = c.getString(c.getColumnIndex(\"publicKey\"));\n\t\t\tkeyBytes = Base64.decode(publicKey);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tc.close();\n\tkeyRing.close();\n\t\n\tif(keyBytes == null) return null;\n\t\n    X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);\n    KeyFactory keyFact = KeyFactory.getInstance(KEY_EXCHANGE_PROTOCOL);\n    PublicKey publicKey = keyFact.generatePublic(x509KeySpec);\n\t\n\treturn publicKey;\n}", "path": "src\\org\\parandroid\\encryption\\MessageEncryptionFactory.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * Builds the hashtable we use for mapping the string version\n * of a smiley (e.g. \":-)\") to a resource ID for the icon version.\n */\n", "func_signal": "private HashMap<String, Integer> buildSmileyToRes()", "code": "{\n    if (DEFAULT_SMILEY_RES_IDS.length != mSmileyTexts.length) {\n        // Throw an exception if someone updated DEFAULT_SMILEY_RES_IDS\n        // and failed to update arrays.xml\n        throw new IllegalStateException(\"Smiley resource ID/text mismatch\");\n    }\n\n    HashMap<String, Integer> smileyToRes =\n                        new HashMap<String, Integer>(mSmileyTexts.length);\n    for (int i = 0; i < mSmileyTexts.length; i++) {\n        smileyToRes.put(mSmileyTexts[i], DEFAULT_SMILEY_RES_IDS[i]);\n    }\n    \n    return smileyToRes;\n}", "path": "src\\org\\parandroid\\sms\\util\\SmileyParser.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * Compute a shared secret for the ENCRYPTION_ALGORITHM. This should always be computed, and may never be stored.\n * \n * @param privateKey\n * @param publicKey\n * @return secretKey\n * \n * @throws NoSuchAlgorithmException\n * @throws GeneralSecurityException\n */\n", "func_signal": "public static SecretKey generateSecretKey(PrivateKey privateKey, PublicKey publicKey) throws NoSuchAlgorithmException, GeneralSecurityException", "code": "{\n    if(privateKey == null)\n    \tthrow new GeneralSecurityException(\"Missing private key\");\n    \n    if(publicKey == null)\n    \tthrow new GeneralSecurityException(\"Missing public key\");\n\t\n\tKeyAgreement ka = KeyAgreement.getInstance(KEY_EXCHANGE_PROTOCOL);\n    ka.init(privateKey);\n    ka.doPhase(publicKey, true);\n            \n    SecretKey secretKey = ka.generateSecret(ENCRYPTION_ALGORITHM);        \n    \n    return secretKey; \n}", "path": "src\\org\\parandroid\\encryption\\MessageEncryptionFactory.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * Get a list of the currently stored public keys, excluding your own. Hashmap with number and description\n * \n * @param context\n * @return Public key list\n */\n", "func_signal": "public static HashMap<Integer, String> getPublicKeyList(Context context, boolean accepted)", "code": "{\n\tHashMap<Integer, String> publicKeys = new HashMap<Integer, String>();\n\t\n\tSQLiteDatabase keyRing = openKeyring(context);\n\tCursor c = keyRing.query(PUBLIC_KEY_TABLE, null, \"accepted=\" + (accepted ? \"1\" : \"0\"), null, null, null, \"_ID DESC\");\n\t\n\twhile(c.moveToNext()){\n\t\tint id = c.getInt(c.getColumnIndex(\"_ID\"));\n\t\tString number = c.getString(c.getColumnIndex(\"number\"));\n\t\t\n\t\tpublicKeys.put(id, number);\n\t}\n\t\n\tc.close();\n\tkeyRing.close();\n\t\n\treturn publicKeys;\n}", "path": "src\\org\\parandroid\\encryption\\MessageEncryptionFactory.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * Adds ImageSpans to a CharSequence that replace textual emoticons such\n * as :-) with a graphical version.\n * \n * @param text A CharSequence possibly containing emoticons\n * @return A CharSequence annotated with ImageSpans covering any\n *         recognized emoticons.\n */\n", "func_signal": "public CharSequence addSmileySpans(CharSequence text)", "code": "{\n    SpannableStringBuilder builder = new SpannableStringBuilder(text);\n\n    Matcher matcher = mPattern.matcher(text);\n    while (matcher.find()) {\n        int resId = mSmileyToRes.get(matcher.group());\n        builder.setSpan(new ImageSpan(mContext, resId),\n                        matcher.start(), matcher.end(),\n                        Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n    }\n\n    return builder;\n}", "path": "src\\org\\parandroid\\sms\\util\\SmileyParser.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**\n * Parse SMIL message and retrieve SMILDocument.\n *\n * @return A SMILDocument or null if parsing failed.\n */\n", "func_signal": "private static SMILDocument getSmilDocument(PduPart smilPart)", "code": "{\n    try {\n        byte[] data = smilPart.getData();\n        if (data != null) {\n            if (LOCAL_LOGV) {\n                Log.v(TAG, \"Parsing SMIL document.\");\n                Log.v(TAG, new String(data));\n            }\n\n            ByteArrayInputStream bais = new ByteArrayInputStream(data);\n            SMILDocument document = new SmilXmlParser().parse(bais);\n            return validate(document);\n        }\n    } catch (IOException e) {\n        Log.e(TAG, \"Failed to parse SMIL document.\", e);\n    } catch (SAXException e) {\n        Log.e(TAG, \"Failed to parse SMIL document.\", e);\n    } catch (MmsException e) {\n        Log.e(TAG, \"Failed to parse SMIL document.\", e);\n    }\n    return null;\n}", "path": "src\\org\\parandroid\\sms\\model\\SmilHelper.java", "repo_name": "erikwt/ParandroidMessaging", "stars": 27, "license": "other", "language": "java", "size": 7319}
{"docstring": "/**********************************************************************************\n * \n * Create an IUpdateHandler for the main game loop. This is where all game\n * logic is written\n * \n **********************************************************************************/\n", "func_signal": "public void createGameUpdateHandler()", "code": "{\n\n\tthis.mScene.registerUpdateHandler(new IUpdateHandler() {\n\n\t\tpublic void onUpdate(float pSecondsElapsed) {\n\n\t\t\t// ===========================THE GAME\n\t\t\t// LOOP===========================//\n\n\t\t\tmakeBulletsDefyGravity();\n\n\t\t\tdoAICalculations(player_self_body);\n\n\t\t\tmRemainingEnemiesChangeableText.setText(remainingEnemies + \" Enemies Left\");\n\n\t\t\t// desEnemy is true when collision is detected between bullet\n\t\t\t// and enemy\n\t\t\tif (desEnemy) {\n\n\t\t\t\tif (fix1_name.contains(\"enemy\"))\n\t\t\t\t\tdestroyGameObject(fix1_name);\n\n\t\t\t\tif (fix2_name.contains(\"enemy\"))\n\t\t\t\t\tdestroyGameObject(fix2_name);\n\n\t\t\t\tdesEnemy = false;\n\t\t\t}\n\n\t\t\t// desBull is true when collision is detected between bullet and\n\t\t\t// wall or enemy\n\t\t\tif (desBull) {\n\n\t\t\t\tif (fix1_name.contains(\"bullet\"))\n\t\t\t\t\tdestroyGameObject(fix1_name);\n\n\t\t\t\tif (fix2_name.contains(\"bullet\"))\n\t\t\t\t\tdestroyGameObject(fix2_name);\n\n\t\t\t\tdesBull = false;\n\t\t\t}\n\n\t\t\t// shoot rapidly with a machine gun effect if machineGun is true\n\t\t\tif (machineGun && test % 4 == 0) {\n\t\t\t\ttest = 1;\n\t\t\t\tspawnBullet(player_self_sprite, playerDir, \"bullet_self\");\n\t\t\t} else if (machineGun && test % 4 != 0)\n\t\t\t\ttest++;\n\n\t\t\tupdateScore();\n\n\t\t\tupdateHealthBar();\n\n\t\t\t// show game over screen if player dies\n\t\t\tif (Player_Max_Health <= 0) {\n\t\t\t\tendGame(SHOW_GAME_OVER_ACTIVITY);\n\t\t\t}\n\n\t\t\t// show level complete screen if all enemies are killed\n\t\t\tif (remainingEnemies == 0) {\n\t\t\t\tendGame(SHOW_LEVEL_COMPLETE_ACTIVITY);\n\t\t\t}\n\n\t\t\tif (!mScrollDetector.isEnabled()) {\n\t\t\t\t// mCamera.setCenter(player_self_sprite.getX(),\n\t\t\t\t// player_self_sprite.getY());\n\t\t\t}\n\n\t\t}\n\n\t\t@Override\n\t\tpublic void reset() {\n\n\t\t}\n\n\t});\n\n}", "path": "src\\botwars\\main\\BotWars.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n *\n * Override onLoadScene method of AndEngine\n * Initialize everything here\n * \n * Create a Scene and PhysicsWorld\n * Attach all sprites, buttons and map to scene\n * Start music\n * Create and register game loop UpdateHandler \n * Create and register ContactListener\n * Create and register scrollDetector and pinchZoomDetector\n * Put all sprites into mEntityList  \n * Set Camera bounds\n * Start CountDownTimer\n * \n **********************************************************************************/\n", "func_signal": "@Override\npublic Scene onLoadScene()", "code": "{\n\n\tthis.mEngine.registerUpdateHandler(new FPSLogger());\n\t// createEnemyWalkTimeHandler();\n\tmScene = new Scene();\n\n\tmScene.setBackground(this.mRepeatingSpriteBackground);\n\n\tif (enableMusic) {\n\t\tif (mMusic.isPlaying()) {\n\t\t\tmMusic.pause();\n\t\t} else {\n\t\t\tmMusic.setVolume(mVolume);\n\t\t\tmMusic.play();\n\t\t}\n\t}\n\tfinal TMXLayer mTMXLayer = this.mTMXTiledMap.getTMXLayers().get(0);\n\tmScene.attachChild(mTMXLayer);\n\n\tthis.mPhysicsWorld = new PhysicsWorld(new Vector2(0, SensorManager.GRAVITY_EARTH), false);\n\tmScene.registerUpdateHandler(this.mPhysicsWorld);\n\n\tcreateCollisionListener();\n\n\tcreateGameUpdateHandler();\n\n\tinitControls();\n\tmScene.setChildScene(this.mDigitalOnScreenControl);\n\n\tloadObjectsFromMap(mTMXTiledMap);\n\n\tmEntityList = new ArrayList<IEntity>(mScene.getChildCount());\n\n\tfor (int i = 0; i < mScene.getChildCount(); i++)\n\t\tmEntityList.add(mScene.getChild(i));\n\n\t// initCharacters();\n\tspawnPlayer(\"player_self\", mPlayerTextureRegion);\n\n\tthis.mScrollDetector = new SurfaceScrollDetector(this);\n\tthis.mScrollDetector.setEnabled(false);\n\n\tcreatePinchZoomDetector();\n\n\tplayer_self_sprite = (AnimatedSprite) findShape(\"player_self\");\n\tplayer_self_body = mPhysicsWorld.getPhysicsConnectorManager().findBodyByShape(player_self_sprite);\n\n\tenemyLandedArr = new boolean[enemyCount];\n\n\tfor (int i = 0; i < enemyCount; i++) {\n\t\tenemyLandedArr[i] = true;\n\t}\n\tremainingEnemies = enemyCount;\n\tmCamera.setBoundsEnabled(true);\n\tmCamera.setBounds(0, mTMXTiledMap.getTileColumns() * mTMXTiledMap.getTileWidth(), 0, mTMXTiledMap.getTileRows() * mTMXTiledMap.getTileHeight());\n\tmCamera.setChaseEntity(player_self_sprite);\n\tif (mapID == 0)\n\t\ttotalTime = 120000;\n\tif (mapID == 1)\n\t\ttotalTime = 60000;\n\tif (mapID == 2)\n\t\ttotalTime = 240000;\n\n\tstartCountDownTimer();\n\treturn mScene;\n}", "path": "src\\botwars\\main\\BotWars.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Create and start a CountDownTimer\n * \n **********************************************************************************/\n", "func_signal": "private void startCountDownTimer()", "code": "{\n\tmCountDownTimer = new CountDownTimer(totalTime, 1000) {\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tDebug.d(\"---------\" + timer);\n\t\t\t// timer=(int)millisUntilFinished / 1000;\n\t\t\tmTimerChangeableText.setText(\"Time: \" + millisUntilFinished / 1000);\n\n\t\t\tif (millisUntilFinished / 1000 < 10)\n\t\t\t\tmTimerChangeableText.setColor(255, 0, 0);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tendGame(SHOW_GAME_OVER_ACTIVITY);\n\t\t}\n\t}.start();\n\n}", "path": "src\\botwars\\main\\BotWars.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Override endGame method from superclass BotWars \n * Add mechanism to close datagram socket\n * \n **********************************************************************************/\n", "func_signal": "@Override\npublic void endGame(int action)", "code": "{\n\t\n\tsuper.endGame(action);\n\tmDatagramSocket.close();\n}", "path": "src\\botwars\\main\\MultiPlayer_UDP.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Method to set RepeatingSpriteBackground\n * \n **********************************************************************************/\n", "func_signal": "public static void setScene(int sceneID)", "code": "{\n\tif (sceneID == 0) {\n\t\tmapBG = \"tmx/scn_sunny.png\";\n\t}\n\tif (sceneID == 1) {\n\t\tmapBG = \"tmx/scn_dark.png\";\n\t}\n\tif (sceneID == 2) {\n\t\tmapBG = \"tmx/scn_sunset.png\";\n\t}\n\tif (sceneID == 3) {\n\t\tmapBG = \"tmx/scn_underground.png\";\n\t}\n\tif (sceneID == 4) {\n\t\tmapBG = \"tmx/scn_sunset.png\";\n\t}\n}", "path": "src\\botwars\\main\\BotWars.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "// ===========================================================\n// Methods\n// ===========================================================\n", "func_signal": "private void loadObjectsFromMap(TMXTiledMap map)", "code": "{\n\n\t// Loop through all the object groups in tmx map\n\n\tfor (final TMXObjectGroup group : map.getTMXObjectGroups()) {\n\n\t\tif (group.getName().equals(\"wall\")) {\n\t\t\tmakeRectanglesFromObjects(group, \"wall\");\n\t\t}\n\n\t\tif (group.getName().equals(\"enemies\")) {\n\t\t\tmakeEnemiesFromObjects(group);\n\t\t}\n\n\t}\n\n}", "path": "src\\botwars\\main\\BotWars.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Create a datagram socket on port 5000\n * \n **********************************************************************************/\n", "func_signal": "private void initUDP()", "code": "{\n\n\ttry {\n\t\tmDatagramSocket = new DatagramSocket(5000);\n\t} catch (SocketException e) {\n\t\tToast.makeText(MultiPlayer_UDP.this, \"Error Creating Socket\", 100).show();\n\t\tDebug.d(\"Error Creating Socket\");\n\t}\n}", "path": "src\\botwars\\main\\MultiPlayer_UDP.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Add optionsMenu that shows up when menu key is pressed\\\n * \n **********************************************************************************/\n", "func_signal": "@Override\npublic boolean onCreateOptionsMenu(Menu menu)", "code": "{\n\n\tsuper.onCreateOptionsMenu(menu);\n\n\tmenu.add(0, MENU_RETURN, 0, R.string.menu_return);\n\tmenu.add(0, MENU_EXIT, 0, R.string.menu_exit);\n\n\tToast.makeText(this, \"Options\", 100).show();\n\treturn true;\n\n}", "path": "src\\botwars\\main\\BotWars.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Define behaviour of hardware buttons\n * \n **********************************************************************************/\n", "func_signal": "@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event)", "code": "{\n\n\t// if back button is pressed, end game and show start menu\n\tif (keyCode == KeyEvent.KEYCODE_BACK ){//&&  event.getRepeatCount() == 0) {\n\t\t\n\t\tendGame(SHOW_START_MENU_ACTIVITY);\n\n\t\treturn true;\n\t}\n\n\treturn super.onKeyDown(keyCode, event);\n}\n\n/**********************************************************************************\n * \n * Check if multitouch is supported and create pinch zoom detector\n * \n **********************************************************************************/\n\npublic void createPinchZoomDetector() {\n\tif (MultiTouch.isSupportedByAndroidVersion() && MultiTouch.isSupportedDistinct(this) && MultiTouch.isSupported(this)) {\n\t\ttry {\n\t\t\tthis.mPinchZoomDetector = new PinchZoomDetector(this);\n\t\t\tDebug.d(\"pincher\");\n\t\t} catch (final MultiTouchException e) {\n\t\t\tthis.mPinchZoomDetector = null;\n\t\t}\n\t} else {\n\t\tthis.mPinchZoomDetector = null;\n\t}\n\tthis.mScene.setOnSceneTouchListener(this);\n\tthis.mScene.setTouchAreaBindingEnabled(true);\n\n}\n\n/**********************************************************************************\n * \n * Define actions to perform when pinch is started\n * \n **********************************************************************************/\n\n@Override\npublic void onPinchZoomStarted(final PinchZoomDetector pPinchZoomDetector, final TouchEvent pTouchEvent) {\n\tthis.mPinchZoomStartedCameraZoomFactor = this.mCamera.getZoomFactor();\n\tDebug.d(\"zoomstart\");\n}\n\n/**********************************************************************************\n * \n * Define actions to perform during pinch zooming (set camera zoom factor\n * according to pinch)\n * \n **********************************************************************************/\n\n@Override\npublic void onPinchZoom(final PinchZoomDetector pPinchZoomDetector, final TouchEvent pTouchEvent, final float pZoomFactor) {\n\t// if(!isButtonAreaTouched&&pTouchEvent.getX()<CAMERA_WIDTH-200-110&&pTouchEvent.getX()>CAMERA_WIDTH+200&&pTouchEvent.getY()<CAMERA_HEIGHT-100-185&&pTouchEvent.getY()>CAMERA_HEIGHT+200)\n\tif (!isButtonAreaTouched && pZoomFactor > 0.4f && mPinchZoomStartedCameraZoomFactor > 0.4f) {\n\n\t\tthis.mCamera.setZoomFactor(this.mPinchZoomStartedCameraZoomFactor * pZoomFactor);\n\t\tDebug.d(\"zoom factor\" + pZoomFactor);\n\t}\n}\n\n/**********************************************************************************\n * \n * Define actions to be performed after pinch is stopped (set camera zoom\n * factor back to original zoom factor before pinch was started)\n * \n **********************************************************************************/\n\n@Override\npublic void onPinchZoomFinished(final PinchZoomDetector pPinchZoomDetector, final TouchEvent pTouchEvent, final float pZoomFactor) {\n\t\n\tif (!isButtonAreaTouched && pZoomFactor > 0.4f && mPinchZoomStartedCameraZoomFactor > 0.4f) {\n\t\tthis.mCamera.setZoomFactor(this.mPinchZoomStartedCameraZoomFactor * pZoomFactor);\n\t}\n}\n\n/**********************************************************************************\n * \n * Enable swipe scrolling when pinch zoom is not happening ///////////NOT\n * USED///////\n * \n **********************************************************************************/\n\n@Override\npublic boolean onSceneTouchEvent(Scene pScene, TouchEvent pSceneTouchEvent) {\n\tif (this.mPinchZoomDetector != null) {\n\t\tthis.mPinchZoomDetector.onTouchEvent(pSceneTouchEvent);\n\n\t\tif (this.mPinchZoomDetector.isZooming()) {\n\t\t\tthis.mScrollDetector.setEnabled(false);\n\t\t} else {\n\t\t\tif (pSceneTouchEvent.isActionDown()) {\n\t\t\t\tthis.mScrollDetector.setEnabled(true);\n\n\t\t\t}\n\n\t\t\tif (pSceneTouchEvent.isActionUp()) {\n\t\t\t\tthis.mScrollDetector.setEnabled(false);\n\n\t\t\t}\n\n\t\t\tthis.mScrollDetector.onTouchEvent(pSceneTouchEvent);\n\t\t}\n\t} else {\n\t\tthis.mScrollDetector.onTouchEvent(pSceneTouchEvent);\n\t}\n\treturn true;\n}\n\n/**********************************************************************************\n * \n * Define behaviour of swipe scroll\n * \n **********************************************************************************/\n\n@Override\npublic void onScroll(final ScrollDetector pScollDetector, final TouchEvent pTouchEvent, final float pDistanceX, final float pDistanceY) {\n\tfinal float zoomFactor = this.mCamera.getZoomFactor();\n\tif (!isButtonAreaTouched) {\n\t\tthis.mCamera.offsetCenter(-pDistanceX / zoomFactor * 10, -pDistanceY / zoomFactor * 10);\n\t}\n}\n\n/**********************************************************************************\n * \n * Apply jump impulse on given body\n * \n **********************************************************************************/\n\npublic void jumpPlayer(Body _playerBody) {\n\t// playerDir = PLAYER_DIRECTION_RIGHT;\n\n\t_playerBody.applyLinearImpulse(0, -mImpulseY, _playerBody.getPosition().x, // /////JUMP\n\t\t\t_playerBody.getPosition().y);\n\n}\n\n/*\n * public float getPlayerLocX() { return mPlayerBody.getPosition().x;\n * \n * }\n * \n * public float getPlayerLocY() { return mPlayerBody.getPosition().y;\n * \n * }\n * \n * public void setPlayerLoc(float x, float y) { mPlayerSprite.setPosition(x,\n * y); }\n */\n\n/*\n * public void movePlayerRight() {\n * \n * mPlayerSprite.getTextureRegion().setFlippedHorizontal(false);\n * mPlayerBody.setLinearVelocity(mLinearVelocityX,\n * mPlayerBody.getLinearVelocity().y);\n * \n * mPlayerSprite.animate(new long[] { 50, 50, 50, 50, 50, 50, 50 }, 0, 6,\n * false);\n * \n * if (enableSounds) mWalkSound.play(); playerDir = PLAYER_DIRECTION_RIGHT;\n * isPlayerMoving = true; }\n */\n\n/**********************************************************************************\n * \n * Move player with given sprite and body in right direction and play\n * walking sound\n * \n **********************************************************************************/\n\npublic void movePlayerRight(AnimatedSprite _playerSprite, Body _playerBody) {\n\n\t// Body\n\t// pPlayerBody=mPhysicsWorld.getPhysicsConnectorManager().findBodyByShape(findShape(playerName));\n\t// if(pPlayerBody==null)\n\t// Debug.d(\"NULLPOOPER\");\n\t// pPlayerBody.setLinearVelocity(mLinearVelocityX,\n\t// pPlayerBody.getLinearVelocity().y);\n\t// final AnimatedSprite\n\t// pPlayerSprite=(AnimatedSprite)findShape(playerName);\n\t// final Body\n\t// pPlayerBody=mPhysicsWorld.getPhysicsConnectorManager().findBodyByShape(player_self);\n\t// if(playerName.equalsIgnoreCase(\"player_self\")){\n\t_playerSprite.getTextureRegion().setFlippedHorizontal(false);\n\t_playerBody.setLinearVelocity(mLinearVelocityX, _playerBody.getLinearVelocity().y);\n\t_playerSprite.animate(new long[] { 50, 50, 50, 50, 50, 50, 50 }, 0, 6, false);\n\n\tif (enableSounds)\n\t\tmWalkSound.play();\n\tif (_playerSprite.getUserData().toString().contains(\"player_self\")) {\n\t\tplayerDir = PLAYER_DIRECTION_RIGHT;\n\t\tisPlayerMoving = true;\n\t}\n\t// }\n\n}\n\n/**********************************************************************************\n * \n * Move player with given sprite and body in left direction and play walking\n * sound\n * \n **********************************************************************************/\n\npublic void movePlayerLeft(AnimatedSprite _playerSprite, Body _playerBody) {\n\n\t// final AnimatedSprite\n\t// pPlayerSprite=(AnimatedSprite)findShape(playerName);\n\t// final Body\n\t// pPlayerBody=mPhysicsWorld.getPhysicsConnectorManager().findBodyByShape(pPlayerSprite);\n\t// if(playerName.equalsIgnoreCase(\"player_self\")){\n\t_playerSprite.getTextureRegion().setFlippedHorizontal(true);\n\t_playerBody.setLinearVelocity(-mLinearVelocityX, _playerBody.getLinearVelocity().y);\n\n\t_playerSprite.animate(new long[] { 50, 50, 50, 50, 50, 50, 50 }, 0, 6, false);\n\n\tif (enableSounds)\n\t\tmWalkSound.play();\n\tif (_playerSprite.getUserData().toString().contains(\"player_self\")) {\n\t\tplayerDir = PLAYER_DIRECTION_LEFT;\n\t\tisPlayerMoving = true;\n\t}\n\t// }\n}\n\n/*\n * public void movePlayerLeft() {\n * mPlayerSprite.getTextureRegion().setFlippedHorizontal(true);\n * mPlayerBody.setLinearVelocity(-mLinearVelocityX,\n * mPlayerBody.getLinearVelocity().y); mPlayerSprite.animate(new long[] {\n * 50, 50, 50, 50, 50, 50, 50 }, 0, 6, false);\n * \n * if (enableSounds) mWalkSound.play(); playerDir = PLAYER_DIRECTION_LEFT;\n * isPlayerMoving = true; }\n */\n\n/**********************************************************************************\n * \n * Stop player with given sprite and body\n * \n **********************************************************************************/\n\npublic void stopPlayer(AnimatedSprite _playerSprite, Body _playerBody) {\n\t// if (isPlayerMoving) {\n\t_playerBody.setLinearVelocity(0f, _playerBody.getLinearVelocity().y);\n\t// isPlayerMoving = false;}\n}\n\n/**********************************************************************************\n * \n * Find distance between two bodies, player and enemy\n * \n **********************************************************************************/\n\npublic float getDistance(Body _player, Body _enemy) {\n\tfloat dist_x = (float) Math.pow(_player.getPosition().x - _enemy.getPosition().x, 2);\n\n\tfloat dist_y = (float) Math.pow(_player.getPosition().y - _enemy.getPosition().y, 2);\n\n\t// Debug.d(dist_x+\" \"+dist_y);\n\treturn ((float) Math.sqrt(dist_x + dist_y));\n}\n\n/**********************************************************************************\n * \n * Apply force on bullets to counter gravity and float, allowing to move\n * horizontally\n * \n **********************************************************************************/\n\nprivate void makeBulletsDefyGravity() {\n\tfor (IEntity pEntity : mEntityList) {\n\t\tif (pEntity.getUserData() != null) {\n\t\t\tif (pEntity.getUserData().toString().contains(\"bullet\")) {\n\n\t\t\t\tfinal Body pBulletBody = mPhysicsWorld.getPhysicsConnectorManager().findBodyByShape((IShape) pEntity);\n\t\t\t\tif (pBulletBody != null)\n\t\t\t\t\tpBulletBody.applyForce(new Vector2(0, -SensorManager.GRAVITY_EARTH), pBulletBody.getWorldCenter());\n\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**********************************************************************************\n * \n * Update the score display\n * \n **********************************************************************************/\n\npublic void updateScore() {\n\tif (enemyShot) {\n\t\tmScore += 10;\n\t\tmScoreChangeableText.setText(\"Score: \" + mScore);\n\t\tenemyShot = false;\n\t}\n}\n\n/**********************************************************************************\n * \n * Perform AI calculations on given body\n * \n **********************************************************************************/\n\npublic void doAICalculations(Body _playerBody) {\n\tfor (int i = 0; i < enemyCount; i++) {\n\t\tIShape temp_enemy_shape = findShape(\"enemy\" + i);\n\t\tBody temp_enemy_body = mPhysicsWorld.getPhysicsConnectorManager().findBodyByShape(temp_enemy_shape);\n\n\t\tif (temp_enemy_body != null) {\n\n\t\t\tif (getDistance(_playerBody, temp_enemy_body) < 10.0f && enemyLandedArr[i]) {\n\n\t\t\t\tdoAIActions(temp_enemy_body, playerDir, 0);\n\n\t\t\t\tenemyLandedArr[i] = false;\n\t\t\t\t// testboo=false;\n\t\t\t\t// Debug.d(\"enemylanded at \" + i + \" true\");\n\n\t\t\t}\n\n\t\t\telse if (enemyLandedArr[i]) {\n\t\t\t\ttemp_enemy_body.setLinearVelocity(0, 0);\n\t\t\t}\n\n\t\t}\n\n\t}\n}\n\n/**********************************************************************************\n * \n * Perform AI actions on given body based on given direction of player and\n * action to perform\n * \n **********************************************************************************/\n\npublic void doAIActions(Body temp_enemy_body, int _playerDir, int action) {\n\ttemp_enemy_body.applyLinearImpulse(0, -5.0f, temp_enemy_body.getPosition().x, temp_enemy_body.getPosition().y);\n\tif (_playerDir == PLAYER_DIRECTION_RIGHT)\n\t\ttemp_enemy_body.setLinearVelocity(-mLinearVelocityX, temp_enemy_body.getLinearVelocity().y);\n\n\tif (_playerDir == PLAYER_DIRECTION_LEFT)\n\t\ttemp_enemy_body.setLinearVelocity(mLinearVelocityX, temp_enemy_body.getLinearVelocity().y);\n\n}\n\n/**********************************************************************************\n * \n * Update health bar\n * \n **********************************************************************************/\n\nprivate void updateHealthBar() {\n\t// reduce health by value of Player_Health_Reduce, reduce health bar by\n\t// 1/5 portions every 20 health points and make player bounce off enemy\n\n\tif (reduceHealth && mHealthSprite != null && player_self_body != null) {\n\n\t\tplayer_self_body.applyLinearImpulse((float) (refrainImpulse * 1.5), -refrainImpulse, player_self_body.getPosition().x,\n\t\t\t\tplayer_self_body.getPosition().y);\n\n\t\tPlayer_Max_Health -= Player_Health_Reduce;\n\n\t\tswitch ((int) Player_Max_Health) {\n\t\tcase 100:\n\t\t\tbreak;\n\t\tcase 90:\n\t\t\tmHealthSprite.animate(new long[] { 50, 50 }, 0, 1, false);\n\t\t\tbreak;\n\t\tcase 80:\n\t\t\tmHealthSprite.animate(new long[] { 50, 50 }, 1, 2, false);\n\t\t\tbreak;\n\t\tcase 70:\n\t\t\tmHealthSprite.animate(new long[] { 50, 50 }, 2, 3, false);\n\t\t\tbreak;\n\t\tcase 60:\n\t\t\tmHealthSprite.animate(new long[] { 50, 50 }, 3, 4, false);\n\t\t\tbreak;\n\t\tcase 50:\n\t\t\tmHealthSprite.animate(new long[] { 50, 50 }, 4, 5, false);\n\t\t\tbreak;\n\t\tcase 40:\n\t\t\tmHealthSprite.animate(new long[] { 50, 50 }, 5, 6, false);\n\t\t\tbreak;\n\t\tcase 30:\n\t\t\tmHealthSprite.animate(new long[] { 50, 50 }, 6, 7, false);\n\t\t\tbreak;\n\t\tcase 20:\n\t\t\tmHealthSprite.animate(new long[] { 50, 50 }, 7, 8, false);\n\t\t\tbreak;\n\t\tcase 10:\n\t\t\tmHealthSprite.animate(new long[] { 50, 50 }, 8, 9, false);\n\t\t\tbreak;\n\t\tcase 0:\n\t\t\tmHealthSprite.animate(new long[] { 50, 50 }, 9, 10, false);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbreak;\n\n\t\t}\n\n\t\t// kill player if health becomes 0\n\n\t\treduceHealth = false;\n\t}\n}\n\n/**********************************************************************************\n * \n * Method to decrement remainingEnemies\n * \n **********************************************************************************/\npublic void reduceRemainingEnemies() {\n\tremainingEnemies--;\n}\n\n/**********************************************************************************\n * \n * Method to end game and start next activity\n * \n **********************************************************************************/\npublic void endGame(int action) {\n\tmCountDownTimer.cancel();\n\t// mPhysicsWorld.destroyBody(player_self_body);\n\t// mPhysicsWorld.unregisterPhysicsConnector(mPhysicsWorld.getPhysicsConnectorManager().findPhysicsConnectorByShape(player_self_sprite));\n\t// mScene.detachChild(player_self_sprite);\n\n\tif (action == SHOW_START_MENU_ACTIVITY) {\n\t\tIntent StartIntent = new Intent(BotWars.this, StartMenu.class);\n\t\tfinish();\n\t\tstartActivity(StartIntent);\n\t}\n\tif (action == SHOW_GAME_OVER_ACTIVITY) {\n\t\tIntent StartIntent = new Intent(BotWars.this, GameOver.class);\n\t\tfinish();\n\t\tstartActivity(StartIntent);\n\t}\n\tif (action == SHOW_LEVEL_COMPLETE_ACTIVITY) {\n\t\tIntent StartIntent = new Intent(BotWars.this, LevelComplete.class);\n\t\tfinish();\n\t\tstartActivity(StartIntent);\n\t}\n\n}\n}", "path": "src\\botwars\\main\\BotWars.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Defines what happens when particular item is selected from optionsMenu\n * \n **********************************************************************************/\n", "func_signal": "@Override\npublic boolean onOptionsItemSelected(MenuItem item)", "code": "{\n\n\tsuper.onOptionsItemSelected(item);\n\n\tswitch (item.getItemId()) {\n\n\tcase MENU_RETURN: {\n\t\tIntent StartIntent = new Intent(BotWars.this, StartMenu.class);\n\t\tstartActivity(StartIntent);\n\n\t\tfinish();\n\t\tToast.makeText(this, \"Main Menu\", 100).show();\n\t}\n\n\tcase MENU_EXIT: {\n\t\tToast.makeText(this, \"Exit\", 100).show();\n\t\tSystem.exit(0);\n\t}\n\n\t}\n\t/*\n\t * if (item.getItemId() == MENU_EXIT) {\n\t * \n\t * Toast.makeText(this, \"Exit\", 100).show(); System.exit(0);\n\t * \n\t * }\n\t * \n\t * else if (item.getItemId() == MENU_RETURN) {// return to main menu\n\t * \n\t * \n\t * Intent StartIntent = new Intent(BotWars.this, StartMenu.class);\n\t * startActivity(StartIntent);\n\t * \n\t * finish(); Toast.makeText(this, \"Main Menu\", 100).show();\n\t * \n\t * }\n\t */\n\n\treturn true;\n}", "path": "src\\botwars\\main\\BotWars.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Load the fonts to be used for displaying score and other info on screen\n * \n **********************************************************************************/\n", "func_signal": "private void loadScore()", "code": "{\n\t/* Load the font we are going to use. */\n\n\tthis.mScoreTextureAtlas = new BitmapTextureAtlas(512, 512, TextureOptions.BILINEAR_PREMULTIPLYALPHA);\n\tthis.mScoreFont = FontFactory.createFromAsset(this.mScoreTextureAtlas, this, \"UnrealTournament.ttf\", 32, true, Color.WHITE);\n\n\tthis.mEngine.getTextureManager().loadTexture(this.mScoreTextureAtlas);\n\tthis.mEngine.getFontManager().loadFont(this.mScoreFont);\n}", "path": "src\\botwars\\main\\BotWars.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Create all on-screen controls and handle their behaviour\n * \n **********************************************************************************/\n", "func_signal": "public void initControls()", "code": "{\n\n\tmHUD = new HUD();\n\n\t// Create the Score text showing how many points the player scoredand\n\t// attach to HUD\n\tmScoreChangeableText = new ChangeableText(5, 5, mScoreFont, \"Score: 0\", \"Score: XXXX\".length());\n\tmScoreChangeableText.setBlendFunction(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);\n\tmScoreChangeableText.setAlpha(0.9f);\n\tmHUD.attachChild(mScoreChangeableText);\n\n\t// Create the Timer text showing the countdown timer and attach to HUD\n\tmTimerChangeableText = new ChangeableText(CAMERA_WIDTH - 180, 50, mScoreFont, \"Time: x\", \"Time: xxx\".length());\n\tmTimerChangeableText.setBlendFunction(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);\n\tmTimerChangeableText.setColor(0, 255, 0);\n\tmTimerChangeableText.setAlpha(0.9f);\n\tmHUD.attachChild(mTimerChangeableText);\n\n\t// Create the RemainingEnemies text showing remaining no. of enemies and\n\t// attach to HUD\n\tmRemainingEnemiesChangeableText = new ChangeableText(250, CAMERA_HEIGHT - 40, mScoreFont, \"x Enemies Left\", \"xxxx Enemies Left\".length());\n\tmRemainingEnemiesChangeableText.setBlendFunction(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);\n\tmRemainingEnemiesChangeableText.setAlpha(0.9f);\n\tmRemainingEnemiesChangeableText.setScale(0.8f);\n\tmHUD.attachChild(mRemainingEnemiesChangeableText);\n\n\t// Create the jump button and attach to HUD\n\tSprite jump = new Sprite(CAMERA_WIDTH - 120, CAMERA_HEIGHT - 175, mJumpTextureRegion) {\n\n\t\t@Override\n\t\tpublic boolean onAreaTouched(TouchEvent pEvent, float pX, float pY) {\n\n\t\t\t// when jump button is pressed and player is landed, make player\n\t\t\t// jump and zoom out camera\n\t\t\tif (pEvent.isActionDown() && isLanded) {\n\n\t\t\t\tjumpPlayer(player_self_body);\n\n\t\t\t\tmCamera.setZoomFactor(0.80f);\n\n\t\t\t\tisLanded = false;\n\t\t\t\tisButtonAreaTouched = true;\n\t\t\t}\n\n\t\t\t// when jump button is released, zoom in\n\t\t\tif (pEvent.isActionUp()) {\n\n\t\t\t\tmCamera.setZoomFactor(1.0f);\n\n\t\t\t\tisButtonAreaTouched = false;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t};\n\tjump.setScale(0.70f);\n\tmHUD.registerTouchArea(jump);\n\tmHUD.attachChild(jump);\n\n\t// Create the shoot button and attach to HUD\n\tSprite shoot = new Sprite(CAMERA_WIDTH - 200, CAMERA_HEIGHT - 110, mShootTextureRegion) {\n\t\t@Override\n\t\tpublic boolean onAreaTouched(TouchEvent pEvent, float pX, float pY) {\n\n\t\t\t// when shoot button is pressed, spawn bullets in front of\n\t\t\t// player and zoom out\n\t\t\tif (pEvent.isActionDown()) {\n\t\t\t\t/*\n\t\t\t\t * if (bulletPresent) { destroyGameObject();\n\t\t\t\t * \n\t\t\t\t * }\n\t\t\t\t */\n\n\t\t\t\tif (!machineGun)\n\t\t\t\t\tspawnBullet(player_self_sprite, playerDir, \"bullet_self\");\n\n\t\t\t\t// machineGun = true;\n\n\t\t\t\tmCamera.setZoomFactor(0.80f);\n\t\t\t\tisButtonAreaTouched = true;\n\t\t\t}\n\n\t\t\t// when shoot button is released zoom out\n\t\t\tif (pEvent.isActionUp()) {\n\t\t\t\tmCamera.setZoomFactor(1.0f);\n\t\t\t\tmachineGun = false;\n\t\t\t\tisButtonAreaTouched = false;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t};\n\tshoot.setScale(0.60f);\n\tmHUD.registerTouchArea(shoot);\n\tmHUD.attachChild(shoot);\n\n\t// Create health sprite and attach to HUD\n\tmHealthSprite = new AnimatedSprite(CAMERA_WIDTH - 256, 10, mHealthTextureRegion);\n\tmHealthSprite.setScale(0.5f);\n\tmHUD.attachChild(mHealthSprite);\n\n\tmCamera.setHUD(mHUD);\n\n\t// Create DigitalOnScreenControl to move player\n\n\tthis.mDigitalOnScreenControl = new DigitalOnScreenControl(10, CAMERA_HEIGHT - this.mOnScreenControlBaseTextureRegion.getHeight() - 5, this.mCamera,\n\t\t\tthis.mOnScreenControlBaseTextureRegion, this.mOnScreenControlKnobTextureRegion, 0.1f, new IOnScreenControlListener() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onControlChange(final BaseOnScreenControl pBaseOnScreenControl, final float pValueX, final float pValueY) {\n\n\t\t\t\t\t// if controller is moved right and animation is not\n\t\t\t\t\t// running, move player to right and animate\n\t\t\t\t\tif (pValueX > 0 && !player_self_sprite.isAnimationRunning()) {\n\t\t\t\t\t\tmovePlayerRight(player_self_sprite, player_self_body);\n\t\t\t\t\t\tisButtonAreaTouched = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t// if controller is moved left and animation is not\n\t\t\t\t\t// running, move player to left and animate\n\t\t\t\t\telse if (pValueX < 0 && !player_self_sprite.isAnimationRunning()) {\n\t\t\t\t\t\tmovePlayerLeft(player_self_sprite, player_self_body);\n\t\t\t\t\t\tisButtonAreaTouched = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t// if controller is at centre, and player is moving,\n\t\t\t\t\t// stop player\n\t\t\t\t\telse if (pValueX == 0) {\n\t\t\t\t\t\tif (isPlayerMoving) {\n\t\t\t\t\t\t\tstopPlayer(player_self_sprite, player_self_body);\n\t\t\t\t\t\t\tisPlayerMoving = false;\n\t\t\t\t\t\t\tisButtonAreaTouched = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\tthis.mDigitalOnScreenControl.getControlBase().setBlendFunction(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);\n\tthis.mDigitalOnScreenControl.getControlBase().setAlpha(0.55f);\n\tthis.mDigitalOnScreenControl.getControlBase().setScaleCenter(0, 128);\n\tthis.mDigitalOnScreenControl.getControlBase().setScale(1.5f);\n\tthis.mDigitalOnScreenControl.getControlKnob().setAlpha(0.40f);\n\tthis.mDigitalOnScreenControl.getControlKnob().setScale(0.7f);\n\tthis.mDigitalOnScreenControl.refreshControlKnobPosition();\n\tthis.mDigitalOnScreenControl.setAllowDiagonal(false);\n\n}", "path": "src\\botwars\\main\\BotWars.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Spawn player with given UserData string and image\n * \n **********************************************************************************/\n", "func_signal": "public void spawnPlayer(String playerName, TiledTextureRegion playerTexture)", "code": "{\n\n\tplayerCount++;\n\tAnimatedSprite mPlayerSprite = new AnimatedSprite(mapOffset, 0, playerTexture);\n\n\tfinal FixtureDef mPlayerFixtureDef = PhysicsFactory.createFixtureDef(0, 0f, 0f, false, CATEGORYBIT_PLAYER, MASKBITS_PLAYER, (short) 0);\n\n\tBody mPlayerBody = PhysicsFactory.createBoxBody(this.mPhysicsWorld, mPlayerSprite, BodyType.DynamicBody, mPlayerFixtureDef);\n\tmPlayerSprite.setUserData(playerName);\n\tmPlayerBody.setUserData(playerName);\n\tthis.mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(mPlayerSprite, mPlayerBody, true, false));\n\n\tmScene.attachChild(mPlayerSprite);\n\tmEntityList.add(mPlayerSprite);\n}", "path": "src\\botwars\\main\\BotWars.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Create small rectangle objects in tmx map to define enemy spawn points\n * Use the locations of these rectangles to spawn enemies\n * \n **********************************************************************************/\n", "func_signal": "private void makeEnemiesFromObjects(TMXObjectGroup _group)", "code": "{\n\n\t// loop through all objects in the group\n\tfor (final TMXObject object : _group.getTMXObjects()) {\n\t\tif (object.getX() > mapOffset + 320) {\n\t\t\t// use object locations to spawn enemies\n\t\t\tspawnEnemy(object.getX(), object.getY());\n\t\t}\n\t}\n}", "path": "src\\botwars\\main\\BotWars.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Method to destroy objects in the game safely using UserData string Detach\n * sprite from scene-> destroy body associated with it-> unregister physics\n * connector\n * \n **********************************************************************************/\n", "func_signal": "public void destroyGameObject(String name)", "code": "{\n\n\t// update remainingEnemies if the object being destroyed is an enemy\n\tif (mPhysicsWorld.getPhysicsConnectorManager().findBodyByShape(findShape(name)) != null) {\n\t\tif (name.contains(\"enemy\")) {\n\t\t\treduceRemainingEnemies();\n\t\t\tDebug.d(\"remaining enemies   \" + remainingEnemies);\n\t\t}\n\t// remove sprite from screen and destroy body associated with it\n\t\tmScene.detachChild(findShape(name));\n\t\tmPhysicsWorld.destroyBody(mPhysicsWorld.getPhysicsConnectorManager().findBodyByShape(findShape(name)));\n\t\tmPhysicsWorld.unregisterPhysicsConnector(mPhysicsWorld.getPhysicsConnectorManager().findPhysicsConnectorByShape(findShape(name)));\n\t}\n}", "path": "src\\botwars\\main\\BotWars.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Override sendMessage method from superclass BotWars_MultiPlayer \n * Add mechanism to create a UDP packet containing given string and send it to given IP address on port 50000\n * \n **********************************************************************************/\n", "func_signal": "@Override\npublic void sendMessage(String str)", "code": "{\n\n\tDatagramPacket mDatagramPacket;\n\ttry {\n\n\t\tmDatagramPacket = new DatagramPacket(str.trim().getBytes(), 0, str.trim().getBytes().length, InetAddress.getByName(ipAdd), 5000);\n\n\t\tmDatagramSocket.send(mDatagramPacket);\n\t} catch (UnknownHostException e) {\n\t\tDebug.d(\"Unknown Host\");\n\t\t\n\t\tisRunning=false;\n\t\tmDatagramSocket.close();\n\t\t\n\t}\n\n\tcatch (IOException e) {\n\t\tDebug.d(\"IOException while sending packet\");\n\t\t\n\t\tisRunning=false;\n\t\tmDatagramSocket.close();\n\t\t\n\t}\n}", "path": "src\\botwars\\main\\MultiPlayer_UDP.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Load the images for all controls\n * \n **********************************************************************************/\n", "func_signal": "private void loadControls()", "code": "{\n\n\t// create atlas of 512*1024\n\tthis.mHUDTextureAtlas = new BitmapTextureAtlas(512, 1024, TextureOptions.BILINEAR_PREMULTIPLYALPHA);\n\n\t//load button and healthbar images onto atlas\n\tthis.mJumpTextureRegion = BitmapTextureAtlasTextureRegionFactory.createFromAsset(this.mHUDTextureAtlas, this, \"jump.png\", 0, 128);\n\n\tthis.mShootTextureRegion = BitmapTextureAtlasTextureRegionFactory.createFromAsset(mHUDTextureAtlas, this, \"shoot.png\", 128, 0);\n\n\tthis.mHealthTextureRegion = BitmapTextureAtlasTextureRegionFactory.createTiledFromAsset(this.mHUDTextureAtlas, this, \"health2.png\", 0, 256, 1, 11);\n\n\t// create atlas of 256*128\n\tthis.mOnScreenControlTexture = new BitmapTextureAtlas(256, 128, TextureOptions.BILINEAR_PREMULTIPLYALPHA);\n\n\t// load direction controller images onto atlas\n\tthis.mOnScreenControlBaseTextureRegion = BitmapTextureAtlasTextureRegionFactory.createFromAsset(this.mOnScreenControlTexture, this,\n\t\t\t\"onscreen_control_base.png\", 0, 0);\n\n\tthis.mOnScreenControlKnobTextureRegion = BitmapTextureAtlasTextureRegionFactory.createFromAsset(this.mOnScreenControlTexture, this,\n\t\t\t\"onscreen_control_knob.png\", 128, 0);\n\n\tthis.mEngine.getTextureManager().loadTextures(this.mBitmapTextureAtlas, this.mOnScreenControlTexture, this.mHUDTextureAtlas);\n\n}", "path": "src\\botwars\\main\\BotWars.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Override receiveMessage method from superclass BotWars_MultiPlayer \n * Add mechanism to receive UDP packets and obtain the String contained in them\n * \n **********************************************************************************/\n", "func_signal": "@Override\npublic String receiveMessage()", "code": "{\n\tbyte buf[] = new byte[128];\n\n\tDatagramPacket mDatagramPacket = new DatagramPacket(buf, 0, buf.length);\n\ttry {\n\t\tmDatagramSocket.receive(mDatagramPacket);\n\t} catch (IOException e) {\n\t\tDebug.d(\"IOException while receiving packet\");\n\t\t\n\t\tisRunning=false;\n\t\tmDatagramSocket.close();\n\t\t\n\t}\n\n\n\n\tString receivedMessage = new String(mDatagramPacket.getData());\n\n\treceivedMessage.trim();\n\treturn receivedMessage;\n}", "path": "src\\botwars\\main\\MultiPlayer_UDP.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Spawn enemy at give x,y location and set UserData string to\n * \"enemy\"+enemyCount\n * \n **********************************************************************************/\n", "func_signal": "public void spawnEnemy(int xLoc, int yLoc)", "code": "{\n\n\tAnimatedSprite mEnemySprite = new AnimatedSprite(xLoc, yLoc, mEnemyTextureRegion);\n\tmEnemySprite.setScale(0.7f);\n\n\tFixtureDef mEnemyFixtureDef = PhysicsFactory.createFixtureDef(0, 0f, 0f, false, CATEGORYBIT_ENEMY, MASKBITS_ENEMY, (short) 0);\n\n\tBody mEnemyBody = PhysicsFactory.createBoxBody(this.mPhysicsWorld, mEnemySprite, BodyType.DynamicBody, mEnemyFixtureDef);\n\tmEnemyBody.setUserData(\"enemy\" + enemyCount);\n\n\tthis.mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(mEnemySprite, mEnemyBody, true, true));\n\tmEnemySprite.setUserData(\"enemy\" + enemyCount);\n\tenemyCount++;\n\n\tmScene.attachChild(mEnemySprite);\n\tmEnemySprite.animate(100);\n\n\tmEnemySprite.setCullingEnabled(true);\n}", "path": "src\\botwars\\main\\BotWars.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**********************************************************************************\n * \n * Load TMX map and background image\n * \n **********************************************************************************/\n", "func_signal": "private void loadMap()", "code": "{\n\tthis.mRepeatingSpriteBackground = new RepeatingSpriteBackground(CAMERA_WIDTH, CAMERA_HEIGHT, this.mEngine.getTextureManager(),\n\t\t\tnew AssetBitmapTextureAtlasSource(this, mapBG), 1.0f);\n\n\ttry {\n\t\tfinal TMXLoader mTMXLoader = new TMXLoader(this, this.mEngine.getTextureManager(), TextureOptions.BILINEAR_PREMULTIPLYALPHA, null);\n\n\t\tthis.mTMXTiledMap = mTMXLoader.loadFromAsset(this, mapName);\n\t} catch (final TMXLoadException tmxle) {\n\t\tDebug.e(tmxle);\n\t}\n}", "path": "src\\botwars\\main\\BotWars.java", "repo_name": "dipenpradhan/bot-wars", "stars": 19, "license": "None", "language": "java", "size": 264752}
{"docstring": "/**\n * Returns a preferred prefix for the given namespace URI.\n *\n * This method is intended to be overrided by a derived class.\n *\n * @param namespaceUri\n *      The namespace URI for which the prefix needs to be found.\n *      Never be null. \"\" is used to denote the default namespace.\n * @param suggestion\n *      When the content tree has a suggestion for the prefix\n *      to the given namespaceUri, that suggestion is passed as a\n *      parameter. Typically this value comes from QName.getPrefix()\n *      to show the preference of the content tree. This parameter\n *      may be null, and this parameter may represent an already\n *      occupied prefix.\n * @param requirePrefix\n *      If this method is expected to return non-empty prefix.\n *      When this flag is true, it means that the given namespace URI\n *      cannot be set as the default namespace.\n *\n * @return\n *      null if there's no preferred prefix for the namespace URI.\n *      In this case, the system will generate a prefix for you.\n *\n *      Otherwise the system will try to use the returned prefix,\n *      but generally there's no guarantee if the prefix will be\n *      actually used or not.\n *\n *      return \"\" to map this namespace URI to the default namespace.\n *      Again, there's no guarantee that this preference will be\n *      honored.\n *\n *      If this method returns \"\" when requirePrefix=true, the return\n *      value will be ignored and the system will generate one.\n */\n", "func_signal": "public String getPreferredPrefix(String namespaceUri, String suggestion, boolean requirePrefix)", "code": "{\n    if (namespaceUri.equals(\"http://openprovenance.org/model/opmx\")) {\n        return \"opmx\";\n    }\n    if (namespaceUri.equals(\"http://openprovenance.org/model/opmPrinterConfig\")) {\n        return \"prn\";\n    }\n    if (namespaceUri.equals(\"http://www.w3.org/2001/XMLSchema\")) {\n        return \"xsd\";\n    }\n    if (namespaceUri.equals(\"http://www.w3.org/2001/XMLSchema-instance\")) {\n        return \"xsi\";\n    }\n    if ((defaultNamespace!=null) && (namespaceUri.equals(defaultNamespace))) {\n        return \"\";\n    }\n    return suggestion;\n}", "path": "opm\\src\\main\\java\\org\\openprovenance\\model\\NamespacePrefixMapper.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "/** Returns a graph with the same structure, in which the *\n effective membership of all nodes has been computed.  The\n function returns an entirely new graph, without modifying the\n original. */\n", "func_signal": "public OPMGraph effectiveMembership (OPMGraph g)", "code": "{\n    Accounts accs=g.getAccounts();\n\n    Processes ps=g.getProcesses();\n\n    Artifacts as=g.getArtifacts();\n\n    Agents ags=g.getAgents();\n\n    Dependencies lks=g.getDependencies();\n\n    OPMGraph g2=of.newOPMGraph(accs,\n                               ps,\n                               as,\n                               ags,\n                               lks);\n    return g2;\n}", "path": "opm\\src\\main\\java\\org\\openprovenance\\model\\OPMUtilities.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "//     }\n", "func_signal": "public void testTupelo() throws Exception", "code": "{\n        Tutorial t= new Tutorial();\n        t.example(null);\n    }", "path": "tupelo\\src\\test\\java\\org\\openprovenance\\rdf\\TupeloTest.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "/** Creates and serialises an OPM graph. */\n", "func_signal": "public void testAnnotation1() throws JAXBException", "code": "{\n    OPMFactory oFactory=new OPMFactory();\n\n    Account account1=oFactory.newAccount(\"green\");\n    Collection<Account> green=Collections.singleton(account1);\n    Collection<Account> orange=Collections.singleton(oFactory.newAccount(\"orange\"));\n\n    Process p1=oFactory.newProcess(\"p1\",\n                                   green,\n                                   \"add1ToAll\");\n    Process p2=oFactory.newProcess(\"p2\",\n                                   orange,\n                                   \"split\");\n    Process p3=oFactory.newProcess(\"p3\",\n                                   orange,\n                                   \"plus1\");\n    Process p4=oFactory.newProcess(\"p4\",\n                                   orange,\n                                   \"plus1\");\n    Process p5=oFactory.newProcess(\"p5\",\n                                   orange,\n                                   \"cons\");\n\n\n    List<Account> green_orange=new LinkedList();\n    green_orange.addAll(green);\n    green_orange.addAll(orange);\n\n    Artifact a1=oFactory.newArtifact(\"a1\",\n                                     green_orange,\n                                     \"(2,6)\");\n    Artifact a2=oFactory.newArtifact(\"a2\",\n                                     green_orange,\n                                     \"(3,7)\");\n    Artifact a3=oFactory.newArtifact(\"a3\",\n                                     orange,\n                                     \"2\");\n    Artifact a4=oFactory.newArtifact(\"a4\",\n                                     orange,\n                                     \"6\");\n    Artifact a5=oFactory.newArtifact(\"a5\",\n                                     orange,\n                                     \"3\");\n    Artifact a6=oFactory.newArtifact(\"a6\",\n                                     orange,\n                                     \"7\");\n\n    Used u1=oFactory.newUsed(p1,oFactory.newRole(\"in\"),a1,green);\n    Used u2=oFactory.newUsed(p2,oFactory.newRole(\"pair\"),a1,orange);\n    Used u3=oFactory.newUsed(p3,oFactory.newRole(\"in\"),a3,orange);\n    Used u4=oFactory.newUsed(p4,oFactory.newRole(\"in\"),a4,orange);\n    Used u5=oFactory.newUsed(p5,oFactory.newRole(\"left\"),a5,orange);\n    Used u6=oFactory.newUsed(\"u6\",p5,oFactory.newRole(\"right\"),a6,orange);\n\n\n\n\n    WasGeneratedBy wg1=oFactory.newWasGeneratedBy(a2,oFactory.newRole(\"out\"),p1,green);\n    WasGeneratedBy wg2=oFactory.newWasGeneratedBy(a3,oFactory.newRole(\"left\"),p2,orange);\n    WasGeneratedBy wg3=oFactory.newWasGeneratedBy(a4,oFactory.newRole(\"right\"),p2,orange);\n    WasGeneratedBy wg4=oFactory.newWasGeneratedBy(a5,oFactory.newRole(\"out\"),p3,orange);\n    WasGeneratedBy wg5=oFactory.newWasGeneratedBy(a6,oFactory.newRole(\"out\"),p4,orange);\n    Role r1=oFactory.newRole(\"r1\",\"pair\");\n    WasGeneratedBy wg6=oFactory.newWasGeneratedBy(\"wg6\",a2,r1,p5,orange);\n\n    Overlaps ov1=oFactory.newOverlaps(green_orange);\n\n\n    Annotation an1=oFactory.newAnnotation(\"an1\",a1,\"http://property.org/hasQuality\", \"good\", null);\n    Annotation an2=oFactory.newAnnotation(\"an2\",a1,\"http://property.org/hasQuality\", new Integer(1), null);\n    Annotation an3=oFactory.newAnnotation(\"an3\",a1,\"http://property.org/hasQuality\", new Float(1.01), null);\n    Annotation an4=oFactory.newAnnotation(\"an4\",a2,\"http://property.org/hasQuality\", new Float(1.01), green_orange);\n    Annotation an5=oFactory.newAnnotation(\"an5\",a3,\"http://property.org/hasQuality\", 1, green);\n\n\n    Annotation an6=oFactory.newAnnotation(\"an6\",p1,\"http://property.org/hasQuality\", 1, green);\n    Annotation an7=oFactory.newAnnotation(\"an7\",an6,\"http://property.org/hasQuality\", \"bad\", orange);\n\n    Annotation an8=oFactory.newAnnotation(\"an8\",wg6,\"http://property.org/hasQuality\", \"average\", orange);\n    Annotation an9=oFactory.newAnnotation(\"an9\",u6,\"http://property.org/hasQuality\", \"bad\", orange);\n\n    Annotation an10=oFactory.newAnnotation(\"an10\",r1,\"http://property.org/hasQuality\", \"bad\", orange);\n\n    oFactory.addAnnotation(a4,\n                           oFactory.newEmbeddedAnnotation(\"an11\",\"http://property.org/hasQuality\", \"bad\", orange));\n\n    EmbeddedAnnotation ann12=oFactory.newEmbeddedAnnotation(\"an12\",\"http://property.org/hasQuality\", \"average\", green);\n    ann12.getProperty().add(oFactory.newProperty(\"http://property.org/numericQuality\", 0.4));\n\n    oFactory.addAnnotation(p5,ann12);\n\n    oFactory.addAnnotation(p5,\n                           oFactory.newEmbeddedAnnotation(\"an13\",\"http://property.org/hasProperty\", \"beau\", green));\n\n    oFactory.addAnnotation(account1,\n                           oFactory.newEmbeddedAnnotation(\"an14\",\"http://property.org/hasAlternativeName\", \"vert\", null));\n\n\n    OPMGraph graph=oFactory.newOPMGraph(green_orange,\n                                        new Overlaps[] { ov1 },\n                                        new Process[] {p1,p2,p3,p4,p5},\n                                        new Artifact[] {a1,a2,a3,a4,a5,a6},\n                                        null,\n                                        new Object[] {u1,u2,u3,u4,u5,u6,\n                                                      wg1,wg2,wg3,wg4,wg5,wg6},\n                                        new Annotation[] {an1, an2, an3, an4, an5, an6, an7, an8, an9, an10} );\n\n\n    oFactory.addAnnotation(graph,\n                           oFactory.newProfile(\"http://profile.org/dummyProfile\"));\n    oFactory.addAnnotation(graph,\n                           oFactory.newPName(\"http://name.org/myName\"));\n\n\n\n    OPMSerialiser serial=OPMSerialiser.getThreadOPMSerialiser();\n    StringWriter sw=new StringWriter();\n    serial.serialiseOPMGraph(sw,graph,true);\n    serial.serialiseOPMGraph(new File(\"target/annotation-example1.xml\"),graph,true);\n    //        System.out.println(sw);\n\n    graph1=graph;\n\n    assertTrue( true );\n}", "path": "opm\\src\\test\\java\\org\\openprovenance\\model\\Annotation1Test.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "// returns the first non transparent color\n", "func_signal": "public String selectColor(List<String> colors)", "code": "{\n    String tr=\"transparent\";\n    for (String c: colors) {\n        if (!(c.equals(tr))) return c;\n    }\n    return tr;\n}", "path": "opm\\src\\main\\java\\org\\openprovenance\\model\\OPMToDot.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "/* Displays type if any, role otherwise. */\n", "func_signal": "public void addEdgeLabel(Edge e, HashMap<String,String> properties)", "code": "{\n    String label=null;\n    String type=of.getType(e);\n    if (type!=null) {\n        label=type;\n    } else if (getEdgePrintRole(e)) {\n        Role role=of.getRole(e);\n        if (role!=null && role.getValue()!=null) {\n            label=displayRole(role.getValue());\n            properties.put(\"fontsize\",\"8\");\n        }\n    }\n    if (label!=null) {\n        properties.put(\"label\",convertEdgeLabel(label));\n        if (properties.get(\"fontsize\")==null) {\n            properties.put(\"fontsize\",\"10\");\n        }\n    }\n}", "path": "opm\\src\\main\\java\\org\\openprovenance\\model\\OPMToDot.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "//////////////////////////////////////////////////////////////////////\n///\n///                              NODES\n///\n//////////////////////////////////////////////////////////////////////\n", "func_signal": "public void emitProcess(Process p, PrintStream out)", "code": "{\n    HashMap<String,String> properties=new HashMap();\n\n    emitNode(p.getId(),\n             addProcessShape(p,addProcessLabel(p, addProcessColor(p,properties))),\n             out);\n\n    emitAnnotations(p,out);\n}", "path": "opm\\src\\main\\java\\org\\openprovenance\\model\\OPMToDot.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "/** Creates and serialises an OPM graph. */\n", "func_signal": "public void testOPMGraph1() throws JAXBException", "code": "{\n    OPMFactory oFactory=new OPMFactory();\n\n    Account acc1=oFactory.newAccount(\"green\");\n    Account acc2=oFactory.newAccount(\"green\");\n    Account acc3=oFactory.newAccount(\"orange\");\n\n    assertTrue( acc1.equals(acc1) );\n    assertTrue( acc1.equals(acc2) );\n    assertTrue( acc2.equals(acc1) );\n    assertTrue( acc2.equals(acc2) );\n\n    assertFalse( acc2.equals(acc3) );\n    assertFalse( acc1.equals(acc3) );\n    assertFalse( acc3.equals(acc1) );\n    assertFalse( acc3.equals(acc2) );\n}", "path": "opm\\src\\test\\java\\org\\openprovenance\\model\\Example2Test.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "/** Produces a dot representation\n * of created graph. */\n", "func_signal": "public void testDL1Conversion() throws java.io.FileNotFoundException,  java.io.IOException", "code": "{\n    //OPMToDot toDot=new OPMToDot(true); // with roles\n    OPMToDot toDot=new OPMToDot(\"src/main/resources/dl1Config.xml\"); // with multisteps\n    \n    toDot.convert(graph1,\"target/dl1.dot\", \"target/dl1.pdf\");\n}", "path": "opm\\src\\test\\java\\org\\openprovenance\\model\\DL1Test.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "/** And another! */\n", "func_signal": "public void testConversion2() throws java.io.FileNotFoundException,  java.io.IOException", "code": "{\n    OPMToDot toDot=new OPMToDot(\"src/test/resources/otherConfig.xml\");\n    \n    toDot.convert(graph1,\"target/badcake2.dot\", \"target/badcake2.pdf\");\n}", "path": "opm\\src\\test\\java\\org\\openprovenance\\model\\Example4Test.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "/** Checks that the graph read from the file is the same as the\n * one created. */\n", "func_signal": "public void testEqual4() throws JAXBException", "code": "{\n    assertFalse (graph1.equals(graph2));\n\n    System.out.println(\"***** Warning Warning Warning Warning: graph  is not same as graph converted twice\");\n}", "path": "tupelo\\src\\test\\java\\org\\openprovenance\\rdf\\Example4Test.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "/** Produces a dot representation\n * of created graph. */\n", "func_signal": "public void testConversion() throws java.io.FileNotFoundException,  java.io.IOException", "code": "{\n    OPMToDot toDot=new OPMToDot();\n    \n    toDot.convert(graph1,\"target/badcake.dot\", \"target/badcake.pdf\");\n}", "path": "opm\\src\\test\\java\\org\\openprovenance\\model\\Example4Test.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "/**\n * Returns a list of namespace URIs that should be declared\n * at the root element.\n * <p>\n * By default, the JAXB RI produces namespace declarations only when\n * they are necessary, only at where they are used. Because of this\n * lack of look-ahead, sometimes the marshaller produces a lot of\n * namespace declarations that look redundant to human eyes. For example,\n * <pre><xmp>\n * <?xml version=\"1.0\"?>\n * <root>\n *   <ns1:child xmlns:ns1=\"urn:foo\"> ... </ns1:child>\n *   <ns2:child xmlns:ns2=\"urn:foo\"> ... </ns2:child>\n *   <ns3:child xmlns:ns3=\"urn:foo\"> ... </ns3:child>\n *   ...\n * </root>\n * <xmp></pre>\n * <p>\n * If you know in advance that you are going to use a certain set of\n * namespace URIs, you can override this method and have the marshaller\n * declare those namespace URIs at the root element.\n * <p>\n * For example, by returning <code>new String[]{\"urn:foo\"}</code>,\n * the marshaller will produce:\n * <pre><xmp>\n * <?xml version=\"1.0\"?>\n * <root xmlns:ns1=\"urn:foo\">\n *   <ns1:child> ... </ns1:child>\n *   <ns1:child> ... </ns1:child>\n *   <ns1:child> ... </ns1:child>\n *   ...\n * </root>\n * <xmp></pre>\n * <p>\n * To control prefixes assigned to those namespace URIs, use the\n * {@link #getPreferredPrefix} method.\n *\n * @return\n *      A list of namespace URIs as an array of {@link String}s.\n *      This method can return a length-zero array but not null.\n *      None of the array component can be null. To represent\n *      the empty namespace, use the empty string <code>\"\"</code>.\n *\n * @since\n *      JAXB RI 1.0.2\n */\n", "func_signal": "public String[] getPreDeclaredNamespaceUris()", "code": "{\n    if (defaultNamespace!=null) {\n        return new String[] { \"http://www.w3.org/2001/XMLSchema-instance\",\n                              \"http://www.w3.org/2001/XMLSchema\",\n                              defaultNamespace};\n    } else {\n        return new String[] { \"http://www.w3.org/2001/XMLSchema-instance\",\n                              \"http://www.w3.org/2001/XMLSchema\"};\n    }\n}", "path": "opm\\src\\main\\java\\org\\openprovenance\\model\\NamespacePrefixMapper.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "/** Produces a dot representation\n * of created graph. */\n", "func_signal": "public void testPharmaConversion() throws java.io.FileNotFoundException,  java.io.IOException", "code": "{\n    OPMToDot toDot=new OPMToDot(); \n    \n    toDot.convert(graph1,\"target/pharma.dot\", \"target/pharma.pdf\");\n}", "path": "opm\\src\\test\\java\\org\\openprovenance\\model\\PharmaTest.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "/** Produces a dot representation\n * of created graph. */\n", "func_signal": "public void testMULTI1Conversion() throws java.io.FileNotFoundException,  java.io.IOException", "code": "{\n    OPMToDot toDot=new OPMToDot(\"src/main/resources/defaultConfigMulti.xml\"); // with multisteps\n    \n    toDot.convert(graph1,\"target/multi1.dot\", \"target/multi1.pdf\");\n}", "path": "opm\\src\\test\\java\\org\\openprovenance\\model\\Multi1Test.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "/** And another! */\n", "func_signal": "public void testConversion4() throws java.io.FileNotFoundException,  java.io.IOException", "code": "{\n    OPMToDot toDot=new OPMToDot(\"src/test/resources/redConfig.xml\");\n    \n    toDot.convert(graph1,\"target/badcake-red.dot\", \"target/badcake-red.pdf\");\n}", "path": "opm\\src\\test\\java\\org\\openprovenance\\model\\Example4Test.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "/** And another! */\n", "func_signal": "public void testConversion3() throws java.io.FileNotFoundException,  java.io.IOException", "code": "{\n    OPMToDot toDot=new OPMToDot(\"src/test/resources/blackConfig.xml\");\n    \n    toDot.convert(graph1,\"target/badcake-black.dot\", \"target/badcake-black.pdf\");\n}", "path": "opm\\src\\test\\java\\org\\openprovenance\\model\\Example4Test.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "/** Produces a dot representation\n * of created graph. */\n", "func_signal": "public void testDL1Conversion2() throws java.io.FileNotFoundException,  java.io.IOException", "code": "{\n    //OPMToDot toDot=new OPMToDot(true); // with roles\n    OPMToDot toDot=new OPMToDot(\"src/main/resources/dl1Config2.xml\"); // with multisteps\n    \n    toDot.convert(graph1,\"target/dl12.dot\", \"target/dl12.pdf\");\n}", "path": "opm\\src\\test\\java\\org\\openprovenance\\model\\DL1Test.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "/** Produces a dot representation\n * of created graph. */\n", "func_signal": "public void testAnnotation11Conversion() throws java.io.FileNotFoundException,  java.io.IOException", "code": "{\n    OPMToDot toDot=new OPMToDot(true); // with roles\n    \n    toDot.convert(graph1,\"target/annotation-example1.dot\", \"target/annotation-example1.pdf\");\n}", "path": "opm\\src\\test\\java\\org\\openprovenance\\model\\Annotation1Test.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "//////////////////////////////////////////////////////////////////////\n///\n///                              EDGES\n///\n//////////////////////////////////////////////////////////////////////\n", "func_signal": "public void emitDependency(Edge e, PrintStream out)", "code": "{\n    HashMap<String,String> properties=new HashMap();\n\n    List<AccountRef> accounts=e.getAccount();\n    if (accounts.isEmpty()) {\n        accounts=new LinkedList();\n        accounts.add(of.newAccountRef(of.newAccount(defaultAccountLabel)));\n    }\n        \n    for (AccountRef acc: accounts) {\n        String accountLabel=((Account)acc.getRef()).getId();\n        addEdgeAttributes(accountLabel,e,properties);\n        emitEdge( ((Node)e.getEffect().getRef()).getId(),\n                  ((Node)e.getCause().getRef()).getId(),\n                  properties,\n                  out,\n                  true);\n    }\n}", "path": "opm\\src\\main\\java\\org\\openprovenance\\model\\OPMToDot.java", "repo_name": "lucmoreau/OpenProvenanceModel", "stars": 24, "license": "mit", "language": "java", "size": 1269}
{"docstring": "/**\n * \u5c5e\u6027\u5024\u3092\u6587\u5b57\u5217\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059.\n * @param propertyName \u5c5e\u6027\u540d\n * @return \u5c5e\u6027\u5024\n */\n", "func_signal": "protected final String getPropertyString(final String propertyName)", "code": "{\n    try {\n        return (String) original.get(propertyName);\n    } catch (JSONException e) {\n        return null;\n    }\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\common\\Model.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/*\n * (non-Javadoc)\n * @see jp.mixi.android.sdk.wrapper.AbstractParams#convertParameterMap()\n */\n", "func_signal": "@Override\npublic final Map<String, String> convertParameterMap()", "code": "{\n    Map<String, String> result = new HashMap<String, String>();\n    putParameter(result, \"message\", message);\n    putParameter(result, \"recipients\",\n            convertArrayToStringWithComma(recipients));\n    putParameter(result, \"url\", url);\n    putParameter(result, \"mobileUrl\", mobileUrl);\n    putParameter(result, \"image\", image);\n    return result;\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\request\\SendRequestParams.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/**\n * \u8a8d\u53ef\u30e6\u30fc\u30b6\u306e\u53cb\u4eba\u306e\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059.\n * @param params \u53d6\u5f97\u6761\u4ef6\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n * @param handler \u51e6\u7406\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u305f\u3081\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u30ea\u30b9\u30ca\n */\n", "func_signal": "public void getFriends(final GetPeopleParams params,\n        final GetPeopleCallbackHandler handler)", "code": "{\n    getContainer().send(\"/people/@me/@friends\",\n            params.convertParameterMap(), handler);\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\people\\PeopleProxyImpl.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/**\n * \u5c5e\u6027\u5024\u3092boolean\u5024\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059.\n * @param propertyName \u5c5e\u6027\u540d\n * @return \u5c5e\u6027\u5024\n */\n", "func_signal": "protected final boolean getPropertyBoolean(final String propertyName)", "code": "{\n    Object value;\n    try {\n        value = original.get(propertyName);\n    } catch (JSONException e) {\n        value = null;\n    }\n    if (value == null) {\n        return false;\n    } else if (value instanceof Boolean) {\n        return (Boolean) value;\n    } else {\n        return Boolean.parseBoolean((String) value);\n    }\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\common\\Model.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/**\n * \u5c5e\u6027\u5024\u3092JSON\u914d\u5217\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059.\n * @param propertyName \u5c5e\u6027\u540d\n * @return \u5c5e\u6027\u5024\n */\n", "func_signal": "protected final JSONArray getPropertyJSONArray(final String propertyName)", "code": "{\n    try {\n        return (JSONArray) original.get(propertyName);\n    } catch (JSONException e) {\n        return null;\n    }\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\common\\Model.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/**\n * Initialize this instance.\n * @param newOriginal The JSON object which has information about Album.\n */\n", "func_signal": "protected Album(final JSONObject newOriginal)", "code": "{\n    super(newOriginal);\n    privacy = new Privacy(getPropertyJSONObject(\"privacy\"));\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\photo\\Album.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/*\n * (non-Javadoc)\n * @see jp.mixi.android.sdk.wrapper.AbstractParams#convertParameterMap()\n */\n", "func_signal": "@Override\npublic Map<String, String> convertParameterMap()", "code": "{\n    Map<String, String> params = new HashMap<String, String>();\n    if (count >= 0) {\n        params.put(\"count\", String.valueOf(count));\n    }\n    if (sinceId != null) {\n        params.put(\"sinceId\", sinceId);\n    }\n    if (center != null) {\n        params.put(\"center\", center);\n    }\n    if (spotId != null) {\n        params.put(\"spotId\", spotId);\n    }\n    if (resultsDirection != null) {\n        params.put(\"resultsDirection\", resultsDirection.toString());\n    }\n    if (fields != null) {\n        params.put(\"fields\", convertArrayToStringWithComma(fields));\n    }\n    return params;\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\checkin\\GetCheckinsParams.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/**\n * \u5c5e\u6027\u5024\u3092JSON\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059.\n * @param propertyName \u5c5e\u6027\u540d\n * @return \u5c5e\u6027\u5024\n */\n", "func_signal": "protected final JSONObject getPropertyJSONObject(\n        final String propertyName)", "code": "{\n    try {\n        return (JSONObject) original.get(propertyName);\n    } catch (JSONException e) {\n        return null;\n    }\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\common\\Model.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/**\n * mixi\u30a2\u30d7\u30ea\u5411\u3051\u306b\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u30ea\u30af\u30a8\u30b9\u30c8\u9001\u4fe1API\u3092\u547c\u3073\u51fa\u3057\u307e\u3059.\n * @param context \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n * @param params \u30ea\u30af\u30a8\u30b9\u30c8\u9001\u4fe1\u306b\u5fc5\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n * @param handler \u51e6\u7406\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u305f\u3081\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u30ea\u30b9\u30ca\n */\n", "func_signal": "public final void sendRequest(\n        final Context context,\n        final SendRequestParams params,\n        final SendRequestCallbackHandler handler)", "code": "{\n    getContainer().showDialog(\n            context,\n            \"/requests\",\n            params.convertParameterMap(),\n            handler);\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\request\\RequestProxyImpl.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/**\n * \u6307\u5b9a\u3055\u308c\u305f\u60c5\u5831\u3067\u3053\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u521d\u671f\u5316\u3057\u307e\u3059.\n * @param newMessage \u672c\u6587\n * @param newRecipients \u9001\u4fe1\u5148\u306e\u30e6\u30fc\u30b6ID\u306e\u914d\u5217\n * @param newUrl PC\u5411\u3051\u306e\u3053\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u98db\u3073\u5148\u306eURL\n * @param newMobileUrl Feature-phone\u5411\u3051\u306e\u3053\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u98db\u3073\u5148\u306eURL\n * @param newImage \u753b\u50cf\u306eURL\n */\n", "func_signal": "public SendRequestParams(\n        final String newMessage,\n        final String[] newRecipients,\n        final String newUrl,\n        final String newMobileUrl,\n        final String newImage)", "code": "{\n    super();\n    this.message = newMessage;\n    this.recipients = newRecipients;\n    this.url = newUrl;\n    this.mobileUrl = newMobileUrl;\n    this.image = newImage;\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\request\\SendRequestParams.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/**\n * mixi\u30a2\u30d7\u30ea\u5411\u3051\u306b\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u30ea\u30af\u30a8\u30b9\u30c8\u524a\u9664API\u3092\u547c\u3073\u51fa\u3057\u307e\u3059.\n * @param requestIds \u524a\u9664\u3057\u305f\u3044\u30ea\u30af\u30a8\u30b9\u30c8\u306eID\u306e\u914d\u5217\n * @param handler \u51e6\u7406\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u305f\u3081\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u30ea\u30b9\u30ca\n */\n", "func_signal": "public final void deleteRequests(\n        final String[] requestIds,\n        final CallbackAdapter handler)", "code": "{\n    StringBuilder sb = new StringBuilder();\n    boolean first = true;\n    for (int i = 0; i < requestIds.length; i++) {\n        if (first) {\n            first = false;\n        } else {\n            sb.append(\",\");\n        }\n        sb.append(requestIds[i]);\n    }\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"requestIds\", sb.toString());\n    getContainer().send(\n            \"/apps/requests/@me/@self\",\n            HttpMethod.DELETE,\n            params,\n            handler);\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\request\\RequestProxyImpl.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/**\n * Date\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u65e5\u4ed8\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u307e\u3059.\n * @param date Date\u30aa\u30d6\u30b8\u30a7\u30af\u30c8.\n * @return \u65e5\u4ed8\u6587\u5b57\u5217.\n */\n", "func_signal": "public static String convertDate(final Date date)", "code": "{\n    DateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n    return formatter.format(date);\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\util\\DateUtils.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/**\n * \u5c5e\u6027\u5024\u3092int\u5024\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059.\n * @param propertyName \u5c5e\u6027\u540d\n * @return \u5c5e\u6027\u5024\n */\n", "func_signal": "protected final int getPropertyInt(final String propertyName)", "code": "{\n    Object value;\n    try {\n        value = original.get(propertyName);\n    } catch (JSONException e) {\n        value = null;\n    }\n    if (value == null) {\n        return 0;\n    } else if (value instanceof Integer) {\n        return (Integer) value;\n    } else {\n        return Integer.parseInt((String) value);\n    }\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\common\\Model.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/**\n * created\u5c5e\u6027\u5024\u3092\u8fd4\u3057\u307e\u3059.\n * @return \u30b3\u30e1\u30f3\u30c8\u6295\u7a3f\u65e5\u6642\n * @throws ParseException \u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u305f\u3068\u304d\n */\n", "func_signal": "public final Date getCreated() throws ParseException", "code": "{\n    String createdAt = getPropertyString(\"created\");\n    if (createdAt != null) {\n        return DateUtils.convertDate(createdAt);\n    } else {\n        return null;\n    }\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\common\\Comment.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/**\n * \u65e5\u4ed8\u6587\u5b57\u5217\u3092Date\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3057\u307e\u3059..\n * @param original \u65e5\u4ed8\u6587\u5b57\u5217.\n * @return \u5909\u63db\u3055\u308c\u305f\u65e5\u4ed8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8.\n * @throws ParseException \u3082\u3057\u5f15\u6570\u304c\u4e0d\u6b63\u3060\u3063\u305f\u3068\u304d.\n */\n", "func_signal": "public static Date convertDate(final String original)\n        throws ParseException", "code": "{\n    String target = original;\n    if (target.endsWith(\":00\")) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(target.substring(0, target.indexOf(\":00\")));\n        sb.append(\"00\");\n        target = sb.toString();\n    }\n    DateFormat format = new SimpleDateFormat(DATE_FORMAT);\n    return format.parse(target);\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\util\\DateUtils.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/**\n * \u5c5e\u6027\u5024\u3092\u6587\u5b57\u5217\u914d\u5217\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059.\n * @param propertyName \u5c5e\u6027\u540d\n * @return \u5c5e\u6027\u5024\n */\n", "func_signal": "protected final String[] getPropertyStringArray(final String propertyName)", "code": "{\n    JSONArray array;\n    try {\n        array = (JSONArray) original.get(propertyName);\n    } catch (JSONException e) {\n        return null;\n    }\n    String[] result = new String[array.length()];\n    for (int i = 0; i < array.length(); i++) {\n        try {\n            result[i] = array.getString(i);\n        } catch (JSONException e) {\n            result[i] = null;\n        }\n    }\n    return result;\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\common\\Model.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/**\n * \u3053\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u521d\u671f\u5316\u3057\u307e\u3059.\n * @param newOriginal JSON\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n */\n", "func_signal": "public Comment(final JSONObject newOriginal)", "code": "{\n    super(newOriginal);\n    user = new User(getPropertyJSONObject(\"user\"));\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\common\\Comment.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/*\n * (non-Javadoc)\n * @see jp.mixi.android.sdk.wrapper.AbstractParams#convertParameterMap()\n */\n", "func_signal": "@Override\npublic Map<String, String> convertParameterMap()", "code": "{\n    Map<String, String> params = new HashMap<String, String>();\n    if (count >= 0) {\n        params.put(\"count\", String.valueOf(count));\n    }\n    if (sinceId != null) {\n        params.put(\"sinceId\", sinceId);\n    }\n    if (center != null) {\n        params.put(\"center\", center);\n    }\n    if (keyword != null) {\n        params.put(\"q\", keyword);\n    }\n    if (resultsDirection != null) {\n        params.put(\"resultsDirection\", resultsDirection.toString());\n    }\n    if (fields != null) {\n        params.put(\"fields\", convertArrayToStringWithComma(fields));\n    }\n    return params;\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\checkin\\SearchSpotsParams.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/**\n * \u6307\u5b9a\u3055\u308c\u305f\u60c5\u5831\u3067\u3053\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u521d\u671f\u5316\u3057\u307e\u3059.\n * @param original JSON\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n */\n", "func_signal": "public Model(final JSONObject original)", "code": "{\n    super();\n    this.original = original;\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\common\\Model.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/*\n * (non-Javadoc)\n * @see jp.mixi.android.sdk.wrapper.AbstractParams#convertParameterMap()\n */\n", "func_signal": "@Override\npublic Map<String, String> convertParameterMap()", "code": "{\n    Map<String, String> params = new HashMap<String, String>();\n    if (trimUser != null) {\n        params.put(\"trim_user\", trimUser.getReal());\n    }\n    if (attachPhoto) {\n        params.put(\"attach_photo\", \"true\");\n    }\n    return params;\n}", "path": "src\\jp\\eisbahn\\android\\sdk\\wrapper\\voice\\GetStatusParams.java", "repo_name": "yoichiro/mixiAndroidSDKWrapper", "stars": 20, "license": "None", "language": "java", "size": 364}
{"docstring": "/**\n * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n * \n * @param data \u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u7d50\u679c\u3067\u623b\u3063\u305f\u30d0\u30a4\u30c8\u5217\u3092\u30bb\u30c3\u30c8\n */\n", "func_signal": "public CommandResponse(byte[] data)", "code": "{\n    if ( data != null ) {\n        this.rawData = data;\n        this.length = data[0] & 0xff; \n        this.responseCode = data[1];\n        this.idm = new IDm(Arrays.copyOfRange(data, 2, 10));\n        this.data = Arrays.copyOfRange(data, 10, data.length);\n    } else {\n        this.rawData = null;\n        this.length = 0; \n        this.responseCode = 0;\n        this.idm = null;\n        this.data = null;\n    }\n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9 : \" + Util.getHexString(this.systemCode) + \"\\n\");\n    return sb.toString();\n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/**\n * \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\n *\n * @param Tag Tag\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\n * @param commandPacket \u5b9f\u884c\u3059\u308b\u30b3\u30de\u30f3\u30c9\u30d1\u30b1\u30c3\u30c8\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\n * @return CommandResponse \u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u7d50\u679c\u304c\u623b\u308a\u307e\u3059 \n * @throws FeliCaException \u30b3\u30de\u30f3\u30c9\u306e\u767a\u884c\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u30b9\u30ed\u30fc\u3055\u308c\u307e\u3059\n */\n", "func_signal": "public static final CommandResponse execute(Tag tag, CommandPacket commandPacket) throws FeliCaException", "code": "{\n    byte[] result = executeRaw(tag, commandPacket.getBytes());\n    return new CommandResponse(result);\n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/**\n * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \n * @param bytes IDm\u306e\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30d0\u30a4\u30c8\u5217\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\n */\n", "func_signal": "public IDm(byte[] bytes)", "code": "{\n    this.manufactureCode = new byte[]{bytes[0], bytes[1]};\n    this.cardIdentification = \n        new byte[]{bytes[2], bytes[3], bytes[4], bytes[5], bytes[6], bytes[7]};\n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/**\n * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n * \n * @param serviceCode \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306e\u914d\u5217\u3092\u30bb\u30c3\u30c8\n * @param blockListElements \u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u30a8\u30ec\u30e1\u30f3\u30c8\u306e\u914d\u5217\u3092\u30bb\u30c3\u30c8\n */\n", "func_signal": "public Service(ServiceCode[] serviceCodes, BlockListElement ... blockListElements )", "code": "{\n    this.serviceCodes = serviceCodes;\n    this.blockListElements = blockListElements;\n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"\u30d6\u30ed\u30c3\u30af : \" + Util.getHexString(this.data) + \"\\n\");\n    return sb.toString();\n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"\u30e1\u30e2\u30ea\u30b3\u30f3\u30d5\u30a3\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u30d6\u30ed\u30c3\u30af(MC)\\n\");\n    sb.append(\"  NdefSupport  : \" + this.isNdefSupport() + \"\\n\");\n    sb.append(\"  MemoryConfig : \\n\");\n    for ( int i = 0; i < this.data.length; i++ ) {\n        sb.append(\"    \u30d6\u30ed\u30c3\u30af  \" + i + \" = \"  \n                + (this.isWritable(i) ? \"1:RW\" : \"0:RO\") + \"\\n\");\n    }\n    return sb.toString();\n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/**\n * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n * @param in \u5165\u529b\u3059\u308b\u30d1\u30fc\u30bb\u30eb\u5316\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30bb\u30c3\u30c8\n */\n", "func_signal": "public IDm(Parcel in)", "code": "{\n    this.manufactureCode = new byte[in.readInt()];\n    in.readByteArray(this.manufactureCode);\n    this.cardIdentification = new byte[in.readInt()];\n    in.readByteArray(this.cardIdentification);\n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/**\n * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n * \n * @param commandCode \u30b3\u30de\u30f3\u30c9\u30b3\u30fc\u30c9\u3092\u30bb\u30c3\u30c8\n * @param idm \u30b7\u30b9\u30c6\u30e0\u88fd\u9020ID(IDm)\u3092\u30bb\u30c3\u30c8\n * @param data \u30b3\u30de\u30f3\u30c9\u30c7\u30fc\u30bf\u3092\u30bb\u30c3\u30c8\n * @throws FeliCaException \n */\n", "func_signal": "public CommandPacket(byte commandCode, IDm idm, final byte... data) throws FeliCaException", "code": "{\n    if ( !commandMap.containsKey(commandCode))\n        throw new FeliCaException(\"commandCode : \" + commandCode + \" not supported.\");\n    this.commandCode = commandCode;\n    this.idm = idm;\n    this.data = data;\n    this.length = idm.getBytes().length + data.length + 2;\n    if ( this.length > 255 )\n        throw new FeliCaException(\"command data too long (less than 255byte)\");        \n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/**\n * INfcTag#transceive\u3092\u5b9f\u884c\u3057\u307e\u3059\n * \n * @param Tag Tag\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\n * @param commandPacket \u5b9f\u884c\u3059\u308b\u30b3\u30de\u30f3\u30c9\u30d1\u30b1\u30c3\u30c8\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\n * @return byte[] \u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u7d50\u679c\u30d0\u30a4\u30c8\u5217\u3067\u623b\u308a\u307e\u3059 \n * @throws FeliCaException \u30b3\u30de\u30f3\u30c9\u306e\u767a\u884c\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u30b9\u30ed\u30fc\u3055\u308c\u307e\u3059\n */\n", "func_signal": "public static final byte[] transceive(Tag tag, byte[] data) throws NfcException", "code": "{\n    //NfcF\u306fFeliCa\n    NfcF nfcF = NfcF.get(tag);\n    if ( nfcF == null ) throw new NfcException(\"tag is not FeliCa(NFC-F) \");\n    try {\n        nfcF.connect();\n        try {\n            return nfcF.transceive(data);\n        } finally {\n            nfcF.close();\n        }\n    } catch (TagLostException e) {\n        return null; //Tag Lost\n    } catch (IOException e) {\n        throw new NfcException(e);\n    }\n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n   StringBuilder sb = new StringBuilder();\n   sb.append(\"FeliCa \u30b3\u30de\u30f3\u30c9\u30d1\u30b1\u30c3\u30c8 \\n\");\n   sb.append(\" \u30b3\u30de\u30f3\u30c9\u540d:\" + commandMap.get(this.commandCode)  +  \"\\n\");\n   sb.append(\" \u30c7\u30fc\u30bf\u9577: \" + Util.getHexString((byte)(this.length & 0xff)) + \"\\n\");\n   sb.append(\" \u30b3\u30de\u30f3\u30c9\u30b3\u30fc\u30c9 : \" + Util.getHexString(this.commandCode) +  \"\\n\");\n   if ( this.idm != null )\n       sb.append(\" \" + this.idm.toString() + \"\\n\");\n   sb.append(\" \u30c7\u30fc\u30bf: \" + Util.getHexString(this.data) + \"\\n\");\n   return sb.toString();\n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/**\n * Raw\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\n * \n * @param Tag Tag\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\n * @param data \u30b3\u30de\u30f3\u30c9\u306b\u30bb\u30c3\u30c8\u3059\u308b\u30c7\u30fc\u30bf\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\n * @return byte[] \u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u7d50\u679c\u30d0\u30a4\u30c8\u5217\u3067\u623b\u308a\u307e\u3059 \n * @throws FeliCaException \u30b3\u30de\u30f3\u30c9\u306e\u767a\u884c\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u30b9\u30ed\u30fc\u3055\u308c\u307e\u3059\n */\n", "func_signal": "public static final byte[] executeRaw(Tag tag, byte[] data) throws FeliCaException", "code": "{\n    try {\n        return transceive(tag, data);\n    } catch (NfcException e) {\n        throw new FeliCaException(e);\n    }\n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n   StringBuilder sb = new StringBuilder();\n   sb.append(\" \\n\\n\");\n   sb.append(\"FeliCa \u30ec\u30b9\u30dd\u30f3\u30b9\u30d1\u30b1\u30c3\u30c8 \\n\");\n   sb.append(\" \u30b3\u30de\u30f3\u30c9\u540d:\" + commandMap.get(this.responseCode)  +  \"\\n\");\n   sb.append(\" \u30c7\u30fc\u30bf\u9577: \" + Util.getHexString((byte)(this.length & 0xff)) + \"\\n\");\n   sb.append(\" \u30ec\u30b9\u30dd\u30f3\u30b9\u30b3\u30fc\u30c9: \" + Util.getHexString(this.responseCode) + \"\\n\");\n   sb.append(\" \"+ this.idm.toString() + \"\\n\");\n   sb.append(\" \u30c7\u30fc\u30bf: \" + Util.getHexString(this.data) + \"\\n\");\n   return sb.toString();\n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/**\n * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n * @param accessMode \u30a2\u30af\u30bb\u30b9\u30e2\u30fc\u30c9\u30920\u53c8\u306f1\u3067\u30bb\u30c3\u30c8\n * @param serviceCodeListOrder \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u30ea\u30b9\u30c8\u9806\u3092\u30bb\u30c3\u30c8\n * @param blockNumber \u5bfe\u8c61\u306e\u30d6\u30ed\u30c3\u30af\u756a\u53f7\u30921\u30d0\u30a4\u30c8\u53c8\u306f2\u30d0\u30a4\u30c8\u3067\u30bb\u30c3\u30c8\n */\n", "func_signal": "public BlockListElement (byte accessMode, byte serviceCodeListOrder, byte... blockNumber )", "code": "{\n    if ( blockNumber.length > 1 ) {\n        this.lengthAndaccessMode =  (byte)(accessMode | LENGTH_2_BYTE & 0xFF);\n    } else {\n        this.lengthAndaccessMode =  (byte)(accessMode | LENGTH_3_BYTE & 0xFF);\n    }\n    this.serviceCodeListOrder = (byte) (serviceCodeListOrder & 0x0F);\n    this.blockNumber = blockNumber;\n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/* (non-Javadoc)\n * @see net.felica.IFeliCaByteData#getBytes()\n */\n", "func_signal": "@Override\npublic byte[] getBytes()", "code": "{\n    ByteBuffer buff = ByteBuffer.allocate(\n            this.icCode.length + this.maximumResponseTime.length);\n    buff.put(this.icCode).put(this.maximumResponseTime);\n    return buff.array();\n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"PMm(\u88fd\u9020\u30d1\u30e9\u30e1\u30fc\u30bf)\\n\");\n    sb.append(\" IC\u30b3\u30fc\u30c9(2byte): \" + Util.getHexString(this.icCode) + \"\\n\");\n    sb.append(\"   ROM\u7a2e\u5225: \" + Util.getHexString(this.icCode, 0, 1) + \"\\n\");\n    sb.append(\"   IC \u7a2e\u5225: \" + Util.getHexString(this.icCode, 1, 1) + \"\\n\");\n    sb.append(\"\\n\");\n    sb.append(\" \u6700\u5927\u5fdc\u7b54\u6642\u9593\u30d1\u30e9\u30e1\u30bf(6byte)\\n\");\n    sb.append(\"  B3(request service):\" + Util.getBinString(this.maximumResponseTime, 0, 1) + \"\\n\");\n    sb.append(\"  B4(request response):\" + Util.getBinString(this.maximumResponseTime, 1, 1) + \"\\n\");\n    sb.append(\"  B5(authenticate):\" + Util.getBinString(this.maximumResponseTime, 2, 1) + \"\\n\");\n    sb.append(\"  B6(read):\" + Util.getBinString(this.maximumResponseTime, 3, 1) + \"\\n\");\n    sb.append(\"  B7(write):\" + Util.getBinString(this.maximumResponseTime, 4, 1) + \"\\n\");\n    sb.append(\"  B8():\" + Util.getBinString(this.maximumResponseTime, 5, 1) + \"\\n\");\n    return sb.toString();\n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "// \u6700\u5927\u5fdc\u7b54\u6642\u9593\n       /**\n        * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n        * @param in \u5165\u529b\u3059\u308b\u30d1\u30fc\u30bb\u30eb\u5316\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30bb\u30c3\u30c8\n        */\n", "func_signal": "public PMm(Parcel in)", "code": "{\n           this.icCode = new byte[in.readInt()];\n           in.readByteArray(this.icCode);\n           \n           this.maximumResponseTime = new byte[in.readInt()];\n           in.readByteArray(this.maximumResponseTime);\n       }", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/**\n * \u30d6\u30ed\u30c3\u30af\u4e2d\u306e\u9818\u57df (0x00h\uff5e0x0fh)\u304c\u66f8\u304d\u3053\u307f\u53ef\u80fd\u306a\u5426\u304b\u3092\u691c\u67fb\u3057\u307e\u3059\n * \n * @param addr \u8abf\u3079\u305f\u3044\u30d6\u30ed\u30c3\u30af\u756a\u53f7\u3078\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u30bb\u30c3\u30c8 (\u8907\u6570\u30bb\u30c3\u30c8\u3057\u305f\u5834\u5408\u306fand\u6f14\u7b97\u3055\u308c\u307e\u3059)\n * @return\u3000\u66f8\u304d\u8fbc\u307f\u53ef\u80fd\u306a\u5834\u5408\u306b\u306ftrue\u304c\u623b\u308a\u307e\u3059\n */\n", "func_signal": "public boolean isWritable(int... addrs)", "code": "{\n    if ( this.data == null ) return false;\n    \n    boolean result = true;\n    for ( int a : addrs ) {\n        byte b = (byte) ((a & 0xff) + 1);\n        if ( a < 8 ) {\n            result &= (this.data[0] & b ) == b;\n            continue;\n        } else \n        if ( a < 16 ) {\n            result &= (this.data[1] & b ) == b;\n            continue;\n        } else \n        result &= (this.data[2] & b ) == b;\n    }\n    return result;\n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/**\n  * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n  * @param bytes \u30d0\u30a4\u30c8\u5217\u3092\u30bb\u30c3\u30c8\n  */\n", "func_signal": "public PMm(byte[] bytes)", "code": "{\n     this.icCode = new byte[]{bytes[0], bytes[1]};\n     this.maximumResponseTime = \n         new byte[]{bytes[2], bytes[3], bytes[4], bytes[5], bytes[6], bytes[7]};\n }", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/**\n * NDEF\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u304b\u5426\u304b\u3092\u691c\u67fb\u3057\u307e\u3059\n * @return boolean NDEF\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u5834\u5408true\u304c\u623b\u308a\u307e\u3059\n */\n", "func_signal": "public boolean isNdefSupport()", "code": "{\n    if ( this.data == null ) return false;\n    return ( this.data[3] & (byte)0xff ) == 1; \n}", "path": "nfc-and-felica\\src\\net\\kazzz\\felica\\lib\\FeliCaLib.java", "repo_name": "yuki24/android-exercises", "stars": 29, "license": "mit", "language": "java", "size": 151}
{"docstring": "/**\n * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#dispose()\n */\n", "func_signal": "public void dispose()", "code": "{\n    // Try to shutdown the signature tool if it is still running.\n    if( process != null ) {\n        process.destroy();\n    }\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\signing\\ImportCSIFilesAction.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * Displays a warning dialog indicating that no VC2008 install when running CP 6.0.\n */\n", "func_signal": "private static void warnMissingVC2008( String eeVersion )", "code": "{\n    final String message = NLS.bind( Messages.MissingVC2008WarningMsg, eeVersion );\n    IEclipsePreferences pref = ( new InstanceScope() ).getNode( ContextManager.PLUGIN_ID );\n    boolean pop = pref.getBoolean( PreferenceConstants.POP_FOR_MISSING_VC, true );\n    if( pop ) {\n        final Display display = getDisplay();\n        display.asyncExec( new Runnable() {\n\n            @Override\n            public void run() {\n                VCWarningDialog dialog = new VCWarningDialog( display.getActiveShell(), Messages.MissingVC2008WarningTitle,\n                        message );\n                dialog.open();\n\n            }\n        } );\n    }\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\util\\VMToolsUtils.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * Launches the Signature tool. It passes the .csi file to the signature tool.\n */\n", "func_signal": "private void launchSignatureTool( String csiFile )", "code": "{\n    log.debug( \"Entering SignatureToolAction launchSignatureTool()\" );\n\n    // This is a list of the commands to run. The first position is the\n    // actual command; subsequent entries are arguments.\n    List< String > commands = new LinkedList< String >();\n\n    // Find the path to java.exe\n    String javaHome = System.getProperty( \"java.home\" );\n    IPath javaBinPath = new Path( javaHome ).append( IConstants.BIN_FOLD_NAME ).append( IConstants.JAVA_CMD );\n    commands.add( javaBinPath.toOSString() );\n\n    // Use the system look and feel\n    String lookAndFeelClass = UIManager.getSystemLookAndFeelClassName();\n    commands.add( \"-Dswing.defaultlaf=\" + lookAndFeelClass );\n\n    // Load from a jar\n    commands.add( \"-jar\" );\n\n    IPath sigPath;\n    String sigPathString = IConstants.EMPTY_STRING;\n    try {\n        sigPath = VMToolsUtils.getSignatureToolPath();\n        // check signature tool again\n        if( !VMToolsUtils.isVMToolValid() ) {\n            Display.getDefault().syncExec( new Runnable() {\n                public void run() {\n                    Shell shell = ContextManager.getActiveWorkbenchShell();\n                    MessageDialog.openError( shell, Messages.ErrorHandler_DIALOG_TITLE, Messages.SignatureTool_Not_Found_Msg );\n                }\n            } );\n            log.error( Messages.SignatureTool_Not_Found_Msg );\n            return;\n        }\n        sigPathString = sigPath.toOSString();\n        commands.add( sigPathString );\n        commands.add( csiFile );\n\n    } catch( IOException e ) {\n        log.error( e.getMessage(), e );\n    }\n\n    // Run the command\n    ProcessBuilder processBuilder = new ProcessBuilder( commands );\n    try {\n        process = processBuilder.start();\n        BufferedReader is = new BufferedReader( new InputStreamReader( process.getInputStream() ) );\n        String buffer;\n        while( ( buffer = is.readLine() ) != null ) {\n            // Print out console output for debugging purposes...\n            System.out.println( buffer );\n        }\n        process = null;\n    } catch( IOException e ) {\n        e.printStackTrace();\n    }\n\n    log.debug( \"Leaving SignatureToolAction launchSignatureTool()\" );\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\signing\\ImportCSIFilesAction.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * Displays BlackBerry startup page only when first time eclipse is started.\n */\n", "func_signal": "private static void showStartupPage()", "code": "{\n    IEclipsePreferences pref = ( new InstanceScope() ).getNode( ContextManager.PLUGIN_ID );\n    boolean showStartupPage = pref.getBoolean( PreferenceConstants.OPEN_STARTUP_PAGE_ON_ECLPSE_FIRST_START, true );\n    if( showStartupPage ) {\n        pref.putBoolean( PreferenceConstants.OPEN_STARTUP_PAGE_ON_ECLPSE_FIRST_START, false );\n        final Display display = getDisplay();\n        display.asyncExec( new Runnable() {\n            @Override\n            public void run() {\n                ProjectUtils.openStartupPage();\n            }\n        } );\n    }\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\util\\VMToolsUtils.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * Gets old VM tools (i.e. signTool) folder path.\n *\n * @return the old VM tools folder path\n * @throws IOException\n *             Signals that an I/O exception has occurred.\n */\n", "func_signal": "public static IPath getOldVMToolsFolderPath() throws IOException", "code": "{\n    if( _oldVMToolFolder == null ) {\n        Bundle bundle = Platform.getBundle( ContextManager.PLUGIN_ID );\n        FileLocator.resolve( FileLocator.find( bundle, Path.ROOT, null ) );\n        URL bundleURL = FileLocator.resolve( FileLocator.find( bundle, Path.ROOT, null ) );\n        String bundlePath = bundleURL.getFile();\n        bundlePath = bundlePath.substring( bundlePath.indexOf( IPath.SEPARATOR ) + 1 );\n        _oldVMToolFolder = new Path( bundlePath ).removeLastSegments( 1 ).append(\n                VMToolsUtils.getBundleDataFolderName() + IPath.SEPARATOR + IConstants.OLD_VMTOOLS_LOCATION );\n    }\n    return _oldVMToolFolder;\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\util\\VMToolsUtils.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/*\n * (non-Javadoc)\n *\n * @see java.lang.Object#equals(java.lang.Object)\n */\n", "func_signal": "public boolean equals( Object obj )", "code": "{\n    if( obj instanceof LibraryStandin ) {\n        LibraryStandin lib = (LibraryStandin) obj;\n        return getSystemLibraryPath().equals( lib.getSystemLibraryPath() )\n                && equals( getSystemLibrarySourcePath(), lib.getSystemLibrarySourcePath() )\n                && equals( getPackageRootPath(), lib.getPackageRootPath() )\n                && equalsOrNull( getJavadocLocation(), lib.getJavadocLocation() );\n    }\n    return false;\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\model\\ui\\LibraryStandin.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * Display profile data.\n */\n", "func_signal": "public void displayProfileData( ProfileTab[] tabs )", "code": "{\n    if( tabs == null || tabs.length == 0 )\n        return;\n    if( _pd != null ) {\n        for( int i = 0; i < tabs.length; i++ )\n            tabs[ i ].displayData( _pd );\n    }\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\ui\\views\\profiler\\ProfilerView.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * Display source code information of <code>pi</code>.\n *\n * @param pi\n *            An instance of ProfileItem.\n */\n", "func_signal": "protected void displaySourceData( ProfileItem pi )", "code": "{\n    SourceProfileTab sourceTab = (SourceProfileTab) _profileTabs[ INDEX_OF_TAB_SOURCE ];\n    sourceTab.setTotal( _pd.getTotalExecutionTicks() );\n    sourceTab.setHistory( pi );\n    sourceTab.clearExpansion();\n    sourceTab.displayData( pi );\n    setActiveTab( INDEX_OF_TAB_SOURCE );\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\ui\\views\\profiler\\ProfilerView.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * Gets the VM tools folder path.\n *\n * @return the VM tools folder path\n *\n * @throws IOException\n *             Signals that an I/O exception has occurred.\n */\n", "func_signal": "public static IPath getVMToolsFolderPath() throws IOException", "code": "{\n    if( _storedVMToolFolder == null ) {\n        Bundle bundle = Platform.getBundle( ContextManager.PLUGIN_ID );\n        FileLocator.resolve( FileLocator.find( bundle, Path.ROOT, null ) );\n        URL bundleURL = FileLocator.resolve( FileLocator.find( bundle, Path.ROOT, null ) );\n        String bundlePath = bundleURL.getFile();\n        bundlePath = bundlePath.substring( bundlePath.indexOf( IPath.SEPARATOR ) + 1 );\n        _storedVMToolFolder = new Path( bundlePath ).removeLastSegments( 1 ).append(\n                VMToolsUtils.getBundleDataFolderName() + IPath.SEPARATOR + VMToolsUtils.getVMToolsFolderName() );\n    }\n    return _storedVMToolFolder;\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\util\\VMToolsUtils.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * Save profile data to a csv file.\n */\n", "func_signal": "private void saveProfile()", "code": "{\n    if( _pd == null )\n        return;\n    try {\n        // save profile data to the file\n        saveContents( RimIDEUtil.openCSVFileForSave( getSite().getShell() ) );\n    } catch( IDEError e ) {\n        log.error( \"\", e );\n    }\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\ui\\views\\profiler\\ProfilerView.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * Save raw data of the view content to a XML file.\n * <p>\n * <b>subclasses need to override this method.</b>\n */\n", "func_signal": "public void saveRawToXML()", "code": "{\n    File xmlFile = chooseRawDataFile();\n    if( xmlFile == null ) {\n        return;\n    }\n    if( !xmlFile.exists() ) {\n        xmlFile = ProjectUtils.createFile( xmlFile );\n        if( xmlFile == null || !xmlFile.exists() ) {\n            return;\n        }\n    }\n    ProgressMonitorDialog dialog = new ProgressMonitorDialog( ContextManager.getActiveWorkbenchShell() );\n    SaveRawDataRunnale runnable = new SaveRawDataRunnale( xmlFile, this );\n    try {\n        dialog.run( false, true, runnable );\n    } catch( InvocationTargetException e ) {\n        log.error( e );\n        MessageDialog\n                .openError( ContextManager.getActiveWorkbenchShell(), e.getMessage(), Messages.ErrorHandler_DIALOG_TITLE );\n    } catch( InterruptedException e ) {\n        log.error( e );\n        MessageDialog\n                .openError( ContextManager.getActiveWorkbenchShell(), e.getMessage(), Messages.ErrorHandler_DIALOG_TITLE );\n    }\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\ui\\views\\profiler\\ProfilerView.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * Clears the view (all tabs).\n *\n * @param clearPreferences\n *            <code>true</code> record or the last operation on this tab will be cleaned; <code>false</code> record or the\n *            last operation on this tab will not be cleaned.\n */\n", "func_signal": "public void clearVeiwer( boolean clearPreferences )", "code": "{\n\n    if( _pd != null )\n        // clear display on each tab\n        for( int i = 0; i < _profileTabs.length; i++ )\n            _profileTabs[ i ].clearTab( clearPreferences );\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\ui\\views\\profiler\\ProfilerView.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * Copy FledgeHook.exe to the vm tools folder.\n *\n * @throws IOException\n */\n", "func_signal": "static private void copyFledgeHookFile() throws IOException", "code": "{\n    String[] names = { IConstants.FLEDGE_HOOK_FILE_NAME, IConstants.FLEDGE_HOOK_DLL_FILE_NAME };\n\n    IPath location = new Path( VMToolsUtils.getVMToolsFolderPath() + File.separator );\n\n    InputStream inputStream;\n    OutputStream outputStream;\n    File fledgeFile;\n    byte[] buf;\n    int numbytes;\n    URL bundUrl;\n\n    for( String fledgeFileName : names ) {\n        inputStream = null;\n        outputStream = null;\n\n        try {\n            fledgeFile = location.append( fledgeFileName ).toFile();\n            Bundle bundle = Platform.getBundle( ContextManager.PLUGIN_ID );\n            if( fledgeFile.exists() ) {\n                if( !fledgeFile.delete() ) {\n                    _log.warn( \"Could not replace file \" + fledgeFile ); //$NON-NLS-1$\n                    return;\n                }\n            }\n\n            bundUrl = bundle.getResource( fledgeFileName );\n\n            if( bundUrl == null )\n                continue;\n\n            inputStream = bundUrl.openStream();\n            outputStream = new FileOutputStream( fledgeFile );\n            buf = new byte[ 4096 ];\n            numbytes = 0;\n\n            while( ( numbytes = inputStream.read( buf ) ) > 0 )\n                outputStream.write( buf, 0, numbytes );\n\n        } catch( IOException t ) {\n            _log.error( t.getMessage(), t );\n        } finally {\n            try {\n                if( inputStream != null )\n                    inputStream.close();\n\n                if( outputStream != null )\n                    outputStream.close();\n            } catch( IOException t ) {\n                _log.error( t.getMessage(), t );\n            }\n        }\n    }\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\util\\VMToolsUtils.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * Writes the profile data to <code>file</code>.\n *\n * @param file\n *            Destination file.\n * @throws IDEError\n */\n", "func_signal": "private void saveContents( File file ) throws IDEError", "code": "{\n    if( file == null ) {\n        return;\n    }\n    RIA ria = RIA.getCurrentDebugger();\n    if( ria == null ) {\n        return;\n    }\n    String debugAttachedTo = ria.getDebugAttachTo();\n    if( debugAttachedTo == null || debugAttachedTo.isEmpty() ) {\n        return;\n    }\n\n    PrintStream out = null;\n    try {\n        out = new PrintStream( new FileOutputStream( file ) );\n        out.print( RIA.getString( \"ProfileCSVFileHeader1\" ) ); //$NON-NLS-1$\n        out.print( ria.profileGetTypes()[ _whatToProfile ].getDescription() );\n        out.print( RIA.getString( \"ProfileCSVFileHeader2\" ) ); //$NON-NLS-1$\n        out.println();\n\n        ProfileItem[] modules = sortedElements( _pd, null );\n        for( int i = 0; i < modules.length; i++ ) {\n            ProfileItem module = modules[ i ];\n            Object moduleName = module;\n\n            ProfileItem[] methods = sortedElements( module, null );\n            for( int j = 0; j < methods.length; j++ ) {\n                ProfileItem method = methods[ j ];\n\n                out.print( moduleName );\n                out.print( \", \" ); //$NON-NLS-1$\n                String methodStr = method.toString();\n                Object handle = method.getMethodHandle();\n                if( handle != null && handle instanceof DebugMethod ) {\n                    methodStr = ( (DebugMethod) handle ).getFullName();\n                }\n                out.print( Util.replace( methodStr, \",\", \"\" ) ); //$NON-NLS-1$ //$NON-NLS-2$\n                out.print( \", \" ); //$NON-NLS-1$\n                out.print( method.getTicks() );\n                out.print( \", \" ); //$NON-NLS-1$\n                out.print( method.getCount() );\n                out.println();\n            }\n        }\n        out.close();\n    } catch( IOException e ) {\n        log.error( \"\", e );\n    }\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\ui\\views\\profiler\\ProfilerView.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * Save view content to a XML file.\n * <p>\n * <b>subclasses need to override this method.</b>\n */\n", "func_signal": "public void saveXML()", "code": "{\n    File xmlFile = chooseDataFile();\n    if( xmlFile == null ) {\n        return;\n    }\n    if( !xmlFile.exists() ) {\n        xmlFile = ProjectUtils.createFile( xmlFile );\n        if( xmlFile == null || !xmlFile.exists() ) {\n            return;\n        }\n    }\n    ProgressMonitorDialog dialog = new ProgressMonitorDialog( ContextManager.getActiveWorkbenchShell() );\n    SaveDataRunnale runnable = new SaveDataRunnale( xmlFile, this );\n    try {\n        dialog.run( false, true, runnable );\n    } catch( InvocationTargetException e ) {\n        log.error( e );\n        MessageDialog\n                .openError( ContextManager.getActiveWorkbenchShell(), e.getMessage(), Messages.ErrorHandler_DIALOG_TITLE );\n    } catch( InterruptedException e ) {\n        log.error( e );\n        MessageDialog\n                .openError( ContextManager.getActiveWorkbenchShell(), e.getMessage(), Messages.ErrorHandler_DIALOG_TITLE );\n    }\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\ui\\views\\profiler\\ProfilerView.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * Updates the VM tools on the addition of a VM. If the VM version is greater than the stored version, it is copied. If not,\n * nothing happens\n *\n * VMs are compared based on modification stamp of the Jar.\n *\n * @param vm\n *            the vm that has been added.\n *\n * @throws IOException\n *             Signals that an I/O exception has occurred.\n */\n", "func_signal": "public static void addVMTools( IVMInstall vm ) throws IOException", "code": "{\n    if( ( null == vm ) || !BlackBerryVMInstallType.VM_ID.equals( vm.getVMInstallType().getId() ) ) {\n        return;\n    }\n    // check source attachment\n    LibraryLocation[] libraryLocations = vm.getLibraryLocations();\n    IPath sourcePath;\n    if( libraryLocations != null ) {\n        for( int i = 0; i < libraryLocations.length; i++ ) {\n            sourcePath = libraryLocations[ i ].getSystemLibrarySourcePath();\n            if( sourcePath == null || sourcePath.isEmpty() ) {\n                sourcePath = ImportUtils.getSourceJarPath( libraryLocations[ i ].getSystemLibraryPath() );\n                if( sourcePath.toFile().exists() ) {\n                    _log.trace( \"Source has been attached to library jar \"\n                            + libraryLocations[ i ].getSystemLibraryPath().lastSegment() + \" in JRE \" + vm.getName() );\n                    libraryLocations[ i ].setSystemLibrarySource( sourcePath );\n                }\n            }\n        }\n    }\n    IPath sigToolPath = new Path( vm.getInstallLocation().getAbsolutePath() + IPath.SEPARATOR + IConstants.BIN_FOLD_NAME\n            + IPath.SEPARATOR + IConstants.SIGNATURE_TOOL_FILE_NAME );\n    File sigToolFile = sigToolPath.toFile();\n    if( !sigToolFile.exists() ) {\n        throw new IOException( \"Cannot Find Signature Tool At: \" + sigToolPath.toString() );\n    }\n    IPath javaLoaderPath = new Path( vm.getInstallLocation().getAbsolutePath() + IPath.SEPARATOR + IConstants.BIN_FOLD_NAME\n            + IPath.SEPARATOR + IConstants.JAVA_LOADER_FILE_NAME );\n    File javaLoaderFile = javaLoaderPath.toFile();\n    if( !javaLoaderFile.exists() ) {\n        throw new IOException( \"Cannot Find JavaLoader.exe At: \" + javaLoaderPath.toString() );\n    }\n\n    // if()\n    // copyFledgeHookFile();\n    File fledgeHookFile = null;\n    File fledgeHookDllFile = null;\n    if( OSUtils.isWindows() ) {\n        IPath fledgeHookPath = new Path( vm.getInstallLocation().getAbsolutePath() + IPath.SEPARATOR\n                + IConstants.BIN_FOLD_NAME + IPath.SEPARATOR + IConstants.FLEDGE_HOOK_FILE_NAME );\n        fledgeHookFile = fledgeHookPath.toFile();\n\n        IPath fledgeHookDllPath = new Path( vm.getInstallLocation().getAbsolutePath() + IPath.SEPARATOR\n                + IConstants.BIN_FOLD_NAME + IPath.SEPARATOR + IConstants.FLEDGE_HOOK_DLL_FILE_NAME );\n        fledgeHookDllFile = fledgeHookDllPath.toFile();\n    }\n    File storedSigTool = VMToolsUtils.getSignatureToolPath().toFile();\n    File storedJavaLoader = VMToolsUtils.getJavaLoaderPath().toFile();\n    File storedVersionFile = VMToolsUtils.getVersionFilePath().toFile();\n    File storedFledgeHookFile = null;\n    File storedFledgeHookDllFile = null;\n    if( OSUtils.isWindows() ) {\n        storedFledgeHookFile = VMToolsUtils.getFledgeHookPath( IConstants.FLEDGE_HOOK_FILE_NAME ).toFile();\n        storedFledgeHookDllFile = VMToolsUtils.getFledgeHookPath( IConstants.FLEDGE_HOOK_DLL_FILE_NAME ).toFile();\n    }\n    // Compare the VM version against the stored version, if it is greater, copy the tools to the stored folder.\n    // If the version file does not exist, just copy the tools and create the version file.\n    boolean checkFlag = false;\n    if( OSUtils.isWindows() ) {\n        checkFlag = !storedFledgeHookFile.exists() || !storedFledgeHookDllFile.exists();\n    }\n    if( ( !storedVersionFile.exists() ) || ( VMUtils.getVMVersion( vm ).compareTo( getStoredVersion() ) > 0 )\n            || !storedSigTool.exists() || !storedJavaLoader.exists() || checkFlag ) {\n        FileUtils.copyOverwrite( sigToolFile, storedSigTool );\n        FileUtils.copyOverwrite( javaLoaderFile, storedJavaLoader );\n        if( !storedJavaLoader.canExecute() ) {\n            storedJavaLoader.setExecutable( true );\n        }\n        setStoredVersion( VMUtils.getVMVersion( vm ) );\n        if( OSUtils.isWindows() ) {\n            if( fledgeHookFile.exists() && fledgeHookDllFile.exists() ) {\n                // copy from new cp/bin to vmTools\n                FileUtils.copyOverwrite( fledgeHookFile, storedFledgeHookFile );\n                FileUtils.copyOverwrite( fledgeHookDllFile, storedFledgeHookDllFile );\n            } else {// force copy from bundle to vmTools\n                copyFledgeHookFile();\n            }\n        }\n    }\n\n    if( !OSUtils.isWindows() ) {\n        // For non windows environments\n        File jnilibFileInCP = new Path( vm.getInstallLocation().getAbsolutePath() + IPath.SEPARATOR\n                + IConstants.BIN_FOLD_NAME + IPath.SEPARATOR + IConstants.CP_JNI_LIB_2_FILE_NAME ).toFile();\n        // Currently we do not copy the libRIMUsbJni.jnilib file into the VMTools directory\n        // but in this code blog we make sure if such file exists then it has the executable permission.\n        File storedJniLibFile = VMToolsUtils.getToolPath( IConstants.CP_JNI_LIB_2_FILE_NAME ).toFile();\n        if( storedJniLibFile.exists() && ( !storedJniLibFile.canExecute() ) ) {\n            storedJniLibFile.setExecutable( true );// In VMTools directory\n        } else if( jnilibFileInCP.exists() && ( !jnilibFileInCP.canExecute() ) ) {\n            jnilibFileInCP.setExecutable( true );// In CP\n        }\n    }\n\n    // Copy csk and db file from old vm tool folder (i.e signTool) if it exists to new location\n    File cskFile = VMToolsUtils.getToolPath( IConstants.CSK_FILE_NAME ).toFile();\n    File dbFile = VMToolsUtils.getToolPath( IConstants.DB_FILE_NAME ).toFile();\n    if( !cskFile.exists() || !dbFile.exists() ) {\n        // try to copy the files from old signTool folder if there is\n        File oldCskFile = new File( VMToolsUtils.getOldVMToolsFolderPath() + File.separator + IConstants.CSK_FILE_NAME );\n        File oldDbFile = new File( VMToolsUtils.getOldVMToolsFolderPath() + File.separator + IConstants.DB_FILE_NAME );\n        if( oldCskFile.exists() && oldDbFile.exists() ) {\n            FileUtils.copyOverwrite( oldCskFile, cskFile );\n            FileUtils.copyOverwrite( oldDbFile, dbFile );\n            _log.info( Messages.CodeSigningPrefsPage_MessageDialogMsg8 );\n        }\n    }\n\n    // show BlackBerry getting started page upon first-time Eclipse launch.\n    showStartupPage();\n\n    String eeVersion = VMUtils.getVMVersion( vm );\n    if( OSUtils.isWindows() && is6OrLater( eeVersion ) && ( !WindowsRegistryReader.isVC2008RuntimeInstalled() ) ) {\n        _log.debug( \"Using 6.0+ but missing key FF66E9F6-83E7-3A3E-AF14-8DE9A809A6A4\" );\n        warnMissingVC2008( eeVersion );\n    }\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\util\\VMToolsUtils.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * (non-Javadoc)\n *\n * @see BasicDebugView#clear().\n */\n", "func_signal": "public void clear()", "code": "{\n    // clear the debugger\n    RIA ria = RIA.getCurrentDebugger();\n    if( ria == null ) {\n        return;\n    }\n    try {\n        ria.profileClearData();\n    } catch( IDEError e ) {\n        log.error( e );\n        return;\n    }\n    // clear the display data\n    clearVeiwer( true );\n    _pd = null;\n    setHasData( false );\n    updateToolbar();\n    updateTypeColumeTitle();\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\ui\\views\\profiler\\ProfilerView.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "// ------ Methods in BasicDebugView to be overridden ------\n/**\n * RIM Debug session is terminated.\n *\n * @see BasicDebugView#RIMDebugTerminated().\n */\n", "func_signal": "public void RIMDebugTerminated( ILaunch[] launches )", "code": "{\n    setMessage( Messages.ProcessView_NO_BB_DEBUG_SESSION_MSG, true );\n    _isInitialized = false;\n    this.getSite().getShell().getDisplay().syncExec( new Runnable() {\n\n        @Override\n        public void run() {\n            clear();\n        }\n\n    } );\n    // this.getSite().getShell().getDisplay().asyncExec( new CloseViewJob( this ) );\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\ui\\views\\profiler\\ProfilerView.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * Displays a warning dialog indicating that the signature tool is already running.\n */\n", "func_signal": "private void warnSignatureToolRunning()", "code": "{\n    MessageDialog dialog = new MessageDialog( ContextManager.getActiveWorkbenchShell(),\n            \"Signature Tool is already running...\", null,\n            \"The Signature Tool is already running.  Please exit the tool before running it again.\", MessageDialog.WARNING,\n            new String[] { \"OK\" }, 0 );\n    dialog.open();\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\signing\\ImportCSIFilesAction.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/**\n * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)\n */\n", "func_signal": "public void run( IAction action )", "code": "{\n    if( process != null ) {\n        // If the process is running already...\n        warnSignatureToolRunning();\n    } else {\n        // Open file dialog to allow user select a .csi file\n        FileDialog dialog = new FileDialog( ContextManager.getActiveWorkbenchShell() );\n        String fileDialogLabel = \"Select Signature File\"; //$NON-NLS-1$\n        String[] filters = new String[] { \"*.csi\" };\n        String[] filterNames = new String[] { \"Signature Files (*.csi)\" };\n        dialog.setFilterExtensions( filters );\n        dialog.setFilterNames( filterNames );\n        dialog.setText( fileDialogLabel );\n        final String signatureFileToImport = dialog.open();\n        if( StringUtils.isNotBlank( signatureFileToImport ) ) {\n            // launch signature tool\n            Thread newThread = new Thread() {\n                public void run() {\n                    launchSignatureTool( signatureFileToImport );\n                }\n            };\n            newThread.start();\n        }\n    }\n}", "path": "net.rim.ejde\\src\\net\\rim\\ejde\\internal\\signing\\ImportCSIFilesAction.java", "repo_name": "blackberry/Eclipse-JDE", "stars": 22, "license": "None", "language": "java", "size": 3191}
{"docstring": "/*\n * Closes the MUD Server, after saving the world.\n */\n", "func_signal": "private void shutdown()", "code": "{\n\tworld.saveWorld();\n\tSystem.exit(0);\n}", "path": "world\\Interpreter.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/*\n * Who returns a list of everyone connected to the MUD server.\n * \n * @param player The player object requesting the list.\n */\n", "func_signal": "private void who(Player player)", "code": "{\n\tString result = \"chat Right now, \";\n\tfor (String name : world.getPlayersLoggedOn()) {\n\t\tresult += \" \" + name + \",\";\n\t}\n\tresult = result.substring(0, result.length()-1);\n\tif (world.getPlayersLoggedOn().size() > 1) {\n\t\tresult += \" are connected.\";\n\t} else {\n\t\tresult += \" is connected.\";\n\t}\n\n\tplayer.sendToPlayer(result);\n}", "path": "world\\Interpreter.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/**\n * This Mutters constructor takes in a String to set its chatter text. It\n * also starts it thread to repeat the text every so often.\n * \n * @param chatterText\n *            - The String to set as the chatter text.\n */\n", "func_signal": "public Mutters(String chatterText)", "code": "{\n\tthis.chatterText = chatterText;\n\tthis.thread = new Thread(this);\n\tthis.thread.start();\n}", "path": "world\\Mutters.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/*\n * this method moves a player in the specified direction.\n */\n", "func_signal": "private void move(Player player, Direction dir)", "code": "{\n\tRoom destination = ((Room) player.getLocation())\n\t\t\t.getExitDestination(dir);\n\tif (destination == null) {\n\t\tplayer.sendToPlayer(\"You can't go that way.\");\n\t\treturn;\n\t}\n\n\t((Room) this.world.getDatabaseObject(player.getRoomId())).sendToRoom(\"\"\n\t\t\t+ player.getName() + \" exits \" + dir.toString().toLowerCase()\n\t\t\t+ \".\", player);\n\n\tplayer.moveToRoom(destination);\n\n\tString from = \"\";\n\tif (dir == Direction.NORTH) {\n\t\tfrom = \"south\";\n\t} else if (dir == Direction.EAST) {\n\t\tfrom = \"west\";\n\t} else if (dir == Direction.SOUTH) {\n\t\tfrom = \"north\";\n\t} else if (dir == Direction.WEST) {\n\t\tfrom = \"east\";\n\t} else if (dir == Direction.DOWN) {\n\t\tfrom = \"above\";\n\t} else if (dir == Direction.UP) {\n\t\tfrom = \"below\";\n\t}\n\n\t((Room) this.world.getDatabaseObject(player.getRoomId())).sendToRoom(\"\"\n\t\t\t+ player.getName() + \" enters from \" + from + \".\", player);\n}", "path": "world\\Interpreter.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/**\n * processCommand(Player,Sting) will take in a player that is the player\n * that called the command and a String that will hold the text that the\n * player entered. It will take the String and search the keys of the\n * HashMap and if it is found will run the command value associated with it.\n * If not it will send it to the room that the player is in and search its\n * HashMap for the command.\n * \n * @param player\n *            Player object that represents the player that sent the command\n * @param textCommand\n *            The string that the player entered\n */\n", "func_signal": "public synchronized void processCommand(Player player, String textCommand)", "code": "{\n\tScanner scanner = new Scanner(textCommand);\n\tif (scanner.hasNext()) {\n\t\tString command = scanner.next().trim().toLowerCase();\n\n\t\t// Say\n\t\tif (command.equals(\"say\")) {\n\t\t\tif (scanner.hasNextLine()) {\n\t\t\t\tthis.say(player, scanner.nextLine().trim());\n\t\t\t} else {\n\t\t\t\tplayer.sendToPlayer(\"Say what?\");\n\t\t\t}\n\n\t\t\t// Emote\n\t\t} else if (command.equals(\"emote\")) {\n\t\t\tif (scanner.hasNextLine()) {\n\t\t\t\t((Room) player.getLocation()).sendToRoom(player.getName()\n\t\t\t\t\t\t+ \" \" + scanner.nextLine().trim());\n\t\t\t} else {\n\t\t\t\tplayer.sendToPlayer(\"Emote what?\");\n\t\t\t}\n\n\t\t\t// Social Commands\n\t\t} else if (command.equals(\"rude\")) {\n\t\t\tif (scanner.hasNextLine()) {\n\t\t\t\tString target = scanner.next();\n\n\t\t\t\tfor (Movable mov : ((Room) player.getLocation())\n\t\t\t\t\t\t.listMovables()) {\n\t\t\t\t\tif (mov.getName().equalsIgnoreCase(target)) {\n\t\t\t\t\t\t((Room) player.getLocation()).sendToRoom(player\n\t\t\t\t\t\t\t\t.getName()\n\t\t\t\t\t\t\t\t+ \" makes a rude gesture at \" + target + \"!\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t((Room) player.getLocation()).sendToRoom(player.getName()\n\t\t\t\t\t\t+ \" makes a rude gesture!\");\n\n\t\t\t}\n\n\t\t\t// Commands\n\t\t} else if (command.equals(\"commands\")) {\n\t\t\tthis.sendCommandDescriptions(player);\n\n\t\t\t// Who\n\t\t} else if (command.equals(\"who\")) {\n\t\t\tthis.who(player);\n\n\t\t\t// Save\n\t\t} else if (command.equals(\"save\")) {\n\t\t\tif (world.savePlayer(player)) {\n\t\t\t\tplayer.sendToPlayer(\"Player saved.\");\n\t\t\t}\n\n\t\t\t// Describme\n\t\t} else if (command.equals(\"describeme\")) {\n\t\t\tif (scanner.hasNext()) {\n\t\t\t\tString description = scanner.nextLine().trim();\n\t\t\t\tplayer.setDescription(description);\n\t\t\t} else {\n\t\t\t\tplayer\n\t\t\t\t\t\t.sendToPlayer(\"The describeme command should be followed by a description of yourself.\");\n\t\t\t}\n\t\t\t// Tell\n\t\t} else if (command.equals(\"tell\")) {\n\t\t\tif (scanner.hasNext()) {\n\t\t\t\tString otherPlayerName = scanner.next().trim();\n\t\t\t\tif (scanner.hasNextLine()) {\n\t\t\t\t\tif (world.playerIsLoggedOn(otherPlayerName)) {\n\t\t\t\t\t\tthis.tell(player, world.getPlayer(otherPlayerName),\n\t\t\t\t\t\t\t\tscanner.nextLine().trim());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tplayer.sendToPlayer(otherPlayerName\n\t\t\t\t\t\t\t\t+ \" is not logged on.\");\n\t\t\t\t\t}\n\t\t\t\t} else\n\t\t\t\t\tplayer.sendToPlayer(\"Tell them what?\");\n\t\t\t} else\n\t\t\t\tplayer.sendToPlayer(\"Tell who... What?\");\n\n\t\t\t// Look\n\t\t} else if (command.equals(\"look\")) {\n\t\t\tif (scanner.hasNext()) {\n\t\t\t\tlook(player, scanner.nextLine().trim());\n\t\t\t} else {\n\t\t\t\tplayer.sendToPlayer(((Room) player.getLocation())\n\t\t\t\t\t\t.generateDescription());\n\t\t\t}\n\t\t\t// Shutdown\n\n\t\t} else if (command.equals(\"inspect\")) {\n\t\t\tif (scanner.hasNext()) {\n\t\t\t\tinspect(player, scanner.nextLine().trim());\n\t\t\t} else {\n\t\t\t\tplayer.sendToPlayer(\"Inspect what?\");\n\t\t\t}\n\n\t\t} else if (command.equals(\"shutdown\")\n\t\t\t\t&& player.getName().equals(\"administrator\")) {\n\t\t\tshutdown();\n\n\t\t\t// Inventory\n\t\t} else if (command.equals(\"inventory\") || command.equals(\"i\")) {\n\t\t\tplayer.sendToPlayer(player.inspect());\n\t\t\t;\n\n\t\t\t// Score\n\t\t} else if (command.equals(\"score\")) {\n\t\t\tplayer.sendToPlayer(player.getStats());\n\n\t\t\t// Drop\n\t\t} else if (command.equals(\"drop\")) {\n\t\t\tif (scanner.hasNext()) {\n\t\t\t\tString itemName = scanner.next().trim();\n\t\t\t\tplayer.dropGear(itemName.toLowerCase());\n\t\t\t} else {\n\t\t\t\tplayer.sendToPlayer(\"Drop what?\");\n\t\t\t}\n\n\t\t\t// Use\n\t\t} else if (command.equals(\"use\")) {\n\t\t\tif (scanner.hasNext()) {\n\t\t\t\tString itemName = scanner.next().trim();\n\t\t\t\tplayer.use(itemName.toLowerCase());\n\t\t\t} else {\n\t\t\t\tplayer.sendToPlayer(\"Use what?\");\n\t\t\t}\n\t\t\t// Get\n\t\t} else if (command.equals(\"get\")) {\n\t\t\tif (scanner.hasNext()) {\n\t\t\t\tString itemName = scanner.next().trim().toLowerCase();\n\t\t\t\tif (scanner.hasNext()) {\n\t\t\t\t\tString target = scanner.next().trim().toLowerCase();\n\t\t\t\t\tif (world.playerExists(target)\n\t\t\t\t\t\t\t&& world.playerIsLoggedOn(target)) {\n\t\t\t\t\t\tif (!world.getPlayer(target).giveGear(\n\t\t\t\t\t\t\t\tworld.getPlayer(target), itemName,\n\t\t\t\t\t\t\t\tplayer.getName())) {\n\t\t\t\t\t\t\tplayer.sendToPlayer(target\n\t\t\t\t\t\t\t\t\t+ \" does not have that item.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (world.mobileExists(target)) {\n\t\t\t\t\t\tif (!world.getMobile(target).giveGear(\n\t\t\t\t\t\t\t\tworld.getMobile(target), itemName,\n\t\t\t\t\t\t\t\tplayer.getName())) {\n\t\t\t\t\t\t\tplayer.sendToPlayer(target\n\t\t\t\t\t\t\t\t\t+ \" does not have that item.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tfor (Gear roomItem : ((Room) player.getLocation())\n\t\t\t\t\t\t\t.listGear()) {\n\t\t\t\t\t\tif (roomItem instanceof GearContainer\n\t\t\t\t\t\t\t\t&& target.equals(roomItem.getName()\n\t\t\t\t\t\t\t\t\t\t.toLowerCase())) {\n\t\t\t\t\t\t\tif (((GearContainer) roomItem).giveGear(null,\n\t\t\t\t\t\t\t\t\titemName, player.getName())) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tplayer.sendToPlayer(\"Does \" + target\n\t\t\t\t\t\t\t\t\t\t+ \" have that item?\");\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (Gear roomItem : ((Room) player.getLocation())\n\t\t\t\t\t\t\t.listGear()) {\n\t\t\t\t\t\tif (roomItem.getName().equalsIgnoreCase(itemName)) {\n\t\t\t\t\t\t\tif (roomItem instanceof GearContainer\n\t\t\t\t\t\t\t\t\t&& !((GearContainer) roomItem)\n\t\t\t\t\t\t\t\t\t\t\t.canBeCarried()) {\n\t\t\t\t\t\t\t\tplayer.sendToPlayer(itemName\n\t\t\t\t\t\t\t\t\t\t+ \" cannot be carried.\");\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tplayer.addGear(roomItem);\n\t\t\t\t\t\t\t((Room) player.getLocation()).remove(roomItem);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tplayer.sendToPlayer(itemName + \" is not in the room.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tplayer.sendToPlayer(\"Get what?\");\n\t\t\t}\n\n\t\t\t// Give\n\t\t} else if (command.equals(\"give\")) {\n\t\t\tif (scanner.hasNext()) {\n\t\t\t\tString itemName = scanner.next().trim().toLowerCase();\n\t\t\t\tif (scanner.hasNext()) {\n\t\t\t\t\tString target = scanner.next().trim().toLowerCase();\n\t\t\t\t\tplayer.giveGear(player, itemName, target);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tplayer.sendToPlayer(\"Give \" + itemName\n\t\t\t\t\t\t\t+ \" to who or what?\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tplayer.sendToPlayer(\"Give what?\");\n\t\t\t}\n\n\t\t\t// Set Class\n\t\t} else if (command.equals(\"setclass\")) {\n\t\t\tif (scanner.hasNext()) {\n\t\t\t\tString characterClass = scanner.next().trim().toLowerCase();\n\t\t\t\tif (characterClass.equalsIgnoreCase(\"gunner\")) {\n\t\t\t\t\tplayer.setCharacterClass(Gunner.getInstance());\n\t\t\t\t} else if (characterClass.equalsIgnoreCase(\"dreadnaught\")) {\n\t\t\t\t\tplayer.setCharacterClass(Dreadnaught.getInstance());\n\t\t\t\t} else {\n\t\t\t\t\tplayer.sendToPlayer(characterClass\n\t\t\t\t\t\t\t+ \" is not a character class.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tplayer\n\t\t\t\t\t\t.sendToPlayer(\"Please type a class name: Gunner or Dreadnaught.\");\n\t\t\t}\n\n\t\t\t// Movement\n\t\t} else if (command.equals(\"north\") || command.equals(\"n\")) {\n\t\t\tmove(player, Direction.NORTH);\n\t\t} else if (command.equals(\"south\") || command.equals(\"s\")) {\n\t\t\tmove(player, Direction.SOUTH);\n\t\t} else if (command.equals(\"east\") || command.equals(\"e\")) {\n\t\t\tmove(player, Direction.EAST);\n\t\t} else if (command.equals(\"west\") || command.equals(\"w\")) {\n\t\t\tmove(player, Direction.WEST);\n\t\t} else if (command.equals(\"up\") || command.equals(\"u\")) {\n\t\t\tmove(player, Direction.UP);\n\t\t} else if (command.equals(\"down\") || command.equals(\"d\")) {\n\t\t\tmove(player, Direction.DOWN);\n\n\t\t\t// Combat related.\n\t\t} else if ((command.equals(\"attack\") || command.equals(\"kill\"))\n\t\t\t\t|| (command.equals(\"wound\") || command.equals(\"snipe\"))) {\n\t\t\tif (player.getFighting() == true) {\n\t\t\t\tplayer\n\t\t\t\t\t\t.sendToPlayer(\"You cannot attack because you are already in battle\");\n\t\t\t}\n\t\t\tif (scanner.hasNext()) {\n\t\t\t\tString toBeAttacked = scanner.next().trim();\n\n\t\t\t\tfor (Movable i : ((Room) player.getLocation())\n\t\t\t\t\t\t.listMovables()) {\n\t\t\t\t\tif (i.getName().equalsIgnoreCase(toBeAttacked)) {\n\n\t\t\t\t\t\tif (i.getFighting()) {\n\t\t\t\t\t\t\tplayer.sendToPlayer(i.getName()\n\t\t\t\t\t\t\t\t\t+ \" is already in battle\");\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Alternate Attack Types\n\t\t\t\t\t\tif (command.equalsIgnoreCase(\"snipe\")) {\n\t\t\t\t\t\t\tif (player.getCharacterClass().toString()\n\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(\"Gunner\")) {\n\t\t\t\t\t\t\t\t((Gunner) player.getCharacterClass())\n\t\t\t\t\t\t\t\t\t\t.Snipe(player, i);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tplayer\n\t\t\t\t\t\t\t\t\t\t.sendToPlayer(\"You aren't trained in sniping!\");\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (command.equals(\"wound\")) {\n\t\t\t\t\t\t\tif (player.getCharacterClass().toString()\n\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(\"dreadnaught\")) {\n\t\t\t\t\t\t\t\t((Dreadnaught) player.getCharacterClass())\n\t\t\t\t\t\t\t\t\t\t.Wound(player, i);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tplayer\n\t\t\t\t\t\t\t\t\t\t.sendToPlayer(\"You aren't trained to Wound like that!\");\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tkill(player, i);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tplayer.sendToPlayer(\"Player, \" + toBeAttacked\n\t\t\t\t\t\t+ \" was not found in the room.\");\n\n\t\t\t} else {\n\t\t\t\tplayer\n\t\t\t\t\t\t.sendToPlayer(\"Who do you want to attack? (Attack <victim>)\");\n\t\t\t}\n\n\t\t} else {\n\t\t\tplayer.sendToPlayer(command + \" is not understood.\");\n\t\t}\n\n\t}\n}", "path": "world\\Interpreter.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/**\n * waitForRespawn is called whenever a player(s) kill a MOB. It will start a\n * timer that will wait ten seconds then it will call a deadTimerListener.\n * The listener will move the MOB back to wherever it was spawned when the\n * server started. It will also reset the hp back to its maximum.\n */\n", "func_signal": "public void waitForRespawn()", "code": "{\n\t((Room) mySelf.getLocation()).refreshPlayers();\n\t((Room) mySelf.getLocation()).refreshMobiles();\n\tTimer deadTimer = new Timer(10000, new DeadTimerListener());\n\tdeadTimer.setRepeats(false);\n\tdeadTimer.start();\n}", "path": "world\\Mobile.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/*\n * Say allows a player to talk to the other players in the room.\n * \n * @param player The player speaking to everyone else in the room.\n * \n * @param message The player's message to others.\n */\n", "func_signal": "private void say(Player player, String message)", "code": "{\n\t((Room) this.world.getDatabaseObject(player.getRoomId()))\n\t\t\t.sendToRoom(\"chat \" + player.getName() + \" says: \" + message);\n}", "path": "world\\Interpreter.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/*\n * This method will send a mobile \"looks at \" message to the room.\n * \n * @param sent - String that was sent to mobile.\n * \n * @param mob - Mobile that will send the looks at message.\n */\n", "func_signal": "@Override\npublic void reactToSend(String sent, Mobile mob)", "code": "{\n\tScanner sentStuff = new Scanner(sent);\n\tString aPlayer = sentStuff.next().trim();\n\tif (World.getInstance().playerExists(aPlayer)) {\n\t\t((Room) mob.getLocation()).sendToRoom(\"\" + mob.getName()\n\t\t\t\t+ \" looks at \" + aPlayer + \".\");\n\t}\n}", "path": "world\\Mutters.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "// This private constructor initializes the command list, it is private so\n// Interpreter can keep its singleton status.\n", "func_signal": "private Interpreter()", "code": "{\n\n\tthis.world = World.getInstance();\n\n\tcommandList = new HashMap<String, String>();\n\tcommandList\n\t\t\t.put(\n\t\t\t\t\t\"look\",\n\t\t\t\t\t\"- look: shows description of the room that the player is in, \"\n\t\t\t\t\t\t\t+ \"or if an argument is provided, such as an item/player/MOB in the room, \"\n\t\t\t\t\t\t\t+ \"it should provide the description of said item/player/MOB). \"\n\t\t\t\t\t\t\t+ \"This command gives a 360 degree report of the environment \"\n\t\t\t\t\t\t\t+ \"(The player is not assumed to be looking in a specific Direction.\");\n\tcommandList.put(\"north\", \"- north: moves the player North.\");\n\tcommandList.put(\"south\", \"- south: moves the player South.\");\n\tcommandList.put(\"east\", \"- east: moves player east.\");\n\tcommandList.put(\"west\", \"- west: moves player west.\");\n\tcommandList.put(\"up\", \"- up: moves player up.\");\n\tcommandList.put(\"down\", \"- down: moves player down.\");\n\tcommandList.put(\"n\", \"- n: moves the player North.\");\n\tcommandList.put(\"s\", \"- s: moves the player South.\");\n\tcommandList.put(\"e\", \"- e: moves player east.\");\n\tcommandList.put(\"w\", \"- w: moves player west.\");\n\tcommandList.put(\"u\", \"- u: moves player up.\");\n\tcommandList.put(\"d\", \"- d: moves player down.\");\n\tcommandList\n\t\t\t.put(\n\t\t\t\t\t\"ooc\",\n\t\t\t\t\t\"- ooc <message>: Out of Character channelthe basic MUD wide chat commandmessage goes to everyone currently connected.\");\n\tcommandList.put(\"who\", \"- who: lists all players that are logged in.\");\n\tcommandList\n\t\t\t.put(\n\t\t\t\t\t\"say\",\n\t\t\t\t\t\"- say: sends a message to all players in the same room as the player executing the command.\");\n\tcommandList\n\t\t\t.put(\"tell\",\n\t\t\t\t\t\"- tell <player> <message>: sends a message to only the player targeted.\");\n\tcommandList.put(\"score\",\n\t\t\t\"- score: displays the players current status/information.\");\n\tcommandList\n\t\t\t.put(\"give\",\n\t\t\t\t\t\"- give <item> <player>: gives item in your inventory to player/MOB.\");\n\tcommandList\n\t\t\t.put(\n\t\t\t\t\t\"get\",\n\t\t\t\t\t\"- get <item>: gets item from room. Also: get <item> <target>: gets item from player/MOB/item.\");\n\tcommandList.put(\"inventory\",\n\t\t\t\"- inventory: lists the items that you are carrying.\");\n\tcommandList.put(\"i\", \"- i: lists the items that you are carrying.\");\n\tcommandList.put(\"drop\",\n\t\t\t\"- drop <item>: drops an item from your inventory to the room.\");\n\tcommandList.put(\"use\",\n\t\t\t\"- use <item>: executes the items default behavior.\");\n\tcommandList\n\t\t\t.put(\"quit\",\n\t\t\t\t\t\"- quit: allows a player to exit the system. Will not shut MUD down.\");\n\tcommandList\n\t\t\t.put(\n\t\t\t\t\t\"shutdown\",\n\t\t\t\t\t\"- shutdown: saves the MUDs data and then shuts the system down. (only game administrator's can use this.\");\n\tcommandList.put(\"save\", \"- save: saves player state in the game.\");\n\tcommandList\n\t\t\t.put(\"describeme\",\n\t\t\t\t\t\"- describeme <description>: sets your (the player's) description.\");\n\tcommandList.put(\"commands\",\n\t\t\t\"- commands: lists all the commands useable by a player.\");\n\tcommandList\n\t\t\t.put(\n\t\t\t\t\t\"inspect\",\n\t\t\t\t\t\"- inspect <player,mob,item>: lists all the items being held or contained in a player, mob, or other item.\");\n\n\tcommandList.put(\"attack\",\n\t\t\t\"- attack <mob>: initializes combat with a MOB (same as kill).\");\n\tcommandList.put(\"kill\", \"- kill <mob>: initializes combat with a MOB (same as attack).\");\n\tcommandList.put(\"snipe\",\n\t\t\t\"- snipe <mob>: initializes sniper attack on mob, is a gunner command only.\");\n\tcommandList.put(\"wound\",\n\t\t\t\"- wound <mob>: initializes wound attack on mob, is a dreadnaught command only.\");\n\tcommandList.put(\"setclass\",\n\t\t\t\"- setclass <class>: (Gunner or Dreadnaught.)\");\n\tcommandList.put(\"new\", \"- new: creates new player on log in.\");\n}", "path": "world\\Interpreter.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/**\n * resolveAttack runs calculations to determine whether or not the Mobile\n * hits an opponent in combat. This is done in two stages - An attack roll\n * and a damage roll.\n * \n * @param enemy\n *            - The Movable to attack.\n */\n", "func_signal": "public void resolveAttack(Movable enemy)", "code": "{\n\n\t// Attack Roll\n\tint attackRoll = (int) (Math.random() * 10) + this.agility\n\t\t\t- enemy.getStat(Trait.AGILITY);\n\tif (attackRoll < 3) {\n\t\tthis.sendToPlayer(\"You miss by \" + (5 - attackRoll));\n\t\tenemy.sendToPlayer(this.getName() + \" misses you.\");\n\t}\n\n\t// Damage Roll\n\telse {\n\t\tint damage = Math.max(1, this.strength\n\t\t\t\t- (((Player) enemy).getStat(Trait.TOUGHNESS)/3)\n\t\t\t\t- ((Player) enemy).getArmor().getDamageReduction());\n\t\tint newHP = enemy.getStat(Trait.HITPOINTS) - damage;\n\t\tenemy.setStat(newHP, Trait.HITPOINTS);\n\t\tenemy.sendToPlayer(this.getName() + \" damages you for \" + damage\n\t\t\t\t+ \" hitpoints!\");\n\t}\n\n}", "path": "world\\Mobile.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/**\n * This run() method runs every 20 seconds and repeats the chatter text of\n * the mutter to the room. It then leaves the room if its random number\n * equals an exit that exits in the room.\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n\ttry {\n\t\twhile (true) {\n\n\t\t\tsynchronized (World.getInstance().getLockObject()) {\n\t\t\t\twhile (World.getInstance().threadsLocked()) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tWorld.getInstance().getLockObject().wait();\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.mobile != null) {\n\n\t\t\t\tRoom currentRoom = (Room) mobile.getLocation();\n\t\t\t\tif (currentRoom == null) {\n\t\t\t\t\tSystem.out.println(\"Mutter room not sent.\");\n\t\t\t\t}\n\n\t\t\t\t((Room) mobile.getLocation()).sendToRoom(chatterText);\n\n\t\t\t\tboolean moved = false;\n\t\t\t\twhile (!moved) {\n\t\t\t\t\tRandom timeToMove = new Random();\n\t\t\t\t\tint moveNum = timeToMove.nextInt(4);\n\n\t\t\t\t\tswitch (moveNum) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tif (((Room) this.mobile.getLocation())\n\t\t\t\t\t\t\t\t.getExitDestination(Direction.NORTH) != null) {\n\n\t\t\t\t\t\t\t((Room) this.mobile.getLocation())\n\t\t\t\t\t\t\t\t\t.sendToRoom(this.mobile.getName()\n\t\t\t\t\t\t\t\t\t\t\t+ \" exits North.\");\n\t\t\t\t\t\t\tthis.mobile.moveToRoom(((Room) this.mobile\n\t\t\t\t\t\t\t\t\t.getLocation())\n\t\t\t\t\t\t\t\t\t.getExitDestination(Direction.NORTH));\n\t\t\t\t\t\t\t((Room) this.mobile.getLocation())\n\t\t\t\t\t\t\t\t\t.sendToRoom(this.mobile.getName()\n\t\t\t\t\t\t\t\t\t\t\t+ \" arrives from the South.\");\n\t\t\t\t\t\t\tmoved = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tif (((Room) this.mobile.getLocation())\n\t\t\t\t\t\t\t\t.getExitDestination(Direction.SOUTH) != null) {\n\n\t\t\t\t\t\t\t((Room) this.mobile.getLocation())\n\t\t\t\t\t\t\t\t\t.sendToRoom(this.mobile.getName()\n\t\t\t\t\t\t\t\t\t\t\t+ \" exits South.\");\n\t\t\t\t\t\t\tthis.mobile.moveToRoom(((Room) this.mobile\n\t\t\t\t\t\t\t\t\t.getLocation())\n\t\t\t\t\t\t\t\t\t.getExitDestination(Direction.SOUTH));\n\t\t\t\t\t\t\t((Room) this.mobile.getLocation())\n\t\t\t\t\t\t\t\t\t.sendToRoom(this.mobile.getName()\n\t\t\t\t\t\t\t\t\t\t\t+ \" arrives from the North.\");\n\t\t\t\t\t\t\tmoved = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tif (((Room) this.mobile.getLocation())\n\t\t\t\t\t\t\t\t.getExitDestination(Direction.EAST) != null) {\n\n\t\t\t\t\t\t\t((Room) this.mobile.getLocation())\n\t\t\t\t\t\t\t\t\t.sendToRoom(this.mobile.getName()\n\t\t\t\t\t\t\t\t\t\t\t+ \" exits East.\");\n\t\t\t\t\t\t\tthis.mobile.moveToRoom(((Room) this.mobile\n\t\t\t\t\t\t\t\t\t.getLocation())\n\t\t\t\t\t\t\t\t\t.getExitDestination(Direction.EAST));\n\t\t\t\t\t\t\t((Room) this.mobile.getLocation())\n\t\t\t\t\t\t\t\t\t.sendToRoom(this.mobile.getName()\n\t\t\t\t\t\t\t\t\t\t\t+ \" arrives from the West.\");\n\t\t\t\t\t\t\tmoved = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tif (((Room) this.mobile.getLocation())\n\t\t\t\t\t\t\t\t.getExitDestination(Direction.WEST) != null) {\n\n\t\t\t\t\t\t\t((Room) this.mobile.getLocation())\n\t\t\t\t\t\t\t\t\t.sendToRoom(this.mobile.getName()\n\t\t\t\t\t\t\t\t\t\t\t+ \" exits West.\");\n\t\t\t\t\t\t\tthis.mobile.moveToRoom(((Room) this.mobile\n\t\t\t\t\t\t\t\t\t.getLocation())\n\t\t\t\t\t\t\t\t\t.getExitDestination(Direction.WEST));\n\t\t\t\t\t\t\t((Room) this.mobile.getLocation())\n\t\t\t\t\t\t\t\t\t.sendToRoom(this.mobile.getName()\n\t\t\t\t\t\t\t\t\t\t\t+ \" arrives from the East.\");\n\t\t\t\t\t\t\tmoved = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tThread.sleep(20000);\n\t\t}\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "world\\Mutters.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/*\n * This method lets a player look at another player, item, or mobile.\n */\n", "func_signal": "private void look(Player player, String objName)", "code": "{\n\n\tfor (DatabaseObject item : world.getDatabaseObjects()) {\n\t\tif (item.getName().toLowerCase().equals(\n\t\t\t\tobjName.toLowerCase().trim())) {\n\t\t\tplayer.sendToPlayer(item.getDescription());\n\t\t\treturn;\n\t\t}\n\t}\n\n\tplayer.sendToPlayer(objName + \" is not here.\");\n}", "path": "world\\Interpreter.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/*\n * this method inspectwS the contents of an item container.\n */\n", "func_signal": "private void inspect(Player player, String objName)", "code": "{\n\tfor (DatabaseObject item : world.getDatabaseObjects()) {\n\t\tif (item.getName().toLowerCase().equals(\n\t\t\t\tobjName.toLowerCase().trim())\n\t\t\t\t&& (item instanceof world.GearList)) {\n\t\t\tplayer.sendToPlayer(((GearList) item).inspect());\n\t\t\treturn;\n\t\t}\n\t}\n\n\tplayer\n\t\t\t.sendToPlayer(objName\n\t\t\t\t\t+ \" does not exist or cannot be inspected.\");\n}", "path": "world\\Interpreter.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/*\n * Tell sends a message between two players, visible only to them.\n * \n * @param player The initiating player of the whisper\n * \n * @param otherPlayer The recipient of the whisper\n * \n * @param message The actual text of the whisper\n */\n", "func_signal": "private void tell(Player player, Player otherPlayer, String message)", "code": "{\n\tif (otherPlayer != null) {\n\t\totherPlayer.sendToPlayer(\"chat \" + player.getName()\n\t\t\t\t+ \" whispers : \" + message);\n\t\tplayer.sendToPlayer(\"chat You whisper to \" + otherPlayer.getName()\n\t\t\t\t+ \": \" + message);\n\t} else\n\t\tplayer.sendToPlayer(\"Player does not exist.\");\n}", "path": "world\\Interpreter.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/**\n * addText method will add text to the end of the text model string and\n * notify observers.\n * \n * @param text\n *            String to add to end of text\n */\n", "func_signal": "public void addText(String text)", "code": "{\n\ttextModel += text;\n\tsetChanged();\n\tthis.notifyObservers(new CombatCommand(text));\n}", "path": "model\\MudModel.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/**\n * addChatText method will add text to the end of the chat text model string\n * and notifies observers.\n * \n * @param text\n *            String to add to end of text\n */\n", "func_signal": "public void addChatText(String text)", "code": "{\n\tchatTextModel += text;\n\tsetChanged();\n\tthis.notifyObservers(new ChatCommand(text));\n}", "path": "model\\MudModel.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/**\n * This method returns a list of the available command descriptions.\n * \n * @return A List<String> of the available command description.\n */\n", "func_signal": "public List<String> getCommandDescriptions()", "code": "{\n\tList<String> commands = new ArrayList<String>();\n\n\tfor (String command : this.commandList.values()) {\n\t\tcommands.add(command);\n\t}\n\tCollections.sort(commands);\n\treturn commands;\n}", "path": "world\\Interpreter.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/**\n * A Mobile needs only a String when constructed (which becomes the Mobile's\n * name) as default values are placed for other relevant information.\n * Ideally, a Mobile should be further customized using the various setters.\n * The constructor does create some default values for the mobiles stats.\n * \n * It is worth noting that Mobile and Player stats appear identical, but can\n * be different. Players rely on armor and toughness - Mobs only use\n * toughness to reduce damage, so this might be higher. Similarly, strength\n * might be higher to account for a lack of weapons.\n * \n * \n * @param name\n *            A String that represents the name of the new Mobile.\n * \n */\n", "func_signal": "public Mobile(String name)", "code": "{\n\tsuper(name);\n\tmyStrategy = new Greets();\n\tthis.gearList = new GearContainer(name + \"'s gear\", name + \"'s gear:\",\n\t\t\t20, false);\n\tthis.agility = 5;\n\tthis.hitPoints = 30;\n\tthis.intellect = 5;\n\tthis.strength = 4;\n\tthis.technique = 4;\n\tthis.toughness = 4;\n\tthis.maxHitPoints = 30;\n\tthis.maxTechnique = 4;\n\tthis.gearList.setLocation(this);\n\tstartingLoc = null;\n\tmySelf = this;\n\tthis.isFighting = false;\n}", "path": "world\\Mobile.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/*\n * This method sends command descriptions to the player requesting them.\n */\n", "func_signal": "private void sendCommandDescriptions(Player player)", "code": "{\n\tString result = \"\";\n\tfor (String command : this.commandList.values()) {\n\t\tresult += command + \"\\n\";\n\t\tresult += command + '\\n';\n\t}\n\tplayer.sendToPlayer(result);\n}", "path": "world\\Interpreter.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "// This private constructor along with the private static MudModel variable\n// and public static MudModle method allows MudModel to exist as a singleton\n", "func_signal": "private MudModel()", "code": "{\n\ttextModel = \"\";\n\tchatTextModel = \"\";\n}", "path": "model\\MudModel.java", "repo_name": "thezboe/Wasteland-MUD", "stars": 19, "license": "None", "language": "java", "size": 467}
{"docstring": "/**\n * Finds all the views we need and configure them properly.\n */\n", "func_signal": "private void setupViews()", "code": "{\n    mDragLayer = (DragLayer) findViewById(R.id.drag_layer);\n    final DragLayer dragLayer = mDragLayer;\n\n    mWorkspace = (Workspace) dragLayer.findViewById(R.id.workspace);\n    final Workspace workspace = mWorkspace;\n\n    mDrawer = (SlidingDrawer) dragLayer.findViewById(R.id.drawer);\n    final SlidingDrawer drawer = mDrawer;\n\n    mAllAppsGrid = (AllAppsGridView) drawer.getContent();\n    final AllAppsGridView grid = mAllAppsGrid;\n\n    final DeleteZone deleteZone = (DeleteZone) dragLayer.findViewById(R.id.delete_zone);\n\n    mHandleView = (HandleView) drawer.findViewById(R.id.all_apps);\n    mHandleView.setLauncher(this);\n    mHandleIcon = (TransitionDrawable) mHandleView.getDrawable();\n    mHandleIcon.setCrossFadeEnabled(true);\n\n    drawer.lock();\n    final DrawerManager drawerManager = new DrawerManager();\n    drawer.setOnDrawerOpenListener(drawerManager);\n    drawer.setOnDrawerCloseListener(drawerManager);\n    drawer.setOnDrawerScrollListener(drawerManager);\n\n    grid.setTextFilterEnabled(false);\n    grid.setDragger(dragLayer);\n    grid.setLauncher(this);\n\n    workspace.setOnLongClickListener(this);\n    workspace.setDragger(dragLayer);\n    workspace.setLauncher(this);\n    loadWallpaper();\n\n    deleteZone.setLauncher(this);\n    deleteZone.setDragController(dragLayer);\n    deleteZone.setHandle(mHandleView);\n\n    dragLayer.setIgnoredDropTarget(grid);\n    dragLayer.setDragScoller(workspace);\n    dragLayer.setDragListener(deleteZone);\n    \n    //irrenhaus@xda\n    OrientationEventListener orientation = new OrientationEventListener(this) {\n\t\t\t@Override\n\t\t\tpublic void onOrientationChanged(int orientation) {\n\t\t\t\tWindowManager mgr = (WindowManager) Launcher.this.getSystemService(Context.WINDOW_SERVICE);\n\n\t\t\t\tif(mgr.getDefaultDisplay().getOrientation() == 1) //port\n\t\t\t\t\tLauncher.this.mAllAppsGrid.setNumColumns(com.android.launcher.extended.data.ExtendedSettings.Home_AppGridColumns(Launcher.this));\n\t\t\t\telse if(mgr.getDefaultDisplay().getOrientation() == 2) //land\n\t\t\t\t\tLauncher.this.mAllAppsGrid.setNumColumns(com.android.launcher.extended.data.ExtendedSettings.Home_AppGridColumns(Launcher.this)+1);\n\t\t\t}\n    };\n    \n}", "path": "src\\com\\android\\launcher\\Launcher.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/**\n * Upgrade existing clock and photo frame widgets into their new widget\n * equivalents. This method allocates appWidgetIds, and then hands off to\n * LauncherAppWidgetBinder to finish the actual binding.\n */\n", "func_signal": "private void convertWidgets(SQLiteDatabase db)", "code": "{\n    final int[] bindSources = new int[] {\n            Favorites.ITEM_TYPE_WIDGET_CLOCK,\n            Favorites.ITEM_TYPE_WIDGET_PHOTO_FRAME,\n    };\n    \n    final ArrayList<ComponentName> bindTargets = new ArrayList<ComponentName>();\n    bindTargets.add(new ComponentName(\"com.android.alarmclock\",\n            \"com.android.alarmclock.AnalogAppWidgetProvider\"));\n    bindTargets.add(new ComponentName(\"com.android.camera\",\n            \"com.android.camera.PhotoAppWidgetProvider\"));\n    \n    final String selectWhere = buildOrWhereString(Favorites.ITEM_TYPE, bindSources);\n    \n    Cursor c = null;\n    boolean allocatedAppWidgets = false;\n    \n    db.beginTransaction();\n    try {\n        // Select and iterate through each matching widget\n        c = db.query(TABLE_FAVORITES, new String[] { Favorites._ID },\n                selectWhere, null, null, null, null);\n        \n        if (LOGD) Log.d(LOG_TAG, \"found upgrade cursor count=\"+c.getCount());\n        \n        final ContentValues values = new ContentValues();\n        while (c != null && c.moveToNext()) {\n            long favoriteId = c.getLong(0);\n            \n            // Allocate and update database with new appWidgetId\n            try {\n                int appWidgetId = mAppWidgetHost.allocateAppWidgetId();\n                \n                if (LOGD) Log.d(LOG_TAG, \"allocated appWidgetId=\"+appWidgetId+\" for favoriteId=\"+favoriteId);\n                \n                values.clear();\n                values.put(LauncherSettings.Favorites.APPWIDGET_ID, appWidgetId);\n                \n                // Original widgets might not have valid spans when upgrading\n                values.put(LauncherSettings.Favorites.SPANX, 2);\n                values.put(LauncherSettings.Favorites.SPANY, 2);\n\n                String updateWhere = Favorites._ID + \"=\" + favoriteId;\n                db.update(TABLE_FAVORITES, values, updateWhere, null);\n                \n                allocatedAppWidgets = true;\n            } catch (RuntimeException ex) {\n                Log.e(LOG_TAG, \"Problem allocating appWidgetId\", ex);\n            }\n        }\n        \n        db.setTransactionSuccessful();\n    } catch (SQLException ex) {\n        Log.w(LOG_TAG, \"Problem while allocating appWidgetIds for existing widgets\", ex);\n    } finally {\n        db.endTransaction();\n        if (c != null) {\n            c.close();\n        }\n    }\n    \n    // If any appWidgetIds allocated, then launch over to binder\n    if (allocatedAppWidgets) {\n        launchAppWidgetBinder(bindSources, bindTargets);\n    }\n}", "path": "src\\com\\android\\launcher\\LauncherProvider.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "// irrenhaus\n", "func_signal": "public static boolean Home_CloseFolders(Context context)", "code": "{\n\n\tSharedPreferences prefs = context.getSharedPreferences(preferenceName, 0);\n\n\tint close = prefs.getInt(homeTag + \"closefolders\", 1);\n\n\tif (close != 0)\n\t\treturn true;\n\treturn false;\n}", "path": "src\\com\\android\\launcher\\extended\\data\\ExtendedSettings.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/**\n * Indicates that we want global search for this activity by setting the globalSearch\n * argument for {@link #startSearch} to true.\n */\n", "func_signal": "@Override\npublic boolean onSearchRequested()", "code": "{\n    startSearch(null, false, null, true);\n    return true;\n}", "path": "src\\com\\android\\launcher\\Launcher.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/**\n * Registers various content observers. The current implementation registers\n * only a favorites observer to keep track of the favorites applications.\n */\n", "func_signal": "private void registerContentObservers()", "code": "{\n    ContentResolver resolver = getContentResolver();\n    resolver.registerContentObserver(LauncherSettings.Favorites.CONTENT_URI, true, mObserver);\n}", "path": "src\\com\\android\\launcher\\Launcher.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/**\n * Used to inflate the Workspace from XML.\n *\n * @param context The application's context.\n * @param attrs The attribtues set containing the Workspace's customization values.\n */\n", "func_signal": "public Folder(Context context, AttributeSet attrs)", "code": "{\n    super(context, attrs);\n    setAlwaysDrawnWithCacheEnabled(false);\n}", "path": "src\\com\\android\\launcher\\Folder.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/**\n * Modify clearAnimation() to invalidate the parent. This works around\n * an issue where the region where the end of the animation placed the view\n * was not redrawn after clearing the animation.\n */\n", "func_signal": "@Override\npublic void clearAnimation()", "code": "{\n    Animation animation = getAnimation();\n    if (animation != null) {\n        super.clearAnimation();\n        if (animation.hasEnded() \n                && animation.getFillAfter()\n                && animation.willChangeBounds()) {\n            ((View) getParent()).invalidate();\n        } else {\n            invalidate();\n        }\n    }\n}", "path": "src\\com\\android\\launcher\\Search.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "//irrenhaus@xda\n", "func_signal": "private void addExtraWallpaper(String extra)", "code": "{\n\tfinal Resources resources = getResources();\n    final String packageName = getApplication().getPackageName();\n    \n\tint res = resources.getIdentifier(extra, \"drawable\", packageName);\n    if (res != 0) {\n        final int thumbRes = resources.getIdentifier(extra + \"_small\",\n                \"drawable\", packageName);\n\n        if (thumbRes != 0) {\n            mThumbs.add(thumbRes);\n            mImages.add(res);\n        }\n    }\n    else\n    \tLog.d(\"WallpaperChooser\", \"Unknown wallpaper: \"+extra);\n}", "path": "src\\com\\android\\launcher\\WallpaperChooser.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/**\n * Launch the widget binder that walks through the Launcher database,\n * binding any matching widgets to the corresponding targets. We can't\n * bind ourselves because our parent process can't obtain the\n * BIND_APPWIDGET permission.\n */\n", "func_signal": "private void launchAppWidgetBinder(int[] bindSources, ArrayList<ComponentName> bindTargets)", "code": "{\n    final Intent intent = new Intent();\n    intent.setComponent(new ComponentName(\"com.android.settings\",\n            \"com.android.settings.LauncherAppWidgetBinder\"));\n    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    \n    final Bundle extras = new Bundle();\n    extras.putIntArray(EXTRA_BIND_SOURCES, bindSources);\n    extras.putParcelableArrayList(EXTRA_BIND_TARGETS, bindTargets);\n    intent.putExtras(extras);\n    \n    mContext.startActivity(intent);\n}", "path": "src\\com\\android\\launcher\\LauncherProvider.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/*\n * When using touch if you tap an image it triggers both the onItemClick and\n * the onTouchEvent causing the wallpaper to be set twice. Ensure we only\n * set the wallpaper once.\n */\n", "func_signal": "private void selectWallpaper(int position)", "code": "{\n    if (mIsWallpaperSet) {\n        return;\n    }\n\n    mIsWallpaperSet = true;\n    try {\n        InputStream stream = getResources().openRawResource(mImages.get(position));\n        setWallpaper(stream);\n        setResult(RESULT_OK);\n        finish();\n    } catch (IOException e) {\n        Log.e(Launcher.LOG_TAG, \"Failed to set wallpaper: \" + e);\n    }\n}", "path": "src\\com\\android\\launcher\\WallpaperChooser.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/**\n * Shows the system search dialog immediately, without any animation.\n */\n", "func_signal": "private void showSearchDialog()", "code": "{\n    mLauncher.showSearchDialog(\n            mInitialQuery, mSelectInitialQuery, mAppSearchData, mGlobalSearch);\n}", "path": "src\\com\\android\\launcher\\Search.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/**\n * Handle the action clicked in the \"Add to home\" dialog.\n */\n", "func_signal": "public void onClick(DialogInterface dialog, int which)", "code": "{\n    Resources res = getResources();\n    cleanup();\n\n    switch (which) {\n        case AddAdapter.ITEM_SHORTCUT: {\n            // Insert extra item to handle picking application\n            pickShortcut(REQUEST_PICK_SHORTCUT, R.string.title_select_shortcut);\n            break;\n        }\n\n        case AddAdapter.ITEM_APPWIDGET: {\n            int appWidgetId = Launcher.this.mAppWidgetHost.allocateAppWidgetId();\n\n            Intent pickIntent = new Intent(AppWidgetManager.ACTION_APPWIDGET_PICK);\n            pickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);\n            // add the search widget\n            ArrayList<AppWidgetProviderInfo> customInfo =\n                    new ArrayList<AppWidgetProviderInfo>();\n            AppWidgetProviderInfo info = new AppWidgetProviderInfo();\n            info.provider = new ComponentName(getPackageName(), \"XXX.YYY\");\n            info.label = getString(R.string.group_search);\n            info.icon = R.drawable.ic_search_widget;\n            customInfo.add(info);\n            pickIntent.putParcelableArrayListExtra(\n                    AppWidgetManager.EXTRA_CUSTOM_INFO, customInfo);\n            ArrayList<Bundle> customExtras = new ArrayList<Bundle>();\n            Bundle b = new Bundle();\n            b.putString(EXTRA_CUSTOM_WIDGET, SEARCH_WIDGET);\n            customExtras.add(b);\n            pickIntent.putParcelableArrayListExtra(\n                    AppWidgetManager.EXTRA_CUSTOM_EXTRAS, customExtras);\n            // start the pick activity\n            startActivityForResult(pickIntent, REQUEST_PICK_APPWIDGET);\n            break;\n        }\n\n        case AddAdapter.ITEM_LIVE_FOLDER: {\n            // Insert extra item to handle inserting folder\n            Bundle bundle = new Bundle();\n\n            ArrayList<String> shortcutNames = new ArrayList<String>();\n            shortcutNames.add(res.getString(R.string.group_folder));\n            bundle.putStringArrayList(Intent.EXTRA_SHORTCUT_NAME, shortcutNames);\n\n            ArrayList<ShortcutIconResource> shortcutIcons =\n                    new ArrayList<ShortcutIconResource>();\n            shortcutIcons.add(ShortcutIconResource.fromContext(Launcher.this,\n                    R.drawable.ic_launcher_folder));\n            bundle.putParcelableArrayList(Intent.EXTRA_SHORTCUT_ICON_RESOURCE, shortcutIcons);\n\n            Intent pickIntent = new Intent(Intent.ACTION_PICK_ACTIVITY);\n            pickIntent.putExtra(Intent.EXTRA_INTENT,\n                    new Intent(LiveFolders.ACTION_CREATE_LIVE_FOLDER));\n            pickIntent.putExtra(Intent.EXTRA_TITLE,\n                    getText(R.string.title_select_live_folder));\n            pickIntent.putExtras(bundle);\n\n            startActivityForResult(pickIntent, REQUEST_PICK_LIVE_FOLDER);\n            break;\n        }\n\n        case AddAdapter.ITEM_WALLPAPER: {\n            startWallpaper();\n            break;\n        }\n    }\n}", "path": "src\\com\\android\\launcher\\Launcher.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/**\n * Used to inflate the Workspace from XML.\n *\n * @param context The application's context.\n * @param attrs The attributes set containing the Workspace's customization values.\n */\n", "func_signal": "public Search(Context context, AttributeSet attrs)", "code": "{\n    super(context, attrs);\n\n    Interpolator interpolator = new AccelerateDecelerateInterpolator();\n\n    mMorphAnimation = new ToParentOriginAnimation();\n    // no need to apply transformation before the animation starts,\n    // since the gadget is already in its normal place.\n    mMorphAnimation.setFillBefore(false);\n    // stay in the top position after the animation finishes\n    mMorphAnimation.setFillAfter(true);\n    mMorphAnimation.setInterpolator(interpolator);\n    mMorphAnimation.setAnimationListener(new Animation.AnimationListener() {\n        // The amount of time before the animation ends to show the search dialog.\n        private static final long TIME_BEFORE_ANIMATION_END = 80;\n        \n        // The runnable which we'll pass to our handler to show the search dialog.\n        private final Runnable mShowSearchDialogRunnable = new Runnable() {\n            public void run() {\n                showSearchDialog();\n            }\n        };\n        \n        public void onAnimationEnd(Animation animation) { }\n        public void onAnimationRepeat(Animation animation) { }\n        public void onAnimationStart(Animation animation) {\n            // Make the search dialog show up ideally *just* as the animation reaches\n            // the top, to aid the illusion that the widget becomes the search dialog.\n            // Otherwise, there is a short delay when the widget reaches the top before\n            // the search dialog shows. We do this roughly 80ms before the animation ends.\n            getHandler().postDelayed(\n                    mShowSearchDialogRunnable,\n                    Math.max(mMorphAnimation.getDuration() - TIME_BEFORE_ANIMATION_END, 0));\n        }\n    });\n\n    mUnmorphAnimation = new FromParentOriginAnimation();\n    // stay in the top position until the animation starts\n    mUnmorphAnimation.setFillBefore(true);\n    // no need to apply transformation after the animation finishes,\n    // since the gadget is now back in its normal place.\n    mUnmorphAnimation.setFillAfter(false);\n    mUnmorphAnimation.setInterpolator(interpolator);\n    mUnmorphAnimation.setAnimationListener(new Animation.AnimationListener(){\n        public void onAnimationEnd(Animation animation) {\n            clearAnimation();\n        }\n        public void onAnimationRepeat(Animation animation) { }\n        public void onAnimationStart(Animation animation) { }\n    });\n    \n    mVoiceSearchIntent = new Intent(android.speech.RecognizerIntent.ACTION_WEB_SEARCH);\n    mVoiceSearchIntent.putExtra(android.speech.RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n            android.speech.RecognizerIntent.LANGUAGE_MODEL_WEB_SEARCH);\n    \n    mSearchManager = (SearchManager) getContext().getSystemService(Context.SEARCH_SERVICE);\n}", "path": "src\\com\\android\\launcher\\Search.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/**\n * Restore the search gadget to its normal position.\n * \n * @param animate Whether to animate the movement of the gadget.\n */\n", "func_signal": "public void stopSearch(boolean animate)", "code": "{\n    setQuery(\"\");\n    \n    // Only restore if we are not already restored.\n    if (getAnimation() == mMorphAnimation) {\n        if (animate && !isAtTop()) {\n            mUnmorphAnimation.setDuration(getAnimationDuration());\n            startAnimation(mUnmorphAnimation);\n        } else {\n            clearAnimation();\n        }\n    }\n}", "path": "src\\com\\android\\launcher\\Search.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/**\n * Launches the intent referred by the clicked shortcut.\n *\n * @param v The view representing the clicked shortcut.\n */\n", "func_signal": "public void onClick(View v)", "code": "{\n    Object tag = v.getTag();\n    if (tag instanceof ApplicationInfo) {\n        // irrenhaus@xda\n        ApplicationInfo info = (ApplicationInfo) tag;\n    \t\n    \tif(info.isSubMenu)\n    \t{\n    \t\tLauncher.getModel().openSubMenu(\"\"+info.title);\n    \t}\n    \telse\n    \t{\n\t            // Open shortcut\n\t            final Intent intent = ((ApplicationInfo) tag).intent;\n\t            startActivitySafely(intent);\n    \t}\n    } else if (tag instanceof FolderInfo) {\n        handleFolderClick((FolderInfo) tag);\n    }\n}", "path": "src\\com\\android\\launcher\\Launcher.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/**\n * Loads the default set of favorite packages from an xml file.\n *\n * @param db The database to write the values into\n */\n", "func_signal": "private int loadFavorites(SQLiteDatabase db)", "code": "{\n    Intent intent = new Intent(Intent.ACTION_MAIN, null);\n    intent.addCategory(Intent.CATEGORY_LAUNCHER);\n    ContentValues values = new ContentValues();\n\n    PackageManager packageManager = mContext.getPackageManager();\n    int i = 0;\n    try {\n        XmlResourceParser parser = mContext.getResources().getXml(R.xml.default_workspace);\n        AttributeSet attrs = Xml.asAttributeSet(parser);\n        XmlUtils.beginDocument(parser, TAG_FAVORITES);\n\n        final int depth = parser.getDepth();\n\n        int type;\n        while (((type = parser.next()) != XmlPullParser.END_TAG ||\n                parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n\n            if (type != XmlPullParser.START_TAG) {\n                continue;\n            }\n\n            boolean added = false;\n            final String name = parser.getName();\n\n            TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.Favorite);\n\n            values.clear();                    \n            values.put(LauncherSettings.Favorites.CONTAINER,\n                    LauncherSettings.Favorites.CONTAINER_DESKTOP);\n            values.put(LauncherSettings.Favorites.SCREEN,\n                    a.getString(R.styleable.Favorite_screen));\n            values.put(LauncherSettings.Favorites.CELLX,\n                    a.getString(R.styleable.Favorite_x));\n            values.put(LauncherSettings.Favorites.CELLY,\n                    a.getString(R.styleable.Favorite_y));\n\n            if (TAG_FAVORITE.equals(name)) {\n                added = addShortcut(db, values, a, packageManager, intent);\n            } else if (TAG_SEARCH.equals(name)) {\n                added = addSearchWidget(db, values);\n            } else if (TAG_CLOCK.equals(name)) {\n                added = addClockWidget(db, values);\n            }\n\n            if (added) i++;\n\n            a.recycle();\n        }\n    } catch (XmlPullParserException e) {\n        Log.w(LOG_TAG, \"Got exception parsing favorites.\", e);\n    } catch (IOException e) {\n        Log.w(LOG_TAG, \"Got exception parsing favorites.\", e);\n    }\n\n    return i;\n}", "path": "src\\com\\android\\launcher\\LauncherProvider.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/**\n * Send notification that we've deleted the {@link AppWidgetHost},\n * probably as part of the initial database creation. The receiver may\n * want to re-call {@link AppWidgetHost#startListening()} to ensure\n * callbacks are correctly set.\n */\n", "func_signal": "private void sendAppWidgetResetNotify()", "code": "{\n    final ContentResolver resolver = mContext.getContentResolver();\n    resolver.notifyChange(CONTENT_APPWIDGET_RESET_URI, null);\n}", "path": "src\\com\\android\\launcher\\LauncherProvider.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/**\n * Restores the previous state, if it exists.\n *\n * @param savedState The previous state.\n */\n", "func_signal": "private void restoreState(Bundle savedState)", "code": "{\n    if (savedState == null) {\n        return;\n    }\n\n    final int currentScreen = savedState.getInt(RUNTIME_STATE_CURRENT_SCREEN, -1);\n    if (currentScreen > -1) {\n        mWorkspace.setCurrentScreen(currentScreen);\n    }\n\n    final int addScreen = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SCREEN, -1);\n    if (addScreen > -1) {\n        mAddItemCellInfo = new CellLayout.CellInfo();\n        final CellLayout.CellInfo addItemCellInfo = mAddItemCellInfo;\n        addItemCellInfo.valid = true;\n        addItemCellInfo.screen = addScreen;\n        addItemCellInfo.cellX = savedState.getInt(RUNTIME_STATE_PENDING_ADD_CELL_X);\n        addItemCellInfo.cellY = savedState.getInt(RUNTIME_STATE_PENDING_ADD_CELL_Y);\n        addItemCellInfo.spanX = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SPAN_X);\n        addItemCellInfo.spanY = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SPAN_Y);\n        addItemCellInfo.findVacantCellsFromOccupied(\n                savedState.getBooleanArray(RUNTIME_STATE_PENDING_ADD_OCCUPIED_CELLS),\n                savedState.getInt(RUNTIME_STATE_PENDING_ADD_COUNT_X),\n                savedState.getInt(RUNTIME_STATE_PENDING_ADD_COUNT_Y));\n        mRestoring = true;\n    }\n\n    boolean renameFolder = savedState.getBoolean(RUNTIME_STATE_PENDING_FOLDER_RENAME, false);\n    if (renameFolder) {\n        long id = savedState.getLong(RUNTIME_STATE_PENDING_FOLDER_RENAME_ID);\n        mFolderInfo = sModel.getFolderById(this, id);\n        mRestoring = true;\n    }\n}", "path": "src\\com\\android\\launcher\\Launcher.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/**\n * If appropriate & available, configure voice search\n * \n * Note:  Because the home screen search widget is always web search, we only check for\n * getVoiceSearchLaunchWebSearch() modes.  We don't support the alternate form of app-specific\n * voice search.\n */\n", "func_signal": "private void configureVoiceSearchButton()", "code": "{\n    // Enable the voice search button if there is an activity that can handle it\n    PackageManager pm = getContext().getPackageManager();\n    ResolveInfo ri = pm.resolveActivity(mVoiceSearchIntent,\n            PackageManager.MATCH_DEFAULT_ONLY);\n    boolean voiceSearchVisible = ri != null;\n\n    // finally, set visible state of voice search button, as appropriate\n    mVoiceButton.setVisibility(voiceSearchVisible ? View.VISIBLE : View.GONE);\n}", "path": "src\\com\\android\\launcher\\Search.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/**\n * Add a shortcut to the workspace.\n *\n * @param data The intent describing the shortcut.\n * @param cellInfo The position on screen where to create the shortcut.\n * @param insertAtFirst\n */\n", "func_signal": "private void completeAddShortcut(Intent data, CellLayout.CellInfo cellInfo,\n        boolean insertAtFirst)", "code": "{\n    cellInfo.screen = mWorkspace.getCurrentScreen();\n    if (!findSingleSlot(cellInfo)) return;\n\n    final ApplicationInfo info = addShortcut(this, data, cellInfo, false);\n\n    if (!mRestoring) {\n        sModel.addDesktopItem(info);\n\n        final View view = createShortcut(info);\n        mWorkspace.addInCurrentScreen(view, cellInfo.cellX, cellInfo.cellY, 1, 1, insertAtFirst);\n    } else if (sModel.isDesktopLoaded()) {\n        sModel.addDesktopItem(info);\n    }\n}", "path": "src\\com\\android\\launcher\\Launcher.java", "repo_name": "irrenhaus/android_packages_apps_Launcher", "stars": 23, "license": "other", "language": "java", "size": 3812}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n    lblTitle = new javax.swing.JLabel();\n    jSeparator1 = new javax.swing.JSeparator();\n\n    lblTitle.setFont(getTitleFont());\n    lblTitle.setForeground(getTitleColor());\n    lblTitle.setText(com.floreantpos.POSConstants.TITLE);\n\n    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);\n    this.setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(layout.createSequentialGroup()\n            .addContainerGap()\n            .add(lblTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)\n            .addContainerGap())\n        .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(layout.createSequentialGroup()\n            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .add(lblTitle)\n            .add(15, 15, 15)\n            .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))\n    );\n}", "path": "floreantpos\\src\\com\\floreantpos\\ui\\TitlePanel.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "/**\n * Constructor for primary key\n */\n", "func_signal": "public BaseTicketItemModifierGroup (java.lang.Integer id)", "code": "{\n\tthis.setId(id);\n\tinitialize();\n}", "path": "floreantpos\\src\\com\\floreantpos\\model\\base\\BaseTicketItemModifierGroup.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "// End of variables declaration//GEN-END:variables\n", "func_signal": "private Font getTitleFont()", "code": "{\n    Font f = lblTitle.getFont();\n    f = f.deriveFont(Font.BOLD, 14);\n    return f;\n}", "path": "floreantpos\\src\\com\\floreantpos\\ui\\TitlePanel.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "public void doLogin()", "code": "{\n\t\tApplication application = Application.getInstance();\n\n\t\tint userId = Integer.MAX_VALUE;\n\t\ttry {\n\t\t\tuserId = Integer.parseInt(tfUserId.getText());\n\t\t} catch (Exception x) {\n\t\t\tMessageDialog.showError(com.floreantpos.POSConstants.USER_ID_NOT_VALID);\n\t\t\treturn;\n\t\t}\n\t\tchar[] password = tfPassword.getPassword();\n\t\tString newPass = new String(password);\n\n\t\tUserType selectedUserType = (UserType) cbUserType.getSelectedItem();\n\n\t\tUserDAO dao = new UserDAO();\n\t\tCalendar currentTime = Calendar.getInstance();\n\n\t\ttry {\n\n\t\t\tUser user = null;\n\t\t\t\n\t\t\tuser = dao.findUser(userId, selectedUserType);\n\t\t\tif(user == null) {\n\t\t\t\tMessageDialog.showError(com.floreantpos.POSConstants.USER_NOT_FOUND);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tif (user.getNewUserType() != null) {\n\t\t\t\tif (user == null) {\n\t\t\t\t\tMessageDialog.showError(com.floreantpos.POSConstants.USER_NOT_FOUND);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (user.getPassword() == null) {\n\t\t\t\t\tMessageDialog.showError(com.floreantpos.POSConstants.EMPTY_PASSWORD);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!user.getPassword().equalsIgnoreCase(newPass)) {\n\t\t\t\t\tMessageDialog.showError(com.floreantpos.POSConstants.WRONG_PASSWORD);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tuser = dao.findUser(userId);\n\t\t\t\tif (user == null) {\n\t\t\t\t\tMessageDialog.showError(com.floreantpos.POSConstants.USER_NOT_FOUND);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (user.getPassword() == null) {\n\t\t\t\t\tMessageDialog.showError(com.floreantpos.POSConstants.EMPTY_PASSWORD);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!user.getPassword().equalsIgnoreCase(newPass)) {\n\t\t\t\t\tMessageDialog.showError(com.floreantpos.POSConstants.WRONG_PASSWORD);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\tShift currentShift = ShiftUtil.getCurrentShift();\n\t\t\tif (currentShift == null) {\n\t\t\t\tPOSMessageDialog.showError(this, com.floreantpos.POSConstants.NO_SHIFT_CONFIGURED);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (user.isClockedIn() != null && user.isClockedIn().booleanValue()) {\n\t\t\t\tShift userShift = user.getCurrentShift();\n\t\t\t\tDate userLastClockInTime = user.getLastClockInTime();\n\t\t\t\tlong elaspedTimeSinceLastLogin = Math.abs(currentTime.getTimeInMillis() - userLastClockInTime.getTime());\n\n\t\t\t\tif (userShift != null) {\n\t\t\t\t\tif (!userShift.equals(currentShift)) {\n\t\t\t\t\t\treClockInUser(currentTime, user, currentShift);\n\t\t\t\t\t}\n\t\t\t\t\telse if (userShift.getShiftLength() != null && (elaspedTimeSinceLastLogin >= userShift.getShiftLength())) {\n\t\t\t\t\t\treClockInUser(currentTime, user, currentShift);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tuser.doClockIn(application.getTerminal(), currentShift, currentTime);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tuser.doClockIn(application.getTerminal(), currentShift, currentTime);\n\t\t\t}\n\n\t\t\tapplication.setCurrentUser(user);\n\t\t\tapplication.setCurrentShift(currentShift);\n\n\t\t\ttfUserId.setText(\"\");\n\t\t\ttfPassword.setText(\"\");\n\t\t\tapplication.getRootView().showView(SwitchboardView.VIEW_NAME);\n\t\t} catch (Exception e1) {\n\t\t\tMessageDialog.showError(e1);\n\t\t}\n\t}", "path": "floreantpos\\src\\com\\floreantpos\\ui\\views\\PasswordScreen.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "/*\n\tIf you are pulling the SessionFactory from a JNDI tree, uncomment this\n\tprotected SessionFactory getSessionFactory(String configFile) {\n\t\t// If you have a single session factory, ignore the configFile parameter\n\t\t// Otherwise, you can set a meta attribute under the class node called \"config-file\" which\n\t\t// will be passed in here so you can tell what session factory an individual mapping file\n\t\t// belongs to\n\t\treturn (SessionFactory) new InitialContext().lookup(\"java:/{SessionFactoryName}\");\n\t}\n*/\n", "func_signal": "public static void initialize()", "code": "{\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration = configuration.addClass(ActionHistory.class);\n\t\tconfiguration = configuration.addClass(AttendenceHistory.class);\n\t\tconfiguration = configuration.addClass(CashDrawerResetHistory.class);\n\t\tconfiguration = configuration.addClass(CookingInstruction.class);\n\t\tconfiguration = configuration.addClass(CouponAndDiscount.class);\n\t\tconfiguration = configuration.addClass(Gratuity.class);\n\t\tconfiguration = configuration.addClass(MenuCategory.class);\n\t\tconfiguration = configuration.addClass(MenuGroup.class);\n\t\tconfiguration = configuration.addClass(MenuItem.class);\n\t\tconfiguration = configuration.addClass(MenuItemModifierGroup.class);\n\t\tconfiguration = configuration.addClass(MenuItemShift.class);\n\t\tconfiguration = configuration.addClass(MenuModifier.class);\n\t\tconfiguration = configuration.addClass(MenuModifierGroup.class);\n\t\tconfiguration = configuration.addClass(PayoutReason.class);\n\t\tconfiguration = configuration.addClass(PayoutRecepient.class);\n\t\tconfiguration = configuration.addClass(Restaurant.class);\n\t\tconfiguration = configuration.addClass(RestaurantTable.class);\n\t\tconfiguration = configuration.addClass(Shift.class);\n\t\tconfiguration = configuration.addClass(Tax.class);\n\t\tconfiguration = configuration.addClass(Terminal.class);\n\t\tconfiguration = configuration.addClass(Ticket.class);\n\t\tconfiguration = configuration.addClass(TicketCouponAndDiscount.class);\n\t\tconfiguration = configuration.addClass(TicketItem.class);\n\t\tconfiguration = configuration.addClass(TicketItemModifier.class);\n\t\tconfiguration = configuration.addClass(TicketItemModifierGroup.class);\n\t\tconfiguration = configuration.addClass(PosTransaction.class);\n\t\tconfiguration = configuration.addClass(User.class);\n\t\tconfiguration = configuration.addClass(VoidReason.class);\n\t\tconfiguration = configuration.addClass(DrawerPullReport.class);\n\t\tconfiguration = configuration.addClass(PrinterConfiguration.class);\n\t\tconfiguration = configuration.addClass(UserPermission.class);\n\t\tconfiguration = configuration.addClass(UserType.class);\n\t\t\n\t\tconfiguration = configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.DerbyDialect\");\n\t\tconfiguration = configuration.setProperty(\"hibernate.connection.driver_class\", \"org.apache.derby.jdbc.ClientDriver\");\n\t\tconfiguration = configuration.setProperty(\"hibernate.connection.url\", ApplicationConfig.getConnectionURL());\n\t\tconfiguration = configuration.setProperty(\"hibernate.connection.username\", ApplicationConfig.getDatabaseUser());\n\t\tconfiguration = configuration.setProperty(\"hibernate.connection.password\", ApplicationConfig.getDatabasePassword());\n\t\tconfiguration = configuration.setProperty(\"hibernate.hbm2ddl.auto\", \"update\");\n\t\tconfiguration = configuration.setProperty(\"hibernate.connection.autocommit\", \"false\");\n\t\tconfiguration = configuration.setProperty(\"hibernate.max_fetch_depth\", \"3\");\n\t\tconfiguration = configuration.setProperty(\"hibernate.show_sql\", \"false\");\n\t\t\n\t\tsetSessionFactory(configuration.buildSessionFactory());\n\t}", "path": "floreantpos\\src\\com\\floreantpos\\model\\dao\\_RootDAO.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "/** Creates new form PasswordScreen */\n", "func_signal": "private PasswordScreen()", "code": "{\n\tinitComponents();\n\n\t//cbUserType.setModel(new DefaultComboBoxModel(new String[] {User.USER_TYPE_MANAGER, User.USER_TYPE_CASHIER, User.USER_TYPE_SERVER}));\n\n\tbtnConfigureDatabase.setAction(goAction);\n\tbtnConfigureDatabase.setActionCommand(\"DBCONFIG\");\n}", "path": "floreantpos\\src\\com\\floreantpos\\ui\\views\\PasswordScreen.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "/*[CONSTRUCTOR MARKER END]*/\n", "func_signal": "@Override\npublic boolean equals(Object obj)", "code": "{\n\tif(!(obj instanceof Shift)) return false;\n\t\n\treturn getName().equalsIgnoreCase( ((Shift) obj).getName());\n}", "path": "floreantpos\\src\\com\\floreantpos\\model\\Shift.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    chkPrintReceiptWhenTicketSettled = new javax.swing.JCheckBox();\n    chkPrintReceiptWhenTicketPaid = new javax.swing.JCheckBox();\n    chkPrintKitchenWhenTicketSettled = new javax.swing.JCheckBox();\n    chkPrintKitchenWhenTicketPaid = new javax.swing.JCheckBox();\n    jPanel1 = new javax.swing.JPanel();\n    lblReceiptCashDrawerName = new javax.swing.JLabel();\n    tfReceiptCashDrawerName = new javax.swing.JTextField();\n    lblReceiptPrinterName = new javax.swing.JLabel();\n    tfReceiptPrinterName = new javax.swing.JTextField();\n    cbReceiptPrinterName = new javax.swing.JComboBox();\n    cbReceiptPrinterType = new javax.swing.JComboBox();\n    javax.swing.JLabel jLabel1 = new javax.swing.JLabel();\n    lblSelectReceiptPrinter = new javax.swing.JLabel();\n    jPanel2 = new javax.swing.JPanel();\n    lblKitchenPrinterName = new javax.swing.JLabel();\n    tfKitchenPrinterName = new javax.swing.JTextField();\n    cbKitchenPrinterName = new javax.swing.JComboBox();\n    cbKitchenPrinterType = new javax.swing.JComboBox();\n    javax.swing.JLabel jLabel2 = new javax.swing.JLabel();\n    lblSelectKitchenPrinter = new javax.swing.JLabel();\n\n    chkPrintReceiptWhenTicketSettled.setText(com.floreantpos.POSConstants.PRINT_RECEIPT_WHEN_TICKET_SETTLED);\n\n    chkPrintReceiptWhenTicketPaid.setText(com.floreantpos.POSConstants.PRINT_RECEIPT_WHEN_TICKET_PAID);\n\n    chkPrintKitchenWhenTicketSettled.setText(com.floreantpos.POSConstants.PRINT_TO_KITCHEN_WHEN_TICKET_SETTLED);\n\n    chkPrintKitchenWhenTicketPaid.setText(com.floreantpos.POSConstants.PRINT_TO_KITCHEN_WHEN_TICKET_PAID);\n\n    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, com.floreantpos.POSConstants.RECEIPT_PRINTER, javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));\n\n    lblReceiptCashDrawerName.setText(com.floreantpos.POSConstants.CASHDRAWER + \":\");\n\n    tfReceiptCashDrawerName.setText(\"CashDrawer\");\n\n    lblReceiptPrinterName.setText(com.floreantpos.POSConstants.PRINTER_NAME_);\n\n    tfReceiptPrinterName.setText(\"PosPrinter\");\n\n    cbReceiptPrinterType.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            receiptPrinterSelectionChanged(evt);\n        }\n    });\n\n    jLabel1.setText(com.floreantpos.POSConstants.PRINTER_TYPE + \":\");\n\n    lblSelectReceiptPrinter.setText(com.floreantpos.POSConstants.SELECT_PRINTER + \":\");\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()\n                    .addComponent(lblReceiptPrinterName)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(tfReceiptPrinterName))\n                .addGroup(jPanel1Layout.createSequentialGroup()\n                    .addComponent(jLabel1)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(cbReceiptPrinterType, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))\n            .addGap(18, 18, 18)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(lblSelectReceiptPrinter)\n                .addComponent(lblReceiptCashDrawerName))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(tfReceiptCashDrawerName, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)\n                .addComponent(cbReceiptPrinterName, 0, 178, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n\n    jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, lblReceiptPrinterName});\n\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel1)\n                .addComponent(cbReceiptPrinterType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(lblSelectReceiptPrinter)\n                .addComponent(cbReceiptPrinterName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(lblReceiptPrinterName)\n                .addComponent(tfReceiptPrinterName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(lblReceiptCashDrawerName)\n                .addComponent(tfReceiptCashDrawerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap())\n    );\n\n    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, \"Kitchen Printer\", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));\n\n    lblKitchenPrinterName.setText(com.floreantpos.POSConstants.PRINTER_NAME_);\n\n    tfKitchenPrinterName.setText(\"KitchenPrinter\");\n\n    cbKitchenPrinterType.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            kitchenPrinterTypeSelectionChanged(evt);\n        }\n    });\n\n    jLabel2.setText(com.floreantpos.POSConstants.PRINTER_TYPE + \":\");\n\n    lblSelectKitchenPrinter.setText(com.floreantpos.POSConstants.SELECT_PRINTER);\n\n    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n    jPanel2.setLayout(jPanel2Layout);\n    jPanel2Layout.setHorizontalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel2Layout.createSequentialGroup()\n            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()\n                    .addComponent(lblKitchenPrinterName)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(tfKitchenPrinterName))\n                .addGroup(jPanel2Layout.createSequentialGroup()\n                    .addComponent(jLabel2)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(cbKitchenPrinterType, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))\n            .addGap(18, 18, 18)\n            .addComponent(lblSelectKitchenPrinter)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(cbKitchenPrinterName, 0, 178, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, lblKitchenPrinterName});\n\n    jPanel2Layout.setVerticalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel2)\n                .addComponent(cbKitchenPrinterType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(lblSelectKitchenPrinter)\n                .addComponent(cbKitchenPrinterName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(lblKitchenPrinterName)\n                .addComponent(tfKitchenPrinterName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap())\n    );\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n    this.setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))\n                .addGroup(layout.createSequentialGroup()\n                    .addGap(102, 102, 102)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(chkPrintReceiptWhenTicketSettled)\n                        .addComponent(chkPrintReceiptWhenTicketPaid)\n                        .addComponent(chkPrintKitchenWhenTicketSettled)\n                        .addComponent(chkPrintKitchenWhenTicketPaid))))\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(chkPrintReceiptWhenTicketSettled)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(chkPrintReceiptWhenTicketPaid)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(chkPrintKitchenWhenTicketSettled)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(chkPrintKitchenWhenTicketPaid)\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n}", "path": "floreantpos\\src\\com\\floreantpos\\config\\ui\\PrintConfigurationView.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n    jLabel1 = new javax.swing.JLabel();\n    jLabel2 = new javax.swing.JLabel();\n    tfName = new com.floreantpos.swing.FixedLengthTextField();\n    tfRate = new javax.swing.JFormattedTextField();\n    jLabel3 = new javax.swing.JLabel();\n\n    jLabel1.setText(com.floreantpos.POSConstants.NAME + \":\");\n\n    jLabel2.setText(com.floreantpos.POSConstants.RATE + \":\");\n\n    tfRate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);\n\n    jLabel3.setText(\"%\");\n\n    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);\n    this.setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(layout.createSequentialGroup()\n            .addContainerGap()\n            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n                .add(jLabel1)\n                .add(jLabel2))\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n                .add(layout.createSequentialGroup()\n                    .add(tfRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 122, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n                    .add(jLabel3))\n                .add(tfName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 208, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(layout.createSequentialGroup()\n            .addContainerGap()\n            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)\n                .add(jLabel1)\n                .add(tfName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)\n                .add(jLabel2)\n                .add(tfRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n                .add(jLabel3))\n            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n}", "path": "floreantpos\\src\\com\\floreantpos\\ui\\model\\TaxForm.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "/** Creates new form KeyStatisticsSalesReportView */\n", "func_signal": "public SalesSummaryReportView()", "code": "{\n\tinitComponents();\n\n\tUserTypeDAO dao = new UserTypeDAO();\n\tList<UserType> userTypes = dao.findAll();\n\t\n\tVector list = new Vector();\n\tlist.add(null);\n\tlist.addAll(userTypes);\n\t\n\tcbUserType.setModel(new DefaultComboBoxModel(list));\n\n\tTerminalDAO terminalDAO = new TerminalDAO();\n\tList terminals = terminalDAO.findAll();\n\tterminals.add(0, com.floreantpos.POSConstants.ALL);\n\tcbTerminal.setModel(new ListComboBoxModel(terminals));\n}", "path": "floreantpos\\src\\com\\floreantpos\\ui\\report\\SalesSummaryReportView.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "/**\n * Set the unique identifier of this class\n * @param id the new ID\n */\n", "func_signal": "public void setId (java.lang.Integer id)", "code": "{\n\tthis.id = id;\n\tthis.hashCode = Integer.MIN_VALUE;\n}", "path": "floreantpos\\src\\com\\floreantpos\\model\\base\\BaseTicketItemModifierGroup.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "//GEN-LAST:event_showReport\n", "func_signal": "private void showSalesAnalysisReport() throws Exception", "code": "{\n\t\tSalesSummaryDAO dao = new SalesSummaryDAO();\n\t\tList<SalesAnalysisData> datas = dao.findSalesAnalysis(fromDate, toDate, userType, terminal);\n\n\t\tMap properties = new HashMap();\n\t\tReportUtil.populateRestaurantProperties(properties);\n\t\tproperties.put(\"subtitle\", com.floreantpos.POSConstants.SALES_SUMMARY_REPORT);\n\t\tproperties.put(\"reportTime\", fullDateFormatter.format(new Date()));\n\t\tproperties.put(\"fromDate\", shortDateFormatter.format(fromDate));\n\t\tproperties.put(\"toDate\", shortDateFormatter.format(toDate));\n\t\tif (userType == null) {\n\t\t\tproperties.put(\"reportType\", com.floreantpos.POSConstants.SYSTEM_TOTAL);\n\t\t}\n\t\telse {\n\t\t\tproperties.put(\"reportType\", userType);\n\t\t}\n\t\tproperties.put(\"shift\", com.floreantpos.POSConstants.ALL);\n\t\tproperties.put(\"centre\", terminal == null ? com.floreantpos.POSConstants.ALL : terminal.getName());\n\t\tproperties.put(\"days\", String.valueOf(dateDiff));\n\n\t\tJasperReport report = (JasperReport) JRLoader.loadObject(getClass().getResource(\"/com/floreantpos/ui/report/sales_summary_report2.jasper\"));\n\t\tJasperPrint print = JasperFillManager.fillReport(report, properties, new JRTableModelDataSource(new SalesAnalysisReportModel(datas)));\n\t\topenReport(print);\n\t}", "path": "floreantpos\\src\\com\\floreantpos\\ui\\report\\SalesSummaryReportView.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "/**\n * Return a singleton of the DAO\n */\n", "func_signal": "public static GiftCertificateTransactionDAO getInstance ()", "code": "{\n\tif (null == instance) instance = new GiftCertificateTransactionDAO();\n\treturn instance;\n}", "path": "floreantpos\\src\\com\\floreantpos\\model\\dao\\BaseGiftCertificateTransactionDAO.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\tjava.awt.GridBagConstraints gridBagConstraints;\n\n\tbuttonPanel = new javax.swing.JPanel();\n\tposButton4 = new com.floreantpos.swing.PosButton();\n\tposButton13 = new com.floreantpos.swing.PosButton();\n\tposButton12 = new com.floreantpos.swing.PosButton();\n\tposButton9 = new com.floreantpos.swing.PosButton();\n\tposButton10 = new com.floreantpos.swing.PosButton();\n\tposButton11 = new com.floreantpos.swing.PosButton();\n\tposButton8 = new com.floreantpos.swing.PosButton();\n\tposButton7 = new com.floreantpos.swing.PosButton();\n\tposButton6 = new com.floreantpos.swing.PosButton();\n\tposButton3 = new com.floreantpos.swing.PosButton();\n\tposButton1 = new com.floreantpos.swing.PosButton();\n\tjPanel2 = new javax.swing.JPanel();\n\tjLabel1 = new javax.swing.JLabel();\n\tjLabel2 = new javax.swing.JLabel();\n\ttfPassword = new javax.swing.JPasswordField();\n\ttfUserId = new javax.swing.JTextField();\n\tjLabel4 = new javax.swing.JLabel();\n\tcbUserType = new javax.swing.JComboBox();\n\tjPanel1 = new javax.swing.JPanel();\n\tjPanel3 = new javax.swing.JPanel();\n\tbtnConfigureDatabase = new com.floreantpos.swing.PosButton();\n\tbtnLogin = new com.floreantpos.swing.PosButton();\n\tjLabel3 = new javax.swing.JLabel();\n\tbtnShutdown = new com.floreantpos.swing.PosButton();\n\tjPanel4 = new javax.swing.JPanel();\n\n\tsetPreferredSize(new java.awt.Dimension(315, 400));\n\tsetLayout(new java.awt.GridBagLayout());\n\n\tbuttonPanel.setOpaque(false);\n\tbuttonPanel.setPreferredSize(new java.awt.Dimension(280, 180));\n\tbuttonPanel.setLayout(new java.awt.GridLayout(0, 3, 5, 5));\n\n\tposButton4.setAction(goAction);\n\tposButton4.setIcon(com.floreantpos.IconFactory.getIcon(\"7_32.png\"));\n\tposButton4.setActionCommand(\"7\");\n\tposButton4.setFocusable(false);\n\tbuttonPanel.add(posButton4);\n\n\tposButton13.setAction(goAction);\n\tposButton13.setIcon(com.floreantpos.IconFactory.getIcon(\"8_32.png\"));\n\tposButton13.setActionCommand(\"8\");\n\tposButton13.setFocusable(false);\n\tbuttonPanel.add(posButton13);\n\n\tposButton12.setAction(goAction);\n\tposButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/9_32.png\"))); // NOI18N\n\tposButton12.setActionCommand(\"9\");\n\tposButton12.setFocusable(false);\n\tbuttonPanel.add(posButton12);\n\n\tposButton9.setAction(goAction);\n\tposButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/4_32.png\"))); // NOI18N\n\tposButton9.setActionCommand(\"4\");\n\tposButton9.setFocusable(false);\n\tbuttonPanel.add(posButton9);\n\n\tposButton10.setAction(goAction);\n\tposButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/5_32.png\"))); // NOI18N\n\tposButton10.setActionCommand(\"5\");\n\tposButton10.setFocusable(false);\n\tbuttonPanel.add(posButton10);\n\n\tposButton11.setAction(goAction);\n\tposButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/6_32.png\"))); // NOI18N\n\tposButton11.setActionCommand(\"6\");\n\tposButton11.setFocusable(false);\n\tbuttonPanel.add(posButton11);\n\n\tposButton8.setAction(goAction);\n\tposButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/1_32.png\"))); // NOI18N\n\tposButton8.setActionCommand(\"1\");\n\tposButton8.setFocusable(false);\n\tbuttonPanel.add(posButton8);\n\n\tposButton7.setAction(goAction);\n\tposButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/2_32.png\"))); // NOI18N\n\tposButton7.setActionCommand(\"2\");\n\tposButton7.setFocusable(false);\n\tbuttonPanel.add(posButton7);\n\n\tposButton6.setAction(goAction);\n\tposButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/3_32.png\"))); // NOI18N\n\tposButton6.setActionCommand(\"3\");\n\tposButton6.setFocusable(false);\n\tbuttonPanel.add(posButton6);\n\n\tposButton3.setAction(goAction);\n\tposButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/0_32.png\"))); // NOI18N\n\tposButton3.setActionCommand(\"0\");\n\tposButton3.setFocusable(false);\n\tbuttonPanel.add(posButton3);\n\n\tposButton1.setAction(goAction);\n\tposButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/clear_32.png\"))); // NOI18N\n\tposButton1.setText(com.floreantpos.POSConstants.CLEAR);\n\tposButton1.setFocusable(false);\n\tposButton1.setPreferredSize(new java.awt.Dimension(90, 50));\n\tbuttonPanel.add(posButton1);\n\n\tgridBagConstraints = new java.awt.GridBagConstraints();\n\tgridBagConstraints.gridx = 0;\n\tgridBagConstraints.gridy = 1;\n\tgridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n\tgridBagConstraints.ipady = 40;\n\tgridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;\n\tgridBagConstraints.weightx = 1.0;\n\tadd(buttonPanel, gridBagConstraints);\n\n\tjPanel2.setOpaque(false);\n\n\tjLabel1.setFont(new java.awt.Font(\"Tahoma\", 1, 24));\n\tjLabel1.setForeground(new java.awt.Color(204, 102, 0));\n\tjLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n\tjLabel1.setText(com.floreantpos.POSConstants.ENTER_YOUR_USER_ID);\n\n\tjLabel2.setFont(new java.awt.Font(\"Tahoma\", 1, 24));\n\tjLabel2.setForeground(new java.awt.Color(204, 102, 0));\n\tjLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n\tjLabel2.setText(com.floreantpos.POSConstants.ENTER_YOUR_PASSWORD);\n\n\ttfPassword.setFont(new java.awt.Font(\"Courier\", 1, 18));\n\ttfPassword.setHorizontalAlignment(javax.swing.JTextField.LEFT);\n\n\ttfUserId.setFont(new java.awt.Font(\"Tahoma\", 1, 18));\n\n\tjLabel4.setFont(new java.awt.Font(\"DejaVu Sans\", 1, 24));\n\tjLabel4.setForeground(new java.awt.Color(204, 102, 0));\n\tjLabel4.setText(com.floreantpos.POSConstants.USER_TYPE + \":\");\n\n\tcbUserType.setFont(new java.awt.Font(\"DejaVu Sans\", 1, 18));\n\n\torg.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);\n\tjPanel2.setLayout(jPanel2Layout);\n\tjPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE).add(\n\t\t\tjPanel2Layout.createSequentialGroup().addContainerGap().add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE).addContainerGap()).add(org.jdesktop.layout.GroupLayout.TRAILING, tfPassword, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE).add(tfUserId,\n\t\t\torg.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE).add(jPanel2Layout.createSequentialGroup().add(jLabel4).add(18, 18, 18).add(cbUserType, 0, 225, Short.MAX_VALUE)));\n\tjPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(\n\t\t\tjPanel2Layout.createSequentialGroup().add(jLabel1).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(tfUserId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jLabel2)\n\t\t\t\t\t.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).add(tfPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(\n\t\t\t\t\t\t\torg.jdesktop.layout.LayoutStyle.RELATED).add(\n\t\t\t\t\t\t\tjPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jLabel4).add(cbUserType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(4, 4, 4)));\n\n\tjPanel2Layout.linkSize(new java.awt.Component[] { cbUserType, jLabel4 }, org.jdesktop.layout.GroupLayout.VERTICAL);\n\n\tgridBagConstraints = new java.awt.GridBagConstraints();\n\tgridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n\tgridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;\n\tgridBagConstraints.weightx = 1.0;\n\tgridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);\n\tadd(jPanel2, gridBagConstraints);\n\n\tjPanel1.setLayout(new java.awt.BorderLayout());\n\n\tjPanel3.setPreferredSize(new java.awt.Dimension(100, 105));\n\tjPanel3.setLayout(new java.awt.GridLayout(2, 0, 5, 5));\n\n\tbtnConfigureDatabase.setAction(goAction);\n\tbtnConfigureDatabase.setText(com.floreantpos.POSConstants.CONFIGURE_DATABASE);\n\tbtnConfigureDatabase.setFocusable(false);\n\tjPanel3.add(btnConfigureDatabase);\n\n\tbtnLogin.setAction(goAction);\n\tbtnLogin.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/log_in_32.png\"))); // NOI18N\n\tbtnLogin.setText(com.floreantpos.POSConstants.LOGIN);\n\tbtnLogin.setFocusable(false);\n\tjPanel3.add(btnLogin);\n\tjPanel3.add(jLabel3);\n\n\tbtnShutdown.setAction(goAction);\n\tbtnShutdown.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/shut_down_32.png\"))); // NOI18N\n\tbtnShutdown.setText(com.floreantpos.POSConstants.SHUTDOWN);\n\tbtnShutdown.setFocusable(false);\n\tjPanel3.add(btnShutdown);\n\n\tjPanel1.add(jPanel3, java.awt.BorderLayout.SOUTH);\n\n\torg.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);\n\tjPanel4.setLayout(jPanel4Layout);\n\tjPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 387, Short.MAX_VALUE));\n\tjPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 64, Short.MAX_VALUE));\n\n\tjPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);\n\n\tgridBagConstraints = new java.awt.GridBagConstraints();\n\tgridBagConstraints.gridx = 0;\n\tgridBagConstraints.gridy = 2;\n\tgridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n\tgridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;\n\tgridBagConstraints.weightx = 1.0;\n\tgridBagConstraints.weighty = 1.0;\n\tadd(jPanel1, gridBagConstraints);\n}", "path": "floreantpos\\src\\com\\floreantpos\\ui\\views\\PasswordScreen.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private boolean initCriteria()", "code": "{\n\t\tfromDate = fromDatePicker.getDate();\n\t\ttoDate = toDatePicker.getDate();\n\n\t\tif (fromDate.after(toDate)) {\n\t\t\tPOSMessageDialog.showError(Application.getInstance().getBackOfficeWindow(), com.floreantpos.POSConstants.FROM_DATE_CANNOT_BE_GREATER_THAN_TO_DATE_);\n\t\t\treturn false;\n\t\t}\n\n\t\tdateDiff = (int) ((toDate.getTime() - fromDate.getTime()) * (1.15740741 * Math.pow(10, -8))) + 1;\n\t\tuserType = (UserType) cbUserType.getSelectedItem();\n//\t\tif (userType.equalsIgnoreCase(com.floreantpos.POSConstants.ALL)) {\n//\t\t\tuserType = null;\n//\t\t}\n\t\tterminal = null;\n\t\tif (cbTerminal.getSelectedItem() instanceof Terminal) {\n\t\t\tterminal = (Terminal) cbTerminal.getSelectedItem();\n\t\t}\n\n\t\tCalendar calendar = Calendar.getInstance();\n\t\tcalendar.clear();\n\n\t\tCalendar calendar2 = Calendar.getInstance();\n\t\tcalendar2.setTime(fromDate);\n\n\t\tcalendar.set(Calendar.YEAR, calendar2.get(Calendar.YEAR));\n\t\tcalendar.set(Calendar.MONTH, calendar2.get(Calendar.MONTH));\n\t\tcalendar.set(Calendar.DATE, calendar2.get(Calendar.DATE));\n\t\tcalendar.set(Calendar.HOUR, 0);\n\t\tcalendar.set(Calendar.MINUTE, 0);\n\t\tcalendar.set(Calendar.SECOND, 0);\n\t\tfromDate = calendar.getTime();\n\n\t\tcalendar.clear();\n\t\tcalendar2.setTime(toDate);\n\t\tcalendar.set(Calendar.YEAR, calendar2.get(Calendar.YEAR));\n\t\tcalendar.set(Calendar.MONTH, calendar2.get(Calendar.MONTH));\n\t\tcalendar.set(Calendar.DATE, calendar2.get(Calendar.DATE));\n\t\tcalendar.set(Calendar.HOUR, 23);\n\t\tcalendar.set(Calendar.MINUTE, 59);\n\t\tcalendar.set(Calendar.SECOND, 59);\n\t\ttoDate = calendar.getTime();\n\n\t\treturn true;\n\t}", "path": "floreantpos\\src\\com\\floreantpos\\ui\\report\\SalesSummaryReportView.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "// End of variables declaration//GEN-END:variables\n", "func_signal": "@Override\n\tpublic boolean save()", "code": "{\n\t\t\n\t\ttry {\n\t\t\tif(!updateModel()) return false;\n\t\t\t\n\t\t\tTax tax = (Tax) getBean();\n\t\t\tTaxDAO dao = new TaxDAO();\n\t\t\tdao.saveOrUpdate(tax);\n\t\t} catch (Exception e) {\n\t\t\tMessageDialog.showError(e);\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;\n\t}", "path": "floreantpos\\src\\com\\floreantpos\\ui\\model\\TaxForm.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "//\tpublic void saveTransaction(Ticket ticket, com.floreantpos.model.PosTransaction transaction, Terminal terminal, User user) throws Exception {\n//\t\tSession session = null;\n//    \tTransaction tx = null;\n//    \ttry {\n//    \t\tif(transaction instanceof CashTransaction) {\n//    \t\t\tterminal.setCurrentBalance(terminal.getCurrentBalance() + ticket.getTotalPrice());\n//    \t\t}\n//\t\t\t\n//\t\t\tticket.setVoided(false);\n//\t\t\tticket.setPaid(true);\n//\t\t\tticket.setClosed(true);\n//\t\t\tticket.setDrawerResetted(false);\n//\t\t\tticket.setClosingDate(new Date());\n//\t\t\tticket.setTerminal(terminal);\n//\t\t\t\n//\t\t\ttransaction.setTicket(ticket);\n//\t\t\ttransaction.setAmount(ticket.getSubTotal());\n//\t\t\ttransaction.setTaxAmount(ticket.getTotalTax());\n//\t\t\ttransaction.setAppliedDiscount(ticket.getTotalDiscount());\n//\t\t\ttransaction.setTerminal(terminal);\n//\t\t\ttransaction.setUser(user);\n//\t\t\ttransaction.setTransactionTime(new Date());\n//\t\t\t\n//\t\t\tsession = createNewSession();\n//\t\t\ttx = session.beginTransaction();\n//\t\t\t\n//\t\t\tsaveOrUpdate(ticket, session);\n//\t\t\tsaveOrUpdate(transaction, session);\n//\t\t\tsaveOrUpdate(terminal, session);\n//\t\t\t\n//\t\t\ttx.commit();\n//\t\t\t\n//\t\t} catch (Exception e) {\n//\t\t\ttry {\n//\t\t\t\ttx.rollback();\n//\t\t\t}catch (Exception x) {}\n//\t\t\t\n//\t\t\tthrow e;\n//\t\t} finally {\n//\t\t\tcloseSession(session);\n//\t\t}\n//\t}\n", "func_signal": "public List<Ticket> findTickets(Date startDate, Date endDate, boolean closed)", "code": "{\n\tSession session = null;\n\ttry {\n\t\tsession = getSession();\n\t\tCriteria criteria = session.createCriteria(getReferenceClass());\n\t\tcriteria.add(Restrictions.ge(Ticket.PROP_CREATE_DATE, startDate));\n\t\tcriteria.add(Restrictions.le(Ticket.PROP_CREATE_DATE, endDate));\n\t\tcriteria.add(Restrictions.eq(Ticket.PROP_CLOSED, Boolean.TRUE));\n\t\tcriteria.add(Restrictions.eq(Ticket.PROP_VOIDED, Boolean.FALSE));\n\t\tcriteria.add(Restrictions.eq(Ticket.PROP_DRAWER_RESETTED, Boolean.valueOf(closed)));\n\n\t\treturn criteria.list();\n\t} finally {\n\t\tcloseSession(session);\n\t}\n}", "path": "floreantpos\\src\\com\\floreantpos\\model\\dao\\TicketDAO.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "/**\n * Return a singleton of the DAO\n */\n", "func_signal": "public static CookingInstructionDAO getInstance ()", "code": "{\n\tif (null == instance) instance = new CookingInstructionDAO();\n\treturn instance;\n}", "path": "floreantpos\\src\\com\\floreantpos\\model\\dao\\BaseCookingInstructionDAO.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "/**\n * Return a singleton of the DAO\n */\n", "func_signal": "public static TicketCouponAndDiscountDAO getInstance ()", "code": "{\n\tif (null == instance) instance = new TicketCouponAndDiscountDAO();\n\treturn instance;\n}", "path": "floreantpos\\src\\com\\floreantpos\\model\\dao\\BaseTicketCouponAndDiscountDAO.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "protected void paintComponent(Graphics g)", "code": "{\n    \tsuper.paintComponent(g);\n    \t\n    \tGraphics2D g2 = (Graphics2D) g;\n    \tint x = 0, y = 0;\n    \tfloat width = getWidth();\n    \tfloat height = getHeight();\n    \t\n    \tColor color1 = Color.WHITE;\n    \tColor color2 = getBackground();\n    \tg2.setPaint(new GradientPaint(x,y,color1, width, height,color2));\n    \tg2.fillRect(x, y, (int) width, (int) height);\n    }", "path": "floreantpos\\src\\com\\floreantpos\\ui\\TitlePanel.java", "repo_name": "dlemery/AndroidPOS", "stars": 26, "license": "None", "language": "java", "size": 52043}
{"docstring": "/**\n * Get the full length of this movie (in seconds).\n * \n * @return float\n */\n", "func_signal": "public float duration()", "code": "{\n  float sec = gpipeline.queryDuration().toSeconds();\n  float nanosec = gpipeline.queryDuration().getNanoSeconds();\n  return sec + GSVideo.nanoSecToSecFrac(nanosec);\n}", "path": "GSVideo\\src\\codeanticode\\gsvideo\\GSPipeline.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * send a byte array to the dedicated remoteAddress.\n * @param theBytes\n * @param theNetAddress\n */\n", "func_signal": "public void send(final byte[] theBytes,\n                 final NetAddress theNetAddress\n    )", "code": "{\n  if (_myNetAddress.isvalid()) {\n    send(theBytes, theNetAddress.inetaddress(),theNetAddress.port());\n  }\n}", "path": "oscP5\\src\\netP5\\AbstractUdpClient.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n *\n * @return int[]\n */\n", "func_signal": "public int[] midiValue()", "code": "{\n\tint[] myInt = new int[4];\n\tbyte[] myByte = (byte[]) value;\n\tfor (int i = 0; i < 4; i++) {\n\t\tmyInt[i] = (int) (myByte[i]);\n\t}\n\treturn (myInt);\n}", "path": "oscP5\\src\\oscP5\\OscArgument.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * Stop the stream, and rewind.\n */\n", "func_signal": "public void stop()", "code": "{\n  if (!pipelineReady) {\n    initPipeline();\n  }   \n  \n  if (playing) {      \n    goToBeginning();\n    playing = false;\n  }\n  paused = false;    \n  gpipeline.stop();\n}", "path": "GSVideo\\src\\codeanticode\\gsvideo\\GSPipeline.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * Releases the gstreamer resources associated to this pipeline object.\n * It shouldn't be used after this.\n */\n", "func_signal": "public void delete()", "code": "{\n  if (gpipeline != null) {\n    try {\n      if (gpipeline.isPlaying()) {\n        gpipeline.stop();\n      }\n    } catch (IllegalStateException e) {\n      System.err.println(\"error when deleting player, maybe some native resource is already disposed\"); \n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n          \n    pixels = null;     \n    data = null;      \n    \n    copyPixels = null;\n    if (rgbSink != null) {\n      rgbSink.removeListener();\n      rgbSink.dispose();\n      rgbSink = null;\n    }            \n    \n    copyData = null;      \n    if (dataSink != null) {\n      dataSink.removeListener();\n      dataSink.dispose();\n      dataSink = null;\n    }\n    \n    natBuffer = null;\n    if (natSink != null) {\n      natSink.removeListener();\n      natSink.dispose();\n      natSink = null;\n    } \n    \n    gpipeline.dispose();\n    gpipeline = null;\n  }\n}", "path": "GSVideo\\src\\codeanticode\\gsvideo\\GSPipeline.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * Creates an instance of GSPipeline using the provided pipeline\n * string.\n * \n * @param parent PApplet\n * @param pstr String\n * @param type int    \n */\n", "func_signal": "public GSPipeline(PApplet parent, String pstr, int type)", "code": "{\n  super(0, 0, RGB);\n  initGStreamer(parent, pstr, type);\n}", "path": "GSVideo\\src\\codeanticode\\gsvideo\\GSPipeline.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * Get a float-value property from the pipeline. \n * \n * @param String name\n * @return boolean \n */\n", "func_signal": "public float getProperty(String name)", "code": "{\n  if (playing) {\n    return ((Number)gpipeline.get(name)).floatValue();\n  }\n  return 0;\n}", "path": "GSVideo\\src\\codeanticode\\gsvideo\\GSPipeline.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "// (S)end (R)eceive (S)ame (P)ort\n", "func_signal": "public OscProperties(OscEventListener theParent)", "code": "{\n   this();\n   listeners.add(theParent);\n }", "path": "oscP5\\src\\oscP5\\OscProperties.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * @invisible\n * @param thePacket DatagramPacket\n */\n", "func_signal": "public void send(DatagramPacket thePacket)", "code": "{\n  if (isRunning) {\n    try {\n          _mySocket.send(thePacket);\n\n    }\n    catch (IOException e) {\n      Logger.printError(\"UdpClient.send\",\n                        \"ioexception while sending packet.\");\n    }\n  }\n}", "path": "oscP5\\src\\netP5\\AbstractUdpClient.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * Reads the current video frame.\n */\n", "func_signal": "public synchronized void read()", "code": "{\n  if (streamType == GSVideo.VIDEO) {    \n    // We loadPixels() first to ensure that at least we always have a non-null\n    // pixels array, even if without any valid image inside.\n    loadPixels();    \n    \n    if (copyBufferMode) {\n      // The native buffer from gstreamer is copies to the destination object.\n      if (natBuffer == null || copyBufferMethod == null) {\n        return;\n      }    \n      \n      if (firstFrame) {\n        super.init(bufWidth, bufHeight, RGB);\n        loadPixels();\n        firstFrame = false;\n      }\n      \n      if (copyNatBuf) {\n        // The native buffer is copied into a new rgb buffer created locally.\n        IntBuffer temp = natBuffer.getByteBuffer().asIntBuffer();\n        temp.rewind();\n        if (rgbBuffer == null) {\n          rgbBuffer = IntBuffer.allocate(bufWidth * bufHeight);\n        }\n        rgbBuffer.rewind();\n        rgbBuffer.put(temp);\n        rgbBuffer.rewind();\n        \n        natBuffer.dispose();\n        natBuffer = null;\n      } else {\n        // The rgb buffer is just the native buffer viewed as\n        // an int buffer.\n        rgbBuffer = natBuffer.getByteBuffer().asIntBuffer();  \n      }\n      \n      try {\n        copyBufferMethod.invoke(copyHandler, new Object[] { natBuffer, rgbBuffer, bufWidth, bufHeight });\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n      \n      natBuffer = null;         \n    } else {\n      if (copyPixels == null) {\n        return;\n      }\n      \n      if (firstFrame) {\n        super.init(bufWidth, bufHeight, RGB);\n        loadPixels();\n        firstFrame = false;\n      }   \n          \n      int[] temp = pixels;\n      pixels = copyPixels;\n      updatePixels();\n      copyPixels = temp;    \n      newFrame = true;\n    }\n  } else if (streamType == GSVideo.RAW) {\n    if (copyData == null) {\n      return;\n    }        \n    \n    dataCaps = tempDataCaps;\n    if (data == null) {\n      data = new byte[copyData.length];\n    }\n    \n    byte[] temp = data;\n    data = copyData;\n    copyData = temp;  \n    newFrame = true;\n  }\n  \n  available = false;\n}", "path": "GSVideo\\src\\codeanticode\\gsvideo\\GSPipeline.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * send a byte array using UDP to an already specified RemoteAddress.\n * @param theBytes byte[]\n */\n", "func_signal": "public void send(byte[] theBytes)", "code": "{\n  if (_myNetAddress.isvalid()) {\n    send(theBytes, _myNetAddress);\n  }\n  else {\n    Logger.printWarning(\"UdpClient.send\",\n                        \"no InetAddress and port has been set. Packet has not been sent.\");\n  }\n}", "path": "oscP5\\src\\netP5\\AbstractUdpClient.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * set the remote host address. set ip address and port of the host\n * message should be sent to.\n * @param theNetAddress NetAddress\n * @related OscProperties\n */\n", "func_signal": "public void setRemoteAddress(NetAddress theNetAddress)", "code": "{\n  _myRemoteAddress = theNetAddress;\n  _mySendStatus = _myRemoteAddress.isvalid();\n}", "path": "oscP5\\src\\oscP5\\OscProperties.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * Jump to a specific location (in seconds). The number is a float so\n * fractions of seconds can be used.\n * \n * @param float where\n */\n", "func_signal": "public void jump(float where)", "code": "{\n  boolean res;\n  long pos = GSVideo.secToNanoLong(where);\n  \n  res = gpipeline.seek(1.0, Format.TIME, SeekFlags.FLUSH,\n                       SeekType.SET, pos, SeekType.NONE, -1);\n  \n  if (!res) {\n    System.err.println(\"Seek operation failed.\");\n  }    \n  \n  // Will wait until any async state change (seek) has completed    \n  seeking = true;\n  gpipeline.getState();\n  seeking = false;\n}", "path": "GSVideo\\src\\codeanticode\\gsvideo\\GSPipeline.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * set the network protocol over which osc messages are transmitted.\n * options are OscProperties.UDP and OscProperties.MULTICAST\n * the network protocol can only be set before initializing\n * oscP5.\n * @param theProtocol int\n * @related OscProperties\n * @related UDP\n * @related TCP\n * @related MULTICAST\n * @related networkProtocol ( )\n */\n", "func_signal": "public void setNetworkProtocol(final int theProtocol)", "code": "{\n  if (!isLocked) {\n    if (theProtocol > 2) {\n      Logger.printWarning(\"OscProperties.setNetworkProtocol\",\n                          \"not in the range of supported Network protocols. the network protocol defaults to UDP\");\n    }\n    else {\n      _myNetworkProtocol = theProtocol;\n    }\n  }\n  else {\n    Logger.printWarning(\"OscProperties.setNetworkProtocol\",\n                        \"network protocol can only be set before initializing oscP5.\");\n  }\n}", "path": "oscP5\\src\\oscP5\\OscProperties.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * Begin playing the stream, with no repeat.\n */\n", "func_signal": "public void play()", "code": "{\n  if (!pipelineReady) {\n    initPipeline();\n  }    \n  \n  playing = true;\n  paused = false;\n  gpipeline.play();    \n}", "path": "GSVideo\\src\\codeanticode\\gsvideo\\GSPipeline.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * prints out the current osc properties settings.\n * @return String\n * @related OscProperties\n */\n", "func_signal": "public String toString()", "code": "{\n  String s = \"\\nnetwork protocol: \" + (_myProtocols[_myNetworkProtocol])\n      + \"\\n\";\n  s += \"host: \" + ((_myRemoteAddress.address()!=null) ? _myRemoteAddress.address():\"host address not set.\") + \"\\n\";\n  s += \"sendToPort: \" + _myRemoteAddress.port() + \"\\n\";\n  s += \"receiveAtPort: \" + listeningPort() + \"\\n\";\n  s += \"datagramSize: \" + _myDatagramSize + \"\\n\";\n  s += \"event Method: \" + _myDefaultEventMethodName + \"\\n\";\n  s += \"(S)end(R)eceive(S)ame(P)ort: \" + this._mySRSP + \"\\n\\n\";\n  return s;\n}", "path": "oscP5\\src\\oscP5\\OscProperties.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * Set a float-value property in the pipeline. \n * \n * @param String name\n * @param float v  \n */\n", "func_signal": "public void setProperty(String name, float v)", "code": "{\n  if (playing) {\n    gpipeline.set(name, v);\n  }\n}", "path": "GSVideo\\src\\codeanticode\\gsvideo\\GSPipeline.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * @invisible\n * @param theAddr String\n * @param thePort int\n */\n", "func_signal": "public AbstractUdpClient(String theAddr, int thePort)", "code": "{\n\n  _myNetAddress = new NetAddress(theAddr, thePort);\n\n  if(!_myNetAddress.isvalid()) {\n    Logger.printError(\"UdpClient\", \"unknown host \" + theAddr);\n  }\n  isRunning = openSocket();\n}", "path": "oscP5\\src\\netP5\\AbstractUdpClient.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * send a byte array to the dedicated remoteAddress.\n * @param thePacket OscPacket\n * @param theAddress String\n * @param thePort int\n */\n", "func_signal": "public void send(final byte[] theBytes,\n                 final String theAddress,\n                 final int thePort)", "code": "{\n  try {\n    InetAddress myInetAddress = InetAddress.getByName(theAddress);\n    send(theBytes, myInetAddress, thePort);\n  }\n  catch (UnknownHostException e) {\n    Logger.printError(\"UdpClient.send\", \"while sending to \"\n                      + theAddress + \" \" + e);\n  }\n}", "path": "oscP5\\src\\netP5\\AbstractUdpClient.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * Pause the stream at its current time.\n */\n", "func_signal": "public void pause()", "code": "{\n  if (!pipelineReady) {\n    initPipeline();\n  }   \n  \n  playing = false;\n  paused = true;\n  gpipeline.pause();\n}", "path": "GSVideo\\src\\codeanticode\\gsvideo\\GSPipeline.java", "repo_name": "technicolorenvy/Processing-Libraries", "stars": 30, "license": "None", "language": "java", "size": 48002}
{"docstring": "/**\n * \n */\n", "func_signal": "public ZanMinimap()", "code": "{\n\n    map = new Map();\n    obfhub = new ObfHub(this);\n    texman = new TextureManager(this);\n    conf = new Config(this);\n    mapcalc = new MapCalculator(this);\n    menu = new Menu(this);\n    renderer = new MapRenderer(this);\n\n    conf.initializeEverything();\n    mapcalc.start();\n\n    instance = this;\n}", "path": "net\\lahwran\\zanminimap\\ZanMinimap.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * the run() to implement runnable - the main function of the other thread.\n * when threading is disabled, this simply idles and the actual work is\n * done in onRenderTick().\n */\n", "func_signal": "public void run()", "code": "{\n    if (obfhub.game == null)\n        return;\n    while (true) {\n        try {\n            if (conf.threading) {\n                tryARender();\n                Thread.sleep(100);\n            } else {\n                    synchronized(zCalc) {\n                        this.zCalc.wait(10000);\n                    }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "net\\lahwran\\zanminimap\\MapCalculator.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * Read configuration.\n * @throws IOException any exceptions thrown while reading\n */\n", "func_signal": "public void readConfig() throws IOException", "code": "{\n    File settingsFile = new File(ObfHub.getAppDir(\"minecraft\"), \"zan.settings\");\n    \n    if (settingsFile.exists())\n    {\n        BufferedReader in = new BufferedReader(new FileReader(settingsFile));\n        String sCurrentLine;\n        while ((sCurrentLine = in.readLine()) != null)\n        {\n            String[] curLine = sCurrentLine.split(\":\");\n\n            if (curLine[0].equals(\"Show Minimap\"))\n                squaremap = Boolean.parseBoolean(curLine[1]);\n            else if (curLine[0].equals(\"Show Coordinates\"))\n                coords = Boolean.parseBoolean(curLine[1]);\n            else if (curLine[0].equals(\"Dynamic Lighting\"))\n                lightmap = Boolean.parseBoolean(curLine[1]);\n            else if (curLine[0].equals(\"Terrain Depth\"))\n                heightmap = Boolean.parseBoolean(curLine[1]);\n            else if (curLine[0].equals(\"Welcome Message\"))\n                welcome = Boolean.parseBoolean(curLine[1]);\n            else if (curLine[0].equals(\"Zoom Key\"))\n                zoomKey = Keyboard.getKeyIndex(curLine[1]);\n            else if (curLine[0].equals(\"Menu Key\"))\n                menuKey = Keyboard.getKeyIndex(curLine[1]);\n            else if (curLine[0].equals(\"Threading\"))\n                threading = Boolean.parseBoolean(curLine[1]);\n            else if (curLine[0].equals(\"Color\"))\n                color = Boolean.parseBoolean(curLine[1]);\n            else if (curLine[0].equals(\"Netherpoints\"))\n                netherpoints = Boolean.parseBoolean(curLine[1]);\n            else if (curLine[0].equals(\"Cavemap\"))\n                cavemap = Boolean.parseBoolean(curLine[1]);\n\n            if(cavemap && !(lightmap ^ heightmap))\n            {\n                lightmap = true;\n                heightmap = false;\n            }\n\n            if(cavemap)\n            {\n                this.full = false;\n                this.zoom=1;\n                minimap.menu.error = \"Cavemap zoom (2.0x)\";\n            }\n        }\n        in.close();\n    }\n}", "path": "net\\lahwran\\zanminimap\\Config.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * Convert three-float color representation to 24bit int\n * @return converted int\n */\n", "func_signal": "public int getColor24()", "code": "{\n    return ((int) (red * 0xff) << 16)\n           + ((int) (green * 0xff) << 8)\n           + ((int) (blue * 0xff));\n}", "path": "net\\lahwran\\zanminimap\\Waypoint.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * Check if a render is necessary, and if so, do one.\n */\n", "func_signal": "private void tryARender()", "code": "{\n    if (!obfhub.playerExists())\n        return;\n    try {\n        if (conf.enabled && !conf.hide && map.isDirty(obfhub.getPlayerX(), obfhub.getPlayerZ())) {\n            mapCalc();\n            map.timer = 1;\n        }\n    } catch (RuntimeException e) {\n        throw e;\n    } finally {\n        map.timer++;\n    }\n}", "path": "net\\lahwran\\zanminimap\\MapCalculator.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * Initialize everything there is to be initialized in config\n */\n", "func_signal": "public void initializeEverything()", "code": "{\n    try {\n        readConfig();\n    } catch (IOException e) {\n        System.err.println(\"------- IOException while reading zanminimap config -------\");\n        e.printStackTrace();\n    }\n    initWaypointColors();\n    initDefaultColors();\n    try {\n        readColors();\n    } catch (IOException e) {\n        System.err.println(\"------- IOException while reading zanminimap colors -------\");\n        e.printStackTrace();\n    }\n    try {\n        writeColors();\n    } catch (IOException e) {\n        System.err.println(\"------- IOException while writing zanminimap colors -------\");\n        e.printStackTrace();\n    }\n    try {\n        readAetherColors();\n    } catch (IOException e) {\n        System.err.println(\"------- IOException while reading zanminimap aether colors -------\");\n        e.printStackTrace();\n    }\n}", "path": "net\\lahwran\\zanminimap\\Config.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * Initialize the default colors in the block color array\n */\n", "func_signal": "public void initDefaultColors()", "code": "{\n    for (int i = 0; i < blockColors.length; i++)\n        blockColors[i] = null;\n\n    blockColors[blockColorID(0, 0)] = new BlockColor(0xff00ff, 0, TintType.NONE); //air\n    int wood = 0xbc9862; //reused colors\n    int water = 0x3256ff;\n    int lava = 0xd96514;\n    blockColors[blockColorID(1, 0)] = new BlockColor(0x686868, 0xff, TintType.NONE); //stone\n    blockColors[blockColorID(2, 0)] = new BlockColor(0x74b44a, 0xff, TintType.GRASS); //grass\n    blockColors[blockColorID(3, 0)] = new BlockColor(0x79553a, 0xff, TintType.NONE); //dirt\n    blockColors[blockColorID(4, 0)] = new BlockColor(0x959595, 0xff, TintType.NONE); //cobble\n    blockColors[blockColorID(5, 0)] = new BlockColor(wood, 0xff, TintType.NONE); //wood\n    blockColors[blockColorID(6, 0)] = new BlockColor(0xa2c978, 0x80, TintType.FOLIAGE); //sapling 1\n    blockColors[blockColorID(6, 1)] = new BlockColor(0xa2c978, 0x80, TintType.PINE);    //sapling 2\n    blockColors[blockColorID(6, 2)] = new BlockColor(0xa2c978, 0x80, TintType.BIRCH);   //sapling 3\n    blockColors[blockColorID(7, 0)] = new BlockColor(0x333333, 0xff, TintType.NONE); //bedrock\n    blockColors[blockColorID(8, 0)] = new BlockColor(water, 0xc0, TintType.NONE); //water\n    blockColors[blockColorID(9, 0)] = new BlockColor(water, 0xb0, TintType.NONE); //moving water\n    blockColors[blockColorID(10, 0)] = new BlockColor(lava, 0xff, TintType.NONE); //lava\n    blockColors[blockColorID(11, 0)] = new BlockColor(lava, 0xff, TintType.NONE); //moving lava\n    blockColors[blockColorID(12, 0)] = new BlockColor(0xddd7a0, 0xff, TintType.NONE); //sand\n    blockColors[blockColorID(13, 0)] = new BlockColor(0x747474, 0xff, TintType.NONE); //gravel\n    blockColors[blockColorID(14, 0)] = new BlockColor(0x747474, 0xff, TintType.NONE); //gold ore\n    blockColors[blockColorID(15, 0)] = new BlockColor(0x747474, 0xff, TintType.NONE); //iron ore\n    blockColors[blockColorID(16, 0)] = new BlockColor(0x747474, 0xff, TintType.NONE); //coal ore\n    \n    blockColors[blockColorID(17, 0)] = new BlockColor(0x675132, 0xff, TintType.NONE); //log 1\n    blockColors[blockColorID(17, 1)] = new BlockColor(0x342919, 0xff, TintType.NONE); //log 2\n    blockColors[blockColorID(17, 2)] = new BlockColor(0xc8c29f, 0xff, TintType.NONE); //log 3\n    \n    blockColors[blockColorID(18, 0)] = new BlockColor(0x164d0c, 0xa0, TintType.NONE); //leaf\n    blockColors[blockColorID(19, 0)] = new BlockColor(0xe5e54e, 0xff, TintType.NONE); //sponge\n    blockColors[blockColorID(20, 0)] = new BlockColor(0xffffff, 0x80, TintType.NONE); //glass\n    blockColors[blockColorID(21, 0)] = new BlockColor(0x6d7484, 0xff, TintType.NONE); //lapis ore\n    blockColors[blockColorID(22, 0)] = new BlockColor(0x1542b2, 0xff, TintType.NONE); //lapis\n    blockColors[blockColorID(23, 0)] = new BlockColor(0x585858, 0xff, TintType.NONE); //dispenser\n    blockColors[blockColorID(24, 0)] = new BlockColor(0xc6bd6d, 0xff, TintType.NONE); //sandstone\n    blockColors[blockColorID(25, 0)] = new BlockColor(0x784f3a, 0xff, TintType.NONE); //noteblock\n    blockColors[blockColorID(26, 0)] = new BlockColor(0xa95d5d, 0xff, TintType.NONE); //bed\n    \n    //skip 27, 28, 30, 31, and 32 as they are all nonsolid and\n    //notch's height map skips them\n    \n    blockColors[blockColorID(35, 0)] = new BlockColor(0xe1e1e1, 0xff, TintType.NONE); //colored wool\n    blockColors[blockColorID(35, 1)] = new BlockColor(0xeb8138, 0xff, TintType.NONE);\n    blockColors[blockColorID(35, 2)] = new BlockColor(0xc04cca, 0xff, TintType.NONE);\n    blockColors[blockColorID(35, 3)] = new BlockColor(0x698cd5, 0xff, TintType.NONE);\n    blockColors[blockColorID(35, 4)] = new BlockColor(0xc5b81d, 0xff, TintType.NONE);\n    blockColors[blockColorID(35, 5)] = new BlockColor(0x3cbf30, 0xff, TintType.NONE);\n    blockColors[blockColorID(35, 6)] = new BlockColor(0xda859c, 0xff, TintType.NONE);\n    blockColors[blockColorID(35, 7)] = new BlockColor(0x434343, 0xff, TintType.NONE);\n    blockColors[blockColorID(35, 8)] = new BlockColor(0x9fa7a7, 0xff, TintType.NONE);\n    blockColors[blockColorID(35, 9)] = new BlockColor(0x277697, 0xff, TintType.NONE);\n    blockColors[blockColorID(35, 10)] = new BlockColor(0x7f33c1, 0xff, TintType.NONE);\n    blockColors[blockColorID(35, 11)] = new BlockColor(0x26339b, 0xff, TintType.NONE);\n    blockColors[blockColorID(35, 12)] = new BlockColor(0x57331c, 0xff, TintType.NONE);\n    blockColors[blockColorID(35, 13)] = new BlockColor(0x384e18, 0xff, TintType.NONE);\n    blockColors[blockColorID(35, 14)] = new BlockColor(0xa52d28, 0xff, TintType.NONE);\n    blockColors[blockColorID(35, 15)] = new BlockColor(0x1b1717, 0xff, TintType.NONE); //end colored wool\n    \n    blockColors[blockColorID(37, 0)] = new BlockColor(0xf1f902, 0xff, TintType.NONE); //yellow flower\n    blockColors[blockColorID(38, 0)] = new BlockColor(0xf7070f, 0xff, TintType.NONE); //red flower\n    blockColors[blockColorID(39, 0)] = new BlockColor(0x916d55, 0xff, TintType.NONE); //brown mushroom\n    blockColors[blockColorID(40, 0)] = new BlockColor(0x9a171c, 0xff, TintType.NONE); //red mushroom\n    blockColors[blockColorID(41, 0)] = new BlockColor(0xfefb5d, 0xff, TintType.NONE); //gold block\n    blockColors[blockColorID(42, 0)] = new BlockColor(0xe9e9e9, 0xff, TintType.NONE); //iron block\n    \n    blockColors[blockColorID(43, 0)] = new BlockColor(0xa8a8a8, 0xff, TintType.NONE); //double slabs\n    blockColors[blockColorID(43, 1)] = new BlockColor(0xe5ddaf, 0xff, TintType.NONE);\n    blockColors[blockColorID(43, 2)] = new BlockColor(0x94794a, 0xff, TintType.NONE);\n    blockColors[blockColorID(43, 3)] = new BlockColor(0x828282, 0xff, TintType.NONE);\n\n    blockColors[blockColorID(44, 0)] = new BlockColor(0xa8a8a8, 0xff, TintType.NONE); //single slabs\n    blockColors[blockColorID(44, 1)] = new BlockColor(0xe5ddaf, 0xff, TintType.NONE);\n    blockColors[blockColorID(44, 2)] = new BlockColor(0x94794a, 0xff, TintType.NONE);\n    blockColors[blockColorID(44, 3)] = new BlockColor(0x828282, 0xff, TintType.NONE);\n    \n    blockColors[blockColorID(45, 0)] = new BlockColor(0xaa543b, 0xff, TintType.NONE); //brick\n    blockColors[blockColorID(46, 0)] = new BlockColor(0xdb441a, 0xff, TintType.NONE); //tnt\n    blockColors[blockColorID(47, 0)] = new BlockColor(0xb4905a, 0xff, TintType.NONE); //bookshelf\n    blockColors[blockColorID(48, 0)] = new BlockColor(0x1f471f, 0xff, TintType.NONE); //mossy cobble\n    blockColors[blockColorID(49, 0)] = new BlockColor(0x101018, 0xff, TintType.NONE); //obsidian\n    blockColors[blockColorID(50, 0)] = new BlockColor(0xffd800, 0xff, TintType.NONE); //torch\n    blockColors[blockColorID(51, 0)] = new BlockColor(0xc05a01, 0xff, TintType.NONE); //fire\n    blockColors[blockColorID(52, 0)] = new BlockColor(0x265f87, 0xff, TintType.NONE); //spawner\n    blockColors[blockColorID(53, 0)] = new BlockColor(wood, 0xff, TintType.NONE); //wood steps\n    blockColors[blockColorID(54, 0)] = new BlockColor(0x8f691d, 0xff, TintType.NONE); //chest\n    blockColors[blockColorID(55, 0)] = new BlockColor(0x480000, 0xff, TintType.NONE); //redstone wire\n    blockColors[blockColorID(56, 0)] = new BlockColor(0x747474, 0xff, TintType.NONE); //diamond ore\n    blockColors[blockColorID(57, 0)] = new BlockColor(0x82e4e0, 0xff, TintType.NONE); //diamond block\n    blockColors[blockColorID(58, 0)] = new BlockColor(0xa26b3e, 0xff, TintType.NONE); //craft table\n    blockColors[blockColorID(59, 0)] = new BlockColor(0x00e210, 0xff, TintType.NONE); //crops\n    blockColors[blockColorID(60, 0)] = new BlockColor(0x633f24, 0xff, TintType.NONE); //cropland\n    blockColors[blockColorID(61, 0)] = new BlockColor(0x747474, 0xff, TintType.NONE); //furnace\n    blockColors[blockColorID(62, 0)] = new BlockColor(0x808080, 0xff, TintType.NONE); //furnace, powered\n    blockColors[blockColorID(63, 0)] = new BlockColor(0xb4905a, 0xff, TintType.NONE); //fence\n    blockColors[blockColorID(64, 0)] = new BlockColor(0x7a5b2b, 0xff, TintType.NONE); //door\n    blockColors[blockColorID(65, 0)] = new BlockColor(0xac8852, 0xff, TintType.NONE); //ladder\n    blockColors[blockColorID(66, 0)] = new BlockColor(0xa4a4a4, 0xff, TintType.NONE); //track\n    blockColors[blockColorID(67, 0)] = new BlockColor(0x9e9e9e, 0xff, TintType.NONE); //cobble steps\n    blockColors[blockColorID(68, 0)] = new BlockColor(0x9f844d, 0xff, TintType.NONE); //sign\n    blockColors[blockColorID(69, 0)] = new BlockColor(0x695433, 0xff, TintType.NONE); //lever\n    blockColors[blockColorID(70, 0)] = new BlockColor(0x8f8f8f, 0xff, TintType.NONE); //stone pressureplate\n    blockColors[blockColorID(71, 0)] = new BlockColor(0xc1c1c1, 0xff, TintType.NONE); //iron door\n    blockColors[blockColorID(72, 0)] = new BlockColor(wood, 0xff, TintType.NONE); //wood pressureplate\n    blockColors[blockColorID(73, 0)] = new BlockColor(0x747474, 0xff, TintType.NONE); //redstone ore\n    blockColors[blockColorID(74, 0)] = new BlockColor(0x747474, 0xff, TintType.NONE); //glowing redstone ore\n    blockColors[blockColorID(75, 0)] = new BlockColor(0x290000, 0xff, TintType.NONE); //redstone torch, off\n    blockColors[blockColorID(76, 0)] = new BlockColor(0xfd0000, 0xff, TintType.NONE); //redstone torch, lit\n    blockColors[blockColorID(77, 0)] = new BlockColor(0x747474, 0xff, TintType.NONE); //button\n    blockColors[blockColorID(78, 0)] = new BlockColor(0xfbffff, 0xff, TintType.NONE); //snow\n    blockColors[blockColorID(79, 0)] = new BlockColor(0x8ebfff, 0xff, TintType.NONE); //ice\n    blockColors[blockColorID(80, 0)] = new BlockColor(0xffffff, 0xff, TintType.NONE); //snow block\n    blockColors[blockColorID(81, 0)] = new BlockColor(0x11801e, 0xff, TintType.NONE); //cactus\n    blockColors[blockColorID(82, 0)] = new BlockColor(0xbbbbcc, 0xff, TintType.NONE); //clay\n    blockColors[blockColorID(83, 0)] = new BlockColor(0xa1a7b2, 0xff, TintType.NONE); //reeds\n    blockColors[blockColorID(84, 0)] = new BlockColor(0xaadb74, 0xff, TintType.NONE); //record player\n    blockColors[blockColorID(85, 0)] = new BlockColor(wood, 0xff, TintType.NONE); //fence\n    blockColors[blockColorID(86, 0)] = new BlockColor(0xa25b0b, 0xff, TintType.NONE); //pumpkin\n    blockColors[blockColorID(87, 0)] = new BlockColor(0x582218, 0xff, TintType.NONE); //netherrack\n    blockColors[blockColorID(88, 0)] = new BlockColor(0x996731, 0xff, TintType.NONE); //slow sand\n    blockColors[blockColorID(89, 0)] = new BlockColor(0xcda838, 0xff, TintType.NONE); //glowstone\n    blockColors[blockColorID(90, 0)] = new BlockColor(0x732486, 0xff, TintType.NONE); //portal\n    blockColors[blockColorID(91, 0)] = new BlockColor(0xa25b0b, 0xff, TintType.NONE); //jackolantern\n}", "path": "net\\lahwran\\zanminimap\\Config.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * Initialize a waypoint with a color.\n * @param name Waypoint name\n * @param x Waypoint X location\n * @param z Waypoint Z location\n * @param enabled Whether the waypoint should be rendered\n * @param red red channel of color\n * @param green green channel of color\n * @param blue blue channel of color\n */\n", "func_signal": "public Waypoint(String name, int x, int z, boolean enabled, float red, float green, float blue)", "code": "{\n    this.name = name;\n    this.x = x;\n    this.z = z;\n    this.enabled = enabled;\n    this.red = red;\n    this.green = green;\n    this.blue = blue;\n}", "path": "net\\lahwran\\zanminimap\\Waypoint.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * Get world name. checks both MapName and ServerName.\n * \n * @return worldname\n */\n", "func_signal": "public String getWorldName()", "code": "{\n    String worldname = getMapName();\n    if (worldname.equals(\"MpServer\")) {\n        //This removes the port\n        String[] split = getServerName().toLowerCase().split(\":\");\n        worldname = split[0];\n    }\n    return worldname;\n}", "path": "net\\lahwran\\zanminimap\\ObfHub.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * Do rendering\n * \n * @param scWidth screen width\n * @param scHeight screen height\n */\n", "func_signal": "public void onRenderTick(int scWidth, int scHeight)", "code": "{\n    if (this.oldDir != obfhub.getPlayerYaw()) {\n        this.direction += this.oldDir - obfhub.getPlayerYaw();\n        this.oldDir = obfhub.getPlayerYaw();\n    }\n\n    if (this.direction >= 360.0f)\n        this.direction %= 360.0f;\n\n    if (this.direction < 0.0f) {\n        while (this.direction < 0.0f)\n            this.direction += 360.0f;\n    }\n\n\n    GL11.glPushMatrix();\n    GL11.glTranslatef(scWidth, 0.0f, 0.0f);\n    renderMap();\n    if (conf.full)\n        renderMapFull(0, scHeight);\n\n    GL11.glDepthMask(true);\n    GL11.glDisable(3042);\n    GL11.glEnable(2929);\n    GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);\n\n    if (conf.coords)\n        showCoords(0);\n    GL11.glPopMatrix();\n}", "path": "net\\lahwran\\zanminimap\\MapRenderer.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * Check if the other hook exists. if not, fire up.\n */\n", "func_signal": "public mod_ZanStarter()", "code": "{\n    boolean needmodloader = true;\n    try {\n        uq.class.getDeclaredField(\"minimap\");\n        needmodloader = false;\n        System.out.println(\"ZanMinimap: found modloader and GuiIngame hook: using GuiIngame hook\");\n    } catch (SecurityException e) {\n        e.printStackTrace();\n        System.out.println(\"ZanMinimap: found modloader, unable to check for GuiIngame hook: using modloader\");\n    } catch (NoSuchFieldException e) {\n        System.out.println(\"ZanMinimap: found modloader, did not find GuiIngame hook: using modloader\");\n    }\n\n    if (needmodloader) {\n        this.minimap = new ZanMinimap();\n        ModLoader.SetInGameHook(this, true, false);\n    }\n}", "path": "deobf\\mod_ZanStarter.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * @param minimap minimap instance to init with\n */\n", "func_signal": "public MapRenderer(ZanMinimap minimap)", "code": "{\n    menu = minimap.menu;\n    obfhub = minimap.obfhub;\n    conf = minimap.conf;\n    map = minimap.map;\n    texman = minimap.texman;\n}", "path": "net\\lahwran\\zanminimap\\MapRenderer.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * Parse an int using the format generated by dCoord()\n * \n * @param str string to parse\n * @return parsed\n */\n", "func_signal": "public int toInt(String str)", "code": "{\n    if (str.startsWith(\"n\")) {\n        return Integer.parseInt(str.substring(1)) * 8;\n    } else {\n        return Integer.parseInt(str);\n    }\n}", "path": "net\\lahwran\\zanminimap\\Menu.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * Write block colors to config file\n * @throws IOException any exceptions thrown while writing file\n */\n", "func_signal": "public void writeColors() throws IOException", "code": "{\n    File settingsFile = new File(ObfHub.getAppDir(\"minecraft\"), \"minimapcolors_099\");\n    PrintWriter out = new PrintWriter(new FileWriter(settingsFile));\n    out.print(\"#Available tints: \");\n    TintType[] availtints = TintType.values();\n    for (int i = 0; i < availtints.length; i++)\n    {\n        out.print(availtints[i].name());\n        if (i < availtints.length - 1) out.print(\", \");\n    }\n    out.println();\n    out.println(\"#format: blockid.metadata: color=RRGGBB/alpha=AA tint=TINTTYPE\");\n    for (int key = 1; key < blockColors.length; key++)\n    {\n        if (blockColors[key] == null) continue;\n        int meta = key >> 8;\n        int id = key & 0xff;\n        out.println(\"\" + id + \".\" + meta + \": color=\" + Integer.toHexString(blockColors[key].color) + \"/alpha=\" + Integer.toHexString(blockColors[key].alpha) + \" tint=\" + blockColors[key].tintType.name());\n    }\n    out.close();\n}", "path": "net\\lahwran\\zanminimap\\Config.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * This constructor inits state, but does not start the thread.\n * \n * @param minimap Minimap instance to initialize off\n */\n", "func_signal": "public MapCalculator(ZanMinimap minimap)", "code": "{\n    conf = minimap.conf;\n    obfhub = minimap.obfhub;\n    map = minimap.map;\n}", "path": "net\\lahwran\\zanminimap\\MapCalculator.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * Initialize a waypoint with default color.\n * @param name\n * @param x\n * @param z\n * @param enabled\n */\n", "func_signal": "public Waypoint(String name, int x, int z, boolean enabled)", "code": "{\n    this.name = name;\n    this.x = x;\n    this.z = z;\n    this.enabled = enabled;\n}", "path": "net\\lahwran\\zanminimap\\Waypoint.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * Take an array index and wrap it to the size of the array, properly\n * dealing with negative values\n * @param index index to wrap\n * @param arraysize size of array to wrap to\n * @return wrapped index\n */\n", "func_signal": "private final int wrapIndex(int index, int arraysize)", "code": "{\n    if (index < 0)\n        return arraysize + ((index+1) % arraysize) - 1;\n    else\n        return index % arraysize;\n}", "path": "net\\lahwran\\zanminimap\\Map.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * @return\n */\n", "func_signal": "public double getCurrOffsetX(double playerZ)", "code": "{\n    double wrapped = wrapIndex(((int) -playerZ), imageSize);\n    double leftover = 0;//playerZ - ((double)(int)playerZ);\n    return (wrapped+leftover)/2;\n}", "path": "net\\lahwran\\zanminimap\\Map.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * called on render ticks - calls updateLang and updateRenderEngine\n * \n * @see updateLang\n * @see updateRenderEngine\n */\n", "func_signal": "public void onRenderTick()", "code": "{\n    updateLang();\n    updateRenderEngine();\n}", "path": "net\\lahwran\\zanminimap\\ObfHub.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * Check for the aethermod, and if found, initialize default colors for\n * aether blocks, read any values from the config, and write out and\n * reformat the file.\n * @throws IOException any exceptions thrown while reading or writing\n */\n", "func_signal": "public void readAetherColors() throws IOException", "code": "{\n    try {\n        Class<?> aether = Class.forName(\"mod_Aether\");\n        HashMap<String,BlockColor> aetherColors = new HashMap<String,BlockColor>();\n        for(Field f:aether.getDeclaredFields())\n        {\n            if (f.getName().startsWith(\"idBlock\"))\n            {\n                aetherColors.put(f.getName().substring(\"idBlock\".length())+\".0\", new BlockColor(0xde00ff, 0xff, TintType.NONE));\n            }\n        }\n        \n        aetherColors.put(\"Aercloud.0\", new BlockColor(0xf3f3f3, 0xa6, TintType.NONE));\n        aetherColors.put(\"Aerogel.0\", new BlockColor(0xc3c9e3, 0xbc, TintType.NONE));\n        aetherColors.put(\"AetherDirt.0\", new BlockColor(0x646f73, 0xff, TintType.NONE));\n        aetherColors.put(\"AetherGrass.0\", new BlockColor(0x71a583, 0xff, TintType.NONE));\n        aetherColors.put(\"AetherPortal.0\", new BlockColor(0x275dff, 0x89, TintType.NONE));\n        aetherColors.put(\"AmbrosiumOre.0\", new BlockColor(0x9e9e9e, 0xff, TintType.NONE));\n        aetherColors.put(\"AmbrosiumTorch.0\", new BlockColor(0xaeac00, 0xff, TintType.NONE));\n        aetherColors.put(\"ChestMimic.0\", new BlockColor(0x8f691d, 0xff, TintType.NONE));\n        aetherColors.put(\"DungeonStone.0\", new BlockColor(0x797979, 0xff, TintType.NONE));\n        aetherColors.put(\"DungeonStone.1\", new BlockColor(0x9c8663, 0xff, TintType.NONE));\n        aetherColors.put(\"DungeonStone.2\", new BlockColor(0x9d8763, 0xff, TintType.NONE));\n        aetherColors.put(\"EnchantedGravitite.0\", new BlockColor(0xde76bd, 0xff, TintType.NONE));\n        aetherColors.put(\"Enchanter.0\", new BlockColor(0x393a2b, 0xff, TintType.NONE));\n        aetherColors.put(\"GoldenOakLeaves.0\", new BlockColor(0x393a2b, 0x9c, TintType.NONE));\n        aetherColors.put(\"GoldenOakSapling.0\", new BlockColor(0x968f38, 0xff, TintType.NONE));\n        aetherColors.put(\"GravititeOre.0\", new BlockColor(0x9e9e9e, 0xff, TintType.NONE));\n        aetherColors.put(\"Holystone.0\", new BlockColor(0x9e9e9e, 0xff, TintType.NONE));\n        aetherColors.put(\"Icestone.0\", new BlockColor(0x989c9c, 0xff, TintType.NONE));\n        aetherColors.put(\"Incubator.0\", new BlockColor(0x2a2a21, 0xff, TintType.NONE));\n        aetherColors.put(\"LightDungeonStone.0\", new BlockColor(0x9e9e9e, 0xff, TintType.NONE));\n        aetherColors.put(\"LockedDungeonStone.0\", new BlockColor(0x9e9e9e, 0xff, TintType.NONE));\n        aetherColors.put(\"LockedLightDungeonStone.0\", new BlockColor(0x9e9e9e, 0xff, TintType.NONE));\n        aetherColors.put(\"Log.0\", new BlockColor(0x796945, 0xff, TintType.NONE));\n        aetherColors.put(\"Pillar.0\", new BlockColor(0xe3d3c2, 0xff, TintType.NONE));\n        aetherColors.put(\"Plank.0\", new BlockColor(0x555540, 0xff, TintType.NONE));\n        aetherColors.put(\"Quicksoil.0\", new BlockColor(0xccc67b, 0xff, TintType.NONE));\n        aetherColors.put(\"SkyrootLeaves.0\", new BlockColor(0x9db361, 0x9a, TintType.NONE));\n        aetherColors.put(\"SkyrootSapling.0\", new BlockColor(0x8da457, 0x4a, TintType.NONE));\n        aetherColors.put(\"Trap.0\", new BlockColor(0x9e9e9e, 0xff, TintType.NONE));\n        aetherColors.put(\"TreasureChest.0\", new BlockColor(0x8f691d, 0xff, TintType.NONE));\n        aetherColors.put(\"ZaniteOre.0\", new BlockColor(0x9e9e9e, 0xff, TintType.NONE));\n        \n        File settingsFile = new File(ObfHub.getAppDir(\"minecraft\"), \"minimapcolors_aether\");\n        ArrayList<String> commentLines = new ArrayList<String>();\n        Pattern colorline = Pattern.compile(\"^([^. ]*.[0-9][0-9]?): color=([0-9a-fA-F]*).alpha=([0-9a-fA-F]*) tint=(.*)$\");\n        if (settingsFile.exists())\n        {\n            BufferedReader in = new BufferedReader(new FileReader(settingsFile));\n            String sCurrentLine;\n\n            while ((sCurrentLine = in.readLine()) != null)\n            {\n                if (sCurrentLine.startsWith(\"#\")) continue;\n                Matcher match = colorline.matcher(sCurrentLine);\n                // new\n                if (match.matches())\n                {\n                    String id = match.group(1);\n                    int col = Integer.parseInt(match.group(2), 16);\n                    int alpha = Integer.parseInt(match.group(3), 16);\n                    TintType tint = TintType.get(match.group(4));\n                    if (tint == null) tint = TintType.NONE;\n                    if(aetherColors.containsKey(id.split(\"\\\\.\")[0]+\".0\"))\n                    {\n                        aetherColors.put(id, new BlockColor(col, alpha, tint));\n                    }\n                    else\n                        commentLines.add(\"#aetherblock does not exist: \"+sCurrentLine);\n                }\n                else\n                {\n                    commentLines.add(\"#incorrect format: \"+sCurrentLine);\n                }\n            }\n            \n            in.close();\n        }\n        PrintWriter out = new PrintWriter(new FileWriter(settingsFile));\n        out.print(\"#Available tints: \");\n        TintType[] availtints = TintType.values();\n        for (int i = 0; i < availtints.length; i++)\n        {\n            out.print(availtints[i].name());\n            if (i < availtints.length - 1) out.print(\", \");\n        }\n        out.println();\n        /*out.print(\"#Available aether blocks: \");\n        List<String> sortedBlocks = asSortedList(aetherBlocks);+\n        int printed = \"#Available aether blocks: \".length();\n        for (int i=0; i<sortedBlocks.size(); i++)\n        {\n            int lastprinted = printed;\n            String thisone = sortedBlocks.get(i);\n            printed += thisone.length();\n            out.print(thisone);\n            if (i < sortedBlocks.size() - 1)\n            {\n                out.print(\", \");\n                printed += 2;\n            }\n            if ((lastprinted % 80) + (printed-lastprinted) > 80 )\n            {\n                out.print(\"\\n#\");\n                printed += 1;\n            }\n        }*/\n        out.println(\"#format: AetherName.metadata: color=RRGGBB/alpha=AA tint=TINTTYPE\");\n        List<String> aethernames = asSortedList(aetherColors.keySet());\n        for (String key:aethernames)\n        {\n            BlockColor val = aetherColors.get(key);\n            out.println(\"\" + key + \": color=\" + Integer.toHexString(val.color) + \"/alpha=\" + Integer.toHexString(val.alpha) + \" tint=\" + val.tintType.name());\n        }\n        for(String line:commentLines)\n        {\n            out.println(line);\n        }\n        out.close();\n        for(String key:aethernames)\n        {\n            String[] split = key.split(\"\\\\.\");\n            int id=aether.getDeclaredField(\"idBlock\"+split[0]).getInt(null);\n            blockColors[blockColorID(id, Integer.parseInt(split[1]))] = aetherColors.get(key);\n        }\n        System.out.println(\"zanminimap: aether found, loaded aether block colors\");\n    } catch (ClassNotFoundException c)\n    {\n        System.out.println(\"zanminimap: aether not found, not attempting to load aether block colors\");\n    }\n    catch (IllegalArgumentException e)\n    {\n        e.printStackTrace();\n    }\n    catch (SecurityException e)\n    {\n        System.out.println(\"zanminimap: you seem to be running me in a sandbox that prevents me from accessing mod_Aether or one of it's fields. nice going ...\");\n        e.printStackTrace();\n    }\n    catch (IllegalAccessException e)\n    {\n        System.out.println(\"zanminimap: you seem to be running me in a sandbox that prevents me from accessing mod_Aether or one of it's fields. nice going ...\");\n        e.printStackTrace();\n    }\n    catch (NoSuchFieldException e)\n    {\n        System.out.println(\"zanminimap: aether seems to have changed, bug lahwran about it! give him this error message:\");\n        e.printStackTrace();\n    }\n}", "path": "net\\lahwran\\zanminimap\\Config.java", "repo_name": "lahwran/zanmini", "stars": 24, "license": "None", "language": "java", "size": 418}
{"docstring": "/**\n * Gets the suggested maximum number of processes to fork.\n * @param requestedMemorySize the physical memory size (in bytes) that each process will consume.\n * @return the suggested number of processes that should be started in parallel.\n */\n", "func_signal": "public static int getSuggestedMaximumProcesses(long requestedMemorySize)", "code": "{\n    final Runtime runtime = Runtime.getRuntime();\n    final String os = System.getProperty(\"os.name\");\n    long freeMemory = 0L;\n    try {\n        if (os.equals(\"Linux\")) {\n            final Process process = runtime.exec(new String[] {\"/usr/bin/free\", \"-ob\"});\n            final BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            in.readLine();\n            final String line = in.readLine();\n            final String[] fields = line.split(\"\\\\s+\");\n            freeMemory = Long.parseLong(fields[3]);\n        } else if (os.equals(\"SunOS\")) {\n            Process process = runtime.exec(new String[] {\"/bin/kstat\", \"-p\", \"-nsystem_pages\", \"-sfreemem\"});\n            BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String line = in.readLine();\n            String[] fields = line.split(\"\\\\s+\");\n            freeMemory = Long.parseLong(fields[1]);\n            process = runtime.exec(new String[] {\"/bin/getconf\", \"PAGESIZE\"});\n            in = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            line = in.readLine();\n            freeMemory *= Long.parseLong(line);\n        } else if (os.equals(\"Mac OS X\") || os.equals(\"Darwin\")) {\n            final Process process = runtime.exec(\"/usr/bin/vm_stat\");\n            final BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            final Matcher matcher = Pattern.compile(\"[^0-9]*([0-9]+)[^0-9]*\").matcher(in.readLine());\n            if (matcher.matches()) {\n                freeMemory = Long.parseLong(matcher.group(1));\n            }\n            matcher.reset(in.readLine());\n            if (matcher.matches()) {\n                freeMemory *= Long.parseLong(matcher.group(1));\n            }\n        } else if (os.equals(\"GuestVM\")) {\n            freeMemory = 0L;\n        }\n    } catch (Exception e) {\n        freeMemory = 0L;\n    }\n    final int processors = runtime.availableProcessors();\n    if (freeMemory <= 0L || freeMemory >= requestedMemorySize * processors) {\n        return processors;\n    }\n    return Math.max(1, (int) (freeMemory / requestedMemorySize));\n}", "path": "JavaInJava\\src\\com\\sun\\max\\util\\RuntimeInfo.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Converts this object to a String array with one array element for each classpath entry.\n *\n * @return the newly created String array with one element per classpath entry\n */\n", "func_signal": "public String[] toStringArray()", "code": "{\n    final String[] result = new String[entries().size()];\n    int z = 0;\n    for (Classpath.Entry e : entries()) {\n        result[z] = e.path();\n        z++;\n    }\n    return result;\n}", "path": "JavaInJava\\src\\com\\sun\\max\\program\\Classpath.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Creates a classpath {@link Entry} from a given file system path.\n *\n * @param path a file system path denoting a classpath entry\n */\n", "func_signal": "public static Entry createEntry(String path)", "code": "{\n    final File pathFile = new File(path);\n    if (pathFile.isDirectory()) {\n        return new Directory(pathFile);\n    } else if (path.endsWith(\".zip\") || path.endsWith(\".jar\")) {\n        if (pathFile.exists() && pathFile.isFile()) {\n            return new Archive(pathFile);\n        }\n    }\n    //ProgramWarning.message(\"Class path entry is neither a directory nor a JAR file: \" + path);\n    return new PlainFile(pathFile);\n}", "path": "JavaInJava\\src\\com\\sun\\max\\program\\Classpath.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Returns an integer with all the bits in its two's complement binary representation that are at index {@code\n * highestBitIndex} or lower set to 1.\n *\n * @param highestBitIndex the index of the highest bit to be set in the returned value. Only the low 5 bits of {@code\n *            highestBitIndex} are used. That is, if {@code highestBitIndex > 31} or {@code highestBitIndex < 0} then\n *            the highest bit to be set is given by {@code highestBitSet & 0x1F}.\n */\n", "func_signal": "public static int lowBitsSet(int highestBitIndex)", "code": "{\n    final int n = highestBitIndex & 0x1f;\n    return (1 << n) | ((1 << n) - 1);\n}", "path": "JavaInJava\\src\\com\\sun\\max\\lang\\Ints.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Gets a classpath corresponding to the class search order used by the boot class loader.\n */\n", "func_signal": "public static Classpath bootClassPath()", "code": "{\n    final String value = System.getProperty(\"sun.boot.class.path\");\n    if (value == null) {\n        return EMPTY;\n    }\n    return new Classpath(value.split(File.pathSeparator));\n}", "path": "JavaInJava\\src\\com\\sun\\max\\program\\Classpath.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Creates a new classpath from an array of classpath entries.\n *\n * @param paths an array of classpath entries\n */\n", "func_signal": "public Classpath(String[] paths)", "code": "{\n    final Entry[] entryArray = new Entry[paths.length];\n    for (int i = 0; i < paths.length; ++i) {\n        final String path = paths[i];\n        entryArray[i] = createEntry(path);\n    }\n    this.entries = Arrays.asList(entryArray);\n}", "path": "JavaInJava\\src\\com\\sun\\max\\program\\Classpath.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Gets the current opcode. This method will never return the\n * {@link Bytecodes#WIDE WIDE} opcode, but will instead\n * return the opcode that is modified by the {@code WIDE} opcode.\n * @return the current opcode; {@link Bytecodes#END} if at or beyond the end of the code\n */\n", "func_signal": "public int currentBC()", "code": "{\n    if (opcode == Bytecodes.WIDE) {\n        return Bytes.beU1(code, curBCI + 1);\n    } else {\n        return opcode;\n    }\n}", "path": "JavaInJava\\src\\com\\sun\\cri\\bytecode\\BytecodeStream.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Converts a given reference to an object to a {@link Throwable} instance.\n *\n * @param vm the tele VM to be used if {@code throwableReference} is a reference in a VM's address space\n * @param throwableReference the reference to be converted to a {@code Throwable instance}\n * @return a {@code Throwable instance} converted from {@code throwableReference}\n */\n", "func_signal": "private static Throwable toThrowable(TeleVM vm, ReferenceValue throwableReference)", "code": "{\n    if (throwableReference instanceof TeleReferenceValue) {\n        try {\n            return (Throwable) vm.heap().makeTeleObject(throwableReference.asReference()).deepCopy();\n        } catch (Exception e1) {\n            throw ProgramError.unexpected(\"Could not make a local copy of a remote Throwable\", e1);\n        }\n    } else {\n        return (Throwable) throwableReference.asBoxedJavaValue();\n    }\n}", "path": "JavaInJava\\src\\com\\sun\\max\\tele\\interpreter\\Machine.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Returns a string representation of the contents of the specified array.\n * Adjacent elements are separated by the specified separator. Elements are\n * converted to strings as by <tt>String.valueOf(int)</tt>.\n *\n * @param array     the array whose string representation to return\n * @param separator the separator to use\n * @return a string representation of <tt>array</tt>\n * @throws NullPointerException if {@code array} or {@code separator} is null\n */\n", "func_signal": "public static String toString(int[] array, String separator)", "code": "{\n    if (array == null || separator == null) {\n        throw new NullPointerException();\n    }\n    if (array.length == 0) {\n        return \"\";\n    }\n\n    final StringBuilder buf = new StringBuilder();\n    buf.append(array[0]);\n\n    for (int i = 1; i < array.length; i++) {\n        buf.append(separator);\n        buf.append(array[i]);\n    }\n\n    return buf.toString();\n}", "path": "JavaInJava\\src\\com\\sun\\max\\lang\\Ints.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Looks for an exception handler in the current execution scope that handles a given exception. If one is found,\n * the execution context is adjusted appropriately so that execution will resume at the discovered handler.\n * If no handler is found, the execution context is not modified.\n *\n * @param throwableReference the reference value representing the exception to be handled\n * @return {@code true} if an appropriate exception handler was found, {@code false} otherwise\n */\n", "func_signal": "public boolean handleException(ReferenceValue throwableReference)", "code": "{\n    if (currentThread.handleException(throwableReference.getClassActor())) {\n        push(throwableReference);\n        return true;\n    }\n    return false;\n}", "path": "JavaInJava\\src\\com\\sun\\max\\tele\\interpreter\\Machine.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Gets a classpath corresponding to the class search order used by the application class loader.\n */\n", "func_signal": "public static Classpath fromSystem()", "code": "{\n    final String value = System.getProperty(\"sun.boot.class.path\") + File.pathSeparator + extensionClasspath() + System.getProperty(\"java.class.path\");\n    return new Classpath(value.split(File.pathSeparator));\n}", "path": "JavaInJava\\src\\com\\sun\\max\\program\\Classpath.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Searches for an existing file corresponding to an directory entry in this classpath composed with a given path\n * suffix.\n *\n * @param suffix a file path relative to a directory entry of this classpath\n * @return a file corresponding to the {@linkplain File#File(File, String) composition} of the first directory entry\n *         of this classpath with {@code suffix} that denotes an existing file or null if so such file exists\n */\n", "func_signal": "public File findFile(String suffix)", "code": "{\n    for (Entry entry : entries()) {\n        if (entry instanceof Directory) {\n            final File file = new File(((Directory) entry).directory, suffix);\n            if (file.exists()) {\n                return file;\n            }\n        }\n    }\n    return null;\n}", "path": "JavaInJava\\src\\com\\sun\\max\\program\\Classpath.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Computes the numbers of characters in the base-10 string representation of a given integer, including the '-'\n * prefix for a negative integer. That is, this method computes the length of the String returned by\n * {@link Integer#toString(int)} without requiring a String object to be created.\n *\n * @param i an integer\n * @return the length of the string that would be returned by calling {@link Integer#toString(int)} with {@code i}\n *         as the argument\n */\n", "func_signal": "public static int sizeOfBase10String(int x)", "code": "{\n    if (x == Integer.MIN_VALUE) {\n        return \"-2147483648\".length();\n    }\n    final int posX = x < 0 ? -x : x;\n    for (int i = 0;; i++) {\n        if (posX <= sizeBase10Table[i]) {\n            if (x < 0) {\n                return i + 2;\n            }\n            return i + 1;\n        }\n    }\n}", "path": "JavaInJava\\src\\com\\sun\\max\\lang\\Ints.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Computes the minimum value in an array of integers.\n *\n * @param ints the array of integers from which the minimum is computed. This array must have at least one element.\n * @return the minimum value in {@code ints}\n * @throws ArrayIndexOutOfBoundsException if {@code ints.length == 0}\n */\n", "func_signal": "public static int min(int[] ints)", "code": "{\n    int min = ints[0];\n    for (int n : ints) {\n        if (n < min) {\n            min = n;\n        }\n    }\n    return min;\n}", "path": "JavaInJava\\src\\com\\sun\\max\\lang\\Ints.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Creates a new {@code BytecodeStream} for the specified bytecode.\n * @param code the array of bytes that contains the bytecode\n */\n", "func_signal": "public BytecodeStream(byte[] code)", "code": "{\n    this.code = code;\n    setBCI(0);\n}", "path": "JavaInJava\\src\\com\\sun\\cri\\bytecode\\BytecodeStream.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Calculates an unsigned integer which is greater than or equal to {@code value} and\n * is a multiple of {@code by}.  Results are undefined if {@code by} is not\n * a power of two.\n * @param value the unsigned integer which is to be rounded upwards.\n * @param by a positive power of two.\n * @return the unsigned integer calculated by rounding upwards to a multiple of {@code by}.\n */\n", "func_signal": "@INLINE\npublic static int roundUnsignedUpByPowerOfTwo(int value, int by)", "code": "{\n    assert isPowerOfTwoOrZero(by);\n    final int mask = by - 1;\n    return (value + mask) & ~mask;\n}", "path": "JavaInJava\\src\\com\\sun\\max\\lang\\Ints.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Reads the index of a local variable for one of the load or store instructions.\n * The WIDE modifier is handled internally.\n * @return the index of the local variable\n */\n", "func_signal": "public int readLocalIndex()", "code": "{\n    // read local variable index for load/store\n    if (opcode == Bytecodes.WIDE) {\n        return Bytes.beU2(code, curBCI + 2);\n    }\n    return Bytes.beU1(code, curBCI + 1);\n}", "path": "JavaInJava\\src\\com\\sun\\cri\\bytecode\\BytecodeStream.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Handles an exception at the current execution point in this frame by updating the {@linkplain #setBytecodePosition(int)\n * instruction pointer} to the matching exception handler in this frame. If no matching exception handler is found\n * for the current execution point and the given exception type, then the instruction pointer in this frame is left\n * unmodified.\n * <p>\n * The current execution point is derived from the value of {@link ExecutionFrame#currentBytePosition()} which is now at the first\n * byte passed the instruction currently being executed. That is, an instruction is completely decoded before any\n * exceptions are thrown while executing it.\n *\n * @param throwableClassActor the type of the exception being thrown\n * @return {@code true} if an exception handler was found, {@code false} otherwise\n */\n", "func_signal": "public boolean handleException(ClassActor throwableClassActor)", "code": "{\n    final int bcp = currentOpcodePosition;\n    final ExceptionHandlerEntry[] handlers = method().codeAttribute().exceptionHandlerTable();\n    for (ExceptionHandlerEntry handler : handlers) {\n        if (bcp >= handler.startPosition() && bcp < handler.endPosition()) {\n            if (handler.catchTypeIndex() == 0) {\n                currentBytePosition = handler.handlerPosition();\n                return true;\n            }\n            final ClassActor catchType = constantPool().classAt(handler.catchTypeIndex()).resolve(constantPool(), handler.catchTypeIndex());\n            if (catchType.isAssignableFrom(throwableClassActor)) {\n                currentBytePosition = handler.handlerPosition();\n                return true;\n            }\n        }\n    }\n    return false;\n}", "path": "JavaInJava\\src\\com\\sun\\max\\tele\\interpreter\\ExecutionFrame.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Gets the classpath derived from the value of the {@code \"java.ext.dirs\"} system property.\n *\n * @see \"http://java.sun.com/javase/6/docs/technotes/guides/extensions/extensions.html\"\n */\n", "func_signal": "private static String extensionClasspath()", "code": "{\n    final String extDirs = System.getProperty(\"java.ext.dirs\");\n    if (extDirs != null) {\n        final StringBuilder buf = new StringBuilder();\n        for (String extDirPath : extDirs.split(File.pathSeparator)) {\n            final File extDir = new File(extDirPath);\n            if (extDir.isDirectory()) {\n                for (File file : extDir.listFiles()) {\n                    if (file.isDirectory() ||\n                        (file.isFile() && (file.getName().endsWith(\".jar\") || file.getName().endsWith(\".zip\")))) {\n                        if (buf.length() != 0) {\n                            buf.append(File.pathSeparatorChar);\n                        }\n                        buf.append(file.getAbsolutePath());\n                    }\n                }\n            } else {\n                // Ignore non-directory\n            }\n        }\n        if (buf.length() != 0) {\n            buf.append(File.pathSeparatorChar);\n            return buf.toString();\n        }\n    }\n    return \"\";\n}", "path": "JavaInJava\\src\\com\\sun\\max\\program\\Classpath.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Reads a constant pool index for the current instruction.\n * @return the constant pool index\n */\n", "func_signal": "public char readCPI()", "code": "{\n    if (opcode == Bytecodes.LDC) {\n        return (char) Bytes.beU1(code, curBCI + 1);\n    }\n    return (char) Bytes.beU2(code, curBCI + 1);\n}", "path": "JavaInJava\\src\\com\\sun\\cri\\bytecode\\BytecodeStream.java", "repo_name": "hborders/JavaInJava", "stars": 16, "license": "None", "language": "java", "size": 316}
{"docstring": "/**\n * Get the items involved with the given user \n * @param user_id the given user's id \n * @return the items involved with the given user\n */\n", "func_signal": "public ArrayList<Integer> getItemsByUser(int user_id)", "code": "{\n\tArrayList<Integer> list = new ArrayList<Integer>();\n\tfor( int i = 0; i != count; ++i){\n\t\tif(users.get(i) == user_id){\n\t\t\tlist.add(items.get(i));\n\t\t}\n\t}\n\treturn list;\n}", "path": "src\\org\\cis\\data\\Ratings.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Train the BiasedBaseline model\n */\n", "func_signal": "public void trainModel()", "code": "{\n\tinitModel();\n\tlearnBias();\n}", "path": "src\\org\\cis\\cf\\algorithm\\BiasedBaseline.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Read movielens ratings data from text file\n */\n", "func_signal": "public Ratings read(String filePath)", "code": "{\n\tRatings ratings = new Ratings();\n\t\n\ttry {\n\t\tBufferedReader br = new BufferedReader(new FileReader(filePath));\n\t\tString line;\n\t\tString[] words;\n\t\tint u,i,r;\n\t\t\n\t\tint count = 0;\n\t\twhile( (line = br.readLine()) != null){\n\t\t\twords = line.split(\"\\t\");\n\t\t\tu = Integer.parseInt(words[0]);\n\t\t\ti = Integer.parseInt(words[1]);\n\t\t\tr = Integer.parseInt(words[2]);\n\t\t\tratings.addRating(u, i, r);\n\t\t\tcount++;\n\t\t}\n\t\tSystem.out.println(\"read file: \" + filePath + \" end. The total line number is: \" + count);\n\t\tbr.close();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\treturn ratings;\n}", "path": "src\\org\\cis\\io\\MovielensRatingsReader.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Predict the rating value with given user and item\n */\n", "func_signal": "public double predict(int user_id, int item_id, boolean bound)", "code": "{\n\t\n\tdouble result = userBias[user_id] + itemBias[item_id];\n\tresult += globalBias;\n\t\n\tif(bound){\n\t\tif( result > maxRating)\n\t\t\tresult = (double) maxRating;\n\t\tif( result < minRating)\n\t\t\tresult = (double) minRating;\n\t}\n\treturn result;\n}", "path": "src\\org\\cis\\cf\\algorithm\\BiasedBaseline.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Predict the rating value with given user_id and item_id\n */\n", "func_signal": "public double predict(int user_id, int item_id, boolean bound)", "code": "{\n\t\n\tif(user_id >= p.rows())\n\t\treturn globalBias;\n\tif(item_id >= itemFeatures.rows())\n\t\treturn globalBias;\n\t\n\tAlgebra algebra = new Algebra();\n\tdouble result = userBias[user_id] + itemBias[item_id];\n\tresult += globalBias;\n\tresult += algebra.mult(p.viewRow(user_id), itemFeatures.viewRow(item_id));\n\t\n\tif(bound){\n\t\tif( result > maxRating)\n\t\t\tresult = (double) maxRating;\n\t\tif( result < minRating)\n\t\t\tresult = (double) minRating;\n\t}\n\treturn result;\n}", "path": "src\\org\\cis\\cf\\algorithm\\SVDPlusPlus.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Construct an empty Ratings\n */\n", "func_signal": "public Ratings()", "code": "{\n\tthis.count  = 0;\n\tthis.users  = new ArrayList<Integer>();\n\tthis.items  = new ArrayList<Integer>();\n\tthis.values = new ArrayList<Integer>();\n\t\n\tthis.maxItemId = -1;\n\tthis.maxUserId = -1;\n\t\n\tthis.maxRating = Integer.MIN_VALUE;\n\tthis.minRating = Integer.MAX_VALUE;\n}", "path": "src\\org\\cis\\data\\Ratings.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Construct SVD++ algorithm\n * \n * @param ratings\n * @param featureNumber\n * @param learnRate\n * @param userReg\n * @param itemReg\n * @param biasLearnRate\n * @param biasUserReg\n * @param biasItemReg\n * @param maxIterNumber\n */\n", "func_signal": "public SVDPlusPlus(Ratings ratings, int featureNumber,\n\t\tdouble learnRate, double userReg, double itemReg, \n\t\tdouble biasLearnRate, double biasUserReg, double biasItemReg,\n\t\tint maxIterNumber)", "code": "{\n\tthis.ratings = ratings;\n\t\n\tthis.userNumber = ratings.totalUserNumber();\n\tthis.itemNumber = ratings.totalItemNumber();\n\t\n\tthis.maxRating = ratings.getMaxRating();\n\tthis.minRating = ratings.getMinRating();\n\t\n\tthis.globalBias = ratings.averageRating();\n\t\n\tthis.trainNumber = ratings.getCount();\n\t\n\tthis.learnRate = learnRate;\n\tthis.userReg   = userReg;\n\tthis.itemReg   = itemReg;\n\t\n\tthis.biasItemReg = biasItemReg;\n\tthis.biasUserReg = biasUserReg;\n\tthis.biasLearnRate = biasLearnRate;\n\t\n\t\n\tthis.maxIterNumber = maxIterNumber;\n\t\n\tthis.featureNumber = featureNumber;\n\t\n\tthis.p = new DenseDoubleMatrix2D(userNumber + 1, featureNumber);\n\tthis.y = new DenseDoubleMatrix2D(itemNumber + 1, featureNumber);\n\tthis.userFeatures = new DenseDoubleMatrix2D(userNumber + 1, featureNumber);\n\tthis.itemFeatures = new DenseDoubleMatrix2D(itemNumber + 1, featureNumber);\n\t\n\tthis.userBias     = new double[userNumber + 1];\n\tthis.itemBias     = new double[itemNumber + 1];\n}", "path": "src\\org\\cis\\cf\\algorithm\\SVDPlusPlus.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Update user bias and item bias in each iteration\n */\n", "func_signal": "private void iterate(ArrayList<Integer> list)", "code": "{\n\tint user_id, item_id, rating;\n\tdouble prediction, gradient;\n\tfor(int index = 0; index != trainNumber; ++index){\n\t\t\n\t\tuser_id = ratings.getUser(index);\n\t\titem_id = ratings.getItem(index);\n\t\trating  = ratings.getRating(index);\n\t\t\n\t\tprediction = globalBias + userBias[user_id] + itemBias[item_id];\n\t\tgradient = rating - prediction;\n\t\t\n\t\tuserBias[user_id] += learnRate * learnRate * (gradient - learnRate  * userBias[user_id]);\n\t\titemBias[item_id] += learnRate * learnRate * (gradient - learnRate  * itemBias[item_id]);\n\t\t\n\t}\n}", "path": "src\\org\\cis\\cf\\algorithm\\BiasedBaseline.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Clear the data set\n */\n", "func_signal": "public void clear()", "code": "{\n\tusers.clear();\n\titems.clear();\n\tvalues.clear();\n}", "path": "src\\org\\cis\\data\\Ratings.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Get the users involved with the given item\n * @param item_id the given item's id\n * @return the users involved with the given item\n */\n", "func_signal": "public ArrayList<Integer> getUsersByItem(int item_id)", "code": "{\n\tArrayList<Integer> list = new ArrayList<Integer>();\n\tfor(int i = 0; i != count; ++i){\n\t\tif(items.get(i) == item_id){\n\t\t\tlist.add(users.get(i));\n\t\t}\n\t}\n\treturn list;\n}", "path": "src\\org\\cis\\data\\Ratings.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Train the model of SVD++\n */\n", "func_signal": "public void trainModel()", "code": "{\n\tinitModel();\n\tgetImplicitInfo();\n\tlearnFeatures();\n\tcalcUserFeatures();\n}", "path": "src\\org\\cis\\cf\\algorithm\\SVDPlusPlus.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Get the index sorted by user\n * @return the index sorted by user\n */\n", "func_signal": "public ArrayList<ArrayList<Integer>> getIndicesByUser()", "code": "{\n\tBuildUserIndices();\n\treturn this.indexByUser;\n}", "path": "src\\org\\cis\\data\\Ratings.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Get the index sorted by item\n * @return the index sorted by item\n */\n", "func_signal": "public ArrayList<ArrayList<Integer>> getIndicesByItem()", "code": "{\n\tBuildItemIndices();\n\treturn this.indexByItem;\n}", "path": "src\\org\\cis\\data\\Ratings.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Construct BiasedBaseline algorithm\n * \n * @param ratings\n * @param maxIterNumber\n * @param learnRate\n */\n", "func_signal": "public BiasedBaseline(Ratings ratings, int maxIterNumber, double learnRate)", "code": "{\n\tthis.ratings = ratings;\n\tthis.userNumber = ratings.totalUserNumber();\n\tthis.itemNumber = ratings.totalItemNumber();\n\tthis.globalBias = ratings.averageRating();\n\tthis.maxIterNumber = maxIterNumber;\n\tthis.trainNumber  = ratings.getCount();\n\tthis.learnRate  = learnRate;\n\t\n\tthis.maxRating = ratings.getMaxRating();\n\tthis.minRating = ratings.getMinRating();\n\t\n\tuserBias = new double[userNumber + 1];\n\titemBias = new double[itemNumber + 1];\n}", "path": "src\\org\\cis\\cf\\algorithm\\BiasedBaseline.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Init the model parameters\n */\n", "func_signal": "private void initModel()", "code": "{\n\tRandom rand = new Random();\n\t\n\tfor( int u = 0; u != userNumber; ++u){\n\t\tfor( int f = 0; f != featureNumber; ++f){\n\t\t\tp.setQuick(u, f, rand.nextGaussian() * 0.01);\n\t\t}\n\t\tuserBias[u] = rand.nextGaussian() * 0.01;\n\t}\n\t\n\tfor( int i = 0; i != itemNumber; ++i){\n\t\tfor( int f = 0; f != featureNumber; ++f){\n\t\t\titemFeatures.setQuick(i, f, rand.nextGaussian() * 0.01);\n\t\t\ty.setQuick(i, f, rand.nextGaussian() * 0.01);\n\t\t}\n\t\titemBias[i] = rand.nextGaussian() * 0.01;\n\t}\n}", "path": "src\\org\\cis\\cf\\algorithm\\SVDPlusPlus.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Build the item indices\n */\n", "func_signal": "public void BuildItemIndices()", "code": "{\n\tindexByItem = new ArrayList<ArrayList<Integer>>();\n\tfor(int i = 0; i <= maxItemId; ++i)\n\t\tindexByItem.add(new ArrayList<Integer>());\n\t\n\t// ons pass over the data\n\tfor (int index = 0; index < count; index++)\n\t\tindexByItem.get(items.get(index)).add(index);\n}", "path": "src\\org\\cis\\data\\Ratings.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Generate the user factors from p and y\n */\n", "func_signal": "private void calcUserFeatures()", "code": "{\n\tint user_id;\n\tfor(user_id = 1; user_id <= userNumber; ++user_id){\n\t\tint len = whoRatedWhat[user_id].length;\n\t\tdouble norm_denominator = Math.sqrt(len);\n\t\tDenseDoubleMatrix1D userPlusY = new DenseDoubleMatrix1D(featureNumber);\n\t\tuserPlusY.assign(0);\n\t\tfor( int j = 0; j != len; ++j){\n\t\t\tfor( int d = 0; d != featureNumber; ++d){\n\t\t\t\tuserPlusY.setQuick(d, userPlusY.getQuick(d) + y.getQuick(whoRatedWhat[user_id][j], d));\n\t\t\t}\n\t\t}\n\t\tfor( int d = 0; d != featureNumber; ++d){\n\t\t\tuserPlusY.setQuick(d, userPlusY.getQuick(d)/norm_denominator + p.getQuick(user_id, d));\n\t\t\tuserFeatures.setQuick(user_id, d, userPlusY.getQuick(d));\n\t\t}\n\t}\n}", "path": "src\\org\\cis\\cf\\algorithm\\SVDPlusPlus.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Get the average rating of all the rating values\n * \n * @return the average rating\n */\n", "func_signal": "public double averageRating()", "code": "{\n\tdouble avg = 0;\n\tfor( int i = 0; i != count; ++i)\n\t\tavg += values.get(i);\n\treturn avg/count;\n}", "path": "src\\org\\cis\\data\\Ratings.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Learn the user and item bias with given max iteration number\n */\n", "func_signal": "private void learnBias()", "code": "{\n\tfor(int iter = 1; iter <= maxIterNumber; ++iter){\n\t\titerate(ratings.getRandomIndex());\n\t}\n}", "path": "src\\org\\cis\\cf\\algorithm\\BiasedBaseline.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/**\n * Build the user indices\n */\n", "func_signal": "public void BuildUserIndices()", "code": "{\n\tindexByUser = new ArrayList<ArrayList<Integer>>();\n\tfor (int u = 0; u <= maxUserId; u++)\n\t\tindexByUser.add(new ArrayList<Integer>());\n\t// one pass over the data\n\tfor (int index = 0; index < count; index++)\n\t\tindexByUser.get(users.get(index)).add(index);\n}", "path": "src\\org\\cis\\data\\Ratings.java", "repo_name": "zhangsi/CisRec", "stars": 16, "license": "None", "language": "java", "size": 6905}
{"docstring": "/* (non-Javadoc)\n * @see android.view.View#onTouchEvent(android.view.MotionEvent)\n */\n", "func_signal": "@Override\npublic boolean onTouchEvent(MotionEvent event)", "code": "{\n    if (event.getAction() != MotionEvent.ACTION_DOWN) {\n        return super.onTouchEvent(event);\n    }\n    int col = (int)(event.getX() / this.cellWidth);\n\n    //\u66dc\u65e5\u898b\u51fa\u3057\u3092\u30aa\u30d5\u30bb\u30c3\u30c8\u3068\u3059\u308b\n    float y = event.getY() - this.captionHeight;\n    if ( y <= 0 ) {\n        this.select(col, 0);\n    } else {\n        this.select(col, 1 + (int)( y / this.cellHeight));\n    }\n    //Log.d(TAG, \"onTouchEvent: x \" + selCol + \", y \" + selRow);\n    return false; //false \u89aa\u306b\u30a4\u30d9\u30f3\u30c8\u3092\u623b\u3059  true \u3053\u3053\u3067\u30a4\u30d9\u30f3\u30c8\u6b62\u3081\u308b\n}", "path": "src\\org\\kazzz\\view\\calendar\\MonthlyCalendarView.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/**\n * calendar\u3092\u53d6\u5f97\u3057\u307e\u3059\n * @return Calendar calendar\u304c\u623b\u308a\u307e\u3059\n */\n", "func_signal": "public Calendar getCalendar()", "code": "{\n    if ( this.calendar == null ) {\n        this.calendar = Calendar.getInstance();\n    }\n    return this.calendar;\n}", "path": "src\\org\\kazzz\\view\\calendar\\MonthlyCalendarView.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/**\n * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n * @param in \u5165\u529b\u3068\u306a\u308bParcel\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30bb\u30c3\u30c8\n */\n", "func_signal": "private SavedState(Parcel in)", "code": "{\n    super(in);\n    this.hour = in.readInt();\n    this.minute = in.readInt();\n}", "path": "src\\org\\kazzz\\view\\dialog\\TimePickerEx.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/* (non-Javadoc)\n * @see android.view.View#onKeyDown(int, android.view.KeyEvent)\n */\n", "func_signal": "@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event)", "code": "{\n     //Log.d(TAG, \"onKeyDown: keycode=\" + keyCode + \", event=\"\n     //       + event);\n      switch (keyCode) {\n      case KeyEvent.KEYCODE_DPAD_UP:\n          this.select(this.selCol, this.selRow - 1);\n          break;\n      case KeyEvent.KEYCODE_DPAD_DOWN:\n          this.select(this.selCol, this.selRow + 1);\n          break;\n      case KeyEvent.KEYCODE_DPAD_LEFT:\n          this.select(this.selCol - 1, this.selRow);\n          break;\n      case KeyEvent.KEYCODE_DPAD_RIGHT:\n          this.select(this.selCol + 1, this.selRow);\n          break;\n      case KeyEvent.KEYCODE_ENTER:\n          this.select(this.selCol, this.selRow);\n          break;\n      case KeyEvent.KEYCODE_SPACE:\n          this.select(this.selCol, this.selRow);\n          break;\n      default:\n         return super.onKeyDown(keyCode, event);\n      }\n      return true;\n}", "path": "src\\org\\kazzz\\view\\calendar\\MonthlyCalendarView.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/**\n * \u30ea\u30b9\u30ca\u306b\u901a\u77e5\u3092\u884c\u3044\u307e\u3059\n */\n", "func_signal": "private void onTimeChanged()", "code": "{\n    this.onTimeChangedListener.onTimeChanged(this\n            , this.getCurrentHour(), this.getCurrentMinute());\n}", "path": "src\\org\\kazzz\\view\\dialog\\TimePickerEx.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/**\n * \u5217\u3001\u884c\u306b\u5bfe\u5fdc\u3057\u305f\u77e9\u5f62\u9818\u57df\u3092\u53d6\u5f97\u3057\u307e\u3059\n * @param col \u5217\u306e\u5e8f\u6570\u3092\u30bb\u30c3\u30c8\n * @param row \u884c\u306e\u5e8f\u6570\u3092\u30bb\u30c3\u30c8\n * @param rect \u63cf\u753b\u3059\u308b\u77e9\u5f62\u3092\u30bb\u30c3\u30c8 \n */\n", "func_signal": "private void getRect(int col, int row, Rect rect)", "code": "{\n    int left, top, right, bottom;\n    float offset = this.captionHeight; //\u66dc\u65e5\u898b\u51fa\u3057\u306f\u30aa\u30d5\u30bb\u30c3\u30c8\u3068\u898b\u306a\u3059\n    if ( row == 0 ) {\n       //\u66dc\u65e5\u90e8\u5206\u306e\u9078\u629e\n       left = (int) (col * this.cellWidth);\n       top = (int) (row * this.cellHeight);\n       right = (int) (col * this.cellWidth + this.cellWidth);\n       bottom = (int) (row * this.cellHeight + offset);\n    } else {\n       //\u65e5\u4ed8\u90e8\u5206\u306e\u9078\u629e\n       left = (int) (col * this.cellWidth);\n       right = (int) ((col * this.cellWidth ) + this.cellWidth);\n       //select\u30e1\u30bd\u30c3\u30c9\u3067\u884c\u306f1\u52a0\u7b97\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u77e9\u5f62\u306e\u8a08\u7b97\u3067\u306f1\u6e1b\u3058\u3066\u5143\u306b\u623b\u3059\n       top = (int) ( offset +  ( (row-1) * this.cellHeight) ) ;\n       bottom = (int) (offset + ( (row-1) * this.cellHeight) + this.cellHeight);\n    }\n    rect.set(left, top, right, bottom);\n}", "path": "src\\org\\kazzz\\view\\calendar\\MonthlyCalendarView.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/**\n * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n * @param superState \u4fdd\u6301\u5bfe\u8c61\u306eParcelable\u3092\u30bb\u30c3\u30c8\n * @param hour \u6642\u9593\u3092\u30bb\u30c3\u30c8\n * @param minute \u5206\u3092\u30bb\u30c3\u30c8\n */\n", "func_signal": "private SavedState(Parcelable superState, int hour, int minute)", "code": "{\n    super(superState);\n    this.hour = hour;\n    this.minute = minute;\n}", "path": "src\\org\\kazzz\\view\\dialog\\TimePickerEx.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/* (non-Javadoc)\n * @see android.view.View#onMeasure(int, int)\n */\n", "func_signal": "@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n    //super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n    this.setMeasuredDimension(\n            this.measureWidth(widthMeasureSpec)\n            , this.measureHeight(heightMeasureSpec));    \n}", "path": "src\\org\\kazzz\\view\\calendar\\MonthlyCalendarView.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/**\n * \u73fe\u5728\u306e\u5206\u3067\u30d3\u30e5\u30fc\u3092\u66f4\u65b0\u3057\u307e\u3059\n */\n", "func_signal": "private void updateMinuteDisplay()", "code": "{\n    int currentMin = this.currentMinute;\n    this.minutePicker.setCurrent(currentMin);\n    this.minutePicker.invalidate();\n    this.onTimeChanged();\n}", "path": "src\\org\\kazzz\\view\\dialog\\TimePickerEx.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/**\n * \u4eca\u65e5\u304b\u5426\u304b\u3092\u691c\u67fb\u3057\u307e\u3059\n * @param dateInfo \u65e5\u4ed8\u60c5\u5831\u3092\u30bb\u30c3\u30c8\n * @return boolean\u3000\u65e5\u4ed8\u60c5\u5831\u304c\u4eca\u65e5\u3092\u793a\u3057\u3066\u3044\u308b\u5834\u5408true\u304c\u623b\u308a\u307e\u3059\n */\n", "func_signal": "private boolean isToday(DateInfo dateInfo)", "code": "{\n    if ( dateInfo == null ) return false;\n    //\u4eca\u65e5\u306e\u60c5\u5831\u3092\u53d6\u5f97\n    Calendar cal = Calendar.getInstance();\n    int year = cal.get(Calendar.YEAR);\n    int month = cal.get(Calendar.MONTH)+1;\n    int day = cal.get(Calendar.DAY_OF_MONTH);\n    \n    if ( year != dateInfo.year \n            || month != dateInfo.month \n            || day != dateInfo.day) return false;\n    \n    DateInfo todayInfo = new DateInfo(year, month, day); \n    return ( todayInfo.equals(dateInfo) );\n}", "path": "src\\org\\kazzz\\view\\calendar\\MonthlyCalendarView.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/* (non-Javadoc)\n * @see android.view.View#onRestoreInstanceState(android.os.Parcelable)\n */\n", "func_signal": "@Override\nprotected void onRestoreInstanceState(Parcelable state)", "code": "{\n    //Log.d(TAG, \"onRestoreInstanceState\");\n    Bundle bundle = (Bundle) state;\n    this.select(bundle.getInt(SELECT_COL), bundle.getInt(SELECT_ROW));\n    super.onRestoreInstanceState(bundle.getParcelable(VIEW_STATE));\n    return;\n}", "path": "src\\org\\kazzz\\view\\calendar\\MonthlyCalendarView.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/* (non-Javadoc)\n * @see android.view.View#onDraw(android.graphics.Canvas)\n */\n", "func_signal": "@Override\nprotected void onDraw(Canvas canvas)", "code": "{\n    //\u63cf\u753b\u5bfe\u8c61\u306e\u5e45\u3068\u9ad8\u3055\u3092\u53d6\u5f97\u3057\u3066\u304a\u304f\n    int width = this.getWidth();\n    int height = this.getHeight();\n    \n    //\u80cc\u666f\u3092\u63cf\u753b\n    //canvas.drawRect(0, 0, width, height , this.background);\n    \n\n    // \u30bb\u30eb\u76ee\u3092\u533a\u5207\u308b\u7dda\u3092\u63cf\u753b\n    float offsetY = 0;\n    for (int i = 0; i < 8; i++) {\n        // |\n        canvas.drawLine(i * this.cellWidth, 0\n                , i * this.cellWidth, height, this.light);\n        // ||\n        canvas.drawLine(i * this.cellWidth + 1, 0\n                , i * this.cellWidth + 1, height, this.hilite);\n\n        switch (i) {\n            case 0:\n                offsetY =  0;\n                break;\n            case 1:\n                offsetY +=  this.captionHeight;\n                break;\n\n            default:\n                offsetY +=  this.cellHeight;\n                break;\n        }\n        \n        // --\n        canvas.drawLine(0, offsetY, width\n                , offsetY, this.dark);\n        // ==\n        canvas.drawLine(0, offsetY + 1\n                , width, offsetY + 1, this.hilite);\n            \n    }\n\n\n    //\u66dc\u65e5\u898b\u51fa\u3057\u3092\u63cf\u753b\n    //\u30bb\u30f3\u30bf\u30ea\u30f3\u30b0\n    this.weekdayText.setTextAlign(Paint.Align.CENTER);\n    float alignX = this.cellWidth / 2;\n    // Y\u8ef8\u65b9\u5411\u3067\u30bb\u30f3\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u3002\n    //float alignY = this.cellHeight / 2 - (metricsForD.ascent + metricsForD.descent) / 2;\n    float alignY = (this.cellHeight / 4) - ((metricsForD.ascent + metricsForD.descent) / 4);\n    for (int col = 0; col < 7; col++) {\n        //\u66dc\u65e5\u3067\u8272\u3092\u5909\u3048\u308b\n        this.setForground(weekdayText, col);\n        //\u66dc\u65e5\u63cf\u753b\n        canvas.drawText(weekdays[col], (col * this.cellWidth) + alignX\n                , alignY, weekdayText);\n    }\n    \n    //\u65e5\u4ed8\n    this.weekdayText.setTextAlign(Paint.Align.LEFT);\n    alignX = this.cellWidth / 10;\n    // Y\u8ef8\u65b9\u5411\u3067\u4e0a\u5bc4\u305b\u3059\u308b\u3002\n    alignY = this.cellHeight / 4 - (metricsForD.ascent + metricsForD.descent) / 2;\n    \n    //\u796d\u65e5\u540d\n    float holidayAlignX = this.cellWidth / 10;\n    // Y\u8ef8\u65b9\u5411\u3067\u4e0a\u5bc4\u305b\u3059\u308b\u3002\n    float holidayAlignY = \n        this.cellHeight / 3 - (metricsForH.ascent + metricsForH.descent) / 2;\n    \n    offsetY = this.captionHeight;\n    for (int row = 1; row < 7; row++) {\n        for (int col = 0; col < 7; col++) {\n            if (this.matrix[row-1][col] != null) {\n                //\u796d\u65e5\u3067\u8272\u3092\u5909\u3048\u308b\n                if (this.matrix[row-1][col].isHoliday) {\n                    this.weekdayText.setColor(this.c_holidaty);\n                } else {\n                    //\u66dc\u65e5\u3067\u8272\u3092\u5909\u3048\u308b              \n                    this.setForground(weekdayText, col);\n                }\n                String formatted = String.valueOf(this.matrix[row-1][col].day);\n                if ( this.isToday(this.matrix[row-1][col])) {\n                    this.weekdayText.setTypeface(Typeface.DEFAULT_BOLD);\n                } else {\n                    this.weekdayText.setTypeface(Typeface.DEFAULT);\n                }\n                canvas.drawText( formatted \n                        , ( col * this.cellWidth ) + alignX\n                        , offsetY + alignY //( row * this.cellHeight ) + y\n                        , this.weekdayText);\n                \n                //\u796d\u65e5\u540d\u3092\u63cf\u753b\n                if ( this.matrix[row-1][col].isHoliday ) {\n                    canvas.drawText( this.matrix[row-1][col].holidayName \n                            , ( col * this.cellWidth ) + holidayAlignX\n                            , offsetY + holidayAlignY + alignY // ( row * this.cellHeight ) + hy + y \n                            , this.holidayText);\n                }\n\n            }\n        }\n        offsetY =  offsetY + this.cellHeight;\n    }\n\n    // \u9078\u629e\u3055\u308c\u305f\u30bb\u30eb\u3092\u63cf\u753b\u3059\u308b...\n    //Log.d(TAG, \"selRect=\" + selRect);\n    canvas.drawRect(this.selRect, this.selected);\n}", "path": "src\\org\\kazzz\\view\\calendar\\MonthlyCalendarView.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/**\n * \u4eca\u65e5\u3092\u8a2d\u5b9a\u3057\u307e\u3059\n * @param day 1\uff5e31\u307e\u3067\u306e\u65e5\u3092\u30bb\u30c3\u30c8\n */\n", "func_signal": "public void setToDay(int day)", "code": "{\n    for ( int row = 0; row < 6; row++ ) {\n        for ( int col = 0; col < 7; col++ ) {\n            if ( this.matrix[row][col] != null ) {\n                if ( this.matrix[row][col].day == day ) {\n                    this.select(col, row + 1); // 0\u884c\u76ee\u306f\u898b\u51fa\u3057\n                }\n            }\n        }\n    }\n}", "path": "src\\org\\kazzz\\view\\calendar\\MonthlyCalendarView.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/**\n * \u9069\u5207\u306a\u5e45\u3092\u8a08\u7b97\u3057\u307e\u3059\n * @param widthMeasureSpec \u8a08\u7b97\u306e\u305f\u3081\u306b\u5fc5\u8981\u306a\u30b9\u30da\u30c3\u30af\u3092\u30bb\u30c3\u30c8\n * @return int \u9069\u5207\u306a\u5e45\u3092\u8fd4\u3057\u307e\u3059\n */\n", "func_signal": "private int measureWidth(int widthMeasureSpec)", "code": "{\n    int result = 0;\n    int specMode = MeasureSpec.getMode(widthMeasureSpec);\n    int specSize = MeasureSpec.getSize(widthMeasureSpec);\n    if (specMode == MeasureSpec.EXACTLY) {\n        //\u89aa\u304b\u3089\u6307\u5b9a\u3055\u308c\u305f\u30b5\u30a4\u30ba\u3092\u305d\u306e\u307e\u307e\u53d7\u3051\u5165\u308c\u308b\n        result = specSize;\n    } else {\n        //\u898f\u5b9a\u306e\u30b5\u30a4\u30ba\u306b\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u52a0\u7b97\n        result = DEF_WIDTH \n            + getPaddingLeft() + getPaddingRight();\n        if (specMode == MeasureSpec.AT_MOST) {\n            //\u6700\u5927\u5236\u9650\u30b5\u30a4\u30ba\u3068\u8a08\u7b97\u3057\u305f\u30b5\u30a4\u30ba\u306e\u5927\u304d\u3044\u65b9\u3092\u4f7f\u3046\n            result = Math.max(result, specSize);\n        }\n    }\n    return result; \n}", "path": "src\\org\\kazzz\\view\\calendar\\MonthlyCalendarView.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/* (non-Javadoc)\n * @see android.view.View#onTrackballEvent(android.view.MotionEvent)\n */\n", "func_signal": "@Override\npublic boolean onTrackballEvent(MotionEvent event)", "code": "{\n    if (event.getAction() == MotionEvent.ACTION_DOWN) {\n        int col = (int)( (event.getX() * event.getXPrecision())  / this.cellWidth);\n\n        //\u66dc\u65e5\u898b\u51fa\u3057\u3092\u30aa\u30d5\u30bb\u30c3\u30c8\u3068\u3059\u308b\n        float y = ( event.getY() * event.getYPrecision()) - this.captionHeight;\n        if ( y <= 0 ) {\n            this.select(col, 0);\n        } else {\n            this.select(col, 1 + (int)( y / this.cellHeight));\n        }\n        return false; //false \u89aa\u306b\u30a4\u30d9\u30f3\u30c8\u3092\u623b\u3059  true \u3053\u3053\u3067\u30a4\u30d9\u30f3\u30c8\u6b62\u3081\u308b\n    }\n    return super.onTrackballEvent(event);\n}", "path": "src\\org\\kazzz\\view\\calendar\\MonthlyCalendarView.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/**\n * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n * @param context \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8(\u5927\u62b5\u306fActivity)\u3092\u30bb\u30c3\u30c8\n * @param attrs XML\u304b\u3089\u5165\u529b\u3055\u308c\u308b\u5c5e\u6027\u30ea\u30b9\u30c8\u3092\u30bb\u30c3\u30c8\n * @param defStyle \u65e2\u5b9a\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30bb\u30c3\u30c8\n */\n", "func_signal": "public TimePickerEx(Context context, AttributeSet attrs, int defStyle)", "code": "{\n    super(context, attrs, defStyle);\n\n    LayoutInflater inflater =\n            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    inflater.inflate(R.layout.hour_minute_pair,            this, // we are the parent\n        true);\n\n    // \u6642\n    this.hourPicker = (NumberPicker) findViewById(R.id.pickerHour);\n    this.hourPicker.setOnChangeListener(new NumberPicker.OnChangedListener() {\n        public void onChanged(NumberPicker spinner, int oldVal, int newVal) {\n            currentHour = newVal;\n            onTimeChanged();\n        }\n    });\n\n    // \u5206\n    this.minutePicker = (NumberPicker) findViewById(R.id.pickerMinute);\n    this.minutePicker.setRange(0, 59);\n    this.minutePicker.setSpeed(100);\n    this.minutePicker.setFormatter(NumberPicker.TWO_DIGIT_FORMATTER);\n    this.minutePicker.setOnChangeListener(new NumberPicker.OnChangedListener() {\n        public void onChanged(NumberPicker spinner, int oldVal, int newVal) {\n            currentMinute = newVal;\n            onTimeChanged();\n        }\n    });\n\n    //\u30d4\u30c3\u30ab\u30fc\u306e\u521d\u671f\u8a2d\u5b9a\n    this.configurePickerRanges();\n\n    //\u30ab\u30ec\u30f3\u30c0\u306e\u6642\u523b\u3092\u521d\u671f\u5316\n    Calendar cal = Calendar.getInstance();\n    this.setOnTimeChangedListener(NO_OP_CHANGE_LISTENER);\n    \n    //24H\u30e2\u30fc\u30c9\u56fa\u5b9a\n    this.setCurrentHour(cal.get(Calendar.HOUR));\n    this.setCurrentMinute(cal.get(Calendar.MINUTE));\n    \n    if (!this.isEnabled()) {\n        this.setEnabled(false);\n    }\n}", "path": "src\\org\\kazzz\\view\\dialog\\TimePickerEx.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/**\n * \u5165\u529b\u7bc4\u56f2\u306e\u306e\u521d\u671f\u5316\u3092\u5b9f\u65bd\u3057\u307e\u3059\n */\n", "func_signal": "private void configurePickerRanges()", "code": "{\n    this.hourPicker.setRange(0, 23);\n    this.hourPicker.setFormatter(NumberPicker.TWO_DIGIT_FORMATTER);\n}", "path": "src\\org\\kazzz\\view\\dialog\\TimePickerEx.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/**\n * \u9078\u629e\u3055\u308c\u305f\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\n * @return DateInfo \u9078\u629e\u3055\u308c\u305f\u30bb\u30eb\u306e\u60c5\u5831\u304c\u623b\u308a\u307e\u3059\n */\n", "func_signal": "public DateInfo getSelectedDateInfo()", "code": "{\n    //Log.d(TAG, \"getSelectedInfo: row=\" + this.selRow + \" col=\" + this.selCol );\n    if ( this.selRow == 0 ) return null;\n    return this.matrix[this.selRow-1][this.selCol]; //\u9078\u629e\u3055\u308c\u308b\u306e\u306f\u30de\u30c8\u30ea\u30af\u30b9\u3067\u306f\u306a\u304f\u3001\u753b\u9762\u306a\u306e\u3067\u884c-1\n}", "path": "src\\org\\kazzz\\view\\calendar\\MonthlyCalendarView.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/**\n * calendar\u3092\u8a2d\u5b9a\u3057\u307e\u3059\n * @param calendar calendar\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\n */\n", "func_signal": "public void setCalendar(Calendar calendar)", "code": "{\n    this.calendar = calendar;\n    this.setToDay(today);\n    this.calcCalendarMatrix();\n}", "path": "src\\org\\kazzz\\view\\calendar\\MonthlyCalendarView.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/* (non-Javadoc)\n * @see android.widget.ScrollView#onInterceptTouchEvent(android.view.MotionEvent)\n */\n", "func_signal": "@Override\npublic boolean onInterceptTouchEvent(MotionEvent ev)", "code": "{\n    final int action = ev.getAction();\n\n    switch (action & ACTION_MASK) {\n        case MotionEvent.ACTION_MOVE: {\n            if ( this.canScroll() ) {\n                //\u30b9\u30af\u30ed\u30fc\u30eb\u53ef\u80fd\u306a\u5834\u5408\u3060\u3051\u3001\u65e2\u5b9a\u306e\u51e6\u7406\u3092\u5b9f\u65bd\n                return super.onInterceptTouchEvent(ev);\n            } else {\n                //\u30b9\u30af\u30ed\u30fc\u30eb\u3067\u304d\u306a\u3044\u5834\u5408\u306f\u5b50\u4f9b\u306e\u30d3\u30e5\u30fc\u306e\u90aa\u9b54\u3057\u306a\u3044\n                return false;\n            }\n        }\n    }\n\n    return super.onInterceptTouchEvent(ev);\n}", "path": "src\\org\\kazzz\\view\\MotionableScrollView.java", "repo_name": "Kazzz/CalendarView", "stars": 17, "license": "None", "language": "java", "size": 395}
{"docstring": "/** Closes the ResultSet silently */\n", "func_signal": "public static void close(ResultSet rs)", "code": "{\n  if(rs != null) {\n    try {\n      rs.close();\n    } catch (SQLException ignore) { }\n  }\n}", "path": "gora-sql\\src\\main\\java\\org\\gora\\sql\\util\\SqlUtils.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/**\n * Creates and returns the {@link Job} for submitting to Hadoop mapreduce.\n * @param dataStore\n * @param query\n * @return\n * @throws IOException\n */\n", "func_signal": "public Job createJob(DataStore<K,T> dataStore, Query<K,T> query) throws IOException", "code": "{\n  Job job = new Job(getConf());\n\n  job.setJobName(\"QueryCounter\");\n  job.setNumReduceTasks(0);\n  job.setJarByClass(getClass());\n  /* Mappers are initialized with GoraMapper.initMapper()*/\n  GoraMapper.initMapperJob(job, query, dataStore, NullWritable.class\n      , NullWritable.class, QueryCounterMapper.class, true);\n\n  job.setOutputFormatClass(NullOutputFormat.class);\n  return job;\n}", "path": "gora-core\\src\\examples\\java\\org\\gora\\examples\\mapreduce\\QueryCounter.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/**\n * Returns the number of results to the Query obtained by the\n * {@link #getQuery(DataStore)} method.\n */\n", "func_signal": "public long countQuery(DataStore<K,T> dataStore) throws Exception", "code": "{\n  Query<K,T> query = getQuery(dataStore);\n\n  Job job = createJob(dataStore, query);\n  job.waitForCompletion(true);\n\n  return job.getCounters().findCounter(COUNTER_GROUP, ROWS).getValue();\n}", "path": "gora-core\\src\\examples\\java\\org\\gora\\examples\\mapreduce\\QueryCounter.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "//newInstance(StateManager)\n", "func_signal": "line(1, \"public \" + type + \" newInstance(StateManager stateManager)", "code": "{\");\nline(2, \"return new \" + type + \"(stateManager);\" );\nline(1, \"}", "path": "gora-core\\src\\main\\java\\org\\gora\\compiler\\GoraCompiler.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/** Generates Java interface and classes for a protocol.\n * @param src the source Avro protocol file\n * @param dest the directory to place generated files in\n */\n", "func_signal": "public static void compileProtocol(File src, File dest) throws IOException", "code": "{\n  GoraCompiler compiler = new GoraCompiler(dest);\n  Protocol protocol = Protocol.parse(src);\n  for (Schema s : protocol.getTypes())          // enqueue types\n    compiler.enqueue(s);\n  compiler.compileInterface(protocol);          // generate interface\n  compiler.compile();                           // generate classes for types\n}", "path": "gora-core\\src\\main\\java\\org\\gora\\compiler\\GoraCompiler.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/** Generates Java classes for a schema. */\n", "func_signal": "public static void compileSchema(File src, File dest) throws IOException", "code": "{\n  GoraCompiler compiler = new GoraCompiler(dest);\n  compiler.enqueue(Schema.parse(src));          // enqueue types\n  compiler.compile();                           // generate classes for types\n}", "path": "gora-core\\src\\main\\java\\org\\gora\\compiler\\GoraCompiler.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/**\n * Returns the schema of the class\n */\n", "func_signal": "public static Schema getSchema(Class<? extends Persistent> clazz) \n  throws SecurityException, NoSuchFieldException\n  , IllegalArgumentException, IllegalAccessException", "code": "{\n  \n  java.lang.reflect.Field field = clazz.getDeclaredField(\"_SCHEMA\");\n  return (Schema) field.get(null);\n}", "path": "gora-core\\src\\main\\java\\org\\gora\\util\\AvroUtils.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/**\n * Returns a map of field name to Field for schema's fields.\n */\n", "func_signal": "public static Map<String, Field> getFieldMap(Schema schema)", "code": "{\n  List<Field> fields = schema.getFields();\n  HashMap<String, Field> fieldMap = new HashMap<String, Field>(fields.size());\n  for(Field field: fields) {\n    fieldMap.put(field.name(), field);\n  }\n  return fieldMap;\n}", "path": "gora-core\\src\\main\\java\\org\\gora\\util\\AvroUtils.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/** Closes the Statement silently */\n", "func_signal": "public static void close(Statement statement)", "code": "{\n  if(statement != null) {\n    try {\n      statement.close();\n    } catch (SQLException ignore) { }\n  }\n}", "path": "gora-sql\\src\\main\\java\\org\\gora\\sql\\util\\SqlUtils.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/**\n * Returns the empty argument constructor of the class.\n */\n", "func_signal": "public static<T> Constructor<T> getConstructor(Class<T> clazz) \n  throws SecurityException, NoSuchMethodException", "code": "{\n  if(clazz == null) {\n    throw new IllegalArgumentException(\"class cannot be null\");\n  }\n  Constructor<T> cons = clazz.getConstructor(EMPTY_CLASS_ARRAY);\n  cons.setAccessible(true);\n  return cons;\n}", "path": "gora-core\\src\\main\\java\\org\\gora\\util\\ReflectionUtils.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/** Recognizes camel case */\n", "func_signal": "private static String toUpperCase(String s)", "code": "{\n  StringBuilder builder = new StringBuilder();\n\n  for(int i=0; i<s.length(); i++) {\n    if(i > 0) {\n      if(Character.isUpperCase(s.charAt(i))\n       && Character.isLowerCase(s.charAt(i-1))\n       && Character.isLetter(s.charAt(i))) {\n        builder.append(\"_\");\n      }\n    }\n    builder.append(Character.toUpperCase(s.charAt(i)));\n  }\n\n  return builder.toString();\n}", "path": "gora-core\\src\\main\\java\\org\\gora\\compiler\\GoraCompiler.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/**\n * Constructs a new instance of the class using the no-arg constructor.\n * @param clazz the class of the object\n * @return a new instance of the object\n */\n", "func_signal": "public static <T> T newInstance(Class<T> clazz) throws InstantiationException\n, IllegalAccessException, SecurityException, NoSuchMethodException\n, IllegalArgumentException, InvocationTargetException", "code": "{\n  \n  Constructor<T> cons = getConstructor(clazz);\n  \n  return cons.newInstance(EMPTY_OBJECT_ARRAY);\n}", "path": "gora-core\\src\\main\\java\\org\\gora\\util\\ReflectionUtils.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "// get method\n", "func_signal": "line(1, \"public Object get(int _field)", "code": "{\");\nline(2, \"switch (_field) {\");\ni = 0;\nfor (Field field : schema.getFields()) {\n  line(2, \"case \"+(i++)+\": return \"+field.name()+\";\");\n}\nline(2, \"default: throw new AvroRuntimeException(\\\"Bad index\\\");\");\nline(2, \"}\");\nline(1, \"}", "path": "gora-core\\src\\main\\java\\org\\gora\\compiler\\GoraCompiler.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/** Recursively enqueue schemas that need a class generated. */\n", "func_signal": "private void enqueue(Schema schema) throws IOException", "code": "{\n  if (queue.contains(schema)) return;\n  switch (schema.getType()) {\n  case RECORD:\n    queue.add(schema);\n    for (Field field : schema.getFields())\n      enqueue(field.schema());\n    break;\n  case MAP:\n    enqueue(schema.getValueType());\n    break;\n  case ARRAY:\n    enqueue(schema.getElementType());\n    break;\n  case UNION:\n    for (Schema s : schema.getTypes())\n      enqueue(s);\n    break;\n  case ENUM:\n  case FIXED:\n    queue.add(schema);\n    break;\n  case STRING: case BYTES:\n  case INT: case LONG:\n  case FLOAT: case DOUBLE:\n  case BOOLEAN: case NULL:\n    break;\n  default: throw new RuntimeException(\"Unknown type: \"+schema);\n  }\n}", "path": "gora-core\\src\\main\\java\\org\\gora\\compiler\\GoraCompiler.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/** Generate java classes for enqueued schemas. */\n", "func_signal": "private void compile() throws IOException", "code": "{\n  for (Schema schema : queue)\n    compile(schema);\n}", "path": "gora-core\\src\\main\\java\\org\\gora\\compiler\\GoraCompiler.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "//constructors\n", "func_signal": "line(1, \"public \" + type + \"()", "code": "{\");\nline(2, \"this(new StateManagerImpl());\");\nline(1, \"}", "path": "gora-core\\src\\main\\java\\org\\gora\\compiler\\GoraCompiler.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/**\n * Sets the input parameters for the job\n * @param job the job to set the properties for\n * @param query the query to get the inputs from\n * @param dataStore the datastore as the input\n * @param reuseObjects whether to reuse objects in serialization\n * @throws IOException\n */\n", "func_signal": "public static <K1, V1 extends Persistent> void setInput(Job job\n    , Query<K1,V1> query, DataStore<K1,V1> dataStore, boolean reuseObjects)\nthrows IOException", "code": "{\n\n  Configuration conf = job.getConfiguration();\n\n  GoraMapReduceUtils.setIOSerializations(conf, reuseObjects);\n\n  job.setInputFormatClass(GoraInputFormat.class);\n  GoraInputFormat.setQuery(job, query);\n}", "path": "gora-core\\src\\main\\java\\org\\gora\\mapreduce\\GoraInputFormat.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/** Returns the Query to count the results of. Subclasses can\n * override this function to customize the query.\n * @return the Query object to count the results of.\n */\n", "func_signal": "public Query<K, T> getQuery(DataStore<K,T> dataStore)", "code": "{\n  Query<K,T> query = dataStore.newQuery();\n  return query;\n}", "path": "gora-core\\src\\examples\\java\\org\\gora\\examples\\mapreduce\\QueryCounter.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/** Adds a part to the Where clause connected with AND */\n", "func_signal": "public void addWhere(String part)", "code": "{\n  if(where == null)\n    where = new Where();\n  where.addPart(part);\n}", "path": "gora-sql\\src\\main\\java\\org\\gora\\sql\\statement\\SelectStatement.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/**\n * Returns the number of results to the Query\n */\n", "func_signal": "public long countQuery(DataStore<K,T> dataStore, Query<K,T> query) throws Exception", "code": "{\n  Job job = createJob(dataStore, query);\n  job.waitForCompletion(true);\n\n  return job.getCounters().findCounter(COUNTER_GROUP, ROWS).getValue();\n}", "path": "gora-core\\src\\examples\\java\\org\\gora\\examples\\mapreduce\\QueryCounter.java", "repo_name": "enis/gora", "stars": 22, "license": "apache-2.0", "language": "java", "size": 6400}
{"docstring": "/**\n *\n * @param account\n * @param controller If set to null, won't display messages.\n * @param amount\n * @param console Is it sent via console?\n */\n", "func_signal": "private void showDeposit(String account, Player controller, int amount, boolean console)", "code": "{\n\tPlayer online = etc.getServer().getPlayer(account);\n\tint balance = iData.getBalance(account);\n\tbalance += amount;\n\tiData.setBalance(account, balance);\n\n\tif (online != null) {\n\t    Messaging.send(online,\n\t\tiConomy.MoneyTPL.color(\"tag\") +\n\t\tiConomy.MoneyTPL.parse(\n\t\t    \"personal-deposited\",\n\t\t    new String[]{ \"+by\", \"+amount,+a\" },\n\t\t    new String[]{ (console) ? \"console\" : controller.getName(), Misc.formatCurrency(amount, iConomy.currency) }\n\t\t)\n\t    );\n\n\t    showBalance(account, online, true);\n\t}\n\n\tif (controller != null) {\n\t    Messaging.send(\n\t\tiConomy.MoneyTPL.color(\"tag\") +\n\t\tiConomy.MoneyTPL.parse(\n\t\t    \"player-deposited\",\n\t\t    new String[]{\"+name,+n\", \"+amount,+a\"},\n\t\t    new String[]{account, Misc.formatCurrency(amount, iConomy.currency)}\n\t\t)\n\t    );\n\t}\n\n\tif (console) {\n\t    iConomy.log.info(\"Player \" + account + \"'s account had \" + amount + \" deposited into it.\");\n\t} else {\n\t    iConomy.log.info(Messaging.bracketize(iConomy.name) + \"Player \" + account + \"'s account had \" + amount + \" deposited into it by \" + controller.getName() + \".\");\n\t}\n}", "path": "iListen.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/**\n * Shows the rank of the given player. If the player is not there.. don't show at all.\n *\n * @param checking The player we are checking the rank of.\n * @param viewing The player who is viewing the rank.\n * @param mine Is it our rank?\n */\n", "func_signal": "private void showRank(String checking, Player viewing, boolean mine)", "code": "{\n\tint i = 1;\n\n\tif (iConomy.mysql) {\n\t    iConomy.MySQL.Rank(checking, viewing, mine);\n\n\t    return;\n\t} else {\n\t    Map accounts;\n\t    TreeMap<String, Integer> sortedAccounts = null;\n\t    ValueComparator bvc = null;\n\n\t    try {\n\t\taccounts = iData.accounts.returnMap();\n\t\tbvc = new ValueComparator(accounts);\n\t\tsortedAccounts = new TreeMap(bvc);\n\t\tsortedAccounts.putAll(accounts);\n\t    } catch (Exception ex) {\n\t\tiConomy.log.severe(Messaging.bracketize(iConomy.name + \" FlatFile\") + \" Exception while mapping accounts during ranking: \" + ex);\n\t    }\n\n\t    for (Object key : sortedAccounts.keySet()) {\n\t\tString name = (String) key;\n\n\t\tif (mine) {\n\t\t    if (name.equalsIgnoreCase(checking)) {\n\t\t\tMessaging.send(\n\t\t\t\tviewing,\n\t\t\t\tiConomy.MoneyTPL.color(\"tag\") +\n\t\t\t\tiConomy.MoneyTPL.parse(\n\t\t\t\t\"personal-rank\",\n\t\t\t\tnew String[]{\"+name,+n\", \"+rank,+r\"},\n\t\t\t\tnew String[]{checking, Misc.string(i)}));\n\n\t\t\tbreak;\n\t\t    }\n\t\t} else {\n\t\t    if (name.equalsIgnoreCase(checking)) {\n\t\t\tMessaging.send(\n\t\t\t\tviewing,\n\t\t\t\tiConomy.MoneyTPL.color(\"tag\") +\n\t\t\t\tiConomy.MoneyTPL.parse(\n\t\t\t\t\"player-rank\",\n\t\t\t\tnew String[]{\"+name,+n\", \"+rank,+r\"},\n\t\t\t\tnew String[]{checking, Misc.string(i)}));\n\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\n\t\ti++;\n\t    }\n\t}\n}", "path": "iListen.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/**\n * Basic formatting for commas.\n *\n * @param str The string we are attempting to format\n *\n * @return <code>String</code> - Formatted with commas\n */\n", "func_signal": "public static String insertCommas(String str)", "code": "{\n\tif (str.length() < 4) {\n\t    return str;\n\t}\n\n\treturn insertCommas(str.substring(0, str.length() - 3)) + \",\" + str.substring(str.length() - 3, str.length());\n}", "path": "Misc.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/**\n * Shows the balance to the requesting player.\n *\n * @param name The name of the player we are viewing\n * @param viewing The player who is viewing the account\n * @param mine Is it the player who is trying to view?\n */\n", "func_signal": "public void showBalance(String name, Player viewing, boolean mine)", "code": "{\n\tint balance = 0;\n\n\tif (mine) {\n\t    balance = iData.getBalance(viewing.getName());\n\t    Messaging.send(viewing, iConomy.MoneyTPL.color(\"tag\") + iConomy.MoneyTPL.parse(\"personal-balance\", new String[]{\"+balance,+b\"}, new String[]{Misc.formatCurrency(balance, iConomy.currency)}));\n\t} else {\n\t    balance = iData.getBalance(name);\n\t    Messaging.send(viewing, iConomy.MoneyTPL.color(\"tag\") + iConomy.MoneyTPL.parse(\"player-balance\", new String[]{\"+balance,+b\", \"+name,+n\"}, new String[]{Misc.formatCurrency(balance, iConomy.currency), name}));\n\t}\n}", "path": "iListen.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/**\n *\n * @param account\n * @param controller If set to null, won't display messages.\n * @param amount\n * @param console Is it sent via console?\n */\n", "func_signal": "private void showWithdraw(String account, Player controller, int amount, boolean console)", "code": "{\n\tPlayer online = etc.getServer().getPlayer(account);\n\tint balance = iData.getBalance(account);\n\tbalance -= (amount > balance) ? balance : amount;\n\tiData.setBalance(account, balance);\n\n\tif (online != null) {\n\t    Messaging.send(online,\n\t\tiConomy.MoneyTPL.color(\"tag\") +\n\t\tiConomy.MoneyTPL.parse(\n\t\t    \"personal-withdraw\",\n\t\t    new String[]{ \"+by\", \"+amount,+a\" },\n\t\t    new String[]{ (console) ? \"console\" : controller.getName(), Misc.formatCurrency(amount, iConomy.currency) }\n\t\t)\n\t    );\n\n\t    showBalance(account, online, true);\n\t}\n\n\tif (controller != null) {\n\t    Messaging.send(\n\t\tiConomy.MoneyTPL.color(\"tag\") +\n\t\tiConomy.MoneyTPL.parse(\n\t\t    \"player-withdraw\",\n\t\t    new String[]{\"+name,+n\", \"+amount,+a\"},\n\t\t    new String[]{ account, Misc.formatCurrency(amount, iConomy.currency) }\n\t\t)\n\t    );\n\t}\n\n\tif (console) {\n\t    iConomy.log.info(\"Player \" + account + \"'s account had \" + amount + \" withdrawn.\");\n\t} else {\n\t    iConomy.log.info(Messaging.bracketize(iConomy.name) + \"Player \" + account + \"'s account had \" + amount + \" withdrawn by \" + controller.getName() + \".\");\n\t}\n}", "path": "iListen.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/**\n * Shows the top [amount] of players, MySQL & Flatfile\n *\n * @param amount The number of players we are attempting to view\n */\n", "func_signal": "private void showTop(int amount)", "code": "{\n\tint i = 1;\n\n\tif (iConomy.mysql) {\n\t    iConomy.MySQL.Top(amount);\n\n\t    return;\n\t} else {\n\t    Map accounts;\n\t    TreeMap<String, Integer> sortedAccounts = null;\n\t    ValueComparator bvc = null;\n\n\t    try {\n\t\taccounts = iData.accounts.returnMap();\n\t\tbvc = new ValueComparator(accounts);\n\t\tsortedAccounts = new TreeMap(bvc);\n\t\tsortedAccounts.putAll(accounts);\n\t    } catch (Exception ex) {\n\t\tiConomy.log.severe(Messaging.bracketize(iConomy.name + \" FlatFile\") + \" Unable to retrieve array of balances!\");\n\t    }\n\n\t    Messaging.send(\n\t\tiConomy.MoneyTPL.parse(\n\t\t    \"top-opening\",\n\t\t    new String[]{\"+amount,+a\"},\n\t\t    new String[]{Misc.string(amount)}\n\t\t)\n\t    );\n\n\t    if (sortedAccounts.size() < 1) {\n\t\tMessaging.send(iConomy.MoneyTPL.color(\"top-empty\"));\n\t\treturn;\n\t    }\n\n\t    if (amount > sortedAccounts.size()) {\n\t\tamount = sortedAccounts.size();\n\t    }\n\n\t    for (Object key : sortedAccounts.keySet()) {\n\t\tString name = (String) key;\n\t\tint balance = Integer.valueOf(\"\" + sortedAccounts.get(name));\n\n\t\tif (i <= amount) {\n\t\t    Messaging.send(\n\t\t\tiConomy.MoneyTPL.parse(\n\t\t\t    \"top-line\",\n\t\t\t    new String[]{ \"+i,+number\", \"+name,+n\", \"+balance,+b\" },\n\t\t\t    new String[]{ Misc.string(i), name, Misc.formatCurrency(balance, iConomy.currency) }\n\t\t\t)\n\t\t    );\n\t\t} else {\n\t\t    break;\n\t\t}\n\n\t\ti++;\n\t    }\n\t}\n}", "path": "iListen.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/**\n * Make a public call and return an Long if one exists, if not return 0L.\n *\n * @param listener\n * @param args\n * @return Long - 0L if none was ever returned.\n */\n", "func_signal": "public static long getLong(String listener, Object[] args)", "code": "{\n\tObject result = call(listener, args);\n\treturn (Long)result;\n}", "path": "Hooked.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/**\n * Make a public call and return an integer if one exists, if not return 0.\n *\n * @param listener\n * @param args\n * @return integer, 0 if none was ever returned.\n */\n", "func_signal": "public static int getInt(String listener, Object[] args)", "code": "{\n\tObject result = call(listener, args);\n\treturn (Integer)result;\n}", "path": "Hooked.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/*\n * Gives the current date formatted nice and neat.\n */\n", "func_signal": "public static String date()", "code": "{\n\tSimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\tDate now = new Date();\n\treturn format.format(now);\n}", "path": "JSON.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "//localhost:3306/minecraft\";\n", "func_signal": "public static void setup(boolean mysql, int balance, String driver, String user, String pass, String db)", "code": "{\n\tinitialBalance = balance;\n\n\t// Database\n\tiData.driver = driver;\n\tiData.user = user;\n\tiData.pass = pass;\n\tiData.db = db;\n\n\tif (!mysql) {\n\t    accounts = new iProperty(iConomy.main_directory + \"balances.properties\");\n\t} else {\n\t    // MySQL\n\t    iData.mysql = true;\n\n\t    try {\n\t\tClass.forName(driver);\n\t    } catch (ClassNotFoundException ex) {\n\t\tiConomy.log.severe(Messaging.bracketize(iConomy.name + \" MySQL\") + \" Unable to find driver class: \" + driver);\n\t    }\n\t}\n    }", "path": "iData.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/**\n * Make a public call and return an boolean if one exists, if not return false.\n *\n * @param listener\n * @param args\n * @return Boolean - false if none was ever returned.\n */\n", "func_signal": "public static boolean getBoolean(String listener, Object[] args)", "code": "{\n\tObject result = call(listener, args);\n\treturn (Boolean)result;\n}", "path": "Hooked.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/**\n * Make a public call and return a String if one exists, if not return an empty string.\n *\n * @param listener\n * @param args\n * @return String - Empty if none was ever returned.\n */\n", "func_signal": "public static String getString(String listener, Object[] args)", "code": "{\n\tObject result = call(listener, args);\n\treturn (String)result;\n}", "path": "Hooked.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/**\n * Make a public call and return an Double if one exists, if not return 0.0.\n *\n * @param listener\n * @param args\n * @return Double - 0.0 if none was ever returned.\n */\n", "func_signal": "public static double getDouble(String listener, Object[] args)", "code": "{\n\tObject result = call(listener, args);\n\treturn (Double)result;\n}", "path": "Hooked.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/**\n * Reset a players account, accessable via Console & In-Game\n *\n * @param account The account we are resetting.\n * @param controller If set to null, won't display messages.\n * @param console Is it sent via console?\n */\n", "func_signal": "private void showReset(String account, Player controller, boolean console)", "code": "{\n\tPlayer player = Misc.player(account);\n\tiData.setBalance(account, iConomy.initialBalance);\n\n\tif (player != null) {\n\t    Messaging.send(player, iConomy.MoneyTPL.color(\"personal-reset\"));\n\t}\n\n\tif (controller != null) {\n\t    Messaging.send(\n\t\tiConomy.MoneyTPL.parse(\n\t\t    \"player-reset\",\n\t\t    new String[]{ \"+name,+n\" },\n\t\t    new String[]{ account }\n\t\t)\n\t    );\n\t}\n\n\tif (console) {\n\t    iConomy.log.info(\"Player \" + account + \"'s account has been reset.\");\n\t} else {\n\t    iConomy.log.info(Messaging.bracketize(iConomy.name) + \"Player \" + account + \"'s account has been reset by \" + controller.getName() + \".\");\n\t}\n}", "path": "iListen.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/*\n * Reset a players account easily.\n *\n * @param resetting The player being reset. Cannot be null.\n * @param by The player resetting the account. Cannot be null.\n * @param notify Do we want to show the updates to each player?\n */\n", "func_signal": "public void showPayment(String from, String to, int amount)", "code": "{\n\tPlayer paymentFrom = Misc.player(from);\n\tPlayer paymentTo = Misc.player(to);\n\tint balanceFrom = iData.getBalance(from);\n\tint balanceTo = iData.getBalance(to);\n\n\tif (from.equals(to)) {\n\t    if (paymentFrom != null) {\n\t\tMessaging.send(paymentFrom, iConomy.MoneyTPL.color(\"pay-self\"));\n\t    }\n\n\t    iConomy.Info.write(\"{'action': 'self', 'player': '\" + from + \"', 'local': '\" + to + \"', 'executed': 0, 'data': { 'amount': \" + amount + \" }}\");\n\t} else if (amount > balanceFrom) {\n\t    if (paymentFrom != null) {\n\t\tMessaging.send(paymentFrom, iConomy.MoneyTPL.color(\"no-funds\"));\n\t    }\n\n\t    iConomy.Info.write(\"{'action': 'low balance', 'player': '\" + from + \"', 'local': '\" + to + \"', 'executed': 0, 'data': { 'balance': \"+balanceFrom+\", 'amount': \" + amount + \" }}\");\n\t} else {\n\t    iData.setBalance(from, (balanceFrom-amount));\n\t    iData.setBalance(to, (balanceTo+amount));\n\n\t    if (paymentFrom != null) {\n\t\tMessaging.send(\n\t\t    paymentFrom,\n\t\t    iConomy.MoneyTPL.color(\"tag\") +\n\t\t    iConomy.MoneyTPL.parse(\n\t\t\t\"payment-to\",\n\t\t\tnew String[] { \"+name,+n\", \"+amount,+a\" },\n\t\t\tnew String[] { to, Misc.formatCurrency(amount, iConomy.currency) }\n\t\t    )\n\t\t);\n\t    }\n\n\t    if (paymentTo != null) {\n\t\tMessaging.send(\n\t\t    paymentTo,\n\t\t    iConomy.MoneyTPL.color(\"tag\") +\n\t\t    iConomy.MoneyTPL.parse(\n\t\t\t\"payment-from\",\n\t\t\tnew String[] { \"+name,+n\", \"+amount,+a\" },\n\t\t\tnew String[] { from, Misc.formatCurrency(amount, iConomy.currency) }\n\t\t    )\n\t\t);\n\t    }\n\n\t    iConomy.Info.write(\"{'action': 'success', 'player': '\" + from + \"', 'local': '\" + to + \"', 'executed': 1, 'data': { 'player_balance_before': \"+balanceFrom+\" 'player_balance_after': \"+(balanceFrom-amount)+\", 'local_balance_before': \"+balanceTo+\" 'local_balance_after': \"+(balanceTo+amount)+\", 'amount': \" + amount + \", }}\");\n\n\t    if (paymentFrom != null) {\n\t\tshowBalance(from, paymentFrom, true);\n\t    }\n\n\t    if (paymentTo != null) {\n\t\tshowBalance(to, paymentTo, true);\n\t    }\n\t}\n}", "path": "iListen.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/**\n * Commands sent from console to us.\n *\n * @param split The input line split by spaces.\n * @return <code>boolean</code> - True denotes that the command existed, false the command doesn't.\n */\n", "func_signal": "public boolean onConsoleCommand(String[] split)", "code": "{\n\tString base = split[0];\n\n\tif (Misc.is(base, \"help\")) {\n\t    iConomy.log.info(\"iConomy Console Commands:\");\n\t    iConomy.log.info(\"       reset [player]                Resets players account to initial balance\");\n\t    iConomy.log.info(\"     deposit [amount(%)]             Deposit an [amount] or [percent%] to all players online (must include % to be a percent)\");\n\t    iConomy.log.info(\"     deposit [player] [amount]       Deposit an [amount] to a specific player\");\n\t    iConomy.log.info(\"    withdraw [amount(%)]             Withdraw an [amount] or [percent%] from all players online (must include % to be a percent)\");\n\t    iConomy.log.info(\"    withdraw [player] [amount]       Withdraw an [amount] from a specific player\");\n\n\t    return false;\n\t}\n\n\tif (Misc.is(base, \"reset\")) {\n\t    if (Misc.arguments(split, 0)) {\n\t\tiConomy.log.info(\"Invalid usage: reset [player]\");\n\t\treturn true;\n\t    }\n\n\t    if (Misc.arguments(split, 1)) {\n\t\tPlayer viewable = etc.getServer().getPlayer(split[1]);\n\n\t\tif (viewable == null) {\n\t\t    if (iData.hasBalance(split[1])) {\n\t\t\tshowReset(split[1], null, true);\n\t\t    } else {\n\t\t\tiConomy.log.info(\"Sorry.. Player \" + split[1] + \" does not exist.\");\n\t\t    }\n\t\t    return true;\n\n\t\t} else {\n\t\t    showReset(viewable.getName(), null, true);\n\t\t    return true;\n\t\t}\n\t    }\n\n\t    return true;\n\t}\n\n\tif (Misc.is(base, \"withdraw\")) {\n\t    if (Misc.arguments(split, 0)) {\n\t\tiConomy.log.info(\"Invalid usage: withdraw [player] [amount] or withdraw [amount] (takes from all players online)\");\n\t    }\n\n\t    if(Misc.arguments(split, 1)) {\n\t\tboolean isPercent = false;\n\t\tint percent = 0;\n\n\t\tif(split[1].contains(\"%\")) {\n\t\t    String[] data = split[1].split(\"%\");\n\t\t    percent = Integer.valueOf(data[0]);\n\t\t    isPercent = true;\n\n\t\t    if(percent < 0) {\n\t\t\tiConomy.log.info(\"Percentage cannot be lower than 0\");\n\n\t\t\treturn true;\n\t\t    } else if(percent > 100) {\n\t\t\tiConomy.log.info(\"Percentage cannot be greater than 100\");\n\n\t\t\treturn true;\n\t\t    }\n\t\t}\n\n\t\tfor (Player p : etc.getServer().getPlayerList()) {\n\t\t    if(p == null) { continue; }\n\n\t\t    int balance = 0;\n\t\t    int amount = 0;\n\n\t\t    if(isPercent) {\n\t\t\tbalance = iData.getBalance(p.getName());\n\n\t\t\tif(balance > 0) {\n\t\t\t    amount = Math.round((percent*balance)/100);\n\t\t\t} else {\n\t\t\t    amount = 0;\n\t\t\t}\n\t\t    } else {\n\t\t\tamount = Integer.valueOf(split[1]);\n\n\t\t\tif(amount < 0) {\n\t\t\t    iConomy.log.info(\"Amount cannot be lower than 0\");\n\t\t\t    return true;\n\t\t\t}\n\t\t    }\n\n\t\t    showWithdraw(p.getName(), null, amount, true);\n\t\t}\n\n\t\treturn true;\n\t    }\n\n\t    if (Misc.arguments(split, 2)) {\n\t\tPlayer viewable = etc.getServer().getPlayer(split[1]);\n\n\t\tif (viewable == null) {\n\t\t    if (iData.hasBalance(split[1])) {\n\t\t\tshowWithdraw(split[1], null, Integer.valueOf(split[2]), true);\n\t\t    } else {\n\t\t\tiConomy.log.info(\"Sorry.. Player \" + split[1] + \" does not exist.\");\n\t\t    }\n\t\t    return true;\n\n\t\t} else {\n\t\t    showWithdraw(viewable.getName(), null, Integer.valueOf(split[2]), true);\n\t\t    return true;\n\t\t}\n\t    }\n\n\t    return true;\n\t}\n\n\tif (Misc.is(base, \"deposit\")) {\n\t    if (Misc.arguments(split, 0)) {\n\t\tiConomy.log.info(\"Invalid usage: deposit [player] [amount] or deposit [amount] (takes from all players online)\");\n\t    }\n\n\t    if(Misc.arguments(split, 1)) {\n\t\tboolean isPercent = false;\n\t\tint percent = 0;\n\n\t\tif(split[1].contains(\"%\")) {\n\t\t    String[] data = split[1].split(\"%\");\n\t\t    percent = Integer.valueOf(data[0]);\n\t\t    isPercent = true;\n\n\t\t    if(percent < 0) {\n\t\t\tiConomy.log.info(\"Percentage cannot be lower than 0\");\n\n\t\t\treturn true;\n\t\t    } else if(percent > 100) {\n\t\t\tiConomy.log.info(\"Percentage cannot be greater than 100\");\n\n\t\t\treturn true;\n\t\t    }\n\t\t}\n\n\t\tfor (Player p : etc.getServer().getPlayerList()) {\n\t\t    if(p == null) { continue; }\n\t\t    \n\t\t    int balance = 0;\n\t\t    int amount = 0;\n\n\t\t    if(isPercent) {\n\t\t\tbalance = iData.getBalance(p.getName());\n\n\t\t\tif(balance > 0) {\n\t\t\t    amount = Math.round((percent*balance)/100);\n\t\t\t} else {\n\t\t\t    amount = 0;\n\t\t\t}\n\t\t    } else {\n\t\t\tamount = Integer.valueOf(split[1]);\n\n\t\t\tif(amount < 0) {\n\t\t\t    iConomy.log.info(\"Amount cannot be lower than 0\");\n\t\t\t    return true;\n\t\t\t}\n\t\t    }\n\n\t\t    showDeposit(p.getName(), null, amount, true);\n\t\t}\n\n\t\treturn true;\n\t    }\n\n\t    if (Misc.arguments(split, 2)) {\n\t\tPlayer viewable = etc.getServer().getPlayer(split[1]);\n\n\t\tif (viewable == null) {\n\t\t    if (iData.hasBalance(split[1])) {\n\t\t\tshowDeposit(split[1], null, Integer.valueOf(split[2]), true);\n\t\t    } else {\n\t\t\tiConomy.log.info(\"Sorry.. Player \" + split[1] + \" does not exist.\");\n\t\t    }\n\t\t    return true;\n\n\t\t} else {\n\t\t    showDeposit(viewable.getName(), null, Integer.valueOf(split[2]), true);\n\t\t    return true;\n\t\t}\n\t    }\n\n\t    return true;\n\t}\n\n\treturn false;\n}", "path": "iListen.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/**\n * Silently place a call to the custom hook, does not return any information.\n *\n * @param listener\n * @param args\n */\n", "func_signal": "public static void silent(String listener, Object[] args)", "code": "{\n\tetc.getLoader().callCustomHook(listener, args);\n\treturn;\n}", "path": "Hooked.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/*\n * Writes the data given out to the log file.\n *\n * @param data The data to be written.\n */\n", "func_signal": "public void write(String data)", "code": "{\n\tif (log) {\n\t    try {\n\t\tFileWriter fstream = new FileWriter(iConomy.main_directory + iConomy.log_directory + filename, true);\n\t\tBufferedWriter out = new BufferedWriter(fstream);\n\n\t\tout.write(date() + \"|\" + parse(data));\n\t\tout.newLine();\n\t\tout.close();\n\t    } catch (Exception es) {\n\t\tiConomy.log.severe(\"[Logging] \" + es.getMessage());\n\t    }\n\t}\n}", "path": "JSON.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/**\n * Commands sent from in game to us.\n *\n * @param player The player who sent the command.\n * @param split The input line split by spaces.\n * @return <code>boolean</code> - True denotes that the command existed, false the command doesn't.\n */\n", "func_signal": "public boolean onCommand(Player player, String[] split)", "code": "{\n\tMessaging.save(player);\n\tString base = split[0];\n\n\tif (!player.canUseCommand(base)) {\n\t    if(iConomy.debugging) {\n\t\tiConomy.log.info(\"[iConomy] [\" + player.getName() + \" - \" + split[0] + \"] [cannot use command]\");\n\t    }\n\n\t    return false;\n\t}\n\n\tif (Misc.is(base, \"/money\")) {\n\t    if (Misc.arguments(split, 0)) {\n\t\tshowBalance(\"\", player, true);\n\t\treturn true;\n\t    }\n\n\t    if (Misc.arguments(split, 1)) {\n\t\tif (Misc.isEither(split[1], \"rank\", \"-r\")) {\n\t\t    if (!iConomy.Watch.permission(\"rank\", player)) {\n\t\t\treturn false;\n\t\t    }\n\n\t\t    showRank(player.getName(), player, true);\n\t\t    return true;\n\t\t}\n\n\t\tif (Misc.isEither(split[1], \"top\", \"-t\")) {\n\t\t    if (!iConomy.Watch.permission(\"list\", player)) {\n\t\t\treturn false;\n\t\t    }\n\n\t\t    showTop(5);\n\t\t    return true;\n\t\t}\n\n\t\tif (Misc.isEither(split[1], \"help\", \"?\")\n\t\t\t|| Misc.isEither(split[1], \"deposit\", \"-d\")\n\t\t\t|| Misc.isEither(split[1], \"credit\", \"-c\")\n\t\t\t|| Misc.isEither(split[1], \"withdraw\", \"-w\")\n\t\t\t|| Misc.isEither(split[1], \"debit\", \"-b\")\n\t\t\t|| Misc.isEither(split[1], \"pay\", \"-p\")) {\n\t\t    showSimpleHelp();\n\t\t    return true;\n\t\t}\n\n\t\t// Check another players account\n\t\tif (!iConomy.Watch.permission(\"access\", player)) {\n\t\t    return false;\n\t\t}\n\n\t\tPlayer viewable = etc.getServer().matchPlayer(split[1]);\n\n\t\tif (viewable == null) {\n\t\t    if (iData.hasBalance(split[1])) {\n\t\t\tshowBalance(split[1], player, false);\n\t\t    } else {\n\t\t\tMessaging.send(iConomy.MoneyTPL.parse(\"no-account\", new String[]{\"+name,+n\"}, new String[]{split[1]}));\n\t\t    }\n\t\t    return true;\n\n\t\t} else {\n\t\t    showBalance(viewable.getName(), player, false);\n\t\t    return true;\n\t\t}\n\t    }\n\n\t    if (Misc.arguments(split, 2)) {\n\t\tif (Misc.isEither(split[1], \"reset\", \"-x\")) {\n\t\t    if (!iConomy.Watch.permission(\"reset\", player)) {\n\t\t\treturn false;\n\t\t    }\n\n\t\t    Player viewable = etc.getServer().getPlayer(split[2]);\n\n\t\t    if (viewable == null) {\n\t\t\tif (iData.hasBalance(split[2])) {\n\t\t\t    showReset(split[2], player, false);\n\t\t\t} else {\n\t\t\t    Messaging.send(iConomy.MoneyTPL.parse(\"no-account\", new String[]{\"+name,+n\"}, new String[]{split[2]}));\n\t\t\t}\n\t\t\treturn true;\n\n\t\t    } else {\n\t\t\tshowReset(viewable.getName(), player, false);\n\t\t\treturn true;\n\t\t    }\n\t\t}\n\n\t\tif (Misc.isEither(split[1], \"rank\", \"-r\")) {\n\t\t    if (!iConomy.Watch.permission(\"rank\", player)) {\n\t\t\treturn false;\n\t\t    }\n\n\t\t    Player viewable = etc.getServer().matchPlayer(split[2]);\n\n\t\t    if (viewable == null) {\n\t\t\tif (iData.hasBalance(split[2])) {\n\t\t\t    showRank(split[2], player, false);\n\t\t\t} else {\n\t\t\t    Messaging.send(iConomy.MoneyTPL.parse(\"no-account\", new String[]{\"+name,+n\"}, new String[]{split[2]}));\n\t\t\t}\n\t\t\treturn true;\n\n\t\t    } else {\n\t\t\tshowRank(viewable.getName(), player, false);\n\t\t\treturn true;\n\t\t    }\n\t\t}\n\n\t\tif (Misc.isEither(split[1], \"top\", \"-t\")) {\n\t\t    if (!iConomy.Watch.permission(\"list\", player)) {\n\t\t\treturn false;\n\t\t    }\n\n\t\t    showTop((Integer.parseInt(split[2]) < 0) ? 5 : Integer.parseInt(split[2]));\n\t\t    return true;\n\t\t}\n\n\t\tshowSimpleHelp();\n\t\treturn true;\n\t    }\n\n\t    if (Misc.arguments(split, 3)) {\n\t\tif (Misc.isEither(split[1], \"pay\", \"-p\")) {\n\t\t    if (!iConomy.Watch.permission(\"payment\", player)) {\n\t\t\treturn false;\n\t\t    }\n\n\t\t    Player viewable = etc.getServer().matchPlayer(split[2]);\n\t\t    String name = \"\";\n\t\t    int amount = 0;\n\n\t\t    if (viewable == null) {\n\t\t\tif (iData.hasBalance(split[2])) {\n\t\t\t    name = split[2];\n\t\t\t} else {\n\t\t\t    Messaging.send(iConomy.MoneyTPL.parse(\"no-account\", new String[]{\"+name,+n\"}, new String[]{split[2]}));\n\t\t\t    return true;\n\t\t\t}\n\t\t    } else {\n\t\t\tname = viewable.getName();\n\t\t    }\n\n\t\t    try {\n\t\t\tamount = Integer.parseInt(split[3]);\n\n\t\t\tif (amount < 1) {\n\t\t\t    throw new NumberFormatException();\n\t\t\t}\n\t\t    } catch (NumberFormatException ex) {\n\t\t\tMessaging.send(\"&cInvalid amount: &f\" + amount);\n\t\t\tMessaging.send(\"&cUsage: &f/money &c[&f-p&c|&fpay&c] <&fplayer&c> &c<&famount&c>\");\n\t\t\treturn true;\n\t\t    }\n\n\t\t    // Pay amount\n\t\t    showPayment(player.getName(), name, amount);\n\t\t    return true;\n\t\t}\n\n\t\tif (Misc.isEither(split[1], \"deposit\", \"-d\") || Misc.isEither(split[1], \"credit\", \"-c\")) {\n\t\t    if (!iConomy.Watch.permission(\"deposit\", player)) {\n\t\t\treturn false;\n\t\t    }\n\n\t\t    Player viewable = etc.getServer().getPlayer(split[2]);\n\n\t\t    if (viewable == null) {\n\t\t\tif (iData.hasBalance(split[2])) {\n\t\t\t    showDeposit(split[2], player, Integer.valueOf(split[3]), true);\n\t\t\t} else {\n\t\t\t    Messaging.send(iConomy.MoneyTPL.parse(\"no-account\", new String[]{\"+name,+n\"}, new String[]{split[2]}));\n\t\t\t}\n\t\t\treturn true;\n\n\t\t    } else {\n\t\t\tshowDeposit(viewable.getName(), player, Integer.valueOf(split[3]), false);\n\t\t\treturn true;\n\t\t    }\n\t\t}\n\n\t\tif (Misc.isEither(split[1], \"withdraw\", \"-w\") || Misc.isEither(split[1], \"debit\", \"-b\")) {\n\t\t    if (!iConomy.Watch.permission(\"withdraw\", player)) {\n\t\t\treturn false;\n\t\t    }\n\n\t\t    Player viewable = etc.getServer().getPlayer(split[2]);\n\n\t\t    if (viewable == null) {\n\t\t\tif (iData.hasBalance(split[2])) {\n\t\t\t    showWithdraw(split[2], player, Integer.valueOf(split[3]), true);\n\t\t\t} else {\n\t\t\t    Messaging.send(iConomy.MoneyTPL.parse(\"no-account\", new String[]{\"+name,+n\"}, new String[]{split[2]}));\n\t\t\t}\n\t\t\treturn true;\n\t\t    } else {\n\t\t\tshowWithdraw(viewable.getName(), player, Integer.valueOf(split[3]), false);\n\t\t\treturn true;\n\t\t    }\n\t\t}\n\n\t\tshowSimpleHelp();\n\t\treturn true;\n\t    }\n\t}\n\n\treturn false;\n}", "path": "iListen.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/**\n * Sends simple condensed help lines to the current player\n */\n", "func_signal": "private void showSimpleHelp()", "code": "{\n\tMessaging.send(\"&cUsage: &f/money &c[&fcommand&c|&fplayer&c] &c[&fparameter&c] &c[&fparameter&c]\");\n\tMessaging.send(\"&c    Commands: &fpay&c, &ftop&c, &frank&c, &fwithdraw&c, &fdeposit&c, &freset\");\n\tMessaging.send(\"&cAlt&f-&cCommands: &f-p&c, &f-t&c, &f-r&c, &f-w&c, &f-d&c, &f-x\");\n}", "path": "iListen.java", "repo_name": "nijikokun/iConomy", "stars": 21, "license": "None", "language": "java", "size": 2277}
{"docstring": "/**\n * Sets the menu bar text.\n * <p>\n * For the menu to be visible full screen mode must be off.\n * This can be done with the <code>setFullScreenMode</code> method.\n * \n * @param left is the text for the negative menu option or <code>null</code>\n *  to remove the button.  Negative menu options are things like canceling\n *  a form and moving back to a previous screen.\n * @param right is the text for the positive menu option or <code>null</code>\n *  to remove the button.  Positive menu options are things like accepting\n *  a form, advancing to the next screen, or displaying a menu.\n * @see #declineNotify()\n * @see #acceptNotify()\n */\n", "func_signal": "public void setMenuText (String left, String right)", "code": "{\n\tsuper.setMenuText( left, right );\n\tinvalidate();\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\Dialog.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Shows or hides the menu bar at the bottom of the screen.\n * \n * @param mode is <code>true</code> if the <code>DeviceScreen</code> is to be in full\n *  screen mode, <code>false</code> otherwise.\n */\n", "func_signal": "public void setFullScreenMode (boolean mode)", "code": "{\n\tsuper.setFullScreenMode( mode );\n\tinvalidate();\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\Dialog.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Inserts an element into the list of choices just prior to the\n * element specified.\n * \n * @param elementNum is the index of the element where insertion\n *  is to occur.\n * @param choice is the string to be inserted.\n */\n", "func_signal": "public void insert (int elementNum, String choice)", "code": "{\n\tif ( choice == null )\n\t{\n\t\tthrow new IllegalArgumentException(\"Cannot insert null choice\");\n\t}\n\t\n\tchoices.insertElementAt( choice, elementNum );\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\components\\RadioButton.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Called immediately before this screen is replaced by another screen.\n * <p>\n * Notifies all the components they are hidden.  Classes that override\n * this method should be sure to call <code>super.onDeselection</code>.\n * \n * @see DeviceScreen#hideNotify()\n */\n", "func_signal": "public void hideNotify ()", "code": "{\n\t// Hide all the components on the screen.\n\tEnumeration e = components.elements();\n\t\n\twhile ( e.hasMoreElements() )\n\t{\n\t\tComponent c = (Component)e.nextElement();\n\t\tc.visible( false );\n\t}\n\t\n\t// Continue deselection.\n\tsuper.hideNotify();\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\Dialog.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Sets the index of the selected element.\n * \n * @param elementNum is the currently selected element.\n */\n", "func_signal": "public void setSelectedIndex (int elementNum)", "code": "{\n\tif ( (elementNum < 0) || (elementNum >= choices.size()) )\n\t{\n\t\tthrow new IndexOutOfBoundsException(\"elementNum not a possible choice\");\n\t}\n\t\n\tthis.selected = elementNum;\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\components\\RadioButton.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Returns the width of the usuable portion of this form.  The usable\n * portion excludes the vertical scrollbar on the right of the screen\n * (if it exists).\n * \n * @return The number of pixels wide the usable portion of the form is.\n */\n", "func_signal": "public int getWidth ()", "code": "{\n\tint canvasWidth = super.getWidth();\n\tint formWidth = canvasWidth - 2 * margin;\n\t\n\tif ( hasVerticalScrollbar() )\n\t{\n\t\tint scrollbarWidth = UIManager.getTheme().getVerticalScrollbarWidth();\n\t\tformWidth -= scrollbarWidth;\n\t}\n\n\treturn formWidth;\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\Dialog.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Called when the pointer is dragged.\n * \n * @param x is the horizontal location where the pointer was dragged.\n * @param y is the vertical location where the pointer was dragged.\n */\n", "func_signal": "protected void pointerDragged (int x, int y)", "code": "{\n\t// Forward the event to the current component.\n\tComponent c = get( highlightedComponent );\n\t\n\tif ( c != null )\n\t{\n\t\tc.pointerDragged( x, y );\n\t}\n\t\n\t// Continue processing the event.\n\tsuper.pointerDragged( x, y );\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\Dialog.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Determines if the height of all the components is greater than the height\n * of the screen.  If so a veritical scrollbar will be drawn on the form.\n * \n * @return <code>true</code> if the form has a vertical scrollbar and <code>false</code>\n *  if it does not.\n */\n", "func_signal": "public synchronized boolean hasVerticalScrollbar ()", "code": "{\n\tint screenHeight = getHeight();\n\tint formWidth = super.getWidth() - 2 * margin;\n\t\n\tboolean layoutJustCalculated = false;\n\tTheme theme = UIManager.getTheme();\n\t\n\t// Have we determined the layout?\n\tif ( invalidated || (absoluteHeights == null) )\n\t{\n\t\tcalculateLayout( theme, formWidth, screenHeight );\n\t\tlayoutJustCalculated = true;\n\t}\n\t\n\t// Are all the components taller than the screen?\n\tif ( absoluteHeights[absoluteHeights.length - 1] > screenHeight )\n\t{\n\t\tif ( layoutJustCalculated )\n\t\t{\n\t\t\t// Recalculate the layout now that we're adding a vertical scrollbar.\n\t\t\tformWidth -= theme.getVerticalScrollbarWidth();\n\t\t\tcalculateLayout( theme, formWidth, screenHeight );\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\Dialog.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Called when a key is pressed.  It can be identified using the\n * constants defined in this class.\n * \n * @param keyCode is the key code of the key that was pressed.\n */\n", "func_signal": "protected void keyPressed (int keyCode)", "code": "{\n\t// Forward the event to the current component.\n\tComponent c = get( highlightedComponent );\n\t\n\tif ( c != null )\n\t{\n\t\tc.keyPressed( keyCode );\n\t}\n\t\n\t// Scrolling vertically?\n\tif ( keyCode == UP )\n\t{\n\t\tscroll( false );\n\t}\n\telse if ( keyCode == DOWN )\n\t{\n\t\tscroll( true );\n\t}\n\n\t// Continue processing the event.\n\tsuper.keyPressed( keyCode );\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\Dialog.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Constructs a radio item to place in a <code>Menu</code>.\n * \n * @param choice is the name for this menu item.\n * @param index is the element number in <code>choices</code> this\n *  menu item represents.\n */\n", "func_signal": "public RadioItem (String choice, int index)", "code": "{\n\tthis.text = choice;\n\tthis.index = index;\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\components\\RadioButton.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Moves the viewport of the form up or down and calls <code>repaint</code>.\n * <p>\n * The amount scrolled is dependent on the components shown.  Typically\n * one scroll increment advances to the next component.  However, if\n * components are taller than the screen they will be partially scrolled.\n * \n * @param down is <code>true</code> when the form should scroll down and \n *  <code>false</code> when it should scroll up.\n */\n", "func_signal": "private void scroll (boolean down)", "code": "{\n\t// Safety checks.\n\tif ( absoluteHeights == null )\n\t{\n\t\t// Calculated the layout.\n\t\thasVerticalScrollbar();\n\t}\n\t\n\tif ( components.size() == 0 )\n\t{\n\t\t// Can't scroll with no components.\n\t\treturn;\n\t}\n\t\n\t// Get the dimensions of the form.\n\tint topOfForm = 0;\n\tint screenHeight = getHeight();\n\tint bottomOfForm = absoluteHeights[absoluteHeights.length - 1] - screenHeight;\n\tint bottomOfScreen = topOfScreen + screenHeight;\n\t\n\t// We scroll 90% of the screen unless there is another highlightable\n\t// component within that 90%.  In which case we scroll only to the\n\t// highlightable component, not the full 90%.\n\tint max = screenHeight * 9 / 10;\n\n\t// Get the next component that can be highlighted.\n\tint current = highlightedComponent;\n\thighlightedComponent = nextHighlightableComponent( down, max );\n\n\t// Scroll.\n\tif ( hasVerticalScrollbar() )\n\t{\n\t\t// Calculate the number of pixels to scroll the form.\n\t\tint scroll;\n\n\t\t// Calculate how far to scroll to get to the next highlighted component.\n\t\tif ( down )\n\t\t{\n\t\t\tint currentBottom = absoluteHeights[current + 1];\n\t\t\t\n\t\t\tif ( currentBottom > bottomOfScreen )\n\t\t\t{\n\t\t\t\t// The current component actually is clipped by the bottom of\n\t\t\t\t// the screen (because it is too big to show all at once).\n\t\t\t\t// Just scroll down we can see more of it.\n\t\t\t\tscroll = max;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Get the screen position of the next highlightable component.\n\t\t\t\tint nextTop = absoluteHeights[highlightedComponent];\n\t\t\t\tint nextBottom = absoluteHeights[highlightedComponent + 1];\n\t\t\t\t\n\t\t\t\tif ( (nextTop > topOfScreen) && (nextBottom < bottomOfScreen) )\n\t\t\t\t{\n\t\t\t\t\t// Don't scroll if the next highlighted component fits\n\t\t\t\t\t// completely on the screen already.\n\t\t\t\t\tscroll = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tscroll = nextBottom - currentBottom;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse  // up\n\t\t{\n\t\t\tint currentTop = absoluteHeights[current];\n\t\t\t\n\t\t\tif ( currentTop < topOfScreen )\n\t\t\t{\n\t\t\t\t// The current component actually is clipped by the top of\n\t\t\t\t// the screen (because it is too big to show all at once).\n\t\t\t\t// Just scroll up we can see more of it.\n\t\t\t\tscroll = max;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ( highlightedComponent == 0 )\n\t\t\t\t{\n\t\t\t\t\t// Scroll to the very top of the dialog.\n\t\t\t\t\tscroll = topOfScreen;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Get the bottom of the component above the next highlighted one.\n\t\t\t\t\tint previousBottom = absoluteHeights[highlightedComponent] - spacing;\n\t\t\t\t\t\n\t\t\t\t\tscroll = topOfScreen - previousBottom;\n\t\t\t\t\t\n\t\t\t\t\t// Don't scroll if the next highlighted component fits\n\t\t\t\t\t// completely on the screen already.\n\t\t\t\t\tif ( previousBottom >= topOfScreen )\n\t\t\t\t\t{\n\t\t\t\t\t\tscroll = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Set the position of the form.\n\t\tif ( scroll > max )\n\t\t{\n\t\t\tscroll = max;\n\t\t}\n\n\t\tif ( down == false )\n\t\t{\n\t\t\t// If scrolling up, set the scroll to a negative number.\n\t\t\tscroll *= -1;\n\t\t}\n\t\t\n\t\ttopOfScreen += scroll;\n\t\t\n\t\tif ( topOfScreen < topOfForm )\n\t\t{\n\t\t\ttopOfScreen = topOfForm;\n\t\t}\n\t\telse if ( topOfScreen > bottomOfForm )\n\t\t{\n\t\t\ttopOfScreen = bottomOfForm;\n\t\t}\n\t}\n\t\n\t// Redraw the screen at the scrolled position.\n\trepaint();\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\Dialog.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Sets the selected component.  It is the one the user can input\n * data into and that the screen is scrolled to.\n * \n * @param index is the new selected component.\n */\n", "func_signal": "public void setSelected (int index)", "code": "{\n\tif ( (index < 0) || (index >= components.size()) )\n\t{\n\t\tthrow new IndexOutOfBoundsException( String.valueOf(index) );\n\t}\n\t\n\thighlightedComponent = index;\n\n\t// Scroll screen to this component.\n\tif ( absoluteHeights == null )\n\t{\n\t\tcalculateLayout( UIManager.getTheme(), getWidth(), getHeight() );\n\t}\n\t\n\t// Set the top of the screen. \n\tif ( index == 0 )\n\t{\n\t\t// The top of the screen will be the very start.\n\t\ttopOfScreen = 0;\n\t}\n\telse\n\t{\n\t\t// The top of the screen will be the top of the component.\n\t\ttopOfScreen = absoluteHeights[index] - spacing;  \n\t}\n\t\n\t// Adjust the top of the screen for scrolling.\n\tint maxScroll = absoluteHeights[absoluteHeights.length - 1] - getHeight();\n\t\n\tif ( maxScroll <= 0 )\n\t{\n\t\t// All the components fit on one form.\n\t\ttopOfScreen = 0;\n\t}\n\telse if ( topOfScreen > maxScroll )\n\t{\n\t\t// Scroll all the way to the bottom.  The highlighted \n\t\t// component will be visible, but not at the top of the page.\n\t\ttopOfScreen = maxScroll;\n\t}\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\Dialog.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Called when the pointer is pressed.\n * \n * @param x is the horizontal location where the pointer was pressed.\n * @param y is the vertical location where the pointer was pressed.\n */\n", "func_signal": "protected void pointerPressed (int x, int y)", "code": "{\n\t// Is this event moving the scrollbar?\n\tboolean movedScrollbar = false;\n\t\n\tif ( hasVerticalScrollbar() )\n\t{\n\t\t// Was the click over the scrollbar?\n\t\tint screenWidth = getScreenWidth();\n\t\tint scrollbarWidth = UIManager.getTheme().getVerticalScrollbarWidth();\n\t\tint scrollbarX = screenWidth - scrollbarWidth; \n\t\t\n\t\tif ( x >= scrollbarX )\n\t\t{\n\t\t\t// The user clicked on the scrollbar.\n\t\t\tmovedScrollbar = true;\n\t\t\t\n\t\t\t// Calculate the height of the trackbar.\n\t\t\tint height = getHeight();\n\t\t\tint formHeight = absoluteHeights[absoluteHeights.length - 1];\n\t\t\t\n\t\t\tint scrollableHeight = formHeight - height;\n\t\t\tdouble trackbarPercentage = (double)height / (double)formHeight;\n\t\t\tint trackbarHeight = (int)MathFunc.round( height * trackbarPercentage );\n\t\t\ttrackbarHeight = Math.max( trackbarHeight, 2 * scrollbarWidth );\n\n\t\t\t// Calculate the range and location of the trackbar.\n\t\t\t//   The scrollbar doesn't actually go from 0% to 100%.  The top\n\t\t\t//   is actually 1/2 the height of the trackbar from the top of\n\t\t\t//   the screen.  The bottom is 1/2 the height from the bottom.\n\t\t\tint rangeStart = trackbarHeight / 2;\n\t\t\tint range = height - 2 * rangeStart;\n\t\t\t\n\t\t\tdouble offsetPercentage = (double)topOfScreen / (double)scrollableHeight;\n\t\t\tint center = rangeStart + (int)MathFunc.round( offsetPercentage * range );\n\t\t\t\n\t\t\tif ( y < center )\n\t\t\t{\n\t\t\t\t// Move the scrollbar up one component.\n\t\t\t\tscroll( false );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Move the scrollbar down one component.\n\t\t\t\tscroll( true );\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Forward the event to the component clicked on.\n\tif ( movedScrollbar == false )\n\t{\n\t\t// Highlight the component.\n\t\thighlightedComponent = getAt( x, y );\n\t\t\n\t\t// Forward the event to the component for processing.\n\t\tComponent c = get( highlightedComponent );\n\t\t\n\t\tif ( c != null )\n\t\t{\n\t\t\t// Adjust the click position relative to the component.\n\t\t\tint px = x - c.getX();\n\t\t\tint py = y - c.getY();\n\t\t\t\n\t\t\tc.pointerPressed( px, py );\n\t\t}\n\t}\n\t\n\t// Continue processing the event.\n\tsuper.pointerPressed( x, y );\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\Dialog.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Returns the index of the component that contains the given pixel.\n * If no component is at that location, for example it is in the\n * spacing between components, then <code>-1</code> is returned.\n * <p>\n * This method assumes that the click is relative to the form\n * area.  It may not address the title bar, menu bar, or a\n * scroll bar.\n * \n * @param x is the X-coordinate of the pixel on the form.\n * @param y is the Y-coordinate of the pixel on the form.\n * @return The index of the component containing the pixel\n *  (<code>x</code>, <code>y</code>) or <code>-1</code> if no component contains it.\n */\n", "func_signal": "private int getAt (int x, int y)", "code": "{\n\tint matched = -1;\n\t\n\t// Get the absolute position of y on the form.\n\tint absY = topOfScreen + y;\n\t\n\t// Walk the list of component positions until absY is found.\n\tfor ( int i = 0; i < absoluteHeights.length - 1; i++ )\n\t{\n\t\t// Get the dimensions of this component.\n\t\tint top = absoluteHeights[i];\n\t\tint topOfNext = absoluteHeights[i + 1];\n\t\tint bottom = topOfNext - spacing;\n\t\t\n\t\tint left = margin;\n\t\tint right = left + componentWidths[i];\n\t\t\n\t\t// Does the point fall within this component?\n\t\tif ( (absY >= top) && (absY < bottom) &&\n\t\t\t (x >= left) && (x < right) )\n\t\t{\n\t\t\t// This is the component that (x, y) falls within.\n\t\t\tmatched = i;\n\t\t}\n\t\t\n\t\t// Stop processing if point is above the top of the component.\n\t\tif ( absY < topOfNext )\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn matched;\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\Dialog.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Adds the <code>component</code> to the end of this form.\n * \n * @param component is the UI component to add to the bottom of the form.\n */\n", "func_signal": "public void append (Component component)", "code": "{\n\tinvalidate();\n\tcomponents.addElement( component );\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\Dialog.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Sets the vertical spacing between components. \n * \n * @param spacing is the number of pixels that vertically separates\n *  components.  Values less than 0 are be ignored.\n */\n", "func_signal": "public void setSpacing (int spacing)", "code": "{\n\tif ( (spacing >= 0) && (this.spacing != spacing) )\n\t{\n\t\tthis.spacing = spacing;\n\t\t\n\t\t// Recalculate the layout with the new spacings later.\n\t\tinvalidate();\n\t}\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\Dialog.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Sets the selected component.  It is the one the user can input\n * data into and that the screen is scrolled to.\n * \n * @param component is the new selected component.  If it is not\n *  on the form this has no effect.\n */\n", "func_signal": "public void setSelected (Component component)", "code": "{\n\tint index = 0;\n\t\n\t// Walk the list of components until we find it.\n\tEnumeration e = components.elements();\n\t\n\twhile ( e.hasMoreElements() )\n\t{\n\t\tComponent c = (Component)e.nextElement();\n\n\t\tif ( c == component )\n\t\t{\n\t\t\t// This is the component.\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tindex++;\n\t}\n\t\n\t// Set the component as the selected one.\n\tif ( index < size() )\n\t{\n\t\tsetSelected( index );\n\t}\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\Dialog.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Deletes the <code>component</code> at the specified <code>index</code>.  Each\n * component in this vector with an index greater or equal to the\n * specified index is shifted downward to have an index one smaller\n * than the value it had previously.\n *  \n * @param index is the index of the component to remove.  It must be\n *  a value greater than or equal to 0 and less than the current\n *  number of components on the form.\n * @throws ArrayIndexOutOfBoundsException if the index was invalid.\n */\n", "func_signal": "public void delete (int index)", "code": "{\n\tif ( index >= 0 )\n\t{\n\t\tcomponents.removeElementAt( index );\n\t\t\n\t\tif ( highlightedComponent == index )\n\t\t{\n\t\t\thighlightedComponent = -1;\n\t\t}\n\t\telse if ( highlightedComponent > index )\n\t\t{\n\t\t\thighlightedComponent--;\n\t\t}\n\t\t\n\t\tinvalidate();\n\t}\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\Dialog.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Paints the form and its components.  The layout is calculated from the\n * components and their order.\n * \n * @param g is the <code>Graphics</code> object to paint with.\n */\n", "func_signal": "protected synchronized void paint (Graphics g)", "code": "{\n\t// Have we determined the layout?\n\tif ( invalidated )\n\t{\n\t\tlayout();\n\t\tinvalidated = false;\n\t}\n\t\n\t// Get the height of the screen.\n\tTheme theme = UIManager.getTheme();\n\tint height = getHeight();\n\t\n\t// Add a vertical scrollbar?\n\tif ( hasVerticalScrollbar() )\n\t{\n\t\t// Paint the scrollbar.\n\t\tint width = super.getWidth();  // Exclude the margins and scrollbar\n\t\tint heightOfAllComponents = absoluteHeights[absoluteHeights.length - 1];\n\t\tpaintVerticalScrollbar( g, 0, 0, width, height, topOfScreen, heightOfAllComponents );\n\t}\n\n\t// Get the rest of the form dimensions.\n\tint formWidth = getWidth();\n\tint bottomOfScreen = topOfScreen + height;\n\t\n\t// Walk the list of components and paint them.\n\tEnumeration list = components.elements();\n\t\n\tfor ( int i = 0; i < absoluteHeights.length - 1; i++ )\n\t{\n\t\tComponent c = (Component)list.nextElement();\n\t\tint componentTop = absoluteHeights[i];\n\t\tint componentBottom = absoluteHeights[i + 1] - spacing; \n\t\t\n\t\t// Is the component visible on the screen?\n\t\tif ( componentTop >= bottomOfScreen )\n\t\t{\n\t\t\t// Skip drawing components below the screen.\n\t\t\tc.visible( false );\n\t\t}\n\t\telse if ( componentBottom <= topOfScreen )\n\t\t{\n\t\t\t// Skip drawing components above the screen.\n\t\t\tc.visible( false );\n\t\t}\n\t\telse  // visible\n\t\t{\n\t\t\tc.visible( true );\n\t\t\t\n\t\t\t// Calculate the position of the component.\n\t\t\tint componentX = margin;\n\t\t\tint componentY = componentTop - topOfScreen;\n\t\t\tint componentWidth = formWidth;\n\t\t\tint componentHeight = componentBottom - componentTop;\n\t\t\t\n\t\t\t// Paint this component.\n\t\t\tif ( intersects(g, componentX, componentY, componentWidth, componentHeight) )\n\t\t\t{\n\t\t\t\tboolean selected = (i == highlightedComponent);\n\t\t\t\t\n\t\t\t\tc.paint( g, theme, this,\n\t\t\t\t\t\t componentX, componentY,\n\t\t\t\t\t\t componentWidth, componentHeight,\n\t\t\t\t\t\t selected );\n\t\t\t}\n\t\t}\n\t}\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\Dialog.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Called when the user selects this radio item.  It sets the\n * radio button component's selected value to this item. \n */\n", "func_signal": "public void onSelection ()", "code": "{\n\t// Select this item in the radio button component.\n\tRadioButton.this.setSelectedIndex( index );\n\t\n\t// Show the screen with the radio button component on it.\n\tDeviceScreen screen = RadioButton.this.getScreen(); \n\tscreen.show();\n\tscreen.repaint();\n}", "path": "projects\\j2me\\src\\org\\j4me\\ui\\components\\RadioButton.java", "repo_name": "SaferMobile/InTheClear", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 4894}
{"docstring": "/**\n * Returns the next token from this tokenizer.\n * @return the next token from this tokenizer\n */\n", "func_signal": "public Token next()", "code": "{\n\tif (nextToken != null) {\n\t\tToken result = nextToken;\n\t\tnextToken = null;\n\t\treturn result;\n\t} else\n\t\treturn tokenizer.next();\n}", "path": "src\\org\\p79068\\assembler\\parser\\BufferedTokenizer.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Ensures that the backing array is at least as large as the specified capacity. This method resizes the array if its length is less than the specified capacity, otherwise it does nothing.\n * @param capacity\n * @throws IllegalArgumentException if the capacity is negative\n * @throws IllegalStateException if the capacity is greater than Integer.MAX_VALUE\n */\n", "func_signal": "private void ensureCapacity(long capacity)", "code": "{\n\tif (capacity < 0)\n\t\tthrow new IllegalArgumentException(\"Negative capacity\");\n\tif (capacity > Integer.MAX_VALUE)\n\t\tthrow new IllegalStateException(\"Maximum length exceeded\");\n\t\n\twhile (data.length < capacity)\n\t\tresize((int)Math.min((long)data.length * 2, Integer.MAX_VALUE));\n}", "path": "src\\org\\p79068\\util\\ByteBuffer.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Compares this label statement to the specified object for equality. Returns {@code true} if the specified object is a label statement with the same name. Otherwise returns {@code false}.\n * @param obj the object to compare this label statement against\n * @return {@code true} if the object is a label statement with the same name, {@code false} otherwise\n */\n", "func_signal": "@Override\npublic boolean equals(Object obj)", "code": "{\n\tif (!(obj instanceof LabelStatement))\n\t\treturn false;\n\telse\n\t\treturn name.equals(((LabelStatement)obj).name);\n}", "path": "src\\org\\p79068\\assembler\\LabelStatement.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Copies the backing array to a new array of the specified length and replaces the original backing array with the new one.\n * @param newCapacity the length of the new backing array\n * @throws IllegalArgumentException if the capacity is negative\n * @throws IllegalArgumentException if the capacity is less than the current data length\n */\n", "func_signal": "private void resize(int newCapacity)", "code": "{\n\tif (newCapacity < 0)\n\t\tthrow new IllegalArgumentException(\"Negative capacity\");\n\tif (newCapacity < length)\n\t\tthrow new IllegalArgumentException(\"Capacity less than length\");\n\tbyte[] newdata = new byte[newCapacity];\n\tSystem.arraycopy(data, 0, newdata, 0, length);\n\tdata = newdata;\n}", "path": "src\\org\\p79068\\util\\ByteBuffer.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Constructs a label statement with the specified name.\n * @param name the name of the label\n * @throws NullPointerException if the name is {@code null}\n */\n", "func_signal": "public LabelStatement(String name)", "code": "{\n\tif (name == null)\n\t\tthrow new NullPointerException();\n\tthis.name = name;\n}", "path": "src\\org\\p79068\\assembler\\LabelStatement.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Constructs a register-in-opcode option with the specified operand index.\n * @param operandIndex the operand index\n * @throws IllegalArgumentException if the operand index is negative\n */\n", "func_signal": "public RegisterInOpcode(int operandIndex)", "code": "{\n\tif (operandIndex < 0)\n\t\tthrow new IllegalArgumentException(\"Invalid operand index\");\n\tthis.operandIndex = operandIndex;\n}", "path": "src\\org\\p79068\\assembler\\generator\\RegisterInOpcode.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Constructs a byte buffer with the specified initial capacity. The initial capacity must be positive.\n * @param initCapacity the initial capacity\n * @throws IllegalArgumentException if the initial capacity is less than or equal to 0\n */\n", "func_signal": "public ByteBuffer(int initCapacity)", "code": "{\n\tif (initCapacity <= 0)\n\t\tthrow new IllegalArgumentException(\"Non-positive capacity\");\n\tdata = new byte[initCapacity];\n\tlength = 0;\n}", "path": "src\\org\\p79068\\util\\ByteBuffer.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Appends the specified statement to the list of statements in this program.\n * @param statement the statement to append\n */\n", "func_signal": "public void addStatement(Statement statement)", "code": "{\n\tif (statement == null)\n\t\tthrow new NullPointerException();\n\tstatements.add(statement);\n}", "path": "src\\org\\p79068\\assembler\\Program.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Appends the specified byte array to this sequence.\n * @param x the byte array to append\n * @throws NullPointerException if the byte array is {@code null}\n */\n", "func_signal": "public void append(byte[] b)", "code": "{\n\tif (b == null)\n\t\tthrow new NullPointerException();\n\tensureCapacity((long)length + b.length);\n\tSystem.arraycopy(b, 0, data, length, b.length);\n\tlength += b.length;\n}", "path": "src\\org\\p79068\\util\\ByteBuffer.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Appends the specified 32-bit integer to this sequence as 4 bytes in little endian.\n * @param x the 32-bit integer to append\n */\n", "func_signal": "public void appendLittleEndian(int x)", "code": "{\n\tensureCapacity((long)length + 4);\n\tdata[length + 0] = (byte)(x >>>  0);\n\tdata[length + 1] = (byte)(x >>>  8);\n\tdata[length + 2] = (byte)(x >>> 16);\n\tdata[length + 3] = (byte)(x >>> 24);\n\tlength += 4;\n}", "path": "src\\org\\p79068\\util\\ByteBuffer.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Appends the specified 16-bit integer to this sequence as 2 bytes in little endian.\n * @param x the 16-bit integer to append\n */\n", "func_signal": "public void appendLittleEndian(short x)", "code": "{\n\tensureCapacity((long)length + 2);\n\tdata[length + 0] = (byte)(x >>> 0);\n\tdata[length + 1] = (byte)(x >>> 8);\n\tlength += 2;\n}", "path": "src\\org\\p79068\\util\\ByteBuffer.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Returns this sequence as a new byte array. The returned array is not the same as the backing array for this buffer.\n * @return this sequence as a new byte array\n */\n", "func_signal": "public byte[] toArray()", "code": "{\n\tbyte[] result = new byte[length];\n\tSystem.arraycopy(data, 0, result, 0, length);\n\treturn result;\n}", "path": "src\\org\\p79068\\util\\ByteBuffer.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Tests whether the next token is a decimal number, hexadecimal number, or a label.\n * @param tokenizer the tokenizer to test from\n * @return {@code true} if the next token is an immediate operand, {@code false} otherwise\n */\n", "func_signal": "private boolean canParseImmediate()", "code": "{\n\treturn tokenizer.check(TokenType.DECIMAL)\n\t    || tokenizer.check(TokenType.HEXADECIMAL)\n\t    || tokenizer.check(TokenType.NAME);\n}", "path": "src\\org\\p79068\\assembler\\parser\\Parser.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Appends the specified byte to this sequence.\n * @param b the byte to append\n */\n", "func_signal": "public void append(byte b)", "code": "{\n\tensureCapacity((long)length + 1);\n\tdata[length] = b;\n\tlength++;\n}", "path": "src\\org\\p79068\\util\\ByteBuffer.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Constructs a label with the specified name.\n * @param name the name of the label\n */\n", "func_signal": "public Label(String name)", "code": "{\n\tif (name == null)\n\t\tthrow new NullPointerException();\n\tthis.name = name;\n}", "path": "src\\org\\p79068\\assembler\\operand\\Label.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Constructs a buffered tokenizer from the specified tokenizer.\n * @param tokenizer the underlying tokenizer providing the tokens\n */\n", "func_signal": "public BufferedTokenizer(Tokenizer tokenizer)", "code": "{\n\tif (tokenizer == null)\n\t\tthrow new NullPointerException();\n\tthis.tokenizer = tokenizer;\n\tnextToken = null;\n}", "path": "src\\org\\p79068\\assembler\\parser\\BufferedTokenizer.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * The main method. Argument 0 is the input file name. Argument 1 is the output file name.\n * @param args the list of command line arguments\n * @throws IOException if an I/O exception occurred\n */\n", "func_signal": "public static void main(String[] args) throws IOException", "code": "{\n\tif (args.length != 2) {\n\t\tSystem.err.println(\"Usage: java org.p79068.assembler.Main INPUTFILE OUTPUTFILE\");\n\t\tSystem.exit(1);\n\t}\n\t\n\tFile inputfile = new File(args[0]);\n\tFile outputfile = new File(args[1]);\n\t\n\tProgram program = Parser.parseFile(inputfile);\n\tAssembler.assembleToFile(program, outputfile);\n}", "path": "src\\org\\p79068\\assembler\\Main.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Returns the register associated with the specified name. Examples of register names include {@code \"%eax\"}, {@code \"%sp\"}, and {@code \"%cs\"}. The name is case-insensitive.\n * @param name the name of the register\n * @return the register associated with the name\n * @throws IllegalArgumentException if no register is associated with the name\n */\n", "func_signal": "private static Register parseRegister(String name)", "code": "{\n\tname = name.toLowerCase();\n\tif (!REGISTER_TABLE.containsKey(name))\n\t\tthrow new IllegalArgumentException(\"Invalid register name\");\n\treturn REGISTER_TABLE.get(name);\n}", "path": "src\\org\\p79068\\assembler\\parser\\Parser.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Returns the next token without consuming it. Consecutive calls to this method return the same value.\n * @return the next token\n */\n", "func_signal": "public Token peek()", "code": "{\n\tif (nextToken == null)\n\t\tnextToken = tokenizer.next();\n\treturn nextToken;\n}", "path": "src\\org\\p79068\\assembler\\parser\\BufferedTokenizer.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "/**\n * Compares this label to the specified object for equality. Returns {@code true} if the specified object is a label with the same name. Otherwise returns {@code false}.\n * @param obj the object to compare this label against\n * @return {@code true} if the object is a label with the same name, {@code false} otherwise\n */\n", "func_signal": "@Override\npublic boolean equals(Object obj)", "code": "{\n\tif (!(obj instanceof Label))\n\t\treturn false;\n\telse\n\t\treturn name.equals(((Label)obj).name);\n}", "path": "src\\org\\p79068\\assembler\\operand\\Label.java", "repo_name": "nayuki/x86-Assembler", "stars": 16, "license": "None", "language": "java", "size": 251}
{"docstring": "// $ANTLR start \"COMMA\"\n", "func_signal": "public final void mCOMMA() throws RecognitionException", "code": "{\n    try {\n        int _type = COMMA;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:159:7: ( ',' )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:159:9: ','\n        {\n        match(','); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"RIGHTPAREN\"\n", "func_signal": "public final void mRIGHTPAREN() throws RecognitionException", "code": "{\n    try {\n        int _type = RIGHTPAREN;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:155:12: ( ')' )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:155:14: ')'\n        {\n        match(')'); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"COLON\"\n", "func_signal": "public final void mCOLON() throws RecognitionException", "code": "{\n    try {\n        int _type = COLON;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:160:7: ( ':' )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:160:9: ':'\n        {\n        match(':'); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"TYPE_CHAR\"\n", "func_signal": "public final void mTYPE_CHAR() throws RecognitionException", "code": "{\n    try {\n        int _type = TYPE_CHAR;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:141:11: ( 'char' )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:141:13: 'char'\n        {\n        match(\"char\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"CODE\"\n", "func_signal": "public final void mCODE() throws RecognitionException", "code": "{\n    try {\n        int _type = CODE;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:164:6: ( '-' )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:164:8: '-'\n        {\n        match('-'); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"DOC\"\n", "func_signal": "public final void mDOC() throws RecognitionException", "code": "{\n    try {\n        int _type = DOC;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:163:5: ( '!!!' )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:163:7: '!!!'\n        {\n        match(\"!!!\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"TYPE_INT\"\n", "func_signal": "public final void mTYPE_INT() throws RecognitionException", "code": "{\n    try {\n        int _type = TYPE_INT;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:140:10: ( 'int' )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:140:12: 'int'\n        {\n        match(\"int\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"LEFTPAREN\"\n", "func_signal": "public final void mLEFTPAREN() throws RecognitionException", "code": "{\n    try {\n        int _type = LEFTPAREN;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:154:11: ( '(' )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:154:13: '('\n        {\n        match('('); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"LESSTHAN\"\n", "func_signal": "public final void mLESSTHAN() throws RecognitionException", "code": "{\n    try {\n        int _type = LESSTHAN;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:152:10: ( '<' )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:152:12: '<'\n        {\n        match('<'); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"SEMICOLON\"\n", "func_signal": "public final void mSEMICOLON() throws RecognitionException", "code": "{\n    try {\n        int _type = SEMICOLON;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:153:11: ( ';' )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:153:13: ';'\n        {\n        match(';'); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"PLUS\"\n", "func_signal": "public final void mPLUS() throws RecognitionException", "code": "{\n    try {\n        int _type = PLUS;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:158:6: ( '+' )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:158:8: '+'\n        {\n        match('+'); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"WS\"\n", "func_signal": "public final void mWS() throws RecognitionException", "code": "{\n    try {\n        int _type = WS;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:168:5: ( ( ' ' | '\\\\t' | '\\\\r' | '\\\\n' )+ )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:168:9: ( ' ' | '\\\\t' | '\\\\r' | '\\\\n' )+\n        {\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:168:9: ( ' ' | '\\\\t' | '\\\\r' | '\\\\n' )+\n        int cnt3=0;\n        loop3:\n        do {\n            int alt3=2;\n            int LA3_0 = input.LA(1);\n\n            if ( ((LA3_0>='\\t' && LA3_0<='\\n')||LA3_0=='\\r'||LA3_0==' ') ) {\n                alt3=1;\n            }\n\n\n            switch (alt3) {\n        \tcase 1 :\n        \t    // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:\n        \t    {\n        \t    if ( (input.LA(1)>='\\t' && input.LA(1)<='\\n')||input.LA(1)=='\\r'||input.LA(1)==' ' ) {\n        \t        input.consume();\n\n        \t    }\n        \t    else {\n        \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n        \t        recover(mse);\n        \t        throw mse;}\n\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    if ( cnt3 >= 1 ) break loop3;\n                    EarlyExitException eee =\n                        new EarlyExitException(3, input);\n                    throw eee;\n            }\n            cnt3++;\n        } while (true);\n\n        _channel=HIDDEN;\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"PIPE\"\n", "func_signal": "public final void mPIPE() throws RecognitionException", "code": "{\n    try {\n        int _type = PIPE;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:161:6: ( '|' )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:161:8: '|'\n        {\n        match('|'); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"ID\"\n", "func_signal": "public final void mID() throws RecognitionException", "code": "{\n    try {\n        int _type = ID;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:162:4: ( '#' )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:162:6: '#'\n        {\n        match('#'); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"ELEM\"\n", "func_signal": "public final void mELEM() throws RecognitionException", "code": "{\n    try {\n        int _type = ELEM;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:144:7: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:144:11: ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n        {\n        if ( (input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z') ) {\n            input.consume();\n\n        }\n        else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;}\n\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:144:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*\n        loop1:\n        do {\n            int alt1=2;\n            int LA1_0 = input.LA(1);\n\n            if ( ((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')) ) {\n                alt1=1;\n            }\n\n\n            switch (alt1) {\n        \tcase 1 :\n        \t    // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:\n        \t    {\n        \t    if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {\n        \t        input.consume();\n\n        \t    }\n        \t    else {\n        \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n        \t        recover(mse);\n        \t        throw mse;}\n\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop1;\n            }\n        } while (true);\n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR end \"WS\"\n", "func_signal": "public void mTokens() throws RecognitionException", "code": "{\n    // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:8: ( TYPE_INT | TYPE_CHAR | FOR | ELEM | INT | EQUAL | EQUALEQUAL | LESSTHAN | SEMICOLON | LEFTPAREN | RIGHTPAREN | LEFTBRACE | RIGHTBRACE | PLUS | COMMA | COLON | PIPE | ID | DOC | CODE | WS )\n    int alt4=21;\n    alt4 = dfa4.predict(input);\n    switch (alt4) {\n        case 1 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:10: TYPE_INT\n            {\n            mTYPE_INT(); \n\n            }\n            break;\n        case 2 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:19: TYPE_CHAR\n            {\n            mTYPE_CHAR(); \n\n            }\n            break;\n        case 3 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:29: FOR\n            {\n            mFOR(); \n\n            }\n            break;\n        case 4 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:33: ELEM\n            {\n            mELEM(); \n\n            }\n            break;\n        case 5 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:38: INT\n            {\n            mINT(); \n\n            }\n            break;\n        case 6 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:42: EQUAL\n            {\n            mEQUAL(); \n\n            }\n            break;\n        case 7 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:48: EQUALEQUAL\n            {\n            mEQUALEQUAL(); \n\n            }\n            break;\n        case 8 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:59: LESSTHAN\n            {\n            mLESSTHAN(); \n\n            }\n            break;\n        case 9 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:68: SEMICOLON\n            {\n            mSEMICOLON(); \n\n            }\n            break;\n        case 10 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:78: LEFTPAREN\n            {\n            mLEFTPAREN(); \n\n            }\n            break;\n        case 11 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:88: RIGHTPAREN\n            {\n            mRIGHTPAREN(); \n\n            }\n            break;\n        case 12 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:99: LEFTBRACE\n            {\n            mLEFTBRACE(); \n\n            }\n            break;\n        case 13 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:109: RIGHTBRACE\n            {\n            mRIGHTBRACE(); \n\n            }\n            break;\n        case 14 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:120: PLUS\n            {\n            mPLUS(); \n\n            }\n            break;\n        case 15 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:125: COMMA\n            {\n            mCOMMA(); \n\n            }\n            break;\n        case 16 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:131: COLON\n            {\n            mCOLON(); \n\n            }\n            break;\n        case 17 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:137: PIPE\n            {\n            mPIPE(); \n\n            }\n            break;\n        case 18 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:142: ID\n            {\n            mID(); \n\n            }\n            break;\n        case 19 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:145: DOC\n            {\n            mDOC(); \n\n            }\n            break;\n        case 20 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:149: CODE\n            {\n            mCODE(); \n\n            }\n            break;\n        case 21 :\n            // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:1:154: WS\n            {\n            mWS(); \n\n            }\n            break;\n\n    }\n\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"EQUAL\"\n", "func_signal": "public final void mEQUAL() throws RecognitionException", "code": "{\n    try {\n        int _type = EQUAL;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:150:7: ( '=' )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:150:9: '='\n        {\n        match('='); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"INT\"\n", "func_signal": "public final void mINT() throws RecognitionException", "code": "{\n    try {\n        int _type = INT;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:147:5: ( ( '0' .. '9' )+ )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:147:7: ( '0' .. '9' )+\n        {\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:147:7: ( '0' .. '9' )+\n        int cnt2=0;\n        loop2:\n        do {\n            int alt2=2;\n            int LA2_0 = input.LA(1);\n\n            if ( ((LA2_0>='0' && LA2_0<='9')) ) {\n                alt2=1;\n            }\n\n\n            switch (alt2) {\n        \tcase 1 :\n        \t    // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:147:8: '0' .. '9'\n        \t    {\n        \t    matchRange('0','9'); \n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    if ( cnt2 >= 1 ) break loop2;\n                    EarlyExitException eee =\n                        new EarlyExitException(2, input);\n                    throw eee;\n            }\n            cnt2++;\n        } while (true);\n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"EQUALEQUAL\"\n", "func_signal": "public final void mEQUALEQUAL() throws RecognitionException", "code": "{\n    try {\n        int _type = EQUALEQUAL;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:151:12: ( '==' )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:151:14: '=='\n        {\n        match(\"==\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "// $ANTLR start \"FOR\"\n", "func_signal": "public final void mFOR() throws RecognitionException", "code": "{\n    try {\n        int _type = FOR;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:142:5: ( 'for' )\n        // F:\\\\Personal\\\\Programs\\\\JadeEditor\\\\grammarTest.g:142:7: 'for'\n        {\n        match(\"for\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "output\\grammarTestLexer.java", "repo_name": "lumenlunae/jade-netbeans-syntax-highlighting", "stars": 24, "license": "None", "language": "java", "size": 2423}
{"docstring": "/**\n * Ensure we're using the right storage engine.\n *\n * @param tableName\n * @param requiredEngine\n */\n", "func_signal": "private void checkDBEngine(String tableName, String requiredEngine, boolean optional)", "code": "{\n    String engine = getEngine(tableName);\n    if (engine == null) {\n        return; // Error.\n    }\n    if (!engine.equalsIgnoreCase(requiredEngine)) {\n        if (!optional) {\n            BBLogging.warning(\"Changing \" + tableName + \" so that it uses \" + requiredEngine + \" instead of \" + engine + \". THIS MAY TAKE A WHILE!\");\n            setEngine(tableName, requiredEngine);\n        } else {\n            BBLogging.warning(\"Table \" + tableName + \" uses the MySQL storage engine \" + engine + \".\");\n            BBLogging.info(\"For optimal performance, we suggest changing to \" + requiredEngine + \" via the following SQL statement:\");\n            BBLogging.info(\"  ALTER TABLE \" + tableName + \" ENGINE = \" + requiredEngine + \";\");\n            BBLogging.info(\"Please note that, on many tables, this could take a very long time.\");\n        }\n    }\n}", "path": "src\\main\\java\\me\\taylorkelly\\bigbrother\\tablemgrs\\BBDataMySQL.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Returns \"LOW_PRIORITY\" for MySQL when mysqlLowPrioInserts is set.\n * \n * @return LOW_PRIORITY | \"\"\n */\n", "func_signal": "public static String getMySQLIgnore()", "code": "{\n    if (BBSettings.mysqlLowPrioInserts) {\n        return \" LOW_PRIORITY \";\n    } else {\n        return \" \";\n    }\n}", "path": "src\\main\\java\\me\\taylorkelly\\bigbrother\\tablemgrs\\BBDataMySQL.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Returns the description of the Stick that the player is holding\n * @param player The player to get their stick info\n * @return the description, or null if the player has no stick\n */\n", "func_signal": "public String descMode(Player player)", "code": "{\n    if (playerModes.containsKey(player.getName())) {\n        return playerModes.get(player.getName()).getDescription();\n    } else {\n        return null;\n    }\n}", "path": "src\\main\\java\\me\\taylorkelly\\bigbrother\\finder\\Sticker.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Casts a value to a long. May return null.\n *\n * @param o\n * @return\n */\n", "func_signal": "private static Long castLong(Object o)", "code": "{\n    if (o == null) {\n        return null;\n    } else if (o instanceof Byte) {\n        return (long) (Byte) o;\n    } else if (o instanceof Integer) {\n        return Long.valueOf((Integer)o);\n    } else if (o instanceof Double) {\n        return (long) (double) (Double) o;\n    } else if (o instanceof Float) {\n        return (long) (float) (Float) o;\n    } else if (o instanceof Long) {\n        return (Long) o;\n    } else {\n        return null;\n    }\n}", "path": "src\\main\\java\\me\\taylorkelly\\bigbrother\\BetterConfig.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Returns true if an item uses its damage value for something\n * other than damage.\n * \n * @param id\n * @return\n */\n", "func_signal": "public static boolean usesDamageValue(int id)", "code": "{\n    return id == 35\n        || id == 351;\n}", "path": "src\\main\\java\\com\\sk89q\\worldedit\\blocks\\ItemType.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Returns true if an item should not be stacked.\n * \n * @param id\n * @return\n */\n", "func_signal": "public static boolean shouldNotStack(int id)", "code": "{\n    return (id >= 256 && id <= 259)\n        || id == 261\n        || (id >= 267 && id <= 279)\n        || (id >= 281 && id <= 286)\n        || (id >= 290 && id <= 294)\n        || (id >= 298 && id <= 317)\n        || (id >= 325 && id <= 327)\n        || id == 335\n        || id == 346;\n}", "path": "src\\main\\java\\com\\sk89q\\worldedit\\blocks\\ItemType.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Get a name for the item.\n *\n * @param id\n * @return\n */\n", "func_signal": "public static String toName(int id)", "code": "{\n    ItemType type = ids.get(id);\n    if (type != null) {\n        return type.getName();\n    } else {\n        return \"#\" + id;\n    }\n}", "path": "src\\main\\java\\com\\sk89q\\worldedit\\blocks\\ItemType.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Generic max finder for a collection. Only works with positive numbers\n * (which we'd be dealing with)\n * @param values Collection of values\n * @return The max of those numbers (or -1 if it's empty)\n */\n", "func_signal": "public static int getMax(Collection<Integer> values)", "code": "{\n    int max = -1;\n    for (Integer value : values) {\n        if (value > max) {\n            max = value;\n        }\n    }\n    return max;\n}", "path": "src\\main\\java\\me\\taylorkelly\\bigbrother\\WorldManager.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Returns the BB index of the world to use (starts at 0 and goes up).\n * If BB has seen it before, it will use the key that it already had paired.\n * Otherwise it will designate a new key, and save that key to bbworlds for\n * later usage\n * @param world The name of the world\n * @return The index of the world\n */\n", "func_signal": "public int getWorld(String world)", "code": "{\n    if (worldMap.containsKey(world)) {\n        return worldMap.get(world);\n    } else {\n        int nextKey = 0;\n        if (!worldMap.isEmpty()) {\n            nextKey = getMax(worldMap.values()) + 1;\n        }\n        saveWorld(world, nextKey);\n        worldMap.put(world, nextKey);\n        return nextKey;\n    }\n}", "path": "src\\main\\java\\me\\taylorkelly\\bigbrother\\WorldManager.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Get a name for a held item.\n *\n * @param id\n * @return\n */\n", "func_signal": "public static String toHeldName(int id)", "code": "{\n    if (id == 0) {\n        return \"Hand\";\n    }\n    ItemType type = ids.get(id);\n    if (type != null) {\n        return type.getName();\n    } else {\n        return \"#\" + id;\n    }\n}", "path": "src\\main\\java\\com\\sk89q\\worldedit\\blocks\\ItemType.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Returns if the player is holding a stick that uses right clicks\n * @param player The player to get info about\n * @return Whether they are holding a right click stick\n */\n", "func_signal": "public boolean rightClickStick(Player player)", "code": "{\n    if (playerModes.containsKey(player.getName())) {\n        StickMode mode = playerModes.get(player.getName());\n        return mode.rightClickStick();\n    }\n    return false;\n}", "path": "src\\main\\java\\me\\taylorkelly\\bigbrother\\finder\\Sticker.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Sends info on a block to a specific player based on their stick\n * @param player The player to send info to and to use their stick\n * @param block The block to get info about\n * @param leftclick \n */\n", "func_signal": "private void blockInfo(Player player, Block block, boolean leftclick)", "code": "{\n    if (playerModes.containsKey(player.getName())) {\n        StickMode mode = playerModes.get(player.getName());\n        ArrayList<String> info = mode.getInfoOnBlock(block, manager, leftclick);\n        for (String msg : info) {\n            player.sendMessage(msg);\n        }\n    }\n}", "path": "src\\main\\java\\me\\taylorkelly\\bigbrother\\finder\\Sticker.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/* (non-Javadoc)\n * @see org.bukkit.command.CommandExecutor#onCommand(org.bukkit.command.CommandSender, org.bukkit.command.Command, java.lang.String, java.lang.String[])\n */\n", "func_signal": "@Override\npublic boolean onCommand(CommandSender player, Command arg1, String arg2, String[] arg3)", "code": "{\n    Updatr.updateAvailable((Player) player);\n    return true;\n}", "path": "src\\main\\java\\me\\taylorkelly\\bigbrother\\commands\\UpdateCommand.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Tell the user what mode their stick is.\n *\n * Better than having this copypasted 8 times\n * @param player Player to talk to about their stick/log\n * @author N3X15\n */\n", "func_signal": "public void reportStickMode(Player player, int stickLevel)", "code": "{\n    if (stickLevel > 0) {\n        player.sendMessage(BigBrother.premessage + \"Your current stick mode is \" + sticker.descMode(player));\n        player.sendMessage(\"Use \" + ChatColor.RED + \"/bb stick 0\" + ChatColor.WHITE + \" to turn it off\");\n    }\n}", "path": "src\\main\\java\\me\\taylorkelly\\bigbrother\\BigBrother.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Creates the Stick Controller\n * @param server The server\n * @param manager The world manager (for passing to sticks)\n */\n", "func_signal": "public Sticker(Server server, WorldManager manager)", "code": "{\n    this.manager = manager;\n    //this.server = server;\n    playerModes = new HashMap<String, StickMode>();\n    modes = new ArrayList<Class<? extends StickMode>>();\n\n    // Add any new SuperSticks here\n    modes.add(HistoryStick.class); // SS 1\n    modes.add(HistoryLog.class); // SS 2\n}", "path": "src\\main\\java\\me\\taylorkelly\\bigbrother\\finder\\Sticker.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Gets the data from a given string\n * @param string The line to get the data from\n * @return The data.\n */\n", "func_signal": "public static String getField(String string)", "code": "{\n    int start = string.indexOf(\"=\");\n    return string.substring(start + 1).trim();\n}", "path": "src\\main\\java\\me\\taylorkelly\\bigbrother\\URLReader.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Determines if a player is using their stick based on the item stack\n * they're associated with. This association is typically what item stack\n * they have in their hand\n * @param player The player to check\n * @param itemStack The item stack they're interacting with.\n * @return true if they're using their stick. false if not\n */\n", "func_signal": "public boolean hasStick(Player player, ItemStack itemStack)", "code": "{\n    if (playerModes.containsKey(player.getName())) {\n        return playerModes.get(player.getName()).usesStick(itemStack);\n    }\n    return false;\n}", "path": "src\\main\\java\\me\\taylorkelly\\bigbrother\\finder\\Sticker.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/* (non-Javadoc)\n * @see me.taylorkelly.bigbrother.tablemgrs.DBTable#getCreateSyntax()\n */\n", "func_signal": "@Override\npublic String getCreateSyntax()", "code": "{\n    return \"CREATE TABLE `\"+getTableName()+\"` (\"\n    + \"`id` INT NOT NULL AUTO_INCREMENT,\" \n    + \"`date` INT UNSIGNED NOT NULL DEFAULT '0',\" \n    + \"`player` INT UNSIGNED NOT NULL DEFAULT 0,\" \n    + \"`action` tinyint NOT NULL DEFAULT '0',\" \n    + \"`world` tinyint NOT NULL DEFAULT '0',\" \n    + \"`x` int NOT NULL DEFAULT '0',\" \n    + \"`y` tinyint UNSIGNED NOT NULL DEFAULT '0',\" \n    + \"`z` int NOT NULL DEFAULT '0',\" \n    + \"`type` smallint NOT NULL DEFAULT '0',\"\n    + \"`data` varchar(500) NOT NULL DEFAULT '',\"\n    + \"`rbacked` boolean NOT NULL DEFAULT '0',\"\n    + \"PRIMARY KEY (`id`),\" \n    + \"INDEX(`world`),\" \n    + \"INDEX(`x`,`y`,`z`),\" \n    + \"INDEX(`player`),\"\n    + \"INDEX(`action`),\" \n    + \"INDEX(`date`),\" \n    + \"INDEX(`type`),\" \n    + \"INDEX(`rbacked`)\" \n    + \")\";\n}", "path": "src\\main\\java\\me\\taylorkelly\\bigbrother\\tablemgrs\\BBDataMySQL.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Returns the Calendar of the date represented by now subtracted by\n * a given time formatted with:\n * #d - number of days\n * #h - number of hours\n * #m - number of minutes\n * #s - number of seconds\n * @param strTime The string\n * @param player The player to report to\n * @return The Calendar of the specified date\n */\n", "func_signal": "public static Calendar parseTime(String strTime, Player player)", "code": "{\n    Calendar dateSearch;\n    int days = 0;\n    int hours = 0;\n    int minutes = 0;\n    int seconds = 0;\n\n    int lastIndex = 0;\n    int currIndex = 1;\n    while (currIndex <= strTime.length()) {\n        while (currIndex <= strTime.length() && Numbers.isInteger(strTime.substring(lastIndex, currIndex))) {\n            currIndex++;\n        }\n        if (currIndex - 1 == lastIndex) {\n            player.sendMessage(ChatColor.RED + \"Ignoring time quantifier with no time value: \" + strTime.substring(currIndex - 1, currIndex));\n            return null;\n        } else {\n            if (strTime.substring(currIndex - 1, currIndex).equalsIgnoreCase(\"d\")) {\n                if (days != 0) {\n                    player.sendMessage(ChatColor.RED + \"Two day keys have been set. Ignoring: \" + strTime.substring(lastIndex, currIndex));\n                } else {\n                    days = Integer.parseInt(strTime.substring(lastIndex, currIndex - 1));\n                }\n            } else if (strTime.substring(currIndex - 1, currIndex).equalsIgnoreCase(\"h\")) {\n                if (hours != 0) {\n                    player.sendMessage(ChatColor.RED + \"Two hour keys have been set. Ignoring: \" + strTime.substring(lastIndex, currIndex));\n                } else {\n                    hours = Integer.parseInt(strTime.substring(lastIndex, currIndex - 1));\n                }\n            } else if (strTime.substring(currIndex - 1, currIndex).equalsIgnoreCase(\"m\")) {\n                if (minutes != 0) {\n                    player.sendMessage(ChatColor.RED + \"Two minute keys have been set. Ignoring: \" + strTime.substring(lastIndex, currIndex));\n                } else {\n                    minutes = Integer.parseInt(strTime.substring(lastIndex, currIndex - 1));\n                }\n            } else if (strTime.substring(currIndex - 1, currIndex).equalsIgnoreCase(\"s\")) {\n                if (seconds != 0) {\n                    player.sendMessage(ChatColor.RED + \"Two second keys have been set. Ignoring: \" + strTime.substring(lastIndex, currIndex));\n                } else {\n                    seconds = Integer.parseInt(strTime.substring(lastIndex, currIndex - 1));\n                }\n            } else {\n                player.sendMessage(ChatColor.RED + \"Ignoring time quantifier with invalid key: \" + strTime.substring(currIndex - 1, currIndex));\n                return null;\n            }\n        }\n        lastIndex = currIndex;\n        currIndex += 1;\n    }\n\n    if (days == 0 && hours == 0 && minutes == 0 && seconds == 0) {\n        player.sendMessage(ChatColor.RED + \"No change in time was set.\");\n        return null;\n    } else {\n        dateSearch = Calendar.getInstance();\n        dateSearch.add(Calendar.DAY_OF_MONTH, -days);\n        dateSearch.add(Calendar.HOUR, -hours);\n        dateSearch.add(Calendar.MINUTE, -minutes);\n        dateSearch.add(Calendar.SECOND, -seconds);\n        return dateSearch;\n    }\n}", "path": "src\\main\\java\\me\\taylorkelly\\util\\TimeParser.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * Occurs when a player uses their stick. Gets info and applies updates\n * @param player The player to have their stick used.... >.>\n * @param block The block that the stick is interacting with\n */\n", "func_signal": "public void stick(Player player, Block block, boolean leftclick)", "code": "{\n    blockInfo(player, block, leftclick);\n    if (playerModes.containsKey(player.getName())) {\n        StickMode mode = playerModes.get(player.getName());\n        mode.update(player);\n    }\n}", "path": "src\\main\\java\\me\\taylorkelly\\bigbrother\\finder\\Sticker.java", "repo_name": "taylorkelly/BigBrother", "stars": 29, "license": "gpl-3.0", "language": "java", "size": 3460}
{"docstring": "/**\n * {@inheritDoc }\n */\n", "func_signal": "public Dimension getMinimumSize()", "code": "{\n    // Use KLabel's preferred size for its minimum size, to work around a known bug in the KDK.\n    Dimension d = super.getPreferredSize();\n    if (spoofSize) return new Dimension(d.width, d.height - underlineGap - underlineWidth);\n    return new Dimension(d.width, d.height + underlineGap + underlineWidth + 1);\n}", "path": "src\\org\\kwt\\ui\\KWTSelectableLabel.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/** \n * Called when the checkbox is toggled by the user. This method should never be called by\n * client code.\n * \n * @param event the event that toggled this action\n */\n", "func_signal": "public void actionPerformed(ActionEvent event)", "code": "{\n    if (isRadioButton() && selected) return; // can't deselect last radio button\n    setSelected(!selected);\n}", "path": "src\\org\\kwt\\ui\\KWTCheckbox.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/**\n * {@inheritDoc }\n */\n", "func_signal": "public Dimension getSize()", "code": "{\n    Dimension d = super.getSize();\n    if (spoofSize) return new Dimension(d.width, d.height - underlineGap - underlineWidth);\n    return new Dimension(d.width, d.height + underlineGap + underlineWidth + 1);\n}", "path": "src\\org\\kwt\\ui\\KWTSelectableLabel.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/** \n * Selects a radio button, deselecting the previously selected button.\n * \n * @param box a radio button belonging to this group, or <code>null</code> to deselect\n * everything.\n */\n", "func_signal": "public void setSelected(KWTCheckbox box)", "code": "{\n    if (box != null && box.group != this) {\n        return;\n    }\n    KWTCheckbox oldChoice = this.selected;\n    this.selected = box;\n    if (oldChoice != null && oldChoice != box && oldChoice.group == this) {\n        oldChoice.setSelected(false);\n    }\n    if (box != null && oldChoice != box && !box.isSelected()) {\n        box.setSelected(true);\n    }\n}", "path": "src\\org\\kwt\\ui\\KWTCheckboxGroup.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/**\n * Sets the total number of ticks. If the current tick is larger than <code>totalTicks</code>,\n * then it is set to <code>totalTicks</code>.\n * \n * @param totalTicks the total number of ticks representing completion of the task.\n */\n", "func_signal": "public void setTotalTicks(int totalTicks)", "code": "{\n    this.totalTicks = totalTicks;\n    \n    // Make sure current tick is not beyond the maximum value.\n    setCurrentTick(currentTick);\n}", "path": "src\\org\\kwt\\ui\\KWTProgressBar.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/**\n * Sets the style of underlining to be used when the label has the focus. Valid styles are:\n * <ul>\n *   <li> <code>STYLE_NONE</code> - the label will not be underlined at all\n *   <li> <code>STYLE_SOLID</code> - the label will be underlined by a solid line\n *   <li> <code>STYLE_DASHED</code> - the label will be underlined by a dashed line\n * </ul>\n * \n * @param style the style to use for the underlining\n */\n", "func_signal": "public void setUnderlineStyle(int style) throws InvalidStyleException", "code": "{\n    if (style < STYLE_NONE || style > STYLE_DASHED)\n        throw new InvalidStyleException(this.getClass().getName() +\n                \" does not support the given style for underlining.\", style);\n    underlineStyle = style;\n}", "path": "src\\org\\kwt\\ui\\KWTSelectableLabel.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/**\n * Sets the style of label to be used. Valid styles are:\n * <ul>\n *   <li> <code>STYLE_NONE</code> - no label will be shown.\n *   <li> <code>STYLE_PERCENTAGE</code> - the label will display a percentage of completion.\n *   <li> <code>STYLE_TOTAL</code> - the label will display a fraction of <code>totalTicks</code>\n * </ul>\n * \n * @param style the style of label to be used.\n * @throws InvalidStyleException if <code>style</code> is not one of the allowed values.\n */\n", "func_signal": "public void setLabelStyle(int style) throws InvalidStyleException", "code": "{\n    if (style < STYLE_NONE || style > STYLE_TOTAL)\n        throw new InvalidStyleException(this.getClass().getName() + \n            \" does not support the given style for highlighting.\", style);\n    labelStyle = style;\n}", "path": "src\\org\\kwt\\ui\\KWTProgressBar.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/**\n * Constructs a new exception with the specified detail message and style.\n * @param message the detail message\n * @param invalidStyle the style which could not be applied\n */\n", "func_signal": "public InvalidStyleException(String message, int invalidStyle)", "code": "{\n    super(message);\n    this.invalidStyle = invalidStyle;\n}", "path": "src\\org\\kwt\\InvalidStyleException.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/** Toggle the state of this box. If it belongs to a KWTCheckboxGroup, it will deselect the currently\n *  selected box in that group.\n *  \n *  @param selected whether to select or deselect this box.\n */\n", "func_signal": "public void setSelected(boolean selected)", "code": "{\n    if (this.selected == selected) return;\n    if (selected && group != null) group.setSelected(this);\n    this.selected = selected;\n    repaint();\n}", "path": "src\\org\\kwt\\ui\\KWTCheckbox.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/**\n * Constructs a new selectable label with the given text. The text will be clipped if it extends\n * past the label's maximum size.\n * \n * @param text the label's text\n */\n", "func_signal": "public KWTSelectableLabel(String text)", "code": "{\n    super(text);\n    enableEvents(AWTEvent.KEY_EVENT_MASK);\n    setFocusable(true);\n    actionListeners = new LinkedList();\n}", "path": "src\\org\\kwt\\ui\\KWTSelectableLabel.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/**\n * {@inheritDoc }\n */\n", "func_signal": "public void paint(Graphics g)", "code": "{\n    // Max Ascent ~ maximum height of a letter from the baseline\n    // We'll use maxAscent to size our checkbox\n    int maxAscent = g.getFontMetrics().getMaxAscent();\n    int diameter = maxAscent - border;\n\n    int x = padding + border;\n    int y = padding + border;\n\n    g.setColor(Color.black);\n    if (isRadioButton()) {\n        if (selected) g.fillOval(x, y, diameter, diameter);\n        g.drawOval(x, y, diameter, diameter);\n    } else {\n        // checkbox\n        if (selected) {\n            // draw X\n            g.drawLine(x, y, x+diameter, y+diameter);\n            g.drawLine(x, y+diameter, x+diameter, y);\n        }\n        g.drawRect(x, y, diameter, diameter);\n    }\n    \n    if (!isFocusOwner()) {\n        g.setColor(Color.white);\n    }\n    for (int i = 0; i < border; i++) {\n        // Draw the border as a sequence of self-contained rectangles\n        // The first border is the full size, the next border is 1px smaller, and so on\n        int rectWidth = diameter + 2 * (padding + border - i);\n        g.drawRect(i, i, rectWidth, rectWidth);\n    }\n}", "path": "src\\org\\kwt\\ui\\KWTCheckbox.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/**\n * {@inheritDoc }\n */\n", "func_signal": "public void paint(Graphics g)", "code": "{\n    spoofSize = true;\n    super.paint(g);\n    spoofSize = false;\n    if (this.isFocusOwner()) {\n        int y = super.getSize().height - (underlineGap + underlineWidth);\n        g.setColor(Color.BLACK);\n        switch (underlineStyle) {\n        case STYLE_SOLID:\n            g.fillRect(0, y + underlineGap, this.getWidth() - 1, underlineWidth - 1);\n            break;\n        case STYLE_DASHED:\n            for (int i = 0; i <= (this.getWidth() - 1) / (underlineWidth - 1); i += 2) {\n                g.fillRect(i * (underlineWidth - 1), y + underlineGap, underlineWidth - 1, underlineWidth - 1);\n            }\n        }\n    }\n}", "path": "src\\org\\kwt\\ui\\KWTSelectableLabel.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/**\n * Sets the style of highlighting to be used when the label has the focus. Valid styles are:\n * <ul>\n *   <li> <code>STYLE_NONE</code> - the label will not be highlighted at all\n *   <li> <code>STYLE_SOLID</code> - the label will have an inverted foreground and background color.\n * </ul>\n * \n * @param style the style to use for the highlighting\n * @throws InvalidStyleException if <code>style</code> is not one of the allowed values.\n */\n", "func_signal": "public void setHighlightStyle(int style) throws InvalidStyleException", "code": "{\n    if (style < STYLE_NONE || style > STYLE_SOLID)\n        throw new InvalidStyleException(this.getClass().getName() + \n                \" does not support the given style for highlighting.\", style);\n    highlightStyle = style;\n}", "path": "src\\org\\kwt\\ui\\KWTSelectableLabel.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/**\n * {@inheritDoc }\n */\n", "func_signal": "public Dimension getPreferredSize()", "code": "{\n    Dimension d = getMinimumSize();\n    d.width = Math.max(width, d.width);\n    return d;\n}", "path": "src\\org\\kwt\\ui\\KWTProgressBar.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/** Constructs a radio button belonging to a group.\n *\n *  @param group the group this radio button will belong to\n */\n", "func_signal": "public KWTCheckbox(KWTCheckboxGroup group)", "code": "{\n    this.group = group;\n    addActionListener(this);\n}", "path": "src\\org\\kwt\\ui\\KWTCheckbox.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/**\n * {@inheritDoc }\n */\n", "func_signal": "public Dimension getMinimumSize()", "code": "{\n    int d = getFontMetrics(getFont()).getMaxAscent();\n    d += (padding + border) * 2;\n    return new Dimension(d, d);\n}", "path": "src\\org\\kwt\\ui\\KWTCheckbox.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/**\n * {@inheritDoc }\n */\n", "func_signal": "public void paint(Graphics g)", "code": "{\n    double progress = (double) currentTick / totalTicks;\n    g.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, CORNER_ROUNDING, CORNER_ROUNDING);\n    g.setColor(Color.BLACK);\n    g.fillRoundRect(0, 0, (int) (progress * getWidth()) - 1, getHeight() - 1, CORNER_ROUNDING, CORNER_ROUNDING);\n    \n    if (labelStyle == STYLE_PERCENTAGE || labelStyle == STYLE_TOTAL) {\n        String progressString = \"\";\n        switch (labelStyle) {\n        case STYLE_PERCENTAGE:\n            progressString = ((int) (progress * 100)) + \"%\";\n            break;\n        case STYLE_TOTAL:\n            progressString = currentTick + \"/\" + totalTicks;\n        }\n        g.setXORMode(Color.WHITE);\n        g.drawString(progressString,\n                ((getWidth() - 1) / 2) - (getFontMetrics(getFont()).stringWidth(progressString) / 2),\n                getFontMetrics(getFont()).getHeight());\n    }\n}", "path": "src\\org\\kwt\\ui\\KWTProgressBar.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/**\n * {@inheritDoc }\n */\n", "func_signal": "public Dimension getMinimumSize()", "code": "{\n    return new Dimension(getMinimumWidth() + 2 * HORIZONTAL_PADDING,\n            getMinimumHeight() + 2 * VERTICAL_PADDING);\n}", "path": "src\\org\\kwt\\ui\\KWTProgressBar.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/**\n * {@inheritDoc }\n */\n", "func_signal": "protected void processEvent(AWTEvent e)", "code": "{\n    switch(e.getID()) {\n    case BUTTON_DOWN_EVENT:\n        if (((KeyEvent) e).getKeyCode() != SELECT_BUTTON_KEY) break;\n        Iterator it = actionListeners.iterator();\n        while (it.hasNext()) {\n            ActionListener listener = (ActionListener) it.next();\n            listener.actionPerformed(new ActionEvent(this, BUTTON_DOWN_EVENT, null));\n        }\n        break;\n    default:\n        break;\n    }\n}", "path": "src\\org\\kwt\\ui\\KWTSelectableLabel.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/**\n * Constructs a new progress bar. The current tick begins at 0.\n * \n * @param totalTicks The total number of ticks representing completion of the task.\n */\n", "func_signal": "public KWTProgressBar(int totalTicks)", "code": "{\n    this.totalTicks = totalTicks;\n    this.currentTick = 0;\n    \n    this.setFocusable(false);\n}", "path": "src\\org\\kwt\\ui\\KWTProgressBar.java", "repo_name": "apetresc/Kindle-Widget-Toolkit", "stars": 23, "license": "apache-2.0", "language": "java", "size": 117}
{"docstring": "/**\n * Create a new noiseChecker with the given parameters.\n * @param bdacParameters The sampleRate-dependent parameters\n */\n", "func_signal": "public NoiseChecker(QRSDetectorParameters qrsDetectorParameters)", "code": "{\n\tqrsDetParas = qrsDetectorParameters;\n\tNB_LENGTH   = qrsDetectorParameters.MS1500 ;\n\tNoiseBuffer = new int[NB_LENGTH] ;\n\t}", "path": "src\\eplimited\\osea\\classification\\NoiseChecker.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * RhythmChk() takes an R-to-R interval as input and, based on previous R-to-R\n * intervals, classifys the interval as NORMAL, PVC, or UNKNOWN.\n * \n * @param rr An R-toR interval\n * @return The classification\n */\n", "func_signal": "public int RhythmChk(int rr)", "code": "{\n\tint i, regular = 1 ;\n\tint NNEst, NVEst ;\n\n\tBigeminyFlag = false ;\n\n\t// Wait for at least 4 beats before classifying anything.\n\n\tif(BeatCount < 4)\n\t\t{\n\t\tif(++BeatCount == 4)\n\t\t\tClassifyState = READY ;\n\t\t}\n\n\t// Stick the new RR interval into the RR interval Buffer.\n\n\tfor(i = RBB_LENGTH-1; i > 0; --i)\n\t\t{\n\t\tRRBuffer[i] = RRBuffer[i-1] ;\n\t\tRRTypes[i] = RRTypes[i-1] ;\n\t\t}\n\n\tRRBuffer[0] = rr ;\n\n\tif(ClassifyState == LEARNING)\n\t\t{\n\t\tRRTypes[0] = QQ ;\n\t\treturn(UNKNOWN) ;\n\t\t}\n\n\t// If we couldn't tell what the last interval was...\n\n\tif(RRTypes[1] == QQ)\n\t\t{\n\t\tfor(i = 0, regular = 1; i < 3; ++i)\n\t\t\tif(RRMatch(RRBuffer[i],RRBuffer[i+1]) == false)\n\t\t\t\tregular = 0 ;\n\n\t\t// If this, and the last three intervals matched, classify\n\t\t// it as Normal-Normal.\n\n\t\tif(regular == 1)\n\t\t\t{\n\t\t\tRRTypes[0] = NN ;\n\t\t\treturn(NORMAL) ;\n\t\t\t}\n\n\t\t// Check for bigeminy.\n\t\t// Call bigeminy if every other RR matches and\n\t\t// consecutive beats do not match.\n\n\t\tfor(i = 0, regular = 1; i < 6; ++i)\n\t\t\tif(RRMatch(RRBuffer[i],RRBuffer[i+2]) == false)\n\t\t\t\tregular = 0 ;\n\t\tfor(i = 0; i < 6; ++i)\n\t\t\tif(RRMatch(RRBuffer[i],RRBuffer[i+1]))\n\t\t\t\tregular = 0 ;\n\n\t\tif(regular == 1)\n\t\t\t{\n\t\t\tBigeminyFlag = true ;\n\t\t\tif(RRBuffer[0] < RRBuffer[1])\n\t\t\t\t{\n\t\t\t\tRRTypes[0] = NV ;\n\t\t\t\tRRTypes[1] = VN ;\n\t\t\t\treturn(PVC) ;\n\t\t\t\t}\n\t\t\telse\n\t\t\t\t{\n\t\t\t\tRRTypes[0] = VN ;\n\t\t\t\tRRTypes[1] = NV ;\n\t\t\t\treturn(NORMAL) ;\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Check for NNVNNNV pattern.\n\n\t\tif(RRShort(RRBuffer[0],RRBuffer[1]) && RRMatch(RRBuffer[1],RRBuffer[2])\n\t\t\t&& RRMatch(RRBuffer[2]*2,RRBuffer[3]+RRBuffer[4]) &&\n\t\t\tRRMatch(RRBuffer[4],RRBuffer[0]) && RRMatch(RRBuffer[5],RRBuffer[2]))\n\t\t\t{\n\t\t\tRRTypes[0] = NV ;\n\t\t\tRRTypes[1] = NN ;\n\t\t\treturn(PVC) ;\n\t\t\t}\n\n\t\t// If the interval is not part of a\n\t\t// bigeminal or regular pattern, give up.\n\n\t\telse\n\t\t\t{\n\t\t\tRRTypes[0] = QQ ;\n\t\t\treturn(UNKNOWN) ;\n\t\t\t}\n\t\t}\n\n\t// If the previous two beats were normal...\n\n\telse if(RRTypes[1] == NN)\n\t\t{\n\n\t\tif(RRShort2(RRBuffer,RRTypes))\n\t\t\t{\n\t\t\tif(RRBuffer[1] < BRADY_LIMIT)\n\t\t\t\t{\n\t\t\t\tRRTypes[0] = NV ;\n\t\t\t\treturn(PVC) ;\n\t\t\t\t}\n\t\t\telse RRTypes[0] = QQ ;\n\t\t\t\treturn(UNKNOWN) ;\n\t\t\t}\n\n\n\t\t// If this interval matches the previous interval, then it\n\t\t// is regular.\n\n\t\telse if(RRMatch(RRBuffer[0],RRBuffer[1]))\n\t\t\t{\n\t\t\tRRTypes[0] = NN ;\n\t\t\treturn(NORMAL) ;\n\t\t\t}\n\n\t\t// If this interval is short..\n\n\t\telse if(RRShort(RRBuffer[0],RRBuffer[1]))\n\t\t\t{\n\n\t\t\t// But matches the one before last and the one before\n\t\t\t// last was NN, this is a normal interval.\n\n\t\t\tif(RRMatch(RRBuffer[0],RRBuffer[2]) && (RRTypes[2] == NN))\n\t\t\t\t{\n\t\t\t\tRRTypes[0] = NN ;\n\t\t\t\treturn(NORMAL) ;\n\t\t\t\t}\n\n\t\t\t// If the rhythm wasn't bradycardia, call it a PVC.\n\n\t\t\telse if(RRBuffer[1] < BRADY_LIMIT)\n\t\t\t\t{\n\t\t\t\tRRTypes[0] = NV ;\n\t\t\t\treturn(PVC) ;\n\t\t\t\t}\n\n\t\t\t// If the regular rhythm was bradycardia, don't assume that\n\t\t\t// it was a PVC.\n\n\t\t\telse\n\t\t\t\t{\n\t\t\t\tRRTypes[0] = QQ ;\n\t\t\t\treturn(UNKNOWN) ;\n\t\t\t\t}\n\t\t\t}\n\n\t\t// If the interval isn't normal or short, then classify\n\t\t// it as normal but don't assume normal for future\n\t\t// rhythm classification.\n\n\t\telse\n\t\t\t{\n\t\t\tRRTypes[0] = QQ ;\n\t\t\treturn(NORMAL) ;\n\t\t\t}\n\t\t}\n\n\t// If the previous beat was a PVC...\n\n\telse if(RRTypes[1] == NV)\n\t\t{\n\n\t\tif(RRShort2(Arrays.copyOfRange(RRBuffer, 1, RRBuffer.length),\n\t\t\t\t\tArrays.copyOfRange(RRTypes, 1, RRTypes.length)))\n\t\t\t{\n\n\t\t\tif(RRMatch(RRBuffer[0],RRBuffer[1]))\n\t\t\t\t{\n\t\t\t\tRRTypes[0] = NN ;\n\t\t\t\tRRTypes[1] = NN ;\n\t\t\t\treturn(NORMAL) ;\n\t\t\t\t}\n\t\t\telse if(RRBuffer[0] > RRBuffer[1])\n\t\t\t\t{\n\t\t\t\tRRTypes[0] = VN ;\n\t\t\t\treturn(NORMAL) ;\n\t\t\t\t}\n\t\t\telse\n\t\t\t\t{\n\t\t\t\tRRTypes[0] = QQ ;\n\t\t\t\treturn(UNKNOWN) ;\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t// If this interval matches the previous premature\n\t\t// interval assume a ventricular couplet.\n\n\t\telse if(RRMatch(RRBuffer[0],RRBuffer[1]))\n\t\t\t{\n\t\t\tRRTypes[0] = VV ;\n\t\t\treturn(PVC) ;\n\t\t\t}\n\n\t\t// If this interval is larger than the previous\n\t\t// interval, assume that it is NORMAL.\n\n\t\telse if(RRBuffer[0] > RRBuffer[1])\n\t\t\t{\n\t\t\tRRTypes[0] = VN ;\n\t\t\treturn(NORMAL) ;\n\t\t\t}\n\n\t\t// Otherwise don't make any assumputions about\n\t\t// what this interval represents.\n\n\t\telse\n\t\t\t{\n\t\t\tRRTypes[0] = QQ ;\n\t\t\treturn(UNKNOWN) ;\n         }\n\t\t}\n\n\t// If the previous beat followed a PVC or couplet etc...\n\n\telse if(RRTypes[1] == VN)\n\t\t{\n\n\t\t// Find the last NN interval.\n\n\t\tfor(i = 2; (i < RBB_LENGTH) && (RRTypes[i] != NN) ; ++i) ;\n\n\t\t// If there was an NN interval in the interval buffer...\n\t\tif(i != RBB_LENGTH)\n\t\t\t{\n\t\t\tNNEst = RRBuffer[i] ;\n\n\t\t\t// and it matches, classify this interval as NORMAL.\n\n\t\t\tif(RRMatch(RRBuffer[0],NNEst))\n\t\t\t\t{\n\t\t\t\tRRTypes[0] = NN ;\n\t\t\t\treturn(NORMAL) ;\n\t\t\t\t}\n\t\t\t}\n\n\t\telse NNEst = 0 ;\n\t\tfor(i = 2; (i < RBB_LENGTH) && (RRTypes[i] != NV); ++i) ;\n\t\tif(i != RBB_LENGTH)\n\t\t\tNVEst = RRBuffer[i] ;\n\t\telse NVEst = 0 ;\n\t\tif((NNEst == 0) && (NVEst != 0))\n\t\t\tNNEst = (RRBuffer[1]+NVEst) >> 1 ;\n\n\t\t// NNEst is either the last NN interval or the average\n\t\t// of the most recent NV and VN intervals.\n\n\t\t// If the interval is closer to NN than NV, try\n\t\t// matching to NN.\n\n\t\tif((NVEst != 0) &&\n\t\t\t(Math.abs(NNEst - RRBuffer[0]) < Math.abs(NVEst - RRBuffer[0])) &&\n\t\t\tRRMatch(NNEst,RRBuffer[0]))\n\t\t\t{\n\t\t\tRRTypes[0] = NN ;\n\t\t\treturn(NORMAL) ;\n\t\t\t}\n\n\t\t// If this interval is closer to NV than NN, try\n\t\t// matching to NV.\n\n\t\telse if((NVEst != 0) &&\n\t\t\t(Math.abs(NNEst - RRBuffer[0]) > Math.abs(NVEst - RRBuffer[0])) &&\n\t\t\tRRMatch(NVEst,RRBuffer[0]))\n\t\t\t{\n\t\t\tRRTypes[0] = NV ;\n\t\t\treturn(PVC) ;\n\t\t\t}\n\n\t\t// If equally close, or we don't have an NN or NV in the buffer,\n\t\t// who knows what it is.\n\n\t\telse\n\t\t\t{\n\t\t\tRRTypes[0] = QQ ;\n\t\t\treturn(UNKNOWN) ;\n\t\t\t}\n\t\t}\n\n\t// Otherwise the previous interval must have been a VV\n\n\telse\n\t\t{\n\n\t\t// Does this match previous VV.\n\n\t\tif(RRMatch(RRBuffer[0],RRBuffer[1]))\n\t\t\t{\n\t\t\tRRTypes[0] = VV ;\n\t\t\treturn(PVC) ;\n\t\t\t}\n\n\t\t// If this doesn't match a previous VV interval, assume\n\t\t// any new interval is recovery to Normal beat.\n\n\t\telse\n\t\t\t{\n\t\t\tif(RRShort(RRBuffer[0],RRBuffer[1]))\n\t\t\t\t{\n\t\t\t\tRRTypes[0] = QQ ;\n\t\t\t\treturn(UNKNOWN) ;\n\t\t\t\t}\n\t\t\telse\n\t\t\t\t{\n\t\t\t\tRRTypes[0] = VN ;\n\t\t\t\treturn(NORMAL) ;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "path": "src\\eplimited\\osea\\classification\\RythmChecker.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * deriv1 and deriv2 implement derivative approximations represented by the difference equation:\n * \n *   y[n] = x[n] - x[n - 10ms]\n *   \n *  Filter delay is DERIV_LENGTH/2\n * \n * @param datum sample of an ECG signal\n * @return the result of the derivative approximation\n */\n", "func_signal": "public int deriv1( int x )", "code": "{\n\tint y ;\n\ty = x - deriv1_derBuff[deriv1_derI] ;\n\tderiv1_derBuff[deriv1_derI] = x ;\n\tif(++deriv1_derI == qrsDetParas.DERIV_LENGTH)\n\t\tderiv1_derI = 0 ;\n\treturn(y) ;\n\t}", "path": "src\\eplimited\\osea\\detection\\QRSFilterer.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * Classify the previous beat type and rhythm type based on this beat\n * and the preceding beat.  This classifier is more sensitive\n * to detecting premature beats followed by compensitory pauses.\n * \n * @param recentTypes\n * @param domType\n * @param recentRRs\n * @param width\n * @param mi2\n * @param rhythmClass\n */\n", "func_signal": "public void PostClassify(int[] recentTypes, int domType, int[] recentRRs, int width, double mi2,\n\tint rhythmClass)", "code": "{\n\tint i, regCount, pvcCount, normRR ;\n\tdouble mi3 ;\n\n\t// If the preceeding and following beats are the same type,\n\t// they are generally regular, and reasonably close in shape\n\t// to the dominant type, consider them to be dominant.\n\n\tif((recentTypes[0] == recentTypes[2]) && (recentTypes[0] != domType)\n\t\t&& (recentTypes[0] != recentTypes[1]))\n\t\t{\n\t\tmi3 = matcher.DomCompare(recentTypes[0],domType) ;\n\t\tfor(i = regCount = 0; i < 8; ++i)\n\t\t\tif(PCRhythm[Math.min(recentTypes[0], bdacParas.MAXTYPES-1)][i] == NORMAL)\n\t\t\t\t++regCount ;\n\t\tif((mi3 < 2.0) && (regCount > 6))\n\t\t\tdomType = recentTypes[0] ;\n\t\t}\n\n\t// Don't do anything until four beats have gone by.\n\n\tif(PCInitCount < 3)\n\t\t{\n\t\t++PCInitCount ;\n\t\tPostClassify_lastMI2 = 0 ;\n\t\tPostClassify_lastRC = 0 ;\n\t\treturn ;\n\t\t}\n\n\tif(recentTypes[1] < bdacParas.MAXTYPES)\n\t\t{\n\n\t\t// Find first NN interval.\n\t\tfor(i = 2; (i < 7) && (recentTypes[i] != recentTypes[i+1]); ++i) ;\n\t\tif(i == 7) normRR = 0 ;\n\t\telse normRR = recentRRs[i] ;\n\n\t\t// Shift the previous beat classifications to make room for the\n\t\t// new classification.\n\t\tfor(i = pvcCount = 0; i < 8; ++i)\n\t\t\tif(PostClass[recentTypes[1]][i] == PVC)\n\t\t\t\t++pvcCount ;\n\n\t\tfor(i = 7; i > 0; --i)\n\t\t\t{\n\t\t\tPostClass[recentTypes[1]][i] = PostClass[recentTypes[1]][i-1] ;\n\t\t\tPCRhythm[recentTypes[1]][i] = PCRhythm[recentTypes[1]][i-1] ;\n\t\t\t}\n\n\t\t// If the beat is premature followed by a compensitory pause and the\n\t\t// previous and following beats are normal, post classify as\n\t\t// a PVC.\n\n\t\tif(((normRR-(normRR>>3)) >= recentRRs[1]) && ((recentRRs[0]-(recentRRs[0]>>3)) >= normRR)// && (lastMI2 > 3)\n\t\t\t&& (recentTypes[0] == domType) && (recentTypes[2] == domType)\n\t\t\t\t&& (recentTypes[1] != domType))\n\t\t\tPostClass[recentTypes[1]][0] = PVC ;\n\n\t\t// If previous two were classified as PVCs, and this is at least slightly\n\t\t// premature, classify as a PVC.\n\n\t\telse if(((normRR-(normRR>>4)) > recentRRs[1]) && ((normRR+(normRR>>4)) < recentRRs[0]) &&\n\t\t\t(((PostClass[recentTypes[1]][1] == PVC) && (PostClass[recentTypes[1]][2] == PVC)) ||\n\t\t\t\t(pvcCount >= 6) ) &&\n\t\t\t(recentTypes[0] == domType) && (recentTypes[2] == domType) && (recentTypes[1] != domType))\n\t\t\tPostClass[recentTypes[1]][0] = PVC ;\n\n\t\t// If the previous and following beats are the dominant beat type,\n\t\t// and this beat is significantly different from the dominant,\n\t\t// call it a PVC.\n\n\t\telse if((recentTypes[0] == domType) && (recentTypes[2] == domType) && (PostClassify_lastMI2 > 2.5))\n\t\t\tPostClass[recentTypes[1]][0] = PVC ;\n\n\t\t// Otherwise post classify this beat as UNKNOWN.\n\n\t\telse PostClass[recentTypes[1]][0] = UNKNOWN ;\n\n\t\t// If the beat is premature followed by a compensitory pause, post\n\t\t// classify the rhythm as PVC.\n\n\t\tif(((normRR-(normRR>>3)) > recentRRs[1]) && ((recentRRs[0]-(recentRRs[0]>>3)) > normRR))\n\t\t\tPCRhythm[recentTypes[1]][0] = PVC ;\n\n\t\t// Otherwise, post classify the rhythm as the same as the\n\t\t// regular rhythm classification.\n\n\t\telse PCRhythm[recentTypes[1]][0] = PostClassify_lastRC ;\n\t\t}\n\n\tPostClassify_lastMI2 = mi2 ;\n\tPostClassify_lastRC = rhythmClass ;\n\t}", "path": "src\\eplimited\\osea\\classification\\PostClassifier.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * Create a new filterer with the given parameters.\n * @param qrsDetectorParameters The sampleRate-dependent parameters\n */\n", "func_signal": "public QRSFilterer(QRSDetectorParameters qrsDetectorParameters)", "code": "{\n\tqrsDetParas = qrsDetectorParameters ;\n\tlpfilt_data    = new int[qrsDetectorParameters.LPBUFFER_LGTH] ;\n\thpfilt_data    = new int[qrsDetectorParameters.HPBUFFER_LGTH] ;\n\tderiv1_derBuff = new int[qrsDetectorParameters.DERIV_LENGTH] ;\n\tderiv2_derBuff = new int[qrsDetectorParameters.DERIV_LENGTH] ;\n\tmvwint_data    = new int[qrsDetectorParameters.WINDOW_WIDTH];\n\t}", "path": "src\\eplimited\\osea\\detection\\QRSFilterer.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * TempClass() classifies beats based on their beat features, relative\n * to the features of the dominant beat and the present noise level.\n * \n * @param rhythmClass\n * @param morphType\n * @param beatWidth\n * @param domWidth\n * @param domType\n * @param hfNoise\n * @param noiseLevel\n * @param blShift\n * @param domIndex\n * @return\n */\n", "func_signal": "private int TempClass(int rhythmClass, int morphType,\n\tint beatWidth, int domWidth, int domType,\n\tint hfNoise, int noiseLevel, int blShift, double domIndex)", "code": "{\n\n\t// Rule 1:  If no dominant type has been detected classify all\n\t// beats as UNKNOWN.\n\n\tif(domType < 0)\n\t\treturn(UNKNOWN) ;\n\n\t// Rule 2:  If the dominant rhythm is normal, the dominant\n\t// beat type doesn't vary much, this beat is premature\n\t// and looks sufficiently different than the dominant beat\n\t// classify as PVC.\n\n\tif(matcher.MinimumBeatVariation(domType) && (rhythmClass == PVC)\n\t\t&& (domIndex > R2_DI_THRESHOLD) && (GetDomRhythm() == 1))\n\t\treturn(PVC) ;\n\n\t// Rule 3:  If the beat is sufficiently narrow, classify as normal.\n\n\tif(beatWidth < R3_WIDTH_THRESHOLD)\n\t\treturn(NORMAL) ;\n\n\t// Rule 5:  If the beat cannot be matched to any previously\n\t// detected morphology and it is not premature, consider it normal\n\t// (probably noisy).\n\n\tif((morphType == bdacParas.MAXTYPES) && (rhythmClass != PVC)) // == UNKNOWN\n\t\treturn(NORMAL) ;\n\n\t// Rule 6:  If the maximum number of beat types have been stored,\n\t// this beat is not regular or premature and only one\n\t// beat of this morphology has been seen, call it normal (probably\n\t// noisy).\n\n\tif((matcher.GetTypesCount() == bdacParas.MAXTYPES) && (matcher.GetBeatTypeCount(morphType)==1)\n\t\t\t && (rhythmClass == UNKNOWN))\n\t\treturn(NORMAL) ;\n\n\t// Rule 7:  If this beat looks like the dominant beat and the\n\t// rhythm is regular, call it normal.\n\n\tif((domIndex < R7_DI_THRESHOLD) && (rhythmClass == NORMAL))\n\t\treturn(NORMAL) ;\n\n\t// Rule 8:  If post classification rhythm is normal for this\n\t// type and its shape is close to the dominant shape, classify\n\t// as normal.\n\n\tif((domIndex < R8_DI_THRESHOLD) && (postClassifier.CheckPCRhythm(morphType) == NORMAL))\n\t\treturn(NORMAL) ;\n\n\t// Rule 9:  If the beat is not premature, it looks similar to the dominant\n\t// beat type, and the dominant beat type is variable (noisy), classify as\n\t// normal.\n\n\tif((domIndex < R9_DI_THRESHOLD) && (rhythmClass != PVC) && matcher.WideBeatVariation(domType))\n\t\treturn(NORMAL) ;\n\n\t// Rule 10:  If this beat is significantly different from the dominant beat\n\t// there have previously been matching beats, the post rhythm classification\n\t// of this type is PVC, and the dominant rhythm is regular, classify as PVC.\n\n\tif((domIndex > R10_DI_THRESHOLD)\n\t\t&& (matcher.GetBeatTypeCount(morphType) >= R10_BC_LIM) &&\n\t\t(postClassifier.CheckPCRhythm(morphType) == PVC) && (GetDomRhythm() == 1))\n\t\treturn(PVC) ;\n\n\t// Rule 11: if the beat is wide, wider than the dominant beat, doesn't\n\t// appear to be noisy, and matches a previous type, classify it as\n\t// a PVC.\n\n\tif( (beatWidth >= R11_MIN_WIDTH) &&\n\t\t(((beatWidth - domWidth >= R11_WIDTH_DIFF1) && (domWidth < R11_WIDTH_BREAK)) ||\n\t\t(beatWidth - domWidth >= R11_WIDTH_DIFF2)) &&\n\t\t(hfNoise < R11_HF_THRESHOLD) && (noiseLevel < R11_MA_THRESHOLD) && (blShift < BL_SHIFT_LIMIT) &&\n\t\t(morphType < bdacParas.MAXTYPES) && (matcher.GetBeatTypeCount(morphType) > R11_BC_LIM))\t// Rev 1.1\n\n\t\treturn(PVC) ;\n\n\t// Rule 12:  If the dominant rhythm is regular and this beat is premature\n\t// then classify as PVC.\n\n\tif((rhythmClass == PVC) && (GetDomRhythm() == 1))\n\t\treturn(PVC) ;\n\n\t// Rule 14:  If the beat is regular and the dominant rhythm is regular\n\t// call the beat normal.\n\n\tif((rhythmClass == NORMAL) && (GetDomRhythm() == 1))\n\t\treturn(NORMAL) ;\n\n\t// By this point, we know that rhythm will not help us, so we\n\t// have to classify based on width and similarity to the dominant\n\t// beat type.\n\n\t// Rule 15: If the beat is wider than normal, wide on an\n\t// absolute scale, and significantly different from the\n\t// dominant beat, call it a PVC.\n\n\tif((beatWidth > domWidth) && (domIndex > R15_DI_THRESHOLD) &&\n\t\t(beatWidth >= R15_WIDTH_THRESHOLD))\n\t\treturn(PVC) ;\n\n\t// Rule 16:  If the beat is sufficiently narrow, call it normal.\n\n\tif(beatWidth < R16_WIDTH_THRESHOLD)\n\t\treturn(NORMAL) ;\n\n\t// Rule 17:  If the beat isn't much wider than the dominant beat\n\t// call it normal.\n\n\tif(beatWidth < domWidth + R17_WIDTH_DELTA)\n\t\treturn(NORMAL) ;\n\n\t// If the beat is noisy but reasonably close to dominant,\n\t// call it normal.\n\n\t// Rule 18:  If the beat is similar to the dominant beat, call it normal.\n\n\tif(domIndex < R18_DI_THRESHOLD)\n\t\treturn(NORMAL) ;\n\n\t// If it's noisy don't trust the width.\n\n\t// Rule 19:  If the beat is noisy, we can't trust our width estimate\n\t// and we have no useful rhythm information, so guess normal.\n\n\tif(hfNoise > R19_HF_THRESHOLD)\n\t\treturn(NORMAL) ;\n\n\t// Rule 20:  By this point, we have no rhythm information, the beat\n\t// isn't particularly narrow, the beat isn't particulary similar to\n\t// the dominant beat, so guess a PVC.\n\n\treturn(PVC) ;\n\n\t}", "path": "src\\eplimited\\osea\\classification\\Classifier.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * Injects the objects.\n * \n * @param matcher The matcher\n * @param rythmChecker The rythmChecker\n * @param postClassifier The postClassifier\n * @param beatAnalyzer The beatAnalyzer\n */\n", "func_signal": "public void setObjects(Matcher matcher, RythmChecker rythmChecker, \n\t\tPostClassifier postClassifier, BeatAnalyzer beatAnalyzer)", "code": "{\n\tthis.matcher = matcher ;\n\tthis.rythmChecker = rythmChecker ;\n\tthis.postClassifier = postClassifier ;\n\tthis.beatAnalyzer = beatAnalyzer ;\n\t}", "path": "src\\eplimited\\osea\\classification\\Classifier.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * Create a new post classifier with the given parameters.\n * @param bdacParameters The sampleRate-dependent parameters\n * @param mat The Matcher\n */\n", "func_signal": "public PostClassifier(BDACParameters bdacParameters)", "code": "{\n\tbdacParas = bdacParameters;\n\tPostClass = new int[bdacParameters.MAXTYPES][8] ;\n\tPCRhythm  = new int[bdacParameters.MAXTYPES][8] ;\n\t}", "path": "src\\eplimited\\osea\\classification\\PostClassifier.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * Check classification of previous beats' rhythms based on post beat\n * classification.  If 7 of 8 previous beats were classified as NORMAL\n * (regular) classify the beat type as NORMAL (regular).\n * Call it a PVC if 2 of the last 8 were regular.\n * \n * @param type\n * @return\n */\n", "func_signal": "public int CheckPCRhythm(int type)", "code": "{\n\tint i ;\n\tint normCount ;\n\tint n ;\n\n\tif(type == bdacParas.MAXTYPES)\n\t\treturn(UNKNOWN) ;\n\n\tif(matcher.GetBeatTypeCount(type) < 9)\n\t\tn = matcher.GetBeatTypeCount(type)-1 ;\n\telse n = 8 ;\n\n\tfor(i = normCount = 0; i < n; ++i)\n\t\tif(PCRhythm[type][i] == NORMAL)\n\t\t\t++normCount;\n\tif(normCount >= 7)\n\t\treturn(NORMAL) ;\n\tif(((normCount == 0) && (n < 4)) ||\n\t\t((normCount <= 1) && (n >= 4) && (n < 7)) ||\n\t\t((normCount <= 2) && (n >= 7)))\n\t\treturn(PVC) ;\n\treturn(UNKNOWN) ;\n\t}", "path": "src\\eplimited\\osea\\classification\\PostClassifier.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * NoiseCheck() must be called for every sample of data.  The data is\n * stored in a circular buffer to facilitate noise analysis.  When a\n * beat is detected NoiseCheck() is passed the sample delay since the\n * R-wave of the beat occurred (delay), the RR interval between this\n * beat and the next most recent beat, the estimated offset from the\n * R-wave to the beginning of the beat (beatBegin), and the estimated\n * offset from the R-wave to the end of the beat.\n * \n * NoiseCheck() estimates the noise in the beat by the maximum and\n * minimum signal values in either a window from the end of the\n * previous beat to the beginning of the present beat, or a 250 ms\n * window preceding the present beat, which ever is shorter.\n * \n * NoiseCheck() returns ratio of the signal variation in the window\n * between beats to the length of the window between the beats.  If\n * the heart rate is too high and the beat durations are too long,\n * NoiseCheck() returns 0.\n * \n * @param datum\n * @param delay\n * @param RR\n * @param beatBegin\n * @param beatEnd\n * @return ratio of the signal variation in the window between beats \n * to the length of the window between the beats\n */\n", "func_signal": "public int NoiseCheck(int datum, int delay, int RR, int beatBegin, int beatEnd)", "code": "{\n\tint ptr, i;\n\tint ncStart, ncEnd, ncMax, ncMin ;\n\tdouble noiseIndex ;\n\n\tNoiseBuffer[NBPtr] = datum ;\n\tif(++NBPtr == NB_LENGTH)\n\t\tNBPtr = 0 ;\n\n\t// Check for noise in region that is 300 ms following\n\t// last R-wave and 250 ms preceding present R-wave.\n\n\tncStart = delay+RR-beatEnd ;\t// Calculate offset to end of previous beat.\n\tncEnd = delay+beatBegin ;\t\t// Calculate offset to beginning of this beat.\n\tif(ncStart > ncEnd + qrsDetParas.MS250)\n\t\tncStart = ncEnd + qrsDetParas.MS250 ;\n\n\n\t// Estimate noise if delay indicates a beat has been detected,\n\t// the delay is not to long for the data buffer, and there is\n\t// some space between the end of the last beat and the beginning\n\t// of this beat.\n\n\tif((delay != 0) && (ncStart < NB_LENGTH) && (ncStart > ncEnd))\n\t\t{\n\n\t\tptr = NBPtr - ncStart ;\t// Find index to end of last beat in\n\t\tif(ptr < 0)\t\t\t\t\t// the circular buffer.\n\t\t\tptr += NB_LENGTH ;\n\n\t\t// Find the maximum and minimum values in the\n\t\t// isoelectric region between beats.\n\n\t\tncMax = ncMin = NoiseBuffer[ptr] ;\n\t\tfor(i = 0; i < ncStart-ncEnd; ++i)\n\t\t\t{\n\t\t\tif(NoiseBuffer[ptr] > ncMax)\n\t\t\t\tncMax = NoiseBuffer[ptr] ;\n\t\t\telse if(NoiseBuffer[ptr] < ncMin)\n\t\t\t\tncMin = NoiseBuffer[ptr] ;\n\t\t\tif(++ptr == NB_LENGTH)\n\t\t\t\tptr = 0 ;\n\t\t\t}\n\n\t\t// The noise index is the ratio of the signal variation\n\t\t// over the isoelectric window length, scaled by 10.\n\n\t\tnoiseIndex = (ncMax-ncMin) ;\n\t\tnoiseIndex /= (ncStart-ncEnd) ;\n\t\tNoiseEstimate = (int) (noiseIndex * 10) ;\n\t\t}\n\telse\n\t\tNoiseEstimate = 0 ;\n\treturn(NoiseEstimate) ;\n\t}", "path": "src\\eplimited\\osea\\classification\\NoiseChecker.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * HFNoiseCheck() gauges the high frequency (muscle noise) present in the\n * beat template.  The high frequency noise level is estimated by highpass\n * filtering the beat (y[n] = x[n] - 2*x[n-1] + x[n-2]), averaging the\n * highpass filtered signal over five samples, and finding the maximum of\n * this averaged highpass filtered signal.  The high frequency noise metric\n * is then taken to be the ratio of the maximum averaged highpassed signal\n * to the QRS amplitude.\n * \n * @param beat\n * @return\n */\n", "func_signal": "private int HFNoiseCheck(int[] beat)", "code": "{\n\tint maxNoiseAve = 0, i ;\n\tint sum=0;\n\tint[] aveBuff = new int[AVELENGTH] ;\n\tint avePtr = 0 ;\n\tint qrsMax = 0, qrsMin = 0 ;\n\n\t// Determine the QRS amplitude.\n\n\tfor(i = bdacParas.FIDMARK-bdacParas.BEAT_MS70; i < bdacParas.FIDMARK+bdacParas.BEAT_MS80; ++i)\n\t\tif(beat[i] > qrsMax)\n\t\t\tqrsMax = beat[i] ;\n\t\telse if(beat[i] < qrsMin)\n\t\t\tqrsMin = beat[i] ;\n\n\tfor(i = 0; i < AVELENGTH; ++i)\n\t\taveBuff[i] = 0 ;\n\n\tfor(i = bdacParas.FIDMARK-bdacParas.BEAT_MS280; i < bdacParas.FIDMARK+bdacParas.BEAT_MS280; ++i)\n\t\t{\n\t\tsum -= aveBuff[avePtr] ;\n\t\taveBuff[avePtr] = Math.abs(beat[i] - (beat[i-bdacParas.BEAT_MS10]<<1) + beat[i-2*bdacParas.BEAT_MS10]) ;\n\t\tsum += aveBuff[avePtr] ;\n\t\tif(++avePtr == AVELENGTH)\n\t\t\tavePtr = 0 ;\n\t\tif((i < (bdacParas.FIDMARK - bdacParas.BEAT_MS50)) || (i > (bdacParas.FIDMARK + bdacParas.BEAT_MS110)))\n\t\t\tif(sum > maxNoiseAve)\n\t\t\t\tmaxNoiseAve = sum ;\n\t\t}\n\tif((qrsMax - qrsMin)>=4)\n\t\treturn((maxNoiseAve * (50/AVELENGTH))/((qrsMax-qrsMin)>>2)) ;\n\telse return(0) ;\n\t}", "path": "src\\eplimited\\osea\\classification\\Classifier.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * lpfilt() implements the digital filter represented by the difference equation:\n * \n *   y[n] = 2*y[n-1] - y[n-2] + x[n] - 2*x[t-24 ms] + x[t-48 ms]\n * \n * Note that the filter delay is (LPBUFFER_LGTH/2)-1\n * \n * @param datum sample of an ECG signal\n * @return the result of the filtering\n */\n", "func_signal": "private int lpfilt( int datum )", "code": "{\n\tlong y0 ;\n\tint output ;\n\tint halfPtr ;\n\n\thalfPtr = lpfilt_ptr-(qrsDetParas.LPBUFFER_LGTH/2) ; // Use halfPtr to index\n\tif(halfPtr < 0) // to x[n-6].\n\t\thalfPtr += qrsDetParas.LPBUFFER_LGTH ;\n\ty0 = (lpfilt_y1 << 1) - lpfilt_y2 + datum - (lpfilt_data[halfPtr] << 1) + lpfilt_data[lpfilt_ptr] ;\n\tlpfilt_y2 = lpfilt_y1;\n\tlpfilt_y1 = y0;\n\toutput = (int) y0 / ((qrsDetParas.LPBUFFER_LGTH*qrsDetParas.LPBUFFER_LGTH)/4);\n\tlpfilt_data[lpfilt_ptr] = datum ; // Stick most recent sample into\n\tif(++lpfilt_ptr == qrsDetParas.LPBUFFER_LGTH) // the circular buffer and update\n\t\tlpfilt_ptr = 0 ; // the buffer pointer.\n\treturn(output) ;\n\t}", "path": "src\\eplimited\\osea\\detection\\QRSFilterer.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * DomMonitor, monitors which beat morphology is considered to be dominant.\n * The dominant morphology is the beat morphology that has been most frequently\n * classified as normal over the course of the last 120 beats.  The dominant\n * beat rhythm is classified as regular if at least 3/4 of the dominant beats\n * have been classified as regular.\n * \n * @param morphType\n * @param rhythmClass\n * @param beatWidth\n * @param rr\n * @return\n */\n", "func_signal": "public int DomMonitor(int morphType, int rhythmClass, int beatWidth, int rr)", "code": "{\n\t\n\tint i, oldType, runCount, dom, max ;\n\n\t// Fetch the type of the beat before the last beat.\n\n\ti = brIndex - 2 ;\n\tif(i < 0)\n\t\ti += DM_BUFFER_LENGTH ;\n\toldType = DMBeatTypes[i] ;\n\n\t// Once we have wrapped around, subtract old beat types from\n\t// the beat counts.\n\n\tif((DMBeatTypes[brIndex] != -1) && (DMBeatTypes[brIndex] != bdacParas.MAXTYPES))\n\t\t{\n\t\t--DMBeatCounts[DMBeatTypes[brIndex]] ;\n\t\tDMNormCounts[DMBeatTypes[brIndex]] -= DMBeatClasses[brIndex] ;\n\t\tif(DMBeatRhythms[brIndex] == UNKNOWN)\n\t\t\t--DMIrregCount ;\n\t\t}\n\n\t// If this is a morphology that has been detected before, decide\n\t// (for the purposes of selecting the dominant normal beattype)\n\t// whether it is normal or not and update the approporiate counts.\n\n\tif(morphType != 8)\n\t\t{\n\n\t\t// Update the buffers of previous beats and increment the\n\t\t// count for this beat type.\n\n\t\tDMBeatTypes[brIndex] = morphType ;\n\t\t++DMBeatCounts[morphType] ;\n\t\tDMBeatRhythms[brIndex] = rhythmClass ;\n\n\t\t// If the rhythm appears regular, update the regular rhythm\n\t\t// count.\n\n\t\tif(rhythmClass == UNKNOWN)\n\t\t\t++DMIrregCount ;\n\n\t\t// Check to see how many beats of this type have occurred in\n\t\t// a row (stop counting at six).\n\n\t\ti = brIndex - 1 ;\n\t\tif(i < 0) i += DM_BUFFER_LENGTH ;\n\t\tfor(runCount = 0; (DMBeatTypes[i] == morphType) && (runCount < 6); ++runCount)\n\t\t\tif(--i < 0) i += DM_BUFFER_LENGTH ;\n\n\t\t// If the rhythm is regular, the beat width is less than 130 ms, and\n\t\t// there have been at least two in a row, consider the beat to be\n\t\t// normal.\n\n\t\tif((rhythmClass == NORMAL) && (beatWidth < bdacParas.BEAT_MS130) && (runCount >= 1))\n\t\t\t{\n\t\t\tDMBeatClasses[brIndex] = 1 ;\n\t\t\t++DMNormCounts[morphType] ;\n\t\t\t}\n\n\t\t// If the last beat was within the normal P-R interval for this beat,\n\t\t// and the one before that was this beat type, assume the last beat\n\t\t// was noise and this beat is normal.\n\n\t\telse if(rr < ((bdacParas.FIDMARK-matcher.GetBeatBegin(morphType))*qrsDetParas.SAMPLE_RATE/bdacParas.BEAT_SAMPLE_RATE)\n\t\t\t&& (oldType == morphType))\n\t\t\t{\n\t\t\tDMBeatClasses[brIndex] = 1 ;\n\t\t\t++DMNormCounts[morphType] ;\n\t\t\t}\n\n\t\t// Otherwise assume that this is not a normal beat.\n\n\t\telse DMBeatClasses[brIndex] = 0 ;\n\t\t}\n\n\t// If the beat does not match any of the beat types, store\n\t// an indication that the beat does not match.\n\n\telse\n\t\t{\n\t\tDMBeatClasses[brIndex] = 0 ;\n\t\tDMBeatTypes[brIndex] = -1 ;\n\t\t}\n\n\t// Increment the index to the beginning of the circular buffers.\n\n\tif(++brIndex == DM_BUFFER_LENGTH)\n\t\tbrIndex = 0 ;\n\n\t// Determine which beat type has the most beats that seem\n\t// normal.\n\n\tdom = 0 ;\n\tfor(i = 1; i < 8; ++i)\n\t\tif(DMNormCounts[i] > DMNormCounts[dom])\n\t\t\tdom = i ;\n\n\tmax = 0 ;\n\tfor(i = 1; i < 8; ++i)\n\t\tif(DMBeatCounts[i] > DMBeatCounts[max])\n\t\t\tmax = i ;\n\n\t// If there are no normal looking beats, fall back on which beat\n\t// has occurred most frequently since classification began.\n\n\tif((DMNormCounts[dom] == 0) || (DMBeatCounts[max]/DMBeatCounts[dom] >= 2))\t\t\t// == 0\n\t\tdom = matcher.GetDominantType() ;\n\n\t// If at least half of the most frequently occuring normal\n\t// type do not seem normal, fall back on choosing the most frequently\n\t// occurring type since classification began.\n\n\telse if(DMBeatCounts[dom]/DMNormCounts[dom] >= 2)\n\t\tdom = matcher.GetDominantType() ;\n\n\t// If there is any beat type that has been classfied as normal,\n\t// but at least 10 don't seem normal, reclassify it to UNKNOWN.\n\n\tfor(i = 0; i < 8; ++i)\n\t\tif((DMBeatCounts[i] > 10) && (DMNormCounts[i] == 0) && (i != dom)\n\t\t\t&& (matcher.GetBeatClass(i) == NORMAL))\n\t\t\tmatcher.SetBeatClass(i,UNKNOWN) ;\n\n\t// Save the dominant type in a global variable so that it is\n\t// accessable for debugging.\n\n\treturn(dom) ;\n\t}", "path": "src\\eplimited\\osea\\classification\\Classifier.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * mvwint() implements a moving window integrator.  Actually, mvwint() averages\n * the signal values over the last WINDOW_WIDTH samples.\n * \n * @param datum sample of an ECG signal\n * @return the average\n */\n", "func_signal": "private int mvwint( int datum )", "code": "{\n\tint output;\n\tmvwint_sum += datum ;\n\tmvwint_sum -= mvwint_data[mvwint_ptr] ;\n\tmvwint_data[mvwint_ptr] = datum ;\n\tif(++mvwint_ptr == qrsDetParas.WINDOW_WIDTH)\n\t\tmvwint_ptr = 0 ;\n\tif((mvwint_sum / qrsDetParas.WINDOW_WIDTH) > 32000)\n\t\toutput = 32000 ;\n\telse\n\t\toutput = (int) (mvwint_sum / qrsDetParas.WINDOW_WIDTH) ;\n\treturn(output) ;\n\t}", "path": "src\\eplimited\\osea\\detection\\QRSFilterer.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * Classify() takes a beat buffer, the previous rr interval, and the present\n * noise level estimate and returns a beat classification of NORMAL, PVC, or\n * UNKNOWN. \n * \n * @param newBeat\n * @param rr\n * @param noiseLevel\n * @return\n */\n", "func_signal": "public ClassifyResult Classify(int[] newBeat,int rr, int noiseLevel)", "code": "{\n\tClassifyResult result = new ClassifyResult();\n\tint rhythmClass, beatClass, i, beatWidth, blShift ;\n\tdouble domIndex ;\n\t\n\tint domType, domWidth ;\n\tint tempClass ;\n\tint hfNoise ;\n\n\thfNoise = HFNoiseCheck(newBeat) ;\t// Check for muscle noise.\n\trhythmClass = rythmChecker.RhythmChk(rr) ;\t\t\t// Check the rhythm.\n\n\t// Estimate beat features.\n\n\tAnalyzeBeatResult ar = beatAnalyzer.AnalyzeBeat(newBeat) ;\n\n\tblShift = Math.abs(lastIsoLevel-ar.isoLevel) ;\n\tlastIsoLevel = ar.isoLevel ;\n\n\t// Make isoelectric level 0.\n\n\tfor(i = 0; i < bdacParas.BEATLGTH; ++i)\n\t\tnewBeat[i] -= ar.isoLevel ;\n\n\t// If there was a significant baseline shift since\n\t// the last beat and the last beat was a new type,\n\t// delete the new type because it might have resulted\n\t// from a baseline shift.\n\n\tif( (blShift > BL_SHIFT_LIMIT)\n\t\t&& (lastBeatWasNew == 1)\n\t\t&& (lastRhythmClass == NORMAL)\n\t\t&& (rhythmClass == NORMAL) )\n\t\tmatcher.ClearLastNewType() ;\n\n\tlastBeatWasNew = 0 ;\n\n\t// Find the template that best matches this beat.\n\n\tBestMorphMatchResult bmr = matcher.BestMorphMatch(newBeat) ;\n\tmorphType = bmr.matchType;\n\n\t// Disregard noise if the match is good. (New)\n\n\tif(bmr.matchIndex < MATCH_NOISE_THRESHOLD)\n\t\thfNoise = noiseLevel = blShift = 0 ;\n\n\t// Apply a stricter match limit to premature beats.\n\n\tif((bmr.matchIndex < MATCH_LIMIT) && (rhythmClass == PVC) &&\n\t\t\tmatcher.MinimumBeatVariation(morphType) && (bmr.mi2 > PVC_MATCH_WITH_AMP_LIMIT))\n\t\t{\n\t\tmorphType = matcher.NewBeatType(newBeat) ;\n\t\tlastBeatWasNew = 1 ;\n\t\t}\n\n\t// Match if within standard match limits.\n\n\telse if((bmr.matchIndex < MATCH_LIMIT) && (bmr.mi2 <= MATCH_WITH_AMP_LIMIT))\n\t\tmatcher.UpdateBeatType(morphType,newBeat,bmr.mi2,bmr.shiftAdj) ;\n\n\t// If the beat isn't noisy but doesn't match, start a new beat.\n\n\telse if((blShift < BL_SHIFT_LIMIT) && (noiseLevel < NEW_TYPE_NOISE_THRESHOLD)\n\t\t&& (hfNoise < NEW_TYPE_HF_NOISE_LIMIT))\n\t\t{\n\t\tmorphType = matcher.NewBeatType(newBeat) ;\n\t\tlastBeatWasNew = 1 ;\n\t\t}\n\n\t// Even if it is a noisy, start new beat if it was an irregular beat.\n\n\telse if((lastRhythmClass != NORMAL) || (rhythmClass != NORMAL))\n\t\t{\n\t\tmorphType = matcher.NewBeatType(newBeat) ;\n\t\tlastBeatWasNew = 1 ;\n\t\t}\n\n\t// If its noisy and regular, don't waste space starting a new beat.\n\n\telse morphType = bdacParas.MAXTYPES ;\n\n\t// Update recent rr and type arrays.\n\n\tfor(i = 7; i > 0; --i)\n\t\t{\n\t\tRecentRRs[i] = RecentRRs[i-1] ;\n\t\tRecentTypes[i] = RecentTypes[i-1] ;\n\t\t}\n\tRecentRRs[0] = rr ;\n\tRecentTypes[0] = morphType ;\n\n\tlastRhythmClass = rhythmClass ;\n\tlastIsoLevel = ar.isoLevel ;\n\n\t// Fetch beat features needed for classification.\n\t// Get features from average beat if it matched.\n\n\tif(morphType != bdacParas.MAXTYPES)\n\t\t{\n\t\tbeatClass = matcher.GetBeatClass(morphType) ;\n\t\tbeatWidth = matcher.GetBeatWidth(morphType) ;\n\t\tresult.fidAdj = matcher.GetBeatCenter(morphType)-bdacParas.FIDMARK ;\n\n\t\t// If the width seems large and there have only been a few\n\t\t// beats of this type, use the actual beat for width\n\t\t// estimate.\n\n\t\tif((beatWidth > ar.offset-ar.onset) && (matcher.GetBeatTypeCount(morphType) <= 4))\n\t\t\t{\n\t\t\tbeatWidth = ar.offset-ar.onset ;\n\t\t\tresult.fidAdj = ((ar.offset+ar.onset)/2)-bdacParas.FIDMARK ;\n\t\t\t}\n\t\t}\n\n\t// If this beat didn't match get beat features directly\n\t// from this beat.\n\n\telse\n\t\t{\n\t\tbeatWidth = ar.offset-ar.onset ;\n\t\tbeatClass = UNKNOWN ;\n\t\tresult.fidAdj = ((ar.offset+ar.onset)/2)-bdacParas.FIDMARK ;\n\t\t}\n\n\t// Fetch dominant type beat features.\n\n\tdomType = DomMonitor(morphType, rhythmClass, beatWidth, rr) ;\n\tdomWidth = matcher.GetBeatWidth(domType) ;\n\n\t// Compare the beat type, or actual beat to the dominant beat.\n\n\tif((morphType != domType) && (morphType != 8))\n\t\tdomIndex = matcher.DomCompare(morphType,domType) ;\n\telse if(morphType == 8)\n\t\tdomIndex = matcher.DomCompare2(newBeat,domType) ;\n\telse domIndex = bmr.matchIndex ;\n\n\t// Update post classificaton of the previous beat.\n\n\tpostClassifier.PostClassify(RecentTypes, domType, RecentRRs, beatWidth, domIndex, rhythmClass) ;\n\n\t// Classify regardless of how the morphology\n\t// was previously classified.\n\n\ttempClass = TempClass(rhythmClass, morphType, beatWidth, domWidth,\n\t\tdomType, hfNoise, noiseLevel, blShift, domIndex) ;\n\n\t// If this morphology has not been classified yet, attempt to classify\n\t// it.\n\n\tif((beatClass == UNKNOWN) && (morphType < bdacParas.MAXTYPES))\n\t\t{\n\n\t\t// Classify as normal if there are 6 in a row\n\t\t// or at least two in a row that meet rhythm\n\t\t// rules for normal.\n\n\t\trunCount = GetRunCount() ;\n\n\t\t// Classify a morphology as NORMAL if it is not too wide, and there\n\t\t// are three in a row.  The width criterion prevents ventricular beats\n\t\t// from being classified as normal during VTACH (MIT/BIH 205).\n\n\t\tif((runCount >= 3) && (domType != -1) && (beatWidth < domWidth+bdacParas.BEAT_MS20))\n\t\t\tmatcher.SetBeatClass(morphType,NORMAL) ;\n\n\t\t// If there is no dominant type established yet, classify any type\n\t\t// with six in a row as NORMAL.\n\n\t\telse if((runCount >= 6) && (domType == -1))\n\t\t\tmatcher.SetBeatClass(morphType,NORMAL) ;\n\n\t\t// During bigeminy, classify the premature beats as ventricular if\n\t\t// they are not too narrow.\n\n\t\telse if(rythmChecker.IsBigeminy())\n\t\t\t{\n\t\t\tif((rhythmClass == PVC) && (beatWidth > bdacParas.BEAT_MS100))\n\t\t\t\tmatcher.SetBeatClass(morphType,PVC) ;\n\t\t\telse if(rhythmClass == NORMAL)\n\t\t\t\tmatcher.SetBeatClass(morphType,NORMAL) ;\n\t\t\t}\n\t\t}\n\n\t// Save morphology type of this beat for next classification.\n\n\tresult.beatMatch = morphType ;\n\n\tbeatClass = matcher.GetBeatClass(morphType) ;\n   \n\t// If the morphology has been previously classified.\n\t// use that classification.\n  //\treturn(rhythmClass) ;\n\n\tif(beatClass != UNKNOWN)\n\t\t{\n\t\tresult.tempClass = beatClass ;\n\t\treturn(result) ;\n\t\t}\n\n\tif(postClassifier.CheckPostClass(morphType) == PVC)\n\t\t{\n\t\tresult.tempClass = PVC ;\n\t\treturn(result) ;\n\t\t}\n\n\t// Otherwise use the temporary classification.\n\tresult.tempClass = tempClass;\n\treturn(result) ;\n\t}", "path": "src\\eplimited\\osea\\classification\\Classifier.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * GetRunCount() checks how many of the present beat type have occurred in a row.\n * \n * @return\n */\n", "func_signal": "public int GetRunCount()", "code": "{\n\tint i ;\n\tfor(i = 1; (i < 8) && (RecentTypes[0] == RecentTypes[i]); ++i) ;\n\treturn(i) ;\n\t}", "path": "src\\eplimited\\osea\\classification\\Classifier.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * QRSFilter() takes samples of an ECG signal as input and returns a sample of\n * a signal that is an estimate of the local energy in the QRS bandwidth.  In\n * other words, the signal has a lump in it whenever a QRS complex, or QRS\n * complex like artifact occurs.  The filters were originally designed for data\n * sampled at 200 samples per second, but they work nearly as well at sample\n * frequencies from 150 to 250 samples per second.\n * \n * @param datum sample of an ECG signal\n * @return a sample of a signal that is an estimate of the local energy in the QRS bandwidth\n */\n", "func_signal": "public int QRSFilter(int datum)", "code": "{\n\tint fdatum ;\n\tfdatum = lpfilt( datum ) ;  // Low pass filter data.\n\tfdatum = hpfilt( fdatum ) ; // High pass filter data.\n\tfdatum = deriv2( fdatum ) ; // Take the derivative.\n\tfdatum = Math.abs(fdatum) ;\t// Take the absolute value.\n\tfdatum = mvwint( fdatum ) ; // Average over an 80 ms window .\n\treturn(fdatum) ;\n\t}", "path": "src\\eplimited\\osea\\detection\\QRSFilterer.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * CheckPostClass checks to see if three of the last four or six of the\n * last eight of a given beat type have been post classified as PVC.\n * \n * @param type\n * @return\n */\n", "func_signal": "public int CheckPostClass(int type)", "code": "{\n\tint i, pvcs4 = 0, pvcs8 ;\n\n\tif(type == bdacParas.MAXTYPES)\n\t\treturn(UNKNOWN) ;\n\n\tfor(i = 0; i < 4; ++i)\n\t\tif(PostClass[type][i] == PVC)\n\t\t\t++pvcs4 ;\n\tfor(pvcs8=pvcs4; i < 8; ++i)\n\t\tif(PostClass[type][i] == PVC)\n\t\t\t++pvcs8 ;\n\n\tif((pvcs4 >= 3) || (pvcs8 >= 6))\n\t\treturn(PVC) ;\n\telse return(UNKNOWN) ;\n\t}", "path": "src\\eplimited\\osea\\classification\\PostClassifier.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * Create a new classifier with the given parameters.\n * @param bdacParameters The sampleRate-dependent parameters\n * @param qrsDetectorParameters The sampleRate-dependent parameters\n * @param pc The PostClassifier\n * @param ba The BeatAnalyzer\n */\n", "func_signal": "public Classifier(BDACParameters bdacParameters, QRSDetectorParameters qrsDetectorParameters)", "code": "{\n\tbdacParas = bdacParameters ;\n\tqrsDetParas = qrsDetectorParameters ;\n\t\n\tR3_WIDTH_THRESHOLD  = bdacParameters.BEAT_MS90 ;\n\tR11_MIN_WIDTH       = bdacParameters.BEAT_MS110 ;\n\tR11_WIDTH_BREAK     = bdacParameters.BEAT_MS140 ; \n\tR11_WIDTH_DIFF1     = bdacParameters.BEAT_MS40 ;\n\tR11_WIDTH_DIFF2     = bdacParameters.BEAT_MS60 ;\n\tR15_WIDTH_THRESHOLD = bdacParameters.BEAT_MS100 ;\n\tR16_WIDTH_THRESHOLD = bdacParameters.BEAT_MS100 ;\n\tR17_WIDTH_DELTA     = bdacParameters.BEAT_MS20 ;\n\tAVELENGTH           = bdacParameters.BEAT_MS50 ;\n\tfor(int i = 0; i < DM_BUFFER_LENGTH; ++i)\n\t\t{\n\t\tDMBeatTypes[i] = -1 ;\n\t\t}\n\t}", "path": "src\\eplimited\\osea\\classification\\Classifier.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * hpfilt() implements the high pass filter represented by the following difference equation:\n * \n *   y[n] = y[n-1] + x[n] - x[n-128 ms]\n *   z[n] = x[n-64 ms] - y[n]\n * \n * Filter delay is (HPBUFFER_LGTH-1)/2\n * \n * @param datum sample of an ECG signal\n * @return the result of the filtering\n */\n", "func_signal": "private int hpfilt( int datum )", "code": "{\n\tint z ;\n\tint halfPtr ;\n\n\thpfilt_y += datum - hpfilt_data[hpfilt_ptr];\n\thalfPtr = hpfilt_ptr-(qrsDetParas.HPBUFFER_LGTH/2) ;\n\tif(halfPtr < 0)\n\t\thalfPtr += qrsDetParas.HPBUFFER_LGTH ;\n\tz = (int) (hpfilt_data[halfPtr] - (hpfilt_y / qrsDetParas.HPBUFFER_LGTH));\n\thpfilt_data[hpfilt_ptr] = datum ;\n\tif(++hpfilt_ptr == qrsDetParas.HPBUFFER_LGTH)\n\t\thpfilt_ptr = 0 ;\n\treturn( z );\n\t}", "path": "src\\eplimited\\osea\\detection\\QRSFilterer.java", "repo_name": "MEDEVIT/OSEA-4-Java", "stars": 26, "license": "mit", "language": "java", "size": 141}
{"docstring": "/**\n * Set animation style\n * \n * @param screenWidth screen width\n * @param requestedX distance from left edge\n * @param onTop flag to indicate where the popup should be displayed. Set TRUE if displayed on top of anchor view\n * \t\t  and vice versa\n */\n", "func_signal": "private void setAnimationStyle(int screenWidth, int requestedX, boolean onTop)", "code": "{\n\tint arrowPos = requestedX - mArrowUp.getMeasuredWidth()/2;\n\n\tswitch (animStyle) {\n\tcase ANIM_GROW_FROM_LEFT:\n\t\tmWindow.setAnimationStyle((onTop) ? R.style.Animations_PopUpMenu_Left : R.style.Animations_PopDownMenu_Left);\n\t\tbreak;\n\t\t\t\t\n\tcase ANIM_GROW_FROM_RIGHT:\n\t\tmWindow.setAnimationStyle((onTop) ? R.style.Animations_PopUpMenu_Right : R.style.Animations_PopDownMenu_Right);\n\t\tbreak;\n\t\t\t\t\n\tcase ANIM_GROW_FROM_CENTER:\n\t\tmWindow.setAnimationStyle((onTop) ? R.style.Animations_PopUpMenu_Center : R.style.Animations_PopDownMenu_Center);\n\tbreak;\n\t\t\n\tcase ANIM_REFLECT:\n\t\tmWindow.setAnimationStyle((onTop) ? R.style.Animations_PopUpMenu_Reflect : R.style.Animations_PopDownMenu_Reflect);\n\tbreak;\n\t\n\tcase ANIM_AUTO:\n\t\tif (arrowPos <= screenWidth/4) {\n\t\t\tmWindow.setAnimationStyle((onTop) ? R.style.Animations_PopUpMenu_Left : R.style.Animations_PopDownMenu_Left);\n\t\t} else if (arrowPos > screenWidth/4 && arrowPos < 3 * (screenWidth/4)) {\n\t\t\tmWindow.setAnimationStyle((onTop) ? R.style.Animations_PopUpMenu_Center : R.style.Animations_PopDownMenu_Center);\n\t\t} else {\n\t\t\tmWindow.setAnimationStyle((onTop) ? R.style.Animations_PopUpMenu_Right : R.style.Animations_PopDownMenu_Right);\n\t\t}\n\t\t\t\t\n\t\tbreak;\n\t}\n}", "path": "src\\net\\londatiga\\android\\QuickAction.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/**\n * Will inflate and set the view from a resource id\n * \n * @param layoutResID\n */\n", "func_signal": "public void setContentView(int layoutResID)", "code": "{\n\tLayoutInflater inflator =\n\t\t\t(LayoutInflater) anchor.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n\t\n\tsetContentView(inflator.inflate(layoutResID, null));\n}", "path": "src\\net\\londatiga\\android\\CustomPopupWindow.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/**\n * Copies a raw resource file, given its ID to the given location\n * @param ctx context\n * @param resid resource id\n * @param file destination file\n * @param mode file permissions (E.g.: \"755\")\n * @throws IOException on error\n * @throws InterruptedException when interrupted\n */\n", "func_signal": "private static void copyRawFile(Context ctx, int resid, File file, String mode, boolean isZipd) throws IOException, InterruptedException", "code": "{\n\tfinal String abspath = file.getAbsolutePath();\n\t// Write the iptables binary\n\tfinal FileOutputStream out = new FileOutputStream(file);\n\tInputStream is = ctx.getResources().openRawResource(resid);\n\t\n\tif (isZipd)\n    \t{\n    \t\tZipInputStream zis = new ZipInputStream(is);    \t\t\n    \t\tZipEntry ze = zis.getNextEntry();\n    \t\tis = zis;\n    \t}\n\t\n\tbyte buf[] = new byte[1024];\n\tint len;\n\twhile ((len = is.read(buf)) > 0) {\n\t\tout.write(buf, 0, len);\n\t}\n\tout.close();\n\tis.close();\n\t// Change the permissions\n\tRuntime.getRuntime().exec(\"chmod \"+mode+\" \"+abspath).waitFor();\n}", "path": "src\\org\\witness\\ssc\\video\\BinaryInstaller.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "//\t\t\n/*\n * Extract the Tor binary from the APK file using ZIP\n */\n", "func_signal": "public boolean installFromRaw () throws IOException, FileNotFoundException", "code": "{\n\t\n\tInputStream is;\n        File outFile;\n        \n\tis = context.getResources().openRawResource(R.raw.ffmpeg);\t\t\t\n\toutFile = new File(installFolder, \"ffmpeg\");\n\tstreamToFile(is, outFile, false, false, \"700\");\n\t\n\n\treturn true;\n}", "path": "src\\org\\witness\\ssc\\video\\BinaryInstaller.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/**\n * On pre show\n */\n", "func_signal": "protected void preShow()", "code": "{\n\tif (mRootView == null) \n\t\tthrow new IllegalStateException(\"setContentView was not called with a view to display.\");\n\n\tonShow();\n\n\tif (mBackground == null) \n\t\tmWindow.setBackgroundDrawable(new BitmapDrawable());\n\telse \n\t\tmWindow.setBackgroundDrawable(mBackground);\n\n\tmWindow.setWidth(WindowManager.LayoutParams.WRAP_CONTENT);\n\tmWindow.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);\n\tmWindow.setTouchable(true);\n\tmWindow.setFocusable(true);\n\tmWindow.setOutsideTouchable(true);\n\n\tmWindow.setContentView(mRootView);\n}", "path": "src\\net\\londatiga\\android\\PopupWindows.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "//use 'ps' command\n", "func_signal": "public static int findProcessIdWithPS(String command) throws Exception", "code": "{\n\t\n\tint procId = -1;\n\t\n\tRuntime r = Runtime.getRuntime();\n\t    \t\n\tProcess procPs = null;\n\t\n        procPs = r.exec(SHELL_CMD_PS);\n            \n        BufferedReader reader = new BufferedReader(new InputStreamReader(procPs.getInputStream()));\n        String line = null;\n        \n        while ((line = reader.readLine())!=null)\n        {\n        \tif (line.indexOf(' ' + command)!=-1)\n        \t{\n        \t\t\n        \t\tStringTokenizer st = new StringTokenizer(line,\" \");\n        \t\tst.nextToken(); //proc owner\n        \t\t\n        \t\tprocId = Integer.parseInt(st.nextToken().trim());\n        \t\t\n        \t\tbreak;\n        \t}\n        }\n        \n       \n        \n        return procId;\n\n}", "path": "src\\org\\witness\\ssc\\video\\ShellUtils.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/**\n * Set content view.\n * \n * @param layoutResID Resource id\n */\n", "func_signal": "public void setContentView(int layoutResID)", "code": "{\n\tLayoutInflater inflator = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n\t\n\tsetContentView(inflator.inflate(layoutResID, null));\n}", "path": "src\\net\\londatiga\\android\\PopupWindows.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/**\n * Create a QuickAction\n * \n * @param anchor\n *            the view that the QuickAction will be displaying 'from'\n */\n", "func_signal": "public CustomPopupWindow(View anchor)", "code": "{\n\tthis.anchor = anchor;\n\tthis.window = new PopupWindow(anchor.getContext());\n\n\t// when a touch even happens outside of the window\n\t// make the window go away\n\twindow.setTouchInterceptor(new OnTouchListener() {\n\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\t\tif (event.getAction() == MotionEvent.ACTION_OUTSIDE) {\n\t\t\t\tCustomPopupWindow.this.window.dismiss();\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t}\n\t});\n\n\twindowManager = (WindowManager) anchor.getContext().getSystemService(Context.WINDOW_SERVICE);\n\t\n\tonCreate();\n}", "path": "src\\net\\londatiga\\android\\CustomPopupWindow.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "//copy the file from inputstream to File output - alternative impl\n", "func_signal": "public void copyFile (InputStream is, File outputFile)", "code": "{\n\t\t\n\t\ttry {\n\t\t\toutputFile.createNewFile();\n\t\t\tDataOutputStream out = new DataOutputStream(new FileOutputStream(outputFile));\n\t\t\tDataInputStream in = new DataInputStream(is);\n\t\t\t\n\t\t\tint b = -1;\n\t\t\tbyte[] data = new byte[1024];\n\t\t\t\n\t\t\twhile ((b = in.read(data)) != -1) {\n\t\t\t\tout.write(data);\n\t\t\t}\n\t\t\t\n\t\t\tif (b == -1); //rejoice\n\t\t\t\n\t\t\t//\n\t\t\tout.flush();\n\t\t\tout.close();\n\t\t\tin.close();\n\t\t\t// chmod?\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t} catch (IOException ex) {\n\t\t\tLog.e(ObscuraApp.LOGTAG, \"error copying binary\", ex);\n\t\t}\n\n\t}", "path": "src\\org\\witness\\ssc\\video\\BinaryInstaller.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/**\n * Show popup window. Popup is automatically positioned, on top or bottom of anchor view.\n * \n */\n", "func_signal": "public void show (View anchor)", "code": "{\n\tpreShow();\n\t\n\tint xPos, yPos;\n\t\n\tint[] location \t\t= new int[2];\n\n\tanchor.getLocationOnScreen(location);\n\n\t//mRootView.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));\n\t\n\tmRootView.measure(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n\n\tint rootHeight \t\t= mRootView.getMeasuredHeight();\n\tint rootWidth\t\t= mRootView.getMeasuredWidth();\n\n\n\tRect anchorRect \t= new Rect(location[0], location[1], location[0] + anchor.getWidth(), location[1] \n\t                \t+ anchor.getHeight());\n\t\n\tint screenWidth \t= mWindowManager.getDefaultDisplay().getWidth();\n\tint screenHeight\t= mWindowManager.getDefaultDisplay().getHeight();\n\t\n\t//automatically get X coord of popup (top left)\n\tif ((anchorRect.left + rootWidth) > screenWidth) {\n\t\txPos = anchorRect.left - (rootWidth-anchor.getWidth());\n\t} else {\n\t\tif (anchor.getWidth() > rootWidth) {\n\t\t\txPos = anchorRect.centerX() - (rootWidth/2);\n\t\t} else {\n\t\t\txPos = anchorRect.left;\n\t\t}\n\t}\n\t\n\tint dyTop\t\t\t= anchorRect.top;\n\tint dyBottom\t\t= screenHeight - anchorRect.bottom;\n\n\tboolean onTop\t\t= (dyTop > dyBottom) ? true : false;\n\n\tif (onTop) {\n\t\tif (rootHeight > dyTop) {\n\t\t\tyPos \t\t\t= 15;\n\t\t\tLayoutParams l \t= mScroller.getLayoutParams();\n\t\t\tl.height\t\t= dyTop - anchor.getHeight();\n\t\t} else {\n\t\t\tyPos = anchorRect.top - rootHeight;\n\t\t}\n\t} else {\n\t\tyPos = anchorRect.bottom;\n\t\t\n\t\tif (rootHeight > dyBottom) { \n\t\t\tLayoutParams l \t= mScroller.getLayoutParams();\n\t\t\tl.height\t\t= dyBottom;\n\t\t}\n\t}\n\n\tshowArrow(((onTop) ? R.id.arrow_down : R.id.arrow_up), anchorRect.centerX()-xPos);\n\t\n\tsetAnimationStyle(screenWidth, anchorRect.centerX(), onTop);\n\t\n\tmWindow.showAtLocation(anchor, Gravity.NO_GRAVITY, xPos, yPos);\n}", "path": "src\\net\\londatiga\\android\\QuickAction.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/**\n * Constructor.\n * \n * @param context Context\n */\n", "func_signal": "public QuickAction(Context context)", "code": "{\n\tsuper(context);\n\t\n\tinflater \t\t= (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n\t\n\tsetRootViewId(R.layout.popup);\n   \n\tanimStyle\t\t= ANIM_AUTO;\n\tmChildPos\t\t= 0;\n}", "path": "src\\net\\londatiga\\android\\QuickAction.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/**\n * Add action item\n * \n * @param action  {@link ActionItem}\n */\n", "func_signal": "public void addActionItem(ActionItem action)", "code": "{\n\t\n\tString title \t= action.getTitle();\n\tDrawable icon \t= action.getIcon();\n\t\n\tView container\t= (View) inflater.inflate(R.layout.action_item, null);\n\t\n\tImageView img \t= (ImageView) container.findViewById(R.id.iv_icon);\n\tTextView text \t= (TextView) container.findViewById(R.id.tv_title);\n\t\n\tif (icon != null) \n\t\timg.setImageDrawable(icon);\n\telse\n\t\timg.setVisibility(View.GONE);\n\t\n\tif (title != null)\n\t\ttext.setText(title);\n\telse\n\t\ttext.setVisibility(View.GONE);\n\t\n\tfinal int pos =  mChildPos;\n\t\n\tcontainer.setOnClickListener(new OnClickListener() {\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\tif (mListener != null) mListener.onItemClick(pos);\n\t\t\t\t\n\t\t\tdismiss();\n\t\t}\n\t});\n\t\n\tcontainer.setFocusable(true);\n\tcontainer.setClickable(true);\n\t\t \n\tmTrack.addView(container, mChildPos);\n\t\n\tmChildPos++;\n}", "path": "src\\net\\londatiga\\android\\QuickAction.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/**\n * Set root view.\n * \n * @param id Layout resource id\n */\n", "func_signal": "public void setRootViewId(int id)", "code": "{\n\tmRootView\t= (ViewGroup) inflater.inflate(id, null);\n\tmTrack \t\t= (ViewGroup) mRootView.findViewById(R.id.tracks);\n\n\tmArrowDown \t= (ImageView) mRootView.findViewById(R.id.arrow_down);\n\tmArrowUp \t= (ImageView) mRootView.findViewById(R.id.arrow_up);\n\n\tmScroller\t= (ScrollView) mRootView.findViewById(R.id.scroller);\n\t\n\t//This was previously defined on show() method, moved here to prevent force close that occured\n\t//when tapping fastly on a view to show quickaction dialog.\n\t//Thanx to zammbi (github.com/zammbi)\n\tmRootView.setLayoutParams(new FrameLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));\n\t\n\tsetContentView(mRootView);\n}", "path": "src\\net\\londatiga\\android\\QuickAction.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/**\n * Displays like a popdown menu from the anchor view.\n * \n * @param xOffset\n *            offset in X direction\n * @param yOffset\n *            offset in Y direction\n */\n", "func_signal": "public void showDropDown(int xOffset, int yOffset)", "code": "{\n\tpreShow();\n\twindow.setAnimationStyle(R.style.Animations_PopDownMenu);\n\n\twindow.showAsDropDown(anchor, xOffset, yOffset);\n}", "path": "src\\net\\londatiga\\android\\CustomPopupWindow.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/**\n * Set content view.\n * \n * @param root Root view\n */\n", "func_signal": "public void setContentView(View root)", "code": "{\n\tmRootView = root;\n\t\n\tmWindow.setContentView(root);\n}", "path": "src\\net\\londatiga\\android\\PopupWindows.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/*\n * Write the inputstream contents to the file\n */\n", "func_signal": "private static boolean streamToFile(InputStream stm, File outFile, boolean append, boolean zip, String mode) throws IOException", "code": "{\n        byte[] buffer = new byte[FILE_WRITE_BUFFER_SIZE];\n\n        int bytecount;\n\n\n    \tOutputStream stmOut = new FileOutputStream(outFile, append);\n    \t\n    \tif (zip)\n    \t{\n    \t\tZipInputStream zis = new ZipInputStream(stm);    \t\t\n    \t\tZipEntry ze = zis.getNextEntry();\n    \t\tstm = zis;\n    \t\t\n    \t}\n    \t\n        while ((bytecount = stm.read(buffer)) > 0)\n        {\n\n            stmOut.write(buffer, 0, bytecount);\n\n        }\n\n        stmOut.close();\n        stm.close();\n        \n\tRuntime.getRuntime().exec(\"chmod \"+mode+\" \"+outFile.getAbsolutePath());\n\n        \n        return true;\n\n    }", "path": "src\\org\\witness\\ssc\\video\\BinaryInstaller.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/**\n\t * Check if this is an ARMv6 device\n\t * @return true if this is ARMv6\n\t */\n", "func_signal": "private static boolean isARMv6()", "code": "{\n\t\tif (isARMv6 == -1) {\n\t\t\tBufferedReader r = null;\n\t\t\ttry {\n\t\t\t\tisARMv6 = 0;\n\t\t\t\tr = new BufferedReader(new FileReader(\"/proc/cpuinfo\"));\n\t\t\t\tfor (String line = r.readLine(); line != null; line = r.readLine()) {\n\t\t\t\t\tif (line.startsWith(\"Processor\") && line.contains(\"ARMv6\")) {\n\t\t\t\t\t\tisARMv6 = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (line.startsWith(\"CPU architecture\") && (line.contains(\"6TE\") || line.contains(\"5TE\"))) {\n\t\t\t\t\t\tisARMv6 = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception ex) {\n\t\t\t} finally {\n\t\t\t\tif (r != null) try {r.close();} catch (Exception ex) {}\n\t\t\t}\n\t\t}\n\t\treturn (isARMv6 == 1);\n\t}", "path": "src\\org\\witness\\ssc\\video\\BinaryInstaller.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/**\n * Sets the content view. Probably should be called from {@link onCreate}\n * \n * @param root\n *            the view the popup will display\n */\n", "func_signal": "public void setContentView(View root)", "code": "{\n\tthis.root = root;\n\t\n\twindow.setContentView(root);\n}", "path": "src\\net\\londatiga\\android\\CustomPopupWindow.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/**\n * Constructor.\n * \n * @param context Context\n */\n", "func_signal": "public PopupWindows(Context context)", "code": "{\n\tmContext\t= context;\n\tmWindow \t= new PopupWindow(context);\n\n\tmWindow.setTouchInterceptor(new OnTouchListener() {\n\t\t@Override\n\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\t\t\tif (event.getAction() == MotionEvent.ACTION_OUTSIDE) {\n\t\t\t\tmWindow.dismiss();\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t}\n\t});\n\n\tmWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\n}", "path": "src\\net\\londatiga\\android\\PopupWindows.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/**\n * Displays like a QuickAction from the anchor view.\n * \n * @param xOffset\n *            offset in the X direction\n * @param yOffset\n *            offset in the Y direction\n */\n", "func_signal": "public void showLikeQuickAction(int xOffset, int yOffset)", "code": "{\n\tpreShow();\n\n\twindow.setAnimationStyle(R.style.Animations_PopUpMenu_Center);\n\n\tint[] location = new int[2];\n\tanchor.getLocationOnScreen(location);\n\n\tRect anchorRect =\n\t\t\tnew Rect(location[0], location[1], location[0] + anchor.getWidth(), location[1]\n\t\t\t\t+ anchor.getHeight());\n\n\troot.setLayoutParams(new FrameLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));\n\troot.measure(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n\t\n\tint rootWidth \t\t= root.getMeasuredWidth();\n\tint rootHeight \t\t= root.getMeasuredHeight();\n\n\tint screenWidth \t= windowManager.getDefaultDisplay().getWidth();\n\t//int screenHeight \t= windowManager.getDefaultDisplay().getHeight();\n\n\tint xPos \t\t\t= ((screenWidth - rootWidth) / 2) + xOffset;\n\tint yPos\t \t\t= anchorRect.top - rootHeight + yOffset;\n\n\t// display on bottom\n\tif (rootHeight > anchorRect.top) {\n\t\tyPos = anchorRect.bottom + yOffset;\n\t\t\n\t\twindow.setAnimationStyle(R.style.Animations_PopDownMenu_Center);\n\t}\n\n\twindow.showAtLocation(anchor, Gravity.NO_GRAVITY, xPos, yPos);\n}", "path": "src\\net\\londatiga\\android\\CustomPopupWindow.java", "repo_name": "guardianproject/SSCVideoProto", "stars": 28, "license": "None", "language": "java", "size": 77395}
{"docstring": "/**\n * Extracts a single user\n * @param response an XML-formatted response\n * @return the target user\n * @throws SAXException\n * @throws ParserConfigurationException\n * @throws IOException\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic TwitterUser readUser(ReadableResponse response) throws SAXException, ParserConfigurationException, IOException", "code": "{\n  List<TwitterUser> list = (List<TwitterUser>) Utils.parseXML(response, new TwitterParsingUsers());\n  if(list.size()==1) return list.get(0);\n  return null;\n}", "path": "src\\com\\expertiseandroid\\lib\\sociallib\\readers\\TwitterReader.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Gets the latest posts of the user's home\n * @return a list of FacebookPosts\n * @throws MalformedURLException\n * @throws IOException\n * @throws JSONException\n * @throws NotAuthentifiedException\n */\n", "func_signal": "public List<FacebookPost> getHomePosts() throws MalformedURLException,\n    IOException, JSONException, NotAuthentifiedException", "code": "{\n  if (!isAuthentified())\n    throw new NotAuthentifiedException(NETWORK);\n  StringWrapper response = new StringWrapper(facebook.request(ME + GET_HOME));\n  return reader.readPosts(response);\n}", "path": "src\\com\\expertiseandroid\\lib\\sociallib\\connectors\\FacebookConnector.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Invalidate the current user session by removing the access token in\n * memory, clearing the browser cookies, and calling auth.expireSession\n * through the API. The application will be notified when logout is\n * complete via the callback interface.  \n * \n * Note that this method is asynchronous and the callback will be invoked \n * in a background thread; operations that affect the UI will need to be \n * posted to the UI thread or an appropriate handler.\n * \n * @param context\n *            The Android context in which the logout should be called: it\n *            should be the same context in which the login occurred in\n *            order to clear any stored cookies\n * @param listener\n *            Callback interface to notify the application when the request\n *            has completed.\n */\n", "func_signal": "public void logout(final Context context, final RequestListener listener)", "code": "{\n    new Thread() {\n        @Override public void run() {\n            try {\n                String response = fb.logout(context);\n                if (response.length() == 0 || response.equals(\"false\")){\n                    listener.onFacebookError(new FacebookError(\n                            \"auth.expireSession failed\"));\n                    return;\n                }\n                listener.onComplete(response);\n            } catch (FileNotFoundException e) {\n                listener.onFileNotFoundException(e);\n            } catch (MalformedURLException e) {\n                listener.onMalformedURLException(e);\n            } catch (IOException e) {\n                listener.onIOException(e);\n            }\n        }\n    }.start();\n}", "path": "src\\com\\facebook\\android\\AsyncFacebookRunner.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Posts a status\n * @param status\n * @return true if the operation was successful\n * @throws NotAuthentifiedException\n * @throws SAXException\n * @throws ParserConfigurationException\n * @throws IOException\n */\n", "func_signal": "public boolean post(String status) throws NotAuthentifiedException, SAXException, ParserConfigurationException, IOException", "code": "{\n  if(!isAuthentified()) throw new NotAuthentifiedException(NETWORK);\n  Request request = new Request(Verb.PUT, API_PATH + PEOPLE + ME + STATUS);\n  scribe.signRequest(request, accessToken);\n  Map<String,String> params = new HashMap<String, String>();\n  params.put(CURRENT_STATUS, status);\n  request.addPayload(Utils.generateXML(params));\n  ReadableResponse response = new ScribeResponseWrapper(request.send());\n  return reader.readResponse(response);\n}", "path": "src\\com\\expertiseandroid\\lib\\sociallib\\connectors\\LinkedInConnector.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Set the current session's duration (in seconds since Unix epoch).\n * \n * @param expiresIn - duration in seconds\n */\n", "func_signal": "public void setAccessExpiresIn(String expiresIn)", "code": "{\n    if (expiresIn != null && !expiresIn.equals(\"0\")) {\n        setAccessExpires(System.currentTimeMillis()\n                + Integer.parseInt(expiresIn) * 1000);\n    }\n}", "path": "src\\com\\facebook\\android\\Facebook.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Extracts a list of tweets\n * @param response an XML-formatted response\n * @return the list of posts\n * @throws SAXException\n * @throws ParserConfigurationException\n * @throws IOException\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic List<TwitterStatus> readStatuses(ReadableResponse response) throws SAXException, ParserConfigurationException, IOException", "code": "{\n  List<TwitterStatus> list = (List<TwitterStatus>) Utils.parseXML(response, new TwitterParsingStatuses());\n  return list;\n}", "path": "src\\com\\expertiseandroid\\lib\\sociallib\\readers\\TwitterReader.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * The albumId could be any facebook identifier that supports a photos\n * connection\n * @throws JSONException \n * \n * @see Graph API\n */\n", "func_signal": "public boolean sendPhoto(String filePath, String caption, String albumId)\n    throws IOException, JSONException", "code": "{\n  Bitmap image = BitmapFactory.decodeFile(filePath);\n\n  Map<String, String> params = new HashMap<String, String>();\n  params.put(ACCESS_TOKEN, URLDecoder.decode(facebook.getAccessToken(),\n      ENCODING));\n  params.put(MESSAGE, caption);\n\n  String url = GRAPH_URL + albumId + GET_PHOTOS;\n  ReadableResponse response = new StringWrapper(Utils.postWithAttachment(\n      url, params, image));\n  return reader.readResponse(response);\n}", "path": "src\\com\\expertiseandroid\\lib\\sociallib\\connectors\\FacebookConnector.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Creates a new status\n * @param author the\n * @param date\n * @param contents\n */\n", "func_signal": "public Status(User author, Date date, String contents)", "code": "{\n  construct(PostType.status, author, date);\n  this.contents = contents;\n}", "path": "src\\com\\expertiseandroid\\lib\\sociallib\\model\\Status.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * @return boolean - whether this object has an non-expired session token\n */\n", "func_signal": "public boolean isSessionValid()", "code": "{\n    return (getAccessToken() != null) && ((getAccessExpires() == 0) || \n        (System.currentTimeMillis() < getAccessExpires()));\n}", "path": "src\\com\\facebook\\android\\Facebook.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Synchronously make a request to the Facebook Graph API with the given\n * HTTP method and string parameters. Note that binary data parameters \n * (e.g. pictures) are not yet supported by this helper function.\n * \n * See http://developers.facebook.com/docs/api\n *  \n * Note that this method blocks waiting for a network response, so do not \n * call it in a UI thread.\n * \n * @param graphPath\n *            Path to resource in the Facebook graph, e.g., to fetch data\n *            about the currently logged authenticated user, provide \"me\",\n *            which will fetch http://graph.facebook.com/me\n * @param parameters\n *            key-value string parameters, e.g. the path \"search\" with\n *            parameters {\"q\" : \"facebook\"} would produce a query for the\n *            following graph resource:\n *            https://graph.facebook.com/search?q=facebook\n * @param httpMethod\n *            http verb, e.g. \"GET\", \"POST\", \"DELETE\"\n * @throws IOException \n * @throws MalformedURLException \n * @return JSON string representation of the response\n */\n", "func_signal": "public String request(String graphPath,\n                      Bundle parameters, \n                      String httpMethod) \n      throws FileNotFoundException, MalformedURLException, IOException", "code": "{\n    parameters.putString(\"format\", \"json\");\n    if (isSessionValid()) {\n        parameters.putString(TOKEN, getAccessToken());\n        Log.d(\"Acces Token\", getAccessToken());\n    }\n    String url = graphPath != null ?\n        GRAPH_BASE_URL + graphPath : \n        RESTSERVER_URL;\n    return Util.openUrl(url, httpMethod, parameters);\n}", "path": "src\\com\\facebook\\android\\Facebook.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Generate a UI dialog for the request action in the given Android \n * context with the provided parameters.\n * \n * Note that this method is asynchronous and the callback will be invoked \n * in the original calling thread (not in a background thread).\n * \n * @param context\n *            The Android context in which we will generate this dialog.\n * @param action\n *            String representation of the desired method: e.g. \"login\",\n *            \"stream.publish\", ...\n * @param parameters\n *            key-value string parameters\n * @param listener\n *            Callback interface to notify the application when the dialog\n *            has completed.\n */\n", "func_signal": "public void dialog(Context context, \n                   String action, \n                   Bundle parameters,\n                   final DialogListener listener)", "code": "{\n    String endpoint;\n    if (action.equals(LOGIN)) {\n        endpoint = OAUTH_ENDPOINT;\n        parameters.putString(\"type\", \"user_agent\");\n        parameters.putString(\"redirect_uri\", REDIRECT_URI);\n    } else {\n        endpoint = UI_SERVER;\n        parameters.putString(\"method\", action);\n        parameters.putString(\"next\", REDIRECT_URI);\n    }\n    parameters.putString(\"display\", \"touch\");\n    if (isSessionValid()) {\n      Log.d(\"Acces Token\", getAccessToken());\n        parameters.putString(TOKEN, getAccessToken());\n    }\n    String url = endpoint + \"?\" + Util.encodeUrl(parameters);\n    if (context.checkCallingOrSelfPermission(Manifest.permission.INTERNET)\n            != PackageManager.PERMISSION_GRANTED) {\n        Util.showAlert(context, \"Error\", \n                \"Application requires permission to access the Internet\");\n    } else {\n        new FbDialog(context, url, listener).show();\n    }\n}", "path": "src\\com\\facebook\\android\\Facebook.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Make a request to the Facebook Graph API with the given HTTP method and\n * string parameters. Note that binary data parameters (e.g. pictures) are\n * not yet supported by this helper function.\n * \n * See http://developers.facebook.com/docs/api\n * \n * Note that this method is asynchronous and the callback will be invoked \n * in a background thread; operations that affect the UI will need to be \n * posted to the UI thread or an appropriate handler.\n * \n * @param graphPath\n *            Path to resource in the Facebook graph, e.g., to fetch data\n *            about the currently logged authenticated user, provide \"me\",\n *            which will fetch http://graph.facebook.com/me\n * @param parameters\n *            key-value string parameters, e.g. the path \"search\" with\n *            parameters {\"q\" : \"facebook\"} would produce a query for the\n *            following graph resource:\n *            https://graph.facebook.com/search?q=facebook\n * @param httpMethod\n *            http verb, e.g. \"POST\", \"DELETE\"\n * @param listener\n *            Callback interface to notify the application when the request\n *            has completed.\n */\n", "func_signal": "public void request(final String graphPath,\n                    final Bundle parameters, \n                    final String httpMethod,\n                    final RequestListener listener)", "code": "{\n    new Thread() {\n        @Override public void run() {\n            try {\n                String resp = fb.request(graphPath, parameters, httpMethod);\n                listener.onComplete(resp);\n            } catch (FileNotFoundException e) {\n                listener.onFileNotFoundException(e);\n            } catch (MalformedURLException e) {\n                listener.onMalformedURLException(e);\n            } catch (IOException e) {\n                listener.onIOException(e);\n            }\n        }\n    }.start();\n}", "path": "src\\com\\facebook\\android\\AsyncFacebookRunner.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Submit a post on any user's wall\n * @param content the item to post\n * @param user the target user\n * @return true if the operation was successful\n * @throws FileNotFoundException\n * @throws MalformedURLException\n * @throws IOException\n * @throws NotAuthentifiedException\n * @throws JSONException \n */\n", "func_signal": "public boolean post(Post content, FacebookUser user)\n    throws FileNotFoundException, MalformedURLException, IOException,\n    NotAuthentifiedException, JSONException", "code": "{\n  if (!isAuthentified())\n    throw new NotAuthentifiedException(NETWORK);\n  Bundle params = new Bundle();\n  params.putString(MESSAGE, content.getContents());\n  StringWrapper response = new StringWrapper(facebook.request(String.valueOf(user.id) + GET_FEED, params, POST));\n  return reader.readResponse(response);\n}", "path": "src\\com\\expertiseandroid\\lib\\sociallib\\connectors\\FacebookConnector.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Make a request to Facebook's old (pre-graph) API with the given \n * parameters. One of the parameter keys must be \"method\" and its value \n * should be a valid REST server API method.  \n * \n * See http://developers.facebook.com/docs/reference/rest/\n *  \n * Note that this method blocks waiting for a network response, so do not \n * call it in a UI thread.\n * \n * Example: \n * <code>\n *  Bundle parameters = new Bundle();\n *  parameters.putString(\"method\", \"auth.expireSession\");\n *  String response = request(parameters);\n * </code>\n * \n * @param parameters\n *            Key-value pairs of parameters to the request. Refer to the\n *            documentation: one of the parameters must be \"method\".\n * @throws IOException \n *            if a network error occurs\n * @throws MalformedURLException \n *            if accessing an invalid endpoint\n * @throws IllegalArgumentException\n *            if one of the parameters is not \"method\"\n * @return JSON string representation of the response\n */\n", "func_signal": "public String request(Bundle parameters) \n      throws MalformedURLException, IOException", "code": "{\n    if (!parameters.containsKey(\"method\")) {\n        throw new IllegalArgumentException(\"API method must be specified. \"\n                + \"(parameters must contain key \\\"method\\\" and value). See\"\n                + \" http://developers.facebook.com/docs/reference/rest/\");\n    }\n    return request(null, parameters, \"GET\");\n}", "path": "src\\com\\facebook\\android\\Facebook.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Invalidate the current user session by removing the access token in\n * memory, clearing the browser cookie, and calling auth.expireSession\n * through the API.  \n * \n * Note that this method blocks waiting for a network response, so do not\n * call it in a UI thread.\n * \n * @param context\n *            The Android context in which the logout should be called: it\n *            should be the same context in which the login occurred in\n *            order to clear any stored cookies\n * @throws IOException \n * @throws MalformedURLException \n * @return JSON string representation of the auth.expireSession response \n *            (\"true\" if successful)\n */\n", "func_signal": "public String logout(Context context) \n      throws MalformedURLException, IOException", "code": "{\n    Util.clearCookies(context);\n    Bundle b = new Bundle();\n    b.putString(\"method\", \"auth.expireSession\");\n    String response = request(b);\n    setAccessToken(null);\n    setAccessExpires(0);\n    return response;\n}", "path": "src\\com\\facebook\\android\\Facebook.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Starts a dialog which prompts the user to log in to Facebook and grant\n * the requested permissions to the given application.\n * \n * This method implements the OAuth 2.0 User-Agent flow to retrieve an \n * access token for use in API requests.  In this flow, the user \n * credentials are handled by Facebook in an embedded WebView, not by the \n * client application.  As such, the dialog makes a network request and \n * renders HTML content rather than a native UI.  The access token is \n * retrieved from a redirect to a special URL that the WebView handles.\n * \n * Note that User credentials could be handled natively using the \n * OAuth 2.0 Username and Password Flow, but this is not supported by this\n * SDK.\n * \n * See http://developers.facebook.com/docs/authentication/ and \n * http://wiki.oauth.net/OAuth-2 for more details.\n * \n * Note that this method is asynchronous and the callback will be invoked \n * in the original calling thread (not in a background thread).\n * \n * Also note that requests may be made to the API without calling \n * authorize first, in which case only public information is returned.\n * \n * @param context\n *            The Android context in which we want to display the\n *            authorization dialog\n * @param applicationId\n *            The Facebook application identifier e.g. \"350685531728\"\n * @param permissions\n *            A list of permission required for this application: e.g.\n *            \"read_stream\", \"publish_stream\", \"offline_access\", etc. see\n *            http://developers.facebook.com/docs/authentication/permissions\n *            This parameter should not be null -- if you do not require any\n *            permissions, then pass in an empty String array.\n * @param listener\n *            Callback interface for notifying the calling application when\n *            the dialog has completed, failed, or been canceled.\n */\n", "func_signal": "public void authorize(Context context,\n            String applicationId,\n                      String[] permissions,\n                      final DialogListener listener)", "code": "{\n    Bundle params = new Bundle();\n    params.putString(\"client_id\", applicationId);\n    if (permissions.length > 0) {\n        params.putString(\"scope\", TextUtils.join(\",\", permissions));\n    }\n    CookieSyncManager.createInstance(context);\n    dialog(context, LOGIN, params, new DialogListener() {\n\n        public void onComplete(Bundle values) {\n            // ensure any cookies set by the dialog are saved\n            CookieSyncManager.getInstance().sync(); \n            setAccessToken(values.getString(TOKEN));\n            setAccessExpiresIn(values.getString(EXPIRES));\n            if (isSessionValid()) {\n              Log.d(\"Acces Token\", getAccessToken());\n                Log.d(\"Facebook-authorize\", \"Login Success! access_token=\" \n                    + getAccessToken() + \" expires=\" + getAccessExpires());\n                listener.onComplete(values);\n            } else {\n                onFacebookError(new FacebookError(\n                        \"failed to receive access_token\"));\n            }                \n        }\n\n        public void onError(DialogError error) {\n            Log.d(\"Facebook-authorize\", \"Login failed: \" + error);\n            listener.onError(error);\n        }\n\n        public void onFacebookError(FacebookError error) {\n            Log.d(\"Facebook-authorize\", \"Login failed: \" + error);\n            listener.onFacebookError(error);\n        }\n\n        public void onCancel() {\n            Log.d(\"Facebook-authorize\", \"Login cancelled\");\n            listener.onCancel();\n        }\n    });\n}", "path": "src\\com\\facebook\\android\\Facebook.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Gets a LinkedIn network update type\n * @param typeName the 4-letters acronym of the type\n * @see http://developer.linkedin.com/docs/DOC-1131\n * @return the network update type corresponding to the acronym\n */\n", "func_signal": "public static LinkedInPostType getTypeByName(String typeName)", "code": "{\n  if(typeName.equals(\"ANSW\")) return ANSW;\n  else if(typeName.equals(\"APPS\")||typeName.equals(\"APPM\")) return APPS;\n  else if(typeName.equals(\"CONN\")||typeName.equals(\"NCON\")||typeName.equals(\"CCEM\")) return CONN;\n  else if(typeName.equals(\"JOBS\")||typeName.equals(\"JOBP\")) return JOBS;\n  else if(typeName.equals(\"JGRP\")) return JGRP;\n  else if(typeName.equals(\"PICT\")||typeName.equals(\"PICU\")) return PICT;\n  else if(typeName.equals(\"PRFX\")) return PRFX;\n  else if(typeName.equals(\"RECU\")||typeName.equals(\"PREC\")) return RECU;\n  else if(typeName.equals(\"PRFU\")||typeName.equals(\"PROF\")) return PRFU;\n  else if(typeName.equals(\"QSTN\")) return QSTN;\n  else if(typeName.equals(\"STAT\")) return STAT;\n  else return UKWN;\n}", "path": "src\\com\\expertiseandroid\\lib\\sociallib\\model\\linkedin\\LinkedInPostType.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Extracts a list of users\n * @param response an XML-formatted response\n * @return the list of users\n * @throws SAXException\n * @throws ParserConfigurationException\n * @throws IOException\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic List<TwitterUser> readUsers(ReadableResponse response) throws SAXException, ParserConfigurationException, IOException", "code": "{\n  List<TwitterUser> list = (List<TwitterUser>) Utils.parseXML(response, new TwitterParsingUsers());\n  return list;\n}", "path": "src\\com\\expertiseandroid\\lib\\sociallib\\readers\\TwitterReader.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Gets the latest posts of any user's wall\n * @param user the target user\n * @return a list of FacebookPosts\n * @throws MalformedURLException\n * @throws IOException\n * @throws JSONException\n */\n", "func_signal": "public List<FacebookPost> getWallPosts(FacebookUser user)\n    throws MalformedURLException, IOException, JSONException", "code": "{\n  StringWrapper response = new StringWrapper(facebook.request(String.valueOf(user.id) + GET_FEED));\n  return reader.readPosts(response);\n}", "path": "src\\com\\expertiseandroid\\lib\\sociallib\\connectors\\FacebookConnector.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "/**\n * Currently, only status updates and new connections are shown\n * @throws NotAuthentifiedException \n * @throws IOException \n * @throws ParserConfigurationException \n * @throws SAXException \n * @see com.expertiseandroid.lib.sociallib.connectors.interfaces.PostsSocialNetwork\n */\n", "func_signal": "public List<LinkedInPost> getWallPosts() throws NotAuthentifiedException, SAXException, ParserConfigurationException, IOException", "code": "{\n  if(!isAuthentified()) throw new NotAuthentifiedException(NETWORK);\n  Request request = new Request(Verb.GET, GET_WALLPOSTS);\n  scribe.signRequest(request, accessToken);\n  ReadableResponse response = new ScribeResponseWrapper(request.send());\n  return reader.readPosts(response);\n}", "path": "src\\com\\expertiseandroid\\lib\\sociallib\\connectors\\LinkedInConnector.java", "repo_name": "sdossick/SocialLib", "stars": 16, "license": "None", "language": "java", "size": 238}
{"docstring": "//Takes a color and converts it to a normalized percentage\n", "func_signal": "private double colorToPerc(Color c)", "code": "{\n\tint red = c.getRed();\n\tint green = c.getGreen();\n\tdouble perc;\n\tif(red == 255){\n\t\tperc = (double)green/255. * .5;\n\t}\n\telse{\n\t\tperc = (double)red/255. * .5 + .5;\n\t}\n\treturn perc;\n\n}", "path": "Source Code\\Transit and Viz\\src\\calculations\\ModelCalculator.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//If a TAZ is right clicked, remove it from the calculations\n", "func_signal": "public void updateRemove(String s)", "code": "{\n\tif(invisible.containsKey(s)){\n\t\ttazs.put(s, invisible.remove(s));\n\t\ttransAcc.put(s, tAccHolder.remove(s));\n\t\t//autoAcc.put(s, aAccHolder.remove(s));\n\t}\n\telse if(tazs.containsKey(s)){\n\t\tinvisible.put(s, tazs.remove(s));\n\t\ttAccHolder.put(s, transAcc.remove(s));\n\t\t//aAccHolder.put(s, autoAcc.remove(s));\n\t}\n\trecalcAccess();\n}", "path": "Source Code\\Transit and Viz\\src\\calculations\\ModelCalculator.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//Updates the model based on which buttons were clicked\n", "func_signal": "public void updateClick(boolean locThir, boolean locFour, boolean locFif, boolean locSix, \n\t\tboolean locCom, boolean locMag, boolean locAccess, boolean locTime, boolean locTrans,\n\t\tboolean locAuto, boolean locHeat, boolean locIso, boolean locComThir, boolean locComFour, boolean locComSix, boolean locAllIso)", "code": "{\n\n\tthir = locThir;\n\tfour = locFour;\n\tfif = locFif;\n\tsix = locSix;\n\tcom = locCom;\n\tmag = locMag;\n\taccess = locAccess;\n\ttime = locTime;\n\ttrans = locTrans;\n\tauto = locAuto;\n\theat = locHeat;\n\tiso = locIso;\n\tcomThir = locComThir;\n\tcomFour = locComFour;\n\tcomSix = locComSix;\n\tallIso = locAllIso;\n}", "path": "Source Code\\Transit and Viz\\src\\calculations\\ModelCalculator.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//Times are abridged to account for traffic\n", "func_signal": "public static int getSpeedLimit(RoadSegment r)", "code": "{\n\t             //65  55  45  35  25  20\n\tint speed[] = {30, 27, 22, 18, 13, 11, 1};\n\treturn speed[(Integer.parseInt(r.getCfcc().substring(1))/10) - 1];\t   \n}", "path": "Source Code\\Automotive Accessibility Calculator\\src\\routing\\RoutePlanner.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public Database query(DatabaseFilter filter)", "code": "{\n\t  //Create new database for segments which match the filter\n   HashMap<Integer, RoadSegment> containing = new HashMap<Integer, RoadSegment>();\n   for(RoadSegment r : data.values())\n \t  if(filter.accept(r))\n \t\t  containing.put(r.getTlid(), r);\t//Once accepted, adds segment to matching database\n\t\t//System.out.println(\"Your query matched \" + containing.size() + \" record(s)\");\n   return new DefaultDatabase(containing);\n}", "path": "Source Code\\Automotive Accessibility Calculator\\src\\routing\\DefaultDatabase.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//Finds the distance in miles by using the spherical law of cosines\n", "func_signal": "public static double distanceInMiles(Point a, Point b)", "code": "{\n\tdouble r = 6371;\n\tdouble dist = Math.acos(Math.sin(a.getLatitude()* Math.PI /180.)*Math.sin(b.getLatitude()* Math.PI /180.) + \n\t                  Math.cos(a.getLatitude() * Math.PI /180.)*Math.cos(b.getLatitude()* Math.PI /180.) *\n\t                  Math.cos(b.getLongitude()* Math.PI /180.-a.getLongitude()* Math.PI /180.)) * r;\n\treturn dist * 0.621371192 ;\n\n}", "path": "Source Code\\Automotive Accessibility Calculator\\src\\routing\\RoutePlanner.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//Recalculate accessibility after a TAZ is added or removed\n", "func_signal": "private void recalcAccess()", "code": "{\n\tfor(String s : tazs.keySet()){\n\t\tdouble sumJob = 0.;\n\t\t//double sumAuto = 0.;\n\t\tTAZ from = tazs.get(s);\n\t\tfor(String t : tazs.keySet()){\n\t\t\tTAZ to = tazs.get(t);\n\t\t\tif(!Double.isNaN(to.getEmployment(2010)) && from.getTotalTime(t)!=-1){\n\t\t\t\tsumJob += to.getEmployment(2010) * Math.pow(Math.E, -.1 * (from.getTotalTime(t)*.001/60.));\n\t\t\t\t//sumAuto += to.getEmployment(2010) * Math.pow(Math.E, -.1 * (from.getDriveTime(t)));\n\t\t\t}\n\t\t}\n\t\ttransAcc.put(s, sumJob);\n\t\t//autoAcc.put(s, sumAuto);\n\t}\n}", "path": "Source Code\\Transit and Viz\\src\\calculations\\ModelCalculator.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//Iso-chronic display, depending on the time away, set the color appropriately\n", "func_signal": "private HashMap<String, Color> transIso(int min)", "code": "{\n\tHashMap<String, Color> cols = new HashMap<String, Color>();\n\t\n\t//Depending on which taz the map is centered around, look at each of it's trip durations\n\tTAZ centered = tazs.get(centeredAround);\n\tfor(String s : tazs.keySet()){\n\t\t\n\t\tdouble tim = centered.getTotalTime(s)*.001/60.;\n\t\tswitch(min) {\n\t\tcase 0:\n\t\t\tif(tim <= 0)\n\t\t\t\tcols.put(s, Color.BLACK);\n\t\t\telse if(tim <= 30)\n\t\t\t\tcols.put(s, new Color(0,255,0));\n\t\t\telse if(tim < 45)\n\t\t\t\tcols.put(s, new Color(170,255, 0));\n\t\t\telse if(tim < 60)\n\t\t\t\tcols.put(s, new Color(255, 170, 0));\n\t\t\telse\n\t\t\t\tcols.put(s, new Color(255, 0, 0));\n\t\t\tbreak;\n\t\tcase 30:\n\t\t\tif(tim <= 0)\n\t\t\t\tcols.put(s, Color.BLACK);\n\t\t\telse if(tim <= 30)\n\t\t\t\tcols.put(s, Color.yellow);\n\t\t\telse\n\t\t\t\tcols.put(s, Color.gray);\n\t\t\tbreak;\n\t\tcase 45:\n\t\t\tif(tim <= 0)\n\t\t\t\tcols.put(s, Color.BLACK);\n\t\t\telse if(tim > 30 && tim <= 45)\n\t\t\t\tcols.put(s, Color.yellow);\n\t\t\telse\n\t\t\t\tcols.put(s, Color.gray);\n\t\t\tbreak;\n\t\tcase 60:\n\t\t\tif(tim <= 0)\n\t\t\t\tcols.put(s, Color.BLACK);\n\t\t\telse if(tim > 45 && tim <= 60)\n\t\t\t\tcols.put(s, Color.yellow);\n\t\t\telse\n\t\t\t\tcols.put(s, Color.gray);\n\t\t\tbreak;\n\t\tcase 65:\n\t\t\tif(tim <= 0)\n\t\t\t\tcols.put(s, Color.BLACK);\n\t\t\telse if(tim > 60)\n\t\t\t\tcols.put(s, Color.yellow);\n\t\t\telse\n\t\t\t\tcols.put(s, Color.gray);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcols.put(s, Color.gray);\n\t\t}\n\t}\n\n\treturn cols;\n}", "path": "Source Code\\Transit and Viz\\src\\calculations\\ModelCalculator.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//Calculate Public Transit time away heatmap\n", "func_signal": "private HashMap<String, Color> transTimeHeat()", "code": "{\n\tHashMap<String, Color> col = new HashMap<String, Color>();\n\tHashMap<String, Double> calc = new HashMap<String, Double>();\n\tdouble min = Double.POSITIVE_INFINITY;\n\tdouble max = Double.NEGATIVE_INFINITY;\n\tTAZ t = tazs.get(centeredAround);\n\tfor(String s : t.getMappings().keySet()){\n\t\tdouble acc = t.getTotalTime(s);\n\t\tif(acc < min && acc>0)\n\t\t\tmin = acc;\n\t\tif(acc > max)\n\t\t\tmax = acc;\n\t\tcalc.put(s, acc);\n\t}\n\n\tdouble newMax = max - min;\n\n\tfor(String s : calc.keySet()){\n\t\tdouble acc = calc.get(s);\n\t\tdouble newAcc = acc + (-1 * min);\n\t\tdouble normalized = newAcc/newMax;\n\t\tif(acc == 0){\n\t\t\tcol.put(s, Color.BLACK);\n\t\t}else{\n\t\t\tcol.put(s, percToColor(normalized));\n\t\t}\n\t}\n\treturn col;\n}", "path": "Source Code\\Transit and Viz\\src\\calculations\\ModelCalculator.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//Convert a normalized percentage to a color\n", "func_signal": "private Color percToColor(double d)", "code": "{\n\tif(d < .5){\n\t\tdouble locPerc = d / .5;\n\t\treturn new Color((int)(locPerc*255), 255, 0);\n\t}\n\telse{\n\t\tdouble locPerc = (d-.5)/.5;\n\t\treturn new Color(255, (int) ((1-locPerc)*255), 0);\n\t}\n}", "path": "Source Code\\Transit and Viz\\src\\calculations\\ModelCalculator.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//Using screen size, correctly transforms and lat and long coordinate\n//into the associated screen coordinate\n", "func_signal": "public AffineTransform worldToScreenTransform()", "code": "{\n\tAffineTransform t = new AffineTransform();\n\n\tdouble w = viewport.getWidth();\n\tdouble h = viewport.getHeight();\n\n\tt.translate(0, getHeight());\n\tt.scale(getWidth()/w, -getHeight() / h);\n\tt.translate(-viewport.getX(), -viewport.getY());\n\n\treturn t;\n}", "path": "Source Code\\Transit and Viz\\src\\graphics\\MapPanel.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//Constructor which initializes important private fields\n", "func_signal": "public RoutePlanner(Database db) throws FileNotFoundException", "code": "{\n\troad_database = db;\n\t\n\tdijkstra_calculator = new Dijkstra();\n\t\t\t\n\tIterator<RoadSegment> itr = road_database.iterator();\n\t\t\t\n\twhile(itr.hasNext()){\n\n\t\tRoadSegment curr = itr.next();\n\n\t\tNode src = new Node(new HashSet<Edge>(), null, curr.getFromPoint(), Double.POSITIVE_INFINITY);\n\t\tNode checkSrc = dijkstra_calculator.getNode(curr.getFromPoint());\n\t\tNode snk = new Node(new HashSet<Edge>(), null, curr.getToPoint(), Double.POSITIVE_INFINITY);\n\t\tNode checkSnk = dijkstra_calculator.getNode(curr.getToPoint());\n\t\t\n\t\tNode sink = null;\n\t\tNode source = null;\n\n\t\tdouble distance = distanceInMiles(curr.getFromPoint(), curr.getToPoint());\n\t\tdouble weight = distance/getSpeedLimit(curr);\n\n\t\t//If the distance is the same as the weight, then the current segment is not a road\n\t\tif(distance != weight){\n\n\t\t\tif(checkSnk != null)\n\t\t\t\tsink = checkSnk;\n\t\t\telse\n\t\t\t\tsink = snk;\n\t\t\tif(checkSrc != null)\n\t\t\t\tsource = checkSrc;\n\t\t\telse\n\t\t\t\tsource = src;\n\n\t\t\tdijkstra_calculator.addNode(sink);\n\t\t\tdijkstra_calculator.addNode(source);\n\t\t\t\n\t\t\t//If you want to account for one way streets, start here and adjust as necessary\n\t\t\ttry{\n\t\t\t\t\tdijkstra_calculator.addEdge(source, sink, distance, weight, curr, 1);\n\t\t\t\t\tdijkstra_calculator.addEdge(sink, source, distance, weight, curr, -1);\n\t\t\t\t}\n\t\t\tcatch(Exception e){}\n\t\t}\n\t}\n}", "path": "Source Code\\Automotive Accessibility Calculator\\src\\routing\\RoutePlanner.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//Initialize all of the data needed to calculate the necessary models\n", "func_signal": "public ModelCalculator(HashMap<String, TAZ> locTaz, HashMap<String, Double> locTrans, HashMap<String, Double> locAuto, HashMap<String, Shape> shape)", "code": "{\n\ttazs = locTaz;\n\ttransAcc = locTrans;\n\tautoAcc = locAuto;\n\tshapes = shape;\n\tinvisible = new HashMap<String, TAZ>();\n\ttAccHolder = new HashMap<String, Double>();\n\taAccHolder = new HashMap<String, Double>();\n\tcenteredAround = tazs.keySet().iterator().next();\n}", "path": "Source Code\\Transit and Viz\\src\\calculations\\ModelCalculator.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//Based on the type of extrusion specified, returns extrusions necessary for each TAZ\n", "func_signal": "public HashMap<String, Double> getExtrusions(int extrusion)", "code": "{\n\tHashMap<String, Double> exts = new HashMap<String, Double>();\n\tHashMap<String, Color> col = getModel();\n\tHashMap<String, Double> mags = new HashMap<String, Double>();\n\n\tdouble min = Double.MAX_VALUE, max = 0.;\n\n\tif(extrusion == 3){\n\t\tfor(TAZ t : tazs.values()){\n\t\t\tif(t.getPopulation(2010) > max)\n\t\t\t\tmax = t.getPopulation(2010);\n\t\t\telse if(t.getPopulation(2010) < min)\n\t\t\t\tmin = t.getPopulation(2010);\n\t\t}\n\t}\n\n\telse if(extrusion == 4){\n\t\tfor(TAZ t : tazs.values()){\n\t\t\tif(t.getHouseholds(2010) > max)\n\t\t\t\tmax = t.getHouseholds(2010);\n\t\t\telse if(t.getHouseholds(2010) < min)\n\t\t\t\tmin = t.getHouseholds(2010);\n\t\t}\n\t}\n\n\telse if(extrusion == 5){\n\t\tfor(TAZ t : tazs.values()){\n\t\t\tif(t.getEmployment(2010) > max)\n\t\t\t\tmax = t.getEmployment(2010);\n\t\t\telse if(t.getEmployment(2010) < min)\n\t\t\t\tmin = t.getEmployment(2010);\n\t\t}\n\t}\n\n\telse if(extrusion == 6){\n\t\tfor(Double d : transAcc.values()){\n\t\t\tif(d > max){\n\t\t\t\tmax = d;\n\t\t\t}\n\t\t\telse if(d < min){\n\t\t\t\tmin = d;\n\t\t\t}\n\t\t}\n\t}\n\n\telse if(extrusion == 7){\n\t\tfor(Double d : autoAcc.values()){\n\t\t\tif(d > max){\n\t\t\t\tmax = d;\n\t\t\t}\n\t\t\telse if(d < min){\n\t\t\t\tmin = d;\n\t\t\t}\n\t\t}\n\t}\n\n\telse if(extrusion == 8){\n\t\tfor(String s : transAcc.keySet()){\n\t\t\tdouble mag = (transAcc.get(s)-autoAcc.get(s))/(transAcc.get(s) + autoAcc.get(s));\n\t\t\tif(mag < min)\n\t\t\t\tmin = mag;\n\t\t\tif(mag > max)\n\t\t\t\tmax = mag;\n\t\t\tmags.put(s, mag);\n\t\t}\n\t}\n\n\t//Scaling factor for how high the highest point will be, may want to alter based on how you want to visualize it\n\tdouble scale = 5000.;\n\t\n\tfor(String s : tazs.keySet()){\n\t\tTAZ t = tazs.get(s);\n\t\tswitch(extrusion){\n\t\t\n\t\t//Not Extruded\n\t\tcase 0:\n\t\t\texts.put(s, 0.);\n\t\t\tbreak;\n\t\t\t\n\t\t//Extrusion Placeholder\n\t\tcase 1:\n\t\t\texts.put(s, 0.);\n\t\t\tbreak;\n\t\t\t\n\t\t//Extruded by Color of model\n\t\tcase 2:\n\t\t\texts.put(s, colorToPerc(col.get(s)) * scale + 5);\n\t\t\tbreak;\n\t\t\t\n\t\t//Extruded by Population\n\t\tcase 3:\n\t\t\texts.put(s, (t.getPopulation(2010)-min)/(max-min) * scale + 5);\n\t\t\tbreak;\n\t\t\t\n\t\t//Extruded by Housholds in TAZ\n\t\tcase 4: //don't use\n\t\t\texts.put(s, (t.getHouseholds(2010) - min) /(max - min) * scale + 5);\n\t\t\tbreak;\n\t\t\t\n\t\t//Extruded by Employment available in TAZ\n\t\tcase 5:\n\t\t\texts.put(s, (t.getEmployment(2010) - min) /(max - min) * scale + 5);\n\t\t\tbreak;\n\t\t\t\n\t\t//Extruded by Public Transit Accessibility\n\t\tcase 6:\n\t\t\texts.put(s, (transAcc.get(s) - min) /(max - min) * scale + 5);\n\t\t\tbreak;\n\t\t\t\n\t\t//Extruded by Automotive Accessibility\n\t\tcase 7: //don't use\n\t\t\texts.put(s, (autoAcc.get(s) - min) / (max - min) * scale + 5);\n\t\t\tbreak;\n\t\t\t\n\t    //Extruded by Modal Accessibility Gap\n\t\tcase 8: //don't use\n\t\t\texts.put(s, (mags.get(s) - min) / (max - min) * scale + 5);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn exts;\n}", "path": "Source Code\\Transit and Viz\\src\\calculations\\ModelCalculator.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "/**\n * Creates a database from the given source.\n * \n * @param source\n *           the database source\n * @param supplementary\n *           the supplementary address ranges\n */\n", "func_signal": "public DefaultDatabase(ArrayList<String> source)", "code": "{\n\t   //Loop through source, properly parsing and storing information\n   for(String s : source){\n \t  String cfcc = s.substring(55, 58);\n \t  if(cfcc.charAt(0) == 'A'){\n \t\tint tlid = parseTextInt(s, 7, 16);\n \t\tString prefix = s.substring(17, 19).trim();\n \t\tString name = s.substring(19, 49).trim();\n \t\tString postfix = s.substring(49, 55).trim();\n \t\tint fromLong = parseTextInt(s, 190, 200);\n \t\tint fromLat = parseTextInt(s, 200, 209);\n \t\tint toLong = parseTextInt(s, 209, 219);\n \t\tint toLat = parseTextInt(s, 219, 228); \n \t\t\n \t\t//Construct a road segment for the given line of data\n \t\tRoadSegment r = new RoadSegment(tlid, new Point(fromLat, fromLong), new Point(toLat, toLong), prefix, name, postfix, cfcc);\n \t\t\n \t\t//Ultimately put the finished road segment into database mapped to its tlid\n \t\tdata.put(tlid, r); \n \t\t\n \t  }\n   }\n}", "path": "Source Code\\Automotive Accessibility Calculator\\src\\routing\\DefaultDatabase.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//Based on which buttons are selected, calculate the necessary model\n", "func_signal": "public HashMap<String, Color> getModel()", "code": "{\n\t\n\tif(tazs.get(centeredAround)==null){\n\t\treturn showAvailable();\n\t}\n\t\n\t// Iso-chronic Displays\n\tif(iso){\n\t\t\n\t\t//Public Transportation\n\t\tif(trans){\n\t\t\t\n\t\t\t//Times frames to calculate for\n\t\t\tif(thir)\n\t\t\t\treturn transIso(30);\n\t\t\telse if(four)\n\t\t\t\treturn transIso(45);\n\t\t\telse if(fif)\n\t\t\t\treturn transIso(60);\n\t\t\telse if(six)\n\t\t\t\treturn transIso(65);\n\t\t\telse if(allIso)\n\t\t\t\treturn transIso(0);\n\t\t\telse\n\t\t\t\treturn defaultCentered();\n\t\t}\n\t\t\n\t\t//Automotive means of transportation\n\t\t/*else if(auto){\n\t\t\t\n\t\t\t//Times frames to calculate for\n\t\t\tif(thir)\n\t\t\t\treturn autoIso(30);\n\t\t\telse if(four)\n\t\t\t\treturn autoIso(45);\n\t\t\telse if(fif)\n\t\t\t\treturn autoIso(60);\n\t\t\telse if(six)\n\t\t\t\treturn autoIso(65);\n\t\t\telse if(allIso)\n\t\t\t\treturn autoIso(0);\n\t\t\telse\n\t\t\t\treturn defaultCentered();\n\t\t}*/\n\t}\n\t\n\t//Generate a heat map\n\telse if(heat){\n\t\t\n\t\t//Modal Accessibility model\n\t\t/*if(mag)\n\t\t\treturn calcMag();\n\t\t*/\n\t\t\n\t\t//Cumulative Opportunity Model\n\t\t/*else*/ if(com){\n\t\t\t\n\t\t\t//Public transportation\n\t\t\tif(trans){\n\t\t\t\tif(comThir)\n\t\t\t\t\treturn transCom(30);\n\t\t\t\telse if(comFour)\n\t\t\t\t\treturn transCom(45);\n\t\t\t\telse if(comSix)\n\t\t\t\t\treturn transCom(60);\n\t\t\t\telse\n\t\t\t\t\treturn defaultCentered();\n\t\t\t}\n\t\t\t\n\t\t\t//Automotive transprotation\n\t\t\t/*else if(auto){\n\t\t\t\tif(comThir)\n\t\t\t\t\treturn autoCom(30);\n\t\t\t\telse if(comFour)\n\t\t\t\t\treturn autoCom(45);\n\t\t\t\telse if(comSix)\n\t\t\t\t\treturn autoCom(60);\n\t\t\t\telse\n\t\t\t\t\treturn defaultCentered();\n\t\t\t}*/\n\t\t\t\n\t\t\t//Return a blank mapping\n\t\t\telse\n\t\t\t\treturn defaultCentered();\n\t\t}\n\t\t\n\t\t//Accessibility Model\n\t\telse if(access){\n\t\t\t\n\t\t\t//Public Transportation\n\t\t\tif(trans)\n\t\t\t\treturn transAccessHeat();\n\t\t\t\n\t\t\t/*\n\t\t\t//Automotive Transportation\n\t\t\telse if(auto)\n\t\t\t\treturn autoAccessHeat();\n\t\t\telse\n\t\t\t\treturn defaultCentered();\n\t\t\t*/\n\t\t}\n\t\t\n\t\t//Time away heat map\n\t\telse if(time){\n\t\t\t\n\t\t\t//Public Transportation\n\t\t\tif(trans)\n\t\t\t\treturn transTimeHeat();\n\t\t\t\n\t\t\t//Automotive Transportation\n\t\t\t/*else if(auto)\n\t\t\t\treturn autoTimeHeat();*/\n\t\t\telse\n\t\t\t\treturn defaultCentered();\n\t\t}\n\t\telse\n\t\t\treturn defaultCentered();\n\t}\n\telse\n\t\treturn defaultCentered();\n\treturn defaultCentered();\n}", "path": "Source Code\\Transit and Viz\\src\\calculations\\ModelCalculator.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//Finds the nearest point in database with relation to p\n", "func_signal": "public Point findNearestCoordinate(Point p)", "code": "{\n\t   Iterator<RoadSegment> itr = this.iterator();\n\t   double min = Double.MAX_VALUE;\n\t   Point low = null;\n\t   while(itr.hasNext()){\n\t\t   RoadSegment r = itr.next();\n\t\t   Point nLow = r.getClosestDistance(p);\n\t\t   double dist = Math.sqrt(nLow.compareTo(p));\n\t\t   if(dist < min){\n\t\t\t   min = dist;\n\t\t\t   low = nLow;\n\t\t   }\n\t   }\n\t   return low;\n}", "path": "Source Code\\Automotive Accessibility Calculator\\src\\routing\\DefaultDatabase.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//Find the shortest path between two points\n", "func_signal": "public List<RouteStep> getRoute(Point from, Point to) throws RouteFailureException", "code": "{\n\n\tDijkstra d = new Dijkstra();\n\td.setNodePool(dijkstra_calculator.getNodePool());\n\t\n\t\n\t//Find coordinates within graph\n\tNode src = d.getNode(from);\n\t\n\tNode snk = d.getNode(to);\n\t\n\n\tStack<Edge> fEdges ;\n\tfEdges = d.getShortestPath(src, snk);\n\n\treturn createRoute(fEdges);\n\t\n}", "path": "Source Code\\Automotive Accessibility Calculator\\src\\routing\\RoutePlanner.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//Calculates cumulative opportunity model, and generates associate colors for heatmap\n", "func_signal": "private HashMap<String, Color> transCom(int minT)", "code": "{\n\tHashMap<String, Color> col = new HashMap<String, Color>();\n\tHashMap<String, Double> calc = new HashMap<String, Double>();\n\tdouble min = Double.POSITIVE_INFINITY;\n\tdouble max = Double.NEGATIVE_INFINITY;\n\tfor(String from : tazs.keySet()){\n\t\tTAZ a = tazs.get(from);\n\t\tdouble sum = 0.;\n\t\tfor(String to : tazs.keySet()){\n\t\t\tif(a.getTotalTime(to)*.001/60 < minT && a.getTotalTime(to)>0){\n\t\t\t\tsum += tazs.get(to).getEmployment(2010);\n\t\t\t}\n\t\t}\n\t\tif(sum < min)\n\t\t\tmin = sum;\n\t\tif (sum > max)\n\t\t\tmax = sum;\n\t\tcalc.put(from, sum);\n\t}\n\t\n\t//Normalizes each value based on maximum and minimum COM, and assigns appropriate color\n\tdouble newMax = max - min;\n\n\tfor(String s : calc.keySet()){\n\t\tdouble com = calc.get(s);\n\t\tdouble newCom = com - min;\n\t\tdouble normalized = newCom/newMax;\n\t\tcol.put(s, percToColor(normalized));\n\t}\n\n\n\treturn col;\n\n}", "path": "Source Code\\Transit and Viz\\src\\calculations\\ModelCalculator.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "//Generic method which returns all elements in the database if it contains less then 7 elements\n//Otherwise it notes that there are too many to list to reduce cluster.\n", "func_signal": "public String toString()", "code": "{\n\t   String toReturn = \"\";\n\t  if(data.size() > 7)\n\t\t   return \"....too many to list....\\n\";\n\t  for(RoadSegment r: data.values())\n\t\t  toReturn += r.toString() + \"\\n\";\n\t  return toReturn;\n}", "path": "Source Code\\Automotive Accessibility Calculator\\src\\routing\\DefaultDatabase.java", "repo_name": "Noblis/OSAT", "stars": 16, "license": "None", "language": "java", "size": 536608}
{"docstring": "/**\n * Disconnect from a Bluetooth device\n * \n * For feedback register a <a href=\n * \"http://developer.android.com/reference/android/content/BroadcastReceiver.html\"\n * >BroadcastReceiver</a> for the\n * {@link at.abraxas.amarino.intent.DefaultAmarinoServiceIntentConfig#ACTION_DISCONNECTED}\n * intent.\n * \n * @param ctx\n *            the ctx\n * @param address\n *            address of your Arduino Bluetooth module, should be the same\n *            which you used to connect to the device\n */\n", "func_signal": "public void disconnect(String address)", "code": "{\n\tIntent intent = new Intent(intentConfig.getIntentNameActionDisconnect());\n\tintent.putExtra(DefaultAmarinoServiceIntentConfig.EXTRA_DEVICE_ADDRESS,\n\t\t\taddress);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Used by plug-in developers to send a char value.\n * \n * <p>\n * This method can only be used within a plugin! If you want to send data\n * from your own standalone application, use\n * {@link #sendDataToArduino(String address, char flag, char data)} instead.\n * </p>\n * \n * @param ctx\n *            the ctx\n * @param pluginId\n *            you received this id when\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataFromPlugin(int pluginId, char data)", "code": "{\n\tIntent intent = getPluginSendIntent(\n\t\t\tAmarinoServiceIntentConfig.CHAR_EXTRA, pluginId);\n\tintent.putExtra(AmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Sends a short value to Arduino\n * \n * @param ctx\n *            the ctx\n * @param address\n *            the Bluetooth device you want to send data to\n * @param flag\n *            the flag Arduino has registered a function for to receive this\n *            data\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataToArduino(String address, char flag, short data)", "code": "{\n\tIntent intent = getSendIntent(address,\n\t\t\tAmarinoServiceIntentConfig.SHORT_EXTRA, flag);\n\tintent.putExtra(DefaultAmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Used by plug-in developers to send a byte value.\n * \n * <p>\n * This method can only be used within a plugin! If you want to send data\n * from your own standalone application, use\n * {@link #sendDataToArduino(String address, char flag, byte data)} instead.\n * </p>\n * \n * @param ctx\n *            the ctx\n * @param pluginId\n *            you received this id when\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataFromPlugin(int pluginId, byte data)", "code": "{\n\tIntent intent = getPluginSendIntent(\n\t\t\tAmarinoServiceIntentConfig.BYTE_EXTRA, pluginId);\n\tintent.putExtra(AmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Used by plug-in developers to send a float value.\n * \n * <p>\n * This method can only be used within a plugin! If you want to send data\n * from your own standalone application, use\n * {@link #sendDataToArduino(String address, char flag, float data)}\n * instead.\n * </p>\n * \n * @param ctx\n *            the ctx\n * @param pluginId\n *            you received this id when\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataFromPlugin(int pluginId, float data)", "code": "{\n\tIntent intent = getPluginSendIntent(\n\t\t\tAmarinoServiceIntentConfig.FLOAT_EXTRA, pluginId);\n\tintent.putExtra(AmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Sends a double array to Arduino\n * \n * <p>\n * <i>If you do not exactly know what you do, you absolutely shouldn't\n * really use this method, since Arduino cannot receive Android's 32-bit\n * double values.</i>\n * </p>\n * \n * @param ctx\n *            the ctx\n * @param address\n *            the Bluetooth device you want to send data to\n * @param flag\n *            the flag Arduino has registered a function for to receive this\n *            data\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataToArduino(String address, char flag, double[] data)", "code": "{\n\tIntent intent = getSendIntent(address,\n\t\t\tAmarinoServiceIntentConfig.DOUBLE_ARRAY_EXTRA, flag);\n\tintent.putExtra(AmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Used by plug-in developers to send a byte array.\n * \n * <p>\n * This method can only be used within a plugin! If you want to send data\n * from your own standalone application, use\n * {@link #sendDataToArduino(String address, char flag, byte[] data)}\n * instead.\n * </p>\n * \n * @param ctx\n *            the ctx\n * @param pluginId\n *            you received this id when\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataFromPlugin(int pluginId, byte[] data)", "code": "{\n\tIntent intent = getPluginSendIntent(\n\t\t\tAmarinoServiceIntentConfig.BYTE_ARRAY_EXTRA, pluginId);\n\tintent.putExtra(AmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Sends a double value to Arduino\n * \n * <p>\n * <i>If you do not exactly know what you do, you absolutely shouldn't\n * really use this method, since Arduino cannot receive Android's 32-bit\n * double values.</i>\n * </p>\n * \n * @param ctx\n *            the ctx\n * @param address\n *            the Bluetooth device you want to send data to\n * @param flag\n *            the flag Arduino has registered a function for to receive this\n *            data\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataToArduino(String address, char flag, double data)", "code": "{\n\tIntent intent = getSendIntent(address,\n\t\t\tAmarinoServiceIntentConfig.DOUBLE_EXTRA, flag);\n\tintent.putExtra(DefaultAmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Used by plug-in developers to send a String array.\n * \n * <p>\n * This method can only be used within a plugin! If you want to send data\n * from your own standalone application, use\n * {@link #sendDataToArduino(String address, char flag, String[] data)}\n * instead.\n * </p>\n * \n * @param ctx\n *            the ctx\n * @param pluginId\n *            you received this id when\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataFromPlugin(int pluginId, String[] data)", "code": "{\n\tIntent intent = getPluginSendIntent(\n\t\t\tAmarinoServiceIntentConfig.STRING_ARRAY_EXTRA, pluginId);\n\tintent.putExtra(AmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Used by plug-in developers to send a int value.\n * \n * <p>\n * This method can only be used within a plugin! If you want to send data\n * from your own standalone application, use\n * {@link #sendDataToArduino(String address, char flag, int data)} instead.\n * </p>\n * \n * @param ctx\n *            the ctx\n * @param pluginId\n *            you received this id when\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataFromPlugin(int pluginId, int data)", "code": "{\n\tIntent intent = getPluginSendIntent(\n\t\t\tAmarinoServiceIntentConfig.INT_EXTRA, pluginId);\n\tintent.putExtra(AmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Sends an int value to Arduino\n * \n * @param ctx\n *            the ctx\n * @param address\n *            the Bluetooth device you want to send data to\n * @param flag\n *            the flag Arduino has registered a function for to receive this\n *            data\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataToArduino(String address, char flag, int data)", "code": "{\n\tIntent intent = getSendIntent(address,\n\t\t\tAmarinoServiceIntentConfig.INT_EXTRA, flag);\n\tintent.putExtra(DefaultAmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Used by plug-in developers to send a short array.\n * \n * <p>\n * This method can only be used within a plugin! If you want to send data\n * from your own standalone application, use\n * {@link #sendDataToArduino(String address, char flag, short[] data)}\n * instead.\n * </p>\n * \n * @param ctx\n *            the ctx\n * @param pluginId\n *            you received this id when\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataFromPlugin(int pluginId, short[] data)", "code": "{\n\tIntent intent = getPluginSendIntent(\n\t\t\tAmarinoServiceIntentConfig.SHORT_ARRAY_EXTRA, pluginId);\n\tintent.putExtra(AmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Used by plug-in developers to send a long value.\n * \n * <p>\n * This method can only be used within a plugin! If you want to send data\n * from your own standalone application, use\n * {@link #sendDataToArduino(String address, char flag, long data)} instead.\n * </p>\n * \n * @param ctx\n *            the ctx\n * @param pluginId\n *            you received this id when\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataFromPlugin(int pluginId, long data)", "code": "{\n\tIntent intent = getPluginSendIntent(\n\t\t\tAmarinoServiceIntentConfig.LONG_EXTRA, pluginId);\n\tintent.putExtra(AmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Sends a float array to Arduino\n * \n * @param ctx\n *            the ctx\n * @param address\n *            the Bluetooth device you want to send data to\n * @param flag\n *            the flag Arduino has registered a function for to receive this\n *            data\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataToArduino(String address, char flag, float[] data)", "code": "{\n\tIntent intent = getSendIntent(address,\n\t\t\tAmarinoServiceIntentConfig.FLOAT_ARRAY_EXTRA, flag);\n\tintent.putExtra(AmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Used by plug-in developers to send a String value.\n * \n * <p>\n * This method can only be used within a plugin! If you want to send data\n * from your own standalone application, use\n * {@link #sendDataToArduino(String address, char flag, String data)}\n * instead.\n * </p>\n * \n * @param ctx\n *            the ctx\n * @param pluginId\n *            you received this id when\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataFromPlugin(int pluginId, String data)", "code": "{\n\tIntent intent = getPluginSendIntent(\n\t\t\tAmarinoServiceIntentConfig.STRING_EXTRA, pluginId);\n\tintent.putExtra(AmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Used by plug-in developers to send a char array.\n * \n * <p>\n * This method can only be used within a plugin! If you want to send data\n * from your own standalone application, use\n * {@link #sendDataToArduino(String address, char flag, char[] data)}\n * instead.\n * </p>\n * \n * @param ctx\n *            the ctx\n * @param pluginId\n *            you received this id when\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataFromPlugin(int pluginId, char[] data)", "code": "{\n\tIntent intent = getPluginSendIntent(\n\t\t\tAmarinoServiceIntentConfig.CHAR_ARRAY_EXTRA, pluginId);\n\tintent.putExtra(AmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Returns array values, in a line by line matter (each value one in a\n * separate line)\n * \n * @param dataType\n * @param array\n * @return\n */\n", "func_signal": "public String getMessage(int dataType, Object array)", "code": "{\n\t// TODO it looks like this is only used by the Amarino app, not by the\n\t// protocol, so should be moved\n\tString s = new String();\n\tswitch (dataType) {\n\tcase DefaultAmarinoServiceIntentConfig.INT_ARRAY_EXTRA:\n\t\tint[] ints = (int[]) array;\n\t\tfor (int i2 : ints) {\n\t\t\ts += String.valueOf(i2);\n\t\t\ts += \"\\n\";\n\t\t}\n\t\tbreak;\n\n\tcase DefaultAmarinoServiceIntentConfig.FLOAT_ARRAY_EXTRA:\n\t\tfloat[] floats = (float[]) array;\n\t\tfor (float f : floats) {\n\t\t\ts += String.valueOf(f);\n\t\t\ts += \"\\n\";\n\t\t}\n\t\tbreak;\n\n\tcase DefaultAmarinoServiceIntentConfig.STRING_ARRAY_EXTRA:\n\t\tString[] strings = (String[]) array;\n\t\tfor (String str : strings) {\n\t\t\ts += str;\n\t\t\ts += \"\\n\";\n\t\t}\n\t\tbreak;\n\n\tcase DefaultAmarinoServiceIntentConfig.SHORT_ARRAY_EXTRA:\n\t\tshort[] shorts = (short[]) array;\n\t\tfor (short shorty : shorts) {\n\t\t\ts += String.valueOf(shorty);\n\t\t\ts += \"\\n\";\n\t\t}\n\t\tbreak;\n\n\tcase DefaultAmarinoServiceIntentConfig.BYTE_ARRAY_EXTRA:\n\t\tbyte[] bytes = (byte[]) array;\n\t\tfor (byte b : bytes) {\n\t\t\ts += String.valueOf(b);\n\t\t\ts += \"\\n\";\n\t\t}\n\t\tbreak;\n\n\tcase DefaultAmarinoServiceIntentConfig.BOOLEAN_ARRAY_EXTRA:\n\t\tboolean[] booleans = (boolean[]) array;\n\t\tfor (boolean bool : booleans) {\n\t\t\ts += String.valueOf(bool);\n\t\t\ts += \"\\n\";\n\t\t}\n\t\tbreak;\n\n\tcase DefaultAmarinoServiceIntentConfig.CHAR_ARRAY_EXTRA:\n\t\tchar[] chars = (char[]) array;\n\t\tfor (char c : chars) {\n\t\t\ts += String.valueOf(c);\n\t\t\ts += \"\\n\";\n\t\t}\n\t\tbreak;\n\n\tcase DefaultAmarinoServiceIntentConfig.DOUBLE_ARRAY_EXTRA:\n\t\tdouble[] doubles = (double[]) array;\n\t\tfor (double d : doubles) {\n\t\t\ts += String.valueOf(d);\n\t\t\ts += \"\\n\";\n\t\t}\n\t\tbreak;\n\n\tcase DefaultAmarinoServiceIntentConfig.LONG_ARRAY_EXTRA:\n\t\tlong[] longs = (long[]) array;\n\t\tfor (long l : longs) {\n\t\t\ts += String.valueOf(l);\n\t\t\ts += \"\\n\";\n\t\t}\n\t\tbreak;\n\t}\n\treturn s;\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\message\\DefaultMessageBuilder.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Used by plug-in developers to send a double array.\n * \n * <p>\n * This method can only be used within a plugin! If you want to send data\n * from your own standalone application, use\n * {@link #sendDataToArduino(String address, char flag, double[] data)}\n * instead.\n * </p>\n * \n * @param ctx\n *            the ctx\n * @param pluginId\n *            you received this id when\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataFromPlugin(int pluginId, double[] data)", "code": "{\n\tIntent intent = getPluginSendIntent(\n\t\t\tAmarinoServiceIntentConfig.DOUBLE_ARRAY_EXTRA, pluginId);\n\tintent.putExtra(AmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Sends an boolean array to Arduino\n * \n * @param ctx\n *            the ctx\n * @param address\n *            the Bluetooth device you want to send data to\n * @param flag\n *            the flag Arduino has registered a function for to receive this\n *            data\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataToArduino(String address, char flag, boolean[] data)", "code": "{\n\tIntent intent = getSendIntent(address,\n\t\t\tAmarinoServiceIntentConfig.BOOLEAN_ARRAY_EXTRA, flag);\n\tintent.putExtra(DefaultAmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * Used by plug-in developers to send a boolean value.\n * \n * <p>\n * This method can only be used within a plugin! If you want to send data\n * from your own standalone application, use\n * {@link #sendDataToArduino(String address, char flag, boolean data)}\n * instead.\n * </p>\n * \n * @param ctx\n *            the ctx\n * @param pluginId\n *            you received this id when\n * @param data\n *            your data you want to send\n */\n", "func_signal": "public void sendDataFromPlugin(int pluginId, boolean data)", "code": "{\n\tIntent intent = getPluginSendIntent(\n\t\t\tAmarinoServiceIntentConfig.BOOLEAN_EXTRA, pluginId);\n\tintent.putExtra(AmarinoServiceIntentConfig.EXTRA_DATA, data);\n\tctx.sendBroadcast(intent);\n}", "path": "amarino\\src\\at\\abraxas\\amarino\\AmarinoConfigured.java", "repo_name": "tenaciousRas/amarino-embed", "stars": 25, "license": "other", "language": "java", "size": 7569}
{"docstring": "/**\n * This is called when we receive a response code from Android Market for a request\n * that we made. This is used for reporting various errors and for\n * acknowledging that an order was sent to the server. This is NOT used\n * for any purchase state changes.  All purchase state changes are received\n * in the {@link BillingReceiver} and passed to this service, where they are\n * handled in {@link #purchaseStateChanged(int, String, String)}.\n * @param requestId a number that identifies a request, assigned at the\n * time the request was made to Android Market\n * @param responseCode a response code from Android Market to indicate the state\n * of the request\n */\n", "func_signal": "private void checkResponseCode(long requestId, ResponseCode responseCode)", "code": "{\n    BillingRequest request = mSentRequests.get(requestId);\n    if (request != null) {\n        if (Consts.DEBUG) {\n            Log.d(TAG, request.getClass().getSimpleName() + \": \" + responseCode);\n        }\n        request.responseCodeReceived(responseCode);\n    }\n    mSentRequests.remove(requestId);\n}", "path": "src\\com\\suchagit\\android2cloud\\BillingService.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * Verifies that the data was signed with the given signature, and returns\n * the list of verified purchases. The data is in JSON format and contains\n * a nonce (number used once) that we generated and that was signed\n * (as part of the whole data string) with a private key. The data also\n * contains the {@link PurchaseState} and product ID of the purchase.\n * In the general case, there can be an array of purchase transactions\n * because there may be delays in processing the purchase on the backend\n * and then several purchases can be batched together.\n * @param signedData the signed JSON string (signed, not encrypted)\n * @param signature the signature for the data, signed with the private key\n */\n", "func_signal": "public static ArrayList<VerifiedPurchase> verifyPurchase(String signedData, String signature)", "code": "{\n    if (signedData == null) {\n        Log.e(TAG, \"data is null\");\n        return null;\n    }\n    if (Consts.DEBUG) {\n        Log.i(TAG, \"signedData: \" + signedData);\n    }\n    boolean verified = false;\n    if (!TextUtils.isEmpty(signature)) {\n        /**\n         * Compute your public key (that you got from the Android Market publisher site).\n         *\n         * Instead of just storing the entire literal string here embedded in the\n         * program,  construct the key at runtime from pieces or\n         * use bit manipulation (for example, XOR with some other string) to hide\n         * the actual key.  The key itself is not secret information, but we don't\n         * want to make it easy for an adversary to replace the public key with one\n         * of their own and then fake messages from the server.\n         *\n         * Generally, encryption keys / passwords should only be kept in memory\n         * long enough to perform the operation they need to perform.\n         */\n        String base64EncodedPublicKey = \"INSERT PUBLIC KEY\";\n        PublicKey key = Security.generatePublicKey(base64EncodedPublicKey);\n        verified = Security.verify(key, signedData, signature);\n        if (!verified) {\n            Log.w(TAG, \"signature does not match data.\");\n            return null;\n        }\n    }\n\n    JSONObject jObject;\n    JSONArray jTransactionsArray = null;\n    int numTransactions = 0;\n    long nonce = 0L;\n    try {\n        jObject = new JSONObject(signedData);\n\n        // The nonce might be null if the user backed out of the buy page.\n        nonce = jObject.optLong(\"nonce\");\n        jTransactionsArray = jObject.optJSONArray(\"orders\");\n        if (jTransactionsArray != null) {\n            numTransactions = jTransactionsArray.length();\n        }\n    } catch (JSONException e) {\n        return null;\n    }\n\n    if (!Security.isNonceKnown(nonce)) {\n        Log.w(TAG, \"Nonce not found: \" + nonce);\n        return null;\n    }\n\n    ArrayList<VerifiedPurchase> purchases = new ArrayList<VerifiedPurchase>();\n    try {\n        for (int i = 0; i < numTransactions; i++) {\n            JSONObject jElement = jTransactionsArray.getJSONObject(i);\n            int response = jElement.getInt(\"purchaseState\");\n            Consts.PurchaseState purchaseState = Consts.PurchaseState.valueOf(response);\n            String productId = jElement.getString(\"productId\");\n            String packageName = jElement.getString(\"packageName\");\n            long purchaseTime = jElement.getLong(\"purchaseTime\");\n            String orderId = jElement.optString(\"orderId\", \"\");\n            String notifyId = null;\n            if (jElement.has(\"notificationId\")) {\n                notifyId = jElement.getString(\"notificationId\");\n            }\n            String developerPayload = jElement.optString(\"developerPayload\", null);\n\n            // If the purchase state is PURCHASED, then we require a\n            // verified nonce.\n            if (purchaseState == Consts.PurchaseState.PURCHASED && !verified) {\n                continue;\n            }\n            purchases.add(new VerifiedPurchase(purchaseState, notifyId, productId,\n                    orderId, purchaseTime, developerPayload));\n        }\n    } catch (JSONException e) {\n        Log.e(TAG, \"JSON exception: \", e);\n        return null;\n    }\n    removeNonce(nonce);\n    return purchases;\n}", "path": "src\\com\\suchagit\\android2cloud\\util\\Security.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * Encodes up to three bytes of the array <var>source</var>\n * and writes the resulting four Base64 bytes to <var>destination</var>.\n * The source and destination arrays can be manipulated\n * anywhere along their length by specifying\n * <var>srcOffset</var> and <var>destOffset</var>.\n * This method does not check to make sure your arrays\n * are large enough to accommodate <var>srcOffset</var> + 3 for\n * the <var>source</var> array or <var>destOffset</var> + 4 for\n * the <var>destination</var> array.\n * The actual number of significant bytes in your array is\n * given by <var>numSigBytes</var>.\n *\n * @param source the array to convert\n * @param srcOffset the index where conversion begins\n * @param numSigBytes the number of significant bytes in your array\n * @param destination the array to hold the conversion\n * @param destOffset the index where output will be put\n * @param alphabet is the encoding alphabet\n * @return the <var>destination</var> array\n * @since 1.3\n */\n", "func_signal": "private static byte[] encode3to4(byte[] source, int srcOffset,\n    int numSigBytes, byte[] destination, int destOffset, byte[] alphabet)", "code": "{\n  //           1         2         3\n  // 01234567890123456789012345678901 Bit position\n  // --------000000001111111122222222 Array position from threeBytes\n  // --------|    ||    ||    ||    | Six bit groups to index alphabet\n  //          >>18  >>12  >> 6  >> 0  Right shift necessary\n  //                0x3f  0x3f  0x3f  Additional AND\n\n  // Create buffer with zero-padding if there are only one or two\n  // significant bytes passed in the array.\n  // We have to shift left 24 in order to flush out the 1's that appear\n  // when Java treats a value as negative that is cast from a byte to an int.\n  int inBuff =\n      (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)\n          | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)\n          | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);\n\n  switch (numSigBytes) {\n    case 3:\n      destination[destOffset] = alphabet[(inBuff >>> 18)];\n      destination[destOffset + 1] = alphabet[(inBuff >>> 12) & 0x3f];\n      destination[destOffset + 2] = alphabet[(inBuff >>> 6) & 0x3f];\n      destination[destOffset + 3] = alphabet[(inBuff) & 0x3f];\n      return destination;\n    case 2:\n      destination[destOffset] = alphabet[(inBuff >>> 18)];\n      destination[destOffset + 1] = alphabet[(inBuff >>> 12) & 0x3f];\n      destination[destOffset + 2] = alphabet[(inBuff >>> 6) & 0x3f];\n      destination[destOffset + 3] = EQUALS_SIGN;\n      return destination;\n    case 1:\n      destination[destOffset] = alphabet[(inBuff >>> 18)];\n      destination[destOffset + 1] = alphabet[(inBuff >>> 12) & 0x3f];\n      destination[destOffset + 2] = EQUALS_SIGN;\n      destination[destOffset + 3] = EQUALS_SIGN;\n      return destination;\n    default:\n      return destination;\n  } // end switch\n}", "path": "src\\com\\suchagit\\android2cloud\\util\\Base64.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.billing);\n    mSku = \"quota_immunity_day\";\n\n    mHandler = new Handler();\n    mBillingPurchaseObserver = new BillingPurchaseObserver(mHandler);\n    mBillingService = new BillingService();\n    mBillingService.setContext(this);\n    \n    statusText = (TextView) findViewById(R.id.status);\n    throbber = (ProgressBar) findViewById(R.id.throbber);\n\n    // Check if billing is supported.\n    ResponseHandler.register(mBillingPurchaseObserver);\n    statusText.setText(\"Purchasing Quota Exemption\");\n    if (!mBillingService.checkBillingSupported()) {\n        showDialog(DIALOG_CANNOT_CONNECT_ID);\n    }\n    if (!mBillingService.requestPurchase(mSku, mPayloadContents)) {\n        showDialog(DIALOG_BILLING_NOT_SUPPORTED_ID);\n    }\n}", "path": "src\\com\\suchagit\\android2cloud\\Billing.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * Decodes data from Base64 notation.\n *\n * @param s the string to decode (decoded in default encoding)\n * @return the decoded data\n * @since 1.4\n */\n", "func_signal": "public static byte[] decode(String s) throws Base64DecoderException", "code": "{\n  byte[] bytes = s.getBytes();\n  return decode(bytes, 0, bytes.length);\n}", "path": "src\\com\\suchagit\\android2cloud\\util\\Base64.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * Try running the request directly if the service is already connected.\n * @return true if the request ran successfully; false if the service\n * is not connected or there was an error when trying to use it\n */\n", "func_signal": "public boolean runIfConnected()", "code": "{\n    if (Consts.DEBUG) {\n        Log.d(TAG, getClass().getSimpleName());\n    }\n    if (mService != null) {\n        try {\n            mRequestId = run();\n            if (Consts.DEBUG) {\n                Log.d(TAG, \"request id: \" + mRequestId);\n            }\n            if (mRequestId >= 0) {\n                mSentRequests.put(mRequestId, this);\n            }\n            return true;\n        } catch (RemoteException e) {\n            onRemoteException(e);\n        }\n    }\n    return false;\n}", "path": "src\\com\\suchagit\\android2cloud\\BillingService.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * Called when a remote exception occurs while trying to execute the\n * {@link #run()} method.  The derived class can override this to\n * execute exception-handling code.\n * @param e the exception\n */\n", "func_signal": "protected void onRemoteException(RemoteException e)", "code": "{\n    Log.w(TAG, \"remote billing service crashed\");\n    //error: billing_remote_exception_error\n    mService = null;\n}", "path": "src\\com\\suchagit\\android2cloud\\BillingService.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * Encodes a byte array into Base64 notation.\n *\n * @param source the data to convert\n * @param off offset in array where conversion should begin\n * @param len length of data to convert\n * @param alphabet is the encoding alphabet\n * @param maxLineLength maximum length of one line.\n * @return the BASE64-encoded byte array\n */\n", "func_signal": "public static byte[] encode(byte[] source, int off, int len, byte[] alphabet,\n    int maxLineLength)", "code": "{\n  int lenDiv3 = (len + 2) / 3; // ceil(len / 3)\n  int len43 = lenDiv3 * 4;\n  byte[] outBuff = new byte[len43 // Main 4:3\n      + (len43 / maxLineLength)]; // New lines\n\n  int d = 0;\n  int e = 0;\n  int len2 = len - 2;\n  int lineLength = 0;\n  for (; d < len2; d += 3, e += 4) {\n\n    // The following block of code is the same as\n    // encode3to4( source, d + off, 3, outBuff, e, alphabet );\n    // but inlined for faster encoding (~20% improvement)\n    int inBuff =\n        ((source[d + off] << 24) >>> 8)\n            | ((source[d + 1 + off] << 24) >>> 16)\n            | ((source[d + 2 + off] << 24) >>> 24);\n    outBuff[e] = alphabet[(inBuff >>> 18)];\n    outBuff[e + 1] = alphabet[(inBuff >>> 12) & 0x3f];\n    outBuff[e + 2] = alphabet[(inBuff >>> 6) & 0x3f];\n    outBuff[e + 3] = alphabet[(inBuff) & 0x3f];\n\n    lineLength += 4;\n    if (lineLength == maxLineLength) {\n      outBuff[e + 4] = NEW_LINE;\n      e++;\n      lineLength = 0;\n    } // end if: end of line\n  } // end for: each piece of array\n\n  if (d < len) {\n    encode3to4(source, d + off, len - d, outBuff, e, alphabet);\n\n    lineLength += 4;\n    if (lineLength == maxLineLength) {\n      // Add a last newline\n      outBuff[e + 4] = NEW_LINE;\n      e++;\n    }\n    e += 4;\n  }\n\n  assert (e == outBuff.length);\n  return outBuff;\n}", "path": "src\\com\\suchagit\\android2cloud\\util\\Base64.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * Called when this activity becomes visible.\n */\n", "func_signal": "@Override\nprotected void onStart()", "code": "{\n    super.onStart();\n    ResponseHandler.register(mBillingPurchaseObserver);\n}", "path": "src\\com\\suchagit\\android2cloud\\Billing.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * Unbinds from the MarketBillingService. Call this when the application\n * terminates to avoid leaking a ServiceConnection.\n */\n", "func_signal": "public void unbind()", "code": "{\n    try {\n        unbindService(this);\n    } catch (IllegalArgumentException e) {\n        // This might happen if the service was disconnected\n    }\n}", "path": "src\\com\\suchagit\\android2cloud\\BillingService.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * This is called when we are disconnected from the MarketBillingService.\n */\n", "func_signal": "public void onServiceDisconnected(ComponentName name)", "code": "{\n    Log.w(TAG, \"Billing service disconnected\");\n    mService = null;\n}", "path": "src\\com\\suchagit\\android2cloud\\BillingService.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * Decodes four bytes from array <var>source</var>\n * and writes the resulting bytes (up to three of them)\n * to <var>destination</var>.\n * The source and destination arrays can be manipulated\n * anywhere along their length by specifying\n * <var>srcOffset</var> and <var>destOffset</var>.\n * This method does not check to make sure your arrays\n * are large enough to accommodate <var>srcOffset</var> + 4 for\n * the <var>source</var> array or <var>destOffset</var> + 3 for\n * the <var>destination</var> array.\n * This method returns the actual number of bytes that\n * were converted from the Base64 encoding.\n *\n *\n * @param source the array to convert\n * @param srcOffset the index where conversion begins\n * @param destination the array to hold the conversion\n * @param destOffset the index where output will be put\n * @param decodabet the decodabet for decoding Base64 content\n * @return the number of decoded bytes converted\n * @since 1.3\n */\n", "func_signal": "private static int decode4to3(byte[] source, int srcOffset,\n    byte[] destination, int destOffset, byte[] decodabet)", "code": "{\n  // Example: Dk==\n  if (source[srcOffset + 2] == EQUALS_SIGN) {\n    int outBuff =\n        ((decodabet[source[srcOffset]] << 24) >>> 6)\n            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);\n\n    destination[destOffset] = (byte) (outBuff >>> 16);\n    return 1;\n  } else if (source[srcOffset + 3] == EQUALS_SIGN) {\n    // Example: DkL=\n    int outBuff =\n        ((decodabet[source[srcOffset]] << 24) >>> 6)\n            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)\n            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);\n\n    destination[destOffset] = (byte) (outBuff >>> 16);\n    destination[destOffset + 1] = (byte) (outBuff >>> 8);\n    return 2;\n  } else {\n    // Example: DkLE\n    int outBuff =\n        ((decodabet[source[srcOffset]] << 24) >>> 6)\n            | ((decodabet[source[srcOffset + 1]] << 24) >>> 12)\n            | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)\n            | ((decodabet[source[srcOffset + 3]] << 24) >>> 24);\n\n    destination[destOffset] = (byte) (outBuff >> 16);\n    destination[destOffset + 1] = (byte) (outBuff >> 8);\n    destination[destOffset + 2] = (byte) (outBuff);\n    return 3;\n  }\n}", "path": "src\\com\\suchagit\\android2cloud\\util\\Base64.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * Binds to the MarketBillingService and returns true if the bind\n * succeeded.\n * @return true if the bind succeeded; false otherwise\n */\n", "func_signal": "private boolean bindToMarketBillingService()", "code": "{\n    try {\n        if (Consts.DEBUG) {\n            Log.i(TAG, \"binding to Market billing service\");\n        }\n        boolean bindResult = bindService(\n                new Intent(Consts.MARKET_BILLING_SERVICE_ACTION),\n                this,  // ServiceConnection.\n                Context.BIND_AUTO_CREATE);\n\n        if (bindResult) {\n            return true;\n        } else {\n            Log.e(TAG, \"Could not bind to service.\");\n        }\n    } catch (SecurityException e) {\n        Log.e(TAG, \"Security exception: \" + e);\n        //error: billing_security_exception_error\n    }\n    return false;\n}", "path": "src\\com\\suchagit\\android2cloud\\BillingService.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "// Converts from an ordinal value to the PurchaseState\n", "func_signal": "public static PurchaseState valueOf(int index)", "code": "{\n    PurchaseState[] values = PurchaseState.values();\n    if (index < 0 || index >= values.length) {\n        return CANCELED;\n    }\n    return values[index];\n}", "path": "src\\com\\suchagit\\android2cloud\\Consts.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * Encodes a byte array into Base64 notation.\n *\n * @param source the data to convert\n * @param off offset in array where conversion should begin\n * @param len length of data to convert\n * @param alphabet the encoding alphabet\n * @param doPadding is {@code true} to pad result with '=' chars\n * if it does not fall on 3 byte boundaries\n * @since 1.4\n */\n", "func_signal": "public static String encode(byte[] source, int off, int len, byte[] alphabet,\n    boolean doPadding)", "code": "{\n  byte[] outBuff = encode(source, off, len, alphabet, Integer.MAX_VALUE);\n  int outLen = outBuff.length;\n\n  // If doPadding is false, set length to truncate '='\n  // padding characters\n  while (doPadding == false && outLen > 0) {\n    if (outBuff[outLen - 1] != '=') {\n      break;\n    }\n    outLen -= 1;\n  }\n\n  return new String(outBuff, 0, outLen);\n}", "path": "src\\com\\suchagit\\android2cloud\\util\\Base64.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * Run the request, starting the connection if necessary.\n * @return true if the request was executed or queued; false if there\n * was an error starting the connection\n */\n", "func_signal": "public boolean runRequest()", "code": "{\n    if (runIfConnected()) {\n        return true;\n    }\n\n    if (bindToMarketBillingService()) {\n        // Add a pending request to run when the service is connected.\n        mPendingRequests.add(this);\n        return true;\n    }\n    return false;\n}", "path": "src\\com\\suchagit\\android2cloud\\BillingService.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * This is called when we are connected to the MarketBillingService.\n * This runs in the main UI thread.\n */\n", "func_signal": "public void onServiceConnected(ComponentName name, IBinder service)", "code": "{\n    if (Consts.DEBUG) {\n        Log.d(TAG, \"Billing service connected\");\n    }\n    mService = IMarketBillingService.Stub.asInterface(service);\n    runPendingRequests();\n}", "path": "src\\com\\suchagit\\android2cloud\\BillingService.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/** Generates a nonce (a random number used once). */\n", "func_signal": "public static long generateNonce()", "code": "{\n    long nonce = RANDOM.nextLong();\n    sKnownNonces.add(nonce);\n    return nonce;\n}", "path": "src\\com\\suchagit\\android2cloud\\util\\Security.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * The {@link BillingReceiver} sends messages to this service using intents.\n * Each intent has an action and some extra arguments specific to that action.\n * @param intent the intent containing one of the supported actions\n * @param startId an identifier for the invocation instance of this service\n */\n", "func_signal": "public void handleCommand(Intent intent, int startId)", "code": "{\n    String action = intent.getAction();\n    if (Consts.DEBUG) {\n        Log.i(TAG, \"handleCommand() action: \" + action);\n    }\n    if (Consts.ACTION_CONFIRM_NOTIFICATION.equals(action)) {\n        String[] notifyIds = intent.getStringArrayExtra(Consts.NOTIFICATION_ID);\n        confirmNotifications(startId, notifyIds);\n    } else if (Consts.ACTION_GET_PURCHASE_INFORMATION.equals(action)) {\n        String notifyId = intent.getStringExtra(Consts.NOTIFICATION_ID);\n        getPurchaseInformation(startId, new String[] { notifyId });\n    } else if (Consts.ACTION_PURCHASE_STATE_CHANGED.equals(action)) {\n        String signedData = intent.getStringExtra(Consts.INAPP_SIGNED_DATA);\n        String signature = intent.getStringExtra(Consts.INAPP_SIGNATURE);\n        purchaseStateChanged(startId, signedData, signature);\n    } else if (Consts.ACTION_RESPONSE_CODE.equals(action)) {\n        long requestId = intent.getLongExtra(Consts.INAPP_REQUEST_ID, -1);\n        int responseCodeIndex = intent.getIntExtra(Consts.INAPP_RESPONSE_CODE,\n                ResponseCode.RESULT_ERROR.ordinal());\n        ResponseCode responseCode = ResponseCode.valueOf(responseCodeIndex);\n        checkResponseCode(requestId, responseCode);\n    }\n}", "path": "src\\com\\suchagit\\android2cloud\\BillingService.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * Decodes data from web safe Base64 notation.\n * Web safe encoding uses '-' instead of '+', '_' instead of '/'\n *\n * @param s the string to decode (decoded in default encoding)\n * @return the decoded data\n */\n", "func_signal": "public static byte[] decodeWebSafe(String s) throws Base64DecoderException", "code": "{\n  byte[] bytes = s.getBytes();\n  return decodeWebSafe(bytes, 0, bytes.length);\n}", "path": "src\\com\\suchagit\\android2cloud\\util\\Base64.java", "repo_name": "2cloud/android2cloud", "stars": 19, "license": "mit", "language": "java", "size": 2545}
{"docstring": "/**\n * Construct a new registry with the default message factories registered\n * @return a message factory registry\n */\n", "func_signal": "public static MessageFactoryRegistry newDefaultRegistry()", "code": "{\n    MessageFactoryRegistry mf = new MessageFactoryRegistry();\n    mf.registerFactory(\"text/plain\", new JMSTextMessageFactory());\n    mf.registerFactory(\"text/xml\", new JMSTextMessageFactory());\n    mf.registerFactory(\"application/octet-stream\", new JMSBytesMessageFactory());\n    mf.registerFactory(JMSObjectMessage.MIME_TYPE, new JMSObjectMessageFactory());\n    mf.registerFactory(null, new JMSBytesMessageFactory());\n    return mf;\n}", "path": "src\\org\\openamq\\client\\message\\MessageFactoryRegistry.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n * Create content bodies. This will split a large message into numerous bodies depending on the negotiated\n * maximum frame size.\n * @param payload\n * @return the array of content bodies\n */\n", "func_signal": "private ContentBody[] createContentBodies(ByteBuffer payload)", "code": "{\n    if (payload == null)\n    {\n        return null;\n    }\n    else if (payload.remaining() == 0)\n    {\n        return new ContentBody[0];\n    }\n    // we substract one from the total frame maximum size to account for the end of frame marker in a body frame\n    // (0xCE byte).\n    int dataLength = payload.remaining();\n    final long framePayloadMax = _session.getAMQConnection().getMaximumFrameSize() - 1;\n    int lastFrame = (dataLength % framePayloadMax) > 0 ? 1 : 0;\n    int frameCount = (int) (dataLength/framePayloadMax) + lastFrame;\n    final ContentBody[] bodies = new ContentBody[frameCount];\n\n    if (frameCount == 1)\n    {\n        bodies[0] = new ContentBody();\n        bodies[0].payload = payload;\n    }\n    else\n    {\n        long remaining = dataLength;\n        for (int i = 0; i < bodies.length; i++)\n        {\n            bodies[i] = new ContentBody();\n            payload.position((int)framePayloadMax * i);\n            int length = (remaining >= framePayloadMax) ? (int)framePayloadMax : (int)remaining;\n            payload.limit(payload.position() + length);\n            bodies[i].payload = payload.slice();\n            remaining -= length;\n        }\n    }\n    return bodies;\n}", "path": "src\\org\\openamq\\client\\BasicMessageProducer.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n * We reset the stream before and after reading the data. This means that toString() will always output\n * the entire message and also that the caller can then immediately start reading as if toString() had\n * never been called.\n * @return\n * @throws IOException\n */\n", "func_signal": "private String getText() throws IOException", "code": "{\n    // this will use the default platform encoding\n    if (_data == null)\n    {\n        return null;\n    }\n    int pos = _data.position();\n    _data.rewind();\n    // one byte left is for the end of frame marker\n    if (_data.remaining() == 0)\n    {\n        // this is really redundant since pos must be zero\n        _data.position(pos);\n        return null;\n    }\n    else\n    {\n        String data = _data.getString(Charset.forName(\"UTF8\").newDecoder());\n        _data.position(pos);\n        return data;\n    }\n}", "path": "src\\org\\openamq\\client\\message\\JMSBytesMessage.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n * Creates a new instance.\n */\n", "func_signal": "public SocketSessionImpl(\n        IoService manager, Set managedSessions,\n        IoSessionConfig config,\n        SocketChannel ch, IoHandler defaultHandler,\n        SocketAddress serviceAddress )", "code": "{\n    this.manager = manager;\n    this.managedSessions = managedSessions;\n    this.ioProcessor = SocketIoProcessor.getInstance();\n    this.filterChain = new SocketFilterChain( this );\n    this.ch = ch;\n    this.writeRequestQueue = new Queue();\n    this.handler = defaultHandler;\n    this.remoteAddress = ch.socket().getRemoteSocketAddress();\n    this.localAddress = ch.socket().getLocalSocketAddress();\n    this.serviceAddress = serviceAddress;\n\n    // Apply the initial session settings\n    if( config instanceof SocketSessionConfig )\n    {\n        SocketSessionConfig cfg = ( SocketSessionConfig ) config;\n        this.config.setKeepAlive( cfg.isKeepAlive() );\n        this.config.setOobInline( cfg.isOobInline() );\n        this.config.setReceiveBufferSize( cfg.getReceiveBufferSize() );\n        this.readBufferSize = cfg.getReceiveBufferSize();\n        this.config.setReuseAddress( cfg.isReuseAddress() );\n        this.config.setSendBufferSize( cfg.getSendBufferSize() );\n        this.config.setSoLinger( cfg.getSoLinger() );\n        this.config.setTcpNoDelay( cfg.isTcpNoDelay() );\n\n        if( this.config.getTrafficClass() != cfg.getTrafficClass() )\n        {\n            this.config.setTrafficClass( cfg.getTrafficClass() );\n        }\n    }\n}", "path": "src\\org\\openamq\\nio\\SocketSessionImpl.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "//Job.JobCompletionHandler\n", "func_signal": "public void completed(IoSession session, Job job)", "code": "{\n    if (job.isComplete())\n    {\n        job.release();\n        if (!job.isReferenced())\n        {\n            _jobs.remove(session);\n        }\n    }\n    else\n    {\n        if (job.activate())\n        {\n            _poolReference.getPool().execute(job);\n        }\n    }\n}", "path": "src\\org\\openamq\\pool\\PoolingFilter.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n * The caller of this method must hold the failover mutex.\n * @param destination\n * @param message\n * @param deliveryMode\n * @param priority\n * @param timeToLive\n * @param mandatory\n * @param immediate\n * @throws JMSException\n */\n", "func_signal": "protected void sendImpl(AMQDestination destination, AbstractJMSMessage message, int deliveryMode, int priority,\n                      long timeToLive, boolean mandatory, boolean immediate, boolean wait) throws JMSException", "code": "{\n    AMQFrame publishFrame = BasicPublishBody.createAMQFrame(_channelId, 0, destination.getExchangeName(),\n                                                            destination.getRoutingKey(), mandatory, immediate);\n\n    long currentTime = 0;\n    if (!_disableTimestamps)\n    {\n        currentTime = System.currentTimeMillis();\n        message.setJMSTimestamp(currentTime);\n    }\n    //\n    // Very nasty temporary hack for GRM-206. Will be altered ASAP.\n    //\n    if(message instanceof JMSBytesMessage)\n    {\n        JMSBytesMessage msg = (JMSBytesMessage) message;\n        if(!msg.isReadable())\n        {\n            msg.reset();\n        }\n    }\n    ByteBuffer payload = message.getData();\n    BasicContentHeaderProperties contentHeaderProperties = message.getJmsContentHeaderProperties();\n\n    if (timeToLive > 0)\n    {\n        if (!_disableTimestamps)\n        {\n            contentHeaderProperties.setExpiration(currentTime + timeToLive);\n        }\n    }\n    else\n    {\n        if (!_disableTimestamps)\n        {\n            contentHeaderProperties.setExpiration(0);\n        }\n    }\n    contentHeaderProperties.setDeliveryMode((byte) deliveryMode);\n    contentHeaderProperties.setPriority((byte) priority);\n\n    int size = payload.limit();\n    ContentBody[] contentBodies = createContentBodies(payload);\n    AMQFrame[] frames = new AMQFrame[2 + contentBodies.length];\n    for (int i = 0; i < contentBodies.length; i++)\n    {\n        frames[2 + i] = ContentBody.createAMQFrame(_channelId, contentBodies[i]);\n    }\n    if (contentBodies.length > 0 && _logger.isDebugEnabled())\n    {\n        _logger.debug(\"Sending content body frames to \" + destination);\n    }\n\n    // weight argument of zero indicates no child content headers, just bodies\n    AMQFrame contentHeaderFrame = ContentHeaderBody.createAMQFrame(_channelId, BasicConsumeBody.CLASS_ID, 0,\n                                                                   contentHeaderProperties,\n                                                                   size);\n    if (_logger.isDebugEnabled())\n    {\n        _logger.debug(\"Sending content header frame to \" + destination);\n    }\n\n    frames[0] = publishFrame;\n    frames[1] = contentHeaderFrame;\n    CompositeAMQDataBlock compositeFrame = new CompositeAMQDataBlock(frames);\n    _protocolHandler.writeFrame(compositeFrame, wait);\n}", "path": "src\\org\\openamq\\client\\BasicMessageProducer.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n * Create a reference to a queue. Note this does not actually imply the queue exists.\n * @param destinationName the queue name\n * @param queueName the queue name\n * @param exclusive true if the queue should only permit a single consumer\n * @param autoDelete true if the queue should be deleted automatically when the last consumers detaches\n */\n", "func_signal": "public AMQQueue(String destinationName, String queueName, boolean exclusive, boolean autoDelete)", "code": "{\n    super(AMQDestination.QUEUE_EXCHANGE_NAME, AMQDestination.QUEUE_EXCHANGE_CLASS, destinationName, exclusive,\n          autoDelete, queueName);\n}", "path": "src\\org\\openamq\\client\\AMQQueue.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "// LifeCycle methods\n", "func_signal": "public void init()", "code": "{\n    _logger.info(\"Init called on PoolingFilter \" + toString());\n    // called when the filter is initialised in the chain. If the reference count is\n    // zero this acquire will initialise the pool\n    _poolReference.acquireExecutorService();\n}", "path": "src\\org\\openamq\\pool\\PoolingFilter.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n * @see javax.jms.TemporaryTopic#delete()\n */\n", "func_signal": "public void delete() throws JMSException", "code": "{\n    throw new UnsupportedOperationException(\"Delete not supported, \" +\n            \"will auto-delete when connection closed\");\n}", "path": "src\\org\\openamq\\client\\AMQTemporaryTopic.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n * Create a queue with a specified name.\n *\n * @param name the destination name (used in the routing key)\n * @param temporary if true the broker will generate a queue name, also if true then the queue is autodeleted\n * and exclusive\n */\n", "func_signal": "public AMQQueue(String name, boolean temporary)", "code": "{\n    // queue name is set to null indicating that the broker assigns a name in the case of temporary queues\n    // temporary queues are typically used as response queues\n    this(name, temporary?null:name, temporary, temporary);\n    _isDurable = !temporary;\n}", "path": "src\\org\\openamq\\client\\AMQQueue.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n * Create a message. This looks up the MIME type from the content header and instantiates the appropriate\n * concrete message type.\n * @param deliveryTag the AMQ message id\n * @param redelivered true if redelivered\n * @param contentHeader the content header that was received\n * @param bodies a list of ContentBody instances\n * @return the message.\n * @throws AMQException\n * @throws JMSException\n */\n", "func_signal": "public AbstractJMSMessage createMessage(long deliveryTag, boolean redelivered,\n                                        ContentHeaderBody contentHeader,\n                                        List bodies) throws AMQException, JMSException", "code": "{\n    BasicContentHeaderProperties properties =  (BasicContentHeaderProperties) contentHeader.properties;\n    MessageFactory mf = (MessageFactory) _mimeToFactoryMap.get(properties.getContentType());\n    if (mf == null)\n    {\n        throw new AMQException(\"Unsupport MIME type of \" + properties.getContentType());\n    }\n    else\n    {\n        return mf.createMessage(deliveryTag, redelivered, contentHeader, bodies);\n    }\n}", "path": "src\\org\\openamq\\client\\message\\MessageFactoryRegistry.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n * Construct a new field table.\n * @param buffer the buffer from which to read data. The length byte must be read already\n * @param length the length of the field table. Must be > 0.\n * @throws AMQFrameDecodingException if there is an error decoding the table\n */\n", "func_signal": "public FieldTable(ByteBuffer buffer, long length) throws AMQFrameDecodingException", "code": "{\n    super();\n    assert length > 0;\n    _encodedSize = length;\n    int sizeRead = 0;\n    while (sizeRead < _encodedSize)\n    {\n        int sizeRemaining = buffer.remaining();\n        final String key = EncodingUtils.readShortString(buffer);\n        // TODO: use proper charset decoder\n        byte iType = buffer.get();\n        final char type = (char)iType;\n        Object value;\n        switch (type)\n        {\n            case 'S':\n                value = EncodingUtils.readLongString(buffer);\n                break;\n            case 'I':\n                value = new Long(buffer.getUnsignedInt());\n                break;\n            case 'V':\n                value = null;\n                break;\n            default:\n                String msg = \"Unsupported field table type: \" + type;\n                //some extra debug information...\n                msg += \" (\" + iType + \"), length=\" + length + \", sizeRead=\" + sizeRead + \", sizeRemaining=\" + sizeRemaining;\n                throw new AMQFrameDecodingException(msg);\n        }\n        sizeRead += (sizeRemaining - buffer.remaining());\n        // we deliberately want to call put in the parent class since we do\n        // not need to do the size calculations\n        super.put(key, value);\n    }\n}", "path": "src\\org\\openamq\\framing\\FieldTable.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n *\n * @param buffer\n * @param channel unsigned short\n * @param bodySize unsigned integer\n * @param bodyFactory\n * @throws AMQFrameDecodingException\n */\n", "func_signal": "public void populateFromBuffer(ByteBuffer buffer, int channel, long bodySize, BodyFactory bodyFactory)\n        throws AMQFrameDecodingException", "code": "{\n    this.channel = channel;\n    bodyFrame = bodyFactory.createBody(buffer);\n    bodyFrame.populateFromBuffer(buffer, bodySize);\n}", "path": "src\\org\\openamq\\framing\\AMQFrame.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n * Create a reference to a queue. Note this does not actually imply the queue exists.\n * @param destinationName the queue name\n * @param queueName the queue name\n * @param exchangeName the exchange name\n * @param exchangeClass the exchange type\n * @param durable true if the queue should survive server restart\n * @param exclusive true if the queue should only permit a single consumer\n * @param autoDelete true if the queue should be deleted automatically when the last consumers detaches\n */\n", "func_signal": "public AMQQueue(String destinationName, String queueName, String exchangeName, String exchangeClass, String routingKey, boolean durable, boolean exclusive, boolean autoDelete)", "code": "{\n    super(exchangeName, exchangeClass, destinationName, durable, exclusive,\n          autoDelete, queueName);\n    if (exchangeClass == \"fanout\")\n    {\n        _routingKey = new String(\"\");\n    }\n    else if (routingKey != null) \n    {\n       _routingKey = routingKey; \n    }\n}", "path": "src\\org\\openamq\\client\\AMQQueue.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n * Create a reference to a queue. Note this does not actually imply the queue exists.\n * @param destinationName the queue name\n * @param queueName the queue name\n * @param exchangeName the exchange name\n * @param exchangeClass the exchange type\n * @param exclusive true if the queue should only permit a single consumer\n * @param autoDelete true if the queue should be deleted automatically when the last consumers detaches\n */\n", "func_signal": "public AMQQueue(String destinationName, String queueName, String exchangeName, String exchangeClass, String routingKey, boolean exclusive, boolean autoDelete)", "code": "{\n    super(exchangeName, exchangeClass, destinationName, exclusive,\n          autoDelete, queueName);\n    if (exchangeClass == \"fanout\")\n    {\n        _routingKey = new String(\"\");\n    }\n    else if (routingKey != null) \n    {\n       _routingKey = routingKey; \n    }\n}", "path": "src\\org\\openamq\\client\\AMQQueue.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n * This method is called by the MINA dispatching thread. Note that it could\n * be called before blockForFrame() has been called.\n * @param evt the frame event\n * @return true if the listener has dealt with this frame\n * @throws AMQException\n */\n", "func_signal": "public boolean methodReceived(AMQMethodEvent evt) throws AMQException", "code": "{\n    AMQMethodBody method = evt.getMethod();\n\n    try\n    {\n        boolean ready = (evt.getChannelId() == _channelId) && processMethod(evt.getChannelId(), method);\n        if (ready)\n        {\n            // we only update the flag from inside the synchronized block\n            // so that the blockForFrame method cannot \"miss\" an update - it\n            // will only ever read the flag from within the synchronized block\n            synchronized (_lock)\n            {\n                _doneEvt = evt;\n                _ready = ready;\n                _lock.notify();\n            }\n        }\n        return ready;\n    }\n    catch (AMQException e)\n    {\n        error(e);\n        // we rethrow the error here, and the code in the frame dispatcher will go round\n        // each listener informing them that an exception has been thrown\n        throw e;\n    }\n}", "path": "src\\org\\openamq\\client\\protocol\\BlockingMethodFrameListener.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n * The encoded block will be logically first before the AMQDataBlocks which are encoded\n * into the buffer afterwards.\n * @param encodedBlock already-encoded data\n * @param blocks some blocks to be encoded.\n */\n", "func_signal": "public CompositeAMQDataBlock(ByteBuffer encodedBlock, AMQDataBlock[] blocks)", "code": "{\n    this(blocks);\n    _encodedBlock = encodedBlock;\n}", "path": "src\\org\\openamq\\framing\\CompositeAMQDataBlock.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n * This method is called by the thread that wants to wait for a frame.\n */\n", "func_signal": "public AMQMethodEvent blockForFrame() throws AMQException", "code": "{\n    synchronized (_lock)\n    {\n        while (!_ready)\n        {\n            try\n            {\n                _lock.wait();\n            }\n            catch (InterruptedException e)\n            {\n                // IGNORE\n            }\n        }\n    }\n    if (_error != null)\n    {\n        if (_error instanceof AMQException)\n        {\n            throw (AMQException)_error;\n        }\n        else\n        {\n            throw new AMQException(\"Woken up due to exception\", _error);\n        }\n    }\n\n    return _doneEvt;\n}", "path": "src\\org\\openamq\\client\\protocol\\BlockingMethodFrameListener.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n * This is a callback, called by the MINA dispatcher thread only. It is also called from within this\n * class to avoid code repetition but again is only called by the MINA dispatcher thread.\n * @param e\n */\n", "func_signal": "public void error(Exception e)", "code": "{\n    // set the error so that the thread that is blocking (against blockForFrame())\n    // can pick up the exception and rethrow to the caller\n    _error = e;\n    synchronized (_lock)\n    {\n        _ready = true;\n        _lock.notify();\n    }\n}", "path": "src\\org\\openamq\\client\\protocol\\BlockingMethodFrameListener.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "/**\n * Create a reference to a queue. Note this does not actually imply the queue exists.\n * @param destinationName the queue name\n * @param queueName the queue name\n * @param exchangeName the exchange name\n * @param exchangeClass the exchange type\n * @param exchangeDurable true if the exchange should survive server restart\n * @param exchangeAutoDelete true if the exchange should be deleted automatically when unused\n * @param durable true if the queue should survive server restart\n * @param exclusive true if the queue should only permit a single consumer\n * @param autoDelete true if the queue should be deleted automatically when the last consumers detaches\n */\n", "func_signal": "public AMQQueue(String destinationName, String queueName, String exchangeName, String exchangeClass, boolean exchangeDurable, boolean exchangeAutoDelete, String routingKey, boolean durable, boolean exclusive, boolean autoDelete)", "code": "{\n    super(exchangeName, exchangeClass, exchangeDurable, exchangeAutoDelete, destinationName, durable, exclusive,\n          autoDelete, queueName);\n    if (exchangeClass == \"fanout\")\n    {\n        _routingKey = new String(\"\");\n    }\n    else if (routingKey != null) \n    {\n       _routingKey = routingKey; \n    }\n}", "path": "src\\org\\openamq\\client\\AMQQueue.java", "repo_name": "imatix/openamq-jms", "stars": 24, "license": "other", "language": "java", "size": 3422}
{"docstring": "//\n", "func_signal": "private static String cachePathWithName(String name, boolean externalStorage, String packageName)", "code": "{\n\t\tFile newFile = null;\n\t\t\n\t\tif (!externalStorage) {\n\t\t\tString tempPath = String.format(kDefaultBaseIntDirCachePath, packageName);\n\t\t\tnewFile = new File(tempPath);\t\n\t\t\tif (!newFile.getParentFile().exists()) {\n\t\t\t\texternalStorage = true;\n\t\t\t} else {\n\t\t\t\tnewFile = new File(newFile, name);\n\t\t\t}\n\t\t}\n\t\tif (externalStorage) {\n\t\t\tnewFile = new File(kDefaultBaseExtDirCachePath, name);\n\t\t}\n\t\tif (!newFile.exists()) {\n\t\t\tnewFile.mkdirs();\n\t\t}\n\t\tString p = newFile.getPath();\n\t\tmExternalStorage = externalStorage;\n\t\treturn p;\n\t}", "path": "three20\\src\\com\\three20\\network\\TTURLCache.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/**\n * Computes RFC 2104-compliant HMAC signature.\n * @param data The data to be signed.\n * @param key The signing key.\n * @return The Base64 encoded string of HMAC signature.\n */\n", "func_signal": "public static String getSignatureBase64String(String data, String key)", "code": "{\n\tbyte[] hmac = HMAC.getSignatureBytes(data, key);\n\t// base64-encode the hmac\n\tString result = new String(Base64Coder.encode(hmac));\n\treturn result;\n}", "path": "three20\\src\\com\\three20\\util\\HMAC.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/**\n * Creates an object containing the contents of the specified file. Errors\n * reading the file will produce an empty or partially blank array.\n */\n", "func_signal": "public NSData(File aFile)", "code": "{\n\tint len = (int) aFile.length();\n\tbyte[] data = new byte[len];\n\ttry {\n\t\tnew java.io.FileInputStream(aFile).read(data);\n\t} catch (Exception exc) {\n\t\t// produce an empty or partially blank array\n\t}\n\tbytes = data;\n}", "path": "three20\\src\\com\\three20\\ns\\NSData.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/**\n * Compares this date to the specified date and returns the earlier date.\n * Unspecified which is returned if both are equal.\n */\n", "func_signal": "public NSDate earlierDate(NSDate aDate)", "code": "{\n\tif (aDate == null)\n\t\treturn this;\n\tif (after(aDate))\n\t\treturn aDate;\n\treturn this;\n}", "path": "three20\\src\\com\\three20\\ns\\NSDate.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/**\n * Encodes a byte array into Base 64 format and breaks the output into\n * lines.\n * \n * @param in\n *            An array containing the data bytes to be encoded.\n * @param iOff\n *            Offset of the first byte in <code>in</code> to be processed.\n * @param iLen\n *            Number of bytes to be processed in <code>in</code>, starting\n *            at <code>iOff</code>.\n * @param lineLen\n *            Line length for the output data. Should be a multiple of 4.\n * @param lineSeparator\n *            The line separator to be used to separate the output lines.\n * @return A String containing the Base64 encoded data, broken into lines.\n */\n", "func_signal": "public static String encodeLines(byte[] in, int iOff, int iLen,\n\t\tint lineLen, String lineSeparator)", "code": "{\n\tint blockLen = (lineLen * 3) / 4;\n\tif (blockLen <= 0)\n\t\tthrow new IllegalArgumentException();\n\tint lines = (iLen + blockLen - 1) / blockLen;\n\tint bufLen = ((iLen + 2) / 3) * 4 + lines * lineSeparator.length();\n\tStringBuilder buf = new StringBuilder(bufLen);\n\tint ip = 0;\n\twhile (ip < iLen) {\n\t\tint l = Math.min(iLen - ip, blockLen);\n\t\tbuf.append(encode(in, iOff + ip, l));\n\t\tbuf.append(lineSeparator);\n\t\tip += l;\n\t}\n\treturn buf.toString();\n}", "path": "three20\\src\\com\\three20\\util\\Base64Coder.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/**\n * Encodes a byte array into Base64 format. No blanks or line breaks are\n * inserted in the output.\n * \n * @param in\n *            An array containing the data bytes to be encoded.\n * @param iOff\n *            Offset of the first byte in <code>in</code> to be processed.\n * @param iLen\n *            Number of bytes to process in <code>in</code>, starting at\n *            <code>iOff</code>.\n * @return A character array containing the Base64 encoded data.\n */\n", "func_signal": "public static char[] encode(byte[] in, int iOff, int iLen)", "code": "{\n\tint oDataLen = (iLen * 4 + 2) / 3; // output length without padding\n\tint oLen = ((iLen + 2) / 3) * 4; // output length including padding\n\tchar[] out = new char[oLen];\n\tint ip = iOff;\n\tint iEnd = iOff + iLen;\n\tint op = 0;\n\twhile (ip < iEnd) {\n\t\tint i0 = in[ip++] & 0xff;\n\t\tint i1 = ip < iEnd ? in[ip++] & 0xff : 0;\n\t\tint i2 = ip < iEnd ? in[ip++] & 0xff : 0;\n\t\tint o0 = i0 >>> 2;\n\t\tint o1 = ((i0 & 3) << 4) | (i1 >>> 4);\n\t\tint o2 = ((i1 & 0xf) << 2) | (i2 >>> 6);\n\t\tint o3 = i2 & 0x3F;\n\t\tout[op++] = map1[o0];\n\t\tout[op++] = map1[o1];\n\t\tout[op] = op < oDataLen ? map1[o2] : '=';\n\t\top++;\n\t\tout[op] = op < oDataLen ? map1[o3] : '=';\n\t\top++;\n\t}\n\treturn out;\n}", "path": "three20\\src\\com\\three20\\util\\Base64Coder.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/**\n * Decodes a byte array from Base64 format. No blanks or line breaks are\n * allowed within the Base64 encoded input data.\n * \n * @param in\n *            A character array containing the Base64 encoded data.\n * @param iOff\n *            Offset of the first character in <code>in</code> to be\n *            processed.\n * @param iLen\n *            Number of characters to process in <code>in</code>, starting\n *            at <code>iOff</code>.\n * @return An array containing the decoded data bytes.\n * @throws IllegalArgumentException\n *             If the input is not valid Base64 encoded data.\n */\n", "func_signal": "public static byte[] decode(char[] in, int iOff, int iLen)", "code": "{\n\tif (iLen % 4 != 0)\n\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"Length of Base64 encoded input string is not a multiple of 4.\");\n\twhile (iLen > 0 && in[iOff + iLen - 1] == '=')\n\t\tiLen--;\n\tint oLen = (iLen * 3) / 4;\n\tbyte[] out = new byte[oLen];\n\tint ip = iOff;\n\tint iEnd = iOff + iLen;\n\tint op = 0;\n\twhile (ip < iEnd) {\n\t\tint i0 = in[ip++];\n\t\tint i1 = in[ip++];\n\t\tint i2 = ip < iEnd ? in[ip++] : 'A';\n\t\tint i3 = ip < iEnd ? in[ip++] : 'A';\n\t\tif (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Illegal character in Base64 encoded data.\");\n\t\tint b0 = map2[i0];\n\t\tint b1 = map2[i1];\n\t\tint b2 = map2[i2];\n\t\tint b3 = map2[i3];\n\t\tif (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Illegal character in Base64 encoded data.\");\n\t\tint o0 = (b0 << 2) | (b1 >>> 4);\n\t\tint o1 = ((b1 & 0xf) << 4) | (b2 >>> 2);\n\t\tint o2 = ((b2 & 3) << 6) | b3;\n\t\tout[op++] = (byte) o0;\n\t\tif (op < oLen)\n\t\t\tout[op++] = (byte) o1;\n\t\tif (op < oLen)\n\t\t\tout[op++] = (byte) o2;\n\t}\n\treturn out;\n}", "path": "three20\\src\\com\\three20\\util\\Base64Coder.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/**\n * Represents the specified number of seconds from the current date.\n */\n", "func_signal": "public NSDate(double seconds)", "code": "{\n\tsuper((long) new NSDate().getTime()\n\t\t\t+ timeIntervalToMilliseconds(seconds));\n}", "path": "three20\\src\\com\\three20\\ns\\NSDate.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/**\n * Returns the interval between this date and 1 January 2001 GMT.\n */\n", "func_signal": "public double timeIntervalSinceReferenceDate()", "code": "{\n\tGregorianCalendar referenceDate = new GregorianCalendar(TimeZone\n\t\t\t.getTimeZone(\"GMT\"));\n\treferenceDate.set(2001, 0, 0, 0, 0, 0);\n\treturn timeIntervalSinceDate(referenceDate.getTime());\n}", "path": "three20\\src\\com\\three20\\ns\\NSDate.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/**\n * Sets the contained data.\n */\n", "func_signal": "public void setBytes(byte[] data)", "code": "{\n\tbytes = new byte[data.length];\n\tfor (int i = 0; i < data.length; i++) {\n\t\tbytes[i] = data[i];\n\t}\n}", "path": "three20\\src\\com\\three20\\ns\\NSData.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/**\n * Decodes a byte array from Base64 format and ignores line separators, tabs\n * and blanks. CR, LF, Tab and Space characters are ignored in the input\n * data. This method is compatible with\n * <code>sun.misc.BASE64Decoder.decodeBuffer(String)</code>.\n * \n * @param s\n *            A Base64 String to be decoded.\n * @return An array containing the decoded data bytes.\n * @throws IllegalArgumentException\n *             If the input is not valid Base64 encoded data.\n */\n", "func_signal": "public static byte[] decodeLines(String s)", "code": "{\n\tchar[] buf = new char[s.length()];\n\tint p = 0;\n\tfor (int ip = 0; ip < s.length(); ip++) {\n\t\tchar c = s.charAt(ip);\n\t\tif (c != ' ' && c != '\\r' && c != '\\n' && c != '\\t')\n\t\t\tbuf[p++] = c;\n\t}\n\treturn decode(buf, 0, p);\n}", "path": "three20\\src\\com\\three20\\util\\Base64Coder.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/**\n * @return the shared cache\n */\n", "func_signal": "public static TTURLCache getSharedCache()", "code": "{\n\tif (sharedCacheInstance == null) {\n\t\tsharedCacheInstance = new TTURLCache();\n\t}\n\treturn sharedCacheInstance;\n}", "path": "three20\\src\\com\\three20\\network\\TTURLCache.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/**\n * Compares this date to the specified date and returns the later date.\n * Unspecified which is returned if both are equal.\n */\n", "func_signal": "public NSDate laterDate(NSDate aDate)", "code": "{\n\tif (aDate == null)\n\t\treturn this;\n\tif (before(aDate))\n\t\treturn aDate;\n\treturn this;\n}", "path": "three20\\src\\com\\three20\\ns\\NSDate.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/**\n * Creates an object containing a copy of the bytes from the specified array\n * within the specified range.\n */\n", "func_signal": "public NSData(byte[] data, int start, int length)", "code": "{\n\tbytes = new byte[length];\n\tfor (int i = 0; i < length; i++) {\n\t\tbytes[i] = data[start + i];\n\t}\n}", "path": "three20\\src\\com\\three20\\ns\\NSData.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "// - (NSString*)etagForKey:(NSString*)key;??\n", "func_signal": "public void storeDataURL(NSData data, String url)", "code": "{\n\tString key = keyForURL(url);\n\tstoreDataKey(data, key);\n}", "path": "three20\\src\\com\\three20\\network\\TTURLCache.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/**\n * Computes RFC 2104-compliant HMAC signature. \n * @param data The data to be signed.\n * @param key The signing key.\n * @return The byte array of HMAC signature.\n */\n", "func_signal": "public static byte[] getSignatureBytes(String data, String key)", "code": "{\n\tbyte[] result = null;\n\ttry {\n\n\t\t// get an hmac_sha1 key from the raw key bytes\n\t\tSecretKeySpec signingKey = new SecretKeySpec(key.getBytes(),\n\t\t\t\tHMAC_SHA1_ALGORITHM);\n\n\t\t// get an hmac_sha1 Mac instance and initialize with the signing\n\t\t// key\n\t\tMac mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);\n\t\tmac.init(signingKey);\n\n\t\t// compute the hmac on input data bytes\n\t\tresult = mac.doFinal(data.getBytes());\n\t} catch (Exception e) {\n\t}\n\treturn result;\n}", "path": "three20\\src\\com\\three20\\util\\HMAC.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n    \n    txtView = (TextView)findViewById(R.id.textview1);\n    \n    imgView = (TTImageView)findViewById(R.id.imageView1);\n    imgView.setDelegate(new TTImageViewDelegate() {\n    \t@Override\n\t\tpublic void imageViewDidStartLoad(TTImageView imageView) {\n\t\t\ttxtView.setText(\"Starting loading: \" + imgView.getImageURL());\n\t\t}\n    \t@Override\n\t\tpublic void imageViewDidLoadImage(TTImageView imageView, Bitmap image) {\n\t\t\ttxtView.setText(\"Image loaded from: \" + imgView.getImageURL());\n\t\t}\n    \t@Override\n\t\tpublic void imageViewDidFailLoadWithError(TTImageView imageView, Throwable error) {\n\t\t\ttxtView.setText(\"Error loading image from: \" + imgView.getImageURL() + \"\\n\" + error.getLocalizedMessage());\n\t\t}\n\t\t});\n    \n    Button btn = (Button)findViewById(R.id.button1);\n    btn.setOnClickListener(new OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View view) {\n\t\t        imgView.setImageURL(\"http://farm4.static.flickr.com/3163/3110335722_7a906f9d8b_m.jpg\");\n\t\t\t}\n\t\t});\n}", "path": "example\\src\\com\\three20\\example\\MainActivity.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/**\n * Returns whether the specified data is equivalent to these data.\n */\n", "func_signal": "public boolean isEqualToData(NSData aData)", "code": "{\n\tif (length() != aData.length())\n\t\treturn false;\n\tbyte[] a = getBytes();\n\tbyte[] b = aData.getBytes();\n\n\tfor (int i = 0; i < a.length; i++) {\n\t\tif (a[i] != b[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}", "path": "three20\\src\\com\\three20\\ns\\NSData.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "// - (NSString*)etagCachePathForKey:(NSString*)key;??\n", "func_signal": "public boolean hasDataForURL(String url)", "code": "{\n\tString filePath = cachePathForURL(url);\n\tFile fm = new File(filePath);\n\treturn fm.exists();\n}", "path": "three20\\src\\com\\three20\\network\\TTURLCache.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/**\n * Returns a negative value if the specified date is later than this date, a\n * positive value if the specified date is earlier than this date, or zero\n * if the dates are equal. The return values are compatible with type\n * NSComparisonResult.\n */\n", "func_signal": "public int compare(Date aDate)", "code": "{\n\tif (before(aDate))\n\t\treturn NSOrderedAscending;\n\tif (after(aDate))\n\t\treturn NSOrderedDescending;\n\treturn NSOrderedSame;\n}", "path": "three20\\src\\com\\three20\\ns\\NSDate.java", "repo_name": "crino/three20-android", "stars": 26, "license": "None", "language": "java", "size": 161}
{"docstring": "/*\n    public Point2D getPoint2D( Point2D srcPt, Point2D dstPt ) {\n        if ( dstPt == null )\n            dstPt = new Point2D.Double();\n\n\t\tdx1 = x1-x2;\n\t\tdy1 = y1-y2;\n\t\tdx2 = x3-x2;\n\t\tdy2 = y3-y2;\n\t\tdx3 = x0-x1+x2-x3;\n\t\tdy3 = y0-y1+y2-y3;\n\t\t\n\t\tfloat a11, a12, a13, a21, a22, a23, a31, a32;\n\n\t\tif (dx3 == 0 && dy3 == 0) {\n\t\t\ta11 = x1-x0;\n\t\t\ta21 = x2-x1;\n\t\t\ta31 = x0;\n\t\t\ta12 = y1-y0;\n\t\t\ta22 = y2-y1;\n\t\t\ta32 = y0;\n\t\t\ta13 = a23 = 0;\n\t\t} else {\n\t\t\ta13 = (dx3*dy2-dx2*dy3)/(dx1*dy2-dy1*dx2);\n\t\t\ta23 = (dx1*dy3-dy1*dx3)/(dx1*dy2-dy1*dx2);\n\t\t\ta11 = x1-x0+a13*x1;\n\t\t\ta21 = x3-x0+a23*x3;\n\t\t\ta31 = x0;\n\t\t\ta12 = y1-y0+a13*y1;\n\t\t\ta22 = y3-y0+a23*y3;\n\t\t\ta32 = y0;\n\t\t}\n\n\t\tfloat x = (float)srcPt.getX();\n\t\tfloat y = (float)srcPt.getY();\n\t\tfloat D = 1.0f/(a13*x + a23*y + 1);\n\n        dstPt.setLocation( (a11*x + a21*y + a31)*D, (a12*x + a22*y + a32)*D );\n        return dstPt;\n    }\n*/\n", "func_signal": "protected void transformInverse(int x, int y, float[] out)", "code": "{\n\t\tout[0] = originalSpace.width * (A*x+B*y+C)/(G*x+H*y+I);\n\t\tout[1] = originalSpace.height * (D*x+E*y+F)/(G*x+H*y+I);\n\t}", "path": "com\\jhlabs\\image\\PerspectiveFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n * Prepare the light for rendering.\n * @param width the output image width\n * @param height the output image height\n */\n", "func_signal": "public void prepare(int width, int height)", "code": "{\n\t\t\tfloat lx = (float)(Math.cos(azimuth) * Math.cos(elevation));\n\t\t\tfloat ly = (float)(Math.sin(azimuth) * Math.cos(elevation));\n\t\t\tfloat lz = (float)Math.sin(elevation);\n\t\t\tdirection = new Vector3f(lx, ly, lz);\n\t\t\tdirection.normalize();\n\t\t\tif (type != DISTANT) {\n\t\t\t\tlx *= distance;\n\t\t\t\tly *= distance;\n\t\t\t\tlz *= distance;\n\t\t\t\tlx += width * centreX;\n\t\t\t\tly += height * centreY;\n\t\t\t}\n\t\t\tposition = new Vector3f(lx, ly, lz);\n\t\t\trealColor.set( new Color(color) );\n\t\t\trealColor.scale(intensity);\n\t\t\tcosConeAngle = (float)Math.cos(coneAngle);\n\t\t}", "path": "com\\jhlabs\\image\\LightFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n * Construct a TransitionFilter.\n * @param filter the filter to use\n * @param property the filter property which is changed over the transition\n * @param minValue the start value for the filter property\n * @param maxValue the end value for the filter property\n */\n", "func_signal": "public TransitionFilter( BufferedImageOp filter, String property, float minValue, float maxValue )", "code": "{\n\t\tthis.filter = filter;\n\t\tthis.property = property;\n\t\tthis.minValue = minValue;\n\t\tthis.maxValue = maxValue;\n\t\ttry {\n\t\t\tBeanInfo info = Introspector.getBeanInfo( filter.getClass() );\n        PropertyDescriptor[] pds = info.getPropertyDescriptors();\n        for ( int i = 0; i < pds.length; i++ ) {\n            PropertyDescriptor pd = pds[i];\n            if ( property.equals( pd.getName() ) ) {\n                method = pd.getWriteMethod();\n                break;\n            }\n        }\n        if ( method == null )\n            throw new IllegalArgumentException( \"No such property in object: \"+property );\n\t\t}\n\t\tcatch (IntrospectionException e) {\n        throw new IllegalArgumentException( e.toString() );\n\t\t}\n\t}", "path": "com\\jhlabs\\image\\TransitionFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n     * Set the new positions of the image corners.\n     * @param x0 the new position of the top left corner\n     * @param y0 the new position of the top left corner\n     * @param x1 the new position of the top right corner\n     * @param y1 the new position of the top right corner\n     * @param x2 the new position of the bottom right corner\n     * @param y2 the new position of the bottom right corner\n     * @param x3 the new position of the bottom left corner\n     * @param y3 the new position of the bottom left corner\n     */\n", "func_signal": "public void setCorners(float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3)", "code": "{\n\tthis.x0 = x0;\n\tthis.y0 = y0;\n\tthis.x1 = x1;\n\tthis.y1 = y1;\n\tthis.x2 = x2;\n\tthis.y2 = y2;\n\tthis.x3 = x3;\n\tthis.y3 = y3;\n\t\n\tdx1 = x1-x2;\n\tdy1 = y1-y2;\n\tdx2 = x3-x2;\n\tdy2 = y3-y2;\n\tdx3 = x0-x1+x2-x3;\n\tdy3 = y0-y1+y2-y3;\n\t\n\tfloat a11, a12, a13, a21, a22, a23, a31, a32;\n\n\tif (dx3 == 0 && dy3 == 0) {\n\t\ta11 = x1-x0;\n\t\ta21 = x2-x1;\n\t\ta31 = x0;\n\t\ta12 = y1-y0;\n\t\ta22 = y2-y1;\n\t\ta32 = y0;\n\t\ta13 = a23 = 0;\n\t} else {\n\t\ta13 = (dx3*dy2-dx2*dy3)/(dx1*dy2-dy1*dx2);\n\t\ta23 = (dx1*dy3-dy1*dx3)/(dx1*dy2-dy1*dx2);\n\t\ta11 = x1-x0+a13*x1;\n\t\ta21 = x3-x0+a23*x3;\n\t\ta31 = x0;\n\t\ta12 = y1-y0+a13*y1;\n\t\ta22 = y3-y0+a23*y3;\n\t\ta32 = y0;\n\t}\n\n    A = a22 - a32*a23;\n    B = a31*a23 - a21;\n    C = a21*a32 - a31*a22;\n    D = a32*a13 - a12;\n    E = a11 - a31*a13;\n    F = a31*a12 - a11*a32;\n    G = a12*a23 - a22*a13;\n    H = a21*a13 - a11*a23;\n    I = a11*a22 - a21*a12;\n}", "path": "com\\jhlabs\\image\\PerspectiveFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n     * Constuct a DitherFilter.\n     */\n", "func_signal": "public DitherFilter()", "code": "{\n\trows = 2;\n\tcols = 2;\n\tmatrix = ditherMagic4x4Matrix;\n\tlevels = 6;\n\tcolorDither = true;\n}", "path": "com\\jhlabs\\image\\DitherFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n * Set the gamma levels.\n * @param rGamma the gamma level for the red channel\n * @param gGamma the gamma level for the blue channel\n * @param bGamma the gamma level for the green channel\n * @see #getGamma\n */\n", "func_signal": "public void setGamma(float rGamma, float gGamma, float bGamma)", "code": "{\n\t\tthis.rGamma = rGamma;\n\t\tthis.gGamma = gGamma;\n\t\tthis.bGamma = bGamma;\n\t\tinitialized = false;\n\t}", "path": "com\\jhlabs\\image\\GammaFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n     * Initialize the filter.\n     */\n", "func_signal": "protected void initialize()", "code": "{\n\trows = cols = (int)Math.sqrt(matrix.length);\n\tmap = new int[levels];\n\tfor (int i = 0; i < levels; i++) {\n\t\tint v = 255 * i / (levels-1);\n\t\tmap[i] = v;\n\t}\n\tdiv = new int[256];\n\tmod = new int[256];\n\tint rc = (rows*cols+1);\n\tfor (int i = 0; i < 256; i++) {\n\t\tdiv[i] = (levels-1)*i / 256;\n\t\tmod[i] = i*rc/256;\n\t}\n}", "path": "com\\jhlabs\\image\\DitherFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n * Convolve a block of pixels.\n * @param kernel the kernel\n * @param inPixels the input pixels\n * @param outPixels the output pixels\n * @param width the width\n * @param height the height\n * @param alpha include alpha channel\n * @param edgeAction what to do at the edges\n */\n", "func_signal": "public static void convolve(Kernel kernel, int[] inPixels, int[] outPixels, int width, int height, boolean alpha, int edgeAction)", "code": "{\n\t\tif (kernel.getHeight() == 1)\n\t\t\tconvolveH(kernel, inPixels, outPixels, width, height, alpha, edgeAction);\n\t\telse if (kernel.getWidth() == 1)\n\t\t\tconvolveV(kernel, inPixels, outPixels, width, height, alpha, edgeAction);\n\t\telse\n\t\t\tconvolveHV(kernel, inPixels, outPixels, width, height, alpha, edgeAction);\n\t}", "path": "com\\jhlabs\\image\\ConvolveFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n * Convolve with a kernel consisting of one column.\n     * @param kernel the kernel\n     * @param inPixels the input pixels\n     * @param outPixels the output pixels\n     * @param width the width\n     * @param height the height\n     * @param alpha include alpha channel\n     * @param edgeAction what to do at the edges\n */\n", "func_signal": "public static void convolveV(Kernel kernel, int[] inPixels, int[] outPixels, int width, int height, boolean alpha, int edgeAction)", "code": "{\n\tint index = 0;\n\tfloat[] matrix = kernel.getKernelData( null );\n\tint rows = kernel.getHeight();\n\tint rows2 = rows/2;\n\n\tfor (int y = 0; y < height; y++) {\n\t\tfor (int x = 0; x < width; x++) {\n\t\t\tfloat r = 0, g = 0, b = 0, a = 0;\n\n\t\t\tfor (int row = -rows2; row <= rows2; row++) {\n\t\t\t\tint iy = y+row;\n\t\t\t\tint ioffset;\n\t\t\t\tif ( iy < 0 ) {\n\t\t\t\t\tif ( edgeAction == CLAMP_EDGES )\n\t\t\t\t\t\tioffset = 0;\n\t\t\t\t\telse if ( edgeAction == WRAP_EDGES )\n\t\t\t\t\t\tioffset = ((y+height) % height)*width;\n\t\t\t\t\telse\n\t\t\t\t\t\tioffset = iy*width;\n\t\t\t\t} else if ( iy >= height) {\n\t\t\t\t\tif ( edgeAction == CLAMP_EDGES )\n\t\t\t\t\t\tioffset = (height-1)*width;\n\t\t\t\t\telse if ( edgeAction == WRAP_EDGES )\n\t\t\t\t\t\tioffset = ((y+height) % height)*width;\n\t\t\t\t\telse\n\t\t\t\t\t\tioffset = iy*width;\n\t\t\t\t} else\n\t\t\t\t\tioffset = iy*width;\n\n\t\t\t\tfloat f = matrix[row+rows2];\n\n\t\t\t\tif (f != 0) {\n\t\t\t\t\tint rgb = inPixels[ioffset+x];\n\t\t\t\t\ta += f * ((rgb >> 24) & 0xff);\n\t\t\t\t\tr += f * ((rgb >> 16) & 0xff);\n\t\t\t\t\tg += f * ((rgb >> 8) & 0xff);\n\t\t\t\t\tb += f * (rgb & 0xff);\n\t\t\t\t}\n\t\t\t}\n\t\t\tint ia = alpha ? PixelUtils.clamp((int)(a+0.5)) : 0xff;\n\t\t\tint ir = PixelUtils.clamp((int)(r+0.5));\n\t\t\tint ig = PixelUtils.clamp((int)(g+0.5));\n\t\t\tint ib = PixelUtils.clamp((int)(b+0.5));\n\t\t\toutPixels[index++] = (ia << 24) | (ir << 16) | (ig << 8) | ib;\n\t\t}\n\t}\n}", "path": "com\\jhlabs\\image\\ConvolveFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n * Prepare the filter for the transiton at a given time.\n * The default implementation sets the given filter property, but you could override this method to make other changes.\n * @param transition the transition time in the range 0 - 1\n */\n", "func_signal": "public void prepareFilter( float transition )", "code": "{\n    try {\n        method.invoke( filter, new Object[] { new Float( transition ) } );\n    }\n    catch ( Exception e ) {\n        throw new IllegalArgumentException(\"Error setting value for property: \"+property);\n    }\n\t}", "path": "com\\jhlabs\\image\\TransitionFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n     * Construct a CompoundFilter.\n     * @param filter1 the first filter\n     * @param filter2 the second filter\n     */\n", "func_signal": "public CompoundFilter( BufferedImageOp filter1, BufferedImageOp filter2 )", "code": "{\n\tthis.filter1 = filter1;\n\tthis.filter2 = filter2;\n}", "path": "com\\jhlabs\\image\\CompoundFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n * Constructor for a filter which scales the input image to the given width and height using bicubic interpolation.\n * Unfortunately, it appears that bicubic actually looks worse than bilinear interpolation on most Java implementations,\n * but you can be the judge.\n     * @param width the width of the output image\n     * @param height the height of the output image\n */\n", "func_signal": "public BicubicScaleFilter( int width, int height )", "code": "{\n\tthis.width = width;\n\tthis.height = height;\n}", "path": "com\\jhlabs\\image\\BicubicScaleFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n * Construct a CropFilter.\n * @param x the left edge of the crop rectangle\n * @param y the top edge of the crop rectangle\n * @param width the width of the crop rectangle\n * @param height the height of the crop rectangle\n */\n", "func_signal": "public CropFilter(int x, int y, int width, int height)", "code": "{\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}", "path": "com\\jhlabs\\image\\CropFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n     * Specifies the angle of rotation.\n     * @param angle the angle of rotation.\n     * @angle\n     * @see #getAngle\n     */\n", "func_signal": "public void setAngle(float angle)", "code": "{\n\tthis.angle = angle;\n\tcos = (float)Math.cos(this.angle);\n\tsin = (float)Math.sin(this.angle);\n}", "path": "com\\jhlabs\\image\\RotateFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n     * Construct a RotateFilter.\n     * @param angle the angle to rotate\n     * @param resize true if the output image should be resized\n     */\n", "func_signal": "public RotateFilter(float angle, boolean resize)", "code": "{\n\tsetAngle(angle);\n\tthis.resize = resize;\n}", "path": "com\\jhlabs\\image\\RotateFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n     * Set the angle of the texture.\n     * @param angle the angle of the texture.\n     * @angle\n     * @see #getAngle\n     */\n", "func_signal": "public void setAngle(float angle)", "code": "{\n\tthis.angle = angle;\n\tfloat cos = (float)Math.cos(angle);\n\tfloat sin = (float)Math.sin(angle);\n\tm00 = cos;\n\tm01 = sin;\n\tm10 = -sin;\n\tm11 = cos;\n}", "path": "com\\jhlabs\\image\\CheckFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n * Convolve with a 2D kernel.\n     * @param kernel the kernel\n     * @param inPixels the input pixels\n     * @param outPixels the output pixels\n     * @param width the width\n     * @param height the height\n     * @param alpha include alpha channel\n     * @param edgeAction what to do at the edges\n */\n", "func_signal": "public static void convolveHV(Kernel kernel, int[] inPixels, int[] outPixels, int width, int height, boolean alpha, int edgeAction)", "code": "{\n\tint index = 0;\n\tfloat[] matrix = kernel.getKernelData( null );\n\tint rows = kernel.getHeight();\n\tint cols = kernel.getWidth();\n\tint rows2 = rows/2;\n\tint cols2 = cols/2;\n\n\tfor (int y = 0; y < height; y++) {\n\t\tfor (int x = 0; x < width; x++) {\n\t\t\tfloat r = 0, g = 0, b = 0, a = 0;\n\n\t\t\tfor (int row = -rows2; row <= rows2; row++) {\n\t\t\t\tint iy = y+row;\n\t\t\t\tint ioffset;\n\t\t\t\tif (0 <= iy && iy < height)\n\t\t\t\t\tioffset = iy*width;\n\t\t\t\telse if ( edgeAction == CLAMP_EDGES )\n\t\t\t\t\tioffset = y*width;\n\t\t\t\telse if ( edgeAction == WRAP_EDGES )\n\t\t\t\t\tioffset = ((iy+height) % height) * width;\n\t\t\t\telse\n\t\t\t\t\tcontinue;\n\t\t\t\tint moffset = cols*(row+rows2)+cols2;\n\t\t\t\tfor (int col = -cols2; col <= cols2; col++) {\n\t\t\t\t\tfloat f = matrix[moffset+col];\n\n\t\t\t\t\tif (f != 0) {\n\t\t\t\t\t\tint ix = x+col;\n\t\t\t\t\t\tif (!(0 <= ix && ix < width)) {\n\t\t\t\t\t\t\tif ( edgeAction == CLAMP_EDGES )\n\t\t\t\t\t\t\t\tix = x;\n\t\t\t\t\t\t\telse if ( edgeAction == WRAP_EDGES )\n\t\t\t\t\t\t\t\tix = (x+width) % width;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint rgb = inPixels[ioffset+ix];\n\t\t\t\t\t\ta += f * ((rgb >> 24) & 0xff);\n\t\t\t\t\t\tr += f * ((rgb >> 16) & 0xff);\n\t\t\t\t\t\tg += f * ((rgb >> 8) & 0xff);\n\t\t\t\t\t\tb += f * (rgb & 0xff);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint ia = alpha ? PixelUtils.clamp((int)(a+0.5)) : 0xff;\n\t\t\tint ir = PixelUtils.clamp((int)(r+0.5));\n\t\t\tint ig = PixelUtils.clamp((int)(g+0.5));\n\t\t\tint ib = PixelUtils.clamp((int)(b+0.5));\n\t\t\toutPixels[index++] = (ia << 24) | (ir << 16) | (ig << 8) | ib;\n\t\t}\n\t}\n}", "path": "com\\jhlabs\\image\\ConvolveFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n * Convolve with a kernel consisting of one row.\n     * @param kernel the kernel\n     * @param inPixels the input pixels\n     * @param outPixels the output pixels\n     * @param width the width\n     * @param height the height\n     * @param alpha include alpha channel\n     * @param edgeAction what to do at the edges\n */\n", "func_signal": "public static void convolveH(Kernel kernel, int[] inPixels, int[] outPixels, int width, int height, boolean alpha, int edgeAction)", "code": "{\n\tint index = 0;\n\tfloat[] matrix = kernel.getKernelData( null );\n\tint cols = kernel.getWidth();\n\tint cols2 = cols/2;\n\n\tfor (int y = 0; y < height; y++) {\n\t\tint ioffset = y*width;\n\t\tfor (int x = 0; x < width; x++) {\n\t\t\tfloat r = 0, g = 0, b = 0, a = 0;\n\t\t\tint moffset = cols2;\n\t\t\tfor (int col = -cols2; col <= cols2; col++) {\n\t\t\t\tfloat f = matrix[moffset+col];\n\n\t\t\t\tif (f != 0) {\n\t\t\t\t\tint ix = x+col;\n\t\t\t\t\tif ( ix < 0 ) {\n\t\t\t\t\t\tif ( edgeAction == CLAMP_EDGES )\n\t\t\t\t\t\t\tix = 0;\n\t\t\t\t\t\telse if ( edgeAction == WRAP_EDGES )\n\t\t\t\t\t\t\tix = (x+width) % width;\n\t\t\t\t\t} else if ( ix >= width) {\n\t\t\t\t\t\tif ( edgeAction == CLAMP_EDGES )\n\t\t\t\t\t\t\tix = width-1;\n\t\t\t\t\t\telse if ( edgeAction == WRAP_EDGES )\n\t\t\t\t\t\t\tix = (x+width) % width;\n\t\t\t\t\t}\n\t\t\t\t\tint rgb = inPixels[ioffset+ix];\n\t\t\t\t\ta += f * ((rgb >> 24) & 0xff);\n\t\t\t\t\tr += f * ((rgb >> 16) & 0xff);\n\t\t\t\t\tg += f * ((rgb >> 8) & 0xff);\n\t\t\t\t\tb += f * (rgb & 0xff);\n\t\t\t\t}\n\t\t\t}\n\t\t\tint ia = alpha ? PixelUtils.clamp((int)(a+0.5)) : 0xff;\n\t\t\tint ir = PixelUtils.clamp((int)(r+0.5));\n\t\t\tint ig = PixelUtils.clamp((int)(g+0.5));\n\t\t\tint ib = PixelUtils.clamp((int)(b+0.5));\n\t\t\toutPixels[index++] = (ia << 24) | (ir << 16) | (ig << 8) | ib;\n\t\t}\n\t}\n}", "path": "com\\jhlabs\\image\\ConvolveFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n     * Specifies the angle of the texture.\n     * @param angle the angle of the texture.\n     * @angle\n     * @see #getAngle\n     */\n", "func_signal": "public void setAngle(float angle)", "code": "{\n\tthis.angle = angle;\n\tfloat cos = (float)Math.cos(angle);\n\tfloat sin = (float)Math.sin(angle);\n\tm00 = cos;\n\tm01 = sin;\n\tm10 = -sin;\n\tm11 = cos;\n}", "path": "com\\jhlabs\\image\\TextureFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "/**\n * Set the centre of the effect as a proportion of the image size.\n * @param centre the center\n     * @see #getCentre\n */\n", "func_signal": "public void setCentre( Point2D centre )", "code": "{\n\tthis.centreX = (float)centre.getX();\n\tthis.centreY = (float)centre.getY();\n}", "path": "com\\jhlabs\\image\\PinchFilter.java", "repo_name": "thegrandpoobah/painterly", "stars": 16, "license": "mit", "language": "java", "size": 751}
{"docstring": "// Raturns true if the window is modified.\n", "func_signal": "protected final void markVisited(int col, int row)", "code": "{\n   if (minValues[col] == -1)       // first value is entered in the column\n   {\n      minValues[col] = row;\n      maxValues[col] = row;\n      this.size++;\n      modCount++;  // stucture has been changed\n      //return true;\n   }\n   else if (minValues[col] > row)  // minimum range in the column is expanded\n   {\n      this.size += minValues[col]-row;\n      minValues[col] = row;\n      modCount++;  // stucture has been changed\n   }\n   else if (maxValues[col] < row) // maximum range in the column is expanded\n   {\n      this.size += row-maxValues[col];\n      maxValues[col] = row;\n      modCount++;\n   }  // end if\n}", "path": "src\\main\\java\\com\\fastdtw\\dtw\\SearchWindow.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// FUNCTIONS\n", "func_signal": "public static double calcWarpCost(WarpPath path, TimeSeries tsI, TimeSeries tsJ, DistanceFunction distFn)", "code": "{\n   double totalCost = 0.0;\n\n   for (int p=0; p<path.size(); p++)\n   {\n      final com.fastdtw.matrix.ColMajorCell currWarp = path.get(p);\n      totalCost += distFn.calcDistance(tsI.getMeasurementVector(currWarp.getCol()),\n                                       tsJ.getMeasurementVector(currWarp.getRow()));\n   }\n\n   return totalCost;\n}", "path": "src\\main\\java\\com\\fastdtw\\dtw\\DTW.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// end invert()\n", "func_signal": "public ColMajorCell get(int index)", "code": "{\n    if ( (index>this.size()) || (index<0) )\n       throw new NoSuchElementException();\n    else\n       return new ColMajorCell(((Integer)tsIindexes.get(index)).intValue(),\n                               ((Integer)tsJindexes.get(index)).intValue());\n }", "path": "src\\main\\java\\com\\fastdtw\\dtw\\WarpPath.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// end doubleToByte(.)\n", "func_signal": "public static byte[] doubleArrayToByteArray(double[] numbers)", "code": "{\n    final int doubleSize = 8;  // 8 byes in a double\n    final byte[] byteArray = new byte[numbers.length*doubleSize];\n\n    for (int x=0; x<numbers.length; x++)\n       System.arraycopy(doubleToByteArray(numbers[x]), 0, byteArray, x*doubleSize, doubleSize);\n\n    return byteArray;\n }", "path": "src\\main\\java\\com\\fastdtw\\lang\\TypeConversions.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// CONSTRUCTORS\n", "func_signal": "public SineWave(int length, double cycles, double noise)", "code": "{\n   super(1);  // 1 dimensional TimeSeries\n\n  // final Random rand = new Random();\n\n   for (int x=0; x<length; x++)\n   {\n      final double nextPoint = Math.sin((double)x/length*2.0*Math.PI*cycles) + rand.nextGaussian()*noise;\n      super.addLast((int)x, new TimeSeriesPoint(new double[] {nextPoint}));\n   }\n}", "path": "src\\main\\java\\com\\fastdtw\\timeseries\\SineWave.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// CONSTRUCTORS\n", "func_signal": "public LinearWindow(TimeSeries tsI, TimeSeries tsJ, int searchRadius)", "code": "{\n   super(tsI.size(), tsJ.size());\n\n   final double ijRatio = (double)tsI.size()/(double)tsJ.size();\n   final boolean isIlargest = tsI.size() >= tsJ.size();\n   for (int i=0; i<tsI.size(); i++)\n   {\n      if (isIlargest)\n      {\n         final int j = Math.min( (int)Math.round((i) / ijRatio), tsJ.size()-1);\n         super.markVisited(i, j);\n      }\n      else\n      {\n         final int maxJ = ((int)Math.round((i+1) / ijRatio))-1;\n         final int minJ = ((int)Math.round((i)   / ijRatio));\n         super.markVisited(i, minJ);\n         super.markVisited(i, maxJ);\n      }  // end if\n   }  // end for loop\n\n   super.expandWindow(searchRadius);\n}", "path": "src\\main\\java\\com\\fastdtw\\dtw\\LinearWindow.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// end DynamicTimeWarp(..)\n", "func_signal": "public static double getWarpDistBetween(TimeSeries tsI, TimeSeries tsJ, SearchWindow window, DistanceFunction distFn)", "code": "{\n    //     COST MATRIX:\n    //   5|_|_|_|_|_|_|E| E = min Global Cost\n    //   4|_|_|_|_|_|_|_| S = Start point\n    //   3|_|_|_|_|_|_|_| each cell = min global cost to get to that point\n    // j 2|_|_|_|_|_|_|_|\n    //   1|_|_|_|_|_|_|_|\n    //   0|S|_|_|_|_|_|_|\n    //     0 1 2 3 4 5 6\n    //            i\n    //   access is M(i,j)... column-row\n    final CostMatrix costMatrix = new PartialWindowMatrix(window);\n    final int maxI = tsI.size()-1;\n    final int maxJ = tsJ.size()-1;\n\n    // Get an iterator that traverses the window cells in the order that the cost matrix is filled.\n    //    (first to last row (1..maxI), bottom to top (1..MaxJ)\n    final Iterator matrixIterator = window.iterator();\n\n    while (matrixIterator.hasNext())\n    {\n       final ColMajorCell currentCell = (ColMajorCell)matrixIterator.next();  // current cell being filled\n       final int i = currentCell.getCol();\n       final int j = currentCell.getRow();\n\n       if ( (i==0) && (j==0) )      // bottom left cell (first row AND first column)\n          costMatrix.put(i, j, distFn.calcDistance(tsI.getMeasurementVector(0), tsJ.getMeasurementVector(0)));\n       else if (i == 0)             // first column\n       {\n          costMatrix.put(i, j, distFn.calcDistance(tsI.getMeasurementVector(0), tsJ.getMeasurementVector(j)) +\n                               costMatrix.get(i, j-1));\n       }\n       else if (j == 0)             // first row\n       {\n          costMatrix.put(i, j, distFn.calcDistance(tsI.getMeasurementVector(i), tsJ.getMeasurementVector(0)) +\n                               costMatrix.get(i-1, j));\n       }\n       else                         // not first column or first row\n       {\n          final double minGlobalCost = Math.min(costMatrix.get(i-1, j),\n                                                Math.min(costMatrix.get(i-1, j-1),\n                                                         costMatrix.get(i, j-1)));\n          costMatrix.put(i, j, minGlobalCost + distFn.calcDistance(tsI.getMeasurementVector(i),\n                                                                   tsJ.getMeasurementVector(j)));\n       }  // end if\n    }  // end while loop\n\n    // Minimum Cost is at (maxI, maxJ)\n    return costMatrix.get(maxI, maxJ);\n\n }", "path": "src\\main\\java\\com\\fastdtw\\dtw\\DTW.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "/**\n * This main method executes the FastDTW algorithm on two time series with a\n * specified radius. The time series arguments are file names for files that\n * contain one measurement per line (time measurements are an optional value\n * in the first column). After calculating the warp path, the warp\n * path distance will be printed to standard output, followed by the path\n * in the format \"(0,0),(1,0),(2,1)...\" were each pair of numbers in\n * parenthesis are indexes of the first and second time series that are\n * linked in the warp path\n *\n * @param args  command line arguments (see method comments)\n */\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n      if (args.length!=3 && args.length!=4) {\n         System.out.println(\"USAGE:  java FastDtwTest timeSeries1 timeSeries2 radius [EuclideanDistance|ManhattanDistance|BinaryDistance]\");\n         System.exit(1);\n      } else {\n         final DistanceFunction distFn;\n         if (args.length < 4)\n            distFn = DistanceFunctionFactory.getDistFnByName(\"EuclideanDistance\");\n         else\n            distFn = DistanceFunctionFactory.getDistFnByName(args[3]);\n\n          ArrayList<Double> datasetValues = readValues(args[0]);\n          ArrayList<Double> queryValues = readValues(args[1]);\n          System.out.println(\"Dataset size: \" + datasetValues.size() + \". Query size: \" + queryValues.size());\n\n         final TimeSeries query = new TimeSeries(1);\n          ArrayList<TimeSeriesPoint> queryPoints = new ArrayList<TimeSeriesPoint>(datasetValues.size());\n          for (double point : queryValues)\n              queryPoints.add(new TimeSeriesPoint(new double[]{point}));\n          query.timeReadings = makeReadings(queryValues.size());\n          query.tsArray = queryPoints;\n\n          for (int i=0; i<datasetValues.size() - (queryValues.size()-1); i++) {\n              final TimeSeries dataSet = new TimeSeries(1);\n              ArrayList<TimeSeriesPoint> points = new ArrayList<TimeSeriesPoint>();\n              for (double point : datasetValues.subList(i, i + queryValues.size()))\n                  points.add(new TimeSeriesPoint(new double[]{point}));\n              dataSet.timeReadings = makeReadings(queryValues.size());\n              dataSet.tsArray = points;\n\n              final TimeWarpInfo info = FastDTW.getWarpInfoBetween(dataSet, query, Integer.parseInt(args[2]), distFn);\n              System.out.println(\"Warp Distance at index \" + i + \": \" + info.getDistance());\n          }\n\n         //System.out.println(\"Warp Path:     \" + info.getPath());\n      }  // end if\n\n   }", "path": "src\\main\\java\\com\\fastdtw\\examples\\DTWQueryTest.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// PUBLIC FUNCTIONS\n", "func_signal": "public static void main(String[] args)", "code": "{\n   if (args.length!=2 && args.length!=3)\n   {\n      System.out.println(\"USAGE:  java DtwTest timeSeries1 timeSeries2 [EuclideanDistance|ManhattanDistance|BinaryDistance]\");\n      System.exit(1);\n   }\n   else\n   {\n      final TimeSeries tsI = new TimeSeries(args[0], false, false, ',');\n      final TimeSeries tsJ = new TimeSeries(args[1], false, false, ',');\n      \n      final DistanceFunction distFn;\n      if (args.length < 3)\n      {\n         distFn = DistanceFunctionFactory.getDistFnByName(\"EuclideanDistance\"); \n      }\n      else\n      {\n         distFn = DistanceFunctionFactory.getDistFnByName(args[2]);\n      }   // end if\n      \n      final TimeWarpInfo info = com.fastdtw.dtw.DTW.getWarpInfoBetween(tsI, tsJ, distFn);\n\n      System.out.println(\"Warp Distance: \" + info.getDistance());\n      System.out.println(\"Warp Path:     \" + info.getPath());\n   }  // end if\n\n}", "path": "src\\main\\java\\com\\fastdtw\\examples\\DtwTest.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// Dynamic Time Warping where the warp path is not needed, an alternate implementation can be used that does not\n//    require the entire cost matrix to be filled and only needs 2 columns to be stored at any one time.\n", "func_signal": "public static double getWarpDistBetween(TimeSeries tsI, TimeSeries tsJ, DistanceFunction distFn)", "code": "{\n   // The space complexity is 2*tsJ.size().  Dynamic time warping is symmetric so switching the two time series\n   //    parameters does not effect the final warp cost but can reduce the space complexity by allowing tsJ to\n   //    be set as the shorter time series and only requiring 2 columns of size |tsJ| rather than 2 larger columns of\n   //    size |tsI|.\n   if (tsI.size() < tsJ.size())\n      return getWarpDistBetween(tsJ, tsI, distFn);\n\n\n   double[] lastCol = new double[tsJ.size()];\n   double[] currCol = new double[tsJ.size()];\n   final int maxI = tsI.size()-1;\n   final int maxJ = tsJ.size()-1;\n\n   // Calculate the values for the first column, from the bottom up.\n   currCol[0] = distFn.calcDistance(tsI.getMeasurementVector(0), tsJ.getMeasurementVector(0));  // first cell\n   for (int j=1; j<=maxJ; j++)  // the rest of the first column\n      currCol[j] = currCol[j-1] + distFn.calcDistance(tsI.getMeasurementVector(0), tsJ.getMeasurementVector(j));\n\n   for (int i=1; i<=maxI; i++)   // i = columns\n   {\n      // Swap the references between the two arrays.\n      final double[] temp = lastCol;\n      lastCol = currCol;\n      currCol = temp;\n\n      // Calculate the value for the bottom row of the current column\n      //    (i,0) = LocalCost(i,0) + GlobalCost(i-1,0)\n      currCol[0] = lastCol[0] + distFn.calcDistance(tsI.getMeasurementVector(i), tsJ.getMeasurementVector(0));\n\n      for (int j=1; j<=maxJ; j++)  // j = rows\n      {\n         // (i,j) = LocalCost(i,j) + minGlobalCost{(i-1,j),(i-1,j-1),(i,j-1)}\n         final double minGlobalCost = Math.min(lastCol[j], Math.min(lastCol[j-1], currCol[j-1]));\n         currCol[j] = minGlobalCost + distFn.calcDistance(tsI.getMeasurementVector(i), tsJ.getMeasurementVector(j));\n      }  // end for loop\n   }  // end for loop\n\n   // Minimum Cost is at (maxI,maxJ)\n   return currCol[maxJ];\n}", "path": "src\\main\\java\\com\\fastdtw\\dtw\\DTW.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// PROTECTED FUNCTIONS\n//    Expands the current window by a s pecified radius.\n", "func_signal": "protected final void expandWindow(int radius)", "code": "{\n   if (radius > 0)\n   {\n      // Expand the search window by one before expanding by the remainder of the radius because the function\n      //    \"expandSearchWindow(.) may not work correctly if the path has a width of only 1.\n      expandSearchWindow(1);\n      expandSearchWindow(radius-1);\n   }\n}", "path": "src\\main\\java\\com\\fastdtw\\dtw\\SearchWindow.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// CONSTRUCTOR\n", "func_signal": "public ParallelogramWindow(TimeSeries tsI, TimeSeries tsJ, int searchRadius)", "code": "{\n   super(tsI.size(), tsJ.size());\n\n   // Find the coordinates of the parallelogram's corners..other than (minI,minJ) and (maxI, maxJ)\n   final double upperCornerI = Math.max(maxI()/2.0-searchRadius*((double)maxI()/maxJ()), minI());\n   final double upperCornerJ = Math.min(maxJ()/2.0+searchRadius*((double)maxJ()/maxI()), maxJ());\n   final double lowerCornerI = Math.min(maxI()/2.0+searchRadius*((double)maxI()/maxJ()), maxI());\n   final double lowerCornerJ = Math.max(maxJ()/2.0-searchRadius*((double)maxJ()/maxI()), minJ());\n\n   // For each column determine the minimum and maximum row ranges that are in the paralellogram's window.\n   for (int i=0; i<tsI.size(); i++)\n   {\n      final int minJ;\n      final int maxJ;\n      final boolean isIlargest = tsI.size() >= tsJ.size(); \n\n      if (i < upperCornerI)// left side of upper line\n      {\n         if (isIlargest)\n         {\n            final double interpRatio = i / upperCornerI;\n            maxJ = (int)Math.round(interpRatio*upperCornerJ);\n         }\n         else\n         {\n            final double interpRatio = (i+1) / upperCornerI;\n            maxJ = (int)Math.round(interpRatio*upperCornerJ)-1;\n         }  // end if\n      }\n      else  // right side of upper line\n      {\n\n         if (isIlargest)\n         {\n            final double interpRatio = (i-upperCornerI) / (maxI()-upperCornerI);\n            maxJ = (int)Math.round(upperCornerJ + interpRatio*(maxJ()-upperCornerJ));\n         }\n         else\n         {\n            final double interpRatio = (i+1-upperCornerI) / (maxI()-upperCornerI);\n            maxJ = (int)Math.round(upperCornerJ + interpRatio*(maxJ()-upperCornerJ))-1;\n         }  // end if\n      }  // end if\n\n      if (i <= lowerCornerI)// left side of lower line\n      {\n\n         final double interpRatio = i / lowerCornerI;\n         minJ = (int)Math.round(interpRatio*lowerCornerJ);\n      }\n      else // right side of lower line\n      {\n\n         final double interpRatio = (i-lowerCornerI) / (maxI()-lowerCornerI);\n         minJ = (int)Math.round(lowerCornerJ + interpRatio*(maxJ()-lowerCornerJ));\n      }  // end if\n\n      super.markVisited(i, minJ);\n      super.markVisited(i, maxJ);\n   }  // end for loop\n}", "path": "src\\main\\java\\com\\fastdtw\\dtw\\ParallelogramWindow.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// Create a new WarpPath that is the same as THIS WarpPath, but J is the reference template, rather than I.\n", "func_signal": "public WarpPath invertedCopy()", "code": "{\n   final WarpPath newWarpPath = new WarpPath();\n   for (int x=0; x<tsIindexes.size(); x++)\n      newWarpPath.addLast(((Integer)tsJindexes.get(x)).intValue(), ((Integer)tsIindexes.get(x)).intValue());\n\n   return newWarpPath;\n}", "path": "src\\main\\java\\com\\fastdtw\\dtw\\WarpPath.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// end main()\n", "func_signal": "public static ArrayList<Double> makeReadings(int count)", "code": "{\n      ArrayList<Double> readings = new ArrayList<Double>(count);\n      for (int i = 0; i < count; i++) readings.add((double) i);\n      return readings;\n  }", "path": "src\\main\\java\\com\\fastdtw\\examples\\DTWQueryTest.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// CONSTRUCTORS\n", "func_signal": "public WarpPath()", "code": "{\n   tsIindexes = new ArrayList();\n   tsJindexes = new ArrayList();\n}", "path": "src\\main\\java\\com\\fastdtw\\dtw\\WarpPath.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// PUBLIC FUNCTIONS\n", "func_signal": "public void put(int col, int row, double value)", "code": "{\n   if ( (row<window.minJforI(col)) || (row>window.maxJforI(col)) )\n   {\n      throw new RuntimeException(\"CostMatrix is filled in a cell (col=\" + col + \", row=\" + row + \") that is not in the \" +\n                               \"search window\");\n   }\n   else\n   {\n      if (col == currColIndex)\n         currCol[row-minCurrRow] = value;\n      else if (col == currColIndex-1)\n      {\n         lastCol[row-minLastRow] = value;\n      }\n      else if (col == currColIndex+1)\n      {\n         // Write the last column to the swap file.\n         try\n         {\n            if (isSwapFileFreed)\n               throw new RuntimeException(\"The SwapFileMatrix has been freeded by the freeMem() method\");\n            else\n            {\n               cellValuesFile.seek(cellValuesFile.length());  // move file poiter to end of file\n               colOffsets[currColIndex-1] = cellValuesFile.getFilePointer();\n\n               // Write an entire column to the swap file.\n               cellValuesFile.write(TypeConversions.doubleArrayToByteArray(lastCol));\n            }  // end if\n         }\n         catch (IOException e)\n         {\n            throw new RuntimeException(\"Unable to fill the CostMatrix in the Swap file (IOException)\");\n         }  // end try\n\n         lastCol = currCol;\n         minLastRow = minCurrRow;\n         minCurrRow = window.minJforI(col);\n         currColIndex++;\n         currCol = new double[window.maxJforI(col)-window.minJforI(col)+1];\n         currCol[row-minCurrRow] = value;\n      }\n      else\n         throw new RuntimeException(\"A SwapFileMatrix can only fill in 2 adjacentcolumns at a time\");\n   }  // end if\n}", "path": "src\\main\\java\\com\\fastdtw\\dtw\\SwapFileMatrix.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// Swap I and J so that the warp path now indicates that J is the template rather than I.\n", "func_signal": "public void invert()", "code": "{\n   for (int x=0; x<tsIindexes.size(); x++)\n   {\n      final Object temp = tsIindexes.get(x);\n      tsIindexes.set(x, tsJindexes.get(x));\n      tsJindexes.set(x, temp);\n   }\n}", "path": "src\\main\\java\\com\\fastdtw\\dtw\\WarpPath.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// end toString()\n", "func_signal": "public boolean equals(Object obj)", "code": "{\n    if ( (obj instanceof WarpPath) )  // trivial false test\n    {\n       final WarpPath p = (WarpPath)obj;\n       if ( (p.size()==this.size()) && (p.maxI()==this.maxI()) && (p.maxJ()==this.maxJ())) // less trivial reject\n       {\n          // Compare each value in the warp path for equality\n          for (int x=0; x<this.size(); x++)\n             if ( !(this.get(x).equals(p.get(x))) )\n                return false;\n\n          return true;\n       }\n       else\n          return false;\n    }\n    else\n       return false;\n }", "path": "src\\main\\java\\com\\fastdtw\\dtw\\WarpPath.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// end put(...)\n", "func_signal": "public double get(int col, int row)", "code": "{\n    if ((row<window.minJforI(col)) || (row>window.maxJforI(col)))\n       return OUT_OF_WINDOW_VALUE;\n    else if (col == currColIndex)\n       return currCol[row-minCurrRow];\n    else if (col == currColIndex-1)\n       return lastCol[row-minLastRow];\n    else\n    {\n       try\n       {\n          if (isSwapFileFreed)\n             throw new RuntimeException(\"The SwapFileMatrix has been freeded by the freeMem() method\");\n          else\n          {\n             cellValuesFile.seek( colOffsets[col] + 8*(row-window.minJforI(col)) );\n             return cellValuesFile.readDouble();\n          }  // end if\n       }\n       catch (IOException e)\n       {\n          if (col > currColIndex)\n             throw new RuntimeException(\"The requested value is in the search window but has not been entered into \" +\n                                     \"the matrix: (col=\" + col + \"row=\" + row + \").\");\n          else\n             throw new RuntimeException(\"Unable to read CostMatrix in the Swap file (IOException)\");\n       }  // end try\n    }  // end if\n }", "path": "src\\main\\java\\com\\fastdtw\\dtw\\SwapFileMatrix.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "// CONSTRUCTOR\n", "func_signal": "public SearchWindow(int tsIsize, int tsJsize)", "code": "{\n   minValues = new int[tsIsize];\n   maxValues = new int[tsIsize];\n   Arrays.fill(minValues, -1);\n   maxJ = tsJsize-1;\n   size = 0;\n   modCount = 0;\n}", "path": "src\\main\\java\\com\\fastdtw\\dtw\\SearchWindow.java", "repo_name": "cscotta/fastdtw", "stars": 31, "license": "mit", "language": "java", "size": 138}
{"docstring": "/**\n * Returns the value of a property as a Integer\n * @param String property\n * @return Integer value\n */\n", "func_signal": "public Integer getPropertyInteger(String property)", "code": "{\n\ttry {\n\t\tif (this.cached) {\n\t\t\treturn Integer.parseInt(this.cache.get(property));\n\t\t} else {\n\t\t\tHashMap<String,String> contents = this.loadHashMap();\n\t\t\treturn Integer.parseInt(contents.get(property));\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn null;\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * Constructor for the Settings/Config file.\n * Note: The resource must be in the same package or sub package\n * as this. If in a sub directory the resource parameter\n * is the path to it from this class file.\n * @param String resource\n * @param File out\n */\n", "func_signal": "public SettingsHandler(String resource, File out)", "code": "{\n\tthis.resource = resource;\n\tthis.out = out;\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "// -------------------------------------------------\n", "func_signal": "public static void resetVersion()", "code": "{\n    DataOutputStream dos = null;\n    try {\n      File dir = new File(getWorkingDirectory() + File.separator + \"bin\" + File.separator);\n      File versionFile = new File(dir, \"version\");\n      dos = new DataOutputStream(new FileOutputStream(versionFile));\n      dos.writeUTF(\"0\");\n      dos.close();\n    } catch (FileNotFoundException ex) {\n      Logger.getLogger(Util.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (IOException ex) {\n      Logger.getLogger(Util.class.getName()).log(Level.SEVERE, null, ex);\n    } finally {\n      try {\n        dos.close();\n      } catch (IOException ex) {\n        Logger.getLogger(Util.class.getName()).log(Level.SEVERE, null, ex);\n      }\n    }\n  }", "path": "auth_system\\auth_system_launcher_src\\src\\net\\minecraft\\Util.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * Call this method before doing anything else with SettingsHandler. \n * The only exception to this is {@link #setCached(Boolean) setCanced(Boolean)}.\n * If caching is enabled then it will load the Properties into the cache.\n */\n", "func_signal": "public void load()", "code": "{\n\tif (this.resource != null && !out.exists()) {\n\t\tcreate(resource);\n\t}\n\tif (this.input != null && !out.exists()) {\n\t\tcreate(input);\n\t}\n\tif (this.cached) {\n\t\tthis.cache = this.loadHashMap();\n\t}\n\t\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * Constructor for the Settings/Config file.\n * Note: The resource must be in the same package or sub package\n * as this. If in a Sub directory the resource parameter\n * is the path to it from this class file.\n * @param String resource\n * @param File out\n */\n", "func_signal": "public SettingsHandler(String resource, String out)", "code": "{\n\tthis.resource = resource;\n\tthis.out = new File(out);\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * Returns the value of a property as a String\n * @param String property\n * @return String value\n */\n", "func_signal": "public String getPropertyString(String property)", "code": "{\n\ttry {\n\t\tif (this.cached) {\n\t\t\treturn this.cache.get(property);\n\t\t} else {\n\t\t\tHashMap<String,String> contents = this.loadHashMap();\n\t\t\treturn contents.get(property);\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn null;\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * Private method that takes the InputStream and it writes it to the File out\n * @param InputStream input\n */\n", "func_signal": "private void create(InputStream input)", "code": "{\n\tif (input != null) {\n\t\tFileOutputStream output = null;\n\t\ttry\n\t\t{\n\t\t\toutput = new FileOutputStream(out);\n\t\t\tbyte[] buf = new byte[8192];\n\t\t\tint length;\n\n\t\t\twhile ((length = input.read(buf)) > 0) {\n\t\t\t\toutput.write(buf, 0, length);\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tinput.close();\n\t\t\t} catch (Exception ignored) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tif (output != null)\n\t\t\t\t\toutput.close();\n\t\t\t}\n\t\t\tcatch (Exception ignored)\n\t\t\t{\n\t\t\t}\n\t\t}\n\t}\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * Private method that takes the resource and writes it to the File out.\n * @param String name\n */\n", "func_signal": "private void create(String resource)", "code": "{\n\tInputStream input = getClass().getResourceAsStream(resource);\n\tif (input != null) {\n\t\tFileOutputStream output = null;\n\t\ttry\n\t\t{\n\t\t\t//noinspection ResultOfMethodCallIgnored\n\t\t\tout.getParentFile().mkdirs();\n\t\t\toutput = new FileOutputStream(out);\n\t\t\tbyte[] buf = new byte[8192];\n\t\t\tint length;\n\n\t\t\twhile ((length = input.read(buf)) > 0) {\n\t\t\t\toutput.write(buf, 0, length);\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tinput.close();\n\t\t\t} catch (Exception ignored) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tif (output != null)\n\t\t\t\t\toutput.close();\n\t\t\t}\n\t\t\tcatch (Exception ignored)\n\t\t\t{\n\t\t\t}\n\t\t}\n\t}\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * Allows you to change the value of a property.\n * @param String property\n * @param Object obj\n */\n", "func_signal": "public void changeProperty(String property, Object obj)", "code": "{\n\tHashMap<Integer,String> contents = this.getAllFileContents();\n\tif ((contents == null)) {\n\t\treturn;\n\t}\n\tfor (int i = 1; i <= contents.size(); i ++) {\n\t\tif (contents.get(i) == null) continue;\n\t\tString check = contents.get(i);\n\t\tif (check.startsWith(property)) {\n\t\t\tcheck = check.replace(property, \"\");\n\t\t\tif (!(check.startsWith(\": \"))) continue;\n\t\t\tcontents.remove(i);\n\t\t\tcontents.put(i, property + \": \" + obj.toString());\n\t\t}\n\t}\n\tthis.flush(contents);\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * Returns the value of a property as a Boolean\n * @param String property\n * @return Boolean value\n */\n", "func_signal": "public Boolean getPropertyBoolean(String property)", "code": "{\n\ttry {\n\t\tString result;\n\t\tif (this.cached) {\n\t\t\tresult = this.cache.get(property);\n\t\t} else {\n\t\t\tHashMap<String,String> contents = this.loadHashMap();\n\t\t\tresult = contents.get(property);\n\t\t}\n\t\tif (result != null && result.equalsIgnoreCase(\"true\")) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn null;\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * Allows to add a comment at the line that you specify.\n * @param String comment\n * @param Integer line\n */\n", "func_signal": "public void insertComment(String comment, Integer line)", "code": "{\n\tHashMap<Integer,String> contents = this.getAllFileContents();\n\tif (line >= contents.size() + 1) return;\n\tHashMap<Integer,String> newContents = new HashMap<Integer,String>();\n\tfor (int i = 1; i < line; i ++) {\n\t\tnewContents.put(i, contents.get(i));\n\t}\n\tnewContents.put(line, \"#\" + comment);\n\tfor (int i = line; i <= contents.size(); i ++) {\n\t\tnewContents.put(i + 1, contents.get(i));\n\t}\n\tthis.flush(newContents);\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * Private method used by {@link #flush(HashMap) flush(HashMap)} to delete the old\n * Settings/Config file.\n * @param File file\n */\n", "func_signal": "private void delFile(File file)", "code": "{\n\tif (file.exists()) {\n\t\t//noinspection ResultOfMethodCallIgnored\n\t\tfile.delete();\n\t}\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * Allows you to add a comment to the end of the end of the file.\n * @param String comment\n */\n", "func_signal": "public void insertComment(String comment)", "code": "{\n\tHashMap<Integer,String> contents = this.getAllFileContents();\n\tcontents.put(contents.size() + 1, \"#\" + comment);\n\tthis.flush(contents);\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * Private method that writes out the new Settings/Config file after changes are made. \n * If caching is enabled, it will call the \n * {@link #load() load()} method.\n * \n * @param HashMap newContents\n */\n", "func_signal": "private void flush(HashMap<Integer,String> newContents)", "code": "{\n\ttry {\n\t\tthis.delFile(out);\n\t\t//noinspection ResultOfMethodCallIgnored\n\t\tout.createNewFile();\n\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(out));\n\t\tfor (int i = 1; i <= newContents.size(); i ++) {\n\t\t\tString line = newContents.get(i);\n\t\t\tif (line == null) {\n\t\t\t\twriter.append(\"\\n\");\n\t\t\t\tcontinue; \n\t\t\t}\n\t\t\twriter.append(line);\n\t\t\twriter.append(\"\\n\");\n\t\t}\n\t\twriter.flush();\n\t\twriter.close();\n\t\tif (cached) this.load();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * Constructor for the Settings/Config file.\n * Note: This file must exist.\n * @param String out\n * @throws FileNotFoundException\n */\n", "func_signal": "public SettingsHandler(File out) throws FileNotFoundException", "code": "{\n\tif (!out.exists()) throw new FileNotFoundException(\"The out does not exist.\");\n\tthis.out = out;\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * \n * @param Boolean cached\n */\n", "func_signal": "public void setCached(Boolean cached)", "code": "{\n\tthis.cached = cached;\n\tif (this.cached = false) this.cache = null;\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * Allows you to add a property at the end of the file.\n * @param String property\n * @param Object obj\n */\n", "func_signal": "public void put(String property, Object obj)", "code": "{\n\tHashMap<Integer,String> contents = this.getAllFileContents();\n\tcontents.put(contents.size() + 1, property + \": \" + obj.toString());\n\tthis.flush(contents);\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "//--------------------------------\n//  public String getFakeResult(String userName) {\n//\t    return Util.getFakeLatestVersion() + \":35b9fd01865fda9d70b157e244cf801c:\" + userName + \":12345:\";\n//\t  }\n//---------------------------------\n", "func_signal": "public void login(String userName, String password)", "code": "{\n    try {\n      String parameters = \"user=\" + URLEncoder.encode(userName, \"UTF-8\") + \"&password=\" + URLEncoder.encode(password, \"UTF-8\") + \"&version=\" + 13;\n      String result = Util.excutePost(\"http://login.minecraft.net/\", parameters);\n      if (result == null) {\n        showError(\"   !\");\n        loginForm.setNoNetwork();\n        return;\n      }\n      if (!result.contains(\":\")) {\n        if (result.trim().equals(\"Bad login\")) {\n          showError(\"   !\");\n        } else if (result.trim().equals(\"Old version\")) {\n          loginForm.setOutdated();\n          showError(\"  !\");\n        } else {\n          showError(result);\n        }\n        loginForm.setNoNetwork();\n        return;\n      }\n      String[] values = result.split(\":\");\n\n      launcher = new Launcher();\n      launcher.customParameters.putAll(customParameters);\n      launcher.customParameters.put(\"userName\", values[2].trim());\n      launcher.customParameters.put(\"latestVersion\", values[0].trim());\n      launcher.customParameters.put(\"downloadTicket\", values[1].trim());\n      launcher.customParameters.put(\"sessionId\", values[3].trim());\n      launcher.init();\n\n      removeAll();\n      add(launcher, \"Center\");\n      validate();\n      launcher.start();\n      loginForm.loginOk();\n      loginForm = null;\n      setTitle(\"Minecraft\");\n    } catch (Exception e) {\n      e.printStackTrace();\n      showError(e.toString());\n      loginForm.setNoNetwork();\n    }\n  }", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\LauncherFrame.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * Private method to get a HashMap of the contents of the Settings/Contents file.\n * They are stored as lines indexed by the line number.\n * @return HashMap contents\n */\n", "func_signal": "private HashMap<Integer,String> getAllFileContents()", "code": "{\n\tHashMap<Integer,String> result = new HashMap<Integer,String>();\n\tInteger i = 1;\n\ttry {\n\t\tBufferedReader br = new BufferedReader(new FileReader(out));\n\t\tString line;\n\t\t\n\t\twhile((line = br.readLine()) != null) {\n\t\t\tif (line.isEmpty()) {\n\t\t\t\tresult.put(i, null);\n\t\t\t\ti ++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tresult.put(i, line);\n\t\t\ti ++;\n\t\t}\n\t} catch (Exception ex) {\n\t\tex.printStackTrace();\n\t}\n\t\n\treturn result;\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * Allows you to add a property at the line that you specify\n * @param String property\n * @param Object obj\n * @param Integer line\n */\n", "func_signal": "public void put(String property, Object obj, Integer line)", "code": "{\n\tHashMap<Integer,String> contents = this.getAllFileContents();\n\tif (line >= contents.size() + 1) return;\n\tHashMap<Integer,String> newContents = new HashMap<Integer,String>();\n\tfor (int i = 1; i < line; i ++) {\n\t\tnewContents.put(i, contents.get(i));\n\t}\n\tnewContents.put(line, property + \": \" + obj.toString());\n\tfor (int i = line; i <= contents.size(); i ++) {\n\t\tnewContents.put(i + 1, contents.get(i));\n\t}\n\tthis.flush(newContents);\n}", "path": "auth_system\\auth_system_launcher_mem_src\\src\\net\\minecraft\\SettingsHandler.java", "repo_name": "Gualdimar/MinecraftSkinSystem", "stars": 17, "license": "None", "language": "java", "size": 1155}
{"docstring": "/**\n * @noinspection ALL\n */\n", "func_signal": "private void $$$loadButtonText$$$(AbstractButton component, String text)", "code": "{\n\tStringBuffer result = new StringBuffer();\n\tboolean haveMnemonic = false;\n\tchar mnemonic = '\\0';\n\tint mnemonicIndex = -1;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text.charAt(i) == '&') {\n\t\t\ti++;\n\t\t\tif (i == text.length()) break;\n\t\t\tif (!haveMnemonic && text.charAt(i) != '&') {\n\t\t\t\thaveMnemonic = true;\n\t\t\t\tmnemonic = text.charAt(i);\n\t\t\t\tmnemonicIndex = result.length();\n\t\t\t}\n\t\t}\n\t\tresult.append(text.charAt(i));\n\t}\n\tcomponent.setText(result.toString());\n\tif (haveMnemonic) {\n\t\tcomponent.setMnemonic(mnemonic);\n\t\tcomponent.setDisplayedMnemonicIndex(mnemonicIndex);\n\t}\n}", "path": "src\\org\\jergometer\\gui\\ChooseNewProgramWindow.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/**\n * @noinspection ALL\n */\n", "func_signal": "private void $$$loadLabelText$$$(JLabel component, String text)", "code": "{\n  StringBuffer result = new StringBuffer();\n  boolean haveMnemonic = false;\n  char mnemonic = '\\0';\n  int mnemonicIndex = -1;\n  for (int i = 0; i < text.length(); i++) {\n    if (text.charAt(i) == '&') {\n      i++;\n      if (i == text.length()) break;\n      if (!haveMnemonic && text.charAt(i) != '&') {\n        haveMnemonic = true;\n        mnemonic = text.charAt(i);\n        mnemonicIndex = result.length();\n      }\n    }\n    result.append(text.charAt(i));\n  }\n  component.setText(result.toString());\n  if (haveMnemonic) {\n    component.setDisplayedMnemonic(mnemonic);\n    component.setDisplayedMnemonicIndex(mnemonicIndex);\n  }\n}", "path": "src\\org\\jergometer\\gui\\AboutDialog.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/**\n * Converts unicodes to encoded &#92;uxxxx and escapes\n * special characters with a preceding slash.\n */\n", "func_signal": "private String saveConvert(String theString, boolean escapeSpace, boolean escapeUnicode)", "code": "{\n  int len = theString.length();\n  int bufLen = len * 2;\n  if (bufLen < 0) {\n    bufLen = Integer.MAX_VALUE;\n  }\n  StringBuffer outBuffer = new StringBuffer(bufLen);\n\n  for (int x = 0; x < len; x++) {\n    char aChar = theString.charAt(x);\n    // Handle common case first, selecting largest block that\n    // avoids the specials below\n    if ((aChar > 61) && (aChar < 127)) {\n      if (aChar == '\\\\') {\n        outBuffer.append('\\\\');\n        outBuffer.append('\\\\');\n        continue;\n      }\n      outBuffer.append(aChar);\n      continue;\n    }\n    switch (aChar) {\n      case ' ':\n        if (x == 0 || escapeSpace)\n          outBuffer.append('\\\\');\n        outBuffer.append(' ');\n        break;\n      case '\\t':\n        outBuffer.append('\\\\');\n        outBuffer.append('t');\n        break;\n      case '\\n':\n        outBuffer.append('\\\\');\n        outBuffer.append('n');\n        break;\n      case '\\r':\n        outBuffer.append('\\\\');\n        outBuffer.append('r');\n        break;\n      case '\\f':\n        outBuffer.append('\\\\');\n        outBuffer.append('f');\n        break;\n      case '=': // Fall through\n      case ':': // Fall through\n      case '#': // Fall through\n      case '!':\n        outBuffer.append('\\\\');\n        outBuffer.append(aChar);\n        break;\n      default:\n        if (((aChar < 0x0020) || (aChar > 0x007e)) & escapeUnicode) {\n          outBuffer.append('\\\\');\n          outBuffer.append('u');\n          outBuffer.append(getHexDigit(aChar >> 12));\n          outBuffer.append(getHexDigit(aChar >> 8));\n          outBuffer.append(getHexDigit(aChar >> 4));\n          outBuffer.append(getHexDigit(aChar));\n        } else {\n          outBuffer.append(aChar);\n        }\n    }\n  }\n  return outBuffer.toString();\n}", "path": "src\\de\\endrullis\\utils\\BetterProperties.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/**\n * Sends the hello command to the bike.\n *\n * @throws IOException thrown if io problems occurred\n */\n", "func_signal": "public void sendReset() throws IOException", "code": "{\n\twriteRawBytes(CMD_RESET.getBytes());\n\ttry {\n\t\t// wait 5s after bike reset (avoids problems with X3)\n\t\tThread.sleep(5000);\n\t} catch (InterruptedException ignored) {}\n}", "path": "src\\org\\jergometer\\communication\\KettlerBikeWriter.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/**\n * Returns the tree node for a given program file or directory.\n *\n * @param file program file or directory\n * @return tree node\n */\n", "func_signal": "private DefaultMutableTreeNode getTreeNode(File file)", "code": "{\n\tString relativePath = file.getPath().substring(charsToRemoveFromAbsolutePath);\n\tDefaultMutableTreeNode newNode;\n\tif (file.isDirectory()) {\n\t\tnewNode = new DefaultMutableTreeNode(new BikeProgramDir(file, file.getName(), relativePath), true);\n\t\tupdateNode(newNode);\n\t}\n\telse {\n\t\tnewNode = new DefaultMutableTreeNode(file.getName().substring(0, file.getName().length() - 4), false);\n\n\t\t// load program\n\t\tXMLParser parser = new XMLParser();\n\t\ttry {\n\t\t\tXMLDocument doc = parser.parse(StreamUtils.readXmlStream(new FileInputStream(file)));\n\t\t\tBikeProgram program = new BikeProgram(file, relativePath, new BikeProgramData(doc.getRootElement()));\n\t\t\tnewNode.setUserObject(program);\n\t\t\tallProgramNodes.put(program.getProgramName(), newNode);\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Error parsing bike program.\");\n\t\t}\n\t}\n\treturn newNode;\n}", "path": "src\\org\\jergometer\\model\\BikeProgramTree.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/**\n * Updates the directories and files related to this node.\n *\n * @param rootNode node\n */\n", "func_signal": "public void updateNode(DefaultMutableTreeNode rootNode)", "code": "{\n\tObject userObject = rootNode.getUserObject();\n\n\tif (userObject instanceof BikeProgramDir) {\n\t\tBikeProgramDir bikeProgramDir = (BikeProgramDir) userObject;\n\t\tFile[] files = bikeProgramDir.getFile().listFiles(FILE_FILTER);\n\t\t// sort files by file name\n\t\tArrays.sort(files, new Comparator<File>() {\n\t\t\tpublic int compare(File o1, File o2) {\n\t\t\t\treturn o1.getName().compareTo(o2.getName());\n\t\t\t}\n\t\t});\n\t\t// go through both lists like a zipper and equalize them (remove/add entries from/to node)\n\t\tfor (int nodeIndex=0, fileIndex=0; nodeIndex < rootNode.getChildCount() || fileIndex < files.length;) {\n\t\t\tDefaultMutableTreeNode node = null;\n\t\t\tString nodeFileName = null;\n\t\t\ttry {\n\t\t\t\tnode = (DefaultMutableTreeNode) rootNode.getChildAt(nodeIndex);\n\t\t\t\tnodeFileName = ((HoldsFile) node.getUserObject()).getFile().getName();\n\t\t\t} catch (ArrayIndexOutOfBoundsException ignored)  {}\n\n\t\t\tFile file = fileIndex < files.length ? files[fileIndex] : null;\n\n\t\t\tint compare;\n\t\t\tif (nodeFileName == null) {\n\t\t\t\tcompare = 1;\n\t\t\t} else\n\t\t\tif (file == null) {\n\t\t\t\tcompare = -1;\n\t\t\t} else {\n\t\t\t\tcompare = nodeFileName.compareTo(file.getName());\n\t\t\t}\n\n\t\t\tif (compare == 0) {\n\t\t\t\t// equality -> update next level\n\t\t\t\tupdateNode(node);\n\t\t\t\t// go to next node and next file\n\t\t\t\tnodeIndex++;\n\t\t\t\tfileIndex++;\n\t\t\t} else\n\t\t\tif (compare < 0) {\n\t\t\t\t// node string > file name -> we could not find corresponding file -> remove the node\n\t\t\t\trootNode.remove(nodeIndex);\n\t\t\t\t// inform listeners about removed nodes\n\t\t\t\tnodesWereRemoved(rootNode, new int[]{nodeIndex}, new Object[]{node});\n\t\t\t} else\n\t\t\tif (compare > 0) {\n\t\t\t\t// node string < file name -> we found a new file (one that's not in the node list) -> add it\n\t\t\t\trootNode.insert(getTreeNode(file), nodeIndex);\n\t\t\t\t// inform listeners about inserted nodes\n\t\t\t\tnodesWereInserted(rootNode, new int[]{nodeIndex});\n\t\t\t\t// go to next node and next file\n\t\t\t\tnodeIndex++;\n\t\t\t\tfileIndex++;\n\t\t\t}\n\t\t}\n\t} else\n\tif (userObject instanceof BikeProgram) {\n\t  BikeProgram bikeProgram = (BikeProgram) userObject;\n\t  DefaultMutableTreeNode newNode = getTreeNode(bikeProgram.getFile());\n\t\trootNode.setUserObject(newNode.getUserObject());\n\t\tnodesChanged(rootNode.getParent(), new int[]{rootNode.getParent().getIndex(rootNode)});\n\t}\n}", "path": "src\\org\\jergometer\\model\\BikeProgramTree.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "// ActionListener by menu items\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\tif (e.getSource() == recordButton) {\n\t\tjergometer.startRecording();\n\t} else if (e.getSource() == stopButton) {\n\t\tjergometer.stopRecording();\n\t} else if (e.getSource() == newUserMenuItem) {\n\t\tcreateNewUser();\n\t} else if (e.getSource() == settingsMenuItem) {\n\t\topenSettingsWindow();\n\t} else if (e.getSource() == quitMenuItem) {\n\t\tSystem.exit(0);\n\t} else if (e.getSource() == aboutMenuItem) {\n\t\tnew AboutDialog().showMe();\n\t} else if (e.getSource() == diagramAverageValuesMenuItem) {\n\t\tjergometer.setSessionsVis(Jergometer.SessionsVis.average);\n\t} else if (e.getSource() == diagramProgressionMenuItem) {\n\t\tjergometer.setSessionsVis(Jergometer.SessionsVis.progression);\n\t} else if (e.getSource() == showOnlyCompletedSessionsMenuItem) {\n\t\tjergometer.setShowOnlyCompletedSessions(showOnlyCompletedSessionsMenuItem.isSelected());\n\t} else if (e.getSource() == showFullSessionLength) {\n\t\tjergometer.setShowFullSessionLength(showFullSessionLength.isSelected());\n\t} else if (e.getActionCommand() == AC_SELECT_ALL_SESSIONS) {\n\t\tsessionTable.selectAll();\n\t} else if (e.getActionCommand() == AC_DELETE_SELECTED_SESSIONS) {\n\t\tdeleteSelectedSessions();\n\t} else if (e.getActionCommand() == AC_REPARSE_USER_DATA) {\n\t\tjergometer.reparseUserData();\n\t} else if (e.getActionCommand() == AC_EDIT_PROGRAM) {\n\t\teditProgram();\n\t} else if (e.getActionCommand() == AC_RENAME_PROGRAM) {\n\t\trenameProgram();\n\t} else if (e.getActionCommand() == AC_CREATE_NEW_PROGRAM_DIRECTORY) {\n\t\tcreateNewProgramDirectory();\n\t} else if (e.getActionCommand() == AC_COPY_PROGRAM) {\n\t\tcopyProgram();\n\t} else if (e.getActionCommand() == AC_CUT_PROGRAM) {\n\t\tcutProgram();\n\t} else if (e.getActionCommand() == AC_INSERT_PROGRAM) {\n\t\tinsertProgram();\n\t} else if (e.getActionCommand() == AC_DELETE_PROGRAM) {\n\t\tdeleteProgram();\n\t} else if (e.getActionCommand() == AC_UPDATE_PROGRAM) {\n\t\tupdateProgram();\n\t} else {\n\t\tString userName = null;\n\t\tfor (JMenuItem userMenuItem : userMenuItems) {\n\t\t\tif (e.getSource() == userMenuItem) {\n\t\t\t\tuserName = userMenuItem.getText();\n\t\t\t}\n\t\t}\n\t\tif (userName != null) {\n\t\t\tjergometer.switchToUser(userName);\n\t\t}\n\t}\n}", "path": "src\\org\\jergometer\\gui\\MainWindow.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/**\n * Concatenates the elements of the iterator to one string.\n * If the iterator has no elements an empty string is returned.\n *\n * @param iterator iterator\n * @param start start string\n * @param delimiter delimiter between the elements\n * @param end end string\n * @return concatenation\n */\n", "func_signal": "public static String join(Iterator iterator, String start, String delimiter, String end)", "code": "{\n\tif (iterator.hasNext()) {\n\t\tStringBuffer s = new StringBuffer();\n\n\t\ts.append(start);\n\t\ts.append(iterator.next());\n\n\t\twhile (iterator.hasNext()) {\n\t\t\ts.append(delimiter);\n\t\t\ts.append(iterator.next());\n\t\t}\n\n\t\ts.append(end);\n\n\t\treturn s.toString();\n\t} else {\n\t\treturn \"\";\n\t}\n}", "path": "src\\de\\endrullis\\utils\\CollectionUtils.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/**\n * @noinspection ALL\n */\n", "func_signal": "private void $$$loadLabelText$$$(JLabel component, String text)", "code": "{\n\tStringBuffer result = new StringBuffer();\n\tboolean haveMnemonic = false;\n\tchar mnemonic = '\\0';\n\tint mnemonicIndex = -1;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text.charAt(i) == '&') {\n\t\t\ti++;\n\t\t\tif (i == text.length()) break;\n\t\t\tif (!haveMnemonic && text.charAt(i) != '&') {\n\t\t\t\thaveMnemonic = true;\n\t\t\t\tmnemonic = text.charAt(i);\n\t\t\t\tmnemonicIndex = result.length();\n\t\t\t}\n\t\t}\n\t\tresult.append(text.charAt(i));\n\t}\n\tcomponent.setText(result.toString());\n\tif (haveMnemonic) {\n\t\tcomponent.setDisplayedMnemonic(mnemonic);\n\t\tcomponent.setDisplayedMnemonicIndex(mnemonicIndex);\n\t}\n}", "path": "src\\org\\jergometer\\gui\\MainWindow.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/**\n * Copies all files and directories corresponding to the elements of this subtree to the given destination file/directory.\n *\n * @param srcNode  root node of the subtree to copy\n * @param destFile destination file or directory\n * @throws java.io.IOException thrown if reading or writing has failed\n */\n", "func_signal": "private void copyFilesRecursivelyToDir(DefaultMutableTreeNode srcNode, File destFile) throws IOException", "code": "{\n\tFile srcFile = ((HoldsFile) srcNode.getUserObject()).getFile();\n\tif (srcFile.isFile()) {\n\t\tStreamUtils.copyFileLinewise(srcFile, destFile);\n\t} else {\n\t\tdestFile.mkdir();\n\t\tEnumeration children = srcNode.children();\n\t\twhile (children.hasMoreElements()) {\n\t\t\tDefaultMutableTreeNode childNode = (DefaultMutableTreeNode) children.nextElement();\n\t\t\tFile childFile = ((HoldsFile) childNode.getUserObject()).getFile();\n\t\t\tcopyFilesRecursivelyToDir(childNode, new File(destFile, childFile.getName()));\n\t\t}\n\t}\n}", "path": "src\\org\\jergometer\\gui\\MainWindow.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/**\n * Method generated by IntelliJ IDEA GUI Designer\n * >>> IMPORTANT!! <<<\n * DO NOT edit this method OR call it in your code!\n *\n * @noinspection ALL\n */\n", "func_signal": "private void $$$setupUI$$$()", "code": "{\n\tcreateUIComponents();\n\tmainPanel = new JPanel();\n\tmainPanel.setLayout(new GridBagLayout());\n\tfinal JSplitPane splitPane1 = new JSplitPane();\n\tsplitPane1.setContinuousLayout(false);\n\tsplitPane1.setOneTouchExpandable(true);\n\tsplitPane1.setOrientation(0);\n\tGridBagConstraints gbc;\n\tgbc = new GridBagConstraints();\n\tgbc.gridx = 0;\n\tgbc.gridy = 0;\n\tgbc.weightx = 1.0;\n\tgbc.weighty = 1.0;\n\tgbc.fill = GridBagConstraints.BOTH;\n\tmainPanel.add(splitPane1, gbc);\n\tdiagram = new Diagram();\n\tsplitPane1.setRightComponent(diagram);\n\tfinal JPanel panel1 = new JPanel();\n\tpanel1.setLayout(new GridBagLayout());\n\tsplitPane1.setLeftComponent(panel1);\n\tfinal JPanel panel2 = new JPanel();\n\tpanel2.setLayout(new GridBagLayout());\n\tgbc = new GridBagConstraints();\n\tgbc.gridx = 0;\n\tgbc.gridy = 1;\n\tgbc.gridheight = 2;\n\tgbc.weightx = 0.5;\n\tgbc.weighty = 1.0;\n\tgbc.fill = GridBagConstraints.BOTH;\n\tgbc.insets = new Insets(0, 10, 10, 10);\n\tpanel1.add(panel2, gbc);\n\tpanel2.setBorder(BorderFactory.createTitledBorder(ResourceBundle.getBundle(\"org/jergometer/translation/jergometer\").getString(\"label.training_program\")));\n\tfinal JPanel panel3 = new JPanel();\n\tpanel3.setLayout(new GridBagLayout());\n\tgbc = new GridBagConstraints();\n\tgbc.gridx = 0;\n\tgbc.gridy = 1;\n\tgbc.weightx = 0.5;\n\tgbc.insets = new Insets(0, 0, 5, 5);\n\tpanel2.add(panel3, gbc);\n\trecordButton = new JButton();\n\trecordButton.setIcon(new ImageIcon(getClass().getResource(\"/org/jergometer/images/record.png\")));\n\trecordButton.setText(\"\");\n\trecordButton.setToolTipText(\"start recording training session\");\n\tgbc = new GridBagConstraints();\n\tgbc.gridx = 0;\n\tgbc.gridy = 0;\n\tgbc.anchor = GridBagConstraints.EAST;\n\tgbc.insets = new Insets(0, 0, 0, 5);\n\tpanel3.add(recordButton, gbc);\n\tstopButton = new JButton();\n\tstopButton.setEnabled(false);\n\tstopButton.setIcon(new ImageIcon(getClass().getResource(\"/org/jergometer/images/stop.png\")));\n\tstopButton.setText(\"\");\n\tstopButton.setToolTipText(\"stop recording training session\");\n\tgbc = new GridBagConstraints();\n\tgbc.gridx = 1;\n\tgbc.gridy = 0;\n\tgbc.anchor = GridBagConstraints.WEST;\n\tgbc.insets = new Insets(0, 5, 0, 0);\n\tpanel3.add(stopButton, gbc);\n\tfinal JScrollPane scrollPane1 = new JScrollPane();\n\tgbc = new GridBagConstraints();\n\tgbc.gridx = 0;\n\tgbc.gridy = 0;\n\tgbc.weightx = 0.5;\n\tgbc.weighty = 0.5;\n\tgbc.fill = GridBagConstraints.BOTH;\n\tgbc.insets = new Insets(0, 5, 5, 5);\n\tpanel2.add(scrollPane1, gbc);\n\tprogramTree = new JTree();\n\tprogramTree.setRootVisible(true);\n\tprogramTree.setShowsRootHandles(false);\n\tscrollPane1.setViewportView(programTree);\n\tfinal JPanel panel4 = new JPanel();\n\tpanel4.setLayout(new GridBagLayout());\n\tgbc = new GridBagConstraints();\n\tgbc.gridx = 3;\n\tgbc.gridy = 0;\n\tgbc.gridheight = 3;\n\tgbc.insets = new Insets(0, 0, 0, 10);\n\tpanel1.add(panel4, gbc);\n\twelcomeLabel = new JLabel();\n\twelcomeLabel.setFont(new Font(\"Bitstream Vera Serif\", Font.BOLD, 16));\n\tthis.$$$loadLabelText$$$(welcomeLabel, ResourceBundle.getBundle(\"org/jergometer/translation/jergometer\").getString(\"label.welcome\"));\n\tgbc = new GridBagConstraints();\n\tgbc.gridx = 0;\n\tgbc.gridy = 0;\n\tgbc.anchor = GridBagConstraints.WEST;\n\tgbc.insets = new Insets(10, 10, 10, 10);\n\tpanel1.add(welcomeLabel, gbc);\n\tfinal JPanel panel5 = new JPanel();\n\tpanel5.setLayout(new GridBagLayout());\n\tgbc = new GridBagConstraints();\n\tgbc.gridx = 1;\n\tgbc.gridy = 0;\n\tgbc.gridheight = 3;\n\tgbc.weightx = 1.0;\n\tgbc.weighty = 1.0;\n\tgbc.fill = GridBagConstraints.BOTH;\n\tgbc.insets = new Insets(10, 0, 10, 10);\n\tpanel1.add(panel5, gbc);\n\tpanel5.setBorder(BorderFactory.createTitledBorder(ResourceBundle.getBundle(\"org/jergometer/translation/jergometer\").getString(\"label.training_data\")));\n\tfinal JScrollPane scrollPane2 = new JScrollPane();\n\tgbc = new GridBagConstraints();\n\tgbc.gridx = 0;\n\tgbc.gridy = 0;\n\tgbc.weightx = 1.0;\n\tgbc.weighty = 0.5;\n\tgbc.fill = GridBagConstraints.BOTH;\n\tgbc.insets = new Insets(0, 5, 5, 5);\n\tpanel5.add(scrollPane2, gbc);\n\tsessionTable = new JTable();\n\tscrollPane2.setViewportView(sessionTable);\n\tbikeInfoPane.setBackground(UIManager.getColor(\"Label.background\"));\n\tbikeInfoPane.setContentType(\"text/html\");\n\tbikeInfoPane.setEditable(false);\n\tbikeInfoPane.setEnabled(true);\n\tbikeInfoPane.setText(\"<html>\\n  <head>\\n    \\n  </head>\\n  <body>\\n  </body>\\n</html>\\n\");\n\tbikeInfoPane.putClientProperty(\"JEditorPane.honorDisplayProperties\", Boolean.TRUE);\n\tgbc = new GridBagConstraints();\n\tgbc.gridx = 2;\n\tgbc.gridy = 0;\n\tgbc.gridheight = 3;\n\tgbc.fill = GridBagConstraints.HORIZONTAL;\n\tpanel1.add(bikeInfoPane, gbc);\n}", "path": "src\\org\\jergometer\\gui\\MainWindow.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/* (non-Javadoc)\n * @see java.util.ResourceBundle#handleGetObject(java.lang.String)\n */\n", "func_signal": "protected Object handleGetObject(String key)", "code": "{\n  String value = bundle.getString(key);\n  if (value==null) return null;\n  try {\n     return new String (value.getBytes(\"ISO-8859-1\"),\"UTF-8\") ;\n  } catch (UnsupportedEncodingException e) {\n    // Shouldn't fail - but should we still add logging message?\n    return null;\n  }\n}", "path": "src\\de\\endrullis\\utils\\Utf8ResourceBundle.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/**\n * Deletes the program from file system and from this data structure.\n * \n * @param node program\n */\n", "func_signal": "public void deletePrograms(DefaultMutableTreeNode node)", "code": "{\n\tDefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent();\n\n\tif (node == root) {\n\t\t// convert enum to list\n\t\tEnumeration childEnum = node.children();\n\t\tArrayList<DefaultMutableTreeNode> childNodes = new ArrayList<DefaultMutableTreeNode>();\n\t\twhile (childEnum.hasMoreElements()) {\n\t\t\tDefaultMutableTreeNode childNode = (DefaultMutableTreeNode) childEnum.nextElement();\n\t\t\tchildNodes.add(childNode);\n\t\t}\n\n\t\t// remove nodes recursively\n\t\tfor (DefaultMutableTreeNode childNode : childNodes) {\n\t\t\tdeleteProgramsRecursively(childNode);\n\t\t}\n\n\t\t// build index array and object array\n\t\tint[] nodeIndices = new int[childNodes.size()];\n\t\tfor (int i = 0; i < nodeIndices.length; i++) {\n\t\t\tnodeIndices[i] = i;\n\t\t}\n\t\tObject[] objects = new Object[childNodes.size()];\n\t\tobjects = childNodes.toArray(objects);\n\n\t\t// inform listeners about removed nodes\n\t\tnodesWereRemoved(node, nodeIndices, objects);\n\t} else\n\n\tif (node.getUserObject() instanceof BikeProgram || node.getUserObject() instanceof BikeProgramDir) {\n\t\t// remove node recursively\n\t\tint nodeIndex = deleteProgramsRecursively(node);\n\n\t\t// inform listeners about removed nodes\n\t\tnodesWereRemoved(parentNode, new int[]{nodeIndex}, new Object[]{node});\n\t}\n}", "path": "src\\org\\jergometer\\model\\BikeProgramTree.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "// TreeSelectionListener by programTree\n", "func_signal": "public void valueChanged(TreeSelectionEvent e)", "code": "{\n\tif (e.getSource() == programTree) {\n\t\tif (programTree.getSelectionCount() == 1) {\n\t\t\tDefaultMutableTreeNode node = (DefaultMutableTreeNode) programTree.getSelectionPath().getLastPathComponent();\n\t\t\tif (node == programTree.getModel().getRoot()) {\n\t\t\t\tjergometer.selectBikeProgramRoot();\n\t\t\t\teditProgramMenuItem.setEnabled(false);\n\t\t\t} else if (node.getUserObject() instanceof BikeProgramDir) {\n\t\t\t\tjergometer.selectBikeProgramDirectory((BikeProgramDir) node.getUserObject());\n\t\t\t\teditProgramMenuItem.setEnabled(false);\n\t\t\t} else if (node.getUserObject() instanceof BikeProgram) {\n\t\t\t\tjergometer.selectBikeProgram((BikeProgram) node.getUserObject());\n\t\t\t\teditProgramMenuItem.setEnabled(true);\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\org\\jergometer\\gui\\MainWindow.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/**\n * Creates the reader for the incoming messages of the bike.\n *\n * @param in input stream\n */\n", "func_signal": "public KettlerBikeReader(InputStream in)", "code": "{\n\tthis.inStream = in;\n\tthis.in = new BufferedReader(new InputStreamReader(inStream), 1);\n}", "path": "src\\org\\jergometer\\communication\\KettlerBikeReader.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "// ListSelectionListener by sessionTable\n", "func_signal": "public void valueChanged(ListSelectionEvent e)", "code": "{\n\tif (sessionTable.getSelectionModel().isSelectionEmpty()) return;\n\n\tArrayList<BikeSession> selectedSessions = new ArrayList<BikeSession>();\n\n\tSessionTableModel sessionTableModel = (SessionTableModel) sessionTable.getModel();\n\tListSelectionModel selectionModel = sessionTable.getSelectionModel();\n\n\tfor (int i = 0; i < sessionTableModel.getRowCount(); i++) {\n\t\tif (selectionModel.isSelectedIndex(i)) {\n\t\t\tBikeSession bikeSession = sessionTableModel.getSessionAtRow(i);\n\t\t\tselectedSessions.add(bikeSession);\n\t\t}\n\t}\n\n\tif (selectedSessions.size() == 1) {\n\t\tjergometer.selectBikeSession(selectedSessions.get(0));\n\t} else {\n\t\tjergometer.selectBikeSessions(selectedSessions);\n\t}\n}", "path": "src\\org\\jergometer\\gui\\MainWindow.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/**\n * @noinspection ALL\n */\n", "func_signal": "private void $$$loadLabelText$$$(JLabel component, String text)", "code": "{\n\tStringBuffer result = new StringBuffer();\n\tboolean haveMnemonic = false;\n\tchar mnemonic = '\\0';\n\tint mnemonicIndex = -1;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text.charAt(i) == '&') {\n\t\t\ti++;\n\t\t\tif (i == text.length()) break;\n\t\t\tif (!haveMnemonic && text.charAt(i) != '&') {\n\t\t\t\thaveMnemonic = true;\n\t\t\t\tmnemonic = text.charAt(i);\n\t\t\t\tmnemonicIndex = result.length();\n\t\t\t}\n\t\t}\n\t\tresult.append(text.charAt(i));\n\t}\n\tcomponent.setText(result.toString());\n\tif (haveMnemonic) {\n\t\tcomponent.setDisplayedMnemonic(mnemonic);\n\t\tcomponent.setDisplayedMnemonicIndex(mnemonicIndex);\n\t}\n}", "path": "src\\org\\jergometer\\gui\\ChooseNewProgramWindow.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/**\n * Method generated by IntelliJ IDEA GUI Designer\n * >>> IMPORTANT!! <<<\n * DO NOT edit this method OR call it in your code!\n *\n * @noinspection ALL\n */\n", "func_signal": "private void $$$setupUI$$$()", "code": "{\n\tpanel1 = new JPanel();\n\tpanel1.setLayout(new GridBagLayout());\n\theadline = new JLabel();\n\theadline.setFont(new Font(headline.getFont().getName(), Font.PLAIN, headline.getFont().getSize()));\n\tthis.$$$loadLabelText$$$(headline, ResourceBundle.getBundle(\"org/jergometer/translation/jergometer\").getString(\"choose_new_program_dialog.sessions_uses_unknown_program\"));\n\theadline.putClientProperty(\"html.disable\", Boolean.TRUE);\n\tGridBagConstraints gbc;\n\tgbc = new GridBagConstraints();\n\tgbc.gridx = 0;\n\tgbc.gridy = 0;\n\tgbc.gridwidth = 2;\n\tgbc.anchor = GridBagConstraints.WEST;\n\tgbc.insets = new Insets(5, 5, 5, 5);\n\tpanel1.add(headline, gbc);\n\tbikeProgramTree = new JTree();\n\tbikeProgramTree.setShowsRootHandles(false);\n\tbikeProgramTree.putClientProperty(\"JTree.lineStyle\", \"\");\n\tbikeProgramTree.putClientProperty(\"html.disable\", Boolean.TRUE);\n\tgbc = new GridBagConstraints();\n\tgbc.gridx = 0;\n\tgbc.gridy = 2;\n\tgbc.gridwidth = 2;\n\tgbc.weightx = 1.0;\n\tgbc.weighty = 1.0;\n\tgbc.fill = GridBagConstraints.BOTH;\n\tgbc.insets = new Insets(0, 5, 0, 5);\n\tpanel1.add(bikeProgramTree, gbc);\n\tassignButton = new JButton();\n\tthis.$$$loadButtonText$$$(assignButton, ResourceBundle.getBundle(\"org/jergometer/translation/jergometer\").getString(\"label.assign\"));\n\tgbc = new GridBagConstraints();\n\tgbc.gridx = 0;\n\tgbc.gridy = 3;\n\tgbc.weightx = 0.5;\n\tgbc.fill = GridBagConstraints.HORIZONTAL;\n\tgbc.insets = new Insets(5, 5, 5, 2);\n\tpanel1.add(assignButton, gbc);\n\tskipButton = new JButton();\n\tthis.$$$loadButtonText$$$(skipButton, ResourceBundle.getBundle(\"org/jergometer/translation/jergometer\").getString(\"label.skip\"));\n\tgbc = new GridBagConstraints();\n\tgbc.gridx = 1;\n\tgbc.gridy = 3;\n\tgbc.weightx = 0.5;\n\tgbc.fill = GridBagConstraints.HORIZONTAL;\n\tgbc.insets = new Insets(5, 2, 5, 5);\n\tpanel1.add(skipButton, gbc);\n\texplanation = new JTextArea();\n\texplanation.setBackground(UIManager.getColor(\"OptionPane.background\"));\n\texplanation.setEditable(false);\n\texplanation.setEnabled(true);\n\texplanation.setLineWrap(true);\n\texplanation.setRows(1);\n\texplanation.setText(ResourceBundle.getBundle(\"org/jergometer/translation/jergometer\").getString(\"choose_new_program_dialog.explanation\"));\n\texplanation.setWrapStyleWord(true);\n\tgbc = new GridBagConstraints();\n\tgbc.gridx = 0;\n\tgbc.gridy = 1;\n\tgbc.gridwidth = 2;\n\tgbc.fill = GridBagConstraints.BOTH;\n\tgbc.insets = new Insets(0, 5, 5, 5);\n\tpanel1.add(explanation, gbc);\n}", "path": "src\\org\\jergometer\\gui\\ChooseNewProgramWindow.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/**\n * Method generated by IntelliJ IDEA GUI Designer\n * >>> IMPORTANT!! <<<\n * DO NOT edit this method OR call it in your code!\n *\n * @noinspection ALL\n */\n", "func_signal": "private void $$$setupUI$$$()", "code": "{\n  contentPane = new JPanel();\n  contentPane.setLayout(new GridBagLayout());\n  credits = new JLabel();\n  credits.setHorizontalAlignment(2);\n  credits.setHorizontalTextPosition(0);\n  credits.setIcon(new ImageIcon(getClass().getResource(\"/org/jergometer/images/credits_logo.png\")));\n  this.$$$loadLabelText$$$(credits, ResourceBundle.getBundle(\"org/jergometer/translation/jergometer\").getString(\"about_dialog.text\"));\n  GridBagConstraints gbc;\n  gbc = new GridBagConstraints();\n  gbc.gridx = 0;\n  gbc.gridy = 0;\n  gbc.anchor = GridBagConstraints.WEST;\n  contentPane.add(credits, gbc);\n}", "path": "src\\org\\jergometer\\gui\\AboutDialog.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/**\n * Tests the connection and returns the ergometer id in case of success.\n *\n * @return ergometer id in case of success\n */\n", "func_signal": "public String test()", "code": "{\n\t// start connection\n\tthis.start();\n\n\tpm = new ProgressMonitor(owner, I18n.getString(\"connection_tester.testing_connection_to_ergometer\"), \"\", 0, 100);\n\tpm.setMillisToPopup(0);\n\tpm.setMillisToDecideToPopup(0);\n\t\n\ttry {\n\t\tboolean abort = false;\n\n\t\t// final state machine\n\t\twhile (!abort) {\n\t\t\tswitch (state) {\n\n\t\t\t\tcase init:\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase openConnection:\n\t\t\t\t\tpm.setProgress(10);\n\t\t\t\t\tpm.setNote(I18n.getString(\"connection_tester.open_connection\"));\n\t\t\t\t\twaitForChild(2000);\n\t\t\t\t\tif (state == State.openConnection) abort = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase doReset:\n\t\t\t\t\tpm.setProgress(20);\n\t\t\t\t\tpm.setNote(I18n.getString(\"connection_tester.send_reset\"));\n\t\t\t\t\twaitForChild(15000);\n\t\t\t\t\tif (state == State.doReset) abort = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase wait:\n\t\t\t\t\tpm.setProgress(30);\n\t\t  \t\tpm.setNote(I18n.getString(\"connection_tester.wait_for_reset_finished\"));\n\t\t\t\t\twaitForChild(6000);\n\t\t\t\t\tif (state == State.wait) abort = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase retrieveId:\n\t\t\t\t\tpm.setProgress(80);\n\t\t\t\t\tpm.setNote(I18n.getString(\"connection_tester.retrieving_ergometer_id\"));\n\t\t\t\t\twaitForChild(5000);\n\t\t\t\t\tif (state == State.retrieveId) abort = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase finished:\n\t\t\t\t\tpm.setProgress(100);\n\t\t\t\t\tpm.setNote(I18n.getString(\"connection_tester.connection_successful\", id));\n\t\t\t\t\tabort = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase canceled:\n\t\t\t\t\tabort = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (state != State.finished) {\n\t\t\tSystem.err.println(\"Connection to ergometer failed at state \\\"\" + state + \"\\\"\");\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tpm.close();\n\t\tif (isAlive()) {\n\t\t\tinterrupt();\n\t\t}\n\t}\n\n\treturn id;\n}", "path": "src\\org\\jergometer\\communication\\BikeConnectionTester.java", "repo_name": "xylo/JErgometer", "stars": 18, "license": "gpl-2.0", "language": "java", "size": 2791}
{"docstring": "/**\n * Returns the name of the directory as entered by the user.\n * \n * @return Name of the directory\n * \n */\n", "func_signal": "public String getDirectory()", "code": "{\n\tif (approved) {\n\t\treturn tfDirectory.getText();\n\t}\n\treturn null;\n}", "path": "src\\main\\java\\com\\myjavaworld\\jftp\\NewLocalDirectoryDlg.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Adds the given data file to this <code>ZipFile</code>.\n * \n * @param file\n *            data file to add\n * @throws IOException\n *             propogated.\n */\n", "func_signal": "private void addFile(File file) throws IOException", "code": "{\n\tfireBeginFileEvent(file);\n\tfinal int bufferSize = 16 * 1024;\n\tbyte[] buffer = new byte[bufferSize];\n\tint bytesRead = 0;\n\tfinal long fileSize = file.length();\n\tlong totalBytesRead = 0L;\n\tBufferedInputStream bin = null;\n\ttry {\n\t\tbin = new BufferedInputStream(new FileInputStream(file));\n\t\twhile ((bytesRead = bin.read(buffer)) != -1) {\n\t\t\tzout.write(buffer, 0, bytesRead);\n\t\t\ttotalBytesRead += bytesRead;\n\t\t\tint progress = (int) ((totalBytesRead * 100) / fileSize);\n\t\t\tfireProgressEvent(progress);\n\t\t}\n\t} finally {\n\t\tfireEndFileEvent(file);\n\t\tif (bin != null) {\n\t\t\tbin.close();\n\t\t}\n\t}\n}", "path": "src\\main\\java\\com\\myjavaworld\\zip\\Zip.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Closes this <code>ZipFile</code>. No more entries can be added to this\n * <code>ZipFile</code> after calling this method. An attempt to add more\n * entries after calling this method will result in an\n * <code>IllegalStateException</code>.\n * \n * @throws IOException\n *             propogated.\n */\n", "func_signal": "public void close() throws IOException", "code": "{\n\tif (zout != null) {\n\t\tzout.close();\n\t}\n\tzout = null;\n}", "path": "src\\main\\java\\com\\myjavaworld\\zip\\Zip.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Registers a handler for handling Preferences event.\n */\n", "func_signal": "private static void registerPreferencesHandler()", "code": "{\n\tregisterHandler(\"com.apple.eawt.PreferencesHandler\",\n\t\t\t\"setPreferencesHandler\");\n}", "path": "src\\main\\java\\com\\myjavaworld\\jftp\\OSXAdapter.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Computes and returns the enry name for the given file.\n * \n * @param file\n *            file to add.\n * @return entry name\n */\n", "func_signal": "private String computeEntryName(File file)", "code": "{\n\tString entryName = null;\n\tString path = null;\n\ttry {\n\t\tpath = file.getCanonicalPath();\n\t} catch (IOException exp) {\n\t\tpath = file.getAbsolutePath();\n\t}\n\tif (relativeTo == null) {\n\t\tentryName = path;\n\t} else {\n\t\tentryName = path.substring(relativeTo.length());\n\t}\n\tif (entryName.startsWith(File.separator)) {\n\t\tentryName = entryName.substring(1);\n\t}\n\tif (File.separatorChar != '/') {\n\t\tentryName = entryName.replace(File.separatorChar, '/');\n\t}\n\tif (file.isDirectory()) {\n\t\tentryName += \"/\";\n\t}\n\treturn entryName;\n}", "path": "src\\main\\java\\com\\myjavaworld\\zip\\Zip.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Utility method for enabling full-screen mode for the specified window.\n * \n * @param window\n *            the reference to the window object\n */\n", "func_signal": "public static void enableFullScreenMode(Window window)", "code": "{\n\tif (macOSXApplication == null) {\n\t\treturn;\n\t}\n\ttry {\n\t\tClass<?> c = Class.forName(\"com.apple.eawt.FullScreenUtilities\");\n\t\tMethod method = c.getMethod(\"setWindowCanFullScreen\", new Class[] {\n\t\t\t\tWindow.class, boolean.class });\n\t\tmethod.invoke(null, window, true);\n\t} catch (Throwable t) {\n\t\tSystem.err.println(\"Unable to set fullscreen mode for window\");\n\t\tt.printStackTrace();\n\t}\n}", "path": "src\\main\\java\\com\\myjavaworld\\jftp\\OSXAdapter.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Cascades all visible and non-iconified internal windows in this desktop.\n * The minimized Internal Windows will remain unchanged. The currently\n * selected window will still remain as the selected window in the desktop\n * pane.\n * \n */\n", "func_signal": "public void cascade()", "code": "{\n\tJInternalFrame[] allFrames = getAllFrames();\n\tif (allFrames == null || allFrames.length == 0) {\n\t\treturn;\n\t}\n\tVector v = new Vector(allFrames.length);\n\tfor (int i = allFrames.length - 1; i >= 0; i--) {\n\t\tif (allFrames[i].isIcon() || allFrames[i].isClosed()) {\n\t\t\tcontinue;\n\t\t}\n\t\tv.add(allFrames[i]);\n\t}\n\tJInternalFrame[] frames = new JInternalFrame[v.size()];\n\tframes = (JInternalFrame[]) v.toArray(frames);\n\tif (frames.length == 0) {\n\t\treturn;\n\t}\n\tfinal int n = Math.min(7, frames.length);\n\tDimension desktopSize = getSize();\n\tint vSpacing = frames[0].getHeight()\n\t\t\t- frames[0].getRootPane().getHeight();\n\tDimension spacing = new Dimension(25, vSpacing);\n\tDimension maxSize = new Dimension(desktopSize.width - (n - 1)\n\t\t\t* spacing.width, desktopSize.height - (n - 1) * spacing.height);\n\tPoint location = new Point(0, 0);\n\tint j = 0;\n\tfor (int i = 0; i < frames.length; i++) {\n\t\tframes[i].setBounds(location.x, location.y, maxSize.width,\n\t\t\t\tmaxSize.height);\n\t\tj++;\n\t\tif (j % n == 0) {\n\t\t\tlocation.x = 0;\n\t\t\tlocation.y = 0;\n\t\t} else {\n\t\t\tlocation.x += spacing.width;\n\t\t\tlocation.y += spacing.height;\n\t\t}\n\t}\n}", "path": "src\\main\\java\\com\\myjavaworld\\gui\\MDesktopPane.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Adds a new entry to this <code>ZipFile</code>.\n * \n * @param file\n * @throws IOException\n */\n", "func_signal": "public void addEntry(File file) throws IOException", "code": "{\n\tif (zout == null) {\n\t\tthrow new IllegalStateException(\n\t\t\t\t\"Zip File was never opened or is already closed. \");\n\t}\n\t// Let's not try to add the file that we are creating to itself.\n\tif (file.equals(this.file)) {\n\t\treturn;\n\t}\n\tZipEntry entry = new ZipEntry(computeEntryName(file));\n\tentry.setTime(file.lastModified());\n\tzout.putNextEntry(entry);\n\tif (file.isFile()) {\n\t\taddFile(file);\n\t\tzout.closeEntry();\n\t} else if (file.isDirectory()) {\n\t\tzout.closeEntry();\n\t\tLocalFile[] children = new LocalFile(file).list(filter);\n\t\tif (children != null) {\n\t\t\tfor (int i = 0; i < children.length; i++) {\n\t\t\t\taddEntry(children[i].getFile());\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\main\\java\\com\\myjavaworld\\zip\\Zip.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Creates an instance of <code>GeneralPrefsPanel</code>.\n * \n */\n", "func_signal": "public GeneralConnectionPrefsPanel()", "code": "{\n\tsuper();\n\tsetLayout(new GridBagLayout());\n\tinitComponents();\n}", "path": "src\\main\\java\\com\\myjavaworld\\jftp\\GeneralConnectionPrefsPanel.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Sets the directory, relative to which all entries will be added to the\n * zip file.\n * \n * @param relativeTo\n *            directory, relative to which the entries will be added.\n */\n", "func_signal": "public void setRelativeTo(File relativeTo)", "code": "{\n\ttry {\n\t\tthis.relativeTo = relativeTo.getCanonicalPath();\n\t} catch (IOException exp) {\n\t\tthis.relativeTo = relativeTo.getAbsolutePath();\n\t}\n}", "path": "src\\main\\java\\com\\myjavaworld\\zip\\Zip.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Sets the dock icon for the application.\n */\n", "func_signal": "private static void handleDockIcon()", "code": "{\n\ttry {\n\t\tMethod method = macOSXApplication.getClass().getMethod(\n\t\t\t\t\"setDockIconImage\", Image.class);\n\t\tImage image = Toolkit.getDefaultToolkit().getImage(\n\t\t\t\tJFTP.class.getResource(\"jftp128.gif\"));\n\t\tmethod.invoke(macOSXApplication, new Object[] { image });\n\t} catch (Throwable t) {\n\t\tSystem.err.println(\"Unable to set the dock icon\");\n\t\tt.printStackTrace();\n\t}\n}", "path": "src\\main\\java\\com\\myjavaworld\\jftp\\OSXAdapter.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * @param filter\n */\n", "func_signal": "public void setFilter(Filter filter)", "code": "{\n\tif (filter != null) {\n\t\tRemoteFileFilter rff = (RemoteFileFilter) filter;\n\t\tradioExclusionFilter.setSelected(rff.isExclusionFilter());\n\t\tRegexFilter regexFilter = rff.getRegexFilter();\n\t\tDateFilter dateFilter = rff.getDateFilter();\n\t\tif (regexFilter != null) {\n\t\t\ttfRegexFilter.setText(regexFilter.getPattern().pattern());\n\t\t\tcbCaseSensitive\n\t\t\t\t\t.setSelected((regexFilter.getPattern().flags() & Pattern.CASE_INSENSITIVE) == 0);\n\t\t}\n\t\tif (dateFilter != null) {\n\t\t\tDate startDate = dateFilter.getStartDate();\n\t\t\tDate endDate = dateFilter.getEndDate();\n\t\t\tif (startDate != null) {\n\t\t\t\ttfStartDate.setText(SDF.format(startDate));\n\t\t\t}\n\t\t\tif (endDate != null) {\n\t\t\t\ttfEndDate.setText(SDF.format(endDate));\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\main\\java\\com\\myjavaworld\\jftp\\RemoteFileFilterDlg.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * @return\n */\n", "func_signal": "public Filter getFilter()", "code": "{\n\tif (!approved) {\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn new RemoteFileFilter(getRegexFilter(), getDateFilter(),\n\t\t\t\tradioExclusionFilter.isSelected());\n\t} catch (Exception exp) {\n\t\treturn null;\n\t}\n\n}", "path": "src\\main\\java\\com\\myjavaworld\\jftp\\RemoteFileFilterDlg.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Initializes this Adapter for the given JFTPApplication.\n * \n * @param jftpApplication\n *            a reference to the JFTPApplication\n */\n", "func_signal": "public static void init(JFTPApplication jftpApplication)", "code": "{\n\tOSXAdapter.jftpApplication = jftpApplication;\n\tcreateMacOSXApplication();\n\tif (macOSXApplication == null) {\n\t\treturn;\n\t}\n\teventHandler = new MacOSXEventHandler();\n\thandleDockIcon();\n\tregisterQuitHandler();\n\tregisterAboutHandler();\n\tregisterPreferencesHandler();\n}", "path": "src\\main\\java\\com\\myjavaworld\\jftp\\OSXAdapter.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Registers a handler for a specific event.\n * \n * @param handlerClassName\n *            the event handler interface name (e.g.\n *            com.apple.eawt.AboutHandler).\n * @param registrationMethodName\n *            the name of the method defined in the\n *            com.apple.eawt.Application class for registering the above\n *            event handler.\n */\n", "func_signal": "private static void registerHandler(String handlerClassName,\n\t\tString registrationMethodName)", "code": "{\n\ttry {\n\t\tClass<?> handlerClass = Class.forName(handlerClassName);\n\t\t// Create a proxy for the given interface. We use our common class,\n\t\t// MacOSXEventHandler for handling all events.\n\t\tObject proxy = Proxy.newProxyInstance(\n\t\t\t\thandlerClass.getClassLoader(),\n\t\t\t\tnew Class[] { handlerClass }, eventHandler);\n\t\t// Invoke the event handler registration method on the Application\n\t\t// object.\n\t\tMethod method = macOSXApplication.getClass().getMethod(\n\t\t\t\tregistrationMethodName, handlerClass);\n\t\tmethod.invoke(macOSXApplication, proxy);\n\t} catch (Throwable t) {\n\t\tSystem.err.println(\"Unable to register event handler: \"\n\t\t\t\t+ handlerClassName);\n\t\tt.printStackTrace();\n\t}\n}", "path": "src\\main\\java\\com\\myjavaworld\\jftp\\OSXAdapter.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Creates an instance of <code>LocalFileFilterDlg</code>.\n * \n * @param parent\n */\n", "func_signal": "public RemoteFileFilterDlg(Frame parent)", "code": "{\n\tsuper(parent);\n\tsetTitle(resources.getString(\"title.dialog\"));\n\tsetModal(true);\n\tgetContentPane().setLayout(new GridBagLayout());\n\tJFTPHelp2.getInstance().enableHelpKey(getRootPane(), HELP_ID);\n\tinitComponents();\n\tpack();\n}", "path": "src\\main\\java\\com\\myjavaworld\\jftp\\RemoteFileFilterDlg.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Reflectively gets a reference to the Mac OS X Application object and\n * assigns it to the class variable for later use.\n */\n", "func_signal": "private static void createMacOSXApplication()", "code": "{\n\tString applicationClassName = \"com.apple.eawt.Application\";\n\ttry {\n\t\tClass<?> applicationClass = Class.forName(applicationClassName);\n\t\tMethod method = applicationClass.getMethod(\"getApplication\");\n\t\tmacOSXApplication = method.invoke(null);\n\t} catch (Throwable exp) {\n\t\tSystem.err.println(\"Unable to get a reference to: \"\n\t\t\t\t+ applicationClassName);\n\t\texp.printStackTrace();\n\t}\n}", "path": "src\\main\\java\\com\\myjavaworld\\jftp\\OSXAdapter.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Creates an instance of <code>NumericCellRenderer</code>.\n * \n */\n", "func_signal": "public NumericCellRenderer()", "code": "{\n\tsuper();\n\tsetHorizontalAlignment(SwingConstants.RIGHT);\n\tformatter = NumberFormat.getNumberInstance();\n}", "path": "src\\main\\java\\com\\myjavaworld\\gui\\NumericCellRenderer.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Creates an instance of <code>ZipFile</code>.\n * \n * @param file\n *            compressed file to create\n */\n", "func_signal": "public Zip(File file)", "code": "{\n\tthis.file = file;\n\tlistenerList = new EventListenerList();\n}", "path": "src\\main\\java\\com\\myjavaworld\\zip\\Zip.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Created an instance of <code>MPlainDocument</code>.\n * \n */\n", "func_signal": "public MPlainDocument()", "code": "{\n\tsuper();\n\tthis.maximumLength = Integer.MAX_VALUE;\n\tthis.characterCase = MTextComponent.MIXED_CASE;\n}", "path": "src\\main\\java\\com\\myjavaworld\\gui\\MPlainDocument.java", "repo_name": "sai-pullabhotla/jftp", "stars": 16, "license": "apache-2.0", "language": "java", "size": 1610}
{"docstring": "/**\n * Claim the next batch of sequence numbers for publishing with a timeout.\n * If the timeout occurs the sequence will not be claimed and a {@link TimeoutException} will be thrown.\n *\n * @param batchDescriptor to be updated for the batch range.\n * @param timeout period to wait\n * @param sourceUnit for the timeout period.\n * @return the updated batchDescriptor.\n * @throws TimeoutException if the timeout period elapses\n */\n", "func_signal": "public BatchDescriptor next(final BatchDescriptor batchDescriptor, final long timeout, final TimeUnit sourceUnit)\n    throws TimeoutException", "code": "{\n    waitForCapacity(batchDescriptor.getSize(), timeout, sourceUnit);\n\n    return next(batchDescriptor);\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\Sequencer.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * It is ok to have another thread re-run this method after a halt().\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n    if (!running.compareAndSet(false, true))\n    {\n        throw new IllegalStateException(\"Thread is already running\");\n    }\n    sequenceBarrier.clearAlert();\n\n    notifyStart();\n\n    boolean processedSequence = true;\n    long nextSequence = sequence.get();\n    T event = null;\n    while (true)\n    {\n        try\n        {\n            if (processedSequence)\n            {\n                processedSequence = false;\n                nextSequence = workSequence.incrementAndGet();\n                sequence.set(nextSequence - 1L);\n            }\n\n            sequenceBarrier.waitFor(nextSequence);\n            event = ringBuffer.get(nextSequence);\n            workHandler.onEvent(event);\n\n            processedSequence = true;\n        }\n        catch (final AlertException ex)\n        {\n            if (!running.get())\n            {\n                break;\n            }\n        }\n        catch (final Throwable ex)\n        {\n            exceptionHandler.handleEventException(ex, nextSequence, event);\n            processedSequence = true;\n        }\n    }\n\n    notifyShutdown();\n\n    running.set(false);\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\WorkProcessor.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Claim the next event in sequence for publishing with a timeout.\n * If the timeout occurs the sequence will not be claimed and a {@link TimeoutException} will be thrown.\n *\n * @param timeout period to wait\n * @param sourceUnit for the timeout period.\n * @return the claimed sequence value\n * @throws TimeoutException if the timeout period elapses\n */\n", "func_signal": "public long next(final long timeout, final TimeUnit sourceUnit) throws TimeoutException", "code": "{\n    waitForCapacity(1, timeout, sourceUnit);\n\n    return next();\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\Sequencer.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Construct a {@link WorkProcessor}.\n *\n * @param ringBuffer to which events are published.\n * @param sequenceBarrier on which it is waiting.\n * @param workHandler is the delegate to which events are dispatched.\n * @param exceptionHandler to be called back when an error occurs\n * @param workSequence from which to claim the next event to be worked on.  It should always be initialised\n * as {@link Sequencer#INITIAL_CURSOR_VALUE}\n */\n", "func_signal": "public WorkProcessor(final RingBuffer<T> ringBuffer,\n                     final SequenceBarrier sequenceBarrier,\n                     final WorkHandler<T> workHandler,\n                     final ExceptionHandler exceptionHandler,\n                     final AtomicLong workSequence)", "code": "{\n    this.ringBuffer = ringBuffer;\n    this.sequenceBarrier = sequenceBarrier;\n    this.workHandler = workHandler;\n    this.exceptionHandler = exceptionHandler;\n    this.workSequence = workSequence;\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\WorkProcessor.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Construct a {@link EventProcessor} that will automatically track the progress by updating its sequence when\n * the {@link EventHandler#onEvent(Object, long, boolean)} method returns.\n *\n * @param ringBuffer to which events are published.\n * @param sequenceBarrier on which it is waiting.\n * @param eventHandler is the delegate to which events are dispatched.\n */\n", "func_signal": "public BatchEventProcessor(final RingBuffer<T> ringBuffer,\n                           final SequenceBarrier sequenceBarrier,\n                           final EventHandler<T> eventHandler)", "code": "{\n    this.ringBuffer = ringBuffer;\n    this.sequenceBarrier = sequenceBarrier;\n    this.eventHandler = eventHandler;\n\n    if (eventHandler instanceof SequenceReportingEventHandler)\n    {\n        ((SequenceReportingEventHandler<?>)eventHandler).setSequenceCallback(sequence);\n    }\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\BatchEventProcessor.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Add a {@link Sequence} into this aggregate.\n *\n * @param sequence to be added to the aggregate.\n */\n", "func_signal": "public void add(final Sequence sequence)", "code": "{\n    Sequence[] oldSequences;\n    Sequence[] newSequences;\n    do\n    {\n        oldSequences = sequencesRef.get();\n        final int oldSize = oldSequences.length;\n        newSequences = new Sequence[oldSize + 1];\n        System.arraycopy(oldSequences, 0, newSequences, 0, oldSize);\n        newSequences[oldSize] = sequence;\n    }\n    while (!sequencesRef.compareAndSet(oldSequences, newSequences));\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\SequenceGroup.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Publishes an event to the ring buffer.  It handles\n * claiming the next sequence, getting the current (uninitialized) \n * event from the ring buffer and publishing the claimed sequence\n * after translation.\n * \n * @param translator The user specified translation for the event\n * @throws TimeoutException \n */\n", "func_signal": "public void publishEvent(final EventTranslator<E> translator, long timeout, TimeUnit units) throws TimeoutException", "code": "{\n    final long sequence = ringBuffer.next(timeout, units);\n    translateAndPublish(translator, sequence);\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\EventPublisher.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Publishes an event to the ring buffer.  It handles\n * claiming the next sequence, getting the current (uninitialized) \n * event from the ring buffer and publishing the claimed sequence\n * after translation.\n * \n * @param translator The user specified translation for the event\n */\n", "func_signal": "public void publishEvent(final EventTranslator<E> translator)", "code": "{\n    final long sequence = ringBuffer.next();\n    translateAndPublish(translator, sequence);\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\EventPublisher.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Construct a RingBuffer with default strategies of:\n * {@link MultiThreadedClaimStrategy} and {@link BlockingWaitStrategy}\n *\n * @param eventFactory to newInstance entries for filling the RingBuffer\n * @param bufferSize of the RingBuffer that will be rounded up to the next power of 2\n */\n", "func_signal": "public RingBuffer(final EventFactory<T> eventFactory, final int bufferSize)", "code": "{\n    this(eventFactory,\n         new MultiThreadedClaimStrategy(bufferSize),\n         new BlockingWaitStrategy());\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\RingBuffer.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "///////////////////////////////////////////////////////////////////////////////////////////////\n", "func_signal": "@Test\npublic void shouldCompareDisruptorVsQueues() throws Exception", "code": "{\n    final int RUNS = 3;\n\n    BigDecimal queueMeanLatency[] = new BigDecimal[RUNS];\n    BigDecimal disruptorMeanLatency[] = new BigDecimal[RUNS];\n\n    if (\"true\".equalsIgnoreCase(System.getProperty(\"com.lmax.runQueueTests\", \"true\")))\n    {\n        for (int i = 0; i < RUNS; i++)\n        {\n            System.gc();\n            histogram.clear();\n\n            runQueuePass();\n\n            assertThat(Long.valueOf(histogram.getCount()), is(Long.valueOf(ITERATIONS)));\n            queueMeanLatency[i] = histogram.getMean();\n\n            System.out.format(\"%s run %d BlockingQueue %s\\n\", getClass().getSimpleName(), Long.valueOf(i), histogram);\n            dumpHistogram(System.out);\n        }\n    }\n    else\n    {\n        for (int i = 0; i < RUNS; i++)\n        {\n            queueMeanLatency[i] = new BigDecimal(Long.MAX_VALUE);\n        }\n    }\n\n    for (int i = 0; i < RUNS; i++)\n    {\n        System.gc();\n        histogram.clear();\n\n        runDisruptorPass();\n\n        assertThat(Long.valueOf(histogram.getCount()), is(Long.valueOf(ITERATIONS)));\n        disruptorMeanLatency[i] = histogram.getMean();\n\n        System.out.format(\"%s run %d Disruptor %s\\n\", getClass().getSimpleName(), Long.valueOf(i), histogram);\n        dumpHistogram(System.out);\n    }\n\n    for (int i = 0; i < RUNS; i++)\n    {\n        assertTrue(queueMeanLatency[i].compareTo(disruptorMeanLatency[i]) > 0);\n    }\n}", "path": "src\\performance\\java\\com\\lmax\\disruptor\\ThrottledOnePublisherToThreeProcessorPipelineLatencyTest.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Remove the first occurrence of the {@link Sequence} from this aggregate.\n *\n * @param sequence to be removed from this aggregate.\n * @return true if the sequence was removed otherwise false.\n */\n", "func_signal": "public boolean remove(final Sequence sequence)", "code": "{\n    boolean found = false;\n    Sequence[] oldSequences;\n    Sequence[] newSequences;\n    do\n    {\n        oldSequences = sequencesRef.get();\n        final int oldSize = oldSequences.length;\n        newSequences = new Sequence[oldSize - 1];\n\n        int pos = 0;\n        for (int i = 0; i < oldSize; i++)\n        {\n            final Sequence testSequence = oldSequences[i];\n            if (sequence == testSequence && !found)\n            {\n                found = true;\n            }\n            else\n            {\n                newSequences[pos++] = testSequence;\n            }\n        }\n\n        if (!found)\n        {\n            break;\n        }\n    }\n    while (!sequencesRef.compareAndSet(oldSequences, newSequences));\n\n    return found;\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\SequenceGroup.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Construct a Sequencer with the selected strategies.\n *\n * @param claimStrategy for those claiming sequences.\n * @param waitStrategy for those waiting on sequences.\n */\n", "func_signal": "public Sequencer(final ClaimStrategy claimStrategy, final WaitStrategy waitStrategy)", "code": "{\n    this.claimStrategy = claimStrategy;\n    this.waitStrategy = waitStrategy;\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\Sequencer.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Set a new {@link ExceptionHandler} for handling exceptions propagated out of the {@link BatchEventProcessor}\n *\n * @param exceptionHandler to replace the existing exceptionHandler.\n */\n", "func_signal": "public void setExceptionHandler(final ExceptionHandler exceptionHandler)", "code": "{\n    if (null == exceptionHandler)\n    {\n        throw new NullPointerException();\n    }\n\n    this.exceptionHandler = exceptionHandler;\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\BatchEventProcessor.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Claim a specific sequence when only one publisher is involved.\n *\n * @param sequence to be claimed.\n * @return sequence just claimed.\n */\n", "func_signal": "public long claim(final long sequence)", "code": "{\n    if (null == gatingSequences)\n    {\n        throw new NullPointerException(\"gatingSequences must be set before claiming sequences\");\n    }\n\n    claimStrategy.setSequence(sequence, gatingSequences);\n\n    return sequence;\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\Sequencer.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Claim the next batch of sequence numbers for publishing.\n *\n * @param batchDescriptor to be updated for the batch range.\n * @return the updated batchDescriptor.\n */\n", "func_signal": "public BatchDescriptor next(final BatchDescriptor batchDescriptor)", "code": "{\n    if (null == gatingSequences)\n    {\n        throw new NullPointerException(\"gatingSequences must be set before claiming sequences\");\n    }\n\n    final long sequence = claimStrategy.incrementAndGet(batchDescriptor.getSize(), gatingSequences);\n    batchDescriptor.setEnd(sequence);\n    return batchDescriptor;\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\Sequencer.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Construct a RingBuffer with the full option set.\n *\n * @param eventFactory to newInstance entries for filling the RingBuffer\n * @param claimStrategy threading strategy for publisher claiming entries in the ring.\n * @param waitStrategy waiting strategy employed by processorsToTrack waiting on entries becoming available.\n *\n * @throws IllegalArgumentException if bufferSize is not a power of 2\n */\n", "func_signal": "public RingBuffer(final EventFactory<T> eventFactory,\n                  final ClaimStrategy claimStrategy,\n                  final WaitStrategy waitStrategy)", "code": "{\n    super(claimStrategy, waitStrategy);\n\n    if (Integer.bitCount(claimStrategy.getBufferSize()) != 1)\n    {\n        throw new IllegalArgumentException(\"bufferSize must be a power of 2\");\n    }\n\n    indexMask = claimStrategy.getBufferSize() - 1;\n    entries = new Object[claimStrategy.getBufferSize()];\n\n    fill(eventFactory);\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\RingBuffer.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Claim the next event in sequence for publishing.\n *\n * @return the claimed sequence value\n */\n", "func_signal": "public long next()", "code": "{\n    if (null == gatingSequences)\n    {\n        throw new NullPointerException(\"gatingSequences must be set before claiming sequences\");\n    }\n\n    return claimStrategy.incrementAndGet(gatingSequences);\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\Sequencer.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Set all {@link Sequence}s in the group to a given value.\n *\n * @param value to set the group of sequences to.\n */\n", "func_signal": "@Override\npublic void set(final long value)", "code": "{\n    final Sequence[] sequences = sequencesRef.get();\n    for (int i = 0, size = sequences.length; i < size; i++)\n    {\n        sequences[i].set(value);\n    }\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\SequenceGroup.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Force the publication of a cursor sequence.\n *\n * Only use this method when forcing a sequence and you are sure only one publisher exists.\n * This will cause the cursor to advance to this sequence.\n *\n * @param sequence which is to be forced for publication.\n */\n", "func_signal": "public void forcePublish(final long sequence)", "code": "{\n    cursor.set(sequence);\n    waitStrategy.signalAllWhenBlocking();\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\Sequencer.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * It is ok to have another thread rerun this method after a halt().\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n    if (!running.compareAndSet(false, true))\n    {\n        throw new IllegalStateException(\"Thread is already running\");\n    }\n    sequenceBarrier.clearAlert();\n\n    notifyStart();\n\n    T event = null;\n    long nextSequence = sequence.get() + 1L;\n    while (true)\n    {\n        try\n        {\n            final long availableSequence = sequenceBarrier.waitFor(nextSequence);\n            while (nextSequence <= availableSequence)\n            {\n                event = ringBuffer.get(nextSequence);\n                eventHandler.onEvent(event, nextSequence, nextSequence == availableSequence);\n                nextSequence++;\n            }\n\n            sequence.set(nextSequence - 1L);\n        }\n        catch (final AlertException ex)\n        {\n           if (!running.get())\n           {\n               break;\n           }\n        }\n        catch (final Throwable ex)\n        {\n            exceptionHandler.handleEventException(ex, nextSequence, event);\n            sequence.set(nextSequence);\n            nextSequence++;\n        }\n    }\n\n    notifyShutdown();\n\n    running.set(false);\n}", "path": "src\\main\\java\\com\\lmax\\disruptor\\BatchEventProcessor.java", "repo_name": "jbrisbin/disruptor", "stars": 20, "license": "None", "language": "java", "size": 193}
{"docstring": "/**\n * Indicates whether the specified action can be used as an intent. This\n * method queries the package manager for installed packages that can\n * respond to the specified intent. If no suitable package is\n * found, this method returns false.\n *\n * @param context The application's environment.\n * @param intent The Intent to check for availability.\n *\n * @return True if an Intent with the specified action can be sent and\n *         responded to, false otherwise.\n */\n", "func_signal": "public static boolean isIntentAvailable(final Context context, final Intent intent)", "code": "{\n    final PackageManager packageManager = context.getPackageManager();\n    List<ResolveInfo> list =\n            packageManager.queryIntentActivities(intent,\n                    PackageManager.MATCH_DEFAULT_ONLY);\n    return list.size() > 0;\n}", "path": "src\\org\\openintents\\util\\IntentUtils.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/*\n@Override\n\tprotected void onResume() {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.onResume();\n\t}\n*/\n", "func_signal": "@Override\n \tprotected void onSaveInstanceState(Bundle outState)", "code": "{\n \t\t// TODO Auto-generated method stub\n \t\tsuper.onSaveInstanceState(outState);\n \t\t\n \t\t// remember file name\n \t\toutState.putString(BUNDLE_CURRENT_DIRECTORY, currentDirectory.getAbsolutePath());\n \t\toutState.putString(BUNDLE_CONTEXT_FILE, mContextFile.getAbsolutePath());\n \t\toutState.putString(BUNDLE_CONTEXT_TEXT, mContextText);\n \t\tboolean show = isDirectoryInputVisible();\n \t\toutState.putBoolean(BUNDLE_SHOW_DIRECTORY_INPUT, show);\n \t\toutState.putInt(BUNDLE_STEPS_BACK, mStepsBack);\n \t}", "path": "src\\org\\openintents\\filemanager\\FileManagerActivity.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * Show the directory line as input box instead of button row.\n * If Directory input does not exist yet, it is created.\n * Since the default is show == false, nothing is created if\n * it is not necessary (like after icicle).\n * @param show\n */\n", "func_signal": "private void showDirectoryInput(boolean show)", "code": "{\n    \t if (show) {\n    \t\t if (mDirectoryInput == null) {\n   \t\t onCreateDirectoryInput();\n   \t }\n    \t }\n    \t if (mDirectoryInput != null) {\n\t    \t mDirectoryInput.setVisibility(show ? View.VISIBLE : View.GONE);\n\t    \t mDirectoryButtons.setVisibility(show ? View.GONE : View.VISIBLE);\n    \t }\n    \t \n    \t refreshDirectoryPanel();\n}", "path": "src\\org\\openintents\\filemanager\\FileManagerActivity.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * This is called after the file manager finished.\n */\n", "func_signal": "@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data)", "code": "{\n\t\tsuper.onActivityResult(requestCode, resultCode, data);\n\n\t\tswitch (requestCode) {\n\t\tcase REQUEST_CODE_MOVE:\n\t\t\tif (resultCode == RESULT_OK && data != null) {\n\t\t\t\t// obtain the filename\n\t\t\t\tFile movefrom = mContextFile;\n\t\t\t\tFile moveto = FileUtils.getFile(data.getData());\n\t\t\t\tif (moveto != null) {\n\t\t\t\t\tmoveto = FileUtils.getFile(moveto, movefrom.getName());\n\t\t\t\t\tmove(movefrom, moveto);\n\t\t\t\t}\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase REQUEST_CODE_COPY:\n\t\t\tif (resultCode == RESULT_OK && data != null) {\n\t\t\t\t// obtain the filename\n\t\t\t\tFile copyfrom = mContextFile;\n\t\t\t\tFile copyto = FileUtils.getFile(data.getData());\n\t\t\t\tif (copyto != null) {\n\t\t\t\t\tcopyto = createUniqueCopyName(this, copyto, copyfrom.getName());\n\t\t\t\t\t\n\t\t\t\t\tif (copyto != null) {\n\t\t\t\t\t\tcopy(copyfrom, copyto);\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\tbreak;\n}\n\t}", "path": "src\\org\\openintents\\filemanager\\FileManagerActivity.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * @param oldFile\n * @param newFile\n */\n", "func_signal": "private void rename(File oldFile, File newFile)", "code": "{\n\tint toast = 0;\n\tif (oldFile.renameTo(newFile)) {\n\t\t// Rename was successful.\n\t\trefreshList();\n\t\tif (newFile.isDirectory()) {\n\t\t\ttoast = R.string.folder_renamed;\n\t\t} else {\n\t\t\ttoast = R.string.file_renamed;\n\t\t}\n\t} else {\n\t\tif (newFile.isDirectory()) {\n\t\t\ttoast = R.string.error_renaming_folder;\n\t\t} else {\n\t\t\ttoast = R.string.error_renaming_file;\n\t\t}\n\t}\n\tToast.makeText(this, toast, Toast.LENGTH_SHORT).show();\n}", "path": "src\\org\\openintents\\filemanager\\FileManagerActivity.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/*@ RETURNS: A file name that is guaranteed to not exist yet.\n * \n * PARAMS:\n *   context - Application context.\n *   path - The path that the file is supposed to be in.\n *   fileName - Desired file name. This name will be modified to\n *     create a unique file if necessary.\n * \n */\n", "func_signal": "private File createUniqueCopyName(Context context, File path, String fileName)", "code": "{\n\t// Does that file exist?\n\tFile file = FileUtils.getFile(path, fileName);\n\t\n\tif (!file.exists()) {\n\t\t// Nope - we can take that.\n\t\treturn file;\n\t}\n\t\n\t// Try a simple \"copy of\".\n\tfile = FileUtils.getFile(path, context.getString(R.string.copied_file_name, fileName));\n\t\n\tif (!file.exists()) {\n\t\t// Nope - we can take that.\n\t\treturn file;\n\t}\n\t\n\tint copyIndex = 2;\n\t\n\t// Well, we gotta find a unique name at some point.\n\twhile (copyIndex < 500) {\n\t\tfile = FileUtils.getFile(path, context.getString(R.string.copied_file_name_2, copyIndex, fileName));\n\t\t\n\t\tif (!file.exists()) {\n\t\t\t// Nope - we can take that.\n\t\t\treturn file;\n\t\t}\n\n\t\tcopyIndex++;\n\t}\n\n\t// I GIVE UP.\n\treturn null;\n}", "path": "src\\org\\openintents\\filemanager\\FileManagerActivity.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * \n */\n", "func_signal": "private void refreshDirectoryPanel()", "code": "{\n\tif (isDirectoryInputVisible()) {\n\t\t// Set directory path\n\t\tString path = currentDirectory.getAbsolutePath();\n\t\tmEditDirectory.setText(path);\n\t\t\n\t\t// Set selection to last position so user can continue to type:\n\t\tmEditDirectory.setSelection(path.length());\n\t} else {\n\t\tsetDirectoryButtons();\n\t}\n}", "path": "src\\org\\openintents\\filemanager\\FileManagerActivity.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * Start an activity but prompt a toast if activity is not found\n * (instead of crashing).\n * \n * @param context\n * @param intent\n */\n", "func_signal": "private static void startSaveActivity(Context context, Intent intent)", "code": "{\n\ttry {\n\t\tcontext.startActivity(intent);\n\t} catch (ActivityNotFoundException e) {\n\t\tToast.makeText(context,\n\t\t\t\tRD.string.update_error,\n\t\t\t\tToast.LENGTH_SHORT).show();\n\t\tLog.e(TAG, \"Error starting activity.\", e);\n\t}\n}", "path": "src\\org\\openintents\\distribution\\UpdateMenu.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * Jump to some location by clicking on a \n * directory button.\n * \n * This resets the counter for \"back\" actions.\n * \n * @param aDirectory\n */\n", "func_signal": "private void jumpTo(final File aDirectory)", "code": "{\n    \t mStepsBack = 0;\n    \t browseTo(aDirectory);\n}", "path": "src\\org\\openintents\\filemanager\\FileManagerActivity.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * Adds a menu item for update only if update checker is not installed.\n * \n * @param context\n * @param menu\n * @param groupId\n * @param itemId\n * @param order\n * @param titleRes\n * @return\n */\n", "func_signal": "public static MenuItem addUpdateMenu(Context context, Menu menu, int groupId,\n\t\tint itemId, int order, int titleRes)", "code": "{\n\tPackageInfo pi = null;\n\ttry {\n\t\tpi = context.getPackageManager().getPackageInfo(\n\t\t\t\tUPDATE_CHECKER, 0);\n\t} catch (NameNotFoundException e) {\n\t\t// ignore\n\t}\n\tif (pi == null) {\n\t\treturn menu.add(groupId, itemId, order, titleRes).setIcon(\n\t\t\t\tandroid.R.drawable.ic_menu_info_details).setShortcut('9',\n\t\t\t\t'u');\n\t} else {\n\t\treturn null;\n\t}\n}", "path": "src\\org\\openintents\\distribution\\UpdateMenu.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * Convert File into Uri.\n * @param file\n * @return uri\n */\n", "func_signal": "public static Uri getUri(File file)", "code": "{\n\tif (file != null) {\n\t\treturn Uri.fromFile(file);\n\t}\n\treturn null;\n}", "path": "src\\org\\openintents\\filemanager\\util\\FileUtils.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * Gets the extension of a file name, like \".png\" or \".jpg\".\n * \n * @param uri\n * @return Extension including the dot(\".\"); \"\" if there is no extension;\n *         null if uri was null.\n */\n", "func_signal": "public static String getExtension(String uri)", "code": "{\n\tif (uri == null) {\n\t\treturn null;\n\t}\n\n\tint dot = uri.lastIndexOf(\".\");\n\tif (dot >= 0) {\n\t\treturn uri.substring(dot);\n\t} else {\n\t\t// No extension.\n\t\treturn \"\";\n\t}\n}", "path": "src\\org\\openintents\\filemanager\\util\\FileUtils.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * Whether the URI is a local one.\n * \n * @param uri\n * @return\n */\n", "func_signal": "public static boolean isLocal(String uri)", "code": "{\n\tif (uri != null && !uri.startsWith(\"http://\")) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "src\\org\\openintents\\filemanager\\util\\FileUtils.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * Browse to some location by clicking on a list item.\n * @param aDirectory\n */\n", "func_signal": "private void browseTo(final File aDirectory)", "code": "{ \n     // setTitle(aDirectory.getAbsolutePath());\n     \n     if (aDirectory.isDirectory()){\n   \t  if (aDirectory.equals(currentDirectory)) {\n   \t\t  // Switch from button to directory input\n   \t\t  showDirectoryInput(true);\n   \t  } else {\n   \t\t   mPreviousDirectory = currentDirectory;\n\t               currentDirectory = aDirectory;\n\t               refreshList();\n//\t               selectInList(previousDirectory);\n\t//               refreshDirectoryPanel();\n   \t  }\n     }else{ \n   \t  if (mState == STATE_BROWSE || mState == STATE_PICK_DIRECTORY) {\n\t              // Lets start an intent to View the file, that was clicked... \n\t        \t  openFile(aDirectory); \n   \t  } else if (mState == STATE_PICK_FILE) {\n   \t\t  // Pick the file\n   \t\t  mEditFilename.setText(aDirectory.getName());\n   \t  }\n     } \n}", "path": "src\\org\\openintents\\filemanager\\FileManagerActivity.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * Returns true if uri is a media uri.\n * \n * @param uri\n * @return\n */\n", "func_signal": "public static boolean isMediaUri(String uri)", "code": "{\n\tif (uri.startsWith(Audio.Media.INTERNAL_CONTENT_URI.toString())\n\t\t\t|| uri.startsWith(Audio.Media.EXTERNAL_CONTENT_URI.toString())\n\t\t\t|| uri.startsWith(Video.Media.INTERNAL_CONTENT_URI.toString())\n\t\t\t|| uri.startsWith(Video.Media.EXTERNAL_CONTENT_URI.toString())) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "path": "src\\org\\openintents\\filemanager\\util\\FileUtils.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * \n */\n", "func_signal": "private void getMimeTypes()", "code": "{\n    \t MimeTypeParser mtp = new MimeTypeParser();\n\n    \t XmlResourceParser in = getResources().getXml(R.xml.mimetypes);\n\n    \t try {\n    \t\t mMimeTypes = mtp.fromXmlResource(in);\n    \t } catch (XmlPullParserException e) {\n    \t\t Log\n    \t\t .e(\n    \t\t\t\t TAG,\n    \t\t\t\t \"PreselectedChannelsActivity: XmlPullParserException\",\n    \t\t\t\t e);\n    \t\t throw new RuntimeException(\n    \t\t \"PreselectedChannelsActivity: XmlPullParserException\");\n    \t } catch (IOException e) {\n    \t\t Log.e(TAG, \"PreselectedChannelsActivity: IOException\", e);\n    \t\t throw new RuntimeException(\n    \t\t \"PreselectedChannelsActivity: IOException\");\n    \t }\n     }", "path": "src\\org\\openintents\\filemanager\\FileManagerActivity.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * Convert Uri into File.\n * @param uri\n * @return file\n */\n", "func_signal": "public static File getFile(Uri uri)", "code": "{\n\tif (uri != null) {\n\t\tString filepath = uri.getPath();\n\t\tif (filepath != null) {\n\t\t\treturn new File(filepath);\n\t\t}\n\t}\n\treturn null;\n}", "path": "src\\org\\openintents\\filemanager\\util\\FileUtils.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * @param oldFile\n * @param newFile\n */\n", "func_signal": "private void move(File oldFile, File newFile)", "code": "{\n\tint toast = 0;\n\tif (oldFile.renameTo(newFile)) {\n\t\t// Rename was successful.\n\t\trefreshList();\n\t\tif (newFile.isDirectory()) {\n\t\t\ttoast = R.string.folder_moved;\n\t\t} else {\n\t\t\ttoast = R.string.file_moved;\n\t\t}\n\t} else {\n\t\tif (newFile.isDirectory()) {\n\t\t\ttoast = R.string.error_moving_folder;\n\t\t} else {\n\t\t\ttoast = R.string.error_moving_file;\n\t\t}\n\t}\n\tToast.makeText(this, toast, Toast.LENGTH_SHORT).show();\n}", "path": "src\\org\\openintents\\filemanager\\FileManagerActivity.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * Shows dialog box with option to upgrade.\n * \n * @param context\n */\n", "func_signal": "public static void showUpdateBox(final Context context)", "code": "{\n\tString version = null;\n\ttry {\n\t\tversion = context.getPackageManager().getPackageInfo(context.getPackageName(), 0).versionName;\n\t} catch (NameNotFoundException e) {\n\t\te.printStackTrace();\n\t}\n\tfinal Intent intent  = new Intent(Intent.ACTION_VIEW);\n\tnew Builder(context).setMessage(context.getString(RD.string.update_box_text, version))\n\t.setPositiveButton(RD.string.update_check_now, new OnClickListener(){\n\n\t\tpublic void onClick(DialogInterface arg0, int arg1) {\n\t\t\tintent.setData(Uri.parse(context.getString(RD.string.update_app_url)));\n\t\t\tstartSaveActivity(context, intent);\n\t\t}\n\t\t\n\t}).setNegativeButton(RD.string.update_get_updater, new OnClickListener(){\n\n\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\tintent.setData(Uri.parse(context.getString(RD.string.update_checker_url)));\n\t\t\tstartSaveActivity(context, intent);\n\t\t}\n\t\t\n\t}).show();\t\t\n}", "path": "src\\org\\openintents\\distribution\\UpdateMenu.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "//*\n", "func_signal": "public static boolean isVideo(String filename)", "code": "{\n\t\tString mimeType = getMimeType(filename);\n\t\tif (mimeType != null && mimeType.startsWith(\"video/\")) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}", "path": "src\\org\\openintents\\filemanager\\util\\FileUtils.java", "repo_name": "ctrlaltdel/TahoeLAFS-android", "stars": 29, "license": "None", "language": "java", "size": 347}
{"docstring": "/**\n * Method description\n *\n *\n * @param cmd_type\n *\n * @return\n */\n", "func_signal": "public Packet commandResult(Command.DataType cmd_type)", "code": "{\n\tPacket result = packetInstance(command.createIqCommand(getStanzaTo(), getStanzaFrom(),\n\t\tStanzaType.result, getStanzaId(), strCommand, cmd_type), getStanzaTo(), getStanzaFrom());\n\n\tresult.setPacketFrom(getTo());\n\tresult.setPacketTo(getFrom());\n\n\treturn result;\n}", "path": "src\\main\\java\\tigase\\server\\Iq.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "/**\n * Constructs ...\n *\n *\n * @param elem\n * @param stanzaFrom\n * @param stanzaTo\n */\n", "func_signal": "public Iq(Element elem, JID stanzaFrom, JID stanzaTo)", "code": "{\n\tsuper(elem, stanzaFrom, stanzaTo);\n\tinit();\n}", "path": "src\\main\\java\\tigase\\server\\Iq.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "/**\n * Method description\n * \n * \n * @param packet\n * @param session\n * @param repo\n * @param results\n * @param settings\n * \n * @throws XMPPException\n */\n", "func_signal": "@Override\npublic void process(final Packet packet, final XMPPResourceConnection session,\n\t\tfinal NonAuthUserRepository repo, final Queue<Packet> results,\n\t\tfinal Map<String, Object> settings) throws XMPPException", "code": "{\n\tif (session == null) {\n\t\treturn;\n\t} // end of if (session == null)\n\n\tif (!session.isAuthorized()) {\n\t\tresults.offer(session.getAuthState().getResponseMessage(packet,\n\t\t\t\t\"Session is not yet authorized.\", false));\n\n\t\treturn;\n\t} // end of if (!session.isAuthorized())\n\n\t// TODO: test what happens if resource is bound multiple times for the same\n\t// user session. in particular if XMPPSession object removes the old\n\t// resource from the list.\n\tElement request = packet.getElement();\n\tStanzaType type = packet.getType();\n\n\ttry {\n\t\tswitch (type) {\n\t\t\tcase set:\n\t\t\t\tString resource = request.getChildCData(\"/iq/bind/resource\");\n\n\t\t\t\ttry {\n\t\t\t\t\tif ((resource == null) || resource.trim().isEmpty()) {\n\t\t\t\t\t\tresource = resourceDefPrefix + (++resGenerator);\n\t\t\t\t\t\tsession.setResource(resource);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsession.setResource(resource);\n\t\t\t\t\t\t} catch (TigaseStringprepException ex) {\n\n\t\t\t\t\t\t\t// User provided resource is invalid, generating different\n\t\t\t\t\t\t\t// server one\n\t\t\t\t\t\t\tlog.log(Level.INFO,\n\t\t\t\t\t\t\t\t\t\"Incrrect resource provided by the user: {0}, generating a \"\n\t\t\t\t\t\t\t\t\t\t\t+ \"different one by the server.\", resource);\n\t\t\t\t\t\t\tresource = resourceDefPrefix + (++resGenerator);\n\t\t\t\t\t\t\tsession.setResource(resource);\n\t\t\t\t\t\t}\n\t\t\t\t\t} // end of if (resource == null) else\n\t\t\t\t} catch (TigaseStringprepException ex) {\n\t\t\t\t\tlog.log(Level.WARNING,\n\t\t\t\t\t\t\t\"stringprep problem with the server generated resource: {0}\", resource);\n\t\t\t\t}\n\n\t\t\t\tpacket.initVars(session.getJID(), packet.getStanzaTo());\n\t\t\t\t// session.putSessionData(RESOURCE_KEY, \"true\");\n\t\t\t\tresults.offer(packet.okResult(new Element(\"jid\", session.getJID().toString()),\n\t\t\t\t\t\t1));\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tresults.offer(Authorization.BAD_REQUEST.getResponseMessage(packet,\n\t\t\t\t\t\t\"Bind type is incorrect\", false));\n\n\t\t\t\tbreak;\n\t\t} // end of switch (type)\n\t} catch (NotAuthorizedException e) {\n\t\tresults.offer(session.getAuthState().getResponseMessage(packet,\n\t\t\t\t\"Session is not yet authorized.\", false));\n\t} // end of try-catch\n}", "path": "src\\main\\java\\tigase\\xmpp\\impl\\BindResource.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "/**\n * Describe <code>process</code> method here.\n *\n * @param packet a <code>Packet</code> value\n * @param session a <code>XMPPResourceConnection</code> value\n * @param repo a <code>NonAuthUserRepository</code> value\n * @param results a <code>Queue</code> value\n * @param settings\n * @throws XMPPException\n */\n", "func_signal": "@Override\npublic void process(Packet packet, XMPPResourceConnection session,\n\t\tNonAuthUserRepository repo, Queue<Packet> results, Map<String, Object> settings)\n\t\tthrows XMPPException", "code": "{\n\n\t// Don't do anything if session is null\n\tif (session == null) {\n\t\tlog.info(\"Session null, dropping packet: \" + packet.toString());\n\n\t\treturn;\n\t}    // end of if (session == null)\n\n\ttry {\n\t\tif ((packet.getStanzaTo() != null)\n\t\t\t\t&&!session.isUserId(packet.getStanzaTo().getBareJID())) {\n\t\t\tresults.offer(Authorization.SERVICE_UNAVAILABLE.getResponseMessage(packet,\n\t\t\t\t\t\"You are not authorized to access this private storage.\", true));\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (packet.getFrom().equals(session.getConnectionId())) {\n\t\t\tList<Element> elems = packet.getElemChildren(\"/iq/query\");\n\n\t\t\tif ((elems != null) && (elems.size() > 0)) {\n\t\t\t\tElement elem = elems.get(0);\n\t\t\t\tStanzaType type = packet.getType();\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase get :\n\t\t\t\t\t\tString priv = session.getData(PRIVATE_KEY, elem.getName() + elem.getXMLNS(),\n\t\t\t\t\t\t\tnull);\n\n\t\t\t\t\t\tif (log.isLoggable(Level.FINEST)) {\n\t\t\t\t\t\t\tlog.finest(\"Loaded private data for key: \" + elem.getName() + \": \" + priv);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (priv != null) {\n\t\t\t\t\t\t\tresults.offer(parseXMLData(priv, packet));\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresults.offer(packet.okResult((String) null, 2));\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase set :\n\t\t\t\t\t\tif (log.isLoggable(Level.FINEST)) {\n\t\t\t\t\t\t\tlog.finest(\"Saving private data: \" + elem.toString());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsession.setData(PRIVATE_KEY, elem.getName() + elem.getXMLNS(), elem.toString());\n\t\t\t\t\t\tresults.offer(packet.okResult((String) null, 0));\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase result :\n\n\t\t\t\t\t\t// Should never happen, it is an error and should be ignored\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault :\n\t\t\t\t\t\tresults.offer(Authorization.BAD_REQUEST.getResponseMessage(packet,\n\t\t\t\t\t\t\t\t\"Request type is incorrect\", false));\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}    // end of switch (type)\n\t\t\t} else {\n\t\t\t\tresults.offer(Authorization.NOT_ACCEPTABLE.getResponseMessage(packet,\n\t\t\t\t\t\t\"Missing query child element\", true));\n\t\t\t}\n\t\t} else {\n\t\t\tresults.offer(Authorization.NOT_AUTHORIZED.getResponseMessage(packet,\n\t\t\t\t\t\"You are not authorized to access this private storage.\", true));\n\t\t}    // end of else\n\t} catch (NotAuthorizedException e) {\n\t\tlog.warning(\"Received privacy request but user session is not authorized yet: \"\n\t\t\t\t+ packet.toString());\n\t\tresults.offer(Authorization.NOT_AUTHORIZED.getResponseMessage(packet,\n\t\t\t\t\"You must authorize session first.\", true));\n\t} catch (TigaseDBException e) {\n\t\tlog.warning(\"Database proble, please contact admin: \" + e);\n\t\tresults.offer(Authorization.INTERNAL_SERVER_ERROR.getResponseMessage(packet,\n\t\t\t\t\"Database access problem, please contact administrator.\", true));\n\t}    // end of try-catch\n}", "path": "src\\main\\java\\tigase\\xmpp\\impl\\JabberIqPrivate.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "//~--- get methods ----------------------------------------------------------\n", "func_signal": "private boolean isPostCommand(Packet packet)", "code": "{\n\tString body = packet.getElemCData(\"/message/body\");\n\n\tif (body != null) {\n\t\tfor (command comm : command.values()) {\n\t\t\tif (body.startsWith(\"//\" + comm.toString())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n}", "path": "src\\main\\java\\tigase\\server\\sreceiver\\PubSubTestsTask.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "/**\n * Method description\n *\n *\n * @param packet\n * @param session\n * @param repo\n * @param results\n * @param settings\n *\n * @throws XMPPException\n */\n", "func_signal": "@Override\npublic void process(Packet packet, XMPPResourceConnection session, NonAuthUserRepository repo,\n\t\tQueue<Packet> results, Map<String, Object> settings)\n\t\tthrows XMPPException", "code": "{\n\tif (session == null) {\n\t\treturn;\n\t}    // end of if (session == null)\n\n\tif (packet.isElement(\"compress\", XMLNS)) {\n\t\tif (session.getSessionData(ID) != null) {\n\n\t\t\t// Somebody tries to activate multiple TLS layers.\n\t\t\t// This is possible and can even work but this can also be\n\t\t\t// a DOS attack. Blocking it now, unless someone requests he wants\n\t\t\t// to have multiple layers of TLS for his connection\n\t\t\tlog.log(Level.WARNING,\n\t\t\t\t\t\"Multiple ZLib requests, possible DOS attack, closing connection: {0}\", packet);\n\t\t\tresults.offer(packet.swapFromTo(failure, null, null));\n\t\t\tresults.offer(Command.CLOSE.getPacket(packet.getTo(), packet.getFrom(), StanzaType.set,\n\t\t\t\t\tsession.nextStanzaId()));\n\n\t\t\treturn;\n\t\t}\n\n\t\tsession.putSessionData(ID, \"true\");\n\n\t\tPacket result = Command.STARTZLIB.getPacket(packet.getTo(), packet.getFrom(), StanzaType.set,\n\t\t\tsession.nextStanzaId(), Command.DataType.submit);\n\n\t\tCommand.setData(result, compressed);\n\t\tresults.offer(result);\n\t} else {\n\t\tlog.log(Level.WARNING, \"Unknown ZLIB element: {0}\", packet);\n\t\tresults.offer(packet.swapFromTo(failure, null, null));\n\t\tresults.offer(Command.CLOSE.getPacket(packet.getTo(), packet.getFrom(), StanzaType.set,\n\t\t\t\tsession.nextStanzaId()));\n\t}\n}", "path": "src\\main\\java\\tigase\\xmpp\\impl\\StartZLib.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "//~--- methods --------------------------------------------------------------\n", "func_signal": "private void init()", "code": "{\n\tElement child = elem.getChild(\"command\", Command.XMLNS);\n\n\tif (child != null) {\n\t\tcmd = true;\n\t\tstrCommand = child.getAttribute(\"node\");\n\t\tcommand = Command.valueof(strCommand);\n\t}\n\n\tserviceDisco = (isXMLNS(\"/iq/query\", XMPPService.INFO_XMLNS)\n\t\t\t|| isXMLNS(\"/iq/query\", XMPPService.ITEMS_XMLNS));\n}", "path": "src\\main\\java\\tigase\\server\\Iq.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "/**\n * Method description\n *\n *\n * @param session\n *\n * @return\n */\n", "func_signal": "@Override\npublic Element[] supStreamFeatures(final XMPPResourceConnection session)", "code": "{\n\n\t// If session does not exist, just return null, we don't provide features\n\t// for non-existen stream\n\t// We also do not want to provide compression if it is already started\n\t// and the compression has to be available after TLS has been completed.\n\tif ((session != null) && (session.getSessionData(ID) == null)) {\n\n//    && session.getSessionData(StartTLS.ID) != null) {\n\t\treturn FEATURES;\n\t} else {\n\t\treturn null;\n\t}    // end of if (session.isAuthorized()) else\n}\n}", "path": "src\\main\\java\\tigase\\xmpp\\impl\\StartZLib.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "/**\n * <code>run</code> method is where all task work is done.\n */\n", "func_signal": "public void run()", "code": "{\n\ttry {\n\t\tFile fdir = new File(directory);\n\t\tString[] files = fdir.list(new MaskFilter(file_mask));\n\t\tif (files != null) {\n\t\t\tfor (String file: files) {\n    \t\t\t\tif (log.isLoggable(Level.FINEST)) {\n        \t\t\t\tlog.finest(\"Processing file: \" + file);\n                    }\n\t\t\t\tFile ffile = new File(fdir, file);\n\t\t\t\tString stanza = readFile(ffile);\n\t\t\t\thandler.handleStanza(stanza);\n\t\t\t\tffile.delete();\n\t\t\t}\n\t\t}\n\t} catch (IOException e) {\n\t\t// Let's ignore it for now.\n\t\tlog.log(Level.WARNING, \"Error retrieving stanzas from database: \", e);\n\t\t// It should probably do kind of auto-stop???\n\t\t// if so just uncomment below line:\n\t\t//this.cancel();\n\t}\n}", "path": "src\\main\\java\\tigase\\server\\ssender\\FileTask.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "/**\n * <code>init</code> method is a task specific initialization rountine.\n *\n * @param handler a <code>StanzaHandler</code> value is a reference to object\n * which handles all stanza retrieved from data source. The handler is\n * responsible for delivering stanza to destination address.\n * @param initString a <code>String</code> value is an initialization string\n * for this task. For example database tasks would expect database connection\n * string here, filesystem task would expect directory here.\n * @exception IOException if an error occurs during task or data storage\n * initialization.\n */\n", "func_signal": "public void init(StanzaHandler handler, String initString) throws IOException", "code": "{\n\tthis.handler = handler;\n\tinit_str = initString;\n\tif (init_str.endsWith(File.separator)) {\n\t\tfile_mask = \"\";\n\t\tdirectory = init_str;\n\t} else {\n\t\tint idx = init_str.lastIndexOf(File.separator);\n\t\tdirectory = init_str.substring(0, idx);\n\t\tfile_mask = init_str.substring(idx+1, init_str.length());\n\t}\n\tlog.config(\"file_mask='\" + file_mask + \"', directory='\" + directory + \"'\");\n}", "path": "src\\main\\java\\tigase\\server\\ssender\\FileTask.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "/**\n * Method description\n *\n *\n * @param packet\n *\n * @return\n *\n * @throws TigaseStringprepException\n */\n", "func_signal": "public static Packet commandResultForm(Iq packet) throws TigaseStringprepException", "code": "{\n\tPacket result = packet.commandResult(Command.DataType.form);\n\n\treturn result;\n}", "path": "src\\main\\java\\tigase\\server\\Iq.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "/**\n * Constructs ...\n *\n *\n * @param elem\n *\n * @throws TigaseStringprepException\n */\n", "func_signal": "public Iq(Element elem) throws TigaseStringprepException", "code": "{\n\tsuper(elem);\n\tinit();\n}", "path": "src\\main\\java\\tigase\\server\\Iq.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "/**\n * Method description\n *\n *\n * @return\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tCID cid = (CID) getSessionData().get(\"cid\");\n\n\treturn \"CID: \" + cid + \", \" + super.toString();\n}", "path": "src\\main\\java\\tigase\\server\\xmppserver\\S2SIOService.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "/**\n * Method description\n * \n * \n * @param session\n * \n * @return\n */\n", "func_signal": "@Override\npublic Element[] supStreamFeatures(final XMPPResourceConnection session)", "code": "{\n\tif ((session != null) && (!session.isResourceSet()) && session.isAuthorized()) {\n\t\treturn FEATURES;\n\t} else {\n\t\treturn null;\n\t} // end of if (session.isAuthorized()) else\n}", "path": "src\\main\\java\\tigase\\xmpp\\impl\\BindResource.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "/**\n * Method description\n *\n *\n * @return\n */\n", "func_signal": "@Override\npublic Map<String, PropertyItem> getDefaultParams()", "code": "{\n\tMap<String, PropertyItem> defs = super.getDefaultParams();\n\n\tdefs.put(DESCRIPTION_PROP_KEY,\n\t\t\t\t\t new PropertyItem(DESCRIPTION_PROP_KEY,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tDESCRIPTION_DISPL_NAME,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"PubSub Testing Task\"));\n\tdefs.put(MESSAGE_TYPE_PROP_KEY,\n\t\t\t\t\t new PropertyItem(MESSAGE_TYPE_PROP_KEY,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tMESSAGE_TYPE_DISPL_NAME,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tMessageType.NORMAL));\n\tdefs.put(ONLINE_ONLY_PROP_KEY,\n\t\t\t\t\t new PropertyItem(ONLINE_ONLY_PROP_KEY, ONLINE_ONLY_DISPL_NAME, false));\n\tdefs.put(REPLACE_SENDER_PROP_KEY,\n\t\t\t\t\t new PropertyItem(REPLACE_SENDER_PROP_KEY,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tREPLACE_SENDER_DISPL_NAME,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSenderAddress.LEAVE));\n\tdefs.put(SUBSCR_RESTRICTIONS_PROP_KEY,\n\t\t\t\t\t new PropertyItem(SUBSCR_RESTRICTIONS_PROP_KEY,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSUBSCR_RESTRICTIONS_DISPL_NAME,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSubscrRestrictions.MODERATED));\n\n\treturn defs;\n}", "path": "src\\main\\java\\tigase\\server\\sreceiver\\PubSubTestsTask.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "//~--- methods --------------------------------------------------------------\n", "func_signal": "@Override\nprotected boolean addOutPacket(Packet packet)", "code": "{\n\t++packetsGenerated;\n\n\treturn super.addOutPacket(packet);\n}", "path": "src\\main\\java\\tigase\\server\\sreceiver\\PubSubTestsTask.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "/**\n * Method description\n *\n *\n * @return\n */\n", "func_signal": "public String getIQChildName()", "code": "{\n\tList<Element> children = elem.getChildren();\n\n\tif ((children != null) && (children.size() > 0)) {\n\t\treturn children.get(0).getName();\n\t}\n\n\treturn null;\n}", "path": "src\\main\\java\\tigase\\server\\Iq.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "/**\n * Method description\n *\n *\n * @param packet\n *\n * @return\n *\n * @throws TigaseStringprepException\n */\n", "func_signal": "public static Packet commandResultResult(Iq packet) throws TigaseStringprepException", "code": "{\n\tPacket result = packet.commandResult(Command.DataType.result);\n\n\treturn result;\n}", "path": "src\\main\\java\\tigase\\server\\Iq.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "/**\n * Method description\n *\n *\n * @return\n */\n", "func_signal": "public String getIQXMLNS()", "code": "{\n\tif (iqQueryXMLNS == null) {\n\t\tiqQueryXMLNS = elem.getXMLNS(\"/iq/query\");\n\t}\n\n\treturn iqQueryXMLNS;\n}", "path": "src\\main\\java\\tigase\\server\\Iq.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "//~--- methods --------------------------------------------------------------\n", "func_signal": "private int[] parseNumbers(String[] args, int pos, int num)", "code": "{\n\n\t// The first arg is command name, after that command parameters come\n\tint[] res = new int[num];\n\n\tfor (int i = 0; i < res.length; i++) {\n\t\ttry {\n\t\t\tres[i] = Integer.parseInt(args[i + pos]);\n\t\t} catch (Exception e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn res;\n}", "path": "src\\main\\java\\tigase\\server\\sreceiver\\PubSubTestsTask.java", "repo_name": "zooldk/tigase-server", "stars": 26, "license": "agpl-3.0", "language": "java", "size": 21032}
{"docstring": "// OrderReplaceRequest handling\n", "func_signal": "@Override\npublic void onMessage( quickfix.fix42.OrderCancelReplaceRequest message, \n        SessionID sessionID )\n\tthrows FieldNotFound, UnsupportedMessageType, IncorrectTagValue", "code": "{\n    Order order = new Order( message );\n    order.setReceivedReplace( true );\n    orders.add( order, false );\n    boolean autoPending = false;\n    boolean autoCancel = false;\n    try {\n        autoPending = settings.getBool(\"FIXimulatorAutoPendingReplace\");\n        autoCancel = settings.getBool(\"FIXimulatorAutoReplace\");\n    } catch ( Exception e ) {}\n    if ( autoPending ) {\n        pendingReplace(order);\n    }\n    if ( autoCancel ) {\n        replace(order);\n    }\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\core\\FIXimulatorApplication.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "// Message sending methods\n", "func_signal": "public void sendMessage( Message message )", "code": "{\n    String oboCompID = \"<UNKNOWN>\";\n    String oboSubID = \"<UNKNOWN>\";\n    boolean sendoboCompID = false;\n    boolean sendoboSubID = false;\n    \n    try {\n        oboCompID = settings.getString(currentSession, \"OnBehalfOfCompID\");\n        oboSubID = settings.getString(currentSession, \"OnBehalfOfSubID\");\n        sendoboCompID = settings.getBool(\"FIXimulatorSendOnBehalfOfCompID\");\n        sendoboSubID = settings.getBool(\"FIXimulatorSendOnBehalfOfSubID\");\n    } catch ( Exception e ) {}\n    \n    // Add OnBehalfOfCompID\n    if ( sendoboCompID && !oboCompID.equals(\"\") ) {\n        OnBehalfOfCompID onBehalfOfCompID = new OnBehalfOfCompID(oboCompID);\n        Header header = (Header) message.getHeader();\n        header.set( onBehalfOfCompID );\t\t\t\n    }\n\n    // Add OnBehalfOfSubID\n    if ( sendoboSubID && !oboSubID.equals(\"\") ) {\n        OnBehalfOfSubID onBehalfOfSubID = new OnBehalfOfSubID(oboSubID);\n        Header header = (Header) message.getHeader();\n        header.set( onBehalfOfSubID );\t\t\t\n    }\n    \n    // Send actual message\n    try {\n        Session.sendToTarget( message, currentSession );\n    } catch ( SessionNotFound e ) { e.printStackTrace(); }\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\core\\FIXimulatorApplication.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "//GEN-LAST:event_sendOnBehalfOfCompIDActionPerformed\n", "func_signal": "private void sendOnBehalfOfSubIDActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_sendOnBehalfOfSubIDActionPerformed\n    FIXimulator.getApplication().getSettings()\n        .setBool(\"FIXimulatorSendOnBehalfOfSubID\", \n        sendOnBehalfOfSubID.isSelected());\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\ui\\FIXimulatorFrame.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "//GEN-LAST:event_aboutMenuItemActionPerformed\n", "func_signal": "private void pricePrecisionComboActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_pricePrecisionComboActionPerformed\n    FIXimulator.getApplication().getSettings()\n            .setLong(\"FIXimulatorPricePrecision\", \n            Long.valueOf(pricePrecisionCombo.getSelectedItem().toString()));\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\ui\\FIXimulatorFrame.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "//GEN-LAST:event_autoPendingCancelActionPerformed\n", "func_signal": "private void autoAcknowledgeActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_autoAcknowledgeActionPerformed\n    FIXimulator.getApplication().getSettings()\n        .setBool(\"FIXimulatorAutoAcknowledge\", \n        autoAcknowledge.isSelected());\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\ui\\FIXimulatorFrame.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "//GEN-LAST:event_executionBustButtonActionPerformed\n", "func_signal": "private void executorDelayActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_executorDelayActionPerformed\n    int delay = 1;\n    String value = executorDelay.getSelectedItem().toString(); \n    if (value.equals(\"10 ms\")) delay = 10;\n    if (value.equals(\"100 ms\")) delay = 100;\n    if (value.equals(\"1 second\")) delay = 1000;\n    if (value.equals(\"5 seconds\")) delay = 5000;\n    FIXimulator.getApplication().setNewExecutorDelay(delay);\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\ui\\FIXimulatorFrame.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "//GEN-LAST:event_showSettingsButtonActionPerformed\n", "func_signal": "private void orderRejectButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_orderRejectButtonActionPerformed\n    int row = orderTable.getSelectedRow();\n    // if no rows are selected\n    if ( row != -1 ) {\n        row = orderTable.convertRowIndexToModel(row);\n        Order order = FIXimulator.getApplication().getOrders().getOrder(row);\n        if ( order.getStatus().equals(\"Received\") ||\n             order.getStatus().equals(\"Pending New\")) {\n            FIXimulator.getApplication().reject(order);\n        } else { \n            System.out.println(\n                    \"Order in status \\\"\" + order.getStatus() + \"\\\" \" + \n                    \"cannot be rejected...\");\n        }\n    }\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\ui\\FIXimulatorFrame.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "//GEN-LAST:event_acknowledgeButtonActionPerformed\n", "func_signal": "private void partialsSliderChanged(javax.swing.event.ChangeEvent evt)", "code": "{//GEN-FIRST:event_partialsSliderChanged\n   if (!this.partialsSlider.getValueIsAdjusting()) {\n        int partials = (int)partialsSlider.getValue();\n        if ( partials == 0 ) partials = 1;\n        System.out.println(\"The number of partials was changed to: \" + partials);\n        FIXimulator.getApplication().setNewExecutorPartials(partials);\n    }\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\ui\\FIXimulatorFrame.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "//GEN-LAST:event_executorDelayActionPerformed\n", "func_signal": "private void autoReplaceActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_autoReplaceActionPerformed\n    FIXimulator.getApplication().getSettings()\n        .setBool(\"FIXimulatorAutoReplace\", \n        autoReplace.isSelected());\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\ui\\FIXimulatorFrame.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "//GEN-LAST:event_singleIOIButtonActionPerformed\n", "func_signal": "private void startExecutorButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_startExecutorButtonActionPerformed\n    int delay = 1;\n    if ( this.executorDelay.getSelectedItem().toString().equals(\"10 ms\")) \n        delay = 10;\n    if ( this.executorDelay.getSelectedItem().toString().equals(\"100 ms\")) \n        delay = 100;\n    if ( this.executorDelay.getSelectedItem().toString().equals(\"1 second\")) \n        delay = 1000;\n    if ( this.executorDelay.getSelectedItem().toString().equals(\"5 seconds\")) \n        delay = 5000;\n    int partials = (int)partialsSlider.getValue();\n    if ( partials == 0 ) partials = 1;\n    FIXimulator.getApplication().startExecutor(delay, partials);\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\ui\\FIXimulatorFrame.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "//GEN-LAST:event_logToFileActionPerformed\n", "func_signal": "private void logToDBActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_logToDBActionPerformed\n    FIXimulator.getApplication().getSettings()\n        .setBool(\"FIXimulatorLogToDB\", \n        sendOnBehalfOfSubID.isSelected());\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\ui\\FIXimulatorFrame.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "//GEN-LAST:event_pricePrecisionComboActionPerformed\n", "func_signal": "private void sendOnBehalfOfCompIDActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_sendOnBehalfOfCompIDActionPerformed\n    FIXimulator.getApplication().getSettings()\n        .setBool(\"FIXimulatorSendOnBehalfOfCompID\", \n        sendOnBehalfOfCompID.isSelected());\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\ui\\FIXimulatorFrame.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "/**\n * @param messageType what message the field is part of.\n * @param field the actual field we are wrapping.\n * @param dictionary dictionary used to look up field information.\n */\n", "func_signal": "protected LogField(\n        MsgType messageType, Field field, DataDictionary dictionary)", "code": "{\n    this.dictionary = dictionary;\n    this.field = field;\n\n    final String messageTypeString = messageType.getValue();\n    final int fieldTag = field.getTag();\n\n    fieldType = dictionary.getFieldTypeEnum(fieldTag);\n    fieldName = dictionary.getFieldName(fieldTag);\n    fieldValueName = dictionary.getValueName(fieldTag,\n            field.getObject().toString());\n    required = getDataDictionary().isRequiredField(messageTypeString,\n            fieldTag);\n    header = getDataDictionary().isHeaderField(fieldTag);\n    if (!header) {\n        trailer = getDataDictionary().isTrailerField(fieldTag);\n    }\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\util\\LogField.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n    bindingGroup = new org.jdesktop.beansbinding.BindingGroup();\n\n    aboutDialog = new javax.swing.JDialog();\n    aboutPanel = new javax.swing.JPanel();\n    okButton = new javax.swing.JButton();\n    aboutDialogLabel = new javax.swing.JLabel();\n    instrumentFileChooser = new javax.swing.JFileChooser();\n    ioiDialog = new javax.swing.JDialog();\n    ioiDialogOK = new javax.swing.JButton();\n    ioiDialogCancel = new javax.swing.JButton();\n    ioiIDLabel = new javax.swing.JLabel();\n    ioiSideLabel = new javax.swing.JLabel();\n    ioiSharesLabel = new javax.swing.JLabel();\n    ioiSymbolLabel = new javax.swing.JLabel();\n    ioiSecurityIDLabel = new javax.swing.JLabel();\n    ioiIDSourceLabel = new javax.swing.JLabel();\n    ioiPriceLabel = new javax.swing.JLabel();\n    ioiNaturalLabel = new javax.swing.JLabel();\n    ioiDialogID = new javax.swing.JLabel();\n    ioiDialogSide = new javax.swing.JComboBox();\n    ioiDialogSymbol = new javax.swing.JTextField();\n    ioiDialogSecurityID = new javax.swing.JTextField();\n    ioiDialogIDSource = new javax.swing.JComboBox();\n    ioiDialogNatural = new javax.swing.JComboBox();\n    ioiDialogShares = new javax.swing.JFormattedTextField();\n    ioiDialogPrice = new javax.swing.JFormattedTextField();\n    executionDialog = new javax.swing.JDialog();\n    executionDialogOK = new javax.swing.JButton();\n    executionDialogCancel = new javax.swing.JButton();\n    executionDialogShares = new javax.swing.JFormattedTextField();\n    executionDialogPrice = new javax.swing.JFormattedTextField();\n    executionSharesLabel = new javax.swing.JLabel();\n    executionPriceLabel = new javax.swing.JLabel();\n    messagePanel = new javax.swing.JPanel();\n    messageScrollPane = new javax.swing.JScrollPane();\n    messageTable = new javax.swing.JTable();\n    statusBarPanel = new javax.swing.JPanel();\n    executorRunningLabel = new javax.swing.JLabel();\n    ioiSenderRunningLabel = new javax.swing.JLabel();\n    clientConnectedLabel = new javax.swing.JLabel();\n    messageDetailPanel = new javax.swing.JPanel();\n    messageDetailScrollPane = new javax.swing.JScrollPane();\n    messageDetailTable = new javax.swing.JTable();\n    mainTabbedPane = new javax.swing.JTabbedPane();\n    loadPanel = new javax.swing.JPanel();\n    autoIOIPanel = new javax.swing.JPanel();\n    securityIDComboBox = new javax.swing.JComboBox();\n    rateSlider = new javax.swing.JSlider();\n    rateDisplayLable = new javax.swing.JLabel();\n    symbolLabel = new javax.swing.JLabel();\n    stopButton = new javax.swing.JButton();\n    startButton = new javax.swing.JButton();\n    symbolComboBox = new javax.swing.JComboBox();\n    securityIDLabel = new javax.swing.JLabel();\n    ioiSliderLabel = new javax.swing.JLabel();\n    autoExecutePanel = new javax.swing.JPanel();\n    stopExecutorButton = new javax.swing.JButton();\n    partialsSlider = new javax.swing.JSlider();\n    partialsLabel = new javax.swing.JLabel();\n    partialsNumber = new javax.swing.JLabel();\n    startExecutorButton = new javax.swing.JButton();\n    delayLabel = new javax.swing.JLabel();\n    executorDelay = new javax.swing.JComboBox();\n    ioiPanel = new javax.swing.JPanel();\n    manualIOIPanel = new javax.swing.JPanel();\n    singleIOIButton = new javax.swing.JButton();\n    cancelIOIButton = new javax.swing.JButton();\n    replaceIOIButton = new javax.swing.JButton();\n    ioiScrollPane = new javax.swing.JScrollPane();\n    ioiTable = new javax.swing.JTable();\n    orderPanel = new javax.swing.JPanel();\n    orderActionPanel = new javax.swing.JPanel();\n    acknowledgeButton = new javax.swing.JButton();\n    cancelButton = new javax.swing.JButton();\n    cancelPendingButton = new javax.swing.JButton();\n    replacePendingButton = new javax.swing.JButton();\n    executeButton = new javax.swing.JButton();\n    dfdButton = new javax.swing.JButton();\n    cancelAcceptButton = new javax.swing.JButton();\n    replaceAcceptButton = new javax.swing.JButton();\n    orderRejectButton = new javax.swing.JButton();\n    cancelRejectButton = new javax.swing.JButton();\n    replaceRejectButton = new javax.swing.JButton();\n    orderScrollPane = new javax.swing.JScrollPane();\n    orderTable = new javax.swing.JTable();\n    executionPanel = new javax.swing.JPanel();\n    executionActionPanel = new javax.swing.JPanel();\n    executionBustButton = new javax.swing.JButton();\n    executionCorrectButton = new javax.swing.JButton();\n    executionScrollPane = new javax.swing.JScrollPane();\n    executionTable = new javax.swing.JTable();\n    instrumentPanel = new javax.swing.JPanel();\n    instrumentScrollPane = new javax.swing.JScrollPane();\n    instrumentTable = new javax.swing.JTable();\n    reportPanel = new javax.swing.JPanel();\n    reportActionPanel = new javax.swing.JPanel();\n    customQueryRunButton = new javax.swing.JButton();\n    queryLabel = new javax.swing.JLabel();\n    queryText = new javax.swing.JTextField();\n    cannedQueryCombo = new javax.swing.JComboBox();\n    querySymbolLabel = new javax.swing.JLabel();\n    querySymbolText = new javax.swing.JTextField();\n    cannedQueryRunButton = new javax.swing.JButton();\n    reportScrollPane = new javax.swing.JScrollPane();\n    reportTable = new javax.swing.JTable();\n    settingsPanel = new javax.swing.JPanel();\n    autoResponsePanel = new javax.swing.JPanel();\n    autoAcknowledge = new javax.swing.JCheckBox();\n    autoPendingCancel = new javax.swing.JCheckBox();\n    autoPendingReplace = new javax.swing.JCheckBox();\n    autoCancel = new javax.swing.JCheckBox();\n    autoReplace = new javax.swing.JCheckBox();\n    cancelSeparator = new javax.swing.JSeparator();\n    replaceSeparator = new javax.swing.JSeparator();\n    saveSettingsButton = new javax.swing.JButton();\n    appSettingsPanel = new javax.swing.JPanel();\n    pricePrecisionLabel = new javax.swing.JLabel();\n    cachedObjectsLabel = new javax.swing.JLabel();\n    cachedObjectsCombo = new javax.swing.JComboBox();\n    pricePrecisionCombo = new javax.swing.JComboBox();\n    oboCompIDSeparator = new javax.swing.JSeparator();\n    sendOnBehalfOfCompID = new javax.swing.JCheckBox();\n    sendOnBehalfOfSubID = new javax.swing.JCheckBox();\n    oboCompIDSeparator1 = new javax.swing.JSeparator();\n    logToFileLabel = new javax.swing.JLabel();\n    logToFile = new javax.swing.JCheckBox();\n    logToDB = new javax.swing.JCheckBox();\n    showSettingsButton = new javax.swing.JButton();\n    mainMenuBar = new javax.swing.JMenuBar();\n    fileMenu = new javax.swing.JMenu();\n    exitMenuItem = new javax.swing.JMenuItem();\n    instrumentMenu = new javax.swing.JMenu();\n    loadInstrumentMenuItem = new javax.swing.JMenuItem();\n    helpMenu = new javax.swing.JMenu();\n    aboutMenuItem = new javax.swing.JMenuItem();\n\n    aboutDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n    aboutDialog.setTitle(\"About...\");\n    aboutDialog.setLocationByPlatform(true);\n\n    aboutPanel.setPreferredSize(new java.awt.Dimension(200, 100));\n\n    okButton.setText(\"OK\");\n    okButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            okButtonActionPerformed(evt);\n        }\n    });\n\n    aboutDialogLabel.setText(\"FIXimulator by Zoltan Feledy\");\n\n    javax.swing.GroupLayout aboutPanelLayout = new javax.swing.GroupLayout(aboutPanel);\n    aboutPanel.setLayout(aboutPanelLayout);\n    aboutPanelLayout.setHorizontalGroup(\n        aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(aboutPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)\n                .addComponent(okButton)\n                .addComponent(aboutDialogLabel))\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n    aboutPanelLayout.setVerticalGroup(\n        aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(aboutPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(aboutDialogLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(okButton)\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n\n    javax.swing.GroupLayout aboutDialogLayout = new javax.swing.GroupLayout(aboutDialog.getContentPane());\n    aboutDialog.getContentPane().setLayout(aboutDialogLayout);\n    aboutDialogLayout.setHorizontalGroup(\n        aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(aboutDialogLayout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(aboutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n    aboutDialogLayout.setVerticalGroup(\n        aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aboutDialogLayout.createSequentialGroup()\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addComponent(aboutPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addGap(7, 7, 7))\n    );\n\n    ioiDialog.setTitle(\"Add IOI...\");\n    ioiDialog.setAlwaysOnTop(true);\n    ioiDialog.setName(\"ioiDialog\"); // NOI18N\n\n    ioiDialogOK.setText(\"OK\");\n    ioiDialogOK.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            ioiDialogOKActionPerformed(evt);\n        }\n    });\n\n    ioiDialogCancel.setText(\"Cancel\");\n    ioiDialogCancel.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            ioiDialogCancelActionPerformed(evt);\n        }\n    });\n\n    ioiIDLabel.setText(\"IOIid(23):\");\n\n    ioiSideLabel.setText(\"Side(54):\");\n\n    ioiSharesLabel.setText(\"IOIShares(27):\");\n\n    ioiSymbolLabel.setText(\"Symbol(55):\");\n\n    ioiSecurityIDLabel.setText(\"SecurityID(48):\");\n\n    ioiIDSourceLabel.setText(\"IDSource(22):\");\n\n    ioiPriceLabel.setText(\"Price(44):\");\n\n    ioiNaturalLabel.setText(\"IOINaturalFlag(130):\");\n\n    ioiDialogID.setText(\"ioiIDLabel\");\n\n    ioiDialogSide.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"Buy\", \"Sell\", \"Undisclosed\" }));\n\n    ioiDialogIDSource.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"CUSIP\", \"SEDOL\", \"RIC\", \"TICKER\", \"OTHER\" }));\n\n    ioiDialogNatural.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"Yes\", \"No\" }));\n\n    ioiDialogShares.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(\"#0\"))));\n\n    ioiDialogPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(\"#,##0.####\"))));\n    ioiDialogPrice.setText(\"0.0\");\n\n    javax.swing.GroupLayout ioiDialogLayout = new javax.swing.GroupLayout(ioiDialog.getContentPane());\n    ioiDialog.getContentPane().setLayout(ioiDialogLayout);\n    ioiDialogLayout.setHorizontalGroup(\n        ioiDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(ioiDialogLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(ioiDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(ioiDialogOK)\n                .addComponent(ioiNaturalLabel)\n                .addComponent(ioiIDLabel)\n                .addComponent(ioiSideLabel)\n                .addComponent(ioiSharesLabel)\n                .addComponent(ioiSymbolLabel)\n                .addComponent(ioiSecurityIDLabel)\n                .addComponent(ioiIDSourceLabel)\n                .addComponent(ioiPriceLabel))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(ioiDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(ioiDialogSide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(ioiDialogSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(ioiDialogID)\n                .addComponent(ioiDialogSecurityID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(ioiDialogIDSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(ioiDialogNatural, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(ioiDialogCancel)\n                .addComponent(ioiDialogShares, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(ioiDialogPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap(38, Short.MAX_VALUE))\n    );\n\n    ioiDialogLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ioiDialogCancel, ioiDialogOK});\n\n    ioiDialogLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ioiIDLabel, ioiIDSourceLabel, ioiNaturalLabel, ioiPriceLabel, ioiSecurityIDLabel, ioiSharesLabel, ioiSideLabel, ioiSymbolLabel});\n\n    ioiDialogLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ioiDialogID, ioiDialogIDSource, ioiDialogNatural, ioiDialogPrice, ioiDialogSecurityID, ioiDialogShares, ioiDialogSide, ioiDialogSymbol});\n\n    ioiDialogLayout.setVerticalGroup(\n        ioiDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(ioiDialogLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(ioiDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(ioiIDLabel)\n                .addComponent(ioiDialogID, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(ioiDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(ioiSideLabel)\n                .addComponent(ioiDialogSide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(ioiDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(ioiSharesLabel)\n                .addComponent(ioiDialogShares, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(ioiDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(ioiSymbolLabel)\n                .addComponent(ioiDialogSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(ioiDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(ioiSecurityIDLabel)\n                .addComponent(ioiDialogSecurityID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(ioiDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(ioiIDSourceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(ioiDialogIDSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(ioiDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(ioiPriceLabel)\n                .addComponent(ioiDialogPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(ioiDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(ioiNaturalLabel)\n                .addComponent(ioiDialogNatural, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addGap(32, 32, 32)\n            .addGroup(ioiDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(ioiDialogOK)\n                .addComponent(ioiDialogCancel))\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n\n    executionDialog.setTitle(\"Add execution...\");\n    executionDialog.setName(\"executionDialog\"); // NOI18N\n\n    executionDialogOK.setText(\"OK\");\n    executionDialogOK.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            executionDialogOKActionPerformed(evt);\n        }\n    });\n\n    executionDialogCancel.setText(\"Cancel\");\n    executionDialogCancel.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            executionDialogCancelActionPerformed(evt);\n        }\n    });\n\n    executionDialogShares.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(\"#0\"))));\n\n    executionDialogPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(\"#,##0.####\"))));\n    executionDialogPrice.setText(\"0.0\");\n\n    executionSharesLabel.setText(\"LastShares(32):\");\n\n    executionPriceLabel.setText(\"LastPx(31):\");\n\n    javax.swing.GroupLayout executionDialogLayout = new javax.swing.GroupLayout(executionDialog.getContentPane());\n    executionDialog.getContentPane().setLayout(executionDialogLayout);\n    executionDialogLayout.setHorizontalGroup(\n        executionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(executionDialogLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(executionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(executionDialogLayout.createSequentialGroup()\n                    .addGroup(executionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                        .addComponent(executionPriceLabel)\n                        .addComponent(executionSharesLabel))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addGroup(executionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(executionDialogPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)\n                        .addComponent(executionDialogShares, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)))\n                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, executionDialogLayout.createSequentialGroup()\n                    .addComponent(executionDialogOK)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(executionDialogCancel)))\n            .addContainerGap())\n    );\n    executionDialogLayout.setVerticalGroup(\n        executionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(executionDialogLayout.createSequentialGroup()\n            .addGap(19, 19, 19)\n            .addGroup(executionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(executionSharesLabel)\n                .addComponent(executionDialogShares, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addGroup(executionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(executionPriceLabel)\n                .addComponent(executionDialogPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)\n            .addGroup(executionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(executionDialogOK)\n                .addComponent(executionDialogCancel))\n            .addContainerGap())\n    );\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n    setTitle(\"FIXimulator\");\n    setBounds(new java.awt.Rectangle(50, 50, 0, 0));\n    setMinimumSize(new java.awt.Dimension(800, 600));\n    setName(\"fiximulatorFrame\"); // NOI18N\n    setResizable(false);\n\n    messagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Application Messages\"));\n\n    messageTable.setAutoCreateRowSorter(true);\n    messageTable.setModel(new edu.harvard.fas.zfeledy.fiximulator.ui.MessageTableModel());\n    messageTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);\n    //Set initial column widths\n    for (int i = 0; i < messageTable.getColumnCount(); i++){\n        if (i==0)\n        messageTable.getColumnModel().\n        getColumn(i).setPreferredWidth(30);\n        if (i==1)\n        messageTable.getColumnModel().\n        getColumn(i).setPreferredWidth(75);\n        if (i==2)\n        messageTable.getColumnModel().\n        getColumn(i).setPreferredWidth(150);\n        if (i==3)\n        messageTable.getColumnModel().\n        getColumn(i).setPreferredWidth(150);\n        if (i==4)\n        messageTable.getColumnModel().\n        getColumn(i).setPreferredWidth(800);\n    }\n    messageScrollPane.setViewportView(messageTable);\n\n    javax.swing.GroupLayout messagePanelLayout = new javax.swing.GroupLayout(messagePanel);\n    messagePanel.setLayout(messagePanelLayout);\n    messagePanelLayout.setHorizontalGroup(\n        messagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addComponent(messageScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)\n    );\n    messagePanelLayout.setVerticalGroup(\n        messagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addComponent(messageScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)\n    );\n\n    executorRunningLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/edu/harvard/fas/zfeledy/fiximulator/ui/red.gif\"))); // NOI18N\n    executorRunningLabel.setText(\"Executor status\");\n    FIXimulator.getApplication().addStatusCallbacks(clientConnectedLabel, ioiSenderRunningLabel, executorRunningLabel);\n\n    ioiSenderRunningLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/edu/harvard/fas/zfeledy/fiximulator/ui/red.gif\"))); // NOI18N\n    ioiSenderRunningLabel.setText(\"IOI sender status\");\n\n    clientConnectedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/edu/harvard/fas/zfeledy/fiximulator/ui/red.gif\"))); // NOI18N\n    if (FIXimulator.getApplication().getConnectionStatus())\n    clientConnectedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/edu/harvard/fas/zfeledy/fiximulator/ui/green.gif\")));\n    clientConnectedLabel.setText(\"Client connection status\");\n\n    javax.swing.GroupLayout statusBarPanelLayout = new javax.swing.GroupLayout(statusBarPanel);\n    statusBarPanel.setLayout(statusBarPanelLayout);\n    statusBarPanelLayout.setHorizontalGroup(\n        statusBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(statusBarPanelLayout.createSequentialGroup()\n            .addGap(6, 6, 6)\n            .addComponent(clientConnectedLabel)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(ioiSenderRunningLabel)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(executorRunningLabel)\n            .addContainerGap(69, Short.MAX_VALUE))\n    );\n    statusBarPanelLayout.setVerticalGroup(\n        statusBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(statusBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n            .addComponent(clientConnectedLabel)\n            .addComponent(ioiSenderRunningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addComponent(executorRunningLabel))\n    );\n\n    messageDetailPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Message Details\"));\n\n    messageDetailTable.setAutoCreateRowSorter(true);\n    messageDetailTable.setModel(new edu.harvard.fas.zfeledy.fiximulator.ui.MessageDetailTableModel(messageTable));\n    messageDetailTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);\n    for (int i = 0; i < messageDetailTable.getColumnCount(); i++){\n        if (i==0)\n        messageDetailTable.getColumnModel().\n        getColumn(i).setPreferredWidth(100);\n        if (i==1)\n        messageDetailTable.getColumnModel().\n        getColumn(i).setPreferredWidth(40);\n        if (i==2)\n        messageDetailTable.getColumnModel().\n        getColumn(i).setPreferredWidth(150);\n        if (i==3)\n        messageDetailTable.getColumnModel().\n        getColumn(i).setPreferredWidth(150);\n    }\n    messageDetailScrollPane.setViewportView(messageDetailTable);\n\n    javax.swing.GroupLayout messageDetailPanelLayout = new javax.swing.GroupLayout(messageDetailPanel);\n    messageDetailPanel.setLayout(messageDetailPanelLayout);\n    messageDetailPanelLayout.setHorizontalGroup(\n        messageDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addComponent(messageDetailScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)\n    );\n    messageDetailPanelLayout.setVerticalGroup(\n        messageDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(messageDetailPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(messageDetailScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE))\n    );\n\n    autoIOIPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Automated IOI Sender\"));\n\n    securityIDComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"RIC\", \"Sedol\", \"RIC\", \"Cusip\" }));\n    securityIDComboBox.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            securityIDComboBoxActionPerformed(evt);\n        }\n    });\n\n    rateSlider.setMajorTickSpacing(200);\n    rateSlider.setMaximum(600);\n    rateSlider.setMinorTickSpacing(50);\n    rateSlider.setPaintLabels(true);\n    rateSlider.setPaintTicks(true);\n    rateSlider.setValue(60);\n    rateSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n        public void stateChanged(javax.swing.event.ChangeEvent evt) {\n            sliderChanged(evt);\n        }\n    });\n\n    org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, rateSlider, org.jdesktop.beansbinding.ELProperty.create(\"${value}\"), rateDisplayLable, org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\n    bindingGroup.addBinding(binding);\n\n    symbolLabel.setText(\"Symbol (55):\");\n\n    stopButton.setText(\"Stop\");\n    stopButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            stopButtonActionPerformed(evt);\n        }\n    });\n\n    startButton.setText(\"Start\");\n    startButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            startButtonActionPerformed(evt);\n        }\n    });\n\n    symbolComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"Ticker\", \"Sedol\", \"RIC\", \"Cusip\" }));\n    symbolComboBox.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            symbolComboBoxActionPerformed(evt);\n        }\n    });\n\n    securityIDLabel.setText(\"SecurityID (48):\");\n\n    ioiSliderLabel.setText(\" IOIs per minute:\");\n\n    javax.swing.GroupLayout autoIOIPanelLayout = new javax.swing.GroupLayout(autoIOIPanel);\n    autoIOIPanel.setLayout(autoIOIPanelLayout);\n    autoIOIPanelLayout.setHorizontalGroup(\n        autoIOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(autoIOIPanelLayout.createSequentialGroup()\n            .addGroup(autoIOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(autoIOIPanelLayout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(startButton)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(stopButton))\n                .addGroup(autoIOIPanelLayout.createSequentialGroup()\n                    .addComponent(ioiSliderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(rateDisplayLable, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGroup(autoIOIPanelLayout.createSequentialGroup()\n                    .addComponent(symbolLabel)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(symbolComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGap(18, 18, 18)\n                    .addComponent(securityIDLabel)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(securityIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addComponent(rateSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n\n    autoIOIPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {startButton, stopButton});\n\n    autoIOIPanelLayout.setVerticalGroup(\n        autoIOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, autoIOIPanelLayout.createSequentialGroup()\n            .addGroup(autoIOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(symbolLabel)\n                .addComponent(symbolComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(securityIDLabel)\n                .addComponent(securityIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(autoIOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(ioiSliderLabel)\n                .addComponent(rateDisplayLable, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(rateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(autoIOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(startButton)\n                .addComponent(stopButton)))\n    );\n\n    autoExecutePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Automated Executor\"));\n\n    stopExecutorButton.setText(\"Stop\");\n    stopExecutorButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            stopExecutorButtonActionPerformed(evt);\n        }\n    });\n\n    partialsSlider.setMajorTickSpacing(10);\n    partialsSlider.setMaximum(50);\n    partialsSlider.setPaintLabels(true);\n    partialsSlider.setPaintTicks(true);\n    partialsSlider.setValue(10);\n    partialsSlider.addChangeListener(new javax.swing.event.ChangeListener() {\n        public void stateChanged(javax.swing.event.ChangeEvent evt) {\n            partialsSliderChanged(evt);\n        }\n    });\n\n    partialsLabel.setText(\"Fills per order:\");\n\n    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, partialsSlider, org.jdesktop.beansbinding.ELProperty.create(\"${value}\"), partialsNumber, org.jdesktop.beansbinding.BeanProperty.create(\"text\"));\n    bindingGroup.addBinding(binding);\n\n    startExecutorButton.setText(\"Start\");\n    startExecutorButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            startExecutorButtonActionPerformed(evt);\n        }\n    });\n\n    delayLabel.setText(\"Delay:\");\n\n    executorDelay.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"1 ms\", \"10 ms\", \"100 ms\", \"1 second\", \"5 seconds\" }));\n    executorDelay.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            executorDelayActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout autoExecutePanelLayout = new javax.swing.GroupLayout(autoExecutePanel);\n    autoExecutePanel.setLayout(autoExecutePanelLayout);\n    autoExecutePanelLayout.setHorizontalGroup(\n        autoExecutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(autoExecutePanelLayout.createSequentialGroup()\n            .addGroup(autoExecutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(autoExecutePanelLayout.createSequentialGroup()\n                    .addContainerGap()\n                    .addGroup(autoExecutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addGroup(autoExecutePanelLayout.createSequentialGroup()\n                            .addComponent(delayLabel)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                            .addComponent(executorDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addGap(18, 18, 18)\n                            .addComponent(partialsLabel)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                            .addComponent(partialsNumber))\n                        .addGroup(autoExecutePanelLayout.createSequentialGroup()\n                            .addComponent(startExecutorButton)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                            .addComponent(stopExecutorButton))))\n                .addComponent(partialsSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n\n    autoExecutePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {startExecutorButton, stopExecutorButton});\n\n    autoExecutePanelLayout.setVerticalGroup(\n        autoExecutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(autoExecutePanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(autoExecutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(delayLabel)\n                .addComponent(executorDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(partialsNumber)\n                .addComponent(partialsLabel))\n            .addGap(11, 11, 11)\n            .addComponent(partialsSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(autoExecutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(stopExecutorButton)\n                .addComponent(startExecutorButton))\n            .addGap(14, 14, 14))\n    );\n\n    javax.swing.GroupLayout loadPanelLayout = new javax.swing.GroupLayout(loadPanel);\n    loadPanel.setLayout(loadPanelLayout);\n    loadPanelLayout.setHorizontalGroup(\n        loadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loadPanelLayout.createSequentialGroup()\n            .addGroup(loadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(autoExecutePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(autoIOIPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n    loadPanelLayout.setVerticalGroup(\n        loadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(loadPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(autoIOIPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(autoExecutePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n\n    mainTabbedPane.addTab(\"Load\", loadPanel);\n\n    manualIOIPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"IOIs\"));\n\n    singleIOIButton.setText(\"Add IOI\");\n    singleIOIButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            singleIOIButtonActionPerformed(evt);\n        }\n    });\n\n    cancelIOIButton.setText(\"Cancel IOI\");\n    cancelIOIButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            cancelIOIButtonActionPerformed(evt);\n        }\n    });\n\n    replaceIOIButton.setText(\"Replace IOI\");\n    replaceIOIButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            replaceIOIButtonActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout manualIOIPanelLayout = new javax.swing.GroupLayout(manualIOIPanel);\n    manualIOIPanel.setLayout(manualIOIPanelLayout);\n    manualIOIPanelLayout.setHorizontalGroup(\n        manualIOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(manualIOIPanelLayout.createSequentialGroup()\n            .addComponent(singleIOIButton)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(replaceIOIButton)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(cancelIOIButton)\n            .addContainerGap(140, Short.MAX_VALUE))\n    );\n\n    manualIOIPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelIOIButton, replaceIOIButton, singleIOIButton});\n\n    manualIOIPanelLayout.setVerticalGroup(\n        manualIOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(manualIOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n            .addComponent(singleIOIButton)\n            .addComponent(replaceIOIButton)\n            .addComponent(cancelIOIButton))\n    );\n\n    ioiTable.setDefaultRenderer(Object.class, new IOICellRenderer());\n    ioiTable.setAutoCreateRowSorter(true);\n    ioiTable.setModel(new edu.harvard.fas.zfeledy.fiximulator.ui.IOITableModel());\n    ioiTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);\n    //Set initial column widths\n    for (int i = 0; i < ioiTable.getColumnCount(); i++){\n        if (i==0)\n        ioiTable.getColumnModel().\n        getColumn(i).setPreferredWidth(100);\n        if (i==1)\n        ioiTable.getColumnModel().\n        getColumn(i).setPreferredWidth(60);\n        if (i==2)\n        ioiTable.getColumnModel().\n        getColumn(i).setPreferredWidth(50);\n        if (i==3)\n        ioiTable.getColumnModel().\n        getColumn(i).setPreferredWidth(50);\n        if (i==4)\n        ioiTable.getColumnModel().\n        getColumn(i).setPreferredWidth(50);\n        if (i==5)\n        ioiTable.getColumnModel().\n        getColumn(i).setPreferredWidth(60);\n        if (i==6)\n        ioiTable.getColumnModel().\n        getColumn(i).setPreferredWidth(60);\n        if (i==7)\n        ioiTable.getColumnModel().\n        getColumn(i).setPreferredWidth(60);\n        if (i==8)\n        ioiTable.getColumnModel().\n        getColumn(i).setPreferredWidth(50);\n        if (i==9)\n        ioiTable.getColumnModel().\n        getColumn(i).setPreferredWidth(100);\n    }\n    ioiTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);\n    ioiScrollPane.setViewportView(ioiTable);\n\n    javax.swing.GroupLayout ioiPanelLayout = new javax.swing.GroupLayout(ioiPanel);\n    ioiPanel.setLayout(ioiPanelLayout);\n    ioiPanelLayout.setHorizontalGroup(\n        ioiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ioiPanelLayout.createSequentialGroup()\n            .addComponent(manualIOIPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addContainerGap())\n        .addGroup(ioiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(ioiScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE))\n    );\n    ioiPanelLayout.setVerticalGroup(\n        ioiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(ioiPanelLayout.createSequentialGroup()\n            .addComponent(manualIOIPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(258, Short.MAX_VALUE))\n        .addGroup(ioiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(ioiPanelLayout.createSequentialGroup()\n                .addGap(54, 54, 54)\n                .addComponent(ioiScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)))\n    );\n\n    mainTabbedPane.addTab(\"IOIs\", ioiPanel);\n\n    orderActionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Orders\"));\n\n    acknowledgeButton.setText(\"Acknowledge\");\n    acknowledgeButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            acknowledgeButtonActionPerformed(evt);\n        }\n    });\n\n    cancelButton.setText(\"Cancel\");\n    cancelButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            cancelButtonActionPerformed(evt);\n        }\n    });\n\n    cancelPendingButton.setText(\"Pending Cancel\");\n    cancelPendingButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            cancelPendingButtonActionPerformed(evt);\n        }\n    });\n\n    replacePendingButton.setText(\"Pending Replace\");\n    replacePendingButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            replacePendingButtonActionPerformed(evt);\n        }\n    });\n\n    executeButton.setText(\"Execute\");\n    executeButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            executeButtonActionPerformed(evt);\n        }\n    });\n\n    dfdButton.setText(\"DFD\");\n    dfdButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            dfdButtonActionPerformed(evt);\n        }\n    });\n\n    cancelAcceptButton.setText(\"Accept Cancel\");\n    cancelAcceptButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            cancelAcceptButtonActionPerformed(evt);\n        }\n    });\n\n    replaceAcceptButton.setText(\"Accept Replace\");\n    replaceAcceptButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            replaceAcceptButtonActionPerformed(evt);\n        }\n    });\n\n    orderRejectButton.setText(\"Reject\");\n    orderRejectButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            orderRejectButtonActionPerformed(evt);\n        }\n    });\n\n    cancelRejectButton.setText(\"Reject Cancel\");\n    cancelRejectButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            cancelRejectButtonActionPerformed(evt);\n        }\n    });\n\n    replaceRejectButton.setText(\"Reject Replace\");\n    replaceRejectButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            replaceRejectButtonActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout orderActionPanelLayout = new javax.swing.GroupLayout(orderActionPanel);\n    orderActionPanel.setLayout(orderActionPanelLayout);\n    orderActionPanelLayout.setHorizontalGroup(\n        orderActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderActionPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(orderActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)\n                .addGroup(orderActionPanelLayout.createSequentialGroup()\n                    .addComponent(orderRejectButton, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)\n                    .addGap(6, 6, 6)\n                    .addComponent(dfdButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGroup(orderActionPanelLayout.createSequentialGroup()\n                    .addComponent(acknowledgeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGap(6, 6, 6)\n                    .addComponent(cancelButton))\n                .addComponent(executeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(orderActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)\n                .addComponent(cancelRejectButton)\n                .addComponent(cancelAcceptButton)\n                .addComponent(cancelPendingButton))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(orderActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)\n                .addComponent(replacePendingButton)\n                .addComponent(replaceAcceptButton)\n                .addComponent(replaceRejectButton))\n            .addContainerGap())\n    );\n\n    orderActionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {acknowledgeButton, orderRejectButton});\n\n    orderActionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {replaceAcceptButton, replacePendingButton, replaceRejectButton});\n\n    orderActionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelAcceptButton, cancelPendingButton, cancelRejectButton});\n\n    orderActionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, dfdButton});\n\n    orderActionPanelLayout.setVerticalGroup(\n        orderActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(orderActionPanelLayout.createSequentialGroup()\n            .addGroup(orderActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(orderActionPanelLayout.createSequentialGroup()\n                    .addGroup(orderActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(cancelPendingButton)\n                        .addGroup(orderActionPanelLayout.createSequentialGroup()\n                            .addGap(29, 29, 29)\n                            .addComponent(cancelAcceptButton))\n                        .addGroup(orderActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(cancelButton)\n                            .addComponent(acknowledgeButton))\n                        .addGroup(orderActionPanelLayout.createSequentialGroup()\n                            .addGap(29, 29, 29)\n                            .addGroup(orderActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                .addComponent(orderRejectButton)\n                                .addComponent(dfdButton))))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addGroup(orderActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(cancelRejectButton)\n                        .addComponent(replaceRejectButton)\n                        .addComponent(executeButton)))\n                .addGroup(orderActionPanelLayout.createSequentialGroup()\n                    .addComponent(replacePendingButton)\n                    .addGap(6, 6, 6)\n                    .addComponent(replaceAcceptButton)))\n            .addContainerGap())\n    );\n\n    //ioiTable.setDefaultRenderer(Object.class, new IOICellRenderer());\n    orderTable.setAutoCreateRowSorter(true);\n    orderTable.setModel(new edu.harvard.fas.zfeledy.fiximulator.ui.OrderTableModel());\n    orderTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);\n    //Set initial column widths\n    for (int i = 0; i < orderTable.getColumnCount(); i++){\n        if (i==0) // Order ID\n        orderTable.getColumnModel().\n        getColumn(i).setPreferredWidth(90);\n        if (i==1) // Status\n        orderTable.getColumnModel().\n        getColumn(i).setPreferredWidth(100);\n        if (i==2) // Side\n        orderTable.getColumnModel().\n        getColumn(i).setPreferredWidth(30);\n        if (i==3)\n        orderTable.getColumnModel().\n        getColumn(i).setPreferredWidth(60);\n        if (i==4)\n        orderTable.getColumnModel().\n        getColumn(i).setPreferredWidth(50);\n        if (i==5)\n        orderTable.getColumnModel().\n        getColumn(i).setPreferredWidth(80);\n        if (i==6) // Limit\n        orderTable.getColumnModel().\n        getColumn(i).setPreferredWidth(50);\n        if (i==7) // TIF\n        orderTable.getColumnModel().\n        getColumn(i).setPreferredWidth(30);\n        if (i==8) // Executed\n        orderTable.getColumnModel().\n        getColumn(i).setPreferredWidth(70);\n        if (i==9) // Open\n        orderTable.getColumnModel().\n        getColumn(i).setPreferredWidth(50);\n        if (i==10) // AvgPx\n        orderTable.getColumnModel().\n        getColumn(i).setPreferredWidth(50);\n        if (i==11) // ClOrdID\n        orderTable.getColumnModel().\n        getColumn(i).setPreferredWidth(90);\n        if (i==12) // OrigClOrdID\n        orderTable.getColumnModel().\n        getColumn(i).setPreferredWidth(90);\n    }\n    orderTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);\n    orderScrollPane.setViewportView(orderTable);\n\n    javax.swing.GroupLayout orderPanelLayout = new javax.swing.GroupLayout(orderPanel);\n    orderPanel.setLayout(orderPanelLayout);\n    orderPanelLayout.setHorizontalGroup(\n        orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addComponent(orderScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)\n        .addGroup(orderPanelLayout.createSequentialGroup()\n            .addComponent(orderActionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n    orderPanelLayout.setVerticalGroup(\n        orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(orderPanelLayout.createSequentialGroup()\n            .addComponent(orderActionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(orderScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE))\n    );\n\n    mainTabbedPane.addTab(\"Orders\", orderPanel);\n\n    executionActionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Executions\"));\n\n    executionBustButton.setText(\"Bust\");\n    executionBustButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            executionBustButtonActionPerformed(evt);\n        }\n    });\n\n    executionCorrectButton.setText(\"Correct\");\n    executionCorrectButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            executionCorrectButtonActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout executionActionPanelLayout = new javax.swing.GroupLayout(executionActionPanel);\n    executionActionPanel.setLayout(executionActionPanelLayout);\n    executionActionPanelLayout.setHorizontalGroup(\n        executionActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(executionActionPanelLayout.createSequentialGroup()\n            .addComponent(executionBustButton)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(executionCorrectButton)\n            .addGap(228, 228, 228))\n    );\n    executionActionPanelLayout.setVerticalGroup(\n        executionActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(executionActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n            .addComponent(executionBustButton)\n            .addComponent(executionCorrectButton))\n    );\n\n    executionTable.setDefaultRenderer(Object.class, new ExecutionCellRenderer());\n    executionTable.setAutoCreateRowSorter(true);\n    executionTable.setModel(new edu.harvard.fas.zfeledy.fiximulator.ui.ExecutionTableModel());\n    executionTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);\n    //Set initial column widths\n    for (int i = 0; i < executionTable.getColumnCount(); i++){\n        if (i==0) // ID\n        executionTable.getColumnModel().\n        getColumn(i).setPreferredWidth(90);\n        if (i==1) // ClOrdID\n        executionTable.getColumnModel().\n        getColumn(i).setPreferredWidth(90);\n        if (i==2) // Side\n        executionTable.getColumnModel().\n        getColumn(i).setPreferredWidth(30);\n        if (i==3) // Sybol\n        executionTable.getColumnModel().\n        getColumn(i).setPreferredWidth(60);\n        if (i==4) // LastQty\n        executionTable.getColumnModel().\n        getColumn(i).setPreferredWidth(50);\n        if (i==5) // LastPx\n        executionTable.getColumnModel().\n        getColumn(i).setPreferredWidth(50);\n        if (i==6) // CumQty\n        executionTable.getColumnModel().\n        getColumn(i).setPreferredWidth(50);\n        if (i==7) // AvgPx\n        executionTable.getColumnModel().\n        getColumn(i).setPreferredWidth(50);\n        if (i==8) // Open\n        executionTable.getColumnModel().\n        getColumn(i).setPreferredWidth(50);\n        if (i==9) // ExecType\n        executionTable.getColumnModel().\n        getColumn(i).setPreferredWidth(70);\n        if (i==10) // ExecTransType\n        executionTable.getColumnModel().\n        getColumn(i).setPreferredWidth(70);\n        if (i==11) // RefID\n        executionTable.getColumnModel().\n        getColumn(i).setPreferredWidth(90);\n    }\n    executionTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);\n    executionScrollPane.setViewportView(executionTable);\n\n    javax.swing.GroupLayout executionPanelLayout = new javax.swing.GroupLayout(executionPanel);\n    executionPanel.setLayout(executionPanelLayout);\n    executionPanelLayout.setHorizontalGroup(\n        executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addComponent(executionActionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)\n        .addComponent(executionScrollPane, 0, 0, Short.MAX_VALUE)\n    );\n    executionPanelLayout.setVerticalGroup(\n        executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(executionPanelLayout.createSequentialGroup()\n            .addComponent(executionActionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(executionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE))\n    );\n\n    mainTabbedPane.addTab(\"Executions\", executionPanel);\n\n    instrumentTable.setAutoCreateRowSorter(true);\n    instrumentTable.setModel(new edu.harvard.fas.zfeledy.fiximulator.ui.InstrumentTableModel());\n    instrumentTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);\n    //Set initial column widths\n    for (int i = 0; i < instrumentTable.getColumnCount(); i++){\n        if (i==0)\n        instrumentTable.getColumnModel().\n        getColumn(i).setPreferredWidth(50);\n        if (i==1)\n        instrumentTable.getColumnModel().\n        getColumn(i).setPreferredWidth(200);\n    }\n    instrumentTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);\n    instrumentScrollPane.setViewportView(instrumentTable);\n\n    javax.swing.GroupLayout instrumentPanelLayout = new javax.swing.GroupLayout(instrumentPanel);\n    instrumentPanel.setLayout(instrumentPanelLayout);\n    instrumentPanelLayout.setHorizontalGroup(\n        instrumentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addComponent(instrumentScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)\n    );\n    instrumentPanelLayout.setVerticalGroup(\n        instrumentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(instrumentPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(instrumentScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE))\n    );\n\n    mainTabbedPane.addTab(\"Instruments\", instrumentPanel);\n\n    reportActionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Reporting\"));\n\n    customQueryRunButton.setText(\"Run\");\n    customQueryRunButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            customQueryRunButtonActionPerformed(evt);\n        }\n    });\n\n    queryLabel.setText(\"Query:\");\n\n    queryText.setText(\"select text from messages_log where text like '%35=6%';\");\n\n    cannedQueryCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"Show last 10 IOIs...\", \"Show last 10 orders...\", \"Show last 10 executions...\", \"Show all IOIs where Symbol(55) is...\", \"Show all orders where Symbol(55) is...\", \"Show all executions where Symbol(55) is...\", \"Show all activity where Symbol(55) is...\" }));\n\n    querySymbolLabel.setText(\"Symbol:\");\n\n    cannedQueryRunButton.setText(\"Run\");\n    cannedQueryRunButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            cannedQueryRunButtonActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout reportActionPanelLayout = new javax.swing.GroupLayout(reportActionPanel);\n    reportActionPanel.setLayout(reportActionPanelLayout);\n    reportActionPanelLayout.setHorizontalGroup(\n        reportActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(reportActionPanelLayout.createSequentialGroup()\n            .addGroup(reportActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(reportActionPanelLayout.createSequentialGroup()\n                    .addComponent(cannedQueryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(querySymbolLabel)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(querySymbolText, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))\n                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reportActionPanelLayout.createSequentialGroup()\n                    .addComponent(queryLabel)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(queryText, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(reportActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(cannedQueryRunButton)\n                .addComponent(customQueryRunButton))\n            .addContainerGap())\n    );\n    reportActionPanelLayout.setVerticalGroup(\n        reportActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(reportActionPanelLayout.createSequentialGroup()\n            .addGroup(reportActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(queryLabel)\n                .addComponent(customQueryRunButton)\n                .addComponent(queryText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(reportActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(cannedQueryRunButton)\n                .addComponent(querySymbolText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(querySymbolLabel)\n                .addComponent(cannedQueryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap())\n    );\n\n    executionTable.setDefaultRenderer(Object.class, new ExecutionCellRenderer());\n    reportTable.setAutoCreateRowSorter(true);\n    reportTable.setModel(new QueryTableModel());\n    reportTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);\n    reportTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n    reportScrollPane.setViewportView(reportTable);\n\n    javax.swing.GroupLayout reportPanelLayout = new javax.swing.GroupLayout(reportPanel);\n    reportPanel.setLayout(reportPanelLayout);\n    reportPanelLayout.setHorizontalGroup(\n        reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reportPanelLayout.createSequentialGroup()\n            .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(reportScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)\n                .addComponent(reportActionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n    reportPanelLayout.setVerticalGroup(\n        reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reportPanelLayout.createSequentialGroup()\n            .addComponent(reportActionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(reportScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap())\n    );\n\n    mainTabbedPane.addTab(\"Reports\", reportPanel);\n\n    autoResponsePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Automated Responses\"));\n\n    autoAcknowledge.setText(\"Acknowledge orders on receipt\");\n    try {\n        autoAcknowledge.setSelected(\n            FIXimulator.getApplication().getSettings()\n            .getBool(\"FIXimulatorAutoAcknowledge\"));\n    } catch ( Exception e ){}\n    autoAcknowledge.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            autoAcknowledgeActionPerformed(evt);\n        }\n    });\n\n    autoPendingCancel.setText(\"Send Pending Cancel\");\n    try {\n        autoPendingCancel.setSelected(\n            FIXimulator.getApplication().getSettings()\n            .getBool(\"FIXimulatorAutoPendingCancel\"));\n    } catch ( Exception e ){}\n    autoPendingCancel.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            autoPendingCancelActionPerformed(evt);\n        }\n    });\n\n    autoPendingReplace.setText(\"Send Pending Replace\");\n    try {\n        autoPendingReplace.setSelected(\n            FIXimulator.getApplication().getSettings()\n            .getBool(\"FIXimulatorAutoPendingReplace\"));\n    } catch ( Exception e ){}\n    autoPendingReplace.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            autoPendingReplaceActionPerformed(evt);\n        }\n    });\n\n    autoCancel.setText(\"Accept order cancellations\");\n    try {\n        autoCancel.setSelected(\n            FIXimulator.getApplication().getSettings()\n            .getBool(\"FIXimulatorAutoCancel\"));\n    } catch ( Exception e ){}\n    autoCancel.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            autoCancelActionPerformed(evt);\n        }\n    });\n\n    autoReplace.setText(\"Accept order replacements\");\n    try {\n        autoReplace.setSelected(\n            FIXimulator.getApplication().getSettings()\n            .getBool(\"FIXimulatorAutoReplace\"));\n    } catch ( Exception e ){}\n    autoReplace.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            autoReplaceActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout autoResponsePanelLayout = new javax.swing.GroupLayout(autoResponsePanel);\n    autoResponsePanel.setLayout(autoResponsePanelLayout);\n    autoResponsePanelLayout.setHorizontalGroup(\n        autoResponsePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(autoResponsePanelLayout.createSequentialGroup()\n            .addGroup(autoResponsePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(autoPendingCancel)\n                .addComponent(autoCancel)\n                .addComponent(cancelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(autoAcknowledge)\n                .addComponent(replaceSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(autoPendingReplace)\n                .addComponent(autoReplace))\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n    autoResponsePanelLayout.setVerticalGroup(\n        autoResponsePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(autoResponsePanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(autoAcknowledge)\n            .addGap(6, 6, 6)\n            .addComponent(cancelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(autoPendingCancel)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(autoCancel)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(replaceSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(autoPendingReplace)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(autoReplace)\n            .addContainerGap(76, Short.MAX_VALUE))\n    );\n\n    saveSettingsButton.setText(\"Save Settings\");\n    saveSettingsButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            saveSettingsButtonActionPerformed(evt);\n        }\n    });\n\n    appSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(\"FIXimulator Settings\"));\n\n    pricePrecisionLabel.setText(\"Price precision:\");\n\n    cachedObjectsLabel.setText(\"Number of cached objects:\");\n\n    cachedObjectsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"50\", \"100\", \"200\" }));\n    try {\n        Long settingValue = FIXimulator.getApplication().getSettings()\n        .getLong(\"FIXimulatorCachedObjects\");\n        if ( settingValue == 50 || settingValue == 100 || settingValue == 200) {\n            cachedObjectsCombo.setSelectedItem(settingValue.toString());\n        } else {\n            // default due to bad value\n            cachedObjectsCombo.setSelectedItem(\"50\");\n            FIXimulator.getApplication().getSettings()\n            .setLong(\"FIXimulatorCachedObjects\", 50);\n        }\n    } catch ( Exception e ){\n        // default to to setting not existing\n        cachedObjectsCombo.setSelectedItem(\"50\");\n        FIXimulator.getApplication().getSettings()\n        .setLong(\"FIXimulatorCachedObjects\", 50);\n    }\n    cachedObjectsCombo.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            cachedObjectsComboActionPerformed(evt);\n        }\n    });\n\n    pricePrecisionCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" }));\n    try {\n        Long settingValue = FIXimulator.getApplication().getSettings()\n        .getLong(\"FIXimulatorPricePrecision\");\n        if ( settingValue >= 0 && settingValue < 10 ) {\n            pricePrecisionCombo.setSelectedItem(settingValue.toString());\n        } else {\n            // default due to bad value\n            pricePrecisionCombo.setSelectedItem(\"4\");\n            FIXimulator.getApplication().getSettings()\n            .setLong(\"FIXimulatorPricePrecision\", 4);\n        }\n    } catch ( Exception e ){\n        // default to to setting not existing\n        pricePrecisionCombo.setSelectedItem(\"4\");\n        FIXimulator.getApplication().getSettings()\n        .setLong(\"FIXimulatorPricePrecision\", 4);\n    }\n    pricePrecisionCombo.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            pricePrecisionComboActionPerformed(evt);\n        }\n    });\n\n    sendOnBehalfOfCompID.setText(\"Send OnBehalfOfCompID (115)\");\n    try {\n        sendOnBehalfOfCompID.setSelected(\n            FIXimulator.getApplication().getSettings()\n            .getBool(\"FIXimulatorSendOnBehalfOfCompID\"));\n    } catch ( Exception e ){}\n    sendOnBehalfOfCompID.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            sendOnBehalfOfCompIDActionPerformed(evt);\n        }\n    });\n\n    sendOnBehalfOfSubID.setText(\"Send OnBehalfOfSubID (116)\");\n    try {\n        sendOnBehalfOfSubID.setSelected(\n            FIXimulator.getApplication().getSettings()\n            .getBool(\"FIXimulatorSendOnBehalfOfSubID\"));\n    } catch ( Exception e ){}\n    sendOnBehalfOfSubID.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            sendOnBehalfOfSubIDActionPerformed(evt);\n        }\n    });\n\n    logToFileLabel.setText(\"<html>Changing the logging requires saving the settings and restarting the application...</htm;>\");\n\n    logToFile.setText(\"Log to file\");\n    try {\n        logToFile.setSelected(\n            FIXimulator.getApplication().getSettings()\n            .getBool(\"FIXimulatorLogToFile\"));\n    } catch ( Exception e ){}\n    logToFile.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            logToFileActionPerformed(evt);\n        }\n    });\n\n    logToDB.setText(\"Log to database\");\n    try {\n        logToDB.setSelected(\n            FIXimulator.getApplication().getSettings()\n            .getBool(\"FIXimulatorLogToDB\"));\n    } catch ( Exception e ){}\n    logToDB.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            logToDBActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout appSettingsPanelLayout = new javax.swing.GroupLayout(appSettingsPanel);\n    appSettingsPanel.setLayout(appSettingsPanelLayout);\n    appSettingsPanelLayout.setHorizontalGroup(\n        appSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(appSettingsPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(appSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(logToFileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGroup(appSettingsPanelLayout.createSequentialGroup()\n                    .addComponent(logToFile)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(logToDB))\n                .addComponent(oboCompIDSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)\n                .addComponent(sendOnBehalfOfSubID)\n                .addGroup(appSettingsPanelLayout.createSequentialGroup()\n                    .addGroup(appSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(cachedObjectsLabel)\n                        .addComponent(pricePrecisionLabel))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addGroup(appSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(cachedObjectsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(pricePrecisionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                .addComponent(oboCompIDSeparator, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)\n                .addComponent(sendOnBehalfOfCompID))\n            .addContainerGap())\n    );\n\n    appSettingsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cachedObjectsCombo, pricePrecisionCombo});\n\n    appSettingsPanelLayout.setVerticalGroup(\n        appSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(appSettingsPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(appSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(pricePrecisionLabel)\n                .addComponent(pricePrecisionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(appSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(cachedObjectsLabel)\n                .addComponent(cachedObjectsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addGap(18, 18, 18)\n            .addComponent(oboCompIDSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(sendOnBehalfOfCompID)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(sendOnBehalfOfSubID)\n            .addGap(12, 12, 12)\n            .addComponent(oboCompIDSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(logToFileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(appSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(logToFile)\n                .addComponent(logToDB))\n            .addContainerGap())\n    );\n\n    showSettingsButton.setText(\"Show Settings\");\n    showSettingsButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            showSettingsButtonActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);\n    settingsPanel.setLayout(settingsPanelLayout);\n    settingsPanelLayout.setHorizontalGroup(\n        settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(settingsPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(settingsPanelLayout.createSequentialGroup()\n                    .addComponent(autoResponsePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(appSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))\n                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()\n                    .addComponent(showSettingsButton)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(saveSettingsButton)))\n            .addContainerGap())\n    );\n\n    settingsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {saveSettingsButton, showSettingsButton});\n\n    settingsPanelLayout.setVerticalGroup(\n        settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(appSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(autoResponsePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(saveSettingsButton)\n                .addComponent(showSettingsButton))\n            .addContainerGap())\n    );\n\n    mainTabbedPane.addTab(\"Settings\", settingsPanel);\n\n    fileMenu.setText(\"File\");\n\n    exitMenuItem.setText(\"Exit\");\n    exitMenuItem.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            exitMenuItemActionPerformed(evt);\n        }\n    });\n    fileMenu.add(exitMenuItem);\n\n    mainMenuBar.add(fileMenu);\n\n    instrumentMenu.setLabel(\"Instruments\");\n\n    loadInstrumentMenuItem.setText(\"Load Instruments...\");\n    loadInstrumentMenuItem.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            loadInstrumentMenuItemActionPerformed(evt);\n        }\n    });\n    instrumentMenu.add(loadInstrumentMenuItem);\n\n    mainMenuBar.add(instrumentMenu);\n\n    helpMenu.setLabel(\"Help\");\n\n    aboutMenuItem.setText(\"About...\");\n    aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            aboutMenuItemActionPerformed(evt);\n        }\n    });\n    helpMenu.add(aboutMenuItem);\n\n    mainMenuBar.add(helpMenu);\n\n    setJMenuBar(mainMenuBar);\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(messagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                    .addComponent(mainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(messageDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addComponent(statusBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(messageDetailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(mainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(messagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(statusBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap())\n    );\n\n    bindingGroup.bind();\n\n    pack();\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\ui\\FIXimulatorFrame.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "//GEN-LAST:event_ioiDialogOKActionPerformed\n", "func_signal": "private void cancelIOIButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_cancelIOIButtonActionPerformed\n    int row = ioiTable.getSelectedRow();\n    // if there is a row selected\n    if ( row != -1 ) {\n        row = ioiTable.convertRowIndexToModel(row);\n        IOI ioi = FIXimulator.getApplication().getIOIs().getIOI(row);\n        IOI cancelIOI = ioi.clone();\n        cancelIOI.setType(\"CANCEL\");\n        FIXimulator.getApplication().sendIOI(cancelIOI);\n    }\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\ui\\FIXimulatorFrame.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "// NewOrderSingle handling\n", "func_signal": "@Override\npublic void onMessage( quickfix.fix42.NewOrderSingle message, \n        SessionID sessionID )\n\tthrows FieldNotFound, UnsupportedMessageType, IncorrectTagValue", "code": "{\n    Order order = new Order( message );\n    order.setReceivedOrder( true );\n    if ( executorStarted ) {\n        orders.add( order, true );\n        executorThread.interrupt();\n    } else {\n        orders.add( order, false );\n        boolean autoAck = false;\n        try {\n            autoAck = settings.getBool(\"FIXimulatorAutoAcknowledge\");\n        } catch ( Exception e ) {}\n        if ( autoAck ) {\n            acknowledge( order );\n        }\n    }\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\core\\FIXimulatorApplication.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "/** Creates new form FIXimulatorFrame */\n", "func_signal": "public FIXimulatorFrame()", "code": "{\n    try {\n        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n    } catch (Exception e) {e.printStackTrace();}\n    initComponents();\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\ui\\FIXimulatorFrame.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "//GEN-LAST:event_symbolComboBoxActionPerformed\n", "func_signal": "private void securityIDComboBoxActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_securityIDComboBoxActionPerformed\n    FIXimulator.getApplication().setNewSecurityID(\n            securityIDComboBox.getSelectedItem().toString());\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\ui\\FIXimulatorFrame.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "//GEN-LAST:event_ioiDialogCancelActionPerformed\n", "func_signal": "private void ioiDialogOKActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_ioiDialogOKActionPerformed\n    // Set fields\n    dialogIOI.setSide(ioiDialogSide.getSelectedItem().toString());\n    dialogIOI.setQuantity(Integer.parseInt(ioiDialogShares.getText()));\n    dialogIOI.setSymbol(ioiDialogSymbol.getText());\n    dialogIOI.setSecurityID(ioiDialogSecurityID.getText());\n    dialogIOI.setIDSource(ioiDialogIDSource.getSelectedItem().toString());\n    dialogIOI.setPrice(Double.parseDouble(ioiDialogPrice.getText()));\n    dialogIOI.setNatural(ioiDialogNatural.getSelectedItem().toString());\n    FIXimulator.getApplication().sendIOI(dialogIOI);\n    ioiDialog.dispose();\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\ui\\FIXimulatorFrame.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "//GEN-LAST:event_cancelPendingButtonActionPerformed\n", "func_signal": "private void cancelAcceptButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_cancelAcceptButtonActionPerformed\n    int row = orderTable.getSelectedRow();\n    // if no rows are selected\n    if ( row != -1 ) {\n        row = orderTable.convertRowIndexToModel(row);\n        Order order = FIXimulator.getApplication().getOrders().getOrder(row);\n        FIXimulator.getApplication().cancel(order);\n    }\n}", "path": "src\\edu\\harvard\\fas\\zfeledy\\fiximulator\\ui\\FIXimulatorFrame.java", "repo_name": "FIXimulator/FIXimulator", "stars": 29, "license": "None", "language": "java", "size": 7493}
{"docstring": "/**\n * Returns resized image\n * NB - useful reference on high quality image resizing can be found here:\n *   http://today.java.net/pub/a/today/2007/04/03/perils-of-image-getscaledinstance.html\n * @param width the required width\n * @param height the frequired height\n * @param img the image to be resized\n */\n", "func_signal": "private static BufferedImage resizeImage(BufferedImage img, double width, double height)", "code": "{\n    int w = (int) width;\n    int h = (int) height;\n    BufferedImage result = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);\n    Graphics2D g = result.createGraphics();\n    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n    g.drawImage(img, 0, 0, w, h, 0, 0, img.getWidth(), img.getHeight(), null);\n    //surprisingly this gives worse results\n    //RenderingHints qualityHints = new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n    //BufferedImage result = JAI.create(\"SubsampleAverage\", img, width / (double) img.getWidth(), height / (double) img.getHeight(), qualityHints).getAsBufferedImage();\n    return result;\n}", "path": "DeepZoomTiler\\src\\deepzoomtiler\\DeepZoomTiler.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "//##########################################################################\n// reading / writing settings\n// TODO: save tasks data prompt for saving before exit show read/write errors\n", "func_signal": "public void readSettingsFromFile()", "code": "{\n    try {\n        Properties prop = new Properties();\n        prop.load(new FileInputStream(aggstngs.currentDirectory + File.separator + AggregatedSettings.FILE_PROPERTIES));\n        try {\n            aggstngs.res.setJarDir(prop.getProperty(RESSettings.VALUE_JAR_DIR));\n\n            aggstngs.dzt.setTileOverlap(prop.getProperty(DZTSettings.VALUE_TILE_OVERLAP));\n            aggstngs.dzt.setTileSize(prop.getProperty(DZTSettings.VALUE_TILE_SIZE));\n            aggstngs.dzt.setQuality(prop.getProperty(DZTSettings.VALUE_QUALITY));\n            aggstngs.dzt.setJarDir(prop.getProperty(DZTSettings.VALUE_JAR_DIR));\n\n            aggstngs.ec.setWallOverlap(prop.getProperty(ECSettings.VALUE_WALL_OVERLAP));\n            aggstngs.ec.setInterpolation(prop.getProperty(ECSettings.VALUE_INTERPOLATION));\n            aggstngs.ec.setJarDir(prop.getProperty(ECSettings.VALUE_JAR_DIR));\n\n            aggstngs.ge.setTmpDir(prop.getProperty(GESettings.VALUE_TMP_DIR));\n            aggstngs.ge.setMemoryLimit(prop.getProperty(GESettings.VALUE_MEMORY_LIMIT));\n            aggstngs.ge.setRemoveObsolete(prop.getProperty(GESettings.VALUE_REMOVE_OBSOLETE));\n            aggstngs.ge.setOverwriteOutput(prop.getProperty(GESettings.VALUE_OVERWRITE_OUTPUT));\n            aggstngs.ge.setInputDir(prop.getProperty(GESettings.VALUE_INPUT_DIR));\n            aggstngs.ge.setOutputDir(prop.getProperty(GESettings.VALUE_OUTPUT_DIR));\n            aggstngs.ge.setSelectedCommand(prop.getProperty(GESettings.VALUE_SELECTED_COMMAND));\n\n            aggstngs.opt.setResizePercent(prop.getProperty(OPTSettings.VALUE_RESIZE_PERCENT));\n            aggstngs.opt.setMaxTileSize(prop.getProperty(OPTSettings.VALUE_MAX_TILE_SIZE));\n            aggstngs.opt.setMinTileSize(prop.getProperty(OPTSettings.VALUE_MIN_TILE_SIZE));\n\n        } catch (IllegalArgumentException ex) {\n            // TODO: indicate error\n            System.out.println(\"corrupted settings file not all settings red.\");\n        }\n    } catch (IOException ex) {\n        //TODO: indicate error\n        System.out.println(\"Settings could not be red everything default.\");\n    }\n}", "path": "SaladoConverter\\src\\com\\panozona\\converter\\Controller.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "/**\n * Process the given image file, producing its Deep Zoom output files\n * in a subdirectory of the given output directory.\n * @param inFile the file containing the image\n * @param outputDir the output directory\n */\n", "func_signal": "private static void processImageFile(File inFile, File outputDir) throws IOException", "code": "{\n    if (verboseMode) {\n        System.out.printf(\"Processing image: %s\\n\", inFile);\n    }\n    String fileName = inFile.getName();\n    String nameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n    String pathWithoutExtension = outputDir + File.separator + nameWithoutExtension;\n\n    BufferedImage image = loadImage(inFile);\n\n    int originalWidth = image.getWidth();\n    int originalHeight = image.getHeight();\n\n    double maxDim = Math.max(originalWidth, originalHeight);\n\n    int nLevels = (int) Math.ceil(Math.log(maxDim) / Math.log(2));\n\n    if (verboseMode) {\n        System.out.printf(\"nLevels=%d\\n\", nLevels);\n    }\n\n    // Delete any existing output files and folders for this image\n    File descriptor = new File(pathWithoutExtension + \".xml\");\n    if (descriptor.exists()) {\n        if (verboseMode) {\n            System.out.printf(\"Deleting descriptor: %s\\n\", descriptor);\n        }\n        deleteFile(descriptor);\n    }\n\n    File imgDir = new File(pathWithoutExtension);\n    if (imgDir.exists()) {\n        if (verboseMode) {\n            System.out.printf(\"Deleting directory: %s\\n\", imgDir);\n        }\n        deleteDir(imgDir);\n    }\n\n    imgDir = createDir(outputDir, nameWithoutExtension);\n\n    System.out.printf(\"Writing into directory: %s\\n\", imgDir);\n\n    double width = originalWidth;\n    double height = originalHeight;\n\n    for (int level = nLevels; level >= 0; level--) {\n\n        int nCols = (int) Math.ceil(width / tileSize);\n        int nRows = (int) Math.ceil(height / tileSize);\n        if (debugMode) {\n            System.out.printf(\"level=%d \\t w/h=%.0f/%.0f \\t cols/rows=%d/%d\\n\",\n                    level, width, height, nCols, nRows);\n        }\n\n        File dir = createDir(imgDir, Integer.toString(level));\n        for (int col = 0; col < nCols; col++) {\n            for (int row = 0; row < nRows; row++) {\n                BufferedImage tile = getTile(image, row, col);\n                saveImageAtQuality(tile, dir + File.separator + col + '_' + row, quality);\n            }\n        }\n\n        // Scale down image for next level\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n        if (width > 10 && height > 10) {\n            // resize in stages to improve quality\n            image = resizeImage(image, width * 1.66d, height * 1.66d);\n            image = resizeImage(image, width * 1.33d, height * 1.33d);\n        }\n        image = resizeImage(image, width, height);\n    }\n\n    saveImageDescriptor(originalWidth, originalHeight, descriptor);\n}", "path": "DeepZoomTiler\\src\\deepzoomtiler\\DeepZoomTiler.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "//##########################################################################\n// managing tasks\n", "func_signal": "public void addTask(File[] selectedFiles)", "code": "{\n\n    HashMap<String, ArrayList<Image>> m = new HashMap<String, ArrayList<Image>>();\n    for (File file : selectedFiles) {\n        addTaskR(file, m, true);\n    }\n\n    // analyse hashmap and add to tasks every 6 squareimages\n    // with same size and matching given regex\n    Iterator it = m.entrySet().iterator();\n    ArrayList<Image> collectedImages;\n    ArrayList<Image> cubeWalls;\n    int firstWallsize;\n    String wallsRegex;\n    while (it.hasNext()) {\n        Map.Entry pairs = (Map.Entry) it.next();\n        collectedImages = (ArrayList<Image>) pairs.getValue();\n        cubeWalls = new ArrayList<Image>();\n\n        firstWallsize = 0;\n        wallsRegex = null;\n\n        for (Image image : collectedImages) {\n            if (image.path.toLowerCase().matches(\".+_[b|d|l|r|f|u]\\\\.(tif{1,2}|jpg|jpeg|gif|bmp|png)$\")) {\n                firstWallsize = image.width;\n                wallsRegex = image.path.substring(image.path.lastIndexOf(File.separator) + 1, image.path.lastIndexOf(\"_\") + 1)\n                        + \"[b|d|l|r|f|u]\"\n                        + image.path.substring(image.path.lastIndexOf(\".\"), image.path.length());\n                break;\n            }\n        }\n\n        if (wallsRegex != null) {\n            for (Image image : collectedImages) {\n                if (image.width == firstWallsize\n                        && image.path.substring(image.path.lastIndexOf(File.separator) + 1).matches(wallsRegex)) {\n                    cubeWalls.add(image);\n                    System.out.println(\"Cube wall: \" + image.path);\n                }\n            }\n            if (cubeWalls.size() == 6) {\n                TaskData newTask = new TaskData(new Panorama(collectedImages));\n                newTask.state = TaskData.STATE_READY;\n                appendTask(newTask);\n            } else {\n                StringBuilder sb = new StringBuilder(\"Not enough walls (\" + cubeWalls.size() + \")\");\n                for (Image cubeWall : cubeWalls) {\n                    sb.append(\"\\n\");\n                    sb.append(cubeWall.path.substring(cubeWall.path.lastIndexOf(File.separator) + 1));                        \n                }\n                mainWindowView.showOptionPane(sb.toString());\n            }\n        }\n    }\n}", "path": "SaladoConverter\\src\\com\\panozona\\converter\\Controller.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "/**\n * Creates a directory\n * @param parent the parent directory for the new directory\n * @param name the new directory name\n */\n", "func_signal": "private static File createDir(File parent, String name) throws IOException", "code": "{\n    assert (parent.isDirectory());\n    File result = new File(parent + File.separator + name);\n    if (!(result.exists() || result.mkdir())) {\n        throw new IOException(\"Unable to create directory: \" + result);\n    }\n    return result;\n}", "path": "DeepZoomTiler\\src\\deepzoomtiler\\DeepZoomTiler.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "/**\n * Process the command line arguments\n * @param args the command line arguments\n */\n", "func_signal": "private static void parseCommandLine(String[] args) throws Exception", "code": "{\n    CmdParseState state = CmdParseState.DEFAULT;\n    for (int count = 0; count < args.length; count++) {\n        String arg = args[count];\n        switch (state) {\n            case DEFAULT:\n                if (arg.equals(\"-h\") || arg.equals(\"-help\")) {\n                    showHelp = true;\n                    return;\n                } else if (arg.equals(\"-verbose\")) {\n                    verboseMode = true;\n                } else if (arg.equals(\"-debug\")) {\n                    verboseMode = true;\n                    debugMode = true;\n                } else if (arg.equals(\"-simpleoutput\") || arg.equals(\"-s\")) {\n                    simpleoutput = true;\n                } else if (arg.equals(\"-outputdir\") || arg.equals(\"-o\")) {\n                    state = CmdParseState.OUTPUTDIR;\n                } else if (arg.equals(\"-tilesize\")) {\n                    state = CmdParseState.TILESIZE;\n                } else if (arg.equals(\"-overlap\")) {\n                    state = CmdParseState.OVERLAP;\n                } else if (arg.equals(\"-quality\")) {\n                    state = CmdParseState.QUALITY;\n                } else {\n                    state = CmdParseState.INPUTFILE;\n                }\n                break;\n            case OUTPUTDIR:\n                outputFiles.add(new File(args[count]));\n                state = CmdParseState.DEFAULT;\n                break;\n            case TILESIZE:\n                tileSize = Integer.parseInt(args[count]);\n                state = CmdParseState.DEFAULT;\n                break;\n            case OVERLAP:\n                tileOverlap = Integer.parseInt(args[count]);\n                state = CmdParseState.DEFAULT;\n                break;\n            case QUALITY:\n                float qtmp = Float.parseFloat(args[count]);\n                if (qtmp < 0 || qtmp > 1) {\n                    throw new Exception(\"-quality\");\n                }\n                quality = qtmp;\n                state = CmdParseState.DEFAULT;\n                break;\n        }\n        if (state == CmdParseState.INPUTFILE) {\n            File inputFile = new File(arg);\n            if (!inputFile.exists()) {\n                throw new FileNotFoundException(\"Missing input: \" + inputFile.getPath());\n            }\n            ArrayList<String> exts = new ArrayList<String>();\n            exts.add(\"bmp\");\n            exts.add(\"jpg\");\n            exts.add(\"jpeg\");\n            exts.add(\"png\");\n            exts.add(\"gif\");\n            exts.add(\"tif\");\n            exts.add(\"tiff\");\n            if (inputFile.isDirectory()) {\n                FilenameFilter select = new FileListFilter(exts);\n                File[] files = inputFile.listFiles(select);\n                java.util.List fileList = java.util.Arrays.asList(files);\n                for (java.util.Iterator itr = fileList.iterator(); itr.hasNext();) {\n                    File f = (File) itr.next();\n                    inputFiles.add((File) f);\n                }\n            } else {\n                String fExt = inputFile.getAbsolutePath().substring(inputFile.getAbsolutePath().lastIndexOf(\".\") + 1);\n                for (String ext : exts) {\n                    if (ext.equals(fExt)) {\n                        inputFiles.add(inputFile);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (inputFiles.isEmpty()) {\n        throw new Exception(\"No input files given.\");\n    }\n}", "path": "DeepZoomTiler\\src\\deepzoomtiler\\DeepZoomTiler.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "/**\n * Loads image from file\n * @param file the file containing the image\n */\n", "func_signal": "private static BufferedImage loadImage(File file) throws IOException", "code": "{\n    FileSeekableStream stream = null;\n    BufferedImage result = null;\n    try {\n        stream = new FileSeekableStream(file);\n        PlanarImage planarImage = JAI.create(\"stream\", stream);\n        //PlanarImage planarImage = JAI.create(\"fileload\", file.getAbsolutePath());            \n        result = planarImage.getAsBufferedImage();\n    } catch (Exception e) {\n        e.printStackTrace();\n        throw new IOException(\"Cannot read image file: \" + file.getAbsolutePath());\n    } finally {\n        if (stream != null) {\n            stream.close();\n        }\n    }\n    return result;\n}", "path": "DeepZoomTiler\\src\\deepzoomtiler\\DeepZoomTiler.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "/**\n * Saves image to the given file\n * @param img the image to be saved\n * @param path the path of the file to which it is saved (less the extension)\n * @param quality the compression quality to use (0-1)\n */\n", "func_signal": "private static void saveImageAtQuality(BufferedImage img, String path, float quality) throws IOException", "code": "{\n    File outputFile = new File(path + \".jpg\");\n    Iterator iter = ImageIO.getImageWritersByFormatName(\"jpeg\");\n    ImageWriter writer = (ImageWriter) iter.next();\n    ImageWriteParam iwp = writer.getDefaultWriteParam();\n    iwp.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);\n    iwp.setCompressionQuality(quality);\n    FileImageOutputStream output = new FileImageOutputStream(outputFile);\n    writer.setOutput(output);\n    IIOImage image = new IIOImage(img, null, null);\n    try {\n        writer.write(null, image, iwp);\n    } catch (IOException e) {\n        throw new IOException(\"Unable to save image file: \" + outputFile);\n    } finally {\n        if (writer != null) {\n            writer.dispose();\n        }\n        if (output != null) {\n            output.close();\n        }\n    }\n}", "path": "DeepZoomTiler\\src\\deepzoomtiler\\DeepZoomTiler.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "/**\n * Saves strings as text to the given file\n * @param lines the image to be saved\n * @param file the file to which it is saved\n */\n", "func_signal": "private static void saveText(ArrayList lines, File file) throws IOException", "code": "{\n    if (verboseMode) {\n        System.out.printf(\"Writing file: %s\\n\", file);\n    }\n    FileOutputStream fos = null;\n    try {\n        fos = new FileOutputStream(file);\n        PrintStream ps = new PrintStream(fos);\n        for (int i = 0; i < lines.size(); i++) {\n            ps.println((String) lines.get(i));\n        }\n    } catch (IOException e) {\n        throw new IOException(\"Unable to write to text file: \" + file);\n    } finally {\n        if (fos != null) {\n            fos.close();\n        }\n    }\n}", "path": "DeepZoomTiler\\src\\deepzoomtiler\\DeepZoomTiler.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "/**\n * Gets an image containing the tile at the given row and column\n * for the given image.\n * @param img - the input image from whihc the tile is taken\n * @param row - the tile's row (i.e. y) index\n * @param col - the tile's column (i.e. x) index\n */\n", "func_signal": "private static BufferedImage getTile(BufferedImage img, int row, int col)", "code": "{\n    int x = col * tileSize - (col == 0 ? 0 : tileOverlap);\n    int y = row * tileSize - (row == 0 ? 0 : tileOverlap);\n    int w = tileSize + (col == 0 ? 1 : 2) * tileOverlap;\n    int h = tileSize + (row == 0 ? 1 : 2) * tileOverlap;\n    if (x + w > img.getWidth()) {\n        w = img.getWidth() - x;\n    }\n    if (y + h > img.getHeight()) {\n        h = img.getHeight() - y;\n    }\n    if (debugMode) {\n        System.out.printf(\"getTile: row=%d, col=%d, x=%d, y=%d, w=%d, h=%d\\n\",\n                row, col, x, y, w, h);\n    }\n    assert (w > 0);\n    assert (h > 0);\n    BufferedImage result = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);\n    Graphics2D g = result.createGraphics();\n    g.drawImage(img, 0, 0, w, h, x, y, x + w, y + h, null);\n\n    return result;\n}", "path": "DeepZoomTiler\\src\\deepzoomtiler\\DeepZoomTiler.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "/**\n * Write image descriptor XML file\n * @param width image width\n * @param height image height\n * @param file the file to which it is saved\n */\n", "func_signal": "private static void saveImageDescriptor(int width, int height, File file) throws IOException", "code": "{\n    String xmlHeader = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\";\n    String schemaName = \"http://schemas.microsoft.com/deepzoom/2009\";\n    ArrayList<String> lines = new ArrayList<String>();\n    lines.add(xmlHeader);\n    lines.add(\"<Image TileSize=\\\"\" + tileSize + \"\\\" Overlap=\\\"\" + tileOverlap + \"\\\" Format=\\\"jpg\\\" ServerFormat=\\\"Default\\\" xmnls=\\\"\" + schemaName + \"\\\">\");\n    lines.add(\"<Size Width=\\\"\" + width + \"\\\" Height=\\\"\" + height + \"\\\" />\");\n    lines.add(\"</Image>\");\n    saveText(lines, file);\n}", "path": "DeepZoomTiler\\src\\deepzoomtiler\\DeepZoomTiler.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "//Cubic to DeepZoom cubic\n", "func_signal": "private void generateOpCTDZC(TaskData taskData)", "code": "{\n    String parentFolderName;\n    String nameWithoutExtension;\n    String[] tmp;\n    String outputDir;\n    String resDir = aggstngs.ge.getTmpDir() + File.separator + \"res\";\n    for (Image image : taskData.getPanorama().getImages()) {\n        tmp = image.path.split(Pattern.quote(File.separator));\n        parentFolderName = tmp[tmp.length - 2];\n\n        outputDir = getOutputFolderName(aggstngs.ge.getOutputDir() + File.separator + \"dz_\" + parentFolderName);\n        nameWithoutExtension = image.path.substring(image.path.lastIndexOf(File.separator) + 1, image.path.lastIndexOf('.'));\n\n        if (taskData.cubeSizeChanged()) {\n\n            taskData.operations.add(new Operation(Operation.TYPE_RES, generateArgsRES(image.path, resDir, taskData.getNewCubeSize())));\n\n            taskData.operations.add(new Operation(Operation.TYPE_DZT, generateArgsDZT(resDir + File.separator + nameWithoutExtension + \".tif\", outputDir, taskData.getNewTileSize())));\n\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{resDir + File.separator + nameWithoutExtension + \".tif\"}));\n\n        } else {\n            taskData.operations.add(new Operation(Operation.TYPE_DZT, generateArgsDZT(image.path, outputDir, taskData.getNewTileSize())));\n        }\n\n        if (aggstngs.ge.getRemoveObsolete()) {\n            if (!nameWithoutExtension.endsWith(\"_f\")) {\n                taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{outputDir + File.separator + nameWithoutExtension + \".xml\"}));\n            }\n            removeObsoleteDeepZoomImages(taskData, outputDir + File.separator + nameWithoutExtension);\n        }\n    }\n}", "path": "SaladoConverter\\src\\com\\panozona\\converter\\Controller.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "/**\n * Recursively deletes a directory\n * @param path the path of the directory to be deleted\n */\n", "func_signal": "private static void deleteDir(File dir) throws IOException", "code": "{\n    if (!dir.isDirectory()) {\n        deleteFile(dir);\n    } else {\n        for (File file : dir.listFiles()) {\n            if (file.isDirectory()) {\n                deleteDir(file);\n            } else {\n                deleteFile(file);\n            }\n        }\n        if (!dir.delete()) {\n            throw new IOException(\"Failed to delete directory: \" + dir);\n        }\n    }\n}", "path": "DeepZoomTiler\\src\\deepzoomtiler\\DeepZoomTiler.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "// TODO: is that right?\n", "func_signal": "public void executeTasks()", "code": "{\n    TasksExecutor executor = new TasksExecutor(taskTableModel, aggstngs);\n    ApplicationContext applicationContext = SaladoConverter.getApplication().getContext();\n    TaskService taskService = applicationContext.getTaskService();\n    taskService.execute(executor);\n    taskMonitor.setForegroundTask(executor);\n}", "path": "SaladoConverter\\src\\com\\panozona\\converter\\Controller.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    try {\n        try {\n\n            parseCommandLine(args);\n            if (showHelp) {\n                System.out.println(help);\n                return;\n            }\n\n            //when output file is given, output are folders with names of input file in that directory\n            if (outputFiles.size() == 1) {\n                outputDir = outputFiles.get(0);\n                outputFiles.clear();\n\n                if (!outputDir.exists() || !outputDir.isDirectory()) {\n                    if (!outputDir.mkdir()) {\n                        throw new IOException(\"Unable to create directory: \" + outputDir);\n                    }\n                }\n\n                Iterator<File> itr = inputFiles.iterator();\n                while (itr.hasNext()) {\n                    File inputFile = itr.next();\n                    String fileName = inputFile.getName();\n                    String nameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n                    if (simpleOutput) {\n                        outputFiles.add(outputDir);\n                    } else {\n                        File outputFile = createDir(outputDir, \"resized_\" + nameWithoutExtension);\n                        outputFiles.add(outputFile);\n                    }\n                }\n            }\n\n            // default location for output files is folder beside input files with the name of the input file\n            if (outputFiles.isEmpty()) {\n                Iterator<File> itr = inputFiles.iterator();\n                while (itr.hasNext()) {\n                    File inputFile = itr.next();\n                    File parentFile = inputFile.getAbsoluteFile().getParentFile();\n                    String fileName = inputFile.getName();\n                    String nameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n                    if (simpleOutput) {\n                        outputFiles.add(parentFile);\n                    } else {\n                        File outputFile = createDir(parentFile, \"tiles_\" + nameWithoutExtension);\n                        outputFiles.add(outputFile);\n                    }\n                }\n            }\n\n            if (debugMode) {\n                if (outputDir != null) {\n                    System.out.printf(\"outputDir=%s\", outputDir.getPath());\n                }\n                System.out.print(\"\\n\");\n            }\n        } catch (Exception e) {\n            System.out.println(\"Invalid command: \" + e.getMessage());\n            System.out.println(\"type -h to get list of supported commands\");\n            return;\n        }\n        System.setProperty(\"com.sun.media.jai.disableMediaLib\", \"true\");\n        // can be problematic in non-admin accounts\n        // java -Dcom.sun.media.jai.disableMediaLib=true YourApp\n        for (int i = 0; i < inputFiles.size(); i++) {\n            processImageFile(inputFiles.get(i), outputFiles.get(i));\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}", "path": "Resizer\\src\\resizer\\Resizer.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "//##########################################################################\n// generating / executing operations\n", "func_signal": "public void generateOperations()", "code": "{\n    TaskData taskData;\n    String selection = aggstngs.ge.getSelectedCommand();\n    for (int i = 0; i < taskTableModel.getRowCount(); i++) {\n        taskData = taskTableModel.rows.get(i);\n        taskData.operations.clear();\n        if (taskData.checkBoxEnabled && taskData.checkBoxSelected) {\n            taskData.state = TaskData.STATE_READY;\n            if (selection.equals(GESettings.COMMAND_CUBIC_TO_RESIZED_CUBIC)) {\n                generateOpCRES(taskData);\n            } else if (selection.equals(GESettings.COMMAND_CUBIC_TO_DEEPZOOM_CUBIC)) {\n                generateOpCTDZC(taskData);\n            } else if (selection.equals(GESettings.COMMAND_EQUIRECTANGULAR_TO_CUBIC)) {\n                generateOpETC(taskData);\n            } else if (selection.equals(GESettings.COMMAND_EQUIRECTANGULAR_TO_DEEPZOOM_CUBIC)) {\n                generateOpETDZC(taskData);\n            }\n        }\n        taskTableModel.fireTableDataChanged();\n    }\n}", "path": "SaladoConverter\\src\\com\\panozona\\converter\\Controller.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    try {\n        try {\n            parseCommandLine(args);\n            if (showHelp) {\n                System.out.println(help);\n                return;\n            }\n            //when output file is given, output are folders with names of input file in that directory\n            if (outputFiles.size() == 1) {\n                outputDir = outputFiles.get(0);\n                outputFiles.clear();\n\n                if (!outputDir.exists() || !outputDir.isDirectory()) {\n                    if (!outputDir.mkdir()) {\n                        throw new IOException(\"Unable to create directory: \" + outputDir);\n                    }\n                }\n\n                Iterator<File> itr = inputFiles.iterator();\n                while (itr.hasNext()) {\n                    File inputFile = itr.next();\n                    String fileName = inputFile.getName();\n                    String nameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n                    if (simpleoutput) {\n                        outputFiles.add(outputDir);\n                    } else {\n                        File outputFile = createDir(outputDir, \"tiles_\" + nameWithoutExtension);\n                        outputFiles.add(outputFile);\n                    }\n                }\n            }\n\n            // default location for output files is folder beside input files with the name of the input file\n            if (outputFiles.isEmpty()) {\n                Iterator<File> itr = inputFiles.iterator();\n                while (itr.hasNext()) {\n                    File inputFile = itr.next();\n                    File parentFile = inputFile.getAbsoluteFile().getParentFile();\n                    String fileName = inputFile.getName();\n                    String nameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n                    if (simpleoutput) {\n                        outputFiles.add(parentFile);\n                    } else {\n                        File outputFile = createDir(parentFile, \"tiles_\" + nameWithoutExtension);\n                        outputFiles.add(outputFile);\n                    }\n                }\n            }\n\n            if (debugMode) {\n                System.out.printf(\"tileSize=%d \", tileSize);\n                System.out.printf(\"tileOverlap=%d \", tileOverlap);\n                System.out.printf(\"quality=%.2f \", quality);\n            }\n        } catch (Exception e) {\n            System.out.println(\"Invalid command: \" + e.getMessage());\n            System.out.println(\"For avaible options type: -help or -h\");\n            return;\n        }\n        System.setProperty(\"com.sun.media.jai.disableMediaLib\", \"true\");\n        // it probably can be problematic in non-admin accounts\n        // java -D com.sun.media.jai.disableMediaLib=true YourApp\n        for (int i = 0; i < inputFiles.size(); i++) {\n            processImageFile(inputFiles.get(i), outputFiles.get(i));\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}", "path": "DeepZoomTiler\\src\\deepzoomtiler\\DeepZoomTiler.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "/**\n * Process the command line arguments\n * @param args the command line arguments\n */\n", "func_signal": "private static void parseCommandLine(String[] args) throws Exception", "code": "{\n    CmdParseState state = CmdParseState.DEFAULT;\n    for (int count = 0; count < args.length; count++) {\n        String arg = args[count];\n        switch (state) {\n            case DEFAULT:\n                if (arg.equals(\"-help\") || arg.equals(\"-h\")) {\n                    showHelp = true;\n                    return;\n                } else if (arg.equals(\"-verbose\")) {\n                    verboseMode = true;\n                } else if (arg.equals(\"-debug\")) {\n                    verboseMode = true;\n                } else if (arg.equals(\"-simpleoutput\") || arg.equals(\"-s\")) {\n                    simpleOutput = true;\n                } else if (arg.equals(\"-outputdir\") || arg.equals(\"-o\")) {\n                    state = CmdParseState.OUTPUTDIR;\n                } else if (arg.equals(\"-outputformat\") || arg.equals(\"-f\")) {\n                    state = CmdParseState.OUTPUTFORMAT;                    \n                } else if (arg.equals(\"-width\")) {\n                    state = CmdParseState.WIDTH;\n                } else if (arg.equals(\"-height\")) {\n                    state = CmdParseState.HEIGHT;\n                } else {\n                    state = CmdParseState.INPUTFILE;\n                }\n                break;\n            case WIDTH:\n                int wtmp = Integer.parseInt(args[count]);\n                if (wtmp < 0) {\n                    throw new Exception(\"-width\");\n                }\n                width = wtmp;\n                state = CmdParseState.DEFAULT;\n                break;\n            case HEIGHT:\n                int htmp = Integer.parseInt(args[count]);\n                if (htmp < 0) {\n                    throw new Exception(\"-height\");\n                }\n                height = htmp;\n                state = CmdParseState.DEFAULT;\n                break;\n            case OUTPUTDIR:\n                outputFiles.add(new File(args[count]));\n                state = CmdParseState.DEFAULT;\n                break;\n            case OUTPUTFORMAT:\n                String ttmp = args[count].toLowerCase();\n                //if (ttmp.equals(\"jpg\") || ttmp.equals(\"jpeg\") || ttmp.equals(\"tif\") || ttmp.equals(\"tiff\") || ttmp.equals(\"bmp\") || ttmp.equals(\"png\") || ttmp.equals(\"bmp\") || ttmp.equals(\"gif\")) {\n                if (ttmp.equals(\"tif\") || ttmp.equals(\"tiff\")) {\n                    outputFormat = ttmp;\n                } else {\n                    throw new Exception(\"-outputformat\");\n                }\n                state = CmdParseState.DEFAULT;\n                break;                \n        }\n        if (state == CmdParseState.INPUTFILE) {\n            File inputFile = new File(arg);\n            if (!inputFile.exists()) {\n                throw new FileNotFoundException(\"Missing input file: \" + inputFile.getPath());\n            }\n\n            ArrayList<String> exts = new ArrayList<String>();\n            exts.add(\"bmp\");\n            exts.add(\"jpg\");\n            exts.add(\"jpeg\");\n            exts.add(\"png\");\n            exts.add(\"gif\");\n            exts.add(\"tif\");\n            exts.add(\"tiff\");\n\n            if (inputFile.isDirectory()) {\n                FilenameFilter select = new FileListFilter(exts);\n                File[] files = inputFile.listFiles(select);\n                java.util.List fileList = java.util.Arrays.asList(files);\n                for (java.util.Iterator itr = fileList.iterator(); itr.hasNext();) {\n                    File f = (File) itr.next();\n                    inputFiles.add((File) f);\n                }\n            } else {\n                String fExt = inputFile.getAbsolutePath().substring(inputFile.getAbsolutePath().lastIndexOf(\".\") + 1);\n                for (String ext : exts) {\n                    if (ext.equals(fExt)) {\n                        inputFiles.add(inputFile);\n                        break;\n                    }\n                }\n            }\n\n        }\n    }\n    if (inputFiles.isEmpty() && showHelp) {\n        throw new Exception(\"No input files given\");\n    }\n    if (width == 0 && height == 0) {\n        throw new Exception(\"No resize dimensions given\");\n    }\n}\n\nprivate static void processImageFile(File inFile, File outputDir) throws IOException {\n    if (verboseMode) {\n        System.out.printf(\"Resizing image: %s\\n\", inFile);\n    }\n\n    if (outputFormat == null) {\n        //outputFormat = inFile.getAbsolutePath().substring(inFile.getAbsolutePath().lastIndexOf(\".\") + 1).toLowerCase();\n        outputFormat = \"tif\";\n    }\n\n    FileSeekableStream stream = null;\n\n    try {\n\n        stream = new FileSeekableStream(inFile);\n        PlanarImage planarImage = JAI.create(\"stream\", stream);\n        if (width == 0) {\n            width = (height * planarImage.getWidth() / planarImage.getHeight());\n        } else if (height == 0) {\n            height = (width * planarImage.getHeight() / planarImage.getWidth());\n        }\n\n        ParameterBlock paramBlock = new ParameterBlock();\n        paramBlock.addSource(planarImage); // The source image\n        paramBlock.add((float) width / (float) planarImage.getWidth()); // The xScale\n        paramBlock.add((float) height / (float) planarImage.getHeight()); // The yScale\n        paramBlock.add(0.0f); // The x translation\n        paramBlock.add(0.0f); // The y translation\n        paramBlock.add(new InterpolationNearest());\n        planarImage = JAI.create(\"scale\", paramBlock);\n\n        String outputFileName = outputDir.getAbsolutePath() + File.separator + inFile.getName().substring(0, inFile.getName().lastIndexOf('.'));\n\n        if (outputFormat.equals(\"tif\") || outputFormat.equals(\"tiff\")) {\n            JAI.create(\"filestore\", planarImage, outputFileName + \".tif\", \"TIFF\");\n        } else if (outputFormat.equals(\"jpg\") || outputFormat.equals(\"jpeg\")) {\n            throw new UnsupportedOperationException(\"cant save as jpg yet\");\n        } else if (outputFormat.equals(\"png\")) {\n            throw new UnsupportedOperationException(\"cant save as png yet\");\n        } else if (outputFormat.equals(\"bmp\")) {\n            throw new UnsupportedOperationException(\"cant save as bmp yet\");\n        } else if (outputFormat.equals(\"gif\")) {\n            throw new UnsupportedOperationException(\"cant save as gif yet\");\n        }\n\n    } catch (Exception e) {\n        e.printStackTrace();\n        throw new IOException(\"Cannot read image file: \" + inFile);\n    } finally {\n        if (stream != null) {\n            stream.close();\n        }\n    }\n}\n\n/**\n * Creates a directory\n * @param parent the parent directory for the new directory\n * @param name the new directory name\n */\nprivate static File createDir(File parent, String name) throws IOException {\n    assert (parent.isDirectory());\n    File result = new File(parent + File.separator + name);\n    if (!(result.exists() || result.mkdir())) {\n        throw new IOException(\"Unable to create directory: \" + result);\n    }\n    return result;\n}\n}", "path": "Resizer\\src\\resizer\\Resizer.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "//Equirectangular to DeepZoom cubic\n", "func_signal": "private void generateOpETDZC(TaskData taskData)", "code": "{\n    String nameWithoutExtension;\n    String cubeFile;\n    String outputDir;\n    String resizedFile;\n    int newSize;\n    String resDir = aggstngs.ge.getTmpDir() + File.separator + \"res\";\n\n    for (Image image : taskData.getPanorama().getImages()) {\n        nameWithoutExtension = image.path.substring(image.path.lastIndexOf(File.separator) + 1, image.path.lastIndexOf('.'));\n        cubeFile = aggstngs.ge.getTmpDir() + File.separator + nameWithoutExtension;\n\n        taskData.operations.add(new Operation(Operation.TYPE_EC, generateArgsEC(image.path, aggstngs.ge.getTmpDir())));\n\n        outputDir = getOutputFolderName(aggstngs.ge.getOutputDir() + File.separator + \"dz_\" + nameWithoutExtension);\n\n        if (taskData.cubeSizeChanged()) {\n            resizedFile = resDir + File.separator + nameWithoutExtension;\n            newSize = taskData.getNewCubeSize();\n\n            taskData.operations.add(new Operation(Operation.TYPE_RES, generateArgsRES(cubeFile + \"_b.tif\", resDir, newSize)));\n            taskData.operations.add(new Operation(Operation.TYPE_RES, generateArgsRES(cubeFile + \"_d.tif\", resDir, newSize)));\n            taskData.operations.add(new Operation(Operation.TYPE_RES, generateArgsRES(cubeFile + \"_f.tif\", resDir, newSize)));\n            taskData.operations.add(new Operation(Operation.TYPE_RES, generateArgsRES(cubeFile + \"_l.tif\", resDir, newSize)));\n            taskData.operations.add(new Operation(Operation.TYPE_RES, generateArgsRES(cubeFile + \"_r.tif\", resDir, newSize)));\n            taskData.operations.add(new Operation(Operation.TYPE_RES, generateArgsRES(cubeFile + \"_u.tif\", resDir, newSize)));\n\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{cubeFile + \"_b.tif\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{cubeFile + \"_d.tif\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{cubeFile + \"_f.tif\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{cubeFile + \"_l.tif\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{cubeFile + \"_r.tif\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{cubeFile + \"_u.tif\"}));\n\n            taskData.operations.add(new Operation(Operation.TYPE_DZT, generateArgsDZT(resizedFile + \"_b.tif\", outputDir, taskData.getNewTileSize())));\n            taskData.operations.add(new Operation(Operation.TYPE_DZT, generateArgsDZT(resizedFile + \"_d.tif\", outputDir, taskData.getNewTileSize())));\n            taskData.operations.add(new Operation(Operation.TYPE_DZT, generateArgsDZT(resizedFile + \"_f.tif\", outputDir, taskData.getNewTileSize())));\n            taskData.operations.add(new Operation(Operation.TYPE_DZT, generateArgsDZT(resizedFile + \"_l.tif\", outputDir, taskData.getNewTileSize())));\n            taskData.operations.add(new Operation(Operation.TYPE_DZT, generateArgsDZT(resizedFile + \"_r.tif\", outputDir, taskData.getNewTileSize())));\n            taskData.operations.add(new Operation(Operation.TYPE_DZT, generateArgsDZT(resizedFile + \"_u.tif\", outputDir, taskData.getNewTileSize())));\n\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{resizedFile + \"_b.tif\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{resizedFile + \"_d.tif\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{resizedFile + \"_f.tif\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{resizedFile + \"_l.tif\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{resizedFile + \"_r.tif\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{resizedFile + \"_u.tif\"}));\n\n        } else {\n            taskData.operations.add(new Operation(Operation.TYPE_DZT, generateArgsDZT(cubeFile + \"_b.tif\", outputDir, taskData.getNewTileSize())));\n            taskData.operations.add(new Operation(Operation.TYPE_DZT, generateArgsDZT(cubeFile + \"_d.tif\", outputDir, taskData.getNewTileSize())));\n            taskData.operations.add(new Operation(Operation.TYPE_DZT, generateArgsDZT(cubeFile + \"_f.tif\", outputDir, taskData.getNewTileSize())));\n            taskData.operations.add(new Operation(Operation.TYPE_DZT, generateArgsDZT(cubeFile + \"_l.tif\", outputDir, taskData.getNewTileSize())));\n            taskData.operations.add(new Operation(Operation.TYPE_DZT, generateArgsDZT(cubeFile + \"_r.tif\", outputDir, taskData.getNewTileSize())));\n            taskData.operations.add(new Operation(Operation.TYPE_DZT, generateArgsDZT(cubeFile + \"_u.tif\", outputDir, taskData.getNewTileSize())));\n\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{cubeFile + \"_b.tif\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{cubeFile + \"_d.tif\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{cubeFile + \"_f.tif\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{cubeFile + \"_l.tif\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{cubeFile + \"_r.tif\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{cubeFile + \"_u.tif\"}));\n        }\n\n        if (aggstngs.ge.getRemoveObsolete()) {\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{outputDir + File.separator + nameWithoutExtension + \"_b.xml\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{outputDir + File.separator + nameWithoutExtension + \"_d.xml\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{outputDir + File.separator + nameWithoutExtension + \"_l.xml\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{outputDir + File.separator + nameWithoutExtension + \"_r.xml\"}));\n            taskData.operations.add(new Operation(Operation.TYPE_DEL, new String[]{outputDir + File.separator + nameWithoutExtension + \"_u.xml\"}));\n\n            removeObsoleteDeepZoomImages(taskData, outputDir + File.separator + nameWithoutExtension + \"_b\");\n            removeObsoleteDeepZoomImages(taskData, outputDir + File.separator + nameWithoutExtension + \"_d\");\n            removeObsoleteDeepZoomImages(taskData, outputDir + File.separator + nameWithoutExtension + \"_f\");\n            removeObsoleteDeepZoomImages(taskData, outputDir + File.separator + nameWithoutExtension + \"_l\");\n            removeObsoleteDeepZoomImages(taskData, outputDir + File.separator + nameWithoutExtension + \"_r\");\n            removeObsoleteDeepZoomImages(taskData, outputDir + File.separator + nameWithoutExtension + \"_u\");\n        }\n    }\n}", "path": "SaladoConverter\\src\\com\\panozona\\converter\\Controller.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "/**\n * Delete a file\n * @param path the path of the directory to be deleted\n */\n", "func_signal": "private static void deleteFile(File file) throws IOException", "code": "{\n    if (!file.delete()) {\n        throw new IOException(\"Failed to delete file: \" + file);\n    }\n}", "path": "DeepZoomTiler\\src\\deepzoomtiler\\DeepZoomTiler.java", "repo_name": "mstandio/SaladoConverter", "stars": 28, "license": "None", "language": "java", "size": 2893}
{"docstring": "// Type t;\n// Identifier i;\n", "func_signal": "public void visit(VarDecl n)", "code": "{\n  n.t.accept(this);\n  System.out.print(\" \");\n  n.i.accept(this);\n  System.out.print(\";\");\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Identifier i;\n// Exp e1,e2;\n", "func_signal": "public void visit(ArrayAssign n)", "code": "{\n  n.i.accept(this);\n  System.out.print(\"[\");\n  n.e1.accept(this);\n  System.out.print(\"] = \");\n  n.e2.accept(this);\n  System.out.print(\";\");\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Exp e1,e2;\n", "func_signal": "public void visit(Plus n)", "code": "{\n  System.out.print(\"(\");\n  n.e1.accept(this);\n  System.out.print(\" + \");\n  n.e2.accept(this);\n  System.out.print(\")\");\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Exp e;\n", "func_signal": "public void visit(Print n)", "code": "{\n  System.out.print(\"System.out.println(\");\n  n.e.accept(this);\n  System.out.print(\");\");\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Identifier i1,i2;\n// Statement s;\n", "func_signal": "public void visit(MainClass n)", "code": "{\n  System.out.print(\"class \");\n  n.i1.accept(this);\n  System.out.println(\" {\");\n  System.out.print(\"  public static void main (String [] \");\n  n.i2.accept(this);\n  System.out.println(\") {\");\n  System.out.print(\"    \");\n  n.s.accept(this);\n  System.out.println(\"  }\");\n  System.out.println(\"}\");\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Exp e;\n// Identifier i;\n// ExpList el;\n", "func_signal": "public void visit(Call n)", "code": "{\n  n.e.accept(this);\n  System.out.print(\".\");\n  n.i.accept(this);\n  System.out.print(\"(\");\n  for ( int i = 0; i < n.el.size(); i++ ) {\n      n.el.elementAt(i).accept(this);\n      if ( i+1 < n.el.size() ) { System.out.print(\", \"); }\n  }\n  System.out.print(\")\");\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Exp e;\n", "func_signal": "public void visit(NewArray n)", "code": "{\n  System.out.print(\"new int [\");\n  n.e.accept(this);\n  System.out.print(\"]\");\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Exp e;\n", "func_signal": "public void visit(Not n)", "code": "{\n  System.out.print(\"!\");\n  n.e.accept(this);\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Type t;\n// Identifier i;\n", "func_signal": "public void visit(Formal n)", "code": "{\n  n.t.accept(this);\n  System.out.print(\" \");\n  n.i.accept(this);\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Identifier i;\n// VarDeclList vl;\n// MethodDeclList ml;\n", "func_signal": "public void visit(ClassDeclSimple n)", "code": "{\n  System.out.print(\"class \");\n  n.i.accept(this);\n  System.out.println(\" { \");\n  for ( int i = 0; i < n.vl.size(); i++ ) {\n      System.out.print(\"  \");\n      n.vl.elementAt(i).accept(this);\n      if ( i+1 < n.vl.size() ) { System.out.println(); }\n  }\n  for ( int i = 0; i < n.ml.size(); i++ ) {\n      System.out.println();\n      n.ml.elementAt(i).accept(this);\n  }\n  System.out.println();\n  System.out.println(\"}\");\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Identifier i;\n// Identifier j;\n// VarDeclList vl;\n// MethodDeclList ml;\n", "func_signal": "public void visit(ClassDeclExtends n)", "code": "{\n  System.out.print(\"class \");\n  n.i.accept(this);\n  System.out.println(\" extends \");\n  n.j.accept(this);\n  System.out.println(\" { \");\n  for ( int i = 0; i < n.vl.size(); i++ ) {\n      System.out.print(\"  \");\n      n.vl.elementAt(i).accept(this);\n      if ( i+1 < n.vl.size() ) { System.out.println(); }\n  }\n  for ( int i = 0; i < n.ml.size(); i++ ) {\n      System.out.println();\n      n.ml.elementAt(i).accept(this);\n  }\n  System.out.println();\n  System.out.println(\"}\");\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Identifier i;\n// Exp e;\n", "func_signal": "public void visit(Assign n)", "code": "{\n  n.i.accept(this);\n  System.out.print(\" = \");\n  n.e.accept(this);\n  System.out.print(\";\");\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Exp e1,e2;\n", "func_signal": "public void visit(And n)", "code": "{\n  System.out.print(\"(\");\n  n.e1.accept(this);\n  System.out.print(\" && \");\n  n.e2.accept(this);\n  System.out.print(\")\");\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Identifier i;\n", "func_signal": "public void visit(NewObject n)", "code": "{\n  System.out.print(\"new \");\n  System.out.print(n.i.s);\n  System.out.print(\"()\");\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// MainClass m;\n// ClassDeclList cl;\n", "func_signal": "public void visit(Program n)", "code": "{\n  n.m.accept(this);\n  for ( int i = 0; i < n.cl.size(); i++ ) {\n      System.out.println();\n      n.cl.elementAt(i).accept(this);\n  }\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Exp e1,e2;\n", "func_signal": "public void visit(ArrayLookup n)", "code": "{\n  n.e1.accept(this);\n  System.out.print(\"[\");\n  n.e2.accept(this);\n  System.out.print(\"]\");\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Exp e;\n// Statement s;\n", "func_signal": "public void visit(While n)", "code": "{\n  System.out.print(\"while (\");\n  n.e.accept(this);\n  System.out.print(\") \");\n  n.s.accept(this);\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Exp e1,e2;\n", "func_signal": "public void visit(Times n)", "code": "{\n  System.out.print(\"(\");\n  n.e1.accept(this);\n  System.out.print(\" * \");\n  n.e2.accept(this);\n  System.out.print(\")\");\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Type t;\n// Identifier i;\n// FormalList fl;\n// VarDeclList vl;\n// StatementList sl;\n// Exp e;\n", "func_signal": "public void visit(MethodDecl n)", "code": "{\n  System.out.print(\"  public \");\n  n.t.accept(this);\n  System.out.print(\" \");\n  n.i.accept(this);\n  System.out.print(\" (\");\n  for ( int i = 0; i < n.fl.size(); i++ ) {\n      n.fl.elementAt(i).accept(this);\n      if (i+1 < n.fl.size()) { System.out.print(\", \"); }\n  }\n  System.out.println(\") { \");\n  for ( int i = 0; i < n.vl.size(); i++ ) {\n      System.out.print(\"    \");\n      n.vl.elementAt(i).accept(this);\n      System.out.println(\"\");\n  }\n  for ( int i = 0; i < n.sl.size(); i++ ) {\n      System.out.print(\"    \");\n      n.sl.elementAt(i).accept(this);\n      if ( i < n.sl.size() ) { System.out.println(\"\"); }\n  }\n  System.out.print(\"    return \");\n  n.e.accept(this);\n  System.out.println(\";\");\n  System.out.print(\"  }\");\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "// Exp e1,e2;\n", "func_signal": "public void visit(Minus n)", "code": "{\n  System.out.print(\"(\");\n  n.e1.accept(this);\n  System.out.print(\" - \");\n  n.e2.accept(this);\n  System.out.print(\")\");\n}", "path": "chap6\\visitor\\PrettyPrintVisitor.java", "repo_name": "colefichter/Tiger-Compiler", "stars": 25, "license": "None", "language": "java", "size": 5309}
{"docstring": "/**\n * <p>\n * Sets the timeout, in seconds, for acquiring connections from the pool, or\n * {@link #NO_ACQUIRE_TIMEOUT} to indicate that threads should wait indefinitely.\n * </p>\n * \n * <p>\n * <b>Note:</b> HTTP connections are not acquired from the pool until a command is executed.\n * Setting this parameter has no effect on the call to {@link #getConnection(Credentials)}; that\n * method always return immediately. Instead, setting this parameter affects calls to\n * {@link Command#execute()}; the observed timeout on that method can be as large as the sum\n * of this connection pool acquire timeout plus the value of {@link Command#getTimeout()}.\n * </p>\n * \n * @param seconds The maximum amount of time, in seconds, that a command will wait for a connection\n *        to become available from the pool before giving up and throwing an exception.\n */\n", "func_signal": "public synchronized void setAcquireTimeout(int seconds)", "code": "{\n  if (httpClient != null) {\n    throw new IllegalStateException(\"Cannot set the connection pool acquire timeout after it is in use.\");\n  }\n  this.acquireTimeout = seconds;\n}", "path": "spark-http-client\\src\\main\\java\\spark\\protocol\\ProtocolDataSource.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Throwable#getMessage()\n */\n", "func_signal": "@Override\npublic String getMessage()", "code": "{\n  StringBuilder sb = new StringBuilder();\n  sb.append(\"Illegal xsd:dateTime format: \");\n  sb.append(super.getMessage());\n  sb.append(\" at index \");\n  sb.append(index);\n  sb.append(\" of '\");\n  sb.append(input);\n  sb.append(\"'\");\n  return sb.toString();\n}", "path": "spark-spi\\src\\main\\java\\spark\\spi\\util\\DateFormatException.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/**\n * Parses a boolean result from the reader. The reader is expected to be on the START_ELEMENT\n * event for the opening <boolean> tag.\n * @param cmd The command to associate with the result.\n * @param rdr The XML reader from which to read the result.\n * @param metadata The metadata to include in the result.\n * @return The parsed result.\n */\n", "func_signal": "static private Result parseBooleanResult(Command cmd, XMLStreamReader rdr, \n    List<String> metadata) throws XMLStreamException, SparqlException", "code": "{\n  if (rdr.next() != CHARACTERS) {\n    throw new SparqlException(\"Unexpected data in Boolean result: \" + rdr.getEventType());\n  }\n  boolean result = Boolean.parseBoolean(rdr.getText());\n  testClose(rdr, rdr.nextTag(), BOOLEAN, \"Bad close of boolean element\");\n  cleanup(rdr);\n  return new ProtocolBooleanResult(cmd, result, metadata);\n}", "path": "spark-http-client\\src\\main\\java\\spark\\protocol\\parser\\XMLResultsParser.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/** Gets the (re-usable) HTTP client backing this data source, creating it if necessary. */\n", "func_signal": "private synchronized HttpClient getClient(boolean create)", "code": "{\n  if (httpClient == null && create) {\n    httpClient = createPooledClient();\n  }\n  return httpClient;\n}", "path": "spark-http-client\\src\\main\\java\\spark\\protocol\\ProtocolDataSource.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/** Logs a request, executes it, and dumps the response to the logger. For development use only. */\n", "func_signal": "@SuppressWarnings(\"unused\")\nprivate static final void dump(HttpClient client, HttpUriRequest req)", "code": "{\n  if (logger.isTraceEnabled()) {\n    StringBuilder sb = new StringBuilder(\"\\n=== Request ===\");\n    sb.append(\"\\n\").append(req.getRequestLine());\n    for (Header h : req.getAllHeaders()) {\n      sb.append(\"\\n\").append(h.getName()).append(\": \").append(h.getValue());\n    }\n    logger.trace(sb.toString());\n    \n    HttpResponse resp = null;\n    try {\n      resp = client.execute(req);\n    } catch (Exception e) {\n      logger.trace(\"Error executing request\", e);\n      return;\n    }\n    \n    sb = new StringBuilder(\"\\n=== Response ===\");\n    sb.append(\"\\n\").append(resp.getStatusLine());\n    for (Header h : resp.getAllHeaders()) {\n      sb.append(\"\\n\").append(h.getName()).append(\": \").append(h.getValue());\n    }\n    logger.trace(sb.toString());\n    \n    HttpEntity entity = resp.getEntity();\n    if (entity != null) {\n      sb = new StringBuilder(\"\\n=== Content ===\");\n      try {\n        int len = (int) entity.getContentLength();\n        if (len < 0) len = 100;\n        ByteArrayOutputStream baos = new ByteArrayOutputStream(len);\n        entity.writeTo(baos);\n        sb.append(\"\\n\").append(baos.toString(\"UTF-8\"));\n        logger.trace(sb.toString());\n      } catch (IOException e) {\n        logger.trace(\"Error reading content\", e);\n      }\n    }\n  }\n}", "path": "spark-http-client\\src\\main\\java\\spark\\protocol\\SparqlCall.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/**\n * @param command\n */\n", "func_signal": "public BaseSolutions(Command command, List<String> vars)", "code": "{\n  super(command);\n  this.vars = Collections.unmodifiableList(vars);\n}", "path": "spark-spi\\src\\main\\java\\spark\\spi\\BaseSolutions.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/**\n * Instantiates the protocol boolean result.\n * @param command The command which originated the request.\n * @param result The boolean result value.\n * @param metadata The metadata associated with the result.\n */\n", "func_signal": "public ProtocolBooleanResult(Command command, boolean result, List<String> metadata)", "code": "{\n  super(command, result);\n  this.metadata = (metadata != null) ? \n      Collections.unmodifiableList(metadata) : Collections.<String>emptyList();\n}", "path": "spark-http-client\\src\\main\\java\\spark\\protocol\\ProtocolBooleanResult.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/**\n * Sets the maximum size of the connection pool.\n * @param poolSize The maximum number of connections that can be in use at any one time for this data source.\n */\n", "func_signal": "public synchronized void setConnectionPoolSize(int poolSize)", "code": "{\n  if (httpClient != null) {\n    throw new IllegalStateException(\"Cannot set the connection pool size after it is in use.\");\n  }\n  this.poolSize = poolSize;\n}", "path": "spark-http-client\\src\\main\\java\\spark\\protocol\\ProtocolDataSource.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/**\n * Parse the &lt;head&gt; element with the variables and metadata.\n * @param base The base URI, initialized to the endpoint URL if known.\n * @param rdr The XML reader to parse information from.\n * @param cols A list to populate with the columns that may appear in the header.\n * @param md A list to populate with metada that may appear in the header.\n * @throws XMLStreamException There was an error reading the XML stream.\n * @throws SparqlException The XML was not valid SPARQL results.\n */\n", "func_signal": "static private void parseHeader(String base, XMLStreamReader rdr, List<String> cols, List<String> md) throws XMLStreamException, SparqlException", "code": "{\n  logger.debug(\"xml:base is initially {}\", base);\n  base = getBase(base, rdr);\n  testOpen(rdr, rdr.nextTag(), HEAD, \"Missing header from XML results\");\n  base = getBase(base, rdr);\n  boolean endedVars = false;\n  int eventType;\n  while ((eventType = rdr.nextTag()) != END_ELEMENT || !nameIs(rdr, HEAD)) {\n    if (eventType == START_ELEMENT) {\n      if (nameIs(rdr, VARIABLE)) {\n        if (endedVars) throw new SparqlException(\"Encountered a variable after header metadata\");\n        String var = rdr.getAttributeValue(null, \"name\");\n        if (var != null) cols.add(var);\n        else logger.warn(\"<variable> element without 'name' attribute\");\n      } else if (nameIs(rdr, LINK)) {\n        String b = getBase(base, rdr); // Copy to a new var since we're looping.\n        String href = rdr.getAttributeValue(null, HREF);\n        if (href != null) md.add(resolve(b, href));\n        else logger.warn(\"<link> element without 'href' attribute\");\n        endedVars = true;\n      }\n    }\n  }\n  // ending on </head>. next() should be <results> or <boolean>\n  testClose(rdr, eventType, HEAD, \"Unexpected element in header: \" + rdr.getLocalName());\n}", "path": "spark-http-client\\src\\main\\java\\spark\\protocol\\parser\\XMLResultsParser.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/**\n * Construct an SHPSolutions where \n * @param command\n * @param query\n */\n", "func_signal": "public SHPSolutions(SHPCommand command, QueryExecution query)", "code": "{\n  super(command, query.getVars());\n  if (vars == null) throw new IllegalStateException(\"SHPSolutions constructed with un-initialized QueryExecution\");\n  this.query = query;    \n}", "path": "sherpa-java\\src\\main\\java\\sherpa\\client\\SHPSolutions.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/** Convert a protocol data object to an RDFNode. */\n", "func_signal": "private static RDFNode toNode(Object value)", "code": "{\n  if (value == null) {\n    return null;\n  } else if (value instanceof RDFNode) {\n    return (RDFNode) value;\n  } else if (value instanceof IRI) {\n    return new NamedNodeImpl(URI.create(((IRI)value).iri.toString()));\n  } else if (value instanceof PlainLiteral) {\n    PlainLiteral pl = (PlainLiteral)value;\n    String lang = pl.language != null ? pl.language.toString() : null;\n    return new PlainLiteralImpl(pl.lexical.toString(), lang);\n  } else if (value instanceof TypedLiteral) {\n    TypedLiteral tl = (TypedLiteral)value;\n    return new TypedLiteralImpl(tl.lexical.toString(), URI.create(tl.datatype.toString()));\n  } else if (value instanceof BNode) {\n    return new BlankNodeImpl(((BNode)value).label.toString());\n  } else {\n    // Sherpa passes strings as something other than java.lang.String, so convert.\n    if (value instanceof CharSequence) {\n      value = value.toString();\n    }\n    // What's left is a primitive Java type, convert it to an XSD-typed literal.\n    // Falls back to xsd:anySimpleType for unrecognized classes\n    return Conversions.toLiteral(value);\n  }\n}", "path": "sherpa-java\\src\\main\\java\\sherpa\\client\\SHPSolutions.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/** URL-encode a string as UTF-8, catching any thrown UnsupportedEncodingException. */\n", "func_signal": "private static final String encode(String s)", "code": "{\n  try {\n    return URLEncoder.encode(s, UTF_8);\n  } catch (UnsupportedEncodingException e) {\n    throw new Error(\"JVM unable to handle UTF-8\");\n  }\n}", "path": "spark-http-client\\src\\main\\java\\spark\\protocol\\SparqlCall.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/**\n * Initializes a boolean result with the given value.\n * @param command The command that created the result.\n * @param result The result value.\n */\n", "func_signal": "public BooleanResultImpl(Command command, boolean result)", "code": "{\n  super(command);\n  this.result = result;\n}", "path": "spark-spi\\src\\main\\java\\spark\\spi\\BooleanResultImpl.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/**\n * Parse the input stream to look for a result.\n * @return A new Row based on a single result from the results section.\n * @throws XMLStreamException There was an error reading the XML stream.\n * @throws SparqlException The XML was not valid SPARQL results.\n */\n", "func_signal": "protected Map<String,RDFNode> readNext() throws SparqlException", "code": "{\n  try {\n    // read <result> or </results>\n    int eventType = reader.nextTag();\n    // if a closing element, then it should be </results>\n    if (eventType == END_ELEMENT) {\n      // already read the final result, so clean up and return nothing\n      if (nameIs(RESULTS)) {\n        cleanup();\n        return null;\n      }\n      else throw new SparqlException(\"Bad element closure with: \" + reader.getLocalName());\n    }\n    // we only expect a <result> here \n    testOpen(eventType, RESULT, \"Expected a new result. Got :\" +\n        ((eventType == END_ELEMENT) ? \"/\" : \"\") + reader.getLocalName());\n\n    Map<String,RDFNode> result = new HashMap<String,RDFNode>();\n    // read <binding> list\n    while ((eventType = reader.nextTag()) == START_ELEMENT && nameIs(BINDING)) {\n      // get the name of the binding\n      String name = reader.getAttributeValue(null, VAR_NAME);\n      result.put(name, parseValue());\n      testClose(reader.nextTag(), BINDING, \"Single Binding not closed correctly\");\n    }\n\n    // a non- <binding> was read, so it should have been a </result>\n    testClose(eventType, RESULT, \"Single Result not closed correctly\");\n    return result;\n  } catch (XMLStreamException e) {\n    throw new SparqlException(\"Error reading from XML stream\", e);\n  }\n}", "path": "spark-http-client\\src\\main\\java\\spark\\protocol\\parser\\XMLSelectResults.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/**\n * Creates a new thread-safe HTTP connection pool for use with a data source.\n * @param poolSize The size of the connection pool.\n * @return A new connection pool with the given size.\n */\n", "func_signal": "private HttpClient createPooledClient()", "code": "{\n  HttpParams connMgrParams = new BasicHttpParams();\n  \n  SchemeRegistry schemeRegistry = new SchemeRegistry();\n  schemeRegistry.register(new Scheme(HTTP_SCHEME, PlainSocketFactory.getSocketFactory(), HTTP_PORT));\n  schemeRegistry.register(new Scheme(HTTPS_SCHEME, SSLSocketFactory.getSocketFactory(), HTTPS_PORT));\n  \n  // All connections will be to the same endpoint, so no need for per-route configuration.\n  // TODO See how this does in the presence of redirects.\n  ConnManagerParams.setMaxTotalConnections(connMgrParams, poolSize);\n  ConnManagerParams.setMaxConnectionsPerRoute(connMgrParams, new ConnPerRouteBean(poolSize));\n  \n  ClientConnectionManager ccm = new ThreadSafeClientConnManager(connMgrParams, schemeRegistry);\n  \n  HttpParams httpParams = new BasicHttpParams();\n  HttpProtocolParams.setUseExpectContinue(httpParams, false);\n  ConnManagerParams.setTimeout(httpParams, acquireTimeout * 1000);\n  return new DefaultHttpClient(ccm, httpParams);\n}", "path": "spark-http-client\\src\\main\\java\\spark\\protocol\\ProtocolDataSource.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/** Returns the new base URI, based on the old base URI and the xml:base value in the current element. */\n", "func_signal": "static private String getBase(String oldBase, XMLStreamReader rdr)", "code": "{\n  String newBase =  resolve(oldBase, rdr.getAttributeValue(XML_NS, BASE));\n  if (newBase != oldBase) {\n    logger.debug(\"xml:base is now {}\", newBase);\n  }\n  return newBase;\n}", "path": "spark-http-client\\src\\main\\java\\spark\\protocol\\parser\\XMLResultsParser.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/**\n * Parses an XMLResults object based on the contents of the given stream.\n * @param cmd The command that originated the request.\n * @param stream The input stream containing raw XML.\n * @param query The query used to generate the stream.\n * @return A new XMLResults object. Either variable bindings, or a boolean result.\n * @throws SparqlException If the data stream was not valid.\n */\n", "func_signal": "public static Result parseResults(Command cmd, InputStream input, ResultType type) throws SparqlException", "code": "{\n  try {\n    return createResults(cmd, input, type);\n  } catch (Throwable t) {\n    logger.debug(\"Error parsing results from stream, cleaning up.\");\n    try {\n      input.close();\n    } catch (IOException e) {\n      logger.warn(\"Error closing input stream from failed protocol response\", e);\n    }\n    throw SparqlException.convert(\"Error parsing SPARQL protocol results from stream\", t);\n  }\n}", "path": "spark-http-client\\src\\main\\java\\spark\\protocol\\parser\\XMLResultsParser.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/** Sets up an XML parser for the input, and creates the appropriate result type based on the parsed XML. */\n", "func_signal": "private static Result createResults(Command cmd, InputStream stream, ResultType type) throws SparqlException", "code": "{\n  XMLInputFactory xmlStreamFactory = XMLInputFactory.newInstance();\n  \n  // Tell the factory to combine adjacent character blocks into a single event, so we don't have to do it ourselves.\n  xmlStreamFactory.setProperty(XMLInputFactory.IS_COALESCING, true);\n  \n  // Tell the factory to create a reader that will close the underlying stream when done.\n  xmlStreamFactory.setProperty(XMLInputFactory2.P_AUTO_CLOSE_INPUT, true);\n  \n  XMLStreamReader rdr;\n  try {\n    rdr = xmlStreamFactory.createXMLStreamReader(stream, \"UTF-8\");\n  } catch (XMLStreamException e) {\n    throw new SparqlException(\"Unable to open XML data\", e);\n  }\n  List<String> cols = new ArrayList<String>();\n  List<String> md = new ArrayList<String>();\n\n  try {\n    if (rdr.nextTag() != START_ELEMENT || !nameIs(rdr, SPARQL)) {\n      throw new SparqlException(\"Result is not a SPARQL XML result document\");\n    }\n    \n    // Initialize the base URI to the \n    String base = null;\n    if (cmd != null) {\n      base = ((ProtocolDataSource)cmd.getConnection().getDataSource()).getUrl().toString();\n    }\n    \n    // read the header information\n    parseHeader(base, rdr, cols, md);\n    \n    // move the cursor into the results, and read in the first row\n    if (rdr.nextTag() != START_ELEMENT) throw new SparqlException(\"No body to result document\");\n    \n    String typeName = rdr.getLocalName();\n    if (typeName.equalsIgnoreCase(RESULTS.toString())) {\n      if (type != null && type != ResultType.SELECT) {\n        throw new SparqlException(\"Unexpected result type; expected \" + type + \" but found SELECT.\");\n      }\n      return new XMLSelectResults(cmd, rdr, cols, md);\n    }\n    if (typeName.equalsIgnoreCase(BOOLEAN.toString())) {\n      if (type != null && type != ResultType.ASK) {\n        throw new SparqlException(\"Unexpected result type; expected \" + type + \" but found ASK.\");\n      }\n      if (!cols.isEmpty()) {\n        logger.warn(\"Boolean result contained column definitions in head: {}\", cols);\n      }\n      return parseBooleanResult(cmd, rdr, md);\n    }\n\n    throw new SparqlException(\"Unknown element type in result document. Expected <results> or <boolean> but got <\" + typeName + \">\");\n  } catch (XMLStreamException e) {\n    throw new SparqlException(\"Error reading the XML stream\", e);\n  }\n}", "path": "spark-http-client\\src\\main\\java\\spark\\protocol\\parser\\XMLResultsParser.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/**\n * Attempts to resolve the given href against the given base, as a URI. Works similarly to\n * URI.resolve(), but attempts to handle syntax exceptions in a more graceful manner.\n */\n", "func_signal": "static private String resolve(String base, String rel)", "code": "{\n  // Short-circuit check for unspecified base or relative URI.\n  if (base == null || base.isEmpty()) return rel;\n  if (rel == null || rel.isEmpty()) return base;\n  \n  // Attempt to parse both strings as URIs.\n  URI b = null;\n  try {\n    b = new URI(base);\n  } catch (URISyntaxException IGNORE) {\n    // ignore, we'll handle this later.\n  }\n  URI r = null;\n  try {\n    r = new URI(rel);\n  } catch (URISyntaxException IGNORE) {\n    // ignore, we'll handle this later.\n  }\n  \n  // Both URIs parsed OK, proceed as usual.\n  if (b != null && r != null) return b.resolve(r).toString();\n  \n  // Syntax exception in the base or relative URI, need to fudge here...\n  // Is the URI being resolved absolute (or does it look like it)?\n  if ((r != null && r.isAbsolute()) || rel.startsWith(\"http:\")) return rel;\n  \n  // One or both of the strings didn't parse as a valid URI so URI.resolve won't help us here.\n  // Just smash them together and hope for the best.\n  return base + rel;\n}", "path": "spark-http-client\\src\\main\\java\\spark\\protocol\\parser\\XMLResultsParser.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/**\n * Initialize a date format exception.\n * @param msg The exception message.\n * @param input The input string which triggered the exception.\n * @param index The index in the string at which the exception occurred.\n */\n", "func_signal": "public DateFormatException(String msg, String input, int index)", "code": "{\n  super(msg);\n  this.input = input;\n  this.index = index;\n}", "path": "spark-spi\\src\\main\\java\\spark\\spi\\util\\DateFormatException.java", "repo_name": "revelytix/spark", "stars": 18, "license": "apache-2.0", "language": "java", "size": 1608}
{"docstring": "/**\n * Creates a SMSThread instance.\n * \n * @param id\n *            the thread's ID\n * @param note\n *            the thread's note\n * @param date\n *            the thread's timestamp\n * @param contact\n *            the thread's contact\n * @param read\n *            whether the thread is starred\n * @param starred\n *            whether the thread is read.\n */\n", "func_signal": "public SMSThread(String id, String note, Date date, Contact contact,\n\t\tboolean read, boolean starred)", "code": "{\n\tsuper(id, note, date, contact, read);\n\tthis.starred = starred;\n}", "path": "googlevoice\\src\\com\\techventus\\server\\voice\\datatypes\\records\\SMSThread.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\n", "func_signal": "public static byte[] decodeFromFile( String filename )\nthrows java.io.IOException", "code": "{\n\n    byte[] decodedData = null;\n    Base64Util.InputStream bis = null;\n    try\n    {\n        // Set up some useful variables\n        java.io.File file = new java.io.File( filename );\n        byte[] buffer = null;\n        int length   = 0;\n        int numBytes = 0;\n\n        // Check for size of file\n        if( file.length() > Integer.MAX_VALUE )\n        {\n            throw new java.io.IOException( \"File is too big for this convenience method (\" + file.length() + \" bytes).\" );\n        }   // end if: file too big for int index\n        buffer = new byte[ (int)file.length() ];\n\n        // Open a stream\n        bis = new Base64Util.InputStream(\n                  new java.io.BufferedInputStream(\n                  new java.io.FileInputStream( file ) ), Base64Util.DECODE );\n\n        // Read until done\n        while( ( numBytes = bis.read( buffer, length, 4096 ) ) >= 0 ) {\n            length += numBytes;\n        }   // end while\n\n        // Save in a variable to return\n        decodedData = new byte[ length ];\n        System.arraycopy( buffer, 0, decodedData, 0, length );\n\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and release to execute finally{}\n    }   // end catch: java.io.IOException\n    finally {\n        try{ bis.close(); } catch( Exception e) {}\n    }   // end finally\n\n    return decodedData;\n}", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * Decodes four bytes from array <var>source</var>\n * and writes the resulting bytes (up to three of them)\n * to <var>destination</var>.\n * The source and destination arrays can be manipulated\n * anywhere along their length by specifying\n * <var>srcOffset</var> and <var>destOffset</var>.\n * This method does not check to make sure your arrays\n * are large enough to accomodate <var>srcOffset</var> + 4 for\n * the <var>source</var> array or <var>destOffset</var> + 3 for\n * the <var>destination</var> array.\n * This method returns the actual number of bytes that\n * were converted from the Base64 encoding.\n\t * <p>This is the lowest level of the decoding methods with\n\t * all possible parameters.</p>\n *\n *\n * @param source the array to convert\n * @param srcOffset the index where conversion begins\n * @param destination the array to hold the conversion\n * @param destOffset the index where output will be put\n\t * @param options alphabet type is pulled from this (standard, url-safe, ordered)\n * @return the number of decoded bytes converted\n * @throws NullPointerException if source or destination arrays are null\n * @throws IllegalArgumentException if srcOffset or destOffset are invalid\n *         or there is not enough room in the array.\n * @since 1.3\n */\n", "func_signal": "private static int decode4to3(\nbyte[] source, int srcOffset,\nbyte[] destination, int destOffset, int options )", "code": "{\n\n    // Lots of error checking and exception throwing\n    if( source == null ){\n        throw new NullPointerException( \"Source array was null.\" );\n    }   // end if\n    if( destination == null ){\n        throw new NullPointerException( \"Destination array was null.\" );\n    }   // end if\n    if( srcOffset < 0 || srcOffset + 3 >= source.length ){\n        throw new IllegalArgumentException( String.format(\n        \"Source array with length %d cannot have offset of %d and still process four bytes.\", source.length, srcOffset ) );\n    }   // end if\n    if( destOffset < 0 || destOffset +2 >= destination.length ){\n        throw new IllegalArgumentException( String.format(\n        \"Destination array with length %d cannot have offset of %d and still store three bytes.\", destination.length, destOffset ) );\n    }   // end if\n\n\n    byte[] DECODABET = getDecodabet( options );\n\n    // Example: Dk==\n    if( source[ srcOffset + 2] == EQUALS_SIGN ) {\n        // Two ways to do the same thing. Don't know which way I like best.\n      //int outBuff =   ( ( DECODABET[ source[ srcOffset    ] ] << 24 ) >>>  6 )\n      //              | ( ( DECODABET[ source[ srcOffset + 1] ] << 24 ) >>> 12 );\n        int outBuff =   ( ( DECODABET[ source[ srcOffset    ] ] & 0xFF ) << 18 )\n                      | ( ( DECODABET[ source[ srcOffset + 1] ] & 0xFF ) << 12 );\n\n        destination[ destOffset ] = (byte)( outBuff >>> 16 );\n        return 1;\n    }\n\n    // Example: DkL=\n    else if( source[ srcOffset + 3 ] == EQUALS_SIGN ) {\n        // Two ways to do the same thing. Don't know which way I like best.\n      //int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] << 24 ) >>>  6 )\n      //              | ( ( DECODABET[ source[ srcOffset + 1 ] ] << 24 ) >>> 12 )\n      //              | ( ( DECODABET[ source[ srcOffset + 2 ] ] << 24 ) >>> 18 );\n        int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] & 0xFF ) << 18 )\n                      | ( ( DECODABET[ source[ srcOffset + 1 ] ] & 0xFF ) << 12 )\n                      | ( ( DECODABET[ source[ srcOffset + 2 ] ] & 0xFF ) <<  6 );\n\n        destination[ destOffset     ] = (byte)( outBuff >>> 16 );\n        destination[ destOffset + 1 ] = (byte)( outBuff >>>  8 );\n        return 2;\n    }\n\n    // Example: DkLE\n    else {\n        // Two ways to do the same thing. Don't know which way I like best.\n      //int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] << 24 ) >>>  6 )\n      //              | ( ( DECODABET[ source[ srcOffset + 1 ] ] << 24 ) >>> 12 )\n      //              | ( ( DECODABET[ source[ srcOffset + 2 ] ] << 24 ) >>> 18 )\n      //              | ( ( DECODABET[ source[ srcOffset + 3 ] ] << 24 ) >>> 24 );\n        int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] & 0xFF ) << 18 )\n                      | ( ( DECODABET[ source[ srcOffset + 1 ] ] & 0xFF ) << 12 )\n                      | ( ( DECODABET[ source[ srcOffset + 2 ] ] & 0xFF ) <<  6)\n                      | ( ( DECODABET[ source[ srcOffset + 3 ] ] & 0xFF )      );\n\n\n        destination[ destOffset     ] = (byte)( outBuff >> 16 );\n        destination[ destOffset + 1 ] = (byte)( outBuff >>  8 );\n        destination[ destOffset + 2 ] = (byte)( outBuff       );\n\n        return 3;\n    }\n}", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * Convenience method for encoding data to a file.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param dataToEncode byte array of data to encode in base64 form\n * @param filename Filename for saving encoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if dataToEncode is null\n * @since 2.1\n */\n", "func_signal": "public static void encodeToFile( byte[] dataToEncode, String filename )\nthrows java.io.IOException", "code": "{\n\n    if( dataToEncode == null ){\n        throw new NullPointerException( \"Data to encode was null.\" );\n    }   // end iff\n\n    Base64Util.OutputStream bos = null;\n    try {\n        bos = new Base64Util.OutputStream(\n              new java.io.FileOutputStream( filename ), Base64Util.ENCODE );\n        bos.write( dataToEncode );\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and throw to execute finally{} block\n    }   // end catch: java.io.IOException\n    finally {\n        try{ bos.close(); } catch( Exception e ){}\n    }   // end finally\n\n}", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tString ret = \"{\";\n\tif(id!=null){\n\t\tret+=\"id=\"+id+\";\";\n\t}\n\tif(name!=null){\n\t\tret+=\"name=\"+name+\";\";\n\t}\n\tif(number!=null){\n\t\tret+=\"number=\"+number+\";\";\n\t}\n\tif(imageUrl!=null){\n\t\tret+=\"imageUrl=\"+imageUrl+\";\";\n\t}\n\treturn ret+\"}\";\n}", "path": "googlevoice\\src\\com\\techventus\\server\\voice\\datatypes\\Contact.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * Flushes and closes (I think, in the superclass) the stream.\n *\n * @since 1.3\n */\n", "func_signal": "@Override\npublic void close() throws java.io.IOException", "code": "{\n    // 1. Ensure that pending characters are written\n    flushBase64();\n\n    // 2. Actually close the stream\n    // Base class both flushes and closes.\n    super.close();\n\n    buffer = null;\n    out    = null;\n}", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * Suspends encoding of the stream.\n * May be helpful if you need to embed a piece of\n * base64-encoded data in a stream.\n *\n * @throws java.io.IOException  if there's an error flushing\n * @since 1.5.1\n */\n", "func_signal": "public void suspendEncoding() throws java.io.IOException", "code": "{\n    flushBase64();\n    this.suspendEncoding = true;\n}", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * Encodes up to the first three bytes of array <var>threeBytes</var>\n * and returns a four-byte array in Base64 notation.\n * The actual number of significant bytes in your array is\n * given by <var>numSigBytes</var>.\n * The array <var>threeBytes</var> needs only be as big as\n * <var>numSigBytes</var>.\n * Code can reuse a byte array by passing a four-byte array as <var>b4</var>.\n *\n * @param b4 A reusable byte array to reduce array instantiation\n * @param threeBytes the array to convert\n * @param numSigBytes the number of significant bytes in your array\n * @return four byte array in Base64 notation.\n * @since 1.5.1\n */\n", "func_signal": "private static byte[] encode3to4( byte[] b4, byte[] threeBytes, int numSigBytes, int options )", "code": "{\n    encode3to4( threeBytes, 0, numSigBytes, b4, 0, options );\n    return b4;\n}", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\n", "func_signal": "public static String encodeBytes( byte[] source )", "code": "{\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }   // end catch\n    assert encoded != null;\n    return encoded;\n}", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\n", "func_signal": "public static String encodeFromFile( String filename )\nthrows java.io.IOException", "code": "{\n\n    String encodedData = null;\n    Base64Util.InputStream bis = null;\n    try\n    {\n        // Set up some useful variables\n        java.io.File file = new java.io.File( filename );\n        byte[] buffer = new byte[ Math.max((int)(file.length() * 1.4+1),40) ]; // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        int length   = 0;\n        int numBytes = 0;\n\n        // Open a stream\n        bis = new Base64Util.InputStream(\n                  new java.io.BufferedInputStream(\n                  new java.io.FileInputStream( file ) ), Base64Util.ENCODE );\n\n        // Read until done\n        while( ( numBytes = bis.read( buffer, length, 4096 ) ) >= 0 ) {\n            length += numBytes;\n        }   // end while\n\n        // Save in a variable to return\n        encodedData = new String( buffer, 0, length, Base64Util.PREFERRED_ENCODING );\n\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and release to execute finally{}\n    }   // end catch: java.io.IOException\n    finally {\n        try{ bis.close(); } catch( Exception e) {}\n    }   // end finally\n\n    return encodedData;\n    }", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * <p>Encodes up to three bytes of the array <var>source</var>\n * and writes the resulting four Base64 bytes to <var>destination</var>.\n * The source and destination arrays can be manipulated\n * anywhere along their length by specifying\n * <var>srcOffset</var> and <var>destOffset</var>.\n * This method does not check to make sure your arrays\n * are large enough to accomodate <var>srcOffset</var> + 3 for\n * the <var>source</var> array or <var>destOffset</var> + 4 for\n * the <var>destination</var> array.\n * The actual number of significant bytes in your array is\n * given by <var>numSigBytes</var>.</p>\n\t * <p>This is the lowest level of the encoding methods with\n\t * all possible parameters.</p>\n *\n * @param source the array to convert\n * @param srcOffset the index where conversion begins\n * @param numSigBytes the number of significant bytes in your array\n * @param destination the array to hold the conversion\n * @param destOffset the index where output will be put\n * @return the <var>destination</var> array\n * @since 1.3\n */\n", "func_signal": "private static byte[] encode3to4(\nbyte[] source, int srcOffset, int numSigBytes,\nbyte[] destination, int destOffset, int options )", "code": "{\n\n\tbyte[] ALPHABET = getAlphabet( options );\n\n    //           1         2         3\n    // 01234567890123456789012345678901 Bit position\n    // --------000000001111111122222222 Array position from threeBytes\n    // --------|    ||    ||    ||    | Six bit groups to index ALPHABET\n    //          >>18  >>12  >> 6  >> 0  Right shift necessary\n    //                0x3f  0x3f  0x3f  Additional AND\n\n    // Create buffer with zero-padding if there are only one or two\n    // significant bytes passed in the array.\n    // We have to shift left 24 in order to flush out the 1's that appear\n    // when Java treats a value as negative that is cast from a byte to an int.\n    int inBuff =   ( numSigBytes > 0 ? ((source[ srcOffset     ] << 24) >>>  8) : 0 )\n                 | ( numSigBytes > 1 ? ((source[ srcOffset + 1 ] << 24) >>> 16) : 0 )\n                 | ( numSigBytes > 2 ? ((source[ srcOffset + 2 ] << 24) >>> 24) : 0 );\n\n    switch( numSigBytes )\n    {\n        case 3:\n            destination[ destOffset     ] = ALPHABET[ (inBuff >>> 18)        ];\n            destination[ destOffset + 1 ] = ALPHABET[ (inBuff >>> 12) & 0x3f ];\n            destination[ destOffset + 2 ] = ALPHABET[ (inBuff >>>  6) & 0x3f ];\n            destination[ destOffset + 3 ] = ALPHABET[ (inBuff       ) & 0x3f ];\n            return destination;\n\n        case 2:\n            destination[ destOffset     ] = ALPHABET[ (inBuff >>> 18)        ];\n            destination[ destOffset + 1 ] = ALPHABET[ (inBuff >>> 12) & 0x3f ];\n            destination[ destOffset + 2 ] = ALPHABET[ (inBuff >>>  6) & 0x3f ];\n            destination[ destOffset + 3 ] = EQUALS_SIGN;\n            return destination;\n\n        case 1:\n            destination[ destOffset     ] = ALPHABET[ (inBuff >>> 18)        ];\n            destination[ destOffset + 1 ] = ALPHABET[ (inBuff >>> 12) & 0x3f ];\n            destination[ destOffset + 2 ] = EQUALS_SIGN;\n            destination[ destOffset + 3 ] = EQUALS_SIGN;\n            return destination;\n\n        default:\n            return destination;\n    }   // end switch\n}", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\n", "func_signal": "public static byte[] encodeBytesToBytes( byte[] source )", "code": "{\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes( source, 0, source.length, Base64Util.NO_OPTIONS );\n    } catch( java.io.IOException ex ) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * Constructs a {@link Base64Util.InputStream} in\n * either ENCODE or DECODE mode.\n * <p>\n * Valid options:<pre>\n *   ENCODE or DECODE: Encode or Decode as data is read.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     (only meaningful when encoding)</i>\n * </pre>\n * <p>\n * Example: <code>new Base64Util.InputStream( in, Base64Util.DECODE )</code>\n *\n *\n * @param in the <tt>java.io.InputStream</tt> from which to read data.\n * @param options Specified options\n * @see Base64#ENCODE\n * @see Base64#DECODE\n * @see Base64#DO_BREAK_LINES\n * @since 2.0\n */\n", "func_signal": "public InputStream( java.io.InputStream in, int options )", "code": "{\n\n    super( in );\n    this.options      = options; // Record for later\n    this.breakLines   = (options & DO_BREAK_LINES) > 0;\n    this.encode       = (options & ENCODE) > 0;\n    this.bufferLength = encode ? 4 : 3;\n    this.buffer       = new byte[ bufferLength ];\n    this.position     = -1;\n    this.lineLength   = 0;\n    this.decodabet    = getDecodabet(options);\n}", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * Reads enough of the input stream to convert\n * to/from Base64 and returns the next byte.\n *\n * @return next byte\n * @since 1.3\n */\n", "func_signal": "@Override\npublic int read() throws java.io.IOException", "code": "{\n\n    // Do we need to get data?\n    if( position < 0 ) {\n        if( encode ) {\n            byte[] b3 = new byte[3];\n            int numBinaryBytes = 0;\n            for( int i = 0; i < 3; i++ ) {\n                int b = in.read();\n\n                // If end of stream, b is -1.\n                if( b >= 0 ) {\n                    b3[i] = (byte)b;\n                    numBinaryBytes++;\n                } else {\n                    break; // out of for loop\n                }   // end else: end of stream\n\n            }   // end for: each needed input byte\n\n            if( numBinaryBytes > 0 ) {\n                encode3to4( b3, 0, numBinaryBytes, buffer, 0, options );\n                position = 0;\n                numSigBytes = 4;\n            }   // end if: got data\n            else {\n                return -1;  // Must be end of stream\n            }   // end else\n        }   // end if: encoding\n\n        // Else decoding\n        else {\n            byte[] b4 = new byte[4];\n            int i = 0;\n            for( i = 0; i < 4; i++ ) {\n                // Read four \"meaningful\" bytes:\n                int b = 0;\n                do{ b = in.read(); }\n                while( b >= 0 && decodabet[ b & 0x7f ] <= WHITE_SPACE_ENC );\n\n                if( b < 0 ) {\n                    break; // Reads a -1 if end of stream\n                }   // end if: end of stream\n\n                b4[i] = (byte)b;\n            }   // end for: each needed input byte\n\n            if( i == 4 ) {\n                numSigBytes = decode4to3( b4, 0, buffer, 0, options );\n                position = 0;\n            }   // end if: got four characters\n            else if( i == 0 ){\n                return -1;\n            }   // end else if: also padded correctly\n            else {\n                // Must have broken out from above.\n                throw new java.io.IOException( \"Improperly padded Base64 input.\" );\n            }   // end\n\n        }   // end else: decode\n    }   // end else: get data\n\n    // Got data?\n    if( position >= 0 ) {\n        // End of relevant data?\n        if( /*!encode &&*/ position >= numSigBytes ){\n            return -1;\n        }   // end if: got data\n\n        if( encode && breakLines && lineLength >= MAX_LINE_LENGTH ) {\n            lineLength = 0;\n            return '\\n';\n        }   // end if\n        else {\n            lineLength++;   // This isn't important when decoding\n                            // but throwing an extra \"if\" seems\n                            // just as wasteful.\n\n            int b = buffer[ position++ ];\n\n            if( position >= bufferLength ) {\n                position = -1;\n            }   // end if: end\n\n            return b & 0xFF; // This is how you \"cast\" a byte that's\n                             // intended to be unsigned.\n        }   // end else\n    }   // end if: position >= 0\n\n    // Else error\n    else {\n        throw new java.io.IOException( \"Error in Base64 code reading stream.\" );\n    }   // end else\n}", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * Method added by PHIL. [Thanks, PHIL. -Rob]\n * This pads the buffer without closing the stream.\n * @throws java.io.IOException  if there's an error.\n */\n", "func_signal": "public void flushBase64() throws java.io.IOException", "code": "{\n    if( position > 0 ) {\n        if( encode ) {\n            out.write( encode3to4( b4, buffer, position, options ) );\n            position = 0;\n        }   // end if: encoding\n        else {\n            throw new java.io.IOException( \"Base64 input not properly padded.\" );\n        }   // end else: decoding\n    }   // end if: buffer partially full\n\n}", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64Util.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64Util.GZIP | Base64Util.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\n", "func_signal": "public static String encodeObject( java.io.Serializable serializableObject, int options )\nthrows java.io.IOException", "code": "{\n\n    if( serializableObject == null ){\n        throw new NullPointerException( \"Cannot serialize a null object.\" );\n    }   // end if: null\n\n    // Streams\n    java.io.ByteArrayOutputStream  baos  = null;\n    java.io.OutputStream           b64os = null;\n    java.util.zip.GZIPOutputStream gzos  = null;\n    java.io.ObjectOutputStream     oos   = null;\n\n\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos  = new java.io.ByteArrayOutputStream();\n        b64os = new Base64Util.OutputStream( baos, ENCODE | options );\n        if( (options & GZIP) != 0 ){\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream( gzos );\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream( b64os );\n        }\n        oos.writeObject( serializableObject );\n    }   // end try\n    catch( java.io.IOException e ) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    }   // end catch\n    finally {\n        try{ oos.close();   } catch( Exception e ){}\n        try{ gzos.close();  } catch( Exception e ){}\n        try{ b64os.close(); } catch( Exception e ){}\n        try{ baos.close();  } catch( Exception e ){}\n    }   // end finally\n\n    // Return value according to relevant encoding.\n    try {\n        return new String( baos.toByteArray(), PREFERRED_ENCODING );\n    }   // end try\n    catch (java.io.UnsupportedEncodingException uue){\n        // Fall back to some Java default\n        return new String( baos.toByteArray() );\n    }   // end catch\n\n}", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * Calls {@link #write(int)} repeatedly until <var>len</var>\n * bytes are written.\n *\n * @param theBytes array from which to read bytes\n * @param off offset for array\n * @param len max number of bytes to read into array\n * @since 1.3\n */\n", "func_signal": "@Override\npublic void write( byte[] theBytes, int off, int len )\nthrows java.io.IOException", "code": "{\n    // Encoding suspended?\n    if( suspendEncoding ) {\n        this.out.write( theBytes, off, len );\n        return;\n    }   // end if: supsended\n\n    for( int i = 0; i < len; i++ ) {\n        write( theBytes[ off + i ] );\n    }   // end for: each byte written\n\n}", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * Performs Base64 encoding on the <code>raw</code> ByteBuffer,\n * writing it to the <code>encoded</code> CharBuffer.\n * This is an experimental feature. Currently it does not\n * pass along any options (such as {@link #DO_BREAK_LINES}\n * or {@link #GZIP}.\n *\n * @param raw input buffer\n * @param encoded output buffer\n * @since 2.3\n */\n", "func_signal": "public static void encode( java.nio.ByteBuffer raw, java.nio.CharBuffer encoded )", "code": "{\n    byte[] raw3 = new byte[3];\n    byte[] enc4 = new byte[4];\n\n    while( raw.hasRemaining() ){\n        int rem = Math.min(3,raw.remaining());\n        raw.get(raw3,0,rem);\n        Base64Util.encode3to4(enc4, raw3, rem, Base64Util.NO_OPTIONS );\n        for( int i = 0; i < 4; i++ ){\n            encoded.put( (char)(enc4[i] & 0xFF) );\n        }\n    }   // end input remaining\n}", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64Util.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64Util.GZIP | Base64Util.DO_BREAK_LINES )</code>\n *\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\n", "func_signal": "public static String encodeBytes( byte[] source, int off, int len, int options ) throws java.io.IOException", "code": "{\n    byte[] encoded = encodeBytesToBytes( source, off, len, options );\n\n    // Return value according to relevant encoding.\n    try {\n        return new String( encoded, PREFERRED_ENCODING );\n    }   // end try\n    catch (java.io.UnsupportedEncodingException uue) {\n        return new String( encoded );\n    }   // end catch\n\n}", "path": "pluginbase\\src\\com\\larvalabs\\slidescreen\\Base64Util.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\treturn \"SMSThread [id=\" + id + \", title=\" + title + \", date=\" + date\n\t\t\t+ \", contact=\" + contact + \", read=\" + read + \", starred=\"\n\t\t\t+ starred + \", listSms=\" + listSms + \"]\";\n}", "path": "googlevoice\\src\\com\\techventus\\server\\voice\\datatypes\\records\\SMSThread.java", "repo_name": "megamattron/SlideScreenPlugins", "stars": 17, "license": "None", "language": "java", "size": 1756}
{"docstring": "/**\n * iterator.remove removes current element\n */\n", "func_signal": "public void testIteratorRemove ()", "code": "{\n    final ConcurrentSkipTreeSet q = new ConcurrentSkipTreeSet();\n    q.add(new Integer(2));\n    q.add(new Integer(1));\n    q.add(new Integer(3));\n\n    Iterator it = q.iterator();\n    it.next();\n    it.remove();\n\n    it = q.iterator();\n    assertEquals(it.next(), new Integer(2));\n    assertEquals(it.next(), new Integer(3));\n    assertFalse(it.hasNext());\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\ConcurrentSkipTreeSetTest.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * If expression not true, set status to indicate current testcase\n * should fail\n */\n", "func_signal": "public void threadAssertTrue(boolean b)", "code": "{\n    if (!b) {\n        threadFailed = true;\n        assertTrue(b);\n    }\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\JSR166TestCase.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Initializes test to indicate that no thread assertions have failed\n */\n", "func_signal": "public void setUp()", "code": "{\n    setDelays();\n    threadFailed = false;\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\JSR166TestCase.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * A deserialized serialized set has same elements\n */\n", "func_signal": "public void testSerialization() throws Exception", "code": "{\n    ConcurrentSkipTreeSet q = populatedSet(SIZE);\n    ByteArrayOutputStream bout = new ByteArrayOutputStream(10000);\n    ObjectOutputStream out = new ObjectOutputStream(new BufferedOutputStream(bout));\n    out.writeObject(q);\n    out.close();\n\n    ByteArrayInputStream bin = new ByteArrayInputStream(bout.toByteArray());\n    ObjectInputStream in = new ObjectInputStream(new BufferedInputStream(bin));\n    ConcurrentSkipTreeSet r = (ConcurrentSkipTreeSet)in.readObject();\n    assertEquals(q.size(), r.size());\n    while (!q.isEmpty())\n        assertEquals(q.pollFirst(), r.pollFirst());\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\ConcurrentSkipTreeSetTest.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * toString contains toStrings of elements\n */\n", "func_signal": "public void testToString()", "code": "{\n    ConcurrentSkipTreeSet q = populatedSet(SIZE);\n    String s = q.toString();\n    for (int i = 0; i < SIZE; ++i) {\n        assertTrue(s.indexOf(String.valueOf(i)) >= 0);\n    }\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\ConcurrentSkipTreeSetTest.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * toArray contains all elements\n */\n", "func_signal": "public void testToArray()", "code": "{\n    ConcurrentSkipTreeSet q = populatedSet(SIZE);\n    Object[] o = q.toArray();\n    Arrays.sort(o);\n    for (int i = 0; i < o.length; i++)\n        assertEquals(o[i], q.pollFirst());\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\ConcurrentSkipTreeSetTest.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Fail, also setting status to indicate current testcase should fail\n */\n", "func_signal": "public void threadFail(String reason)", "code": "{\n    threadFailed = true;\n    fail(reason);\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\JSR166TestCase.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * remove(x) removes x and returns true if present\n */\n", "func_signal": "public void testRemoveElement()", "code": "{\n    ConcurrentSkipTreeSet q = populatedSet(SIZE);\n    for (int i = 1; i < SIZE; i+=2) {\n        assertTrue(q.remove(new Integer(i)));\n    }\n    for (int i = 0; i < SIZE; i+=2) {\n        assertTrue(q.remove(new Integer(i)));\n        assertFalse(q.remove(new Integer(i+1)));\n    }\n    assertTrue(q.isEmpty());\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\ConcurrentSkipTreeSetTest.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * threadFail with message \"should throw exception\"\n */\n", "func_signal": "public void threadShouldThrow()", "code": "{\n    threadFailed = true;\n    fail(\"should throw exception\");\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\JSR166TestCase.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * toArray(a) contains all elements\n */\n", "func_signal": "public void testToArray2()", "code": "{\n    ConcurrentSkipTreeSet q = populatedSet(SIZE);\n    Integer[] ints = new Integer[SIZE];\n    ints = (Integer[])q.toArray(ints);\n    Arrays.sort(ints);\n    for (int i = 0; i < ints.length; i++)\n        assertEquals(ints[i], q.pollFirst());\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\ConcurrentSkipTreeSetTest.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * threadFail with message \"Unexpected exception\", with argument\n */\n", "func_signal": "public void threadUnexpectedException(Throwable ex)", "code": "{\n    threadFailed = true;\n    ex.printStackTrace();\n    fail(\"Unexpected exception: \" + ex);\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\JSR166TestCase.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Add of duplicate element fails\n */\n", "func_signal": "public void testAddDup()", "code": "{\n    ConcurrentSkipTreeSet q = new ConcurrentSkipTreeSet();\n    assertTrue(q.add(zero));\n    assertFalse(q.add(zero));\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\ConcurrentSkipTreeSetTest.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * pollLast succeeds unless empty\n */\n", "func_signal": "public void testPollLast()", "code": "{\n    ConcurrentSkipTreeSet q = populatedSet(SIZE);\n    for (int i = SIZE-1; i >= 0; --i) {\n        assertEquals(i, q.pollLast());\n    }\n    assertNull(q.pollFirst());\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\ConcurrentSkipTreeSetTest.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Runs Runnable r with a security policy that permits precisely\n * the specified permissions.  If there is no current security\n * manager, the runnable is run twice, both with and without a\n * security manager.  We require that any security manager permit\n * getPolicy/setPolicy.\n */\n", "func_signal": "public void runWithPermissions(Runnable r, Permission... permissions)", "code": "{\n    SecurityManager sm = System.getSecurityManager();\n    if (sm == null) {\n        r.run();\n        Policy savedPolicy = Policy.getPolicy();\n        try {\n            Policy.setPolicy(permissivePolicy());\n            System.setSecurityManager(new SecurityManager());\n            runWithPermissions(r, permissions);\n        } finally {\n            System.setSecurityManager(null);\n            Policy.setPolicy(savedPolicy);\n        }\n    } else {\n        Policy savedPolicy = Policy.getPolicy();\n        AdjustablePolicy policy = new AdjustablePolicy(permissions);\n        Policy.setPolicy(policy);\n\n        try {\n            r.run();\n        } finally {\n            policy.addPermission(new SecurityPermission(\"setPolicy\"));\n            Policy.setPolicy(savedPolicy);\n        }\n    }\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\JSR166TestCase.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Wait out termination of a thread pool or fail doing so\n */\n", "func_signal": "public void joinPool(ExecutorService exec)", "code": "{\n    try {\n        exec.shutdown();\n        assertTrue(exec.awaitTermination(LONG_DELAY_MS, MILLISECONDS));\n    } catch (SecurityException ok) {\n        // Allowed in case test doesn't have privs\n    } catch (InterruptedException ie) {\n        fail(\"Unexpected InterruptedException\");\n    }\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\JSR166TestCase.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * If expression not false, set status to indicate current testcase\n * should fail\n */\n", "func_signal": "public void threadAssertFalse(boolean b)", "code": "{\n    if (b) {\n        threadFailed = true;\n        assertFalse(b);\n    }\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\JSR166TestCase.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * retainAll(c) retains only those elements of c and reports true if changed\n */\n", "func_signal": "public void testRetainAll()", "code": "{\n    ConcurrentSkipTreeSet q = populatedSet(SIZE);\n    ConcurrentSkipTreeSet p = populatedSet(SIZE);\n    for (int i = 0; i < SIZE; ++i) {\n        boolean changed = q.retainAll(p);\n        if (i == 0)\n            assertFalse(changed);\n        else\n            assertTrue(changed);\n\n        assertTrue(q.containsAll(p));\n        assertEquals(SIZE-i, q.size());\n        p.pollFirst();\n    }\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\ConcurrentSkipTreeSetTest.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Initializing from Collection of null elements throws NPE\n */\n", "func_signal": "public void testConstructor4()", "code": "{\n    try {\n        Integer[] ints = new Integer[SIZE];\n        ConcurrentSkipTreeSet q = new ConcurrentSkipTreeSet(Arrays.asList(ints));\n        shouldThrow();\n    } catch (NullPointerException success) {}\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\ConcurrentSkipTreeSetTest.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * If arguments not equal, set status to indicate current testcase\n * should fail\n */\n", "func_signal": "public void threadAssertEquals(Object x, Object y)", "code": "{\n    if (x != y && (x == null || !x.equals(y))) {\n        threadFailed = true;\n        assertEquals(x, y);\n    }\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\JSR166TestCase.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Set contains all elements of successful addAll\n */\n", "func_signal": "public void testAddAll5()", "code": "{\n    Integer[] empty = new Integer[0];\n    Integer[] ints = new Integer[SIZE];\n    for (int i = 0; i < SIZE; ++i)\n        ints[i] = new Integer(SIZE-1-i);\n    ConcurrentSkipTreeSet q = new ConcurrentSkipTreeSet();\n    assertFalse(q.addAll(Arrays.asList(empty)));\n    assertTrue(q.addAll(Arrays.asList(ints)));\n    for (int i = 0; i < SIZE; ++i)\n        assertEquals(i, q.pollFirst());\n}", "path": "edu\\virginia\\cs\\skiptree\\test\\ConcurrentSkipTreeSetTest.java", "repo_name": "mspiegel/lockfreeskiptree", "stars": 29, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Prints a string to the output file if DEBUG is on. If ECHO is set, then\n * the output is also echoed to Standard out. Returns true if it printed\n * something.\n */\n", "func_signal": "public boolean debug(String s)", "code": "{\n    if (testState(DEBUG)) {\n        if (testState(ECHO) && outPs != System.out) {\n            System.out.print(s);\n        }\n        out.printdata(\"dbg\", s);\n        return true;\n    }\n    return false;\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * We always print the error stream. But this may not be true forever.\n * \n * @param s\n * @return\n */\n", "func_signal": "public boolean error(String s)", "code": "{\n    err.print(s);\n    return true;\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Looks up the entity stack for an instance of an entity with the given\n * entity name. If such an entity is on the entity stack (i.e. in the\n * current context) then this routine returns true, otherwise false. Note\n * that this routine doesn't care how many entities of that type are in the\n * context, but merely returns true if one of them is in the context.\n * \n * @param entity\n * @return\n */\n", "func_signal": "public boolean inContext(RName entity)", "code": "{\n    for (int i = 0; i < entitystkptr; i++) { // entity on the Entity Stack.\n        IREntity e = entitystk[i];\n        if (e.getName().equals(entity))\n            return true;\n    }\n    return false;\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Internal use. Pull a value off the control stack.\n * \n * @param i\n * @return\n * @throws RulesException\n */\n", "func_signal": "public IRObject getcs(int i) throws RulesException", "code": "{\n    if (i >= ctrlstkptr) {\n        throw new RulesException(\"Control Stack Overflow\", \"getcs\", \"index out of range: \" + i);\n    }\n    if (i < 0) {\n        throw new RulesException(\"Control Stack Underflow\", \"getcs\", \"index out of range: \" + i);\n    }\n    return ctrlstk[i];\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Internal use. Prints some information into the trace file.\n * \n * @param tag\n * @param name1\n * @param value1\n * @param name2\n * @param value2\n * @param name3\n * @param value3\n * @param name4\n * @param value4\n * @param body\n */\n", "func_signal": "public void traceInfo(String tag, String name1, String value1, String name2, String value2, String name3,\n        String value3, String name4, String value4, String body)", "code": "{\n    if (testState(TRACE))\n        out.printdata(tag, name1, value1, name2, value2, name3, value3, name4, value4, body);\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Prints the Data Stack, Entity Stack, and Control Stack to the debugging\n * output stream.\n */\n", "func_signal": "public void pstack()", "code": "{\n    if (testState(TRACE))\n        return;\n    try {\n        out.opentag(\"pstack\");\n\n        out.opentag(\"datastk\");\n        for (int i = 0; i < ddepth(); i++) {\n            out.printdata(\"ds\", \"depth\", \"\" + i, getds(i).stringValue());\n        }\n        out.closetag();\n\n        out.opentag(\"entitystk\");\n        for (int i = 0; i < ddepth(); i++) {\n            out.printdata(\"es\", \"depth\", \"\" + i, getes(i).stringValue());\n        }\n        out.closetag();\n\n        out.closetag();\n    } catch (RulesException e) {\n        err.print(\"ERROR printing the stacks!\\n\");\n        err.print(e.toString() + \"\\n\");\n    }\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Internal use. Prints some information into the trace file.\n * \n * @param tag\n * @param name1\n * @param value1\n * @param name2\n * @param value2\n * @param name3\n * @param value3\n * @param body\n */\n", "func_signal": "public void traceInfo(String tag, String name1, String value1, String name2, String value2, String name3,\n        String value3, String body)", "code": "{\n    if (testState(TRACE))\n        out.printdata(tag, name1, value1, name2, value2, name3, value3, body);\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Internal use. Prints some information into the trace file.\n * \n * @param tag\n * @param name1\n * @param value1\n * @param body\n */\n", "func_signal": "public void traceInfo(String tag, String name1, String value1, String body)", "code": "{\n    if (testState(TRACE))\n        out.printdata(tag, name1, value1, body);\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Set the output streams for debug and trace.\n */\n", "func_signal": "public void setOutput(PrintStream debugtrace, PrintStream error)", "code": "{\n    outPs = debugtrace;\n    out = new XMLPrinter(outPs);\n    err = error;\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Internal use. Prints some information into the trace file.\n * \n * @param tag\n * @param body\n */\n", "func_signal": "public void traceInfo(String tag, String body)", "code": "{\n    if (testState(TRACE))\n        out.printdata(tag, body);\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Internal Use only. Get a value from a frame location.\n * \n * @param i\n * @return\n * @throws RulesException\n */\n", "func_signal": "public IRObject getFrameValue(int i) throws RulesException", "code": "{\n    if (currentframe + i >= ctrlstkptr) {\n        throw new RulesException(\"OutOfRange\", \"getFrameValue\", \"\");\n    }\n    return getcs(currentframe + i);\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Looks up the entity stack for a match for the RName. When a match is\n * found, the value is placed there and a true is returned. If no match is\n * found, def returns false.\n * \n * @param name\n * @param value\n */\n", "func_signal": "public boolean def(RName name, IRObject value, boolean protect) throws RulesException", "code": "{\n\n    RName entityname = name.getEntityName();\n\n    for (int i = entitystkptr - 1; i >= 0; i--) {\n        IREntity e = entitystk[i];\n        if (!e.isReadOnly() && (entityname == null || e.getName().equals(entityname))) {\n            REntityEntry entry = e.getEntry(name);\n            if (entry != null && (!protect || entry.writable)) {\n                if (testState(TRACE)) {\n                    out.printdata(\"def\", \n                    \t\t\"id\",     e.getID(), \n                    \t\t\"entity\", e.getName().stringValue(), \n                    \t\t\"name\",   name.stringValue(), \n                    \t\tvalue.postFix());\n                }\n\n                e.put(null, name, value);\n                return true;\n            }\n        }\n    }\n    return false;\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Looks up the entity stack and returns the entity which defines the value\n * of the given attribute.\n * \n * When getting data out of the rules Engine, it is useful to take string\n * values rather than RNames. This should never be done within the Rules\n * Engine where RNames should be the coin of the realm.\n * \n * This routine simply returns a null if an error occurs or if the name is\n * undefined.\n */\n", "func_signal": "public IREntity findEntity(String name)", "code": "{\n    try {\n        return findEntity(RName.getRName(name));\n    } catch (RulesException e) {\n        return null;\n    }\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Pushes an IRObject onto the data stack.\n * \n * @param o\n * @throws RulesException\n */\n", "func_signal": "public void datapush(IRObject o) throws RulesException", "code": "{\n    if (datastkptr >= 1000) {\n        throw new RulesException(\"Data Stack Overflow\", o.stringValue(), \"Data Stack overflow.\");\n    }\n    datastk[datastkptr++] = o;\n    if (testState(VERBOSE)) {\n        traceInfo(\"datapush\", \"attribs\", o.postFix(), null);\n    }\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Pushes an entity on the entity stack.\n * \n * @param o\n * @throws RulesException\n */\n", "func_signal": "public void entitypush(IREntity o) throws RulesException", "code": "{\n    if (entitystkptr >= 1000) {\n        throw new RulesException(\"Entity Stack Overflow\", o.stringValue(), \"Entity Stack overflow.\");\n    }\n    if((state & TRACE) > 0){\n    \ttraceInfo(\"entitypush\",\"entity\",o.getName().stringValue(), \"id\",o.getID()+\"\",null);\n    }\n    entitystk[entitystkptr++] = o;\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Internal use. Pushes a frame onto the control stack from which local\n * variables can be allocated.\n * \n * @throws RulesException\n */\n", "func_signal": "public void pushframe() throws RulesException", "code": "{\n    if (framestkptr >= stklimit) {\n        throw new RulesException(\"Control Stack Overflow\", \"pushframe\", \"Control Stack Overflow.\");\n\n    }\n    frames[framestkptr++] = currentframe;\n    currentframe = ctrlstkptr;\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Looks up the entity stack for a match for the RName. When a match is\n * found, the value is returned. A null is returned if no match is found.\n * \n * @param name\n */\n", "func_signal": "public IRObject find(RName name) throws RulesException", "code": "{\n    IREntity entity = findEntity(name);\n    if (entity == null)\n        return null;\n    return entity.get(name);\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Returns the element on the entity stack at the given depth If there are 3\n * entities on the entity stack, getes(2) will return the top entity. A\n * stack underflow or overflow will be thrown if the index is out of range.\n */\n", "func_signal": "public IREntity getes(int i) throws RulesException", "code": "{\n    if (i >= entitystkptr) {\n        throw new RulesException(\"Entity Stack Overflow\", \"getes\", \"index out of range: \" + i);\n    }\n    if (i < 0) {\n        throw new RulesException(\"Entity Stack Underflow\", \"getes\", \"index out of range: \" + i);\n    }\n    return entitystk[i];\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Looks up the Entity Stack and returns the value for the given named\n * attribute.\n * \n * When getting data out of the rules Engine, it is useful to take string\n * values rather than RNames. This should never be done within the Rules\n * Engine where RNames should be the coin of the realm.\n * \n * This routine simply returns a null if an error occurs or if the name is\n * undefined.\n */\n", "func_signal": "public IRObject find(String name)", "code": "{\n    try {\n        return find(RName.getRName(name));\n    } catch (RulesException e) {\n        return null;\n    }\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * Condition, Action, Context, etc.\n * \n * @param currentTableSection\n *            the currentTableSection to set\n */\n", "func_signal": "public void setCurrentTableSection(String currentTableSection, int number)", "code": "{\n    this.currentTableSection = currentTableSection;\n    this.numberInSection = number;\n}", "path": "dtrules-engine\\src\\main\\java\\com\\dtrules\\session\\DTState.java", "repo_name": "DTRules/DTRules", "stars": 25, "license": "None", "language": "java", "size": 22681}
{"docstring": "/**\n * \u59d3\u6c0f\u5b57\u5178\n * \n * @return\n */\n", "func_signal": "public synchronized Dictionary getConfucianFamilyNamesDictionary()", "code": "{\n\tif (confucianFamilyNamesDictionary == null) {\n\t\tconfucianFamilyNamesDictionary = new BinaryDictionary(\n\t\t\t\tgetConfucianFamilyNames());\n\t}\n\treturn confucianFamilyNamesDictionary;\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\analyzer\\impl\\CompiledFileDictionaries.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "// -------------------------------------------------\n", "func_signal": "@Override\npublic TokenStream tokenStream(String fieldName, Reader reader)", "code": "{\n\tif (knife == null) {\n\t\tthrow new NullPointerException(\"knife should be set before token\");\n\t}\n\t// XTokenizerTokenStream\u02b5\u05a3\u02b9knifereader\u0131\n\treturn new XTokenizer(reader, knife, createTokenCollector());\n}", "path": "paoding-analysis-1\\src\\com\\sohospace\\lucene\\analysis\\xanalyzer\\XAnalyzer.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "//get checksum in lazy mode\n", "func_signal": "public String getCheckSum()", "code": "{\n\tif (checksum == null) buildCheckSum();\n\treturn checksum;\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\dictionary\\support\\detection\\Snapshot.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "// ---------------------------------------\n", "func_signal": "protected final boolean isSkipForVacabulary(String dicNameRelativeDicHome)", "code": "{\n\treturn dicNameRelativeDicHome.startsWith(skipPrefix)\n\t\t\t|| dicNameRelativeDicHome.indexOf(\"/\" + skipPrefix) != -1;\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\knife\\FileDictionaries.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "/**\n * \u59d3\u6c0f\u5b57\u5178\n * \n * @return\n */\n", "func_signal": "public synchronized Dictionary getConfucianFamilyNamesDictionary()", "code": "{\n\tif (confucianFamilyNamesDictionary == null) {\n\t\tconfucianFamilyNamesDictionary = new BinaryDictionary(\n\t\t\t\tgetConfucianFamilyNames());\n\t}\n\treturn confucianFamilyNamesDictionary;\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\knife\\FileDictionaries.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "/**\n * \u5ffd\u7565\u7684\u8bcd\u8bed\n * \n * @return\n */\n", "func_signal": "public synchronized Dictionary getNoiseCharactorsDictionary()", "code": "{\n\tif (noiseCharactorsDictionary == null) {\n\t\tnoiseCharactorsDictionary = new HashBinaryDictionary(\n\t\t\t\tgetNoiseCharactors(), 256, 0.75f);\n\t}\n\treturn noiseCharactorsDictionary;\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\analyzer\\impl\\CompiledFileDictionaries.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "// ---------------------------------------------------------------\n// \u4ee5\u4e0b\u4e3a\u8f85\u52a9\u6027\u7684\u65b9\u5f0f-\u7c7b\u79c1\u6709\u6216package\u79c1\u6709\n", "func_signal": "protected Word[] getVocabularyWords()", "code": "{\n\tMap/* <String, Set<Word>> */dics = loadAllWordsIfNecessary();\n\tSet/* <Word> */set = null;\n\tIterator/* <Word> */iter = dics.keySet().iterator();\n\twhile (iter.hasNext()) {\n\t\tString name = (String) iter.next();\n\t\tif (isSkipForVacabulary(name)) {\n\t\t\tcontinue;\n\t\t}\n\t\tSet/* <Word> */dic = (Set/* <Word> */) dics.get(name);\n\t\tif (set == null) {\n\t\t\tset = new HashSet/* <Word> */(dic);\n\t\t} else {\n\t\t\tset.addAll(dic);\n\t\t}\n\t}\n\tWord[] words = (Word[]) set.toArray(new Word[set.size()]);\n\tArrays.sort(words);\n\treturn words;\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\knife\\FileDictionaries.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "/**\n * \u521b\u5efa\u5206\u8bcd\u5178\u6620\u5c04\uff0c\u4e3a\u6784\u9020\u51fd\u6570\u8c03\u7528\n */\n", "func_signal": "protected void createSubDictionaries()", "code": "{\n\tif (this.start >= ascWords.length) {\n\t\treturn;\n\t}\n\t\n\t// \u5b9a\u4f4d\u76f8\u540c\u5934\u5b57\u7b26\u8bcd\u8bed\u7684\u5f00\u5934\u548c\u7ed3\u675f\u4f4d\u7f6e\u4ee5\u786e\u8ba4\u5206\u5b57\u5178\n\tint beginIndex = this.start;\n\tint endIndex = this.start + 1;\n\t\n\tchar beginHashChar = getChar(ascWords[start], hashIndex);\n\tchar endHashChar;\n\tfor (; endIndex < this.end; endIndex++) {\n\t\tendHashChar = getChar(ascWords[endIndex], hashIndex);\n\t\tif (endHashChar != beginHashChar) {\n\t\t\taddSubDictionary(beginHashChar, beginIndex, endIndex);\n\t\t\tbeginIndex = endIndex;\n\t\t\tbeginHashChar = endHashChar;\n\t\t}\n\t}\n\taddSubDictionary(beginHashChar, beginIndex, this.end);\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\dictionary\\HashBinaryDictionary.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "/**\n * build checksum of snapshot\n * \n * @return checksum of current snapshot\n */\n", "func_signal": "private void buildCheckSum()", "code": "{\n\tshort checksum = -631;\n\tshort multiplier = 1;\n\tString ENCODING = \"UTF-8\";\n\t\n\tStringBuilder value = new StringBuilder();\n\tfor(int i = 0; i < nodes.length; i++){\n\t\tvalue.append(nodes[i].path);\n\t\tvalue.append(nodes[i].isFile);\n\t\tvalue.append(nodes[i].parent);\n\t\tvalue.append(nodes[i].lastModified);\n\t}\n\n\ttry {\n\t\tbyte[] data = value.toString().getBytes(ENCODING);\n\t\tfor (int b = 0; b < data.length; ++b)\n\t\t\tchecksum += data[b] * multiplier++;\n\t} catch (java.io.UnsupportedEncodingException ex) {\n\n\t}\n\n\tthis.checksum = String.valueOf(checksum);\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\dictionary\\support\\detection\\Snapshot.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "/**\n * \n * @param dicName\n */\n", "func_signal": "protected synchronized void refreshDicWords(String dicPath)", "code": "{\n\tint index = dicPath.lastIndexOf(\".dic\");\n\tString dicName = dicPath.substring(0, index);\n\tif (allWords != null) {\n\t\ttry {\n\t\t\tMap/* <String, Set<String>> */temp = FileWordsReader\n\t\t\t\t\t.readWords(dicHome + dicPath, charsetName, maxWordLen);\n\t\t\tallWords.put(dicName, temp.values().iterator().next());\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// \u5982\u679c\u6e90\u6587\u4ef6\u5df2\u7ecf\u88ab\u5220\u9664\u4e86\uff0c\u5219\u8868\u793a\u8be5\u5b57\u5178\u4e0d\u8981\u4e86\n\t\t\tallWords.remove(dicName);\n\t\t} catch (IOException e) {\n\t\t\tthrow toRuntimeException(e);\n\t\t}\n\t\tif (!isSkipForVacabulary(dicName)) {\n\t\t\tthis.vocabularyDictionary = null;\n\t\t}\n\t\t// \u5982\u679c\u6765\u7684\u662fnoiseWord\n\t\tif (isNoiseWordDicFile(dicName)) {\n\t\t\tthis.noiseWordsDictionary = null;\n\t\t\t// noiseWord\u548cvocabulary\u6709\u5173\uff0c\u6240\u4ee5\u9700\u8981\u66f4\u65b0vocabulary\n\t\t\tthis.vocabularyDictionary = null;\n\t\t}\n\t\t// \u5982\u679c\u6765\u7684\u662fnoiseCharactors\n\t\telse if (isNoiseCharactorDicFile(dicName)) {\n\t\t\tthis.noiseCharactorsDictionary = null;\n\t\t\t// noiseCharactorsDictionary\u548cvocabulary\u6709\u5173\uff0c\u6240\u4ee5\u9700\u8981\u66f4\u65b0vocabulary\n\t\t\tthis.vocabularyDictionary = null;\n\t\t}\n\t\t// \u5982\u679c\u6765\u7684\u662f\u5355\u5143\n\t\telse if (isUnitDicFile(dicName)) {\n\t\t\tthis.unitsDictionary = null;\n\t\t}\n\t\t// \u5982\u679c\u6765\u7684\u662f\u4e9a\u6d32\u4eba\u4eba\u59d3\u6c0f\n\t\telse if (isConfucianFamilyNameDicFile(dicName)) {\n\t\t\tthis.confucianFamilyNamesDictionary = null;\n\t\t}\n\t\t// \u5982\u679c\u6765\u7684\u662f\u4ee5\u5b57\u6bcd,\u6570\u5b57\u7b49\u7ec4\u5408\u7c7b\u8bed\u8a00\u4e3a\u5f00\u5934\u7684\u8bcd\u6c47\n\t\telse if (isLantinFollowedByCjkDicFile(dicName)) {\n\t\t\tthis.combinatoricsDictionary = null;\n\t\t}\n\t}\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\knife\\FileDictionaries.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "/**\n * \u672c\u65b9\u6cd5\u4e3aPaodingAnalyzer\u9644\u5e26\u7684\u6d4b\u8bd5\u8bc4\u4f30\u65b9\u6cd5\u3002 <br>\n * \u6267\u884c\u4e4b\u53ef\u4ee5\u67e5\u770b\u5206\u8bcd\u6548\u679c\u3002\u4ee5\u4e0b\u4efb\u9009\u4e00\u79cd\u65b9\u5f0f\u8fdb\u884c:\n * <p>\n * \n * java net...PaodingAnalyzer<br>\n * java net...PaodingAnalyzer --help<br>\n * java net...PaodingAnalyzer \u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd<br>\n * java net...PaodingAnalyzer -m max \u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd<br>\n * java net...PaodingAnalyzer -f c:/text.txt<br>\n * java net...PaodingAnalyzer -f c:/text.txt -c utf-8<br>\n * \n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tif (System.getProperty(\"paoding.try.app\") == null) {\n\t\tSystem.setProperty(\"paoding.try.app\", \"PaodingAnalyzer\");\n\t\tSystem.setProperty(\"paoding.try.cmd\", \"java PaodingAnalyzer\");\n\t}\n\tTryPaodingAnalyzer.main(args);\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\analyzer\\PaodingAnalyzer.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "/**\n * \u8bcd\u6c47\u8868\u5b57\u5178\n * \n * @return\n */\n", "func_signal": "public synchronized Dictionary getVocabularyDictionary()", "code": "{\n\tif (vocabularyDictionary == null) {\n\t\t// \u5927\u6982\u67095639\u4e2a\u5b57\u6709\u8bcd\u8bed\uff0c\u6545\u53d60x2fff=x^13>8000>8000*0.75=6000>5639\n\t\tvocabularyDictionary = new HashBinaryDictionary(\n\t\t\t\tgetVocabularyWords(), 0x2fff, 0.75f);\n\t\tDictionary noiseWordsDic = getNoiseWordsDictionary();\n\t\tfor (int i = 0; i < noiseWordsDic.size(); i++) {\n\t\t\tHit hit = vocabularyDictionary.search(noiseWordsDic.get(i), 0, noiseWordsDic.get(i).length());\n\t\t\tif (hit.isHit()) {\n\t\t\t\thit.getWord().setNoiseWord();\n\t\t\t}\n\t\t}\n\t\tDictionary noiseCharactorsDic = getNoiseCharactorsDictionary();\n\t\tfor (int i = 0; i < noiseCharactorsDic.size(); i++) {\n\t\t\tHit hit = vocabularyDictionary.search(noiseCharactorsDic.get(i), 0, noiseCharactorsDic.get(i).length());\n\t\t\tif (hit.isHit()) {\n\t\t\t\thit.getWord().setNoiseCharactor();\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\treturn vocabularyDictionary;\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\knife\\FileDictionaries.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "/**\n * \u8bcd\u6c47\u8868\u5b57\u5178\n * \n * @return\n */\n", "func_signal": "public synchronized Dictionary getVocabularyDictionary()", "code": "{\n\tif (vocabularyDictionary == null) {\n\t\t// \u5927\u6982\u67095639\u4e2a\u5b57\u6709\u8bcd\u8bed\uff0c\u6545\u53d60x2fff=x^13>8000>8000*0.75=6000>5639\n\t\tvocabularyDictionary = new HashBinaryDictionary(\n\t\t\t\tgetVocabularyWords(), 0x2fff, 0.75f);\n\t}\n\treturn vocabularyDictionary;\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\analyzer\\impl\\CompiledFileDictionaries.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "/**\n * \u8ba1\u91cf\u5355\u4f4d\n * \n * @return\n */\n", "func_signal": "public synchronized Dictionary getUnitsDictionary()", "code": "{\n\tif (unitsDictionary == null) {\n\t\tunitsDictionary = new HashBinaryDictionary(getUnits(), 1024, 0.75f);\n\t}\n\treturn unitsDictionary;\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\knife\\FileDictionaries.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "/**\n * \n * @param input\n * @param knife\n * @param tokenCollector\n */\n", "func_signal": "public PaodingTokenizer(Reader input, Knife knife,\n\t\tTokenCollector tokenCollector)", "code": "{\n\tthis.input = input;\n\tthis.knife = knife;\n\tthis.tokenCollector = tokenCollector;\n\tinit();\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\analyzer\\PaodingTokenizer.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "/**\n * \u5ffd\u7565\u7684\u5355\u5b57\n * \n * @return\n */\n", "func_signal": "public synchronized Dictionary getNoiseWordsDictionary()", "code": "{\n\tif (noiseWordsDictionary == null) {\n\t\tnoiseWordsDictionary = new BinaryDictionary(getNoiseWords());\n\t}\n\treturn noiseWordsDictionary;\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\analyzer\\impl\\CompiledFileDictionaries.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "// ---------------------------------------------------------------\n// \u4ee5\u4e0b\u4e3a\u8f85\u52a9\u6027\u7684\u65b9\u5f0f-\u7c7b\u79c1\u6709\u6216package\u79c1\u6709\n", "func_signal": "protected Word[] getDictionaryWords(String dicNameRelativeDicHome)", "code": "{\n\tFile f = new File(this.dicHome, \"/\" + dicNameRelativeDicHome\n\t\t\t+ \".dic.compiled\");\n\tif (!f.exists()) {\n\t\treturn new Word[0];\n\t}\n\ttry {\n\t\tMap map = FileWordsReader.readWords(f.getAbsolutePath(),\n\t\t\t\tcharsetName, maxWordLen, LinkedList.class, \".dic.compiled\");\n\t\tList wordsList = (List) map.values().iterator().next();\n\t\treturn (Word[]) wordsList.toArray(new Word[wordsList.size()]);\n\t} catch (IOException e) {\n\t\tthrow toRuntimeException(e);\n\t}\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\analyzer\\impl\\CompiledFileDictionaries.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "/**\n * \u5ffd\u7565\u7684\u5355\u5b57\n * \n * @return\n */\n", "func_signal": "public synchronized Dictionary getNoiseWordsDictionary()", "code": "{\n\tif (noiseWordsDictionary == null) {\n\t\tnoiseWordsDictionary = new BinaryDictionary(getNoiseWords());\n\t}\n\treturn noiseWordsDictionary;\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\knife\\FileDictionaries.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "/**\n * \u5ffd\u7565\u7684\u8bcd\u8bed\n * \n * @return\n */\n", "func_signal": "public synchronized Dictionary getNoiseCharactorsDictionary()", "code": "{\n\tif (noiseCharactorsDictionary == null) {\n\t\tnoiseCharactorsDictionary = new HashBinaryDictionary(\n\t\t\t\tgetNoiseCharactors(), 256, 0.75f);\n\t}\n\treturn noiseCharactorsDictionary;\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\knife\\FileDictionaries.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "/**\n * \u5c06\u4f4d\u7f6e\u5728beginIndex\u548cendIndex\u4e4b\u95f4(\u4e0d\u5305\u62ecendIndex)\u7684\u8bcd\u8bed\u4f5c\u4e3a\u4e00\u4e2a\u5206\u8bcd\u5178\n * \n * @param hashChar\n * @param beginIndex\n * @param endIndex\n */\n", "func_signal": "protected void addSubDictionary(char hashChar, int beginIndex, int endIndex)", "code": "{\n\tDictionary subDic = createSubDictionary(ascWords, beginIndex, endIndex);\n\tSubDictionaryWrap subDicWrap = new SubDictionaryWrap(hashChar,\n\t\t\tsubDic, beginIndex);\n\tsubs.put(keyOf(hashChar), subDicWrap);\n}", "path": "paoding-analysis\\src\\net\\paoding\\analysis\\dictionary\\HashBinaryDictionary.java", "repo_name": "zhuomingliang/paoding", "stars": 25, "license": "None", "language": "java", "size": 7385}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\n    setContentView(R.layout.drink_details);\n\n    mAuthentication = getAuthentication();\n    \n    Bundle extras = getIntent().getExtras();\n    final Drink drink = extras.getParcelable(Intents.EXTRA_DRINK);\n    sDrink = drink;\n\n    ActionBar actionBar = (ActionBar) findViewById(R.id.actionbar);\n    actionBar.setHomeAction(new IntentAction(this, StartActivity.createIntent(this), R.drawable.ic_actionbar_home_default));\n    actionBar.setTitle(sDrink.getName());\n    actionBar.addAction(new SearchAction() {\n        @Override\n        public void performAction(View view) {\n            onSearchRequested();\n        }\n    });\n    \n    // Populate drink details\n    View detailsLayout = this.findViewById(R.id.drink_detail_layout);\n    mViewHolder = new DrinkViewHolder(detailsLayout);\n    mViewHolder.populate(this, drink, mImageClickListener);\n\tfloat rating = (drink.hasEstimatedRating() ? drink.getEstimatedRating() : drink.getAverageRating());\n\tmViewHolder.getRateView().setRating(rating);\n    \n    mUserRatingAdapter = new UserRatingAdapter(this, 0);\n    this.updateUserRatingInUi(drink.getUserRating());\n    mSectionedAdapter.addSectionFirst(0, getText(R.string.my_rating), mUserRatingAdapter);\n\n    if (mAuthentication != null && mAuthentication.looksValid()) {\n    \tlaunchGetDrinkTask(drink);\n    }\n\n    if(true == drink.hasDescription()) {\n    \tDrinkDescriptionAdapter adapter = new DrinkDescriptionAdapter(this, drink.getDescription());\n    \tmSectionedAdapter.addSection(0, getText(R.string.manufacturers_description), adapter);\n    }\n    \n    ArrayList<Tag> tags = drink.getTags();\n\t    if(tags.isEmpty() == false) {\n\t    \tMultiHashMap<String, Tag> tagMap = ListUtils.toMultiHashMap(tags);\n\t        Set<Entry<String, List<Tag>>> nameSet = tagMap.entrySet();\n\t        for (Entry<String, List<Tag>> entry : nameSet) {\n\t            mSectionedAdapter.addSection(0, entry.getKey(),\n\t            \t\tnew ArrayAdapter<Tag>(this, \n\t                    R.layout.simple_row, entry.getValue()));\n\t        }\n    }\n\n    ArrayList<Volume> volumes = drink.getVolumes();\n    if (!volumes.isEmpty()) {\n        VolumeAdapter volumeAdapter = new VolumeAdapter(this, volumes);\n        mSectionedAdapter.addSection(1, (String) getText(R.string.packings), volumeAdapter);\n    }\n\n    // This is temporary till we have fixed a proper comments adapter. \n    mSectionedAdapter.addSection(2, (String) getText(R.string.comments), \n            createLoadingAdapter(getText(R.string.loading_comments)));\n    \n    // Check if already have some data, used if screen is rotated.\n    @SuppressWarnings(\"unchecked\")\n    final ArrayList<Comment> comments = (ArrayList<Comment>) getLastNonConfigurationInstance();\n    if (comments != null) {\n    \tupdateCommentsInUi(comments);\n    } else if(drink.getCommentCount() == 0) {\n    \t// Update the comment list with an empty array\n    \tupdateCommentsInUi(new ArrayList<Comment>());\n    } else {\n        launchGetCommentsTask(drink);\n    }\n\n    setListAdapter(mSectionedAdapter);\n    \n    // Orphan barcode handler layout\n\t\tView orphanLayout = findViewById(R.id.orphan_barcode_layout);\n\t\t\n\t\tTextView textView = (TextView) orphanLayout.findViewById(R.id.orphan_barcode_text);\n\t\ttextView.setText(String.format(this.getString(R.string.add_suggested_barcode), getApp().getOrphanBarcode()));\n\t\t\n\t\tButton buttonAdd = (Button) orphanLayout.findViewById(R.id.btn_add_orphan_code);\n\t\tbuttonAdd.setOnClickListener(this);\n\t\t\n\t\tButton buttonForget = (Button) orphanLayout.findViewById(R.id.btn_forget_orphan_barcode);\n\t\tbuttonForget.setOnClickListener(this);\n\t\t\n\t\tButton buttonCancel = (Button) orphanLayout.findViewById(R.id.btn_cancel);\n\t\tbuttonCancel.setOnClickListener(this);\n    \n    this.registerReceiver(mBroadcastReceiver, new IntentFilter(Intents.ACTION_PUBLISH_DRINK));\n}", "path": "src\\com\\markupartist\\iglaset\\activity\\DrinkDetailActivity.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "// For the unchecked cast of the filter results value.\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n@Override\nprotected void publishResults(CharSequence constraint, FilterResults results)", "code": "{\n    if (results != null && results.count > 0) {\n        clear();\n        for (String value : (List<String>)results.values) {\n            add(value);\n        }\n        notifyDataSetChanged();\n    }\n}", "path": "src\\com\\markupartist\\iglaset\\activity\\StartActivity.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/**\n * @param <K> Key type.\n * @param <V> Value type.\n * @param list List of objects to map.\n * @return A multimap with the objects sorted using the key from {@code method}.\n * \n * Convert a list of objects to a multimap using the objects' {@code getKey}\n * return value as key. This means that the class being sorted must implement\n * the {@link HasKey} interface.\n * \n * <pre>\n * {@code\n * class Animal implements HasKey<String> {\n *    private String name;\n *    private String type;\n *    \n *    public Animal(String name, String type) {\n *       this.name = name;\n *       this.type = type;\n *    }\n *    public String getName() {\n *       return name;\n *    }\n *    public String getType() {\n *       return type;\n *    }\n *    public String getKey() {\n *    \t return this.type;\n *    }\n * }\n * \n * ArrayList<Animal> animalList = new ArrayList<Animal>();\n * animalList.add(new Animal(\"Hercules\", \"Mouse\"));\n * animalList.add(new Animal(\"Fido\", \"Dog\"));\n * animalList.add(new Animal(\"Brutus\", \"Dog\"));\n * animalList.add(new Animal(\"Sebastian\", \"Cat\"));\n * MultiHashMap<String, Animal> = ListUtils.toMultiHashMap(animalList));\n * }\n * </pre>\n * \n * This will give you the following map:\n * <pre>\n * {@code\n * * Cat\n *   - Sebastian object\n * * Dog\n *   - Fido object\n *   - Brutus object\n * * Mous\n *   - Hercules object\n * }\n * </pre>\n * \n * Note that this call is not type safe and exceptions thrown within it\n * will be caught and silently ignored for ease of use. \n */\n", "func_signal": "public static <K, V extends HasKey<K>> MultiHashMap<K, V> toMultiHashMap(ArrayList<V> list)", "code": "{\n\tMultiHashMap<K, V> map = new MultiHashMap<K, V>();\n\t\n\tfor(V object : list) {\n\t\tmap.put(object.getKey(), object);\n\t}\n\t\n\treturn map;\n}", "path": "src\\com\\markupartist\\iglaset\\util\\ListUtils.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/**\n * Cancel current GetDrinkTask if it has been created and if it is\n * currently executing.\n */\n", "func_signal": "private void cancelGetDrinkTask()", "code": "{\n\tif(null != mGetDrinkTask && mGetDrinkTask.getStatus() == AsyncTask.Status.RUNNING) {\n\t\tmGetDrinkTask.cancel(true);\n\t\tmGetDrinkTask = null;\n\t}\n}", "path": "src\\com\\markupartist\\iglaset\\activity\\DrinkDetailActivity.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/**\n * Update comments view.\n * @param comments the comments\n */\n", "func_signal": "private void updateCommentsInUi(ArrayList<Comment> comments)", "code": "{\n    // Save the result to return it from onRetainNonConfigurationInstance.\n    mComments = comments;\n\n    ArrayList<Map<String, Object>> list = new ArrayList<Map<String, Object>>();\n\n    if (comments.isEmpty()) {\n    \tMap<String, Object> map = new HashMap<String, Object>();\n        map.put(\"text\", getText(R.string.no_comments));\n        list.add(map);\n\n        mCommentsAdapter = new SimpleAdapter(this, list, \n                R.layout.simple_row,\n                new String[] { \"text\" },\n                new int[] { \n                    R.id.simple_row_text\n                }\n        );\n    } else {\n        for (Comment comment : comments) {\n        \tMap<String, Object> map = new HashMap<String, Object>();\n            map.put(\"nickname\", comment.getNickname());\n            map.put(\"created\", comment.getCreated());\n            map.put(\"comment\", comment.getComment());\n            map.put(\"rating\", comment.getRating());\n            list.add(map);\n        }\n\n        mCommentsAdapter = new SimpleAdapter(this, list, \n                R.layout.comment_row,\n                new String[] { \"nickname\", \"created\", \"comment\", \"rating\" },\n                new int[] { \n                    R.id.comment_nickname,\n                    R.id.comment_created, \n                    R.id.comment_comment,\n                    R.id.comment_rating,\n                }\n        );\n\n        mCommentsAdapter.setViewBinder(new ViewBinder() {\n            public boolean setViewValue(View view, Object data,\n                    String textRepresentation) {\n                switch (view.getId()) {\n                case R.id.comment_nickname:\n                    TextView nicknameView = (TextView) view;\n                    nicknameView.setText(textRepresentation);\n                    return true;\n                case R.id.comment_created:\n                    TextView createdView = (TextView) view;\n                    createdView.setText(textRepresentation);\n                    return true;\n                case R.id.comment_comment:\n                    TextView commentView = (TextView) view;\n                    commentView.setText(textRepresentation);\n                    return true;\n                case R.id.comment_rating:\n                    RatingBar rateView = (RatingBar) view;\n                    rateView.setRating(Float.parseFloat(textRepresentation));\n                    return true;\n                }\n                return false;\n            }\n        });\n    }\n\n    mSectionedAdapter.removeSection(2);\n    mSectionedAdapter.addSection(2, (String) getText(R.string.comments), mCommentsAdapter);\n    // This is really ugly, but notifyDataSetChanged is crashing on some items...\n    setListAdapter(mSectionedAdapter);\n    //mSectionedAdapter.notifyDataSetChanged();\n}", "path": "src\\com\\markupartist\\iglaset\\activity\\DrinkDetailActivity.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/**\n * Restores the barcode.\n * @param savedInstanceState the saved state\n */\n", "func_signal": "private void restoreBarcode(Bundle savedInstanceState)", "code": "{\n    if (savedInstanceState.containsKey(Intents.EXTRA_BARCODE)) {\n        mBarcode = savedInstanceState.getString(Intents.EXTRA_BARCODE);\n    }\n}", "path": "src\\com\\markupartist\\iglaset\\activity\\DrinkDetailActivity.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/**\n * Update the text showing the selected tags (if any).\n */\n", "func_signal": "private void updateSelectedTagText()", "code": "{\n        TextView numSelectedView = (TextView) findViewById(R.id.tagSearchSelectedText);\n        StringBuilder builder = new StringBuilder();\n        \n        SparseBooleanArray selected = getListView().getCheckedItemPositions();\n        if(0 == selected.size()) {\n        \tbuilder.append(getText(R.string.no_selected_tags));\n        } else {\n        \t// Concatenate the name of the selected tags.\n        \tArrayList<String> selectedList = new ArrayList<String>();\n        \tfor(int i=0; i<selected.size(); ++i) {\n        \t\tif(true == selected.valueAt(i)) {\n        \t\t\tTag tag = (Tag) getListView().getItemAtPosition(selected.keyAt(i));\n        \t\t\tselectedList.add(tag.getName());\n        \t\t}\n        \t}\n        \t\n        \tbuilder.append(Integer.toString(selectedList.size())).append(\" \");\n        \tbuilder.append(selectedList.size() == 1 ? getText(R.string.tag) : getText(R.string.tags)).append(\": \");\n        \tbuilder.append(StringUtils.join(selectedList.toArray(), \", \"));        \t\t\t\n        }\n        \n        numSelectedView.setText(builder.toString());\n}", "path": "src\\com\\markupartist\\iglaset\\activity\\TagActivity.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/**\n * Create and execute a task to fetch the current drink.\n */\n", "func_signal": "private void launchGetDrinkTask(Drink drink)", "code": "{\n    mGetDrinkTask = new GetDrinkTask();\n    mGetDrinkTask.execute(drink.getId());\n}", "path": "src\\com\\markupartist\\iglaset\\activity\\DrinkDetailActivity.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\n    final ErrorReporter reporter = ErrorReporter.getInstance();\n    reporter.checkErrorAndReport(this);\n\n    setContentView(R.layout.start);\n\n    mSearchView = (AutoCompleteTextView) findViewById(R.id.search_text);\n    mSearchView.setAdapter(new AutoCompleteSearchAdapter(this, R.layout.simple_list_row_inverted));\n    mSearchView.setOnEditorActionListener(this);\n\n    ImageButton searchButton = (ImageButton) findViewById(R.id.btn_search);\n    searchButton.setOnClickListener(this);\n    Button scanButton = (Button) findViewById(R.id.btn_scan);\n    scanButton.setOnClickListener(this);\n    Button categoryButton = (Button) findViewById(R.id.btn_lists);\n    categoryButton.setOnClickListener(this);\n    Button recommendationButton = (Button) findViewById(R.id.btn_recommendations);\n    recommendationButton.setOnClickListener(this);\n    Button ratedDrinksButton = (Button) findViewById(R.id.btn_rated_drinks);\n    ratedDrinksButton.setOnClickListener(this);\n}", "path": "src\\com\\markupartist\\iglaset\\activity\\StartActivity.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/**\n * Create and execute a task to fetch the current drink's comments.\n */\n", "func_signal": "private void launchGetCommentsTask(Drink drink)", "code": "{\n    mGetCommentsTask = new GetCommentsTask();\n    mGetCommentsTask.execute(drink);\n}", "path": "src\\com\\markupartist\\iglaset\\activity\\DrinkDetailActivity.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/**\n * Update ListView selection. This is necessary since the ListView will retain the selected\n * items on screen rotation but there's no way of fetching those items from the program.\n * As a result you will see items checked but a call to getListView().getCheckedItemPositions\n * will return an empty list.\n * @param selected Checkbox state before rotation.\n */\n", "func_signal": "private void updateSelected(SparseBooleanArray selected)", "code": "{\n\tfor(int i=0; i<selected.size(); ++i) {\n\t\tgetListView().setItemChecked(\n\t\t\t\tselected.keyAt(i),\n\t\t\t\tselected.valueAt(i));\n\t}\n}", "path": "src\\com\\markupartist\\iglaset\\activity\\TagActivity.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "//www.iglaset.se/articles/%d/comments.xml\";\n", "func_signal": "public ArrayList<Comment> getComments(Drink drink)", "code": "{\n        ArrayList<Comment> comments = null;\n        final HttpGet get = new HttpGet(String.format(COMMENTS_BASE_URI, drink.getId()));\n        HttpEntity entity = null;\n        try {\n            final HttpResponse response = HttpManager.execute(get);\n            entity = response.getEntity();\n            CommentsParser commentsParser = new CommentsParser();\n            comments = commentsParser.parse(entity.getContent());\n        } catch (IOException e) {\n            Log.d(TAG, \"Failed to read data: \" + e.getMessage());\n        }\n        return comments;\n    }", "path": "src\\com\\markupartist\\iglaset\\provider\\CommentsStore.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/**\n * Add a new comment to a drink. This will, unlike Android Market, add\n * an additional comment. It will not overwrite the user's previous one.\n * @param drink Drink to comment.\n * @param comment Comment to add.\n * @param authentication Authentication data.\n * @return Returns true if successful, false otherwise.\n * @throws IOException on connection problem.\n */\n", "func_signal": "public Boolean commentDrink(Drink drink, String comment, AuthStore.Authentication authentication) throws IOException", "code": "{\n\tfinal HttpPost post = new HttpPost(String.format(COMMENT_URI, authentication.v2.token));\n\t\n    ArrayList<NameValuePair> payload = new ArrayList<NameValuePair>(1);\n    payload.add(new BasicNameValuePair(\"comment[article_id]\", String.valueOf(drink.getId())));\n    payload.add(new BasicNameValuePair(\"comment[text]\", comment));\n    \n    try {\n\t\t\tpost.setEntity(new UrlEncodedFormEntity(payload, \"utf-8\"));\n\t\t\tfinal HttpResponse response = HttpManager.execute(post);\n\t        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n\t            return true;\n\t        } else {\n\t            Log.w(TAG, \"Request failed, http status code was not OK.\");\n\t            return false;\n\t        }\n\t\t\t\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t// TODO What to do? :(\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n}", "path": "src\\com\\markupartist\\iglaset\\provider\\DrinksStore.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/**\n * Try to show a dialog which requires that the user is logged in. If the\n * user is logged in then the specified dialog will be shown, otherwise the\n * standard authentication (DIALOG_NOT_AUTHENTICATED) dialog will be shown.\n * @param dialog\n */\n", "func_signal": "private void tryShowAuthenticatedDialog(int dialog)", "code": "{\n\tif(isLoggedIn()) {\n\t\tshowDialog(dialog);\n\t} else {\n\t\tshowDialog(DIALOG_NOT_AUTHENTICATED);\n\t}\n}", "path": "src\\com\\markupartist\\iglaset\\activity\\DrinkDetailActivity.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/**\n * Cancel the getTagsTask if one is running. If the task has not been created or if it's\n * not executing then this will do nothing.\n */\n", "func_signal": "private void cancelGetTagsTask()", "code": "{\n\tif(null != getTagsTask && getTagsTask.getStatus() == AsyncTask.Status.RUNNING) {\n\t\tgetTagsTask.cancel(true);\n\t\tgetTagsTask = null;\n\t}\n}", "path": "src\\com\\markupartist\\iglaset\\activity\\TagActivity.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/**\n * Fins recommendations for the user.\n * @param searchCriteria the search criteria\n * @return list of recommendations\n * @throws IOException on connection problem\n */\n", "func_signal": "public ArrayList<Drink> findRecommendations(\n        RecommendationSearchCriteria searchCriteria)\n            throws IOException", "code": "{\n\n    StringBuilder builder = new StringBuilder(String.format(USER_RECOMMENDATIONS_URI, searchCriteria.getUserId()));\n    builder.append(\"&user_credentials=\").append(searchCriteria.getAuthentication().v2.token);\n    builder.append(\"&page=\").append(searchCriteria.getPage());\n    builder.append(getSortModeParameter(searchCriteria.getSortMode()));\n\n    final HttpGet get = new HttpGet(builder.toString());\n    HttpEntity entity = null;\n\n    final HttpResponse response = HttpManager.execute(get);\n    entity = response.getEntity();\n    DrinksParser drinksParser = new DrinksParser();\n    return drinksParser.parse(entity.getContent());\n}", "path": "src\\com\\markupartist\\iglaset\\provider\\DrinksStore.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/**\n * Find all drinks that the user has rated.\n * @param searchCriteria the search criteria\n * @return list of rated drinks\n * @throws IOException on connection problem\n */\n", "func_signal": "public ArrayList<Drink> findRatedDrinks(RatingSearchCriteria searchCriteria)\n        throws IOException", "code": "{\n\n    StringBuilder builder = new StringBuilder(String.format(USER_RATINGS_URI, searchCriteria.getUserId()));\n    builder.append(\"&user_credentials=\").append(searchCriteria.getAuthentication().v2.token);\n    builder.append(\"&page=\").append(searchCriteria.getPage());\n    builder.append(getSortModeParameter(searchCriteria.getSortMode()));\n    Log.d(TAG, builder.toString());\n\n    final HttpGet get = new HttpGet(builder.toString());\n    HttpEntity entity = null;\n\n    final HttpResponse response = HttpManager.execute(get);\n    entity = response.getEntity();\n    DrinksParser drinksParser = new DrinksParser();\n    return drinksParser.parse(entity.getContent());\n}", "path": "src\\com\\markupartist\\iglaset\\provider\\DrinksStore.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/**\n * Builds a the uri for search from a SearchCriteria\n * @param searchCriteria the search criteria\n * @return the search uri\n */\n", "func_signal": "private String buildSearchUri(SearchCriteria searchCriteria)", "code": "{\n    Log.d(TAG, \"building search uri from \" + searchCriteria);\n      \n\tStringBuilder builder = new StringBuilder();    \t\n    builder.append(ARTICLES_BASE_URI).append(\"?\");\n \n    builder.append(\"page=\").append(searchCriteria.getPage());\n\n    if (!TextUtils.isEmpty(searchCriteria.getQuery()))\n    \tbuilder.append(\"&str=\").append(URLEncoder.encode(searchCriteria.getQuery()));\n    if (searchCriteria.getCategory() > 0)\n    \tbuilder.append(\"&category=\").append(searchCriteria.getCategory());\n    if (searchCriteria.getAuthentication() != null\n            && !TextUtils.isEmpty(searchCriteria.getAuthentication().v2.token))\n    \tbuilder.append(\"&user_credentials=\").append(searchCriteria.getAuthentication().v2.token);\n    \n    builder.append(getSortModeParameter(searchCriteria.getSortMode()));\n\n    ArrayList<Integer> tags = searchCriteria.getTags();\n    if (null != tags && tags.size() > 0) {\n        builder.append(\"&tag_filter=or&tags[]=\");\n        builder.append(StringUtils.join(tags.toArray(), \"&tags[]=\"));\n    }\n    \n    return builder.toString();\n}", "path": "src\\com\\markupartist\\iglaset\\provider\\DrinksStore.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/**\n * Launch an async task to fetch tags assigned to a specified category. If a tag fetch task is\n * already running then that task will get canceled.\n * @param category Category tags to fetch.\n */\n", "func_signal": "private void launchGetTagsTask(int category)", "code": "{\n\tcancelGetTagsTask();\n    getTagsTask = new GetTagsTask();\n    getTagsTask.execute(category);\n}", "path": "src\\com\\markupartist\\iglaset\\activity\\TagActivity.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/**\n * Cancel current GetCommentsTask if it has been created and if it is\n * currently executing.\n */\n", "func_signal": "private void cancelGetCommentsTask()", "code": "{\n\tif(null != mGetCommentsTask && mGetCommentsTask.getStatus() == AsyncTask.Status.RUNNING) {\n\t\tmGetCommentsTask.cancel(true);\n\t\tmGetCommentsTask = null;\n\t}\n}", "path": "src\\com\\markupartist\\iglaset\\activity\\DrinkDetailActivity.java", "repo_name": "johannilsson/iglaset", "stars": 16, "license": "None", "language": "java", "size": 2212}
{"docstring": "/** Constructor. */\n", "func_signal": "public OCMParserTokenManager(SimpleCharStream stream)", "code": "{\n   if (input_stream != null)\n      throw new TokenMgrError(\"ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.\", TokenMgrError.STATIC_LEXER_ERROR);\n   input_stream = stream;\n}", "path": "OCM Compiler\\src\\com\\kissintellignetsystems\\ocm\\compiler\\parser\\OCMParserTokenManager.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "/** Constructor. */\n", "func_signal": "public OCMParserTokenManager(SimpleCharStream stream, int lexState)", "code": "{\n   this(stream);\n   SwitchTo(lexState);\n}", "path": "OCM Compiler\\src\\com\\kissintellignetsystems\\ocm\\compiler\\parser\\OCMParserTokenManager.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "/** Constructor with message. */\n", "func_signal": "public ParseException(String message)", "code": "{\n  super(message);\n  specialConstructor = false;\n}", "path": "OCM Compiler\\src\\com\\kissintellignetsystems\\ocm\\compiler\\parser\\ParseException.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "/**\n * Used to convert raw characters to their escaped version\n * when these raw version cannot be used as part of an ASCII\n * string literal.\n */\n", "func_signal": "protected String add_escapes(String str)", "code": "{\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n      switch (str.charAt(i))\n      {\n         case 0 :\n            continue;\n         case '\\b':\n            retval.append(\"\\\\b\");\n            continue;\n         case '\\t':\n            retval.append(\"\\\\t\");\n            continue;\n         case '\\n':\n            retval.append(\"\\\\n\");\n            continue;\n         case '\\f':\n            retval.append(\"\\\\f\");\n            continue;\n         case '\\r':\n            retval.append(\"\\\\r\");\n            continue;\n         case '\\\"':\n            retval.append(\"\\\\\\\"\");\n            continue;\n         case '\\'':\n            retval.append(\"\\\\\\'\");\n            continue;\n         case '\\\\':\n            retval.append(\"\\\\\\\\\");\n            continue;\n         default:\n            if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n               String s = \"0000\" + Integer.toString(ch, 16);\n               retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n            } else {\n               retval.append(ch);\n            }\n            continue;\n      }\n    }\n    return retval.toString();\n }", "path": "OCM Compiler\\src\\com\\kissintellignetsystems\\ocm\\compiler\\parser\\ParseException.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "/**\n * This constructor is used by the method \"generateParseException\"\n * in the generated parser.  Calling this constructor generates\n * a new object of this type with the fields \"currentToken\",\n * \"expectedTokenSequences\", and \"tokenImage\" set.  The boolean\n * flag \"specialConstructor\" is also set to true to indicate that\n * this constructor was used to create this object.\n * This constructor calls its super class with the empty string\n * to force the \"toString\" method of parent class \"Throwable\" to\n * print the error message in the form:\n *     ParseException: <result of getMessage>\n */\n", "func_signal": "public ParseException(Token currentTokenVal,\n                      int[][] expectedTokenSequencesVal,\n                      String[] tokenImageVal\n                     )", "code": "{\n  super(\"\");\n  specialConstructor = true;\n  currentToken = currentTokenVal;\n  expectedTokenSequences = expectedTokenSequencesVal;\n  tokenImage = tokenImageVal;\n}", "path": "OCM Compiler\\src\\com\\kissintellignetsystems\\ocm\\compiler\\parser\\ParseException.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "/** Get the next Token. */\n", "func_signal": "public static Token getNextToken()", "code": "{\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   switch(curLexState)\n   {\n     case 0:\n       try { input_stream.backup(0);\n          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)\n             curChar = input_stream.BeginToken();\n       }\n       catch (java.io.IOException e1) { continue EOFLoop; }\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_0();\n       break;\n     case 1:\n       jjmatchedKind = 0x7fffffff;\n       jjmatchedPos = 0;\n       curPos = jjMoveStringLiteralDfa0_1();\n       if (jjmatchedPos == 0 && jjmatchedKind > 7)\n       {\n          jjmatchedKind = 7;\n       }\n       break;\n   }\n     if (jjmatchedKind != 0x7fffffff)\n     {\n        if (jjmatchedPos + 1 < curPos)\n           input_stream.backup(curPos - jjmatchedPos - 1);\n        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n        {\n           matchedToken = jjFillToken();\n       if (jjnewLexState[jjmatchedKind] != -1)\n         curLexState = jjnewLexState[jjmatchedKind];\n           return matchedToken;\n        }\n        else\n        {\n         if (jjnewLexState[jjmatchedKind] != -1)\n           curLexState = jjnewLexState[jjmatchedKind];\n           continue EOFLoop;\n        }\n     }\n     int error_line = input_stream.getEndLine();\n     int error_column = input_stream.getEndColumn();\n     String error_after = null;\n     boolean EOFSeen = false;\n     try { input_stream.readChar(); input_stream.backup(1); }\n     catch (java.io.IOException e1) {\n        EOFSeen = true;\n        error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n        if (curChar == '\\n' || curChar == '\\r') {\n           error_line++;\n           error_column = 0;\n        }\n        else\n           error_column++;\n     }\n     if (!EOFSeen) {\n        input_stream.backup(1);\n        error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n     }\n     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n  }\n}", "path": "OCM Compiler\\src\\com\\kissintellignetsystems\\ocm\\compiler\\parser\\OCMParserTokenManager.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "/* A definite node is constructed from a specified number of\n   children.  That number of nodes are popped from the stack and\n   made the children of the definite node.  Then the definite node\n   is pushed on to the stack. */\n", "func_signal": "public void closeNodeScope(Node n, int num)", "code": "{\n  mk = ((Integer)marks.remove(marks.size()-1)).intValue();\n  while (num-- > 0) {\n    Node c = popNode();\n    c.jjtSetParent(n);\n    n.jjtAddChild(c, num);\n  }\n  n.jjtClose();\n  pushNode(n);\n  node_created = true;\n}", "path": "OCM Compiler\\src\\com\\kissintellignetsystems\\ocm\\compiler\\parser\\JJTOCMParserState.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "/* A conditional node is constructed if its condition is true.  All\n   the nodes that have been pushed since the node was opened are\n   made children of the conditional node, which is then pushed\n   on to the stack.  If the condition is false the node is not\n   constructed and they are left on the stack. */\n", "func_signal": "public void closeNodeScope(Node n, boolean condition)", "code": "{\n  if (condition) {\n    int a = nodeArity();\n    mk = ((Integer)marks.remove(marks.size()-1)).intValue();\n    while (a-- > 0) {\n      Node c = popNode();\n      c.jjtSetParent(n);\n      n.jjtAddChild(c, a);\n    }\n    n.jjtClose();\n    pushNode(n);\n    node_created = true;\n  } else {\n    mk = ((Integer)marks.remove(marks.size()-1)).intValue();\n    node_created = false;\n  }\n}", "path": "OCM Compiler\\src\\com\\kissintellignetsystems\\ocm\\compiler\\parser\\JJTOCMParserState.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "/**\n * Constructs a new token for the specified Image and Kind.\n */\n", "func_signal": "public Token(int kind, String image)", "code": "{\n   this.kind = kind;\n   this.image = image;\n}", "path": "OCM Compiler\\src\\com\\kissintellignetsystems\\ocm\\compiler\\parser\\Token.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "//Index Accessor Methods\n", "func_signal": "public void delete() throws IllegalArgumentException, NotFoundException, TException, Exception", "code": "{\n\tKeyspace keyspace = null;\n\t\t\n\ttry\n\t{\n\t\t//Get the Key Space from the Connection Pool\n\t\tkeyspace = connection.borrowKeySpace();\n\t\t\t\n\n\t\t//Delete the other side of all the Many 2 Many relationships\n\t\tEnumeration<String> enumeration = null;\n\t\t\n\n\t\t//Make sure the column is recently loaded\n\t\tloadUsers();\n\n\t\tenumeration = users.getColumns().keys();\n\t\t\t\n\t\twhile (enumeration.hasMoreElements())\n\t\t{\n\t\t\t//The Foreign Key\n\t\t\tColumnPath columnPath = new ColumnPath(\"Users\");\n\t\t\tcolumnPath.setSuper_column(usersAccountsForeignNameBytes);\n\t\t\tcolumnPath.column = fromString(accountID);\n\n\t\t\t//Remove the foreign key\n\t\t\tkeyspace.remove(enumeration.nextElement(), columnPath);\n\t\t}\n\n\t\t//Delete the actual row\n\t\tkeyspace.remove(accountID, new ColumnPath(\"Accounts\"));\n\t\t\n\t}\n\tfinally\n\t{\n\t\tconnection.returnKeySpace(keyspace);\n\t}\n}", "path": "OCM Compiler\\Account.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "/**\n * Returns a new Token object, by default. However, if you want, you\n * can create and return subclass objects based on the value of ofKind.\n * Simply add the cases to the switch for all those special cases.\n * For example, if you have a subclass of Token called IDToken that\n * you want to create if ofKind is ID, simply add something like :\n *\n *    case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\n", "func_signal": "public static Token newToken(int ofKind, String image)", "code": "{\n   switch(ofKind)\n   {\n     default : return new Token(ofKind, image);\n   }\n}", "path": "OCM Compiler\\src\\com\\kissintellignetsystems\\ocm\\compiler\\parser\\Token.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "/** Switch to specified lex state. */\n", "func_signal": "static public void SwitchTo(int lexState)", "code": "{\n   if (lexState >= 2 || lexState < 0)\n      throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);\n   else\n      curLexState = lexState;\n}", "path": "OCM Compiler\\src\\com\\kissintellignetsystems\\ocm\\compiler\\parser\\OCMParserTokenManager.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "/* Pushes a node on to the stack. */\n", "func_signal": "public void pushNode(Node n)", "code": "{\n  nodes.add(n);\n  ++sp;\n}", "path": "OCM Compiler\\src\\com\\kissintellignetsystems\\ocm\\compiler\\parser\\JJTOCMParserState.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "/* Returns the node on the top of the stack, and remove it from the\n   stack.  */\n", "func_signal": "public Node popNode()", "code": "{\n  if (--sp < mk) {\n    mk = ((Integer)marks.remove(marks.size()-1)).intValue();\n  }\n  return (Node)nodes.remove(nodes.size()-1);\n}", "path": "OCM Compiler\\src\\com\\kissintellignetsystems\\ocm\\compiler\\parser\\JJTOCMParserState.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "/** Reinitialise parser. */\n", "func_signal": "static public void ReInit(SimpleCharStream stream, int lexState)", "code": "{\n   ReInit(stream);\n   SwitchTo(lexState);\n}", "path": "OCM Compiler\\src\\com\\kissintellignetsystems\\ocm\\compiler\\parser\\OCMParserTokenManager.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "//Index Accessor Methods\n", "func_signal": "public static SampleUserColumnFamily tryGetFromEmail(String key, OCMConnection connection) throws Exception", "code": "{\n\tKeyspace keyspace = null;\n\t\t\n\ttry\n\t{\n\t\tkeyspace = connection.borrowKeySpace();\n\t\t\t\n\t\t//Use the index\n\t\tColumnPath columnPath = new ColumnPath(\"UsersByEmail\");\n\t\tcolumnPath.column = fromString(\"key\");\n\t\t\n\t\tColumn keyCol = keyspace.getColumn(key, columnPath);\n\n\t\tString index = toString(keyCol.getValue());\n\t\t\t\n\t\t//Create the new column\n\t\treturn new SampleUserColumnFamily(connection, index);\n\t}\n\n\tfinally\n\t{\n\t\tconnection.returnKeySpace(keyspace);\n\t}\n}", "path": "Output Languages\\Java\\TestHarness\\src\\com\\kissintelligentsystems\\ocm\\java\\sample\\generated\\SampleUserColumnFamily.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "/**\n * The following constructors are for use by you for whatever\n * purpose you can think of.  Constructing the exception in this\n * manner makes the exception behave in the normal way - i.e., as\n * documented in the class \"Throwable\".  The fields \"errorToken\",\n * \"expectedTokenSequences\", and \"tokenImage\" do not contain\n * relevant information.  The JavaCC generated code does not use\n * these constructors.\n */\n", "func_signal": "public ParseException()", "code": "{\n  super();\n  specialConstructor = false;\n}", "path": "OCM Compiler\\src\\com\\kissintellignetsystems\\ocm\\compiler\\parser\\ParseException.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "//Called by the OCM Cassandra Table wrapper, when an update has been applied\n", "func_signal": "public void clearPendingUpdates()", "code": "{\n\t//Clear all updated columns\n\tupdatedColumns.clear();\n\n\t//Clear all deleted columns\n\tdeletedColumns.clear();\n}", "path": "Output Languages\\Java\\Base Library\\src\\com\\kissintelligentsystems\\ocm\\java\\DynamicSuperFamily.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "/** Reinitialise parser. */\n", "func_signal": "static public void ReInit(SimpleCharStream stream)", "code": "{\n   jjmatchedPos = jjnewStateCnt = 0;\n   curLexState = defaultLexState;\n   input_stream = stream;\n   ReInitRounds();\n}", "path": "OCM Compiler\\src\\com\\kissintellignetsystems\\ocm\\compiler\\parser\\OCMParserTokenManager.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "//Index Accessor Methods\n", "func_signal": "public void delete() throws IllegalArgumentException, NotFoundException, TException, Exception", "code": "{\n\tKeyspace keyspace = null;\n\t\t\n\ttry\n\t{\n\t\t//Get the Key Space from the Connection Pool\n\t\tkeyspace = connection.borrowKeySpace();\n\t\t\t\n\n\t\t//Delete the other side of all the Many 2 Many relationships\n\t\tEnumeration<String> enumeration = null;\n\t\t\n\n\t\t//Make sure the column is recently loaded\n\t\tloadUsers();\n\n\t\tenumeration = users.getColumns().keys();\n\t\t\t\n\t\twhile (enumeration.hasMoreElements())\n\t\t{\n\t\t\t//The Foreign Key\n\t\t\tColumnPath columnPath = new ColumnPath(\"Users\");\n\t\t\tcolumnPath.setSuper_column(usersAccountsForeignNameBytes);\n\t\t\tcolumnPath.column = fromString(accountID);\n\n\t\t\t//Remove the foreign key\n\t\t\tkeyspace.remove(enumeration.nextElement(), columnPath);\n\t\t}\n\n\t\t//Delete the actual row\n\t\tkeyspace.remove(accountID, new ColumnPath(\"Accounts\"));\n\t\t\n\t}\n\tfinally\n\t{\n\t\tconnection.returnKeySpace(keyspace);\n\t}\n}", "path": "Output Languages\\Java\\TestHarness\\src\\com\\kissintelligentsystems\\ocm\\java\\sample\\generated\\Account.java", "repo_name": "charliem/OCM", "stars": 20, "license": "apache-2.0", "language": "java", "size": 18808}
{"docstring": "/**\n * Get the long value associated with a key. If the number value is too\n * long for a long, it will be clipped.\n *\n * @param key   A key string.\n * @return      The long value.\n * @throws   JSONException if the key is not found or if the value cannot\n *  be converted to a long.\n */\n", "func_signal": "public long getLong(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    return o instanceof Number ?\n            ((Number)o).longValue() : (long)getDouble(key);\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Put a key/double pair in the JSONObject.\n *\n * @param key   A key string.\n * @param value A double which is the value.\n * @return this.\n * @throws JSONException If the key is null or if the number is invalid.\n */\n", "func_signal": "public JSONObject put(String key, double value) throws JSONException", "code": "{\n    put(key, new Double(value));\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Put a key/value pair in the JSONObject. If the value is null,\n * then the key will be removed from the JSONObject if it is present.\n * @param key   A key string.\n * @param value An object which is the value. It should be of one of these\n *  types: Boolean, Double, Integer, JSONArray, JSONObject, Long, String,\n *  or the JSONObject.NULL object.\n * @return this.\n * @throws JSONException If the value is non-finite number\n *  or if the key is null.\n */\n", "func_signal": "public JSONObject put(String key, Object value) throws JSONException", "code": "{\n    if (key == null) {\n        throw new JSONException(\"Null key.\");\n    }\n    if (value != null) {\n        testValidity(value);\n        this.map.put(key, value);\n    } else {\n        remove(key);\n    }\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Append values to the array under a key. If the key does not exist in the\n * JSONObject, then the key is put in the JSONObject with its value being a\n * JSONArray containing the value parameter. If the key was already\n * associated with a JSONArray, then the value parameter is appended to it.\n * @param key   A key string.\n * @param value An object to be accumulated under the key.\n * @return this.\n * @throws JSONException If the key is null or if the current value\n *  associated with the key is not a JSONArray.\n */\n", "func_signal": "public JSONObject append(String key, Object value)\n        throws JSONException", "code": "{\n    testValidity(value);\n    Object o = opt(key);\n    if (o == null) {\n        put(key, new JSONArray().put(value));\n    } else if (o instanceof JSONArray) {\n        put(key, ((JSONArray)o).put(value));\n    } else {\n        throw new JSONException(\"JSONObject[\" + key +\n                \"] is not a JSONArray.\");\n    }\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Get the double value associated with a key.\n * @param key   A key string.\n * @return      The numeric value.\n * @throws JSONException if the key is not found or\n *  if the value is not a Number object and cannot be converted to a number.\n */\n", "func_signal": "public double getDouble(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    try {\n        return o instanceof Number ?\n            ((Number)o).doubleValue() :\n            Double.valueOf((String)o).doubleValue();\n    } catch (Exception e) {\n        throw new JSONException(\"JSONObject[\" + quote(key) +\n            \"] is not a number.\");\n    }\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Get an optional JSONObject associated with a key.\n * It returns null if there is no such key, or if its value is not a\n * JSONObject.\n *\n * @param key   A key string.\n * @return      A JSONObject which is the value.\n */\n", "func_signal": "public JSONObject optJSONObject(String key)", "code": "{\n    Object o = opt(key);\n    return o instanceof JSONObject ? (JSONObject)o : null;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Get an optional string associated with a key.\n * It returns the defaultValue if there is no such key.\n *\n * @param key   A key string.\n * @param defaultValue     The default.\n * @return      A string which is the value.\n */\n", "func_signal": "public String optString(String key, String defaultValue)", "code": "{\n    Object o = opt(key);\n    return o != null ? o.toString() : defaultValue;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Put a key/long pair in the JSONObject.\n *\n * @param key   A key string.\n * @param value A long which is the value.\n * @return this.\n * @throws JSONException If the key is null.\n */\n", "func_signal": "public JSONObject put(String key, long value) throws JSONException", "code": "{\n    put(key, new Long(value));\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Get the boolean value associated with a key.\n *\n * @param key   A key string.\n * @return      The truth.\n * @throws   JSONException\n *  if the value is not a Boolean or the String \"true\" or \"false\".\n */\n", "func_signal": "public boolean getBoolean(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    if (o.equals(Boolean.FALSE) ||\n            (o instanceof String &&\n            ((String)o).equalsIgnoreCase(\"false\"))) {\n        return false;\n    } else if (o.equals(Boolean.TRUE) ||\n            (o instanceof String &&\n            ((String)o).equalsIgnoreCase(\"true\"))) {\n        return true;\n    }\n    throw new JSONException(\"JSONObject[\" + quote(key) +\n            \"] is not a Boolean.\");\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Produce a JSONArray containing the names of the elements of this\n * JSONObject.\n * @return A JSONArray containing the key strings, or null if the JSONObject\n * is empty.\n */\n", "func_signal": "public JSONArray names()", "code": "{\n    JSONArray ja = new JSONArray();\n    Iterator  keys = keys();\n    while (keys.hasNext()) {\n        ja.put(keys.next());\n    }\n    return ja.length() == 0 ? null : ja;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Get an optional boolean associated with a key.\n * It returns the defaultValue if there is no such key, or if it is not\n * a Boolean or the String \"true\" or \"false\" (case insensitive).\n *\n * @param key              A key string.\n * @param defaultValue     The default.\n * @return      The truth.\n */\n", "func_signal": "public boolean optBoolean(String key, boolean defaultValue)", "code": "{\n    try {\n        return getBoolean(key);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Accumulate values under a key. It is similar to the put method except\n * that if there is already an object stored under the key then a\n * JSONArray is stored under the key to hold all of the accumulated values.\n * If there is already a JSONArray, then the new value is appended to it.\n * In contrast, the put method replaces the previous value.\n * @param key   A key string.\n * @param value An object to be accumulated under the key.\n * @return this.\n * @throws JSONException If the value is an invalid number\n *  or if the key is null.\n */\n", "func_signal": "public JSONObject accumulate(String key, Object value)\n        throws JSONException", "code": "{\n    testValidity(value);\n    Object o = opt(key);\n    if (o == null) {\n        put(key, value instanceof JSONArray ?\n                new JSONArray().put(value) :\n                value);\n    } else if (o instanceof JSONArray) {\n        ((JSONArray)o).put(value);\n    } else {\n        put(key, new JSONArray().put(o).put(value));\n    }\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Put a key/int pair in the JSONObject.\n *\n * @param key   A key string.\n * @param value An int which is the value.\n * @return this.\n * @throws JSONException If the key is null.\n */\n", "func_signal": "public JSONObject put(String key, int value) throws JSONException", "code": "{\n    put(key, new Integer(value));\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Make a JSON text of this JSONObject. For compactness, no whitespace\n * is added. If this would not result in a syntactically correct JSON text,\n * then null will be returned instead.\n * <p>\n * Warning: This method assumes that the data structure is acyclical.\n *\n * @return a printable, displayable, portable, transmittable\n *  representation of the object, beginning\n *  with <code>{</code>&nbsp;<small>(left brace)</small> and ending\n *  with <code>}</code>&nbsp;<small>(right brace)</small>.\n */\n", "func_signal": "public String toString()", "code": "{\n    try {\n        Iterator     keys = keys();\n        StringBuffer sb = new StringBuffer(\"{\");\n\n        while (keys.hasNext()) {\n            if (sb.length() > 1) {\n                sb.append(',');\n            }\n            Object o = keys.next();\n            sb.append(quote(o.toString()));\n            sb.append(':');\n            sb.append(valueToString(this.map.get(o)));\n        }\n        sb.append('}');\n        return sb.toString();\n    } catch (Exception e) {\n        return null;\n    }\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Construct JSONObject from the given bean. This will also create JSONObject\n * for all internal object (List, Map, Inner Objects) of the provided bean.\n * \n * -- See Documentation of JSONObject(Object bean) also.\n * \n * @param bean An object that has getter methods that should be used\n * to make a JSONObject.\n * @param includeSuperClass - Tell whether to include the super class properties.\n */\n", "func_signal": "public JSONObject(Object bean, boolean includeSuperClass)", "code": "{\n\tthis();\n    populateInternalMap(bean, includeSuperClass);\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Put a key/value pair in the JSONObject, where the value will be a\n * JSONArray which is produced from a Collection.\n * @param key   A key string.\n * @param value A Collection value.\n * @return      this.\n * @throws JSONException\n */\n", "func_signal": "public JSONObject put(String key, Collection value) throws JSONException", "code": "{\n    put(key, new JSONArray(value));\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Write the contents of the JSONObject as JSON text to a writer.\n * For compactness, no whitespace is added.\n * <p>\n * Warning: This method assumes that the data structure is acyclical.\n *\n * @return The writer.\n * @throws JSONException\n */\n", "func_signal": "public Writer write(Writer writer) throws JSONException", "code": "{\n   try {\n       boolean  b = false;\n       Iterator keys = keys();\n       writer.write('{');\n\n       while (keys.hasNext()) {\n           if (b) {\n               writer.write(',');\n           }\n           Object k = keys.next();\n           writer.write(quote(k.toString()));\n           writer.write(':');\n           Object v = this.map.get(k);\n           if (v instanceof JSONObject) {\n               ((JSONObject)v).write(writer);\n           } else if (v instanceof JSONArray) {\n               ((JSONArray)v).write(writer);\n           } else {\n               writer.write(valueToString(v));\n           }\n           b = true;\n       }\n       writer.write('}');\n       return writer;\n   } catch (IOException e) {\n       throw new JSONException(e);\n   }\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Produce a string from a Number.\n * @param  n A Number\n * @return A String.\n * @throws JSONException If n is a non-finite number.\n */\n", "func_signal": "static public String numberToString(Number n)\n        throws JSONException", "code": "{\n    if (n == null) {\n        throw new JSONException(\"Null pointer\");\n    }\n    testValidity(n);\n\n// Shave off trailing zeros and decimal point, if possible.\n\n    String s = n.toString();\n    if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {\n        while (s.endsWith(\"0\")) {\n            s = s.substring(0, s.length() - 1);\n        }\n        if (s.endsWith(\".\")) {\n            s = s.substring(0, s.length() - 1);\n        }\n    }\n    return s;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Produce a string in double quotes with backslash sequences in all the\n * right places. A backslash will be inserted within </, allowing JSON\n * text to be delivered in HTML. In JSON text, a string cannot contain a\n * control character or an unescaped quote or backslash.\n * @param string A String\n * @return  A String correctly formatted for insertion in a JSON text.\n */\n", "func_signal": "public static String quote(String string)", "code": "{\n    if (string == null || string.length() == 0) {\n        return \"\\\"\\\"\";\n    }\n\n    char         b;\n    char         c = 0;\n    int          i;\n    int          len = string.length();\n    StringBuffer sb = new StringBuffer(len + 4);\n    String       t;\n\n    sb.append('\"');\n    for (i = 0; i < len; i += 1) {\n        b = c;\n        c = string.charAt(i);\n        switch (c) {\n        case '\\\\':\n        case '\"':\n            sb.append('\\\\');\n            sb.append(c);\n            break;\n        case '/':\n            if (b == '<') {\n                sb.append('\\\\');\n            }\n            sb.append(c);\n            break;\n        case '\\b':\n            sb.append(\"\\\\b\");\n            break;\n        case '\\t':\n            sb.append(\"\\\\t\");\n            break;\n        case '\\n':\n            sb.append(\"\\\\n\");\n            break;\n        case '\\f':\n            sb.append(\"\\\\f\");\n            break;\n        case '\\r':\n            sb.append(\"\\\\r\");\n            break;\n        default:\n            if (c < ' ' || (c >= '\\u0080' && c < '\\u00a0') ||\n                           (c >= '\\u2000' && c < '\\u2100')) {\n                t = \"000\" + Integer.toHexString(c);\n                sb.append(\"\\\\u\").append(t.substring(t.length() - 4));\n            } else {\n                sb.append(c);\n            }\n        }\n    }\n    sb.append('\"');\n    return sb.toString();\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * Get the JSONArray value associated with a key.\n *\n * @param key   A key string.\n * @return      A JSONArray which is the value.\n * @throws   JSONException if the key is not found or\n *  if the value is not a JSONArray.\n */\n", "func_signal": "public JSONArray getJSONArray(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    if (o instanceof JSONArray) {\n        return (JSONArray)o;\n    }\n    throw new JSONException(\"JSONObject[\" + quote(key) +\n            \"] is not a JSONArray.\");\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "jrecursive/protograph", "stars": 22, "license": "apache-2.0", "language": "java", "size": 9188}
{"docstring": "/**\n * constructor\n * @param parent\n * @param id\n */\n", "func_signal": "public IconContextMenu(Activity parent, int id)", "code": "{\n\tthis.parentActivity = parent;\n\tthis.dialogId = id;\n\t\n\tmenuAdapter = new IconMenuAdapter(parentActivity);\n}", "path": "src\\com\\mos7af\\mp3quran\\IconContextMenu.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "/**\n * When user stops moving the progress hanlder\n * */\n", "func_signal": "@Override\n    public void onStopTrackingTouch(SeekBar seekBar)", "code": "{\n\t\n\t\n\t\n\tmHandler.removeCallbacks(mUpdateTimeTask);\n\tif(isActive)\n\t{\n\t\tint totalDuration = mp.getDuration();\n\t\tint currentPosition = utils.progressToTimer(seekBar.getProgress(), totalDuration);\n\t\t\n\t\t// forward or backward to certain seconds\n\t\tmp.seekTo(currentPosition);\n\t\t\n\t\t// update timer progress again\n\t\tupdateProgressBar();\n\t}\n\telse\n\t{\n\t\t\n\t\tplaySong(currentSongIndex);\n\t}\n    }", "path": "src\\com\\mos7af\\mp3quran\\PlayerActivity.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "/**\n * Getting XML DOM element\n * @param XML string\n * */\n", "func_signal": "public Document getDomElement(String xml)", "code": "{\n\tDocument doc = null;\n\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\ttry {\n\n\t\tDocumentBuilder db = dbf.newDocumentBuilder();\n\n\t\tInputSource is = new InputSource();\n\t        is.setCharacterStream(new StringReader(xml));\n\t        doc = db.parse(is); \n\n\t\t} catch (ParserConfigurationException e) {\n\t\t\tLog.e(\"Error: \", e.getMessage());\n\t\t\treturn null;\n\t\t} catch (SAXException e) {\n\t\t\tLog.e(\"Error: \", e.getMessage());\n            return null;\n\t\t} catch (IOException e) {\n\t\t\tLog.e(\"Error: \", e.getMessage());\n\t\t\treturn null;\n\t\t}\n\n        return doc;\n}", "path": "src\\com\\mos7af\\mp3quran\\XMLParser.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "/**\n * public constructor\n * @param res\n * \t\t\tresource handler\n * @param title\n * \t\t\tmenu item title\n * @param imageResourceId\n * \t\t\tid of icon in resource\n * @param actionTag\n * \t\t\tindicate action of menu item\n */\n", "func_signal": "public IconContextMenuItem(Resources res, CharSequence title,\n\t\tint imageResourceId, int actionTag)", "code": "{\n\ttext = title;\n\tif (imageResourceId != -1) {\n\t\timage = res.getDrawable(imageResourceId);\n\t} else {\n\t\timage = null;\n\t}\n\tthis.actionTag = actionTag;\n}", "path": "src\\com\\mos7af\\mp3quran\\IconContextMenu.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "/** Getting node value\n  * @param elem element\n  */\n", "func_signal": "public final String getElementValue( Node elem )", "code": "{\n     Node child;\n     if( elem != null){\n         if (elem.hasChildNodes()){\n             for( child = elem.getFirstChild(); child != null; child = child.getNextSibling() ){\n                 if( child.getNodeType() == Node.TEXT_NODE  ){\n                     return child.getNodeValue();\n                 }\n             }\n         }\n     }\n     return \"\";\n }", "path": "src\\com\\mos7af\\mp3quran\\XMLParser.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "/**\n * Getting all labels\n * returns list of labels\n * */\n", "func_signal": "public ArrayList<HashMap<String, String>> getAllPlaylists()", "code": "{\n\t\t\n\tArrayList<HashMap<String, String>> surasList = new ArrayList<HashMap<String, String>>();\n\t\n    // Select All Query\n    String selectQuery = \"SELECT  * FROM \" + TABLE_LABELS;\n \n    SQLiteDatabase db = this.getReadableDatabase();\n    Cursor cursor = db.rawQuery(selectQuery, null);\n \n    // looping through all rows and adding to list\n    if (cursor.moveToFirst()) {\n        do {\n        \t\n        \tHashMap<String, String> map = new HashMap<String, String>();\n        \t\n    \t\tmap.put(\"playlistId\", cursor.getString(0));\n    \t\tmap.put(\"playlistName\", cursor.getString(1));\n    \t\n    \t\tsurasList.add(map);\n        } while (cursor.moveToNext());\n    }\n    \n    // closing connection\n    cursor.close();\n    db.close();\n\t\n\t// returning lables\n\treturn surasList;\n}", "path": "src\\com\\mos7af\\mp3quran\\DatabaseHandler.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "/**\n * On Song Playing completed\n * if repeat is ON play same song again\n * if shuffle is ON play random song\n * */\n", "func_signal": "@Override\npublic void onCompletion(MediaPlayer arg0)", "code": "{\n\t\n\t// check for repeat is ON or OFF\n\tif(isRepeat){\n\t\t// repeat is on play same song again\n\t\tplaySong(currentSongIndex);\n\t} else if(isShuffle){\n\t\t// shuffle is on - play a random song\n\t\tRandom rand = new Random();\n\t\tcurrentSongIndex = rand.nextInt((songsList.size() - 1) - 0 + 1) + 0;\n\t\tplaySong(currentSongIndex);\n\t} else{\n\t\t// no repeat or shuffle ON - play next song\n\t\tif(currentSongIndex < (songsList.size() - 1)){\n\t\t\tplaySong(currentSongIndex + 1);\n\t\t\tcurrentSongIndex = currentSongIndex + 1;\n\t\t}else{\n\t\t\t// play first song\n\t\t\tplaySong(0);\n\t\t\tcurrentSongIndex = 0;\n\t\t}\n\t}\n}", "path": "src\\com\\mos7af\\mp3quran\\PlayerActivity.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "//decodes image and scales it to reduce memory consumption\n", "func_signal": "private Bitmap decodeFile(File f)", "code": "{\n    try {\n        //decode image size\n        BitmapFactory.Options o = new BitmapFactory.Options();\n        o.inJustDecodeBounds = true;\n        BitmapFactory.decodeStream(new FileInputStream(f),null,o);\n        \n        //Find the correct scale value. It should be the power of 2.\n        final int REQUIRED_SIZE=70;\n        int width_tmp=o.outWidth, height_tmp=o.outHeight;\n        int scale=1;\n        while(true){\n            if(width_tmp/2<REQUIRED_SIZE || height_tmp/2<REQUIRED_SIZE)\n                break;\n            width_tmp/=2;\n            height_tmp/=2;\n            scale*=2;\n        }\n        \n        //decode with inSampleSize\n        BitmapFactory.Options o2 = new BitmapFactory.Options();\n        o2.inSampleSize=scale;\n        return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);\n    } catch (FileNotFoundException e) {}\n    return null;\n}", "path": "src\\com\\mos7af\\mp3quran\\ImageLoader.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\t\n    super.onCreate(savedInstanceState);\n    super.setContentView(R.layout.ly_suras);\n    listView = (ListView)findViewById(R.id.list);\n   // onResume1();\n    mProgressDialog = new ProgressDialog(this);\n    mProgressDialog.setMessage(\"\");\n    mProgressDialog.setIndeterminate(false);\n    mProgressDialog.setMax(100);\n    mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n    Resources res = getResources();\n    //init the menu\n      iconContextMenu = new IconContextMenu(this, CONTEXT_MENU_ID);\n      iconContextMenu.addItem(res, \"play only\", R.drawable.ic_1, MENU_ITEM_1_ACTION);\n      iconContextMenu.addItem(res, \"play\", R.drawable.ic_2, MENU_ITEM_2_ACTION);\n      iconContextMenu.addItem(res, \"Add to playlist\", R.drawable.ic_1, MENU_ITEM_3_ACTION);\n      iconContextMenu.addItem(res, \"download to play locally\", R.drawable.ic_3, MENU_ITEM_4_ACTION);\n      \n      \n      //set onclick listener for context menu\n      iconContextMenu.setOnClickListener(new IconContextMenu.IconContextMenuOnClickListener() {\n \t\t\t@Override\n \t\t\tpublic void onClick(int menuId) {\n \t\t\t\tSuraslistManager suraslistManager=SuraslistManager.getInstance();\n \t\t\t\tHashMap<String, String> _sura;\n \t\t\t\tMP3Quran mP3Quran;\n \t\t\t\tswitch(menuId) {\n \t\t\t\tcase MENU_ITEM_1_ACTION:\n \t\t\t\t\t_sura = surasList.get(selecteduraIndex);\n \t\t\t\t\tsuraslistManager.deletAllSuras();\n \t\t\t\t\tsuraslistManager.AddNewSura(_sura);\n \t\t\t\t\tMP3Quran.tabIndex =1;\n \t\t\t\t\tmP3Quran= (MP3Quran)getParent();\n \t\t\t\t\tmP3Quran.loadMediaPlayer(0);\n \t\t\t\t\tbreak;\n \t\t\t\tcase MENU_ITEM_2_ACTION:\n \t\t\t\t\t_sura = surasList.get(selecteduraIndex);\n \t\t\t\t\tsuraslistManager.AddNewSuraAt(0,_sura);\n \t\t\t\t\tMP3Quran.tabIndex =1;\n \t\t\t\t\tmP3Quran= (MP3Quran)getParent();\n \t\t\t\t\tmP3Quran.loadMediaPlayer(0);\n \t\t\t\t\tbreak;\n \t\t\t\tcase MENU_ITEM_3_ACTION:\n \t\t\t\t\tshowAddToPlaylist();\n \t\t\t\t\tbreak;\n \t\t\t\tcase MENU_ITEM_4_ACTION:\n \t\t\t\t\t_sura = surasList.get(selecteduraIndex);\n \t\t\t\t\tString localPath = Environment.getExternalStorageDirectory()+\"/MP3Quran/\"+_sura.get(\"reciterId\");\n \t\t\t\t\tFile file = new File(localPath,_sura.get(\"suraId\")+ \".mp3\" );\n \t\t\t\t\tif (file.exists()) {\n \t\t\t\t\t\tShowRenameDialog(_sura);\n \t            \t}else\n \t            \t{\n \t            \t\tDownloadSura(_sura);\n \t            \t}\n \t\t\t\t\tbreak;\n \t\t\t\t\n \t\t\t\t}\n \t\t\t}\n \t\t});\n      db = new DatabaseHandler(getApplicationContext());\n      RelativeLayout relativeclic1 =(RelativeLayout)findViewById(R.id.footer);\n      relativeclic1.setOnClickListener(new View.OnClickListener(){\n          @Override\n          public void onClick(View v){\n        \t  reciter_id = \"-1\";\n        \t  onResume() ;\n          }\n      });\n}", "path": "src\\com\\mos7af\\mp3quran\\SurasActivity.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "/**\n * Function to change progress to timer\n * @param progress - \n * @param totalDuration\n * returns current duration in milliseconds\n * */\n", "func_signal": "public int progressToTimer(int progress, int totalDuration)", "code": "{\n\tint currentDuration = 0;\n\ttotalDuration = (int) (totalDuration / 1000);\n\tcurrentDuration = (int) ((((double)progress) / 100) * totalDuration);\n\t\n\t// return current duration in milliseconds\n\treturn currentDuration * 1000;\n}", "path": "src\\com\\mos7af\\mp3quran\\Utilities.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "/**\n * Receiving song index from playlist view\n * and play the song\n * */\n", "func_signal": "@Override\n    protected void onActivityResult(int requestCode,\n                                     int resultCode, Intent data)", "code": "{\n        super.onActivityResult(requestCode, resultCode, data);\n        if(resultCode == 100){\n         \t currentSongIndex = data.getExtras().getInt(\"songIndex\");\n         \t // play selected song\n             playSong(currentSongIndex);\n        }\n \n    }", "path": "src\\com\\mos7af\\mp3quran\\PlayerActivity.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "// Upgrading database\n", "func_signal": "@Override\npublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)", "code": "{\n    // Drop older table if existed\n    db.execSQL(\"DROP TABLE IF EXISTS \" + TABLE_LABELS);\n \n    // Create tables again\n    onCreate(db);\n}", "path": "src\\com\\mos7af\\mp3quran\\DatabaseHandler.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "/**\n * Create menu\n * @return\n */\n", "func_signal": "public Dialog createMenu(String menuItitle)", "code": "{\n\tfinal AlertDialog.Builder builder = new AlertDialog.Builder(parentActivity);\n        builder.setTitle(menuItitle);\n        builder.setAdapter(menuAdapter, new DialogInterface.OnClickListener() {\n\t\t@Override\n\t\tpublic void onClick(DialogInterface dialoginterface, int i) {\n\t\t\tIconContextMenuItem item = (IconContextMenuItem) menuAdapter.getItem(i);\n\t\t\t\n\t\t\tif (clickHandler != null) {\n\t\t\t\tclickHandler.onClick(item.actionTag);\n\t\t\t}\n\t\t}\n\t});\n\n        builder.setInverseBackgroundForced(true);\n\n        AlertDialog dialog = builder.create();\n        dialog.setOnCancelListener(this);\n        dialog.setOnDismissListener(this);\n        return dialog;\n}", "path": "src\\com\\mos7af\\mp3quran\\IconContextMenu.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "/**\n * Function to get Progress percentage\n * @param currentDuration\n * @param totalDuration\n * */\n", "func_signal": "public int getProgressPercentage(long currentDuration, long totalDuration)", "code": "{\n\tDouble percentage = (double) 0;\n\t\n\tlong currentSeconds = (int) (currentDuration / 1000);\n\tlong totalSeconds = (int) (totalDuration / 1000);\n\t\n\t// calculating percentage\n\tpercentage =(((double)currentSeconds)/totalSeconds)*100;\n\t\n\t// return percentage\n\treturn percentage.intValue();\n}", "path": "src\\com\\mos7af\\mp3quran\\Utilities.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "// @Override\n// public boolean onCreateOptionsMenu(Menu menu)\n// {\n   //  MenuInflater menuInflater = getMenuInflater();\n  //   menuInflater.inflate(R.layout.surasmenu, menu);\n   //  return true;\n //}\n", "func_signal": "@Override\n\tprotected Dialog onCreateDialog(int id)", "code": "{\n\t\tif (id == CONTEXT_MENU_ID) {\n\t\t\treturn iconContextMenu.createMenu(\"Sura\");\n\t\t}\n\t\treturn super.onCreateDialog(id);\n\t}", "path": "src\\com\\mos7af\\mp3quran\\SurasActivity.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "// @Override\n", "func_signal": "public void onResume()", "code": "{\n\t     super.onResume();\n\t     if(SuraslistManager.reciterId!=null && SuraslistManager.reciterId != reciter_id)\n\t     {\n\t    \t loadSuras();\n\t    \n\t     }else\n\t     {\n\t    \t  if( reciter_id !=\"-1\" && surasList!=null && !surasList.isEmpty())\n\t    \t    Toast.makeText(SurasActivity.this,surasList.get(0).get(\"reciterNameAr\")+ \" - \"+surasList.get(0).get(\"reciterNameEn\"), Toast.LENGTH_SHORT).show();\n\t    \t  if(reciter_id !=\"-1\" && (surasList==null || surasList.isEmpty()))\n\t    \t  {\n\t    \t\t  loadSuras();\n\t    \t  }\n\t     }\n }", "path": "src\\com\\mos7af\\mp3quran\\SurasActivity.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "/**\n * Inserting new lable into lables table\n * */\n", "func_signal": "public void insertPlaylist(String label)", "code": "{\n\tSQLiteDatabase db = this.getWritableDatabase();\n\t\n\tContentValues values = new ContentValues();\n\tvalues.put(KEY_PLAYLISTS_NAME, label);\n\tvalues.put(KEY_PLAYLISTS_TIME, \"10-10-2010\");\n\t// Inserting Row\n    db.insert(TABLE_LABELS, null, values);\n    \n    db.close(); // Closing database connection\n}", "path": "src\\com\\mos7af\\mp3quran\\DatabaseHandler.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "// Constructor\n", "func_signal": "public SuraslistManager()", "code": "{\n\tif(playerSurasList.isEmpty())\n\t{\n\t\tHashMap<String, String> sura = new HashMap<String, String>();\t\t\t\n\t\tsura.put(\"suraId\", \"1\");\n\t\tsura.put(\"suraNameAr\", \"\u0627\u0644\u0641\u0627\u062a\u062d\u0629\");\n\t\tsura.put(\"suraNameEn\", \"alfatiha\");\n\t\tsura.put(\"suraPlaceLookupAr\", \"meeka\");\n\t\tsura.put(\"suraPlaceLookupEn\", \"medanian\");\n  \t\t\tsura.put(\"suraSoundPath\", \"http://s3.amazonaws.com/quranfiles/Sounds/1/1/001.mp3\");\n  \t\t\tsura.put(\"reciterId\", \"1\");\n  \t\t\tsura.put(\"reciterNameAr\", \"\u0635\u0644\u0627\u062d \u0628\u0648 \u062e\u0627\u0637\u0631\");\n  \t\t\tsura.put(\"reciterNameEn\", \"salah bu khater\");\n  \t\t\tsura.put(\"reciterImage\", \"https://s3.amazonaws.com/quranfiles/Images/Readers/1.jpg\");\n  \t\t\tplayerSurasList.add(sura);\n\t}\n}", "path": "src\\com\\mos7af\\mp3quran\\SuraslistManager.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "/**\n * Getting node value\n * @param Element node\n * @param key string\n * */\n", "func_signal": "public String getValue(Element item, String str)", "code": "{\t\t\n\t\t\tNodeList n = item.getElementsByTagName(str);\t\t\n\t\t\treturn this.getElementValue(n.item(0));\n\t\t}", "path": "src\\com\\mos7af\\mp3quran\\XMLParser.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "/**\n * Function to convert milliseconds time to\n * Timer Format\n * Hours:Minutes:Seconds\n * */\n", "func_signal": "public String milliSecondsToTimer(long milliseconds)", "code": "{\n\tString finalTimerString = \"\";\n\tString secondsString = \"\";\n\t\n\t// Convert total duration into time\n\t   int hours = (int)( milliseconds / (1000*60*60));\n\t   int minutes = (int)(milliseconds % (1000*60*60)) / (1000*60);\n\t   int seconds = (int) ((milliseconds % (1000*60*60)) % (1000*60) / 1000);\n\t   // Add hours if there\n\t   if(hours > 0){\n\t\t   finalTimerString = hours + \":\";\n\t   }\n\t   \n\t   // Prepending 0 to seconds if it is one digit\n\t   if(seconds < 10){ \n\t\t   secondsString = \"0\" + seconds;\n\t   }else{\n\t\t   secondsString = \"\" + seconds;}\n\t   \n\t   finalTimerString = finalTimerString + minutes + \":\" + secondsString;\n\t\n\t// return timer string\n\treturn finalTimerString;\n}", "path": "src\\com\\mos7af\\mp3quran\\Utilities.java", "repo_name": "abodehq/MP3QuranForAndriod", "stars": 16, "license": "other", "language": "java", "size": 4459}
{"docstring": "/**\n * Set the activity as DONE and store the date\n */\n", "func_signal": "public void setDone()", "code": "{\n    this.done = true;\n    setEndDate(new Date());\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * @param dbHelper\n * @return The last stored originId for local Activities\n * @throws PomodroidException\n */\n", "func_signal": "public static int getLastLocalId(DBHelper dbHelper)\n        throws PomodroidException", "code": "{\n\n    List<Activity> activities = dbHelper.getDatabase().query(new Predicate<Activity>() {\n        /**\n         *\n         */\n        private static final long serialVersionUID = 1L;\n\n        public boolean match(Activity activity) {\n            return activity.getOrigin().equals(\"local\");\n        }\n    });\n\n    if (activities == null || activities.size() == 0)\n        return 0;\n\n    int maxId = 0;\n    for (Activity activity : activities) {\n        if (activity.getOriginId() > maxId)\n            maxId = activity.getOriginId();\n    }\n\n    return maxId;\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * @param dbHelper\n * @return to do today activities\n * @throws PomodroidException\n */\n", "func_signal": "public static List<Activity> getTodoToday(DBHelper dbHelper)\n        throws PomodroidException", "code": "{\n    List<Activity> activities = null;\n    Query query = null;\n    try {\n        query = dbHelper.getDatabase().query();\n        query.constrain(Activity.class);\n        query.descend(\"done\").constrain(false);\n        query.descend(\"todoToday\").constrain(true);\n        query.descend(\"deadline\").orderAscending();\n        activities = query.execute();\n    } catch (Exception e) {\n        Log.e(\"Activity.getTodoToday()\", \"Problem: \" + e.toString());\n        throw new PomodroidException(\"ERROR in Activity.getTodoToday():\"\n                + e.toString());\n    }\n    return activities;\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * Check if the date saved into the db is equal to the current one.\n *\n * @param userDate\n * @return\n */\n", "func_signal": "public boolean isSameDay(Date userDate)", "code": "{\n    Date today = new Date();\n    return (today.getDay() == userDate.getDay() &&\n            today.getMonth() == userDate.getMonth() &&\n            today.getYear() == userDate.getYear());\n}", "path": "src\\it\\unibz\\pomodroid\\models\\User.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * @param number_pomodoro number of pomodoro that has been runned\n * @param received        received date\n * @param deadline        deadline\n * @param summary         a briefly activity description\n * @param description     a more detalied description\n * @param origin          describes the activity origin\n * @param origin_id       id referring to the origin, it is impossible to have two activities with same origin and origin id\n * @param priority        priority of the activity\n * @param reporter        name of the reporter\n * @param type            activity type\n */\n", "func_signal": "public Activity(int numberPomodoro, int numberInterruptions, Date received,\n                Date deadline, String summary, String description, String origin,\n                int originId, String priority, String reporter, String type)", "code": "{\n    this.numberPomodoro = numberPomodoro;\n    this.numberInterruptions = numberInterruptions;\n    this.received = received;\n    this.deadline = deadline;\n    this.summary = summary;\n    this.description = description;\n    this.origin = origin;\n    this.originId = originId;\n    this.priority = priority;\n    this.reporter = reporter;\n    this.type = type;\n    this.todoToday = false;\n    this.done = false;\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * @param origin\n * @param originId\n * @param dbHelper\n * @return a specific activity\n * @throws it.unibz.pomodroid.exceptions.PomodroidException\n *\n */\n", "func_signal": "public static boolean isPresent(final String origin, final int originId,\n                                DBHelper dbHelper) throws PomodroidException", "code": "{\n    List<Activity> activities;\n    try {\n        activities = dbHelper.getDatabase().query(\n                new Predicate<Activity>() {\n                    private static final long serialVersionUID = 1L;\n\n                    public boolean match(Activity activity) {\n                        return activity.getOrigin().equals(origin)\n                                && activity.getOriginId() == originId;\n                    }\n                });\n        if (activities.isEmpty())\n            return false;\n        else\n            return true;\n    } catch (Exception e) {\n        Log.e(\"Activity.isPresent()\", \"Problem: \" + e.toString());\n        throw new PomodroidException(\"ERROR in Activity.isPresent():\"\n                + e.toString());\n    }\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * Deletes an activity\n *\n * @param dbHelper\n * @throws PomodroidException\n */\n", "func_signal": "public void delete(DBHelper dbHelper) throws PomodroidException", "code": "{\n    ObjectSet<Activity> result;\n    Activity toBeDeleted = null;\n    try {\n        toBeDeleted = Activity.get(this.getOrigin(), this.getOriginId(), dbHelper);\n        result = dbHelper.getDatabase().queryByExample(toBeDeleted);\n        Activity found = (Activity) result.next();\n        dbHelper.getDatabase().delete(found);\n    } catch (Exception e) {\n        Log.e(\"Activity.delete()\", \"Problem: \" + e.toString());\n        throw new PomodroidException(\"ERROR in Activity.delete():\"\n                + e.toString());\n    } finally {\n        dbHelper.commit();\n    }\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * @param activities\n * @return a list of their IDs\n * @throws PomodroidException\n */\n", "func_signal": "public static List<Integer> getOriginIDs(List<Activity> activities) throws PomodroidException", "code": "{\n    List<Integer> originIDs = new Vector<Integer>();\n    for (Activity activity : activities)\n        originIDs.add(activity.getOriginId());\n    return originIDs;\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * A helper method to update an existing Activity\n *\n * @param ac\n */\n", "func_signal": "public void update(Activity ac)", "code": "{\n    this.numberInterruptions = ac.getNumberInterruptions();\n    this.numberPomodoro = ac.getNumberPomodoro();\n    this.summary = ac.getSummary();\n    this.todoToday = ac.isTodoToday();\n    this.done = ac.isDone();\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * Retrieves all activities\n *\n * @param dbHelper\n * @return\n * @throws PomodroidException\n */\n", "func_signal": "public static List<Activity> getAll(DBHelper dbHelper)\n        throws PomodroidException", "code": "{\n    ObjectSet<Activity> result = null;\n    try {\n        result = dbHelper.getDatabase().queryByExample(Activity.class);\n        if (result == null)\n            Log.i(\"Activity.getAll()\", \"There are no activities stored in db\");\n    } catch (Exception e) {\n        Log.e(\"Activity.getAll()\", \"Problem: \" + e.toString());\n        throw new PomodroidException(\"ERROR in Activity.getAll():\" + e.toString());\n    }\n    return result;\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * @param origin\n * @param originId\n * @param dbHelper\n * @return a specific activity\n * @throws PomodroidException\n */\n", "func_signal": "public static Activity get(final String origin, final int originId,\n                           DBHelper dbHelper) throws PomodroidException", "code": "{\n    List<Activity> activities = null;\n    Activity result;\n    try {\n        activities = dbHelper.getDatabase().query(\n                new Predicate<Activity>() {\n                    private static final long serialVersionUID = 1L;\n\n                    public boolean match(Activity activity) {\n                        return activity.getOrigin().equals(origin)\n                                && activity.getOriginId() == originId;\n                    }\n                });\n        result = activities.get(0);\n    } catch (Exception e) {\n        Log.e(\"Activity.getActivity()\", \"Problem: \" + e.toString());\n        throw new PomodroidException(\"ERROR in Activity.getActivity():\"\n                + e.toString());\n    }\n    return result;\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * @param dbHelper\n * @return true if an activity is saved into the DB\n * @throws PomodroidException\n */\n", "func_signal": "public boolean save(DBHelper dbHelper) throws PomodroidException", "code": "{\n    try {\n        if (!isPresent(this.getOrigin(), this.getOriginId(), dbHelper)) {\n            dbHelper.getDatabase().store(this);\n            return true;\n        } else {\n            return this.update(dbHelper);\n        }\n    } catch (Exception e) {\n        Log.e(\"Activity.save(single)\", \"Problem: \" + e.toString());\n        throw new PomodroidException(\"ERROR in Activity.save():\"\n                + e.toString());\n    } finally {\n        dbHelper.commit();\n    }\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * @param username\n * @param dbHelper\n * @return\n * @throws it.unibz.pomodroid.exceptions.PomodroidException\n *\n */\n", "func_signal": "public static boolean isPresent(DBHelper dbHelper) throws PomodroidException", "code": "{\n    User user;\n    try {\n        user = User.retrieve(dbHelper);\n        if (user == null)\n            return false;\n        else\n            return true;\n    } catch (Exception e) {\n        Log.e(\"User.isPresent()\", \"Problem: \" + e.toString());\n        throw new PomodroidException(\"ERROR in User.isPresent():\" + e.toString());\n    }\n}", "path": "src\\it\\unibz\\pomodroid\\models\\User.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * @param dbHelper\n * @return true if an activity is saved into the DB\n * @throws PomodroidException\n */\n", "func_signal": "private boolean update(DBHelper dbHelper) throws PomodroidException", "code": "{\n    ObjectSet<Activity> result = dbHelper.getDatabase().queryByExample(\n            new Activity(getOrigin(), getOriginId()));\n    Activity found = (Activity) result.next();\n    found.update(this);\n    try {\n        dbHelper.getDatabase().store(found);\n        return true;\n    } catch (Exception e) {\n        Log.e(\"Activity.save(single)\", \"Update Problem: \" + e.toString());\n        throw new PomodroidException(\"ERROR in Activity.save(update):\"\n                + e.toString());\n    } finally {\n        dbHelper.commit();\n    }\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * Checks whether the user should do a short or long break\n *\n * @param dbHelper\n * @return\n * @throws PomodroidException\n */\n", "func_signal": "public boolean isLongerBreak(DBHelper dbHelper) throws PomodroidException", "code": "{\n    User user = User.retrieve(dbHelper);\n    if (isSameDay(user.getDateFacedPomodoro())) {\n        user.addPomodoro();\n        user.save(dbHelper);\n        return user.isFourthPomodoro();\n    } else {\n        user.setFacedPomodoro(1);\n        user.setDateFacedPomodoro(new Date());\n        user.save(dbHelper);\n        return false;\n    }\n}", "path": "src\\it\\unibz\\pomodroid\\models\\User.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * Delete all activities\n *\n * @param dbHelper\n * @return\n * @throws PomodroidException\n */\n", "func_signal": "public static boolean deleteAll(DBHelper dbHelper) throws PomodroidException", "code": "{\n    ObjectSet<Activity> activities = null;\n    try {\n        activities = dbHelper.getDatabase().query(new Predicate<Activity>() {\n            private static final long serialVersionUID = 1L;\n\n            public boolean match(Activity candidate) {\n                return true;\n            }\n        });\n        while (activities.hasNext()) {\n            dbHelper.getDatabase().delete(activities.next());\n        }\n        return true;\n    } catch (Exception e) {\n        Log.e(\"Activity.deleteAll()\", \"Problem: \" + e.toString());\n        throw new PomodroidException(\"ERROR in Activity.deleteAll():\" + e.toString());\n    } finally {\n        dbHelper.commit();\n    }\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * Closes an activity\n *\n * @param dbHelper\n * @throws PomodroidException\n */\n", "func_signal": "public void close(DBHelper dbHelper) throws PomodroidException", "code": "{\n    try {\n        this.setDone();\n        this.setTodoToday(false);\n        this.update(dbHelper);\n    } catch (Exception e) {\n        Log.e(\"Activity.close()\", \"Problem: \" + e.toString());\n        throw new PomodroidException(\"ERROR in Activity.close():\"\n                + e.toString());\n    } finally {\n        dbHelper.commit();\n    }\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * @return short summary description (for UI)\n */\n", "func_signal": "public String getShortSummary()", "code": "{\n    final int maxLength = 30;\n    if (this.summary.length() > maxLength)\n        return summary.substring(0, maxLength).replaceAll(\"\\n\", \" \") + \"...\";\n    return this.summary.replaceAll(\"\\n\", \" \");\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * @param dbHelper\n * @return the number of activities\n * @throws PomodroidException\n */\n", "func_signal": "public static int getNumberActivities(DBHelper dbHelper)\n        throws PomodroidException", "code": "{\n    List<Activity> activities = Activity.getAll(dbHelper);\n    return ((activities == null) ? 0 : activities.size());\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * Deletes an activity\n *\n * @param dbHelper\n * @throws PomodroidException\n */\n", "func_signal": "public int getNumberInterruptions(DBHelper dbHelper) throws PomodroidException", "code": "{\n    List<Event> result = null;\n    try {\n        result = Event.getAllInterruptions(this, dbHelper);\n    } catch (Exception e) {\n        Log.e(\"Activity.getNumberInterruptions()\", \"Problem: \" + e.toString());\n        throw new PomodroidException(\"ERROR in Activity.getNumberInterruptions():\"\n                + e.toString());\n    } finally {\n        dbHelper.commit();\n    }\n    if (result != null)\n        return result.size();\n    else\n        return 0;\n}", "path": "src\\it\\unibz\\pomodroid\\models\\Activity.java", "repo_name": "dgraziotin/openpomo", "stars": 23, "license": "gpl-3.0", "language": "java", "size": 8793}
{"docstring": "/**\n * Combines this statistic collection with another one.\n *\n * @param stats - the statistic collection to combine with this one\n * @return the combined collection\n */\n", "func_signal": "public StatisticsCollection combine(final StatisticsCollection stats)", "code": "{\n    HashMap<StatName, Statistic> tempStatsMap\n        = new HashMap<StatName, Statistic>();\n    Set<StatName> keys = this.statsMap.keySet();\n    Iterator<StatName> iter = keys.iterator();\n    Vector<Statistic> tempConvergedStats = new Vector<Statistic>();\n    while (iter.hasNext()) {\n        StatName key = iter.next();\n        Statistic myStat = this.statsMap.get(key);\n        Statistic theirStat = stats.getStat(key);\n        Statistic combinedStat = myStat.combineStatistics(theirStat);\n        tempStatsMap.put(key, combinedStat);\n        tempConvergedStats.add(combinedStat);\n    }\n    StatisticsCollection combinedCollection\n        = new StatisticsCollection(\n            tempStatsMap, tempConvergedStats);\n\n    return combinedCollection;\n}", "path": "src\\stat\\StatisticsCollection.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * Checks if all the statistics are in steady state.\n *\n * @return if all the statistics are in steady state.\n */\n", "func_signal": "public boolean allStatsSteadyState()", "code": "{\n    boolean allSteadyState = true;\n    Iterator<Statistic> iter = this.convergeStats.iterator();\n\n    while (iter.hasNext()) {\n        Statistic stat = iter.next();\n        if (!stat.isSteadyState()) {\n            allSteadyState = false;\n        }\n    }\n\n    return allSteadyState;\n}", "path": "src\\stat\\StatisticsCollection.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * This simply utility method can be used in cases where a byte\n * array of seed data is to be used to repeatedly re-seed the\n * random number sequence.  By packing the byte array into an\n * integer array first, using this method, and then invoking\n * setSeed() with that; it removes the need to re-pack the byte\n * array each time setSeed() is called.\n * <p>\n * If the length of the byte array is not a multiple of 4 then\n * it is implicitly padded with zeros as necessary.  For example:\n * <pre>    byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 }</pre>\n * becomes\n * <pre>    int[]  { 0x04030201, 0x00000605 }</pre>\n * <p>\n * Note that this method will not complain if the given byte array\n * is empty and will produce an empty integer array, but the\n * setSeed() method will throw an exception if the empty integer\n * array is passed to it.\n * \n * @param buf The non-null byte array to be packed.\n * @return A non-null integer array of the packed bytes.\n * @throws NullPointerException if the given byte array is null.\n */\n", "func_signal": "public static int[] pack(byte[] buf)", "code": "{\n\tint k, blen = buf.length, ilen = ((buf.length+3) >>> 2);\n\tint[] ibuf = new int[ilen];\n\tfor (int n = 0; n < ilen; n++) {\n\t\tint m = (n+1) << 2;\n\t\tif (m > blen) m = blen;\n\t\tfor (k = buf[--m]&0xff; (m & 0x3) != 0; k = (k << 8) | buf[--m]&0xff);\n\t\tibuf[n] = k;\n\t}\n\treturn ibuf;\n}", "path": "src\\generator\\MTRandom.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * Checks if all the needed statistics have converged.\n * @return if all the needed statistics have converged\n */\n", "func_signal": "public boolean allStatsConverged()", "code": "{\n\n    boolean allConverged = true;\n    Iterator<Statistic> iter = this.convergeStats.iterator();\n\n    while (iter.hasNext()) {\n        Statistic stat = iter.next();\n        if (!stat.isConverged()) {\n            allConverged = false;\n        }\n    }\n\n    return allConverged;\n}", "path": "src\\stat\\StatisticsCollection.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * This method resets the state of this instance using the 64\n * bits of seed data provided.  Note that if the same seed data\n * is passed to two different instances of MTRandom (both of\n * which share the same compatibility state) then the sequence\n * of numbers generated by both instances will be identical.\n * <p>\n * If this instance was initialised in 'compatibility' mode then\n * this method will only use the lower 32 bits of any seed value\n * passed in and will match the behaviour of the original C code\n * exactly with respect to state initialisation.\n * \n * @param seed The 64 bit value used to initialise the random\n * number generator state. \n */\n", "func_signal": "public final synchronized void setSeed(long seed)", "code": "{\n\tif (compat) {\n\t\tsetSeed((int)seed);\n\t} else {\n\n\t\t// Annoying runtime check for initialisation of internal data\n\t\t// caused by java.util.Random invoking setSeed() during init.\n\t\t// This is unavoidable because no fields in our instance will\n\t\t// have been initialised at this point, not even if the code\n\t\t// were placed at the declaration of the member variable.\n\t\tif (ibuf == null) ibuf = new int[2];\n\n\t\tibuf[0] = (int)seed;\n\t\tibuf[1] = (int)(seed >>> 32);\n\t\tsetSeed(ibuf);\n\t}\n}", "path": "src\\generator\\MTRandom.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * This method forms the basis for generating a pseudo random number\n * sequence from this class.  If given a value of 32, this method\n * behaves identically to the genrand_int32 function in the original\n * C code and ensures that using the standard nextInt() function\n * (inherited from Random) we are able to replicate behaviour exactly.\n * <p>\n * Note that where the number of bits requested is not equal to 32\n * then bits will simply be masked out from the top of the returned\n * integer value.  That is to say that:\n * <pre>\n * mt.setSeed(12345);\n * int foo = mt.nextInt(16) + (mt.nextInt(16) << 16);</pre>\n * will not give the same result as\n * <pre>\n * mt.setSeed(12345);\n * int foo = mt.nextInt(32);</pre>\n * \n * @param bits The number of significant bits desired in the output.\n * @return The next value in the pseudo random sequence with the\n * specified number of bits in the lower part of the integer.\n */\n", "func_signal": "protected final synchronized int next(int bits)", "code": "{\n\t// ---- Begin Mersenne Twister Algorithm ----\n\tint y, kk;\n\tif (mti >= N) {             // generate N words at one time\n\n\t\t// In the original C implementation, mti is checked here\n\t\t// to determine if initialisation has occurred; if not\n\t\t// it initialises this instance with DEFAULT_SEED (5489).\n\t\t// This is no longer necessary as initialisation of the\n\t\t// Java instance must result in initialisation occurring\n\t\t// Use the constructor MTRandom(true) to enable backwards\n\t\t// compatible behaviour.\n\t\t\n\t\tfor (kk = 0; kk < N-M; kk++) {\n\t\t\ty = (mt[kk] & UPPER_MASK) | (mt[kk+1] & LOWER_MASK);\n\t\t\tmt[kk] = mt[kk+M] ^ (y >>> 1) ^ MAGIC[y & 0x1];\n\t\t}\n\t\tfor (;kk < N-1; kk++) {\n\t\t\ty = (mt[kk] & UPPER_MASK) | (mt[kk+1] & LOWER_MASK);\n\t\t\tmt[kk] = mt[kk+(M-N)] ^ (y >>> 1) ^ MAGIC[y & 0x1];\n\t\t}\n\t\ty = (mt[N-1] & UPPER_MASK) | (mt[0] & LOWER_MASK);\n\t\tmt[N-1] = mt[M-1] ^ (y >>> 1) ^ MAGIC[y & 0x1];\n\n\t\tmti = 0;\n\t}\n  \n\ty = mt[mti++];\n\n\t// Tempering\n\ty ^= (y >>> 11);\n\ty ^= (y << 7) & MAGIC_MASK1;\n\ty ^= (y << 15) & MAGIC_MASK2;\n\ty ^= (y >>> 18);\n\t// ---- End Mersenne Twister Algorithm ----\n\treturn (y >>> (32-bits));\n}", "path": "src\\generator\\MTRandom.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * This version of the constructor initialises the class with the\n * given byte array.  All the data will be used to initialise this\n * instance.\n * \n * @param buf The non-empty byte array of seed information.\n * @throws NullPointerException if the buffer is null.\n * @throws IllegalArgumentException if the buffer has zero length.\n */\n", "func_signal": "public MTRandom(byte[] buf)", "code": "{\n\tsuper(0L);\n\tsetSeed(buf);\n}", "path": "src\\generator\\MTRandom.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "// Initializes mt[N] with a simple integer seed. This method is\n// required as part of the Mersenne Twister algorithm but need\n// not be made public.\n", "func_signal": "private final void setSeed(int seed)", "code": "{\n\n\t// Annoying runtime check for initialisation of internal data\n\t// caused by java.util.Random invoking setSeed() during init.\n\t// This is unavoidable because no fields in our instance will\n\t// have been initialised at this point, not even if the code\n\t// were placed at the declaration of the member variable.\n\tif (mt == null) mt = new int[N];\n\n\t// ---- Begin Mersenne Twister Algorithm ----\n\tmt[0] = seed;\n\tfor (mti = 1; mti < N; mti++) {\n\t\tmt[mti] = (MAGIC_FACTOR1 * (mt[mti-1] ^ (mt[mti-1] >>> 30)) + mti);\n\t}\n\t// ---- End Mersenne Twister Algorithm ----\n}", "path": "src\\generator\\MTRandom.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * This method resets the state of this instance using the integer\n * array of seed data provided.  This is the canonical way of\n * resetting the pseudo random number sequence.\n * \n * @param buf The non-empty integer array of seed information.\n * @throws NullPointerException if the buffer is null.\n * @throws IllegalArgumentException if the buffer has zero length.\n */\n", "func_signal": "public final synchronized void setSeed(int[] buf)", "code": "{\n\tint length = buf.length;\n\tif (length == 0) throw new IllegalArgumentException(\"Seed buffer may not be empty\");\n\t// ---- Begin Mersenne Twister Algorithm ----\n\tint i = 1, j = 0, k = (N > length ? N : length);\n\tsetSeed(MAGIC_SEED);\n\tfor (; k > 0; k--) {\n\t\tmt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >>> 30)) * MAGIC_FACTOR2)) + buf[j] + j;\n\t\ti++; j++;\n\t\tif (i >= N) { mt[0] = mt[N-1]; i = 1; }\n\t\tif (j >= length) j = 0;\n\t}\n\tfor (k = N-1; k > 0; k--) {\n\t\tmt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >>> 30)) * MAGIC_FACTOR3)) - i;\n\t\ti++;\n\t\tif (i >= N) { mt[0] = mt[N-1]; i = 1; }\n\t}\n\tmt[0] = UPPER_MASK; // MSB is 1; assuring non-zero initial array\n\t// ---- End Mersenne Twister Algorithm ----\n}", "path": "src\\generator\\MTRandom.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * This version of the constructor can be used to implement identical\n * behaviour to the original C code version of this algorithm including\n * exactly replicating the case where the seed value had not been set\n * prior to calling genrand_int32.\n * <p>\n * If the compatibility flag is set to true, then the algorithm will be\n * seeded with the same default value as was used in the original C\n * code.  Furthermore the setSeed() method, which must take a 64 bit\n * long value, will be limited to using only the lower 32 bits of the\n * seed to facilitate seamless migration of existing C code into Java\n * where identical behaviour is required.\n * <p>\n * Whilst useful for ensuring backwards compatibility, it is advised\n * that this feature not be used unless specifically required, due to\n * the reduction in strength of the seed value.\n * \n * @param compatible Compatibility flag for replicating original\n * behaviour.\n */\n", "func_signal": "public MTRandom(boolean compatible)", "code": "{\n\tsuper(0L);\n\tcompat = compatible;\n\tsetSeed(compat?DEFAULT_SEED:System.currentTimeMillis());\n}", "path": "src\\generator\\MTRandom.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * Creates a new StatisticsCollection.\n *\n * @param aStatsMap - a mapping of statistic names to statistics\n * @param aConvergeStats - a vector of statistics that must\n * be converged to end the simulation\n */\n", "func_signal": "public StatisticsCollection(final HashMap<StatName, Statistic> aStatsMap,\n                            final Vector<Statistic> aConvergeStats)", "code": "{\n    this();\n    this.statsMap = aStatsMap;\n    this.convergeStats = aConvergeStats;\n}", "path": "src\\stat\\StatisticsCollection.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * Gets a time weighted statistic by name.\n *\n * @param name - the name of the statistic\n * @return the statistic\n */\n", "func_signal": "public TimeWeightedStatistic getTimeWeightedStat(\n                        final TimeWeightedStatName name)", "code": "{\n    TimeWeightedStatistic stat = this.twStatsMap.get(name);\n\n    if (stat == null) {\n        stat = this.twFakeStatistic;\n    }\n\n    return stat;\n}", "path": "src\\stat\\StatisticsCollection.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * Updates the statistics of all the objects in the datacenter.\n *\n * @param time\n *            - the time the statistics are updated\n */\n", "func_signal": "public void updateStatistics(final double time)", "code": "{\n    Iterator<Server> iter = this.servers.iterator();\n    while (iter.hasNext()) {\n        iter.next().updateStatistics(time);\n    }\n}", "path": "src\\datacenter\\DataCenter.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * Prints the convergence status of the statistics that need to converge.\n */\n", "func_signal": "public void printConvergedOutputs()", "code": "{\n    Iterator<Statistic> iter = this.convergeStats.iterator();\n    while (iter.hasNext()) {\n        Statistic stat = iter.next();\n        System.out.println(stat.getStatName() + \" Average \"\n                + stat.getAverage());\n        System.out.println(stat.getStatName() + \" Quantile(\"\n                + stat.getQuantileSetting() + \"): \"\n                + stat.getQuantile(stat.getQuantileSetting()));\n    }\n}", "path": "src\\stat\\StatisticsCollection.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * Creates a new ConstantGenerator.\n *\n * @param mtRandom - the random number generator\n * @param theValue - the value to return\n */\n", "func_signal": "public ConstantGenerator(final MTRandom mtRandom, final double theValue)", "code": "{\n    super(mtRandom);\n    this.value = theValue;\n}", "path": "src\\generator\\ConstantGenerator.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * Reports that a statistic is warm by outputting a\n * message, removing it from the collection of statistics that\n * need to be warmed and notifying all the other statistics that\n * warm up is done once the final statistic is warmed up.\n *\n * @param statistic - the statistic to report\n */\n", "func_signal": "public void reportWarmed(final Statistic statistic)", "code": "{\n    System.out.println(statistic.getStatName() + \" reported it is warm\");\n    this.warmStats.remove(statistic);\n\n    if (warmStats.isEmpty()) {\n        Iterator<Statistic> iter = this.convergeStats.iterator();\n        while (iter.hasNext()) {\n            Statistic stat = iter.next();\n            stat.setOtherStatsWarmed(true);\n        }\n    }\n}", "path": "src\\stat\\StatisticsCollection.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * This version of the constructor initialises the class with the\n * given integer array.  All the data will be used to initialise\n * this instance.\n * \n * @param buf The non-empty integer array of seed information.\n * @throws NullPointerException if the buffer is null.\n * @throws IllegalArgumentException if the buffer has zero length.\n */\n", "func_signal": "public MTRandom(int[] buf)", "code": "{\n\tsuper(0L);\n\tsetSeed(buf);\n}", "path": "src\\generator\\MTRandom.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * Adds a time weighted statistic to the collection.\n *\n * @param name - the name of the statistic\n * @param stat - the statistic\n */\n", "func_signal": "public void addTimeWeightedStatistic(final TimeWeightedStatName name,\n                                     final TimeWeightedStatistic stat)", "code": "{\n\n    if (this.twStatsMap.get(name) != null) {\n        Sim.fatalError(\"Already added \" + name);\n    }\n\n    this.twStatsMap.put(name, stat);\n    this.convergeStats.add(stat);\n}", "path": "src\\stat\\StatisticsCollection.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * Gets a statistic by name.\n *\n * @param name - the name of the statistic\n * @return the statistic\n */\n", "func_signal": "public Statistic getStat(final StatName name)", "code": "{\n    Statistic stat = this.statsMap.get(name);\n\n    if (stat == null) {\n        stat = this.fakeStatistic;\n    }\n\n    return stat;\n}", "path": "src\\stat\\StatisticsCollection.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * Calls {@link Statistic#printStatInfo()} on all the statistics.\n */\n", "func_signal": "public void printAllStatInfo()", "code": "{\n    Iterator<Statistic> iter = this.convergeStats.iterator();\n    while (iter.hasNext()) {\n        Statistic stat = iter.next();\n        stat.printStatInfo();\n    }\n}", "path": "src\\stat\\StatisticsCollection.java", "repo_name": "meisner/BigHouse", "stars": 21, "license": "None", "language": "java", "size": 1799}
{"docstring": "/**\n * Pushes a filter on the top of the stream stack.\n *\n * @param filter the filter to be added.\n */\n", "func_signal": "public void pushFilter(StreamFilter filter)", "code": "{\n  filter.init(_source);\n  _source = filter;\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Prints an integer followed by a newline.\n */\n", "func_signal": "public final void println(int i) throws IOException", "code": "{\n  print(i);\n  write(newlineBytes, 0, newlineBytes.length);\n  if (flushOnNewline)\n    flush();\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Seeks based on the end\n */\n", "func_signal": "public void seekEnd(long offset)\n  throws IOException", "code": "{\n  flushBuffer();\n\n  StreamImpl source = _source;\n  \n  if (source != null)\n    source.seekEnd(offset);\n\n  // XXX : Don't know where end position is\n\n  _position = offset;\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Flushes and writes the buffer\n */\n", "func_signal": "public byte []nextBuffer(int offset) throws IOException", "code": "{\n  _writeLength = 0;\n\n  if (_source != null)\n    _source.write(_writeBuffer, 0, offset, false);\n  \n  _position += offset;\n\n  if (_implicitFlush)\n    flush();\n\n  return _writeBuffer;\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Sets the string to use for println newlines\n */\n", "func_signal": "public void setNewlineString(String newline)", "code": "{\n  if (newline != null) {\n    if (this.newline == newline || newline.equals(this.newline)) {\n    }\n    else if (newline == \"\\n\" || newline.equals(\"\\n\")) {\n      this.newlineBytes = lfBytes;\n    }\n    else if (newline == \"\\r\\n\" || newline.equals(\"\\r\\n\")) {\n      this.newlineBytes = crlfBytes;\n    }\n    else if (newline == \"\\r\" || newline.equals(\"\\r\")) {\n      this.newlineBytes = crBytes;\n    }\n    else {\n      this.newlineBytes = newline.getBytes();\n    }\n    this.newline = newline;\n  }\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Clears the write buffer\n */\n", "func_signal": "public void clearWrite()", "code": "{\n  if (_source != null)\n    _source.clearWrite();\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Returns true if the file exists.\n */\n", "func_signal": "public boolean exists()", "code": "{\n  ClassLoader loader = Thread.currentThread().getContextClassLoader();\n  \n  return loader.getResource(getPath()) != null;\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\ClasspathPath.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/*\n * Special quercus-only import statements.\n */\n", "func_signal": "public static void quercus_import(Env env, String name)", "code": "{\n  if (name.endsWith(\"*\"))\n    env.addWildcardImport(name);\n  else\n    env.putQualifiedImport(name);\n}", "path": "src\\main\\java\\com\\caucho\\quercus\\lib\\QuercusModule.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Prints a newline\n */\n", "func_signal": "public final void println() throws IOException", "code": "{\n  write(newlineBytes, 0, newlineBytes.length);\n  if (flushOnNewline)\n    flush();\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Seeks based on the start\n */\n", "func_signal": "public void seekStart(long pos)\n  throws IOException", "code": "{\n  flushBuffer();\n\n  StreamImpl source = _source;\n  \n  if (source != null) {\n    source.seekStart(pos);\n    _position = pos;\n  }\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Prints the character buffer to the stream.\n *\n * @param ch char\n */\n", "func_signal": "public final void print(char ch)\n  throws IOException", "code": "{\n  if (_writeEncoding != null) {\n    _disableFlush = true;\n    _writeEncoding.write(this, ch);\n    _disableFlush = false;\n    return;\n  }\n\n  write((byte) ch);\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Prints a character buffer followed by a newline.\n */\n", "func_signal": "public final void println(char []buf, int offset, int length)\n  throws IOException", "code": "{\n  print(buf, offset, length);\n  write(newlineBytes, 0, newlineBytes.length);\n  if (flushOnNewline)\n    flush();\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Close the stream, first flushing the write buffer.\n */\n", "func_signal": "public final void close() throws IOException", "code": "{\n  StreamImpl s = _source;\n  \n  try {\n    int len = _writeLength;\n    if (len > 0) {\n      _writeLength = 0;\n      if (s != null)\n        s.write(_writeBuffer, 0, len, true);\n    }\n  } finally {\n    if (_disableClose) {\n      return;\n    }\n\n    _source = null;\n\n    if (_writeEncoding != null)\n      _writeEncoding = null;\n\n    if (! reuseBuffer) {\n      if (_tempWrite != null) {\n        TempBuffer.free(_tempWrite);\n        _tempWrite = null;\n      }\n      _tempWrite = null;\n      _writeBuffer = null;\n    }\n\n    if (s != null && ! _isDisableCloseSource)\n      s.closeWrite();\n  }\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Prints the character buffer to the stream.\n *\n * @param buffer character buffer to write\n * @param offset offset into the buffer to start writes\n * @param length number of characters to write\n */\n", "func_signal": "public final void print(char []buffer, int offset, int length)\n  throws IOException", "code": "{\n  byte []writeBuffer = this._writeBuffer;\n\n  if (_source == null)\n    return;\n\n  if (_writeEncoding != null) {\n    _disableFlush = true;\n    _writeEncoding.write(this, buffer, offset, length);\n    _disableFlush = false;\n    return;\n  }\n\n  while (length > 0) {\n    int writeLength = _writeLength;\n    int sublen = writeBuffer.length - writeLength;\n\n    if (sublen <= 0) {\n      _source.write(writeBuffer, 0, writeLength, false);\n      _position += writeLength;\n      writeLength = 0;\n      sublen = writeBuffer.length - writeLength;\n    }\n    if (length < sublen)\n      sublen = length;\n\n    for (int i = sublen - 1; i >= 0; i--)\n      writeBuffer[writeLength + i] = (byte) buffer[offset + i];\n\n    _writeLength = writeLength + sublen;\n    offset += sublen;\n    length -= sublen;\n  }\n\n  if (_implicitFlush)\n    flush();\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Flushes the buffer to the disk\n */\n", "func_signal": "public void flushToDisk() throws IOException", "code": "{\n  StreamImpl source = _source;\n  \n  if (_disableFlush || source == null)\n    return;\n\n  int len = _writeLength;\n  if (len > 0) {\n    _writeLength = 0;\n    source.write(_writeBuffer, 0, len, false);\n  }\n\n  source.flushToDisk();\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Prints an integer.\n */\n", "func_signal": "public final void print(int i) throws IOException", "code": "{\n  if (i == 0x80000000) {\n    print(\"-2147483648\");\n    return;\n  }\n\n  if (i < 0) {\n    write('-');\n    i = -i;\n  } else if (i < 9) {\n    write('0' + i);\n    return;\n  }\n\n  int length = 0;\n  int exp = 10;\n\n  if (i >= 1000000000)\n    length = 9;\n  else {\n    for (; i >= exp; length++)\n      exp = 10 * exp;\n  }\n\n  byte []buffer = _writeBuffer;\n  int writeLength = this._writeLength;\n  \n  if (writeLength + length < buffer.length) {\n    writeLength += length;\n    this._writeLength = writeLength + 1;\n    \n    for (int j = 0; j <= length; j++) {\n      buffer[writeLength - j] = (byte) (i % 10 + '0');\n      i = i / 10;\n    }\n    return;\n  }\n  \n  if (_bytes == null)\n    _bytes = new byte[32];\n\n  int j = 31;\n  \n  while (i > 0) {\n    _bytes[--j] = (byte) ((i % 10) + '0');\n    i /= 10;\n  }\n\n  write(_bytes, j, 31 - j);\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Evaluates the expression.\n *\n * @param env the calling environment.\n *\n * @return the expression value.\n */\n", "func_signal": "public Value eval(Env env)", "code": "{\n  Value value = _expr.eval(env).toValue();\n  \n  if (value.isUnicode())\n    return value;\n  else\n    return value.toReprString(env).toUnicodeValue(env);\n}", "path": "src\\main\\java\\com\\caucho\\quercus\\expr\\ToUnicodeExpr.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Prints a char followed by a newline.\n */\n", "func_signal": "public final void println(char ch) throws IOException", "code": "{\n  write(ch);\n  write(newlineBytes, 0, newlineBytes.length);\n  if (flushOnNewline)\n    flush();\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Copies a file to the stream.\n *\n * @param path Path of the file to copy.\n */\n", "func_signal": "public void writeFile(Path path) throws IOException", "code": "{\n  StreamImpl is = path.openReadImpl();\n\n  try {\n    if (is != null)\n      writeStream(is);\n  } finally {\n    if (is != null)\n      is.close();\n  }\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Writes the contents of a JDK stream.  Essentially this will copy\n * <code>source</code> to the current stream.\n *\n * @param source InputStream to read.\n */\n", "func_signal": "public void writeStream(InputStream source, int totalLength)\n  throws IOException", "code": "{\n  if (source == null)\n    return;\n\n  int length = _writeBuffer.length;\n\n  if (length <= _writeLength) {\n    int tmplen = _writeLength;\n    _writeLength = 0;\n    _source.write(_writeBuffer, 0, tmplen, false);\n    _position += tmplen;\n  }\n\n  while (totalLength > 0) {\n    int sublen = length - _writeLength;\n    \n    if (totalLength < sublen)\n      sublen = totalLength;\n    \n    sublen = source.read(_writeBuffer, _writeLength, sublen);\n    if (sublen < 0)\n      break;\n    \n    _writeLength += sublen;\n    totalLength -= sublen;\n    if (length <= _writeLength) {\n      int tmplen = _writeLength;\n      _writeLength = 0;\n      _source.write(_writeBuffer, 0, tmplen, false);\n      _position += tmplen;\n    }\n  }\n\n  if (flushOnNewline || _implicitFlush)\n    flush();\n}", "path": "src\\main\\java\\com\\caucho\\vfs\\WriteStream.java", "repo_name": "moriyoshi/quercus-gae", "stars": 24, "license": "gpl-2.0", "language": "java", "size": 1701}
{"docstring": "/**\n * Stops the sequencer and resets its position to 0\n *\n */\n", "func_signal": "public void stop()", "code": "{\n\tif (sequencer != null && sequencer.isOpen()) {\n\t\tsequencer.stop();\n\t\tsequencer.setMicrosecondPosition(0);\n\t}\n}", "path": "NetbeansFinchProject\\SourceFiles\\Code\\customClasses\\DancingFinch\\MidiPlayer.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "/**\n * This method is called by the sound system when a meta event occurs. In this case,\n * when the end-of-track meta event is received, the sequence is restarted if looping is on.\n */\n", "func_signal": "public void meta(MetaMessage event)", "code": "{\n\tif (event.getType() == END_OF_TRACK_MESSAGE) {\n\t\tif (sequencer != null && sequencer.isOpen() && loop) {\n\t\t\tsequencer.start();\n\t\t}\n\t}\n}", "path": "NetbeansFinchProject\\SourceFiles\\Code\\customClasses\\DancingFinch\\MidiPlayer.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "/**\n * Loads a sequence from the file system. Returns null if an error occurs\n * @param filename The filename of the MIDI file\n * @return A Sequence object corresponding to this MIDI file\n */\n", "func_signal": "public Sequence getSequence (String filename)", "code": "{\n\ttry {\n\t\treturn MidiSystem.getSequence(new File(filename));\n\t}\n\tcatch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n}", "path": "NetbeansFinchProject\\SourceFiles\\Code\\customClasses\\DancingFinch\\MidiPlayer.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "//This adds a letter to the message box by looking up the morse code in\n//the morse code box to find the appropriate letter.\n", "func_signal": "public void addLetter()", "code": "{\n   //Get the current string of morse code\n   String currLetter = morseText.getText();\n   //if it's not empty\n   if (currLetter.length() > 0)\n      {\n      //clear the morse code box\n      morseText.setText(\"\");\n      //trim what we have to make sure there's no whitespace\n      currLetter = currLetter.trim();\n      //set a flag that we haven't found it yet\n      boolean letterFound = false;\n      //Go through the lookup array for morse code strings\n      for (int i = 0; i < MorseCodeBeeper.MorseLookup.length; i++)\n         {\n         //If we find it add it to the message and break\n         if (currLetter.compareTo(MorseCodeBeeper.MorseLookup[i]) == 0)\n            {\n            messageText.append(MorseCodeBeeper.asciiLookup[i]);\n            letterFound = true;\n            break;\n            }\n         }\n      //if we didn't find it give some output\n      if (!letterFound)\n         {\n         System.out.printf(\"%s was not recognized and will be ignored\\n\", currLetter);\n         }\n      }\n   }", "path": "NetbeansFinchProject\\SourceFiles\\Code\\graphics\\morseCode\\MorseCodeFrame.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "/**\n * Sets the array of random colors that the finch can change to\n * @param colors The array of colors from which random colors are drawn\n */\n", "func_signal": "public void setColors(Color[] colors)", "code": "{\n\tif (colors == null || colors.length == 0) {\n\t\tthrow new IllegalArgumentException (\"At least one color must be specified.\");\n\t}\n\tthis.nextColor = (Color[]) colors.clone();\n\tcolor = 0;\n}", "path": "NetbeansFinchProject\\SourceFiles\\Code\\customClasses\\DancingFinch\\DancingFinch.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "// amount of time to follow the command\n", "func_signal": "public FinchGame()", "code": "{\n\t\tmyFinch = new Finch();\n\t\tSystem.out.println(\"Instructions - point the Finch in the direction of the arrow.  If the arrow is black, cover the light sensors, if gray, don't cover them\");\n               System.out.println(\"Up arrow - Finch pointing with beak up\");\n\t\tSystem.out.println(\"Left arrow - Finch left wing down\");\n               System.out.println(\"Right arrow - Finch right wing down\");\n               System.out.println(\"Down arrow - Finch LEVEL\");\n               System.out.println(\"Calibrating to light levels.\");\n\n               lightBias = myFinch.getLightSensors(); // get light level readings\n\t\t\n\t\t// Make the covered light values about 40 less than uncovered\n\t\tlightBias[0] -= 40;\n\t\tlightBias[1] -= 40;\n\t\t\n\t\t// Ensure they don't get too low\n\t\tif(lightBias[0] < 30)\n\t\t\tlightBias[0] = 30;\n\t\tif(lightBias[1] < 30)\n\t\t\tlightBias[1] = 30;\n\t\t\n\t\tSystem.out.println(\"Done calibrating!\");\n\t\tSystem.out.println(\"Pick up the Finch now\");\n\t\tmyFinch.saySomething(\"Pick up the Finch now\");\n\t\tmyFinch.sleep(3000);\n\t}", "path": "NetbeansFinchProject\\SourceFiles\\Code\\graphics\\simonGame\\FinchGame.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "/**\n * Check the z-accelerometers to determine if the user has tapped the finch\n * @return true if the Finch has been tapped, false otherwise\n */\n", "func_signal": "public boolean isTapped()", "code": "{\n\tdouble value = ((finch.getZAcceleration()-gravityOffset));\n\treturn value < -0.3;\n}", "path": "NetbeansFinchProject\\SourceFiles\\Code\\customClasses\\DancingFinch\\DancingFinch.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(final String[] args)", "code": "{\n   EventQueue.invokeLater(new Runnable()\n   {\n   public void run()\n      {\n      new MorseCodeFrame().setVisible(true);\n      }\n   });\n   }", "path": "NetbeansFinchProject\\SourceFiles\\Code\\graphics\\morseCode\\MorseCodeFrame.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "/** This method should be called everytime a change in the state\n * of the beep occurs. This can either be caused by the finch\n * crossing its threshhold for beeping or from the beep button on\n * the GUI being pressed/unpressed.\n */\n", "func_signal": "public void beepStateChanged(boolean pressed, final int pressSrc)", "code": "{\n\n   //We want the gui button to take precedence, since it is not pressed by\n   //default.\n   if (this.buttonPressed)\n      {\n      pressed = true;\n      }\n   if (pressed)\n      {\n      pressCount++;\n      nPressCount = 0;\n      }\n   else\n      {\n      nPressCount++;\n      pressCount = 0;\n      }\n   //keeping a count lets us filter out the bouncing in the tail but introduces\n   //about 60-100 ms of delay\n   if (pressed != prevBeepPressed && ((pressCount > 3 || nPressCount > 3) || pressSrc == BUTTON))\n      {\n      //Set up some variables for figuring out what to do because of the\n      //transition\n      final int thresh1;\n      final int thresh2;\n      final int threshsp1;\n      //We still want to ignore very short things because they are usually\n      //the tail bouncing\n      final int ignoreThresh = 50; //dotLength/4;\n      final double oldTime = startTime;\n      //Find out how long since we last changed states\n      final double timeDiff = System.currentTimeMillis() - oldTime;\n      //if it wasn't too short restart the timer\n      if (timeDiff > ignoreThresh)\n         {\n         startTime = System.currentTimeMillis();\n         }\n      //These set up how closely we follow the standard morse restrictions\n      //on timing. The not strict threshholds mostly apply to the wait time\n      //after the button was released.\n      if (strictTimingBox.isEnabled())\n         {\n         thresh1 = oneThreeThresh;\n         threshsp1 = oneThreeThresh;\n         thresh2 = threeSevenThresh;\n         }\n      else\n         {\n         thresh1 = oneThreeThresh;\n         threshsp1 = notStrict13Thresh;\n         thresh2 = notStrict37Thresh;\n         }\n      //a dash is three dots\n      //a space between dots and dashes is one dot\n      //a space between letters is 3 dots\n      //a space between words is 7 dots\n\n      //If we just let go of the button\n      if (prevBeepPressed && !pressed)\n         {\n         //if it was too short a time amount ignore it.\n         if (timeDiff < ignoreThresh)\n            {\n            }\n         //if it was a dot length output a dot\n         else if (timeDiff < thresh1)\n            {\n            morseText.setText(morseText.getText() + \".\");\n            }\n         //for a dash length output a dash\n         else if (timeDiff < thresh2)\n               {\n               morseText.setText(morseText.getText() + \"-\");\n               }\n         }\n      //if we just pressed the button\n      else if (!prevBeepPressed && pressed)\n         {\n         //Don't do anything, we only add things when we let go of the button.\n         if (timeDiff < threshsp1)\n            {\n            }\n         else if (timeDiff < thresh2)\n            {\n            }\n         else\n            {\n            }\n         }\n      //if we did something change the previous state\n      if (timeDiff > ignoreThresh)\n         {\n         prevBeepPressed = pressed;\n         }\n      }\n   }", "path": "NetbeansFinchProject\\SourceFiles\\Code\\graphics\\morseCode\\MorseCodeFrame.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "/**\n * Creates a new DancingFinch object\n * @param finch The finch object  \n * @throws NullPointerException if finch is null\n */\n", "func_signal": "public DancingFinch (Finch finch)", "code": "{\n\tthis.finch = finch;\n\tstate = STOP;\n\tclockwise = true;\n\tdistance = 15;\n\tcolor = 0;\n\tgravityOffset = finch.getZAcceleration();\n}", "path": "NetbeansFinchProject\\SourceFiles\\Code\\customClasses\\DancingFinch\\DancingFinch.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "/**\n * Creates a new MidiPlayer object\n *\n */\n", "func_signal": "public MidiPlayer()", "code": "{\n\ttry {\n\t\tsequencer = MidiSystem.getSequencer();\n\t\tsequencer.open();\n\t\tsequencer.addMetaEventListener(this);\n\t}\n\tcatch (MidiUnavailableException e){\n\t\tsequencer = null;\n\t}\n}", "path": "NetbeansFinchProject\\SourceFiles\\Code\\customClasses\\DancingFinch\\MidiPlayer.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "/**\n * Closes the sequencer\n *\n */\n", "func_signal": "public void close()", "code": "{\n\tif (sequencer != null && sequencer.isOpen()) {\n\t\tsequencer.close();\n\t}\n}", "path": "NetbeansFinchProject\\SourceFiles\\Code\\customClasses\\DancingFinch\\MidiPlayer.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "//This is an interrupt that fires every 10ms and performs updates on the output\n", "func_signal": "public void actionPerformed(final ActionEvent e)", "code": "{\n   final int thresh1;\n   final int thresh2;\n   final int threshsp1;\n   //We'd like to know how long since our current state started\n   final double timeDiff = System.currentTimeMillis() - startTime;\n   //Again, we set different threshholds depending on how strict we're being\n   if (strictTimingBox.isEnabled())\n      {\n      thresh1 = oneThreeThresh;\n      threshsp1 = oneThreeThresh;\n      thresh2 = threeSevenThresh;\n      }\n   else\n      {\n      thresh1 = oneThreeThresh;\n      threshsp1 = notStrict13Thresh;\n      thresh2 = notStrict37Thresh;\n      }\n   //If we just started the program set the start time\n   if (startTime == 0)\n      {\n      startTime = System.currentTimeMillis();\n      }\n   //if the button is not currently being pressed\n   if (!prevBeepPressed)\n      {\n      //And we're below the time for a space between dots\n      if (timeDiff < threshsp1)\n         {\n         //just update the output bar\n         typeTimingBar.setValue((int)(100 * timeDiff / thresh1));\n         typeTimingBar.setString(\"dot-space\");\n         }\n      //if we've reached a letter space timing\n      else if (timeDiff < thresh2)\n         {\n         //update the output bar\n         typeTimingBar.setValue((int)(100 * (timeDiff - thresh1) / (thresh2 - thresh1)));\n         typeTimingBar.setString(\"letter-space\");\n         //and add the letter if it exists\n         addLetter();\n         }\n      //if we're above that it's a word space\n      else\n         {\n         //if we haven't already add a space to the message\n         typeTimingBar.setValue(100);\n         typeTimingBar.setString(\"word-space\");\n         if (!messageText.getText().endsWith(\" \"))\n            {\n            messageText.append(\" \");\n            }\n         }\n      }\n   //If it is currently pressed\n   else\n      {\n      //We just update the output appropriately\n      if (timeDiff < thresh1)\n         {\n         typeTimingBar.setValue((int)(100 * timeDiff / thresh1));\n         typeTimingBar.setString(\"dot\");\n         }\n      else if (timeDiff < thresh2)\n         {\n         typeTimingBar.setValue((int)(100 * (timeDiff - thresh1) / (thresh2 - thresh1)));\n         typeTimingBar.setString(\"dash\");\n         }\n      else if (timeDiff < backspaceThresh)\n            {\n            typeTimingBar.setValue((int)(100 * timeDiff - thresh2) / (backspaceThresh - thresh2));\n            typeTimingBar.setString(\"nothing\");\n            }\n         //If they hold it down long enough start deleting chars from the message\n         else if (timeDiff > backspaceThresh)\n               {\n               typeTimingBar.setValue(100);\n               typeTimingBar.setString(\"backspace\");\n               if (backspaceCount == 0)\n                  {\n                  final int msgLength = messageText.getText().length() - 2;\n                  if (msgLength >= 0)\n                     {\n                     messageText.setText(messageText.getText().substring(0, msgLength));\n                     }\n                  }\n               //and clear any morse they might have input\n               morseText.setText(\"\");\n               backspaceCount = (++backspaceCount) % 10;\n               }\n      }\n   }", "path": "NetbeansFinchProject\\SourceFiles\\Code\\graphics\\morseCode\\MorseCodeFrame.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "/**\n * Executes the next motion of the finch, based on the state\n * @param state The motion to execute. This can be one of STRAIGHT, TURN_LEFT,\n * TURN_RIGHT or BACK\n */\n", "func_signal": "private void execute(int state)", "code": "{\n\tswitch (state) {\n\tcase STRAIGHT:\n\t\tfinch.setWheelVelocities(200,200);\n\t\tbreak;\n\tcase TURN_LEFT:\n\t\tfinch.setWheelVelocities(-100, 100);\n\t\tbreak;\n\tcase TURN_RIGHT:\n\t\tfinch.setWheelVelocities(100, -100);\n\t\tbreak;\n\tcase BACK:\n\t\tfinch.setWheelVelocities(-200, -200);\n\tdefault:\n\t\tbreak;\n\t}\n\t\n}", "path": "NetbeansFinchProject\\SourceFiles\\Code\\customClasses\\DancingFinch\\DancingFinch.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "/**\n * Plays a sequence, optionally looping. This method returns immediately. The sequence is\n * not played if it is invalid\n * @param sequence The Sequence to play\n * @param loop Set to true to loop forever, false to terminate after the end of the sequence\n */\n", "func_signal": "public void play(Sequence sequence, boolean loop)", "code": "{\n\tif (sequencer != null && sequence != null) {\n\t\ttry {\n\t\t\tsequencer.setSequence(sequence);\n\t\t\tsequencer.start();\n\t\t\tSystem.out.println(\"Playing MIDI\");\n\t\t\tthis.loop = loop;\n\t\t}\n\t\tcatch (InvalidMidiDataException e){\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "path": "NetbeansFinchProject\\SourceFiles\\Code\\customClasses\\DancingFinch\\MidiPlayer.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "/**\n * Causes the dancingFinch to execute its next move\n *\n */\n", "func_signal": "public void nextMove()", "code": "{\n\tif (clockwise)\n\t\tstate = clockwiseTransition[state];\n\telse \n\t\tstate = counterclockwiseTransition[state];\n\t\n\tchangeColor();\n\texecute(state);\n}", "path": "NetbeansFinchProject\\SourceFiles\\Code\\customClasses\\DancingFinch\\DancingFinch.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">\n", "func_signal": "private void initComponents()", "code": "{\n\n   startTime = 0;\n   prevBeepPressed = false;\n   dotLength = 800;\n   oneThreeThresh = 2 * dotLength;\n   threeSevenThresh = 6 * dotLength;\n   notStrict13Thresh = 6 * dotLength;\n   notStrict37Thresh = 12 * dotLength;\n   backspaceThresh = 20 * dotLength;\n   backspaceCount = 0;\n   pressCount = 0;\n   nPressCount = 0;\n\n   jScrollPane1 = new JScrollPane();\n   messageText = new JTextArea();\n   morseText = new JTextField();\n   beepButton = new JButton();\n   jScrollPane2 = new JScrollPane();\n   directionsText = new JTextArea();\n   jLabel1 = new JLabel();\n   jLabel2 = new JLabel();\n   strictTimingBox = new JCheckBox();\n   dotLengthSlider = new JSlider();\n   dotLengthLabel = new JLabel();\n   freqLabel = new JLabel();\n   freqSlider = new JSlider();\n   typeTimingBar = new JProgressBar();\n\n   setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n\n   messageText.setColumns(20);\n   messageText.setEditable(false);\n   messageText.setRows(5);\n   jScrollPane1.setViewportView(messageText);\n   messageText.getAccessibleContext().setAccessibleName(\"morseMessageBox\");\n\n   morseText.setEditable(false);\n   morseText.setFont(new Font(\"Bookman Old Style\", 1, 18));\n   morseText.setHorizontalAlignment(JTextField.CENTER);\n   morseText.setText(\".-.---.\");\n   morseText.setName(\"MorseLetter\"); // NOI18N\n\n   beepButton.setBackground(new Color(40, 0, 200));\n   beepButton.setText(\"Beep\");\n   beepButton.setName(\"BeepIndicator\"); // NOI18N\n   beepButton.addMouseListener(new MouseAdapter()\n   {\n   public void mousePressed(final MouseEvent evt)\n      {\n      beepButtonMousePressed(evt);\n      }\n\n   public void mouseReleased(final MouseEvent evt)\n      {\n      beepButtonMouseReleased(evt);\n      }\n   });\n   /*\n   beepButton.addActionListener(new java.awt.event.ActionListener() {\n      public void actionPerformed(java.awt.event.ActionEvent evt) {\n         beepButtonActionPerformed(evt);\n      }\n   });\n   beepButton.addPropertyChangeListener(new java.beans.PropertyChangeListener() {\n       public void propertyChange(java.beans.PropertyChangeEvent evt) {\n           beepButtonPropertyChange(evt);\n       }\n   });\n   beepButton.addChangeListener(new javax.swing.event.ChangeListener() {\n       public void stateChanged(javax.swing.event.ChangeEvent evt) {\n           beepButtonStateChanged(evt);\n       }\n   });\n   */\n\n   jScrollPane2.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);\n\n   directionsText.setColumns(20);\n   directionsText.setEditable(false);\n   directionsText.setFont(new Font(\"Arial\", 0, 10));\n   directionsText.setLineWrap(true);\n   directionsText.setRows(5);\n   directionsText.setText(\"Use the finch or the beep button to input morse code. What you're inputting will appear in the bottom box as dots and dashes and the translated message will appear in the center left box. Hold down beep to backspace. Strict Timing will enforce standard morse timing on input.\");\n   directionsText.setWrapStyleWord(true);\n   jScrollPane2.setViewportView(directionsText);\n\n   jLabel1.setText(\"Message\");\n\n   jLabel2.setText(\"Current Character\");\n\n   strictTimingBox.setText(\"Strict Timing\");\n   strictTimingBox.addActionListener(new ActionListener()\n   {\n   public void actionPerformed(final ActionEvent evt)\n      {\n      strictTimingBoxActionPerformed(evt);\n      }\n   });\n\n   dotLengthSlider.setMajorTickSpacing(50);\n   dotLengthSlider.setMaximum(1000);\n   dotLengthSlider.setMinimum(100);\n   dotLengthSlider.setPaintTicks(true);\n   dotLengthSlider.setValue(dotLength);\n   dotLengthSlider.addPropertyChangeListener(new PropertyChangeListener()\n   {\n   public void propertyChange(final PropertyChangeEvent evt)\n      {\n      dotLengthSliderPropertyChange(evt);\n      }\n   });\n   dotLengthSlider.addChangeListener(new ChangeListener()\n   {\n   public void stateChanged(final ChangeEvent evt)\n      {\n      dotLengthSliderStateChanged(evt);\n      }\n   });\n\n   dotLengthLabel.setText(\"Dot Length: 100ms\");\n\n   freqLabel.setText(\"Beep Frequency: 700Hz\");\n\n   freqSlider.setMaximum(10000);\n   freqSlider.setMinimum(20);\n   freqSlider.addPropertyChangeListener(new PropertyChangeListener()\n   {\n   public void propertyChange(final PropertyChangeEvent evt)\n      {\n      freqSliderPropertyChange(evt);\n      }\n   });\n   freqSlider.addChangeListener(new ChangeListener()\n   {\n   public void stateChanged(final ChangeEvent evt)\n      {\n      freqSliderStateChanged(evt);\n      }\n   });\n\n   typeTimingBar.setName(\"letter space\"); // NOI18N\n   typeTimingBar.setString(\"letter space\");\n   typeTimingBar.setStringPainted(true);\n\n   final GroupLayout layout = new GroupLayout(getContentPane());\n   getContentPane().setLayout(layout);\n   layout.setHorizontalGroup(\n         layout.createParallelGroup(GroupLayout.LEADING)\n               .add(layout.createSequentialGroup()\n               .addContainerGap()\n               .add(layout.createParallelGroup(GroupLayout.LEADING)\n                     .add(jScrollPane2, GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)\n                     .add(layout.createSequentialGroup()\n                     .add(layout.createParallelGroup(GroupLayout.CENTER)\n                           .add(morseText, GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)\n                           .add(jScrollPane1, GroupLayout.PREFERRED_SIZE, 224, GroupLayout.PREFERRED_SIZE)\n                           .add(jLabel1)\n                           .add(jLabel2))\n                     .addPreferredGap(LayoutStyle.RELATED)\n                     .add(layout.createParallelGroup(GroupLayout.LEADING)\n                     .add(GroupLayout.CENTER, dotLengthLabel)\n                     .add(GroupLayout.CENTER, dotLengthSlider, 0, 0, Short.MAX_VALUE)\n                     .add(GroupLayout.CENTER, freqLabel)\n                     .add(GroupLayout.CENTER, freqSlider, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)\n                     .add(layout.createSequentialGroup()\n                           .add(beepButton, GroupLayout.PREFERRED_SIZE, 64, GroupLayout.PREFERRED_SIZE)\n                           .addPreferredGap(LayoutStyle.RELATED)\n                           .add(strictTimingBox))\n                     .add(typeTimingBar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))\n               .addContainerGap())\n   );\n   layout.setVerticalGroup(\n         layout.createParallelGroup(GroupLayout.LEADING)\n               .add(layout.createSequentialGroup()\n               .addContainerGap()\n               .add(jScrollPane2, GroupLayout.PREFERRED_SIZE, 54, GroupLayout.PREFERRED_SIZE)\n               .addPreferredGap(LayoutStyle.RELATED)\n               .add(layout.createParallelGroup(GroupLayout.LEADING)\n                     .add(layout.createSequentialGroup()\n                           .add(2, 2, 2)\n                           .add(jLabel1)\n                           .add(2, 2, 2)\n                           .add(jScrollPane1, GroupLayout.PREFERRED_SIZE, 106, GroupLayout.PREFERRED_SIZE))\n                     .add(layout.createSequentialGroup()\n                     .add(dotLengthLabel)\n                     .add(1, 1, 1)\n                     .add(dotLengthSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\n                     .addPreferredGap(LayoutStyle.UNRELATED)\n                     .add(freqLabel)\n                     .add(1, 1, 1)\n                     .add(freqSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))\n               .add(10, 10, 10)\n               .add(jLabel2)\n               .addPreferredGap(LayoutStyle.RELATED)\n               .add(layout.createParallelGroup(GroupLayout.TRAILING)\n               .add(layout.createSequentialGroup()\n                     .add(morseText, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)\n                     .add(24, 24, 24))\n               .add(layout.createSequentialGroup()\n               .add(layout.createParallelGroup(GroupLayout.BASELINE)\n                     .add(beepButton, GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)\n                     .add(strictTimingBox))\n               .addPreferredGap(LayoutStyle.RELATED)\n               .add(typeTimingBar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)\n               .addContainerGap())))\n   );\n\n   morseText.getAccessibleContext().setAccessibleName(\"morseMorseBox\");\n   dotLengthSlider.getAccessibleContext().setAccessibleName(\"dotLengthSlider\");\n   dotLengthLabel.getAccessibleContext().setAccessibleName(\"Tick Length: 100ms\");\n\n   pack();\n   }", "path": "NetbeansFinchProject\\SourceFiles\\Code\\graphics\\morseCode\\MorseCodeFrame.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "/**\n * Fetch finch tilt and move x, y positions appropriately\n */\n", "func_signal": "public void update()", "code": "{\n   //X,Y axis switched for more intuitive control\n   //note that x movement is inverted.\n   int dx = (int)(-xScale * myFinch.getYAcceleration());\n\n   int dy = (int)(yScale * myFinch.getXAcceleration());\n\n   //update x and y positions\n   xPosition += dx;\n   yPosition += dy;\n\n   //test to prevent x/y from leaving set bounds\n   if (xPosition < minX)\n      {\n      xPosition = minX;\n      }\n   if (yPosition < minY)\n      {\n      yPosition = minY;\n      }\n   if (xPosition > maxX)\n      {\n      xPosition = maxX;\n      }\n   if (yPosition > maxY)\n      {\n      yPosition = maxY;\n      }\n   }", "path": "NetbeansFinchProject\\SourceFiles\\Code\\graphics\\searchGame\\SearchGameTiltControl.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "/**\n * Causes the dancingFinch to change to a different random color\n * within the nextColor array\n */\n", "func_signal": "private void changeColor()", "code": "{\n\tcolor += rng.nextInt(nextColor.length - 1) + 1;\n\tif (color >= nextColor.length) color -= nextColor.length;\n\tfinch.setLED(nextColor[color]);\n}", "path": "NetbeansFinchProject\\SourceFiles\\Code\\customClasses\\DancingFinch\\DancingFinch.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "/**\n * Sets the paused state. Music may not immediately pause\n * @param paused Set to true to pause the sequencer, false to restart\n */\n", "func_signal": "public void setPaused(boolean paused)", "code": "{\n\tif (this.paused != paused && sequencer != null) {\n\t\tthis.paused = paused;\n\t\tif (paused) \n\t\t\tsequencer.stop();\n\t\telse\n\t\t\tsequencer.start();\n\t}\n}", "path": "NetbeansFinchProject\\SourceFiles\\Code\\customClasses\\DancingFinch\\MidiPlayer.java", "repo_name": "StuyPulse/Finches-2011", "stars": 16, "license": "None", "language": "java", "size": 14808}
{"docstring": "/**\n * Checks whether the input is valid by comparing it to the validation criteria.\n * @return true if the data is valid and false if not\n */\n", "func_signal": "private boolean validate()", "code": "{\n    final boolean is_valid = _should_revalidate\n            ? _criteria.reset(getText().toString()).matches()\n            : _criteria.matches();\n    _should_revalidate = false;\n    return is_valid;\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidatedAutoCompleteEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/** Constructor */\n", "func_signal": "public ValidationEditText(Context context, AttributeSet attrs, int defStyle)", "code": "{\n    super(context, attrs, defStyle);\n\n    init(context, attrs);\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidationEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/**\n * Sets the validation to a predefined method.\n * @param validation a predefined validation\n * @see Validation\n */\n", "func_signal": "public void setValidation(Validation validation)", "code": "{\n    // This maintains that the input field is never in a state where it can't validate its input\n    if (validation != null)\n        setMatcherCriteria(validation._criteria);\n    else\n        setMatcherCriteria(Validation.NON_EMPTY._criteria);\n    _should_revalidate = true;\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidatedEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/**\n * Creates the criteria for valid input given a value.\n * @param from_value value associated with a {@link Validation}\n * @return the criteria for passing the associated validation\n */\n", "func_signal": "public static String getCriteria(int from_value)", "code": "{\n    for(Validation validation : EnumSet.allOf(Validation.class))\n        if (validation._value == from_value)\n            return validation._criteria;\n\n    throw new IllegalArgumentException(from_value + \" is not a valid Validation.\");\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidationEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/**\n * Checks whether the input is valid by comparing it to the validation criteria and <b>displays the result to the\n * user</b>. Indicates to the user through an animation that the input is invalid.\n * @return true if the data is valid false if not\n */\n", "func_signal": "public boolean showValidity()", "code": "{\n    if (validate())\n        return true;\n\n    indicateInvalidInput();\n    return false;\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidationEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/**\n * Checks whether the input is valid by comparing it to the validation criteria and <b>displays the result to the\n * user</b>. Indicates to the user through an animation that the input is invalid.\n * @return true if the data is valid false if not\n */\n", "func_signal": "public boolean showValidity()", "code": "{\n    if (validate())\n        return true;\n\n    indicateInvalidInput();\n    return false;\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidatedEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/**\n * Checks whether the input is valid by comparing it to the validation criteria.\n * @return true if the data is valid and false if not\n */\n", "func_signal": "private boolean validate()", "code": "{\n    final boolean is_valid = _should_revalidate\n                                ? _criteria.reset(getText().toString()).matches()\n                                : _criteria.matches();\n    _should_revalidate = false;\n    return is_valid;\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidatedEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/**\n * Creates the criteria for valid input given a value.\n * @param from_value value associated with a {@link Validation}\n * @return the criteria for passing the associated validation\n */\n", "func_signal": "public static String getCriteria(int from_value)", "code": "{\n    for(Validation validation : EnumSet.allOf(Validation.class))\n        if (validation._value == from_value)\n            return validation._criteria;\n\n    throw new IllegalArgumentException(from_value + \" is not a valid Validation.\");\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidatedEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/**\n * Animates the {@linkplain EditText input field} to indicate that the input is invalid.\n */\n", "func_signal": "private void indicateInvalidInput()", "code": "{\n    requestFocus();\n    startAnimation(_invalid_input_indicator);\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidationEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/**\n * Initializes the validation decoration to the {@link EditText}. After initialization, the input field can validate\n * its input and indicate when the input is invalid.\n * @param context the given context\n * @param attributes the input field's attributes\n */\n", "func_signal": "private void init(Context context, AttributeSet attributes)", "code": "{\n    if (attributes != null) {\n        final TypedArray a = getContext().obtainStyledAttributes(attributes, R.styleable.ValidatedEditText);\n        // Sets the criteria based on the validation method chosen in XML\n        setMatcherCriteria(Validation.getCriteria(a.getInt(R.styleable.ValidatedEditText_validation,\n                Validation.NON_EMPTY._value)));\n        // Sets the criteria based on the custom criteria specified in XML\n        // Notice that this will override a validation method chosen in XML\n        final String criteria = a.getString(R.styleable.ValidatedEditText_custom_criteria);\n        if (criteria != null)\n            setMatcherCriteria(criteria);\n        // Sets the invalid input indicator, the default is the provided shake animation\n        final int invalid_input_indicator = a.getResourceId(R.styleable.ValidatedEditText_invalid_input_indicator,\n                R.anim.shake);\n        _invalid_input_indicator = AnimationUtils.loadAnimation(context, invalid_input_indicator);\n        a.recycle();\n    } else {\n        setMatcherCriteria(Validation.NON_EMPTY._criteria);\n        _invalid_input_indicator = AnimationUtils.loadAnimation(context, R.anim.shake);\n    }\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidationEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/**\n * Initializes the validation decoration to the {@link android.widget.EditText}. After initialization, the input field can validate\n * its input and indicate when the input is invalid.\n * @param context the given context\n * @param attributes the input field's attributes\n */\n", "func_signal": "private void init(Context context, AttributeSet attributes)", "code": "{\n    if (attributes != null) {\n        final TypedArray a = getContext().obtainStyledAttributes(attributes, R.styleable.ValidatedEditText);\n        // Sets the criteria based on the validation method chosen in XML\n        setMatcherCriteria(ValidatedEditText.Validation.getCriteria(a.getInt(R.styleable.ValidatedEditText_validation,\n                ValidatedEditText.Validation.NON_EMPTY._value)));\n        // Sets the criteria based on the custom criteria specified in XML\n        // Notice that this will override a validation method chosen in XML\n        final String criteria = a.getString(R.styleable.ValidatedEditText_custom_criteria);\n        if (criteria != null)\n            setMatcherCriteria(criteria);\n        // Sets the invalid input indicator, the default is the provided shake animation\n        final int invalid_input_indicator = a.getResourceId(R.styleable.ValidatedEditText_invalid_input_indicator,\n                R.anim.shake);\n        _invalid_input_indicator = AnimationUtils.loadAnimation(context, invalid_input_indicator);\n        a.recycle();\n    } else {\n        setMatcherCriteria(ValidatedEditText.Validation.NON_EMPTY._criteria);\n        _invalid_input_indicator = AnimationUtils.loadAnimation(context, R.anim.shake);\n    }\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidatedAutoCompleteEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/**\n * Checks whether the input is valid by comparing it to the validation criteria.\n * @return true if the data is valid and false if not\n */\n", "func_signal": "private boolean validate()", "code": "{\n    final boolean is_valid = _should_revalidate\n                                ? _criteria.reset(getText().toString()).matches()\n                                : _criteria.matches();\n    _should_revalidate = false;\n    return is_valid;\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidationEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/**\n * Animates the {@linkplain android.widget.EditText input field} to indicate that the input is invalid.\n */\n", "func_signal": "private void indicateInvalidInput()", "code": "{\n    requestFocus();\n    startAnimation(_invalid_input_indicator);\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidatedAutoCompleteEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/**\n * Sets the validation to a predefined method.\n * @param validation a predefined validation\n * @see com.keepandshare.android.ui.ValidatedEditText.Validation\n */\n", "func_signal": "public void setValidation(ValidatedEditText.Validation validation)", "code": "{\n    // This maintains that the input field is never in a state where it can't validate its input\n    if (validation != null)\n        setMatcherCriteria(validation._criteria);\n    else\n        setMatcherCriteria(ValidatedEditText.Validation.NON_EMPTY._criteria);\n    _should_revalidate = true;\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidatedAutoCompleteEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/** Constructor */\n", "func_signal": "public ValidatedAutoCompleteEditText(Context context, AttributeSet attrs)", "code": "{\n    super(context, attrs);\n\n    init(context, attrs);\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidatedAutoCompleteEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/** Constructor */\n", "func_signal": "public ValidationEditText(Context context, AttributeSet attrs)", "code": "{\n    super(context, attrs);\n\n    init(context, attrs);\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidationEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/** Constructor */\n", "func_signal": "public ValidatedEditText(Context context, AttributeSet attrs)", "code": "{\n    super(context, attrs);\n\n    init(context, attrs);\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidatedEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/**\n * Checks whether the input is valid by comparing it to the validation criteria and <b>displays the result to the\n * user</b>. Indicates to the user through an animation that the input is invalid.\n * @return true if the data is valid false if not\n */\n", "func_signal": "public boolean showValidity()", "code": "{\n    if (validate())\n        return true;\n\n    indicateInvalidInput();\n    return false;\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidatedAutoCompleteEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/**\n * Sets the validation to a predefined method.\n * @param validation a predefined validation\n * @see Validation\n */\n", "func_signal": "public void setValidation(Validation validation)", "code": "{\n    // This maintains that the input field is never in a state where it can't validate its input\n    if (validation != null)\n        setMatcherCriteria(validation._criteria);\n    else\n        setMatcherCriteria(Validation.NON_EMPTY._criteria);\n    _should_revalidate = true;\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidationEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/**\n * Initializes the validation decoration to the {@link EditText}. After initialization, the input field can validate\n * its input and indicate when the input is invalid.\n * @param context the given context\n * @param attributes the input field's attributes\n */\n", "func_signal": "private void init(Context context, AttributeSet attributes)", "code": "{\n    if (attributes != null) {\n        final TypedArray a = getContext().obtainStyledAttributes(attributes, R.styleable.ValidatedEditText);\n        // Sets the criteria based on the validation method chosen in XML\n        setMatcherCriteria(Validation.getCriteria(a.getInt(R.styleable.ValidatedEditText_validation,\n                Validation.NON_EMPTY._value)));\n        // Sets the criteria based on the custom criteria specified in XML\n        // Notice that this will override a validation method chosen in XML\n        final String criteria = a.getString(R.styleable.ValidatedEditText_custom_criteria);\n        if (criteria != null)\n            setMatcherCriteria(criteria);\n        // Sets the invalid input indicator, the default is the provided shake animation\n        final int invalid_input_indicator = a.getResourceId(R.styleable.ValidatedEditText_invalid_input_indicator,\n                R.anim.shake);\n        _invalid_input_indicator = AnimationUtils.loadAnimation(context, invalid_input_indicator);\n        a.recycle();\n    } else {\n        setMatcherCriteria(Validation.NON_EMPTY._criteria);\n        _invalid_input_indicator = AnimationUtils.loadAnimation(context, R.anim.shake);\n    }\n}", "path": "library\\src\\com\\zoumapps\\validation\\ValidatedEditText.java", "repo_name": "hazemfarahat/ZoumValidation", "stars": 27, "license": "None", "language": "java", "size": 590}
{"docstring": "/**\n * @return String array representation of key set\n */\n", "func_signal": "private String[] getKeys()", "code": "{\n    String[] tokens = new String[this.tokensNum];\n    Iterator token = this.kGramsTable.keySet().iterator();\n    for (int i = 0; token.hasNext(); i++) {\n        tokens[i] = token.next().toString();\n    }\n    return tokens;\n}", "path": "analyzer\\src\\java\\ru\\goodsReview\\analyzer\\KGrams.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n creating random indexes\n @param arraySize size of array\n @return int array of random indexes\n */\n", "func_signal": "public static int[] createRandomIndexes(int arraySize)", "code": "{\n    int[] randomIndexes = new int[arraySize];\n    int i, tmp, rand1, rand2;\n    Random randGen = new Random();\n    for (i = 0; i < arraySize; i++) {\n        randomIndexes[i] = i;\n    }\n    for (i = 0; i < arraySize; i++) {\n        rand1 = randGen.nextInt(arraySize);\n        rand2 = randGen.nextInt(arraySize);\n        tmp = randomIndexes[rand1];\n        randomIndexes[rand1] = randomIndexes[rand2];\n        randomIndexes[rand2] = tmp;\n    }\n    return randomIndexes;\n}", "path": "analyzer\\src\\java\\ru\\goodsReview\\analyzer\\KGrams.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * Extract word\n * @param word\n * @return\n * @throws java.io.UnsupportedEncodingException\n */\n", "func_signal": "public String wordCharacteristic(String word) throws UnsupportedEncodingException", "code": "{\n    int wl = word.length(); boolean b = true;\n    for (int i = 0; i < wl; ++i) {\n        if (!isRussianLetter(word.charAt(i))) {\n            b = false;\n            break;\n        }\n    }\n\n//        TODO fix this (split by !, but \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0439! - returns \"\"\n    if (!b) {\n        return \"\";\n    }\n\n    sc = new Scanner(analyzer.getInputStream(),CHARSET);\n    ps = new PrintStream(analyzer.getOutputStream(),true,CHARSET);\n\n    ps.println(word);\n    String wordCharacteristic = sc.nextLine();\n\n\n    int pos1,pos2;\n\n    pos2 = (pos1 = (wordCharacteristic.indexOf('=') + 1));\n    while (Character.isUpperCase(wordCharacteristic.charAt(pos2))) {\n        pos2++;\n    }\n    String wordCharact = wordCharacteristic.substring(pos1, pos2);\n    if(wordCharact == null){\n        return \"\";\n    }\n    return wordCharact;\n}", "path": "analyzer\\src\\java\\ru\\goodsReview\\analyzer\\wordAnalyzer\\MystemAnalyzer.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * create frequency dictionary from normalized words\n *\n * @throws FileNotFoundException\n */\n", "func_signal": "private static void frequencyDictionaryFromNormalized() throws FileNotFoundException", "code": "{\n    Scanner scanner = new Scanner(new File(\"normalized_words.txt\"));\n    HashMap<String, Integer> frequencyDictionary = new HashMap<String,Integer>();\n    String token;\n    while (scanner.hasNext()) {\n        token = scanner.next();\n        if (!token.equals(\"\")) {\n            if (hasWordBadSymbols(token)) {\n//                    add word to dictionary\n                FrequencyDictionary.addWord(frequencyDictionary, token);\n            }\n        }\n    }\n//        sort hash map\n    frequencyDictionary = (HashMap<String, Integer>) HashMapUtil.sortByValue(frequencyDictionary);\n\n//        write it to file\n    PrintWriter printWriter = new PrintWriter(new File(\"dictionaryFromNormalized.txt\"));\n    for (String str : frequencyDictionary.keySet()) {\n        printWriter.println(str + \" \" + frequencyDictionary.get(str));\n    }\n    printWriter.close();\n\n}", "path": "analyzer\\src\\java\\ru\\goodsReview\\analyzer\\util\\dictionary\\DictionaryGenerator.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * crate frequency dictionary from string argument\n *\n * @param str\n * @return\n */\n", "func_signal": "public static HashMap<String, Integer> createFrequencyDictionary(final String str)", "code": "{\n    HashMap<String, Integer> frequencyDictionary = new HashMap<String, Integer>();\n    StringTokenizer stringTokenizer = new StringTokenizer(str, \" ,\");\n    while (stringTokenizer.hasMoreTokens()) {\n        addWord(frequencyDictionary, stringTokenizer.nextToken());\n    }\n    return frequencyDictionary;\n}", "path": "analyzer\\src\\java\\ru\\goodsReview\\analyzer\\util\\FrequencyDictionary.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * constructor 1\n * @param id\n * @param categoryId\n * @param name\n * @param description\n * @param popularity\n */\n", "func_signal": "public Product(long id, long categoryId, String name, String description, int popularity)", "code": "{\n    this.id = id;\n    this.categoryId = categoryId;\n    this.name = name;\n    this.description = description;\n    this.popularity = popularity;\n}", "path": "core\\src\\java\\ru\\goodsReview\\core\\model\\Product.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * method for determine part of speech of word by means of Mystem\n * @param word which part of speech we want know\n * @return Part of speech\n * @throws UnsupportedEncodingException\n */\n", "func_signal": "public PartOfSpeech partOfSpeech(String word) throws UnsupportedEncodingException", "code": "{\n    if(this.wordCharacteristic(word).equals(\"A\")){\n        return PartOfSpeech.ADJECTIVE;\n    }\n    if(this.wordCharacteristic(word).equals(\"S\")){\n        return PartOfSpeech.NOUN;\n    }\n    if(this.wordCharacteristic(word).equals(\"ADV\")){\n        return PartOfSpeech.ADVERB;\n    }\n    if(this.wordCharacteristic(word).equals(\"V\")){\n        return PartOfSpeech.VERB;\n    }\n    if(this.wordCharacteristic(word).equals(\"PR\")){\n        return PartOfSpeech.PREPOSITION;\n    }\n    if(this.wordCharacteristic(word).equals(\"PART\")){\n        return PartOfSpeech.PARTICLE;\n    }\n    if(this.wordCharacteristic(word).equals(\"\")){\n        return PartOfSpeech.UNKNOWN;\n    }\n\n    return PartOfSpeech.UNKNOWN;\n}", "path": "analyzer\\src\\java\\ru\\goodsReview\\analyzer\\wordAnalyzer\\MystemAnalyzer.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * Returns specified number of most popular products.\n * @param n Number of products needed.\n * @return Specified number of most popular products.\n */\n", "func_signal": "public List<Product> getPopularProducts(int n)", "code": "{\n    List<Product> products = simpleJdbcTemplate.getJdbcOperations().query(\n            \"SELECT * FROM product ORDER BY popularity DESC LIMIT ?\", new Object[]{n}, new int[]{Types.INTEGER},\n            productMapper);\n    return products;\n}", "path": "storage\\src\\java\\ru\\goodsReview\\storage\\controller\\ProductDbController.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * add word to frequency dictionary\n *\n * @param dictionary\n * @param word\n */\n", "func_signal": "public static void addWord(final Map<String, Integer> dictionary, final String word)", "code": "{\n    if (dictionary.containsKey(word)) {\n        Integer val = dictionary.get(word);\n        val++;\n        dictionary.put(word, val);\n    } else {\n        dictionary.put(word, 1);\n    }\n}", "path": "analyzer\\src\\java\\ru\\goodsReview\\analyzer\\util\\FrequencyDictionary.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * checks if word has bad symbols\n *\n * @param word word to check\n * @return false - if word contains bad symbols\n */\n", "func_signal": "private static boolean hasWordBadSymbols(String word)", "code": "{\n    char[] wordCharacters = word.toCharArray();\n    for (int i = 0; i < wordCharacters.length; i++) {\n        if (!isRussianLetter(wordCharacters[i])) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "analyzer\\src\\java\\ru\\goodsReview\\analyzer\\util\\dictionary\\DictionaryGenerator.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * create new ReviewTokens from review\n *\n * @param review source String\n */\n", "func_signal": "public ReviewTokens(String review, MystemAnalyzer mystemAnalyzer, MapDictionary opinionDictionary) throws IOException, InterruptedException", "code": "{\n    Token token;\n    tokensList = new ArrayList<Token>();\n    // StringTokenizer stringTokenizer = new StringTokenizer(review, \" .,-\u2014:;!()+\\'\\\"\\\\\u00ab\u00bb\");\n    StringTokenizer stringTokenizer = new StringTokenizer(review, \" \");\n    while (stringTokenizer.hasMoreElements()) {\n        String currToken = stringTokenizer.nextToken();\n        currToken = currToken.trim();\n        currToken = currToken.toLowerCase();\n\n//            TODO it's strange, but here we can get empty string\n        if (currToken.equals(\"\")) {\n            System.out.println(\"fail\");\n            continue;\n        }\n\n        token = new Token(currToken);\n\n        if (PyMorphyAnalyzer.isRussianWord(currToken)) {\n            PartOfSpeech partOfSpeech = mystemAnalyzer.partOfSpeech(currToken);\n            if (partOfSpeech.equals(PartOfSpeech.ADJECTIVE)) {\n//                    if(normDictionary.contains(currToken)){\n                //  String normToken = (String)normDictionary.getDictionary().get(currToken);\n                //   System.out.println(currToken+\" \"+mystemAnalyzer.normalizer(currToken));\n                String normToken = mystemAnalyzer.normalizer(currToken);\n\n                if (opinionDictionary.contains(normToken)) {\n                    token.setMystemPartOfSpeech(PartOfSpeech.ADJECTIVE);\n                } else {\n                    token.setMystemPartOfSpeech(PartOfSpeech.UNKNOWN);\n                }\n//                    }else{\n//                        token.setMystemPartOfSpeech(PartOfSpeech.UNKNOWN);\n//                    }\n            } else {\n                if (partOfSpeech.equals(PartOfSpeech.NOUN)) {\n                    String normToken = mystemAnalyzer.normalizer(currToken);\n                    //if(featureDictionary.contains(normToken)) {\n                    // System.out.println(normToken);\n                    token.setMystemPartOfSpeech(PartOfSpeech.NOUN);\n                    /* }else{\n                        token.setMystemPartOfSpeech(PartOfSpeech.UNKNOWN);\n                    }*/\n                } else {\n                    token.setMystemPartOfSpeech(partOfSpeech);\n                }\n            }\n        } else {\n            token.setMystemPartOfSpeech(PartOfSpeech.UNKNOWN);\n        }\n\n        tokensList.add(token);\n    }\n\n}", "path": "analyzer\\src\\java\\ru\\goodsReview\\analyzer\\util\\sentence\\ReviewTokens.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * Checks if letter belongs to russian alphabet.\n * @param letter The letter itself.\n * @return True if letter is russian, false \u2014 otherwise.\n */\n", "func_signal": "private static boolean isRussianLetter (char letter)", "code": "{\n    if ((letter >= 0x0410) && (letter <= 0x044F)) {\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "analyzer\\src\\java\\ru\\goodsReview\\analyzer\\wordAnalyzer\\MystemAnalyzer.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * @param categoryId id of category of this product\n * @param name name of this product\n * @param description description for this product\n * @param popularity product popularity\n */\n", "func_signal": "public Product(long categoryId, String name, String description, int popularity)", "code": "{\n    this.categoryId = categoryId;\n    this.name = name;\n    this.description = description;\n    this.popularity = popularity;\n}", "path": "core\\src\\java\\ru\\goodsReview\\core\\model\\Product.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * extracts words from xml dataset\n *\n * @throws XPathExpressionException\n * @throws FileNotFoundException\n */\n", "func_signal": "private static void extractWordsFromDataset() throws XPathExpressionException, FileNotFoundException", "code": "{\n    XPath xPath = XPathFactory.newInstance().newXPath();\n    File file = new File(\"cameras.xml\");\n//            xPath expression for extract comment\n    XPathExpression xPathExpression = xPath.compile(\"//value[@columnNumber>'4']/text()\");\n//        read file in input source\n    InputSource inputSource = new InputSource(new FileReader(file));\n//        evaluate xPathExpresion\n    Object object = xPathExpression.evaluate(inputSource, XPathConstants.NODESET);\n    NodeList nodeList = (NodeList) object;\n    HashSet<String> hashSet = new HashSet<String>();\n//        go on all result object by this xPath\n    for (int i = 0; i < nodeList.getLength(); i++) {\n//            extract tokens from result\n        StringTokenizer stringTokenizer = new StringTokenizer(nodeList.item(i).getNodeValue(), \" .,-\u2014:;!()+\\'\\\"\\\\\u00ab\u00bb\");\n//            add every token to hash set\n        while (stringTokenizer.hasMoreTokens()) {\n            hashSet.add(stringTokenizer.nextToken());\n        }\n    }\n//        print hash set to file\n    PrintWriter printWriter = new PrintWriter(new File(\"source_dictionary.txt\"));\n    for (String str : hashSet) {\n        printWriter.println(str);\n    }\n    printWriter.close();\n\n}", "path": "analyzer\\src\\java\\ru\\goodsReview\\analyzer\\util\\dictionary\\DictionaryGenerator.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * Checks if letter belongs to russian alphabet.\n *\n * @param letter The letter itself.\n * @return True if letter is russian, false \u2014 otherwise.\n */\n", "func_signal": "private static boolean isRussianLetter(char letter)", "code": "{\n    if ((letter >= 0x0410) && (letter <= 0x044F)) {\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "analyzer\\src\\java\\ru\\goodsReview\\analyzer\\util\\dictionary\\DictionaryGenerator.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * create new pattern\n * @param p1 first token of pattern\n * @param p2 second token of pattern\n */\n", "func_signal": "public ThesisPattern(PartOfSpeech p1, PartOfSpeech p2) throws IOException", "code": "{\n    pattern = new ArrayList<PartOfSpeech>();\n    pattern.add(p1);\n    pattern.add(p2);\n//        mystemAnalyzer = new MystemAnalyzer();\n}", "path": "analyzer\\src\\java\\ru\\goodsReview\\analyzer\\util\\ThesisPattern.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * get n products, ordered by count of reviews on it\n * @param n\n * @return\n */\n", "func_signal": "public List<Product> getProductsMostComments(int n)", "code": "{\n    List<Product> products = simpleJdbcTemplate.getJdbcOperations().query(\n            \"select * from product where id in ( select product_id from review group by product_id order by count(*)) LIMIT ?\", new Object[]{n}, new int[]{Types.INTEGER},\n            productMapper);\n    return products;\n}", "path": "storage\\src\\java\\ru\\goodsReview\\storage\\controller\\ProductDbController.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * get all products, ordered by number of comments\n * @return\n */\n", "func_signal": "public List<Product> getProductsOrderByCommentsNum()", "code": "{\n    List<Product> products = simpleJdbcTemplate.getJdbcOperations().query(\n            \"select * from product where id in ( select product_id from review group by product_id order by count(*))\",\n            productMapper);\n    return products;\n}", "path": "storage\\src\\java\\ru\\goodsReview\\storage\\controller\\ProductDbController.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "//constructor\n", "func_signal": "public KGrams(List<String> list)", "code": "{\n    this.kGramTableColumnsNum = list.size();\n    this.kGramsTable = new HashMap<String, Boolean[]>();\n    this.kGramsTable = extractTokens(list);\n}", "path": "analyzer\\src\\java\\ru\\goodsReview\\analyzer\\KGrams.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n creating matrix, which contains as far as each document is far with each document\n similarity = (num of coincidences) / (num of tests)\n @param signatureMatrix\n @return\n */\n", "func_signal": "private double[][] createSimilarityMatrix(int[][] signatureMatrix)", "code": "{\n    double[][] similarityMatrix = new double[signatureMatrix.length][this.kGramTableColumnsNum];\n    int i, j, k;\n\n    for (i = 0; i < signatureMatrix.length; i++) {\n        for (j = 0; j < this.kGramTableColumnsNum; j++) {\n            for (k = j; k < this.kGramTableColumnsNum; k++) {\n                if (signatureMatrix[i][j] == signatureMatrix[i][k]) {\n                    similarityMatrix[j][k] += 1;\n                }\n            }\n        }\n    }\n    for (i = 0; i < this.kGramTableColumnsNum; i++) {\n        System.out.println();\n        for (j = 0; j < this.kGramTableColumnsNum; j++) {\n            similarityMatrix[i][j] /= similarityMatrix.length;\n            System.out.printf(\"%1$5.2g \", similarityMatrix[i][j]);\n        }\n    }\n    return similarityMatrix;\n}", "path": "analyzer\\src\\java\\ru\\goodsReview\\analyzer\\KGrams.java", "repo_name": "achugr/GoodsReview", "stars": 16, "license": "None", "language": "java", "size": 56172}
{"docstring": "/**\n * @see org.newdawn.slick.BasicGame#render(org.newdawn.slick.GameContainer, org.newdawn.slick.Graphics)\n */\n", "func_signal": "public void render(GameContainer container, Graphics g)", "code": "{\n\tg.drawString(\"Press A, W, Left, Up, space, mouse button 1,and gamepad controls\",10,50);\n\tg.drawString(message,100,150);\n}", "path": "Slick\\src\\org\\newdawn\\slick\\tests\\InputProviderTest.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * Create a new world simulation with default settings\n */\n", "func_signal": "public World()", "code": "{\n\tthis(DEFAULT_LEFT_BOUND,DEFAULT_TOP_BOUND,DEFAULT_RIGHT_BOUND,DEFAULT_BOTTOM_BOUND\n\t\t ,DEFAULT_GRAVITY, DEFAULT_ITERATIONS);\n}", "path": "fizzy\\src\\org\\newdawn\\fizzy\\World.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * @see org.newdawn.slick.BasicGame#init(org.newdawn.slick.GameContainer)\n */\n", "func_signal": "public void init(GameContainer container) throws SlickException", "code": "{\n\ttry {\n            Image img = new Image(2400, 2400);\n            img.getGraphics();\n            img.destroy();\n            img = new Image(2400, 2400);\n            img.getGraphics();\n        } catch (Exception ex) {\n        \tex.printStackTrace();\n        }\n}", "path": "Slick\\src\\org\\newdawn\\slick\\tests\\ImageMemTest.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * Create a new world simulation\n * \n * @param iterations The number of iterations to apply integration across, higher number\n * becomes more accurate but slower.\n */\n", "func_signal": "public World(int iterations)", "code": "{\n\tthis(DEFAULT_LEFT_BOUND,DEFAULT_TOP_BOUND,DEFAULT_RIGHT_BOUND,DEFAULT_BOTTOM_BOUND\n\t\t\t ,DEFAULT_GRAVITY, iterations);\n}", "path": "fizzy\\src\\org\\newdawn\\fizzy\\World.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * @see org.newdawn.noodles.object.FieldEncoder#encode(java.io.DataOutputStream, java.lang.Object)\n */\n", "func_signal": "public void encode(DataOutputStream dout, Object value) throws IOException", "code": "{\n\ttry {\n\t\tdout.writeFloat(field.getFloat(value));\n\t} catch (IllegalArgumentException e) {\n\t\tthrow new IOException(\"Failed to get: \"+field);\n\t} catch (IllegalAccessException e) {\n\t\tthrow new IOException(\"Failed to get: \"+field);\n\t}\n}", "path": "commet\\src\\org\\newdawn\\noodles\\object\\encoders\\FloatEncoder.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * Entry point to our test\n * \n * @param argv The arguments to pass into the test\n */\n", "func_signal": "public static void main(String[] argv)", "code": "{\n\ttry {\n\t\tAppGameContainer container = new AppGameContainer(new InputProviderTest());\n\t\tcontainer.setDisplayMode(800,600,false);\n\t\tcontainer.start();\n\t} catch (SlickException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "Slick\\src\\org\\newdawn\\slick\\tests\\InputProviderTest.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * Update the world\n * \n * @param timeStep The amount of time to simulate\n \t */\n", "func_signal": "public void update(float timeStep)", "code": "{\n\tjboxWorld.setContinuousPhysics(true);\n\tjboxWorld.setPositionCorrection(true);\n\tjboxWorld.setWarmStarting(true);\n\t\n\tjboxWorld.step(timeStep, iterations);\n}", "path": "fizzy\\src\\org\\newdawn\\fizzy\\World.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * @see org.newdawn.slick.BasicGame#init(org.newdawn.slick.GameContainer)\n */\n", "func_signal": "public void init(GameContainer container) throws SlickException", "code": "{\n\tprovider = new InputProvider(container.getInput());\n\tprovider.addListener(this);\n\t\n\tprovider.bindCommand(new KeyControl(Input.KEY_LEFT), run);\n\tprovider.bindCommand(new KeyControl(Input.KEY_A), run);\n\tprovider.bindCommand(new ControllerDirectionControl(0, ControllerDirectionControl.LEFT), run);\n\tprovider.bindCommand(new KeyControl(Input.KEY_UP), jump);\n\tprovider.bindCommand(new KeyControl(Input.KEY_W), jump);\n\tprovider.bindCommand(new ControllerDirectionControl(0, ControllerDirectionControl.UP), jump);\n\tprovider.bindCommand(new KeyControl(Input.KEY_SPACE), attack);\n\tprovider.bindCommand(new MouseButtonControl(0), attack);\n\tprovider.bindCommand(new ControllerButtonControl(0, 1), attack);\n}", "path": "Slick\\src\\org\\newdawn\\slick\\tests\\InputProviderTest.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * Fire a notification to all listeners that a collision has occured\n * \n * @param bodyA The first body in the collision\n * @param bodyB The second body in the collision\n */\n", "func_signal": "private void fireCollision(Body bodyA, Body bodyB)", "code": "{\n\tCollisionEvent event = new CollisionEvent(bodyA, bodyB);\n\tfor (int i=0;i<listeners.size();i++) {\n\t\tlisteners.get(i).collided(event);\n\t}\n}", "path": "fizzy\\src\\org\\newdawn\\fizzy\\World.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * Fire a notification to all listeners that a separation has occured\n * \n * @param bodyA The first body in the separation\n * @param bodyB The second body in the separation\n */\n", "func_signal": "private void fireSeparated(Body bodyA, Body bodyB)", "code": "{\n\tCollisionEvent event = new CollisionEvent(bodyA, bodyB);\n\tfor (int i=0;i<listeners.size();i++) {\n\t\tlisteners.get(i).separated(event);\n\t}\t\n}", "path": "fizzy\\src\\org\\newdawn\\fizzy\\World.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * @see org.newdawn.noodles.object.FieldEncoder#decode(java.io.DataInputStream, java.lang.Object)\n */\n", "func_signal": "public void decode(DataInputStream din, Object value) throws IOException", "code": "{\n\ttry {\n\t\tfield.setByte(value, din.readByte());\n\t} catch (IllegalArgumentException e) {\n\t\tthrow new IOException(\"Failed to set: \"+field);\n\t} catch (IllegalAccessException e) {\n\t\tthrow new IOException(\"Failed to set: \"+field);\n\t}\n}", "path": "commet\\src\\org\\newdawn\\noodles\\object\\encoders\\ByteEncoder.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * Create a new encoder\n * \n * @param field The field to be maintained\n */\n", "func_signal": "public FloatEncoder(Field field)", "code": "{\n\tthis.field = field;\n\tfield.setAccessible(true);\n}", "path": "commet\\src\\org\\newdawn\\noodles\\object\\encoders\\FloatEncoder.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * Create a new encoder\n * \n * @param field The field to be maintained\n */\n", "func_signal": "public ByteEncoder(Field field)", "code": "{\n\tthis.field = field;\n\tfield.setAccessible(true);\n}", "path": "commet\\src\\org\\newdawn\\noodles\\object\\encoders\\ByteEncoder.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * Create a new world simulation \n * \n * @param worldWidth The width of the physics world\n * @param worldHeight The height of the physics world\n */\n", "func_signal": "public World(float worldWidth, float worldHeight)", "code": "{\n\tthis(-worldWidth/2,-worldHeight/2,worldWidth/2,worldHeight/2\n\t\t ,DEFAULT_GRAVITY, DEFAULT_ITERATIONS);\n}", "path": "fizzy\\src\\org\\newdawn\\fizzy\\World.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * Remove a body from the world\n * \n * @param body The body to be removed from the world\n */\n", "func_signal": "public void remove(Body body)", "code": "{\n\tArrayList<org.jbox2d.collision.Shape> shapes = body.getShape().getJBoxShapes();\n\t\n\tfor (int i=0;i<shapes.size();i++) {\n\t\tshapeMap.remove(shapes.get(i));\n\t}\n\tbody.removeFromWorld(this);\n\tbodies.remove(body);\n}", "path": "fizzy\\src\\org\\newdawn\\fizzy\\World.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * Create a new world simulation\n * \n * @param x1 The left bound of the physics world\n * @param y1 The top bound of the physics world\n * @param x2 The right bound of the physics world\n * @param y2 The bottom bound of the physics world\n * @param g The gravity to apply\n * @param iterations The number of iterations to integrate over\n */\n", "func_signal": "public World(float x1, float y1, float x2, float y2, float g, float iterations)", "code": "{\n\tthis.iterations = 10;\n\t\n\tAABB m_worldAABB = new AABB();\n\tm_worldAABB.lowerBound = new Vec2(x1, y1);\n\tm_worldAABB.upperBound = new Vec2(x2, y2);\n\tVec2 gravity = new Vec2(0.0f, g);\n\tboolean doSleep = true;\n\tjboxWorld = new org.jbox2d.dynamics.World(m_worldAABB, gravity, doSleep);\n\tjboxWorld.setContactListener(new ProxyContactListener());\t\t\n}", "path": "fizzy\\src\\org\\newdawn\\fizzy\\World.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * @see org.newdawn.noodles.object.FieldEncoder#encode(java.io.DataOutputStream, java.lang.Object)\n */\n", "func_signal": "public void encode(DataOutputStream dout, Object value) throws IOException", "code": "{\n\ttry {\n\t\tdout.writeByte(field.getByte(value));\n\t} catch (IllegalArgumentException e) {\n\t\tthrow new IOException(\"Failed to get: \"+field);\n\t} catch (IllegalAccessException e) {\n\t\tthrow new IOException(\"Failed to get: \"+field);\n\t}\n}", "path": "commet\\src\\org\\newdawn\\noodles\\object\\encoders\\ByteEncoder.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * Entry point to our test\n * \n * @param argv The arguments to pass into the test\n */\n", "func_signal": "public static void main(String[] argv)", "code": "{\n\ttry {\n\t\tAppGameContainer container = new AppGameContainer(new ImageMemTest());\n\t\tcontainer.setDisplayMode(800,600,false);\n\t\tcontainer.start();\n\t} catch (SlickException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "Slick\\src\\org\\newdawn\\slick\\tests\\ImageMemTest.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * @see org.newdawn.noodles.object.FieldEncoder#decode(java.io.DataInputStream, java.lang.Object)\n */\n", "func_signal": "public void decode(DataInputStream din, Object value) throws IOException", "code": "{\n\ttry {\n\t\tfield.setFloat(value, din.readFloat());\n\t} catch (IllegalArgumentException e) {\n\t\tthrow new IOException(\"Failed to set: \"+field);\n\t} catch (IllegalAccessException e) {\n\t\tthrow new IOException(\"Failed to set: \"+field);\n\t}\n}", "path": "commet\\src\\org\\newdawn\\noodles\\object\\encoders\\FloatEncoder.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/**\n * Add a body to the world\n * \n * @param body The body to be added to the world\n */\n", "func_signal": "public void add(Body body)", "code": "{\n\tbody.addToWorld(this);\n\tArrayList<org.jbox2d.collision.Shape> shapes = body.getShape().getJBoxShapes();\n\t\n\tfor (int i=0;i<shapes.size();i++) {\n\t\tshapeMap.put(shapes.get(i), body);\n\t}\n\tbodies.add(body);\n}", "path": "fizzy\\src\\org\\newdawn\\fizzy\\World.java", "repo_name": "joshmarcus/slick2d", "stars": 22, "license": "None", "language": "java", "size": 34806}
{"docstring": "/* (non-Javadoc)\n * @see android.os.AsyncTask#onPostExecute(java.lang.Object)\n */\n", "func_signal": "@Override\nprotected void onPostExecute(String result)", "code": "{\n    dialog.dismiss();\n    TextView tv_tag = (TextView) findViewById(R.id.result_tv);\n    if (result != null && result.length() > 0) tv_tag.setText(result);\n}", "path": "src\\net\\kazzz\\NFCFeliCaReader.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/**\n * \u51e6\u7406\u7a2e\u5225\u3092\u53d6\u5f97\u3057\u307e\u3059\n * <pre>http://sourceforge.jp/projects/felicalib/wiki/suica\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059</pre>\n * @param proc \u51e6\u7406\u30bf\u30a4\u30d7\u3092\u30bb\u30c3\u30c8\n * @return String \u51e6\u7406\u30bf\u30a4\u30d7\u304c\u6587\u5b57\u5217\u3067\u623b\u308a\u307e\u3059\n */\n", "func_signal": "public static final String getProcessType(int proc)", "code": "{\n    switch (proc & 0xff) {\n        case 0x01: return \"\u904b\u8cc3\u652f\u6255(\u6539\u672d\u51fa\u5834)\";\n        case 0x02: return \"\u30c1\u30e3\u30fc\u30b8\";\n        case 0x03: return \"\u5238\u8cfc(\u78c1\u6c17\u5238\u8cfc\u5165\";\n        case 0x04: return \"\u7cbe\u7b97\";\n        case 0x05: return \"\u7cbe\u7b97(\u5165\u5834\u7cbe\u7b97)\";\n        case 0x06: return \"\u7a93\u51fa(\u6539\u672d\u7a93\u53e3\u51e6\u7406)\";\n        case 0x07: return \"\u65b0\u898f(\u65b0\u898f\u767a\u884c)\";\n        case 0x08: return \"\u63a7\u9664(\u7a93\u53e3\u63a7\u9664)\";\n        case 0x0d: return \"\u30d0\u30b9(PiTaPa\u7cfb)\";    //byBus\n        case 0x0f: return \"\u30d0\u30b9(IruCa\u7cfb)\";     //byBus\n        case 0x11: return \"\u518d\u767a(\u518d\u767a\u884c\u51e6\u7406)\";\n        case 0x13: return \"\u652f\u6255(\u65b0\u5e79\u7dda\u5229\u7528)\";\n        case 0x14: return \"\u5165A(\u5165\u5834\u6642\u30aa\u30fc\u30c8\u30c1\u30e3\u30fc\u30b8)\";\n        case 0x15: return \"\u51faA(\u51fa\u5834\u6642\u30aa\u30fc\u30c8\u30c1\u30e3\u30fc\u30b8)\";\n        case 0x1f: return \"\u5165\u91d1(\u30d0\u30b9\u30c1\u30e3\u30fc\u30b8)\";            //byBus\n        case 0x23: return \"\u5238\u8cfc (\u30d0\u30b9\u8def\u9762\u96fb\u8eca\u4f01\u753b\u5238\u8cfc\u5165)\";  //byBus\n        case 0x46: return \"\u7269\u8ca9\";                 //sales\n        case 0x48: return \"\u7279\u5178(\u7279\u5178\u30c1\u30e3\u30fc\u30b8)\";\n        case 0x49: return \"\u5165\u91d1(\u30ec\u30b8\u5165\u91d1)\";         //sales\n        case 0x4a: return \"\u7269\u8ca9\u53d6\u6d88\";              //sales\n        case 0x4b: return \"\u5165\u7269 (\u5165\u5834\u7269\u8ca9)\";        //sales\n        case 0xc6: return \"\u7269\u73fe (\u73fe\u91d1\u4f75\u7528\u7269\u8ca9)\";     //sales\n        case 0xcb: return \"\u5165\u7269 (\u5165\u5834\u73fe\u91d1\u4f75\u7528\u7269\u8ca9)\"; //sales\n        case 0x84: return \"\u7cbe\u7b97 (\u4ed6\u793e\u7cbe\u7b97)\";\n        case 0x85: return \"\u7cbe\u7b97 (\u4ed6\u793e\u5165\u5834\u7cbe\u7b97)\";\n        default:\n            return \"???\";\n    }\n}", "path": "src\\net\\kazzz\\felica\\suica\\Suica.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/**\n * \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092Assets\u304b\u3089\u30b7\u30b9\u30c6\u30e0\u5074\u3078\u30b3\u30d4\u30fc\u3057\u307e\u3059\n * @throws IOException\n */\n", "func_signal": "private void copyDataBase() throws IOException", "code": "{\n\n    //Open your local db as the input stream\n    InputStream in = this.context.getAssets().open(DB_NAME);\n\n    // Path to the just created empty db\n    String outFileName = DB_PATH + DB_NAME;\n\n    //Open the empty db as the output stream\n    OutputStream out = new FileOutputStream(outFileName);\n\n    try {\n        //transfer bytes from the inputfile to the outputfile\n        byte[] buffer = new byte[1024];\n        int length;\n        while ((length = in.read(buffer))>0){\n            out.write(buffer, 0, length);\n        }\n    } finally {\n        out.flush();\n        out.close();\n        in.close();\n    }\n}", "path": "src\\net\\kazzz\\felica\\suica\\DBUtil.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/**\n * \u5165\u5834\u99c5\u3092\u53d6\u5f97\u3057\u307e\u3059\n * @return String \u30d0\u30b9\u306e\u5834\u5408\u3001\u5e8f\u65700\u306b\u4f1a\u793e\u540d\u30011\u505c\u7559\u6240\u540d\u304c\u623b\u308a\u307e\u3059\n *  \u9244\u9053\u306e\u5834\u5408\u3001\u5e8f\u65700\u306b\u4f1a\u793e\u540d\u30011\u306b\u8def\u7dda\u540d\u30012\u306b\u99c5\u540d\u304c\u623b\u308a\u307e\u3059\n */\n", "func_signal": "public String[] getEntranceStation()", "code": "{\n    if (!this.isProductSales()) {\n        if ( this.isByBus() ) {\n            //\u30d0\u30b9\u5229\u7528\u306e\u5834\u5408\n            return getBusStop(Util.toInt(new byte[]{this.data[6], this.data[7]})\n                    , Util.toInt(new byte[]{this.data[8], this.data[9]}));\n        } else {\n            //\u9244\u9053\u5229\u7528\u306e\u5834\u5408\n            return getStation(this.data[15], this.data[6], this.data[7]);\n        }\n    } else {\n        return new String[]{\"\", \"\", \"\"};\n    }\n}", "path": "src\\net\\kazzz\\felica\\suica\\Suica.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/**\n * FeliCa \u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\n * @return String \u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u306e\u30c0\u30f3\u30d7\u7d50\u679c\u304c\u6587\u5b57\u5217\u3067\u623b\u308a\u307e\u3059\n * @throws Exception\n */\n", "func_signal": "private String readData() throws Exception", "code": "{\n    StringBuilder sb = new StringBuilder();\n    try {\n        \n        if ( this.iSFeliCaLite ) {\n            sb.append(\"\\n\");\n            sb.append(\"FeliCa Lite \u30c7\u30d0\u30a4\u30b9\u3067\u3059 \");\n            sb.append(\"\\n----------------------------------------\");\n            sb.append(\"\\n\");\n            // FeliCa Lite \u8aad\u307f\u8fbc\u307f\n            FeliCaLiteTag ft = new FeliCaLiteTag(this.nfcTag);\n            ft.polling();\n            sb.append(\"  \" + ft.toString());\n            sb.append(\"\\n----------------------------------------\");\n            sb.append(\"\\n\");\n            \n            //0\u30d6\u30ed\u30c3\u30af\u76ee\u8aad\u307f\u8fbc\u307f\n            ReadResponse rr = ft.readWithoutEncryption((byte)0);\n            sb.append(\"  \" + rr.toString());\n            sb.append(\"\\n----------------------------------------\");\n            sb.append(\"\\n\");\n            \n            //MemoryConfig \u8aad\u307f\u8fbc\u307f\n            MemoryConfigurationBlock mb = ft.getMemoryConfigBlock(); \n            sb.append(\"  \" + mb.toString());\n            sb.append(\"\\n----------------------------------------\");\n            sb.append(\"\\n\");\n            \n            String result = sb.toString();\n            Log.d(TAG, result);\n            return result;\n        }\n        \n        // FeliCa \n        FeliCaTag ft = new FeliCaTag(this.nfcTag);\n        IDm idm = ft.pollingAndGetIDm(FeliCaLib.SYSTEMCODE_ANY);\n        if ( idm != null ) {\n            sb.append(\"\\n\");\n            sb.append(\"FeliCa \u30c7\u30d0\u30a4\u30b9\u3067\u3059\");\n            sb.append(\"\\n-----------------------------------------\");\n            sb.append(\"\\n\");\n            sb.append(ft.toString());\n\n            // enum systemCode\n            sb.append(\"\\n\");\n            sb.append(\"  \u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9\u4e00\u89a7\");\n            sb.append(\"\\n  -----------------------------------------\");\n            sb.append(\"\\n\");\n            SystemCode[] scs = ft.getSystemCodeList();\n            for ( SystemCode sc : scs ) {\n                sb.append(\"  \").append(sc.toString()).append(\"\\n\");\n            }\n\n            // enum serviceCode\n            sb.append(\"\\n\");\n            sb.append(\"  \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u4e00\u89a7\");\n            sb.append(\"\\n-  ----------------------------------------\");\n            sb.append(\"\\n\");\n            ServiceCode[] svs = ft.getServiceCodeList();\n            for ( ServiceCode sc : svs ) {\n                sb.append(\"  \").append(sc.toString()).append(\"\\n\");\n            }\n        } else {\n            sb.append(\"\u30c7\u30d0\u30a4\u30b9\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u307e\u3057\u305f\");\n        }\n        \n    } catch (Exception e) {\n        String result = sb.toString();\n        Log.d(TAG, result);\n        e.printStackTrace();\n        return result;\n    }\n    String result = sb.toString();\n    Log.d(TAG, result);\n    return result;\n   }", "path": "src\\net\\kazzz\\NFCFeliCaReader.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/*\");\n        } catch (MalformedMimeTypeException e) {\n            throw new RuntimeException(\"fail\", e);\n        }\n        this.filters = new IntentFilter[] {ndef};\n\n\n        //\u30a4\u30f3\u30c6\u30f3\u30c8\u304b\u3089\u8d77\u52d5\u3055\u308c\u305f\u969b\u306e\u51e6\u7406\n        Intent intent = this.getIntent();\n        this.onNewIntent(intent);\n    }\n\n    /**\n     * FeliCa Lite\u30c7\u30d0\u30a4\u30b9\u304b\u5426\u304b\u3092\u691c\u67fb\u3057\u307e\u3059\n     * @return boolean \u8aad\u307f\u8fbc\u307f\u5bfe\u8c61\u304cFeliCa Lite\u306e\u5834\u5408true\u304c\u623b\u308a\u307e\u3059\n     * @throws FeliCaException\n     */\n", "func_signal": "private boolean iSFeliCaLite() throws FeliCaException", "code": "{\n        FeliCaTag f = new FeliCaTag(this.nfcTag);\n        //polling \u306f IDm\u3001PMm\u3092\u53d6\u5f97\u3059\u308b\u306e\u306b\u5fc5\u8981\n        IDm idm = f.pollingAndGetIDm(FeliCaLib.SYSTEMCODE_FELICA_LITE);\n        return idm != null;\n    }", "path": "src\\net\\kazzz\\NFCFeliCaReader.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onNewIntent(android.content.Intent)\n */\n", "func_signal": "@Override\nprotected void onNewIntent(Intent intent)", "code": "{\n    TextView tv_tag = (TextView) findViewById(R.id.result_tv);\n\n    Button btnRead = (Button) findViewById(R.id.btn_read);\n    btnRead.setOnClickListener(this);\n\n    Button btnHistory = (Button) findViewById(R.id.btn_hitory);\n    btnHistory.setOnClickListener(this);\n    btnHistory.setEnabled(false);\n\n    Button btnWrite = (Button) findViewById(R.id.btn_write);\n    btnWrite.setOnClickListener(this);\n    btnWrite.setEnabled(false);\n\n    Button btnInout = (Button) findViewById(R.id.btn_inout);\n    btnInout.setOnClickListener(this);\n    btnInout.setEnabled(false);\n\n    String action = intent.getAction();\n    //if (NfcAdapter.ACTION_TAG_DISCOVERED.equals(action)) {\n    if (NfcAdapter.ACTION_TECH_DISCOVERED.equals(action)) {\n        // android.nfc.extra.TAG \u9000\u907f\n        this.nfcTag = intent.getParcelableExtra(\"android.nfc.extra.TAG\");\n\n        try {\n            FeliCaLib.IDm idm = \n                new FeliCaLib.IDm(intent.getByteArrayExtra(NfcAdapter.EXTRA_ID));\n\n            if ( idm == null ) {\n                throw new FeliCaException(\"Felica IDm \u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\");\n            }\n            \n            this.iSFeliCaLite = this.iSFeliCaLite();\n              \n            btnHistory.setEnabled(!this.iSFeliCaLite);\n            btnWrite.setEnabled(this.iSFeliCaLite);\n            \n            //String data = readData();\n            //tv_tag.setText(data);\n            \n            btnRead.performClick();\n        } catch (Exception e) {\n            e.printStackTrace();\n            Log.e(TAG, e.toString());\n        }\n    }\n    btnHistory.setEnabled(!this.iSFeliCaLite);\n    btnWrite.setEnabled(this.iSFeliCaLite);\n}\n\n/* (non-Javadoc)\n * @see android.app.Activity#onPause()\n */\n@Override\nprotected void onPause() {\n    super.onPause();\n    this.adapter.disableForegroundDispatch(this);\n}\n\n/* (non-Javadoc)\n * @see android.app.Activity#onResume()\n */\n@Override\nprotected void onResume() {\n    super.onResume();\n    this.adapter.enableForegroundDispatch(this\n            , this.pendingIntent, this.filters, this.techLists);\n}\n}", "path": "src\\net\\kazzz\\NFCFeliCaReader.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/**\n * \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u30af\u30ed\u30fc\u30ba\u3057\u307e\u3059\n */\n", "func_signal": "@Override\npublic synchronized void close()", "code": "{\n    if( this.dataBase != null )\n        this.dataBase.close();\n     super.close();\n\n}", "path": "src\\net\\kazzz\\felica\\suica\\DBUtil.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/**\n * \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u6709\u7121\u3092\u691c\u67fb\u3057\u307e\u3059\n * @return /data/data/\u30d1\u30c3\u30b1\u30fc\u30b8/\u306b\u65e2\u306bDB\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u5834\u5408\u306ftrue\u304c\u623b\u308a\u307e\u3059\n */\n", "func_signal": "private boolean isExsistDataBase()", "code": "{\n\n    SQLiteDatabase checkDB = null;\n\n    try{\n        String path = DB_PATH + DB_NAME;\n        checkDB = SQLiteDatabase.openDatabase(\n                path, null, SQLiteDatabase.OPEN_READONLY);\n\n    } catch ( SQLiteException e ){\n        //database does't exist yet.\n    }\n\n    if(checkDB != null){\n        checkDB.close();\n    }\n\n    return checkDB != null ? true : false;\n}", "path": "src\\net\\kazzz\\felica\\suica\\DBUtil.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    NumberFormat nf = NumberFormat.getCurrencyInstance();\n    nf.setMaximumFractionDigits(0);\n    SimpleDateFormat dfl = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n    SimpleDateFormat dfs = new SimpleDateFormat(\"yyyy/MM/dd\");\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"\u6a5f\u5668\u7a2e\u5225: \" + this.getConsoleType() + \"\\n\");\n    sb.append(\"\u51e6\u7406\u7a2e\u5225: \" + this.getProcessType() + \"\\n\");\n    if ( !this.isProductSales() ) {\n        sb.append(\"\u51e6\u7406\u65e5\u4ed8: \" + dfs.format(this.getProccessDate()) + \"\\n\");\n        if ( this.isByBus() ) {\n            String[] busStopInfo = this.getEntranceStation();\n            sb.append(\"\u5229\u7528\u4f1a\u793e: \" + busStopInfo[0]);\n            sb.append(\"\u505c\u7559\u6240: \" + busStopInfo[1] + \"\\n\");\n        } else {\n            String[] entranceInfo = this.getEntranceStation();\n            String[] exitInfo = this.getExitStation();\n\n            sb.append(\"\u5165\u5834: \" + \"\\n\");\n            sb.append(\"  \u5229\u7528\u4f1a\u793e: \" + entranceInfo[0]+ \"\\n\");\n            sb.append(\"  \u8def\u7dda\u540d: \" + entranceInfo[1]+ \"\u7dda\\n\");\n            sb.append(\"  \u99c5\u540d: \" + entranceInfo[2] + \"\\n\");\n\n            if ( !this.isCharge()) {\n                sb.append(\"\u51fa\u5834: \" + \"\\n\");\n                sb.append(\"  \u5229\u7528\u4f1a\u793e: \" + exitInfo[0]+ \"\\n\");\n                sb.append(\"  \u8def\u7dda\u540d: \" + exitInfo[1]+ \"\u7dda\\n\");\n                sb.append(\"  \u99c5\u540d: \" + exitInfo[2] + \"\\n\");\n            }\n        }\n    } else {\n        sb.append(\"\u51e6\u7406\u65e5\u4ed8: \" + dfl.format(this.getProccessDate()) + \"\\n\");\n    }\n    //sb.append(\"\u652f\u6255\u7a2e\u5225: \" + this.getPaymentType() + \"\\n\");\n    sb.append(\"\u6b8b\u9ad8: \" + nf.format(this.getBalance()) + \"\\n\");\n    return sb.toString();\n       }", "path": "src\\net\\kazzz\\felica\\suica\\Suica.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/* (non-Javadoc)\n * @see android.os.AsyncTask#onPostExecute(java.lang.Object)\n */\n", "func_signal": "@Override\nprotected void onPostExecute(WriteResponse result)", "code": "{\n    dialog.dismiss();\n    if ( result != null && result.getStatusFlag1() == 0) {\n        //tv_tag.setText(readData());\n        Toast.makeText(v.getContext()\n                , \"\u66f8\u304d\u3053\u307f\u6210\u529f : \" + c.toString() , Toast.LENGTH_LONG).show();\n        \n        //\u7d42\u4e86\u3057\u3066\u81ea\u8eab\u3092\u8d77\u52d5 (\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5)\n        finish();\n        Intent intent = new Intent(FeliCaLiteWriter.this, FeliCaLiteWriter.class);\n        intent.putExtra(\"nfcTag\", FeliCaLiteWriter.this.nfcTag);\n        startActivity(intent);\n    }\n}", "path": "src\\net\\kazzz\\FeliCaLiteWriter.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/**\n * \u51fa\u5834\u99c5\u3092\u53d6\u5f97\u3057\u307e\u3059\n * @return String \u30d0\u30b9\u306e\u5834\u5408\u3001\u5e8f\u65700\u306b\u4f1a\u793e\u540d\u30011\u505c\u7559\u6240\u540d\u304c\u623b\u308a\u307e\u3059\n *  \u9244\u9053\u306e\u5834\u5408\u3001\u5e8f\u65700\u306b\u4f1a\u793e\u540d\u30011\u306b\u8def\u7dda\u540d\u30012\u306b\u99c5\u540d\u304c\u623b\u308a\u307e\u3059 (\u30d0\u30b9\u306e\u5834\u5408\u5165\u5834\u3068\u540c\u3058\u5024\u3068\u306a\u308a\u307e\u3059)\n */\n", "func_signal": "public String[] getExitStation()", "code": "{\n    if (!this.isProductSales()) {\n        if ( this.isByBus() ) {\n            //\u30d0\u30b9\u5229\u7528\u306e\u5834\u5408\n            return getBusStop(Util.toInt(new byte[]{this.data[6], this.data[7]})\n                    , Util.toInt(new byte[]{this.data[8], this.data[9]}));\n        } else {\n            //\u9244\u9053\u5229\u7528\u306e\u5834\u5408\n            return getStation(this.data[15], this.data[8], this.data[9]);\n        }\n    } else {\n        return new String[]{\"\", \"\", \"\"};\n    }\n}", "path": "src\\net\\kazzz\\felica\\suica\\Suica.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/**\n * FeliCa \u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u307f\u307e\u3059\n * @param addr \u66f8\u304d\u3053\u3080\u30c7\u30fc\u30bf\u30d6\u30ed\u30c3\u30af\u306e\u30a2\u30c9\u30ec\u30b9(\u30d6\u30ed\u30c3\u30af\u30ca\u30f3\u30d0\u30fc)\u3092\u30bb\u30c3\u30c8\n * @param data \u66f8\u304d\u3053\u3080\u30c7\u30fc\u30bf\u3092\u6587\u5b57\u5217\u3067\u30bb\u30c3\u30c8\n * @return WriteResponse \u66f8\u304d\u8fbc\u3093\u3060\u7d50\u679c\u304c\u623b\u308a\u307e\u3059\n * @throws Exception\n */\n", "func_signal": "private WriteResponse writeData(byte addr, CharSequence data) throws Exception", "code": "{\n    try {\n        FeliCaLiteTag f = new FeliCaLiteTag(this.nfcTag);\n        IDm idm = f.pollingAndGetIDm();\n        Log.d(TAG, idm.toString());\n        \n        PMm pmm = f.getPMm();\n        Log.d(TAG, pmm.toString());\n        \n        //\u30c7\u30fc\u30bf\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\n        Charset utfEncoding = Charset.forName(\"UTF-8\");\n        byte[] textBytes = data.toString().getBytes(utfEncoding);\n\n        WriteResponse result = f.writeWithoutEncryption(addr, textBytes);\n        \n        return result;\n    } catch (FeliCaException e) {\n        e.printStackTrace();\n        Log.e(TAG, \"writeData\", e);\n        throw e;\n    }\n\n   }", "path": "src\\net\\kazzz\\FeliCaLiteWriter.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/**\n * FeliCa \u4f7f\u7528\u5c65\u6b74\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\n *\n * @return\n */\n", "func_signal": "protected String readHistoryData() throws Exception", "code": "{\n\n    try {\n        FeliCaTag f = new FeliCaTag(this.nfcTag);\n\n        //polling \u306f IDm\u3001PMm\u3092\u53d6\u5f97\u3059\u308b\u306e\u306b\u5fc5\u8981\n        f.polling(FeliCaLib.SYSTEMCODE_PASMO);\n\n        //read\n        ServiceCode sc = new ServiceCode(FeliCaLib.SERVICE_SUICA_HISTORY);\n        byte addr = 0;\n        ReadResponse result = f.readWithoutEncryption(sc, addr);\n\n        StringBuilder sb = new StringBuilder();\n        while ( result != null && result.getStatusFlag1() == 0  ) {\n            sb.append(\"\u5c65\u6b74 No.  \" + (addr + 1) + \"\\n\");\n            sb.append(\"---------\\n\");\n            sb.append(\"\\n\");\n            Suica.History s = new Suica.History(result.getBlockData(), this);\n            sb.append(s.toString());\n            sb.append(\"---------------------------------------\\n\");\n            sb.append(\"\\n\");\n\n            addr++;\n            //Log.d(TAG, \"addr = \" + addr);\n            result = f.readWithoutEncryption(sc, addr);\n        }\n\n        String str = sb.toString();\n        Log.d(TAG, str);\n        return str;\n    } catch (FeliCaException e) {\n        e.printStackTrace();\n        Log.e(TAG, \"readHistoryData\", e);\n        throw e;\n    }\n}", "path": "src\\net\\kazzz\\NFCFeliCaReader.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/**\n * \u30d1\u30b9\u505c\u7559\u6240\u3092\u53d6\u5f97\u3057\u307e\u3059\n * <pre>http://sourceforge.jp/projects/felicalib/wiki/suica\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059</pre>\n * @param lineCode \u7dda\u533a\u30b3\u30fc\u30c9\u3092\u30bb\u30c3\u30c8\n * @param statioCode \u99c5\u9806\u30b3\u30fc\u30c9\u3092\u30bb\u30c3\u30c8\n * @return \u53d6\u5f97\u3067\u304d\u305f\u5834\u5408\u3001\u5e8f\u65700\u306b\u4f1a\u793e\u540d\u30011\u505c\u7559\u6240\u540d\u304c\u623b\u308a\u307e\u3059\n */\n", "func_signal": "private String[] getBusStop(int lineCode, int statioCode)", "code": "{\n    DBUtil util = new DBUtil(this.context);\n    try {\n        SQLiteDatabase db = util.openDataBase();\n        Cursor c = db.query(TABLE_IRUCA_STATIONCODE\n                , COLUMNS_IRUCA_STATIONCODE\n                ,   COLUMNS_IRUCA_STATIONCODE[0] + \" = '\" + lineCode + \"' and \"\n                  + COLUMNS_IRUCA_STATIONCODE[1] + \" = '\" + statioCode + \"'\"\n                , null, null, null, COLUMN_ID);\n        return ( c.moveToFirst()  )\n            ?  new String[]{c.getString(2), c.getString(4)}\n            :  new String[]{\"???\", \"???\"};\n    } catch (Exception e) {\n        e.printStackTrace();\n        return new String[]{\"error\", \"error\"};\n    } finally {\n        util.close();\n    }\n}", "path": "src\\net\\kazzz\\felica\\suica\\Suica.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/**\n *  \u5730\u533a\u30b3\u30fc\u30c9\u3001\u7dda\u533a\u30b3\u30fc\u30c9\u3001\u99c5\u9806\u30b3\u30fc\u30c9\u304b\u3089\u99c5\u540d\u3092\u53d6\u5f97\u3057\u307e\u3059\n * <pre>http://sourceforge.jp/projects/felicalib/wiki/suica\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059</pre>\n * @param regionCode \u5730\u533a\u30b3\u30fc\u30c9\u3092\u30bb\u30c3\u30c8\n * @param lineCode \u7dda\u533a\u30b3\u30fc\u30c9\u3092\u30bb\u30c3\u30c8\n * @param statioCode \u99c5\u9806\u30b3\u30fc\u30c9\u3092\u30bb\u30c3\u30c8\n * @return \u53d6\u5f97\u3067\u304d\u305f\u5834\u5408\u3001\u5e8f\u65700\u306b\u4f1a\u793e\u540d\u30011\u306b\u8def\u7dda\u540d\u30012\u306b\u99c5\u540d\u304c\u623b\u308a\u307e\u3059\n */\n", "func_signal": "private String[] getStation(int regionCode, int lineCode, int statioCode)", "code": "{\n\n    int areaCode = regionCode & 0xff;\n    DBUtil util = new DBUtil(this.context);\n    try {\n        SQLiteDatabase db = util.openDataBase();\n        Cursor c = db.query(TABLE_STATIONCODE\n                , COLUMNS_STATIONCODE\n                ,   COLUMNS_STATIONCODE[0] + \" = '\" + areaCode + \"' and \"\n                  + COLUMNS_STATIONCODE[1] + \" = '\" + (lineCode & 0xff) + \"' and \"\n                  + COLUMNS_STATIONCODE[2] + \" = '\" + (statioCode & 0xff) + \"'\"\n                , null, null, null, COLUMN_ID);\n\n        return ( c.moveToFirst() )\n            ?  new String[]{ c.getString(3), c.getString(4), c.getString(5)}\n            :  new String[]{\"???\", \"???\", \"???\"};\n    } catch (Exception e) {\n        e.printStackTrace();\n        return new String[]{\"error\", \"error\", \"error\"};\n    } finally {\n        util.close();\n    }\n}", "path": "src\\net\\kazzz\\felica\\suica\\Suica.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/**\n * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n * @param data \u30c7\u30fc\u30bf\u306e\u30d0\u30a4\u30c8\u5217(16\u30d0\u30a4\u30c8)\u3092\u30bb\u30c3\u30c8\n * @param context android\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u30bb\u30c3\u30c8\n */\n", "func_signal": "public History(byte[] data, Context context)", "code": "{\n    this.data = data;\n    this.context = context;\n}", "path": "src\\net\\kazzz\\felica\\suica\\Suica.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/**\n * \u51e6\u7406\u65e5\u4ed8(\u51fa\u5834\u65e5\u4ed8)\u3092\u53d6\u5f97\u3057\u307e\u3059\n * @return byte[]\n */\n", "func_signal": "public Date getProccessDate()", "code": "{\n    int date = Util.toInt(new byte[]{this.data[4], this.data[5]});\n    int yy = date >> 9;\n    int mm = (date >> 5) & 0xf;\n    int dd = date & 0x1f;\n    Calendar c = Calendar.getInstance();\n    c.set(Calendar.YEAR, 2000 + yy);\n    c.set(Calendar.MONTH, mm-1);\n    c.set(Calendar.DAY_OF_MONTH, dd);\n\n    //\u7269\u8ca9\u3060\u3063\u305f\u3089\u6642\u9593\u3082\u30bb\u30c3\u30c8\n    if ( this.isProductSales() ) {\n        int time = Util.toInt(new byte[]{this.data[6], this.data[7]});\n        int hh = time >> 11;\n        int min = (time >> 5) & 0x3f;\n        c.set(Calendar.HOUR_OF_DAY, hh);\n        c.set(Calendar.MINUTE, min);\n    } else {\n        c.set(Calendar.HOUR_OF_DAY, 0);\n        c.set(Calendar.MINUTE, 0);\n    }\n    return c.getTime();\n}", "path": "src\\net\\kazzz\\felica\\suica\\Suica.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/**\n *\u3000\u7aef\u672b\u7a2e\u5225\u304c\u300c\u7269\u8ca9\u300d\u304b\u5426\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\n * <pre>http://sourceforge.jp/projects/felicalib/wiki/suica\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059</pre>\n * @return boolean \u7269\u8ca9\u3060\u3063\u305f\u5834\u5408\u306ftrue\u304c\u623b\u308a\u307e\u3059\n */\n", "func_signal": "public boolean isProductSales()", "code": "{\n    //data[0]\u7aef\u672b\u7a2e\u5225\u304c\u7269\u8ca9\u53c8\u306f\u81ea\u8ca9\u6a5f\n    return (this.data[0] & 0xff) == 0xc7\n        || (this.data[0] & 0xff) == 0xc8;\n}", "path": "src\\net\\kazzz\\felica\\suica\\Suica.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "/**\n * \u6a5f\u5668\u7a2e\u5225\u3092\u53d6\u5f97\u3057\u307e\u3059\n * <pre>http://sourceforge.jp/projects/felicalib/wiki/suica\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059</pre>\n * @param cType \u30b3\u30f3\u30bd\u30fc\u30eb\u30bf\u30a4\u30d7\u3092\u30bb\u30c3\u30c8\n * @return String \u6a5f\u5668\u30bf\u30a4\u30d7\u304c\u6587\u5b57\u5217\u3067\u623b\u308a\u307e\u3059\n */\n", "func_signal": "public static final String getConsoleType(int cType)", "code": "{\n    switch (cType & 0xff) {\n        case 0x03: return \"\u7cbe\u7b97\u6a5f\";\n        case 0x04: return \"\u643a\u5e2f\u578b\u7aef\u672b\";\n        case 0x05: return \"\u7b49\u8eca\u8f09\u7aef\u672b\"; //bus\n        case 0x07: return \"\u5238\u58f2\u6a5f\";\n        case 0x08: return \"\u5238\u58f2\u6a5f\";\n        case 0x09: return \"\u5165\u91d1\u6a5f(\u30af\u30a4\u30c3\u30af\u30c1\u30e3\u30fc\u30b8\u6a5f)\";\n        case 0x12: return \"\u5238\u58f2\u6a5f(\u6771\u4eac\u30e2\u30ce\u30ec\u30fc\u30eb)\";\n        case 0x13: return \"\u5238\u58f2\u6a5f\u7b49\";\n        case 0x14: return \"\u5238\u58f2\u6a5f\u7b49\";\n        case 0x15: return \"\u5238\u58f2\u6a5f\u7b49\";\n        case 0x16: return \"\u6539\u672d\u6a5f\";\n        case 0x17: return \"\u7c21\u6613\u6539\u672d\u6a5f\";\n        case 0x18: return \"\u7a93\u53e3\u7aef\u672b\";\n        case 0x19: return \"\u7a93\u53e3\u7aef\u672b(\u307f\u3069\u308a\u306e\u7a93\u53e3)\";\n        case 0x1a: return \"\u6539\u672d\u7aef\u672b\";\n        case 0x1b: return \"\u643a\u5e2f\u96fb\u8a71\";\n        case 0x1c: return \"\u4e57\u7d99\u6e05\u7b97\u6a5f\";\n        case 0x1d: return \"\u9023\u7d61\u6539\u672d\u6a5f\";\n        case 0x1f: return \"\u7c21\u6613\u5165\u91d1\u6a5f\";\n        case 0x46: return \"VIEW ALTTE\";\n        case 0x48: return \"VIEW ALTTE\";\n        case 0xc7: return \"\u7269\u8ca9\u7aef\u672b\";  //sales\n        case 0xc8: return \"\u81ea\u8ca9\u6a5f\";   //sales\n        default:\n            return \"???\";\n    }\n}", "path": "src\\net\\kazzz\\felica\\suica\\Suica.java", "repo_name": "Kazzz/nfc-felica", "stars": 19, "license": "None", "language": "java", "size": 7043}
{"docstring": "// e)\n", "func_signal": "public void testeValorMetros()", "code": "{\n\tComprimento_01 a = new Comprimento_01(1, 2, 3);\n\tSystem.out.println(\"Valor Metros: \" + a.getM());\n}", "path": "src\\com\\zenorocha\\modulo6\\TesteComprimento.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "//GEN-LAST:event_txtFahrenheitFocusLost\n", "func_signal": "private void MpMiActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_MpMiActionPerformed\n        String strMedida = campo.getText();\n        double medida = Double.valueOf(strMedida);\n\n        double conversao;// = ConversorDistancia.converteParaMetro(medida);\n        String strConversao; //= String.valueOf(conversao);\n\n        conversao = ConversorDistancia.converteParaMilha(medida);\n        strConversao = String.valueOf(conversao);\n        resposta.setText(strConversao);\n    }", "path": "src\\br\\com\\lanchinho\\lista8\\ex6\\FormConversorTemperatura.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n    java.awt.EventQueue.invokeLater(new Runnable() {\n\n        public void run() {\n            new FormConversorTemperatura().setVisible(true);\n        }\n    });\n}", "path": "src\\br\\com\\lanchinho\\lista8\\ex1-5\\FormConversorTemperatura.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "//GEN-LAST:event_txtFahrenheitFocusLost\n", "func_signal": "private void btnConverteActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_btnConverteActionPerformed\n       String strMedida = campo.getText();\n       double medida = Double.valueOf(strMedida);\n\n       double conversao = 0.0;// = ConversorDistancia.converteParaMetro(medida);\n       String strConversao = null; //= String.valueOf(conversao);\n\n       if(MpMi.isSelected() == true){\n           conversao = ConversorDistancia.converteParaMilha(medida);\n           strConversao = String.valueOf(conversao);\n           resposta.setText(strConversao);\n       }else{\n              conversao = ConversorDistancia.converteParaMetro(medida);\n              strConversao = String.valueOf(conversao);\n              resposta.setText(strConversao);\n\n       }\n      \n\n    }", "path": "src\\br\\com\\lanchinho\\lista8\\ex1-5\\FormConversorTemperatura.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "//GEN-LAST:event_bt01ActionPerformed\n", "func_signal": "private void bt02ActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_bt02ActionPerformed\n        Double converte = (Double.parseDouble(txt02.getText()) - 32) * 1.8;\n        txt01.setText(converte.toString());\n    }", "path": "src\\com\\zenorocha\\lista8\\Exercicio01.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "//GEN-LAST:event_txt02ActionPerformed\n", "func_signal": "private void bt01ActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_bt01ActionPerformed\n        Double converte = Double.parseDouble(txt01.getText()) * 1.8;\n        txt02.setText(converte.toString());\n    }", "path": "src\\com\\zenorocha\\lista8\\Exercicio01.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    buttonGroup1 = new javax.swing.ButtonGroup();\n    jPanel2 = new javax.swing.JPanel();\n    jTabbedPane1 = new javax.swing.JTabbedPane();\n    jPanel3 = new javax.swing.JPanel();\n    MpMi = new javax.swing.JRadioButton();\n    MipM = new javax.swing.JRadioButton();\n    jLabel3 = new javax.swing.JLabel();\n    jLabel4 = new javax.swing.JLabel();\n    campo = new javax.swing.JTextField();\n    resposta = new javax.swing.JTextField();\n    btnConverte = new javax.swing.JButton();\n    jPanel1 = new javax.swing.JPanel();\n    btnFahrenheit = new javax.swing.JButton();\n    btnParaCelsius = new javax.swing.JButton();\n    jLabel1 = new javax.swing.JLabel();\n    jLabel2 = new javax.swing.JLabel();\n    txtCelsius = new javax.swing.JTextField();\n    txtFahrenheit = new javax.swing.JTextField();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n    buttonGroup1.add(MpMi);\n    MpMi.setText(\"Metros para Milhas\");\n\n    buttonGroup1.add(MipM);\n    MipM.setText(\"Milhas para Metros\");\n\n    jLabel3.setText(\"De:\");\n\n    jLabel4.setText(\"Para:\");\n\n    resposta.setEditable(false);\n\n    btnConverte.setText(\"Converter\");\n    btnConverte.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            btnConverteActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);\n    jPanel3.setLayout(jPanel3Layout);\n    jPanel3Layout.setHorizontalGroup(\n        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel3Layout.createSequentialGroup()\n            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(jPanel3Layout.createSequentialGroup()\n                    .addGap(23, 23, 23)\n                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(jLabel3)\n                        .addComponent(jLabel4))\n                    .addGap(38, 38, 38)\n                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                        .addComponent(campo)\n                        .addComponent(resposta, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE))\n                    .addGap(80, 80, 80)\n                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(MpMi)\n                        .addComponent(MipM)))\n                .addGroup(jPanel3Layout.createSequentialGroup()\n                    .addGap(114, 114, 114)\n                    .addComponent(btnConverte, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))\n            .addContainerGap(128, Short.MAX_VALUE))\n    );\n    jPanel3Layout.setVerticalGroup(\n        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel3Layout.createSequentialGroup()\n            .addGap(30, 30, 30)\n            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel3)\n                .addComponent(campo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(MpMi))\n            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(jPanel3Layout.createSequentialGroup()\n                    .addGap(65, 65, 65)\n                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(jLabel4)\n                        .addComponent(resposta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                .addGroup(jPanel3Layout.createSequentialGroup()\n                    .addGap(55, 55, 55)\n                    .addComponent(MipM)))\n            .addGap(34, 34, 34)\n            .addComponent(btnConverte)\n            .addGap(19, 19, 19))\n    );\n\n    jTabbedPane1.addTab(\"Conversor de Dist\u00e2ncia\", jPanel3);\n\n    jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));\n\n    btnFahrenheit.setText(\"Para Fahrenheit\");\n    btnFahrenheit.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            btnFahrenheitActionPerformed(evt);\n        }\n    });\n\n    btnParaCelsius.setText(\"Para Celsius\");\n    btnParaCelsius.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            btnParaCelsiusActionPerformed(evt);\n        }\n    });\n\n    jLabel1.setText(\"Celsius\");\n\n    jLabel2.setText(\"Fahrenheit\");\n\n    txtCelsius.addFocusListener(new java.awt.event.FocusAdapter() {\n        public void focusLost(java.awt.event.FocusEvent evt) {\n            txtCelsiusFocusLost(evt);\n        }\n    });\n\n    txtFahrenheit.addFocusListener(new java.awt.event.FocusAdapter() {\n        public void focusLost(java.awt.event.FocusEvent evt) {\n            txtFahrenheitFocusLost(evt);\n        }\n    });\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jLabel1)\n                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addGap(30, 30, 30)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                .addComponent(txtFahrenheit, javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(txtCelsius, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))\n            .addGap(34, 34, 34)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                .addComponent(btnParaCelsius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(btnFahrenheit, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))\n            .addGap(167, 167, 167))\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addGap(50, 50, 50)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel1)\n                .addComponent(txtCelsius, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(btnFahrenheit))\n            .addGap(69, 69, 69)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(txtFahrenheit, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(btnParaCelsius)\n                .addComponent(jLabel2))\n            .addContainerGap(38, Short.MAX_VALUE))\n    );\n\n    jTabbedPane1.addTab(\"Conversor Temperatura\", jPanel1);\n\n    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n    jPanel2.setLayout(jPanel2Layout);\n    jPanel2Layout.setHorizontalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel2Layout.createSequentialGroup()\n            .addGap(33, 33, 33)\n            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(37, Short.MAX_VALUE))\n    );\n    jPanel2Layout.setVerticalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel2Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(33, Short.MAX_VALUE))\n    );\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap(35, Short.MAX_VALUE)\n            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n    );\n\n    pack();\n}", "path": "src\\br\\com\\lanchinho\\lista8\\ex1-5\\FormConversorTemperatura.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "// d)\n", "func_signal": "public void testeValorMilimetros()", "code": "{\n\tComprimento_01 a = new Comprimento_01(1, 2, 3);\n\tSystem.out.println(\"Valor Milmetros: \" + a.getMm());\n\t\n\tComprimento_02 b = new Comprimento_02(1, 2, 3);\n\tSystem.out.println(\"Valor Milmetros: \" + b.getMm());\n}", "path": "src\\com\\zenorocha\\modulo6\\TesteComprimento.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "// i)\n", "func_signal": "public void testeDivisao()", "code": "{\n\tComprimento_01 a = new Comprimento_01(2, 4, 6);\n\t\n\ta.Dividir(2);\n\ta.Print();\n\n\t///\n\t\n\tComprimento_02 x = new Comprimento_02(2);\n\t\n\tx.Dividir(2);\n\tx.Print();\n}", "path": "src\\com\\zenorocha\\modulo6\\TesteComprimento.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "// f)\n", "func_signal": "public void testeSoma()", "code": "{\n\tComprimento_01 a = new Comprimento_01(2, 4, 6);\n\tComprimento_01 b = new Comprimento_01(1, 2, 3);\n\t\n\tComprimento_01 c = new Comprimento_01();\n\t\n\tc = c.Somar(a, b);\n\tc.Print();\n\t\n\t///\n\t\n\tComprimento_02 x = new Comprimento_02(2);\n\tComprimento_02 y = new Comprimento_02(1);\n\t\n\tComprimento_02 z = new Comprimento_02();\n\t\n\tz = z.Somar(x, y);\n\tz.Print();\n}", "path": "src\\com\\zenorocha\\modulo6\\TesteComprimento.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "// a)\n", "func_signal": "public void testeConstrutorMCM()", "code": "{\n\tComprimento_01 a = new Comprimento_01(5, 10, 2);\n\ta.Print();\n\t\n\tComprimento_02 b = new Comprimento_02(5, 10, 2);\n\tb.Print();\n}", "path": "src\\com\\zenorocha\\modulo6\\TesteComprimento.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "// c)\n", "func_signal": "public void testeConstrutorCM()", "code": "{\n\tComprimento_01 a = new Comprimento_01(10 , 50);\n\ta.Print();\n\t\n\tComprimento_02 b = new Comprimento_02(10 , 50);\n\tb.Print();\n}", "path": "src\\com\\zenorocha\\modulo6\\TesteComprimento.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    buttonGroup1 = new javax.swing.ButtonGroup();\n    jPanel2 = new javax.swing.JPanel();\n    jTabbedPane1 = new javax.swing.JTabbedPane();\n    jPanel1 = new javax.swing.JPanel();\n    btnFahrenheit = new javax.swing.JButton();\n    btnParaCelsius = new javax.swing.JButton();\n    jLabel1 = new javax.swing.JLabel();\n    jLabel2 = new javax.swing.JLabel();\n    txtCelsius = new javax.swing.JTextField();\n    txtFahrenheit = new javax.swing.JTextField();\n    jPanel3 = new javax.swing.JPanel();\n    MpMi = new javax.swing.JRadioButton();\n    MipM = new javax.swing.JRadioButton();\n    jLabel3 = new javax.swing.JLabel();\n    jLabel4 = new javax.swing.JLabel();\n    campo = new javax.swing.JTextField();\n    resposta = new javax.swing.JTextField();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n    jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));\n\n    btnFahrenheit.setText(\"Para Fahrenheit\");\n    btnFahrenheit.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            btnFahrenheitActionPerformed(evt);\n        }\n    });\n\n    btnParaCelsius.setText(\"Para Celsius\");\n    btnParaCelsius.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            btnParaCelsiusActionPerformed(evt);\n        }\n    });\n\n    jLabel1.setText(\"Celsius\");\n\n    jLabel2.setText(\"Fahrenheit\");\n\n    txtCelsius.addFocusListener(new java.awt.event.FocusAdapter() {\n        public void focusLost(java.awt.event.FocusEvent evt) {\n            txtCelsiusFocusLost(evt);\n        }\n    });\n\n    txtFahrenheit.addFocusListener(new java.awt.event.FocusAdapter() {\n        public void focusLost(java.awt.event.FocusEvent evt) {\n            txtFahrenheitFocusLost(evt);\n        }\n    });\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jLabel1)\n                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addGap(30, 30, 30)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                .addComponent(txtFahrenheit, javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(txtCelsius, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))\n            .addGap(34, 34, 34)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                .addComponent(btnParaCelsius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(btnFahrenheit, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))\n            .addGap(167, 167, 167))\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addGap(50, 50, 50)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel1)\n                .addComponent(txtCelsius, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(btnFahrenheit))\n            .addGap(69, 69, 69)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(txtFahrenheit, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(btnParaCelsius)\n                .addComponent(jLabel2))\n            .addContainerGap(38, Short.MAX_VALUE))\n    );\n\n    jTabbedPane1.addTab(\"Conversor Temperatura\", jPanel1);\n\n    buttonGroup1.add(MpMi);\n    MpMi.setText(\"Metros para Milhas\");\n    MpMi.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            MpMiActionPerformed(evt);\n        }\n    });\n\n    buttonGroup1.add(MipM);\n    MipM.setText(\"Milhas para Metros\");\n    MipM.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            MipMActionPerformed(evt);\n        }\n    });\n\n    jLabel3.setText(\"De:\");\n\n    jLabel4.setText(\"Para:\");\n\n    resposta.setEditable(false);\n\n    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);\n    jPanel3.setLayout(jPanel3Layout);\n    jPanel3Layout.setHorizontalGroup(\n        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel3Layout.createSequentialGroup()\n            .addGap(23, 23, 23)\n            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jLabel3)\n                .addComponent(jLabel4))\n            .addGap(38, 38, 38)\n            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                .addComponent(campo)\n                .addComponent(resposta, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE))\n            .addGap(80, 80, 80)\n            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(MpMi)\n                .addComponent(MipM))\n            .addContainerGap(51, Short.MAX_VALUE))\n    );\n    jPanel3Layout.setVerticalGroup(\n        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel3Layout.createSequentialGroup()\n            .addGap(30, 30, 30)\n            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel3)\n                .addComponent(campo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(MpMi))\n            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(jPanel3Layout.createSequentialGroup()\n                    .addGap(65, 65, 65)\n                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(jLabel4)\n                        .addComponent(resposta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                .addGroup(jPanel3Layout.createSequentialGroup()\n                    .addGap(55, 55, 55)\n                    .addComponent(MipM)))\n            .addGap(69, 69, 69))\n    );\n\n    jTabbedPane1.addTab(\"Conversor de Dist\u00e2ncia\", jPanel3);\n\n    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n    jPanel2.setLayout(jPanel2Layout);\n    jPanel2Layout.setHorizontalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel2Layout.createSequentialGroup()\n            .addGap(33, 33, 33)\n            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(41, Short.MAX_VALUE))\n    );\n    jPanel2Layout.setVerticalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel2Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(33, Short.MAX_VALUE))\n    );\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n\n    pack();\n}", "path": "src\\br\\com\\lanchinho\\lista8\\ex6\\FormConversorTemperatura.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "//GEN-LAST:event_MpMiActionPerformed\n", "func_signal": "private void MipMActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_MipMActionPerformed\n        String strMedida = campo.getText();\n        double medida = Double.valueOf(strMedida);\n\n        double conversao = ConversorDistancia.converteParaMetro(medida);\n        String strConversao = String.valueOf(conversao); \n        resposta.setText(strConversao);\n\n    }", "path": "src\\br\\com\\lanchinho\\lista8\\ex6\\FormConversorTemperatura.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jPanel1 = new javax.swing.JPanel();\n    jLabel1 = new javax.swing.JLabel();\n    jLabel2 = new javax.swing.JLabel();\n    inputCelsius = new javax.swing.JTextField();\n    inputFahrenheit = new javax.swing.JTextField();\n    converterCtoF = new javax.swing.JButton();\n    converterToC = new javax.swing.JButton();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n    setTitle(\"Conversor de Temperatura\");\n\n    jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));\n\n    jLabel1.setText(\"Celsius\");\n\n    jLabel2.setText(\"Fahrenheit\");\n\n    inputCelsius.setText(\"0\");\n    inputCelsius.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            inputCelsiusActionPerformed(evt);\n        }\n    });\n    inputCelsius.addFocusListener(new java.awt.event.FocusAdapter() {\n        public void focusLost(java.awt.event.FocusEvent evt) {\n            inputCelsiusFocusLost(evt);\n        }\n    });\n\n    inputFahrenheit.setText(\"0\");\n    inputFahrenheit.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            inputFahrenheitActionPerformed(evt);\n        }\n    });\n    inputFahrenheit.addFocusListener(new java.awt.event.FocusAdapter() {\n        public void focusLost(java.awt.event.FocusEvent evt) {\n            inputFahrenheitFocusLost(evt);\n        }\n    });\n\n    converterCtoF.setText(\"Para Fahrenheit\");\n    converterCtoF.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            converterCtoFActionPerformed(evt);\n        }\n    });\n\n    converterToC.setText(\"Para Celsius\");\n    converterToC.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            converterToCActionPerformed(evt);\n        }\n    });\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jLabel1)\n                .addComponent(jLabel2))\n            .addGap(36, 36, 36)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                .addComponent(inputFahrenheit)\n                .addComponent(inputCelsius, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))\n            .addGap(34, 34, 34)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                .addComponent(converterToC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(converterCtoF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel1)\n                .addComponent(inputCelsius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(converterCtoF))\n            .addGap(39, 39, 39)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel2)\n                .addComponent(inputFahrenheit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(converterToC))\n            .addContainerGap(50, Short.MAX_VALUE))\n    );\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    pack();\n}", "path": "src\\br\\blog\\arruda\\lista8\\ex1\\CelsiusToF.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "// h)\n", "func_signal": "public void testeMultiplicacao()", "code": "{\n\tComprimento_01 a = new Comprimento_01(2, 4, 6);\n\t\n\ta.Multiplicar(2);\n\ta.Print();\n\n\t///\n\t\n\tComprimento_02 x = new Comprimento_02(2);\n\t\n\tx.Multiplicar(2);\n\tx.Print();\n}", "path": "src\\com\\zenorocha\\modulo6\\TesteComprimento.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "/**\n* @param args the command line arguments\n*/\n", "func_signal": "public static void main(String args[])", "code": "{\n    java.awt.EventQueue.invokeLater(new Runnable() {\n        public void run() {\n            new Exercicio01().setVisible(true);\n        }\n    });\n}", "path": "src\\com\\zenorocha\\lista8\\Exercicio01.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "// g)\n", "func_signal": "public void testeSubtracao()", "code": "{\n\tComprimento_01 a = new Comprimento_01(2, 4, 6);\n\tComprimento_01 b = new Comprimento_01(1, 2, 3);\n\t\n\tComprimento_01 c = new Comprimento_01();\n\t\n\tc = c.Subtrair(a, b);\n\tc.Print();\n\t\n\t///\n\t\n\tComprimento_02 x = new Comprimento_02(2);\n\tComprimento_02 y = new Comprimento_02(1);\n\t\n\tComprimento_02 z = new Comprimento_02();\n\t\n\tz = z.Subtrair(x, y);\n\tz.Print();\n}", "path": "src\\com\\zenorocha\\modulo6\\TesteComprimento.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "// b)\n", "func_signal": "public void testeContrutorM()", "code": "{\n\tComprimento_01 a = new Comprimento_01(5102);\n\ta.Print();\n\t\n\tComprimento_02 b = new Comprimento_02(5102);\n\tb.Print();\n}", "path": "src\\com\\zenorocha\\modulo6\\TesteComprimento.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n    java.awt.EventQueue.invokeLater(new Runnable() {\n\n        public void run() {\n            new CelsiusToF().setVisible(true);\n        }\n    });\n}", "path": "src\\br\\blog\\arruda\\lista8\\ex1\\CelsiusToF.java", "repo_name": "zenorocha/Estudos-Java", "stars": 16, "license": "None", "language": "java", "size": 1292}
{"docstring": "//mtodo que faz o ttulo\n", "func_signal": "private void fazTitulo ()", "code": "{\n\tthis.jogoDaForca = new ImageIcon (\"img\\\\jogodaforca.gif\");\n\tthis.titulo = new JLabel (jogoDaForca);\n\tthis.titulo.setLocation(220,0);\n\tthis.titulo.setSize(563,114);\n\tgetContentPane().add(this.titulo);\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo para abrir o arquivo\n//parmetro - nome do arquivo a ser lido\n", "func_signal": "public void openFile (String arquivo) throws FileNotFoundException", "code": "{\n\ttry {\n\t\tinput = new Scanner (new File (\"arquivos\\\\\" + arquivo));\n\t}\n\tcatch (FileNotFoundException erro){\n\t\tthrow new FileNotFoundException (\"ARQUIVO NO ENCONTRADO\");\n\t}\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\LeArquivo.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo que trata os eventos \n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\teventoMenu (e);\n\teventoBotaoLetras (e);\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo que faz o painel do botes\n", "func_signal": "private void fazPainelBotoes ()", "code": "{\n\tthis.painelLetras = new JPanel ();\n\tthis.painelLetras.setSize (1000,200);\n\tthis.painelLetras.setLocation(0,500);\n\t//this.painelLetras.setBackground(new Color (100,50,230));//teste\n\tthis.painelLetras.setLayout (null);\n\tgetContentPane().add(this.painelLetras);\n\tchar letter = 'a';\t\n\tfor (byte i = 0; i < 26; i++) {\n\t\tletter = (char)(i + 'a');\n\t\tthis.vetletras[i] = new ImageIcon (\"img\\\\\"+letter+\".gif\");\n\t\tthis.vetbotao[i] = new JButton (vetletras[i]);\n\t\t//this.vetbotao[i].setBackground(Color.WHITE); //teste\n\t\tthis.vetbotao[i].setFocusable(false);\n\t\tthis.vetbotao[i].setRolloverEnabled(false);\n\t\tthis.vetbotao[i].setSize(60,52);\n\t\tthis.vetbotao[i].addActionListener(this);\n\t\tswitch (i) {\n\t\tcase 0: this.vetbotao[0].setLocation (45,10);\n\t\t\t\tbreak;\n\t\tcase 1: this.vetbotao[1].setLocation (115,10);\n\t\t\t\tbreak;\n\t\tcase 2: this.vetbotao[2].setLocation (185,10);\n\t\t\t\tbreak;\n\t\tcase 3: this.vetbotao[3].setLocation (255,10);\n\t\t\t\tbreak;\n\t\tcase 4: this.vetbotao[4].setLocation (325,10);\n\t\t\t\tbreak;\n\t\tcase 5: this.vetbotao[5].setLocation (395,10);\n\t\t\t\tbreak;\n\t\tcase 6: this.vetbotao[6].setLocation (465,10);\n\t\t\t\tbreak;\n\t\tcase 7: this.vetbotao[7].setLocation (535,10);\n\t\t\t\tbreak;\n\t\tcase 8: this.vetbotao[8].setLocation (605,10);\n\t\t\t\tbreak;\n\t\tcase 9: this.vetbotao[9].setLocation (675,10);\n\t\t\t\tbreak;\n\t\tcase 10: this.vetbotao[10].setLocation (745,10);\n\t\t\t\tbreak;\n\t\tcase 11: this.vetbotao[11].setLocation (815,10);\n\t\t\t\tbreak;\n\t\tcase 12: this.vetbotao[12].setLocation (885,10);\n\t\t\t\tbreak; \n\t\tcase 13: this.vetbotao[13].setLocation (45,70);\n\t\t\t\tbreak;\n\t\tcase 14: this.vetbotao[14].setLocation (115,70);\n\t\t\t\tbreak;\n\t\tcase 15: this.vetbotao[15].setLocation (185,70);\n\t\t\t\tbreak;\n\t\tcase 16: this.vetbotao[16].setLocation (255,70);\n\t\t\t\tbreak;\n\t\tcase 17: this.vetbotao[17].setLocation (325,70);\n\t\t\t\tbreak;\n\t\tcase 18: this.vetbotao[18].setLocation (395,70);\n\t\t\t\tbreak;\n\t\tcase 19: this.vetbotao[19].setLocation (465,70);\n\t\t\t\tbreak;\n\t\tcase 20: this.vetbotao[20].setLocation (535,70);\n\t\t\t\tbreak;\n\t\tcase 21: this.vetbotao[21].setLocation (605,70);\n\t\t\t\tbreak;\n\t\tcase 22: this.vetbotao[22].setLocation (675,70);\n\t\t\t\tbreak;\n\t\tcase 23: this.vetbotao[23].setLocation (745,70);\n\t\t\t\tbreak;\n\t\tcase 24: this.vetbotao[24].setLocation (815,70);\n\t\t\t\tbreak;\n\t\tcase 25: this.vetbotao[25].setLocation (885,70);\t\n\t\t\t\tbreak;\n\t\t}\t\t\t\n\t\tthis.painelLetras.add(this.vetbotao[i]);\n\t}\t\t\t\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo para fechar o arquivo\n", "func_signal": "public void closeFile ()", "code": "{\n\tif (input != null) {\n\t\tinput.close ();\n\t}\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\LeArquivo.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo que faz o painel onde vai ficar a imagem do segredo\n", "func_signal": "private void fazPainelFigura (String img)", "code": "{\n\tthis.painelFigura = new JPanel ();\n\tthis.painelFigura.setSize (230,300);\n\tthis.painelFigura.setLocation(750,150);\n\tthis.painelFigura.setLayout (new BorderLayout ());\n\tthis.atnivel = new JLabel (\"Nvel: \"+this.nivelAtual,JLabel.CENTER);\n\tthis.atnivel.setFont (new Font (\"Comic Sans\",Font.BOLD,30));\n\tthis.imgSegredo = new ImageIcon (\"img\\\\\"+img);\n\tthis.labelfigura = new JLabel (this.imgSegredo,JLabel.CENTER);\n\tthis.painelFigura.add(BorderLayout.CENTER,this.labelfigura);\n\tthis.painelFigura.add(BorderLayout.SOUTH,this.atnivel);\n\tgetContentPane().add(this.painelFigura);\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo que configura o JFrame\n", "func_signal": "private void configuraJFrame ()", "code": "{\n\tsetSize (1000,700);\n\tsetResizable (false);\n\tsetLocation(10,10);\n\tgetContentPane().setLayout(null);\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo que cria o menu\n", "func_signal": "private void criaMenu ()", "code": "{\n\t//itens do menu ARQUIVO\n\tthis.sobre = new JMenuItem (\"Sobre\");\n\tthis.sobre.addActionListener(this);\n\tthis.sobre.setMnemonic('o');\n\t\n\tthis.sair = new JMenuItem (\"Sair\");\n\tthis.sair.addActionListener(this);\n\tthis.sair.setMnemonic('r');\n\t\n\t//itens do menu OPES\n\tthis.solucao = new JMenuItem (\"Soluo\");\n\tthis.solucao.addActionListener(this);\n\tthis.solucao.setMnemonic('S');\n\t\n\tthis.proximo = new JMenuItem (\"Prximo\");\n\tthis.proximo.addActionListener(this);\n\tthis.proximo.setMnemonic('P');\n\t\n\t//itens do Menu NVEis\n\tfor (int i=0; i <= 3; i++) {\n\t\tthis.niveis[i] = new JRadioButtonMenuItem (\"Nvel\" + (i+1));\n\t\tthis.niveis[i].addItemListener(this);\n\t\tthis.niveis[i].setFocusable(false);\n\t}\n\t\n\t//grupo dos botoes dos menu nveis\n\tthis.radioGroup = new ButtonGroup();\n\tthis.radioGroup.add(this.niveis[0]);\n\tthis.radioGroup.add(this.niveis[1]);\n\tthis.radioGroup.add(this.niveis[2]);\n\tthis.radioGroup.add(this.niveis[3]);\n\t\n\t//Itens do da barra de Menu\n\tthis.arquivo = new JMenu (\"Arquivo\");\n\tthis.arquivo.setMnemonic('A');\n\tthis.arquivo.addActionListener(this);\n\tthis.arquivo.add(this.sobre);\n\tthis.arquivo.add(this.sair);\n\t\n\tthis.nivel = new JMenu (\"Nveis\");\n\tthis.nivel.setMnemonic('N');\n\tthis.nivel.addActionListener(this);\n\tfor (int i=0; i <= 3; i++) {\n\t\tthis.nivel.add(this.niveis[i]);\n\t}\n\t\t\n\tthis.opcoes = new JMenu (\"Opes\");\n\tthis.opcoes.setMnemonic('O');\n\tthis.opcoes.addActionListener(this);\n\tthis.opcoes.add(this.solucao);\n\tthis.opcoes.add(this.proximo);\n\t\n\t//Barra de Menu\n\tthis.barraMenu = new JMenuBar();\n\tsetJMenuBar(barraMenu);\n\tthis.barraMenu.add(this.arquivo);\n\tthis.barraMenu.add(this.nivel);\n\tthis.barraMenu.add(this.opcoes);\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo que faz o painel da figura do enforcado\n", "func_signal": "private void fazPainelEnforcado ()", "code": "{\n\tthis.enforcado = new ImageIcon (\"img\\\\hmg5.gif\");\n\tthis.labelEnforcado = new JLabel (this.enforcado);\n\tthis.labelEnforcado.setSize(206,248);\n\tthis.labelEnforcado.setLocation(10,200);\n\tgetContentPane().add(this.labelEnforcado);\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo que trata dos eventos do menu\n", "func_signal": "public void eventoMenu (ActionEvent e)", "code": "{\n\tif (e.getSource() == this.sobre){\n\t\tImageIcon icon = new ImageIcon (\"img//icone.gif\");\n\t\tJOptionPane.showMessageDialog (null,\"JOGO DA FORCA\\nDesenvolvido por Loiane Groner\\nVerso 1.5\\nFevereiro/2006\",\"Sobre\",JOptionPane.INFORMATION_MESSAGE,icon);\n\t}\n\tif (e.getSource() == this.sair){\n\t\tSystem.exit(0);\n\t}\n\tif (e.getSource() == this.solucao){\n\t\tif (this.nivelAtual == 0) {\n\t\t\tJOptionPane.showMessageDialog (null,\"Escolha um nvel para jogar!\",\"\",JOptionPane.WARNING_MESSAGE);\n\t\t}\n\t\telse {\n\t\t\tJOptionPane.showMessageDialog (null,\"A SOLUO  \"+this.jogo.getSegredo(),\"Resposta\",JOptionPane.INFORMATION_MESSAGE);\n\t\t\tdesabilitaBotoes ();\n\t\t}\n\t}\n\tif (e.getSource() == this.proximo){\n\t\tif (this.nivelAtual == 0) {\n\t\t\tJOptionPane.showMessageDialog (null,\"Escolha um nvel para jogar!\",\"\",JOptionPane.WARNING_MESSAGE);\n\t\t}\n\t\telse {\n\t\t\tthis.jogo.preparaJogo();\n\t\t\tnovoNivel (this.jogo.getSegredo(),this.jogo.getImagem());\n\t\t}\n\t}\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo que faz o painel Central completo\n", "func_signal": "private void fazPainelCentral ()", "code": "{\n\tthis.painelCentral = new JPanel ();\n\tthis.painelCentral.setSize (480,50);\n\tthis.painelCentral.setLocation (260,200);\n\tthis.painelCentral.setLayout (new GridLayout ());\n\tthis.labelSegredo = new JLabel (\"Descubra o segredo:\",JLabel.CENTER);\n\tthis.labelSegredo.setFont (new Font (\"Comic Sans\",Font.BOLD,26));\n\tthis.painelCentral.add(this.labelSegredo);\n\tgetContentPane().add(this.painelCentral);\n\tfazPainelSegredo ();\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo que desabilita os botes caso a soluo seja pedida pelo usurio\n", "func_signal": "private void desabilitaBotoes ()", "code": "{\n\tfor (int i = 0; i < 26; i++) {\n\t\tthis.vetbotao[i].setEnabled(false);\n\t}\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo que habilita os painel dos botes para que um nvo nivel se inicie\n", "func_signal": "private void habilitaBotoes ()", "code": "{\n\tfor (int i = 0; i < 26; i++) {\n\t\tthis.vetbotao[i].setEnabled(true);\n\t}\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo que trata os eventos dos botes das letras\n", "func_signal": "public void eventoBotaoLetras (ActionEvent e)", "code": "{\n\tint quantErro;\n\tchar letra;\n\tString secret;\n\tfor (int i = 0; i < 26; i++) {\n\t\tif (e.getSource() == this.vetbotao[i]){\n\t\t\tthis.vetbotao[i].setEnabled(false);\n\t\t\tletra = (char) ('A' + i);\n\t\t\tquantErro = this.jogo.getErros();\n\t\t\tthis.jogo.acertou(letra);\n\t\t\tif (quantErro != this.jogo.getErros()) {\n\t\t\t\tquantErro++;\n\t\t\t\tatualizaEnforcado(quantErro);\n\t\t\t}\n\t\t\tsecret = this.jogo.getPalavra();\n\t\t\tfor (int aux = 0; aux < secret.length(); aux++){\n\t\t\t\tif (secret.charAt(aux)!= ' '){\n\t\t\t\t\tthis.segredo[aux].setText(\"\"+secret.charAt(aux));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.jogo.jogoAcabou()) {\n\t\t\t\tif (quantErro < 5){\n\t\t\t\t\tJOptionPane.showMessageDialog (null,\"PARABNS! \\nVoc adivinhou o segredo!\",\"\",JOptionPane.INFORMATION_MESSAGE);\n\t\t\t\t\tdesabilitaBotoes ();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tJOptionPane.showMessageDialog (null,\"Tente de Novo! \\nO Segredo era \"+this.jogo.getSegredo(),\"\",JOptionPane.WARNING_MESSAGE);\n\t\t\t\t\tdesabilitaBotoes ();\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo que faz o painel das caixinhas das letras do segredo\n", "func_signal": "private void fazPainelSegredo ()", "code": "{\n\tint i;\n\tthis.segredo = new JTextField[20];\n\tthis.painelSegredo = new JPanel();\n\tthis.painelSegredo.setSize(480,50);\n\tthis.painelSegredo.setLocation (260,260); //teste\n\tthis.painelSegredo.setLayout(new FlowLayout(1));\n\tfor (i = 0; i < 20; i++){\n\t\tthis.segredo[i] = new JTextField(1);\n\t\tthis.segredo[i].setFont(new Font (\"Comic Sans\", Font.BOLD, 16));\n\t\tthis.segredo[i].setEditable(false);\n\t\tthis.segredo[i].setBackground(Color.WHITE);\n\t\tthis.segredo[i].setVisible(false);\n\t\tthis.painelSegredo.add(this.segredo[i]);\n\t}\n\tgetContentPane().add(this.painelSegredo);\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo que faz o Painel Inicial\n", "func_signal": "private void fazPainelInicial ()", "code": "{\n\tthis.msg1 = new JLabel (\"Ol!!!\",JLabel.CENTER);\n\tthis.msg1.setFont (new Font (\"Comic Sans\", Font.BOLD,40));\n\tthis.msg2 = new JLabel (\"Bem-vindo(a)!\",JLabel.CENTER);\n\tthis.msg2.setFont (new Font (\"Comic Sans\", Font.BOLD,40));\n\tthis.msg3 = new JLabel (\"Escolha no\",JLabel.CENTER);\n\tthis.msg3.setFont (new Font (\"Comic Sans\", Font.BOLD,40));\n\tthis.msg4 = new JLabel (\"menu um nvel\",JLabel.CENTER);\n\tthis.msg4.setFont (new Font (\"Comic Sans\", Font.BOLD,40));\n\tthis.msg5 = new JLabel (\"para jogar!\",JLabel.CENTER);\n\tthis.msg5.setFont (new Font (\"Comic Sans\", Font.BOLD,40));\n\tthis.painelInicio = new JPanel ();\n\tthis.painelInicio.setSize(700,300);\n\tthis.painelInicio.setLocation (280,200);\n\t//this.painelInicio.setBackground (new Color (150,0,250));//teste\n\tthis.painelInicio.setLayout (new GridLayout (5,1));\n\tthis.painelInicio.add(this.msg1);\n\tthis.painelInicio.add(this.msg2);\n\tthis.painelInicio.add(this.msg3);\n\tthis.painelInicio.add(this.msg4);\n\tthis.painelInicio.add(this.msg5);\n\tgetContentPane().add(this.painelInicio);\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo que atualiza o painel dos segredo para que as letras possam aparecer assim que o usurio digitar\n", "func_signal": "public void atualizaPainelSegredo (String palavra)", "code": "{\n\tint tamanho = palavra.length();\n\tfor (int i=0; i< 20; i++){\n\t\tif (i < tamanho){\n\t\t\tthis.segredo[i].setVisible(true);\n\t\t\tif (Character.isLetter(palavra.charAt(i)))\n\t\t\t\tthis.segredo[i].setText(\"\");\n\t\t\telse\n\t\t\t\tif (palavra.charAt(i) == '-')\n\t\t\t\t\tthis.segredo[i].setText(\"-\");\n\t\t}\n\t\telse\n\t\t\tthis.segredo[i].setVisible(false);\n\t}\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "/**\n * Mtodo construtor para inicializar e montar os painis\n * Monta a tela de entrada (at que o ususrio realize uma ao)\n */\n", "func_signal": "public Interface ()", "code": "{\n\tsuper (\"Jogo da Forca\");\n\tconfiguraJFrame ();\n\tcriaMenu ();\n\tfazTitulo ();\n\tfazPainelBotoes ();\n\tthis.painelLetras.setVisible(false);\n\tfazPainelEnforcado ();\n\tfazPainelInicial ();\n\tfazPainelCentral ();\n\tfazPainelFigura (\"\");\n\tthis.painelCentral.setVisible(false);\n\tthis.painelSegredo.setVisible(false);\n\tthis.nivelAtual = 0; //inicializado para comparao caso o menu das opes seja ativado\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo que trata dos eventos dos RadioButtons\n", "func_signal": "public void itemStateChanged(ItemEvent e)", "code": "{\n\tfor (int i = 0; i < 4; i++) {\n\t\tif (e.getSource() == this.niveis[i]){\n\t\t\tthis.nivelAtual = i + 1;\n\t\t\tthis.jogo = new Jogo (this.nivelAtual);\n\t\t\tnovoNivel (this.jogo.getSegredo(),this.jogo.getImagem());\n\t\t\tbreak;\n\t\t}\n\t}\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\Interface.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "//mtodo que l o arquivo e armazena as informes no registro\n", "func_signal": "public VetorPalavraImagem readFile () throws Exception", "code": "{\n\tPalavraImagem reg; \n\tVetorPalavraImagem vetor;\n\tString linha;\n\tint tam;\n\ttry {\n\t\tlinha = input.nextLine();\n\t\ttam = Integer.parseInt(linha);\n\t\tvetor = new VetorPalavraImagem (tam);\n\t\twhile (input.hasNext()) {\n\t\t\tlinha = input.nextLine();\n\t\t\ttry{\n\t\t\t\treg = new PalavraImagem(linha);\n\t\t\t}\n\t\t\tcatch (Exception erro){\n\t\t\t\tthrow new Exception (\"LINHA DO ARQUIVO NO CONTM TODOS OS COMPONENTES\");\n\t\t\t}\n\t\t\tvetor.insereVetor(reg);\n\t\t}\n\t\tinput.close();\n\t\treturn vetor;\n\t}\n\tcatch (NoSuchElementException erro){\n\t\tthrow new NoSuchElementException (\"ARQUIVO VAZIO\");\n\t}\n\tcatch (IllegalStateException erro){\n\t\tthrow new IllegalStateException (\"ERRO AO LER O ARQUIVO\");\n\t}\n\tcatch (ArrayIndexOutOfBoundsException erro){\n\t\tthrow new ArrayIndexOutOfBoundsException (\"VETOR MENOR QUE NMERO DE ELEMENTOS DO ARQUIVO\");\n\t}\n\t\n}", "path": "src\\br\\faesa\\grupoestudos\\forca\\LeArquivo.java", "repo_name": "loiane/JogoDaForca", "stars": 18, "license": "None", "language": "java", "size": 1108}
{"docstring": "/** Starts the recording.\nTo accomplish this, (i) the line is started and (ii) the\nthread is started.\n */\n", "func_signal": "@Override\npublic void start()", "code": "{\n    m_line.start();\n    super.start();\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\SplitAudioRecorder.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/**\n * Reads some number of bytes from the audio input stream and stores them into\n * the buffer array <code>b</code>. The number of bytes actually read is\n * returned as an integer. This method blocks until input data is\n * available, the end of the stream is detected, or an exception is thrown.\n * <p>This method will always read an integral number of frames.\n * If the length of the array is not an integral number\n * of frames, a maximum of <code>b.length - (b.length % frameSize)\n * </code> bytes will be read.\n *\n * @param b the buffer into which the data is read\n * @return the total number of bytes read into the buffer, or -1 if there\n * is no more data because the end of the stream has been reached\n * @throws IOException if an input or output error occurs\n * @see #read(byte[], int, int)\n * @see #read()\n * @see #available\n */\n", "func_signal": "@Override\npublic int read(byte[] b) throws IOException", "code": "{\n    if (!stopped) return wrapped.read(b);\n    else return -1;\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\SplitableAudioInputStream.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/**\n * Test of getWavSampleRate method, of class SplitAudioRecorderConfiguration.\n */\n", "func_signal": "@Test\npublic void testJsonSerialization() throws IOException", "code": "{\n    ObjectMapper mapper = new ObjectMapper();\n\n\n    SplitAudioRecorderConfiguration config = new SplitAudioRecorderConfiguration();\n    String result = mapper.writeValueAsString(config);\n\n    System.out.println(result);\n    assertTrue(result.contains(\"wavSampleRate\"));\n\n\n\n}", "path": "src\\test\\java\\com\\googlecode\\eckoit\\audio\\SplitAudioRecorderConfigurationTest.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/** Starts the recording.\nTo accomplish this, (i) the line is started and (ii) the\nthread is started.\n */\n", "func_signal": "@Override\npublic void start()", "code": "{\n    m_line.start();\n    super.start();\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\SimpleAudioRecorder.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/**\n * Repositions this audio input stream to the position it had at the time its\n * <code>mark</code> method was last invoked.\n * @throws IOException if an input or output error occurs.\n * @see #mark\n * @see #markSupported\n */\n", "func_signal": "@Override\npublic void reset() throws IOException", "code": "{\n    if (!stopped)\n     wrapped.reset();\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\SplitableAudioInputStream.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/**\n * Skips over and discards a specified number of bytes from this\n * audio input stream.\n * @param n the requested number of bytes to be skipped\n * @return the actual number of bytes skipped\n * @throws IOException if an input or output error occurs\n * @see #read\n * @see #available\n */\n", "func_signal": "@Override\npublic long skip(long n) throws IOException", "code": "{\n    if (!stopped) return wrapped.skip(n);\n    else return 0;\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\SplitableAudioInputStream.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/**Format a time from secs to a human readable format*/\n", "func_signal": "public static  String formatTimeBySec(long l, boolean bTrimZeros)", "code": "{\n\n    if (l == -1){ //means we are in repeat mode\n        return \"--:--\"; //$NON-NLS-1$\n    }\n    if (l<0) l =0;  //make sure to to get negative values\n    long lHours = l/3600;\n    long lMins = l/60-(lHours*60);\n    long lSecs = l-(lHours*3600)-(lMins*60);\n\n    StringBuffer sbHours = new StringBuffer(Long.toString(lHours));\n    if ( sbHours.length() == 1 && !bTrimZeros) sbHours.insert(0,'0');\n    StringBuffer sbMins = new StringBuffer(Long.toString(lMins));\n\n    if ( sbMins.length() == 1 && !bTrimZeros) sbMins.insert(0,'0');\n    StringBuffer sbSecs = new StringBuffer(Long.toString(lSecs));\n    if ( sbSecs.length() == 1) sbSecs.insert(0,'0');\n\n    StringBuffer sbResult = new StringBuffer(\"\");\n\n     sbResult.append(sbHours.toString());\n\n     sbResult.append(\":\");\n\n    return sbResult.append(sbMins.toString()).append(\":\").append(sbSecs.toString()).toString(); //$NON-NLS-1$\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\ui\\TimeUtils.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/** Creates new form SimpleRecordPanel */\n", "func_signal": "public SimpleRecordPanel()", "code": "{\n    initComponents();\n\n    statusLabel.setVisible(false);\n\n    EventBus.subscribeStrongly(RecordingStartedResponseEvent.class, new EventSubscriber<RecordingStartedResponseEvent>() {\n        @Override\n        public void onEvent(RecordingStartedResponseEvent t) {\n            startButton.setEnabled(false);\n            stopButton.setEnabled(true);\n            startTime = System.currentTimeMillis();\n            endTime = 0;\n            updateLength.start();\n        }\n    });\n\n    EventBus.subscribeStrongly(RecordingStoppedResponseEvent.class, new EventSubscriber<RecordingStoppedResponseEvent>() {\n        @Override\n        public void onEvent(RecordingStoppedResponseEvent t) {\n            startButton.setEnabled(true);\n            stopButton.setEnabled(false);\n            updateLength.stop();\n            endTime = System.currentTimeMillis();\n        }\n    });\n\n\n    EventBus.subscribeStrongly(PostProcessingStartedEvent.class, new EventSubscriber<PostProcessingStartedEvent>() {\n\n        @Override\n        public void onEvent(PostProcessingStartedEvent t) {\n            statusLabel.setVisible(true);\n            statusLabel.setText(\"Processing, please wait...\");\n        }\n    });\n\n    EventBus.subscribeStrongly(RecordingCompleteEvent.class, new EventSubscriber<RecordingCompleteEvent>() {\n        @Override\n        public void onEvent(RecordingCompleteEvent t) {\n            statusLabel.setVisible(false);\n            statusLabel.setText(\"\");\n        }\n    });\n\n    EventBus.subscribeStrongly(UploadingStartedEvent.class, new EventSubscriber<UploadingStartedEvent>() {\n\n        @Override\n        public void onEvent(UploadingStartedEvent t) {\n            statusLabel.setVisible(true);\n            statusLabel.setText(\"Uploading, please wait...\");\n        }\n    });\n    EventBus.subscribeStrongly(UploadingFinishedEvent.class, new EventSubscriber<UploadingFinishedEvent>() {\n\n        @Override\n        public void onEvent(UploadingFinishedEvent t) {\n            statusLabel.setVisible(false);\n            statusLabel.setText(\"\");\n        }\n    });\n\n    updateLength = new Timer(1000, new updateLengthThread());\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\ui\\SimpleRecordPanel.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/**\n * Test of startRecording method, of class SplitAudioRecorderManager.\n */\n", "func_signal": "@Test\npublic void testStartRecording() throws Exception", "code": "{\n    System.out.println(\"startRecording\");\n\n    File file = new File(\"target\");\n    \n    String mixer = \"default\";\n    float gain = 0.0F;\n\n    String ffmpeg = \"/Applications/eckoit/lib/ffmpeg\";\n\n\n    EventBus.publish(new ExitApplicationMessage());\n\n}", "path": "src\\test\\java\\com\\googlecode\\eckoit\\audio\\SplitAudioRecorderManagerTest.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jPanel1 = new javax.swing.JPanel();\n    timerLabel = new javax.swing.JLabel();\n    stopButton = new javax.swing.JButton();\n    startButton = new javax.swing.JButton();\n    statusLabel = new javax.swing.JLabel();\n\n    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Audio Recording\"));\n\n    timerLabel.setFont(new java.awt.Font(\"Lucida Grande\", 0, 24)); // NOI18N\n    timerLabel.setText(\"00:00:00\");\n\n    stopButton.setText(\"Stop\");\n    stopButton.setEnabled(false);\n    stopButton.setMargin(new java.awt.Insets(0, 1, 0, 1));\n    stopButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            stopButtonActionPerformed(evt);\n        }\n    });\n\n    startButton.setText(\"Start\");\n    startButton.setMargin(new java.awt.Insets(0, 0, 0, 0));\n    startButton.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            startButtonActionPerformed(evt);\n        }\n    });\n\n    statusLabel.setForeground(new java.awt.Color(153, 153, 255));\n    statusLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/ajax-loader.gif\"))); // NOI18N\n    statusLabel.setText(\"jLabel2\");\n\n    org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n                .add(timerLabel)\n                .add(statusLabel))\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 19, Short.MAX_VALUE)\n            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)\n                .add(stopButton, 0, 0, Short.MAX_VALUE)\n                .add(startButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(jPanel1Layout.createSequentialGroup()\n            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n                .add(timerLabel)\n                .add(jPanel1Layout.createSequentialGroup()\n                    .add(startButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n                    .add(stopButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))\n            .addContainerGap(20, Short.MAX_VALUE))\n        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()\n            .addContainerGap(27, Short.MAX_VALUE)\n            .add(statusLabel)\n            .addContainerGap())\n    );\n\n    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);\n    this.setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(layout.createSequentialGroup()\n            .addContainerGap()\n            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(layout.createSequentialGroup()\n            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\ui\\SimpleRecordPanel.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/** Stops the recording.\n */\n", "func_signal": "@Override\npublic synchronized long stopRecording()", "code": "{\n    if (isRecording) {\n        m_line.stop();\n        m_line.close();\n        m_line = null;\n        isRecording = false;\n        long now = System.currentTimeMillis();\n        return (now - recordingStart)/1000;\n    }\n    return -1;\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\SimpleAudioRecorder.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "//Obtain the image URL\n", "func_signal": "protected static Image createImage(String path)", "code": "{\n    URL imageURL = SimpleTrayRecorder.class.getResource(path);\n\n    if (imageURL == null) {\n        System.err.println(\"Resource not found: \" + path);\n        return null;\n    } else {\n        return (new ImageIcon(imageURL)).getImage();\n    }\n\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\ui\\SimpleTrayRecorder.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/**\n * This will do everything in its power to get a ffmpeg name back.\n *\n * @param workingDir The working dir that will hold a cached copy of ffmpeg\n * @param connector A couchdb that holds binary copies of ffmpeg\n * @param designDocName the design doc that holds the binary copies\n * @return\n * @throws NotImplementedException ffmpeg cant be found anywhere!\n */\n", "func_signal": "public String ffmpegLocation(File workingDir, CouchDbConnector connector, String designDocName) throws NotImplementedException", "code": "{\n    String localFile = findLocalFFMpeg(workingDir);\n    if (localFile != null) return localFile;\n\n    // test system wide\n    String system = findFFmepg();\n    if (system != null) return system;\n\n    return installFFMpegAndReturnLocation(workingDir, connector, designDocName);\n\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\util\\FFMpegSetterUpper.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/**\n * If the file is too fresh, we dont want to begin conversion\n * @param wav\n * @return\n */\n", "func_signal": "private boolean tooFresh(File wav)", "code": "{\n    long now = System.currentTimeMillis();\n    long timestamp = wav.lastModified();\n    if ((now - timestamp) < 2000) return true;\n    else return false;\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\ContinousAudioConvereter.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/**\n * Returns the maximum number of bytes that can be read (or skipped over) from this\n * audio input stream without blocking.  This limit applies only to the next invocation of\n * a <code>read</code> or <code>skip</code> method for this audio input stream; the limit\n * can vary each time these methods are invoked.\n * Depending on the underlying stream,an IOException may be thrown if this\n * stream is closed.\n * @return the number of bytes that can be read from this audio input stream without blocking\n * @throws IOException if an input or output error occurs\n * @see #read(byte[], int, int)\n * @see #read(byte[])\n * @see #read()\n * @see #skip\n */\n", "func_signal": "@Override\npublic int available() throws IOException", "code": "{\n    if (!stopped) return wrapped.available();\n    else return 0;\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\SplitableAudioInputStream.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/** Stops the recording.\n */\n", "func_signal": "@Override\npublic synchronized long stopRecording()", "code": "{\n    if (isRecording) {\n        m_line.stop();\n        m_line.close();\n        m_line = null;\n        timer.cancel();\n        isRecording = false;\n        long now = System.currentTimeMillis();\n        // final section\n        long splitStartTime = now - splitTime;\n        RecordingSplitEvent rse = new RecordingSplitEvent(section, recordingID, splitStartTime);\n        rse.setIsFinal(true);\n        EventBus.publish(rse);\n        return (now - recordingStart)/1000;\n    }\n    return -1;\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\SplitAudioRecorder.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "//ffmpeg.exe -i out.wav -f mp3  -ab 48000 -ar 44100 test3.mp3\n", "func_signal": "public FFMpegConverter( String ffmpegcmd, String encoder)", "code": "{\n    this.ffmpegFullCommand =  ffmpegcmd;\n    this.encoder = encoder;\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\FFMpegConverter.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/**\n * Marks the current position in this audio input stream.\n * @param readlimit the maximum number of bytes that can be read before\n * the mark position becomes invalid.\n * @see #reset\n * @see #markSupported\n */\n", "func_signal": "@Override\npublic void mark(int readlimit)", "code": "{\n    if (!stopped)\n        wrapped.mark(readlimit);\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\SplitableAudioInputStream.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/**\n * Reads the next byte of data from the audio input stream.  The audio input\n * stream's frame size must be one byte, or an <code>IOException</code>\n * will be thrown.\n *\n * @return the next byte of data, or -1 if the end of the stream is reached\n * @throws IOException if an input or output error occurs\n * @see #read(byte[], int, int)\n * @see #read(byte[])\n * @see #available\n * <p>\n */\n", "func_signal": "@Override\npublic int read() throws IOException", "code": "{\n    if (!stopped) return wrapped.read();\n    else return -1;\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\SplitableAudioInputStream.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/**\n * Reads up to a specified maximum number of bytes of data from the audio\n * stream, putting them into the given byte array.\n * <p>This method will always read an integral number of frames.\n * If <code>len</code> does not specify an integral number\n * of frames, a maximum of <code>len - (len % frameSize)\n * </code> bytes will be read.\n *\n * @param b the buffer into which the data is read\n * @param off the offset, from the beginning of array <code>b</code>, at which\n * the data will be written\n * @param len the maximum number of bytes to read\n * @return the total number of bytes read into the buffer, or -1 if there\n * is no more data because the end of the stream has been reached\n * @throws IOException if an input or output error occurs\n * @see #read(byte[])\n * @see #read()\n * @see #skip\n * @see #available\n */\n", "func_signal": "@Override\npublic int read(byte[] b, int off, int len) throws IOException", "code": "{\n    if (!stopped) return wrapped.read(b, off, len);\n    else return -1;\n}", "path": "src\\main\\java\\com\\googlecode\\eckoit\\audio\\SplitableAudioInputStream.java", "repo_name": "ryanramage/couch-audio-recorder", "stars": 21, "license": "apache-2.0", "language": "java", "size": 14168}
{"docstring": "/**\n * We start the long click here but rely on the {@link NumberPickerButton}\n * to inform us when the long click has ended.\n */\n", "func_signal": "public boolean onLongClick(View v)", "code": "{\n    \n    /* The text view may still have focus so clear it's focus which will\n     * trigger the on focus changed and any typed values to be pulled.\n     */\n    mText.clearFocus();\n    \n    if (R.id.increment == v.getId()) {\n        mIncrement = true;\n        mHandler.post(mRunnable);\n    } else if (R.id.decrement == v.getId()) {\n        mDecrement = true;\n        mHandler.post(mRunnable);\n    }\n    return true;\n}", "path": "src\\com\\hlidskialf\\android\\widget\\NumberPicker.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "/**\n * Removes an existing Alarm.  If this alarm is snoozing, disables\n * snooze.  Sets next alert.\n */\n", "func_signal": "public synchronized static void deleteAlarm(\n        Context context, int alarmId)", "code": "{\n\n    ContentResolver contentResolver = context.getContentResolver();\n    /* If alarm is snoozing, lose it */\n    int snoozeId = getSnoozeAlarmId(context);\n    if (snoozeId == alarmId) disableSnoozeAlert(context);\n\n    Uri uri = ContentUris.withAppendedId(AlarmColumns.CONTENT_URI, alarmId);\n    deleteAlarm(contentResolver, uri);\n\n    setNextAlert(context);\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\Alarms.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "/**\n * Set the range of numbers allowed for the number picker. The current\n * value will be automatically set to the start.\n * \n * @param start the start of the range (inclusive)\n * @param end the end of the range (inclusive)\n */\n", "func_signal": "public void setRange(int start, int end)", "code": "{\n    mStart = start;\n    mEnd = end;\n    mCurrent = start;\n    updateView();\n}", "path": "src\\com\\hlidskialf\\android\\widget\\NumberPicker.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "/**\n * @return alarm ID of snoozing alarm, -1 if snooze unset\n */\n", "func_signal": "private static int getSnoozeAlarmId(final Context context)", "code": "{\n    SharedPreferences prefs = context.getSharedPreferences(\n            AlarmClock.PREFERENCES, 0);\n    return prefs.getInt(PREF_SNOOZE_ID, -1);\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\Alarms.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "/**\n * Tells the StatusBar whether the alarm is enabled or disabled\n */\n", "func_signal": "private static void setStatusBarIcon(Context context, boolean enabled)", "code": "{\n    Intent alarmChanged = new Intent(ACTION_ALARM_CHANGED);\n    alarmChanged.putExtra(\"alarmSet\", enabled);\n    context.sendBroadcast(alarmChanged);\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\Alarms.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "/**\n * Calls the AlarmSettings.reportAlarm interface on alarm with given\n * alarmId\n */\n", "func_signal": "public synchronized static void getAlarm(\n        ContentResolver contentResolver, AlarmSettings alarmSetting,\n        int alarmId)", "code": "{\n    Cursor cursor = contentResolver.query(\n            ContentUris.withAppendedId(AlarmColumns.CONTENT_URI, alarmId),\n            AlarmColumns.ALARM_QUERY_COLUMNS,\n            null, null, AlarmColumns.DEFAULT_SORT_ORDER);\n\n    getAlarms(alarmSetting, cursor);\n    cursor.close();\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\Alarms.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "/**\n * If there is a snooze set, enable it in AlarmManager\n * @return true if snooze is set\n */\n", "func_signal": "private static boolean enableSnoozeAlert(final Context context)", "code": "{\n    SharedPreferences prefs = context.getSharedPreferences(\n            AlarmClock.PREFERENCES, 0);\n\n    int id = prefs.getInt(PREF_SNOOZE_ID, -1);\n    if (id == -1) return false;\n    long atTimeInMillis = prefs.getLong(PREF_SNOOZE_TIME, -1);\n    if (id == -1) return false;\n    // Try to get the label from the snooze preference. If null, use the\n    // default label.\n    String label = prefs.getString(PREF_SNOOZE_LABEL, null);\n    if (label == null) {\n        label = context.getString(R.string.default_label);\n    }\n    enableAlert(context, id, label, atTimeInMillis);\n    return true;\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\Alarms.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "/**\n * Calls the AlarmSettings.reportAlarm interface on all alarms found in db.\n */\n", "func_signal": "public synchronized static void getAlarms(\n        ContentResolver contentResolver, AlarmSettings alarmSettings)", "code": "{\n    Cursor cursor = getAlarmsCursor(contentResolver);\n    getAlarms(alarmSettings, cursor);\n    cursor.close();\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\Alarms.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "/**\n * Set the range of numbers allowed for the number picker. The current\n * value will be automatically set to the start. Also provide a mapping\n * for values used to display to the user.\n * \n * @param start the start of the range (inclusive)\n * @param end the end of the range (inclusive)\n * @param displayedValues the values displayed to the user.\n */\n", "func_signal": "public void setRange(int start, int end, String[] displayedValues)", "code": "{\n    mDisplayedValues = displayedValues;\n    mStart = start;\n    mEnd = end;\n    mCurrent = start;\n    updateView();\n}", "path": "src\\com\\hlidskialf\\android\\widget\\NumberPicker.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "/**\n * Queries all alarms\n * @return cursor over all alarms\n */\n", "func_signal": "public synchronized static Cursor getAlarmsCursor(\n        ContentResolver contentResolver)", "code": "{\n    return contentResolver.query(\n            AlarmColumns.CONTENT_URI, AlarmColumns.ALARM_QUERY_COLUMNS,\n            null, null, AlarmColumns.DEFAULT_SORT_ORDER);\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\Alarms.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "/**\n * Called at system startup, on time/timezone change, and whenever\n * the user changes alarm settings.  Activates snooze if set,\n * otherwise loads all alarms, activates next alert.\n */\n", "func_signal": "public static void setNextAlert(final Context context)", "code": "{\n    int snoozeId = getSnoozeAlarmId(context);\n    if (snoozeId == -1) {\n        AlarmCalculator ac = calculateNextAlert(context);\n        int id = ac.getIndex();\n        long atTime = ac.getAlert();\n\n        if (atTime < Long.MAX_VALUE) {\n            enableAlert(context, id, ac.getLabel(), atTime);\n        } else {\n            disableAlert(context, id);\n        }\n    } else {\n        enableSnoozeAlert(context);\n    }\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\Alarms.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "/**\n * A convenience method to enable or disable an alarm.\n *\n * @param id             corresponds to the _id column\n * @param enabled        corresponds to the ENABLED column\n */\n", "func_signal": "public synchronized static void enableAlarm(\n        final Context context, final int id, boolean enabled)", "code": "{\n    int aid = disableSnoozeAlert(context);\n    if (aid != -1 && aid != id) enableAlarmInternal(context, aid, false);\n    enableAlarmInternal(context, id, enabled);\n    setNextAlert(context);\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\Alarms.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "/**\n * Disables non-repeating alarms that have passed.  Called at\n * boot.\n */\n", "func_signal": "public static void disableExpiredAlarms(final Context context)", "code": "{\n    Cursor cur = getAlarmsCursor(context.getContentResolver());\n    long now = System.currentTimeMillis();\n\n    if (cur.moveToFirst()) {\n        do {\n            // Get the field values\n            int id = cur.getInt(AlarmColumns.ALARM_ID_INDEX);\n            boolean enabled = cur.getInt(\n                    AlarmColumns.ALARM_ENABLED_INDEX) == 1 ? true : false;\n            DaysOfWeek daysOfWeek = new DaysOfWeek(\n                    cur.getInt(AlarmColumns.ALARM_DAYS_OF_WEEK_INDEX));\n            long time = cur.getLong(AlarmColumns.ALARM_TIME_INDEX);\n\n            if (enabled && !daysOfWeek.isRepeatSet() && time < now) {\n                if (Log.LOGV) Log.v(\n                        \"** DISABLE \" + id + \" now \" + now +\" set \" + time);\n                enableAlarmInternal(context, id, false);\n            }\n        } while (cur.moveToNext());\n    }\n    cur.close();\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\Alarms.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "// Attempt to snooze this alert.\n", "func_signal": "private void snooze()", "code": "{\n    if (mState != UNKNOWN) {\n        return;\n    }\n    if (mSnooze == 0) { // snooze disabled for this alarm\n      return;\n    }\n    if (mCaptchaSnooze != 0 && !mCaptchaDone) {\n      show_captcha(mCaptchaSnooze, SNOOZE);\n      return;\n    }\n\n    // If the next alarm is set for sooner than the snooze interval, don't\n    // snooze. Instead, toast the user that the snooze will not be set.\n    final long snoozeTime = System.currentTimeMillis()\n            + (1000 * 60 * mSnooze);\n    final long nextAlarm =\n            Alarms.calculateNextAlert(AlarmAlert.this).getAlert();\n    String displayTime = null;\n    if (nextAlarm < snoozeTime) {\n        final Calendar c = Calendar.getInstance();\n        c.setTimeInMillis(nextAlarm);\n        displayTime = getString(R.string.alarm_alert_snooze_not_set,\n                Alarms.formatTime(AlarmAlert.this, c));\n        mState = DISMISS;\n    } else {\n        Alarms.saveSnoozeAlert(AlarmAlert.this, mAlarmId, snoozeTime,\n                mLabel);\n        Alarms.setNextAlert(AlarmAlert.this);\n        displayTime = getString(R.string.alarm_alert_snooze_set,\n                mSnooze);\n        mState = SNOOZE;\n    }\n    // Intentionally log the snooze time for debugging.\n    Log.v(displayTime);\n    // Display the snooze minutes in a toast.\n    Toast.makeText(AlarmAlert.this, displayTime, Toast.LENGTH_LONG).show();\n    mKlaxon.stop(this, mState == SNOOZE);\n    releaseLocks();\n    finish();\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\AlarmAlert.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "/**\n * release wake and keyguard locks\n */\n", "func_signal": "private synchronized void releaseLocks()", "code": "{\n    AlarmAlertWakeLock.release();\n    enableKeyguard();\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\AlarmAlert.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "// Dismiss the alarm.\n", "func_signal": "private void dismiss()", "code": "{\n    if (mState != UNKNOWN) {\n        return;\n    }\n    if (mCaptchaDismiss != 0 && !mCaptchaDone) {\n      show_captcha(mCaptchaDismiss, DISMISS);\n      return;\n    }\n    mState = DISMISS;\n    mKlaxon.stop(this, false);\n    releaseLocks();\n    finish();\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\AlarmAlert.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "// Returns days of week encoded in an array of booleans.\n", "func_signal": "public boolean[] getBooleanArray()", "code": "{\n    boolean[] ret = new boolean[7];\n    for (int i = 0; i < 7; i++) {\n        ret[i] = isSet(i);\n    }\n    return ret;\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\Alarms.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "/**\n * Shows day and time -- used for lock screen\n */\n", "func_signal": "private static String formatDayAndTime(final Context context, Calendar c)", "code": "{\n    String format = get24HourMode(context) ? DM24 : DM12;\n    return (c == null) ? \"\" : (String)DateFormat.format(format, c);\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\Alarms.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "/**\n * this is called when a second alarm is triggered while a\n * previous alert window is still active.\n */\n", "func_signal": "@Override\nprotected void onNewIntent(Intent intent)", "code": "{\n    super.onNewIntent(intent);\n    if (Log.LOGV) Log.v(\"AlarmAlert.OnNewIntent()\");\n    mState = UNKNOWN;\n    mSnoozeButton.setEnabled(true);\n    disableKeyguard();\n\n    mAlarmId = intent.getIntExtra(Alarms.ID, -1);\n    // Play the new alarm sound.\n    mKlaxon.postPlay(this, mAlarmId);\n\n    setTitleFromIntent(intent);\n\n    /* unset silenced message */\n    TextView silenced = (TextView)findViewById(R.id.silencedText);\n    silenced.setVisibility(View.GONE);\n\n    Alarms.setNextAlert(this);\n    setIntent(intent);\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\AlarmAlert.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
{"docstring": "/**\n * Creates a new Alarm.\n */\n", "func_signal": "public synchronized static Uri addAlarm(Context context)", "code": "{\n    ContentValues values = new ContentValues();\n    values.put(Alarms.AlarmColumns.HOUR, 8);\n\n    SharedPreferences prefs = context.getSharedPreferences(AlarmClock.PREFERENCES, 0);\n            \n    values.put(Alarms.AlarmColumns.SNOOZE, prefs.getInt(\"default_snooze\", 9));\n    values.put(Alarms.AlarmColumns.DURATION, prefs.getInt(\"default_duration\", 10));\n    values.put(Alarms.AlarmColumns.DELAY, prefs.getInt(\"default_delay\", 0));\n    values.put(Alarms.AlarmColumns.VOLUME, prefs.getInt(\"default_volume\", 100));\n    values.put(Alarms.AlarmColumns.CRESCENDO, prefs.getInt(\"default_crescendo\", 0));\n    values.put(Alarms.AlarmColumns.ALERT, \n      prefs.getString(\"default_alarm\",Settings.System.DEFAULT_RINGTONE_URI.toString())); \n\n    return context.getContentResolver().insert(AlarmColumns.CONTENT_URI, values);\n}", "path": "src\\com\\hlidskialf\\android\\alarmclock\\Alarms.java", "repo_name": "hlidskialf/alarming", "stars": 16, "license": "other", "language": "java", "size": 735}
