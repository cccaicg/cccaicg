{"docstring": "// Menu loaders\n", "func_signal": "private static String[] mainMenu()", "code": "{\n\tString[] menu = new String[6];\n\n\tmenu[0] = \"\\n---------\\nMain Menu\\n---------\\nSelect what mode you would like me to use: \";\n\tmenu[1] = \"\\n    [M]anual input\";\n\tmenu[2] = \"\\n    [F]ile IO\";\n\tmenu[3] = \"\\n    [P]revious IO\";\n\tmenu[4] = \"\\n    [B]atch generation of keys\";\n\tmenu[5] = \"\\n    [Q]uit\";\n\n\treturn menu;\t\n}", "path": "EncryptorMain.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "/**\n Performs the decryption.\n @param ciphertext The message to decrypt.\n @param key The key to use to decrypt the message.\n @param sbseed A seed to generate a substitution table. Can be any integer between 1 and 16777215;\n @return The decrypted text.\n */\n", "func_signal": "public static String Decrypt(String ciphertext, String key, int sbseed)", "code": "{\n\tString message = ciphertext;\n\tString output;\n\tint[] sb;\n\n\tk = setKey(key);\n\tint size = message.length();\n\tsb = generateSBox(sbseed, size);\n\n\tm1 = new int[message.length()];\n\tbuildM1(message, k);\n\n\tk1 = new int[message.length()];\n\tbuildK1(k, sb);\n\n\t// Loop for transformations\n\toutput = \"\";\n\tfor(int c = 0; c < m1.length; c++) {\n\t\tint e = substitute(c, -1);\t\t\t\n\t\tString result = ((Character) k.charAt(e)).toString();\n//System.out.print(result);\n\t\toutput = output.concat(result);\n\t}\n\n//System.out.println(\"\\n-----------------------------------------\");\n\n\treturn output;\n}", "path": "Encryptor.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "/* --------------------------------------------- *\n * Look up the index to use in the substitution. *\n * --------------------------------------------- */\n", "func_signal": "private static int substitute(int position, int mode)", "code": "{\n\tint s = m1[position] + (k1[position] * mode);\n\twhile(s >= k.length()) {\n\t\ts -= k.length();\n\t}\n\n\twhile(s < 0) {\n\t\ts += k.length();\n\t}\n//System.out.print(\"\\n\" + position + \"\\t\" + m1[position] + \"\\t\" + k1[position] + \"\\t\" + s + \"\\t\");\n\treturn s;\n}", "path": "Encryptor.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "/* ----------- *\n * Set the key *\n * ----------- */\n", "func_signal": "private static String setKey(String key)", "code": "{\n\tif(key.equals(\"\") || key.equals(\"basicset\")) {\n\t\treturn BASICSET;\n\t} else if(key.equals(\"fullset\")) {\n\t\treturn FULLSET;\n\t}\n\treturn key;\n}", "path": "Encryptor.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "/* ---------------------------------- *\n * Create the second numerical array. *\n * ---------------------------------- */\n", "func_signal": "private static void buildK1(String key, int[] sbox)", "code": "{\n\tfor(int c = 0; c < k1.length; c++) {\n\t\tk1[c] = (key.codePointAt(c % key.length()) ^ sbox[c % sbox.length]) % k1.length;\n/* \nI think it might be possible to derive a character-set independent version of this cipher by replacing this step with\nk1[c] = key[c % key.length] ^ sbox[c % sbox.length];\n */\n\t}\n}", "path": "Encryptor.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "/**\n This is a menu loader that selects various items of a main menu.\n @param menu The array containing the menu items.\n @param settings A string representing which items are to be displayed. It takes the form (d|-)*, where d indicates display. Settings must be at least the length of the menu array.\n */\n", "func_signal": "private static void printMenu(String[] menu, String settings)", "code": "{\n\tchar[] csettings = settings.toCharArray();\n\n\tfor(int c = 0; c < menu.length; c++) {\n\t\tif(csettings[c] == 'd') {\n\t\t\tSystem.out.print(menu[c]);\n\t\t}\n\t}\n\tSystem.out.println();\n}", "path": "EncryptorMain.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "/* ------------------------- *\n * LETTER FREQUENCY ANALYSIS *\n * ------------------------- */\n", "func_signal": "private static void lfaMain()", "code": "{\n\t\tSystem.out.print(\"\\nLast but not least, would you like me to generate a letter frequency distribution graph for your input and output? \");\n\t\tboolean a = UserAnswer.getAnswer(false);\n\t\tif(a) {\n\t\t\tletterFreqI = generateLFC(input);\n\t\t\tSystem.out.println(\"\\nFor your input, the relative letter frequencies are as follows\\n\" + letterFreqI);\n\t\t\tif(!output.equals(\"\")) { \n\t\t\t\tletterFreqO = generateLFC(output);\n\t\t\t\tSystem.out.println(\"\\nFor my output, the relative letter frequencies are as follows\\n\" + letterFreqO);\t\n\t\t\t}\n\t\t}\n\t}", "path": "EncryptorMain.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "// File input mode\n", "func_signal": "private static void fMode()", "code": "{\n\tSystem.out.println(\"\\nPlease enter the path to the input file: \");\n\tString[] inputFC = FileLoader.FileContents();\n\tString[] outputArr = new String[inputFC.length];\n\tinput = \"\";\n\toutput = \"\";\n\tfor(int l = 0; l < inputFC.length; l++) {\n\t\tinput = input.concat(inputFC[l]);\n\t}\n\n\tkey = generateKey();\n\toutputArr = encMode(inputFC);\n\nSystem.out.println(textWasModified);\n\n\tif(textWasModified) {\n\t\tSystem.out.println(\"\\nI've done my magic on the text from your input file. Where would you like me to save it? Please enter a file name: \");\n\t\tPrintWriter outputStream = FileLoader.WriteFile();\n\t\t\n\t\tfor(int l = 0; l < outputArr.length; l++) {\n\t\t\toutputStream.println(outputArr[l]);\n\t\t\toutput = output.concat(outputArr[l]);\n\t\t}\n\n\t\toutputStream.close();\n\t}\n\n\tlfaMain();\n}", "path": "EncryptorMain.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "/* ------------------ *\n * Generate the S-Box *\n * ------------------ */\n", "func_signal": "private static int[] generateSBox(int seed, int size)", "code": "{\n\tint[] s1 = new int[size];\n\tint s = seed * size;\n\t\n\tfor(int c = 0; c < size; c++) {\n\t\ts = (s + seed) ^ size;\n\t\ts1[c] = s;\n\t}\n\treturn s1;\n}", "path": "Encryptor.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "/* ------------------------- *\n * ENCRYPTION AND DECRYPTION *\n * ------------------------- */\n", "func_signal": "private static String encMode(String input)", "code": "{\n\t\tString output = \"\";\n\t\tSystem.out.print(\"\\nDo you want to [E]ncrypt or [D]ecrypt your input? (Or do you want to [S]kip this step?) \");\n\t\tif(kb.hasNextLine()) {\n\t\t\tchar emode = kb.nextLine().toLowerCase().charAt(0);\n\t\t\tif(emode == 'e') {\n\t\t\t\toutput = encrypt(input);\n\t\t\t} else if(emode == 'd') {\n\t\t\t\toutput = decrypt(input);\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t}", "path": "EncryptorMain.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "/* -------------- *\n * KEY GENERATION *\n * -------------- */\n", "func_signal": "private static String generateKey()", "code": "{\n\t\tprintMenu(keyMenu(), \"ddddddd\");\n\t\tif(kb.hasNextLine()) {\n\t\t\tchar kmode = kb.nextLine().toLowerCase().charAt(0);\n\t\t\tswitch(kmode) {\n\t\t\t\tcase 'w':\t\n\t\t\t\t\treturn KeyGen.generate();\n\t\t\t\tcase 'm':\n\t\t\t\t\tSystem.out.println(\"\\nPlease enter in a key: \");\n\t\t\t\t\treturn kb.nextLine().trim();\n\t\t\t\tcase 'f':\n\t\t\t\t\treturn keyFromFile();\n\t\t\t\tcase 't':\n\t\t\t\t\treturn KeyGen.generate(input);\n\t\t\t\tcase 'p':\n\t\t\t\t\treturn new String(key);\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n\t}", "path": "EncryptorMain.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "/**\n Performs the encryption.\n @param plaintext The message to encrypt.\n @param key The key to use to encrypt the message.\n @param sbseed A seed to generate a substitution table. Can be any integer between 1 and 16777215;\n @return The encrypted text.\n */\n", "func_signal": "public static String Encrypt(String plaintext, String key, int sbseed)", "code": "{\n\tString message = plaintext;\n\tString output;\n\tint[] sb;\n\t\n\tk = setKey(key);\n\tint size = message.length();\n\tsb = generateSBox(sbseed, size);\n\n\tm1 = new int[message.length()];\n\tbuildM1(message, k);\n\n\tk1 = new int[message.length()];\n\tbuildK1(k, sb);\n\n\t// Loop for transformations\n\toutput = \"\";\n\tfor(int c = 0; c < m1.length; c++) {\n\t\tint e = substitute(c, 1);\t\t\t\n\t\tString result = ((Character) k.charAt(e)).toString();\n//System.out.print(result);\n\t\toutput = output.concat(result);\n\t}\n\n//System.out.println(\"\\n-----------------------------------------\");\n\n\treturn output;\n}", "path": "Encryptor.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "// Encrypt\n", "func_signal": "private static String encrypt(String input)", "code": "{\n\tSystem.out.print(\"\\nDo you want to enter a seed value for the encryption? \");\n\tboolean a = UserAnswer.getAnswer(false);\n\tif(a) {\n\t\tint sbseed = getSeed();\n\t\treturn Encryptor.Encrypt(input, key, sbseed);\n\t}\n\treturn Encryptor.Encrypt(input, key);\n}", "path": "EncryptorMain.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "/* ---------------- *\n * THE CORE METHODS *\n * ---------------- */\n// The main method simply calls a whole lot of other methods to guide the user through Encypting something.\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t\tSystem.out.println(\"*******************\\n*                 *\\n*    ENCRYPTOR    *\\n*                 *\\n*******************\\n\");\n\t\tprintMenu(mainMenu(), \"ddd-dd\");\n\t\tchar mode = kb.nextLine().toLowerCase().charAt(0);\n\t\twhile(mode != 'q') {\n\t\t\tswitch(mode) {\n\t\t\t\tcase 'm':\n\t\t\t\t\tmiMode();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'f':\n\t\t\t\t\tfMode();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'p':\n\t\t\t\t\trepeat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'b':\n\t\t\t\t\tbatchKeyGen();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tSystem.out.println(\"Unknown mode!\");\n\t\t\t}\n\t\t\tprintMenu(mainMenu(), \"dddddd\");\n\t\t\tmode = kb.nextLine().toLowerCase().charAt(0);\n\t\t}\n\n\t\tSystem.exit(0);\n\t}", "path": "EncryptorMain.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "// Seedy business\n", "func_signal": "private static int getSeed()", "code": "{\n\tSystem.out.print(\"\\nPlease enter a seed value: \");\n\tint seed = 821;\n\tif(kb.hasNextInt()) {\n\t\tseed = kb.nextInt();\n\t\tkb.nextLine();\n\t}\n\treturn seed;\n}", "path": "EncryptorMain.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "// Decrypt\n", "func_signal": "private static String decrypt(String input)", "code": "{\n\tSystem.out.print(\"\\nDo you want to enter a seed value for the decryption? \");\n\tboolean a = UserAnswer.getAnswer(false);\n\tif(a) {\n\t\tint sbseed = getSeed();\n\t\treturn Encryptor.Decrypt(input, key, sbseed);\n\t}\n\treturn Encryptor.Decrypt(input, key);\n}", "path": "EncryptorMain.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "// Manual input mode\n", "func_signal": "private static void miMode()", "code": "{\n\tSystem.out.println(\"\\nI will perform my functions based on standard input. Please enter your text that I should play with: \");\n\tinput = kb.nextLine().trim();\n\n\tkey = generateKey();\n\toutput = encMode(input);\n\n\tSystem.out.println(\"\\nAnd my output is:\");\n\tSystem.out.println(output);\n\n\tlfaMain();\n}", "path": "EncryptorMain.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "// Repeat last input/output\n", "func_signal": "private static void repeat()", "code": "{\n\tSystem.out.println(\"\\nI will perform my functions based on the previous [I]nput/[O]utput.\");\n\tif(kb.hasNextLine()) {\n\t\tchar io = kb.nextLine().toLowerCase().charAt(0);\n\t\tif(io == 'i') {\n\t\t\tinput = new String(input);\n\t\t} else if(io == 'o') {\n\t\t\tinput = new String(output);\n\t\t}\n\t}\n\tinput = input;\n\tSystem.out.println(\"\\nI am using the input:\\n\" + input);\n\n\tkey = generateKey();\n\toutput = encMode(input);\n\n\tSystem.out.println(\"\\nAnd my output is:\");\n\tSystem.out.println(output);\n\t\n\tlfaMain();\n}", "path": "EncryptorMain.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "/*\n\tThis step could be retained, as it generates a nice set of numbers. I might add salt to a revised edition. Obviously, to make the algorithm more secure, one would have to use more S-Boxes. An array, perhaps?\n\tHow does this look:\n\ts = ((s + seed) >>> (c % s)) ^ size ^ salt;\n\t(As long as given the same starting values it generates the same set all the time, in an architecture-independent manner)\n*/\n\t/* --------------------------------- *\n\t * Create the first numerical array. *\n\t * --------------------------------- */\n", "func_signal": "private static void buildM1(String message, String key)", "code": "{\n\t\tfor(int c = 0; c < m1.length; c++) {\n\t\t\tm1[c] = key.indexOf(message.charAt(c));\n\t\t\t// If the character isn\u2019t found, ignore it.\n\t\t\tif(m1[c] == -1) {\n\t\t\t\tm1[c]++;\n\t\t\t}\n\t\t}\n\t}", "path": "Encryptor.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "/* =================== *\n *   THE MAIN METHOD   *\n * =================== */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t\tlong startTime = System.currentTimeMillis();\n\t\tlong endTime;\n\t\tlong totalTime = 0;\n\t\t\n\t\tScanner kb = new Scanner(System.in);\n\t\tString plaintext = \"The quick brown frog jumped over the lazy ox, 1234567890 times.\";\n\t\tString ciphertext = Encryptor.Encrypt(plaintext, \"\", 58722109);\n\t\tString decodedtext = Encryptor.Decrypt(ciphertext, \"\", 58722109);\n\t\tSystem.out.println(plaintext + \"\\n\" + ciphertext + \"\\n\" + decodedtext);\n\t\tSystem.out.println();\n\n\t\tendTime = System.currentTimeMillis();\n\t\tSystem.out.println(\"My automated test took \" + (endTime - startTime) + \" ms.\");\n\t\ttotalTime += (endTime - startTime);\n\n\t\tSystem.out.println(\"Now it's your turn!\\nEnter in a plaintext to encypt:\");\n\t\tplaintext = kb.nextLine();\n\t\t\n\t\tSystem.out.print(\"\\nNow give me a seed to generate your ciphertext: \");\n\t\tint seed = kb.nextInt();\n\t\t\n\t\tstartTime = System.currentTimeMillis();\n\t\tciphertext = Encryptor.Encrypt(plaintext, \"\", seed);\n\t\tdecodedtext = Encryptor.Decrypt(ciphertext, \"\", seed);\n\t\tSystem.out.println(plaintext + \"\\n\" + ciphertext + \"\\n\" + decodedtext);\n\t\tSystem.out.println();\t\n\t\tendTime = System.currentTimeMillis();\n\t\tSystem.out.println(\"My automated test (with your input) took \" + (endTime - startTime) + \" ms.\");\n\t\ttotalTime += (endTime - startTime);\n\t}", "path": "Encryptor.java", "repo_name": "zoqaeski/Encryptor", "stars": 0, "license": "None", "language": "java", "size": 84}
{"docstring": "/**\n * endCheck() examines the body of a function, doing a basic reachability\n * analysis and returns a combination of flags END_* flags that indicate\n * how the function execution can terminate. These constitute only the\n * pessimistic set of termination conditions. It is possible that at\n * runtime certain code paths will never be actually taken. Hence this\n * analysis will flag errors in cases where there may not be errors.\n * @return logical OR of END_* flags\n */\n", "func_signal": "private int endCheck()", "code": "{\n    switch(type)\n    {\n        case Token.BREAK:\n            return endCheckBreak();\n\n        case Token.EXPR_VOID:\n            if (this.first != null)\n                return first.endCheck();\n            return END_DROPS_OFF;\n\n        case Token.YIELD:\n            return END_YIELDS;\n\n        case Token.CONTINUE:\n        case Token.THROW:\n            return END_UNREACHED;\n\n        case Token.RETURN:\n            if (this.first != null)\n                return END_RETURNS_VALUE;\n            else\n                return END_RETURNS;\n\n        case Token.TARGET:\n            if (next != null)\n                return next.endCheck();\n            else\n                return END_DROPS_OFF;\n\n        case Token.LOOP:\n            return endCheckLoop();\n\n        case Token.LOCAL_BLOCK:\n        case Token.BLOCK:\n            // there are several special kinds of blocks\n            if (first == null)\n                return END_DROPS_OFF;\n\n            switch(first.type) {\n                case Token.LABEL:\n                    return first.endCheckLabel();\n\n                case Token.IFNE:\n                    return first.endCheckIf();\n\n                case Token.SWITCH:\n                    return first.endCheckSwitch();\n\n                case Token.TRY:\n                    return first.endCheckTry();\n\n                default:\n                    return endCheckBlock();\n            }\n\n        default:\n            return END_DROPS_OFF;\n    }\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\Node.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "/**\n * Escapes the reserved characters in a value of an attribute\n *\n * @param value Unescaped text\n * @return The escaped text\n */\n", "func_signal": "public String escapeAttributeValue(Object value)", "code": "{\n    String text = ScriptRuntime.toString(value);\n\n    if (text.length() == 0) return \"\";\n\n    XmlObject xo = XmlObject.Factory.newInstance();\n\n    XmlCursor cursor = xo.newCursor();\n    cursor.toNextToken();\n    cursor.beginElement(\"a\");\n    cursor.insertAttributeWithValue(\"a\", text);\n    cursor.dispose();\n\n    String elementText = xo.toString();\n    int begin = elementText.indexOf('\"');\n    int end = elementText.lastIndexOf('\"');\n    return elementText.substring(begin + 1, end);\n}", "path": "infrastructure\\rhino1_7R1\\deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XMLLibImpl.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "/** Can only be called when node has String context. */\n", "func_signal": "public final void setString(String s)", "code": "{\n    if (s == null) Kit.codeBug();\n    ((StringNode)this).str = s;\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\Node.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "/**\n * See E4X 13.1.2.1.\n */\n", "func_signal": "public boolean isXMLName(Context cx, Object nameObj)", "code": "{\n    String name;\n    try {\n        name = ScriptRuntime.toString(nameObj);\n    } catch (EcmaError ee) {\n        if (\"TypeError\".equals(ee.getName())) {\n            return false;\n        }\n        throw ee;\n    }\n\n    // See http://w3.org/TR/xml-names11/#NT-NCName\n    int length = name.length();\n    if (length != 0) {\n        if (isNCNameStartChar(name.charAt(0))) {\n            for (int i = 1; i != length; ++i) {\n                if (!isNCNameChar(name.charAt(i))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    return false;\n}", "path": "infrastructure\\rhino1_7R1\\deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XMLLibImpl.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "/*\n * Creates a new scope node, moving symbol table information\n * from \"scope\" to the new node, and making \"scope\" a nested\n * scope contained by the new node.\n * Useful for injecting a new scope in a scope chain.\n */\n", "func_signal": "public static Scope splitScope(Scope scope)", "code": "{\n    Scope result = new Scope(scope.getType());\n    result.symbolTable = scope.symbolTable;\n    scope.symbolTable = null;\n    result.parent = scope.parent;\n    scope.parent = result;\n    result.top = scope.top;\n    return result;\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\Node.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "/** Can only be called when node has String context. */\n", "func_signal": "public final void setScope(Scope s)", "code": "{\n    if (s == null) Kit.codeBug();\n    if (!(this instanceof StringNode)) {\n        throw Kit.codeBug();\n    }\n    ((StringNode)this).scope = s;\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\Node.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "// doesn't \"touch\" key or trigger expiry of expired items\n", "func_signal": "public synchronized V get(Object key)", "code": "{\n  if (keyToValue.containsKey(key)) {\n    return keyToValue.get(key).getValue();\n  } else {\n    return null;\n  }\n}", "path": "infrastructure\\net.appjet.common\\util\\ExpiringMapping.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "/**\n * Consistency of return statements is checked between the case statements.\n * If there is no default, then the switch can fall through. If there is a\n * default,we check to see if all code paths in the default return or if\n * there is a code path that can fall through.\n * @return logical OR of END_* flags\n */\n", "func_signal": "private int endCheckSwitch()", "code": "{\n    Node n;\n    int rv = END_UNREACHED;\n\n    // examine the cases\n    for (n = first.next; n != null; n = n.next)\n    {\n        if (n.type == Token.CASE) {\n            rv |= ((Jump)n).target.endCheck();\n        } else\n            break;\n    }\n\n    // we don't care how the cases drop into each other\n    rv &= ~END_DROPS_OFF;\n\n    // examine the default\n    n = ((Jump)this).getDefault();\n    if (n != null)\n        rv |= n.endCheck();\n    else\n        rv |= END_DROPS_OFF;\n\n    // remove the switch block\n    rv |= getIntProp(CONTROL_BLOCK_PROP, END_UNREACHED);\n\n    return rv;\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\Node.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "// #/string_id_map#\n", "func_signal": "protected String getInstanceIdName(int id)", "code": "{\n        int shifted = id - super.getMaxInstanceId();\n        if (1 <= shifted && shifted <= MAX_INSTANCE_ID) {\n            switch (shifted) {\n                case Id_multiline:    return \"multiline\";\n                case Id_STAR:         return \"$*\";\n\n                case Id_input:        return \"input\";\n                case Id_UNDERSCORE:   return \"$_\";\n\n                case Id_lastMatch:    return \"lastMatch\";\n                case Id_AMPERSAND:    return \"$&\";\n\n                case Id_lastParen:    return \"lastParen\";\n                case Id_PLUS:         return \"$+\";\n\n                case Id_leftContext:  return \"leftContext\";\n                case Id_BACK_QUOTE:   return \"$`\";\n\n                case Id_rightContext: return \"rightContext\";\n                case Id_QUOTE:        return \"$'\";\n            }\n            // Must be one of $1..$9, convert to 0..8\n            int substring_number = shifted - DOLLAR_ID_BASE - 1;\n            char[] buf = { '$', (char)('1' + substring_number) };\n            return new String(buf);\n        }\n        return super.getInstanceIdName(id);\n    }", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\regexp\\NativeRegExpCtor.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "/**\n * Return statement in the loop body must be consistent. The default\n * assumption for any kind of a loop is that it will eventually terminate.\n * The only exception is a loop with a constant true condition. Code that\n * follows such a loop is examined only if one can statically determine\n * that there is a break out of the loop.\n *  for(<> ; <>; <>) {}\n *  for(<> in <> ) {}\n *  while(<>) { }\n *  do { } while(<>)\n * @return logical OR of END_* flags\n */\n", "func_signal": "private int endCheckLoop()", "code": "{\n    Node n;\n    int rv = END_UNREACHED;\n\n    // To find the loop body, we look at the second to last node of the\n    // loop node, which should be the predicate that the loop should\n    // satisfy.\n    // The target of the predicate is the loop-body for all 4 kinds of\n    // loops.\n    for (n = first; n.next != last; n = n.next) {\n        /* skip */\n    }\n    if (n.type != Token.IFEQ)\n        return END_DROPS_OFF;\n\n    // The target's next is the loop body block\n    rv = ((Jump)n).target.next.endCheck();\n\n    // check to see if the loop condition is true\n    if (n.first.type == Token.TRUE)\n        rv &= ~END_DROPS_OFF;\n\n    // look for effect of breaks\n    rv |= getIntProp(CONTROL_BLOCK_PROP, END_UNREACHED);\n\n    return rv;\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\Node.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "/**\n * Checks that every return usage in a function body is consistent with the\n * requirements of strict-mode.\n * @return true if the function satisfies strict mode requirement.\n */\n", "func_signal": "public boolean hasConsistentReturnUsage()", "code": "{\n    int n = endCheck();\n    return (n & END_RETURNS_VALUE) == 0 ||\n           (n & (END_DROPS_OFF|END_RETURNS|END_YIELDS)) == 0;\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\Node.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "/**\n * Returns in the then and else blocks must be consistent with each other.\n * If there is no else block, then the return statement can fall through.\n * @return logical OR of END_* flags\n */\n", "func_signal": "private int endCheckIf()", "code": "{\n    Node th, el;\n    int rv = END_UNREACHED;\n\n    th = next;\n    el = ((Jump)this).target;\n\n    rv = th.endCheck();\n\n    if (el != null)\n        rv |= el.endCheck();\n    else\n        rv |= END_DROPS_OFF;\n\n    return rv;\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\Node.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "/**\n * If the block has a finally, return consistency is checked in the\n * finally block. If all code paths in the finally returns, then the\n * returns in the try-catch blocks don't matter. If there is a code path\n * that does not return or if there is no finally block, the returns\n * of the try and catch blocks are checked for mismatch.\n * @return logical OR of END_* flags\n */\n", "func_signal": "private int endCheckTry()", "code": "{\n    Node n;\n    int rv = END_UNREACHED;\n\n    // check the finally if it exists\n    n = ((Jump)this).getFinally();\n    if(n != null) {\n        rv = n.next.first.endCheck();\n    } else {\n        rv = END_DROPS_OFF;\n    }\n\n    // if the finally block always returns, then none of the returns\n    // in the try or catch blocks matter\n    if ((rv & END_DROPS_OFF) != 0) {\n        rv &= ~END_DROPS_OFF;\n\n        // examine the try block\n        rv |= first.endCheck();\n\n        // check each catch block\n        n = ((Jump)this).target;\n        if (n != null)\n        {\n            // point to the first catch_scope\n            for (n = n.next.first; n != null; n = n.next.next)\n            {\n                // check the block of user code in the catch_scope\n                rv |= n.next.first.next.first.endCheck();\n            }\n        }\n    }\n\n    return rv;\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\Node.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "/**\n * A general block of code is examined statement by statement. If any\n * statement (even compound ones) returns in all branches, then subsequent\n * statements are not examined.\n * @return logical OR of END_* flags\n */\n", "func_signal": "private int endCheckBlock()", "code": "{\n    Node n;\n    int rv = END_DROPS_OFF;\n\n    // check each statment and if the statement can continue onto the next\n    // one, then check the next statement\n    for (n=first; ((rv & END_DROPS_OFF) != 0) && n != null; n = n.next)\n    {\n        rv &= ~END_DROPS_OFF;\n        rv |= n.endCheck();\n    }\n    return rv;\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\Node.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "/**\n * Add 'child' before 'node'.\n */\n", "func_signal": "public void addChildBefore(Node newChild, Node node)", "code": "{\n    if (newChild.next != null)\n        throw new RuntimeException(\n                  \"newChild had siblings in addChildBefore\");\n    if (first == node) {\n        newChild.next = first;\n        first = newChild;\n        return;\n    }\n    Node prev = getChildBefore(node);\n    addChildAfter(newChild, prev);\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\Node.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "/**\n * A labelled statement implies that there maybe a break to the label. The\n * function processes the labelled statement and then checks the\n * CONTROL_BLOCK_PROP property to see if there is ever a break to the\n * particular label.\n * @return logical OR of END_* flags\n */\n", "func_signal": "private int endCheckLabel()", "code": "{\n    int rv = END_UNREACHED;\n\n    rv = next.endCheck();\n    rv |= getIntProp(CONTROL_BLOCK_PROP, END_UNREACHED);\n\n    return rv;\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\Node.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "/**\n * Escapes the reserved characters in a value of a text node\n *\n * @param value Unescaped text\n * @return The escaped text\n */\n", "func_signal": "public String escapeTextValue(Object value)", "code": "{\n    if (value instanceof XMLObjectImpl) {\n        return ((XMLObjectImpl)value).toXMLString(0);\n    }\n\n    String text = ScriptRuntime.toString(value);\n\n    if (text.length() == 0) return text;\n\n    XmlObject xo = XmlObject.Factory.newInstance();\n\n    XmlCursor cursor = xo.newCursor();\n    cursor.toNextToken();\n    cursor.beginElement(\"a\");\n    cursor.insertChars(text);\n    cursor.dispose();\n\n    String elementText = xo.toString();\n    int begin = elementText.indexOf('>') + 1;\n    int end = elementText.lastIndexOf('<');\n    return (begin < end) ? elementText.substring(begin, end) : \"\";\n}", "path": "infrastructure\\rhino1_7R1\\deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XMLLibImpl.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "/**\n * When a break is encountered annotate the statement being broken\n * out of by setting its CONTROL_BLOCK_PROP property.\n * @return logical OR of END_* flags\n */\n", "func_signal": "private int endCheckBreak()", "code": "{\n    Node n = ((Jump) this).jumpNode;\n    n.putIntProp(CONTROL_BLOCK_PROP, END_DROPS_OFF);\n    return END_UNREACHED;\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\Node.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "/**\n * Add 'child' after 'node'.\n */\n", "func_signal": "public void addChildAfter(Node newChild, Node node)", "code": "{\n    if (newChild.next != null)\n        throw new RuntimeException(\n                  \"newChild had siblings in addChildAfter\");\n    newChild.next = node.next;\n    node.next = newChild;\n    if (last == node)\n        last = newChild;\n}", "path": "infrastructure\\rhino1_7R1\\src\\org\\mozilla\\javascript\\Node.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "// lists keys in time order, oldest to newest\n", "func_signal": "public synchronized List<K> listAllKeys()", "code": "{\n  List<K> keyList = new java.util.ArrayList<K>(timeToKey.size());\n  for(Map.Entry<Long,K> entry : timeToKey.entrySet()) {\n    keyList.add(entry.getValue());\n  }\n  return Collections.unmodifiableList(keyList);\n}", "path": "infrastructure\\net.appjet.common\\util\\ExpiringMapping.java", "repo_name": "ghoseb/etherpad", "stars": 0, "license": "apache-2.0", "language": "java", "size": 15884}
{"docstring": "// data for use during\n\t// parsing\n", "func_signal": "private void error(String message)", "code": "{ // called when an error occurs during\n\t\t// parsing\n\t\tthrow new IllegalArgumentException(\"Parse error:  \" + message\n\t\t\t\t+ \"  (Position in data = \" + pos + \".)\");\n\t}", "path": "src\\test3\\Test3.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/**\n * specifies the parameters for the shape of the digitalcircuits\n * \n * @param width\n * @param height\n */\n", "func_signal": "public DigitalShape(int width, int height)", "code": "{\n\tsuper(0, 0, width, height);\n\tsignal = new Signal();\n}", "path": "src\\shape\\DigitalShape.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/**\n * This functions will check the Rule as follows Connections can only be\n * made if 1. Source is InputNode and target is InputNode 2. Source is\n * OutputNode and target is InputNode 3. Source is ByPassNode && target is\n * another ByPassNode\n */\n", "func_signal": "private boolean checkRule(Node source, Node target)", "code": "{\n\treturn !target.isConnected()\n\t\t\t&& ((source instanceof ByPassNode && target instanceof ByPassNode)\n\t\t\t\t\t|| (source instanceof InputNode && target instanceof InputNode) || (source instanceof OutputNode && target instanceof InputNode));\n\n}", "path": "src\\actions\\MouseSensorAction.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/* (non-Javadoc)\n * @see javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent)\n */\n", "func_signal": "public void stateChanged(ChangeEvent arg0)", "code": "{\n\tif(name.equalsIgnoreCase(\"input\")) {\n\t\tint value = ((Integer) this.getModel().getValue()).intValue();\n\t\tcurrent.setInputCount(value);\n\t}\n\telse if(name.equalsIgnoreCase(\"output\")) {\n\t\tint value = ((Integer) this.getModel().getValue()).intValue();\n\t\tcurrent.setOutputCount(value);\n\t}\n\telse if(name.equalsIgnoreCase(\"frequency\")) {\n\t\tdouble value = ((Double) this.getModel().getValue()).doubleValue();\n\t\tClock c = (Clock)current;\n\t\tc.setFrequency(value);\n\t}\n}", "path": "src\\gui\\PropertiesWindow1.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/**\n * CTRL + Gate => DELETE Object \n * CTRL + Node => DELETE Connections \n * SHIFT => Start Moving Object \n * CLICK ON NODE => Start connecting objects\n * \n * else No Action\n */\n", "func_signal": "public void mousePressed(MouseEvent e)", "code": "{\n\t//if under Simulation donot perform anyother actions\n\tif (MDIWindow.getDrawingPad().isSimulatingMode())\n\t\treturn;\n\n\t//if CTRL is pressed, then delete the object\n\tif (e.isControlDown()) {\n\t\tthis.delete();\n\t\tMDIWindow.getDrawingPad().resetMode(); //reset the mode\n\t} else if (e.isShiftDown()) {\n\t\t//if SHIFT is pressed then MOVE the object\n\t\tMDIWindow.getDrawingPad().setMode(DrawingPad.MOVING);\n\t} else {\n\t\t//do nothing\n\t}\n}", "path": "src\\shape\\DigitalShape.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/**\n * Pivot point location is calculated and stored, which will be helpful for\n * scrolling\n */\n", "func_signal": "public void mousePressed(MouseEvent e)", "code": "{\n\tDigitalShape sp = pad.getCircuit().find(e.getPoint());\n\tif (sp == null) {\n\t\tcircuit = pad.getCircuit();\n\t\tcomps = circuit.getComponents();\n\t\tpt = new Point[comps.size()];\n\n\t\tfor (int i = 0; i < pt.length; i++) {\n\t\t\tDigitalShape shape = (DigitalShape) comps.get(i);\n\t\t\tpt[i] = new Point(shape.x - e.getX(), shape.y - e.getY());\n\t\t}\n\t}\n}", "path": "src\\actions\\ScrollSensor.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "// remaining routines do a standard recursive parse of the expression\n", "func_signal": "private void parseExpression()", "code": "{\n\tboolean neg = false;\n\tskip();\n\t\n\tif (next() == '+' || next() == '-') {\n\t\tneg = (next() == '-');\n\t\tpos++;\n\t\tskip();\n\t}\n\t\n\tif (neg)\n\t\tcode[codeSize++] = UNARYMINUS;\n\t\n\tskip();\n\twhile (next() == '+' || next() == '-' || next() == '*' || next() == '/' || next() == '^') {\n\t\tchar op = next();\n\t\tpos++;\n\t\tif (op == '+')\n\t\t\tcode[codeSize++] = PLUS;\n\t\tif (op == '-')\n\t\t\tcode[codeSize++] = MINUS;\n\t\tif (op == '*')\n\t\t\tcode[codeSize++] = TIMES;\n\t\tif (op == '/')\n\t\t\tcode[codeSize++] = DIVIDE;\n\t\telse\n\t\t\tcode[codeSize++] = POWER;\n\t\tskip();\n\t}\n}", "path": "src\\test3\\Test3.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/**\n * when mouse is dragged in the circuit component, then the scrolling effect\n * takes place in the circuit hence the circuit can be scrolled.\n */\n", "func_signal": "public void mouseDragged(MouseEvent e)", "code": "{\n\tif (pt != null)\n\t\tfor (int i = 0; i < pt.length; i++) {\n\t\t\tDigitalShape shape = (DigitalShape) comps.get(i);\n\t\t\tint dx = e.getX() + pt[i].x;\n\t\t\tint dy = e.getY() + pt[i].y;\n\t\t\tshape.setLocation(dx, dy);\n\t\t}\n}", "path": "src\\actions\\ScrollSensor.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/**\n * Define all events that should happen when the mouse is pressed on a\n * Digital Object\n * \n * 1. Get the object at the clicked location 2. update the details about the\n * selected object 3. if the circuit is in the adding mode then add\n * components to the circuit 4. if selected object is GATE then make it work\n * under SIMULATION mode 5. if selected Object is NODE then if Not in\n * Connecting Mode and clicked in the output node make ready for conection.\n * if already in connecting mode then checkRules for making connection. if\n * rules satisfied then make connection, else discard connection 6.set the\n * correct mode occordingly 7. if selected is none of the objects above, and\n * it is under connection mode then make BYPASS nodes for connections\n * \n * @param e\n */\n", "func_signal": "public void mousePressed(MouseEvent e)", "code": "{\n\tPoint p = e.getPoint();\n\tDigitalShape c = Util.getComp(p);\n\n\t/*\n\t * Perform gate addition activities in the circuit area\n\t */\n\tif (pad.isAddingMode()) {\n\t\tGate gate = DrawingPad.getGate(pad.getGateType());\n\t\tgate.setLocation(e.getPoint());\n\t\tpad.add(gate);\n\t\treturn;\n\t}\n\n\tif (c instanceof Gate) {\n\t\t/*\n\t\t * Since it is a GATE, it works only in Simulating Mode\n\t\t */\n\t\tc.mousePressed(e);\n\t\treturn;\n\t} else if (c instanceof Node) {\n\t\tselected = c;\n\t\tif (!pad.isConnectingMode()) {\n\t\t\tpad.setMode(DrawingPad.CONNECTING);\n\t\t\tfrom = (Node) c;\n\t\t} else {//in connecting mode\n\t\t\tto = (Node) c;\n\t\t\tif (to.isConnected()) {\n\t\t\t\tMessageBox.showError(GlobalUI.getText(\"ERR005\"));\n\t\t\t} else {\n\t\t\t\tif (checkRule(from, to)) {\n\t\t\t\t\tfrom.connect(to);\n\t\t\t\t\tif (to instanceof InputNode) {\n\t\t\t\t\t\t//connected to target, clear the mode\n\t\t\t\t\t\tpad.resetMode();\n\t\t\t\t\t}\n\t\t\t\t\tfrom = null;\n\t\t\t\t\tto = null;\n\t\t\t\t} else {\n\t\t\t\t\tif (from != null) {\n\t\t\t\t\t\tMessageBox.showError(GlobalUI.getText(\"ERR001\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!pad.isMovingMode()) {\n\t\t\t//at starting, mark all to the same location\n\t\t\tx1 = x2 = p.x;\n\t\t\ty1 = y2 = p.y;\n\t\t}\n\t}\n\t\n\tif (c instanceof DigitalShape) {\n\t\tc.mousePressed(e);\n\t\treturn;\n\t}\n\n\tif (pad.isConnectingMode()) {\n\t\tByPassNode n = new ByPassNode(pad.getCircuit());\n\t\tpad.getCircuit().add(n);\n\t\tn.setLocation(p);\n\t\tx1 = p.x;\n\t\ty1 = p.y;\n\n\t\tfrom.connect(n);\n\t\tfrom = n; //change the from node to the current node\n\t}\n\t\n}", "path": "src\\actions\\MouseSensorAction.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/**\n * \n * @param g\n *            implements the Graphics2D if signal is true then color of\n *            signal is set to green else it is set to bordercolor\n */\n", "func_signal": "synchronized public void draw(Graphics2D g)", "code": "{\n\tif (signal != null && signal.value()) {\n\t\tg.setColor(Color.GREEN);\n\t} else {\n\t\tg.setColor(getBorderColor());\n\t}\n\n\tif (pad != null) {\n\t\tUtil.paintTexture(g, this, pad);\n\t}\n}", "path": "src\\shape\\DigitalShape.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "//If the Point lies in any of the object in the circuit\n", "func_signal": "public DigitalShape find(Point p)", "code": "{\n\tVector temp = new Vector(inputs);\n\ttemp.addAll(outputs);\n\ttemp.addAll(components);\n\n\tfor (int i = 0; i < temp.size(); i++) {\n\t\tDigitalShape s = (DigitalShape) temp.get(i);\n\t\tDigitalShape s1 = s.find(p);\n\t\tif (s1 != null)\n\t\t\treturn s1;\n\t}\n\n\treturn null;\n}", "path": "src\\circuit\\DigitalCircuit.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/*\n * DC Components are added to inputs LED Components are added to outputs\n * Other Components are added to components\n */\n", "func_signal": "public void add(DigitalShape c)", "code": "{\n\n\tif (c instanceof LED)\n\t\toutputs.add(c);\n\telse if (c instanceof DC)\n\t\tinputs.add(c);\n\telse\n\t\tcomponents.add(c);\n\n\tc.setCircuit(this);\n}", "path": "src\\circuit\\DigitalCircuit.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/**\n * @param DrawingPad\n *            for which this listener should be added for scrolling\n */\n", "func_signal": "public ScrollSensor(DrawingPad pad)", "code": "{\n\tthis.pad = pad;\n\tpad.addMouseListener(this);\n\tpad.addMouseMotionListener(this);\n\n}", "path": "src\\actions\\ScrollSensor.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/*\n * simulate will get the current signal , inverts it and sets to the object\n * and starts simulating i.e start telling the output nodes that the signal\n * is changed\n */\n", "func_signal": "public void mousePressed(MouseEvent e)", "code": "{\n\tif (pad.isSimulatingMode() && MIN_INPUTS == 0) {\n\t\tif (this.getSignal().value() == true) {\n\t\t\tthis.switchOff();\n\t\t} else {\n\t\t\tthis.switchOn();\n\t\t}\n\t} else {\n\t\tsuper.mousePressed(e);\n\t}\n}", "path": "src\\gates\\DC.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/**\n * @param pad\n *            for which this listener should be added\n */\n", "func_signal": "public MouseSensorAction(DrawingPad pad)", "code": "{\n\tthis.pad = pad;\n\tpad.addMouseListener(this);\n\tpad.addMouseMotionListener(this);\n}", "path": "src\\actions\\MouseSensorAction.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/**\n * @param l\n */\n", "func_signal": "public void setGateType(long type)", "code": "{\n\tsetMode(ADDING);\n\tgateType = type;\n}", "path": "src\\gui\\DrawingPad.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/**\n * Define all events that should happen when the mouse is released on a\n * Digital Object\n * \n * 1. Get the object at the relased location 2. check wheather it is not\n * null 3. send the mouseReleased event to the object 4. repaint the drawing\n * area\n */\n", "func_signal": "public void mouseReleased(MouseEvent e)", "code": "{\n\tDigitalShape c = Util.getComp(e.getPoint());\n\tif (c != null) {\n\t\tc.mouseReleased(e);\n\t}\n}", "path": "src\\actions\\MouseSensorAction.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/**\n * Returns all the components present in the circuit\n * \n * @return\n */\n", "func_signal": "public Vector getComponents()", "code": "{\n\tVector temp = new Vector(inputs);\n\ttemp.addAll(outputs);\n\ttemp.addAll(components);\n\treturn temp;\n}", "path": "src\\circuit\\DigitalCircuit.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/**\n * Define all events that should happen when the mouse is moved on a Digital\n * Object\n */\n", "func_signal": "public void mouseMoved(MouseEvent e)", "code": "{\n\tif (pad.isAddingMode()) {\n\t\tx1 = e.getX();\n\t\ty1 = e.getY();\n\t}\n\n\tif (pad.isMovingMode() && selected != null) {\n\t\tselected.mouseMoved(e);\n\t} else if (pad.isConnectingMode()) {\n\t\tx2 = e.getX();\n\t\ty2 = e.getY();\n\t}\n\n\tDigitalShape c = Util.getComp(e.getPoint());\n\tif (c != null) {\n\t\tselected = c;\n\t\tif (!entered) { //invoke mouseEntered event\n\t\t\tentered = true;\n\t\t\tc.mouseEntered(e);\n\t\t}\n\t\t//Generate MouseMove if only in NORMAL mode\n\t\tif (pad.isNormalMode()) {\n\t\t\tc.mouseMoved(e);\n\t\t}\n\t} else {\n\t\tif (entered) { //invoke mouseExited event\n\t\t\tselected.mouseExited(e);\n\t\t\tentered = false;\n\t\t}\n\t\tselected = null;\n\t}\n}", "path": "src\\actions\\MouseSensorAction.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/* implicitly for CLOCK, not visible outside */\n", "func_signal": "protected DC(long type)", "code": "{\n\tsuper(\"CLOCK\", 0, 1, 0, 1, type);\n\tsetBorderColor(Color.BLUE);\n}", "path": "src\\gates\\DC.java", "repo_name": "msubra/jLogics", "stars": 0, "license": "None", "language": "java", "size": 5892}
{"docstring": "/** \n * Changes the vertex mode used for drawing.  \n * @param useVerts  Specifies whether to use a vertex array.  If false, the\n *     DrawTexture extension is used.\n * @param useHardwareBuffers  Specifies whether to store vertex arrays in\n *     main memory or on the graphics card.  Ignored if useVerts is false.\n */\n", "func_signal": "public void setVertMode(boolean useVerts, boolean useHardwareBuffers)", "code": "{\n    mUseVerts = useVerts;\n    mUseHardwareBuffers = useVerts ? useHardwareBuffers : false;\n}", "path": "SpriteMethodTest\\src\\com\\android\\spritemethodtest\\SimpleGLRenderer.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * Called when the rendering thread shuts down.  This is a good place to\n * release OpenGL ES resources.\n * @param gl\n */\n", "func_signal": "public void shutdown(GL10 gl)", "code": "{\n    if (mSprites != null) {\n\n        int lastFreedResource = -1;\n        int[] textureToDelete = new int[1];\n        \n        for (int x = 0; x < mSprites.length; x++) {\n            int resource = mSprites[x].getResourceId();\n            if (resource != lastFreedResource) {\n                textureToDelete[0] = mSprites[x].getTextureName();\n                gl.glDeleteTextures(1, textureToDelete, 0);\n                mSprites[x].setTextureName(0);\n            }\n            if (mUseHardwareBuffers) {\n                mSprites[x].getGrid().releaseHardwareBuffers(gl);\n            }\n        }\n    }\n}", "path": "SpriteMethodTest\\src\\com\\android\\spritemethodtest\\SimpleGLRenderer.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/* Returns the average execution time, in milliseconds, for a given type. */\n", "func_signal": "public long getAverageTime(int profileType)", "code": "{\n    long time = 0;\n    if (profileType < PROFILE_COUNT) {\n        time = mProfiles[profileType].getAverageTime(mFrameCount);\n    }\n    return time;\n}", "path": "SpriteMethodTest\\src\\com\\android\\spritemethodtest\\ProfileRecorder.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * Create a precondition activity intent.\n * @param activity the original activity\n * @param preconditionActivityClazz the precondition activity's class\n * @return an intent which will launch the precondition activity.\n */\n", "func_signal": "public static Intent createPreconditionIntent(Activity activity,\n        Class preconditionActivityClazz)", "code": "{\n    Intent newIntent = new Intent();\n    newIntent.setClass(activity, preconditionActivityClazz);\n    newIntent.putExtra(EXTRA_WRAPPED_INTENT, activity.getIntent());\n    return newIntent;\n}", "path": "Samples\\Downloader\\src\\com\\google\\android\\downloader\\PreconditionActivityHelper.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/** Sets the user's renderer and kicks off the rendering thread. */\n", "func_signal": "public void setRenderer(Renderer renderer)", "code": "{\n    mCanvasThread = new CanvasThread(mHolder, renderer);\n    mCanvasThread.start();\n}", "path": "SpriteMethodTest\\src\\com\\android\\spritemethodtest\\CanvasSurfaceView.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/** Inform the view that the window focus has changed. */\n", "func_signal": "@Override\npublic void onWindowFocusChanged(boolean hasFocus)", "code": "{\n    super.onWindowFocusChanged(hasFocus);\n    mCanvasThread.onWindowFocusChanged(hasFocus);\n}", "path": "SpriteMethodTest\\src\\com\\android\\spritemethodtest\\CanvasSurfaceView.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * Start the original activity, and finish the precondition activity.\n * @param preconditionActivity\n */\n", "func_signal": "public static void startOriginalActivityAndFinish(\n        Activity preconditionActivity)", "code": "{\n    preconditionActivity.startActivity(\n            (Intent) preconditionActivity.getIntent()\n                .getParcelableExtra(EXTRA_WRAPPED_INTENT));\n    preconditionActivity.finish();\n}", "path": "Samples\\Downloader\\src\\com\\google\\android\\downloader\\PreconditionActivityHelper.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/** \n * Loads a bitmap into OpenGL and sets up the common parameters for \n * 2D texture maps. \n */\n", "func_signal": "protected int loadBitmap(Context context, GL10 gl, int resourceId)", "code": "{\n    int textureName = -1;\n    if (context != null && gl != null) {\n        gl.glGenTextures(1, mTextureNameWorkspace, 0);\n\n        textureName = mTextureNameWorkspace[0];\n        gl.glBindTexture(GL10.GL_TEXTURE_2D, textureName);\n\n        gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);\n        gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);\n\n        gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S, GL10.GL_CLAMP_TO_EDGE);\n        gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T, GL10.GL_CLAMP_TO_EDGE);\n\n        gl.glTexEnvf(GL10.GL_TEXTURE_ENV, GL10.GL_TEXTURE_ENV_MODE, GL10.GL_REPLACE);\n\n        InputStream is = context.getResources().openRawResource(resourceId);\n        Bitmap bitmap;\n        try {\n            bitmap = BitmapFactory.decodeStream(is, null, sBitmapOptions);\n        } finally {\n            try {\n                is.close();\n            } catch (IOException e) {\n                // Ignore.\n            }\n        }\n\n        GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, bitmap, 0);\n\n        mCropWorkspace[0] = 0;\n        mCropWorkspace[1] = bitmap.getHeight();\n        mCropWorkspace[2] = bitmap.getWidth();\n        mCropWorkspace[3] = -bitmap.getHeight();\n        \n        bitmap.recycle();\n\n        ((GL11) gl).glTexParameteriv(GL10.GL_TEXTURE_2D, \n                GL11Ext.GL_TEXTURE_CROP_RECT_OES, mCropWorkspace, 0);\n\n        \n        int error = gl.glGetError();\n        if (error != GL10.GL_NO_ERROR) {\n            Log.e(\"SpriteMethodTest\", \"Texture Load GLError: \" + error);\n        }\n    \n    }\n\n    return textureName;\n}", "path": "SpriteMethodTest\\src\\com\\android\\spritemethodtest\\SimpleGLRenderer.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/** Stops recording time for this profile type. */\n", "func_signal": "public void stop(int profileType)", "code": "{\n    if (profileType < PROFILE_COUNT) {\n        mProfiles[profileType].stop(SystemClock.uptimeMillis());\n    }\n}", "path": "SpriteMethodTest\\src\\com\\android\\spritemethodtest\\ProfileRecorder.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/* Flushes all recorded timings from the profiler. */\n", "func_signal": "public void resetAll()", "code": "{\n    for (int x = 0; x < PROFILE_COUNT; x++) {\n        mProfiles[x].reset();\n    }\n    mFrameCount = 0;\n}", "path": "SpriteMethodTest\\src\\com\\android\\spritemethodtest\\ProfileRecorder.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/* Returns the maximum execution time in milliseconds for a given type. */\n", "func_signal": "public long getMaxTime(int profileType)", "code": "{\n    long time = 0;\n    if (profileType < PROFILE_COUNT) {\n        time = mProfiles[profileType].getMaxTime();\n    }\n    return time;\n}", "path": "SpriteMethodTest\\src\\com\\android\\spritemethodtest\\ProfileRecorder.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * Start the precondition activity using a given intent, which should\n * have been created by calling createPreconditionIntent.\n * @param activity\n * @param intent\n */\n", "func_signal": "public static void startPreconditionActivityAndFinish(Activity activity,\n        Intent intent)", "code": "{\n    activity.startActivity(intent);\n    activity.finish();\n}", "path": "Samples\\Downloader\\src\\com\\google\\android\\downloader\\PreconditionActivityHelper.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * Queue an \"event\" to be run on the rendering thread.\n * @param r the runnable to be run on the rendering thread.\n */\n", "func_signal": "public void setEvent(Runnable r)", "code": "{\n    synchronized(this) {\n        mEvent = r;\n    }\n}", "path": "SpriteMethodTest\\src\\com\\android\\spritemethodtest\\CanvasSurfaceView.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/** Starts recording execution time for a specific profile type.*/\n", "func_signal": "public void start(int profileType)", "code": "{\n    if (profileType < PROFILE_COUNT) {\n        mProfiles[profileType].start(SystemClock.uptimeMillis());\n    }\n}", "path": "SpriteMethodTest\\src\\com\\android\\spritemethodtest\\ProfileRecorder.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/* Called when the size of the window changes. */\n", "func_signal": "public void sizeChanged(GL10 gl, int width, int height)", "code": "{\n    gl.glViewport(0, 0, width, height);\n\n    /*\n     * Set our projection matrix. This doesn't have to be done each time we\n     * draw, but usually a new projection needs to be set when the viewport\n     * is resized.\n     */\n    gl.glMatrixMode(GL10.GL_PROJECTION);\n    gl.glLoadIdentity();\n    gl.glOrthof(0.0f, width, 0.0f, height, 0.0f, 1.0f);\n    \n    gl.glShadeModel(GL10.GL_FLAT);\n    gl.glEnable(GL10.GL_BLEND);\n    gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);\n    gl.glColor4x(0x10000, 0x10000, 0x10000, 0x10000);\n    gl.glEnable(GL10.GL_TEXTURE_2D);\n}", "path": "SpriteMethodTest\\src\\com\\android\\spritemethodtest\\SimpleGLRenderer.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * Ensure we have sizes for all the items.\n * @param config\n * @throws ClientProtocolException\n * @throws IOException\n * @throws DownloaderException\n */\n", "func_signal": "private void getSizes(Config config)\n    throws ClientProtocolException, IOException, DownloaderException", "code": "{\n    for (Config.File file : config.mFiles) {\n        for(Config.File.Part part : file.mParts) {\n            if (part.size < 0) {\n                part.size = getSize(part.src);\n            }\n        }\n    }\n    mTotalExpectedSize = config.getSize();\n}", "path": "Samples\\Downloader\\src\\com\\google\\android\\downloader\\DownloaderActivity.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * Called whenever the surface is created.  This happens at startup, and\n * may be called again at runtime if the device context is lost (the screen\n * goes to sleep, etc).  This function must fill the contents of vram with\n * texture data and (when using VBOs) hardware vertex arrays.\n */\n", "func_signal": "public void surfaceCreated(GL10 gl)", "code": "{\n     /*\n     * Some one-time OpenGL initialization can be made here probably based\n     * on features of this particular context\n     */\n    gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_FASTEST);\n\n    gl.glClearColor(0.5f, 0.5f, 0.5f, 1);\n    gl.glShadeModel(GL10.GL_FLAT);\n    gl.glDisable(GL10.GL_DEPTH_TEST);\n    gl.glEnable(GL10.GL_TEXTURE_2D);\n    /*\n     * By default, OpenGL enables features that improve quality but reduce\n     * performance. One might want to tweak that especially on software\n     * renderer.\n     */\n    gl.glDisable(GL10.GL_DITHER);\n    gl.glDisable(GL10.GL_LIGHTING);\n\n    gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);\n    \n    if (mSprites != null) {\n        \n        // If we are using hardware buffers and the screen lost context\n        // then the buffer indexes that we recorded previously are now\n        // invalid.  Forget them here and recreate them below.\n        if (mUseHardwareBuffers) {\n            for (int x = 0; x < mSprites.length; x++) {\n                // Ditch old buffer indexes.\n                mSprites[x].getGrid().invalidateHardwareBuffers();\n            }\n        }\n        \n        // Load our texture and set its texture name on all sprites.\n        \n        // To keep this sample simple we will assume that sprites that share\n        // the same texture are grouped together in our sprite list. A real\n        // app would probably have another level of texture management, \n        // like a texture hash.\n        \n        int lastLoadedResource = -1;\n        int lastTextureId = -1;\n        \n        for (int x = 0; x < mSprites.length; x++) {\n            int resource = mSprites[x].getResourceId();\n            if (resource != lastLoadedResource) {\n                lastTextureId = loadBitmap(mContext, gl, resource);\n                lastLoadedResource = resource;\n            }\n            mSprites[x].setTextureName(lastTextureId);\n            if (mUseHardwareBuffers) {\n                Grid currentGrid = mSprites[x].getGrid();\n                if (!currentGrid.usingHardwareBuffers()) {\n                    currentGrid.generateHardwareBuffers(gl);\n                }\n                //mSprites[x].getGrid().generateHardwareBuffers(gl);\n            }\n        }\n    }\n}", "path": "SpriteMethodTest\\src\\com\\android\\spritemethodtest\\SimpleGLRenderer.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * Checks if data has been downloaded. If so, returns true. If not,\n * starts an activity to download the data and returns false. If this\n * function returns false the caller should immediately return from its\n * onCreate method. The calling activity will later be restarted\n * (using a copy of its original intent) once the data download completes.\n * @param activity The calling activity.\n * @param customText A text string that is displayed in the downloader UI.\n * @param fileConfigUrl The URL of the download configuration URL.\n * @param configVersion The version of the configuration file.\n * @param dataPath The directory on the device where we want to store the\n * data.\n * @param userAgent The user agent string to use when fetching URLs.\n * @return true if the data has already been downloaded successfully, or\n * false if the data needs to be downloaded.\n */\n", "func_signal": "public static boolean ensureDownloaded(Activity activity,\n        String customText, String fileConfigUrl,\n        String configVersion, String dataPath,\n        String userAgent)", "code": "{\n    File dest = new File(dataPath);\n    if (dest.exists()) {\n        // Check version\n        if (versionMatches(dest, configVersion)) {\n            Log.i(LOG_TAG, \"Versions match, no need to download.\");\n            return true;\n        }\n    }\n    Intent intent = PreconditionActivityHelper.createPreconditionIntent(\n            activity, DownloaderActivity.class);\n    intent.putExtra(EXTRA_CUSTOM_TEXT, customText);\n    intent.putExtra(EXTRA_FILE_CONFIG_URL, fileConfigUrl);\n    intent.putExtra(EXTRA_CONFIG_VERSION, configVersion);\n    intent.putExtra(EXTRA_DATA_PATH, dataPath);\n    intent.putExtra(EXTRA_USER_AGENT, userAgent);\n    PreconditionActivityHelper.startPreconditionActivityAndFinish(\n            activity, intent);\n    return false;\n}", "path": "Samples\\Downloader\\src\\com\\google\\android\\downloader\\DownloaderActivity.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/** Draws the sprites. */\n", "func_signal": "public void drawFrame(GL10 gl)", "code": "{\n    if (mSprites != null) {\n\n        gl.glMatrixMode(GL10.GL_MODELVIEW);\n      \n        if (mUseVerts) {\n            Grid.beginDrawing(gl, true, false);\n        }\n        \n        for (int x = 0; x < mSprites.length; x++) {\n            mSprites[x].draw(gl);\n        }\n        \n        if (mUseVerts) {\n            Grid.endDrawing(gl);\n        }\n        \n       \n    }\n}", "path": "SpriteMethodTest\\src\\com\\android\\spritemethodtest\\SimpleGLRenderer.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/* Returns the minimum execution time in milliseconds for a given type. */\n", "func_signal": "public long getMinTime(int profileType)", "code": "{\n    long time = 0;\n    if (profileType < PROFILE_COUNT) {\n        time = mProfiles[profileType].getMinTime();\n    }\n    return time;\n}", "path": "SpriteMethodTest\\src\\com\\android\\spritemethodtest\\ProfileRecorder.java", "repo_name": "Sillen/AndroidDefender", "stars": 1, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public boolean equals(Object o)", "code": "{\n    if (this == o) {\n        return true;\n    }\n    if (!(o instanceof User)) {\n        return false;\n    }\n\n    final User user = (User) o;\n\n    return !(username != null ? !username.equals(user.getUsername()) : user.getUsername() != null);\n\n}", "path": "src\\main\\java\\com\\dagitab\\model\\User.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public String toString()", "code": "{\n    ToStringBuilder sb = new ToStringBuilder(this, ToStringStyle.DEFAULT_STYLE)\n            .append(\"username\", this.username)\n            .append(\"enabled\", this.enabled)\n            .append(\"accountExpired\", this.accountExpired)\n            .append(\"credentialsExpired\", this.credentialsExpired)\n            .append(\"accountLocked\", this.accountLocked);\n\n    GrantedAuthority[] auths = this.getAuthorities();\n    if (auths != null) {\n        sb.append(\"Granted Authorities: \");\n\n        for (int i = 0; i < auths.length; i++) {\n            if (i > 0) {\n                sb.append(\", \");\n            }\n            sb.append(auths[i].toString());\n        }\n    } else {\n        sb.append(\"No Granted Authorities\");\n    }\n    return sb.toString();\n}", "path": "src\\main\\java\\com\\dagitab\\model\\User.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * Simple test to verify CRUD works.\n */\n", "func_signal": "public void testCRUD()", "code": "{\n    User user = new User();\n    // set required fields\n    user.setUsername(\"foo\");\n    user.setPassword(\"bar\");\n    user.setFirstName(\"first\");\n    user.setLastName(\"last\");\n    user.getAddress().setCity(\"Denver\");\n    user.getAddress().setPostalCode(\"80465\");\n    user.setEmail(\"foo@bar.com\");\n\n    // create\n    user = (User)universalDao.save(user);\n    flush();\n    assertNotNull(user.getId());\n\n    // retrieve\n    user = (User) universalDao.get(User.class, user.getId());\n    assertNotNull(user);\n    assertEquals(\"last\", user.getLastName());\n\n    // update\n    user.getAddress().setCountry(\"USA\");\n    universalDao.save(user);\n    flush();\n\n    user = (User) universalDao.get(User.class, user.getId());\n    assertEquals( \"USA\", user.getAddress().getCountry());\n\n    // delete\n    universalDao.remove(User.class, user.getId());\n    flush();\n    try {\n        universalDao.get(User.class, user.getId());\n        fail(\"User 'foo' found in database\");\n    } catch (ObjectRetrievalFailureException e) {\n        assertNotNull(e.getMessage());\n    } catch (InvalidDataAccessApiUsageException e) { // Spring 2.0 throws this one\n        assertNotNull(e.getMessage());\n    }\n}", "path": "src\\test\\java\\com\\dagitab\\dao\\UniversalDaoTest.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * Convert a java.util.Date to a String\n * @param type Date or Timestamp\n * @param value value to convert\n * @return Converted value for property population\n */\n", "func_signal": "protected Object convertToString(Class type, Object value)", "code": "{\n\n    if (value instanceof Date) {\n        DateFormat df = new SimpleDateFormat(DateUtil.getDatePattern());\n        if (value instanceof Timestamp) {\n            df = new SimpleDateFormat(DateUtil.getDateTimePattern());\n        } \n\n        try {\n            return df.format(value);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new ConversionException(\"Error converting Date to String\");\n        }\n    } else {\n        return value.toString();\n    }\n}", "path": "src\\main\\java\\com\\dagitab\\util\\DateConverter.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * Convert a String to a Date with the specified pattern.\n * @param type String\n * @param value value of String\n * @param pattern date pattern to parse with\n * @return Converted value for property population\n */\n", "func_signal": "protected Object convertToDate(Class type, Object value, String pattern)", "code": "{\n    DateFormat df = new SimpleDateFormat(pattern);\n    if (value instanceof String) {\n        try {\n            if (StringUtils.isEmpty(value.toString())) {\n                return null;\n            }\n\n            Date date = df.parse((String) value);\n            if (type.equals(Timestamp.class)) {\n                return new Timestamp(date.getTime());\n            }\n            return date;\n        } catch (Exception pe) {\n            pe.printStackTrace();\n            throw new ConversionException(\"Error converting String to Date\");\n        }\n    }\n\n    throw new ConversionException(\n            \"Could not convert \" + value.getClass().getName() + \" to \" + type.getName());\n}", "path": "src\\main\\java\\com\\dagitab\\util\\DateConverter.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * Convert a String to a Double and a Double to a String\n *\n * @param type the class type to output\n * @param value the object to convert\n * @return object the converted object (Double or String)\n */\n", "func_signal": "public final Object convert(final Class type, final Object value)", "code": "{\n    // for a null value, return null\n    if (value == null) {\n        return null;\n    } else {\n        if (value instanceof String) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"value (\" + value + \") instance of String\");\n            }\n\n            try {\n                if (StringUtils.isBlank(String.valueOf(value))) {\n                    return null;\n                }\n\n                if (log.isDebugEnabled()) {\n                    log.debug(\"converting '\" + value + \"' to a decimal\");\n                }\n\n                //formatter.setDecimalSeparatorAlwaysShown(true);\n                Number num = formatter.parse(String.valueOf(value));\n\n                return num.doubleValue();\n            } catch (ParseException pe) {\n                pe.printStackTrace();\n            }\n        } else if (value instanceof Double) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"value (\" + value + \") instance of Double\");\n                log.debug(\"returning double: \" + formatter.format(value));\n            }\n\n            return formatter.format(value);\n        }\n    }\n\n    throw new ConversionException(\"Could not convert \" + value + \" to \" + type.getName() + \"!\");\n}", "path": "src\\main\\java\\com\\dagitab\\util\\CurrencyConverter.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic List<T> getAllDistinct()", "code": "{\n    Collection result = new LinkedHashSet(getAll());\n    return new ArrayList(result);\n}", "path": "src\\main\\java\\com\\dagitab\\dao\\hibernate\\GenericDaoHibernate.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * Send a simple message based on a Velocity template.\n * @param msg the message to populate\n * @param templateName the Velocity template to use (relative to classpath)\n * @param model a map containing key/value pairs\n */\n", "func_signal": "public void sendMessage(SimpleMailMessage msg, String templateName, Map model)", "code": "{\n    String result = null;\n\n    try {\n        result =\n            VelocityEngineUtils.mergeTemplateIntoString(velocityEngine,\n                                                        templateName, model);\n    } catch (VelocityException e) {\n        e.printStackTrace();\n        log.error(e.getMessage());\n    }\n\n    msg.setText(result);\n    send(msg);\n}", "path": "src\\main\\java\\com\\dagitab\\service\\MailEngine.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * Send a simple message with pre-populated values.\n * @param msg the message to send\n * @throws org.springframework.mail.MailException when SMTP server is down\n */\n", "func_signal": "public void send(SimpleMailMessage msg) throws MailException", "code": "{\n    try {\n        mailSender.send(msg);\n    } catch (MailException ex) {\n        log.error(ex.getMessage());\n        throw ex;\n    }\n}", "path": "src\\main\\java\\com\\dagitab\\service\\MailEngine.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * Convenience method for sending messages with attachments.\n * \n * @param recipients array of e-mail addresses\n * @param sender e-mail address of sender\n * @param resource attachment from classpath\n * @param bodyText text in e-mail\n * @param subject subject of e-mail\n * @param attachmentName name for attachment\n * @throws MessagingException thrown when can't communicate with SMTP server\n */\n", "func_signal": "public void sendMessage(String[] recipients, String sender, \n                        ClassPathResource resource, String bodyText,\n                        String subject, String attachmentName)\nthrows MessagingException", "code": "{\n    MimeMessage message = ((JavaMailSenderImpl) mailSender).createMimeMessage();\n\n    // use the true flag to indicate you need a multipart message\n    MimeMessageHelper helper = new MimeMessageHelper(message, true);\n\n    helper.setTo(recipients);\n\n    // use the default sending if no sender specified\n    if (sender == null) {\n        helper.setFrom(defaultFrom);\n    } else {\n       helper.setFrom(sender);\n    }\n\n    helper.setText(bodyText);\n    helper.setSubject(subject);\n\n    helper.addAttachment(attachmentName, resource);\n\n    ((JavaMailSenderImpl) mailSender).send(message);\n}", "path": "src\\main\\java\\com\\dagitab\\service\\MailEngine.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic boolean exists(PK id)", "code": "{\n    T entity = (T) super.getHibernateTemplate().get(this.persistentClass, id);\n    return entity != null;\n}", "path": "src\\main\\java\\com\\dagitab\\dao\\hibernate\\GenericDaoHibernate.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * Utility method to populate a javabean-style object with values\n * from a Properties file\n *\n * @param obj the model object to populate\n * @return Object populated object\n * @throws Exception if BeanUtils fails to copy properly\n */\n", "func_signal": "protected Object populate(Object obj) throws Exception", "code": "{\n    // loop through all the beans methods and set its properties from\n    // its .properties file\n    Map map = ConvertUtil.convertBundleToMap(rb);\n\n    BeanUtils.copyProperties(obj, map);\n\n    return obj;\n}", "path": "src\\main\\java\\com\\dagitab\\service\\impl\\BaseManagerMockTestCase.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/** \n * {@inheritDoc}\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic List<T> findByNamedQuery(\n    String queryName, \n    Map<String, Object> queryParams)", "code": "{\n    String []params = new String[queryParams.size()];\n    Object []values = new Object[queryParams.size()];\n    int index = 0;\n    Iterator<String> i = queryParams.keySet().iterator();\n    while (i.hasNext()) {\n        String key = i.next();\n        params[index] = key;\n        values[index++] = queryParams.get(key);\n    }\n    return getHibernateTemplate().findByNamedQueryAndNamedParam(\n        queryName, \n        params, \n        values);\n}", "path": "src\\main\\java\\com\\dagitab\\dao\\hibernate\\GenericDaoHibernate.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic T get(PK id)", "code": "{\n    T entity = (T) super.getHibernateTemplate().get(this.persistentClass, id);\n\n    if (entity == null) {\n        log.warn(\"Uh oh, '\" + this.persistentClass + \"' object with id '\" + id + \"' not found...\");\n        throw new ObjectRetrievalFailureException(this.persistentClass, id);\n    }\n\n    return entity;\n}", "path": "src\\main\\java\\com\\dagitab\\dao\\hibernate\\GenericDaoHibernate.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public List<LabelValue> getAllRoles()", "code": "{\n    List<Role> roles = dao.getRoles();\n    List<LabelValue> list = new ArrayList<LabelValue>();\n\n    for (Role role1 : roles) {\n        list.add(new LabelValue(role1.getName(), role1.getName()));\n    }\n\n    return list;\n}", "path": "src\\main\\java\\com\\dagitab\\service\\impl\\LookupManagerImpl.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * Convert user roles to LabelValue objects for convenience.\n * @return a list of LabelValue objects with role information\n */\n", "func_signal": "@Transient\npublic List<LabelValue> getRoleList()", "code": "{\n    List<LabelValue> userRoles = new ArrayList<LabelValue>();\n\n    if (this.roles != null) {\n        for (Role role : roles) {\n            // convert the user's roles to LabelValue Objects\n            userRoles.add(new LabelValue(role.getName(), role.getName()));\n        }\n    }\n\n    return userRoles;\n}", "path": "src\\main\\java\\com\\dagitab\\model\\User.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * Method that allows setting the DAO to talk to the data store with.\n * @param dao the dao implementation\n */\n", "func_signal": "public void setLookupDao(LookupDao dao)", "code": "{\n    super.dao = dao;\n    this.dao = dao;\n}", "path": "src\\main\\java\\com\\dagitab\\service\\impl\\LookupManagerImpl.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * Adds the annotated classes and the mapping resources to the existing Session Factory configuration.\n * @param configurableListableBeanFactory the good ol' bean factory\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic void postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory)", "code": "{\n    if (configurableListableBeanFactory.containsBean(sessionFactoryBeanName)) {\n        BeanDefinition sessionFactoryBeanDefinition =\n                configurableListableBeanFactory.getBeanDefinition(sessionFactoryBeanName);\n        MutablePropertyValues propertyValues = sessionFactoryBeanDefinition.getPropertyValues();\n\n        if (mappingResources != null) {\n            // do we have existing resourses?\n            PropertyValue propertyValue = propertyValues.getPropertyValue(\"mappingResources\");\n\n            if (propertyValue == null) {\n                propertyValue = new PropertyValue(\"mappingResources\", new ArrayList());\n                propertyValues.addPropertyValue(propertyValue);\n            }\n\n            // value is expected to be a list.\n            List existingMappingResources = (List) propertyValue.getValue();\n            existingMappingResources.addAll(mappingResources);\n        }\n\n        if (annotatedClasses != null) {\n            // do we have existing resources?\n            PropertyValue propertyValue = propertyValues.getPropertyValue(\"annotatedClasses\");\n\n            if (propertyValue == null) {\n                propertyValue = new PropertyValue(\"annotatedClasses\", new ArrayList());\n                propertyValues.addPropertyValue(propertyValue);\n            }\n\n            // value is expected to be a list.\n            List existingMappingResources = (List) propertyValue.getValue();\n            existingMappingResources.addAll(annotatedClasses);\n        }\n\n        if (configLocations != null) {\n            PropertyValue propertyValue = propertyValues.getPropertyValue(\"configLocations\");\n            if (propertyValue == null) {\n                propertyValue = new PropertyValue(\"configLocations\", new ArrayList());\n                propertyValues.addPropertyValue(propertyValue);\n            }\n            List existingConfigLocations = (List) propertyValue.getValue();\n            existingConfigLocations.addAll(configLocations);\n        }\n\n        if (hibernateProperties != null) {\n            PropertyValue propertyValue = propertyValues.getPropertyValue(\"hibernateProperties\");\n            if (propertyValue == null) {\n                propertyValue = new PropertyValue(\"hibernateProperties\", new Properties());\n                propertyValues.addPropertyValue(propertyValue);\n            }\n            Properties existingHibernateProperties = (Properties) propertyValue.getValue();\n            existingHibernateProperties.putAll(hibernateProperties);\n        }\n    } else {\n        throw new NoSuchBeanDefinitionException(\"No bean named [\" + sessionFactoryBeanName\n                + \"] exists within the bean factory. \"\n                + \"Cannot post process session factory to add Hibernate resource definitions.\");\n    }\n}", "path": "src\\main\\java\\com\\dagitab\\dao\\spring\\HibernateExtensionPostProcessor.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "//~ Constructors ===========================================================\n", "func_signal": "public BaseManagerMockTestCase()", "code": "{\n    // Since a ResourceBundle is not required for each class, just\n    // do a simple check to see if one exists\n    String className = this.getClass().getName();\n\n    try {\n        rb = ResourceBundle.getBundle(className);\n    } catch (MissingResourceException mre) {\n        //log.warn(\"No resource bundle found for: \" + className);\n    }\n}", "path": "src\\main\\java\\com\\dagitab\\service\\impl\\BaseManagerMockTestCase.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "/**\n * Convert a date to a String and a String to a Date\n * @param type String, Date or Timestamp\n * @param value value to convert\n * @return Converted value for property population\n */\n", "func_signal": "public Object convert(Class type, Object value)", "code": "{\n    if (value == null) {\n        return null;\n    } else if (type == Timestamp.class) {\n        return convertToDate(type, value, DateUtil.getDateTimePattern());\n    } else if (type == Date.class) {\n        return convertToDate(type, value, DateUtil.getDatePattern());\n    } else if (type == String.class) {\n        return convertToString(type, value);\n    }\n\n    throw new ConversionException(\n            \"Could not convert \" + value.getClass().getName() + \" to \" + type.getName());\n}", "path": "src\\main\\java\\com\\dagitab\\util\\DateConverter.java", "repo_name": "dagitab/pos-core", "stars": 1, "license": "None", "language": "java", "size": 416}
{"docstring": "// The additional parameters, proxy image dimensions\n", "func_signal": "public void testParam()", "code": "{\n  builder.setParam(\"rh\", 1);\n  assertEquals(\"http://example.com:signed:0:0:0:0:0:0:0:rh=1\", builder.build());\n}", "path": "java\\gadgets\\src\\test\\java\\org\\apache\\shindig\\gadgets\\http\\CacheKeyBuilderTest.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * Create JPA Query\n *\n * @param entityManager\n * @param query\n * @param parametersValues\n * @return\n */\n", "func_signal": "private static Query createQuery(EntityManager entityManager, String query,\n    List<?> parametersValues)", "code": "{\n  Query q = entityManager.createQuery(query);\n  int i = 1;\n  for (Object p : parametersValues) {\n    q.setParameter(i, p);\n    i++;\n  }\n  return q;\n}", "path": "java\\samples\\src\\main\\java\\org\\apache\\shindig\\social\\opensocial\\jpa\\spi\\JPQLUtils.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * Add an element to the cache, with the intended max age for its cache entry provided in\n * milliseconds.\n *\n * @param key The key to store the entry for.\n * @param value The value to store.\n * @param maxAge The maximum age for this entry before it is deemed expired.\n */\n", "func_signal": "public void addElement(K key, V value, long maxAge)", "code": "{\n  long now = timeSource.currentTimeMillis();\n  cache.addElement(key, value);\n  expirationTimes.put(value, now + maxAge);\n}", "path": "java\\common\\src\\main\\java\\org\\apache\\shindig\\common\\cache\\SoftExpiringCache.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * Sets a legacy cache key parameter.\n *\n * <p>The legacy cache key parameters have a fixed order.  Since the cache key is not required\n * to have all of the legacy parameters filled in, the index of the parameter must be given.\n *\n * @param index the index to place this parameter at; valid values are {@code 0} to\n *        {@link CacheKeyBuilder#NUM_LEGACY_PARAMS - 1}\n * @param value the object that determines the legacy parameter\n */\n", "func_signal": "public CacheKeyBuilder setLegacyParam(int index, Object value)", "code": "{\n  legacyParams[index] = value;\n  return this;\n}", "path": "java\\gadgets\\src\\main\\java\\org\\apache\\shindig\\gadgets\\http\\CacheKeyBuilder.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * Inserting the keys from the parameter map only if the keys are defined, prevents thrashing\n * the existing persistent caches at rolling restart of high-traffic servers.\n * The cache keys of all URIs that don't set these parameters must not change.\n *\n * TODO: String parameters that have KEY_SEPARATOR appearing as a part of a string param need\n * to be escaped (e.g. with a backslash like so: \":\" -> \"\\:\") to prevent weird cache key\n * collisions.  Moreover the active character (backslash) needs to be escaped itself for similar\n * reasons.\n */\n", "func_signal": "public String build()", "code": "{\n  StringBuilder keyBuilder = new StringBuilder(2 * String.valueOf(legacyParams[0]).length());\n  appendLegacyKeys(keyBuilder);\n\n  if (!paramMap.isEmpty()) {\n    for (Map.Entry<String, Object> mapEntry : paramMap.entrySet()) {\n      keyBuilder.append(KEY_SEPARATOR);\n      keyBuilder.append(String.format(\"%s=%s\", mapEntry.getKey(), mapEntry.getValue()));\n    }\n  }\n  return keyBuilder.toString();\n}", "path": "java\\gadgets\\src\\main\\java\\org\\apache\\shindig\\gadgets\\http\\CacheKeyBuilder.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * Creates a proxy request by fetching pipelined data and adding it to an existing request.\n *\n */\n", "func_signal": "private HttpRequest createPipelinedProxyRequest(Gadget gadget, HttpRequest original)", "code": "{\n  HttpRequest request = new HttpRequest(original);\n  request.setIgnoreCache(true);\n\n  PipelinedData data = gadget.getCurrentView().getPipelinedData();\n  if (data != null) {\n    PipelineExecutor.Results results =\n      pipelineExecutor.execute(gadget.getContext(), ImmutableList.of(data));\n\n    if (results != null && !results.results.isEmpty()) {\n      String postContent = JsonSerializer.serialize(results.results);\n      // POST the preloaded content, with a method override of GET\n      // to enable caching\n      request.setMethod(\"POST\")\n          .setPostBody(CharsetUtil.getUtf8Bytes(postContent))\n          .setHeader(\"Content-Type\", \"application/json;charset=utf-8\");\n    }\n  }\n\n  return request;\n}", "path": "java\\gadgets\\src\\main\\java\\org\\apache\\shindig\\gadgets\\render\\ProxyRenderer.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "// Loosely based off net.oauth.OAuthServlet, and even more loosely related\n// to the OAuth specification\n", "func_signal": "private MessageInfo parseMessage(HttpRequest request)", "code": "{\n  MessageInfo info = new MessageInfo();\n  info.request = request;\n  String method = request.getMethod();\n  ParsedUrl parsed = new ParsedUrl(request.getUri().toString());\n\n  List<OAuth.Parameter> params = Lists.newArrayList();\n  params.addAll(parsed.getParsedQuery());\n\n  if (!validParamLocations.contains(OAuthParamLocation.URI_QUERY)) {\n    // Make sure nothing OAuth related ended up in the query string\n    for (OAuth.Parameter p : params) {\n      if (p.getKey().contains(\"oauth_\")) {\n        throw new RuntimeException(\"Found unexpected query param \" + p.getKey());\n      }\n    }\n  }\n\n  // Parse authorization header\n  if (validParamLocations.contains(OAuthParamLocation.AUTH_HEADER)) {\n    String aznHeader = request.getHeader(\"Authorization\");\n    if (aznHeader != null) {\n      info.aznHeader = aznHeader;\n      for (OAuth.Parameter p : OAuthMessage.decodeAuthorization(aznHeader)) {\n        if (!p.getKey().equalsIgnoreCase(\"realm\")) {\n          params.add(p);\n        }\n      }\n    }\n  }\n\n  // Parse body\n  info.body = request.getPostBodyAsString();\n  try {\n    info.rawBody = IOUtils.toByteArray(request.getPostBody());\n  } catch (IOException e) {\n    throw new RuntimeException(\"Can't read post body bytes\", e);\n  }\n  if (OAuth.isFormEncoded(request.getHeader(\"Content-Type\"))) {\n    params.addAll(OAuth.decodeForm(request.getPostBodyAsString()));\n    // If we're not configured to pass oauth parameters in the post body, double check\n    // that they didn't end up there.\n    if (!validParamLocations.contains(OAuthParamLocation.POST_BODY)) {\n      if (info.body.contains(\"oauth_\")) {\n        throw new RuntimeException(\"Found unexpected post body data\" + info.body);\n      }\n    }\n  }\n  \n  // Return the lot\n  info.message = new OAuthMessage(method, parsed.getLocation(), params);\n  \n  // Check for trusted parameters\n  if (checkTrustedParams) {\n    if (!\"foo\".equals(OAuthUtil.getParameter(info.message, \"oauth_magic\"))) {\n      throw new RuntimeException(\"no oauth_trusted=foo parameter\");\n    }\n    if (!\"bar\".equals(OAuthUtil.getParameter(info.message, \"opensocial_magic\"))) {\n      throw new RuntimeException(\"no opensocial_trusted=foo parameter\");\n    }\n    if (!\"quux\".equals(OAuthUtil.getParameter(info.message, \"xoauth_magic\"))) {\n      throw new RuntimeException(\"no xoauth_magic=quux parameter\");\n    }\n    trustedParamCount += 3;\n  }\n  \n  return info;\n}", "path": "java\\gadgets\\src\\main\\java\\org\\apache\\shindig\\gadgets\\oauth\\testing\\FakeOAuthServiceProvider.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "//example.com\";\n", "func_signal": "@Before\n  public void setUp() throws Exception", "code": "{\n    Injector injector = Guice.createInjector(new ParseModule(), new TemplateModule(),\n        new PropertiesModule());\n    parser = injector.getInstance(GadgetHtmlParser.class);\n    processor = injector.getInstance(TemplateProcessor.class);\n    context = new TemplateContext(new Gadget(), null);\n  }", "path": "java\\gadgets\\src\\test\\java\\org\\apache\\shindig\\gadgets\\templates\\tags\\TemplateBasedTagHandlerTest.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * Performs a 'select count(*)' on the given query\n *\n * @param entityManager\n * @param query\n * @param parametersValues\n * @return\n */\n", "func_signal": "public static Long getTotalResults(EntityManager entityManager, String query,\n    List<?> parametersValues)", "code": "{\n  int fromIndex = 0;\n  String queryInUpperCase = query.toUpperCase();\n  // If JPA query starts with FROM then fromIndex as 0 is correct,\n  // otherwise find where FROM keyword starts in the query string and set the fromIndex.\n  if (!queryInUpperCase.startsWith(\"FROM \")) {\n    fromIndex = queryInUpperCase.indexOf(\" FROM \");\n    if (fromIndex == -1) {\n      // Couldn't find the FROM keyword in the query\n      throw new ProtocolException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Invalid query [\" + query + \"]\");\n    }\n  }\n  query = \"select count(*) \" + query.substring(fromIndex, query.length());\n  Query q = createQuery(entityManager, query, parametersValues);\n  return (Long) q.getSingleResult();\n}", "path": "java\\samples\\src\\main\\java\\org\\apache\\shindig\\social\\opensocial\\jpa\\spi\\JPQLUtils.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * private internal constructor for the enum.\n * @param jsonString the json representation.\n * @param displayValue the display value.\n */\n", "func_signal": "private Drinker(String jsonString, String displayValue)", "code": "{\n  this.jsonString = jsonString;\n  this.displayValue = displayValue;\n}", "path": "java\\social-api\\src\\main\\java\\org\\apache\\shindig\\social\\opensocial\\model\\Drinker.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * Generate a preapproved request token for the specified user data.\n *\n * @param userData\n * @return the request token and secret\n */\n", "func_signal": "public TokenPair getPreapprovedToken(String userData)", "code": "{\n  String requestToken = Crypto.getRandomString(16);\n  String requestTokenSecret = Crypto.getRandomString(16);\n  TokenState state = new TokenState(requestTokenSecret, oauthConsumer, null);\n  state.approveToken();\n  state.setUserData(userData);\n  tokenState.put(requestToken, state);\n  return new TokenPair(requestToken, requestTokenSecret);\n}", "path": "java\\gadgets\\src\\main\\java\\org\\apache\\shindig\\gadgets\\oauth\\testing\\FakeOAuthServiceProvider.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * Append an in clause to the query builder buffer, using positional parameters.\n *\n * @param sb the query builder buffer\n * @param alias the alias to use for the property\n * @param inField the infield name\n * @param nfields the number of infields\n */\n", "func_signal": "public static int addInClause(StringBuilder sb, String alias, String inField, int firstField,\n    int nfields)", "code": "{\n  sb.append(alias).append(\".\").append(inField).append(\" in (\");\n  for (int i = firstField; i < (firstField + nfields); i++) {\n    if (i != firstField) {\n      sb.append(\", \");\n    }\n    sb.append(\"?\").append(i);\n  }\n  sb.append(\")\");\n  return firstField + nfields;\n}", "path": "java\\samples\\src\\main\\java\\org\\apache\\shindig\\social\\opensocial\\jpa\\spi\\JPQLUtils.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * @param container Syndicator param identifying the container for whom we want services\n * @param host      Host for which gadget is being rendered, used to do substitution in endpoints\n * @return Map of Services, by endpoint for the given container.\n */\n", "func_signal": "public Multimap<String, String> getServicesFor(String container, String host)", "code": "{\n  Preconditions.checkNotNull(container);\n  Preconditions.checkArgument(container.length() != 0);\n  Preconditions.checkNotNull(host);\n\n  Multimap<String, String> foundServices = containerServices.get(container);\n  if (foundServices == null) {\n    foundServices = fetcher.getServicesForContainer(container, host);\n    if (foundServices != null) {\n      setServicesFor(container, foundServices);\n    }\n  }\n  if (foundServices == null) {\n    foundServices = ImmutableMultimap.<String, String>builder().build();\n  }\n  return foundServices;\n}", "path": "java\\gadgets\\src\\main\\java\\org\\apache\\shindig\\gadgets\\render\\DefaultRpcServiceLookup.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * Create a new TtlCache with the given capacity and TTL values.\n * The cache provider provides an implementation of the actual storage.\n *\n * @param cache The underlying cache that will store actual data.\n */\n", "func_signal": "public SoftExpiringCache(Cache<K, V>  cache)", "code": "{\n  this.cache = cache;\n  expirationTimes = new MapMaker().weakKeys().makeMap();\n  timeSource = new TimeSource();\n}", "path": "java\\common\\src\\main\\java\\org\\apache\\shindig\\common\\cache\\SoftExpiringCache.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * Sets a cache key parameter.\n *\n * <p>Each parameter needs to be inserted in the cache key builder manually, so that\n * the user has an option to select the parameters that need to become part of the key.\n *\n * @param name the parameter name; if <code>null</code>, the param will not be inserted\n * @param value the object that determines the value of the parameter\n */\n", "func_signal": "public CacheKeyBuilder setParam(String name, Object value)", "code": "{\n  if (value != null) {\n    paramMap.put(name, String.valueOf(value));\n  }\n  return this;\n}", "path": "java\\gadgets\\src\\main\\java\\org\\apache\\shindig\\gadgets\\http\\CacheKeyBuilder.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * @param fetcher  RpcServiceFetcher to retrieve services available from endpoints\n * @param duration in seconds service definitions should remain in the cache\n */\n", "func_signal": "@Inject\npublic DefaultRpcServiceLookup(DefaultServiceFetcher fetcher,\n    @Named(\"org.apache.shindig.serviceExpirationDurationMinutes\")Long duration)", "code": "{\n  containerServices = new MapMaker().expiration(duration * 60, TimeUnit.SECONDS).makeMap();\n  this.fetcher = fetcher;\n}", "path": "java\\gadgets\\src\\main\\java\\org\\apache\\shindig\\gadgets\\render\\DefaultRpcServiceLookup.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * @param obj\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic AtomFeed(Object obj)", "code": "{\n  Preconditions.checkNotNull(obj);\n  if (obj instanceof Map) {\n    Map<?, ?> m = (Map<?, ?>) obj;\n    entry = Lists.newArrayList();\n    for ( Entry<?, ?> o : m.entrySet()) {\n      entry.add(new AtomEntry(o));\n    }\n    startIndex = 0;\n    totalResults = entry.size();\n    itemsPerPage = entry.size();\n  } else if (obj instanceof RestfulCollection<?>) {\n    RestfulCollection<?> r = (RestfulCollection<?>) obj;\n    entry = Lists.newArrayList();\n    List<?> entryList = r.getEntry();\n    for (Object o : entryList) {\n      entry.add(new AtomEntry(o));\n    }\n    startIndex = r.getStartIndex();\n    totalResults = r.getTotalResults();\n    itemsPerPage = r.getItemsPerPage();\n    author = \"?\";\n    link = new AtomLink(\"rel\", \"???\");\n  } else if ( obj instanceof DataCollection ) {\n    DataCollection dc = (DataCollection) obj;\n    entry = Lists.newArrayList();\n    for ( Entry<String, Map<String,String>> o : dc.getEntry().entrySet()) {\n      entry.add(new AtomEntry(o));\n    }\n    startIndex = 0;\n    totalResults = entry.size();\n    itemsPerPage = entry.size();\n  } else {\n    entry = ImmutableList.of(new AtomEntry(obj));\n    startIndex = 0;\n    totalResults = 1;\n    itemsPerPage = 1;\n  }\n}", "path": "java\\social-api\\src\\main\\java\\org\\apache\\shindig\\social\\core\\util\\atom\\AtomFeed.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * Used to revoke all access tokens issued by this service provider.\n *\n * @throws Exception\n */\n", "func_signal": "public void revokeAllAccessTokens() throws Exception", "code": "{\n  for (TokenState state : tokenState.values()) {\n    state.revokeToken();\n  }\n}", "path": "java\\gadgets\\src\\main\\java\\org\\apache\\shindig\\gadgets\\oauth\\testing\\FakeOAuthServiceProvider.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * Used to fake a browser visit to approve a token.\n * \n * @return a redirect URL, which may or may not include an oauth verifier\n */\n", "func_signal": "public String browserVisit(String url) throws Exception", "code": "{\n  ParsedUrl parsed = new ParsedUrl(url);\n  String requestToken = parsed.getQueryParam(\"oauth_token\");\n  TokenState state = tokenState.get(requestToken);\n  state.approveToken();\n  // Not part of the OAuth spec, just a handy thing for testing.\n  state.setUserData(parsed.getQueryParam(\"user_data\"));\n  if (state.callbackUrl != null) {\n    UriBuilder callback = UriBuilder.parse(state.callbackUrl);\n    callback.addQueryParameter(OAuthConstants.OAUTH_VERIFIER, state.verifier);\n    return callback.toString();\n  }\n  return null;\n}", "path": "java\\gadgets\\src\\main\\java\\org\\apache\\shindig\\gadgets\\oauth\\testing\\FakeOAuthServiceProvider.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * Retrieve an element from the cache by key. If there is no such element\n * for that key in the cache, or if the element has timed out, null is returned.\n * @param key Key whose element to look up.\n * @return Element in the cache, if present and not timed out.\n */\n", "func_signal": "public CachedObject<V> getElement(K key)", "code": "{\n  V value = cache.getElement(key);\n  if (value == null) {\n    return null;\n  }\n\n  Long expiration = expirationTimes.get(value);\n\n  if (expiration == null) {\n    return null;\n  }\n\n  return new CachedObject<V>(value, expiration < timeSource.currentTimeMillis());\n}", "path": "java\\common\\src\\main\\java\\org\\apache\\shindig\\common\\cache\\SoftExpiringCache.java", "repo_name": "unpush/apache-incubator-shindig", "stars": 1, "license": "apache-2.0", "language": "java", "size": 9976}
{"docstring": "/**\n * Get the winners. A winner is a candidate with a positive frequency (as\n * specified in column 3 of the file (index 3 of the candidate list).\n * \n * @return winners The ArrayList of winning Candidate objects.\n */\n", "func_signal": "public ArrayList<Candidate> getWinners()", "code": "{\n\tArrayList<Candidate> winners = new ArrayList<Candidate>();\n\tIterator candidates = this.candidates.iterator();\n\twhile (candidates.hasNext()) {\n\t\tCandidate cand = (Candidate) candidates.next();\n\t\tif (cand.getFrequency() > 0) {\n\t\t\twinners.add(cand);\n\t\t}\n\t}\n\treturn winners;\n}", "path": "ptkModel2\\src\\perceptron\\Tableau.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Prints the current tableaux in plain-text.\n * \n * @param <PrintStream>\n *            out The place the content ends up.\n * @param <String>\n *            type If this is <code>plain</code> then the weights are\n *            printed. Anything else, and the weights are not printed.\n */\n", "func_signal": "private void printPlainly(PrintStream out, String type)", "code": "{\n\tString line = \"\";\n\t// Print the system status (added by chris).\n\tline += \"System status: \";\n\tif (this.status == TableauSet.FEASIBLE)\n\t\tline += \"solved\";\n\tif (this.status == TableauSet.INFEASIBLE)\n\t\tline += \"infeasible\";\n\tif (this.status == TableauSet.NONCONVERGENT)\n\t\tline += \"non-convergent\";\n\tif (this.status == TableauSet.UNBOUNDED)\n\t\tline += \"unbounded\";\n\tif (this.status == TableauSet.UNSOLVED)\n\t\tline += \"unsolved\";\n\n\tout.println(line);\n\tline = \"\";\n\t// / Print constraints' full names.\n\tArrayList<LinguisticConstraint> con = this.getConstraints();\n\tIterator it = con.iterator();\n\tif (it.hasNext()) {\n\t\tline += \"\\t\\t\";\n\t}\n\twhile (it.hasNext()) {\n\t\tLinguisticConstraint currCon = (LinguisticConstraint) it.next();\n\t\tline += \"\\t\" + currCon.getName();\n\t}\n\tout.println(line);\n\t// / Print constraints' short names.\n\tline = \"\";\n\tit = con.iterator();\n\tif (it.hasNext()) {\n\t\tline += \"\\t\\t\";\n\t}\n\twhile (it.hasNext()) {\n\t\tLinguisticConstraint currCon = (LinguisticConstraint) it.next();\n\t\tline += \"\\t\" + currCon.getShortName();\n\t}\n\tout.println(line);\n\tline = \"\";\n\t// / Print constraint weights.\n\tif (type == \"plain\") {\n\t\tit = con.iterator();\n\t\tif (it.hasNext()) {\n\t\t\tline += \"weights:\\t\\t\";\n\t\t}\n\t\twhile (it.hasNext()) {\n\t\t\tLinguisticConstraint currCon = (LinguisticConstraint) it.next();\n\t\t\tline += \"\\t\" + currCon.getWeight();\n\t\t}\n\t\tout.println(line);\n\t}\n\t// / Print the tableaux.\n\tArrayList<Tableau> tableaux = this.getTableaux();\n\tit = tableaux.iterator();\n\twhile (it.hasNext()) {\n\t\tline = \"\";\n\t\tTableau tableau = (Tableau) it.next();\n\t\t// / Print input.\n\t\tline += tableau.getInput();\n\t\t// / Print candidates.\n\t\tArrayList<Candidate> candidates = tableau.getCandidates();\n\t\tIterator cand_it = candidates.iterator();\n\t\twhile (cand_it.hasNext()) {\n\t\t\tCandidate cand = (Candidate) cand_it.next();\n\t\t\t// / Print output.\n\t\t\tline += \"\\t\" + cand.getOutput();\n\t\t\t// / Print output's frequency.\n\t\t\tif (cand.getFrequency() == 0) {\n\t\t\t\tline += \"\\t\";\n\t\t\t} else {\n\t\t\t\tline += \"\\t\" + cand.getFrequency();\n\t\t\t}\n\t\t\t// / Print violations.\n\t\t\tArrayList<Cell> cells = cand.getViolationVector();\n\t\t\tIterator cell_it = cells.iterator();\n\t\t\twhile (cell_it.hasNext()) {\n\t\t\t\tCell cell = (Cell) cell_it.next();\n\t\t\t\tline += \"\\t\" + cell.getViolation();\n\t\t\t}\n\t\t\t// / Print weighted total.\n\t\t\tline = line + \"\\tWeighted total:\\t\" + cand.getWeight();\n\t\t\tout.println(line);\n\t\t\tline = \"\";\n\t\t}\n\t}\n}", "path": "ptkModel2\\src\\perceptron\\TableauSet.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Specify an integer-valued violation count.\n * \n * @param viol\n *            The number of violations to be set.\n * @return true\n */\n", "func_signal": "public boolean setViolation(double viol)", "code": "{\n\tthis.violations = viol;\n\treturn true;\n}", "path": "ptkModel2\\src\\perceptron\\Cell.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Set the input for this tableau.\n * \n * @param input\n *            The new LinguisticForm, set to this.input.\n * @return true\n */\n", "func_signal": "public boolean setInput(LinguisticForm input)", "code": "{\n\tthis.input = input;\n\treturn true;\n}", "path": "ptkModel2\\src\\perceptron\\Tableau.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Takes a text file, removes blank line and comments lines, adds line\n * numbers (in front of each line, separated by a tab) and returns the\n * contentful lines in an arrayList\n * \n * @param fileName\n *            The file to process.\n * @return OTsoftfile ArrayList of Strings containing the useful parts of\n *         the file.\n */\n", "func_signal": "public static ArrayList<String> getPrunedFile(String fileName)", "code": "{\n\n\t// This commenting scheme seemed too permissive,\n\t// so we switched to HTML-style comments. --- Chris\n\t// Pattern pat1 = Pattern.compile(\"^[^\\\\'\\\\$\\\\/\\\\#]\");\n\tString cmt = \"/\\\\*\\\\*\";\n\tPattern comment = Pattern.compile(cmt);\n\n\t// Remove blank lines.\n\tPattern blank = Pattern.compile(\"^\\\\s*$\");\n\n\t// Phonologists tend to put things in angled brackets, and these\n\t// don't show up in HTML output --- they are treated as tags.\n\tString regex = \"<([^>]*)>\";\n\tPattern falseTag = Pattern.compile(regex);\n\n\tArrayList<String> OTsoftfile = new ArrayList<String>();\n\n\tFile OTSoft = new File(fileName);\n\tif (OTSoft.exists() && OTSoft.isFile() && OTSoft.canRead()) {\n\t\ttry {\n\t\t\tBufferedReader input = new BufferedReader(\n\t\t\t\t\tnew FileReader(OTSoft));\n\t\t\tString line = null;\n\t\t\tint line_number = 0;\n\t\t\twhile ((line = input.readLine()) != null) {\n\t\t\t\tline_number++;\n\t\t\t\tMatcher matcher1 = comment.matcher(line);\n\t\t\t\tMatcher matcher2 = blank.matcher(line);\n\t\t\t\tif (line.length() > 0 && matcher1.find() == false\n\t\t\t\t\t\t&& !matcher2.find()) {\n\t\t\t\t\tMatcher falseTagMatcher = falseTag.matcher(line);\n\t\t\t\t\tline = falseTagMatcher.replaceAll(\"&lt;$1&gt;\");\n\t\t\t\t\tOTsoftfile.add(line_number + \"\\t\" + line);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (FileNotFoundException ex) {\n\t\t\tex.printStackTrace();\n\t\t} catch (IOException ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\n\t} else {\n\n\t\t// System.out.println(\"File not found, or could not be read.\");\n\t}\n\n\treturn OTsoftfile;\n\n}", "path": "ptkModel2\\src\\perceptron\\TableauSet.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Print any error messages.\n * \n * @param out\n *            The output PrintStream.\n * @param type\n *            String indicating the type: plain or html.\n */\n", "func_signal": "public void printErrors(PrintStream out, String type)", "code": "{\n\n\t// Stylesheet.\n\tString PO = \"<p>\";\n\tString PC = \"</p>\";\n\tif (type == \"plain\") {\n\t\tPO = PC = \"\";\n\t}\n\n\t// If there are errors, print them and stop.\n\tif (this.getErrors().size() != 0) {\n\t\t// / Print errors.\n\t\tout.println(PO + \"Error message(s):\" + PC);\n\t\tIterator err = this.getErrors().iterator();\n\t\twhile (err.hasNext()) {\n\t\t\tout.println(PO + err.next() + PC);\n\t\t}\n\t}\n}", "path": "ptkModel2\\src\\perceptron\\TableauSet.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * public static void main(String[] args) throws Exception{\n * \n * // File input. String OTSoftFileName = \"test-files/alderete.txt\"; if\n * (args != null && args.length > 0) OTSoftFileName = args[0]; }\n */\n", "func_signal": "public void perceptronSolve()", "code": "{\n\tString newline = System.getProperty(\"line.separator\");\n\tint iterations = 1; // make this a parameter later\n\t//int interval = 25; // this too\n\t// ArrayList<LinguisticConstraint> currentCon = ts.getConstraints();\n\t/*\n\t * File output = new File(\"output.txt\");\n\t * \n\t * //Write out the first line of the output file try { BufferedWriter\n\t * out = new BufferedWriter(new FileWriter(output)); String line = \"\\t\";\n\t * for(int i = 0; i < ts.getConstraints().size(); i++){ line +=\n\t * ts.getConstraint(i) + \"\\t\"; } line += newline; out.write(line);\n\t * //out.close();\n\t */\n\n\tfor (int i = 0; i < iterations; i++) {\n\t\t/*\n\t\t * //Write the weights to the output file if((i + 1) % interval ==\n\t\t * 0){ line = (i + 1) + \"\\t\"; //adjust the line number, which is one\n\t\t * more than the counter for(int j = 0; j <\n\t\t * ts.getConstraints().size(); j++){ line +=\n\t\t * ts.getConstraint(j).getRoundedWeight() + \"\\t\"; } line += newline;\n\t\t * out.write(line); }\n\t\t */\n\t\tTableau currentTableau = ts.randomTableau();\n\t\tCandidate winner = currentTableau.getWinners().get(0); // there\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// should\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// only be\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// one\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// winner\n\t\t// DEBUG\n\t\t// System.out.println(winner);\n\n\t\tfor (int j = 0; j < currentTableau.candidateCount(); j++) {\n\t\t\tCandidate loser = currentTableau.getCandidate(j);\n\t\t\t// System.out.println(loser);\n\t\t\tif (!(winner.getName().equals(loser.getName()))) { // sanity\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// check\n\t\t\t\tif (withNoise) {\n\t\t\t\t\t// TODO\n\t\t\t\t\tif (winner.getWeightWithNoise(1) > loser\n\t\t\t\t\t\t\t.getWeightWithNoise(1)) {\n\t\t\t\t\t\t// DEBUG\n\t\t\t\t\t\t// System.out.println(\"learning...\");\n\t\t\t\t\t\tperceptronLearn(winner, loser);\n\t\t\t\t\t}\n\t\t\t\t} else if (winner.getWeight() > loser.getWeight()) {\n\t\t\t\t\t// System.out.println(\"learning...\");\n\t\t\t\t\tperceptronLearn(winner, loser);\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\t// out.close();\n\t// }// catch (IOException e) {\n\t// e.printStackTrace();\n\t// }\n\n\t// Iterator test = ts.getConstraints().iterator();\n\t// while(test.hasNext()){\n\t// LinguisticConstraint jjjjj = (LinguisticConstraint)test.next();\n\t// System.out.println(jjjjj);\n\t// }\n\t// return ts;\n}", "path": "ptkModel2\\src\\perceptron\\Perceptron.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Set the minimal weight for each constraint. This can optionally be given\n * in row 1, tab-position 2, of the OTSoft file.\n * \n * @param newMin\n * @return true\n */\n", "func_signal": "public boolean setMinConstraintWeight(double newMin)", "code": "{\n\tthis.minConstraintWeight = newMin;\n\treturn true;\n}", "path": "ptkModel2\\src\\perceptron\\TableauSet.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Prints the current tableaux in HTML format.\n * \n * @param type\n * @param <PrintStream>\n *            out The place the content ends up.\n */\n", "func_signal": "private void printHTML(String type, PrintStream out)", "code": "{\n\n\t// HTML mark-up and styles.\n\tString TABLEO = \"<table class='tableau' border='1'>\";\n\tString TABLEC = \"</table>\\n\\n\";\n\tString TRO = \"<tr>\";\n\tString TRC = \"</tr>\";\n\tString TD = \"<td></td>\";\n\tString TDOcenter = \"<td align='center'>\";\n\tString TDOleft = \"<td align='left'>\";\n\tString TDOright = \"<td align='right'>\";\n\tString TDOfixed = \"<td class='output'>\";\n\tString TDC = \"</td>\";\n\tString WINNER_MARK = \"<img src='images/hand.png' width='30' height='15' alt='===&gt;' />&nbsp;&nbsp;\";\n\n\tif (type == \"html_typology\") {\n\t\tWINNER_MARK = \"<B>--></B> &nbsp; \";\n\t}\n\n\tString line = \"\";\n\n\t// ////////////////////////////////////////////////////////////////////\n\t// Print a tableau with just the constraints and their weights.\n\tline = TABLEO;\n\tout.println(line);\n\t// Get and print the constraints, as a table row.\n\tArrayList<LinguisticConstraint> con = this.getConstraints();\n\tIterator conIt = con.iterator();\n\tline = TRO;\n\tif (conIt.hasNext()) {\n\t\tline += TD;\n\t}\n\twhile (conIt.hasNext()) {\n\t\tLinguisticConstraint currCon = (LinguisticConstraint) conIt.next();\n\t\tline += TDOcenter + currCon.getShortName() + TDC;\n\t}\n\tline += TRC;\n\tout.println(line);\n\t// Get and print the weights, as a table row.\n\tline = TRO;\n\tconIt = con.iterator();\n\tif (conIt.hasNext()) {\n\t\tline += TDOright + \"<em>Weights</em>\" + TDC;\n\t}\n\twhile (conIt.hasNext()) {\n\t\tLinguisticConstraint currCon = (LinguisticConstraint) conIt.next();\n\t\tline += TDOcenter + currCon.getRoundedWeight() + TDC;\n\t}\n\tline += TRC;\n\tout.println(line);\n\tline = TABLEC;\n\tout.println(line);\n\t// ////////////////////////////////////////////////////////////////////\n\n\t// / Print the tableaux.\n\tArrayList<Tableau> tableaux = this.getTableaux();\n\tIterator tabIt = tableaux.iterator();\n\tint candCount = 0;\n\twhile (tabIt.hasNext()) {\n\t\tline = \"\";\n\t\tTableau tableau = (Tableau) tabIt.next();\n\t\tline += TABLEO;\n\t\tout.println(line);\n\n\t\t// Get and print the weights, as a table row.\n\t\tline = TRO;\n\t\tconIt = con.iterator();\n\t\tif (conIt.hasNext()) {\n\t\t\tline += TDOright + \"<em>Weights</em>\" + TDC;\n\t\t}\n\t\twhile (conIt.hasNext()) {\n\t\t\tLinguisticConstraint currCon = (LinguisticConstraint) conIt\n\t\t\t\t\t.next();\n\t\t\tline += TDOcenter + currCon.getRoundedWeight() + TDC;\n\t\t}\n\t\tline += TRC;\n\t\tout.println(line);\n\n\t\tline = TRO;\n\t\t// / Print input.\n\t\tline += TDOfixed + \"<em>Input</em>:&nbsp;&nbsp;\"\n\t\t\t\t+ tableau.getInput() + TDC;\n\t\t// Get and print the constraints, as a table row.\n\t\tconIt = con.iterator();\n\t\twhile (conIt.hasNext()) {\n\t\t\tLinguisticConstraint currCon = (LinguisticConstraint) conIt\n\t\t\t\t\t.next();\n\t\t\tline += TDOcenter + currCon.getShortName() + TDC;\n\t\t}\n\t\tline += TRC;\n\t\tout.println(line);\n\t\tline = \"\";\n\n\t\t// / Print candidates.\n\t\tArrayList<Candidate> candidates = tableau.getCandidates();\n\t\tIterator cand_it = candidates.iterator();\n\t\twhile (cand_it.hasNext()) {\n\t\t\tline = TRO;\n\t\t\tCandidate cand = (Candidate) cand_it.next();\n\t\t\tcandCount++;\n\t\t\t// / Print output.\n\t\t\tif (cand.getFrequency() == 0) {\n\t\t\t\tline += TDOright;\n\n\t\t\t\t// / for typology: add a \"make winner\" link\n\t\t\t\tif (type == \"html_typology\") {\n\t\t\t\t\tline += \"<A STYLE='color:333399;' href='HaLP:manualTypology(\"\n\t\t\t\t\t\t\t+ candCount\n\t\t\t\t\t\t\t+ \")'>\"\n\t\t\t\t\t\t\t+ cand.getOutput()\n\t\t\t\t\t\t\t+ \"</a>\"\n\t\t\t\t\t\t\t+ TDC;\n\t\t\t\t} else {\n\t\t\t\t\tline += cand.getOutput() + TDC;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tline += TDOright;\n\t\t\t\tline += WINNER_MARK + cand.getOutput() + TDC;\n\t\t\t}\n\t\t\t// / Print violations.\n\t\t\tArrayList<Cell> cells = cand.getViolationVector();\n\t\t\tIterator cell_it = cells.iterator();\n\t\t\twhile (cell_it.hasNext()) {\n\t\t\t\tCell cell = (Cell) cell_it.next();\n\t\t\t\tline += TDOcenter + cell.getViolation() + TDC;\n\t\t\t}\n\t\t\t// / Print weighted total.\n\t\t\tline += TDOleft + \"Weighted total: \" + cand.getRoundedWeight()\n\t\t\t\t\t+ TDC;\n\t\t\tline += TRC;\n\t\t\tout.println(line);\n\t\t\tline = \"\";\n\t\t}\n\t\tline = TABLEC;\n\t\tout.println(line);\n\t}\n}", "path": "ptkModel2\\src\\perceptron\\TableauSet.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Add a warning message.\n * \n * @param warning\n *            A warning message (string).\n * @return true\n */\n", "func_signal": "public boolean addWarning(String warning)", "code": "{\n\tthis.warnings.add(warning);\n\treturn true;\n}", "path": "ptkModel2\\src\\perceptron\\TableauSet.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Get the number of possible langugages in a TableauSet See member\n * \"languages\" for an explanation of what a language is in this context\n * \n * @return int the number of languages in the TableauSet\n */\n", "func_signal": "public int getLanguageCount()", "code": "{\n\n\tIterator it = this.getTableaux().iterator();\n\tint totalLanguages = 1;\n\n\twhile (it.hasNext()) {\n\t\tTableau tableau = (Tableau) it.next();\n\t\tint currentTableauCandidates = 0;\n\t\tIterator it2 = tableau.getCandidates().iterator();\n\t\twhile (it2.hasNext()) {\n\t\t\tcurrentTableauCandidates++;\n\t\t\tit2.next();\n\t\t}\n\t\ttotalLanguages *= currentTableauCandidates;\n\t}\n\treturn totalLanguages;\n\n}", "path": "ptkModel2\\src\\perceptron\\TableauSet.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Add a constraint.\n * \n * @param constraint\n *            The LinguisticConstraint to add.\n * @return true if the constraint is added, else false.\n */\n", "func_signal": "public boolean addConstraint(LinguisticConstraint constraint)", "code": "{\n\tif (this.con == null)\n\t\tthis.con = new ArrayList<LinguisticConstraint>();\n\treturn this.con.add(constraint);\n}", "path": "ptkModel2\\src\\perceptron\\TableauSet.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Print out the constraints, tab separated.\n * \n * @return str The string representing the constraints.\n */\n", "func_signal": "public String constraintsToString()", "code": "{\n\tString str = \"\";\n\tfor (int i = 0; i < constraintCount(); i++) {\n\t\tLinguisticConstraint thisCon = con.get(i);\n\t\tString shortname = thisCon.getShortName();\n\t\tstr += shortname + \"_\";\n\t}\n\treturn str;\n}", "path": "ptkModel2\\src\\perceptron\\TableauSet.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Parse the input string as a double object.\n * \n * @param str\n *            The string to turn into a double.\n * @return result The double object.\n * @throws NumberFormatException\n *             returns 0.0 if this exception occurs.\n */\n", "func_signal": "private double readDouble(String str)", "code": "{\n\tdouble result = 0.0;\n\ttry {\n\t\tresult = Double.parseDouble(str);\n\t} catch (NumberFormatException exc) {\n\t\treturn 0.0;\n\t}\n\treturn result;\n}", "path": "ptkModel2\\src\\perceptron\\TableauSet.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Find out if there is more than one winner.\n * \n * @return true if there is exactly one winner, else false.\n */\n", "func_signal": "public boolean hasUniqueWinner()", "code": "{\n\tint winners = 0;\n\tIterator candidates = this.candidates.iterator();\n\twhile (candidates.hasNext()) {\n\t\tCandidate cand = (Candidate) candidates.next();\n\t\tif (cand.getFrequency() > 0) {\n\t\t\twinners++;\n\t\t}\n\t}\n\treturn (winners == 1);\n}", "path": "ptkModel2\\src\\perceptron\\Tableau.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * On frequencies: 0 = loser, anything bigger = potential winner. Candidate\n * (array of strings):\n * <code>line-number[0] input[1] output[2] frequency[3] violations[4..]</code>\n * \n * @param <String>\n *            currLine The line we are reading.\n * @param <Tableau>\n *            tableau The tableau to process.\n * @return candidate The Candidate object processed.\n */\n/*\nprivate Candidate readOTSoftCandidate(String[] currLine, Tableau tableau) {\n\tCandidate candidate = new Candidate(tableau);\n\tLinguisticForm output = new LinguisticForm(currLine[2].trim());\n\tcandidate.setOutput(output);\n\t// Check the forms to make sure they have the requisite parts.\n\t// System.out.println(candidate.toString());\n\t// / Read frequency.\n\tif (currLine.length > 3) {\n\t\tif (currLine[3].trim().length() > 0) {\n\t\t\tcandidate.setFrequency(readDouble(currLine[3].trim()));\n\t\t}\n\t} else {\n\t\t// / No frequency found - add zero.\n\t\tcandidate.setFrequency(0);\n\t}\n\t// / Read violation marks, if any.\n\tfor (int i = 4; i < currLine.length; i++) {\n\t\t// / Read existing violation marks.\n\t\tCell cell = new Cell(this.readDouble(currLine[i].trim()));\n\t\tcandidate.addViolation(cell);\n\t}\n\ttry {\n\t\tif (candidate.getViolationVector().size() < this.con.size()) {\n\t\t\t// String line_num = currLine[0];\n\t\t\t// This warnings seemed like overkill. --- Chris (2007-02-21)\n\t\t\t// this.addWarning(\"The number of violation marks in line no. \"\n\t\t\t// + line_num +\n\t\t\t// \" of your OTSoft file did not match the number of constraints; zeroes were added as necessary.\");\n\t\t\tfor (int i = candidate.getViolationVector().size(); i < this.con\n\t\t\t\t\t.size(); i++) {\n\t\t\t\t// / Add zeroes if no enough violation marks were found in\n\t\t\t\t// file;\n\t\t\t\t// / make the violation vector as long as CON.\n\t\t\t\tCell cell = new Cell(0);\n\t\t\t\tcandidate.addViolation(cell);\n\t\t\t}\n\t\t}\n\t} catch (NullPointerException e) {\n\t\tString line_num = currLine[0];\n\t\tthis\n\t\t\t\t.addError(\"There was a problem reading the violation marks in line no. \"\n\t\t\t\t\t\t+ line_num\n\t\t\t\t\t\t+ \" of your OTSoft file. Please add 0s to one or more of the empty cells in that line.\");\n\t\treturn candidate;\n\t}\n\treturn candidate;\n}\n\n/**\n * Read in an OTSoft file.\n * \n * @param OTsoftfile\n *            An ArrayList of String object.\n * @return true if the file was read correctly, else false.\n */\n/*\npublic boolean readOTSoftFile(ArrayList<String> OTsoftfile) {\n\tboolean readSuccessfully = true;\n\tIterator<String> file = OTsoftfile.iterator();\n\n\t// / Get first two lines, hope to find constraints in them.\n\t// Constraints are counted via their tab spaces.\n\tPattern pat1 = Pattern.compile(\"\\\\t\");\n\tString[] con1 = pat1.split(file.next());\n\tString[] con2 = pat1.split(file.next());\n\t// Get the next line, looking for constraint groups.\n\tString[] groups = pat1.split(file.next());\n\n\t// If the constraint counts in the first two lines don't match, quit.\n\tif (con1.length != con2.length) {\n\t\tString line_num1 = con1[0], line_num2 = con2[0];\n\t\tthis\n\t\t\t\t.addError(\"The number of constraints found in line no. \"\n\t\t\t\t\t\t+ line_num1\n\t\t\t\t\t\t+ \" of your OTSoft file did not match the number of constraints found in line no. \"\n\t\t\t\t\t\t+ line_num2 + \" of that file.\");\n\t\treadSuccessfully = false;\n\t} else {\n\t\tif (con1.length < 5) { // tab-position 5 is the first place a\n\t\t\t\t\t\t\t\t// constraint can sit.\n\t\t\tString line_num1 = con1[0];\n\t\t\tthis.addError(\"No constraint names were found in line no. \"\n\t\t\t\t\t+ line_num1 + \" of your OTSoft file\");\n\t\t\treadSuccessfully = false;\n\t\t} else {\n\t\t\t// Look for a default value.\n\t\t\tString flt = \"(\\\\+|-)?\\\\d+(\\\\.\\\\d+)?\";\n\t\t\tPattern weightPattern = Pattern.compile(flt);\n\t\t\tMatcher weightMatcher = weightPattern.matcher(con1[2]);\n\t\t\tif (weightMatcher.find()) {\n\t\t\t\tdouble minCW = readDouble(weightMatcher.group());\n\t\t\t\tthis.setMinConstraintWeight(minCW);\n\t\t\t}\n\t\t\t// / Read constraint names and add them.\n\t\t\tfor (int i = 4; i < con1.length; i++) {\n\t\t\t\tLinguisticConstraint cons = new LinguisticConstraint();\n\t\t\t\tcons.setName(con1[i]);\n\t\t\t\tcons.setShortName(con2[i]);\n\t\t\t\tcons.setHTMLName(con2[i]);\n\t\t\t\tif (groups[i].toLowerCase().equals(\"m\"))\n\t\t\t\t\tcons.setMarkedness();\n\t\t\t\tif (groups[i].toLowerCase().equals(\"i\"))\n\t\t\t\t\tcons.setIOFaithfulness();\n\t\t\t\tif (groups[i].toLowerCase().equals(\"o\"))\n\t\t\t\t\tcons.setOOFaithfulness();\n\t\t\t\tthis.addConstraint(cons);\n\t\t\t\t// FIXME\n\t\t\t\tSystem.out.println(cons.getShortName());\n\t\t\t}\n\t\t\t// // Read the rest of the file, looking for tableaux.\n\t\t\twhile (file.hasNext()) {\n\t\t\t\tString[] currLine = pat1.split(file.next());\n\t\t\t\tif (currLine.length < 3) { // tab-position 3 is the first\n\t\t\t\t\t\t\t\t\t\t\t// place an output can sit\n\t\t\t\t\tString line_num = currLine[0];\n\t\t\t\t\tthis.addError(\"Line no. \" + line_num\n\t\t\t\t\t\t\t+ \" of you OTSoft file could not be read.\");\n\t\t\t\t\treadSuccessfully = false;\n\t\t\t\t} else {\n\t\t\t\t\tif (currLine[1].trim().length() > 0) {\n\t\t\t\t\t\t// / Found input, make new tableau.\n\t\t\t\t\t\tTableau tableau = new Tableau(this);\n\t\t\t\t\t\tLinguisticForm input = new LinguisticForm(currLine[1]);\n\t\t\t\t\t\ttableau.setInput(input);\n\t\t\t\t\t\ttableau.addCandidate(readOTSoftCandidate(currLine,tableau));\n\t\t\t\t\t\tSystem.out.println(\"DEBUG: Adding Tableau!\");\n\t\t\t\t\t\tthis.addTableau(tableau);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// / Input not found, try to append to current\n\t\t\t\t\t\t// tableau,\n\t\t\t\t\t\t// / or report error if there isn't one.\n\t\t\t\t\t\tif (this.getTableaux().size() == 0) {\n\t\t\t\t\t\t\tString line_num = currLine[0];\n\t\t\t\t\t\t\tthis.addError(\"Line no. \" + line_num + \" in your OTSoft file could not be associated with any input.\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// / Add candidate to the last tableau.\n\t\t\t\t\t\t\tTableau tableau = this.getTableaux().get(this.getTableaux().size() - 1);\n\t\t\t\t\t\t\t// FIXME\n\t\t\t\t\t\t\tSystem.out.println(readOTSoftCandidate(currLine, tableau).getName());\n\t\t\t\t\t\t\ttableau.addCandidate(readOTSoftCandidate(currLine, tableau));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.getTableaux().size() == 0) {\n\t\t\t\tthis.addWarning(\"No tableaux were found in your OTSoft file.\");\n\t\t\t}\n\t\t}\n\t}\n\t// Check that no tableau has more than one winner.\n\tfor (int i = 0; i < this.size(); i++) {\n\t\tif (this.getTableau(i).winnerCount() > 1) {\n\t\t\tint count = i + 1;\n\t\t\tthis.addError(\"Tableau \" + count + \" has more than one winner.\");\n\t\t}\n\t}\n\n\treturn readSuccessfully;\n}\n\n/**\n * Get the total number of candidates in a TableauSet\n * \n * @return int the number of candidates in the TableauSet\n */\n", "func_signal": "private Candidate readOTSoftCandidate(String[] currLine, Tableau tableau)", "code": "{\t\n\tCandidate candidate = new Candidate(tableau);\n\tLinguisticForm output = new LinguisticForm(currLine[2].trim());\n\tcandidate.setOutput(output);\n\t// Check the forms to make sure they have the requisite parts.\n\t// System.out.println(candidate.toString());\n\t/// Read frequency.\n\tif (currLine.length > 3) {\n\t\tif (currLine[3].trim().length() > 0) {\n\t\t\tcandidate.setFrequency(readDouble(currLine[3].trim()));\n\t\t}\n\t} else {\n\t\t/// No frequency found - add zero.\n\t\tcandidate.setFrequency(0);\n\t}\n\t/// Read violation marks, if any.\n\tfor (int i = 4; i < currLine.length; i++) {\n\t\t/// Read existing violation marks.\n\t\tCell cell = new Cell(this.readDouble(currLine[i].trim()));\n\t\tcandidate.addViolation(cell);\n\t}\n\n\t/// add zeros as necessary to make the violation vector as big as the constraint set\n\tfor (int i = candidate.getViolationVector().size() ; i < this.con.size() ; i++) {\n\t\tCell cell = new Cell(0);\n\t\tcandidate.addViolation(cell);\n\t}\n\t\n\t/* try {\n\t\tif (candidate.getViolationVector().size() < this.con.size()) {\n\t\t\t//String line_num = currLine[0];\n\t\t\t// This warnings seemed like overkill. --- Chris (2007-02-21)\n\t\t\t//this.addWarning(\"The number of violation marks in line no. \" + line_num + \" of your OTSoft file did not match the number of constraints; zeroes were added as necessary.\");\n\t\t\tfor (int i = candidate.getViolationVector().size() ; i < this.con.size() ; i++) {\n\t\t\t\t/// Add zeroes if no enough violation marks were found in file;\n\t\t\t\t/// make the violation vector as long as CON.\n\t\t\t\tCell cell = new Cell(0);\n\t\t\t\tcandidate.addViolation(cell);\n\t\t\t}\n\t\t}\n\t} catch (NullPointerException e) {\n\t\tString line_num = currLine[0];\n\t\tthis.addError(\"There was a problem reading the violation marks in line no. \" + line_num + \" of your OTSoft file. Please add 0s to one or more of the empty cells in that line.\");\n\t\treturn candidate; \n\t}  */\n\n\t\n\t\n\t\n\treturn candidate;\n}", "path": "ptkModel2\\src\\perceptron\\TableauSet.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Add a candidate.\n * \n * @param cand\n *            The Candidate object to add.\n * @return true if the addition was successful, else false.\n */\n", "func_signal": "public boolean addCandidate(Candidate cand)", "code": "{\n\tif (this.candidates == null) {\n\t\tthis.candidates = new ArrayList<Candidate>();\n\t}\n\treturn this.candidates.add(cand);\n}", "path": "ptkModel2\\src\\perceptron\\Tableau.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Get a Tableau via its index.\n * \n * @param i\n *            The index of the tableau.\n * @return the ith Tableau object.\n */\n", "func_signal": "public Tableau getTableau(int i)", "code": "{\n\tif (this.tableaux == null) {\n\t\tSystem.out.println(\"ERROR!\");\n\t}\n\treturn this.tableaux.get(i);\n}", "path": "ptkModel2\\src\\perceptron\\TableauSet.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Add a tableau to this set.\n * \n * @param tableau\n *            The Tableau object to be added.\n * @return addedSuccessfully A boolean variable.\n */\n", "func_signal": "public boolean addTableau(Tableau tableau)", "code": "{\n\t// boolean addedSuccessfully = true;\n\t// Make sure that the added tableau has the same constraint set as the\n\t// TableauSet.\n\t// if (tableau.getCon() == this.con) {\n\tif (this.tableaux == null) {\n\t\tthis.tableaux = new ArrayList<Tableau>();\n\t}\n\tthis.tableaux.add(tableau);\n\t// } else {\n\t// addedSuccessfully = false;\n\t// }\n\treturn true;\n}", "path": "ptkModel2\\src\\perceptron\\TableauSet.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/** Read in an OTSoft file.\n * @param OTsoftfile An ArrayList of String object.\n * @return true if the file was read correctly, else false.\n */\n", "func_signal": "public boolean readOTSoftFile (ArrayList<String> OTsoftfile)", "code": "{\n\tboolean readSuccessfully = true;\n\tIterator<String> file = OTsoftfile.iterator();\n\t\n\t/// Get first two lines, hope to find constraints in them.\n\t//  Constraints are counted via their tab spaces.\n\tPattern pat1 = Pattern.compile(\"\\\\t\");\n\tString[] con1 = pat1.split(file.next());\n\tString[] con2 = pat1.split(file.next());\n\n\t// If the constraint counts in the first two lines don't match, quit.\n\tif (con1.length != con2.length) {\n\t\tString line_num1 = con1[0], line_num2 = con2[0]; \n\t\tthis.addError(\"The number of constraints found in line no. \" + line_num1 + \" of your OTSoft file did not match the number of constraints found in line no. \" + line_num2 + \" of that file.\");\n\t\treadSuccessfully = false;\n\t} else {\n\t\tif (con1.length < 5) { // tab-position 5 is the first place a constraint can sit.\n\t\t\tString line_num1 = con1[0]; \n\t\t\tthis.addError(\"No constraint names were found in line no. \" + line_num1 + \" of your OTSoft file\");\n\t\t\treadSuccessfully = false;\n\t\t} else {\n\t\t\t// Look for a default value.\n\t\t\tString flt = \"(\\\\+|-)?\\\\d+(\\\\.\\\\d+)?\";\n\t\t\tPattern weightPattern = Pattern.compile(flt);\n\t\t\tMatcher weightMatcher = weightPattern.matcher(con1[2]);\n\t\t\tif ( weightMatcher.find() ) {\n\t\t\t\tdouble minCW = readDouble(weightMatcher.group());\n\t\t\t\tthis.setMinConstraintWeight(minCW);\n\t\t\t}\n\t\t\t/// Read constraint names and add them.\n\t\t\tfor (int i = 4; i < con1.length; i++) {\n\t\t\t\tLinguisticConstraint cons = new LinguisticConstraint(this);\n\t\t\t\tcons.setName(con1[i]);\n\t\t\t\tcons.setShortName(con2[i]);\n\t\t\t\tcons.setHTMLName(con2[i]);\n\t\t\t\tthis.addConstraint(cons);\n\t\t\t}\t\t\t\t\n\t\t\t//// Read the rest of the file, looking for tableaux.\n\t\t\t\n\t\t\tboolean reachedEndOfTableaux = false;\n\t\t\t\n\t\t\twhile (file.hasNext()) {\n\t\t\t\tString[] currLine  = pat1.split(file.next());\n\t\t\t\t\n\t\t\t\tif (currLine[1].equalsIgnoreCase(\"[end of tableaux]\")) reachedEndOfTableaux = true;\n\t\t\t\t\n\t\t\t\tif (!reachedEndOfTableaux) {\n\t\t\t\t\t\n\t\t\t\t\t/// read tableaux\n\t\t\t\t\t\n\t\t\t\t\tif (currLine.length < 3) { // tab-position 3 is the first place an output can sit\n\t\t\t\t\t\tString line_num = currLine[0];\n\t\t\t\t\t\tthis.addError(\"Line no. \" + line_num + \" of you OTSoft file could not be read.\");\n\t\t\t\t\t\treadSuccessfully = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (currLine[1].trim().length() > 0) {\n\t\t\t\t\t\t\t/// Found input, make new tableau.\n\t\t\t\t\t\t\tTableau tableau = new Tableau(this);\t\t\t\t\t\t\t \n\t\t\t\t\t\t\tLinguisticForm input = new LinguisticForm(currLine[1]);\n\t\t\t\t\t\t\ttableau.setInput(input);\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttableau.addCandidate(readOTSoftCandidate(currLine,tableau));\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.addTableau(tableau);\t\t\t\t\t\t\t\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t/// Input not found, try to append to current tableau,\n\t\t\t\t\t\t\t/// or report error if there isn't one.\n\t\t\t\t\t\t\tif (this.getTableaux().size() == 0) {\n\t\t\t\t\t\t\t\tString line_num = currLine[0];\n\t\t\t\t\t\t\t\tthis.addError(\"Line no. \" + line_num + \" in your OTSoft file could not be associated with any input.\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t/// Add candidate to the last tableau.\n\t\t\t\t\t\t\t\tTableau tableau = this.getTableaux().get(this.getTableaux().size() - 1);\n\t\t\t\t\t\t\t\ttableau.addCandidate(readOTSoftCandidate(currLine,tableau));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//// read advanced options\n\t\t\t\t\t\n\t\t\t\t\t/// lexically specific constraint - read true or false\n\t\t\t\t\tif (currLine[1].trim().equalsIgnoreCase(\"[lexically specific constraints]\")) {\n\t\t\t\t\t\tif (currLine[2].trim().length()>0) {\n\t\t\t\t\t\t\tif (currLine[2].trim().equals(\"0\")) {\n\t\t\t\t\t\t\t\tthis.setLexicallySpecificConstraints(false);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.setLexicallySpecificConstraints(true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t///rate - read double\n\t\t\t\t\tif (currLine[1].trim().equalsIgnoreCase(\"[rate]\")) {\n\t\t\t\t\t\tif (currLine.length>2 && currLine[2].trim().length()>0) {\n\t\t\t\t\t\t\tthis.setRate(readDouble(currLine[2].trim()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t/// output stage - read double\n\t\t\t\t\tif (currLine[1].trim().equalsIgnoreCase(\"[output stage]\")) {\n\t\t\t\t\t\tif (currLine.length>2 && currLine[2].trim().length()>0) {\n\t\t\t\t\t\t\tthis.setOutputStage(readDouble(currLine[2].trim()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t/// biases - read one double per constraint\n\t\t\t\t\tif (currLine[1].trim().equalsIgnoreCase(\"[bias]\")) {\n\t\t\t\t\t\tfor (int i = 4 ; i < currLine.length ; i++) {\n\t\t\t\t\t\t\tif (currLine[i].trim().length()>0) {\n\t\t\t\t\t\t\t\tdouble bias = readDouble(currLine[i].trim());\n\t\t\t\t\t\t\t\tif ((i-4) < this.getConstraints().size()) {\n\t\t\t\t\t\t\t\t\tthis.getConstraint(i-4).setBias(bias);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t/// initial rankings - read one double per constraint\n\t\t\t\t\tif (currLine[1].trim().equalsIgnoreCase(\"[initial ranking]\")) {\n\t\t\t\t\t\tfor (int i = 4 ; i < currLine.length ; i++) {\n\t\t\t\t\t\t\tif (currLine[i].trim().length()>0) {\n\t\t\t\t\t\t\t\tdouble initialRanking = readDouble(currLine[i].trim());\n\t\t\t\t\t\t\t\tif ((i-4) < this.getConstraints().size()) {\n\t\t\t\t\t\t\t\t\tthis.getConstraint(i-4).setInitialRanking(initialRanking);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t/// read minimal weights\n\t\t\t\t\t/// read column 2 as default double value, then read one double per constraint, which overrides the column 2 value\n\t\t\t\t\tif (currLine[1].trim().equalsIgnoreCase(\"[minimal weight]\")) {\n\t\t\t\t\t\tif (currLine.length>2 && currLine[2].trim().length()>0) {\n\t\t\t\t\t\t\tthis.setMinConstraintWeight(readDouble(currLine[2].trim()));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (int i = 4 ; i < currLine.length ; i++) {\n\t\t\t\t\t\t\tif (currLine[i].trim().length()>0) {\n\t\t\t\t\t\t\t\tdouble minWeight = readDouble(currLine[i].trim());\n\t\t\t\t\t\t\t\tif ((i-4) < this.getConstraints().size()) {\n\t\t\t\t\t\t\t\t\tthis.getConstraint(i-4).setUseLocalMinConstraintWeight(true);\n\t\t\t\t\t\t\t\t\tthis.getConstraint(i-4).setMinConstraintWeight(minWeight);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t/// read noise\n\t\t\t\t\t/// read column 2 as default double value, then read one double per constraint, which overrides the column 2 value\n\t\t\t\t\tif (currLine[1].trim().equalsIgnoreCase(\"[noise]\")) {\n\t\t\t\t\t\tif (currLine.length>2 && currLine[2].trim().length()>0) {\n\t\t\t\t\t\t\tthis.setNoise(readDouble(currLine[2].trim()));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (int i = 4 ; i < currLine.length ; i++) {\n\t\t\t\t\t\t\tif (currLine[i].trim().length()>0) {\n\t\t\t\t\t\t\t\tdouble noise = readDouble(currLine[i].trim());\n\t\t\t\t\t\t\t\tif ((i-4) < this.getConstraints().size()) {\n\t\t\t\t\t\t\t\t\tthis.getConstraint(i-4).setUseLocalNoise(true);\n\t\t\t\t\t\t\t\t\tthis.getConstraint(i-4).setNoise(noise);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.getTableaux().size() == 0) {\n\t\t\t\tthis.addWarning(\"No tableaux were found in your OTSoft file.\");\n\t\t\t}\n\t\t}\n\t}\n\t// Check that no tableau has more than one winner.\n\tfor (int i = 0; i < this.size(); i++) {\n\t\tif (this.getTableau(i).winnerCount() > 1) {\n\t\t\tint count = i+1;\n\t\t\tthis.addError(\"Tableau \" + count + \" has more than one winner.\");\n\t\t}\n\t}\n\t\t\t\n\treturn readSuccessfully;\t\n}", "path": "ptkModel2\\src\\perceptron\\TableauSet.java", "repo_name": "seanbethard/ptkmodel", "stars": 0, "license": "None", "language": "java", "size": 155}
{"docstring": "/**\n * Ajouter un container \u00e0 la zone d'attente\n * @param id L'identifiant du container \u00e0 ajouter\n * @param type Le type de container \u00e0 ajouter\n */\n", "func_signal": "public void addContainer(int id, int type)", "code": "{\n    if(this.containerTypes.contains(type)) {\n        try {\n            this.att.addContainer(new Container(id, type));\n        } catch (ContainerException e) {\n            this.att.notifyWarning(e.getMessage());\n        }\n    }\n}", "path": "src\\main\\java\\com\\ecnmelog\\controller\\StockageController.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/** Renvoie le nombre total d'emplacements\n * @return Le nombre total d'emplacements\n */\n", "func_signal": "public int countEmplacements()", "code": "{\n    int nb = 0;\n    for(int i : this.nbEmplacements.keySet()) {\n        nb += this.nbEmplacements.get(i);\n    }\n    return nb;\n}", "path": "src\\main\\java\\com\\ecnmelog\\model\\AbstractStockageBean.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/**\n * Renvoie le nombre de containers d'un type donn\u00e9 en attente\n * @param type Le type de containers \u00e0 compter\n * @return Le nombre de containers du type donn\u00e9 en attente\n */\n", "func_signal": "public int countContainers(int type)", "code": "{\n    Connection conn = DbConn.getInstance();\n    int enStock = 0;\n    \n    try{\n        PreparedStatement stat = conn.prepareStatement(\"SELECT COUNT(*) AS stock FROM container WHERE emplacement_id ISNULL AND type_id= ?;\");\n        stat.setInt(1, type);\n        ResultSet rs = stat.executeQuery();\n        if(rs.next()) {\n            enStock = rs.getInt(\"stock\");\n        }\n        rs.close();\n    }\n    catch(SQLException e){\n        this.notifyError(\"Impossible de se connecter \u00e0 la base de donn\u00e9es !\");\n    }\n    \n    return enStock;\n}", "path": "src\\main\\java\\com\\ecnmelog\\model\\Attente.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/**\n * Enl\u00e8ve le container demand\u00e9 de la zone d'attente\n * @param id L'id du container \u00e0 enlever\n * */\n", "func_signal": "public void removeContainerById(int id)", "code": "{\n    Connection conn = DbConn.getInstance();\n    \n    try{\n        PreparedStatement stat = conn.prepareStatement(\"DELETE FROM container WHERE container_id=? AND emplacement_id ISNULL;\");\n        stat.setInt(1, id);\n        stat.execute();\n    }\n    catch(SQLException e){\n        this.notifyError(\"Impossible de se connecter \u00e0 la base de donn\u00e9es !\");\n    }\n    \n    this.notifyAttenteObserver(new AttenteBean());\n}", "path": "src\\main\\java\\com\\ecnmelog\\model\\Attente.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/**\n * Renvoie le nombre de containers en attente\n * @return Le nombre de containers (types confondus) en attente\n */\n", "func_signal": "public int countContainers()", "code": "{\n    Connection conn = DbConn.getInstance();\n    int enStock = 0;\n    \n    try{\n        Statement stat = conn.createStatement();\n        ResultSet rs = stat.executeQuery(\"SELECT COUNT(*) AS stock FROM container WHERE emplacement_id ISNULL;\");\n        if(rs.next()) {\n            enStock = rs.getInt(\"stock\");\n        }\n        rs.close();\n    }\n    catch(SQLException e){\n        this.notifyError(\"Impossible de se connecter \u00e0 la base de donn\u00e9es !\");\n    }\n    \n    return enStock;\n}", "path": "src\\main\\java\\com\\ecnmelog\\model\\Attente.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/**\n * Ajoute un container \u00e0 la zone d'attente\n * @param container Le container \u00e0 ajouter \u00e0 la zone d'attente\n * @throws ContainerException si le container est d\u00e9j\u00e0 dans la base de donn\u00e9es\n */\n", "func_signal": "public void addContainer(Container container) throws ContainerException", "code": "{\n    Connection conn = DbConn.getInstance();\n    \n    try{\n        PreparedStatement stat = conn.prepareStatement(\"INSERT INTO container (container_id, type_id) VALUES (?, ?);\");\n        stat.setInt(1, container.getId());\n        stat.setInt(2, container.getType());\n        \n        stat.execute();\n    }\n    catch(SQLException e){\n        throw new ContainerException(\"Le conteneur est d\u00e9j\u00e0 r\u00e9pertori\u00e9 !\");\n    }\n\n    this.notifyAttenteObserver(new AttenteBean());\n}", "path": "src\\main\\java\\com\\ecnmelog\\model\\Attente.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/**\n * Test qui v\u00e9rifie qu'une exception est bien lev\u00e9e quand on essaie d'ajouter un container qui existe d\u00e9j\u00e0\n */\n", "func_signal": "public void testFailContainer()", "code": "{\n    Stockage stock = new Stockage(100);\n    Attente att = new Attente();\n    try{\n        att.addContainer(new Container(1, 2));\n        att.addContainer(new Container(1, 1));\n        fail();\n    }catch(ContainerException e){\n        assertTrue(true);\n    }\n}", "path": "src\\test\\java\\com\\ecnmelog\\model\\AttenteTest.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/**\n * Enl\u00e8ve tous les containers du type demand\u00e9 de la zone d'attente\n * @param type Le type de containers \u00e0 enlever\n * */\n", "func_signal": "public void removeContainersByType(int type)", "code": "{\n    Connection conn = DbConn.getInstance();\n    \n    try{\n        PreparedStatement stat = conn.prepareStatement(\"DELETE FROM container WHERE type_id=? AND emplacement_id ISNULL;\");\n        stat.setInt(1, type);\n        stat.execute();\n    }\n    catch(SQLException e){\n        this.notifyError(\"Impossible de se connecter \u00e0 la base de donn\u00e9es !\");\n    }\n    \n    this.notifyAttenteObserver(new AttenteBean());\n}", "path": "src\\main\\java\\com\\ecnmelog\\model\\Attente.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/**\n * Test de v\u00e9rification d'initialisation des emplacements\n */\n", "func_signal": "public void testInitEmplacement()", "code": "{\n    Stockage stock = new Stockage(100);\n    Attente att = new Attente();\n    assertEquals(100, stock.countEmplacementsDispo());\n    assertEquals(5, stock.countEmplacementsDispo(1));\n    assertEquals(65, stock.countEmplacementsDispo(2));\n    assertEquals(30, stock.countEmplacementsDispo(0));\n}", "path": "src\\test\\java\\com\\ecnmelog\\model\\StockageTest.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/**\n * R\u00e9cup\u00e8re l'\u00e9tat actuel de la zone d'attente dans la base de donn\u00e9es et le stocke dans l'objet\n */\n", "func_signal": "public AttenteBean()", "code": "{\n    Connection conn = DbConn.getInstance();\n    \n    this.containers = new TreeMap<Integer, Container>();\n    this.nbContainers = new TreeMap<Integer, Integer>();\n    \n    try {\n        // R\u00e9cup\u00e9ration et stockage de tous les containers en attente\n        Statement stat = conn.createStatement();\n        ResultSet rs = stat.executeQuery(\"SELECT container_id, type_id FROM container WHERE emplacement_id ISNULL ORDER BY container_id ASC;\");\n        \n        while(rs.next()) {\n            this.containers.put(rs.getInt(\"container_id\"), new Container(rs.getInt(\"container_id\"), rs.getInt(\"type_id\")));\n        }\n        rs.close();\n    } catch(SQLException e) {\n        // Notifier la vue de l'erreur\n    }\n    \n    try {\n        // Comptage de tous les types de containers en attente\n        // La jointure est l\u00e0 pour exclure les containers de type ind\u00e9fini\n        // C'est un choix bourrin, je sais, et \u00e7a peut entra\u00eener l'apparition de containers zombi\n        // Boaf, du moment qu'ils commencent pas \u00e0 d\u00e9vorer les autres containers, \u00e7a passe.\n        // De toutes fa\u00e7ons l'espace d'attente est illimit\u00e9 alors osef. Na.\n        Statement stat = conn.createStatement();\n        ResultSet rs = stat.executeQuery(\"SELECT COUNT(*) AS nb, a.type_id FROM container a NATURAL JOIN type b WHERE a.emplacement_id ISNULL GROUP BY a.type_id;\");\n        \n        while(rs.next()) {\n            this.nbContainers.put(rs.getInt(\"type_id\"), rs.getInt(\"nb\"));\n        }\n        rs.close();\n    } catch(SQLException e) {\n        // Notifier la vue de l'erreur\n    }\n}", "path": "src\\main\\java\\com\\ecnmelog\\model\\AttenteBean.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/**\n * Stocker les containers en attente\n */\n", "func_signal": "public void traiterAttente()", "code": "{\n    int containers = this.att.countContainers();\n    int containersLeft;\n\n    this.stock.traiterAttente();\n    \n    containersLeft = this.att.countContainers();\n\n    if(containersLeft == 0) {\n        this.att.notifyInfo(containers + \" containers ont \u00e9t\u00e9 stock\u00e9s\");\n    } else {\n        this.att.notifyWarning(containersLeft + \" containers n'ont pu \u00eatre stock\u00e9s\");\n    }\n    \n}", "path": "src\\main\\java\\com\\ecnmelog\\controller\\StockageController.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/** Renvoie le nombre d'emplacements disponibles d'un type donn\u00e9\n * @return Le nombre d'emplacements disponibles du type demand\u00e9\n */\n", "func_signal": "public int countEmplacementsDispo(int type)", "code": "{\n    int nb = 0;\n    try {\n        nb = this.nbEmplacementsDispo.get(type);\n    } catch (IndexOutOfBoundsException e) {}\n    return nb;\n}", "path": "src\\main\\java\\com\\ecnmelog\\model\\AbstractStockageBean.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/** Renvoie le nombre d'emplacements d'un type donn\u00e9\n * @return Le nombre d'emplacements du type demand\u00e9\n */\n", "func_signal": "public int countEmplacements(int type)", "code": "{\n    int nb = 0;\n    try {\n        nb = this.nbEmplacements.get(type);\n    } catch (IndexOutOfBoundsException e) {}\n    return nb;\n}", "path": "src\\main\\java\\com\\ecnmelog\\model\\AbstractStockageBean.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/**\n * Test de v\u00e9rification de la m\u00e9thode de vidage des containers\n */\n", "func_signal": "public void testEmpty()", "code": "{\n  \n  Stockage stock = new Stockage(100);\n  Attente att = new Attente();\n  try{\n    att.addContainer(new Container(1, 0));\n    att.addContainer(new Container(2, 1));\n    att.addContainer(new Container(3, 1));\n    att.addContainer(new Container(4, 1));\n    att.addContainer(new Container(5, 1));\n  }catch(ContainerException e){\n    System.out.println(\"--empty--\"+e.getMessage());\n  }\n  try{\n    stock.storeContainer(1, 1);\n    stock.storeContainer(2, 31);\n  }\n  catch(ContainerException e)\n  {\n    System.out.println(\"--empty--\"+e.getMessage());\n  }\n  catch(EmplacementException e)\n  {\n    System.out.println(\"--empty--\"+e.getMessage());\n  }\n  \n  stock.empty();\n  assertEquals(0, stock.countContainers());\n}", "path": "src\\test\\java\\com\\ecnmelog\\model\\StockageTest.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/**\n * Test de v\u00e9rification du chargement d'un container dans la zone d'attente\n */\n", "func_signal": "public void testAddContainer()", "code": "{\n    Stockage stock = new Stockage(100);\n    Attente att = new Attente();\n    try{\n        att.addContainer(new Container(1, 2));\n        att.addContainer(new Container(2, 1));\n    }catch(ContainerException e){\n        System.out.println(e.getMessage());\n        assertTrue(false);\n    }\n    att.removeContainerByType(2);\n    assertEquals(att.countContainers(), 1);\n    assertEquals(att.countContainers(0), 0);\n    assertEquals(att.countContainers(1), 1);\n    assertEquals(att.countContainers(2), 0);\n}", "path": "src\\test\\java\\com\\ecnmelog\\model\\AttenteTest.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/** Renvoie le nombre d'emplacements disponibles\n * @return Le nombre d'emplacements disponibles\n */\n", "func_signal": "public int countEmplacementsDispo()", "code": "{\n    int nb = 0;\n    for(int i : this.nbEmplacementsDispo.keySet()) {\n        nb += this.nbEmplacementsDispo.get(i);\n    }\n    return nb;\n}", "path": "src\\main\\java\\com\\ecnmelog\\model\\AbstractStockageBean.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/** Vide la zone d'attente */\n", "func_signal": "public void empty()", "code": "{\n    Connection conn = DbConn.getInstance();\n    try{\n        Statement stat = conn.createStatement();\n        stat.executeUpdate(\"DELETE FROM container WHERE emplacement_id ISNULL;\");\n    }\n    catch(SQLException e){\n        this.notifyError(\"Impossible de se connecter \u00e0 la base de donn\u00e9es !\");\n    }\n    \n    this.notifyAttenteObserver(new AttenteBean());\n}", "path": "src\\main\\java\\com\\ecnmelog\\model\\Attente.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/** Initialise le contenu de la fen\u00eatre */\n", "func_signal": "public void initContent()", "code": "{\n    JButton btnStocker = new JButton(\">>\");\n    btnStocker.setPreferredSize(new Dimension(40, 10));\n    btnStocker.addActionListener(new StockListener());\n    this.pan.setLayout(new BorderLayout());\n    this.pan.add(new guiAttente(this.controller), BorderLayout.WEST);\n    this.pan.add(btnStocker, BorderLayout.CENTER);\n    this.pan.add(new guiStockage(this.controller), BorderLayout.EAST);\n}", "path": "src\\main\\java\\com\\ecnmelog\\view\\Interface.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/**\n * Enl\u00e8ve un container du type demand\u00e9 de la zone d'attente\n * @param type Le type de container \u00e0 enlever\n * */\n", "func_signal": "public void removeContainerByType(int type)", "code": "{\n    Connection conn = DbConn.getInstance();\n    Integer id = null;\n    \n    try{\n        // On rep\u00e8re le container \u00e0 enlever (du type qu'on veut)\n        PreparedStatement toDelete = conn.prepareStatement(\"SELECT container_id FROM container WHERE type_id=? AND emplacement_id ISNULL LIMIT 1;\");\n        toDelete.setInt(1, type);\n        ResultSet rs = toDelete.executeQuery();\n        if(rs.next()) {\n            id = rs.getInt(\"container_id\");\n        }\n        rs.close();\n        \n        if(id != null){\n            PreparedStatement delete = conn.prepareStatement(\"DELETE FROM container WHERE container_id=?;\");\n            delete.setInt(1, id);\n            delete.executeUpdate();\n        }\n    }\n    catch(SQLException e){\n        this.notifyError(\"Impossible de se connecter \u00e0 la base de donn\u00e9es !\");\n    }\n    \n    this.notifyAttenteObserver(new AttenteBean());\n}", "path": "src\\main\\java\\com\\ecnmelog\\model\\Attente.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/** Renvoie le nombre de containers d'un type donn\u00e9 stock\u00e9s\n * @param type Le type de containers \u00e0 compter\n * @return Le nombre de containers du type indiqu\u00e9\n */\n", "func_signal": "public int countContainers(int type)", "code": "{\n    int nb = 0;\n    try {\n        nb = this.nbContainers.get(type);\n    } catch (IndexOutOfBoundsException e) {}\n    \n    return nb;\n}", "path": "src\\main\\java\\com\\ecnmelog\\model\\AbstractStockageBean.java", "repo_name": "divarvel/TA-Melog", "stars": 1, "license": "None", "language": "java", "size": 1500}
{"docstring": "/**\n * Create a new instance.\n * \n * @param driver\n *            The original datasource driver to use. This can be a MySQL,\n *            for instance. Note: don't use a pooling driver!\n * @param jndiName\n *            The unique global JNDI name to bind this instance on.\n * @param user\n *            The username to get connections for. Empty string or null if\n *            no user authentication should be used.\n * @param password\n *            The password, null or empty if no user authentication should\n *            be used.\n * @param poolSize\n *            The size of the connection pool.\n * @param connectionTimeout\n *            The number of seconds after which the pool's connections are\n *            checked periodically.\n * @param validation\n *            True if the instance will be used for validation only. No\n *            binding is done in that case.\n * @param testQuery \n * \t\t\t A query to validate connection liveness.\n * @param testOnBorrow\n * \t\t\t Should connections be tested when gotten?\n * \n * @throws SQLException\n */\n", "func_signal": "public NonXADataSourceImp ( DataSource driver , String jndiName ,\n        String user , String password , int poolSize ,\n        int connectionTimeout , boolean validation, String testQuery , boolean testOnBorrow ) throws SQLException", "code": "{\n    NonXAConnectionFactory factory = new NonXAConnectionFactory ( driver,\n            user, password );\n    pool = new ConnectionPool ( poolSize, factory, connectionTimeout, testQuery , testOnBorrow );\n    previousConnections = new HashMap ();\n    this.jndiName = jndiName;\n    if ( !validation )\n        addToMap ( jndiName, this );\n}", "path": "com.atomikos.transactions.jdbc\\src\\com\\atomikos\\jdbc\\nonxa\\NonXADataSourceImp.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * @see javax.sql.DataSource#getConnection()\n */\n", "func_signal": "public Connection getConnection () throws SQLException", "code": "{\n    HeuristicMessage m = null;\n    return getConnection ( m );\n}", "path": "com.atomikos.transactions.jdbc\\src\\com\\atomikos\\jdbc\\nonxa\\NonXADataSourceImp.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * @see javax.sql.ConnectionEventListener#connectionClosed(javax.sql.ConnectionEvent)\n */\n", "func_signal": "public synchronized void connectionClosed ( ConnectionEvent event )", "code": "{\n    // called when the Pooled Connection is resubmitted to the pool\n    // remove ThreadLocal mapping\n    XPooledConnection source = (XPooledConnection) event.getSource ();\n    Set values = previousConnections.entrySet ();\n    Iterator it = values.iterator ();\n    while ( it.hasNext () ) {\n        Map.Entry entry = (Map.Entry) it.next ();\n        Connection c = (Connection) entry.getValue ();\n        ThreadLocalConnection tlc = (ThreadLocalConnection) Proxy\n                .getInvocationHandler ( c );\n        if ( tlc.usesConnection ( source ) ) {\n            it.remove ();\n\n        }\n    }\n    source.removeConnectionEventListener ( this );\n    pool.putBack ( source );\n}", "path": "com.atomikos.transactions.jdbc\\src\\com\\atomikos\\jdbc\\nonxa\\NonXADataSourceImp.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * Remove a map entry for the given name.\n * \n * @param name\n *            The name to unmap.\n */\n", "func_signal": "private synchronized static void removeFromMap ( String name )", "code": "{\n\t\t//test null: quick fix for 20718 (Tomcat classloader problem)\n\t\tif ( name != null && nameToDataSource_ != null ) \n\t\t\tnameToDataSource_.remove ( name );\n}", "path": "com.atomikos.transactions.jdbc\\src\\com\\atomikos\\jdbc\\nonxa\\NonXADataSourceImp.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * @see com.atomikos.jdbc.HeuristicDataSource#getConnection(java.lang.String,\n *      java.lang.String, com.atomikos.icatch.HeuristicMessage)\n */\n", "func_signal": "public Connection getConnection ( String user , String passwd ,\n        HeuristicMessage msg ) throws SQLException", "code": "{\n    throw new SQLException (\n            \"Not supported: getConnection with authentication.\" );\n}", "path": "com.atomikos.transactions.jdbc\\src\\com\\atomikos\\jdbc\\nonxa\\NonXADataSourceImp.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * Get the heuristic info for the message round. This returns all heuristic\n * messages for participants that did NOT heuristically terminate on their\n * own.\n * \n * @return HeuristicMessages[] The heuristic messages, or null if none.\n * @exception IllegalStateException\n *                If not done yet.\n * @exception InterruptedException\n *                If interrupted during wait for results.\n */\n", "func_signal": "public HeuristicMessage[] getMessages () throws IllegalStateException,\n        InterruptedException", "code": "{\n    analyze ();\n\n    if ( msgvector_.isEmpty () )\n        return null;\n\n    Object[] oarr = msgvector_.toArray ();\n    HeuristicMessage[] ret = new HeuristicMessage[oarr.length];\n    for ( int i = 0; i < ret.length; i++ )\n        ret[i] = (HeuristicMessage) oarr[i];\n\n    return ret;\n}", "path": "com.atomikos.transactions\\src\\com\\atomikos\\icatch\\imp\\Result.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * Get all replies for this result's message round. Block until ready.\n * \n * @return Stack All replies in a stack.\n * @exception IllegalStateException\n *                If not all replies are in yet.\n * @exception InterruptedException\n *                During waiting interrupt.\n */\n", "func_signal": "public Stack getReplies () throws IllegalStateException,\n        InterruptedException", "code": "{\n    waitForReplies ();\n    return replies_;\n}", "path": "com.atomikos.transactions\\src\\com\\atomikos\\icatch\\imp\\Result.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * Add a reply to the result.\n * \n * @param reply\n *            The reply to add.\n */\n", "func_signal": "public synchronized void addReply ( Reply reply )", "code": "{\n    if ( reply.isRetried ()\n            || repliedlist_.containsKey ( reply.getParticipant () ) )\n        return;\n    // retried messages are not counted in result\n    // and duplicate entries per participant neither\n    // NOTE otherwise duplicates could happen if a participant sends a\n    // replay\n\n    repliedlist_.put ( reply.getParticipant (), new Object () );\n    replies_.push ( reply );\n    messagecount_--;\n    notifyAll ();\n}", "path": "com.atomikos.transactions\\src\\com\\atomikos\\icatch\\imp\\Result.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * @see com.atomikos.jdbc.HeuristicDataSource#getConnection(java.lang.String,\n *      java.lang.String, java.lang.String)\n */\n", "func_signal": "public Connection getConnection ( String user , String passwd , String msg )\n        throws SQLException", "code": "{\n    StringHeuristicMessage hm = new StringHeuristicMessage ( msg );\n    return getConnection ( user, passwd, hm );\n}", "path": "com.atomikos.transactions.jdbc\\src\\com\\atomikos\\jdbc\\nonxa\\NonXADataSourceImp.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * Get the overall result for this communication round.\n * \n * @return int One of the static codes.\n * \n * @exception IllegalStateException\n *                If active msgs exist.\n * @exception InterruptedException\n *                If interrupted during wait.\n */\n", "func_signal": "public int getResult () throws IllegalStateException, InterruptedException", "code": "{\n    analyze ();\n    return result_;\n}", "path": "com.atomikos.transactions\\src\\com\\atomikos\\icatch\\imp\\Result.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "// no of tries retry is done\n", "func_signal": "public CommitMessage ( Participant participant , Result result ,\n        boolean onephase )", "code": "{\n    super ( participant , result );\n    onephase_ = onephase;\n}", "path": "com.atomikos.transactions\\src\\com\\atomikos\\icatch\\imp\\CommitMessage.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * Create a new instance.\n * \n * @param driver\n *            The original datasource driver to use. This can be a MySQL,\n *            for instance. Note: don't use a pooling driver!\n * @param jndiName\n *            The unique global JNDI name to bind this instance on.\n * @param user\n *            The username to get connections for. Empty string or null if\n *            no user authentication should be used.\n * @param password\n *            The password, null or empty if no user authentication should\n *            be used.\n * @param poolSize\n *            The size of the connection pool.\n * @param connectionTimeout\n *            The number of seconds after which the pool's connections are\n *            checked periodically.\n * @param testQuery \n *        \t A SQL test query to validate connection liveness.\n * @param testOnBorrow\n * \t\t\tShould connections be tested when gotten?\n * \n * @throws SQLException\n */\n", "func_signal": "public NonXADataSourceImp ( DataSource driver , String jndiName ,\n        String user , String password , int poolSize , int connectionTimeout, String testQuery , boolean testOnBorrow )\n        throws SQLException", "code": "{\n    this ( driver , jndiName , user , password , poolSize ,\n            connectionTimeout , false, testQuery , testOnBorrow );\n}", "path": "com.atomikos.transactions.jdbc\\src\\com\\atomikos\\jdbc\\nonxa\\NonXADataSourceImp.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * Add any heuristic messages from this message round.\n * \n * Needed in implementation of analyze().\n */\n", "func_signal": "protected synchronized void addMessages ( HeuristicMessage[] marr )", "code": "{\n    if ( marr == null )\n        return;\n\n    for ( int i = 0; i < marr.length; i++ )\n        msgvector_.addElement ( marr[i] );\n}", "path": "com.atomikos.transactions\\src\\com\\atomikos\\icatch\\imp\\Result.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * Closes the datasource (and shuts down the pool).\n * \n */\n", "func_signal": "public void close ()", "code": "{\n    pool.cleanup ();\n    removeFromMap ( jndiName );\n}", "path": "com.atomikos.transactions.jdbc\\src\\com\\atomikos\\jdbc\\nonxa\\NonXADataSourceImp.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * @see Referenceable\n */\n", "func_signal": "public Reference getReference () throws NamingException", "code": "{\n    RefAddr ra = new StringRefAddr ( \"ResourceName\", jndiName );\n    Reference ref = new Reference ( getClass ().getName (),\n            new StringRefAddr ( \"name\", \"NonXADataSourceImp\" ),\n            NonXADataSourceImpFactory.class.getName (), null );\n    ref.add ( ra );\n    return ref;\n\n}", "path": "com.atomikos.transactions.jdbc\\src\\com\\atomikos\\jdbc\\nonxa\\NonXADataSourceImp.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * @see com.atomikos.jdbc.HeuristicDataSource#getConnection(java.lang.String)\n */\n", "func_signal": "public Connection getConnection ( String msg ) throws SQLException", "code": "{\n    StringHeuristicMessage hm = new StringHeuristicMessage ( msg );\n    return getConnection ( hm );\n}", "path": "com.atomikos.transactions.jdbc\\src\\com\\atomikos\\jdbc\\nonxa\\NonXADataSourceImp.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * Get the heuristic error info for the message round. These are for\n * participants that actually did terminate heuristically on their own.\n * \n * @return HeuristicMessages[] The heuristic messages, or null if none.\n * @exception IllegalStateException\n *                If not done yet.\n * @exception InterruptedException\n *                If interrupted during wait.\n */\n", "func_signal": "public HeuristicMessage[] getErrorMessages () throws IllegalStateException,\n        InterruptedException", "code": "{\n    analyze ();\n\n    if ( errmsgvector_.isEmpty () )\n        return null;\n\n    Object[] oarr = errmsgvector_.toArray ();\n    HeuristicMessage[] ret = new HeuristicMessage[oarr.length];\n    for ( int i = 0; i < ret.length; i++ )\n        ret[i] = (HeuristicMessage) oarr[i];\n\n    return ret;\n}", "path": "com.atomikos.transactions\\src\\com\\atomikos\\icatch\\imp\\Result.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * Add any heuristic messages from this message round. This method serves\n * for adding the messages of participants that decided ON THEIR OWN to\n * terminate heuristically.\n * \n * Needed in implementation of analyze().\n */\n", "func_signal": "protected synchronized void addErrorMessages ( HeuristicMessage[] marr )", "code": "{\n    if ( marr == null )\n        return;\n\n    for ( int i = 0; i < marr.length; i++ )\n        errmsgvector_.addElement ( marr[i] );\n}", "path": "com.atomikos.transactions\\src\\com\\atomikos\\icatch\\imp\\Result.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * Add an instance to the map, so that it can be found by name.\n * \n * @param name\n *            The name to map on.\n * @param instance\n *            The data source.\n * @exception SQLException\n *                If the name is already in use.\n */\n", "func_signal": "private synchronized static void addToMap ( String name ,\n        NonXADataSourceImp instance ) throws SQLException", "code": "{\n    if ( nameToDataSource_.get ( name ) != null ) {\n        throw new SQLException ( \"DataSource for resource \" + name\n                + \" already exists!\" );\n    }\n\n    nameToDataSource_.put ( name, instance );\n\n}", "path": "com.atomikos.transactions.jdbc\\src\\com\\atomikos\\jdbc\\nonxa\\NonXADataSourceImp.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * A commit message.\n * \n * @return Object An array of heuristic messages.\n * @exception PropagationException\n *                If problems. If heuristics, this will be a heuristic\n *                exception; otherwise, commit has to be retried since\n *                participant can be indoubt. Hence, if not heuristic in\n *                nature, then the error is transient.\n */\n", "func_signal": "protected Object send () throws PropagationException", "code": "{\n    Participant part = getParticipant ();\n    HeuristicMessage[] msgs = null;\n    try {\n        msgs = part.commit ( onephase_ );\n        return msgs;\n    } catch ( RollbackException rb ) {\n        throw new PropagationException ( rb, false );\n    } catch ( HeurMixedException heurm ) {\n        throw new PropagationException ( heurm, false );\n    } catch ( HeurRollbackException heurr ) {\n        throw new PropagationException ( heurr, false );\n    } catch ( Exception e ) {\n        // heuristic hazard or not, participant might be indoubt.\n        // fill in exact heuristic messages by using buffer effect\n        // of participant proxies.\n        String msg = \"Unexpected error in commit\";\n        Configuration.logWarning ( msg, e );\n        HeurHazardException heurh = new HeurHazardException ( part\n                .getHeuristicMessages () );\n        throw new PropagationException ( heurh, true );\n    }\n}", "path": "com.atomikos.transactions\\src\\com\\atomikos\\icatch\\imp\\CommitMessage.java", "repo_name": "hmalphettes/atomikos-essentials-3.5.8-osgified-sandbox", "stars": 1, "license": "other", "language": "java", "size": 732}
{"docstring": "/**\n * Convert from a binary int array to a binary string\n */\n", "func_signal": "public static String intArrayToBinaryString(int[] input)", "code": "{\n  StringBuilder result = new StringBuilder();\n  for(int i = 0; i < input.length; i++)\n    result.append(Integer.toString(input[i],2));\n  return result.toString();\n}", "path": "src\\CipherFunction.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "// XOR the elements of two binary int array, returning a\n// binary int array of results\n", "func_signal": "private static int[] xorBinArray(int[] p, int[] q)", "code": "{\n  int[] result = new int[p.length];\n  for(int i=0; i<p.length; i++)\n    result[i] = p[i] ^ q[i]; // p ^ q is the bitwise XOR\n  return result;\n}", "path": "src\\CipherFunction.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Convert the plaintext string into its equivalent binary string\n */\n", "func_signal": "public static String textToBinaryString(String plaintext)", "code": "{\n  //The binary representation of the plaintext \n  StringBuilder sb = new StringBuilder();\n  for(int i=0; i<plaintext.length(); i++)\n    sb.append(CipherFunction.padBinary((int)plaintext.charAt(i), 8));\n  return sb.toString();\n}", "path": "src\\CipherFunction.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Convert a binary string into its equivalent plaintext\n */\n", "func_signal": "public static String binaryStringToText(String plaintext)", "code": "{\n  StringBuilder sb = new StringBuilder();\n  for(int i=0; i<plaintext.length(); i+=8)\n    sb.append((char)Integer.parseInt(plaintext.substring(i,i+8),2));\n  return sb.toString();\n}", "path": "src\\CipherFunction.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Return a binary string representation of i with at\n * least the width provided, padding with 0s if necessary\n */\n", "func_signal": "public static String padBinary(int i, int width)", "code": "{\n  String result = Integer.toBinaryString(i);\n  while (result.length() < width) {\n    result = \"0\".concat(result);\n  }\n  return result;\n}", "path": "src\\CipherFunction.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Take a ciphertext binary int array and decrypt with the key\n */\n", "func_signal": "public static int[] desDecrypt(int[] ciphertext, int[] key)", "code": "{\n    int[][] subkeys = KeySequence.getDecryptKeys(key);\n  \n    return des(ciphertext, subkeys);\n  }", "path": "src\\CipherFunction.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Convert from a binary string to a binary int array\n */\n", "func_signal": "public static int[] stringToIntArray(String input)", "code": "{\n  int[] result = new int[input.length()];\n  for(int i = 0; i < input.length(); i++) {\n    result[i] = Integer.parseInt(input.substring(i,i+1));\n  }\n  return result;\n}", "path": "src\\CipherFunction.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Convert a binary string into its equivalent hex string\n */\n", "func_signal": "public static String binaryStringToHex(String plaintext)", "code": "{\n  StringBuilder sb = new StringBuilder();\n  for(int i=0; i<plaintext.length(); i+=4){\n    int val = Integer.parseInt(plaintext.substring(i,i+4),2);\n    sb.append(Integer.toHexString(val));\n  }\n  return sb.toString();\n}", "path": "src\\CipherFunction.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Apply all the substitution boxes 1-8 for a single round\n * of the DES algorithm, \n */\n", "func_signal": "public static int[] allSboxes(int[] bs)", "code": "{\n  String string = CipherFunction.intArrayToBinaryString(bs);\n  \n  StringBuilder result = new StringBuilder();\n  //The s functions\n  result.append(Sbox1.call(string.substring( 0, 6)));\n  result.append(Sbox2.call(string.substring( 6,12)));\n  result.append(Sbox3.call(string.substring(12,18)));\n  result.append(Sbox4.call(string.substring(18,24)));\n  result.append(Sbox5.call(string.substring(24,30)));\n  result.append(Sbox6.call(string.substring(30,36)));\n  result.append(Sbox7.call(string.substring(36,42)));\n  result.append(Sbox8.call(string.substring(42,48)));\n  \n  return CipherFunction.stringToIntArray(result.toString());\n}", "path": "src\\Sbox.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "// Take a plaintext binary int array and encrypt with the key \n", "func_signal": "public static int[] desEncrypt(int[] plaintext, int[] key)", "code": "{\n  int[][] subkeys = KeySequence.getEncryptKeys(key);\n  \n  return des(plaintext, subkeys);\n\t}", "path": "src\\CipherFunction.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Generate the subkey sequence to allow\n * encryption with the DES algorithm\n */\n", "func_signal": "static public int[][] getEncryptKeys(int[] key)", "code": "{\n  int[] temp;\n  int[][] result = new int[16][];\n  temp = PermutedChoice1.call(key);\n  int[] c = new int[temp.length/2];\n  int[] d = new int[temp.length/2];\n  \n  for(int i=0; i<temp.length/2; i++) {\n    c[i] = temp[i];\n    d[i] = temp[i+temp.length/2];\n  }\n  \n  int[][] cd;\n  \n  // This is the standard left-shift\n  // sequence for the DES algorithm\n  cd = leftShift(c,d);\n  result[0] = generateKey(cd);\n  cd = leftShift(cd);\n  result[1] = generateKey(cd);\n  cd = leftShift(cd);\n  cd = leftShift(cd);\n  result[2] = generateKey(cd);\n  cd = leftShift(cd);\n  cd = leftShift(cd);\n  result[3] = generateKey(cd);\n  cd = leftShift(cd);\n  cd = leftShift(cd);\n  result[4] = generateKey(cd);\n  cd = leftShift(cd);\n  cd = leftShift(cd);\n  result[5] = generateKey(cd);\n  cd = leftShift(cd);\n  cd = leftShift(cd);\n  result[6] = generateKey(cd);\n  cd = leftShift(cd);\n  cd = leftShift(cd);\n  result[7] = generateKey(cd);\n  cd = leftShift(cd);\n  result[8] = generateKey(cd);\n  cd = leftShift(cd);\n  cd = leftShift(cd);\n  result[9] = generateKey(cd);\n  cd = leftShift(cd);\n  cd = leftShift(cd);\n  result[10] = generateKey(cd);\n  cd = leftShift(cd);\n  cd = leftShift(cd);\n  result[11] = generateKey(cd);\n  cd = leftShift(cd);\n  cd = leftShift(cd);\n  result[12] = generateKey(cd);\n  cd = leftShift(cd);\n  cd = leftShift(cd);\n  result[13] = generateKey(cd);\n  cd = leftShift(cd);\n  cd = leftShift(cd);\n  result[14] = generateKey(cd);\n  cd = leftShift(cd);\n  result[15] = generateKey(cd);\n  \n  return result;\n}", "path": "src\\KeySequence.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Return the table value for the y axis\n * using the standard j function\n */\n", "func_signal": "public static int j(String b)", "code": "{\n  // inner bits    \n  String temp = b.substring(1,5);\n  return Integer.parseInt(temp,2);\n}", "path": "src\\Sbox.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Convert a hex string into its equivalent binary string\n */\n", "func_signal": "public static String hexToBinaryString(String key)", "code": "{\n  StringBuilder sb = new StringBuilder();\n  for(int i=0; i<key.length(); i++){\n    // convert hex value to integer\n    int asciiVal = Integer.parseInt(key.substring(i,i+1), 16);\n    // append to string\n    sb.append(CipherFunction.padBinary(asciiVal, 4));\n  }\n  return sb.toString();\n}", "path": "src\\CipherFunction.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Generate the subkey sequence to allow\n * decryption with the DES algorithm\n */\n", "func_signal": "static public int[][] getDecryptKeys(int[] key)", "code": "{\n  int[][] encryptSequence = getEncryptKeys(key);\n  int len = encryptSequence.length;\n  int[][] result = new int[len][];\n  \n  // the des algorithm will decrypt if the\n  // keys are in the reverse order,\n  // so we reverse them\n  for(int i=0; i<len; i++)\n    result[len-1-i] = encryptSequence[i];\n    \n  return result;\n}", "path": "src\\KeySequence.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Take standard block r as a binary int array and apply\n * one full round against it with the subkey\n */\n", "func_signal": "public static int[] roundCipher(int[] r, int[] subkey)", "code": "{\n  int[] er = BitSelection.call(r);\n  int[] bs = xorBinArray(subkey, er);\n  int[] l = Sbox.allSboxes(bs);\n  return Permutation.call(l);\n\t}", "path": "src\\CipherFunction.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Pad the input block according to PKCS#5\n * up to the DES block size 64 bits\n */\n", "func_signal": "public static int[] enpad(int[] input)", "code": "{\n  int[] result = new int[64];\n  int pad = 8 - (input.length/8);\n  for(int i=0; i<64; i++) {\n    if (input.length/8 > i/8) {\n      result[i] = input[i];\n    } else {\n      result[i] = (pad >> ((63 - i) % 8)) & 1;\n    }\n  }\n  return result;\n}", "path": "src\\PKCS5Padding.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Return a binary int array by mapping input\n * bits to output bits from the lookup table\n */\n", "func_signal": "static protected int[] applyLookup(int[] input, int[] table)", "code": "{\n  int[] result = new int[table.length];\n  for(int i=0; i<table.length; i++){\n    result[i] = input[table[i]-1];\n  }\n  return result; \n}", "path": "src\\LookupTable.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Calculate the substitution value from the binary\n * string using the lookup table sb. This works for all\n * sboxes by just replacing the lookup table\n */\n", "func_signal": "public static String sbox(String string, int[][] sb)", "code": "{\n  int x = i(string);\n  int y = j(string);\n  \n  int lookup = sb[x][y];\n  \n  return CipherFunction.padBinary(lookup, 4);\n}", "path": "src\\Sbox.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Remove the padding from the input block according to PKCS#5\n * from a DES block size 64 bits\n */\n", "func_signal": "public static int[] depad(int[] input)", "code": "{\n  int pad = 0;\n  for(int i=0; i<4; i++) {\n    pad |= input[63-i] << i;\n  }\n  int unpadded = 8-pad;\n  \n  int[] result = new int[64-(8*pad)];\n  for(int i = 0; i<result.length; i++) {\n    result[i] = input[i];\n  }\n  \n  return result;\n}", "path": "src\\PKCS5Padding.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n * Take a text and subkey sequence and perform the generic\n * DES algorithm against it. This works for both encryption\n * and decryption by inverting the order of subkeys\n */\n", "func_signal": "private static int[] des(int[] text, int[][] subkeys)", "code": "{\n  \t  int[] ip = InitialPermutation.call(text);\n\n      int l[] = new int[32];\n      int r[] = new int[32];\n\n      // split into standard blocks l and r\n      for(int i=0;i<32;i++){\n          l[i]=ip[i];\n          r[i]=ip[i+32];\n      } \n\n      for(int roundNumber = 0; roundNumber<16; roundNumber++) {\n          int[] finalInts = roundCipher(r, subkeys[roundNumber]);\n          //Now we swap the L and R\n          int[] tempL = xorBinArray(l, finalInts);\n          l = r;\n          r = tempL;\n      }\n\n      int[] result = new int[64];\n      for(int i=0;i<32;i++){\n          result[i] = r[i];\n          result[i+32] = l[i];\n      }\n\n      return FinalPermutation.call(result);\n  }", "path": "src\\CipherFunction.java", "repo_name": "josephholsten/dataencryptionstandard", "stars": 1, "license": "None", "language": "java", "size": 280}
{"docstring": "/**\n *\n * @param index\n * @param start\n * @return\n */\n", "func_signal": "public Object get(int index, Scriptable start)", "code": "{\n    //Log(\"get index: \" + index);\n\n    if (index >= 0 && index < length())\n    {\n        return getXmlFromAnnotation(index);\n    }\n    else\n    {\n        return Scriptable.NOT_FOUND;\n    }\n}", "path": "rhino\\deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XMLList.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n *\n * @param index\n * @param xml\n */\n", "func_signal": "private void insert(int index, XML xml)", "code": "{\n    if (index < length())\n    {\n        AnnotationList newAnnoList = new AnnotationList();\n\n        // Copy upto item to insert.\n        for (int i = 0; i < index; i++)\n        {\n            newAnnoList.add(_annos.item(i));\n        }\n\n        newAnnoList.add(xml.getAnnotation());\n\n        for (int i = index; i < length(); i++)\n        {\n            newAnnoList.add(_annos.item(i));\n        }\n\n        _annos = newAnnoList;\n    }\n}", "path": "rhino\\deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XMLList.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "//\n//    Name and namespace-related methods\n//\n", "func_signal": "private void addInScopeNamespace(Namespace ns)", "code": "{\n    if (!isElement()) {\n        return;\n    }\n    //    See ECMA357 9.1.1.13\n    //    in this implementation null prefix means ECMA undefined\n    if (ns.prefix() != null) {\n        if (ns.prefix().length() == 0 && ns.uri().length() == 0) {\n            return;\n        }\n        if (node.getQname().getNamespace().getPrefix().equals(ns.prefix())) {\n            node.invalidateNamespacePrefix();\n        }\n        node.declareNamespace(ns.prefix(), ns.uri());\n    } else {\n        return;\n    }\n}", "path": "rhino\\xmlimplsrc\\org\\mozilla\\javascript\\xmlimpl\\XML.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n *\n * @return\n */\n", "func_signal": "public Object[] getIds()", "code": "{\n    Object enumObjs[];\n\n    if (prototypeFlag)\n    {\n        enumObjs = new Object[0];\n    }\n    else\n    {\n        enumObjs = new Object[length()];\n\n        for (int i = 0; i < enumObjs.length; i++)\n        {\n            enumObjs[i] = new Integer(i);\n        }\n    }\n\n    return enumObjs;\n}", "path": "rhino\\deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XMLList.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Construct ClassCompiler that uses the specified compiler environment\n * when generating classes.\n */\n", "func_signal": "public ClassCompiler(CompilerEnvirons compilerEnv)", "code": "{\n    if (compilerEnv == null) throw new IllegalArgumentException();\n    this.compilerEnv = compilerEnv;\n    this.mainMethodClassName = Codegen.DEFAULT_MAIN_METHOD_CLASS;\n}", "path": "rhino\\src\\org\\mozilla\\javascript\\optimizer\\ClassCompiler.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n *\n * @param index\n */\n", "func_signal": "public void delete(int index)", "code": "{\n    if (index >= 0 && index < length())\n    {\n        XML xml = getXmlFromAnnotation(index);\n\n        xml.remove();\n\n        internalRemoveFromList(index);\n    }\n}", "path": "rhino\\deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XMLList.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n *\n * @return\n */\n", "func_signal": "public String toString()", "code": "{\n    if (hasSimpleContent())\n    {\n        StringBuffer sb = new StringBuffer();\n\n        for(int i = 0; i < length(); i++)\n        {\n            XML next = getXmlFromAnnotation(i);\n            sb.append(next.toString());\n        }\n\n        return sb.toString();\n    }\n    else\n    {\n        return toXMLString(0);\n    }\n}", "path": "rhino\\deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XMLList.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "/* The JavaScript constructor */\n", "func_signal": "private static Object jsConstructor(Context cx, Scriptable scope, \n                                    Scriptable thisObj, Object[] args)", "code": "{\n    if (args.length == 0 || args[0] == null || \n        args[0] == Undefined.instance)\n    {\n        throw ScriptRuntime.typeError1(\"msg.no.properties\", \n                                       ScriptRuntime.toString(args[0]));\n    }\n    Scriptable obj = ScriptRuntime.toObject(scope, args[0]);\n    boolean keyOnly = args.length > 1 && ScriptRuntime.toBoolean(args[1]);\n    if (thisObj != null) {\n        // Called as a function. Convert to iterator if possible.\n      \n        // For objects that implement java.lang.Iterable or\n        // java.util.Iterator, have JavaScript Iterator call the underlying\n        // iteration methods\n        Iterator<?> iterator = \n            VMBridge.instance.getJavaIterator(cx, scope, obj);\n        if (iterator != null) {\n            scope = ScriptableObject.getTopLevelScope(scope);\n            return cx.getWrapFactory().wrap(cx, scope,\n                    new WrappedJavaIterator(iterator, scope),\n                    WrappedJavaIterator.class);\n        }\n        \n        // Otherwise, just call the runtime routine\n        Scriptable jsIterator = ScriptRuntime.toIterator(cx, scope, obj, \n                                                         keyOnly);\n        if (jsIterator != null) {\n            return jsIterator;\n        }\n    }\n    \n    // Otherwise, just set up to iterate over the properties of the object.\n    // Do not call __iterator__ method.\n    Object objectIterator = ScriptRuntime.enumInit(obj, cx,\n        keyOnly ? ScriptRuntime.ENUMERATE_KEYS_NO_ITERATOR\n                : ScriptRuntime.ENUMERATE_ARRAY_NO_ITERATOR);\n    ScriptRuntime.setEnumNumbers(objectIterator, true);\n    NativeIterator result = new NativeIterator(objectIterator);\n    result.setPrototype(NativeIterator.getClassPrototype(scope, \n                            result.getClassName()));\n    result.setParentScope(scope);\n    return result;\n}", "path": "rhino\\src\\org\\mozilla\\javascript\\NativeIterator.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "//    See ECMA 357, 11_2_2_1, Semantics, 3_f.\n", "func_signal": "@Override\npublic Scriptable getExtraMethodSource(Context cx)", "code": "{\n    if (hasSimpleContent()) {\n        String src = toString();\n        return ScriptRuntime.toObjectOrNull(cx, src);\n    }\n    return null;\n}", "path": "rhino\\xmlimplsrc\\org\\mozilla\\javascript\\xmlimpl\\XML.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n *\n * @param name\n * @param value\n */\n", "func_signal": "private void setAttribute (XMLName xmlName, Object value)", "code": "{\n    for (int i = 0; i < length(); i++)\n    {\n        XML xml = getXmlFromAnnotation(i);\n        xml.setAttribute(xmlName, value);\n    }\n}", "path": "rhino\\deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XMLList.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Get the value of the \"StopIteration\" object. Note that this value\n * is stored in the top-level scope using \"associateValue\" so the\n * value can still be found even if a script overwrites or deletes\n * the global \"StopIteration\" property.\n * @param scope a scope whose parent chain reaches a top-level scope\n * @return the StopIteration object\n */\n", "func_signal": "public static Object getStopIterationObject(Scriptable scope)", "code": "{\n    Scriptable top = ScriptableObject.getTopLevelScope(scope);\n    return ScriptableObject.getTopScopeValue(top, ITERATOR_TAG);\n}", "path": "rhino\\src\\org\\mozilla\\javascript\\NativeIterator.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "// Check if Node always mean true or false in boolean context\n", "func_signal": "private static int isAlwaysDefinedBoolean(Node node)", "code": "{\n    switch (node.getType()) {\n      case Token.FALSE:\n      case Token.NULL:\n        return ALWAYS_FALSE_BOOLEAN;\n      case Token.TRUE:\n        return ALWAYS_TRUE_BOOLEAN;\n      case Token.NUMBER: {\n        double num = node.getDouble();\n        if (num == num && num != 0.0) {\n            return ALWAYS_TRUE_BOOLEAN;\n        } else {\n            return ALWAYS_FALSE_BOOLEAN;\n        }\n      }\n    }\n    return 0;\n}", "path": "rhino\\src\\org\\mozilla\\javascript\\IRFactory.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "// #string_id_map#\n", "func_signal": "@Override\n    protected int findPrototypeId(String s)", "code": "{\n        int id;\n// #generated# Last update: 2007-06-11 09:43:19 EDT\n        L0: { id = 0; String X = null;\n            int s_length = s.length();\n            if (s_length==4) { X=\"next\";id=Id_next; }\n            else if (s_length==11) { X=\"constructor\";id=Id_constructor; }\n            else if (s_length==12) { X=\"__iterator__\";id=Id___iterator__; }\n            if (X!=null && X!=s && !X.equals(s)) id = 0;\n            break L0;\n        }\n// #/generated#\n        return id;\n    }", "path": "rhino\\src\\org\\mozilla\\javascript\\NativeIterator.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "//    TODO    This is how I found it but I am not sure it makes sense\n", "func_signal": "@Override\npublic void delete(int index)", "code": "{\n    if (index == 0) {\n        this.remove();\n    }\n}", "path": "rhino\\xmlimplsrc\\org\\mozilla\\javascript\\xmlimpl\\XML.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * DOTQUERY\n */\n", "func_signal": "public Node createDotQuery (Node obj, Node body, int lineno)", "code": "{\n    setRequiresActivation();\n    Node result = new Node(Token.DOTQUERY, obj, body, lineno);\n    return result;\n}", "path": "rhino\\src\\org\\mozilla\\javascript\\IRFactory.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "//    TODO Either cross-reference this next comment with the specification or delete it and change the behavior\n//    The comment: XML[0] should return this, all other indexes are Undefined\n", "func_signal": "@Override\npublic Object get(int index, Scriptable start)", "code": "{\n    if (index == 0) {\n        return this;\n    } else {\n        return Scriptable.NOT_FOUND;\n    }\n}", "path": "rhino\\xmlimplsrc\\org\\mozilla\\javascript\\xmlimpl\\XML.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * See ECMA 357, 11_2_2_1, Semantics, 3_e.\n */\n", "func_signal": "public Scriptable getExtraMethodSource(Context cx)", "code": "{\n    if (length() == 1) {\n        return getXmlFromAnnotation(0);\n    }\n    return null;\n}", "path": "rhino\\deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XMLList.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Retrieves mapping of methods to accessible methods for a class.\n * In case the class is not public, retrieves methods with same \n * signature as its public methods from public superclasses and \n * interfaces (if they exist). Basically upcasts every method to the \n * nearest accessible method.\n */\n", "func_signal": "private static Method[] discoverAccessibleMethods(Class<?> clazz, \n                                                  boolean includeProtected,\n                                                  boolean includePrivate)", "code": "{\n    Map<MethodSignature,Method> map = new HashMap<MethodSignature,Method>();\n    discoverAccessibleMethods(clazz, map, includeProtected, includePrivate);\n    return map.values().toArray(new Method[map.size()]);\n}", "path": "rhino\\src\\org\\mozilla\\javascript\\JavaMembers.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Compile JavaScript source into one or more Java class files.\n * The first compiled class will have name mainClassName.\n * If the results of {@link #getTargetExtends()} or\n * {@link #getTargetImplements()} are not null, then the first compiled\n * class will extend the specified super class and implement\n * specified interfaces.\n *\n * @return array where elements with even indexes specifies class name\n *         and the following odd index gives class file body as byte[]\n *         array. The initial element of the array always holds\n *         mainClassName and array[1] holds its byte code.\n */\n", "func_signal": "public Object[] compileToClassFiles(String source,\n                                    String sourceLocation,\n                                    int lineno,\n                                    String mainClassName)", "code": "{\n    Parser p = new Parser(compilerEnv, compilerEnv.getErrorReporter());\n    ScriptOrFnNode tree = p.parse(source, sourceLocation, lineno);\n    String encodedSource = p.getEncodedSource();\n\n    Class<?> superClass = getTargetExtends();\n    Class<?>[] interfaces = getTargetImplements();\n    String scriptClassName;\n    boolean isPrimary = (interfaces == null && superClass == null);\n    if (isPrimary) {\n        scriptClassName = mainClassName;\n    } else {\n        scriptClassName = makeAuxiliaryClassName(mainClassName, \"1\");\n    }\n\n    Codegen codegen = new Codegen();\n    codegen.setMainMethodClass(mainMethodClassName);\n    byte[] scriptClassBytes\n        = codegen.compileToClassFile(compilerEnv, scriptClassName,\n                                     tree, encodedSource,\n                                     false);\n\n    if (isPrimary) {\n        return new Object[] { scriptClassName, scriptClassBytes };\n    }\n    int functionCount = tree.getFunctionCount();\n    ObjToIntMap functionNames = new ObjToIntMap(functionCount);\n    for (int i = 0; i != functionCount; ++i) {\n        FunctionNode ofn = tree.getFunctionNode(i);\n        String name = ofn.getFunctionName();\n        if (name != null && name.length() != 0) {\n            functionNames.put(name, ofn.getParamCount());\n        }\n    }\n    if (superClass == null) {\n        superClass = ScriptRuntime.ObjectClass;\n    }\n    byte[] mainClassBytes\n        = JavaAdapter.createAdapterCode(\n            functionNames, mainClassName,\n            superClass, interfaces, scriptClassName);\n\n    return new Object[] { mainClassName, mainClassBytes,\n                          scriptClassName, scriptClassBytes };\n}", "path": "rhino\\src\\org\\mozilla\\javascript\\optimizer\\ClassCompiler.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n *\n * @param name\n * @param start\n * @return\n */\n", "func_signal": "private XMLList getPropertyList(XMLName name)", "code": "{\n    XMLList propertyList = new XMLList(lib);\n    javax.xml.namespace.QName qname = null;\n\n    if (!name.isDescendants() && !name.isAttributeName())\n    {\n        // Only set the targetProperty if this is a regular child get\n        // and not a descendant or attribute get\n        qname = new javax.xml.namespace.QName(name.uri(), name.localName());\n    }\n\n    propertyList.setTargets(this, qname);\n\n    for (int i = 0; i < length(); i++)\n    {\n        propertyList.addToList(\n            getXmlFromAnnotation(i).getPropertyList(name));\n    }\n\n    return propertyList;\n}", "path": "rhino\\deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XMLList.java", "repo_name": "macarthy/cl", "stars": 1, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Set playlist collaboration.\n * \n * @param playlist      The {@link Playlist} to change.\n * @param collaborative Whether it should be collaborative or not.\n * \n * @return true on success or false on failure.\n * \n * @see Playlist\n */\n", "func_signal": "public boolean playlistSetCollaborative(Playlist playlist, boolean collaborative)", "code": "{\n\tString user = this.session.getUsername();\n\t\n\t/* Check if user is allowed to set playlist collaboration. */\n\tif(!playlist.getAuthor().equals(user)){\n\t\treturn false;\n\t}\n\t\n\tString xml = String.format(\n\t\t\"<change><ops><pub>%d</pub></ops>\" +\n\t\t\"<time>%d</time><user>%s</user></change>\" +\n\t\t\"<version>%010d,%010d,%010d,%d</version>\",\n\t\tcollaborative?1:0, new Date().getTime() / 1000, user,\n\t\tplaylist.getRevision() + 1, playlist.getTracks().size(),\n\t\tplaylist.getChecksum(), playlist.isCollaborative()?1:0\n\t);\n\t\n\t/* Create channel callback */\n\tChannelCallback callback = new ChannelCallback();\n\t\n\t/* Send change playlist request. */\n\ttry{\n\t\tthis.protocol.sendChangePlaylist(callback, playlist, xml);\n\t}\n\tcatch(ProtocolException e){\n\t\treturn false;\n\t}\n\t\n\t/* Get response. */\n\tbyte[] data = callback.get(this.timeout, this.unit);\n\t\n\tXMLElement playlistElement = XML.load(\n\t\t\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?><playlist>\" +\n\t\tnew String(data, Charset.forName(\"UTF-8\")) +\n\t\t\"</playlist>\"\n\t);\t\t\n\t\n\tif(playlistElement.hasChild(\"confirm\")){\n\t\t/* Split version string into parts. */\n\t\tString[] parts = playlistElement.getChild(\"confirm\").getChildText(\"version\").split(\",\", 4);\n\t\t\n\t\t/* Set values. */\n\t\tplaylist.setRevision(Long.parseLong(parts[0]));\n\t\tplaylist.setCollaborative(Integer.parseInt(parts[3]) == 1);\n\t\t\n\t\tif(playlist.getChecksum() != Long.parseLong(parts[2])){\n\t\t\tSystem.out.println(\"Checksum error!\");\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Add a track to a playlist.\n * \n * @param playlist The playlist.\n * @param track    The track to be added.\n * @param position The target position of the added track.\n * \n * @return true on success and false on failure.\n */\n", "func_signal": "public boolean playlistAddTrack(Playlist playlist, Track track, int position)", "code": "{\n\tList<Track> tracks = new ArrayList<Track>();\n\t\n\ttracks.add(track);\n\t\n\treturn this.playlistAddTracks(playlist, tracks, position);\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Login to Spotify using the specified username and password.\n * \n * @param username Username to use.\n * @param password Corresponding password.\n * \n * @throws ConnectionException\n * @throws AuthenticationException\n */\n", "func_signal": "public void login(String username, String password) throws ConnectionException, AuthenticationException", "code": "{\n\t/* Check if we're already logged in. */\n\tif(this.protocol != null){\n\t\tthrow new IllegalStateException(\"Already logged in!\");\n\t}\n\t\n\t/* Authenticate session and get protocol. */\n\tthis.protocol = this.session.authenticate(username, password);\n\t\n\t/* Create user object. */\n\tthis.user = new User(username);\n\t\n\t/* Add command handler. */\n\tthis.protocol.addListener(this);\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Search for an artist, album or track.\n * \n * @param query Your search query.\n * \n * @return A {@link Result} object.\n * \n * @see Result\n */\n", "func_signal": "public Result search(String query)", "code": "{\n\t/* Create channel callback. */\n\tChannelCallback callback = new ChannelCallback();\n\t\n\t/* Send search query. */\n\ttry{\n\t\tthis.protocol.sendSearchQuery(callback, query);\n\t}\n\tcatch(ProtocolException e){\n\t\treturn null;\n\t}\n\t\n\t/* Get data and inflate it. */\n\tbyte[] data = GZIP.inflate(callback.get(this.timeout, this.unit));\n\t\n\t/* Cut off that last 0xFF byte... */\n\tdata = Arrays.copyOfRange(data, 0, data.length - 1);\n\t\n\t/* Create result from XML. */\n\tResult result = XMLMediaParser.parseResult(data, \"UTF-8\");\n\t\n\tresult.setQuery(query);\n\t\n\treturn result;\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Browse album info by id.\n * \n * @param id An id identifying the album to browse.\n * \n * @retrun An {@link Album} object holding more information about\n *         the album or null on failure.\n * \n * @see Album\n */\n", "func_signal": "public Album browseAlbum(String id)", "code": "{\n\t/* Browse. */\n\tObject album = this.browse(BrowseType.ALBUM, id);\n\t\n\tif(album instanceof Album){\n\t\treturn (Album)album;\n\t}\n\t\n\treturn null;\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Create a playlist.\n * \n * @param name          The name of the playlist to create.\n * @param collaborative If the playlist shall be collaborative.\n * \n * @return A {@link Playlist} object or null on failure.\n * \n * @see Playlist\n */\n", "func_signal": "public Playlist playlistCreate(String name, boolean collaborative)", "code": "{\n\tString   id       = Hex.toHex(RandomBytes.randomBytes(16));\n\tString   user     = this.session.getUsername();\n\tPlaylist playlist = new Playlist(id, name, user, collaborative);\n\t\n\tString xml = String.format(\n\t\t\"<id-is-unique/><change><ops><create/><name>%s</name></ops>\" +\n\t\t\"<time>%d</time><user>%s</user></change>\" +\n\t\t\"<version>0000000001,0000000000,0000000001,%d</version>\",\n\t\tplaylist.getName(), new Date().getTime() / 1000,\n\t\tplaylist.getAuthor(), playlist.isCollaborative()?1:0\n\t);\n\t\n\t/* Create channel callback */\n\tChannelCallback callback = new ChannelCallback();\n\t\n\t/* Send change playlist request. */\n\ttry{\n\t\tthis.protocol.sendCreatePlaylist(callback, playlist, xml);\n\t}\n\tcatch(ProtocolException e){\n\t\treturn null;\n\t}\n\t\n\t/* Get response. */\n\tbyte[] data = callback.get(this.timeout, this.unit);\n\t\n\tXMLElement playlistElement = XML.load(\n\t\t\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?><playlist>\" +\n\t\tnew String(data, Charset.forName(\"UTF-8\")) +\n\t\t\"</playlist>\"\n\t);\t\t\n\t\n\t/* Check for success. */\n\tif(playlistElement.hasChild(\"confirm\")){\n\t\t/* Split version string into parts. */\n\t\tString[] parts = playlistElement.getChild(\"confirm\").getChildText(\"version\").split(\",\", 4);\n\t\t\n\t\t/* Set values. */\n\t\tplaylist.setRevision(Long.parseLong(parts[0]));\n\t\tplaylist.setCollaborative(Integer.parseInt(parts[3]) == 1);\n\t\t\n\t\tif(playlist.getChecksum() != Long.parseLong(parts[2])){\n\t\t\tSystem.out.println(\"Checksum error!\");\n\t\t}\n\t\t\n\t\treturn playlist;\n\t}\n\t\n\treturn null;\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Stop playback of current track.\n */\n", "func_signal": "public void stop()", "code": "{\n\tif(this.player != null){\n\t\tthis.player.stop();\n\t\t\n\t\tthis.player = null;\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Browse information for multiple tracks.\n * \n * @param tracks A {@link List} of {@link Track} objects identifying\n *               the tracks to browse.\n * \n * @retrun A {@link Result} object holding more information about\n *         the tracks or null on failure.\n * \n * @see Track\n * @see Result\n */\n", "func_signal": "public Result browse(List<Track> tracks)", "code": "{\n\t/* Create id list. */\n\tList<String> ids = new ArrayList<String>();\n\t\t\n\tfor(Track track : tracks){\n\t\tids.add(track.getId());\n\t}\n\t\n\treturn this.browseTracks(ids);\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Add multiple tracks to a playlist.\n * \n * @param playlist The playlist.\n * @param tracks   A {@link List} of tracks to be added.\n * @param position The target position of the added track.\n * \n * @return true on success and false on failure.\n */\n", "func_signal": "public boolean playlistAddTracks(Playlist playlist, List<Track> tracks, int position)", "code": "{\n\tString user = this.session.getUsername();\n\t\n\t/* Check if user is allowed to edit playlist. */\n\tif(!playlist.isCollaborative() && !playlist.getAuthor().equals(user)){\n\t\treturn false;\n\t}\n\t\n\t/* First add the tracks to calculate the new checksum. */\n\tplaylist.getTracks().addAll(position, tracks);\n\t\n\t/* Build a comma separated list of tracks and append '01' to every id!. */\n\tString trackList = \"\";\n\t\n\tfor(int i = 0; i < tracks.size(); i++){\n\t\ttrackList += ((i > 0)?\",\":\"\") + tracks.get(i).getId() + \"01\";\n\t}\n\t\n\tString xml = String.format(\n\t\t\"<change><ops><add><i>%d</i><items>%s</items></add></ops>\" +\n\t\t\"<time>%d</time><user>%s</user></change>\" +\n\t\t\"<version>%010d,%010d,%010d,%d</version>\",\n\t\tposition, trackList, new Date().getTime() / 1000, user,\n\t\tplaylist.getRevision() + 1, playlist.getTracks().size(),\n\t\tplaylist.getChecksum(), playlist.isCollaborative()?1:0\n\t);\n\t\n\t/* Remove the tracks again, because we need the old checksum for sending. */\n\tfor(int i = 0; i < tracks.size(); i++){\n\t\tplaylist.getTracks().remove(position);\n\t}\n\t\n\t/* Create channel callback */\n\tChannelCallback callback = new ChannelCallback();\n\t\n\t/* Send change playlist request. */\n\ttry{\n\t\tthis.protocol.sendChangePlaylist(callback, playlist, xml);\n\t}\n\tcatch(ProtocolException e){\n\t\treturn false;\n\t}\n\t\n\t/* Get response. */\n\tbyte[] data = callback.get(this.timeout, this.unit);\n\t\n\tXMLElement playlistElement = XML.load(\n\t\t\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?><playlist>\" +\n\t\tnew String(data, Charset.forName(\"UTF-8\")) +\n\t\t\"</playlist>\"\n\t);\n\t\n\t/* Check for success. */\n\tif(playlistElement.hasChild(\"confirm\")){\n\t\t/* Split version string into parts. */\n\t\tString[] parts = playlistElement.getChild(\"confirm\").getChildText(\"version\").split(\",\", 4);\n\t\t\n\t\t/* Set values. */\n\t\tplaylist.setRevision(Long.parseLong(parts[0]));\n\t\tplaylist.setCollaborative(Integer.parseInt(parts[3]) == 1);\n\t\t\n\t\t/* Add the tracks, since operation was successful. */\n\t\tplaylist.getTracks().addAll(position, tracks);\n\t\t\n\t\tif(playlist.getChecksum() != Long.parseLong(parts[2])){\n\t\t\tSystem.out.println(\"Checksum error!\");\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Remove multiple tracks from a playlist.\n * \n * @param playlist The playlist.\n * @param position The position of the tracks to remove.\n * @param count    The number of track to remove.\n * \n * @return true on success and false on failure.\n */\n", "func_signal": "public boolean playlistRemoveTracks(Playlist playlist, int position, int count)", "code": "{\n\tString user = this.session.getUsername();\n\t\n\t/* Check if user is allowed to edit playlist. */\n\tif(!playlist.isCollaborative() && !playlist.getAuthor().equals(user)){\n\t\treturn false;\n\t}\n\t\n\t/* Create a sublist view (important!) and clone it by constructing a new ArrayList. */\n\tList<Track> tracks = new ArrayList<Track>(\n\t\tplaylist.getTracks().subList(position, position + count)\n\t);\n\t\n\t/* First remove the track(s) to calculate the new checksum. This needs to be done in single steps! */\n\tfor(int i = 0; i < tracks.size(); i++){\n\t\tplaylist.getTracks().remove(position);\n\t}\n\t\n\tString xml = String.format(\n\t\t\"<change><ops><del><i>%d</i><k>%d</k></del></ops>\" +\n\t\t\"<time>%d</time><user>%s</user></change>\" +\n\t\t\"<version>%010d,%010d,%010d,%d</version>\",\n\t\tposition, count, new Date().getTime() / 1000, user,\n\t\tplaylist.getRevision() + 1, playlist.getTracks().size(),\n\t\tplaylist.getChecksum(), playlist.isCollaborative()?1:0\n\t);\n\t\n\t/* Add the track(s) again, because we need the old checksum for sending. */\n\tplaylist.getTracks().addAll(position, tracks);\n\t\n\t/* Create channel callback */\n\tChannelCallback callback = new ChannelCallback();\n\t\n\t/* Send change playlist request. */\n\ttry{\n\t\tthis.protocol.sendChangePlaylist(callback, playlist, xml);\n\t}\n\tcatch(ProtocolException e){\n\t\treturn false;\n\t}\n\t\n\t/* Get response. */\n\tbyte[] data = callback.get(this.timeout, this.unit);\n\t\n\tXMLElement playlistElement = XML.load(\n\t\t\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?><playlist>\" +\n\t\tnew String(data, Charset.forName(\"UTF-8\")) +\n\t\t\"</playlist>\"\n\t);\n\t\n\t/* Check for success. */\n\tif(playlistElement.hasChild(\"confirm\")){\n\t\t/* Split version string into parts. */\n\t\tString[] parts = playlistElement.getChild(\"confirm\").getChildText(\"version\").split(\",\", 4);\n\t\t\n\t\t/* Set values. */\n\t\tplaylist.setRevision(Long.parseLong(parts[0]));\n\t\tplaylist.setCollaborative(Integer.parseInt(parts[3]) == 1);\n\t\t\n\t\t/* Remove the track(s), since operation was successful. */\n\t\tfor(int i = 0; i < tracks.size(); i++){\n\t\t\tplaylist.getTracks().remove(position);\n\t\t}\n\t\t\n\t\tif(playlist.getChecksum() != Long.parseLong(parts[2])){\n\t\t\tSystem.out.println(\"Checksum error!\");\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n *  Closes the connection to a Spotify server.\n *  \n *  @throws ConnectionException\n */\n", "func_signal": "public void close() throws ConnectionException", "code": "{\n\t/* This will make receivePacket return immediately. */\n\tif(this.protocol != null){\n\t\tthis.protocol.disconnect();\n\t}\n\t\n\t/* Reset protocol to 'null'. */\n\tthis.protocol = null;\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Pause playback of current track.\n */\n", "func_signal": "public void pause()", "code": "{\n\tif(this.player != null){\n\t\tthis.player.pause();\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Play a track in a background thread.\n * \n * @param track    A {@link Track} object identifying the track to be played.\n * @param listener A {@link PlaybackListener} receiving playback status updates.\n */\n", "func_signal": "public void play(Track track, PlaybackListener listener)", "code": "{\n\t/* Create channel callbacks. */\n\tChannelCallback       callback       = new ChannelCallback();\n\tChannelHeaderCallback headerCallback = new ChannelHeaderCallback();\n\t\n\t/* Send play request (token notify + AES key). */\n\ttry{\n\t\tthis.protocol.sendPlayRequest(callback, track);\n\t}\n\tcatch(ProtocolException e){\n\t\treturn;\n\t}\n\t\n\t/* Get AES key. */\n\tbyte[] key = callback.get(this.timeout, this.unit);\n\t\n\t/* Send header request to check for HTTP stream. */\n\ttry{\n\t\tthis.protocol.sendSubstreamRequest(headerCallback, track, 0, 0);\n\t}\n\tcatch(ProtocolException e){\n\t\treturn;\n\t}\n\t\n\t/* Get list of HTTP stream URLs. */\n\tList<String> urls = headerCallback.get(this.timeout, this.unit);\n\t\n\t/* If we got 4 HTTP stream URLs use them, otherwise use default channel streaming. */\n\tif(urls.size() == 4){\n\t\tthis.player = new HTTPStreamPlayer(urls, track, key, listener);\n\t\tthis.player.volume(this.volume);\n\t}\n\telse{\n\t\tthis.player = new ChannelPlayer(this.protocol, track, key, listener);\n\t\tthis.player.volume(this.volume);\n\t}\n\t\n\t/* Start playing. */\n\tthis.play();\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Browse artist info by id.\n * \n * @param id An id identifying the artist to browse.\n * \n * @retrun An {@link Artist} object holding more information about\n *         the artist or null on failure.\n * \n * @see Artist\n */\n", "func_signal": "public Artist browseArtist(String id)", "code": "{\n\t/* Browse. */\n\tObject artist = this.browse(BrowseType.ARTIST, id);\n\t\n\tif(artist instanceof Artist){\n\t\treturn (Artist)artist;\n\t}\n\t\n\treturn null;\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Get length of current track.\n * \n * @return Length in seconds or -1 if not available.\n */\n", "func_signal": "public int length()", "code": "{\n\tif(this.player != null){\n\t\treturn this.player.length();\n\t}\n\t\n\treturn -1;\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Get volume.\n * \n * @return A value from 0.0 to 1.0.\n */\n", "func_signal": "public float volume()", "code": "{\n\tif(this.player != null){\n\t\treturn this.player.volume();\n\t}\n\t\n\treturn -1;\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Handles incoming commands from the server.\n * \n * @param command A command.\n * @param payload Payload of packet.\n */\n", "func_signal": "public void commandReceived(int command, byte[] payload)", "code": "{\n\t//System.out.format(\"< Command: 0x%02x Length: %d\\n\", command, payload.length);\n\t\n\tswitch(command){\n\t\tcase Command.COMMAND_SECRETBLK: {\n\t\t\t/* Check length. */\n\t\t\tif(payload.length != 336){\n\t\t\t\tSystem.err.format(\"Got command 0x02 with len %d, expected 336!\\n\", payload.length);\n\t\t\t}\n\t\t\t\n\t\t\t/* Check RSA public key. */\n\t\t\tbyte[] rsaPublicKey = RSA.keyToBytes(this.session.getRSAPublicKey());\n\t\t\t\n\t\t\tfor(int i = 0; i < 128; i++){\n\t\t\t\tif(payload[16 + i] != rsaPublicKey[i]){\n\t\t\t\t\tSystem.err.format(\"RSA public key doesn't match! %d\\n\", i);\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/* Send cache hash. */\n\t\t\ttry{\n\t\t\t\tthis.protocol.sendCacheHash();\n\t\t\t}\n\t\t\tcatch(ProtocolException e){\n\t\t\t\t/* Just don't care. */\n\t\t\t}\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t\tcase Command.COMMAND_PING: {\n\t\t\t/* Ignore the timestamp but respond to the request. */\n\t\t\t/* int timestamp = IntegerUtilities.bytesToInteger(payload); */\n\t\t\ttry{\n\t\t\t\tthis.protocol.sendPong();\n\t\t\t}\n\t\t\tcatch(ProtocolException e){\n\t\t\t\t/* Just don't care. */\n\t\t\t}\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t\tcase Command.COMMAND_CHANNELDATA: {\n\t\t\tChannel.process(payload);\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t\tcase Command.COMMAND_CHANNELERR: {\n\t\t\tChannel.error(payload);\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t\tcase Command.COMMAND_AESKEY: {\n\t\t\t/* Channel id is at offset 2. AES Key is at offset 4. */\n\t\t\tChannel.process(Arrays.copyOfRange(payload, 2, payload.length));\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t\tcase Command.COMMAND_SHAHASH: {\n\t\t\t/* Do nothing. */\n\t\t\tbreak;\n\t\t}\n\t\tcase Command.COMMAND_COUNTRYCODE: {\n\t\t\t//System.out.println(\"Country: \" + new String(payload, Charset.forName(\"UTF-8\")));\n\t\t\tthis.user.setCountry(new String(payload, Charset.forName(\"UTF-8\")));\n\t\t\t\n\t\t\t/* Release 'country' permit. */\n\t\t\tthis.userSemaphore.release();\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t\tcase Command.COMMAND_P2P_INITBLK: {\n\t\t\t/* Do nothing. */\n\t\t\tbreak;\n\t\t}\n\t\tcase Command.COMMAND_NOTIFY: {\n\t\t\t/* HTML-notification, shown in a yellow bar in the official client. */\n\t\t\t/* Skip 11 byte header... */\n\t\t\t/*System.out.println(\"Notification: \" + new String(\n\t\t\t\tArrays.copyOfRange(payload, 11, payload.length), Charset.forName(\"UTF-8\")\n\t\t\t));*/\n\t\t\tthis.user.setNotification(new String(\n\t\t\t\tArrays.copyOfRange(payload, 11, payload.length), Charset.forName(\"UTF-8\")\n\t\t\t));\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t\tcase Command.COMMAND_PRODINFO: {\n\t\t\tXMLElement prodinfoElement = XML.load(new String(payload, Charset.forName(\"UTF-8\")));\n\t\t\t\n\t\t\tthis.user = User.fromXMLElement(prodinfoElement, this.user);\n\t\t\t\n\t\t\t/* Release 'prodinfo' permit. */\n\t\t\tthis.userSemaphore.release();\n\t\t\t\n\t\t\t/* Payload is uncompressed XML. */\n\t\t\tif(!this.user.isPremium()){\n\t\t\t\tSystem.err.println(\n\t\t\t\t\t\"Sorry, you need a premium account to use jotify (this is a restriction by Spotify).\"\n\t\t\t\t);\n\t\t\t\t\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t\tcase Command.COMMAND_WELCOME: {\n\t\t\t/* Request ads. */\n\t\t\t//this.protocol.sendAdRequest(new ChannelAdapter(), 0);\n\t\t\t//this.protocol.sendAdRequest(new ChannelAdapter(), 1);\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t\tcase Command.COMMAND_PAUSE: {\n\t\t\t/* TODO: Show notification and pause. */\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Start playing or resume current track.\n */\n", "func_signal": "public void play()", "code": "{\n\tif(this.player != null){\n\t\tthis.player.play();\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Get a playlist.\n * \n * @param id       Id of the playlist to load.\n * @param useCache Whether to use a cached version if available or not.\n * \n * @return A {@link Playlist} object or null on failure.\n * \n * @see Playlist\n */\n", "func_signal": "public Playlist playlist(String id, boolean useCache)", "code": "{\n\t/* Data buffer. */\n\tbyte[] data;\n\t\n\tif(useCache && this.cache != null && this.cache.contains(\"playlist\", id)){\n\t\tdata = this.cache.load(\"playlist\", id);\n\t}\n\telse{\n\t\t/* Create channel callback */\n\t\tChannelCallback callback = new ChannelCallback();\n\t\t\n\t\t/* Send playlist request. */\n\t\ttry{\n\t\t\tthis.protocol.sendPlaylistRequest(callback, id);\n\t\t}\n\t\tcatch(ProtocolException e){\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t/* Get data and inflate it. */\n\t\tdata = callback.get(this.timeout, this.unit);\n\t\t\n\t\t/* Save data to cache. */\n\t\tif(this.cache != null){\n\t\t\tthis.cache.store(\"playlist\", id, data);\n\t\t}\n\t}\n\t\n\t/* Load XML. */\n\tXMLElement playlistElement = XML.load(\n\t\t\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?><playlist>\" +\n\t\tnew String(data, Charset.forName(\"UTF-8\")) +\n\t\t\"</playlist>\"\n\t);\n\t\n\t/* Create and return playlist. */\n\treturn Playlist.fromXMLElement(playlistElement, id);\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Fetch a toplist.\n * \n * @param type     A toplist type. e.g. \"artist\", \"album\" or \"track\".\n * @param region   A region code or null. e.g. \"SE\" or \"DE\".\n * @param username A username or null.\n * \n * @return A {@link Result} object.\n * \n * @see Result\n */\n", "func_signal": "public Result toplist(String type, String region, String username)", "code": "{\n\t/* Create channel callback and parameter map. */\n\tChannelCallback callback   = new ChannelCallback();\n\tMap<String, String> params = new HashMap<String, String>();\n\t\n\t/* Add parameters. */\n\tparams.put(\"type\", type);\n\tparams.put(\"region\", region);\n\tparams.put(\"username\", username);\n\t\n\t/* Send toplist request. */\n\ttry{\n\t\tthis.protocol.sendToplistRequest(callback, params);\n\t}\n\tcatch(ProtocolException e){\n\t\treturn null;\n\t}\n\t\n\t/* Get data and inflate it. */\n\tbyte[] data = GZIP.inflate(callback.get(this.timeout, this.unit));\n\t\n\t/* Cut off that last 0xFF byte... */\n\tdata = Arrays.copyOfRange(data, 0, data.length - 1);\n\t\n\t/* Create result from XML. */\n\treturn XMLMediaParser.parseResult(data, \"UTF-8\");\n}", "path": "src\\de\\felixbruns\\jotify\\JotifyConnection.java", "repo_name": "luukdehaas/jotify", "stars": 1, "license": "other", "language": "java", "size": 514}
{"docstring": "/**\n * Restores the activity state from the specified icicle.\n * @see onCreate()\n * @see onSaveInstanceState()\n */\n", "func_signal": "private void restoreStateFromIcicle(Bundle icicle)", "code": "{\n    Log.i(TAG, \"restoreStateFromIcicle()...\");\n\n    // State of the Activity:\n\n    Uri photoUri = icicle.getParcelable(PHOTO_URI_KEY);\n    Log.i(TAG, \"  - photoUri: \" + photoUri);\n    if (photoUri != null) {\n        loadPhoto(photoUri);\n    }\n\n    mSavedImageFilename = icicle.getString(SAVED_IMAGE_FILENAME_KEY);\n    mSavedImageUri = icicle.getParcelable(SAVED_IMAGE_URI_KEY);\n\n    // State of the LolcatView:\n\n    String topCaption = icicle.getString(TOP_CAPTION_KEY);\n    String bottomCaption = icicle.getString(BOTTOM_CAPTION_KEY);\n    int[] captionPositions = icicle.getIntArray(CAPTION_POSITIONS_KEY);\n    Log.i(TAG, \"  - captions: '\" + topCaption + \"', '\" + bottomCaption + \"'\");\n    if (!TextUtils.isEmpty(topCaption) || !TextUtils.isEmpty(bottomCaption)) {\n        mLolcatView.setCaptions(topCaption, bottomCaption);\n        mLolcatView.setCaptionPositions(captionPositions);\n    }\n}", "path": "examples\\more-apps\\LolcatBuilder\\src\\com\\android\\lolcat\\LolcatActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * Called when a connection to the MediaScanner service has been established.\n */\n", "func_signal": "public void onMediaScannerConnected()", "code": "{\n    Log.i(TAG, \"MediaScannerConnectionClient.onMediaScannerConnected...\");\n    // The next step happens in the UI thread:\n    mHandler.post(new Runnable() {\n            public void run() {\n                LolcatActivity.this.onMediaScannerConnected();\n            }\n        });\n}", "path": "examples\\more-apps\\LolcatBuilder\\src\\com\\android\\lolcat\\LolcatActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * This method is called when our MediaScannerConnection successfully\n * connects to the MediaScanner service.  At that point we fire off a\n * request to scan the lolcat image we just saved.\n *\n * This needs to run in the UI thread, so it's called from\n * mMediaScanConnClient's onMediaScannerConnected() method via our Handler.\n */\n", "func_signal": "private void onMediaScannerConnected()", "code": "{\n    Log.i(TAG, \"onMediaScannerConnected()...\");\n\n    // Update the message in the progress dialog...\n    mSaveProgressDialog.setMessage(getResources().getString(R.string.lolcat_scanning));\n\n    // Fire off a request to the MediaScanner service to scan this\n    // file; we'll get notified when the scan completes.\n    Log.i(TAG, \"- Requesting scan for file: \" + mSavedImageFilename);\n    mMediaScannerConnection.scanFile(mSavedImageFilename,\n                                     null /* mimeType */);\n\n    // Next step: mMediaScanConnClient will get an onScanCompleted() callback,\n    // which calls our own onScanCompleted() method via our Handler.\n}", "path": "examples\\more-apps\\LolcatBuilder\\src\\com\\android\\lolcat\\LolcatActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * Goes to the Pictures app for the specified URI.\n */\n", "func_signal": "private void viewSavedImage(Uri uri)", "code": "{\n    Log.i(TAG, \"viewSavedImage(\" + uri + \")...\");\n\n    if (uri == null) {\n        Log.w(TAG, \"viewSavedImage: null uri!\");\n        return;\n    }\n\n    Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n    Log.i(TAG, \"- running startActivity...  Intent = \" + intent);\n    startActivity(intent);\n}", "path": "examples\\more-apps\\LolcatBuilder\\src\\com\\android\\lolcat\\LolcatActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * Show the wiki note in the text edit view with both the default Linkify\n * options and the regular expression for WikiWords matched and turned\n * into live links.\n * \n * @param body\n *            The plain text to linkify and put into the edit view.\n */\n", "func_signal": "private void showWikiNote(CharSequence body)", "code": "{\n\tTextView noteView = mNoteView;\n\tnoteView.setText(body);\n\n\t// Add default links first - phone numbers, URLs, etc.\n\tLinkify.addLinks(noteView, Linkify.ALL);\n\n\t// Now add in the custom linkify match for WikiWords\n\tLinkify.addLinks(noteView, WIKI_WORD_MATCHER,\n\t\t\t WikiNote.Notes.ALL_NOTES_URI.toString() + \"/\");\n}", "path": "spec\\javaclass\\examples\\WikiNotes.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\tTextView tv = new TextView(this);\n\ttv.setText(\"just testing\");\n\tTextView tv2 = new TextView(this);\n\ttv2.setText(\"just testing some more\");\n\t//tv.setText(\"Hello from Android, without using Eclipse!\");\n    setContentView(R.layout.main);\n}", "path": "examples\\andrake\\HelloAndroid\\HelloAndroid.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * Kicks off the process of saving the LolcatView's working Bitmap to\n * the SD card, in preparation for viewing it later and/or sharing it.\n */\n", "func_signal": "private void saveImage()", "code": "{\n    Log.i(TAG, \"saveImage()...\");\n\n    // First of all, bring up a progress dialog.\n    showDialog(DIALOG_SAVE_PROGRESS);\n\n    // We now need to save the bitmap to the SD card, and then ask the\n    // MediaScanner to scan it.  Do the actual work of all this in a\n    // helper thread, since it's fairly slow (and will occasionally\n    // ANR if we do it here in the UI thread.)\n\n    Thread t = new Thread() {\n            public void run() {\n                Log.i(TAG, \"Running worker thread...\");\n                saveImageInternal();\n            }\n        };\n    t.start();\n    // Next steps:\n    // - saveImageInternal()\n    // - onMediaScannerConnected()\n    // - onScanCompleted\n}", "path": "examples\\more-apps\\LolcatBuilder\\src\\com\\android\\lolcat\\LolcatActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * Loads the image with the specified Uri into the UI.\n */\n", "func_signal": "private void loadPhoto(Uri uri)", "code": "{\n    Log.i(TAG, \"loadPhoto: uri = \" + uri);\n\n    clearPhoto();  // Be sure to release the previous bitmap\n                   // before creating another one\n    mPhotoUri = uri;\n\n    // A new photo always starts out uncaptioned.\n    clearCaptions();\n\n    // Load the selected photo into our ImageView.\n    mLolcatView.loadFromUri(mPhotoUri);\n}", "path": "examples\\more-apps\\LolcatBuilder\\src\\com\\android\\lolcat\\LolcatActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * Generates a phone number shortcut icon. Adds an overlay describing the type of the phone\n * number, and if there is a photo also adds the call action icon.\n *\n * @param personUri The person the phone number belongs to\n * @param type The type of the phone number\n * @param actionResId The ID for the action resource\n * @return The bitmap for the icon\n */\n", "func_signal": "private Bitmap generatePhoneNumberIcon(Uri personUri, int type, int actionResId)", "code": "{\n    final Resources r = getResources();\n    boolean drawPhoneOverlay = true;\n\n    Bitmap photo = People.loadContactPhoto(this, personUri, 0, null);\n    if (photo == null) {\n        // If there isn't a photo use the generic phone action icon instead\n        Bitmap phoneIcon = getPhoneActionIcon(r, actionResId);\n        if (phoneIcon != null) {\n            photo = phoneIcon;\n            drawPhoneOverlay = false;\n        } else {\n            return null;\n        }\n    }\n\n    // Setup the drawing classes\n    int iconSize = (int) r.getDimension(android.R.dimen.app_icon_size);\n    Bitmap icon = Bitmap.createBitmap(iconSize, iconSize, Bitmap.Config.ARGB_8888);\n    Canvas canvas = new Canvas(icon);\n\n    // Copy in the photo\n    Paint photoPaint = new Paint();\n    photoPaint.setDither(true);\n    photoPaint.setFilterBitmap(true);\n    Rect src = new Rect(0,0, photo.getWidth(),photo.getHeight());\n    Rect dst = new Rect(0,0, iconSize,iconSize);\n    canvas.drawBitmap(photo, src, dst, photoPaint);\n\n    // Create an overlay for the phone number type\n    String overlay = null;\n    switch (type) {\n        case Phones.TYPE_HOME:\n            overlay = \"H\";\n            break;\n\n        case Phones.TYPE_MOBILE:\n            overlay = \"M\";\n            break;\n\n        case Phones.TYPE_WORK:\n            overlay = \"W\";\n            break;\n\n        case Phones.TYPE_PAGER:\n            overlay = \"P\";\n            break;\n\n        case Phones.TYPE_OTHER:\n            overlay = \"O\";\n            break;\n    }\n    if (overlay != null) {\n        Paint textPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DEV_KERN_TEXT_FLAG);\n        textPaint.setTextSize(20.0f);\n        textPaint.setTypeface(Typeface.DEFAULT_BOLD);\n        textPaint.setColor(r.getColor(R.color.textColorIconOverlay));\n        textPaint.setShadowLayer(3f, 1, 1, r.getColor(R.color.textColorIconOverlayShadow));\n        canvas.drawText(overlay, 2, 16, textPaint);\n    }\n\n    // Draw the phone action icon as an overlay\n    if (ENABLE_ACTION_ICON_OVERLAYS && drawPhoneOverlay) {\n        Bitmap phoneIcon = getPhoneActionIcon(r, actionResId);\n        if (phoneIcon != null) {\n            src.set(0,0, phoneIcon.getWidth(),phoneIcon.getHeight());\n            int iconWidth = icon.getWidth();\n            dst.set(iconWidth - 20, -1, iconWidth, 19);\n            canvas.drawBitmap(phoneIcon, src, dst, photoPaint);\n        }\n    }\n\n    return icon;\n}", "path": "examples\\more-apps\\AnyCut\\src\\com\\example\\anycut\\CreateShortcutActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "// View.OnClickListener implementation\n", "func_signal": "public void onClick(View view)", "code": "{\n    int id = view.getId();\n    Log.i(TAG, \"onClick(View \" + view + \", id \" + id + \")...\");\n\n    switch (id) {\n        case R.id.pick_button:\n            Log.i(TAG, \"onClick: pick_button...\");\n            Intent intent = new Intent(Intent.ACTION_GET_CONTENT, null);\n            intent.setType(\"image/*\");\n\n            // Note: we could have the \"crop\" UI come up here by\n            // default by doing this:\n            //   intent.putExtra(\"crop\", \"true\");\n            // (But watch out: if you do that, the Intent that comes\n            // back to onActivityResult() will have the URI (of the\n            // cropped image) in the \"action\" field, not the \"data\"\n            // field!)\n\n            startActivityForResult(intent, PHOTO_PICKED);\n            break;\n\n        case R.id.caption_button:\n            Log.i(TAG, \"onClick: caption_button...\");\n            showCaptionDialog();\n            break;\n\n        case R.id.save_button:\n            Log.i(TAG, \"onClick: save_button...\");\n            saveImage();\n            break;\n\n        case R.id.clear_caption_button:\n            Log.i(TAG, \"onClick: clear_caption_button...\");\n            clearCaptions();\n            updateButtons();\n            break;\n\n        case R.id.clear_photo_button:\n            Log.i(TAG, \"onClick: clear_photo_button...\");\n            clearPhoto();  // Also does clearCaptions()\n            updateButtons();\n            break;\n\n        default:\n            Log.w(TAG, \"Click from unexpected source: \" + view + \", id \" + id);\n            break;\n    }\n}", "path": "examples\\more-apps\\LolcatBuilder\\src\\com\\android\\lolcat\\LolcatActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * Ensure that the specified file exists on the SD card, creating it\n * if necessary.\n *\n * Copied from MediaProvider / MusicUtils.\n *\n * @return true if the file already exists, or we\n *         successfully created it.\n */\n", "func_signal": "private static boolean ensureFileExists(String path)", "code": "{\n    File file = new File(path);\n    if (file.exists()) {\n        return true;\n    } else {\n        // we will not attempt to create the first directory in the path\n        // (for example, do not create /sdcard if the SD card is not mounted)\n        int secondSlash = path.indexOf('/', 1);\n        if (secondSlash < 1) return false;\n        String directoryPath = path.substring(0, secondSlash);\n        File directory = new File(directoryPath);\n        if (!directory.exists())\n            return false;\n        file.getParentFile().mkdirs();\n        try {\n            return file.createNewFile();\n        } catch (IOException ioe) {\n            Log.w(TAG, \"File creation failed\", ioe);\n        }\n        return false;\n    }\n}", "path": "examples\\more-apps\\LolcatBuilder\\src\\com\\android\\lolcat\\LolcatActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * Called when the media scanner has finished scanning a file.\n * @param path the path to the file that has been scanned.\n * @param uri the Uri for the file if the scanning operation succeeded\n *        and the file was added to the media database, or null if scanning failed.\n */\n", "func_signal": "public void onScanCompleted(final String path, final Uri uri)", "code": "{\n    Log.i(TAG, \"MediaScannerConnectionClient.onScanCompleted: path \"\n          + path + \", uri \" + uri);\n    // Just run the \"real\" onScanCompleted() method in the UI thread:\n    mHandler.post(new Runnable() {\n            public void run() {\n                LolcatActivity.this.onScanCompleted(path, uri);\n            }\n        });\n}", "path": "examples\\more-apps\\LolcatBuilder\\src\\com\\android\\lolcat\\LolcatActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * Returns the icon for the phone call action.\n *\n * @param r The resources to load the icon from\n * @param resId The resource ID to load\n * @return the icon for the phone call action\n */\n", "func_signal": "private Bitmap getPhoneActionIcon(Resources r, int resId)", "code": "{\n    Drawable phoneIcon = r.getDrawable(resId);\n    if (phoneIcon instanceof BitmapDrawable) {\n        BitmapDrawable bd = (BitmapDrawable) phoneIcon;\n        return bd.getBitmap();\n    } else {\n        return null;\n    }\n}", "path": "examples\\more-apps\\AnyCut\\src\\com\\example\\anycut\\CreateShortcutActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * Updates the UI after the media scanner finishes the scanFile()\n * request we issued from onMediaScannerConnected().\n *\n * This needs to run in the UI thread, so it's called from\n * mMediaScanConnClient's onScanCompleted() method via our Handler.\n */\n", "func_signal": "private void onScanCompleted(String path, final Uri uri)", "code": "{\n    Log.i(TAG, \"onScanCompleted: path \" + path + \", uri \" + uri);\n    mMediaScannerConnection.disconnect();\n\n    if (uri == null) {\n        Log.w(TAG, \"onScanCompleted: scan failed.\");\n        mSavedImageUri = null;\n        onSaveFailed(R.string.lolcat_scan_failed);\n        return;\n    }\n\n    // Success!\n\n    dismissDialog(DIALOG_SAVE_PROGRESS);\n\n    // We can now access the saved lolcat image using the specified Uri.\n    mSavedImageUri = uri;\n\n    // Bring up a success dialog, giving the user the option to go to\n    // the pictures app (so you can share the image).\n    showSaveSuccessDialog();\n}", "path": "examples\\more-apps\\LolcatBuilder\\src\\com\\android\\lolcat\\LolcatActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * Saves the LolcatView's working Bitmap to the SD card, in\n * preparation for viewing it later and/or sharing it.\n *\n * The bitmap will be saved as a new file in the directory\n * LOLCAT_SAVE_DIRECTORY, with an automatically-generated filename\n * based on the current time.  It also connects to the\n * MediaScanner service, since we'll need to scan that new file (in\n * order to get a Uri we can then VIEW or share.)\n *\n * This method is run in a worker thread; @see saveImage().\n */\n", "func_signal": "private void saveImageInternal()", "code": "{\n    Log.i(TAG, \"saveImageInternal()...\");\n\n    // TODO: Currently we save the bitmap to a file on the sdcard,\n    // then ask the MediaScanner to scan it (which gives us a Uri we\n    // can then do an ACTION_VIEW on.)  But rather than doing these\n    // separate steps, maybe there's some easy way (given an\n    // OutputStream) to directly talk to the MediaProvider\n    // (i.e. com.android.provider.MediaStore) and say \"here's an\n    // image, please save it somwhere and return the URI to me\"...\n\n    // Save the bitmap to a file on the sdcard.\n    // (Based on similar code in MusicUtils.java.)\n    // TODO: Make this filename more human-readable?  Maybe \"Lolcat-YYYY-MM-DD-HHMMSS.png\"?\n    String filename = Environment.getExternalStorageDirectory()\n            + \"/\" + LOLCAT_SAVE_DIRECTORY\n            + String.valueOf(System.currentTimeMillis() + SAVED_IMAGE_EXTENSION);\n    Log.i(TAG, \"- filename: '\" + filename + \"'\");\n\n    if (ensureFileExists(filename)) {\n        try {\n            OutputStream outstream = new FileOutputStream(filename);\n            Bitmap bitmap = mLolcatView.getWorkingBitmap();\n            boolean success = bitmap.compress(SAVED_IMAGE_COMPRESS_FORMAT,\n                                              100, outstream);\n            Log.i(TAG, \"- success code from Bitmap.compress: \" + success);\n            outstream.close();\n\n            if (success) {\n                Log.i(TAG, \"- Saved!  filename = \" + filename);\n                mSavedImageFilename = filename;\n\n                // Ok, now we need to get the MediaScanner to scan the\n                // file we just wrote.  Step 1 is to get our\n                // MediaScannerConnection object to connect to the\n                // MediaScanner service.\n                mMediaScannerConnection.connect();\n                // See onMediaScannerConnected() for the next step\n            } else {\n                Log.w(TAG, \"Bitmap.compress failed: bitmap \" + bitmap\n                      + \", filename '\" + filename + \"'\");\n                onSaveFailed(R.string.lolcat_save_failed);\n            }\n        } catch (FileNotFoundException e) {\n            Log.w(TAG, \"error creating file\", e);\n            onSaveFailed(R.string.lolcat_save_failed);\n        } catch (IOException e) {\n            Log.w(TAG, \"error creating file\", e);\n            onSaveFailed(R.string.lolcat_save_failed);\n        }\n    } else {\n        Log.w(TAG, \"ensureFileExists failed for filename '\" + filename + \"'\");\n        onSaveFailed(R.string.lolcat_save_failed);\n    }\n}", "path": "examples\\more-apps\\LolcatBuilder\\src\\com\\android\\lolcat\\LolcatActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * Completely resets the UI to its initial state, with no photo\n * loaded, and no captions.\n */\n", "func_signal": "private void clearPhoto()", "code": "{\n    mLolcatView.clear();\n\n    mPhotoUri = null;\n    mSavedImageFilename = null;\n    mSavedImageUri = null;\n\n    clearCaptions();\n\n    // Force a gc (to be sure to reclaim the memory used by our\n    // potentially huge bitmap):\n    System.gc();\n}", "path": "examples\\more-apps\\LolcatBuilder\\src\\com\\android\\lolcat\\LolcatActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * Updates the enabled/disabled state of the onscreen buttons.\n */\n", "func_signal": "private void updateButtons()", "code": "{\n    Log.i(TAG, \"updateButtons()...\");\n\n    // mPickButton is always enabled.\n\n    // Do we have a valid photo and/or caption(s) yet?\n    Drawable d = mLolcatView.getDrawable();\n    // Log.i(TAG, \"===> current mLolcatView drawable: \" + d);\n    boolean validPhoto = (d != null);\n    boolean validCaption = mLolcatView.hasValidCaption();\n\n    mCaptionButton.setText(validCaption\n                           ? R.string.lolcat_change_captions : R.string.lolcat_add_captions);\n    mCaptionButton.setEnabled(validPhoto);\n\n    mSaveButton.setEnabled(validPhoto && validCaption);\n\n    if (mClearCaptionButton != null) {\n        mClearCaptionButton.setEnabled(validPhoto && validCaption);\n    }\n\n    mClearPhotoButton.setEnabled(validPhoto);\n}", "path": "examples\\more-apps\\LolcatBuilder\\src\\com\\android\\lolcat\\LolcatActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * Updates the UI after a failure anywhere in the bitmap saving / scanning\n * sequence.\n */\n", "func_signal": "private void onSaveFailed(int errorMessageResId)", "code": "{\n    dismissDialog(DIALOG_SAVE_PROGRESS);\n    Toast.makeText(this, errorMessageResId, Toast.LENGTH_SHORT).show();\n}", "path": "examples\\more-apps\\LolcatBuilder\\src\\com\\android\\lolcat\\LolcatActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * If the note was edited and not canceled, commit the update to the\n * database and then refresh the current view of the linkified note.\n */\n", "func_signal": "@Override\nprotected void onActivityResult(int requestCode, int resultCode,\n\t\t\t\t    Intent result)", "code": "{\n\tsuper.onActivityResult(requestCode, resultCode, result);\n\tif ((requestCode == WikiActivityHelper.ACTIVITY_EDIT) &&\n\t    (resultCode == RESULT_OK)) {\n\t    // edit was confirmed - store the update\n\t    Cursor c = mCursor;\n\t    c.requery();\n\t    c.moveToFirst();\n\t    Uri noteUri = ContentUris\n\t\t.withAppendedId(WikiNote.Notes.ALL_NOTES_URI, c.getInt(0));\n\t    ContentValues values = new ContentValues();\n\t    values.put(WikiNote.Notes.BODY, result\n\t\t.getStringExtra(WikiNoteEditor.ACTIVITY_RESULT));\n\t    values.put(WikiNote.Notes.MODIFIED_DATE, System\n\t\t.currentTimeMillis());\n\t    getContentResolver().update(noteUri, values,\n\t\t\t\t\t\"_id = \" + c.getInt(0), null);\n\t    showWikiNote(c.getString(c\n\t\t.getColumnIndexOrThrow(WikiNote.Notes.BODY)));\n\t}\n}", "path": "spec\\javaclass\\examples\\WikiNotes.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * Clears out any already-entered captions for this lolcat.\n */\n", "func_signal": "private void clearCaptions()", "code": "{\n    mLolcatView.clearCaptions();\n\n    // Clear the text fields in the caption dialog too.\n    if (mCaptionDialog != null) {\n        EditText topText = (EditText) mCaptionDialog.findViewById(R.id.top_edittext);\n        topText.setText(\"\");\n        EditText bottomText = (EditText) mCaptionDialog.findViewById(R.id.bottom_edittext);\n        bottomText.setText(\"\");\n        topText.requestFocus();\n    }\n\n    // This also invalidates any image we've previously written to the\n    // SD card...\n    mSavedImageFilename = null;\n    mSavedImageUri = null;\n}", "path": "examples\\more-apps\\LolcatBuilder\\src\\com\\android\\lolcat\\LolcatActivity.java", "repo_name": "darklichny/andrake", "stars": 0, "license": "mit", "language": "java", "size": 1523}
{"docstring": "/**\n * Prints checkboxes on two colums, with a text input field at the end.\n * The checked values will be displayed along with the values to be showed.\n * \n * The text input field can be used to input a custom value. It has the\n * same name as the checkbox input fields, so when the submitted values\n * are processed, you have to remove the empty value, in case this field\n * remains empty.\n * \n * @param out output writer\n * @param name name of the input field\n * @param values values to be shown\n * @param checked checked values\n * @throws IOException\n */\n", "func_signal": "public static void printCheckboxes(Writer out,\n                                   String name,\n                                   String[] values,\n                                   Set<String> checked) throws IOException", "code": "{\n  Set<String> allValues = new TreeSet<String>();\n  // The displayed values are the static values plus the checked values\n  allValues.addAll(Arrays.asList(values));\n  if (checked == null) {\n    checked = new HashSet<String>();\n  }\n  allValues.addAll(checked);\n  int middle = (allValues.size() + 2) / 2;\n  int row = 0;\n  out.write(\"<table cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" border=\\\"0\\\">\");\n  out.write(\"<tr><td><ul class=\\\"inputlist\\\">\");\n  for (String value : allValues) {\n    if (row == middle) {\n      out.write(\"</ul></td><td><ul class=\\\"inputlist\\\">\");\n    }\n    out.write(\"<li>\");\n    printCheckbox(out, name, value, checked.contains(value));\n    out.write(\"</li>\");\n    row++;\n  }\n  out.write(\"<li><label>Other:<br/><input id=\\\"other\");\n  out.write(name);\n  out.write(\"\\\" type=\\\"text\\\" name=\\\"\");\n  out.write(name);\n  out.write(\"\\\" value=\\\"\\\" size=\\\"15\\\" class=\\\"txt\\\"></label></li>\");\n  out.write(\"</ul></td></tr></table>\");\n}", "path": "java\\sample\\gbase\\recipe\\DisplayUtils.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Sets the value.\n *\n * @param value value or {@code null} to reset\n * @return this to enable chaining setters\n */\n", "func_signal": "public LastViewed setValue(DateTime value)", "code": "{\n  super.setTextValue(value);\n  return this;\n}", "path": "java\\src\\com\\google\\gdata\\model\\gd\\LastViewed.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Sets the external URI.\n *\n * This method exists only so that {@link Content} implements\n * {@link Reference}. Callers should use {@link #setSrc(URI)}\n * instead whenever possible.\n *\n * @param href external URI or {@code null}\n * @throws IllegalArgumentException if {@code href} is not a valid URI\n */\n", "func_signal": "public void setHref(String href)", "code": "{\n  try {\n    setAttributeValue(SRC, (href == null) ? null : new URI(href));\n  } catch (URISyntaxException e) {\n    throw new IllegalArgumentException(\"Not a URI: \" + href, e);\n  }\n}", "path": "java\\src\\com\\google\\gdata\\model\\atom\\OutOfLineContent.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Default mutable constructor.\n */\n", "func_signal": "public VolumeFeed()", "code": "{\n  super(VolumeEntry.class);\n  getCategories().add(VolumeEntry.CATEGORY);\n}", "path": "java\\src\\com\\google\\gdata\\data\\books\\VolumeFeed.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Prints &lt;option&gt; tags and set the selected option.\n * \n * @param out output writer\n * @param names option names, which are used both for \n *   values and for labels\n * @param current name of the current option\n * @throws IOException\n */\n", "func_signal": "public static void printOptions(Writer out,\n                                String[] names,\n                                String current) throws IOException", "code": "{\n  for (int i=0; i<names.length; i++) {\n    String name = names[i];\n    printOption(out, name, name, name.equals(current));\n  }\n  printOption(out, \"all\", \"\", current==null);\n}", "path": "java\\sample\\gbase\\recipe\\DisplayUtils.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Constructs a new instance with the given value.\n *\n * @param value value.\n */\n", "func_signal": "public LastViewed(DateTime value)", "code": "{\n  this();\n  setValue(value);\n}", "path": "java\\src\\com\\google\\gdata\\model\\gd\\LastViewed.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Returns the external URI or {@code null} if none exists.\n *\n * This method exists only so that {@link Content} implements\n * {@link Reference}. Callers should use {@link #getSrc()}\n * instead whenever possible.\n */\n", "func_signal": "public String getHref()", "code": "{\n  URI uri = getAttributeValue(SRC);\n  return uri == null ? null : uri.toString();\n}", "path": "java\\src\\com\\google\\gdata\\model\\atom\\OutOfLineContent.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Parses the arguments, creates a FeedURLFactory and a GoogleBaseService.\n * @return the remaining arguments\n */\n", "func_signal": "public static String[] init(String[] args, String applicationName) \n    throws IOException", "code": "{\n  String baseUrl = null;\n\n  int argsIndex = 0;\n  while (argsIndex < args.length && args[argsIndex].startsWith(\"-\")) {\n    String arg = args[argsIndex];\n    argsIndex++;\n    if ( argsIndex >= args.length) {\n      throw new IllegalArgumentException(\"Expected a parameter value \" +\n          \"after \" + arg);\n    }\n    String value = args[argsIndex];\n    argsIndex++;\n    if (\"--url\".equals(arg)) {\n      baseUrl = value;\n    } else if(\"--key\".equals(arg)) {\n      // This parameter used to contain the developer key.\n      // It is still accepted so as not to break scripts that used it, but\n      // it is now ignored.\n    } else {\n      throw new IllegalArgumentException(\"unknown parameter: \" + arg);\n    }\n  }\n\n  if(baseUrl != null) {\n    urlFactory = new FeedURLFactory(baseUrl);\n  }\n\n  // service.query does a GET on the url above and parses the result,\n  // which is an ATOM feed with some extensions (called the Google Base\n  // data API items feed).\n  service = new GoogleBaseService(applicationName);\n  if (argsIndex > 0) {\n    String[] newargs = new String[args.length - argsIndex];\n    System.arraycopy(args, argsIndex, newargs, 0, newargs.length);\n    args = newargs;\n  }\n  return args;\n}", "path": "java\\sample\\gbase\\cmdline\\Example.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Gets the external URI associated with this out-of-line content.\n *\n * @deprecated Use {@link #getSrc()} instead.\n *\n * @return external URI\n */\n", "func_signal": "@Deprecated\npublic String getUri()", "code": "{\n  URI uri = getSrc();\n  if (uri == null) {\n    return null;\n  }\n  return uri.toString();\n}", "path": "java\\src\\com\\google\\gdata\\model\\atom\\OutOfLineContent.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Prints a checkbox input field with a label.\n * \n * @param out output writer\n * @param name name of the field\n * @param value value of the field\n * @param checked true if the field is checked\n * @throws IOException\n */\n", "func_signal": "public static void printCheckbox(Writer out, String name, String value, \n    boolean checked) throws IOException", "code": "{\n  value = escape(value);\n  out.write(\"<label><input type=\\\"checkbox\\\" name=\\\"\");\n  out.write(name);\n  out.write(\"\\\" value=\\\"\");\n  out.write(value);\n  out.write(\"\\\"\");\n  if (checked) {\n    out.write(\" checked\");\n  }\n  out.write(\"/>&nbsp;\");\n  if (checked) {\n    out.write(\"<b>\");\n  }\n  out.write(value);\n  if (checked) {\n    out.write(\"</b>\");\n  }\n  out.write(\"</label>\");\n}", "path": "java\\sample\\gbase\\recipe\\DisplayUtils.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Returns the extension description, specifying whether it is required, and\n * whether it is repeatable.\n *\n * @param required   whether it is required\n * @param repeatable whether it is repeatable\n * @return extension description\n */\n", "func_signal": "public static ExtensionDescription getDefaultDescription(boolean required,\n    boolean repeatable)", "code": "{\n  ExtensionDescription desc =\n      ExtensionDescription.getDefaultDescription(GphotoMaxPhotos.class);\n  desc.setRequired(required);\n  desc.setRepeatable(repeatable);\n  return desc;\n}", "path": "java\\src\\com\\google\\gdata\\data\\photos\\GphotoMaxPhotos.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Simple HTML escaping of the String version of the specified Object.\n * \n * @param obj Object that has a meaningful toString() value\n * @return string with some escaped characters\n */\n", "func_signal": "public static String escape(Object obj)", "code": "{\n  if (obj == null) {\n    return \"\";\n  }\n  return escapeAndShorten(obj.toString(), -1);\n}", "path": "java\\sample\\gbase\\recipe\\DisplayUtils.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Escape HTML data and shorted the result if necessary.\n * \n * If the text is escaped, &lt;b&gt;...&lt;/b&gt; will be \n * appended. \n * \n * @param raw raw text to escape \n * @param maxLength maximum output length \n * @return HTML code\n */\n", "func_signal": "public static String escapeAndShorten(String raw, int maxLength)", "code": "{\n  if (raw == null) {\n    return \"\";\n  }\n  StringBuilder retval = new StringBuilder();\n  int length = raw.length();\n  boolean shortened = false;\n  if (maxLength != -1 && length > maxLength) {\n    length = maxLength;\n    shortened = true;\n  }\n  for (int i=0; i<length; i++) {\n    char c = raw.charAt(i);\n    switch (c) {\n      case '<':\n        retval.append(\"&lt;\");\n        break;\n      case '>':\n        retval.append(\"&gt;\");\n        break;\n      case '&':\n        retval.append(\"&amp;\");\n        break;\n      case '\\'':\n        retval.append(\"&#039;\");\n        break;\n      case '\"': \n        retval.append(\"&#034;\");\n        break;\n      default:\n        retval.append(c);\n        break;\n    }\n  }\n  if (shortened) {\n    retval.append(\"<b>...</b>\");\n  }\n  return retval.toString();\n}", "path": "java\\sample\\gbase\\recipe\\DisplayUtils.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Escapes the items of the Collection and returns them in a StringBuffer,\n * separated by commas.\n * \n * @param list\n * @return list of the elements of the collection, sepparated by commas\n */\n", "func_signal": "public static StringBuffer printList(Collection<String> list)", "code": "{\n  StringBuffer sb = new StringBuffer();\n  if (list != null && list.size() > 0) {\n    Iterator<String> iter = list.iterator();\n    while (true) {\n      sb.append(escape(iter.next()));\n      if (iter.hasNext()) {\n        sb.append(\", \");\n      } else {\n        break;\n      }\n    }\n  }\n  return sb;\n}", "path": "java\\sample\\gbase\\recipe\\DisplayUtils.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Immutable constructor.\n *\n * @param value maxPhotos.\n */\n", "func_signal": "public GphotoMaxPhotos(Integer value)", "code": "{\n  super();\n  setValue(value);\n  setImmutable(true);\n}", "path": "java\\src\\com\\google\\gdata\\data\\photos\\GphotoMaxPhotos.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Prints an error message returned by the server, if any.\n * \n * @param e an exception that may contain an error message from the server\n */\n", "func_signal": "protected static void printServiceException(ServiceException e)", "code": "{\n\n  System.err.print(\"Error\");\n  if (e.getHttpErrorCodeOverride() > 0) {\n    System.err.print(e.getHttpErrorCodeOverride());\n  }\n  System.err.print(\": \");\n  System.err.println(e.getMessage());\n\n  ServiceErrors errors = new ServiceErrors(e);\n  for (ServiceError error: errors.getAllErrors()) {\n    String field = error.getField();\n    System.err.print(\"  \");\n    if (field != null) {\n      System.err.print(\"in field '\");\n      System.err.print(field);\n      System.err.print(\"' \");\n    }\n    System.err.println(error.getReason());\n  }\n}", "path": "java\\sample\\gbase\\cmdline\\Example.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Registers the metadata for this element.\n */\n", "func_signal": "public static void registerMetadata(MetadataRegistry registry)", "code": "{\n  if (registry.isRegistered(KEY)) {\n    return;\n  }\n\n  // The builder for this element\n  ElementCreator builder = registry.build(KEY).setContentRequired(false);\n}", "path": "java\\src\\com\\google\\gdata\\model\\gd\\LastViewed.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Registers the metadata for this element.\n */\n", "func_signal": "public static void registerMetadata(MetadataRegistry registry)", "code": "{\n  if (registry.isRegistered(KEY)) {\n    return;\n  }\n\n  // Register supertype\n  Content.registerMetadata(registry);\n\n  ElementCreator builder = registry.build(KEY);\n  builder.replaceAttribute(Content.SRC).setRequired(true);\n  builder.addAttribute(LENGTH).setVisible(false);\n  builder.addAttribute(ETAG);\n\n  // Add adaptations\n  registry.adapt(Content.KEY, KIND, KEY);\n}", "path": "java\\src\\com\\google\\gdata\\model\\atom\\OutOfLineContent.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Sets the maxPhotos.\n *\n * @param value maxPhotos or <code>null</code> to reset\n */\n", "func_signal": "public void setValue(Integer value)", "code": "{\n  throwExceptionIfImmutable();\n  this.value = value;\n}", "path": "java\\src\\com\\google\\gdata\\data\\photos\\GphotoMaxPhotos.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/**\n * Prints one &lt;option&gt; tag and select it if necessary.\n * \n * @param out output writer\n * @param label option label\n * @param value option value\n * @param selected true if it's selected\n * @throws IOException\n */\n", "func_signal": "public static void printOption(Writer out,\n                               String label,\n                               String value,\n                               boolean selected) throws IOException", "code": "{\n  out.write(\"<option\");\n  if (selected) {\n    out.write(\" selected\");\n  }\n  out.write(\" value=\\\"\");\n  out.write(value);\n  out.write(\"\\\">\");\n  out.write(escape(label));\n  out.write(\"</option>\");\n}", "path": "java\\sample\\gbase\\recipe\\DisplayUtils.java", "repo_name": "elhoim/gdata-client-java", "stars": 1, "license": "apache-2.0", "language": "java", "size": 15421}
{"docstring": "/*\n * The following method creates the font menu item to choose a font\n *     name.\n * postcondition: returns the JMenuItem for the font menu item for\n *     the font name.\n */\n", "func_signal": "public JMenuItem createFontNameItem(String name)", "code": "{\n      JMenuItem item = new JMenuItem(name);\n      \n      //This class is used to create a special ActionListener for this menu item\n      class MenuItemListener implements ActionListener\n      {\n            private String name;\n            \n            public MenuItemListener(String n)\n            {\n                  name = n;\n            }\n            \n            public void actionPerformed(ActionEvent event)\n            {\n                  //Set the font of the text field\n                  fontName = name;\n                  sampleField.setFont(new Font(fontName, fontStyle, fontSize));\n                  sampleField.repaint();\n                  \n                  pack();\n   \n            }\n      }\n      ActionListener listener = new MenuItemListener(name);\n      item.addActionListener(listener);\n      return item;\n}", "path": "java - intro\\graphics\\ChoiceFrame\\ChoiceFrameExtras.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/*\n * The following method creates the check boxes for selection bold and\n *     italic styles\n * postcondition: returns the panel containing the facename check box.\n */\n", "func_signal": "public JPanel createStyleCheckBoxes()", "code": "{\n      italicCheckBox = new JCheckBox(new String(\"Italic\"));\n      //italicCheckBox.addActionListener(this);\n            \n      boldCheckBox = new JCheckBox(new String(\"Bold\"));\n      //boldCheckBox.addActionListener(this);\n      \n      JPanel panel = new JPanel();\n      panel.add(italicCheckBox);\n      panel.add(boldCheckBox);\n      panel.setBorder\n            (new TitledBorder(new EtchedBorder(), \"Style\"));\n      \n      return panel;\n}", "path": "java - intro\\graphics\\ChoiceFrame\\ChoiceFrameExtras.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/*\n * Gets the user choice for font, style and size and redraws the text\n *     accordingly.\n */\n", "func_signal": "public void setSampleFont()", "code": "{\n      //Get the font name from the JComboBox\n      fontName = (String)facenameCombo.getSelectedItem();\n      \n      sampleField.setText(textField.getText());\n\n      //Get the font style from the JCheckBoxes\n      fontStyle=0;\n      if(italicCheckBox.isSelected())\n            fontStyle+=Font.ITALIC;\n      if(boldCheckBox.isSelected())\n            fontStyle+=Font.BOLD;\n      \n      //Get the font size\n      fontSize=0;\n      \n      fontSize = Integer.parseInt((String)sizeCombo.getSelectedItem());\n     \n//THE FOLLOWING IS NO LONGER NEEDED            \n//            if(smallButton.isSelected())\n//                  fontSize=SMALL;\n//            else if(mediumButton.isSelected())\n//                  fontSize=MEDIUM;\n//            else if(largeButton.isSelected())\n//                  fontSize=LARGE;\n      \n      //Set the font of the text field\n      sampleField.setFont(new Font(fontName, fontStyle, fontSize));\n      sampleField.setForeground(fontColor);\n      sampleField.repaint();\n      \n      pack();\n      \n}", "path": "java - intro\\graphics\\ChoiceFrame\\ChoiceFrameExtras.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/*\n * The following method creates the control panel to change the font.\n */\n", "func_signal": "public void createControlPane()", "code": "{\n      //Create the four panels that control the font change\n      JPanel facenamePanel = createFacenameComboBox();\n      JPanel styleGroupPanel = createStyleCheckBoxes();\n      //JPanel sizeGroupPanel = createRadioButtons();\n      JPanel sizeGroupPanel = createSizeComboBox();\n      JPanel colorPickerPanel = createChooseColorButton();\n      JPanel textUpdatePanel = createUpdateButton();\n      \n      //Add the four font control panels to one big panel using\n      //  a grid layout\n      JPanel controlPanel = new JPanel();\n      controlPanel.setLayout(new GridLayout(5,1));\n      controlPanel.add(facenamePanel);\n      controlPanel.add(sizeGroupPanel);\n      controlPanel.add(styleGroupPanel);\n      controlPanel.add(colorPickerPanel);\n      controlPanel.add(textUpdatePanel);\n      \n      //Add the panels to the content pane\n      getContentPane().add(controlPanel, BorderLayout.SOUTH);\n}", "path": "java - intro\\graphics\\ChoiceFrame\\ChoiceFrameExtras.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/*\n * The following method creates the combo box with font style choices\n * postcondition: returns the panel containing the combo box.\n */\n", "func_signal": "public JPanel createFacenameComboBox()", "code": "{\n     //YOU MUST ALTER THESE BASED ON YOUR SYSTEM.\n      facenameCombo = new JComboBox();\n      facenameCombo.addItem(new String(\"Times\"));\n      facenameCombo.addItem(new String(\"Agent Orange\"));\n      facenameCombo.addItem(new String(\"Aldo's Nova\"));\n      facenameCombo.addItem(new String(\"American Typewriter\"));\n      facenameCombo.addItem(new String(\"American Typewriter Condensed\"));\n      facenameCombo.addItem(new String(\"American Typewriter Light\"));\n      facenameCombo.addItem(new String(\"Andale Mono\"));\n      facenameCombo.addItem(new String(\"AntsyPants\"));\n      facenameCombo.addItem(new String(\"Apple Chancery\"));\n      facenameCombo.addItem(new String(\"Arial\"));\n      facenameCombo.addItem(new String(\"Arial Black\"));\n      facenameCombo.addItem(new String(\"Arial Narrow\"));\n      facenameCombo.addItem(new String(\"Aristocrat LET\"));\n      facenameCombo.addItem(new String(\"AstigamaTizm\"));\n      facenameCombo.addItem(new String(\"BASEHEAD\"));\n      facenameCombo.addItem(new String(\"Baskerville\"));\n      facenameCombo.addItem(new String(\"BellBottom\"));\n      facenameCombo.addItem(new String(\"Bertram LET\"));\n      facenameCombo.addItem(new String(\"BiauKai\"));\n      facenameCombo.addItem(new String(\"Bickley Script LET\"));\n      facenameCombo.addItem(new String(\"Bite me\"));\n      facenameCombo.addItem(new String(\"Bizarro\"));\n      facenameCombo.addItem(new String(\"Bodoni Ornaments ITC TT\"));\n      facenameCombo.addItem(new String(\"Calaveras\"));\n      facenameCombo.addItem(new String(\"Capitals\"));\n      facenameCombo.addItem(new String(\"Century Gothic\"));\n      facenameCombo.addItem(new String(\"Chalkboard\"));\n      facenameCombo.addItem(new String(\"Charcoal\"));\n      facenameCombo.addItem(new String(\"Chicago\"));\n      facenameCombo.addItem(new String(\"Cochin\"));\n      facenameCombo.addItem(new String(\"Comic Sans MS\"));\n      facenameCombo.addItem(new String(\"Copperplate\"));\n      facenameCombo.addItem(new String(\"Courier\"));\n      facenameCombo.addItem(new String(\"Courier New\"));\n      facenameCombo.addItem(new String(\"Curlz MT\"));\n      facenameCombo.addItem(new String(\"Didot\"));\n      facenameCombo.addItem(new String(\"Edwardian Script ITC\"));\n      facenameCombo.addItem(new String(\"Fang Song\"));\n      facenameCombo.addItem(new String(\"Fortuna Dot\"));\n      facenameCombo.addItem(new String(\"Futura\"));\n      facenameCombo.addItem(new String(\"Gadget\"));\n      facenameCombo.addItem(new String(\"Geeza Pro\"));\n      facenameCombo.addItem(new String(\"Geneva\"));\n      facenameCombo.addItem(new String(\"Georgia\"));\n      facenameCombo.addItem(new String(\"Gill Sans\"));\n      facenameCombo.addItem(new String(\"Gringo Nights\"));\n      facenameCombo.addItem(new String(\"Hei\"));\n      facenameCombo.addItem(new String(\"Helvetica\"));\n      facenameCombo.addItem(new String(\"Herculanum\"));\n      facenameCombo.addItem(new String(\"Hypmotizin\"));\n      facenameCombo.addItem(new String(\"Impact\"));\n      facenameCombo.addItem(new String(\"Jokerman LET\"));\n      facenameCombo.addItem(new String(\"MadisonSquare\"));\n      facenameCombo.addItem(new String(\"MammaGamma\"));\n      facenameCombo.addItem(new String(\"Mathmos Original\"));\n      facenameCombo.addItem(new String(\"MammaGamma\"));\n      facenameCombo.addItem(new String(\"Marker Felt\"));\n      facenameCombo.addItem(new String(\"MassiveHeadache3\"));\n      facenameCombo.addItem(new String(\"Parry Hotter\"));\n      facenameCombo.setEditable(true);\n      //facenameCombo.addActionListener(this);\n      \n      JPanel panel = new JPanel();\n      panel.add(facenameCombo);\n      panel.setBorder\n            (new TitledBorder(new EtchedBorder(), \"Font Name\"));\n      \n      return panel;\n}", "path": "java - intro\\graphics\\ChoiceFrame\\ChoiceFrameExtras.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/*\n * The following method creates the submenu to choose a font style\n * postcondition: returns the JMenu for the font style submenu.\n */\n", "func_signal": "public JMenu createFontStyleMenu()", "code": "{\n      JMenu menu = new JMenu(new String(\"Style\"));\n      menu.add(createFontStyleItem(new String(\"Plain\")));\n      menu.add(createFontStyleItem(new String(\"Italic\")));\n      menu.add(createFontStyleItem(new String(\"Bold\")));\n      menu.add(createFontStyleItem(new String(\"Bold Italic\")));\n      return menu;\n}", "path": "java - intro\\graphics\\ChoiceFrame\\ChoiceFrameExtras.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "//end getRun method\n", "func_signal": "public void changeRun(int amount)", "code": "{\n      run += amount;\n      if (run < 0)\n         run = 0;\n   }", "path": "java - intro\\applet\\AnimationApplet\\AnimationAppletNew\\AnimatedShape.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/*\n * The following method resets the window to its original status.\n */\n", "func_signal": "public void init()", "code": "{\n      sampleField.setText(new String(\"Big Java\"));\n      textField.setText(new String(\"Big Java\"));\n      \n      facenameCombo.setSelectedIndex(0);\n      sizeCombo.setSelectedIndex(2);\n      \n      italicCheckBox.setSelected(false);\n      boldCheckBox.setSelected(false);\n      \n//            largeButton.setSelected(true);\n      \n      fontColor = Color.BLACK;\n      \n      setSampleFont();\n}", "path": "java - intro\\graphics\\ChoiceFrame\\ChoiceFrameExtras.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/**\n   Constructs an empty data set.\n*/\n", "func_signal": "public DataSet()", "code": "{\n   sum = 0;\n   count = 0;\n   maximum = null;\n}", "path": "Labs\\Lab6\\Person\\DataSet.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/*\n * The following method creates the combo box with font size choices\n * postcondition: returns the panel containing the size combo box.\n */\n", "func_signal": "public JPanel createSizeComboBox()", "code": "{\n      sizeCombo = new JComboBox();\n      sizeCombo.addItem(SMALLEST);\n      sizeCombo.addItem(SMALL);\n      sizeCombo.addItem(SMALL_MEDIUM);\n      sizeCombo.addItem(MEDIUM);\n      sizeCombo.addItem(MEDIUM_LARGE);\n      sizeCombo.addItem(LARGE);\n      sizeCombo.addItem(LARGEST);\n      sizeCombo.addItem(HUGE);\n      sizeCombo.addItem(WOW);\n      sizeCombo.setEditable(true);\n      //facenameCombo.addActionListener(this);\n      sizeCombo.setSelectedIndex(2);\n      \n      JPanel panel = new JPanel();\n      panel.add(sizeCombo);\n      panel.setBorder\n            (new TitledBorder(new EtchedBorder(), \"Font Name\"));\n      \n      return panel;\n}", "path": "java - intro\\graphics\\ChoiceFrame\\ChoiceFrameExtras.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/*\n * The following method creates the color picker.\n */\n", "func_signal": "public JColorChooser createColorPicker()", "code": "{\n      colorPicker = new DefaultColorSelectionModel(Color.BLACK);\n      \n      //This class is used to create a special ActionListener \n      // for the ColorSelectionModel.\n      class ColorChangeListener implements ChangeListener\n      {\n            /*\n             * This method is called when the choose_color button is clicked\n             */\n            public void stateChanged(ChangeEvent event)\n            {\n                  currentChoice.changeColor(color_panel.getColor());\n                  currentChoice.repaint();\n            }//end actionPerformed method\n      }\n      ChangeListener listener = new ColorChangeListener();\n      colorPicker.addChangeListener(listener);\n      color_panel = new JColorChooser(colorPicker);\n      \n      return color_panel;\n}", "path": "java - intro\\graphics\\ChoiceFrame\\ChoiceFrameExtras.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "//end getRise method\n", "func_signal": "public void changeRise(int amount)", "code": "{\n      rise += amount;\n      if (rise < 0)\n         rise = 0;\n   }", "path": "java - intro\\labs\\lab 13\\AnimatedShape.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/*\n * The following method creates the textfield to change the text\n *     and the button to update the label.\n * postcondition: returns the panel containing the textfield and button.\n */\n", "func_signal": "public JPanel createUpdateButton()", "code": "{\n      JLabel textLabel = new JLabel(new String(\"Change text to: \"));\n      \n      textField = new JTextField(new String(\"Big Java\"), 20);\n      textField.setFont(new Font((\"Times\"),Font.PLAIN,12));\n      \n      update = new JButton(new String(\"Update\"));\n      update.setDefaultCapable(true);\n      \n      //This class is used to create a special ActionListener for this menu item\n      class ButtonListener implements ActionListener\n      {\n            /*\n             * This method is called when the update button is clicked\n             */\n            public void actionPerformed(ActionEvent event)\n            {\n                  //Call the method to change the text on the screen.\n                  setSampleFont();\n            }//end actionPerformed method\n      }\n      ActionListener listener = new ButtonListener();\n      update.addActionListener(listener);\n      \n      JPanel panel = new JPanel();\n      \n      panel.add(textLabel);\n      panel.add(textField);\n      panel.add(update);\n      \n      return panel;\n}", "path": "java - intro\\graphics\\ChoiceFrame\\ChoiceFrameExtras.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/**\n   Moves the rectangle to the given location.\n   @param x the x-position of the new location\n   @param y the y-position of the new location\n*/\n", "func_signal": "public void moveTo(int x, int y)", "code": "{\n   box.setLocation(x, y);\n   repaint();      \n}", "path": "java - intro\\graphics\\ch12\\mouse\\RectangleComponent.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/**\n * This constructor sets the values for\n * all the BuyableProperty attributes.\n * \n * @param n the name of the Property\n * @param t an int denoting what type the property\n * is (see the <code>getType</code> method)\n * @param c the cost of the Property\n * @param m the mortgage value of the Property\n * @param i the index of the Property on the board\n */\n", "func_signal": "public BuyableProperty (String n, int t, int i, int c, int m)", "code": "{\n   super (n, t, i);\n   ownerIndex = -1;\n   cost = c;\n   mortgage = m;\n}", "path": "projects\\monopoly_v2.0\\BuyableProperty.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/*\n * The following method creates the submenu to choose a font name\n * postcondition: returns the JMenu for the font name submenu.\n */\n", "func_signal": "public JMenu createFontNameMenu()", "code": "{\n     //YOU MUST ALTER THESE BASED ON YOUR SYSTEM\n      JMenu menu = new JMenu(new String(\"Name\"));\n      menu.add(createFontNameItem(new String(\"Serif\")));\n      menu.add(createFontNameItem(new String(\"Times\")));\n      menu.add(createFontNameItem(new String(\"Agent Orange\")));\n      menu.add(createFontNameItem(new String(\"Aldo's Nova\")));\n      menu.add(createFontNameItem(new String(\"American Typewriter\")));\n      menu.add(createFontNameItem(new String(\"American Typewriter Condensed\")));\n      menu.add(createFontNameItem(new String(\"American Typewriter Light\")));\n      menu.add(createFontNameItem(new String(\"Andale Mono\")));\n      menu.add(createFontNameItem(new String(\"AntsyPants\")));\n      menu.add(createFontNameItem(new String(\"Apple Chancery\")));\n      menu.add(createFontNameItem(new String(\"Arial\")));\n      menu.add(createFontNameItem(new String(\"Arial Black\")));\n      menu.add(createFontNameItem(new String(\"Arial Narrow\")));\n      menu.add(createFontNameItem(new String(\"Aristocrat LET\")));\n      menu.add(createFontNameItem(new String(\"AstigamaTizm\")));\n      menu.add(createFontNameItem(new String(\"BASEHEAD\")));\n      menu.add(createFontNameItem(new String(\"Baskerville\")));\n      menu.add(createFontNameItem(new String(\"BellBottom\")));\n      menu.add(createFontNameItem(new String(\"Bertram LET\")));\n      menu.add(createFontNameItem(new String(\"BiauKai\")));\n      menu.add(createFontNameItem(new String(\"Bickley Script LET\")));\n      menu.add(createFontNameItem(new String(\"Bite me\")));\n      menu.add(createFontNameItem(new String(\"Bizarro\")));\n      menu.add(createFontNameItem(new String(\"Bodoni Ornaments ITC TT\")));\n      menu.add(createFontNameItem(new String(\"Calaveras\")));\n      menu.add(createFontNameItem(new String(\"Capitals\")));\n      menu.add(createFontNameItem(new String(\"Century Gothic\")));\n      menu.add(createFontNameItem(new String(\"Chalkboard\")));\n      menu.add(createFontNameItem(new String(\"Charcoal\")));\n      menu.add(createFontNameItem(new String(\"Chicago\")));\n      menu.add(createFontNameItem(new String(\"Cochin\")));\n      menu.add(createFontNameItem(new String(\"Comic Sans MS\")));\n      menu.add(createFontNameItem(new String(\"Copperplate\")));\n      menu.add(createFontNameItem(new String(\"Courier\")));\n      menu.add(createFontNameItem(new String(\"Courier New\")));\n      menu.add(createFontNameItem(new String(\"Curlz MT\")));\n      menu.add(createFontNameItem(new String(\"Didot\")));\n      menu.add(createFontNameItem(new String(\"Edwardian Script ITC\")));\n      menu.add(createFontNameItem(new String(\"Fang Song\")));\n      menu.add(createFontNameItem(new String(\"Fortuna Dot\")));\n      menu.add(createFontNameItem(new String(\"Futura\")));\n      menu.add(createFontNameItem(new String(\"Gadget\")));\n      menu.add(createFontNameItem(new String(\"Geeza Pro\")));\n      menu.add(createFontNameItem(new String(\"Geneva\")));\n      menu.add(createFontNameItem(new String(\"Georgia\")));\n      menu.add(createFontNameItem(new String(\"Gill Sans\")));\n      menu.add(createFontNameItem(new String(\"Gringo Nights\")));\n      menu.add(createFontNameItem(new String(\"Hei\")));\n      menu.add(createFontNameItem(new String(\"Helvetica\")));\n      menu.add(createFontNameItem(new String(\"Herculanum\")));\n      menu.add(createFontNameItem(new String(\"Hypmotizin\")));\n      menu.add(createFontNameItem(new String(\"Impact\")));\n      menu.add(createFontNameItem(new String(\"Jokerman LET\")));\n      menu.add(createFontNameItem(new String(\"MadisonSquare\")));\n      menu.add(createFontNameItem(new String(\"MammaGamma\")));\n      menu.add(createFontNameItem(new String(\"Mathmos Original\")));\n      menu.add(createFontNameItem(new String(\"MammaGamma\")));\n      menu.add(createFontNameItem(new String(\"Marker Felt\")));\n      menu.add(createFontNameItem(new String(\"MassiveHeadache3\")));\n      menu.add(createFontNameItem(new String(\"Parry Hotter\")));\n      return menu;\n}", "path": "java - intro\\graphics\\ChoiceFrame\\ChoiceFrameExtras.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/*\n * The following method creates the file menu item to quit the program\n * postcondition: returns the JMenuItem for the file menu item \"Exit\".\n */\n", "func_signal": "public JMenuItem createFileExitItem()", "code": "{\n      JMenuItem item = new JMenuItem(new String(\"Exit\"));\n      class MenuItemListener implements ActionListener\n      {\n            public void actionPerformed(ActionEvent event)\n            {\n                  System.exit(0);\n            }\n      }\n      ActionListener listener = new MenuItemListener();\n      item.addActionListener(listener);\n      return item;\n}", "path": "java - intro\\graphics\\ChoiceFrame\\ChoiceFrameExtras.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/**\n * Returns a printable version of this property's attribute status.\n * <p>\n * \n * @return a printable version of this property's attrubute status.\n */\n", "func_signal": "public String toString ()", "code": "{\n   return new String (super.toString () +\n                      \"[ownerIndex=\" + getOwner() + \"]\" +\n                      \"[cost=\" + getCost() + \"]\" +\n                      \"[mortgage=\" + getMortgage() + \"]\");\n                      \n}", "path": "projects\\monopoly_v2.0\\BuyableProperty.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "//end getRise method\n", "func_signal": "public void changeRise(int amount)", "code": "{\n      rise += amount;\n      if (rise < 0)\n         rise = 0;\n   }", "path": "java - intro\\applet\\AnimationApplet\\AnimationAppletNew\\AnimatedShape.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/*\n * The following method creates the file menu item to reset all the\n *     values\n * postcondition: returns the JMenuItem for the file menu item \"Reset\".\n */\n", "func_signal": "public JMenuItem createFileResetItem()", "code": "{\n      JMenuItem item = new JMenuItem(new String(\"Reset\"));\n      class MenuItemListener implements ActionListener\n      {\n            public void actionPerformed(ActionEvent event)\n            {\n                  init();\n            }\n      }\n      ActionListener listener = new MenuItemListener();\n      item.addActionListener(listener);\n      return item;\n}", "path": "java - intro\\graphics\\ChoiceFrame\\ChoiceFrameExtras.java", "repo_name": "dvishnureddy/ap-computer-science", "stars": 0, "license": "None", "language": "java", "size": 4744}
{"docstring": "/**\n * This method initializes allocDiffPanel\n * \n * @return net.sf.profiler4j.console.AllocDiffPanel\n */\n", "func_signal": "private AllocDiffPanel getAllocDiffPanel()", "code": "{\n    if (allocDiffPanel == null) {\n        allocDiffPanel = new AllocDiffPanel();\n        allocDiffPanel.setVisible(false);\n    }\n    return allocDiffPanel;\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\MemoryPanel.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * Do not use this constructor.\n * \n */\n", "func_signal": "public ThreadPanel()", "code": "{\n    super();\n    initialize();\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\ThreadPanel.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * Handles an exception (this method NEVER returns)\n * @param e Exception to handle\n * \n * @throws ClientException\n */\n", "func_signal": "private void handleException(Exception e) throws ClientException", "code": "{\n    close(e);\n    if (e instanceof ClientException) {\n        throw (ClientException) e;\n    }\n    if (e instanceof IOException) {\n        throw new ClientException(\"I/O Error\", e);\n    }\n    throw new ClientException(\"Unexpeced Client Error\", e);\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\client\\Client.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * This method initializes textArea\n * \n * @return javax.swing.JTextArea\n */\n", "func_signal": "private JTextPane getText()", "code": "{\n    if (text == null) {\n        text = new JTextPane();\n        text.setEditable(false);\n        text.setContentType(\"text/html\");\n        text.setEditable(false);\n        text.setBackground(java.awt.SystemColor.info);\n    }\n    return text;\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\ThreadPanel.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * This method initializes jTextField\n * \n * @return javax.swing.JTextField\n */\n", "func_signal": "private JTextField getMaxNonHeapMemTextField()", "code": "{\n    if (maxNonHeapMemTextField == null) {\n        maxNonHeapMemTextField = new JTextField();\n        maxNonHeapMemTextField.setEditable(false);\n        maxNonHeapMemTextField.setFont(new java.awt.Font(\"Tahoma\",\n                java.awt.Font.BOLD, 11));\n        maxNonHeapMemTextField.setColumns(7);\n    }\n    return maxNonHeapMemTextField;\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\MemoryPanel.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * This method initializes jPanel\n * \n * @return javax.swing.JPanel\n */\n", "func_signal": "private JPanel getInfoPanel()", "code": "{\n    if (infoPanel == null) {\n        jLabel1 = new JLabel();\n        jLabel1.setText(\"        Max Non-Heap Memory (MB):\");\n        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);\n        jLabel = new JLabel();\n        jLabel.setText(\"Max Heap Memory (MB):\");\n        infoPanel = new JPanel();\n        infoPanel.setLayout(new FlowLayout());\n        infoPanel.add(jLabel, null);\n        infoPanel.add(getMaxHeapMemTextField(), null);\n        infoPanel.add(jLabel1, null);\n        infoPanel.add(getMaxNonHeapMemTextField(), null);\n    }\n    return infoPanel;\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\MemoryPanel.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * This method initializes viewPanel\n * \n * @return javax.swing.JPanel\n */\n", "func_signal": "private JPanel getViewPanel()", "code": "{\n    if (viewPanel == null) {\n        viewPanel = new JPanel();\n        viewPanel.setLayout(new BorderLayout());\n        viewPanel.add(getJScrollPane(), java.awt.BorderLayout.CENTER);\n    }\n    return viewPanel;\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\ThreadPanel.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * This method initializes this\n */\n", "func_signal": "private void initialize()", "code": "{\n    this.setLayout(new BorderLayout());\n    this.setSize(300, 200);\n    this.add(getTopPanel(), java.awt.BorderLayout.NORTH);\n    this.add(getViewPanel(), java.awt.BorderLayout.CENTER);\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\ThreadPanel.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * This is the default constructor\n */\n", "func_signal": "public ThreadPanel(Console app)", "code": "{\n    super();\n    this.app = app;\n    initialize();\n    app.addListener(this);\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\ThreadPanel.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * Sets the pattern from which a name for export images is to be derived.\n * <p>\n * The value may be {@code null} or otherwise invalid, since there is no chance\n * to check the pattern for usefulness when it is specified. (I.e. there may\n * be no write-access to the directory anymore, when exporting begins.)\n * <p>\n * Note that the pattern only is used, if {@link #isExportAutomaticallyEnabled()} return {@code true}.\n * \n * @param exportPattern the filename pattern to set, may be {@code null}\n */\n", "func_signal": "public void setExportPattern(String exportPattern)", "code": "{\n    changed = true;\n    this.exportPattern = exportPattern;\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\Project.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * This method initializes topPanel\n * \n * @return javax.swing.JPanel\n */\n", "func_signal": "private JPanel getTopPanel()", "code": "{\n    if (topPanel == null) {\n        FlowLayout flowLayout = new FlowLayout();\n        flowLayout.setAlignment(java.awt.FlowLayout.LEFT);\n        topPanel = new JPanel();\n        topPanel.setLayout(flowLayout);\n        topPanel.add(getRefreshButton(), null);\n    }\n    return topPanel;\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\ThreadPanel.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "// ///////////////////////////////////////////////////////////////////////////////////\n// Helper methods\n// ///////////////////////////////////////////////////////////////////////////////////\n", "func_signal": "private void assertConnected() throws ClientException", "code": "{\n    if (!isConnected()) {\n        log.error(\"ClientConnected assertion failed\");\n        throw new ClientException(\"Client not connected\");\n    }\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\client\\Client.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * Determine, if the call graph is to be exported automatically after each snapshot.\n * \n * @param exportAutomaticallyEnabled \n * \n * @see #setExportPattern(String)\n */\n", "func_signal": "public void setExportAutomaticallyEnabled(boolean exportAutomaticallyEnabled)", "code": "{\n    changed = true;\n    this.exportAutomaticallyEnabled = exportAutomaticallyEnabled;\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\Project.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * This method initializes memoryUsagePanel\n * \n * @return demo.MemoryUsagePanel\n */\n", "func_signal": "private MemoryPlotPanel getMemoryUsagePanel()", "code": "{\n    if (heapMemoryUsagePanel == null) {\n        heapMemoryUsagePanel = new MemoryPlotPanel(\"Heap Memory\");\n    }\n    return heapMemoryUsagePanel;\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\MemoryPanel.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * This method initializes memoryUsagePanel1\n * \n * @return net.sf.profiler4j.console.MemoryUsagePanel\n */\n", "func_signal": "private MemoryPlotPanel getNonHeapMemoryUsagePanel()", "code": "{\n    if (nonHeapMemoryUsagePanel == null) {\n        nonHeapMemoryUsagePanel = new MemoryPlotPanel(\"Non-Heap Memory\");\n    }\n    return nonHeapMemoryUsagePanel;\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\MemoryPanel.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * This method initializes maxMemoryTextField\n * \n * @return javax.swing.JTextField\n */\n", "func_signal": "private JTextField getMaxHeapMemTextField()", "code": "{\n    if (maxHeapMemTextField == null) {\n        maxHeapMemTextField = new JTextField();\n        maxHeapMemTextField.setEditable(false);\n        maxHeapMemTextField.setFont(new java.awt.Font(\"Tahoma\", java.awt.Font.BOLD,\n                11));\n        maxHeapMemTextField.setColumns(7);\n    }\n    return maxHeapMemTextField;\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\MemoryPanel.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * This method initializes this\n */\n", "func_signal": "private void initialize()", "code": "{\n    GridBagConstraints gridBagConstraints12 = new GridBagConstraints();\n    gridBagConstraints12.gridx = 2;\n    gridBagConstraints12.fill = java.awt.GridBagConstraints.BOTH;\n    gridBagConstraints12.weightx = 1.0;\n    gridBagConstraints12.weighty = 1.0;\n    gridBagConstraints12.gridy = 1;\n    GridBagConstraints gridBagConstraints11 = new GridBagConstraints();\n    gridBagConstraints11.gridx = 1;\n    gridBagConstraints11.fill = java.awt.GridBagConstraints.BOTH;\n    gridBagConstraints11.weightx = 1.0;\n    gridBagConstraints11.weighty = 1.0;\n    gridBagConstraints11.gridy = 1;\n    GridBagConstraints gridBagConstraints = new GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n    gridBagConstraints.weightx = 1.0;\n    gridBagConstraints.weighty = 1.0;\n    gridBagConstraints.gridy = 1;\n    GridBagConstraints gridBagConstraints1 = new GridBagConstraints();\n    gridBagConstraints1.gridx = 0;\n    gridBagConstraints1.ipadx = 16;\n    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;\n    gridBagConstraints1.gridwidth = 3;\n    gridBagConstraints1.insets = new java.awt.Insets(4, 4, 4, 4);\n    gridBagConstraints1.gridy = 0;\n    this.setLayout(new GridBagLayout());\n    this.setSize(541, 332);\n    this.add(getInfoPanel(), gridBagConstraints1);\n    this.add(getMemoryUsagePanel(), gridBagConstraints);\n    this.add(getAllocDiffPanel(), gridBagConstraints11);\n    this.add(getNonHeapMemoryUsagePanel(), gridBagConstraints12);\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\MemoryPanel.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * This method initializes refreshButton\n * \n * @return javax.swing.JButton\n */\n", "func_signal": "private JButton getRefreshButton()", "code": "{\n    if (refreshButton == null) {\n        refreshButton = new JButton();\n        refreshButton.setIcon(new ImageIcon(getClass()\n            .getResource(\"/net/sf/profiler4j/console/images/refresh.gif\")));\n        refreshButton.setToolTipText(\"Refresh info\");\n        refreshButton.setEnabled(false);\n        refreshButton.setPreferredSize(new java.awt.Dimension(32, 32));\n        refreshButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent e) {\n                refreshThreads();\n            }\n        });\n    }\n    return refreshButton;\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\ThreadPanel.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * This is the default constructor\n */\n", "func_signal": "public MemoryPanel(Console app)", "code": "{\n    super();\n    this.app = app;\n    initialize();\n    app.addListener(this);\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\MemoryPanel.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * This method initializes jScrollPane\n * \n * @return javax.swing.JScrollPane\n */\n", "func_signal": "private JScrollPane getJScrollPane()", "code": "{\n    if (jScrollPane == null) {\n        jScrollPane = new JScrollPane();\n        jScrollPane.setFont(new java.awt.Font(\"Monospaced\", java.awt.Font.PLAIN, 12));\n        jScrollPane.setViewportView(getText());\n    }\n    return jScrollPane;\n}", "path": "src\\java\\net\\sf\\profiler4j\\console\\ThreadPanel.java", "repo_name": "mknecht/profiler4j", "stars": 0, "license": "None", "language": "java", "size": 2957}
{"docstring": "/**\n * Recursive method which actually realizes the contract of method \n * <code>scanSubDirectories</code>.\n * @param baseDir\n * @param result an accumulator for the current results\n * @param currentNamespace\n */\n", "func_signal": "private void recScanSubDirectories(File baseDir, List<String> result, String currentNamespace)", "code": "{\n\tfor (File aFile: baseDir.listFiles()) {\n\t\tif (aFile.isDirectory()) {\n\t\t\trecScanSubDirectories(aFile, result, currentNamespace + \".\" + aFile.getName()) ;\n\t\t} else {\n\t\t\t\n\t\t\tif (aFile.getName().split(\"\\\\.\").length == 2 && aFile.getName().split(\"\\\\.\")[1].equals(\"class\")) {\n\t\t\t\tresult.add(currentNamespace + \".\" + aFile.getName().split(\"\\\\.\")[0]) ;\n\t\t\t}\n\t\t}\n\t}\n\t\n}", "path": "src\\org\\sonata\\framework\\common\\TechnicalComponentLoader.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "// On suppose que la translation a \ufffd sa charge la t\ufffdche de remplir la liste des destinations\n", "func_signal": "public ConnectionTranslation(final SymphonyObject source, final ProcessObject proxy)", "code": "{\n\tthis.source = source ;\n\tdestinations = new HashMap<Class<?>, SymphonyObject>() ;\n\tthis.proxy = proxy ;\n\tconnections_m.put(source, destinations) ;\n}", "path": "src\\org\\sonata\\framework\\common\\ConnectionTranslation.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Safe deletes the object from the Symphony Object class <code>klazz</code>\n * @return true if the deletion was successful, false otherwise\n */\n", "func_signal": "public boolean delete(Class<?> klazz, final int identifier)", "code": "{\n\tMap<Integer, EntityObject> theInstances = instances_m.get(klazz) ;\n\tif (!theInstances.containsKey(identifier)) return false ;\n\ttheInstances.remove(identifier) ;\n\treturn true ;\n}", "path": "src\\org\\sonata\\framework\\common\\entity\\AbstractEntityFactory.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Translation methods with a mix of wrapped and unwrapped primitive types\n * are not supported\n */\n", "func_signal": "@Test\npublic final void testRequestWithNonUniformParameters()", "code": "{\n\tboolean exceptionThrown = false ;\n\tRequest req ;\n\tloadConnection() ;\n\tSampleObject sample = new SampleObjectImpl() ;\n\ttheInvoker.bind((SymphonyObject) sample) ;\n\t\n\ttry {\n\t\treq = theInvoker.createRequest((EntityObject)sample, \"callWithNonUniformParameters\") ;\n\t\treq.pushParameter(new Integer(9)) ;\n\t\treq.pushParameter(10) ;\n\t\treq.pushParameter(new Long(11L)) ;\n\t\treq.pushParameter(new Boolean(\"true\")) ;\n\t\treq.pushParameter(false) ;\n\t\treq.pushParameter(\"aString\") ;\n\t\t\n\t\tboolean requestDidSucceed = theInvoker.sendRequest() ;\n\t\tassertTrue(requestDidSucceed) ;\n\t} catch (RequestOverlapException e) {\n\t\tfail(\"Wrong exception was thrown!\");\n\t} catch (NoSuchMethodException e) {\n\t\texceptionThrown = true ;\n\t\te.printStackTrace() ;\n\t} catch (InvocationTargetException e) {\n\t\tfail(\"Wrong exception was thrown!\");\n\t\te.printStackTrace();\n\t}\n\t\n\tassertTrue(exceptionThrown) ;\n}", "path": "test\\sonata\\test\\unit\\invoker\\InvokerTest.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Registers the Symphony Object defined by the interface <code>klazz</code>\n * and the list of properties <code>prop</code>.\n * \n * @param klazz the interface of the Symphony Object\n * @param prop the general properties of the Symphony Object\n * @param techProp the technical components, mapped to the corresponding interface class\n * @return <code>true</code> if the registration process succeeded, \n * or else <code>false</code> (e.g. if the class <code>klazz</code> does not\n * designate a valid Symphony Object).\n */\n", "func_signal": "public boolean register(final Class<?> klazz, final Properties prop, final List<Class<? extends TechnicalComponent>> techProp)", "code": "{\n\tproperties.put(klazz, prop) ;\n\tinstances_m.put(klazz, new TreeMap<Integer, EntityObject>()) ;\n\t\n\tif (techProp != null && !techProp.isEmpty()) {\n\t\ttry {\n\t\t\ttechCompLoader.registerTechnicalInterfaces(klazz, techProp) ;\n\t\t} catch (IllegalSymphonyComponent e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false ;\n\t\t} catch (ClassNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false ;\n\t\t}\n\t}\n\treturn true ;\n}", "path": "src\\org\\sonata\\framework\\common\\entity\\AbstractEntityFactory.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Invokes the method described in the current request on the <code>proc</code> argument.\n * Note that the invoked method should be <code>public</code>.<br /><br />\n * \n * Throws <code>NoSuchMethodException</code> if \n * no matching method exists.<br /><br />\n * \n * The exceptions thrown by the target method are funneled into an <code>InvocationTargetException</code>.\n * The details of the original exception can be accessed by calling <code>getCause()</code>\n * or <code>getTargetException()</code> on the <code>InvocationTargetException</code> instance.<br /><br />\n\n * Primitive arguments are unwrapped if necessary, however the invoker does not support mixing\n * wrapped and unwrapped primitive arguments.\n * @param proc\n * @throws NoSuchMethodException\n * @throws InvocationTargetException \n */\n", "func_signal": "private void invokeMethod(final SymphonyObject proc) throws NoSuchMethodException, InvocationTargetException", "code": "{\n\n\t// A ce point, la classe Wrapper a \u00e9t\u00e9 instanci\u00e9e (objet\n\t// wrapperObject)\n\t// Il suffit \u00e0 pr\u00e9sent de passer la main au wrapper\n\n\tString methodName = currentRequest.getOpName();\n\n\tConnectionTranslation liveConnection = connectionTable.get(proc);\n\n\tMethod method = null;\n\n\t// Liste des param\u00e8tres convertis (voir ci-dessous)\n\tClass<?>[] convertedPTypes = new Class[currentRequest.getParamTypeArray().length];\n\n\t// Le principe ci-dessous est de convertir tous les ParamTypes\n\t// d\u00e9pendant d'Objets Symphony (class Impl) vers leur superclasse\n\n\t/*\n\t * Mecanisme :\n\t *  - Si l'objet impl\u00e9mente EntityObject ou bien ProcessObject, on\n\t * extrait le nom de l'Objet Symphony, - Sinon on conserve le\n\t * param\u00e8tre tel quel\n\t * \n\t */\n\tint compteur = 0;\n\tfor (Class<?> singleClass : currentRequest.getParamTypeArray()) {\n\t\tboolean objectIsSO = false;\n\n\t\tfor (Class<?> singleInterface : singleClass.getInterfaces()) {\n\t\t\t// Traitement de l'OS (parameterType)\n\t\t\tif (oELookupTable.get(singleInterface) != null\n\t\t\t\t\t|| oPLookupTable.get(singleInterface) != null) {\n\t\t\t\tconvertedPTypes[compteur++] = singleInterface;\n\t\t\t\tobjectIsSO = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!objectIsSO) {\n\t\t\tconvertedPTypes[compteur++] = singleClass;\n\t\t}\n\n\t}\n\t\t// \u00c0 ce point les param\u00e8tres ont \u00e9t\u00e9 adapt\u00e9s\n\ttry {\n\t\tmethod = liveConnection.getClass().getMethod(\n\t\t\t\tmethodName, (Class[]) convertedPTypes);\n\t} catch (NoSuchMethodException e) {\n\t\tlogger.info(\"Method does not exist. Trying to unwrap primitive arguments\") ;\n\t\t\n\t\tList<Class<?>> newArguments = new LinkedList<Class<?>>() ;\n\t\t\n\t\tfor (Class<?> anArgument : convertedPTypes) {\n\t\t\tif (anArgument.isAssignableFrom(Integer.class)) {\n\t\t\t\tnewArguments.add(int.class) ;\n\t\t\t} else if (anArgument.isAssignableFrom(Short.class)) {\n\t\t\t\tnewArguments.add(short.class) ;\n\t\t\t} else if (anArgument.isAssignableFrom(Byte.class)) {\n\t\t\t\tnewArguments.add(byte.class) ;\n\t\t\t} else if (anArgument.isAssignableFrom(Long.class)) {\n\t\t\t\tnewArguments.add(long.class) ;\n\t\t\t} else if (anArgument.isAssignableFrom(Double.class)) {\n\t\t\t\tnewArguments.add(double.class) ;\n\t\t\t} else if (anArgument.isAssignableFrom(Float.class)) {\n\t\t\t\tnewArguments.add(float.class) ;\n\t\t\t} else if (anArgument.isAssignableFrom(Character.class)) {\n\t\t\t\tnewArguments.add(char.class) ;\n\t\t\t} else if (anArgument.isAssignableFrom(Boolean.class)) {\n\t\t\t\tnewArguments.add(boolean.class) ;\n\t\t\t} else {\n\t\t\t\tnewArguments.add(anArgument) ;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmethod = liveConnection.getClass().getMethod(\n\t\t\t\t\tmethodName, (Class[]) newArguments.toArray(convertedPTypes));\n\t}\n\t\n\ttry {\n\t\treturnObject = method.invoke(liveConnection,\n\t\t\t\tcurrentRequest.getParamArray().toArray());\n//\t\t\thasReturnedObject = (returnObject != null);\n\t} catch (IllegalArgumentException e1) {\n\t\t// TODO Auto-generated catch block\n\t\te1.printStackTrace();\n\t} catch (IllegalAccessException e1) {\n\t\t// TODO Auto-generated catch block\n\t\te1.printStackTrace();\n\t}\n\n\n}", "path": "src\\org\\sonata\\framework\\control\\invoker\\Invoker.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Returns the File object that corresponds to the filesystem directory\n * matching the <code>namespace</code> package.\n * @param namespace\n * @return the base directory as a File object\n */\n", "func_signal": "private File getBaseDirectory(String namespace)", "code": "{\n\t\n\tList<String> pathElements = Arrays.asList(namespace.split(\"\\\\.\")) ;\n\t\n\t// We get the path up to the base class, not included\n\tStringBuilder dirPath;\n\t\n\tString classpath = System.getProperty(\"java.class.path\") ;\n\t\n\t// Search the current class within the classpath\n\tString[] classpathDirectories = classpath.split(File.pathSeparator) ;\n\t\n\tfor (String aPath : classpathDirectories) {\n\t\n\t\ttry {\n\t\t\tdirPath = new StringBuilder(new File(aPath).getCanonicalPath()).append(File.separator);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t\tfor (String anElement : pathElements) {\n\t\t\tdirPath.append(anElement).append(File.separator) ;\n\t\t}\n\t\tFile baseDir = new File(dirPath.toString()) ;\n\t\t\n\t\tif (baseDir.exists() && baseDir.isDirectory()) {\n\t\t\treturn baseDir ;\n\t\t}\n\t}\n\t\treturn null ;\n}", "path": "src\\org\\sonata\\framework\\common\\TechnicalComponentLoader.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Returns an unmodifiable list of interfaces that extend the type \n * <code>TechnicalComponent</code>, for class <code>klazz</code>.\n * @param klazz a Symphony Object interface\n * @return the list of interfaces\n */\n", "func_signal": "public List<Class<? extends TechnicalComponent>> getTechnicalInterfacesForSO(Class<?> klazz)", "code": "{\n\tList<Class<? extends TechnicalComponent>> tmpList = technicalInterfaces.get(klazz) ;\n\tif (tmpList == null) {\n\t\treturn null ;\n\t} else {\n\t\treturn Collections.unmodifiableList(technicalInterfaces.get(klazz)) ;\n\t}\n}", "path": "src\\org\\sonata\\framework\\common\\TechnicalComponentLoader.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Returns the name of the package (namespace) which contains\n * the Object Symphony interface.\n * @param baseClass\n * @return the name of the package\n */\n", "func_signal": "private String getNamespace(Class<?> baseClass)", "code": "{\n\tString className = baseClass.getName() ;\n\tList<String> nameElements = Arrays.asList(className.split(\"\\\\.\")) ;\n\tnameElements = nameElements.subList(0, nameElements.size() - 1) ;\n\t\n\tStringBuilder sb = new StringBuilder(nameElements.get(0)) ;\n\tfor (String anElement : nameElements.subList(1, nameElements.size())) {\n\t\tsb.append(\".\").append(anElement) ;\n\t}\n\treturn sb.toString() ;\n}", "path": "src\\org\\sonata\\framework\\common\\TechnicalComponentLoader.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/*\n * TODO Scan the jar files!\n */\n/**\n * Returns the list of files for each subdirectory (or subpackage) of the\n * directory <code>baseDir</code>, which corresponds to the package name\n * <code>namespace</code>.\n */\n", "func_signal": "private List<String> scanSubDirectories(File baseDir, String namespace)", "code": "{\n\tList<String> result = new LinkedList<String>() ;\n\trecScanSubDirectories(baseDir, result, namespace) ;\n\treturn result;\n}", "path": "src\\org\\sonata\\framework\\common\\TechnicalComponentLoader.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Note that the reference should only be registered once for every index key.\n * Reloading a reference while connections with the old reference are still \n * alive would result in unpredictable behaviour.\n * @param reference\n * @return\n */\n", "func_signal": "protected boolean registerConnection(BrokerReference reference)", "code": "{\n\tif (referenceTable.containsValue(reference)) return false ;\n\t\n\treferenceTable.put(reference.getIndex(), reference) ;\n\t\n\treturn true ;\n}", "path": "src\\org\\sonata\\framework\\control\\invoker\\Invoker.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Connects, if necessary, the <code>object</code> Symphony Object\n * with the correct source Symphony Object.\n * @param object\n * @return <code>true</code> if a binding between the <code>object</code> and another\n * Symphony Object did occur; <code>false</code> otherwise.\n */\n", "func_signal": "public boolean bind(final SymphonyObject object)", "code": "{\n\t\n\tSymphonyObject sourceObject = getReqSourceObject(object) ;\n\tif (sourceObject == null) return false ;\n\t\n\tBrokerReference brokerRef = null ;\n\t\n\tfor (Class<?> singleInterface : sourceObject.getClass().getInterfaces()) {\n\t\t// We get the interface name that should be that of the applicative services of the object\n\t\t// (i.e., we check if one of the interfaces has been registered in the referenceTable\n\t\tbrokerRef = referenceTable.get(singleInterface.getName());\n\t\tif (brokerRef != null) { break ; }\n\t}\n\t\n\tConnectionTranslation connection = connectionTable.get(sourceObject);\n\n\tfor (ReferenceElement singleRef : brokerRef.getDestinations()) {\n\t\tClass<?> aReferenceClass = singleRef.getReferenceClass() ;\n\t\tif (aReferenceClass.isAssignableFrom(object.getClass())) {\n\t\t\t\tif (connection.getDestination(aReferenceClass) != null) return false;\n\t\t\t\tconnection.addDestination(aReferenceClass, object) ;\n\t\t\t\tbreak ;\n\t\t}\n\t}\t\n\t\n\tlogger.fine(\"connectionTable: new link between \" + sourceObject + \" and \" + object) ;\n\treturn true ;\n}", "path": "src\\org\\sonata\\framework\\control\\invoker\\Invoker.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Returns the list of interfaces that extend the type <code>TechnicalComponent</code>,\n * for class <code>baseClass</code>.\n * @param baseClass a Symphony Object interface\n * @return the list of interfaces\n * @throws IllegalSymphonyComponent\n */\n", "func_signal": "private List<Class<? extends TechnicalComponent>> listInterfaces(Class<?> baseClass) throws IllegalSymphonyComponent", "code": "{\n\tList<Class<? extends TechnicalComponent>> technicalInterfaces = new ArrayList<Class<? extends TechnicalComponent>>() ;\n\t\n\tString namespace = getNamespace(baseClass) ;\n\t\n\tFile baseDir = getBaseDirectory(namespace) ;\n\tif (baseDir == null) throw new IllegalSymphonyComponent() ;\n\t\n\tList<String> classNames = scanSubDirectories(baseDir, namespace) ;\n\tfor (String aClassName : classNames) {\n\t\tClass<?> theClass = null ;\n\t\ttry {\n\t\t\ttheClass = Thread.currentThread().getContextClassLoader().loadClass(aClassName) ;\n\t\t} catch (ClassNotFoundException e) {\n\t\t\ttheClass = null ;\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tif (theClass != null && \n\t\t\t\tTechnicalComponent.class.isAssignableFrom(theClass) &&\n\t\t\t\ttheClass.isInterface()) {\n\t\t\ttechnicalInterfaces.add((Class<? extends TechnicalComponent>) theClass) ;\n\t\t}\n\t}\n\treturn technicalInterfaces;\n}", "path": "src\\org\\sonata\\framework\\common\\TechnicalComponentLoader.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "// TODO R\u00e9cup\u00e9rer \u00e0 la fois le proxy de la connexion ainsi que l'objet symphony\n// destination, pour la validation.\n// Implique d'avoir D'ABORD g\u00e9r\u00e9 le lien OI-OM\n// TODO G\u00e9rer l'instanciation du proxy, ou la r\u00e9cup\u00e9ration de l'instance !\n", "func_signal": "private void validateConnection(final SymphonyObject proc) throws InvalidSOConnection", "code": "{\n\t// R\u00e8gle structurelle : si proc est un Objet Entit\u00e9 et \n\t\n\t\n\t// On acquiert la Translation associ\u00e9e \u00e0 cet appel\n\t// On v\u00e9rifie s'il existe d\u00e9j\u00e0 une connexion\n\t// associ\u00e9e \u00e0 ce processus\n\t\n\tif (connectionTable.get(proc) == null) {\n\t\t// On v\u00e9rifie le Wrapper auquel proc est associ\u00e9\n\t\t// D'abord, on doit s'assurer que la classe de proc existe dans la\n\t\t// table de r\u00e9f\u00e9rences\n\t\tString nomObjetSymphony = getSObjectName(proc) ;\n\t\tBrokerReference brkRef = referenceTable.get(nomObjetSymphony);\n\t\t\n\t\tif (brkRef == null) {\n\t\t\tthrow new InvalidSOConnection(\"L'objet \"\n\t\t\t\t\t+ proc\n\t\t\t\t\t+ \" n'existe pas dans la table des connexions et n'est pas pr\u00e9sent dans\"\n\t\t\t\t\t+ \" la table de r\u00e9f\u00e9rence des connexions\") ;\n\t\t}\n\t\t\n\t\t// La connexion est invalide si le proxy de l'objet ne correspond pas \u00e0 celui\n\t\t// de la r\u00e9f\u00e9rence. Il est \u00e0 not\u00e9 que les Objet Processus ne n\u00e9cessitent pas cette\n\t\t// v\u00e9rification\n\t\t// TODO voir si la v\u00e9rification est n\u00e9cessaire dans le cadre des tests unitaires...\n\t\tif ((!isUnitTesting) && !(proc instanceof ProcessObject) && !brkRef.getProxy().getName().equals(getSObjectName(currentRequest.getProxy()))) {\n\t\t\tthrow new InvalidSOConnection(\"Le proxy \" + getSObjectName(currentRequest.getProxy()) + \"ne correspond pas \u00e0\"\n\t\t\t\t\t+ \" la r\u00e9f\u00e9rence : \" + brkRef.getProxy().getName()) ;\n\t\t}\n\t\t\n\t\t\tlogger.fine(\"La classe \" + nomObjetSymphony + \" de \" + proc\n\t\t\t\t\t+ \"est renseign\u00e9e dans la table de r\u00e9f\u00e9rence\");\n\n\t\t\t// Il s'agit ensuite de r\u00e9cup\u00e9rer l'instance des processus et\n\t\t\t// translation associ\u00e9s\n\t\t\t// (au besoin, il sera n\u00e9cessaire de cr\u00e9er le processus)\n\n\t\t\t\n\t\t\t\tClass<ConnectionTranslation> translationClass = (Class<ConnectionTranslation>) brkRef.getTranslation();\n\t\t\t\tConstructor<ConnectionTranslation> constructor = null ;\n\t\t\t\tConnectionTranslation translationObject = null ;\n\t\t\t\n\t\t\ttry {\n\t\t\t\t//\t On r\u00e9cup\u00e8re le constructeur du wrapper\n\t\t\t\tconstructor = translationClass\n\t\t\t\t\t\t.getConstructor(SymphonyObject.class, ProcessObject.class);\n\t\t\t\t\n\t\t\t} catch (SecurityException e) {\n\t\t\t\tlogger.severe(\n\t\t\t\t\t\t\"Erreur de s\u00e9curit\u00e9 (acc\u00e8s \u00e0 la m\u00e9thode)\\n\"\n\t\t\t\t\t\t\t\t+ e.getMessage());\n\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\tlogger.severe(\n\t\t\t\t\t\t\"La m\u00e9thode n'existe pas\\n\" + e.getMessage());\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (constructor != null) {\n\t\t\t\ttranslationObject = (ConnectionTranslation) constructor\n\t\t\t\t\t\t.newInstance(proc, currentRequest.getProxy());\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.getAnonymousLogger().severe(\n\t\t\t\t\t\t\"La translation \" + brkRef.getTranslation()\n\t\t\t\t\t\t\t\t+ \" n'a pas pu \u00eatre instanci\u00e9e\\n\"\n\t\t\t\t\t\t\t\t+ e.getMessage());\n\t\t\t} \n\n\t\t\tconnectionTable.put(proc, translationObject);\n\t\t\tlogger.fine(\n\t\t\t\t\t\t\t\"La connection entre \"\n\t\t\t\t\t\t\t\t\t+ proc\n\t\t\t\t\t\t\t\t\t+ \" et ses cibles est assur\u00e9e au travers de la translation \"\n\t\t\t\t\t\t\t\t\t+ translationObject\n\t\t\t\t\t\t\t\t\t+ \"\\nEnregistrement dans la connectionTable r\u00e9ussi\");\n\t\t}\n\t\n}", "path": "src\\org\\sonata\\framework\\control\\invoker\\Invoker.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * This method actually replicates the responsibility of a DAO\n */\n", "func_signal": "private void loadConnection()", "code": "{\n\tloader.addReference(sourceReference, translation, targetReference) ;\n\ttry {\n\t\ttheInvoker.loadConnections() ;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "test\\sonata\\test\\unit\\invoker\\InvokerTest.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Returns the unique instance of the <code>AbstractEntityFactory</code>\n * @return an instance of <code>AbstractEntityFactory</code>\n */\n", "func_signal": "public synchronized static AbstractEntityFactory getInstance()", "code": "{\n\tif (instance == null) {\n\t\tinstance = new AbstractEntityFactory() ;\n\t}\n\treturn instance ;\n}", "path": "src\\org\\sonata\\framework\\common\\entity\\AbstractEntityFactory.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Parses the JSON string described in <code>aText</code> and fills\n * the field <code>theReferences</code> from the abstract class.\n * \n * @param aText\n * @throws JSONException if there was a parsing error\n * @throws ClassNotFoundException if the classes to be loaded could not be found\n */\n", "func_signal": "public void parseJSONText(String aText) throws JSONException, ClassNotFoundException", "code": "{\n\tClassLoader classLoader = Thread.currentThread().getContextClassLoader() ;\n\tjsonParser = new JSONObject(aText) ;\n\tJSONArray theConnections = jsonParser.getJSONArray(\"SOConnections\") ;\n\t\n\tfor (int i = 0 ; i < theConnections.length() ; i++) {\n\t\tBrokerReference newBrokerReference = new BrokerReference() ;\n\t\tJSONObject aConnection = theConnections.getJSONObject(i) ;\n\t\tJSONObject theSource = aConnection.getJSONObject(\"source\") ;\n\t\tnewBrokerReference.setSource(classLoader.loadClass(theSource.getString(\"name\")),\n\t\t\t\tReferenceType.valueOf(theSource.getString(\"type\"))) ;\n\t\t\n\t\tJSONArray theDestinations = aConnection.getJSONArray(\"destinations\") ;\n\t\t\n\t\tfor (int j = 0 ; j < theDestinations.length() ; j++) {\n\t\t\tJSONObject aDestination = theDestinations.getJSONObject(j) ;\n\t\t\t\n\t\t\tReferenceElement destinationElement = new ReferenceElement(classLoader.loadClass(aDestination.getString(\"name\")),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tReferenceType.valueOf(aDestination.getString(\"type\"))) ;\n\t\t\tnewBrokerReference.addDestination(destinationElement) ;\n\t\t}\n\t\t\n\t\tnewBrokerReference.setTranslation((Class<? extends ConnectionTranslation>) classLoader.loadClass(aConnection.getString(\"translation\"))) ;\n\t\t\n\t\tthis.theReferences.add(newBrokerReference) ;\n\t}\n}", "path": "src\\org\\sonata\\framework\\control\\invoker\\JSONInvokerDAO.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * This method actually replicates the responsibility of a DAO\n */\n", "func_signal": "private void loadConnection()", "code": "{\n\tloader.addReference(sourceReference, translation, targetReference, targetReference2) ;\n\ttry {\n\t\ttheInvoker.loadConnections() ;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "test\\sonata\\test\\integration\\BasicSonataOperations.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Loads the file named <code>filename</code>, parses the content \n * and fills the field <code>theReferences</code> from the abstract\n * class.\n * \n * @param filename\n * @throws IOException\tif the file could not be found or read\n * @throws JSONException if there was a parsing error\n * @throws ClassNotFoundException if the classes to be loaded could not be found\n */\n", "func_signal": "public void loadJSONFile(String filename) throws IOException, JSONException, ClassNotFoundException", "code": "{\n\tFile f = new File(filename) ;\n\tif (!f.exists() || !f.isFile()) throw new FileNotFoundException() ;\n\tFileReader fr = new FileReader(f) ;\n\tBufferedReader br = new BufferedReader(fr) ;\n\tStringBuilder sb = new StringBuilder(\"\");\n\twhile (br.ready()) {\n\t\t\tsb.append(br.readLine()) ;\n\t}\n\tparseJSONText(sb.toString()) ;\n}", "path": "src\\org\\sonata\\framework\\control\\invoker\\JSONInvokerDAO.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Parses the data contained within <code>dataStructure</code> and loads all the\n * classes defined therein. \n * @throws ParsingException\n * @throws ClassNotFoundException\n */\n", "func_signal": "private void parseReferences() throws ClassNotFoundException", "code": "{\n\tClassLoader classLoader = Thread.currentThread().getContextClassLoader() ;\n\tClass<SymphonyObject> sourceClass = null ;\n\tClass<ConnectionTranslation> translationClass = null ;\n\t\n\tfor (Element element : dataStructure) {\n\t\t\tBrokerReference newReference = new BrokerReference() ;\n\t\t\t\n\t\t\tString sourceTypeString = element.getChild(\"source\").getAttributeValue(\"type\") ;\n\t\t\tReferenceType sourceType = ReferenceType.valueOf(sourceTypeString) ;\n\t\t\tsourceClass = (Class<SymphonyObject>) classLoader.loadClass(element\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getChild(\"source\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getAttributeValue(\"name\")) ;\n\t\t\tnewReference.setSource(new ReferenceElement(sourceClass, sourceType)) ;\n\t\t\t\n\t\t\tfor (Element dest : (List<Element>)element.getChildren(\"destination\")) {\n\t\t\t\tClass<SymphonyObject> clazz = (Class<SymphonyObject>) classLoader.loadClass(dest\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getAttributeValue(\"name\")) ;\n\t\t\t\tnewReference.addDestination(new ReferenceElement(clazz, ReferenceType.valueOf(dest\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getAttributeValue(\"type\")))) ;\n\t\t\t}\n\t\t\t\n\t\t\tElement proxyElement = element.getChild(\"proxy\") ;\n\t\t\tClass<ProcessObject> proxy = null ;\n\t\t\t// If the Invoker is in unitTesting mode, this attribute could be undefined\n\t\t\tif (proxyElement != null) {\n\t\t\t\tproxy = (Class<ProcessObject>) classLoader.loadClass(proxyElement\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getAttributeValue(\"name\")) ;\n\t\t\t}\n\t\t\tnewReference.setProxy(proxy) ;\n\t\t\t\n\t\t\ttranslationClass = (Class<ConnectionTranslation>) classLoader.loadClass(element\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getChild(\"translation\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getAttributeValue(\"name\"));\n\t\t\tnewReference.setTranslation(translationClass) ;\n\t\t\t\n\t\t\ttheReferences.add(newReference) ;\n\n\t}\n\t\n}", "path": "src\\org\\sonata\\framework\\control\\invoker\\XMLInvokerDAO.java", "repo_name": "ggodet-bar/Sonata", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Encode a raw byte array to a Base64 String.\n *\n * @param in Byte array to encode.\n * @param len Length of Base64 lines. 0 means no line breaks.\n**/\n", "func_signal": "public static String encode(byte[] in, int len) throws IOException", "code": "{\n    ByteArrayOutputStream baos = null;\n    ByteArrayInputStream bais = null;\n    try\n    {\n        baos = new ByteArrayOutputStream();\n        bais = new ByteArrayInputStream(in);\n        encode(bais, baos, len);\n        // ASCII byte array to String\n        return (new String(baos.toByteArray()));\n    }\n    finally\n    {\n        if (baos != null)\n        {\n            baos.close();\n        }\n        if (bais != null)\n        {\n            bais.close();\n        }\n    }\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\util\\Util.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "/**\n * This method recursive checks the target module and all of its transitive\n * dependency modules to verify that they do not violate a singleton constraint.\n * If the target module is a singleton, then it checks that againts existing\n * singletons. Then it checks all current unresolved candidates recursively.\n *\n * @param targetModule the module that is the root of the tree of modules to check.\n * @param singletonMap the current map of singleton symbolic names.\n * @param moduleMap a map to cache the package space of each module.\n * @param cycleMap a map to detect cycles.\n * @param candidatesMap a map containing the all candidates to resolve all\n *        dependencies for all modules.\n * @return <tt>true</tt> if all candidates are consistent with respect to singletons,\n *         <tt>false</tt> otherwise.\n**/\n", "func_signal": "private boolean areCandidatesSingletonConsistent(\n    ResolverState state, IModule targetModule,\n    Map singletonMap, Map moduleMap, Map cycleMap, Map candidatesMap)", "code": "{\n    // If we are in a cycle, then assume true for now.\n    if (cycleMap.get(targetModule) != null)\n    {\n        return true;\n    }\n\n    // Record the target module in the cycle map.\n    cycleMap.put(targetModule, targetModule);\n\n    // Check to see if the targetModule violates a singleton.\n    // If not and it is a singleton, then add it to the singleton\n    // map since it will constrain other singletons.\n    String symName = targetModule.getSymbolicName();\n    boolean isSingleton = isSingleton(targetModule);\n    if (isSingleton && singletonMap.containsKey(symName))\n    {\n        return false;\n    }\n    else if (isSingleton)\n    {\n        singletonMap.put(symName, symName);\n    }\n\n    // Get the package space of the target module.\n    Map pkgMap = null;\n    try\n    {\n        pkgMap = getModulePackages(moduleMap, targetModule, candidatesMap);\n    }\n    catch (ResolveException ex)\n    {\n        m_logger.log(\n            Logger.LOG_DEBUG,\n            \"Constraint violation for \" + targetModule + \" detected.\",\n            ex);\n        return false;\n    }\n\n    // Loop through all of the target module's accessible packages and\n    // verify that all package sources are consistent.\n    for (Iterator iter = pkgMap.entrySet().iterator(); iter.hasNext(); )\n    {\n        Map.Entry entry = (Map.Entry) iter.next();\n        // Get the resolved package, which contains the set of all\n        // package sources for the given package.\n        ResolvedPackage rp = (ResolvedPackage) entry.getValue();\n        // Loop through each package source and test if it is consistent.\n        for (int srcIdx = 0; srcIdx < rp.m_sourceList.size(); srcIdx++)\n        {\n            // If the module for this package source is not resolved, then\n            // we have to see if resolving it would violate a singleton\n            // constraint.\n            PackageSource ps = (PackageSource) rp.m_sourceList.get(srcIdx);\n            if (!ps.m_module.isResolved())\n            {\n                return areCandidatesSingletonConsistent(state, ps.m_module, singletonMap, moduleMap, cycleMap, candidatesMap);\n            }\n        }\n    }\n\n    return true;\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\searchpolicy\\Resolver.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "/**\n * Returns all bundles that have a specified symbolic name and whose\n * version is in the specified version range. If no version range is\n * specified, then all bundles with the specified symbolic name are\n * returned. The array is sorted in descending version order.\n * \n * @param symbolicName the target symbolic name.\n * @param versionRange the target version range.\n * @return an array of matching bundles sorted in descending version order.\n**/\n", "func_signal": "public Bundle[] getBundles(String symbolicName, String versionRange)", "code": "{\n    VersionRange vr = (versionRange == null) ? null : VersionRange.parse(versionRange);\n    Bundle[] bundles = m_felix.getBundles();\n    List list = new ArrayList();\n    for (int i = 0; (bundles != null) && (i < bundles.length); i++)\n    {\n        String sym = bundles[i].getSymbolicName();\n        if ((sym != null) && sym.equals(symbolicName))\n        {\n            Version v = ((BundleImpl) bundles[i]).getCurrentModule().getVersion();\n            if ((vr == null) || vr.isInRange(v))\n            {\n                list.add(bundles[i]);\n            }\n        }\n    }\n    if (list.size() == 0)\n    {\n        return null;\n    }\n    bundles = (Bundle[]) list.toArray(new Bundle[list.size()]);\n    Arrays.sort(bundles,new Comparator() {\n        public int compare(Object o1, Object o2)\n        {\n            Version v1 = ((BundleImpl) o1).getCurrentModule().getVersion();\n            Version v2 = ((BundleImpl) o2).getCurrentModule().getVersion();\n            // Compare in reverse order to get descending sort.\n            return v2.compareTo(v1);\n        }\n    });\n    return bundles;\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\PackageAdminImpl.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "/**\n * <p>\n * Constructs a module event with the specified <tt>ModuleManager</tt>\n * as the event source and the specified module as the subject of\n * the event.\n * </p>\n * @param mgr the source of the event.\n * @param module the subject of the event.\n**/\n", "func_signal": "public ModuleEvent(IModule module)", "code": "{\n    super(module);\n    m_module = module;\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\moduleloader\\ModuleEvent.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "/**\n * Converts a module identifier to a bundle identifier. Module IDs\n * are typically <tt>&lt;bundle-id&gt;.&lt;revision&gt;</tt>; this\n * method returns only the portion corresponding to the revision.\n**/\n", "func_signal": "public static int getModuleRevisionFromModuleId(String id)", "code": "{\n    try\n    {\n        int index = id.indexOf('.');\n        if (index >= 0)\n        {\n            return Integer.parseInt(id.substring(index + 1));\n        }\n    }\n    catch (NumberFormatException ex)\n    {\n    }\n    return -1;\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\util\\Util.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "/**\n * This methd checks to see if the target module and any of the candidate\n * modules to resolve its dependencies violate any singleton constraints.\n * Actually, it just creates a map of resolved singleton modules and then\n * delegates all checking to another recursive method.\n *\n * @param targetModule the module that is the root of the tree of modules to check.\n * @param moduleMap a map to cache the package space of each module.\n * @param candidatesMap a map containing the all candidates to resolve all\n *        dependencies for all modules.\n * @return <tt>true</tt> if all candidates are consistent with respect to singletons,\n *         <tt>false</tt> otherwise.\n**/\n", "func_signal": "private boolean isSingletonConsistent(\n    ResolverState state, IModule targetModule, Map moduleMap, Map candidatesMap)", "code": "{\n    // Create a map of all resolved singleton modules.\n    Map singletonMap = new HashMap();\n    IModule[] modules = state.getModules();\n    for (int i = 0; (modules != null) && (i < modules.length); i++)\n    {\n        if (modules[i].isResolved() && isSingleton(modules[i]))\n        {\n            String symName = modules[i].getSymbolicName();\n            singletonMap.put(symName, symName);\n        }\n    }\n\n    return areCandidatesSingletonConsistent(\n        state, targetModule, singletonMap, moduleMap, new HashMap(), candidatesMap);\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\searchpolicy\\Resolver.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "//\n// Bundle activator methods.\n//\n", "func_signal": "public void start(BundleContext context)", "code": "{\n    // Only register the framework with the URL Handlers service\n    // if the service is enabled.\n    boolean enable = (m_configMap.get(\n            FelixConstants.SERVICE_URLHANDLERS_PROP) == null)\n            ? true\n            : !m_configMap.get(FelixConstants.SERVICE_URLHANDLERS_PROP).equals(\"false\");\n    URLHandlers.registerFrameworkInstance(m_framework, enable);\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\URLHandlersActivator.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "/**\n * This method determines if the requesting bundle is able to cast\n * the specified service reference based on class visibility rules\n * of the underlying modules.\n * @param requester The bundle requesting the service.\n * @param ref The service in question.\n * @return <tt>true</tt> if the requesting bundle is able to case\n *         the service object to a known type.\n**/\n", "func_signal": "public static boolean isServiceAssignable(Bundle requester, ServiceReference ref)", "code": "{\n    // Boolean flag.\n    boolean allow = true;\n    // Get the service's objectClass property.\n    String[] objectClass = (String[]) ref.getProperty(FelixConstants.OBJECTCLASS);\n\n    // The the service reference is not assignable when the requesting\n    // bundle is wired to a different version of the service object.\n    // NOTE: We are pessimistic here, if any class in the service's\n    // objectClass is not usable by the requesting bundle, then we\n    // disallow the service reference.\n    for (int classIdx = 0; (allow) && (classIdx < objectClass.length); classIdx++)\n    {\n        if (!ref.isAssignableTo(requester, objectClass[classIdx]))\n        {\n            allow = false;\n        }\n    }\n    return allow;\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\util\\Util.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "/**\n * Returns true if the specified module is a singleton\n * (i.e., directive singleton:=true in Bundle-SymbolicName).\n *\n * @param module the module to check for singleton status.\n * @return true if the module is a singleton, false otherwise.\n**/\n", "func_signal": "private static boolean isSingleton(IModule module)", "code": "{\n    final ICapability[] modCaps = Util.getCapabilityByNamespace(\n            module, Capability.MODULE_NAMESPACE);\n    if (modCaps == null || modCaps.length == 0)\n    {\n        // this should never happen?\n        return false;\n    }\n    final R4Directive[] dirs = ((Capability) modCaps[0]).getDirectives();\n    for (int dirIdx = 0; (dirs != null) && (dirIdx < dirs.length); dirIdx++)\n    {\n        if (dirs[dirIdx].getName().equalsIgnoreCase(Constants.SINGLETON_DIRECTIVE)\n            && Boolean.valueOf(dirs[dirIdx].getValue()).booleanValue())\n        {\n            return true;\n        }\n    }\n    return false;\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\searchpolicy\\Resolver.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "//\n// Private methods.\n//\n", "func_signal": "private void initialize(boolean byReference, InputStream is)\n    throws Exception", "code": "{\n    try\n    {\n        // If the revision directory exists, then we don't\n        // need to initialize since it has already been done.\n        if (BundleCache.getSecureAction().fileExists(getRevisionRootDir()))\n        {\n            return;\n        }\n\n        // Create revision directory.\n        if (!BundleCache.getSecureAction().mkdir(getRevisionRootDir()))\n        {\n            getLogger().log(\n                Logger.LOG_ERROR,\n                getClass().getName() + \": Unable to create revision directory.\");\n            throw new IOException(\"Unable to create archive directory.\");\n        }\n\n        if (!byReference)\n        {\n            if (is == null)\n            {\n                // Do it the manual way to have a chance to\n                // set request properties such as proxy auth.\n                URL url = new URL(getLocation());\n                URLConnection conn = url.openConnection();\n\n                // Support for http proxy authentication.\n                String auth = BundleCache.getSecureAction()\n                    .getSystemProperty(\"http.proxyAuth\", null);\n                if ((auth != null) && (auth.length() > 0))\n                {\n                    if (\"http\".equals(url.getProtocol()) ||\n                        \"https\".equals(url.getProtocol()))\n                    {\n                        String base64 = Util.base64Encode(auth);\n                        conn.setRequestProperty(\n                            \"Proxy-Authorization\", \"Basic \" + base64);\n                    }\n                }\n                is = BundleCache.getSecureAction().getURLConnectionInputStream(conn);\n            }\n\n            // Save the bundle jar file.\n            BundleCache.copyStreamToFile(is, m_bundleFile);\n        }\n    }\n    finally\n    {\n        if (is != null) is.close();\n    }\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\cache\\JarRevision.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "// TODO: RESOLVER - Fix this return type.\n// Return candidate wire in result[0] and wire map in result[1]\n", "func_signal": "public Object[] resolveDynamicImport(ResolverState state, IModule importer, String pkgName)\n    throws ResolveException", "code": "{\n    PackageSource candidate = null;\n    Map resolvedModuleWireMap = null;\n\n    // We can only search dynamic imports if the bundle\n    // doesn't import, export, nor require the package in\n    // question. Check these conditions first.\n    if (isDynamicImportAllowed(importer, pkgName))\n    {\n        // Loop through the importer's dynamic requirements to determine if\n        // there is a matching one for the package from which we want to\n        // load a class.\n        IRequirement[] dynamics = importer.getDynamicRequirements();\n        for (int dynIdx = 0; (dynamics != null) && (dynIdx < dynamics.length); dynIdx++)\n        {\n            IRequirement target =\n                createDynamicRequirement(dynamics[dynIdx], pkgName);\n            if (target != null)\n            {\n                // See if there is a candidate exporter that satisfies the\n                // constrained dynamic requirement.\n                try\n                {\n                    // Get \"resolved\" and \"unresolved\" candidates and put\n                    // the \"resolved\" candidates first.\n                    PackageSource[] resolved = state.getResolvedCandidates(target);\n                    PackageSource[] unresolved = state.getUnresolvedCandidates(target);\n                    PackageSource[] candidates = new PackageSource[resolved.length + unresolved.length];\n                    System.arraycopy(resolved, 0, candidates, 0, resolved.length);\n                    System.arraycopy(unresolved, 0, candidates, resolved.length, unresolved.length);\n\n                    // Take the first candidate that can resolve.\n                    for (int candIdx = 0;\n                        (candidate == null) && (candIdx < candidates.length);\n                        candIdx++)\n                    {\n                        try\n                        {\n                            // If a map is returned, then the candidate resolved\n                            // consistently with the importer.\n                            resolvedModuleWireMap =\n                                resolveDynamicImportCandidate(\n                                    state, candidates[candIdx].m_module, importer);\n                            if (resolvedModuleWireMap != null)\n                            {\n                                candidate = candidates[candIdx];\n                            }\n                        }\n                        catch (ResolveException ex)\n                        {\n                            // Ignore candidates that cannot resolve.\n                        }\n                    }\n\n                    if (candidate != null)\n                    {\n                        // Create the wire and add it to the module.\n                        Object[] result = new Object[2];\n                        result[0] = new R4Wire(\n                            importer, dynamics[dynIdx], candidate.m_module, candidate.m_capability);\n                        result[1] = resolvedModuleWireMap;\n                        return result;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    m_logger.log(Logger.LOG_ERROR, \"Unable to dynamically import package.\", ex);\n                }\n            }\n        }\n    }\n\n    return null;\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\searchpolicy\\Resolver.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "/**\n * <p>\n * This constructor is used for creating new archives when a bundle is\n * installed into the framework. Each archive receives a logger, a root\n * directory, its associated bundle identifier, the associated bundle\n * location string, and an input stream from which to read the bundle\n * content. The root directory is where any required state can be\n * stored. The input stream may be null, in which case the location is\n * used as an URL to the bundle content.\n * </p>\n * @param logger the logger to be used by the archive.\n * @param archiveRootDir the archive root directory for storing state.\n * @param id the bundle identifier associated with the archive.\n * @param location the bundle location string associated with the archive.\n * @param is input stream from which to read the bundle content.\n * @throws Exception if any error occurs.\n**/\n", "func_signal": "public BundleArchive(Logger logger, File archiveRootDir, long id,\n    String location, InputStream is) throws Exception", "code": "{\n    m_logger = logger;\n    m_archiveRootDir = archiveRootDir;\n    m_id = id;\n    if (m_id <= 0)\n    {\n        throw new IllegalArgumentException(\n            \"Bundle ID cannot be less than or equal to zero.\");\n    }\n    m_originalLocation = location;\n\n    // Save state.\n    initialize();\n\n    // Add a revision for the content.\n    revise(m_originalLocation, is);\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\cache\\BundleArchive.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "/**\n * <p>\n * Calculates the module's set of accessible packages and their\n * assocaited package sources. This method uses the current candidates\n * for resolving the module's requirements from the candidate map\n * to calculate the module's accessible packages.\n * </p>\n * @param module the module whose package map is to be calculated.\n * @param candidatesMap the map of potential candidates for resolving\n *        the module's requirements.\n * @return a map of the packages accessible to the specified module where\n *         the key of the map is the package name and the value of the map\n *         is a ResolvedPackage.\n**/\n", "func_signal": "private static Map calculateModulePackages(IModule module, Map candidatesMap)\n    throws ResolveException", "code": "{\n//System.out.println(\"calculateModulePackages(\"+module+\")\");\n    Map importedPackages = calculateImportedPackages(module, candidatesMap);\n    Map exportedPackages = calculateExportedPackages(module);\n    Map requiredPackages = calculateRequiredPackages(module, candidatesMap);\n\n    // Merge exported packages into required packages. If a package is both\n    // exported and required, then append the exported source to the end of\n    // the require package sources; otherwise just add it to the package map.\n    for (Iterator i = exportedPackages.entrySet().iterator(); i.hasNext(); )\n    {\n        Map.Entry entry = (Map.Entry) i.next();\n        ResolvedPackage rpReq = (ResolvedPackage) requiredPackages.get(entry.getKey());\n        if (rpReq != null)\n        {\n            // Merge exported and required packages, avoiding duplicate\n            // package sources and maintaining ordering.\n            ResolvedPackage rpExport = (ResolvedPackage) entry.getValue();\n            rpReq.merge(rpExport);\n        }\n        else\n        {\n            requiredPackages.put(entry.getKey(), entry.getValue());\n        }\n    }\n\n    // Merge imported packages into required packages. Imports overwrite\n    // any required and/or exported package.\n    for (Iterator i = importedPackages.entrySet().iterator(); i.hasNext(); )\n    {\n        Map.Entry entry = (Map.Entry) i.next();\n        requiredPackages.put(entry.getKey(), entry.getValue());\n    }\n\n    return requiredPackages;\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\searchpolicy\\Resolver.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "/**\n * Checks if the provided module definition declares a fragment host.\n *\n * @param module the module to check\n * @return <code>true</code> if the module declares a fragment host, <code>false</code>\n *      otherwise.\n */\n", "func_signal": "public static boolean isFragment(IModule module)", "code": "{\n    Map headerMap = module.getHeaders();\n    return headerMap.containsKey(Constants.FRAGMENT_HOST);\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\util\\Util.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "/**\n * Converts a module identifier to a bundle identifier. Module IDs\n * are typically <tt>&lt;bundle-id&gt;.&lt;revision&gt;</tt>; this\n * method returns only the portion corresponding to the bundle ID.\n**/\n", "func_signal": "public static long getBundleIdFromModuleId(String id)", "code": "{\n    try\n    {\n        String bundleId = (id.indexOf('.') >= 0)\n            ? id.substring(0, id.indexOf('.')) : id;\n        return Long.parseLong(bundleId);\n    }\n    catch (NumberFormatException ex)\n    {\n        return -1;\n    }\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\util\\Util.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "/**\n * The OSGi specification states that package refreshes happen\n * asynchronously; this is the run() method for the package\n * refreshing thread.\n**/\n", "func_signal": "public void run()", "code": "{\n    // This thread loops forever, thus it should\n    // be a daemon thread.\n    while (true)\n    {\n        Bundle[] bundles = null;\n        synchronized (this)\n        {\n            // Wait for a refresh request.\n            while (m_reqBundles == null)\n            {\n                // Terminate the thread if requested to do so (see stop()).\n                if (m_thread == null)\n                {\n                    return;\n                }\n                \n                try\n                {\n                    wait();\n                }\n                catch (InterruptedException ex)\n                {\n                }\n            }\n\n            // Get the bundles parameter for the current refresh request.\n            bundles = m_reqBundles[0];\n        }\n\n        // Perform refresh.\n        // NOTE: We don't catch any exceptions here, because\n        // the invoked method shields us from exceptions by\n        // catching Throwables when its invokes callbacks.\n        m_felix.refreshPackages(bundles);\n\n        // Remove the first request since it is now completed.\n        synchronized (this)\n        {\n            if (m_reqBundles.length == 1)\n            {\n                m_reqBundles = null;\n            }\n            else\n            {\n                Bundle[][] newReqBundles = new Bundle[m_reqBundles.length - 1][];\n                System.arraycopy(m_reqBundles, 1,\n                    newReqBundles, 0, m_reqBundles.length - 1);\n                m_reqBundles = newReqBundles;\n            }\n        }\n    }\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\PackageAdminImpl.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "/**\n * <p>\n * This constructor is called when an archive for a bundle is being\n * reconstructed when the framework is restarted. Each archive receives\n * a logger, a root directory, and its associated bundle identifier.\n * The root directory is where any required state can be stored.\n * </p>\n * @param logger the logger to be used by the archive.\n * @param archiveRootDir the archive root directory for storing state.\n * @param id the bundle identifier associated with the archive.\n * @throws Exception if any error occurs.\n**/\n", "func_signal": "public BundleArchive(Logger logger, File archiveRootDir)\n    throws Exception", "code": "{\n    m_logger = logger;\n    m_archiveRootDir = archiveRootDir;\n\n    // Add a revision for each one that already exists in the file\n    // system. The file system might contain more than one revision\n    // if the bundle was updated in a previous session, but the\n    // framework was not refreshed; this might happen if the framework\n    // did not exit cleanly. We must create the existing revisions so\n    // that they can be properly purged.\n    int revisionCount = 0;\n    while (true)\n    {\n        // Count the number of existing revision directories, which\n        // will be in a directory named like:\n        //     \"${REVISION_DIRECTORY)${refresh-count}.${revision-count}\"\n        File revisionRootDir = new File(m_archiveRootDir,\n            REVISION_DIRECTORY + getRefreshCount() + \".\" + revisionCount);\n        if (!BundleCache.getSecureAction().fileExists(revisionRootDir))\n        {\n            break;\n        }\n\n        // Increment the revision count.\n        revisionCount++;\n    }\n\n    // If there are multiple revisions in the file system, then create\n    // an array that is big enough to hold all revisions minus one; the\n    // call below to revise() will add the most recent revision. NOTE: We\n    // do not actually need to add a real revision object for the older\n    // revisions since they will be purged immediately on framework startup.\n    if (revisionCount > 1)\n    {\n        m_revisions = new BundleRevision[revisionCount - 1];\n    }\n\n    // Add the revision object for the most recent revision. We first try\n    // to read the location from the current revision - if that fails we\n    // likely have an old bundle cache and read the location the old way.\n    // The next revision will update the bundle cache.\n    revise(getRevisionLocation(revisionCount - 1), null);\n}\n\n/**\n * <p>\n * Returns the bundle identifier associated with this archive.\n * </p>\n * @return the bundle identifier associated with this archive.\n * @throws Exception if any error occurs.\n**/\npublic synchronized long getId() throws Exception\n{\n    if (m_id > 0)\n    {\n        return m_id;\n    }\n\n    // Read bundle location.\n    InputStream is = null;\n    BufferedReader br = null;\n    try\n    {\n        is = BundleCache.getSecureAction()\n            .getFileInputStream(new File(m_archiveRootDir, BUNDLE_ID_FILE));\n        br = new BufferedReader(new InputStreamReader(is));\n        m_id = Long.parseLong(br.readLine());\n    }\n    catch (FileNotFoundException ex)\n    {\n        // HACK: Get the bundle identifier from the archive root directory\n        // name, which is of the form \"bundle<id>\" where <id> is the bundle\n        // identifier numbers. This is a hack to deal with old archives that\n        // did not save their bundle identifier, but instead had it passed\n        // into them. Eventually, this can be removed.\n        m_id = Long.parseLong(\n            m_archiveRootDir.getName().substring(\n                BundleCache.BUNDLE_DIR_PREFIX.length()));\n    }\n    finally\n    {\n        if (br != null) br.close();\n        if (is != null) is.close();\n    }\n\n    return m_id;\n}\n\n/**\n * <p>\n * Returns the location string associated with this archive.\n * </p>\n * @return the location string associated with this archive.\n * @throws Exception if any error occurs.\n**/\npublic synchronized String getLocation() throws Exception\n{\n    if (m_originalLocation != null)\n    {\n        return m_originalLocation;\n    }\n\n    // Read bundle location.\n    InputStream is = null;\n    BufferedReader br = null;\n    try\n    {\n        is = BundleCache.getSecureAction()\n            .getFileInputStream(new File(m_archiveRootDir, BUNDLE_LOCATION_FILE));\n        br = new BufferedReader(new InputStreamReader(is));\n        m_originalLocation = br.readLine();\n        return m_originalLocation;\n    }\n    finally\n    {\n        if (br != null) br.close();\n        if (is != null) is.close();\n    }\n}\n\n/**\n * <p>\n * Returns the persistent state of this archive. The value returned is\n * one of the following: <tt>Bundle.INSTALLED</tt>, <tt>Bundle.ACTIVE</tt>,\n * or <tt>Bundle.UNINSTALLED</tt>.\n * </p>\n * @return the persistent state of this archive.\n * @throws Exception if any error occurs.\n**/\npublic synchronized int getPersistentState() throws Exception\n{\n    if (m_persistentState >= 0)\n    {\n        return m_persistentState;\n    }\n\n    // Get bundle state file.\n    File stateFile = new File(m_archiveRootDir, BUNDLE_STATE_FILE);\n\n    // If the state file doesn't exist, then\n    // assume the bundle was installed.\n    if (!BundleCache.getSecureAction().fileExists(stateFile))\n    {\n        return Bundle.INSTALLED;\n    }\n\n    // Read the bundle state.\n    InputStream is = null;\n    BufferedReader br = null;\n    try\n    {\n        is = BundleCache.getSecureAction()\n            .getFileInputStream(stateFile);\n        br = new BufferedReader(new InputStreamReader(is));\n        String s = br.readLine();\n        if ((s != null) && s.equals(ACTIVE_STATE))\n        {\n            m_persistentState = Bundle.ACTIVE;\n        }\n        else if ((s != null) && s.equals(UNINSTALLED_STATE))\n        {\n            m_persistentState = Bundle.UNINSTALLED;\n        }\n        else\n        {\n            m_persistentState = Bundle.INSTALLED;\n        }\n        return m_persistentState;\n    }\n    finally\n    {\n        if (br != null) br.close();\n        if (is != null) is.close();\n    }\n}\n\n/**\n * <p>\n * Sets the persistent state of this archive. The value is\n * one of the following: <tt>Bundle.INSTALLED</tt>, <tt>Bundle.ACTIVE</tt>,\n * or <tt>Bundle.UNINSTALLED</tt>.\n * </p>\n * @param state the persistent state value to set for this archive.\n * @throws Exception if any error occurs.\n**/\npublic synchronized void setPersistentState(int state) throws Exception\n{\n    // Write the bundle state.\n    OutputStream os = null;\n    BufferedWriter bw = null;\n    try\n    {\n        os = BundleCache.getSecureAction()\n            .getFileOutputStream(new File(m_archiveRootDir, BUNDLE_STATE_FILE));\n        bw = new BufferedWriter(new OutputStreamWriter(os));\n        String s = null;\n        switch (state)\n        {\n            case Bundle.ACTIVE:\n                s = ACTIVE_STATE;\n                break;\n            case Bundle.UNINSTALLED:\n                s = UNINSTALLED_STATE;\n                break;\n            default:\n                s = INSTALLED_STATE;\n                break;\n        }\n        bw.write(s, 0, s.length());\n        m_persistentState = state;\n    }\n    catch (IOException ex)\n    {\n        m_logger.log(\n            Logger.LOG_ERROR,\n            getClass().getName() + \": Unable to record state - \" + ex);\n        throw ex;\n    }\n    finally\n    {\n        if (bw != null) bw.close();\n        if (os != null) os.close();\n    }\n}\n\n/**\n * <p>\n * Returns the start level of this archive.\n * </p>\n * @return the start level of this archive.\n * @throws Exception if any error occurs.\n**/\npublic synchronized int getStartLevel() throws Exception\n{\n    if (m_startLevel >= 0)\n    {\n        return m_startLevel;\n    }\n\n    // Get bundle start level file.\n    File levelFile = new File(m_archiveRootDir, BUNDLE_START_LEVEL_FILE);\n\n    // If the start level file doesn't exist, then\n    // return an error.\n    if (!BundleCache.getSecureAction().fileExists(levelFile))\n    {\n        return -1;\n    }\n\n    // Read the bundle start level.\n    InputStream is = null;\n    BufferedReader br= null;\n    try\n    {\n        is = BundleCache.getSecureAction()\n            .getFileInputStream(levelFile);\n        br = new BufferedReader(new InputStreamReader(is));\n        m_startLevel = Integer.parseInt(br.readLine());\n        return m_startLevel;\n    }\n    finally\n    {\n        if (br != null) br.close();\n        if (is != null) is.close();\n    }\n}\n\n/**\n * <p>\n * Sets the the start level of this archive this archive.\n * </p>\n * @param level the start level to set for this archive.\n * @throws Exception if any error occurs.\n**/\npublic synchronized void setStartLevel(int level) throws Exception\n{\n    // Write the bundle start level.\n    OutputStream os = null;\n    BufferedWriter bw = null;\n    try\n    {\n        os = BundleCache.getSecureAction()\n            .getFileOutputStream(new File(m_archiveRootDir, BUNDLE_START_LEVEL_FILE));\n        bw = new BufferedWriter(new OutputStreamWriter(os));\n        String s = Integer.toString(level);\n        bw.write(s, 0, s.length());\n        m_startLevel = level;\n    }\n    catch (IOException ex)\n    {\n        m_logger.log(\n            Logger.LOG_ERROR,\n            getClass().getName() + \": Unable to record start level - \" + ex);\n        throw ex;\n    }\n    finally\n    {\n        if (bw != null) bw.close();\n        if (os != null) os.close();\n    }\n}\n\n/**\n * <p>\n * Returns the last modification time of this archive.\n * </p>\n * @return the last modification time of this archive.\n * @throws Exception if any error occurs.\n**/\npublic synchronized long getLastModified() throws Exception\n{\n    if (m_lastModified >= 0)\n    {\n        return m_lastModified;\n    }\n\n    // Get bundle last modification time file.\n    File lastModFile = new File(m_archiveRootDir, BUNDLE_LASTMODIFIED_FILE);\n\n    // If the last modification file doesn't exist, then\n    // return an error.\n    if (!BundleCache.getSecureAction().fileExists(lastModFile))\n    {\n        return 0;\n    }\n\n    // Read the bundle start level.\n    InputStream is = null;\n    BufferedReader br= null;\n    try\n    {\n        is = BundleCache.getSecureAction().getFileInputStream(lastModFile);\n        br = new BufferedReader(new InputStreamReader(is));\n        m_lastModified = Long.parseLong(br.readLine());\n        return m_lastModified;\n    }\n    finally\n    {\n        if (br != null) br.close();\n        if (is != null) is.close();\n    }\n}\n\n/**\n * <p>\n * Sets the the last modification time of this archive.\n * </p>\n * @param lastModified The time of the last modification to set for\n *      this archive. According to the OSGi specification this time is\n *      set each time a bundle is installed, updated or uninstalled.\n *\n * @throws Exception if any error occurs.\n**/\npublic synchronized void setLastModified(long lastModified) throws Exception\n{\n    // Write the bundle last modification time.\n    OutputStream os = null;\n    BufferedWriter bw = null;\n    try\n    {\n        os = BundleCache.getSecureAction()\n            .getFileOutputStream(new File(m_archiveRootDir, BUNDLE_LASTMODIFIED_FILE));\n        bw = new BufferedWriter(new OutputStreamWriter(os));\n        String s = Long.toString(lastModified);\n        bw.write(s, 0, s.length());\n        m_lastModified = lastModified;\n    }\n    catch (IOException ex)\n    {\n        m_logger.log(\n            Logger.LOG_ERROR,\n            getClass().getName() + \": Unable to record last modification time - \" + ex);\n        throw ex;\n    }\n    finally\n    {\n        if (bw != null) bw.close();\n        if (os != null) os.close();\n    }\n}\n\n/**\n * <p>\n * Returns a <tt>File</tt> object corresponding to the data file\n * of the relative path of the specified string.\n * </p>\n * @return a <tt>File</tt> object corresponding to the specified file name.\n * @throws Exception if any error occurs.\n**/\npublic synchronized File getDataFile(String fileName) throws Exception\n{\n    // Do some sanity checking.\n    if ((fileName.length() > 0) && (fileName.charAt(0) == File.separatorChar))\n        throw new IllegalArgumentException(\"The data file path must be relative, not absolute.\");\n    else if (fileName.indexOf(\"..\") >= 0)\n        throw new IllegalArgumentException(\"The data file path cannot contain a reference to the \\\"..\\\" directory.\");\n\n    // Get bundle data directory.\n    File dataDir = new File(m_archiveRootDir, DATA_DIRECTORY);\n    // Create the data directory if necessary.\n    if (!BundleCache.getSecureAction().fileExists(dataDir))\n    {\n        if (!BundleCache.getSecureAction().mkdir(dataDir))\n        {\n            throw new IOException(\"Unable to create bundle data directory.\");\n        }\n    }\n\n    // Return the data file.\n    return new File(dataDir, fileName);\n}\n\n/**\n * <p>\n * Returns the number of revisions available for this archive.\n * </p>\n * @return tthe number of revisions available for this archive.\n**/\npublic synchronized int getRevisionCount()\n{\n    return (m_revisions == null) ? 0 : m_revisions.length;\n}\n\n/**\n * <p>\n * Returns the revision object for the specified revision.\n * </p>\n * @return the revision object for the specified revision.\n**/\npublic synchronized BundleRevision getRevision(int i)\n{\n    if ((i >= 0) && (i < getRevisionCount()))\n    {\n        return m_revisions[i];\n    }\n    return null;\n}\n\n/**\n * <p>\n * This method adds a revision to the archive. The revision is created\n * based on the specified location and/or input stream.\n * </p>\n * @param location the location string associated with the revision.\n * @throws Exception if any error occurs.\n**/\npublic synchronized void revise(String location, InputStream is)\n    throws Exception\n{\n    // If we have an input stream, then we have to use it\n    // no matter what the update location is, so just ignore\n    // the update location and set the location to be input\n    // stream.\n    if (is != null)\n    {\n        location = \"inputstream:\";\n    }\n    BundleRevision revision = createRevisionFromLocation(location, is);\n    if (revision == null)\n    {\n        throw new Exception(\"Unable to revise archive.\");\n    }\n\n    setRevisionLocation(location, (m_revisions == null) ? 0 : m_revisions.length);\n\n    // Add new revision to revision array.\n    if (m_revisions == null)\n    {\n        m_revisions = new BundleRevision[] { revision };\n    }\n    else\n    {\n        BundleRevision[] tmp = new BundleRevision[m_revisions.length + 1];\n        System.arraycopy(m_revisions, 0, tmp, 0, m_revisions.length);\n        tmp[m_revisions.length] = revision;\n        m_revisions = tmp;\n    }\n}\n\n/**\n * <p>\n * This method undoes the previous revision to the archive; this method will\n * remove the latest revision from the archive. This method is only called\n * when there are problems during an update after the revision has been\n * created, such as errors in the update bundle's manifest. This method\n * can only be called if there is more than one revision, otherwise there\n * is nothing to undo.\n * </p>\n * @return true if the undo was a success false if there is no previous revision\n * @throws Exception if any error occurs.\n */\npublic synchronized boolean rollbackRevise() throws Exception\n{\n    // Can only undo the revision if there is more than one.\n    if (getRevisionCount() <= 1)\n    {\n        return false;\n    }\n\n    String location = getRevisionLocation(m_revisions.length - 2);\n\n    try\n    {\n        m_revisions[m_revisions.length - 1].dispose();\n    }\n    catch(Exception ex)\n    {\n       m_logger.log(Logger.LOG_ERROR, getClass().getName() +\n           \": Unable to dispose latest revision\", ex);\n    }\n\n    File revisionDir = new File(m_archiveRootDir, REVISION_DIRECTORY +\n        getRefreshCount() + \".\" + (m_revisions.length - 1));\n\n    if (BundleCache.getSecureAction().fileExists(revisionDir))\n    {\n        BundleCache.deleteDirectoryTree(revisionDir);\n    }\n\n    BundleRevision[] tmp = new BundleRevision[m_revisions.length - 1];\n    System.arraycopy(m_revisions, 0, tmp, 0, m_revisions.length - 1);\n    m_revisions = tmp;\n\n    return true;\n}\n\nprivate synchronized String getRevisionLocation(int revision) throws Exception\n{\n    InputStream is = null;\n    BufferedReader br = null;\n    try\n    {\n        is = BundleCache.getSecureAction().getFileInputStream(new File(\n            new File(m_archiveRootDir, REVISION_DIRECTORY +\n            getRefreshCount() + \".\" + revision), REVISION_LOCATION_FILE));\n\n        br = new BufferedReader(new InputStreamReader(is));\n        return br.readLine();\n    }\n    finally\n    {\n        if (br != null) br.close();\n        if (is != null) is.close();\n    }\n}\n\nprivate synchronized void setRevisionLocation(String location, int revision) throws Exception\n{\n    // Save current revision location.\n    OutputStream os = null;\n    BufferedWriter bw = null;\n    try\n    {\n        os = BundleCache.getSecureAction()\n            .getFileOutputStream(new File(\n                new File(m_archiveRootDir, REVISION_DIRECTORY +\n                getRefreshCount() + \".\" + revision), REVISION_LOCATION_FILE));\n        bw = new BufferedWriter(new OutputStreamWriter(os));\n        bw.write(location, 0, location.length());\n    }\n    finally\n    {\n        if (bw != null) bw.close();\n        if (os != null) os.close();\n    }\n}\n\n/**\n * <p>\n * This method removes all old revisions associated with the archive\n * and keeps only the current revision.\n * </p>\n * @throws Exception if any error occurs.\n**/\npublic synchronized void purge() throws Exception\n{\n    // Get the current refresh count.\n    long refreshCount = getRefreshCount();\n    // Get the current revision count.\n    int count = getRevisionCount();\n\n    // Dispose and delete all but the current revision.\n    File revisionDir = null;\n    for (int i = 0; i < count - 1; i++)\n    {\n        // Dispose of the revision, but this might be null in certain\n        // circumstances, such as if this bundle archive was created\n        // for an existing bundle that was updated, but not refreshed\n        // due to a system crash; see the constructor code for details.\n        if (m_revisions[i] != null)\n        {\n            m_revisions[i].dispose();\n        }\n        revisionDir = new File(m_archiveRootDir, REVISION_DIRECTORY + refreshCount + \".\" + i);\n        if (BundleCache.getSecureAction().fileExists(revisionDir))\n        {\n            BundleCache.deleteDirectoryTree(revisionDir);\n        }\n    }\n\n    // We still need to dispose the current revision, but we\n    // don't want to delete it, because we want to rename it\n    // to the new refresh level.\n    m_revisions[count - 1].dispose();\n\n    // Save the current revision location for use later when\n    // we recreate the revision.\n    String location = getRevisionLocation(count -1);\n\n    // Increment the refresh count.\n    setRefreshCount(refreshCount + 1);\n\n    // Rename the current revision directory to be the zero revision\n    // of the new refresh level.\n    File currentDir = new File(m_archiveRootDir, REVISION_DIRECTORY + (refreshCount + 1) + \".0\");\n    revisionDir = new File(m_archiveRootDir, REVISION_DIRECTORY + refreshCount + \".\" + (count - 1));\n    BundleCache.getSecureAction().renameFile(revisionDir, currentDir);\n\n    // Null the revision array since they are all invalid now.\n    m_revisions = null;\n    // Finally, recreate the revision for the current location.\n    BundleRevision revision = createRevisionFromLocation(location, null);\n    // Create new revision array.\n    m_revisions = new BundleRevision[] { revision };\n}\n\n/**\n * <p>\n * This method disposes removes the bundle archive directory.\n * </p>\n * @throws Exception if any error occurs.\n**/\n/* package */ void dispose() throws Exception\n{\n    if (!BundleCache.deleteDirectoryTree(m_archiveRootDir))\n    {\n        m_logger.log(\n            Logger.LOG_ERROR,\n            getClass().getName()\n                + \": Unable to delete archive directory - \"\n                + m_archiveRootDir);\n    }\n}\n\n/**\n * <p>\n * Initializes the bundle archive object by creating the archive\n * root directory and saving the initial state.\n * </p>\n * @throws Exception if any error occurs.\n**/\nprivate void initialize() throws Exception\n{\n    OutputStream os = null;\n    BufferedWriter bw = null;\n\n    try\n    {\n        // If the archive directory exists, then we don't\n        // need to initialize since it has already been done.\n        if (BundleCache.getSecureAction().fileExists(m_archiveRootDir))\n        {\n            return;\n        }\n\n        // Create archive directory, if it does not exist.\n        if (!BundleCache.getSecureAction().mkdir(m_archiveRootDir))\n        {\n            m_logger.log(\n                Logger.LOG_ERROR,\n                getClass().getName() + \": Unable to create archive directory.\");\n            throw new IOException(\"Unable to create archive directory.\");\n        }\n\n        // Save id.\n        os = BundleCache.getSecureAction()\n            .getFileOutputStream(new File(m_archiveRootDir, BUNDLE_ID_FILE));\n        bw = new BufferedWriter(new OutputStreamWriter(os));\n        bw.write(Long.toString(m_id), 0, Long.toString(m_id).length());\n        bw.close();\n        os.close();\n\n        // Save location string.\n        os = BundleCache.getSecureAction()\n            .getFileOutputStream(new File(m_archiveRootDir, BUNDLE_LOCATION_FILE));\n        bw = new BufferedWriter(new OutputStreamWriter(os));\n        bw.write(m_originalLocation, 0, m_originalLocation.length());\n    }\n    finally\n    {\n        if (bw != null) bw.close();\n        if (os != null) os.close();\n    }\n}\n\n/**\n * <p>\n * Returns the current location associated with the bundle archive,\n * which is the last location from which the bundle was updated. It is\n * necessary to keep track of this so it is possible to determine what\n * kind of revision needs to be created when recreating revisions when\n * the framework restarts.\n * </p>\n * @return the last update location.\n * @throws Exception if any error occurs.\n**/\nprivate String getCurrentLocation() throws Exception\n{\n    if (m_currentLocation != null)\n    {\n        return m_currentLocation;\n    }\n\n    // Read current location.\n    InputStream is = null;\n    BufferedReader br = null;\n    try\n    {\n        is = BundleCache.getSecureAction()\n            .getFileInputStream(new File(m_archiveRootDir, CURRENT_LOCATION_FILE));\n        br = new BufferedReader(new InputStreamReader(is));\n        m_currentLocation = br.readLine();\n        return m_currentLocation;\n    }\n    catch (FileNotFoundException ex)\n    {\n        return getLocation();\n    }\n    finally\n    {\n        if (br != null) br.close();\n        if (is != null) is.close();\n    }\n}\n\n/**\n * <p>\n * Set the current location associated with the bundle archive,\n * which is the last location from which the bundle was updated. It is\n * necessary to keep track of this so it is possible to determine what\n * kind of revision needs to be created when recreating revisions when\n * the framework restarts.\n * </p>\n * @throws Exception if any error occurs.\n**/\nprivate void setCurrentLocation(String location) throws Exception\n{\n    // Save current location.\n    OutputStream os = null;\n    BufferedWriter bw = null;\n    try\n    {\n        os = BundleCache.getSecureAction()\n            .getFileOutputStream(new File(m_archiveRootDir, CURRENT_LOCATION_FILE));\n        bw = new BufferedWriter(new OutputStreamWriter(os));\n        bw.write(location, 0, location.length());\n        m_currentLocation = location;\n    }\n    finally\n    {\n        if (bw != null) bw.close();\n        if (os != null) os.close();\n    }\n}\n\n/**\n * <p>\n * Creates a revision based on the location string and/or input stream.\n * </p>\n * @return the location string associated with this archive.\n**/\nprivate BundleRevision createRevisionFromLocation(String location, InputStream is)\n    throws Exception\n{\n    // The revision directory is named using the refresh count and\n    // the revision count. The revision count is obvious, but the\n    // refresh count is less obvious. This is necessary due to how\n    // native libraries are handled in Java; needless to say, every\n    // time a bundle is refreshed we must change the name of its\n    // native libraries so that we can reload them. Thus, we use the\n    // refresh counter as a way to change the name of the revision\n    // directory to give native libraries new absolute names.\n    File revisionRootDir = new File(m_archiveRootDir,\n        REVISION_DIRECTORY + getRefreshCount() + \".\" + getRevisionCount());\n\n    BundleRevision result = null;\n\n    try\n    {\n        // Check if the location string represents a reference URL.\n        if ((location != null) && location.startsWith(REFERENCE_PROTOCOL))\n        {\n            // Reference URLs only support the file protocol.\n            location = location.substring(REFERENCE_PROTOCOL.length());\n            if (!location.startsWith(FILE_PROTOCOL))\n            {\n                throw new IOException(\"Reference URLs can only be files: \" + location);\n            }\n\n            // Decode any URL escaped sequences.\n            location = URLDecoder.decode(location);\n\n            // Make sure the referenced file exists.\n            File file = new File(location.substring(FILE_PROTOCOL.length()));\n            if (!BundleCache.getSecureAction().fileExists(file))\n            {\n                throw new IOException(\"Referenced file does not exist: \" + file);\n            }\n\n            // If the referenced file is a directory, then create a directory\n            // revision; otherwise, create a JAR revision with the reference\n            // flag set to true.\n            if (BundleCache.getSecureAction().isFileDirectory(file))\n            {\n                result = new DirectoryRevision(m_logger, revisionRootDir, location);\n            }\n            else\n            {\n                result = new JarRevision(m_logger, revisionRootDir, location, true);\n            }\n        }\n        else if (location.startsWith(INPUTSTREAM_PROTOCOL))\n        {\n            // Assume all input streams point to JAR files.\n            result = new JarRevision(m_logger, revisionRootDir, location, false, is);\n        }\n        else\n        {\n            // Anything else is assumed to be a URL to a JAR file.\n            result = new JarRevision(m_logger, revisionRootDir, location, false);\n        }\n    }\n    catch (Exception ex)\n    {\n        if (BundleCache.getSecureAction().fileExists(revisionRootDir))\n        {\n            if (!BundleCache.deleteDirectoryTree(revisionRootDir))\n            {\n                m_logger.log(\n                    Logger.LOG_ERROR,\n                    getClass().getName()\n                        + \": Unable to delete revision directory - \"\n                        + revisionRootDir);\n            }\n        }\n        throw ex;\n    }\n\n    return result;\n}\n\n/**\n * This utility method is used to retrieve the current refresh\n * counter value for the bundle. This value is used when generating\n * the bundle revision directory name where native libraries are extracted.\n * This is necessary because Sun's JVM requires a one-to-one mapping\n * between native libraries and class loaders where the native library\n * is uniquely identified by its absolute path in the file system. This\n * constraint creates a problem when a bundle is refreshed, because it\n * gets a new class loader. Using the refresh counter to generate the name\n * of the bundle revision directory resolves this problem because each time\n * bundle is refresh, the native library will have a unique name.\n * As a result of the unique name, the JVM will then reload the\n * native library without a problem.\n**/\nprivate long getRefreshCount() throws Exception\n{\n    // If we have already read the refresh counter file,\n    // then just return the result.\n    if (m_refreshCount >= 0)\n    {\n        return m_refreshCount;\n    }\n\n    // Get refresh counter file.\n    File counterFile = new File(m_archiveRootDir, REFRESH_COUNTER_FILE);\n\n    // If the refresh counter file doesn't exist, then\n    // assume the counter is at zero.\n    if (!BundleCache.getSecureAction().fileExists(counterFile))\n    {\n        return 0;\n    }\n\n    // Read the bundle refresh counter.\n    InputStream is = null;\n    BufferedReader br = null;\n    try\n    {\n        is = BundleCache.getSecureAction()\n            .getFileInputStream(counterFile);\n        br = new BufferedReader(new InputStreamReader(is));\n        long counter = Long.parseLong(br.readLine());\n        return counter;\n    }\n    finally\n    {\n        if (br != null) br.close();\n        if (is != null) is.close();\n    }\n}\n\n/**\n * This utility method is used to retrieve the current refresh\n * counter value for the bundle. This value is used when generating\n * the bundle revision directory name where native libraries are extracted.\n * This is necessary because Sun's JVM requires a one-to-one mapping\n * between native libraries and class loaders where the native library\n * is uniquely identified by its absolute path in the file system. This\n * constraint creates a problem when a bundle is refreshed, because it\n * gets a new class loader. Using the refresh counter to generate the name\n * of the bundle revision directory resolves this problem because each time\n * bundle is refresh, the native library will have a unique name.\n * As a result of the unique name, the JVM will then reload the\n * native library without a problem.\n**/\nprivate void setRefreshCount(long counter)\n    throws Exception\n{\n    // Get refresh counter file.\n    File counterFile = new File(m_archiveRootDir, REFRESH_COUNTER_FILE);\n\n    // Write the refresh counter.\n    OutputStream os = null;\n    BufferedWriter bw = null;\n    try\n    {\n        os = BundleCache.getSecureAction()\n            .getFileOutputStream(counterFile);\n        bw = new BufferedWriter(new OutputStreamWriter(os));\n        String s = Long.toString(counter);\n        bw.write(s, 0, s.length());\n        m_refreshCount = counter;\n    }\n    catch (IOException ex)\n    {\n        m_logger.log(\n            Logger.LOG_ERROR,\n            getClass().getName() + \": Unable to write refresh counter: \" + ex);\n        throw ex;\n    }\n    finally\n    {\n        if (bw != null) bw.close();\n        if (os != null) os.close();\n    }\n}\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\cache\\BundleArchive.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "//\n// Utility methods.\n//\n", "func_signal": "private static IModule[] shrinkModuleArray(IModule[] modules)", "code": "{\n    if (modules == null)\n    {\n        return m_emptyModules;\n    }\n\n    // Move all non-null values to one end of the array.\n    int lower = 0;\n    for (int i = 0; i < modules.length; i++)\n    {\n        if (modules[i] != null)\n        {\n            modules[lower++] = modules[i];\n        }\n    }\n\n    if (lower == 0)\n    {\n        return m_emptyModules;\n    }\n\n    // Copy non-null values into a new array and return.\n    IModule[] newModules = new IModule[lower];\n    System.arraycopy(modules, 0, newModules, 0, lower);\n    return newModules;\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\searchpolicy\\Resolver.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "/**\n * <p>\n * This is a simple utility class that attempts to load the named\n * class using the class loader of the supplied class or\n * the class loader of one of its super classes or their implemented\n * interfaces. This is necessary during service registration to test\n * whether a given service object implements its declared service\n * interfaces.\n * </p>\n * <p>\n * To perform this test, the framework must try to load\n * the classes associated with the declared service interfaces, so\n * it must choose a class loader. The class loader of the registering\n * bundle cannot be used, since this disallows third parties to\n * register service on behalf of another bundle. Consequently, the\n * class loader of the service object must be used. However, this is\n * also not sufficient since the class loader of the service object\n * may not have direct access to the class in question.\n * </p>\n * <p>\n * The service object's class loader may not have direct access to\n * its service interface if it extends a super class from another\n * bundle which implements the service interface from an imported\n * bundle or if it implements an extension of the service interface\n * from another bundle which imports the base interface from another\n * bundle. In these cases, the service object's class loader only has\n * access to the super class's class or the extended service interface,\n * respectively, but not to the actual service interface.\n * </p>\n * <p>\n * Thus, it is necessary to not only try to load the service interface\n * class from the service object's class loader, but from the class\n * loaders of any interfaces it implements and the class loaders of\n * all super classes.\n * </p>\n * @param svcObj the class that is the root of the search.\n * @param name the name of the class to load.\n * @return the loaded class or <tt>null</tt> if it could not be\n *         loaded.\n**/\n", "func_signal": "public static Class loadClassUsingClass(Class clazz, String name)", "code": "{\n    Class loadedClass = null;\n\n    while (clazz != null)\n    {\n        // Get the class loader of the current class object.\n        ClassLoader loader = clazz.getClassLoader();\n        // A null class loader represents the system class loader.\n        loader = (loader == null) ? ClassLoader.getSystemClassLoader() : loader;\n        try\n        {\n            return loader.loadClass(name);\n        }\n        catch (ClassNotFoundException ex)\n        {\n            // Ignore and try interface class loaders.\n        }\n\n        // Try to see if we can load the class from\n        // one of the class's implemented interface\n        // class loaders.\n        Class[] ifcs = clazz.getInterfaces();\n        for (int i = 0; i < ifcs.length; i++)\n        {\n            loadedClass = loadClassUsingClass(ifcs[i], name);\n            if (loadedClass != null)\n            {\n                return loadedClass;\n            }\n        }\n\n        // Try to see if we can load the class from\n        // the super class class loader.\n        clazz = clazz.getSuperclass();\n    }\n\n    return null;\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\util\\Util.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "/**\n * Returns all the capabilities from a module that has a specified namespace.\n *\n * @param module    module providing capabilities\n * @param namespace capability namespace\n * @return array of matching capabilities or empty if none found\n */\n", "func_signal": "public static ICapability[] getCapabilityByNamespace(IModule module, String namespace)", "code": "{\n    final List matching = new ArrayList();\n    final ICapability[] caps = module.getCapabilities();\n    for (int capIdx = 0; (caps != null) && (capIdx < caps.length); capIdx++)\n    {\n        if (caps[capIdx].getNamespace().equals(namespace))\n        {\n            matching.add(caps[capIdx]);\n        }\n    }\n    return (ICapability[]) matching.toArray(new ICapability[matching.size()]);\n}", "path": "lib\\osgi\\felix\\org.apache.felix.framework-1.8.1\\src\\main\\java\\org\\apache\\felix\\framework\\util\\Util.java", "repo_name": "mstine/polyglot-osgi", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 46441}
{"docstring": "/**\n * Construct a JSONArray from an array\n * @throws JSONException If not an array.\n */\n", "func_signal": "public JSONArray(Object array) throws JSONException", "code": "{\n    this();\n    if (array.getClass().isArray()) {\n        int length = Array.getLength(array);\n        for (int i = 0; i < length; i += 1) {\n            this.put(Array.get(array, i));\n        }\n    } else {\n        throw new JSONException(\"JSONArray initial value should be a string or collection or array.\");\n    }\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Get the int value associated with an index.\n *\n * @param index The index must be between 0 and length() - 1.\n * @return      The value.\n * @throws   JSONException If the key is not found or if the value cannot\n *  be converted to a number.\n *  if the value cannot be converted to a number.\n */\n", "func_signal": "public int getInt(int index) throws JSONException", "code": "{\n    Object o = get(index);\n    return o instanceof Number ?\n            ((Number)o).intValue() : (int)getDouble(index);\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Append a double value. This increases the array's length by one.\n *\n * @param value A double value.\n * @throws JSONException if the value is not finite.\n * @return this.\n */\n", "func_signal": "public JSONArray put(double value) throws JSONException", "code": "{\n    Double d = new Double(value);\n    JSONObject.testValidity(d);\n    put(d);\n    return this;\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a\n * JSONObject which is produced from a Map.\n * @param value A Map value.\n * @return      this.\n */\n", "func_signal": "public JSONArray put(Map value)", "code": "{\n    put(new JSONObject(value));\n    return this;\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Get the double value associated with an index.\n *\n * @param index The index must be between 0 and length() - 1.\n * @return      The value.\n * @throws   JSONException If the key is not found or if the value cannot\n *  be converted to a number.\n */\n", "func_signal": "public double getDouble(int index) throws JSONException", "code": "{\n    Object o = get(index);\n    try {\n        return o instanceof Number ?\n            ((Number)o).doubleValue() :\n            Double.valueOf((String)o).doubleValue();\n    } catch (Exception e) {\n        throw new JSONException(\"JSONArray[\" + index +\n            \"] is not a number.\");\n    }\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Put or replace an object value in the JSONArray. If the index is greater\n *  than the length of the JSONArray, then null elements will be added as\n *  necessary to pad it out.\n * @param index The subscript.\n * @param value The value to put into the array. The value should be a\n *  Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the\n *  JSONObject.NULL object.\n * @return this.\n * @throws JSONException If the index is negative or if the the value is\n *  an invalid number.\n */\n", "func_signal": "public JSONArray put(int index, Object value) throws JSONException", "code": "{\n    JSONObject.testValidity(value);\n    if (index < 0) {\n        throw new JSONException(\"JSONArray[\" + index + \"] not found.\");\n    }\n    if (index < length()) {\n        this.myArrayList.set(index, value);\n    } else {\n        while (index != length()) {\n            put(JSONObject.NULL);\n        }\n        put(value);\n    }\n    return this;\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Append an object value. This increases the array's length by one.\n * @param value An object value.  The value should be a\n *  Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the\n *  JSONObject.NULL object.\n * @return this.\n */\n", "func_signal": "public JSONArray put(Object value)", "code": "{\n    this.myArrayList.add(value);\n    return this;\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Get the boolean value associated with an index.\n * The string values \"true\" and \"false\" are converted to boolean.\n *\n * @param index The index must be between 0 and length() - 1.\n * @return      The truth.\n * @throws JSONException If there is no value for the index or if the\n *  value is not convertable to boolean.\n */\n", "func_signal": "public boolean getBoolean(int index) throws JSONException", "code": "{\n    Object o = get(index);\n    if (o.equals(Boolean.FALSE) ||\n            (o instanceof String &&\n            ((String)o).equalsIgnoreCase(\"false\"))) {\n        return false;\n    } else if (o.equals(Boolean.TRUE) ||\n            (o instanceof String &&\n            ((String)o).equalsIgnoreCase(\"true\"))) {\n        return true;\n    }\n    throw new JSONException(\"JSONArray[\" + index + \"] is not a Boolean.\");\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Append an long value. This increases the array's length by one.\n *\n * @param value A long value.\n * @return this.\n */\n", "func_signal": "public JSONArray put(long value)", "code": "{\n    put(new Long(value));\n    return this;\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Make a JSON text of this JSONArray. For compactness, no\n * unnecessary whitespace is added. If it is not possible to produce a\n * syntactically correct JSON text then null will be returned instead. This\n * could occur if the array contains an invalid number.\n * <p>\n * Warning: This method assumes that the data structure is acyclical.\n *\n * @return a printable, displayable, transmittable\n *  representation of the array.\n */\n", "func_signal": "public String toString()", "code": "{\n    try {\n        return '[' + join(\",\") + ']';\n    } catch (Exception e) {\n        return null;\n    }\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Write the contents of the JSONArray as JSON text to a writer.\n * For compactness, no whitespace is added.\n * <p>\n * Warning: This method assumes that the data structure is acyclical.\n *\n * @return The writer.\n * @throws JSONException\n */\n", "func_signal": "public Writer write(Writer writer) throws JSONException", "code": "{\n    try {\n        boolean b = false;\n        int     len = length();\n\n        writer.write('[');\n\n        for (int i = 0; i < len; i += 1) {\n            if (b) {\n                writer.write(',');\n            }\n            Object v = this.myArrayList.get(i);\n            if (v instanceof JSONObject) {\n                ((JSONObject)v).write(writer);\n            } else if (v instanceof JSONArray) {\n                ((JSONArray)v).write(writer);\n            } else {\n                writer.write(JSONObject.valueToString(v));\n            }\n            b = true;\n        }\n        writer.write(']');\n        return writer;\n    } catch (IOException e) {\n       throw new JSONException(e);\n    }\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Put or replace a double value. If the index is greater than the length of\n *  the JSONArray, then null elements will be added as necessary to pad\n *  it out.\n * @param index The subscript.\n * @param value A double value.\n * @return this.\n * @throws JSONException If the index is negative or if the value is\n * not finite.\n */\n", "func_signal": "public JSONArray put(int index, double value) throws JSONException", "code": "{\n    put(index, new Double(value));\n    return this;\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Get the optional string associated with an index.\n * The defaultValue is returned if the key is not found.\n *\n * @param index The index must be between 0 and length() - 1.\n * @param defaultValue     The default value.\n * @return      A String value.\n */\n", "func_signal": "public String optString(int index, String defaultValue)", "code": "{\n    Object o = opt(index);\n    return o != null ? o.toString() : defaultValue;\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Get the optional double value associated with an index.\n * The defaultValue is returned if there is no value for the index,\n * or if the value is not a number and cannot be converted to a number.\n *\n * @param index subscript\n * @param defaultValue     The default value.\n * @return      The value.\n */\n", "func_signal": "public double optDouble(int index, double defaultValue)", "code": "{\n    try {\n        return getDouble(index);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a\n * JSONArray which is produced from a Collection.\n * @param index The subscript.\n * @param value A Collection value.\n * @return      this.\n * @throws JSONException If the index is negative or if the value is\n * not finite.\n */\n", "func_signal": "public JSONArray put(int index, Collection value) throws JSONException", "code": "{\n    put(index, new JSONArray(value));\n    return this;\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Construct a JSONArray from a Collection.\n * @param collection     A Collection.\n */\n", "func_signal": "public JSONArray(Collection collection)", "code": "{\n    this.myArrayList = (collection == null) ?\n        new ArrayList() :\n        new ArrayList(collection);\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Get the optional long value associated with an index.\n * The defaultValue is returned if there is no value for the index,\n * or if the value is not a number and cannot be converted to a number.\n * @param index The index must be between 0 and length() - 1.\n * @param defaultValue     The default value.\n * @return      The value.\n */\n", "func_signal": "public long optLong(int index, long defaultValue)", "code": "{\n    try {\n        return getLong(index);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a\n * JSONArray which is produced from a Collection.\n * @param value A Collection value.\n * @return      this.\n */\n", "func_signal": "public JSONArray put(Collection value)", "code": "{\n    put(new JSONArray(value));\n    return this;\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Get the optional int value associated with an index.\n * The defaultValue is returned if there is no value for the index,\n * or if the value is not a number and cannot be converted to a number.\n * @param index The index must be between 0 and length() - 1.\n * @param defaultValue     The default value.\n * @return      The value.\n */\n", "func_signal": "public int optInt(int index, int defaultValue)", "code": "{\n    try {\n        return getInt(index);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Remove a index and close the hole.\n * @param index The index of the element to be removed.\n * @return The value that was associated with the index,\n * or null if there was no value.\n */\n", "func_signal": "public Object remove(int index)", "code": "{\n\tObject o = opt(index);\n    this.myArrayList.remove(index);\n    return o;\n}", "path": "org\\json\\JSONArray.java", "repo_name": "jamusj/OneWire", "stars": 1, "license": "None", "language": "java", "size": 496}
{"docstring": "/**\n * Construct a JSONObject from an Object using bean getters.\n * It reflects on all of the public methods of the object.\n * For each of the methods with no parameters and a name starting\n * with <code>\"get\"</code> or <code>\"is\"</code> followed by an uppercase letter,\n * the method is invoked, and a key and the value returned from the getter method\n * are put into the new JSONObject.\n *\n * The key is formed by removing the <code>\"get\"</code> or <code>\"is\"</code> prefix.\n * If the second remaining character is not upper case, then the first\n * character is converted to lower case.\n *\n * @param bean An object that has getter methods that should be used\n * to make a JSONObject.\n * @param includeSuperClass If true, include the super class properties.\n */\n", "func_signal": "public JSONObject(Object bean, boolean includeSuperClass)", "code": "{\n    this();\n    populateInternalMap(bean, includeSuperClass);\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Produce a string from a Number.\n * @param  n A Number\n * @return A String.\n * @throws JSONException If n is a non-finite number.\n */\n", "func_signal": "static public String numberToString(Number n)\n        throws JSONException", "code": "{\n    if (n == null) {\n        throw new JSONException(\"Null pointer\");\n    }\n    testValidity(n);\n\n// Shave off trailing zeros and decimal point, if possible.\n\n    String s = n.toString();\n    if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {\n        while (s.endsWith(\"0\")) {\n            s = s.substring(0, s.length() - 1);\n        }\n        if (s.endsWith(\".\")) {\n            s = s.substring(0, s.length() - 1);\n        }\n    }\n    return s;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Accumulate values under a key. It is similar to the put method except\n * that if there is already an object stored under the key then a\n * JSONArray is stored under the key to hold all of the accumulated values.\n * If there is already a JSONArray, then the new value is appended to it.\n * In contrast, the put method replaces the previous value.\n * @param key   A key string.\n * @param value An object to be accumulated under the key.\n * @return this.\n * @throws JSONException If the value is an invalid number\n *  or if the key is null.\n */\n", "func_signal": "public JSONObject accumulate(String key, Object value)\n        throws JSONException", "code": "{\n    testValidity(value);\n    Object o = opt(key);\n    if (o == null) {\n        put(key, value instanceof JSONArray ?\n                new JSONArray().put(value) :\n                value);\n    } else if (o instanceof JSONArray) {\n        ((JSONArray)o).put(value);\n    } else {\n        put(key, new JSONArray().put(o).put(value));\n    }\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Produce a string in double quotes with backslash sequences in all the\n * right places. A backslash will be inserted within </, allowing JSON\n * text to be delivered in HTML. In JSON text, a string cannot contain a\n * control character or an unescaped quote or backslash.\n * @param string A String\n * @return  A String correctly formatted for insertion in a JSON text.\n */\n", "func_signal": "public static String quote(String string)", "code": "{\n    if (string == null || string.length() == 0) {\n        return \"\\\"\\\"\";\n    }\n\n    char         b;\n    char         c = 0;\n    int          i;\n    int          len = string.length();\n    StringBuffer sb = new StringBuffer(len + 4);\n    String       t;\n\n    sb.append('\"');\n    for (i = 0; i < len; i += 1) {\n        b = c;\n        c = string.charAt(i);\n        switch (c) {\n        case '\\\\':\n        case '\"':\n            sb.append('\\\\');\n            sb.append(c);\n            break;\n        case '/':\n            if (b == '<') {\n                sb.append('\\\\');\n            }\n            sb.append(c);\n            break;\n        case '\\b':\n            sb.append(\"\\\\b\");\n            break;\n        case '\\t':\n            sb.append(\"\\\\t\");\n            break;\n        case '\\n':\n            sb.append(\"\\\\n\");\n            break;\n        case '\\f':\n            sb.append(\"\\\\f\");\n            break;\n        case '\\r':\n            sb.append(\"\\\\r\");\n            break;\n        default:\n            if (c < ' ' || (c >= '\\u0080' && c < '\\u00a0') ||\n                           (c >= '\\u2000' && c < '\\u2100')) {\n                t = \"000\" + Integer.toHexString(c);\n                sb.append(\"\\\\u\" + t.substring(t.length() - 4));\n            } else {\n                sb.append(c);\n            }\n        }\n    }\n    sb.append('\"');\n    return sb.toString();\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Get the int value associated with a key. If the number value is too\n * large for an int, it will be clipped.\n *\n * @param key   A key string.\n * @return      The integer value.\n * @throws   JSONException if the key is not found or if the value cannot\n *  be converted to an integer.\n */\n", "func_signal": "public int getInt(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    return o instanceof Number ?\n            ((Number)o).intValue() : (int)getDouble(key);\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Get an optional JSONArray associated with a key.\n * It returns null if there is no such key, or if its value is not a\n * JSONArray.\n *\n * @param key   A key string.\n * @return      A JSONArray which is the value.\n */\n", "func_signal": "public JSONArray optJSONArray(String key)", "code": "{\n    Object o = opt(key);\n    return o instanceof JSONArray ? (JSONArray)o : null;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Put a key/int pair in the JSONObject.\n *\n * @param key   A key string.\n * @param value An int which is the value.\n * @return this.\n * @throws JSONException If the key is null.\n */\n", "func_signal": "public JSONObject put(String key, int value) throws JSONException", "code": "{\n    put(key, new Integer(value));\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Put a key/value pair in the JSONObject, but only if the\n * key and the value are both non-null.\n * @param key   A key string.\n * @param value An object which is the value. It should be of one of these\n *  types: Boolean, Double, Integer, JSONArray, JSONObject, Long, String,\n *  or the JSONObject.NULL object.\n * @return this.\n * @throws JSONException If the value is a non-finite number.\n */\n", "func_signal": "public JSONObject putOpt(String key, Object value) throws JSONException", "code": "{\n    if (key != null && value != null) {\n        put(key, value);\n    }\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Get an optional JSONObject associated with a key.\n * It returns null if there is no such key, or if its value is not a\n * JSONObject.\n *\n * @param key   A key string.\n * @return      A JSONObject which is the value.\n */\n", "func_signal": "public JSONObject optJSONObject(String key)", "code": "{\n    Object o = opt(key);\n    return o instanceof JSONObject ? (JSONObject)o : null;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Append values to the array under a key. If the key does not exist in the\n * JSONObject, then the key is put in the JSONObject with its value being a\n * JSONArray containing the value parameter. If the key was already\n * associated with a JSONArray, then the value parameter is appended to it.\n * @param key   A key string.\n * @param value An object to be accumulated under the key.\n * @return this.\n * @throws JSONException If the key is null or if the current value\n *  associated with the key is not a JSONArray.\n */\n", "func_signal": "public JSONObject append(String key, Object value)\n        throws JSONException", "code": "{\n    testValidity(value);\n    Object o = opt(key);\n    if (o == null) {\n        put(key, new JSONArray().put(value));\n    } else if (o instanceof JSONArray) {\n        put(key, ((JSONArray)o).put(value));\n    } else {\n        throw new JSONException(\"JSONObject[\" + key +\n                \"] is not a JSONArray.\");\n    }\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Make a JSON text of this JSONObject. For compactness, no whitespace\n * is added. If this would not result in a syntactically correct JSON text,\n * then null will be returned instead.\n * <p>\n * Warning: This method assumes that the data structure is acyclical.\n *\n * @return a printable, displayable, portable, transmittable\n *  representation of the object, beginning\n *  with <code>{</code>&nbsp;<small>(left brace)</small> and ending\n *  with <code>}</code>&nbsp;<small>(right brace)</small>.\n */\n", "func_signal": "public String toString()", "code": "{\n    try {\n        Iterator     keys = keys();\n        StringBuffer sb = new StringBuffer(\"{\");\n\n        while (keys.hasNext()) {\n            if (sb.length() > 1) {\n                sb.append(',');\n            }\n            Object o = keys.next();\n            sb.append(quote(o.toString()));\n            sb.append(':');\n            sb.append(valueToString(this.map.get(o)));\n        }\n        sb.append('}');\n        return sb.toString();\n    } catch (Exception e) {\n        return null;\n    }\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Put a key/long pair in the JSONObject.\n *\n * @param key   A key string.\n * @param value A long which is the value.\n * @return this.\n * @throws JSONException If the key is null.\n */\n", "func_signal": "public JSONObject put(String key, long value) throws JSONException", "code": "{\n    put(key, new Long(value));\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Get an optional double associated with a key, or the\n * defaultValue if there is no such key or if its value is not a number.\n * If the value is a string, an attempt will be made to evaluate it as\n * a number.\n *\n * @param key   A key string.\n * @param defaultValue     The default.\n * @return      An object which is the value.\n */\n", "func_signal": "public double optDouble(String key, double defaultValue)", "code": "{\n    try {\n        Object o = opt(key);\n        return o instanceof Number ? ((Number)o).doubleValue() :\n            new Double((String)o).doubleValue();\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Put a key/value pair in the JSONObject, where the value will be a\n * JSONArray which is produced from a Collection.\n * @param key   A key string.\n * @param value A Collection value.\n * @return      this.\n * @throws JSONException\n */\n", "func_signal": "public JSONObject put(String key, Collection value) throws JSONException", "code": "{\n    put(key, new JSONArray(value));\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Produce a JSONArray containing the values of the members of this\n * JSONObject.\n * @param names A JSONArray containing a list of key strings. This\n * determines the sequence of the values in the result.\n * @return A JSONArray of values.\n * @throws JSONException If any of the values are non-finite numbers.\n */\n", "func_signal": "public JSONArray toJSONArray(JSONArray names) throws JSONException", "code": "{\n    if (names == null || names.length() == 0) {\n        return null;\n    }\n    JSONArray ja = new JSONArray();\n    for (int i = 0; i < names.length(); i += 1) {\n        ja.put(this.opt(names.getString(i)));\n    }\n    return ja;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Produce a string from a double. The string \"null\" will be returned if\n * the number is not finite.\n * @param  d A double.\n * @return A String.\n */\n", "func_signal": "static public String doubleToString(double d)", "code": "{\n    if (Double.isInfinite(d) || Double.isNaN(d)) {\n        return \"null\";\n    }\n\n// Shave off trailing zeros and decimal point, if possible.\n\n    String s = Double.toString(d);\n    if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {\n        while (s.endsWith(\"0\")) {\n            s = s.substring(0, s.length() - 1);\n        }\n        if (s.endsWith(\".\")) {\n            s = s.substring(0, s.length() - 1);\n        }\n    }\n    return s;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Construct a JSONObject from an Object using bean getters.\n * It reflects on all of the public methods of the object.\n * For each of the methods with no parameters and a name starting\n * with <code>\"get\"</code> or <code>\"is\"</code> followed by an uppercase letter,\n * the method is invoked, and a key and the value returned from the getter method\n * are put into the new JSONObject.\n *\n * The key is formed by removing the <code>\"get\"</code> or <code>\"is\"</code> prefix.\n * If the second remaining character is not upper case, then the first\n * character is converted to lower case.\n *\n * For example, if an object has a method named <code>\"getName\"</code>, and\n * if the result of calling <code>object.getName()</code> is <code>\"Larry Fine\"</code>,\n * then the JSONObject will contain <code>\"name\": \"Larry Fine\"</code>.\n *\n * @param bean An object that has getter methods that should be used\n * to make a JSONObject.\n */\n", "func_signal": "public JSONObject(Object bean)", "code": "{\n    this();\n    populateInternalMap(bean, false);\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Get an optional int value associated with a key,\n * or the default if there is no such key or if the value is not a number.\n * If the value is a string, an attempt will be made to evaluate it as\n * a number.\n *\n * @param key   A key string.\n * @param defaultValue     The default.\n * @return      An object which is the value.\n */\n", "func_signal": "public int optInt(String key, int defaultValue)", "code": "{\n    try {\n        return getInt(key);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Construct a JSONObject from a JSONTokener.\n * @param x A JSONTokener object containing the source string.\n * @throws JSONException If there is a syntax error in the source string\n *  or a duplicated key.\n */\n", "func_signal": "public JSONObject(JSONTokener x) throws JSONException", "code": "{\n    this();\n    char c;\n    String key;\n\n    if (x.nextClean() != '{') {\n        throw x.syntaxError(\"A JSONObject text must begin with '{'\");\n    }\n    for (;;) {\n        c = x.nextClean();\n        switch (c) {\n        case 0:\n            throw x.syntaxError(\"A JSONObject text must end with '}'\");\n        case '}':\n            return;\n        default:\n            x.back();\n            key = x.nextValue().toString();\n        }\n\n        /*\n         * The key is followed by ':'. We will also tolerate '=' or '=>'.\n         */\n\n        c = x.nextClean();\n        if (c == '=') {\n            if (x.next() != '>') {\n                x.back();\n            }\n        } else if (c != ':') {\n            throw x.syntaxError(\"Expected a ':' after a key\");\n        }\n        putOnce(key, x.nextValue());\n\n        /*\n         * Pairs are separated by ','. We will also tolerate ';'.\n         */\n\n        switch (x.nextClean()) {\n        case ';':\n        case ',':\n            if (x.nextClean() == '}') {\n                return;\n            }\n            x.back();\n            break;\n        case '}':\n            return;\n        default:\n            throw x.syntaxError(\"Expected a ',' or '}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Get an optional boolean associated with a key.\n * It returns the defaultValue if there is no such key, or if it is not\n * a Boolean or the String \"true\" or \"false\" (case insensitive).\n *\n * @param key              A key string.\n * @param defaultValue     The default.\n * @return      The truth.\n */\n", "func_signal": "public boolean optBoolean(String key, boolean defaultValue)", "code": "{\n    try {\n        return getBoolean(key);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "liseen/main-content-extractor", "stars": 1, "license": "None", "language": "java", "size": 393}
{"docstring": "/**\n * Begins playing a sound file in the background\n * @param filename path to a sound file in the /assets/ folder of your APK\n * @param continuous TRUE if the sound is to loop indefinately\n */\n", "func_signal": "public static void play(String filename, boolean continuous)", "code": "{\n\tif(_mediaPlayer != null)\n\t\t_mediaPlayer.release();\n\ttry {\n\t\t_mediaPlayer = new MediaPlayer();\n\t\tAssetFileDescriptor afd = Rokon.getRokon().getActivity().getAssets().openFd(filename);\n\t\t_mediaPlayer.setDataSource(afd.getFileDescriptor(), afd.getStartOffset(), afd.getLength());\n\t\t_mediaPlayer.setAudioStreamType(AudioManager.STREAM_ALARM);\n\t\t_mediaPlayer.prepare();\n\t\t_mediaPlayer.start();\n\t} catch (IOException e) {\n\t\tDebug.print(\"CANNOT FIND \" + filename + \" IN ASSETS\");\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\rokon\\RokonMusic.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Vibrates the device once, according to a pattern\n * @param pattern an array of vibrations\n */\n", "func_signal": "public void vibrate(long[] pattern)", "code": "{\n\tif(_vibrator == null)\n\t\tinitVibrator();\n\t_vibrator.vibrate(pattern, 1);\n}", "path": "src\\rokon\\Rokon.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * The first call you should make, creates the engine instance\n * @param activity the current activity\n * @return\n */\n", "func_signal": "public static Rokon createEngine(Activity activity)", "code": "{\n\tDebug.print(\"Rokon engine created\");\n\t_rokon = new Rokon(activity);\n\treturn _rokon;\t\t\n}", "path": "src\\rokon\\Rokon.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Rokon operates as a singleton, and can be retrieved statically\n * @return the current Rokon engine\n */\n", "func_signal": "public static Rokon getRokon()", "code": "{\n\tif(_rokon == null) {\n\t\tDebug.print(\"Rokon has not been created\");\n\t\tSystem.exit(0);\n\t}\n\treturn _rokon;\n}", "path": "src\\rokon\\Rokon.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * @return the system time, in milliseconds, for the current visible frame\n */\n", "func_signal": "public static long getTime()", "code": "{\n\tif(_timeMillis == 0)\n\t\t_timeMillis = System.currentTimeMillis();\n\treturn _timeMillis;\n}", "path": "src\\rokon\\Rokon.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Sets the wakelock, currently broken.\n * @param awake\n */\n", "func_signal": "public void setWakeLock(boolean awake)", "code": "{\n\tif(true)\n\t\treturn;\n\tDebug.print(\"Setting WakeLock \" + (awake == true ? \" on\" : \" off\"));\n\tif(_wakeLock == null) {\n\t    \t_powerManager = (PowerManager)_activity.getSystemService(Context.POWER_SERVICE);\n\t    \t_wakeLock = _powerManager.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE, \"Rokon\");\n\t}\n    if(awake)\n    \t_wakeLock.acquire();\n    else\n    \t_wakeLock.release();\n}", "path": "src\\rokon\\Rokon.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Fixes the screen in landscape mode\n */\n", "func_signal": "public void fixLandscape()", "code": "{\n\tDebug.print(\"Fixed in landscape mode\");\n\t_activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n}", "path": "src\\rokon\\Rokon.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * @param time in milliseconds, how often the Sprite blinks from one state to another\n * @param timeout in milliseconds, how long the Sprite will blink for\n * @param handler triggers onFinished() when timeout is reached \n */\n", "func_signal": "public Blink(int time, long timeout, BasicHandler handler)", "code": "{\n\t_lastBlink = Rokon.getTime();\n\tif(_timeout > 0)\n\t\t_timeout = _lastBlink + timeout;\n\telse\n\t\t_timeout = -1;\n\t_time = time;\n\t_visible = true;\n\t_handler = handler;\n}", "path": "src\\rokon\\SpriteModifiers\\Blink.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Fixes the orientation through hardware, if left to be defined physically this will cause problems\n * @param orientation an orientation constant as used in ActivityInfo.screenOrientation\n */\n", "func_signal": "public void setOrientation(int orientation)", "code": "{\n\tDebug.print(\"Orientation changed\");\n\t_activity.setRequestedOrientation(orientation);\n}", "path": "src\\rokon\\Rokon.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Loads a file from the /assets/ folder in your APK, ready to be played\n * @param filename\n * @return \n */\n", "func_signal": "public SoundFile createSoundFile(String filename)", "code": "{\n\ttry {\n\t\tint id = _soundPool.load(Rokon.getRokon().getActivity().getAssets().openFd(filename), 0);\n\t\tSoundFile soundFile = new SoundFile(id);\n\t\tDebug.print(\"SoundFile loaded as id=\" + id);\n\t\tj = -1;\n\t\tfor(i = 0; i < MAX_SOUNDS; i++)\n\t\t\tif(soundArr[i] == null)\n\t\t\t\tj = i;\n\t\tif(j == -1) {\n\t\t\tDebug.print(\"TOO MANY SOUNDS\");\n\t\t\tSystem.exit(0);\n\t\t}\n\t\tsoundArr[j] = soundFile;\n\t\treturn soundFile;\n\t} catch (Exception e) {\n\t\tDebug.print(\"CANNOT FIND \" + filename + \" IN ASSETS\");\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n}", "path": "src\\rokon\\RokonAudio.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Initialize EGL for a given configuration spec.\n * @param configSpec\n */\n", "func_signal": "public void start(int[] configSpec)", "code": "{\n    /*\n     * Get an EGL instance\n     */\n    mEgl = (EGL10) EGLContext.getEGL();\n\n    /*\n     * Get to the default display.\n     */\n    mEglDisplay = mEgl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);\n\n\n    /*\n     * We can now initialize EGL for that display\n     */\n    int[] version = new int[2];\n    mEgl.eglInitialize(mEglDisplay, version);\n\n    EGLConfig[] configs = new EGLConfig[1];\n    int[] num_config = new int[1];\n    mEgl.eglChooseConfig(mEglDisplay, configSpec, configs, 1,\n            num_config);\n    mEglConfig = configs[0];\n\n    /*\n    * Create an OpenGL ES context. This must be done only once, an\n    * OpenGL context is a somewhat heavy object.\n    */\n    mEglContext = mEgl.eglCreateContext(mEglDisplay, mEglConfig,\n            EGL10.EGL_NO_CONTEXT, null);\n\n    mEglSurface = null;\n}", "path": "src\\rokon\\OpenGL\\GLSurfaceView.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * @param x\n * @param y\n * @param width\n * @param height\n */\n", "func_signal": "public void update(float x, float y, float width, float height)", "code": "{\n\tthis.x = x;\n\tthis.y = y;\n\tthis.width = width;\n\tthis.height = height;\n\tsprite = null;\n}", "path": "src\\rokon\\Hotspot.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Inform the view that the window focus has changed.\n */\n", "func_signal": "@Override public void onWindowFocusChanged(boolean hasFocus)", "code": "{\n    super.onWindowFocusChanged(hasFocus);\n    mGLThread.onWindowFocusChanged(hasFocus);\n}", "path": "src\\rokon\\OpenGL\\GLSurfaceView.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Fixes the screen in portrait mode\n */\n", "func_signal": "public void fixPortrait()", "code": "{\n\tDebug.print(\"Fixed in portrait mode\");\n\t_activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n}", "path": "src\\rokon\\Rokon.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * @param x\n * @param y\n * @param width\n * @param height\n */\n", "func_signal": "public Hotspot(float x, float y, float width, float height)", "code": "{\n\tthis.x = x;\n\tthis.y = y;\n\tthis.width = width;\n\tthis.height = height;\n\tsprite = null;\n}", "path": "src\\rokon\\Hotspot.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Removes a Hotspot from the list to be checked\n * @param hotspot\n */\n", "func_signal": "public void removeHotspot(Hotspot hotspot)", "code": "{\n\tfor(l = 0; l < MAX_HOTSPOTS; l++)\n\t\tif(hotspotArr[l] != null)\n\t\t\tif(hotspotArr[l].equals(hotspot))\n\t\t\t\thotspotArr[l] = null;\n}", "path": "src\\rokon\\Rokon.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Initializes the engine, sets the content view and prepares for the game\n */\n", "func_signal": "public void init()", "code": "{\n\t_glSurfaceView = new GLSurfaceView(_activity);\n\t\n\tDisplayMetrics dm = new DisplayMetrics();\n\t_activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n\t_width = dm.widthPixels;\n\t_height = dm.heightPixels;\n\n\tRuntime r = Runtime.getRuntime();\n\tr.gc();\n\t\n\tGLRenderer renderer = new GLRenderer(_activity);\n\t_glSurfaceView.setRenderer(renderer);\n\t\n\t_activity.setContentView(_glSurfaceView);\n}", "path": "src\\rokon\\Rokon.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Removes the title bar and application name from view\n */\n", "func_signal": "public void setFullscreen()", "code": "{\n\tDebug.print(\"Set to fullscreen\");\n\t_activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);\n        _activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);\n        _activity.getWindow().requestFeature(Window.FEATURE_NO_TITLE);\n}", "path": "src\\rokon\\Rokon.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/*\n * Create and return an OpenGL surface\n */\n", "func_signal": "public GL createSurface(SurfaceHolder holder)", "code": "{\n    /*\n     *  The window size has changed, so we need to create a new\n     *  surface.\n     */\n    if (mEglSurface != null) {\n\n        /*\n         * Unbind and destroy the old EGL surface, if\n         * there is one.\n         */\n        mEgl.eglMakeCurrent(mEglDisplay, EGL10.EGL_NO_SURFACE,\n                EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_CONTEXT);\n        mEgl.eglDestroySurface(mEglDisplay, mEglSurface);\n    }\n\n    /*\n     * Create an EGL surface we can render into.\n     */\n    mEglSurface = mEgl.eglCreateWindowSurface(mEglDisplay,\n            mEglConfig, holder, null);\n\n    /*\n     * Before we can issue GL commands, we need to make sure\n     * the context is current and bound to a surface.\n     */\n    mEgl.eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface,\n            mEglContext);\n\n\n    GL gl = mEglContext.getGL();\n    if (mGLWrapper != null) {\n        gl = mGLWrapper.wrap(gl);\n    }\n    return gl;\n}", "path": "src\\rokon\\OpenGL\\GLSurfaceView.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * @param soundFile SoundFile to be removed from the memory\n */\n", "func_signal": "public void removeSoundFile(SoundFile soundFile)", "code": "{\n\t_soundPool.unload(soundFile.getId());\n\tfor(i = 0; i < MAX_SOUNDS; i++)\n\t\tif(soundArr[i] != null)\n\t\t\tif(soundArr[i].equals(soundFile))\n\t\t\t\tsoundArr[i] = null;\n}", "path": "src\\rokon\\RokonAudio.java", "repo_name": "C-o-r-E/andSort", "stars": 1, "license": "None", "language": "java", "size": 132}
{"docstring": "/** Tell this Progress we've done m more. */\n", "func_signal": "public void add(long m)", "code": "{\n\tif (m < 0) throw new IndexOutOfBoundsException();\n\tdone(done + m);\n}", "path": "source\\org\\zootella\\cheat\\time\\Progress.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "// pair\n", "func_signal": "@Test public void pair()", "code": "{\n\tKeyData key = Pair.make();\n\tData a = new Data(\"this is my short and very secret message\");\n\tData b = Pair.encrypt(a, key.modulus, key.publicExponent);\n\tData c = Pair.decrypt(b, key.modulus, key.privateExponent);\n\tSystem.out.println(c.strike());\n\tassertEquals(a, c);\n}", "path": "test\\org\\zootella\\cheat\\data\\encrypt\\EncryptTest.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "// good absolute paths, mac and linux style\n// TODO this test fails on windows, maybe it only works on mac\n", "func_signal": "@Test public void testParseUnix() throws Exception", "code": "{\n\t\n\tnew Path(\"/\");\n\tnew Path(\"/file.ext\");\n\tnew Path(\"/folder/file.ext\");\n\tnew Path(\"/folder/folder/file.ext\");\n}", "path": "test\\org\\zootella\\cheat\\file\\PathTest.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "/** The Percent done this Progress is, 0 through 100, rounds down to only register a percent when complete, -1 unknown. */\n", "func_signal": "public int percent()", "code": "{\n\tif (!hasSize() || done > size) return -1;\n\treturn (int)((done * 100) / size);\n}", "path": "source\\org\\zootella\\cheat\\time\\Progress.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "/** How fast we're progressing, 0 or more units/second. */\n", "func_signal": "public int speed()", "code": "{\n\tif (speed == null) return 0;\n\telse return speed.speed();\n}", "path": "source\\org\\zootella\\cheat\\time\\Progress.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "/** How much of this Progress remains, size() - done(), -1 unknown. */\n", "func_signal": "public long remain()", "code": "{\n\tif (!hasSize()) return -1;\n\tlong r = size - done;\n\tif (r < 0) return -1;\n\treturn r;\n}", "path": "source\\org\\zootella\\cheat\\time\\Progress.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "// bad because they are relative\n", "func_signal": "@Test public void testRelative() throws Exception", "code": "{\n\t\n\tconfirmBad(\"\");\n\tconfirmBad(\"hello\");\n\tconfirmBad(\"hello/you\");\n\t\n\tconfirmBad(\"./\"); // here\n\tconfirmBad(\"../\"); // up one\n\tconfirmBad(\"../../\");\n\t\n\tconfirmBad(\"./hello\");\n\tconfirmBad(\"../hello\");\n\tconfirmBad(\"../../hello\");\n\n\tconfirmBad(\"./hello/you\");\n\tconfirmBad(\"../hello/you\");\n\tconfirmBad(\"../../hello/you\");\n}", "path": "test\\org\\zootella\\cheat\\file\\PathTest.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "// good absolute paths, windows style\n", "func_signal": "@Test public void testParseWindows() throws Exception", "code": "{\n\t\n\tnew Path(\"C:\\\\folder\\\\subfolder\"); // escaped backslashes\n\tnew Path(\"C:/folder/subfolder\");   // forward slashes\n\tnew Path(\"/C:/folder/subfolder\");  // forward slashes including root slash\n\t\n\tnew Path(\"C:\\\\folder\");\n\tnew Path(\"C:/folder\");\n\tnew Path(\"/C:/folder\");\n\t\n\tnew Path(\"C:\\\\\");\n\tnew Path(\"C:/\");\n\tnew Path(\"/C:/\");\n\t\n\tnew Path(\"C:\"); // it took extra code to make these work\n\tnew Path(\"C:\");\n\tnew Path(\"/C:\");\n}", "path": "test\\org\\zootella\\cheat\\file\\PathTest.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "/** Describe our status like \"12 sec at 2.34 KB/s to verb\", \"Verbing at 2.34 KB/s\", or just \"\". */\n", "func_signal": "public String describeStatus()", "code": "{\n\tint arrive = arrive(); // -1 can't predict\n\tint speed  = speed();  //  0 no speed\n\tif (arrive != -1 && speed > 0) return Describe.time(arrive * Time.second) + \" at \" + Describe.speed(speed) + \" to \" + verb; //  \"12 sec at 2.34 KB/s to verb\"\n\telse if            (speed > 0) return                             verbing + \" at \" + Describe.speed(speed);                 // \"Verbing at 2.34 KB/s\"\n\telse                           return \"\";                                                                                   // \"\"\n}", "path": "source\\org\\zootella\\cheat\\time\\Progress.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "// secret\n", "func_signal": "@Test public void secret()", "code": "{\n\t\n\trun(0);\n\trun(1);\n\t\n\trun(15);\n\trun(16);\n\trun(17);\n\t\n\trun(31);\n\trun(32);\n\trun(33);\n\t\n\trun(47);\n\trun(48);\n\trun(49);\n\t\n\trun(63);\n\trun(64);\n\trun(65);\n\n\trun(8159);\n\trun(8160);\n\trun(8161);\n\n\trun(8175);\n\trun(8176);\n\trun(8177);\n\n\trun(8191);\n\trun(8192);\n}", "path": "test\\org\\zootella\\cheat\\data\\encrypt\\EncryptTest.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "/** Describe our size like \"12% 145 KB/1,154 KB\", \"Verbed 145 KB\", or just \"\". */\n", "func_signal": "public String describeSize()", "code": "{\n\tint  percent = percent(); // -1 unknown, 0 not the first percent yet, 100 done\n\tlong done    = done();    //  0 nothing yet\n\tlong size    = size();    // -1 unknown\n\tif (size != -1 && percent != -1) {                                                                    // Size and percent known\n\t\tif      (done    ==   0) return                                              Describe.size(size); //            \"1,154 KB\" Nothing done yet\n\t\telse if (percent ==   0) return                  Describe.size(done) + \"/\" + Describe.size(size); //     \"145 KB/1,154 KB\" Not 1 percent yet\n\t\telse if (percent == 100) return                                              Describe.size(size); //            \"1,154 KB\" All done\n\t\telse                     return percent + \"% \" + Describe.size(done) + \"/\" + Describe.size(size); // \"12% 145 KB/1,154 KB\" 1 through 99 percent\n\t} else if (size != -1) {                                                                              // Just size\n\t\t                         return                                              Describe.size(size); //            \"1,154 KB\" Just size\n\t} else {                                                                                              // Just done\n\t\tif      (done     >   0) return   verbed + \" \" + Describe.size(done);                             //         \"Verbed 1 KB\" Counting up done\n\t\telse                     return \"\";                                                               //                    \"\" No size, done, or percent\n\t}\n}", "path": "source\\org\\zootella\\cheat\\time\\Progress.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "// A separate thread will call this method\n", "func_signal": "public void thread() throws Exception", "code": "{\n\t\n\t// Hash data from bin and remove it\n\tNow start = new Now();\n\tint ask = range.ask(bin.size());\n\thash.add(bin.data().begin(ask));\n\tbin.remove(ask);\n\ttaskMove = new Move(start, ask);\n}", "path": "source\\org\\zootella\\cheat\\encrypt\\hash\\HashTask.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "/** Keep Java from exiting the process so Update objects can get future Swing events. */\n", "func_signal": "public static void still()", "code": "{\n\t\n\tRunnable r = new Runnable() {\n            public void run() {\n                Object o = new Object();\n                try {\n                    synchronized (o) {\n                        o.wait();\n                    }\n                } catch (InterruptedException e) { Mistake.ignore(e); }\n            }\n        };\n        \n        Thread t = new Thread(r, \"still alive\");\n        t.setDaemon(false);\n        t.start();        \t\t\t\n}", "path": "source\\org\\zootella\\cheat\\process\\Alive.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "/** Pause this Progress so it forgets its speed, you don't have to unpause it. */\n", "func_signal": "public void pause()", "code": "{\n\tspeed = null; // Throw out our Speed and arrival prediction\n\tarrive = 0;\n}", "path": "source\\org\\zootella\\cheat\\time\\Progress.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "// good absolute paths, windows lan style\n", "func_signal": "@Test public void testParseWindowsLan() throws Exception", "code": "{\n\n\tnew Path(\"\\\\\\\\computer\\\\share\");\n\tnew Path(\"\\\\\\\\computer\\\\share\\\\file.ext\");\n\tnew Path(\"\\\\\\\\computer\\\\share\\\\folder\\\\file.ext\");\n\tnew Path(\"\\\\\\\\computer\\\\share\\\\folder\\\\folder\\\\file.ext\");\n}", "path": "test\\org\\zootella\\cheat\\file\\PathTest.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "/** SHA1 hash and clear bin's data with the given Hash object, don't look at hash or bin until this is closed. */\n", "func_signal": "public HashTask(Update up, Hash hash, Bin bin, Range range)", "code": "{\n\tthis.up = up; // We'll tell update when we're done\n\tthis.hash = hash;\n\tthis.bin = bin;\n\tthis.range = range;\n\ttask = new Task(new MyTask()); // Make a separate thread call thread() below now\n}", "path": "source\\org\\zootella\\cheat\\encrypt\\hash\\HashTask.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "/** Make a Progress that will track how fast done reaches size. */\n", "func_signal": "public Progress(String verb, String verbing, String verbed)", "code": "{\n\tthis.verb = verb;\n\tthis.verbing = verbing;\n\tthis.verbed = verbed;\n\tsize = -1; // Size unknown at the start\n}", "path": "source\\org\\zootella\\cheat\\time\\Progress.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "// Once thread() above returns, the normal event thread calls this done() method\n", "func_signal": "public void done(ProgramException e)", "code": "{\n\tif (closed()) return; // Don't let anything change if we're already closed\n\texception = e;        // Get the exception our code above threw\n\tmove = taskMove;\n\tclose(me());          // We're done\n}", "path": "source\\org\\zootella\\cheat\\encrypt\\hash\\HashTask.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "// nonsense\n", "func_signal": "@Test public void testNonsense() throws Exception", "code": "{\n\n\tconfirmBad(\" \");\n\tconfirmBad(\"*\");\n\tconfirmBad(\":\");\n}", "path": "test\\org\\zootella\\cheat\\file\\PathTest.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "/** Set how much of this Progress is done, 0 or more. */\n", "func_signal": "public void done(long d)", "code": "{\n\tif (d < 0)                    throw new IndexOutOfBoundsException();\n\tif (hasSize() && done > size) throw new IndexOutOfBoundsException();\n\tlong gain = d - done;                       // See if we got closer to our goal\n\tif (gain > 0) {                             // We did\n\t\tif (speed == null) speed = new Speed(); // Make our Speed if we don't already have one\n\t\tspeed.add((int)gain);                   // Tell it the distance we jumped forward\n\t}\n\tdone = d;\n}", "path": "source\\org\\zootella\\cheat\\time\\Progress.java", "repo_name": "zootella/cheat", "stars": 1, "license": "None", "language": "java", "size": 868}
{"docstring": "/**\n * Invoked each time a test is skipped.\n */\n", "func_signal": "public void onTestSkipped(ITestResult tr)", "code": "{\n  m_allTests.add(tr);\n  m_numSkipped++;\n}", "path": "src\\org\\testng\\reporters\\JUnitXMLReporter.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/**\n * Make sure that if a test method fails in the middle of a data provider, the rest\n * of the data set is still run.\n */\n", "func_signal": "@Test\npublic void allMethodsShouldBeInvoked()", "code": "{\n  TestNG tng = new TestNG();\n  tng.setTestClasses(new Class[] { FailedDataProviderSample.class });\n  tng.setVerbose(0);\n  tng.run();\n\n  Assert.assertEquals(m_total, 6);\n}", "path": "test\\src\\test\\dataprovider\\FailedDataProviderTest.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/**\n * Invoked each time a test succeeds.\n */\n", "func_signal": "public void onTestSuccess(ITestResult tr)", "code": "{\n  m_allTests.add(tr);\n  m_numPassed++;\n}", "path": "src\\org\\testng\\reporters\\JUnitXMLReporter.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/**\n * Marks a method as a factory that returns objects that will be used by TestNG\n * as Test classes.  The method must return Object[].\n * \n * @author <a href=\"mailto:cedric&#64;beust.com\">Cedric Beust</a>\n */\n", "func_signal": "@Retention(java.lang.annotation.RetentionPolicy.RUNTIME)\n@Target(java.lang.annotation.ElementType.METHOD)\npublic @interface Factory", "code": "{\n  /**\n   * The list of variables used to fill the parameters of this method.\n   * These variables must be defined in the property file.\n   * \n   * @deprecated Use @Parameters\n   */\n  @Deprecated\n  public String[] parameters() default {};\n  \n  /**\n   * The name of the data provider for this test method.\n   * @see org.testng.annotations.DataProvider\n   */\n  public String dataProvider() default \"\";\n}", "path": "src\\org\\testng\\annotations\\Factory.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/**\n * Invoked in client mode.  In this case, wait for a connection\n * on the given port, run the XmlSuite we received and return the SuiteRunner\n * created to run it.\n * @throws IOException \n */\n", "func_signal": "public void waitForSuites()", "code": "{\n\ttry {\n\t\twhile (true) {\n\t\t\t//TODO set timeout\n\t\t\tXmlSuite s = m_slaveAdpter.getSuite(Long.MAX_VALUE);\n\t\t\tif( s== null)\n\t\t\t\tcontinue;\n\t\t\tlog(\"Processing \" + s.getName());\n\t\t\tList<XmlSuite> suites = Lists.newArrayList();\n\t\t\tsuites.add(s);\n\t\t\tm_testng.setXmlSuites(suites);\n\t\t\tList<ISuite> suiteRunners = m_testng.runSuitesLocally();\n\t\t\tISuite sr = suiteRunners.get(0);\n\t\t\tlog(\"Done processing \" + s.getName());\n\t\t\tm_slaveAdpter.returnResult(sr);\n\t\t}\n\t}\n\tcatch(Exception ex) {\n\t\tex.printStackTrace(System.out);\n\t}\n}", "path": "src\\org\\testng\\remote\\SuiteSlave.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/**\n * Executes the command line as a new process.\n *\n * @param cmd the command to execute\n * @param watchdog\n * @return the exit status of the subprocess or INVALID.\n */\n", "func_signal": "protected int executeAsForked(CommandlineJava cmd, ExecuteWatchdog watchdog)", "code": "{\n  Execute execute= new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN),\n                               watchdog);\n  execute.setCommandline(cmd.getCommandline());\n  execute.setAntRun(getProject());\n  if(m_workingDir != null) {\n    if(m_workingDir.exists() && m_workingDir.isDirectory()) {\n      execute.setWorkingDirectory(m_workingDir);\n    }\n    else {\n      log(\"Ignoring invalid working directory : \" + m_workingDir, Project.MSG_WARN);\n    }\n  }\n\n  String[] environment= m_environment.getVariables();\n  if(null != environment) {\n    for(String envEntry : environment) {\n      log(\"Setting environment variable: \" + envEntry, Project.MSG_VERBOSE);\n    }\n  }\n\n  execute.setEnvironment(environment);\n\n  log(cmd.describeCommand(), Project.MSG_VERBOSE);\n  int retVal;\n  try {\n    retVal= execute.execute();\n  }\n  catch(IOException e) {\n    throw new BuildException(\"Process fork failed.\", e, getLocation());\n  }\n\n  return retVal;\n}", "path": "src\\org\\testng\\TestNGAntTask.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/**\n * @param target \n * @deprecated use setAnnotations\n */\n", "func_signal": "@Deprecated\npublic void setTarget(String target)", "code": "{\n  m_target= target;\n  log(\"The usage of \" + TestNGCommandLineArgs.TARGET_COMMAND_OPT + \" option is deprecated. Please use \" \n      + TestNGCommandLineArgs.ANNOTATIONS_COMMAND_OPT + \" instead\", Project.MSG_WARN);\n}", "path": "src\\org\\testng\\TestNGAntTask.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/**\n * Creates or returns the already created <CODE>CommandlineJava</CODE>.\n */\n", "func_signal": "protected CommandlineJava getJavaCommand()", "code": "{\n  if(null == m_javaCommand) {\n    m_javaCommand= new CommandlineJava();\n  }\n\n  return m_javaCommand;\n}", "path": "src\\org\\testng\\TestNGAntTask.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/**\n * Restores the original exception stack trace after a \n * previous call to {@link #reduceStackTrace()}.\n *\n */\n", "func_signal": "protected void restoreStackTrace()", "code": "{\n  if(m_stackReduced && null != m_stackTrace) {\n    synchronized(this) {\n      setStackTrace(m_stackTrace);\n      m_stackReduced= false;\n    }\n  }\n}", "path": "src\\org\\testng\\SkipException.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/**\n * Creates a new suite dispatcher.\n * \n * @param propertiesFile\n * @throws Exception\n */\n", "func_signal": "public SuiteSlave( String propertiesFile, TestNG testng) throws TestNGException", "code": "{\n\ttry\n\t{\n\t\tm_testng = testng;\n\n\t\tPropertiesFile file = new PropertiesFile( propertiesFile);\n\t\tProperties properties = file.getProperties();\n\n\t\tm_verbose = Integer.parseInt( properties.getProperty(VERBOSE, \"1\"));\n\n\t\tString adapter = properties.getProperty(SLAVE_ADPATER);\n\t\tif( adapter == null)\n\t\t{\n\t\t\tm_slaveAdpter = new DefaultWorkerAdapter();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tClass clazz = Class.forName(adapter);\n\t\t\tm_slaveAdpter = (IWorkerApadter)clazz.newInstance();\n\t\t}\n\t\tm_slaveAdpter.init(properties);\n\t}\n\tcatch( Exception e)\n\t{\n\t\tthrow new TestNGException( \"Fail to initialize slave mode\", e);\n\t}\n}", "path": "src\\org\\testng\\remote\\SuiteSlave.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/**\n * Invoked after all the tests have run and all their\n * Configuration methods have been called.\n *\n */\n", "func_signal": "public void onFinish(ITestContext context)", "code": "{\n\tgenerateReport(context);\n  resetAll();\n}", "path": "src\\org\\testng\\reporters\\JUnitXMLReporter.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/*.class\");\n    selector.setProject(getProject());\n    fs.appendSelector(selector);\n\n    return fs;\n  }\n\n  private File findJar() {\n    Class thisClass= getClass();\n    String resource= thisClass.getName().replace('.', '/') + \".class\";\n    URL url= thisClass.getClassLoader().getResource(resource);\n\n    if(null != url) {\n      String u= url.toString();\n      if(u.startsWith(\"jar:file:\")) {\n        int pling= u.indexOf(\"!\");\n        String jarName= u.substring(4, pling);\n\n        return new File(fromURI(jarName));\n      }\n      else if(u.startsWith(\"file:\")) {\n        int tail= u.indexOf(resource);\n        String dirName= u.substring(0, tail);\n\n        return new File(fromURI(dirName));\n      }\n    }\n\n    return null;\n  }\n\n  private String fromURI(String uri) {\n    URL url= null;\n    try {\n      url= new URL(uri);\n    }\n    catch(MalformedURLException murle) {\n    }\n    if((null == url) || !(\"file\".equals(url.getProtocol()))) {\n      throw new IllegalArgumentException(\"Can only handle valid file: URIs\");\n    }\n\n    StringBuffer buf= new StringBuffer(url.getHost());\n    if(buf.length() > 0) {\n      buf.insert(0, File.separatorChar).insert(0, File.separatorChar);\n    }\n\n    String file= url.getFile();\n    int queryPos= file.indexOf('?');\n    buf.append((queryPos < 0) ? file : file.substring(0, queryPos));\n\n    uri= buf.toString().replace('/', File.separatorChar);\n\n    if((File.pathSeparatorChar == ';') && uri.startsWith(\"\\\\\") && (uri.length() > 2)\n      && Character.isLetter(uri.charAt(1)) && (uri.lastIndexOf(':') > -1)) {\n      uri= uri.substring(1);\n    }\n\n    StringBuffer sb= new StringBuffer();\n    CharacterIterator iter= new StringCharacterIterator(uri);\n    for(char c= iter.first(); c != CharacterIterator.DONE; c= iter.next()) {\n      if(c == '%') {\n        char c1= iter.next();\n        if(c1 != CharacterIterator.DONE) {\n          int i1= Character.digit(c1, 16);\n          char c2= iter.next();\n          if(c2 != CharacterIterator.DONE) {\n            int i2= Character.digit(c2, 16);\n            sb.append((char) ((i1 << 4) + i2));\n          }\n        }\n      }\n      else {\n        sb.append(c);\n      }\n    }\n\n    return sb.toString();\n  }\n\n  /**\n   * Returns the list of files corresponding to the filesets\n   *\n   * @param filesets\n   * @return the list of files corresponding to the filesets\n   * @throws BuildException\n   */\n", "func_signal": "private List<String> fileset(List<FileSet> filesets) throws BuildException", "code": "{\n    List<String> files= Lists.newArrayList();\n\n    for(Iterator<FileSet> iterator= filesets.iterator(); iterator.hasNext();) {\n      FileSet fileset= iterator.next();\n      DirectoryScanner ds= fileset.getDirectoryScanner(getProject());\n\n      for(String file : ds.getIncludedFiles()) {\n        files.add(ds.getBasedir() + File.separator + file);\n      }\n    }\n\n    return files;\n  }", "path": "src\\org\\testng\\TestNGAntTask.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/**\n * Creates a nested src Path like.\n *\n * @return a new Path\n */\n", "func_signal": "public Path createSourceDir()", "code": "{\n  if(m_sourceDirPath == null) {\n    m_sourceDirPath= new Path(getProject());\n  }\n\n  return m_sourceDirPath.createPath();\n}", "path": "src\\org\\testng\\TestNGAntTask.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/**\n * @author Borojevic Created this method to guarantee unique file names for\n *         reports.<br>\n *         Also, this will guarantee that the old reports are overwritten\n *         when tests are run again.\n * @param context\n *            test context\n * @return unique name for the file associated with this test context.\n * */\n", "func_signal": "private String generateFileName(ITestContext context)", "code": "{\n\tString fileName = null;\n\tString keyToSearch = context.getSuite().getName() + context.getName();\n\tif (m_fileNameMap.get(keyToSearch) == null) {\n\t\tfileName = context.getName();\n\t} else {\n\t\tfileName = context.getName() + m_fileNameIncrementer++;\n\t}\n\n\tm_fileNameMap.put(keyToSearch, fileName);\n\treturn fileName;\n}", "path": "src\\org\\testng\\reporters\\JUnitXMLReporter.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/**\n * Adds double quotes to the command line argument if it contains spaces.\n * @param pCommandLineArg the command line argument\n * @return pCommandLineArg in double quotes if it contains space.\n *\n */\n", "func_signal": "private static String doubleQuote(String pCommandLineArg)", "code": "{\n  if(pCommandLineArg.indexOf(\" \") != -1 && !(pCommandLineArg.startsWith(\"\\\"\") && pCommandLineArg.endsWith(\"\\\"\"))) {\n    return \"\\\"\" + pCommandLineArg + '\\\"';\n  }\n\n  return pCommandLineArg;\n}", "path": "src\\org\\testng\\TestNGAntTask.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/**\n * Creates a string representation of the path.\n */\n", "func_signal": "private String createPathString(Path path, String sep)", "code": "{\n  if(path == null) {\n    return null;\n  }\n\n  final StringBuffer buf= new StringBuffer();\n\n  for(int i= 0; i < path.list().length; i++) {\n    File file= getProject().resolveFile(path.list()[i]);\n\n    if(!file.exists()) {\n      log(\"Classpath entry not found: \" + file, Project.MSG_WARN);\n    }\n\n    buf.append(file.getAbsolutePath()).append(sep);\n  }\n\n  if(path.list().length > 0) { // cut the last ;\n    buf.deleteCharAt(buf.length() - 1);\n  }\n\n  return buf.toString();\n}", "path": "src\\org\\testng\\TestNGAntTask.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/** Executes the target, if any, that user designates executing before failing the test */\n", "func_signal": "private void executeHaltTarget(int exitValue)", "code": "{\n  if(m_onHaltTarget != null) {\n    if(m_outputDir != null) {\n      getProject().setProperty(\"testng.outputdir\", m_outputDir.getAbsolutePath());\n    }\n    getProject().setProperty(\"testng.returncode\", String.valueOf(exitValue));\n    Target t= (Target) getProject().getTargets().get(m_onHaltTarget);\n    if(t != null) {\n      t.execute();\n    }\n  }\n}", "path": "src\\org\\testng\\TestNGAntTask.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "// If this takes more than 5 seconds we've definitely regressed.\n", "func_signal": "public void findPredecessorsTiming()", "code": "{\n   Graph<String> g = new Graph<String>();\n\n   final String rootNode = \"myroot\";\n   final String independentNode = \"independent\";\n   g.addNode(rootNode);\n   g.addNode(independentNode);\n\n   final int maxDepth = 7;\n   final int nodesPerDepth = 10; // must be < 100\n   //\n   // Add maxDepth groups of new nodes, where each group contains nodesPerDepth\n   // nodes, and each node in a group a depth N has each node in the group\n   // at depth (N-1) as a predecessor.\n   //\n   for (int depth = 1; depth <= maxDepth; depth++) {\n     for (int i = 0; i < nodesPerDepth; i++) {\n       String newNode = String.valueOf(i + (100 * depth));\n       g.addNode(newNode);\n       if (depth == 1) continue;\n       for (int j = 0; j < nodesPerDepth; j++) {\n         String prevNode = String.valueOf(j + (100 * (depth - 1)));\n         g.addPredecessor(newNode, prevNode);\n       }\n     }\n   }\n\n   // Finally, make all of the nodes in the group at depth maxDepth\n   // be predecessors of rootNode.\n   //\n   for (int i = 0; i < nodesPerDepth; i++) {\n     String node = String.valueOf(i + (100 * maxDepth));\n     g.addPredecessor(rootNode, node);\n   }\n\n   // Now we're done building the graph, which has (maxDepth * nodesPerDepth) + 2\n   // nodes.  rootNode has all of the other nodes except independentNode\n   // as predecessors.\n\n   //\n   // Test findPredecessors\n   //\n   {\n     List<String> predecessors = g.findPredecessors(rootNode);\n     assert predecessors.size() == (maxDepth * nodesPerDepth);\n   }\n }", "path": "test\\src\\test\\GraphTest.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/**\n * Invoked each time a test fails.\n */\n", "func_signal": "public void onTestFailure(ITestResult tr)", "code": "{\n  m_allTests.add(tr);\n  m_numFailed++;\n}", "path": "src\\org\\testng\\reporters\\JUnitXMLReporter.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "/**\n * generate the XML report given what we know from all the test results\n */\n", "func_signal": "protected void generateReport(ITestContext context)", "code": "{\n\t  \n    XMLStringBuffer document= new XMLStringBuffer(\"\");\n    document.setXmlDetails(\"1.0\", \"UTF-8\");\n    Properties attrs= new Properties();\n    attrs.setProperty(XMLConstants.ATTR_NAME, encodeAttr(context.getName())); // ENCODE\n    attrs.setProperty(XMLConstants.ATTR_TESTS, \"\" + m_allTests.size());\n    attrs.setProperty(XMLConstants.ATTR_FAILURES, \"\" + m_numFailed);\n    attrs.setProperty(XMLConstants.ATTR_ERRORS, \"0\");\n    attrs.setProperty(XMLConstants.ATTR_TIME, \"\"\n        + ((context.getEndDate().getTime() - context.getStartDate().getTime()) / 1000.0));\n\n    document.push(XMLConstants.TESTSUITE, attrs);\n    document.addEmptyElement(XMLConstants.PROPERTIES);\n\n    for(ITestResult tr : m_configIssues) {\n      createElement(document, tr);\n    }\n    for(ITestResult tr : m_allTests) {\n      createElement(document, tr);\n    }\n\n    document.pop();\n    Utils.writeUtf8File(context.getOutputDirectory(),generateFileName(context) + \".xml\", document.toXML());\n}", "path": "src\\org\\testng\\reporters\\JUnitXMLReporter.java", "repo_name": "virtix/testng", "stars": 1, "license": "apache-2.0", "language": "java", "size": 11440}
{"docstring": "// $ANTLR start \"ASSIGN\"\n", "func_signal": "public final void mASSIGN() throws RecognitionException", "code": "{\n    try {\n        int _type = ASSIGN;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:184:8: ( '=' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:184:10: '='\n        {\n        match('='); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR end \"RegularExpressionLiteral\"\n", "func_signal": "public void mTokens() throws RecognitionException", "code": "{\n    // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:8: ( NULL | TRUE | FALSE | BREAK | CASE | CATCH | CONTINUE | DEFAULT | DELETE | DO | ELSE | FINALLY | FOR | FUNCTION | IF | IN | INSTANCEOF | NEW | RETURN | SWITCH | THIS | THROW | TRY | TYPEOF | VAR | VOID | WHILE | WITH | ABSTRACT | BOOLEAN | BYTE | CHAR | CLASS | CONST | DEBUGGER | DOUBLE | ENUM | EXPORT | EXTENDS | FINAL | FLOAT | GOTO | IMPLEMENTS | IMPORT | INT | INTERFACE | LONG | NATIVE | PACKAGE | PRIVATE | PROTECTED | PUBLIC | SHORT | STATIC | SUPER | SYNCHRONIZED | THROWS | TRANSIENT | VOLATILE | LBRACE | RBRACE | LPAREN | RPAREN | LBRACK | RBRACK | DOT | SEMIC | COMMA | LT | GT | LTE | GTE | EQ | NEQ | SAME | NSAME | ADD | SUB | MUL | MOD | INC | DEC | SHL | SHR | SHU | AND | OR | XOR | NOT | INV | LAND | LOR | QUE | COLON | ASSIGN | ADDASS | SUBASS | MULASS | MODASS | SHLASS | SHRASS | SHUASS | ANDASS | ORASS | XORASS | DIV | DIVASS | WhiteSpace | EOL | MultiLineComment | SingleLineComment | Identifier | DecimalLiteral | OctalIntegerLiteral | HexIntegerLiteral | StringLiteral | RegularExpressionLiteral )\n    int alt32=117;\n    alt32 = dfa32.predict(input);\n    switch (alt32) {\n        case 1 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:10: NULL\n            {\n            mNULL(); \n\n            }\n            break;\n        case 2 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:15: TRUE\n            {\n            mTRUE(); \n\n            }\n            break;\n        case 3 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:20: FALSE\n            {\n            mFALSE(); \n\n            }\n            break;\n        case 4 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:26: BREAK\n            {\n            mBREAK(); \n\n            }\n            break;\n        case 5 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:32: CASE\n            {\n            mCASE(); \n\n            }\n            break;\n        case 6 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:37: CATCH\n            {\n            mCATCH(); \n\n            }\n            break;\n        case 7 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:43: CONTINUE\n            {\n            mCONTINUE(); \n\n            }\n            break;\n        case 8 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:52: DEFAULT\n            {\n            mDEFAULT(); \n\n            }\n            break;\n        case 9 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:60: DELETE\n            {\n            mDELETE(); \n\n            }\n            break;\n        case 10 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:67: DO\n            {\n            mDO(); \n\n            }\n            break;\n        case 11 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:70: ELSE\n            {\n            mELSE(); \n\n            }\n            break;\n        case 12 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:75: FINALLY\n            {\n            mFINALLY(); \n\n            }\n            break;\n        case 13 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:83: FOR\n            {\n            mFOR(); \n\n            }\n            break;\n        case 14 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:87: FUNCTION\n            {\n            mFUNCTION(); \n\n            }\n            break;\n        case 15 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:96: IF\n            {\n            mIF(); \n\n            }\n            break;\n        case 16 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:99: IN\n            {\n            mIN(); \n\n            }\n            break;\n        case 17 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:102: INSTANCEOF\n            {\n            mINSTANCEOF(); \n\n            }\n            break;\n        case 18 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:113: NEW\n            {\n            mNEW(); \n\n            }\n            break;\n        case 19 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:117: RETURN\n            {\n            mRETURN(); \n\n            }\n            break;\n        case 20 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:124: SWITCH\n            {\n            mSWITCH(); \n\n            }\n            break;\n        case 21 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:131: THIS\n            {\n            mTHIS(); \n\n            }\n            break;\n        case 22 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:136: THROW\n            {\n            mTHROW(); \n\n            }\n            break;\n        case 23 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:142: TRY\n            {\n            mTRY(); \n\n            }\n            break;\n        case 24 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:146: TYPEOF\n            {\n            mTYPEOF(); \n\n            }\n            break;\n        case 25 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:153: VAR\n            {\n            mVAR(); \n\n            }\n            break;\n        case 26 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:157: VOID\n            {\n            mVOID(); \n\n            }\n            break;\n        case 27 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:162: WHILE\n            {\n            mWHILE(); \n\n            }\n            break;\n        case 28 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:168: WITH\n            {\n            mWITH(); \n\n            }\n            break;\n        case 29 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:173: ABSTRACT\n            {\n            mABSTRACT(); \n\n            }\n            break;\n        case 30 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:182: BOOLEAN\n            {\n            mBOOLEAN(); \n\n            }\n            break;\n        case 31 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:190: BYTE\n            {\n            mBYTE(); \n\n            }\n            break;\n        case 32 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:195: CHAR\n            {\n            mCHAR(); \n\n            }\n            break;\n        case 33 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:200: CLASS\n            {\n            mCLASS(); \n\n            }\n            break;\n        case 34 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:206: CONST\n            {\n            mCONST(); \n\n            }\n            break;\n        case 35 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:212: DEBUGGER\n            {\n            mDEBUGGER(); \n\n            }\n            break;\n        case 36 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:221: DOUBLE\n            {\n            mDOUBLE(); \n\n            }\n            break;\n        case 37 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:228: ENUM\n            {\n            mENUM(); \n\n            }\n            break;\n        case 38 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:233: EXPORT\n            {\n            mEXPORT(); \n\n            }\n            break;\n        case 39 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:240: EXTENDS\n            {\n            mEXTENDS(); \n\n            }\n            break;\n        case 40 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:248: FINAL\n            {\n            mFINAL(); \n\n            }\n            break;\n        case 41 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:254: FLOAT\n            {\n            mFLOAT(); \n\n            }\n            break;\n        case 42 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:260: GOTO\n            {\n            mGOTO(); \n\n            }\n            break;\n        case 43 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:265: IMPLEMENTS\n            {\n            mIMPLEMENTS(); \n\n            }\n            break;\n        case 44 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:276: IMPORT\n            {\n            mIMPORT(); \n\n            }\n            break;\n        case 45 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:283: INT\n            {\n            mINT(); \n\n            }\n            break;\n        case 46 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:287: INTERFACE\n            {\n            mINTERFACE(); \n\n            }\n            break;\n        case 47 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:297: LONG\n            {\n            mLONG(); \n\n            }\n            break;\n        case 48 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:302: NATIVE\n            {\n            mNATIVE(); \n\n            }\n            break;\n        case 49 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:309: PACKAGE\n            {\n            mPACKAGE(); \n\n            }\n            break;\n        case 50 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:317: PRIVATE\n            {\n            mPRIVATE(); \n\n            }\n            break;\n        case 51 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:325: PROTECTED\n            {\n            mPROTECTED(); \n\n            }\n            break;\n        case 52 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:335: PUBLIC\n            {\n            mPUBLIC(); \n\n            }\n            break;\n        case 53 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:342: SHORT\n            {\n            mSHORT(); \n\n            }\n            break;\n        case 54 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:348: STATIC\n            {\n            mSTATIC(); \n\n            }\n            break;\n        case 55 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:355: SUPER\n            {\n            mSUPER(); \n\n            }\n            break;\n        case 56 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:361: SYNCHRONIZED\n            {\n            mSYNCHRONIZED(); \n\n            }\n            break;\n        case 57 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:374: THROWS\n            {\n            mTHROWS(); \n\n            }\n            break;\n        case 58 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:381: TRANSIENT\n            {\n            mTRANSIENT(); \n\n            }\n            break;\n        case 59 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:391: VOLATILE\n            {\n            mVOLATILE(); \n\n            }\n            break;\n        case 60 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:400: LBRACE\n            {\n            mLBRACE(); \n\n            }\n            break;\n        case 61 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:407: RBRACE\n            {\n            mRBRACE(); \n\n            }\n            break;\n        case 62 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:414: LPAREN\n            {\n            mLPAREN(); \n\n            }\n            break;\n        case 63 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:421: RPAREN\n            {\n            mRPAREN(); \n\n            }\n            break;\n        case 64 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:428: LBRACK\n            {\n            mLBRACK(); \n\n            }\n            break;\n        case 65 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:435: RBRACK\n            {\n            mRBRACK(); \n\n            }\n            break;\n        case 66 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:442: DOT\n            {\n            mDOT(); \n\n            }\n            break;\n        case 67 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:446: SEMIC\n            {\n            mSEMIC(); \n\n            }\n            break;\n        case 68 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:452: COMMA\n            {\n            mCOMMA(); \n\n            }\n            break;\n        case 69 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:458: LT\n            {\n            mLT(); \n\n            }\n            break;\n        case 70 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:461: GT\n            {\n            mGT(); \n\n            }\n            break;\n        case 71 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:464: LTE\n            {\n            mLTE(); \n\n            }\n            break;\n        case 72 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:468: GTE\n            {\n            mGTE(); \n\n            }\n            break;\n        case 73 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:472: EQ\n            {\n            mEQ(); \n\n            }\n            break;\n        case 74 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:475: NEQ\n            {\n            mNEQ(); \n\n            }\n            break;\n        case 75 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:479: SAME\n            {\n            mSAME(); \n\n            }\n            break;\n        case 76 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:484: NSAME\n            {\n            mNSAME(); \n\n            }\n            break;\n        case 77 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:490: ADD\n            {\n            mADD(); \n\n            }\n            break;\n        case 78 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:494: SUB\n            {\n            mSUB(); \n\n            }\n            break;\n        case 79 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:498: MUL\n            {\n            mMUL(); \n\n            }\n            break;\n        case 80 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:502: MOD\n            {\n            mMOD(); \n\n            }\n            break;\n        case 81 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:506: INC\n            {\n            mINC(); \n\n            }\n            break;\n        case 82 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:510: DEC\n            {\n            mDEC(); \n\n            }\n            break;\n        case 83 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:514: SHL\n            {\n            mSHL(); \n\n            }\n            break;\n        case 84 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:518: SHR\n            {\n            mSHR(); \n\n            }\n            break;\n        case 85 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:522: SHU\n            {\n            mSHU(); \n\n            }\n            break;\n        case 86 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:526: AND\n            {\n            mAND(); \n\n            }\n            break;\n        case 87 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:530: OR\n            {\n            mOR(); \n\n            }\n            break;\n        case 88 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:533: XOR\n            {\n            mXOR(); \n\n            }\n            break;\n        case 89 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:537: NOT\n            {\n            mNOT(); \n\n            }\n            break;\n        case 90 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:541: INV\n            {\n            mINV(); \n\n            }\n            break;\n        case 91 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:545: LAND\n            {\n            mLAND(); \n\n            }\n            break;\n        case 92 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:550: LOR\n            {\n            mLOR(); \n\n            }\n            break;\n        case 93 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:554: QUE\n            {\n            mQUE(); \n\n            }\n            break;\n        case 94 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:558: COLON\n            {\n            mCOLON(); \n\n            }\n            break;\n        case 95 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:564: ASSIGN\n            {\n            mASSIGN(); \n\n            }\n            break;\n        case 96 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:571: ADDASS\n            {\n            mADDASS(); \n\n            }\n            break;\n        case 97 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:578: SUBASS\n            {\n            mSUBASS(); \n\n            }\n            break;\n        case 98 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:585: MULASS\n            {\n            mMULASS(); \n\n            }\n            break;\n        case 99 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:592: MODASS\n            {\n            mMODASS(); \n\n            }\n            break;\n        case 100 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:599: SHLASS\n            {\n            mSHLASS(); \n\n            }\n            break;\n        case 101 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:606: SHRASS\n            {\n            mSHRASS(); \n\n            }\n            break;\n        case 102 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:613: SHUASS\n            {\n            mSHUASS(); \n\n            }\n            break;\n        case 103 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:620: ANDASS\n            {\n            mANDASS(); \n\n            }\n            break;\n        case 104 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:627: ORASS\n            {\n            mORASS(); \n\n            }\n            break;\n        case 105 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:633: XORASS\n            {\n            mXORASS(); \n\n            }\n            break;\n        case 106 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:640: DIV\n            {\n            mDIV(); \n\n            }\n            break;\n        case 107 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:644: DIVASS\n            {\n            mDIVASS(); \n\n            }\n            break;\n        case 108 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:651: WhiteSpace\n            {\n            mWhiteSpace(); \n\n            }\n            break;\n        case 109 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:662: EOL\n            {\n            mEOL(); \n\n            }\n            break;\n        case 110 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:666: MultiLineComment\n            {\n            mMultiLineComment(); \n\n            }\n            break;\n        case 111 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:683: SingleLineComment\n            {\n            mSingleLineComment(); \n\n            }\n            break;\n        case 112 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:701: Identifier\n            {\n            mIdentifier(); \n\n            }\n            break;\n        case 113 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:712: DecimalLiteral\n            {\n            mDecimalLiteral(); \n\n            }\n            break;\n        case 114 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:727: OctalIntegerLiteral\n            {\n            mOctalIntegerLiteral(); \n\n            }\n            break;\n        case 115 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:747: HexIntegerLiteral\n            {\n            mHexIntegerLiteral(); \n\n            }\n            break;\n        case 116 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:765: StringLiteral\n            {\n            mStringLiteral(); \n\n            }\n            break;\n        case 117 :\n            // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:1:779: RegularExpressionLiteral\n            {\n            mRegularExpressionLiteral(); \n\n            }\n            break;\n\n    }\n\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"INC\"\n", "func_signal": "public final void mINC() throws RecognitionException", "code": "{\n    try {\n        int _type = INC;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:170:5: ( '++' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:170:7: '++'\n        {\n        match(\"++\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"MOD\"\n", "func_signal": "public final void mMOD() throws RecognitionException", "code": "{\n    try {\n        int _type = MOD;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:169:5: ( '%' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:169:7: '%'\n        {\n        match('%'); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"INV\"\n", "func_signal": "public final void mINV() throws RecognitionException", "code": "{\n    try {\n        int _type = INV;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:179:5: ( '~' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:179:7: '~'\n        {\n        match('~'); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"DEC\"\n", "func_signal": "public final void mDEC() throws RecognitionException", "code": "{\n    try {\n        int _type = DEC;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:171:5: ( '--' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:171:7: '--'\n        {\n        match(\"--\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"BackslashSequence\"\n", "func_signal": "public final void mBackslashSequence() throws RecognitionException", "code": "{\n    try {\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:837:2: ( BSLASH ~ ( LineTerminator ) )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:837:4: BSLASH ~ ( LineTerminator )\n        {\n        mBSLASH(); \n        if ( (input.LA(1)>='\\u0000' && input.LA(1)<='\\t')||(input.LA(1)>='\\u000B' && input.LA(1)<='\\f')||(input.LA(1)>='\\u000E' && input.LA(1)<='\\u2027')||(input.LA(1)>='\\u202A' && input.LA(1)<='\\uFFFF') ) {\n            input.consume();\n\n        }\n        else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            recover(mse);\n            throw mse;}\n\n\n        }\n\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"FINAL\"\n", "func_signal": "public final void mFINAL() throws RecognitionException", "code": "{\n    try {\n        int _type = FINAL;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:129:7: ( 'final' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:129:9: 'final'\n        {\n        match(\"final\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"SHORT\"\n", "func_signal": "public final void mSHORT() throws RecognitionException", "code": "{\n    try {\n        int _type = SHORT;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:142:7: ( 'short' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:142:9: 'short'\n        {\n        match(\"short\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"COMMA\"\n", "func_signal": "public final void mCOMMA() throws RecognitionException", "code": "{\n    try {\n        int _type = COMMA;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:157:7: ( ',' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:157:9: ','\n        {\n        match(','); \n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"SHUASS\"\n", "func_signal": "public final void mSHUASS() throws RecognitionException", "code": "{\n    try {\n        int _type = SHUASS;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:191:8: ( '>>>=' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:191:10: '>>>='\n        {\n        match(\">>>=\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"OctalIntegerLiteral\"\n", "func_signal": "public final void mOctalIntegerLiteral() throws RecognitionException", "code": "{\n    try {\n        int _type = OctalIntegerLiteral;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:771:2: ( '0' ( OctalDigit )+ )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:771:4: '0' ( OctalDigit )+\n        {\n        match('0'); \n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:771:8: ( OctalDigit )+\n        int cnt20=0;\n        loop20:\n        do {\n            int alt20=2;\n            int LA20_0 = input.LA(1);\n\n            if ( ((LA20_0>='0' && LA20_0<='7')) ) {\n                alt20=1;\n            }\n\n\n            switch (alt20) {\n        \tcase 1 :\n        \t    // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:771:8: OctalDigit\n        \t    {\n        \t    mOctalDigit(); \n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    if ( cnt20 >= 1 ) break loop20;\n                    EarlyExitException eee =\n                        new EarlyExitException(20, input);\n                    throw eee;\n            }\n            cnt20++;\n        } while (true);\n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"EQ\"\n", "func_signal": "public final void mEQ() throws RecognitionException", "code": "{\n    try {\n        int _type = EQ;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:162:4: ( '==' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:162:6: '=='\n        {\n        match(\"==\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"XORASS\"\n", "func_signal": "public final void mXORASS() throws RecognitionException", "code": "{\n    try {\n        int _type = XORASS;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:194:8: ( '^=' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:194:10: '^='\n        {\n        match(\"^=\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"ZeroToThree\"\n", "func_signal": "public final void mZeroToThree() throws RecognitionException", "code": "{\n    try {\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:798:2: ( '0' .. '3' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:798:4: '0' .. '3'\n        {\n        matchRange('0','3'); \n\n        }\n\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"INT\"\n", "func_signal": "public final void mINT() throws RecognitionException", "code": "{\n    try {\n        int _type = INT;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:134:5: ( 'int' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:134:7: 'int'\n        {\n        match(\"int\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"TRY\"\n", "func_signal": "public final void mTRY() throws RecognitionException", "code": "{\n    try {\n        int _type = TRY;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:112:5: ( 'try' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:112:7: 'try'\n        {\n        match(\"try\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"NBSP\"\n", "func_signal": "public final void mNBSP() throws RecognitionException", "code": "{\n    try {\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:468:2: ( '\\\\u00a0' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:468:4: '\\\\u00a0'\n        {\n        match('\\u00A0'); \n\n        }\n\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"CONST\"\n", "func_signal": "public final void mCONST() throws RecognitionException", "code": "{\n    try {\n        int _type = CONST;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:123:7: ( 'const' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:123:9: 'const'\n        {\n        match(\"const\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "// $ANTLR start \"EXTENDS\"\n", "func_signal": "public final void mEXTENDS() throws RecognitionException", "code": "{\n    try {\n        int _type = EXTENDS;\n        int _channel = DEFAULT_TOKEN_CHANNEL;\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:128:9: ( 'extends' )\n        // C:\\\\Documents and Settings\\\\nzakas\\\\Desktop\\\\ANTLR JS\\\\ES3YUITest.g:128:11: 'extends'\n        {\n        match(\"extends\"); \n\n\n        }\n\n        state.type = _type;\n        state.channel = _channel;\n    }\n    finally {\n    }\n}", "path": "coverage\\src\\com\\yahoo\\platform\\yui\\coverage\\ES3YUITestLexer.java", "repo_name": "gilamonster/yuitest", "stars": 0, "license": "None", "language": "java", "size": 16059}
{"docstring": "/** Creation des composants de l'interface et de ses vnements */\n", "func_signal": "public View()  throws Exception, IOException, UnknownHostException", "code": "{\n\tsuper(\"meRSSi\");\n\tSystem.setProperty(\"apple.laf.useScreenMenuBar\", \"true\");\n\tSystem.setProperty(\"com.apple.mrj.application.growbox.intrudes\",\"false\");\n\t\n\tWindowListener wl = new WindowAdapter(){\n\t\tpublic void windowClosing(WindowEvent e){\n\t\t\tif (t!=null) {\t\n\t\t\tsetVisible(false);\n\t\t\tJOptionPane.showMessageDialog(View.this, \"L'application est encore en etat de sauvegarde\", \"avertissement\", JOptionPane.WARNING_MESSAGE);\n\t\t\t\ttry {\n\t\t\t\t\tif(t!=null)\n\t\t\t\t\tt.join();\n\t\t\t\t}catch(Exception ee){\n\t\t\t\t\tSystem.out.print(ee);\n\t\t\t\t};\n\t\t\t}\n\t\t\telse\n\t\t\t\tSystem.exit(0);\n\t\t}\n\t};\n\taddWindowListener(wl);\n\t\n\t//*******************************\n\t//Evnements\n\t\n\t//vnements de liste\n\t\n\tlsl = new ListSelectionListener(){\n\t\tpublic void valueChanged(ListSelectionEvent e) {\n\t\t\tif(e.getSource()==listeFeeds){\n\t\t\t\tselectedFeeds = listeFeeds.getSelectedValues();\n\t\t\t\tselectedFeedsIndex = listeFeeds.getSelectedIndices();\n\t\t\t\tif (selectedFeedsIndex.length>0)\n\t\t\t\t\tshowListNews(selectedFeedsIndex[0]);\n\t\t\t}\n\t\t\t\n\t\t\tif(e.getSource()==rowSM){\n\t\t\t\tif (e.getValueIsAdjusting()) return;\n\t\t\t\t\n\t\t\t\tListSelectionModel lsm =\n\t\t\t\t\t(ListSelectionModel)e.getSource();\n\t\t\t\tif (lsm.isSelectionEmpty()) {\n\t\t\t\t\t//pas de slection\n\t\t\t\t} else {\n\t\t\t\t\tselectedNews = newsTable.getSelectedRows();\n\t\t\t\t\t//selectedRow est slectionn\n\t\t\t\t\tshowNews(selectedNews[0]);\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t\n\t//vnements de liens\n\tHyperlinkListener hl = new HyperlinkListener(){\n\t\tpublic void hyperlinkUpdate(HyperlinkEvent e) {\t\t\t\n\t\t\tif (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {\n\t\t\t\thtml = (JEditorPane) e.getSource();\n\t\t\t\ttry {\n\t\t\t\t\tString os = System.getProperty(\"os.name\").toLowerCase();\n\t\t\t\t\tif ((os.indexOf(\"windows 95\") != -1) ||\n\t\t\t\t\t\t(os.indexOf(\"windows 98\") != -1) ||\n\t\t\t\t\t\t(os.indexOf(\"windows me\") != -1)) {\n\t\t\t\t\t\tString[] command = new String[]{\"command.com\", \"/c\", \"start\", \"\\\"\\\"\", '\"' + e.getURL().toString() + '\"'};\n\t\t\t\t\t\tRuntime.getRuntime().exec(command);\n\t\t\t\t\t} else if (os.indexOf(\"windows\") != -1) {\n\t\t\t\t\t\tString[] command = new String[]{\"cmd.exe\", \"/c\", \"start\", \"\\\"\\\"\", '\"' + e.getURL().toString() + '\"'};\n\t\t\t\t\t\tRuntime.getRuntime().exec(command);\n\t\t\t\t\t} else{\n\t\t\t\t\t\thtml.setPage(e.getURL());\n\t\t\t\t\t}\n\t\t\t\t} catch (Throwable t) {\n\t\t\t\t\tt.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t};\n\t\n\t//vnements d'action\n\tMouseListener popup = new MouseListener() {\n\t\tpublic void mouseClicked(MouseEvent e) {\n\t\t}\n\t\t\n\t\tpublic void mouseEntered(MouseEvent e) {\n\t\t}\n\t\t\n\t\tpublic void mouseExited(MouseEvent e) {\n\t\t}\n\t\t\n\t\tpublic void mousePressed(MouseEvent e) {\n\t\t\tif (e.isPopupTrigger() && modeAffichage==0) {\n\t\t\t\tif(!listeFeeds.isSelectionEmpty())\n\t\t\t\t\tshowPopup(e);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic void mouseReleased(MouseEvent e) {\n\t\t\tif (e.isPopupTrigger()) {\n\t\t\t\tif(!listeFeeds.isSelectionEmpty())\n\t\t\t\t\tshowPopup(e);\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate void showPopup(MouseEvent e) {\n\t\t\tpop.show(e.getComponent(), e.getX(), e.getY());\n\t\t}\n\t};\n\t\n\t// Action listener\n\tActionListener al = new ActionListener(){\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tif (e.getSource()==jmiQuitter){\n\t\t\t\tif (t!=null) System.out.print(\"vous devez attendre la fin de la sauvegarde\");\n\t\t\t\telse\n\t\t\t\t\tSystem.exit(0);\n\t\t\t\t\n\t\t\t}\n\t\t\telse if (e.getSource()==jmiAjout||e.getSource()==boutonAjout){\n\t\t\t\tif (modeAffichage==0)\taddFeed();\n\t\t\t\telse if(modeAffichage==3){\n\t\t\t\t\tboutonSuppr.setEnabled(true); jmiSuppr.setEnabled(true);\n\t\t\t\t\tboutonAjout.setEnabled(false); jmiAjout.setEnabled(false);\n\t\t\t\t\torganiserParIndexEtKeyword();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (e.getSource()==jmiSuppr||e.getSource()==boutonSuppr){\n\t\t\t\tif (modeAffichage==0) remFeed();\n\t\t\t\telse if(modeAffichage==3) {\n\t\t\t\tboutonSuppr.setEnabled(false);jmiSuppr.setEnabled(false);\n\t\t\t\tboutonAjout.setEnabled(true); jmiAjout.setEnabled(true);\n\t\t\t\torganiserParIndex();}\n\n\t\t\t}\n\t\t\tif(e.getSource()==jmiSupprNews||e.getSource()==boutonSupprNews){\n\t\t\t\tremNews();\n\t\t\t}\n\t\t\telse if(e.getSource()==jmiApropos){\n\t\t\t\tapropos();\n\t\t\t}\n\t\t\telse if(e.getSource()==jmiListe){\n\t\t\t\t menuFlux.setEnabled(true);\n\t\t\t\tboutonAjout.setEnabled(true);\n\t\t\t\tboutonSuppr.setEnabled(true);\n\t\t\t\tboutonAjout.setText(\"+\");\n\t\t\t\tboutonSuppr.setText(\"X\");\n\t\t\t\tmodeAffichage=0;\n\t\t\t\torganiserParFeed();\n\t\t\t}\n\t\t\telse if(e.getSource()==jmiNonLu){\n\t\t\t\tmenuFlux.setEnabled(false);\n\t\t\t\tboutonAjout.setEnabled(false);\n\t\t\t\tboutonSuppr.setEnabled(false);\n\t\t\t\tmodeAffichage=1;\n\t\t\t\torganiserParFeedNonLu();\n\t\t\t}\n\t\t\telse if(e.getSource()==jmiDate){\n\t\t\t\tmenuFlux.setEnabled(false);\n\t\t\t\tboutonAjout.setEnabled(false);\n\t\t\t\tboutonSuppr.setEnabled(false);\n\t\t\t\tmodeAffichage=2;\n\t\t\t\torganiserParDate();\n\t\t\t}\n\t\t\telse if(e.getSource()==jmiIndex){\n\t\t\t\t menuFlux.setEnabled(false);\n\t\t\t\tboutonAjout.setEnabled(true);\n\t\t\t\tboutonSuppr.setEnabled(false);\t\t\t\n\t\t\t\tboutonAjout.setText(\"Mot\");\n\t\t\t\tboutonSuppr.setText(\"Freq\");\n\t\t\t\tjmiAjout.setText(\"Trie par mots cls\");\n\t\t\t\tjmiSuppr.setText(\"Trie par frequences\");\n\t\t\t\tmodeAffichage=3;\n\t\t\t\torganiserParIndex();\n\t\t\t}\n\t\t\t\n\t\t\telse if(e.getSource()==lancerRecherche){\n\t\t\t\tshowListResearch(champRecherche.getText());\n\t\t\t}\n\t\t\telse if(e.getSource()==jmiRech){\n\t\t\t\tif(jmiRech.getState())\n\t\t\t\t\ttopBar.setVisible(true);\n\t\t\t\telse\n\t\t\t\t\ttopBar.setVisible(false);\n\t\t\t}\n\t\t\telse if(e.getSource()==jppActu){\n\t\t\t\tt = new Thread() {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tactualiserFeed();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tt.start();\n\t\t\t}\n\t\t\telse if(e.getSource()==jppInfo){\n\t\t\t\tif(!listeFeeds.isSelectionEmpty()) {\n\t\t\t\t\tDialogueInfoSub f = new DialogueInfoSub( (Subscription)listModel.getElementAt(listeFeeds.getSelectedIndex() ));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(e.getSource()==jmiUpdate){\n\t\t\t\tif (t !=null) System.out.println(\"attention une mise a jour est en cour!!\");\n\t\t\t\telse {\n\t\t\t\t\tt = new Thread() {\n\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\tUpdateListe();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tt.start();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t\n\t//\n\tfile = new FileRSS(\"database.db\");\n\tcatalogue = file.getFile();\n\t\n\t\n\t//*******************************\n\tDimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n\tsetSize(screenSize.width*3/4,screenSize.height*3/4);\n\t\n\t//affichage au centre de l'cran\n\tDimension frameSize = this.getSize();\n\tif (frameSize.height > screenSize.height) {\n\t\tframeSize.height = screenSize.height;\n\t}\n\tif (frameSize.width > screenSize.width) {\n\t\tframeSize.width = screenSize.width;\n\t}\n\tthis.setLocation( (screenSize.width - frameSize.width) / 2,\n\t\t\t\t\t  (screenSize.height - frameSize.height) / 2);\n\t\n\t//*********************************\n\t// Menu\n\t\n\tmenuBar = new JMenuBar();\n\tsetJMenuBar(menuBar);\n\t\n\t//\n\tmenuFichier = new JMenu(\"Fichier\"); \n\tmenuFichier.setMnemonic(KeyEvent.VK_F);\n\tmenuBar.add(menuFichier);\n\tjmiQuitter = new JMenuItem(\"Quitter\");\n\tjmiQuitter.addActionListener(al);\n\tjmiQuitter.setMnemonic('q');\n\t\n\tmenuFichier.add(jmiQuitter);\n\t\n\t//\n\tmenuFlux = new JMenu(\"Flux\"); \n\tmenuBar.add(menuFlux);\n\t\n\tjmiUpdate = new JMenuItem(\"Actualiser\");\n\tjmiUpdate.addActionListener(al);\n\t\n\tjmiAjout = new JMenuItem(\"Ajouter un flux\");\n\tjmiAjout.addActionListener(al);\n\t\n\tjmiSuppr = new JMenuItem(\"Supprimer les flux slectionns\");\n\tjmiSuppr.addActionListener(al);\n\t\n\tjmiSupprNews = new JMenuItem(\"Supprimer les news slectionnes\");\n\tjmiSupprNews.addActionListener(al);\n\t\n\tmenuFlux.add(jmiUpdate);\n\tmenuFlux.addSeparator();\n\tmenuFlux.add(jmiAjout);\n\tmenuFlux.add(jmiSuppr);\n\tmenuFlux.addSeparator();\n\tmenuFlux.add(jmiSupprNews);\n\t//\n\tmenuAff = new JMenu(\"Affichage\");\n\tmenuBar.add(menuAff);\n\t\n\tButtonGroup group = new ButtonGroup();\n\t\n\tjmiListe = new  JRadioButtonMenuItem(\"Liste Simple\",true);\n\tjmiListe.addActionListener(al);\n\t\n\tjmiNonLu = new  JRadioButtonMenuItem(\"Non Lues\",true);\n\tjmiNonLu.addActionListener(al);\n\t\n\tjmiDate = new JRadioButtonMenuItem(\"Liste par date\");\n\tjmiDate.addActionListener(al);\n\t\n\tjmiIndex = new JRadioButtonMenuItem(\"Liste par index\");\n\tjmiIndex.addActionListener(al);\n\t\n\tjmiRech = new JCheckBoxMenuItem(\"Rechercher\",false);\n\tjmiRech.addActionListener(al);\n\t\n\tgroup.add(jmiListe);\n\tmenuAff.add(jmiListe);\n\tgroup.add(jmiNonLu);\n\tmenuAff.add(jmiNonLu);\n\tgroup.add(jmiDate);\n\tmenuAff.add(jmiDate);\n\tgroup.add(jmiIndex);\n\tmenuAff.add(jmiIndex);\n\t\n\tmenuAff.addSeparator();\n\tmenuAff.add(jmiRech);\n\t\n\t// \n\tmenuAide = new JMenu(\"Aide\");\n\tmenuBar.add(menuAide);\n\tjmiApropos = new JMenuItem(\"Apropos\");\n\tjmiApropos.addActionListener(al);\n\tmenuAide.add(jmiApropos);\n\t//*******************************\n\t\n\t\n\t// Recherche\n\ttopBar = new JPanel(new FlowLayout(FlowLayout.TRAILING));\n\tlabel = new JLabel(\"Rechercher : \");\n\tchampRecherche = new JTextField(8);\n\tlancerRecherche = new JButton(\"OK\");\n\tlancerRecherche.addActionListener(al);\n\ttopBar.add(label);\n\ttopBar.add(champRecherche);\n\ttopBar.add(lancerRecherche);\n\ttopBar.setVisible(false);\n\t//*******************************\n\t// Main Windows\n\t\n\t//liste des news d'un flux\n\tpaneNewsList = new JPanel(new BorderLayout());\n\t\n\tcolumnNames.add(\"Titre\");\n\tcolumnNames.add(\"Date\");\n\tnewsTable = new JTable(data,columnNames);\n\tnewsTable.setShowGrid(false);\n\tnewsTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n\tnewsListScroll = new JScrollPane(newsTable);\n\t\n\tpaneNewsList.add(newsListScroll,BorderLayout.CENTER);\n\tpaneNewsList.validate();\n\tpaneNewsList.setBackground(Color.white);\n\t\n\t//news elle-mme affiche ici :\n\tpaneNews = new JPanel(new BorderLayout());\n\tpaneNews.setBackground(Color.white);\n\t//paneNews.setMinimumSize(new Dimension(paneNews.getWidth(),this.getHeight()/2));\n\thtml = new JEditorPane();\n\thtml.setEditable(false);\n\thtml.addHyperlinkListener(hl);\n\tJScrollPane html_scroll = new JScrollPane(html);\n\tpaneNews.add(html_scroll,BorderLayout.CENTER);\n\t\n\t//sparation des deux sous-fentres de droite\n\tpaneDroite = new JSplitPane(JSplitPane.VERTICAL_SPLIT,paneNewsList,paneNews);\n\tpaneDroite.setOneTouchExpandable(true);\n\t\n\t\n\t//\t\tsous-fentre de gauche\n\tpaneGauche = new JPanel(new BorderLayout());\n\t//showListFeeds();\n\t\n\t//\t\tajout d'lments  la liste\n\t\n\tlisteFeeds = new JList(listModel);\n\tlisteFeeds.setCellRenderer(new MonRenderer()); \t\t\n\tlisteFeeds.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n\tlisteFeeds.setLayoutOrientation(JList.VERTICAL);\n\tlisteFeeds.setVisibleRowCount(-1);\n\t//\t\tle scroller de la liste\n\tlisteScroller = new JScrollPane(listeFeeds);\n\tpaneGauche.add(listeScroller);\n\t\n\t\n\tlisteFeeds.addListSelectionListener(lsl);\n\t\n\t//\tsparation des sous-fentres : paneGauche(liste des flux) et paneDroite\n\tjsp = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,paneGauche,paneDroite);\n\tjsp.setDividerLocation(100);\n\tjsp.setDividerSize(8);\n\tjsp.setOneTouchExpandable(true);\n\t\n\t//********************************\n\t// Boutons bas\n\t\n\tbottomBar = new JPanel(new BorderLayout());\n\tbbGauche = new JPanel(new FlowLayout(FlowLayout.LEADING,10,5));\n\t\n\t//ajouter un flux\n\tboutonAjout = new JButton(\"+\");\n\tboutonAjout.setSize(10,10);\n\tboutonAjout.addActionListener(al);\n\t\n\t//supprimer un flux\n\tboutonSuppr = new JButton(\"X\");\n\tboutonSuppr.addActionListener(al);\n\t\n\tbbGauche.add(boutonAjout);\n\tbbGauche.add(boutonSuppr);\n\t\n\tbbDroite = new JPanel(new FlowLayout(FlowLayout.TRAILING));\n\tboutonSupprNews = new JButton(\"X\");\n\tboutonSupprNews.addActionListener(al);\n\t\n\tbbDroite.add(boutonSupprNews);\n\t\n\tbottomBar.add(bbGauche,BorderLayout.LINE_START);\n\tbottomBar.add(bbDroite,BorderLayout.LINE_END);\n\t\n\t// PopMenu\n\tpop = new JPopupMenu();\n\tjppActu = new JMenuItem(\"Actualiser\");\n\tjppActu.addActionListener(al);\n\tpop.add(jppActu);\n\t\n\tpop.addSeparator();\n\t\n\tjppInfo = new JMenuItem(\"Info\");\n\tjppInfo.addActionListener(al);\n\tpop.add(jppInfo);\n\n\tColor initialColor = Color.white;\n   \t   \tJColorChooser chooser = new JColorChooser(initialColor);\n\tjppColor = new JMenuItem(\"Attribuer couleur\");\n\t\n\tjppColor.addActionListener(\n            new ActionListener() {\n                public void actionPerformed(ActionEvent e) {\n                    Color newColor = JColorChooser.showDialog(\n                                                View.this,\n                                                \"Choissiez une couleur pour ce flux\",\n                                                Color.white);\n                    if (newColor != null) {\n                    \t\t\tif(!listeFeeds.isSelectionEmpty()){\n\t\t\t\t\t\t\t\t((Subscription)catalogue.getSesSubscriptions().elementAt(selectedFeedsIndex[0])).setColor(newColor);\n\t\t\t\t\t\t\t\tshowListNews(listeFeeds.getSelectedIndex());\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tfile.saveCorlorSubscription((Subscription)catalogue.getSesSubscriptions().elementAt(selectedFeedsIndex[0]),newColor);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcatch(Exception ee){\n\t\t\t\t\t\t\t\t\tSystem.out.println(ee);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n                    }\n                }\n            }\n        );\n\tpop.add(jppColor);\n\t\n\tlisteFeeds.addMouseListener(popup);\n\t\n\t//********************************\n\t// Et Dieu cra la JFrame\n\t\n\t//\tajout d'lments  la liste\n\tshowListFeeds();\n\t\n\tgetContentPane().setLayout(new BorderLayout());\n\tgetContentPane().add(topBar,BorderLayout.PAGE_START);\n\tgetContentPane().add(jsp,BorderLayout.CENTER);\n\tgetContentPane().add(bottomBar,BorderLayout.PAGE_END);\n\n\tmaj_background();\n//\tthread_maj.start();\n\t\n\tsetLocationRelativeTo(null);\n\tsetVisible(true);\n\tsetSize(600,500);\n\tvalidate();\n\t\n}", "path": "View.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Initialisation des attributs */\n", "func_signal": "public Image()", "code": "{\n\twidth = height = 0;\n\turl = title = link =\"\";\n}", "path": "Image.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Affichage  de l'ensemble des news \n*/\n", "func_signal": "public void listSesItems()", "code": "{\n\tIterator it = sesItems.iterator();\n\twhile(it.hasNext()){\n\t\t((Item)(it.next())).afficher();\n\t}\n}", "path": "Feed.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Affichage des news organiser par index/mot cl */\n", "func_signal": "private void organiserParIndexEtKeyword()", "code": "{\ntry {\n\tcatalogue = file.getFileByIndexAndKeyword();\n\tactualiserListFeeds();\n\tif(listeFeeds.isSelectionEmpty())\n\t\tshowListNews(0);\n\telse showListNews(listeFeeds.getSelectedIndex());\n}catch (Exception ee) {\n\tSystem.out.println(ee);\n};\n\t}", "path": "View.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Supression des news slectionnes */\n", "func_signal": "public void remNews()", "code": "{\n\tItem item;\n\tif(selectedNews!=null){\n\t\tint reponse = JOptionPane.showConfirmDialog(\n\t\t\t\t\t\t\t\t\t\t\t\t\tView.this,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"Etes vous sr de supprimer les news slectionnes ?\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"Suppression de News\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tJOptionPane.YES_NO_OPTION);\n\t\tif (reponse==JOptionPane.YES_OPTION){\n\t\t\t\n\t\t\tint taille = selectedNews.length;\n\t\t\tint[] selTemp = (int[]) selectedNews.clone();\n\t\t\t\n\t\t\tfor (int k=0;k<newsTable.getColumnCount();k++){//mmorisation du statut\n\t\t\t\tsortingStatus[k]= sorter.getSortingStatus(k);\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i=0;i<taille;i++){\n\t\t\t\ttry {\n\t\t\t\t\titem =(Item)newsTable.getValueAt(selTemp[i],0);\n\t\t\t\t\tfile.deleteFileItem(item);\n\t\t\t\t\t((Item)newsTable.getValueAt(selTemp[i],0)).getSonFeed().getSesItems().remove(item);\n\t\t\t\t}catch(Exception e) {\t\n\t\t\t\t\t\t\tSystem.out.println(e);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (int k=0;k<newsTable.getColumnCount();k++){//restitution du statut\n\t\t\t\t\t((TableSorter) newsTable.getModel()).setSortingStatus(k,sortingStatus[k]);\n\t\t\t\t}\n\t\t\t\tnewsTable.setModel(sorter);\n\t\t\t}\n\t\t\n\t\t\tnewsTable.setModel(sorter);\n\t\t\tpaneNews.removeAll();\n\t\t\tpaneNews.add(new JLabel(\"\"));\n\t\t\tpaneNews.validate();\n\t\t\tif(!listeFeeds.isSelectionEmpty())\n\t\t\t\tshowListNews(listeFeeds.getSelectedIndex());\n\n\t\t\tlisteFeeds.repaint();\n\t\t}\n\t}\n}", "path": "View.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Affichage console de l'image\n*/\n", "func_signal": "public void afficher()", "code": "{\n\tSystem.out.println(\"IMAGE\");\n\tSystem.out.println(\"largeur : \"+width);\n\tSystem.out.println(\"hauteur : \"+height);\n\tSystem.out.println(\"url : \"+url);\n\tSystem.out.println(\"titre : \"+title);\n\tSystem.out.println(\"lien : \"+link);\n}", "path": "Image.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "//Render du Table ****************************************************************************\n\t/** Procedure de lancement de l'application */\n", "func_signal": "public static void main (String[] arguments)", "code": "{\n\t\tView view;\n\t\ttry {\n\t\t\tUIManager.setLookAndFeel(\n\t\t\t\t\t\t\t\t\t UIManager.getCrossPlatformLookAndFeelClassName());\n\t\t\tSystem.setProperty(\"http.proxyHost\",\"proxy-web\");\n\t\t\tSystem.setProperty(\"http.proxyPort\",\"3128\");\n\t\t\tview = new View();\n\t\t} catch (Exception e) { \n\t\t\tJOptionPane.showMessageDialog(\t\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t \"Une erreur s'est produite lors de la consultation\\n de la base de donnne SQLite\",\"Ajout de flux\",\n\t\t                                    JOptionPane.ERROR_MESSAGE);\n\n\t\t}\n\t\t\n\t\t\n\t}", "path": "View.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Affichage d'une News dans le JPaneEditor \n\t@param i indice de la news dans un flux\n*/\n", "func_signal": "public void showNews(int i)", "code": "{\n          try {\n\t\tnews = ((Item)newsTable.getValueAt(newsTable.getSelectedRow(),0));\n        news.setRead(true);\n        file.saveFileReadItem(news);\n        listeFeeds.repaint();\n\t\tpaneNews.removeAll();\n\t\tmakeHTML(news);\n\t\thtml = new JEditorPane();\t\n\t\thtml.setPage(\"file:news.html\");\n\t} catch (MalformedURLException e) {\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}catch(Exception e) {\n\t\te.printStackTrace();\n\t}\n\thtml.setEditable(false);\n\thtml.validate();\n\tJScrollPane html_scroll = new JScrollPane(html);\n\tpaneNews.add(html_scroll,BorderLayout.CENTER);\n\tpaneNews.validate();\n}", "path": "View.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Affichage d'une liste de news dans le JTable \n\t@param i indice de l'abonnement du catalogue\n*/\n", "func_signal": "public void showListNews(int i)", "code": "{\n\n\tif (catalogue!=null && catalogue.getSesSubscriptions().size()>i) {\n\t\t\tIterator it = \n\t\t\t((Subscription)catalogue.getSesSubscriptions().elementAt(i)).getFeed().getSesItems().iterator();\n\t\t\tItem item;\n\t\t\tdata.removeAllElements();\n\t\t\twhile (it.hasNext()){\n\t\t\t\titem = (Item)it.next();\n\t\t\t\tVector v = new Vector();\n\t\t\t\tv.add(item);\n\t\t\t\tv.add(item);\n\t\t\t\tdata.add(v);\n\t\t\t}\n\t\t\t\n\t\t\tAbstractTableModel model = new AbstractTableModel(){\n\t\t\t\t\n\t\t\t\tpublic int getRowCount() {\n\t\t\t\t\treturn data.size();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic int getColumnCount() {\n\t\t\t\t\treturn columnNames.size();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic String getColumnName(int arg0){\n\t\t\t\t\treturn (String)columnNames.elementAt(arg0);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic Object getValueAt(int arg0, int arg1) {\n\t\t\t\t\treturn ((Vector)data.elementAt(arg0)).elementAt(arg1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic boolean isCellEditable(int arg0,int arg1){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};\n\t\t\t\n\t\t\tnewsTable = new JTable(data,columnNames);\n\t\t\tnewsTable.setShowGrid(false);\n\t\t\t//tri\n\t\t\tsorter = new TableSorter(model);\n\t\t\tnewsTable.setModel(sorter);\n\t\t\tAlternateCellTableModel renderer = new AlternateCellTableModel();\n\t\t\trenderer.setColorsSel(new Color(111,143,149),Color.white);\n\t\t\trenderer.setColors(Color.white,Color.black);\n\t\t\tTableColumn col;\n\t\t\t\n\t\t\tfor (int k=0;k<newsTable.getColumnCount();k++){//restitution du statut\n\t\t\t\t((TableSorter) newsTable.getModel()).setSortingStatus(k,sortingStatus[k]);\n\t\t\t\tcol =  newsTable.getColumnModel().getColumn(k);\n\t\t\t\tcol.setCellRenderer(renderer);\n\t\t\t\tif (k==1) col.setPreferredWidth(10);\n\n\t\t\t}\n\t\t\tsorter.setTableHeader(newsTable.getTableHeader());\n\n\t\t\t//\n\t\t\trowSM = newsTable.getSelectionModel();\n\t\t\trowSM.addListSelectionListener(lsl);\n\t\t\tnewsListScroll = new JScrollPane(newsTable);\n\t\t\tpaneNewsList.removeAll();\n\t\t\tpaneNewsList.add(newsListScroll,BorderLayout.CENTER);\n\t\t\tpaneNewsList.validate();\n\t}\n}", "path": "View.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Suppression des news selections */\n", "func_signal": "public void remFeed()", "code": "{\n\tif (!(listeFeeds.isSelectionEmpty())){\n\t\tint reponse = JOptionPane.showConfirmDialog(\n\t\t\t\t\t\t\t\t\t\t\t\t\tView.this,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"Etes vous sr de supprimer les flux slectionns ?\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"Suppression de Flux\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tJOptionPane.YES_NO_OPTION);\n\t\t\n\t\tif (reponse==JOptionPane.YES_OPTION){\n\t\t\ttry {\n\n\t\t\tObject[] selTemp = selectedFeeds;\n\t\t\tfor (int i=0;i<selTemp.length;i++){\n\t\t\t\tSubscription sub =(Subscription)selTemp[i];\n\t\t\t\tfile.deleteFileSubscription(sub);\n\t\t\t\tlistModel.removeElement(selTemp[i]);\n\t\t\t\tcatalogue.getSesSubscriptions().remove(selTemp[i]);\n\t\t\t}\n\t\t\tdata.removeAllElements();\n\t\t\tnewsTable = new JTable(data,columnNames);\n\t\t\tnewsTable.setShowGrid(false);\n\t\t\tnewsListScroll = new JScrollPane(newsTable);\n\t\t\tpaneNewsList.removeAll();\n\t\t\tpaneNewsList.add(newsListScroll,BorderLayout.CENTER);\n\t\t\tpaneNewsList.validate();\n\t\t\tpaneNews.removeAll();\n\t\t\tpaneNews.add(new JLabel(\"\"));\n\t\t\tpaneNews.validate();\n\t\t\t}catch(Exception e){\n\t\t\t\tSystem.out.print(e);\n\t\t\t}\n\t\t}\t\n\t}\n}", "path": "View.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Initialise les attributs de la classe */\n", "func_signal": "public Feed()", "code": "{\n\ttitle =\n\tlink  =\n\tdescription =\t\n\tcopyright =\"\";\n\tsonImage = new Image();\n\tsesItems = new Vector();\n\tpubDate = new Time((new Date()).getTime());\n}", "path": "Feed.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Met a jour les flux en arrire plan */\n", "func_signal": "public void maj_background()", "code": "{\n\tthread_maj = new Thread () {\n\t\t\tpublic void run() {\n\t\t\t\tIterator it = catalogue.getSesSubscriptions().iterator();\n\t\t\t\tboolean cond = true;\n\t\t\t\twhile(cond) {\n\t\t\t\t\ttry{\n\t\t\t\t\t\tThread.sleep(10000);\n\t\t\t\t  \t\tif(t==null && catalogue !=null && modeAffichage==0) {\n\t\t\t\t\t  \t\tcatalogue.refresh();\n\t\t\t\t\t\t\tfile.saveFile(catalogue);\n\t\t\t\t\t\t\tcatalogue=file.getFile();\n\t\t\t\t\t\t\tactualiserFeed();\n\t\t\t\t\t\t}\n\t\t\t\t\t}catch(Exception e){\n\t\t\t\t\t\tSystem.out.println(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n}", "path": "View.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Affichage console d'un catalogue */\n", "func_signal": "public void afficher()", "code": "{\n\tSubscription sub;\n\n\tSystem.out.println(name);\n\tIterator it = sesSubscriptions.iterator();\n\twhile(it.hasNext()) {\n\t\tSystem.out.println(\"> Abonnement :\");\n\t\t((Subscription)it.next()).afficher();\n\t}\n}", "path": "Catalogue.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Met a jour l'ensemble des flux avec affichage de l'indexation */\n", "func_signal": "public void UpdateListe()", "code": "{\n    JFrame jf = new JFrame(\"Indexation\");\n\t\n    JPanel jp =  new JPanel();\n    JProgressBar jpBar = new JProgressBar();\n\tjf.getContentPane().setLayout(new BorderLayout());\n\tmsg=new JLabel(); \n\tjpBar.setIndeterminate(true);\n\t\n    jp.add(jpBar);\n\tjf.getContentPane().add(jp,BorderLayout.CENTER);\n\tjf.getContentPane().add(msg,BorderLayout.PAGE_END);\n\t\n\tjf.setBounds(500, 500, 200, 80);\n\tjf.setResizable(false);\n\t\n\tIterator it = catalogue.getSesSubscriptions().iterator();\n\twhile(it.hasNext()) {\n\t\ttry {\n\t\t\t((Subscription)it.next()).refresh();\n\t\t}catch (UnknownHostException e)\n\t\t{ JOptionPane.showMessageDialog(\t\n\t\t\t\t\t\t\tView.this, \"Echec de la connexion\",\"Erreur\", JOptionPane.ERROR_MESSAGE);}\n\t    catch (IOException e)\n\t\t{  JOptionPane.showMessageDialog(\t\n\t\t\t\t\t\t\tView.this, \"Echec de la connexion\",\"Erreur\", JOptionPane.ERROR_MESSAGE);}\n\t\tcatch (SAXParseException e)\n\t\t{  JOptionPane.showMessageDialog(\t\n\t\t\t\t\t\t\tView.this, \"Echec du Paser \\n Vrifiez que le flux est de type XML\",\"Erreur\", JOptionPane.ERROR_MESSAGE);}\n\t\t}\n\t\n\tfile.setWord(\"Indexation des nouveaux mots\");\n\ttry{\n\t\tt = new Thread(){\n\t\t\tpublic void run(){\n\t\t\t\ttry {\n\t\t\t\t\tFileRSS f = new FileRSS(\"database.db\");\n\t\t\t\t\tString word;\n\t\t\t\t\twhile ( (word=file.getWord()) != null ) {\n\t\t\t\t\t\tmsg.setText(\"Indexation de : \"+word);\n\t\t\t\t\t}\n\t\t\t\t}catch(Exception e) {\n\t\t\t\t\tSystem.out.println(e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tt.start();\n\t\tjf.setVisible(true);\n\t\tfile.saveFile(catalogue);\n\t\tjf.dispose();\n\t\tcatalogue=file.getFile();\n\t\tif(t!=null)\n\t\tt.join();\n\t\tactualiserFeed();\n\t\tif(!listeFeeds.isSelectionEmpty())\n\t\t\t\tshowListNews(listeFeeds.getSelectedIndex());\n\t\tlisteFeeds.repaint();\n\t\tt=null;\n\t\t\n\t}catch(Exception e) {\n\t\tSystem.out.println(e);\n\t}\n}", "path": "View.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Affichage des news selon la recherche dans l'index par mot cl\n\t@param keyword mot cl a rechercher dans l'index\n*/\n", "func_signal": "public void showListResearch(String keyword)", "code": "{\n\ttry {\n\t\tif (keyword.equals(\"\")){\n\t\t\tcatalogue = file.getFile();\n\t\t}\n\t\telse{\n\t\t\tCatalogue c = file.searchKeyword(keyword);\n\t\t\tif ( c== null) {\n\t\t\t\tJOptionPane.showMessageDialog(\t\n\t\t\t\t\t\t\tView.this, \"Le mot \"+keyword+\"ne fait partie d'aucune news\",\"Recherche\", JOptionPane.INFORMATION_MESSAGE);\n\t\t\t}else {\n\t\t\t\tcatalogue = c;\n\t\t\t\tpaneNewsList.removeAll();\n\t\t\t}\n\t\t}\n\t\t\n\t\tactualiserListFeeds();\n\t\tif(listeFeeds.isSelectionEmpty())\n\t\t\tshowListNews(0);\n\t\telse showListNews(listeFeeds.getSelectedIndex());\n\t\t\n\t}catch(Exception e){\n\t\tSystem.out.print(e);\n\t}\n}", "path": "View.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Actualise l'affichage de la liste des flux */\n", "func_signal": "public void actualiserListFeeds()", "code": "{\n\tlistModel.removeAllElements();\n\tshowListFeeds();\n}", "path": "View.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Affichage des news organiser par flux */\n", "func_signal": "private void organiserParFeed()", "code": "{\ntry {\n\tcatalogue = file.getFile();\n\tactualiserListFeeds();\n\tif(listeFeeds.isSelectionEmpty())\n\t\tshowListNews(0);\n\telse showListNews(listeFeeds.getSelectedIndex());\n}catch (Exception ee) {\n\tSystem.out.println(ee);\n};\n\t}", "path": "View.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Affichage des news organiser par date */\n", "func_signal": "private void organiserParDate()", "code": "{\n\ttry {\n\t\tcatalogue = file.getFileByDate();\n\t\tactualiserListFeeds();\n\t\tif(listeFeeds.isSelectionEmpty())\n\t\t\tshowListNews(0);\n\t\telse showListNews(listeFeeds.getSelectedIndex());\n\t}catch (Exception ee) {\n\t\tSystem.out.println(ee);\n\t};\n}", "path": "View.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Affichage de la liste des Abonnements dans la JList */\n", "func_signal": "public void showListFeeds()", "code": "{\n\n\tif(catalogue!= null && catalogue.getSesSubscriptions()!=null) {\n\t\t\tIterator it = catalogue.getSesSubscriptions().iterator();\n\t\t\twhile(it.hasNext()){\n\t\t\t\tlistModel.addElement((Subscription)it.next());\n\t\t\t}\n\t}\n}", "path": "View.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/** Affichage des news organiser par index/frequence */\n", "func_signal": "private void organiserParIndex()", "code": "{\n\ttry {\n\t\tcatalogue = file.getFileByIndexAndFrequency();\n\t\tactualiserListFeeds();\n\t\tif(listeFeeds.isSelectionEmpty())\n\t\t\tshowListNews(0);\n\t\telse showListNews(listeFeeds.getSelectedIndex());\n\t}catch (Exception ee) {\n\t\tSystem.out.println(ee);\n\t};\n}", "path": "View.java", "repo_name": "vivienschilis/merssi", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Returns the library directory. If not libPath is configured, the working directory is returned.\n * @return Returns the value of the libraryDirectory field.\n */\n", "func_signal": "protected File getLibDirectory()", "code": "{\n    if (getLibPath() != null) {\n        return new File(getWorkDirectory(), getLibPath());\n    }\n    return getWorkDirectory();\n}", "path": "webstart-maven-plugin\\src\\main\\java\\org\\codehaus\\mojo\\webstart\\AbstractBaseJnlpMojo.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/**\n * Returns the location of the directory containing\n * non-jar resources that are to be included in the JNLP bundle.\n *\n * @return Returns the value of the resourcesDirectory field, never null.\n */\n", "func_signal": "protected File getResourcesDirectory()", "code": "{\n\n    if ( resourcesDirectory == null )\n    {\n        resourcesDirectory = new File(getProject().getBasedir(), DEFAULT_RESOURCES_DIR );\n    }\n\n    return resourcesDirectory;\n\n}", "path": "webstart-maven-plugin\\src\\main\\java\\org\\codehaus\\mojo\\webstart\\AbstractBaseJnlpMojo.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/** Pretty-print object */\n", "func_signal": "public String toString()", "code": "{\n\tStringBuffer sb = new StringBuffer();\n\tfor(int i = 0; i < _versionIds.size(); i++) {\n\t    sb.append(_versionIds.get(i).toString());\n\t    sb.append(' ');\n\t}\n\treturn sb.toString();\n}", "path": "webstart-jnlp-servlet\\src\\main\\java\\jnlp\\sample\\util\\VersionString.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/**\n * If sign is enabled, sign the jars, otherwise rename them into final jars\n */\n", "func_signal": "protected void signOrRenameJars() throws MojoExecutionException, MojoFailureException", "code": "{\n\n    if ( getSign() != null )\n    {\n        getSign().init(getLog(), getWorkDirectory(), isVerbose());\n\n        if( unsignAlreadySignedJars() )\n        {\n            removeExistingSignatures( getLibDirectory(), unprocessedJarFileFilter );\n        }\n\n        if ( isPack200() )\n        {\n            // http://java.sun.com/j2se/1.5.0/docs/guide/deployment/deployment-guide/pack200.html\n            // we need to pack then unpack the files before signing them\n            Pack200.packJars( getLibDirectory(), unprocessedJarFileFilter, isGzip() );\n            Pack200.unpackJars( getLibDirectory(), unprocessedPack200FileFilter );\n            // As out current Pack200 ant tasks don't give us the ability to use a temporary area for\n            // creating those temporary packing, we have to delete the temporary files.\n            deleteFiles( getLibDirectory(), unprocessedPack200FileFilter );\n            // specs says that one should do it twice when there are unsigned jars??\n            // Pack200.unpackJars( applicationDirectory, updatedPack200FileFilter );\n        }\n\n        int signedJars = signJars( getLibDirectory(), unprocessedJarFileFilter );\n\n        if ( signedJars != getModifiedJnlpArtifacts().size() )\n        {\n            throw new IllegalStateException(\n                    \"The number of signed artifacts (\" + signedJars + \") differ from the number of modified \"\n                    + \"artifacts (\" + getModifiedJnlpArtifacts().size() + \"). Implementation error\" );\n        }\n\n    } else {\n        makeUnprocessedFilesFinal( getLibDirectory(), unprocessedJarFileFilter );   \n    }\n}", "path": "webstart-maven-plugin\\src\\main\\java\\org\\codehaus\\mojo\\webstart\\AbstractBaseJnlpMojo.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/**\n * Creates a new {@code AbstractBaseJnlpMojo}.\n */\n", "func_signal": "public AbstractBaseJnlpMojo()", "code": "{\n\n    processedJarFileFilter = new FileFilter() {\n\n        public boolean accept( File pathname )\n        {\n            return pathname.isFile() && pathname.getName().endsWith( \".jar\" )\n                  && ! pathname.getName().startsWith( UNPROCESSED_PREFIX );\n        }\n\n    };\n\n    unprocessedJarFileFilter = new FileFilter() {\n\n        public boolean accept( File pathname )\n        {\n            return pathname.isFile() && pathname.getName().startsWith( UNPROCESSED_PREFIX )\n                   && pathname.getName().endsWith( \".jar\" );\n        }\n\n    };\n\n    unprocessedPack200FileFilter = new UnprocessedPack200FileFilter();\n}", "path": "webstart-maven-plugin\\src\\main\\java\\org\\codehaus\\mojo\\webstart\\AbstractBaseJnlpMojo.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/**\n * Returns the library path. This is ths subpath within the working directory, where the libraries are placed.\n * If the path is not configured it is <code>null</code>.\n * @return the library path or <code>null</code> if not configured.\n */\n", "func_signal": "public String getLibPath()", "code": "{\n    if (( libPath == null ) || ( libPath.trim().length() == 0 )){\n        return null;\n    }\n    return libPath;\n}", "path": "webstart-maven-plugin\\src\\main\\java\\org\\codehaus\\mojo\\webstart\\AbstractBaseJnlpMojo.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/**\n * TODO finish comment\n *\n * @param artifact\n * @param mainClass\n * @return\n * @throws MalformedURLException\n */\n", "func_signal": "protected boolean artifactContainsClass( Artifact artifact, final String mainClass ) throws MalformedURLException", "code": "{\n    boolean containsClass = true;\n\n    // JarArchiver.grabFilesAndDirs()\n    ClassLoader cl = new java.net.URLClassLoader( new URL[]{artifact.getFile().toURI().toURL()} );\n    Class c = null;\n    try\n    {\n        c = Class.forName( mainClass, false, cl );\n    }\n    catch ( ClassNotFoundException e )\n    {\n        getLog().debug( \"artifact \" + artifact + \" doesn't contain the main class: \" + mainClass );\n        containsClass = false;\n    }\n    catch ( Throwable t )\n    {\n        getLog().info( \"artifact \" + artifact + \" seems to contain the main class: \" + mainClass +\n            \" but the jar doesn't seem to contain all dependencies \" + t.getMessage() );\n    }\n\n    if ( c != null )\n    {\n        getLog().debug( \"Checking if the loaded class contains a main method.\" );\n\n        try\n        {\n            c.getMethod( \"main\", new Class[]{String[].class} );\n        }\n        catch ( NoSuchMethodException e )\n        {\n            getLog().warn( \"The specified main class (\" + mainClass +\n                \") doesn't seem to contain a main method... Please check your configuration.\" + e.getMessage() );\n        }\n        catch ( NoClassDefFoundError e )\n        {\n            // undocumented in SDK 5.0. is this due to the ClassLoader lazy loading the Method thus making this a case tackled by the JVM Spec (Ref 5.3.5)!\n            // Reported as Incident 633981 to Sun just in case ...\n            getLog().warn( \"Something failed while checking if the main class contains the main() method. \" +\n                \"This is probably due to the limited classpath we have provided to the class loader. \" +\n                \"The specified main class (\" + mainClass +\n                \") found in the jar is *assumed* to contain a main method... \" + e.getMessage() );\n        }\n        catch ( Throwable t )\n        {\n            getLog().error( \"Unknown error: Couldn't check if the main class has a main method. \" +\n                \"The specified main class (\" + mainClass +\n                \") found in the jar is *assumed* to contain a main method...\", t );\n        }\n    }\n\n    return containsClass;\n}", "path": "webstart-maven-plugin\\src\\main\\java\\org\\codehaus\\mojo\\webstart\\AbstractBaseJnlpMojo.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/** Constructs a VersionString object from string */\n", "func_signal": "public VersionString(String vs)", "code": "{\n\t_versionIds = new ArrayList();\n\tif (vs != null) {\n\t    StringTokenizer st = new StringTokenizer(vs, \" \", false);\n\t    while(st.hasMoreElements()) {\n\t\t// Note: The VersionID class takes care of a postfixed '+'\n\t\t_versionIds.add(new VersionID(st.nextToken()));\n\t    }\n\t}\n}", "path": "webstart-jnlp-servlet\\src\\main\\java\\jnlp\\sample\\util\\VersionString.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/**\n * Delete the specified directory.\n * \n * @param dir\n *            the directory to delete\n * @throws MojoExecutionException\n */\n", "func_signal": "private void removeDirectory(File dir) throws MojoExecutionException", "code": "{\n    if (dir != null)\n    {\n        if (dir.exists() && dir.isDirectory())\n        {\n            getLog().info(\"Deleting directory \" + dir.getAbsolutePath());\n            Utils.removeDir(dir);\n        }\n    }\n}", "path": "webstart-maven-plugin\\src\\main\\java\\org\\codehaus\\mojo\\webstart\\AbstractBaseJnlpMojo.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "// Debug\n", "func_signal": "public String toString()", "code": "{ \n\treturn \"DownloadRequest[path=\" + _path + \n\t    showEntry(\" encoding=\", _encoding) +\n\t    showEntry(\" query=\", _query) + \n\t    showEntry(\" TestJRE=\", _testJRE) +\n\t    showEntry(\" version=\", _version) +\n\t    showEntry(\" currentVersionId=\", _currentVersionId) +\n\t    showEntry(\" os=\", _os) + \n\t    showEntry(\" arch=\", _arch) + \n\t    showEntry(\" locale=\", _locale) +\n\t    showEntry(\" knownPlatforms=\", _knownPlatforms)\n\t    + \" isPlatformRequest=\" + _isPlatformRequest + \"]\";\n}", "path": "webstart-jnlp-servlet\\src\\main\\java\\jnlp\\sample\\servlet\\DownloadRequest.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "// Last modified time of entry;\n", "func_signal": "public PathEntries(List versionXmlList, List directoryList, List platformList, long lastModified)", "code": "{\n\t    _versionXmlList = versionXmlList;\n\t    _directoryList = directoryList;\n\t    _platformList = platformList;\n\t    _lastModified = lastModified;\n\t}", "path": "webstart-jnlp-servlet\\src\\main\\java\\jnlp\\sample\\servlet\\ResourceCatalog.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/**\n * Conditionally copy the file into the target directory.\n * The operation is not performed when the target file exists and is up to date.\n * The target file name is taken from the <code>sourceFile</code> name.\n *\n * @return <code>true</code> when the file was copied, <code>false</code> otherwise.\n * @throws IllegalArgumentException if sourceFile is <code>null</code> or\n * <code>sourceFile.getName()</code> is <code>null</code>\n * @throws IOException if an error occurs attempting to copy the file.\n */\n", "func_signal": "protected boolean copyFileToDirectoryIfNecessary( File sourceFile, File targetDirectory ) throws IOException", "code": "{\n\n    if ( sourceFile == null )\n    {\n        throw new IllegalArgumentException( \"sourceFile is null\" );\n    }\n\n    File targetFile = new File( targetDirectory, sourceFile.getName() );\n\n    boolean shouldCopy = ! targetFile.exists() || ( targetFile.lastModified() < sourceFile.lastModified() );\n\n    if ( shouldCopy )\n    {\n        FileUtils.copyFileToDirectory( sourceFile, targetDirectory );\n    }\n    else\n    {\n        getLog().debug( \"Source file hasn't changed. Do not overwrite \"\n                        + targetFile + \" with \" + sourceFile + \".\" );\n\n    }\n\n    return shouldCopy;\n\n}", "path": "webstart-maven-plugin\\src\\main\\java\\org\\codehaus\\mojo\\webstart\\AbstractBaseJnlpMojo.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/** Check if this VersionString object contains the VersionID m */\n", "func_signal": "public boolean contains(VersionID m)", "code": "{\n\tfor(int i = 0; i < _versionIds.size(); i++) {\n\t    VersionID vi = (VersionID)_versionIds.get(i);\n\t    boolean check = vi.match(m);\n\t    if (check) return true;\n\t}\n\treturn false;\n}", "path": "webstart-jnlp-servlet\\src\\main\\java\\jnlp\\sample\\util\\VersionString.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/**\n * @return the number of signed jars\n */\n", "func_signal": "private int signJars( File directory, FileFilter fileFilter ) throws MojoExecutionException, MojoFailureException", "code": "{\n\n    File[] jarFiles = directory.listFiles( fileFilter );\n\n    if ( getLog().isDebugEnabled() )\n    {\n        getLog().debug( \"signJars in \" + directory + \" found \" + jarFiles.length + \" jar(s) to sign\" );\n    }\n\n    if ( jarFiles.length == 0 )\n    {\n        return 0;\n    }\n\n    JarSignerMojo jarSigner = getSign().getJarSignerMojo();\n\n    for ( int i = 0; i < jarFiles.length; i++ )\n    {\n        String unprocessedJarFileName = jarFiles[i].getName();\n        if (!unprocessedJarFileName.startsWith( UNPROCESSED_PREFIX )) {\n            throw new IllegalStateException( \"We are about to sign an non \" + UNPROCESSED_PREFIX\n                                             + \" file with path: \" + jarFiles[i].getAbsolutePath() );\n        }\n        jarSigner.setJarPath( jarFiles[i] );\n        File signedJar = new File( jarFiles[i].getParent(), unprocessedJarFileName.substring( UNPROCESSED_PREFIX.length() ) );\n        jarSigner.setSignedJar( signedJar );\n        if ( signedJar.exists() ) {\n            boolean deleted = signedJar.delete();\n            if (! deleted) {\n                throw new IllegalStateException( \"Couldn't delete obsolete signed jar: \" + signedJar.getAbsolutePath() );\n            } \n        }\n        jarSigner.execute();\n        getLog().debug( \"lastModified signedJar:\" + signedJar.lastModified() + \" unprocessed signed Jar:\" + jarFiles[i].lastModified() );\n\n        // remove unprocessed files\n        // TODO wouldn't have to do that if we copied the unprocessed jar files in a temporary area\n        boolean deleted = jarFiles[i].delete();\n        if (! deleted) {\n            throw new IllegalStateException( \"Couldn't delete obsolete unprocessed jar: \" + jarFiles[i].getAbsolutePath() );\n        } \n    }\n\n    return jarFiles.length;\n}", "path": "webstart-maven-plugin\\src\\main\\java\\org\\codehaus\\mojo\\webstart\\AbstractBaseJnlpMojo.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/** Print info about an entry */\n", "func_signal": "public String toString()", "code": "{ \n\treturn \"JnlpResource[WAR Path: \" + _path + \n\t    showEntry(\" versionId=\",_versionId) +\n\t    showEntry(\" name=\", _name) +\n\t    \" lastModified=\" + new Date(_lastModified) +\n\t    showEntry(\" osList=\", _osList) +\n\t    showEntry(\" archList=\", _archList) +\n\t    showEntry(\" localeList=\", _localeList) + \"]\" +\n\t    showEntry(\" returnVersionId=\", _returnVersionId) + \"]\";\n\t\n}", "path": "webstart-jnlp-servlet\\src\\main\\java\\jnlp\\sample\\servlet\\JnlpResource.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/**\n * Conditionally copy the jar file into the target directory.\n * The operation is not performed when a signed target file exists and is up to date.\n * The signed target file name is taken from the <code>sourceFile</code> name.E\n * The unsigned target file name is taken from the <code>sourceFile</code> name prefixed with UNPROCESSED_PREFIX.\n * TODO this is confusing if the sourceFile is already signed. By unsigned we really mean 'unsignedbyus'\n *\n * @return <code>true</code> when the file was copied, <code>false</code> otherwise.\n * @throws IllegalArgumentException if sourceFile is <code>null</code> or\n * <code>sourceFile.getName()</code> is <code>null</code>\n * @throws IOException if an error occurs attempting to copy the file.\n */\n", "func_signal": "protected boolean copyJarAsUnprocessedToDirectoryIfNecessary( File sourceFile, File targetDirectory ) throws IOException", "code": "{\n\n    if ( sourceFile == null )\n    {\n        throw new IllegalArgumentException( \"sourceFile is null\" );\n    }\n\n    File signedTargetFile = new File( targetDirectory, sourceFile.getName() );\n\n    File unsignedTargetFile = new File( targetDirectory, UNPROCESSED_PREFIX + sourceFile.getName() );\n\n    boolean shouldCopy = ! signedTargetFile.exists() || ( signedTargetFile.lastModified() < sourceFile.lastModified() );\n\n    shouldCopy = shouldCopy && (! unsignedTargetFile.exists() || ( unsignedTargetFile.lastModified() < sourceFile.lastModified() ) );\n\n    if ( shouldCopy )\n    {\n        FileUtils.copyFile( sourceFile, unsignedTargetFile );\n    }\n    else\n    {\n        getLog().debug( \"Source file hasn't changed. Do not reprocess \"\n                        + signedTargetFile + \" with \" + sourceFile + \".\" );\n    }\n\n    return shouldCopy;\n\n}", "path": "webstart-maven-plugin\\src\\main\\java\\org\\codehaus\\mojo\\webstart\\AbstractBaseJnlpMojo.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/* Split parameter at spaces. Convert '\\ ' insto a space */\n", "func_signal": "private String[] getParameterList(HttpServletRequest req, String key)", "code": "{\n\tString res = req.getParameter(key);\n\treturn (res == null) ? null : getStringList(res.trim());\n}", "path": "webstart-jnlp-servlet\\src\\main\\java\\jnlp\\sample\\servlet\\DownloadRequest.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/**\n * @return the number of deleted files\n */\n", "func_signal": "private int deleteFiles( File directory, FileFilter fileFilter ) throws MojoExecutionException", "code": "{\n    File[] files = directory.listFiles( fileFilter );\n\n    if ( getLog().isDebugEnabled() )\n    {\n        getLog().debug( \"deleteFiles in \" + directory + \" found \" + files.length + \" file(s) to delete\" );\n    }\n\n    if ( files.length == 0 )\n    {\n        return 0;\n    }\n\n    for ( int i = 0; i < files.length; i++ )\n    {\n        boolean deleted = files[i].delete();\n        if (! deleted) {\n            throw new IllegalStateException( \"Couldn't delete file: \" + files[i].getAbsolutePath() );\n        } \n    }\n    return files.length;\n}", "path": "webstart-maven-plugin\\src\\main\\java\\org\\codehaus\\mojo\\webstart\\AbstractBaseJnlpMojo.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/** Returns a DownloadRequest for the currentVersionId, that can be used\n *  to lookup the existing cached version\n */\n", "func_signal": "private DownloadRequest(DownloadRequest dreq)", "code": "{\n\t_encoding = dreq._encoding;\n\t_context = dreq._context;\n\t_httpRequest = dreq._httpRequest;\n\t_path = dreq._path;\t        \n\t_version = dreq._currentVersionId;\n\t_currentVersionId = null;\n\t_os = dreq._os;\n\t_arch = dreq._arch;\n\t_locale = dreq._locale;\n\t_knownPlatforms = dreq._knownPlatforms;\t\n\t_isPlatformRequest =  dreq._isPlatformRequest;\t\n\t_query = dreq._query;\n\t_testJRE = dreq._testJRE;\n}", "path": "webstart-jnlp-servlet\\src\\main\\java\\jnlp\\sample\\servlet\\DownloadRequest.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/** This method finds the best match, or return the best error code. The\n *  result parameter must be an array with room for one element.\n *\n *  If a match is found, the method returns DownloadResponse.STS_00_OK\n *  If one or more entries matches on: name, version-id, os, arch, and locale,\n *  then the one with the highest version-id is set in the result[0] field.\n *\n *  If a match is not found, it returns an error code, either: ERR_10_NO_RESOURCE,\n *  ERR_11_NO_VERSION, ERR_20_UNSUP_OS, ERR_21_UNSUP_ARCH, ERR_22_UNSUP_LOCALE,\n *  ERR_23_UNSUP_JRE.\n *\n */\n", "func_signal": "public int findMatch(List list, String name, DownloadRequest dreq, JnlpResource[] result)", "code": "{\n\tif (list == null) return DownloadResponse.ERR_10_NO_RESOURCE;\n\t// Setup return values\n\tVersionID bestVersionId = null;\n\tint error = DownloadResponse.ERR_10_NO_RESOURCE;\n\tVersionString vs = new VersionString(dreq.getVersion());\n\t// Iterate through entries\n\tfor(int i = 0; i < list.size(); i++) {\n\t    JnlpResource respath = (JnlpResource)list.get(i);\n\t    VersionID vid = new VersionID(respath.getVersionId());\t\n\t    int sts = matchEntry(name, vs, dreq, respath, vid);\n\t    if (sts == DownloadResponse.STS_00_OK) {\n\t\tif (result[0] == null || vid.isGreaterThan(bestVersionId)) {\n\t\t    result[0] = respath;\n\t\t    bestVersionId = vid;\n\t\t}\n\t    } else {\n\t\terror = Math.max(error, sts);\n\t    }\n\t}\n\treturn (result[0] != null) ? DownloadResponse.STS_00_OK : error;\n}", "path": "webstart-jnlp-servlet\\src\\main\\java\\jnlp\\sample\\servlet\\ResourceCatalog.java", "repo_name": "amoschov/webstart-maven-plugin", "stars": 1, "license": "mit", "language": "java", "size": 575}
{"docstring": "/** Constructs an invertible map backed by a map constructed by\n\t<code>mf</code> and an inverted map constructed by\n\t<code>mmf</code>. \n */\n", "func_signal": "public GenericInvertibleMap(MapFactory<K,V> mf, MultiMapFactory<V,K> mmf)", "code": "{\n\tthis.map = mf.makeMap();\n\tthis.imap = mmf.makeMultiMap();\n}", "path": "src\\net\\cscott\\jutil\\GenericInvertibleMap.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "/** Copies the mappings from the specified map to this\n\tmap.  These mappings will replace any mappings that this map\n\thad for any of the keys currently in the specified map.  Note\n\tthat <code>putAll(mm)</code> where <code>mm</code> is a\n\t{@link MultiMap} will NOT add all of the mappings in\n\t<code>mm</code>; it will only add all of the Keys in\n\t<code>mm</code>, mapping each Key to one of the Values it\n\tmapped to in <code>mm</code>.  To add all of the mappings from\n\tanother {@link MultiMap}, use\n\t{@link #addAll(MultiMap)}.  */\n", "func_signal": "public void putAll(Map<? extends K,? extends V> t)", "code": "{\n\tfor (Map.Entry<? extends K, ? extends V> e : t.entrySet())\n\t    this.put( e.getKey(), e.getValue() );\n}", "path": "src\\net\\cscott\\jutil\\AbstractMultiMap.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "/** Add all mappings in the given multimap to this multimap. */\n", "func_signal": "public boolean addAll(MultiMap<? extends K,? extends V> mm)", "code": "{\n\tboolean changed = false;\n\tfor (Map.Entry<? extends K, ? extends V> me : mm.entrySet())\n\t    if (add(me.getKey(), me.getValue()))\n\t\tchanged = true;\n\treturn changed;\n}", "path": "src\\net\\cscott\\jutil\\AbstractMultiMap.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "/** Removes all mappings for this key from this map if present. \n\tReturns some previous value associated with specified key, or\n\t<code>null</code> if there was no mapping for key.  \n */\n", "func_signal": "public V remove(Object key)", "code": "{\n\tCollection<V> c = internMap.get(key);\n\tinternMap.remove(key);\n\treturn (c==null || c.size()==0) ? null : c.iterator().next();\n}", "path": "src\\net\\cscott\\jutil\\GenericMultiMap.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "/** Removes a mapping from key to value from this map if present.\n\tNote that if multiple mappings from key to value are permitted\n\tby this map, then only one is guaranteed to be removed.\n\tReturns true if <code>this</code> was modified as a result of\n\tthis operation, else returns false.\n*/\n", "func_signal": "public boolean remove(Object key, Object value)", "code": "{\n\tCollection<V> c = internMap.get(key);\n\tboolean result = (c!=null) ? c.remove(value) : false;\n\tif (c!=null && c.size()==0) internMap.remove(key);\n\treturn result;\n}", "path": "src\\net\\cscott\\jutil\\GenericMultiMap.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "/** Creates a {@link CombineIterator} from a pair of\n\tIterators. \n*/\n", "func_signal": "public CombineIterator(final Iterator<E> i1, final Iterator<E> i2)", "code": "{\n\tthis(new UnmodifiableIterator<Iterator<E>>() {\n\t    int i=0;\n\t    public Iterator<E> next() {\n\t\tswitch(i++) {\n\t\tcase 0: return i1;\n\t\tcase 1: return i2;\n\t\tdefault: throw new NoSuchElementException();\n\t\t}\n\t    }\n\t    public boolean hasNext() {\n\t\treturn i<2;\n\t    }\n\t});\n}", "path": "src\\net\\cscott\\jutil\\CombineIterator.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "/** Creates a {@link CombineIterator} from three\n\tIterators. \n*/\n", "func_signal": "public CombineIterator(final Iterator<E> i1, final Iterator<E> i2,\n\t\t\t   final Iterator<E> i3)", "code": "{\n\tthis(new UnmodifiableIterator<Iterator<E>>() {\n\t    int i=0;\n\t    public Iterator<E> next() {\n\t\tswitch(i++) {\n\t\tcase 0: return i1;\n\t\tcase 1: return i2;\n\t\tcase 2: return i3;\n\t\tdefault: throw new NoSuchElementException();\n\t\t}\n\t    }\n\t    public boolean hasNext() {\n\t\treturn i<3;\n\t    }\n\t});\n}", "path": "src\\net\\cscott\\jutil\\CombineIterator.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "// other methods for efficiency.\n", "func_signal": "public boolean contains(Object o)", "code": "{\n    if (!(o instanceof Map.Entry)) return false;\n    Map.Entry me = (Map.Entry) o;\n    return GenericMultiMap.this.contains(me.getKey(), me.getValue());\n}", "path": "src\\net\\cscott\\jutil\\GenericMultiMap.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "/** Returns the collection of Values associated with\n\t<code>key</code>.  Modifications to the returned\n\t{@link Collection} affect <code>this</code> as well.  If \n\tthere are no Values currently associated with\n\t<code>key</code>, constructs a new, mutable, empty\n\t{@link Collection} and returns it.\n\t({@link MultiMap} specific operation). \n*/\n", "func_signal": "public Collection<V> getValues(final K key)", "code": "{\n\tCollection<V> c = internMap.get(key);\n\tif (c == null) {\n\t    c = cf.makeCollection();\n\t    internMap.put(key, c);\n\t}\n\treturn c;\n}", "path": "src\\net\\cscott\\jutil\\GenericMultiMap.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "/** Unmodifiable iterator. */\n", "func_signal": "public Iterator<T> iterator()", "code": "{\n    final Iterator<Node<T>> it = Node.iterator(root);\n    return new UnmodifiableIterator<T>() {\n        @Override\n        public boolean hasNext() { return it.hasNext(); }\n        @Override\n        public T next() { return it.next().key; }\n    };\n}", "path": "src\\net\\cscott\\jutil\\PersistentSet.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "/** Returns some arbitrary value from the set of values to which\n\tthis map maps the specified key.  Returns <code>null</code> if\n\tthe map contains no mapping for the key; it's also possible\n\tthat the map explicitly maps the key to <code>null</code>.\n\tThe <code>containsKey</code> operation may be used to\n\tdistinquish these two cases.\n\t\n\tNote that if only the <code>put</code> method is used to\n\tmodify <code>this</code>, then <code>get</code> will operate\n\tjust as it would in any other {@link Map}.\n*/\n", "func_signal": "public V get(Object key)", "code": "{\n\tCollection<V> s = internMap.get(key);\n\tif (s == null || s.size() == 0) {\n\t    return null;\n\t} else {\n\t    return s.iterator().next();\n\t}\n}", "path": "src\\net\\cscott\\jutil\\GenericMultiMap.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "/*---------------------------------------------------------------*/\n/** {@link java.util.Collection}s view of the set. */\n", "func_signal": "public Set<T> asSet()", "code": "{\n\treturn new AbstractSet<T>() {\n\t    // constant-time clone.\n\t    public Set<T> clone() { return PersistentSet.this.asSet(); }\n\t    public boolean contains(Object o) {\n\t\t// oops, not safe if we pass a non-T o in here!\n\t\treturn PersistentSet.this.contains((T)o);\n\t    }\n\t    public boolean isEmpty() {\n\t\treturn PersistentSet.this.isEmpty();\n\t    }\n\t    public int size() {\n\t\treturn PersistentSet.this.size();\n\t    }\n\t    public Iterator<T> iterator() {\n            final Iterator<Node<T>> it = Node.iterator(root);\n\t\treturn new Iterator<T>() {\n\t\t    Node<T> last=null;\n\t\t    public boolean hasNext() { return it.hasNext(); }\n\t\t    public T next() {\n\t\t\tlast = it.next();\n\t\t\treturn last.key;\n\t\t    }\n\t\t    public void remove() {\n\t\t\tif (last==null)\n\t\t\t    throw new IllegalStateException();\n\t\t\t// XXX doesn't update the Set view\n\t\t\t// changes behind the iterator's back don't\n\t\t\t// matter, because everything's persistent!\n\t\t\tPersistentSet.this.remove(last.getKey());\n\t\t\tlast=null;\n\t\t    }\n\t\t};\n\t    }\n\t};\n}", "path": "src\\net\\cscott\\jutil\\PersistentSet.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "/** Associates the specified value with the specified key in this\n\tmap.  If the map previously contained any mappings for this\n\tkey, all of the old values are replaced.  Returns some value\n\tthat was previous associated with the specified key, or\n\t<code>null</code> if no values were associated previously. \n*/\n", "func_signal": "public V put(K key, V value)", "code": "{\n\tCollection<V> c = getValues(key);\n\tV prev = c.size()==0 ? null : c.iterator().next();\n\tc.clear();\n\tc.add(value);\n\treturn prev;\n}", "path": "src\\net\\cscott\\jutil\\AbstractMultiMap.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "// note: we'd like to maintain a separate 'size' field, but\n// we can't intercept direct modification to the sets returned\n// by getValues(key), which we'd need to do.  So size() and\n// isEmpty() are slower than they might otherwise be.\n", "func_signal": "public int size()", "code": "{\n\tint count=0;\n\tfor (Collection<V> c : internMap.values() )\n\t    count += c.size();\n\treturn count;\n}", "path": "src\\net\\cscott\\jutil\\GenericMultiMap.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "/** Creates and returns a new {@link PersistentSet} identical to\n *  this one, except it contains <code>element</code>. */\n", "func_signal": "public PersistentSet<T> add(T element)", "code": "{\n\tNode<T> new_root =\n\t    PersistentTreeNode.put(this.root, this.c, element, element,\n\t\t\t\t   allocator);\n\treturn (this.root == new_root) ? this :\n\t    new PersistentSet<T>(new_root, c, allocator);\n}", "path": "src\\net\\cscott\\jutil\\PersistentSet.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "/** Creates a {@link MultiMap} using the specified\n *  {@link MapFactory} to create the map and the specified\n *  {@link CollectionFactory} to create the value collections.\n*/\n", "func_signal": "public GenericMultiMap(MapFactory<K,Collection<V>> mf, CollectionFactory<V> cf)", "code": "{\n\tthis.internMap = mf.makeMap();\n\tthis.cf = cf;\n\tthis.mf = mf;\n}", "path": "src\\net\\cscott\\jutil\\GenericMultiMap.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "// override 'equals' and 'hashCode' to facilitate hash-consing.\n", "func_signal": "public boolean equals(Object o)", "code": "{\n    if (!(o instanceof Node)) return false;\n    Node n = (Node) o;\n    return ((key==null)?n.key==null:key.equals(n.key)) &&\n\tleft == n.left && right == n.right;\n}", "path": "src\\net\\cscott\\jutil\\PersistentSetFactory.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "/** Returns true if <code>a</code> has a mapping to <code>b</code>\n\tin <code>this</code>.\n\t({@link MultiMap} specific operation). \n*/\n", "func_signal": "public boolean contains(Object a, Object b)", "code": "{\n\tCollection<V> c = internMap.get(a);\n\tif (c != null)\n\t    return c.contains(b);\n\telse\n\t    return false;\n}", "path": "src\\net\\cscott\\jutil\\GenericMultiMap.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "/** Make a new {@link PersistentSet} identical to this one,\n *  except that it does not contain <code>element</code>. */\n", "func_signal": "public PersistentSet<T> remove(T element)", "code": "{\n\tNode<T> new_root = \n\t    PersistentTreeNode.remove(this.root, this.c, element, allocator);\n\treturn (this.root == new_root) ? this :\n\t    new PersistentSet<T>(new_root, c, allocator);\n}", "path": "src\\net\\cscott\\jutil\\PersistentSet.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "// these methods aren't in the collections interface\n// (from classpath impl of AbstractSet)\n", "func_signal": "public boolean equals(Object o)", "code": "{\n    if (o == this)\n\treturn true;\n    else if (o instanceof Set && ((Set) o).size() ==\n\t     EntrySet.this.size())\n\treturn EntrySet.this.containsAll((Collection/*<Map.Entry<K,V>>*/) o);\n    else\n\treturn false;\n}", "path": "src\\net\\cscott\\jutil\\GenericMultiMap.java", "repo_name": "cscott/JUtil", "stars": 1, "license": "gpl-2.0", "language": "java", "size": 300}
{"docstring": "/**\n * Stop playback of audio until \"play\" is called again.\n */\n", "func_signal": "public void pause()", "code": "{\n\t/* Stop audio line. */\n\tthis.audioLine.stop();\n\t\n\t/* Acquire a permit to stop IO thread. */\n\tthis.pause.acquireUninterruptibly();\n\t\n\t/* Fire playback stopped event. */\n\tif(this.listener != null){\n\t\tthis.listener.playbackStopped(this.track);\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\player\\http\\HTTPStreamPlayer.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/**\n * Get current volume value.\n * \n * @return A value between 0.0 to 1.0.\n */\n", "func_signal": "public float volume()", "code": "{\n\tfloat gain;\n\tfloat volume;\n\t\n\t/* Get gain control. */\n\tFloatControl control = (FloatControl)this.audioLine.getControl(FloatControl.Type.MASTER_GAIN);\n\t\n\t/* Get gain and constrain it. */\n\tgain = MathUtilities.constrain(\n\t\tcontrol.getValue(), control.getMinimum(), 0.0f\n\t);\n\t\n\t/* Calculate volume from gain. */\n\tif(gain == control.getMinimum()){\n\t\tvolume = 0.0f;\n\t}\n\telse{\n\t\tvolume = (float)Math.pow(10.0f, (gain / 20.0f) * 1.0f);\n\t}\n\t\n\t/* Return volume value. */\n\treturn volume;\n}", "path": "src\\de\\felixbruns\\jotify\\player\\http\\HTTPStreamPlayer.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/* Private constructor. To show a dialog use: showLoginDialog. */\n", "func_signal": "private JotifyLoginDialog()", "code": "{\n\t/* Load icons. */\n\tList<Image> icons = new ArrayList<Image>();\n\t\n\ticons.add(new ImageIcon(JotifyApplication.class.getResource(\"images/icon_16.png\")).getImage());\n\ticons.add(new ImageIcon(JotifyApplication.class.getResource(\"images/icon_32.png\")).getImage());\n\ticons.add(new ImageIcon(JotifyApplication.class.getResource(\"images/icon_64.png\")).getImage());\n\ticons.add(new ImageIcon(JotifyApplication.class.getResource(\"images/icon_128.png\")).getImage());\n\t\n\t/* Create image panel. */\n\tthis.panel = new JotifyLoginPanel();\n\t\n\t/* Add panel to content pane. */\n\tthis.getContentPane().add(this.panel);\n\t\n\t/* Set title, size, etc. */\n\tthis.setTitle(\"Jotify\");\n\tthis.setIconImages(icons);\n\tthis.setBounds(100, 100, 270, 290);\n\tthis.setUndecorated(true);\n\tthis.setResizable(false);\n\tthis.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n\tthis.addWindowListener(new WindowAdapter(){\n\t\tpublic void windowClosing(WindowEvent e){\n\t\t\tSystem.exit(0);\n\t\t}\n\t});\n\t\n\t/* Add mouse listeners for dragging. */\n\tthis.addMouseListener(this);\n\tthis.addMouseMotionListener(this);\n\t\n\t/* Set null layout. */\n\tthis.panel.setLayout(null);\n\t\n\t/* Create fonts. */\n\tFont dialogBold11 = new Font(Font.DIALOG, Font.BOLD, 11);\n\tFont dialogBold12 = new Font(Font.DIALOG, Font.BOLD, 12);\n\t\n\t/* Create and add components. */\n\tthis.closeButton = new JotifyCloseButton();\n\tthis.closeButton.setBounds(255, 5, 10, 10);\n\tthis.closeButton.addActionListener(new ActionListener(){\n\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\tSystem.exit(0);\n\t\t}\n\t});\n\tthis.panel.add(this.closeButton);\n\t\n\tthis.usernameLabel = new JLabel(\"Username\");\n\tthis.usernameLabel.setBounds(20, 120, 120, 20);\n\tthis.usernameLabel.setForeground(new Color(0, 50, 111));\n\tthis.usernameLabel.setFont(dialogBold11);\n\tthis.panel.add(this.usernameLabel);\n\t\n\tthis.usernameField = new JTextField();\n\tthis.usernameField.setBounds(20, 140, 220, 20);\n\tthis.usernameField.setBorder(BorderFactory.createBevelBorder(\n\t\tBevelBorder.LOWERED, new Color(0, 50, 111, 192), new Color(0, 50, 111, 192)\n\t));\n\tthis.usernameField.addKeyListener(new KeyAdapter(){\n\t\tpublic void keyPressed(KeyEvent e){\n\t\t\tif(e.getKeyCode() == KeyEvent.VK_ENTER){\n\t\t\t\tsignInButton.doClick();\n\t\t\t}\n\t\t}\n\t});\n\tthis.panel.add(this.usernameField);\n\t\n\tthis.passwordLabel = new JLabel(\"Password\");\n\tthis.passwordLabel.setBounds(20, 170, 120, 20);\n\tthis.passwordLabel.setForeground(new Color(0, 50, 111));\n\tthis.passwordLabel.setFont(dialogBold11);\n\tthis.panel.add(this.passwordLabel);\n\t\n\tthis.passwordField = new JPasswordField();\n\tthis.passwordField.setBounds(20, 190, 220, 20);\n\tthis.passwordField.setBorder(BorderFactory.createBevelBorder(\n\t\tBevelBorder.LOWERED, new Color(0, 50, 111, 192), new Color(0, 50, 111, 192)\n\t));\n\tthis.passwordField.addKeyListener(new KeyAdapter(){\n\t\tpublic void keyPressed(KeyEvent e){\n\t\t\tif(e.getKeyCode() == KeyEvent.VK_ENTER){\n\t\t\t\tsignInButton.doClick();\n\t\t\t}\n\t\t}\n\t});\n\tthis.panel.add(this.passwordField);\n\t\n\tthis.rememberMeCheckBox = new JotifyCheckBox(\"Remember me\");\n\tthis.rememberMeCheckBox.setBounds(20, 240, 120, 20);\n\tthis.rememberMeCheckBox.setForeground(new Color(0, 50, 111));\n\tthis.rememberMeCheckBox.setFont(dialogBold11);\n\tthis.panel.add(this.rememberMeCheckBox);\n\t\n\tthis.signInButton = new JotifyButton(\"Sign in\");\n\tthis.signInButton.setBounds(160, 240, 80, 20);\n\tthis.signInButton.setFont(dialogBold12);\n\tthis.signInButton.addActionListener(new ActionListener(){\n\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\tif(!usernameField.getText().isEmpty() && passwordField.getPassword().length != 0){\n\t\t\t\tsemaphore.release();\n\t\t\t}\n\t\t}\n\t});\n\tthis.panel.add(this.signInButton);\n\t\n\tthis.loadLabel = new JLabel();\n\tthis.loadLabel.setBounds(120, 280, 32, 32);\n\tthis.loadLabel.setVisible(false);\n\tthis.loadLabel.setIcon(new ImageIcon(JotifyApplication.class.getResource(\"images/load.gif\")));\n\tthis.panel.add(this.loadLabel);\n\t\n\tthis.messageLabel = new JLabel();\n\tthis.messageLabel.setBounds(20, 280, 230, 40);\n\tthis.messageLabel.setVisible(false);\n\tthis.messageLabel.setFont(dialogBold11);\n\tthis.messageLabel.setBorder(new EmptyBorder(5, 5, 5, 5));\n\tthis.panel.add(this.messageLabel);\n\t\n\t/* Create semaphore and aquire a permit. */\n\tthis.semaphore = new Semaphore(1);\n\tthis.semaphore.acquireUninterruptibly();\n}", "path": "src\\de\\felixbruns\\jotify\\gui\\swing\\JotifyLoginDialog.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/* Open an input stream and start decoding it,\n * set up audio stuff when AudioInputStream\n * was sucessfully created.\n */\n", "func_signal": "private boolean open(InputStream stream)", "code": "{\n\t/* Audio streams and formats. */\n\tAudioInputStream sourceStream;\n\tAudioFormat      sourceFormat;\n\tAudioFormat      targetFormat;\n\t\n\t/* Spotify specific ogg header. */\n\tbyte[] header = new byte[167];\n\t\n\ttry{\n\t\t/* Read and decode header. */\n\t\tstream.read(header);\n\t\t\n\t\tthis.spotifyOggHeader = new SpotifyOggHeader(header);\n\t\t\n\t\t/* Get audio source stream */\n\t\tsourceStream = AudioSystem.getAudioInputStream(stream);\n\t\t\n\t\t/* Get source format and set target format. */\n\t\tsourceFormat = sourceStream.getFormat();\n\t\ttargetFormat = new AudioFormat(\n\t\t\tsourceFormat.getSampleRate(), 16,\n\t\t\tsourceFormat.getChannels(), true, false\n\t\t);\n\t\t\n\t\t/* Get target audio stream */\n\t\tthis.audioStream = AudioSystem.getAudioInputStream(targetFormat, sourceStream);\n\t\t\n\t\t/* Get line info for target format. */\n\t\tDataLine.Info info = new DataLine.Info(SourceDataLine.class, targetFormat);\n\t\t\n\t\t/* Get line for obtained line info. */\n\t\tthis.audioLine = (SourceDataLine)AudioSystem.getLine(info);\n\t\t\n\t\t/* Finally open line for playback. */\n\t\tthis.audioLine.open();\n\t}\n\tcatch(UnsupportedAudioFileException e){\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n\tcatch(IOException e){\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n\tcatch(LineUnavailableException e){\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n\t\n\t/* Set player status. */\n\tthis.active = true;\n\t\n\t/* Start thread which writes data to the line. */\n\tnew Thread(this, \"ChannelPlayer-Thread\").start();\n\t\n\t/* Success. */\n\treturn true;\n}", "path": "src\\de\\felixbruns\\jotify\\player\\http\\HTTPStreamPlayer.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/**\n * Update the checksum with a {@link Playlist}.\n * \n * @param playlist A {@link Playlist} object.\n */\n", "func_signal": "public void update(Playlist playlist)", "code": "{\n\tthis.update(Hex.toBytes(playlist.getId()));\n\tthis.update((byte)0x02);\n}", "path": "src\\de\\felixbruns\\jotify\\util\\SpotifyChecksum.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/**\n * Close audio line and stream which will stop playing. Playing can't\n * be resumed after that, use the \"stop\" method for that functionality.\n */\n", "func_signal": "public void stop()", "code": "{\n\tthis.active = false;\n\t\n\ttry{\n\t\tthis.audioStream.close();\n\t\tthis.audioLine.close();\n\t}\n\tcatch(Exception e){\n\t\t/* Don't care. Catch IOException and NullPointerException. */\n\t}\n\t\n\t/* Fire playback stopped event. */\n\tif(this.listener != null){\n\t\tthis.listener.playbackStopped(this.track);\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\player\\http\\HTTPStreamPlayer.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/**\n * Start playback or continue playing if \"stop\" was called before.\n */\n", "func_signal": "public void play()", "code": "{\n\t/* Start audio line again. */\n\tthis.audioLine.start();\n\t\n\t/* Release permit to resume IO thread. */\n\tthis.pause.release();\n\t\n\t/* Fire playback resumed event. */\n\tif(this.listener != null){\n\t\tthis.listener.playbackResumed(this.track);\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\player\\http\\HTTPStreamPlayer.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/**\n * Convert a base-62 encoded URI into a hexadecimal URI.\n * \n * @param uri The base-62 encoded URI.\n * \n * @return A hexadecimal URI.\n */\n", "func_signal": "public static String toHex(String uri)", "code": "{\n\tStringBuffer hex = new StringBuffer(BaseConvert.convert(uri, 62, 16));\n\t\n\t/* Prepend zeroes until hexadecimal string length is 32. */\n\twhile(hex.length() < 32){\n\t\thex.insert(0, '0');\n\t}\n\t\n\treturn hex.toString();\n}", "path": "src\\de\\felixbruns\\jotify\\util\\SpotifyURI.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/**\n * Update the checksum with a {@link Track}.\n * \n * @param track A {@link Track} object.\n */\n", "func_signal": "public void update(Track track)", "code": "{\n\tthis.update(Hex.toBytes(track.getId()));\n\tthis.update((byte)0x01);\n}", "path": "src\\de\\felixbruns\\jotify\\util\\SpotifyChecksum.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/* Append an element to the list. */\n", "func_signal": "public void appendElement(Object element)", "code": "{\n\tDefaultListModel model = (DefaultListModel)this.getModel();\n\t\n\t/* Check if list already contains this object. */\n\tif(model.contains(element)){\n\t\tmodel.removeElement(element);\n\t}\n\t\n\t/* Add element at end index. */\n\tmodel.add(model.getSize(), element);\n}", "path": "src\\de\\felixbruns\\jotify\\gui\\swing\\components\\JotifyList.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/**\n * Update the checksum with an {@link Artist}.\n * \n * @param artist An {@link Artist} object.\n */\n", "func_signal": "public void update(Artist artist)", "code": "{\n\tthis.update(Hex.toBytes(artist.getId()));\n\tthis.update((byte)0x02); // TODO: is it really 0x02?\n}", "path": "src\\de\\felixbruns\\jotify\\util\\SpotifyChecksum.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/* Retrieve login credentials from dialog, blocks until available. */\n", "func_signal": "public JotifyLoginCredentials getLoginCredentials()", "code": "{\n\t/* Wait for user to click \"Sign in\". */\n\tthis.semaphore.acquireUninterruptibly();\n\t\n\treturn new JotifyLoginCredentials(\n\t\tthis.usernameField.getText(),\n\t\tthis.passwordField.getPassword(),\n\t\tthis.rememberMeCheckBox.isSelected()\n\t);\n}", "path": "src\\de\\felixbruns\\jotify\\gui\\swing\\JotifyLoginDialog.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/* Update an element to the list. */\n", "func_signal": "public void updateElement(Object element)", "code": "{\n\tDefaultListModel model = (DefaultListModel)this.getModel();\n\t\n\tif(model.contains(element)){\n\t\tint index = model.indexOf(element);\n\t\t\n\t\tmodel.removeElement(element);\n\t\t\n\t\tmodel.add(index, element);\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\gui\\swing\\components\\JotifyList.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/**\n * Update the checksum with an {@link Album}.\n * \n * @param album An {@link Album} object.\n */\n", "func_signal": "public void update(Album album)", "code": "{\n\tthis.update(Hex.toBytes(album.getId()));\n\tthis.update((byte)0x02); // TODO: is it really 0x02?\n}", "path": "src\\de\\felixbruns\\jotify\\util\\SpotifyChecksum.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/* Remove an element from the list. */\n", "func_signal": "public void removeElement(Object element)", "code": "{\n\tDefaultListModel model = (DefaultListModel)this.getModel();\n\t\n\tif(model.contains(element)){\n\t\tmodel.removeElement(element);\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\gui\\swing\\components\\JotifyList.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/**\n * Fill the supplied buffer with random bytes.\n * \n * @param buffer The buffer to be filled with random bytes.\n */\n", "func_signal": "public static void randomBytes(byte[] buffer)", "code": "{\n\t/* Check if secure random is instantiated. */\n\tif(secureRandom == null){\n\t\tthrow new RuntimeException(\"SecureRandom not instantiated!\");\n\t}\n\t\n\t/* Fill buffer with random bytes. */\n\tsecureRandom.nextBytes(buffer);\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\RandomBytes.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/**\n * Create a sequence of random bytes with the supplied length.\n * \n * @param length The length of the random byte sequence.\n * \n * @return A buffer containing the random bytes.\n */\n", "func_signal": "public static byte[] randomBytes(int length)", "code": "{\n\t/* Create a buffer of the specified length. */\n\tbyte[] buffer = new byte[length];\n\t\n\t/* Check if secure random is instantiated. */\n\tif(secureRandom == null){\n\t\tthrow new RuntimeException(\"SecureRandom not instantiated!\");\n\t}\n\t\n\t/* Fill buffer with random bytes. */\n\tsecureRandom.nextBytes(buffer);\n\t\n\treturn buffer;\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\RandomBytes.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/* Prepend an element to the list. */\n", "func_signal": "public void prependElement(Object element)", "code": "{\n\tDefaultListModel model = (DefaultListModel)this.getModel();\n\t\n\t/* Check if list already contains this object. */\n\tif(model.contains(element)){\n\t\tmodel.removeElement(element);\n\t}\n\t\n\t/* Add element at index 0. */\n\tmodel.add(0, element);\n}", "path": "src\\de\\felixbruns\\jotify\\gui\\swing\\components\\JotifyList.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/**\n * Return the total length of the audio stream in seconds (if available).\n * This information is loaded from the Spotify specific ogg header.\n * \n * @return Length of audio stream in seconds or -1 if not available.\n */\n", "func_signal": "public int length()", "code": "{\n\t/* TODO: Remove hard-coded sample rate!? */\n\tif(this.spotifyOggHeader != null){\n\t\treturn this.spotifyOggHeader.getSeconds(44100);\n\t}\n\t\n\treturn -1;\n}", "path": "src\\de\\felixbruns\\jotify\\player\\http\\HTTPStreamPlayer.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/**\n * Convert a hexadecimal URI into a base-62 encoded URI.\n * \n * @param hex The hexadecimal URI.\n * \n * @return A base-62 encoded URI.\n */\n", "func_signal": "public static String toURI(String hex)", "code": "{\n\tStringBuffer uri = new StringBuffer(BaseConvert.convert(hex, 16, 62));\n\t\n\t/* Prepend zeroes until base-62 string length is 22. */\n\twhile(uri.length() < 22){\n\t\turi.insert(0, '0');\n\t}\n\t\n\treturn uri.toString();\n}", "path": "src\\de\\felixbruns\\jotify\\util\\SpotifyURI.java", "repo_name": "kultcrowd/jotify", "stars": 1, "license": "other", "language": "java", "size": 510}
{"docstring": "/**\n * Toggles contiuos updating. If not updating continuosly, creates a\n * Timer object to handel the updating in a separate process and\n * starts updating. If updating continuosly, calls\n * the stopContinuosUpdate.\n */\n", "func_signal": "public void toggleContinuosUpdate()", "code": "{\n    if (isContinuoslyUpdating) {\n        stopContinuosUpdate();\n    } else {\n        long period = 1000 / updatesPerSecond;\n        this.task = new Update();\n        stateTimer.schedule(this.task, new Date(), period);\n        isContinuoslyUpdating = true;\n    }\n}", "path": "src\\wireworldevolver\\StateManager.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Does getBoard return return a integer matrix that equals to the\n * contents of the inputfile?\n */\n", "func_signal": "@Test public void testGetBoard()", "code": "{\n    int[][] emptyExpected = {{0}};\n    filem.setFilePath(\"emptyFile\");\n    try {\n        assertEquals(filem.getBoard().length, 1);\n        assertEquals(filem.getBoard(), emptyExpected);\n    } catch(Exception e) {\n        fail(\"Could not open file!\");\n    }\n\n    int[][] singleOne = {{1}};\n    filem.setFilePath(\"singleOneFile\");\n    try {\n        assertEquals(filem.getBoard().length, 1);\n        assertEquals(filem.getBoard(), singleOne);\n    } catch(Exception e) {\n        fail(\"Could not open file!\");\n    }\n\n    int[][] rowOfZeros = new int[1][70];\n    for (int i = 0; i < 70; i++) {\n        rowOfZeros[0][i] = 0;\n    }\n    filem.setFilePath(\"lineOverflow\");\n    tmpFilem.setFilePath(\"fullLine\");\n    try {\n        assertEquals(filem.getBoard().length, 1);\n        assertEquals(filem.getBoard(), rowOfZeros);\n        assertEquals(filem.getBoard(), tmpFilem.getBoard());\n    } catch(Exception e) {\n        fail(\"Could not open file!\");\n    }\n\n    filem.setFilePath(\"sndLinePadding\");\n    tmpFilem.setFilePath(\"twoFullLines\");\n    try {\n        assertEquals(filem.getBoard(), tmpFilem.getBoard());\n    } catch(Exception e) {\n        fail(\"Could not open file!\");\n    }\n}", "path": "src\\wireworldevolver\\test\\BoardFileManagerTest.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Makes and returns a integer matrix representing the file. Ignores\n * illegal characters and makes every line of the matrix the length\n * of the first line, padding shorter lines with zeroes. No line\n * will be longer than 70 characters.\n * @return Integer matrix representing the file.\n * @throws FileNotFoundException\n * @throws IOException\n */\n", "func_signal": "public int[][] getBoard() throws IOException, FileNotFoundException", "code": "{\n    Vector<Vector<Integer>> chars = new Vector<Vector<Integer>>();\n    int[][] board;\n    int nOfRows;\n    int nOfCols;\n    Vector<Integer> line;\n\n    openFile();\n    while ((line = readLine()) != null) {\n        chars.add(line);\n    }\n    closeFile();\n\n    if (chars.size() == 0) {\n        board = new int[1][1];\n        board[0][0] = 0;\n        return board;\n    }\n    nOfRows = chars.size();\n    nOfCols = chars.get(0).size();\n    if (nOfCols > 70) {\n        nOfCols = 70;\n    }\n    board = new int[nOfRows][nOfCols];\n    for (int i = 0; i < nOfRows; i++ ) {\n        for (int j = 0; j < nOfCols; j++) {\n            try {\n                board[i][j] = chars.get(i).get(j).intValue();\n            } catch (ArrayIndexOutOfBoundsException e) {\n                board[i][j] = 0;\n            }\n        }\n    }\n    return board;\n}", "path": "src\\wireworldevolver\\BoardFileManager.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Opens the file this BoardFileManager represents.\n * @throws FileNotFoundException\n */\n", "func_signal": "private void openFile() throws FileNotFoundException", "code": "{\n    fileStream = new FileInputStream(filePath);\n    in = new InputStreamReader(fileStream);\n    reader = new BufferedReader(in);\n}", "path": "src\\wireworldevolver\\BoardFileManager.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Notifies registered observers about a change in state.\n */\n", "func_signal": "public void stateChanged()", "code": "{\n    this.setChanged();\n    this.notifyObservers();\n}", "path": "src\\wireworldevolver\\Cell.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Creates a cell, and sets the state to one given.\n * @param state The state of the newly created cell.\n */\n", "func_signal": "public Cell(int state)", "code": "{\n    super();\n    setState(state);\n    setHood(null);\n    willEvolve = true;\n}", "path": "src\\wireworldevolver\\Cell.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Creates a StateManager managing the CircuitBoard given. Continuos\n * updating speed is set to 15 updates per second.\n * @param board The CircuitBoard that is to be managed.\n */\n", "func_signal": "public StateManager(CircuitBoard board)", "code": "{\n    this.board = board;\n    this.updatesPerSecond = 15;\n    this.isContinuoslyUpdating = false;\n    this.stateTimer = new Timer(true);\n}", "path": "src\\wireworldevolver\\StateManager.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Does getState return the state of the Cell?\n */\n", "func_signal": "@Test public void testGetState()", "code": "{\n    assertEquals(empty.getState(), 0);\n    assertEquals(head.getState(), 1);\n    assertEquals(tail.getState(), 2);\n    assertEquals(cond.getState(), 3);\n    assertTrue(empty.getState() == shouldBeEmpty.getState());\n}", "path": "src\\wireworldevolver\\test\\CellTest.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Does Cell evolve according to Wireworld rules?\n */\n", "func_signal": "@Test public void testEvolve()", "code": "{\n    assertTrue(empty.equals(tmpEmpty.evolve()));\n    assertTrue(tail.equals(tmpHead.evolve()));\n    assertTrue(cond.equals(tmpTail.evolve()));\n    tmpCond.checkHood();\n    assertFalse(head.equals(tmpCond.evolve()));\n    tmpCond = new Cell(3);\n    assertTrue(head.equals(tmpCond.evolve()));\n}", "path": "src\\wireworldevolver\\test\\CellTest.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Two Cells should be equal when they have the same state.\n */\n", "func_signal": "@Test public void testEquals()", "code": "{\n    assertTrue(empty.equals(new Cell(0)));\n    assertTrue(empty.equals(new Cell(4)));\n    assertTrue(empty.equals(shouldBeEmpty));\n    assertTrue(head.equals(new Cell(1)));\n    assertTrue(tail.equals(new Cell(2)));\n    assertTrue(cond.equals(new Cell(3)));\n}", "path": "src\\wireworldevolver\\test\\CellTest.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Does setState set the state of the Cell to one give, or zero if\n * value given was not in range 0-3?\n */\n", "func_signal": "@Test public void testSetState()", "code": "{\n    tmpTail.setState(0);\n    tmpHead.setState(4);\n    assertTrue(empty.equals(tmpTail));\n    assertTrue(empty.equals(tmpHead));\n}", "path": "src\\wireworldevolver\\test\\CellTest.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Does checkHood make sure that conductor Cells evolve only if they\n * have the correct neighbourhood?\n */\n", "func_signal": "@Test public void testCheckHood()", "code": "{\n    Cell[] evolveHood = new Cell[8];\n    evolveHood[0] = head;\n    evolveHood[1] = head;\n    Cell[] nonEvolveHood = new Cell[8];\n\n    cond.setHood(evolveHood);\n    assertTrue(cond.checkHood());\n    cond.setHood(nonEvolveHood);\n    assertFalse(cond.checkHood());\n}", "path": "src\\wireworldevolver\\test\\CellTest.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Stops continuos update. If not continuosly updating, does\n * nothing.\n */\n", "func_signal": "public void stopContinuosUpdate()", "code": "{\n    if (isContinuoslyUpdating) {\n        this.task.cancel();\n        isContinuoslyUpdating = false;\n    }\n }", "path": "src\\wireworldevolver\\StateManager.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Set the continuos updating speed to one given.\n * @param speed New updating speed give as times per second.\n */\n", "func_signal": "public void setSpeed(int speed)", "code": "{\n    updatesPerSecond = (long)(speed);\n    if (isContinuoslyUpdating) {\n        this.task.cancel();\n        isContinuoslyUpdating = false;\n        toggleContinuosUpdate();\n    }\n}", "path": "src\\wireworldevolver\\StateManager.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Closes the file this BoardFileManager represents.\n * @throws IOException\n */\n", "func_signal": "private void closeFile() throws IOException", "code": "{\n    fileStream.close();\n    in.close();\n    reader.close();\n}", "path": "src\\wireworldevolver\\BoardFileManager.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Sets the state of the Cell.\n * @param newstate Integer in range 0-3.\n */\n", "func_signal": "public void setState(int newstate)", "code": "{\n    if (newstate == 1 || newstate == 2 || newstate == 3) {\n        this.state = newstate;\n    } else {\n        this.state = 0;\n    }\n}", "path": "src\\wireworldevolver\\Cell.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Creates UIModel.\n */\n", "func_signal": "public UIModel()", "code": "{\n    fileManager = new BoardFileManager();\n    board = new CircuitBoard(fileManager);\n    stateManager = new StateManager(board);\n}", "path": "src\\wireworldevolver\\UIModel.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Reads one line from the file. Parses illegal characters to zeros.\n * @return Legal characters in a Integer Vector, not including end\n *         of line characters.\n */\n", "func_signal": "private Vector<Integer> readLine() throws IOException", "code": "{\n    Vector<Integer> chars = new Vector<Integer>();\n    String line;\n    line = reader.readLine();\n    if (line == null) {\n        return null;\n    }\n    for (int i = 0; i < line.length(); i++) {\n        if (line.charAt(i) == '1') {\n            chars.add(Integer.valueOf(1));\n        } else if (line.charAt(i) == '2') {\n            chars.add(Integer.valueOf(2));\n        } else if (line.charAt(i) == '3') {\n            chars.add(Integer.valueOf(3));\n        } else {\n            chars.add(Integer.valueOf(0));\n        }\n    }\n    return chars;\n }", "path": "src\\wireworldevolver\\BoardFileManager.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Creates a Controller.\n * @param view GUI View as in MVC\n * @param model UI Model as in MVC\n */\n", "func_signal": "public GUIController(GUIView view, UIModel model)", "code": "{\n    this.view = view;\n    this.model = model;\n    view.addMenuExitListener(new MenuExitListener());\n    view.addLoadButtonListener(new LoadButtonListener());\n    view.addBrowseButtonListener(new BrowseButtonListener());\n    view.addUpdateOnceButtonListener(new UpdateOnceButtonListener());\n    view.addUpdateToggleButtonListener(new UpdateToggleButtonListener());\n    view.addSpeedSliderListener(new SpeedSliderListener());\n}", "path": "src\\wireworldevolver\\GUIController.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Updates the board the new generation, evolving all the cells\n * once.\n */\n", "func_signal": "public void updateOnce()", "code": "{\n    if (!isContinuoslyUpdating) {\n        stateTimer.schedule(new Update(), new Date());\n    }\n}", "path": "src\\wireworldevolver\\StateManager.java", "repo_name": "rahcola/WireworldEvolver", "stars": 1, "license": "None", "language": "java", "size": 760}
{"docstring": "/**\n * Legt n aus rucksack der Klasse Inventar in eine Hand\n * \n * @param n\n * @return boolean\n */\n", "func_signal": "public boolean ausDemRucksackAnlegen(String n)", "code": "{\n\tif(rucksack.istImInventar(n)) {\n\t\tGegenstand geg = null;\n\t\tgeg = rucksack.auspacken(n);\n\t\tanlegen(geg);\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "path": "adventure\\Person.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Prueft ob geg anlegbar ist. Wenn rucksack.gewicht + geg.gewicht kleiner oder gleich maximalgewicht ist, ist geg anlegbar.\n * \n * @param geg\n * @return boolean\n */\n", "func_signal": "public boolean anlegbar(Gegenstand geg)", "code": "{\n\tboolean ergebnis = false;\n        if(rucksack.getMaximalgewicht() >= (rucksack.gibGewicht() + geg.gibGewicht())) {\n        \tergebnis = true;\n        }\n        else {\n            ergebnis = false;\n        }\n        return ergebnis;\n}", "path": "adventure\\Person.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Legt den Gegenstand geg in rucksack der Klasse Inventar zurueck.\n * \n * @param geg\n * @return boolean\n */\n", "func_signal": "public boolean einpacken(Gegenstand geg)", "code": "{\n\tif(rucksack.einpacken(geg)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "path": "adventure\\Person.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Zeichnet ein Feld. Die Farbe variiert nach typ.\n * Hat das Feld ein Gegenstand zeichnet es diesen anschlieend ein.\n * \n * @param g\n */\n", "func_signal": "public void anzeigen(Graphics g)", "code": "{\n\tif(typ == 0) {\n\t\tg.setColor(new Color(255,255,191));\n\t} else if(typ == 1) {\n\t\t\tg.setColor(new Color(91,91,91));\n\t} else {\n\t\tg.setColor(new Color(255,255,255));\n\t}\n\t\n\tg.fillRect(breite*xPos, breite*yPos, breite, breite);\n\t\n\tg.setColor(new Color(0,0,0));\n\tg.drawRect(breite*xPos, breite*yPos, breite, breite);\n\t\n\tif(hatGegenstand()) {\n\t\tgeg.anzeigen(g, xPos, yPos, breite);\n\t}\n}", "path": "adventure\\Feld.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Legt geg der Klasse Gegenstand in die rechte oder linke Hand.\n * Die linke Hand kann auch ein Schild aufnehmen.\n * \n * @param geg\n * @return boolean\n */\n", "func_signal": "public boolean anlegen(Gegenstand geg)", "code": "{\n        if(anlegbar(geg)) {\n        \tif(handR == null && geg.istWaffe()) {\n        \t\thandR = geg;\n        \t\tangriffswert = angriffswert + geg.gibAngriffswert();\n        \t\t\n        \t\t// Kontroll-Ausgabe\n        \t\tSystem.out.println(\"Gegenstand \"+geg.toString()+\" wurde angelegt.\");\n        \t\t\n        \t\treturn true;\n        \t}\n        \telse if(handL == null && (geg.istWaffe() || geg.istSchild())) {\n        \t\thandL = geg;\n        \t\tangriffswert = angriffswert + geg.gibAngriffswert();\n        \t\tverteidigungswert = verteidigungswert + geg.gibVerteidigungswert();\n\n        \t\t// Kontroll-Ausgabe\n        \t\tSystem.out.println(\"Gegenstand \"+geg.toString()+\" wurde angelegt.\");\n        \t\t\n        \t\treturn true;\n        \t} else {\n        \t\treturn false;\n        \t}\n        } else {\n        \t// Kontroll-Ausgabe\n            System.out.println(\"Gegenstand \"+geg.toString()+\" wurde nicht angelegt.\");\n            \n        \treturn false;\n        }\n}", "path": "adventure\\Person.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Gibt den Gegenstand der rechten Hand aus.\n * \n * @return String\n */\n", "func_signal": "public String getHandR()", "code": "{\n\tif(handR != null) {\n\t\treturn handR.gibName();\n\t} else {\n\t\treturn \"none\";\n\t}\n}", "path": "adventure\\Person.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Verstaut den Gegenstand aus der Hand hand in den rucksack der Klasse Inventar zurueck.\n * \n * @param hand\n */\n", "func_signal": "public void verstauen(int hand)", "code": "{\n\tGegenstand geg = null;\n\tif(hand == 1) {\n\t\tgeg = handR;\n\t\thandR = null;\n\t}\n\telse if(hand == 2) {\n\t\tgeg = handL;\n\t\thandL = null;\n\t}\n\trucksack.einpacken(geg);\n}", "path": "adventure\\Person.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Konstruktor der Klasse Gegenstand \n * @param name\n * @param angriffswert\n * @param verteidigungswert\n * @param goldwert\n * @param gewicht\n * @param typ\n */\n", "func_signal": "public Gegenstand(String name, double angriffswert, double verteidigungswert, double goldwert, double gewicht, int typ)", "code": "{\n    this.name = name;\n    this.angriffswert = angriffswert;\n    this.verteidigungswert = verteidigungswert;\n    this.goldwert = goldwert;\n    this.zustand = 100;\n    this.gewicht = gewicht;\n    this.typ = typ;\n}", "path": "adventure\\Gegenstand.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Zeichnet eine Person\n * \n * @param g\n */\n", "func_signal": "public void anzeigen(Graphics g, int b)", "code": "{\n\t\n\tdouble rot = (100-gibLife())*2.55;\n\tdouble gruen = gibLife()*2.55;\n\t\n\tg.setColor(new Color((int)rot,(int)gruen,0));\n\t\n    \tg.fillOval(b*xPos+2, b*yPos+2, b-3, b-3);\n}", "path": "adventure\\Person.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Zeichnet ein Zeichen fr den Gegenstand auf das Feld\n * @param g\n * @param x\n * @param y\n * @param b\n */\n", "func_signal": "public void anzeigen(Graphics g, int x, int y, int b)", "code": "{\n\tg.setColor(new Color(0,0,255));\n\tg.fillRect(b*x+2, b*y+2, b-3, b-3);\n}", "path": "adventure\\Gegenstand.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Legt den Gegenstand in hand ab und liefert diesen als Rueckgabewert.\n * \n * @param hand\n * @return Gegenstand\n */\n", "func_signal": "public Gegenstand ablegen(int hand)", "code": "{\n\tGegenstand geg = null;\n\tif(hand == 1) {\n\t\tgeg = handR;\n\t\thandR = null;\n            angriffswert = angriffswert - geg.gibAngriffswert();\n\t}\n\telse if(hand == 2) {\n\t\tgeg = handL;\n\t\thandL = null;\n            angriffswert = angriffswert - geg.gibAngriffswert();\n            verteidigungswert = verteidigungswert - geg.gibVerteidigungswert();\n\t}\n\treturn geg;\n}", "path": "adventure\\Person.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Konstruktor der Klasse Person\n * @param n\n * @param k\n */\n", "func_signal": "public Person(String n, int k)", "code": "{\n\tname = n;\n\tkraft = k;\n\trucksack = new Inventar(k);\n\thandL = null;\n\thandR = null;\n\tlife = 100;\n\txPos = 1;\n\tyPos = 1;\n}", "path": "adventure\\Person.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Gibt true zurueck wenn Feld ein Held hat.\n * \n * @return boolean\n */\n", "func_signal": "public boolean istFrei()", "code": "{\n\tif(getTyp() != 1) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "path": "adventure\\Feld.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Gibt ueber einen Boolean zurck, ob es sich um einen Schild handelt\n * @return boolean\n */\n", "func_signal": "public boolean istSchild()", "code": "{\n\tif(typ == 2) {\n\t\treturn true;\n\t}\n\telse  {\n\t\treturn false;\n\t}\n}", "path": "adventure\\Gegenstand.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Diese Methode beschaedigt den Gegenstand\n * @param schaden\n */\n", "func_signal": "public void beschaedigen(int schaden)", "code": "{\n    this.angriffswert = this.angriffswert - (this.angriffswert / 100) * schaden;\n    this.verteidigungswert = this.verteidigungswert - (this.verteidigungswert / 100) * schaden;\n    this.goldwert = this.goldwert - (this.goldwert / 100) * schaden;\n    this.zustand = this.zustand - (this.zustand / 100) * schaden;\n    System.out.println(\"Der Angriffswert wurde beschaedigt, er betr\u00e4gt nun \"+this.angriffswert);\n    System.out.println(\"Der Verteidigungswert wurde beschaedigt, er betr\u00e4gt nun \"+this.verteidigungswert);\n    System.out.println(\"Der Goldwert ist gesunken, er betr\u00e4gt nun \"+this.goldwert);\n    System.out.println(\"Der Zustand ist nun auf \"+this.zustand+\"%\");\n}", "path": "adventure\\Gegenstand.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Entfernt n aus rucksack der Klasse Inventar und gibt diesen zurueck.\n * \n * @param n\n * @return Gegenstand\n */\n", "func_signal": "public Gegenstand rucksackEntfernen(String n)", "code": "{\n\tGegenstand geg = null;\n        geg = rucksack.auspacken(n);\n        System.out.println(\"Gegenstand \"+geg.toString()+\" wurde ausgepackt.\");\n\treturn geg;\n}", "path": "adventure\\Person.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Verringert das Life der Person um den uebergebenen Wert \n * Dieser Wert ist als prozentzahl zu verstehen\n * @param l\n * @return double\n */\n", "func_signal": "public double verringerLifeUmProzent(int l)", "code": "{\n\tlife = life - ((life/100) * l);\n\tSystem.out.println(life);\n\treturn life;\n}", "path": "adventure\\Person.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Setzt die Position fuer xPos und yPos\n * \n * @param x int\n * @param y int\n */\n", "func_signal": "public void setztePosition(int x, int y)", "code": "{\n\txPos = x;\n\tyPos = y;\n}", "path": "adventure\\Person.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Legt g der Klasse Gegenstand auf dem Feld ab\n * \n * @param g\n * @return boolean\n */\n", "func_signal": "public boolean aufDenBodenLegen(Gegenstand g)", "code": "{\n\tif(g != null) {\n\t\tgeg = g; \n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "path": "adventure\\Feld.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Liefert eine Instanz der Klasse Gegenstand zurueck und loescht anschliessend\n * den Gegenstand von dem Feld.\n * \n * @return Gegenstand\n */\n", "func_signal": "public Gegenstand vomBodenAufheben()", "code": "{\n\tif(hatGegenstand()) {\n\t\tGegenstand temp = geg;\n\t\tgeg = null;\n\t\treturn temp;\n\t} else {\n\t\treturn null;\n\t}\n}", "path": "adventure\\Feld.java", "repo_name": "Weneg/Adventure", "stars": 0, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Parses the file or string containing the specification of the data.\n * \n * @param isFile\n *            Is the second parameter a file name?\n * @param str\n *            The name of a file containing a specification or a string\n *            containing a specification.\n */\n", "func_signal": "private void readSpecFile(boolean isFile, String specFile) throws SpecFileException, ClassNotFoundException, IOException", "code": "{\n  Configuration conf = new Configuration();\n  conf.addValid(\"exampleTerminator\");\n  conf.addValid(\"attributeTerminator\");\n  conf.addValid(\"elementSeparator\");\n  conf.addValid(\"maxBadAtt\");\n  conf.addValid(\"maxMisAtt\");\n  conf.addValid(\"maxBadExa\");\n\n  BufferedReader reader = null;\n  if (isFile) {\n    reader = new BufferedReader(FileLoader.createFileReader(specFile));\n    if (reader == null) {\n      throw new FileNotFoundException(specFile);\n    }\n  }\n  else {\n    reader = new BufferedReader(new StringReader(specFile));\n  }\n\n  String line = null;\n  line = reader.readLine();\n  while (line != null) {\n    if (!parsePreambleLine(line, conf)) {\n      break;\n    }\n    else {\n      line = reader.readLine();\n    }\n  }\n\n  // Now done with reading the preamble, we must get the options\n  m_exampleTerminator = conf.getString(\"exampleTerminator\", \".\");\n  m_attributeTerminator = conf.getString(\"attributeTerminator\", \",\");\n  m_elementSeparator = conf.getString(\"elementSeparator\", null);\n  maxBadAtt = conf.getInt(\"maxBadAtt\", 0);\n  maxMisAtt = conf.getInt(\"maxMisAtt\", -1);\n  maxBadExa = conf.getInt(\"maxBadExa\", 20);\n\n  // Need to check for errors in config file.\n  if (Monitor.logLevel > 3) {\n    Monitor.log(\"\" + conf);\n    Monitor.log(conf.unused());\n  }\n\n  int lineCount = 0;\n  while (line != null) {\n    parseBodyLine(line, lineCount);\n    line = reader.readLine();\n    lineCount++;\n  }\n\n  noAttr = ed.getNoOfAttributes();\n  if (noAttr == 0) {\n    throw new SpecFileException(\"Examples have no attributes.\");\n  }\n  if (ed.getLabelDescription() == null) {\n    throw new SpecFileException(\"No label description given.\");\n  }\n}", "path": "third\\jboost-2.0\\src\\jboost\\tokenizer\\jboost_DataStream.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/** generate logs for current boosting iteration */\n", "func_signal": "public void logIteration(int iter, Predictor combined, Predictor base)", "code": "{\n  double trainError = trainSet.calcError(iter, combined, base);\n  double testError = testSet.calcError(iter, combined, base);\n  double theoryBound = m_booster.getTheoryBound();\n  NumberFormat f = new DecimalFormat(\"0.0000\");\n\n  if (iter > 0) infoStream.print(\"\\n\");\n  // RobustBoost: binary case\n  if (m_booster instanceof RobustBoost) {\n    double currentTime = ((RobustBoost) m_booster).getCurrentTime();\n    infoStream.print(iter + \"\\t\" + f.format(theoryBound) + \"\\t\" + f.format(trainError) + \"\\t\" + f.format(testError) + \"\\t\" + f.format(currentTime));\n  }\n  // otherwise\n  else {\n    infoStream.print(iter + \"\\t\" + f.format(theoryBound) + \"\\t\" + f.format(trainError) + \"\\t\" + f.format(testError));\n  }\n  infoStream.flush();\n  logBoosting(iter, combined, base);\n}", "path": "third\\jboost-2.0\\src\\jboost\\monitor\\Monitor.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/**\n * Provides logging for both the train and test sets.\n */\n", "func_signal": "private void logBoostingTrainTest(PrintWriter boostingStream, ExampleSet tSet, int iter, Predictor combined, Predictor base)", "code": "{\n  // Output the training data\n  boostingStream.println(\"iteration=\" + iter + FIELD_SEPARATOR + \"elements=\" + tSet.size() + FIELD_SEPARATOR + \"boosting_params=\"\n                         + m_booster.getParamString() + FIELD_SEPARATOR);\n\n  // Get the relavant data structures (arrays and lists)\n  ArrayList tMargin = tSet.calcMargins(iter, combined, base);\n  ArrayList tScores = tSet.calcScores(iter, combined, base);\n  ArrayList tLabelIndices = tSet.getBinaryLabels();\n\n  double[] tIndex = null;\n  if (tSet.hasIndex()) tIndex = tSet.getIndexes();\n\n  double[][] tWeights = null;\n  double[][] tPotentials = null;\n  if (boostingStream.equals(trainBoostingStream)) {\n    tWeights = m_booster.getWeights();\n    tPotentials = m_booster.getPotentials();\n  }\n\n  NumberFormat f = new DecimalFormat(\"0.00000\");\n  double[] tmp = null;\n  Boolean[] labeltmp = null;\n  int j = 0;\n  for (int i = 0; i < tMargin.size(); i++) {\n    // output the example number\n    boostingStream.print(\"\" + i + FIELD_SEPARATOR);\n\n    // If available, output the example index\n    if (tIndex != null) {\n      boostingStream.printf(\"%.0f\" + FIELD_SEPARATOR, tIndex[i]);\n    }\n\n    // output the margins\n    // I think this field is not very useful and should be eliminated\n    // (YoavFreund 9/9/08)\n    tmp = ((double[]) tMargin.get(i));\n    for (j = 0; j < tmp.length; j++) {\n      boostingStream.print(f.format(tmp[j]));\n      if (j != tmp.length - 1) boostingStream.print(SEPARATOR);\n    }\n    boostingStream.print(FIELD_SEPARATOR);\n\n    // output the scores\n    tmp = ((double[]) tScores.get(i));\n    for (j = 0; j < tmp.length; j++) {\n      boostingStream.print(f.format(tmp[j]));\n      if (j != tmp.length - 1) boostingStream.print(SEPARATOR);\n    }\n    boostingStream.print(FIELD_SEPARATOR);\n\n    if (boostingStream.equals(trainBoostingStream)) {\n      // output the weights\n      for (j = 0; j < tWeights[i].length; j++) {\n        // output it in log scale\n        boostingStream.print(f.format(Math.log(tWeights[i][j])));\n        if (j != tmp.length - 1) boostingStream.print(SEPARATOR);\n      }\n      boostingStream.print(FIELD_SEPARATOR);\n\n      // output the potentials\n      for (j = 0; j < tPotentials[i].length; j++) {\n        boostingStream.print(f.format(tPotentials[i][j]));\n        if (j != tmp.length - 1) boostingStream.print(SEPARATOR);\n      }\n      boostingStream.print(FIELD_SEPARATOR);\n\n    }\n\n    // output the labels\n    labeltmp = ((Boolean[]) tLabelIndices.get(i));\n    for (j = 0; j < labeltmp.length; j++) {\n      boostingStream.print(labeltmp[j].booleanValue() ? \"+1\" : \"-1\");\n      if (j != tmp.length - 1) boostingStream.print(SEPARATOR);\n    }\n    boostingStream.print(FIELD_SEPARATOR);\n    boostingStream.println(\"\");\n  }\n\n  // release memory\n  tMargin.clear();\n  tScores.clear();\n  tLabelIndices.clear();\n  tMargin = null;\n  tScores = null;\n  tLabelIndices = null;\n  tWeights = null;\n  tPotentials = null;\n}", "path": "third\\jboost-2.0\\src\\jboost\\monitor\\Monitor.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/** Compare to another label */\n", "func_signal": "public boolean equals(MultiDiscreteAttribute l)", "code": "{\n  if ((value >= 0) || (l.value >= 0)) return (value == l.value);\n  else if (values.length != l.values.length) return false;\n  else {\n    for (int i = 0; i < values.length; i++)\n      if (values[i] != l.values[i]) return false;\n    return true;\n  }\n}", "path": "third\\jboost-2.0\\src\\jboost\\examples\\MultiDiscreteAttribute.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/**\n * Using the same example description use this DataStream on a different data\n * source.\n */\n", "func_signal": "public void reset(String data) throws IOException", "code": "{\n  BufferedReader br = new BufferedReader(new FileReader(data));\n  // throws IOException\n  m_data = new LTStreamTokenizer(br, m_exampleTerminator);\n}", "path": "third\\jboost-2.0\\src\\jboost\\tokenizer\\jboost_DataStream.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/** output the scores distribution of the training set */\n", "func_signal": "private void logBoosting(int iter, Predictor combined, Predictor base)", "code": "{\n  if ((boostingPrintRate == 0) || (boostingPrintRate > 0 && boostingPrintRate != iter)) return;\n\n  if (boostingPrintRate == -1) {\n    // print score when highest order digit in iter changes.\n    double m = Math.floor(Math.log(iter) / Math.log(10.0));\n    int t = (int) Math.pow(10.0, m);\n    if (iter == 0) t = 1; // fix bug in \"pow\"\n    if ((iter % t) != 0) return;\n  }\n\n  // save to buffer\n  if (boostingPrintRate == -3) {\n    trainBoostingBuffer.reset();\n    testBoostingBuffer.reset();\n    PrintWriter wTrain = new PrintWriter(trainBoostingBuffer);\n    PrintWriter wTest = new PrintWriter(testBoostingBuffer);\n    logBoostingTrainTest(wTrain, trainSet, iter, combined, base);\n    logBoostingTrainTest(wTest, testSet, iter, combined, base);\n    wTrain.close();\n    wTest.close();\n    return;\n  }\n\n  logBoostingTrainTest(trainBoostingStream, trainSet, iter, combined, base);\n  logBoostingTrainTest(testBoostingStream, testSet, iter, combined, base);\n  trainBoostingStream.flush();\n  testBoostingStream.flush();\n  infoStream.print(\" \\t# output boosting data #\");\n}", "path": "third\\jboost-2.0\\src\\jboost\\monitor\\Monitor.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/**\n * returns true if the given class index is associated with this label.\n * \n * @param l\n *            given class index\n */\n", "func_signal": "public boolean getMultiValue(int l)", "code": "{\n  if (value >= 0) return (l == value);\n  else if (l < 0 || l >= values.length) return false;\n  else return values[l];\n}", "path": "third\\jboost-2.0\\src\\jboost\\examples\\MultiDiscreteAttribute.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/**\n * Subtracts a list of example indices to the bag. A default implementation is\n * provided in terms of subtractExample.\n */\n", "func_signal": "public void subtractExampleList(int[] l)", "code": "{\n  for (int i = 0; i < l.length; i++) {\n    subtractExample(l[i]);\n  }\n}", "path": "third\\jboost-2.0\\src\\jboost\\booster\\Bag.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/**\n * Adds a list of example indices to the bag. A default implementation is\n * provided in terms of addExample.\n */\n", "func_signal": "public void addExampleList(int[] l)", "code": "{\n  for (int i = 0; i < l.length; i++)\n    addExample(l[i]);\n}", "path": "third\\jboost-2.0\\src\\jboost\\booster\\Bag.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/**\n * Updates the m_weights of a list of examples contained in this bag. In other\n * words, subtracts their old m_weights and adds their new m_weights.\n */\n", "func_signal": "public void refreshList(int[] l)", "code": "{\n  for (int i = 0; i < l.length; i++) {\n    refresh(l[i]);\n  }\n}", "path": "third\\jboost-2.0\\src\\jboost\\booster\\Bag.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/**\n * constructor\n * \n * @param values\n *            array of {0,1} boolean values indicating membership in each\n *            class\n */\n", "func_signal": "public MultiDiscreteAttribute(boolean[] values)", "code": "{\n  int num_true = 0;\n  value = -1;\n  for (int i = 0; i < values.length; i++) {\n    if (values[i]) {\n      value = i;\n      num_true++;\n    }\n  }\n  if (num_true != 1) {\n    this.values = new boolean[value + 1];\n    for (int i = 0; i <= value; i++)\n      this.values[i] = values[i];\n    value = -1;\n  }\n}", "path": "third\\jboost-2.0\\src\\jboost\\examples\\MultiDiscreteAttribute.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/**\n * The constructor\n * \n * @param config\n *            a configuration object with the run-time parameters\n * @param trainSet\n *            the training set (to calcualte training error)\n * @param testSet\n *            the test set\n * @param m_booster\n *            the m_booster (to compute m_margins)\n */\n", "func_signal": "public Monitor(Booster booster, ExampleSet training, ExampleSet testing, Configuration config)", "code": "{\n  trainSet = training;\n  testSet = testing;\n  m_booster = booster;\n  outputStem = config.getString(\"S\", \"noname_out\");\n  infoFilename = config.getString(\"info\", outputStem + \".info\");\n\n  trainBoostingFilename = outputStem + \".train.boosting.info\";\n  testBoostingFilename = outputStem + \".test.boosting.info\";\n\n  try {\n    infoStream = new PrintWriter(new BufferedWriter(new FileWriter(infoFilename)));\n    infoStream.println(\"Command line parameters: \" + config.getString(\"args\"));\n    infoStream.println();\n    infoStream.println(\"Configuration parameters:\\n\" + config);\n    infoStream.println();\n\n    // RobustBoost: binary case\n    if (m_booster instanceof RobustBoost) {\n      RobustBoost rb = (RobustBoost) m_booster;\n      infoStream.println(\"RobustBoost parameters:\");\n      infoStream.println(rb.getParameters());\n      infoStream.println();\n    }\n\n    infoStream.println(\"FILENAMES\");\n    infoStream.println(\"specFilename = \" + config.getSpecFileName());\n    infoStream.println(\"trainFilename = \" + config.getTrainFileName());\n    infoStream.println(\"testFilename = \" + config.getTestFileName());\n    infoStream.println(\"trainBoostingInfo = \" + trainBoostingFilename);\n    infoStream.println(\"testBoostingInfo = \" + testBoostingFilename);\n    infoStream.println(\"resultOutputFilename = \" + config.getResultOutputFileName());\n    infoStream.println(\"logOutputFilename = \" + logOutputFilename);\n    infoStream.println(\"\");\n    infoStream.println(\"Train set size = \" + trainSet.getExampleNo());\n    infoStream.println(\"Test set size = \" + testSet.getExampleNo());\n    infoStream.println(\"\");\n    boostingPrintRate = config.getInt(\"a\", 0);\n\n    trainBoostingStream = new PrintWriter(new BufferedWriter(new FileWriter(trainBoostingFilename)));\n    testBoostingStream = new PrintWriter(new BufferedWriter(new FileWriter(testBoostingFilename)));\n\n    trainBoostingBuffer = new ByteArrayOutputStream();\n    testBoostingBuffer = new ByteArrayOutputStream();\n\n    afterInitTime = new Date();\n    infoStream.println(\"Init  Start time = \" + startTime);\n    infoStream.println(\"Learn Start time = \" + afterInitTime);\n\n    // RobustBoost: binary case\n    if (booster instanceof RobustBoost) {\n      infoStream.println(\"iter \\tbound \\ttrain \\ttest \\ttime\");\n    }\n    else {\n      infoStream.println(\"iter \\tbound \\ttrain \\ttest\");\n    }\n\n    infoStream.flush();\n  }\n  catch (IOException e) {\n    throw new RuntimeException(\"monitor failed to open file for output\\n\" + e.getMessage());\n  }\n}", "path": "third\\jboost-2.0\\src\\jboost\\monitor\\Monitor.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/**\n * Constructor\n * \n * @param spec\n *            The name of the specification file.\n * @param data\n *            The name of the data file.\n */\n", "func_signal": "public jboost_DataStream(String spec, String data) throws IOException, SpecFileException, ClassNotFoundException", "code": "{\n  init(spec, data);\n  if (Monitor.logLevel > 3) {\n    Monitor.log(\"\" + ed);\n  }\n}", "path": "third\\jboost-2.0\\src\\jboost\\tokenizer\\jboost_DataStream.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/**\n * Creates out a string containing the information necessary to read the\n * datafile.\n */\n", "func_signal": "public String toString()", "code": "{\n  String retval = new String();\n  retval += \"exampleTerminator=\" + m_exampleTerminator + \"\\n\";\n  retval += \"attributeTerminator=\" + m_attributeTerminator + \"\\n\";\n  retval += \"elementSeparator=\" + m_elementSeparator + \"\\n\";\n  retval += \"maxBadAtt=\" + maxBadAtt + \"\\n\";\n  retval += \"maxMisAtt=\" + maxMisAtt + \"\\n\";\n  retval += \"maxBadExa=\" + maxBadExa + \"\\n\";\n  retval += ed + \"\\n\";\n  return (retval);\n}", "path": "third\\jboost-2.0\\src\\jboost\\tokenizer\\jboost_DataStream.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/**\n * Constructor if isFile == false, examples are read from standard input.\n * \n * @param isFile\n *            Is the second parameter a specification or a name of a file?.\n * @param stem\n *            A string containing the specification or the stem for the data\n *            files.\n */\n", "func_signal": "public jboost_DataStream(boolean isFile, String stem) throws IOException, SpecFileException, ClassNotFoundException", "code": "{\n  if (isFile) {\n    init(stem + \".spec\", stem + \".train\");\n  }\n  else {\n    ed = new ExampleDescription();\n    readSpecFile(false, stem);\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    m_data = new LTStreamTokenizer(br, m_exampleTerminator);\n  }\n}", "path": "third\\jboost-2.0\\src\\jboost\\tokenizer\\jboost_DataStream.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/** close the monitor output files */\n", "func_signal": "public void close() throws IOException", "code": "{\n\n  // print buffer to files\n  if (boostingPrintRate == -3) {\n    trainBoostingStream.print(trainBoostingBuffer.toString());\n    testBoostingStream.print(testBoostingBuffer.toString());\n    infoStream.print(\" \\t# output boosting data #\");\n  }\n\n  endTime = new Date();\n  infoStream.println(\"\\nEnd time=\" + endTime);\n\n  // RobustBoost: binary case\n  if (m_booster instanceof RobustBoost) {\n    RobustBoost rb = (RobustBoost) m_booster;\n    infoStream.println(\"\\nrb_t = \" + rb.getCurrentTime());\n  }\n\n  infoStream.close();\n\n  if (trainBoostingStream != null) trainBoostingStream.close();\n  if (testBoostingStream != null) testBoostingStream.close();\n\n  log(\"finished closing output files\");\n}", "path": "third\\jboost-2.0\\src\\jboost\\monitor\\Monitor.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/**\n * Reads the start of a line from the main body and uses the rest to construct\n * an appropriate AttributeDescription\n */\n", "func_signal": "private void parseBodyLine(String next, int lineCount) throws SpecFileException, ClassNotFoundException", "code": "{\n\n  String line = StringOp.cleanLine(next, \"//\");\n  boolean parsed = true;\n  // if the line is null, then skip it\n  if (line != null) {\n    parsed = false;\n    StringTokenizer tokens = new StringTokenizer(line, \" \");\n    String options = null;\n    Vector values = null;\n    if (tokens.hasMoreTokens()) {\n      // get the name of the attribute\n      String name = tokens.nextToken();\n      name = name.trim();\n      if (tokens.hasMoreTokens()) {\n        // get the type of the attribute\n        String type = tokens.nextToken();\n        type = type.trim();\n        if (type.length() != 0) {\n\n          // consider putting the code up to '****' in a separate method\n          if (type.charAt(0) == '(') {\n            type = \"finite\";\n          }\n          // make sure the type is one of the three supported\n          if (!(type.equals(\"finite\") || type.equals(\"text\") || type.equals(\"number\") || type.equals(\"string\") || type.equals(\"int\") || type.equals(\"bool\"))) {\n            throw new SpecFileException(\"Type not valid for attribute \" + line);\n          }\n          Configuration conf = new Configuration();\n\n          // support for attribute options\n          // if type is \"finite\", then get the list of possible values\n          // also, \"finite\" type supports an options list\n          boolean badValues = false;\n          if (type.equals(\"finite\")) {\n            String list = null;\n            badValues = true;\n            LTStringTokenizer lts = new LTStringTokenizer(line, \"(\");\n            if (lts.next() != null) {\n              lts.setTerminator(\")\");\n              list = lts.next();\n              if (list != null) {\n                options = lts.rest();\n                values = (Vector) StringOp.toUniqList(list, \",\");\n                if (values != null) {\n                  tokens = new StringTokenizer(options, \" \");\n                  // add options to configuration\n                  conf.parseStringTokenizer(tokens);\n                  badValues = false;\n                }\n              }\n            }\n          }\n          else {\n            // find options for other type\n            LTStringTokenizer lts = new LTStringTokenizer(line, \"(\");\n            if (lts.next() != null) {\n              badValues = true;\n              lts.setTerminator(\")\");\n              options = lts.next();\n              try {\n                tokens = new StringTokenizer(options, \" \");\n              }\n              catch (Exception e) {\n                System.out.println(\"lts:\" + lts);\n                System.out.println(\"options:\" + options);\n                throw new SpecFileException(\"Error in spec file!  Check for illegal characters (such as terminators in bad places). \\n\" + e.getMessage());\n              }\n              // add options to configuration\n              conf.parseStringTokenizer(tokens);\n              badValues = false;\n            }\n          }\n\n          if (badValues) {\n            throw (new SpecFileException(\"No valid list of values given \" + \"for finite attribute: \" + line));\n          }\n\n          AttributeDescription attribute = AttributeDescription.build(name, type, conf, values);\n          // ****\n\n          if (attribute != null) {\n            if (name.equals(DataStream.LABELS_ATTR)) {\n              ed.setLabel(attribute, lineCount);\n            }\n            else if (name.equals(DataStream.WEIGHT_ATTR)) {\n              ed.setWeight(attribute, lineCount);\n            }\n            else if (name.equals(DataStream.INDEX_ATTR)) {\n              ed.setIndex(attribute, lineCount);\n            }\n            else {\n              ed.addAttribute(attribute);\n            }\n\n            // spit out some logging info\n            if (Monitor.logLevel > 3) {\n              String errors = conf.getUnSpecified();\n              if (errors != null) {\n                Monitor.log(\"Options not specfied for attribute: \" + name + \"\\n\" + errors + \"\\n\");\n              }\n              errors = conf.unused();\n              if (errors != null) {\n                Monitor.log(\"Options specfied but not used for attribute: \" + name + \"\\n\" + errors + \"\\n\");\n              }\n            }\n            // this line was parsed properly\n            parsed = true;\n          }\n        }\n      }\n    }\n  }\n  if (!parsed) {\n    throw (new SpecFileException(\"Cannot parse Spec file line:\\n\" + line));\n  }\n}", "path": "third\\jboost-2.0\\src\\jboost\\tokenizer\\jboost_DataStream.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/**\n * Gets an array of attributes in a standard textual form that can then be\n * transformed into an example by ExampleStream.\n */\n", "func_signal": "public String[] getExampleText() throws BadExaException", "code": "{\n  int count = noAttr + 1;\n  // increase the attribute count if the ExampleDescription includes a Weight\n  if (ed.getWeightDescription() != null) {\n    count++;\n  }\n  // increase the attribute count if the ExampleDescription includes an INDEX\n  if (ed.getIndexDescription() != null) {\n    count++;\n  }\n  String[] retval = new String[count];\n  LTStringTokenizer exaTokens = null;\n  String nextAtt = null;\n  String exaStr = null;\n  int i = 0;\n\n  while ((exaStr = m_data.next()) != null) { // potential example found\n    exaTokens = new LTStringTokenizer(exaStr, m_attributeTerminator);\n    for (i = 0; i < retval.length - 1; i++) {\n      if ((nextAtt = exaTokens.next()) == null) {\n        throw new BadExaException(\"Expected \" + count + \" attributes, found only \" + i + \".\", m_data.firstLineNum());\n      }\n      // attribute found, parse it\n      retval[i] = nextAtt;\n    } // found all attributes\n\n    /*\n     * if (exaTokens.next() != null) { // an extra one throw new\n     * BadExaException(\"Expected \" + noAttr + \" attributes, found more.\\n\" +\n     * \"Skipping rest of example.\", m_data.firstLineNum()); } // reading label\n     */\n    retval[i] = exaTokens.rest();\n    return (retval);\n  } // no good examples found\n\n  if (!m_data.rest().trim().equals(\"\")) {\n    System.err.println(\"Warning: more data after last example.\");\n  }\n\n  return null;\n}", "path": "third\\jboost-2.0\\src\\jboost\\tokenizer\\jboost_DataStream.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/**\n * Sets the global parameters from the preamble text.\n */\n", "func_signal": "private boolean parsePreambleLine(String line, Configuration conf)", "code": "{\n  String clean = StringOp.cleanLine(line, \"//\");\n  boolean retval = false;\n\n  if (clean != null) {\n    StringTokenizer tokens = new StringTokenizer(clean, \"=\");\n    String first;\n    String second;\n    if (tokens.hasMoreTokens() == true) {\n      first = tokens.nextToken();\n      first = first.trim();\n      if (conf.isValid(first) && tokens.hasMoreTokens()) {\n        second = tokens.nextToken();\n        second = second.trim();\n        conf.addOption(first, second);\n        retval = true;\n      }\n    }\n  }\n  else { // if the line is empty, just return true\n    retval = true;\n  }\n  return retval;\n}", "path": "third\\jboost-2.0\\src\\jboost\\tokenizer\\jboost_DataStream.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/**\n * initialize this stream\n */\n", "func_signal": "private void init(String specFileName, String dataFileName) throws IOException, SpecFileException, ClassNotFoundException", "code": "{\n  ed = new ExampleDescription();\n  readSpecFile(true, specFileName);\n  BufferedReader br = new BufferedReader(FileLoader.createFileReader(dataFileName));\n  // throws IOException\n  m_data = new LTStreamTokenizer(br, m_exampleTerminator);\n}", "path": "third\\jboost-2.0\\src\\jboost\\tokenizer\\jboost_DataStream.java", "repo_name": "sudeepp/cv", "stars": 1, "license": "None", "language": "java", "size": 20596}
{"docstring": "/**\n * Generates a random color.\n */\n", "func_signal": "private static Color randomColor()", "code": "{\n    return new Color(random_.nextInt(256),\n            random_.nextInt(256),\n            random_.nextInt(256));\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\shape\\Shape.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Constructs a menu based on a gameboard.\n */\n", "func_signal": "public TetrisMenu(GameBoard board)", "code": "{\n    board_ = board;\n    add(getFileMenu(board));\n    add(getAboutMenu());\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\TetrisMenu.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * moves the shape to point (x,y)\n * @param x \n * @param y\n */\n", "func_signal": "public Shape move(int x, int y)", "code": "{\n    Point[] newPoints = new Point[points_.length];\n    for(int i = 0; i < points_.length; i++)\n        newPoints[i] = new Point(points_[i].x + x, \n                                 points_[i].y + y);\n    return new Shape(newPoints, color_);\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\shape\\Shape.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Return a pretty string of the shape.\n */\n", "func_signal": "public String toString()", "code": "{\n    String pointsStr = \"\";\n    for(Point p: points_)\n        pointsStr += p.toString() + \"\\n\";\n\n    return pointsStr + \"\\n \" + color_.toString();\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\shape\\Shape.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Resets all states of the game.\n */\n", "func_signal": "final public void resetGame()", "code": "{\n    cellGrid_.clearAll();\n    refreshState();\n    timer_.stop();\n    velocity_.setTemporaryVelocity(null);\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\GameBoard.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Constructs a Colored grid of xCells X yCells size.\n * @param xCells\n * @param yCells\n */\n", "func_signal": "public ColoredGrid(int xCells, int yCells)", "code": "{\n    grid_ = getNewGrid();\n    horizontalLines_ = new int[yCells];\n\n    xCells_ = xCells;\n    yCells_ = yCells;\n\n    setPreferredSize(new Dimension(xCells_ * CELL_WIDTH, \n                yCells_ * CELL_WIDTH));\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\grid\\ColoredGrid.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Constructs a GameBoard\n */\n", "func_signal": "public GameBoard()", "code": "{\n    frame_ = new JFrame(\"Tetris\");\n    frame_.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame_.setFocusable(true);\n    frame_.setJMenuBar(new TetrisMenu(this));\n\n    cellGrid_ = new ColoredGrid(X_CELLS, Y_CELLS);\n    timer_ = new Timer(ANIMATION_RATE,this);\n    frame_.addKeyListener(this);\n\n    velocity_ = new Velocity(1);\n    resetGame();\n\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\GameBoard.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Constructs a shape object given a points vector and a color.\n * @param points points vector\n * @param color color for each point\n */\n", "func_signal": "public Shape(Point[] points, Color color)", "code": "{\n    points_ = points;\n    color_ = color;\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\shape\\Shape.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Handles events\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n    board_.setPaused(true);\n    if(e.getActionCommand() == EXIT_STRING)\n        System.exit(1);\n    else if(e.getActionCommand() == RESET_STRING)\n        board_.resetGame();\n\n    else if(e.getActionCommand() == ABOUT_STRING)\n        JOptionPane.showMessageDialog(null, ABOUT_MESSAGE);\n    board_.setPaused(false);\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\TetrisMenu.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Adds all the cells of a shape to the grid.\n * @param shape shape to add\n */\n", "func_signal": "public void addShape(Shape shape)", "code": "{\n    for(Point p: shape.getPoints()){\n        add(p,shape.getColor());\n    }\n\n    clearFullLines();\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\grid\\ColoredGrid.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Repaints all the cells in the grid including the temporaryShape.\n * Flushes temporaryShape and message on each repaint.\n * @param g graphics object\n */\n", "func_signal": "public void paintComponent(Graphics g)", "code": "{\n\t\tColor prev = g.getColor();\n\t\tg.setColor(Color.BLACK);\n    g.fillRect(0,0,getWidth(),getHeight());\n\t\tg.setColor(prev);\n    for(int x = 0; x < xCells_; x++)\n    {\n        for(int y = 0; y < yCells_; y++)\n        {\n            if(grid_[x][y] != null)\n            { \n                g.setColor(grid_[x][y]);\n                drawCell(g,x,y);\n            }\n        }\n    }\n\n    // Flush temporaryShape\n    if(temporaryShape_ != null)\n    {\n        g.setColor(temporaryShape_.getColor());\n        for(Point p: temporaryShape_.getPoints())\n            drawCell(g, p.x, p.y);\n        temporaryShape_ = null;\n    }\n\n    // Flush message\n    if(message_ != null)\n    {\n        g.setColor(Color.WHITE); \n        g.setFont(new Font(\"Arial\", Font.BOLD, 20));\n        g.drawString(message_, getWidth()/4, getHeight()/2);\n        message_ = null;\n    }\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\grid\\ColoredGrid.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/** \n * Rotate the shape in a clockwise direction by 90 degrees.\n */\n", "func_signal": "public void rotate()", "code": "{\n    int minX = SHAPE_GRID_SIZE;\n    int minY = SHAPE_GRID_SIZE;\n    for(Point p: points_) {\n        p.move(p.y, SHAPE_GRID_SIZE - 1 - p.x);\n        minX = Math.min(minX,p.x);\n        minY = Math.min(minY,p.y);\n    }\n\n    // Normalize\n    for(Point p: points_) {\n            p.x = p.x-minX;\n            p.y = p.y-minY;\n    }\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\shape\\Shape.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Updates game state on each timer iteration.\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n    yPosition_ += velocity_.getVelocity();\n    Shape movedShape = currentShape_.move(xPosition_, yPosition_);\n\n    if(cellGrid_.collidesWith(movedShape, ColoredGrid.BOTTOM_CELL)) \n    {\n        if(yPosition_ < currentShape_.getHeight())\n        {\n            cellGrid_.setMessage(\"Nice Try!\");\n            cellGrid_.repaint();\n            resetGame();\n            return;\n        }\n        else\n        {\n            cellGrid_.addShape(movedShape);\n            refreshState();\n        }\n    }\n    else\n    {\n        cellGrid_.setTemporaryShape(movedShape);\n    }\n\n    previousShape_ = movedShape;\n    cellGrid_.repaint();\n    velocity_.setTemporaryVelocity(null);\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\GameBoard.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Resets the grid.\n */\n", "func_signal": "public void clearAll()", "code": "{\n    grid_ = getNewGrid();\n    temporaryShape_ = null;\n    horizontalLines_ = new int[yCells_];\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\grid\\ColoredGrid.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Handles user key presses, shifts and rotations.\n * @param e KeyEvent type\n */\n", "func_signal": "public void keyPressed(KeyEvent e)", "code": "{\t\n    timer_.restart();\n\n    if(e.getKeyCode() == KeyEvent.VK_LEFT) {\n        Shape movedShape = currentShape_.move(xPosition_, yPosition_);\n        if(!cellGrid_.collidesWith(movedShape, ColoredGrid.LEFT_CELL)){\n            xPosition_--;\n            velocity_.setTemporaryVelocity(0);\n            actionPerformed(null);\n        }\n    }\n    else if(e.getKeyCode() == KeyEvent.VK_RIGHT) {\n        Shape movedShape = currentShape_.move(xPosition_, yPosition_);\n        if(!cellGrid_.collidesWith(movedShape, ColoredGrid.RIGHT_CELL)){\n            xPosition_++;\n            velocity_.setTemporaryVelocity(0);\n            actionPerformed(null);\n        }\n    }\n    else if(e.getKeyCode() == KeyEvent.VK_UP){\n        currentShape_.rotate();\n        velocity_.setTemporaryVelocity(0);\n        actionPerformed(null);\n    }\n    else if(e.getKeyCode() == KeyEvent.VK_DOWN) {\n        actionPerformed(null);\n    }\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\GameBoard.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Sets the game's paused state.\n */\n", "func_signal": "public void setPaused(boolean b)", "code": "{\n    if(b)\n        timer_.stop();\n    else\n        timer_.restart();\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\GameBoard.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Sets a color at location of Point p.\n * @param p point within the grid\n * @param c color to set\n */\n", "func_signal": "public void add(Point p, Color c)", "code": "{ \n    horizontalLines_[p.y]++;\n    grid_[p.x][p.y] = c;\n\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\grid\\ColoredGrid.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Return width.\n */\n", "func_signal": "public int getWidth()", "code": "{\n    int width = 0;\n    for(Point p: points_)\n        width = Math.max(width,p.x);\n    return width + 1;\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\shape\\Shape.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Generates a random shape.\n */\n", "func_signal": "public static Shape randomShape()", "code": "{\n    return new Shape(ShapeVector.VECTORS[random_.nextInt(ShapeVector.VECTORS.length)],\n                     randomColor());\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\shape\\Shape.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n * Runs the game.\n */\n", "func_signal": "public void run()", "code": "{\n    frame_.add(cellGrid_);\n    frame_.pack();\n    frame_.setVisible(true);\n    timer_.start();\n}", "path": "src\\edu\\cuny\\brooklyn\\tetris\\GameBoard.java", "repo_name": "ramin32/Tetris", "stars": 1, "license": "None", "language": "java", "size": 236}
{"docstring": "/**\n** Split a maximal child node into two minimal nodes, using the median key\n** as the separator between these new nodes in the parent. If the parent is\n** {@code null}, creates a new {@link Node} and points {@link #root} to it.\n**\n** Note: This method assumes that the child is an actual subnode of the\n** parent, and that it is actually full. It is up to the calling code to\n** ensure that this holds.\n**\n** The exact implementation of this may change from time to time, so the\n** calling code should regard the input subnode as effectively destroyed,\n** and re-get the desired result subnode from calling the appropriate\n** get methods on the parent node.\n**\n** @param parent The node to (re)attach the split subnodes to.\n** @param child The subnode to split\n*/\n", "func_signal": "private K split(Node parent, Node child)", "code": "{\n\tassert(child.size() == ENT_MAX);\n\tassert(parent == null? (child.lkey == null && child.rkey == null):\n\t                       (parent.size() < ENT_MAX\n\t                     && !parent.isLeaf()\n\t                     && parent.rnodes.get(child.lkey) == child\n\t                     && parent.lnodes.get(child.rkey) == child));\n\n\tif (parent == null) {\n\t\tassert(child.lkey == null && child.rkey == null);\n\t\tparent = root = newNode(false);\n\t\tparent.lnodes.put(null, child);\n\t\tparent.rnodes.put(null, child);\n\t}\n\tNode lnode = newNode(child.isLeaf());\n\tK mkey;\n\n\tif (child.isLeaf()) {\n\t\t// this is just the same as the code in the else block, but with leaf\n\t\t// references to rnodes and lnodes removed (since they are null)\n\t\tIterator<Map.Entry<K, V>> it = child.entries.entrySet().iterator();\n\t\tfor (int i=0; i<ENT_MIN; ++i) {\n\t\t\tMap.Entry<K, V> entry = it.next(); it.remove();\n\t\t\tK key = entry.getKey();\n\n\t\t\tlnode.entries.put(key, entry.getValue());\n\t\t}\n\t\tMap.Entry<K, V> median = it.next(); it.remove();\n\t\tmkey = median.getKey();\n\n\t\tlnode.lkey = child.lkey;\n\t\tlnode.rkey = child.lkey = mkey;\n\n\t\tparent.rnodes.put(lnode.lkey, lnode);\n\t\tparent.lnodes.put(child.rkey, child);\n\t\tparent.entries.put(mkey, median.getValue());\n\t\tparent.rnodes.put(mkey, child);\n\t\tparent.lnodes.put(mkey, lnode);\n\n\t} else {\n\t\tlnode.rnodes.put(child.lkey, child.rnodes.remove(child.lkey));\n\t\tIterator<Map.Entry<K, V>> it = child.entries.entrySet().iterator();\n\t\tfor (int i=0; i<ENT_MIN; ++i) {\n\t\t\tMap.Entry<K, V> entry = it.next(); it.remove();\n\t\t\tK key = entry.getKey();\n\n\t\t\tlnode.entries.put(key, entry.getValue());\n\t\t\tlnode.lnodes.put(key, child.lnodes.remove(key));\n\t\t\tlnode.rnodes.put(key, child.rnodes.remove(key));\n\t\t}\n\t\tMap.Entry<K, V> median = it.next(); it.remove();\n\t\tmkey = median.getKey();\n\t\tlnode.lnodes.put(mkey, child.lnodes.remove(mkey));\n\n\t\tlnode.lkey = child.lkey;\n\t\tlnode.rkey = child.lkey = mkey;\n\n\t\tparent.rnodes.put(lnode.lkey, lnode);\n\t\tparent.lnodes.put(child.rkey, child);\n\t\tparent.entries.put(mkey, median.getValue());\n\t\tparent.rnodes.put(mkey, child);\n\t\tparent.lnodes.put(mkey, lnode);\n\t}\n\n\tassert(parent.rnodes.get(mkey) == child);\n\tassert(parent.lnodes.get(mkey) == lnode);\n\treturn mkey;\n}", "path": "src\\plugins\\Library\\util\\BTreeMap.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** This method will start a new thread if there are no threads currently\n** running. When called at the beginning of a task series, it ensures that\n** there is at least one thread available to receive a task.\n*/\n", "func_signal": "protected synchronized void kickStart()", "code": "{\n\tif (numThreads != 0) { return; }\n\t++numThreads;\n\t(new QueueHandler()).start();\n}", "path": "src\\plugins\\Library\\serial\\ParallelSerialiser.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** {@inheritDoc}\n**\n** This implementation DOCUMENT\n*/\n", "func_signal": "@Override public void push(Iterable<PushTask<T>> tasks) throws TaskAbortException", "code": "{\n\tkickStart();\n\ttry {\n\t\tList<P> plist = new ArrayList<P>();\n\t\tIterator<PushTask<T>> it = tasks.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tPushTask<T> t = it.next();\n\t\t\tif (t.data == null) {\n\t\t\t\tthrow new IllegalArgumentException(\"ParallelSerialiser cannot handle pull tasks with null metadata\");\n\t\t\t}\n\n\t\t\tP p = tracker.addPushProgress(t.data);\n\t\t\tif (p == null) {\n\t\t\t\t// if we are already pushing this, then erase it from the task iterable\n\t\t\t\t// but we still want to wait for the task to finish, so add it to plist\n\t\t\t\tit.remove();\n\t\t\t\tplist.add(tracker.getPushProgress(t.data));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tplist.add(p);\n\n\t\t\twhile (!queue.offer(t, 1, TimeUnit.SECONDS)) {\n\t\t\t\tstartHandler();\n\t\t\t}\n\t\t}\n\t\t// wait for all tasks to finish\n\t\tjoinAll(plist);\n\n\t} catch (InterruptedException e) {\n\t\tthrow new TaskAbortException(\"ParallelSerialiser push was interrupted\", e, true);\n\t} finally {\n\t\t// OPTIMISE make ProgressTracker use WeakIdentityHashMap instead\n\t\t// then we'll skip removal for completed (not aborted) tasks\n\t\tfor (PushTask<T> t: tasks) { tracker.remPushProgress(t.data); }\n\t}\n}", "path": "src\\plugins\\Library\\serial\\ParallelSerialiser.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** Performs a rotate operation towards the smaller node. A rotate operation\n** is where:\n**\n** * an entry M from the parent node is moved to a subnode\n** * an entry S from an adjacent subnode is moved to fill gap left by M\n** * a subnode N associated with S is cut from M and attached to S\n**\n** with the operands chosen appropriately to maintain tree constraints.\n**\n** Here, M is the key that separates {@code lnode} and {@code rnode}, S is\n** the smallest key of {@code rnode}, and N its smallest subnode.\n**\n** Note: This method assumes that both childs are actual subnodes of the\n** parent, that they are adjacent in the parent, and that the child losing\n** an entry has more than {@link #ENT_MIN} entries. It is up to the calling\n** code to ensure that this holds.\n**\n** @param parent The parent node of the children.\n** @param lnode The smaller subnode, which accepts an entry from the parent\n** @param rnode The greater subnode, which loses an entry to the parent\n*/\n", "func_signal": "private K rotateL(Node parent, Node lnode, Node rnode)", "code": "{\n\tassert(compare(lnode.rkey, rnode.lkey) == 0); // not compare2 since can't be at edges\n\tassert(lnode.isLeaf() && rnode.isLeaf() || !lnode.isLeaf() && !rnode.isLeaf());\n\tassert(rnode.size() >= lnode.size());\n\tassert(rnode.size() > ENT_MIN);\n\tassert(!parent.isLeaf() && parent.rnodes.get(lnode.rkey) == rnode\n\t                      && parent.lnodes.get(rnode.lkey) == lnode);\n\n\tK mkey = rnode.lkey;\n\tK skey = rnode.entries.firstKey();\n\n\tlnode.entries.put(mkey, parent.entries.remove(mkey));\n\tparent.entries.put(skey, rnode.entries.remove(skey));\n\tparent.rnodes.put(skey, parent.rnodes.remove(mkey));\n\tparent.lnodes.put(skey, parent.lnodes.remove(mkey));\n\n\tlnode.rkey = rnode.lkey = skey;\n\n\tif (!lnode.isLeaf()) {\n\t\tlnode.rnodes.put(mkey, rnode.rnodes.remove(mkey));\n\t\tlnode.lnodes.put(skey, rnode.lnodes.remove(skey));\n\t}\n\n\tassert(parent.rnodes.get(skey) == rnode);\n\tassert(parent.lnodes.get(skey) == lnode);\n\treturn mkey;\n}", "path": "src\\plugins\\Library\\util\\BTreeMap.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** Performs a rotate operation towards the greater node. A rotate operation\n** is where:\n**\n** * an entry M from the parent node is moved to a subnode\n** * an entry S from an adjacent subnode is moved to fill gap left by M\n** * a subnode N associated with S is cut from M and attached to S\n**\n** with the operands chosen appropriately to maintain tree constraints.\n**\n** Here, M is the key that separates {@code lnode} and {@code rnode}, S is\n** the greatest key of {@code rnode}, and N its greatest subnode.\n**\n** Note: This method assumes that both childs are actual subnodes of the\n** parent, that they are adjacent in the parent, and that the child losing\n** an entry has more than {@link #ENT_MIN} entries. It is up to the calling\n** code to ensure that this holds.\n**\n** @param parent The parent node of the children.\n** @param lnode The smaller subnode, which loses an entry to the parent\n** @param rnode The greater subnode, which accepts an entry from the parent\n*/\n", "func_signal": "private K rotateR(Node parent, Node lnode, Node rnode)", "code": "{\n\tassert(compare(lnode.rkey, rnode.lkey) == 0); // not compare2 since can't be at edges\n\tassert(lnode.isLeaf() && rnode.isLeaf() || !lnode.isLeaf() && !rnode.isLeaf());\n\tassert(lnode.size() >= rnode.size());\n\tassert(lnode.size() > ENT_MIN);\n\tassert(!parent.isLeaf() && parent.rnodes.get(lnode.rkey) == rnode\n\t                      && parent.lnodes.get(rnode.lkey) == lnode);\n\n\tK mkey = lnode.rkey;\n\tK skey = lnode.entries.lastKey();\n\n\trnode.entries.put(mkey, parent.entries.remove(mkey));\n\tparent.entries.put(skey, lnode.entries.remove(skey));\n\tparent.lnodes.put(skey, parent.lnodes.remove(mkey));\n\tparent.rnodes.put(skey, parent.rnodes.remove(mkey));\n\n\tlnode.rkey = rnode.lkey = skey;\n\n\tif (!rnode.isLeaf()) {\n\t\trnode.lnodes.put(mkey, lnode.lnodes.remove(mkey));\n\t\trnode.rnodes.put(skey, lnode.rnodes.remove(skey));\n\t}\n\n\tassert(parent.rnodes.get(skey) == rnode);\n\tassert(parent.lnodes.get(skey) == lnode);\n\treturn mkey;\n}", "path": "src\\plugins\\Library\\util\\BTreeMap.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** Set the maximum number of parallel {@link Thread}s that this serialiser\n** will automatically start.\n*/\n", "func_signal": "public synchronized void setMaxThreads(int n)", "code": "{\n\tif (n < 1) {\n\t\tthrow new IllegalArgumentException(\"Must be able to have at least one thread!\");\n\t}\n\tmaxThreads = n;\n}", "path": "src\\plugins\\Library\\serial\\ParallelSerialiser.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** {@inheritDoc}\n**\n** This implementation uses the BTree single-pass deletion algorithm. We\n** descend the tree, restructuring it as needed so that we can delete the\n** entry from a leaf.\n**\n** Start at the root node. At each stage of the algorithm, we restructure\n** the tree so that the next node we reach has more than {@link #ENT_MIN}\n** entries, and the deletion can occur withot breaking constraints.\n**\n** (*) If the node is not the root, and if the number of entries is equal\n** to {@link #ENT_MIN}, select its two siblings (L and R). Perform one of\n** the following operations (ties being broken arbitrarily):\n**\n** * {@link #merge(Node, Node, Node) merge} with X, if X also has {@link\n**   #ENT_MIN} entries\n** * {@link #rotateL(Node, Node, Node) rotateL} with R, if the R subnode\n**   has more entries than L (or equal)\n** * {@link #rotateR(Node, Node, Node) rotateR} with L, if the L subnode\n**   has more entries than R (or equal)\n**\n** The selected node now has more than {@link #ENT_MIN} entries.\n**\n** If the node is a leaf, remove the value and stop. Otherwise, if the key\n** is not already in the node, select the appropriate subnode and repeat\n** from (*).\n**\n** Otherwise, select the two subnodes (L and R) that this key separates.\n** Perform one of the following operations (ties being broken arbitrarily):\n**\n** * {@link #merge(Node, Node, Node) merge}, if both subnodes have {@link\n**   #ENT_MIN} entries.\n** * {@link #rotateL(Node, Node, Node) rotateL}, if the R subnode has more\n**   entries than L (or equal)\n** * {@link #rotateR(Node, Node, Node) rotateR}, if the L subnode has more\n**   entries than R (or equal)\n**\n** The node that the key ended up in now has more than {@link #ENT_MIN}\n** entries (and will be selected for the next stage).\n**\n** @throws ClassCastException key cannot be compared with the keys\n**         currently in the map\n** @throws NullPointerException key is {@code null} and this map uses\n**         natural order, or its comparator does not tolerate {@code null}\n**         keys\n*/\n", "func_signal": "@Override public V remove(Object k)", "code": "{\n\tK key = (K) k;\n\tNode node = root, parent = null;\n\n\tfor (;;) {\n\t\tif (node != root && node.size() == ENT_MIN) {\n\t\t\tNode lnode = parent.nodeL(node), rnode = parent.nodeR(node);\n\t\t\tint L = (lnode == null)? -1: lnode.size();\n\t\t\tint R = (rnode == null)? -1: rnode.size();\n\n\t\t\tK kk = // in java, ?: must be used in a statement :|\n\t\t\t// lnode doesn't exist\n\t\t\t(L < 0)? ((R == ENT_MIN)? merge(parent, node, rnode):\n\t\t\t                          rotateL(parent, node, rnode)):\n\t\t\t// rnode doesn't exist\n\t\t\t(R < 0)? ((L == ENT_MIN)? merge(parent, lnode, node):\n\t\t\t                          rotateR(parent, lnode, node)):\n\t\t\t// pick the node with more entries\n\t\t\t(R > L)? rotateL(parent, node, rnode):\n\t\t\t(L > R)? rotateR(parent, lnode, node):\n\t\t\t// otherwise pick one at \"random\"\n\t\t\t(size&1) == 1? (R == ENT_MIN? merge(parent, node, rnode):\n\t\t\t                              rotateL(parent, node, rnode)):\n\t\t\t               (L == ENT_MIN? merge(parent, lnode, node):\n\t\t\t                              rotateR(parent, lnode, node));\n\t\t\tnode = parent.selectNode(key);\n\t\t\tassert(node != null);\n\t\t}\n\t\tassert(node == root || node.size() >= ENT_MIN);\n\n\t\tif (node.isLeaf()) { // leaf node\n\t\t\tint sz = node.size();\n\t\t\tV v = node.entries.remove(key);\n\t\t\t// update size cache\n\t\t\tif (node.size() != sz) { --size; }\n\t\t\treturn v;\n\t\t}\n\n\t\tNode nextnode = node.selectNode(key);\n\t\tif (nextnode == null) { // key is already in the node\n\t\t\tNode lnode = node.lnodes.get(key), rnode = node.rnodes.get(key);\n\t\t\tint L = lnode.size(), R = rnode.size();\n\n\t\t\tK kk =\n\t\t\t// both lnode and rnode must exist, so\n\t\t\t// pick the one with more entries\n\t\t\t(R > L)? rotateL(node, lnode, rnode):\n\t\t\t(L > R)? rotateR(node, lnode, rnode):\n\t\t\t// otherwise pick one at \"random\"\n\t\t\t(size&1) == 1? (R == ENT_MIN? merge(node, lnode, rnode):\n\t\t\t                              rotateL(node, lnode, rnode)):\n\t\t\t               (L == ENT_MIN? merge(node, lnode, rnode):\n\t\t\t                              rotateR(node, lnode, rnode));\n\t\t\tnextnode = node.selectNode(key);\n\t\t\tassert(nextnode != null);\n\t\t}\n\n\t\tparent = node;\n\t\tnode = nextnode;\n\t}\n}", "path": "src\\plugins\\Library\\util\\BTreeMap.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** Helper method for the bulk-loading algorithm.\n**\n** @param it Iterator over the entries at the current level\n** @param n Number of entries to add to the map\n** @param prevkey Last key encountered before calling this method\n** @param lnodes Complete map of keys to their lnodes at this level\n** @param nextlnodes In-construction lnodes map for the next level\n*/\n", "func_signal": "private Map.Entry<K, V> makeNode(Iterator<Map.Entry<K, V>> it, int n, K prevkey, Map<K, Node> lnodes, Map<K, Node> nextlnodes)", "code": "{\n\tNode node;\n\tif (lnodes == null) { // create leaf nodes\n\t\tnode = newNode(true);\n\t\tnode.lkey = prevkey;\n\t\tfor (int i=0; i<n; ++i) {\n\t\t\tMap.Entry<K, V> en = it.next();\n\t\t\tK key = en.getKey();\n\t\t\tnode.entries.put(key, en.getValue());\n\t\t\tprevkey = key;\n\t\t}\n\t} else {\n\t\tnode = newNode(false);\n\t\tnode.lkey = prevkey;\n\t\tfor (int i=0; i<n; ++i) {\n\t\t\tMap.Entry<K, V> en = it.next();\n\t\t\tK key = en.getKey();\n\t\t\tnode.entries.put(key, en.getValue());\n\t\t\tNode subnode = lnodes.get(key);\n\t\t\tnode.rnodes.put(prevkey, subnode);\n\t\t\tnode.lnodes.put(key, subnode);\n\t\t\tprevkey = key;\n\t\t}\n\t}\n\n\tMap.Entry<K, V> next;\n\tK key;\n\tif (it.hasNext()) {\n\t\tnext = it.next();\n\t\tkey = next.getKey();\n\t} else {\n\t\tnext = null;\n\t\tkey = null;\n\t}\n\n\tif (lnodes != null) {\n\t\tNode subnode = lnodes.get(key);\n\t\tnode.rnodes.put(prevkey, subnode);\n\t\tnode.lnodes.put(key, subnode);\n\t}\n\tnode.rkey = key;\n\tnextlnodes.put(key, node);\n\n\treturn next;\n}", "path": "src\\plugins\\Library\\util\\BTreeMap.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** {@inheritDoc}\n**\n** This implementation DOCUMENT\n*/\n", "func_signal": "@Override public void pull(Iterable<PullTask<T>> tasks) throws TaskAbortException", "code": "{\n\tkickStart();\n\ttry {\n\t\tList<P> plist = new ArrayList<P>();\n\t\tIterator<PullTask<T>> it = tasks.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tPullTask<T> t = it.next();\n\t\t\tif (t.meta == null) {\n\t\t\t\tthrow new IllegalArgumentException(\"ParallelSerialiser cannot handle pull tasks with null metadata\");\n\t\t\t}\n\n\t\t\tP p = tracker.addPullProgress(t.meta);\n\t\t\tif (p == null) {\n\t\t\t\t// if we are already pushing this, then erase it from the task iterable\n\t\t\t\t// but we still want to wait for the task to finish, so add it to plist\n\t\t\t\tit.remove();\n\t\t\t\tplist.add(tracker.getPullProgress(t.meta));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tplist.add(p);\n\n\t\t\twhile (!queue.offer(t, 1, TimeUnit.SECONDS)) {\n\t\t\t\tstartHandler();\n\t\t\t}\n\t\t}\n\t\t// wait for all tasks to finish\n\t\tjoinAll(plist);\n\n\t} catch (InterruptedException e) {\n\t\tthrow new TaskAbortException(\"ParallelSerialiser pull was interrupted\", e, true);\n\t} finally {\n\t\t// OPTIMISE make ProgressTracker use WeakIdentityHashMap instead\n\t\t// then we'll skip removal for completed (not aborted) tasks\n\t\tfor (PullTask<T> t: tasks) { tracker.remPullProgress(t.data); }\n\t}\n}", "path": "src\\plugins\\Library\\serial\\ParallelSerialiser.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** Returns the canonical {@link Token} for a given string.\n**\n** For even better performance, make sure the string parameter is from the\n** {@link String} internal pool.\n**\n** @see String#intern()\n*/\n", "func_signal": "public static synchronized Token intern(String s)", "code": "{\n\tif (s == null) { return null; }\n\tToken t = internMap.get(s);\n\tif (t == null) {\n\t\tt = Token.intern(new Token(s));\n\t\tinternMap.put(s, t);\n\t}\n\treturn t;\n}", "path": "src\\plugins\\Library\\index\\Token.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** {@inheritDoc}\n**\n** This implementation just descends the tree, returning the value for the\n** given key if it can be found.\n**\n** @throws ClassCastException key cannot be compared with the keys\n**         currently in the map\n** @throws NullPointerException key is {@code null} and this map uses\n**         natural order, or its comparator does not tolerate {@code null}\n**         keys\n*/\n", "func_signal": "@Override public V get(Object k)", "code": "{\n\tK key = (K) k;\n\tNode node = root;\n\n\tfor (;;) {\n\t\tif (node.isLeaf()) {\n\t\t\treturn node.entries.get(key);\n\t\t}\n\n\t\tNode nextnode = node.selectNode(key);\n\t\tif (nextnode == null) {\n\t\t\treturn node.entries.get(key);\n\t\t}\n\n\t\tnode = nextnode;\n\t}\n}", "path": "src\\plugins\\Library\\util\\BTreeMap.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** A compare method with extend semantics, that takes into account the\n** special meaning of {@code null} for the {@link Node#lkey lkey} and\n** {@link Node#rkey rkey} fields.\n**\n** * If both keys are {@code null}, returns 0. Otherwise:\n** * If {@code key1} is {@code null}, it is treated as an {@link Node#lkey\n**   lkey} value, ie. smaller than all other values (method returns -1).\n** * If {@code key2} is {@code null}, it is treated as an {@link Node#rkey\n**   rkey} value, ie. greater than all other values (method returns -1).\n** * Otherwise, neither keys are {@code null}, and are compared normally.\n*/\n", "func_signal": "protected int compare2(K key1, K key2)", "code": "{\n\treturn (key1 == null)? ((key2 == null)? 0: -1):\n\t                       ((key2 == null)? -1: compare(key1, key2));\n}", "path": "src\\plugins\\Library\\util\\BTreeMap.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** Returns the canonical representation of a {@link Token}.\n**\n** @see String#intern()\n*/\n", "func_signal": "public static synchronized Token intern(Token t)", "code": "{\n\tif (t == null) { return null; }\n\tWeakReference<Token> ref = internPool.get(t);\n\tToken tk;\n\tif (ref == null || (tk = ref.get()) == null) {\n\t\t// the referent could still be null, because the GC could have cleared the\n\t\t// weak refs (including the key) between lines 1 and 2 of this method.\n\t\tinternPool.put(t, new WeakReference<Token>(t));\n\t\treturn t;\n\t}\n\treturn tk;\n}", "path": "src\\plugins\\Library\\index\\Token.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/*========================================================================\n  public interface IterableSerialiser\n ========================================================================*/\n", "func_signal": "@Override public void pull(PullTask<T> task) throws TaskAbortException", "code": "{\n\tList<PullTask<T>> thetask = new ArrayList<PullTask<T>>(1);\n\tthetask.add(task);\n\tpull(thetask);\n\tif (thetask.isEmpty()) { throw new TaskCompleteException(\"Already done\"); }\n}", "path": "src\\plugins\\Library\\serial\\ParallelSerialiser.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** {@inheritDoc}\n**\n** This implementation uses the BTree single-pass insertion algorithm. We\n** descend the tree, restructuring it as needed so that we can insert an\n** entry into a leaf.\n**\n** Start at the root node. At each stage of the algorithm, we restructure\n** the tree so that the next node we reach has less than {@link #ENT_MAX}\n** entries, and the insertion can occur without breaking constraints.\n**\n** (*) If the number of entries is {@link #ENT_MAX}, then perform {@link\n** #split(Node, Node) split} on the node. Both the newly created nodes now\n** have less than {@link #ENT_MAX} entries; pick the appropriate halfnode\n** to for the rest of the operation, depending on the original input key.\n**\n** If the node is a leaf, insert the value and stop. Otherwise, if the key\n** is not already in the node, select the appropriate subnode and repeat\n** from (*).\n**\n** Otherwise, replace the value and stop.\n**\n** @throws ClassCastException key cannot be compared with the keys\n**         currently in the map\n** @throws NullPointerException key is {@code null} and this map uses\n**         natural order, or its comparator does not tolerate {@code null}\n**         keys\n*/\n", "func_signal": "@Override public V put(K key, V value)", "code": "{\n\tNode node = root, parent = null;\n\n\tfor (;;) {\n\t\tif (node.size() == ENT_MAX) {\n\t\t\tK median = split(parent, node);\n\t\t\tif (parent == null) { parent = root; }\n\n\t\t\tnode = parent.selectNode(key);\n\t\t\tif (node == null) { return parent.entries.put(key, value); }\n\t\t}\n\t\tassert(node.size() < ENT_MAX);\n\n\t\tif (node.isLeaf()) {\n\t\t\tint sz = node.size();\n\t\t\tV v = node.entries.put(key, value);\n\t\t\t// update size cache\n\t\t\tif (node.size() != sz) { ++size; }\n\t\t\treturn v;\n\t\t}\n\n\t\tNode nextnode = node.selectNode(key);\n\t\tif (nextnode == null) { // key is already in the node\n\t\t\treturn node.entries.put(key, value);\n\t\t}\n\n\t\tparent = node;\n\t\tnode = nextnode;\n\t}\n}", "path": "src\\plugins\\Library\\util\\BTreeMap.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** This method will start a new thread if {@link #maxThreads} allows.\n*/\n", "func_signal": "protected synchronized void startHandler()", "code": "{\n\tif (numThreads >= maxThreads) { return; }\n\t++numThreads;\n\t(new QueueHandler()).start();\n}", "path": "src\\plugins\\Library\\serial\\ParallelSerialiser.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** {@inheritDoc}\n**\n** This implementation iterates over the given map's {@code entrySet},\n** adding each mapping in turn, except for when {@code this} map is empty,\n** and the input map is a non-empty {@link SortedMap}. In this case, it\n** uses the BTree bulk-loading algorithm:\n**\n** * distribute all the entries of the map across the least number of nodes\n**   possible, excluding the entries that will act as separators between\n**   these nodes\n** * repeat for the separator entries, and use them to join the nodes from\n**   the previous level appropriately to form a node at this level\n** * repeat until there are no more entries on a level, at which point use\n**   the (single) node from the previous level as the root\n**\n** (The optimisation is also used if the input map is {@code this}.)\n**\n** @param t mappings to be stored in this map\n*/\n", "func_signal": "@Override public void putAll(Map<? extends K, ? extends V> t)", "code": "{\n\t// t == this to support restructure()\n\tif (t.isEmpty()) {\n\t\treturn;\n\t} else if (t == this || isEmpty() && t instanceof SortedMap) {\n\t\tSortedMap<K, V> map = (SortedMap<K, V>)t, nextmap;\n\t\tMap<K, Node> lnodes = null, nextlnodes;\n\n\t\tif (!(comparator == null && map.comparator() == null || comparator.equals(map.comparator()))) {\n\t\t\tsuper.putAll(map);\n\t\t\treturn;\n\t\t}\n\n\t\twhile (map.size() > 0) {\n\t\t\t// find the smallest k: k * ENT_MAX + (k-1) >= map.size()\n\t\t\t// ie. k * NODE_MAX >= map.size() + 1\n\t\t\t// this is the number of nodes at this level\n\t\t\tint k = (map.size() + NODE_MAX) / NODE_MAX;\n\n\t\t\t// number of entries in each node (or one less than this)\n\t\t\tint n = map.size() / k;\n\t\t\t// how many nodes will have n entries (as opposed to n-1)\n\t\t\tint leftovers = map.size() % k;\n\n\t\t\t// TODO find a better algorithm that distributes the weights\n\t\t\t// more evenly that just \"heaviest first\"\n\t\t\tassert(n >= ENT_MIN);\n\n\t\t\tnextlnodes = new HashMap<K, Node>(k<<1);\n\t\t\tnextmap = new TreeMap<K, V>();\n\n\t\t\tIterator<Map.Entry<K, V>> it = map.entrySet().iterator();\n\t\t\tK prevkey = null;\n\t\t\tint i=0;\n\t\t\tfor (; i<=leftovers; ++i) {\n\t\t\t\t// put n entries into a new leaf\n\t\t\t\tMap.Entry<K, V> en = makeNode(it, n, prevkey, lnodes, nextlnodes);\n\t\t\t\tif (en != null) { nextmap.put(prevkey = en.getKey(), en.getValue()); }\n\t\t\t}\n\t\t\t--n;\n\t\t\tfor (; i<k; ++i) {\n\t\t\t\tMap.Entry<K, V> en = makeNode(it, n, prevkey, lnodes, nextlnodes);\n\t\t\t\tif (en != null) { nextmap.put(prevkey = en.getKey(), en.getValue()); }\n\t\t\t}\n\n\t\t\tlnodes = nextlnodes;\n\t\t\tmap = nextmap;\n\t\t}\n\n\t\tassert(lnodes.size() == 1);\n\t\troot = lnodes.get(null);\n\t\tsize = map.size();\n\n\t} else {\n\t\tsuper.putAll(t);\n\t}\n}", "path": "src\\plugins\\Library\\util\\BTreeMap.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** Returns the MD5 byte array of a String. From XMLLibrarian.\n*/\n", "func_signal": "public static byte[] MD5(String text)", "code": "{\n\ttry {\n\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\t\tbyte[] b = text.getBytes(\"UTF-8\");\n\t\tmd.update(b, 0, b.length);\n\t\treturn md.digest();\n\t} catch (java.security.NoSuchAlgorithmException e) {\n\t\tthrow new RuntimeException(e);\n\t} catch (java.io.UnsupportedEncodingException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n}", "path": "src\\plugins\\Library\\index\\Token.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** Given a group of progresses, waits for them to all finish. Non-error\n** aborts are caught and ignored (and the task removed from the group);\n** error aborts are re-thrown.\n**\n** Note: the iterator for the group must support the {@link\n** Iterator#remove()} method.\n*/\n", "func_signal": "protected void joinAll(Iterable<P> plist) throws InterruptedException, TaskAbortException", "code": "{\n\tIterator<P> it = plist.iterator();\n\twhile (it.hasNext()) {\n\t\tP p = it.next();\n\t\ttry {\n\t\t\tp.join();\n\t\t} catch (TaskAbortException e) {\n\t\t\tif (e.isError()) {\n\t\t\t\tthrow e;\n\t\t\t} else {\n\t\t\t\t// TODO perhaps have a handleNonErrorAbort() that can be overridden\n\t\t\t\tit.remove();\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\plugins\\Library\\serial\\ParallelSerialiser.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n** Merge two minimal child nodes into a maximal node, using the key that\n** separates them in the parent as the key that joins the halfnodes in the\n** merged node. If the parent is the {@link #root} and the merge makes it\n** empty, point {@code root} to the new merged node.\n**\n** Note: This method assumes that both childs are actual subnodes of the\n** parent, that they are adjacent in the parent, and that they are actually\n** minimally full. It is up to the calling code to ensure that this holds.\n**\n** The exact implementation of this may change from time to time, so the\n** calling code should regard both input subnodes as effectively destroyed,\n** and re-get the desired result subnode from calling the appropriate\n** get methods on the parent node.\n**\n** @param parent The node to (re)attach the merge node to.\n** @param lnode The smaller subnode to merge\n** @param rnode The greater subnode to merge\n*/\n", "func_signal": "private K merge(Node parent, Node lnode, Node rnode)", "code": "{\n\tassert(compare(lnode.rkey, rnode.lkey) == 0); // not compare2 since can't be at edges\n\tassert(lnode.isLeaf() && rnode.isLeaf() || !lnode.isLeaf() && !rnode.isLeaf());\n\tassert(lnode.size() == ENT_MIN);\n\tassert(rnode.size() == ENT_MIN);\n\tassert(parent == root && parent.size() > 0\n\t                      || parent.size() > ENT_MIN);\n\tassert(!parent.isLeaf() && parent.rnodes.get(lnode.rkey) == rnode\n\t                      && parent.lnodes.get(rnode.lkey) == lnode);\n\n\tK mkey = rnode.lkey; // same as lnode.rkey;\n\n\tif (rnode.isLeaf()) {\n\t\t// this is just the same as the code in the else block, but with leaf\n\t\t// references to rnodes and lnodes removed (since they are null)\n\t\trnode.entries.putAll(lnode.entries);\n\n\t\trnode.entries.put(mkey, parent.entries.remove(mkey));\n\t\trnode.lkey = lnode.lkey;\n\n\t\tparent.rnodes.remove(mkey);\n\t\tparent.lnodes.remove(mkey);\n\t\tparent.rnodes.put(lnode.lkey, rnode);\n\n\t} else {\n\t\trnode.entries.putAll(lnode.entries);\n\t\trnode.lnodes.putAll(lnode.lnodes);\n\t\trnode.rnodes.putAll(lnode.rnodes);\n\n\t\trnode.entries.put(mkey, parent.entries.remove(mkey));\n\t\trnode.lnodes.put(mkey, lnode.lnodes.get(mkey));\n\t\trnode.rnodes.put(lnode.lkey, lnode.rnodes.get(lnode.lkey));\n\t\trnode.lkey = lnode.lkey;\n\n\t\tparent.rnodes.remove(mkey);\n\t\tparent.lnodes.remove(mkey);\n\t\tparent.rnodes.put(lnode.lkey, rnode);\n\n\t}\n\n\tif (parent == root && parent.entries.isEmpty()) {\n\t\tassert(parent.lkey == null && parent.rkey == null\n\t\t    && rnode.lkey == null && rnode.rkey == null);\n\t\troot = rnode;\n\t}\n\n\tassert(parent.rnodes.get(rnode.lkey) == rnode);\n\tassert(parent.lnodes.get(rnode.rkey) == rnode);\n\treturn mkey;\n}", "path": "src\\plugins\\Library\\util\\BTreeMap.java", "repo_name": "platy/plugin-Library-staging", "stars": 1, "license": "None", "language": "java", "size": 696}
{"docstring": "/**\n * Adds a membership listener to the channel.<br>\n * Membership listeners are uniquely identified using the equals(Object) method\n * @param membershipListener MembershipListener\n */\n", "func_signal": "public void addMembershipListener(MembershipListener membershipListener)", "code": "{\n    if (!this.membershipListeners.contains(membershipListener) )\n        this.membershipListeners.add(membershipListener);\n}", "path": "java\\org\\apache\\catalina\\tribes\\group\\GroupChannel.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n * Validates the option flags that each interceptor is using and reports\n * an error if two interceptor share the same flag.\n * @throws ChannelException\n */\n", "func_signal": "protected void checkOptionFlags() throws ChannelException", "code": "{\n    StringBuffer conflicts = new StringBuffer();\n    ChannelInterceptor first = interceptors;\n    while ( first != null ) {\n        int flag = first.getOptionFlag();\n        if ( flag != 0 ) {\n            ChannelInterceptor next = first.getNext();\n            while ( next != null ) {\n                int nflag = next.getOptionFlag();\n                if (nflag!=0 && (((flag & nflag) == flag ) || ((flag & nflag) == nflag)) ) {\n                    conflicts.append(\"[\");\n                    conflicts.append(first.getClass().getName());\n                    conflicts.append(\":\");\n                    conflicts.append(flag);\n                    conflicts.append(\" == \");\n                    conflicts.append(next.getClass().getName());\n                    conflicts.append(\":\");\n                    conflicts.append(nflag);\n                    conflicts.append(\"] \");\n                }//end if\n                next = next.getNext();\n            }//while\n        }//end if\n        first = first.getNext();\n    }//while\n    if ( conflicts.length() > 0 ) throw new ChannelException(\"Interceptor option flag conflict: \"+conflicts.toString());\n\n}", "path": "java\\org\\apache\\catalina\\tribes\\group\\GroupChannel.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n * Returns the first interceptor of the stack. Useful for traversal.\n * @return ChannelInterceptor\n */\n", "func_signal": "public ChannelInterceptor getFirstInterceptor()", "code": "{\n    if (interceptors != null) return interceptors;\n    else return coordinator;\n}", "path": "java\\org\\apache\\catalina\\tribes\\group\\GroupChannel.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n * Callback from the interceptor stack. <br>\n * When a message is received from a remote node, this method will be invoked by\n * the previous interceptor.<br>\n * This method can also be used to send a message to other components within the same application,\n * but its an extreme case, and you're probably better off doing that logic between the applications itself.\n * @param msg ChannelMessage\n */\n", "func_signal": "public void messageReceived(ChannelMessage msg)", "code": "{\n    if ( msg == null ) return;\n    try {\n        if ( Logs.MESSAGES.isTraceEnabled() ) {\n            Logs.MESSAGES.trace(\"GroupChannel - Received msg:\" + new UniqueId(msg.getUniqueId()) + \" at \" +new java.sql.Timestamp(System.currentTimeMillis())+ \" from \"+msg.getAddress().getName());\n        }\n\n        Serializable fwd = null;\n        if ( (msg.getOptions() & SEND_OPTIONS_BYTE_MESSAGE) == SEND_OPTIONS_BYTE_MESSAGE ) {\n            fwd = new ByteMessage(msg.getMessage().getBytes());\n        } else {\n            try {\n                fwd = XByteBuffer.deserialize(msg.getMessage().getBytesDirect(), 0, msg.getMessage().getLength());\n            }catch (Exception sx) {\n                log.error(\"Unable to deserialize message:\"+msg,sx);\n                return;\n            }\n        }\n        if ( Logs.MESSAGES.isTraceEnabled() ) {\n            Logs.MESSAGES.trace(\"GroupChannel - Receive Message:\" + new UniqueId(msg.getUniqueId()) + \" is \" +fwd);\n        }\n\n        //get the actual member with the correct alive time\n        Member source = msg.getAddress();\n        boolean rx = false;\n        boolean delivered = false;\n        for ( int i=0; i<channelListeners.size(); i++ ) {\n            ChannelListener channelListener = (ChannelListener)channelListeners.get(i);\n            if (channelListener != null && channelListener.accept(fwd, source)) {\n                channelListener.messageReceived(fwd, source);\n                delivered = true;\n                //if the message was accepted by an RPC channel, that channel\n                //is responsible for returning the reply, otherwise we send an absence reply\n                if ( channelListener instanceof RpcChannel ) rx = true;\n            }\n        }//for\n        if ((!rx) && (fwd instanceof RpcMessage)) {\n            //if we have a message that requires a response,\n            //but none was given, send back an immediate one\n            sendNoRpcChannelReply((RpcMessage)fwd,source);\n        }\n        if ( Logs.MESSAGES.isTraceEnabled() ) {\n            Logs.MESSAGES.trace(\"GroupChannel delivered[\"+delivered+\"] id:\"+new UniqueId(msg.getUniqueId()));\n        }\n\n    } catch ( Exception x ) {\n        //this could be the channel listener throwing an exception, we should log it \n        //as a warning.\n        if ( log.isWarnEnabled() ) log.warn(\"Error receiving message:\",x);\n        throw new RemoteProcessException(\"Exception:\"+x.getMessage(),x);\n    }\n}", "path": "java\\org\\apache\\catalina\\tribes\\group\\GroupChannel.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n * Open the new log file for the date specified by <code>dateStamp</code>.\n */\n", "func_signal": "protected synchronized void open()", "code": "{\n    super.open();\n    if (currentLogFile.length()==0) {\n        writer.println(\"#Fields: \" + pattern);\n        writer.println(\"#Version: 2.0\");\n        writer.println(\"#Software: \" + ServerInfo.getServerInfo());\n    }\n}", "path": "java\\org\\apache\\catalina\\valves\\ExtendedAccessLogValve.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n * Sets up the default implementation interceptor stack\n * if no interceptors have been added\n * @throws ChannelException\n */\n", "func_signal": "protected synchronized void setupDefaultStack() throws ChannelException", "code": "{\n\n    if ( getFirstInterceptor() != null &&\n         ((getFirstInterceptor().getNext() instanceof ChannelCoordinator))) {\n        ChannelInterceptor interceptor = null;\n        Class clazz = null;\n        try {\n            clazz = Class.forName(\"org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor\",\n                                  true,GroupChannel.class.getClassLoader());\n            clazz.newInstance();\n        } catch ( Throwable x ) {\n            clazz = MessageDispatchInterceptor.class;\n        }//catch\n        try {\n            interceptor = (ChannelInterceptor) clazz.newInstance();\n        } catch (Exception x) {\n            throw new ChannelException(\"Unable to add MessageDispatchInterceptor to interceptor chain.\",x);\n        }\n        this.addInterceptor(interceptor);\n    }\n}", "path": "java\\org\\apache\\catalina\\tribes\\group\\GroupChannel.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n *\n * @param destination Member[] - destination.length > 1\n * @param msg Serializable - the message to send\n * @param options int - sender options, options can trigger guarantee levels and different interceptors to\n * react to the message see class documentation for the <code>Channel</code> object.<br>\n * @param handler - callback object for error handling and completion notification, used when a message is\n * sent asynchronously using the <code>Channel.SEND_OPTIONS_ASYNCHRONOUS</code> flag enabled.\n * @return UniqueId - the unique Id that was assigned to this message\n * @throws ChannelException - if an error occurs processing the message\n * @see org.apache.catalina.tribes.Channel\n */\n", "func_signal": "public UniqueId send(Member[] destination, Serializable msg, int options, ErrorHandler handler) throws ChannelException", "code": "{\n    if ( msg == null ) throw new ChannelException(\"Cant send a NULL message\");\n    XByteBuffer buffer = null;\n    try {\n        if ( destination == null || destination.length == 0) throw new ChannelException(\"No destination given\");\n        ChannelData data = new ChannelData(true);//generates a unique Id\n        data.setAddress(getLocalMember(false));\n        data.setTimestamp(System.currentTimeMillis());\n        byte[] b = null;\n        if ( msg instanceof ByteMessage ){\n            b = ((ByteMessage)msg).getMessage();\n            options = options | SEND_OPTIONS_BYTE_MESSAGE;\n        } else {\n            b = XByteBuffer.serialize(msg);\n            options = options & (~SEND_OPTIONS_BYTE_MESSAGE);\n        }\n        data.setOptions(options);\n        //XByteBuffer buffer = new XByteBuffer(b.length+128,false);\n        buffer = BufferPool.getBufferPool().getBuffer(b.length+128, false);\n        buffer.append(b,0,b.length);\n        data.setMessage(buffer);\n        InterceptorPayload payload = null;\n        if ( handler != null ) {\n            payload = new InterceptorPayload();\n            payload.setErrorHandler(handler);\n        }\n        getFirstInterceptor().sendMessage(destination, data, payload);\n        if ( Logs.MESSAGES.isTraceEnabled() ) {\n            Logs.MESSAGES.trace(\"GroupChannel - Sent msg:\" + new UniqueId(data.getUniqueId()) + \" at \" +new java.sql.Timestamp(System.currentTimeMillis())+ \" to \"+Arrays.toNameString(destination));\n            Logs.MESSAGES.trace(\"GroupChannel - Send Message:\" + new UniqueId(data.getUniqueId()) + \" is \" +msg);\n        }\n\n        return new UniqueId(data.getUniqueId());\n    }catch ( Exception x ) {\n        if ( x instanceof ChannelException ) throw (ChannelException)x;\n        throw new ChannelException(x);\n    } finally {\n        if ( buffer != null ) BufferPool.getBufferPool().returnBuffer(buffer);\n    }\n}", "path": "java\\org\\apache\\catalina\\tribes\\group\\GroupChannel.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n *  Wrap the incoming value into quotes and escape any inner\n *  quotes with double quotes.\n *\n *  @param value - The value to wrap quotes around\n *  @return '-' if empty of null. Otherwise, toString() will\n *     be called on the object and the value will be wrapped\n *     in quotes and any quotes will be escaped with 2\n *     sets of quotes.\n */\n", "func_signal": "private String wrap(Object value)", "code": "{\n    String svalue;\n    // Does the value contain a \" ? If so must encode it\n    if (value == null || \"-\".equals(value))\n        return \"-\";\n\n    try {\n        svalue = value.toString();\n        if (\"\".equals(svalue))\n            return \"-\";\n    } catch (Throwable e) {\n        /* Log error */\n        return \"-\";\n    }\n\n    /* Wrap all quotes in double quotes. */\n    StringBuffer buffer = new StringBuffer(svalue.length() + 2);\n    buffer.append('\\'');\n    int i = 0;\n    while (i < svalue.length()) {\n        int j = svalue.indexOf('\\'', i);\n        if (j == -1) {\n            buffer.append(svalue.substring(i));\n            i = svalue.length();\n        } else {\n            buffer.append(svalue.substring(i, j + 1));\n            buffer.append('\"');\n            i = j + 2;\n        }\n    }\n\n    buffer.append('\\'');\n    return buffer.toString();\n}", "path": "java\\org\\apache\\catalina\\valves\\ExtendedAccessLogValve.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n * Return a String representation of this object, which exposes only\n * information that should be public.\n */\n", "func_signal": "public String toString()", "code": "{\n\n    StringBuffer sb = new StringBuffer(\"CoyotePrincipal[\");\n    sb.append(this.name);\n    sb.append(\"]\");\n    return (sb.toString());\n\n}", "path": "java\\org\\apache\\catalina\\connector\\CoyotePrincipal.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n * Adds an interceptor to the stack for message processing<br>\n * Interceptors are ordered in the way they are added.<br>\n * <code>channel.addInterceptor(A);</code><br>\n * <code>channel.addInterceptor(C);</code><br>\n * <code>channel.addInterceptor(B);</code><br>\n * Will result in a interceptor stack like this:<br>\n * <code>A -> C -> B</code><br>\n * The complete stack will look like this:<br>\n * <code>Channel -> A -> C -> B -> ChannelCoordinator</code><br>\n * @param interceptor ChannelInterceptorBase\n */\n", "func_signal": "public void addInterceptor(ChannelInterceptor interceptor)", "code": "{\n    if ( interceptors == null ) {\n        interceptors = interceptor;\n        interceptors.setNext(coordinator);\n        interceptors.setPrevious(null);\n        coordinator.setPrevious(interceptors);\n    } else {\n        ChannelInterceptor last = interceptors;\n        while ( last.getNext() != coordinator ) {\n            last = last.getNext();\n        }\n        last.setNext(interceptor);\n        interceptor.setNext(coordinator);\n        interceptor.setPrevious(last);\n        coordinator.setPrevious(interceptor);\n    }\n}", "path": "java\\org\\apache\\catalina\\tribes\\group\\GroupChannel.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n * Utility method that determines whether the request contains multipart\n * content.\n *\n * @param req The servlet request to be evaluated. Must be non-null.\n *\n * @return <code>true</code> if the request is multipart;\n *         <code>false</code> otherwise.\n */\n", "func_signal": "public static final boolean isMultipartContent(HttpServletRequest req)", "code": "{\n    String contentType = req.getHeader(CONTENT_TYPE);\n    if (contentType == null)\n    {\n        return false;\n    }\n    if (contentType.startsWith(MULTIPART))\n    {\n        return true;\n    }\n    return false;\n}", "path": "java\\org\\apache\\tomcat\\util\\http\\fileupload\\FileUploadBase.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n * Sends a <code>NoRpcChannelReply</code> message to a member<br>\n * This method gets invoked by the channel if a RPC message comes in\n * and no channel listener accepts the message. This avoids timeout\n * @param msg RpcMessage\n * @param destination Member - the destination for the reply\n */\n", "func_signal": "protected void sendNoRpcChannelReply(RpcMessage msg, Member destination)", "code": "{\n    try {\n        //avoid circular loop\n        if ( msg instanceof RpcMessage.NoRpcChannelReply) return;\n        RpcMessage.NoRpcChannelReply reply = new RpcMessage.NoRpcChannelReply(msg.rpcId,msg.uuid);\n        send(new Member[]{destination},reply,Channel.SEND_OPTIONS_ASYNCHRONOUS);\n    } catch ( Exception x ) {\n        log.error(\"Unable to find rpc channel, failed to send NoRpcChannelReply.\",x);\n    }\n}", "path": "java\\org\\apache\\catalina\\tribes\\group\\GroupChannel.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n * Adds a channel listener to the channel.<br>\n * Channel listeners are uniquely identified using the equals(Object) method\n * @param channelListener ChannelListener\n */\n", "func_signal": "public void addChannelListener(ChannelListener channelListener)", "code": "{\n    if (!this.channelListeners.contains(channelListener) ) {\n        this.channelListeners.add(channelListener);\n    } else {\n        throw new IllegalArgumentException(\"Listener already exists:\"+channelListener+\"[\"+channelListener.getClass().getName()+\"]\");\n    }\n}", "path": "java\\org\\apache\\catalina\\tribes\\group\\GroupChannel.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n *  urlEncode the given string. If null or empty, return null.\n */\n", "func_signal": "private String urlEncode(String value)", "code": "{\n    if (null==value || value.length()==0) {\n        return null;\n    }\n    return URLEncoder.encode(value);\n}", "path": "java\\org\\apache\\catalina\\valves\\ExtendedAccessLogValve.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n * Sends a heartbeat through the interceptor stack.<br>\n * Invoke this method from the application on a periodic basis if\n * you have turned off internal heartbeats <code>channel.setHeartbeat(false)</code>\n */\n", "func_signal": "public void heartbeat()", "code": "{\n    super.heartbeat();\n    Iterator i = membershipListeners.iterator();\n    while ( i.hasNext() ) {\n        Object o = i.next();\n        if ( o instanceof Heartbeat ) ((Heartbeat)o).heartbeat();\n    }\n    i = channelListeners.iterator();\n    while ( i.hasNext() ) {\n        Object o = i.next();\n        if ( o instanceof Heartbeat ) ((Heartbeat)o).heartbeat();\n    }\n\n}", "path": "java\\org\\apache\\catalina\\tribes\\group\\GroupChannel.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n * Stops the channel\n * @param svc int\n * @throws ChannelException\n * @see org.apache.catalina.tribes.Channel#stop(int)\n */\n", "func_signal": "public synchronized void stop(int svc) throws ChannelException", "code": "{\n    if (hbthread != null) {\n        hbthread.stopHeartbeat();\n        hbthread = null;\n    }\n    super.stop(svc);\n}", "path": "java\\org\\apache\\catalina\\tribes\\group\\GroupChannel.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n * @todo Fix to create an automatically growing buffer.\n * @param data byte[]\n * @return byte[]\n * @throws IOException\n */\n", "func_signal": "public static byte[] decompress(byte[] data) throws IOException", "code": "{\n    ByteArrayInputStream bin = new ByteArrayInputStream(data);\n    GZIPInputStream gin = new GZIPInputStream(bin);\n    byte[] tmp = new byte[DEFAULT_BUFFER_SIZE];\n    int length = gin.read(tmp);\n    byte[] result = new byte[length];\n    System.arraycopy(tmp,0,result,0,length);\n    return result;\n}", "path": "java\\org\\apache\\catalina\\tribes\\group\\interceptors\\GzipInterceptor.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n * memberDisappeared gets invoked by the interceptor below the channel\n * and the channel will broadcast it to the membership listeners\n * @param member Member - the member that left or crashed\n */\n", "func_signal": "public void memberDisappeared(Member member)", "code": "{\n    //notify upwards\n    for (int i=0; i<membershipListeners.size(); i++ ) {\n        MembershipListener membershipListener = (MembershipListener)membershipListeners.get(i);\n        if (membershipListener != null) membershipListener.memberDisappeared(member);\n    }\n}", "path": "java\\org\\apache\\catalina\\tribes\\group\\GroupChannel.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n * Starts the channel\n * @param svc int - what service to start\n * @throws ChannelException\n * @see org.apache.catalina.tribes.Channel#start(int)\n */\n", "func_signal": "public synchronized void start(int svc) throws ChannelException", "code": "{\n    setupDefaultStack();\n    if (optionCheck) checkOptionFlags();\n    super.start(svc);\n    if ( hbthread == null && heartbeat ) {\n        hbthread = new HeartbeatThread(this,heartbeatSleeptime);\n        hbthread.start();\n    }\n}", "path": "java\\org\\apache\\catalina\\tribes\\group\\GroupChannel.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "/**\n * memberAdded gets invoked by the interceptor below the channel\n * and the channel will broadcast it to the membership listeners\n * @param member Member - the new member\n */\n", "func_signal": "public void memberAdded(Member member)", "code": "{\n    //notify upwards\n    for (int i=0; i<membershipListeners.size(); i++ ) {\n        MembershipListener membershipListener = (MembershipListener)membershipListeners.get(i);\n        if (membershipListener != null) membershipListener.memberAdded(member);\n    }\n}", "path": "java\\org\\apache\\catalina\\tribes\\group\\GroupChannel.java", "repo_name": "fakechris/TomCatUdp", "stars": 1, "license": "apache-2.0", "language": "java", "size": 4156}
{"docstring": "// Traversal ////////////////////////////////\n", "func_signal": "public void doTable(Parse table)", "code": "{\n    super.doTable(table);\n    table.parts.parts.last().more = td(\"time\");\n    table.parts.parts.last().more = td(\"split\");\n}", "path": "fit-action-debugger\\src\\main\\java\\fit\\TimedActionFixture.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "// public void verifyCookiePresent(Argument selektor, Argument arg)\n// {\n// String text = selektor.text();\n// if (selenium.isCookiePresent(text))\n// {\n// right(selektor);\n// }\n// else\n// {\n// wrong(selektor.getCell(), text + \" is not present on site\");\n// }\n// }\n", "func_signal": "public void assertAlert(Argument selektor, Argument arg)", "code": "{\n  verifyAlertPresent(selektor, arg);\n  if (!selektor.isRight())\n  {\n    setStop(true);\n  }\n}", "path": "fit-extension\\src\\main\\java\\fit\\ContextSeleniumFixture.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "// Traversal ////////////////////////////////\n", "func_signal": "public void doRows(Parse rows)", "code": "{\n    bind(rows.parts);\n    super.doRows(rows.more);\n}", "path": "fit-action-debugger\\src\\main\\java\\fit\\ColumnFixture.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "// public void assertConfirmation(Argument selektor, Argument arg)\n// {\n// // TODO\n// }\n//\n// public void assertEval(Argument selektor, Argument arg)\n// {\n// // TODO\n// }\n", "func_signal": "public void waitForTextPresent(Argument selektor, Argument arg)", "code": "{\n  Wait x = new WaitForTextToAppear(selektor.text());\n  x.wait(\"Cannot find text \" + selektor.text() + \" after \" + defaultTimeout\n      + \" seconds\", defaultTimeout * 1000);\n}", "path": "fit-extension\\src\\main\\java\\fit\\ContextSeleniumFixture.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "/* Added by Rick Mugridge, Feb 2005 */\n", "func_signal": "protected static int findMatchingEndTag(String lc, int matchFromHere, String tag, int offset) throws ParseException", "code": "{\n\tint fromHere = matchFromHere;\n\tint count = 1;\n\tint startEnd = 0;\n\twhile (count > 0) {\n\t\tint embeddedTag = lc.indexOf(\"<\" + tag, fromHere);\n\t\tint embeddedTagEnd = lc.indexOf(\"</\" + tag, fromHere);\n\t\t// Which one is closer?\n\t\tif (embeddedTag < 0 && embeddedTagEnd < 0)\n\t\t\tthrow new ParseException(\"Can't find tag: \" + tag, offset);\n\t\tif (embeddedTag < 0)\n\t\t\tembeddedTag = Integer.MAX_VALUE;\n\t\tif (embeddedTagEnd < 0)\n\t\t\tembeddedTagEnd = Integer.MAX_VALUE;\n\t\tif (embeddedTag < embeddedTagEnd) {\n\t\t\tcount++;\n\t\t\tstartEnd = embeddedTag;\n\t\t\tfromHere = lc.indexOf(\">\", embeddedTag) + 1;\n\t\t}\n\t\telse if (embeddedTagEnd < embeddedTag) {\n\t\t\tcount--;\n\t\t\tstartEnd = embeddedTagEnd;\n\t\t\tfromHere = lc.indexOf(\">\", embeddedTagEnd) + 1;\n\t\t}\n\t}\n\treturn startEnd;\n}", "path": "fit-action-debugger\\src\\main\\java\\fit\\Parse.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "// Utility //////////////////////////////////\n", "func_signal": "protected void bind (Parse heads)", "code": "{\n    columnBindings = new TypeAdapter[heads.size()];\n    for (int i=0; heads!=null; i++, heads=heads.more) {\n        String name = heads.text();\n        String suffix = \"()\";\n        try {\n            if (name.equals(\"\")) {\n                columnBindings[i] = null;\n            } else if (name.endsWith(suffix)) {\n                columnBindings[i] = bindMethod(name.substring(0,name.length()-suffix.length()));\n            } else {\n                columnBindings[i] = bindField(name);\n            }\n        }\n        catch (Exception e) {\n            exception (heads, e);\n        }\n    }\n\n}", "path": "fit-action-debugger\\src\\main\\java\\fit\\ColumnFixture.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "/**\n * Markiert die gegebene Selenim Zelle (arg) als Falsch.\n * Ist actual {@code null} wird \"null\" weggeschrieben. In allen anderen \n * fllen wird toString auf actual gerufen.   \n */\n", "func_signal": "protected void wrong(Argument arg, Object actual)", "code": "{\n  arg.setWrong(true);\n  if (actual == null)\n  {\n    wrong(arg.getCell(), \"null\");\n  }\n  else\n  {\n    wrong(arg.getCell(), actual.toString());\n  }\n\n}", "path": "fit-extension\\src\\main\\java\\fit\\ArgumentFixture.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "/* Added by Rick Mugridge to allow a dispatch into DoFixture */\n", "func_signal": "protected void interpretTables(Parse tables)", "code": "{\n  \t\ttry { // Don't create the first fixture again, because creation may do something important.\n  \t\t\tgetArgsForTable(tables); // get them again for the new fixture object\n  \t\t\tdoTable(tables);\n  \t\t} catch (Exception ex) {\n  \t\t\texception(fixtureName(tables), ex);\n  \t\t\treturn;\n  \t\t}\n  \t\tinterpretFollowingTables(tables);\n  \t}", "path": "fit-action-debugger\\src\\main\\java\\fit\\Fixture.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "/**\n * \n */\n", "func_signal": "protected void addInputDirectoryAsMavenResourceFolder()", "code": "{\n  Resource res = new Resource();\n  res.setDirectory(inputDirectory);\n  res.addExclude(\"**/*.java\");\n  res.addInclude(\"*.ignoreAll\");\n  project.addTestResource(res);\n}", "path": "maven-fit-transformer\\src\\main\\java\\net\\sourceforge\\xmlfit\\plugin\\XMLFitMojo.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "/* Added by Rick Mugridge, from FitNesse */\n", "func_signal": "protected void getArgsForTable(Parse table)", "code": "{\n    ArrayList argumentList = new ArrayList();\n    Parse parameters = table.parts.parts.more;\n    for (; parameters != null; parameters = parameters.more)\n        argumentList.add(parameters.text());\n    args = (String[]) argumentList.toArray(new String[0]);\n}", "path": "fit-action-debugger\\src\\main\\java\\fit\\Fixture.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "/**\n * Callback when text() is called, and could be replaced\n * \n * @param value\n * @param index\n * @return\n */\n", "func_signal": "public String replace(String value, int index)", "code": "{\n  if (index == 1) // Nur selekor ersetzen\n  {\n    String newValue = getMapping().get(value);\n    if (newValue != null)\n    {\n      return newValue;\n    }\n  }\n  if (value.equals(SPECIAL_EMPTY))\n  {\n    return \"\";\n  }\n  if (value.equals(SPECIAL_NULL))\n  {\n    return null;\n  }\n  return value;\n}", "path": "fit-extension\\src\\main\\java\\fit\\AliasFixture.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "/* Added by Rick Mugridge */\n", "func_signal": "private void interpretFollowingTables(Parse tables)", "code": "{\n    //listener.tableFinished(tables);\n        tables = tables.more;\n    while (tables != null) {\n        Parse fixtureName = fixtureName(tables);\n        if (fixtureName != null) {\n            try {\n                Fixture fixture = getLinkedFixtureWithArgs(tables);\n                fixture.doTable(tables);\n            } catch (Throwable e) {\n                exception(fixtureName, e);\n\t\t        }\n\t\t    }\n        //listener.tableFinished(tables);\n        tables = tables.more;\n    }\n}", "path": "fit-action-debugger\\src\\main\\java\\fit\\Fixture.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "// TODO: Refactoring execute methode in smaller pices\n", "func_signal": "public void execute() throws MojoExecutionException, MojoFailureException", "code": "{\n  final String executionParameters = MessageFormat.format(\n      EXECUTION_PARAMETERS, new Object[] {sourceDirectory,\n          Boolean.valueOf(caseSensitive), sourceIncludes, sourceExcludes,\n          Arrays.asList(parseTags), outputDirectory,\n          Boolean.valueOf(ignoreFailures)});\n  getLog()\n      .debug(\"Executing FitRunner with parameters \" + executionParameters);\n\n  String runOnlyID = System.getProperty(ENV_RUN_TEST_WITH_ID);\n\n  if (runOnlyID == null) // Also accept lowercase Version\n  {\n    runOnlyID = System.getProperty(ENV_RUN_TEST_WITH_ID.toLowerCase());\n  }\n  if (runOnlyID != null)\n  {\n    getLog().info(\n        \"Detected environment Variable \" + ENV_RUN_TEST_WITH_ID + \" is \"\n            + runOnlyID);\n    sourceIncludes = \"**/*\" + runOnlyID + \"*\";\n    getLog().info(\"Therefore sourceIncludes are now = \" + sourceIncludes);\n  }\n\n  String runWithGUI = System.getProperty(ENV_RUN_WITH_GUI);\n  if (runWithGUI != null)\n  {\n    if (runWithGUI.equals(\"true\"))\n    {\n      displayGUI = true;\n      getGUI();\n    }\n  }\n\n  try\n  {\n    getLog().debug(\"sourceDirectory : \" + sourceDirectory);\n    getLog().debug(\"sourceIncludes : \" + sourceIncludes);\n    getLog().debug(\"sourceExcludes : \" + sourceExcludes);\n    getLog().debug(\"outputDirectory : \" + outputDirectory);\n \n    String[] listFiles = listFiles(sourceDirectory, caseSensitive,\n        sourceIncludes, sourceExcludes);\n\n    createOutputDirectory();\n\n    FixtureClassLoader classLoader = createClassLoader();\n    Thread.currentThread().setContextClassLoader(classLoader);\n\n    StringBuffer resultHtml = new StringBuffer();\n    fileCount(listFiles.length);\n    for (int i = 0; i < listFiles.length; i++)\n    {\n      String fileName = listFiles[i];\n      FileRunner fileRunner = new FileRunner();\n\n      getLog().info(\"Run FIT : \");\n      getLog().info(fileName);\n      String[] argv = new String[] {sourceDirectory + \"/\" + fileName,\n          outputDirectory + \"/\" + fileName};\n      fileRunner.args(argv);\n      fileRunner.process();\n      fileRunner.output.close();\n\n      counts.tally(fileRunner.fixture.counts);\n      updateStatusDisplay(counts, fileName,i,fileRunner.fixture.counts);\n\n      resultHtml.append(\"<tr>\");\n      resultHtml.append(\"<td>\");\n      resultHtml.append(\"<a href=\\\"\" + fileName + \"\\\">\" + outputDirectory\n          + \"/\" + fileName + \"</a>\");\n      resultHtml.append(\"</td>\");\n\n      if (fileRunner.fixture.counts.exceptions > 0)\n      {\n        // yellow\n        resultHtml.append(\"<td bgcolor=\\\"#ffffcf\\\">\");\n      }\n      else if (fileRunner.fixture.counts.wrong > 0)\n      {\n        // red\n        resultHtml.append(\"<td bgcolor=\\\"#ffcfcf\\\">\");\n      }\n      else\n      {\n        // green\n        resultHtml.append(\"<td bgcolor=\\\"#cfffcf\\\" >\");\n      }\n\n      resultHtml.append(fileRunner.fixture.counts());\n      resultHtml.append(\"</td>\");\n      resultHtml.append(\"</tr>\");\n\n      getLog().info(fileRunner.fixture.counts());\n    }\n    FileWriter fileWriter = new FileWriter(outputDirectory + \"/result.html\",\n        false);\n    fileWriter.append(\"<html>\");\n    fileWriter.append(\"<body>\");\n    fileWriter.append(\"<h1> Results </h1>\");\n    fileWriter.append(\"<table border=\\\"1\\\">\");\n    fileWriter.append(\"<tr>\");\n    if (counts.exceptions > 0)\n    {\n      // green\n      fileWriter.append(\"<td bgcolor=\\\"#ffffcf\\\">\");\n    }\n    else if (counts.wrong > 0)\n    {\n      // red\n      fileWriter.append(\"<td bgcolor=\\\"#ffcfcf\\\">\");\n    }\n    else\n    {\n      // green\n      fileWriter.append(\"<td bgcolor=\\\"#cfffcf\\\" >\");\n    }\n\n    fileWriter.append(counts.toString());\n    fileWriter.append(\"</td>\");\n    fileWriter.append(\"</tr>\");\n    fileWriter.append(\"</table>\");\n\n    fileWriter.append(\"<h1> Details </h1>\");\n    fileWriter.append(\"<table border=\\\"1\\\">\");\n    fileWriter.append(resultHtml.toString());\n    fileWriter.append(\"</table>\");\n\n    fileWriter.append(\"</body>\");\n    fileWriter.close();\n  }\n  catch (Exception e)\n  {\n    throw new MojoExecutionException(\n        \"Failed to execute FitRunner with parameters \" + executionParameters,\n        e);\n  }\n\n  getLog().info(\"\");\n  getLog().info(\"----------------------------------------\");\n  getLog().info(\"\");\n  getLog().info(\"Result - FIT TESTS : \");\n  getLog().info(\"\");\n  getLog().info(counts.toString());\n  getLog().info(\"\");\n  getLog().info(\"----------------------------------------\");\n  getLog().info(\"\");\n\n  if (counts.exceptions > 0 || counts.wrong > 0)\n  {\n    throw new MojoFailureException(\"Errors in FIT Tests\");\n  }\n\n}", "path": "maven-fit-plugin\\src\\main\\java\\net\\sourceforge\\xmlfit\\mojo\\fit\\FitRunnerMojo.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "// Populate /////////////////////////////////\n", "func_signal": "protected void populate()", "code": "{\n    doAllVars();\n    doAllVarPairs();\n}", "path": "fit-action-debugger\\src\\test\\java\\eg\\AllPairs.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "/**\n * Produces a List of Files which match the given patterns.\n * \n * @param sourceDirectory Root folder of all files\n * \n * @param caseSensitive if filenames should be case sensitive\n * \n * @param sourceIncludes include filename patterns\n * \n * @param sourceExcludes exclude filename patterns\n * \n * @return List of files matching include and exclude pattern.\n */\n", "func_signal": "protected String[] listFiles(String sourceDirectory, boolean caseSensitive,\n    List<String> sourceIncludes, List<String> sourceExcludes)", "code": "{\n  scanner.setBasedir(new File(sourceDirectory));\n  getLog().debug(\"Listing files from directory \" + sourceDirectory);\n  getLog().debug(\"Setting case sensitive \" + caseSensitive);\n  scanner.setCaseSensitive(caseSensitive);\n  if (sourceIncludes != null)\n  {\n    getLog().debug(\"Setting includes \" + sourceIncludes);\n    scanner.setIncludes(sourceIncludes.toArray(new String[] {}));\n  }\n  if (sourceExcludes != null)\n  {\n    getLog().debug(\"Setting excludes \" + sourceExcludes);\n    scanner.setExcludes(sourceExcludes.toArray(new String[] {}));\n  }\n  scanner.scan();\n  String[] files = scanner.getIncludedFiles();\n  getLog().debug(\"Files listed \" + Arrays.asList(files));\n  return files;\n}", "path": "maven-fit-transformer\\src\\main\\java\\net\\sourceforge\\xmlfit\\plugin\\XMLFitMojo.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "// Generate /////////////////////////////////\n", "func_signal": "protected void generate()", "code": "{\n    while(((Pair)pairs.first()).used == 0) {\n        emit(nextCase());\n    }\n}", "path": "fit-action-debugger\\src\\test\\java\\eg\\AllPairs.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "/* Altered by Rick Mugridge to dispatch on the first Fixture */\n", "func_signal": "public void doTables(Parse tables)", "code": "{\n        if(debugMode)\n          frame.initTabeles(tables);\n      \n        summary.put(\"run date\", new Date());\n        summary.put(\"run elapsed time\", new RunTime());\n        if (tables != null) {\n        \tParse fixtureName = fixtureName(tables);\n            if (fixtureName != null) {\n                try {\n                    Fixture fixture = getLinkedFixtureWithArgs(tables);\n                    fixture.interpretTables(tables);\n                } catch (Exception e) {\n                    exception (fixtureName, e);\n                    interpretFollowingTables(tables);\n                }\n            }\n        }\n    }", "path": "fit-action-debugger\\src\\main\\java\\fit\\Fixture.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "/* Added from FitNesse*/\n", "func_signal": "protected Fixture getLinkedFixtureWithArgs(Parse tables) throws Exception", "code": "{\n\t\tParse header = tables.at(0, 0, 0);\n    Fixture fixture = loadFixture(header.text());\n\t\tfixture.counts = counts;\n\t\tfixture.summary = summary;\n\t\tfixture.getArgsForTable(tables);\n\t\treturn fixture;\n\t}", "path": "fit-action-debugger\\src\\main\\java\\fit\\Fixture.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "// Traversal ////////////////////////////////\n", "func_signal": "public void doCells(Parse cells)", "code": "{\n    this.cells = cells;\n    try {\n        Method action = getClass().getMethod(cells.text(), empty);\n        action.invoke(this, empty);\n    } catch (Exception e) {\n        exception(cells, e);\n    }\n}", "path": "fit-action-debugger\\src\\main\\java\\fit\\ActionFixture.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "// get expected type of row\n", "func_signal": "protected void match(List expected, List computed, int col)", "code": "{\n        if (col >= columnBindings.length) {\n            check (expected, computed);\n        } else if (columnBindings[col] == null) {\n            match (expected, computed, col+1);\n        } else {\n            Map eMap = eSort(expected, col);\n            Map cMap = cSort(computed, col);\n            Set keys = union(eMap.keySet(),cMap.keySet());\n            for (Iterator i=keys.iterator(); i.hasNext(); ) {\n   Object key = i.next();\n   List eList = (List)eMap.get(key);\n   List cList = (List)cMap.get(key);\n   if (eList == null) {\n       surplus.addAll(cList);\n   } else if (cList == null) {\n       missing.addAll(eList);\n   } else if (eList.size()==1 && cList.size()==1) {\n       check(eList, cList);\n   } else {\n       match(eList, cList, col+1);\n   }\n            }\n        }\n    }", "path": "fit-action-debugger\\src\\main\\java\\fit\\RowFixture.java", "repo_name": "RainerW/XMLFit", "stars": 1, "license": "None", "language": "java", "size": 2796}
{"docstring": "/**\n * Validates that given string can be used as an id\n * @param string string to be validated\n * @return true if string follows specifications for id\n * @author vgerdin\n */\n", "func_signal": "public static boolean validateId(String string)", "code": "{\n    boolean ret = true;\n    try\n    {\n        Integer tmp = new Integer(string);\n        /* Validate the input value */\n        if (tmp.intValue() < 1)\n        {\n            throw new NumberFormatException();\n        }\n    }\n    catch (NumberFormatException nfe)\n    {\n        ret = false;\n/*\n        Logger.getLogger(\n                Course.class.getName()).log(Level.WARNING,\n                string + \" is not a valid section \");\n */ \n    }\n    return ret;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * Validates that given string can be used as a department\n * @param string string to be validated\n * @return true if string follows specifications for department\n * @author vgerdin\n */\n", "func_signal": "public static boolean validateDepartment(String string)", "code": "{\n    boolean ret = true;\n\n    /* validate data */\n    if (string == null \n            || string.length() < kDEPARTMENTMINLEN \n            || string.length() > kDEPARTMENTMAXLEN)\n    {\n        ret = false;\n        /*\n        Logger.getLogger(\n                Course.class.getName()).log(Level.SEVERE,\n                string + \" is not a valid department\");\n         */ \n    }\n\n    return ret;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * addStudent adds a new student to this course.\n * @param student the student that is to be added to the course\n * @return true if no errors were enountered\n * @author vgerdin\n */\n", "func_signal": "public boolean addStudent(Account student)", "code": "{\n    boolean ret = false;\n    boolean isInRoster = false;\n\n    /* Only add a student if the representing object has an id */\n    if (student != null && student.getId() != null && this.getId() != null)\n    {\n        ArrayList<Student> currentRoster = this.getRoster();\n        int indx;\n        /* Go through every line item in the roster */\n        for (indx = 0; indx < currentRoster.size(); indx++)\n        {\n            /* Confirm the student received is at this index in the roster */\n            if (student.equals(currentRoster.get(indx)))\n            {\n                isInRoster = true;\n                break;\n            }\n        }\n        /*if student is not in the roster, we add him*/\n        if (!isInRoster)\n        {\n            String query = \"INSERT INTO enrolled (course, student) \";\n            query += \"VALUES (\\\"\" + this.getId();\n            query += \"\\\",\\\"\" + student.getId() + \"\\\")\";\n            StorageConnection conn = new StorageConnection();\n            ret = conn.updateQuery(query);\n            conn.close();\n            this.setRoster(null);\n        /*setting roster to null will force new \n        generation a next get*/\n        }\n    }\n\n    return ret;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * removeStudent removes a particular student from the course.\n * @param student the student to be removed from this course\n * @return true if no errors were encountered in removal.\n * @author vgerdin\n */\n", "func_signal": "public boolean removeStudent(Account student)", "code": "{\n    boolean ret = false;\n    boolean isInRoster = false;\n\n    /* Only proceed if the received student object has a valid id */\n    if (student != null && student.getId() != null && this.getId() != null)\n    {\n        ArrayList<Student> currentRoster = this.getRoster();\n        int indx;\n        /* Walk through the roster */\n        for (indx = 0; indx < currentRoster.size(); indx++)\n        {\n            /* Verify the student received is at this location in the roster */\n            if (student.equals(currentRoster.get(indx)))\n            {\n                isInRoster = true;\n                break;\n            }\n        }\n\n        /* Proceed if the student was found */\n        if (isInRoster)\n        {\n            String query = \"DELETE FROM enrolled \";\n            query += \"WHERE student = \\\"\";\n            query += student.getId();\n            query += \"\\\" AND course = \\\"\" + this.getId() + \"\\\"\";\n            StorageConnection conn = new StorageConnection();\n            ret = conn.updateQuery(query);\n            conn.close();\n            this.setRoster(null);\n        /*setting roster to null will force new \n        generation a next get*/\n        }\n\n    }\n    return ret;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * setRoster sets this.roster to provided argument\n * @param newRoster list of students enrolled in the course\n * @return true if no errors\n * @author vgerdin\n */\n", "func_signal": "public boolean setRoster(ArrayList<Student> newRoster)", "code": "{\n    boolean ret = false;\n    /*this will always happen but keep same look as rest in case of change*/\n    if (true)\n    {\n        this.roster = newRoster;\n        ret = true;\n    }\n    return ret;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/** \n * setNumber replaces the course number with a new one\n * @param newNumber is the new course number to save\n * @return true if no errors occurred. \n * @author vgerdin\n */\n", "func_signal": "public boolean setNumber(Integer newNumber)", "code": "{\n    boolean ret = false;\n    /*number must not be set to null*/\n    if (newNumber != null)\n    {\n        this.number = newNumber;\n        ret = true;\n    }\n    return ret;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * getTeachers gets the Teacher attribute from this course\n * @return teacher of this course\n * @author vgerdin\n */\n", "func_signal": "public ArrayList<Teacher> getTeachers()", "code": "{\n    ArrayList<Teacher> teachers = null;\n    Teacher toAdd = null;\n    /*avoid null pointer exceptions, we must have an id to fetch from db*/\n    if (this.getId() != null)\n    {\n        teachers = new ArrayList<Teacher>();\n        String query = \"SELECT Accounts.id as id \";\n        query += \"FROM Accounts, teaches \";\n        query += \"WHERE Accounts.id = teaches.teacher \";\n        query += \"AND teaches.course = \" + this.getId();\n\n        StorageConnection conn = new StorageConnection();\n        ArrayList<ArrayList<Object>> result = conn.query(query);\n        conn.close();\n\n        /* For each query result, add a teacher to the list */\n        for (int indx = 0; indx < result.size(); indx++)\n        {\n            try\n            {\n                toAdd = new Teacher((Integer) result.get(indx).get(0));\n                teachers.add(toAdd);\n            }\n            catch (Exception ex)\n            {\n                System.out.println(\"Invalid Teacher list: \" + ex);\n            }\n        }\n    }\n    return teachers;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * addTeacher assignes a new Teacher to this course.\n * @param teacher Teacher to be added to this course\n * @return true if no errors have occured\n * @author vgerdin\n */\n", "func_signal": "public boolean addTeacher(Account teacher)", "code": "{\n    boolean ret = false;\n    boolean isTeaching = false;\n\n    /* validate incoming teacher's ID before proceeding */\n    if (teacher != null && teacher.getId() != null && this.getId() != null)\n    {\n        ArrayList<Teacher> currentTeachers = this.getTeachers();\n        int indx;\n        /* Loop through the list retrieved */\n        for (indx = 0; indx < currentTeachers.size(); indx++)\n        {\n            /* Proceed if a teacher is found */\n            if (teacher.equals(currentTeachers.get(indx)))\n            {\n                isTeaching = true;\n                break;\n            }\n        }\n        /*if teacher is not teaching, we add him*/\n        if (!isTeaching)\n        {\n            String query = \"INSERT INTO teaches (course, teacher) \";\n            query += \"VALUES (\\\"\" + this.getId() + \"\\\",\\\"\";\n            query += teacher.getId() + \"\\\")\";\n            StorageConnection conn = new StorageConnection();\n            ret = conn.updateQuery(query);\n            conn.close();\n        }\n    }\n    return ret;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * getGradingRules generates a GradingRules object\n * according to gradingRulesId and returns it \n * @return the associated GradingRules object\n * @author vgerdin\n */\n", "func_signal": "public GradingRules getGradingRules()", "code": "{\n    GradingRules rules = null;\n    /*if no id is set, get one from db*/\n    if (this.gradingRulesId != null)\n    {\n        rules = new GradingRules(this.getGradingRulesId());\n    }\n    return rules;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * save method if we have id set\n * @return true if no error\n * @author vgerdin\n */\n", "func_signal": "private boolean saveWithId()", "code": "{\n    StorageConnection conn = new StorageConnection();\n    boolean ret = false;\n\n    String query = \"SELECT id FROM Courses WHERE id = \" + this.getId();\n    ArrayList<ArrayList<Object>> result = conn.query(query);\n    /*if for some reason id does not exist in db we insert*/\n    if (result.isEmpty())\n    {\n        query = \"INSERT INTO Courses (id, title, department, number, section) \"; \n        query += \"VALUES (\\\"\" + this.getId() + \"\\\",\\\"\";\n        query += this.getTitle() + \"\\\",\\\"\" + this.getDepartment();\n        query += \"\\\",\\\"\" + this.getNumber() + \"\\\",\\\"\";\n        query += this.getSection() + \"\\\")\";\n\n        ret = conn.updateQuery(query);\n    }\n    /*if id does exist we update*/\n    else\n    {\n        query = \"UPDATE Courses SET \";\n        query += \"title = \\\"\";\n        query += this.getTitle();\n        query += \"\\\",\" + \"department = \\\"\";\n        query += this.getDepartment() + \"\\\",\";\n        query += \"number = \\\"\" + this.getNumber();\n        query += \"\\\",\" + \"section = \\\"\";\n        query += this.getSection() + \"\\\" \";\n        query += \"WHERE id = \\\"\" + this.getId() + \"\\\"\";\n\n        ret = conn.updateQuery(query);\n    }\n    conn.close();\n    return ret;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * addCourse (static) adds a course with the given parameters to the \n * database.\n * \n * @param title new Course's title\n * @param department new Course's department\n * @param number new Course's number\n * @param section new Course's section\n * @param teacher set the teacher for the class\n * @return true if added, false otherwise\n * @author vgerdin\n */\n", "func_signal": "public static boolean addCourse(String title,\n        String department, Integer number, Integer section, Teacher teacher)", "code": "{\n\n    boolean ret = false;\n\n    Course course = new Course(title, department, number, section);\n    ret = course.save();\n    /*if we have not failed already, continue*/\n    if (ret)\n    {\n        ret = course.setTeacher(teacher);\n    }\n\n    return ret;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * getRoster gets the assignments attribute for this course \n * assignments is no set untill first called, if assignments\n * is null then query the database and create it\n * @return list of associated Assignments\n * @author vgerdin\n */\n", "func_signal": "public ArrayList<Assignment> getAssignments()", "code": "{\n    Assignment toAdd = null;\n\n    /*if we have a list of assignments return it*/\n    if (this.assignments != null)\n    {\n        return this.assignments;\n    }\n    /*if list of assignments are missing, fetch it from db*/\n    else\n    {\n        /*avoid null pointer exceptions, we must have an id to fetch from db*/\n        if (this.getId() != null)\n        {\n            this.assignments = new ArrayList<Assignment>();\n            String query = \"SELECT id FROM Assignments \";\n            query += \"WHERE courseId = \" + this.getId();\n            query += \" ORDER BY aDueDate ASC\";\n\n            StorageConnection conn = new StorageConnection();\n            ArrayList<ArrayList<Object>> result = conn.query(query);\n            conn.close();\n\n            /* For each query result, add an assignment to the list */\n            for (int indx = 0; indx < result.size(); indx++)\n            {\n                try\n                {\n                    toAdd = new Assignment((Integer) result.get(indx).get(0));\n                    this.assignments.add(toAdd);\n                }\n                catch (Exception ex)\n                {\n                    System.out.println(\"Invalid assignments: \" + ex);\n                }\n            }\n            java.util.Collections.sort(this.assignments, \n                    new AssignmentListComparator());\n        }\n        return this.assignments;\n    }\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n  * Test of doPost method, of class GradeController.\n  */\n", "func_signal": "public void testDoPostAndGetStudent() throws IOException", "code": "{\n     \n     System.out.println(\"doPost & doGet: student\");\n     HttpUnitOptions.setExceptionsThrownOnScriptError(false);\n     WebConversation wc = new WebConversation();\n     WebRequest req = new GetMethodWebRequest\n             (\"http://localhost:8080/GooGrade2.0/student/grades?id=1\");\n\n     try\n     {\n         wc.putCookie(\"userid\", \"2\");\n         WebResponse resp = wc.getResponse(req);\n         WebLink link = null;\n         WebForm form = null;\n         resp = wc.getResponse(req);             // Page to be tested loads\n         \n         assertEquals(\"[CSC-357-1] - View Grades\", resp.getTitle());\n         \n     }\n     catch (IOException ex)\n     {\n         fail(\"IOException: \" + ex);\n     } \n     catch (SAXException ex)\n     {\n         fail(\"SAXException: \" + ex);\n     } \n }", "path": "trunk\\goograde\\TestSrc\\goograde\\CGradeControllerTest.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * toString()\n * @return a string created from Course class\n * @author vgerdin\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    String ret = new String();\n    ret += this.id + \", \";\n    ret += this.title + \", \";\n    ret += this.department + \", \";\n    ret += this.section + \", \";\n    ret += this.number;\n\n    return ret;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * deleteCourse (static) removes the course, if exists, with \n * provided id from the database.\n * \n * @param id Id of Course to be deleted\n * @return true if deleted, false otherwise\n * @author vgerdin\n */\n", "func_signal": "public static boolean deleteCourse(Integer id)", "code": "{\n    String query;\n    StorageConnection conn;\n    boolean ret = false;\n    /*only delete if id is not null*/\n    if (id != null)\n    {\n        query = \"DELETE FROM Courses WHERE id=\" + id.toString();\n        conn = new StorageConnection();\n        ret = conn.updateQuery(query);\n\n        query = \"DELETE FROM teaches WHERE course=\" + id.toString();\n        ret = conn.updateQuery(query);\n        \n        query = \"DELETE FROM enrolled WHERE course=\" + id.toString();\n        conn.updateQuery(query);\n        \n        conn.close();\n    }\n\n    return ret;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * Validates that given string can be used as a number\n * @param string string to be validated\n * @return true if string follows specifications for number\n */\n", "func_signal": "public static boolean validateNumber(String string)", "code": "{\n    boolean ret = true;\n    try\n    {\n        Integer tmp = new Integer(string);\n    }\n    catch (NumberFormatException nfe)\n    {\n        ret = false;\n        \n        /*\n        Logger.getLogger(\n                Course.class.getName()).log(Level.SEVERE,\n                string + \" is not a valid number\");\n         */ \n    }\n    return ret;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * save, stores current instance in database\n * if id already exists, update\n * else, insert\n * @return true if successful, else false\n * @author vgerdin\n */\n", "func_signal": "public boolean save()", "code": "{\n    StorageConnection conn = new StorageConnection();\n    boolean ret = false;\n    /*if id is null we a creating a new course*/\n    if (this.getId() == null)\n    {\n        ret = this.saveWithoutId();\n    }\n    /*if we have an id set, we are updating*/\n    else\n    {\n        ret = this.saveWithId();\n    }\n    return ret;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * removeTeacher removes a Teacher from this course.\n * @param teacher Teacher to be removed from this course\n * @return true if no errors have occured\n * @author vgerdin\n */\n", "func_signal": "public boolean removeTeacher(Account teacher)", "code": "{\n    boolean ret = false;\n    boolean isTeaching = false;\n\n    /* validate teacher id before proceeding */\n    if (teacher != null && teacher.getId() != null && this.getId() != null)\n    {\n        ArrayList<Teacher> currentTeachers = this.getTeachers();\n        int indx;\n        /* Loop through the teacher list */\n        for (indx = 0; indx < currentTeachers.size(); indx++)\n        {\n            /* Proceed if a teacher is found to match the received one */\n            if (teacher.equals(currentTeachers.get(indx)))\n            {\n                isTeaching = true;\n                break;\n            }\n        }\n\n        /* Proceed if a teacher was found */\n        if (isTeaching)\n        {\n            String query = \"DELETE FROM teaches \" + \"WHERE teacher = \\\"\";\n            query += teacher.getId() + \"\\\" AND course = \\\"\" + this.getId() + \"\\\"\";\n            StorageConnection conn = new StorageConnection();\n            ret = conn.updateQuery(query);\n            conn.close();\n        }\n    }\n    return ret;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * Validates that given string can be used as a section\n * @param string string to be validated\n * @return true if string follows specifications for section\n * @author vgerdin\n */\n", "func_signal": "public static boolean validateSection(String string)", "code": "{\n    boolean ret = true;\n    try\n    {\n        Integer tmp = new Integer(string);\n    }\n    catch (NumberFormatException nfe)\n    {\n        ret = false;\n\n        /*\n        Logger.getLogger(\n                Course.class.getName()).log(Level.SEVERE,\n                string + \" is not a valid section \");\n         */ \n    }\n    return ret;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * setTitle saves a new Couse title over the old.\n * @param newTitle the new title to save\n * @return true if no errors \n * @author vgerdin\n */\n", "func_signal": "public boolean setTitle(String newTitle)", "code": "{\n    boolean ret = false;\n    /*title must not be set to null*/\n    if (newTitle != null)\n    {\n        this.title = newTitle;\n        ret = true;\n    }\n    return ret;\n}", "path": "tags\\release-2\\goograde\\WEB-INF\\classes\\goograde\\Course.java", "repo_name": "icco/GooGrade", "stars": 1, "license": "None", "language": "java", "size": 73820}
{"docstring": "/**\n * Helper method to get the values of an annotation as double values.\n * @param annotation The annotation.\n * @param desc The java class description.\n * @param name The attribute name from the annotation.\n * @return The array of double values or null.\n */\n", "func_signal": "public static double[] getDoubleValues(Annotation annotation, JavaClassDescription desc, String name)", "code": "{\n    final String[] sValues = getAnnotationValues(annotation, name, desc);\n    if ( sValues != null && sValues.length > 0 )\n    {\n        final double[] values = new double[sValues.length];\n        for (int i=0; i<values.length; i++)\n        {\n            values[i] = Double.valueOf(sValues[i]);\n        }\n        return values;\n\n    }\n    return null;\n}", "path": "scrplugin\\src\\main\\java\\org\\apache\\felix\\scrplugin\\tags\\annotation\\defaulttag\\Util.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * Constructs a tracker that uses the specified bundle context to\n * track services and notifies the specified application object about\n * changes.\n * @param context The bundle context to be used by the tracker.\n * @param frame The application object to notify about service changes.\n**/\n", "func_signal": "public ShapeTracker(BundleContext context, DrawingFrame frame)", "code": "{\n    super(context, SimpleShape.class.getName(), null);\n    m_context = context;\n    m_frame = frame;\n}", "path": "examples\\servicebased.host\\src\\main\\java\\org\\apache\\felix\\example\\servicebased\\host\\ShapeTracker.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * This method is used to obtain access to <code>NotificationService</code>,\n * which enables applications to send asynchronous notifications to\n * management servers.\n * \n * @return a NotificationService service object\n */\n", "func_signal": "public static NotificationService getNotificationService()", "code": "{\n    if(context == null)\n        throw new IllegalStateException(\"Cannot retrieve Notification \" +\n                \"service, implementation bundle not started yet.\");\n    \n    ServiceReference notificationServiceRef = \n        context.getServiceReference(NotificationService.class.getName());\n    if(notificationServiceRef == null)\n        throw new IllegalStateException(\"Notification service not found \" +\n                \"in service registry.\");\n    \n    NotificationService notificationService = \n        (NotificationService) context.getService(notificationServiceRef);\n    if(notificationService == null)\n        throw new IllegalStateException(\"Notification service not found \" +\n                \"in service registry.\");\n    \n    return notificationService;\n}", "path": "org.osgi.compendium\\src\\main\\java\\info\\dmtree\\registry\\DmtServiceFactory.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * Called to parse the InputStream and set bundle list and package hash map\n */\n", "func_signal": "public void parse(InputStream istream) throws ParserConfigurationException, IOException, SAXException", "code": "{\n    // Parse the Meta-Data\n\n    ContentHandler contenthandler = (ContentHandler) m_handler;\n\n    InputSource is = new InputSource(istream);\n\n    SAXParserFactory spf = SAXParserFactory.newInstance();\n    spf.setValidating(false);\n\n    SAXParser saxParser = spf.newSAXParser();\n\n    XMLReader xmlReader = null;\n    xmlReader = saxParser.getXMLReader();\n    xmlReader.setContentHandler(contenthandler);\n    xmlReader.parse(is);\n}", "path": "bundlerepository\\src\\main\\java\\org\\apache\\felix\\bundlerepository\\metadataparser\\XmlMetadataHandler.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * Overrides the <tt>ServiceTracker</tt> functionality to inform\n * the application object about the added service.\n * @param ref The service reference of the added service.\n * @return The service object to be used by the tracker.\n**/\n", "func_signal": "public Object addingService(ServiceReference ref)", "code": "{\n    SimpleShape shape = new DefaultShape(m_context, ref);\n    processShapeOnEventThread(ADDED, ref, shape);\n    return shape;\n}", "path": "examples\\servicebased.host\\src\\main\\java\\org\\apache\\felix\\example\\servicebased\\host\\ShapeTracker.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * Overrides the <tt>ServiceTracker</tt> functionality to inform\n * the application object about the removed service.\n * @param ref The service reference of the removed service.\n * @param svc The service object of the removed service.\n**/\n", "func_signal": "public void removedService(ServiceReference ref, Object svc)", "code": "{\n    processShapeOnEventThread(REMOVED, ref, (SimpleShape) svc);\n    ((DefaultShape) svc).dispose();\n}", "path": "examples\\servicebased.host\\src\\main\\java\\org\\apache\\felix\\example\\servicebased\\host\\ShapeTracker.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * Get a single annotation value\n * @param annotation The annotation\n * @param desc The class description\n * @param name The name of the annotation\n * @param clazz The class of the annotation\n * @return The value\n */\n", "func_signal": "public static String getStringValue(Annotation annotation, JavaClassDescription desc, String name, final Class<?> clazz)", "code": "{\n    final String values[] = getAnnotationValues(annotation, name, desc);\n    if ( values != null && values.length > 0 ) {\n        return values[0];\n    }\n    // try to get the default value\n    try {\n        return (String) clazz.getMethod(name).getDefaultValue();\n    } catch( NoSuchMethodException mnfe) {\n        // we ignore this\n        return \"\";\n    }\n}", "path": "scrplugin\\src\\main\\java\\org\\apache\\felix\\scrplugin\\tags\\annotation\\defaulttag\\Util.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * Get a boolean value from an annotation.\n * @param annotation The annotation.\n * @param name The name of the attribute.\n * @param clazz The annotation class.\n * @return The boolean value.\n */\n", "func_signal": "public static boolean getBooleanValue(Annotation annotation, String name, final Class<?> clazz)", "code": "{\n    final Object obj = annotation.getNamedParameter(name);\n    if ( obj != null ) {\n        return Boolean.valueOf(obj.toString());\n    }\n    try {\n        return (Boolean) clazz.getMethod(name).getDefaultValue();\n    } catch( NoSuchMethodException mnfe) {\n        // we ignore this\n        return true;\n    }\n}", "path": "scrplugin\\src\\main\\java\\org\\apache\\felix\\scrplugin\\tags\\annotation\\defaulttag\\Util.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * This method is used by the Service Binder to remove dictionaries from the\n * spell check service.\n * \n * @param dictionary\n *            the dictionary to remove from the spell check service.\n */\n", "func_signal": "public void removeDictionary( DictionaryService dictionary )", "code": "{\n    // Lock list and remove service object.\n    synchronized ( m_svcObjList )\n    {\n        m_svcObjList.remove( dictionary );\n    }\n}", "path": "examples\\spellcheckbinder\\src\\main\\java\\org\\apache\\felix\\examples\\spellcheckbinder\\SpellCheckServiceImpl.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * This method is used to obtain access to <code>DmtAdmin</code>, which\n * enables applications to manipulate the Device Management Tree.\n * \n * @return a DmtAdmin service object\n */\n", "func_signal": "public static DmtAdmin getDmtAdmin()", "code": "{\n    if(context == null)\n        throw new IllegalStateException(\"Cannot retrieve Dmt Admin \" +\n                \"service, implementation bundle not started yet.\");\n    \n    ServiceReference dmtAdminRef = \n        context.getServiceReference(DmtAdmin.class.getName());\n    if(dmtAdminRef == null)\n        throw new IllegalStateException(\"Dmt Admin service not found in \" +\n                \"service registry.\");\n    \n    DmtAdmin dmtAdmin = (DmtAdmin) context.getService(dmtAdminRef);\n    if(dmtAdmin == null)\n        throw new IllegalStateException(\"Dmt Admin service not found in \" +\n                \"service registry.\");\n    \n    return dmtAdmin;\n}", "path": "org.osgi.compendium\\src\\main\\java\\info\\dmtree\\registry\\DmtServiceFactory.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * Helper method to get the values of an annotation as char values.\n * @param annotation The annotation.\n * @param desc The java class description.\n * @param name The attribute name from the annotation.\n * @return The array of char values or null.\n */\n", "func_signal": "public static char[] getCharValues(Annotation annotation, JavaClassDescription desc, String name)", "code": "{\n    final String[] sValues = getAnnotationValues(annotation, name, desc);\n    if ( sValues != null && sValues.length > 0 )\n    {\n        final char[] values = new char[sValues.length];\n        for (int i=0; i<values.length; i++)\n        {\n            values[i] = sValues[i].charAt(0);\n        }\n        return values;\n\n    }\n    return null;\n}", "path": "scrplugin\\src\\main\\java\\org\\apache\\felix\\scrplugin\\tags\\annotation\\defaulttag\\Util.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * Actually performs the processing of the service notification. Invokes\n * the appropriate callback method on the application object depending on\n * the action type of the notification.\n * @param action The type of action associated with the notification.\n * @param ref The service reference of the corresponding service.\n * @param shape The service object of the corresponding service.\n**/\n", "func_signal": "private void processShape(int action, ServiceReference ref, SimpleShape shape)", "code": "{\n    String name = (String) ref.getProperty(SimpleShape.NAME_PROPERTY);\n\n    switch (action)\n    {\n        case MODIFIED:\n            m_frame.removeShape(name);\n            // Purposely let this fall through to the 'add' case to\n            // reload the service.\n\n        case ADDED:\n            Icon icon = (Icon) ref.getProperty(SimpleShape.ICON_PROPERTY);\n            m_frame.addShape(name, icon, shape);\n            break;\n\n        case REMOVED:\n            m_frame.removeShape(name);\n            break;\n    }\n}", "path": "examples\\servicebased.host\\src\\main\\java\\org\\apache\\felix\\example\\servicebased\\host\\ShapeTracker.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * Helper method to get the values of an annotation as boolean values.\n * @param annotation The annotation.\n * @param desc The java class description.\n * @param name The attribute name from the annotation.\n * @return The array of boolean values or null.\n */\n", "func_signal": "public static boolean[] getBooleanValues(Annotation annotation, JavaClassDescription desc, String name)", "code": "{\n    final String[] sValues = getAnnotationValues(annotation, name, desc);\n    if ( sValues != null && sValues.length > 0 )\n    {\n        final boolean[] values = new boolean[sValues.length];\n        for (int i=0; i<values.length; i++)\n        {\n            values[i] = Boolean.valueOf(sValues[i]);\n        }\n        return values;\n\n    }\n    return null;\n}", "path": "scrplugin\\src\\main\\java\\org\\apache\\felix\\scrplugin\\tags\\annotation\\defaulttag\\Util.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * Helper method to get the values of an annotation as long values.\n * @param annotation The annotation.\n * @param desc The java class description.\n * @param name The attribute name from the annotation.\n * @return The array of long values or null.\n */\n", "func_signal": "public static long[] getLongValues(Annotation annotation, JavaClassDescription desc, String name)", "code": "{\n    final String[] sValues = getAnnotationValues(annotation, name, desc);\n    if ( sValues != null && sValues.length > 0 )\n    {\n        final long[] values = new long[sValues.length];\n        for (int i=0; i<values.length; i++)\n        {\n            values[i] = Long.valueOf(sValues[i]);\n        }\n        return values;\n\n    }\n    return null;\n}", "path": "scrplugin\\src\\main\\java\\org\\apache\\felix\\scrplugin\\tags\\annotation\\defaulttag\\Util.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "// See whether the given list is satisfied or not\n", "func_signal": "public boolean isSatisfied(List posts)", "code": "{\n    for (int i = 0; i < m_conditions.length; i++)\n    {\n        if (m_bundle == null)\n        {\n            if (!m_conditionInfos[i].getType().equals(\n                BundleSignerCondition.class.getName()))\n            {\n                return false;\n            }\n            String[] args = m_conditionInfos[i].getArgs();\n\n            boolean match = false;\n            if (args.length == 0)\n            {\n                for (int j = 0; j < m_signers.length; j++)\n                {\n                    if (SignerMatcher.match(args[0], m_signers[j]))\n                    {\n                        match = true;\n                        break;\n                    }\n                }\n            }\n            if (!match)\n            {\n                return false;\n            }\n            continue;\n        }\n        try\n        {\n            Condition condition = null;\n            boolean add = false;\n            Class clazz = Class.forName(m_conditionInfos[i].getType());\n            \n            synchronized (m_conditionInfos)\n            {\n                condition = m_conditions[i];\n            }\n            \n            if (condition == null)\n            {\n                add = true;\n                condition = createCondition(m_bundle, clazz, m_conditionInfos[i]);\n            }\n            \n            if (condition.isPostponed())\n            {\n                posts.add(condition);\n                if (add)\n                {\n                    synchronized (m_conditionInfos)\n                    {\n                        if (m_conditions[i] == null)\n                        {\n                            m_conditions[i] = condition;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                Object current = m_conditionStack.get();\n\n                if (current == null)\n                {\n                    m_conditionStack.set(clazz);\n                }\n                else\n                {\n                    if (current instanceof HashSet)\n                    {\n                        if (((HashSet) current).contains(clazz))\n                        {\n                            return false;\n                        }\n                        ((HashSet) current).add(clazz);\n                    }\n                    else\n                    {\n                        if (current == clazz)\n                        {\n                            return false;\n                        }\n                        HashSet frame = new HashSet();\n                        frame.add(current);\n                        frame.add(clazz);\n                        m_conditionStack.set(frame);\n                        current = frame;\n                    }\n                }\n                try\n                {\n                    boolean result = condition.isSatisfied();\n\n                    if (!condition.isMutable() && ((condition != Condition.TRUE) && (condition != Condition.FALSE)))\n                    {\n                        synchronized (m_conditionInfos)\n                        {\n                            m_conditions[i] = result ? Condition.TRUE : Condition.FALSE;\n                        }\n                    }\n                    else\n                    {\n                        synchronized (m_conditionInfos)\n                        {\n                            m_conditions[i] = condition;\n                        }\n                    }\n                    if (!result)\n                    {\n                        return false;\n                    }\n                }\n                finally\n                {\n                    if (current == null)\n                    {\n                        m_conditionStack.set(null);\n                    }\n                    else\n                    {\n                        ((HashSet) current).remove(clazz);\n                        if (((HashSet) current).isEmpty())\n                        {\n                            m_conditionStack.set(null);\n                        }\n                    }\n                }\n            }\n        }\n        catch (Exception e)\n        {\n            // TODO: log this as per spec\n            e.printStackTrace();\n            return false;\n        }\n    }\n    return true;\n}", "path": "framework.security\\src\\main\\java\\org\\apache\\felix\\framework\\security\\util\\Conditions.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * This method is used by the Service Binder to add new dictionaries to the\n * spell check service.\n * \n * @param dictionary\n *            the dictionary to add to the spell check service.\n */\n", "func_signal": "public void addDictionary( DictionaryService dictionary )", "code": "{\n    // Lock list and add service object.\n    synchronized ( m_svcObjList )\n    {\n        m_svcObjList.add( dictionary );\n    }\n}", "path": "examples\\spellcheckbinder\\src\\main\\java\\org\\apache\\felix\\examples\\spellcheckbinder\\SpellCheckServiceImpl.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * Creates an ESNCondition object.\n * \n * @param bundle This parameter is ignored, as the ESN number is the\n *        property of the mobile device, and thus the same for all bundles.\n * @param conditionInfo Contains the ESN value against which to match the\n *        device's ESN. Its {@link ConditionInfo#getArgs()} method should\n *        return a String array with one value, the ESN string. The ESN is 8\n *        hexadecimal digits (32 bits) without hyphens. Limited pattern\n *        matching is allowed: the string is 0 to 7 digits, followed by an\n *        asterisk(<code>*</code>).\n * @return A Condition object that indicates whether the specified ESN\n *         number matches that of the device. If the number ends with an\n *         asterisk ( <code>*</code>), then the beginning of the ESN is\n *         compared to the pattern.\n * @throws IllegalArgumentException If the ESN is not a string of 8\n *         hexadecimal digits, or 0 to 7 hexadecimal digits with an\n *         <code>*</code> at the end.\n */\n", "func_signal": "public static Condition getCondition(Bundle bundle,\n\t\tConditionInfo conditionInfo)", "code": "{\n\tString esn = conditionInfo.getArgs()[0].toUpperCase();\n\tint length = esn.length();\n\tif (length > ESN_LENGTH) {\n\t\tthrow new IllegalArgumentException(\"ESN too long: \" + esn);\n\t}\n\tif (esn.endsWith(\"*\")) {\n\t\tlength--;\n\t\tesn = esn.substring(0, length);\n\t}\n\telse {\n\t\tif (length < ESN_LENGTH) {\n\t\t\tthrow new IllegalArgumentException(\"ESN too short: \" + esn);\n\t\t}\n\t}\n\tfor (int i = 0; i < length; i++) {\n\t\tchar c = esn.charAt(i);\n\t\tif (('0' <= c) && (c <= '9')) {\n\t\t\tcontinue;\n\t\t}\n        if (('A' <= c) && (c <= 'F')) {\n\t\t\tcontinue;\n\t\t}\n\t\tthrow new IllegalArgumentException(\"not a valid ESN: \" + esn);\n\t}\n\tif (ESN == null) {\n\t\tSystem.err\n\t\t\t\t.println(\"The OSGi implementation of org.osgi.util.cdma.ESNCondition needs the system property \"\n\t\t\t\t\t\t+ ORG_OSGI_UTIL_CDMA_ESN + \" set.\");\n\t\treturn Condition.FALSE;\n\t}\n\treturn ESN.startsWith(esn) ? Condition.TRUE : Condition.FALSE;\n}", "path": "org.osgi.compendium\\src\\main\\java\\org\\osgi\\util\\cdma\\ESNCondition.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * Processes a received service notification from the <tt>ServiceTracker</tt>,\n * forcing the processing of the notification onto the Swing event thread\n * if it is not already on it.\n * @param action The type of action associated with the notification.\n * @param ref The service reference of the corresponding service.\n * @param shape The service object of the corresponding service.\n**/\n", "func_signal": "private void processShapeOnEventThread(\n    int action, ServiceReference ref, SimpleShape shape)", "code": "{\n    try\n    {\n        if (SwingUtilities.isEventDispatchThread())\n        {\n            processShape(action, ref, shape);\n        }\n        else\n        {\n            SwingUtilities.invokeAndWait(new ShapeRunnable(action, ref, shape));\n        }\n    }\n    catch (Exception ex)\n    {\n        ex.printStackTrace();\n    }\n}", "path": "examples\\servicebased.host\\src\\main\\java\\org\\apache\\felix\\example\\servicebased\\host\\ShapeTracker.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * Helper method to get the values of an annotation as short values.\n * @param annotation The annotation.\n * @param desc The java class description.\n * @param name The attribute name from the annotation.\n * @return The array of short values or null.\n */\n", "func_signal": "public static short[] getShortValues(Annotation annotation, JavaClassDescription desc, String name)", "code": "{\n   final String[] sValues = getAnnotationValues(annotation, name, desc);\n   if ( sValues != null && sValues.length > 0 )\n   {\n       final short[] values = new short[sValues.length];\n       for (int i=0; i<values.length; i++)\n       {\n           values[i] = Short.valueOf(sValues[i]);\n       }\n       return values;\n\n   }\n   return null;\n}", "path": "scrplugin\\src\\main\\java\\org\\apache\\felix\\scrplugin\\tags\\annotation\\defaulttag\\Util.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/**\n * Helper method to get the values of an annotation as byte values.\n * @param annotation The annotation.\n * @param desc The java class description.\n * @param name The attribute name from the annotation.\n * @return The array of byte values or null.\n */\n", "func_signal": "public static byte[] getByteValues(Annotation annotation, JavaClassDescription desc, String name)", "code": "{\n   final String[] sValues = getAnnotationValues(annotation, name, desc);\n   if ( sValues != null && sValues.length > 0 )\n   {\n       final byte[] values = new byte[sValues.length];\n       for (int i=0; i<values.length; i++)\n       {\n           values[i] = Byte.valueOf(sValues[i]);\n       }\n       return values;\n\n   }\n   return null;\n}", "path": "scrplugin\\src\\main\\java\\org\\apache\\felix\\scrplugin\\tags\\annotation\\defaulttag\\Util.java", "repo_name": "josh-seidel-db/felix", "stars": 0, "license": "None", "language": "java", "size": 24288}
{"docstring": "/************************************************************************\n * updateStockInfo: Atualiza a tabela de acordo com uma compra ou venda. \n ***********************************************************************/\n", "func_signal": "public void updateStockInfo(String stockName, String action, float price,\n\t\t\t\t\t\t\tint amount)", "code": "{\n\tint i;\n\t/* encontra a a\u00e7\u00e3o pelo nome */\n\tfor (i = 0; i < 5; i++) {\n\t\tif (stockNames[i].equals(stockName.trim()))\n\t\t\tbreak;\n\t}\n\t\n\t/* atualiza os dados */\n\tif (action.trim().equals(\"C\"))                 /* estamos comprando */\n\t\tstockBuyPrices[i] = price;\n\tif (action.trim().equals(\"V\"))                  /* estamos vendendo */\n\t\tstockSellPrices[i] = price;\n\tstockTotalAmounts[i] += amount;\n\tstockTotalValues[i] += amount * price;\n}", "path": "2009\\1o.sem\\mac448\\ep1\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*************************************************************************\n * help: mostra uma mensagem de ajuda.\n ************************************************************************/\n", "func_signal": "public static void help()", "code": "{\n\tSystem.out.println(\"Usage: java -jar StockServer.jar <http port> <msg server port>\");\n\tSystem.out.println(\"  http port: the port in which to run the Stock server.\");\n\tSystem.out.println(\"  msg server port: the port in which to run the message server.\");\n}", "path": "2009\\1o.sem\\mac448\\ep2\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*************************************************************************\n * retrieveStockInfoFromFile: recupera a informa\u00e7\u00e3o das a\u00e7\u00f5es do arquivo.\n ************************************************************************/\n", "func_signal": "private void retrieveStockInfoFromFile()", "code": "{\n\tSystem.out.print(\"> Retrieving stock info from file... \");\n\ttry {\n\t\tFileInputStream fstream = new FileInputStream(stockFilename);\n    \t    DataInputStream in = new DataInputStream(fstream);\n    \t    BufferedReader br = new BufferedReader(new InputStreamReader(in));\n    \t    String strLine;\n    \t    StringTokenizer tokenizedLine;\n    \t    int i = 0;\n    \t    while ((strLine = br.readLine()) != null)   {\n    \t    \ttokenizedLine = new StringTokenizer(strLine);\n        \t    stockNames[i] = tokenizedLine.nextToken();    \t    \t\n    \t    \tstockBuyPrices[i] = Float.parseFloat(tokenizedLine.nextToken());\n    \t    \tstockSellPrices[i] = Float.parseFloat(tokenizedLine.nextToken());\n    \t    \tstockTotalAmounts[i] = Integer.parseInt(tokenizedLine.nextToken());\n    \t    \tstockTotalValues[i] = Float.parseFloat(tokenizedLine.nextToken());\n    \t    \ti++;\n    \t    }\n    \t    in.close();\n\t}\n\tcatch (Exception e) {\n\t\tSystem.err.println(\"Error in retrieveStockInfoFromFile(): \"\n\t\t\t\t+ e.getMessage());\n\t}\n\tSystem.out.println(\"ok.\");\n}", "path": "2009\\1o.sem\\mac448\\ep1\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*************************************************************************\n * stockInfoString: devolve uma string com a tabela.\n ************************************************************************/\n", "func_signal": "public String stockInfoString()", "code": "{\n\tString s = new String();\n\tfor (int i = 0; i < 5; i++) {\n\t\ts += stockNames[i] + \" \";\n\t\ts += stockBuyPrices[i] + \" \";\n\t\ts += stockSellPrices[i] + \" \";\n\t\ts += stockTotalAmounts[i] + \" \";\n\t\ts += stockTotalValues[i];\n\t\tif (i != 4)\n\t\t\ts += \"\\n\";\n\t}\n\treturn s;\n}", "path": "2009\\1o.sem\\mac448\\ep1\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*********************************************************************\n * MessageServer: construtor.\n ********************************************************************/\n", "func_signal": "public MessageServer(int port, StockServer server)", "code": "{\n\tthis.port = port;\n\tthis.server = server;\n}", "path": "2009\\1o.sem\\mac448\\ep2\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*************************************************************************\n * listenHTTP: aguarda uma conex\u00e3o http e responde adequadamente.\n ************************************************************************/\n", "func_signal": "private void listenHTTP() throws Exception", "code": "{\n\n\t/* cria socket e aguarda conex\u00e3o */\n\tServerSocket listenSocket = new ServerSocket(httpPort);\n\t  \n\twhile (true) {\n\t\tSocket connectionSocket = listenSocket.accept();\n\t\tSystem.out.print(\">> Received http connection... \");\n  \n\t\t/* comunica\u00e7\u00e3o com o cliente */\n\t\tBufferedReader inFromClient =\n\t\t\tnew BufferedReader(\n\t\t\t\tnew InputStreamReader(connectionSocket.getInputStream()));\n\t\tDataOutputStream outToClient =\n\t\t\tnew DataOutputStream(connectionSocket.getOutputStream());\n\t  \n\t\t/* l\u00ea a requisi\u00e7\u00e3o do cliente */\n\t\tString requestMessageLine = inFromClient.readLine();\n\t\tStringTokenizer tokenizedLine =\n\t\t\tnew StringTokenizer(requestMessageLine);\n\n\t\t/* escreve a tabela */\n\t\tif (tokenizedLine.nextToken().equals(\"GET\")){\n\t\t\tString content = stockInfoStringFormatted();\n\t\t\tHTTPHeader(outToClient, \"text\", content.length());\n\t\t\toutToClient.writeBytes(content);\n\t\t\tconnectionSocket.close();\n\t\t}\n\t\telse System.out.println(\"Bad Request Message\");\n\t\tSystem.out.println(\"ok.\");\n\t}\n}", "path": "2009\\1o.sem\\mac448\\ep1\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*************************************************************************\n * startThreads: inicia as threads de arquivo e mensagens.\n ************************************************************************/\n", "func_signal": "private void startThreads()", "code": "{\n\t/* Threads */\n\tSystem.out.print(\"> Starting threads... \");\n\tnew Thread(this.new FileUpdater(stockFilename, this, 30000)).start();\n\tnew Thread(this.new MessageServer(msgPort, this)).start();\n\tSystem.out.println(\"ok.\");\n}", "path": "2009\\1o.sem\\mac448\\ep2\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*********************************************************************\n * writeFile: grava o arquivo.\n ********************************************************************/\n", "func_signal": "private void writeFile()", "code": "{\n\ttry {\n\t\tsynchronized (server) {\n\t\t\tFileWriter fstream = new FileWriter(fileName);\n\t\t\tBufferedWriter out = new BufferedWriter(fstream);\n\t\t\tout.write(stockInfoString());\n\t    \tout.close();\n\t\t}\n\t}\n\tcatch (Exception e) {\n\t\tSystem.err.println(\"Error in FileUpdater.writeFile(): \"\n\t\t\t\t+ e.getMessage());\n\t}\n}", "path": "2009\\1o.sem\\mac448\\ep1\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*************************************************************************\n * StockHeader: envia cabe\u00e7alhos http para o stream de sa\u00edda indicado.\n ************************************************************************/\n", "func_signal": "private void StockHeader(DataOutputStream os,\n\t\t\t\t\t\tString type,\n\t\t\t\t\t\tint length) throws Exception", "code": "{\n\tos.writeBytes(\"Stock/1.0 200 Document Follows\\r\\n\");\n\tos.writeBytes(\"Content-Type: \" + type + \"\\r\\n\");\n        os.writeBytes(\"Content-Length: \" + length + \"\\r\\n\");\n        os.writeBytes(\"\\r\\n\");\n}", "path": "2009\\1o.sem\\mac448\\ep2\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*************************************************************************\n * printCol: Imprime um float f com size espa\u00e7os \u00e0 direita.\n ************************************************************************/\n", "func_signal": "private static String printCol(float f, int size)", "code": "{\n\tFloat fl = new Float(f);\n\tString s = fl.toString();\n\tint l = s.length();\n\tfor (int i = 0; i < size - l; i++)\n\t\ts += \" \";\n\treturn s;\n}", "path": "2009\\1o.sem\\mac448\\ep2\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*************************************************************************\n * stockInfoString: devolve uma string com a tabela.\n ************************************************************************/\n", "func_signal": "public String stockInfoString()", "code": "{\n\tString s = new String();\n\tfor (int i = 0; i < 5; i++) {\n\t\ts += stockNames[i] + \" \";\n\t\ts += stockBuyPrices[i] + \" \";\n\t\ts += stockSellPrices[i] + \" \";\n\t\ts += stockTotalAmounts[i] + \" \";\n\t\ts += stockTotalValues[i];\n\t\tif (i != 4)\n\t\t\ts += \"\\n\";\n\t}\n\treturn s;\n}", "path": "2009\\1o.sem\\mac448\\ep2\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*********************************************************************\n * run: roda o servidor de mensagens.\n ********************************************************************/\n", "func_signal": "public void run()", "code": "{\n\tString info = new String();\n\tSystem.out.println(\"> Running Message Server.\");\n\ttry {\n\t\tServerSocket listenSocket = new ServerSocket(port);\n\t\twhile (true) {\n\t\t\tSocket connectionSocket = listenSocket.accept();\n\t\t\tSystem.out.print(\">> Received message connection... \");\n\t\t\t\n\t\t\t/* comunica\u00e7\u00e3o com o cliente */\n\t\t\tBufferedReader inFromClient =\n\t\t\t\tnew BufferedReader(\n\t\t\t\t\t\tnew InputStreamReader(connectionSocket.getInputStream()));\n\t\t\tDataOutputStream outToClient =\n\t\t\t\tnew DataOutputStream(connectionSocket.getOutputStream());\n\n\t\t\t/* gera string de informa\u00e7\u00e3o para o cliente */\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\tinfo += stockNames[i] + \" \";\n\t\t\t\tinfo += stockBuyPrices[i] + \" \";\n\t\t\t\tinfo += stockSellPrices[i] + \" \";\n\t\t\t}\n\t\t\tinfo += \"\\n\";\n\t\t\toutToClient.writeBytes(info);\n\t\t\t\n\t\t\t/* l\u00ea a requisi\u00e7\u00e3o do cliente */\n\t\t\tString requestMessageLine = inFromClient.readLine();\n\t\t\tStringTokenizer tokenizedLine =\n\t\t\t\tnew StringTokenizer(requestMessageLine);\n\t\t\t\n\t\t\t/* atualiza os dados no servidor */\n\t\t\tString stockName, action;\n\t\t\tfloat price;\n\t\t\tint amount;\n\t\t\tstockName = tokenizedLine.nextToken();\n\t\t\taction = tokenizedLine.nextToken();\n\t\t\tprice = Float.parseFloat(tokenizedLine.nextToken());\n\t\t\tamount = Integer.parseInt(tokenizedLine.nextToken());\n\t\t\t\n\t\t\tsynchronized (server) {\n\t\t\t\tupdateStockInfo(stockName, action, price, amount);\n\t\t\t}\n\t\t\t\n\t\t\toutToClient.writeBytes(\"OK\\n\");\n\t\t\tconnectionSocket.close();\n\t\t\tSystem.out.println(\"ok.\");\n\t\t}\n\t} catch (Exception e) {\n\t\tSystem.err.println(\"Error in MessageServer.run(): \"\n\t\t\t\t+ e.getMessage());\n\t}\n}", "path": "2009\\1o.sem\\mac448\\ep1\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*************************************************************************\n * printCol: Imprime um float f com size espa\u00e7os \u00e0 direita.\n ************************************************************************/\n", "func_signal": "private static String printCol(float f, int size)", "code": "{\n\tFloat fl = new Float(f);\n\tString s = fl.toString();\n\tint l = s.length();\n\tfor (int i = 0; i < size - l; i++)\n\t\ts += \" \";\n\treturn s;\n}", "path": "2009\\1o.sem\\mac448\\ep1\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/************************************************************************\n * updateStockInfo: Atualiza a tabela de acordo com uma compra ou venda. \n ***********************************************************************/\n", "func_signal": "public void updateStockInfo(String stockName, String action, float price,\n\t\t\t\t\t\t\tint amount)", "code": "{\n\tint i;\n\t/* encontra a a\u00e7\u00e3o pelo nome */\n\tfor (i = 0; i < 5; i++) {\n\t\tif (stockNames[i].equals(stockName.trim()))\n\t\t\tbreak;\n\t}\n\t\n\t/* atualiza os dados */\n\tif (action.trim().equals(\"C\"))                 /* estamos comprando */\n\t\tstockBuyPrices[i] = price;\n\tif (action.trim().equals(\"V\"))                  /* estamos vendendo */\n\t\tstockSellPrices[i] = price;\n\tstockTotalAmounts[i] += amount;\n\tstockTotalValues[i] += amount * price;\n}", "path": "2009\\1o.sem\\mac448\\ep2\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*************************************************************************\n * startThreads: inicia as threads de arquivo e mensagens.\n ************************************************************************/\n", "func_signal": "private void startThreads()", "code": "{\n\t/* Threads */\n\tSystem.out.print(\"> Starting threads... \");\n\tnew Thread(this.new FileUpdater(stockFilename, this, 30000)).start();\n\tnew Thread(this.new MessageServer(msgPort, this)).start();\n\tSystem.out.println(\"ok.\");\n}", "path": "2009\\1o.sem\\mac448\\ep1\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*************************************************************************\n * stockInfoStringFormatted: devolve uma string com a tabela formatada.\n ************************************************************************/\n", "func_signal": "private String stockInfoStringFormatted()", "code": "{\n\tString s = new String();\n\ts  = \".=========================================================================================.\\n\";\n\ts += \"|       Acao      | Valor de Compra | Valor de Venda  | Qtde Total Neg. | Val. Total Neg. |\\n\";\n\ts += \"|=========================================================================================|\\n\";\n\tfor (int i = 0; i < 5; i++) {\n\t\ts += \"|      \" + stockNames[i] + \"      \";\n\t\ts += \"| \" + printCol(stockBuyPrices[i], 16);\n\t\ts += \"| \" + printCol(stockSellPrices[i], 16);\n\t\ts += \"| \" + printCol(stockTotalAmounts[i], 16);\n\t\ts += \"| \" + printCol(stockTotalValues[i], 16);\n\t\ts += \"|\\n\";\n\t}\n\ts += \"'========================================================================================='\";\n\treturn s;\n}", "path": "2009\\1o.sem\\mac448\\ep1\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*************************************************************************\n * HTTPServer: construtor de uma inst\u00e2ncia do servidor.\n ************************************************************************/\n", "func_signal": "public HTTPServer(int port, int ms_port, String filename)", "code": "{\n\tSystem.out.print(\"> Initializing server... \");\n\tthis.stockFilename = new String(filename);\n\tthis.httpPort = port;\n\tthis.msgPort = ms_port;\n\tthis.stockNames = new String[5];\n\tthis.stockBuyPrices = new float[5];\n\tthis.stockSellPrices = new float[5];\n\tthis.stockTotalAmounts = new int[5];\n\tthis.stockTotalValues = new float[5];\n\tSystem.out.println(\"ok.\");\n}", "path": "2009\\1o.sem\\mac448\\ep1\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*********************************************************************\n * FileUpdater: construtor.\n ********************************************************************/\n", "func_signal": "public FileUpdater(String fileName, StockServer server, int sleepTime)", "code": "{\n\tthis.fileName = fileName;\n\tthis.server = server;\n\tthis.sleepTime = sleepTime;\n}", "path": "2009\\1o.sem\\mac448\\ep2\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*************************************************************************\n * main: instancia um servidor e o inicia em uma porta designada.\n ************************************************************************/\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n\t/* mensagem de ajuda */\n\tif (args.length == 0\n\t\t\t|| args[0].equals(\"-h\")\n\t\t\t|| args[0].equals(\"--help\")) {\n\t\thelp();\n\t\tSystem.exit(0);\n\t} else if (args.length < 2 || args.length > 2) {\n\t\thelp();\n\t\tSystem.exit(1);  /* erro, precisamos das portas como argumento */\n\t}\n\t\t\n\tHTTPServer server = new HTTPServer(Integer.parseInt(args[0]),\n\t\t\t\t\t\t\t\t\t   Integer.parseInt(args[1]),\n\t\t\t\t\t\t\t\t\t   \"Posicao.txt\");\n\tserver.run();\n}", "path": "2009\\1o.sem\\mac448\\ep1\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/*********************************************************************\n * MessageServer: construtor.\n ********************************************************************/\n", "func_signal": "public MessageServer(int port, HTTPServer server)", "code": "{\n\tthis.port = port;\n\tthis.server = server;\n}", "path": "2009\\1o.sem\\mac448\\ep1\\HTTPServer.java", "repo_name": "andrejb/ime", "stars": 1, "license": "None", "language": "java", "size": 27700}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void close()", "code": "{\n  IOUtils.closeStream(dataIn);\n  IOUtils.closeStream(checksumIn);\n}", "path": "src\\hdfs\\org\\apache\\hadoop\\hdfs\\server\\datanode\\FSDatasetInterface.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/**\n * main() has some simple utility methods.\n * @param argv Command line parameters.\n * @exception Exception if the filesystem does not exist.\n */\n", "func_signal": "public static void main(String[] argv) throws Exception", "code": "{\n  StringUtils.startupShutdownMessage(SecondaryNameNode.class, argv, LOG);\n  Configuration tconf = new Configuration();\n  if (argv.length >= 1) {\n    SecondaryNameNode secondary = new SecondaryNameNode(tconf);\n    int ret = secondary.processArgs(argv);\n    System.exit(ret);\n  }\n\n  // Create a never ending deamon\n  Daemon checkpointThread = new Daemon(new SecondaryNameNode(tconf)); \n  checkpointThread.start();\n}", "path": "src\\hdfs\\org\\apache\\hadoop\\hdfs\\server\\namenode\\SecondaryNameNode.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/**\n * Set the {@link UserGroupInformation} for the current thread\n * WARNING - This method should be used only in test cases and other exceptional\n * cases!\n * @param ugi {@link UserGroupInformation} for the current thread\n */\n", "func_signal": "public static void setCurrentUser(UserGroupInformation ugi)", "code": "{\n  Subject user = SecurityUtil.getSubject(ugi);\n  currentUser.set(user);\n}", "path": "src\\core\\org\\apache\\hadoop\\security\\UserGroupInformation.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/** Read a {@link UserGroupInformation} from conf */\n", "func_signal": "public static UserGroupInformation readFrom(Configuration conf\n    ) throws IOException", "code": "{\n  try {\n    return UnixUserGroupInformation.readFromConf(conf,\n      UnixUserGroupInformation.UGI_PROPERTY_NAME);\n  } catch (LoginException e) {\n    throw (IOException)new IOException().initCause(e);\n  }\n}", "path": "src\\core\\org\\apache\\hadoop\\security\\UserGroupInformation.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/**\n * Method which is used by the poller to assign appropriate worker thread\n * to a queue. The number of threads would be always less than or equal\n * to number of queues in a system. If number of threads is configured to \n * be more than number of queues then poller does not create threads more\n * than number of queues. \n * \n */\n", "func_signal": "private void assignThreadsToQueues()", "code": "{\n  int countOfQueues = jobQueues.size();\n  String[] queues = (String[]) jobQueues.keySet().toArray(\n      new String[countOfQueues]);\n  int numberOfQueuesPerThread = countOfQueues / poolSize;\n  int numberOfQueuesAssigned = 0;\n  for (int i = 0; i < poolSize; i++) {\n    JobInitializationThread initializer = createJobInitializationThread();\n    int batch = (i * numberOfQueuesPerThread);\n    for (int j = batch; j < (batch + numberOfQueuesPerThread); j++) {\n      initializer.addQueue(queues[j]);\n      threadsToQueueMap.put(queues[j], initializer);\n      numberOfQueuesAssigned++;\n    }\n  }\n\n  if (numberOfQueuesAssigned < countOfQueues) {\n    // Assign remaining queues in round robin fashion to other queues\n    int startIndex = 0;\n    for (int i = numberOfQueuesAssigned; i < countOfQueues; i++) {\n      JobInitializationThread t = threadsToQueueMap\n          .get(queues[startIndex]);\n      t.addQueue(queues[i]);\n      threadsToQueueMap.put(queues[i], t);\n      startIndex++;\n    }\n  }\n}", "path": "src\\contrib\\capacity-scheduler\\src\\java\\org\\apache\\hadoop\\mapred\\JobInitializationPoller.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/**\n * Copy the new fsimage into the NameNode\n */\n", "func_signal": "private void putFSImage(CheckpointSignature sig) throws IOException", "code": "{\n  String fileid = \"putimage=1&port=\" + infoPort +\n    \"&machine=\" +\n    InetAddress.getLocalHost().getHostAddress() +\n    \"&token=\" + sig.toString();\n  LOG.info(\"Posted URL \" + fsName + fileid);\n  TransferFsImage.getFileClient(fsName, fileid, (File[])null);\n}", "path": "src\\hdfs\\org\\apache\\hadoop\\hdfs\\server\\namenode\\SecondaryNameNode.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/**\n * Create a connection to the primary namenode.\n */\n", "func_signal": "public SecondaryNameNode(Configuration conf)  throws IOException", "code": "{\n  try {\n    initialize(conf);\n  } catch(IOException e) {\n    shutdown();\n    throw e;\n  }\n}", "path": "src\\hdfs\\org\\apache\\hadoop\\hdfs\\server\\namenode\\SecondaryNameNode.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/**\n * Method to adjust line and column numbers for the start of a token.\n */\n", "func_signal": "public void adjustBeginLineColumn(int newLine, int newCol)", "code": "{\n  int start = tokenBegin;\n  int len;\n\n  if (bufpos >= tokenBegin)\n    {\n      len = bufpos - tokenBegin + inBuf + 1;\n    }\n  else\n    {\n      len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n    }\n\n  int i = 0, j = 0, k = 0;\n  int nextColDiff = 0, columnDiff = 0;\n\n  while (i < len &&\n         bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n    {\n      bufline[j] = newLine;\n      nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n      bufcolumn[j] = newCol + columnDiff;\n      columnDiff = nextColDiff;\n      i++;\n    } \n\n  if (i < len)\n    {\n      bufline[j] = newLine++;\n      bufcolumn[j] = newCol + columnDiff;\n\n      while (i++ < len)\n        {\n          if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n            bufline[j] = newLine++;\n          else\n            bufline[j] = newLine;\n        }\n    }\n\n  line = bufline[j];\n  column = bufcolumn[j];\n}", "path": "src\\core\\org\\apache\\hadoop\\record\\compiler\\generated\\SimpleCharStream.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/**\n * Method used to print log statements about which jobs are being\n * passed to init-threads. \n * \n * @param jobsToInitialize list of jobs which are passed to be \n * init-threads.\n */\n", "func_signal": "private void printJobs(ArrayList<JobInProgress> jobsToInitialize)", "code": "{\n  for (JobInProgress job : jobsToInitialize) {\n    LOG.info(\"Passing to Initializer Job Id :\" + job.getJobID()\n        + \" User: \" + job.getProfile().getUser() + \" Queue : \"\n        + job.getProfile().getQueueName());\n  }\n}", "path": "src\\contrib\\capacity-scheduler\\src\\java\\org\\apache\\hadoop\\mapred\\JobInitializationPoller.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/**\n * Test if the jobtracker waits for the info file to be created before \n * starting.\n */\n", "func_signal": "public void testJobTrackerInfoCreation() throws Exception", "code": "{\n  LOG.info(\"Testing jobtracker.info file\");\n  MiniDFSCluster dfs = new MiniDFSCluster(new Configuration(), 1, true, null);\n  String namenode = (dfs.getFileSystem()).getUri().getHost() + \":\"\n                    + (dfs.getFileSystem()).getUri().getPort();\n  // shut down the data nodes\n  dfs.shutdownDataNodes();\n\n  // start the jobtracker\n  JobConf conf = new JobConf();\n  FileSystem.setDefaultUri(conf, namenode);\n  conf.set(\"mapred.job.tracker\", \"localhost:0\");\n  conf.set(\"mapred.job.tracker.http.address\", \"127.0.0.1:0\");\n\n  JobTracker jobtracker = new JobTracker(conf);\n\n  // now check if the update restart count works fine or not\n  boolean failed = false;\n  try {\n    jobtracker.recoveryManager.updateRestartCount();\n  } catch (IOException ioe) {\n    failed = true;\n  }\n  assertTrue(\"JobTracker created info files without datanodes!!!\", failed);\n\n  Path restartFile = jobtracker.recoveryManager.getRestartCountFile();\n  Path tmpRestartFile = jobtracker.recoveryManager.getTempRestartCountFile();\n  FileSystem fs = dfs.getFileSystem();\n  assertFalse(\"Info file exists after update failure\", \n              fs.exists(restartFile));\n  assertFalse(\"Temporary restart-file exists after update failure\", \n              fs.exists(restartFile));\n\n  // start 1 data node\n  dfs.startDataNodes(conf, 1, true, null, null, null, null);\n  dfs.waitActive();\n\n  failed = false;\n  try {\n    jobtracker.recoveryManager.updateRestartCount();\n  } catch (IOException ioe) {\n    failed = true;\n  }\n  assertFalse(\"JobTracker failed to create info files with datanodes!!!\", failed);\n}", "path": "src\\test\\org\\apache\\hadoop\\mapred\\TestRecoveryManager.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/**\n * This method returns the first job in the queue and removes the same.\n * \n * @param queue\n *          queue name\n * @return First job in the queue and removes it.\n */\n", "func_signal": "private JobInProgress getFirstJobInQueue(String queue)", "code": "{\n  TreeMap<JobSchedulingInfo, JobInProgress> jobsList = jobsPerQueue\n      .get(queue);\n  synchronized (jobsList) {\n    if (jobsList.isEmpty()) {\n      return null;\n    }\n    Iterator<JobInProgress> jobIterator = jobsList.values().iterator();\n    JobInProgress job = jobIterator.next();\n    jobIterator.remove();\n    currentJobCount.getAndDecrement();\n    return job;\n  }\n}", "path": "src\\contrib\\capacity-scheduler\\src\\java\\org\\apache\\hadoop\\mapred\\JobInitializationPoller.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/**\n * Returns the Jetty server that the Namenode is listening on.\n */\n", "func_signal": "private String getInfoServer() throws IOException", "code": "{\n  URI fsName = FileSystem.getDefaultUri(conf);\n  if (!\"hdfs\".equals(fsName.getScheme())) {\n    throw new IOException(\"This is not a DFS\");\n  }\n  return NetUtils.getServerAddress(conf, \"dfs.info.bindAddress\", \n                                   \"dfs.info.port\", \"dfs.http.address\");\n}", "path": "src\\hdfs\\org\\apache\\hadoop\\hdfs\\server\\namenode\\SecondaryNameNode.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/**\n * Download <code>fsimage</code> and <code>edits</code>\n * files from the name-node.\n * @throws IOException\n */\n", "func_signal": "private void downloadCheckpointFiles(CheckpointSignature sig\n                                    ) throws IOException", "code": "{\n  \n  checkpointImage.cTime = sig.cTime;\n  checkpointImage.checkpointTime = sig.checkpointTime;\n\n  // get fsimage\n  String fileid = \"getimage=1\";\n  File[] srcNames = checkpointImage.getImageFiles();\n  assert srcNames.length > 0 : \"No checkpoint targets.\";\n  TransferFsImage.getFileClient(fsName, fileid, srcNames);\n  LOG.info(\"Downloaded file \" + srcNames[0].getName() + \" size \" +\n           srcNames[0].length() + \" bytes.\");\n\n  // get edits file\n  fileid = \"getedit=1\";\n  srcNames = checkpointImage.getEditsFiles();\n  assert srcNames.length > 0 : \"No checkpoint targets.\";\n  TransferFsImage.getFileClient(fsName, fileid, srcNames);\n  LOG.info(\"Downloaded file \" + srcNames[0].getName() + \" size \" +\n      srcNames[0].length() + \" bytes.\");\n\n  checkpointImage.checkpointUploadDone();\n}", "path": "src\\hdfs\\org\\apache\\hadoop\\hdfs\\server\\namenode\\SecondaryNameNode.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/** Creates a new instance of CsvRecordOutput */\n", "func_signal": "public CsvRecordOutput(OutputStream out)", "code": "{\n  try {\n    stream = new PrintStream(out, true, \"UTF-8\");\n  } catch (UnsupportedEncodingException ex) {\n    throw new RuntimeException(ex);\n  }\n}", "path": "src\\core\\org\\apache\\hadoop\\record\\CsvRecordOutput.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/**\n * Shut down this instance of the datanode.\n * Returns only after shutdown is complete.\n */\n", "func_signal": "public void shutdown()", "code": "{\n  shouldRun = false;\n  try {\n    if (infoServer != null) infoServer.stop();\n  } catch (Exception e) {\n    LOG.warn(\"Exception shutting down SecondaryNameNode\", e);\n  }\n  try {\n    if (checkpointImage != null) checkpointImage.close();\n  } catch(IOException e) {\n    LOG.warn(StringUtils.stringifyException(e));\n  }\n}", "path": "src\\hdfs\\org\\apache\\hadoop\\hdfs\\server\\namenode\\SecondaryNameNode.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/**\n * Merge image and edits, and verify consistency with the signature.\n */\n", "func_signal": "private void doMerge(CheckpointSignature sig) throws IOException", "code": "{\n  getEditLog().open();\n  StorageDirectory sdName = null;\n  StorageDirectory sdEdits = null;\n  Iterator<StorageDirectory> it = null;\n  it = dirIterator(NameNodeDirType.IMAGE);\n  if (it.hasNext())\n    sdName = it.next();\n  it = dirIterator(NameNodeDirType.EDITS);\n  if (it.hasNext())\n    sdEdits = it.next();\n  if ((sdName == null) || (sdEdits == null))\n    throw new IOException(\"Could not locate checkpoint directories\");\n  loadFSImage(FSImage.getImageFile(sdName, NameNodeFile.IMAGE));\n  loadFSEdits(sdEdits);\n  sig.validateStorageInfo(this);\n  saveFSImage();\n}", "path": "src\\hdfs\\org\\apache\\hadoop\\hdfs\\server\\namenode\\SecondaryNameNode.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/** Login and return a UserGroupInformation object. */\n", "func_signal": "public static UserGroupInformation login(Configuration conf\n    ) throws LoginException", "code": "{\n  if (LOGIN_UGI == null) {\n    LOGIN_UGI = UnixUserGroupInformation.login(conf);\n  }\n  return LOGIN_UGI;\n}", "path": "src\\core\\org\\apache\\hadoop\\security\\UserGroupInformation.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/**\n * Tests the {@link JobTracker.RecoveryManager} against the exceptions thrown \n * during recovery. It does the following :\n *  - submits a job with HIGH priority and x tasks\n *  - allows it to complete 50%\n *  - submits another job with normal priority and y tasks\n *  - kills the jobtracker\n *  - restarts the jobtracker with max-tasks-per-job such that \n *        y < max-tasks-per-job < x\n *  - checks if the jobtraker starts normally and job#2 is recovered while \n *    job#1 is failed.\n */\n", "func_signal": "public void testRecoveryManager() throws Exception", "code": "{\n  LOG.info(\"Testing recovery-manager\");\n  String signalFile = new Path(TEST_DIR, \"signal\").toString();\n  \n  // clean up\n  FileSystem fs = FileSystem.get(new Configuration());\n  fs.delete(TEST_DIR, true);\n  \n  JobConf conf = new JobConf();\n  conf.set(\"mapred.jobtracker.job.history.block.size\", \"1024\");\n  conf.set(\"mapred.jobtracker.job.history.buffer.size\", \"1024\");\n  \n  MiniMRCluster mr = new MiniMRCluster(1, \"file:///\", 1, null, null, conf);\n  JobTracker jobtracker = mr.getJobTrackerRunner().getJobTracker();\n  \n  JobConf job1 = mr.createJobConf();\n  //  set the high priority\n  job1.setJobPriority(JobPriority.HIGH);\n  \n  UtilsForTests.configureWaitingJobConf(job1, \n      new Path(TEST_DIR, \"input\"), new Path(TEST_DIR, \"output3\"), 30, 0, \n      \"test-recovery-manager\", signalFile, signalFile);\n  \n  // submit the faulty job\n  JobClient jc = new JobClient(job1);\n  RunningJob rJob1 = jc.submitJob(job1);\n  LOG.info(\"Submitted first job \" + rJob1.getID());\n  \n  while (rJob1.mapProgress() < 0.5f) {\n    LOG.info(\"Waiting for job \" + rJob1.getID() + \" to be 50% done\");\n    UtilsForTests.waitFor(100);\n  }\n  \n  // now submit job2\n  JobConf job2 = mr.createJobConf();\n\n  String signalFile1 = new Path(TEST_DIR, \"signal1\").toString();\n  UtilsForTests.configureWaitingJobConf(job2, \n      new Path(TEST_DIR, \"input\"), new Path(TEST_DIR, \"output4\"), 20, 0, \n      \"test-recovery-manager\", signalFile1, signalFile1);\n  \n  // submit the job\n  RunningJob rJob2 = (new JobClient(job2)).submitJob(job2);\n  LOG.info(\"Submitted job \" + rJob2.getID());\n  \n  // wait for it to init\n  JobInProgress jip = jobtracker.getJob(rJob2.getID());\n  \n  while (!jip.inited()) {\n    LOG.info(\"Waiting for job \" + jip.getJobID() + \" to be inited\");\n    UtilsForTests.waitFor(100);\n  }\n  \n  // now submit job3 with inappropriate acls\n  JobConf job3 = mr.createJobConf();\n  job3.set(\"hadoop.job.ugi\",\"abc,users\");\n\n  UtilsForTests.configureWaitingJobConf(job3, \n      new Path(TEST_DIR, \"input\"), new Path(TEST_DIR, \"output5\"), 1, 0, \n      \"test-recovery-manager\", signalFile, signalFile);\n  \n  // submit the job\n  RunningJob rJob3 = (new JobClient(job3)).submitJob(job3);\n  LOG.info(\"Submitted job \" + rJob3.getID() + \" with different user\");\n  \n  jip = jobtracker.getJob(rJob3.getID());\n\n  while (!jip.inited()) {\n    LOG.info(\"Waiting for job \" + jip.getJobID() + \" to be inited\");\n    UtilsForTests.waitFor(100);\n  }\n\n  // kill the jobtracker\n  LOG.info(\"Stopping jobtracker\");\n  mr.stopJobTracker();\n  \n  // make sure that the jobtracker is in recovery mode\n  mr.getJobTrackerConf().setBoolean(\"mapred.jobtracker.restart.recover\", \n                                    true);\n  mr.getJobTrackerConf().setInt(\"mapred.jobtracker.maxtasks.per.job\", 25);\n  \n  mr.getJobTrackerConf().setBoolean(\"mapred.acls.enabled\" , true);\n  UserGroupInformation ugi = UserGroupInformation.readFrom(job1);\n  mr.getJobTrackerConf().set(\"mapred.queue.default.acl-submit-job\", \n                             ugi.getUserName());\n\n  // start the jobtracker\n  LOG.info(\"Starting jobtracker\");\n  mr.startJobTracker();\n  UtilsForTests.waitForJobTracker(jc);\n  \n  jobtracker = mr.getJobTrackerRunner().getJobTracker();\n  \n  // assert that job2 is recovered by the jobtracker as job1 would fail\n  assertEquals(\"Recovery manager failed to tolerate job failures\",\n               2, jobtracker.getAllJobs().length);\n  \n  // check if the job#1 has failed\n  JobStatus status = jobtracker.getJobStatus(rJob1.getID());\n  assertEquals(\"Faulty job not failed\", \n               JobStatus.FAILED, status.getRunState());\n  \n  jip = jobtracker.getJob(rJob2.getID());\n  assertFalse(\"Job should be running\", jip.isComplete());\n  \n  status = jobtracker.getJobStatus(rJob3.getID());\n  assertNull(\"Job should be missing\", status);\n  \n  mr.shutdown();\n}", "path": "src\\test\\org\\apache\\hadoop\\mapred\\TestRecoveryManager.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "//\n// create a buffer that contains the entire test file data.\n//\n", "func_signal": "private void initBuffer(int size)", "code": "{\n  long seed = AppendTestUtil.nextLong();\n  fileContents = AppendTestUtil.randomBytes(seed, size);\n}", "path": "src\\test\\org\\apache\\hadoop\\hdfs\\TestFileAppend2.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "// create a bunch of files. Write to them and then verify.\n", "func_signal": "public void run()", "code": "{\n  System.out.println(\"Workload \" + id + \" starting... \");\n  for (int i = 0; i < numAppendsPerThread; i++) {\n   \n    // pick a file at random and remove it from pool\n    Path testfile = null;\n    synchronized (testFiles) {\n      if (testFiles.size() == 0) {\n        System.out.println(\"Completed write to almost all files.\");\n        return;  \n      }\n      int index = AppendTestUtil.nextInt(testFiles.size());\n      testfile = testFiles.remove(index);\n    }\n\n    long len = 0;\n    int sizeToAppend = 0;\n    try {\n      FileSystem fs = cluster.getFileSystem();\n\n      // add a random number of bytes to file\n      len = fs.getFileStatus(testfile).getLen();\n\n      // if file is already full, then pick another file\n      if (len >= fileSize) {\n        System.out.println(\"File \" + testfile + \" is full.\");\n        continue;\n      }\n  \n      // do small size appends so that we can trigger multiple\n      // appends to the same file.\n      //\n      int left = (int)(fileSize - len)/3;\n      if (left <= 0) {\n        left = 1;\n      }\n      sizeToAppend = AppendTestUtil.nextInt(left);\n\n      System.out.println(\"Workload thread \" + id +\n                         \" appending \" + sizeToAppend + \" bytes \" +\n                         \" to file \" + testfile +\n                         \" of size \" + len);\n      FSDataOutputStream stm = fs.append(testfile);\n      stm.write(fileContents, (int)len, sizeToAppend);\n      stm.close();\n\n      // wait for the file size to be reflected in the namenode metadata\n      while (fs.getFileStatus(testfile).getLen() != (len + sizeToAppend)) {\n        try {\n          System.out.println(\"Workload thread \" + id +\n                             \" file \" + testfile  +\n                             \" size \" + fs.getFileStatus(testfile).getLen() +\n                             \" expected size \" + (len + sizeToAppend) +\n                             \" waiting for namenode metadata update.\");\n          Thread.sleep(5000);\n        } catch (InterruptedException e) { \n        }\n      }\n\n      assertTrue(\"File \" + testfile + \" size is \" + \n                 fs.getFileStatus(testfile).getLen() +\n                 \" but expected \" + (len + sizeToAppend),\n                fs.getFileStatus(testfile).getLen() == (len + sizeToAppend));\n\n      checkFile(fs, testfile, (int)(len + sizeToAppend));\n    } catch (Throwable e) {\n      globalStatus = false;\n      if (e != null && e.toString() != null) {\n        System.out.println(\"Workload exception \" + id + \n                           \" testfile \" + testfile +\n                           \" \" + e);\n        e.printStackTrace();\n      }\n      assertTrue(\"Workload exception \" + id + \" testfile \" + testfile +\n                 \" expected size \" + (len + sizeToAppend),\n                 false);\n    }\n\n    // Add testfile back to the pool of files.\n    synchronized (testFiles) {\n      testFiles.add(testfile);\n    }\n  }\n}", "path": "src\\test\\org\\apache\\hadoop\\hdfs\\TestFileAppend2.java", "repo_name": "denniscao/hadoop-common", "stars": 1, "license": "apache-2.0", "language": "java", "size": 66798}
{"docstring": "/**\n * @param pagename\n * @param wikidata\n */\n", "func_signal": "public WikiData saveWikiData(WikiInfo info, String wikidata)", "code": "{\n\tWikiData data = new WikiData();\n\t    \tWikiData.Util util = new WikiData.Util();\n\t    \tdata.setUpdatedateNow();\n\t    \tKey datakey = util.makeKey(info.getKey(), info.getVersion());\n\t    \tdata.setKey(datakey);\n\t    \tdata.setWikidataString(wikidata);\n\t    \tutil.saveData(data);\n\t    \treturn data;\n}", "path": "src\\com\\appspot\\gaejwiki\\domain\\page\\PageSaver.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * note\u60c5\u5831\u3092\u8fd4\u3059\n * @return note\u60c5\u5831\u306eHtml\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n */\n", "func_signal": "public String toNoteHtmlString()", "code": "{\n\tif (getNoteList().size() == 0) {\n\t\treturn \"\";\n\t}\n\t\n\tStringBuffer sb = new StringBuffer();\n\tsb.append(\"<div id=\\\"note\\\">\");\n\tsb.append(\"<hr class=\\\"note_hr\\\" />\");\n\tboolean first = true;\n\tfor (NoteInline note : getNoteList()) {\n\t\tif (!first) { sb.append(DomainParameter.getDomainParameter().getLineSeparator()); } else { first = false; }\n\t\tsb.append(note.toNoteHtmlString());\n\t}\n\tsb.append(\"</div>\");\n\treturn sb.toString();\n}", "path": "src\\com\\appspot\\gaejwiki\\common\\wiki\\inline\\WikiObjectBlockInfo.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * \u65b0\u898f\u3067\u4f5c\u6210\u3059\u308b\n * @param pagename\n * @return\n */\n", "func_signal": "public WikiInfo createWikiInfo(String pagename)", "code": "{\n\tassert(pagename != null);\n\t\n\tWikiInfo info = new WikiInfo();\n\tinfo.setPagename(pagename);\n\tinfo.setTodaycounter(1);\n\tinfo.setYesterdaycounter(0);\n\tinfo.setTotalcounter(1);\n\tinfo.setVersion(1);\n\t    \tinfo.setUpdatedateNow();\n\t    \tinfo.setCounterupdatedateNow();\n\t    \tWikiInfo.Util util = new WikiInfo.Util();\n\t    \tinfo.setKey(util.makeKey(pagename));\n\t    \tutil.saveData(info);\n\t    \treturn info;\n\t\n}", "path": "src\\com\\appspot\\gaejwiki\\domain\\page\\PageSaver.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * WikiInfo\u304c\u3042\u308b\u304b\u306a\u3044\u304b\u3067\u51e6\u7406\u3092\u5206\u3051\u308b\n * @param pagename\n */\n", "func_signal": "public WikiInfo loadWikiInfo(String pagename)", "code": "{\n\tassert(pagename != null);\n\t\n\t    \tWikiInfo.Util util = new WikiInfo.Util();\n\t    \tKey key = util.makeKey(pagename);\n\t    \treturn util.loadData(key);\n}", "path": "src\\com\\appspot\\gaejwiki\\domain\\page\\PageSaver.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * @param refkey\n */\n", "func_signal": "public void removeData(Key key)", "code": "{\n\tPersistenceManager pm = PMF.get().getPersistenceManager();\n\ttry {\n\t\tWikiRef data = pm.getObjectById(WikiRef.class, key);\n\t\tpm.deletePersistent(data);\n\t} catch (JDOObjectNotFoundException e) {\n\t} catch (Exception e) {\n\t} finally {\n\t            pm.close();\n\t}\n}", "path": "src\\com\\appspot\\gaejwiki\\data\\dao\\WikiRef.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * @param info\n * @return\n */\n", "func_signal": "public Map<String, String> createCounterMap(WikiInfo info)", "code": "{\n\tassert(info != null);\n\t\n\tMap<String, String> map = new HashMap<String, String>();\n\tmap.put(HtmlCounterMarger.TODAY, info.getTodaycounter().toString());\n\tmap.put(HtmlCounterMarger.YESTERDAY, info.getYesterdaycounter().toString());\n\tmap.put(HtmlCounterMarger.TOTAL, info.getTotalcounter().toString());\n\t\n\treturn map;\n}", "path": "src\\com\\appspot\\gaejwiki\\domain\\page\\PageLoader.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * \u30e1\u30cb\u30e5\u30fc\u7528\u30da\u30fc\u30b8\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3059\n * @return \u30e1\u30cb\u30e5\u30fc\u7528\u30da\u30fc\u30b8\u30d1\u30e9\u30e1\u30fc\u30bf\n */\n", "func_signal": "public PageParam getMenuParam()", "code": "{\n\tPageParam pageparam = new PageParam();\n\tpageparam.put(PageParam.PAGEKEY, MENUPAGENAME);\n\treturn pageparam;\n}", "path": "src\\com\\appspot\\gaejwiki\\domain\\menu\\MenuMaker.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * \n * @param pagename \u30da\u30fc\u30b8\u540d\n * @param incrementcounter true\u306e\u5834\u5408\u30ab\u30a6\u30f3\u30bf\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\n * @return\n */\n", "func_signal": "public WikiInfo getWikiInfo(String pagename, boolean incrementcounter)", "code": "{\n\tassert(pagename != null);\n\t\n\tif (incrementcounter) {\n\t\treturn getWikiInfoIncrementCounter(pagename);\n\t} else {\n\t\tWikiInfo.Util infoutil = new WikiInfo.Util();\n\t\treturn infoutil.loadData(infoutil.makeKey(pagename));\n\t}\n}", "path": "src\\com\\appspot\\gaejwiki\\domain\\page\\PageLoader.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * @param pagename \u30da\u30fc\u30b8\u540d\n * @return\n */\n", "func_signal": "public WikiInfo getWikiInfoIncrementCounter(String pagename)", "code": "{\n\tassert(pagename != null);\n\t\n\tWikiInfo.Util infoutil = new WikiInfo.Util();\n\tWikiInfo info = infoutil.loadAndIncrementData(infoutil.makeKey(pagename));\n\t\n\t// \u5931\u6557\u306e\u5834\u5408\u3001\uff13\u56de\u518d\u30c8\u30e9\u30a4\n\tif (info == null) {\n\t\tfor (int i=0; i<3; i++) {\n\t\t\t// \u30b9\u30ea\u30fc\u30d7\u3055\u305b\u305f\u307b\u3046\u304c\u3088\u3044\uff1f\n\t\t\tinfo = infoutil.loadAndIncrementData(infoutil.makeKey(pagename));\n\t\t\tif (info != null) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn info;\n}", "path": "src\\com\\appspot\\gaejwiki\\domain\\page\\PageLoader.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * note\u60c5\u5831\u3092\u8fd4\u3059\n * @return note\u60c5\u5831\u306eHtml\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n */\n", "func_signal": "public String toNoteHtmlString()", "code": "{\n\tif (noteno == -1) {\n\t\treturn null;\n\t}\n\tString nostr = new Integer(noteno).toString();\n\tStringBuffer sb = new StringBuffer();\n\tsb.append(\"<a id=\\\"notefoot_\" + nostr + \"\\\" href=\\\"#notetext_\" + nostr + \"\\\" class=\\\"note\\\">\");\n\tsb.append(\"*\" + nostr);\n\tsb.append(\"</a>\");\n\tsb.append(new Util().getLineSeparator());\n\tsb.append(\"<span class=\\\"small\\\">\");\n\tfor (WikiObjectInlineI inline : childlist) {\n\t\tsb.append(inline.toHtmlString());\n\t}\n\tsb.append(\"</span><br />\");\n\treturn sb.toString();\n}", "path": "src\\com\\appspot\\gaejwiki\\common\\wiki\\inline\\NoteInline.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * bodyparam\u306ePAGE\u30ad\u30fc\u306eValue\u304b\u3089\u30da\u30fc\u30b8\u540d\u3092\u53d6\u308a\u51fa\u3057\u3066\u3001\u30da\u30fc\u30b8\u3092\u53d6\u5f97\u3057\u3001\u52d5\u7684\u306a\u5024\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u8fd4\u3059\n * \u30da\u30fc\u30b8\u306e\u53d6\u5f97\u65b9\u6cd5\u306f\u3001\n * 1.\u30ab\u30a6\u30f3\u30bf\u30ec\u30b3\u30fc\u30c9\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n * 2.\u30ab\u30a6\u30f3\u30bf\u306e\u5024\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u4fdd\u5b58\u3059\u308b(incrementcounter\u304ctrue\u306e\u5834\u5408)\n * 3.Memcached\u3092\u30da\u30fc\u30b8\u540d\u3092Key\u306b\u3057\u3066\u78ba\u8a8d\u3059\u308b\u3002\n * 4.3\u3067\u53d6\u5f97\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u30c7\u30fc\u30bf\u30ec\u30b3\u30fc\u30c9\u304b\u3089\u6700\u65b0\u306edata\u3092\u53d6\u308a\u51fa\u3057\u3066\u3001Memcached\u306b\u683c\u7d0d\n * 5.\u52d5\u7684\u306a\u5024\uff08\u4e3b\u306b\u30ab\u30a6\u30f3\u30bf\uff09\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u8fd4\u3059\n * \n * \u7279\u4f8b\u3068\u3057\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30da\u30fc\u30b8\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3057\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30da\u30fc\u30b8\u304b\u3064\u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u60c5\u5831\u3092\u8fd4\u3059\n * \n * @param pageparam Page\u30d1\u30e9\u30e1\u30fc\u30bf\n * @param incrementcounter \u30ab\u30a6\u30f3\u30bf\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u5834\u5408\u306ftrue\n * @return HTML\u6587\u5b57\u5217\n */\n", "func_signal": "public PageData loadPage(PageParam pageparam, boolean incrementcounter)", "code": "{\n\tif (pageparam == null) {\n\t\tlogger.info(\"loadpage:pageparam null\");\n\t\treturn null;\n\t}\n\tString pagename = pageparam.get(PageParam.PAGEKEY);\n\tif (pagename == null) {\n\t\tlogger.info(\"loadpage:pagename null\");\n\t\treturn null;\n\t}\n\t\n\tSub sub = new Sub();\n\tWikiInfo info = sub.getWikiInfo(pagename, incrementcounter);\n\tif (info == null) {\n\t\tlogger.info(\"loadpage:info null:\" + pagename);\n\t\treturn sub.getDefaultHtmlData(pagename);\n\t}\n\t\n\tPageData pagedata = sub.getHtmlData(info, getWikiParser());\n\tif (pagedata == null) {\n\t\tlogger.info(\"loadpage:htmldata null:\" + pagename);\n\t\treturn null;\n\t}\n\t\n\tMap<String, String> countermap = sub.createCounterMap(info);\n\tString htmldata = new HtmlCounterMarger().margeHtml(pagedata.get(PageData.HTMLDATAKEY), countermap);\n\tpagedata.put(PageData.HTMLDATAKEY, htmldata);\n\t\n\tlogger.info(\"loadpage:done:\" + pagename);\n\treturn pagedata;\n}", "path": "src\\com\\appspot\\gaejwiki\\domain\\page\\PageLoader.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * WikiInfo\u3092\u8aad\u307f\u8fbc\u3080\u3068\u540c\u6642\u306b\u3001counter\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\n * \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5bfe\u8c61\n * \u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u5bfe\u8c61\u306f\u3001today\u53ca\u3073total\u3068\u3059\u308b\u3002\n * counterupdatedate\u3092\u898b\u3066\u3001\u6628\u65e5\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001today\u3092yesterday\u3068\u3057\u3001today\u306f\uff11\u306b\u3059\u308b\n * @param makeKey\n * @return\n */\n", "func_signal": "public WikiInfo loadAndIncrementData(Key key)", "code": "{\n\tPersistenceManager pm = PMF.get().getPersistenceManager();\n\t        try{\n\t            pm.currentTransaction().begin();\n\t\tWikiInfo info = pm.getObjectById(WikiInfo.class, key);\n\t\tif (isNextDay(info.getCounterupdatedate())) {\n\t\t\tinfo.setYesterdaycounter(info.getTodaycounter());\n\t\t\tinfo.setTodaycounter(1);\n\t\t} else {\n\t\t\tinfo.setTodaycounter(info.getTodaycounter() + 1);\n\t\t}\n\t\tinfo.setTotalcounter(info.getTotalcounter() + 1);\n    \tinfo.setUpdatedateNow();\n    \tinfo.setCounterupdatedateNow();\n    \tpm.makePersistent(info);\n\t\tpm.currentTransaction().commit();\n\t\treturn info;\n\t        } catch (Exception e) {\n\t        \treturn null;\n\t        } finally {\n\t        \tif(pm.currentTransaction().isActive()){\n\t    \t\t\tpm.currentTransaction().rollback();\n\t    \t\t}\n\t        \tpm.close();\n\t        }\n}", "path": "src\\com\\appspot\\gaejwiki\\data\\dao\\WikiInfo.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * @param pagename\n */\n", "func_signal": "public boolean checkPage(String pagename)", "code": "{\n\tassert (pagename != null);\n\tgetPageSet().add(pagename);\n\tif (allpageset.contains(pagename)) {\n\t\treturn true;\n\t} else {\n\t\tgetNonExistsPageSet().add(pagename);\n\t\treturn false;\n\t}\n}", "path": "src\\com\\appspot\\gaejwiki\\common\\wiki\\inline\\WikiObjectBlockInfo.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * Version\u60c5\u5831\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u4e0a\u66f8\u304d\u3059\u308b\n * @param pagename\n * @param wikiinfo\n * @return\n */\n", "func_signal": "public WikiInfo updateWikiInfo(String pagename, WikiInfo info)", "code": "{\n\tassert(info != null);\n\t\n\t    \tWikiInfo.Util util = new WikiInfo.Util();\n\t    \tinfo.setVersion(info.getVersion() + 1);\n\t    \tinfo.setUpdatedateNow();\n\t    \tutil.saveData(info);\n\t    \treturn info;\n}", "path": "src\\com\\appspot\\gaejwiki\\domain\\page\\PageSaver.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * \n * @param pagename\n * @return\n */\n", "func_signal": "public PageData getDefaultHtmlData(String pagename)", "code": "{\n\tassert(pagename != null);\n\t\n\tDomainParameter domainparam = DomainParameter.getDomainParameter();\n\tif (pagename.equals(domainparam.get(DomainParameter.DEFAULTPAGENAME))) {\n\t\tlogger.info(\"loadpage:defaultpage:\" + DomainParameter.DEFAULTPAGENAME);\n\t\tString html = loadTemplateFile(domainparam.getTemplateFilePath(domainparam.get(DomainParameter.DEFAULTMESSAGE)));\n\t\tPageData data = new PageData();\n\t\tdata.setWikiHtml(null, html);\n\t\treturn data;\n\t} else {\n\t\treturn null;\n\t}\n}", "path": "src\\com\\appspot\\gaejwiki\\domain\\page\\PageLoader.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * \u5f15\u6570\u306edate\u304c\u4eca\u65e5\u3068\u6bd4\u3079\u3066\u3001\uff11\u65e5\u4ee5\u4e0a\u524d\u304b\u3069\u3046\u304b\u8abf\u3079\u308b\n * @param date\n * @return date\u3088\u308a\u73fe\u5728\u304c\u5f8c\u3067\u3001\u65e5\u304c\u7570\u306a\u308b\u5834\u5408\u3001true \u305d\u308c\u4ee5\u5916\u306ffalse\n */\n", "func_signal": "public boolean isNextDay(Date date)", "code": "{\n\t    \tCalendar cal = Calendar.getInstance();\n\t    \tDate nowdate = cal.getTime();\n\t        SimpleDateFormat sdf1 = new SimpleDateFormat(\"dd\");\n\t        DomainParameter domainparam = DomainParameter.getDomainParameter();\n\t        String timezone = domainparam.get(DomainParameter.TIMEZONE);\n\t        if (timezone != null) {\n        sdf1.setTimeZone(TimeZone.getTimeZone(timezone));\n\t        }\n\t    \t\n\t    \treturn (nowdate.after(date) && (!sdf1.format(date).equals(sdf1.format(nowdate)))) ? true : false;\n\t\n}", "path": "src\\com\\appspot\\gaejwiki\\data\\dao\\WikiInfo.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * Page\u306e\u66f8\u304d\u8fbc\u307f\u3092\u3059\u308b\n * @param pagename\n * @param wikidata\n * @return\u3000\u65b0\u898f\u3067\u3042\u308c\u3070true\n */\n", "func_signal": "public boolean savePage(String pagename, String wikidata)", "code": "{\n\tif (pagename == null || wikidata == null) {\n\t\treturn false;\n\t}\n\t\n\tWikiParser parser = getParser();\n\tString htmldata = parser.parse(pagename, wikidata);\n\t\n\tSub sub = new Sub();\n\tWikiInfo info = sub.loadWikiInfo(pagename);\n\tboolean retcode;\n    \tif (info == null) {\n    \t\tretcode = true;\n    \t\tinfo = sub.createWikiInfo(pagename);\n    \t} else {\n    \t\tretcode = false;\n    \t\tinfo = sub.updateWikiInfo(pagename, info);\n    \t}\n\n\tsub.saveWikiData(info, wikidata);\n\tgetPageMemcacheSetterGetter().setPageWikiHtmlData(pagename, wikidata, htmldata);\n\tnew AddRefQueueCommand.Util().queueAddRef(pagename, parser.getNonExistsPageSet());\n\t\n\treturn retcode;\n}", "path": "src\\com\\appspot\\gaejwiki\\domain\\page\\PageSaver.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * @param allPageData\n */\n", "func_signal": "public void setAllPageData(String data)", "code": "{\n\tif (data == null) {\n\t\treturn;\n\t}\n\t\n\tfor (String page: new TextUtils().parseData(data)) {\n\t\tallpageset.add(page);\n\t}\n\t\n}", "path": "src\\com\\appspot\\gaejwiki\\common\\wiki\\inline\\WikiObjectBlockInfo.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * @param pagename\n * @return\n */\n", "func_signal": "public String[] getRefStringArrayRefIncoming(String pagename)", "code": "{\n\tassert(pagename != null);\n\treturn getRefStringArray(makeKey(pagename, KEYFOOTER_INCOMINGLINK));\n}", "path": "src\\com\\appspot\\gaejwiki\\data\\dao\\WikiRef.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * \n * @param info\n * @return\n */\n", "func_signal": "public PageData getHtmlData(WikiInfo info, WikiParser wikiparser)", "code": "{\n\tassert(info != null);\n\t\n\tWikiData.Util datautil = new WikiData.Util();\n\tKey datakey = datautil.makeKey(info.getKey(), info.getVersion());\n\t\n\tPageData mempegedata = new PageMemcacheSetterGetter().getPageData(info.getPagename());\n\tif (mempegedata != null) {\n\t\treturn mempegedata;\n\t}\n\t\n\tWikiData data = datautil.loadData(datakey, true);\n\tif (data == null) {\n\t\treturn null;\n\t}\n\t\n\tString htmldata = wikiparser.parse(info.getPagename(), data.getWikidataString());\n\tPageData pegedata = new PageData();\n\tpegedata.setWikiHtml(data.getWikidataString(), htmldata);\n\treturn pegedata;\n}", "path": "src\\com\\appspot\\gaejwiki\\domain\\page\\PageLoader.java", "repo_name": "daxanya1/GAEJWiki", "stars": 1, "license": "None", "language": "java", "size": 4856}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public void setCredentials(AuthScope authScope, Credentials credentials)", "code": "{\n    this.authScope      = authScope;\n    this.credentials    = credentials;\n    httpClient = null;\n}", "path": "src\\org\\jcouchdb\\db\\ServerImpl.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * Returns the contents of the response as bean of the given type.\n *\n * @return\n */\n", "func_signal": "public <T> T getContentAsBean(Class<T> cls)", "code": "{\n    T t = getParser().parse(cls, getCharacterSource());\n    return t;\n}", "path": "src\\org\\jcouchdb\\db\\Response.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * Equality based on id, language and view comparison <em>without</em> revision comparison.\n * This method basically checks if the other design document has exactly the same id, views\n * and language.\n *\n * @param that\n * @return\n */\n", "func_signal": "public boolean equalsIncludingContent(DesignDocument that)", "code": "{\n    return Util.equals(this.getId(), that.getId()) &&\n           Util.equals(this.getLanguage(), that.getLanguage()) &&\n           Util.equals(this.getViews(), that.getViews());\n\n}", "path": "src\\org\\jcouchdb\\document\\DesignDocument.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public List<String> listDatabases()", "code": "{\n    Response resp = null;\n    try\n    {\n        resp = get(\"/_all_dbs\");\n        if (!resp.isOk())\n        {\n            throw new CouchDBException(\"Error listing databases: \" + resp);\n        }\n        return resp.getContentAsList();\n    }\n    finally\n    {\n        if (resp != null)\n        {\n            resp.destroy();\n        }\n    }\n}", "path": "src\\org\\jcouchdb\\db\\ServerImpl.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public Response put(String uri, byte[] body, String contentType)", "code": "{\n    if (log.isDebugEnabled())\n    {\n        log.debug(\"PUT \" + uri + \", body = \" + body);\n    }\n\n    HttpPut put = new HttpPut(serverURI + uri);\n    if (body != null)\n    {\n        ByteArrayEntity reqEntity = new ByteArrayEntity(body);\n        reqEntity.setContentType(contentType);\n        put.setEntity(reqEntity);\n    }\n\n    return executePut(put);\n}", "path": "src\\org\\jcouchdb\\db\\ServerImpl.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * Returns the contents of the response as Map\n *\n * @return\n */\n", "func_signal": "public Map getContentAsMap()", "code": "{\n    Map map = getParser().parse(Map.class, getCharacterSource());\n    return map;\n}", "path": "src\\org\\jcouchdb\\db\\Response.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public Map<String,Map<String,Object>> getStats(String filter)", "code": "{\n    String uri = \"/_stats\";\n    \n    if (filter != null)\n    {\n        uri += filter;\n    }\n    \n    Response resp = get(uri);\n    return resp.getContentAsMap();\n}", "path": "src\\org\\jcouchdb\\db\\ServerImpl.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public Response put(String uri, String body)", "code": "{\n    if (log.isDebugEnabled())\n    {\n        log.debug(\"PUT \" + uri + \", body = \" + body);\n    }\n    HttpPut put = new HttpPut( serverURI + uri );\n    if (body != null) {\n        try {\n            StringEntity reqEntity = new StringEntity( body , \"UTF-8\");\n            reqEntity.setContentType(\"application/json\");\n            reqEntity.setContentEncoding( CHARSET );\n            put.setEntity( reqEntity );\n        }\n        catch (UnsupportedEncodingException e) {\n            throw ExceptionWrapper.wrap(e);\n        }\n    }\n\n    return executePut( put );        \n}", "path": "src\\org\\jcouchdb\\db\\ServerImpl.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public Response delete(String uri)", "code": "{\n    if (log.isDebugEnabled())\n    {\n        log.debug(\"DELETE \" + uri);\n    }\n\n    HttpDelete delete = new HttpDelete( serverURI + uri );\n\n    try\n    {\n        return execute(delete);\n    }\n    catch (IOException e)\n    {\n        delete.abort();\n        throw ExceptionWrapper.wrap(e);\n    }\n}", "path": "src\\org\\jcouchdb\\db\\ServerImpl.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public void deleteDatabase(String name)", "code": "{\n    Response resp = null;\n    try\n    {\n        resp = delete(\"/\" + name + \"/\");\n        if (!resp.isOk())\n        {\n            throw new CouchDBException(\"Cannot delete database \" + name + \": \" + resp);\n        }\n    }\n    finally\n    {\n        if (resp != null)\n        {\n            resp.destroy();\n        }\n    }\n}", "path": "src\\org\\jcouchdb\\db\\ServerImpl.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * Ensures that the id has the design document prefix and returns the id\n * @param id    id\n * @return  id with design document prefix\n */\n", "func_signal": "public static String extendId(String id)", "code": "{\n    if (id != null)\n    {\n//            if (id.startsWith(PREFIX_UNESCAPED))\n//            {\n//                id = PREFIX + id.substring(PREFIX_UNESCAPED.length());\n//            }\n//            else\n        if (!id.startsWith(PREFIX))\n        {\n            id = PREFIX + id;\n        }\n    }\n    return id;\n}", "path": "src\\org\\jcouchdb\\document\\DesignDocument.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public boolean createDatabase(String name)", "code": "{\n    Response resp = null;\n    try\n    {\n        resp = put(\"/\" + name + \"/\");\n        if (resp.isOk())\n        {\n            return true;\n        }\n        else\n        {\n            if (resp.getCode() == 412 || resp.getCode() == 500)\n            {\n                return false;\n            }\n            else\n            {\n                throw new CouchDBException(\"Error creating database: \" + resp);\n            }\n        }\n    }\n    finally\n    {\n        if (resp != null)\n        {\n            resp.destroy();\n        }\n    }\n}", "path": "src\\org\\jcouchdb\\db\\ServerImpl.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public Response post(String uri, String body)", "code": "{\n    if (log.isDebugEnabled())\n    {\n        log.debug(\"POST \" + uri + \", body = \" + body);\n    }\n\n    HttpPost post = new HttpPost( serverURI + uri );\n\n    try\n    {\n        StringEntity reqEntity = new StringEntity(body, \"UTF-8\");\n        reqEntity.setContentType(\"application/json\");\n        reqEntity.setContentEncoding(CHARSET);\n        post.setEntity(reqEntity);\n\n        return execute(post);\n    }\n    catch (IOException e)\n    {\n        post.abort();\n        throw ExceptionWrapper.wrap(e);\n    }\n}", "path": "src\\org\\jcouchdb\\db\\ServerImpl.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * Adds a show function to the design document\n *\n */\n", "func_signal": "public void addShowFunction(String name, String showFn)", "code": "{\n    if (shows == null)\n    {\n        shows = new HashMap<String, String>();\n    }\n    \n    shows.put(name, showFn);\n}", "path": "src\\org\\jcouchdb\\document\\DesignDocument.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * Adds a show function to the design document\n *\n */\n", "func_signal": "public void addListFunction(String name, String listFn)", "code": "{\n    if (lists == null)\n    {\n        lists = new HashMap<String, String>();\n    }\n    \n    lists.put(name, listFn);\n}", "path": "src\\org\\jcouchdb\\document\\DesignDocument.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * Null-safe hashcode implementation. Returns 0 if o is <code>null</code>.\n *\n * @param o\n * @return\n */\n", "func_signal": "public static int safeHashcode(Object o)", "code": "{\n    if (o == null)\n    {\n        return 0;\n    }\n    else\n    {\n        return o.hashCode();\n    }\n}", "path": "src\\org\\jcouchdb\\util\\Util.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * Returns the contents of the response as List\n *\n * @return\n */\n", "func_signal": "public List getContentAsList()", "code": "{\n    List list = getParser().parse(List.class, getCharacterSource());\n    return list;\n}", "path": "src\\org\\jcouchdb\\db\\Response.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * Two documents are equal if they have the same id and the same revision.\n *\n */\n", "func_signal": "@Override\npublic boolean equals(Object obj)", "code": "{\n    if (obj instanceof Document)\n    {\n        Document that = (Document)obj;\n        return Util.equals(this.getId(), that.getId()) && Util.equals(this.getRevision(),that.getRevision());\n    }\n    return false;\n}", "path": "src\\org\\jcouchdb\\document\\BaseDocument.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "/**\n * Two documents are equal if they have the same id and the same revision.\n *\n */\n", "func_signal": "@Override\npublic boolean equals(Object obj)", "code": "{\n    if (obj instanceof Document)\n    {\n        Document that = (Document)obj;\n        return Util.equals(this.getId(), that.getId()) && Util.equals(this.getRevision(),that.getRevision());\n    }\n    return false;\n}", "path": "test\\org\\jcouchdb\\db\\NotADocument.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "//    @AfterClass\n//    public static void deleteDB()\n//    {\n//        db.getServer().deleteDatabase(db.getName());\n//    }\n", "func_signal": "@Test\n    public void test()", "code": "{\n        TestListener listener = new TestListener();\n        db.registerChangeListener(null, null, null, listener);\n        \n        db.createDocument( newDoc(\"foo\",\"123\"));\n        db.createDocument( newDoc(\"bar\",\"456\"));\n        \n        \n        db.getServer().shutDown();\n    }", "path": "test\\org\\jcouchdb\\db\\ContinuousChangesDriverTestCase.java", "repo_name": "nborwankar/jcouchdb", "stars": 1, "license": "other", "language": "java", "size": 6972}
{"docstring": "//JOE\n", "func_signal": "public Object visitMethodCallCommand(MethodCallCommand ast, Object o)", "code": "{\n  //hm.. BS?\n  Declaration binding = (Declaration) ast.I2.visit(this, null);\n  if (binding == null)\n    reportUndeclared(ast.I);\n  else if (binding instanceof ProcDeclaration) {\n    ast.APS.visit(this, ((ProcDeclaration) binding).FPS);\n  } else if (binding instanceof ProcFormalParameter) {\n    ast.APS.visit(this, ((ProcFormalParameter) binding).FPS);\n  } else\n    reporter.reportError(\"\\\"%\\\" is not a procedure identifier\",\n                         ast.I.spelling, ast.I.position);\n  return null;\n}", "path": "Triangle\\ContextualAnalyzer\\Checker.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "// Finds an entry for the given identifier in the identification table,\n// if any. If there are several entries for that identifier, finds the\n// entry at the highest level, in accordance with the scope rules.\n// Returns null iff no entry is found.\n// otherwise returns the attribute field of the entry found.\n", "func_signal": "public Declaration retrieve (String id)", "code": "{\n\n  IdEntry entry;\n  Declaration attr = null;\n  boolean present = false, searching = true;\n\n  entry = this.latest;\n  while (searching) {\n    if (entry == null)\n      searching = false;\n    else if (entry.id.equals(id)) {\n      present = true;\n      searching = false;\n      attr = entry.attr;\n    } else\n      entry = entry.previous;\n  }\n\n  return attr;\n}", "path": "Triangle\\ContextualAnalyzer\\IdentificationTable.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "// isOperator returns true iff the given character is an operator character.\n", "func_signal": "private boolean isOperator(char c)", "code": "{\n    return (c == '+' || c == '-' || c == '*' || c == '/' ||\n\t    c == '=' || c == '<' || c == '>' || c == '\\\\' ||\n\t    c == '&' || c == '@' || c == '%' || c == '^' ||\n\t    c == '?');\n  }", "path": "Triangle\\SyntacticAnalyzer\\Scanner.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "// Returns the TypeDenoter of the Vname. Does not use the\n// given object.\n", "func_signal": "public Object visitDotVname(DotVname ast, Object o)", "code": "{\n  ast.type = null;\n  TypeDenoter vType = (TypeDenoter) ast.V.visit(this, null);\n  ast.variable = ast.V.variable;\n  if (! (vType instanceof RecordTypeDenoter))\n    reporter.reportError (\"record expected here\", \"\", ast.V.position);\n  else {\n    ast.type = checkFieldIdentifier(((RecordTypeDenoter) vType).FT, ast.I);\n    if (ast.type == StdEnvironment.errorType)\n      reporter.reportError (\"no field \\\"%\\\" in this record type\",\n                            ast.I.spelling, ast.I.position);\n  }\n  return ast.type;\n}", "path": "Triangle\\ContextualAnalyzer\\Checker.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "/**\n * Writes all instructions of the program in code store.\n */\n", "func_signal": "private static void disassembleProgram()", "code": "{\n  for (int addr = Machine.CB; addr < CT; addr++) {\n    System.out.print (addr + \":  \");\n    writeInstruction(Machine.code[addr]);\n    System.out.println();\n  }\n}", "path": "TAM\\Disassembler.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "// DISASSEMBLE\n", "func_signal": "public static void main(String[] args)", "code": "{\n    System.out.println (\"********** TAM Disassembler (Sun Version 2.1) **********\");\n\n    if (args.length == 1)\n      objectName = args[0];\n    else\n      objectName = \"obj.tam\";\n\n    loadObjectProgram(objectName);\n    disassembleProgram();\n  }", "path": "TAM\\Disassembler.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "// Writes the n-field of an instruction.\n/**\n * Writes the n-field of an instruction in the form \"(n)\".\n * @param n\tthe integer to write.\n */\n", "func_signal": "private static void writeN (int n)", "code": "{\n  System.out.print (\"(\" + n + \") \");\n  if (n < 10)\n    System.out.print (\"  \");\n  else if (n < 100)\n    System.out.print (\" \");\n}", "path": "TAM\\Disassembler.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "// Returns the TypeDenoter for the Array Aggregate. Does not use the\n// given object.\n", "func_signal": "public Object visitMultipleArrayAggregate(MultipleArrayAggregate ast, Object o)", "code": "{\n  TypeDenoter eType = (TypeDenoter) ast.E.visit(this, null);\n  TypeDenoter elemType = (TypeDenoter) ast.AA.visit(this, null);\n  ast.elemCount = ast.AA.elemCount + 1;\n  if (! eType.equals(elemType))\n    reporter.reportError (\"incompatible array-aggregate element\", \"\", ast.E.position);\n  return elemType;\n}", "path": "Triangle\\ContextualAnalyzer\\Checker.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "/**\n * Writes the r-field of an instruction in the form \"l<I>reg</I>r\", where\n * l and r are the bracket characters to use.\n * @param leftbracket\t\tthe character to print before the register.\n * @param r\t\t\tthe number of the register.\n * @param rightbracket \tthe character to print after the register.\n */\n", "func_signal": "private static void writeR (char leftbracket, int r, char rightbracket)", "code": "{\n\n  System.out.print(leftbracket);\n  switch (r) {\n    case Machine.CBr:\n      System.out.print (\"CB\");\n      break;\n    case Machine.CTr:\n\tSystem.out.print (\"CT\");\n\tbreak;\n    case Machine.PBr:\n\tSystem.out.print (\"PB\");\n\tbreak;\n    case Machine.PTr:\n\tSystem.out.print (\"PT\");\n\tbreak;\n    case Machine.SBr:\n\tSystem.out.print (\"SB\");\n\tbreak;\n    case Machine.STr:\n\tSystem.out.print (\"ST\");\n\tbreak;\n    case Machine.HBr:\n\tSystem.out.print (\"HB\");\n\tbreak;\n    case Machine.HTr:\n\tSystem.out.print (\"HT\");\n\tbreak;\n    case Machine.LBr:\n\tSystem.out.print (\"LB\");\n\tbreak;\n    case Machine.L1r:\n\tSystem.out.print (\"L1\");\n\tbreak;\n    case Machine.L2r:\n\tSystem.out.print (\"L2\");\n\tbreak;\n    case Machine.L3r:\n\tSystem.out.print (\"L3\");\n\tbreak;\n    case Machine.L4r:\n\tSystem.out.print (\"L4\");\n\tbreak;\n    case Machine.L5r:\n\tSystem.out.print (\"L5\");\n\tbreak;\n    case Machine.L6r:\n\tSystem.out.print (\"L6\");\n\tbreak;\n    case Machine.CPr:\n\tSystem.out.print (\"CP\");\n\tbreak;\n  }\n  System.out.print (rightbracket);\n}", "path": "TAM\\Disassembler.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "//JOE\n/*\n *\n * Hm.. could this be something?\n * Yep, it is.\n * woo hoo.\n *\n */\n", "func_signal": "public Object visitTypeDeclaration(TypeDeclaration ast, Object o)", "code": "{\n  ast.T = (TypeDenoter) ast.T.visit(this, null);\n  idTable.enter (ast.I.spelling, ast);\n  if (ast.duplicated)\n    reporter.reportError (\"identifier \\\"%\\\" already declared\",\n                          ast.I.spelling, ast.position);\n  return null;\n}", "path": "Triangle\\ContextualAnalyzer\\Checker.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "/////////////////////////////////////////////////////////////////////////////\n", "func_signal": "public Checker (ErrorReporter reporter)", "code": "{\n  this.reporter = reporter;\n  this.idTable = new IdentificationTable ();\n  establishStdEnvironment();\n}", "path": "Triangle\\ContextualAnalyzer\\Checker.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "// Creates a small AST to represent the \"declaration\" of a standard\n// type, and enters it in the identification table.\n", "func_signal": "private ConstDeclaration declareStdConst (String id, TypeDenoter constType)", "code": "{\n\n  IntegerExpression constExpr;\n  ConstDeclaration binding;\n\n  // constExpr used only as a placeholder for constType\n  constExpr = new IntegerExpression(null, dummyPos);\n  constExpr.type = constType;\n  binding = new ConstDeclaration(new Identifier(id, dummyPos), constExpr, dummyPos);\n  idTable.enter(id, binding);\n  return binding;\n}", "path": "Triangle\\ContextualAnalyzer\\Checker.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "// scanSeparator skips a single separator.\n", "func_signal": "private void scanSeparator()", "code": "{\n  switch (currentChar) {\n  case '!':\n    {\n      takeIt();\n      while ((currentChar != SourceFile.EOL) && (currentChar != SourceFile.EOT))\n        takeIt();\n      if (currentChar == SourceFile.EOL)\n        takeIt();\n    }\n    break;\n\n  case ' ': case '\\n': case '\\r': case '\\t':\n    takeIt();\n    break;\n  }\n}", "path": "Triangle\\SyntacticAnalyzer\\Scanner.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "// JOE\n", "func_signal": "public Object visitClassTypeDenoter(ClassTypeDenoter ast, Object o)", "code": "{\n    /*ast.D = (Declaration)*/\n    ast.D.visit(this, null);\n    return ast;\n  }", "path": "Triangle\\ContextualAnalyzer\\Checker.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "// Creates a small AST to represent the \"declaration\" of a\n// binary operator, and enters it in the identification table.\n// This \"declaration\" summarises the operator's type info.\n", "func_signal": "private BinaryOperatorDeclaration declareStdBinaryOp\n  (String op, TypeDenoter arg1Type, TypeDenoter arg2type, TypeDenoter resultType)", "code": "{\n\n  BinaryOperatorDeclaration binding;\n\n  binding = new BinaryOperatorDeclaration (new Operator(op, dummyPos),\n                                           arg1Type, arg2type, resultType, dummyPos);\n  idTable.enter(op, binding);\n  return binding;\n}", "path": "Triangle\\ContextualAnalyzer\\Checker.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "// Draw the AST representing a complete program.\n", "func_signal": "public void draw(Program ast)", "code": "{\n  theAST = ast;\n  panel = new DrawerPanel(this);\n  frame = new DrawerFrame(panel);\n\n  Font font = new Font(\"SansSerif\", Font.PLAIN, 12);\n  frame.setFont(font);\n\n  FontMetrics fontMetrics = frame.getFontMetrics(font);\n\n  LayoutVisitor layout = new LayoutVisitor(fontMetrics);\n  theDrawing = (DrawingTree) theAST.visit(layout, null);\n  theDrawing.position(new Point(2048, 10));\n\n  //Updated by JOE\n  frame.setVisible(true);\n}", "path": "Triangle\\TreeDrawer\\Drawer.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "/**\n * Writes the given instruction in assembly-code format.\n * @param instr\tthe instruction to display.\n */\n", "func_signal": "private static void writeInstruction (Instruction instr)", "code": "{\n\n  switch (instr.op) {\n    case Machine.LOADop:\n\tSystem.out.print (\"LOAD  \");\n\twriteN(instr.n);\n\twriteD(instr.d);\n\twriteR('[', instr.r, ']');\n\tbreak;\n\n    case Machine.LOADAop:\n      System.out.print (\"LOADA \");\n      blankN();\n      writeD(instr.d);\n      writeR('[', instr.r, ']');\n      break;\n\n    case Machine.LOADIop:\n      System.out.print (\"LOADI \");\n      writeN(instr.n);\n      break;\n\n    case Machine.LOADLop:\n      System.out.print (\"LOADL \");\n      blankN();\n      writeD(instr.d);\n      break;\n\n    case Machine.STOREop:\n      System.out.print (\"STORE \");\n      writeN(instr.n);\n      writeD(instr.d);\n      writeR('[', instr.r, ']');\n      break;\n\n    case Machine.STOREIop:\n      System.out.print (\"STOREI\");\n      writeN(instr.n);\n      break;\n\n    case Machine.CALLop:\n      System.out.print (\"CALL  \");\n      if (instr.r == Machine.PBr) {\n        blankN();\n        writePrimitive(instr.d);\n      } else {\n        writeR('(', instr.n, ')');\n        System.out.print (\"  \");\n        writeD(instr.d);\n        writeR('[', instr.r, ']');\n      }\n      break;\n\n    case Machine.CALLIop:\n      System.out.print (\"CALLI \");\n\tbreak;\n\n    case Machine.RETURNop:\n      System.out.print (\"RETURN\");\n      writeN(instr.n);\n      writeD(instr.d);\n      break;\n\n    case Machine.PUSHop:\n      System.out.print (\"PUSH  \");\n      blankN();\n      writeD(instr.d);\n      break;\n\n    case Machine.POPop:\n      System.out.print (\"POP   \");\n      writeN(instr.n);\n      writeD(instr.d);\n      break;\n\n    case Machine.JUMPop:\n      System.out.print (\"JUMP  \");\n      blankN();\n      writeD(instr.d);\n      writeR('[', instr.r, ']');\n      break;\n\n    case Machine.JUMPIop:\n      System.out.print (\"JUMPI \");\n      break;\n\n    case Machine.JUMPIFop:\n      System.out.print (\"JUMPIF\");\n      writeN(instr.n);\n      writeD(instr.d);\n      writeR('[', instr.r, ']');\n      break;\n\n    case Machine.HALTop:\n      System.out.print (\"HALT  \");\n  }\n}", "path": "TAM\\Disassembler.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "// Programs\n", "func_signal": "public Object visitProgram(Program ast, Object o)", "code": "{\n  ast.C.visit(this, null);\n  return null;\n}", "path": "Triangle\\ContextualAnalyzer\\Checker.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "///////////////////////////////////////////////////////////////////////////////\n", "func_signal": "public Scanner(SourceFile source)", "code": "{\n    sourceFile = source;\n    currentChar = sourceFile.getSource();\n    debug = false;\n  }", "path": "Triangle\\SyntacticAnalyzer\\Scanner.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "///////////////////////////////////////////////////////////////////////////////\n//\n// PROGRAMS\n//\n///////////////////////////////////////////////////////////////////////////////\n", "func_signal": "public Program parseProgram()", "code": "{\n\n    Program programAST = null;\n\n    previousTokenPosition.start = 0;\n    previousTokenPosition.finish = 0;\n    currentToken = lexicalAnalyser.scan();\n\n    try {\n      Command cAST = parseCommand();\n      programAST = new Program(cAST, previousTokenPosition);\n      if (currentToken.kind != Token.EOT) {\n        syntacticError(\"\\\"%\\\" not expected after end of program\",\n          currentToken.spelling);\n      }\n    }\n    catch (SyntaxError s) { return null; }\n    return programAST;\n  }", "path": "Triangle\\SyntacticAnalyzer\\Parser.java", "repo_name": "Yasumoto/compilers", "stars": 1, "license": "None", "language": "java", "size": 440}
{"docstring": "/** Same functionality as {@link #setDebugMillis(int repaintMillis)} only this method returns <code>this</code> for chaining multiple calls.\n * <p>\n * For a more thorough explanation of what this constraint does see the white paper or cheat Sheet at www.migcomponents.com.\n * @param repaintMillis The new debug repaint interval.\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new LayoutConstraint().noGrid().gap().fill()</code>.\n * @see #setDebugMillis(int)\n */\n", "func_signal": "public final LC debug(int repaintMillis)", "code": "{\n\tsetDebugMillis(repaintMillis);\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\LC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** The minimum width for the container. The value will override any value that is set on the container itself.\n * <p>\n * For a more thorough explanation of what this constraint does see the white paper or Cheat Sheet at www.migcontainers.com.\n * @param width The width expressed as a <code>UnitValue</code>. E.g. \"100px\" or \"200mm\".\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new LayoutConstraint().noGrid().gap().fill()</code>.\n */\n", "func_signal": "public final LC minWidth(String width)", "code": "{\n\tsetWidth(LayoutUtil.derive(getWidth(), ConstraintParser.parseUnitValue(width, true), null, null));\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\LC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** Specifies that the indicated rows/columns should not be grid-like. The while row/colum will have its components layed out\n * in one single cell. It is the same as to say that the cells in this column/row will all be merged (a.k.a spanned).\n * <p>\n * For a more thorough explanation of what this constraint does see the white paper or cheat Sheet at www.migcomponents.com.\n * @param indexes The index(es) (0-based) of the columns/rows that should be affected by this constraint.\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new AxisConstraint().noGrid().gap().fill()</code>.\n */\n", "func_signal": "public final AC noGrid(int... indexes)", "code": "{\n\tfor (int i = indexes.length - 1; i >= 0; i--) {\n\t\tint ix = indexes[i];\n\t\tmakeSize(ix);\n\t\tcList.get(ix).setNoGrid(true);\n\t}\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\AC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** Same functionality as <code>setGridGapY(ConstraintParser.parseBoundSize(boundsSize, true, false))</code> only this method\n * returns <code>this</code> for chaining multiple calls.\n * <p>\n * For a more thorough explanation of what this constraint does see the white paper or cheat Sheet at www.migcomponents.com.\n * @param boundsSize The <code>BoundSize</code> of the gap. This is a minimum and/or preferred and/or maximum size. E.g.\n * <code>\"50:100:200\"</code> or <code>\"100px\"</code>.\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new LayoutConstraint().noGrid().gap().fill()</code>.\n * @see #setGridGapY(BoundSize)\n */\n", "func_signal": "public final LC gridGapY(String boundsSize)", "code": "{\n\tsetGridGapY(ConstraintParser.parseBoundSize(boundsSize, true, false));\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\LC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** The maximum width for the container. The value will override any value that is set on the container itself.\n * <p>\n * For a more thorough explanation of what this constraint does see the white paper or Cheat Sheet at www.migcontainers.com.\n * @param width The width expressed as a <code>UnitValue</code>. E.g. \"100px\" or \"200mm\".\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new LayoutConstraint().noGrid().gap().fill()</code>.\n */\n", "func_signal": "public final LC maxWidth(String width)", "code": "{\n\tsetWidth(LayoutUtil.derive(getWidth(), null, null, ConstraintParser.parseUnitValue(width, true)));\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\LC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** Same functionality as {@link #setFillY(boolean true)} only this method returns <code>this</code> for chaining multiple calls.\n * <p>\n * For a more thorough explanation of what this constraint does see the white paper or cheat Sheet at www.migcomponents.com.\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new LayoutConstraint().noGrid().gap().fill()</code>.\n */\n", "func_signal": "public final LC fillY()", "code": "{\n\tsetFillY(true);\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\LC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** Sets the total number of rows/columns to <code>size</code>. If the number of rows/columns is already more\n * than <code>size</code> nothing will happen.\n * @param size The total number of rows/columns\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new AxisConstraint().noGrid().gap().fill()</code>.\n */\n", "func_signal": "public final AC count(int size)", "code": "{\n\tmakeSize(size);\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\AC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** Sets a wrap after the number of columns/rows that is defined in the {@link net.miginfocom.layout.AC}.\n * <p>\n * Same functionality as {@link #setWrapAfter(int 0)} only this method returns <code>this</code> for chaining multiple calls.\n * <p>\n * For a more thorough explanation of what this constraint does see the white paper or cheat Sheet at www.migcomponents.com.\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new LayoutConstraint().noGrid().gap().fill()</code>.\n */\n", "func_signal": "public final LC wrap()", "code": "{\n\tsetWrapAfter(0);\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\LC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** Sets the same inset (expressed as a <code>UnitValue</code>, e.g. \"10px\" or \"20mm\") all around.\n * <p>\n * For a more thorough explanation of what this constraint does see the white paper or cheat Sheet at www.migcomponents.com.\n * @param allSides The unit value to set for all sides. May be <code>null</code> which means that the default panel insets\n * for the platform is used.\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new LayoutConstraint().noGrid().gap().fill()</code>.\n * @see #setInsets(UnitValue[])\n */\n", "func_signal": "public final LC insetsAll(String allSides)", "code": "{\n\tUnitValue insH = ConstraintParser.parseUnitValue(allSides, true);\n\tUnitValue insV = ConstraintParser.parseUnitValue(allSides, false);\n\tinsets = new UnitValue[] {insV, insH, insV, insH}; // No setter to avoid copy again\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\LC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** Specifies that the indicated rows'/columns' component should grow by default. It does not affect the size of the row/column.\n * <p>\n * For a more thorough explanation of what this constraint does see the white paper or cheat Sheet at www.migcomponents.com.\n * @param indexes The index(es) (0-based) of the columns/rows that should be affected by this constraint.\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new AxisConstraint().noGrid().gap().fill()</code>.\n */\n", "func_signal": "public final AC fill(int... indexes)", "code": "{\n\tfor (int i = indexes.length - 1; i >= 0; i--) {\n\t\tint ix = indexes[i];\n\t\tmakeSize(ix);\n\t\tcList.get(ix).setFill(true);\n\t}\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\AC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** How a component that is hidden (not visible) should be treated.\n * @param mode The mode:<br>\n * 0 == Normal. Bounds will be caclulated as if the component was visible.<br>\n * 1 == If hidden the size will be 0, 0 but the gaps remain.<br>\n * 2 == If hidden the size will be 0, 0 and gaps set to zero.<br>\n * 3 == If hidden the component will be disregarded completely and not take up a cell in the grid..\n */\n", "func_signal": "public final void setHideMode(int mode)", "code": "{\n\tif (mode < 0 || mode > 3)\n\t\tthrow new IllegalArgumentException(\"Wrong hideMode: \" + mode);\n\n\tthis.hideMode = mode;\n}", "path": "src\\net\\miginfocom\\layout\\LC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** Specifies the indicated rows'/columns' gap size to <code>size</code>.\n * <p>\n * For a more thorough explanation of what this constraint does see the white paper or cheat Sheet at www.migcomponents.com.\n * @param size minimum and/or preferred and/or maximum size of the gap between this and the next row/column.\n * The string will be interpreted as a <b>BoundSize</b>. For more info on how <b>BoundSize</b> is formatted see the documentation.\n * @param indexes The index(es) (0-based) of the columns/rows that should be affected by this constraint.\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new AxisConstraint().noGrid().gap().fill()</code>.\n */\n", "func_signal": "public final AC gap(String size, int... indexes)", "code": "{\n\tBoundSize bsa = size != null ? ConstraintParser.parseBoundSize(size, true, true) : null;\n\n\tfor (int i = indexes.length - 1; i >= 0; i--) {\n\t\tint ix = indexes[i];\n\t\tmakeSize(ix);\n\t\tif (bsa != null)\n\t\t\tcList.get(ix).setGapAfter(bsa);\n\t}\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\AC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** The minimum height for the container. The value will override any value that is set on the container itself.\n * <p>\n * For a more thorough explanation of what this constraint does see the white paper or Cheat Sheet at www.migcontainers.com.\n * @param height The height expressed as a <code>UnitValue</code>. E.g. \"100px\" or \"200mm\".\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new LayoutConstraint().noGrid().gap().fill()</code>.\n */\n", "func_signal": "public final LC minHeight(String height)", "code": "{\n\tsetHeight(LayoutUtil.derive(getHeight(), ConstraintParser.parseUnitValue(height, false), null, null));\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\LC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** The maximum height for the container. The value will override any value that is set on the container itself.\n * <p>\n * For a more thorough explanation of what this constraint does see the white paper or cheat Sheet at www.migcontainers.com.\n * @param height The height expressed as a <code>UnitValue</code>. E.g. \"100px\" or \"200mm\".\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new LayoutConstraint().noGrid().gap().fill()</code>.\n */\n", "func_signal": "public final LC maxHeight(String height)", "code": "{\n\tsetHeight(LayoutUtil.derive(getHeight(), null, null, ConstraintParser.parseUnitValue(height, false)));\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\LC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** Sets the different {@link net.miginfocom.layout.DimConstraint}s that this object should consists of.\n * @param constr The different {@link net.miginfocom.layout.DimConstraint}s that this object consists of. The list\n * will be copied for storage. <code>null</code> or and emty array will reset the constaints to one <code>DimConstraint</code>\n * with default values.\n */\n", "func_signal": "public final void setConstaints(DimConstraint[] constr)", "code": "{\n\tif (constr == null || constr.length < 1 )\n\t\tconstr = new DimConstraint[] {new DimConstraint()};\n\n\tcList.clear();\n\tcList.ensureCapacity(constr.length);\n\tfor (int i = 0; i < constr.length; i++)\n\t\tcList.add(constr[i]);\n}", "path": "src\\net\\miginfocom\\layout\\AC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** Specifies the indicated rows'/columns' shrink weight withing the columns/rows with the same <code>shrink priority</code>.\n * <p>\n * For a more thorough explanation of what this constraint does see the White Paper or Cheat Sheet at www.migcomponents.com.\n * @param w The shrink weight.\n * @param indexes The index(es) (0-based) of the columns/rows that should be affected by this constraint.\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new AxisConstraint().noGrid().gap().fill()</code>.\n */\n", "func_signal": "public final AC shrinkWeight(float w, int... indexes)", "code": "{\n\tFloat sw = new Float(w);\n\tfor (int i = indexes.length - 1; i >= 0; i--) {\n\t\tint ix = indexes[i];\n\t\tmakeSize(ix);\n\t\tcList.get(ix).setShrink(sw);\n\t}\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\AC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** Same functionality as {@link #setFlowX(boolean true)} only this method returns <code>this</code> for chaining multiple calls.\n * <p>\n * For a more thorough explanation of what this constraint does see the white paper or cheat Sheet at www.migcomponents.com.\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new LayoutConstraint().noGrid().gap().fill()</code>.\n */\n", "func_signal": "public final LC flowX()", "code": "{\n\tsetFlowX(true);\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\LC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** Specifies the indicated rows'/columns' shrink priority.\n * <p>\n * For a more thorough explanation of what this constraint does see the white paper or cheat Sheet at www.migcomponents.com.\n * @param p The new shrink priority.\n * @param indexes The index(es) (0-based) of the columns/rows that should be affected by this constraint.\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new AxisConstraint().noGrid().gap().fill()</code>.\n */\n", "func_signal": "public final AC shrinkPrio(int p, int... indexes)", "code": "{\n\tfor (int i = indexes.length - 1; i >= 0; i--) {\n\t\tint ix = indexes[i];\n\t\tmakeSize(ix);\n\t\tcList.get(ix).setShrinkPriority(p);\n\t}\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\AC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** Specifies the indicated rows'/columns' min and/or preferred and/or max size. E.g. <code>\"10px\"</code> or <code>\"50:100:200\"</code>.\n * <p>\n * For a more thorough explanation of what this constraint does see the white paper or cheat Sheet at www.migcomponents.com.\n * @param size The minimum and/or preferred and/or maximum size of this row. The string will be interpreted\n * as a <b>BoundSize</b>. For more info on how <b>BoundSize</b> is formatted see the documentation.\n * @param indexes The index(es) (0-based) of the columns/rows that should be affected by this constraint.\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new AxisConstraint().noGrid().gap().fill()</code>.\n */\n", "func_signal": "public final AC size(String size, int... indexes)", "code": "{\n\tBoundSize bs = ConstraintParser.parseBoundSize(size, false, true);\n\tfor (int i = indexes.length - 1; i >= 0; i--) {\n\t\tint ix = indexes[i];\n\t\tmakeSize(ix);\n\t\tcList.get(ix).setSize(bs);\n\t}\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\AC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "/** Same functionality as {@link #setFlowX(boolean false)} only this method returns <code>this</code> for chaining multiple calls.\n * <p>\n * For a more thorough explanation of what this constraint does see the white paper or cheat Sheet at www.migcomponents.com.\n * @return <code>this</code> so it is possible to chain calls. E.g. <code>new LayoutConstraint().noGrid().gap().fill()</code>.\n */\n", "func_signal": "public final LC flowY()", "code": "{\n\tsetFlowX(false);\n\treturn this;\n}", "path": "src\\net\\miginfocom\\layout\\LC.java", "repo_name": "wadoon/HammingCodeApplet", "stars": 1, "license": "None", "language": "java", "size": 340}
{"docstring": "//Creates jTextField0 and sets the field length, tooltip etc.\n", "func_signal": "private JTextField getJTextField()", "code": "{\n\tif (jTextField0 == null) {\n\t\tjTextField0 = new JTextField();\n\t\tjTextField0.setToolTipText(\"Forename\");\n\t\tjTextField0.setDocument\n\t\t\t(new JTextFieldLimit(25));\n\t\tjTextField0.setColumns(25);\n\t}\n\treturn jTextField0;\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//Creates jTextField4 and sets the field length, tooltip etc.\n", "func_signal": "private JTextField getJTextField4()", "code": "{\n\tif (jTextField4 == null) {\n\t\tjTextField4 = new JTextField();\n\t\tjTextField4.setToolTipText(\"Address Line 3\");\n\t\tjTextField4.setDocument\n\t\t\t(new JTextFieldLimit(30));\n\t\tjTextField4.setColumns(30);\n\t}\n\treturn jTextField4;\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//Creates jButton and sets it so that when clicked, the method database() is called.\n", "func_signal": "private JButton getJButton()", "code": "{\n\tif (jButton == null) {\n\t\tjButton = new JButton();\n\t\tjButton.setText(\"Submit\");\n\t\tjButton.addActionListener(new java.awt.event.ActionListener() {\n\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent e) {\n\t\t\t\tdatabase();\n\t\t\t}\n\t\t});\n\t}\n\treturn jButton;\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//Creates jTextField9 and sets the field length, tooltip etc.\n", "func_signal": "private JTextField getJTextField9()", "code": "{\n\tif (jTextField9 == null) {\n\t\tjTextField9 = new JTextField();\n\t\tjTextField9.setToolTipText(\"Telephone Number\");\n\t\tjTextField9.setDocument\n\t\t\t(new JTextFieldLimit(12));\n\t\tjTextField9.setColumns(11);\n\t}\n\treturn jTextField9;\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//Creates jTextField1 and sets the field length, tooltip etc.\n", "func_signal": "private JTextField getJTextField1()", "code": "{\n\tif (jTextField1 == null) {\n\t\tjTextField1 = new JTextField();\n\t\tjTextField1.setToolTipText(\"Surname\");\n\t\tjTextField1.setDocument\n\t\t\t(new JTextFieldLimit(27));\n\t\tjTextField1.setColumns(27);\n\t}\n\treturn jTextField1;\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//Creates jTextField10 and sets the field length, tooltip etc.\n", "func_signal": "private JTextField getJTextField10()", "code": "{\n\tif (jTextField10 == null) {\n\t\tjTextField10 = new JTextField();\n\t\tjTextField10.setToolTipText(\"Email Address\");\n\t\tjTextField10.setDocument\n\t\t\t(new JTextFieldLimit(50));\n\t\tjTextField10.setColumns(50);\n\t\t//Not 150 for feasible size of text box. Is 50 instead\n\t}\n\treturn jTextField10;\t\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "/**\n * This method checks if a String contains only numbers\n */\n", "func_signal": "public boolean anyNumbers(String str)", "code": "{\n    \n    //It can't contain only numbers if it's null or empty...\n    if (str == null || str.length() == 0)\n        return true;\n    \n    for (int i = 0; i < str.length(); i++) {\n\n        //If we find a digit character we return true.\n        if (Character.isDigit(str.charAt(i)))\n            return true;\n    }\n    \n    return false;\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//The main class\n//Initialises everything\n", "func_signal": "public applet()", "code": "{\n\tsuper();\n\tinitialize();\n\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//Creates jTextField5 and sets the field length, tooltip etc.\n", "func_signal": "private JTextField getJTextField5()", "code": "{\n\tif (jTextField5 == null) {\n\t\tjTextField5 = new JTextField();\n\t\tjTextField5.setToolTipText(\"Address Line 4\");\n\t\tjTextField5.setDocument\n\t\t\t(new JTextFieldLimit(30));\n\t\tjTextField5.setColumns(30);\n\t}\n\treturn jTextField5;\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//Sets up the standard class database()\n", "func_signal": "public void database()", "code": "{\n\t\n\t\tint valid = 0;\n\t\tString forename = null, surname = null, address0 = null, address1 = null;\n\t\tString address2 = null, address3 = null, address4 = null, address5 = null;\n\t\tString postcode = null, phone = null, email = null, fax = null, mobile = null;\n\t\t\n\t\t//Creates a string called title that get's the selected item from jComboBox2\n\t\tString title = (String) jComboBox2.getSelectedItem();\n\t\t\n\n\t\tif (jTextField0.getText().equals(\"\") || anyNumbers(jTextField0.getText()))\n\t\t{\n\t\t\tjLabel1.setForeground(Color.red);\n\t\t\tvalid = 1;\n\t\t} else {\n\t\t\tjLabel1.setForeground(Color.black);\n\t\t\t//Creates a string called forename that get's the text from jTextField0\n\t\t\tforename = jTextField0.getText();\n\t\t\t\n\t\t}\n\t\t\n\t\tif (jTextField1.getText().equals(\"\") || anyNumbers(jTextField1.getText()))\n\t\t{\n\t\t\tjLabel2.setForeground(Color.red);\n\t\t\tvalid = 1;\n\t\t} else {\n\t\t\tjLabel2.setForeground(Color.black);\n\t\t\t//Creates a string called surname that get's the text from jTextField1\n\t\t\tsurname = jTextField1.getText();\n\t\t}\n\t\t\n\t\tif (jTextField2.getText().equals(\"\") || jTextField2.getText().length() <= 1)\n\t\t{\n\t\t\tjLabel3.setForeground(Color.red);\n\t\t\tvalid = 1;\n\t\t} else {\n\t\t\tjLabel3.setForeground(Color.black);\n\t\t\t//Creates a string called address0 that get's the text from jTextField2\n\t\t\taddress0 = jTextField2.getText();\n\t\t}\n\n\n\t\t\n\t\tif (jTextField3.getText().length() == 1)\n\t\t{\n\t\t\t\tjLabel4.setForeground(Color.red);\n\t\t\t\tvalid = 1;\n\t\t} else {\n\t\t\t\tjLabel4.setForeground(Color.black);\n\t\t\t\t//Creates a string called address1 that get's the text from jTextField3\n\t\t\t\taddress1 = jTextField3.getText();\n\t\t}\n\n\t\tif (jTextField4.getText().length() == 1)\n\t\t{\n\t\t\t\tjLabel5.setForeground(Color.red);\n\t\t\t\tvalid = 1;\n\t\t} else {\n\t\t\t\tjLabel5.setForeground(Color.black);\n\t\t\t\t//Creates a string called address2 that get's the text from jTextField4\n\t\t\t\taddress2 = jTextField4.getText();\n\t\t}\n\n\t\tif (jTextField5.getText().length() == 1)\n\t\t{\n\t\t\t\tjLabel6.setForeground(Color.red);\n\t\t\t\tvalid = 1;\n\t\t} else {\n\t\t\t\tjLabel6.setForeground(Color.black);\n\t\t\t\t//Creates a string called address3 that get's the text from jTextField5\n\t\t\t\taddress3 = jTextField5.getText();\n\t\t}\n\t\n\t\tif (jTextField6.getText().length() == 1)\n\t\t{\n\t\t\t\tjLabel7.setForeground(Color.red);\n\t\t\t\tvalid = 1;\n\t\t} else {\n\t\t\t\tjLabel7.setForeground(Color.black);\n\t\t\t\t//Creates a string called address1 that get's the text from jTextField6\n\t\t\t\taddress4 = jTextField6.getText();\n\t\t}\n\t\t\n\t\tif (jTextField7.getText().length() == 1)\n\t\t{\n\t\t\t\tjLabel8.setForeground(Color.red);\n\t\t\t\tvalid = 1;\n\t\t} else {\n\t\t\t\tjLabel8.setForeground(Color.black);\n\t\t\t\t//Creates a string called address1 that get's the text from jTextField7\n\t\t\t\taddress5 = jTextField7.getText();\n\t\t}\n\t\t\t\t\t\n\t\tif (jTextField8.getText().equals(\"\") || jTextField8.getText().length() <6 || jTextField8.getText().length() >8)\n\t\t{\n\t\t\tjLabel14.setForeground(Color.red);\n\t\t\tvalid = 1;\n\t\t} else {\n\t\t\tif (jTextField8.getText().matches(\"[A-Z]{1,2}[1-9][0-9]? ?[0-9][A-Z]{2}\"))\n\t\t\t{\n\t\t\t\tjLabel14.setForeground(Color.black);\n\t\t\t\t//Creates a string called postcode that get's the text from jTextField8\n\t\t\t\tpostcode = jTextField8.getText();\t\t\t\t\t\n\t\t\t} else {\n\t\t\t\tjLabel14.setForeground(Color.red);\n\t\t\t\tvalid = 1;\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tif (jTextField9.getText().matches(\"^\\\\(?(\\\\d{3})\\\\)?[- ]?(\\\\d{3})[- ]?(\\\\d{5})$\"))\n\t\t{\n\t\t\tjLabel9.setForeground(Color.black);\n\t\t\t//Creates a string called phone that get's the text from jTextField9\n\t\t\tphone = jTextField9.getText();\n\t\t} else if (jTextField9.getText().equals(\"\"))\n\t\t{\n\t\t\tjLabel9.setForeground(Color.black);\n\t\t\t//Creates a string called phone that get's the text from jTextField9\n\t\t\tphone = jTextField9.getText();\n\t\t} else {\n\t\t\tjLabel9.setForeground(Color.red);\n\t\t\tvalid = 1;\n\t\t}\n\t\t\n\t\tif (jTextField10.getText().equals(\"\") || jTextField10.getText().length() < 7)\n\t\t{\n\t\t\tjLabel10.setForeground(Color.red);\n\t\t\tvalid = 1;\n\t\t} else {\n\t\t\tif (jTextField10.getText().matches(\"[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,4}\"))\n\t\t\t{\n\t\t\t\tjLabel10.setForeground(Color.black);\n\t\t\t\t//Creates a string called email that get's the text from jTextField10\n\t\t\t\temail = jTextField10.getText();\n\t\t\t} else {\n\t\t\t\tjLabel9.setForeground(Color.red);\n\t\t\t\tvalid = 1;\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\n\t\t//Creates a string called type that get's the selected item from jComboBox1\n\t\tString type = (String) jComboBox1.getSelectedItem();\n\t\t\n\t\tif (jTextField11.getText().matches(\"^\\\\(?(\\\\d{3})\\\\)?[- ]?(\\\\d{3})[- ]?(\\\\d{5})$\"))\n\t\t{\n\t\t\tjLabel12.setForeground(Color.black);\n\t\t\t//Creates a string called fax that get's the text from jTextField11\n\t\t\tfax = jTextField11.getText();\n\t\t} else if (jTextField11.getText().equals(\"\"))\n\t\t{\n\t\t\tjLabel12.setForeground(Color.black);\n\t\t\t//Creates a string called fax that get's the text from jTextField11\n\t\t\tfax = jTextField11.getText();\n\t\t} else {\n\t\t\tjLabel12.setForeground(Color.red);\n\t\t\tvalid = 1;\n\t\t}\n\t\t\n\t\tif (jTextField12.getText().matches(\"^\\\\(?(\\\\d{3})\\\\)?[- ]?(\\\\d{3})[- ]?(\\\\d{5})$\"))\n\t\t{\n\t\t\tjLabel13.setForeground(Color.black);\n\t\t\t//Creates a string called mobile that get's the text from jTextField12\n\t\t\tmobile = jTextField12.getText();\n\t\t} else if (jTextField12.getText().equals(\"\"))\n\t\t{\n\t\t\tjLabel13.setForeground(Color.black);\n\t\t\t//Creates a string called mobile that get's the text from jTextField12\n\t\t\tmobile = jTextField12.getText();\n\t\t} else {\n\t\t\tjLabel13.setForeground(Color.red);\n\t\t\tvalid = 1;\n\t\t}\n\t\t\n\t\tif (valid == 0)\n\t\t{\n\t\t\t//Creates a string called insertString that will insert the variables (see above)\n\t\t\t//into the relevant fields in the MySQL table\n\t\t\tString insertString = \"insert into customers (title, forename, surname, address0, address1, address2, address3, address4, address5, postcode, phone, email, type, fax, mobile) values('\"+title+\"', '\"+forename+\"', '\"+surname+\"', '\"+address0+\"', '\"+address1+\"', '\"+address2+\"', '\"+address3+\"', '\"+address4+\"', '\"+address5+\"', '\"+postcode+\"', '\"+phone+\"', '\"+email+\"', '\"+type+\"', '\"+fax+\"', '\"+mobile+\"')\";\n\t\t\n\t\t\t//Uses Statement from java.sql to create a statement called stmt\n\t\t\t//Needs to be directly referenced as java.sql.Statement to avoid confusion with\n\t\t\t//java.beans.Statement\n\t\t\tjava.sql.Statement stmt;\n\t\t\n\t\t\t//Uses Connection to create a null connection called con\n\t\t\tConnection con = null;\n\t\t\n\t\t\t\ttry\n\t\t\t\t{\n\n\t\t\t\t\t//Creates a new JDBC instance\n\t\t\t\t\tClass.forName (\"com.mysql.jdbc.Driver\").newInstance ();\n        \t   \t\n\t\t\t\t\t/*\n\t\t\t\t\t * IMPORTANT: For obvious reasons the following variables such as\n\t\t\t\t\t * mydatabase, username and password have been changed so that an\n\t\t\t\t\t * attacker can't fill up the database with meaningless entries.\t        \t   \t\n\t\t\t\t\t */\n        \t   \t\n        \t   \t\n\t\t\t\t\t//Creates a variable called serverName with the value of localhost\n\t\t\t\t\t//This will set the server name as localhost\n\t\t\t\t\t//Needs to be changed in a production environment\n\t\t\t\t\tString serverName = \"localhost\";\n        \t   \t\n\t\t\t\t\t//Creates a variable called mydatabase with the value of dtelectrics\n\t\t\t\t\t//This will set the name of the database to dtelectrics\n\t\t\t\t\t//Needs to be changed in a production environment\n\t\t\t\t\tString mydatabase = \"dtelectrics\";\n        \t   \t\n\t\t\t\t\t//Creates a variable called url that combines the previous along with\n\t\t\t\t\t//some other info\n\t\t\t\t\tString url = \"jdbc:mysql://\" + serverName +  \"/\" + mydatabase;\n        \t   \t\n\t\t\t\t\t//Creates a variable called username with the value of dtelectrics\n\t\t\t\t\t//This will set the username to log in as to dtelectrics\n\t\t\t\t\t//Needs to be changed in a production environment\n\t\t\t\t\tString username = \"dtelectrics\";\n        \t   \t\n\t\t\t\t\t//Creates a variable called password with the value of cr1ppl34t0r\n\t\t\t\t\t//This will set the password to log in with to cr1ppl34t0r\n\t\t\t\t\t//Needs to be changed in a production environment\n\t\t\t\t\tString password = \"passw0rd\";\n        \t   \t\n\t\t\t\t\t//Uses the previously created connection con to connect to the database\n\t\t\t\t\t//using the variables url, username and password\n\t\t\t\t\tcon = DriverManager.getConnection(url, username, password);\n\n\t\t\t\t\t//The previously created statement stmt uses the previously created\n\t\t\t\t\t//connection con to create a statement\n\t\t\t\t\tstmt = con.createStatement();\n        \t   \t\n\t        \t   \t//stmt then runs the SQL command in the variable insertString\n\t        \t   \tstmt.executeUpdate(insertString);\n\n            \n\t        \t   \t//Checks for any SQL errors\n\t\t\t\t} catch (SQLException ex) {\n\t\t\t\t\t//If there are errors prints out the following debugging info:\n\t        \t   \t//SQL Exception number, SQL State and Vendor Error Number\n\t        \t   \tSystem.out.println(\"SQLException: \" + ex.getMessage());\n\t        \t   \tSystem.out.println(\"SQLState: \" + ex.getSQLState());\n\t        \t   \tSystem.out.println(\"VendorError: \" + ex.getErrorCode());\n        \t\n\t        \t   \t//Checks for any other errors\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t//Prints out an error message informing the user about the unknown error\n\t\t\t\t\t//Clarification: Will show up in the Java console not the form\n\t\t\t\t\tSystem.err.println (\"UNKOWN ERROR: Cann't connect to database\");\n           \n               \n                \n\n           \n\t\t\t\t} finally {\n\t\t\t\t\t//If connection isn't null\n\t\t\t\t\t//(although confusing means connection is finished)\n\t\t\t\t\tif (con != null)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//Close the connection\n\t\t\t\t\t\t\tcon.close ();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Print out a message to the Java console saying that the\n\t\t\t\t\t\t\t//connection has been disconnected\n\t\t\t\t\t\t\tSystem.out.println (\"Disconnected from database\");\n                       \n\t\t\t\t\t\t\t//Increases the length of jButton so more text can fit\n\t\t\t\t\t\t\tjButton.setSize(90, 25);               \n    \t               \n\t\t\t\t\t\t\t//Sets the text of jButton to thanks\n\t\t\t\t\t\t\tjButton.setText(\"Thanks\");\t       \n    \t               \n\t\t\t\t\t\t\t//Sets the text colour of jButton to red\n\t\t\t\t\t\t\tjButton.setForeground(Color.red);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\t\t/* Ignores any errors that happen when\n\t\t\t\t\t\t\t *closing the connection\n\t\t\t\t\t\t\t */ \n                \t   }\n               }\n           }\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t}\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//Creates jTextField8 and sets the field length, tooltip etc.\n", "func_signal": "private JTextField getJTextField8()", "code": "{\n\tif (jTextField8 == null) {\n\t\tjTextField8 = new JTextField();\n\t\tjTextField8.setToolTipText(\"Postcode\");\n\t\tjTextField8.setDocument\n\t\t\t(new JTextFieldLimit(8));\n\t\tjTextField8.setColumns(8);\n\t}\n\treturn jTextField8;\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//Creates jComboBox2 and sets the options to the string array titles\n", "func_signal": "private JComboBox getJComboBox2()", "code": "{\n\tif (jComboBox2 == null) {\n\t\tjComboBox2 = new JComboBox(titles);\n\t}\n\treturn jComboBox2;\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//Creates jTextField7 and sets the field length, tooltip etc.\n", "func_signal": "private JTextField getJTextField7()", "code": "{\n\tif (jTextField7 == null) {\n\t\tjTextField7 = new JTextField();\n\t\tjTextField7.setToolTipText(\"Address Line 6\");\n\t\tjTextField7.setDocument\n\t\t\t(new JTextFieldLimit(30));\n\t\tjTextField7.setColumns(30);\n\t}\n\treturn jTextField7;\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//Creates jTextField6 and sets the field length, tooltip etc.\n", "func_signal": "private JTextField getJTextField6()", "code": "{\n\tif (jTextField6 == null) {\n\t\tjTextField6 = new JTextField();\n\t\tjTextField6.setToolTipText(\"Address Line 5\");\n\t\tjTextField6.setDocument\n\t\t\t(new JTextFieldLimit(30));\n\t\tjTextField6.setColumns(30);\n\t}\n\treturn jTextField6;\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//Creates jComboBox1 and sets the options to the string array jobs\n", "func_signal": "private JComboBox getJComboBox1()", "code": "{\n\tif (jComboBox1 == null) {\n\t\tjComboBox1 = new JComboBox(jobs);\n\t}\n\treturn jComboBox1;\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//Creates jTextField11 and sets the field length, tooltip etc.\n", "func_signal": "private JTextField getJTextField11()", "code": "{\n\tif (jTextField11 == null) {\n\t\tjTextField11 = new JTextField();\n\t\tjTextField11.setToolTipText(\"Fax Number\");\n\t\tjTextField11.setDocument\n\t\t\t(new JTextFieldLimit(11));\n\t\tjTextField11.setColumns(11);\n\t\t\n\t}\n\treturn jTextField11;\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//Creates jTextField12 and sets the field length, tooltip etc.\n", "func_signal": "private JTextField getJTextField12()", "code": "{\n\tif (jTextField12 == null) {\n\t\tjTextField12 = new JTextField();\n\t\tjTextField12.setToolTipText(\"Mobile Number\");\n\t\tjTextField12.setDocument\n\t\t\t(new JTextFieldLimit(11));\n\t\tjTextField12.setColumns(11);\n\t}\n\treturn jTextField12;\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//This method is referenced by applet() and sets the location and text of everything\n", "func_signal": "private void initialize()", "code": "{\n\tGridBagConstraints gridBagConstraints31 = new GridBagConstraints();\n\tgridBagConstraints31.gridx = 0;\n\tgridBagConstraints31.gridy = 18;\n\tjLabel14 = new JLabel();\n\tjLabel14.setText(\"Postcode*\");\n\tGridBagConstraints gridBagConstraints30 = new GridBagConstraints();\n\tgridBagConstraints30.fill = GridBagConstraints.VERTICAL;\n\tgridBagConstraints30.gridy = 1;\n\tgridBagConstraints30.weightx = 1.0;\n\tgridBagConstraints30.gridx = 0;\n\tGridBagConstraints gridBagConstraints29 = new GridBagConstraints();\n\tgridBagConstraints29.gridx = 0;\n\tgridBagConstraints29.gridy = 28;\n\tjLabel13 = new JLabel();\n\tjLabel13.setText(\"Mobile Number\");\n\tGridBagConstraints gridBagConstraints28 = new GridBagConstraints();\n\tgridBagConstraints28.gridx = 0;\n\tgridBagConstraints28.gridy = 26;\n\tjLabel12 = new JLabel();\n\tjLabel12.setText(\"Fax Number\");\n\tGridBagConstraints gridBagConstraints27 = new GridBagConstraints();\n\tgridBagConstraints27.gridx = 0;\n\tgridBagConstraints27.gridy = 24;\n\tjLabel11 = new JLabel();\n\tjLabel11.setText(\"Type\");\n\tGridBagConstraints gridBagConstraints26 = new GridBagConstraints();\n\tgridBagConstraints26.gridx = 0;\n\tgridBagConstraints26.gridy = 22;\n\tjLabel10 = new JLabel();\n\tjLabel10.setText(\"Email Address*\");\n\tGridBagConstraints gridBagConstraints25 = new GridBagConstraints();\n\tgridBagConstraints25.gridx = 0;\n\tgridBagConstraints25.gridy = 20;\n\tjLabel9 = new JLabel();\n\tjLabel9.setText(\"Telephone Number\");\n\tGridBagConstraints gridBagConstraints24 = new GridBagConstraints();\n\tgridBagConstraints24.gridx = 0;\n\tgridBagConstraints24.gridy = 16;\n\tjLabel8 = new JLabel();\n\tjLabel8.setText(\"Address Line 6\");\n\tGridBagConstraints gridBagConstraints23 = new GridBagConstraints();\n\tgridBagConstraints23.gridx = 0;\n\tgridBagConstraints23.gridy = 14;\n\tjLabel7 = new JLabel();\n\tjLabel7.setText(\"Address Line 5\");\n\tGridBagConstraints gridBagConstraints22 = new GridBagConstraints();\n\tgridBagConstraints22.gridx = 0;\n\tgridBagConstraints22.gridy = 12;\n\tjLabel6 = new JLabel();\n\tjLabel6.setText(\"Address Line 4\");\n\tGridBagConstraints gridBagConstraints21 = new GridBagConstraints();\n\tgridBagConstraints21.gridx = 0;\n\tgridBagConstraints21.gridy = 10;\n\tjLabel5 = new JLabel();\n\tjLabel5.setText(\"Address Line 3\");\n\tGridBagConstraints gridBagConstraints20 = new GridBagConstraints();\n\tgridBagConstraints20.gridx = 0;\n\tgridBagConstraints20.gridy = 8;\n\tjLabel4 = new JLabel();\n\tjLabel4.setText(\"Address Line 2\");\n\tGridBagConstraints gridBagConstraints19 = new GridBagConstraints();\n\tgridBagConstraints19.gridx = 0;\n\tgridBagConstraints19.gridy = 6;\n\tjLabel3 = new JLabel();\n\tjLabel3.setText(\"Address Line 1*\");\n\tGridBagConstraints gridBagConstraints18 = new GridBagConstraints();\n\tgridBagConstraints18.gridx = 0;\n\tgridBagConstraints18.gridy = 4;\n\tjLabel2 = new JLabel();\n\tjLabel2.setText(\"Surname*\");\n\tGridBagConstraints gridBagConstraints17 = new GridBagConstraints();\n\tgridBagConstraints17.gridx = 0;\n\tgridBagConstraints17.gridy = 2;\n\tjLabel1 = new JLabel();\n\tjLabel1.setText(\"Forename*\");\n\tGridBagConstraints gridBagConstraints16 = new GridBagConstraints();\n\tgridBagConstraints16.gridx = 0;\n\tgridBagConstraints16.gridy = 0;\n\tjLabel = new JLabel();\n\tjLabel.setText(\"Title*\");\n\tGridBagConstraints gridBagConstraints15 = new GridBagConstraints();\n\tgridBagConstraints15.gridx = 0;\n\tgridBagConstraints15.gridheight = 2;\n\tgridBagConstraints15.gridy = 30;\n\tGridBagConstraints gridBagConstraints14 = new GridBagConstraints();\n\tgridBagConstraints14.fill = GridBagConstraints.VERTICAL;\n\tgridBagConstraints14.gridy = 29;\n\tgridBagConstraints14.weightx = 1.0;\n\tgridBagConstraints14.gridx = 0;\n\tGridBagConstraints gridBagConstraints13 = new GridBagConstraints();\n\tgridBagConstraints13.fill = GridBagConstraints.VERTICAL;\n\tgridBagConstraints13.gridy = 27;\n\tgridBagConstraints13.weightx = 1.0;\n\tgridBagConstraints13.gridx = 0;\n\tGridBagConstraints gridBagConstraints12 = new GridBagConstraints();\n\tgridBagConstraints12.fill = GridBagConstraints.VERTICAL;\n\tgridBagConstraints12.gridy = 25;\n\tgridBagConstraints12.weightx = 1.0;\n\tgridBagConstraints12.gridx = 0;\n\tGridBagConstraints gridBagConstraints11 = new GridBagConstraints();\n\tgridBagConstraints11.fill = GridBagConstraints.VERTICAL;\n\tgridBagConstraints11.gridy = 23;\n\tgridBagConstraints11.weightx = 1.0;\n\tgridBagConstraints11.gridx = 0;\n\tGridBagConstraints gridBagConstraints10 = new GridBagConstraints();\n\tgridBagConstraints10.fill = GridBagConstraints.VERTICAL;\n\tgridBagConstraints10.gridy = 21;\n\tgridBagConstraints10.weightx = 1.0;\n\tgridBagConstraints10.gridx = 0;\n\tGridBagConstraints gridBagConstraints9 = new GridBagConstraints();\n\tgridBagConstraints9.fill = GridBagConstraints.VERTICAL;\n\tgridBagConstraints9.gridy = 19;\n\tgridBagConstraints9.weightx = 1.0;\n\tgridBagConstraints9.gridx = 0;\n\tGridBagConstraints gridBagConstraints8 = new GridBagConstraints();\n\tgridBagConstraints8.fill = GridBagConstraints.VERTICAL;\n\tgridBagConstraints8.gridy = 17;\n\tgridBagConstraints8.weightx = 1.0;\n\tgridBagConstraints8.gridx = 0;\n\tGridBagConstraints gridBagConstraints7 = new GridBagConstraints();\n\tgridBagConstraints7.fill = GridBagConstraints.VERTICAL;\n\tgridBagConstraints7.gridy = 15;\n\tgridBagConstraints7.weightx = 1.0;\n\tgridBagConstraints7.gridx = 0;\n\tGridBagConstraints gridBagConstraints6 = new GridBagConstraints();\n\tgridBagConstraints6.fill = GridBagConstraints.VERTICAL;\n\tgridBagConstraints6.gridy = 13;\n\tgridBagConstraints6.weightx = 1.0;\n\tgridBagConstraints6.gridx = 0;\n\tGridBagConstraints gridBagConstraints5 = new GridBagConstraints();\n\tgridBagConstraints5.fill = GridBagConstraints.VERTICAL;\n\tgridBagConstraints5.gridy = 11;\n\tgridBagConstraints5.weightx = 1.0;\n\tgridBagConstraints5.gridx = 0;\n\tGridBagConstraints gridBagConstraints4 = new GridBagConstraints();\n\tgridBagConstraints4.fill = GridBagConstraints.VERTICAL;\n\tgridBagConstraints4.gridy = 9;\n\tgridBagConstraints4.weightx = 1.0;\n\tgridBagConstraints4.gridx = 0;\n\tGridBagConstraints gridBagConstraints3 = new GridBagConstraints();\n\tgridBagConstraints3.fill = GridBagConstraints.VERTICAL;\n\tgridBagConstraints3.gridy = 7;\n\tgridBagConstraints3.weightx = 1.0;\n\tgridBagConstraints3.gridx = 0;\n\tGridBagConstraints gridBagConstraints2 = new GridBagConstraints();\n\tgridBagConstraints2.fill = GridBagConstraints.VERTICAL;\n\tgridBagConstraints2.gridy = 5;\n\tgridBagConstraints2.weightx = 1.0;\n\tgridBagConstraints2.gridx = 0;\n\tGridBagConstraints gridBagConstraints1 = new GridBagConstraints();\n\tgridBagConstraints1.fill = GridBagConstraints.VERTICAL;\n\tgridBagConstraints1.gridy = 3;\n\tgridBagConstraints1.weightx = 1.0;\n\tgridBagConstraints1.gridx = 0;\n\tGridBagConstraints gridBagConstraints = new GridBagConstraints();\n\tgridBagConstraints.fill = GridBagConstraints.VERTICAL;\n\tgridBagConstraints.gridy = 0;\n\tgridBagConstraints.weightx = 1.0;\n\tgridBagConstraints.gridx = 0;\n\tthis.setSize(580, 600);\n\tthis.setLayout(new GridBagLayout());\n\tthis.add(getJTextField(), gridBagConstraints1);\n\tthis.add(getJTextField1(), gridBagConstraints2);\n\tthis.add(getJTextField2(), gridBagConstraints3);\n\tthis.add(getJTextField3(), gridBagConstraints4);\n\tthis.add(getJTextField4(), gridBagConstraints5);\n\tthis.add(getJTextField5(), gridBagConstraints6);\n\tthis.add(getJTextField6(), gridBagConstraints7);\n\tthis.add(getJTextField7(), gridBagConstraints8);\n\tthis.add(getJTextField8(), gridBagConstraints9);\n\tthis.add(getJTextField9(), gridBagConstraints10);\n\tthis.add(getJTextField10(), gridBagConstraints11);\n\tthis.add(getJComboBox1(), gridBagConstraints12);\n\tthis.add(getJTextField11(), gridBagConstraints13);\n\tthis.add(getJTextField12(), gridBagConstraints14);\n\tthis.add(getJButton(), gridBagConstraints15);\n\tthis.add(jLabel, gridBagConstraints16);\n\tthis.add(jLabel1, gridBagConstraints17);\n\tthis.add(jLabel2, gridBagConstraints18);\n\tthis.add(jLabel3, gridBagConstraints19);\n\tthis.add(jLabel4, gridBagConstraints20);\n\tthis.add(jLabel5, gridBagConstraints21);\n\tthis.add(jLabel6, gridBagConstraints22);\n\tthis.add(jLabel7, gridBagConstraints23);\n\tthis.add(jLabel8, gridBagConstraints24);\n\tthis.add(jLabel9, gridBagConstraints25);\n\tthis.add(jLabel10, gridBagConstraints26);\n\tthis.add(jLabel11, gridBagConstraints27);\n\tthis.add(jLabel12, gridBagConstraints28);\n\tthis.add(jLabel13, gridBagConstraints29);\n\tthis.add(getJComboBox2(), gridBagConstraints30);\n\tthis.add(jLabel14, gridBagConstraints31);\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//Creates jTextField3 and sets the field length, tooltip etc.\n", "func_signal": "private JTextField getJTextField3()", "code": "{\n\tif (jTextField3 == null) {\n\t\tjTextField3 = new JTextField();\n\t\tjTextField3.setToolTipText(\"Address Line 2\");\n\t\tjTextField3.setDocument\n\t\t\t(new JTextFieldLimit(30));\n\t\tjTextField3.setColumns(30);\n\t}\n\treturn jTextField3;\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//Creates jTextField2 and sets the field length, tooltip etc.\n", "func_signal": "private JTextField getJTextField2()", "code": "{\n\tif (jTextField2 == null) {\n\t\tjTextField2 = new JTextField();\n\t\tjTextField2.setToolTipText(\"Address Line 1\");\n\t\tjTextField2.setDocument\n\t\t\t(new JTextFieldLimit(30));\n\t\tjTextField2.setColumns(30);\n\t}\n\treturn jTextField2;\n}", "path": "src\\applet.java", "repo_name": "l33tmyst/dtelectrics", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 112}
{"docstring": "//<editor-fold defaultstate=\"collapsed\" desc=\" Generated Getter: form \">//GEN-BEGIN:|14-getter|0|14-preInit\n/**\n * Returns an initiliazed instance of form component.\n * @return the initialized component instance\n */\n", "func_signal": "public Form getForm()", "code": "{\n    if (form == null) {//GEN-END:|14-getter|0|14-preInit\n        // write pre-init user code here\n        form = new Form(\"MobileBluetoothClient\", new Item[] { getStringItem() });//GEN-BEGIN:|14-getter|1|14-postInit\n        form.addCommand(getExitCommand());\n        form.addCommand(getOkCommand());\n        form.setCommandListener(this);//GEN-END:|14-getter|1|14-postInit\n    // write post-init user code here\n    }//GEN-BEGIN:|14-getter|2|\n    return form;\n}", "path": "MobileBluetoothClient\\src\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "/**\n * The BTMidlet constructor.\n */\n", "func_signal": "public BTMidlet()", "code": "{\n    try {\n        LocalDevice localDevice = LocalDevice.getLocalDevice();\n    } catch (BluetoothStateException ex) {\n        ex.printStackTrace();\n    }\n}", "path": "MobileBluetoothClient\\build\\preprocessed\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "//<editor-fold defaultstate=\"collapsed\" desc=\" Generated Getter: exitCommand \">//GEN-BEGIN:|18-getter|0|18-preInit\n/**\n * Returns an initiliazed instance of exitCommand component.\n * @return the initialized component instance\n */\n", "func_signal": "public Command getExitCommand()", "code": "{\n    if (exitCommand == null) {//GEN-END:|18-getter|0|18-preInit\n        // write pre-init user code here\n        exitCommand = new Command(\"Exit\", Command.EXIT, 0);//GEN-LINE:|18-getter|1|18-postInit\n    // write post-init user code here\n    }//GEN-BEGIN:|18-getter|2|\n    return exitCommand;\n}", "path": "MobileBluetoothClient\\build\\preprocessed\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "//<editor-fold defaultstate=\"collapsed\" desc=\" Generated Getter: form \">//GEN-BEGIN:|14-getter|0|14-preInit\n/**\n * Returns an initiliazed instance of form component.\n * @return the initialized component instance\n */\n", "func_signal": "public Form getForm()", "code": "{\n    if (form == null) {//GEN-END:|14-getter|0|14-preInit\n        // write pre-init user code here\n        form = new Form(\"MobileBluetoothClient\", new Item[] { getStringItem() });//GEN-BEGIN:|14-getter|1|14-postInit\n        form.addCommand(getExitCommand());\n        form.addCommand(getOkCommand());\n        form.setCommandListener(this);//GEN-END:|14-getter|1|14-postInit\n    // write post-init user code here\n    }//GEN-BEGIN:|14-getter|2|\n    return form;\n}", "path": "MobileBluetoothClient\\build\\preprocessed\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "//<editor-fold defaultstate=\"collapsed\" desc=\" Generated Getter: okCommand \">//GEN-BEGIN:|22-getter|0|22-preInit\n/**\n * Returns an initiliazed instance of okCommand component.\n * @return the initialized component instance\n */\n", "func_signal": "public Command getOkCommand()", "code": "{\n    if (okCommand == null) {//GEN-END:|22-getter|0|22-preInit\n        // write pre-init user code here\n        okCommand = new Command(\"Ok\", Command.OK, 0);//GEN-LINE:|22-getter|1|22-postInit\n    // write post-init user code here\n    }//GEN-BEGIN:|22-getter|2|\n    return okCommand;\n}", "path": "MobileBluetoothClient\\src\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "//<editor-fold defaultstate=\"collapsed\" desc=\" Generated Method: commandAction for Displayables \">//GEN-BEGIN:|7-commandAction|0|7-preCommandAction\n/**\n * Called by a system to indicated that a command has been invoked on a particular displayable.\n * @param command the Command that was invoked\n * @param displayable the Displayable where the command was invoked\n */\n", "func_signal": "public void commandAction(Command command, Displayable displayable)", "code": "{//GEN-END:|7-commandAction|0|7-preCommandAction\n    // write pre-action user code here\n    if (displayable == form) {//GEN-BEGIN:|7-commandAction|1|19-preAction\n        if (command == exitCommand) {//GEN-END:|7-commandAction|1|19-preAction\n            // write pre-action user code here\n            exitMIDlet();//GEN-LINE:|7-commandAction|2|19-postAction\n        // write post-action user code here\n        } else if (command == okCommand) {//GEN-LINE:|7-commandAction|3|23-preAction\n            // write pre-action user code here\n//GEN-LINE:|7-commandAction|4|23-postAction\n            // write post-action user code here\n            try {\n                String connectionURL = \"btspp://002268DF4E0E:9;authenticate=false;encrypt=false;master=false\";\n                StreamConnection sc = (StreamConnection) Connector.open(connectionURL);\n                DataOutputStream dataout = sc.openDataOutputStream();\n                dataout.writeUTF(\"btspp://002268DF4E0E:9;authenticate=false;encrypt=false;master=false\");\n                dataout.flush();\n                sc.close();\n                displayAlert(\"Message sent to \" + connectionURL, AlertType.INFO);\n            } catch (Exception e) {\n                displayAlert(e.getMessage(), AlertType.INFO);\n            }\n        }//GEN-BEGIN:|7-commandAction|5|7-postCommandAction\n    }//GEN-END:|7-commandAction|5|7-postCommandAction\n// write post-action user code here\n}", "path": "MobileBluetoothClient\\build\\preprocessed\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "/**\n * Called when the service search is over.\n */\n", "func_signal": "public void serviceSearchCompleted(int transID, int respCode)", "code": "{\n    synchronized (lock) {\n        lock.notify();\n    }\n}", "path": "BluetoothScan\\src\\bluetoothscan\\BluetoothServiceDiscovery.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "//<editor-fold defaultstate=\"collapsed\" desc=\" Generated Getter: backCommand \">//GEN-BEGIN:|26-getter|0|26-preInit\n/**\n * Returns an initiliazed instance of backCommand component.\n * @return the initialized component instance\n */\n", "func_signal": "public Command getBackCommand()", "code": "{\n    if (backCommand == null) {//GEN-END:|26-getter|0|26-preInit\n        // write pre-init user code here\n        backCommand = new Command(\"Back\", Command.BACK, 0);//GEN-LINE:|26-getter|1|26-postInit\n    // write post-init user code here\n    }//GEN-BEGIN:|26-getter|2|\n    return backCommand;\n}", "path": "MobileBluetoothClient\\build\\preprocessed\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "//<editor-fold defaultstate=\"collapsed\" desc=\" Generated Getter: exitCommand \">//GEN-BEGIN:|18-getter|0|18-preInit\n/**\n * Returns an initiliazed instance of exitCommand component.\n * @return the initialized component instance\n */\n", "func_signal": "public Command getExitCommand()", "code": "{\n    if (exitCommand == null) {//GEN-END:|18-getter|0|18-preInit\n        // write pre-init user code here\n        exitCommand = new Command(\"Exit\", Command.EXIT, 0);//GEN-LINE:|18-getter|1|18-postInit\n    // write post-init user code here\n    }//GEN-BEGIN:|18-getter|2|\n    return exitCommand;\n}", "path": "MobileBluetoothClient\\src\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "/**\n * Called when the device search is over.\n */\n", "func_signal": "public void inquiryCompleted(int discType)", "code": "{\n    synchronized (lock) {\n        lock.notify();\n    }\n\n}", "path": "BluetoothScan\\src\\bluetoothscan\\BluetoothServiceDiscovery.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "/**\n * Called when MIDlet is started.\n * Checks whether the MIDlet have been already started and initialize/starts or resumes the MIDlet.\n */\n", "func_signal": "public void startApp()", "code": "{\n    if (midletPaused) {\n        resumeMIDlet();\n    } else {\n        initialize();\n        startMIDlet();\n    }\n    midletPaused = false;\n}", "path": "MobileBluetoothClient\\build\\preprocessed\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "//<editor-fold defaultstate=\"collapsed\" desc=\" Generated Method: switchDisplayable \">//GEN-BEGIN:|5-switchDisplayable|0|5-preSwitch\n/**\n * Switches a current displayable in a display. The <code>display</code> instance is taken from <code>getDisplay</code> method. This method is used by all actions in the design for switching displayable.\n * @param alert the Alert which is temporarily set to the display; if <code>null</code>, then <code>nextDisplayable</code> is set immediately\n * @param nextDisplayable the Displayable to be set\n */\n", "func_signal": "public void switchDisplayable(Alert alert, Displayable nextDisplayable)", "code": "{//GEN-END:|5-switchDisplayable|0|5-preSwitch\n    // write pre-switch user code here\n    Display display = getDisplay();//GEN-BEGIN:|5-switchDisplayable|1|5-postSwitch\n    if (alert == null) {\n        display.setCurrent(nextDisplayable);\n    } else {\n        display.setCurrent(alert, nextDisplayable);\n    }//GEN-END:|5-switchDisplayable|1|5-postSwitch\n// write post-switch user code here\n}", "path": "MobileBluetoothClient\\build\\preprocessed\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "/**\n * The BTMidlet constructor.\n */\n", "func_signal": "public BTMidlet()", "code": "{\n    try {\n        // Init Bluetooth device\n        LocalDevice localDevice = LocalDevice.getLocalDevice();\n    } catch (BluetoothStateException ex) {\n        ex.printStackTrace();\n    }\n}", "path": "MobileBluetoothClient\\src\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "//<editor-fold defaultstate=\"collapsed\" desc=\" Generated Getter: backCommand \">//GEN-BEGIN:|26-getter|0|26-preInit\n/**\n * Returns an initiliazed instance of backCommand component.\n * @return the initialized component instance\n */\n", "func_signal": "public Command getBackCommand()", "code": "{\n    if (backCommand == null) {//GEN-END:|26-getter|0|26-preInit\n        // write pre-init user code here\n        backCommand = new Command(\"Back\", Command.BACK, 0);//GEN-LINE:|26-getter|1|26-postInit\n    // write post-init user code here\n    }//GEN-BEGIN:|26-getter|2|\n    return backCommand;\n}", "path": "MobileBluetoothClient\\src\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "/**\n * Called when a bluetooth service is discovered.\n * Used for service search.\n */\n", "func_signal": "public void servicesDiscovered(int transID, ServiceRecord[] servRecord)", "code": "{\n    if (servRecord != null && servRecord.length > 0) {\n        connectionURL = servRecord[0].getConnectionURL(0, false);\n    }\n    synchronized (lock) {\n        lock.notify();\n    }\n}", "path": "BluetoothScan\\src\\bluetoothscan\\BluetoothServiceDiscovery.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "//<editor-fold defaultstate=\"collapsed\" desc=\" Generated Getter: stringItem \">//GEN-BEGIN:|16-getter|0|16-preInit\n/**\n * Returns an initiliazed instance of stringItem component.\n * @return the initialized component instance\n */\n", "func_signal": "public StringItem getStringItem()", "code": "{\n    if (stringItem == null) {//GEN-END:|16-getter|0|16-preInit\n        // write pre-init user code here\n        stringItem = new StringItem(\"Click ok to send a bluetooth message\", \"\");//GEN-LINE:|16-getter|1|16-postInit\n    // write post-init user code here\n    }//GEN-BEGIN:|16-getter|2|\n    return stringItem;\n}", "path": "MobileBluetoothClient\\src\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "/**\n * Exits MIDlet.\n */\n", "func_signal": "public void exitMIDlet()", "code": "{\n    switchDisplayable(null, null);\n    destroyApp(true);\n    notifyDestroyed();\n}", "path": "MobileBluetoothClient\\src\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "/**\n * Exits MIDlet.\n */\n", "func_signal": "public void exitMIDlet()", "code": "{\n    switchDisplayable(null, null);\n    destroyApp(true);\n    notifyDestroyed();\n}", "path": "MobileBluetoothClient\\build\\preprocessed\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "//<editor-fold defaultstate=\"collapsed\" desc=\" Generated Getter: stringItem \">//GEN-BEGIN:|16-getter|0|16-preInit\n/**\n * Returns an initiliazed instance of stringItem component.\n * @return the initialized component instance\n */\n", "func_signal": "public StringItem getStringItem()", "code": "{\n    if (stringItem == null) {//GEN-END:|16-getter|0|16-preInit\n        // write pre-init user code here\n        stringItem = new StringItem(\"Click ok to send a bluetooth message\", \"\");//GEN-LINE:|16-getter|1|16-postInit\n    // write post-init user code here\n    }//GEN-BEGIN:|16-getter|2|\n    return stringItem;\n}", "path": "MobileBluetoothClient\\build\\preprocessed\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "//<editor-fold defaultstate=\"collapsed\" desc=\" Generated Method: commandAction for Displayables \">//GEN-BEGIN:|7-commandAction|0|7-preCommandAction\n/**\n * Called by a system to indicated that a command has been invoked on a particular displayable.\n * @param command the Command that was invoked\n * @param displayable the Displayable where the command was invoked\n */\n", "func_signal": "public void commandAction(Command command, Displayable displayable)", "code": "{//GEN-END:|7-commandAction|0|7-preCommandAction\n    // write pre-action user code here\n    if (displayable == form) {//GEN-BEGIN:|7-commandAction|1|19-preAction\n        if (command == exitCommand) {//GEN-END:|7-commandAction|1|19-preAction\n            // write pre-action user code here\n            exitMIDlet();//GEN-LINE:|7-commandAction|2|19-postAction\n        // write post-action user code here\n        } else if (command == okCommand) {//GEN-LINE:|7-commandAction|3|23-preAction\n            // write pre-action user code here\n//GEN-LINE:|7-commandAction|4|23-postAction\n            // write post-action user code here\n            // Send a Bluetooth message\n            try {\n                String connectionURL = \"btspp://002268DF4E0E:9;authenticate=false;encrypt=false;master=false\";\n                StreamConnection sc = (StreamConnection) Connector.open(connectionURL);\n                DataOutputStream dataout = sc.openDataOutputStream();\n                dataout.writeUTF(\"Hello World\");\n                dataout.flush();\n                sc.close();\n                displayAlert(\"Message sent\", AlertType.INFO);\n            } catch (Exception e) {\n                displayAlert(e.getMessage(), AlertType.INFO);\n            }\n        }//GEN-BEGIN:|7-commandAction|5|7-postCommandAction\n    }//GEN-END:|7-commandAction|5|7-postCommandAction\n// write post-action user code here\n}", "path": "MobileBluetoothClient\\src\\btooth\\BTMidlet.java", "repo_name": "atinraf/JavaBluetooth", "stars": 0, "license": "None", "language": "java", "size": 621}
{"docstring": "/**\n * Sets the status of the player<br />\n * <ul><li>Note: Does not update friends</li></ul>\n * @param status\n */\n", "func_signal": "public void setStatus(Status status)", "code": "{\n\tStatus previousStatus = this.status;\n\tthis.status = status;\n\t\n\tfor (Friend friend : friends) // For all my friends\n\t{\n\t\t\n\t\tif (friend.isOnline()) // If the player is online\n\t\t{\n\t\t\tPlayer friendPlayer = friend.getPlayer();\n\t\t\tfriendPlayer.getClientConnection().sendPacket(new SM_FRIEND_UPDATE(player.getObjectId()));\n\t\t\t\n\t\t\tif (previousStatus == Status.OFFLINE) \n\t\t\t{\n\t\t\t\t//Show LOGIN message\n\t\t\t\tfriendPlayer.getClientConnection().sendPacket(new SM_FRIEND_NOTIFY(SM_FRIEND_NOTIFY.LOGIN,player.getName()));\n\t\t\t}\n\t\t\telse if (status == Status.OFFLINE)\n\t\t\t{\n\t\t\t\t//Show LOGOUT message\n\t\t\t\tfriendPlayer.getClientConnection().sendPacket(new SM_FRIEND_NOTIFY(SM_FRIEND_NOTIFY.LOGOUT,player.getName()));\n\t\t\t}\n\t\t}\n\t}\n\t\n}", "path": "com\\aionemu\\gameserver\\model\\gameobjects\\player\\FriendList.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected void writeImpl(AionConnection con, ByteBuffer buf)", "code": "{\n\twriteC(buf, 0x00);\n\twriteC(buf, 0x00);\n\twriteC(buf, 0x00);\n}", "path": "com\\aionemu\\gameserver\\network\\aion\\serverpackets\\unk\\SM_UNK66.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected void readImpl()", "code": "{\n\tspellid = readH();// empty\n\tlevel = readC();// empty\n\tunk = readC();// empty\n\ttargetObjectId = readD();// empty\n\ttime = readH();// empty\n\t\n}", "path": "com\\aionemu\\gameserver\\network\\aion\\clientpackets\\CM_CASTSPELL.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * Constructs a friend list for the given player, with the given friends\n * @param player Player who has this friend list\n * @param friends Friends on the list\n */\n", "func_signal": "public FriendList(Player owner, Collection<Friend> newFriends)", "code": "{\n\tthis.friends = new ConcurrentLinkedQueue<Friend>(newFriends);\n\tthis.player = owner;\n\t\n\t\n\t((EnhancedObject)player).addCallback(new PlayerLoggedOutListener(){\n\t\t\n\t\t@Override\n\t\tprotected void onLoggedOut(Player loggedOutPlayer)\n\t\t{\n\t\t\t// Set status)\n\t\t\tsetStatus(FriendList.Status.OFFLINE);\n\t\t\t\n\t\t}\n\t});\n\t\t\n\t\n}", "path": "com\\aionemu\\gameserver\\model\\gameobjects\\player\\FriendList.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * Find objects that are in visibility range.\n */\n", "func_signal": "private void findVisibleObjects()", "code": "{\n\tIterator<MapRegion> neighboursIt = owner.getActiveRegion().getNeighboursIterator();\n\twhile(neighboursIt.hasNext())\n\t{\n\t\tMapRegion r = neighboursIt.next();\n\t\tIterator<VisibleObject> objectsIt = r.getObjectsIterator();\n\n\t\twhile(objectsIt.hasNext())\n\t\t{\n\t\t\tVisibleObject newObject = objectsIt.next();\n\n\t\t\tif(newObject == owner)\n\t\t\t\tcontinue;\n\n\t\t\tif(!MathUtil.isInRange(owner, newObject, visibilityDistance))\n\t\t\t\tcontinue;\n\n\t\t\t/**\n\t\t\t * New object is not known.\n\t\t\t */\n\t\t\tif(knownObjects.put(newObject.getObjectId(), newObject) == null)\n\t\t\t{\n\t\t\t\tnewObject.getKnownList().add(owner);\n\t\t\t\towner.getController().see(newObject);\n\t\t\t}\n\t\t}\n\t}\n}", "path": "com\\aionemu\\gameserver\\world\\KnownList.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * Delete VisibleObject from this KnownList.\n * \n * @param object\n */\n", "func_signal": "private final void del(VisibleObject object)", "code": "{\n\t/**\n\t * object was known.\n\t */\n\tif(knownObjects.remove(object.getObjectId()) != null)\n\t\towner.getController().notSee(object);\n}", "path": "com\\aionemu\\gameserver\\world\\KnownList.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * Read data\n */\n", "func_signal": "@Override\nprotected void readImpl()", "code": "{\n\tunknown = readC();\n\tif(unknown == 0x01)\n\t{\n\t\t// jump\n\t}\n\telse if(unknown == 0x11)\n\t{\n\t\t// Nothing here\n\t}\n\telse if(unknown == 0x10)\n\t{\n\t\temotion = readH();\n\t} \n\telse if(unknown == 0x13)\n\t{\n\t\t//emotion = readH();\n\t} \n\telse\n\t{\n\t\tlog.info(\"Unknown emotion type? 0x\" + Integer.toHexString(unknown).toUpperCase());\n\t}\n}", "path": "com\\aionemu\\gameserver\\network\\aion\\clientpackets\\CM_EMOTION.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected void runImpl()", "code": "{\n\n\t\n\tPlayer player = getConnection().getActivePlayer();\n\tint activePlayer = player.getObjectId();\n\n\tInventory itemsDbOfPlayerCount = new Inventory(); // wrong\n\titemsDbOfPlayerCount.getInventoryFromDb(activePlayer);\n\tint totalItemsCount = itemsDbOfPlayerCount.getItemsCount();\n\n\tInventory equipedItems = new Inventory();\n\tequipedItems.getEquipedItemsFromDb(activePlayer);\n\tint totalEquipedItemsCount = equipedItems.getEquipedItemsCount();\n\n\tint itemCountArray;\n\tint cubes = 1;\n\tint cubesize = 27;\n\tint allowItemsCount = cubesize*cubes-1;\n\n\ttotalItemsCount = totalItemsCount - totalEquipedItemsCount;\t\n\t\t\n\tif (totalItemsCount<=allowItemsCount){\n\t\tInventory items = new Inventory();\n\t\tint newItemUniqueId;\n\t\tint arrayLenght = player.getGameStats().getArrayLenght();\n\n\t\tint a=0;\n\t\t\n\t\twhile (arrayLenght > 0 ) {\n\t\t\titemIdArray = player.getGameStats().getItemIdArray(a);\n\t\t\titemCountArray = player.getGameStats().getItemCountArray(a);\n\t\t\tif(itemIdArray == 182400001) {\n\t\t\t\t//items.putKinahToDb(activePlayer, itemCountArray);\n\t\t\t\tInventory kinah2 = new Inventory();\n\t\t\t\tkinah2.putKinahToDb(activePlayer, itemCountArray);\n\t\t\t\tkinah2.getKinahFromDb(activePlayer);\n\t\t\t\tint kinah = kinah2.getKinahCount();\n\t\t\t\tint uniquedeId = 0;\n\t\t\t\tsendPacket(new SM_INVENTORY_INFO(uniquedeId, 182400001, kinah, 1, 8));\n\t\t\t\tsendPacket(new SM_LOOT_STATUS(uniquedeId,3));\n\t\t\t} else {\n\t\t\t\titems.putItemToDb(activePlayer, itemIdArray, itemCountArray);\n\t\t\t\titems.getLastUniqueIdFromDb();\n\t\t\t\tnewItemUniqueId = items.getnewItemUniqueIdValue();\n\n\t\t\t\tsendPacket(new SM_INVENTORY_INFO(newItemUniqueId, itemIdArray, itemCountArray, 1, 8));\n\t\t\t\tsendPacket(new SM_LOOT_STATUS(newItemUniqueId,3));\n\t\t\t}\n\t\t\tarrayLenght--;\n\t\t\ta++;\n\t\t}\n\t\t\n\t} else {\n\t\t\t//todo show SM_INVENTORY_IS_FULL packet or smth.\n\t}\n}", "path": "com\\aionemu\\gameserver\\network\\aion\\clientpackets\\CM_LOOT_ITEM.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * Gets the Status from its int value<br />\n * Returns null if out of range\n * @param value range 0-2\n * @return\n */\n", "func_signal": "public static Status getByValue(int value)", "code": "{\n\tfor (Status stat : values())\n\t\tif (stat.getIntValue() == value)\n\t\t\treturn stat;\n\treturn null;\n}", "path": "com\\aionemu\\gameserver\\model\\gameobjects\\player\\FriendList.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * forget out of distance objects.\n */\n", "func_signal": "private void forgetObjects()", "code": "{\n\tIterator<VisibleObject> knownIt = iterator();\n\twhile(knownIt.hasNext())\n\t{\n\t\tVisibleObject obj = knownIt.next();\n\n\t\tif(!MathUtil.isInRange(owner, obj, visibilityDistance))\n\t\t{\n\t\t\tknownIt.remove();\n\t\t\towner.getController().notSee(obj);\n\t\t\tobj.getKnownList().del(owner);\n\t\t}\n\t}\n}", "path": "com\\aionemu\\gameserver\\world\\KnownList.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * Gets the Friend by this name\n * @param name Name of friend\n * @return Friend matching name\n */\n", "func_signal": "public Friend getFriend(String name)", "code": "{\n\tfor (Friend friend : friends)\n\t\tif (friend.getName().equalsIgnoreCase(name))\n\t\t\treturn friend;\n\treturn null;\n}", "path": "com\\aionemu\\gameserver\\model\\gameobjects\\player\\FriendList.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void notSee(VisibleObject object)", "code": "{\n\tsuper.notSee(object);\n\tif(object == getOwner().getTarget())\n\t\tgetOwner().setTarget(null);\n}", "path": "com\\aionemu\\gameserver\\controllers\\CreatureController.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * Gets the friend with this objId<br />\n * Returns null if it is not our friend\n * @param objId objId of friend\n * @return \n */\n", "func_signal": "public Friend getFriend(int objId)", "code": "{\n\tfor (Friend friend : friends)\n\t{\n\t\tif (friend.getOid() == objId)\n\t\t\treturn friend;\n\t}\n\treturn null;\n}", "path": "com\\aionemu\\gameserver\\model\\gameobjects\\player\\FriendList.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * Clear known list. Used when object is despawned.\n */\n", "func_signal": "public void clear()", "code": "{\n\tIterator<VisibleObject> knownIt = iterator();\n\twhile(knownIt.hasNext())\n\t{\n\t\tVisibleObject obj = knownIt.next();\n\t\tknownIt.remove();\n\t\tobj.getKnownList().del(owner);\n\t}\n}", "path": "com\\aionemu\\gameserver\\world\\KnownList.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * @param loginServer\n */\n", "func_signal": "public LsPacketHandlerFactory(Injector injector)", "code": "{\n\tthis.injector = injector;\n\n\taddPacket(new CM_ACCOUNT_RECONNECT_KEY(0x03), State.AUTHED);\n\taddPacket(new CM_ACOUNT_AUTH_RESPONSE(0x01), State.AUTHED);\n\taddPacket(new CM_GS_AUTH_RESPONSE(0x00), State.CONNECTED);\n\taddPacket(new CM_REQUEST_KICK_ACCOUNT(0x02), State.AUTHED);\n\n}", "path": "com\\aionemu\\gameserver\\network\\factories\\LsPacketHandlerFactory.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * Returns the blocked player with this name if they exist\n * @param name\n * @return CommonData of player with this name, null if not blocked\n */\n", "func_signal": "public BlockedPlayer getBlockedPlayer(String name)", "code": "{\n\tIterator<BlockedPlayer> iterator = blockedList.values().iterator();\n\t\n\twhile (iterator.hasNext())\n\t{\n\t\tBlockedPlayer entry = iterator.next();\n\t\tif (entry.getName().equalsIgnoreCase(name))\n\t\t\treturn entry;\n\t}\n\treturn null;\n}", "path": "com\\aionemu\\gameserver\\model\\gameobjects\\player\\BlockList.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * Do KnownList update.\n */\n", "func_signal": "public void doUpdate()", "code": "{\n\tforgetObjects();\n\tfindVisibleObjects();\n}", "path": "com\\aionemu\\gameserver\\world\\KnownList.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * Send emotion packet\n */\n", "func_signal": "@Override\nprotected void runImpl()", "code": "{\n\tPlayer player = getConnection().getActivePlayer();\n\tPacketSendUtility.broadcastPacket(player, new SM_EMOTION(player.getObjectId(), unknown, emotion), true);\n}", "path": "com\\aionemu\\gameserver\\network\\aion\\clientpackets\\CM_EMOTION.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected void runImpl()", "code": "{\n\tPlayer player = getConnection().getActivePlayer();\n\tplayer.getController().useSkill(spellid);\n}", "path": "com\\aionemu\\gameserver\\network\\aion\\clientpackets\\CM_CASTSPELL.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "/**\n * Deletes given friend from this friends list<br />\n * <ul><li>Note: This will only affect this player, not the friend.</li>\n * <li>Note: Sends the packet to update the client automatically</li>\n * <li>Note: You should use requestDel to delete from both lists</li></ul>\n * @param friend\n * @return\n */\n", "func_signal": "public void delFriend(int friendOid)", "code": "{\n\tIterator<Friend> it = iterator();\n\twhile (it.hasNext())\n\t\tif (it.next().getOid() == friendOid)\n\t\t\tit.remove();\n}", "path": "com\\aionemu\\gameserver\\model\\gameobjects\\player\\FriendList.java", "repo_name": "Avol/TestProject", "stars": 1, "license": "None", "language": "java", "size": 402}
{"docstring": "// javadoc is inherited\n", "func_signal": "public boolean createSecondaryKey(SecondaryDatabase db,\n                                  DatabaseEntry primaryKeyEntry,\n                                  DatabaseEntry dataEntry,\n                                  DatabaseEntry indexKeyEntry)\n    throws DatabaseException", "code": "{\n\n    TupleOutput output = getTupleOutput(null);\n    TupleInput primaryKeyInput = entryToInput(primaryKeyEntry);\n    Object dataInput = dataBinding.entryToObject(dataEntry);\n    if (createSecondaryKey(primaryKeyInput, dataInput, output)) {\n        outputToEntry(output, indexKeyEntry);\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "src\\com\\sleepycat\\jni\\bind\\serial\\TupleSerialKeyCreator.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "/**\nMove the cursor to the closest matching key of the database, and return\nthe data item associated with the matching key.  If the matching key has\nduplicate values, the first data item in the set of duplicates is returned.\n<p>\nThe returned key/data pair is for the smallest key greater than or equal\nto the specified key (as determined by the key comparison function),\npermitting partial key matches and range searches.\n<p>\nIf this method fails for any reason, the position of the cursor will be\nunchanged.\n@throws NullPointerException if a DatabaseEntry parameter is null or\ndoes not contain a required non-null byte array.\n<p>\n@throws DeadlockException if the operation was selected to resolve a\ndeadlock.\n<p>\n@throws IllegalArgumentException if an invalid parameter was specified.\n<p>\n@throws DatabaseException if a failure occurs.\n<p>\n@param key the  key\nused as input and returned as output.  It must be initialized with a non-null\nbyte array by the caller.\n@param data the  data\nreturned as output.  Multiple results can be retrieved by passing an object\nthat is a subclass of {@link com.sleepycat.db.MultipleEntry MultipleEntry}, otherwise its byte array does not\nneed to be initialized by the caller.\n@param lockMode the locking attributes; if null, default attributes are used.\n@return {@link com.sleepycat.db.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair is\nfound; {@link com.sleepycat.db.OperationStatus#KEYEMPTY OperationStatus.KEYEMPTY} if the database is a Queue or Recno database and the specified key exists, but was never explicitly created by the application or was later deleted; otherwise, {@link com.sleepycat.db.OperationStatus#SUCCESS OperationStatus.SUCCESS}.\n*/\n", "func_signal": "public OperationStatus getSearchKeyRange(final DatabaseEntry key,\n                                         final DatabaseEntry data,\n                                         LockMode lockMode)\n    throws DatabaseException", "code": "{\n\n    return OperationStatus.fromInt(\n        dbc.get(key, data, DbConstants.DB_SET_RANGE |\n            LockMode.getFlag(lockMode) |\n            ((data == null) ? 0 : data.getMultiFlag())));\n}", "path": "src\\com\\sleepycat\\db\\Cursor.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "/**\nReturn the record number associated with the cursor.  The record number\nwill be returned in the data parameter.\n<p>\nFor this method to be called, the underlying database must be of type\nBtree, and it must have been configured to support record numbers.\n<p>\nIf this method fails for any reason, the position of the cursor will be\nunchanged.\n@throws NullPointerException if a DatabaseEntry parameter is null or\ndoes not contain a required non-null byte array.\n<p>\n@throws DeadlockException if the operation was selected to resolve a\ndeadlock.\n<p>\n@throws IllegalArgumentException if an invalid parameter was specified.\n<p>\n@throws DatabaseException if a failure occurs.\n<p>\n@param data the  data\nreturned as output.  Its byte array does not need to be initialized by the\ncaller.\n@param lockMode the locking attributes; if null, default attributes are used.\n@return {@link com.sleepycat.db.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair is\nfound; {@link com.sleepycat.db.OperationStatus#KEYEMPTY OperationStatus.KEYEMPTY} if the database is a Queue or Recno database and the specified key exists, but was never explicitly created by the application or was later deleted; otherwise, {@link com.sleepycat.db.OperationStatus#SUCCESS OperationStatus.SUCCESS}.\n*/\n", "func_signal": "public OperationStatus getRecordNumber(final DatabaseEntry data,\n                                       LockMode lockMode)\n    throws DatabaseException", "code": "{\n\n    return OperationStatus.fromInt(\n        dbc.get(DatabaseEntry.IGNORE, data,\n            DbConstants.DB_GET_RECNO |\n            LockMode.getFlag(lockMode) |\n            ((data == null) ? 0 : data.getMultiFlag())));\n}", "path": "src\\com\\sleepycat\\db\\Cursor.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "/**\n * Constructs a new {@link FieldWriter}.\n *\n * @param cw the class writer to which this field must be added.\n * @param access the field's access flags (see {@link Opcodes}).\n * @param name the field's name.\n * @param desc the field's descriptor (see {@link Type}).\n * @param signature the field's signature. May be <tt>null</tt>.\n * @param value the field's constant value. May be <tt>null</tt>.\n */\n", "func_signal": "protected FieldWriter(\n    final ClassWriter cw,\n    final int access,\n    final String name,\n    final String desc,\n    final String signature,\n    final Object value)", "code": "{\n    if (cw.firstField == null) {\n        cw.firstField = this;\n    } else {\n        cw.lastField.next = this;\n    }\n    cw.lastField = this;\n    this.cw = cw;\n    this.access = access;\n    this.name = cw.newUTF8(name);\n    this.desc = cw.newUTF8(desc);\n    if (signature != null) {\n        this.signature = cw.newUTF8(signature);\n    }\n    if (value != null) {\n        this.value = cw.newConstItem(value).index;\n    }\n}", "path": "src\\com\\sleepycat\\jni\\asm\\FieldWriter.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "/**\nIf the previous key/data pair of the database is a duplicate data record\nfor the current key/data pair, move the cursor to the previous key/data\npair of the database and return that pair.\n<p>\nIf this method fails for any reason, the position of the cursor will be\nunchanged.\n@throws NullPointerException if a DatabaseEntry parameter is null or\ndoes not contain a required non-null byte array.\n<p>\n@throws DeadlockException if the operation was selected to resolve a\ndeadlock.\n<p>\n@throws IllegalArgumentException if an invalid parameter was specified.\n<p>\n@throws DatabaseException if a failure occurs.\n<p>\n@param key the  key\nreturned as output.  Its byte array does not need to be initialized by the\ncaller.\n@param data the  data\nreturned as output.  Its byte array does not need to be initialized by the\ncaller.\n@param lockMode the locking attributes; if null, default attributes are used.\n@return {@link com.sleepycat.db.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair is\nfound; {@link com.sleepycat.db.OperationStatus#KEYEMPTY OperationStatus.KEYEMPTY} if the database is a Queue or Recno database and the specified key exists, but was never explicitly created by the application or was later deleted; otherwise, {@link com.sleepycat.db.OperationStatus#SUCCESS OperationStatus.SUCCESS}.\n*/\n", "func_signal": "public OperationStatus getPrevDup(final DatabaseEntry key,\n                                  final DatabaseEntry data,\n                                  LockMode lockMode)\n    throws DatabaseException", "code": "{\n\n    return OperationStatus.fromInt(\n        dbc.get(key, data, DbConstants.DB_PREV_DUP |\n            LockMode.getFlag(lockMode) |\n            ((data == null) ? 0 : data.getMultiFlag())));\n}", "path": "src\\com\\sleepycat\\db\\Cursor.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "/**\nMove the cursor to the first key/data pair of the database, and return\nthat pair.  If the first key has duplicate values, the first data item\nin the set of duplicates is returned.\n<p>\nIf this method fails for any reason, the position of the cursor will be\nunchanged.\n@throws NullPointerException if a DatabaseEntry parameter is null or\ndoes not contain a required non-null byte array.\n<p>\n@throws DeadlockException if the operation was selected to resolve a\ndeadlock.\n<p>\n@throws IllegalArgumentException if an invalid parameter was specified.\n<p>\n@throws DatabaseException if a failure occurs.\n<p>\n@param key the  key\nreturned as output.  Its byte array does not need to be initialized by the\ncaller.\n@param data the  data\nreturned as output.  Multiple results can be retrieved by passing an object\nthat is a subclass of {@link com.sleepycat.db.MultipleEntry MultipleEntry}, otherwise its byte array does not\nneed to be initialized by the caller.\n@param lockMode the locking attributes; if null, default attributes are used.\n@return {@link com.sleepycat.db.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair is\nfound; {@link com.sleepycat.db.OperationStatus#KEYEMPTY OperationStatus.KEYEMPTY} if the database is a Queue or Recno database and the specified key exists, but was never explicitly created by the application or was later deleted; otherwise, {@link com.sleepycat.db.OperationStatus#SUCCESS OperationStatus.SUCCESS}.\n*/\n", "func_signal": "public OperationStatus getFirst(final DatabaseEntry key,\n                                final DatabaseEntry data,\n                                LockMode lockMode)\n    throws DatabaseException", "code": "{\n\n    return OperationStatus.fromInt(\n        dbc.get(key, data, DbConstants.DB_FIRST |\n            LockMode.getFlag(lockMode) |\n            ((data == null) ? 0 : data.getMultiFlag())));\n}", "path": "src\\com\\sleepycat\\db\\Cursor.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "/**\nStore a key/data pair into the database.\n<p>\nIf the put method succeeds, the cursor is always positioned to refer to\nthe newly inserted item.  If the put method fails for any reason, the\nstate of the cursor will be unchanged.\n<p>\nIf the key already appears in the database and duplicates are supported,\nthe new data value is inserted at the correct sorted location.  If the\nkey already appears in the database and duplicates are not supported,\nthe existing key/data pair will be replaced.\n<p>\n@param key the key {@link com.sleepycat.db.DatabaseEntry DatabaseEntry} operated on.\n<p>\n@param data the data {@link com.sleepycat.db.DatabaseEntry DatabaseEntry} stored.\n<p>\n<p>\n@throws DeadlockException if the operation was selected to resolve a\ndeadlock.\n<p>\n@throws IllegalArgumentException if an invalid parameter was specified.\n<p>\n@throws DatabaseException if a failure occurs.\n*/\n", "func_signal": "public OperationStatus put(final DatabaseEntry key,\n                           final DatabaseEntry data)\n    throws DatabaseException", "code": "{\n\n    return OperationStatus.fromInt(\n        dbc.put(key, data, DbConstants.DB_KEYLAST));\n}", "path": "src\\com\\sleepycat\\db\\Cursor.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "/**\nStore a key/data pair into the database.\n<p>\nIf the putAfter method succeeds, the cursor is always positioned to refer to\nthe newly inserted item.  If the putAfter method fails for any reason, the\nstate of the cursor will be unchanged.\n<p>\nIn the case of the Btree and Hash access methods, insert the data\nelement as a duplicate element of the key to which the cursor refers.\nThe new element appears immediately\nafter\nthe current cursor position.  It is an error to call this method if the\nunderlying Btree or Hash database does not support duplicate data items.\nThe key parameter is ignored.\n<p>\nIn the case of the Hash access method, the putAfter method will fail and\nthrow an exception if the current cursor record has already been deleted.\n<p>\nIn the case of the Recno access method, it is an error to call this\nmethod if the underlying Recno database was not configured to have\nmutable record numbers.  A new key is created, all records after the\ninserted item are automatically renumbered, and the key of the new\nrecord is returned in the key parameter.  The initial value of the key\nparameter is ignored.\n<p>\nThe putAfter method may not be called for the Queue access method.\n<p>\n@param key the key {@link com.sleepycat.db.DatabaseEntry DatabaseEntry} operated on.\n<p>\n@param data the data {@link com.sleepycat.db.DatabaseEntry DatabaseEntry} stored.\n<p>\n<p>\n@throws DeadlockException if the operation was selected to resolve a\ndeadlock.\n<p>\n@throws IllegalArgumentException if an invalid parameter was specified.\n<p>\n@throws DatabaseException if a failure occurs.\n*/\n", "func_signal": "public OperationStatus putAfter(final DatabaseEntry key,\n                                final DatabaseEntry data)\n    throws DatabaseException", "code": "{\n\n    return OperationStatus.fromInt(\n        dbc.put(key, data, DbConstants.DB_AFTER));\n}", "path": "src\\com\\sleepycat\\db\\Cursor.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "/**\nMove the cursor to the specified key and closest matching data item of the\ndatabase.\n<p>\nIn the case of any database supporting sorted duplicate sets, the returned\nkey/data pair is for the smallest data item greater than or equal to the\nspecified data item (as determined by the duplicate comparison function),\npermitting partial matches and range searches in duplicate data sets.\n<p>\nIf this method fails for any reason, the position of the cursor will be\nunchanged.\n@throws NullPointerException if a DatabaseEntry parameter is null or\ndoes not contain a required non-null byte array.\n<p>\n@throws DeadlockException if the operation was selected to resolve a\ndeadlock.\n<p>\n@throws IllegalArgumentException if an invalid parameter was specified.\n<p>\n@throws DatabaseException if a failure occurs.\n<p>\n@param key the  key\nused as input and returned as output.  It must be initialized with a non-null\nbyte array by the caller.\n@param data the  data\nused as input and returned as output.  It must be initialized with a non-null\nbyte array by the caller.\n@param lockMode the locking attributes; if null, default attributes are used.\n@return {@link com.sleepycat.db.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair is\nfound; {@link com.sleepycat.db.OperationStatus#KEYEMPTY OperationStatus.KEYEMPTY} if the database is a Queue or Recno database and the specified key exists, but was never explicitly created by the application or was later deleted; otherwise, {@link com.sleepycat.db.OperationStatus#SUCCESS OperationStatus.SUCCESS}.\n*/\n", "func_signal": "public OperationStatus getSearchBothRange(final DatabaseEntry key,\n                                          final DatabaseEntry data,\n                                          LockMode lockMode)\n    throws DatabaseException", "code": "{\n\n    return OperationStatus.fromInt(\n        dbc.get(key, data,\n            DbConstants.DB_GET_BOTH_RANGE |\n            LockMode.getFlag(lockMode) |\n            ((data == null) ? 0 : data.getMultiFlag())));\n}", "path": "src\\com\\sleepycat\\db\\Cursor.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "/**\n * Adds the specified element to this set if it is not already present\n * (optional operation).\n * This method conforms to the {@link Set#add} interface.\n *\n * @param mapEntry must be a {@link java.util.Map.Entry} instance.\n *\n * @return true if the key-value pair was added to the set (and was not\n * previously present).\n *\n * @throws UnsupportedOperationException if the collection is read-only.\n *\n * @throws ClassCastException if the mapEntry is not a {@link\n * java.util.Map.Entry} instance.\n *\n * @throws RuntimeExceptionWrapper if a {@link DatabaseException} is thrown.\n */\n", "func_signal": "public boolean add(Object mapEntry)", "code": "{\n\n    Map.Entry entry = (Map.Entry) mapEntry; // allow ClassCastException\n    return add(entry.getKey(), entry.getValue());\n}", "path": "src\\com\\sleepycat\\jni\\collections\\StoredEntrySet.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "/**\nMove the cursor to the last key/data pair of the database, and return\nthat pair.  If the last key has duplicate values, the last data item in\nthe set of duplicates is returned.\n<p>\nIf this method fails for any reason, the position of the cursor will be\nunchanged.\n@throws NullPointerException if a DatabaseEntry parameter is null or\ndoes not contain a required non-null byte array.\n<p>\n@throws DeadlockException if the operation was selected to resolve a\ndeadlock.\n<p>\n@throws IllegalArgumentException if an invalid parameter was specified.\n<p>\n@throws DatabaseException if a failure occurs.\n<p>\n@param key the  key\nreturned as output.  Its byte array does not need to be initialized by the\ncaller.\n@param data the  data\nreturned as output.  Its byte array does not need to be initialized by the\ncaller.\n@param lockMode the locking attributes; if null, default attributes are used.\n@return {@link com.sleepycat.db.OperationStatus#NOTFOUND OperationStatus.NOTFOUND} if no matching key/data pair is\nfound; {@link com.sleepycat.db.OperationStatus#KEYEMPTY OperationStatus.KEYEMPTY} if the database is a Queue or Recno database and the specified key exists, but was never explicitly created by the application or was later deleted; otherwise, {@link com.sleepycat.db.OperationStatus#SUCCESS OperationStatus.SUCCESS}.\n*/\n", "func_signal": "public OperationStatus getLast(final DatabaseEntry key,\n                               final DatabaseEntry data,\n                               LockMode lockMode)\n    throws DatabaseException", "code": "{\n\n    return OperationStatus.fromInt(\n        dbc.get(key, data, DbConstants.DB_LAST |\n            LockMode.getFlag(lockMode) |\n            ((data == null) ? 0 : data.getMultiFlag())));\n}", "path": "src\\com\\sleepycat\\db\\Cursor.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "// javadoc is inherited\n", "func_signal": "public String toString()", "code": "{\n\tStringBuffer buf = new StringBuffer();\n\tbuf.append(\"[\");\n\tStoredIterator i = storedIterator();\n    try {\n        while (i.hasNext()) {\n            Map.Entry entry = (Map.Entry) i.next();\n            if (buf.length() > 1) buf.append(',');\n            Object key = entry.getKey();\n            Object val = entry.getValue();\n            if (key != null) buf.append(key.toString());\n            buf.append('=');\n            if (val != null) buf.append(val.toString());\n        }\n        buf.append(']');\n        return buf.toString();\n    }\n    finally {\n        i.close();\n    }\n}", "path": "src\\com\\sleepycat\\jni\\collections\\StoredEntrySet.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "// Constructor needed by Java RPC server\n", "func_signal": "protected Cursor(final Database database, final CursorConfig config)", "code": "{\n    this.database = database;\n    this.config = config;\n}", "path": "src\\com\\sleepycat\\db\\Cursor.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "// ------------------------------------------------------------------------\n// Implementation of the FieldVisitor interface\n// ------------------------------------------------------------------------\n", "func_signal": "public AnnotationVisitor visitAnnotation(\n    final String desc,\n    final boolean visible)", "code": "{\n    ByteVector bv = new ByteVector();\n    // write type, and reserve space for values count\n    bv.putShort(cw.newUTF8(desc)).putShort(0);\n    AnnotationWriter aw = new AnnotationWriter(cw, true, bv, bv, 2);\n    if (visible) {\n        aw.next = anns;\n        anns = aw;\n    } else {\n        aw.next = ianns;\n        ianns = aw;\n    }\n    return aw;\n}", "path": "src\\com\\sleepycat\\jni\\asm\\FieldWriter.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "/**\nStore a key/data pair into the database.\n<p>\nIf the putNoDupData method succeeds, the cursor is always positioned to refer to\nthe newly inserted item.  If the putNoDupData method fails for any reason, the\nstate of the cursor will be unchanged.\n<p>\nIn the case of the Btree and Hash access methods, insert\nthe specified key/data pair into the database, unless a key/data pair\ncomparing equally to it already exists in the database.  If a matching\nkey/data pair already exists in the database, {@link com.sleepycat.db.OperationStatus#KEYEXIST OperationStatus.KEYEXIST} is returned.\n<p>\nThis method may only be called if the underlying database has been\nconfigured to support sorted duplicate data items.\n<p>\nThis method may not be called for the Queue or Recno access methods.\n<p>\n@param key the key {@link com.sleepycat.db.DatabaseEntry DatabaseEntry} operated on.\n<p>\n@param data the data {@link com.sleepycat.db.DatabaseEntry DatabaseEntry} stored.\n<p>\n<p>\n@throws DeadlockException if the operation was selected to resolve a\ndeadlock.\n<p>\n@throws IllegalArgumentException if an invalid parameter was specified.\n<p>\n@throws DatabaseException if a failure occurs.\n*/\n", "func_signal": "public OperationStatus putNoDupData(final DatabaseEntry key,\n                                    final DatabaseEntry data)\n    throws DatabaseException", "code": "{\n\n    return OperationStatus.fromInt(\n        dbc.put(key, data, DbConstants.DB_NODUPDATA));\n}", "path": "src\\com\\sleepycat\\db\\Cursor.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "/**\nStore a key/data pair into the database.\n<p>\nIf the putKeyLast method succeeds, the cursor is always positioned to refer to\nthe newly inserted item.  If the putKeyLast method fails for any reason, the\nstate of the cursor will be unchanged.\n<p>\nIn the case of the Btree and Hash access methods, insert the specified\nkey/data pair into the database.\n<p>\nIf the underlying database supports duplicate data items, and if the\nkey already exists in the database and a duplicate sort function has\nbeen specified, the inserted data item is added in its sorted location.\nIf the key already exists in the database and no duplicate sort function\nhas been specified, the inserted data item is added as the\nlast\nof the data items for that key.\n<p>\nThe putKeyLast method may not be called for the Queue or Recno access methods.\n<p>\n@param key the key {@link com.sleepycat.db.DatabaseEntry DatabaseEntry} operated on.\n<p>\n@param data the data {@link com.sleepycat.db.DatabaseEntry DatabaseEntry} stored.\n<p>\n<p>\n@throws DeadlockException if the operation was selected to resolve a\ndeadlock.\n<p>\n@throws IllegalArgumentException if an invalid parameter was specified.\n<p>\n@throws DatabaseException if a failure occurs.\n*/\n", "func_signal": "public OperationStatus putKeyLast(final DatabaseEntry key,\n                                  final DatabaseEntry data)\n    throws DatabaseException", "code": "{\n\n    return OperationStatus.fromInt(\n        dbc.put(key, data, DbConstants.DB_KEYLAST));\n}", "path": "src\\com\\sleepycat\\db\\Cursor.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "// javadoc is inherited\n", "func_signal": "public boolean nullifyForeignKey(SecondaryDatabase db,\n                                 DatabaseEntry dataEntry)\n    throws DatabaseException", "code": "{\n\n    Object data = dataBinding.entryToObject(dataEntry);\n    data = nullifyForeignKey(data);\n    if (data != null) {\n        dataBinding.objectToEntry(data, dataEntry);\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "src\\com\\sleepycat\\jni\\bind\\serial\\TupleSerialKeyCreator.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "/**\nReturn a new cursor with the same transaction and locker ID as the\noriginal cursor.\n<p>\nThis is useful when an application is using locking and requires two\nor more cursors in the same thread of control.\n<p>\n@param samePosition\nIf true, the newly created cursor is initialized to refer to the\nsame position in the database as the original cursor (if any) and\nhold the same locks (if any). If false, or the original cursor does\nnot hold a database position and locks, the returned cursor is\nuninitialized and will behave like a newly created cursor.\n<p>\n@return\nA new cursor with the same transaction and locker ID as the original\ncursor.\n<p>\n<p>\n@throws DatabaseException if a failure occurs.\n*/\n", "func_signal": "public Cursor dup(final boolean samePosition)\n    throws DatabaseException", "code": "{\n\n    return new Cursor(database,\n        dbc.dup(samePosition ? DbConstants.DB_POSITION : 0), config);\n}", "path": "src\\com\\sleepycat\\db\\Cursor.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "// javadoc is inherited\n", "func_signal": "public boolean createSecondaryKey(TupleInput primaryKeyInput,\n                                  TupleInput dataInput,\n                                  TupleOutput indexKeyOutput)", "code": "{\n\n    /* The primary key is unmarshalled before marshalling the index key, to\n     * account for cases where the index key includes fields taken from the\n     * primary key.\n     */\n    MarshalledTupleKeyEntity entity = (MarshalledTupleKeyEntity)\n        binding.entryToObject(primaryKeyInput, dataInput);\n\n    return entity.marshalSecondaryKey(keyName, indexKeyOutput);\n}", "path": "src\\com\\sleepycat\\jni\\bind\\tuple\\TupleTupleMarshalledKeyCreator.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "/**\n * Returns true if this set contains the specified element.\n * This method conforms to the {@link Set#contains} interface.\n *\n * @param mapEntry is a {@link java.util.Map.Entry} instance to be checked.\n *\n * @return true if the key-value pair is present in the set, or false if\n * the mapEntry is not a {@link java.util.Map.Entry} instance or is not\n * present in the set.\n *\n * @throws RuntimeExceptionWrapper if a {@link DatabaseException} is thrown.\n */\n", "func_signal": "public boolean contains(Object mapEntry)", "code": "{\n\n    if (!(mapEntry instanceof Map.Entry)) {\n        return false;\n    }\n    Map.Entry entry = (Map.Entry) mapEntry;\n    DataCursor cursor = null;\n    try {\n        cursor = new DataCursor(view, false);\n        OperationStatus status =\n            cursor.findBoth(entry.getKey(), entry.getValue(), false);\n        return (status == OperationStatus.SUCCESS);\n    } catch (Exception e) {\n        throw StoredContainer.convertException(e);\n    } finally {\n        closeCursor(cursor);\n    }\n}", "path": "src\\com\\sleepycat\\jni\\collections\\StoredEntrySet.java", "repo_name": "samtingleff/bdb-jni-alt", "stars": 1, "license": "other", "language": "java", "size": 736}
{"docstring": "//function to covert a string of HEX values\n//to a byte array \n", "func_signal": "private byte[] cvHexStrToByteArr(String hexString)", "code": "{\n\tbyte [] hexByte = new byte[hexString.length()/2];\n\n\tfor(int i=0;i<hexString.length();i=i+2)\n\t\thexByte[i/2] = strToByte(hexString.substring(i,i+2));\n\t\n\treturn hexByte;\n}", "path": "test\\java\\DEScbcEvent.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "//used by cvHexStrToByteArr to convert two\n//characters to a bye value\n", "func_signal": "private byte strToByte(String strByte)", "code": "{\n\tbyte bytByte;\t\t\n\tint nibbleCounter = 0;\n\t//String currentNibble;\n\tint value = 0;\n\t\n\twhile (nibbleCounter < 2)\n\t{\n\t\tint temp = 0;\n\t\tswitch(strByte.charAt(nibbleCounter))\n\t\t{\n\t\t\tcase '0':\n\t\t\t\ttemp = 0x00;\n\t\t\t\tbreak;\n\t\t\tcase '1':\n\t\t\t\ttemp = 0x01;\n\t\t\t\tbreak;\n\t\t\tcase '2':\n\t\t\t\ttemp = 0x02;\n\t\t\t\tbreak;\n\t\t\tcase '3':\n\t\t\t\ttemp = 0x03;\n\t\t\t\tbreak;\n\t\t\tcase '4':\n\t\t\t\ttemp = 0x04;\n\t\t\t\tbreak;\n\t\t\tcase '5':\n\t\t\t\ttemp = 0x05;\n\t\t\t\tbreak;\n\t\t\tcase '6':\n\t\t\t\ttemp = 0x06;\n\t\t\t\tbreak;\n\t\t\tcase '7':\n\t\t\t\ttemp = 0x07;\n\t\t\t\tbreak;\n\t\t\tcase '8':\n\t\t\t\ttemp = 0x08;\n\t\t\t\tbreak;\n\t\t\tcase '9':\n\t\t\t\ttemp = 0x09;\n\t\t\t\tbreak;\n\t\t\tcase 'a':\n\t\t\t\ttemp = 0x0a;\n\t\t\t\tbreak;\n\t\t\tcase 'b':\n\t\t\t\ttemp = 0x0b;\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\ttemp = 0x0c;\n\t\t\t\tbreak;\n\t\t\tcase 'd':\n\t\t\t\ttemp = 0x0d;\n\t\t\t\tbreak;\n\t\t\tcase 'e': \n\t\t\t\ttemp = 0x0e;\n\t\t\t\tbreak;\n\t\t\tcase 'f':\n\t\t\t\ttemp = 0x0f;\n\t\t\t\tbreak;\n\t\t\tcase 'A':\n\t\t\t\ttemp = 0x0a;\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\t\ttemp = 0x0b;\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\t\ttemp = 0x0c;\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\ttemp = 0x0d;\n\t\t\t\tbreak;\n\t\t\tcase 'E': \n\t\t\t\ttemp = 0x0e;\n\t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\ttemp = 0x0f;\n\t\t\t\tbreak;\n\t\t}\n\t\tif(nibbleCounter == 0) \n\t\t\tvalue = temp * 16;\n\t\telse\n\t\t\tvalue = value + temp;\n\n\t\tnibbleCounter++;\n\t}\n\n\treturn (byte)value;\n\n}", "path": "test\\java\\DEScbcEvent.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/**\n * Pivot point location is calculated and stored, which will be helpful for\n * scrolling\n */\n", "func_signal": "public void mousePressed(MouseEvent e)", "code": "{\n\tDigitalShape sp = pad.getCircuit().find(e.getPoint());\n\tif (sp == null) {\n\t\tcircuit = pad.getCircuit();\n\t\tcomps = circuit.getComponents();\n\t\tpt = new Point[comps.size()];\n\n\t\tfor (int i = 0; i < pt.length; i++) {\n\t\t\tDigitalShape shape = (DigitalShape) comps.get(i);\n\t\t\tpt[i] = new Point(shape.x - e.getX(), shape.y - e.getY());\n\t\t}\n\t}\n}", "path": "web\\tar\\jHyperDoc\\src\\actions\\ScrollSensor.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/**\n * Returns all the components present in the circuit\n * \n * @return\n */\n", "func_signal": "public Vector getComponents()", "code": "{\n\tVector temp = new Vector(inputs);\n\ttemp.addAll(outputs);\n\ttemp.addAll(components);\n\treturn temp;\n}", "path": "web\\tar\\jHyperDoc\\src\\circuit\\DigitalCircuit.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/**\n * specifies the parameters for the shape of the digitalcircuits\n * \n * @param width\n * @param height\n */\n", "func_signal": "public DigitalShape(int width, int height)", "code": "{\n\tsuper(0, 0, width, height);\n\tsignal = new Signal();\n}", "path": "web\\tar\\jHyperDoc\\src\\shape\\DigitalShape.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/**\n * CTRL + Gate => DELETE Object CTRL + Node => DELETE Connections SHIFT =>\n * Start Moving Object CLICK ON NODE => Start connecting objects\n * \n * else No Action\n */\n", "func_signal": "public void mousePressed(MouseEvent e)", "code": "{\n\t//if under Simulation donot perform anyother actions\n\tif (MDIWindow.getDrawingPad().isSimulatingMode())\n\t\treturn;\n\n\t//if CTRL is pressed, then delete the object\n\tif (e.isControlDown()) {\n\t\tthis.delete();\n\t\tMDIWindow.getDrawingPad().resetMode(); //reset the mode\n\t} else if (e.isShiftDown()) {\n\t\t//if SHIFT is pressed then MOVE the object\n\t\tMDIWindow.getDrawingPad().setMode(DrawingPad.MOVING);\n\t} else {\n\t\t//do nothing\n\t}\n}", "path": "web\\tar\\jHyperDoc\\src\\shape\\DigitalShape.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/**\n * \n * @param g\n * @param src\n *            Refers to the BufferedImage\n * @param y1\n * @param y2\n * @param x\n */\n", "func_signal": "private static void vertStrip(Graphics2D g, BufferedImage src, int y1,\n\t\tint y2, int x)", "code": "{\n\t//get the height for the source\n\tint sh = src.getHeight();\n\n\twhile (y1 < y2 - sh) {\n\t\tg.drawImage(src, x, y1, null);\n\t\ty1 += sh;\n\t}\n\t/**\n\t * get the width for the source\n\t */\n\tint sw = src.getWidth();\n\tif (y2 - y1 > 0)\n\t\tg.drawImage(src, x, y1, x + sw, y2, 0, 0, sw, y2 - y1, null);\n}", "path": "web\\tar\\jHyperDoc\\src\\util\\Util.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/**\n * when mouse is dragged in the circuit component, then the scrolling effect\n * takes place in the circuit hence the circuit can be scrolled.\n */\n", "func_signal": "public void mouseDragged(MouseEvent e)", "code": "{\n\tif (pt != null)\n\t\tfor (int i = 0; i < pt.length; i++) {\n\t\t\tDigitalShape shape = (DigitalShape) comps.get(i);\n\t\t\tint dx = e.getX() + pt[i].x;\n\t\t\tint dy = e.getY() + pt[i].y;\n\t\t\tshape.setLocation(dx, dy);\n\t\t}\n}", "path": "web\\tar\\jHyperDoc\\src\\actions\\ScrollSensor.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/**\n * \n * @param g\n * @param s\n *            get the boundaryvalues for the shape\n */\n", "func_signal": "public static void paintTexture(Graphics2D g, Shape s, DrawingPad pad)", "code": "{\n\tRectangle r = s.getBounds();\n\tif (r.height <= 0 || r.width <= 0)\n\t\treturn;\n\t/**\n\t * when the height and width of the symbol is greater than 0 then\n\t * GraphicsConfiguration is set to DeviceConnfiguration\n\t */\n\n\tGraphicsConfiguration config = g.getDeviceConfiguration();\n\tBufferedImage strip = (BufferedImage) pad.getImage();\n\n\t/**\n\t * creates an object gstrip for drawing horizontal and vertical strip\n\t */\n\tGraphics2D gStrip = strip.createGraphics();\n\n\thorStrip(gStrip, strip, 0, r.width, 0);\n\tgStrip.dispose();\n\n\tShape prevClip = g.getClip();\n\tif (!r.equals(s)) {\n\t\tg.clip(s);\n\t}\n\n\tvertStrip(g, strip, r.y, r.height, r.x);\n\tg.setClip(prevClip);\n}", "path": "web\\tar\\jHyperDoc\\src\\util\\Util.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/*\n * DC Components are added to inputs LED Components are added to outputs\n * Other Components are added to components\n */\n", "func_signal": "public void add(DigitalShape c)", "code": "{\n\n\tif (c instanceof LED)\n\t\toutputs.add(c);\n\telse if (c instanceof DC)\n\t\tinputs.add(c);\n\telse\n\t\tcomponents.add(c);\n\n\tc.setCircuit(this);\n}", "path": "web\\tar\\jHyperDoc\\src\\circuit\\DigitalCircuit.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/*\n    \t * Converts a byte array to hex string\n    \t */\n", "func_signal": "private String cvByteArrToString(byte[] block)", "code": "{\n        \tStringBuffer buf = new StringBuffer();\n\n\t\tint len = block.length;\n\n        \tfor (int i = 0; i < len; i++) \n\t\t{\n            \t\tbyteToHex(block[i], buf);\n        \t} \n       \t \treturn buf.toString();\n    \t}", "path": "test\\java\\DEScbcEvent.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/**\n * @see java.awt.event.KeyListener#keyPressed(KeyEvent)\n */\n", "func_signal": "public void keyPressed(KeyEvent e)", "code": "{\n\tif (e.getKeyCode() == KeyEvent.VK_ENTER) {\n\t\tString text = this.getText();\n\t\ttext = text.equals(\"\") ? null : text;\n\t\tobject.setLabel(text);\n\t}\n}", "path": "web\\tar\\jHyperDoc\\src\\gui\\PropertiesWindow.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/**\n * \n * @param g\n *            implements the Graphics2D if signal is true then color of\n *            signal is set to green else it is set to bordercolor\n */\n", "func_signal": "synchronized public void draw(Graphics2D g)", "code": "{\n\tif (signal != null && signal.value()) {\n\t\tg.setColor(Color.GREEN);\n\t} else {\n\t\tg.setColor(getBorderColor());\n\t}\n\n\tif (pad != null) {\n\t\tUtil.paintTexture(g, this, pad);\n\t}\n}", "path": "web\\tar\\jHyperDoc\\src\\shape\\DigitalShape.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/*\n     \t* Converts a byte to hex digit and writes to the supplied buffer\n     \t*/\n", "func_signal": "private void byteToHex(byte b, StringBuffer buf)", "code": "{\n        \tchar[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8',\n                \t'9', 'A', 'B', 'C', 'D', 'E', 'F' };\n        \tint high = ((b & 0xf0) >> 4);\n        \tint low = (b & 0x0f);\n        \tbuf.append(hexChars[high]);\n       \t \tbuf.append(hexChars[low]);\n}", "path": "test\\java\\DEScbcEvent.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/*\n * simulate will get the current signal , inverts it and sets to the object\n * and starts simulating i.e start telling the output nodes that the signal\n * is changed\n */\n", "func_signal": "public void mousePressed(MouseEvent e)", "code": "{\n\tif (pad.isSimulatingMode() && MIN_INPUTS == 0) {\n\t\tif (this.getSignal().value() == true) {\n\t\t\tthis.switchOff();\n\t\t} else {\n\t\t\tthis.switchOn();\n\t\t}\n\t} else {\n\t\tsuper.mousePressed(e);\n\t}\n}", "path": "web\\tar\\jHyperDoc\\src\\gates\\DC.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/**\n * Sets the object.\n * \n * @param object\n *            The object to set\n */\n", "func_signal": "public void setObject(Properties object)", "code": "{\n\tthis.object = object;\n\tthis.setText(object.getLabel());\n}", "path": "web\\tar\\jHyperDoc\\src\\gui\\PropertiesWindow.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/**\n * @param l\n */\n", "func_signal": "public void setGateType(long type)", "code": "{\n\tsetMode(ADDING);\n\tgateType = type;\n}", "path": "web\\tar\\jHyperDoc\\src\\gui\\DrawingPad.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/**\n * @param DrawingPad\n *            for which this listener should be added for scrolling\n */\n", "func_signal": "public ScrollSensor(DrawingPad pad)", "code": "{\n\tthis.pad = pad;\n\tpad.addMouseListener(this);\n\tpad.addMouseMotionListener(this);\n\n}", "path": "web\\tar\\jHyperDoc\\src\\actions\\ScrollSensor.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\tFileReader fr = null;\n\ttry {\n\n\t\tDigitalCircuit cir;\n\t\tfr = new FileReader(\"temp-cir.xml\");\n\t\tcir = (DigitalCircuit) st.fromXML(fr);\n\n\t\tDigitalWindow win = new DigitalWindow();//create a new window\n\t\tDrawingPad pad = win.getDrawingPad();\n\t\tpad.setCircuit(cir);\n\n\t\tMDIWindow.addWindow(win);\n\t\twin.show();\n\n\t\tfr.close();\n\t} catch (FileNotFoundException e1) {\n\t\te1.printStackTrace();\n\t} catch (IOException e1) {\n\t\te1.printStackTrace();\n\t} catch (Exception e1) {\n\t\ttry {\n\t\t\tfr.close();\n\t\t} catch (IOException e2) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te2.printStackTrace();\n\t\t}\n\t}\n}", "path": "web\\tar\\jHyperDoc\\src\\toolbar\\OpenButton.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "//If the Point lies in any of the object in the circuit\n", "func_signal": "public DigitalShape find(Point p)", "code": "{\n\tVector temp = new Vector(inputs);\n\ttemp.addAll(outputs);\n\ttemp.addAll(components);\n\n\tfor (int i = 0; i < temp.size(); i++) {\n\t\tDigitalShape s = (DigitalShape) temp.get(i);\n\t\tDigitalShape s1 = s.find(p);\n\t\tif (s1 != null)\n\t\t\treturn s1;\n\t}\n\n\treturn null;\n}", "path": "web\\tar\\jHyperDoc\\src\\circuit\\DigitalCircuit.java", "repo_name": "msubra/jHyperDoc", "stars": 0, "license": "gpl-2.0", "language": "java", "size": 1228}
{"docstring": "/*Ausgefhrt bei Klick auf 'Potential erstellen'*/\n", "func_signal": "private void buttonPotActionPerformed(java.awt.event.ActionEvent evt)", "code": "{\n\t/*Fenster zum Erstellen eines Potentials anzeigen*/\n\tpotPanel.button.addActionListener(this);\n\tpotFrame = new JFrame(\"Potential erstellen\");\n\tpotFrame.add(potPanel);\n        potFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        potFrame.setLocation(500, 300);\n\tpotFrame.setSize(400, 250);\n        potFrame.setVisible(true);\n    }", "path": "twoDim\\gui\\MainPanel.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Ausgefhrt bei Klick auf 'Potential erstellen'*/\n", "func_signal": "private void buttonPotActionPerformed(java.awt.event.ActionEvent evt)", "code": "{\n\t/*Fenster zum Erstellen eines Potentials anzeigen*/\n\tpotPanel.button.addActionListener(this);\n\tpotFrame = new JFrame(\"Potential erstellen\");\n\tpotFrame.add(potPanel);\n        potFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        potFrame.setLocation(500, 300);\n\tpotFrame.setSize(400, 250);\n        potFrame.setVisible(true);\n    }", "path": "oneDim\\gui\\MainPanel.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Initialisierung des OpenGL-Bereichs*/\n", "func_signal": "public void init(GLAutoDrawable drawable)", "code": "{\n        GL gl = drawable.getGL();\n        gl.setSwapInterval(1);\n        gl.glClearColor(0.95f, 0.95f, 0.95f, 0.0f);\n        gl.glShadeModel(GL.GL_SMOOTH);\n    }", "path": "twoPart\\gui\\Visu.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Schreibt die schaltbaren Anzeigeparameter in die Konsole*/\n", "func_signal": "public static void printHelp()", "code": "{\n\tSystem.out.println(\"\\n--- verwendbare Befehle im Simulationsfenster ---\");\n\tSystem.out.println(\"l.....logarithmische Skalierung\");\n\tSystem.out.println(\"k.....Koordinatenachsen an/aus\");\n\tSystem.out.println(\"s.....Screenshot erstellen\");\n\tSystem.out.println(\"space.Pause\");\n\tSystem.out.println(\"\");\n}", "path": "twoPart\\gui\\Visu.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Ausgefhrt bei Klick auf 'Initialisierung erstellen'*/\n", "func_signal": "private void buttonInitActionPerformed(java.awt.event.ActionEvent evt)", "code": "{\n\t/*Fenster zum Erstellen eines Anfangszustands anzeigen*/\n\tinitPanel.button.addActionListener(this);\n\tinitFrame = new JFrame(\"Initialisierung erstellen\");\n\tinitFrame.add(initPanel);\n        initFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        initFrame.setLocation(500, 300);\n\tinitFrame.setSize(400, 250);\n        initFrame.setVisible(true);\n    }", "path": "oneDim\\gui\\MainPanel.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Wird nach jedem Zeitschritt aufgerufen und zeichnet alle sichtbaren Elemente*/\n", "func_signal": "public void display(GLAutoDrawable drawable)", "code": "{\n\t/*Erstellen der Zeichenumgebung und des Koordinatensystems*/\n\t/*(0,0) unten links, (xMax, height) oben rechts)*/\n\tGL gl = drawable.getGL();\n\tgl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);\n\tgl.glMatrixMode(GL.GL_PROJECTION);\n\tgl.glLoadIdentity();\n\tgl.glOrtho(-0.5, xMax-0.5, -0.5, height-0.5, -1, 1);\n\tgl.glMatrixMode(GL.GL_MODELVIEW);\n\tgl.glLoadIdentity();\n\tgl.glLineWidth(2.0f);\t\t/*Liniendicke*/\n\tgl.glBegin(GL.GL_LINES);\n\t\n\t/*Koordinatensystem zeichnen*/\n\tif(showCoord) drawCoordSys(gl);\n\n\tdouble x=a;\t\t/*x beginnt am linken Rand der Simulationsbox*/\n\tint xPx=0;\t\t/*x in Pixeln*/\n\tint xxPx=0;\t\t/*x+dx in Pixeln*/\n\n\tint i;\n\tdouble tmpAcv1=0.0;\t\t/*Wert des Wellenfunktionsbetragsquadrats mit AskarCakmakVisscher*/\n\tdouble tmpAcv2=0.0;\t\t/*Wert einen rumlichen Schritt weiter*/\n\n\t/*durchluft die Simulationsbox*/\n\tfor (i=0;i<xMax-1;i++) {\n\t\t/*Berechnen der Pixelkoordinaten*/\n\t\txPx=(int)(x/dx+xMax/2);\n\t\txxPx=(int)((x+dx)/dx+xMax/2);\n\n\t\ttmpAcv1=mySimAcv.getStateOne(x);\n\t\ttmpAcv2=mySimAcv.getStateOne(x+dx);\n\t\t/*unter Umstnden: logarithmische Skalierung*/\n\t\tif(logarithmic) {\n\t\t\ttmpAcv1=0.3*Math.log(tmpAcv1*1000+1)/Math.log(10);\n\t\t\ttmpAcv2=0.3*Math.log(tmpAcv2*1000+1)/Math.log(10);\n\t\t}\n\t\t//Teilchen 1 zeichnen\n\t\tgl.glColor3f(1.0f, 0.0f, 0.0f);\n\t\tgl.glVertex2i(xPx,(int)(tmpAcv1*height)+10);\n\t\tgl.glVertex2i(xxPx,(int)(tmpAcv2*height)+10);\n\t\t\n\t\ttmpAcv1=mySimAcv.getStateTwo(x);\n\t\ttmpAcv2=mySimAcv.getStateTwo(x+dx);\n\t\t/*unter Umstnden: logarithmische Skalierung*/\n\t\tif(logarithmic) {\n\t\t\ttmpAcv1=0.3*Math.log(tmpAcv1*1000+1)/Math.log(10);\n\t\t\ttmpAcv2=0.3*Math.log(tmpAcv2*1000+1)/Math.log(10);\n\t\t}\n\t\t//Teilchen 2 zeichnen\n\t\tgl.glColor3f(0.3f, 0.5f, 0.3f);\n\t\tgl.glVertex2i(xPx,(int)(tmpAcv1*height)+10);\n\t\tgl.glVertex2i(xxPx,(int)(tmpAcv2*height)+10);\n\n\t\t//rumlicher Schritt\n\t\tx+=dx;\n\t}\n\t\n\tgl.glEnd();\n\t\n\t//Screenshot machen\n\tif(makeScreenshot || (makeScreens!=0 && mySimAcv.getSteps()%makeScreens==0)) {\n\t\ttry {\n\t\t\tString sep = System.getProperty(\"file.separator\");\n\t\t\tString path = System.getProperty(\"user.dir\");\n\t\t\tpath=path+sep+\"acse\"+sep+\"screens\"+sep+mySimAcv.getPotential()+\"_\"+mySimAcv.getInitial()+\"_\"+mySimAcv.getSteps()+\".png\";\n\t\t\tScreenshot.writeToFile(new File(path),width-20,height-50);\n\t\t\tSystem.out.println(\"Screenshot in \"+path+\" gespeichert!\");\n\t\t} catch(Exception e) {\n\t\t\tSystem.out.println(\"Fehler beim Screenshot!\");\n\t\t\tSystem.out.println(e);\n\t\t}\n\t\tmakeScreenshot=false;\n\t}\n\t\n\tgl.glFlush();\n\t\n\t//nchster Zeitschritt, falls Simulation nicht pausiert ist\n        if(!makePause) {\n\t\tmySimAcv.nextTimeStep();\n\t}\n    }", "path": "twoPart\\gui\\Visu.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Verarbeitet Grennderungen des Simulationsfensters*/\n", "func_signal": "public void reshape(GLAutoDrawable drawable, int x, int y, int width, int height)", "code": "{\n        GL gl = drawable.getGL();\n        GLU glu = new GLU();\n        if (height <= 0) {\n            height = 1;\n        }\n        final float h = (float) width / (float) height;\n        gl.glViewport(0, 0, width, height);\n        gl.glMatrixMode(GL.GL_PROJECTION);\n        gl.glLoadIdentity();\n        glu.gluPerspective(45.0f, h, 1.0, 20.0);\n        gl.glMatrixMode(GL.GL_MODELVIEW);\n        gl.glLoadIdentity();\n    }", "path": "twoPart\\gui\\Visu.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Erzeugt OpenGL-Simulationsfenster*/\n", "func_signal": "public void start()", "code": "{\n\tfinal Frame frame = new Frame(\"Visualisierung 2-Teilchen-Schr\\u00f6dingergleichung in 1D\");\n        GLCanvas canvas = new GLCanvas();\n        canvas.addGLEventListener(this);\n\tcanvas.addKeyListener(this);\n        frame.add(canvas);\n        frame.setSize(width, height);\n        final Animator animator = new Animator(canvas);\t\t\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                new Thread(new Runnable() {\n\n                    public void run() {\n                        animator.stop();\n\t\t\t\t\tframe.dispose();\n                    }\n                }).start();\n            }\n        });\n        frame.setLocationRelativeTo(null);\n        frame.setVisible(true);\n        animator.start();\n}", "path": "twoPart\\gui\\Visu.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Verarbeitet die Tastatureingaben und passt die Anzeigeparameter entsprechend an*/\n", "func_signal": "public void keyPressed(KeyEvent e)", "code": "{\n\tchar c=e.getKeyChar();\n\tif(c=='s') makeScreenshot=!makeScreenshot;\n\tif(c=='l') logarithmic=!logarithmic;\n\tif(c=='k') showCoord=!showCoord;\n\tif(c==' ') makePause=!makePause;\n    }", "path": "twoPart\\gui\\Visu.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Zeichnet ein rudimentres Koordinatensystem*/\n", "func_signal": "public void drawCoordSys(GL gl)", "code": "{\n\t//y-Achse bei x=0 zeichnen\n\tgl.glColor3f(0.8f, 0.8f, 0.8f);\n\tgl.glVertex2i(xMax/2,0);\n\tgl.glVertex2i(xMax/2,height);\n\t\n\t//x-Achse bei y=0 zeichnen\n\tgl.glVertex2i(0,10);\n\tgl.glVertex2i(width,10);\n\t\n\t/*Markierungen an der y-Achse zeichnen*/\n\tif(logarithmic) {\n\t\t//Markierung bei y=0.2 zeichnen\n\t\tgl.glVertex2i(xMax/2-5,10+(int)(0.3*Math.log(201)/Math.log(10)*height));\n\t\tgl.glVertex2i(xMax/2+5,10+(int)(0.3*Math.log(201)/Math.log(10)*height));\t\n\t\t//Markierung bei y=0.4 zeichnen\n\t\tgl.glVertex2i(xMax/2-5,10+(int)(0.3*Math.log(401)/Math.log(10)*height));\n\t\tgl.glVertex2i(xMax/2+5,10+(int)(0.3*Math.log(401)/Math.log(10)*height));\n\t\t//Markierung bei y=0.6 zeichnen\n\t\tgl.glVertex2i(xMax/2-5,10+(int)(0.3*Math.log(601)/Math.log(10)*height));\n\t\tgl.glVertex2i(xMax/2+5,10+(int)(0.3*Math.log(601)/Math.log(10)*height));\n\t\t//Markierung bei y=0.8 zeichnen\n\t\tgl.glVertex2i(xMax/2-5,10+(int)(0.3*Math.log(801)/Math.log(10)*height));\n\t\tgl.glVertex2i(xMax/2+5,10+(int)(0.3*Math.log(801)/Math.log(10)*height));\n\t}\n\telse {\n\t\t//Markierung bei y=0.2 zeichnen\n\t\tgl.glVertex2i(xMax/2-5,10+(int)(0.2*height));\n\t\tgl.glVertex2i(xMax/2+5,10+(int)(0.2*height));\t\n\t\t//Markierung bei y=0.4 zeichnen\n\t\tgl.glVertex2i(xMax/2-5,10+(int)(0.4*height));\n\t\tgl.glVertex2i(xMax/2+5,10+(int)(0.4*height));\n\t\t//Markierung bei y=0.6 zeichnen\n\t\tgl.glVertex2i(xMax/2-5,10+(int)(0.6*height));\n\t\tgl.glVertex2i(xMax/2+5,10+(int)(0.6*height));\n\t\t//Markierung bei y=0.8 zeichnen\n\t\tgl.glVertex2i(xMax/2-5,10+(int)(0.8*height));\n\t\tgl.glVertex2i(xMax/2+5,10+(int)(0.8*height));\n\t}\n}", "path": "twoPart\\gui\\Visu.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Speichert den Namen des ausgewhlten Potentials/Anfangszustands als String*/\n", "func_signal": "public void itemStateChanged(ItemEvent e)", "code": "{\n        if(e.getStateChange()==ItemEvent.SELECTED) {\n            this.potential=(String)potCombo.getSelectedItem();\n            this.initial=(String)initCombo.getSelectedItem();\n        }\n    }", "path": "twoDim\\gui\\MainPanel.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*analytische Lsung?*/\n", "func_signal": "public MainPanel()", "code": "{\n/*Erstellen des Inhalts der Potential/AZ-Erstell-Fenster*/\n\t    potPanel = new PotPanel();\n\t    initPanel = new InitPanel();\n\n/*Initialisierung*/\nisSolution=false;\n\n/*Tabellenlayout*/\nsetLayout(new GridLayout(0,2,5,5));\n\n/*Initialisieren der Formular-Komponenten (mit sinnvollen Anfangswerten)*/\naField = new JTextField(\"-7.5\",5);\nbField = new JTextField(\"7.5\",5);\nnField = new JTextField(\"300\",5);\ndtField = new JTextField(\"0.00025\",5);\nscreenField = new JTextField(\"0\");\n        potCombo = new JComboBox();\n        initCombo = new JComboBox();\n        analytic = new JCheckBox(\"Gibt es analytische L\\u00f6sung?\");\n        startButton = new JButton(\">>> Simulation starten <<<\");\n        startButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                startButtonActionPerformed(evt);\n            }\n        });\n        potButton = new JButton(\"Potential erstellen\");\n        potButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                buttonPotActionPerformed(evt);\n            }\n        });\n        initButton = new JButton(\"Initialisierung erstellen\");\n        initButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                buttonInitActionPerformed(evt);\n            }\n        });\n\n        /*Auswahldialog fr das Potential mit Namen fllen*/\n        potCombo.addItemListener(this);\n        potCombo.addItem(\"-- Potential w\\u00e4hlen --\");\nString sep = System.getProperty(\"file.separator\");\n        String path = System.getProperty(\"user.dir\");\n        File f = new File(path+sep+\"acse\"+sep+\"twoDim\"+sep+\"potentials\"+sep);\n        String[] filenames = f.list(new FilenameFilter(){\n            public boolean accept(File dir, String name){\n                return name.endsWith(\".class\");\n            }\n        });\n        for(int i = 0; i  < filenames.length; i++){\n            potCombo.addItem(filenames[i].replaceAll(\".class\", \"\"));\n        }\n\n        /*Auswahldialog fr den Anfangszustand mit Namen fllen*/\n        initCombo.addItemListener(this);\n        initCombo.addItem(\"-- Anfangszustand w\\u00e4hlen ---\");\n        File f2 = new File(path+sep+\"acse\"+sep+\"twoDim\"+sep+\"solutions\"+sep);\n        String[] filenames2 = f2.list(new FilenameFilter(){\n            public boolean accept(File dir, String name){\n                return name.endsWith(\".class\");\n            }\n        });\n        for(int i = 0; i  < filenames2.length; i++){\n            initCombo.addItem(filenames2[i].replaceAll(\".class\", \"\"));\n        }\n\n        /*Actionlistener fr Auswahldialog ob Anfangszustand als analytische Lsung funktioniert*/\n        analytic.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                analyticActionPerformed(evt);\n            }\n        });\n\n/*Erstellen der fetten Beschriftungen*/\nJLabel param = new JLabel(\"Wahl der Parameter:\");\nparam.setFont(param.getFont().deriveFont(Font.BOLD));\nJLabel szen = new JLabel(\"Wahl des Simulationsszenarios:\");\nszen.setFont(szen.getFont().deriveFont(Font.BOLD));\nJLabel opt = new JLabel(\"Wahl der Zusatzoptionen:\");\nopt.setFont(opt.getFont().deriveFont(Font.BOLD));\n        \n/*Einfgen der Layoutelemente gem dem Tabellenlayout*/\nadd(param);\t\t\t\t\t\t\t\t\t\tadd(new JLabel());\n        add(new JLabel(\"x, y von\"));\t\t\t\t\tadd(aField);\nadd(new JLabel(\"x, y bis\"));\t\t\t\t\tadd(bField);\nadd(new JLabel(\"Anzahl Gitterpunkte x,y\"));\t\tadd(nField);\nadd(new JLabel(\"zeitliche Schrittweite\"));\t\tadd(dtField);\nadd(new JLabel());\t\t\t\t\t\t\t\tadd(new JLabel());\nadd(szen);\t\t\t\t\t\t\t\t\t\tadd(new JLabel());\n        add(potCombo);\t\t\t\t\t\t\t        add(potButton);\n        add(initCombo);\t\t\t\t\t\t\t        add(initButton);\nadd(new JLabel());\t\t\t\t\t\t\t\tadd(new JLabel());\nadd(opt);\t\t\t\t\t\t\t\t\t\tadd(new JLabel());\n        add(analytic);\t\t\t\t\t\t\t\t\tadd(new JLabel());\nadd(new JLabel(\"Automatische Screenshots\"));\tadd(screenField);\nadd(new JLabel());\t\t\t\t\t\t\t\tadd(new JLabel());\nadd(new JLabel());\t\t\t\t\t\t\t\tadd(new JLabel());\nadd(new JLabel());\t\t\t\t\t\t\t\tadd(new JLabel());\nadd(new JLabel());\t\t\t\t\t\t\t\tadd(new JLabel());\nadd(new JLabel());\t\t\t\t\t\t\t\tadd(new JLabel());\nadd(startButton);\n\t}", "path": "twoDim\\gui\\MainPanel.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Fgt die Namen von erstellten Potentialen/Anfangszustnden den Listen hinzu*/\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\tint i;\n\tboolean alreadyInside=false;\n\tif (e.getSource()==potPanel.button) {\n\t\tfor(i=0;i<potCombo.getItemCount();i++) {\n\t\t\tif(potPanel.getName().equals((String)potCombo.getItemAt(i))) alreadyInside=true;\n\t\t}\n\t\tif(!alreadyInside) potCombo.addItem(potPanel.getName());\n\t\tpotFrame.dispose();\n\t}  \n\tif (e.getSource()==initPanel.button) {\n\t\talreadyInside=false;\n\t\tfor(i=0;i<initCombo.getItemCount();i++) {\n\t\t\tif(initPanel.getName().equals((String)initCombo.getItemAt(i))) alreadyInside=true;\n\t\t}\n\t\tif(!alreadyInside) initCombo.addItem(initPanel.getName());\n\t\tinitFrame.dispose();\n\t}\n}", "path": "twoDim\\gui\\MainPanel.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Ausgefhrt beim Klick auf den Startbutton*/\n", "func_signal": "private void startButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{\n\tif(this.potential.equals(\"-- Potential w\\u00e4hlen ---\") ||\n\t   this.initial.equals(\"-- Anfangszustand w\\u00e4hlen ---\") ||\n\t   (!calcCn && !calcAcv)) {\n\t   /*Fehler ausgeben, falls keine Anfangsbedingungen/Potential/Algorithmen gewhlt sind*/\n\t\tSystem.out.println(\"Ungueltiges Simulationsszenario oder kein Algorithmus gewaehlt!\");\n\t}\n\telse {\n\t\t/*Erstellen einer Simulation mit den gewnschten Optionen*/\n\t\tint xMax=Integer.valueOf(nField.getText()).intValue();\n\t\tint yMax=700;\n\t\tdouble a=Double.parseDouble(aField.getText());\n\t\tdouble b=Double.parseDouble(bField.getText());\n\t\tdouble dx=(b-a)/xMax;\n\t\tdouble dt=Double.parseDouble(dtField.getText());\n\t\tint makeScreens=Integer.valueOf(screenField.getText()).intValue();\n\t\t\n\t\t/*Erstellen eines Simulationsobjektes vom ACV-Algorithmus*/\n\t\tAskarCakmakVisscher1D mySimAcv = new AskarCakmakVisscher1D(xMax,a,b,dx,dt,this.potential,this.initial,this.isSolution);\n\t\t\n\t\t/*Erstellen eines Simulationsobjektes vom CN-Algorithmus*/\n\t\tCrankNicholson1D mySimCn = new CrankNicholson1D(xMax,a,b,dx,dt,this.potential,this.initial,this.isSolution);\n\t\t\n\t\t/*Erstellen eines Visualisierungsfensters*/\n\t\tVisu simuWindow = new Visu(mySimAcv,mySimCn,xMax,yMax,a,b,dx,calcCn,calcAcv,makePlot,makeScreens);\n\t}\n    }", "path": "oneDim\\gui\\MainPanel.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Fgt die Namen von erstellten Potentialen/Anfangszustnden den Listen hinzu*/\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\tint i;\n\tboolean alreadyInside=false;\n\tif (e.getSource()==potPanel.button) {\n\t\tfor(i=0;i<potCombo.getItemCount();i++) {\n\t\t\tif(potPanel.getName().equals((String)potCombo.getItemAt(i))) alreadyInside=true;\n\t\t}\n\t\tif(!alreadyInside) potCombo.addItem(potPanel.getName());\n\t\tpotFrame.dispose();\n\t}  \n\tif (e.getSource()==initPanel.button) {\n\t\talreadyInside=false;\n\t\tfor(i=0;i<initCombo.getItemCount();i++) {\n\t\t\tif(initPanel.getName().equals((String)initCombo.getItemAt(i))) alreadyInside=true;\n\t\t}\n\t\tif(!alreadyInside) initCombo.addItem(initPanel.getName());\n\t\tinitFrame.dispose();\n\t}\n}", "path": "oneDim\\gui\\MainPanel.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Ausgefhrt beim Klick auf den Startbutton*/\n", "func_signal": "private void startButtonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{\n\tif(this.potential.equals(\"-- Potential w\\u00e4hlen ---\") ||\n\t   this.initial.equals(\"-- Anfangszustand w\\u00e4hlen ---\")) {\n\t    /*Fehler ausgeben, falls keine Anfangsbedingungen/Potential gewhlt sind*/\n\t\tSystem.out.println(\"Ungueltiges Simulationsszenario gewaehlt!\");\n\t}\n\telse {\n\t    /*Erstellen einer Simulation mit den gewnschten Optionen*/\n\t\tint xMax=Integer.valueOf(nField.getText()).intValue();\n\t\tint yMax=700;\n\t\tdouble a=Double.parseDouble(aField.getText());\n\t\tdouble b=Double.parseDouble(bField.getText());\n\t\tdouble dx=(b-a)/xMax;\n\t\tdouble dt=Double.parseDouble(dtField.getText());\n\t\tint makeScreens = Integer.valueOf(screenField.getText()).intValue();\n\t\t\n\t\t/*Erstellen eines Simulationsobjektes vom ACV-Algorithmus*/\n\t\tAskarCakmakVisscher2D mySimAcv = new AskarCakmakVisscher2D(xMax,xMax,a,b,a,b,dx,dt,this.potential,this.initial,this.isSolution);\n\t\t\n\t\t/*Erstellen eines Visualisierungsfensters*/\n\t\tVisu simuWindow = new Visu(mySimAcv,xMax,yMax,a,b,dx,makeScreens);\n\t}\n    }", "path": "twoDim\\gui\\MainPanel.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Wird nach Klick auf den Button ausgefhrt*/\n", "func_signal": "private void buttonActionPerformed(java.awt.event.ActionEvent evt)", "code": "{\n\t /*Eingaben aus den Textfeldern lesen*/\n         this.name = nameField.getText();\n         this.initial = initialArea.getText();\n\t \n\t /*Pfad der zu schreibenden AZ-Klasse generieren*/\n\t String sep = System.getProperty(\"file.separator\");\n         String path = System.getProperty(\"user.dir\");\n         String filename = path+sep+\"acse\"+sep+\"twoDim\"+sep+\"solutions\"+sep+name+\".java\";\n\n\t /*Schreiben der AZ-Klasse*/\n         try {\n             Writer p = new FileWriter(filename);\n        p.write(\n\t\t\"package acse.twoDim.solutions;\\n\\n\"+\n\n\t\t\"import acse.twoDim.util.*;\\n\"+\n\t\t\"import acse.twoDim.interfaces.Solution;\\n\\n\"+\n\n\t\t\"public class \"+name+\" implements Solution {\\n\"+\n\t\t\"private Constants myConst;\\n\"+\n\t\t\"private double dt;\\n\"+\n\t\t\"private int n;\\n\\n\"+\n\n\t\t\"public \"+name+\"(Constants myConst, double dt) {\\n\"+\n\t\t\"this.myConst = myConst;\\n\"+\n\t\t\"this.n=0;\\n\"+\n\t\t\"this.dt=dt;\\n\"+\n\t\t\"}\\n\\n\"+\n\n\t\t\"public double getState(double x, double y) {\\n\"+\n            \"double out=0.0;\\n\"+\n            \"out=Math.pow(getStatePsi(x,y).getReal(),2)+Math.pow(getStatePsi(x,y).getImag(),2);\\n\"+\n            \"\\nreturn out;\\n\"+\n\t\t\"}\\n\\n\"+\n\n\t\t\"public void nextTimeStep() {\\n\"+\n            \"n+=1;\\n\"+\n\t\t\"}\\n\\n\"+\n\n\t\t\"public Complex getStatePsi(double x, double y) {\\n\"+\n            \"double real=0.0;\\n\"+\n            \"double imag=0.0;\\n\"+\n\t\t\"double t=n*dt;\\n\"+\n\t\t\"/*Beginn der Implementierung*/\\n\"+\n            initial+\n\t\t\"\\n/*Ende der Implementierung*/\\n\"+\n            \"Complex out = new Complex(\"+\n            \"real,imag\" +\n            \");\\n\"+\n            \"return out;\\n\"+\n\t\t\"}\\n\"+\n\t\t\"}\"\n\t\t);\n             p.close();\n\n\t\t /*\n\t\t Kompilieren der soeben erstellten AZ-Klasse;\n\t\t bentigt das Paket Tools.jar, ansonsten NullPointerException\n\t\t */\n             JavaCompiler tool = ToolProvider.getSystemJavaCompiler();\n             StandardJavaFileManager manager = tool.getStandardFileManager( null, null, null );\n             List<File> fileList = Arrays.asList( new File(filename) );\n             Iterable<? extends JavaFileObject> units;\n             units = manager.getJavaFileObjectsFromFiles( fileList );\n             CompilationTask task = tool.getTask( null, manager, null, null, null, units );\n             task.call();\n             manager.close();\n\n\t\t /*Ausgabe, falls die Klasse kompiliert werden konnte*/\n             System.out.println(\"Initialisierungsklasse erfolgreich erstellt!\");\n         } catch(Exception e) {\n\t\t /*Ausgabe, falls die Klasse nicht kompilierbar war*/\n             System.out.println(\"Fehler beim Erstellen der Initialisierungsklasse\");\n             System.out.println(e);\n         }\n    }", "path": "twoDim\\gui\\InitPanel.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Enthlt Implementierung*/\n", "func_signal": "public InitPanel()", "code": "{\n\t\t/*Erstellen der Textfelder, Eintragen sinnvoller Implementierungsbeispiele*/\n        nameField = new JTextField(\"Name\",30);\n        initialArea = new JTextArea(\"/*Implementierung des Wellenpakets*/\\nreal=0.8*Math.exp(-x*x-y*y);\\nimag=0;\",8,30);\n\n\t\t/*\n\t\tErstellen und Beschriften des Speichern-Buttons;\n\t\tKlick ruft Methode buttonActionPerformed(evt) auf\n\t\t*/\n        button = new JButton(\"Initialisierungsklasse erstellen\");\n        button.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                buttonActionPerformed(evt);\n            }\n        });\n\n\t\t/*Elemente der Fensteroberflche hinzufgen*/\n        add(nameField);\n        add(initialArea);\n        add(button);\n\t}", "path": "twoDim\\gui\\InitPanel.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*ACV benutzen?*/\n", "func_signal": "public MainPanel()", "code": "{\n/*Erstellen des Inhalts der Potential/AZ-Erstell-Fenster*/\n\t    potPanel = new PotPanel();\ninitPanel = new InitPanel();\n\n/*Initialisierung*/\nmakePlot=false;\n        isSolution=false;\n\n/*Tabellen-Layout*/\nsetLayout(new GridLayout(0,2,5,5));\n\n/*Initialisieren der Formular-Komponenten (mit sinnvollen Anfangswerten)*/\naField = new JTextField(\"-7.5\",5);\nbField = new JTextField(\"7.5\",5);\nnField = new JTextField(\"750\",5);\ndtField = new JTextField(\"0.0001\",5);\nscreenField = new JTextField(\"0\");\n        potCombo = new JComboBox();\n        initCombo = new JComboBox();\nplot = new JCheckBox(\"Plot der Normierung erstellen?\");\n        analytic = new JCheckBox(\"Gibt es analytische L\\u00f6sung?\");\n        Cn = new JCheckBox(\"Crank-Nicholson\");\n        Acv = new JCheckBox(\"Askar-Cakmak-Visscher\");\n        startButton = new JButton(\">>> Simulation starten <<<\");\n        startButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                startButtonActionPerformed(evt);\n            }\n        });\n        potButton = new JButton(\"Potential erstellen\");\n        potButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                buttonPotActionPerformed(evt);\n            }\n        });\n        initButton = new JButton(\"Initialisierung erstellen\");\n        initButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                buttonInitActionPerformed(evt);\n            }\n        });\n\n        /*Auswahldialog fr das Potential mit Namen fllen*/\n        potCombo.addItemListener(this);\n        potCombo.addItem(\"-- Potential w\\u00e4hlen --\");\nString sep = System.getProperty(\"file.separator\");\n        String path = System.getProperty(\"user.dir\");\n        File f = new File(path+sep+\"acse\"+sep+\"oneDim\"+sep+\"potentials\"+sep);\n        String[] filenames = f.list(new FilenameFilter(){\n            public boolean accept(File dir, String name){\n                return name.endsWith(\".class\");\n            }\n        });\n        for(int i = 0; i  < filenames.length; i++){\n            potCombo.addItem(filenames[i].replaceAll(\".class\", \"\"));\n        }\n\n        /*Auswahldialog fr den Anfangszustand mit Namen fllen*/\n        initCombo.addItemListener(this);\n        initCombo.addItem(\"-- Anfangszustand w\\u00e4hlen ---\");\n\n        File f2 = new File(path+sep+\"acse\"+sep+\"oneDim\"+sep+\"solutions\"+sep);\n        String[] filenames2 = f2.list(new FilenameFilter(){\n            public boolean accept(File dir, String name){\n                return name.endsWith(\".class\");\n            }\n        });\n        for(int i = 0; i  < filenames2.length; i++){\n            initCombo.addItem(filenames2[i].replaceAll(\".class\", \"\"));\n        }\n\n        /*Actionlistener fr Auswahldialog ob Anfangszustand als analytische Lsung funktioniert*/\n        analytic.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                analyticActionPerformed(evt);\n            }\n        });\n\n        /*Actionlistener fr Auswahldialog ob Normierungsplot erstellt werden soll*/\n        plot.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                plotActionPerformed(evt);\n            }\n        });\n\n        /*Actionlistener fr Auswahldialog ob Cn verwendet werden soll*/\n        Cn.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                CnActionPerformed(evt);\n            }\n        });\n\n        /*Actionlistener fr Auswahldialog ob Acv verwendet werden soll*/\n        Acv.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                AcvActionPerformed(evt);\n            }\n        });\n\n/*Erstellen der fetten Beschriftungen*/\nJLabel algo = new JLabel(\"Wahl der Algorithmen:\");\nalgo.setFont(algo.getFont().deriveFont(Font.BOLD));\nJLabel param = new JLabel(\"Wahl der Parameter:\");\nparam.setFont(param.getFont().deriveFont(Font.BOLD));\nJLabel szen = new JLabel(\"Wahl des Simulationsszenarios:\");\nszen.setFont(szen.getFont().deriveFont(Font.BOLD));\nJLabel opt = new JLabel(\"Wahl der Zusatzoptionen:\");\nopt.setFont(opt.getFont().deriveFont(Font.BOLD));\n        \n/*Einfgen der Layoutelemente gem dem Tabellenlayout*/\nadd(param);\t\t\t\t\t\t\t\t\tadd(new JLabel());\n        add(new JLabel(\"x von\"));\t\t\t\t\tadd(aField);\nadd(new JLabel(\"x bis\"));\t\t\t\t\tadd(bField);\nadd(new JLabel(\"Anzahl Gitterpunkte\"));\t\tadd(nField);\nadd(new JLabel(\"zeitliche Schrittweite\"));\tadd(dtField);\nadd(new JLabel());\t\t\t\t\t\t\tadd(new JLabel());\nadd(algo);\t\t\t\t\t\t\t\t\tadd(new JLabel());\n        add(Acv);\t\t\t\t\t\t\t        add(Cn);\nadd(new JLabel());\t\t\t\t\t\t\tadd(new JLabel());\nadd(szen);\t\t\t\t\t\t\t\t\tadd(new JLabel());\n        add(potCombo);\t\t\t\t\t\t        add(potButton);\n        add(initCombo);\t\t\t\t\t\t        add(initButton);\nadd(new JLabel());\t\t\t\t\t\t\tadd(new JLabel());\nadd(opt);\t\t\t\t\t\t\t\t\tadd(new JLabel());\n        add(analytic);\t\t\t\t\t\t\t\tadd(new JLabel());\nadd(plot);\t\t\t\t\t\t\t\t\tadd(new JLabel());\nadd(new JLabel(\"Automatische Screenshots\"));add(screenField);\nadd(new JLabel());\t\t\t\t\t\t\tadd(new JLabel());\n        add(startButton);    \n\t}", "path": "oneDim\\gui\\MainPanel.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/*Ausgefhrt bei Klick auf 'Initialisierung erstellen'*/\n", "func_signal": "private void buttonInitActionPerformed(java.awt.event.ActionEvent evt)", "code": "{\n\t/*Fenster zum Erstellen eines Anfangszustands anzeigen*/\n\tinitPanel.button.addActionListener(this);\n\tinitFrame = new JFrame(\"Initialisierung erstellen\");\n\tinitFrame.add(initPanel);\n        initFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        initFrame.setLocation(500, 300);\n\tinitFrame.setSize(400, 250);\n        initFrame.setVisible(true);\n    }", "path": "twoDim\\gui\\MainPanel.java", "repo_name": "crystalmountain04/AcSE", "stars": 1, "license": "None", "language": "java", "size": 352}
{"docstring": "/**\n * wartet auf Nachrichten und verarbeitet sie\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n\twhile (!this.abbrechen && socket.isConnected())\n\t{\n\t\ttry\n\t\t{\n\t\t\tif (input.available() > 0)\n\t\t\t{// wenn etwas zu lesen ist...\n\t\t\t\tif (ois == null)\n\t\t\t\t\tois = new ObjectInputStream(input);\n\t\t\t\t// lies die Nachricht ein\n\t\t\t\tNachricht newNachricht = (Nachricht) ois.readObject();\n\t\t\t\t// und verarbeite sie\n\t\t\t\tverarbeiteNachricht(newNachricht);\n\t\t\t}\n\t\t}\n\t\tcatch (ClassNotFoundException e)\n\t\t{\n\t\t\tSystem.err\n\t\t\t\t\t.println(\"Fehler beim Lesen einer Nachricht: Class not found\");\n\t\t\te.printStackTrace();\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tSystem.err.println(\"Fehler beim Lesen einer Nachricht: IO\");\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t// beim Beenden...\n\ttry\n\t{\n\t\t// alle Verbindungen kappen...\n\t\tois.close();\n\t\tsocket.close();\n\t\t// ...und GUI anpassen\n\t\taufgabe6.Gui.getGui().entferneSpielfeld();\n\t}\n\tcatch (IOException e)\n\t{\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\aufgabe6\\net\\ClientKommunikationsThread.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * initialisiert eine neue Clientview\n */\n", "func_signal": "public ClientSicht()", "code": "{\n\tthis.spielerFiguren = new int[4][4];\n\tfor (int itSpieler = 0; itSpieler < 4; itSpieler++)\n\t\tArrays.fill(spielerFiguren[itSpieler], -2);\n\t\n\tthis.spielerName = new String[4];\n\tArrays.fill(spielerName, \"\");\n}", "path": "src\\aufgabe6\\ClientSicht.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Sendet eine Trennen-Nachricht an den Server.\n */\n", "func_signal": "public void sendeTrennen()", "code": "{\n\tNachricht trennNachricht = new Nachricht(this.client.getName(),\n\t\t\tNACHRICHTEN_TYP.SPIELER_PLUS_MINUS);\n\ttrennNachricht.setValue(KEYS.SPIELER_NUMMER, String\n\t\t\t.valueOf(-(this.client.getClientRelevanteDaten()\n\t\t\t\t\t.getMeineNummer() + 1)));\n\ttrennNachricht.setValue(KEYS.SPIELER_NAME, Gui.getGui()\n\t\t\t.getSpielerNamensFeldInhalt());\n\tthis.sendeNachricht(trennNachricht);\n}", "path": "src\\aufgabe6\\net\\ClientKommunikationsThread.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * gibt an, ob ein Spieler schon/noch Figuren auf dem Brett hat\n * @return wahr, wenn dieser Spieler Figuren auf dem Brett hat\n */\n", "func_signal": "public boolean istDraussen()", "code": "{\n\tfor (Figur itFigur : figuren) {\n\t\tif ((itFigur.getPosition() > -1) && (itFigur.getPosition() < 40))\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}", "path": "src\\aufgabe6\\Spieler.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * wandelt einen vom Server erhaltenen String in ein Figuren-Array um\n * @param theString der vom Server erhaltene String\n * @return das Figuren-Array, das aus dem String erstellt wurde\n */\n", "func_signal": "private int[][] figurenFromString(String theString)", "code": "{\n\tint[][] retArr = new int[4][4];\n\t\n\tString[] splitString = theString.split(\";\");\n\t\n\tfor (int i = 0; i < splitString.length; i++) {\n\t\tString[] splitString2 = splitString[i].split(\",\");\n\t\t\n\t\tfor (int j = 0; j < splitString2.length; j++)\n\t\t\tretArr[i][j] = Integer.parseInt(splitString2[j]);\n\t}\n\t\n\treturn retArr;\n}", "path": "src\\aufgabe6\\ClientSicht.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * holt die erste Figur, die noch au\u00dferhalb des Spielfelds steht, auf das Spielfeld\n */\n", "func_signal": "public boolean kommRaus()", "code": "{\n\tfor (Figur itFig : figuren)\n\t\tif (itFig.getPosition() == -1) {\n\t\t\tif(Spielfeld.getInstance().kommRaus(this, itFig))\n\t\t\t{\n\t\t\t\titFig.aufStart();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\treturn false;\n}", "path": "src\\aufgabe6\\Spieler.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * wartet, bis das Spiel vorbei ist, und erzeugt danach ein neues\n */\n", "func_signal": "public static void spielNeustarten()", "code": "{\n\twhile (dasSpiel!=null && dasSpiel.isAlive())\n\t\tThread.yield();\n\tdasSpiel = new Spiel();\n}", "path": "src\\aufgabe6\\MenschMain.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Sendet eine vorbereitete Nachricht an den verbunden Server.\n * \n * @param nachricht\n *            die zu sendende Nachricht\n */\n", "func_signal": "public void sendeNachricht(Nachricht nachricht)", "code": "{\n\ttry\n\t{\n\t\toutput.writeObject(nachricht);\n\t\toutput.flush();\n\t}\n\tcatch (IOException e)\n\t{\n\t\tSystem.err.println(\"Nachricht konnte nicht gesendet werden\");\n\t}\n}", "path": "src\\aufgabe6\\net\\ClientKommunikationsThread.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * erzeugt ein neues Spiel, wenn das aktuelle nicht mehr l\u00e4uft\n */\n", "func_signal": "public static void neuesSpiel()", "code": "{\n\tif (!dasSpiel.isAlive())\n\t\tdasSpiel = new Spiel();\n}", "path": "src\\aufgabe6\\MenschMain.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Unterscheidet die Nachrichtenarten, leitet die Nachricht an alle\n * wichtigen Instanzen weiter und schreibt ins Log.\n * \n * @param nachricht\n *            die zu verarbeitende Nachricht\n */\n", "func_signal": "private void verarbeiteNachricht(Nachricht nachricht)", "code": "{\n\tswitch (nachricht.getNachrichtenTyp())\n\t{\n\tcase SPIELER_PLUS_MINUS:\n\t\tClient.getInstance().getClientRelevanteDaten().verarbeiteNachricht(\n\t\t\t\tnachricht);\n\t\tGui.getGui().repaintSpielfeld();\n\t\tbreak;\n\tcase SPIELER_X_WUERFELT_Y:\n\t\tClient.getInstance().getClientRelevanteDaten().verarbeiteNachricht(\n\t\t\t\tnachricht);\n\t\tGui.getGui().repaintSpielfeld();\n\t\tGui.getGui().appendToTextPane(nachricht.getLogMessage());\n\t\tbreak;\n\tcase UNGUELTIGER_ZUG:\n\t\tClient.getInstance().getClientRelevanteDaten().setZugAusstehend(\n\t\t\t\ttrue);\n\t\tGui.getGui().appendToTextPane(nachricht.getLogMessage());\n\t\tbreak;\n\tcase SPIELER_X_HAT_GEWONNEN:\n\t\tGui.getGui().appendToTextPane(nachricht.getLogMessage());\n\t\tJOptionPane.showMessageDialog(null, nachricht.getLogMessage(),\n\t\t\t\t\"Mensch aergere dich nicht : Spielende\",\n\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\t\tthis.sendeTrennen();\n\t\tbreak;\n\t}\n}", "path": "src\\aufgabe6\\net\\ClientKommunikationsThread.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * initialisiert das Spiel\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t\tGui.getGui().starteGui();\n\t\t\n    dasSpiel = new Spiel();\n}", "path": "src\\aufgabe6\\MenschMain.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * gibt an, ob dieser Spieler Figuren hat, die er setzen kann\n * @param anzahlSchritte die Anzahl der zurueckzulegenden Schritte (= gewuerfelte Zahl)\n * @return true, wenn dieser Spieler Figuren hat, die er mit den gegebenen Schritten setzen kann\n */\n", "func_signal": "public boolean hatZugMoeglichkeit(byte anzahlSchritte)", "code": "{\n\tfor (Figur itFigur : this.figuren) {\n\t\tif (((anzahlSchritte == 6) && (Spielfeld.getInstance().kannRausKommen(itFigur.getBesitzer(), itFigur))) || ((itFigur.getPosition() > -1) && (Spielfeld.getInstance().istZugGueltig(this, itFigur.getPosition(), anzahlSchritte))))\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}", "path": "src\\aufgabe6\\Spieler.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Sendet an den Server, dass die Figur an Position position bewegt werden\n * soll.\n * \n * @param position\n *            die Position der zu bewegenden Figur\n */\n", "func_signal": "public void sendeBewegungsAufforderung(int position)", "code": "{\n\tNachricht n = new Nachricht(this.client.getName(),\n\t\t\tNACHRICHTEN_TYP.BEWEGUNGS_AUFFORDERUNG);\n\tn.setValue(KEYS.FIGUREN_POSITION, \"\" + position);\n\tthis.sendeNachricht(n);\n}", "path": "src\\aufgabe6\\net\\ClientKommunikationsThread.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * fuehrt einen Zug durch\n * @param anzahlSchritte die gewuerfelte Zahl (= Anzahl der zuruecklegbaren Schritte)\n * @return ob eine Figur bewegt werden konnte\n */\n", "func_signal": "public boolean ziehe(int figurnummerposition, int anzahlSchritte)", "code": "{\n\tFigur figur = null;\n\tfor (int i=0;i<figuren.size();i++)\n\t{\n\t    figur = figuren.get(i);\n\t    if (figur.getPosition()==figurnummerposition)\n\t        break;\n\t}\n\tif (figur==null || figurnummerposition!=figur.getPosition()) {\n\t    return false;\n\t}\n\t\n\tint neuePosition = Spielfeld.getInstance().bewegeFigur(this, figur.getPosition(), anzahlSchritte);\n\tif (neuePosition > -1) {\n\t\tfigur.bewege(neuePosition);\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "path": "src\\aufgabe6\\Spieler.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * gibt an, ob ein Spieler gewonnen hat (= alle Figuren im Ziel)\n * @return true, wenn er gewonnen hat, sonst false\n */\n", "func_signal": "public boolean hatGewonnen()", "code": "{\n\tfor (Figur itFigur : figuren) {\n\t\tif (!itFigur.istInZiel())\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}", "path": "src\\aufgabe6\\Spieler.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * verarbeite eine Nachricht und aktualisiere die ClientSicht\n * @param theNachricht die zu verarbeitende Nachricht\n */\n", "func_signal": "public void verarbeiteNachricht(Nachricht theNachricht)", "code": "{\n\tswitch (theNachricht.getNachrichtenTyp()) {\n\tcase SPIELER_PLUS_MINUS:\n\t\tString derName = theNachricht.getValue(Nachricht.KEYS.SPIELER_NAME);\n\t\tByte dieNummer = Byte.parseByte(theNachricht.getValue(Nachricht.KEYS.SPIELER_NUMMER));\n\t\t\n\t\tif (dieNummer < 0) {\t\t// Spieler soll geloescht werden\n\t\t\tdieNummer++;\t\t\t// Spielernummern muessen bei SPIELER_PLUS_MINUS so kodiert werden, dass -0 nicht erreicht wird, sie reichen also von 1 bis 4 (bzw. -4 bis -1) statt von 0 bis 3\n\t\t\tthis.spielerName[-dieNummer] = \"\";\n\t\t\tArrays.fill(this.spielerFiguren[-dieNummer], -2);\n\t\t\t\n\t\t\tif (-dieNummer == this.meineNummer) {\t// ich selbst soll geloescht werden\n\t    \t\tGui.getGui().appendToTextPane(\"Sie haben das Spiel verlassen.\");\n\t\t        Client.getInstance().loescheClientRelevanteDaten();\n\t\t\t} else\n\t    \t\tGui.getGui().appendToTextPane(derName + \" hat das Spiel verlassen.\");\n\t\t} else {\t\t\t\t\t// Spieler soll hinzugefuegt werden\n\t\t\tdieNummer--;\t\t\t// Spielernummern muessen bei SPIELER_PLUS_MINUS so kodiert werden, dass -0 nicht erreicht wird, sie reichen also von 1 bis 4 (bzw. -4 bis -1) statt von 0 bis 3\n\t\t\tif (this.meineNummer == -1) {\n\t\t\t\tthis.meineNummer = dieNummer;\n\t    \t\tGui.getGui().appendToTextPane(\"Sie sind dem Spiel als Spieler \" + (dieNummer + 1) + \" beigetreten.\");\n\t\t\t} else\n\t    \t\tGui.getGui().appendToTextPane(theNachricht.getLogMessage());\n\n\t\t\tthis.spielerName[dieNummer] = derName;\n\t\t\tthis.spielerFiguren = figurenFromString(theNachricht.getValue(KEYS.FIGUREN));\n\t\t}\n\t\tbreak;\n\tcase SPIELER_X_WUERFELT_Y:\n\t\t//byte dieSpielerNummer = Byte.parseByte(theNachricht.getValue(Nachricht.KEYS.SPIELER_NUMMER));\n\t\t//byte wuerfelZahl = Byte.parseByte(theNachricht.getValue(Nachricht.KEYS.WUERFELZAHL))\n\t\taktuellerSpieler = Byte.parseByte(theNachricht.getValue(KEYS.SPIELER_NUMMER));\n\t\tletzteWuerfelZahl = Byte.parseByte(theNachricht.getValue(KEYS.WUERFELZAHL));\n\t\t\n\t\tString nachrichtFiguren = theNachricht.getValue(Nachricht.KEYS.FIGUREN);\n\t\tif (!this.istSpielGestartet)\n\t\t\tthis.istSpielGestartet = true;\n\t\t\n\t\tthis.spielerFiguren = figurenFromString(nachrichtFiguren);\n\t\tzugAusstehend = true;\n\t\tbreak;\n\t}\n}", "path": "src\\aufgabe6\\ClientSicht.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * erzeuge ClientSicht aus einem Spieler-Vektor (vom Server aufzurufen)\n * @param theSpieler der Spielervektor\n */\n", "func_signal": "public ClientSicht(Spieler[] theSpieler)", "code": "{\n\tspielerFiguren = new int[4][4];\n\t\n\tfor (int itSpieler = 0; itSpieler < theSpieler.length; itSpieler++) {\n\t\tif (theSpieler[itSpieler] != null) {\n\t\t\tfor (int itFigur = 0; itFigur < 4; itFigur++)\n\t\t\t\tspielerFiguren[itSpieler][itFigur] = theSpieler[itSpieler].getFiguren().get(itFigur).getPosition();\n\t\t} else {\n\t\t\tArrays.fill(spielerFiguren[itSpieler], -2);\n\t\t}\n\t}\n}", "path": "src\\aufgabe6\\ClientSicht.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * wandelt die Figuren dieser ClientSicht in einen String um, der versendet werden kann\n */\n", "func_signal": "public String toString()", "code": "{\n\tString retString = \"\";\n\t\n\tfor (int i = 0; i < 4; i++) {\n\t\tfor (int j = 0; j < 4; j++)\n\t\t\tretString += spielerFiguren[i][j] + \",\";\n\t\tretString += \";\";\n\t}\n\n\treturn retString;\n}", "path": "src\\aufgabe6\\ClientSicht.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Erstellt einen neuen Kommunikationsthread, der Nachrichten mit dem Server\n * austauscht.\n * \n * @param socket\n *            Fertig verbundener Socket, ueber den die Kommunikation laeuft.\n * @param client\n *            Referenz auf unseren Erzeuger.\n */\n", "func_signal": "public ClientKommunikationsThread(Socket socket, Client client)", "code": "{\n\t// Werte \u00fcbernehmen und Streams an den Socket anschliessen\n\tthis.abbrechen = false;\n\tthis.socket = socket;\n\tthis.client = client;\n\ttry\n\t{\n\t\tinput = this.socket.getInputStream();\n\t\toutput = new ObjectOutputStream(this.socket.getOutputStream());\n\t}\n\tcatch (Exception e)\n\t{\n\t\tSystem.err\n\t\t\t\t.println(\"Konnte auf dem Client einen Kommunikationsthread nicht starten\");\n\t\te.printStackTrace();\n\t}\n\t// beim Server anmelden\n\tNachricht n = new Nachricht(this.client.getName(),\n\t\t\tNACHRICHTEN_TYP.SPIELER_PLUS_MINUS);\n\tn.setValue(KEYS.SPIELER_NAME, Gui.getGui()\n\t\t\t\t\t.getSpielerNamensFeldInhalt());\n\tthis.sendeNachricht(n);\n}", "path": "src\\aufgabe6\\net\\ClientKommunikationsThread.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "//private int[] figurenImHaus = null;\n", "func_signal": "public GuiSpielfeld()", "code": "{\n\tthis.setBackground(Color.WHITE);\n\t\n\tthis.feld = new byte[][] { \n\t\t\t{ 2, 2, 0, 0, 1, 1, 3, 0, 0, 3, 3 },\n\t\t\t{ 2, 2, 0, 0, 1, 3, 1, 0, 0, 3, 3 },\n\t\t\t{ 0, 0, 0, 0, 1, 3, 1, 0, 0, 0, 0 },\n\t\t\t{ 0, 0, 0, 0, 1, 3, 1, 0, 0, 0, 0 },\n\t\t\t{ 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1 },\n\t\t\t{ 1, 2, 2, 2, 2, 0, 4, 4, 4, 4, 1 },\n\t\t\t{ 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 4 },\n\t\t\t{ 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 0 },\n\t\t\t{ 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 0 },\n\t\t\t{ 5, 5, 0, 0, 1, 5, 1, 0, 0, 4, 4 },\n\t\t\t{ 5, 5, 0, 0, 5, 1, 1, 0, 0, 4, 4 } };\n\t\n\tthis.figurenPositionen = new Point[]{\n\t\t\tnew Point(4,0),new Point(4,1),new Point(4,2),new Point(4,3),new Point(4,4),new Point(3,4),\n\t\t\tnew Point(2,4),new Point(1,4),new Point(0,4),new Point(0,5),new Point(0,6),new Point(1,6),\n\t\t\tnew Point(2,6),new Point(3,6),new Point(4,6),new Point(4,7),new Point(4,8),new Point(4,9),\n\t\t\tnew Point(4,10),new Point(5,10),new Point(6,10),new Point(6,9),new Point(6,8),new Point(6,7),\n\t\t\tnew Point(6,6),new Point(7,6),new Point(8,6),new Point(9,6),new Point(10,6),new Point(10,5),\n\t\t\tnew Point(10,4),new Point(9,4),new Point(8,4),new Point(7,4),new Point(6,4),new Point(6,3),\n\t\t\tnew Point(6,2),new Point(6,1),new Point(6,0),new Point(5,0),new Point(5,1),new Point(5,2),\n\t\t\tnew Point(5,3),new Point(5,4),new Point(1,5),new Point(2,5),new Point(3,5), new Point(4,5),\n\t\t\tnew Point(5,6), new Point(5,7),new Point(5,8), new Point(5,9),new Point(6,5), new Point(7,5),\n\t\t\tnew Point(8,5), new Point(9,5)\n\t};\n\t\n\t//this.figurenImHaus = new int[]{ 0,0,0,0 };\n\tthis.addMouseListener(this);\n}", "path": "src\\aufgabe6\\Gui.java", "repo_name": "sdoerner/MenschAergerDichNicht", "stars": 1, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Construct an Action State pair, intended meaning: this Action takes you\n * to State\n * \n * @param a\n *            the action to carry out\n * @param s\n *            the state travelled to\n */\n", "func_signal": "public ActionStatePair(Action a, State s)", "code": "{\n\taction = a;\n\tstate = s;\n}", "path": "src\\search\\ActionStatePair.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * A printable string of the state - displays the tile configuration using\n * newlines.\n * \n * @return a string displaying the tile configuration of the state\n */\n", "func_signal": "public String toString()", "code": "{\n\tDecimalFormat nf = new DecimalFormat(\"00\");\n\tStringBuffer sb = new StringBuffer();\n\tfor (int r = 0; r < tiles.length; r++) {\n\t\tfor (int c = 0; c < tiles[r].length; c++) {\n\t\t\tsb.append(\" \" + nf.format(tiles[r][c]));\n\t\t}\n\t\tsb.append(\"\\n\");\n\t}\n\treturn sb.toString();\n}", "path": "src\\search\\fifteen\\PuzzleState.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * The minimax function which calculates the utility for this node. If the\n * state is non-terminal it uses the minimax strategy to create new nodes\n * (with the expanded states). See Russell and Norvig, Artificial\n * Intelligence: A modern approach, 2nd ed., pp. 162-167. Prentice-Hall,\n * 2003.\n */\n", "func_signal": "protected double value()", "code": "{\n\t// extract state from this node\n\tMiniMaxState state = (MiniMaxState) getState();\n\t// test if this is a goal state for the player that acts\n\tif (state.goal()) {\n\t\t// calculates the value of the goal state (should be positive for\n\t\t// the winning player, negative otherwise)\n\t\treturn state.utility();\n\t} else if (getDepth() > MAXDEPTH) { // or if this is a state beyond\n\t\t\t\t\t\t\t\t\t\t// expansion\n\t\treturn state.utility();\n\t} else { // not a goal state\n\t\t// ensure that the derived utilities will at least be an improvement\n\t\t// from these values...\n\t\tdouble maxUtility = -9999999;\n\t\tdouble minUtility = +9999999;\n\t\t// expand the current node into descending nodes (alternating the\n\t\t// active player)\n\t\tNode[] succ = expand();\n\t\t// test if this is a terminating, non-goal state, if so return what\n\t\t// the state is \"worth\"\n\t\tif (succ.length == 0) {\n\t\t\treturn state.utility();\n\t\t}\n\t\tif (state.isMaxState()) { // MAX acts... we want to find the\n\t\t\t\t\t\t\t\t\t// highest utility\n\t\t\t// Each of the newly expanded nodes is explored\n\t\t\tfor (int i = 0; i < succ.length; i++) {\n\t\t\t\tmaxUtility = Math.max(maxUtility, ((MiniMaxNode) succ[i])\n\t\t\t\t\t\t.value());\n\t\t\t}\n\t\t\treturn maxUtility;\n\t\t} else { // MIN acts ... we need to face the worst case (lowest\n\t\t\t\t\t// utility)\n\t\t\tfor (int a = 0; a < succ.length; a++) {\n\t\t\t\tminUtility = Math.min(minUtility, ((MiniMaxNode) succ[a])\n\t\t\t\t\t\t.value());\n\t\t\t}\n\t\t\treturn minUtility;\n\t\t}\n\t}\n}", "path": "src\\search\\MiniMaxNode.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Create a new state by looking at another state and performing an action.\n * \n * @param origin\n *            the original state\n * @param action\n *            the action which is taken\n * @throws RuntimeException\n *             if the action is invalid\n */\n", "func_signal": "public PuzzleState(PuzzleState origin, Action action)", "code": "{\n\tthis(origin);\n\tperformAction(this, action);\n}", "path": "src\\search\\fifteen\\PuzzleState.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * An example of an admissable heuristic function (the least number of tiles\n * that need to be moved)\n * \n * @param one\n *            State to be compared\n * @param two\n *            State to be compared\n * @return the distance between the two specified states\n */\n", "func_signal": "public static int distance(int[][] one, int[][] two)", "code": "{\n\tint dist = 0;\n\tfor (int r1 = 0; r1 < one.length; r1++) {\n\t\tfor (int c1 = 0; c1 < one[r1].length; c1++) {\n\t\t\tif (one[r1][c1] != two[r1][c1])\n\t\t\t\tdist++;\n\t\t}\n\t}\n\treturn dist;\n}", "path": "src\\search\\fifteen\\PuzzleState.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Calculates the total heuristic value of the puzzle\n */\n", "func_signal": "protected void calculateValue()", "code": "{\n\t\n\tPuzzleState state = this.getState();\n\tPuzzleState goalState = new PuzzleState();\n\tint[] tile, goalTile;\n\t\n\t// first component: number of misplaced tiles\n\tfor (int i = 0; i < 4; i++)\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\t// if tile is incorrect\n\t\t\tif (goalState.tiles[i][j] == state.tiles[i][j])\n\t\t\t\tcontinue;\n\t\t\t// otherwise increment heuristic value\n\t\t\tvalue++;\n\t\t\t}\n\t\t\t\n\t// second component: find Manhattan distance for first wrong number\n\t// and apply a high weight to it\n\tfor (int i = 1; i < 16; i++) {\n\t\ttile = Tiles.findTile(i, state);\n\t\tgoalTile = Tiles.findTile(i, goalState);\n\t\tif (tile[0] == goalTile[0] && tile[1] == goalTile[1])\n\t\t\tcontinue;\n\t\tvalue += (Math.abs(tile[0] - goalTile[0]) + Math.abs(tile[1] - goalTile[1]))*1.4;\n\t\tbreak;\n\t}\n\t\n\t// third component: distances of adjacent tiles\n\tint[] whiteTile = Tiles.findTile(0, state);\n\tList<int[]> adjacentTiles = Tiles.findAdjacent(state,\n\t\t\twhiteTile[0], whiteTile[1]);\n\t\n\tfor (int[] adjacentTile : adjacentTiles) {\n\t\ttile = Tiles.findTile(\n\t\t\t\tstate.tiles[adjacentTile[0]][adjacentTile[1]], state);\n\t\tgoalTile = Tiles.findTile(\n\t\t\t\tstate.tiles[adjacentTile[0]][adjacentTile[1]], goalState);\n\t\t\n\t\tvalue += (Math.abs(tile[0] - goalTile[0]) + Math.abs(tile[1] - goalTile[1]));\n\t}\n\t\n\tif (!greedy)\n\t\tvalue += (int) this.getCost();\n\t//System.out.println(\"Value = \" + value);\n}", "path": "src\\search\\fifteen\\H2Node.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Constructor\n * @param state Initial puzzle state\n */\n", "func_signal": "public MisplacedNode(PuzzleState state)", "code": "{\n\tsuper(state);\n\tcalculateValue();\n}", "path": "src\\search\\fifteen\\MisplacedNode.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * This method is called if states are checked for equality on basis of the\n * tile configuration (e.g. if checking for previous instances in the queue)\n * \n * @param obj\n *            the object to compare to\n * @return true if the states are equal, false otherwise\n */\n", "func_signal": "public boolean equals(Object obj)", "code": "{\n\tif (obj.getClass().equals(this.getClass())) {\n\t\tPuzzleState state = (PuzzleState) obj;\n\t\tfor (int r = 0; r < tiles.length; r++) {\n\t\t\tfor (int c = 0; c < tiles[r].length; c++) {\n\t\t\t\tif (state.tiles[r][c] != tiles[r][c])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "src\\search\\fifteen\\PuzzleState.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Find a tile given the number\n * @param number Number to find\n * @param state An instance of PuzzleState\n * @return A size-two array containing the coordinates of the number in the puzzle \n */\n", "func_signal": "public static int[] findTile(int number, PuzzleState state)", "code": "{\n\tint[] location = new int[2];\n\t\n\tfor (int i = 0; i < 4; i++) {\n\t\tfor (int j = 0; j < 4; j++)\n\t\t\tif (state.tiles[i][j] == number) {\n\t\t\t\tlocation[0] = i;\n\t\t\t\tlocation[1] = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t}\n\treturn location;\n}", "path": "src\\search\\util\\Tiles.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Perform a Mini-Max search from the specified initial state. Amongst the\n * descending \"nodes\", the one with the best utility is returned. What is\n * \"best\" is determined by looking at whose turn it is (and that information\n * is found in the initial Mini-Max state). Always just an \"action\" from the\n * specified state.\n * \n * @param initial\n *            The initial state\n * @return the node that presents the best option for the current player\n *         (whoever it is)\n */\n", "func_signal": "public static MiniMaxNode minimaxSearch(MiniMaxState initial)", "code": "{\n\tMiniMaxNode root = new MiniMaxNode(initial);\n\tNode[] choice = root.expand();\n\tdouble[] util = new double[choice.length];\n\tint best = 0;\n\tfor (int i = 0; i < choice.length; i++) {\n\t\tutil[i] = ((MiniMaxNode) choice[i]).value(-9999999, +9999999); // with\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// alpha-beta\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// pruning\n\t\t// util[i]=((MiniMaxNode)choice[i]).value(); // without alpha-beta\n\t\t// pruning\n\t\t// System.out.println(choice[i].getState()+\":\"+util[i]); // debug by\n\t\t// printing out all options with their corresponding utility-values\n\t\tSystem.out.print(util[i] + \" \"); // debug by printing out all\n\t\t\t\t\t\t\t\t\t\t\t// utility-values\n\t\t// we select the action that gives the best future utility\n\t\t// note that in some cases several actions may result in the same\n\t\t// utility and that this\n\t\t// could present an opportunity to introduce arbitrary heuristics\n\t\tif (initial.isMaxState()) { // we \"MAX\" is deciding what to do\n\t\t\tif (util[i] > util[best])\n\t\t\t\tbest = i;\n\t\t} else { // opponent \"MIN\" is deciding\n\t\t\tif (util[i] < util[best])\n\t\t\t\tbest = i;\n\t\t}\n\t}\n\treturn (MiniMaxNode) choice[best];\n}", "path": "src\\search\\MiniMaxNode.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * A new state is created but the board configuration of the supplied state\n * is copied.\n * \n * @param state\n *            the state to copy\n */\n", "func_signal": "public PuzzleState(PuzzleState state)", "code": "{\n\tthis.tiles = new int[4][4];\n\tfor (int i = 0; i < 4; i++) {\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tthis.tiles[i][j] = state.tiles[i][j];\n\t\t}\n\t}\n}", "path": "src\\search\\fifteen\\PuzzleState.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Constructor\n * @param parent Parent of node\n * @param action Action to move to\n * @param state Resulting state of the action\n */\n", "func_signal": "public H2Node(H2Node parent, Action action, State state)", "code": "{\n\tsuper(parent, action, state);\n\tcalculateValue();\n}", "path": "src\\search\\fifteen\\H2Node.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * The constructor initialises the board to the goal configuration. From\n * there all sequences of legal actions will render a puzzle that can be\n * solved.\n */\n", "func_signal": "public PuzzleState()", "code": "{\n\tthis.tiles = new int[4][4];\n\tfor (int i = 0; i < 4; i++) {\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tthis.tiles[i][j] = i * 4 + j + 1;\n\t\t}\n\t}\n\ttiles[3][3] = 0; // empty\n}", "path": "src\\search\\fifteen\\PuzzleState.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * The successor function that generates all valid ActionStatePairs from the\n * current state.\n * \n * @return an array of all valid Action State pairs\n */\n", "func_signal": "public ActionStatePair[] successor()", "code": "{\n\t// ArrayList list=new ArrayList<ActionStatePair>();\n\tArrayList<ActionStatePair> list = new ArrayList<ActionStatePair>();\n\tfor (int a = 0; a < actionSequence.length; a++) {\n\t\ttry {\n\t\t\tState state = new PuzzleState(this, actionSequence[a]);\n\t\t\tlist.add(new ActionStatePair(actionSequence[a], state));\n\t\t} catch (RuntimeException e) {\n\t\t\t; // illegal move\n\t\t}\n\t}\n\tActionStatePair[] pairs = new ActionStatePair[list.size()];\n\tIterator<ActionStatePair> iter = list.iterator();\n\tfor (int i = 0; iter.hasNext(); i++) {\n\t\tpairs[i] = iter.next();\n\t}\n\treturn pairs;\n}", "path": "src\\search\\fifteen\\PuzzleState.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Constructor\n * @param state Initial puzzle state\n */\n", "func_signal": "public H2Node(PuzzleState state)", "code": "{\n\tsuper(state);\n\tcalculateValue();\n}", "path": "src\\search\\fifteen\\H2Node.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Calculates the number of misplaced tiles in state\n */\n", "func_signal": "protected void calculateValue()", "code": "{\n\tPuzzleState state = this.getState();\n\tfor (int i = 0; i < 4; i++)\n\t\tfor (int j = 0; j < 4; j++)\n\t\t\tif (state.tiles[i][j] != i * 4 + j + 1 &&\n\t\t\t\t\t!(i == 3 && j == 3))\n\t\t\t\tvalue++;\n\t// increment path cost to value\n\t//value += this.getCost();\n\t\t\n\tif (!greedy)\n\t\tvalue += (int) this.getCost();\n}", "path": "src\\search\\fifteen\\MisplacedNode.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Expand the node into sub-nodes. It uses the successor-function of the\n * state to determine all Action/State pairs, and generates a node for each.\n * \n * @return all nodes that can be reached from this node\n */\n", "func_signal": "public Node[] expand()", "code": "{\n\tActionStatePair[] successors = getState().successor();\n\tNode[] descendants = new MiniMaxNode[successors.length];\n\tfor (int a = 0; a < successors.length; a++) {\n\t\tAction action = successors[a].getAction();\n\t\tMiniMaxState child = (MiniMaxState) successors[a].getState();\n\t\tdescendants[a] = new MiniMaxNode(child, this, action, this\n\t\t\t\t.getCost()\n\t\t\t\t+ getState().pathcost(action));\n\t}\n\treturn descendants;\n}", "path": "src\\search\\MiniMaxNode.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Constructor\n * @param parent Parent of node\n * @param action Action to move to\n * @param state Resulting state of the action\n */\n", "func_signal": "public MisplacedNode(MisplacedNode parent, Action action, State state)", "code": "{\n\tsuper(parent, action, state);\n\tcalculateValue();\n    }", "path": "src\\search\\fifteen\\MisplacedNode.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * The function which calculates the utility for this node. If the state is\n * non-terminal it uses the minimax strategy to create new nodes (with\n * expanded states). Alpha-beta pruning is used to reduce the search. See\n * Russell and Norvig, Artificial Intelligence: A modern approach, 2nd ed.,\n * pp. 162-170. Prentice-Hall, 2003.\n * \n * @param alpha\n *            the alpha param should be set to -9999999 in the first call\n * @param beta\n *            the beta param should be set to +9999999 in the first call\n */\n", "func_signal": "protected double value(double alpha, double beta)", "code": "{\n\t// extract state from this node\n\tMiniMaxState state = (MiniMaxState) getState();\n\t// test if this is a goal state for the player that acts\n\tif (state.goal()) {\n\t\t// calculates the value of the goal state (should be positive for\n\t\t// the winning player, negative otherwise)\n\t\treturn state.utility();\n\t} else if (getDepth() > MAXDEPTH) { // or if this is a state beyond\n\t\t\t\t\t\t\t\t\t\t// expansion\n\t\treturn state.utility();\n\t} else { // not a goal state\n\t\t// ensure that the derived utilities will at least be an improvement\n\t\t// from these values...\n\t\tdouble maxUtility = -9999999;\n\t\tdouble minUtility = +9999999;\n\t\t// expand the current node into descending nodes (alternating the\n\t\t// active player)\n\t\tNode[] succ = expand();\n\t\t// test if this is a terminating, non-goal state, if so return what\n\t\t// the state is \"worth\"\n\t\tif (succ.length == 0) {\n\t\t\treturn state.utility();\n\t\t}\n\t\tif (state.isMaxState()) { // MAX acts... we want to find the\n\t\t\t\t\t\t\t\t\t// highest utility\n\t\t\t// Each of the newly expanded nodes is explored\n\t\t\tfor (int i = 0; i < succ.length; i++) {\n\t\t\t\tmaxUtility = Math.max(maxUtility, ((MiniMaxNode) succ[i])\n\t\t\t\t\t\t.value(alpha, beta));\n\t\t\t\t// However, as soon as we have found a node that renders all\n\t\t\t\t// remaining nodes irrelevant\n\t\t\t\t// we can terminate further exploration\n\t\t\t\t// Note that this presents an opportunity to optimise the\n\t\t\t\t// order of expanded states so as to\n\t\t\t\t// minimise the nodes that are explored before termination.\n\t\t\t\tif (maxUtility >= beta)\n\t\t\t\t\treturn maxUtility;\n\t\t\t\talpha = Math.max(alpha, maxUtility);\n\t\t\t}\n\t\t\treturn maxUtility;\n\t\t} else { // MIN acts ... we need to face the worst case (lowest\n\t\t\t\t\t// utility)\n\t\t\tfor (int a = 0; a < succ.length; a++) {\n\t\t\t\tminUtility = Math.min(minUtility, ((MiniMaxNode) succ[a])\n\t\t\t\t\t\t.value(alpha, beta));\n\t\t\t\t// when the opponent acts the pruning works similar to the\n\t\t\t\t// above\n\t\t\t\tif (minUtility <= alpha)\n\t\t\t\t\treturn minUtility;\n\t\t\t\tbeta = Math.min(beta, minUtility);\n\t\t\t}\n\t\t\treturn minUtility;\n\t\t}\n\t}\n}", "path": "src\\search\\MiniMaxNode.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * A new state is created but the board configuration of the supplied state\n * is copied.\n * \n * @param state\n *            the 4x4 representation of state to copy\n */\n", "func_signal": "public PuzzleState(int[][] state)", "code": "{\n\tthis.tiles = new int[4][4];\n\tfor (int i = 0; i < 4; i++) {\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tthis.tiles[i][j] = state[i][j];\n\t\t}\n\t}\n}", "path": "src\\search\\fifteen\\PuzzleState.java", "repo_name": "zanglang/15puzzle", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * <code>draw</code> calls the onDraw method for each child maintained by this node.\n * \n * @see com.ardor3d.scenegraph.Spatial#draw(com.ardor3d.renderer.Renderer)\n * @param r\n *            the renderer to draw to.\n */\n", "func_signal": "@Override\npublic void draw(final Renderer r)", "code": "{\n\n    final RenderDelegate delegate = getCurrentRenderDelegate();\n    if (delegate == null) {\n        Spatial child;\n        for (int i = getNumberOfChildren() - 1; i >= 0; i--) {\n            child = _children.get(i);\n            if (child != null) {\n                child.onDraw(r);\n            }\n        }\n    } else {\n        // Queue as needed\n        if (!r.isProcessingQueue()) {\n            if (r.checkAndAdd(this)) {\n                return;\n            }\n        }\n\n        delegate.render(this, r);\n    }\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\scenegraph\\Node.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * Constructs a new <code>Node</code> with a given name.\n * \n * @param name\n *            the name of the node. This is required for identification purposes.\n * @param children\n *            the list to use for storing children. Defaults to a synchronized ArrayList, but using this\n *            constructor, you can select a different kind of list.\n */\n", "func_signal": "public Node(final String name, final List<Spatial> children)", "code": "{\n    super(name);\n    _children = children;\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\scenegraph\\Node.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * Constructs a new Spatial.\n */\n", "func_signal": "public Node()", "code": "{\n    super();\n    _children = Collections.synchronizedList(new ArrayList<Spatial>(1));\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\scenegraph\\Node.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * <code>getChild</code> returns the first child found with exactly the given name (case sensitive.) If our children\n * are Nodes, we will search their children as well.\n * \n * @param name\n *            the name of the child to retrieve. If null, we'll return null.\n * @return the child if found, or null.\n */\n", "func_signal": "public Spatial getChild(final String name)", "code": "{\n    if (name == null) {\n        return null;\n    }\n    for (int i = getNumberOfChildren() - 1; i >= 0; i--) {\n        final Spatial child = _children.get(i);\n        if (name.equals(child.getName())) {\n            return child;\n        } else if (child instanceof Node) {\n            final Spatial out = ((Node) child).getChild(name);\n            if (out != null) {\n                return out;\n            }\n        }\n    }\n    return null;\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\scenegraph\\Node.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * \n * <code>attachChild</code> attaches a child to this node. This node becomes the child's parent. The current number\n * of children maintained is returned. <br>\n * If the child already had a parent it is detached from that former parent.\n * \n * @param child\n *            the child to attach to this node.\n * @return the number of children maintained by this node.\n */\n", "func_signal": "public int attachChild(final Spatial child)", "code": "{\n    if (child != null) {\n        if (child.getParent() != this) {\n            if (child.getParent() != null) {\n                child.getParent().detachChild(child);\n            }\n            child.setParent(this);\n            _children.add(child);\n            child.markDirty(DirtyType.Attached);\n            if (logger.isLoggable(Level.FINE)) {\n                logger.fine(\"Child (\" + child.getName() + \") attached to this\" + \" node (\" + getName() + \")\");\n            }\n        }\n    }\n\n    return _children.size();\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\scenegraph\\Node.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * \n * <code>detachAllChildren</code> removes all children attached to this node.\n */\n", "func_signal": "public void detachAllChildren()", "code": "{\n    for (int i = getNumberOfChildren() - 1; i >= 0; i--) {\n        detachChildAt(i);\n    }\n    logger.fine(\"All children removed.\");\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\scenegraph\\Node.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * Set whether this wireframe should use antialiasing when drawing lines. May decrease performance. If you want to\n * enabled antialiasing, you should also use an alphastate with a source of SourceFunction.SourceAlpha and a\n * destination of DB_ONE_MINUS_SRC_ALPHA or DB_ONE.\n * \n * @param antialiased\n *            true for using smoothed antialiased lines.\n */\n", "func_signal": "public void setAntialiased(final boolean antialiased)", "code": "{\n    _antialiased = antialiased;\n    setNeedsRefresh(true);\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\renderer\\state\\WireframeState.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * Construct a new MouseButtonPressedCondition.\n * \n * @param button\n *            the button that should be pressed to trigger this condition\n * @throws NullPointerException\n *             if the button is null\n */\n", "func_signal": "public MouseButtonReleasedCondition(final MouseButton button)", "code": "{\n    if (button == null) {\n        throw new NullPointerException();\n    }\n\n    _button = button;\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\input\\logical\\MouseButtonReleasedCondition.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * Swaps two children.\n * \n * @param index1\n * @param index2\n */\n", "func_signal": "public void swapChildren(final int index1, final int index2)", "code": "{\n    final Spatial c2 = _children.get(index2);\n    final Spatial c1 = _children.remove(index1);\n    _children.add(index1, c2);\n    _children.remove(index2);\n    _children.add(index2, c1);\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\scenegraph\\Node.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * \n * <code>detachChildAt</code> removes a child at a given index. That child is returned for saving purposes.\n * \n * @param index\n *            the index of the child to be removed.\n * @return the child at the supplied index.\n */\n", "func_signal": "public Spatial detachChildAt(final int index)", "code": "{\n    final Spatial child = _children.remove(index);\n    if (child != null) {\n        child.setParent(null);\n        markDirty(child, DirtyType.Detached);\n        if (child.getListener() != null) {\n            child.setListener(null);\n        }\n        if (logger.isLoggable(Level.INFO)) {\n            logger.fine(\"Child removed.\");\n        }\n    }\n    return child;\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\scenegraph\\Node.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * <code>setLineWidth</code> sets the width of lines the wireframe is drawn in. Attempting to set a line width\n * smaller than 0.0 throws an <code>IllegalArgumentException</code>.\n * \n * @param width\n *            the line width, in pixels\n */\n", "func_signal": "public void setLineWidth(final float width)", "code": "{\n    if (width < 0.0f) {\n        throw new IllegalArgumentException(\"Line width must be positive\");\n    }\n\n    _lineWidth = width;\n    setNeedsRefresh(true);\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\renderer\\state\\WireframeState.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/** if enabled, call doUpdate to update information for this pass. */\n", "func_signal": "public final void updatePass(final double tpf)", "code": "{\n    if (!_enabled) {\n        return;\n    }\n    doUpdate(tpf);\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\renderer\\pass\\Pass.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * Constructor instantiates a new <code>PointLight</code> object. The initial position of the light is (0,0,0) and\n * it's colors are white.\n * \n */\n", "func_signal": "public PointLight()", "code": "{\n    super();\n    _location = new Vector3();\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\light\\PointLight.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * <code>detachChild</code> removes a given child from the node's list. This child will no longe be maintained.\n * \n * @param child\n *            the child to remove.\n * @return the index the child was at. -1 if the child was not in the list.\n */\n", "func_signal": "public int detachChild(final Spatial child)", "code": "{\n    if (child == null) {\n        return -1;\n    }\n    if (child.getParent() == this) {\n        final int index = _children.indexOf(child);\n        if (index != -1) {\n            detachChildAt(index);\n        }\n        return index;\n    }\n\n    return -1;\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\scenegraph\\Node.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/** if enabled, set the states for this pass and then render. */\n", "func_signal": "public final void renderPass(final Renderer r)", "code": "{\n    if (!_enabled) {\n        return;\n    }\n    _context = ContextManager.getCurrentContext();\n    _context.pushEnforcedStates();\n    _context.enforceStates(_passStates);\n    doRender(r);\n    _context.popEnforcedStates();\n    _context = null;\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\renderer\\pass\\Pass.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * \n * <code>attachChildAt</code> attaches a child to this node at an index. This node becomes the child's parent. The\n * current number of children maintained is returned. <br>\n * If the child already had a parent it is detached from that former parent.\n * \n * @param child\n *            the child to attach to this node.\n * @return the number of children maintained by this node.\n */\n", "func_signal": "public int attachChildAt(final Spatial child, final int index)", "code": "{\n    if (child != null) {\n        if (child.getParent() != this) {\n            if (child.getParent() != null) {\n                child.getParent().detachChild(child);\n            }\n            child.setParent(this);\n            _children.add(index, child);\n            child.markDirty(DirtyType.Attached);\n            if (logger.isLoggable(Level.FINE)) {\n                logger.fine(\"Child (\" + child.getName() + \") attached to this\" + \" node (\" + getName() + \")\");\n            }\n        }\n    }\n\n    return _children.size();\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\scenegraph\\Node.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * determines if the provided Spatial is contained in the children list of this node.\n * \n * @param spat\n *            the child object to look for.\n * @return true if the object is contained, false otherwise.\n */\n", "func_signal": "public boolean hasChild(final Spatial spat)", "code": "{\n    if (_children.contains(spat)) {\n        return true;\n    }\n\n    for (int i = getNumberOfChildren() - 1; i >= 0; i--) {\n        final Spatial child = _children.get(i);\n        if (child instanceof Node && ((Node) child).hasChild(spat)) {\n            return true;\n        }\n    }\n\n    return false;\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\scenegraph\\Node.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * <code>setFace</code> sets which face will recieve the wireframe.\n * \n * @param face\n *            which face will be rendered in wireframe.\n * @throws IllegalArgumentException\n *             if face is null\n */\n", "func_signal": "public void setFace(final Face face)", "code": "{\n    if (face == null) {\n        throw new IllegalArgumentException(\"face can not be null.\");\n    }\n    _face = face;\n    setNeedsRefresh(true);\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\renderer\\state\\WireframeState.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * <code>updateWorldBound</code> merges the bounds of all the children maintained by this node. This will allow for\n * faster culling operations.\n * \n * @see com.ardor3d.scenegraph.Spatial#updateWorldBound(boolean)\n */\n", "func_signal": "@Override\npublic void updateWorldBound(final boolean recurse)", "code": "{\n    BoundingVolume worldBound = null;\n    for (int i = getNumberOfChildren() - 1; i >= 0; i--) {\n        final Spatial child = _children.get(i);\n        if (child != null) {\n            if (recurse) {\n                child.updateWorldBound(true);\n            }\n            if (worldBound != null) {\n                // merge current world bound with child world bound\n                worldBound.mergeLocal(child.getWorldBound());\n\n            } else {\n                // set world bound to first non-null child world bound\n                if (child.getWorldBound() != null) {\n                    worldBound = child.getWorldBound().clone(_worldBound);\n                }\n            }\n        }\n    }\n    _worldBound = worldBound;\n    clearDirty(DirtyType.Bounding);\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\scenegraph\\Node.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * <code>detachChild</code> removes a given child from the node's list. This child will no longe be maintained. Only\n * the first child with a matching name is removed.\n * \n * @param childName\n *            the child to remove.\n * @return the index the child was at. -1 if the child was not in the list.\n */\n", "func_signal": "public int detachChildNamed(final String childName)", "code": "{\n    if (childName == null) {\n        return -1;\n    }\n    for (int i = getNumberOfChildren() - 1; i >= 0; i--) {\n        final Spatial child = _children.get(i);\n        if (childName.equals(child.getName())) {\n            detachChildAt(i);\n            return i;\n        }\n    }\n    return -1;\n}", "path": "ardor3d-core\\src\\main\\java\\com\\ardor3d\\scenegraph\\Node.java", "repo_name": "thecookie/Ardor3D", "stars": 1, "license": "other", "language": "java", "size": 21544}
{"docstring": "/**\n * Used in lists of this class (packages, nested classes, known subclasses)\n */\n", "func_signal": "public void makeShortDescrHDF(HDF data, String base)", "code": "{\n    mTypeInfo.makeHDF(data, base + \".type\");\n    data.setValue(base + \".kind\", this.kind());\n    TagInfo.makeHDF(data, base + \".shortDescr\", this.firstSentenceTags());\n    TagInfo.makeHDF(data, base + \".deprecated\", deprecatedTags());\n}", "path": "tools\\droiddoc\\src\\ClassInfo.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "/** Takes a string that ends w/ .html and changes the .html to htmlExtension */\n", "func_signal": "public static String outputFilename(String htmlFile)", "code": "{\n    if (!DroidDoc.htmlExtension.equals(\".html\") && htmlFile.endsWith(\".html\")) {\n        return htmlFile.substring(0, htmlFile.length()-5) + DroidDoc.htmlExtension;\n    } else {\n        return htmlFile;\n    }\n}", "path": "tools\\droiddoc\\src\\ClearPage.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "/** Even indirectly */\n", "func_signal": "public boolean isDerivedFrom(ClassInfo cl)", "code": "{\n    ClassInfo dad = this.superclass();\n    if (dad != null) {\n        if (dad.equals(cl)) {\n            return true;\n        } else {\n            if (dad.isDerivedFrom(cl)) {\n                return true;\n            }\n        }\n    }\n    for (ClassInfo iface: interfaces()) {\n        if (iface.equals(cl)) {\n            return true;\n        } else {\n            if (iface.isDerivedFrom(cl)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "path": "tools\\droiddoc\\src\\ClassInfo.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "/** turn this LinkReference into one with an error message */\n", "func_signal": "private void makeError()", "code": "{\n    //this.href = \"ERROR(\" + this.text.trim() + \")\";\n    this.href = null;\n    if (this.label == null) {\n        this.label = \"\";\n    }\n    this.label = \"ERROR(\" + this.label + \"/\" + text.trim() + \")\";\n}", "path": "tools\\droiddoc\\src\\LinkReference.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "/**\n * Reads the password from stdin and returns it as a string.\n *\n * @param keyFile The file containing the private key.  Used to prompt the user.\n */\n", "func_signal": "private static String readPassword(File keyFile)", "code": "{\n    // TODO: use Console.readPassword() when it's available.\n    System.out.print(\"Enter password for \" + keyFile + \" (password will not be hidden): \");\n    System.out.flush();\n    BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\n    try {\n        return stdin.readLine();\n    } catch (IOException ex) {\n        return null;\n    }\n}", "path": "tools\\signapk\\SignApk.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "/** Write a .RSA file with a digital signature. */\n", "func_signal": "private static void writeSignatureBlock(\n        Signature signature, X509Certificate publicKey, OutputStream out)\n        throws IOException, GeneralSecurityException", "code": "{\n    SignerInfo signerInfo = new SignerInfo(\n            new X500Name(publicKey.getIssuerX500Principal().getName()),\n            publicKey.getSerialNumber(),\n            AlgorithmId.get(\"SHA1\"),\n            AlgorithmId.get(\"RSA\"),\n            signature.sign());\n\n    PKCS7 pkcs7 = new PKCS7(\n            new AlgorithmId[] { AlgorithmId.get(\"SHA1\") },\n            new ContentInfo(ContentInfo.DATA_OID, null),\n            new X509Certificate[] { publicKey },\n            new SignerInfo[] { signerInfo });\n\n    pkcs7.encodeSignedData(out);\n}", "path": "tools\\signapk\\SignApk.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "// Check the declared value with a typed comparison, not a string comparison,\n// to accommodate toolchains with different fp -> string conversions.\n", "func_signal": "public boolean valueEquals(FieldInfo other)", "code": "{\n    // Type mismatch means nonequal, as does a null/non-null mismatch\n    if (!mType.equals(other.mType)\n            || ((mValue == null) != (other.mValue == null))) {\n        return false;\n    }\n\n    // Null values are considered equal\n    if (mValue == null) {\n        return true;\n    }\n\n    // Floating point gets an implementation-type comparison; all others just use the string\n    // If float/double parse fails, fall back to string comparison -- it means that it's a\n    // canonical droiddoc-generated constant expression that represents a NaN.\n    try {\n        if (mType.equals(\"float\")) {\n            float val = Float.parseFloat(mValue);\n            float otherVal = Float.parseFloat(other.mValue);\n            return (val == otherVal);\n        } else if (mType.equals(\"double\")) {\n            double val = Double.parseDouble(mValue);\n            double otherVal = Double.parseDouble(other.mValue);\n            return (val == otherVal);\n        }\n    } catch (NumberFormatException e) {\n        // fall through\n    }\n    \n    return mValue.equals(other.mValue);\n}", "path": "tools\\apicheck\\src\\com\\android\\apicheck\\FieldInfo.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "/** Read a PKCS 8 format private key. */\n", "func_signal": "private static PrivateKey readPrivateKey(File file)\n        throws IOException, GeneralSecurityException", "code": "{\n    DataInputStream input = new DataInputStream(new FileInputStream(file));\n    try {\n        byte[] bytes = new byte[(int) file.length()];\n        input.read(bytes);\n\n        KeySpec spec = decryptPrivateKey(bytes, file);\n        if (spec == null) {\n            spec = new PKCS8EncodedKeySpec(bytes);\n        }\n\n        try {\n            return KeyFactory.getInstance(\"RSA\").generatePrivate(spec);\n        } catch (InvalidKeySpecException ex) {\n            return KeyFactory.getInstance(\"DSA\").generatePrivate(spec);\n        }\n    } finally {\n        input.close();\n    }\n}", "path": "tools\\signapk\\SignApk.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "/**\n * Decrypt an encrypted PKCS 8 format private key.\n *\n * Based on ghstark's post on Aug 6, 2006 at\n * http://forums.sun.com/thread.jspa?threadID=758133&messageID=4330949\n *\n * @param encryptedPrivateKey The raw data of the private key\n * @param keyFile The file containing the private key\n */\n", "func_signal": "private static KeySpec decryptPrivateKey(byte[] encryptedPrivateKey, File keyFile)\n        throws GeneralSecurityException", "code": "{\n    EncryptedPrivateKeyInfo epkInfo;\n    try {\n        epkInfo = new EncryptedPrivateKeyInfo(encryptedPrivateKey);\n    } catch (IOException ex) {\n        // Probably not an encrypted key.\n        return null;\n    }\n\n    char[] password = readPassword(keyFile).toCharArray();\n\n    SecretKeyFactory skFactory = SecretKeyFactory.getInstance(epkInfo.getAlgName());\n    Key key = skFactory.generateSecret(new PBEKeySpec(password));\n\n    Cipher cipher = Cipher.getInstance(epkInfo.getAlgName());\n    cipher.init(Cipher.DECRYPT_MODE, key, epkInfo.getAlgParameters());\n\n    try {\n        return epkInfo.getKeySpec(cipher);\n    } catch (InvalidKeySpecException ex) {\n        System.err.println(\"signapk: Password for \" + keyFile + \" may be bad.\");\n        throw ex;\n    }\n}", "path": "tools\\signapk\\SignApk.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "/**\n * Given this position and str which occurs at that position, as well as str an index into str,\n * find the SourcePositionInfo.\n *\n * @throw StringIndexOutOfBoundsException if index &gt; str.length()\n */\n", "func_signal": "public static SourcePositionInfo add(SourcePositionInfo that, String str, int index)", "code": "{\n    if (that == null) {\n        return null;\n    }\n    int line = that.line;\n    char prev = 0;\n    for (int i=0; i<index; i++) {\n        char c = str.charAt(i);\n        if (c == '\\r' || (c == '\\n' && prev != '\\r')) {\n            line++;\n        }\n        prev = c;\n    }\n    return new SourcePositionInfo(that.file, line, 0);\n}", "path": "tools\\droiddoc\\src\\SourcePositionInfo.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "/** Add the SHA1 of every file to the manifest, creating it if necessary. */\n", "func_signal": "private static Manifest addDigestsToManifest(JarFile jar)\n        throws IOException, GeneralSecurityException", "code": "{\n    Manifest input = jar.getManifest();\n    Manifest output = new Manifest();\n    Attributes main = output.getMainAttributes();\n    if (input != null) {\n        main.putAll(input.getMainAttributes());\n    } else {\n        main.putValue(\"Manifest-Version\", \"1.0\");\n        main.putValue(\"Created-By\", \"1.0 (Android SignApk)\");\n    }\n\n    BASE64Encoder base64 = new BASE64Encoder();\n    MessageDigest md = MessageDigest.getInstance(\"SHA1\");\n    byte[] buffer = new byte[4096];\n    int num;\n\n    // We sort the input entries by name, and add them to the\n    // output manifest in sorted order.  We expect that the output\n    // map will be deterministic.\n\n    TreeMap<String, JarEntry> byName = new TreeMap<String, JarEntry>();\n\n    for (Enumeration<JarEntry> e = jar.entries(); e.hasMoreElements(); ) {\n        JarEntry entry = e.nextElement();\n        byName.put(entry.getName(), entry);\n    }\n\n    for (JarEntry entry: byName.values()) {\n        String name = entry.getName();\n        if (!entry.isDirectory() && !name.equals(JarFile.MANIFEST_NAME) &&\n            !name.equals(CERT_SF_NAME) && !name.equals(CERT_RSA_NAME)) {\n            InputStream data = jar.getInputStream(entry);\n            while ((num = data.read(buffer)) > 0) {\n                md.update(buffer, 0, num);\n            }\n\n            Attributes attr = null;\n            if (input != null) attr = input.getAttributes(name);\n            attr = attr != null ? new Attributes(attr) : new Attributes();\n            attr.putValue(\"SHA1-Digest\", base64.encode(md.digest()));\n            output.getEntries().put(name, attr);\n        }\n    }\n\n    return output;\n}", "path": "tools\\signapk\\SignApk.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "/** Copy all the files in a manifest from input to output. */\n", "func_signal": "private static void copyFiles(Manifest manifest,\n        JarFile in, JarOutputStream out) throws IOException", "code": "{\n    byte[] buffer = new byte[4096];\n    int num;\n\n    Map<String, Attributes> entries = manifest.getEntries();\n    List<String> names = new ArrayList(entries.keySet());\n    Collections.sort(names);\n    for (String name : names) {\n        JarEntry inEntry = in.getJarEntry(name);\n        if (inEntry.getMethod() == JarEntry.STORED) {\n            // Preserve the STORED method of the input entry.\n            out.putNextEntry(new JarEntry(inEntry));\n        } else {\n            // Create a new entry so that the compressed len is recomputed.\n            JarEntry je = new JarEntry(name);\n            je.setTime(inEntry.getTime());\n            out.putNextEntry(je);\n        }\n\n        InputStream data = in.getInputStream(inEntry);\n        while ((num = data.read(buffer)) > 0) {\n            out.write(buffer, 0, num);\n        }\n        out.flush();\n    }\n}", "path": "tools\\signapk\\SignApk.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "/**\n * Build a SourcePositionInfo from the XML source= notation\n */\n", "func_signal": "public static SourcePositionInfo fromXml(String source)", "code": "{\n    if (source != null) {\n        for (int i = 0; i < source.length(); i++) {\n            if (source.charAt(i) == ':') {\n                return new SourcePositionInfo(source.substring(0, i),\n                        Integer.parseInt(source.substring(i+1)), 0);\n            }\n        }\n    }\n\n    return new SourcePositionInfo(\"(unknown)\", 0, 0);\n}", "path": "tools\\apicheck\\src\\com\\android\\apicheck\\SourcePositionInfo.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "/** @hide */\n", "func_signal": "public Types()", "code": "{\n    public_final_boolean = false;\n    public_final_char = 0;\n    public_final_short = 0;\n    public_final_int = 0;\n    public_final_long = 0;\n    public_final_float = 0;\n    public_final_double = 0;\n    public_final_Object = null;\n}", "path": "tools\\droiddoc\\test\\stubs\\src\\com\\android\\stubs\\Types.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "/**\n * Parse and resolve a link string.\n *\n * @param text the original text\n * @param base the class or whatever that this link is on\n * @param pos the original position in the source document\n * @return a new link reference.  It always returns something.  If there was an\n *         error, it logs it and fills in href and label with error text.\n */\n", "func_signal": "public static LinkReference parse(String text, ContainerInfo base, SourcePositionInfo pos,\n                                    boolean printOnErrors)", "code": "{\n    LinkReference result = new LinkReference();\n    result.text = text;\n\n    int index;\n    int len = text.length();\n    int pairs = 0;\n    int pound = -1;\n    // split the string\n    done: {\n        for (index=0; index<len; index++) {\n            char c = text.charAt(index);\n            switch (c)\n            {\n                case '(':\n                    pairs++;\n                    break;\n                case '[':\n                    pairs++;\n                    break;\n                case ')':\n                    pairs--;\n                    break;\n                case ']':\n                    pairs--;\n                    break;\n                case ' ':\n                case '\\t':\n                case '\\r':\n                case '\\n':\n                    if (pairs == 0) {\n                        break done;\n                    }\n                    break;\n                case '#':\n                    if (pound < 0) {\n                        pound = index;\n                    }\n                    break;\n            }\n        }\n    }\n    if (index == len && pairs != 0) {\n        Errors.error(Errors.UNRESOLVED_LINK, pos,\n                    \"unable to parse link/see tag: \" + text.trim());\n        return result;\n    }\n\n    int linkend = index;\n\n    for (; index<len; index++) {\n        char c = text.charAt(index);\n        if (!(c == ' ' || c == '\\t' || c == '\\r' || c == '\\n')) {\n            break;\n        }\n    }\n\n    result.label = text.substring(index);\n\n    String ref;\n    String mem;\n    if (pound == 0) {\n        ref = null;\n        mem = text.substring(1, linkend);\n    }\n    else if (pound > 0) {\n        ref = text.substring(0, pound);\n        mem = text.substring(pound+1, linkend);\n    }\n    else {\n        ref = text.substring(0, linkend);\n        mem = null;\n    }\n\n    // parse parameters, if any\n    String[] params = null;\n    String[] paramDimensions = null;\n    if (mem != null) {\n        index = mem.indexOf('(');\n        if (index > 0) {\n            ArrayList<String> paramList = new ArrayList<String>();\n            ArrayList<String> paramDimensionList = new ArrayList<String>();\n            len = mem.length();\n            int start = index+1;\n            final int START = 0;\n            final int TYPE = 1;\n            final int NAME = 2;\n            int dimension = 0;\n            int arraypair = 0;\n            int state = START;\n            int typestart = 0;\n            int typeend = -1;\n            for (int i=start; i<len; i++) {\n                char c = mem.charAt(i);\n                switch (state)\n                {\n                    case START:\n                        if (c!=' ' && c!='\\t' && c!='\\r' && c!='\\n') {\n                            state = TYPE;\n                            typestart = i;\n                        }\n                        break;\n                    case TYPE:\n                        if (c == '[') {\n                            if (typeend < 0) {\n                                typeend = i;\n                            }\n                            dimension++;\n                            arraypair++;\n                        }\n                        else if (c == ']') {\n                            arraypair--;\n                        }\n                        else if (c==' ' || c=='\\t' || c=='\\r' || c=='\\n') {\n                            if (typeend < 0) {\n                                typeend = i;\n                            }\n                        }\n                        else {\n                            if (typeend >= 0 || c == ')' || c == ',') {\n                                if (typeend < 0) {\n                                    typeend = i;\n                                }\n                                String s = mem.substring(typestart, typeend);\n                                paramList.add(s);\n                                s = \"\";\n                                for (int j=0; j<dimension; j++) {\n                                    s += \"[]\";\n                                }\n                                paramDimensionList.add(s);\n                                state = START;\n                                typeend = -1;\n                                dimension = 0;\n                                if (c == ',' || c == ')') {\n                                    state = START;\n                                } else {\n                                    state = NAME;\n                                }\n                            }\n                        }\n                        break;\n                    case NAME:\n                        if (c == ',' || c == ')') {\n                            state = START;\n                        }\n                        break;\n                }\n\n            }\n            params = paramList.toArray(new String[paramList.size()]);\n            paramDimensions = paramDimensionList.toArray(new String[paramList.size()]);\n            mem = mem.substring(0, index);\n        }\n    }\n\n    ClassInfo cl = null;\n    if (base instanceof ClassInfo) {\n        cl = (ClassInfo)base;\n    }\n\n    if (ref == null) {\n        // no class or package was provided, assume it's this class\n        if (cl != null) {\n            result.classInfo = cl;\n        }\n    } else {\n        // they provided something, maybe it's a class or a package\n        if (cl != null) {\n            result.classInfo = cl.extendedFindClass(ref);\n            if (result.classInfo == null) {\n                result.classInfo = cl.findClass(ref);\n            }\n            if (result.classInfo == null) {\n                result.classInfo = cl.findInnerClass(ref);\n            }\n        }\n        if (result.classInfo == null) {\n            result.classInfo = Converter.obtainClass(ref);\n        }\n        if (result.classInfo == null) {\n            result.packageInfo = Converter.obtainPackage(ref);\n        }\n    }\n\n    if (result.classInfo != null && mem != null) {\n        // it's either a field or a method, prefer a field\n        if (params == null) {\n            FieldInfo field = result.classInfo.findField(mem);\n            // findField looks in containing classes, so it might actually\n            // be somewhere else; link to where it really is, not what they\n            // typed.\n            if (field != null) {\n                result.classInfo = field.containingClass();\n                result.memberInfo = field;\n            }\n        }\n        if (result.memberInfo == null) {\n            MethodInfo method = result.classInfo.findMethod(mem, params, paramDimensions);\n            if (method != null) {\n                result.classInfo = method.containingClass();\n                result.memberInfo = method;\n            }\n        }\n    }\n\n    result.referencedMemberName = mem;\n    if (params != null) {\n        result.referencedMemberName = result.referencedMemberName + '(';\n        len = params.length;\n        if (len > 0) {\n            len--;\n            for (int i=0; i<len; i++) {\n                result.referencedMemberName = result.referencedMemberName + params[i]\n                        + paramDimensions[i] + \", \";\n            }\n            result.referencedMemberName = result.referencedMemberName + params[len]\n                    + paramDimensions[len];\n        }\n        result.referencedMemberName = result.referencedMemberName + \")\";\n    }\n\n    // debugging spew\n    if (false) {\n        result.label = result.label + \"/\" + ref + \"/\" + mem + '/';\n        if (params != null) {\n            for (int i=0; i<params.length; i++) {\n                result.label += params[i] + \"|\";\n            }\n        }\n\n        FieldInfo f = (result.memberInfo instanceof FieldInfo)\n                    ? (FieldInfo)result.memberInfo\n                    : null;\n        MethodInfo m = (result.memberInfo instanceof MethodInfo)\n                    ? (MethodInfo)result.memberInfo\n                    : null;\n        result.label = result.label\n                    + \"/package=\" + (result.packageInfo!=null?result.packageInfo.name():\"\")\n                    + \"/class=\" + (result.classInfo!=null?result.classInfo.qualifiedName():\"\")\n                    + \"/field=\" + (f!=null?f.name():\"\")\n                    + \"/method=\" + (m!=null?m.name():\"\");\n        \n    }\n\n    MethodInfo method = null;\n    boolean skipHref = false;\n\n    if (result.memberInfo != null && result.memberInfo.isExecutable()) {\n       method = (MethodInfo)result.memberInfo;\n    }\n\n    if (text.startsWith(\"\\\"\")) {\n        // literal quoted reference (e.g., a book title)\n        result.label = text.substring(1);\n        skipHref = true;\n        if (!result.label.endsWith(\"\\\"\")) {\n            Errors.error(Errors.UNRESOLVED_LINK, pos,\n                    \"unbalanced quoted link/see tag: \" + text.trim());\n            result.makeError();\n            return result;\n        }\n        result.label = result.label.substring(0, result.label.length() - 1);\n        result.kind = \"@seeJustLabel\";\n    }\n    else if (text.startsWith(\"<\")) {\n        // explicit \"<a href\" form\n        Matcher matcher = HREF_PATTERN.matcher(text);\n        if (! matcher.matches()) {\n            Errors.error(Errors.UNRESOLVED_LINK, pos,\n                    \"invalid <a> link/see tag: \" + text.trim());\n            result.makeError();\n            return result;\n        }\n        result.href = matcher.group(1);\n        result.label = matcher.group(2);\n        result.kind = \"@seeHref\";\n    }\n    else if (result.packageInfo != null) {\n        result.href = result.packageInfo.htmlPage();\n        if (result.label.length() == 0) {\n            result.href = result.packageInfo.htmlPage();\n            result.label = result.packageInfo.name();\n        }\n    }\n    else if (result.classInfo != null && result.referencedMemberName == null) {\n        // class reference\n        if (result.label.length() == 0) {\n            result.label = result.classInfo.name();\n        }\n        result.href = result.classInfo.htmlPage();\n    }\n    else if (result.memberInfo != null) {\n        // member reference\n        ClassInfo containing = result.memberInfo.containingClass();\n        if (result.memberInfo.isExecutable()) {\n            if (result.referencedMemberName.indexOf('(') < 0) {\n                result.referencedMemberName += method.flatSignature();\n            }\n        } \n        if (result.label.length() == 0) {\n            result.label = result.referencedMemberName;\n        }\n        result.href = containing.htmlPage() + '#' + result.memberInfo.anchor();\n    }\n\n    if (result.href == null && !skipHref) {\n        if (printOnErrors && (base == null || base.checkLevel())) {\n            Errors.error(Errors.UNRESOLVED_LINK, pos,\n                    \"Unresolved link/see tag \\\"\" + text.trim()\n                    + \"\\\" in \" + ((base != null) ? base.qualifiedName() : \"[null]\"));\n        }\n        result.makeError();\n    }\n    else if (result.memberInfo != null && !result.memberInfo.checkLevel()) {\n        if (printOnErrors && (base == null || base.checkLevel())) {\n            Errors.error(Errors.HIDDEN_LINK, pos,\n                    \"Link to hidden member: \" + text.trim());\n            result.href = null;\n        }\n        result.kind = \"@seeJustLabel\";\n    }\n    else if (result.classInfo != null && !result.classInfo.checkLevel()) {\n        if (printOnErrors && (base == null || base.checkLevel())) {\n            Errors.error(Errors.HIDDEN_LINK, pos,\n                    \"Link to hidden class: \" + text.trim() + \" label=\" + result.label);\n            result.href = null;\n        }\n        result.kind = \"@seeJustLabel\";\n    }\n    else if (result.packageInfo != null && !result.packageInfo.checkLevel()) {\n        if (printOnErrors && (base == null || base.checkLevel())) {\n            Errors.error(Errors.HIDDEN_LINK, pos,\n                    \"Link to hidden package: \" + text.trim());\n            result.href = null;\n        }\n        result.kind = \"@seeJustLabel\";\n    }\n\n    result.good = true;\n\n    return result;\n}", "path": "tools\\droiddoc\\src\\LinkReference.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "// recursively create the directories to the output\n", "func_signal": "public static void ensureDirectory(File f)", "code": "{\n    File parent = f.getParentFile();\n    if (parent != null) {\n        parent.mkdirs();\n    }\n}", "path": "tools\\droiddoc\\src\\ClearPage.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "/**\n * Given this position and str which occurs at that position, as well as str an index into str,\n * find the SourcePositionInfo.\n *\n * @throw StringIndexOutOfBoundsException if index &gt; str.length()\n */\n", "func_signal": "public static SourcePositionInfo add(SourcePositionInfo that, String str, int index)", "code": "{\n    if (that == null) {\n        return null;\n    }\n    int line = that.line;\n    char prev = 0;\n    for (int i=0; i<index; i++) {\n        char c = str.charAt(i);\n        if (c == '\\r' || (c == '\\n' && prev != '\\r')) {\n            line++;\n        }\n        prev = c;\n    }\n    return new SourcePositionInfo(that.file, line, 0);\n}", "path": "tools\\apicheck\\src\\com\\android\\apicheck\\SourcePositionInfo.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "/**\n * Turns into the main class page\n */\n", "func_signal": "public void makeHDF(HDF data)", "code": "{\n    int i, j, n;\n    String name = name();\n    String qualified = qualifiedName();\n    AttributeInfo[] selfAttributes = selfAttributes();\n    MethodInfo[] methods = selfMethods();\n    FieldInfo[] fields = selfFields();\n    FieldInfo[] enumConstants = enumConstants();\n    MethodInfo[] ctors = constructors();\n    ClassInfo[] inners = innerClasses();\n\n    // class name\n    mTypeInfo.makeHDF(data, \"class.type\");\n    mTypeInfo.makeQualifiedHDF(data, \"class.qualifiedType\");\n    data.setValue(\"class.name\", name);\n    data.setValue(\"class.qualified\", qualified);\n    String scope = \"\";\n    if (isProtected()) {\n        data.setValue(\"class.scope\", \"protected\");\n    }\n    else if (isPublic()) {\n        data.setValue(\"class.scope\", \"public\");\n    }\n    if (isStatic()) {\n        data.setValue(\"class.static\", \"static\");\n    }\n    if (isFinal()) {\n        data.setValue(\"class.final\", \"final\");\n    }\n    if (isAbstract() && !isInterface()) {\n        data.setValue(\"class.abstract\", \"abstract\");\n    }\n\n    // class info\n    String kind = kind();\n    if (kind != null) {\n        data.setValue(\"class.kind\", kind);\n    }\n\n    // the containing package -- note that this can be passed to type_link,\n    // but it also contains the list of all of the packages\n    containingPackage().makeClassLinkListHDF(data, \"class.package\");\n\n    // inheritance hierarchy\n    Vector<ClassInfo> superClasses = new Vector<ClassInfo>();\n    superClasses.add(this);\n    ClassInfo supr = superclass();\n    while (supr != null) {\n        superClasses.add(supr);\n        supr = supr.superclass();\n    }\n    n = superClasses.size();\n    for (i=0; i<n; i++) {\n        supr = superClasses.elementAt(n-i-1);\n\n        supr.asTypeInfo().makeQualifiedHDF(data, \"class.inheritance.\" + i + \".class\");\n        supr.asTypeInfo().makeHDF(data, \"class.inheritance.\" + i + \".short_class\");\n        j = 0;\n        for (TypeInfo t: supr.interfaceTypes()) {\n            t.makeHDF(data, \"class.inheritance.\" + i + \".interfaces.\" + j);\n            j++;\n        }\n    }\n\n    // class description\n    TagInfo.makeHDF(data, \"class.descr\", inlineTags());\n    TagInfo.makeHDF(data, \"class.seeAlso\", comment().seeTags());\n    TagInfo.makeHDF(data, \"class.deprecated\", deprecatedTags());\n\n    // known subclasses\n    TreeMap<String, ClassInfo> direct = new TreeMap<String, ClassInfo>();\n    TreeMap<String, ClassInfo> indirect = new TreeMap<String, ClassInfo>();\n    ClassInfo[] all = Converter.rootClasses();\n    for (ClassInfo cl: all) {\n        if (cl.superclass() != null && cl.superclass().equals(this)) {\n            direct.put(cl.name(), cl);\n        }\n        else if (cl.isDerivedFrom(this)) {\n            indirect.put(cl.name(), cl);\n        }\n    }\n    // direct\n    i = 0;\n    for (ClassInfo cl: direct.values()) {\n        if (cl.checkLevel()) {\n            cl.makeShortDescrHDF(data, \"class.subclasses.direct.\" + i);\n        }\n        i++;\n    }\n    // indirect\n    i = 0;\n    for (ClassInfo cl: indirect.values()) {\n        if (cl.checkLevel()) {\n            cl.makeShortDescrHDF(data, \"class.subclasses.indirect.\" + i);\n        }\n        i++;\n    }\n\n    // nested classes\n    i=0;\n    for (ClassInfo inner: inners) {\n        if (inner.checkLevel()) {\n            inner.makeShortDescrHDF(data, \"class.inners.\" + i);\n        }\n        i++;\n    }\n\n    // enum constants\n    i=0;\n    for (FieldInfo field: enumConstants) {\n        if (field.isConstant()) {\n            field.makeHDF(data, \"class.enumConstants.\" + i);\n            i++;\n        }\n    }\n\n    // constants\n    i=0;\n    for (FieldInfo field: fields) {\n        if (field.isConstant()) {\n            field.makeHDF(data, \"class.constants.\" + i);\n            i++;\n        }\n    }\n\n    // fields\n    i=0;\n    for (FieldInfo field: fields) {\n        if (!field.isConstant()) {\n            field.makeHDF(data, \"class.fields.\" + i);\n            i++;\n        }\n    }\n\n    // public constructors\n    i=0;\n    for (MethodInfo ctor: ctors) {\n        if (ctor.isPublic()) {\n            ctor.makeHDF(data, \"class.ctors.public.\" + i);\n            i++;\n        }\n    }\n\n    // protected constructors\n    if (DroidDoc.checkLevel(DroidDoc.SHOW_PROTECTED)) {\n        i=0;\n        for (MethodInfo ctor: ctors) {\n            if (ctor.isProtected()) {\n                ctor.makeHDF(data, \"class.ctors.protected.\" + i);\n                i++;\n            }\n        }\n    }\n\n    // package private constructors\n    if (DroidDoc.checkLevel(DroidDoc.SHOW_PACKAGE)) {\n        i=0;\n        for (MethodInfo ctor: ctors) {\n            if (ctor.isPackagePrivate()) {\n                ctor.makeHDF(data, \"class.ctors.package.\" + i);\n                i++;\n            }\n        }\n    }\n\n    // private constructors\n    if (DroidDoc.checkLevel(DroidDoc.SHOW_PRIVATE)) {\n        i=0;\n        for (MethodInfo ctor: ctors) {\n            if (ctor.isPrivate()) {\n                ctor.makeHDF(data, \"class.ctors.private.\" + i);\n                i++;\n            }\n        }\n    }\n\n    // public methods\n    i=0;\n    for (MethodInfo method: methods) {\n        if (method.isPublic()) {\n            method.makeHDF(data, \"class.methods.public.\" + i);\n            i++;\n        }\n    }\n\n    // protected methods\n    if (DroidDoc.checkLevel(DroidDoc.SHOW_PROTECTED)) {\n        i=0;\n        for (MethodInfo method: methods) {\n            if (method.isProtected()) {\n                method.makeHDF(data, \"class.methods.protected.\" + i);\n                i++;\n            }\n        }\n    }\n\n    // package private methods\n    if (DroidDoc.checkLevel(DroidDoc.SHOW_PACKAGE)) {\n        i=0;\n        for (MethodInfo method: methods) {\n            if (method.isPackagePrivate()) {\n                method.makeHDF(data, \"class.methods.package.\" + i);\n                i++;\n            }\n        }\n    }\n\n    // private methods\n    if (DroidDoc.checkLevel(DroidDoc.SHOW_PRIVATE)) {\n        i=0;\n        for (MethodInfo method: methods) {\n            if (method.isPrivate()) {\n                method.makeHDF(data, \"class.methods.private.\" + i);\n                i++;\n            }\n        }\n    }\n\n    // xml attributes\n    i=0;\n    for (AttributeInfo attr: selfAttributes) {\n        if (attr.checkLevel()) {\n            attr.makeHDF(data, \"class.attrs.\" + i);\n            i++;\n        }\n    }\n\n    // inherited methods\n    Set<ClassInfo> interfaces = new TreeSet<ClassInfo>();\n    addInterfaces(interfaces(), interfaces);\n    ClassInfo cl = superclass();\n    i=0;\n    while (cl != null) {\n        addInterfaces(cl.interfaces(), interfaces);\n        makeInheritedHDF(data, i, cl);\n        cl = cl.superclass();\n        i++;\n    }\n    for (ClassInfo iface: interfaces) {\n        makeInheritedHDF(data, i, iface);\n        i++;\n    }\n}", "path": "tools\\droiddoc\\src\\ClassInfo.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "// parse out and consume the -whatever command line flags\n", "func_signal": "private static ArrayList<String[]> parseFlags(ArrayList<String> allArgs)", "code": "{\n    ArrayList<String[]> ret = new ArrayList<String[]>();\n\n    int i;\n    for (i = 0; i < allArgs.size(); i++) {\n        // flags with one value attached\n        String flag = allArgs.get(i);\n        if (flag.equals(\"-error\")\n                || flag.equals(\"-warning\")\n                || flag.equals(\"-hide\")) {\n            String[] arg = new String[2];\n            arg[0] = flag;\n            arg[1] = allArgs.get(++i);\n            ret.add(arg);\n        } else {\n            // we've consumed all of the -whatever args, so we're done\n            break;\n        }\n    }\n\n    // i now points to the first non-flag arg; strip what came before\n    for (; i > 0; i--) {\n        allArgs.remove(0);\n    }\n    return ret;\n}", "path": "tools\\apicheck\\src\\com\\android\\apicheck\\ApiCheck.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "// Find a superclass implementation of the given method.  Looking at our superclass\n// instead of at 'this' is unusual, but it fits the point-of-call demands well.\n", "func_signal": "public MethodInfo overriddenMethod(MethodInfo candidate)", "code": "{\n    if (mSuperClass == null) {\n        return null;\n    }\n    \n    // does our immediate superclass have it?\n    ClassInfo sup = mSuperClass;\n    for (MethodInfo mi : sup.mMethods.values()) {\n        if (mi.matches(candidate)) {\n            // found it\n            return mi;\n        }\n    }\n\n    // no, so recurse\n    if (sup.mSuperClass != null) {\n        return mSuperClass.overriddenMethod(candidate);\n    }\n    \n    // no parent, so we just don't have it\n    return null;\n}", "path": "tools\\apicheck\\src\\com\\android\\apicheck\\ClassInfo.java", "repo_name": "srwalter/build-vogue", "stars": 1, "license": "None", "language": "java", "size": 2992}
{"docstring": "/**\n * Encodes file with the given file name\n * @param filename file to encode\n */\n", "func_signal": "public void encodeFile(String filename)", "code": "{\n\tbyte[] out =readBytes(filename);\n\ttry{\n\t\tFileOutputStream wr = new FileOutputStream(filename);\n\t\twr.write(encodeByte(out));\n\t\twr.close();\n\t}catch(FileNotFoundException e){\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\t\n\t\n}", "path": "Sokobano\\src\\gdi1sokoban\\logic\\Security.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * Draws the given text to the OpenGL-viewport\n * \n * @param text the text to be drawn\n */\n", "func_signal": "public void render(String text)", "code": "{\n\t// Enable alpha blending for transparent backgrounds:\n\t//GL11.glEnable(GL11.GL_BLEND);\n\t//GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);\n\t\n\t// Bind the grid texture:\n\t//GL11.glEnable(GL11.GL_TEXTURE_2D);\n\t_fontGrid.getInstance().bind();\n\t\n\t// Prepare to render in 2D:\n\t//GL11.glLoadIdentity();\t\n\t//GL11.glMatrixMode(GL11.GL_PROJECTION);\n\t//GL11.glLoadIdentity();\n\t//GL11.glOrtho(0.0f, Display.getDisplayMode().getWidth(),Display.getDisplayMode().getHeight(), 0.0f, -1.0f, 1.0f);\n\t//GL11.glTranslatef(x, y, 0);\n\t\n\t// Render the text:\n\tfor(int i=0; i < text.length(); i++) {\n\t\tint index = text.charAt(i) - 32;\n\t\tif (index >= 0 && index < 100)\n\t\t\tGL11.glCallList(_displaylistBase + index);\n\t\t}\n}", "path": "Sokobano\\src\\gdi1sokoban\\graphic\\base\\Font.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * 'Fills' the src tiles from the given position with dst.\n * \n * @param pos starting position\n * @return true whether there is a wall surrounding the floor\n */\n", "func_signal": "public boolean fillType(Position pos, int src, int dst)", "code": "{\n\tif (!inBounds(pos)) return false;\n\n\tif (isType(pos, src)) {\n\n\t\taddType(pos, dst);\n\t\tremoveType(pos, src);\n\n\t\t// Fill neighbors:\n\t\treturn fillType(pos.top(), src, dst) && fillType(pos.bottom(), src, dst) && \n\t\t\t   fillType(pos.left(), src, dst) && fillType(pos.right(), src, dst);\n\t}\n\treturn true;\n}", "path": "Sokobano\\src\\gdi1sokoban\\logic\\Board.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * Calculates the width of the given text as he appears on the OpenGL\n * viewport in pixel.\n * \n * @param text the text whose width is calculated\n * @return the width in pixels\n */\n", "func_signal": "public float calcTextPixelWidth(String text)", "code": "{\n\tfloat result = 0.0f;\n\tfor(int i=0; i < text.length(); i++) {\n\t\tint index = text.charAt(i) - 32;\n\t\tif ((index >= 0) && (index < 100))\n\t\t\tresult += (float)_charWidths[index];\n\t\t}\n\treturn result;\n}", "path": "Sokobano\\src\\gdi1sokoban\\graphic\\base\\Font.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * Applies a 16-bit flag to the tile at the given position.\n * \n * @param pos position\n * @param value byte\n */\n", "func_signal": "public void addFlag(Position pos, int flag)", "code": "{\n\tassert(inBounds(pos));\n\t_tiles[pos.getY()][pos.getX()] += (flag << 8);\n}", "path": "Sokobano\\src\\gdi1sokoban\\logic\\Board.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "// DEACTIVATET!\n// THIS CLASS CAUSES ERRORS ON CERTAIN SYSTEMS\n/*public static Security getInstance(){\n\tif(_instance == null)\n\t\t_instance = new Security();\n\treturn _instance;\n}*/\n", "func_signal": "@Deprecated\npublic byte[] encodeStringtoByte(String raw)", "code": "{\n\tbyte[] enc = null;\n\ttry{\n\t\tCipher chr = Cipher.getInstance(\"DES\");\n\t\tSecretKey sKey = SecretKeyFactory.getInstance(\"DES\").generateSecret(new DESKeySpec(key));\n\t\tchr.init(Cipher.ENCRYPT_MODE, sKey);\n\t\tbyte[] utf8 = raw.getBytes(\"UTF8\");\n\t\tenc = chr.doFinal(utf8);\n\t\t//out =new sun.misc.BASE64Encoder().encode(enc);\n\t}catch(NoSuchAlgorithmException e){\n\t\te.printStackTrace();\n\t}catch(NoSuchPaddingException e){\n\t\te.printStackTrace();\n\t}catch(InvalidKeyException e){\n\t\te.printStackTrace();\n\t}catch(InvalidKeySpecException e){\n\t\te.printStackTrace();\n\t}catch(UnsupportedEncodingException e){\n\t\te.printStackTrace();\n\t}catch(BadPaddingException e){\n\t\te.printStackTrace();\n\t}catch(IllegalBlockSizeException e){\n\t\te.printStackTrace();\n\t}\n\treturn enc;\n\t\n}", "path": "Sokobano\\src\\gdi1sokoban\\logic\\Security.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * Creates new level set identifier by the given parameters\n * @param name\n * @param id\n * @param uri\n */\n", "func_signal": "public LevelSetIdentifier(String name, int id, String uri)", "code": "{\n\tsuper(name, id);\n\t//TODO: Texture?\n\tthis._uri =uri;\n}", "path": "Sokobano\\src\\gdi1sokoban\\logic\\LevelSetIdentifier.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * Initializes the TextRenderer.\n * \n * @param font the font defines appearance and size of the characters\n * @param fgColorArray foreground color\n * @param bgColorArray background color\n * @throws Exception \n */\n", "func_signal": "public Font(java.awt.Font font, float[] fgColorArray, float[] bgColorArray) throws Exception", "code": "{\n\n\t// 1. Create a texture containing a 10x10 grid of printable characters:\n\t\n\t// Calculate the size necessary for a texture image holding the character grid:\n\tLineMetrics lineMetrics = font.getLineMetrics(\"W\", new FontRenderContext(null, RenderingHints.VALUE_TEXT_ANTIALIAS_ON, RenderingHints.VALUE_FRACTIONALMETRICS_ON));\n\t_fontSize = (int) Math.ceil(lineMetrics.getHeight());\n\t\n\tint fontImageSize = (int)(_fontSize * 10);\n\t\n\t// Create a buffered image for the character grid:\n\tBufferedImage image = new BufferedImage(fontImageSize, fontImageSize, BufferedImage.TYPE_INT_ARGB);\n\tGraphics2D graphics2D = image.createGraphics(); \n\t\n\t// Clear image with background color (make transparent if color has alpha value):\n\tColor bgColor = new Color(bgColorArray[0], bgColorArray[1], bgColorArray[2], bgColorArray[3]);\n\t\n\tif (bgColor.getAlpha() < 255)\n\t\tgraphics2D.setComposite(AlphaComposite.getInstance(AlphaComposite.CLEAR, (float)bgColor.getAlpha() / 255.0f));\n\t\n\tgraphics2D.setColor(bgColor);\n\tgraphics2D.fillRect(0, 0, fontImageSize, fontImageSize);\n\t\n\t// Prepare to draw characters in foreground color:\n\tColor fgColor = new Color(fgColorArray[0], fgColorArray[1], fgColorArray[2], fgColorArray[3]);\n\t\n\tgraphics2D.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f));\n\tgraphics2D.setColor(fgColor);\n\tgraphics2D.setFont(font);\n\t\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\n\tgraphics2D.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n\t\n\t// Calculate maximum height (descent + height + ascent = total height):\n\tFontMetrics fontMetrics = graphics2D.getFontMetrics();\n\tint vBorder = fontMetrics.getMaxAscent();\n\tint advance = fontMetrics.charWidth('W');\n\tint hBorder = (int) ((float)(_fontSize - advance) / 2f);\n\t\n\t// Draw the grid of 100 characters:\n\tfor (int x = 0; x < 10; x++)\n\t\tfor (int y = 0; y < 10; y++) {\n\t\t\tchar character = (char) (32 + ((y * 10) + x));\n\t\t\tgraphics2D.drawString(String.valueOf(character), x * _fontSize + hBorder, y * _fontSize + vBorder);\n\t\t\t_charWidths[(y * 10) + x] = fontMetrics.charWidth(character);\n\t\t}\n\n\tgraphics2D.dispose();\n\t\t\n\t// Create a texture holding the grid image:\n\t_fontGrid = TextureManager.getInstance().getInstance(new TextureDescriptor(buildId(font, fgColorArray, bgColorArray), image, GL11.GL_LINEAR, GL11.GL_LINEAR));\n\n\t// 2. Create 100 display lists, one for each character:\n\t\n\t// Create a displaylist for each of the 100 characters in texture:\n\t_displaylistBase = GL11.glGenLists(100); \n\n\tfloat fontSizeUV = _fontGrid.getInstance().getImageWidth() / (_fontGrid.getInstance().getWidth() * 10.0f);\n\t\n\tfor (int i = 0; i < 100; i++) {\n\t\t\n\t\tint x = (i % 10);  // column\n\t\tint y = (i / 10);  // row\n\n\t\t// Access characters from left to right, bottom to top:\n\t\tfloat textureCoordU = x * fontSizeUV;\n\t\tfloat textureCoordV = y * fontSizeUV;\n\t\t\n\t\t// Create a new displaylist for each character:\n\t\tGL11.glNewList(_displaylistBase + i, GL11.GL_COMPILE);\n\t\t\n\t\t// Render quadratic character-polygon:\n\t\tGL11.glBegin(GL11.GL_QUADS);\n\n\t\t// Top-left edge:\n\t\tGL11.glTexCoord2f(textureCoordU, textureCoordV);\n\t\tGL11.glVertex2i(0, 0);\n\t\t\n\t\t// Bottom-left edge:\n\t\tGL11.glTexCoord2f(textureCoordU, textureCoordV + fontSizeUV);\n\t\tGL11.glVertex2f(0, 1);\n\t\t\n\t\t// Bottom-right edge:\n\t\tGL11.glTexCoord2f(textureCoordU + fontSizeUV, textureCoordV + fontSizeUV);\n\t\tGL11.glVertex2f(1, 1);\n\t\t\n\t\t// Top-right edge:\n\t\tGL11.glTexCoord2f(textureCoordU + fontSizeUV, textureCoordV);\n\t\tGL11.glVertex2f(1/*-0.001f*/, 0);\n\t\t\n\t\tGL11.glEnd();\n\t\t\n\t\t// Move the quad to the right (advance cursor):\n\t\tGL11.glTranslatef(_charWidths[i] / (float) _fontSize, 0, 0);\n\n\t\tGL11.glEndList();\n\t}\n}", "path": "Sokobano\\src\\gdi1sokoban\\graphic\\base\\Font.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * Choose the suitable display mode according to the given parameters.\n * \n * @param width\n * @param height\n * @param bpp\tbits per pixel\n * @return \t\tthe suitable display mode\n * @throws LWJGLException\n */\n", "func_signal": "private DisplayMode findDisplayMode(int width, int height, int bpp, int frequency) throws LWJGLException", "code": "{\n\tDisplayMode[] modes = Display.getAvailableDisplayModes();\n\tfor (int i = 0; i < modes.length; i++) {\n\t\tif (modes[i].getWidth() == width && modes[i].getHeight() == height\n\t\t\t\t&& modes[i].getBitsPerPixel() >= bpp\n\t\t\t\t&& modes[i].getFrequency() == frequency) {\n\t\t\treturn modes[i];\n\t\t}\n\t}\n\treturn null;\n}", "path": "Sokobano\\src\\gdi1sokoban\\Application.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * Method saves and encodes some object into file with given filename. \n * @param object object to save\n * @param filename file to save\n * @throws IOException\n */\n", "func_signal": "public void saveObject(Serializable object, String filename)", "code": "{\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    try{\n\t\tObjectOutputStream objstream = new ObjectOutputStream(out);\n\t\tobjstream. writeObject(object);\n\t\tobjstream.close();\n\t\t\t\n\t\tFileOutputStream wr = new FileOutputStream(filename);\n\t\t//System.out.println(out.toString());\n\t\t//viewByte(out.toByteArray());\n\t\t//viewByte(sec.encodeStringtoByte(out.toString()));\n\t\t//viewByte(sec.encodeByte(out.toByteArray()));\n\t\twr.write(encodeByte(out.toByteArray()));\n\t\twr.close();\n\t\tout.close();\n\t}catch(IOException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "Sokobano\\src\\gdi1sokoban\\logic\\Security.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * Removes a flag from the tile at the given position.\n * \n * @param pos position\n */\n", "func_signal": "public void removeFlag(Position pos, int flag)", "code": "{\n\tassert(inBounds(pos));\n\t_tiles[pos.getY()][pos.getX()] &= (((~flag) << 8) + 0xFF);\n}", "path": "Sokobano\\src\\gdi1sokoban\\logic\\Board.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * builds a string from the given text containing only those characters that\n * can be displayed by the TextRenderer. \n * For example, 'Kle' becomes 'Kle'.\n * \n * @param text the text to be converted\n * @return the original text without non-displayable characters\n */\n", "func_signal": "public String displayedString(String text)", "code": "{\n\tStringBuilder result = new StringBuilder();\n\t\n\tfor(int i=0; i < text.length(); i++) {\n\t\tint index = text.charAt(i) - 32;\n\t\tif (index >= 0 && index < 100)\n\t\t\tresult.append(text.charAt(i));\n\t\t}\n\treturn result.toString();\n}", "path": "Sokobano\\src\\gdi1sokoban\\graphic\\base\\Font.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * Creates new record with the given parameters \n * @param _name record name\n * @param _id record id\n * @param _uri record uri\n */\n", "func_signal": "public IdentifierRecord(String _name, int _id, String _uri)", "code": "{\n\tsuper();\n\tthis._name = _name;\n\tthis._id = _id;\n\tthis._uri = _uri;\n}", "path": "Sokobano\\src\\gdi1sokoban\\logic\\IdentifierRecord.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * Removes a type from the tile at the given position.\n * \n * @param pos position\n */\n", "func_signal": "public void removeType(Position pos, int type)", "code": "{\n\tassert(inBounds(pos));\n\t_tiles[pos.getY()][pos.getX()] &= (~type);\n}", "path": "Sokobano\\src\\gdi1sokoban\\logic\\Board.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * Encodes given array of bytes and returns new encoded array of bytes\n * @param raw array of bytes to encode\n * @return encoded array of bytes \n */\n", "func_signal": "public byte[] encodeByte(byte[] raw)", "code": "{\n\tbyte[] enc = null;\n\ttry{\n\t\tCipher chr = Cipher.getInstance(\"DES\");\n\t\tSecretKey sKey = SecretKeyFactory.getInstance(\"DES\").generateSecret(new DESKeySpec(key));\n\t\tchr.init(Cipher.ENCRYPT_MODE, sKey);\n\t\tenc = chr.doFinal(raw);\n\t}catch(NoSuchAlgorithmException e){\n\t\te.printStackTrace();\n\t}catch(NoSuchPaddingException e){\n\t\te.printStackTrace();\n\t}catch(InvalidKeyException e){\n\t\te.printStackTrace();\n\t}catch(InvalidKeySpecException e){\n\t\te.printStackTrace();\n\t}catch(BadPaddingException e){\n\t\te.printStackTrace();\n\t}catch(IllegalBlockSizeException e){\n\t\te.printStackTrace();\n\t}\n\treturn enc;\n\n}", "path": "Sokobano\\src\\gdi1sokoban\\logic\\Security.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * Adds the type to the tile at the given position.\n * \n * @param pos position\n */\n", "func_signal": "public void addType(Position pos, int type)", "code": "{\n\tassert(inBounds(pos));\n\t_tiles[pos.getY()][pos.getX()] += type;\n}", "path": "Sokobano\\src\\gdi1sokoban\\logic\\Board.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * Decodes given bytes array and returns decoded bytes array\n * @param dec array of bytes to decode\n * @return decoded array of bytes\n */\n", "func_signal": "public byte[] decodeByte(byte[] dec)", "code": "{\n\tbyte[] out =null;\n\ttry{\n\t\tCipher decode = Cipher.getInstance(\"DES\");\n\t\tSecretKey sKey = SecretKeyFactory.getInstance(\"DES\").generateSecret(new DESKeySpec(key));\n\t\tdecode.init(Cipher.DECRYPT_MODE, sKey);\n\t\tout = decode.doFinal(dec);\n\t}catch(NoSuchAlgorithmException e){\n\t\te.printStackTrace();\n\t} catch (NoSuchPaddingException e) {\n\t\te.printStackTrace();\n\t} catch (InvalidKeyException e) {\n\t\te.printStackTrace();\n\t} catch (InvalidKeySpecException e) {\n\t\te.printStackTrace();\n\t} catch (IllegalBlockSizeException e) {\n\t\te.printStackTrace();\n\t} catch (BadPaddingException e) {\n\t\te.printStackTrace();\n\t}\n\treturn out;\n\t\n}", "path": "Sokobano\\src\\gdi1sokoban\\logic\\Security.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "// Times:           [100] [200] [900]\n// Transformations: [001] [002] [003]\n// _iTime ist der Index, der aktuellen Transformation / Basiszeit\n// _iTime+1 ist der Index, der Zieltransformation / Zielzeit\n", "func_signal": "public void render(long time)", "code": "{\n\n\t// Es gibt keine Transformationen in der Sequenz:\n\tif (_times.isEmpty()) return;\n\n\t_baseIndex = calcBaseIndex(time);\n\t\n\ttime = time - _startTime;\n\t\n\tif (_baseIndex == 0) {\n\n\t\t// Aktuelle Transformation ist erste der Sequenz:\n\t\tfloat interpolate = time /(float) _times.get(0);\n\t\t_transformations.get(0).render(interpolate);\n\t}\n\telse if (_baseIndex < _times.size()) {\n\t\t\n\t\t// Aktuelle Transformation ist in der Mitte der Sequenz:\n\t\tfloat interpolate = (time - _times.get(_baseIndex - 1)) /(float) (_times.get(_baseIndex) - _times.get(_baseIndex - 1));\n\t\t_transformations.get(_baseIndex - 1).render(_transformations.get(_baseIndex), interpolate);\n\t}\n\telse {\n\n\t\t// Aktuelle Transformation ist letzte der Sequenz:\n\t\t_transformations.get(_baseIndex - 1).render();\n\t}\n}", "path": "Sokobano\\src\\gdi1sokoban\\graphic\\Sequence.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * Method loads and decodes some object from the file with given file name\n * @param filename file to load\n * @return new Object\n * @throws Exception\n */\n", "func_signal": "public Object loadObject(String filename)", "code": "{\n\tFile file = new File(filename);\n\tbyte[] out =null;\n\ttry{\n\t\tFileInputStream in = new FileInputStream(file);\n\t\tout = new byte[(int)file.length()];\n\t\tin.read(out);\n\t\tin.close();\n\t}catch(FileNotFoundException e){\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\t//viewByte(out);\n\t//viewByte(sec.decodeByte(out));\n\tByteArrayInputStream input = new ByteArrayInputStream(decodeByte(out));\n\tObject object = null;\n\ttry{\n\t\tObjectInputStream objstream = new ObjectInputStream(input);\n\t\tobject = objstream.readObject();\n\t\tobjstream.close();\n\t\tinput.close();\n\t}catch(IOException e){\n\t\te.printStackTrace();\n\t} catch (ClassNotFoundException e) {\n\t\te.printStackTrace();\n\t}\n\t\n    return object;\n}", "path": "Sokobano\\src\\gdi1sokoban\\logic\\Security.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * Decodes file with the given file name and represents it as DOM Object \n * @param filename file to decode\n * @return decoded file as Document Object\n */\n", "func_signal": "public Document decodeFileToDOM(String filename)", "code": "{\n\tDocument doc = null;\n\tbyte[] dec = readBytes(filename);\n\tByteArrayInputStream input = new ByteArrayInputStream(decodeByte(dec));\n\tDocumentBuilderFactory dbfac = DocumentBuilderFactory.newInstance();\n\ttry{\n\t\tDocumentBuilder docBuilder = dbfac.newDocumentBuilder();\n\t\tdoc = docBuilder.parse(input);\n\t}catch(ParserConfigurationException e){\n\t\te.printStackTrace();\n\t} catch (SAXException e) {\n\t\t\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\t\n\t\te.printStackTrace();\n\t}\n\t//TEST ON\n//\t\ttry {\n//\t\t\tFileOutputStream fi = new FileOutputStream(filename);\n//\t\t\tfi.write(decodeByte(dec));\n//\t\t\tfi.close();\n//\t\t} catch (FileNotFoundException e) {\n//\t\t\t// k\n//\t\t\te.printStackTrace();\n//\t\t} catch (IOException e) {\n//\t\t\t//\n//\t\t\te.printStackTrace();\n//\t\t}\n//\t\t\n\t//TEST OFF\n\treturn doc;\n\t\n}", "path": "Sokobano\\src\\gdi1sokoban\\logic\\Security.java", "repo_name": "stengaard/art-int", "stars": 0, "license": "None", "language": "java", "size": 16198}
{"docstring": "/**\n * Method builds a document based on all the table schema meta data collected.\n * @param fieldChoice What fields to include in the document.  Accepted values are ( ALL, REQ, NONE )\n * @param numRows The number of table rows to create\n * @param includeDefaults Whether to include default data or not.\n * @param respectConstraints Whether to create foreign associations if possible\n * @return Document A DOM4J document containing the dataset.\n */\n", "func_signal": "private Document buildDocument( String fieldChoice, int numRows,\n        boolean includeDefaults, boolean respectConstraints )", "code": "{\n\n    Element datasetElement = DocumentHelper.createElement( \"dataset\" );\n    Document doc = DocumentHelper.createDocument( datasetElement );\n\n    for ( TableMapper table : schema.getTables() ) {\n        int id = 0;\n        for ( int i = 0; i < numRows; i++ ) {\n            id++;\n\n            Element tableElement = datasetElement.addElement( table.getName() );\n            for ( ColumnMapper column : table.getColumms() ) {\n                if ( fieldChoice.equals( \"ALL\" ) ) {\n                    if ( column.isPrimaryKey() ) {\n                        tableElement.addAttribute( column.getColumnName(), String.valueOf( id ) );\n                    } else {\n                        if ( column.isForeignKey() && respectConstraints ) {\n                        } else {\n                            String defaultValue = \"\";\n                            if ( includeDefaults ) {\n                                defaultValue = getDefault( column.getType() );\n                            }\n                            tableElement.addAttribute( column.getColumnName(), defaultValue );\n                        }\n                    }\n\n                } else if ( fieldChoice.equals( \"REQ\" ) ) {\n                    if ( column.isPrimaryKey() ) {\n                        tableElement.addAttribute( column.getColumnName(), String.valueOf( id ) );\n                    } else if ( column.isRequired() ) {\n                        if ( column.isForeignKey() && respectConstraints ) {\n                        } else {\n                            String defaultValue = \"\";\n                            if ( includeDefaults ) {\n                                defaultValue = getDefault( column.getType() );\n                            }\n                            tableElement.addAttribute( column.getColumnName(), defaultValue );\n                        }\n                    }\n\n                } else if ( fieldChoice.equals( \"NONE\" ) ) {\n                }\n            }\n        }\n    }\n    if ( respectConstraints ) {\n        doc = buildForeignKeyRelationships( doc, schema, numRows );\n    }\n    return doc;\n\n}", "path": "src\\com\\voet\\datasetcreator\\io\\DatasetWriter.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "/**\n *\n * @param outfile\n * @param fieldChoice\n * @param numRows\n * @param includeDefaults\n * @param respectConstraints\n * @return boolean\n */\n", "func_signal": "public boolean writeDataset( File outfile, String fieldChoice, int numRows,\n        boolean includeDefaults, boolean respectConstraints )", "code": "{\n    XMLWriter writer = null;\n    try {\n        OutputFormat format = OutputFormat.createPrettyPrint();\n        Document doc = buildDocument( fieldChoice, numRows, includeDefaults, respectConstraints );\n        writer = new XMLWriter( new FileWriter( outfile ), format );\n        writer.write( doc );\n        writer.flush();\n        return true;\n    } catch ( IOException ex ) {\n        Logger.getLogger( DatasetWriter.class.getName() ).log( Level.SEVERE,\n                null, ex );\n        return false;\n    } finally {\n        if ( writer != null ) {\n            try {\n                writer.close();\n            } catch ( IOException ex ) {\n                Logger.getLogger( DatasetWriter.class.getName() ).log( Level.SEVERE, null, ex );\n            }\n        }\n    }\n}", "path": "src\\com\\voet\\datasetcreator\\io\\DatasetWriter.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "/**\n * Returns a properly formatted connection string.  Uses the input parameters and\n * driver type to build a smart connection string.\n * @param host The hostname where the database server resides\n * @param port The port number to which it accepts connections\n * @param driverClass The class to use to connect.  This has an impact on the connection string\n * @param dbName The database name to connect to\n * @param username The username to connect\n * @param password The password to connect\n * @return\n */\n", "func_signal": "public static String getConnectionString( String host, String port, String driverClass, String dbName, String schemaName, String username, String password )", "code": "{\n    ConnectionStringBuilder builder = ConnectionStringFactory.getBuilder( driverClass );\n    return builder.build(host, port, dbName, schemaName, username, password);\n}", "path": "src\\com\\voet\\datasetcreator\\util\\ConnectionStringUtil.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "/**\n * The document that has been modified to include foreign key relationships.\n * @param doc The original document\n * @param schema The table schema.\n */\n", "func_signal": "private Document buildForeignKeyRelationships( Document doc,\n        SchemaMapper schema, int numRows )", "code": "{\n    Element rootElement = doc.getRootElement();\n\n    for ( TableMapper table : schema.getTables() ) {\n        List<ColumnMapper> fkCols = table.getForeignKeys();\n        for ( ColumnMapper column : fkCols ) {\n            for ( int i = 0; i < numRows; i++ ) {\n                String xpath1 = \"/dataset/\" + column.getForeignKeyTable() +\"[\"+ Integer.valueOf(i+1).toString() + \"]\";\n                Element pkElement = (Element) rootElement.selectSingleNode( xpath1 );\n\n                String xpath2 = \"/dataset/\" + table.getName() + \"[\"+ Integer.valueOf(i+1).toString() + \"]\";\n                Element curElement = (Element) rootElement.selectSingleNode( xpath2 );\n                curElement.addAttribute( column.getColumnName(), pkElement.attributeValue( column.getForeignKeyColumn() )  );\n            }\n        }\n    }\n    return doc;\n}", "path": "src\\com\\voet\\datasetcreator\\io\\DatasetWriter.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void driverSelectionChanged(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_driverSelectionChanged\n        Tuple<String, String> choice = (Tuple<String, String>) cboDrivers.getSelectedItem();\n        if ( choice.getFirst() == null || choice.getFirst().trim().length() == 0 ) {\n            pnlConnInfo.setVisible( false );\n            pnlTableNames.setVisible( false );\n        } else {\n            pnlConnInfo.setVisible( true );\n        }\n\n    }", "path": "src\\com\\voet\\datasetcreator\\DatasetCreatorView.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "//GEN-LAST:event_buildConnectionStringHandler\n", "func_signal": "private void chkGenDefaultsHandler(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_chkGenDefaultsHandler\n        if ( chkGenDefaults.isSelected() ) {\n        } else {\n        }\n    }", "path": "src\\com\\voet\\datasetcreator\\DatasetCreatorView.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "//GEN-LAST:event_chkGenDefaultsHandler\n", "func_signal": "private void btnBuildDatasetsHandler(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_btnBuildDatasetsHandler\n        SchemaMapper schema = new SchemaMapper( txtDbName.getText(), txtSchemaName.getText() );\n        ButtonModel selection =  (ToggleButtonModel) btnGrpFieldOptions.getSelection();\n\n\n        MyTableModel model = (MyTableModel) tblTableNames.getModel();\n        List<Tuple<Boolean, String>> rows = model.getCheckedRows();\n        for ( Tuple<Boolean, String> row : rows ) {\n            schema.add( row.getSecond() );\n        }\n        Tuple<String, String> cboItem = (Tuple<String, String>) cboDrivers.getSelectedItem();\n        String displayedConnString = txtConnString.getText();\n        String generatedConnString = ConnectionStringUtil.getConnectionString( txtHost.getText(), txtPort.getText(), cboItem.getFirst(), txtDbName.getText(), txtSchemaName.getText(), txtUsername.getText(), txtPassword.getText() );\n        String connectionString = null;\n        if ( displayedConnString.trim().length() > 0 && !generatedConnString.equals( displayedConnString ) ) {\n            connectionString = displayedConnString;\n        } else {\n            connectionString = generatedConnString;\n        }\n        schema = MetaDataAccessor.getColumnInfo( schema, cboItem.getFirst(), connectionString, schema.getDbName(), schema.getSchemaName(), txtUsername.getText(), txtPassword.getText() );\n\n        DatasetWriter writer = new DatasetWriter( schema );\n        String fileName = txtFileLocation.getText();\n        File outFile = null;\n        if ( fileName.indexOf( System.getProperty( \"file.separator\" ) ) > 0 ){\n            outFile = new File( fileName );\n            if ( !outFile.exists() ){\n                File parent = outFile.getParentFile();\n                if ( !parent.exists() ){\n                    JOptionPane.showMessageDialog( pnlConnInfo, \"Parent folder does not exists:\" + outFile.getAbsolutePath(), \"Invalid file.\", JOptionPane.ERROR_MESSAGE );\n                    return;\n                } else if ( !parent.isDirectory() ) {\n                    JOptionPane.showMessageDialog( pnlConnInfo, \"Parent is not a folder:\" + outFile.getAbsolutePath(), \"Invalid file.\", JOptionPane.ERROR_MESSAGE );\n                    return;\n                }\n            }\n        } else {\n            outFile = new File( System.getProperty( \"user.home\" ), fileName );\n        }\n        boolean success = writer.writeDataset( outFile, selection.getActionCommand(), Integer.parseInt(txtNumRows.getText()), chkGenDefaults.isSelected(), chkConstraints.isSelected() );\n        if ( success ) {\n            JOptionPane.showMessageDialog( pnlConnInfo, \"File written successfully\", \"Dataset Status\", JOptionPane.INFORMATION_MESSAGE );\n        } else {\n            JOptionPane.showMessageDialog( pnlConnInfo, \"Error writting file\", \"Dataset Status\", JOptionPane.ERROR_MESSAGE );\n        }\n\n\n    }", "path": "src\\com\\voet\\datasetcreator\\DatasetCreatorView.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "/**\n * Main method launching the application.\n */\n", "func_signal": "public static void main( String[] args )", "code": "{\n    installCustomLAFs();\n    launch( DatasetCreatorApp.class, args );\n}", "path": "src\\com\\voet\\datasetcreator\\DatasetCreatorApp.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    mainPanel = new javax.swing.JPanel();\n    jLabel1 = new javax.swing.JLabel();\n    cboDrivers = new javax.swing.JComboBox();\n    pnlConnInfo = new javax.swing.JPanel();\n    jLabel2 = new javax.swing.JLabel();\n    txtHost = new javax.swing.JTextField();\n    jLabel3 = new javax.swing.JLabel();\n    txtDbName = new javax.swing.JTextField();\n    jLabel4 = new javax.swing.JLabel();\n    txtPort = new javax.swing.JTextField();\n    jLabel5 = new javax.swing.JLabel();\n    txtUsername = new javax.swing.JTextField();\n    jLabel6 = new javax.swing.JLabel();\n    txtPassword = new javax.swing.JTextField();\n    btnGetTableList = new javax.swing.JButton();\n    jLabel7 = new javax.swing.JLabel();\n    txtConnString = new javax.swing.JTextField();\n    btnConnString = new javax.swing.JButton();\n    jLabel8 = new javax.swing.JLabel();\n    txtSchemaName = new javax.swing.JTextField();\n    pnlTableNames = new javax.swing.JPanel();\n    scrlPnlTableNames = new javax.swing.JScrollPane();\n    tblTableNames = new javax.swing.JTable();\n    jPanel1 = new javax.swing.JPanel();\n    pnlOptions = new javax.swing.JPanel();\n    jLabel9 = new javax.swing.JLabel();\n    chkGenDefaults = new javax.swing.JCheckBox();\n    jLabel10 = new javax.swing.JLabel();\n    txtNumRows = new javax.swing.JTextField();\n    btnBuildDatasets = new javax.swing.JButton();\n    rdoAll = new javax.swing.JRadioButton();\n    rdoReq = new javax.swing.JRadioButton();\n    rdoNone = new javax.swing.JRadioButton();\n    txtFileLocation = new javax.swing.JTextField();\n    jLabel11 = new javax.swing.JLabel();\n    chkConstraints = new javax.swing.JCheckBox();\n    menuBar = new javax.swing.JMenuBar();\n    javax.swing.JMenu fileMenu = new javax.swing.JMenu();\n    javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();\n    javax.swing.JMenu helpMenu = new javax.swing.JMenu();\n    javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();\n    mnuLAF = new javax.swing.JMenu();\n    statusPanel = new javax.swing.JPanel();\n    javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();\n    statusMessageLabel = new javax.swing.JLabel();\n    statusAnimationLabel = new javax.swing.JLabel();\n    progressBar = new javax.swing.JProgressBar();\n    btnGrpFieldOptions = new javax.swing.ButtonGroup();\n    btnGrpLAF = new javax.swing.ButtonGroup();\n\n    mainPanel.setName(\"mainPanel\"); // NOI18N\n    mainPanel.setPreferredSize(new java.awt.Dimension(570, 400));\n\n    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.voet.datasetcreator.DatasetCreatorApp.class).getContext().getResourceMap(DatasetCreatorView.class);\n    jLabel1.setText(resourceMap.getString(\"lbl_drivers.text\")); // NOI18N\n    jLabel1.setName(\"lbl_drivers\"); // NOI18N\n\n    cboDrivers.setModel(DatasetCreatorApp.getDriverList());\n    cboDrivers.setName(\"cboDrivers\"); // NOI18N\n    cboDrivers.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            driverSelectionChanged(evt);\n        }\n    });\n\n    pnlConnInfo.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n    pnlConnInfo.setToolTipText(resourceMap.getString(\"pnlConnInfo.toolTipText\")); // NOI18N\n    pnlConnInfo.setName(\"pnlConnInfo\"); // NOI18N\n\n    jLabel2.setText(resourceMap.getString(\"lblHostName.text\")); // NOI18N\n    jLabel2.setName(\"lblHostName\"); // NOI18N\n\n    txtHost.setText(resourceMap.getString(\"txtHost.text\")); // NOI18N\n    txtHost.setName(\"txtHost\"); // NOI18N\n\n    jLabel3.setText(resourceMap.getString(\"lblDbName.text\")); // NOI18N\n    jLabel3.setName(\"lblDbName\"); // NOI18N\n\n    txtDbName.setText(resourceMap.getString(\"txtDbName.text\")); // NOI18N\n    txtDbName.setName(\"txtDbName\"); // NOI18N\n\n    jLabel4.setText(resourceMap.getString(\"lblPort.text\")); // NOI18N\n    jLabel4.setName(\"lblPort\"); // NOI18N\n\n    txtPort.setText(resourceMap.getString(\"txtPort.text\")); // NOI18N\n    txtPort.setName(\"txtPort\"); // NOI18N\n\n    jLabel5.setText(resourceMap.getString(\"lblUsername.text\")); // NOI18N\n    jLabel5.setName(\"lblUsername\"); // NOI18N\n\n    txtUsername.setText(resourceMap.getString(\"txtUsername.text\")); // NOI18N\n    txtUsername.setName(\"txtUsername\"); // NOI18N\n\n    jLabel6.setText(resourceMap.getString(\"lblUsername.text\")); // NOI18N\n    jLabel6.setName(\"lblUsername\"); // NOI18N\n\n    txtPassword.setText(resourceMap.getString(\"txtPassword.text\")); // NOI18N\n    txtPassword.setName(\"txtPassword\"); // NOI18N\n\n    btnGetTableList.setText(resourceMap.getString(\"btnListTableNames.text\")); // NOI18N\n    btnGetTableList.setName(\"btnListTableNames\"); // NOI18N\n    btnGetTableList.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            btnListTableNames(evt);\n        }\n    });\n\n    jLabel7.setText(resourceMap.getString(\"lblConnString.text\")); // NOI18N\n    jLabel7.setName(\"lblConnString\"); // NOI18N\n\n    txtConnString.setText(resourceMap.getString(\"txtConnString.text\")); // NOI18N\n    txtConnString.setName(\"txtConnString\"); // NOI18N\n\n    btnConnString.setText(resourceMap.getString(\"btnConnString.text\")); // NOI18N\n    btnConnString.setName(\"btnConnString\"); // NOI18N\n    btnConnString.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            buildConnectionStringHandler(evt);\n        }\n    });\n\n    jLabel8.setText(resourceMap.getString(\"lblSchemaName.text\")); // NOI18N\n    jLabel8.setName(\"lblSchemaName\"); // NOI18N\n\n    txtSchemaName.setText(resourceMap.getString(\"txtSchemaName.text\")); // NOI18N\n    txtSchemaName.setName(\"txtSchemaName\"); // NOI18N\n\n    javax.swing.GroupLayout pnlConnInfoLayout = new javax.swing.GroupLayout(pnlConnInfo);\n    pnlConnInfo.setLayout(pnlConnInfoLayout);\n    pnlConnInfoLayout.setHorizontalGroup(\n        pnlConnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(pnlConnInfoLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(pnlConnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jLabel6)\n                .addGroup(pnlConnInfoLayout.createSequentialGroup()\n                    .addGroup(pnlConnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(jLabel3)\n                        .addComponent(jLabel5)\n                        .addComponent(jLabel7)\n                        .addComponent(jLabel2))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addGroup(pnlConnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(txtConnString, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)\n                        .addComponent(txtUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)\n                        .addComponent(txtDbName, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)\n                        .addComponent(txtPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE))))\n            .addGap(18, 18, 18)\n            .addGroup(pnlConnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jLabel4)\n                .addComponent(jLabel8))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(pnlConnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(btnGetTableList)\n                .addComponent(btnConnString)\n                .addComponent(txtSchemaName, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addGap(51, 51, 51))\n    );\n    pnlConnInfoLayout.setVerticalGroup(\n        pnlConnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(pnlConnInfoLayout.createSequentialGroup()\n            .addGroup(pnlConnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel2)\n                .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(jLabel4))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(pnlConnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addGroup(pnlConnInfoLayout.createSequentialGroup()\n                    .addGroup(pnlConnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(jLabel3)\n                        .addComponent(txtDbName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(jLabel8)\n                        .addComponent(txtSchemaName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addGroup(pnlConnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(jLabel5)\n                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addGroup(pnlConnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(jLabel6)\n                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                .addComponent(btnConnString))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(pnlConnInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel7)\n                .addComponent(btnGetTableList)\n                .addComponent(txtConnString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n\n    pnlTableNames.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n    pnlTableNames.setName(\"pnlTableNames\"); // NOI18N\n    pnlTableNames.setPreferredSize(new java.awt.Dimension(315, 300));\n\n    scrlPnlTableNames.setName(\"scrlPnlTableNames\"); // NOI18N\n\n    tblTableNames.setAutoCreateRowSorter(true);\n    tblTableNames.setModel(new javax.swing.table.DefaultTableModel(\n        new Object [][] {\n            {null, null},\n            {null, null},\n            {null, null},\n            {null, null}\n        },\n        new String [] {\n            \"Title 1\", \"Title 2\"\n        }\n    ));\n    tblTableNames.setFillsViewportHeight(true);\n    tblTableNames.setName(\"tblTableNames\"); // NOI18N\n    scrlPnlTableNames.setViewportView(tblTableNames);\n\n    javax.swing.GroupLayout pnlTableNamesLayout = new javax.swing.GroupLayout(pnlTableNames);\n    pnlTableNames.setLayout(pnlTableNamesLayout);\n    pnlTableNamesLayout.setHorizontalGroup(\n        pnlTableNamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 254, Short.MAX_VALUE)\n        .addGroup(pnlTableNamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(pnlTableNamesLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(scrlPnlTableNames, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)\n                .addContainerGap()))\n    );\n    pnlTableNamesLayout.setVerticalGroup(\n        pnlTableNamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 318, Short.MAX_VALUE)\n        .addGroup(pnlTableNamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(pnlTableNamesLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(scrlPnlTableNames, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)\n                .addContainerGap()))\n    );\n\n    jPanel1.setName(\"jPanel1\"); // NOI18N\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 0, Short.MAX_VALUE)\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGap(0, 457, Short.MAX_VALUE)\n    );\n\n    pnlOptions.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n    pnlOptions.setName(\"pnlOptions\"); // NOI18N\n\n    jLabel9.setText(resourceMap.getString(\"lblOptions.text\")); // NOI18N\n    jLabel9.setName(\"lblOptions\"); // NOI18N\n\n    chkGenDefaults.setText(resourceMap.getString(\"chkGenDefaults.text\")); // NOI18N\n    chkGenDefaults.setName(\"chkGenDefaults\"); // NOI18N\n    chkGenDefaults.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            chkGenDefaultsHandler(evt);\n        }\n    });\n\n    jLabel10.setText(resourceMap.getString(\"lblNumRows.text\")); // NOI18N\n    jLabel10.setName(\"lblNumRows\"); // NOI18N\n\n    txtNumRows.setText(resourceMap.getString(\"txtNumRows.text\")); // NOI18N\n    txtNumRows.setInputVerifier(new MyNumericInputVerifier());\n    txtNumRows.setName(\"txtNumRows\"); // NOI18N\n\n    btnBuildDatasets.setText(resourceMap.getString(\"btnBuildDatasets.text\")); // NOI18N\n    btnBuildDatasets.setName(\"btnBuildDatasets\"); // NOI18N\n    btnBuildDatasets.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            btnBuildDatasetsHandler(evt);\n        }\n    });\n\n    btnGrpFieldOptions.add(rdoAll);\n    rdoAll.setSelected(true);\n    rdoAll.setText(resourceMap.getString(\"rdoAll.text\")); // NOI18N\n    rdoAll.setActionCommand(resourceMap.getString(\"rdoAll.actionCommand\")); // NOI18N\n    rdoAll.setName(\"rdoAll\"); // NOI18N\n\n    btnGrpFieldOptions.add(rdoReq);\n    rdoReq.setText(resourceMap.getString(\"rdoReq.text\")); // NOI18N\n    rdoReq.setActionCommand(resourceMap.getString(\"rdoReq.actionCommand\")); // NOI18N\n    rdoReq.setName(\"rdoReq\"); // NOI18N\n\n    btnGrpFieldOptions.add(rdoNone);\n    rdoNone.setText(resourceMap.getString(\"rdoNone.text\")); // NOI18N\n    rdoNone.setActionCommand(resourceMap.getString(\"rdoNone.actionCommand\")); // NOI18N\n    rdoNone.setName(\"rdoNone\"); // NOI18N\n\n    txtFileLocation.setText(resourceMap.getString(\"txtFileLocation.text\")); // NOI18N\n    txtFileLocation.setName(\"txtFileLocation\"); // NOI18N\n\n    jLabel11.setText(resourceMap.getString(\"jLabel11.text\")); // NOI18N\n    jLabel11.setName(\"jLabel11\"); // NOI18N\n\n    chkConstraints.setText(resourceMap.getString(\"chkConstraints.text\")); // NOI18N\n    chkConstraints.setName(\"chkConstraints\"); // NOI18N\n\n    javax.swing.GroupLayout pnlOptionsLayout = new javax.swing.GroupLayout(pnlOptions);\n    pnlOptions.setLayout(pnlOptionsLayout);\n    pnlOptionsLayout.setHorizontalGroup(\n        pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(pnlOptionsLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(pnlOptionsLayout.createSequentialGroup()\n                    .addGroup(pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(jLabel9)\n                        .addComponent(chkGenDefaults))\n                    .addContainerGap(299, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGroup(pnlOptionsLayout.createSequentialGroup()\n                    .addComponent(rdoAll)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(rdoReq)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(rdoNone)\n                    .addContainerGap())\n                .addGroup(pnlOptionsLayout.createSequentialGroup()\n                    .addComponent(btnBuildDatasets)\n                    .addContainerGap(329, Short.MAX_VALUE))\n                .addGroup(pnlOptionsLayout.createSequentialGroup()\n                    .addComponent(txtFileLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addContainerGap(119, Short.MAX_VALUE))\n                .addGroup(pnlOptionsLayout.createSequentialGroup()\n                    .addComponent(jLabel11)\n                    .addContainerGap(369, Short.MAX_VALUE))\n                .addGroup(pnlOptionsLayout.createSequentialGroup()\n                    .addComponent(jLabel10)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(txtNumRows, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)\n                    .addGap(196, 196, 196))\n                .addGroup(pnlOptionsLayout.createSequentialGroup()\n                    .addComponent(chkConstraints)\n                    .addContainerGap(288, Short.MAX_VALUE))))\n    );\n    pnlOptionsLayout.setVerticalGroup(\n        pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(pnlOptionsLayout.createSequentialGroup()\n            .addGap(6, 6, 6)\n            .addComponent(jLabel9)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addGroup(pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(rdoAll)\n                .addComponent(rdoNone)\n                .addComponent(rdoReq))\n            .addGap(18, 18, 18)\n            .addComponent(chkGenDefaults)\n            .addGap(6, 6, 6)\n            .addComponent(chkConstraints)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addGroup(pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel10)\n                .addComponent(txtNumRows, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addGap(18, 18, 18)\n            .addComponent(jLabel11)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(txtFileLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(btnBuildDatasets)\n            .addContainerGap(37, Short.MAX_VALUE))\n    );\n\n    rdoReq.getAccessibleContext().setAccessibleName(resourceMap.getString(\"jRadioButton2.AccessibleContext.accessibleName\")); // NOI18N\n\n    javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);\n    mainPanel.setLayout(mainPanelLayout);\n    mainPanelLayout.setHorizontalGroup(\n        mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(mainPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(mainPanelLayout.createSequentialGroup()\n                    .addComponent(jLabel1)\n                    .addGap(18, 18, 18)\n                    .addComponent(cboDrivers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()\n                    .addComponent(pnlTableNames, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(pnlOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addGroup(mainPanelLayout.createSequentialGroup()\n                    .addComponent(pnlConnInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGap(1, 1, 1)))\n            .addContainerGap())\n    );\n    mainPanelLayout.setVerticalGroup(\n        mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(mainPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel1)\n                .addComponent(cboDrivers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addGap(1, 1, 1)\n            .addComponent(pnlConnInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGroup(mainPanelLayout.createSequentialGroup()\n                    .addComponent(pnlOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGap(135, 135, 135))\n                .addGroup(mainPanelLayout.createSequentialGroup()\n                    .addComponent(pnlTableNames, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)\n                    .addGap(135, 135, 135)))\n            .addGap(0, 0, 0))\n    );\n\n    menuBar.setName(\"menuBar\"); // NOI18N\n\n    fileMenu.setText(resourceMap.getString(\"fileMenu.text\")); // NOI18N\n    fileMenu.setName(\"fileMenu\"); // NOI18N\n\n    javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.voet.datasetcreator.DatasetCreatorApp.class).getContext().getActionMap(DatasetCreatorView.class, this);\n    exitMenuItem.setAction(actionMap.get(\"quit\")); // NOI18N\n    exitMenuItem.setName(\"exitMenuItem\"); // NOI18N\n    fileMenu.add(exitMenuItem);\n\n    menuBar.add(fileMenu);\n\n    helpMenu.setText(resourceMap.getString(\"helpMenu.text\")); // NOI18N\n    helpMenu.setName(\"helpMenu\"); // NOI18N\n\n    aboutMenuItem.setAction(actionMap.get(\"showAboutBox\")); // NOI18N\n    aboutMenuItem.setName(\"aboutMenuItem\"); // NOI18N\n    helpMenu.add(aboutMenuItem);\n\n    menuBar.add(helpMenu);\n\n    mnuLAF.setText(resourceMap.getString(\"mnuSkin.text\")); // NOI18N\n    mnuLAF.setName(\"mnuSkin\"); // NOI18N\n    menuBar.add(mnuLAF);\n\n    statusPanel.setName(\"statusPanel\"); // NOI18N\n\n    statusPanelSeparator.setName(\"statusPanelSeparator\"); // NOI18N\n\n    statusMessageLabel.setName(\"statusMessageLabel\"); // NOI18N\n\n    statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n    statusAnimationLabel.setName(\"statusAnimationLabel\"); // NOI18N\n\n    progressBar.setName(\"progressBar\"); // NOI18N\n\n    javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);\n    statusPanel.setLayout(statusPanelLayout);\n    statusPanelLayout.setHorizontalGroup(\n        statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)\n        .addGroup(statusPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(statusMessageLabel)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 564, Short.MAX_VALUE)\n            .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(statusAnimationLabel)\n            .addContainerGap())\n    );\n    statusPanelLayout.setVerticalGroup(\n        statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(statusPanelLayout.createSequentialGroup()\n            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(statusMessageLabel)\n                .addComponent(statusAnimationLabel)\n                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addGap(3, 3, 3))\n    );\n\n    setComponent(mainPanel);\n    setMenuBar(menuBar);\n    setStatusBar(statusPanel);\n}", "path": "src\\com\\voet\\datasetcreator\\DatasetCreatorView.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "/**\n * Returns the column information for the selected tables from the desired schema.\n * @param schema The Schema mapper class\n * @param driverClass The driver class used to connect\n * @param connectionString The connection string to connect with\n * @param dbName The database name to connect to.  Some Database engines don't use this.\n * @param schemaName The schema to connect to.  Some database engines automatically connect you based on username.\n * @param username The username to connect with\n * @param password The password to connect with\n * @return SchemaMapper the meta data information from the DB including the tables and columns selected.\n */\n", "func_signal": "public static SchemaMapper getColumnInfo( SchemaMapper schema,\n        String driverClass, String connectionString, String dbName,\n        String schemaName, String username, String password )", "code": "{\n\n    SchemaMapper mapper = new SchemaMapper( schema.getDbName(), schema.getSchemaName() );\n    Connection connection = null;\n    try {\n        connection = getConnection( driverClass, connectionString, username, password );\n        DatabaseMetaData dmd = connection.getMetaData();\n        for ( TableMapper tbl : schema.getTables() ) {\n            System.out.println( \"table:\" + tbl.getName() );\n            TableMapper newTable = new TableMapper( tbl.getName() );\n            Set<String> primaryKeys = new HashSet<String>();\n            try {\n                ResultSet prs = dmd.getPrimaryKeys( schema.getSchemaName(),\n                        schema.getSchemaName(), tbl.getName() );\n\n                while ( prs.next() ) {\n                    // Column name of the primary key\n                    primaryKeys.add( prs.getString( 4 ) );\n                }\n                prs.close();\n            } catch ( Throwable t ) {\n                // Method not implemented by driver so ignore.\n            }\n\n            Map<String, String> foreignKeys = new HashMap<String, String>();\n            try {\n                ResultSet importedKeys = dmd.getImportedKeys( schema.getSchemaName(), schema.getSchemaName(), tbl.getName() );\n                while ( importedKeys.next() ) {\n                    String curSchema = importedKeys.getString( 6 );\n                    String targetSchema = importedKeys.getString( 2 );\n                    String curColumn = importedKeys.getString( 8 );\n                    String targetTable = importedKeys.getString( 3 );\n                    String targetColumn = importedKeys.getString( 4 );\n\n                    // only support inter schema dependencies\n                    if ( curSchema.equals( targetSchema ) ) {\n                        foreignKeys.put( curColumn, targetTable + \":\" + targetColumn );\n                    }\n                }\n                importedKeys.close();\n            } catch ( Throwable t ) {\n                // Method not supported by driver so ignore.\n            }\n            mapper.add( newTable );\n            ResultSet trs = dmd.getColumns( schema.getSchemaName(), schema.getSchemaName(), tbl.getName(), \"%\" );\n            while ( trs.next() ) {\n\n                String colName = trs.getString( \"COLUMN_NAME\" );\n                int type = trs.getInt( \"DATA_TYPE\" );\n                int nullableInt = trs.getInt( \"NULLABLE\" );\n                boolean nullable = ( nullableInt != 0 );\n                ColumnMapper cMapper = null;\n                if ( primaryKeys.contains( colName ) ) {\n                    cMapper = new ColumnMapper( newTable.getName(),\n                            colName, !nullable,\n                            type, true );\n                } else if ( foreignKeys.containsKey( colName ) ) {\n                    String foreignRelationship = foreignKeys.get( colName );\n                    String[] targetInfo = foreignRelationship.split( \":\" );\n                    cMapper = new ColumnMapper( newTable.getName(),\n                            colName, !nullable,\n                            type, false, true, targetInfo[0], targetInfo[1] );\n                } else {\n                    cMapper = new ColumnMapper( newTable.getName(),\n                            colName, !nullable,\n                            type );\n                }\n                newTable.addColumn( cMapper );\n            }\n        }\n    } catch ( SQLException ex ) {\n        Logger.getLogger( MetaDataAccessor.class.getName() ).\n                log( Level.SEVERE, null, ex );\n    } finally {\n        try {\n            connection.close();\n        } catch ( SQLException ex ) {\n            Logger.getLogger( MetaDataAccessor.class.getName() ).\n                    log( Level.SEVERE, null, ex );\n        }\n    }\n    return mapper;\n}", "path": "src\\com\\voet\\datasetcreator\\data\\MetaDataAccessor.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "/**\n * Default constructor that accepts the table name.\n * @param name\n */\n", "func_signal": "public TableMapper( String name )", "code": "{\n    this.name = name;\n    columns = new ArrayList<ColumnMapper>();\n}", "path": "src\\com\\voet\\datasetcreator\\data\\entities\\TableMapper.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "//GEN-LAST:event_btnListTableNames\n", "func_signal": "private void buildConnectionStringHandler(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_buildConnectionStringHandler\n        Tuple<String, String> cboItem = (Tuple<String, String>) cboDrivers.getSelectedItem();\n        String connectionString = ConnectionStringUtil.getConnectionString( txtHost.getText(), txtPort.getText(), cboItem.getFirst(), txtDbName.getText(), txtSchemaName.getText(), txtUsername.getText(), txtPassword.getText() );\n        txtConnString.setText( connectionString );\n    }", "path": "src\\com\\voet\\datasetcreator\\DatasetCreatorView.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "/**\n * returns the list of columns that are foreign keys to another table.\n * @return List<ColumnMapper> the list of columns that are foreign keys to other tables.\n */\n", "func_signal": "public List<ColumnMapper> getForeignKeys()", "code": "{\n    List<ColumnMapper> fkCols = new ArrayList<ColumnMapper>();\n    for ( ColumnMapper column: this.columns ){\n        if ( column.isForeignKey() ){\n            fkCols.add( column );\n        }\n    }\n    return fkCols;\n}", "path": "src\\com\\voet\\datasetcreator\\data\\entities\\TableMapper.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "/**\n * Creates a database connection using the provided information and returns it for use.\n * @param driverClass The driver class to connect with.\n * @param connectionString The connection string to use to connect to the database.\n * @param username The username to connect with.\n * @param password The password to connect with.\n * @return A database connect.\n */\n", "func_signal": "public static Connection getConnection( String driverClass, String connectionString, String username, String password )", "code": "{\n    try {\n//            Class.forName( driverClass );\n        Connection con = DriverManager.getConnection( connectionString,\n                username, password );\n        return con;\n    } catch ( SQLException ex ) {\n        Logger.getLogger( ConnectionStringUtil.class.getName() ).\n                log( Level.SEVERE, null, ex );\n//        } catch ( ClassNotFoundException ex ) {\n//            Logger.getLogger( ConnectionStringUtil.class.getName() ).\n//                    log( Level.SEVERE, null, ex );\n    }\n    return null;\n\n}", "path": "src\\com\\voet\\datasetcreator\\util\\ConnectionStringUtil.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "/**\n * Creates a database connection using the provided information and returns it for use.\n * @param host The server host to connect to.\n * @param port The port the database is listening on.\n * @param driverClass The driver class to connect with.\n * @param dbName The database name to conncect to.\n * @param username The username to connect with.\n * @param password The password to connect with.\n * @return A database connection.\n */\n", "func_signal": "public static Connection getConnection( String host, String port, String driverClass, String dbName, String schemaName, String username, String password )", "code": "{\n        ConnectionStringBuilder builder = ConnectionStringFactory.getBuilder( driverClass );\n        String connectionString = builder.build( host, port, dbName, schemaName,\n                username, password );\n        return getConnection( driverClass, connectionString, username,\n                password );\n}", "path": "src\\com\\voet\\datasetcreator\\util\\ConnectionStringUtil.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "/**\n * The default constructor accepting all the necessary fields.\n * @param tableName\n * @param columnName\n * @param required\n * @param type\n * @param primaryKey\n * @param foreignKey\n * @param foreignKeyTable\n * @param foreignKeyColumn\n */\n", "func_signal": "public ColumnMapper( String tableName, String columnName, boolean required,\n        Integer type, boolean primaryKey, boolean foreignKey, String foreignKeyTable, String foreignKeyColumn )", "code": "{\n    this.tableName = tableName;\n    this.columnName = columnName;\n    this.required = required;\n    this.type = type;\n    this.primaryKey = primaryKey;\n    this.foreignKey = foreignKey;\n    this.foreignKeyTable = foreignKeyTable;\n    this.foreignKeyColumn = foreignKeyColumn;\n}", "path": "src\\com\\voet\\datasetcreator\\data\\entities\\ColumnMapper.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "/**\n * Returns the Table information for the desired schema.\n * @param driverClass The driver class used to connect\n * @param connectionString The connection string to connect with\n * @param dbName The database name to connect to.  Some Database engines don't use this.\n * @param schemaName The schema to connect to.  Some database engines automatically connect you based on username.\n * @param username The username to connect with\n * @param password The password to connect with\n * @return SchemaMapper containing all the tables that are available in the specified schema/dbname combination.\n */\n", "func_signal": "public static SchemaMapper getTableNames( String driverClass,\n        String connectionString, String dbName, String schemaName,\n        String username, String password )", "code": "{\n\n    SchemaMapper mapper = new SchemaMapper( dbName, schemaName );\n    Connection connection = null;\n    try {\n        connection = getConnection( driverClass, connectionString, username,\n                password );\n        DatabaseMetaData dmd = connection.getMetaData();\n        ResultSet tbrs = dmd.getTables( schemaName, schemaName, null, new String[]{ \"TABLE\" } );\n        while ( tbrs.next() ) {\n            mapper.add( tbrs.getString( 3 ) );\n        }\n        tbrs.close();\n    } catch ( SQLException ex ) {\n        Logger.getLogger( MetaDataAccessor.class.getName() ).\n                log( Level.SEVERE, null, ex );\n    } finally {\n        try {\n            connection.close();\n        } catch ( SQLException ex ) {\n            Logger.getLogger( MetaDataAccessor.class.getName() ).\n                    log( Level.SEVERE, null, ex );\n        }\n    }\n    return mapper;\n}", "path": "src\\com\\voet\\datasetcreator\\data\\MetaDataAccessor.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    closeButton = new javax.swing.JButton();\n    javax.swing.JLabel appTitleLabel = new javax.swing.JLabel();\n    javax.swing.JLabel versionLabel = new javax.swing.JLabel();\n    javax.swing.JLabel appVersionLabel = new javax.swing.JLabel();\n    javax.swing.JLabel vendorLabel = new javax.swing.JLabel();\n    javax.swing.JLabel appVendorLabel = new javax.swing.JLabel();\n    javax.swing.JLabel homepageLabel = new javax.swing.JLabel();\n    javax.swing.JLabel appHomepageLabel = new javax.swing.JLabel();\n    javax.swing.JLabel appDescLabel = new javax.swing.JLabel();\n    javax.swing.JLabel imageLabel = new javax.swing.JLabel();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.voet.datasetcreator.DatasetCreatorApp.class).getContext().getResourceMap(DatasetCreatorAboutBox.class);\n    setTitle(resourceMap.getString(\"title\")); // NOI18N\n    setModal(true);\n    setName(\"aboutBox\"); // NOI18N\n    setResizable(false);\n\n    javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.voet.datasetcreator.DatasetCreatorApp.class).getContext().getActionMap(DatasetCreatorAboutBox.class, this);\n    closeButton.setAction(actionMap.get(\"closeAboutBox\")); // NOI18N\n    closeButton.setName(\"closeButton\"); // NOI18N\n\n    appTitleLabel.setFont(appTitleLabel.getFont().deriveFont(appTitleLabel.getFont().getStyle() | java.awt.Font.BOLD, appTitleLabel.getFont().getSize()+4));\n    appTitleLabel.setText(resourceMap.getString(\"Application.title\")); // NOI18N\n    appTitleLabel.setName(\"appTitleLabel\"); // NOI18N\n\n    versionLabel.setFont(versionLabel.getFont().deriveFont(versionLabel.getFont().getStyle() | java.awt.Font.BOLD));\n    versionLabel.setText(resourceMap.getString(\"versionLabel.text\")); // NOI18N\n    versionLabel.setName(\"versionLabel\"); // NOI18N\n\n    appVersionLabel.setText(resourceMap.getString(\"Application.version\")); // NOI18N\n    appVersionLabel.setName(\"appVersionLabel\"); // NOI18N\n\n    vendorLabel.setFont(vendorLabel.getFont().deriveFont(vendorLabel.getFont().getStyle() | java.awt.Font.BOLD));\n    vendorLabel.setText(resourceMap.getString(\"vendorLabel.text\")); // NOI18N\n    vendorLabel.setName(\"vendorLabel\"); // NOI18N\n\n    appVendorLabel.setText(resourceMap.getString(\"Application.vendor\")); // NOI18N\n    appVendorLabel.setName(\"appVendorLabel\"); // NOI18N\n\n    homepageLabel.setFont(homepageLabel.getFont().deriveFont(homepageLabel.getFont().getStyle() | java.awt.Font.BOLD));\n    homepageLabel.setText(resourceMap.getString(\"homepageLabel.text\")); // NOI18N\n    homepageLabel.setName(\"homepageLabel\"); // NOI18N\n\n    appHomepageLabel.setText(resourceMap.getString(\"Application.homepage\")); // NOI18N\n    appHomepageLabel.setName(\"appHomepageLabel\"); // NOI18N\n\n    appDescLabel.setText(resourceMap.getString(\"appDescLabel.text\")); // NOI18N\n    appDescLabel.setName(\"appDescLabel\"); // NOI18N\n\n    imageLabel.setIcon(resourceMap.getIcon(\"imageLabel.icon\")); // NOI18N\n    imageLabel.setName(\"imageLabel\"); // NOI18N\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addComponent(imageLabel)\n            .addGap(18, 18, 18)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(versionLabel)\n                        .addComponent(vendorLabel)\n                        .addComponent(homepageLabel))\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addComponent(appVersionLabel)\n                        .addComponent(appVendorLabel)\n                        .addComponent(appHomepageLabel)))\n                .addComponent(appTitleLabel, javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(appDescLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)\n                .addComponent(closeButton))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(appTitleLabel)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addComponent(appDescLabel)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(versionLabel)\n                .addComponent(appVersionLabel))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(vendorLabel)\n                .addComponent(appVendorLabel))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(homepageLabel)\n                .addComponent(appHomepageLabel))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)\n            .addComponent(closeButton)\n            .addContainerGap())\n    );\n\n    pack();\n}", "path": "src\\com\\voet\\datasetcreator\\DatasetCreatorAboutBox.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "//GEN-LAST:event_driverSelectionChanged\n", "func_signal": "private void btnListTableNames(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_btnListTableNames\n        Tuple<String, String> cboItem = (Tuple<String, String>) cboDrivers.getSelectedItem();\n\n        String displayedConnString = txtConnString.getText();\n        String generatedConnString = ConnectionStringUtil.getConnectionString( txtHost.getText(), txtPort.getText(), cboItem.getFirst(), txtDbName.getText(), txtSchemaName.getText(), txtUsername.getText(), txtPassword.getText() );\n        String connectionString = null;\n        if ( displayedConnString.trim().length() > 0 && !generatedConnString.equals( displayedConnString ) ) {\n            connectionString = displayedConnString;\n        } else {\n            connectionString = generatedConnString;\n        }\n        SchemaMapper schema = MetaDataAccessor.getTableNames( cboItem.getFirst(), connectionString,\n                txtDbName.getText(), txtSchemaName.getText(), txtUsername.getText(), txtPassword.getText() );\n\n        MyTableModel model = new MyTableModel();\n        for ( TableMapper tbl : schema.getTables() ) {\n            model.add( new Tuple( Boolean.FALSE, tbl.getName() ) );\n\n        }\n        tblTableNames.setModel( model );\n\n        TableColumn selectedColumn = tblTableNames.getColumnModel().getColumn( 0 );\n        JCheckBox chk = new JCheckBox();\n        chk.setHorizontalAlignment( JLabel.CENTER );\n        selectedColumn.setCellEditor( new DefaultCellEditor( chk ) );\n        selectedColumn.setCellRenderer( new MyCheckBoxRenderer() );\n        selectedColumn.setPreferredWidth( 15 );\n        tblTableNames.doLayout();\n        pnlTableNames.setVisible( true );\n        pnlOptions.setVisible( true );\n\n    }", "path": "src\\com\\voet\\datasetcreator\\DatasetCreatorView.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "/**\n * Adds a new column to the table.\n * @param column The Column definition\n */\n", "func_signal": "public void addColumn( ColumnMapper column )", "code": "{\n    column.setTableName( this.getName() );\n    this.columns.add( column );\n}", "path": "src\\com\\voet\\datasetcreator\\data\\entities\\TableMapper.java", "repo_name": "timvoet/DatasetCreator", "stars": 1, "license": "None", "language": "java", "size": 12792}
{"docstring": "/**\n * @param view the main view object\n */\n", "func_signal": "public Controller(View view)", "code": "{\n\tview(view);\n\tsetLayout(new GridLayout());\n\tsetBorder(new EmptyBorder(5, 2, 5, 2));\n\tinitButtons();\n\tinitMovies();\n}", "path": "src\\laboration3\\Controller.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * Allows selecting a new performance, or CREATING (!!) a performance\n * @param e\n */\n", "func_signal": "public void itemStateChanged(ItemEvent e)", "code": "{\n\tif (e.getStateChange() != ItemEvent.SELECTED) return;\n\tObject type = e.getItem();\n\t\n\tif (type instanceof Performance)\n\t{\n\t\tview.performance((Performance)e.getItem());\n\t}\n\telse if (type instanceof String)\n\t{\n\t\tString time = type.toString();\n\t\t// Default size: 10x10\n\t\tMovie movie = (Movie) movies.getSelectedItem();\n\t\tPerformance p = new Performance(new Salon(8, 8), time);\n\t\tmovie.add(p);\n\t\tperformances.addItem(p);\n\t\tperformances.setSelectedItem(p);\n\t}\n}", "path": "src\\laboration3\\Controller.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * Remember to call performance before you try to paint this panel!\n */\n", "func_signal": "public View()", "code": "{\n    MouseHandler handler = new MouseHandler();\n    addMouseListener(handler);\n    addMouseMotionListener(handler);\n}", "path": "src\\laboration3\\View.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * @return  The virtual canvas to draw inside (both offsets and dimensions)\n */\n", "func_signal": "private Rectangle canvas()", "code": "{\n    Dimension size = new Dimension(seat().width * cols, seat().height * rows);\n    Point offset = new Point((getBounds().width - size.width) / 2,\n                             (getBounds().height - size.height) / 2);\n    return new Rectangle(offset, size);\n}", "path": "src\\laboration3\\View.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * Creates a new salon of the given size.\n * @param rows\t\tthe number of rows\n * @param columns\tthe number of columns\n */\n", "func_signal": "public Salon(int rows, int columns)", "code": "{\n        seats = new Seat[rows][columns];\n        for (int row = 0; row < rows; ++row)\n        {\n            for (int col = 0; col < columns; ++col)\n            {\n                seats[row][col] = new Seat(row, col);\n            }\n        }\n}", "path": "src\\laboration3\\Models\\Salon.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * Fired when the movie is changed.\n * @param e\n */\n", "func_signal": "public void itemStateChanged(ItemEvent e)", "code": "{\n    if (e.getStateChange() == ItemEvent.SELECTED)\n    {\n        Movie movie = (Movie)e.getItem();\n        performances.removeAllItems();\n\n        for (Performance p : movie.performance())\n        {\n            performances.addItem(p);\n        }\n    }\n}", "path": "src\\laboration3\\Main.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * Prints a receipt to STDOUT.\n * @param seat\n */\n", "func_signal": "private void printReceipt(Seat seat)", "code": "{\n\tSystem.out.println(view.performance());\n    System.out.println(\"\\tPlats #\" + (seat.col() + 1) + \" p\u00e5 rad \" + (seat.row() + 1) + \" s\u00e5ld.\");\n}", "path": "src\\laboration3\\Controller.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * @param p\tCoordinates relative to this panel\n * @return  The seat at the given coordinates, or null if no seat was found\n */\n", "func_signal": "private Seat findSeat(Point p)", "code": "{\n    Point base = new Point(p.x - canvas().x, p.y - canvas().y);\n\n    int col = base.x / seat().width;\n    int row = base.y / seat().height;\n\n    return col < cols && row < rows ? performance.salon().seats()[row][col] : null;\n}", "path": "src\\laboration3\\View.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * Deselects all marked seats\n */\n", "func_signal": "public void deselect()", "code": "{\n    selected.clear();\n    repaint();\n}", "path": "src\\laboration3\\View.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * Selects a seat if it is not already selected.\n * @param seat\tthe seat to select\n */\n", "func_signal": "public void select(Seat seat)", "code": "{\n\tif ( ! selected.contains(seat))\n\t{\n\t\tselected.add(seat);\n\t}\n\t\n\trepaint();\n}", "path": "src\\laboration3\\View.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * Paints the performance in a pretty way in the panel.\n * \n * Note: This version assumes a uniform length of rows and columns.\n * @param g\n */\n", "func_signal": "@Override\npublic void paintComponent(Graphics g)", "code": "{\n    // Clear drawing area (needed when performance object changes)\n    g.clearRect(0, 0, getBounds().width, getBounds().height);\n    \n    // ABORT! ABORT!\n    if (performance == null) return;\n\n    Dimension seat   = seat();\n\tSeat[][] seats   = performance.salon().seats();\n    int padding      = 2;\n\t\n    for (int row = 0; row < rows; ++row)\n    {\n        for (int col = 0; col < cols; ++col)\n        {\n            Color status;\n            switch(seats[row][col].status())\n            {\n                case Available: status = Color.GREEN; break;\n                case Booked:    status = Color.YELLOW; break;\n                case Sold:      status = Color.RED; break;\n                default:        status = Color.WHITE;\n            }\n\n            Rectangle rect = new Rectangle(new Point(0, 0), seat);\n            rect.x      = canvas().x + seat.width * col;\n            rect.y      = canvas().y + seat.height * row;\n            rect.width  = seat.width - padding * 2;\n            rect.height = seat.height - padding * 2;\n\n            // Border\n            g.setColor(Color.BLACK);\n            g.fillRect(rect.x\n                      ,rect.y\n                      ,rect.width\n                      ,rect.height);\n\n            // Filling (superficial border)\n            int border = selected.contains(seats[row][col]) ? 2 : 1;\n            g.setColor(status);\n            g.fillRect(rect.x + border\n                      ,rect.y + border\n                      ,rect.width - border * 2\n                      ,rect.height - border * 2);\n\n            // Seat number\n            g.setColor(Color.BLACK);\n            String number = Integer.toString((cols * row) + col);\n            Rectangle2D n = g.getFontMetrics().getStringBounds(number, g);\n            g.drawString(number\n                        ,rect.x + rect.width / 2 - (int)(n.getWidth() / 2)\n                        ,rect.y + rect.height / 2 + (int)(n.getHeight() / 2));\n        }\n    }\n}", "path": "src\\laboration3\\View.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * @return  An example repertoir consisting of two movies with two performances\n *          each.\n */\n", "func_signal": "public static Repertoir Default()", "code": "{\n    ArrayList<Movie> movies = new ArrayList<Movie>();\n    ArrayList<Performance> perfs;\n\n    perfs = new ArrayList<Performance>();\n    perfs.add(new Performance(new Salon(5, 5), \"16:00\"));\n    perfs.add(new Performance(new Salon(12, 10), \"21:30\"));\n    movies.add(new Movie(\"Happy Gilmore\", perfs));\n\n    perfs = new ArrayList<Performance>();\n    perfs.add(new Performance(new Salon(8, 5), \"07:00\"));\n    perfs.add(new Performance(new Salon(12, 10), \"18:00\"));\n        movies.add(new Movie(\"Bollibompa\", perfs));\n\n    return new Repertoir(movies);\n}", "path": "src\\laboration3\\Models\\Repertoir.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * Creates the action buttons.\n */\n", "func_signal": "private void initButtons()", "code": "{\n\tJPanel pnl = new JPanel();\n\tJButton[] buttons = {\n\t\t\tnew JButton(\"St\u00e4ng\"),\n\t\t\tnew JButton(\"Boka\"),\n\t\t\tnew JButton(\"S\u00e4lj\"),\n\t\t\tnew JButton(\"H\u00e4mta\")\n\t};\n\t\n\tfor (JButton button : buttons)\n\t{\n\t\tbutton.addActionListener(this);\n\t\tpnl.add(button);\n\t}\n\t\n\tadd(pnl);\n}", "path": "src\\laboration3\\Controller.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * Adds a new performance to the list of performances.\n */\n", "func_signal": "public void add(Performance p)", "code": "{\n\tperformance.add(p);\n\tCollections.sort(performance);\n}", "path": "src\\laboration3\\Models\\Movie.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * Handles change of performance.\n * @param e\n */\n", "func_signal": "public void itemStateChanged(ItemEvent e)", "code": "{\n    if (e.getStateChange() == ItemEvent.SELECTED)\n    {\n        Performance p = (Performance) e.getItem();\n        view.performance(p);\n    }\n}", "path": "src\\laboration3\\Main.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * @param salon\tthe salon this performance is performed in\n * @param time  the time this performance is performed\n */\n", "func_signal": "public Performance(Salon salon, String time)", "code": "{\n\tthis.salon = salon;\n    this.time = time;\n}", "path": "src\\laboration3\\Models\\Performance.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * @return  Maximum dimensions for any given seat in this panel\n */\n", "func_signal": "private Dimension seat()", "code": "{\n    Dimension seat   = new Dimension(0, 0);\n    seat.height     += getBounds().height / rows;\n    seat.width      += getBounds().width / cols;\n    return seat;\n}", "path": "src\\laboration3\\View.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * Allows selecting a new movie\n * @param e\n */\n", "func_signal": "public void itemStateChanged(ItemEvent e)", "code": "{\n\tif (e.getStateChange() != ItemEvent.SELECTED) return;\n\tObject type = e.getItem();\n\tMovie movie = null;\n\t\n\tif (type instanceof Movie)\n\t{\n\t\tmovie = (Movie)type;\n\t\tperformances.removeAllItems();\n\t\tfor (Performance p : movie.performance())\n\t\t{\n\t\t\tperformances.addItem(p);\n\t\t}\n\t}\n\telse if (type instanceof String)\n\t{\n\t\tmovie = new Movie(type.toString(), new ArrayList<Performance>());\n\t\tmovies.addItem(movie);\n\t\tmovies.setSelectedItem(movie);\n\t}\n}", "path": "src\\laboration3\\Controller.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * Toggles selection of a seat\n * @param seat\tthe seat to toggle\n */\n", "func_signal": "public void toggle(Seat seat)", "code": "{\n\tif (selected.contains(seat))\n\t{\n\t\tdeselect(seat);\n\t}\n\telse\n\t{\n\t\tselect(seat);\n\t}\n\trepaint();\n}", "path": "src\\laboration3\\View.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * Action handler\n */\n", "func_signal": "public void mouseDragged(MouseEvent e)", "code": "{\n\tint row = selected.isEmpty() ? -1 : selected.get(0).row();\n\tSeat seat = findSeat(e.getPoint());\n\t\n\tif (row == -1)\n\t{\n\t\tselect(seat);\n\t}\n\telse if (seat.row() == row)\n\t{\n\t\t// Only select adjacent seats\n\t\tint col = seat.col();\n\t\tfor (Seat s : selected)\n\t\t{\n\t\t\tif (Math.abs(col - s.col()) == 1)\n\t\t\t{\n\t\t\t\tselect(seat);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\laboration3\\View.java", "repo_name": "Burgestrand/Biograf", "stars": 0, "license": "None", "language": "java", "size": 400}
{"docstring": "/**\n * Update item screen position\n * \n * @param newXPos\n * @param centerX\n * @param centerY\n * @param item\n */\n", "func_signal": "private void updateItemScreenPos(int newXPos, int centerX, int centerY,\n\t\tRRCarouselItem item)", "code": "{\n\n\tif (item.virtual_x < mLeftEdgeItem.virtual_x) {\n\t\titem.z = mLeftEdgeItem.z + Math.abs(item.virtual_x);\n\t\titem.scale = mLeftEdgeItem.scale;\n\t\titem.x = mLeftEdgeItem.x\n\t\t\t\t- (int) ((mLeftEdgeItem.virtual_x - item.virtual_x) * item.scale);\n\t\titem.y = centerY;\n\t\titem.w = mLeftEdgeItem.w;\n\t\titem.h = mLeftEdgeItem.h;\n\t\treturn;\n\t} else if (item.virtual_x > mRightEdgeItem.virtual_x) {\n\t\titem.z = mRightEdgeItem.z + Math.abs(item.virtual_x);\n\t\titem.scale = mRightEdgeItem.scale;\n\t\titem.x = mRightEdgeItem.x\n\t\t\t\t+ (int) ((item.virtual_x - mRightEdgeItem.virtual_x) * item.scale);\n\t\titem.y = centerY;\n\t\titem.w = mRightEdgeItem.w;\n\t\titem.h = mRightEdgeItem.h;\n\t\treturn;\n\t}\n\n\tint itemNewX = item.virtual_x - newXPos;\n\titem.z = mHyperbolaA * Math.sqrt(itemNewX * itemNewX + 1) / mHyperbolaB;\n\titem.scale = mFocalLength / (mFocalLength + item.z);\n\titem.x = centerX + (int) ((item.virtual_x - newXPos) * item.scale);\n\titem.y = centerY;\n\titem.w = (int) (this.mItemWidth * item.scale);\n\titem.h = (int) (this.mItemHeight * item.scale);\n}", "path": "src\\com\\jhlee\\rr\\RRCarouselFlowView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/**\n * Motion event\n */\n", "func_signal": "@Override\npublic boolean onTouchEvent(MotionEvent event)", "code": "{\n\tint curX = (int) event.getX();\n\tswitch (event.getAction()) {\n\tcase MotionEvent.ACTION_DOWN:\n\t\tmLastMouseX = curX;\n\t\tmMouseDownX = curX;\n\n\t\t/* Keep mouse down item */\n\t\tmActiveSeqAtMouseDown = getActiveItem().seq;\n\t\t/* Keep mouse down times */\n\t\tmMouseDownMillis = Calendar.getInstance().getTimeInMillis();\n\t\tbreak;\n\tcase MotionEvent.ACTION_MOVE:\n\t\tint offset = mLastMouseX - curX;\n\t\tmoveCameraRel(offset);\n\t\tmLastMouseX = curX;\n\t\tinvalidate();\n\t\tbreak;\n\tcase MotionEvent.ACTION_UP:\n\n\t\tlong mouseUpMillis = Calendar.getInstance().getTimeInMillis();\n\n\t\t/** Align to current active item */\n\t\tRRCarouselItem item = null;\n\t\tint itemSeq = 0;\n\t\tint delta = curX - mMouseDownX;\n\t\tif (Math.abs(delta) < FINGER_CLICK_THRESHOLD) {\n\t\t\t/* Clicked */\n\t\t\titem = this.findUnderDevicePoint(curX);\n\t\t\tif (null == item)\n\t\t\t\titem = getActiveItem();\n\t\t\telse {\n\t\t\t\tif (item == getActiveItem()) {\n\t\t\t\t\t/** Active item is clicked */\n\t\t\t\t\tif (null != mOnActiveItemClickListener) {\n\t\t\t\t\t\tmOnActiveItemClickListener.onClicked(this, item);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t/* Mouse moved over finger click range */\n\t\t\titem = getActiveItem();\n\t\t}\n\n\t\tint absDelta = Math.abs(delta);\n\t\tif (absDelta > MINIMUM_SCROLL_MOVEMENT) {\n\t\t\t/* Mouse movement some amount */\n\t\t\tlong elapsed = mouseUpMillis - mMouseDownMillis;\n\t\t\tif (elapsed > 0 && elapsed <= FLICK_THRESHOLD_MILLIS) {\n\t\t\t\t/* User flicks the screen */\n\t\t\t\tlong speed = absDelta / elapsed;\n\t\t\t\titemSeq = item.seq;\n\t\t\t\t/* 50ms */\n\t\t\t\tint maxMouseMovement = Math.min(this.getWidth(), this\n\t\t\t\t\t\t.getHeight());\n\t\t\t\t/* maxMovement : MAXIMUM_FLICK_ITEMS = absDelta : ? */\n\t\t\t\tint maxScrollItems = MAXIMUM_FLICK_ITEMS * absDelta\n\t\t\t\t\t\t/ maxMouseMovement;\n\t\t\t\tmaxScrollItems = Math.max(1, maxScrollItems);\n\n\t\t\t\t/* maxSpeed : maxItems = speed : ? */\n\t\t\t\t/* Minimum 1 item is moved by flick */\n\t\t\t\tlong itemOffset = Math.max(1, MAXIMUM_FLICK_ITEMS * speed\n\t\t\t\t\t\t/ maxScrollItems);\n\t\t\t\tif (delta < 0)\n\t\t\t\t\titemSeq += itemOffset;\n\t\t\t\telse\n\t\t\t\t\titemSeq -= itemOffset;\n\t\t\t} else {\n\t\t\t\t/* Just scroll by user */\n\t\t\t\tif (item.seq == mActiveSeqAtMouseDown) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Actually user drags screen over finger threshold. But\n\t\t\t\t\t * still same item covers most wide area on screen. We\n\t\t\t\t\t * consider user explicitly want to scroll items.\n\t\t\t\t\t */\n\t\t\t\t\tif (delta < 0) {\n\t\t\t\t\t\t/* Drag to left */\n\t\t\t\t\t\titemSeq = item.seq + 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\titemSeq = item.seq - 1;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\titemSeq = item.seq;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\titemSeq = item.seq;\n\t\t}\n\n\t\titemSeq = Math.max(0, itemSeq);\n\t\titemSeq = Math.min(this.mItemCnt - 1, itemSeq);\n\n\t\tanimationTo(itemSeq * mItemWidth);\n\t\tinvalidate();\n\t\tbreak;\n\t}\n\treturn true;\n}", "path": "src\\com\\jhlee\\rr\\RRCarouselFlowView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/**\n * Update both edge poitns\n * \n * @param newXPos\n */\n", "func_signal": "private void updateBothEdgePointsPos(int newXPos)", "code": "{\n\tmLeftEdgeItem.virtual_x = newXPos - (int) (mItemWidth * 3.5);\n\tmRightEdgeItem.virtual_x = newXPos + (int) (mItemHeight * 3.5);\n\n\tint centerX = this.getWidth() / 2;\n\tint centerY = this.getHeight() / 2;\n\tupdateItemScreenPos(newXPos, centerX, centerY, mLeftEdgeItem);\n\tupdateItemScreenPos(newXPos, centerX, centerY, mRightEdgeItem);\n\n}", "path": "src\\com\\jhlee\\rr\\RRCarouselFlowView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/**\n * Update text\n */\n", "func_signal": "public void setText(String text)", "code": "{\n\tmText = text;\n\t\n\t/** Update bounds rectangle */\n\tif (mPaint != null) {\n\t\tmPaint.getTextBounds(mText, 0, mText.length(),\n\t\t\t\tmBoundsRect);\n\t}\n\tinvalidate();\n}", "path": "src\\com\\jhlee\\rr\\RRTextView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/** Draw carousel view */\n", "func_signal": "@Override\nprotected void onDraw(Canvas canvas)", "code": "{\n\n\tcanvas.drawColor(Color.LTGRAY);\n\n\t/**\n\t * If there is custom drawer, then use it.\n\t */\n\tRRCarouselItem activeItem = this.getActiveItem();\n\tif (null != mOnCustomDrawListener) {\n\t\tfor (RRCarouselItem item : mSortedItems) {\n\t\t\tmOnCustomDrawListener.onDraw(this, canvas, item,\n\t\t\t\t\titem == activeItem);\n\t\t}\n\t\treturn;\n\t}\n\n\t/** Default drawing */\n\tmPaint.setColor(Color.WHITE);\n\tRect r = new Rect();\n\tfor (RRCarouselItem item : mSortedItems) {\n\t\tr.left = item.x - item.w / 2 + 10;\n\t\tr.top = item.y - item.h / 2 + 10;\n\t\tr.right = r.left + item.w - 10;\n\t\tr.bottom = r.top + item.h - 10;\n\t\tmPaint.setColor(item.color);\n\t\tcanvas.drawRect(r, mPaint);\n\t}\n}", "path": "src\\com\\jhlee\\rr\\RRCarouselFlowView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/**\n * Draw text\n */\n", "func_signal": "@Override\nprotected void onDraw(Canvas canvas)", "code": "{\n\tif (mChecked)\n\t\tmPaint.setColor(COLOR_CHECKED);\n\telse\n\t\tmPaint.setColor(COLOR_NORMAL);\n\n\tmPaint.setShadowLayer(2.0f, 0, 0, Color.BLACK);\n\n\tint vw = getWidth();\n\tint vh = getHeight();\n\tmDrawingTmpRect.set(PADDING_HORZ, PADDING_VERT, vw - PADDING_HORZ, vh\n\t\t\t- PADDING_VERT);\n\tmPaint.setStyle(Paint.Style.FILL_AND_STROKE);\n\tmPaint.setStrokeWidth(3.0f);\n\tcanvas.drawRoundRect(mDrawingTmpRect, 10.0f, 10.0f, mPaint);\n\n\tmPaint.setStyle(Paint.Style.FILL);\n\n\tmPaint.setColor(Color.WHITE);\n\tcanvas.drawText(mText, vw / 2 - mBounds.width() / 2, vh / 2\n\t\t\t+ mBounds.height() / 3, mPaint);\n\tmPaint.setShadowLayer(0.0f, 0, 0, Color.BLACK);\n\n\t/*\n\t * Draw delete mark.\n\t */\n\tif (mShowDeleteMark) {\n\t\tcanvas.drawBitmap(mDeleteBmp, vw - mDeleteBmp.getWidth() - 2, vh\n\t\t\t\t/ 2 - mDeleteBmp.getHeight() / 2, mPaint);\n\t}\n}", "path": "src\\com\\jhlee\\rr\\RRTagTextView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/**\n * Initialize various resource objects\n */\n", "func_signal": "private void initializeInternal(AttributeSet attrs)", "code": "{\n\tmPaint = new Paint();\n\tmPaint.setAntiAlias(true);\n\tmPaint.setDither(true);\n\tmPaint.setColor(Color.WHITE);\n\tmPaint.setStyle(Paint.Style.FILL_AND_STROKE);\n\tmPaint.setStrokeJoin(Paint.Join.ROUND);\n\tmPaint.setStrokeCap(Paint.Cap.ROUND);\n\tmPaint.setStrokeWidth(1);\n\n\tmFont = Typeface.create(Typeface.MONOSPACE, Typeface.BOLD_ITALIC);\n\tmPaint.setTypeface(mFont);\n\n\t/** Determine text size with DPI value */\n\tif (null != attrs) {\n\t\tmTextSize = attrs.getAttributeIntValue(null, \"text_size_in_160dpi\",\n\t\t\t\tDEFAULT_TEXT_SIZE_IN_160_DPI);\n\t}\n\t/* Change DPI to pixel */\n\tDisplayMetrics dm = this.getResources().getDisplayMetrics();\n\tint textSize = (int) (dm.density * mTextSize);\n\tmPaint.setTextSize(textSize);\n\t\n\t/* Set default text */\n\tthis.setText(\" \");\n}", "path": "src\\com\\jhlee\\rr\\RRTextView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/** Animation */\n", "func_signal": "private void animationTo(int targetCamXPos)", "code": "{\n\tmAnimationHandler.removeCallbacks(mCameraMovingTask);\n\tmTargetCamXPos = targetCamXPos;\n\tmAnimationHandler.postDelayed(mCameraMovingTask, 50);\n}", "path": "src\\com\\jhlee\\rr\\RRCarouselFlowView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/**\n * Return active item\n * \n * @return\n */\n", "func_signal": "public RRCarouselItem getActiveItem()", "code": "{\n\tif (mSortedItems.isEmpty())\n\t\treturn null;\n\n\treturn mSortedItems.get(mSortedItems.size() - 1);\n}", "path": "src\\com\\jhlee\\rr\\RRCarouselFlowView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/**\n * Move camera\n * \n * @param newXPos\n *            x position in logical coordinate\n */\n", "func_signal": "public void moveCamera(int newXPos)", "code": "{\n\tmCameraXPos = newXPos;\n\tint offset = 0;\n\n\t/** View center pos */\n\tint screenCenterX = this.getWidth() >> 1;\n\tint screenCenterY = this.getHeight() >> 1;\n\n\t/** Update each edge poitns. */\n\tupdateBothEdgePointsPos(newXPos);\n\n\t/** Update all carousel items */\n\tfor (RRCarouselItem item : mItems) {\n\n\t\t/** Update screen position */\n\t\tupdateItemScreenPos(newXPos, screenCenterX, screenCenterY, item);\n\t}\n\n\t/** Sort carousel items by its z-order */\n\tmSortedItems.clear();\n\tmSortedItems.addAll(mItems);\n\tCollections.sort(mSortedItems, new RRCarouselItemComparator());\n}", "path": "src\\com\\jhlee\\rr\\RRCarouselFlowView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/**\n * Touch event\n */\n", "func_signal": "@Override\npublic boolean onTouchEvent(MotionEvent e)", "code": "{\n\tint x = (int) e.getX();\n\tint y = (int) e.getY();\n\n\tswitch (e.getAction()) {\n\tcase MotionEvent.ACTION_DOWN:\n\t\tmMouseDown = true;\n\t\tmMouseMovementInControl = true;\n\t\tinvalidate();\n\t\tbreak;\n\tcase MotionEvent.ACTION_MOVE:\n\t\tif (mMouseDown == true) {\n\t\t\tif (x < 0 || x > this.getWidth() || y < 0\n\t\t\t\t\t|| y > this.getHeight()) {\n\t\t\t\tmMouseMovementInControl = false;\n\t\t\t}\n\t\t}\n\t\tinvalidate();\n\t\tbreak;\n\tcase MotionEvent.ACTION_UP:\n\t\tif(mMouseDown == true) {\n\t\t\tif(mMouseMovementInControl == true) {\n\t\t\t\t/* User has clicked the control */\n\t\t\t\tif(mClickListener != null)\n\t\t\t\t\tmClickListener.onClick(this);\n\t\t\t}\n\t\t}\n\t\tmMouseDown = false;\n\t\tmMouseMovementInControl = false;\n\t\tinvalidate();\n\t\tbreak;\n\t}\n\treturn true;\n}", "path": "src\\com\\jhlee\\rr\\RRTextView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/** CTOR */\n", "func_signal": "public RRTextView(Context context, AttributeSet attrs, int defStyle)", "code": "{\n\tsuper(context, attrs, defStyle);\n\tinitializeInternal(attrs);\n}", "path": "src\\com\\jhlee\\rr\\RRTextView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/**\n * Draw Vertical center.\n */\n", "func_signal": "@Override\nprotected void onDraw(Canvas canvas)", "code": "{\n\tint w = this.getWidth();\n\tint h = this.getHeight();\n\n\tDisplayMetrics dm = this.getResources().getDisplayMetrics();\n\tint horzPadding = (int) dm.density * 10;\n\n\tint boundsWidth = mBoundsRect.width();\n\tint boundsHeight = mBoundsRect.height();\n\t\n\tint sx = 0;\n\tswitch(mPaint.getTextAlign()) {\n\tcase RIGHT:\n\t\tsx = w - horzPadding;\n\t\tbreak;\n\tcase CENTER:\n\t\tsx = w / 2;\n\t\tbreak;\n\tdefault:\n\t\tsx = horzPadding;\n\t\tbreak;\n\t}\n\tint sy = (h - boundsHeight) >> 1;\n\tif(mMouseDown == true &&\n\t\t\tmMouseMovementInControl == true) {\n\t\tmPaint.setColor(Color.rgb(0, 100, 0));\n\t} else {\n\t\tmPaint.setColor(Color.WHITE);\n\t}\n\tcanvas.drawText(mText, sx, sy + boundsHeight, mPaint);\n\n\t/** For debugging */\n\tcanvas.drawLine(sx, sy + boundsHeight, sx + boundsWidth, sy\n\t\t\t+ boundsHeight, mPaint);\n}", "path": "src\\com\\jhlee\\rr\\RRTextView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/**\n * Measure text size\n */\n", "func_signal": "@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n\tmPaint.getTextBounds(mText, 0, mText.length(), mBounds);\n\t/* Use padding value */\n\tthis.setMeasuredDimension(mBounds.width() + PADDING_HORZ * 2\n\t\t\t+ PADDING_TEXT_HORZ * 2, mBounds.height() + PADDING_VERT * 2\n\t\t\t+ PADDING_TEXT_VERT * 2);\n}", "path": "src\\com\\jhlee\\rr\\RRTagTextView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/**\n * Initialize view & items\n * \n * @param itemCount\n *            Total item count\n * @param itemWidth\n *            Item width\n * @param itemHeight\n *            Item height\n * @param focalLength\n * @param hyperbola_A\n * @param hyperbola_B\n */\n", "func_signal": "public void initialize(int itemCount, int itemWidth, int itemHeight,\n\t\tint focalLength, int hyperbola_A, int hyperbola_B)", "code": "{\n\tmItemCnt = itemCount;\n\tmItemWidth = itemWidth;\n\tmItemHeight = itemHeight;\n\tmFocalLength = focalLength;\n\tmHyperbolaA = hyperbola_A;\n\tmHyperbolaB = hyperbola_B;\n\n\tmLeftEdgeItem = new RRCarouselItem();\n\tmRightEdgeItem = new RRCarouselItem();\n\n\tmItems = new ArrayList<RRCarouselItem>();\n\tmSortedItems = new ArrayList<RRCarouselItem>();\n\n\tint virtual_offset = 0;\n\tRRCarouselItem item;\n\tfor (int i = 0; i < this.mItemCnt; ++i) {\n\t\titem = new RRCarouselItem();\n\t\titem.seq = i;\n\t\titem.virtual_x = virtual_offset;\n\n\t\tint r = ((int) Math.abs(Math.random() * 256)) % 255;\n\t\tint g = ((int) Math.abs(Math.random() * 256)) % 255;\n\t\tint b = ((int) Math.abs(Math.random() * 256)) % 255;\n\t\titem.color = 0xFF000000 | r << 16 | g << 8 | b;\n\t\tmItems.add(item);\n\n\t\tvirtual_offset += mItemWidth;\n\t}\n\n\tthis.moveCamera(0);\n}", "path": "src\\com\\jhlee\\rr\\RRCarouselFlowView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/**\n * View size is changed\n */\n", "func_signal": "@Override\nprotected void onSizeChanged(int w, int h, int oldw, int oldh)", "code": "{\n\tsuper.onSizeChanged(w, h, oldw, oldh);\n\n\tif (w < h) {\n\t\tmItemHeight = mItemWidth = w * 2 / 3;\n\t} else {\n\t\tmItemHeight = mItemWidth = h * 2 / 3;\n\t}\n\n\t/** Get active item */\n\tRRCarouselItem activeItem = getActiveItem();\n\n\t/** Update each item's virtual position */\n\tfor (RRCarouselItem item : this.mItems) {\n\t\titem.virtual_x = item.seq * mItemWidth;\n\t}\n\n\tif (activeItem != null)\n\t\tthis.moveCameraRel(activeItem.x);\n}", "path": "src\\com\\jhlee\\rr\\RRCarouselFlowView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/**\n * Find under device point Reverse iterator is more effective method to find\n * item\n * */\n", "func_signal": "private RRCarouselItem findUnderDevicePoint(int devX)", "code": "{\n\tRRCarouselItem foundItem = null;\n\tfor (RRCarouselItem item : mSortedItems) {\n\t\tif ((item.x - item.w / 2 <= devX)\n\t\t\t\t&& (devX <= (item.x + item.w / 2)))\n\t\t\tfoundItem = item;\n\t}\n\treturn foundItem;\n}", "path": "src\\com\\jhlee\\rr\\RRCarouselFlowView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/**\n * Initialize paint object and its properties\n */\n", "func_signal": "private void initializePaint()", "code": "{\n\tmPaint = new Paint();\n\tmPaint.setAntiAlias(true);\n\tmPaint.setDither(true);\n\tmPaint.setColor(0xFFFF0000);\n\tmPaint.setStyle(Paint.Style.FILL_AND_STROKE);\n\tmPaint.setStrokeJoin(Paint.Join.ROUND);\n\tmPaint.setStrokeCap(Paint.Cap.ROUND);\n\tmPaint.setStrokeWidth(1);\n\n}", "path": "src\\com\\jhlee\\rr\\RRCarouselFlowView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/** Measure view size */\n", "func_signal": "@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n\tDisplayMetrics dm = this.getResources().getDisplayMetrics();\n\n\t/**\n\t * Horizontal padding: 10 dpi Vertical padding: 10 dpi\n\t */\n\tint horzPadding = (int) dm.density * 10;\n\tint vertPadding = (int) dm.density * 10;\n\tint minimumW = mBoundsRect.width() + horzPadding + horzPadding;\n\tint minimumH = mBoundsRect.height() + vertPadding + vertPadding;\n\tthis.setMinimumWidth(minimumW);\n\tthis.setMinimumHeight(minimumH);\n\n\t\n\tsuper.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\t/*this.setMeasuredDimension(this.getMeasuredWidth(), minimumH);*/\n\tthis.setMeasuredDimension(minimumW, minimumH);\n}", "path": "src\\com\\jhlee\\rr\\RRTextView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/**\n * CTOR\n * \n * @param ctx\n *            Android context\n */\n", "func_signal": "public RRCarouselFlowView(Context ctx)", "code": "{\n\tsuper(ctx);\n\tinitializePaint();\n}", "path": "src\\com\\jhlee\\rr\\RRCarouselFlowView.java", "repo_name": "popopome/rrmobile", "stars": 1, "license": "None", "language": "java", "size": 1220}
{"docstring": "/**\n * This is to construct a where clause that define the constraint for\n * mapping a status column to a list of status enums.\n * \n * @param field\n *            the bean field for the constraint\n * @param variablePrefix\n *            the replaceable prefix to be used in the query\n * @param listSize\n *            the size of the constraint list\n *            <ul>\n *            <li>For the empty list, an empty clause will be returned.\n *            <li>1 element, \"field = ?\" will be return.\n *            <li>2 or more elements: \"field in (?, ? ...)\" will be\n *            returned.\n *            </ul>\n * @return the clause that can be appended to a where clause. Example: field\n *         = \"status\" variablePrefix = \"stat\" listSize = 3 Return: status in\n *         (:stat0, :stat1, :stat2)\n */\n", "func_signal": "public static String appendListConstraint(String field, String variablePrefix, int listSize)", "code": "{\n\tStringBuffer buf = new StringBuffer();\n\tif (listSize > 0) {\n\t\tif (listSize == 1) {\n\t\t\tbuf.append(field).append(\" = :\").append(variablePrefix).append('0');\n\t\t}\n\t\telse {\n\t\t\tbuf.append(field).append(\" in (\");\n\t\t\tfor (int i = 0; i < listSize; i++) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tbuf.append(',');\n\t\t\t\t}\n\t\t\t\tbuf.append(':').append(variablePrefix).append(i);\n\t\t\t}\n\t\t\tbuf.append(')');\n\t\t}\n\t}\n\treturn buf.toString();\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\dao\\spring\\BaseSpringDao.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/*\n * Find a OneStop by looking at its detaisl\n */\n", "func_signal": "public OneStop findByDetails(final String pBody)", "code": "{\n\ttry {\n\t\tOneStop lResult = (OneStop) getHibernateTemplate().execute(new HibernateCallback() {\n\t\t\tpublic Object doInHibernate(Session pSession)\n\t\t\tthrows HibernateException, SQLException {\n\t\t\t\t\n\t\t\t\tList<OneStop> lUpcs = (List<OneStop>)pSession.createQuery(\n\t\t\t\t\t\t\"select detail.oneStop from OneStopDetail detail where\" +\n\t\t\t\t\t\t\" detail.body = :body\")\n\t\t\t\t\t\t.setString(\"body\", pBody)\n\t\t\t\t\t\t.list();\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSet<OneStop> lSet = new HashSet<OneStop>();\n\t\t\t\tlSet.addAll(lUpcs);\n\t\t\t\t\n\t\t\t\tif (1 < lSet.size()) {\n\t\t\t\t\tif (LOG.isDebugEnabled()) {\n\t\t\t\t\t\tLOG.debug(\"non unique result found\");\n\t\t\t\t\t}\n\t\t\t\t\tOneStop lUpc = lSet.iterator().next();\n\t\t\t\t\treturn lUpc;\n\t\t\t\t\t\n\t\t\t\t} else if (lSet.isEmpty()) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\tOneStop lUpc = lSet.iterator().next();\n\t\t\t\t\treturn lUpc;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t\t\n\t\tif (null != lResult) {\n    \t\tif (LOG.isDebugEnabled()) {\n    \t\t\tLOG.debug(\"findByDetails successful\");\n    \t\t}\n\t\t}\n\n\t\treturn lResult;\n\n\t} catch (RuntimeException lRe) {\n\t\tLOG.error(\"findByDetails failed\", lRe);\n\t\tthrow lRe;\n\t}\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\dao\\spring\\OneStopDaoImpl.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Get the count of number of entries in fl_onestop_promotion_membership\n * table based on OneStopId and PromotionId.\n * @return int\n */\n", "func_signal": "public int findOneStopPromotionByIds(final Integer pOneStopId, final Integer pPromotionId)", "code": "{\n\t\t\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"finding OneStopPromotion by OneStopId and PromotionId\");\n\t\t}\n\t\tInteger count = new Integer(0);\n\t\ttry {\n\t\t\tcount =  (Integer) getHibernateTemplate().execute(new HibernateCallback() {\n\t\t\tpublic Object doInHibernate(Session pSession)\n\t\t\tthrows HibernateException, SQLException {\n\t\t\t\t\n\t\t\t\t//forming queries\n\t\t\t\tString lQueryforCount = \"select count(1) as count from fl_onestop_promotion_membership this where\" +\n\t\t\t\t\t\t\t\t\t\t\t\" this.onestop_id = \"+pOneStopId+\" and this.promotion_id = \"+pPromotionId;\t\t\t\n\t\t\t\t\n\t\t\t\t//execute the query for the entity count\n\t\t\t\tQuery lCountQuery = pSession.createSQLQuery(lQueryforCount).addScalar(\"count\", Hibernate.INTEGER);\n\t\t\t\t\n\t\t\t\tInteger count =  (Integer)lCountQuery.uniqueResult();\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (LOG.isDebugEnabled()) {\n\t    \t\t\tLOG.debug(\"Successfully found OneStopPromotion by Ids. Count [\"+(count == null ? 0 : count.intValue())+\"]\");\n\t    \t\t}\n\t\t\t\tif(count == null)\n\t\t\t\t\treturn 0;\n\t\t\t\telse\n\t\t\t\t\treturn count.intValue();\n\t\t\t\t}\n\t\t\t});\n\t\t\n\t\t\treturn count.intValue();\n\t\t} catch (RuntimeException e) {\n\t\t\tLOG.error(\"finding OneStopPromotion failed\",  e);\n\t\tthrow  e;\n\t\t}\n\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\dao\\spring\\OneStopDaoImpl.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/*\n * if multiple OneStop have the same code, then narrow the search by looking in the details\n */\n", "func_signal": "public OneStop findByDetails(final Collection<Integer> pOneStopUpcs, final String pBody, final String pHeader)", "code": "{\n\ttry {\n\t\tOneStop lResult = (OneStop) getHibernateTemplate().execute(new HibernateCallback() {\n\t\t\tpublic Object doInHibernate(Session pSession)\n\t\t\tthrows HibernateException, SQLException {\n\t\t\t\t\n\t\t\t\tList<OneStop> lUpcs = (List<OneStop>)pSession.createQuery(\n\t\t\t\t\t\t\"select detail.oneStop from OneStopDetail detail where\" +\n\t\t\t\t\t\t\" detail.oneStop.id in (:ids) and\" +\n\t\t\t\t\t\t\" detail.header = :header and\" +\n\t\t\t\t\t\t\" detail.body = :body\")\n\t\t\t\t\t\t.setString(\"header\", pHeader)\n\t\t\t\t\t\t.setString(\"body\", pBody)\n\t\t\t\t\t\t.setParameterList(\"ids\", pOneStopUpcs)\n\t\t\t\t\t\t.list();\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSet<OneStop> lSet = new HashSet<OneStop>();\n\t\t\t\tlSet.addAll(lUpcs);\n\t\t\t\t\n\t\t\t\tif (1 < lSet.size()) {\n\t\t\t\t\tif (LOG.isDebugEnabled()) {\n\t\t\t\t\t\tLOG.debug(\"non unique result found\");\n\t\t\t\t\t}\n\t\t\t\t\tOneStop lUpc = lSet.iterator().next();\n\t\t\t\t\treturn lUpc;\n\t\t\t\t\t\n\t\t\t\t} else if (lSet.isEmpty()) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\tOneStop lUpc = lSet.iterator().next();\n\t\t\t\t\treturn lUpc;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t\t\n\t\tif (null != lResult) {\n    \t\tif (LOG.isDebugEnabled()) {\n    \t\t\tLOG.debug(\"findByDetails successful\");\n    \t\t}\n\t\t}\n\n\t\treturn lResult;\n\n\t} catch (RuntimeException lRe) {\n\t\tLOG.error(\"findByDetails failed\", lRe);\n\t\tthrow lRe;\n\t}\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\dao\\spring\\OneStopDaoImpl.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "//Override equals and hashCode\n", "func_signal": "@Override\npublic boolean equals(Object pObject)", "code": "{\n\tif (this == pObject) {\n\t\treturn true;\n\t}\n\n\tif (m_upc == null || m_oneStop == null) {\n\t\treturn false;\n\t}\n\n\tif ( !(pObject instanceof OneStopUpc) ) {\n\t\treturn false;\n\t}\n\n\tfinal OneStopUpc lObject = (OneStopUpc) pObject;\n\n\treturn this.m_upc.equals(lObject.getUpc()) && this.m_oneStop.equals(lObject.getOneStop());\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\domain\\OneStopUpc.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/** full constructor */\n", "func_signal": "public Ingredient(Integer pId, String pDescription, IngredientItem pIngredientItem, String pCategory, String pReadableDescription,\n\t\tSet<UpcIngredient> pUpcIngredients, Date pCreated, Date pLastUpdate)", "code": "{\n\n\tingredientId = pId;\n\tm_description = pDescription;\n\tm_category = pCategory;\n\tm_readableDescription = pReadableDescription;\n\tm_ingredientItem = pIngredientItem;\n\tm_created = pCreated;\n\tm_lastUpdate = pLastUpdate;\n\tm_upcIngredients = pUpcIngredients;\n\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\domain\\Ingredient.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Map the list of specials into the OneStops\n * \n * @param pSpecials\n * @param pResult\n * @return\n */\n", "func_signal": "public OneStopMappingResult mapPromotionsToOneStops(List<Special> pSpecials)", "code": "{\n\n\tMap<m_counts, Integer> lCounts = new HashMap<m_counts, Integer>();\n\tlCounts.put(m_counts.updated, 0);\n\tlCounts.put(m_counts.newonestops, 0);\n\tlCounts.put(m_counts.mapped, 0);\n\n\tSet<OneStop> lOneStops = new HashSet<OneStop>();\n\tSet<String> lUpcs = new HashSet<String>();\n\n\tfor (Special lSpecial : pSpecials) {\n\t\ttry {\n\t\t\tif (null == lSpecial.getPromotionId()) {\n\t\t\t\tLOG.info(\"special has no id, not saved properly \" + lSpecial.getCode() + \":\" + lSpecial.getDescription());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmapSpecial(lSpecial, lOneStops, lUpcs, lCounts);\n\t\t}catch(Exception ex) {\n\t\t\tLOG.warn(\"error occurred while mapPromotionsToOneStops. promotionId: \"+lSpecial.getPromotionId());\n\t\t\tif(LOG.isDebugEnabled()){\n\t\t\t\tLOG.debug(\"error occurred\", ex);\n\t\t\t}\n\t\t}\n\t}\n\n\tint lUpdatedCount = lCounts.get(m_counts.updated);\n\tint lNewCount = lCounts.get(m_counts.newonestops);\n\tint lMappedCount = lCounts.get(m_counts.mapped);\n\n\tOneStopMappingResult lResult = new OneStopMappingResult(lNewCount, lUpdatedCount, lMappedCount, lOneStops, lUpcs);\n\tLOG.debug(\"Successfully created: \" + lNewCount  + \" and updated: \" + lUpdatedCount + \" OneStops\");\n\n\treturn lResult;\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\business\\PromotionToOneStopMapper.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "//Helper meth to handle the Ingredients.\n", "func_signal": "public void addIngredient(Ingredient pIngredient)", "code": "{\n\tif (null == pIngredient) {\n\t\treturn;\n\t}\n\tif(getIngredients() == null) {\n\t\tsetIngredients(new HashSet<Ingredient>());\n\t}\n\tgetIngredients().add(pIngredient);\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\domain\\UpcIngredient.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Get the OneStop based on imageName.\n */\n", "func_signal": "public OneStop findOneStopByImageName(final String pOneStopImage)", "code": "{\n\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"finding OneStop by ImageName [\"+(pOneStopImage == null ? \"NA\" : pOneStopImage)+\"]\");\n\t\t}\n\t\ttry {\n\t\t\tList<OneStop> lOneStops = (List<OneStop>) getHibernateTemplate().execute(new HibernateCallback() {\n\t\t\t\tpublic Object doInHibernate(Session pSession)\n\t\t\t\tthrows HibernateException, SQLException {\n\t\t\t\t\treturn pSession.createQuery(\n\t\t\t\t\t\t\t\"select this from OneStop as this where this.latestImage = :pImage\" +\n\t\t\t\t\t\t\t\t\" and this.status='ACTIVE' \")\n\t\t\t\t\t.setString(\"pImage\", pOneStopImage)\n\t\t\t\t\t.list();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (null != lOneStops) {\n\t    \t\tif (LOG.isDebugEnabled()) {\n\t    \t\t\tLOG.debug(\"finding OneStop by ImageName successful. Numbers of finding [\"+lOneStops.size()+\"]\");\n\t    \t\t}\n\t\t\t}\n\t\t\tif(lOneStops == null || lOneStops.isEmpty())\n\t\t\t\treturn null;\n\t\t\telse\n\t\t\t\treturn lOneStops.get(0);\n\n\t\t} catch (RuntimeException lRe) {\n\t\t\tLOG.error(\"Error finding OneStop by ImageName\", lRe);\n\t\t\tthrow lRe;\n\t\t}\n\n }", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\dao\\spring\\OneStopDaoImpl.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/** full constructor */\n", "func_signal": "public RecipeIngredient(Integer recipeIngredientId,\n\t\tIngredient pIngredient, String type, String customerId, String amount, String typePlural,\n\t\tString quantityNo, Integer lineNumber, String description,\n\t\tDate lastUpdate, Date created)", "code": "{\n\tthis.recipeIngredientId = recipeIngredientId;\n\tthis.type = type;\n\tthis.m_ingredient = pIngredient;\n\tthis.customerId = customerId;\n\tthis.amount = amount;\n\tthis.typePlural = typePlural;\n\tthis.quantityNo = quantityNo;\n\tthis.lineNumber = lineNumber;\n\tthis.description = description;\n\tthis.lastUpdate = lastUpdate;\n\tthis.created = created;\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\domain\\RecipeIngredient.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Get the count of number of entries in fl_onestop_upc\n * table based on OneStopId and upccode\n * @return int\n */\n", "func_signal": "public int findOneStopUPCByIds(final Integer pOneStopId, final String pUPCCode)", "code": "{\n\t\t\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"finding OneStopUPC by OneStopId and UPCCode\");\n\t\t}\n\t\tInteger count = new Integer(0);\n\t\ttry {\n\t\t\tcount =  (Integer) getHibernateTemplate().execute(new HibernateCallback() {\n\t\t\tpublic Object doInHibernate(Session pSession)\n\t\t\tthrows HibernateException, SQLException {\n\t\t\t\t\n\t\t\t\t//forming queries\n\t\t\t\tString lQueryforCount = \"select count(1) as count from fl_onestop_upc this where\" +\n\t\t\t\t\t\t\t\t\t\t\t\" this.onestop_id = \"+pOneStopId+\" and this.upc = \"+pUPCCode;\t\t\t\n\t\t\t\t\n\t\t\t\t//execute the query for the entity count\n\t\t\t\tQuery lCountQuery = pSession.createSQLQuery(lQueryforCount).addScalar(\"count\", Hibernate.INTEGER);\n\t\t\t\t\n\t\t\t\tInteger count =  (Integer)lCountQuery.uniqueResult();\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (LOG.isDebugEnabled()) {\n\t    \t\t\tLOG.debug(\"Successfully found OneStopUPC by Ids. Count [\"+(count == null ? 0 : count.intValue())+\"]\");\n\t    \t\t}\n\t\t\t\tif(count == null)\n\t\t\t\t\treturn 0;\n\t\t\t\telse\n\t\t\t\t\treturn count.intValue();\n\t\t\t\t}\n\t\t\t});\n\t\t\n\t\t\treturn count.intValue();\n\t\t} catch (RuntimeException e) {\n\t\t\tLOG.error(\"finding OneStopUPC failed\",  e);\n\t\tthrow  e;\n\t\t}\n\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\dao\\spring\\OneStopDaoImpl.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "//Override equals and hashCode\n", "func_signal": "@Override\npublic boolean equals(Object pObject)", "code": "{\n\tif (this == pObject) {\n\t\treturn true;\n\t}\n\n\tif (m_promotion == null || m_ingredientItem == null) {\n\t\treturn false;\n\t}\n\n\tif ( !(pObject instanceof IngredientItemPromotion) ) {\n\t\treturn false;\n\t}\n\n\tfinal IngredientItemPromotion lObject = (IngredientItemPromotion) pObject;\n\n\treturn this.m_promotion.equals(lObject.getPromotion()) && this.m_ingredientItem.equals(lObject.getIngredientItem());\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\domain\\IngredientItemPromotion.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/*\n * Build the quantity and unit values.  Stores the original\n * values but also converts to the base unit for the given type.\n * \n * i.e if given lbs will convert to grams and update the quantity.\n * \n * \n */\n", "func_signal": "public Measure(String pQty, String pUnit,\n\t\tFraction pParsedQuantity, Unit pParsedUnit,\n\t\tdouble pNormalizedQuantity, Unit pNormalizedUnit) throws ApplicationException", "code": "{\n\tm_baseQty = pQty;\n\tm_baseUnit = pUnit;\n\tm_quantity = pParsedQuantity;\n\tm_unit = pParsedUnit;\n\tm_normalizedUnit = pNormalizedUnit;\n\tm_normalizedQuantity = pNormalizedQuantity;\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\domain\\Measure.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/** minimal constructor */\n", "func_signal": "public RecipeIngredient(Integer recipeIngredientId,\n\t\tString type, Date lastUpdate, Date created)", "code": "{\n\tthis.recipeIngredientId = recipeIngredientId;\n\tthis.type = type;\n\tthis.lastUpdate = lastUpdate;\n\tthis.created = created;\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\domain\\RecipeIngredient.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "//Override equals and hashCode\n", "func_signal": "@Override\npublic boolean equals(Object pObject)", "code": "{\n\tif (this == pObject) {\n\t\treturn true;\n\t}\n\n\tif (m_promotion == null || m_oneStop == null) {\n\t\treturn false;\n\t}\n\n\tif ( !(pObject instanceof OneStopPromotionMembership) ) {\n\t\treturn false;\n\t}\n\n\tfinal OneStopPromotionMembership lObject = (OneStopPromotionMembership) pObject;\n\n\treturn this.m_oneStop.equals(lObject.getOneStop()) && this.m_promotion.equals(lObject.getPromotion());\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\domain\\OneStopPromotionMembership.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Apply the given name parameter to the given Query object.\n * \n * @param queryObject\n *            the Query object\n * @param paramName\n *            the name of the parameter\n * @param value\n *            the value of the parameter\n * @throws HibernateException\n *             if thrown by the Query object\n */\n", "func_signal": "protected void applyNamedParameterToQuery(Query pQueryObject, String pParamName, Object pValue)\n\t\tthrows HibernateException", "code": "{\n\n\tif (pValue instanceof Collection) {\n\t\tpQueryObject.setParameterList(pParamName, (Collection) pValue);\n\t}\n\telse if (pValue instanceof Object[]) {\n\t\tpQueryObject.setParameterList(pParamName, (Object[]) pValue);\n\t}\n\telse {\n\t\tpQueryObject.setParameter(pParamName, pValue);\n\t}\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\dao\\spring\\BaseSpringDao.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "//Helper meth to handle the IngredientItemPromotions.\n", "func_signal": "public void addIngredientPromotion(IngredientItemPromotion pIngredientItemPromotion)", "code": "{\n\tif (null == pIngredientItemPromotion) {\n\t\treturn;\n\t}\n\n\tif (null == getIngredientPromotions()) {\n\t\tsetIngredientPromotions(new HashSet<IngredientItemPromotion>());\n\t}\n\n\tgetIngredientPromotions().add(pIngredientItemPromotion);\n\tpIngredientItemPromotion.setPromotion(this);\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\domain\\Promotion.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "//Helper meth to handle the UpcIngredients.\n", "func_signal": "public void addUpcIngredients(Collection<UPCItems> pUpcIngredients)", "code": "{\n\tif (null == pUpcIngredients) {\n\t\treturn;\n\t}\n\tgetUpcIngredients().clear();\n\tfor (UPCItems lUPCItem : pUpcIngredients) {\n\t\tUpcIngredient lUpcIngredient = new UpcIngredient();\n\t\tlUpcIngredient.setIngredientItem(getIngredientItem());\n\t\tlUpcIngredient.setUpc(lUPCItem);\n\t\tlUpcIngredient.addIngredient(this);\n\t\tgetUpcIngredients().add(lUpcIngredient);\n\t}\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\domain\\Ingredient.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/** full constructor */\n", "func_signal": "public IngredientItem(String pName, Set<Ingredient> pIngredients, Set<UpcIngredient> pUpcIngredients, Set<IngredientItemPromotion> pIngredientItemPromotions)", "code": "{\n\tm_name = pName;\n\tm_ingredients = pIngredients;\n\tm_upcIngredients = pUpcIngredients;\n\tm_ingredientItemPromotions = pIngredientItemPromotions;\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\domain\\IngredientItem.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * looking ingredientItems on the basis of upcCode\n * @param pPromotionData\n * @return\n */\n", "func_signal": "protected List<IngredientItem> lookupIngredientItems(List<String> pIds)", "code": "{\n\tList<Long> lLongIds = new ArrayList<Long>();\n\tfor (String lString : pIds) {\n\t\ttry {\n\t\t\t// check if the incoming string ids are parsable to Long, (but not a alphanumeric)\n\t\t\tLong lId = Long.valueOf(lString);\n\t\t\tlLongIds.add(lId);\n\t\t} catch (NumberFormatException ex) {\n\t\t\t// skip the alphanumeric ids (unable to parse)\n\t\t\tLOG.debug(\"Error parsing string to long for UPC id : \"+lString);\n\t\t}\n\t}\n\t\n\tString[] lParams = {\"pCode\"};\n\tObject[] lValues = {lLongIds};\n\tList<IngredientItem> lIngredientItems = m_upcIngredientDao.findByNamedQueryAndNamedParams(\"findIngredientItemByUpcCode\", lParams, lValues);\n\treturn lIngredientItems;\n}", "path": "src\\main\\java\\com\\chikli\\demo\\onedevdaydetroit\\legacycode\\business\\PromotionToOneStopMapper.java", "repo_name": "nhajratw/legacy-code-refactor", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "// ||========== METHODS ==========||\n", "func_signal": "private Point getStartLocation(Point frameLocation, Point frameSize)", "code": "{\n\tPoint location = new Point(((frameSize.x/2)-(getWidth()/2))+frameLocation.x, \n\t\t\t((frameSize.y/2)-(getHeight()/2))+frameLocation.y);;\n\treturn location;\n}", "path": "src\\NotesFrame.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// ||========== CONSTRUCTOR ==========||\n", "func_signal": "public NotesFrame(Point ownerLocation, String notes)", "code": "{\n\tthis.notes = notes;\n\tsetTitle(\"Notes\");\n\tsetSize(400,200);\n\tsetLocation(getStartLocation(ownerLocation, new Point(getWidth(),getHeight())));\n\tsetResizable(false);\n\tsetDefaultCloseOperation(DISPOSE_ON_CLOSE);\n\tgetContentPane().setLayout(new BorderLayout());\n\tgetContentPane().add(textArea(), BorderLayout.CENTER);\n\tgetContentPane().add(buttonPanel(), BorderLayout.SOUTH);\n}", "path": "src\\NotesFrame.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// ||========== CONSTRUCTOR ==========||\n", "func_signal": "public Job(String title)", "code": "{\n\tthis.title = title;\n\tdate = new Date();\n\tfor (int x=0; x<elapsedTime.length; x++) {  elapsedTime[x] = 0;  }\n}", "path": "src\\Job.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// Turns the integer array to a string with proper format.\n", "func_signal": "private String timeToString(int[] time)", "code": "{\n\tString s = new String(time[0]+\":\");\n\tif (time[1] < 10) {  s+=(\"0\"+time[1]+\":\");  }\n\telse {  s+=time[1]+\":\";  }\n\tif (time[2] < 10) {  s+=(\"0\"+time[2]);  }\n\telse {  s+=time[2];  }\n\treturn s;\n}", "path": "src\\GUI.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// Receives the screen dimensions and centers the application. NOTE: Will display application\n//in center of multi-screen displays with disregard to screen positions.\n", "func_signal": "private java.awt.Point getStartLocation(int frameWidth, int frameHeight)", "code": "{\n\tToolkit tk = Toolkit.getDefaultToolkit();\n\tjava.awt.Dimension screen = tk.getScreenSize();\n\tjava.awt.Point location = new java.awt.Point((screen.width/2)-(frameWidth/2), \n\t\t\t(screen.height/2)-(frameWidth/2));\n\treturn location;\n}", "path": "src\\GUI.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// ||========== METHODS ==========||\n", "func_signal": "private JPanel initComponents()", "code": "{\n\t// JPanel array\n\tJPanel[] panelArray = new JPanel[fileNames.length+1];\n\t\n\t// Initialize JButton and JLabel array.\n\tfor (int x=0; x<fileNames.length; x++) {\n\t\tbuttons[x] = new JButton(\"Select File\");\n\t\tbuttons[x].setName(\"\"+x);\n\t\tlabels[x] = new JLabel(\":: \"+fileNames[x]);\n\t\tpanelArray[x] = new JPanel(new GridLayout(1,2));\n\t\tpanelArray[x].add(buttons[x]);\n\t\tpanelArray[x].add(labels[x]);\n\t}\n\t// Cancel button.\n\tbuttons[panelArray.length-1] = new JButton(\"Cancel\");\n\tbuttons[panelArray.length-1].setName(\"Cancel\");\n\tpanelArray[panelArray.length-1] = new JPanel();\n\tpanelArray[panelArray.length-1].add(buttons[panelArray.length-1]);\n\t\n\t// Wrapper panel\n\tJPanel wrapper = new JPanel(new GridLayout(panelArray.length, 1));\n\tfor (int x=0; x<panelArray.length; x++) {  wrapper.add(panelArray[x]);  }\n\treturn wrapper;\n}", "path": "src\\LoadJobWindow.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// Creates a 2-Dimensional Object array that holds the current job entry info.\n//Then passes the Object[][] to the table model. The table model then fires a \n//\"all rows & columns changed\" event to update the entire table. Also notes that\n//the information for the current job has been changed for saving purposes.\n", "func_signal": "private void updateTable(ArrayList<Entry> entries)", "code": "{\n\tObject[][] data = new Object[currentJob.getEntries().size()][4];\n\tfor (int x=0; x<currentJob.getEntries().size(); x++) {\n\t\tdata[x][0] = new String(\"#\"+(x+1));\n\t\tdata[x][1] = currentJob.getEntries().get(x).getDate().toString();\n\t\tdata[x][2] = currentJob.getEntries().get(x).getTime();\n\t\tdata[x][3] = new Boolean(currentJob.getEntries().get(x).areNotes());\n\t}\n\tmodel.setData(data);\n\tinfoChanged = true;\n}", "path": "src\\GUI.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// Checks to see if file needs to be saved.\n", "func_signal": "private void confirmSave(boolean exit)", "code": "{\n\tif (currentJob != null && infoChanged) {\n\t\t// 1 = NO_OPTION\n\t\tint choice = 1;\n\t\tString message = new String(\"Would you like to save\");\n\t\tif (exit) {  message+=\" before you exit?\";  }\n\t\telse {  message+=\"?\";  }\n\t\tchoice = JOptionPane.showConfirmDialog(getFrame(), message, \"Save?\", JOptionPane.YES_NO_OPTION,\n\t\t\t\tJOptionPane.PLAIN_MESSAGE);\n\t\tif (choice == JOptionPane.YES_OPTION) {  save();  }\n\t}\n}", "path": "src\\GUI.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// Selection sort used to sort Array List of entries.\n", "func_signal": "private void sort(int method)", "code": "{\n\t// If active job holds less than 2 entries, don't sort.\n\tcurrentSortMethod = method;\n\tif (currentJob.getEntries().size() < 2) {/* do nothing */}\n\t// Else sort.\n\telse {\n\t\tEntry[] array = new Entry[currentJob.getEntries().size()];\n\t\tfor (int x=0; x<array.length; x++) {  \n\t\t\tarray[x] = currentJob.getEntries().get(x);\n\t\t}\n\n\t\tfor (int i=0; i<array.length-1; i++) {\n\t\t\tint min = i;\n\t\t\tfor (int j=i+1; j<array.length; j++) {\n\t\t\t\tif (method == DATE) {  if (array[j].getDate().before(array[min].getDate())) {  min = j;  }  }\n\t\t\t\telse if (method == DATE_REVERSED) {  if (array[j].getDate().after(array[min].getDate())) {  min = j;  }  }\n\t\t\t\telse if (method == ELAPSED_TIME) {\n\t\t\t\t\tif (isLarger(array[j].getElapsedTime(), array[min].getElapsedTime())) {  min = j;  } \n\t\t\t\t}\n\t\t\t\telse if (method == ELAPSED_TIME_REVERSED) {\n\t\t\t\t\tif (!isLarger(array[j].getElapsedTime(), array[min].getElapsedTime())) {  min = j;  }\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (i != min) {\n\t\t\t\tEntry swap = array[i];\n\t\t\t\tarray[i] = array[min];\n\t\t\t\tarray[min] = swap;\n\t\t\t}\n\t\t}\n\n\t\tArrayList<Entry> temp = new ArrayList<Entry>();\n\t\tfor (int x=0; x<array.length; x++) {  temp.add(array[x]);  }\n\t\tcurrentJob.setEntries(temp);\n\t}\n}", "path": "src\\GUI.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// ||========== METHODS ==========||\n", "func_signal": "public void addEntry(Entry entry)", "code": "{\n\tentries.add(entry);\n\tcalcElapsedTime();\n}", "path": "src\\Job.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// ||========== GETTERS/SETTERS ==========||\n", "func_signal": "private Point getStartLocation(Point frameLocation, Point frameSize)", "code": "{\n\tPoint location = new Point(((frameSize.x/2)-(window.getWidth()/2))+frameLocation.x, \n\t\t\t((frameSize.y/2)-(window.getHeight()/2))+frameLocation.y);;\n\treturn location;\n}", "path": "src\\LoadJobWindow.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// ||========== CONSTRUCTOR ==========||\n", "func_signal": "public GUI()", "code": "{\n\tinitComponents();\n\tsetTitle(\"Time Logger\");\n\tsetDefaultCloseOperation(EXIT_ON_CLOSE);\n\tsetJMenuBar(getJMB());\n\tsetResizable(false);\n\tsetSize(460, 445);\n\tsetLocation(getStartLocation(getWidth(), getHeight()));\n\taddWindowListener(this);\n\tsetVisible(true);\n}", "path": "src\\GUI.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// Saves job data to file in working directory that the jar was executed in.\n", "func_signal": "private void save()", "code": "{\n\t// Check to see if file exists\n\tif (currentJob != null && infoChanged) {\n\t\tFile file = new File(PATH+currentJob.getFileName());\n\t\tboolean save = true;\n\t\tif (file.exists()) {\n\t\t\tint choice = JOptionPane.showConfirmDialog(getFrame(), \"The Job \"+currentJob.getTitle()+\" already exists.\"+\n\t\t\t\t\t\" Do you want to overwrite it?\", \"File exists.\", JOptionPane.YES_NO_OPTION);\n\t\t\tif (choice == JOptionPane.YES_OPTION) {  save = true;  }\n\t\t\telse {  save = false;  }\n\t\t}\n\n\t\t// Save file\n\t\tif (save) {\n\t\t\ttry {\n\t\t\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(file));\n\t\t\t\twriter.write(currentJob.getTitle()); writer.newLine();\n\t\t\t\twriter.write(\"\"+currentJob.getDate().getTime()); writer.newLine();\n\t\t\t\tint[] time = currentJob.getElapsedTime();\n\t\t\t\twriter.write(\"\"+time[0]); writer.newLine();\n\t\t\t\twriter.write(\"\"+time[1]); writer.newLine();\n\t\t\t\twriter.write(\"\"+time[2]); writer.newLine();\n\t\t\t\twriter.write(\"\"+currentSortMethod); writer.newLine();\n\t\t\t\tArrayList<Entry> entries = currentJob.getEntries();\n\t\t\t\twriter.write(\"\"+entries.size()); writer.newLine();\n\t\t\t\tfor (int x=0; x<entries.size(); x++) {\n\t\t\t\t\twriter.write(\"\"+entries.get(x).getDate().getTime()); writer.newLine();\n\t\t\t\t\ttime = entries.get(x).getElapsedTime();\n\t\t\t\t\twriter.write(\"\"+time[0]); writer.newLine();\n\t\t\t\t\twriter.write(\"\"+time[1]); writer.newLine();\n\t\t\t\t\twriter.write(\"\"+time[2]); writer.newLine();\n\t\t\t\t\twriter.write(entries.get(x).getNotes()); writer.newLine();\n\t\t\t\t}\n\t\t\t\twriter.close();\n\t\t\t}catch (Exception e) {  e.printStackTrace();  }\n\t\t}\n\t\tinfoChanged = false;\n\t}\n}", "path": "src\\GUI.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// Initializes the menu bar\n", "func_signal": "private JMenuBar getJMB()", "code": "{\n\tMenuListener menuListener = new MenuListener();\n\n\t// ***** JMenuItems *****\n\tnewJob = new JMenuItem(\"New Job\");\n\tnewJob.setMnemonic(KeyEvent.VK_N);\n\tnewJob.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, KeyEvent.CTRL_MASK));\n\tnewJob.addActionListener(menuListener);\n\n\tloadJob = new JMenuItem(\"Load Job\");\n\tloadJob.setMnemonic(KeyEvent.VK_L);\n\tloadJob.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L, KeyEvent.CTRL_MASK));\n\tloadJob.addActionListener(menuListener);\n\n\tsaveJob = new JMenuItem(\"Save Job\");\n\tsaveJob.setMnemonic(KeyEvent.VK_S);\n\tsaveJob.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_MASK));\n\tsaveJob.addActionListener(menuListener);\n\tsaveJob.setEnabled(false);\n\n\texit = new JMenuItem(\"Exit\");\n\texit.setMnemonic(KeyEvent.VK_X);\n\texit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, KeyEvent.CTRL_MASK));\n\texit.addActionListener(menuListener);\n\n\t// ***** JRadioButtonMenuItem *****\n\tdateNormal = new JRadioButtonMenuItem(\"Earliest -> Latest\");\n\tdateNormal.setMnemonic(KeyEvent.VK_E);\n\tdateNormal.addActionListener(menuListener);\n\tdateNormal.setEnabled(false);\n\n\tdateReversed = new JRadioButtonMenuItem(\"Latest -> Earliest\");\n\tdateReversed.setMnemonic(KeyEvent.VK_L);\n\tdateReversed.addActionListener(menuListener);\n\tdateReversed.setEnabled(false);\n\n\telapsedTimeNormal = new JRadioButtonMenuItem(\"Longest -> Shortest\");\n\telapsedTimeNormal.setMnemonic(KeyEvent.VK_L);\n\telapsedTimeNormal.addActionListener(menuListener);\n\telapsedTimeNormal.setEnabled(false);\n\n\telapsedTimeReversed = new JRadioButtonMenuItem(\"Shortest -> Longest\");\n\telapsedTimeReversed.setMnemonic(KeyEvent.VK_S);\n\telapsedTimeReversed.addActionListener(menuListener);\n\telapsedTimeReversed.setEnabled(false);\n\n\t// Button Group for JRadioButtonMenuItems\n\tButtonGroup group = new ButtonGroup();\n\tgroup.add(dateNormal);\n\tgroup.add(dateReversed);\n\tgroup.add(elapsedTimeNormal);\n\tgroup.add(elapsedTimeReversed);\n\n\t// ***** JMenus *****\n\tbyDate = new JMenu(\"By date..\");\n\tbyDate.setMnemonic(KeyEvent.VK_D);\n\tbyDate.add(dateNormal);\n\tbyDate.add(dateReversed);\n\n\tbyElapsedTime = new JMenu(\"By elapsed time..\");\n\tbyElapsedTime.setMnemonic(KeyEvent.VK_T);\n\tbyElapsedTime.add(elapsedTimeNormal);\n\tbyElapsedTime.add(elapsedTimeReversed);\n\n\tfileMenu = new JMenu(\"File\");\n\tfileMenu.setMnemonic(KeyEvent.VK_F);\n\tfileMenu.add(newJob);\n\tfileMenu.addSeparator();\n\tfileMenu.add(loadJob);\n\tfileMenu.add(saveJob);\n\tfileMenu.addSeparator();\n\tfileMenu.add(exit);\n\n\tsortMenu = new JMenu(\"Sort\");\n\tsortMenu.setMnemonic(KeyEvent.VK_S);\n\tsortMenu.add(byDate);\n\tsortMenu.add(byElapsedTime);\n\n\t// ***** JMenu *****\n\tmenuBar = new JMenuBar();\n\tmenuBar.add(fileMenu);\n\tmenuBar.add(sortMenu);\n\n\treturn menuBar;\n}", "path": "src\\GUI.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// Compares int[] for which is a larger time. Return true if j > min.\n", "func_signal": "private boolean isLarger(int[] j, int[] min)", "code": "{\n\tboolean test = false;\n\tif (j[0] > min[0]) {  test = true;  }\n\telse if (j[0] == min[0] && j[1] > min[1]) {  test = true;  }\n\telse if (j[0] == min[0] && j[1] == min[1] && j[2] > min[2]) {  test = true;  }\n\treturn test;\n}", "path": "src\\GUI.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// ||========== CONSTRUCTOR ==========||\n", "func_signal": "public LoadJobWindow(String[] fileNames, JFrame owner)", "code": "{\n\t// Initialize global variables.\n\tthis.fileNames = fileNames;\n\tbuttons = new JButton[fileNames.length+1];\n\tlabels = new JLabel[fileNames.length];\n\twindow = new JWindow(owner);\n\twindow.add(initComponents());\n\twindow.pack();\n\t//window.setLocation(getStartLocation(window.getWidth(), window.getHeight()));\n\twindow.setLocation(getStartLocation(owner.getLocation(), new Point(owner.getSize().width, owner.getSize().height)));\n}", "path": "src\\LoadJobWindow.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// Updates the main GUI information after a new job is created or loaded.\n", "func_signal": "private void updateUI()", "code": "{\n\tjobTitle.setText(currentJob.getTitle());\n\tjobDateStarted.setText(currentJob.getDate().toString());\n\tjobElapsedTime.setText(currentJob.getTime());\n\tjobNumEntries.setText(\"\"+currentJob.getEntries().size());\n\tentryTimeStarted.setText(\"\");\n\tentryElapsedTime.setText(\"0:00:00\");\n\tsaveJob.setEnabled(true);\n\tstartButton.setEnabled(true);\n\tif (currentJob.getEntries().size() > 0) {  editNotesButton.setEnabled(true);  }\n\telse {  editNotesButton.setEnabled(false);  }\n\tdateNormal.setEnabled(true);\n\tdateReversed.setEnabled(true);\n\telapsedTimeNormal.setEnabled(true);\n\telapsedTimeReversed.setEnabled(true);\n\thours = minutes = seconds = 0;\n\tsort(currentSortMethod);\n\tupdateTable(currentJob.getEntries());\n}", "path": "src\\GUI.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// Displays time for currentEntry and total job time;\n", "func_signal": "private void setTime()", "code": "{\n\tentryElapsedTime.setText(timeToString(formTime()));\n\n\tint[] temp = currentJob.getElapsedTime();\n\ttemp[2]++;\n\tif (temp[2] == 60) {  temp[1]++; temp[2] = 0;  }\n\tif (temp[1] == 60) {  temp[0]++; temp[1] = 0;  }\n\tjobElapsedTime.setText(timeToString(temp));\n}", "path": "src\\GUI.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// ||========== METHODS ==========||\n// Initializes and forms all the GUI information needed.\n", "func_signal": "private void initComponents()", "code": "{\n\t// ***** Global Variable Initialization *****\n\tjobTitle = new JLabel();\n\tjobDateStarted = new JLabel();\n\tjobElapsedTime = new JLabel();\n\tjobNumEntries = new JLabel();\n\tentryTimeStarted = new JLabel();\n\tentryElapsedTime = new JLabel(\"0:00:00\");\n\tstartButton = new JButton(\"Start\");\n\tstartButton.addActionListener(this);\n\tstartButton.setEnabled(false);\n\tpauseButton = new JButton(\"Pause\");\n\tpauseButton.addActionListener(this);\n\tpauseButton.setEnabled(false);\n\teditNotesButton = new JButton(\"Edit Notes\");\n\teditNotesButton.addActionListener(this);\n\teditNotesButton.setEnabled(false);\n\tscrollPane = new JScrollPane();\n\tmodel = new EntryTableModel(new String[] {\"#\", \"Date\", \"Time\", \"Notes\" });\n\ttable = new JTable(model);\n\ttable.getColumnModel().getColumn(0).setWidth(20);\n\ttable.sizeColumnsToFit(0);\n\ttable.getColumnModel().getColumn(1).setWidth(208);\n\ttable.sizeColumnsToFit(1);\n\ttable.getColumnModel().getColumn(2).setWidth(65);\n\ttable.sizeColumnsToFit(2);\n\ttable.getColumnModel().getColumn(3).setWidth(40);\n\ttable.sizeColumnsToFit(3);\n\ttable.setCellSelectionEnabled(false);\n\ttable.setColumnSelectionAllowed(false);\n\ttable.setRowSelectionAllowed(true);\n\ttable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\tseconds = minutes = hours = 0;\n\ttimer = new Timer(1000, new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent ae) {\n\t\t\tseconds++;\n\t\t\tsetTime();\n\t\t}\n\t});\n\n\t// ***** Local Variables Initialization *****\n\tJPanel jobPanel = new JPanel();\n\tJPanel entryPanel = new JPanel();\n\tJLabel JOB_TITLE = new JLabel();\n\tJLabel DATE_STARTED = new JLabel();\n\tJLabel TOTAL_TIME_ELAPSED = new JLabel();\n\tJLabel ENTRY_TIME_STARTED = new JLabel();\n\tJLabel ENTRY_ELAPSED_TIME = new JLabel();\n\tJLabel VERSION_LABEL = new JLabel(VERSION);\n\tJLabel NUM_ENTRIES = new JLabel(\"# of Entries: \");\n\n\n\t// From here till end of method is NetBeans GUI layout nonsense. I admit I was to lazy to do the\n\t//GUI coding personally. Saves more time for making the program work, and a lot less frustration.\n\tjobPanel.setBorder(BorderFactory.createTitledBorder(null, \"Job Details\", \n\t\t\tTitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Lucida Sans\", 1, 14)));\n\n\tJOB_TITLE.setFont(new Font(\"Lucida Sans\", 1, 12));\n\tJOB_TITLE.setText(\"Title: \");\n\n\tjobTitle.setFont(new Font(\"DejaVu Sans\", 0, 12));\n\n\tDATE_STARTED.setFont(new Font(\"Lucida Sans\", 1, 12));\n\tDATE_STARTED.setText(\"Date Started: \");\n\n\tjobDateStarted.setFont(new Font(\"DejaVu Sans\", 0, 12));\n\n\tTOTAL_TIME_ELAPSED.setFont(new Font(\"Lucida Sans\", 1, 12)); \n\tTOTAL_TIME_ELAPSED.setText(\"Total Elapsed Time: \");\n\n\tjobElapsedTime.setFont(new Font(\"DejaVu Sans\", 0, 12));\n\n\tNUM_ENTRIES.setFont(new java.awt.Font(\"Lucida Sans\", 1, 12));\n\n\tjobNumEntries.setFont(new java.awt.Font(\"DejaVu Sans\", 0, 12));\n\n\tjavax.swing.GroupLayout jobPanelLayout = new javax.swing.GroupLayout(jobPanel);\n\tjobPanel.setLayout(jobPanelLayout);\n\tjobPanelLayout.setHorizontalGroup(\n\t\t\tjobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n\t\t\t.addGroup(jobPanelLayout.createSequentialGroup()\n\t\t\t\t\t.addContainerGap()\n\t\t\t\t\t.addGroup(jobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n\t\t\t\t\t\t\t.addGroup(jobPanelLayout.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t.addComponent(JOB_TITLE)\n\t\t\t\t\t\t\t\t\t.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t.addComponent(jobTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE))\n\t\t\t\t\t\t\t\t\t.addGroup(jobPanelLayout.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t.addComponent(DATE_STARTED)\n\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t\t\t.addComponent(jobDateStarted, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE))\n\t\t\t\t\t\t\t\t\t\t\t.addGroup(jobPanelLayout.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(TOTAL_TIME_ELAPSED)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addGap(10, 10, 10)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(jobElapsedTime, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addGroup(jobPanelLayout.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(NUM_ENTRIES)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(jobNumEntries, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.addContainerGap())\n\t);\n\tjobPanelLayout.setVerticalGroup(\n\t\t\tjobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n\t\t\t.addGroup(jobPanelLayout.createSequentialGroup()\n\t\t\t\t\t.addGroup(jobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n\t\t\t\t\t\t\t.addComponent(JOB_TITLE)\n\t\t\t\t\t\t\t.addComponent(jobTitle))\n\t\t\t\t\t\t\t.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t.addGroup(jobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n\t\t\t\t\t\t\t\t\t.addComponent(DATE_STARTED)\n\t\t\t\t\t\t\t\t\t.addComponent(jobDateStarted))\n\t\t\t\t\t\t\t\t\t.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n\t\t\t\t\t\t\t\t\t.addGroup(jobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n\t\t\t\t\t\t\t\t\t\t\t.addComponent(NUM_ENTRIES)\n\t\t\t\t\t\t\t\t\t\t\t.addComponent(jobNumEntries))\n\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t\t\t.addGroup(jobPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(jobElapsedTime)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addComponent(TOTAL_TIME_ELAPSED))\n\t\t\t\t\t\t\t\t\t\t\t\t\t.addContainerGap())\n\t);\n\n\tentryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, \"Current Entry Details\", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font(\"Lucida Sans\", 1, 13))); // NOI18N\n\n\tENTRY_TIME_STARTED.setFont(new java.awt.Font(\"Lucida Sans\", 1, 12));\n\tENTRY_TIME_STARTED.setText(\"Time Started: \");\n\n\tENTRY_ELAPSED_TIME.setFont(new java.awt.Font(\"Lucida Sans\", 1, 12));\n\tENTRY_ELAPSED_TIME.setText(\"Elapsed Time: \");\n\n\tjavax.swing.GroupLayout entryPanelLayout = new javax.swing.GroupLayout(entryPanel);\n\tentryPanel.setLayout(entryPanelLayout);\n\tentryPanelLayout.setHorizontalGroup(\n\t\t\tentryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n\t\t\t.addGroup(entryPanelLayout.createSequentialGroup()\n\t\t\t\t\t.addContainerGap()\n\t\t\t\t\t.addGroup(entryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n\t\t\t\t\t\t\t.addGroup(entryPanelLayout.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t.addComponent(ENTRY_TIME_STARTED)\n\t\t\t\t\t\t\t\t\t.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t.addComponent(entryTimeStarted, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE))\n\t\t\t\t\t\t\t\t\t.addGroup(entryPanelLayout.createSequentialGroup()\n\t\t\t\t\t\t\t\t\t\t\t.addComponent(ENTRY_ELAPSED_TIME)\n\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t\t\t.addComponent(entryElapsedTime)\n\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t\t\t.addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t\t\t.addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t\t\t.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t\t\t\t\t.addComponent(editNotesButton)))\n\t\t\t\t\t\t\t\t\t\t\t.addContainerGap())\n\t);\n\tentryPanelLayout.setVerticalGroup(\n\t\t\tentryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n\t\t\t.addGroup(entryPanelLayout.createSequentialGroup()\n\t\t\t\t\t.addGroup(entryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n\t\t\t\t\t\t\t.addComponent(ENTRY_TIME_STARTED)\n\t\t\t\t\t\t\t.addComponent(entryTimeStarted))\n\t\t\t\t\t\t\t.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n\t\t\t\t\t\t\t.addGroup(entryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n\t\t\t\t\t\t\t\t\t.addComponent(ENTRY_ELAPSED_TIME)\n\t\t\t\t\t\t\t\t\t.addComponent(entryElapsedTime)\n\t\t\t\t\t\t\t\t\t.addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t\t\t\t\t.addComponent(pauseButton)\n\t\t\t\t\t\t\t\t\t.addComponent(editNotesButton)))\n\t);\n\n\tscrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, \"Time Entries\", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font(\"Lucida Sans\", 1, 13)));\n\tscrollPane.setViewportView(table);\n\n\tjavax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n\tgetContentPane().setLayout(layout);\n\tlayout.setHorizontalGroup(\n\t\t\tlayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n\t\t\t.addGroup(layout.createSequentialGroup()\n\t\t\t\t\t.addContainerGap()\n\t\t\t\t\t.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n\t\t\t\t\t\t\t.addComponent(entryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n\t\t\t\t\t\t\t.addComponent(jobPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n\t\t\t\t\t\t\t.addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)\n\t\t\t\t\t\t\t.addComponent(VERSION_LABEL, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE))\n\t\t\t\t\t\t\t.addContainerGap())\n\t);\n\tlayout.setVerticalGroup(\n\t\t\tlayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n\t\t\t.addGroup(layout.createSequentialGroup()\n\t\t\t\t\t.addComponent(jobPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n\t\t\t\t\t.addComponent(entryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n\t\t\t\t\t.addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)\n\t\t\t\t\t.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n\t\t\t\t\t.addComponent(VERSION_LABEL)\n\t\t\t\t\t.addContainerGap(14, Short.MAX_VALUE))\n\t);\n\n\tpack();\n\t// End NetBeans nonsense.\n}", "path": "src\\GUI.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "// Gathers job files from working directory then passes them to load job screen.\n", "func_signal": "private void load()", "code": "{\n\tconfirmSave(false);\n\tFile dir = new File(PATH);\n\tFilenameFilter filter = new FilenameFilter() {\n\t\tpublic boolean accept(File dir, String name) {\n\t\t\treturn name.endsWith(\".job\");\n\t\t}\n\t};\n\tfileNames = dir.list(filter);\n\tif (fileNames.length == 0) {\n\t\tJOptionPane.showMessageDialog(getFrame(), \"There are no locally saved jobs.\", \"ERROR\", JOptionPane.WARNING_MESSAGE);\n\t}\n\telse {\n\t\twindow = new LoadJobWindow(fileNames, getFrame());\n\t\tJButton[] buttons = window.getButtons();\n\t\tLoadWindowListener lwl = new LoadWindowListener();\n\t\tfor (int x=0; x<buttons.length; x++) {  buttons[x].addActionListener(lwl);  }\n\t\twindow.setVisible();\n\t}\n}", "path": "src\\GUI.java", "repo_name": "bdhuss/timelogger", "stars": 0, "license": "mit", "language": "java", "size": 492}
{"docstring": "/**\n * Returns an <code>AbstractFormatter</code> that can handle formatting of the passed in\n * <code>JFormattedTextField</code>.\n *\n * @param tf JFormattedTextField requesting AbstractFormatter\n * @return AbstractFormatter to handle formatting duties, a null return value implies the JFormattedTextField\n *         should behave like a normal JTextField\n */\n", "func_signal": "public JFormattedTextField.AbstractFormatter getFormatter(final JFormattedTextField tf)", "code": "{\n    NumberFormatter formatter;\n    DecimalFormat format;\n\n    if (tf == latitudeField || tf == longitudeField) {\n        // allow null values\n        format = new NullableDecimalFormat();\n    } else if (tf == massField || tf == volumeField || tf == susceptibilityField) {\n        // show only positive numbers\n        format = new PositiveDecimalFormat();\n    } else {\n        // show all numbers\n        format = new DecimalFormat();\n    }\n    format.setGroupingUsed(true);\n    format.setMaximumFractionDigits(6);\n    formatter = new NumberFormatter(format);\n\n    // set value ranges\n    if (tf == strikeField) {\n        formatter.setMinimum(new Double(0));\n        formatter.setMaximum(new Double(360));\n    } else if (tf == dipField) {\n        formatter.setMinimum(new Double(0));\n        formatter.setMaximum(new Double(180));\n    }\n\n    // commit changes when pressing enter\n    tf.addActionListener(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n            try {\n                tf.commitEdit();\n            } catch (ParseException e1) {\n                e1.printStackTrace();\n            }\n        }\n    });\n    return formatter;\n}", "path": "src\\ikayaki\\gui\\ProjectInformationPanel.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/**\n * Returns the index of the first step, or -1 if there are no steps.\n */\n", "func_signal": "private int getFirstIndex()", "code": "{\n    for (int i = 0; i < getProject().getSteps(); i++) {\n        MeasurementStep current = getProject().getStep(i);\n        for (MeasurementStep step : steps) {\n            if (current == step) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}", "path": "src\\ikayaki\\gui\\MeasurementSequencePanel.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/**\n * Invokes autosaving for the sequences.\n */\n", "func_signal": "public static synchronized void fireSequencesModified()", "code": "{\n    sequencesModified = true;\n    save();\n}", "path": "src\\ikayaki\\Settings.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/* Sequence table settings */\n", "func_signal": "public static synchronized List<SequenceColumn> getDefaultColumns()", "code": "{\n    String s = getProperty(\"sequence.defaultcolumns\",\n            \"COUNT,STEP,DECLINATION,INCLINATION,RELATIVE_MAGNETIZATION,THETA63,\" +\n            \"SAMPLE_X_NORMALIZED,SAMPLE_Y_NORMALIZED,SAMPLE_Z_NORMALIZED\");\n    String[] columnNames = s.split(\",\");\n    List<SequenceColumn> columns = new ArrayList<SequenceColumn>(columnNames.length);\n    for (String name : columnNames) {\n        try {\n            columns.add(SequenceColumn.valueOf(name));\n        } catch (IllegalArgumentException e) {\n            e.printStackTrace();\n        }\n    }\n    return columns;\n}", "path": "src\\ikayaki\\Settings.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/**\n * Rebuilds the contents of the loadSequenceBox combobox by getting the saved sequences from the settings.\n */\n", "func_signal": "private void resetLoadSequenceBox()", "code": "{\n    // remove old and get new items\n    loadSequenceBox.removeAllItems();\n    MeasurementSequence[] sequences = Settings.getSequences();\n\n    // insert new items and restore old selection\n    loadSequenceBox.addItem(null);  // the first item is empty\n    for (MeasurementSequence sequence : sequences) {\n        loadSequenceBox.addItem(sequence);\n    }\n}", "path": "src\\ikayaki\\gui\\MeasurementSequencePanel.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/* Calibration projects */\n", "func_signal": "public static synchronized File[] getCalibrationProjectFiles()", "code": "{\n    File[] files = Ikayaki.CALIBRATION_PROJECT_DIR.listFiles(new FileFilter() {\n        public boolean accept(File file) {\n            return file.isFile()\n                    && file.getName().endsWith(Ikayaki.FILE_TYPE)\n                    && Project.getType(file) == Project.Type.CALIBRATION;\n        }\n    });\n    if (files == null) {\n        return new File[0];\n    } else {\n        Arrays.sort(files);\n        return files;\n    }\n}", "path": "src\\ikayaki\\Settings.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "// TODO: Put these same actions to the program's main menu. Each action might then need to find out the selected rows itself and monitor the ListSelectionModel.\n", "func_signal": "private Action getInsertBeforeAction()", "code": "{\n    Action action = new AbstractAction() {\n        public void actionPerformed(ActionEvent e) {\n            int index = getFirstIndex();\n            for (int i = 0; i < steps.length; i++) {\n                getProject().addStep(index, new MeasurementStep());\n            }\n            // the new steps are get automatically selected, if we just leave the selection untouched\n        }\n    };\n    action.putValue(Action.NAME, \"Insert Before\");\n    action.putValue(Action.SHORT_DESCRIPTION,\n            \"Inserts the selected number of new steps \" +\n            \"in front of the selected steps.\");\n    action.putValue(Action.MNEMONIC_KEY, KeyEvent.VK_I);\n\n    if (getProject() == null || !getProject().isSequenceEditEnabled()) {\n        action.setEnabled(false);\n    } else if (steps.length == 0 || getFirstIndex() < getProject().getCompletedSteps()) {\n        action.setEnabled(false);\n    }\n    return action;\n}", "path": "src\\ikayaki\\gui\\MeasurementSequencePanel.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/**\n * Method generated by IntelliJ IDEA GUI Designer !!! IMPORTANT !!! DO NOT edit this method OR call it in your\n * code!\n */\n", "func_signal": "private void $$$setupUI$$$()", "code": "{\n    contentPane = new JPanel();\n    contentPane.setLayout(new GridLayoutManager(15, 5, new Insets(0, 0, 0, 0), 4, 4));\n    siteField = new JTextField();\n    contentPane.add(siteField,\n            new GridConstraints(4, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null,\n                    new Dimension(70, -1), null));\n    areaField = new JTextField();\n    contentPane.add(areaField,\n            new GridConstraints(3, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null,\n                    new Dimension(70, -1), null));\n    final JPanel panel1 = new JPanel();\n    panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), 4, 4));\n    contentPane.add(panel1,\n            new GridConstraints(1, 1, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,\n                    GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null));\n    measurementTypeAuto = new JRadioButton();\n    measurementTypeAuto.setText(\"Auto\");\n    panel1.add(measurementTypeAuto,\n            new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,\n                    GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    measurementTypeManual = new JRadioButton();\n    measurementTypeManual.setText(\"Manual\");\n    panel1.add(measurementTypeManual,\n            new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,\n                    GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final Spacer spacer1 = new Spacer();\n    panel1.add(spacer1,\n            new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null));\n    final Spacer spacer2 = new Spacer();\n    contentPane.add(spacer2,\n            new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,\n                    GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 15), null));\n    final JPanel panel2 = new JPanel();\n    panel2.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), 4, 4));\n    contentPane.add(panel2,\n            new GridConstraints(12, 1, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,\n                    GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null));\n    final Spacer spacer3 = new Spacer();\n    panel2.add(spacer3,\n            new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null));\n    normalizationMass = new JRadioButton();\n    normalizationMass.setText(\"Mass\");\n    panel2.add(normalizationMass,\n            new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,\n                    GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    normalizationVolume = new JRadioButton();\n    normalizationVolume.setText(\"Volume\");\n    panel2.add(normalizationVolume,\n            new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,\n                    GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    latitudeField = new JFormattedTextField();\n    contentPane.add(latitudeField,\n            new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null,\n                    new Dimension(40, -1), null));\n    longitudeField = new JFormattedTextField();\n    contentPane.add(longitudeField,\n            new GridConstraints(8, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null,\n                    new Dimension(40, -1), null));\n    strikeField = new JFormattedTextField();\n    contentPane.add(strikeField,\n            new GridConstraints(9, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null,\n                    new Dimension(40, -1), null));\n    final JLabel label1 = new JLabel();\n    label1.setText(\"Dip\");\n    contentPane.add(label1,\n            new GridConstraints(9, 3, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    dipField = new JFormattedTextField();\n    contentPane.add(dipField,\n            new GridConstraints(9, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null,\n                    new Dimension(40, -1), null));\n    volumeField = new JFormattedTextField();\n    contentPane.add(volumeField,\n            new GridConstraints(10, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null,\n                    new Dimension(40, -1), null));\n    massField = new JFormattedTextField();\n    contentPane.add(massField,\n            new GridConstraints(10, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null,\n                    new Dimension(40, -1), null));\n    susceptibilityField = new JFormattedTextField();\n    contentPane.add(susceptibilityField,\n            new GridConstraints(11, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null,\n                    new Dimension(40, -1), null));\n    final Spacer spacer4 = new Spacer();\n    contentPane.add(spacer4,\n            new GridConstraints(13, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,\n                    GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 15), null));\n    final JLabel label2 = new JLabel();\n    label2.setText(\"Volume (cm)\");\n    contentPane.add(label2,\n            new GridConstraints(10, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final JLabel label3 = new JLabel();\n    label3.setText(\"Susceptibility\");\n    contentPane.add(label3,\n            new GridConstraints(11, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final JLabel label4 = new JLabel();\n    label4.setText(\"Normalize by\");\n    contentPane.add(label4,\n            new GridConstraints(12, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final JLabel label5 = new JLabel();\n    label5.setText(\"Comments\");\n    contentPane.add(label5,\n            new GridConstraints(14, 0, 1, 1, GridConstraints.ANCHOR_NORTHEAST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final JLabel label6 = new JLabel();\n    label6.setText(\"Longitude\");\n    contentPane.add(label6,\n            new GridConstraints(8, 3, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final JLabel label7 = new JLabel();\n    label7.setText(\"Operator / Date\");\n    contentPane.add(label7,\n            new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final JLabel label8 = new JLabel();\n    label8.setText(\"Measurement type\");\n    contentPane.add(label8,\n            new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final JLabel label9 = new JLabel();\n    label9.setText(\"Site\");\n    contentPane.add(label9,\n            new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final JLabel label10 = new JLabel();\n    label10.setText(\"Area\");\n    contentPane.add(label10,\n            new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final JLabel label11 = new JLabel();\n    label11.setText(\"Latitude\");\n    contentPane.add(label11,\n            new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final JLabel label12 = new JLabel();\n    label12.setText(\"Strike\");\n    contentPane.add(label12,\n            new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final JLabel label13 = new JLabel();\n    label13.setText(\"Mass (grams)\");\n    contentPane.add(label13,\n            new GridConstraints(10, 3, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final JPanel panel3 = new JPanel();\n    panel3.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), 4, 0));\n    contentPane.add(panel3,\n            new GridConstraints(0, 1, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,\n                    GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null));\n    operatorField = new JTextField();\n    panel3.add(operatorField,\n            new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null,\n                    new Dimension(70, -1), null));\n    dateField = new JTextField();\n    panel3.add(dateField,\n            new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(80, -1),\n                    null));\n    final JLabel label14 = new JLabel();\n    label14.setText(\"/\");\n    panel3.add(label14,\n            new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final JScrollPane scrollPane1 = new JScrollPane();\n    scrollPane1.setEnabled(true);\n    scrollPane1.setHorizontalScrollBarPolicy(31);\n    contentPane.add(scrollPane1,\n            new GridConstraints(14, 1, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,\n                    GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,\n                    GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,\n                    new Dimension(-1, 50), null, null));\n    commentArea = new JTextArea();\n    commentArea.setLineWrap(true);\n    commentArea.setRows(3);\n    scrollPane1.setViewportView(commentArea);\n    rockTypeField = new JTextField();\n    contentPane.add(rockTypeField,\n            new GridConstraints(6, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null,\n                    new Dimension(70, -1), null));\n    final JLabel label15 = new JLabel();\n    label15.setText(\"Rock type\");\n    contentPane.add(label15,\n            new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final JLabel label16 = new JLabel();\n    label16.setText(\"Sample type\");\n    contentPane.add(label16,\n            new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final JPanel panel4 = new JPanel();\n    panel4.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), 4, 4));\n    contentPane.add(panel4,\n            new GridConstraints(5, 1, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,\n                    GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null));\n    final Spacer spacer5 = new Spacer();\n    panel4.add(spacer5,\n            new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null));\n    sampleTypeCore = new JRadioButton();\n    sampleTypeCore.setText(\"Core\");\n    panel4.add(sampleTypeCore,\n            new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,\n                    GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    sampleTypeHand = new JRadioButton();\n    sampleTypeHand.setText(\"Hand\");\n    panel4.add(sampleTypeHand,\n            new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,\n                    GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final Spacer spacer6 = new Spacer();\n    contentPane.add(spacer6,\n            new GridConstraints(10, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(4, -1), null));\n    final Spacer spacer7 = new Spacer();\n    contentPane.add(spacer7,\n            new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,\n                    GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 15), null));\n}", "path": "src\\ikayaki\\gui\\ProjectInformationPanel.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/**\n * Returns the component that will show the details of the active measurement step.\n */\n", "func_signal": "public MeasurementDetailsPanel getDetailsPanel()", "code": "{\n    if (detailsPanel == null) {\n        detailsPanel = new MeasurementDetailsPanel();\n    }\n    return detailsPanel;\n}", "path": "src\\ikayaki\\gui\\MeasurementSequencePanel.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/**\n * Adds a sequence to the sequence list. Each sequence may be added only once.\n */\n", "func_signal": "public static synchronized void addSequence(MeasurementSequence sequence)", "code": "{\n    if (sequence != null && !sequences.contains(sequence)) {\n        sequences.add(sequence);\n        fireSequencesModified();\n    }\n}", "path": "src\\ikayaki\\Settings.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/**\n * Returns the index of the last step, or -1 if there are no steps.\n */\n", "func_signal": "private int getLastIndex()", "code": "{\n    for (int i = getProject().getSteps() - 1; i >= 0; i--) {\n        MeasurementStep current = getProject().getStep(i);\n        for (MeasurementStep step : steps) {\n            if (current == step) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}", "path": "src\\ikayaki\\gui\\MeasurementSequencePanel.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/**\n * Removes a sequence from the sequence list. If the specified sequence is not in the list, it will be ignored.\n */\n", "func_signal": "public static synchronized void removeSequence(MeasurementSequence sequence)", "code": "{\n    if (sequence != null) {\n        sequences.remove(sequence);\n        fireSequencesModified();\n    }\n}", "path": "src\\ikayaki\\Settings.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/**\n * Updates the sequence table on project data change. The TableModel does not need to listen to ProjectEvents.\n */\n", "func_signal": "public void projectUpdated(ProjectEvent event)", "code": "{\n    if (event.getType() == ProjectEvent.Type.DATA_CHANGED) {\n\n        // refresh the table header, in case the header names have changed.\n        for (int i = 0; i < sequenceTable.getColumnCount(); i++) {\n            sequenceTable.getColumnModel().getColumn(i).setHeaderValue(sequenceTableModel.getColumnName(i));\n        }\n        sequenceTable.getTableHeader().repaint();\n\n        // save the selected rows and update the table data\n        int[] rows = sequenceTable.getSelectedRows();\n        sequenceTableModel.fireTableDataChanged();\n        for (int i : rows) {\n            sequenceTable.getSelectionModel().addSelectionInterval(i, i);\n        }\n    }\n}", "path": "src\\ikayaki\\gui\\MeasurementSequencePanel.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/**\n * Creates a new SequencePopupMenu.\n *\n * @param steps the currently selected steps from the sequence, or an empty array if no steps are selected.\n * @throws NullPointerException if steps is null.\n */\n", "func_signal": "public SequencePopupMenu(MeasurementStep[] steps)", "code": "{\n    if (steps == null) {\n        throw new NullPointerException();\n    }\n    this.steps = steps;\n\n    add(getInsertBeforeAction());\n    add(getInsertAfterAction());\n    add(getDeleteSelectedAction());\n    add(new JSeparator());\n    add(getSaveSelectedAsAction());\n    add(getSaveAllAsAction());\n}", "path": "src\\ikayaki\\gui\\MeasurementSequencePanel.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/**\n * Generic accessor for all properties. Checks whether the value is ok and sets it. Will invoke autosaving.\n *\n * @return true if value was correct, otherwise false.\n */\n", "func_signal": "public static synchronized boolean setXXX(Object value)", "code": "{\n    if (value == null) ; // just to avoid \"value is never used\" warnings ;)\n    return false;\n}", "path": "src\\ikayaki\\Settings.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/**\n * Method generated by IntelliJ IDEA GUI Designer !!! IMPORTANT !!! DO NOT edit this method OR call it in your\n * code!\n */\n", "func_signal": "private void $$$setupUI$$$()", "code": "{\n    controlsPane = new JPanel();\n    controlsPane.setLayout(new GridLayoutManager(2, 7, new Insets(0, 0, 0, 0), 5, 0));\n    sequenceStartField = new JFormattedTextField();\n    sequenceStartField.setHorizontalAlignment(11);\n    controlsPane.add(sequenceStartField,\n            new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null,\n                    new Dimension(35, -1), null));\n    sequenceStepField = new JFormattedTextField();\n    sequenceStepField.setHorizontalAlignment(11);\n    controlsPane.add(sequenceStepField,\n            new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null,\n                    new Dimension(35, -1), null));\n    sequenceStopField = new JFormattedTextField();\n    sequenceStopField.setHorizontalAlignment(11);\n    controlsPane.add(sequenceStopField,\n            new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null,\n                    new Dimension(35, -1), null));\n    sequenceStartLabel = new JLabel();\n    sequenceStartLabel.setText(\"Start\");\n    controlsPane.add(sequenceStartLabel,\n            new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    sequenceStepLabel = new JLabel();\n    sequenceStepLabel.setText(\"Step\");\n    controlsPane.add(sequenceStepLabel,\n            new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    sequenceStopLabel = new JLabel();\n    sequenceStopLabel.setText(\"Stop\");\n    controlsPane.add(sequenceStopLabel,\n            new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    addSequenceButton = new JButton();\n    addSequenceButton.setText(\"Add Sequence\");\n    controlsPane.add(addSequenceButton,\n            new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,\n                    GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    stepValueTypeLabel = new JLabel();\n    stepValueTypeLabel.setText(\"mT\");\n    controlsPane.add(stepValueTypeLabel,\n            new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    final Spacer spacer1 = new Spacer();\n    controlsPane.add(spacer1,\n            new GridConstraints(1, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(30, -1), null));\n    loadSequenceBox = new JComboBox();\n    controlsPane.add(loadSequenceBox,\n            new GridConstraints(1, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,\n                    GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n    loadSequenceLabel = new JLabel();\n    loadSequenceLabel.setText(\"Load Set\");\n    controlsPane.add(loadSequenceLabel,\n            new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,\n                    GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null));\n}", "path": "src\\ikayaki\\gui\\MeasurementSequencePanel.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/**\n * Returns the stepValue of the last step. The returned value is 0 or greater. If there are no steps, returns 0.\n */\n", "func_signal": "private double getLastStepValue()", "code": "{\n    double stepValue = 0.0;\n    if (getProject().getSteps() > 0) {\n        stepValue = getProject().getStep(getProject().getSteps() - 1).getStepValue();\n    }\n    return Math.max(0.0, stepValue);\n}", "path": "src\\ikayaki\\gui\\MeasurementSequencePanel.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/**\n * Resize the table's columns to fit the content.\n */\n", "func_signal": "private void updateColumns()", "code": "{\n    TableColumnModel columnModel = sequenceTable.getColumnModel();\n    for (int col = 0; col < columnModel.getColumnCount(); col++) {\n        if (columnModel.getColumn(col).getHeaderValue().equals(COUNT.getColumnName(null))) {\n\n            // find out the column's preferred width using the actual cell contents\n            int width = 20;\n            Component comp;\n            for (int row = 0; row < sequenceTable.getRowCount(); row++) {\n                comp = sequenceTable.getCellRenderer(row, col).getTableCellRendererComponent(sequenceTable,\n                        sequenceTable.getValueAt(row, col), false, false, row, col);\n                width = Math.max(width, comp.getPreferredSize().width);\n            }\n            width += 5;\n            columnModel.getColumn(col).setMinWidth(width);\n            columnModel.getColumn(col).setMaxWidth(width);\n            return;\n        }\n    }\n}", "path": "src\\ikayaki\\gui\\MeasurementSequencePanel.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/**\n * Saves to the project file those properties, that do not affect the measurement calculations. Will do nothing if\n * propertiesModified is false.\n *\n * @throws NullPointerException if the current project is null.\n */\n", "func_signal": "private void saveProperties()", "code": "{\n    if (!propertiesModified) {\n        return;\n    }\n\n    /* Radio Button Groups */\n    if (measurementTypeAuto.isSelected()) {\n        getProject().setProperty(Project.MEASUREMENT_TYPE_PROPERTY, Project.MEASUREMENT_TYPE_AUTO_VALUE);\n    }\n    if (measurementTypeManual.isSelected()) {\n        getProject().setProperty(Project.MEASUREMENT_TYPE_PROPERTY, Project.MEASUREMENT_TYPE_MANUAL_VALUE);\n    }\n\n    /* Plain Text Fields */\n    getProject().setProperty(Project.OPERATOR_PROPERTY, operatorField.getText());\n    getProject().setProperty(Project.DATE_PROPERTY, dateField.getText());\n    getProject().setProperty(Project.ROCK_TYPE_PROPERTY, rockTypeField.getText());\n    getProject().setProperty(Project.AREA_PROPERTY, areaField.getText());\n    getProject().setProperty(Project.SITE_PROPERTY, siteField.getText());\n    getProject().setProperty(Project.COMMENT_PROPERTY, commentArea.getText());\n\n    /* Number Fields */\n    getProject().setProperty(Project.LATITUDE_PROPERTY, latitudeField.getText());\n    getProject().setProperty(Project.LONGITUDE_PROPERTY, longitudeField.getText());\n\n    propertiesModified = false;\n}", "path": "src\\ikayaki\\gui\\ProjectInformationPanel.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "/**\n * Calls super.setProject(project) and updates textfield with new projects data.\n */\n", "func_signal": "public void setProject(Project project)", "code": "{\n\n    // save the old project's values\n    saveProperties();\n    saveParameters();\n\n    super.setProject(project);\n    setEnabled(project != null);\n\n    if (project != null) {\n        // get values from the new project\n\n        /* Radio Button Groups */\n        measurementTypeAuto.setSelected(project.getProperty(Project.MEASUREMENT_TYPE_PROPERTY,\n                Project.MEASUREMENT_TYPE_AUTO_VALUE).equals(Project.MEASUREMENT_TYPE_AUTO_VALUE));\n        measurementTypeManual.setSelected(project.getProperty(Project.MEASUREMENT_TYPE_PROPERTY,\n                Project.MEASUREMENT_TYPE_AUTO_VALUE).equals(Project.MEASUREMENT_TYPE_MANUAL_VALUE));\n        sampleTypeHand.setSelected(project.getSampleType() == Project.SampleType.HAND);\n        sampleTypeCore.setSelected(project.getSampleType() == Project.SampleType.CORE);\n        normalizationVolume.setSelected(project.getNormalization() == Project.Normalization.VOLUME);\n        normalizationMass.setSelected(project.getNormalization() == Project.Normalization.MASS);\n\n        /* Plain Text Fields */\n        operatorField.setText(project.getProperty(Project.OPERATOR_PROPERTY, \"\"));\n        dateField.setText(\n                project.getProperty(Project.DATE_PROPERTY, DateFormat.getDateInstance().format(new Date())));\n        rockTypeField.setText(project.getProperty(Project.ROCK_TYPE_PROPERTY, \"\"));\n        areaField.setText(project.getProperty(Project.AREA_PROPERTY, \"\"));\n        siteField.setText(project.getProperty(Project.SITE_PROPERTY, \"\"));\n        commentArea.setText(project.getProperty(Project.COMMENT_PROPERTY, \"\"));\n        commentArea.setCaretPosition(0);    // scroll the viewport to the top\n\n        /* Number Fields */\n        latitudeField.setText(project.getProperty(Project.LATITUDE_PROPERTY, \"\"));\n        longitudeField.setText(project.getProperty(Project.LONGITUDE_PROPERTY, \"\"));\n        strikeField.setValue(new Double(project.getStrike()));\n        dipField.setValue(new Double(project.getDip()));\n        massField.setValue(new Double(project.getMass()));\n        volumeField.setValue(new Double(project.getVolume()));\n        susceptibilityField.setValue(new Double(project.getSusceptibility()));\n    } else {\n        // no project active, clear the form fields\n\n        /* Radio Button Groups */\n        measurementTypeAuto.setSelected(true);\n        measurementTypeManual.setSelected(false);\n        sampleTypeHand.setSelected(true);\n        sampleTypeCore.setSelected(false);\n        normalizationVolume.setSelected(true);\n        normalizationMass.setSelected(false);\n\n        /* Plain Text Fields */\n        operatorField.setText(\"\");\n        dateField.setText(\"\");\n        rockTypeField.setText(\"\");\n        areaField.setText(\"\");\n        siteField.setText(\"\");\n        commentArea.setText(\"\");\n\n        /* Number Fields */\n        latitudeField.setValue(null);\n        longitudeField.setValue(null);\n        strikeField.setValue(null);\n        dipField.setValue(null);\n        massField.setValue(null);\n        volumeField.setValue(null);\n        susceptibilityField.setValue(null);\n    }\n\n    // prevent the saving of unchanged values\n    propertiesModified = false;\n    parametersModified = false;\n}", "path": "src\\ikayaki\\gui\\ProjectInformationPanel.java", "repo_name": "luontola/ikayaki", "stars": 0, "license": "None", "language": "java", "size": 15492}
{"docstring": "//The run method; when this finishes, the thread teminates\n", "func_signal": "public void run()", "code": "{\n  try\n  {\n    while (counter <= limit)\n    {\n      System.out.println(\"Counter \" \n        + counterNumber + \" is now at \" + counter++);\n      Thread.sleep(delay);\n    }\n  }\n  catch(InterruptedException e) {}\n}", "path": "Lab 2 Soft Eng\\threads\\ThreadExample.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * Closes all aspects of the connection to the server.\n *\n * @exception IOException if an I/O error occurs when closing.\n */\n", "func_signal": "private void closeAll() throws IOException", "code": "{\n  try\n  {\n    //Close the socket\n    if (clientSocket != null)\n      clientSocket.close();\n\n    //Close the output stream\n    if (output != null)\n      output.close();\n\n    //Close the input stream\n    if (input != null)\n      input.close();\n  }\n  finally\n  {\n    // Set the streams and the sockets to NULL no matter what\n    // Doing so allows, but does not require, any finalizers\n    // of these objects to reclaim system resources if and\n    // when they are garbage collected.\n    output = null;\n    input = null;\n    clientSocket = null;\n  }\n}", "path": "Lab2\\ocsf\\client\\AbstractClient.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * Constructs an instance of an OriginatorMessage\n *\n * @param originator The client who created this message\n * @param message The contents of the message\n */\n", "func_signal": "public OriginatorMessage(ConnectionToClient originator, Object message)", "code": "{\n  this.originator = originator;\n  this.message = message;\n}", "path": "Lab 2 Soft Eng\\ocsf\\server\\OriginatorMessage.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * This method obtains input from the user and verifies that\n * it is valid.  When the input is valid, it returns a PointCP\n * object.\n *\n * @return A PointCP constructed using information obtained \n *         from the user.\n * @throws IOException If there is an error getting input from\n *         the user.\n */\n", "func_signal": "private static AbstractPoint getInput() throws IOException", "code": "{\n  byte[] buffer = new byte[1024];  //Buffer to hold byte input\n  boolean isOK = false;  // Flag set if input correct\n  String theInput = \"\";  // Input information\n  \n  //Information to be passed to the constructor\n  char coordType = 'A'; // Temporary default, to be set to P or C\n  double a = 0.0;\n  double b = 0.0;\n\n  // Allow the user to enter the three different arguments\n  for (int i = 0; i < 3; i++)\n  {\n    while (!(isOK))\n    {\n      isOK = true;  //flag set to true assuming input will be valid\n        \n      // Prompt the user\n      if (i == 0) // First argument - type of coordinates\n      {\n        System.out.print(\"Enter the type of Coordinates you \"\n          + \"are inputting ((C)artesian / (P)olar): \");\n      }\n      else // Second and third arguments\n      {\n        System.out.print(\"Enter the value of \" \n          + (coordType == 'C' \n            ? (i == 1 ? \"X \" : \"Y \")\n            : (i == 1 ? \"Rho \" : \"Theta \")) \n          + \"using a decimal point(.): \");\n      }\n\n      // Get the user's input\n      System.in.read(buffer);\n      theInput = new String(buffer).trim();\n\n      // Verify the user's input\n      try\n      {\n        if (i == 0) // First argument -- type of coordinates\n        {\n          if (!((theInput.toUpperCase().charAt(0) == 'C') \n            || (theInput.toUpperCase().charAt(0) == 'P')))\n          {\n            //Invalid input, reset flag so user is prompted again\n            isOK = false;\n          }\n          else\n          {\n            coordType = theInput.toUpperCase().charAt(0);\n          }\n        }\n        else  // Second and third arguments\n        {\n          //Convert the input to double values\n          if (i == 1)\n            a = Double.valueOf(theInput).doubleValue();\n          else\n            b = Double.valueOf(theInput).doubleValue();\n        }\n      }\n      catch(Exception e)\n      {\n        System.out.println(\"Incorrect input.\");\n        isOK = false;  //Reset flag as so not to end while loop\n      }\n    }\n\n    //Reset flag so while loop will prompt for other arguments\n    isOK = false;\n  }\n  //Return a new object\n  if (coordType == 'C')\n  \treturn (new CartesianPoint(a, b));\n  else\n  \treturn (new PolarPoint(a, b));\n}", "path": "Lab 1 Soft Eng\\design5\\PointCPTest.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * Waits for messages from the server. When each arrives,\n * a call is made to <code>handleMessageFromServer()</code>.\n * Not to be explicitly called.\n */\n", "func_signal": "final public void run()", "code": "{\n  connectionEstablished();\n\n  // The message from the server\n  Object msg;\n\n  // Loop waiting for data\n\n  try\n  {\n    while(!readyToStop)\n    {\n      // Get data from Server and send it to the handler\n      // The thread waits indefinitely at the following\n      // statement until something is received from the server\n      msg = input.readObject();\n\n      // Concrete subclasses do what they want with the\n      // msg by implementing the following method\n      handleMessageFromServer(msg);\n    }\n  }\n  catch (Exception exception)\n  {\n    if(!readyToStop)\n    {\n      try\n      {\n        closeAll();\n      }\n      catch (Exception ex) { }\n\n      connectionException(exception);\n    }\n  }\n  finally\n  {\n    clientReader = null;\n  }\n}", "path": "Lab2\\ocsf\\client\\AbstractClient.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * Opens the connection with the server.\n * If the connection is already opened, this call has no effect.\n *\n * @exception IOException if an I/O error occurs when opening.\n */\n", "func_signal": "final public void openConnection() throws IOException", "code": "{\n  // Do not do anything if the connection is already open\n  if(isConnected())\n    return;\n\n  //Create the sockets and the data streams\n  try\n  {\n    clientSocket= new Socket(host, port);\n    output = new ObjectOutputStream(clientSocket.getOutputStream());\n    input = new ObjectInputStream(clientSocket.getInputStream());\n  }\n  catch (IOException ex)\n  // All three of the above must be closed when there is a failure\n  // to create any of them\n  {\n    try\n    {\n      closeAll();\n    }\n    catch (Exception exc) { }\n\n    throw ex; // Rethrow the exception.\n  }\n\n  clientReader = new Thread(this);  //Create the data reader thread\n  readyToStop = false;\n  clientReader.start();  //Start the thread\n}", "path": "Lab2\\ocsf\\client\\AbstractClient.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * Constructs the client.\n *\n * @param  host  the server's host name.\n * @param  port  the port number.\n */\n", "func_signal": "public AbstractClient(String host, int port)", "code": "{\n  // Initialize variables\n  this.host = host;\n  this.port = port;\n}", "path": "Lab2\\ocsf\\client\\AbstractClient.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "//Instance methods ************************************************\n/**\n * This method waits for input from the console.  Once it is \n * received, it sends it to the client's message handler.\n */\n", "func_signal": "public void accept()", "code": "{\n  try\n  {\n    BufferedReader fromConsole = \n      new BufferedReader(new InputStreamReader(System.in));\n    String message;\n    while (true) \n    {\n      message = fromConsole.readLine();\n      client.handleMessageFromClientUI(new Message(username,message));\n    }\n  } \n  catch (Exception ex) \n  {\n    System.out.println\n      (\"Unexpected error while reading from console!\");\n  }\n}", "path": "Lab2\\ClientConsole.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * This method is responsible for the creation of the PointCP\n * object.  This can be done in two ways; the first, by using the\n * command line and running the program using <code> java \n * PointCPTest &lt;coordtype (c/p)&gt; &lt;X/RHO&gt; &lt;Y/THETA&gt;\n * </code> and the second by getting the program to prompt the user.\n * If the user does not enter a valid sequence at the command line,\n * the program will prompte him or her.\n *\n * @param args[0] The coordinate type.  P for polar and C for\n *                cartesian.\n * @param args[1] The value of X or RHO.\n * @param args[2] The value of Y or THETA.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t  AbstractPoint point;\n\t  AbstractPoint point2;\n\t  \n  System.out.println(\"Cartesian-Polar Coordinates Conversion Program\");\n\n  // Check if the user input coordinates from the command line\n  // If he did, create the PointCP object from these arguments.\n  // If he did not, prompt the user for them.\n  try\n  {\n  \tint arg0 = Integer.valueOf(args[0]);\n  \tdouble arg1 = Double.valueOf(args[1]).doubleValue();\n  \tdouble arg2 = Double.valueOf(args[2]).doubleValue();\n  \tif (arg0 == AbstractPoint.CARTESIAN)\n  \t{\n  \t\tpoint = new CartesianPoint(arg1, arg2);\n  \t\tpoint2 = getOther(point);\n  \t}\n  \telse if (arg0 == AbstractPoint.POLAR)\n  \t{\n      \tpoint = new PolarPoint(arg1, arg2);\n  \t\tpoint2 = getOther(point);\n  \t}\n      else \n      {\n      \tpoint = getInput();\n      \tpoint2 = getInput();\n      }\n  }\n  catch(Exception e)\n  {\n    // This isn't really needed: e.printStackTrace();\n    // If we arrive here, it is because either there were no\n    // command line arguments, or they were invalid\n    if(args.length != 0)\n      System.out.println(\"Invalid arguments on command line\");\n\n    try\n    {\n      point = getInput();\n      point2 = getOther(point);\n    }\n    catch(IOException ex)\n    {\n      System.out.println(\"Error getting input. Ending program.\");\n      return;\n    }\n  }\n  System.out.println(\"\\nYou entered:\\n\" + point);\n  System.out.println(\"\\nAfter asking to store as Cartesian:\\n\" + point);\n  point.convertStorageToPolar();\n  System.out.println(\"\\nAfter asking to store as Polar:\\n\" + point2);\n}", "path": "Lab 1 Soft Eng\\design5\\PointCPTest.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * Hook method called each time an exception\n * is raised by the client listening thread.\n *\n * @param exception the exception raised.\n */\n", "func_signal": "protected void connectionException(Exception exception)", "code": "{\n  setChanged();\n  notifyObservers(CONNECTION_EXCEPTION);\n}", "path": "Lab2\\ocsf\\client\\ObservableClient.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * Sends an object to the server. This is the only way that\n * methods should communicate with the server.\n *\n * @param msg   The message to be sent.\n * @exception IOException if an I/O error occurs when sending\n */\n", "func_signal": "final public void sendToServer(Object msg) throws IOException", "code": "{\n  if (clientSocket == null || output == null)\n    throw new SocketException(\"socket does not exist\");\n\n  output.writeObject(msg);\n}", "path": "Lab2\\ocsf\\client\\AbstractClient.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * Closes the connection to the server.\n *\n * @exception IOException if an I/O error occurs when closing.\n */\n", "func_signal": "final public void closeConnection() throws IOException", "code": "{\n  // Prevent the thread from looping any more\n  readyToStop= true;\n\n  try\n  {\n    closeAll();\n  }\n  finally\n  {\n    // Call the hook method\n    connectionClosed();\n  }\n}", "path": "Lab2\\ocsf\\client\\AbstractClient.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "// The main method: Executed when the program is started\n", "func_signal": "public static void main(String[] args)", "code": "{\n  //Create 3 threads and run them\n  Thread firstThread = new Thread(new ThreadExample(5, 1, 66));\n  Thread secondThread = new Thread(new ThreadExample(5, 2, 45));\n  Thread thirdThread = new Thread(new ThreadExample(5, 3, 80));\n\n  firstThread.start();\n  secondThread.start();\n  thirdThread.start();\n}", "path": "Lab 2 Soft Eng\\threads\\ThreadExample.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * This method is responsible for the creation of the Client UI.\n *\n * @param args[0] The host to connect to.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n  String host = \"\";\n  int port = 0;  //The port number\n\n  try\n  {\n    host = args[0];\n  }\n  catch(ArrayIndexOutOfBoundsException e)\n  {\n    host = \"localhost\";\n  }\n  try\n  {\n    port = Integer.parseInt(args[1]);\n  }\n  catch (NumberFormatException e)\n  {\n    System.out.println(\"Warning: Port argument is not a number, using \" + DEFAULT_PORT);\n    port = DEFAULT_PORT;\n  }\n  catch (ArrayIndexOutOfBoundsException e)\n  {\n    port = DEFAULT_PORT;\n  }\n  ClientConsole chat= new ClientConsole(host, port);\n  chat.accept();  //Wait for console data\n}", "path": "Lab2\\ClientConsole.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * Constructs an instance of the ClientConsole UI.\n *\n * @param host The host to connect to.\n * @param port The port to connect on.\n */\n", "func_signal": "public ClientConsole(String host, int port)", "code": "{\n  try \n  {\n    client= new CommandClient(host, port, this);\n  } \n  catch(IOException exception) \n  {\n    System.out.println(\"Error: Can't setup connection!\"\n              + \" Terminating client.\");\n    System.exit(1);\n  }\n}", "path": "Lab2\\ClientConsole.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * Hook method called after a connection has been established.\n */\n", "func_signal": "protected void connectionEstablished()", "code": "{\n  setChanged();\n  notifyObservers(CONNECTION_ESTABLISHED);\n}", "path": "Lab2\\ocsf\\client\\ObservableClient.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * Starts the client. The default host is localhost.\n * The default port is 12345.\n */\n", "func_signal": "public static void main(String[] arg)", "code": "{\n  ClientFrame sf;\n  if (arg.length==0)\n   sf = new ClientFrame(\"localhost\",12345);\n  if (arg.length==1)\n   sf = new ClientFrame(\"localhost\",Integer.parseInt(arg[0]));\n  if (arg.length==2)\n   sf = new ClientFrame(arg[0],Integer.parseInt(arg[1]));\n}", "path": "Lab 2 Soft Eng\\ocsftester\\ClientFrame.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * Hook method called after the connection has been closed.\n */\n", "func_signal": "protected void connectionClosed()", "code": "{\n  setChanged();\n  notifyObservers(CONNECTION_CLOSED);\n}", "path": "Lab2\\ocsf\\client\\ObservableClient.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * This method is used to handle messages from the server.  This method\n * can be overriden but should always call notifyObservers().\n *\n * @param message The message received from the client.\n */\n", "func_signal": "protected void handleMessageFromServer(Object message)", "code": "{\n  setChanged();\n  notifyObservers(message);\n}", "path": "Lab2\\ocsf\\client\\ObservableClient.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "// Constructor\n", "func_signal": "private ThreadExample(int countTo, int number, long delay)", "code": "{\n  counter = 0;\n  limit = countTo;\n  counterNumber = number;\n  this.delay = delay;\n}", "path": "Lab 2 Soft Eng\\threads\\ThreadExample.java", "repo_name": "r0ssar00/seg2105_coursework", "stars": 1, "license": "None", "language": "java", "size": 13416}
{"docstring": "/**\n * initialize the object\n */\n", "func_signal": "public void initialize()", "code": "{\n\tLog.debug(this.getClass().getName() + \".initialize() starting\");\n\n\t/*\n\t * Initialize the data for the Ads\n\t */\n\tadsHtml = new HTML(\"Advertisements go here\");\n\n\t/*\n\t * Initialize the data for the Title\n\t */\n\n\tLog.debug(this.getClass().getName() + \".initialize() finished\");\n}", "path": "src\\com\\coolisland\\client\\model\\KidMathModel.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * clears all the contents from the workspace panel\n */\n", "func_signal": "public void reset()", "code": "{\n\n\tLog.debug(this.getClass().getName() + \".reset()\");\n\n\ttheWorkspaceContent = null;\n\tif (theDockPanel != null) {\n\t\ttheDockPanel.clear();\n\t} else {\n\t\tLog.error(\"Unable to create theDockPanel panels\");\n\t\tthrow new NullPointerException(\"Unable to initialize the theDockPanel panel\");\n\t}\n\n\tprintPanelInfo();\n}", "path": "src\\com\\coolisland\\client\\gui\\WorkspacePanel.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * resets the content of the workspace panel\n */\n", "func_signal": "public void resetWorkspacePanel()", "code": "{\n\tLog.debug(this.getClass().getName() + \".resetWorkspacePanel() starting\");\n\n\ttheWorkspacePanel.reset();\n\n\tLog.debug(this.getClass().getName() + \".resetWorkspacePanel() finished\");\n}", "path": "src\\com\\coolisland\\client\\gui\\ScreenManager.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * initializes all the panel views, models, and controllers\n */\n", "func_signal": "public void initialize()", "code": "{\n\tLog.debug(this.getClass().getName() + \".initialize() starting\");\n\n\t/*\n\t * initialize the general model\n\t */\n\tLog.debug(this.getClass().getName() + \".initialize() initializing KidMathModel\");\n\tKidMathModel.getInstance().initialize();\n\n\t/*\n\t * initialize the navigation panel\n\t */\n\n\t/*\n\t * initialize the specific models\n\t */\n\n\t/*\n\t * initialize the specific controllers\n\t */\n\tLog.debug(this.getClass().getName() + \".initialize() initializing NavigationController\");\n\tNavigationController.getInstance().initialize();\n\n\t/*\n\t * initialize the specific panels\n\t */\n\tLog.debug(this.getClass().getName() + \".initialize() initializing NavigationPanel\");\n\tNavigationPanel.getInstance().initialize();\n\n\tLog.debug(this.getClass().getName() + \".initialize() initializing AdsPanel\");\n\tAdsPanel.getInstance().initialize();\n\n\tLog.debug(this.getClass().getName() + \".initialize() finished\");\n}", "path": "src\\com\\coolisland\\client\\controller\\KidMathController.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * initializes the navigation panel with some hard coded strings\n */\n", "func_signal": "private void initialize()", "code": "{\n\tString hardCodedText = \"This is a <code>ScrollPanel</code> contained at \"\n\t        + \"the center of a <code>DockPanel</code>.  \"\n\t        + \"By putting some fairly large contents \"\n\t        + \"in the middle and setting its size explicitly, it becomes a \"\n\t        + \"scrollable area within the page, but without requiring the use of \"\n\t        + \"an IFRAME.<br><br>\"\n\t        + \"Here's quite a bit more meaningless text that will serve primarily \"\n\t        + \"to make this thing scroll off the bottom of its visible area.  \"\n\t        + \"Otherwise, you might have to make it really, really small in order \"\n\t        + \"to see the nifty scroll bars! \" + \"Additional text to create scroll bar \"\n\t        + \"also setting the <B>ScrollPanel height</B> to 40px \"\n\t        + \"Setting the <i>HTML height</i> to 50px\";\n\n\ttheWorkspaceContent = new ArrayList<String>();\n\ttheWorkspaceContent.add(hardCodedText);\n\n\t// initialize the DockPanel\n\ttheDockPanel = new DockPanel();\n\n\tif (theDockPanel != null) {\n\t\t// indentation/border between text and frame\n\t\ttheDockPanel.setSpacing(3);\n\n\t\ttheDockPanel.setHorizontalAlignment(DockPanel.ALIGN_LEFT);\n\t\ttheDockPanel.setVerticalAlignment(DockPanel.ALIGN_TOP);\n\n\t\ttheDockPanel.setHeight(\"100%\");\n\t\ttheDockPanel.setWidth(\"100%\");\n\n\t\ttheDockPanel.setStyleName(\"workspace-panel\");\n\t} else {\n\t\tSystem.out.println(\"Unable to create dock panels\");\n\t\tthrow new NullPointerException(\"Unable to initialize the dock panel\");\n\t}\n\n\t/*\n\t * redraw the panel\n\t */\n\tredraw();\n}", "path": "src\\com\\coolisland\\client\\gui\\WorkspacePanel.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * adds a link to the navigation panel\n */\n", "func_signal": "public void addContent(String content)", "code": "{\n\tif (content == null) {\n\t\treturn;\n\t}\n\n\tLog.debug(this.getClass().getName() + \".addLink() content:\" + content);\n\n\t/*\n\t * initialize the content if needed\n\t */\n\tif (theWorkspaceContent == null) {\n\t\ttheWorkspaceContent = new ArrayList<String>();\n\t}\n\n\t/*\n\t * add the new content to the list and redraw the navigation menu\n\t */\n\ttheWorkspaceContent.add(content);\n\tredraw();\n}", "path": "src\\com\\coolisland\\client\\gui\\WorkspacePanel.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Private constructor prevents instantiation from other classes\n */\n", "func_signal": "private KidMathModel()", "code": "{\n\tLog.setCurrentLogLevel(Log.LOG_LEVEL_DEBUG);\n\tLog.debug(\"Constructor KidMathModel() starting\");\n\n\tinitialize();\n\n\tLog.debug(\"Constructor KidMathModel() finished\");\n}", "path": "src\\com\\coolisland\\client\\model\\KidMathModel.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * This is the entry point method.\n */\n", "func_signal": "public void onModuleLoad()", "code": "{\n\tLog.setUncaughtExceptionHandler();\n\n\tDeferredCommand.addCommand(new Command() {\n\t\tpublic void execute() {\n\t\t\tonModuleLoad2();\n\t\t}\n\t});\n}", "path": "src\\com\\coolisland\\client\\KidMath.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Returns the Navigation Panel\n * \n * @return navigation panel\n */\n", "func_signal": "public Widget getWidget()", "code": "{\n\tLog.debug(this.getClass().getName() + \".getWidget()\");\n\n\t// return dock;\n\treturn verticalPanel;\n}", "path": "src\\com\\coolisland\\client\\gui\\ScreenManager.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * add a link to the navigation model\n */\n", "func_signal": "public void addLink(String linkLabel)", "code": "{\n\tLog.debug(this.getClass().getName() + \".addLink() starting\");\n\n\tif (linkLabel == null) {\n\t\treturn;\n\t}\n\n\tLog.debug(this.getClass().getName() + \".addLink() linkLabel:\" + linkLabel);\n\n\t/*\n\t * initialize the navigation links if needed\n\t */\n\tif (theNavigationLinks == null) {\n\t\ttheNavigationLinks = new ArrayList<String>();\n\t}\n\n\t/*\n\t * add the new link to the navigation link list and redraw the navigation menu\n\t */\n\ttheNavigationLinks.add(linkLabel);\n\n\tLog.debug(this.getClass().getName() + \".addLink() finished\");\n}", "path": "src\\com\\coolisland\\client\\model\\NavigationModel.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * \n */\n", "func_signal": "public void printDebugInfo()", "code": "{\n\tLog.debug(this.getClass().getName() + \".printDebugInfo() starting\");\n\n\tif (theDockPanel != null) {\n\t\tint numWidgets = theDockPanel.getWidgetCount();\n\n\t\tLog.debug(\"Navigation Panel: \" + theDockPanel.toString());\n\n\t\tLog.debug(\"Navigation Panel has \" + numWidgets + \" widgets.\");\n\n\t\tfor (int i = 0; i < numWidgets; i++) {\n\t\t\tWidget widget = theDockPanel.getWidget(i);\n\t\t\tLog.debug(\"Widget: \" + widget.toString());\n\n\t\t\tElement element = (Element) widget.getElement();\n\t\t\tLog.debug(element.getString());\n\t\t\tLog.debug(\"Element: \" + element.toString());\n\t\t}\n\t}\n\n\tVerticalPanel panel = updateNavigationLinks();\n\tif (panel != null) {\n\t\tint numWidgets = panel.getWidgetCount();\n\n\t\tLog.debug(\"Navigation Links: \" + panel.toString());\n\n\t\tLog.debug(\"Navigation Links has \" + numWidgets + \" widgets.\");\n\n\t\tfor (int i = 0; i < numWidgets; i++) {\n\t\t\tWidget widget = panel.getWidget(i);\n\t\t\tLog.debug(\"Widget: \" + widget.toString());\n\n\t\t\tElement element = (Element) widget.getElement();\n\t\t\tLog.debug(element.getString());\n\t\t\tLog.debug(\"Element: \" + element.toString());\n\t\t}\n\t}\n\n\tLog.debug(this.getClass().getName() + \".printDebugInfo() finished\");\n}", "path": "src\\com\\coolisland\\client\\gui\\NavigationPanel.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Private constructor prevents instantiation from other classes\n */\n", "func_signal": "private NavigationModel()", "code": "{\n\tLog.debug(this.getClass().getName() + \".Constructor NavigationModel() starting\");\n\n\tinitialize();\n\n\tLog.debug(this.getClass().getName() + \".Constructor NavigationModel() finished\");\n}", "path": "src\\com\\coolisland\\client\\model\\NavigationModel.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * resets the navigation panel view and model\n */\n", "func_signal": "public void reset()", "code": "{\n\tLog.debug(this.getClass().getName() + \".reset() starting\");\n\n\tLog.debug(this.getClass().getName() + \".reset()\");\n\n\tNavigationModel.getInstance().reset();\n\tNavigationPanel.getInstance().reset();\n\tinitialize();\n\n\tLog.debug(this.getClass().getName() + \".reset() finished\");\n}", "path": "src\\com\\coolisland\\client\\controller\\NavigationController.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Returns the workspace panel\n * \n * @return workspace panel\n */\n", "func_signal": "public Widget getWorkSpace()", "code": "{\n\tLog.debug(this.getClass().getName() + \".getWorkSpace()\");\n\n\treturn theWorkspacePanel;\n}", "path": "src\\com\\coolisland\\client\\gui\\ScreenManager.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Adds a link to the navigation panel\n * \n * @param linkLabel\n */\n", "func_signal": "public void addContentToWorkspacePanel(String content)", "code": "{\n\tLog.debug(this.getClass().getName() + \".addContentToWorkspacePanel() starting\");\n\n\ttheWorkspacePanel.addContent(content);\n\n\tLog.debug(this.getClass().getName() + \".addContentToWorkspacePanel() finished\");\n}", "path": "src\\com\\coolisland\\client\\gui\\ScreenManager.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Initialize all the panels\n */\n", "func_signal": "private void initialize()", "code": "{\n\tLog.debug(this.getClass().getName() + \".initialize() starting\");\n\n\tdock = new DockPanel();\n\n\tverticalPanel = new VerticalPanel();\n\n\tif (dock != null) {\n\t\t// Allow 4 pixels of spacing between each cell\n\t\tdock.setSpacing(5);\n\t\tdock.setWidth(\"100%\");\n\n\t\t/*\n\t\t * Center each component horizontally within each cell for each component added after\n\t\t * this call. A shortcut to calling dock.setCellHorizontalAlignment() for each cell.\n\t\t */\n\t\tdock.setHorizontalAlignment(DockPanel.ALIGN_CENTER);\n\n\t\t// create the title panel\n\t\tTitlePanel title = new TitlePanel();\n\t\tdock.add(title.getWidget(), DockPanel.NORTH);\n\n\t\t// create the copyright panel\n\t\tCopyRightPanel copyrightPanel = new CopyRightPanel();\n\t\tdock.add(copyrightPanel.getWidget(), DockPanel.SOUTH);\n\n\t\t/*\n\t\t * initialize the models and controllers\n\t\t */\n\t\tLog.debug(this.getClass().getName()\n\t\t        + \".initialize()  calling KidMathController.initialize()\");\n\t\tKidMathController.getInstance().initialize();\n\n\t\tLog.debug(this.getClass().getName()\n\t\t        + \".initialize()  calling KidMathController.printDebugInfo()\");\n\t\tKidMathController.getInstance().printDebugInfo();\n\n\t\tLog.debug(this.getClass().getName()\n\t\t        + \".initialize()  calling KidMathModel.printDebugInfo()\");\n\t\tKidMathModel.getInstance().printDebugInfo();\n\n\t\t// create the ads panel\n\t\tdock.add(AdsPanel.getInstance().getWidget(), DockPanel.EAST);\n\t\tAdsPanel.getInstance().draw();\n\n\t\t// create the navigation panel\n\t\t// NavigationController.getInstance().reset();\n\t\t// NavigationPanel.getInstance().printDebugInfo();\n\t\t// NavigationModel.getInstance().printDebugInfo();\n\t\t// NavigationController.getInstance().printDebugInfo();\n\n\t\tLog.debug(this.getClass().getName()\n\t\t        + \".initialize()  adding NavigationPanel to dockpanel\");\n\t\tdock.add(NavigationPanel.getInstance().getWidget(), DockPanel.WEST);\n\t\t// NavigationPanel.getInstance().draw();\n\n\t\t// create the header panel\n\t\tHeaderPanel headerPanel = new HeaderPanel();\n\t\tdock.add(headerPanel.getWidget(), DockPanel.NORTH);\n\n\t\t// create the footer panel\n\t\tFooterPanel footerPanel = new FooterPanel();\n\t\tdock.add(footerPanel.getWidget(), DockPanel.SOUTH);\n\n\t\t// Add a workspace panel in the center\n\t\tdock.add(theWorkspacePanel.getWidget(), DockPanel.CENTER);\n\n\t\t// add all the vertical panels to a vertical panel\n\t\tverticalPanel.add(dock);\n\t} else {\n\t\tSystem.out.println(\"Unable to create dock panels\");\n\t\tthrow new NullPointerException(\"Unable to initialize the dock panel\");\n\t}\n\n\tLog.debug(this.getClass().getName() + \".initialize() finished\");\n}", "path": "src\\com\\coolisland\\client\\gui\\ScreenManager.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * initializes the navigation panel view and model\n */\n", "func_signal": "public void initialize()", "code": "{\n\tLog.debug(this.getClass().getName() + \".initialize() starting\");\n\n\t/*\n\t * build the navigation links...\n\t */\n\tfor (int i = 1; i < 10; i++) {\n\t\tString linkLabel = \"Link \" + i;\n\t\tNavigationModel.getInstance().addLink(linkLabel);\n\t}\n\n\t/*\n\t * initialize the view\n\t */\n\tNavigationPanel.getInstance().initialize();\n\n\tLog.debug(this.getClass().getName() + \".initialize() finished\");\n}", "path": "src\\com\\coolisland\\client\\controller\\NavigationController.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * resets the panel views and models\n */\n", "func_signal": "public void reset()", "code": "{\n\tLog.debug(this.getClass().getName() + \".reset() starting\");\n\n\tinitialize();\n\n\tLog.debug(this.getClass().getName() + \".reset() finished\");\n}", "path": "src\\com\\coolisland\\client\\controller\\KidMathController.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * initializes the navigation panel with some hard coded strings\n */\n", "func_signal": "public void initialize()", "code": "{\n\tLog.debug(this.getClass().getName() + \".initialize() starting\");\n\n\ttheDockPanel = new DockPanel();\n\n\tif (theDockPanel != null) {\n\t\t// indentation/border between text and frame\n\t\ttheDockPanel.setSpacing(3);\n\n\t\ttheDockPanel.setHorizontalAlignment(DockPanel.ALIGN_LEFT);\n\t\ttheDockPanel.setVerticalAlignment(DockPanel.ALIGN_TOP);\n\n\t\ttheDockPanel.setHeight(\"100%\");\n\n\t\ttheDockPanel.setStyleName(\"navigation-panel\");\n\t} else {\n\t\tLog.error(\"Unable to create navigation panel\");\n\t\tthrow new NullPointerException(\"Unable to initialize the theDockPanel panel\");\n\t}\n\n\tLog.debug(this.getClass().getName() + \".initialize() finished\");\n}", "path": "src\\com\\coolisland\\client\\gui\\NavigationPanel.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * initialize the object\n */\n", "func_signal": "private void initialize()", "code": "{\n\tLog.debug(this.getClass().getName() + \".initialize() starting\");\n\n\ttheNavigationLinks = new ArrayList<String>();\n\n\tLog.debug(this.getClass().getName() + \".initialize() finished\");\n}", "path": "src\\com\\coolisland\\client\\model\\NavigationModel.java", "repo_name": "grasshopper/Math-With-GWT-", "stars": 1, "license": "None", "language": "java", "size": 209}
{"docstring": "/**\n * Method that determines the size of the BinaryNode \n * \n * @return \tsize of the BinaryNode\n */\n", "func_signal": "public int size()", "code": "{\n\tint size = 1;\n\tif(left != null) {\n\t\tsize += left.size();\n\t}\n\tif(right != null) {\n\t\tsize += right.size();\n\t}\n\treturn size;\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Recursive method that returns an ArrayList of the BinaryNode and its children\n * \n * @param list\tthe ArrayList that elements should be added onto\n * @return \tArrayList of the BinaryNode and its children\n */\n", "func_signal": "public ArrayList<T> toArrayList(ArrayList<T> list)", "code": "{\n\tif(left != null) {\n\t\tleft.toArrayList(list);\n\t}\n\tlist.add(element);\n\tif(right != null) {\n\t\tright.toArrayList(list);\n\t}\n\treturn list;\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Get method that returns a pointer to the item provided\n * \n * @param item item to be found in the BinarySearchTree\n * @return pointer to item if found; null if not found\n * @exception IllegalArgumentException if item is null\n */\n", "func_signal": "public T get(T item)", "code": "{\n\tif(item == null) {\n\t\tthrow new IllegalArgumentException();\n\t}\n\treturn root.get(item);\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Method that determines the height of the BinaryNode\n * \n * @return \theight of the BinaryNode\n */\n", "func_signal": "public int height()", "code": "{\n\tint leftheight = 0, rightheight = 0;\n\tif(left != null) {\n\t\tleftheight = 1 + left.height();\n\t}\n\tif(right != null) {\n\t\trightheight = 1 + right.height();\n\t}\n\tif(leftheight > rightheight) {\n\t\treturn leftheight;\n\t} else { \n\t\treturn rightheight;\n\t}\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Constructs a preOrderTreeIterator\n * Sets the modification boolean flag to false\n * \n * @param node\tBinaryNode to start the iterator from\n */\n", "func_signal": "public preOrderTreeIterator(BinaryNode node)", "code": "{\n\tif(node != null) {\n\t\tlist.push(node);\n\t\tthis.mod = modCount;\n\t}\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Checks if the provided BinaryNode has a left child\n * \n * @param node\tnode to to check if it has a left child\n */\n", "func_signal": "public void checkLeft(BinaryNode node)", "code": "{\n\twhile(node != null) {\n\t\tlist.push(node);\n\t\tnode = node.left;\n\t}\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Constructs an inOrderTreeIterator\n * Sets the modification boolean flag to false\n * \n * @param node\tBinaryNode to start the iterator from\n */\n", "func_signal": "public inOrderTreeIterator(BinaryNode node)", "code": "{\n\tthis.mod = modCount;\n\tcheckLeft(node);\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Get method that returns a pointer to the item provided\n * \n * @param item item to be found in the BinaryNode\n * @return pointer to item if found; null if not found\n */\n", "func_signal": "public T get(T item)", "code": "{\n\tif(item.compareTo(element) > 0) {\n\t\treturn right.get(item);\n\t} else if(item.compareTo(element) < 0) {\n\t\treturn left.get(item);\n\t} else {\n\t\treturn element;\n\t}\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Method that finds the largest left child\n * \n * @param node\tBinaryNode to look for largest left child\n * @return \tthe largest left child of the provided BinaryNode\n */\n", "func_signal": "public BinaryNode findLargestChild(BinaryNode node)", "code": "{\n\twhile(node.right != null) {\n\t\tnode = node.right;\n\t}\n\treturn node;\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Constructs a BinaryNode\n * Sets the left and right children to null\n * \n * @param initelement\tThe element that becomes the BinaryNode\n */\n", "func_signal": "public BinaryNode(T initelement)", "code": "{\n\telement = initelement;\n\tleft = null;\n\tright = null;\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Method that returns the next BinaryNode element from the BinarySearchTree\n * \n * @return BinaryNode\telement in the BinarySearchTree\n * @exception \tConcurrentModificationException if the BinarySearchTree was modified after initializing the iterator\n * @exception \tNoSuchElementException if there are no more elements to return\n */\n", "func_signal": "public T next()", "code": "{\n\tif(this.mod != modCount) {\n\t\tthrow new ConcurrentModificationException();\n\t}\n\tBinaryNode item = null;\n\tif(list.empty()) {\n\t\tthrow new NoSuchElementException();\n\t}\n\titem = list.pop();\n\tcheckLeft(item.right);\n\tnode = item;\n\treturn item.element;\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Returns a boolean value representing whether the tree was modified\n * or not. The item argument must be of the same type that was used \n * when initiating the BinarySearchTree class.\n *\n * @param item\tthe item to be inserted into the BinarySearchTree\n * @return      true if the tree was modified, false if not\n * @exception\tIllegalArgumentException if item is null\n */\n", "func_signal": "public boolean insert(T item)", "code": "{\n\tif(item == null) {\n\t\tthrow new IllegalArgumentException();\n\t}\n\tif(root != null) {\n\t\treturn root.insert(item);\n\t} else {\n\t\troot = new BinaryNode(item);\n\t\tmodCount++;\n\t\treturn true;\n\t} \n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Removes the provided item from the BinaryNode\n * In the event of the BinaryNode having two children, the\n * algorithm finds the largest left child.\n * \n * @param item \tthe item that will be removed from the BinaryNode\n * @param mod \tModWrapper boolean that will be set to true if remove successful\n * @return \tBinaryNode that is removed\n */\n", "func_signal": "public BinaryNode remove(T item, modWrapper mod)", "code": "{\n\tif(left == null && right == null) {\n\t\tif(item.compareTo(element) == 0) {\n\t\t\tmod.setTrue();\n\t\t\treturn null;\n\t\t}\n\t\treturn this;\n\t} else if(right == null) {\n\t\tif(item.compareTo(element) < 0) {\n\t\t\tleft = left.remove(item, mod);\n\t\t}\n\t\tmod.setTrue();\n\t\treturn left;\n\t} else if(left == null) {\n\t\tif(item.compareTo(element) > 0) {\n\t\t\tright = right.remove(item, mod);\n\t\t}\n\t\tmod.setTrue();\n\t\treturn right;\n\t} else {\n\t\tif(item.compareTo(element) > 0) {\n\t\t\tright = right.remove(item,mod);\n\t\t} else if(item.compareTo(element) < 0) {\n\t\t\tleft = left.remove(item, mod);\n\t\t} else {\n\t\t\tT temp = element;\n\t\t\tBinaryNode largestChildNode = findLargestChild(left);\n\t\t\telement = largestChildNode.element;\n\t\t\tlargestChildNode.element = temp;\n\t\t\tleft = left.remove(temp, mod);\n\t\t}\n\t\treturn this;\n\t}\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Method that returns a String representation of the BinarySearchTree\n * \n * @return \tstring in [element, element] format with the BinarySearchTree BinaryNodes in order \n */\n", "func_signal": "public String toString()", "code": "{\n\tString temp = \"\";\n\tif(root == null) {\n\t\treturn temp;\n\t}\n\tIterator<T> i = iterator();\n\twhile(i.hasNext()) {\n\t\ttemp += \"[\" + i.next() + \"]\";\n\t\tif(i.hasNext()) {\n\t\t\ttemp += \", \";\n\t\t}\n\t}\n\treturn temp;\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Removes an element from the BinarySearchTree\n * \n * @exception\tIllegalStateException if next() not called before\n */\n", "func_signal": "public void remove()", "code": "{\n\tif(node == null) {\n\t\tthrow new IllegalStateException();\n\t}\n\tif(BinarySearchTree.this.remove(node.element)) {\n\t\tnode = null;\n\t\tmod++;\n\t}\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Removes the provided item from the BinarySearchTree\n * \n * @param item\tthe item that will be removed from the BinarySearchTree\n * @return\t\ttrue if remove successful; false if not\n * @exception\tIllegalArgumentException if item is null\n */\n", "func_signal": "public boolean remove(T item)", "code": "{\n\tmodWrapper mod = new modWrapper();\n\tif(item == null) {\n\t\tthrow new IllegalArgumentException();\n\t}\n\tif(root != null) {\n\t\troot = root.remove(item, mod);\n\t}\n\tif(mod.getValue()) {\n\t\tmodCount++;\n\t}\n\treturn mod.getValue();\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Method that returns the next BinaryNode element from the BinarySearchTree\n * \n * @return BinaryNode\telement in the BinarySearchTree\n * @exception \tConcurrentModificationException if the BinarySearchTree was modified after initializing the iterator\n * @exception \tNoSuchElementException if there are no more elements to return\n */\n", "func_signal": "public T next()", "code": "{\n\tif(this.mod != modCount) {\n\t\tthrow new ConcurrentModificationException();\n\t}\n\tBinaryNode item = null;\n\t\n\tif(!list.empty()) {\n\t\titem = list.pop();\n\t} else {\n\t\tthrow new NoSuchElementException();\n\t}\n\t\n\tif(item.right != null) {\n\t\tlist.push(item.right);\n\t}\n\tif(item.left != null) {\n\t\tlist.push(item.left);\n\t}\n\tnode = item;\n\treturn item.element;\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Method that returns an ArrayList representation of the BinarySearchTree\n * \n * @return \tArrayList with the nodes in order\n */\n", "func_signal": "public ArrayList<T> toArrayList()", "code": "{\n\tif(root == null) {\n\t\treturn new ArrayList<T>();\n\t}\n\treturn root.toArrayList(new ArrayList<T>());\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Removes an element from the BinarySearchTree\n * \n * @exception\tIllegalStateException if next() not called before\n */\n", "func_signal": "public void remove()", "code": "{\n\tif(node == null) {\n\t\tthrow new IllegalStateException();\n\t}\n\tif(BinarySearchTree.this.remove(node.element)) {\n\t\tnode = null;\n\t\tmod++;\n\t}\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Inserts the provided element as a child to the BinaryNode\n * The item becomes a left child if less than current BinaryNode\n * The item becomes a right child if greater than current BinaryNode\n * If the insert is successful adds 1 to the modCount\n * \n * @param item\titem to be inserted as a child to the BinaryNode\n * @return \ttrue if insert successful; false if not\n */\n", "func_signal": "public boolean insert(T item)", "code": "{\n\tif(element.compareTo(item) < 0) {\n\t\tif(right != null) {\n\t\t\treturn right.insert(item);\n\t\t} else {\n\t\t\tright = new BinaryNode(item);\n\t\t\tmodCount++;\n\t\t\treturn true;\n\t\t}\n\t} else if(element.compareTo(item) > 0){\n\t\tif(left != null) {\n\t\t\treturn left.insert(item);\n\t\t} else {\n\t\t\tleft = new BinaryNode(item);\n\t\t\tmodCount++;\n\t\t\treturn true;\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n}", "path": "src\\BinarySearchTree.java", "repo_name": "compuwizard123/BinarySearchTree", "stars": 1, "license": "None", "language": "java", "size": 148}
{"docstring": "/*\tEach iteration of zoom generates an iterate alphaj between alphaLow and alphaHigh, \n* and then replaces one of these endpoints by alphaj in such a way that the properties \n* (a), (b) and (c) continue to hold.\n* (a)The interval bounded by alphaLow and alphaHigh contains step lengths that satisfy the strong Wolfe conditions.  \n     * (b)alphaLow is, among all step lengths generated so far and satisfying the sufficient decrease condition, \n     * the one giving the smallest function value.\n     * (c)alphaHigh is chosen so that linearFunctionDerivativeInAlphaj * (alphaHigh-alphaLow) < 0\n     *   \n   \t *@param  alphaLow              \t\t\t\tAmong all step lengths generated so far and satisfying the sufficient decrease condition, the one giving the smallest function value.\n   \t *@param  linearFunctionInAlphaLow       \t\tFunction value at alphaLow.\n   \t *@param  linearFunctionDerivativeInAlphaLow\tDerivative value at alphaLow.\n   \t *@param  dfInAlphaLow              \t\t\tGradient at alphaLow.\n   \t *@param  alphaHigh              \t\t\t\tAlphaHigh is chosen so that linearFunctionDerivativeInAlphaj * (alphaHigh-alphaLow) < 0\n   \t *@param  linearFunctionInAlphaHigh             Function value at alphaHigh.\n*/\n", "func_signal": "private void zoom (double alphaLow, double linearFunctionInAlphaLow, double linearFunctionDerivativeInAlphaLow, GVector dfInAlphaLow, \n\t\t\tdouble alphaHigh, double linearFunctionInAlphaHigh)", "code": "{\n\t\t\n\t\t//logger.debug(\"zoom\");\n\t\t\n\t\tfunctionEvaluationNumber = 0;\n\t\t\n\t\t/*double a;\n\t\tdouble b;\n\t\tif (alphaLow < alphaHigh) {a = alphaLow; b = alphaHigh;}\n\t\telse {a = alphaHigh; b = alphaLow;}\n\t\t*/\n\t\t\n\t\tdo {\n\t\t\t//Interpolation \n\t\t\t\n\t\t\t//alphaj = this.cubicInterpolation(alphaLow, linearFunctionInAlphaLow, linearFunctionDerivativeInAlphaLow, alphaHigh, linearFunctionInAlphaHigh, linearFunctionDerivativeInAlphaHigh, a, b);\n\t\t\t/*System.out.println(\"interpolation(\" + alphaLow + \", \" + linearFunctionInAlphaLow + \", \" + linearFunctionDerivativeInAlphaLow + \", \"\n\t\t\t\t\t+ alphaHigh + \", \" + linearFunctionInAlphaHigh + \");\");*/\n\n\t\t\talphaj = this.interpolation(alphaLow, linearFunctionInAlphaLow, linearFunctionDerivativeInAlphaLow, alphaHigh, linearFunctionInAlphaHigh);\n\t\t\t//logger.debug(\"alphaj = \" + alphaj);\n\t\t\tlinearFunctionInAlphaj = this.linearFunctionAlphaInterpolation;\n\t\t\t//logger.debug(\"linearFunctionInAlphaj = \" + linearFunctionInAlphaj);\n\t\t\t\n\t\t\tif ((linearFunctionInAlphaj > linearFunctionInAlpha0 + c1 * alphaj * linearFunctionDerivativeInAlpha0) | //The interval 0 and alphaj brackets the desired step lengths.\n\t\t\t\t\t(linearFunctionInAlphaj >= linearFunctionInAlphaLow)) {\t\t\t\n\n\t\t\t\t//logger.debug(\"The minimum is between alpha1 and alphaj\");\n\t\t\t\talphaHigh = alphaj;\n\t\t\t\tlinearFunctionInAlphaHigh = linearFunctionInAlphaj;\n\t\t\t\t//dfInAlphaHigh = this.evaluateEnergyFunctionDerivative(alphaHigh); \n\t\t\t\t//linearFunctionDerivativeInAlphaHigh = dfInAlphaHigh.dot(direction);\n\t\t\t} \n\t\t\telse {\n\t\t\t\tdfInAlphaj = evaluateEnergyFunctionDerivative(alphaj);\n\t\t\t\tlinearFunctionDerivativeInAlphaj = dfInAlphaj.dot(direction);\n\t\t\t\t//logger.debug(\"linearFunctionDerivativeInAlphaj = \" + linearFunctionDerivativeInAlphaj);\n\t\t\t\tif (Math.abs(linearFunctionDerivativeInAlphaj) <= -c2 * linearFunctionDerivativeInAlpha0) { //alphaj satisfied the second strong Wolfe condition.\n\t\t\t\t\t//logger.debug(\"Derivative small enough : \" + Math.abs(linearFunctionDerivativeInAlphaj) + \" <= \" + (-c2 * linearFunctionDerivativeInAlpha0));\n\t\t\t\t\tthis.derivativeSmallEnough = true;\n\t\t\t\t\talphaOptimum = alphaj;\n\t\t\t\t\tlinearFunctionInAlphaOptimum = linearFunctionInAlphaj;\n\t\t\t\t\tdfOptimum = dfInAlphaj;\n\t\t\t\t\t//logger.debug(\"alphaOptimun = \" + alphaOptimum);\n\t\t\t\t\t//logger.debug(\"linearFunctionInAlphaOptimun = \" + linearFunctionInAlphaOptimum);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (linearFunctionDerivativeInAlphaj * (alphaHigh-alphaLow) >= 0) {\t\t\n\t\t\t\t\talphaHigh = alphaLow;\n\t\t\t\t\tlinearFunctionInAlphaHigh = linearFunctionInAlphaLow;\n\t\t\t\t\t//linearFunctionDerivativeInAlphaHigh = linearFunctionDerivativeInAlphaLow;\n\t\t\t\t}\n\t\t\t\talphaLow = alphaj;\n\t\t\t\tlinearFunctionInAlphaLow = linearFunctionInAlphaj;\n\t\t\t\tlinearFunctionDerivativeInAlphaLow = linearFunctionDerivativeInAlphaj;\n\t\t\t\tdfInAlphaLow = dfInAlphaj;\n\t\t\t}\n\t\t\t\n\t\t\t//logger.debug(\"AlphaLow = \" + alphaLow + \", AlphaHigh = \" + alphaHigh);\n\t\t\t//logger.debug(\"linearFunctionInAlphaLow = \" + linearFunctionInAlphaLow + \", linearFunctionInAlphaHigh = \" + linearFunctionInAlphaHigh);\n\t\t\tfunctionEvaluationNumber = functionEvaluationNumber + 1;\n\t\t\t//logger.debug(\"functionEvaluationNumber = \" + functionEvaluationNumber);\n\n\t\t\tif ((functionEvaluationNumber == 10) | (Math.abs(linearFunctionInAlphaHigh - linearFunctionInAlphaLow) <= 0.000001) | (Math.abs(alphaLow - alphaHigh) <= 0.000000000001)) {\n\t\t\t\t//logger.debug(\"ZOOM WAS TERMINATE EARLIER\");\n\t\t\t\t/*System.out.println(\"functionEvaluationNumber = \" + functionEvaluationNumber + \n\t\t\t\t\t\t\", Math.abs(linearFunctionInAlphaHigh - linearFunctionInAlphaLow) = \" + Math.abs(linearFunctionInAlphaHigh - linearFunctionInAlphaLow) + \n\t\t\t\t\t\t\", Math.abs(alphaLow - alphaHigh) = \" + Math.abs(alphaLow - alphaHigh));*/\n\t\t\t\tthis.alphaOptimum = alphaLow;\n\t\t\t\tthis.linearFunctionInAlphaOptimum = linearFunctionInAlphaLow;\n\t\t\t\tthis.dfOptimum = dfInAlphaLow;\n\t\t\t\t\n\t\t\t\t//logger.debug(\"(functionEvaluationNumber == 10) | (Math.abs(linearFunctionInAlphaHigh - linearFunctionInAlphaLow) <= 0.000001) | (Math.abs(alphaLow - alphaHigh) <= 0.0000001)\");\n\t\t\t\t//logger.debug(\"zoom end -> this.alphaOptimum = \" + this.alphaOptimum); \n\t\t\t\t//logger.debug(\"zoom end -> this.linearFunctionInAlphaOptimum = \" + this.linearFunctionInAlphaOptimum); \n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\n\t\t} while ((Math.abs(linearFunctionInAlphaHigh - linearFunctionInAlphaLow) > 0.000001) \n\t\t\t\t\t& (functionEvaluationNumber < 10) \n\t\t\t\t\t& (Math.abs(alphaLow - alphaHigh) > 0.000000000001));\n\t\t\n\t\t//logger.debug(\"zoom end\");\n\t\treturn;\n\t}", "path": "cdk-externals\\trunk\\org.openscience.cdk.forcefield\\src\\org\\openscience\\cdk\\modeling\\forcefield\\LineSearchForTheWolfeConditions.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/**\n * Gets the specification attribute of the\n * KappaShapeIndicesDescriptor object\n *\n * @return The specification value\n */\n", "func_signal": "@TestMethod(\"testGetSpecification\")\npublic DescriptorSpecification getSpecification()", "code": "{\n    return new DescriptorSpecification(\n            \"http://www.blueobelisk.org/ontologies/chemoinformatics-algorithms/#kierValues\",\n            this.getClass().getName(),\n            \"$Id$\",\n            \"The Chemistry Development Kit\");\n}", "path": "cdk-externals\\trunk\\org.openscience.cdk.qsarmolecular\\src\\org\\openscience\\cdk\\qsar\\descriptors\\molecular\\KappaShapeIndicesDescriptor.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/*\nTODO it's not clear why we need to remove all elements after the clone\nLooks like we should only clone the monomer related stuff\n */\n", "func_signal": "public Object clone() throws CloneNotSupportedException", "code": "{\n  \tPolymer clone = (Polymer)super.clone();\n      clone.removeAllElements();\n      clone.monomers = new Hashtable<String, IMonomer>();\n      for (String monomerName : getMonomerNames()) {\n          Monomer monomerClone = (Monomer) getMonomer(monomerName).clone();\n          for (IAtom atomInMonomer : monomerClone.atoms()) {\n              clone.addAtom(atomInMonomer, monomerClone);\n          }\n      }\n\n      // now consider atoms that are not associated with any monomer\n      for (IAtom atom : atoms()) {\n          if (!atomIsInMonomer(atom))\n              clone.addAtom((IAtom) atom.clone());\n      }\n\n      // since we already removed bonds we'll have to add them back\n\t\tIBond newBond;\n\t\tfor (IBond bond : bonds()) {\n\t\t\tnewBond = (IBond)bond.clone();\n\t\t\tIAtom[] newAtoms = new IAtom[bond.getAtomCount()];\n\t\t\tfor (int j = 0; j < bond.getAtomCount(); ++j) {\n\t\t\t\tnewAtoms[j] = clone.getAtom(getAtomNumber(bond.getAtom(j)));\n\t\t\t}\n\t\t\tnewBond.setAtoms(newAtoms);\n          clone.addBond(newBond);\n      }\n\n      // put back lone pairs\n      ILonePair lp;\n      ILonePair newLp;\n      for (int i = 0; i < getLonePairCount(); ++i) {\n          lp = getLonePair(i);\n          newLp = (ILonePair) lp.clone();\n          newLp.setAtom(clone.getAtom(getAtomNumber(lp.getAtom())));\n          clone.addLonePair(newLp);\n      }\n\n      return clone;\n  }", "path": "cdk-externals\\trunk\\org.openscience.cdk.data\\src\\org\\openscience\\cdk\\Polymer.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/**\n* Procedure required by the CDOInterface. This function is only\n* supposed to be called by the JCFL library\n*/\n", "func_signal": "public void setObjectProperty(String objectType, String propertyType,\nString propertyValue)", "code": "{\n    logger.debug(\"objectType: \" + objectType);\n    logger.debug(\"propType: \" + propertyType);\n    logger.debug(\"property: \" + propertyValue);\n    \n    if (objectType == null) {\n        logger.error(\"Cannot add property for null object\");\n        return;\n    }\n    if (propertyType == null) {\n        logger.error(\"Cannot add property for null property type\");\n        return;\n    }\n    if (propertyValue == null) {\n        logger.warn(\"Will not add null property\");\n        return;\n    }\n    \n    if (objectType.equals(\"Molecule\")) {\n        if (propertyType.equals(\"id\")) {\n            currentMolecule.setID(propertyValue);\n        } else if (propertyType.equals(\"inchi\")) {\n            currentMolecule.setProperty(\"iupac.nist.chemical.identifier\", propertyValue);\n        }\n    } else if (objectType.equals(\"PseudoAtom\")) {\n        if (propertyType.equals(\"label\")) {\n            if (!(currentAtom instanceof IPseudoAtom)) {\n                currentAtom = builder.newPseudoAtom(currentAtom);\n            }\n            ((IPseudoAtom)currentAtom).setLabel(propertyValue);\n        }\n    } else if (objectType.equals(\"Atom\")) {\n        if (propertyType.equals(\"type\")) {\n            if (propertyValue.equals(\"R\") && !(currentAtom instanceof IPseudoAtom)) {\n                currentAtom = builder.newPseudoAtom(currentAtom);\n            }\n            currentAtom.setSymbol(propertyValue);\n        } else if (propertyType.equals(\"x2\")) {\n        \tPoint2d coord = currentAtom.getPoint2d();\n        \tif (coord == null) coord = new Point2d();\n        \tcoord.x = Double.parseDouble(propertyValue);\n        \tcurrentAtom.setPoint2d(coord);\n        } else if (propertyType.equals(\"y2\")) {\n        \tPoint2d coord = currentAtom.getPoint2d();\n        \tif (coord == null) coord = new Point2d();\n        \tcoord.y = Double.parseDouble(propertyValue);\n        \tcurrentAtom.setPoint2d(coord);\n        } else if (propertyType.equals(\"x3\")) {\n        \tPoint3d coord = currentAtom.getPoint3d();\n        \tif (coord == null) coord = new Point3d();\n        \tcoord.x = Double.parseDouble(propertyValue);\n        \tcurrentAtom.setPoint3d(coord);\n        } else if (propertyType.equals(\"y3\")) {\n        \tPoint3d coord = currentAtom.getPoint3d();\n        \tif (coord == null) coord = new Point3d();\n        \tcoord.y = Double.parseDouble(propertyValue);\n        \tcurrentAtom.setPoint3d(coord);\n        } else if (propertyType.equals(\"z3\")) {\n        \tPoint3d coord = currentAtom.getPoint3d();\n        \tif (coord == null) coord = new Point3d();\n        \tcoord.z = Double.parseDouble(propertyValue);\n        \tcurrentAtom.setPoint3d(coord);\n        } else if (propertyType.equals(\"xFract\")) {\n        \tPoint3d coord = currentAtom.getFractionalPoint3d();\n        \tif (coord == null) coord = new Point3d();\n        \tcoord.x = Double.parseDouble(propertyValue);\n        \tcurrentAtom.setFractionalPoint3d(coord);\n        } else if (propertyType.equals(\"yFract\")) {\n        \tPoint3d coord = currentAtom.getFractionalPoint3d();\n        \tif (coord == null) coord = new Point3d();\n        \tcoord.y = Double.parseDouble(propertyValue);\n        \tcurrentAtom.setFractionalPoint3d(coord);\n        } else if (propertyType.equals(\"zFract\")) {\n        \tPoint3d coord = currentAtom.getFractionalPoint3d();\n        \tif (coord == null) coord = new Point3d();\n        \tcoord.z = Double.parseDouble(propertyValue);\n        \tcurrentAtom.setFractionalPoint3d(coord);\n        } else if (propertyType.equals(\"formalCharge\")) {\n            currentAtom.setFormalCharge(Integer.parseInt(propertyValue));\n        } else if (propertyType.equals(\"charge\") ||\n        propertyType.equals(\"partialCharge\")) {\n            currentAtom.setCharge(Double.parseDouble(propertyValue));\n        } else if (propertyType.equals(\"hydrogenCount\")) {\n            currentAtom.setHydrogenCount(Integer.parseInt(propertyValue));\n        } else if (propertyType.equals(\"dictRef\")) {\n            currentAtom.setProperty(\"org.openscience.cdk.dict\", propertyValue);\n        } else if (propertyType.equals(\"atomicNumber\")) {\n            currentAtom.setAtomicNumber(Integer.parseInt(propertyValue));\n        } else if (propertyType.equals(\"massNumber\")) {\n            currentAtom.setMassNumber((int)Double.parseDouble(propertyValue));\n        } else if (propertyType.equals(\"id\")) {\n            logger.debug(\"id: \", propertyValue);\n            currentAtom.setID(propertyValue);\n            atomEnumeration.put(propertyValue, numberOfAtoms);\n        }\n    } else if (objectType.equals(\"Bond\")) {\n        if (propertyType.equals(\"atom1\")) {\n            bond_a1 = Integer.parseInt(propertyValue);\n        } else if (propertyType.equals(\"atom2\")) {\n            bond_a2 = Integer.parseInt(propertyValue);\n        } else if (propertyType.equals(\"id\")) {\n            logger.debug(\"id: \" + propertyValue);\n            bond_id = propertyValue;\n        } else if (propertyType.equals(\"order\")) {\n            try {\n                Double order = Double.parseDouble(propertyValue);\n                if (order == 1.0) {\n                \tbond_order = IBond.Order.SINGLE;\n                } else if (order == 2.0) {\n                \tbond_order = IBond.Order.DOUBLE;\n                } else if (order == 3.0) {\n                \tbond_order = IBond.Order.TRIPLE;\n                } else if (order == 4.0) {\n                \tbond_order = IBond.Order.QUADRUPLE;\n                } else {\n                    bond_order = IBond.Order.SINGLE;\n                }\n            } catch (Exception e) {\n                logger.error(\"Cannot convert to double: \" + propertyValue);\n                bond_order = IBond.Order.SINGLE;\n            }\n        } else if (propertyType.equals(\"stereo\")) {\n            if (propertyValue.equals(\"H\")) {\n                bond_stereo = CDKConstants.STEREO_BOND_DOWN;\n            } else if (propertyValue.equals(\"W\")) {\n                bond_stereo = CDKConstants.STEREO_BOND_UP;\n            }\n        }\n    }\n    logger.debug(\"Object property set...\");\n}", "path": "cdk-externals\\trunk\\org.openscience.cdk.io\\src\\org\\openscience\\cdk\\io\\iterator\\event\\EventCMLHandler.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/*\tLine Search Algorithm for the Wolfe conditions. Jorge Nocedal and Stephen J.Wright. Numerical Optimization. 1999.\n* The algorithm has two stages. This first stage begins with a trial estimate alpha1, \n* and keeps increasing it until it finds either an acceptable step length or an interval \n* that brackets the desired step lengths. In the later case, the second stage is invoked \n* by calling a function called zoom, which successively decreases the size of the interval \n* until an acceptable step length is identified. \n*\n \t * @param alphaMax\t\t\t\tMaximum step length\n*/\n", "func_signal": "public void lineSearchAlgorithm (double alphaMax)", "code": "{\n\t\t\n\t\t//logger.debug(\"Line search for the strong wolfe conditions\");\n\n\t\talpha[0] = 0.0;\n\t\tlinearFunctionInAlpha[0] = linearFunctionInAlpha0; \n\t\tlinearFunctionDerivativeInAlpha[0] = linearFunctionDerivativeInAlpha0;\t//To Analyse the possibility of eliminate linearFunctionDerivativeInAlpha[0]\n\t\tdfInAlpha[0] = this.dfx;\n\t\t\n\t\talpha[1] = this.alphaInitialStep;\n\t\t\n\t\t//logger.debug(\"alpha[1] = this.alphaInitialStep = \" + alpha[1]);\n\t\t\n\t\tbrentStep[0] = alpha[0];\n\t\tbrentStep[1] = alpha[1];\n\t\t\n\t\tint i=1;\n\t\t\n\t\tthis.functionEvaluationNumber = 0;\n\n\t\tif (alpha[1] > alphaMax) {\n\t\t\talpha[1] = alphaMax;\n\t\t\t//logger.debug(\"line search algorithm error: alphaInitialStep > alphaMax\");\n\t\t}\n\t\t//\talpha[1] = alphaMax/2;\n\t\t//}", "path": "cdk-externals\\trunk\\org.openscience.cdk.forcefield\\src\\org\\openscience\\cdk\\modeling\\forcefield\\LineSearchForTheWolfeConditions.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/**\n * Finds the AtomType matching the Atom's element symbol, formal charge and \n     * hybridization state.\n *\n * @param  atomContainer  AtomContainer\n * @param  atom            the target atom\n * @exception CDKException Exception thrown if something goes wrong\n * @return                 the matching AtomType\n */\n", "func_signal": "public IAtomType findMatchingAtomType(IAtomContainer atomContainer, IAtom atom) throws CDKException", "code": "{\n        if (factory == null) {\n            try {\n                factory = AtomTypeFactory.getInstance(\"org/openscience/cdk/config/data/structgen_atomtypes.xml\",\n                          atom.getBuilder());\n            } catch (Exception ex1) {\n                logger.error(ex1.getMessage());\n                logger.debug(ex1);\n                throw new CDKException(\"Could not instantiate the AtomType list!\", ex1);\n            }\n        }\n\n\tdouble bondOrderSum = atomContainer.getBondOrderSum(atom);\n\tIBond.Order maxBondOrder = atomContainer.getMaximumBondOrder(atom);\n\tint charge = atom.getFormalCharge();\n\tint hcount = atom.getHydrogenCount() == null ? 0 : atom.getHydrogenCount();\n\n        IAtomType[] types = factory.getAtomTypes(atom.getSymbol());\n        for (IAtomType type : types) {\n            logger.debug(\"   ... matching atom \", atom, \" vs \", type);\n            if (bondOrderSum - charge + hcount == type.getBondOrderSum() &&\n                !BondManipulator.isHigherOrder(maxBondOrder, type.getMaxBondOrder())) {\n                return type;\n            }\n        }\n        logger.debug(\"    No Match\");\n        \n        return null;\n}", "path": "cdk-externals\\trunk\\org.openscience.cdk.structgen\\src\\org\\openscience\\cdk\\atomtype\\StructGenMatcher.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/**\n * Adds the atom oAtom to a specified Monomer.\n *\n * @param oAtom  The atom to add\n * @param oMonomer  The monomer the atom belongs to\n */\n", "func_signal": "public void addAtom(IAtom oAtom, IMonomer oMonomer)", "code": "{\n\t\n\tif(!contains(oAtom))\t{\n\t\tsuper.addAtom(oAtom);\n\t\t\n\t\tif(oMonomer != null)\t{\t// Not sure what's better here...throw nullpointer exception?\n\t\t\toMonomer.addAtom(oAtom);\t\t\t\t\n\t\t\tif (! monomers.containsKey(oMonomer.getMonomerName())) {\n\t\t\t\tmonomers.put(oMonomer.getMonomerName(), oMonomer);\n\t\t\t}\n\t\t}\n\t}\n\t/* notifyChanged() is called by addAtom in\n\t AtomContainer */\n}", "path": "cdk-externals\\trunk\\org.openscience.cdk.data\\src\\org\\openscience\\cdk\\Polymer.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/**\n* Constructs an iterating-abled CDO. After reading one molecule it\n* fires a frameRead event.\n*/\n", "func_signal": "public EventCMLHandler(DefaultEventChemObjectReader eventReader,\n\t\t                IChemObjectBuilder builder)", "code": "{\n\tsuper(builder.newChemFile());\n    logger = new LoggingTool(this);\n    this.eventReader = eventReader;\n    this.builder = builder;\n    clearData();\n}", "path": "cdk-externals\\trunk\\org.openscience.cdk.io\\src\\org\\openscience\\cdk\\io\\iterator\\event\\EventCMLHandler.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "//private LoggingTool logger;\n", "func_signal": "public LineSearchForTheWolfeConditions(IPotentialFunction pfUser, String method)", "code": "{\n\tthis.pf = pfUser;\n\tif ((method == \"sdm\") | (method == \"cgm\")) {c2 = 0.07;}\n\telse {c2 = 0.9;} \n}", "path": "cdk-externals\\trunk\\org.openscience.cdk.forcefield\\src\\org\\openscience\\cdk\\modeling\\forcefield\\LineSearchForTheWolfeConditions.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/**\n * calculates the kier shape indices for an atom container\n *\n * @param container AtomContainer\n * @return kier1, kier2 and kier3 are returned as arrayList of doubles\n * @throws CDKException Possible Exceptions\n */\n", "func_signal": "@TestMethod(\"testCalculate_IAtomContainer\")\npublic DescriptorValue calculate(IAtomContainer container)", "code": "{\n    IAtomContainer atomContainer;\n    try {\n        atomContainer = (IAtomContainer) container.clone();\n    } catch (CloneNotSupportedException e) {\n        DoubleArrayResult kierValues = new DoubleArrayResult(3);\n        kierValues.add(Double.NaN);\n        kierValues.add(Double.NaN);\n        kierValues.add(Double.NaN);\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), kierValues,\n            getDescriptorNames());\n    }\n    atomContainer = AtomContainerManipulator.removeHydrogens(atomContainer);\n\n    //org.openscience.cdk.interfaces.IAtom[] atoms = atomContainer.getAtoms();\n    java.util.List firstAtomNeighboors;\n    java.util.List secondAtomNeighboors;\n    java.util.List thirdAtomNeighboors;\n    DoubleArrayResult kierValues = new DoubleArrayResult(3);\n    double bond1;\n    double bond2;\n    double bond3;\n    double kier1;\n    double kier2;\n    double kier3;\n    double atomsCount = atomContainer.getAtomCount();\n    ArrayList<Double> singlePaths = new ArrayList<Double>();\n    ArrayList<String> doublePaths = new ArrayList<String>();\n    ArrayList<String> triplePaths = new ArrayList<String>();\n    double[] sorterFirst = new double[2];\n    double[] sorterSecond = new double[3];\n    String tmpbond2;\n    String tmpbond3;\n\n    for (int a1 = 0; a1 < atomsCount; a1++) {\n        bond1 = 0;\n        firstAtomNeighboors = atomContainer.getConnectedAtomsList(atomContainer.getAtom(a1));\n        for (int a2 = 0; a2 < firstAtomNeighboors.size(); a2 ++) {\n            bond1 = atomContainer.getBondNumber(atomContainer.getAtom(a1), (IAtom) firstAtomNeighboors.get(a2));\n            if (!singlePaths.contains(new Double(bond1))) {\n                singlePaths.add(bond1);\n                java.util.Collections.sort(singlePaths);\n            }\n            secondAtomNeighboors = atomContainer.getConnectedAtomsList((IAtom) firstAtomNeighboors.get(a2));\n            for (int a3 = 0; a3 < secondAtomNeighboors.size(); a3 ++) {\n                bond2 = atomContainer.getBondNumber((IAtom) firstAtomNeighboors.get(a2), (IAtom) secondAtomNeighboors.get(a3));\n                if (!singlePaths.contains(new Double(bond2))) {\n                    singlePaths.add(bond2);\n                }\n                sorterFirst[0] = bond1;\n                sorterFirst[1] = bond2;\n                java.util.Arrays.sort(sorterFirst);\n\n                tmpbond2 = sorterFirst[0] + \"+\" + sorterFirst[1];\n\n                if (!doublePaths.contains(tmpbond2) && (bond1 != bond2)) {\n                    doublePaths.add(tmpbond2);\n                }\n                thirdAtomNeighboors = atomContainer.getConnectedAtomsList((IAtom) secondAtomNeighboors.get(a3));\n                for (int a4 = 0; a4 < thirdAtomNeighboors.size(); a4 ++) {\n                    bond3 = atomContainer.getBondNumber((IAtom) secondAtomNeighboors.get(a3), (IAtom) thirdAtomNeighboors.get(a4));\n                    if (!singlePaths.contains(new Double(bond3))) {\n                        singlePaths.add(bond3);\n                    }\n                    sorterSecond[0] = bond1;\n                    sorterSecond[1] = bond2;\n                    sorterSecond[2] = bond3;\n                    java.util.Arrays.sort(sorterSecond);\n\n                    tmpbond3 = sorterSecond[0] + \"+\" + sorterSecond[1] + \"+\" + sorterSecond[2];\n                    if (!triplePaths.contains(tmpbond3)) {\n                        if ((bond1 != bond2) && (bond1 != bond3) && (bond2 != bond3)) {\n                            triplePaths.add(tmpbond3);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if (atomsCount == 1) {\n        kier1 = 0;\n        kier2 = 0;\n        kier3 = 0;\n    } else {\n        kier1 = (((atomsCount) * ((atomsCount - 1) * (atomsCount - 1))) / (singlePaths.size() * singlePaths.size()));\n        if (atomsCount == 2) {\n            kier2 = 0;\n            kier3 = 0;\n        } else {\n            if (doublePaths.size() == 0) kier2 = Double.NaN;\n            else\n                kier2 = (((atomsCount - 1) * ((atomsCount - 2) * (atomsCount - 2))) / (doublePaths.size() * doublePaths.size()));\n            if (atomsCount == 3) {\n                kier3 = 0;\n            } else {\n                if (atomsCount % 2 != 0) {\n                    if (triplePaths.size() == 0) kier3 = Double.NaN;\n                    else\n                        kier3 = (((atomsCount - 1) * ((atomsCount - 3) * (atomsCount - 3))) / (triplePaths.size() * triplePaths.size()));\n                } else {\n                    if (triplePaths.size() == 0) kier3 = Double.NaN;\n                    else\n                        kier3 = (((atomsCount - 3) * ((atomsCount - 2) * (atomsCount - 2))) / (triplePaths.size() * triplePaths.size()));\n                }\n            }\n        }\n    }\n\n    kierValues.add(kier1);\n    kierValues.add(kier2);\n    kierValues.add(kier3);\n    return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), kierValues,\n            getDescriptorNames());\n}", "path": "cdk-externals\\trunk\\org.openscience.cdk.qsarmolecular\\src\\org\\openscience\\cdk\\qsar\\descriptors\\molecular\\KappaShapeIndicesDescriptor.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/*\n* Cubic interpolation in the interval [a,b] known to contain desirable step length \n* and given two previous step length estimates in this interval.\n*\n*@param \talphai\t\t\t\t\t\t\t\t\t\tPrevious step length.\t\t\t\t\t\t\t\t\t\n*@param \tlinearFunctionInAlphai\t\t\t\t\t\tFunction value at the previous step length alphai.\n*@param \tlinearFunctionDerivativeInAlphai\t\t\tDerivative at the previous step length alphai.\n*@param \talphaiMinus1\t\t\t\t\t\t\t\tPrevious step length.\n*@param \tlinearFunctionInAlphaiMinus1\t \t\t\tFunction value at the previous step length alphaiMinus1.\n*@param \tlinearFunctionDerivativeInAlphaiMinus1\t \tDerivative value at the previous step length alphaiMinus1.\n*@param \ta\t\t\t\t\t\t\t\t\t\t\tInferior value of the interval [a,b].\n*@param \tb\t\t\t\t\t\t\t\t\t\t\tSuperior value of the interval [a,b].\t\n \t *\t  \n* @return\t\t\t\t\t\t\t\t\t\t\t\tCubic interpolation in the interval [a,b]\n*/\n", "func_signal": "public double cubicInterpolation(double alphai, double linearFunctionInAlphai, double linearFunctionDerivativeInAlphai, \n\t\t\t\t\t\t\t\t\tdouble alphaiMinus1, double linearFunctionInAlphaiMinus1, double linearFunctionDerivativeInAlphaiMinus1, \n\t\t\t\t\t\t\t\t\tdouble a, double b)", "code": "{\n\t\t\n\t\t//logger.debug(\"The interval [\" + a + \", \" + b + \"] contains acceptable step lengths.\");\n\t\t\n\t\tif (alphai < alphaiMinus1) {\n\t\t\tthis.alphaTemporal = alphai;\n\t\t\tthis.linearFunctionInAlphaTemporal = linearFunctionInAlphai;\n\t\t\tthis.linearFunctionDerivativeInAlphaTemporal = linearFunctionDerivativeInAlphai;\n\t\t\talphai = alphaiMinus1;\n\t\t\tlinearFunctionInAlphai = linearFunctionInAlphaiMinus1;\n\t\t\tlinearFunctionDerivativeInAlphai = linearFunctionDerivativeInAlphaiMinus1;\n\t\t\talphaiMinus1 = this.alphaTemporal;\n\t\t\tlinearFunctionInAlphaiMinus1 = this.linearFunctionInAlphaTemporal;\n\t\t\tlinearFunctionDerivativeInAlphaiMinus1 = this.linearFunctionDerivativeInAlphaTemporal;\n\t\t}\n\t\t\n\t\tthis.d1 = linearFunctionDerivativeInAlphaiMinus1 + linearFunctionDerivativeInAlphai - 3 * ((linearFunctionInAlphaiMinus1 - linearFunctionInAlphai)/(alphaiMinus1 - alphai));\n\t\t//logger.debug(\"d1 = \" + d1);\n\t\t\n\t\t//logger.debug(\"linearFunctionDerivativeInAlphaiMinus1 = \" + linearFunctionDerivativeInAlphaiMinus1);\n\t\t//logger.debug(\"linearFunctionDerivativeInAlphai = \" + linearFunctionDerivativeInAlphai);\n\t\t\n\t\tthis.d2 = Math.sqrt(Math.abs(Math.pow(d1,2) - linearFunctionDerivativeInAlphaiMinus1 * linearFunctionDerivativeInAlphai));\n\t\t//logger.debug(\"d2 = \" + d2);\n\t\t\n\t\tthis.alphaiplus1 = alphai-(alphai-alphaiMinus1) * ((linearFunctionDerivativeInAlphai + d2 - d1) / (linearFunctionDerivativeInAlphai - linearFunctionDerivativeInAlphaiMinus1 + 2 * d2));\n\t\t\n\t\t//logger.debug(\"alphaiplus1 = \" + alphaiplus1);\n\t\t\n\t\tif (alphaiplus1 < a) {alphaiplus1 = a;}\n\t\tif (alphaiplus1 > b) {alphaiplus1 = b;}\n\t\t\n\t\t//logger.debug(\"alphaiplus1 = \" + alphaiplus1);\n\t\t\n\t\tif (Math.abs(alphaiplus1 - alphai) < 0.000000001) {\n\t\t\t/*System.out.println(\"We reset alphaiplus1 = (alphaiMinus1 + alphai) / 2, because alphaiplus1 = \" + alphaiplus1 + \" is too close to its predecessor \" +\n\t\t\t\t\t\"alphaiMinus1 = \" + alphaiMinus1); */\n\t\t\talphaiplus1 = (alphaiMinus1 + alphai) / 2;\n\t\t} else {if (alphaiplus1 < (alphai - 9 * (alphai-alphaiMinus1) / 10)) {\n\t\t\t//logger.debug(\"We reset alphaiplus1 = (alphaiMinus1 + alphai) / 2, because alphaiplus1 = \" + alphaiplus1 + \" is \ttoo much smaller than alphai = \" + alphai); \n\t\t\talphaiplus1 = (alphaiMinus1 + alphai) / 2;;\n\t\t\t}\n\t\t}\n\t\n\t\treturn alphaiplus1;\n\t}", "path": "cdk-externals\\trunk\\org.openscience.cdk.forcefield\\src\\org\\openscience\\cdk\\modeling\\forcefield\\LineSearchForTheWolfeConditions.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/**\n* Procedure required by the CDOInterface. This function is only\n* supposed to be called by the JCFL library\n*/\n", "func_signal": "public void endObject(String objectType)", "code": "{\n    logger.debug(\"END: \" + objectType);\n    if (objectType.equals(\"Molecule\")) {\n        eventReader.fireFrameRead();\n        clearData();\n    } else if (objectType.equals(\"Atom\")) {\n        currentMolecule.addAtom(currentAtom);\n    } else if (objectType.equals(\"Bond\")) {\n        logger.debug(\"Bond(\" + bond_id + \"): \" + bond_a1 + \", \" + bond_a2 + \", \" + bond_order);\n        if (bond_a1 > currentMolecule.getAtomCount() ||\n        bond_a2 > currentMolecule.getAtomCount()) {\n            logger.error(\"Cannot add bond between at least one non-existant atom: \" + bond_a1 +\n            \" and \" + bond_a2);\n        } else {\n        \tIAtom a1 = currentMolecule.getAtom(bond_a1);\n        \tIAtom a2 = currentMolecule.getAtom(bond_a2);\n            IBond b = builder.newBond(a1, a2, bond_order);\n            if (bond_id != null) b.setID(bond_id);\n            if (bond_stereo != -99) {\n                b.setStereo(bond_stereo);\n            }\n            currentMolecule.addBond(b);\n        }\n    }\n}", "path": "cdk-externals\\trunk\\org.openscience.cdk.io\\src\\org\\openscience\\cdk\\io\\iterator\\event\\EventCMLHandler.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/**\n * Set the mono isotope object.\n * \n *  @param isoContainer   The IsotopeContainer object\n */\n", "func_signal": "@TestMethod(\"testSetMonoIsotope_IsotopeContainer\")\npublic void setMonoIsotope(IsotopeContainer isoContainer)", "code": "{\n\tisotopeCList.add(isoContainer);\n\tmonoIsotopePosition = isotopeCList.indexOf(isoContainer);\n}", "path": "cdk-externals\\trunk\\org.openscience.cdk.formula\\src\\org\\openscience\\cdk\\formula\\IsotopePattern.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/**Evaluate the gradient of the energy function from an alpha value, \n * using the current coordinates and the current direction.\n * \n * @param alpha\t\tAlpha value for the one-dimensional problem generate from the current coordinates and the current direction.\n * @return\t\t\t\tGradient of the energy function at alpha. \n */\n", "func_signal": "private GVector evaluateEnergyFunctionDerivative(double alpha)", "code": "{\n\t//logger.debug(\"alpha= \" + alpha);\n\tthis.xAlpha.set(this.x);\n\t//logger.debug(\"xAlpha = \" + xAlpha);\n\tGVector directionStep = direction;\n\t//logger.debug(\"directionStep = \" + directionStep);\n\txAlpha.scaleAdd(alpha, directionStep, xAlpha);\n\t//logger.debug(\"xAlpha = \" + xAlpha);\n\tpf.setEnergyGradient(xAlpha);\n\tGVector dfxAlpha = pf.getEnergyGradient();\n\t//logger.debug(\"dfxAlpha = \" + dfxAlpha);\n\treturn dfxAlpha;\n}", "path": "cdk-externals\\trunk\\org.openscience.cdk.forcefield\\src\\org\\openscience\\cdk\\modeling\\forcefield\\LineSearchForTheWolfeConditions.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/*\n*\tThe aim is to find a value of alpha that satisfies the sufficient decrease condition, without being too small.\n*\tThe procedures generate a value alphai such that is not too much smaller than its predecesor alphai-1. \n*  The interpolation in the first is quadratic but if the sufficient decrease condition is not satisfied \n*  then the interpolation is cubic.\n \t *\n* @param alphaLow\t\t\t\t\t\t\t\tAmong all step lengths generated so far and satisfying the sufficient decrease condition, the one giving the smallest function value.\n* @param linearFunctionInAlphaLow\t\t\t\tEnergy function value at alphaLow.\n* @param linearFunctionDerivativeInAlphaLow\tDerivative value at alphaLow.\n* @param alphaHigh\t\t\t\t\t\t\t\tAlphaHigh is chosen so that linearFunctionDerivativeInAlphaj * (alphaHigh-alphaLow) < 0\n* @param linearFunctionInAlphaHigh\t\t\t\tEnergy function value at alphaHigh.\n* @return\t\t\t\t\t\t\t\t\t\tValue of alpha that satisfies the sufficient decrease condition, without being too small.\n*/\n", "func_signal": "private double interpolation(double alphaLow, double linearFunctionInAlphaLow, double linearFunctionDerivativeInAlphaLow, \n\t\t\t\t\t\t\t\tdouble alphaHigh, double linearFunctionInAlphaHigh)", "code": "{\n\t\t\n\t\tdouble minAlpha = Math.min(alphaLow, alphaHigh);\n\t\tdouble alphaDiff = Math.abs(alphaHigh - alphaLow);\n\t\tdouble alphaInterpolation;\n\n\t\t//logger.debug(\"We form a quadratic approximation to the linear function\");\n\t\tdouble alpha1 = -1 * ((linearFunctionDerivativeInAlphaLow * Math.pow(alphaDiff,2)) / (2 * (linearFunctionInAlphaHigh - linearFunctionInAlphaLow - linearFunctionDerivativeInAlphaLow * alphaDiff)));\n\t\t\n\t\t//logger.debug(\"The value alpha1 = \" + alpha1 + \", is the minimizer of this quadratic function\");\n\t\t\n\t\tif ((alpha1 > alphaDiff) | (Math.abs(alpha1 - alphaDiff) < 0.000000001)) {\n\t\t\tif (alpha1 < 1E-7) {}\n\t\t\telse {\n\t\t\t\t/*System.out.println(\"We reset alpha1 = alphaDiff / 2, because alphaInterpolation = \" + alpha1 + \" is too close to its predecessor \" +\n\t\t\t\t\t\t\"alphaiMinus1 = \" + alphaDiff); */\n\t\t\t\talpha1 = alphaDiff / 2;\n\t\t\t}\n\t\t} else {\n\t\t\tif ((alpha1 < 0) & (alpha1 < (alphaDiff - 9 * alphaDiff / 10))) {\n\t\t\t\tif (alpha1 < 1E-7) {}\n\t\t\t\telse {\n\t\t\t\t\t//logger.debug(\"We reset alphai = alphaiMinus1 / 2, because alphaInterpolation = \" + alpha1 + \" is \ttoo much smaller than alphaiMinus1 = \" + alphaDiff); \n\t\t\t\t\talpha1 = alphaDiff / 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//logger.debug(\"alpha1 = \" + alpha1);\n\n\t\talphaInterpolation = minAlpha + alpha1;\n\t\tthis.linearFunctionAlphaInterpolation = this.evaluateEnergyFunction(alphaInterpolation);\n\t\t//logger.debug(\"alphaInterpolation = \" + alphaInterpolation);\n\t\t//logger.debug(\"linearFunctionAlphaInterpolation = \" + this.linearFunctionAlphaInterpolation);\n\t\tif (this.linearFunctionAlphaInterpolation <= this.linearFunctionInAlpha0 + this.c1 * (alphaInterpolation) * this.linearFunctionDerivativeInAlpha0) {\n\t\t\t//logger.debug(\"The sufficient decrease condition is satisfied at alpha1 and we termine the interpolation\");\n\t\t}\n\t\telse {\n\t\t\t//double alphaiMinus2;\n\t\t\t//double alphaiMinus1 = alphaDiff;\n\t\t\t//double linearFunctionInAlphaiMinus2;\n\t\t\t//double linearFunctionInAlphaiMinus1 = linearFunctionInAlphaHigh;\n\t\t\tdouble alphai; // = alpha1;\n\t\t\t//double linearFunctionInAlphai = this.linearFunctionAlphaInterpolation;\n\t\t\t\t\n\t\t\t//do {\n\t\t\t\t//alphaiMinus2 = alphaiMinus1;\n\t\t\t\t//alphaiMinus1 = alphai;\n\t\t\t\t//linearFunctionInAlphaiMinus2 = linearFunctionInAlphaiMinus1;\n\t\t\t\t//linearFunctionInAlphaiMinus1 = linearFunctionInAlphai;\n\t\t\t\t\t\n\t\t\t\t//logger.debug(\"We construct a cubic function that interpolates the fours pieces of information\");\t\n\t\t\t\ta = 1/(Math.pow(alphaDiff,2) * Math.pow(alpha1, 2) * (alpha1-alphaDiff));\n\t\t\t\tb = a;\n\t\t\t\ta = a * (Math.pow(alphaDiff,2) * (this.linearFunctionAlphaInterpolation - linearFunctionInAlphaLow - linearFunctionDerivativeInAlphaLow * alpha1) \n\t\t\t\t\t\t+ (-Math.pow(alpha1,2)) * (linearFunctionInAlphaHigh - linearFunctionInAlphaLow - linearFunctionDerivativeInAlphaLow * alphaDiff));\n\t\t\t\tb = b * (- Math.pow(alphaDiff,3) * (this.linearFunctionAlphaInterpolation - linearFunctionInAlphaLow - linearFunctionDerivativeInAlphaLow * alpha1) \n\t\t\t\t\t\t+ Math.pow(alpha1,3) * (linearFunctionInAlphaHigh - linearFunctionInAlphaLow - linearFunctionDerivativeInAlphaLow * alphaDiff));\n\t\t\t\t\n\t\t\t\t//logger.debug(\"a = \" + a);\n\t\t\t\t//logger.debug(\"b = \" + b);\n\t\t\t\t\n\t\t\t\talphai = (-b + Math.sqrt(Math.pow(b,2) - 3 * a * linearFunctionDerivativeInAlphaLow)) / (3 * a);\n\t\t\t\t//logger.debug(\"alphai = \" + alphai);\n\t\t\t\t\n\t\t\t\tif (Math.abs(alphai - alpha1) < 0.000000001) {\n\t\t\t\t\t/*System.out.println(\"We reset alphai = alpha1 / 2, because alphaInterpolation = \" + alphai + \" is too close to its predecessor \" +\n\t\t\t\t\t\t\t\"alpha1 = \" + alpha1); */\n\t\t\t\t\talphai = alpha1 / 2;\n\t\t\t\t} else {if (alphai < (alpha1 - 9 * alpha1 / 10)) {\n\t\t\t\t\t//logger.debug(\"We reset alphai = alpha1 / 2, because alphaInterpolation = \" + alphai + \" is \ttoo much smaller than alpha1 = \" + alpha1); \n\t\t\t\t\talphai = alpha1 / 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\talphaInterpolation = minAlpha + alphai;\n\t\t\t\tthis.linearFunctionAlphaInterpolation = this.evaluateEnergyFunction(alphaInterpolation);\n\t\t\t\t//logger.debug(\"alphaInterpolation = \" + alphaInterpolation);\n\t\t\t\t//logger.debug(\"linearFunctionAlphaInterpolation = \" + this.linearFunctionAlphaInterpolation);\n\t\t\t\t//functionEvaluationNumber = functionEvaluationNumber + 1;\n\t\t\t\t\n\t\t\t/*} while (((linearFunctionInAlphai > linearFunctionInAlphaLow + this.c1 * (alphaLow + alphai) * linearFunctionDerivativeInAlphaLow) & (functionEvaluationNumber < 5)) \n\t\t\t\t\t| ((linearFunctionInAlphai - this.linearFunctionAlphaInterpolation) < 0.00000001) | ((alphai - alpha1) < 0.00000001));*/\n\t\t\t\t\n\t\t\t\t\n\t\t}\n\t\t\t\n\t\treturn alphaInterpolation;\n\t}", "path": "cdk-externals\\trunk\\org.openscience.cdk.forcefield\\src\\org\\openscience\\cdk\\modeling\\forcefield\\LineSearchForTheWolfeConditions.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/**\n * Removes a particular monomer, specified by its name.\n * \n * @param name The name of the monomer to remove\n */\n", "func_signal": "public void removeMonomer(String name)", "code": "{\n\tif (monomers.containsKey(name))\t{\n\t\tMonomer monomer = (Monomer)monomers.get(name);\n\t\tthis.remove(monomer);\n\t\tmonomers.remove(name);\n\t}\n}", "path": "cdk-externals\\trunk\\org.openscience.cdk.data\\src\\org\\openscience\\cdk\\Polymer.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/**Evaluate the energy function from an alpha value, using the current coordinates and the current direction.\n * \n * @param alpha\t\n * @return\t\t\tEnergy function value.\n */\n", "func_signal": "private double evaluateEnergyFunction(double alpha)", "code": "{\n\t//logger.debug(\"alpha= \" + alpha);\n\tthis.xAlpha.set(this.x);\n\t//logger.debug(\"xAlpha = \" + xAlpha);\n\tGVector directionStep = direction;\n\t//logger.debug(\"directionStep = \" + directionStep);\n\txAlpha.scaleAdd(alpha, directionStep, xAlpha);\n\t//logger.debug(\"xAlpha = \" + xAlpha);\n\tdouble fxAlpha = pf.energyFunction(xAlpha);\n\t//logger.debug(\"fxAlpha = \" + fxAlpha);\n\treturn fxAlpha;\n}", "path": "cdk-externals\\trunk\\org.openscience.cdk.forcefield\\src\\org\\openscience\\cdk\\modeling\\forcefield\\LineSearchForTheWolfeConditions.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/**\n\t * Clones this IsotopePattern object and its content. \n\t *\n\t * @return    The cloned object\n\t */\n", "func_signal": "@TestMethod(\"testClone\")\n\tpublic Object clone() throws CloneNotSupportedException", "code": "{\n\tIsotopePattern isoClone = new IsotopePattern();\n\tIsotopeContainer isoHighest = getMonoIsotope();\n\tfor(IsotopeContainer isoContainer: isotopeCList){\n\t\tif(isoHighest.equals(isoContainer))\n\t\t\tisoClone.setMonoIsotope((IsotopeContainer) isoContainer.clone());\n\t\telse\n\t\t\tisoClone.addIsotope((IsotopeContainer) isoContainer.clone());\n\t}\n\tisoClone.setCharge(getCharge());\n\treturn isoClone;\n}", "path": "cdk-externals\\trunk\\org.openscience.cdk.formula\\src\\org\\openscience\\cdk\\formula\\IsotopePattern.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/**\n* Procedure required by the CDOInterface. This function is only\n* supposed to be called by the JCFL library\n*/\n", "func_signal": "public void endDocument()", "code": "{\n    logger.debug(\"Closing document\");\n    logger.info(\"End CDO Object\");\n}", "path": "cdk-externals\\trunk\\org.openscience.cdk.io\\src\\org\\openscience\\cdk\\io\\iterator\\event\\EventCMLHandler.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/**\n* Procedure required by the CDOInterface. This function is only\n* supposed to be called by the JCFL library\n*/\n", "func_signal": "public void startObject(String objectType)", "code": "{\n    logger.debug(\"START:\" + objectType);\n    if (objectType.equals(\"Molecule\")) {\n        currentMolecule = builder.newAtomContainer();\n        atomEnumeration = new Hashtable<String,Integer>();\n    } else if (objectType.equals(\"Atom\")) {\n        currentAtom = builder.newAtom(\"H\");\n        logger.debug(\"Atom # \" + numberOfAtoms);\n        numberOfAtoms++;\n    } else if (objectType.equals(\"Bond\")) {\n        bond_id = null;\n        bond_stereo = -99;\n    }\n}", "path": "cdk-externals\\trunk\\org.openscience.cdk.io\\src\\org\\openscience\\cdk\\io\\iterator\\event\\EventCMLHandler.java", "repo_name": "miquelrojascherto/bioclipse.cheminformatics", "stars": 1, "license": "None", "language": "java", "size": 54656}
{"docstring": "/**\n * Builds report message for ACK'd messages\n * @param msg\n * @param source\n */\n", "func_signal": "private void reportMsgAck2(Message msg,String source)", "code": "{\n\t//Build ReportMessage\n\tReportMessage rm = new ReportMessage();\n\trm.source = msg.content[1];\n\trm.dest = source;\n\trm.remoteTime = Long.parseLong(msg.content[2]);\n\trm.msg = Message.parseStringToMessage(msg.content[0],msg.content[1],source);\n\trm.localTime = Calendar.getInstance().getTimeInMillis();\n\t//Arrived at gate\n\t//System.out.println(source);\n\tif(source.contains(\"Gate\")){\n\t\tint index = indexOf(source);\n\t\tif(index>=0){\n\t\t\tgates.elementAt(index).CheckMessageAck(rm);\n\t\t\tgates.elementAt(index).messageRecvd(rm);\n\t\t}\n\t}\n}", "path": "awesomeLGI\\Monitor.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * equals method for Gate, gate is compared based on their name\n */\n", "func_signal": "public boolean equals(Object o)", "code": "{\n\t Gate g = (Gate)o;\n\t return this.name.equals(g.name); \n }", "path": "awesome\\BGate.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Adds message to Queue, and notifies\n * @param m\n */\n", "func_signal": "public  void addMsg(Message m)", "code": "{\n\t\n\tsynchronized(outMessageQueue)\n\t{\n\t\toutMessageQueue.add(m);\n\t\toutMessageQueue.notify();\n\t}\n}", "path": "awesomeLGI\\Monitor.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Creates an instance of monitor\n * @param LGIServer\n * @param lotSize\n * @param numGates\n * @return\n */\n", "func_signal": "public static Monitor getInstance(String LGIServer,int lotSize, int numGates)", "code": "{\n\tif(instance==null){\n\t\tinstance = new Monitor(LGIServer,lotSize,numGates);\n\t\treturn instance;\n\t}else{\n\t\treturn instance;\n\t}\n}", "path": "awesomeLGI\\Monitor.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Sends messages when there is something in the queue\n */\n", "func_signal": "public void run()", "code": "{\n\tMessage msg = null;\n\twhile(true){\n\t\tsynchronized(outMessageQueue){\n\t\t\t while(outMessageQueue.isEmpty()){\n\t\t\t\t try{\n\t\t\t    \toutMessageQueue.wait();\n\t\t         }catch (InterruptedException ie) {}\n\t\t\t }\n\t\t\t msg = (Message)outMessageQueue.removeFirst();\n\t\t}\n\t\tm.send_lg(msg.toString(), msg.toAddress);\n\t\treportSentToMonitor(msg);\n\t\t//System.out.println(\"Sent \" + msg + \" FROM \" + name + \" TO \" + msg.toAddress);\n\t}\n}", "path": "awesomeLGI\\Monitor.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/*\n * Checks if the carQueue size is wrong\n */\n", "func_signal": "private boolean wrongQueueSize(MessageStore ms,int queueSize)", "code": "{\n\tif(ms.from && ms.rm.msg.type==8){\n\t\tif(ms.queueSize!=queueSize){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "path": "awesomeLGI\\Monitor.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Sends a report meessage to monitor, no longer used with LGI\n * @param msg\n */\n", "func_signal": "public void reportSentToMonitor(Message msg)", "code": "{\n\n\tif(msg.type<10){\n\t\t//System.out.println(\"call send report msg type\"+msg.type);\n\t\t//Send a copy to the monitor\n\t\tString[] s = new String[3];\n\t\ts[0] = msg.toString();\n\t\ts[1] = msg.toAddress;\n\t\ts[2] = \"\"+Calendar.getInstance().getTimeInMillis();\n\t\tMessage reportM = new Message(10,s,\"Monitor@\" + LGIServer,name);\n\t\tm.send_lg(reportM.toString(),\"Monitor@\" + LGIServer);\n\t\t//System.out.println(\"send report \"+msg);\n\t}\n\t\n}", "path": "awesomeLGI\\Monitor.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/*\n * Calculates the number of tokens the gate should have\n */\n", "func_signal": "private int tokensAfterMsgTo(Message msg)", "code": "{\n\tswitch(msg.type){\n\tcase 4:  // Set new amount of tokens from number assigned\n\t\treturn Integer.parseInt(msg.content[0]);\n\tcase 7: //parkinglot sends car out to gate\n\t\treturn 1;\n\tcase 9:   //receive tokens\n\t\treturn Integer.parseInt(msg.content[0]);\n\t}\n\treturn 0;\n}", "path": "awesomeLGI\\Monitor.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Finsd the index of a gate, else returns -1\n * @param source\n * @return\n */\n", "func_signal": "private int indexOf(String source)", "code": "{\n\tfor(int i=0;i<gates.size();i++){\n\t\tif(gates.get(i).finds(source))\n\t\t\treturn i;\n\t}\n\treturn -1;\n}", "path": "awesomeLGI\\Monitor.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/*\n * Calculates the number of tokens the gate should have\n */\n", "func_signal": "private int tokensAfterMsgFrom(Message msg)", "code": "{\n\tswitch(msg.type){\n\tcase 6://Car enters\n\t\treturn -1;\n\tcase 9://Transfer tokens\n\t\treturn (-1) * Integer.parseInt(msg.content[0]);\n\t}\n\treturn 0;\n}", "path": "awesomeLGI\\Monitor.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/*\n * Checks if there are stale messages, indicating a dead gate\n */\n", "func_signal": "private boolean staleMessagesCheck(int gateIndex)", "code": "{\n\tGateRecord gr = gates.get(gateIndex);\n\t//Check incoming messages\n\tlong now = Calendar.getInstance().getTimeInMillis();\n\tsynchronized(gr.outstandingMessagesFrom){\n\t\tif(gr.outstandingMessagesFrom.size()>0){\n\t\t\tif(now - gr.outstandingMessagesFrom.get(0).localTime > minuteLength*10){\n\t\t\t\t//System.out.println(\"1\" + (now - gr.outstandingMessagesFrom.get(0).localTime));\n\t\t\t\t//System.out.println(gr.outstandingMessagesFrom.get(0).msg.toString());\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t//Check outgoing messages\n\tsynchronized(gr.outstandingMessagesTo){\n\t\tif(gr.outstandingMessagesTo.size()>0){\n\t\t\tif(now - gr.outstandingMessagesTo.get(0).localTime > minuteLength*10){\n\t\t\t\t//System.out.println(\"2\" + (now - gr.outstandingMessagesTo.get(0).localTime));\n\t\t\t\t//System.out.println(gr.outstandingMessagesTo.get(0).msg.toString());\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "path": "awesomeLGI\\Monitor.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Builds report message for ReportMessage ack'd\n * @param msg\n * @param source\n */\n", "func_signal": "private void reportMsgAck(Message msg,String source)", "code": "{\n\t//Build ReportMessage\n\tReportMessage rm = new ReportMessage();\n\trm.source = msg.content[1];\n\trm.dest = source;\n\trm.remoteTime = Long.parseLong(msg.content[2]);\n\trm.msg = Message.parseStringToMessage(msg.content[0],msg.content[1],source);\n\trm.localTime = Calendar.getInstance().getTimeInMillis();\n\t//Find the gate\n\tint index = indexOf(rm.msg.source);\n\t//Check to see if it is matched\n\tif(index>=0){\n\tgates.elementAt(index).CheckMessageAck(rm);\n\t}\n\t//Add to incoming incoming list\n\tindex = indexOf(source);\n\tif(index>=0){\n\t\tgates.elementAt(index).messageRecvd(rm);\n\t}\n}", "path": "awesomeLGI\\Monitor.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Check if there are tokens, if so, remove them, return true\n * Else return false\n * @param t\n * @return\n */\n", "func_signal": "public boolean removeTokens(int t)", "code": "{\n\tif(CS.fetchInt(\"tokens\")>=t){\n\t\tdoDecr(\"tokens\",t);\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "awesomeLGI\\law.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Builds report message for ReportMessage rec'd\n * @param msg\n * @param source\n */\n", "func_signal": "private void reportMsgSent(Message msg,String source)", "code": "{\n\t//Build ReportMessage\n\tReportMessage rm = new ReportMessage();\n\trm.source = source;\n\trm.dest = msg.content[1];\n\trm.remoteTime = Long.parseLong(msg.content[2]);\n\trm.msg = Message.parseStringToMessage(msg.content[0],source,msg.content[1]);\n\trm.localTime = Calendar.getInstance().getTimeInMillis();\n\t//Find the gate\n\tint index = indexOf(source);\n\t//Check to see if it is matched\n\tgates.elementAt(index).CheckMessageSent(rm);\n\t//Add to outgoing message list\n\tgates.elementAt(index).messageSent(rm);\n}", "path": "awesomeLGI\\Monitor.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Main function of monitor, handles all request and messages\n */\n", "func_signal": "public void run()", "code": "{\n\tSystem.out.println(\"start monitor\");\n\twhile(true){\n\t\tAnswer a=  m.generic_receive_lg();;\n\t\tString source = a.source;\n\t\tString strMsg = a.s_payload;\n\t\tMessage msg = Message.parseStringToMessage(strMsg,source,name+\"@\"+LGIServer);\n\t\t//System.out.println(\"RECVD \" + msg + \" AT \" + name + \" FROM \" + source);\n\t\t\n\t\t//Keep the message in the log\n\t\tinMessages.add(msg);\n\t\t\n\t\t//Add message to gates Sent and Recvd lists\n\t\tswitch(msg.type){\n\t\t\n\t\tcase 2: //register the source gate \n\t\t\taddAndBroadcastGate(source);\n\t\t\ttokenDist(source);\n\t\t\tbreak;\n\t\tcase 10://Take note of message sent\n\t\t\t//System.out.println(\"GOT REPORT SENT MSG\\n\\n\\n\\n\");\n\t\t\treportMsgSent2(msg,source);\n\t\t\tbreak;\n\t\tcase 11://Take note of message recvd\n\n\t\t\t//System.out.println(\"GOT REPORT RECVD MSG\\n\\n\\n\\n\");\n\t\t\treportMsgAck2(msg,source);\n\t\t\tbreak;\n\t\tcase 13://minuteLength\n\t\t\tminuteLength = Integer.parseInt(msg.content[0]);\n\t\t\tplg.updateML(minuteLength);\n\t\t\tbreak;\n\t\tcase 14:\n\t\t\tSystem.err.println(\"Gate \" + a.source + \" is faulty for \" + msg.content[0] + \" Need to add  \" + msg.content[1] + \" tokens\");\n\t\t\tremoveBadGate(a.source);\n\t\t\tString[] content = new String[1];\n\t\t\tcontent[0] = msg.content[1];\n\t\t\t//Add the gate's tokens to the system\n\t\t\tMessage m = new Message(4,content,gates.get(0).address,name);\n\t\t\tsender.addMsg(m);\n\t\t}\t\t\t\n\t}\n}", "path": "awesomeLGI\\Monitor.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Args[0] is the LGI server\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tMonitor m = Monitor.getInstance(args[0],1000,2);\n\t\n\tString monitorAddress = m.getAddress();\n\tParkingLot p = ParkingLot.getInstance(args[0],monitorAddress, 500);\n\tTrafficGenerator t = TrafficGenerator.getInstance(args[0],monitorAddress);\n\t\n\ttry{\n\tThread.sleep(3000);}\n\tcatch(Exception e){}\n\t\n\t\n\t\n\n\tBGate g6 = new BGate(args[0],monitorAddress,6);\n\tGate g1 = new Gate(args[0],monitorAddress);\n\tGate g2 = new Gate(args[0],monitorAddress);\n\tGate g3 = new Gate(args[0],monitorAddress);\n\tGate g4 = new Gate(args[0],monitorAddress);\n\tGate g5 = new Gate(args[0],monitorAddress);\n\n\t\n\t\n\ttry{\n\t\tThread.sleep(10000);\n\t}catch(Exception e){}\n//\tg5 = null;\n\ttry{\n\t\tThread.sleep(100000);\n\t}catch(Exception e){}\n\tSystem.exit(0);\n\t\t\t\n}", "path": "awesomeLGI\\Driver.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * equals method for Gate, gate is compared based on their name\n */\n", "func_signal": "public boolean equals(Object o)", "code": "{\n\t Gate g = (Gate)o;\n\t return this.name.equals(g.name); \n }", "path": "awesomeLGI\\Gate.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/*\n * Checks if the gate allows cars without tokens\n */\n", "func_signal": "private boolean allowsWithNoTokens(MessageStore ms,int tokens)", "code": "{\n\tif(ms.from && ms.rm.msg.type==6){\n\t\tif(tokens<0){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "path": "awesomeLGI\\Monitor.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Constructor to create a Gate with random name and start all the threads\n *\n */\n", "func_signal": "public BGate(String LGIServer,String monitorAddress,int type)", "code": "{\n\tthis.type = type;\n\tRandom r = new Random();\n\tList inMessageQueue = new LinkedList();\n\tList outMessageQueue = new LinkedList();\n\tthis.LGIServer = LGIServer;\n\tthis.monitorAddress = monitorAddress;\n\tname = \"badGate-\" + Math.abs(r.nextInt())%71;\n\tm =\n         new Member(\n\t          \"http://www.moses.rutgers.edu/cs431_2008/simple.java1\",\n\t          Const.URL_LAW,\n\t          LGIServer,\n\t\t  9000,name);\n\tm.adopt(\"\", \"\");\n\t\n\tlistener = new Listener();\n\tsender = new Sender();\n\tmaster = new Master();\n\tmaster.start();\n\tsender.start();\n\tlistener.start();\n\t\n\tregisterGate();\n}", "path": "awesome\\BGate.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "/*\n * Logs messags using ReportMessage Type\n */\n", "func_signal": "private void reportMsgSent2(Message msg,String source)", "code": "{\n\t//Build ReportMessage\n\tReportMessage rm = new ReportMessage();\n\trm.source = source;\n\trm.dest = msg.content[1];\n\trm.remoteTime = Long.parseLong(msg.content[2]);\n\trm.msg = Message.parseStringToMessage(msg.content[0],source,msg.content[1]);\n\trm.localTime = Calendar.getInstance().getTimeInMillis();\n\t//Sent to gate\n\tif(msg.content[1].contains(\"Gate\")){\n\t\tint index = indexOf(msg.content[1]);\n\t\tif(index>=0){\n\t\t\tgates.elementAt(index).CheckMessageAck(rm);\n\t\t}\n\t}\n\tif(source.contains(\"Gate\")){\n\t\tint index = indexOf(source);\n\t\tif(index>=0){\n\t\t\tgates.elementAt(index).messageSent(rm);\n\t\t}\n\t}\n}", "path": "awesomeLGI\\Monitor.java", "repo_name": "joshowen/ByzantineParkingLot", "stars": 0, "license": "None", "language": "java", "size": 116}
{"docstring": "//http://www.codeproject.com/KB/cs/distancebetweenlocations.aspx has some\n//code to determine the distance between two lat-lon points. Right now, I\n//am not going to get into implementations from that or others.\n//For the time being I am going to assume that 0.00135 degree difference\n//makes for 100 meters distance! (God help me for blasphemy!)\n", "func_signal": "private boolean checkUpdate(LocationData loc)", "code": "{\n    //Run some checks to see if the location has moved far away to\n    //deserve an update!\n    if (location == null)\n        return true; //Update anyway!\n\n    if (location.getDistance(loc) < loc.getErrorInMeters())\n        //Currently set location is within the error radius of the latest\n        //reading. Don't update.\n        return false;\n\n    //This would normally qualify for an update, except that it cannot\n    //have happened too soon. If that is the case, then it means that\n    //there was a manual update in between.\n    long delayInMilli = loc.getTimeStamp().getTime()\n                                        - location.getTimeStamp().getTime();\n    if (delayInMilli < this.interval)\n        return false;\n    return true;\n}", "path": "src\\LocationMaster.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "/* TBD: Resolve through Fire Eagle. Isn't there any open APIs!!?? */\n", "func_signal": "public boolean resolve()", "code": "{\n    if ((mnc == null) || (mnc.length() == 0))\n        return false;\n    if ((mcc == null) || (mcc.length() == 0))\n        return false;\n    if ((lac == null) || (lac.length() == 0))\n        return false;\n    if ((cellid == null) || (cellid.length() == 0))\n        return false;\n    return resolveWithOpenCellID();\n}", "path": "src\\CellIDBeacon.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "//Hopefully, this is correct implementation of a non-integral mod!\n", "func_signal": "public static double mod(double x, double y)", "code": "{\n    if ((y == 0) || (x == Double.NaN) || (y == Double.NaN))\n        return Double.NaN;\n    double q = Math.floor(x / y);\n    return x - (q * y);\n}", "path": "src\\LocationData.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "/**\n * For moto, Example IMSI (O2 UK): 234103530089555\n * String mnc = imsi.substring(3,5); // 10 (O2)\n * @return\n */\n", "func_signal": "protected boolean getMNC()", "code": "{\n    String out = null;\n    String[] keys = new String[] {\n        \"phone.mnc\",\n        \"com.sonyericsson.net.mnc\",\n        \"com.nokia.mid.networkid\",\n        \"mnc\"\n    };\n\n    try {\n        for (int i = 0 ; i < keys.length ; i++) {\n            out = System.getProperty(keys[i]);\n            if ((out != null) && !out.equals(\"null\") && !out.equals(\"\"))\n                break;\n        }\n    } catch (Exception e) {\n        return false;\n    }\n//        if ((out == null) || out.equals(\"null\") || out.equals(\"\")) {\n        //net.rim.device.api.system.GPRSInfo ? Class.forName?? Later!\n        //out = GPRSInfo.getCellInfo().getMNC();\n//        }\n    if ((out == null) || out.equals(\"null\") || out.equals(\"\"))\n        out = getIMSI().equals(\"\")?\"\": getIMSI().substring(3,5);\n    if ((out == null) || out.equals(\"null\") || out.equals(\"\"))\n        return false;\n    mnc = out;\n    return true;\n}", "path": "src\\CellIDBeacon.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "//Get the X coordinate of the draw, assuming 0,0 is top-left\n", "func_signal": "protected int getX(LocationData loc)", "code": "{\n    LocationData curr = new LocationData(getDisplayLat(), getDisplayLon(), 0);\n    double dist = curr.getXDistance(loc);\n    //Get the number of pixels (+ve or -ve) from the center.\n    int x = (int)(((dist * width)/ (2 * getDisplayRadiusInKm())) + 0.5);\n    \n    return width/2 + x;\n}", "path": "src\\MapDisplay.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "//Get the Y coordinate of the draw, assuming 0,0 is top-left\n", "func_signal": "protected int getY(LocationData loc)", "code": "{\n    LocationData curr = new LocationData(getDisplayLat(), getDisplayLon(), 0);\n    double dist = curr.getYDistance(loc);\n    //Get the number of pixels (+ve or -ve) from the center.\n    int y = (int)(((dist * height)/ (2 * getDisplayRadiusInKm())) + 0.5);\n\n    return height/2 - y;\n}", "path": "src\\MapDisplay.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "/*\nLookup with a lat-lon: Should always be unambiguous!\n{\n \"count\": 1,\n \"stat\": \"ok\",\n \"locations\": [\n  {\n   \"name\": \"Cheluvadipalya Lane, Bangalore, Karnataka, India\",\n   \"woeid\": 55924889,\n   \"place_id\": \"7lymAgCcBJX6_TKGDw\"\n  }\n ],\n \"start\": 0,\n \"total\": 1,\n \"query\": \"lat=12.967&lon=77.567\"\n}\n\nLookup with a query string!\n{\n \"count\": 22,\n \"stat\": \"ok\",\n \"locations\": [\n  {\n   \"name\": \"London, England\",\n   \"woeid\": 44418,\n   \"place_id\": \".2P4je.dBZgMyQ\"\n  },\n  {\n   \"name\": \"London, Ontario\",\n   \"woeid\": 4063,\n   \"place_id\": \"NRJjNLydAZo9\"\n  },\n  ...\n  {\n   \"name\": \"London, France\",\n   \"woeid\": 20215476,\n   \"place_id\": \"QXJP3KqbAZ6NZA.pqA\"\n  }\n ],\n \"start\": 0,\n \"total\": 22,\n \"query\": \"q=London\"\n}\n */\n", "func_signal": "public String[] lookupLocation(Hashtable params)", "code": "{\n    if (state != STATE_AUTHORIZED)\n        return null;\n    AccessToken aToken = new AccessToken(token, secret);\n    Consumer oConsumer = getOauthConsumer();\n    String response = \"\";\n    try {\n        response = oConsumer.accessProtectedResource(OAUTH_HOST+LOOKUP_API_URL,\n                                                    aToken, params, \"POST\");\n    } catch (OAuthServiceProviderException ospe) {\n        String feError = this.naiveParseErrorResponse(ospe.getHTTPResponse());\n        System.err.println(\"FireEagle::updateLocation - Caught exception: \"\n                           + ospe.getHTTPResponse() + \": \" + feError);\n        return null;\n    } catch (IOException ioe) {\n        System.err.println(\"FireEagle::updateLocation - Caught exception: \"\n                           + ioe.getMessage());\n        return null;\n    }\n\n    //Call succeeded.\n    String[] locations = null;\n    try {\n        JSONObject parsedResponse = new JSONObject(response);\n        String status = parsedResponse.getString(\"stat\");\n        if (!status.equals(\"ok\"))\n            return null;\n        int count = parsedResponse.getInt(\"count\");\n        System.err.println(\"Lookup query successful: Got \"+Integer.toString(count)+\" entries\");\n        if (count == 0)\n            return null;\n        locations = new String[count];\n        JSONArray locArray = parsedResponse.getJSONArray(\"locations\");\n        for (int i = 0 ; i < count ; i++) {\n            locations[i] = locArray.getJSONObject(i).getString(\"name\");\n//                System.err.println(\"Got location: \"+locations[i]);\n        }\n    } catch (JSONException jx) {\n        System.err.println(\"Failed to parse JSON response: \"+jx.getMessage());\n        return null; //Failed to parse JSON.\n    }\n    return locations;\n}", "path": "src\\FireEagle.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "/**\n * get the lac sring from phone\n */\n", "func_signal": "protected boolean getLAC()", "code": "{\n    String out = null;\n    String[] keys = new String[] {\n        \"phone.lac\",\n        \"com.sonyericsson.net.lac\",\n        \"com.nokia.mid.lac\",\n        \"LocAreaCode\",\n        \"com.sonyericsson.net.lac\",\n        \"com.samsung.lac\",\n        \"com.siemens.lac\",\n        \"lac\"\n    };\n\n    try {\n        for (int i = 0 ; i < keys.length ; i++) {\n            out = System.getProperty(keys[i]);\n            if ((out != null) && !out.equals(\"null\") && !out.equals(\"\"))\n                break;\n        }\n    } catch (Exception e) {\n        return false;\n    }\n\n//        if ((out == null) || out.equals(\"null\") || out.equals(\"\")) {\n        //net.rim.device.api.system.GPRSInfo ? Class.forName?? Later!\n        //out = GPRSInfo.getCellInfo().getLAC();\n        if ((out == null) || out.equals(\"null\") || out.equals(\"\"))\n            return false;\n//        }\n    lac = out;\n    return true;\n}", "path": "src\\CellIDBeacon.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "//Helps to preserve context.\n", "func_signal": "public DisplayModule(GeoCrawler app)", "code": "{\n       this.app = app;\n       if (exitCommand == null)\n           exitCommand = new Command(\"Exit\", Command.EXIT, 1);\n       if (homeCommand == null)\n           homeCommand = new Command(\"Main menu\", Command.SCREEN, 1);\n       if (backCommand == null)\n           backCommand = new Command(\"Back\", Command.BACK, 1);\n       previousState = GeoCrawler.STATE_BEGIN; //Default previous state.\n   }", "path": "src\\DisplayModule.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "//The two following method are strictly temporary, till I get the JSON code\n//from https://meapplicationdevelopers.dev.java.net/source/browse/meapplicationdevelopers/demobox/mobileajax/lib/json/\n//working.\n", "func_signal": "protected String naiveParseErrorResponse(String someXML)", "code": "{\n    int s=someXML.indexOf(\"msg=\");\n    if (s<0) {\n        return \"unknown\";\n    }\n    s=s+5; // move to end of msg=\" tag\n    int e=someXML.indexOf(\"\\\"\", s);\n    if (e<0) {\n        return \"unknown\";\n    }\n    return someXML.substring(s, e);\n}", "path": "src\\FireEagle.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "/* Expected response is like:\n { \"Ip\" : \"59.162.228.158\",\n   \"Status\" : \"OK\",\n   \"CountryCode\" : \"IN\",\n   \"CountryName\" : \"India\",\n   \"RegionCode\" : \"19\",\n   \"RegionName\" : \"Karnataka\",\n   \"City\" : \"Bangalore\",\n   \"ZipPostalCode\" : \"\",\n   \"Latitude\" : \"12.9833\",\n   \"Longitude\" : \"77.5833\",\n   \"Gmtoffset\" : \"5.5\",\n   \"Dstoffset\" : \"5.5\" } */\n", "func_signal": "protected boolean resolveWithIpInfoDB()", "code": "{\n    //Access the web service and get back a JSON response...\n    String response = null;\n    try {\n        response = HTTPUtil.httpGetRequest(IPBeacon.IP_INFO_DB_URL);\n    } catch (IOException iox) {\n        System.err.println(\"IP lookup query failed.\");\n        return false;\n    }\n    if (response == null)\n        return false;\n\n    try {\n        JSONObject parsedResponse = new JSONObject(response);\n        if (!parsedResponse.getString(\"Status\").equals(\"OK\")) {\n            System.err.println(\"IP lookup reported failure\");\n            return false;\n        }\n\n        String latStr = parsedResponse.getString(\"Latitude\");\n        String lonStr = parsedResponse.getString(\"Longitude\");\n        if ((latStr == null) || (lonStr == null)) {\n            System.err.println(\"IP lookup did not return lat-lon\");\n            return false;\n        }\n        double lat = Double.parseDouble(latStr);\n        double lon = Double.parseDouble(lonStr);\n        this.setLatLon(lat, lon);\n    } catch (JSONException jsox) {\n        System.err.println(\"Failed to parse IP lookup response\");\n        System.err.println(\"Exception: \"+jsox.getMessage());\n        return false;\n    }\n\n    return true;\n}", "path": "src\\IPBeacon.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "/**\n * Example IMSI (O2 UK): 234103530089555\n * String mcc = imsi.substring(0,3); // 234 (UK)\n * String mnc = imsi.substring(3,5); // 10 (O2)\n * @return\n */\n", "func_signal": "protected String getIMSI()", "code": "{\n    String out = null;\n    String[] keys = new String[] {\n        \"IMSI\",\n        \"phone.imsi\",\n        \"com.nokia.mid.mobinfo.IMSI\",\n        \"imsi\"\n    };\n\n    try {\n        for (int i = 0 ; i < keys.length ; i++) {\n            out = System.getProperty(keys[i]);\n            if ((out != null) && !out.equals(\"null\") && !out.equals(\"\"))\n                return out;\n        }\n    } catch (Exception e) {\n        out = \"\";\n        return out;\n    }\n\n//        if ((out == null) || out.equals(\"null\") || out.equals(\"\")) {\n        //net.rim.device.api.system.GPRSInfo ? Class.forName?? Later!\n        //out = GPRSInfo.getCellInfo().getBSIC();\n        //return out;\n//        }\n\n    if ((out == null) || out.equals(\"null\") || out.equals(\"\"))\n        out = \"\";\n    return out;\n}", "path": "src\\CellIDBeacon.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "//Override this method to allow for periodic refresh, even if the current\n//location has not changed.\n", "func_signal": "public boolean needsRefresh(LocationData loc)", "code": "{\n    if (refreshMode == MapItemSource.REFRESH_REQUESTED)\n        return true;\n    if (refreshMode != MapItemSource.REFRESH_AUTO)\n        return false;\n    return (items == null) ? true : false;\n}", "path": "src\\MapItemSource.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "/**\n *\n * For moto, Example IMSI (O2 UK): 234103530089555\n * String mcc = imsi.substring(0,3); // 234 (UK)\n * @return\n */\n", "func_signal": "protected boolean getMCC()", "code": "{\n    String out = null;\n    String[] keys = new String[] {\n        \"phone.mcc\",\n        \"com.sonyericsson.net.mcc\",\n        \"com.nokia.mid.countrycode\",\n        \"mcc\"\n    };\n\n    try {\n        for (int i = 0 ; i < keys.length ; i++) {\n            out = System.getProperty(keys[i]);\n            if ((out != null) && !out.equals(\"null\") && !out.equals(\"\"))\n                break;\n        }\n    } catch (Exception e) {\n        return false;\n    }\n//        if ((out == null) || out.equals(\"null\") || out.equals(\"\")) {\n        //net.rim.device.api.system.GPRSInfo ? Class.forName?? Later!\n        //out = GPRSInfo.getCellInfo().getMCC();\n//        }\n    if ((out == null) || out.equals(\"null\") || out.equals(\"\"))\n        out = getIMSI().equals(\"\")?\"\": getIMSI().substring(0,3);\n    if ((out == null) || out.equals(\"null\") || out.equals(\"\"))\n        return false;\n    mcc = out;\n    return true;\n}", "path": "src\\CellIDBeacon.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "/* This function needs the distance in KM and the angle in degrees with\n * NORTH as 0-degree, increasing anti-clockwise. So, EAST is -90-degree\n * or 270 degree.\n * Algorithm source: http://williams.best.vwh.net/avform.htm#LL\n */\n", "func_signal": "public LocationData getLatLonAt(double distanceInKm, double angleInDegree)", "code": "{\n    double greatCircleDistanceInRadian = distanceInKm/EARTH_RADIUS_IN_KM;\n    double angleInRadian = Math.toRadians(angleInDegree);\n    double latInRadian = Math.toRadians(lat);\n    double lonInRadian = Math.toRadians(lon);\n\n    double sinOfDistance = Math.sin(greatCircleDistanceInRadian); //reused\n\n    double newLatInRadian = MathUtil.asin((Math.sin(latInRadian) * Math.cos(greatCircleDistanceInRadian))\n                                       + (Math.cos(latInRadian) * sinOfDistance * Math.cos(angleInRadian)));\n    double newLonInRadian = lonInRadian;\n    double cosOfLat = Math.cos(newLatInRadian); //reused\n    if (cosOfLat != 0) {\n        //Not a pole\n        newLonInRadian = mod(lonInRadian\n                                  - MathUtil.asin(Math.sin(angleInRadian) * sinOfDistance / cosOfLat)\n                                  + Math.PI, 2 * Math.PI) - Math.PI;\n    }\n\n    return new LocationData(Math.toDegrees(newLatInRadian),\n                                              Math.toDegrees(newLonInRadian),\n                                              this.getErrorInMeters());\n}", "path": "src\\LocationData.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "/*\n * Code copied from http://www.easywms.com/easywms/?q=en/node/3589\n * Mashed up with coding style from\n * http://sunpo.spaces.live.com/blog/cns!E63009838F5BB82C!455.entry\n */\n/**\n * get the cell id in the phone\n *\n * @return\n */\n", "func_signal": "protected boolean getCellId()", "code": "{\n    String out = null;\n    String[] keys = new String[] {\n        \"Cell-ID\",\n        \"CellID\",\n        \"phone.cid\",\n        \"com.nokia.mid.cellid\",\n        \"com.sonyericsson.net.cellid\",\n        \"com.samsung.cellid\",\n        \"com.siemens.cellid\",\n        \"cid\"\n    };\n    try {\n        for (int i = 0 ; i < keys.length ; i++) {\n            out = System.getProperty(keys[i]);\n            if ((out != null) && !out.equals(\"null\") && !out.equals(\"\"))\n                break;\n        }\n    } catch (Exception e) {\n        return false;\n    }\n\n//        if ((out == null) || out.equals(\"null\") || out.equals(\"\")) {\n        //net.rim.device.api.system.GPRSInfo ? Class.forName?? Later!\n        //#= out = GPRSInfo.getCellInfo().getCellId();\n        if ((out == null) || out.equals(\"null\") || out.equals(\"\"))\n            return false;\n//        }\n    cellid = out;\n    return true;\n}", "path": "src\\CellIDBeacon.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "/*\n * Copied from : http://developers.sun.com/mobility/midp/questions/calcbyte/\n */\n", "func_signal": "private static byte[] readFromHTTPConnection(HttpConnection hpc)", "code": "{\n    byte[] bytes;\n\n    try {\n        InputStream in = hpc.openDataInputStream();\n        int length = (int) hpc.getLength();\n        if (length == -1) {\n            // Reading from an HTTP 1.0 server or a chunked HTTP 1.1\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int c ;\n            while (true) {\n                c = in.read();\n                if (c == -1)\n                    break;\n                baos.write(c);\n            }\n            bytes = baos.toByteArray();\n            baos.close();\n            baos = null;\n        } else {\n            // Reading a Content-Length labeled payload\n            bytes = new byte[length];\n            DataInputStream dis = new DataInputStream(in);\n            dis.readFully(bytes, 0, length);\n            dis.close();\n            dis = null;\n        }\n        in.close();\n        in = null;\n    } catch (IOException e) {\n        System.out.println(\"Could not open input stream for HTTP conneciton\");\n        return null;\n    }\n\n    return bytes;\n}", "path": "src\\HTTPUtil.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "/*\n {\n   \"stat\":\"ok\",\n   \"user\":{\n     \"readable\":true,\n     \"writable\":true,\n     \"located_at\":\"2009-07-08T10:41:38-07:00\",\n     \"hierarchy_string\":\"23424775|2344916|29375222|9807\",\n     \"timezone\":\"America\\/Vancouver, Canada\",\n     \"location_hierarchy\":[\n       {\n         \"geometry\":{\n           \"type\":\"Polygon\",\n           \"coordinates\":[\n             [\n               [-123.2649536133,49.1318588257],\n               [-122.9857177734,49.1318588257],\n               [-122.9857177734,49.3521881104],\n               [-123.2649536133,49.3521881104],\n               [-123.2649536133,49.1318588257]\n             ]\n           ],\n           \"bbox\":[\n             [-123.2649536133,49.1318588257],\n             [-122.9857177734,49.3521881104]\n           ]\n         },\n         \"level\":3,\n         \"located_at\":\"2009-07-08T10:41:38-07:00\",\n         \"name\":\"Vancouver, British Columbia\",\n         \"woeid\":9807,\n         \"place_id\":\"63v7zaqQCZxX\",\n         \"best_guess\":true,\n         \"id\":301551191,\n         \"label\":null,\n         \"level_name\":\"city\",\n         \"normal_name\":\"Vancouver\"\n       },\n       ...\n     ],\n     \"token\":\"XXXXXXXXXX\"\n   }\n }\n */\n", "func_signal": "public LocationData getLocation()", "code": "{\n        if (state != STATE_AUTHORIZED)\n            return null;\n        AccessToken aToken = new AccessToken(token, secret);\n        Consumer oConsumer = getOauthConsumer();\n        String response = \"\";\n        try {\n            response = oConsumer.accessProtectedResource(OAUTH_HOST+QUERY_API_URL,\n                                                        aToken, null, \"GET\");\n        } catch (OAuthServiceProviderException ospe) {\n            String feError = this.naiveParseErrorResponse(ospe.getHTTPResponse());\n            System.err.println(\"FireEagle::updateLocation - Caught exception: \"\n                               + ospe.getHTTPResponse() + \": \" + feError);\n            return null;\n        } catch (IOException ioe) {\n            System.err.println(\"FireEagle::updateLocation - Caught exception: \"\n                               + ioe.getMessage());\n            return null;\n        }\n\n        try {\n            JSONObject parsedResponse = new JSONObject(response);\n            String status = parsedResponse.getString(\"stat\");\n            if (!status.equals(\"ok\"))\n                return null;\n            JSONArray locations = parsedResponse.getJSONObject(\"user\").getJSONArray(\"location_hierarchy\");\n            if (locations.length() == 0)\n                return null;\n            //Get only the first one. This will be the innermost one.\n            JSONObject geometry = locations.getJSONObject(0).getJSONObject(\"geometry\");\n            if (\"Point\".equals(geometry.getString(\"type\"))) {\n                //We got a point location!\n                JSONArray coords = geometry.getJSONArray(\"coordinates\");\n                return new LocationData(Double.parseDouble(coords.getString(1)),\n                                        Double.parseDouble(coords.getString(0)),\n                                        0);\n            } else {\n                //We got a bounding box!\n                JSONArray bbox = geometry.getJSONArray(\"bbox\");\n                double neLon = Double.parseDouble(bbox.getJSONArray(0).getString(0));\n                double neLat = Double.parseDouble(bbox.getJSONArray(0).getString(1));\n                double swLon = Double.parseDouble(bbox.getJSONArray(0).getString(0));\n                double swLat = Double.parseDouble(bbox.getJSONArray(0).getString(1));\n                return new LocationData((neLat+swLat)/2, (neLon+swLon)/2, 0);\n            }\n        } catch (JSONException jx) {\n            System.err.println(\"Failed to parse JSON response: \"+jx.getMessage());\n        }\n        return null; //Failed at some stage.\n    }", "path": "src\\FireEagle.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "//Name is not accurate. It is called to set even the first item.\n", "func_signal": "public void highlightNextMapItem(boolean forward)", "code": "{\n    int i = -1;\n\n    if (items != null) {\n        if (highlightedMapItemIndex == -1) {\n            i = 0;\n            while ((i != items.length) && !isMapItemVisible(i))\n                i++;\n            if (i == items.length)\n                i = -1;\n        } else if (forward) {\n            if (highlightedMapItemIndex < (items.length - 1))\n                i = highlightedMapItemIndex + 1;\n            else\n                i = 0;\n            while ((i != highlightedMapItemIndex) && !isMapItemVisible(i)) {\n                if (i == items.length)\n                    i = 0;\n                else\n                    i++;\n            }\n        } else {\n            if (highlightedMapItemIndex > 0)\n                i = highlightedMapItemIndex - 1;\n            else\n                i = items.length - 1;\n            while ((i != highlightedMapItemIndex) && !isMapItemVisible(i)) {\n                if (i == 0)\n                    i = items.length - 1;\n                else\n                    i--;\n            }\n        }\n\n        if (i == highlightedMapItemIndex)\n            highlightedMapItemIndex = -1; //Can't find any!\n        else\n            highlightedMapItemIndex = i;\n    }\n}", "path": "src\\MapCanvas.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "//The reason this is not part of the LocationBeacon class is because we want\n//to have a clear separation between the beacon (which is mostly external\n//format, and our own custom internal format.\n", "func_signal": "protected LocationData getLocationFromBeacon(LocationBeacon beacon)", "code": "{\n    double error = ((Double)beacon.getProperty(\"errorInMeter\")).doubleValue();\n    return new LocationData(beacon.getLatitude(), beacon.getLongitude(), error);\n}", "path": "src\\LocationMaster.java", "repo_name": "anandi/GeoCrawler", "stars": 1, "license": "None", "language": "java", "size": 2972}
{"docstring": "/* ------------------------------------------------------------ */\n", "func_signal": "public String getJSON()", "code": "{\n    if (_json == null)\n    {\n        JSON json=_pool == null?JSON.getDefault():_pool.getMsgJSON();\n        StringBuffer buf=new StringBuffer(json.getStringBufferSize());\n        synchronized(buf)\n        {\n            json.appendMap(buf,this);\n            _json=buf.toString();\n        }\n    }\n    return _json;\n}", "path": "chameleon-webplugin\\src\\org\\cometd\\server\\MessageImpl.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/**\n * Loads a bunch of data from a file, zip file, or directory\n * (non-recursive). You can use <code>quad.properties</code> as the\n * properties file or anything else that you like.\n * \n * @param args\n *            The name of the property and the name of the file or directory\n *            to load.\n * \n * @throws Exception\n */\n", "func_signal": "public static void main(final String[] args)", "code": "{\n\n        if (args.length < 2 ) {\n\n            System.out.println(\"usage: properties fileOrDirectoryOrZip\");\n\n            System.exit(1);\n\n        }\n\n\tfinal Properties properties;\n\ttry {\n\n\t\tfinal File propertyFile = new File(args[0]);\n\n\t\tif (!propertyFile.exists()) {\n\n\t\t\tthrow new FileNotFoundException(propertyFile.toString());\n\t\t\t\n\t\t}\n\n\t\tproperties = new Properties();\n\t\t\n\t\tfinal InputStream is = new BufferedInputStream(new FileInputStream(\n\t\t\t\tpropertyFile));\n\t\t\n\t\ttry {\n\t\n\t\t\tproperties.load(is);\n\t\t\t\n\t\t} finally {\n\t\t\t\n\t\t\tis.close();\n\t\t\t\n\t\t}\n\n\t} catch(IOException ex) {\n\t\t\n\t\tthrow new RuntimeException(ex);\n\t\t\n\t}\n    \t\n        try {\n       \n        \tfinal File dataFileOrDirectory = new File(args[1]);\n        \t\n        \tif (!dataFileOrDirectory.exists())\n\t\t\tthrow new FileNotFoundException(dataFileOrDirectory.toString());\n        \t\n            new LoadNamedGraphs().loadAll(properties, dataFileOrDirectory);\n            \n        } catch (Exception ex) {\n            \n            ex.printStackTrace(System.err);\n            \n        }\n\n    }", "path": "chameleon\\src\\org\\chameleon\\engine\\LoadNamedGraphs.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/* ------------------------------------------------------------ */\n/*\n * (non-Javadoc)\n * \n * @see java.util.HashMap#putAll(java.util.Map)\n */\n", "func_signal": "@Override\npublic void putAll(Map<? extends String,? extends Object> m)", "code": "{\n    _json=null;\n    _buffer=null;\n    super.putAll(m);\n    _channel=(String)get(Bayeux.CHANNEL_FIELD);\n    Object id=get(Bayeux.ID_FIELD);\n    _id=id == null?null:id.toString();\n    _data=get(Bayeux.DATA_FIELD);\n}", "path": "chameleon-webplugin\\src\\org\\cometd\\server\\MessageImpl.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/* ------------------------------------------------------------ */\n", "func_signal": "public boolean isSuccessful()", "code": "{\n    Boolean bool=(Boolean)get(Bayeux.SUCCESSFUL_FIELD);\n    return bool != null && bool.booleanValue();\n}", "path": "chameleon-webplugin\\src\\org\\cometd\\server\\MessageImpl.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/* ------------------------------------------------------------ */\n", "func_signal": "public void setAssociated(Message associated)", "code": "{\n    if (_associated != associated)\n    {\n        if (_associated != null)\n            ((MessageImpl)_associated).decRef();\n        _associated=associated;\n        if (_associated != null)\n            ((MessageImpl)_associated).incRef();\n    }\n}", "path": "chameleon-webplugin\\src\\org\\cometd\\server\\MessageImpl.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/**\n * I overrode this method so that I could explicitly do database-at-once\n * closure after the data has been loaded.  Incremental truth maintenance\n * is not appropriate in this case.\n */\n", "func_signal": "@Override\npublic void loadSomeDataFromADocument(Repository repo, String resource, \n    String baseURL) throws Exception", "code": "{\n    \n    BigdataSailRepositoryConnection cxn = (BigdataSailRepositoryConnection) \n        repo.getConnection();\n    cxn.setAutoCommit(false);\n    try {\n        InputStream is = getClass().getResourceAsStream(resource);\n        if (is == null && new File(resource).exists())\n            is = new FileInputStream(resource);\n        if (is == null)\n            throw new Exception(\"Could not locate resource: \" + resource);\n        Reader reader = new InputStreamReader(new BufferedInputStream(is));\n        cxn.add(reader, baseURL, RDFFormat.RDFXML);\n        cxn.computeClosure();\n        cxn.commit();\n    } catch (Exception ex) {\n        cxn.rollback();\n        throw ex;\n    } finally {\n        // close the repository connection\n        cxn.close();\n    }\n    \n}", "path": "chameleon\\src\\org\\chameleon\\engine\\TestBaseball.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/**\n * Load all data from some directory.\n * \n * @param dir\n * \n * @throws Exception\n */\n", "func_signal": "public void loadAll(final Properties properties, final File file) throws Exception", "code": "{\n\n\t\t/*\n\t\t * We are going to use the \"quads\" mode. Right now, the quads mode does\n\t\t * not do inference AT ALL.\n\t\t */\n//\t\tfinal File propertyFile = new File(\n//\t\t\t\t\"c:/bigdata-data-sets/LoadNamedGraphs.properties\");\n\t\n//        // create a backing file\n//        final File journalFile = new File(\"c:/bigdata.jnl\");\n////        final File journalFile = File.createTempFile(\"bigdata\", \".jnl\");\n////        journalFile.deleteOnExit();\n//        properties.setProperty(BigdataSail.Options.FILE, journalFile\n//                .getAbsolutePath());\n\n    // You can do the overrides in the property file.\n//        /*\n//         * Override the write retention queue (default is 500).\n//         * \n//         * This makes a BIG difference in the journal size and throughput if you\n//         * are bulk loading data and have enough RAM.\n//         */\n//        properties.setProperty(\n//                IndexMetadata.Options.WRITE_RETENTION_QUEUE_CAPACITY, \"8000\");\n//\n//        properties.setProperty(IndexMetadata.Options.BTREE_BRANCHING_FACTOR,\n//                \"64\");\n\n    // instantiate a sail\n    BigdataSail sail = new BigdataSail(properties);\n    Repository repo = new BigdataSailRepository(sail);\n    repo.initialize();\n\n    RepositoryConnection cxn = repo.getConnection();\n    cxn.setAutoCommit(false);\n    try {\n        final long stmtsBefore =\n            // fast range count!\n            sail.getDatabase().getStatementCount();\n//                cxn.size();\n        final long start = System.currentTimeMillis();\n\n        if (file.getName().endsWith(\".zip\")\n\t\t\t\t\t|| file.getName().endsWith(\".ZIP\")) {\n\n\t\t\t\t// then process the sample data files one at a time\n\t\t\t\tInputStream is = new FileInputStream(file);\n\t\t\t\tZipInputStream zis = new ZipInputStream(\n\t\t\t\t\t\tnew BufferedInputStream(is));\n\t\t\t\tZipEntry ze = null;\n\t\t\t\twhile ((ze = zis.getNextEntry()) != null) {\n\t\t\t\t\tif (ze.isDirectory()) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tString name = ze.getName();\n\t\t\t\t\t//if (log.isInfoEnabled())\n\t\t\t\t\t//\tlog.info(name);\n\t\t\t\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\t\t\t\tbyte[] bytes = new byte[4096];\n\t\t\t\t\tint count;\n\t\t\t\t\twhile ((count = zis.read(bytes, 0, 4096)) != -1) {\n\t\t\t\t\t\tbaos.write(bytes, 0, count);\n\t\t\t\t\t}\n\t\t\t\t\tbaos.close();\n\t\t\t\t\tfinal Reader reader = new InputStreamReader(\n\t\t\t\t\t\t\tnew ByteArrayInputStream(baos.toByteArray()));\n\t\t\t\t\tString baseIRI = file.toURI() + \"/\" + name;\n\n\t\t\t\t\tcxn.add(reader, baseIRI, RDFFormat.forFileName(name));\n\n\t\t\t\t\t// note: due to buffering, this reports stmts flush to the\n\t\t\t\t\t// db\n\t\t\t\t\t// not stmts added to the cxn.\n\t\t\t\t\tlong elapsed = System.currentTimeMillis() - start;\n\t                // fast range count!\n\t                long stmtsAfter = sail.getDatabase().getStatementCount();\n//\t\t\t\t\tlong stmtsAfter = cxn.size();\n\t\t\t\t\tlong stmtsAdded = stmtsAfter - stmtsBefore;\n\t\t\t\t\tint throughput = (int) ((double) stmtsAdded\n\t\t\t\t\t\t\t/ (double) elapsed * 1000d);\n\t\t\t\t\tSystem.err.println(\"loaded: \" + name + \" : \" + stmtsAdded\n\t\t\t\t\t\t\t+ \" stmts in \" + elapsed + \" millis: \" + throughput\n\t\t\t\t\t\t\t+ \" stmts/sec\");\n\t\t\t\t}\n\t\t\t\tzis.close();\n\t\t\t\t\n\t\t\t} else if(file.isDirectory()) {\n\t\t\t\t\n\t\t\t\tfinal File[] files = file.listFiles(new RDFFilenameFilter());\n\t\t\t\t\n\t\t\t\tif (files != null) {\n\n\t\t\t\t    int nloaded = 0;\n\t\t\t\t    \n\t\t\t\t\tfor (File f : files) {\n\n//\t\t\t\t\t\tSystem.err.println(\"Reading: \" + f);\n\t\t\t\t\t\t\n\t\t\t\t\t\tfinal Reader reader = new InputStreamReader(\n\t\t\t\t\t\t\t\t(f.getName().endsWith(\".gz\")\n\t\t\t\t\t\t\t\t\t\t|| f.getName().endsWith(\".GZ\") ? new GZIPInputStream(\n\t\t\t\t\t\t\t\t\t\tnew FileInputStream(f))\n\t\t\t\t\t\t\t\t\t\t: new FileInputStream(f)));\n\n\t\t\t\t\t\tfinal String baseIRI = file.toURI().toString();\n\n\t\t\t\t\t\tcxn.add(reader, baseIRI, RDFFormat.forFileName(f\n\t\t\t\t\t\t\t\t.getName()));\n\n                    /*\n                     * Note: due to buffering, this reports stmts flushed to\n                     * the db not stmts added to the cxn.\n                     * \n                     * Note: cxn.size() will do a FULL SCAN of the statement\n                     * index for many cases in order to report an exact\n                     * range count.  This is an issue with the Sesame API\n                     * semantics (exact range count reporting) and with\n                     * delete markers in the bigdata indices.  Fast range\n                     * counts are available with two key probes but do not\n                     * satisfy the Sesame semantics.  You can get the fast\n                     * range count from the bigdata APIs.\n                     */\n\t\t\t\t\t\tlong elapsed = System.currentTimeMillis() - start;\n\t\t                // fast range count!\n\t\t\t\t\t\tlong stmtsAfter = sail.getDatabase().getStatementCount();\n//\t\t\t\t\t\tlong stmtsAfter = cxn.size();\n\t\t\t\t\t\tlong stmtsAdded = stmtsAfter - stmtsBefore;\n\t\t\t\t\t\tint throughput = (int) ((double) stmtsAdded\n\t\t\t\t\t\t\t\t/ (double) elapsed * 1000d);\n\n                    nloaded++;\n\n\t\t\t\t\t\tSystem.err.println(\"loaded: \" + f \n\t\t\t\t\t\t        + \" : \" + stmtsAdded + \" stmts\"\n\t\t\t\t\t\t        +\" in \" + elapsed + \" millis\" + \n\t\t\t\t\t\t        \" : \"+ throughput + \" stmts/sec\"+\n\t\t\t\t\t\t\t\t\", nloaded=\"+nloaded);\n\n\t\t\t\t\t\treader.close();\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if(file.isFile()) {\n\t\t\t\t\n\t\t\t\tfinal Reader reader = new InputStreamReader(\n\t\t\t\t\t\tnew FileInputStream(file));\n\n\t\t\t\tfinal String baseIRI = file.toURI().toString();\n\n\t\t\t\tcxn.add(reader, baseIRI, RDFFormat.forFileName(file\n\t\t\t\t\t\t.getName()));\n\n\t\t\t\t// note: due to buffering, this reports stmts flush to the\n\t\t\t\t// db not stmts added to the cxn.\n\t\t\t\tlong elapsed = System.currentTimeMillis() - start;\n//\t\t\t\tlong stmtsAfter = cxn.size();\n\t\t\t\tlong stmtsAfter = sail.getDatabase().getStatementCount();\n\t\t\t\tlong stmtsAdded = stmtsAfter - stmtsBefore;\n\t\t\t\tint throughput = (int) ((double) stmtsAdded\n\t\t\t\t\t\t/ (double) elapsed * 1000d);\n\n\t\t\t\tSystem.err.println(\"loaded: \" + file + \" : \" + stmtsAdded\n\t\t\t\t\t\t+ \" stmts in \" + elapsed + \" millis: \" + throughput\n\t\t\t\t\t\t+ \" stmts/sec\");\n\n\t\t\t\treader.close();\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tSystem.err.println(\"Can not load: \"+file);\n\t\t\t\t\n\t\t\t}\n        \n        // autocommit is false, we need to commit our SAIL \"transaction\"\n        cxn.commit();\n\n        // gather statistics\n        long elapsed = System.currentTimeMillis() - start;\n//            long stmtsAfter = cxn.size();\n        long stmtsAfter = sail.getDatabase().getStatementCount();\n        long stmtsAdded = stmtsAfter - stmtsBefore;\n        int throughput = (int) ((double) stmtsAdded / (double) elapsed * 1000d);\n        System.err.println(\"statements after: \" + stmtsAfter);\n        System.err.println(\"loaded: \" + stmtsAdded + \" in \" + elapsed + \" millis: \"\n                + throughput + \" stmts/sec\");\n\n    } catch (Exception ex) {\n        cxn.rollback();\n        throw ex;\n    } finally {\n        // close the repository connection\n        cxn.close();\n        sail.shutDown();\n    }\n\n}", "path": "chameleon\\src\\org\\chameleon\\engine\\LoadNamedGraphs.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/**\n * Run a simple LUBM load and query benchmark.\n * \n * @param lubmResource the ZIP file containing the LUBM data files\n * @param filter helps filter out non-data files in the ZIP file\n * @throws Exception\n */\n", "func_signal": "public void doLUBMTest(final String lubmResource) \n    throws Exception", "code": "{\n    \n    /*\n     We are going to use the \"fast load\" mode for this LUBM test.  In fast \n     mode, we lose certain features, like the full text index and statement \n     identifiers.  The database also does not do inference automatically, so\n     we have to tell the inference engine explicitly when to compute \n     closure.  Also, there is no recording of justification chains for \n     inferences, so this mode is extremely bad for retraction.  If we were \n     to retract a statement, we would have to tell the inference engine to \n     remove all inferences and completely re-compute the closure for the \n     entire database!\n     */\n    final Properties properties = loadProperties(\"fastload.properties\");\n    \n    if (properties.getProperty(com.bigdata.journal.Options.FILE) == null) {\n        /*\n         * Create a backing temporary file iff none was specified in the\n         * properties file.\n         */\n        final File journal = File.createTempFile(\"bigdata\", \".jnl\");\n        journal.deleteOnExit();\n        properties.setProperty(BigdataSail.Options.FILE, journal\n                .getAbsolutePath());\n    }\n    \n    // instantiate a sail\n    BigdataSail sail = new BigdataSail(properties);\n    Repository repo = new BigdataSailRepository(sail);\n    repo.initialize();\n\n    RepositoryConnection cxn = repo.getConnection();\n    cxn.setAutoCommit(false);\n    try {\n        // fast range count!\n        long stmtsBefore = sail.getDatabase().getStatementCount();\n//            // full index scan!\n//            long stmtsBefore = cxn.size();\n        logger.info(\"statements before: \" + stmtsBefore);\n        long start = System.currentTimeMillis();\n        \n        // first add the LUBM ontology\n        cxn.add(getReader(getClass(), \"univ-bench.owl\"), /*LUBM.NS*/\"http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#\",\n                RDFFormat.RDFXML);\n        \n        // then process the LUBM sample data files one at a time\n        InputStream is = getClass().getResourceAsStream(lubmResource);\n        ZipInputStream zis = \n            new ZipInputStream(new BufferedInputStream(is));\n        ZipEntry ze = null;\n        while ((ze = zis.getNextEntry()) != null) {\n            if (ze.isDirectory()) {\n                continue;\n            }\n            String name = ze.getName();\n            logger.info(name);\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            byte[] bytes = new byte[4096];\n            int count;\n            while ((count = zis.read(bytes, 0, 4096)) != -1) {\n                baos.write(bytes, 0, count);\n            }\n            baos.close();\n            Reader reader = new InputStreamReader(\n                new ByteArrayInputStream(baos.toByteArray())\n                );\n            cxn.add(reader, /*LUBM.NS*/\"http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#\", RDFFormat.RDFXML);\n        }\n        zis.close();\n        \n        // autocommit is false, we need to commit our SAIL \"transaction\"\n        cxn.commit();\n        \n        // when we are in \"fast load\" mode there is no automatic inference\n        // as statements are loaded.  we therefore must invoke the inference\n        // engine ourselves when we are done loading data.\n        BigdataSailConnection sailCxn = (BigdataSailConnection)\n            ((BigdataSailRepositoryConnection) cxn).getSailConnection();\n        sailCxn.computeClosure();\n        sailCxn.getTripleStore().commit();\n\n        // gather statistics\n        long elapsed = System.currentTimeMillis() - start;\n        // fast range count!\n        long stmtsAfter = ((BigdataSailRepository)repo).getDatabase().getStatementCount();\n//            // full index scan!\n//            long stmtsAfter = cxn.size();\n        long stmtsAdded = stmtsAfter - stmtsBefore;\n        int throughput =\n                (int) ((double) stmtsAdded / (double) elapsed * 1000d);\n        logger.info(\"statements after: \" + stmtsAfter);\n        logger.info(\"loaded: \" + stmtsAdded + \" in \" + elapsed\n                + \" millis: \" + throughput + \" stmts/sec\");\n        \n        // ok, now let's do one of the LUBM queries\n        /*\n        [query4]\n        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n        PREFIX ub: <http://www.lehigh.edu/~zhp2/2004/0401/univ-bench.owl#>\n        SELECT ?x ?y1 ?y2 ?y3\n        WHERE{\n            ?x a ub:Professor;\n                ub:worksFor <http://www.Department0.University0.edu>;\n                ub:name ?y1;\n                ub:emailAddress ?y2;\n                ub:telephone ?y3.\n        }\n        */\n        // build LUBM query 4 using the handy SparqlBuilder utility\n        // note: SparqlBuilder is for \"construct\" queries only\n        // but you could modify it easily to do \"select\" instead\n        SparqlBuilder sb = new SparqlBuilder();\n        sb.addTriplePattern(\"?x\", RDF.TYPE, /*LUBM.PROFESSOR*/\"Professor\");\n        sb.addTriplePattern(\"?x\", /*LUBM.WORKS_FOR*/\"worksFor\", \n                new URIImpl(\"http://www.Department0.University0.edu\"));\n        sb.addTriplePattern(\"?x\", /*LUBM.NAME*/\"name\", \"?y1\");\n        sb.addTriplePattern(\"?x\", /*LUBM.EMAIL_ADDRESS*/\"emailAddress\", \"?y2\");\n        sb.addTriplePattern(\"?x\", /*LUBM.TELEPHONE*/\"telephone\", \"?y3\");\n\n        logger.info(\"evaluating LUBM query 4...\");\n        start = System.currentTimeMillis();\n        \n        final GraphQuery graphQuery = \n            cxn.prepareGraphQuery(QueryLanguage.SPARQL, sb.toString());\n        final StringWriter sw = new StringWriter();\n        graphQuery.evaluate(new RDFXMLWriter(sw));\n        \n        elapsed = System.currentTimeMillis() - start;\n        logger.info(\"done. evaluted in \" + elapsed + \" millis\");\n        \n        // if you want to see the output, here it is:\n        logger.info(sw.toString());\n                    \n    } catch (Exception ex) {\n        cxn.rollback();\n        throw ex;\n    } finally {\n        // close the repository connection\n        cxn.close();\n    }\n                \n}", "path": "chameleon\\src\\org\\chameleon\\engine\\SampleCode.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/* ------------------------------------------------------------ */\n", "func_signal": "public Map<String,Object> getExt(boolean create)", "code": "{\n    Object ext=_ext == null?get(Bayeux.EXT_FIELD):_ext;\n    if (ext instanceof Map)\n        return (Map<String,Object>)ext;\n    if (ext instanceof JSON.Literal)\n    {\n        JSON json=_pool == null?JSON.getDefault():_pool.getMsgJSON();\n        _ext=ext=json.fromJSON(ext.toString());\n        super.put(Bayeux.EXT_FIELD,ext);\n        return (Map<String,Object>)ext;\n    }\n\n    if (!create)\n        return null;\n\n    _ext=ext=new HashMap<String,Object>();\n    super.put(Bayeux.EXT_FIELD,ext);\n    return (Map<String,Object>)ext;\n\n}", "path": "chameleon-webplugin\\src\\org\\cometd\\server\\MessageImpl.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/* ------------------------------------------------------------ */\n", "func_signal": "public MessageImpl()", "code": "{\n    super(8);\n    _pool=null;\n}", "path": "chameleon-webplugin\\src\\org\\cometd\\server\\MessageImpl.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/* ------------------------------------------------------------ */\n", "func_signal": "public void decRef()", "code": "{\n    int r=_refs.decrementAndGet();\n    if (r == 0 && _pool != null)\n    {\n        setAssociated(null);\n        _pool.recycleMessage(this);\n    }\n    else if (r < 0)\n        throw new IllegalStateException();\n}", "path": "chameleon-webplugin\\src\\org\\cometd\\server\\MessageImpl.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/**\n * Add a statement to a repository.\n * \n * @param repo\n * @throws Exception\n */\n", "func_signal": "public void loadSomeData(Repository repo) throws Exception", "code": "{\n    RepositoryConnection cxn = repo.getConnection();\n    cxn.setAutoCommit(false);\n    try {\n        Resource s = new URIImpl(\"http://www.bigdata.com/rdf#Mike\");\n        URI p = new URIImpl(\"http://www.bigdata.com/rdf#loves\");\n        Value o = new URIImpl(\"http://www.bigdata.com/rdf#RDF\");\n        Statement stmt = new StatementImpl(s, p, o);\n        cxn.add(stmt);\n        cxn.commit();\n    } catch (Exception ex) {\n        cxn.rollback();\n        throw ex;\n    } finally {\n        // close the repository connection\n        cxn.close();\n    }\n}", "path": "chameleon\\src\\org\\chameleon\\engine\\SampleCode.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/**\n * Load a document into a repository.\n * \n * @param repo\n * @param resource\n * @param baseURL\n * @throws Exception\n */\n", "func_signal": "public void loadSomeDataFromADocument(Repository repo, String resource, \n    String baseURL) throws Exception", "code": "{\n    \n    RepositoryConnection cxn = repo.getConnection();\n    cxn.setAutoCommit(false);\n    try {\n        InputStream is = getClass().getResourceAsStream(resource);\n        if (is == null && new File(resource).exists())\n            is = new FileInputStream(resource);\n        if (is == null)\n            throw new Exception(\"Could not locate resource: \" + resource);\n        Reader reader = new InputStreamReader(new BufferedInputStream(is));\n        cxn.add(reader, baseURL, RDFFormat.RDFXML);\n        cxn.commit();\n    } catch (Exception ex) {\n        cxn.rollback();\n        throw ex;\n    } finally {\n        // close the repository connection\n        cxn.close();\n    }\n    \n}", "path": "chameleon\\src\\org\\chameleon\\engine\\SampleCode.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/**\n * Demonstrate execution of statement level provenance.\n * \n * @param repo\n * @throws Exception\n */\n", "func_signal": "public void executeProvenanceQuery(Repository repo) throws Exception", "code": "{\n    \n    RepositoryConnection cxn = repo.getConnection();\n    cxn.setAutoCommit(false);\n    try {\n        cxn.remove((Resource)null, (URI)null, (Value)null);\n        cxn.commit();\n        \n        cxn.add(getReader(getClass(), \"provenance.rdf\"), \n            \"\", RDFFormat.RDFXML);\n        cxn.commit();\n        \n        RepositoryResult<Statement> results = \n            cxn.getStatements(null, null, null, false);\n        while(results.hasNext()) {\n            ////logger.info(results.next());\n        }\n        \n    } catch (Exception ex) {\n        cxn.rollback();\n        throw ex;\n    } finally {\n        // close the repository connection\n        cxn.close();\n    }\n\n    /*\n     * With MVCC, you read from a historical state to avoid blocking and\n     * being blocked by writers.  BigdataSailRepository.getQueryConnection\n     * gives you a view of the repository at the last commit point.\n     */\n    if (repo instanceof BigdataSailRepository) { \n        cxn = ((BigdataSailRepository) repo).getQueryConnection();\n    } else {\n        cxn = repo.getConnection();\n    }\n\n    try {\n\n        RepositoryResult<Statement> results = \n            cxn.getStatements(null, null, null, false);\n        while(results.hasNext()) {\n            ////logger.info(results.next());\n        }\n        \n    } finally {\n        // close the repository connection\n        cxn.close();\n    }\n    \n    String NS = \"http://www.bigdata.com/rdf#\";\n    String MIKE = NS + \"Mike\";\n    String LOVES = NS + \"loves\";\n    String RDF = NS + \"RDF\";\n    String query = \n        \"construct { ?sid ?p ?o } \" +\n        \"where { \" +\n        \"  ?sid ?p ?o .\" +\n        \"  graph ?sid { <\"+MIKE+\"> <\"+LOVES+\"> <\"+RDF+\"> } \" +\n        \"}\";\n    executeConstructQuery(repo, query, QueryLanguage.SPARQL);\n    // should see the provenance information for { Mike loves RDF }\n    \n}", "path": "chameleon\\src\\org\\chameleon\\engine\\SampleCode.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/* ------------------------------------------------------------ */\n", "func_signal": "public String getClientId()", "code": "{\n    if (_clientId == null)\n        _clientId=(String)get(Bayeux.CLIENT_FIELD);\n    return _clientId;\n}", "path": "chameleon-webplugin\\src\\org\\cometd\\server\\MessageImpl.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/* ------------------------------------------------------------ */\n/*\n * (non-Javadoc)\n * \n * @see java.util.HashMap#remove(java.lang.Object)\n */\n", "func_signal": "@Override\npublic Object remove(Object key)", "code": "{\n    _json=null;\n    _buffer=null;\n    if (Bayeux.CHANNEL_FIELD.equals(key))\n        _channel=null;\n    else if (Bayeux.ID_FIELD.equals(key))\n        _id=null;\n    else if (Bayeux.DATA_FIELD.equals(key))\n        _data=null;\n    else if (Bayeux.EXT_FIELD.equals(key))\n        _ext=null;\n    return super.remove(key);\n}", "path": "chameleon-webplugin\\src\\org\\cometd\\server\\MessageImpl.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/* ------------------------------------------------------------ */\n/*\n * (non-Javadoc)\n * \n * @see java.util.HashMap#put(java.lang.Object, java.lang.Object)\n */\n", "func_signal": "@Override\npublic Object put(String key, Object value)", "code": "{\n    _json=null;\n    _buffer=null;\n    if (Bayeux.CHANNEL_FIELD.equals(key))\n        _channel=(String)value;\n    else if (Bayeux.ID_FIELD.equals(key))\n        _id=value.toString();\n    else if (Bayeux.CLIENT_FIELD.equals(key))\n        _clientId=(String)value;\n    else if (Bayeux.DATA_FIELD.equals(key))\n        _data=value;\n    else if (Bayeux.EXT_FIELD.equals(key))\n        _ext=value;\n    return super.put(key,value);\n}", "path": "chameleon-webplugin\\src\\org\\cometd\\server\\MessageImpl.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/**\n * Execute a \"select\" query.\n * \n * @param repo\n * @param query\n * @param ql\n * @throws Exception\n */\n", "func_signal": "public void executeSelectQuery(Repository repo, String query, \n    QueryLanguage ql) throws Exception", "code": "{\n    \n    /*\n     * With MVCC, you read from a historical state to avoid blocking and\n     * being blocked by writers.  BigdataSailRepository.getQueryConnection\n     * gives you a view of the repository at the last commit point.\n     */\n    RepositoryConnection cxn;\n    if (repo instanceof BigdataSailRepository) { \n        cxn = ((BigdataSailRepository) repo).getQueryConnection();\n    } else {\n        cxn = repo.getConnection();\n    }\n    \n    try {\n\n        final TupleQuery tupleQuery = cxn.prepareTupleQuery(ql, query);\n        tupleQuery.setIncludeInferred(true /* includeInferred */);\n        TupleQueryResult result = tupleQuery.evaluate();\n        // do something with the results\n        while (result.hasNext()) {\n            BindingSet bindingSet = result.next();\n            ////logger.info(bindingSet);\n        }\n        \n    } finally {\n        // close the repository connection\n        cxn.close();\n    }\n    \n}", "path": "chameleon\\src\\org\\chameleon\\engine\\SampleCode.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/* ------------------------------------------------------------ */\n", "func_signal": "public Object clone()", "code": "{\n    MessageImpl msg=new MessageImpl();\n    msg.putAll(this);\n    msg._channel=_channel;\n    msg._clientId=_clientId;\n    msg._id=_id;\n    return msg;\n}", "path": "chameleon-webplugin\\src\\org\\cometd\\server\\MessageImpl.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/**\n * Demonstrate execution of a free-text query.\n * \n * @param repo\n * @throws Exception\n */\n", "func_signal": "public void executeFreeTextQuery(Repository repo) throws Exception", "code": "{\n    \n    RepositoryConnection cxn = repo.getConnection();\n    cxn.setAutoCommit(false);\n    try {\n        cxn.add(new URIImpl(\"http://www.bigdata.com/A\"), RDFS.LABEL,\n                new LiteralImpl(\"Yellow Rose\"));\n        cxn.add(new URIImpl(\"http://www.bigdata.com/B\"), RDFS.LABEL,\n                new LiteralImpl(\"Red Rose\"));\n        cxn.add(new URIImpl(\"http://www.bigdata.com/C\"), RDFS.LABEL,\n                new LiteralImpl(\"Old Yellow House\"));\n        cxn.add(new URIImpl(\"http://www.bigdata.com/D\"), RDFS.LABEL,\n                new LiteralImpl(\"Loud Yell\"));\n        cxn.commit();\n    } catch (Exception ex) {\n        cxn.rollback();\n        throw ex;\n    } finally {\n        // close the repository connection\n        cxn.close();\n    }\n    \n    String query = \"select ?x where { ?x <\"+BNS.SEARCH+\"> \\\"Yell\\\" . }\";\n    executeSelectQuery(repo, query, QueryLanguage.SPARQL);\n    // will match A, C, and D\n    \n}", "path": "chameleon\\src\\org\\chameleon\\engine\\SampleCode.java", "repo_name": "alexzeze/chameleon", "stars": 1, "license": "None", "language": "java", "size": 12516}
{"docstring": "/**\n * Dumps the state of the TEM memory management module.\n * \n * This is only useful for driver development / debugging. It should not be\n * included in production versions, because it could be used to leak secrets.\n * \n * @param output the buffer that will receive the stat results\n * @param outputOffset the offset of the first byte in the output buffer that\n *        will receive the stat results\n * @return the number of bytes written to the output buffer\n */\n", "func_signal": "public static final short stat(byte[] output, short outputOffset)", "code": "{\n\tshort o = outputOffset;\n\t\n\t// Header: 3 shorts indicating available memory of each type.\n\tfor (byte memoryType = JCSystem.MEMORY_TYPE_PERSISTENT;\n\t     memoryType <= JCSystem.MEMORY_TYPE_TRANSIENT_DESELECT; memoryType++) {\n\t\tUtil.setShort(output, o, JCSystem.getAvailableMemory(memoryType));\n\t\to += 2;\n\t}\n\t\n\t// Status for each buffer file entry:\n\t//   1 byte - bit 2-0: 0 = EEPROM, 1 = clear on reset, 2 = clear on deselect\n\t//            bit 5: 1 = public, 0 = locked\n\t//            bit 6: 1 = allocated, 0 = free\n\t//            bit 7: 1 = pinned, 0 = unpinned\n\t//   2 bytes - requested buffer size\n\t//   2 bytes - size of actual buffer in the memory layout\n\tfor (byte i = 0; i < NUM_BUFFERS; i++) {\n\t\toutput[o] = (byte)(JCSystem.isTransient(buffers[i]) |\n\t\t                   (flags[i] & BUFFER_PINNED) | (flags[i] << 6) |\n\t\t                   (TEMBuffers.isPublic(i) ? 0x20 : 0));\n\t\to++;\n\t\tUtil.setShort(output, o, sizes[i]); o += 2;\n\t\tUtil.setShort(output, o, (short)((byte[])buffers[i]).length); o += 2;\n\t}\t\t\n\treturn (short)(o - outputOffset);\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMBuffers.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Pins down the memory zone referenced by a buffer file entry.\n * \n * This method should be called before obtaining a buffer via\n * {@link #get(byte)}. The associated method, {@link #unpin(byte)}, should be\n * called once the work on the buffer is complete.\n * \n * @param bufferIndex the buffer file entry whose memory zone will be pinned\n * @return <code>true</code> if the pinning succeeded, or <code>false</code>\n *         if the given buffer file entry is invalid\n */\n", "func_signal": "public static final boolean pin(byte bufferIndex)", "code": "{\n\tif (bufferIndex < 0 || bufferIndex >= NUM_BUFFERS)\n\t\treturn false;\n\t\n\tflags[bufferIndex] |= BUFFER_PINNED;\n\treturn true;\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMBuffers.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Generates an encryption key (or key pair, for PKS).\n * @param keyIsAsymmetric <code>true</code> to obtain a PKS key, or\n *                        <code>false</code> for a symmetric key\n * @return a tuple (slot of private key, slot of public key / zero for\n *         symmetric keys) packaged in a short\n */\n", "func_signal": "public static final short generateKey(boolean keyIsAsymmetric)", "code": "{\n  byte privKeyIndex = findFreeKeySlot();\n  byte pubKeyIndex = privKeyIndex;\n  if (privKeyIndex == INVALID_KEY)\n    return INVALID_KEY_PAIR;\n\n  if (keyIsAsymmetric) {\n    // Asymmetric key pair.\n    KeyPair newKP = new KeyPair(KeyPair.ALG_RSA_CRT,\n                                KeyBuilder.LENGTH_RSA_2048);\n    newKP.genKeyPair();\n    keys[privKeyIndex] = newKP.getPrivate();\n    pubKeyIndex = findFreeKeySlot();\n    JCSystem.requestObjectDeletion();      \n    if (pubKeyIndex == INVALID_KEY) {\n      keys[privKeyIndex] = null;\n      newKP.getPrivate().clearKey();\n      newKP.getPublic().clearKey();\n      return INVALID_KEY_PAIR;\n    }\n    keys[pubKeyIndex] = newKP.getPublic();\n  }\n  else {\n    // Symmetric key.\n    DESKey key = (DESKey)KeyBuilder.buildKey(KeyBuilder.TYPE_DES,\n                                             KeyBuilder.LENGTH_DES3_2KEY,\n                                             false);\n    short keySize = (short)(key.getSize() / 8);\n    random(randomMaterial, (short)0, keySize);\n    key.setKey(randomMaterial, (short)0);\n    keys[privKeyIndex] = key;\n    pubKeyIndex = INVALID_KEY;\n  }\n  return Util.makeShort(privKeyIndex, pubKeyIndex);    \n}", "path": "src\\edu\\mit\\csail\\tc\\TEMCrypto.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/** Reads/Writes a value from the TEM store. */\n", "func_signal": "public static boolean readOrWrite(byte[] address, short addressOffset,\n                                  byte[] value, short valueOffset,\n                                  boolean opIsRead, boolean create)", "code": "{\n\tshort cellNumber = findCell(address, addressOffset);\n\tif (cellNumber == INVALID_CELL) {\n\t\tif (create == false)\n\t\t\treturn false;\n\t\t\n\t\tcellNumber = allocCell();\n\t\tif (cellNumber == INVALID_CELL)\n\t\t\treturn false; // TODO: driver-managed cells or page faults\n\t\tUtil.arrayCopyNonAtomic(address, addressOffset, data,\n\t\t                        (short)(CELL_SIZE * cellNumber), ADDRESS_SIZE);\n\t}\n\t\t\n\tif (opIsRead)\n\t\tUtil.arrayCopyNonAtomic(data,\n\t\t                        (short)(CELL_SIZE * cellNumber + ADDRESS_SIZE),\n\t\t                        value, valueOffset, VALUE_SIZE);\n\telse\n\t\tUtil.arrayCopyNonAtomic(value, valueOffset, data,\n\t\t                        (short)(CELL_SIZE * cellNumber + ADDRESS_SIZE),\n\t\t                        VALUE_SIZE);\n\treturn true;\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMStore.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Releases all the resources held by the TEM cryptographic engine.\n * \n * Called when the TEM is de-activated.\n */\n", "func_signal": "public static final void deinit()", "code": "{\n  for (short i = 0; i < keys.length; i++) {\n    if (keys[i] != null)\n      keys[i].clearKey();\n  }\n  keys = null;\n  authorizations = null;\n  persistent = null;\n  \n  symCipher = null; asymCipher = null;\n  digest = null; randomizer = null;\n  symSignature = null; asymSignature = null;\n  randomMaterial = null;\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMCrypto.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Releases a buffer's memory zone and frees the associated buffer file entry.\n * \n * The buffer must not be pinned.\n * \n * @param bufferIndex the buffer file entry that will be cleared\n */\n", "func_signal": "public static final void release(byte bufferIndex)", "code": "{\n\tif (bufferIndex < 0 || bufferIndex >= NUM_BUFFERS)\n\t\treturn;\n\tUtil.arrayFillNonAtomic((byte[])buffers[bufferIndex], (short)0,\n\t                        sizes[bufferIndex], (byte)0);\n\tsizes[bufferIndex] = 0;\n\tflags[bufferIndex] = 0;\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMBuffers.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/** Computes the maximum size of the result of encrypting some data.\n * \n * @param keyIndex the entry in the key file pointing to the encryption key\n * @param plainBytes the number of bytes be encrypted\n * @return the maximum size of the result of using the given key to encrypt\n *         plainBytes bytes of data\n */\n", "func_signal": "public static final short getEncryptedDataSize(byte keyIndex,\n                                                short plainBytes)", "code": "{\n  Key pk = keys[keyIndex];\n  if (pk instanceof DESKey) {\n    short blockSize = 8;  // NOTE: don't know how to get block size from API\n    return (short)(((plainBytes + blockSize) / blockSize) * blockSize);\n  }\n  \n  short outBlockSize = (short)(pk.getSize() >> 3);\n  short inBlockSize = (short)(outBlockSize - pksCipherPadding);\n  return (short)((plainBytes + inBlockSize - 1) / inBlockSize * outBlockSize);\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMCrypto.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Dumps the state of the TEM cryptographic engine.\n * \n * @param output the buffer that will receive the stat results\n * @param outputOffset the offset of the first byte in the output buffer that\n *                     will receive the stat results\n * @return the number of bytes written to the output buffer\n */\n", "func_signal": "public static final short stat(byte[] output, short outputOffset)", "code": "{\n  short o = outputOffset;\n  \n  // status for each key\n  for (byte i = 0; i < NUM_KEYS; i++) {\n    if (keys[i] == null)\n      continue;\n    output[o] = i; o++;\n    output[o] = getKeyType(keys[i]); o++;\n    Util.setShort(output, o, keys[i].getSize()); o += 2;\n  }\n  \n  return (short)(o - outputOffset);\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMCrypto.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Un-pins a memory zone previously pinned by {@link #pin(byte)}.\n * \n * This method should be called after finishing all the work on a buffer which\n * was previously pinned via {@link #pin(byte)}.\n * \n * @param bufferIndex the buffer file entry whose memory zone will be\n *                    un-pinned\n */\n", "func_signal": "public static final boolean unpin(byte bufferIndex)", "code": "{\n\tif (bufferIndex < 0 || bufferIndex >= NUM_BUFFERS)\n\t\treturn false;\n\t\n\tflags[bufferIndex] &= ~BUFFER_PINNED;\n\treturn true;\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMBuffers.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Executes the currently bound SEC.\n * \n * For correct functionality, the engine's status should be\n * {@link #STATUS_READY}.\n */\n", "func_signal": "public static void execute()", "code": "{\n\t// ASSERT: status == STATUS_READY\t\t\n\t\n\t// resume execution\n\tshort sp = TEMExecution.i_secSP;\n\tshort ip = TEMExecution.i_secIP;\n\tbyte[] pBuffer = TEMBuffers.get(TEMExecution.i_secBufferIndex);\t\t\n\tbyte[] outBuffer;\n\tif (TEMExecution.outBufferIndex == TEMBuffers.INVALID_BUFFER)\n\t\toutBuffer = null;\n\telse {\n\t\tTEMBuffers.pin(TEMExecution.outBufferIndex);\t\t\t\n\t\toutBuffer = TEMBuffers.get(TEMExecution.outBufferIndex);\t\t\t\n\t}\n\tshort outOffset = TEMExecution.outLength;\n\t\n\t// registers\n\tshort opcode;\n\tshort operand1 = (short)0, operand2, operand3, operand4, result;\n\tboolean condition;\n\t\n\t// execute\n\ttry {\n\t\twhile (true) {\n\t\t\t// vm block\n\t\t\topcode = pBuffer[ip];\n\t\t\tip++;\n\t\t\tswitch (opcode) {\n\t\t\t\n        /**** Arithmetics ****/\n\t\t\t\n\t\t\tcase 0x10: // add\n        case 0x11: // sub\n        case 0x12: // mul\n        case 0x13: // div\n        case 0x14: // mod\n        case 0x15: // available (rotational shift left?)\n        case 0x16: // available (rotational shift right?)\n        case 0x17: // available (xor?)\n\t\t\t\tsp -= 2; operand2 = Util.getShort(pBuffer, sp);\n\t\t\t\tsp -= 2; operand1 = Util.getShort(pBuffer, sp);\n\t\t\t\tswitch(opcode & 0x07) {\n\t\t\t\tcase 0x00: \n\t\t\t\t\tresult = (short)(operand1 + operand2); break;\n\t\t\t\tcase 0x01: // sub\n\t\t\t\t\tresult = (short)(operand1 - operand2); break;\n\t\t\t\tcase 0x02: // mul\n\t\t\t\t\tresult = (short)(operand1 * operand2); break;\n\t\t\t\tcase 0x03: // div\n\t\t\t\t\tresult = (short)(operand1 / operand2); break;\n\t\t\t\tcase 0x04: // mod\n\t\t\t\t\tresult = (short)(operand1 % operand2); break;\n\t\t\t\tdefault:   // undefined op\n\t\t\t\t\tresult = 0;\n\t\t\t\t}\n\t\t\t\tUtil.setShort(pBuffer, sp, result); sp += 2;\n\t\t\t\tbreak;\n\n\t\t  \n        /**** Complex memory stream operations ****/\n\t\t\t\t\n        case 0x18: // mdfxb (message digest w/ fixed buffers)\n        case 0x19: // mdvb  (message digest w/ variable buffers)\n        case 0x1A: // mcmpfxb (memory-compare fixed buffers)\n        case 0x1B: // mcmpvb  (memory-compare variable buffers)\n        case 0x1C: // mcfxb (memory-copy fixed buffers)\n        case 0x1D: // mcvb  (memory-copy variable buffers)\n          if ((opcode & 1) != 0) {\n            sp -= 2; operand3 = Util.getShort(pBuffer, sp);\n            sp -= 2; operand2 = Util.getShort(pBuffer, sp);\n            sp -= 2; operand1 = Util.getShort(pBuffer, sp);\n          }\n          else {\n            operand1 = Util.getShort(pBuffer, ip); ip += 2;\n            operand2 = Util.getShort(pBuffer, ip); ip += 2;\n            operand3 = Util.getShort(pBuffer, ip); ip += 2;\n          }\n          if ((opcode & 4) != 0) {\n            Util.arrayCopyNonAtomic(pBuffer, operand2,\n                                    pBuffer, operand3, operand1);\n            result = operand1;\n          }\n          else if ((opcode & 2) != 0) {\n              result = Util.arrayCompare(pBuffer, operand2,\n                                         pBuffer, operand3, operand1);\n          }\n          else {\n            if (operand3 == -1) {\n              result = TEMCrypto.digest(pBuffer, operand2, operand1,\n                                        outBuffer, outOffset);\n              outOffset += result;\n            }\n            else\n              result = TEMCrypto.digest(pBuffer, operand2, operand1,\n                                        pBuffer, operand3);\n          }\n          Util.setShort(pBuffer, sp, result); sp += 2;          \n          break;\n          \n        case 0x1E: // rnd (generate random data)\n          sp -= 2; operand2 = Util.getShort(pBuffer, sp);\n          sp -= 2; operand1 = Util.getShort(pBuffer, sp);\n          if (operand2 == -1) {\n            TEMCrypto.random(outBuffer, outOffset, operand1);\n            outOffset += operand1;\n          }\n          else\n            TEMCrypto.random(pBuffer, operand2, operand1);\n          break;        \n        \n        case 0x1F: // unallocated\n          break;\n\n          \n        /**** Flow control ****/\n          \n        case 0x21: // jz, je  (jump if zero / equal)\n        case 0x22: // ja, jg  (if above zero / greater)\n        case 0x23: // jae, jge  (if above or equal to zero / greater or equal)\n        case 0x24: // jb, jl  (if below zero / less)\n        case 0x25: // jbe, jle  (if below or equal to zero / less or equal)\n        case 0x26: // jnz, jne  (if non-zero / equal)\n        case 0x27: // jmp (unconditional jump)          \n  \t\t\t\tif (opcode != 0x27) {\n  \t\t\t\t\t// jmp doesn't pop a stack value, everything else does\n  \t\t\t\t\tsp -= 2; operand1 = Util.getShort(pBuffer, sp);\n  \t\t\t\t}\n  \t\t\t\toperand2 = Util.getShort(pBuffer, ip); ip += 2;\n  \t\t\t\tcondition = false;\n  \t\t\t\tif ((opcode & 0x01) != 0)\n  \t\t\t\t\tcondition |= (operand1 == 0);\n  \t\t\t\tif ((opcode & 0x02) != 0)\n  \t\t\t\t\tcondition |= (operand1 > 0);\n  \t\t\t\tif ((opcode & 0x04) != 0)\n  \t\t\t\t\tcondition |= (operand1 < 0);\t\t\t\t\t\n  \t\t\t\tif (condition)\n  \t\t\t\t\tip += operand2;\n  \t\t\t\tbreak;\n  \t\t\t\t\n\n  \t\t  /**** Memory access ****/\n  \t\t\t\t\n\t\t\tcase 0x30: // ldbc (load byte constant)\n\t\t\tcase 0x31: // ldwc\t(load word constant)\n\t\t\tcase 0x32: // ldb\t(load byte)\n\t\t\tcase 0x33: // ldw  (load word)\n\t\t\tcase 0x36: // ldbv (load byte from variable address)\n\t\t\tcase 0x37: // ldwv (load word from variable address) \n\t\t\t\tif ((opcode & 0x02) != 0) { // memory load\n\t\t\t\t\tif ((opcode & 0x04) != 0) { // from variable address\n\t\t\t\t\t\tsp -= 2; operand2 = Util.getShort(pBuffer, sp); \n\t\t\t\t\t}\n\t\t\t\t\telse { // from fixed address\n\t\t\t\t\t\toperand2 = Util.getShort(pBuffer, ip); ip += 2;\n\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse { // constant load\n\t\t\t\t\t// NOTE: this relies on the fact that the b0 = 0 for byte and 1 for short\n\t\t\t\t\toperand2 = ip; ip += 1 + (opcode & 0x01);\n\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\tif((opcode & 1) != 0)\n\t\t\t\t\tresult = Util.getShort(pBuffer, operand2);\n\t\t\t\telse\n\t\t\t\t\tresult = pBuffer[operand2];\n\t\t\t\tUtil.setShort(pBuffer, sp, result); sp += 2;\n\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\tcase 0x38:\t// stb (store byte)\n\t\t\tcase 0x39:\t// stw (store word)\n\t\t\tcase 0x3A:\t// stbv (store byte at variable address)\n\t\t\tcase 0x3B:\t// stwv (store word at variable address)\t\t\t\t\t\n\t\t\t\tsp -= 2; operand1 = Util.getShort(pBuffer, sp);\n\t\t\t\tif ((opcode & 2) != 0) { // variable address\n\t\t\t\t\tsp -= 2; operand2 = Util.getShort(pBuffer, sp);\n\t\t\t\t}\n\t\t\t\telse { // fixed address\n\t\t\t\t\toperand2 = Util.getShort(pBuffer, ip); ip += 2;\n\t\t\t\t}\n\t\t\t\tif ((opcode & 1) != 0)\n\t\t\t\t\tUtil.setShort(pBuffer, operand2, operand1);\n\t\t\t\telse\n\t\t\t\t\tpBuffer[operand2] = (byte)operand1;\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase 0x34:\t// pop\n\t\t\t\tsp -= 2; break;\n\t\t\tcase 0x35:\t// popn\n\t\t\t\toperand1 = (short)(pBuffer[ip] << 1); ip++;\n\t\t\t\tsp -= operand1; break;\n\t\t\tcase 0x3C:\t// dupn\n\t\t\t\toperand1 = (short)(pBuffer[ip] << 1); ip++;\n\t\t\t\tUtil.arrayCopyNonAtomic(pBuffer, (short)(sp - operand1),\n\t\t\t\t                        pBuffer, sp, operand1);\n\t\t\t\tsp += operand1; break;\n\t\t\tcase 0x3D:\t// flipn\n\t\t\t\toperand1 = (short)(pBuffer[ip] << 1); ip++;\n\t\t\t\t\n\t\t\t\toperand2 = (short)(sp - 2);\n\t\t\t\toperand1 = (short)(sp - operand1);\n\t\t\t\tfor (; operand1 < operand2; operand1 += 2, operand2 -= 2) {\n\t\t\t\t\toperand3 = Util.getShort(pBuffer, operand1);\n\t\t\t\t\toperand4 = Util.getShort(pBuffer, operand2);\n\t\t\t\t\tUtil.setShort(pBuffer, operand1, operand4);\n\t\t\t\t\tUtil.setShort(pBuffer, operand2, operand3);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\t\n\t\t\t/**** Flow control 2: procedure calls. ****/\n\t\t\tcase 0x3E:  // call (call procedure)\n          operand1 = Util.getShort(pBuffer, ip); ip += 2;\n          Util.setShort(pBuffer, sp, ip); sp += 2;\n          ip += operand1;\n          break;\t\t\t\t  \n\t\t\tcase 0x3F:  // ret (return from procedure)\n\t\t\t  sp -= 2; ip = Util.getShort(pBuffer, sp);\n\t\t\t  break;\n\n\n        /**** Data output ****/\n\t\t\t\t\n\t\t\tcase 0x40:\t// outfxb (output fixed buffer)\n\t\t\tcase 0x41:\t// outvlb (output variable-length buffer)\n\t\t\tcase 0x43:\t// outvb  (output variable buffer)\n\t\t\t\tif ((opcode & 1) != 0) {\n\t\t\t\t\tif ((opcode & 2) != 0) {\n\t\t\t\t\t\tsp -= 2; operand2 = Util.getShort(pBuffer, sp);\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\toperand2 = Util.getShort(pBuffer, ip); ip += 2;\n\t\t\t\t\t}\n\t\t\t\t\tsp -= 2; operand1 = Util.getShort(pBuffer, sp);\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toperand1 = Util.getShort(pBuffer, ip); ip += 2;\n\t\t\t\t\toperand2 = Util.getShort(pBuffer, ip); ip += 2;\n\t\t\t\t}\n\t\t\t\tUtil.arrayCopyNonAtomic(pBuffer, operand2,\n\t\t\t\t                        outBuffer, outOffset, operand1);\n\t\t\t\toutOffset += operand1;\n\t\t\t\tbreak;\n\t\t\tcase 0x42:\t// outnew (allocate output buffer)\n\t\t\t\tsp -= 2; operand1 = Util.getShort(pBuffer, sp);\n\t\t\t\tTEMExecution.outBufferIndex = TEMBuffers.create(operand1);\n\t\t\t\t// handler to catch running out of buffer memory\n\t\t\t\tif (TEMExecution.outBufferIndex == TEMBuffers.INVALID_BUFFER)\n\t\t\t\t\tISOException.throwIt(ISO7816.SW_FILE_FULL);\n\t\t\t\tTEMBuffers.pin(TEMExecution.outBufferIndex);\n\t\t\t\toutBuffer = TEMBuffers.get(TEMExecution.outBufferIndex);\n\t\t\t\tbreak;\n\t\t\tcase 0x44:\t// outb\t(output byte) \n          sp -= 2; operand1 = Util.getShort(pBuffer, sp);\n          outBuffer[outOffset] = (byte)operand1;\n          outOffset++;\n          break;\n\t\t\tcase 0x45:  // outw (output short)\n          sp -= 2; operand1 = Util.getShort(pBuffer, sp);\n  \t\t\t\tUtil.setShort(outBuffer, outOffset, operand1);\n  \t\t\toutOffset += 2;\n\t\t\t\tbreak;\n\t\t\tcase 0x46:\t// halt\n\t\t\t\t// save the results and exit\n\t\t\t\tTEMBuffers.unpin(outBufferIndex);\n\t\t\t\tTEMExecution.outLength = outOffset;\n\t\t\t\tTEMExecution.status = STATUS_SUCCESS;\n\t\t\t\treturn;\n\t\t\tcase 0x47: // psrm (remove persistent store location)\n\t\t\t\tsp -= 2; operand1 = Util.getShort(pBuffer, sp);\n\t\t\t\tTEMStore.releaseCell(pBuffer, operand1);\n\t\t\t\tbreak;\n\t\t\t\t\n \n\t\t\t/**** Persistent store operations ****/\n\t\t\t\t\n\t\t\tcase 0x48: // psupfxb (update persistent store, fixed buffers)\n\t\t\tcase 0x49: // psupvb  (update persistent store, variable buffers)\n\t\t\tcase 0x4A: // pswrfxb (write persistent store, fixed buffers)\n\t\t\tcase 0x4B: // pswrvb  (write persistent store, variable buffers)\t\t\t\t\t\n\t\t\tcase 0x4C: // psrdfxb (read persistent store, fixed buffers)\n\t\t\tcase 0x4D: // psrdvb  (read persistent store, variable buffers)\n\t\t\t\tif ((opcode & 0x01) != 0) {\n\t\t\t\t\t sp -= 2; operand2 = Util.getShort(pBuffer, sp);\n\t\t\t\t\t sp -= 2; operand1 = Util.getShort(pBuffer, sp);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toperand1 = Util.getShort(pBuffer, ip); ip += 2;\n\t\t\t\t\toperand2 = Util.getShort(pBuffer, ip); ip += 2;\n\t\t\t\t}\n\t\t\t\tif ((opcode & 0x04) != 0 && operand2 == -1) {\n\t\t\t\t\tcondition = TEMStore.readOrWrite(pBuffer, operand1,\n\t\t\t\t\t                                 outBuffer, outOffset,\n\t\t\t\t\t                                 (opcode & 4) != 0,\n\t\t\t\t\t                                 (opcode & 2) != 0);\t\t\t\t\t\n\t\t\t\t\tresult = condition ? TEMStore.VALUE_SIZE : (short)0;\n\t\t\t\t\toutOffset += result;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcondition = TEMStore.readOrWrite(pBuffer, operand1,\n\t\t\t\t\t                                 pBuffer, operand2,\n\t\t\t\t\t                                 (opcode & 4) != 0,\n\t\t\t\t\t                                 (opcode & 2) != 0);\n\t\t\t\t\tresult = condition ? TEMStore.VALUE_SIZE : (short)0;\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif (condition == false) {\n\t\t\t\t\t// Abort execution if reading or updating blank cell, or\n\t\t\t\t  // creating but the pstore is full.\n\t\t\t\t\tISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tUtil.setShort(pBuffer, sp, result); sp += 2;\t\t\t\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase 0x4E: // pshkfxb (persistent store has key, fixed buffers)\n\t\t\tcase 0x4F: // pshkvb  (persistent store has key, variable buffers)\n\t\t\t\tif ((opcode & 0x01) != 0) {\n\t\t\t\t\t sp -= 2; operand1 = Util.getShort(pBuffer, sp);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toperand1 = Util.getShort(pBuffer, ip); ip += 2;\n\t\t\t\t}\n\t\t\t\tresult = (short)((TEMStore.findCell(pBuffer, operand1) !=\n\t\t\t\t                 TEMStore.INVALID_CELL) ? 1 : 0);\n\t\t\t\tUtil.setShort(pBuffer, sp, result); sp += 2;\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\n      /**** Crypto ****/\t\t\t\t\t\n\t\t\t\t\n\t\t\tcase 0x50: // kefxb (key-encrypt with fixed buffers)\n\t\t\tcase 0x51: // kevb (key-encrypt with variable buffers)\n\t\t\tcase 0x52: // kdfxb (key-decrypt with fixed buffers)\n\t\t\tcase 0x53: // kdvb (key-decrypt with variable buffers)\n\t\t\tcase 0x54: // ksfxb (key-sign with fixed buffers)\n\t\t\tcase 0x55: // ksvb (key-sign with variable buffers)\n\t\t\tcase 0x56: // kvsfxb (key-verify signature with fixed buffers)\n\t\t\tcase 0x57: // kvsvb (key-verify signature with variable buffers)\n\t\t\t\tif((opcode & 1) != 0) {\n\t\t\t\t\t sp -= 2; operand3 = Util.getShort(pBuffer, sp);\n\t\t\t\t\t sp -= 2; operand2 = Util.getShort(pBuffer, sp);\n\t\t\t\t\t sp -= 2; operand1 = Util.getShort(pBuffer, sp);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toperand1 = Util.getShort(pBuffer, ip); ip += 2;\n\t\t\t\t\toperand2 = Util.getShort(pBuffer, ip); ip += 2;\n\t\t\t\t\toperand3 = Util.getShort(pBuffer, ip); ip += 2;\n\t\t\t\t}\n\t\t\t\tsp -= 2; operand4 = Util.getShort(pBuffer, sp);\n\t\t\t\tif (authorizedKeys[operand4] == false)\n\t\t\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\t\t\t\t\t\t\n\t\t\t\tif (operand3 == -1) {\n\t\t\t\t\tif ((opcode & 0x04) == 0)\n\t\t\t\t\t\tresult = TEMCrypto.cryptWithKey((byte)operand4, pBuffer,\n\t\t\t\t\t\t                                operand2, operand1, outBuffer,\n\t\t\t\t\t\t                                outOffset, ((opcode & 2) == 0));\n\t\t\t\t\telse\n\t\t\t\t\t\tresult = TEMCrypto.signWithKey((byte)operand4, pBuffer,\n\t\t\t\t\t\t                               operand2, operand1, outBuffer,\n\t\t\t\t\t\t                               outOffset, ((opcode & 2) == 0));\n\t\t\t\t\toutOffset += result;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif ((opcode & 0x04) == 0)\t\t\t\t\t\t\t\n\t\t\t\t\t\tresult = TEMCrypto.cryptWithKey((byte)operand4, pBuffer,\n\t\t\t\t\t\t                                operand2, operand1, pBuffer,\n\t\t\t\t\t\t                                operand3, ((opcode & 2) == 0));\n\t\t\t\t\telse\n\t\t\t\t\t\tresult = TEMCrypto.signWithKey((byte)operand4, pBuffer,\n\t\t\t\t\t\t                               operand2, operand1, pBuffer,\n\t\t\t\t\t\t                               operand3, ((opcode & 2) == 0));\n\t\t\t\t}\n\t\t\t\tUtil.setShort(pBuffer, sp, result); sp += 2;\n\t\t\t\tbreak;\t\t\t\t  \n\t\t\tcase 0x5A: // rdk  (read key) \n\t\t\t\tsp -= 2; operand1 = Util.getShort(pBuffer, sp);\n\t\t\t\tresult = TEMCrypto.loadKey(pBuffer, operand1);\n\t\t\t\tif(result != TEMCrypto.INVALID_KEY)\n\t\t\t\t\tauthorizedKeys[result] = true;\n\t\t\t\tUtil.setShort(pBuffer, sp, result); sp += 2;\n\t\t\t\tbreak;\n        case 0x58: // ldkel (load key encryption length)\n\t\t\tcase 0x5B: // stk (store key)\n\t\t\t\tsp -= 2; operand2 = Util.getShort(pBuffer, sp);\n\t\t\t\tsp -= 2; operand1 = Util.getShort(pBuffer, sp);\n\t\t\t\tif(authorizedKeys[operand1] == false)\n\t\t\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\n\t\t\t\tif (opcode == 0x58) {  // ldkel\n\t\t\t\t  result = TEMCrypto.getEncryptedDataSize((byte)operand1, operand2);\n\t\t\t\t}\n\t\t\t\telse {\n  \t\t\t\t\tif(operand2 == (short)-1) {  // stk\n  \t\t\t\t\t\tresult = TEMCrypto.saveKey((byte)operand1, outBuffer, outOffset);\n  \t\t\t\t\t\toutOffset += result;\t\t\t\t\t\t\n  \t\t\t\t\t}\n  \t\t\t\t\telse\n  \t\t\t\t\t\tresult = TEMCrypto.saveKey((byte)operand1, pBuffer, operand2);\n\t\t\t\t}\n\t\t\t\tUtil.setShort(pBuffer, sp, result); sp += 2;\n\t\t\t\tbreak;\n\t\t\tcase 0x5C: // relk (release key)\n\t\t\t\tsp -= 2; operand1 = Util.getShort(pBuffer, sp);\n\t\t\t\tif(authorizedKeys[operand1] == false)\n\t\t\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\t\t\tTEMCrypto.releaseKey((byte)operand1);\n\t\t\t\tbreak;\n\t\t\tcase 0x5D: // ldkl (load key length)\n\t\t\t\tsp -= 2; operand1 = Util.getShort(pBuffer, sp);\n\t\t\t\tif(authorizedKeys[operand1] == false)\n\t\t\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\t\t\tresult = TEMCrypto.getKeyLength((byte)operand1);\n\t\t\t\tUtil.setShort(pBuffer, sp, result); sp += 2;\n\t\t\t\tbreak;\n\t\t\tcase 0x5E: // genkp (generate key / key pair)\n\t\t\t\toperand1 = pBuffer[ip]; ip++;\n\t\t\t\tresult = TEMCrypto.generateKey(operand1 == 0);\n\t\t\t\toperand2 = (short)(result >> 8);\n\t\t\t\toperand3 = (short)(result & 0xff);\n\t\t\t\tif(operand2 != TEMCrypto.INVALID_KEY)\n\t\t\t\t\tauthorizedKeys[operand2] = true;\n\t\t\t\tif(operand1 == 0 && operand3 != TEMCrypto.INVALID_KEY)\n\t\t\t\t\tauthorizedKeys[operand3] = true;\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tUtil.setShort(pBuffer, sp, operand2); sp += 2;\n\t\t\t\tif (operand1 == 0) {\n          Util.setShort(pBuffer, sp, operand3); sp += 2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0x5F: // authk (authorize key)\n\t\t\t\tsp -= 2; operand1 = Util.getShort(pBuffer, sp);\n\t\t\t\toperand2 = Util.getShort(pBuffer, ip); ip += 2;\n\t\t\t\t\n\t\t\t\tif(authorizedKeys[operand1]) {\n\t\t\t\t\t// key already authorized, SEC can set/change its authorization\n\t\t\t\t\tTEMCrypto.setKeyAuth((byte)operand1, pBuffer, operand2);\n\t\t\t\t\tresult = operand1;\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// SEC trying to get authorization to use key\n\t\t\t\t\tif(TEMCrypto.verifyKeyAuth((byte)operand1, pBuffer, operand2)) {\n\t\t\t\t\t\tauthorizedKeys[operand1] = true;\n\t\t\t\t\t\tresult = operand1;\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tresult = (short)-1;\n\t\t\t\t}\n\t\t\t\tUtil.setShort(pBuffer, sp, result); sp += 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tcatch (Exception e) { // developer \"production\" mode\n//\t\tcatch(APDUException e) { // DEBUG MODE -- trick that invalidates this line and traps the debugger\n\t\tstatus = STATUS_EXCEPTION;\n\t\t\n\t\t// for developers: save the SEC trace (production TEMs don't need this)\n\t\tTEMExecution.i_secIP = ip;\n\t\tTEMExecution.i_secSP = sp;\n\t\tTEMExecution.outLength = outOffset;\n\t}\n}\n\n/**\n * Binds the SEC contained in a SECpack to the execution engine.\n * \n * After this call succeeds, the SEC can be executed by calling \n * {@link #execute()}. For correct functionality,\n * {@link #bindSecPack(byte, byte)} should only be called when the engine's\n * status is {@link #STATUS_NOSEC}.\n * \n * The SECpack is decoded in-place, so the buffer received should be large\n * enough to hold the decoded SECpack. \n * \n * @param keyIndex the ID of a key that can decrypt the SECpack\n * @param secPackIndex the ID of the buffer containing the SECpack whose SEC\n *                     will be decrypted and bound\n * @return <code>true</code> if unpacking succeeded, or <code>false</code> if\n *         the SECpack unpacking failed (perhaps\n */\npublic static boolean bindSecPack(byte keyIndex, byte secPackIndex) {\n\t// ASSERT: status == STATUS_NOSEC\n\t\t\t\n\tbyte[] secPack = TEMBuffers.get(secPackIndex);\n\tshort secPackLength = TEMBuffers.size(secPackIndex);\n\n\t// Refuse SECpacks using incompatible formats.\n\tif (secPack[0] != (byte)1)\n\t\treturn false;\n\t\n\t// Pick up the header parts that are interesting.\n\tTEMExecution.i_secSP = Util.getShort(secPack, (short)8);\n\tTEMExecution.i_secIP = Util.getShort(secPack, (short)10);\n\tTEMExecution.i_devhooks = (byte)(secPack[1] & (byte)1) != (byte)0;\t\t\n\t\n\t// Compute sizes for all SECimage parts.\n\tshort headerSize = TEMCrypto.getDigestBlockLength();\n\tshort frozenSize = Util.getShort(secPack, (short)2);\n\tshort privateSize = Util.getShort(secPack, (short)4);\n\tshort zerosSize = Util.getShort(secPack, (short)6);\n\tshort cryptedSize = (frozenSize != 0 || privateSize != 0) ?\n\t    TEMCrypto.getEncryptedDataSize(keyIndex,\n        (short)(privateSize + TEMCrypto.getDigestLength())) : 0;\n\tshort securedPackSize = (short)(frozenSize + cryptedSize + headerSize);\n\tshort plainPackSize = (short)(secPackLength - securedPackSize); \t\t\n\n\tif (cryptedSize != 0) {\n\t\t// The SEC image must be able to hold the signature, since we'll be\n\t  // dumping it there temporarily.\n\t\tif((short)(zerosSize + plainPackSize) < TEMCrypto.getDigestLength())\n\t\t\tzerosSize = (short)(TEMCrypto.getDigestLength() - plainPackSize);\t\t\t\n\t}\n\t\t\t\n\t// Save the header for signature checking.\n\tUtil.arrayCopyNonAtomic(secPack, (short)0, testHash, (short)0, headerSize);\n\t// Put together the SEC image.\n\tUtil.arrayCopyNonAtomic(secPack, headerSize, secPack, (short)0, frozenSize);\n\tshort secOffset = frozenSize;\n\tif (frozenSize != 0 || privateSize != 0) {\n\t\t// Decrypt the secret part and check the signature\n\t\tTEMCrypto.cryptWithKey(keyIndex, secPack,\n\t\t                       (short)(frozenSize + headerSize), cryptedSize,\n\t\t                       secPack, frozenSize, false);\n\t\tsecOffset += privateSize;\n\t\t\n\t\tTEMCrypto.digest2(testHash, (short)0, headerSize, secPack, (short)0,\n\t\t                  secOffset, testHash, (short)0);\n\t\tif (Util.arrayCompare(testHash, (short)0, secPack, secOffset,\n\t\t                      (short)testHash.length) != 0) {\n\t\t\t// Signature check failed.\n\t\t\t// TODO: set better exception checking\n\t\t\treturn false;\n\t\t}\n\t}\n\tUtil.arrayCopyNonAtomic(secPack, securedPackSize,\n\t                        secPack, secOffset, plainPackSize);\n\tUtil.arrayFillNonAtomic(secPack, (short)(secOffset + plainPackSize),\n\t                        (short)(secPackLength - secOffset - plainPackSize),\n\t                        (byte)0);\n\t\n\t// Unpacking succeeded, set the SEC execution context.\n\tTEMExecution.i_secBufferIndex = secPackIndex;\n\tTEMExecution.i_nextPSCell = PS_INVALID;\n\tTEMExecution.outLength = 0;\n\tTEMExecution.status = STATUS_READY;\n\t\n\treturn true;\n}\n\n/**\n * Unbinds the currently bound SEC from the engine.\n * \n * This releases the resources associated with the bound SEC, and prepares the\n * engine for accepting another SECpack.\n */\npublic static void unbindSec() {\n\t// Drop the SEC buffer\n\tTEMBuffers.unpin(TEMExecution.i_secBufferIndex);\n\tTEMBuffers.release(TEMExecution.i_secBufferIndex);\n\tTEMExecution.i_secBufferIndex = TEMBuffers.INVALID_BUFFER;\n\t\n\t// Drop the volatile (non-persistent) SEC keys\n\tTEMCrypto.releaseVolatileKeys();\n\tfor (short i = 0; i < authorizedKeys.length; i++)\n\t\tauthorizedKeys[i] = false;\n\t\n\tif (TEMExecution.status != STATUS_SUCCESS) {\n\t\t// Since the SEC didn't execute well, discard any output.\n\t\tif (TEMExecution.outBufferIndex != TEMBuffers.INVALID_BUFFER) {\n\t\t\tTEMBuffers.unpin(TEMExecution.outBufferIndex);\n\t\t\tTEMBuffers.release(TEMExecution.outBufferIndex);\n\t\t}\n\t}\n\tTEMExecution.outBufferIndex = TEMBuffers.INVALID_BUFFER;\n\tTEMExecution.status = STATUS_NOSEC;\n}\n\n/** The version of the trace output format. */\nprivate static final short TRACE_VERSION = (short)0x01;\n\n/**\n * Produces a trace of the current SEC status.\n * \n * @param buffer the buffer that the trace will be written to\n * @param offset the offset of the first byte in the buffer that will receive\n *               the trace\n * @return the length of the trace produced\n */\npublic static final short devTrace(byte[] buffer, short offset) {\n\tif (i_devhooks == false) return 0;\n\t\n\tUtil.setShort(buffer, offset, TRACE_VERSION);\n\tUtil.setShort(buffer, (short)(offset + 2), TEMExecution.i_secSP);\n\tUtil.setShort(buffer, (short)(offset + 4), TEMExecution.i_secIP);\n\tUtil.setShort(buffer, (short)(offset + 6), TEMExecution.outLength);\n\tUtil.setShort(buffer, (short)(offset + 8), TEMExecution.i_nextPSCell);\n\t\n\treturn (short)10;\n}\n\n/**\n * Fixes a Persistent Store fault.\n * \n   * This is called when the driver responds to a Persistent Store fault. The\n   * fault is fixed accoding to the given instructions, and the execution engine\n   * becomes ready to resume SEC execution. \n * \n * @param nextCell the next PStore cell to be used by psnew\n * \n */\npublic static final void solvePStoreFault(short nextCell) {\n\t// ASSERT: status == STATUS_PSFAULT\n\tTEMExecution.i_nextPSCell = nextCell;\n\tTEMExecution.status = STATUS_READY;\n}\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMExecution.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Performs encryption / decryption.\n * \n * When using asymmetric keys, decryption should be performed using the pair\n * of the key used for encryption. \n * \n * @param keyIndex the ID of the key to be used for *cryption\n * @param sourceBuffer the buffer containing the data to be *crypted\n * @param sourceOffset the offset of the first byte in sourceBuffer that\n *                     contains the data to be *crypted\n * @param sourceLength the number of bytes to be *crypted\n * @param outBuffer the buffer that will receive the *crypted result\n * @param outOffset the offset of the first byte in outBuffer that will\n *                  receive the *crypted result\n * @param doEncrypt <code>true</code> to indicate encryption, or\n *                  <code>false</code> for decryption\n * @return the number of bytes written to outBuffer\n */\n", "func_signal": "public static final short cryptWithKey(byte keyIndex, byte[] sourceBuffer,\n                                       short sourceOffset, short sourceLength,\n                                       byte[] outBuffer, short outOffset,\n                                       boolean doEncrypt)", "code": "{\n  Key cryptKey = keys[keyIndex];\n  Cipher cipher;    \n  short inBlockSize;\n  if (cryptKey instanceof DESKey) {\n    // Prepare for symmetric encryption\n    cipher = symCipher;\n    inBlockSize = sourceLength;\n  }\n  else {\n    // Prepare for asymmetric encryption\n    cipher = asymCipher;\n    if (doEncrypt) {\n      inBlockSize = (short)((cryptKey.getSize() >> 3) - pksCipherPadding);\n    }\n    else {\n      inBlockSize = (short)(cryptKey.getSize() >> 3);\n    }\n  }\n  cipher.init(cryptKey,\n              doEncrypt ? Cipher.MODE_ENCRYPT : Cipher.MODE_DECRYPT);\n  \n  short stopOffset = (short)(sourceOffset + sourceLength);\n  short writeOffset = outOffset;\n  for(; sourceOffset < stopOffset; sourceOffset += inBlockSize) {\n    short blockSize = (stopOffset - sourceOffset >= inBlockSize) ? inBlockSize\n                      : (short)(stopOffset - sourceOffset);\n    writeOffset += cipher.doFinal(sourceBuffer, sourceOffset, blockSize,\n                                  outBuffer, writeOffset);\n  }\n  return (short)(writeOffset - outOffset);\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMCrypto.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Releases all the buffers.\n * \n * This is equivalent to unpinning all the pinned buffers via calls to\n * {@link #unpin(byte)}, followed by calling {@link #release(byte)} on all\n * the buffers.\n */\n", "func_signal": "public static final void releaseAll()", "code": "{\n\tfor (byte i = 0; i < NUM_BUFFERS; i++) {\n\t\trelease(i);\n\t}\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMBuffers.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * The memory zone of a buffer referenced by the buffer file.\n * \n * The buffer must have been pinned via a call to {@link #pin(byte)}, and it\n * must remain pinned while it is referenced.\n * \n * @param bufferIndex the buffer file entry whose buffer will be returned\n * @return the byte array that is the buffer in a buffer file\n */\n", "func_signal": "public static final byte[] get(byte bufferIndex)", "code": "{\n\tif (bufferIndex < 0 || bufferIndex >= NUM_BUFFERS ||\n\t    flags[bufferIndex] >= 0)\n\t\treturn null;\n\treturn (byte[])buffers[bufferIndex];\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMBuffers.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Releases all non-persistent keys.\n */\n", "func_signal": "public static final void releaseVolatileKeys()", "code": "{\n  for (byte i = 0; i < persistent.length; i++) {\n    if (persistent[i] == false && keys[i] != null)\n      releaseKey(i);\n  }\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMCrypto.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Initializes the TEM buffer module.\n * \n * Called when the TEM is activated.\n * \n * @return <code>true</code> if all is good, <code>false</code> if the TEM is\n *         already initialized\n */\n", "func_signal": "public static final boolean init()", "code": "{\n\t// Initialize the buffer file.\n\tif (buffers != null)\n\t\treturn false;\n\tbuffers = new Object[NUM_BUFFERS];\n\t\n\t// The buffer file is reset to an empty state (no layout, no flags) when an\n\t// application connects to the TEM applet.\n\tflags = JCSystem.makeTransientByteArray(NUM_BUFFERS,\n\t\t\t                                    JCSystem.CLEAR_ON_DESELECT);\n\tsizes = JCSystem.makeTransientShortArray(NUM_BUFFERS,\n\t\t\t                                     JCSystem.CLEAR_ON_DESELECT);\n\treturn true;\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMBuffers.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Performs a signature operaion (sign / verify).\n * \n * When using asymmetric keys, verification should be performed using the pair\n * of the key used for signing.\n * \n * @param keyIndex the ID of the key to be used for signing / verification\n * @param dataBuffer the buffer containing the data to be signed / that was\n *                   signed\n * @param dataOffset the offset of the first byte in dataBuffer\n *                   that contains the data to be signed / that was signed\n * @param dataLength the number of bytes to be signed / that were signed\n * @param signBuffer the buffer that will receive the signature / contains the\n *                   signature to be verified\n * @param signOffset the offset of the first byte in outBuffer that will\n *                   receive the signature / contains the signature to be\n *                   verified\n * @param doSign <code>true</code> to indicate signing, or <code>false</code>\n *               for signature verification\n * @return the number of bytes written to signBuffer, when in signing mode;\n *         0 (fail) or 1 (pass) in verification mode\n */\n", "func_signal": "public static final short signWithKey(short keyIndex, byte[] dataBuffer,\n                                      short dataOffset, short dataLength,\n                                      byte[] signBuffer, short signOffset,\n                                      boolean doSign)", "code": "{\n  Key signKey = keys[keyIndex];\n  Signature signature;\n  short signatureSize;\n\n  if (signKey instanceof DESKey) {\n    // HMAC setup\n    signature = symSignature;\n    signatureSize = 8;  // NOTE: don't know how to get block size from API\n  }\n  else {\n    // PKS signing setup\n    signature = asymSignature;      \n    signatureSize = (short)(signKey.getSize() >> 3);\n  }\n  signature.init(signKey,\n                 doSign ? Signature.MODE_SIGN : Signature.MODE_VERIFY);\n  \n  if (doSign) {\n    return signature.sign(dataBuffer, dataOffset, dataLength, signBuffer,\n                          signOffset);\n  }\n  return (short)(signature.verify(dataBuffer, dataOffset, dataLength,\n                                  signBuffer, signOffset, signatureSize) ?\n                   0x01 : 0x00);\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMCrypto.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Verifies the authorization secret for a key.\n * \n * @param keyIndex the ID of the key\n * @param buffer the buffer containing the authorization secret to be verified\n * @param offset the offset of the first byte of the authorization secret in\n *               the given buffer\n * @return <code>true</code> if the given secret matches the key's\n *         authorization secret, <code>false</code> otherwise\n */\n", "func_signal": "public static final boolean verifyKeyAuth(byte keyIndex, byte[] buffer,\n                                          short offset)", "code": "{\n  if (persistent[keyIndex] == false)\n    return false;\n  short authOffset = (short)(keyIndex * AUTH_SIZE);\n  return Util.arrayCompare(buffer, offset, authorizations, authOffset,\n                           AUTH_SIZE) == 0;\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMCrypto.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Lays out the TEM buffers into memory.\n * \n * Called when the TEM is activated, after all the other modules allocated\n * their static objects.\n */\n", "func_signal": "public static final void layout()", "code": "{\t\t\n\t// Partition the RAM into buffers.\n\tfor (byte i = 0; i <= 1; i++) {\n\t\tshort availableMemory = JCSystem.getAvailableMemory(\n\t\t    JCSystem.MEMORY_TYPE_TRANSIENT_DESELECT);\n\t\tavailableMemory -= 280;\n\t\tshort nextSize = (i != 0) ? availableMemory : 512;\n\t\tbuffers[i] = JCSystem.makeTransientByteArray(nextSize,\n\t\t    JCSystem.CLEAR_ON_DESELECT);\n\t}\n\t\n\t// Partition the EEPROM into buffers.\n\tshort reservedMemory = (short)(\n\t    JCSystem.getAvailableMemory(JCSystem.MEMORY_TYPE_PERSISTENT) /\n\t    (short)4);\n\tif (reservedMemory < 2560) reservedMemory = 2560;\n\tif (reservedMemory > 12288) reservedMemory = 12288;\n\tfor (byte i = 5; i >= 0; i--) {\n\t\tshort availableMemory = JCSystem.getAvailableMemory(\n\t\t\t\tJCSystem.MEMORY_TYPE_PERSISTENT);\n\t\tavailableMemory -= reservedMemory;\n\t\tshort nextSize = (i != 0) ? (short)(availableMemory >> 1)\n\t\t                          : availableMemory;\n\t\tbuffers[2 + i] = new byte[nextSize];\n\t}\t\t\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMBuffers.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Sets the authorization secret for a key.\n * \n * @param keyIndex the ID of the key\n * @param buffer the buffer containing the authorization secret\n * @param offset the offset of the first byte of the authorization secret in\n *               the given buffer\n */\n", "func_signal": "public static final void setKeyAuth(byte keyIndex, byte[] buffer,\n                                    short offset)", "code": "{\n  short authOffset = (short)(keyIndex * AUTH_SIZE);\n  Util.arrayCopyNonAtomic(buffer, offset, authorizations, authOffset,\n                          AUTH_SIZE);\n  persistent[keyIndex] = true;\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMCrypto.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Initializes the TEM persistent store.\n * \n * Called when the TEM is activated.\n */\n", "func_signal": "public static void init()", "code": "{\n\tdata = new byte[(short)(NUM_CELLS * CELL_SIZE)];\n\tfree = new byte[(short)(NUM_CELLS / (short)8)];\n\tUtil.arrayFillNonAtomic(free, (short)0, (short)(NUM_CELLS / 8), (byte)0xFF);\n}", "path": "src\\edu\\mit\\csail\\tc\\TEMStore.java", "repo_name": "csail/tem_fw", "stars": 1, "license": "mit", "language": "java", "size": 129}
{"docstring": "/**\n * Put the given association into the association fields in the right panel.\n */\n", "func_signal": "private void putAssociationFields(Association assoc)", "code": "{\n    jDescriptionTextField.setText(assoc.getDescription());\n\n    jNameTextField.setText(assoc.getName());\n\n    jMimeTypeTextField.setText(assoc.getMimeType());\n\n    if (assoc.getFileExtList() == null) {\n        jFileExtensionListTextField.setText(null);\n    } else {\n        Iterator extentionIter = assoc.getFileExtList().iterator();\n        String fileExtensionListString = (String) extentionIter.next();\n\n        while (extentionIter.hasNext()) {\n            fileExtensionListString += ' ' + (String) extentionIter.next();\n        }\n        jFileExtensionListTextField.setText(fileExtensionListString);\n\n    }\n\n    jIconFileTextField.setText(assoc.getIconFileName());\n\n    // Clear the old action list first before adding new actions.\n    actionsListModel.removeAllElements();\n    if (assoc.getActionList() != null) {\n        Iterator actionIter = assoc.getActionList().iterator();\n\n        while (actionIter.hasNext()) {\n            Action oneAction = (Action) actionIter.next();\n            String oneVerb = oneAction.getVerb();\n            String oneCommand = oneAction.getCommand();\n\n            String oneActionString = oneVerb + ' ' + oneCommand;\n\n            actionsListModel.addElement(oneActionString);\n        }\n    }\n}", "path": "linux\\demo\\FileTypes\\FileTypes.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "// Returns just the class name -- no package info.\n", "func_signal": "protected String getClassName(Object o)", "code": "{\n    String classString = o.getClass().getName();\n    int dotIndex = classString.lastIndexOf(\".\");\n\n    return classString.substring(dotIndex + 1);\n}", "path": "windows\\demo\\Tray\\Tray.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * Get the association fields specified by the user in the right panel.\n * And fill into the constructed Association object.\n */\n", "func_signal": "private Association getAssociationFields()", "code": "{\n    Association assoc = new Association();\n\n    String description = jDescriptionTextField.getText();\n    if ((description != null) && (description.length() != 0)) {\n        assoc.setDescription(description);\n    }\n\n    String name = jNameTextField.getText();\n    if ((name != null) && (name.length() != 0)) {\n        assoc.setName(name);\n    }\n\n    String mimeType = jMimeTypeTextField.getText();\n    if ((mimeType != null) && (mimeType.length() != 0)) {\n        assoc.setMimeType(mimeType);\n    }\n\n    String fileExtensionListString = jFileExtensionListTextField.getText().trim();\n    if ((fileExtensionListString != null)\n            && (fileExtensionListString.length() != 0)) {\n        String leftExtString = fileExtensionListString;\n        int startIndex = 0;\n        int nextSpacePos = fileExtensionListString.indexOf(' ');\n\n        while (nextSpacePos != -1) {\n            String oneExt = leftExtString.substring(startIndex, nextSpacePos);\n\n            assoc.addFileExtension(oneExt);\n\n            String tempString = leftExtString.substring(nextSpacePos,\n                    leftExtString.length());\n\n            leftExtString = tempString.trim();\n            nextSpacePos = leftExtString.indexOf(' ');\n        }\n\n        if ((leftExtString != null) && (leftExtString.length()) != 0) {\n            // one last file extension.\n            assoc.addFileExtension(leftExtString);\n        }\n    }\n\n    String iconFile = jIconFileTextField.getText();\n    if ((iconFile != null) && (iconFile.length() != 0)) {\n        assoc.setIconFileName(iconFile);\n    }\n\n    int actionNum = actionsListModel.getSize();\n    if (actionNum != 0) {\n        for (int i = 0; i < actionNum; i++) {\n            String oneActionString = (String) actionsListModel.getElementAt(i);\n            int firstSpacePos = oneActionString.indexOf(' ');\n            String verb = oneActionString.substring(0, firstSpacePos);\n            String leftStr = oneActionString.substring(firstSpacePos,\n                    oneActionString.length());\n            String command = leftStr.trim();\n            Action oneAction = new Action(verb, command);\n\n            assoc.addAction(oneAction);\n        }\n    }\n\n    return assoc;\n}", "path": "linux\\demo\\FileTypes\\FileTypes.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * Put the given association into the association fields in the right panel.\n */\n", "func_signal": "private void putAssociationFields(Association assoc)", "code": "{\n    jDescriptionTextField.setText(assoc.getDescription());\n\n    jNameTextField.setText(assoc.getName());\n\n    jMimeTypeTextField.setText(assoc.getMimeType());\n\n    if (assoc.getFileExtList() == null) {\n        jFileExtensionListTextField.setText(null);\n    } else {\n        Iterator extentionIter = assoc.getFileExtList().iterator();\n        String fileExtensionListString = (String) extentionIter.next();\n\n        while (extentionIter.hasNext()) {\n            fileExtensionListString += ' ' + (String) extentionIter.next();\n        }\n        jFileExtensionListTextField.setText(fileExtensionListString);\n\n    }\n\n    jIconFileTextField.setText(assoc.getIconFileName());\n\n    // Clear the old action list first before adding new actions.\n    actionsListModel.removeAllElements();\n    if (assoc.getActionList() != null) {\n        Iterator actionIter = assoc.getActionList().iterator();\n\n        while (actionIter.hasNext()) {\n            Action oneAction = (Action) actionIter.next();\n            String oneVerb = oneAction.getVerb();\n            String oneCommand = oneAction.getCommand();\n\n            String oneActionString = oneVerb + ' ' + oneCommand;\n\n            actionsListModel.addElement(oneActionString);\n        }\n    }\n}", "path": "windows\\demo\\FileTypes\\FileTypes.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * Encodes a timestamp in the specified position in the message\n */\n", "func_signal": "public static void encodeTimestamp(byte[] array, int pointer, double timestamp)", "code": "{\n\t// Converts a double into a 64-bit fixed point\n\tfor(int i=0; i<8; i++)\n\t{\n\t\t// 2^24, 2^16, 2^8, .. 2^-32\n\t\tdouble base = Math.pow(2, (3-i)*8);\n\t\t\n\t\t// Capture byte value\n\t\tarray[pointer+i] = (byte) (timestamp / base);\n\n\t\t// Subtract captured value from remaining total\n\t\ttimestamp = timestamp - (double) (unsignedByteToShort(array[pointer+i]) * base);\n\t}\n\t\n\t// From RFC 2030: It is advisable to fill the non-significant\n\t// low order bits of the timestamp with a random, unbiased\n\t// bitstring, both to avoid systematic roundoff errors and as\n\t// a means of loop detection and replay detection.\n\tarray[7] = (byte) (Math.random()*255.0);\n}", "path": "NtpMessage.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * Expands the tree to the given path. \n */\n", "func_signal": "private void expandPaths(JTree tree, List paths)", "code": "{\n    Iterator iter = paths.iterator();\n\n    if (!iter.hasNext()) {\n        return;\n    }\n\n    MyTreeNode parentNode = (MyTreeNode) tree.getModel().getRoot();\n\n    if (!parentNode.isExplored()) {\n        parentNode.explore();\n    }\n\n    // ===\n    // For Windows \"My Computer\" node only.\n    // ===\n    // Ignore the root node \"My Computer\", since the path for this node\n    // is not in the path list of the expanded node.\n    File parentFile = (File) ((MyTreeNode) parentNode).getUserObject();\n\n    if (parentFile.equals(new File(FileExplorer.MY_COMPUTER_FOLDER_PATH))) {\n        int count = jTreeDisk.getModel().getChildCount(parentNode);\n        boolean pathNotFound = true;\n\n        for (int i = 0; i < count; i++) {\n            Object oneChild = jTreeDisk.getModel().getChild(parentNode, i);\n            String onePath = ((MyTreeNode) oneChild).toString();\n\n            if (onePath.equalsIgnoreCase((String) iter.next())) {\n                parentNode = (MyTreeNode) oneChild;\n                pathNotFound = false;\n                break;\n            }\n        }\n    } else {\n        if (!parentFile.equals((String) iter.next())) {\n            return;\n        }\n    }\n\n    boolean pathNotFound = false;\n\n    while (iter.hasNext() && !pathNotFound) {\n        if (!parentNode.isExplored()) {\n            parentNode.explore();\n        }\n\n        String nextPath = (String) iter.next();\n\n        pathNotFound = true;\n        int count = jTreeDisk.getModel().getChildCount(parentNode);\n\n        for (int i = 0; i < count; i++) {\n            Object oneChild = jTreeDisk.getModel().getChild(parentNode, i);\n            String onePath = ((MyTreeNode) oneChild).toString();\n\n            if (onePath.equalsIgnoreCase(nextPath)) {\n                parentNode = (MyTreeNode) oneChild;\n                pathNotFound = false;\n                break;\n            }\n        }\n    }\n\n    if (pathNotFound) {\n        return;\n    } else {\n        selectedTreeNode = parentNode;\n        TreePath newPath = new TreePath(selectedTreeNode.getPath());\n\n        if (jTreeDisk.isExpanded(newPath)) {\n            // if the new path is already expanded, just select it.\n            jTreeDisk.setSelectionPath(newPath);\n            jTreeDisk.scrollPathToVisible(newPath);\n        } else {\n            jTreeDisk.expandPath(newPath);\n        }\n    }\n}", "path": "linux\\demo\\FileExplorer\\FileExplorer.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * Updates the status info including the address text field and status bar.\n *\n * It should be called in below cases:\n *   the selected node in the left tree changes;\n *   click on one item in the right file table;\n *   the current status changes from STATUS_FILEEXPLORER to \"WebBrowse\".\n */\n", "func_signal": "private void updateStatusInfo()", "code": "{\n    File selectedDir = (File) selectedTreeNode.getUserObject();\n\n    if (selectedDir.equals(new File(FileExplorer.MY_COMPUTER_FOLDER_PATH))) {\n        // ===\n        // For Windows \"My Computer\" node only.\n        // ===\n        if (selectedFile == null) {\n            jAddressTextField.setText(\"\");\n            statusBar.lblObject.setText(selectedTreeNode.getChildrenCount()\n                    + \" object(s)\");\n        } else {\n            jAddressTextField.setText(selectedFile.getPath());\n            statusBar.lblObject.setText(\"1 object(s) selected\");\n        }\n\n        statusBar.lblSize.setText(\"0 Bytes\");\n    } else {\n        if (selectedFile == null) {\n            jAddressTextField.setText(selectedDir.getPath());\n\n            statusBar.lblObject.setText(selectedTreeNode.getChildrenCount()\n                    + \" object(s)\");\n            statusBar.lblSize.setText(MyUtility.length2KB(selectedTreeNode.getSize()));\n        } else {\n            jAddressTextField.setText(selectedFile.getPath());\n\n            statusBar.lblObject.setText(\"1 object(s) selected\");\n            statusBar.lblSize.setText(MyUtility.length2KB(selectedFile.length()));\n        }\n    }\n}", "path": "windows\\demo\\FileExplorer\\FileExplorer.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * Will read 8 bytes of a message beginning at <code>pointer</code>\n * and return it as a double, according to the NTP 64-bit timestamp\n * format.\n */\n", "func_signal": "public static double decodeTimestamp(byte[] array, int pointer)", "code": "{\n\tdouble r = 0.0;\n\t\n\tfor(int i=0; i<8; i++)\n\t{\n\t\tr += unsignedByteToShort(array[pointer+i]) * Math.pow(2, (3-i)*8);\n\t}\n\t\n\treturn r;\n}", "path": "NtpMessage.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * Expands the tree to the given path. \n */\n", "func_signal": "private void expandPaths(JTree tree, List paths)", "code": "{\n    Iterator iter = paths.iterator();\n\n    if (!iter.hasNext()) {\n        return;\n    }\n\n    MyTreeNode parentNode = (MyTreeNode) tree.getModel().getRoot();\n\n    if (!parentNode.isExplored()) {\n        parentNode.explore();\n    }\n\n    // ===\n    // For Windows \"My Computer\" node only.\n    // ===\n    // Ignore the root node \"My Computer\", since the path for this node\n    // is not in the path list of the expanded node.\n    File parentFile = (File) ((MyTreeNode) parentNode).getUserObject();\n\n    if (parentFile.equals(new File(FileExplorer.MY_COMPUTER_FOLDER_PATH))) {\n        int count = jTreeDisk.getModel().getChildCount(parentNode);\n        boolean pathNotFound = true;\n\n        for (int i = 0; i < count; i++) {\n            Object oneChild = jTreeDisk.getModel().getChild(parentNode, i);\n            String onePath = ((MyTreeNode) oneChild).toString();\n\n            if (onePath.equalsIgnoreCase((String) iter.next())) {\n                parentNode = (MyTreeNode) oneChild;\n                pathNotFound = false;\n                break;\n            }\n        }\n    } else {\n        if (!parentFile.equals((String) iter.next())) {\n            return;\n        }\n    }\n\n    boolean pathNotFound = false;\n\n    while (iter.hasNext() && !pathNotFound) {\n        if (!parentNode.isExplored()) {\n            parentNode.explore();\n        }\n\n        String nextPath = (String) iter.next();\n\n        pathNotFound = true;\n        int count = jTreeDisk.getModel().getChildCount(parentNode);\n\n        for (int i = 0; i < count; i++) {\n            Object oneChild = jTreeDisk.getModel().getChild(parentNode, i);\n            String onePath = ((MyTreeNode) oneChild).toString();\n\n            if (onePath.equalsIgnoreCase(nextPath)) {\n                parentNode = (MyTreeNode) oneChild;\n                pathNotFound = false;\n                break;\n            }\n        }\n    }\n\n    if (pathNotFound) {\n        return;\n    } else {\n        selectedTreeNode = parentNode;\n        TreePath newPath = new TreePath(selectedTreeNode.getPath());\n\n        if (jTreeDisk.isExpanded(newPath)) {\n            // if the new path is already expanded, just select it.\n            jTreeDisk.setSelectionPath(newPath);\n            jTreeDisk.scrollPathToVisible(newPath);\n        } else {\n            jTreeDisk.expandPath(newPath);\n        }\n    }\n}", "path": "windows\\demo\\FileExplorer\\FileExplorer.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * This method constructs the data bytes of a raw NTP packet.\n */\n", "func_signal": "public byte[] toByteArray()", "code": "{\n\t// All bytes are automatically set to 0\n\tbyte[] p = new byte[48];\n\n\tp[0] = (byte) (leapIndicator << 6 | version << 3 | mode);\n\tp[1] = (byte) stratum;\n\tp[2] = (byte) pollInterval;\n\tp[3] = (byte) precision;\n\t\n\t// root delay is a signed 16.16-bit FP, in Java an int is 32-bits\n\tint l = (int) (rootDelay * 65536.0);\n\tp[4] = (byte) ((l >> 24) & 0xFF);\n\tp[5] = (byte) ((l >> 16) & 0xFF);\n\tp[6] = (byte) ((l >> 8) & 0xFF);\n\tp[7] = (byte) (l & 0xFF);\n\t\n\t// root dispersion is an unsigned 16.16-bit FP, in Java there are no\n\t// unsigned primitive types, so we use a long which is 64-bits \n\tlong ul = (long) (rootDispersion * 65536.0);\n\tp[8] = (byte) ((ul >> 24) & 0xFF);\n\tp[9] = (byte) ((ul >> 16) & 0xFF);\n\tp[10] = (byte) ((ul >> 8) & 0xFF);\n\tp[11] = (byte) (ul & 0xFF);\n\t\n\tp[12] = referenceIdentifier[0];\n\tp[13] = referenceIdentifier[1];\n\tp[14] = referenceIdentifier[2];\n\tp[15] = referenceIdentifier[3];\n\t\n\tencodeTimestamp(p, 16, referenceTimestamp);\n\tencodeTimestamp(p, 24, originateTimestamp);\n\tencodeTimestamp(p, 32, receiveTimestamp);\n\tencodeTimestamp(p, 40, transmitTimestamp);\n\t\n\treturn p; \n}", "path": "NtpMessage.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * Updates the status info including the address text field and status bar.\n *\n * It should be called in below cases:\n *   the selected node in the left tree changes;\n *   click on one item in the right file table;\n *   the current status changes from STATUS_FILEEXPLORER to \"WebBrowse\".\n */\n", "func_signal": "private void updateStatusInfo()", "code": "{\n    File selectedDir = (File) selectedTreeNode.getUserObject();\n\n    if (selectedDir.equals(new File(FileExplorer.MY_COMPUTER_FOLDER_PATH))) {\n        // ===\n        // For Windows \"My Computer\" node only.\n        // ===\n        if (selectedFile == null) {\n            jAddressTextField.setText(\"\");\n            statusBar.lblObject.setText(selectedTreeNode.getChildrenCount()\n                    + \" object(s)\");\n        } else {\n            jAddressTextField.setText(selectedFile.getPath());\n            statusBar.lblObject.setText(\"1 object(s) selected\");\n        }\n\n        statusBar.lblSize.setText(\"0 Bytes\");\n    } else {\n        if (selectedFile == null) {\n            jAddressTextField.setText(selectedDir.getPath());\n\n            statusBar.lblObject.setText(selectedTreeNode.getChildrenCount()\n                    + \" object(s)\");\n            statusBar.lblSize.setText(MyUtility.length2KB(selectedTreeNode.getSize()));\n        } else {\n            jAddressTextField.setText(selectedFile.getPath());\n\n            statusBar.lblObject.setText(\"1 object(s) selected\");\n            statusBar.lblSize.setText(MyUtility.length2KB(selectedFile.length()));\n        }\n    }\n}", "path": "linux\\demo\\FileExplorer\\FileExplorer.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * Explores the specified directory by expanding the right tree to it path,\n * and display it's subdirectories and files in the right table.\n */\n", "func_signal": "private void exploreDirectory(File selectedDir)", "code": "{\n    // First parse the given directory path into separate path names/fields.\n    List paths = new ArrayList();\n    String selectedAbsPath = selectedDir.getAbsolutePath();\n    int beginIndex = 0;\n    int endIndex = selectedAbsPath.indexOf(File.separator);\n\n    // For the first path name, attach the path separator.\n    // For Windows, it should be like 'C:\\', for Unix, it should be like '/'.\n    paths.add(selectedAbsPath.substring(beginIndex, endIndex + 1));\n    beginIndex = endIndex + 1;\n    endIndex = selectedAbsPath.indexOf(File.separator, beginIndex);\n    while (endIndex != -1) {\n        // For other path names, do not attach the path separator.\n        paths.add(selectedAbsPath.substring(beginIndex, endIndex));\n        beginIndex = endIndex + 1;\n        endIndex = selectedAbsPath.indexOf(File.separator, beginIndex);\n    }\n    String lastPath = selectedAbsPath.substring(beginIndex,\n            selectedAbsPath.length());\n\n    if ((lastPath != null) && (lastPath.length() != 0)) {\n        paths.add(lastPath);\n    }\n\n    expandPaths(jTreeDisk, paths);\n}", "path": "linux\\demo\\FileExplorer\\FileExplorer.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "// Returns just the class name -- no package info.\n", "func_signal": "protected String getClassName(Object o)", "code": "{\n    String classString = o.getClass().getName();\n    int dotIndex = classString.lastIndexOf(\".\");\n\n    return classString.substring(dotIndex + 1);\n}", "path": "Tray.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * Constructs a new NtpMessage in client -> server mode, and sets the\n * transmit timestamp to the current time.\n */\n", "func_signal": "public NtpMessage()", "code": "{\n\t// Note that all the other member variables are already set with\n\t// appropriate default values.\n\tthis.mode = 3;\n\tthis.transmitTimestamp = (System.currentTimeMillis()/1000.0) + 2208988800.0; \n}", "path": "NtpMessage.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * Converts an unsigned byte to a short.  By default, Java assumes that\n * a byte is signed.\n */\n", "func_signal": "public static short unsignedByteToShort(byte b)", "code": "{\n\tif((b & 0x80)==0x80) return (short) (128 + (b & 0x7f));\n\telse return (short) b;\n}", "path": "NtpMessage.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * Explores the directory specified by the parent tree node in the left tree\n * and the selected subdirectory in the right table.\n */\n", "func_signal": "private void exploreDirectory(MyTreeNode parentTreeNode,\n        File selectedSubDir)", "code": "{\n    if (!parentTreeNode.isExplored()) {\n        parentTreeNode.explore();\n    }\n\n    int count = jTreeDisk.getModel().getChildCount(parentTreeNode);\n\n    for (int i = 0; i < count; i++) {\n        Object oneChild = jTreeDisk.getModel().getChild(parentTreeNode, i);\n\n        if (oneChild instanceof MyTreeNode) {\n            File file = (File) ((MyTreeNode) oneChild).getUserObject();\n\n            if (file.equals(selectedSubDir)) {\n                selectedTreeNode = (MyTreeNode) oneChild;\n                break;\n            }\n        }\n    }\n\n    TreePath newPath = new TreePath(selectedTreeNode.getPath());\n\n    if (jTreeDisk.isExpanded(newPath)) {\n        // if the new path is already expanded, just select it.\n        jTreeDisk.setSelectionPath(newPath);\n        jTreeDisk.scrollPathToVisible(newPath);\n    } else {\n        jTreeDisk.expandPath(newPath);\n    }\n}", "path": "linux\\demo\\FileExplorer\\FileExplorer.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * Returns a string representation of a NtpMessage\n */\n", "func_signal": "public String toString()", "code": "{\n\tString precisionStr =\n\t\tnew DecimalFormat(\"0.#E0\").format(Math.pow(2, precision));\n\t\t\n\treturn \"Leap indicator: \" + leapIndicator + \"\\n\" +\n\t\t\"Version: \" + version + \"\\n\" +\n\t\t\"Mode: \" + mode + \"\\n\" +\n\t\t\"Stratum: \" + stratum + \"\\n\" +\n\t\t\"Poll: \" + pollInterval + \"\\n\" +\n\t\t\"Precision: \" + precision + \" (\" + precisionStr + \" seconds)\\n\" + \n\t\t\"Root delay: \" + new DecimalFormat(\"0.00\").format(rootDelay*1000) + \" ms\\n\" +\n\t\t\"Root dispersion: \" + new DecimalFormat(\"0.00\").format(rootDispersion*1000) + \" ms\\n\" + \n\t\t\"Reference identifier: \" + referenceIdentifierToString(referenceIdentifier, stratum, version) + \"\\n\" +\n\t\t\"Reference timestamp: \" + timestampToString(referenceTimestamp) + \"\\n\" +\n\t\t\"Originate timestamp: \" + timestampToString(originateTimestamp) + \"\\n\" +\n\t\t\"Receive timestamp:   \" + timestampToString(receiveTimestamp) + \"\\n\" +\n\t\t\"Transmit timestamp:  \" + timestampToString(transmitTimestamp);\n}", "path": "NtpMessage.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * Returns a timestamp (number of seconds since 00:00 1-Jan-1900) as a\n * formatted date/time string. \n */\n", "func_signal": "public static String timestampToString(double timestamp)", "code": "{\n\tif(timestamp==0) return \"0\";\n\t\n\t// timestamp is relative to 1900, utc is used by Java and is relative\n\t// to 1970 \n\tdouble utc = timestamp - (2208988800.0);\n\t\n\t// milliseconds\n\tlong ms = (long) (utc * 1000.0);\n\t\n\t// date/time\n\tString date = new SimpleDateFormat(\"dd-MMM-yyyy HH:mm:ss\").format(new Date(ms));\n\t\n\t// fraction\n\tdouble fraction = timestamp - ((long) timestamp);\n\tString fractionSting = new DecimalFormat(\".000000\").format(fraction);\n\t\n\treturn date + fractionSting;\n}", "path": "NtpMessage.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * Explores the specified directory by expanding the right tree to it path,\n * and display it's subdirectories and files in the right table.\n */\n", "func_signal": "private void exploreDirectory(File selectedDir)", "code": "{\n    // First parse the given directory path into separate path names/fields.\n    List paths = new ArrayList();\n    String selectedAbsPath = selectedDir.getAbsolutePath();\n    int beginIndex = 0;\n    int endIndex = selectedAbsPath.indexOf(File.separator);\n\n    // For the first path name, attach the path separator.\n    // For Windows, it should be like 'C:\\', for Unix, it should be like '/'.\n    paths.add(selectedAbsPath.substring(beginIndex, endIndex + 1));\n    beginIndex = endIndex + 1;\n    endIndex = selectedAbsPath.indexOf(File.separator, beginIndex);\n    while (endIndex != -1) {\n        // For other path names, do not attach the path separator.\n        paths.add(selectedAbsPath.substring(beginIndex, endIndex));\n        beginIndex = endIndex + 1;\n        endIndex = selectedAbsPath.indexOf(File.separator, beginIndex);\n    }\n    String lastPath = selectedAbsPath.substring(beginIndex,\n            selectedAbsPath.length());\n\n    if ((lastPath != null) && (lastPath.length() != 0)) {\n        paths.add(lastPath);\n    }\n\n    expandPaths(jTreeDisk, paths);\n}", "path": "windows\\demo\\FileExplorer\\FileExplorer.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/**\n * Explores the directory specified by the parent tree node in the left tree\n * and the selected subdirectory in the right table.\n */\n", "func_signal": "private void exploreDirectory(MyTreeNode parentTreeNode,\n        File selectedSubDir)", "code": "{\n    if (!parentTreeNode.isExplored()) {\n        parentTreeNode.explore();\n    }\n\n    int count = jTreeDisk.getModel().getChildCount(parentTreeNode);\n\n    for (int i = 0; i < count; i++) {\n        Object oneChild = jTreeDisk.getModel().getChild(parentTreeNode, i);\n\n        if (oneChild instanceof MyTreeNode) {\n            File file = (File) ((MyTreeNode) oneChild).getUserObject();\n\n            if (file.equals(selectedSubDir)) {\n                selectedTreeNode = (MyTreeNode) oneChild;\n                break;\n            }\n        }\n    }\n\n    TreePath newPath = new TreePath(selectedTreeNode.getPath());\n\n    if (jTreeDisk.isExpanded(newPath)) {\n        // if the new path is already expanded, just select it.\n        jTreeDisk.setSelectionPath(newPath);\n        jTreeDisk.scrollPathToVisible(newPath);\n    } else {\n        jTreeDisk.expandPath(newPath);\n    }\n}", "path": "windows\\demo\\FileExplorer\\FileExplorer.java", "repo_name": "frogstarr78/WatchWatch", "stars": 1, "license": "None", "language": "java", "size": 1704}
{"docstring": "/** Reinitialise parser. */\n", "func_signal": "public void ReInit(JavaCharStream stream, int lexState)", "code": "{\n   ReInit(stream);\n   SwitchTo(lexState);\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ASTParserTokenManager.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Adds the given statement to the specified block. The list of statements\n * will be initialized if it is <code>null</code>.\n * \n * @param block\n * @param stmt\n */\n", "func_signal": "public static void addStmt(BlockStmt block, Statement stmt)", "code": "{\n    List<Statement> stmts = block.getStmts();\n    if (stmts == null) {\n        stmts = new ArrayList<Statement>();\n        block.setStmts(stmts);\n    }\n    stmts.add(stmt);\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ASTHelper.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * This method has the standard behavior when this object has been\n * created using the standard constructors.  Otherwise, it uses\n * \"currentToken\" and \"expectedTokenSequences\" to generate a parse\n * error message and returns it.  If this object has been created\n * due to a parse error, and you do not catch it (it gets thrown\n * from the parser), then this method is called during the printing\n * of the final stack trace, and hence the correct error message\n * gets displayed.\n */\n", "func_signal": "public String getMessage()", "code": "{\n  if (!specialConstructor) {\n    return super.getMessage();\n  }\n  StringBuffer expected = new StringBuffer();\n  int maxSize = 0;\n  for (int i = 0; i < expectedTokenSequences.length; i++) {\n    if (maxSize < expectedTokenSequences[i].length) {\n      maxSize = expectedTokenSequences[i].length;\n    }\n    for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\n    }\n    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n      expected.append(\"...\");\n    }\n    expected.append(eol).append(\"    \");\n  }\n  String retval = \"Encountered \\\"\";\n  Token tok = currentToken.next;\n  for (int i = 0; i < maxSize; i++) {\n    if (i != 0) retval += \" \";\n    if (tok.kind == 0) {\n      retval += tokenImage[0];\n      break;\n    }\n    retval += \" \" + tokenImage[tok.kind];\n    retval += \" \\\"\";\n    retval += add_escapes(tok.image);\n    retval += \" \\\"\";\n    tok = tok.next; \n  }\n  retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn;\n  retval += \".\" + eol;\n  if (expectedTokenSequences.length == 1) {\n    retval += \"Was expecting:\" + eol + \"    \";\n  } else {\n    retval += \"Was expecting one of:\" + eol + \"    \";\n  }\n  retval += expected.toString();\n  return retval;\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ParseException.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/** Constructor with message and reason. */\n", "func_signal": "public TokenMgrError(String message, int reason)", "code": "{\n   super(message);\n   errorCode = reason;\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\TokenMgrError.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Creates a {@link FieldDeclaration}.\n * \n * @param modifiers\n *            modifiers\n * @param type\n *            type\n * @param name\n *            field name\n * @return instance of {@link FieldDeclaration}\n */\n", "func_signal": "public static FieldDeclaration createFieldDeclaration(int modifiers, Type type, String name)", "code": "{\n    VariableDeclaratorId id = new VariableDeclaratorId(name);\n    VariableDeclarator variable = new VariableDeclarator(id);\n    return createFieldDeclaration(modifiers, type, variable);\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ASTHelper.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Adds the given argument to the method call. The list of arguments will be\n * initialized if it is <code>null</code>.\n * \n * @param call\n *            method call\n * @param arg\n *            argument value\n */\n", "func_signal": "public static void addArgument(MethodCallExpr call, Expression arg)", "code": "{\n    List<Expression> args = call.getArgs();\n    if (args == null) {\n        args = new ArrayList<Expression>();\n        call.setArgs(args);\n    }\n    args.add(arg);\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ASTHelper.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Adds the given declaration to the specified type. The list of members\n * will be initialized if it is <code>null</code>.\n * \n * @param type\n *            type declaration\n * @param decl\n *            member declaration\n */\n", "func_signal": "public static void addMember(TypeDeclaration type, BodyDeclaration decl)", "code": "{\n    List<BodyDeclaration> members = type.getMembers();\n    if (members == null) {\n        members = new ArrayList<BodyDeclaration>();\n        type.setMembers(members);\n    }\n    members.add(decl);\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ASTHelper.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Adds the given parameter to the method. The list of parameters will be\n * initialized if it is <code>null</code>.\n * \n * @param method\n *            method\n * @param parameter\n *            parameter\n */\n", "func_signal": "public static void addParameter(MethodDeclaration method, Parameter parameter)", "code": "{\n    List<Parameter> parameters = method.getParameters();\n    if (parameters == null) {\n        parameters = new ArrayList<Parameter>();\n        method.setParameters(parameters);\n    }\n    parameters.add(parameter);\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ASTHelper.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/** Reinitialise parser. */\n", "func_signal": "public void ReInit(JavaCharStream stream)", "code": "{\n   jjmatchedPos = jjnewStateCnt = 0;\n   curLexState = defaultLexState;\n   input_stream = stream;\n   ReInitRounds();\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ASTParserTokenManager.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/** Constructor. */\n", "func_signal": "public ASTParserTokenManager(JavaCharStream stream, int lexState)", "code": "{\n   this(stream);\n   SwitchTo(lexState);\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ASTParserTokenManager.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Used to convert raw characters to their escaped version\n * when these raw version cannot be used as part of an ASCII\n * string literal.\n */\n", "func_signal": "protected String add_escapes(String str)", "code": "{\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n      switch (str.charAt(i))\n      {\n         case 0 :\n            continue;\n         case '\\b':\n            retval.append(\"\\\\b\");\n            continue;\n         case '\\t':\n            retval.append(\"\\\\t\");\n            continue;\n         case '\\n':\n            retval.append(\"\\\\n\");\n            continue;\n         case '\\f':\n            retval.append(\"\\\\f\");\n            continue;\n         case '\\r':\n            retval.append(\"\\\\r\");\n            continue;\n         case '\\\"':\n            retval.append(\"\\\\\\\"\");\n            continue;\n         case '\\'':\n            retval.append(\"\\\\\\'\");\n            continue;\n         case '\\\\':\n            retval.append(\"\\\\\\\\\");\n            continue;\n         default:\n            if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n               String s = \"0000\" + Integer.toString(ch, 16);\n               retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n            } else {\n               retval.append(ch);\n            }\n            continue;\n      }\n    }\n    return retval.toString();\n }", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ParseException.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Return the String representation of this node.\n * \n * @return the String representation of this node\n */\n", "func_signal": "@Override\npublic final String toString()", "code": "{\n    DumpVisitor visitor = new DumpVisitor();\n    accept(visitor, null);\n    return visitor.getSource();\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ast\\Node.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Adds the given type declaration to the compilation unit. The list of\n * types will be initialized if it is <code>null</code>.\n * \n * @param cu\n *            compilation unit\n * @param type\n *            type declaration\n */\n", "func_signal": "public static void addTypeDeclaration(CompilationUnit cu, TypeDeclaration type)", "code": "{\n    List<TypeDeclaration> types = cu.getTypes();\n    if (types == null) {\n        types = new ArrayList<TypeDeclaration>();\n        cu.setTypes(types);\n    }\n    types.add(type);\n\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ASTHelper.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * The following constructors are for use by you for whatever\n * purpose you can think of.  Constructing the exception in this\n * manner makes the exception behave in the normal way - i.e., as\n * documented in the class \"Throwable\".  The fields \"errorToken\",\n * \"expectedTokenSequences\", and \"tokenImage\" do not contain\n * relevant information.  The JavaCC generated code does not use\n * these constructors.\n */\n", "func_signal": "public ParseException()", "code": "{\n  super();\n  specialConstructor = false;\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ParseException.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Returns a detailed message for the Error when it is thrown by the\n * token manager to indicate a lexical error.\n * Parameters : \n *    EOFSeen     : indicates if EOF caused the lexical error\n *    curLexState : lexical state in which this error occurred\n *    errorLine   : line number when the error occurred\n *    errorColumn : column number when the error occurred\n *    errorAfter  : prefix that was seen before this error occurred\n *    curchar     : the offending character\n * Note: You can customize the lexical error message by modifying this method.\n */\n", "func_signal": "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)", "code": "{\n   return(\"Lexical error at line \" +\n        errorLine + \", column \" +\n        errorColumn + \".  Encountered: \" +\n        (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n        \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\TokenMgrError.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Creates a {@link VariableDeclarationExpr}.\n * \n * @param type\n *            type\n * @param name\n *            name\n * @return instance of {@link VariableDeclarationExpr}\n */\n", "func_signal": "public static VariableDeclarationExpr createVariableDeclarationExpr(Type type, String name)", "code": "{\n    List<VariableDeclarator> vars = new ArrayList<VariableDeclarator>();\n    vars.add(new VariableDeclarator(new VariableDeclaratorId(name)));\n    return new VariableDeclarationExpr(type, vars);\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ASTHelper.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/** Get the next Token. */\n", "func_signal": "public Token getNextToken()", "code": "{\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {   \n   try   \n   {     \n      curChar = input_stream.BeginToken();\n   }     \n   catch(java.io.IOException e)\n   {        \n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      matchedToken.specialToken = specialToken;\n      CommonTokenAction(matchedToken);\n      return matchedToken;\n   }\n   image = jjimage;\n   image.setLength(0);\n   jjimageLen = 0;\n\n   for (;;)\n   {\n     switch(curLexState)\n     {\n       case 0:\n         try { input_stream.backup(0);\n            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)\n               curChar = input_stream.BeginToken();\n         }\n         catch (java.io.IOException e1) { continue EOFLoop; }\n         jjmatchedKind = 0x7fffffff;\n         jjmatchedPos = 0;\n         curPos = jjMoveStringLiteralDfa0_0();\n         break;\n       case 1:\n         jjmatchedKind = 0x7fffffff;\n         jjmatchedPos = 0;\n         curPos = jjMoveStringLiteralDfa0_1();\n         if (jjmatchedPos == 0 && jjmatchedKind > 11)\n         {\n            jjmatchedKind = 11;\n         }\n         break;\n       case 2:\n         jjmatchedKind = 0x7fffffff;\n         jjmatchedPos = 0;\n         curPos = jjMoveStringLiteralDfa0_2();\n         if (jjmatchedPos == 0 && jjmatchedKind > 11)\n         {\n            jjmatchedKind = 11;\n         }\n         break;\n     }\n     if (jjmatchedKind != 0x7fffffff)\n     {\n        if (jjmatchedPos + 1 < curPos)\n           input_stream.backup(curPos - jjmatchedPos - 1);\n        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n        {\n           matchedToken = jjFillToken();\n           matchedToken.specialToken = specialToken;\n           TokenLexicalActions(matchedToken);\n       if (jjnewLexState[jjmatchedKind] != -1)\n         curLexState = jjnewLexState[jjmatchedKind];\n           CommonTokenAction(matchedToken);\n           return matchedToken;\n        }\n        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n        {\n           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n           {\n              matchedToken = jjFillToken();\n              if (specialToken == null)\n                 specialToken = matchedToken;\n              else\n              {\n                 matchedToken.specialToken = specialToken;\n                 specialToken = (specialToken.next = matchedToken);\n              }\n              SkipLexicalActions(matchedToken);\n           }\n           else \n              SkipLexicalActions(null);\n         if (jjnewLexState[jjmatchedKind] != -1)\n           curLexState = jjnewLexState[jjmatchedKind];\n           continue EOFLoop;\n        }\n        MoreLexicalActions();\n      if (jjnewLexState[jjmatchedKind] != -1)\n        curLexState = jjnewLexState[jjmatchedKind];\n        curPos = 0;\n        jjmatchedKind = 0x7fffffff;\n        try {\n           curChar = input_stream.readChar();\n           continue;\n        }\n        catch (java.io.IOException e1) { }\n     }\n     int error_line = input_stream.getEndLine();\n     int error_column = input_stream.getEndColumn();\n     String error_after = null;\n     boolean EOFSeen = false;\n     try { input_stream.readChar(); input_stream.backup(1); }\n     catch (java.io.IOException e1) {\n        EOFSeen = true;\n        error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n        if (curChar == '\\n' || curChar == '\\r') {\n           error_line++;\n           error_column = 0;\n        }\n        else\n           error_column++;\n     }\n     if (!EOFSeen) {\n        input_stream.backup(1);\n        error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n     }\n     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n   }\n  }\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ASTParserTokenManager.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/** Switch to specified lex state. */\n", "func_signal": "public void SwitchTo(int lexState)", "code": "{\n   if (lexState >= 3 || lexState < 0)\n      throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);\n   else\n      curLexState = lexState;\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ASTParserTokenManager.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Creates a {@link FieldDeclaration}.\n * \n * @param modifiers\n *            modifiers\n * @param type\n *            type\n * @param variable\n *            variable declarator\n * @return instance of {@link FieldDeclaration}\n */\n", "func_signal": "public static FieldDeclaration createFieldDeclaration(int modifiers, Type type, VariableDeclarator variable)", "code": "{\n    List<VariableDeclarator> variables = new ArrayList<VariableDeclarator>();\n    variables.add(variable);\n    FieldDeclaration ret = new FieldDeclaration(modifiers, type, variables);\n    return ret;\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ASTHelper.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/** Constructor with message. */\n", "func_signal": "public ParseException(String message)", "code": "{\n  super(message);\n  specialConstructor = false;\n}", "path": "src\\main\\scala\\com\\biosimilarity\\proscala\\lib\\japa\\parser\\ParseException.java", "repo_name": "leithaus/differential", "stars": 1, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Constructor\n */\n", "func_signal": "@SuppressWarnings(\"serial\")\npublic SubnetExtraction(Frame aFrame, GenericElement item)", "code": "{\n\t\n\tsuper(aFrame);\n\titem_ = item;\n\t\n\t// Set model of \"subnet size\" spinner\n\tSpinnerNumberModel model = new SpinnerNumberModel();\n\tmodel.setMinimum(1);\n\tmodel.setStepSize(1);\n\tint maxSize = (item instanceof StructureElement) ?\n\t\t\t((StructureElement) item).getNetwork().getSize() :\n\t\t\t((DynamicalModelElement) item).getGeneNetwork().getSize();\n\tmodel.setMaximum(maxSize);\n\tint effectiveSize = (10 <= maxSize) ? 10 : maxSize;\n\tmodel.setValue(effectiveSize);\n\tsubnetSize_.setModel(model);\n\t\n\t// Set model of \"number of subnets\" spinner\n\tmodel = new SpinnerNumberModel();\n\tmodel.setMinimum(1);\n\tmodel.setMaximum(20);\n\tmodel.setStepSize(1);\n\tmodel.setValue(10);\n\tnumberSubnets_.setModel(model);\n\t\n\t// Set model of \"random among top\" spinner\n\tmodel = new SpinnerNumberModel();\n\tmodel.setMinimum(1);\n\tmodel.setMaximum(100);\n\tmodel.setStepSize(1);\n\tmodel.setValue(20);\n\trandomAmongTopSpinner_.setModel(model);\n\t\n\t// Set model of \"From strongly connected components\"\n\tmodel = new SpinnerNumberModel();\n\tmodel.setMinimum(1);\n\tmodel.setMaximum(maxSize);\n\tmodel.setStepSize(1);\n\tmodel.setValue(10);\n\tnumStronglyConnected_.setModel(model);\n\t\n\t// Set model of \"From strongly connected components\"\n\tmodel = new SpinnerNumberModel();\n\tmodel.setMinimum(1);\n\tmodel.setMaximum((Integer) subnetSize_.getModel().getValue());\n\tmodel.setStepSize(1);\n\tmodel.setValue(10);\n\tnumRegulators_.setModel(model);\n\t\n\t// add tooltips for all elements of the window\n\taddTooltips();\n\t\n\tString title1, title2;\n\ttitle1 = title2 = \"\";\n\tif (item_ instanceof StructureElement) {\n\t\tImodNetwork network = ((StructureElement)item_).getNetwork();\n\t\ttitle1 = item_.getLabel();\n\t\ttitle2 = network.getSize() + \" nodes, \" + network.getNumEdges() + \" edges\";\n\t} else if (item_ instanceof DynamicalModelElement) {\n\t\tGeneNetwork geneNetwork = ((DynamicalModelElement)item_).getGeneNetwork();\n\t\ttitle1 = item_.getLabel();\n\t\ttitle2 = geneNetwork.getSize() + \" genes, \" + geneNetwork.getNumEdges() + \" interactions\";\n\t}\n\tsetGeneralInformation(title1 + \" (\" + title2 + \")\");\n\t\n\t\n\t/**\n\t * ACTIONS\n\t */\n\tsubnetRootNameDocument_ = subnetRootName_.getDocument();\n\tsubnetRootNameDocument_.addDocumentListener(new DocumentListener() {\n\t\tpublic void changedUpdate(DocumentEvent arg0) {\n\t\t\trunButton_.setEnabled(!subnetRootName_.getText().equals(\"\"));\n\t\t}\n\t\tpublic void insertUpdate(DocumentEvent arg0) {\n\t\t\trunButton_.setEnabled(!subnetRootName_.getText().equals(\"\"));\n\t\t}\n\t\tpublic void removeUpdate(DocumentEvent arg0) {\n\t\t\trunButton_.setEnabled(!subnetRootName_.getText().equals(\"\"));\n\t\t}\n\t});\n\t\n\t\n\textractAllRegulators_.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(final ActionEvent arg0) {\n\t\t\tdisableExtractionOptions();\n\t\t}\n\t});\n\t\n\t\n\t\n\trandomVertex_.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(final ActionEvent arg0) {\n\t\t\tupdateSeedControls();\n\t\t}\n\t});\n\t\n\tselectionFromList_.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(final ActionEvent arg0) {\n\t\t\tupdateSeedControls();\n\t\t}\n\t});\n\t\n\tgreedy_.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(final ActionEvent arg0) {\n\t\t\tupdateNeighborSelectionControls();\n\t\t}\n\t});\n\t\n\trandomAmongTop_.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(final ActionEvent arg0) {\n\t\t\tupdateNeighborSelectionControls();\n\t\t}\n\t});\n\t\n\tstronglyConnected_.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(final ActionEvent arg0) {\n\t\t\tupdateSeedControls();\n\t\t}\n\t});\n\t\n\tcancelButton.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(final ActionEvent arg0) {\n\t\t\tGnwSettings.getInstance().stopSubnetExtraction(true);\n\t\t\tescapeAction();\n\t\t}\n\t});\n\t\n\trunButton_.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(final ActionEvent arg0) {\n\t\t\trun();\n\t\t}\n\t});\n\t\n\tsubnetSize_.addChangeListener(new ChangeListener() {\n\t\tpublic void stateChanged(ChangeEvent arg0) {\n\t\t\tupdateRegulatorsOptions();\n\t\t}\n\t});\n\t\n\t\n\tnumRegulators_.addChangeListener(new ChangeListener() {\n\t\tpublic void stateChanged(ChangeEvent arg0) {\n\t\t\tupdateRegulatorsOptions();\n\t\t}\n\t});\n\t\n\tuseNumRegulators_.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(final ActionEvent arg0) {\n\t\t\tnumRegulators_.setEnabled(useNumRegulators_.isSelected());\n\t\t}\n\t});\n\t\n\t\n//\t\tuseNumRegulators_.addChangeListener(new ChangeListener() {\n//\t\t\tpublic void stateChanged(ChangeEvent arg0) {\n//\t\t\t\tnumRegulators_.setEnabled(useNumRegulators_.isSelected());\n//\t\t\t}\n//\t\t});\n\t\n\tsubnetIdProposal();\n\tsetListVerticesID();\n\tupdateSeedControls();\n\tupdateNeighborSelectionControls();\n\t\n\tuseNumRegulators_.setSelected(false);\n\tnumRegulators_.setEnabled(false);\n}", "path": "src\\ch\\epfl\\lis\\gnwgui\\SubnetExtraction.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * Default constructor\n */\n", "func_signal": "public Header()", "code": "{\n\t\n\ttopList_ = new ArrayList<Color>();\n\tbottomList_ = new ArrayList<Color>();\n\t\n\ttopList_.add(new Color(0, 108, 170)); // Light blue\n\ttopList_.add(new Color(252, 236, 0)); // Light orange\n\ttopList_.add(new Color(148, 234, 49)); // Light green\n\t\n\tbottomList_.add(new Color(8, 64, 115)); // Dark blue\n\tbottomList_.add(new Color(255, 157, 0)); // Dark orange\n\tbottomList_.add(new Color(66, 137, 8)); // Dark green\n\t\n\tsetBackgroundGetup(BLUE);\n\t\n\ttitle_ = new JLabel(\"Title\");\n\tinfo_ = new JLabel(\"Information\");\n\t\n\tsetLayout(new BorderLayout());\n\tsetPreferredSize(new Dimension(0, 70));\n\t\n\ttitle_.setBorder(new EmptyBorder(10, 15, 0, 0));\n\ttitle_.setForeground(Color.WHITE);\n\ttitle_.setBackground(UIManager.getColor(\"Button.background\"));\n\ttitle_.setFont(new Font(\"Sans\", Font.BOLD, 20));\n\tadd(title_, BorderLayout.NORTH);\n\n\tinfo_.setBorder(new EmptyBorder(0, 15, 0, 0));\n\tinfo_.setForeground(Color.WHITE);\n\tinfo_.setFont(new Font(\"Sans\", Font.BOLD, 14));\n\tadd(info_, BorderLayout.WEST);\n}", "path": "src\\ch\\epfl\\lis\\gnwgui\\windows\\Header.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * Run the subnets extraction process using the user-defined parameters.\n */\n", "func_signal": "public void run()", "code": "{\n\t\n\tGnwSettings uni = GnwSettings.getInstance();\n\tint poolSize = (Integer)numberSubnets_.getModel().getValue();\n\tint subnetSize = (Integer)subnetSize_.getModel().getValue();\n\tStructure network = null;\n\t\n\tif (item_ instanceof StructureElement)\n\t\tnetwork = ((StructureElement)item_).getNetwork();\n\telse if (item_ instanceof DynamicalModelElement)\n\t\tnetwork = ((DynamicalModelElement)item_).getGeneNetwork();\n\t\n\t// Start by building the seed(s)\n\tArrayList<ArrayList<Node>> seeds = null;\n\tArrayList<Node> miniSeed = null;\n\t\n\t//\u00a0DANIEL\n\tuni.setNumSeedsFromStronglyConnectedComponents(0);\n\t\n\t// Seed = vertex selected in the list\n\tif (selectionFromList_.isSelected()) {\n\t\tseeds = new ArrayList<ArrayList<Node>>();\n\t\tminiSeed = new ArrayList<Node>();\n\t\tminiSeed.add(network.getNode((String)listVerticesID_.getModel().getSelectedItem()));\n\t\tfor (int i=0; i < poolSize; i++) {\n\t\t\tseeds.add(miniSeed);\n\t\t}\n\t} else if (stronglyConnected_.isSelected()) {\n\t\tint numStronglyConnected = (Integer) numStronglyConnected_.getModel().getValue();\n\t\tuni.setNumSeedsFromStronglyConnectedComponents(numStronglyConnected);\n\t}\n\t\t\t\n\tif (useNumRegulators_.isSelected()) {\n\t\tint numRegulators = (Integer) numRegulators_.getModel().getValue();\n\t\tuni.setNumRegulators(numRegulators);\n\t}\n\t\n\t// Set now the selection option\n\tif (greedy_.isSelected())\n\t\tuni.setTruncatedSelectionFraction(0);\n\telse if (randomAmongTop_.isSelected()) {\n\t\tdouble value = ((Integer)randomAmongTopSpinner_.getValue()) / 100.;\n\t\tuni.setTruncatedSelectionFraction(value);\n\t}\n\n\tboolean extractAllRegulators = extractAllRegulators_.isSelected();\n\tNetworkExtractionThread generator = new NetworkExtractionThread(network, seeds, subnetSize, poolSize, extractAllRegulators);\n\tuni.stopSubnetExtraction(false); // reset\n\tgenerator.start();\n}", "path": "src\\ch\\epfl\\lis\\gnwgui\\SubnetExtraction.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * Following the seed selection strategy selected, some components of the dialog\n * are updated (mainly enable/disable these components).\n */\n", "func_signal": "public void updateSeedControls()", "code": "{\n\tif (randomVertex_.isSelected()) {\n\t\tlistVerticesID_.setEnabled(false);\n\t\tnumStronglyConnected_.setEnabled(false);\n\t}\n\telse if (selectionFromList_.isSelected()) {\n\t\tlistVerticesID_.setEnabled(true);\n\t\tnumStronglyConnected_.setEnabled(false);\n\t}\n\telse if (stronglyConnected_.isSelected()) {\n\t\tnumStronglyConnected_.setEnabled(true);\n\t\tlistVerticesID_.setEnabled(false);\n\t}\n}", "path": "src\\ch\\epfl\\lis\\gnwgui\\SubnetExtraction.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * Following the neighbors selection strategy selected, some components of the dialog\n * are updated (mainly enable/disable these components).\n */\n", "func_signal": "public void updateNeighborSelectionControls()", "code": "{\n\tif (greedy_.isSelected()) {\n\t\trandomAmongTopSpinner_.setEnabled(false);\n\t}\n\telse if (randomAmongTop_.isSelected()) {\n\t\trandomAmongTopSpinner_.setEnabled(true);\n\t}\n}", "path": "src\\ch\\epfl\\lis\\gnwgui\\SubnetExtraction.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * Constructor\n */\n", "func_signal": "public NetworkExtractionThread(Structure network, ArrayList<ArrayList<Node>> seeds, int size, int numSubnets, boolean extractAllRegulators)", "code": "{\n\tsuper();\n\tmyThread_ = null;\n\tnetwork_ = network;\n\tseeds_ = seeds;\n\tsize_ = size;\n\tnumSubnets_ = numSubnets;\n\textractAllRegulators_ = extractAllRegulators;\n}", "path": "src\\ch\\epfl\\lis\\gnwgui\\SubnetExtraction.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * Run function\n */\n", "func_signal": "public void run()", "code": "{\n        \t// Display the waiting item during the process instead of the compute button\n         \t snake_.start();\n         \t myCardLayout.show(cards, /*snake_.getName()*/\"snake\");\n\t\n         \t try {\n         \t\t extractor_ = new SubnetExtractor((ImodNetwork)network_);\n         \t\t if (extractAllRegulators_) {\n         \t\t\t output_ = new Structure[1];\n         \t\t\t output_[0] = extractor_.extractRegulators();\n         \t\t } else if (seeds_ == null)\n         \t\t\t output_ = extractor_.runExtraction(subnetRootName_.getText(), size_, numSubnets_);\n         \t\t else\n         \t\t\toutput_ = extractor_.runExtraction(subnetRootName_.getText(), size_, seeds_);\n         \t\t \n         \t\t if (output_ != null)\n         \t\t\t done();\n         \t\t else\n         \t\t\t log.info(\"Subnetwork extraction canceled !\");\n         \t }\n         \t catch (final java.lang.OutOfMemoryError oome) {\n         \t\t log.log(Level.SEVERE, oome.getMessage());\n         \t\t SubnetExtraction.this.escapeAction();\n         \t\t String title = \"Memory Error\";\n         \t\t String msg = \n         \t\t\t \"Java doesn't have access to enough memory for the current operation.<br>\" +\n         \t\t\t \"Large networks require a lot of memory, please increase the max heap<br>\" +\n         \t\t\t \"size in your Java configuration. See the GeneNetWeaver documentation<br>\" +\n         \t\t\t \"for details.\";\n         \t\t msg = \"<html>\" + msg + \"</html>\";\n     \t\t\tJOptionPane.showMessageDialog(GnwGuiSettings.getInstance().getGnwGui().getFrame(), msg, title, JOptionPane.WARNING_MESSAGE);\n         \t }\n}", "path": "src\\ch\\epfl\\lis\\gnwgui\\SubnetExtraction.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * Constructor\n * @param aFrame\n * @param item\n */\n", "func_signal": "public Rename(Frame aFrame, IElement item)", "code": "{\n\t\t\n\t\tsuper(aFrame);\n\n\t\titem_ = item;\n\t\t\n\t\tif (item != null) {\n\t\t\tnewName_.setText(item.getLabel());\n\t\t\tnewName_.selectAll();\n\t\t}\n\t\t\n\t\tString title1, title2;\n\t\ttitle1 = title2 = \"\";\n\t\tif (item_ instanceof StructureElement) {\n\t\t\tImodNetwork network = ((StructureElement)item_).getNetwork();\n\t\t\ttitle1 = item_.getLabel();\n\t\t\ttitle2 = network.getSize() + \" nodes, \" + network.getNumEdges() + \" edges\";\n\t\t} else if (item_ instanceof DynamicalModelElement) {\n\t\t\tGeneNetwork geneNetwork = ((DynamicalModelElement)item_).getGeneNetwork();\n\t\t\ttitle1 = item_.getLabel();\n\t\t\ttitle2 = geneNetwork.getSize() + \" genes, \" + geneNetwork.getNumEdges() + \" interactions\";\n\t\t}\n\t\tsetGeneralInformation(title1 + \" (\" + title2 + \")\");\n\n\t\t/**\n\t\t * ACTIONS\n\t\t */\n\t\t// If the document tells us that the text field is empty -> apply button disable\n\t\tnewNameDocument_ = newName_.getDocument();\n\t\tnewNameDocument_.addDocumentListener(new DocumentListener() {\n\t\t\tpublic void changedUpdate(DocumentEvent arg0) {\n\t\t\t\tapplyButton.setEnabled(!newName_.getText().equals(\"\"));\n\t\t\t}\n\t\t\tpublic void insertUpdate(DocumentEvent arg0) {\n\t\t\t\tapplyButton.setEnabled(!newName_.getText().equals(\"\"));\n\t\t\t}\n\t\t\tpublic void removeUpdate(DocumentEvent arg0) {\n\t\t\t\tapplyButton.setEnabled(!newName_.getText().equals(\"\"));\n\t\t\t}\n\t\t});\n\t\t\n\t\tapplyButton.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(final ActionEvent e) {\n\t\t\t\tenterAction();\n\t\t\t}\n\t\t});\n\n\t\tcancelButton.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(final ActionEvent e) {\n\t\t\t\tescapeAction();\n\t\t\t}\n\t\t});\n\t}", "path": "src\\ch\\epfl\\lis\\gnwgui\\Rename.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * This function is called at this end of the function run().\n */\n", "func_signal": "public void done()", "code": "{\n    \t\n\t        GnwGuiSettings global = GnwGuiSettings.getInstance();\n\t        \n\t        // For each subnet found, a structure or dynamical model item is created\n\t        // and place on the desktop\n\t        for (int i=0; i < output_.length; i++) {\n\t        \tif (output_[i] instanceof ImodNetwork) {\n\t            \tStructureElement structure = new StructureElement(output_[i].getId(), global.getNetworkDesktop());\n\t            \tstructure.setNetwork((ImodNetwork)output_[i]);\n\t            \tstructure.setFather(item_);\n\t            \titem_.addChild(structure);\n\t        \t} else if (output_[i] instanceof GeneNetwork) {\n\t        \t\tDynamicalModelElement dynamicNetwork = new DynamicalModelElement(output_[i].getId(), global.getNetworkDesktop());\n\t        \t\tdynamicNetwork.setGeneNetwork((GeneNetwork)output_[i]);\n\t        \t\tdynamicNetwork.setFather(item_);\n\t        \t\titem_.addChild(dynamicNetwork);\n\t        \t}\n\t        }\n\t\n\t        // Display all the subnets found on the desktop as children of the mother network\n\t        // used to generate them.\n\t        global.getNetworkDesktop().displayChildrenOf(item_);\n\tsnake_.stop();\n\tmyCardLayout.show(cards, runButton_.getName());\n\t\n\t// close the window\n\t SubnetExtraction.this.escapeAction();\n\t\n\t// If some sunet sizes < size_, the user should be informed.\n//\t\t\tif (extractor_.getUnderSized()) {\n//\t\t\t\tJOptionPane.showMessageDialog(global.getGnwGui().getFrame(), \"<html>At least one network generated is under-sized, \" +\n//\t\t\t\t\t\t\"<br>i.e. extraction of a module not linked with the rest of the network.</html>\");\n//\t\t\t}\n\t\n\tlog.log(Level.INFO, \"Done!\");\n\t    }", "path": "src\\ch\\epfl\\lis\\gnwgui\\SubnetExtraction.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/** Add tooltips for all elements of the window */\n", "func_signal": "private void addTooltips()", "code": "{\n\t\n\textractAllRegulators_.setToolTipText(\n\t\t\t\"<html>Extract all regulators of the network, i.e., all nodes that have at least<br>\" +\n\t\t\t\"one outgoing link <i>in the source network</i>. E.g., if the source network is<br>\" +\n\t\t\t\"<i>Ecoli</i>, the extracted subnetwork would consist of all <i>E.coli</i> transcription factors.</html>\");\n\tuseNumRegulators_.setToolTipText(\n\t\t\t\"<html>Select to specify the minimum number of regulators (nodes with at least one outgoing<br>\" +\n\t\t\t\"link <i>in the source network</i>) that should be included in the extracted subnetworks</html>\");\n\tnumRegulators_.setToolTipText(\n\t\t\t\"<html>The minimum number of regulators (nodes with at least one outgoing link<br>\" +\n\t\t\t\"<i>in the source network</i>) to be included in the extracted subnetworks</html>\");\n\trandomVertex_.setToolTipText(\n\t\t\t\"<html>Randomly choose a seed node to<br>\" +\n\t\t\t\"start subnetwork extraction</html>\");\n\tselectionFromList_.setToolTipText(\n\t\t\t\"<html>Manually select a seed node to<br>\" +\n\t\t\t\"start subnetwork extraction</html>\");\n\tgreedy_.setToolTipText(\n\t\t\t\"<html>When growing the subnetwork, always add<br>\" +\n\t\t\t\"nodes that lead to the highest modularity <i>Q</i></html>\");\n\trandomAmongTop_.setToolTipText(\n\t\t\t\"<html>When growing the subnetwork, add nodes from the top <i>k</i> percent of highest modularity <i>Q</i>.<br>\" +\n\t\t\t\"Set to 100% for random subnetwork extraction (add random neighboring nodes). Setting this<br>\" +\n\t\t\t\"parameter to 0% is equivalent to selecting the greedy strategy above.</html>\");\n\tstronglyConnected_.setToolTipText(\n\t\t\t\"<html>Add the specified number of nodes from the largest strongly connected component of the<br>\" +\n\t\t\t\"graph as seeds. <b>Warning</b>: this works fine if the network has a single strongly connected component,<br>\" +\n\t\t\t\"as <i>Yeast</i> does. However, if there are several stongly connected components, the smaller ones will<br>\" +\n\t\t\t\"never be sampled (to be corrected in the next version).</html>\");\n\tnumStronglyConnected_.setToolTipText(\n\t\t\t\"<html>The number of nodes to be added as seed nodes<br>\" +\n\t\t\t\"from the largest strongly connected component</html>\");\n\tsubnetRootName_.setToolTipText(\n\t\t\t\"<html>Specify a name for the subnetwork. If several subnetworks<br>\" +\n\t\t\t\"are being extracted, they will be named as follows:<br>\" +\n\t\t\t\"- <i>name</i>-1<br>\" +\n\t\t\t\"- <i>name</i>-2<br>\" +\n\t\t\t\"- etc.</html>\");\n\tsubnetSize_.setToolTipText(\n\t\t\t\"<html>Extract subnetworks of the given size</html>\");\n\tnumberSubnets_.setToolTipText(\n\t\t\t\"<html>Number of subnetworks to be extracted</html>\");\n\tlistVerticesID_.setToolTipText(\n\t\t\t\"<html>Select a seed node to<br>\" +\n\t\t\t\"start subnetwork extraction</html>\");\n\trandomAmongTopSpinner_.setToolTipText(\n\t\t\t\"<html>When growing the subnetwork, add nodes from the top <i>k</i> percent of highest modularity <i>Q</i>.<br>\" +\n\t\t\t\"Set to 100% for random subnetwork extraction (add random neighboring nodes). Setting this<br>\" +\n\t\t\t\"parameter to 0% is equivalent to selecting the greedy strategy above.</html>\");\n\trunButton_.setToolTipText(\n\t\t\t\"<html>Set parameters to the given values<br>\" +\n\t\t\t\"and start subnetwork extraction</html>\");\n\tcancelButton.setToolTipText(\n\t\t\t\"<html>Abort (the thread may finish the<br>\" +\n\t\t\t\"current subnetwork before it exits)</html>\");\n\t\n\t// tooltips disappear only after 10s\n\tToolTipManager.sharedInstance().setDismissDelay(10000);\n\t\n}", "path": "src\\ch\\epfl\\lis\\gnwgui\\SubnetExtraction.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * Set the background color by selection one of the saved color gradient.\n * @param index\n */\n", "func_signal": "public void setBackgroundGetup(int index)", "code": "{\n\ttop_ = topList_.get(index);\n\tbottom_ = bottomList_.get(index);\n}", "path": "src\\ch\\epfl\\lis\\gnwgui\\windows\\Header.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * Constructor\n * @param n Dimension of the system\n */\n", "func_signal": "public TestFunction(int n)", "code": "{\n\t\n\tsuper(n);\n\tid_ = \"sde_test_function\";\n\tsigma_ = 0.2;\n}", "path": "src\\ch\\epfl\\lis\\sde\\TestFunction.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * Start function\n */\n", "func_signal": "public void start()", "code": "{\n\t// If myThread_ is null, we start it!\n\tif (myThread_ == null) {\n\t\tmyThread_ = new Thread(this);\n\t\tmyThread_.start();\n\t}\n}", "path": "src\\ch\\epfl\\lis\\gnwgui\\SubnetExtraction.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * Define the format used to display the logs.\n * Here, only the log text is returned (no date, level information, etc.\n */\n", "func_signal": "public String format(LogRecord record)", "code": "{\n\n\tStringBuffer buf = new StringBuffer(180);\n\tbuf.append(formatMessage(record));\n\tbuf.append(lineSep);\n\n\tThrowable throwable = record.getThrown();\n\tif (throwable != null) {\n\t\tStringWriter sink = new StringWriter();\n\t\tthrowable.printStackTrace(new PrintWriter(sink, true));\n\t\tbuf.append(sink.toString());\n\t}\n\treturn buf.toString();\n}", "path": "src\\ch\\epfl\\lis\\gnwgui\\GnwConsoleSimpleFormatter.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * Computes the drift coefficients F and diffusion coefficient G at a given time.\n * @throws Exception If the scheme asked for is not implemented.\n */\n", "func_signal": "public void getDriftAndDiffusion(final double t, final DoubleMatrix1D Xin,\n\t\tDoubleMatrix1D F, DoubleMatrix2D G) throws Exception", "code": "{\n\t\n\t// Here Ito and Stratonovich drift terms are equivalent because diffusion = const\n\t// See the above class description\n\tfor (int i=0; i<dimension_; i++) {\n\t\tF.set(i, -3*Xin.get(i) + 1);\n\t\tG.set(i, i, sigma_);\n\t}\n}", "path": "src\\ch\\epfl\\lis\\sde\\TestFunction.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * This function defines a root name for all the subnetworks.\n */\n", "func_signal": "public void subnetIdProposal()", "code": "{\n\tsubnetRootName_.setText(/*\"sub-\" + */item_.getLabel());\n\tsubnetRootName_.selectAll();\n}", "path": "src\\ch\\epfl\\lis\\gnwgui\\SubnetExtraction.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * Set a Combobox filled with all the name of the node of the network\n * alphabetically sorted.\n */\n", "func_signal": "public void setListVerticesID()", "code": "{\n\tArrayList<String> list = null;\n\tString[] listStr = null;\n\tif (item_ instanceof StructureElement)\n\t\tlist = ((StructureElement) item_).getNetwork().getAllNodesLabels();\n\telse if (item_ instanceof DynamicalModelElement)\n\t\tlist = ((DynamicalModelElement)item_).getGeneNetwork().getAllNodesLabels();\n\t\n\tif (list == null || list.size() == 0)\n\t\treturn;\n\t\n\tlistStr = new String[list.size()];\n\tfor (int i=0; i < listStr.length; i++)\n\t\tlistStr[i] = list.get(i);\n\t\n\t// Sort the vertices ids in alphabetical order.\n\tArrays.sort(listStr);\n\tlistVerticesID_.setModel(new DefaultComboBoxModel(listStr));\n}", "path": "src\\ch\\epfl\\lis\\gnwgui\\SubnetExtraction.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * Redefines the function enterAction instantiated in the class DialogReactive.\n * After validation, the related item is renamed.\n */\n", "func_signal": "@Override\npublic void enterAction()", "code": "{\n\t// Change the name of the network\n\tif (item_ instanceof StructureElement)\n\t\t((StructureElement)item_).getNetwork().setId(newName_.getText());\n\telse if (item_ instanceof DynamicalModelElement)\n\t\t((DynamicalModelElement)item_).getGeneNetwork().setId(newName_.getText());\n\t\n\t// Change the label displayed on the desktop\n\titem_.setLabel(newName_.getText());\n\t\n\tGnwGuiSettings.getInstance().getNetworkDesktop().recalculateColumnWidths(item_);\n\tdispose();\n}", "path": "src\\ch\\epfl\\lis\\gnwgui\\Rename.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * Constructor\n */\n", "func_signal": "public GraphViewerController()", "code": "{\n\t\t\n\t\tsuper();\n\t\tsetBackground(Color.WHITE);\n\t\t\n\t\tcontrolerPanel_ = new JPanel();\n\t\tfinal GridBagLayout gridBagLayout = new GridBagLayout();\n\t\tgridBagLayout.columnWidths = new int[] {7,7};\n\t\tgridBagLayout.rowHeights = new int[] {7,7,7,7,7,7,7,7,7,7,0,7,0,7,7,0,7,7};\n\t\tcontrolerPanel_.setLayout(gridBagLayout);\n\t\tcontrolerPanel_.setBorder(new TitledBorder(null, \"Visualization Controls\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(\"Sans\", Font.PLAIN, 12), null));\n\t\tcontrolerPanel_.setBackground(Color.WHITE);\n\t\tadd(controlerPanel_);\n\n\t\tfinal Component component_8 = Box.createVerticalStrut(5);\n\t\tfinal GridBagConstraints gridBagConstraints_17 = new GridBagConstraints();\n\t\tgridBagConstraints_17.gridx = 1;\n\t\tgridBagConstraints_17.gridy = 0;\n\t\tcontrolerPanel_.add(component_8, gridBagConstraints_17);\n\n\t\tinteractionMode_ = new JComboBox();\n\t\tfinal GridBagConstraints gridBagConstraints_2 = new GridBagConstraints();\n\t\tgridBagConstraints_2.anchor = GridBagConstraints.WEST;\n\t\tgridBagConstraints_2.gridx = 1;\n\t\tgridBagConstraints_2.gridy = 1;\n\t\tcontrolerPanel_.add(interactionMode_, gridBagConstraints_2);\n\t\tinteractionMode_.setModel(new DefaultComboBoxModel(new String[] {\"Transforming\", \"Picking\", \"Selecting a Seed\"}));\n\t\tinteractionMode_.setFont(new Font(\"Dialog\", Font.PLAIN, 11));\n\t\tinteractionMode_.setBackground(Color.WHITE);\n\n\t\tfinal Component component = Box.createVerticalStrut(10);\n\t\tfinal GridBagConstraints gridBagConstraints = new GridBagConstraints();\n\t\tgridBagConstraints.gridy = 2;\n\t\tgridBagConstraints.gridx = 1;\n\t\tcontrolerPanel_.add(component, gridBagConstraints);\n\n\t\tlayoutCombo_ = new JComboBox();\n\t\tlayoutCombo_.setModel(new DefaultComboBoxModel(new String[] {\"Layout\"}));\n\t\tlayoutCombo_.setBackground(Color.WHITE);\n\t\tlayoutCombo_.setFont(new Font(\"Sans\", Font.PLAIN, 11));\n\t\tlayoutCombo_.setActionCommand(\"layoutCombo\");\n\t\tfinal GridBagConstraints gridBagConstraints_12 = new GridBagConstraints();\n\t\tgridBagConstraints_12.anchor = GridBagConstraints.WEST;\n\t\tgridBagConstraints_12.gridy = 3;\n\t\tgridBagConstraints_12.gridx = 1;\n\t\tcontrolerPanel_.add(layoutCombo_, gridBagConstraints_12);\n\n\t\tfinal Component component_3 = Box.createVerticalStrut(5);\n\t\tfinal GridBagConstraints gridBagConstraints_19 = new GridBagConstraints();\n\t\tgridBagConstraints_19.gridy = 4;\n\t\tgridBagConstraints_19.gridx = 1;\n\t\tcontrolerPanel_.add(component_3, gridBagConstraints_19);\n\n\t\tfinal JLabel vertexSearchLabel = new JLabel();\n\t\tfinal GridBagConstraints gridBagConstraints_4 = new GridBagConstraints();\n\t\tgridBagConstraints_4.anchor = GridBagConstraints.WEST;\n\t\tgridBagConstraints_4.gridy = 5;\n\t\tgridBagConstraints_4.gridx = 1;\n\t\tcontrolerPanel_.add(vertexSearchLabel, gridBagConstraints_4);\n\t\tvertexSearchLabel.setFont(new Font(\"Dialog\", Font.PLAIN, 11));\n\t\tvertexSearchLabel.setText(\"Vertex search:\");\n\n\t\tfinal Component component_9 = Box.createVerticalStrut(5);\n\t\tfinal GridBagConstraints gridBagConstraints_18 = new GridBagConstraints();\n\t\tgridBagConstraints_18.gridy = 6;\n\t\tgridBagConstraints_18.gridx = 1;\n\t\tcontrolerPanel_.add(component_9, gridBagConstraints_18);\n\t\t\n\t\tsearch_ = new SearchBox();\n\t\tfinal GridBagConstraints gridBagConstraints_5 = new GridBagConstraints();\n\t\tgridBagConstraints_5.anchor = GridBagConstraints.WEST;\n\t\tgridBagConstraints_5.gridy = 7;\n\t\tgridBagConstraints_5.gridx = 1;\n\t\tcontrolerPanel_.add(search_, gridBagConstraints_5);\n\t\tsearch_.setColumns(12);\n\t\tsearch_.setFont(new Font(\"Sans\", Font.PLAIN, 11));\n\n\t\tfinal Component component_1 = Box.createVerticalStrut(20);\n\t\tfinal GridBagConstraints gridBagConstraints_1 = new GridBagConstraints();\n\t\tgridBagConstraints_1.gridy = 8;\n\t\tgridBagConstraints_1.gridx = 1;\n\t\tcontrolerPanel_.add(component_1, gridBagConstraints_1);\n\n\t\tdisplayLabels_ = new JCheckBox();\n\t\tfinal GridBagConstraints gridBagConstraints_6 = new GridBagConstraints();\n\t\tgridBagConstraints_6.anchor = GridBagConstraints.WEST;\n\t\tgridBagConstraints_6.gridy = 9;\n\t\tgridBagConstraints_6.gridx = 1;\n\t\tcontrolerPanel_.add(displayLabels_, gridBagConstraints_6);\n\t\tdisplayLabels_.setFocusable(false);\n\t\tdisplayLabels_.setFont(new Font(\"Dialog\", Font.PLAIN, 11));\n\t\tdisplayLabels_.setBackground(Color.WHITE);\n\t\tdisplayLabels_.setText(\"Display labels\");\n\n\t\tcurvedEdges_ = new JCheckBox();\n\t\tcurvedEdges_.setFocusable(false);\n\t\tfinal GridBagConstraints gridBagConstraints_7 = new GridBagConstraints();\n\t\tgridBagConstraints_7.anchor = GridBagConstraints.WEST;\n\t\tgridBagConstraints_7.gridy = 10;\n\t\tgridBagConstraints_7.gridx = 1;\n\t\tcontrolerPanel_.add(curvedEdges_, gridBagConstraints_7);\n\t\tcurvedEdges_.setBackground(Color.WHITE);\n\t\tcurvedEdges_.setFont(new Font(\"Sans\", Font.PLAIN, 11));\n\t\tcurvedEdges_.setText(\"Curved edges\");\n\n\t\tfinal Component component_4 = Box.createVerticalStrut(20);\n\t\tfinal GridBagConstraints gridBagConstraints_13 = new GridBagConstraints();\n\t\tgridBagConstraints_13.gridy = 11;\n\t\tgridBagConstraints_13.gridx = 1;\n\t\tcontrolerPanel_.add(component_4, gridBagConstraints_13);\n\n\t\tfinal JLabel inhibitoryConnectionsLabel = new JLabel();\n\t\tfinal GridBagConstraints gridBagConstraints_8 = new GridBagConstraints();\n\t\tgridBagConstraints_8.insets = new Insets(0, 0, 0, 5);\n\t\tgridBagConstraints_8.anchor = GridBagConstraints.WEST;\n\t\tgridBagConstraints_8.gridy = 12;\n\t\tgridBagConstraints_8.gridx = 1;\n\t\tcontrolerPanel_.add(inhibitoryConnectionsLabel, gridBagConstraints_8);\n\t\tinhibitoryConnectionsLabel.setBackground(Color.WHITE);\n\t\tinhibitoryConnectionsLabel.setFont(new Font(\"Sans\", Font.PLAIN, 11));\n\t\tinhibitoryConnectionsLabel.setText(\"Distinguish signed edges:\");\n\n\t\tfinal Component component_2 = Box.createVerticalStrut(5);\n\t\tfinal GridBagConstraints gridBagConstraints_3 = new GridBagConstraints();\n\t\tgridBagConstraints_3.gridy = 13;\n\t\tgridBagConstraints_3.gridx = 1;\n\t\tcontrolerPanel_.add(component_2, gridBagConstraints_3);\n\n\t\tdistinguishByArrowHead_ = new JCheckBox();\n\t\tdistinguishByArrowHead_.setFocusable(false);\n\t\tfinal GridBagConstraints gridBagConstraints_9 = new GridBagConstraints();\n\t\tgridBagConstraints_9.anchor = GridBagConstraints.WEST;\n\t\tgridBagConstraints_9.gridy = 14;\n\t\tgridBagConstraints_9.gridx = 1;\n\t\tcontrolerPanel_.add(distinguishByArrowHead_, gridBagConstraints_9);\n\t\tdistinguishByArrowHead_.setBackground(Color.WHITE);\n\t\tdistinguishByArrowHead_.setFont(new Font(\"Sans\", Font.PLAIN, 11));\n\t\tdistinguishByArrowHead_.setText(\"by arrow head\");\n\n\t\tdistinguishByColor_ = new JCheckBox();\n\t\tdistinguishByColor_.setFocusable(false);\n\t\tfinal GridBagConstraints gridBagConstraints_10 = new GridBagConstraints();\n\t\tgridBagConstraints_10.anchor = GridBagConstraints.NORTHWEST;\n\t\tgridBagConstraints_10.gridy = 15;\n\t\tgridBagConstraints_10.gridx = 1;\n\t\tcontrolerPanel_.add(distinguishByColor_, gridBagConstraints_10);\n\t\tdistinguishByColor_.setBackground(Color.WHITE);\n\t\tdistinguishByColor_.setFont(new Font(\"Sans\", Font.PLAIN, 11));\n\t\tdistinguishByColor_.setText(\"by color\");\n\n\t\tfinal Component component_10 = Box.createVerticalStrut(20);\n\t\tfinal GridBagConstraints gridBagConstraints_20 = new GridBagConstraints();\n\t\tgridBagConstraints_20.gridy = 16;\n\t\tgridBagConstraints_20.gridx = 1;\n\t\tcontrolerPanel_.add(component_10, gridBagConstraints_20);\n\n\t\tfinal Component component_5 = Box.createHorizontalStrut(10);\n\t\tfinal GridBagConstraints gridBagConstraints_14 = new GridBagConstraints();\n\t\tgridBagConstraints_14.gridy = 17;\n\t\tgridBagConstraints_14.gridx = 2;\n\t\tcontrolerPanel_.add(component_5, gridBagConstraints_14);\n\n\t\tfinal Component component_7 = Box.createHorizontalStrut(10);\n\t\tfinal GridBagConstraints gridBagConstraints_16 = new GridBagConstraints();\n\t\tgridBagConstraints_16.gridy = 18;\n\t\tgridBagConstraints_16.gridx = 0;\n\t\tcontrolerPanel_.add(component_7, gridBagConstraints_16);\n\n\t\texportButton_ = new JButton();\n\t\tfinal GridBagConstraints gridBagConstraints_11 = new GridBagConstraints();\n\t\tgridBagConstraints_11.gridy = 18;\n\t\tgridBagConstraints_11.gridx = 1;\n\t\tcontrolerPanel_.add(exportButton_, gridBagConstraints_11);\n\t\texportButton_.setFont(new Font(\"Sans\", Font.PLAIN, 11));\n\t\texportButton_.setBackground(UIManager.getColor(\"Button.background\"));\n\t\texportButton_.setText(\"<html><center>Export<br>as image</center></html>\");\n\n\t\tfinal Component component_6 = Box.createVerticalStrut(10);\n\t\tfinal GridBagConstraints gridBagConstraints_15 = new GridBagConstraints();\n\t\tgridBagConstraints_15.gridy = 19;\n\t\tgridBagConstraints_15.gridx = 1;\n\t\tcontrolerPanel_.add(component_6, gridBagConstraints_15);\n\t\t\n\t\tGnwGuiSettings settings = GnwGuiSettings.getInstance();\n\t\texportButton_.setIcon(new ImageIcon(settings.getSnapshotImage()));\n\t}", "path": "src\\ch\\epfl\\lis\\gnwgui\\windows\\GraphViewerController.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * This method paints the content of the header.\n * @param g Graphics instance\n */\n", "func_signal": "public void paintComponent(Graphics g)", "code": "{\n        super.paintComponent(g);\n        \n\tGraphics2D g2 = (Graphics2D)g;\n\tg2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n\tg2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n\tPaint pt = g2.getPaint();\n\tg2.setPaint( new GradientPaint(this.getSize().width, 0, top_, this.getSize().width, this.getSize().height, bottom_));\n\tg2.fillRoundRect(0, 0, this.getSize().width, this.getSize().height, 0, 0);\n        g2.setPaint(pt);\n}", "path": "src\\ch\\epfl\\lis\\gnwgui\\windows\\Header.java", "repo_name": "xuzhikethinker/GeneNetWeaver", "stars": 1, "license": "other", "language": "java", "size": 11696}
{"docstring": "/**\n * Place the object at the new locations in the given field.\n * @param newLocations The object's new locations.\n */\n", "func_signal": "public void setLocation(ArrayList<Location> newLocations)", "code": "{\n\tfor(int counter = 0; counter < newLocations.size(); counter++)\n\t{\n\t\tLocation location = newLocations.get(counter); \n\t        if(location != null) {\n\t            field.clear(location);\n\t        }\n    }\n    locations = newLocations;\n    field.place(this, newLocations);\n}", "path": "Objects.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Place the animal at the new location in the given field.\n * @param newLocation The animal's new location.\n */\n", "func_signal": "public void setLocation(Location newLocation)", "code": "{\n    if(location != null) {\n        field.clear(location);\n    }\n    location = newLocation;\n    field.place(this, newLocation);\n}", "path": "Animal.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Try to find a free location that is adjacent to the\n * given location. If there is none, return null.\n * The returned location will be within the valid bounds\n * of the field.\n * @param location The location from which to generate an adjacency.\n * @return A valid location within the grid area.\n */\n", "func_signal": "public Location freeAdjacentLocation(Location location)", "code": "{\n    // The available free ones.\n    List<Location> free = getFreeAdjacentLocations(location);\n    if(free.size() > 0) {\n        return free.get(rand.nextInt(free.size()));\n    }\n    else {\n        return null;\n    }\n}", "path": "Field.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Generate a random location that is adjacent to the\n * given location, or is the same location.\n * The returned location will be within the valid bounds\n * of the field.\n * @param location The location from which to generate an adjacency.\n * @return A valid location within the grid area.\n */\n", "func_signal": "public Location randomAdjacentLocation(Location location)", "code": "{\n    List<Location> adjacent = adjacentLocations(location);\n    return adjacent.get(0);\n}", "path": "Field.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Return a shuffled list of locations adjacent to the given one.\n * The list will not include the location itself.\n * All locations will lie within the grid.\n * @param location The location from which to generate adjacencies.\n * @return A list of locations adjacent to that given.\n */\n", "func_signal": "public List<Location> adjacentLocations(Location location)", "code": "{\n    assert location != null : \"Null location passed to adjacentLocations\";\n    // The list of locations to be returned.\n    List<Location> locations = new LinkedList<Location>();\n    if(location != null) {\n        int row = location.getRow();\n        int col = location.getCol();\n        for(int roffset = -1; roffset <= 1; roffset++) {\n            int nextRow = row + roffset;\n            if(nextRow >= 0 && nextRow < depth) {\n                for(int coffset = -1; coffset <= 1; coffset++) {\n                    int nextCol = col + coffset;\n                    // Exclude invalid locations and the original location.\n                    if(nextCol >= 0 && nextCol < width && (roffset != 0 || coffset != 0)) {\n                        locations.add(new Location(nextRow, nextCol));\n                    }\n                }\n            }\n        }\n        \n        // Shuffle the list. Several other methods rely on the list\n        // being in a random order.\n        Collections.shuffle(locations, rand);\n    }\n    return locations;\n}", "path": "Field.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Indicate that the object is to be destroyed.\n * It is removed from the field.\n */\n", "func_signal": "public void destroy()", "code": "{\n    if(location != null) {\n        field.clear(location);\n        location = null;\n        field = null;\n    }\n}", "path": "Objects.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Create a trap.\n * @param field The field currently occupied.\n * @param location The location within the field.\n */\n", "func_signal": "public Trap(Field field, Location location)", "code": "{\n    super(field, location, false);\n    snared = false;\n}", "path": "Trap.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Get a shuffled list of the free adjacent locations.\n * @param location Get locations adjacent to this.\n * @return A list of free adjacent locations.\n */\n", "func_signal": "public List<Location> getFreeAdjacentLocations(Location location)", "code": "{\n    List<Location> free = new LinkedList<Location>();\n    List<Location> adjacent = adjacentLocations(location);\n    for(Location next : adjacent) {\n    \t// TODO Change to make it check if its visible, not its name\n        if(getObjectAt(next) == null || getObjectAt(next).toString().contains(\"Trap\")) {\n            free.add(next);\n        }\n    }\n    return free;\n}", "path": "Field.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Create a new animal at location in field.\n * \n * @param newField The field currently occupied.\n * @param location The location within the field.\n */\n", "func_signal": "public Animal(Field newField, Location location)", "code": "{\n    alive = true;\n    diseased = false;\n    field = newField;\n    setLocation(location);\n    Randomizer random = new Randomizer();\n    if(random.getRandom().nextBoolean() == true)\n    \t{gender = 'M';}else{gender = 'F';}\n}", "path": "Animal.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Place an object across several locations\n * @param object The object your placing in the field\n * @param newLocations The locations the object is present on\n */\n", "func_signal": "public void place(Object object, ArrayList<Location> newLocations)", "code": "{\n\tfor(int counter = 0; counter < newLocations.size(); counter++)\n\t{\n\t\tLocation location = newLocations.get(counter); \n\t        place(object, location);\n    }\n}", "path": "Field.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Create a new object at location in field.\n * @param newField The field currently occupied.\n * @param locations An arraylist of the locations occcupied by the object\n * @param animalVisibility Wether the object is visible to animals\n */\n", "func_signal": "public Objects(Field newField, ArrayList<Location> locations, boolean animalVisibility)", "code": "{\n\ttriggered = false;\n\tfield = newField;\n\tvisibleToAnimals = animalVisibility;\n\tlocation = null;\n\tsetLocation(locations);\n}", "path": "Objects.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Return how many free locations are left in the field\n * @return int The number of free locations left in the field\n */\n", "func_signal": "public int getLocationsLeft()", "code": "{\n\tint locationsLeft = 0;\n    for(int row = 0; row < getDepth(); row++) {\n        for(int col = 0; col < getWidth(); col++) {\n        \tif(getObjectAt(row, col) == null){locationsLeft++;}\n        }\n    }\n\treturn locationsLeft;\n}", "path": "Field.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Indicate that the animal is no longer alive.\n * It is removed from the field.\n */\n", "func_signal": "public void setDead()", "code": "{\n    alive = false;\n    if(location != null) {\n        field.clear(location);\n        location = null;\n        field = null;\n    }\n}", "path": "Animal.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Return a random free location in the field\n * @return Location a random free location\n */\n", "func_signal": "public Location getRandomFreeLocation()", "code": "{\n\tLocation newLocation = null;\n\tif(getLocationsLeft() >= 1){\n    \tLocation location = null;\n    \tRandomizer random = new Randomizer();\n\twhile(newLocation == null){\n\tint startingPointDepth = random.getRandom().nextInt(depth);\n\tint startingPointWidth = random.getRandom().nextInt(width);\n\tlocation = new Location(startingPointDepth, startingPointWidth);\n\tif(getObjectAt(location) == null){\n\t\tnewLocation = location;}\n\telse if(freeAdjacentLocation(location) != null){\n\t\tnewLocation = freeAdjacentLocation(location);}\n\telse{\n\t\tnewLocation = null;\n\t}}}\n\treturn newLocation;\n}", "path": "Field.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Represent a field of the given dimensions.\n * @param newDepth The depth of the field.\n * @param newWidth The width of the field.\n */\n", "func_signal": "public Field(int newDepth, int newWidth)", "code": "{\n    depth = newDepth;\n    width = newWidth;\n    field = new Object[depth][width];\n}", "path": "Field.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Provide a name for one of the simulation types.\n * @param newName  A name, e.g. \"Fox\".\n */\n", "func_signal": "public Counter(String newName)", "code": "{\n    name = newName;\n    count = 0;\n}", "path": "Counter.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Empty the field.\n */\n", "func_signal": "public void clear()", "code": "{\n    for(int row = 0; row < depth; row++) {\n        for(int col = 0; col < width; col++) {\n            field[row][col] = null;\n        }\n    }\n}", "path": "Field.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Create a new object at location in field.\n * @param newField The field currently occupied.\n * @param location The location within the field.\n * @param animalVisibility Wether the object is visible to animals\n */\n", "func_signal": "public Objects(Field newField, Location location, boolean animalVisibility)", "code": "{\n    triggered = false;\n    visibleToAnimals = animalVisibility;\n    field = newField;\n    locations = null;\n    setLocation(location);\n}", "path": "Objects.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * This is what the trap does most of the time: it just \n * waits for itself to be snared.\n * @param animal The poor animal to fall into the trap\n */\n", "func_signal": "public void react(Animal animal)", "code": "{\n    if(isTriggered()) {\n        snared = true;\n        animal.setDead();\n        this.destroy();\n    }\n}", "path": "Trap.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "/**\n * Place the object at the new location in the given field.\n * @param newLocation The object's new location.\n */\n", "func_signal": "public void setLocation(Location newLocation)", "code": "{\n    if(location != null) {\n        field.clear(location);\n    }\n    location = newLocation;\n    field.place(this, newLocation);\n}", "path": "Objects.java", "repo_name": "AlastairDewar/foxesandrabbits", "stars": 1, "license": "None", "language": "java", "size": 1264}
{"docstring": "// Finding the patient for the given criteria\n/** /\n * Searched the database and return the patient object for the given criteria\n * @param whereClause\n * @return List of the patient for the query\n */\n", "func_signal": "private List<Patient> findCandidates(String whereClause)", "code": "{\n    List<Patient> retList = new ArrayList<Patient>();\n    String sql = SELECT_FROM_PATIENT + whereClause;\n\n    log.info(\"SQL for selecting patients: \" + sql);\n    DbUtils.getInstance().openConnection();\n    ResultSet rs = DbUtils.getInstance().executeQuery(sql);\n\n    int i = 0;\n    try {\n        if (rs.next()) {\n            log.info(\"patients: \" + i++);\n            // return Patient Object\n            Patient patient = new Patient();\n            patient.setPatientName(personName(rs));\n            patient.setAdministrativeSex(administrativeSex(rs));\n            patient.setAddresses(listAddress(rs));\n            patient.setBirthDateTime(birthDate(rs));\n            patient.setMaritalStatus(rs.getString(MARITIAL_STATUS));\n            patient.setReligion(rs.getString(RELIGION));\n            patient.setRace(rs.getString(RACE));\n            patient.setEthnicGroup(rs.getString(ETHNICITY));\n            patient.setPhoneNumbers(listPhoneNumber(rs));\n            patient.setPatientIds(listPatientIdentifier(rs));\n            retList.add(patient);\n        }\n    } catch (Exception ex) {\n        log.log(Level.ERROR, \"SQLException: \" + ex.getMessage());\n        //ex.printStackTrace();\n    } finally{\n        DbUtils.getInstance().closeConnection();\n    }\n    return retList;\n}", "path": "src\\org\\laika\\pixpdqadapter\\PdSupplierAdapter.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "/**\n * Receives a value for the number of records to be returned,\n * retrieves the records from the database and returns the records as a string.\n *\n * @param rows\n * @return\n */\n", "func_signal": "public static String getLog(int rows)", "code": "{\n\n    String retStr = \"\";\n\n    String sql = \"SELECT message, created_at FROM message_logs order by created_at desc limit \" + rows;\n\n    try {\n        ResultSet rsLog = DbUtils.getInstance().executeQuery(sql);\n\n        while (rsLog.next()) {\n            retStr += \"\\n Log Time: \" + rsLog.getString(\"created_at\");\n            retStr += \"\\n Message : \" + rsLog.getString(\"message\");\n        }\n    } catch (SQLException ex) {\n        log.log(Level.SEVERE, \"SQLException: \" + ex.getMessage());\n    }\n\n    return retStr;\n}", "path": "src\\org\\laika\\pixpdqadapter\\utils\\MessageLogger.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "/**\n * initialize the database connection\n */\n", "func_signal": "private DbUtils()", "code": "{\n\n    Properties tProps = new Properties();\n\n    InputStream is = null;\n    try {\n        is = new FileInputStream(new File(\"./conf/db.properties\"));\n        //getClass().getResourceAsStream(\"/conf/db.properties\");\n        tProps.load(is);\n        is.close();\n    } catch (FileNotFoundException ex) {\n        log.error(\"FileNotFoundException: \" + ex.getMessage());\n    }\n    catch (IOException ex) {\n        log.error(\"IOException: \" + ex.getMessage());\n    }\n\n    _dbUrl = tProps.getProperty(\"url\");\n    if (_dbUrl == null) {\n    }\n    _userId = tProps.getProperty(\"userid\");\n    _password = tProps.getProperty(\"password\");\n    _dbDriver = tProps.getProperty(\"driver\");\n    try {\n        Class.forName(_dbDriver);\n    } catch (ClassNotFoundException ex) {\n        log.error(\"ClassNotFoundException: \" + ex.getMessage());\n    }\n    \n}", "path": "src\\org\\laika\\pixpdqadapter\\utils\\DbUtils.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "// Adds a new patient identifier to the database.\n", "func_signal": "private void insertPatientId(Patient patient)", "code": "{\n\n    String first_name = patient.getPatientName().getFirstName();\n    String last_name = patient.getPatientName().getLastName();\n    String sql;\n\n    //select patient data id\n    sql = \"select pd.id patient_id from patients pd , test_plans vp \"\n\t\t\t+ \"where pd.test_plan_id = vp.id and vp.type = 'PixFeedPlan' \"\n\t\t\t+ \"and lower(pd.name) = lower('\" + first_name + \"') +' '+ lower('\" + last_name\n\t\t\t+ \"') order by pd.updated_at desc\";\n\n    log.log(Level.INFO, \"SQL to select PIX patient id for patient: \" + sql);\n\n    int patientID = getPatientId(sql);\n\n    if (patientID != 0) {\n\n        String pat_id = ((PatientIdentifier) patient.getPatientIds().get(0)).getId();\n        String idi = ((Identifier) ((PatientIdentifier) patient.getPatientIds().get(0)).getAssigningAuthority()).getAuthorityNameString();\n\n        ResultSet rsPatient = null;\n\n        //check if id exists in db\n        sql = \"select count(*) cnt FROM patient_identifiers \" + \"where patient_id = \"\n\t\t\t\t+ patientID + \" and affinity_domain ='\" + idi + \"' \" + \"and patient_identifier ='\"\n\t\t\t\t+ pat_id + \"'\";\n\n        log.log(Level.INFO, \"SQL to check for existing ID and IDI: \" + sql);\n\n        try {\n            DbUtils.getInstance().openConnection();\n            rsPatient = DbUtils.getInstance().executeQuery(sql);\n\n            if (rsPatient.next()) {\n                log.log(Level.INFO, \"Matching ids found: \" + rsPatient.getInt(\"cnt\"));\n                if (rsPatient.getInt(\"cnt\") == 0) {\n\n                    //insert identifier into db\n                    sql = \"insert into patient_identifiers(patient_id, affinity_domain, \"\n\t\t\t\t\t\t\t+ \"patient_identifier) \" + \"values(\" + patientID + \", '\" + idi + \"', '\"\n\t\t\t\t\t\t\t+ pat_id + \"')\";\n\n                    log.log(Level.INFO, \"SQL to insert patient id and idi: \" + sql);\n\n                    DbUtils.getInstance().executeUpdate(sql);\n\n                    log.log(Level.INFO, \"Patient info added sucessfully.\");\n                }\n            }\n        } catch (SQLException ex) {\n            log.error(\"SQLException: \" + ex.getMessage());\n        } finally {\n            DbUtils.getInstance().closeConnection();\n        }\n    }\n}", "path": "src\\org\\laika\\pixpdqadapter\\PixManagerAdapter.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "// main method\n", "func_signal": "public static void main(String[] args)", "code": "{\n    String menu = \"Select: \\n\" +\n            \"1. PIX Feed\\n\" +\n            \"2. PIX Query\\n\" +\n            \"3. PD Query\\n\" +\n            \"4. Logs\\n\" +\n            \"Enter: \";\n    System.out.print(menu);\n    BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\n    StringTokenizer st = null;\n    try {\n        st = new StringTokenizer(stdin.readLine(), \",\");\n    } catch (IOException ex) {\n        //Logger.getLogger(PixPdqApi.class.getName()).log(Level.SEVERE, null, ex);\n    }\n\n    PixPdqApi api = new PixPdqApi();\n\n    int sel = Integer.parseInt(st.nextToken());\n    String idi=null;\n    String id=null;\n\n    try {\n        idi = st.nextToken();\n        id = st.nextToken();\n    } catch (Exception e) {\n    }\n\n    switch (sel) {\n        case 1:\n            System.out.println(api.checkPatientExists(idi, id));\n            break;\n        case 2:\n            System.out.println(api.patientIdsToString(api.findPatientIds(idi, id)));\n            break;\n        case 3:\n            break;\n        case 4:\n            System.out.println (MessageLogger.getLog(5));\n            break;\n        default:\n            System.exit(0);\n    }\n}", "path": "src\\org\\laika\\pixpdqadapter\\PixPdqApi.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "/**\n * insert the message into the db\n *\n * @param msg received message\n */\n", "func_signal": "public static void log(Message msg)", "code": "{\n    String message = null;\n    try {\n        message = new HL7Util().encodeMessage(msg);\n    } catch (HL7Exception ex) {\n        log.log(Level.SEVERE, \"SQLException: \" + ex.getMessage());\n    }\n\n    String sql = \"INSERT INTO message_logs (created_at, message) VALUES(\" +\n            \"CURRENT_TIMESTAMP, '\" + message + \"')\";\n\n    DbUtils.getInstance().executeUpdate(sql);\n}", "path": "src\\org\\laika\\pixpdqadapter\\utils\\MessageLogger.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "/**\n * open the database connection\n */\n", "func_signal": "public void openConnection()", "code": "{\n    try {\n        conn = DriverManager.getConnection(_dbUrl, _userId, _password);\n    } catch (SQLException ex) {\n        log.error(\"SQLException: \" + ex.getMessage());\n    }\n}", "path": "src\\org\\laika\\pixpdqadapter\\utils\\DbUtils.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "/**\n * close the database connection\n */\n", "func_signal": "public void closeConnection()", "code": "{\n    try {\n        if ((conn != null) || (!conn.isClosed())) {\n            conn.close();\n        }\n    } catch (SQLException ex) {\n        log.error(\"SQLException: \" + ex.getMessage());\n    }\n}", "path": "src\\org\\laika\\pixpdqadapter\\utils\\DbUtils.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "/**\n *\n * @param patient details of the patient\n * @param header\n * @throws org.openhealthexchange.openpixpdq.ihe.PixManagerException\n */\n", "func_signal": "public List<List<PatientIdentifier>> updatePatient(Patient patient, MessageHeader header) throws PixManagerException", "code": "{\n    insertPatientId(patient);\n\n    return null;\n}", "path": "src\\org\\laika\\pixpdqadapter\\PixManagerAdapter.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "/**\n *  The PdqSupplierAdapter is the source that provides patient data for a PdSupplier.\n *\n * @author Abhijeet\n * @version 1.0, Feb 03, 2009\n */\n", "func_signal": "public PdqResult findPatients(PdqQuery query, MessageHeader header)\n        throws PdSupplierException", "code": "{\n\n    log.log(Level.INFO, \"Find patient with FirstName=\" +\n            query.getPersonName().getFirstName() + \" and LastName=\" +\n            query.getPersonName().getLastName());\n\n    // Extracted details from the input query as a where clause\n    String whereClause = getPersonClause(query);\n\n    // Get Patient List for the given where clause\n    List<Patient> results = findCandidates(whereClause);\n    log.log(Level.INFO, \"Number of patients found: \" + results.size());\n\n    if (results.size() > 0) {\n        log.log(Level.INFO, \"Patients: \" + results.get(0).getPatientName().getFirstName());\n    }\n\n    if (results == null) {\n        throw new PdSupplierException(\"No patients found\");\n    }\n\n    //Converts to Patients List of List\n    List<List<Patient>> allPatients = new ArrayList<List<Patient>>();\n    for (int i = 0; i < results.size(); i++) {\n        List<Patient> patients = new ArrayList<Patient>();\n        Patient patient = results.get(i);\n        log.log(Level.INFO, \"Found patient \" + i + \": \" + patient.getPatientName().getFirstName() + \" \" +\n                patient.getPatientName().getLastName());\n        patients.add(patient);\n        allPatients.add(patients);\n    }\n    return new PdqResult(allPatients);\n}", "path": "src\\org\\laika\\pixpdqadapter\\PdSupplierAdapter.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "// api to convert List to string\n", "func_signal": "public String patientIdsToString(List<PatientIdentifier> patientList)", "code": "{\n\n    String retStr = \"\";\n    String identifier = null;\n    String domain = null;\n\n    for (PatientIdentifier patientIdentifier : patientList) {\n        identifier = patientIdentifier.getId();\n        domain = patientIdentifier.getAssigningAuthority().getNamespaceId();\n        retStr += \"Patient Id: \" + identifier + \",\\t\\t Identifier Domain Identifier: \" + domain + \"\\n\";\n    }\n\n    return retStr;\n}", "path": "src\\org\\laika\\pixpdqadapter\\PixPdqApi.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "// api to find patient id's\n", "func_signal": "public List<PatientIdentifier> findPatientIds(String idi, String id)", "code": "{\n\n    List patientList = null;\n    PatientIdentifier pid = new PatientIdentifier(id, new Identifier(idi, \"\", \"\"));\n    PixManagerAdapter pma = new PixManagerAdapter();\n\n    try {\n        patientList = pma.findPatientIds(pid, null);\n    } catch (PixManagerException ex) {\n        ex.printStackTrace();\n    }\n\n    return patientList;\n}", "path": "src\\org\\laika\\pixpdqadapter\\PixPdqApi.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "/**\n *\n * @param patient details of the patient\n * @param header\n * @throws org.openhealthexchange.openpixpdq.ihe.PixManagerException\n */\n", "func_signal": "public List<PatientIdentifier> createPatient(Patient patient, MessageHeader header) throws PixManagerException", "code": "{\n    insertPatientId(patient);\n\n    return null;\n}", "path": "src\\org\\laika\\pixpdqadapter\\PixManagerAdapter.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "/**\n *\n * @return an instance of the DBUtils class\n */\n", "func_signal": "public static DbUtils getInstance()", "code": "{\n    if( instance == null)\n        instance = new DbUtils();\n    return instance;\n}", "path": "src\\org\\laika\\pixpdqadapter\\utils\\DbUtils.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "/**\n * Converts from <code>PdqQuery</code> used for where clause\n *\n * @param query the <code>PdqQuery</code> object to be converted from\n * @return a Where clause <code>String</code>\n */\n", "func_signal": "private String getPersonClause(PdqQuery query)", "code": "{\n\n    StringBuilder retString = new StringBuilder();\n\n    // Person Name\n    getPersonName(query, retString);\n    // Gender\n    getSex(query, retString);\n    // Birth Date\n    getBirthDate(query, retString);\n    // Address\n    getAddress(query, retString);\n    // Telephone\n    getPhone(query, retString);\n    // PatientIdentifier\n    getPatientIdentifier(query, retString);\n\n    return retString.toString() + ORDER_BY;\n}", "path": "src\\org\\laika\\pixpdqadapter\\PdSupplierAdapter.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "/**\n * Accepts the patient id and identifier domain identifier and\n * returns a list of patient identifiers that exists for the corresponding patient.\n *\n * @param pid contains the patient identification details\n * @param header\n * @return a list of Patinet Ids\n * @throws org.openhealthexchange.openpixpdq.ihe.PixManagerException\n */\n", "func_signal": "public List<PatientIdentifier> findPatientIds(PatientIdentifier pid, MessageHeader header)\n        throws PixManagerException", "code": "{\n\n    List patientList = new ArrayList();\n\n    String sql = \"SELECT distinct patient_id \" + \"from patient_identifiers pi, test_plans vtp, patients pd \"\n\t\t\t+ \"where pd.id = pi.patient_id and pd.test_plan_id = vtp.id and vtp.type = 'PixQueryPlan' \"\n\t\t\t+ \"and affinity_domain in ('\" + pid.getAssigningAuthority().getAuthorityNameString() + \"', '\"\n\t\t\t+ pid.getAssigningAuthority().getNamespaceId() + \"', '&\" + pid.getAssigningAuthority().getUniversalId()\n\t\t\t+ \"&\" + pid.getAssigningAuthority().getUniversalIdType() + \"') and patient_identifier = '\"\n\t\t\t+ pid.getId() + \"'\";\n\n    log.log(Level.INFO, \"SQL to select patient id for patient: \" + sql);\n\n    int patientID = getPatientId(sql);\n\n    if (patientID != 0) {\n\n        ResultSet rsPatient = null;\n\n        try {\n            // select all patient identifiers and idi for the patient\n            sql = \"SELECT patient_identifier, affinity_domain \" + \"FROM patient_identifiers \"\n\t\t\t\t\t+ \"where patient_id = \" + patientID;\n\n            log.log(Level.INFO, \"SQL to select id and idi for found patient: \" + sql);\n\n            DbUtils.getInstance().openConnection();\n            rsPatient = DbUtils.getInstance().executeQuery(sql);\n\n            while (rsPatient.next()) {\n                log.log(Level.INFO, \"Patient ID : \" + rsPatient.getString(\"patient_identifier\") + \"; \"\n\t\t\t\t\t\t+ \"Patient IDI: \" + rsPatient.getString(\"affinity_domain\"));\n\n                String[] identHD = rsPatient.getString(\"affinity_domain\").split(\"&\");\n\n                Identifier identifier = null;\n\n                if (identHD.length == 3) {\n                    if (identHD[0].length() == 0) {\n                        identifier = new Identifier(null, identHD[1], identHD[2]);\n                    } else {\n                        identifier = new Identifier(identHD[0], identHD[1], identHD[2]);\n                    }\n                } else {\n                    identifier = new Identifier(identHD[0], \"\", \"\");\n                }\n\n                patientList.add(new PatientIdentifier(rsPatient.getString(\"patient_identifier\"),\n                        identifier));\n            }\n        } catch (SQLException ex) {\n            log.error(\"SQLException: \" + ex.getMessage());\n        } finally {\n            DbUtils.getInstance().closeConnection();\n        }\n    }\n\n    return patientList;\n}", "path": "src\\org\\laika\\pixpdqadapter\\PixManagerAdapter.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "// api to check if patient exists\n", "func_signal": "public String checkPatientExists(String idi, String id)", "code": "{\n\n    boolean patientFound = false;\n    PatientIdentifier pid = new PatientIdentifier(id, new Identifier(idi, \"\", \"\"));\n    PixManagerAdapter pma = new PixManagerAdapter();\n\n    try {\n        patientFound = pma.isValidPatient(pid, null);\n    } catch (PixManagerException ex) {\n        ex.printStackTrace();\n    }\n\n    if (patientFound) {\n        return \"Patient found\";\n    } else {\n        return \"Patient not found\";\n    }\n}", "path": "src\\org\\laika\\pixpdqadapter\\PixPdqApi.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "// get patient id\n", "func_signal": "private int getPatientId(String sql)", "code": "{\n\n    ResultSet rsPatient = null;\n    int patientId = 0;\n\n    DbUtils.getInstance().openConnection();\n    rsPatient =\n            DbUtils.getInstance().executeQuery(sql);\n    try {\n        while (rsPatient.next()) {\n            patientId = rsPatient.getInt(\"patient_id\");\n            log.log(Level.INFO, \"Found PatientId: \" + patientId);\n            break;\n\n        }\n    } catch (SQLException ex) {\n        log.error(\"SQLException: \" + ex.getMessage());\n    } finally {\n        DbUtils.getInstance().closeConnection();\n    }\n\n    return patientId;\n}", "path": "src\\org\\laika\\pixpdqadapter\\PixManagerAdapter.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "// \n/**\n *\n * @param str query to be executed\n * @return\n */\n", "func_signal": "public int executeUpdate(String str)", "code": "{\n    Statement stmt = null;\n    int res = 0;\n    try {\n\n        openConnection();\n\n        if (conn != null && (!conn.isClosed())) {\n            stmt = conn.createStatement();\n            res = stmt.executeUpdate(str);\n\n            closeConnection();\n        } else {\n            System.err.println(\"Invalid Connection\");\n        }\n    } catch (SQLException ex) {\n        log.error(\"SQLException: \" + ex.getMessage());\n    }\n    return res;\n}", "path": "src\\org\\laika\\pixpdqadapter\\utils\\DbUtils.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "/**\n *\n * @param str query to be executed\n * @return resultset\n */\n", "func_signal": "public ResultSet executeQuery(String str)", "code": "{\n    Statement stmt = null;\n    ResultSet res = null;\n\n    try {\n\n        if (conn != null && (!conn.isClosed())) {\n            stmt = conn.createStatement();\n            res = stmt.executeQuery(str);\n        } else {\n            System.err.println(\"Invalid Connection\");\n        }\n    } catch (SQLException ex) {\n        log.error(\"SQLException: \" + ex.getMessage());\n    }\n    return res;\n}", "path": "src\\org\\laika\\pixpdqadapter\\utils\\DbUtils.java", "repo_name": "citiustech/laika-pixpdq-adapter", "stars": 1, "license": "None", "language": "java", "size": 11400}
{"docstring": "// $ANTLR start \"predicate_formula\"\n// src/Kodkodi.g:1254:1: predicate_formula returns [Object node] : (a= ACYCLIC PAREN_LEFT n= RELATION_NAME PAREN_RIGHT | f= FUNCTION PAREN_LEFT n= RELATION_NAME c= COMMA e1= expr ARROW t= ( ONE | LONE ) e2= expr PAREN_RIGHT | t= TOTAL_ORDERING PAREN_LEFT n1= RELATION_NAME COMMA n2= ( UNIV_NAME | OFFSET_UNIV_NAME | RELATION_NAME ) COMMA n3= ( ATOM_NAME | RELATION_NAME ) COMMA n4= ( ATOM_NAME | RELATION_NAME ) PAREN_RIGHT );\n", "func_signal": "public final Object predicate_formula() throws RecognitionException", "code": "{\n    Object node = null;\n\n    Token a=null;\n    Token n=null;\n    Token f=null;\n    Token c=null;\n    Token t=null;\n    Token n1=null;\n    Token n2=null;\n    Token n3=null;\n    Token n4=null;\n    Object e1 = null;\n\n    Object e2 = null;\n\n\n    try {\n        // src/Kodkodi.g:1254:40: (a= ACYCLIC PAREN_LEFT n= RELATION_NAME PAREN_RIGHT | f= FUNCTION PAREN_LEFT n= RELATION_NAME c= COMMA e1= expr ARROW t= ( ONE | LONE ) e2= expr PAREN_RIGHT | t= TOTAL_ORDERING PAREN_LEFT n1= RELATION_NAME COMMA n2= ( UNIV_NAME | OFFSET_UNIV_NAME | RELATION_NAME ) COMMA n3= ( ATOM_NAME | RELATION_NAME ) COMMA n4= ( ATOM_NAME | RELATION_NAME ) PAREN_RIGHT )\n        int alt36=3;\n        switch ( input.LA(1) ) {\n        case ACYCLIC:\n            {\n            alt36=1;\n            }\n            break;\n        case FUNCTION:\n            {\n            alt36=2;\n            }\n            break;\n        case TOTAL_ORDERING:\n            {\n            alt36=3;\n            }\n            break;\n        default:\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 36, 0, input);\n\n            throw nvae;\n        }\n\n        switch (alt36) {\n            case 1 :\n                // src/Kodkodi.g:1255:9: a= ACYCLIC PAREN_LEFT n= RELATION_NAME PAREN_RIGHT\n                {\n                a=(Token)match(input,ACYCLIC,FOLLOW_ACYCLIC_in_predicate_formula2003); \n                match(input,PAREN_LEFT,FOLLOW_PAREN_LEFT_in_predicate_formula2005); \n                n=(Token)match(input,RELATION_NAME,FOLLOW_RELATION_NAME_in_predicate_formula2011); \n                match(input,PAREN_RIGHT,FOLLOW_PAREN_RIGHT_in_predicate_formula2013); \n\n                            try {\n                                node = getRelation(n).acyclic();\n                            } catch (IllegalArgumentException except) {\n                                huh(a, \"invalid arity\");\n                            }\n                        \n\n                }\n                break;\n            case 2 :\n                // src/Kodkodi.g:1262:9: f= FUNCTION PAREN_LEFT n= RELATION_NAME c= COMMA e1= expr ARROW t= ( ONE | LONE ) e2= expr PAREN_RIGHT\n                {\n                f=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_predicate_formula2031); \n                match(input,PAREN_LEFT,FOLLOW_PAREN_LEFT_in_predicate_formula2033); \n                n=(Token)match(input,RELATION_NAME,FOLLOW_RELATION_NAME_in_predicate_formula2039); \n                c=(Token)match(input,COMMA,FOLLOW_COMMA_in_predicate_formula2045); \n                pushFollow(FOLLOW_expr_in_predicate_formula2051);\n                e1=expr();\n\n                state._fsp--;\n\n                match(input,ARROW,FOLLOW_ARROW_in_predicate_formula2053); \n                t=(Token)input.LT(1);\n                if ( (input.LA(1)>=ONE && input.LA(1)<=LONE) ) {\n                    input.consume();\n                    state.errorRecovery=false;\n                }\n                else {\n                    MismatchedSetException mse = new MismatchedSetException(null,input);\n                    throw mse;\n                }\n\n                pushFollow(FOLLOW_expr_in_predicate_formula2079);\n                e2=expr();\n\n                state._fsp--;\n\n                match(input,PAREN_RIGHT,FOLLOW_PAREN_RIGHT_in_predicate_formula2081); \n\n                            try {\n                                Relation relation = getRelation(n);\n                                node = ((t!=null?t.getType():0) == ONE\n                                             ? relation.function(E(c, e1),\n                                                                 E(t, e2))\n                                             : relation.partialFunction(E(c, e1),\n                                                                        E(t, e2)));\n                            } catch (IllegalArgumentException except) {\n                                huh(f, \"invalid arity\");\n                            }\n                        \n\n                }\n                break;\n            case 3 :\n                // src/Kodkodi.g:1275:9: t= TOTAL_ORDERING PAREN_LEFT n1= RELATION_NAME COMMA n2= ( UNIV_NAME | OFFSET_UNIV_NAME | RELATION_NAME ) COMMA n3= ( ATOM_NAME | RELATION_NAME ) COMMA n4= ( ATOM_NAME | RELATION_NAME ) PAREN_RIGHT\n                {\n                t=(Token)match(input,TOTAL_ORDERING,FOLLOW_TOTAL_ORDERING_in_predicate_formula2099); \n                match(input,PAREN_LEFT,FOLLOW_PAREN_LEFT_in_predicate_formula2101); \n                n1=(Token)match(input,RELATION_NAME,FOLLOW_RELATION_NAME_in_predicate_formula2107); \n                match(input,COMMA,FOLLOW_COMMA_in_predicate_formula2109); \n                n2=(Token)input.LT(1);\n                if ( input.LA(1)==UNIV_NAME||input.LA(1)==RELATION_NAME||input.LA(1)==OFFSET_UNIV_NAME ) {\n                    input.consume();\n                    state.errorRecovery=false;\n                }\n                else {\n                    MismatchedSetException mse = new MismatchedSetException(null,input);\n                    throw mse;\n                }\n\n                match(input,COMMA,FOLLOW_COMMA_in_predicate_formula2135); \n                n3=(Token)input.LT(1);\n                if ( input.LA(1)==RELATION_NAME||input.LA(1)==ATOM_NAME ) {\n                    input.consume();\n                    state.errorRecovery=false;\n                }\n                else {\n                    MismatchedSetException mse = new MismatchedSetException(null,input);\n                    throw mse;\n                }\n\n                match(input,COMMA,FOLLOW_COMMA_in_predicate_formula2157); \n                n4=(Token)input.LT(1);\n                if ( input.LA(1)==RELATION_NAME||input.LA(1)==ATOM_NAME ) {\n                    input.consume();\n                    state.errorRecovery=false;\n                }\n                else {\n                    MismatchedSetException mse = new MismatchedSetException(null,input);\n                    throw mse;\n                }\n\n                match(input,PAREN_RIGHT,FOLLOW_PAREN_RIGHT_in_predicate_formula2179); \n\n                            try {\n                                node = getRelation(n1).totalOrder(getRelation(n2),\n                                                                    getRelation(n3),\n                                                                    getRelation(n4));\n                            } catch (IllegalArgumentException except) {\n                                huh(t, \"invalid arity\");\n                            }\n                        \n\n                }\n                break;\n\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return node;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"iff_formula\"\n// src/Kodkodi.g:1178:1: iff_formula returns [Object node] : e1= implies_formula (i= IFF e2= implies_formula )* ;\n", "func_signal": "public final Object iff_formula() throws RecognitionException", "code": "{\n    Object node = null;\n\n    Token i=null;\n    Object e1 = null;\n\n    Object e2 = null;\n\n\n    try {\n        // src/Kodkodi.g:1178:34: (e1= implies_formula (i= IFF e2= implies_formula )* )\n        // src/Kodkodi.g:1179:9: e1= implies_formula (i= IFF e2= implies_formula )*\n        {\n        pushFollow(FOLLOW_implies_formula_in_iff_formula1645);\n        e1=implies_formula();\n\n        state._fsp--;\n\n         node = e1; \n        // src/Kodkodi.g:1180:9: (i= IFF e2= implies_formula )*\n        loop30:\n        do {\n            int alt30=2;\n            int LA30_0 = input.LA(1);\n\n            if ( (LA30_0==IFF) ) {\n                alt30=1;\n            }\n\n\n            switch (alt30) {\n        \tcase 1 :\n        \t    // src/Kodkodi.g:1180:10: i= IFF e2= implies_formula\n        \t    {\n        \t    i=(Token)match(input,IFF,FOLLOW_IFF_in_iff_formula1662); \n        \t    pushFollow(FOLLOW_implies_formula_in_iff_formula1668);\n        \t    e2=implies_formula();\n\n        \t    state._fsp--;\n\n\n        \t                 node = F(i, node).iff(F(i, e2));\n        \t             \n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop30;\n            }\n        } while (true);\n\n\n        }\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return node;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"intersect_tuple_set\"\n// src/Kodkodi.g:1001:1: intersect_tuple_set[int arity] returns [TupleSet value] : s1= product_tuple_set[$arity] (a= AND s2= product_tuple_set[$arity] )* ;\n", "func_signal": "public final TupleSet intersect_tuple_set(int arity) throws RecognitionException", "code": "{\n    TupleSet value = null;\n\n    Token a=null;\n    TupleSet s1 = null;\n\n    TupleSet s2 = null;\n\n\n    try {\n        // src/Kodkodi.g:1001:56: (s1= product_tuple_set[$arity] (a= AND s2= product_tuple_set[$arity] )* )\n        // src/Kodkodi.g:1002:9: s1= product_tuple_set[$arity] (a= AND s2= product_tuple_set[$arity] )*\n        {\n        pushFollow(FOLLOW_product_tuple_set_in_intersect_tuple_set842);\n        s1=product_tuple_set(arity);\n\n        state._fsp--;\n\n         value = s1; \n        // src/Kodkodi.g:1003:9: (a= AND s2= product_tuple_set[$arity] )*\n        loop18:\n        do {\n            int alt18=2;\n            int LA18_0 = input.LA(1);\n\n            if ( (LA18_0==AND) ) {\n                alt18=1;\n            }\n\n\n            switch (alt18) {\n        \tcase 1 :\n        \t    // src/Kodkodi.g:1003:10: a= AND s2= product_tuple_set[$arity]\n        \t    {\n        \t    a=(Token)match(input,AND,FOLLOW_AND_in_intersect_tuple_set860); \n        \t    pushFollow(FOLLOW_product_tuple_set_in_intersect_tuple_set866);\n        \t    s2=product_tuple_set(arity);\n\n        \t    state._fsp--;\n\n\n        \t                 try {\n        \t                     value.retainAll(s2);\n        \t                 } catch (IllegalArgumentException except) {\n        \t                      huh(a, \"illegal tuple set: \" + fixedMessage(except));\n        \t                 }\n        \t             \n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop18;\n            }\n        } while (true);\n\n\n        }\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return value;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"assign\"\n// src/Kodkodi.g:1539:1: assign[Vector<Token> tokens, Vector<Node> oldNodes, Vector<Node> newNodes] : (r= FORMULA_REG c= COLON_EQ e= expr | r= REL_EXPR_REG c= COLON_EQ e= expr | r= INT_EXPR_REG c= COLON_EQ e= expr );\n", "func_signal": "public final void assign(Vector<Token> tokens, Vector<Node> oldNodes, Vector<Node> newNodes) throws RecognitionException", "code": "{\n    Token r=null;\n    Token c=null;\n    Object e = null;\n\n\n    try {\n        // src/Kodkodi.g:1539:75: (r= FORMULA_REG c= COLON_EQ e= expr | r= REL_EXPR_REG c= COLON_EQ e= expr | r= INT_EXPR_REG c= COLON_EQ e= expr )\n        int alt54=3;\n        switch ( input.LA(1) ) {\n        case FORMULA_REG:\n            {\n            alt54=1;\n            }\n            break;\n        case REL_EXPR_REG:\n            {\n            alt54=2;\n            }\n            break;\n        case INT_EXPR_REG:\n            {\n            alt54=3;\n            }\n            break;\n        default:\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 54, 0, input);\n\n            throw nvae;\n        }\n\n        switch (alt54) {\n            case 1 :\n                // src/Kodkodi.g:1540:9: r= FORMULA_REG c= COLON_EQ e= expr\n                {\n                r=(Token)match(input,FORMULA_REG,FOLLOW_FORMULA_REG_in_assign3291); \n                c=(Token)match(input,COLON_EQ,FOLLOW_COLON_EQ_in_assign3297); \n                pushFollow(FOLLOW_expr_in_assign3303);\n                e=expr();\n\n                state._fsp--;\n\n\n                            int id = id((r!=null?r.getText():null));\n                            tokens.add(r);\n                            oldNodes.add(id < formulas.size() ? formulas.elementAt(id) : null);\n                            newNodes.add(F(c, e));\n                        \n\n                }\n                break;\n            case 2 :\n                // src/Kodkodi.g:1546:9: r= REL_EXPR_REG c= COLON_EQ e= expr\n                {\n                r=(Token)match(input,REL_EXPR_REG,FOLLOW_REL_EXPR_REG_in_assign3321); \n                c=(Token)match(input,COLON_EQ,FOLLOW_COLON_EQ_in_assign3327); \n                pushFollow(FOLLOW_expr_in_assign3333);\n                e=expr();\n\n                state._fsp--;\n\n\n                            int id = id((r!=null?r.getText():null));\n                            tokens.add(r);\n                            oldNodes.add(id < exprs.size() ? exprs.elementAt(id) : null);\n                            newNodes.add(E(c, e));\n                        \n\n                }\n                break;\n            case 3 :\n                // src/Kodkodi.g:1552:9: r= INT_EXPR_REG c= COLON_EQ e= expr\n                {\n                r=(Token)match(input,INT_EXPR_REG,FOLLOW_INT_EXPR_REG_in_assign3351); \n                c=(Token)match(input,COLON_EQ,FOLLOW_COLON_EQ_in_assign3357); \n                pushFollow(FOLLOW_expr_in_assign3363);\n                e=expr();\n\n                state._fsp--;\n\n\n                            int id = id((r!=null?r.getText():null));\n                            tokens.add(r);\n                            oldNodes.add(id < intExprs.size() ? intExprs.elementAt(id) : null);\n                            newNodes.add(I(c, e));\n                        \n\n                }\n                break;\n\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return ;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"assigns\"\n// src/Kodkodi.g:1531:1: assigns returns [Vector<Token> tokens = new Vector<Token>(),\\n Vector<Node> oldNodes = new Vector<Node>(),\\n Vector<Node> newNodes = new Vector<Node>()] : BRACKET_LEFT assign[$tokens, $oldNodes, $newNodes] ( COMMA assign[$tokens, $oldNodes, $newNodes] )* BRACKET_RIGHT ;\n", "func_signal": "public final KodkodiParser.assigns_return assigns() throws RecognitionException", "code": "{\n    KodkodiParser.assigns_return retval = new KodkodiParser.assigns_return();\n    retval.start = input.LT(1);\n\n    try {\n        // src/Kodkodi.g:1533:61: ( BRACKET_LEFT assign[$tokens, $oldNodes, $newNodes] ( COMMA assign[$tokens, $oldNodes, $newNodes] )* BRACKET_RIGHT )\n        // src/Kodkodi.g:1534:9: BRACKET_LEFT assign[$tokens, $oldNodes, $newNodes] ( COMMA assign[$tokens, $oldNodes, $newNodes] )* BRACKET_RIGHT\n        {\n        match(input,BRACKET_LEFT,FOLLOW_BRACKET_LEFT_in_assigns3249); \n        pushFollow(FOLLOW_assign_in_assigns3251);\n        assign(retval.tokens, retval.oldNodes, retval.newNodes);\n\n        state._fsp--;\n\n        // src/Kodkodi.g:1535:9: ( COMMA assign[$tokens, $oldNodes, $newNodes] )*\n        loop53:\n        do {\n            int alt53=2;\n            int LA53_0 = input.LA(1);\n\n            if ( (LA53_0==COMMA) ) {\n                alt53=1;\n            }\n\n\n            switch (alt53) {\n        \tcase 1 :\n        \t    // src/Kodkodi.g:1535:10: COMMA assign[$tokens, $oldNodes, $newNodes]\n        \t    {\n        \t    match(input,COMMA,FOLLOW_COMMA_in_assigns3263); \n        \t    pushFollow(FOLLOW_assign_in_assigns3265);\n        \t    assign(retval.tokens, retval.oldNodes, retval.newNodes);\n\n        \t    state._fsp--;\n\n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop53;\n            }\n        } while (true);\n\n        match(input,BRACKET_RIGHT,FOLLOW_BRACKET_RIGHT_in_assigns3270); \n\n                    for (int i = 0; i < retval.tokens.size(); ++i)\n                        setReg(retval.tokens.elementAt(i), retval.newNodes.elementAt(i));\n                \n\n        }\n\n        retval.stop = input.LT(-1);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return retval;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"product_expr\"\n// src/Kodkodi.g:1389:1: product_expr returns [Object node] : e1= ifno_expr (a= ARROW es= product_expr_tail[$a,\\n new SingletonArrayList<Expression>(E($a, $node))] )? ;\n", "func_signal": "public final Object product_expr() throws RecognitionException", "code": "{\n    Object node = null;\n\n    Token a=null;\n    Object e1 = null;\n\n    Object es = null;\n\n\n    try {\n        // src/Kodkodi.g:1389:35: (e1= ifno_expr (a= ARROW es= product_expr_tail[$a,\\n new SingletonArrayList<Expression>(E($a, $node))] )? )\n        // src/Kodkodi.g:1390:9: e1= ifno_expr (a= ARROW es= product_expr_tail[$a,\\n new SingletonArrayList<Expression>(E($a, $node))] )?\n        {\n        pushFollow(FOLLOW_ifno_expr_in_product_expr2486);\n        e1=ifno_expr();\n\n        state._fsp--;\n\n         node = e1; \n        // src/Kodkodi.g:1391:9: (a= ARROW es= product_expr_tail[$a,\\n new SingletonArrayList<Expression>(E($a, $node))] )?\n        int alt43=2;\n        int LA43_0 = input.LA(1);\n\n        if ( (LA43_0==ARROW) ) {\n            int LA43_1 = input.LA(2);\n\n            if ( (LA43_1==NUM||(LA43_1>=TRUE && LA43_1<=UNIV_NAME)||LA43_1==RELATION_NAME||(LA43_1>=FORMULA_REG && LA43_1<=INT_EXPR_REG)||LA43_1==MINUS||(LA43_1>=OFFSET_UNIV_NAME && LA43_1<=PAREN_LEFT)||LA43_1==BRACE_LEFT||LA43_1==NONE||LA43_1==ATOM_NAME||LA43_1==STAR||LA43_1==HAT||(LA43_1>=VARIABLE_NAME && LA43_1<=INT)) ) {\n                alt43=1;\n            }\n        }\n        switch (alt43) {\n            case 1 :\n                // src/Kodkodi.g:1391:10: a= ARROW es= product_expr_tail[$a,\\n new SingletonArrayList<Expression>(E($a, $node))]\n                {\n                a=(Token)match(input,ARROW,FOLLOW_ARROW_in_product_expr2503); \n                pushFollow(FOLLOW_product_expr_tail_in_product_expr2509);\n                es=product_expr_tail(a, new SingletonArrayList<Expression>(E(a, node)));\n\n                state._fsp--;\n\n                 node = es; \n\n                }\n                break;\n\n        }\n\n\n        }\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return node;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"tuple_set_seq\"\n// src/Kodkodi.g:980:1: tuple_set_seq[int arity] returns [Token token, List<TupleSet> value = new ArrayList<TupleSet>()] : b= BRACKET_LEFT (s1= tuple_set[$arity] ( COMMA s2= tuple_set[$arity] )* )? BRACKET_RIGHT ;\n", "func_signal": "public final KodkodiParser.tuple_set_seq_return tuple_set_seq(int arity) throws RecognitionException", "code": "{\n    KodkodiParser.tuple_set_seq_return retval = new KodkodiParser.tuple_set_seq_return();\n    retval.start = input.LT(1);\n\n    Token b=null;\n    TupleSet s1 = null;\n\n    TupleSet s2 = null;\n\n\n    try {\n        // src/Kodkodi.g:981:77: (b= BRACKET_LEFT (s1= tuple_set[$arity] ( COMMA s2= tuple_set[$arity] )* )? BRACKET_RIGHT )\n        // src/Kodkodi.g:982:9: b= BRACKET_LEFT (s1= tuple_set[$arity] ( COMMA s2= tuple_set[$arity] )* )? BRACKET_RIGHT\n        {\n        b=(Token)match(input,BRACKET_LEFT,FOLLOW_BRACKET_LEFT_in_tuple_set_seq725); \n        // src/Kodkodi.g:982:26: (s1= tuple_set[$arity] ( COMMA s2= tuple_set[$arity] )* )?\n        int alt16=2;\n        int LA16_0 = input.LA(1);\n\n        if ( ((LA16_0>=UNIV_NAME && LA16_0<=TUPLE_SET_REG)||(LA16_0>=OFFSET_UNIV_NAME && LA16_0<=PAREN_LEFT)||LA16_0==BRACE_LEFT||(LA16_0>=NONE && LA16_0<=ALL)) ) {\n            alt16=1;\n        }\n        switch (alt16) {\n            case 1 :\n                // src/Kodkodi.g:982:27: s1= tuple_set[$arity] ( COMMA s2= tuple_set[$arity] )*\n                {\n                pushFollow(FOLLOW_tuple_set_in_tuple_set_seq732);\n                s1=tuple_set(arity);\n\n                state._fsp--;\n\n\n                            retval.token = b;\n                            retval.value.add(s1);\n                        \n                // src/Kodkodi.g:985:11: ( COMMA s2= tuple_set[$arity] )*\n                loop15:\n                do {\n                    int alt15=2;\n                    int LA15_0 = input.LA(1);\n\n                    if ( (LA15_0==COMMA) ) {\n                        alt15=1;\n                    }\n\n\n                    switch (alt15) {\n                \tcase 1 :\n                \t    // src/Kodkodi.g:985:12: COMMA s2= tuple_set[$arity]\n                \t    {\n                \t    match(input,COMMA,FOLLOW_COMMA_in_tuple_set_seq738); \n                \t    pushFollow(FOLLOW_tuple_set_in_tuple_set_seq744);\n                \t    s2=tuple_set(arity);\n\n                \t    state._fsp--;\n\n                \t     retval.value.add(s2); \n\n                \t    }\n                \t    break;\n\n                \tdefault :\n                \t    break loop15;\n                    }\n                } while (true);\n\n\n                }\n                break;\n\n        }\n\n        match(input,BRACKET_RIGHT,FOLLOW_BRACKET_RIGHT_in_tuple_set_seq760); \n\n        }\n\n        retval.stop = input.LT(-1);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return retval;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"or_formula_tail\"\n// src/Kodkodi.g:1174:1: or_formula_tail[Token token, List<Formula> formulas] returns [Object node] : e1= iff_formula ( OR es= or_formula_tail[$token, $formulas] | ) ;\n", "func_signal": "public final Object or_formula_tail(Token token, List<Formula> formulas) throws RecognitionException", "code": "{\n    Object node = null;\n\n    Object e1 = null;\n\n    Object es = null;\n\n\n    try {\n        // src/Kodkodi.g:1174:75: (e1= iff_formula ( OR es= or_formula_tail[$token, $formulas] | ) )\n        // src/Kodkodi.g:1175:9: e1= iff_formula ( OR es= or_formula_tail[$token, $formulas] | )\n        {\n        pushFollow(FOLLOW_iff_formula_in_or_formula_tail1587);\n        e1=iff_formula();\n\n        state._fsp--;\n\n         formulas.add(F(token, e1)); \n        // src/Kodkodi.g:1176:9: ( OR es= or_formula_tail[$token, $formulas] | )\n        int alt29=2;\n        int LA29_0 = input.LA(1);\n\n        if ( (LA29_0==OR) ) {\n            alt29=1;\n        }\n        else if ( (LA29_0==COMMA||LA29_0==BRACKET_RIGHT||(LA29_0>=FORMULA_REG && LA29_0<=SEMICOLON)||LA29_0==ARROW||LA29_0==PAREN_RIGHT||LA29_0==BRACE_RIGHT||(LA29_0>=THEN && LA29_0<=ELSE)) ) {\n            alt29=2;\n        }\n        else {\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 29, 0, input);\n\n            throw nvae;\n        }\n        switch (alt29) {\n            case 1 :\n                // src/Kodkodi.g:1176:10: OR es= or_formula_tail[$token, $formulas]\n                {\n                match(input,OR,FOLLOW_OR_in_or_formula_tail1600); \n                pushFollow(FOLLOW_or_formula_tail_in_or_formula_tail1606);\n                es=or_formula_tail(token, formulas);\n\n                state._fsp--;\n\n                 node = es; \n\n                }\n                break;\n            case 2 :\n                // src/Kodkodi.g:1177:10: \n                {\n                 node = Formula.or(formulas); \n\n                }\n                break;\n\n        }\n\n\n        }\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return node;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"mult_expr\"\n// src/Kodkodi.g:1328:1: mult_expr returns [Object node] : e1= expr_to_int_cast (t= ( STAR | DIVIDE | MODULO ) e2= expr_to_int_cast )* ;\n", "func_signal": "public final Object mult_expr() throws RecognitionException", "code": "{\n    Object node = null;\n\n    Token t=null;\n    Object e1 = null;\n\n    Object e2 = null;\n\n\n    try {\n        // src/Kodkodi.g:1328:32: (e1= expr_to_int_cast (t= ( STAR | DIVIDE | MODULO ) e2= expr_to_int_cast )* )\n        // src/Kodkodi.g:1329:9: e1= expr_to_int_cast (t= ( STAR | DIVIDE | MODULO ) e2= expr_to_int_cast )*\n        {\n        pushFollow(FOLLOW_expr_to_int_cast_in_mult_expr2317);\n        e1=expr_to_int_cast();\n\n        state._fsp--;\n\n         node = e1; \n        // src/Kodkodi.g:1330:9: (t= ( STAR | DIVIDE | MODULO ) e2= expr_to_int_cast )*\n        loop39:\n        do {\n            int alt39=2;\n            int LA39_0 = input.LA(1);\n\n            if ( ((LA39_0>=STAR && LA39_0<=MODULO)) ) {\n                alt39=1;\n            }\n\n\n            switch (alt39) {\n        \tcase 1 :\n        \t    // src/Kodkodi.g:1330:10: t= ( STAR | DIVIDE | MODULO ) e2= expr_to_int_cast\n        \t    {\n        \t    t=(Token)input.LT(1);\n        \t    if ( (input.LA(1)>=STAR && input.LA(1)<=MODULO) ) {\n        \t        input.consume();\n        \t        state.errorRecovery=false;\n        \t    }\n        \t    else {\n        \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n        \t        throw mse;\n        \t    }\n\n        \t    pushFollow(FOLLOW_expr_to_int_cast_in_mult_expr2350);\n        \t    e2=expr_to_int_cast();\n\n        \t    state._fsp--;\n\n\n        \t                 node = I(t, node).compose(\n        \t                                 (t!=null?t.getType():0) == STAR\n        \t                                     ? IntOperator.MULTIPLY\n        \t                               : (t!=null?t.getType():0) == DIVIDE\n        \t                                     ? IntOperator.DIVIDE\n        \t                                     : IntOperator.MODULO,\n        \t                                 I(t, e2));\n        \t             \n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop39;\n            }\n        } while (true);\n\n\n        }\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return node;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"shift_expr\"\n// src/Kodkodi.g:1287:1: shift_expr returns [Object node] : e1= add_expr (t= ( SHL | SHA | SHR ) e2= add_expr )* ;\n", "func_signal": "public final Object shift_expr() throws RecognitionException", "code": "{\n    Object node = null;\n\n    Token t=null;\n    Object e1 = null;\n\n    Object e2 = null;\n\n\n    try {\n        // src/Kodkodi.g:1287:33: (e1= add_expr (t= ( SHL | SHA | SHR ) e2= add_expr )* )\n        // src/Kodkodi.g:1288:9: e1= add_expr (t= ( SHL | SHA | SHR ) e2= add_expr )*\n        {\n        pushFollow(FOLLOW_add_expr_in_shift_expr2203);\n        e1=add_expr();\n\n        state._fsp--;\n\n         node = e1; \n        // src/Kodkodi.g:1289:9: (t= ( SHL | SHA | SHR ) e2= add_expr )*\n        loop37:\n        do {\n            int alt37=2;\n            int LA37_0 = input.LA(1);\n\n            if ( ((LA37_0>=SHL && LA37_0<=SHR)) ) {\n                alt37=1;\n            }\n\n\n            switch (alt37) {\n        \tcase 1 :\n        \t    // src/Kodkodi.g:1289:10: t= ( SHL | SHA | SHR ) e2= add_expr\n        \t    {\n        \t    t=(Token)input.LT(1);\n        \t    if ( (input.LA(1)>=SHL && input.LA(1)<=SHR) ) {\n        \t        input.consume();\n        \t        state.errorRecovery=false;\n        \t    }\n        \t    else {\n        \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n        \t        throw mse;\n        \t    }\n\n        \t    pushFollow(FOLLOW_add_expr_in_shift_expr2236);\n        \t    e2=add_expr();\n\n        \t    state._fsp--;\n\n\n        \t                 node = I(t, node).compose(\n        \t                                     (t!=null?t.getType():0) == SHL\n        \t                                         ? IntOperator.SHL\n        \t                                   : (t!=null?t.getType():0) == SHA\n        \t                                         ? IntOperator.SHA\n        \t                                         : IntOperator.SHR,\n        \t                                     I(t, e2));\n        \t             \n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop37;\n            }\n        } while (true);\n\n\n        }\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return node;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"project_columns\"\n// src/Kodkodi.g:1578:1: project_columns returns [Token token,\\n Vector<IntExpression> nodes = new Vector<IntExpression>()] : t= BRACKET_LEFT e1= expr (c= COMMA e2= expr )* BRACKET_RIGHT ;\n", "func_signal": "public final KodkodiParser.project_columns_return project_columns() throws RecognitionException", "code": "{\n    KodkodiParser.project_columns_return retval = new KodkodiParser.project_columns_return();\n    retval.start = input.LT(1);\n\n    Token t=null;\n    Token c=null;\n    Object e1 = null;\n\n    Object e2 = null;\n\n\n    try {\n        // src/Kodkodi.g:1580:75: (t= BRACKET_LEFT e1= expr (c= COMMA e2= expr )* BRACKET_RIGHT )\n        // src/Kodkodi.g:1581:9: t= BRACKET_LEFT e1= expr (c= COMMA e2= expr )* BRACKET_RIGHT\n        {\n        t=(Token)match(input,BRACKET_LEFT,FOLLOW_BRACKET_LEFT_in_project_columns3436); \n        pushFollow(FOLLOW_expr_in_project_columns3442);\n        e1=expr();\n\n        state._fsp--;\n\n\n                    retval.token = t;\n                    retval.nodes.add(I(t, e1));\n                \n        // src/Kodkodi.g:1584:11: (c= COMMA e2= expr )*\n        loop55:\n        do {\n            int alt55=2;\n            int LA55_0 = input.LA(1);\n\n            if ( (LA55_0==COMMA) ) {\n                alt55=1;\n            }\n\n\n            switch (alt55) {\n        \tcase 1 :\n        \t    // src/Kodkodi.g:1584:12: c= COMMA e2= expr\n        \t    {\n        \t    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_project_columns3451); \n        \t    pushFollow(FOLLOW_expr_in_project_columns3457);\n        \t    e2=expr();\n\n        \t    state._fsp--;\n\n        \t     retval.nodes.add(I(c, e2)); \n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop55;\n            }\n        } while (true);\n\n        match(input,BRACKET_RIGHT,FOLLOW_BRACKET_RIGHT_in_project_columns3471); \n\n        }\n\n        retval.stop = input.LT(-1);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return retval;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"option\"\n// src/Kodkodi.g:774:1: option returns [Vector<String> strs = new Vector<String>()] : ( SOLVER COLON s1= STR_LITERAL ( COMMA s2= STR_LITERAL )* | SYMMETRY_BREAKING COLON k= NUM | SHARING COLON k= NUM | BIT_WIDTH COLON k= NUM | SKOLEM_DEPTH COLON k= NUM | FLATTEN COLON t= ( TRUE | FALSE ) );\n", "func_signal": "public final Vector<String> option() throws RecognitionException", "code": "{\n    Vector<String> strs =  new Vector<String>();\n\n    Token s1=null;\n    Token s2=null;\n    Token k=null;\n    Token t=null;\n\n    try {\n        // src/Kodkodi.g:774:60: ( SOLVER COLON s1= STR_LITERAL ( COMMA s2= STR_LITERAL )* | SYMMETRY_BREAKING COLON k= NUM | SHARING COLON k= NUM | BIT_WIDTH COLON k= NUM | SKOLEM_DEPTH COLON k= NUM | FLATTEN COLON t= ( TRUE | FALSE ) )\n        int alt8=6;\n        switch ( input.LA(1) ) {\n        case SOLVER:\n            {\n            alt8=1;\n            }\n            break;\n        case SYMMETRY_BREAKING:\n            {\n            alt8=2;\n            }\n            break;\n        case SHARING:\n            {\n            alt8=3;\n            }\n            break;\n        case BIT_WIDTH:\n            {\n            alt8=4;\n            }\n            break;\n        case SKOLEM_DEPTH:\n            {\n            alt8=5;\n            }\n            break;\n        case FLATTEN:\n            {\n            alt8=6;\n            }\n            break;\n        default:\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 8, 0, input);\n\n            throw nvae;\n        }\n\n        switch (alt8) {\n            case 1 :\n                // src/Kodkodi.g:775:9: SOLVER COLON s1= STR_LITERAL ( COMMA s2= STR_LITERAL )*\n                {\n                match(input,SOLVER,FOLLOW_SOLVER_in_option166); \n                match(input,COLON,FOLLOW_COLON_in_option168); \n                s1=(Token)match(input,STR_LITERAL,FOLLOW_STR_LITERAL_in_option174); \n                 strs.add(sstr(s1)); \n                // src/Kodkodi.g:776:9: ( COMMA s2= STR_LITERAL )*\n                loop7:\n                do {\n                    int alt7=2;\n                    int LA7_0 = input.LA(1);\n\n                    if ( (LA7_0==COMMA) ) {\n                        alt7=1;\n                    }\n\n\n                    switch (alt7) {\n                \tcase 1 :\n                \t    // src/Kodkodi.g:776:10: COMMA s2= STR_LITERAL\n                \t    {\n                \t    match(input,COMMA,FOLLOW_COMMA_in_option187); \n                \t    s2=(Token)match(input,STR_LITERAL,FOLLOW_STR_LITERAL_in_option193); \n                \t     strs.add(sstr(s2)); \n\n                \t    }\n                \t    break;\n\n                \tdefault :\n                \t    break loop7;\n                    }\n                } while (true);\n\n\n                            int expected = 1;\n                            SATFactory solver = null;\n                            if (strs.elementAt(0).equals(\"DefaultSAT4J\")) {\n                                solver = SATFactory.DefaultSAT4J;\n                            } else if (strs.elementAt(0).equals(\"LightSAT4J\")) {\n                                solver = SATFactory.LightSAT4J;\n                            } else if (strs.elementAt(0).equals(\"ZChaff\")\n                                       || strs.elementAt(0).equals(\"zChaff\")) {\n                                solver = SATFactory.ZChaff;\n                            } else if (strs.elementAt(0).equals(\"ZChaffMincost\")\n                                       || strs.elementAt(0).equals(\"zChaffMincost\")) {\n                                solver = SATFactory.ZChaffMincost;\n                            } else if (strs.elementAt(0).equals(\"MiniSatProver\")) {\n                                solver = SATFactory.MiniSatProver;\n                            } else if (strs.elementAt(0).equals(\"MiniSat\")) {\n                                solver = SATFactory.MiniSat;\n                            } else if (strs.elementAt(0).equals(\"MiniSat.all\")) {\n                                solver = SATFactory.MiniSat;\n\t\t\t\t    solveAll = true;\n                            } else if (strs.elementAt(0).equals(\"SAT4J\")) {\n                                expected = 2;\n                                if (strs.size() >= 2)\n                                    solver = SATFactory.sat4jFactory(strs.elementAt(1));\n                            } else if (strs.elementAt(0).equals(\"External\")) {\n                                expected = 4;\n                                if (strs.size() >= expected) {\n                                    String[] args = new String[strs.size() - expected];\n                                    for (int i = expected; i < strs.size(); ++i)\n                                        args[i - expected] = strs.elementAt(i);\n                                    solver = SATFactory.externalFactory(strs.elementAt(1),\n                                                                        strs.elementAt(2),\n                                                                        strs.elementAt(3),\n                                                                        args);\n                                }\n                            } else if (strs.elementAt(0).equals(\"ExternalV2\")) {\n                                expected = 7;\n                                if (strs.size() >= expected) {\n                                    String[] args = new String[strs.size() - expected];\n                                    for (int i = expected; i < strs.size(); ++i)\n                                        args[i - expected] = strs.elementAt(i);\n                                    solver = ExternalSolverV2.satFactory(strs.elementAt(1),\n                                                                         strs.elementAt(2),\n                                                                         strs.elementAt(3),\n                                                                         strs.elementAt(4),\n                                                                         strs.elementAt(5),\n                                                                         strs.elementAt(6),\n                                                                         args);\n                                }\n                            }\n                            if (solver != null) {\n                                options.setSolver(solver);\n                            } else {\n                                huh(s1, \"unknown SAT solver '\" + strs + \"'\");\n                            }\n\n                            if (strs.size() < expected\n                                    || (expected <= 2 && strs.size() > expected)) {\n                                huh(s1, \"expected \" + expected + \" strings, got \"\n                                         + strs.size());\n                            }\n                        \n\n                }\n                break;\n            case 2 :\n                // src/Kodkodi.g:838:9: SYMMETRY_BREAKING COLON k= NUM\n                {\n                match(input,SYMMETRY_BREAKING,FOLLOW_SYMMETRY_BREAKING_in_option211); \n                match(input,COLON,FOLLOW_COLON_in_option213); \n                k=(Token)match(input,NUM,FOLLOW_NUM_in_option219); \n\n                            try {\n                                options.setSymmetryBreaking(getInt(k));\n                            } catch (IllegalArgumentException except) {\n                                huh(k, \"symmetry breaking value \" + (k!=null?k.getText():null)\n                                        + \" out of range\");\n                            }\n                        \n\n                }\n                break;\n            case 3 :\n                // src/Kodkodi.g:846:9: SHARING COLON k= NUM\n                {\n                match(input,SHARING,FOLLOW_SHARING_in_option233); \n                match(input,COLON,FOLLOW_COLON_in_option235); \n                k=(Token)match(input,NUM,FOLLOW_NUM_in_option241); \n\n                            try {\n                                options.setSharing(getInt(k));\n                            } catch (IllegalArgumentException except) {\n                                huh(k, \"sharing value \" + (k!=null?k.getText():null) + \" out of range\");\n                            }\n                        \n\n                }\n                break;\n            case 4 :\n                // src/Kodkodi.g:853:9: BIT_WIDTH COLON k= NUM\n                {\n                match(input,BIT_WIDTH,FOLLOW_BIT_WIDTH_in_option255); \n                match(input,COLON,FOLLOW_COLON_in_option257); \n                k=(Token)match(input,NUM,FOLLOW_NUM_in_option263); \n\n                            try {\n                                options.setBitwidth(getInt(k));\n                            } catch (IllegalArgumentException except) {\n                                huh(k, \"bit width value \" + (k!=null?k.getText():null) + \" out of range\");\n                            }\n                        \n\n                }\n                break;\n            case 5 :\n                // src/Kodkodi.g:860:9: SKOLEM_DEPTH COLON k= NUM\n                {\n                match(input,SKOLEM_DEPTH,FOLLOW_SKOLEM_DEPTH_in_option277); \n                match(input,COLON,FOLLOW_COLON_in_option279); \n                k=(Token)match(input,NUM,FOLLOW_NUM_in_option285); \n\n                            try {\n                                options.setSkolemDepth(getInt(k));\n                            } catch (IllegalArgumentException except) {\n                                huh(k, \"Skolem depth value \" + (k!=null?k.getText():null) + \" out of range\");\n                            }\n                        \n\n                }\n                break;\n            case 6 :\n                // src/Kodkodi.g:867:9: FLATTEN COLON t= ( TRUE | FALSE )\n                {\n                match(input,FLATTEN,FOLLOW_FLATTEN_in_option299); \n                match(input,COLON,FOLLOW_COLON_in_option301); \n                t=(Token)input.LT(1);\n                if ( (input.LA(1)>=TRUE && input.LA(1)<=FALSE) ) {\n                    input.consume();\n                    state.errorRecovery=false;\n                }\n                else {\n                    MismatchedSetException mse = new MismatchedSetException(null,input);\n                    throw mse;\n                }\n\n\n                            options.setFlatten((t!=null?t.getType():0) == TRUE);\n                        \n\n                }\n                break;\n\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return strs;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"basic_formula\"\n// src/Kodkodi.g:1197:1: basic_formula returns [Object node] : (t= NOT e1= basic_formula | e1= predicate_formula | e1= shift_expr (t= ( EQ | LT | LE | GT | GE | IN ) e2= shift_expr | ) | m= multiplicity e1= add_expr );\n", "func_signal": "public final Object basic_formula() throws RecognitionException", "code": "{\n    Object node = null;\n\n    Token t=null;\n    Object e1 = null;\n\n    Object e2 = null;\n\n    KodkodiParser.multiplicity_return m = null;\n\n\n    try {\n        // src/Kodkodi.g:1197:36: (t= NOT e1= basic_formula | e1= predicate_formula | e1= shift_expr (t= ( EQ | LT | LE | GT | GE | IN ) e2= shift_expr | ) | m= multiplicity e1= add_expr )\n        int alt35=4;\n        switch ( input.LA(1) ) {\n        case NOT:\n            {\n            alt35=1;\n            }\n            break;\n        case ACYCLIC:\n        case FUNCTION:\n        case TOTAL_ORDERING:\n            {\n            alt35=2;\n            }\n            break;\n        case NUM:\n        case TRUE:\n        case FALSE:\n        case UNIV:\n        case UNIV_NAME:\n        case RELATION_NAME:\n        case FORMULA_REG:\n        case REL_EXPR_REG:\n        case INT_EXPR_REG:\n        case MINUS:\n        case OFFSET_UNIV_NAME:\n        case PAREN_LEFT:\n        case BRACE_LEFT:\n        case HASH:\n        case NONE:\n        case ATOM_NAME:\n        case SUM:\n        case STAR:\n        case HAT:\n        case VARIABLE_NAME:\n        case IDEN:\n        case INTS:\n        case TILDE:\n        case ABS:\n        case SGN:\n        case BITS:\n        case INT:\n            {\n            alt35=3;\n            }\n            break;\n        case SOME:\n        case ONE:\n        case LONE:\n        case NO:\n        case SET:\n            {\n            alt35=4;\n            }\n            break;\n        default:\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 35, 0, input);\n\n            throw nvae;\n        }\n\n        switch (alt35) {\n            case 1 :\n                // src/Kodkodi.g:1198:9: t= NOT e1= basic_formula\n                {\n                t=(Token)match(input,NOT,FOLLOW_NOT_in_basic_formula1865); \n                pushFollow(FOLLOW_basic_formula_in_basic_formula1871);\n                e1=basic_formula();\n\n                state._fsp--;\n\n                 node = F(t, e1).not(); \n\n                }\n                break;\n            case 2 :\n                // src/Kodkodi.g:1199:9: e1= predicate_formula\n                {\n                pushFollow(FOLLOW_predicate_formula_in_basic_formula1889);\n                e1=predicate_formula();\n\n                state._fsp--;\n\n                 node = e1; \n\n                }\n                break;\n            case 3 :\n                // src/Kodkodi.g:1200:9: e1= shift_expr (t= ( EQ | LT | LE | GT | GE | IN ) e2= shift_expr | )\n                {\n                pushFollow(FOLLOW_shift_expr_in_basic_formula1907);\n                e1=shift_expr();\n\n                state._fsp--;\n\n                // src/Kodkodi.g:1201:9: (t= ( EQ | LT | LE | GT | GE | IN ) e2= shift_expr | )\n                int alt34=2;\n                int LA34_0 = input.LA(1);\n\n                if ( ((LA34_0>=EQ && LA34_0<=IN)) ) {\n                    alt34=1;\n                }\n                else if ( (LA34_0==COMMA||LA34_0==BRACKET_RIGHT||(LA34_0>=FORMULA_REG && LA34_0<=SEMICOLON)||(LA34_0>=AND && LA34_0<=ARROW)||LA34_0==PAREN_RIGHT||LA34_0==BRACE_RIGHT||(LA34_0>=THEN && LA34_0<=IMPLIES)) ) {\n                    alt34=2;\n                }\n                else {\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"\", 34, 0, input);\n\n                    throw nvae;\n                }\n                switch (alt34) {\n                    case 1 :\n                        // src/Kodkodi.g:1201:10: t= ( EQ | LT | LE | GT | GE | IN ) e2= shift_expr\n                        {\n                        t=(Token)input.LT(1);\n                        if ( (input.LA(1)>=EQ && input.LA(1)<=IN) ) {\n                            input.consume();\n                            state.errorRecovery=false;\n                        }\n                        else {\n                            MismatchedSetException mse = new MismatchedSetException(null,input);\n                            throw mse;\n                        }\n\n                        pushFollow(FOLLOW_shift_expr_in_basic_formula1950);\n                        e2=shift_expr();\n\n                        state._fsp--;\n\n\n                                     if (isExpression(e1)) {\n                                         try {\n                                             if ((t!=null?t.getType():0) == EQ) {\n                                                 node = E(t, e1).eq(E(t, e2));\n                                             } else if ((t!=null?t.getType():0) == IN) {\n                                                 node = E(t, e1).in(E(t, e2));                 \n                                             } else {\n                                                 huh(t, \"mismatched input '\" + (t!=null?t.getText():null)\n                                                         + \"' expecting EQ or IN\");\n                                                 node = Formula.FALSE;\n                                             }\n                                         } catch (IllegalArgumentException except) {\n                                             int arity1 = E(t, e1).arity();\n                                             int arity2 = E(t, e2).arity();\n                                             if (arity1 == arity2) {\n                                                 panic();\n                                             } else {\n                                                 huh(t, \"arity mismatch (\" + arity1 + \" vs. \" + arity2\n                                                         + \")\");\n                                             }\n                                         }\n                                     } else if (isIntExpression(e1)) {\n                                         if ((t!=null?t.getType():0) != IN) {\n                                             node = I(t, e1).compare(\n                                                         (t!=null?t.getType():0) == EQ\n                                                             ? IntCompOperator.EQ\n                                                       : (t!=null?t.getType():0) == LT\n                                                             ? IntCompOperator.LT\n                                                       : (t!=null?t.getType():0) == LE\n                                                             ? IntCompOperator.LTE\n                                                       : (t!=null?t.getType():0) == GT\n                                                             ? IntCompOperator.GT\n                                                       : IntCompOperator.GTE,\n                                                         I(t, e2));\n                                         } else {\n                                             huh(t, \"mismatched input 'in' expecting EQ, LT, GT,\"\n                                                     + \" etc.\");\n                                             node = Formula.FALSE;\n                                         }\n                                     } else {\n                                         huh(t, \"operands may not be formulas\");\n                                     }\n                                 \n\n                        }\n                        break;\n                    case 2 :\n                        // src/Kodkodi.g:1244:14: \n                        {\n\n                                     node = e1;\n                                 \n\n                        }\n                        break;\n\n                }\n\n\n                }\n                break;\n            case 4 :\n                // src/Kodkodi.g:1247:9: m= multiplicity e1= add_expr\n                {\n                pushFollow(FOLLOW_multiplicity_in_basic_formula1973);\n                m=multiplicity();\n\n                state._fsp--;\n\n                pushFollow(FOLLOW_add_expr_in_basic_formula1979);\n                e1=add_expr();\n\n                state._fsp--;\n\n\n                            if ((m!=null?m.value:null) != Multiplicity.SET) {\n                                node = E((m!=null?m.token:null), e1).apply((m!=null?m.value:null));\n                            } else {\n                                huh((m!=null?m.token:null), \"invalid multiplicity 'set'\");\n                            }\n                        \n\n                }\n                break;\n\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return node;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"multiplicity\"\n// src/Kodkodi.g:1558:1: multiplicity returns [Token token, Multiplicity value] : t= ( NO | LONE | ONE | SOME | SET ) ;\n", "func_signal": "public final KodkodiParser.multiplicity_return multiplicity() throws RecognitionException", "code": "{\n    KodkodiParser.multiplicity_return retval = new KodkodiParser.multiplicity_return();\n    retval.start = input.LT(1);\n\n    Token t=null;\n\n    try {\n        // src/Kodkodi.g:1558:55: (t= ( NO | LONE | ONE | SOME | SET ) )\n        // src/Kodkodi.g:1559:9: t= ( NO | LONE | ONE | SOME | SET )\n        {\n        t=(Token)input.LT(1);\n        if ( input.LA(1)==SOME||(input.LA(1)>=ONE && input.LA(1)<=LONE)||(input.LA(1)>=NO && input.LA(1)<=SET) ) {\n            input.consume();\n            state.errorRecovery=false;\n        }\n        else {\n            MismatchedSetException mse = new MismatchedSetException(null,input);\n            throw mse;\n        }\n\n\n                    retval.token = t;\n                    switch ((t!=null?t.getType():0)) {\n                    case NO:\n                        retval.value = Multiplicity.NO;\n                        break;\n                    case LONE:\n                        retval.value = Multiplicity.LONE;\n                        break;\n                    case ONE:\n                        retval.value = Multiplicity.ONE;\n                        break;\n                    case SOME:\n                        retval.value = Multiplicity.SOME;\n                        break;\n                    case SET:\n                        retval.value = Multiplicity.SET;\n                    }\n                \n\n        }\n\n        retval.stop = input.LT(-1);\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return retval;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"product_tuple_set\"\n// src/Kodkodi.g:1010:1: product_tuple_set[int arity] returns [TupleSet value] : s1= project_tuple_set[$arity] (a= ARROW s2= project_tuple_set[$arity] )* ;\n", "func_signal": "public final TupleSet product_tuple_set(int arity) throws RecognitionException", "code": "{\n    TupleSet value = null;\n\n    Token a=null;\n    TupleSet s1 = null;\n\n    TupleSet s2 = null;\n\n\n    try {\n        // src/Kodkodi.g:1010:54: (s1= project_tuple_set[$arity] (a= ARROW s2= project_tuple_set[$arity] )* )\n        // src/Kodkodi.g:1011:9: s1= project_tuple_set[$arity] (a= ARROW s2= project_tuple_set[$arity] )*\n        {\n        pushFollow(FOLLOW_project_tuple_set_in_product_tuple_set894);\n        s1=project_tuple_set(arity);\n\n        state._fsp--;\n\n         value = s1; \n        // src/Kodkodi.g:1012:9: (a= ARROW s2= project_tuple_set[$arity] )*\n        loop19:\n        do {\n            int alt19=2;\n            int LA19_0 = input.LA(1);\n\n            if ( (LA19_0==ARROW) ) {\n                alt19=1;\n            }\n\n\n            switch (alt19) {\n        \tcase 1 :\n        \t    // src/Kodkodi.g:1012:10: a= ARROW s2= project_tuple_set[$arity]\n        \t    {\n        \t    a=(Token)match(input,ARROW,FOLLOW_ARROW_in_product_tuple_set912); \n        \t    pushFollow(FOLLOW_project_tuple_set_in_product_tuple_set918);\n        \t    s2=project_tuple_set(arity);\n\n        \t    state._fsp--;\n\n\n        \t                 try {\n        \t                     value = value.product(s2);\n        \t                 } catch (IllegalArgumentException except) {\n        \t                      huh(a, \"illegal tuple set: \" + fixedMessage(except));\n        \t                 }\n        \t             \n\n        \t    }\n        \t    break;\n\n        \tdefault :\n        \t    break loop19;\n            }\n        } while (true);\n\n\n        }\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return value;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"product_expr_tail\"\n// src/Kodkodi.g:1394:1: product_expr_tail[Token token, List<Expression> exprs] returns [Object node] : e1= ifno_expr ( ARROW es= product_expr_tail[$token, $exprs] | ) ;\n", "func_signal": "public final Object product_expr_tail(Token token, List<Expression> exprs) throws RecognitionException", "code": "{\n    Object node = null;\n\n    Object e1 = null;\n\n    Object es = null;\n\n\n    try {\n        // src/Kodkodi.g:1394:77: (e1= ifno_expr ( ARROW es= product_expr_tail[$token, $exprs] | ) )\n        // src/Kodkodi.g:1395:9: e1= ifno_expr ( ARROW es= product_expr_tail[$token, $exprs] | )\n        {\n        pushFollow(FOLLOW_ifno_expr_in_product_expr_tail2550);\n        e1=ifno_expr();\n\n        state._fsp--;\n\n         exprs.add(E(token, e1)); \n        // src/Kodkodi.g:1396:9: ( ARROW es= product_expr_tail[$token, $exprs] | )\n        int alt44=2;\n        int LA44_0 = input.LA(1);\n\n        if ( (LA44_0==ARROW) ) {\n            int LA44_1 = input.LA(2);\n\n            if ( ((LA44_1>=ONE && LA44_1<=LONE)) ) {\n                alt44=2;\n            }\n            else if ( (LA44_1==NUM||(LA44_1>=TRUE && LA44_1<=UNIV_NAME)||LA44_1==RELATION_NAME||(LA44_1>=FORMULA_REG && LA44_1<=INT_EXPR_REG)||LA44_1==MINUS||(LA44_1>=OFFSET_UNIV_NAME && LA44_1<=PAREN_LEFT)||LA44_1==BRACE_LEFT||LA44_1==NONE||LA44_1==ATOM_NAME||LA44_1==STAR||LA44_1==HAT||(LA44_1>=VARIABLE_NAME && LA44_1<=INT)) ) {\n                alt44=1;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 44, 1, input);\n\n                throw nvae;\n            }\n        }\n        else if ( (LA44_0==COMMA||LA44_0==BRACKET_RIGHT||(LA44_0>=FORMULA_REG && LA44_0<=AND)||LA44_0==PAREN_RIGHT||LA44_0==BRACE_RIGHT||LA44_0==BAR||(LA44_0>=THEN && LA44_0<=IMPLIES)||(LA44_0>=EQ && LA44_0<=IN)||(LA44_0>=SHL && LA44_0<=OVERRIDE)) ) {\n            alt44=2;\n        }\n        else {\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 44, 0, input);\n\n            throw nvae;\n        }\n        switch (alt44) {\n            case 1 :\n                // src/Kodkodi.g:1396:10: ARROW es= product_expr_tail[$token, $exprs]\n                {\n                match(input,ARROW,FOLLOW_ARROW_in_product_expr_tail2563); \n                pushFollow(FOLLOW_product_expr_tail_in_product_expr_tail2569);\n                es=product_expr_tail(token, exprs);\n\n                state._fsp--;\n\n                 node = es; \n\n                }\n                break;\n            case 2 :\n                // src/Kodkodi.g:1397:10: \n                {\n                 node = Expression.product(exprs); \n\n                }\n                break;\n\n        }\n\n\n        }\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return node;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"expr_to_int_cast\"\n// src/Kodkodi.g:1339:1: expr_to_int_cast returns [Object node] : (t= ( HASH | SUM ) PAREN_LEFT e= expr PAREN_RIGHT | e1= product_expr (o= ( BAR | HAT | AMP ) e2= product_expr )* (o= OVERRIDE e2= expr_to_int_cast )? );\n", "func_signal": "public final Object expr_to_int_cast() throws RecognitionException", "code": "{\n    Object node = null;\n\n    Token t=null;\n    Token o=null;\n    Object e = null;\n\n    Object e1 = null;\n\n    Object e2 = null;\n\n\n    try {\n        // src/Kodkodi.g:1339:39: (t= ( HASH | SUM ) PAREN_LEFT e= expr PAREN_RIGHT | e1= product_expr (o= ( BAR | HAT | AMP ) e2= product_expr )* (o= OVERRIDE e2= expr_to_int_cast )? )\n        int alt42=2;\n        int LA42_0 = input.LA(1);\n\n        if ( (LA42_0==HASH||LA42_0==SUM) ) {\n            alt42=1;\n        }\n        else if ( (LA42_0==NUM||(LA42_0>=TRUE && LA42_0<=UNIV_NAME)||LA42_0==RELATION_NAME||(LA42_0>=FORMULA_REG && LA42_0<=INT_EXPR_REG)||LA42_0==MINUS||(LA42_0>=OFFSET_UNIV_NAME && LA42_0<=PAREN_LEFT)||LA42_0==BRACE_LEFT||LA42_0==NONE||LA42_0==ATOM_NAME||LA42_0==STAR||LA42_0==HAT||(LA42_0>=VARIABLE_NAME && LA42_0<=INT)) ) {\n            alt42=2;\n        }\n        else {\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 42, 0, input);\n\n            throw nvae;\n        }\n        switch (alt42) {\n            case 1 :\n                // src/Kodkodi.g:1340:9: t= ( HASH | SUM ) PAREN_LEFT e= expr PAREN_RIGHT\n                {\n                t=(Token)input.LT(1);\n                if ( input.LA(1)==HASH||input.LA(1)==SUM ) {\n                    input.consume();\n                    state.errorRecovery=false;\n                }\n                else {\n                    MismatchedSetException mse = new MismatchedSetException(null,input);\n                    throw mse;\n                }\n\n                match(input,PAREN_LEFT,FOLLOW_PAREN_LEFT_in_expr_to_int_cast2384); \n                pushFollow(FOLLOW_expr_in_expr_to_int_cast2390);\n                e=expr();\n\n                state._fsp--;\n\n                match(input,PAREN_RIGHT,FOLLOW_PAREN_RIGHT_in_expr_to_int_cast2392); \n\n                            try {\n                                node = E(t, e).apply((t!=null?t.getType():0) == HASH\n                                                           ? ExprCastOperator.CARDINALITY\n                                                           : ExprCastOperator.SUM);\n                             } catch (IllegalArgumentException except) {\n                                 huh(t, \"illegal arity\");\n                             }\n                        \n\n                }\n                break;\n            case 2 :\n                // src/Kodkodi.g:1349:9: e1= product_expr (o= ( BAR | HAT | AMP ) e2= product_expr )* (o= OVERRIDE e2= expr_to_int_cast )?\n                {\n                pushFollow(FOLLOW_product_expr_in_expr_to_int_cast2410);\n                e1=product_expr();\n\n                state._fsp--;\n\n                 node = e1; \n                // src/Kodkodi.g:1350:9: (o= ( BAR | HAT | AMP ) e2= product_expr )*\n                loop40:\n                do {\n                    int alt40=2;\n                    int LA40_0 = input.LA(1);\n\n                    if ( (LA40_0==BAR||(LA40_0>=HAT && LA40_0<=AMP)) ) {\n                        alt40=1;\n                    }\n\n\n                    switch (alt40) {\n                \tcase 1 :\n                \t    // src/Kodkodi.g:1350:10: o= ( BAR | HAT | AMP ) e2= product_expr\n                \t    {\n                \t    o=(Token)input.LT(1);\n                \t    if ( input.LA(1)==BAR||(input.LA(1)>=HAT && input.LA(1)<=AMP) ) {\n                \t        input.consume();\n                \t        state.errorRecovery=false;\n                \t    }\n                \t    else {\n                \t        MismatchedSetException mse = new MismatchedSetException(null,input);\n                \t        throw mse;\n                \t    }\n\n                \t    pushFollow(FOLLOW_product_expr_in_expr_to_int_cast2443);\n                \t    e2=product_expr();\n\n                \t    state._fsp--;\n\n\n                \t                 if ((o!=null?o.getType():0) == BAR) {\n                \t                     node = I(o, node).or(I(o, e2));\n                \t                 } else if ((o!=null?o.getType():0) == HAT) {\n                \t                     node = I(o, node).xor(I(o, e2));\n                \t                 } else {\n                \t                     if (isExpression(node)) {\n                \t                         try {\n                \t                             node = E(o, node).intersection(E(o, e2));\n                \t                         } catch (IllegalArgumentException except) {\n                \t                             int arity1 = E(o, node).arity();\n                \t                             int arity2 = E(o, e2).arity();\n                \t                             if (arity1 == arity2) {\n                \t                                 panic();\n                \t                             } else {\n                \t                                 huh(o, \"arity mismatch (\" + arity1 + \" vs. \"\n                \t                                         + arity2 + \")\");\n                \t                             }\n                \t                         }\n                \t                     } else if (isIntExpression(node)) {\n                \t                         node = I(o, node).and(I(o, e2));\n                \t                     } else {\n                \t                         huh(o, \"operands may not be formulas\");\n                \t                     }\n                \t                 }\n                \t            \n\n                \t    }\n                \t    break;\n\n                \tdefault :\n                \t    break loop40;\n                    }\n                } while (true);\n\n                // src/Kodkodi.g:1375:13: (o= OVERRIDE e2= expr_to_int_cast )?\n                int alt41=2;\n                int LA41_0 = input.LA(1);\n\n                if ( (LA41_0==OVERRIDE) ) {\n                    alt41=1;\n                }\n                switch (alt41) {\n                    case 1 :\n                        // src/Kodkodi.g:1375:14: o= OVERRIDE e2= expr_to_int_cast\n                        {\n                        o=(Token)match(input,OVERRIDE,FOLLOW_OVERRIDE_in_expr_to_int_cast2454); \n                        pushFollow(FOLLOW_expr_to_int_cast_in_expr_to_int_cast2460);\n                        e2=expr_to_int_cast();\n\n                        state._fsp--;\n\n\n                                         try {\n                                             node = E(o, node).override(E(o, e2));\n                                         } catch (IllegalArgumentException except) {\n                                             int arity1 = E(o, node).arity();\n                                             int arity2 = E(o, e2).arity();\n                                             if (arity1 == arity2) {\n                                                 panic();\n                                             } else {\n                                                 huh(o, \"arity mismatch (\" + arity1 + \" vs. \"\n                                                         + arity2 + \")\");\n                                             }\n                                         }\n                                     \n\n                        }\n                        break;\n\n                }\n\n\n                }\n                break;\n\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return node;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"and_formula\"\n// src/Kodkodi.g:1188:1: and_formula returns [Object node] : e1= basic_formula (a= AND es= and_formula_tail[$a,\\n new SingletonArrayList<Formula>(F($a, $node))] )? ;\n", "func_signal": "public final Object and_formula() throws RecognitionException", "code": "{\n    Object node = null;\n\n    Token a=null;\n    Object e1 = null;\n\n    Object es = null;\n\n\n    try {\n        // src/Kodkodi.g:1188:34: (e1= basic_formula (a= AND es= and_formula_tail[$a,\\n new SingletonArrayList<Formula>(F($a, $node))] )? )\n        // src/Kodkodi.g:1189:9: e1= basic_formula (a= AND es= and_formula_tail[$a,\\n new SingletonArrayList<Formula>(F($a, $node))] )?\n        {\n        pushFollow(FOLLOW_basic_formula_in_and_formula1743);\n        e1=basic_formula();\n\n        state._fsp--;\n\n         node = e1; \n        // src/Kodkodi.g:1190:9: (a= AND es= and_formula_tail[$a,\\n new SingletonArrayList<Formula>(F($a, $node))] )?\n        int alt32=2;\n        int LA32_0 = input.LA(1);\n\n        if ( (LA32_0==AND) ) {\n            alt32=1;\n        }\n        switch (alt32) {\n            case 1 :\n                // src/Kodkodi.g:1190:10: a= AND es= and_formula_tail[$a,\\n new SingletonArrayList<Formula>(F($a, $node))]\n                {\n                a=(Token)match(input,AND,FOLLOW_AND_in_and_formula1760); \n                pushFollow(FOLLOW_and_formula_tail_in_and_formula1766);\n                es=and_formula_tail(a, new SingletonArrayList<Formula>(F(a, node)));\n\n                state._fsp--;\n\n                 node = es; \n\n                }\n                break;\n\n        }\n\n\n        }\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return node;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"decl\"\n// src/Kodkodi.g:1523:1: decl returns [Decl node] : n= VARIABLE_NAME c= COLON m= multiplicity e= expr ;\n", "func_signal": "public final Decl decl() throws RecognitionException", "code": "{\n    Decl node = null;\n\n    Token n=null;\n    Token c=null;\n    KodkodiParser.multiplicity_return m = null;\n\n    Object e = null;\n\n\n    try {\n        // src/Kodkodi.g:1523:25: (n= VARIABLE_NAME c= COLON m= multiplicity e= expr )\n        // src/Kodkodi.g:1524:9: n= VARIABLE_NAME c= COLON m= multiplicity e= expr\n        {\n        n=(Token)match(input,VARIABLE_NAME,FOLLOW_VARIABLE_NAME_in_decl3211); \n        c=(Token)match(input,COLON,FOLLOW_COLON_in_decl3217); \n        pushFollow(FOLLOW_multiplicity_in_decl3223);\n        m=multiplicity();\n\n        state._fsp--;\n\n        pushFollow(FOLLOW_expr_in_decl3229);\n        e=expr();\n\n        state._fsp--;\n\n\n                    try {\n                        node = getVariable(n).declare((m!=null?m.value:null), E(c, e));\n                    } catch (IllegalArgumentException except) {\n                        huh(c, \"invalid bound: \" + fixedMessage(except));\n                    }\n                \n\n        }\n\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return node;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "// $ANTLR start \"expr_reg_directive\"\n// src/Kodkodi.g:932:1: expr_reg_directive : (r= FORMULA_REG COLON_EQ e= expr | r= REL_EXPR_REG COLON_EQ e= expr | r= INT_EXPR_REG COLON_EQ e= expr );\n", "func_signal": "public final void expr_reg_directive() throws RecognitionException", "code": "{\n    Token r=null;\n    Object e = null;\n\n\n    try {\n        // src/Kodkodi.g:932:19: (r= FORMULA_REG COLON_EQ e= expr | r= REL_EXPR_REG COLON_EQ e= expr | r= INT_EXPR_REG COLON_EQ e= expr )\n        int alt13=3;\n        switch ( input.LA(1) ) {\n        case FORMULA_REG:\n            {\n            alt13=1;\n            }\n            break;\n        case REL_EXPR_REG:\n            {\n            alt13=2;\n            }\n            break;\n        case INT_EXPR_REG:\n            {\n            alt13=3;\n            }\n            break;\n        default:\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 13, 0, input);\n\n            throw nvae;\n        }\n\n        switch (alt13) {\n            case 1 :\n                // src/Kodkodi.g:933:9: r= FORMULA_REG COLON_EQ e= expr\n                {\n                r=(Token)match(input,FORMULA_REG,FOLLOW_FORMULA_REG_in_expr_reg_directive574); \n                match(input,COLON_EQ,FOLLOW_COLON_EQ_in_expr_reg_directive576); \n                pushFollow(FOLLOW_expr_in_expr_reg_directive582);\n                e=expr();\n\n                state._fsp--;\n\n                 setFormulaReg(r, F(r, e)); \n\n                }\n                break;\n            case 2 :\n                // src/Kodkodi.g:934:9: r= REL_EXPR_REG COLON_EQ e= expr\n                {\n                r=(Token)match(input,REL_EXPR_REG,FOLLOW_REL_EXPR_REG_in_expr_reg_directive600); \n                match(input,COLON_EQ,FOLLOW_COLON_EQ_in_expr_reg_directive602); \n                pushFollow(FOLLOW_expr_in_expr_reg_directive608);\n                e=expr();\n\n                state._fsp--;\n\n                 setExprReg(r, E(r, e)); \n\n                }\n                break;\n            case 3 :\n                // src/Kodkodi.g:935:9: r= INT_EXPR_REG COLON_EQ e= expr\n                {\n                r=(Token)match(input,INT_EXPR_REG,FOLLOW_INT_EXPR_REG_in_expr_reg_directive626); \n                match(input,COLON_EQ,FOLLOW_COLON_EQ_in_expr_reg_directive628); \n                pushFollow(FOLLOW_expr_in_expr_reg_directive634);\n                e=expr();\n\n                state._fsp--;\n\n                 setIntExprReg(r, I(r, e)); \n\n                }\n                break;\n\n        }\n    }\n    catch (RecognitionException re) {\n        reportError(re);\n        recover(input,re);\n    }\n    finally {\n    }\n    return ;\n}", "path": "KodkodiParser.java", "repo_name": "hesam/Kodkodi-Server", "stars": 1, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Determines whether the specified local variable is written\n * by this statement.\n * \n * @param\tvar\tA local variable.\n * \n * @return\ttrue iff the specified local variable is written\n * \t\t\tby this statement.\n */\n", "func_signal": "public boolean defs(Var var)", "code": "{\n\tfor (Var var2 : getDefs()) {\n\t\tif (var2 == var)\n\t\t\treturn true;\n\t}\n\treturn false;\n}", "path": "main\\src\\chord\\program\\insts\\Inst.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Removes all synchronized blocks from each method in each\n * class in this program by generating a fresh static method\n * in the same class per synchronized block.\n */\n", "func_signal": "public void removeSyncs()", "code": "{\n\tif (!removedSyncs) {\n\t\tAssertions.Assert(!removedLoops);\n\t\tfor (Type type : getTypes())\n\t\t\ttype.removeSyncs();\n\t\tremovedSyncs = true;\n\t}\n}", "path": "main\\src\\chord\\program\\Program.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Removes all skip statements from the body of this method.\n * <p>\n * It has no effect if this method does not have a body or if\n * its body has already been stripped of all skip statements.\n */\n", "func_signal": "public void removeSkips()", "code": "{\n\tif (cfg != null)\n\t\tcfg.removeSkips();\n}", "path": "main\\src\\chord\\program\\Method.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Returns the integer value of a given system property, if it is\n * defined, and a given default value otherwise.\n * \n * @param\tkey\tThe name of a integer-valued system property.\n * @param\tdef\tThe default value of the property.\n * \n * @return\tThe integer value of the given system property, if it\n * \t\t\tis defined, and the given default value otherwise.\n */\n", "func_signal": "public static int getIntProperty(String key, int def)", "code": "{\n\tString strVal = System.getProperty(key);\n\tif (strVal == null)\n\t\treturn def;\n\tint intVal;\n\ttry {\n\t\tintVal = Integer.parseInt(strVal);\n\t} catch (NumberFormatException ex) {\n\t\tthrow new RuntimeException(\"Integer value \" +\n\t\t\t\"expected for system property '\" + key +\n\t\t\t\"; got '\" + strVal + \"'\");\n\t}\n\treturn intVal;\n}", "path": "main\\src\\chord\\util\\PropertyUtils.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Validates this method (checks its partial specification).\n */\n", "func_signal": "public void validate()", "code": "{\n\tAssertions.Assert(sign != null);\n\t// Check that sign matches a certain regular expression\n\tAssertions.Assert(ctnrType != null);\n\tif (cfg != null) {\n\t\tfor (Inst inst : cfg.getNodes()) {\n\t\t\tMethod method = inst.getImmediateCtnrMethod();\n\t\t\tAssertions.Assert(method == this,\n\t\t\t\t\"Instruction '\" + inst +\n\t\t\t\t\"' has immediate containing method '\" +\n\t\t\t\tmethod + \"'; expected '\" + this + \"'.\");\n\t\t}\n\t\tcfg.validate();\n\t}\n}", "path": "main\\src\\chord\\program\\Method.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Provides the main method of this program.  It is a static method\n * with signature <tt>void main(java.lang.String[])</tt>.\n * \n * @return\tThe main method of the program.\n */\n", "func_signal": "public Method getMainMethod()", "code": "{\n\tType mainType = getType(mainClassName);\n\treturn mainType.getMethod(\"main(java.lang.String[])\");\n}", "path": "main\\src\\chord\\program\\Program.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Validates this program (checks its partial specification).\n */\n", "func_signal": "public void validate()", "code": "{\n\tfor (Type type : getTypes())\n\t\ttype.validate();\n}", "path": "main\\src\\chord\\program\\Program.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Provides the name of the file containing this statement.\n * \n * @return\tThe name of the file containing this statement.\n */\n", "func_signal": "public String getFileName()", "code": "{\n\tif (cfg == null)\n\t\treturn null;\n\tMethod method = cfg.getCtnrMethod();\n\tif (method == null)\n\t\treturn null;\n\tType type = method.getCtnrType();\n\tif (type == null)\n\t\treturn null;\n\treturn type.getFileName();\n}", "path": "main\\src\\chord\\program\\insts\\Inst.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Removes all skip statements from each method in each class in\n * this program.\n */\n", "func_signal": "public void removeSkips()", "code": "{\n\tif (!removedSkips) {\n\t\tfor (Type type : getTypes()) {\n\t\t\tfor (Method method : type.getMethods()) {\n\t\t\t\tmethod.removeSkips();\n\t\t\t}\n\t\t}\n\t\tremovedSkips = true;\n\t}\n}", "path": "main\\src\\chord\\program\\Program.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Returns the boolean value of a given system property, if it is\n * defined, and a given default value otherwise.\n * \n * @param\tkey\tThe name of a boolean-valued system property.\n * \n * @return\tThe boolean value of the given system property, if it\n * \t\t\tis defined, and the given default value otherwise.\n */\n", "func_signal": "public static boolean getBoolProperty(String key, boolean def)", "code": "{\n\tString strVal = System.getProperty(key);\n\tif (strVal == null)\n\t\treturn def;\n\tif (strVal.equals(\"true\"))\n\t\treturn true;\n\tif (strVal.equals(\"false\"))\n\t\treturn false;\n\tthrow new RuntimeException(\"Boolean value ('true' or 'false') \" +\n\t\t\"expected for system property '\" + key +\n\t\t\"; got '\" + strVal + \"'\");\n}", "path": "main\\src\\chord\\util\\PropertyUtils.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Constructor.\n * \n * @param\tdomNames\tAn ordered list of domain names of the\n * \t\t\trelation (e.g., [M1, H0]).\n * \t\t\tIt must be non-null and not contain any duplicate\n * \t\t\tdomain names.\n * \t\t\tEach domain name must consist of a major component \n * \t\t\t(a sequence of one or more alphabets) followed by a\n * \t\t\tminor component (a sequence of one or more digits).\n * @param\tdomOrder\tThe BDD ordering of the domain names\n     *          (e.g., M1_H0 or M1xH0).  It may be null.\n */\n", "func_signal": "public RelSign(String[] domNames, String domOrder)", "code": "{\n\tsuper(domNames, domOrder);\n\tvalidate();\n}", "path": "main\\src\\chord\\util\\bddbddb\\RelSign.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Provides the \"outermost containing method\" of this method.\n * <p>\n * It is best explained by means of an example.  Suppose the\n * original program contains a method <tt>foo</tt>:\n * <pre>\n * foo() {\n *     code1;\n *     synchronized (...) {\n *         code2;\n *         synchronized (...) {\n *             code3;\n *         }\n *     }\n * }\n * </pre>\n * This method is transformed into the following three methods:\n * <pre>\n * foo() {\n *     code1;\n *     syncFreeMethod1();\n * }\n * \n * syncFreeMethod1() {\n *     code2;\n *     syncFreeMethod2();\n * }\n * \n * syncFreeMethod2() {\n *     code3;\n * }\n * </pre>\n * Then, the outermost containing method of each of methods\n * <tt>foo</tt>, <tt>syncFreeMethod1</tt>, and\n * <tt>syncFreeMethod2</tt> is <tt>foo</tt> itself.\n * \n * @return\tThe \"outermost containing method\" of this method.\n */\n", "func_signal": "public Method getOutermostCtnrMethod()", "code": "{\n        Method outermostCtnrMethod = this;\n        do {\n            Method parentMethod = outermostCtnrMethod.ctnrMethod;\n            if (parentMethod == null)\n                break;\n            outermostCtnrMethod = parentMethod;\n        } while (true);\n        return outermostCtnrMethod;\n}", "path": "main\\src\\chord\\program\\Method.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Determines whether the specified local variable is read\n * by this statement.\n * \n * @param\tvar\tA local variable.\n * \n * @return\ttrue iff the specified local variable is read\n * \t\t\tby this statement.\n */\n", "func_signal": "public boolean uses(Var var)", "code": "{\n\tfor (Var var2 : getUses()) {\n\t\tif (var2 == var)\n\t\t\treturn true;\n\t}\n\treturn false;\n}", "path": "main\\src\\chord\\program\\insts\\Inst.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Constructs a mutable, labeled, directed graph with the\n * specified roots, nodes, edges, and labels on edges.\n * @param\troots\n * @param\tnodeToPreds\n * @param\tnodeToSuccs\n * @param\tnodesToLabels\n */\n", "func_signal": "public MutableLabeledGraph(Set<Node> roots,\n\t\tMap<Node, Set<Node>> nodeToPreds,\n\t\tMap<Node, Set<Node>> nodeToSuccs,\n\t\tMap<Pair<Node, Node>, Set<Label>> nodesToLabels)", "code": "{\n\tsuper(roots, nodeToPreds, nodeToSuccs);\n\tthis.nodesToLabels = nodesToLabels;\n}", "path": "main\\src\\chord\\util\\graph\\MutableLabeledGraph.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Provides the list of domain kinds (major components of domain\n * names) specified by this signature.\n * For instance, if the list of domain names is [C0,M0,I0,C1,M1]\n * then the list of domain kinds is [C,M,I].\n * \n * @return\tThe list of domain kinds specified by this signature.\n */\n", "func_signal": "public String[] getDomKinds()", "code": "{\n\tList<String> domKindsList =\n\t\tnew ArrayList<String>(val0.length);\n\tfor (String domName : val0) {\n\t\tString domKind = StringUtils.trimNumSuffix(domName);\n\t\tif (!domKindsList.contains(domKind))\n\t\t\tdomKindsList.add(domKind);\n\t}\n\tString[] domKindsAry = new String[domKindsList.size()];\n\tdomKindsList.toArray(domKindsAry);\n\treturn domKindsAry;\n}", "path": "main\\src\\chord\\util\\bddbddb\\RelSign.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Converts each method in each class in this program into\n * static single assignment (SSA) form.\n */\n", "func_signal": "public void convertToSSA()", "code": "{\n\tif (!convertedToSSA) {\n\t\tAssertions.Assert(removedLoops);\n\t\tfor (Type type : getTypes()) {\n\t\t\tfor (Method method : type.getMethods())\n\t\t\t\tmethod.convertToSSA();\n\t\t}\n\t\tconvertedToSSA = true;\n\t}\n}", "path": "main\\src\\chord\\program\\Program.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Determines if this method is the thread-starting method,\n * namely, the method with signature <tt>start()</tt> in class\n * <tt>java.lang.Thread</tt>.\n * \n * @return\ttrue iff this method is the thread-starting method.\n */\n", "func_signal": "public boolean isStartMethod()", "code": "{\n\treturn sign.equals(\"start()\") &&\n\t\tctnrType.getName().equals(\"java.lang.Thread\");\n}", "path": "main\\src\\chord\\program\\Method.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Converts the body of this method into Static Single Assignment\n * (SSA) form.\n * <p>\n * It has no effect if this method does not have a body or if\n * its body has already been converted into SSA form.\n */\n", "func_signal": "public void convertToSSA()", "code": "{\n\tif (cfg != null)\n\t\tcfg.convertToSSA();\n}", "path": "main\\src\\chord\\program\\Method.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * @param\tsign\t\tSignature of this method.\n * @param\tctnrType\tThe type of the class in which this\n * \t\t\t\t\t\tmethod is declared.\n * @param\tctnrMethod\tThe \"immediate containing method\" of this\n * \t\t\t\t\t\tmethod.\n * @param\tlineNum\t\tThe first line number of this method's\n * \t\t\t\t\t\tdeclaration in its containing file.\n */\n", "func_signal": "public Method(String sign, Type ctnrType, Method ctnrMethod,\n\t\tint lineNum)", "code": "{\n\tthis.sign = sign;\n\tthis.ctnrType = ctnrType;\n\tthis.ctnrMethod = ctnrMethod;\n\tthis.lineNum = lineNum;\n}", "path": "main\\src\\chord\\program\\Method.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/**\n * Provides the representation of the type having a given name,\n * if one exists, and null otherwise.\n * \n * @param\tname\tThe fully-qualified name of a type.\n * \n * @return\tThe representation of the type having the given\n * \t\t\tname, if one exists, and null otherwise.\n */\n", "func_signal": "public Type getType(String name)", "code": "{\n\tfor (Type type : types) {\n\t\tif (type.getName().equals(name))\n\t\t\treturn type;\n\t}\n\treturn null;\n}", "path": "main\\src\\chord\\program\\Program.java", "repo_name": "blickly/chord", "stars": 0, "license": "None", "language": "java", "size": 8028}
{"docstring": "/** Create the ContentType based upon the string received from an HTTP header or other location.\n * @param mimeType the mime type, should not be null\n * @param encoding the character encoding, or null if it wasn't provided\n * @throws IllegalArgumentException if mimeType is null\n */\n", "func_signal": "public ContentType(String mimeType, String encoding)", "code": "{\n    if (mimeType == null)\n        throw new IllegalArgumentException(\"mimeType may not be null to ContentType(String,String)\");\n    itsMimeType = mimeType;\n    itsEncoding = encoding;\n}", "path": "src\\java\\com\\gliffy\\restunit\\http\\ContentType.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Performs an HTTP GET.\n * @param request the request describing the GET.\n * @return a response\n * @throws IOException if HttpURLConnection generated an IO Exception\n */\n", "func_signal": "public HttpResponse get(HttpRequest request)\n    throws IOException", "code": "{\n    HttpURLConnection connection = getConnection(request);\n    connection.setRequestMethod(\"GET\");\n    connection.connect();\n    HttpResponse response = createResponse(connection);\n    connection.disconnect();\n    return response;\n}", "path": "src\\java\\com\\gliffy\\restunit\\http\\JavaHttp.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Entries here indicate that the header <b>must</b> be part of the response.  If a header is in the Map returned\n * by getHeaders, you don't need to duplicate it here.  Only use this if you just care that the header was included\n * @return a set of headers that must be included in the response for this call to be considered successful.\n */\n", "func_signal": "public Set<String> getRequiredHeaders()", "code": "{\n    if (itsRequiredHeaders == null)\n        itsRequiredHeaders = new HashSet<String>();\n    return itsRequiredHeaders; \n\n}", "path": "src\\java\\com\\gliffy\\restunit\\RestCallResponse.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Creates an executor, deferring setting of the Http imlementation until later.\n */\n", "func_signal": "public Executor()", "code": "{\n    itsRequestFactory = new HttpRequestFactory(\"\");\n    setComparator(new StrictMatchComparator());\n}", "path": "src\\java\\com\\gliffy\\restunit\\Executor.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Performs a comparison of header values for entires in {@link com.gliffy.restunit.RestCallResponse#getHeaders}.\n * This checks for an exactly value match.  You can override this method to provide fuzzy matches or whatever other\n * kind of comparison you wish.\n * @param header the name of the header (used in failure explanations)\n * @param received the value for the header that was received.\n * @param expected the value for the header that the test expects.  May not be null.\n * @return {@link ComparisonResult#MATCHES} if received and expects are an exact match.  A non-matching result otherwise.\n */\n", "func_signal": "protected ComparisonResult compareHeaderValues(String header, String received, String expected)", "code": "{\n    if (expected == null)\n        throw new IllegalArgumentException(\"Cannot expect a header value of null (\" + header + \")\");\n\n    if (!expected.equals(received))\n    {\n        return new ComparisonResult(false,\"Expected header '\" + header + \"' received value '\" + received + \"', but test required '\" + expected + \"'\");\n    }\n    else\n    {\n        return ComparisonResult.MATCHES;\n    }\n}", "path": "src\\java\\com\\gliffy\\restunit\\comparator\\HeaderComparator.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Performs an HTTP DELETE. \n * @param request the request describing the DELETE.\n * @return a response\n * @throws IOException if HttpURLConnection generated an IO Exception\n */\n", "func_signal": "public HttpResponse delete(HttpRequest request)\n    throws IOException", "code": "{\n    HttpURLConnection connection = getConnection(request);\n    connection.setRequestMethod(\"DELETE\");\n    connection.connect();\n    HttpResponse response = createResponse(connection);\n    connection.disconnect();\n    return response;\n}", "path": "src\\java\\com\\gliffy\\restunit\\http\\JavaHttp.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Returns an HTTP implementation that describes how this part of the REST service responds */\n", "func_signal": "public Http getHttp()", "code": "{\n    if (itsHttp == null)\n        return itsDefaultHttp;\n    return itsHttp; \n}", "path": "test\\src\\java\\com\\gliffy\\test\\restunit\\http\\RESTTree.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Post does two things.\n * <ul>\n * <li>If posting to an existing URL, it replaces the data there with the 'data' parameter</li>\n * <li>If posting to a non-existing URL, it puts data at post_url/name_param with the contents of the data param</li>\n * </ul>\n */\n", "func_signal": "protected void doPost(HttpServletRequest request, HttpServletResponse response)\n    throws IOException", "code": "{\n    itsLogger.debug(\"POST to \" + getPath(request));\n    String newData = request.getParameter(\"data\");\n    if (newData == null)\n    {\n        response.sendError(HttpServletResponse.SC_BAD_REQUEST,\"'data' is required\");\n        return;\n    }\n\n    String data = findData(request);\n    if (data == null)\n    {\n        itsLogger.debug(\"Creating data\");\n        String name = request.getParameter(\"name\");\n        if (name == null)\n        {\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST,\"'name' is required\");\n            return;\n        }\n        else\n        {\n            String path = saveNewUrl(request,newData,name);\n            itsLogger.debug(path + \" created\");\n            response.setStatus(HttpServletResponse.SC_OK);\n            response.getWriter().println(path);\n        }\n    }\n    else\n    {\n        itsLogger.debug(\"Updating data\");\n        saveData(request,newData);\n        response.setStatus(HttpServletResponse.SC_OK);\n    }\n}", "path": "test\\src\\java\\com\\gliffy\\test\\restunit\\servlet\\TestServlet.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Returns the string form of this ContentType.\n * @return a string that should match the HTTP spec and be usable in the <tt>Content-Type</tt> header\n */\n", "func_signal": "public String toString()", "code": "{\n    if (getEncoding() != null)\n        return getMimeType() + \";\" + CHARSET + \"=\" + getEncoding();\n    else\n        return getMimeType();\n}", "path": "src\\java\\com\\gliffy\\restunit\\http\\ContentType.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** A deep-ish copy of this object.  All collections are passed to new colleciton objects in the new object, so they will be backed by the same references, however\n * they can be independently changed\n * @return a clone of this object.\n */\n", "func_signal": "public Object clone()", "code": "{\n    try\n    {\n        RestCallResponse clone = (RestCallResponse)super.clone();\n        clone.setHeaders(new HashMap<String,String>(getHeaders()));\n        clone.setBannedHeaders(new HashSet<String>(getBannedHeaders()));\n        clone.setRequiredHeaders(new HashSet<String>(getRequiredHeaders()));\n        return clone;\n    }\n    catch (CloneNotSupportedException e)\n    {\n        throw new RuntimeException(e);\n    }\n}", "path": "src\\java\\com\\gliffy\\restunit\\RestCallResponse.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Performs an HTTP POST.\n * @param request the request describing the POST.\n * @return a response\n * @throws IOException if HttpURLConnection generated an IO Exception\n */\n", "func_signal": "public HttpResponse post(HttpRequest request)\n    throws IOException", "code": "{\n    HttpURLConnection connection = getConnection(request);\n    connection.setRequestMethod(\"POST\");\n    connection.setDoOutput(true);\n    connection.connect();\n    setBody(request,connection);\n    HttpResponse response = createResponse(connection);\n    connection.disconnect();\n    return response;\n}", "path": "src\\java\\com\\gliffy\\restunit\\http\\JavaHttp.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Skips the call, generating a result that indicates that.  This is preferable to creating\n * RestCallResults yourself as it maintains a consistent means of vending this objects.\n * @param call the call to skip\n * @return a RestCallResult that indicates that this call was skipped.\n */\n", "func_signal": "public RestCallResult skip(RestCall call)", "code": "{\n    RestCallResult result = initializeResult(call);\n    result.setResult(Result.SKIP);\n    return result;\n}", "path": "src\\java\\com\\gliffy\\restunit\\Executor.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Entries here indicate that a header is required and that it should have the given value in order for the call to be considered successful.\n * @return a map of headers and their expected values required for this call to be considered successful\n */\n", "func_signal": "public Map<String,String> getHeaders()", "code": "{\n    if (itsHeaders == null)\n        itsHeaders = new HashMap<String,String>();\n    return itsHeaders; \n\n}", "path": "src\\java\\com\\gliffy\\restunit\\RestCallResponse.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Executes the test.\n * @param test the test to execute.\n * @return returns the results of the test.  Will not throw an exception and will not return null.\n * */\n", "func_signal": "public RestTestResult runTest(RestTest test)", "code": "{\n    itsLogger.debug(\"Running test \" + test.getName());\n    List<RestCallResult> results = new ArrayList<RestCallResult>(test.getCalls().size());\n    boolean skipRest = false;\n    boolean success = true;\n    for (RestCall call: test.getCalls())\n    {\n        if (call.getURL() == null)\n            call.setURL(test.getDefaultURL());\n        RestCallResult result;\n        if (skipRest)\n        {\n            result = itsExecutor.skip(call);\n        }\n        else\n        {\n            result = itsExecutor.execute(call);\n            if (result.getResult() != Result.PASS)\n            {\n                success = false;\n                skipRest = true;\n            }\n        }\n        results.add(result);\n    }\n    RestTestResult result = new RestTestResult();\n    result.setSuccess(success);\n    result.setDetailedResults(results);\n    return result;\n}", "path": "src\\java\\com\\gliffy\\restunit\\RestUnit.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Executes a rest call.  No derived calls are executed.  If the http implementation has not been set, this will\n * throw an {@link java.lang.IllegalStateException}.\n * @param call the call to execute.\n * @return the results of the call.  This will always return, no exceptions are thrown from this method\n */\n", "func_signal": "public RestCallResult execute(RestCall call)", "code": "{\n    if (getHttp() == null)\n        throw new IllegalStateException(\"No HTTP implementation configured\");\n\n    itsLogger.debug(\"Starting call \" + call.getName());\n    long callStartTime = System.currentTimeMillis();\n    RestCallResult executionResult = initializeResult(call);\n\n    try\n    {\n        HttpRequest request = itsRequestFactory.createRequest(call);\n        itsLogger.debug(\"Request created for \" + request.getURL().toString());\n        HttpResponse response = null;\n\n        if (call.getMethod().equalsIgnoreCase(\"get\"))\n            response = getHttp().get(request);\n        else if (call.getMethod().equalsIgnoreCase(\"head\"))\n            response = getHttp().head(request);\n        else if (call.getMethod().equalsIgnoreCase(\"put\"))\n            response = getHttp().put(request);\n        else if (call.getMethod().equalsIgnoreCase(\"post\"))\n            response = getHttp().post(request);\n        else if (call.getMethod().equalsIgnoreCase(\"delete\"))\n            response = getHttp().delete(request);\n        else\n            throw new IllegalArgumentException(call.getMethod() + \" is not a supported HTTP method\");\n\n        itsLogger.debug(\"Received response\");\n\n        populateResult(call,executionResult,response);\n        return executionResult;\n    }\n    catch (Throwable e)\n    {\n        executionResult.setResult(Result.EXCEPTION);\n        executionResult.setThrowable(e);\n    }\n    executionResult.setExecutionTime(System.currentTimeMillis() - callStartTime);\n    itsLogger.debug(\"Test execution complete\");\n    return executionResult;\n}", "path": "src\\java\\com\\gliffy\\restunit\\Executor.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Performs an HTTP PUT. \n * @param request the request describing the PUT.\n * @return a response\n * @throws IOException if HttpURLConnection generated an IO Exception\n */\n", "func_signal": "public HttpResponse put(HttpRequest request)\n    throws IOException", "code": "{\n    HttpURLConnection connection = getConnection(request);\n    connection.setRequestMethod(\"PUT\");\n    connection.setDoOutput(true);\n    connection.connect();\n    setBody(request,connection);\n    HttpResponse response = createResponse(connection);\n    connection.disconnect();\n    return response;\n}", "path": "src\\java\\com\\gliffy\\restunit\\http\\JavaHttp.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Performs an HTTP HEAD. \n * @param request the request describing the HEAD.\n * @return a response\n * @throws IOException if HttpURLConnection generated an IO Exception\n */\n", "func_signal": "public HttpResponse head(HttpRequest request)\n    throws IOException", "code": "{\n    HttpURLConnection connection = getConnection(request);\n    connection.setRequestMethod(\"HEAD\");\n    connection.connect();\n    HttpResponse response = createResponse(connection);\n    connection.disconnect();\n    return response;\n}", "path": "src\\java\\com\\gliffy\\restunit\\http\\JavaHttp.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Entries here indicate that the header <b>must not</b> be part of the response.\n * @return a set of headers that must not be part of the response for this call to be considered successful. */\n", "func_signal": "public Set<String> getBannedHeaders()", "code": "{\n    if (itsBannedHeaders == null)\n        itsBannedHeaders = new HashSet<String>();\n    return itsBannedHeaders; \n\n}", "path": "src\\java\\com\\gliffy\\restunit\\RestCallResponse.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Sets the base URL against which call urls are appended.\n * This allows call urls to be relative to some externalized server, if needed\n * @param i the url\n */\n", "func_signal": "public void setBaseURL(String i)", "code": "{\n    itsBaseURL = i; \n    itsRequestFactory = new HttpRequestFactory(itsBaseURL);\n    itsLogger.debug(\"New HttpRequestFactory created with base url \" + itsBaseURL);\n}", "path": "src\\java\\com\\gliffy\\restunit\\Executor.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/** Returns a content type based on the \"Content-Type\" header passed in.\n * @param string the result of getting the \"Content-Type\" header; may be null\n * @return a ContentType object if the string could be parsed, otherwise null\n */\n", "func_signal": "public static ContentType getContentType(String string)", "code": "{\n    if (string != null)\n    {\n        Matcher matcher = theCharsetPattern.matcher(string);\n        if (matcher.matches())\n        {\n            int group = 1;\n            String mimeType = matcher.group(group++).toLowerCase().trim();\n            String modifier = matcher.group(group++).toLowerCase().trim();\n            String value = matcher.group(group++).trim();\n            if (modifier.equals(CHARSET))\n                return new ContentType(mimeType,value);\n            else\n                return new ContentType(mimeType,null);\n        }\n        else\n        {\n            return new ContentType(string.toLowerCase().trim(),null);\n        }\n    }\n    else\n    {\n        return null;\n    }\n}", "path": "src\\java\\com\\gliffy\\restunit\\http\\ContentType.java", "repo_name": "davetron5000/restunit", "stars": 1, "license": "apache-2.0", "language": "java", "size": 3444}
{"docstring": "/**\n * Return a String representation of a String, with spelled\n * out representations of newlines, tabs, etc.\n * Example: spelled(32) = \" \";\n * Example: spelled('\\n') = \"\\\\n\";\n */\n", "func_signal": "public static String spelled(String str)", "code": "{\n\n\t\tStringBuilder output = new StringBuilder();\n\t\ttry {\n\t\t\tspelled(str, output);\n\t\t} catch (IOException e) {\n\t\t\tthrow new Error(e);\n\t\t}\n\t\treturn output.toString();\n\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Put the current index in token.start and return true.\n * Intended to be used like this:\n * <code>\n * static Token token = new Token();\n * void parse(SourceReader read) {\n *   if(reader.startToken(token) && reader.matches(\"myKeyword\", true) && reader.endToken(token)) {\n * \t   // Add a copy of the Token to the token list.\n *   }\n * }\n * </code>\n * @param token\n * @return\n */\n", "func_signal": "public boolean startToken(Token token)", "code": "{\n\n\ttoken.start = index;\n\treturn true;\n\t\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Read a block delimited by \"start\" and \"end\" delimiters. It deals with nested blocks, e.g.\n * with '{' and '}', it will match '{{}}' in one piece.\n * The escape character (escapeChar) allows to include the endDelimiter in the block,\n * e.g. with '\"' and '\"' delimiters, and '\\\\' escapeChar, there can be escape sequence in\n * what looks obviously like a String literal.\n * Note : the final end delimiter is eaten, No need to skip it.\n * @param start the start delimiter\n * @param end the end delimiter\n * @return the content of the block\n * @throws org.ubi.SyntaxError\n * @throws java.io.IOException\n */\n", "func_signal": "public String readBlock(String start, String end, char escapeChar) throws SyntaxError, EOFException", "code": "{\n\n    skipWhitespace();\n    mark();\n    if(!matches(start, true)) {\n        char c = read();\n        reset();\n        throw new SyntaxError(getLocation(), \"Trying to read block delimited by \"\n        \t\t+spelled(start)+spelled(end)+\", but \"+spelled(c)+\" found instead.\");\n    }\n\n    StringBuilder output = new StringBuilder();\n\n    int count = 1;\n    char chr;\n\n    try { reading: while(true) {\n\n        if(matches(end, true)) {\n            if(--count <= 0) {\n                break reading;\n            }\n        } else if(matches(start, true)) {\n            ++count;\n        } else {\n            chr = read();\n            if(chr == escapeChar) {\n                output.append(chr);\n                chr = read();\n            }\n            output.append(chr);\n        }\n\n    } } catch(EOFException e) {\n    \t// Normal operation\n    }\n\n    return output.toString();\n\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Test if a \"candidate\" matches the next character in the content, and if there's\n * characters other than \"A-Za-z0-9_\" after iti\n * @param candidate\n * @param keepEnd\n * @return\n * @throws EOFException\n */\n", "func_signal": "public boolean matchesNonident(String candidate, boolean keepEnd) throws EOFException", "code": "{\n\tint mark = mark();\n\tboolean result = matches(candidate, true);\n\tchar c = peek();\n\tresult &= !((c == '_') || Character.isLetterOrDigit(c));\n\tif(!keepEnd) {\n\t\treset(mark);\n\t}\n\treturn result;\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Test if a \"candidate\" matches the next character in the content, and if there's\n * whitespace after it.\n * @param candidate\n * @param keepEnd\n * @return\n * @throws EOFException\n */\n", "func_signal": "public boolean matchesSpaced(String candidate, boolean keepEnd) throws EOFException", "code": "{\n\tint mark = mark();\n\tboolean result = matches(candidate, true) && hasWhitespace(false);\n\tif(!keepEnd) {\n\t\treset(mark);\n\t}\n\treturn result;\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Put the current index in token.end and return true.\n * Intended to be used like this:\n * <code>\n * static Token token = new Token();\n * void parse(SourceReader read) {\n *   if(reader.startToken(token) && reader.matches(\"myKeyword\", true) && reader.endToken(token)) {\n * \t   // Add a copy of the Token to the token list.\n *   }\n * }\n * </code>\n * @param token\n * @return\n */\n", "func_signal": "public boolean endToken(Token token)", "code": "{\n \n\ttoken.length = index - token.start;\n\treturn true;\n\t\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Read the content of a the file pointed by \"file\"\n * @param file The file object from which to read\n * @return a SourceReader reading from the file content\n * @throws java.io.IOException if file can't be found or opened for reading\n * (or any other I/O exception, for that matter).\n */\n", "func_signal": "public static String readToString(File file) throws IOException", "code": "{\n    char[] buffer = new char[8192];\n    FileReader fR = new FileReader(file);\n    StringBuilder content = new StringBuilder((int) file.length());\n    int length;\n    while((length = fR.read(buffer)) != -1) {\n        content.append(buffer, 0, length);\n    }\n    return content.toString();\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * @return the current line number\n */\n", "func_signal": "public int getLineNumber()", "code": "{\n    int lineNumber = 0;\n    while(lineNumber < newlineIndices.size() && newlineIndices.get(lineNumber).intValue() <= index) {\n        lineNumber++;\n    }\n    return lineNumber + 1;\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * @return the current position in line (e.g. number of characters since the last newline\n */\n", "func_signal": "public int getLinePos()", "code": "{\n    int lineNumber = getLineNumber();\n    if(lineNumber == 1) {\n        return index + 1;\n    }\n\t\treturn index - newlineIndices.get(getLineNumber() - 2).intValue() + 1;\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Test if a \"candidate\" matches the next characters in the content.\n * @param candidate\n * @param keepEnd If false, will reset to the initial position before returning.\n * If true, will stay after the matched candidate.\n * @param caseMode either Case.SENSITIVE or Case.INSENSITIVE\n * @return true if the candidate matches, false otherwise.\n */\n", "func_signal": "public boolean matches(String candidate, boolean keepEnd, CaseSensibility caseMode) throws EOFException", "code": "{\n\n    mark();\n    int i = 0;\n    char c, c2;\n    boolean result = true;\n    while(i < candidate.length()) {\n        c = read();\n        c2 = candidate.charAt(i);\n        if(c2 != c) {\n            if((caseMode == CaseSensibility.SENSITIVE) || (Character.toLowerCase(c2) != Character.toLowerCase(c))) {\n                result = false;\n                break;\n            }\n        }\n        i++;\n    }\n    if(!result || !keepEnd) {\n        reset();\n    }\n\n    return result;\n\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Read as many times candidates as we can ! Ignoring any char\n * in 'ignored'.\n * @param candidates\n * @param ignored\n * @param keepEnd\n * @return\n */\n", "func_signal": "public String readMany(String candidates, String ignored, boolean keepEnd) throws EOFException", "code": "{\n\n    StringBuilder sB = new StringBuilder();\n\n    int myMark = mark();\n    while(hasNext()) {\n        char c = read();\n        if(candidates.indexOf(c) != -1) {\n            sB.append(c);\n        } else if(ignored.indexOf(c) != -1) {\n            // look up in the sky, and think of how lucky you are and others aren't.\n        } else {\n        \tif(keepEnd) {\n        \t\trewind(1); // We went one too far.\n        \t}\n            break;\n        }\n    }\n\n    if(!keepEnd) {\n        reset(myMark);\n    }\n\n    return sB.toString();\n\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Read until the end of file, and return the result.\n */\n", "func_signal": "public String readUntilEOF()", "code": "{\n\n    StringBuilder output = new StringBuilder();\n    \n    try { while(hasNext()) {\n       output.append(read());\n    } } catch(EOFException e) {\n    \t// Well, that's the point\n    }\n\n    return output.toString();\n\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Read a C-style character literal, e.g. any character or an escape sequence,\n * and return it as a char.\n */\n", "func_signal": "@SuppressWarnings(\"fallthrough\")\n\tpublic char readCharLiteral() throws EOFException, SyntaxError", "code": "{\n\n    mark();\n    char c = read();\n    switch(c) {\n        case '\\'':\n            throw new SyntaxError(getLocation(), \"Empty char literal !\");\n        case '\\\\':\n            char c2 = read();\n            switch(c2) {\n                case '\\\\': // backslash\n                    c = '\\\\'; break;\n                case '0': // null char\n                    c = '\\0'; break;\n                case 'n': // newline\n                    c = '\\n'; break;\n                case 't': // tab\n                    c = '\\t'; break;\n                case 'b': // backspace\n                    c = '\\b'; break;\n                case 'f': // form feed\n                    c = '\\f'; break;\n                case 'r': // carriage return\n                    c = '\\r'; break;\n                case '\\'': // simple quote\n                    c = '\\''; break;\n                default:\n                \tthrow new SyntaxError(getLocation(), \"Invalid escape sequence : \\\\\"+spelled(c));\n            }\n        // intentional fallthrough\n        default:\n            c2 = read();\n            if(c2 != '\\'') {\n            \tthrow new SyntaxError(getLocation(), \"Char literal too long. Expected ', found \"+spelled(c2));\n            }\n            return c;\n    }\n    \n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Read a C-style name (a string containing [A-Za-z0-9_] characters) and return it.\n * @return the read name\n */\n", "func_signal": "public boolean skipName() throws EOFException", "code": "{\n\n    if(hasNext()) {\n        char chr = read();\n        if(!Character.isLetter(chr) && chr != '_') { \n            rewind(1);\n            return false;\n        }\n    }\n\n    read : while(hasNext()) {\n        char chr = read();\n        if(!Character.isLetterOrDigit(chr) && chr != '_' && chr != '!') {\n        \trewind(1);\n            break read;\n        }\n    }\n\n    return true;\n\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Skip the next characters until a newline.\n * @throws java.io.EOFException\n */\n", "func_signal": "public void skipLine() throws EOFException", "code": "{\n    while(read() != '\\n') {\n    \t// Go on with the loop, don't look back.\n    }\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Create a new syntax error at specified location with specified message\n * @param location\n * @param message\n */\n", "func_signal": "public SyntaxError(FileLocation location, String message)", "code": "{\n    super(message+location);\n    this.location = location;\n    this.simpleMessage = message;\n}", "path": "src\\org\\ubi\\SyntaxError.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Read until one of the Strings in \"matches\" matches, and return the characters read.\n * @param readUntil The potential end delimiters\n * @param keepEnd If false, leave the position before the matching end delimiter.\n * If true, include the matching delimiter in the returned String, and leave the\n * position after.\n * @throws java.io.EOFException\n */\n", "func_signal": "public String readUntil(String[] matches, boolean keepEnd) throws EOFException", "code": "{\n\n    StringBuilder sB = new StringBuilder();\n    \n    try { while(hasNext()) {\n        for(String match: matches) {\n            if(matches(match, keepEnd, CaseSensibility.SENSITIVE)) {\n                if(keepEnd) {\n                    sB.append(match);\n                }\n                return sB.toString();\n            }\n        }\n        sB.append(read());\n    } } catch(EOFException e) {\n    \t// Normal operation.\n    }\n\n    return sB.toString();\n\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Read one character from the source at current position.\n * @return The character read\n * @throws EOFException When the end of the file is reached.\n */\n", "func_signal": "public char read() throws EOFException", "code": "{\n    if(index + 1 > content.length) {\n        throw new EOFException(\"Parsing ended. Parsed\"+index\n        \t\t+\" chars, \"+getLineNumber()+\" lines total.\");\n    }\n    char character = content[index++];\n    if(character == '\\n') {\n        if(newlineIndices.isEmpty() || newlineIndices.get(newlineIndices.size() - 1).intValue() < index) {\n            newlineIndices.add(new Integer(index));\n        }\n    }\n    return character;\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Return true if there's any whitespace after the current position.\n * @param keep If true, will have the same effect as skipWhitespace\n * If false, the position will be left unchanged.\n * @return true if there was any whitespace.\n * @throws java.io.IOException Go look in the closet, 3rd door left.\n */\n", "func_signal": "public boolean hasWhitespace(boolean skip) throws EOFException", "code": "{\n\n    boolean has = false;\n    int myMark = mark();\n    while(hasNext()) {\n        int c = read();\n        if(Character.isWhitespace(c)) {\n        \thas = true;\n        } else {\n        \trewind(1);\n        \tbreak;\n        }\n    }\n\n    if(!skip) {\n        reset(myMark);\n    }\n\n    return has;\n\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Read a string literal, e.g. enclosed by \"delimiter\", and with C-like escape sequences,\n * and return it.\n * Note: eats the final '\"', no need to skip it.\n * @param delimiter The delimitr, e.g. \" (C-like), or ' (e.g. Python-like)\n */\n", "func_signal": "public String readStringLiteral(char delimiter) throws EOFException", "code": "{\n\n    StringBuilder buffer = new StringBuilder();\n    char c;\n    reading : while(true) {\n        mark();\n        c = read();\n        switch(c) {\n            case '\\\\':\n                char c2 = read();\n                switch(c2) {\n                    case '\\\\': // backslash\n                        buffer.append('\\\\'); break;\n                    case '0': // null char\n                        buffer.append('\\0'); break;\n                    case 'n': // newline\n                        buffer.append('\\n'); break;\n                    case 't': // tab\n                        buffer.append('\\t'); break;\n                    case 'b': // backspace\n                        buffer.append('\\b'); break;\n                    case 'f': // form feed\n                        buffer.append('\\f'); break;\n                    case 'r': // return\n                        buffer.append('\\r'); break;\n                    default: // delimiter\n                        if(c2 == delimiter) { // freakin' java switches. *growl*\n                            buffer.append(delimiter);\n                        } break;\n                }\n                break;\n            default: // TODO : wonder if newline is a syntax error in a string literal\n            \tif(c == delimiter) {\n            \t\tbreak reading;\n            \t}\n                buffer.append(c);\n        }\n    }\n\n    return buffer.toString();\n\n}", "path": "src\\org\\ubi\\SourceReader.java", "repo_name": "fasterthanlime/ubi", "stars": 0, "license": "None", "language": "java", "size": 140}
{"docstring": "/**\n * Add FileIndexer file set\n */\n", "func_signal": "public void addFileIndexerSet()", "code": "{\n\tIFileIndex ifi = new FileIndex();\n\t\n\tString[] arr = { \"/sdcard\", \"/data\", \"/system\" };\n\tsetList.addAll(ifi.getFiles(arr));\n}", "path": "src\\de\\otype\\android\\defac\\datacollect\\DataSets.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/* ===================================================\n * PRIVATE\n * =================================================== */\n", "func_signal": "private HashMap<String,Integer> readMemInfoFromProc()", "code": "{\n    \tBufferedReader bfr;\n\tFileInputStream fin;\n\tString memoryInfo = \"/proc/meminfo\";\n\tHashMap<String,Integer> mhash = new HashMap<String,Integer>();\n\t\n\ttry\n\t{\n\t\tfin = new FileInputStream (new File(memoryInfo));\n\t    bfr = new BufferedReader(new InputStreamReader(fin), 8);\n\t    String line;\t\t    \n\t    while ((line = bfr.readLine()) != null) {\n\t    \tString arr[] = line.split(\":\");\t\t    \t\n\t    \tString arrr[] = (arr[1].trim()).split(\" \");\n\t    \tmhash.put(arr[0].toUpperCase(), Integer.parseInt(arrr[0]));\n\t    \tLog.d(TAG, \"KEY = \" + arr[0] + \" VALUE = \" + mhash.get(arr[0]));\n\t    }\n\t    bfr.close();\n\t} catch (FileNotFoundException fnfe) {\n\t\tLog.e(TAG, \"File \" + memoryInfo + \" was not found!\");\n\t} catch (IOException e) {\n\t\tLog.e(TAG, \"Unable to read from file\");\n\t}\n\t\n    \treturn mhash;\n    }", "path": "src\\de\\otype\\android\\defac\\datacollect\\implementation\\MemoryStatus.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Add Filesystem set\n */\n", "func_signal": "public void addFileSystemSet()", "code": "{\n\tIFileSystem ifs = new FileSystem();\n\tsetList.add(\"&NUM_OF_FILESYSTEM=\" + ifs.getNumberOfFileSystems());\n\tint count = 0;\n\t\n\tfor (String fs : ifs.getSizeInformation().keySet()) {\n\t\tcount++;\n\t\tsetList.add(\"&FILESYSTEM_\" + count + \"=\" + fs);\n\t\tsetList.add(\"&FILESYSTEM_\" + count + \"_TOTAL=\" + ifs.getSizeInformation().get(fs)[0]);\n\t\tsetList.add(\"&FILESYSTEM_\" + count + \"_USED=\" + ifs.getSizeInformation().get(fs)[1]);\n\t\tsetList.add(\"&FILESYSTEM_\" + count + \"_AVAIL=\" + ifs.getSizeInformation().get(fs)[2]);\n\t}\n}", "path": "src\\de\\otype\\android\\defac\\datacollect\\DataSets.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * The control loop thread which checks every XX seconds\n * if the ruby collector daemon is still running\n */\n", "func_signal": "public void startControlLoop()", "code": "{\n\tLog.d(TAG, \"Starting new Control Loop thread\");\n\tclr = new ControlLoopRunnable();\n\tnew Thread(clr).start();\n}", "path": "src\\de\\otype\\android\\defac\\datacollect\\services\\RubyService.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * \n * @param serviceName\n * @param services\n * @return\n */\n", "func_signal": "public boolean checkServiceStatus(String serviceName, List<ActivityManager.RunningServiceInfo> services)", "code": "{\n\tboolean running = false;\n\trunthrough: for(ActivityManager.RunningServiceInfo serviceManager : services){\n\t\tif(serviceManager.service.toString().contains(serviceName)){\n\t\t\trunning = true;\n\t\t\tbreak runthrough;\n\t\t}\n\t} \n\treturn running;\n}", "path": "src\\de\\otype\\android\\defac\\DefAC.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\t\n\t/* Unpack RBSCRIPTS zip file */\n\tif(!getFileStreamPath(RBSCRIPTS).exists()) {\n\t\tunzippingRubyScriptsFromRawResource();\n\t}\t\t\t\n}", "path": "src\\de\\otype\\android\\defac\\DefAC.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Add Battery Capacity features set\n */\n", "func_signal": "public void addBatteryCapacitySet()", "code": "{\n\tIBatteryStatus ibs = new BatteryStatus();\n\tsetList.add(\"&BATT_CAPACITY=\" + ibs.getCapacity());\t\t\n}", "path": "src\\de\\otype\\android\\defac\\datacollect\\DataSets.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * \n */\n", "func_signal": "public List<ActivityManager.RunningServiceInfo> getRunningServices()", "code": "{\n\tActivityManager rubyStartManager = (ActivityManager)getSystemService(ACTIVITY_SERVICE); \n\treturn rubyStartManager.getRunningServices(1000);\n}", "path": "src\\de\\otype\\android\\defac\\DefAC.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * The constructor creates a filter, sets the boolean to \"true\" and calls countMedia() for \"/system\", \"/data\" and \"/sdcard\".\n */\n", "func_signal": "public MediaFind()", "code": "{\n\tFilenameFilter filter = new FilenameFilter() {\n\t\t\n\t\tpublic boolean accept(File dir, String filename) {\n\t\t\treturn true;\t\t\t       \n\t\t     \t}\n\t}; \n\tboolean recurse = true;\n\t\n        this.countMedia(new File(\"/system\"), filter, recurse);\n        this.countMedia(new File(\"/data\"), filter, recurse);\n        this.countMedia(new File(\"/sdcard\"), filter, recurse);\n}", "path": "src\\de\\otype\\android\\defac\\datacollect\\implementation\\MediaFind.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Starts the Ruby Collector Daemon\n */\n", "func_signal": "public void startRubyCollector()", "code": "{\t\t\n\tLog.i(TAG, \"Starting Ruby Collector { \" + rubyExecutable + \" \" + defExecutable + \" start }\");\n\ttry {\t\t\t\n\t\t/* Go ahead and start the daemon */\n\t\tRuntime rt = Runtime.getRuntime(); \n\t\tString cmd = rubyExecutable + \" \" + defExecutable + \" start\";\n\t\tProcess prcs = rt.exec(cmd);\n\t\t\n\t\t/* Put a time stamp into logs */\n\t\tLogging.addTimeToRestartLog();\n\t} catch (IOException ioe) {\n\t\tLog.e(TAG, ioe.getMessage());\n\t}\n}", "path": "src\\de\\otype\\android\\defac\\datacollect\\services\\RubyService.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Stops the service\n */\n", "func_signal": "public void stopService()", "code": "{\n\tLog.i(TAG, \"Stopping Ruby Collector Service\");\n\tserviceIsRunning = false;\n\ttry {\n\t\tclr.stop();\n\t} catch (NullPointerException npe) {\n\t\tLog.e(TAG, \"Uh-oh! Collector Thread does not exist anymore!\");\n\t}\n\tstopRubyCollector();\n\tstopSelf();\n}", "path": "src\\de\\otype\\android\\defac\\datacollect\\services\\RubyService.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * This method executes the shell command \"df\" in the runtime environment to get size-information about the existing filesystems.\n * @return a HashMap with the full path name as the key, and an array of size-information [total size] [occupied space] [available space] as the corresponding value.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic HashMap<String, int[]> getSizeInformation()", "code": "{\n\t//Array of [total size] [occupied space] [available space]\n\tint[] sizeInformation = new int[3];\n\tHashMap<String, int[]> map = new HashMap();\n\tString line = null;\n\t\n\tString[] cmd_elements = {\"df\"};\n\ttry {\n\t\tProcess prcs = Runtime.getRuntime().exec(cmd_elements);\n\t\tBufferedReader bfr = new BufferedReader(new InputStreamReader(prcs.getInputStream()), 8);\n\t\tString[] lineArr = new String[2];\n\t\tString[] lineArr2 = new String[6];\n\t\t\n\t\t\n\t\twhile ((line = bfr.readLine()) != null){\n\t\t\tlineArr = line.split(\":\");\n\t\t\tlineArr2 = lineArr[1].split(\" \");\n\t\t\t\n\t\t\tsizeInformation[0] = new  Integer(lineArr2[1].replace(\"K\", \"\")).intValue();\n\t\t\tsizeInformation[1] = new  Integer(lineArr2[3].replace(\"K\", \"\")).intValue();\n\t\t\tsizeInformation[2] = new  Integer(lineArr2[5].replace(\"K\", \"\")).intValue();\n\t\t\t\n\t\t\tmap.put(lineArr[0], sizeInformation);\n\t\t\t}\n\t} catch (IOException e) {\n\t\tLog.e(TAG, e.getMessage());\n\t}\t\t\n\treturn map;\t\t\n}", "path": "src\\de\\otype\\android\\defac\\datacollect\\implementation\\FileSystem.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * \n */\n", "func_signal": "public void unzippingRubyScriptsFromRawResource()", "code": "{\n\tInputStream brRubyScripts = getResources().openRawResource(R.raw.rbscripts);\n\ttry {\n\t\tFileOutputStream oswRubyScript = openFileOutput(RBSCRIPTS, 0);\n\t\tbyte[] buff = new byte[1024];\n\n\t\tint length = 0;\n\t\ttry {\n\t\t\twhile((length = brRubyScripts.read(buff,0,1024)) != -1){\n\t\t\t\toswRubyScript.write(buff,0,length);\n\t\t\t}\n\t\t\toswRubyScript.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t} catch (FileNotFoundException e) {\n\t\te.printStackTrace();\n\t}\n\n\ttry {\n\t\tZipEntry entry;\n\t\tZipFile zRbScripts = new ZipFile(getFileStreamPath(RBSCRIPTS));\n\t\tEnumeration e = zRbScripts.entries();\n\n\t\tString root = getFileStreamPath(RBSCRIPTS).getParent();\n\n\t\tString dir=\"\";\n\t\twhile((entry = (ZipEntry) e.nextElement())!=null) {\n\t\t\tLog.i(TAG, entry.getName());\n\n\t\t\tif(entry.isDirectory()) { \n\t\t\t\tdir = entry.getName();\n\t\t\t\tFile file = new File(root + \"/\" + dir);\n\t\t\t\tfile.mkdir();\n\t\t\t} else {\n\t\t\t\tBufferedWriter bfw = new BufferedWriter(new FileWriter(root + \"/\" + entry.getName()), 8);\n\t\t\t\tBufferedReader bfr = new BufferedReader(new InputStreamReader(zRbScripts.getInputStream(entry)), 8);\n\n\t\t\t\tString line;\n\t\t\t\twhile ((line = bfr.readLine())!=null) {\n\t\t\t\t\tbfw.write(line+\"\\n\");\n\t\t\t\t}\n\t\t\t\tbfw.close();\n\t\t\t}\n\n\t\t\tif(!e.hasMoreElements()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\de\\otype\\android\\defac\\DefAC.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Check if Ruby process is still running\n * @param processName\n * @return boolean\n */\n", "func_signal": "public static boolean isRunning(String processName)", "code": "{\t\t\n\tRuntime rt = Runtime.getRuntime();\n\tString line = null;\t\t\n\n\ttry {\n\t\tProcess p = rt.exec(\"/system/bin/ps\");\n\t\tBufferedReader bfr = new BufferedReader(new InputStreamReader(p.getInputStream()), 8);\n\t\twhile ((line = bfr.readLine()) != null) {\t\t\t\t\t\t\t\t\n\t\t\tif (line.contains(processName)) {\t\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\t\t\t\n\t} catch (IOException e) {\t\t\t\n\t\tLog.d(TAG, e.getMessage());\n\t}\t\t\t\t\n\treturn false;\n}", "path": "src\\de\\otype\\android\\defac\\datacollect\\services\\RubyService.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Add media file set\n */\n", "func_signal": "public void addMediaFindSet()", "code": "{\n\tIMediaFind imf = new MediaFind();\n\tsetList.add(\"&FILES_MUSIC_NO=\" + imf.getMusicNo());\n\tsetList.add(\"&FILES_VIDEO_NO=\" + imf.getVidNo());\n\tsetList.add(\"&FILES_PICT_NO=\" + imf.getPicNo());\n}", "path": "src\\de\\otype\\android\\defac\\datacollect\\DataSets.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * This method runs recursively through the structure of the filesystem. \n * @return number of media\n */\n", "func_signal": "private int[] countMedia(\n\t\tFile directory,\n\t\tFilenameFilter filter,\n\t\tboolean recurse)", "code": "{\n\t\n\t\n\t// Get files / directories in the directory\n\tFile[] entries = directory.listFiles(); \n\t\n\t\t\t// Go over entries\n\tfor (File entry : entries)\n\t{\n\t\t\n\t\t\t\t\t// If there is no filter or the filter accepts the \n\t\t// file / directory, add it to the list\n\t\t\n\t\t\t\n\t\tif (filter == null || filter.accept(directory, entry.getName()))\n\t\t{\n\t\t\t//Check if file is picture\n\t\t\tif ((entry.getName().toLowerCase().endsWith(\"jpg\"))   || \n\t \t\t\t(entry.getName().toLowerCase().endsWith(\"jpeg\")) ||\n\t \t\t\t(entry.getName().toLowerCase().endsWith(\"png\"))  ||\n\t \t\t\t(entry.getName().toLowerCase().endsWith(\"gif\"))  || \n\t \t\t\t(entry.getName().toLowerCase().endsWith(\"bmp\"))) {\n\t\t\t\t\tthis.mediaNo[0]++;\n\t \t\t\t}\n\t\t\t\n\t\t\t//Check if file is music\n\t\t\tif ((entry.getName().toLowerCase().endsWith(\"mp3\"))   || \n\t \t\t\t(entry.getName().toLowerCase().endsWith(\"wma\"))\t  ||\n\t\t \t\t(entry.getName().toLowerCase().endsWith(\"ogg\"))) {\n\t\t\t\t\tthis.mediaNo[1]++;\t\t\t\t\t\t\n\t \t\t\t}\n\t\t\t\n\t\t\t//Check if file is video\n\t\t\tif ((entry.getName().toLowerCase().endsWith(\"mpeg\"))   || \n\t\t\t\t(entry.getName().toLowerCase().endsWith(\"avi\"))) {\n\t\t\t\t\t\tthis.mediaNo[2]++;\n\t\t \t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\t// If the file is a directory and the recurse flag\n\t\t// is set, recurse into the directory\n\t\tif (recurse && entry.isDirectory())\n\t\t{\n\t\t\tcountMedia(entry, filter, recurse);\n\t\t}\n\t}\n\t\n\t// Return number of media files\n\treturn mediaNo;\t\t\n}", "path": "src\\de\\otype\\android\\defac\\datacollect\\implementation\\MediaFind.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Stops the Ruby Collector Daemon\n */\n", "func_signal": "public void stopRubyCollector()", "code": "{\t\t\t\t\t\n\tLog.i(TAG, \"Stopping Ruby Collector { \" + rubyExecutable + \" \" + defExecutable + \" stop }\");\n\ttry {\n\t\tRuntime rt = Runtime.getRuntime(); \n\t\tString cmd = rubyExecutable + \" \" + defExecutable + \" stop\";\n\t\tProcess prcs = rt.exec(cmd);\n\t} catch (IOException e) {\n\t\tLog.e(TAG, e.getMessage());\n\t}\n}", "path": "src\\de\\otype\\android\\defac\\datacollect\\services\\RubyService.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/* *************************************************\n * non-android stuff\n */\n", "func_signal": "private void _initializeMainScreen()", "code": "{\n\ttvDefStatus = (TextView) findViewById(R.id.defstatus);\n\ttvServiceState = (TextView) findViewById(R.id.serviceState);\n\ttvDefRCState = (TextView) findViewById(R.id.defrcState);\n\ttvLogfileSize = (TextView) findViewById(R.id.logfileSize);\n\ttvCurrentDate = (TextView) findViewById(R.id.currentDate);\n\ttvLastNumRestarts = (TextView) findViewById(R.id.lastNumRestarts);\n\ttvLastRestarts = (TextView) findViewById(R.id.lastRestarts);\n}", "path": "src\\de\\otype\\android\\defac\\DefAC.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Dataset linked list as a string\n * @return Dataset list as one single string\n */\n", "func_signal": "public String toString()", "code": "{\n\tString all = \"\";\n\tfor (String s : setList) {\n\t\tall += s;\n\t}\n\treturn all;\n}", "path": "src\\de\\otype\\android\\defac\\datacollect\\DataSets.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * \n * @param services\n */\n", "func_signal": "public void outputRunningServices(List<ActivityManager.RunningServiceInfo> services)", "code": "{\n\tfor(ActivityManager.RunningServiceInfo serviceManager : services){\n\t\tLog.i(TAG, serviceManager.service.toString());\n\t}\n}", "path": "src\\de\\otype\\android\\defac\\DefAC.java", "repo_name": "otype/defac", "stars": 1, "license": "None", "language": "java", "size": 116}
{"docstring": "// Read a string from file -- one that's prefixed by a 32-bit int with its length.\n", "func_signal": "public String readPString(FileInputStream s) throws IOException", "code": "{\n  int len = readInt32(s);\n  return readBasicString(s, len);\n}", "path": "cli_version\\Srf2Png.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Get the extension part from a filename string.\n", "func_signal": "public String extName(String filename)", "code": "{\n  int lastDot = filename.lastIndexOf('.');\n  if (lastDot < 0) return \"\";\n  return filename.substring(lastDot, filename.length());\n}", "path": "cli_version\\Srf2Png.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Turn a 16-bit color into a 24-bit one.\n", "func_signal": "public int decodeColor(byte b1, byte b2)", "code": "{\n  int r,g,b;\n  int v = ((b2 & 0xff) << 8) + (b1 & 0xff);\n  r = (v & 0xf800) << 8;\n  g = (v & 0x07c0) << 5;\n  b = (v & 0x001f) << 3;\n  return r + g + b;\n}", "path": "cli_version\\Srf2Png.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Write a little-endian int to the file.\n", "func_signal": "public void writeInt32(FileOutputStream s, int i) throws IOException", "code": "{\n  for (int j = 0; j < 4; j++) {\n    s.write(i & 255);\n    checksum += (i & 255);\n    i >>= 8;\n  }\n}", "path": "cli_version\\Png2Srf.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Read a little-endian int from the file.\n", "func_signal": "public int readInt32(FileInputStream s) throws IOException", "code": "{\n  int i = 0;\n  i = s.read() + (s.read() << 8) + (s.read() << 16) + (s.read() << 24);\n  return i;\n}", "path": "cli_version\\Srf2Png.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Read a little-endian short from the file.\n", "func_signal": "public int readInt16(FileInputStream s) throws IOException", "code": "{\n  int i = 0;\n  i = s.read() + (s.read() << 8);\n  return i;\n}", "path": "cli_version\\Png2Srf.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Convert a 7-bit inverted alpha value to 8-bit standard.\n", "func_signal": "public byte encodeAlpha(int a)", "code": "{\n  a = (255 - (a & 255)) >> 1;\n  if (a == 127) return (byte)128;\n  return (byte)a;\n}", "path": "cli_version\\Png2Srf.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Read a string from file -- one that's prefixed by a 32-bit int with its length.\n", "func_signal": "public String readPString(FileInputStream s) throws IOException", "code": "{\n  int len = readInt32(s);\n  byte[] buffer = new byte[len+1];\n  s.read(buffer, 0, len);\n  buffer[len] = 0; // Terminate string with a zero byte.\n  return new String(buffer);\n}", "path": "cli_version\\Png2Srf.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Convert a 7-bit inverted alpha value to 8-bit standard.\n", "func_signal": "public int decodeAlpha(byte b)", "code": "{\n  int a = (b & 255) << 1;\n  if (a >= 254) a = 255;\n  return 255 - a;\n}", "path": "cli_version\\Srf2Png.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Turn a 16-bit color into a 24-bit one.\n", "func_signal": "public int encodeColor(int c)", "code": "{\n  int r,g,b;\n  r = (c & 0xff0000) >> 19;\n  g = (c & 0x00ff00) >> 11;\n  b = (c & 0x0000ff) >> 3;\n  return (r << 11) + (g << 6) + b;\n}", "path": "cli_version\\Srf2Png.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Convert a 7-bit inverted alpha value to 8-bit standard.\n", "func_signal": "public byte encodeAlpha(int a)", "code": "{\n  a = (255 - (a & 255)) >> 1;\n  if (a == 127) return (byte)128;\n  return (byte)a;\n}", "path": "cli_version\\Srf2Png.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Write a little-endian short to the file.\n", "func_signal": "public void writeInt16(FileOutputStream s, int i) throws IOException", "code": "{\n  for (int j = 0; j < 2; j++) {\n    s.write(i & 255);\n    checksum += (i & 255);\n    i >>= 8;\n  }\n}", "path": "cli_version\\Png2Srf.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Turn a 16-bit color into a 24-bit one.\n", "func_signal": "public int encodeColor(int c)", "code": "{\n  int r,g,b;\n  r = (c & 0xff0000) >> 19;\n  g = (c & 0x00ff00) >> 11;\n  b = (c & 0x0000ff) >> 3;\n  return (r << 11) + (g << 6) + b;\n}", "path": "cli_version\\Png2Srf.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Read a little-endian int from the file.\n", "func_signal": "public int readInt32(FileInputStream s) throws IOException", "code": "{\n  int i = 0;\n  i = s.read() + (s.read() << 8) + (s.read() << 16) + (s.read() << 24);\n  return i;\n}", "path": "cli_version\\Png2Srf.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Write a string to file -- one that's prefixed by a 32-bit int with its length.\n", "func_signal": "public void writePString(FileOutputStream s, String string) throws IOException", "code": "{\n  writeInt32(s, string.length());\n  byte[] bytes = string.getBytes();\n  s.write(bytes);\n  addBytesToChecksum(bytes);\n}", "path": "cli_version\\Png2Srf.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Turn a 16-bit color into a 24-bit one.\n", "func_signal": "public int decodeColor(byte b1, byte b2)", "code": "{\n  int r,g,b;\n  int v = ((b2 & 0xff) << 8) + (b1 & 0xff);\n  r = (v & 0xf800) << 8;\n  g = (v & 0x07c0) << 5;\n  b = (v & 0x001f) << 3;\n  return r + g + b;\n}", "path": "cli_version\\Png2Srf.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Get the extension part from a filename string.\n", "func_signal": "public String extName(String filename)", "code": "{\n  int lastDot = filename.lastIndexOf('.');\n  if (lastDot < 0) return \"\";\n  return filename.substring(lastDot, filename.length());\n}", "path": "cli_version\\Png2Srf.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Write a little-endian short to the file.\n", "func_signal": "public void writeInt16(FileOutputStream s, int i) throws IOException", "code": "{\n  for (int j = 0; j < 2; j++) {\n    s.write(i & 255);\n    checksum += (i & 255);\n    i >>= 8;\n  }\n}", "path": "cli_version\\Srf2Png.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Write a little-endian int to the file.\n", "func_signal": "public void writeInt32(FileOutputStream s, int i) throws IOException", "code": "{\n  for (int j = 0; j < 4; j++) {\n    s.write(i & 255);\n    checksum += (i & 255);\n    i >>= 8;\n  }\n}", "path": "cli_version\\Srf2Png.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "// Write a string to file -- one that's prefixed by a 32-bit int with its length.\n", "func_signal": "public void writePString(FileOutputStream s, String string) throws IOException", "code": "{\n  writeInt32(s, string.length());\n  byte[] bytes = string.getBytes();\n  s.write(bytes);\n  addBytesToChecksum(bytes);\n}", "path": "cli_version\\Srf2Png.java", "repo_name": "jgreer/srf_converter", "stars": 1, "license": "None", "language": "java", "size": 9888}
{"docstring": "/**\n * Create a page.\n * Ensure it appears in AllPages.\n */\n", "func_signal": "public void testAllPages() throws Exception", "code": "{\n  String name = uniqueWikiPageName(\"AllPagesTest\");\n  editWikiPage(name, \"Should appear in all pages\", \"\", true);\n\n  HtmlPage allPages = getWikiPage(\"AllPages\");\n  assertTrue(allPages.getTitleText().endsWith(\"All Pages\"));\n  HtmlAnchor link = getAnchorByHrefContains(allPages, BASE_URL + \"/pages/test/\" + name);\n  assertEquals(name, link.asText());\n}", "path": "webtests\\net\\hillsdon\\reviki\\webtests\\TestAllPages.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "// Currently most things are considered valid, we split on first whitespace...\n", "func_signal": "public void testInvalidEntryIgnored() throws Exception", "code": "{\n  _store.set(new PageReferenceImpl(\"ConfigInterWikiLinks\"), \"\", -1, \"nospace\\r\\n\", \"\");\n  assertNoInterWikiLinks();\n}", "path": "src\\net\\hillsdon\\reviki\\web\\urls\\impl\\TestPageStoreConfiguration.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "/**\n */\n", "func_signal": "public PluginsImpl(final PageStore store)", "code": "{\n  _store = store;\n  _context = new DefaultPicoContainer();\n}", "path": "src\\net\\hillsdon\\reviki\\wiki\\plugin\\PluginsImpl.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "// Lucene allows multiple non-deleting readers and at most one writer at a time.\n// It maintains a lock file but we never want it to fail to take the lock, so serialize writes.\n", "func_signal": "public synchronized void index(final String path, final long revision, final String content) throws IOException, PageStoreException", "code": "{\n  if (_dir == null) {\n    return;\n  }\n  createIndexIfNecessary();\n  replaceDocument(FIELD_PATH, createWikiPageDocument(path, content));\n  rememberLastIndexedRevision(revision);\n}", "path": "src\\net\\hillsdon\\reviki\\search\\impl\\LuceneSearcher.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "// Eclipse generated, yes it is obsene but it's easy and correct. \n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n  final int prime = 31;\n  int result = 1;\n  result = prime * result + ((_refd == null) ? 0 : _refd.hashCode());\n  result = prime * result + ((_text == null) ? 0 : _text.hashCode());\n  result = prime * result + ((_wiki == null) ? 0 : _wiki.hashCode());\n  return result;\n}", "path": "src\\net\\hillsdon\\reviki\\wiki\\renderer\\creole\\LinkParts.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "/**\n * @param wikiName Wiki name.\n * @param pageName Page name/\n * @return A link.\n * @throws UnknownWikiException If wikiName is unknown.\n * @see #addWiki(String, String)\n */\n", "func_signal": "public String url(final String wikiName, final String pageName) throws UnknownWikiException", "code": "{\n  String formatString = _links.get(wikiName);\n  if (formatString == null) {\n    throw new UnknownWikiException();\n  }\n  return String.format(formatString, Escape.urlEncodeUTF8(URLOutputFilter.NULL.filterURL(pageName)));\n}", "path": "src\\net\\hillsdon\\reviki\\web\\urls\\InterWikiLinker.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "/**\n * Note the repository URL can be deep, it need not refer to the root of the\n * repository itself. We put pages in the root of what we're given.\n */\n", "func_signal": "public SVNPageStore(final DeletedRevisionTracker tracker, final BasicSVNOperations operations, final AutoPropertiesApplier autoPropertiesApplier, final MimeIdentifier mimeIdentifier)", "code": "{\n  _tracker = tracker;\n  _operations = operations;\n  _autoPropertiesApplier = autoPropertiesApplier;\n  _mimeIdentifier = mimeIdentifier;\n}", "path": "src\\net\\hillsdon\\reviki\\vc\\impl\\SVNPageStore.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "/**\n * Generates ins, del, span elements for additions, removals and unchanged\n * text respectively, all with class 'diff'.\n * \n * @param diffs Diffs.\n * @return The XHTML.\n */\n", "func_signal": "public String prettyXHTML(final LinkedList<Diff> diffs)", "code": "{\n  String xhtml = \"\";\n  for (Diff diff : diffs) {\n    String text = diff.text;\n    text = Escape.html(text);\n    text = text.replaceAll(\"\\n\", \"<br />\");\n    xhtml += tag(diff.operation, text);\n  }\n  return xhtml;\n}", "path": "src\\net\\hillsdon\\reviki\\web\\pages\\impl\\DiffGeneratorImpl.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "// This should be moved out of here...\n", "func_signal": "private View handle(final ConsumedPath path, final HttpServletRequest request, final HttpServletResponse response) throws Exception", "code": "{\n  final String initial = path.next();\n  // An internal hack (see index.jsp) to allow us to handle \"/\".\n  if (\"root\".equals(initial)) {\n    return new RedirectView(_applicationUrls.list());\n  }\n  else if (\"pages\".equals(initial)) {\n    return _choice.handle(path, request, response);\n  }\n  else if (\"jump\".equals(initial)) {\n    return _jumpToWiki.handle(path, request, response);\n  }\n  else if (\"list\".equals(initial)) {\n    return _list.handle(path, request, response);\n  }\n  throw new NotFoundException();\n}", "path": "src\\net\\hillsdon\\reviki\\web\\dispatching\\impl\\DispatcherImpl.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "/**\n * Splits camel case.\n * \n * Behaviour undefined for strings containing punctuation/whitespace.\n * Note that here uppercase is defined as !Character.isLowerCase(char)\n * notably, this includeds digits.\n */\n", "func_signal": "public static List<String> splitCamelCase(final String in)", "code": "{\n  List<String> result = new ArrayList<String>();\n  char[] chars = in.toCharArray();\n  int takenLength = 0;\n  boolean lastLower = false;\n  boolean nextLower = isNextLower(chars, -1);\n  for (int i = 0; i < chars.length; ++i) {\n    boolean currentUpper = !nextLower;\n    boolean lastUpper = !lastLower && i > 0;\n    nextLower = isNextLower(chars, i);\n\n    // Step up is e.g. aB, step down is Ab.\n    boolean stepUp = lastLower && currentUpper;\n    boolean nextStepDown = lastUpper && currentUpper && nextLower;\n    if (stepUp || nextStepDown) {\n      result.add(in.substring(takenLength, i));\n      takenLength = i;\n    }\n    lastLower = !currentUpper;\n  }\n  result.add(in.substring(takenLength));\n  return result;\n}", "path": "src\\net\\hillsdon\\reviki\\text\\WikiWordUtils.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "/**\n * With bonus null check.\n * \n * @return The page store.\n */\n", "func_signal": "private PageStore getDelegateInternal()", "code": "{\n  PageStore delegate = getDelegate();\n  if (delegate == null) {\n    throw new IllegalStateException(\"No delegate available!\");\n  }\n  return delegate;\n}", "path": "src\\net\\hillsdon\\reviki\\vc\\impl\\AbstractDelegatingPageStore.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "// See comment on index.\n", "func_signal": "public synchronized void delete(final String path, final long revision) throws IOException", "code": "{\n  createIndexIfNecessary();\n  deleteDocument(FIELD_PATH, path);\n  rememberLastIndexedRevision(revision);\n}", "path": "src\\net\\hillsdon\\reviki\\search\\impl\\LuceneSearcher.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "// commons-upload...\n", "func_signal": "private List<FileItem> getFileItems(final HttpServletRequest request) throws FileUploadException", "code": "{\n  FileItemFactory factory = new DiskFileItemFactory();\n  ServletFileUpload upload = new ServletFileUpload(factory);\n  List<FileItem> items = upload.parseRequest(request);\n  return items;\n}", "path": "src\\net\\hillsdon\\reviki\\web\\pages\\impl\\DefaultPageImpl.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "/**\n * The usual case of viewing an existing page.\n */\n", "func_signal": "public void testNoRevisionNoDiffViewsHead() throws Exception", "code": "{\n  // We should get all the links.\n  expectGetIncomingLinks(getCountIncomingLinks(MAX_NUMBER_OF_BACKLINKS_TO_DISPLAY));\n  PageInfo expectedPageInfo = expectGetContent();\n  expectRenderContent();\n  replay();\n  JspView view = (JspView) _page.get(THE_PAGE, ConsumedPath.EMPTY, _request, _response);\n  assertEquals(\"ViewPage\", view.getName());\n  // Check data provided to view.\n  assertNotNull(_request.getAttribute(DefaultPageImpl.ATTR_RENDERED_CONTENTS));\n  assertEquals(MAX_NUMBER_OF_BACKLINKS_TO_DISPLAY, ((Collection<?>) _request.getAttribute(ATTR_BACKLINKS)).size());\n  assertNull(_request.getAttribute(ATTR_BACKLINKS_LIMITED));\n  assertSame(expectedPageInfo, _request.getAttribute(ATTR_PAGE_INFO));\n  verify();\n}", "path": "src\\net\\hillsdon\\reviki\\web\\pages\\impl\\TestDefaultPageImplGet.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "/**\n * @param dir The search index lives here.\n *            If null is passed the search will behave as a null implementation.\n */\n", "func_signal": "public LuceneSearcher(final File dir, final RenderedPageFactory renderedPageFactory)", "code": "{\n  _dir = dir;\n  _renderedPageFactory = renderedPageFactory;\n}", "path": "src\\net\\hillsdon\\reviki\\search\\impl\\LuceneSearcher.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "/**\n * @return outgoing links in document order.\n * @throws IOException If we fail to parse. \n */\n", "func_signal": "public List<String> findOutgoingWikiLinks() throws IOException", "code": "{\n  final List<String> outgoing = new ArrayList<String>();\n  SAXParser parser = new SAXParser();\n  parser.setContentHandler(new DefaultHandler() {\n    public void startElement(final String uri, final String localName, final String name, final Attributes attributes) throws SAXException {\n      if (localName.equals(\"A\")) {\n        boolean wikiPageClass = false;\n        String href = null;\n        for (int i = 0, len = attributes.getLength(); i < len; ++i) {\n          if (\"class\".equals(attributes.getLocalName(i))) {\n            wikiPageClass = hasWikiPageClass(attributes.getValue(i));\n          }\n          else if (\"href\".equals(attributes.getLocalName(i))) {\n            href = attributes.getValue(i);\n          }\n        }\n        if (wikiPageClass && href != null) {\n          int lastSlash = href.lastIndexOf('/');\n          outgoing.add(href.substring(lastSlash + 1));\n        }\n      }\n    }\n  });\n  try {\n    parser.parse(new InputSource(new StringReader(_rendered)));\n  }\n  catch (final SAXException ex) {\n    throw new IOException(\"Parse error\") {\n      private static final long serialVersionUID = 1L;\n      @Override\n      public Throwable getCause() {\n        return ex;\n      }\n    };\n  }\n  return outgoing;\n}", "path": "src\\net\\hillsdon\\reviki\\wiki\\RenderedPage.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "/**\n * Reusable template that cleans up properly.\n * @param <T> Result type.\n * @param operation Operation to perform.\n * @return Result from operation.\n * @throws IOException On index read error,\n * @throws QuerySyntaxException If we can't parse a query.\n */\n", "func_signal": "private <T> T doReadOperation(final ReadOperation<T> operation) throws IOException, QuerySyntaxException", "code": "{\n  createIndexIfNecessary();\n  IndexReader reader = IndexReader.open(_dir);\n  try {\n    Searcher searcher = new IndexSearcher(reader);\n    try {\n      Analyzer analyzer = createAnalyzer();\n      return operation.execute(reader, searcher, analyzer);\n    }\n    catch (ParseException ex) {\n      throw new QuerySyntaxException(ex.getMessage(), ex);\n    }\n    finally {\n      searcher.close();\n    }\n  }\n  finally {\n    reader.close();\n  }\n}", "path": "src\\net\\hillsdon\\reviki\\search\\impl\\LuceneSearcher.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "/**\n * Takes the last '/' component of a '/' separated path and splits the last\n * component as a wiki word.\n * \n * @param path The path.\n * @return e.g. \"foo/BarHumbug\" gives \"Bar humbug\".\n */\n", "func_signal": "public static String pathToTitle(final String path)", "code": "{\n  List<String> parts = splitCamelCase(lastComponentOfPath(path));\n  StringBuilder out = new StringBuilder();\n  for (int i = 0; i < parts.size(); ++i) {\n    String part = parts.get(i);\n    if (part.length() > 0) {\n      if (out.length() > 0) {\n        out.append(' ');\n      }\n      out.append(part);\n    }\n  }\n  return out.toString();\n}", "path": "src\\net\\hillsdon\\reviki\\text\\WikiWordUtils.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "// Interestingly these fail while the others pass... when upgrading to Lucene 2.3.0.\n", "func_signal": "public void testMoreInterestingWords() throws Exception", "code": "{\n  _searcher.index(PAGE_THE_NAME, -1, \"cabbage patch\");\n  assertEquals(JUST_THE_PAGE, _searcher.search(\"cabbage\", false));\n  assertEquals(JUST_THE_PAGE, _searcher.search(\"patch\", false));\n\n  _searcher.index(PAGE_THE_NAME, -1, \"fruit flies\");\n  assertEquals(JUST_THE_PAGE, _searcher.search(\"fruit\", false));\n  assertEquals(JUST_THE_PAGE, _searcher.search(\"flies\", false));\n}", "path": "src\\net\\hillsdon\\reviki\\search\\impl\\TestLuceneSearcher.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "// FIXME: This doesn't actually test anything interesting, just added for the tearDown check.\n", "func_signal": "public void testIncomingOutgoingLinks() throws Exception", "code": "{\n  assertEquals(Collections.emptySet(), _searcher.incomingLinks(PAGE_THE_NAME));\n  assertEquals(Collections.emptySet(), _searcher.outgoingLinks(PAGE_THE_NAME));\n}", "path": "src\\net\\hillsdon\\reviki\\search\\impl\\TestLuceneSearcher.java", "repo_name": "ashirley/reviki-old", "stars": 1, "license": "apache-2.0", "language": "java", "size": 25068}
{"docstring": "/**\n * Remove an index and close the hole.\n * @param index The index of the element to be removed.\n * @return The value that was associated with the index,\n * or null if there was no value.\n */\n", "func_signal": "public Object remove(int index)", "code": "{\n\tObject o = opt(index);\n    this.myArrayList.remove(index);\n    return o;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Construct a JSONArray from a Collection.\n * @param collection     A Collection.\n */\n", "func_signal": "public JSONArray(Collection collection)", "code": "{\n    this.myArrayList = (collection == null) ?\n        new ArrayList() :\n        new ArrayList(collection);\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a\n * JSONObject which is produced from a Map.\n * @param value A Map value.\n * @return      this.\n */\n", "func_signal": "public JSONArray put(Map value)", "code": "{\n    put(new JSONObject(value));\n    return this;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a\n * JSONArray which is produced from a Collection.\n * @param index The subscript.\n * @param value A Collection value.\n * @return      this.\n * @throws JSONException If the index is negative or if the value is\n * not finite.\n */\n", "func_signal": "public JSONArray put(int index, Collection value) throws JSONException", "code": "{\n    put(index, new JSONArray(value));\n    return this;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Append an int value. This increases the array's length by one.\n *\n * @param value An int value.\n * @return this.\n */\n", "func_signal": "public JSONArray put(int value)", "code": "{\n    put(new Integer(value));\n    return this;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Put or replace an object value in the JSONArray. If the index is greater\n *  than the length of the JSONArray, then null elements will be added as\n *  necessary to pad it out.\n * @param index The subscript.\n * @param value The value to put into the array. The value should be a\n *  Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the\n *  JSONObject.NULL object.\n * @return this.\n * @throws JSONException If the index is negative or if the the value is\n *  an invalid number.\n */\n", "func_signal": "public JSONArray put(int index, Object value) throws JSONException", "code": "{\n    JSONObject.testValidity(value);\n    if (index < 0) {\n        throw new JSONException(\"JSONArray[\" + index + \"] not found.\");\n    }\n    if (index < length()) {\n        this.myArrayList.set(index, value);\n    } else {\n        while (index != length()) {\n            put(JSONObject.NULL);\n        }\n        put(value);\n    }\n    return this;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Put or replace a double value. If the index is greater than the length of\n *  the JSONArray, then null elements will be added as necessary to pad\n *  it out.\n * @param index The subscript.\n * @param value A double value.\n * @return this.\n * @throws JSONException If the index is negative or if the value is\n * not finite.\n */\n", "func_signal": "public JSONArray put(int index, double value) throws JSONException", "code": "{\n    put(index, new Double(value));\n    return this;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Construct a JSONArray from an array\n * @throws JSONException If not an array.\n */\n", "func_signal": "public JSONArray(Object array) throws JSONException", "code": "{\n    this();\n    if (array.getClass().isArray()) {\n        int length = Array.getLength(array);\n        for (int i = 0; i < length; i += 1) {\n            this.put(Array.get(array, i));\n        }\n    } else {\n        throw new JSONException(\"JSONArray initial value should be a string or collection or array.\");\n    }\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Get the long value associated with an index.\n *\n * @param index The index must be between 0 and length() - 1.\n * @return      The value.\n * @throws   JSONException If the key is not found or if the value cannot\n *  be converted to a number.\n */\n", "func_signal": "public long getLong(int index) throws JSONException", "code": "{\n    Object o = get(index);\n    return o instanceof Number ?\n            ((Number)o).longValue() : (long)getDouble(index);\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Put or replace a long value. If the index is greater than the length of\n *  the JSONArray, then null elements will be added as necessary to pad\n *  it out.\n * @param index The subscript.\n * @param value A long value.\n * @return this.\n * @throws JSONException If the index is negative.\n */\n", "func_signal": "public JSONArray put(int index, long value) throws JSONException", "code": "{\n    put(index, new Long(value));\n    return this;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Get the JSONObject associated with an index.\n * @param index subscript\n * @return      A JSONObject value.\n * @throws JSONException If there is no value for the index or if the\n * value is not a JSONObject\n */\n", "func_signal": "public JSONObject getJSONObject(int index) throws JSONException", "code": "{\n    Object o = get(index);\n    if (o instanceof JSONObject) {\n        return (JSONObject)o;\n    }\n    throw new JSONException(\"JSONArray[\" + index +\n        \"] is not a JSONObject.\");\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Get the JSONArray associated with an index.\n * @param index The index must be between 0 and length() - 1.\n * @return      A JSONArray value.\n * @throws JSONException If there is no value for the index. or if the\n * value is not a JSONArray\n */\n", "func_signal": "public JSONArray getJSONArray(int index) throws JSONException", "code": "{\n    Object o = get(index);\n    if (o instanceof JSONArray) {\n        return (JSONArray)o;\n    }\n    throw new JSONException(\"JSONArray[\" + index +\n            \"] is not a JSONArray.\");\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Get the optional string associated with an index.\n * The defaultValue is returned if the key is not found.\n *\n * @param index The index must be between 0 and length() - 1.\n * @param defaultValue     The default value.\n * @return      A String value.\n */\n", "func_signal": "public String optString(int index, String defaultValue)", "code": "{\n    Object o = opt(index);\n    return o != null ? o.toString() : defaultValue;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Get the optional double value associated with an index.\n * The defaultValue is returned if there is no value for the index,\n * or if the value is not a number and cannot be converted to a number.\n *\n * @param index subscript\n * @param defaultValue     The default value.\n * @return      The value.\n */\n", "func_signal": "public double optDouble(int index, double defaultValue)", "code": "{\n    try {\n        return getDouble(index);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Append an object value. This increases the array's length by one.\n * @param value An object value.  The value should be a\n *  Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the\n *  JSONObject.NULL object.\n * @return this.\n */\n", "func_signal": "public JSONArray put(Object value)", "code": "{\n    this.myArrayList.add(value);\n    return this;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Construct a JSONArray from a collection of beans.\n * The collection should have Java Beans.\n * \n * @throws JSONException If not an array.\n */\n", "func_signal": "public JSONArray(Collection collection, boolean includeSuperClass)", "code": "{\n\t\tthis.myArrayList = new ArrayList();\n\t\tif (collection != null) {\n\t\t\tIterator iter = collection.iterator();;\n\t\t\twhile (iter.hasNext()) {\n\t\t\t    Object o = iter.next();\n\t\t\t    if (o instanceof Map) {\n\t\t\t    \tthis.myArrayList.add(new JSONObject((Map)o, includeSuperClass));\n\t\t\t    } else if (!JSONObject.isStandardProperty(o.getClass())) {\n\t\t\t    \tthis.myArrayList.add(new JSONObject(o, includeSuperClass));\n\t\t\t    } else {\n                this.myArrayList.add(o);  \n\t\t\t\t}\n\t\t\t}\n\t\t}\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Get the object value associated with an index.\n * @param index\n *  The index must be between 0 and length() - 1.\n * @return An object value.\n * @throws JSONException If there is no value for the index.\n */\n", "func_signal": "public Object get(int index) throws JSONException", "code": "{\n    Object o = opt(index);\n    if (o == null) {\n        throw new JSONException(\"JSONArray[\" + index + \"] not found.\");\n    }\n    return o;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Construct a JSONArray from a JSONTokener.\n * @param x A JSONTokener\n * @throws JSONException If there is a syntax error.\n */\n", "func_signal": "public JSONArray(JSONTokener x) throws JSONException", "code": "{\n    this();\n    char c = x.nextClean();\n    char q;\n    if (c == '[') {\n        q = ']';\n    } else if (c == '(') {\n        q = ')';\n    } else {\n        throw x.syntaxError(\"A JSONArray text must start with '['\");\n    }\n    if (x.nextClean() == ']') {\n        return;\n    }\n    x.back();\n    for (;;) {\n        if (x.nextClean() == ',') {\n            x.back();\n            this.myArrayList.add(null);\n        } else {\n            x.back();\n            this.myArrayList.add(x.nextValue());\n        }\n        c = x.nextClean();\n        switch (c) {\n        case ';':\n        case ',':\n            if (x.nextClean() == ']') {\n                return;\n            }\n            x.back();\n            break;\n        case ']':\n        case ')':\n            if (q != c) {\n                throw x.syntaxError(\"Expected a '\" + new Character(q) + \"'\");\n            }\n            return;\n        default:\n            throw x.syntaxError(\"Expected a ',' or ']'\");\n        }\n    }\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a\n * JSONObject which is produced from a Map.\n * @param index The subscript.\n * @param value The Map value.\n * @return      this.\n * @throws JSONException If the index is negative or if the the value is\n *  an invalid number.\n */\n", "func_signal": "public JSONArray put(int index, Map value) throws JSONException", "code": "{\n    put(index, new JSONObject(value));\n    return this;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Append an long value. This increases the array's length by one.\n *\n * @param value A long value.\n * @return this.\n */\n", "func_signal": "public JSONArray put(long value)", "code": "{\n    put(new Long(value));\n    return this;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "spowell333/FakeTickerConsumer", "stars": 1, "license": "None", "language": "java", "size": 128}
{"docstring": "/**\n * Encrypts the data\n * @return the encrypted data\n * */\n", "func_signal": "public BigInteger encrypt()", "code": "{\n\t   BigInteger n = key.getPrimeProduct();\n   if(original.compareTo(n) > 0)\n   {\n      System.err.println(\"Message too large.  Implement splitting\");\n   }\n\n   BigInteger cyphertext = original.modPow(key.getEncryptionExponent(), n);\n\t   return cyphertext;\n}", "path": "RSAEncryption.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * The cypher function takes 32 bits makes it 48 bits and then XORs that \n * with the 48 bits of the shortkey.  Then it takes this value down to 32 \n * bits\n * @param block - a 32 bit number, probably the right half of the number\n * @param shortkey - a 48 bit portion of the key\n * @return the result of the cypher function.\n * */\n", "func_signal": "private long cypherFunction(long block, long shortKey) \n   throws InvalidSelectionException", "code": "{\n   //the result of the cypher function\n   long result = 0;\n   //Move the block into the most significant places so it will work well \n   //the switchBits function\n   block = block << 32;\n   //Expands the block into 48 bits by duplicating some of the bits\n   long expandedBlock = Common.switchBits(block, \n                                          DESArrays.getExpandedPositions());\n   //Move the 48 bits into the least significant places so it can be easily\n   //XOR'ed with the shortKey\n   expandedBlock = expandedBlock >>> 16;\n   long temp = shortKey ^ expandedBlock;\n   //Move this 48 bit value into the most significant places for easy access\n   temp = temp << 16;\n   //This loop takes each 6 bits of the number and reduces it to 4 bits so \n   //the final number will be 32 bits.\n   for(int i = 0; i < 8; i++)\n   {\n      byte sixBits =  (byte) Common.getBits(temp, i * 6 + 1, (i + 1) * 6);\n      byte[][] sTable = DESArrays.getSelectionTables(i + 1);\n      byte fourBits = sFunction(sixBits, sTable);\n      result = result << 4;\n      result = result | fourBits;\n   }\n   //Moves the result to the most significant places so that it will work\n   //with switchBits\n   result = result << 32;\n   result = Common.switchBits(result, DESArrays.getPermutationFunction());\n   //Move the bits back to the least significant places so that the user \n   //can use it easily\n   result = result >>> 32;\n   return result;\n}", "path": "DESEncryption.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Constructor that will generate a new DES key.\n * @param original - the data to encrypt/decrypt\n * */\n", "func_signal": "public DESEncryption(long original)", "code": "{\n   this.original = original;\n   key = new DESKey();\n}", "path": "DESEncryption.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Gets the length of an packet.  New format because PGP used to generate \n * packets differently.  Packets in the new format will always have a tag\n * where the left two most bits are 1.  This version currently does not \n * accept old format packets.  \n * @param bytes - the data to get the length from\n * @return the length in bytes of a packet\n * */\n", "func_signal": "public static long getNewFormatLength(int[] bytes)", "code": "{\n   long result = 0;\n   if(bytes.length == 1)\n   {\n      result = bytes[0];\n      result = result & Common.BYTE_MASK;\n   }\n   else if(bytes.length == 2)\n   {\n      result = ((bytes[0] - 192) << Byte.SIZE) + bytes[1] + 192;\n      result = result & Common.TWO_BYTE_MASK;\n   }\n   else if(bytes.length == 4)\n   {\n      int shiftSpaces = 24;\n      for(int i = 0; i < bytes.length; i++)\n      {\n         long temp = Common.BYTE_MASK & bytes[i];\n         temp = temp << shiftSpaces;\n         result = result | temp;\n         shiftSpaces -= Byte.SIZE;\n      }\n   }\n   return result;\n}", "path": "OpenPGP.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Constructor that takes an existing DES key.\n * @param original - the data to encrypt/decrypt\n * @param key - the DES key to use for encryption/decryption\n * */\n", "func_signal": "public DESEncryption(long original, DESKey key)", "code": "{\n   this.original = original;\n   this.key = key;\n}", "path": "DESEncryption.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * This is the method that performs one iteration of the algorithm\n * @param left - the left half of the number i.e bits 1-32\n * @param right - the right half of the number i.e bits 33-64\n * @param iteration - the value of this iteration.  This matters because \n *                    a different part of the key is used depending on the\n *                    iteration\n * @return the result of this iteration\n * */\n", "func_signal": "private long encryptionIteration(long left, long right, int iteration)\n   throws InvalidSelectionException", "code": "{\n   //Puts the right half from the previous iteration in the left half\n   long result = right << 32;\n   //Gets the specific part of the key used for this iteration\n   long shortkey = key.keyScheduler(iteration);  \n   //The result of the cypher function\n   long cypherResult = cypherFunction(right, shortkey);\n   //Right half of the number is the result of the cypher function XOR'ed \n   //with the left half from the previous iteration\n   result = result | (left ^ cypherResult);\n   return result;\n}", "path": "DESEncryption.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Decrypts the data\n * @return the decrypted data\n * */\n", "func_signal": "public BigInteger decrypt()", "code": "{\n   if(!(key instanceof RSAPrivateKey))\n   {\n      System.err.println(\"Messages may only be decrypted with private keys\");\n      System.exit(1);\n   }\n\n   RSAPrivateKey privateKey = (RSAPrivateKey) key;\n\t   BigInteger n = key.getPrimeProduct();\n   BigInteger result = original.modPow(privateKey.getDecryptionExponent(), \n      n);\n\t   return result;\n}", "path": "RSAEncryption.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Constructor that takes the data to encrypt/decrypt and a RSA Key.\n * @param data - the data to encrypt/decrypt\n * @param key - the RSA key to use for encryption/decryption\n * */\n", "func_signal": "public RSAEncryption(byte[] data, RSABaseKey key)", "code": "{\n   original = new BigInteger(SIGN, data);\n   this.key = key;\n}", "path": "RSAEncryption.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/*public EncryptedSessionKeyPacket(RSABaseKey rsaKey, byte[] unencryptedKey)\n{\n   RSAEncryption rsa = new RSAEncryption(unencryptedKey, rsaKey);\n   encryptedKey = rsa.encrypt();\n   keyID = rsaKey.getKeyID();\n}*/\n", "func_signal": "public EncryptedSessionKeyPacket(byte[] data)", "code": "{\n   int i = 0;\n   keyID = new byte[KEY_ID_SIZE];\n   if(data[i++] != VERSION)\n   {\n      System.err.println(\"Version \" + data[i - 1] + \" is not supported\");\n   }\n   for(int j = 0; j < KEY_ID_SIZE; i++, j++)\n   {\n      keyID[j] = data[i];\n   }\n   if(data[i++] != OpenPGP.RSA_CONSTANT)\n   {\n      System.err.println(\"Invalid Public key constant \" + data[i - 1]);\n   }\n   byte[] key = OpenPGP.getMultiprecisionInteger(data, i);\n   encryptedKey = new BigInteger(1, key);\n   //encryptedKey = new BigInteger(key);\n}", "path": "EncryptedSessionKeyPacket.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Writes out this packet to an output stream.\n * @param output - the output stream to write to\n * */\n", "func_signal": "public void write(OutputStream output) throws IOException", "code": "{\n   int length = packetInfo.getBodyLength();\n   byte[] lengthArray = OpenPGP.makeNewFormatLength(length);\n   output.write(new byte[]{tag});\n   output.write(lengthArray);\n   //Have the packetInfo write its specific stuff to this stream\n   packetInfo.write(output);\n}", "path": "OpenPGPPacket.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Since encrypt() and decrypt() are both using the same algorithm \n * (only when decrypt uses it it starts at iteration 16 and goes down to 1)\n * the algorithm is implemented here.  encrypt() and decrypt() both call \n * this method.\n * @param backwards - if true the method will go from 16 down to 1.  Used by\n *                    decrypt()\n * @return - the encrypted or decrypted value\n * */\n", "func_signal": "private long encryptCycle(boolean backwards)\n   throws InvalidSelectionException", "code": "{\n   int START = 1;\n   long result = Common.switchBits(original, \n      DESArrays.getInitialPermutation());\n   long left = Common.getBits(result, FIRST_BIT, MIDDLE_BIT);\n   long right = Common.getBits(result, MIDDLE_BIT, LAST_BIT);\n   int iteration;\n   for (int i = START; i <= ENCRYPTION_ITERATIONS; i++)\n   {\n      iteration = i;\n      if (backwards)\n      {\n         //+1 because we need to go from 16 down to 1.  But we start \n         //counting at 1.  16 - 1 = 15 so it would skip an iteration\n         iteration = ENCRYPTION_ITERATIONS - i + 1;\n      }\n      result = encryptionIteration(left, right, iteration);\n      left = Common.getBits(result, FIRST_BIT, MIDDLE_BIT);\n      right = Common.getBits(result, MIDDLE_BIT, LAST_BIT);\n   }\n   result = Common.switchBits(result, DESArrays.getFlipPositions());\n   result = Common.switchBits(result, DESArrays.getInversePermutation());\n   return result;\n}", "path": "DESEncryption.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Constructor that takes a tag and a object with the packet specific \n * information.\n * @param tag - the tag that identifies the packet\n * @param packetInfo - \n * */\n", "func_signal": "public OpenPGPPacket(byte tag, PacketSpecificInterface packetInfo)", "code": "{\n   this.tag = tag;\n   this.packetInfo = packetInfo;\n}", "path": "OpenPGPPacket.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Takes an array of bytes representing an MPI (multiprecision integer) \n * and returns just the number without the length bytes.  MPIs are unsigned\n * integers with 2 length bytes at the beginning.\n * @param data - the array to get the number from\n * @param start - the index of the array where the MPI starts\n * @return a byte array representing the number.  \n * */\n", "func_signal": "public static byte[] getMultiprecisionInteger(byte[] data, int start)", "code": "{\n   int i = start;\n   int mpiLength = (data[i++] << Byte.SIZE) | \n                   ((int) data[i++] & Common.BYTE_MASK);\n   mpiLength = 0XFFFF & mpiLength;\n   byte[] mpi = new byte[mpiLength / Byte.SIZE];\n   for(int j = 0; j < mpi.length && i < data.length; i++, j++)\n   {\n      mpi[j] = data[i];\n   }\n   return mpi;\n}", "path": "OpenPGP.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Given the length of a packet in bytes it will convert that length to the\n * format needed for packets.  Old format packets will never and should \n * never be generated.\n * @param length - the length in bytes of the packet\n * @return the packet length expressed in 1,2 or 5 bytes.\n * */\n", "func_signal": "public static byte[] makeNewFormatLength(long length)", "code": "{\n   byte[] result = new byte[0];\n   if(length <= OpenPGP.MAX_ONE_OCTET)\n   {\n      result = new byte[1];\n      result[0] = (byte) length;\n   }\n   else if(length <= OpenPGP.MAX_TWO_OCTETS)\n   {\n      result = new byte[2];\n      long first = (length >>> Byte.SIZE) + 191;\n      long second = (length & Common.BYTE_MASK) - 192;\n      result[0] = (byte) (first & Common.BYTE_MASK);\n      result[1] = (byte) (second & Common.BYTE_MASK);\n   }\n   else if(length <= OpenPGP.MAX_FIVE_OCTETS)\n   {\n      int i = 0;\n      result = new byte[5];\n      result[i++] = (byte) Common.BYTE_MASK;\n      int mask = Common.BYTE_MASK;\n      int shiftSpaces = Byte.SIZE * 3;\n      for(; i < result.length; i++)\n      {\n         result[i] = (byte) (length >>> shiftSpaces);\n         shiftSpaces -= Byte.SIZE;\n      }\n   }\n   return result;\n}", "path": "OpenPGP.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * The s function takes a 6 bit number and returns it as a 4 bit number \n * based on the given table.  The first and last bit of the number give the\n * row index for the table and the middle 4 bits give the column index.  The\n * 4 bit number is the number at that row and column in the table.\n * @param sixBits - the number to translate\n * @param sTable - the table that tells it how to translate the number\n * @return the 4 bit number\n * */\n", "func_signal": "public byte sFunction(byte sixBits, byte[][] sTable) \n   throws InvalidSelectionException", "code": "{\n   byte firstBitPosition = 3;\n   byte lastBitPosition = Byte.SIZE;\n   //get first and last bit as the row, get the middle 4 bits as the col\n   int row = (Common.getBit(sixBits, firstBitPosition) << 1) | \n      (Common.getBit(sixBits, lastBitPosition));\n   int col = 0;\n   for(int i = firstBitPosition + 1; i < lastBitPosition; i++)\n   {\n      col = col | (Common.getBit(sixBits, i) << (7 - i));\n   }\n   return sTable[row][col];\n}", "path": "DESEncryption.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Takes a number and returns it as an MPI (multiprecision integer).  An \n * MPI is a unsigned integer with 2 length bytes at the beginning.\n * @param num - the number to turn into an MPI\n * @return a byte array containg the MPI\n * */\n", "func_signal": "public static byte[] makeMultiprecisionInteger(BigInteger num)", "code": "{\n   byte[] temp = num.toByteArray();\n   return makeMultiprecisionInteger(temp);\n}", "path": "OpenPGP.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Constructor that takes a tag and the data in the packet and finds the \n * correct packet specific information.\n * @param tag - the tag that identifies the packet\n * @param data - the data in the packet after the header.\n * */\n", "func_signal": "public OpenPGPPacket(byte tag, byte[] data) throws MalformedPacketException", "code": "{\n   this.tag = tag;\n   switch(tag)\n   {\n      case OpenPGP.LITERAL_DATA_PACKET_TAG:\n         packetInfo = new LiteralDataPacket(data);\n         break;\n      case OpenPGP.PK_SESSION_KEY_TAG:\n         packetInfo = new EncryptedSessionKeyPacket(data);\n         break;\n      case OpenPGP.SYMMETRIC_DATA_TAG:\n         packetInfo = new SymmetricDataPacket(data);\n         break;\n      case OpenPGP.PUBLIC_KEY_PACKET_TAG:\n         packetInfo = new RSABaseKey(data);\n         break;\n      case OpenPGP.PRIVATE_KEY_PACKET_TAG:\n         packetInfo = new RSAPrivateKey(data);\n         break;\n      case OpenPGP.COMPRESSED_DATA_TAG:\n         packetInfo = new CompressedDataPacket(data);\n         break;\n      case OpenPGP.SIGNATURE_PACKET_TAG:\n         packetInfo = new SignaturePacket(data);\n         break;\n      default:\n         throw new MalformedPacketException(\"Tag \" + (tag ^ \n            OpenPGP.NEW_TAG_MASK) + \" is invalid\");\n   }\n}", "path": "OpenPGPPacket.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Turns a number into a multiprecision integer (MPI).  MPI's are simply \n * unsigned numbers where the first 2 bytes indicate the length of the MPI\n * in bits.\n * @param num - the number to turn into an MPI\n * @return the created MPI\n * */\n", "func_signal": "public static byte[] makeMultiprecisionInteger(byte[] num)", "code": "{\n   byte[] result = new byte[num.length + OpenPGP.MPI_LENGTH_BYTES];\n   int numBits = num.length * Byte.SIZE;\n   result[0] = (byte) (numBits >> Byte.SIZE);\n   result[1] = (byte) (numBits & Common.BYTE_MASK);\n   for(int i = OpenPGP.MPI_LENGTH_BYTES; i < result.length; i++)\n   {\n      result[i] = num[i - OpenPGP.MPI_LENGTH_BYTES];\n   }\n   return result;\n}", "path": "OpenPGP.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Reads packets from the input stream and returns them in a list\n * @return the list of packets that were read\n * */\n", "func_signal": "public List<OpenPGPPacket> readPackets() throws MalformedPacketException,\n   IOException", "code": "{\n   ArrayList<OpenPGPPacket> packets = new ArrayList<OpenPGPPacket>();\n   byte tag = 0;\n   int firstLengthOctet = 0;\n   long length = 0;\n   while(readIn.available() > 0)\n   {\n      tag = (byte) readIn.read(); \n      firstLengthOctet = readIn.read();\n      if(firstLengthOctet <= OpenPGP.MAX_ONE_OCTET)\n      {\n         length = OpenPGP.getNewFormatLength(new int[] {firstLengthOctet});\n      }\n      else if(firstLengthOctet > OpenPGP.MAX_ONE_OCTET && \n              firstLengthOctet <= 223)\n      {\n         int secondLengthOctet = readIn.read();\n         length = OpenPGP.getNewFormatLength(new int[] {firstLengthOctet, \n            secondLengthOctet});\n      }\n      else if(firstLengthOctet == 255)\n      {\n         byte[] temp = new byte[4];\n         int[] octets = new int[4];\n         readIn.read(temp);\n         //loop takes care of sign extension problems\n         for(int i = 0; i < temp.length; i++)\n         {\n            octets[i] = temp[i] & Common.BYTE_MASK;\n         }\n         length = OpenPGP.getNewFormatLength(octets);\n      }\n      else\n      {\n         throw new MalformedPacketException(\"First octet is \" + \n            firstLengthOctet);\n      }\n      byte[] data = new byte[(int) length];\n      int amount = readIn.read(data);\n      OpenPGPPacket temp = new OpenPGPPacket(tag, data);\n      packets.add(new OpenPGPPacket(tag, data));\n   }\n   readIn.close();\n   return packets;\n}", "path": "PacketReader.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "/**\n * Constructor that takes the data to encrypt/decrypt and will generate a\n * new key of the given length.\n * @param data - the data to encrypt/decrypt\n * @param keylength - the length of the key (in bits) to generate \n * */\n", "func_signal": "public RSAEncryption(byte[] data, int keylength)", "code": "{\n   original = new BigInteger(SIGN, data);\n   this.key = new RSAPrivateKey(keylength);\n}", "path": "RSAEncryption.java", "repo_name": "jnanney/Capstone", "stars": 1, "license": "None", "language": "java", "size": 284}
{"docstring": "// this doc comment is a modified copy of the inherited doc comment,\n// without the reference to unlimited queues.\n/**\n * Returns the number of elements that this queue can ideally (in\n * the absence of memory or resource constraints) accept without\n * blocking. This is always equal to the initial capacity of this queue\n * less the current <tt>size</tt> of this queue.\n * <p>Note that you <em>cannot</em> always tell if\n * an attempt to <tt>add</tt> an element will succeed by\n * inspecting <tt>remainingCapacity</tt> because it may be the\n * case that a waiting consumer is ready to <tt>take</tt> an\n * element out of an otherwise full queue.\n * \n * @return the remaining capacity\n */\n", "func_signal": "public int remainingCapacity()", "code": "{\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        return items.length - count;\n    } finally {\n        lock.unlock();\n    }\n}", "path": "libcore\\concurrent\\src\\main\\java\\java\\util\\concurrent\\ArrayBlockingQueue.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/**\n * Constructor.\n * @param factory document factory, may not be null\n * @throws org.w3c.domts.DOMTestIncompatibleException Thrown if test is not compatible with parser configuration\n */\n", "func_signal": "public documentimportnode18(final DOMTestDocumentBuilderFactory factory)  throws org.w3c.domts.DOMTestIncompatibleException", "code": "{\n\n   org.w3c.domts.DocumentBuilderSetting[] settings = \n       new org.w3c.domts.DocumentBuilderSetting[] {\norg.w3c.domts.DocumentBuilderSetting.namespaceAware\n     };\n     DOMTestDocumentBuilderFactory testFactory = factory.newInstance(settings);\n     setFactory(testFactory);\n\n //\n //   check if loaded documents are supported for content type\n //\n String contentType = getContentType();\n preload(contentType, \"staffNS\", true);\n preload(contentType, \"staffNS\", true);\n }", "path": "libcore\\dom\\src\\test\\java\\org\\w3c\\domts\\level2\\core\\documentimportnode18.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/*\n * Checks whether the current Thread is in the given list.\n */\n", "func_signal": "private boolean inListOfThreads(Thread[] threads)", "code": "{\n    for (int i = 0; i < threads.length; i++) {\n        if (Thread.currentThread() == threads[i]) {\n            return true;\n        }\n    }\n    \n    return false;\n}", "path": "libcore\\luni\\src\\test\\java\\org\\apache\\harmony\\luni\\tests\\java\\lang\\ThreadGroupTest.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/**\n * Extract element at current take position, advance, and signal.\n * Call only when holding lock.\n */\n", "func_signal": "private E extract()", "code": "{\n    final E[] items = this.items;\n    E x = items[takeIndex];\n    items[takeIndex] = null;\n    takeIndex = inc(takeIndex);\n    --count;\n    notFull.signal();\n    return x;\n}", "path": "libcore\\concurrent\\src\\main\\java\\java\\util\\concurrent\\ArrayBlockingQueue.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/**\n * Runs the test case.\n * @throws Throwable Any uncaught exception causes test to fail\n */\n", "func_signal": "public void runTest() throws Throwable", "code": "{\n   Document doc;\n   Document docImp;\n   ProcessingInstruction piImport;\n   ProcessingInstruction piToImport;\n   String piData;\n   String piTarget;\n   doc = (Document) load(\"staffNS\", true);\n   docImp = (Document) load(\"staffNS\", true);\n   piToImport = doc.createProcessingInstruction(\"Target\", \"Data\");\n   piImport = (ProcessingInstruction) doc.importNode(piToImport, false);\n   piTarget = piImport.getTarget();\n   piData = piImport.getData();\n   assertEquals(\"documentimportnode18_Target\", \"Target\", piTarget);\n   assertEquals(\"documentimportnode18_Data\", \"Data\", piData);\n   }", "path": "libcore\\dom\\src\\test\\java\\org\\w3c\\domts\\level2\\core\\documentimportnode18.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/**\n * Returns an iterator over the elements in this queue in proper sequence.\n * The returned <tt>Iterator</tt> is a \"weakly consistent\" iterator that\n * will never throw {@link java.util.ConcurrentModificationException},\n * and guarantees to traverse elements as they existed upon\n * construction of the iterator, and may (but is not guaranteed to)\n * reflect any modifications subsequent to construction.\n *\n * @return an iterator over the elements in this queue in proper sequence.\n */\n", "func_signal": "public Iterator<E> iterator()", "code": "{\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        return new Itr();\n    } finally {\n        lock.unlock();\n    }\n}", "path": "libcore\\concurrent\\src\\main\\java\\java\\util\\concurrent\\ArrayBlockingQueue.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/**\n * Insert element at current put position, advance, and signal.\n * Call only when holding lock.\n */\n", "func_signal": "private void insert(E x)", "code": "{\n    items[putIndex] = x;\n    putIndex = inc(putIndex);\n    ++count;\n    notEmpty.signal();\n}", "path": "libcore\\concurrent\\src\\main\\java\\java\\util\\concurrent\\ArrayBlockingQueue.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/**\n * Creates a new {@code DSAPrivateKeySpec} with the specified private key,\n * prime, sub-prime and base.\n * \n * @param x\n *            the private key {@code x}.\n * @param p\n *            the prime {@code p}.\n * @param q\n *            the sub-prime {@code q}.\n * @param g\n *            the base {@code g}.\n * @since Android 1.0\n */\n", "func_signal": "public DSAPrivateKeySpec(BigInteger x, BigInteger p,\n        BigInteger q, BigInteger g)", "code": "{\n    this.x = x;\n    this.p = p;\n    this.q = q;\n    this.g = g;\n}", "path": "libcore\\security\\src\\main\\java\\java\\security\\spec\\DSAPrivateKeySpec.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "//\n// Escapes:\n// 1) chars \",\", \"+\", \"\"\", \"\\\", \"<\", \">\", \";\" (RFC 2253) \n// 2) chars \"#\", \"=\" (required by RFC 1779)\n// 3) a space char at the beginning or end\n// 4) according to the requirement to be RFC 1779 compatible:\n//    '#' char is escaped in any position\n//\n", "func_signal": "private String makeEscaped(String name)", "code": "{\n\n    int length = name.length();\n    if (length == 0) {\n        return name;\n    }\n    StringBuffer buf = new StringBuffer(length * 2);\n\n    for (int index = 0; index < length; index++) {\n\n        char ch = name.charAt(index);\n\n        switch (ch) {\n\n        case ' ':\n            if (index == 0 || index == (length - 1)) {\n                // escape first or last space \n                buf.append('\\\\');\n            }\n            buf.append(' ');\n            break;\n\n        case '\"':\n        case '\\\\':\n            hasQE = true;\n\n        case ',':\n        case '+':\n        case '<':\n        case '>':\n        case ';':\n        case '#': // required by RFC 1779\n        case '=': // required by RFC 1779\n            buf.append('\\\\');\n\n        default:\n            buf.append(ch);\n        }\n    }\n\n    return buf.toString();\n}", "path": "libcore\\security\\src\\main\\java\\org\\apache\\harmony\\security\\x501\\AttributeValue.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/**\n * Constructor.\n * @param factory document factory, may not be null\n * @throws org.w3c.domts.DOMTestIncompatibleException Thrown if test is not compatible with parser configuration\n */\n", "func_signal": "public nodegetnextsibling(final DOMTestDocumentBuilderFactory factory)  throws org.w3c.domts.DOMTestIncompatibleException", "code": "{\n   super(factory);\n\n //\n //   check if loaded documents are supported for content type\n //\n String contentType = getContentType();\n preload(contentType, \"staff\", false);\n }", "path": "libcore\\dom\\src\\test\\java\\org\\w3c\\domts\\level1\\core\\nodegetnextsibling.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/**\n * Set the received address and port in the packet. We do this when the\n * Datagram socket is connected at the native level and the\n * recvConnnectedDatagramImpl does not update the packet with address from\n * which the packet was received\n * \n * @param packet\n *            the packet to be updated\n */\n", "func_signal": "private void updatePacketRecvAddress(DatagramPacket packet)", "code": "{\n    packet.setAddress(connectedAddress);\n    packet.setPort(connectedPort);\n}", "path": "libcore\\luni\\src\\main\\java\\org\\apache\\harmony\\luni\\net\\PlainDatagramSocketImpl.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/**\n * Creates an <tt>ArrayBlockingQueue</tt> with the given (fixed)\n * capacity and the specified access policy.\n * @param capacity the capacity of this queue\n * @param fair if <tt>true</tt> then queue accesses for threads blocked\n * on insertion or removal, are processed in FIFO order; if <tt>false</tt>\n * the access order is unspecified.\n * @throws IllegalArgumentException if <tt>capacity</tt> is less than 1\n */\n", "func_signal": "public ArrayBlockingQueue(int capacity, boolean fair)", "code": "{\n    if (capacity <= 0)\n        throw new IllegalArgumentException();\n    this.items = (E[]) new Object[capacity];\n    lock = new ReentrantLock(fair);\n    notEmpty = lock.newCondition();\n    notFull =  lock.newCondition();\n}", "path": "libcore\\concurrent\\src\\main\\java\\java\\util\\concurrent\\ArrayBlockingQueue.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/**\n * This method is called after a test is executed. It closes the\n * FilterReader instance.\n */\n", "func_signal": "protected void tearDown()", "code": "{\n\n    try {\n        fr.close();\n    } catch (Exception e) {\n        System.out.println(\"Exception during FilterReaderTest tear down.\");\n    }\n}", "path": "libcore\\luni\\src\\test\\java\\tests\\api\\java\\io\\FilterReaderTest.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/**\n * Check whether nextIndex is valid; if so setting nextItem.\n * Stops iterator when either hits putIndex or sees null item.\n */\n", "func_signal": "private void checkNext()", "code": "{\n    if (nextIndex == putIndex) {\n        nextIndex = -1;\n        nextItem = null;\n    } else {\n        nextItem = items[nextIndex];\n        if (nextItem == null)\n            nextIndex = -1;\n    }\n}", "path": "libcore\\concurrent\\src\\main\\java\\java\\util\\concurrent\\ArrayBlockingQueue.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "// END android-added\n", "func_signal": "public FloatBuffer asReadOnlyBuffer()", "code": "{\n    FloatToByteBufferAdapter buf = new FloatToByteBufferAdapter(byteBuffer\n            .asReadOnlyBuffer());\n    buf.limit = limit;\n    buf.position = position;\n    buf.mark = mark;\n    return buf;\n}", "path": "libcore\\nio\\src\\main\\java\\java\\nio\\FloatToByteBufferAdapter.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/**\n * Constructor.\n * @param factory document factory, may not be null\n * @throws org.w3c.domts.DOMTestIncompatibleException Thrown if test is not compatible with parser configuration\n */\n", "func_signal": "public hc_nodeelementnodename(final DOMTestDocumentBuilderFactory factory)  throws org.w3c.domts.DOMTestIncompatibleException", "code": "{\n   super(factory);\n\n //\n //   check if loaded documents are supported for content type\n //\n String contentType = getContentType();\n preload(contentType, \"hc_staff\", false);\n }", "path": "libcore\\dom\\src\\test\\java\\org\\w3c\\domts\\level1\\core\\hc_nodeelementnodename.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/**\n * This method is called before a test is executed. It creates a\n * FilterReader instance.\n */\n", "func_signal": "protected void setUp()", "code": "{\n\n    fr = new MyFilterReader(new MockReader());\n    called = false;\n}", "path": "libcore\\luni\\src\\test\\java\\tests\\api\\java\\io\\FilterReaderTest.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "// BEGIN android-added\n// copied from newer version of harmony\n", "func_signal": "public int getByteCapacity()", "code": "{\n    if (byteBuffer instanceof DirectBuffer) {\n        return ((DirectBuffer)byteBuffer).getByteCapacity();\n    } else {\n        assert false : byteBuffer;\n        return -1;\n    }            \n}", "path": "libcore\\nio\\src\\main\\java\\java\\nio\\FloatToByteBufferAdapter.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/*\n * @see java.lang.Thread.UncaughtExceptionHandler#uncaughtException(java.lang.Thread, java.lang.Throwable)\n */\n", "func_signal": "public void uncaughtException(Thread t, Throwable e)", "code": "{\n    interrupted = true;\n    Thread.setDefaultUncaughtExceptionHandler(null);\n}", "path": "libcore\\luni\\src\\test\\java\\org\\apache\\harmony\\luni\\tests\\java\\lang\\ThreadGroupTest.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/**\n * Runs the test case.\n * @throws Throwable Any uncaught exception causes test to fail\n */\n", "func_signal": "public void runTest() throws Throwable", "code": "{\n   Document doc;\n   NodeList elementList;\n   Node employeeIdNode;\n   Node nsNode;\n   String nsName;\n   doc = (Document) load(\"staff\", false);\n   elementList = doc.getElementsByTagName(\"employeeId\");\n   employeeIdNode = elementList.item(1);\n   nsNode = employeeIdNode.getNextSibling();\n   nsName = nsNode.getNodeName();\n   \n   if (equals(\"#text\", nsName)) {\n       nsNode = nsNode.getNextSibling();\n   nsName = nsNode.getNodeName();\n   }\n assertEquals(\"nodeName\", \"name\", nsName);\n   }", "path": "libcore\\dom\\src\\test\\java\\org\\w3c\\domts\\level1\\core\\nodegetnextsibling.java", "repo_name": "benjaminvm/vm", "stars": 1, "license": "other", "language": "java", "size": 14320}
{"docstring": "/**\n * Clean up\n */\n", "func_signal": "public void close()", "code": "{\n  if (_diskIndex!=null)\n  {\n    _diskIndex.close();\n  }\n  Mem<R> mem = _mem;\n  if (mem.get_memIndexA()!=null)\n  {\n    mem.get_memIndexA().close();\n  }\n  if (mem.get_memIndexB()!=null)\n  {\n    mem.get_memIndexB().close();\n  }\n}", "path": "java\\proj\\zoie\\impl\\indexing\\internal\\SearchIndexManager.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * Opens an index modifier.\n * @param analyzer Analyzer\n * @return IndexModifer instance\n */\n", "func_signal": "public IndexWriter openIndexWriter(Analyzer analyzer,Similarity similarity) throws IOException", "code": "{\n  if(_indexWriter != null) return _indexWriter;\n  \n  // create the parent directory\n  _location.mkdirs();\n  \n  FSDirectory directory = getIndexDir(_location);\n\n  log.info(\"opening index writer at: \"+directory.getFile().getAbsolutePath());\n  \n  // create a new modifier to the index, assuming at most one instance is running at any given time\n  boolean create = !IndexReader.indexExists(directory);  \n  IndexWriter idxWriter = new IndexWriter(directory, analyzer, create, _deletionPolicy, MaxFieldLength.UNLIMITED);\n        idxWriter.setMergeScheduler(_mergeScheduler);\n        \n        ZoieMergePolicy mergePolicy = new ZoieMergePolicy(idxWriter);\n        mergePolicy.setMergePolicyParams(_mergePolicyParams);\n        idxWriter.setRAMBufferSizeMB(5);\n  \n        idxWriter.setMergePolicy(mergePolicy);\n  \n  if (similarity != null)\n  {\n  \tidxWriter.setSimilarity(similarity);\n  }\n  _indexWriter = idxWriter;\n  return idxWriter;\n}", "path": "java\\proj\\zoie\\impl\\indexing\\internal\\DiskSearchIndex.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * @Precondition incoming events sorted by version number\n * <br>every event in the events collection must be non-null\n * \n * @see proj.zoie.api.DataConsumer#consume(java.util.Collection)\n * \n */\n", "func_signal": "public void consume(Collection<DataEvent<ZoieIndexable>> events) throws ZoieException", "code": "{\n\tint eventCount = events.size();\n        if (events == null || eventCount == 0)\n\t\treturn;\n\n\tBaseSearchIndex<R> idx = getSearchIndex();\n\n\tLong2ObjectMap<List<IndexingReq>> addList = new Long2ObjectOpenHashMap<List<IndexingReq>>();\n\tlong version = idx.getVersion();\t\t// current version\n\n\tLongSet delSet =new LongOpenHashSet();\n\t\n\ttry {\n\t  for(DataEvent<ZoieIndexable> evt : events)\n\t  {\n\t    if (evt == null) continue;\n    \t\t    version = Math.max(version, evt.getVersion());\n    \t\t    // interpret and get get the indexable instance\n    \t\t    ZoieIndexable indexable = evt.getData();\n    \t\t    if (indexable == null || indexable.isSkip())\n    \t\t      continue;\n    \n    \t\t    long uid = indexable.getUID();\n    \t\t    delSet.add(uid);\n    \t\t    addList.remove(uid);\n\t\t\tif (!indexable.isDeleted()) // update event\n\t\t\t{\n\t\t\t\tIndexingReq[] reqs = indexable.buildIndexingReqs();\n\t\t\t\tfor (IndexingReq req : reqs) {\n\t\t\t\t\tif (req != null) // if doc is provided, interpret as\n\t\t\t\t\t\t\t\t\t\t// a delete, e.g. update with\n\t\t\t\t\t\t\t\t\t\t// nothing\n\t\t\t\t\t{\n\t\t\t\t\t\tDocument doc = req.getDocument();\n\t\t\t\t\t\tif (doc!=null){\n\t\t\t\t\t\t  ZoieSegmentReader.fillDocumentID(doc, uid);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// add to the insert list\n\t\t\t\t\t\tList<IndexingReq> docList = addList.get(uid);\n\t\t\t\t\t\tif (docList == null) {\n\t\t\t\t\t\t\tdocList = new LinkedList<IndexingReq>();\n\t\t\t\t\t\t\taddList.put(uid, docList);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdocList.add(req);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\taddList.remove(uid);\n\t\t\t}\n\t\t}\n\n\t\tList<IndexingReq> docList = new ArrayList<IndexingReq>(addList.size());\n\t\tfor (List<IndexingReq> tmpList : addList.values()) {\n\t\t\tdocList.addAll(tmpList);\n\t\t}\n            idx.updateIndex(delSet, docList, _analyzer,_similarity);\n            propagateDeletes(delSet);\n\t\tsynchronized(_idxMgr)\n\t\t{\n              idx.refresh();\n              commitPropagatedDeletes();\n\t\t}\n\t} catch (IOException ioe) {\n\t\tlog.error(\"Problem indexing batch: \" + ioe.getMessage(), ioe);\n\t} finally {\n\t\ttry {\n\t\t\tif (idx != null) {\n\t\t\t\tidx.incrementEventCount(eventCount);\n\t\t\t\tidx.setVersion(version); // update the version of the\n\t\t\t\t\t\t\t\t\t\t\t// index\n\t\t\t}\n\t\t} catch (Exception e) // catch all exceptions, or it would screw\n\t\t\t\t\t\t\t\t// up jobs framework\n\t\t{\n\t\t\tlog.warn(e.getMessage());\n\t\t} finally {\n\t\t\tif (idx instanceof DiskSearchIndex<?>) {\n\t\t\t\tlog.info(\"disk indexing requests flushed.\");\n\t\t\t}\n\t\t}\n\t}\n}", "path": "java\\proj\\zoie\\impl\\indexing\\internal\\LuceneIndexDataLoader.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * Writes the current version/SCN to the disk\n */\n", "func_signal": "public void setVersion(long version)\n    throws IOException", "code": "{\n  // update new index file\n  File directoryFile = new File(_location, IndexReaderDispenser.INDEX_DIRECTORY);\n  IndexSignature sig = IndexSignature.read(directoryFile);\n  sig.updateVersion(version);\n  try\n  {\n    // make sure atomicity of the index publication\n    File tmpFile = new File(_location, IndexReaderDispenser.INDEX_DIRECTORY + \".new\");\n    sig.save(tmpFile);\n    File tmpFile2 = new File(_location, IndexReaderDispenser.INDEX_DIRECTORY + \".tmp\");\n    directoryFile.renameTo(tmpFile2);\n    tmpFile.renameTo(directoryFile);\n    tmpFile2.delete();\n  }\n  catch (IOException e)\n  {\n    throw e;\n  }\n\n}", "path": "java\\proj\\zoie\\impl\\indexing\\internal\\DiskSearchIndex.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * Sets the size of each batch of events that it sends to background DataConsumer. <br><br>\n * The private member _batchSize is the 'soft' size limit of each event batch.\n * If the events are coming in too fast and\n * it already accumulate this many, then we block the incoming events until the number of\n * buffered events drop below this limit after some of them being sent to background\n * DataConsumer.\n * The actual size of each batch is variable, though the intention is that it is not bigger than the limit.\n * If the incoming batch is big, then the outgoing batch will be big too and likely bigger than the limit.\n * @param batchSize\n */\n", "func_signal": "public void setBatchSize(int batchSize)", "code": "{\n  synchronized(this)\n  {\n    _batchSize = Math.max(1, batchSize);\n  }\n}", "path": "java\\proj\\zoie\\impl\\indexing\\AsyncDataConsumer.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * @return the number of unprocessed events in buffered already.\n */\n", "func_signal": "public int getCurrentBatchSize()", "code": "{\n  synchronized(this)\n  {\n    return (_batch != null ? _batch.size() : 0);\n  }\n}", "path": "java\\proj\\zoie\\impl\\indexing\\AsyncDataConsumer.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "// a prime number\n", "func_signal": "public DocIDMapperImpl(long[] uidArray)", "code": "{\n\t    int len = uidArray.length;\n\t    \n\t    int mask = len/4;\n\t    mask |= (mask >> 1);\n\t    mask |= (mask >> 2);\n\t    mask |= (mask >> 4);\n\t    mask |= (mask >> 8);\n\t    mask |= (mask >> 16);\n\t    _mask = mask;\n\t    \n\t    _filter = new long[mask+1];\n\n\t    for(long uid : uidArray)\n\t    {\n\t      if(uid != ZoieIndexReader.DELETED_UID)\n\t      {\n\t        int h = (int)((uid >>> 32) ^ uid)* MIXER;\n\t        \n\t        long bits = _filter[h & _mask];\n\t        bits |= ((1L << (h >>> 26)));\n\t        bits |= ((1L << ((h >> 20) & 0x3F)));\n\t        _filter[h & _mask] = bits;\n\t      }\n\t    }\n\t    \n\t    _start = new int[_mask + 1 + 1];\n\t    len = 0;\n\t    for(long uid : uidArray)\n\t    {\n\t      if(uid != ZoieIndexReader.DELETED_UID)\n\t      {\n\t        _start[((int)((uid >>> 32) ^ uid) * MIXER) & _mask]++;\n\t        len++;\n\t      }\n\t    }\n\t    int val = 0;\n\t    for(int i = 0; i < _start.length; i++)\n\t    {\n\t      val += _start[i];\n\t      _start[i] = val;\n\t    }\n\t    _start[_mask] = len;\n\t    \n\t    long[] partitionedUidArray = new long[len];\n\t    int[] docArray = new int[len];\n\t    \n\t    for(long uid : uidArray)\n\t    {\n\t      if(uid != ZoieIndexReader.DELETED_UID)\n\t      {\n\t        int i = --(_start[((int)((uid >>> 32) ^ uid) * MIXER) & _mask]);\n\t        partitionedUidArray[i] = uid;\n\t      }\n\t    }\n\t    \n\t    int s = _start[0];\n\t    for(int i = 1; i < _start.length; i++)\n\t    {\n\t      int e = _start[i];\n\t      if(s < e)\n\t      {\n\t        Arrays.sort(partitionedUidArray, s, e);\n\t      }\n\t      s = e;\n\t    }\n\t    \n\t    for(int docid = 0; docid < uidArray.length; docid++)\n\t    {\n\t      long uid = uidArray[docid];\n\t      if(uid != ZoieIndexReader.DELETED_UID)\n\t      {\n\t        final int p = ((int)((uid >>> 32) ^ uid) * MIXER) & _mask;\n\t        int idx = findIndex(partitionedUidArray, uid, _start[p], _start[p + 1]);\n\t        if(idx >= 0)\n\t        {\n\t          docArray[idx] = docid;\n\t        }\n\t      }\n\t    }\n\t    \n\t    _uidArray = partitionedUidArray;\n\t    _docArray = docArray;\n\t  }", "path": "java\\proj\\zoie\\api\\impl\\DocIDMapperImpl.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * @return the intended limit of batch size.\n */\n", "func_signal": "public int getBatchSize()", "code": "{\n  synchronized(this)\n  {\n    return _batchSize;\n  }\n}", "path": "java\\proj\\zoie\\impl\\indexing\\AsyncDataConsumer.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n       * Refreshes the index reader\n       */\n", "func_signal": "@Override\n      public void refresh()", "code": "{\n  synchronized(this)\n  {\n    try {\n      LongSet delDocs = _delDocs;\n            clearDeletes();\n            _dispenser.getNewReader();\n            markDeletes(delDocs); // re-mark deletes\n    } catch (IOException e) {\n      log.error(e.getMessage(),e);\n    }\n  }\n      }", "path": "java\\proj\\zoie\\impl\\indexing\\internal\\DiskSearchIndex.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n  SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyyMMdd_HHmmss\");\n\n  Date date = new java.sql.Date(System.currentTimeMillis());\n  String timeStamp = simpleDateFormat.format(date);\n  String usageInfo = \"Options\";\n  Options options = new Options();\n  options.addOption(\"f\", true, \"File location of the file(s) to be plotted or compared\");\n  options.addOption(\"v\",\n                    true,\n                    \"Version information of the file(s) to be plotted or compared\");\n  options.addOption(\"o\", true, \"Name of pdf file where to generate output\");\n  options.addOption(\"w\", true, \"Optional Image Width\");\n  options.addOption(\"h\", true, \"Optional Image Height\");\n  options.addOption(\"r\", false, \"Override output file if it exists\");\n  options.addOption(\"i\", false, \"Optional create images\");\n  options.addOption(\"idir\", true, \"Optional directory where to create images\");\n  options.addOption(\"d\", false, \"Optional create data html file\");\n  options.addOption(\"dout\", true, \"Optional html file name where to create data output\");\n\n  CommandLine cmd = null;\n  CommandLineParser parser = new PosixParser();\n  try\n  {\n    cmd = parser.parse(options, args);\n  }\n  catch (Exception e)\n  {\n    System.err.println(\"Error parsing arguments\");\n    e.printStackTrace();\n    System.exit(1);\n  }\n\n  if (!cmd.hasOption(\"f\"))\n  {\n    HelpFormatter formatter = new HelpFormatter();\n    formatter.printHelp(usageInfo, options);\n    System.exit(1);\n  }\n\n  String fls = cmd.getOptionValue(\"f\");\n  String[] files = fls.split(\",\");\n  if (files.length > 1)\n  {\n    HelpFormatter formatter = new HelpFormatter();\n    formatter.printHelp(\"Currently processing of multiple input files is not supported\\n\"\n                            + usageInfo,\n                        options);\n    System.exit(1);\n  }\n  String[] versions = null;\n\n  if (cmd.hasOption(\"v\"))\n  {\n    String ver = cmd.getOptionValue(\"v\");\n    versions = ver.split(\",\");\n    if (versions.length != files.length)\n    {\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(\"Number of versions provided should be same as number of file to be processed\\n\"\n                              + usageInfo,\n                          options);\n      System.exit(1);\n    }\n  }\n  else\n  {\n    versions = new String[files.length];\n    for (int i = 0; i < versions.length; i++)\n    {\n      versions[i] = \"Version \" + (i + 1);\n    }\n  }\n\n  int imgWidth = -1;\n  int imgHeight = -1;\n\n  if (cmd.hasOption(\"w\"))\n  {\n    imgWidth = Integer.parseInt(cmd.getOptionValue(\"w\").trim());\n  }\n\n  if (cmd.hasOption(\"h\"))\n  {\n    imgHeight = Integer.parseInt(cmd.getOptionValue(\"h\").trim());\n  }\n\n  boolean override = false;\n  if (cmd.hasOption(\"r\"))\n  {\n    override = true;\n  }\n\n  String outFile = null;\n  String outFileName = null;\n\n  if (cmd.hasOption(\"o\"))\n  {\n    outFile = cmd.getOptionValue(\"o\");\n  }\n  else\n  {\n    outFile = \"zoie_index_data.pdf\";\n  }\n\n  File existFile = new File(outFile);\n  outFileName = existFile.getAbsolutePath();\n\n  if (existFile.exists())\n  {\n    if (!override)\n    {\n      String dir = existFile.getAbsoluteFile().getParent();\n      String fname = existFile.getName();\n      if (fname.indexOf(\".\") != -1)\n      {\n        fname =\n            fname.substring(0, fname.lastIndexOf(\".\")) + \"_\" + timeStamp\n                + fname.substring(fname.lastIndexOf(\".\"));\n      }\n      outFileName = dir + File.separator + fname;\n    }\n  }\n  if (!outFileName.endsWith(\".pdf\"))\n  {\n    outFileName = outFileName + \".pdf\";\n  }\n\n  String propFileName = null;\n  if (cmd.hasOption(\"env\"))\n  {\n    propFileName = cmd.getOptionValue(\"env\");\n  }\n\n  boolean createPngs = cmd.hasOption(\"i\");\n  String pngDir = null;\n  if (cmd.hasOption(\"idir\"))\n  {\n    pngDir = cmd.getOptionValue(\"idir\");\n  }\n\n  boolean createHtml = false;\n  if (cmd.hasOption(\"d\"))\n  {\n    createHtml = true;\n  }\n\n  String htmlOutFileName = null;\n\n  //\n  if (createHtml)\n  {\n    String htmlOutFile = null;\n    if (cmd.hasOption(\"dout\"))\n    {\n      htmlOutFile = cmd.getOptionValue(\"dout\");\n    }\n    else\n    {\n      htmlOutFile = \"zoie_index_html_data.html\";\n    }\n\n    File existFile1 = new File(htmlOutFile);\n    htmlOutFileName = existFile1.getAbsolutePath();\n\n    if (existFile1.exists())\n    {\n      if (!override)\n      {\n        String dir = existFile1.getAbsoluteFile().getParent();\n        String fname = existFile1.getName();\n        if (fname.indexOf(\".\") != -1)\n        {\n          fname =\n              fname.substring(0, fname.lastIndexOf(\".\")) + \"_\" + timeStamp\n                  + fname.substring(fname.lastIndexOf(\".\"));\n        }\n        htmlOutFileName = dir + File.separator + fname;\n      }\n    }\n    if (!htmlOutFileName.endsWith(\".html\"))\n    {\n      htmlOutFileName = htmlOutFileName + \".html\";\n    }\n  }\n\n  //\n  createHtml = true;\n\n  Map<Integer, String> indSortMap = null;\n  try\n  {\n    ZoieIndexLogProcessor.plot(new ZoieIndexLogProcessor(files[0]),\n                               outFileName,\n                               versions[0],\n                               imgWidth,\n                               imgHeight,\n                               createPngs,\n                               pngDir,\n                               createHtml,\n                               htmlOutFileName);\n    System.out.println(\"Ouput File Name: \" + outFileName);\n\n  }\n  catch (Exception e1)\n  {\n    System.out.println(\"Exception in processing ....\");\n    e1.printStackTrace();\n    System.exit(1);\n  }\n\n}", "path": "test-perf\\java\\proj\\zoie\\perf\\reports\\ZoieIndexLogProcessor.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * Start the background thread that batch-processes the incoming data events by sending them to the background DataConsumer.\n * <br>\n * If this method is not called, all threads trying to send in data events will eventually be blocked.\n */\n", "func_signal": "public void start()", "code": "{\n  _consumerThread = new ConsumerThread();\n  _consumerThread.setDaemon(true);\n  _consumerThread.start();\n}", "path": "java\\proj\\zoie\\impl\\indexing\\AsyncDataConsumer.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tRandom rand = new Random();\n\tint max = 5000000;\n\tint[] docs = new int[max];\n\tfor (int i=0;i<docs.length;++i)\n\t{\n\t\tdocs[i]=i;\n\t}\n\tint limit = 10000;\n\tIntSet set1 = new IntRBTreeSet();\n\twhile(set1.size() < limit)\n\t{\n\t\tset1.add(rand.nextInt(max));\n\t}\n\t\n\tIntSet set2 = new IntOpenHashSet();\n\tfor (int i : set1)\n\t{\n\t\tset2.add(i);\n\t}\n\t\n\tint[] set3 = set1.toIntArray();\n\tArrays.sort(set3);\n\t\n\tBitSet set4 = new BitSet();\n\tfor (int i : set1)\n\t{\n\t\tset4.set(i);\n\t}\n\t\n\tlong start,end;\n\t\n\tstart=System.nanoTime();\n\tfor (int i=0;i<docs.length;++i)\n\t{\n\t\tset1.contains(i);\n\t}\n\tend=System.nanoTime();\n\tSystem.out.println(\"set1: \"+(end-start)/1000000);\n\t\n\tstart=System.nanoTime();\n\tfor (int i=0;i<docs.length;++i)\n\t{\n\t\tset2.contains(i);\n\t}\n\tend=System.nanoTime();\n\tSystem.out.println(\"set2: \"+(end-start)/1000000);\n\t\n\tstart=System.nanoTime();\n\tfor (int i=0;i<docs.length;++i)\n\t{\n\t\tArrays.binarySearch(set3, i);\n\t}\n\tend=System.nanoTime();\n\tSystem.out.println(\"set3: \"+(end-start)/1000000);\n\t\n\tstart=System.nanoTime();\n\tfor (int i=0;i<docs.length;++i)\n\t{\n\t\tset4.get(i);\n\t}\n\tend=System.nanoTime();\n\tSystem.out.println(\"set4: \"+(end-start)/1000000);\n}", "path": "test\\proj\\zoie\\test\\PerfTest.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * consumption of a collection of data events. Note that this method may have a side\n * effect. That is it may empty the Collection passed in after execution. <br><br>\n * Duplicates and buffers the incoming data events.<br><br>\n * If too many (>=_batchSize) amount of data events are already buffered,\n * it waits until the background DataConsumer consumes some of the events before\n * it add new events to the buffer. This throttles the amount of events in each batch.\n * \n * @param data\n * @throws ZoieException\n * @see proj.zoie.api.DataConsumer#consume(java.util.Collection)\n * \n */\n", "func_signal": "public void consume(Collection<DataEvent<V>> data) throws ZoieException", "code": "{\n  if (data == null || data.size() == 0) return;\n  \n  synchronized(this)\n  {\n    while(_batch.size() >= _batchSize)\n    {\n      if(_consumerThread == null || !_consumerThread.isAlive() || _consumerThread._stop)\n      {\n        throw new ZoieException(\"consumer thread has stopped\");\n      }\n      try\n      {\n        this.wait();\n      }\n      catch (InterruptedException e)\n      {\n      }\n    }\n    for(DataEvent<V> event : data)\n    {\n      _bufferedVersion = Math.max(_bufferedVersion, event.getVersion());\n      _batch.add(event);\n    }\n    this.notifyAll(); // wake up the thread waiting in flushBuffer()\n  }\n}", "path": "java\\proj\\zoie\\impl\\indexing\\AsyncDataConsumer.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * utility method to delete a directory\n * @param dir\n * @throws IOException\n */\n", "func_signal": "private static void deleteDir(File dir) throws IOException", "code": "{\n  if (dir == null) return;\n  \n  if (dir.isDirectory())\n  {\n    File[] files=dir.listFiles();\n    for (File file : files)\n    {\n      deleteDir(file);\n    }\n    if (!dir.delete())\n    {\n      throw new IOException(\"cannot remove directory: \"+dir.getAbsolutePath());\n    }\n  }\n  else\n  {\n    if (!dir.delete())\n    {\n      throw new IOException(\"cannot delete file: \"+dir.getAbsolutePath());\n    }\n  }\n}", "path": "java\\proj\\zoie\\impl\\indexing\\internal\\SearchIndexManager.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args) throws IOException", "code": "{\n\tFile srcIndex = new File(args[0]);\n\tFile targetIndex = new File(args[1]);\n\tint numReplicas = Integer.parseInt(args[2]);\n\tSystem.out.println(\"source index: \"+srcIndex.getAbsolutePath());\n\tSystem.out.println(\"target index: \"+targetIndex.getAbsolutePath());\n\tSystem.out.println(\"num replications: \"+numReplicas);\n\tIndexReader reader = null;\n\ttry\n\t{\n\t\tDirectory dir = DiskSearchIndex.getIndexDir(srcIndex);\n\t\treader=IndexReader.open(dir,true);\n\t\tSystem.out.println(\"source index, numdocs: \"+reader.numDocs());\n\t}\n\tcatch(IOException e)\n\t{\n\t\te.printStackTrace();\n\t}\n\tfinally\n\t{\n\t\tif (reader!=null)\n\t\t{\n\t\t\treader.close();\n\t\t}\n\t\treader = null;\n\t}\n\ttargetIndex.mkdirs();\n\tDirectory targetDir = DiskSearchIndex.getIndexDir(targetIndex);\n\t\n\tIndexWriter writer = null;\n\ttry\n\t{\n\t\twriter = new IndexWriter(targetDir,new StandardAnalyzer(Version.LUCENE_CURRENT),true,MaxFieldLength.UNLIMITED);\n\t\tfor (int i=0;i<numReplicas;++i)\n\t\t{\n\t\t  System.out.println(\"replicating \"+(i+1)+\" time(s)\");\n\t\t  writer.addIndexesNoOptimize(new Directory[]{DiskSearchIndex.getIndexDir(srcIndex)});\n\t\t}\n\t\tSystem.out.println(\"optimizing....\");\n\t\twriter.optimize();\n\t\tSystem.out.println(\"done optimizing....\");\n\t}\n\tfinally\n\t{\n\t\tif (writer!=null)\n\t\t{\n\t\t\twriter.close();\n\t\t}\n\t}\n\n\ttry\n\t{\n\t\treader=IndexReader.open(targetDir,true);\n\t\tSystem.out.println(\"target index, numdocs: \"+reader.numDocs());\n\t}\n\tfinally\n\t{\n\t\tif (reader!=null)\n\t\t{\n\t\t\treader.close();\n\t\t}\n\t}\n}", "path": "perf\\src\\java\\proj\\zoie\\perf\\tools\\IndexReplicator.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * Close and releases dispenser and clean up\n */\n", "func_signal": "public void close()", "code": "{\n        super.close();\n        \n        // close the dispenser\n  if (_dispenser != null)\n  {\n      _dispenser.close();\n  }\n}", "path": "java\\proj\\zoie\\impl\\indexing\\internal\\DiskSearchIndex.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * Gets the number of docs in the current loaded index\n * @return number of docs\n */\n", "func_signal": "public int getNumdocs()", "code": "{\n  IndexReader reader=_dispenser.getIndexReader();\n  if (reader!=null)\n  {\n    return reader.numDocs();\n  }\n  else\n  {\n    return 0;\n  }\n}", "path": "java\\proj\\zoie\\impl\\indexing\\internal\\DiskSearchIndex.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * Purges an index\n */\n", "func_signal": "public void purgeIndex()", "code": "{\n\t\tlog.info(\"purging index ...\");\n\t\t\n        FileUtil.rmDir(_location);\n        \n        if(_diskIndex != null)\n\t\t{\n          _diskIndex.clearDeletes();\n          _diskIndex.refresh();\n          RAMSearchIndex<R> memIndexA = new RAMSearchIndex<R>(_diskIndex.getVersion(), _indexReaderDecorator);\n          Mem<R> mem = new Mem<R>(memIndexA, null, memIndexA, null, null);\n          _mem = mem;\n\t\t}\n\t\t\n\t\tlog.info(\"index purged\");\n}", "path": "java\\proj\\zoie\\impl\\indexing\\internal\\SearchIndexManager.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * Initialization\n */\n", "func_signal": "private void init()", "code": "{\n\t\t_diskIndexerStatus = Status.Sleep;\n  _diskIndex = new DiskSearchIndex<R>(_location, _indexReaderDecorator); \n        ZoieIndexReader<R> diskIndexReader = null;\n  if(_diskIndex != null)\n  {\n    try\n    {\n      diskIndexReader = _diskIndex.getNewReader();\n    }\n          catch (IOException e)\n          {\n            log.error(e.getMessage(),e);\n            return;\n          }\n  }\n  long version = _diskIndex.getVersion();\n        RAMSearchIndex<R> memIndexA = new RAMSearchIndex<R>(version, _indexReaderDecorator);\n  Mem<R> mem = new Mem<R>(memIndexA, null, memIndexA, null, diskIndexReader);\n  _mem = mem;\n}", "path": "java\\proj\\zoie\\impl\\indexing\\internal\\SearchIndexManager.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/**\n * @param location \n * @param indexReaderDecorator\n */\n", "func_signal": "public SearchIndexManager(File location,IndexReaderDecorator<R> indexReaderDecorator)", "code": "{\n  _location = location;\n  \n  if (indexReaderDecorator!=null)\n  {\n    _indexReaderDecorator=indexReaderDecorator;\n  }\n  else\n  {\n    throw new IllegalArgumentException(\"indexReaderDecorator cannot be null\");\n  }\n  init();\n}", "path": "java\\proj\\zoie\\impl\\indexing\\internal\\SearchIndexManager.java", "repo_name": "jakemannix/cloud-zoie", "stars": 1, "license": "None", "language": "java", "size": 30412}
{"docstring": "/** Get the range for Y values of the data points registered so far.\n *  Usually, derived classes handle managing the range by checking\n *  each new point against the range.\n *  @return An array of two doubles where the first element is the\n *  minimum and the second element is the maximum.\n *  @see #getYRange()\n */\n", "func_signal": "public synchronized double[] getYAutoRange()", "code": "{\n    double[] result = new double[2];\n    result[0] = _yBottom;\n    result[1] = _yTop;\n    return result;\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/** Set the size of the plot.  This overrides the base class to make\n *  it work.  In particular, it records the specified size so that\n *  getMinimumSize() and getPreferredSize() return the specified value.\n *  However, it only works if the plot is placed in its own JPanel.\n *  This is because the JPanel asks the contained component for\n *  its preferred size before determining the size of the panel.\n *  If the plot is placed directly in the content pane of a JApplet,\n *  then, mysteriously, this method has no effect.\n *  @param width The width, in pixels.\n *  @param height The height, in pixels.\n */\n", "func_signal": "public synchronized void setSize(int width, int height)", "code": "{\n    // Changing legend means we need to repaint the offscreen buffer.\n    _plotImage = null;\n\n    _width = width;\n    _height = height;\n    _preferredWidth = width;\n    _preferredHeight = height;\n\n    //_sizeHasBeenSet = true;\n    super.setSize(width, height);\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/** Reset the X and Y axes to the ranges that were first specified\n *  using setXRange() and setYRange(). If these methods have not been\n *  called, then reset to the default ranges.\n *  This method calls repaint(), which eventually causes the display\n *  to be updated.\n */\n", "func_signal": "public synchronized void resetAxes()", "code": "{\n    setXRange(_originalXlow, _originalXhigh);\n    setYRange(_originalYlow, _originalYhigh);\n    repaint();\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/** Rename a legend.\n *  @param dataset The dataset of the legend to be renamed.\n *  If there is no dataset with this value, then nothing happens.\n *  @param newName  The new name of legend.\n *  @see #addLegend(int, String)\n */\n", "func_signal": "public synchronized void renameLegend(int dataset, String newName)", "code": "{\n    int index = _legendDatasets.indexOf(Integer.valueOf(dataset), 0);\n\n    if (index != -1) {\n        _legendStrings.setElementAt(newName, index);\n\n        // Changing legend means we need to repaint the offscreen buffer.\n        _plotImage = null;\n    }\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/** Construct a plot box with a default configuration. */\n", "func_signal": "public PlotBox()", "code": "{\n    // If we make this transparent, the background shows through.\n    // However, we assume that the user will set the background.\n    // NOTE: A component is transparent by default (?).\n    // setOpaque(false);\n    setOpaque(true);\n\n    // Create a right-justified layout with spacing of 2 pixels.\n    setLayout(new FlowLayout(FlowLayout.RIGHT, 2, 2));\n    addMouseListener(new ZoomListener());\n    addKeyListener(new CommandListener());\n    addMouseMotionListener(new DragListener());\n\n    // This is something we want to do only once...\n    _measureFonts();\n\n    // Request the focus so that key events are heard.\n    // NOTE: no longer needed?\n    // requestFocus();\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/** Set the title of the graph.\n *  @param title The title.\n */\n", "func_signal": "public synchronized void setTitle(String title)", "code": "{\n    // Changing legend means we need to repaint the offscreen buffer.\n    _plotImage = null;\n\n    _title = title;\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/** Draw the axes using the current range, label, and title information,\n *  at the size of the specified rectangle.\n *  If the second argument is true, clear the display before redrawing.\n *  This method is called by paintComponent().  To cause it to be called\n *  you would normally call repaint(), which eventually causes\n *  paintComponent() to be called.\n *  <p>\n *  Note that this is synchronized so that points are not added\n *  by other threads while the drawing is occurring.  This method\n *  should be called only from the event dispatch thread, consistent\n *  with swing policy.\n *  @param graphics The graphics context.\n *  @param clearfirst If true, clear the plot before proceeding.\n *  @param drawRect A specification of the size.\n */\n", "func_signal": "protected synchronized void _drawPlot(Graphics graphics,\n        boolean clearfirst, Rectangle drawRect)", "code": "{\n    // Ignore if there is no graphics object to draw on.\n    if (graphics == null) {\n        return;\n    }\n\n    graphics.setPaintMode();\n\n    /* NOTE: The following seems to be unnecessary with Swing...\n     if (clearfirst) {\n     // NOTE: calling clearRect() here permits the background\n     // color to show through, but it messes up printing.\n     // Printing results in black-on-black title and axis labels.\n     graphics.setColor(_background);\n     graphics.drawRect(0, 0, drawRect.width, drawRect.height);\n     graphics.setColor(Color.black);\n     }\n     */\n\n    // If an error message has been set, display it and return.\n    if (_errorMsg != null) {\n        int fheight = _labelFontMetrics.getHeight() + 2;\n        int msgy = fheight;\n        graphics.setColor(Color.black);\n\n        for (int i = 0; i < _errorMsg.length; i++) {\n            graphics.drawString(_errorMsg[i], 10, msgy);\n            msgy += fheight;\n            System.err.println(_errorMsg[i]);\n        }\n\n        return;\n    }\n\n    // Make sure we have an x and y range\n    if (!_xRangeGiven) {\n        if (_xBottom > _xTop) {\n            // have nothing to go on.\n            _setXRange(0, 0);\n        } else {\n            _setXRange(_xBottom, _xTop);\n        }\n    }\n\n    if (!_yRangeGiven) {\n        if (_yBottom > _yTop) {\n            // have nothing to go on.\n            _setYRange(0, 0);\n        } else {\n            _setYRange(_yBottom, _yTop);\n        }\n    }\n\n    // If user specified a plot rectangle, compute\n    // a working plot rectangle which lies inside the\n    // drawRect at the user specified coordinates\n    Rectangle workingPlotRectangle = null;\n\n    if (_specifiedPlotRectangle != null) {\n        workingPlotRectangle = new Rectangle(Math.max(0,\n                _specifiedPlotRectangle.x), Math.max(0,\n                _specifiedPlotRectangle.y), Math.min(drawRect.width,\n                _specifiedPlotRectangle.width), Math.min(drawRect.height,\n                _specifiedPlotRectangle.height));\n    }\n\n    // Vertical space for title, if appropriate.\n    // NOTE: We assume a one-line title.\n    int titley = 0;\n    int titlefontheight = _titleFontMetrics.getHeight();\n\n    if (_title == null) {\n        // NOTE: If the _title is null, then set it to the empty\n        // string to solve the problem where the fill button overlaps\n        // the legend if there is no title.  The fix here would\n        // be to modify the legend printing text so that it takes\n        // into account the case where there is no title by offsetting\n        // just enough for the button.\n        _title = \"\";\n    }\n\n    if ((_title != null) || (_yExp != 0)) {\n        titley = titlefontheight + _topPadding;\n    }\n\n    // Number of vertical tick marks depends on the height of the font\n    // for labeling ticks and the height of the window.\n    Font previousFont = graphics.getFont();\n    graphics.setFont(_labelFont);\n    graphics.setColor(_foreground); // foreground color not set here  --Rob.\n\n    int labelheight = _labelFontMetrics.getHeight();\n    int halflabelheight = labelheight / 2;\n\n    // Draw scaling annotation for x axis.\n    // NOTE: 5 pixel padding on bottom.\n    int ySPos = drawRect.height - 5;\n    int xSPos = drawRect.width - _rightPadding;\n\n    if (_xlog) {\n        _xExp = (int) Math.floor(_xtickMin);\n    }\n\n    if ((_xExp != 0) && (_xticks == null)) {\n        String superscript = Integer.toString(_xExp);\n        xSPos -= _superscriptFontMetrics.stringWidth(superscript);\n        graphics.setFont(_superscriptFont);\n\n        if (!_xlog) {\n            graphics\n                    .drawString(superscript, xSPos, ySPos - halflabelheight);\n            xSPos -= _labelFontMetrics.stringWidth(\"x10\");\n            graphics.setFont(_labelFont);\n            graphics.drawString(\"x10\", xSPos, ySPos);\n        }\n\n        // NOTE: 5 pixel padding on bottom\n        _bottomPadding = ((3 * labelheight) / 2) + 5;\n    }\n\n    // NOTE: 5 pixel padding on the bottom.\n    if ((_xlabel != null) && (_bottomPadding < (labelheight + 5))) {\n        _bottomPadding = labelheight + 5;\n    }\n\n    // Compute the space needed around the plot, starting with vertical.\n    // NOTE: padding of 5 pixels below title.\n    if (workingPlotRectangle != null) {\n        _uly = workingPlotRectangle.y;\n    } else {\n        _uly = titley + 5;\n    }\n\n    // NOTE: 3 pixels above bottom labels.\n    if (workingPlotRectangle != null) {\n        _lry = workingPlotRectangle.y + workingPlotRectangle.height;\n    } else {\n        _lry = drawRect.height - labelheight - _bottomPadding - 3;\n    }\n\n    int height = _lry - _uly;\n    _yscale = height / (_yMax - _yMin);\n    _ytickscale = height / (_ytickMax - _ytickMin);\n\n    ////////////////// vertical axis\n    // Number of y tick marks.\n    // NOTE: subjective spacing factor.\n    int ny = 2 + (height / (labelheight + 10));\n\n    // Compute y increment.\n    double yStep = _roundUp((_ytickMax - _ytickMin) / ny);\n\n    // Compute y starting point so it is a multiple of yStep.\n    double yStart = yStep * Math.ceil(_ytickMin / yStep);\n\n    // NOTE: Following disables first tick.  Not a good idea?\n    // if (yStart == _ytickMin) yStart += yStep;\n    // Define the strings that will label the y axis.\n    // Meanwhile, find the width of the widest label.\n    // The labels are quantized so that they don't have excess resolution.\n    int widesty = 0;\n\n    // These do not get used unless ticks are automatic, but the\n    // compiler is not smart enough to allow us to reference them\n    // in two distinct conditional clauses unless they are\n    // allocated outside the clauses.\n    String[] ylabels = new String[ny];\n    int[] ylabwidth = new int[ny];\n\n    int ind = 0;\n\n    if (_yticks == null) {\n        Vector ygrid = null;\n\n        if (_ylog) {\n            ygrid = _gridInit(yStart, yStep, true, null);\n        }\n\n        // automatic ticks\n        // First, figure out how many digits after the decimal point\n        // will be used.\n        int numfracdigits = _numFracDigits(yStep);\n\n        // NOTE: Test cases kept in case they are needed again.\n        // System.out.println(\"0.1 with 3 digits: \" + _formatNum(0.1, 3));\n        // System.out.println(\"0.0995 with 3 digits: \" +\n        //                    _formatNum(0.0995, 3));\n        // System.out.println(\"0.9995 with 3 digits: \" +\n        //                    _formatNum(0.9995, 3));\n        // System.out.println(\"1.9995 with 0 digits: \" +\n        //                    _formatNum(1.9995, 0));\n        // System.out.println(\"1 with 3 digits: \" + _formatNum(1, 3));\n        // System.out.println(\"10 with 0 digits: \" + _formatNum(10, 0));\n        // System.out.println(\"997 with 3 digits: \" + _formatNum(997, 3));\n        // System.out.println(\"0.005 needs: \" + _numFracDigits(0.005));\n        // System.out.println(\"1 needs: \" + _numFracDigits(1));\n        // System.out.println(\"999 needs: \" + _numFracDigits(999));\n        // System.out.println(\"999.0001 needs: \"+_numFracDigits(999.0001));\n        // System.out.println(\"0.005 integer digits: \" +\n        //                    _numIntDigits(0.005));\n        // System.out.println(\"1 integer digits: \" + _numIntDigits(1));\n        // System.out.println(\"999 integer digits: \" + _numIntDigits(999));\n        // System.out.println(\"-999.0001 integer digits: \" +\n        //                    _numIntDigits(999.0001));\n        double yTmpStart = yStart;\n\n        if (_ylog) {\n            yTmpStart = _gridStep(ygrid, yStart, yStep, _ylog);\n        }\n\n        for (double ypos = yTmpStart; ypos <= _ytickMax; ypos = _gridStep(\n                ygrid, ypos, yStep, _ylog)) {\n            // Prevent out of bounds exceptions\n            if (ind >= ny) {\n                break;\n            }\n\n            String yticklabel;\n\n            if (_ylog) {\n                yticklabel = _formatLogNum(ypos, numfracdigits);\n            } else {\n                yticklabel = _formatNum(ypos, numfracdigits);\n            }\n\n            ylabels[ind] = yticklabel;\n\n            int lw = _labelFontMetrics.stringWidth(yticklabel);\n            ylabwidth[ind++] = lw;\n\n            if (lw > widesty) {\n                widesty = lw;\n            }\n        }\n    } else {\n        // explicitly specified ticks\n        Enumeration nl = _yticklabels.elements();\n\n        while (nl.hasMoreElements()) {\n            String label = (String) nl.nextElement();\n            int lw = _labelFontMetrics.stringWidth(label);\n\n            if (lw > widesty) {\n                widesty = lw;\n            }\n        }\n    }\n\n    // Next we do the horizontal spacing.\n    if (workingPlotRectangle != null) {\n        _ulx = workingPlotRectangle.x;\n    } else {\n        if (_ylabel != null) {\n            _ulx = widesty + _labelFontMetrics.stringWidth(\"W\")\n                    + _leftPadding;\n        } else {\n            _ulx = widesty + _leftPadding;\n        }\n    }\n\n    int legendwidth = _drawLegend(graphics, drawRect.width - _rightPadding,\n            _uly);\n\n    if (workingPlotRectangle != null) {\n        _lrx = workingPlotRectangle.x + workingPlotRectangle.width;\n    } else {\n        _lrx = drawRect.width - legendwidth - _rightPadding;\n    }\n\n    int width = _lrx - _ulx;\n    _xscale = width / (_xMax - _xMin);\n\n    _xtickscale = width / (_xtickMax - _xtickMin);\n\n    // Background for the plotting rectangle.\n    // Always use a white background because the dataset colors\n    // were designed for a white background.\n    graphics.setColor(Color.white);\n    graphics.fillRect(_ulx, _uly, width, height);\n\n    graphics.setColor(_foreground);\n    graphics.drawRect(_ulx, _uly, width, height);\n\n    // NOTE: subjective tick length.\n    int tickLength = 5;\n    int xCoord1 = _ulx + tickLength;\n    int xCoord2 = _lrx - tickLength;\n\n    if (_yticks == null) {\n        // auto-ticks\n        Vector ygrid = null;\n        double yTmpStart = yStart;\n\n        if (_ylog) {\n            ygrid = _gridInit(yStart, yStep, true, null);\n            yTmpStart = _gridStep(ygrid, yStart, yStep, _ylog);\n            ny = ind;\n        }\n\n        ind = 0;\n\n        // Set to false if we don't need the exponent\n        boolean needExponent = _ylog;\n\n        for (double ypos = yTmpStart; ypos <= _ytickMax; ypos = _gridStep(\n                ygrid, ypos, yStep, _ylog)) {\n            // Prevent out of bounds exceptions\n            if (ind >= ny) {\n                break;\n            }\n\n            int yCoord1 = _lry - (int) ((ypos - _ytickMin) * _ytickscale);\n\n            // The lowest label is shifted up slightly to avoid\n            // colliding with x labels.\n            int offset = 0;\n\n            if ((ind > 0) && !_ylog) {\n                offset = halflabelheight;\n            }\n\n            graphics.drawLine(_ulx, yCoord1, xCoord1, yCoord1);\n            graphics.drawLine(_lrx, yCoord1, xCoord2, yCoord1);\n\n            if (_grid && (yCoord1 != _uly) && (yCoord1 != _lry)) {\n                graphics.setColor(Color.lightGray);\n                graphics.drawLine(xCoord1, yCoord1, xCoord2, yCoord1);\n                graphics.setColor(_foreground);\n            }\n\n            // Check to see if any of the labels printed contain\n            // the exponent.  If we don't see an exponent, then print it.\n            if (_ylog && (ylabels[ind].indexOf('e') != -1)) {\n                needExponent = false;\n            }\n\n            // NOTE: 4 pixel spacing between axis and labels.\n            graphics.drawString(ylabels[ind], _ulx - ylabwidth[ind++] - 4,\n                    yCoord1 + offset);\n        }\n\n        if (_ylog) {\n            // Draw in grid lines that don't have labels.\n            Vector unlabeledgrid = _gridInit(yStart, yStep, false, ygrid);\n\n            if (unlabeledgrid.size() > 0) {\n                // If the step is greater than 1, clamp it to 1 so that\n                // we draw the unlabeled grid lines for each\n                //integer interval.\n                double tmpStep = (yStep > 1.0) ? 1.0 : yStep;\n\n                for (double ypos = _gridStep(unlabeledgrid, yStart,\n                        tmpStep, _ylog); ypos <= _ytickMax; ypos = _gridStep(\n                        unlabeledgrid, ypos, tmpStep, _ylog)) {\n                    int yCoord1 = _lry\n                            - (int) ((ypos - _ytickMin) * _ytickscale);\n\n                    if (_grid && (yCoord1 != _uly) && (yCoord1 != _lry)) {\n                        graphics.setColor(Color.lightGray);\n                        graphics.drawLine(_ulx + 1, yCoord1, _lrx - 1,\n                                yCoord1);\n                        graphics.setColor(_foreground);\n                    }\n                }\n            }\n\n            if (needExponent) {\n                // We zoomed in, so we need the exponent\n                _yExp = (int) Math.floor(yTmpStart);\n            } else {\n                _yExp = 0;\n            }\n        }\n\n        // Draw scaling annotation for y axis.\n        if (_yExp != 0) {\n            graphics.drawString(\"x10\", 2, titley);\n            graphics.setFont(_superscriptFont);\n            graphics.drawString(Integer.toString(_yExp), _labelFontMetrics\n                    .stringWidth(\"x10\") + 2, titley - halflabelheight);\n            graphics.setFont(_labelFont);\n        }\n    } else {\n        // ticks have been explicitly specified\n        Enumeration nt = _yticks.elements();\n        Enumeration nl = _yticklabels.elements();\n\n        while (nl.hasMoreElements()) {\n            String label = (String) nl.nextElement();\n            double ypos = ((Double) (nt.nextElement())).doubleValue();\n\n            if ((ypos > _yMax) || (ypos < _yMin)) {\n                continue;\n            }\n\n            int yCoord1 = _lry - (int) ((ypos - _yMin) * _yscale);\n            int offset = 0;\n\n            if (ypos < (_lry - labelheight)) {\n                offset = halflabelheight;\n            }\n\n            graphics.drawLine(_ulx, yCoord1, xCoord1, yCoord1);\n            graphics.drawLine(_lrx, yCoord1, xCoord2, yCoord1);\n\n            if (_grid && (yCoord1 != _uly) && (yCoord1 != _lry)) {\n                graphics.setColor(Color.lightGray);\n                graphics.drawLine(xCoord1, yCoord1, xCoord2, yCoord1);\n                graphics.setColor(_foreground);\n            }\n\n            // NOTE: 3 pixel spacing between axis and labels.\n            graphics.drawString(label, _ulx\n                    - _labelFontMetrics.stringWidth(label) - 3, yCoord1\n                    + offset);\n        }\n    }\n\n    //////////////////// horizontal axis\n    int yCoord1 = _uly + tickLength;\n    int yCoord2 = _lry - tickLength;\n    int charwidth = _labelFontMetrics.stringWidth(\"8\");\n\n    if (_xticks == null) {\n        // auto-ticks\n        // Number of x tick marks.\n        // Need to start with a guess and converge on a solution here.\n        int nx = 10;\n        double xStep = 0.0;\n        int numfracdigits = 0;\n\n        if (_xlog) {\n            // X axes log labels will be at most 6 chars: -1E-02\n            nx = 2 + (width / ((charwidth * 6) + 10));\n        } else {\n            // Limit to 10 iterations\n            int count = 0;\n\n            while (count++ <= 10) {\n                xStep = _roundUp((_xtickMax - _xtickMin) / nx);\n\n                // Compute the width of a label for this xStep\n                numfracdigits = _numFracDigits(xStep);\n\n                // Number of integer digits is the maximum of two endpoints\n                int intdigits = _numIntDigits(_xtickMax);\n                int inttemp = _numIntDigits(_xtickMin);\n\n                if (intdigits < inttemp) {\n                    intdigits = inttemp;\n                }\n\n                // Allow two extra digits (decimal point and sign).\n                int maxlabelwidth = charwidth\n                        * (numfracdigits + 2 + intdigits);\n\n                // Compute new estimate of number of ticks.\n                int savenx = nx;\n\n                // NOTE: 10 additional pixels between labels.\n                // NOTE: Try to ensure at least two tick marks.\n                nx = 2 + (width / (maxlabelwidth + 10));\n\n                if (((nx - savenx) <= 1) || ((savenx - nx) <= 1)) {\n                    break;\n                }\n            }\n        }\n\n        xStep = _roundUp((_xtickMax - _xtickMin) / nx);\n        numfracdigits = _numFracDigits(xStep);\n\n        // Compute x starting point so it is a multiple of xStep.\n        double xStart = xStep * Math.ceil(_xtickMin / xStep);\n\n        // NOTE: Following disables first tick.  Not a good idea?\n        // if (xStart == _xMin) xStart += xStep;\n        Vector xgrid = null;\n        double xTmpStart = xStart;\n\n        if (_xlog) {\n            xgrid = _gridInit(xStart, xStep, true, null);\n\n            //xgrid = _gridInit(xStart, xStep);\n            xTmpStart = _gridRoundUp(xgrid, xStart);\n        }\n\n        // Set to false if we don't need the exponent\n        boolean needExponent = _xlog;\n\n        // Label the x axis.  The labels are quantized so that\n        // they don't have excess resolution.\n        for (double xpos = xTmpStart; xpos <= _xtickMax; xpos = _gridStep(\n                xgrid, xpos, xStep, _xlog)) {\n            String xticklabel;\n\n            if (_xlog) {\n                xticklabel = _formatLogNum(xpos, numfracdigits);\n\n                if (xticklabel.indexOf('e') != -1) {\n                    needExponent = false;\n                }\n            } else {\n                xticklabel = _formatNum(xpos, numfracdigits);\n            }\n\n            xCoord1 = _ulx + (int) ((xpos - _xtickMin) * _xtickscale);\n            graphics.drawLine(xCoord1, _uly, xCoord1, yCoord1);\n            graphics.drawLine(xCoord1, _lry, xCoord1, yCoord2);\n\n            if (_grid && (xCoord1 != _ulx) && (xCoord1 != _lrx)) {\n                graphics.setColor(Color.lightGray);\n                graphics.drawLine(xCoord1, yCoord1, xCoord1, yCoord2);\n                graphics.setColor(_foreground);\n            }\n\n            int labxpos = xCoord1\n                    - (_labelFontMetrics.stringWidth(xticklabel) / 2);\n\n            // NOTE: 3 pixel spacing between axis and labels.\n            graphics\n                    .drawString(xticklabel, labxpos, _lry + 3 + labelheight);\n        }\n\n        if (_xlog) {\n            // Draw in grid lines that don't have labels.\n            // If the step is greater than 1, clamp it to 1 so that\n            // we draw the unlabeled grid lines for each\n            // integer interval.\n            double tmpStep = (xStep > 1.0) ? 1.0 : xStep;\n\n            // Recalculate the start using the new step.\n            xTmpStart = tmpStep * Math.ceil(_xtickMin / tmpStep);\n\n            Vector unlabeledgrid = _gridInit(xTmpStart, tmpStep, false,\n                    xgrid);\n\n            if (unlabeledgrid.size() > 0) {\n                for (double xpos = _gridStep(unlabeledgrid, xTmpStart,\n                        tmpStep, _xlog); xpos <= _xtickMax; xpos = _gridStep(\n                        unlabeledgrid, xpos, tmpStep, _xlog)) {\n                    xCoord1 = _ulx\n                            + (int) ((xpos - _xtickMin) * _xtickscale);\n\n                    if (_grid && (xCoord1 != _ulx) && (xCoord1 != _lrx)) {\n                        graphics.setColor(Color.lightGray);\n                        graphics.drawLine(xCoord1, _uly + 1, xCoord1,\n                                _lry - 1);\n                        graphics.setColor(_foreground);\n                    }\n                }\n            }\n\n            if (needExponent) {\n                _xExp = (int) Math.floor(xTmpStart);\n                graphics.setFont(_superscriptFont);\n                graphics.drawString(Integer.toString(_xExp), xSPos, ySPos\n                        - halflabelheight);\n                xSPos -= _labelFontMetrics.stringWidth(\"x10\");\n                graphics.setFont(_labelFont);\n                graphics.drawString(\"x10\", xSPos, ySPos);\n            } else {\n                _xExp = 0;\n            }\n        }\n    } else {\n        // ticks have been explicitly specified\n        Enumeration nt = _xticks.elements();\n        Enumeration nl = _xticklabels.elements();\n\n        // Code contributed by Jun Wu (jwu@inin.com.au)\n        double preLength = 0.0;\n\n        while (nl.hasMoreElements()) {\n            String label = (String) nl.nextElement();\n            double xpos = ((Double) (nt.nextElement())).doubleValue();\n\n            // If xpos is out of range, ignore.\n            if ((xpos > _xMax) || (xpos < _xMin)) {\n                continue;\n            }\n\n            // Find the center position of the label.\n            xCoord1 = _ulx + (int) ((xpos - _xMin) * _xscale);\n\n            // Find  the start position of x label.\n            int labxpos = xCoord1\n                    - (_labelFontMetrics.stringWidth(label) / 2);\n\n            // If the labels are not overlapped, proceed.\n            if (labxpos > preLength) {\n                // calculate the length of the label\n                preLength = xCoord1\n                        + (_labelFontMetrics.stringWidth(label) / 2) + 10;\n\n                // Draw the label.\n                // NOTE: 3 pixel spacing between axis and labels.\n                graphics.drawString(label, labxpos, _lry + 3 + labelheight);\n\n                // Draw the label mark on the axis\n                graphics.drawLine(xCoord1, _uly, xCoord1, yCoord1);\n                graphics.drawLine(xCoord1, _lry, xCoord1, yCoord2);\n\n                // Draw the grid line\n                if (_grid && (xCoord1 != _ulx) && (xCoord1 != _lrx)) {\n                    graphics.setColor(Color.lightGray);\n                    graphics.drawLine(xCoord1, yCoord1, xCoord1, yCoord2);\n                    graphics.setColor(_foreground);\n                }\n            }\n        }\n    }\n\n    //////////////////// Draw title and axis labels now.\n    // Center the title and X label over the plotting region, not\n    // the window.\n    graphics.setColor(_foreground);\n\n    if (_title != null) {\n        graphics.setFont(_titleFont);\n\n        int titlex = _ulx\n                + ((width - _titleFontMetrics.stringWidth(_title)) / 2);\n        graphics.drawString(_title, titlex, titley);\n    }\n\n    graphics.setFont(_labelFont);\n\n    if (_xlabel != null) {\n        int labelx = _ulx\n                + ((width - _labelFontMetrics.stringWidth(_xlabel)) / 2);\n        graphics.drawString(_xlabel, labelx, ySPos);\n    }\n\n    int charcenter = 2 + (_labelFontMetrics.stringWidth(\"W\") / 2);\n\n    if (_ylabel != null) {\n        int yl = _ylabel.length();\n\n        if (graphics instanceof Graphics2D) {\n            int starty = (_uly + ((_lry - _uly) / 2) + (_labelFontMetrics\n                    .stringWidth(_ylabel) / 2))\n                    - charwidth;\n            Graphics2D g2d = (Graphics2D) graphics;\n\n            // NOTE: Fudge factor so label doesn't touch axis labels.\n            int startx = (charcenter + halflabelheight) - 2;\n            g2d.rotate(Math.toRadians(-90), startx, starty);\n            g2d.drawString(_ylabel, startx, starty);\n            g2d.rotate(Math.toRadians(90), startx, starty);\n        } else {\n            // Not graphics 2D, no support for rotation.\n            // Vertical label is fairly complex to draw.\n            int starty = (_uly + ((_lry - _uly) / 2))\n                    - (yl * halflabelheight) + labelheight;\n\n            for (int i = 0; i < yl; i++) {\n                String nchar = _ylabel.substring(i, i + 1);\n                int cwidth = _labelFontMetrics.stringWidth(nchar);\n                graphics.drawString(nchar, charcenter - (cwidth / 2),\n                        starty);\n                starty += labelheight;\n            }\n        }\n    }\n\n    graphics.setFont(previousFont);\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/** Specify a tick mark for the X axis.  The label given is placed\n *  on the axis at the position given by <i>position</i>. If this\n *  is called once or more, automatic generation of tick marks is\n *  disabled.  The tick mark will appear only if it is within the X\n *  range.\n *  @param label The label for the tick mark.\n *  @param position The position on the X axis.\n */\n", "func_signal": "public synchronized void addXTick(String label, double position)", "code": "{\n    // Changing legend means we need to repaint the offscreen buffer.\n    _plotImage = null;\n\n    if (_xticks == null) {\n        _xticks = new Vector();\n        _xticklabels = new Vector();\n    }\n\n    _xticks.addElement(Double.valueOf(position));\n    _xticklabels.addElement(label);\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/** Set the padding multiple.\n *  The plot rectangle can be \"padded\" in each direction -x, +x, -y, and\n *  +y.  If the padding is set to 0.05 (and the padding is used), then\n *  there is 10% more length on each axis than set by the setXRange() and\n *  setYRange() methods, 5% in each direction.\n *  @param padding The padding multiple.\n */\n", "func_signal": "protected void _setPadding(double padding)", "code": "{\n    // Changing legend means we need to repaint the offscreen buffer.\n    _plotImage = null;\n\n    _padding = padding;\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/** Set the label for the Y (vertical) axis.\n *  @param label The label.\n */\n", "func_signal": "public synchronized void setYLabel(String label)", "code": "{\n    // Changing legend means we need to repaint the offscreen buffer.\n    _plotImage = null;\n\n    _ylabel = label;\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/** Specify a tick mark for the Y axis.  The label given is placed\n *  on the axis at the position given by <i>position</i>. If this\n *  is called once or more, automatic generation of tick marks is\n *  disabled.  The tick mark will appear only if it is within the Y\n *  range.\n *  @param label The label for the tick mark.\n *  @param position The position on the Y axis.\n */\n", "func_signal": "public synchronized void addYTick(String label, double position)", "code": "{\n    // Changing legend means we need to repaint the offscreen buffer.\n    _plotImage = null;\n\n    if (_yticks == null) {\n        _yticks = new Vector();\n        _yticklabels = new Vector();\n    }\n\n    _yticks.addElement(Double.valueOf(position));\n    _yticklabels.addElement(label);\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/*\n * Draw the legend in the upper right corner and return the width\n * (in pixels)  used up.  The arguments give the upper right corner\n * of the region where the legend should be placed.\n */\n", "func_signal": "private int _drawLegend(Graphics graphics, int urx, int ury)", "code": "{\n    // Ignore if there is no graphics object to draw on.\n    if (graphics == null) {\n        return 0;\n    }\n\n    // FIXME: consolidate all these for efficiency\n    Font previousFont = graphics.getFont();\n    graphics.setFont(_labelFont);\n\n    int spacing = _labelFontMetrics.getHeight();\n\n    Enumeration v = _legendStrings.elements();\n    Enumeration i = _legendDatasets.elements();\n    int ypos = ury + spacing;\n    int maxwidth = 0;\n\n    while (v.hasMoreElements()) {\n        String legend = (String) v.nextElement();\n\n        // NOTE: relies on _legendDatasets having the same num. of entries.\n        int dataset = ((Integer) i.nextElement()).intValue();\n\n        if (dataset >= 0) {\n            if (_usecolor) {\n                // Points are only distinguished up to the number of colors\n                int color = dataset % _colors.length;\n                graphics.setColor(_colors[color]);\n            }\n\n            _drawPoint(graphics, dataset, urx - 3, ypos - 3, false);\n\n            graphics.setColor(_foreground);\n\n            int width = _labelFontMetrics.stringWidth(legend);\n\n            if (width > maxwidth) {\n                maxwidth = width;\n            }\n\n            graphics.drawString(legend, urx - 15 - width, ypos);\n            ypos += spacing;\n        }\n    }\n\n    graphics.setFont(previousFont);\n    return 22 + maxwidth; // NOTE: subjective spacing parameter.\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/** Put a mark corresponding to the specified dataset at the\n *  specified x and y position.   The mark is drawn in the\n *  current color.  In this base class, a point is a\n *  filled rectangle 6 pixels across.  Note that marks greater than\n *  about 6 pixels in size will not look very good since they will\n *  overlap axis labels and may not fit well in the legend.   The\n *  <i>clip</i> argument, if <code>true</code>, states\n *  that the point should not be drawn if\n *  it is out of range.\n *\n *  Note that this method is not synchronized, so the caller should be.\n *  Moreover this method should always be called from the event thread\n *  when being used to write to the screen.\n *\n *  @param graphics The graphics context.\n *  @param dataset The index of the data set.\n *  @param xpos The X position.\n *  @param ypos The Y position.\n *  @param clip If true, do not draw if out of range.\n */\n", "func_signal": "protected void _drawPoint(Graphics graphics, int dataset, long xpos,\n        long ypos, boolean clip)", "code": "{\n    // Ignore if there is no graphics object to draw on.\n    if (graphics == null) {\n        return;\n    }\n\n    boolean pointinside = (ypos <= _lry) && (ypos >= _uly)\n            && (xpos <= _lrx) && (xpos >= _ulx);\n\n    if (!pointinside && clip) {\n        return;\n    }\n\n    graphics.fillRect((int) xpos - 6, (int) ypos - 6, 6, 6);\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/** Add a legend (displayed at the upper right) for the specified\n *  data set with the specified string.  Short strings generally\n *  fit better than long strings.  If the string is empty, or the\n *  argument is null, then no legend is added.\n *  @param dataset The dataset index.\n *  @param legend The label for the dataset.\n *  @see #renameLegend(int, String)\n */\n", "func_signal": "public synchronized void addLegend(int dataset, String legend)", "code": "{\n    // Changing legend means we need to repaint the offscreen buffer.\n    _plotImage = null;\n\n    if ((legend == null) || legend.equals(\"\")) {\n        return;\n    }\n\n    _legendStrings.addElement(legend);\n    _legendDatasets.addElement(Integer.valueOf(dataset));\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/*\n * Return the number of integer digits required to display the\n * given number.  No number larger than 15 is returned (if\n * more than 15 digits are required, 15 is returned).\n */\n", "func_signal": "private int _numIntDigits(double num)", "code": "{\n    int numdigits = 0;\n\n    while ((numdigits <= 15) && ((int) num != 0.0)) {\n        num /= 10.0;\n        numdigits += 1;\n    }\n\n    return numdigits;\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/** Open up the input file, which could be stdin, a URL, or a file.\n *  @deprecated This method is deprecated.  Use read() instead.\n */\n", "func_signal": "public synchronized void parseFile(String filespec, URL documentBase)", "code": "{\n    DataInputStream in = null;\n\n    if ((filespec == null) || (filespec.length() == 0)) {\n        // Open up stdin\n        in = new DataInputStream(System.in);\n    } else {\n        try {\n            URL url = null;\n\n            if ((documentBase == null) && (_documentBase != null)) {\n                documentBase = _documentBase;\n            }\n\n            if (documentBase == null) {\n                url = new URL(filespec);\n            } else {\n                try {\n                    url = new URL(documentBase, filespec);\n                } catch (NullPointerException e) {\n                    // If we got a NullPointerException, then perhaps we\n                    // are calling this as an application, not as an applet\n                    url = new URL(filespec);\n                }\n            }\n\n            in = new DataInputStream(url.openStream());\n        } catch (MalformedURLException e) {\n            try {\n                // Just try to open it as a file.\n                in = new DataInputStream(new FileInputStream(filespec));\n            } catch (FileNotFoundException me) {\n                _errorMsg = new String[2];\n                _errorMsg[0] = \"File not found: \" + filespec;\n                _errorMsg[1] = me.getMessage();\n                return;\n            } catch (SecurityException me) {\n                _errorMsg = new String[2];\n                _errorMsg[0] = \"Security Exception: \" + filespec;\n                _errorMsg[1] = me.getMessage();\n                return;\n            }\n        } catch (IOException ioe) {\n            _errorMsg = new String[3];\n            _errorMsg[0] = \"Failure opening URL: \";\n            _errorMsg[1] = \" \" + filespec;\n            _errorMsg[2] = ioe.getMessage();\n            return;\n        }\n    }\n\n    // At this point, we've opened the data source, now read it in\n    try {\n        BufferedReader din = new BufferedReader(new InputStreamReader(in));\n        String line = din.readLine();\n\n        while (line != null) {\n            _parseLine(line);\n            line = din.readLine();\n        }\n    } catch (MalformedURLException e) {\n        _errorMsg = new String[2];\n        _errorMsg[0] = \"Malformed URL: \" + filespec;\n        _errorMsg[1] = e.getMessage();\n        return;\n    } catch (IOException e) {\n        _errorMsg = new String[2];\n        _errorMsg[0] = \"Failure reading data: \" + filespec;\n        _errorMsg[1] = e.getMessage();\n        _errorMsg[1] = e.getMessage();\n    } finally {\n        try {\n            in.close();\n        } catch (IOException me) {\n        }\n    }\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/*\n * Internal implementation of setYRange, so that it can be called when\n * autoranging.\n */\n", "func_signal": "private void _setYRange(double min, double max)", "code": "{\n    // See comment in _setXRange() about why this is necessary.\n    // Changing the range means we have to replot.\n    _plotImage = null;\n\n    if (!_originalYRangeGiven) {\n        _originalYlow = min;\n        _originalYhigh = max;\n        _originalYRangeGiven = true;\n    }\n\n    // If values are invalid, try for something reasonable.\n    if (min > max) {\n        min = -1.0;\n        max = 1.0;\n    } else if (min == max) {\n        min -= 0.1;\n        max += 0.1;\n    }\n\n    //if (_yRangeGiven) {\n    // The user specified the range, so don't pad.\n    //    _yMin = min;\n    //    _yMax = max;\n    //} else {\n    // Pad slightly so that we don't plot points on the axes.\n    _yMin = min - ((max - min) * _padding);\n    _yMax = max + ((max - min) * _padding);\n\n    //}\n    // Find the exponent.\n    double largest = Math.max(Math.abs(_yMin), Math.abs(_yMax));\n    _yExp = (int) Math.floor(Math.log(largest) * _LOG10SCALE);\n\n    // Use the exponent only if it's larger than 1 in magnitude.\n    if ((_yExp > 1) || (_yExp < -1)) {\n        double ys = 1.0 / Math.pow(10.0, _yExp);\n        _ytickMin = _yMin * ys;\n        _ytickMax = _yMax * ys;\n    } else {\n        _ytickMin = _yMin;\n        _ytickMax = _yMax;\n        _yExp = 0;\n    }\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/** Rescale so that the data that is currently plotted just fits.\n *  This is done based on the protected variables _xBottom, _xTop,\n *  _yBottom, and _yTop.  It is up to derived classes to ensure that\n *  variables are valid.\n *  This method calls repaint(), which eventually causes the display\n *  to be updated.\n */\n", "func_signal": "public synchronized void fillPlot()", "code": "{\n    // NOTE: These used to be _setXRange() and _setYRange() to avoid\n    // confusing this with user-specified ranges.  But we want to treat\n    // a fill command as a user specified range.\n    // EAL, 6/12/00.\n    setXRange(_xBottom, _xTop);\n    setYRange(_yBottom, _yTop);\n    repaint();\n\n    // Reacquire the focus so that key bindings work.\n    // NOTE: no longer needed?\n    // requestFocus();\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/** Draw this plot onto the specified image at the position of the\n *  specified rectangle with the size of the specified rectangle.\n *  The plot is rendered using anti-aliasing.\n *  This can be used to paint a number of different\n *  plots onto a single buffered image.  This method can be used, for\n *  example, by a servlet to produce an image, rather than\n *  requiring an applet to instantiate a PlotBox.\n *  @param bufferedImage Image onto which the plot is drawn.\n *  @param rectangle The size and position of the plot in the image.\n *  @param hints Rendering hints for this plot.\n *  @param transparent Indicator that the background of the plot\n *   should not be painted.\n *  @return The modified bufferedImage.\n */\n", "func_signal": "public synchronized BufferedImage exportImage(BufferedImage bufferedImage,\n        Rectangle rectangle, RenderingHints hints, boolean transparent)", "code": "{\n    Graphics2D graphics = bufferedImage.createGraphics();\n    graphics.addRenderingHints(_defaultImageRenderingHints());\n\n    if (!transparent) {\n        graphics.setColor(Color.white); // set the background color\n        graphics.fill(rectangle);\n    }\n\n    _drawPlot(graphics, false, rectangle);\n    return bufferedImage;\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/*\n * Parse a string of the form: \"word num, word num, word num, ...\"\n * where the word must be enclosed in quotes if it contains spaces,\n * and the number is interpreted as a floating point number.  Ignore\n * any incorrectly formatted fields.  I <i>xtick</i> is true, then\n * interpret the parsed string to specify the tick labels on the x axis.\n * Otherwise, do the y axis.\n */\n", "func_signal": "private void _parsePairs(String line, boolean xtick)", "code": "{\n    // Clear current ticks first.\n    if (xtick) {\n        _xticks = null;\n        _xticklabels = null;\n    } else {\n        _yticks = null;\n        _yticklabels = null;\n    }\n\n    int start = 0;\n    boolean cont = true;\n\n    while (cont) {\n        int comma = line.indexOf(\",\", start);\n        String pair = null;\n\n        if (comma > start) {\n            pair = (line.substring(start, comma)).trim();\n        } else {\n            pair = (line.substring(start)).trim();\n            cont = false;\n        }\n\n        int close = -1;\n        int open = 0;\n\n        if (pair.startsWith(\"\\\"\")) {\n            close = pair.indexOf(\"\\\"\", 1);\n            open = 1;\n        } else {\n            close = pair.indexOf(\" \");\n        }\n\n        if (close > 0) {\n            String label = pair.substring(open, close);\n            String index = (pair.substring(close + 1)).trim();\n\n            try {\n                double idx = (Double.valueOf(index)).doubleValue();\n\n                if (xtick) {\n                    addXTick(label, idx);\n                } else {\n                    addYTick(label, idx);\n                }\n            } catch (NumberFormatException e) {\n                System.err.println(\"Warning from PlotBox: \"\n                        + \"Unable to parse ticks: \" + e.getMessage());\n\n                // ignore if format is bogus.\n            }\n        }\n\n        start = comma + 1;\n        comma = line.indexOf(\",\", start);\n    }\n}", "path": "src\\ptolemy\\plot\\PlotBox.java", "repo_name": "SixByNine/Tempo2Applet", "stars": 1, "license": "None", "language": "java", "size": 988}
{"docstring": "/**\n * Test of addAll method, of class CollectionSafeProxy.\n */\n", "func_signal": "@Test\npublic void testAddAll()", "code": "{\n    Collection<Integer> col = new ArrayList<Integer>();\n    col.add(12);\n    col.add(13);\n    Collection<Integer> newCol = with(singleLst).addAll(col).get();\n    assertEquals(3, newCol.size() );\n}", "path": "test\\facade\\collections\\CollectionSafeProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Test of add method with varargs, of class CollectionSafeProxy.\n */\n", "func_signal": "@Test\npublic void testAddVarArgs()", "code": "{\n    on(singleLst).add( 12, 13);\n    assertEquals(3, singleLst.size());\n}", "path": "test\\facade\\collections\\CollectionInPlaceProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Test of join method, of class CollectionSafeProxy.\n */\n", "func_signal": "@Test\npublic void testJoin()", "code": "{\n    final int SECOND = 665;\n    final int THIRD = 333;\n    final String SEPARATOR = \", \";\n    singleLst.add(SECOND);\n    singleLst.add(THIRD);\n    String str = on(singleLst).join(\", \");\n    assertEquals( SINGLE_ELEM+SEPARATOR+SECOND+SEPARATOR+THIRD, str);\n}", "path": "test\\facade\\collections\\CollectionInPlaceProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Test of on method, of class Collections.\n */\n", "func_signal": "@Test\npublic void testOn()", "code": "{\n    Object o = on(col);\n    assertTrue( o instanceof CollectionInPlaceProxy );\n}", "path": "test\\facade\\CollectionsTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Test of add method, of class CollectionSafeProxy.\n */\n", "func_signal": "@Test\npublic void testAdd()", "code": "{\n    Collection<Integer> lst = with( singleLst ).add(3).get();\n    assertEquals( 2, lst.size() );\n}", "path": "test\\facade\\collections\\CollectionSafeProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Test of add method, of class CollectionSafeProxy.\n */\n", "func_signal": "@Test\npublic void testAdd()", "code": "{\n    on(singleLst).add(3);\n    assertEquals(2, singleLst.size());\n}", "path": "test\\facade\\collections\\CollectionInPlaceProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Test of get method, of class CollectionSafeProxy.\n */\n", "func_signal": "@Test\npublic void testGet()", "code": "{\n    Collection<Integer> lst = with( emptyLst ).get();\n    assertFalse( lst == emptyLst );\n}", "path": "test\\facade\\collections\\CollectionSafeProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Test of addAll array method, of class CollectionSafeProxy.\n */\n", "func_signal": "@Test\npublic void testAddAllArray()", "code": "{\n    Integer[] ary = { 12, 13 };\n    Collection<Integer> newCol = with(singleLst).addAll( ary ).get();\n    assertEquals(3, newCol.size() );\n}", "path": "test\\facade\\collections\\CollectionSafeProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Test of apply method, of class CollectionSafeProxy.\n */\n", "func_signal": "@Test\npublic void testApply()", "code": "{\n    class Watcher implements Closure<Integer> {\n        private int last;\n        public void execute(Integer arg0) {\n            last = arg0;\n        }\n        public int getLast() { return last;}\n\n    }\n    Watcher w = new Watcher();\n    on(singleLst).apply(w);\n    assertEquals( w.getLast(), SINGLE_ELEM);\n}", "path": "test\\facade\\collections\\CollectionInPlaceProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Test of reduce method, of class CollectionSafeProxy.\n */\n", "func_signal": "@Test\npublic void testReduce()", "code": "{\n    class Sum implements Reducer<Integer,Integer>  {\n\n        public Integer neutralElement() {\n            return 0;\n        }\n\n        public Integer reduce(Integer t, Integer accumulator) {\n            return t+accumulator;\n        }\n\n    }\n    final int NEW_ELEM = 665;\n    int result = with(singleLst).add(NEW_ELEM).reduce(new Sum());\n    assertEquals(NEW_ELEM+SINGLE_ELEM, result);\n}", "path": "test\\facade\\collections\\CollectionSafeProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Test of with method, of class Collections.\n */\n", "func_signal": "@Test\npublic void testWith()", "code": "{\n    Object o = with(col);\n    assertTrue( o instanceof CollectionSafeProxy );\n}", "path": "test\\facade\\CollectionsTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n     * Test of add method with varargs, of class CollectionSafeProxy.\n     */\n", "func_signal": "@Test\n    public void testAddVarArgs()", "code": "{\n  Collection<Integer> newCol = with(singleLst).add( 12, 13).get();\n  assertEquals(3, newCol.size());\n    }", "path": "test\\facade\\collections\\CollectionSafeProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Test of apply method, of class CollectionSafeProxy.\n */\n", "func_signal": "@Test\npublic void testApply()", "code": "{\n    class Watcher implements Closure<Integer> {\n        private int last;\n        public void execute(Integer arg0) {\n            last = arg0;\n        }\n        public int getLast() { return last;}\n\n    }\n    Watcher w = new Watcher();\n    with(singleLst).apply(w);\n    assertEquals( w.getLast(), SINGLE_ELEM);\n}", "path": "test\\facade\\collections\\CollectionSafeProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "//TODO: better approach\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n public <E> CollectionProxy<E> map(Transformer<T, E> transformer)", "code": "{\n    List lst = new ArrayList( collection.size() );\n     for( T t: collection ) {\n        lst.add( transformer.transform(t) );\n    }\n    collection.clear();\n    collection.addAll( lst );\n    return (CollectionProxy<E>) this;\n}", "path": "src\\facade\\collections\\CollectionInPlaceProxy.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Test of reduce method, of class CollectionSafeProxy.\n */\n", "func_signal": "@Test\npublic void testReduce()", "code": "{\n    class Sum implements Reducer<Integer,Integer>  {\n\n        public Integer neutralElement() {\n            return 0;\n        }\n\n        public Integer reduce(Integer t, Integer accumulator) {\n            return t+accumulator;\n        }\n\n    }\n    final int NEW_ELEM = 665;\n    singleLst.add(NEW_ELEM);\n    int result = on(singleLst).reduce(new Sum());\n    assertEquals(NEW_ELEM+SINGLE_ELEM, result);\n}", "path": "test\\facade\\collections\\CollectionInPlaceProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Asserts that the two collections are not modified\n */\n", "func_signal": "@After\npublic void checkForInvariance()", "code": "{\n    assertEquals(0, emptyLst.size());\n    assertEquals(1, singleLst.size());\n    assertEquals(SINGLE_ELEM, ((List<Integer>) singleLst).get(0));\n}", "path": "test\\facade\\collections\\CollectionSafeProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Test of get method, of class CollectionSafeProxy.\n */\n", "func_signal": "@Test\npublic void testGet()", "code": "{\n    Collection<Integer> lst = on(emptyLst).get();\n    assertTrue(lst == emptyLst);\n}", "path": "test\\facade\\collections\\CollectionInPlaceProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Test of map method, of class CollectionSafeProxy.\n */\n", "func_signal": "@Test\npublic void testMap()", "code": "{\n    class ToString<I extends Object> implements Transformer<I,String> {\n        public String transform(I arg) {\n            return arg.toString();\n        }\n    }\n    on(singleLst).map(new ToString());\n    String str = (String) ((List) singleLst).get(0);\n    assertEquals( Integer.toString(SINGLE_ELEM), str);\n}", "path": "test\\facade\\collections\\CollectionInPlaceProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Test of select method, of class CollectionSafeProxy.\n */\n", "func_signal": "@Test\npublic void testSelect()", "code": "{\n    on(singleLst).select(truePred).get();\n    assertEquals(1, singleLst.size());\n    on(singleLst).select(falsePred).get();\n    assertEquals(0, singleLst.size());\n}", "path": "test\\facade\\collections\\CollectionInPlaceProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * Test of join method, of class CollectionSafeProxy.\n */\n", "func_signal": "@Test\npublic void testJoin()", "code": "{\n    final int SECOND = 665;\n    final int THIRD = 333;\n    final String SEPARATOR = \", \";\n    String str = with(singleLst).add(SECOND, THIRD).join(\", \");\n    assertEquals( SINGLE_ELEM+SEPARATOR+SECOND+SEPARATOR+THIRD, str);\n}", "path": "test\\facade\\collections\\CollectionSafeProxyTest.java", "repo_name": "paradigmatic/facade", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 604}
{"docstring": "/**\n * \n * @param job\n */\n", "func_signal": "public void update(GridJob job)", "code": "{\n//        for (int ix=0; ix<this.myParams.length; ix++)\n//            this.myParams[ix] = job.getParam(ix);\n//        this.myHosts = job.getHosts();\n    \n    Iterator<String> iterator = job.parametersValues.keySet().iterator();\n    if(parametersValues == null) parametersValues = new HashMap<String, String>();\n    while(iterator.hasNext()){\n    \tString key = iterator.next();\n    \tString value = job.parametersValues.get(key);\n    \tparametersValues.put(key, value);\n    }\n}", "path": "src\\diet\\grid\\api\\GridJob.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * Sets The LOG like the given value\n * \n * @param aFlag The LOG status to set to or not.\n */\n", "func_signal": "public static void setLOG(boolean aFlag)", "code": "{\n    System.out.println(DLOG + \" = \" + aFlag);\n    LOG = aFlag;\n}", "path": "tools\\IzPack\\src\\lib\\com\\izforge\\izpack\\util\\Debug.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * Job allocated hosts\n */\n//    protected String [] myHosts;\n", "func_signal": "public GridJob()", "code": "{\n\tparametersDescriptions = new HashMap<String, String>();\n\tparametersValues = new HashMap<String, String>();\n\tparametersDescriptions.put(KEY_GRID_JOB_HOSTS, DESCRIPTION_GRID_JOB_HOSTS);\n\tparametersDescriptions.put(KEY_GRID_JOB_ID, DESCRIPTION_GRID_JOB_ID);\n\tparametersDescriptions.put(KEY_GRID_JOB_OWNER, DESCRIPTION_GRID_JOB_OWNER);\n\tparametersDescriptions.put(KEY_GRID_JOB_QUEUE, DESCRIPTION_GRID_JOB_QUEUE);\n\tparametersDescriptions.put(KEY_GRID_JOB_RESOURCES_COUNT, DESCRIPTION_GRID_JOB_RESOURCES_COUNT);\n\tparametersDescriptions.put(KEY_GRID_JOB_SCHEDTIME, DESCRIPTION_GRID_JOB_SCHEDTIME);\n\tparametersDescriptions.put(KEY_GRID_JOB_STARTTIME, DESCRIPTION_GRID_JOB_STARTTIME);\n\tparametersDescriptions.put(KEY_GRID_JOB_STATE, DESCRIPTION_GRID_JOB_STATE);\n\tparametersDescriptions.put(KEY_GRID_JOB_SUBTIME, DESCRIPTION_GRID_JOB_SUBTIME);\n\tparametersDescriptions.put(KEY_GRID_JOB_TYPE, DESCRIPTION_GRID_JOB_TYPE);\n\tparametersDescriptions.put(KEY_GRID_JOB_WALLTIME, DESCRIPTION_GRID_JOB_WALLTIME);\n\tparametersDescriptions.put(KEY_GRID_JOB_PROPERTIES, DESCRIPTION_GRID_JOB_PROPERTIES);\n\tparametersDescriptions.put(KEY_GRID_JOB_LAUNCHING_DIRECTORY, DESCRIPTION_GRID_JOB_LAUNCHING_DIRECTORY);\n\tparametersDescriptions.put(KEY_GRID_JOB_RESERVATION, DESCRIPTION_GRID_JOB_RESERVATION);\n\tparametersDescriptions.put(KEY_GRID_JOB_COMMAND, DESCRIPTION_GRID_JOB_COMMAND);\n}", "path": "src\\diet\\grid\\api\\GridJob.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * This method initializes jPanel2\t\n * \t\n * @return javax.swing.JPanel\t\n */\n", "func_signal": "private JPanel getJPanel2()", "code": "{\n\tif (jPanel2 == null) {\n\t\tjPanel2 = new JPanel();\n\t\tjPanel2.setBorder(BorderFactory.createEmptyBorder(5, 0, 0, 0));\n\t\tjPanel2.setLayout(new GridBagLayout());\n\t\tjPanel2.add(getJButton(), new GridBagConstraints());\n\t}\n\treturn jPanel2;\n}", "path": "tools\\src\\diet\\gridr\\g5k\\gui\\ReservationStatusFrame.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * Method returning the names of the columns from its\n * index\n *\n * @param columnIndex the index of the column\n *\n * @return the name of the column\n *\n */\n", "func_signal": "public String getColumnName(int columnIndex)", "code": "{\n\t\t\tString colName=\"\";\n\t\t\tif (columnIndex <= getColumnCount())\n\t\t\t\tcolName = columnNames[columnIndex];\n\t\t\treturn colName;\n\t\t}", "path": "tools\\src\\diet\\gridr\\g5k\\gui\\ReservationStatusFrame.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * Creates the logfile to write log-infos into.\n * \n * @return The writer object instance\n */\n", "func_signal": "private static PrintWriter createLogFile()", "code": "{\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n\n    File tempDirFile = new File(tempDir);\n\n    try\n    {\n        tempDirFile.mkdirs();\n    }\n    catch (RuntimeException e1)\n    {\n        e1.printStackTrace();\n    }\n\n    String logfilename = LOGFILENAME;\n    System.out.println(\"creating Logfile: '\" + logfilename + \"' in: '\" + tempDir + \"'\");\n\n    File out = new File(tempDir, logfilename);\n\n    PrintWriter logfile;\n    if (tempDirFile.canWrite())\n    {\n        try\n        {\n            BufferedWriter fw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\n                    out), \"UTF-8\"));\n            logfile = setLogFile(new PrintWriter(fw));\n        }\n        catch (Exception e)\n        {\n            logfile = null;\n            e.printStackTrace();\n        }\n    }\n    else\n    {\n        logfile = null;\n        System.err.println(\"Fatal: cannot write File: '\" + logfilename + \"' into: \"\n                + tempDirFile);\n    }\n\n    return logfile;\n}", "path": "tools\\IzPack\\src\\lib\\com\\izforge\\izpack\\util\\Debug.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * Traces the given object and additional write their status in the LOGFILE.\n * \n * @param s\n */\n", "func_signal": "public static void error(Object s)", "code": "{\n    trace(s);\n    System.err.println(s);\n    System.err.flush();\n    log(s);\n}", "path": "tools\\IzPack\\src\\lib\\com\\izforge\\izpack\\util\\Debug.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * This method initializes jButton\t\n * \t\n * @return javax.swing.JButton\t\n */\n", "func_signal": "private JButton getJButton()", "code": "{\n\tif (jButton == null) {\n\t\tjButton = new JButton(\"Quit\");\n\t\tjButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\t\tdispose();\n\t\t\t}\n\t\t});\n\t}\n\treturn jButton;\n}", "path": "tools\\src\\diet\\gridr\\g5k\\gui\\ReservationStatusFrame.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * Default constructor\n *\n * @param parent parent frame\n * @param _conn ssh connection\n * @param _user user\n * @param _frontal frontal\n * @param _oar_host oar host\n * @param _startTime start time of the reservation\n * @param _wallTime walltime of the reservation\n * @param _nodeCount number of nodes\n * @param _queue queue on which we are deploying\n * @param _properties properties of the reservation\n * @param _scriptToLaunch script to launch when the reservation comes up\n */\n", "func_signal": "public OarOpRunnable (G5kRes parent,\n        int _siteIdx,\n        Connection _conn,\n        String _user, String _frontal, String _oar_host,\n        String _startTime, String _wallTime, int _nodeCount,\n        String _queue, String _properties, String _scriptToLaunch,\n        int _chosenCluster)", "code": "{\n    this.myParent  = parent;\n    this.siteIdx = _siteIdx;\n    this.conn      = _conn;\n    this.user      = _user;\n    this.frontal   = _frontal;\n    this.oar_host  = _oar_host;\n    this.startTime = _startTime;\n    this.wallTime  = _wallTime;\n    this.nodeCount = _nodeCount;\n    this.queue     = _queue;\n    this.properties = _properties;\n    this.scriptToLaunch = _scriptToLaunch;\n    this.chosenCluster = _chosenCluster;\n    LoggingManager.log(Level.FINE, LoggingManager.RESOURCESTOOL, this.getClass().getName(), \"OarOpRunnable\", \"OarOpRunnable initialized\");\n\n}", "path": "src\\diet\\gridr\\g5k\\gui\\OarOpRunnable.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * Default constructor\n * \n * @param aReservation the reservation to display\n * @param hashMapOfJobId the HashMap containing the jobId of the reserved jobs\n */\n", "func_signal": "public ReservationStatusFrame(G5kReservation aReservation, HashMap<Integer, String> hashMapOfJobId)", "code": "{\n\tsuper();\n\treservation = aReservation;\n\tgenerateUserData(aReservation, hashMapOfJobId);\n\tinitialize();\n}", "path": "tools\\src\\diet\\gridr\\g5k\\gui\\ReservationStatusFrame.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * Traces the internal status of the given Object\n * \n * @param s\n */\n", "func_signal": "public static void trace(Object s)", "code": "{\n    if (TRACE)\n    {\n        // console.println(s.toString());\n        System.out.println(s);\n\n        if (STACKTRACE && (s instanceof Throwable))\n        {\n            // StringWriter sw = new StringWriter();\n            // PrintWriter pw = new PrintWriter(sw);\n            // ((Throwable)s).printStackTrace(pw);\n            // console.println(sw.toString());\n            ((Throwable) s).printStackTrace();\n        }\n\n        System.out.flush();\n    }\n}", "path": "tools\\IzPack\\src\\lib\\com\\izforge\\izpack\\util\\Debug.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * This method initializes jScrollPane\t\n * \t\n * @return javax.swing.JScrollPane\t\n */\n", "func_signal": "private JScrollPane getJScrollPane()", "code": "{\n\tif (jScrollPane == null) {\n\t\tjScrollPane = new JScrollPane();\n\t\tjScrollPane.setViewportView(getJTable());\n\t}\n\treturn jScrollPane;\n}", "path": "tools\\src\\diet\\gridr\\g5k\\gui\\ReservationStatusFrame.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * This method initializes jContentPane\n * \n * @return javax.swing.JPanel\n */\n", "func_signal": "private JPanel getJContentPane()", "code": "{\n\tif (jContentPane == null) {\n\t\tjContentPane = new JPanel();\n\t\tjContentPane.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n\t\tjContentPane.setLayout(new BorderLayout());\n\t\tjContentPane.add(getJPanel(), BorderLayout.CENTER);\n\t\tjContentPane.add(getJPanel2(), BorderLayout.SOUTH);\n\t\tjContentPane.add(getJPanel1(), BorderLayout.NORTH);\n\t}\n\treturn jContentPane;\n}", "path": "tools\\src\\diet\\gridr\\g5k\\gui\\ReservationStatusFrame.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * This method initializes jPanel1\t\n * \t\n * @return javax.swing.JPanel\t\n */\n", "func_signal": "private JPanel getJPanel1()", "code": "{\n\tif (jPanel1 == null) {\n\t\tjPanel1 = new JPanel();\n\t\tjPanel1.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 0));\n\t\tjPanel1.setLayout(new GridLayout(5,2));\n\t\tstatusLabel = new JLabel(\"Reservation summary :\");\n\t\tstatusLabel.setFont(new Font(\"Courier\",Font.BOLD, 20));\n\t\tjPanel1.add(statusLabel);\n\t\tjPanel1.add(Box.createHorizontalGlue());\n\t\tstartTimeLabel = new JLabel(\"Start time : \");\n\t\tjPanel1.add(startTimeLabel);\n\t\tstartTimeValueLabel = new JLabel(reservation.getStartTime());\n\t\tjPanel1.add(startTimeValueLabel);\n\t\twalltimeLabel = new JLabel(\"Walltime : \");\n\t\tjPanel1.add(walltimeLabel);\n\t\twalltimeValueLabel = new JLabel(reservation.getWallTime());\n\t\tjPanel1.add(walltimeValueLabel);\n\t\toargridsubBehaviourLabel = new JLabel(\"OAR grid sub behaviour : \");\n\t\tjPanel1.add(oargridsubBehaviourLabel);\n\t\toargridsubBehaviourValueLabel = new JLabel(Boolean.toString(reservation.isOargridsubBehaviour()));\n\t\tjPanel1.add(oargridsubBehaviourValueLabel);\n\t\tqueueLabel = new JLabel(\"Queue : \");\n\t\tjPanel1.add(queueLabel);\n\t\tqueueValueLabel = new JLabel(reservation.getSelectedQueue());\n\t\tjPanel1.add(queueValueLabel);\n\t\t\n\t}\n\treturn jPanel1;\n}", "path": "tools\\src\\diet\\gridr\\g5k\\gui\\ReservationStatusFrame.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * Sets the TRACE flag like the given value\n * \n * @param aFlag The TRACE to set / unset.\n */\n", "func_signal": "public static void setTRACE(boolean aFlag)", "code": "{\n    System.out.println(DTRACE + \" = \" + aFlag);\n    TRACE = aFlag;\n}", "path": "tools\\IzPack\\src\\lib\\com\\izforge\\izpack\\util\\Debug.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * Sets the STACKTRACE like the given value\n * \n * @param aFlag The STACKTRACE to set / unset.\n */\n", "func_signal": "public static void setSTACKTRACE(boolean aFlag)", "code": "{\n    System.out.println(DSTACKTRACE + \" = \" + aFlag);\n    STACKTRACE = aFlag;\n}", "path": "tools\\IzPack\\src\\lib\\com\\izforge\\izpack\\util\\Debug.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * Logs the given Object in the created Logfile if -DLOG=true was given on commandline i.e: java\n * -DLOG=true -jar izpack-installer.jar\n * \n * @param o The Object to log\n * @param withWhatFormat if the given MASK is greater than 0, Log with Date/Timestamp\n */\n", "func_signal": "public static void log(Object o, int withWhatFormat)", "code": "{\n    // if LOG was given\n    if (LOG)\n    {\n        PrintWriter logfile;\n        if ((logfile = getLogFile()) == null)\n        {\n            logfile = createLogFile();\n        }\n\n        if (logfile != null)\n        {\n            if (o == null)\n            {\n                o = \"null\";\n            }\n\n            StringBuffer entry = new StringBuffer();\n            if (logWithTimeStamp(withWhatFormat))\n            {\n                entry.append(System.currentTimeMillis());\n                entry.append(';');\n                entry.append(' ');\n            }\n            if (logWithDate(withWhatFormat))\n            {\n                entry.append(new Date());\n                entry.append(';');\n                entry.append(' ');\n            }\n\n            entry.append(o);\n\n            logfile.println(entry.toString());\n\n            if (o instanceof Throwable)\n            {\n                ((Throwable) o).printStackTrace(logfile);\n            }\n\n            logfile.flush();\n\n            // logfile.close();\n            // logFile = null;\n        }\n        else\n        {\n            System.err.println(\"Cannot write into logfile: (\" + logfile + \") <- '\" + o + \"'\");\n        }\n    }\n}", "path": "tools\\IzPack\\src\\lib\\com\\izforge\\izpack\\util\\Debug.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * Get the Logfile\n * \n * @return Returns the logFile.\n */\n", "func_signal": "public static PrintWriter getLogFile()", "code": "{\n    PrintWriter logfile = (PrintWriter) System.getProperties().get(IZPACK_LOGFILE);\n\n    return logfile;\n}", "path": "tools\\IzPack\\src\\lib\\com\\izforge\\izpack\\util\\Debug.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * Default constructor\n *\n * @param data data to display\n */\n", "func_signal": "public UserViewTableModel(String [][] data)", "code": "{\n\t\t\tthis.myData = new Vector<Vector<String>>();\n\t\t\tfor(int i = 0 ; i < data.length ; i ++){\n\t\t\t\tVector<String> temp = new Vector<String>();\n\t\t\t\tfor(int j = 0 ; j < data[i].length ; j ++){\n\t\t\t\t\ttemp.add(data[i][j]);\n\t\t\t\t}\n\t\t\t\tthis.myData.add(temp);\n\t\t\t}\n\t\t\tLoggingManager.log(Level.FINE, LoggingManager.RESOURCESTOOL, this.getClass().getName(), \"UserViewTableModel\", \"UserViewTableModel initialized\");\n\t\t}", "path": "tools\\src\\diet\\gridr\\g5k\\gui\\ReservationStatusFrame.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * Return an XML representation of the Grid job \n */\n", "func_signal": "public String toXml()", "code": "{ \n\tString xml = \"<GridJob \" + newline;\n\tIterator<String> iterator = parametersValues.keySet().iterator();\n\twhile(iterator.hasNext()){\n\t\tString key = iterator.next();\n\t\tString value = parametersValues.get(key);\n\t\txml += \"\\t\" + key + \"=\\\"\" + value + \"\\\" \" + newline;\n\t}\n\txml+=\"\\t>\";\n    return xml;\n}", "path": "src\\diet\\grid\\api\\GridJob.java", "repo_name": "crohr/GRUDU", "stars": 1, "license": "other", "language": "java", "size": 20932}
{"docstring": "/**\n * stores a row in a table.\n * @param tableName the name of the table to store to.\n * @param row the row to store.\n */\n", "func_signal": "public void storeRow(final String tableName, final Row row)\n    throws IOException", "code": "{\n    if(outBuffer == null) {\n        throw new IllegalStateException(\"Buffer not open\");\n    }\n    if(!tableName.equals(tableOpenForOutput)) {\n        throw new IllegalStateException(\"Writing to wrong table?\");\n    }\n\n    outBuffer.writeObject(row);\n}", "path": "src\\main\\java\\edu\\rivfader\\data\\Database.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * reads the catalogue.\n * @return the catalogue.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprivate Map<String, List<String>> readCatalogue()\n    throws IOException", "code": "{\n    Map<String, List<String>> catalogue;\n    ObjectInputStream input = new ObjectInputStream(\n                                new FileInputStream(\n                                    new File(baseFolder,\n                                             CATALOGUE_FILE)));\n    try {\n        catalogue = (Map<String, List<String>>) input.readObject();\n    } catch(ClassNotFoundException e) {\n        throw new IOException(\"catalogue file borked\", e);\n    }\n    input.close();\n    return catalogue;\n}", "path": "src\\main\\java\\edu\\rivfader\\data\\Database.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * opens a table for writing.\n * @param tableName the table to open\n */\n", "func_signal": "public void openTableForWriting(final String tableName)\n    throws IOException", "code": "{\n    if(outBuffer != null) {\n        throw new IllegalStateException(\"Buffer already open\");\n    }\n    tableOpenForOutput = tableName;\n    outBufferFile = File.createTempFile(\"table\", \"out\");\n    outBuffer = new ObjectOutputStream(\n                    new FileOutputStream(outBufferFile));\n}", "path": "src\\main\\java\\edu\\rivfader\\data\\Database.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * loads the table and returns an iterator over the rows.\n * @param tableName the name of the table to load\n * @return a row iterator.\n */\n", "func_signal": "public Iterator<Row> loadTable(final String tableName) throws IOException", "code": "{\n    ObjectInputStream input = new ObjectInputStream(\n                                new FileInputStream(\n                                    tableFilename(tableName)));\n    return new RowReaderIterator(input);\n}", "path": "src\\main\\java\\edu\\rivfader\\data\\Database.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * creates a new table.\n * @param tableName the name of the table to create.\n * @param columnNames the names of the columns, the type is varchar.\n */\n", "func_signal": "public void createTable(final String tableName,\n                        final List<String> columnNames)\n    throws IOException", "code": "{\n    if(!baseFolder.exists()) {\n        if(!baseFolder.mkdir()) {\n            throw new IOException(\"Cannot create database folder\");\n        }\n        Map<String, List<String>> catalogue =\n            new HashMap<String, List<String>>();\n        storeCatalogue(catalogue);\n    }\n\n    Map<String, List<String>> catalogue = readCatalogue();\n    catalogue.put(tableName, columnNames);\n    storeCatalogue(catalogue);\n\n    File tableFile = tableFilename(tableName);\n    tableFile.createNewFile();\n    ObjectOutputStream output = new ObjectOutputStream(\n                                    new FileOutputStream(tableFile));\n    output.close();\n}", "path": "src\\main\\java\\edu\\rivfader\\data\\Database.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * constructs a new InsertCommandWithValues-node.\n * @param pTableName the name of the table to insert into\n * @param pValues the values to insert into the table.\n */\n", "func_signal": "public InsertCommandWithValues(final ITable pTable,\n                     final Map<String, String> pValues)", "code": "{\n    table = pTable;\n    values = pValues;\n}", "path": "src\\main\\java\\edu\\rivfader\\commands\\InsertCommandWithValues.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * constructs a new projection.\n * @param pSubExpression the subExpression to project\n * @param pSelectedFields fields to just pass through\n * @param pRenamedFields fields to rename\n */\n", "func_signal": "public Projection(final IRelAlgExpr pSubExpression,\n                  final Collection<IColumnProjection> pSelectedFields)", "code": "{\n    subExpression = pSubExpression;\n    selectedFields = pSelectedFields;\n}", "path": "src\\main\\java\\edu\\rivfader\\relalg\\representation\\Projection.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * builds a new rowfactory which constructs rows with the given\n * column names.\n * @param pColumnNames {table, column}-pairs\n */\n", "func_signal": "public RowFactory(String[]... pColumnNames)", "code": "{\n    rows = new LinkedList<IQualifiedNameRow>();\n    columnNames = new LinkedList<IQualifiedColumnName>();\n    for (int i = 0; i < pColumnNames.length; i++) {\n        if (pColumnNames[i].length != 2) {\n            throw new IllegalArgumentException(\"column name \"\n                                                + i\n                                                + \" messed up.\");\n        }\n        columnNames.add(new QualifiedColumnName(pColumnNames[i][0],\n                                                pColumnNames[i][1]));\n    }\n}", "path": "src\\main\\java\\edu\\rivfader\\relalg\\operations\\RowFactory.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * creates a new renaming table.\n * @param pRenamedTable the table to rename\n * @param pNewName the new table name\n */\n", "func_signal": "public RenameTable(ITable pRenamedTable, String pNewName)", "code": "{\n    if (pRenamedTable == null) {\n        throw new IllegalArgumentException(\"pRenamedTable is null\");\n    }\n    if (pNewName == null) {\n        throw new IllegalArgumentException(\"pNewName is null\");\n    }\n\n    renamedTable = pRenamedTable;\n    newName = pNewName;\n}", "path": "src\\main\\java\\edu\\rivfader\\relalg\\representation\\RenameTable.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * deletes a table if it exists.\n * @param tableName the name of the table to delete.\n */\n", "func_signal": "public void dropTable(final String tableName)\n    throws IOException", "code": "{\n    File doomedFile = tableFilename(tableName);\n    if(!doomedFile.exists()) {\n        return;\n    }\n    if(!doomedFile.delete()) {\n        throw new IOException(\"Table \" + tableName\n                               + \" could not be deleted\");\n    }\n    Map<String, List<String>> catalogue = readCatalogue();\n    catalogue.remove(tableName);\n    storeCatalogue(catalogue);\n}", "path": "src\\main\\java\\edu\\rivfader\\data\\Database.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * This creates a new table creation node.\n *\n * Note: The type of the columns is implied to be varchar.\n *\n * @param pTableName the name of the table to create\n * @param pColumnNames the column names the table is supposed to have.\n */\n", "func_signal": "public CreateTable(final String pTableName,\n                   final List<String> pColumnNames)", "code": "{\n    tableName = pTableName;\n    columnNames = pColumnNames;\n}", "path": "src\\main\\java\\edu\\rivfader\\commands\\CreateTable.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * Constructs a new comparision node.\n * @param pFirstOperand the first operand to compare\n * @param pSecondOperand the second operand to compare\n * @param pInternalComparision the way of comparing values\n */\n", "func_signal": "public Comparision(final IValueProvider pFirstOperand,\n                   final IValueProvider pSecondOperand,\n                   final ValueComparer pInternalComparision)", "code": "{\n    internalComparision = pInternalComparision;\n    firstOperand = pFirstOperand;\n    secondOperand = pSecondOperand;\n}", "path": "src\\main\\java\\edu\\rivfader\\rowselector\\representation\\Comparision.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * checks ordering.\n */\n", "func_signal": "@Test public void orderingCheck()", "code": "{\n    String stn; // small table name\n    String ltn; // large table name\n    String scn; // small column name\n    String lcn; // large column name\n    IQualifiedColumnName tscs; // table small column small\n    IQualifiedColumnName tscl; // table small column large\n    IQualifiedColumnName tlcs; // table large column small\n    IQualifiedColumnName tlcl; // table large column large\n\n    stn = \"a\";\n    ltn = \"x\";\n    scn = \"a\";\n    lcn = \"x\";\n\n    assertThat(stn.compareTo(ltn), is(lessThan(0)));\n    assertThat(scn.compareTo(lcn), is(lessThan(0)));\n    tscs = new QualifiedColumnName(stn, scn);\n    tscl = new QualifiedColumnName(stn, lcn);\n    tlcs = new QualifiedColumnName(ltn, scn);\n    tlcl = new QualifiedColumnName(ltn, lcn);\n\n    assertThat(tscs.compareTo(tscs), is(equalTo(0)));\n    assertThat(tscs.compareTo(tscl), is(lessThan(0)));\n    assertThat(tscs.compareTo(tlcs), is(lessThan(0)));\n    assertThat(tscs.compareTo(tlcl), is(lessThan(0)));\n\n    assertThat(tscl.compareTo(tscs), is(greaterThan(0)));\n    assertThat(tscl.compareTo(tscl), is(equalTo(0)));\n    assertThat(tscl.compareTo(tlcs), is(lessThan(0)));\n    assertThat(tscl.compareTo(tlcl), is(lessThan(0)));\n\n    assertThat(tlcs.compareTo(tscs), is(greaterThan(0)));\n    assertThat(tlcs.compareTo(tscl), is(greaterThan(0)));\n    assertThat(tlcs.compareTo(tlcs), is(equalTo(0)));\n    assertThat(tlcs.compareTo(tlcl), is(lessThan(0)));\n\n    assertThat(tlcl.compareTo(tscs), is(greaterThan(0)));\n    assertThat(tlcl.compareTo(tscl), is(greaterThan(0)));\n    assertThat(tlcl.compareTo(tlcs), is(greaterThan(0)));\n    assertThat(tlcl.compareTo(tlcl), is(equalTo(0)));\n}", "path": "src\\test\\java\\edu\\rivfader\\test\\relalg\\representation\\QualifiedColumnNameTest.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * appends a row to a table.\n * @param tableName the table to append to\n * @param row the row to append\n */\n", "func_signal": "public void appendRow(final String tableName, final Row row)\n    throws IOException", "code": "{\n    ObjectOutputStream output = new AppendingObjectOutputStream(\n                                    new FileOutputStream(\n                                        tableFilename(tableName),\n                                        true));\n    output.writeObject(row);\n    output.close();\n}", "path": "src\\main\\java\\edu\\rivfader\\data\\Database.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * checks equality.\n */\n", "func_signal": "@Test public void equalityHashcode()", "code": "{\n    IQualifiedColumnName equalName = new QualifiedColumnName(tableName,\n                                                             columnName);\n    IQualifiedColumnName unqualifiedEqualName = new QualifiedColumnName(\n                                        null, columnName);\n\n    IQualifiedColumnName tableDiffers =\n        new QualifiedColumnName(tableName + \"1\", columnName);\n    IQualifiedColumnName columnDiffers =\n        new QualifiedColumnName(tableName, columnName + \"1\");\n\n    assertTrue(subject.equals(equalName));\n    assertTrue(subject.hashCode() == equalName.hashCode());\n    assertTrue(subject.equals(unqualifiedEqualName));\n    assertTrue(subject.hashCode() == unqualifiedEqualName.hashCode());\n    assertFalse(subject.equals(tableDiffers));\n    assertFalse(subject.equals(columnDiffers));\n    assertFalse(subject.equals(\"nonsense\"));\n}", "path": "src\\test\\java\\edu\\rivfader\\test\\relalg\\representation\\QualifiedColumnNameTest.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * constructs a new product result iterator.\n * @param pLeft the left subexpression\n * @param pRight the right subexpression\n * @param pContext the database to evaluate the query in\n */\n", "func_signal": "public ProductEvaluationIterator(\n        final Product p,\n        IRelAlgExprTransformation<Iterator<IQualifiedNameRow>>\n            pEvaluator)", "code": "{\n    left = p.getLeft();\n    right = p.getRight();\n    evaluator = pEvaluator;\n    leftIterator = evaluator.transform(left);\n    rightIterator = evaluator.transform(right);\n    leftRow = leftIterator.next();\n}", "path": "src\\main\\java\\edu\\rivfader\\relalg\\operations\\evaluation\\ProductEvaluationIterator.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * executes the input string.\n * @param input a valid simpleSQL-Query.\n */\n", "func_signal": "public String run(final String input)", "code": "{\n    Reader inputStream = new StringReader(input);\n    Writer output = new StringWriter();\n    SimpleSQLParser parser = new SimpleSQLParser(inputStream);\n    Database database = new Database(databaseName);\n\n    List<ICommand> commands;\n    try {\n        commands = parser.File();\n    } catch (ParseException e) {\n        System.out.println(e.toString());\n        return \"Parse error: \" + e.toString();\n    }\n\n    for(ICommand c : commands) {\n        try {\n            c.execute(database, output);\n        } catch (IOException e) {\n            System.out.println(e.toString());\n            e.printStackTrace();\n            return \"Error: \" + e.toString() + \"\\n\";\n        } catch (NoColumnValueMappingPossible e) {\n            return \"Error: \" + e.getMessage() + \"\\n\";\n        } catch (UnknownColumnName e) {\n            return \"Error: \" + e.getMessage() + \"\\n\";\n        }\n    }\n    return output.toString();\n}", "path": "src\\main\\java\\edu\\rivfader\\Main.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * stores the catalogue.\n * @param catalogue the catalogue to store.\n */\n", "func_signal": "private void storeCatalogue(Map<String, List<String>> catalogue)\n    throws IOException", "code": "{\n    ObjectOutputStream output = new ObjectOutputStream(\n                                    new FileOutputStream(\n                                        new File(baseFolder,\n                                                 CATALOGUE_FILE)));\n    output.writeObject(catalogue);\n    output.close();\n}", "path": "src\\main\\java\\edu\\rivfader\\data\\Database.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * returns the list of column names of a table.\n * @param tableName the name of the table\n */\n", "func_signal": "public List<String> getColumnNames(final String tableName)\n    throws IOException", "code": "{\n    Map<String, List<String>> catalogue = readCatalogue();\n    System.err.println(catalogue.get(tableName).toString());\n    return catalogue.get(tableName);\n}", "path": "src\\main\\java\\edu\\rivfader\\data\\Database.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * closes the table.\n * @param tableName the table to close\n */\n", "func_signal": "public void closeTable(final String tableName)\n    throws IOException", "code": "{\n    if (outBuffer != null) {\n        outBuffer.close();\n        ObjectInputStream input = new ObjectInputStream(\n                        new FileInputStream(outBufferFile));\n        ObjectOutputStream output = new ObjectOutputStream(\n                        new FileOutputStream(tableFilename(tableName)));\n        while(true) {\n            try {\n                output.writeObject(input.readObject());\n            } catch(ClassNotFoundException e) {\n                throw new IOException(\"temp file was borked\", e);\n            } catch(EOFException e) {\n                break;\n            }\n        }\n        input.close();\n        output.close();\n    }\n    outBuffer = null;\n}", "path": "src\\main\\java\\edu\\rivfader\\data\\Database.java", "repo_name": "Tetha/Rivfader", "stars": 0, "license": "None", "language": "java", "size": 420}
{"docstring": "/**\n * Convert an int to its numeral name equivalent\n * \n * @param n\n *            Number\n * @return numeral name as String\n */\n", "func_signal": "public static String getNumeralName(int n)", "code": "{\n\tStringBuilder digit = new StringBuilder();\n\tif (n < 0)\n\t{\n\t    // Mark negative numbers and switch the value of n\n\t    digit.append(\"negative\");\n\t    n = Math.abs(n);\n\t}\n\n\t// Convert n to a String List\n\tList<String> numerals = getNumerals(n);\n\tint numeralLength = numerals.size();\n\n\tfor (int i = 0; i < numerals.size() - 1; i++)\n\t{\n\t    int digitPlace = (numeralLength - i) % 3;\n\t    // Get the numeral value\n\t    int primaryNumeral = Integer.parseInt(numerals.get(i));\n\t    int numeral = primaryNumeral;\n\n\t    if (digitPlace == 2 && primaryNumeral == 1)\n\t    {\n\t\t// Numeral is between 10 - 19\n\t\tnumeral = Integer.parseInt(numerals.get(i) + numerals.get(i + 1));\n\t\t// The next value is used\n\t\ti++;\n\t\t// Move into the DIGITS array\n\t\tdigitPlace--;\n\t    }\n\n\t    if (digitPlace == 0)\n\t    {\n\t\tdigit.append(DIGITS[numeral] + \" \" + SCALE_DIGITS[primaryNumeral] + \" \");\n\t    }\n\t    else if (digitPlace == 2)\n\t    {\n\t\t// Tens place\n\t\tdigit.append(TENS_DIGITS[primaryNumeral] + \" \");\n\t    }\n\t    else if (digitPlace == 1)\n\t    {\n\t\t// One place\n\t\tdigit.append(DIGITS[numeral] + \" \");\n\t    }\n\t}\n\t// Ten's digit so it is dealt with already\n\tif (numerals.size() != 2 || numerals.get(numerals.size() - 2).compareTo(\"1\") != 0)\n\t{\n\t    int numeral = Integer.parseInt(numerals.get(numerals.size() - 1));\n\t    digit.append(DIGITS[numeral] + \" \");\n\t}\n\n\treturn digit.toString().trim();\n}", "path": "src\\main\\java\\com\\chris\\utils\\Convert.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Close and release all connections that are currently stored in the\n * connection pool associated with the data source.\n * \n * @param ds\n *            {@link DataSource} to close\n * @throws SQLException\n *             if a database error occurs\n */\n", "func_signal": "public static void shutdownDataSource(DataSource ds) throws SQLException", "code": "{\n\tBasicDataSource bds = (BasicDataSource) ds;\n\tbds.close();\n}", "path": "src\\main\\java\\com\\chris\\utils\\dbutils\\DBUtils.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Get a List containing each digit in n. If n is negative the value at\n * index zero is \"-\".\n * \n * @param n\n *            int\n * @return {@code List<String>}\n */\n", "func_signal": "public static List<String> getNumerals(int n)", "code": "{\n\t// Convert n to a String\n\tchar[] num = Integer.toString(n).toCharArray();\n\tList<String> digits = new ArrayList<String>();\n\t// Fill the List\n\tfor (int i = 0; i < num.length; i++)\n\t{\n\t    digits.add(String.valueOf(num[i]));\n\t}\n\treturn digits;\n}", "path": "src\\main\\java\\com\\chris\\utils\\Convert.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Assert the provided Regular Expression is false\n * \n * @param javaMatcher\n *            {@link Matcher} Regular Expression Match to check\n */\n", "func_signal": "public static final void assertRegexFalse(Matcher javaMatcher)", "code": "{\n\t// Reset the Matcher in case it has been used\n\tjavaMatcher.reset();\n\t// This madness is needed to get the search input text\n\tStringBuffer input = new StringBuffer();\n\tjavaMatcher.appendTail(input);\n\t// Run the Assert statement\n\tassertRegex(javaMatcher.pattern().pattern(), input.toString(), false, javaMatcher.find());\n}", "path": "src\\main\\java\\com\\chris\\utils\\text\\regex\\RegexUtils.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Insert the symbol into the binary tree\n * \n * @param symbol\n * @return new {@link BinaryNode}\n */\n", "func_signal": "public BinaryNode<E> insertSymbol(E symbol)", "code": "{\n\tint comparison = compareTo(symbol);\n\tif (comparison <= 0 && this.left == null)\n\t{\n\t    // insert the node on the left side of the tree\n\t    this.left = new BinaryNode<E>(symbol);\n\t    return this.left;\n\n\t}\n\telse if (this.right == null)\n\t{\n\t    // insert the node on the right side of the tree\n\t    this.right = new BinaryNode<E>(symbol);\n\t    return this.right;\n\n\t}\n\t// Go further into the tree\n\treturn insertSymbol(symbol);\n}", "path": "src\\main\\java\\com\\chris\\datastructures\\BinaryNode.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Print the groups of the {@link Matcher} {@code javaMatcher} match.\n * \n * @param javaMatcher\n *            {@link Matcher} Regular Expression Match to check\n * @param found\n *            Number of matches that have been found\n * @param showGroupCount\n *            Print the number of groups in the match and group(0) if true,\n *            otherwise prints only nested groups\n * @param LOGGER\n *            Logger to output debug information\n * @throws IndexOutOfBoundsException\n *             More than 100 matches have been found.\n * @return Number of matches that have been found\n */\n", "func_signal": "public static final int outputJavaRegexGroups(Matcher javaMatcher, int found,\n\t    boolean showGroupCount, Logger LOGGER) throws IndexOutOfBoundsException", "code": "{\n\t// Skip Group(0) by default since it is the entire match\n\tint groupStart = 1;\n\tif (showGroupCount)\n\t{\n\t    LOGGER.debug(\"Match {}: Group Count {}\", found + 1, javaMatcher.groupCount());\n\t    groupStart = 0;\n\t}\n\tfor (int groupNum = groupStart; groupNum <= javaMatcher.groupCount(); groupNum++)\n\t{\n\t    LOGGER.debug(\"Match {}: Group {}: {}\", new Object[] { found + 1, groupNum,\n\t\t    javaMatcher.group(groupNum) });\n\t}\n\tfound++;\n\tif (found > 100)\n\t{\n\t    throw new IndexOutOfBoundsException(\"To many matches, more than 100 matches found.\");\n\t}\n\treturn found;\n}", "path": "src\\main\\java\\com\\chris\\utils\\text\\regex\\RegexUtils.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Create a new BinaryNode with provided value\n * \n * @param value\n */\n", "func_signal": "public BinaryNode(E value)", "code": "{\n\tleft = right = null;\n\tthis.value = value;\n}", "path": "src\\main\\java\\com\\chris\\datastructures\\BinaryNode.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Convert a {@link String}[] to a {@code List<LineInfo>}. {@link LineInfo}\n * objects are initialized using the line index and line.\n * \n * @param lines\n *            {@link String}[]\n * @return {@code List<LineInfo>}\n * @throws InvalidLineStateException\n */\n", "func_signal": "public static List<LineInfo> asLineInfo(String[] lines, LineState initialState)\n\t    throws InvalidLineStateException", "code": "{\n\tswitch (initialState)\n\t{\n\t    case UniqueMatch:\n\t\tthrow new IllegalArgumentException(\"initialState,\" + initialState\n\t\t\t+ \" , is invalid.\");\n\t    default:\n\t\tbreak;\n\t}\n\n\tList<LineInfo> lineInfos = new ArrayList<LineInfo>(lines.length);\n\n\tfor (int i = 0; i < lines.length; i++)\n\t{\n\t    lineInfos.add(new LineInfo(i, lines[i], initialState, -1));\n\t}\n\n\treturn lineInfos;\n}", "path": "src\\main\\java\\com\\chris\\utils\\textdiff\\LineInfo.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * @param lineNumber\n *            index of the unique line of text\n * @param line\n *            unique line of text\n * @param state\n *            state of the line as a {@link LineState}\n * @param otherLine\n * @throws InvalidLineStateException\n *             OtherLine must be a non-negative integer if state is not\n *             {@link LineState.PrimaryOnly} or\n *             {@link LineState.SecondaryOnly}\n */\n", "func_signal": "public LineInfo(int lineNumber, String line, LineState state, int otherLine)\n\t    throws InvalidLineStateException", "code": "{\n\tthis.lineNumber = lineNumber;\n\tthis.line = line;\n\tthis.otherLine = otherLine;\n\tthis.state = state;\n}", "path": "src\\main\\java\\com\\chris\\utils\\textdiff\\LineInfo.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Output the {@link MatchResult} information\n * \n * @param pattern\n *            Regular Expression Pattern\n * @param input\n *            Input to be parsed\n * @param verbose\n *            Enable more verbose logging of Regex match information\n */\n", "func_signal": "public static final void outputMatchResults(Pattern pattern, PatternMatcherInput input,\n\t    boolean verbose)", "code": "{\n\tint groups;\n\tMatchResult result;\n\tLOGGER.debug(\"Pattern: {}\", pattern.getPattern());\n\tif (matcher.contains(input, pattern))\n\t{\n\t    int matchCount = 0;\n\t    do\n\t    {\n\t\tresult = matcher.getMatch();\n\t\tmatchCount++;\n\t\t// Perform whatever processing on the result you want.\n\t\t// Here we just print out all its elements to show how its\n\t\t// methods are used.\n\n\t\tLOGGER.debug(\"Match: {}\", result.toString());\n\t\tgroups = result.groups();\n\t\tLOGGER.debug(\"Groups: {}\", groups);\n\t\tif (verbose)\n\t\t{\n\t\t    LOGGER.debug(\"Length: {}\", result.length());\n\t\t    LOGGER.debug(\"Begin offset: {}\", result.beginOffset(0));\n\t\t    LOGGER.debug(\"End offset: {}\", result.endOffset(0));\n\t\t}\n\t\tLOGGER.debug(\"Saved Groups: \");\n\t\t// Start at 1 because we just printed out group 0\n\t\tfor (int group = 1; group < groups; group++)\n\t\t{\n\t\t    LOGGER.debug(group + \": {}\", result.group(group));\n\t\t    if (verbose)\n\t\t    {\n\t\t\tLOGGER.debug(\"Begin: {}\", result.begin(group));\n\t\t\tLOGGER.debug(\"End: {}\", result.end(group));\n\t\t    }\n\t\t}\n\t    }\n\t    while (matcher.contains(input, pattern));\n\t    LOGGER.debug(\"{} matches\", matchCount);\n\t}\n\telse\n\t{\n\t    LOGGER.debug(\"No matches.\");\n\t}\n}", "path": "src\\main\\java\\com\\chris\\utils\\text\\regex\\RegexUtils.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * @param lineNumber\n * @param line\n */\n", "func_signal": "public LineInfo(int lineNumber, String line)", "code": "{\n\tthis.lineNumber = lineNumber;\n\tthis.line = line;\n}", "path": "src\\main\\java\\com\\chris\\utils\\textdiff\\LineInfo.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Output the results of using {@code regex} on {@code inputString}\n * \n * @param regex\n *            Regular Expression\n * @param inputString\n *            Input to be parsed\n * @param verbose\n *            Enable more verbose logging of Regex match information\n * @throws MalformedPatternException\n *             {@code regex} is not a valid pattern.\n */\n", "func_signal": "public static final void debugRegex(String regex, String inputString, boolean verbose)\n\t    throws MalformedPatternException", "code": "{\n\t// Initialize the pattern\n\tPattern pattern = initPattern(regex);\n\tPatternMatcherInput input = new PatternMatcherInput(inputString);\n\t// Output the Match results using the Logger\n\toutputMatchResults(pattern, input, verbose);\n}", "path": "src\\main\\java\\com\\chris\\utils\\text\\regex\\RegexUtils.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Assert the provided Regular Expression is false\n * \n * @param regex\n *            Regular Expression to test\n * @param inputString\n *            Input to be parsed\n */\n", "func_signal": "public static void assertRegexFalse(String regex, String inputString)", "code": "{\n\t// Initialize the pattern\n\ttry\n\t{\n\t    Pattern pattern = initPattern(regex);\n\t    PatternMatcherInput input = new PatternMatcherInput(inputString);\n\t    assertRegexFalse(pattern, input);\n\t}\n\tcatch (MalformedPatternException e)\n\t{\n\t    LOGGER.error(\"Invalid regular expression\", e);\n\t    fail(e.getLocalizedMessage());\n\t}\n}", "path": "src\\main\\java\\com\\chris\\utils\\text\\regex\\RegexUtils.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Assert the provided Regular Expression is true\n * \n * @param javaMatcher\n *            {@link Matcher} Regular Expression Match to check\n */\n", "func_signal": "public static final void assertRegexTrue(Matcher javaMatcher)", "code": "{\n\t// Reset the Matcher in case it has been used\n\tjavaMatcher.reset();\n\t// This madness is needed to get the search input text\n\tStringBuffer input = new StringBuffer();\n\tjavaMatcher.appendTail(input);\n\t// Run the Assert statement\n\tassertRegex(javaMatcher.pattern().pattern(), input.toString(), true, javaMatcher.find());\n}", "path": "src\\main\\java\\com\\chris\\utils\\text\\regex\\RegexUtils.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Get a pattern associated with {@code regex}\n * \n * @param regex\n *            Regular Expression\n * @throws MalformedPatternException\n *             {@code regex} is not a valid pattern.\n */\n", "func_signal": "public static final Pattern initPattern(String regex) throws MalformedPatternException", "code": "{\n\tif (!patterns.containsKey(regex))\n\t{\n\t    // Create a new pattern, and stash a copy for reuse.\n\t    try\n\t    {\n\t\tpatterns.put(regex, compiler.compile(regex));\n\t    }\n\t    catch (MalformedPatternException e)\n\t    {\n\t\tString errMsg =\n\t\t\tString.format(\"Invalid regular expression pattern, %1$s, %2$s\", regex, e\n\t\t\t\t.getLocalizedMessage());\n\t\tLOGGER.error(errMsg, e);\n\t\t// fail(errMsg);\n\t\tthrow e;\n\t    }\n\t}\n\treturn patterns.get(regex);\n}", "path": "src\\main\\java\\com\\chris\\utils\\text\\regex\\RegexUtils.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Setup a {@link DataSource} using the provided parameters\n * \n * @param userName\n *            The connection user name to be passed to the JDBC driver to\n *            establish a connection.\n * @param password\n *            The connection password to be passed to the JDBC driver to\n *            establish a connection.\n * @param connectURI\n *            The connection URL to be passed to the JDBC driver to\n *            establish a connection.\n * @return {@link DataSource} using the provided parameters\n */\n", "func_signal": "public static DataSource setupDataSource(String driverClassName, String userName,\n\t    String password, String connectURI)", "code": "{\n\tBasicDataSource ds = new BasicDataSource();\n\t// LOGGER.debug(String.format(\"Driver Class Name: %0$s\",\n\t// bds.getDriverClassName()));\n\tds.setDriverClassName(driverClassName);\n\t// LOGGER.debug(String.format(\"Username: %0$s\", bds.getUsername()));\n\tds.setUsername(userName);\n\t// LOGGER.debug(String.format(\"Password: %0$s\", bds.getPassword()));\n\tds.setPassword(password);\n\t// LOGGER.debug(String.format(\"Connection URI: %0$s\", bds.getUrl()));\n\tds.setUrl(connectURI);\n\treturn ds;\n}", "path": "src\\main\\java\\com\\chris\\utils\\dbutils\\DBUtils.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Check if inputLine matches line and it is not already a unique match.\n * \n * @param inputLine\n *            line to compare to this.line\n * @return true if inputLine matches line and it is not already a unique\n *         match.\n */\n", "func_signal": "public boolean isMatch(String inputLine)", "code": "{\n\tboolean match = false;\n\t// Verify the new LineState and OtherLine values\n\tswitch (state)\n\t{\n\t    case UniqueMatch:\n\t\t// this LineInfo is already matched\n\t\tmatch = false;\n\t\tbreak;\n\t    case PrimaryOnly:\n\t    case SecondaryOnly:\n\t    default:\n\t\t// Check if this.line is equal to the inputLine\n\t\tmatch = this.line.equals(inputLine);\n\t\tbreak;\n\t}\n\treturn match;\n}", "path": "src\\main\\java\\com\\chris\\utils\\textdiff\\LineInfo.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Assert the provided Regular Expression is true\n * \n * @param regex\n *            Regular Expression to test\n * @param inputString\n *            Input to be parsed\n */\n", "func_signal": "public static void assertRegexTrue(String regex, String inputString)", "code": "{\n\t// Initialize the pattern\n\ttry\n\t{\n\t    Pattern pattern = initPattern(regex);\n\t    PatternMatcherInput input = new PatternMatcherInput(inputString);\n\t    assertRegexTrue(pattern, input);\n\t}\n\tcatch (MalformedPatternException e)\n\t{\n\t    LOGGER.error(\"Invalid regular expression\", e);\n\t    fail(e.getLocalizedMessage());\n\t}\n}", "path": "src\\main\\java\\com\\chris\\utils\\text\\regex\\RegexUtils.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Assert the provided Regular Expression is true or false\n * \n * @param pattern\n *            Regular Expression to test\n * @param inputText\n *            Input to be parsed\n * @param assertType\n *            Type of assert to run\n * @param condition\n *            Condition to be tested\n */\n", "func_signal": "private static final void assertRegex(String pattern, String inputText, boolean assertType,\n\t    boolean condition)", "code": "{\n\tString message =\n\t\tString.format(\"Regex should%1$s have a match.\\r%2$s\\rSearch text:\\r%3$s\",\n\t\t    assertType ? \"\" : \" not\", pattern, inputText);\n\t// Run the Assert statement\n\tif (assertType)\n\t    assertTrue(message, condition);\n\telse\n\t    assertFalse(message, condition);\n}", "path": "src\\main\\java\\com\\chris\\utils\\text\\regex\\RegexUtils.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Compare the symbols\n * \n * @param otherValue\n * @return 0 if the symbols are equal, -1 if {@code value} is less than\n *         {@code otherValue}, 1 if {@code symbol} is greater than {@code\n *         otherSymbol}\n */\n", "func_signal": "public int compareTo(E otherValue)", "code": "{\n\tif (value.hashCode() == otherValue.hashCode())\n\t{\n\t    // Same thing, no need to compare the string for speed sake\n\t    return 0;\n\t}\n\telse\n\t{\n\t    return value.toString().compareTo(otherValue.toString());\n\t}\n}", "path": "src\\main\\java\\com\\chris\\datastructures\\BinaryNode.java", "repo_name": "cmcmillan/webcompare", "stars": 1, "license": "None", "language": "java", "size": 28436}
{"docstring": "/**\n * Test of getUsed method, of class Memory.\n */\n", "func_signal": "@Test\npublic void testGetUsed()", "code": "{\n    System.out.println(\"getUsed\");\n    Memory instance = new Memory();\n    String result = instance.getUsed();\n    assertTrue(result.length() > 1);\n}", "path": "DGA Project\\test\\dataanalyzer\\entity\\MemoryTest.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * Test of getMaximum method, of class Memory.\n */\n", "func_signal": "@Test\npublic void testGetMaximum()", "code": "{\n    System.out.println(\"getMaximum\");\n    Memory instance = new Memory();\n    String result = instance.getMaximum();\n    assertTrue(result.length() > 1);\n}", "path": "DGA Project\\test\\dataanalyzer\\entity\\MemoryTest.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * Handles an exception and give the user a options to abort the program or\n * continue and display the error.\n * @param ex the exception to handle\n */\n", "func_signal": "public void handleException(Throwable ex)", "code": "{\n    // TODO: Add error reporting here\n    int returnValue = JOptionPane.showConfirmDialog(gui.fmain, \"An exception has occured!\\n\" + ex.toString() + \"\\nDo you wish to continue?\", \"Error\", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);\n    if (returnValue == JOptionPane.YES_OPTION) {\n\n        handleError(ex.toString());\n        for (StackTraceElement element : ex.getStackTrace()) {\n            handleError(element.toString(), UserInterface.MIN);\n        }\n    } else if (returnValue == JOptionPane.NO_OPTION) {\n        ex.printStackTrace();\n        System.exit(2);\n    } else if (returnValue == JOptionPane.CANCEL_OPTION) {\n        //Button is diabled\n    } else if (returnValue == JOptionPane.CLOSED_OPTION) {\n        ex.printStackTrace();\n        System.exit(3);\n    }\n\n}", "path": "DGA Project\\src\\dataanalyzer\\GUI.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * This method registers a listener to collect an output (that will be selected\n * from a list) object and send it to the SystemListener instance.\n * @param systemListener the instacnce wanting to collect output\n */\n", "func_signal": "public void collectOutput(final SystemListener systemListener)", "code": "{\n    POutputList.createDialog(gui, new ActionListener() {\n\n        public void actionPerformed(ActionEvent e) {\n            systemListener.collectObject(e.getSource());\n        }\n    });\n}", "path": "DGA Project\\src\\dataanalyzer\\GUI.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * Test of getFree method, of class Memory.\n */\n", "func_signal": "@Test\npublic void testGetFree()", "code": "{\n    System.out.println(\"getFree\");\n    Memory instance = new Memory();\n    String result = instance.getFree();\n    assertTrue(result.length() > 1);\n}", "path": "DGA Project\\test\\dataanalyzer\\entity\\MemoryTest.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * Test of update method, of class Memory.\n */\n", "func_signal": "@Test\npublic void testUpdate()", "code": "{\n    System.out.println(\"update\");\n    Memory instance = new Memory();\n    instance.update();\n}", "path": "DGA Project\\test\\dataanalyzer\\entity\\MemoryTest.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * Sets both the error ouput and standard output stream back to normal.\n */\n", "func_signal": "public static void resetBoth()", "code": "{\n    resetOutput();\n    resetErrors();\n}", "path": "DGA Project\\src\\dataanalyzer\\util\\SuppressOutput.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * Creates the DGA instance, loads settings and plugins, creates and displays\n * the GUI and sets the look and feel.\n */\n", "func_signal": "public GUI()", "code": "{\n    system = new DGA(this);\n    gui = new GUIManager(system);\n    output = \"\";\n\n    setErrorOutputStream();\n    //Load settings\n    DSettings.load(system, new File(\"settings.xml\"));\n\n    //Set verbosity\n    Setting<Integer> verbosity = system.settingsManager.find(\"verbosity\");\n    setVerbosity(verbosity.value);\n    //Load plugins\n    DPlugin.loadAll(system);\n\n    //Create frame\n    gui.fmain = new FMain(gui);\n    gui.fmain.setIconImage(DImage.getFrameIcon(system));\n\n    //Set look and feel\n    Setting<String> lookAndFeel = system.settingsManager.find(\"lookAndFeel\");\n    if (lookAndFeel != null) {\n        LookAndFeelSetter.parse(lookAndFeel.value, gui);\n    }\n\n    //Make frame visible\n    gui.fmain.setVisible(true);\n\n    //Add listeners to update the tree\n    system.algorithmManager.addUpdateListener(gui.fmain);\n    system.outputManager.addUpdateListener(gui.fmain);\n    system.nodeManager.addUpdateListener(gui.fmain);\n    system.pluginManager.addUpdateListener(gui.fmain);\n    system.processManager.addUpdateListener(gui.fmain);\n\n    //Log the system starting\n    handleError(\"System started at \" + Date.now());\n}", "path": "DGA Project\\src\\dataanalyzer\\GUI.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * Creates a new instance of the application interface, loads settings and \n * plugins, creates and shows the GUI.\n */\n", "func_signal": "public ApplicationInterface()", "code": "{\n    system = new DGA(this);\n    gui = new GUIManager(system);\n    output = \"\";\n\n    //Load settings\n    DSettings.load(system, new File(\"settings.xml\"));\n    //Load plugins\n    DPlugin.loadAll(system);\n\n    //Create frame\n    gui.fmain = new FMain(gui);\n    gui.fmain.setIconImage(DImage.getFrameIcon(system));\n\n    //Set look and feel\n    Setting<String> lookAndFeel = system.settingsManager.find(\"lookAndFeel\");\n    if (lookAndFeel != null) {\n        LookAndFeelSetter.parse(lookAndFeel.value, gui);\n    }\n\n    //Make frame visible\n    gui.fmain.setVisible(true);\n\n    //Add listeners to update the tree\n    system.algorithmManager.addUpdateListener(gui.fmain);\n    system.outputManager.addUpdateListener(gui.fmain);\n    system.nodeManager.addUpdateListener(gui.fmain);\n    system.pluginManager.addUpdateListener(gui.fmain);\n    system.processManager.addUpdateListener(gui.fmain);\n\n    out(\"System started at \" + Date.now());\n\n}", "path": "DGA Project\\src\\dataanalyzer\\ApplicationInterface.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * Supresses both the standard output and error stream.\n */\n", "func_signal": "public static void suppressBoth()", "code": "{\n    suppressOutput();\n    suppressErrors();\n}", "path": "DGA Project\\src\\dataanalyzer\\util\\SuppressOutput.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * Outputs an object to the GUI (if the verbosity level is above the supplied \n * level and colors it depending on the verbosity.\n * @param o the object to output\n * @param verbosity only outputs if this is less than or equal to the user\n * interface verbosity level\n */\n", "func_signal": "@Override\npublic void out(Object o, int verbosity)", "code": "{\n    if (o != null) {\n        if (verbosity <= system.userInterface.getVerbosity()) {\n            switch (verbosity) {\n                case MAX: {\n                    out(\"<font color=\\\"Blue\\\" size=\\\"2\\\">\" + o.toString() + \"</font>\");\n                    break;\n                }\n                case ALL: {\n                    out(\"<font color=\\\"Gray\\\" size=\\\"1\\\">\" + o.toString() + \"</font>\");\n                    break;\n                }\n                default: {\n                    out(o);\n                }\n            }\n        }\n    }\n}", "path": "DGA Project\\src\\dataanalyzer\\ApplicationInterface.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * Outputs an object to the GUI.\n * @param o the object to output\n */\n", "func_signal": "public void out(Object o)", "code": "{\n    if (o != null) {\n        output += o.toString() + \"<br />\";\n    }\n    if (gui.fmain != null && gui.fmain.getConsole() != null) {\n        gui.fmain.getConsole().getTextPane().setText(\"<html><font face=\\\"Tahoma\\\" size=\\\"3\\\">\" + output + \"</font></html>\");\n        gui.fmain.getConsole().scrollToBottom();\n    }\n}", "path": "DGA Project\\src\\dataanalyzer\\GUI.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * Overides the write() method of OutputStream to do nothing.\n */\n", "func_signal": "public VoidStream()", "code": "{\n    super(new java.io.OutputStream() {\n\n        @Override\n        public void write(int b) throws IOException {\n        }\n    });\n}", "path": "DGA Project\\src\\dataanalyzer\\util\\SuppressOutput.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * This method registers a listener to collect an output (that will be selected\n * from a list) object and send it to the SystemListener instance.\n * @param systemListener the instacnce wanting to collect output\n */\n", "func_signal": "public void collectOutput(final SystemListener systemListener)", "code": "{\n    POutputList.createDialog(gui, new ActionListener() {\n\n        public void actionPerformed(ActionEvent e) {\n            systemListener.collectObject(e.getSource());\n        }\n    });\n}", "path": "DGA Project\\src\\dataanalyzer\\ApplicationInterface.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/** Writes a single bit into the included stream.\nAlthough the input is a single bit, it is given as an int.\nIf it is non-zero, it is threated as 1. */\n", "func_signal": "public void write(int i) throws IOException", "code": "{\n    int x = bitManager.writeOne(i >= 1 ? 1 : 0);\n    if (x >= 0) {\n        out.write(x);\n    }\n}", "path": "Plugins\\Compression Algorithms\\src\\lzw\\util\\BitOutputStream.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "// \"Main\" reads a file in the form of characters of '0's and '1's\n// and prints them as bits into another file as a BitStream\n", "func_signal": "public static void main(String[] args)", "code": "{\n    if (args.length < 2) {\n        System.out.println(\"Usage: java BitOutputStream FromFile ToFile\");\n        System.out.println(\"where 'FromFile' includes characters of '0' and '1'\");\n        System.out.println(\"and they are written as bits into 'ToFile'\");\n        System.exit(1);\n    }\n\n    try {\n        InputStream is = new BufferedInputStream(new FileInputStream(args[0]));\n        OutputStream os = new BitOutputStream(new BufferedOutputStream(new FileOutputStream(args[1])));\n        int next;\n        while ((next = is.read()) >= 0) {\n            char ch = (char) next;\n            if (ch == '0' || ch == '1') {\n                os.write((int) (ch - '0'));\n            }\n        }\n        is.close();\n        os.close();\n    } catch (FileNotFoundException fnfe) {\n        System.out.println(args[0] + \" file not found\");\n        System.exit(1);\n    } catch (IOException ioe) {\n        System.out.println(\"Error in reading file \" + args[0] + \" or writing file \" + args[1]);\n        System.exit(1);\n    }\n}", "path": "Plugins\\Compression Algorithms\\src\\lzw\\util\\BitOutputStream.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * Test of getAllocated method, of class Memory.\n */\n", "func_signal": "@Test\npublic void testGetAllocated()", "code": "{\n    System.out.println(\"getAllocated\");\n    Memory instance = new Memory();\n    String result = instance.getAllocated();\n    assertTrue(result.length() > 1);\n}", "path": "DGA Project\\test\\dataanalyzer\\entity\\MemoryTest.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * Displays an error in the GUI.\n * @param s the error message\n */\n", "func_signal": "public void handleError(String s)", "code": "{\n    try {\n        PrintWriter writer = new PrintWriter(new FileWriter(\"error.log\", true));\n        writer.print(Date.now() +\": \");\n        writer.println(s);\n        writer.close();\n    }\n    catch (IOException ex) {\n        System.err.println(\"Could not write error log.\");\n    }\n    out(\"<font color=\\\"Maroon\\\">\" + s + \"</font>\");\n}", "path": "DGA Project\\src\\dataanalyzer\\GUI.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * Outputs an object to the GUI.\n * @param o the object to output\n */\n", "func_signal": "public void out(Object o)", "code": "{\n    if (o != null) {\n        output += o.toString() + \"<br />\";\n    }\n    if (gui.fmain != null && gui.fmain.getConsole() != null) {\n        gui.fmain.getConsole().getTextPane().setText(\"<html><font face=\\\"Tahoma\\\" size=\\\"3\\\">\" + output + \"</font></html>\");\n        gui.fmain.getConsole().scrollToBottom();\n    }\n}", "path": "DGA Project\\src\\dataanalyzer\\ApplicationInterface.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * Outputs an object to the GUI (if the verbosity level is above the supplied \n * level and colors it depending on the verbosity.\n * @param o the object to output\n * @param verbosity only outputs if this is less than or equal to the user\n * interface verbosity level\n */\n", "func_signal": "@Override\npublic void out(Object o, int verbosity)", "code": "{\n    if (o != null) {\n        if (verbosity <= getVerbosity()) {\n            switch (verbosity) {\n                case MAX: {\n                    out(\"<font color=\\\"Blue\\\" size=\\\"2\\\">\" + o.toString() + \"</font>\");\n                    break;\n                }\n                case ALL: {\n                    out(\"<font color=\\\"Gray\\\" size=\\\"1\\\">\" + o.toString() + \"</font>\");\n                    break;\n                }\n                default: {\n                    out(o);\n                }\n            }\n        }\n    }\n}", "path": "DGA Project\\src\\dataanalyzer\\GUI.java", "repo_name": "Petah/DGA", "stars": 1, "license": "None", "language": "java", "size": 5128}
{"docstring": "/**\n * Constructs a unique request key using repoId and request path.\n * \n * @param repository the repository\n * @param request the request\n * \n * @return a unique key in form \"repoId:/path/to/artifact\"\n */\n", "func_signal": "protected String getRepositoryRequestAsKey( Repository repository, ProximityRequest request )", "code": "{\n    StringBuffer sb = new StringBuffer( repository.getId() );\n    sb.append( \":\" );\n    sb.append( request.getPath() );\n    return sb.toString();\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\impl\\AbstractRepository.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/**\n * Construct item properties from get response.\n * \n * @param path the path\n * @param originatingUrlString the originating url string\n * @param remoteFile the remote file\n * \n * @return the item properties\n * \n * @throws MalformedURLException the malformed URL exception\n */\n", "func_signal": "protected ItemProperties constructItemPropertiesFromGetResponse( String path, String originatingUrlString,\n    FTPFile remoteFile )\n    throws MalformedURLException", "code": "{\n    URL originatingUrl = new URL( originatingUrlString );\n    ItemProperties result = new HashMapItemPropertiesImpl();\n    result.setDirectoryPath( FilenameUtils.separatorsToUnix( FilenameUtils.getPath( FilenameUtils\n        .getFullPath( path ) ) ) );\n    result.setDirectory( remoteFile.isDirectory() );\n    result.setFile( remoteFile.isFile() );\n    result.setLastModified( remoteFile.getTimestamp().getTime() );\n    result.setName( FilenameUtils.getName( originatingUrl.getPath() ) );\n    if ( result.isFile() )\n    {\n        result.setSize( remoteFile.getSize() );\n    }\n    else\n    {\n        result.setSize( 0 );\n    }\n    result.setRemoteUrl( originatingUrl.toString() );\n    return result;\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\storage\\remote\\CommonsNetFtpRemotePeer.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.abstracthorizon.proximity.storage.Storage#retrieveItem(java.lang.String, boolean)\n */\n", "func_signal": "public Item retrieveItem( String path, boolean propsOnly )\n    throws ItemNotFoundException,\n        StorageException", "code": "{\n    String originatingUrlString = getAbsoluteUrl( path );\n    FTPClient client = null;\n    try\n    {\n        client = getFTPClient();\n        try\n        {\n            if ( client\n                .changeWorkingDirectory( concatPaths( getRemoteUrl().getPath(), FilenameUtils.getPath( path ) ) ) )\n            {\n                FTPFile[] fileList = client.listFiles( FilenameUtils.getName( path ) );\n                if ( fileList.length == 1 )\n                {\n                    FTPFile ftpFile = fileList[0];\n                    ItemProperties properties = constructItemPropertiesFromGetResponse(\n                        path,\n                        originatingUrlString,\n                        ftpFile );\n                    Item result = new Item();\n                    if ( properties.isFile() )\n                    {\n                        // TODO: Solve this in a better way\n                        File tmpFile = File.createTempFile( FilenameUtils.getName( path ), null );\n                        tmpFile.deleteOnExit();\n                        FileOutputStream fos = new FileOutputStream( tmpFile );\n                        try\n                        {\n                            client.retrieveFile( FilenameUtils.getName( path ), fos );\n                            fos.flush();\n                        }\n                        finally\n                        {\n                            fos.close();\n                        }\n                        result.setStream( new DeleteOnCloseFileInputStream( tmpFile ) );\n                    }\n                    else\n                    {\n                        result.setStream( null );\n                    }\n                    result.setProperties( properties );\n                    return result;\n                }\n                else\n                {\n                    throw new ItemNotFoundException( \"Item \" + path + \" not found in FTP remote peer of \"\n                        + getRemoteUrl() );\n                }\n            }\n            else\n            {\n                throw new ItemNotFoundException( \"Path \" + FilenameUtils.getPath( path )\n                    + \" not found in FTP remote peer of \" + getRemoteUrl() );\n            }\n        }\n        catch ( IOException ex )\n        {\n            throw new StorageException( \"Cannot execute FTP operation on remote peer.\", ex );\n        }\n    }\n    finally\n    {\n        try\n        {\n            if ( client.isConnected() )\n            {\n                client.disconnect();\n            }\n        }\n        catch ( IOException ex )\n        {\n            logger.warn( \"Could not disconnect FTPClient\", ex );\n        }\n    }\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\storage\\remote\\CommonsNetFtpRemotePeer.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.abstracthorizon.proximity.ProximityRequestListener#proximityRequestEvent(org.abstracthorizon.proximity.events.ProximityRequestEvent)\n */\n", "func_signal": "public void proximityRequestEvent( ProximityRequestEvent event )", "code": "{\n    if ( ItemDeleteEvent.class.isAssignableFrom( event.getClass() ) )\n    {\n        // delete from index\n        logger.debug( \"Deleting item [{}] from index.\", event.getRequest().getPath() );\n        deleteItemProperties( ( (ItemDeleteEvent) event ).getItemProperties() );\n    }\n    else if ( ItemStoreEvent.class.isAssignableFrom( event.getClass() ) )\n    {\n        // add to index\n        logger.debug( \"Adding item [{}] to index.\", event.getRequest().getPath() );\n        addItemProperties( ( (ItemStoreEvent) event ).getItemProperties() );\n    }\n\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\indexer\\AbstractIndexer.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.abstracthorizon.proximity.Repository#deleteItem(org.abstracthorizon.proximity.ProximityRequest)\n */\n", "func_signal": "public void deleteItem( ProximityRequest request )\n    throws RepositoryNotAvailableException,\n        StorageException,\n        AccessDeniedException", "code": "{\n    if ( !isAvailable() )\n    {\n        throw new RepositoryNotAvailableException( \"The repository \" + getId() + \" is NOT available!\" );\n    }\n\n    getAccessManager().decide( request, this, RepositoryPermission.DELETE );\n\n    if ( getLocalStorage() != null )\n    {\n        try\n        {\n            ItemProperties itemProps = getLocalStorage().retrieveItem( request.getPath(), true ).getProperties();\n            itemProps.setRepositoryId( getId() );\n            itemProps.setRepositoryGroupId( getGroupId() );\n            getLocalStorage().deleteItem( request.getPath() );\n            notifyProximityRequestListeners( new ItemDeleteEvent( request, itemProps ) );\n\n            // remove it from n-cache also\n            String requestKey = getRepositoryRequestAsKey( this, request );\n            if ( notFoundCache.containsKey( requestKey ) )\n            {\n                notFoundCache.remove( requestKey );\n            }\n        }\n        catch ( ItemNotFoundException ex )\n        {\n            logger.info( \"Path [{}] not found but deletion requested.\", request.getPath() );\n        }\n    }\n    else\n    {\n        throw new UnsupportedOperationException( \"The repository \" + getId() + \" have no local storage!\" );\n    }\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\impl\\AbstractRepository.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/**\n * Postprocess search result.\n * \n * @param idxresult the idxresult\n * \n * @return the list\n */\n", "func_signal": "protected List postprocessSearchResult( List idxresult )", "code": "{\n    List result = new ArrayList( idxresult.size() );\n    if ( idxresult.size() > 0 )\n    {\n        ItemProperties ip = null;\n        ProximityRequest rq = new ProximityRequest();\n        rq.setLocalOnly( true );\n        rq.setPropertiesOnly( true );\n        for ( Iterator i = idxresult.iterator(); i.hasNext(); )\n        {\n            ip = (ItemProperties) i.next();\n            rq.setPath( ip.getPath() );\n            rq.setTargetedReposId( ip.getRepositoryId() );\n            try\n            {\n                Repository repo = (Repository) getProximity().getRepository( ip.getRepositoryId() );\n                result.add( repo.retrieveItem( rq ).getProperties() );\n            }\n            catch ( AccessDeniedException ex )\n            {\n                logger.debug( \"Access denied on repo {} for path [{}], ignoring it.\", ip.getRepositoryId(), ip\n                    .getPath() );\n            }\n            catch ( RepositoryNotAvailableException ex )\n            {\n                logger.debug( \"Repo {} not available, ignoring it.\", ip.getRepositoryId() );\n            }\n            catch ( NoSuchRepositoryException ex )\n            {\n                logger.info( \"Item returned on index shows to an unexistent repo, ignoring. \"\n                    + \"Maybe repo needs a reindex?\", ip.getRepositoryId(), ip.getPath() );\n            }\n            catch ( ItemNotFoundException ex )\n            {\n                logger.info( \"Item not found in repo {} on path [{}] but index contains it, ignoring. \"\n                    + \"Maybe repo needs a reindex?\", ip.getRepositoryId(), ip.getPath() );\n            }\n        }\n        if ( getProximity().isEmergeRepositoryGroups() )\n        {\n            ProximityUtils.mangleItemPathsForEmergeGroups( result );\n        }\n    }\n    return result;\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\indexer\\AbstractIndexer.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.abstracthorizon.proximity.indexer.Indexer#setProximity(org.abstracthorizon.proximity.Proximity)\n */\n", "func_signal": "public void setProximity( Proximity proximity )", "code": "{\n    this.proximity = proximity;\n    getProximity().addProximityRequestListener( this );\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\indexer\\AbstractIndexer.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.abstracthorizon.proximity.Repository#retrieveItem(org.abstracthorizon.proximity.ProximityRequest)\n */\n", "func_signal": "public Item retrieveItem( ProximityRequest request )\n    throws RepositoryNotAvailableException,\n        ItemNotFoundException,\n        StorageException,\n        AccessDeniedException", "code": "{\n    if ( !isAvailable() )\n    {\n        throw new RepositoryNotAvailableException( \"The repository \" + getId() + \" is NOT available!\" );\n    }\n\n    getAccessManager().decide( request, this, RepositoryPermission.RETRIEVE );\n\n    try\n    {\n        String requestKey = getRepositoryRequestAsKey( this, request );\n        if ( notFoundCache.containsKey( requestKey ) )\n        {\n            // it is in cache, check when it got in\n            Date lastRequest = (Date) notFoundCache.get( requestKey );\n            if ( lastRequest.before( new Date( System.currentTimeMillis() - notFoundCachePeriod ) ) )\n            {\n                // the notFoundCache record expired, remove it and check\n                // its\n                // existence\n                logger.debug( \"n-cache record expired, will go again remote to fetch.\" );\n                notFoundCache.remove( requestKey );\n                request.setLocalOnly( false );\n            }\n            else\n            {\n                // the notFoundCache record is still valid, do not check\n                // its\n                // existence\n                logger.debug( \"n-cache record still active, will not go remote to fetch.\" );\n                request.setLocalOnly( true );\n            }\n        }\n        else\n        {\n            // it is not in notFoundCache, check its existence\n            request.setLocalOnly( false );\n        }\n        Item result = doRetrieveItem( request );\n        notifyProximityRequestListeners( new ItemRetrieveEvent( request, result.getProperties() ) );\n        return result;\n    }\n    catch ( ItemNotFoundException ex )\n    {\n        // we have not found it\n        // put the path into not found cache\n        String requestPath = getRepositoryRequestAsKey( this, request );\n        if ( !notFoundCache.containsKey( requestPath ) )\n        {\n            logger.debug( \"Caching failed request [{}] to n-cache.\", requestPath );\n            notFoundCache.put( requestPath, new Date() );\n        }\n        throw ex;\n    }\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\impl\\AbstractRepository.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.abstracthorizon.proximity.storage.Storage#containsItem(java.lang.String)\n */\n", "func_signal": "public boolean containsItem( String path )\n    throws StorageException", "code": "{\n    FTPClient client = null;\n    try\n    {\n        client = getFTPClient();\n        try\n        {\n            if ( client\n                .changeWorkingDirectory( concatPaths( getRemoteUrl().getPath(), FilenameUtils.getPath( path ) ) ) )\n            {\n                FTPFile[] fileList = client.listFiles( FilenameUtils.getName( path ) );\n                if ( fileList.length == 1 )\n                {\n                    return true;\n                }\n                else\n                {\n                    return false;\n                }\n            }\n            else\n            {\n                return false;\n            }\n        }\n        catch ( IOException ex )\n        {\n            throw new StorageException( \"Cannot execute FTP operation on remote peer.\", ex );\n        }\n    }\n    finally\n    {\n        try\n        {\n            if ( client.isConnected() )\n            {\n                client.disconnect();\n            }\n        }\n        catch ( IOException ex )\n        {\n            logger.warn( \"Could not disconnect FTPClient\", ex );\n        }\n    }\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\storage\\remote\\CommonsNetFtpRemotePeer.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.abstracthorizon.proximity.Repository#listItems(org.abstracthorizon.proximity.ProximityRequest)\n */\n", "func_signal": "public List listItems( ProximityRequest request )\n    throws RepositoryNotAvailableException,\n        StorageException,\n        AccessDeniedException", "code": "{\n    if ( !isAvailable() )\n    {\n        throw new RepositoryNotAvailableException( \"The repository \" + getId() + \" is NOT available!\" );\n    }\n\n    getAccessManager().decide( request, this, RepositoryPermission.LIST );\n\n    List result = new ArrayList();\n    if ( isListable() )\n    {\n        if ( getLocalStorage() != null )\n        {\n            List list = getLocalStorage().listItems( request.getPath() );\n            for ( Iterator i = list.iterator(); i.hasNext(); )\n            {\n                ItemProperties ip = (ItemProperties) i.next();\n                ip.setRepositoryId( getId() );\n                ip.setRepositoryGroupId( getGroupId() );\n                if ( getRemoteStorage() != null )\n                {\n                    ip.setRemoteUrl( getRemoteStorage().getAbsoluteUrl( ip.getPath() ) );\n                }\n            }\n            result.addAll( list );\n        }\n    }\n    return result;\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\impl\\AbstractRepository.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/**\n * Gets the FTP client.\n * \n * @return the FTP client\n */\n", "func_signal": "public FTPClient getFTPClient()", "code": "{\n    try\n    {\n        logger.info( \"Creating CommonsNetFTPClient instance\" );\n        FTPClient ftpc = new FTPClient();\n        ftpc.configure( ftpClientConfig );\n        ftpc.connect( getRemoteUrl().getHost() );\n        ftpc.login( getFtpUsername(), getFtpPassword() );\n        ftpc.setFileType( FTPClient.BINARY_FILE_TYPE );\n        return ftpc;\n    }\n    catch ( SocketException ex )\n    {\n        throw new StorageException( \"Got SocketException while creating FTPClient\", ex );\n    }\n    catch ( IOException ex )\n    {\n        throw new StorageException( \"Got IOException while creating FTPClient\", ex );\n    }\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\storage\\remote\\CommonsNetFtpRemotePeer.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/**\n * Do store item.\n * \n * @param request the request\n * @param item the item\n * \n * @throws RepositoryNotAvailableException the repository not available exception\n * @throws StorageException the storage exception\n */\n", "func_signal": "protected final void doStoreItem( ProximityRequest request, Item item )\n    throws RepositoryNotAvailableException,\n        StorageException", "code": "{\n    if ( getLocalStorage() != null && getLocalStorage().isWritable() )\n    {\n        item.getProperties().setRepositoryId( getId() );\n        item.getProperties().setRepositoryGroupId( getGroupId() );\n        getLocalStorage().storeItem( item );\n        // remove it from n-cache also\n        String requestKey = getRepositoryRequestAsKey( this, request );\n        if ( notFoundCache.containsKey( requestKey ) )\n        {\n            notFoundCache.remove( requestKey );\n        }\n        notifyProximityRequestListeners( new ItemStoreEvent( request, item.getProperties() ) );\n    }\n    else\n    {\n        throw new UnsupportedOperationException( \"The repository \" + getId()\n            + \" have no writable local storage defined!\" );\n    }\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\impl\\AbstractRepository.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.abstracthorizon.proximity.storage.remote.RemoteStorage#getAbsoluteUrl(java.lang.String)\n */\n", "func_signal": "public String getAbsoluteUrl( String path )", "code": "{\n    if ( path.startsWith( ItemProperties.PATH_SEPARATOR ) )\n    {\n        return remoteUrlAsString + path;\n    }\n    else\n    {\n        return remoteUrlAsString + ItemProperties.PATH_SEPARATOR + path;\n    }\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\storage\\remote\\AbstractRemoteStorage.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.abstracthorizon.proximity.storage.remote.RemoteStorage#setRemoteUrl(java.net.URL)\n */\n", "func_signal": "public void setRemoteUrl( URL url )\n    throws MalformedURLException", "code": "{\n    this.remoteUrl = url;\n    this.remoteUrlAsString = remoteUrl.toString();\n    if ( remoteUrlAsString.endsWith( ItemProperties.PATH_SEPARATOR ) )\n    {\n        remoteUrlAsString = remoteUrlAsString.substring( 0, remoteUrlAsString.length()\n            - ItemProperties.PATH_SEPARATOR.length() );\n    }\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\storage\\remote\\AbstractRemoteStorage.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.abstracthorizon.proximity.Repository#storeItem(org.abstracthorizon.proximity.ProximityRequest,\n *      org.abstracthorizon.proximity.Item)\n */\n", "func_signal": "public void storeItem( ProximityRequest request, Item item )\n    throws RepositoryNotAvailableException,\n        StorageException,\n        AccessDeniedException", "code": "{\n    if ( !isAvailable() )\n    {\n        throw new RepositoryNotAvailableException( \"The repository \" + getId() + \" is NOT available!\" );\n    }\n\n    getAccessManager().decide( request, this, RepositoryPermission.STORE );\n\n    doStoreItem( request, item );\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\impl\\AbstractRepository.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.abstracthorizon.proximity.indexer.Indexer#reindex()\n */\n", "func_signal": "public void reindex()", "code": "{\n    logger.info( \"Reindexing of all defined repositories requested.\" );\n    for ( Iterator i = getProximity().getRepositories().iterator(); i.hasNext(); )\n    {\n        Repository repo = (Repository) i.next();\n        reindex( repo );\n    }\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\indexer\\AbstractIndexer.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.abstracthorizon.proximity.indexer.Indexer#initialize()\n */\n", "func_signal": "public void initialize()", "code": "{\n    if ( getProximity() != null )\n    {\n        logger.info( \"Initializing indexer {}...\", this.getClass().getName() );\n        doInitialize();\n        logger.info( \"* Reindexing all repositories marked as (reindexAtInitialize = true)\" );\n        for ( Iterator i = getProximity().getRepositories().iterator(); i.hasNext(); )\n        {\n            Repository repo = (Repository) i.next();\n            if ( repo.isReindexAtInitialize() )\n            {\n                reindex( repo );\n            }\n        }\n    }\n    else\n    {\n        throw new IllegalStateException( \"Indexer has no Proximity instance!\" );\n    }\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\indexer\\AbstractIndexer.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.abstracthorizon.proximity.indexer.Indexer#reindex(java.lang.String)\n */\n", "func_signal": "public void reindex( String repoId )\n    throws NoSuchRepositoryException", "code": "{\n    logger.info( \"Reindexing of {} repository requested\", repoId );\n    Repository repo = getProximity().getRepository( repoId );\n    reindex( repo );\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\indexer\\AbstractIndexer.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.abstracthorizon.proximity.indexer.Searchable#getSearchableKeywords()\n */\n", "func_signal": "public Set getSearchableKeywords()", "code": "{\n    Set kws = new HashSet();\n    List reposes = getProximity().getRepositories();\n    for ( Iterator i = reposes.iterator(); i.hasNext(); )\n    {\n        Repository repo = (Repository) i.next();\n        if ( repo.getLocalStorage() != null && repo.isIndexable() )\n        {\n            kws.addAll( repo.getLocalStorage().getProxiedItemPropertiesFactory().getSearchableKeywords() );\n        }\n    }\n    // add constant kws\n    kws.add( DOC_PATH );\n    kws.add( DOC_NAME );\n    kws.add( DOC_REPO );\n    kws.add( DOC_GROUP );\n    return kws;\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\indexer\\AbstractIndexer.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "/**\n * Concat paths.\n * \n * @param path1 the path1\n * @param path2 the path2\n * \n * @return the string\n */\n", "func_signal": "protected String concatPaths( String path1, String path2 )", "code": "{\n    String result = FilenameUtils.concat( path1, path2 );\n    return FilenameUtils.separatorsToUnix( result );\n}", "path": "proximity\\px-core\\src\\main\\java\\org\\abstracthorizon\\proximity\\storage\\remote\\CommonsNetFtpRemotePeer.java", "repo_name": "cstamas/proximity1", "stars": 1, "license": "None", "language": "java", "size": 7988}
{"docstring": "// function to read the donations data\n", "func_signal": "protected void readDonationsData()", "code": "{\n    String content=new GeneralMethods().readFileContent(new File(new GeneralMethods().getApplicationPath()+\"settings/donations.html\"));\n    if(content==null) {\n        content=\"File not found (donations.html) in settings folder\";            \n    }\n    lblDonations.setText(content);\n}", "path": "src\\com\\megaware\\multipleencrypter\\frames\\ProgramDetailsDialog.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "// function to read and set all file data\n", "func_signal": "protected void readAndSetAllData()", "code": "{\n    readAboutPanelData();\n    readCreditData();\n    readDonationsData();\n    readAlgorithmsData();\n    readLicenseContent();\n}", "path": "src\\com\\megaware\\multipleencrypter\\frames\\ProgramDetailsDialog.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "// FUNCTION TO create and read the algorithms\n", "func_signal": "protected void readAlgorithmsData()", "code": "{\n    java.io.File file=new java.io.File(new GeneralMethods().getApplicationPath()+\"algorithms\");\n    String files[]=file.list();\n    int index=1;\n    String msg=\"<html>\";        \n    for (int i = 0; i < files.length; i++) {            \n        if(files[i].endsWith(\"ALG\")) {\n            AlgorithmObject obj=new SingleEncryptionAlgorithmMethods().readAlgorithmObject(\n                    new GeneralMethods().getApplicationPath()+\"algorithms/\"+files[i]);\n            msg+=\"<font color =blue size=4><u>\"+\" Algorithm \"+Integer.toString(index)+\"</u></font><br><br>\"+\n                    \"Name  ----------> \"+obj.getAlgname()+\"<br>\"+\n                    \"Author ---------> \"+obj.getAuthor()+\"<br>\"+\n                    \"Date Modified --> \"+obj.getDatemodified().toString()+\"<br>\"+\n                    \"Version -------->\"+obj.getVersion()+\"<br>\"+\n                    \"Description ----> <br>\"+obj.getDescription()+\"<br><br><br>\";\n            index++;\n        }\n    }\n    if(msg.equals(\"<html>\")) {\n        msg=\"Algorithms not found\";\n    }        \n    lblAlgorithms.setText(msg);\n}", "path": "src\\com\\megaware\\multipleencrypter\\frames\\ProgramDetailsDialog.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "//function to read the about data \n", "func_signal": "protected void readAboutPanelData()", "code": "{\n    String content=new GeneralMethods().readFileContent(new File(new GeneralMethods().getApplicationPath()+\"settings/aboutprogram.html\"));\n    if(content==null) {\n        content=\"File not found (aboutprogram.html) in settings folder\";            \n    }\n    lblAboutDetails.setText(content);\n}", "path": "src\\com\\megaware\\multipleencrypter\\frames\\ProgramDetailsDialog.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void btnCloseActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_btnCloseActionPerformed\n        setVisible(false);\n        dispose();\n    }", "path": "src\\com\\megaware\\multipleencrypter\\frames\\AlgorithmDescriptionDialog.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "// function to calculate the number of iteration or shuffling in case of shuffle\n// algorithms. Here the parameters are textlength and codedigit ans equationdigits\n", "func_signal": "public int getShuffleCount(int textlength,int codedigits[],int equdigits[])", "code": "{\n    int count=0;\n    for (int i = 0; i < codedigits.length; i++) {\n        int j = codedigits[i];\n        /* As the shuffling is done with an interval of each digit, the total\n         * number of shuffles done by a single digit will be equal to the \n         * textlength divided by that digit\n         * for eg: if digit is 2 and the textlength is 100. First replacement is\n         * 0 then 0+2, 1+2,.....                \n         */               \n        if(j>0)\n         count+=textlength/j;                                \n    }\n    \n    if(equdigits!=null) {\n        for (int i = 0; i < equdigits.length; i++) {\n            // same as for code digits\n            int j = equdigits[i];\n            if(j>0)\n                 count+=textlength/j;                   \n        }\n    }\n    return count;\n}", "path": "src\\com\\megaware\\multipleencrypter\\methods\\ShuffleAlgorithmOneMethods.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void btnOkActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_btnOkActionPerformed\n        this.setVisible(false);\n        this.dispose();\n    }", "path": "src\\com\\megaware\\multipleencrypter\\frames\\ProgramDetailsDialog.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jPanel1 = new javax.swing.JPanel();\n    jLabel1 = new javax.swing.JLabel();\n    jPanel2 = new javax.swing.JPanel();\n    jScrollPane1 = new javax.swing.JScrollPane();\n    lblAlgDescription = new javax.swing.JLabel();\n    jLabel2 = new javax.swing.JLabel();\n    lblAlgName = new javax.swing.JLabel();\n    jLabel3 = new javax.swing.JLabel();\n    jLabel4 = new javax.swing.JLabel();\n    jLabel5 = new javax.swing.JLabel();\n    jLabel6 = new javax.swing.JLabel();\n    lblAuthor = new javax.swing.JLabel();\n    lblVersion = new javax.swing.JLabel();\n    lblModifiedDate = new javax.swing.JLabel();\n    jPanel3 = new javax.swing.JPanel();\n    btnClose = new javax.swing.JButton();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n    setTitle(\"Algorithm Description\");\n    getContentPane().setLayout(null);\n\n    jPanel1.setBackground(java.awt.Color.orange);\n    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(\"\"));\n    jPanel1.setLayout(new java.awt.BorderLayout());\n\n    jLabel1.setFont(new java.awt.Font(\"Tahoma\", 1, 14));\n    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    jLabel1.setText(\"DESCRIPTION ABOUT THE SELECTED ALGORITHM\");\n    jPanel1.add(jLabel1, java.awt.BorderLayout.CENTER);\n\n    getContentPane().add(jPanel1);\n    jPanel1.setBounds(10, 10, 670, 50);\n\n    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Description of Algorithm\"));\n    jPanel2.setLayout(null);\n\n    lblAlgDescription.setBackground(java.awt.Color.white);\n    lblAlgDescription.setOpaque(true);\n    jScrollPane1.setViewportView(lblAlgDescription);\n\n    jPanel2.add(jScrollPane1);\n    jScrollPane1.setBounds(10, 180, 640, 200);\n\n    jLabel2.setText(\"Name:\");\n    jPanel2.add(jLabel2);\n    jLabel2.setBounds(10, 40, 130, 17);\n\n    lblAlgName.setBackground(new java.awt.Color(255, 255, 255));\n    lblAlgName.setFont(new java.awt.Font(\"Tahoma\", 1, 11));\n    lblAlgName.setOpaque(true);\n    jPanel2.add(lblAlgName);\n    lblAlgName.setBounds(160, 40, 490, 20);\n\n    jLabel3.setText(\"Description of the alogrithm\");\n    jPanel2.add(jLabel3);\n    jLabel3.setBounds(10, 160, 180, 17);\n\n    jLabel4.setText(\"Author\");\n    jPanel2.add(jLabel4);\n    jLabel4.setBounds(10, 70, 43, 17);\n\n    jLabel5.setText(\"version\");\n    jPanel2.add(jLabel5);\n    jLabel5.setBounds(10, 100, 80, 17);\n\n    jLabel6.setText(\"Modified Date\");\n    jPanel2.add(jLabel6);\n    jLabel6.setBounds(10, 130, 100, 17);\n\n    lblAuthor.setBackground(java.awt.Color.white);\n    lblAuthor.setOpaque(true);\n    jPanel2.add(lblAuthor);\n    lblAuthor.setBounds(160, 70, 450, 20);\n\n    lblVersion.setBackground(java.awt.Color.white);\n    lblVersion.setOpaque(true);\n    jPanel2.add(lblVersion);\n    lblVersion.setBounds(160, 100, 460, 20);\n\n    lblModifiedDate.setBackground(java.awt.Color.white);\n    lblModifiedDate.setOpaque(true);\n    jPanel2.add(lblModifiedDate);\n    lblModifiedDate.setBounds(160, 130, 460, 20);\n\n    getContentPane().add(jPanel2);\n    jPanel2.setBounds(10, 60, 660, 390);\n\n    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(\"\"));\n    jPanel3.setLayout(null);\n\n    btnClose.setText(\"CLOSE\");\n    btnClose.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            btnCloseActionPerformed(evt);\n        }\n    });\n    jPanel3.add(btnClose);\n    btnClose.setBounds(290, 5, 130, 29);\n\n    getContentPane().add(jPanel3);\n    jPanel3.setBounds(20, 460, 660, 40);\n\n    java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();\n    setBounds((screenSize.width-698)/2, (screenSize.height-536)/2, 698, 536);\n}", "path": "src\\com\\megaware\\multipleencrypter\\frames\\AlgorithmDescriptionDialog.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "// function to read the license file\n", "func_signal": "protected void readLicenseContent()", "code": "{\n    String content=new GeneralMethods().readFileContent(new File(new GeneralMethods().getApplicationPath()+\"settings/license.html\"));\n    if(content==null) {\n        content=\"File not found (license.html) in settings folder\";            \n    }\n    lblLicense.setText(content);\n}", "path": "src\\com\\megaware\\multipleencrypter\\frames\\ProgramDetailsDialog.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "/** Creates new form ProgramDetailsDialog */\n", "func_signal": "public ProgramDetailsDialog(java.awt.Frame parent, boolean modal)", "code": "{\n    super(parent, modal);\n    initComponents();\n    readAndSetAllData();\n}", "path": "src\\com\\megaware\\multipleencrypter\\frames\\ProgramDetailsDialog.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "// function to read the html content of the file \n", "func_signal": "public void setContentFile(File file)", "code": "{\n    String content=new GeneralMethods().readFileContent(file)      ;\n    if(content==null) {\n        content=\"Help file not found\";\n    }\n    lblContent.setText(content);\n}", "path": "src\\com\\megaware\\multipleencrypter\\frames\\QuickHelpViewer.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jPanel1 = new javax.swing.JPanel();\n    jLabel1 = new javax.swing.JLabel();\n    jPanel2 = new javax.swing.JPanel();\n    jScrollPane1 = new javax.swing.JScrollPane();\n    lblContent = new javax.swing.JLabel();\n    jPanel3 = new javax.swing.JPanel();\n    btnClose = new javax.swing.JButton();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n    setTitle(\"Quick Help\");\n\n    jPanel1.setLayout(new java.awt.BorderLayout());\n\n    jLabel1.setFont(new java.awt.Font(\"Tahoma\", 1, 12));\n    jLabel1.setText(\"QUICK HELP VIEWER (Provides a quick knowledge)\");\n    jPanel1.add(jLabel1, java.awt.BorderLayout.CENTER);\n\n    getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);\n\n    jPanel2.setLayout(new java.awt.BorderLayout());\n\n    lblContent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    jScrollPane1.setViewportView(lblContent);\n\n    jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);\n\n    getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);\n\n    btnClose.setText(\"CLOSE\");\n    btnClose.addActionListener(new java.awt.event.ActionListener() {\n        public void actionPerformed(java.awt.event.ActionEvent evt) {\n            btnCloseActionPerformed(evt);\n        }\n    });\n    jPanel3.add(btnClose);\n\n    getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_END);\n\n    java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();\n    setBounds((screenSize.width-738)/2, (screenSize.height-598)/2, 738, 598);\n}", "path": "src\\com\\megaware\\multipleencrypter\\frames\\QuickHelpViewer.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "/** Creates new form AlgorithmDescriptionDialog */\n", "func_signal": "public AlgorithmDescriptionDialog(java.awt.Frame parent, boolean modal)", "code": "{\n    super(parent, modal);\n    initComponents();\n}", "path": "src\\com\\megaware\\multipleencrypter\\frames\\AlgorithmDescriptionDialog.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void btnCloseActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_btnCloseActionPerformed\n        setVisible(false);\n        dispose();\n    }", "path": "src\\com\\megaware\\multipleencrypter\\frames\\QuickHelpViewer.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "// function to read the credits data\n", "func_signal": "protected void readCreditData()", "code": "{\n    String content=new GeneralMethods().readFileContent(new File(new GeneralMethods().getApplicationPath()+\"settings/credits.html\"));\n    if(content==null) {\n        content=\"File not found (credit.html) in settings folder\";            \n    }\n    lblCredits.setText(content);\n}", "path": "src\\com\\megaware\\multipleencrypter\\frames\\ProgramDetailsDialog.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "// function to set the details of the algorithm using the passed\n// AlgorithmObject\n", "func_signal": "public void setDetails(AlgorithmObject object)", "code": "{\n    lblAlgName.setText(object.getAlgname());\n    lblAlgDescription.setText(object.getDescription());\n    lblAuthor.setText(object.getAuthor());\n    lblModifiedDate.setText(object.getDatemodified().toString());\n    lblVersion.setText(object.getVersion());\n    setTitle(\"Algorithm  Description [ \"+object.getAlgname()+\" ]\");\n    setVisible(true);\n}", "path": "src\\com\\megaware\\multipleencrypter\\frames\\AlgorithmDescriptionDialog.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "// function to return the digits of a given bigdecimal as integer array\n// used by shuffle algorithms\n", "func_signal": "public int[] getBigDecimalDigits(BigDecimal value)", "code": "{  \n    System.out.println(\"value digits\"+value);\n    int len=value.toString().length();\n    if(len==0||value.compareTo(new BigDecimal(\"0\"))==0) return  null;           \n    int digits[]=new int[len];\n    // always shuffle once\n    //digits[0]=1;\n    int index=0;\n    while(value.compareTo(new BigDecimal(\"0\"))==1) {\n         BigDecimal values[]=value.divideAndRemainder(new BigDecimal(\"10\"));\n         int r=Integer.parseInt(values[1].toString());            \n         digits[index]=r;\n         index++;\n         value=new BigDecimal(values[0].toString());                         \n    }             \n    return digits;\n}", "path": "src\\com\\megaware\\multipleencrypter\\methods\\ShuffleAlgorithmOneMethods.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n    java.awt.EventQueue.invokeLater(new Runnable() {\n        public void run() {\n            ProgramDetailsDialog dialog = new ProgramDetailsDialog(new javax.swing.JFrame(), true);\n            dialog.addWindowListener(new java.awt.event.WindowAdapter() {\n                public void windowClosing(java.awt.event.WindowEvent e) {\n                    System.exit(0);\n                }\n            });\n            dialog.setVisible(true);\n        }\n    });\n}", "path": "src\\com\\megaware\\multipleencrypter\\frames\\ProgramDetailsDialog.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n    java.awt.EventQueue.invokeLater(new Runnable() {\n        public void run() {\n            QuickHelpViewer dialog = new QuickHelpViewer(new javax.swing.JFrame(), true);\n            dialog.addWindowListener(new java.awt.event.WindowAdapter() {\n                public void windowClosing(java.awt.event.WindowEvent e) {\n                    System.exit(0);\n                }\n            });\n            dialog.setVisible(true);\n        }\n    });\n}", "path": "src\\com\\megaware\\multipleencrypter\\frames\\QuickHelpViewer.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n    java.awt.EventQueue.invokeLater(new Runnable() {\n        public void run() {\n            AlgorithmDescriptionDialog dialog = new AlgorithmDescriptionDialog(new javax.swing.JFrame(), true);\n            dialog.addWindowListener(new java.awt.event.WindowAdapter() {\n                public void windowClosing(java.awt.event.WindowEvent e) {\n                    System.exit(0);\n                }\n            });\n            dialog.setVisible(true);\n        }\n    });\n}", "path": "src\\com\\megaware\\multipleencrypter\\frames\\AlgorithmDescriptionDialog.java", "repo_name": "kra3/megaware_dataencrypter", "stars": 1, "license": "None", "language": "java", "size": 256}
{"docstring": "/**\n*\n* A version of the generator for filling arrays,  inlined for speed\n*\n* @param d an array of doubles to be filled\n* @param n size of the array\n*\n*/\n", "func_signal": "final public void raw(double d[],int n)", "code": "{\n\n\tdouble uni;\n\n\tfor(int i=0;i<n;i++)\n\t{\n\t    uni=u[i97]-u[j97];\n\t    if (uni<0.0) uni+=1.0;\n\t    u[i97]=uni;\n\t    if (--i97<0) i97=96;\n\t    if (--j97<0) j97=96;\n\t    c-=cd;\n\t    if (c<0.0) c+=cm;\n\t    uni-=c;\n\t    if (uni<0.0) uni+=1.0;\n\t    d[i]=uni;\n\t};\n}", "path": "src\\edu\\cornell\\lassp\\houle\\RngPack\\Ranmar.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/**\n* The generator\n* @return a pseudo random number\n*/\n", "func_signal": "final public double raw()", "code": "{\n\n\tdouble uni;\n\n\tuni=u[i97]-u[j97];\n\tif (uni<0.0) uni+=1.0;\n\tu[i97]=uni;\n\tif (--i97<0) i97=96;\n\tif (--j97<0) j97=96;\n\tc-=cd;\n\tif (c<0.0) c+=cm;\n\tuni-=c;\n\tif (uni<0.0) uni+=1.0;\n\treturn(uni);\n  }", "path": "src\\edu\\cornell\\lassp\\houle\\RngPack\\Ranmar.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/**\n * Test czy dobrze liczony jest \u015bredni czas oczekiwania\n * @throws Exception\n */\n", "func_signal": "public void testSredniCzasOczekiwania() throws Exception", "code": "{\n\tKolejka k = new Kolejka(serwer);\n\tk.setRozkladIlosciPrzybyc(new RozkladJednostajny(1));\n\tk.setMaxZgloszen(Integer.MAX_VALUE);\n\n\t\n\tint iteracji = 100;\n\tint suma = 0;\n\tfor (int i = 0; i < iteracji ; i++) {\n\t\tsuma += i;\n\t\tk.wykonajCyklSymulacji();\n\t}\n\t\n\tassertEquals(suma/(float)iteracji, k.getSredniCzasOczekiwania());\n}", "path": "test\\pl\\wroc\\pwr\\iis\\polling\\model\\KolejkaTest.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/* \n * \u015arednia wa\u017cona ilo\u015bci zg\u0142osze\u0144\n * @see pl.wroc.pwr.iis.polling.model.ocena.ModulOceniajacy#ocenaSytuacji(pl.wroc.pwr.iis.polling.model.object.Serwer)\n */\n", "func_signal": "public double ocenaSytuacji(Serwer serwer)", "code": "{\n\tfloat r_time = 0;\n\t\n\tfor (int i = 0; i < serwer.getIloscKolejek() - 1; i++) {\n\t\tKolejka kolejka = serwer.getKolejka(i);\n\t\t\n\t\tdouble r_time_i = 0; \n\t\tdouble R =  kolejka.getMaxCzasOczekiwania();\n\t\tdouble M = kolejka.getSredniCzasOczekiwania();\n//\t\t\tfloat M = kolejka.getCzasOczekiwania();\n\t\t\n\t\tif(M <= R) {\n\t\t\tr_time_i = (c1 * M) /R;\n\t\t} else {\n\t\t\tr_time_i = -c2;\n\t\t}\n\t\t\n\t\tfloat W = kolejka.getWaga();\n\t\tr_time += r_time_i * W;\n\t}\n\t\n\tfloat r_stan = getR_stan(serwer);\n\t\n\t//Zapisanie stanu\n\tthis.poprzedniStan = serwer.getReprezentacjaStanu().getStan(serwer);\n\treturn r_time + r_stan;\n}", "path": "src\\pl\\wroc\\pwr\\iis\\polling\\model\\sterowanie\\funkcjaOceny\\routery\\OcenaTimeRosnacoOrginalna.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/* \n * \u015arednia wa\u017cona ilo\u015bci zg\u0142osze\u0144\n * @see pl.wroc.pwr.iis.polling.model.ocena.ModulOceniajacy#ocenaSytuacji(pl.wroc.pwr.iis.polling.model.object.Serwer)\n */\n", "func_signal": "public double ocenaSytuacji(Serwer serwer)", "code": "{\n\tfloat r_time = 0;\n\tfor (int i = 0; i < serwer.getIloscKolejek()-1; i++) {\n\t\tKolejka kolejka = serwer.getKolejka(i);\n\t\t\n\t\tdouble r_time_i = 0; \n\t\tdouble R =  kolejka.getMaxCzasOczekiwania();\n//\t\t\tfloat M = kolejka.getSredniCzasOczekiwania();\n\t\tdouble M = kolejka.getCzasOczekiwania();\n\t\t\n\t\tif(M <= R) {\n\t\t\tr_time_i = c1 * M / (-3.0 * R * R) + 4.0/3.0*c1;\n\t\t} else {\n\t\t\tr_time_i = c2/R * M * -.5;\n//\t\t\t\tr_time_i = -0.1*(c2*M/R);\n\t\t}\n\t\t\n\t\tfloat W = kolejka.getWaga();\n\t\tr_time += r_time_i * W;\n\t}\n\tKolejka kolejka = serwer.getKolejka(serwer.getIloscKolejek()-1);\n//\t\tfloat Mr = kolejka.getSredniCzasOczekiwania();\n\tdouble Mr = kolejka.getCzasOczekiwania();\n\t\n\tmaxR = Math.max(Mr, maxR);\n//\t\tfloat M = kolejka.getSredniCzasOczekiwania();\n\tdouble M = kolejka.getCzasOczekiwania();\n\t\n//\t\tdouble d = ((-c4*M/maxR) + c4);\n\tdouble d = -M/(float)c4;\n\t\n\t\n\tr_time += d;\n\t\n\tfloat r_stan = getR_stan(serwer);\n\t\n\t//Zapisanie stanu\n\tthis.poprzedniStan = serwer.getReprezentacjaStanu().getStan(serwer);\n\treturn r_time + r_stan;\n}", "path": "src\\pl\\wroc\\pwr\\iis\\polling\\model\\sterowanie\\funkcjaOceny\\routery\\OcenaTimeRosnacoOrginalna4CzasOczekiwaniaPierwszego.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/* \n * \u015arednia wa\u017cona ilo\u015bci zg\u0142osze\u0144\n * @see pl.wroc.pwr.iis.polling.model.ocena.ModulOceniajacy#ocenaSytuacji(pl.wroc.pwr.iis.polling.model.object.Serwer)\n */\n", "func_signal": "public double ocenaSytuacji(Serwer serwer)", "code": "{\n\tfloat r_time = 0;\n\tfor (int i = 0; i < serwer.getIloscKolejek()-1; i++) {\n\t\tKolejka kolejka = serwer.getKolejka(i);\n\t\t\n\t\tdouble r_time_i = 0; \n\t\tdouble R =  kolejka.getMaxCzasOczekiwania();\n\t\tdouble M = kolejka.getSredniCzasOczekiwania();\n\t\t\n\t\tif(M <= R) {\n\t\t\tdouble wykladnik = 1;\n\t\t\tr_time_i = c1/Math.pow(R,wykladnik) * Math.pow(M,wykladnik);//(c1 * M) /R;\n\t\t\tr_time_i = r_time_i / c1;\n\t\t\t\n\t\t\twykladnik = 0.5;\n\t\t\tr_time_i = Math.pow(r_time_i, wykladnik);\n\t\t\tr_time_i = r_time_i * c1;\n\t\t\tif (r_time_i < 0.001) {\n\t\t\t\tr_time_i = 0;\n\t\t\t}\n\t\t} else {\n\t\t\tdouble wykladnik = 0.5;\n\t\t\tr_time_i = -Math.pow(c2/R * M, wykladnik);\n//\t\t\t\tr_time_i = -c2;\n\t\t}\n\t\t\n\t\tfloat W = kolejka.getWaga();\n\t\tr_time += r_time_i * W;\n\t}\n\t\n\tKolejka kolejka = serwer.getKolejka(serwer.getIloscKolejek()-1);\n\tmaxR = Math.max(kolejka.getSredniCzasOczekiwania(), maxR);\n\tdouble M = kolejka.getSredniCzasOczekiwania();\n\t\n\tdouble d = ((-c4*M/maxR) + c4) / serwer.getIloscKolejek();\n\td = d / (c4/serwer.getIloscKolejek());\n\td = Math.pow(d, 2)*c4;\n//\t\tSystem.out.println(\"OcenaTimeRosnacoOrginalna2.ocenaSytuacji(): \" + d + \"\\t \" + maxR);\n\t\n//\t\tif (! zlamaneOgraniczenie)\n\tr_time += d;\n\t\n\tfloat r_stan = getR_stan(serwer);\n\t\n\t//Zapisanie stanu\n\tthis.poprzedniStan = serwer.getReprezentacjaStanu().getStan(serwer);\n\treturn r_time + r_stan;\n}", "path": "src\\pl\\wroc\\pwr\\iis\\polling\\model\\sterowanie\\funkcjaOceny\\routery\\OcenaTimeRosnacoOrginalna2.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "// \n", "func_signal": "public Badanie2_dlaEZachlannej()", "code": "{\n\t\tserwerMetoda1 = new Serwer(\"Serwer 1\",4);\n\t\tserwerMetoda2 = new Serwer(\"Serwer 2\",4);\n//\t\tsetParametryEksperymentu(300000, 30, 3000);\n\t\tsetParametryEksperymentu(300000, 2, 2000);\n//\t\tsetParametryEksperymentu(300000, 1, 2500, 20000, 300000);\n\t}", "path": "src\\pl\\wroc\\pwr\\iis\\simulation\\artykul1\\Badanie2_dlaEZachlannej.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/**\n * @param maxStanow\n * @param akcji\n * @param tStart Temperatura pocz\u0105tkowa\n * @param tKoncowe Temperatura Koncowa\n * @param tIteracji Ilosc Iteracji spadku liniowego miedzy \n */\n", "func_signal": "public StrategiaSoftMax(float tStart, float tKoncowe, float tIteracji, int[] maxStanow, int akcji)", "code": "{\n\tsuper(maxStanow, akcji);\n\tstart = tStart;\n\tkoniec = tKoncowe;\n\titeracji = tIteracji;\n\tQ = new FunkcjaWartosciAkcji(getIloscStanow(), akcji);\n\tQ.zainicjujLosowo();\n}", "path": "src\\pl\\wroc\\pwr\\iis\\polling\\model\\sterowanie\\strategie\\StrategiaSoftMax.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/**\n * Sprawdza czy poprawnie zwiekszaja sie zgloszenia w kolejkach \n */\n", "func_signal": "public void testWykonajCyklSymulacji01()", "code": "{\n\tserwer.setMaxZgloszen(100000);\n        \n        // Konfiguracja po\u0142\u0105cze\u0144 wychodz\u0105cych\n          // serwer.setPolaczeniaWychodzace(polaczeniaWychodzace);\n        assertTrue(serwer.getIloscKolejek() == ILOSC_KOLEJEK);\n        \n        int ilosc_iteracji = 200;\n\tfor (int i = 0; i < ilosc_iteracji ; i++) {\n\t\tserwer.wykonajCyklSymulacji();\n\t}\n\tSystem.out.println(serwer);\n\t\n\tfor (int i = 0; i < ILOSC_KOLEJEK ; i++) {\n\t\tassertEquals(Math.min(ilosc_iteracji, serwer.getMaxZgloszen()), serwer.getKolejka(i).getIloscZgloszen());\n\t}\n}", "path": "test\\pl\\wroc\\pwr\\iis\\polling\\model\\KolejkaTest.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "// \n", "func_signal": "public Badanie2()", "code": "{\n\t\tserwerMetoda1 = new Serwer(\"Serwer 1\",4);\n\t\tserwerMetoda2 = new Serwer(\"Serwer 2\",4);\n//\t\tsetParametryEksperymentu(300000, 30, 3000);\n\t\tsetParametryEksperymentu(300000, 3, 2000);\n//\t\tsetParametryEksperymentu(300000, 1, 2500, 20000, 300000);\n\t}", "path": "src\\pl\\wroc\\pwr\\iis\\simulation\\artykul1\\Badanie2.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/**\n * @return Zwraca warto\u015b\u0107 je\u017celi nast\u0105pi\u0142a poprawa stanu\n */\n", "func_signal": "protected float getR_stan(Serwer serwer)", "code": "{\n\tfloat result = 0;\n\tPorownanie p = serwer.getReprezentacjaStanu().compare(serwer, poprzedniStan);\n\t \n\tif(p == Porownanie.Lepszy) {\n\t\tresult = c3;\n\t}\n\t\n\treturn result;\n}", "path": "src\\pl\\wroc\\pwr\\iis\\polling\\model\\sterowanie\\funkcjaOceny\\routery\\OcenaTimeRosnacoOrginalna2.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/**\n * @see pl.wroc.pwr.iis.polling.model.object.IStan#compare(pl.wroc.pwr.iis.polling.model.object.polling.Serwer, int[])\n * \n * Sprawdza ile ogranicze\u0144 jest spe\u0142nionych w bie\u017c\u0105cym stanie, a ile\n * w innym stanie. Je\u017celi wiecej kolejek ma spe\u0142nione ograniczenie w bie\u017cacym stanie\n * stan ten jest lepszy. Je\u017celi ilos\u0107 ta jest r\u00f3wna stany s\u0105 r\u00f3wne, stan jest gorszy\n * w przeciwnym przypadku.\n */\n", "func_signal": "public Porownanie compare(Serwer serwer, int[] innyStan)", "code": "{\n\tPorownanie result = Porownanie.NieMoznaPorownac;\n\n\tint[] stan = getStan(serwer); \n\tif (stan.length == innyStan.length) {\n\t\tint ogr1 = 0;\n\t\tint ogr2 = 0;\n\t\tfor (int i = 0; i < stan.length; i++) {\n\t\t\tif (stan[i] == 0) { ogr1++; }\n\t\t\tif (innyStan[i] == 0) { ogr2++; }\n\t\t}\n\t\t\n\t\tif (ogr1 < ogr2)  { result = Porownanie.Lepszy;}\n\t\telse if (ogr1 == ogr2) { result = Porownanie.Rowny;}\n\t\telse if (ogr1 > ogr2)  { result = Porownanie.Gorszy;}\n\t\telse { result = Porownanie.NieMoznaPorownac; }\n\t\t\t\n\t}\n\t\n\treturn result;\n}", "path": "src\\pl\\wroc\\pwr\\iis\\polling\\model\\sterowanie\\reprezentacjaStanu\\StanSortowanLiczbaZgloszenZOgraniczeniami.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/**\n * @see pl.wroc.pwr.iis.polling.model.sterowanie.strategie.Strategia_A#getAkcja(int[], int)\n * W przypadku kiedy z rozk\u0142adu Bolzmana wychodzi zbyt ma\u0142a liczba przyjmowana jest wartosc 0,001\n */\n", "func_signal": "@Override\npublic int getAkcja(int[] stan, int iloscAkcji)", "code": "{\n\tdouble[] losy = new double[iloscAkcji];\n\tint numerStanu = getNumerStanu(stan);\n\t\n\tif (aktualnaIteracja >= iteracji) {\n\t\ttemperatura = koniec;\n\t} else {\n\t\ttemperatura = aktualnaTemeratura(start, koniec, iteracji, aktualnaIteracja);\n\t\taktualnaIteracja++;\n\t}\n\n\tif (! shake) {\n\t\tshake = false;\n\t}\t\n\t\n\tdouble suma = 0;\n\tfor (int i = 0; i < losy.length; i++) {\n\t\tlosy[i] = Math.max(Math.pow(Math.E, (Q.getWartosc(numerStanu, i) / temperatura)), 0.00001);\n\t\tsuma += losy[i];\n\t}\n\t\n\tif (Double.isInfinite(suma)) {\n\t\tSystem.out.println(\"StrategiaSoftMax.getAkcja():\" + suma);\n\t}\n\tfor (int i = 0; i < losy.length; i++) {\n\t\tlosy[i] = (losy[i] / suma);\n\t}\n\n\tostatniStan = numerStanu;\n\treturn (ostatniaAkcja = Losuj.losujElement(losy));\n}", "path": "src\\pl\\wroc\\pwr\\iis\\polling\\model\\sterowanie\\strategie\\StrategiaSoftMax.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/**\n * Sprawdza czy poprawnie zwiekszaja sie zgloszenia w kolejkach przy ograniczeniu rozmiaru bufora\n */\n", "func_signal": "@Test \npublic void testWykonajCyklSymulacji()", "code": "{\n        // Konfiguracja po\u0142\u0105cze\u0144 wychodz\u0105cych\n          // serwer.setPolaczeniaWychodzace(polaczeniaWychodzace);\n        assertTrue(serwer.getIloscKolejek() == ILOSC_KOLEJEK);\n        \n        int ilosc_iteracji = 200;\n\tfor (int i = 0; i < ilosc_iteracji ; i++) {\n\t\tserwer.wykonajCyklSymulacji();\n\t}\n\tSystem.out.println(serwer);\n\t\n\tfor (int i = 0; i < ILOSC_KOLEJEK ; i++) {\n\t\tassertEquals(Math.min(ilosc_iteracji, serwer.getMaxZgloszen()), serwer.getKolejka(i).getIloscZgloszen());\n\t}\n\t\n}", "path": "test\\pl\\wroc\\pwr\\iis\\polling\\model\\KolejkaTest.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/**\n * @return Zwraca warto\u015b\u0107 je\u017celi nast\u0105pi\u0142a poprawa stanu\n */\n", "func_signal": "protected float getR_stan(Serwer serwer)", "code": "{\n\tfloat result = 0;\n\tPorownanie p = serwer.getReprezentacjaStanu().compare(serwer, poprzedniStan);\n\t \n\tif(p == Porownanie.Lepszy) {\n\t\tresult = c3;\n\t}\n\t\n//\t\tif(p != Porownanie.NieMoznaPorownac) {\n//\t\t\tresult = c3 *  serwer.getReprezentacjaStanu().compareWspolczynnik(serwer, poprzedniStan);\n//\t\t}\n\t\n\treturn result;\n}", "path": "src\\pl\\wroc\\pwr\\iis\\polling\\model\\sterowanie\\funkcjaOceny\\routery\\OcenaTimeRosnacoOrginalna4CzasOczekiwaniaPierwszego.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/* Run One Episode of length maximum cutOff*/\n", "func_signal": "private void runEpisode(int stepLimit)", "code": "{\n    int terminal = RLGlue.RL_episode(stepLimit);\n\n    int totalSteps = RLGlue.RL_num_steps();\n    double totalReward = RLGlue.RL_return();\n\n    System.out.println(\"Episode \" + whichEpisode + \"\\t \" + totalSteps + \" steps \\t\" + totalReward + \" total reward\\t \" + terminal + \" natural end\");\n\n    whichEpisode++;\n}", "path": "src\\rl_community\\skeleton-sample\\SkeletonExperiment.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/* \n * \u015arednia wa\u017cona ilo\u015bci zg\u0142osze\u0144\n * @see pl.wroc.pwr.iis.polling.model.ocena.ModulOceniajacy#ocenaSytuacji(pl.wroc.pwr.iis.polling.model.object.Serwer)\n */\n", "func_signal": "public double ocenaSytuacji(Serwer serwer)", "code": "{\n\tfloat r_time = 0;\n\tfor (int i = 0; i < serwer.getIloscKolejek()-1; i++) {\n\t\tKolejka kolejka = serwer.getKolejka(i);\n\t\t\n\t\tdouble r_time_i = 0; \n\t\tdouble R =  kolejka.getMaxCzasOczekiwania();\n\t\tdouble M = kolejka.getCzasOczekiwania();\n//\t\t\tfloat M = kolejka.getCzasOczekiwania();\n\t\t\n\t\tif(M <= R) {\n\t\t\tr_time_i = c1 * M / (-3.0 * R * R) + 4.0/3.0*c1;\n\t\t} else {\n\t\t\tr_time_i = c2/R * M * -.5;\n//\t\t\t\tr_time_i = -0.1*(c2*M/R);\n\t\t}\n\t\t\n\t\tfloat W = kolejka.getWaga();\n\t\tr_time += r_time_i * W;\n\t}\n\tKolejka kolejka = serwer.getKolejka(serwer.getIloscKolejek()-1);\n\tdouble Mr = kolejka.getCzasOczekiwania();\n//\t\tfloat Mr = kolejka.getCzasOczekiwania();\n\t\n\tmaxR = Math.max(Mr, maxR);\n\tdouble M = kolejka.getCzasOczekiwania();\n\t\n//\t\tdouble d = ((-c4*M/maxR) + c4);\n\tdouble d = -M/(float)c4;\n\t\n\t\n\tr_time += d;\n\t\n\tfloat r_stan = getR_stan(serwer);\n\t\n\t//Zapisanie stanu\n\tthis.poprzedniStan = serwer.getReprezentacjaStanu().getStan(serwer);\n\treturn r_time + r_stan;\n}", "path": "src\\pl\\wroc\\pwr\\iis\\polling\\model\\sterowanie\\funkcjaOceny\\routery\\OcenaTimeRosnacoOrginalna4.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/**\n * @return Zwraca warto\u015b\u0107 je\u017celi nast\u0105pi\u0142a poprawa stanu\n */\n", "func_signal": "protected float getR_stan(Serwer serwer)", "code": "{\n\tfloat result = 0;\n\tPorownanie p = serwer.getReprezentacjaStanu().compare(serwer, poprzedniStan);\n\t \n\tif(p == Porownanie.Lepszy) {\n\t\tresult = c3;\n\t}\n\t\n\treturn result;\n}", "path": "src\\pl\\wroc\\pwr\\iis\\polling\\model\\sterowanie\\funkcjaOceny\\routery\\OcenaTimeRosnacoOrginalna.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "// \n", "func_signal": "public Badanie2_dlaRoznychMetodUczacych()", "code": "{\n\t\tserwerMetoda1 = new Serwer(\"Serwer 1\",4);\n\t\tserwerMetoda2 = new Serwer(\"Serwer 2\",4);\n//\t\tsetParametryEksperymentu(300000, 30, 3000);\n\t\tsetParametryEksperymentu(100000, 10, 500);\n//\t\tsetParametryEksperymentu(300000, 1, 2500, 20000, 300000);\n\t}", "path": "src\\pl\\wroc\\pwr\\iis\\simulation\\artykul1\\Badanie2_dlaRoznychMetodUczacych.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/**\n * @return Zwraca warto\u015b\u0107 je\u017celi nast\u0105pi\u0142a poprawa stanu\n */\n", "func_signal": "protected float getR_stan(Serwer serwer)", "code": "{\n\tfloat result = 0;\n\tPorownanie p = serwer.getReprezentacjaStanu().compare(serwer, poprzedniStan);\n\t \n\tif(p == Porownanie.Lepszy) {\n\t\tresult = c3;\n\t}\n\t\n//\t\tif(p != Porownanie.NieMoznaPorownac) {\n//\t\t\tresult = c3 *  serwer.getReprezentacjaStanu().compareWspolczynnik(serwer, poprzedniStan);\n//\t\t}\n\t\n\treturn result;\n}", "path": "src\\pl\\wroc\\pwr\\iis\\polling\\model\\sterowanie\\funkcjaOceny\\routery\\OcenaTimeRosnacoOrginalna4.java", "repo_name": "mikolson/PollingNetworkEnvironment", "stars": 1, "license": "None", "language": "java", "size": 4108}
{"docstring": "/**\n * @see com.beckettit.sqlbuilder.Expression#toSql(com.beckettit.sqlbuilder.Query)\n */\n", "func_signal": "public String toSql(Query query)", "code": "{\n\tStringBuilder sql = new StringBuilder();\n\tif(this.expressions.size() > 1) sql.append(\"(\");\n\tArrayList<String> expressionsSql = new ArrayList<String>();\n\tfor(Expression e : expressions){\n\t\texpressionsSql.add(e.toSql(query));\n\t}\n\tsql.append(StringUtils.join(expressionsSql, \" \" + this.operator.toString() + \" \" ));\n\tif(this.expressions.size() > 1) sql.append(\")\");\n\treturn sql.toString();\n}", "path": "src\\com\\beckettit\\sqlbuilder\\el\\LogicalExpression.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @see groovy.util.AbstractFactory#setChild(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)\n */\n", "func_signal": "@Override\npublic void setChild(FactoryBuilderSupport builder, Object parent, Object child)", "code": "{\n\tsuper.setChild(builder, parent, child);\n\tif(child instanceof OrderClause){\n\t\t((Query)parent).addOrderClause((OrderClause)child);\n\t}else if((child instanceof Expression)){\n\t\t((Query)parent).addExpression((Expression)child);\n\t}\n}", "path": "src\\com\\beckettit\\sqlbuilder\\builder\\QueryBuilderFactory.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @see groovy.util.Factory#newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map)\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic Object newInstance(FactoryBuilderSupport factoryBuilderSupport, Object name, Object value, Map map)", "code": "{\n\t\n\tif(value instanceof Collection){\n\t\tString property = (String) ((List)value).get(0);\n\t\tString direction = (String) ((List)value).get(1);\n\t\t\n\t\tif(\"asc\".equalsIgnoreCase(direction)) \n\t\t\treturn OrderFactory.asc(property);\n\t\telse \n\t\t\treturn OrderFactory.desc(property);\n\t}\n\t\n\treturn null;\n}", "path": "src\\com\\beckettit\\sqlbuilder\\builder\\OrderBuilderFactory.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @see com.beckettit.sqlbuilder.Query#addExpression(com.beckettit.sqlbuilder.Expression)\n */\n", "func_signal": "public Query addExpression(Expression expression)", "code": "{\n\tthis.expressions.add(expression);\n\treturn this;\n}", "path": "src\\com\\beckettit\\sqlbuilder\\impl\\BaseQueryImpl.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @see com.beckettit.sqlbuilder.Expression#getParameters()\n */\n", "func_signal": "public Collection<Object> getParameters()", "code": "{\n\tArrayList<Object> parameters = new ArrayList<Object>();\n\tfor(Expression e : expressions){\n\t\tparameters.addAll(e.getParameters());\n\t}\n\treturn parameters;\n}", "path": "src\\com\\beckettit\\sqlbuilder\\el\\LogicalExpression.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @see com.beckettit.sqlbuilder.Expression#toSql()\n */\n", "func_signal": "public String toSql(Query query)", "code": "{\n\treturn query.getAlias(this.property) + \" \" + operator.toString() + \" (\" + StringUtils.join(CollectionUtils.collect(getParameters(), new Transformer(){\n\n\t\tpublic Object transform(Object arg0) {\n\t\t\treturn \"?\";\n\t\t}\n\t\t\n\t}),\",\") + \")\";\n}", "path": "src\\com\\beckettit\\sqlbuilder\\el\\NotInExpression.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @see groovy.util.Factory#newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map)\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic Object newInstance(FactoryBuilderSupport factoryBuilderSupport, Object name, Object value, Map map)", "code": "{\n\tMap nvMap = new HashMap();\n\tnvMap.put(\"name\", name);\n\tnvMap.put(\"value\", value);\n\treturn nvMap;\n}", "path": "src\\com\\beckettit\\sqlbuilder\\builder\\NameValueBuilderFactory.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @param baseSql\n * @return\n */\n", "func_signal": "public static Query query(String baseSql)", "code": "{\n\tinit();\n\tQuery query = new BaseQueryImpl(baseSql);\n\treturn query;\n}", "path": "src\\com\\beckettit\\sqlbuilder\\SqlBuilder.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @see com.beckettit.sqlbuilder.Query#getParameters()\n */\n", "func_signal": "public List<Object> getParameters()", "code": "{\n\tArrayList<Object> parameters = new ArrayList<Object>();\n\tfor(Expression expression : this.expressions){\n\t\tparameters.addAll(expression.getParameters());\n\t}\n\treturn parameters;\n}", "path": "src\\com\\beckettit\\sqlbuilder\\impl\\BaseQueryImpl.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @see com.beckettit.sqlbuilder.Query#hasConditionOn(java.lang.String)\n */\n", "func_signal": "public boolean hasConditionOn(String property)", "code": "{\n\tboolean has = false;\n\tfor(Expression e : this.expressions){\n\t\tif(e.hasConditionOn(property)) has = true;\n\t}\n\treturn has;\n}", "path": "src\\com\\beckettit\\sqlbuilder\\impl\\BaseQueryImpl.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @see com.beckettit.sqlbuilder.Query#getCountSql()\n */\n", "func_signal": "public String getCountSql()", "code": "{\n\tString sql = getSql();\n\tint from = sql.toLowerCase().indexOf(\"from\");\n\tint orderBy = sql.toLowerCase().indexOf(\"order by\");\n\tint limit = sql.toLowerCase().indexOf(\"limit \");\n\tif(from >= 0){\n\t\tStringBuilder countSql = new StringBuilder(\"SELECT COUNT(1) FROM\");\n\t\tif(orderBy > from + 4){\n\t\t\tcountSql.append(sql.substring(from + 4, orderBy));\n\t\t}else if(limit > from + 4){\n\t\t\tcountSql.append(sql.substring(from + 4, limit));\n\t\t}\n\t\treturn countSql.toString();\n\t}else throw new RuntimeException(\"Could not parse out count sql from '\" + sql + \"'\");\n}", "path": "src\\com\\beckettit\\sqlbuilder\\impl\\BaseQueryImpl.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @param baseSql\n */\n", "func_signal": "public BaseQueryImpl(String baseSql)", "code": "{\n\tsuper();\n\tthis.baseSql = baseSql;\n\tthis.expressions = new ArrayList<Expression>();\n\tthis.orderClauses = new ArrayList<OrderClause>();\n\tthis.aliases = new HashMap<String, String>();\n\tregisterFactories();\n}", "path": "src\\com\\beckettit\\sqlbuilder\\impl\\BaseQueryImpl.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @see groovy.util.AbstractFactory#setParent(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic void setParent(FactoryBuilderSupport factoryBuilderSupport, Object parentNode, Object childNode)", "code": "{\n\tMap map = (Map)childNode;\n\tString name = (String)map.get(\"name\");\n\tQuery query = (Query)parentNode;\n\tif(\"maxResults\".equals(name)){\n\t\tquery.setMaxResults((Integer)map.get(\"value\"));\n\t}else if(\"firstResult\".equals(name)){\n\t\tquery.setFirstResult((Integer)map.get(\"value\"));\n\t}\n}", "path": "src\\com\\beckettit\\sqlbuilder\\builder\\NameValueBuilderFactory.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @see groovy.util.Factory#newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map)\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic Object newInstance(FactoryBuilderSupport factoryBuilderSupport, Object name, Object value, Map map)", "code": "{\n\tif(name instanceof String && value instanceof List){\n\t\tString operator = (String)name;\n\t\tList values = (List)value;\n\t\tif(\"eq\".equals(operator)){\n\t\t\treturn ExpressionFactory.eq((String)values.get(0), values.get(1));\n\t\t}else if(\"ne\".equals(operator)){\n\t\t\treturn ExpressionFactory.ne((String)values.get(0), values.get(1));\n\t\t}else if(\"gt\".equals(operator)){\n\t\t\treturn ExpressionFactory.gt((String)values.get(0), values.get(1));\n\t\t}else if(\"gte\".equals(operator)){\n\t\t\treturn ExpressionFactory.gte((String)values.get(0), values.get(1));\n\t\t}else if(\"lt\".equals(operator)){\n\t\t\treturn ExpressionFactory.lt((String)values.get(0), values.get(1));\n\t\t}else if(\"lte\".equals(operator)){\n\t\t\treturn ExpressionFactory.lte((String)values.get(0), values.get(1));\n\t\t}else if(\"inList\".equals(operator)){\n\t\t\treturn ExpressionFactory.in((String)values.get(0), (Collection)values.get(1));\n\t\t}else if(\"notInList\".equals(operator)){\n\t\t\treturn ExpressionFactory.notIn((String)values.get(0), (Collection)values.get(1));\n\t\t}else if(\"like\".equals(operator)){\n\t\t\treturn ExpressionFactory.like((String)values.get(0), values.get(1));\n\t\t}\n\t}\n\treturn null;\n}", "path": "src\\com\\beckettit\\sqlbuilder\\builder\\ExpressionBuilderFactory.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @see groovy.util.Factory#newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map)\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic Object newInstance(FactoryBuilderSupport factoryBuilderSupport, Object name, Object value, Map map)", "code": "{\n\tif(\"and\".equals(name)){\n\t\treturn ExpressionFactory.and();\n\t}else if(\"or\".equals(name)){\n\t\treturn ExpressionFactory.or();\n\t}\n\treturn null;\n}", "path": "src\\com\\beckettit\\sqlbuilder\\builder\\LogicalExpressionBuilderFactory.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @see com.beckettit.sqlbuilder.Query#clear()\n */\n", "func_signal": "public Query clear()", "code": "{\n\tthis.expressions.clear();\n\tthis.orderClauses.clear();\n\treturn this;\n}", "path": "src\\com\\beckettit\\sqlbuilder\\impl\\BaseQueryImpl.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @see com.beckettit.sqlbuilder.Expression#toSql()\n */\n", "func_signal": "public String toSql(Query query)", "code": "{\n\treturn query.getAlias(this.property) + \" \" + operator.toString() + \" (\" + StringUtils.join(CollectionUtils.collect(getParameters(), new Transformer(){\n\n\t\tpublic Object transform(Object arg0) {\n\t\t\treturn \"?\";\n\t\t}\n\t\t\n\t}),\",\") + \")\";\n}", "path": "src\\com\\beckettit\\sqlbuilder\\el\\InExpression.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @param property\n * @param operator\n * @param value\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic ComparisonExpression(String property, Operator operator, Object value)", "code": "{\n\tsuper();\n\tthis.property = property;\n\tthis.operator = operator;\n\tthis.parameters = new ArrayList<Object>();\n\tif(value instanceof Collection){\n\t\tthis.parameters.addAll((Collection)value);\n\t}else{\n\t\tthis.parameters.add(value);\n\t}\n}", "path": "src\\com\\beckettit\\sqlbuilder\\el\\ComparisonExpression.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @see com.beckettit.sqlbuilder.Query#addOrderClause(com.beckettit.sqlbuilder.OrderClause)\n */\n", "func_signal": "public Query addOrderClause(OrderClause orderClause)", "code": "{\n\tthis.orderClauses.add(orderClause);\n\treturn this;\n}", "path": "src\\com\\beckettit\\sqlbuilder\\impl\\BaseQueryImpl.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * @see groovy.util.AbstractFactory#setParent(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic void setParent(FactoryBuilderSupport factoryBuilderSupport, Object parentNode, Object childNode)", "code": "{\n\tMap map = (Map)childNode;\n\tQuery query = (Query)parentNode;\n\tfor(Object _key : map.keySet()){\n\t\tString key = (String)_key;\n\t\tquery.addAlias(key, (String)map.get(key));\n\t}\n}", "path": "src\\com\\beckettit\\sqlbuilder\\builder\\AliasesBuilderFactory.java", "repo_name": "reid24/SqlBuilder", "stars": 1, "license": "None", "language": "java", "size": 1224}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic void eSet(int featureID, Object newValue)", "code": "{\n    switch (featureID) {\n    case DIPackage.BENDPOINT__SOURCE_X:\n        setSourceX((Integer) newValue);\n        return;\n    case DIPackage.BENDPOINT__SOURCE_Y:\n        setSourceY((Integer) newValue);\n        return;\n    case DIPackage.BENDPOINT__TARGET_X:\n        setTargetX((Integer) newValue);\n        return;\n    case DIPackage.BENDPOINT__TARGET_Y:\n        setTargetY((Integer) newValue);\n        return;\n    }\n    super.eSet(featureID, newValue);\n}", "path": "org.eclipse.mdt.bpmn\\src\\org\\eclipse\\mdt\\bpmn\\di\\impl\\BendpointImpl.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * This returns the property descriptors for the adapted class.\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic List<IItemPropertyDescriptor> getPropertyDescriptors(Object object)", "code": "{\n    if (itemPropertyDescriptors == null) {\n        super.getPropertyDescriptors(object);\n\n        addDefaultPropertyDescriptor(object);\n    }\n    return itemPropertyDescriptors;\n}", "path": "org.eclipse.mdt.bpmn.edit\\src\\org\\eclipse\\mdt\\bpmn\\provider\\InclusiveGatewayItemProvider.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public void unsetSourceX()", "code": "{\n    int oldSourceX = sourceX;\n    boolean oldSourceXESet = sourceXESet;\n    sourceX = SOURCE_X_EDEFAULT;\n    sourceXESet = false;\n    if (eNotificationRequired())\n        eNotify(new ENotificationImpl(this, Notification.UNSET,\n                DIPackage.BENDPOINT__SOURCE_X, oldSourceX,\n                SOURCE_X_EDEFAULT, oldSourceXESet));\n}", "path": "org.eclipse.mdt.bpmn\\src\\org\\eclipse\\mdt\\bpmn\\di\\impl\\BendpointImpl.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * This adds a property descriptor for the Default feature.\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "protected void addDefaultPropertyDescriptor(Object object)", "code": "{\n    itemPropertyDescriptors\n            .add(createItemPropertyDescriptor(\n                    ((ComposeableAdapterFactory) adapterFactory)\n                            .getRootAdapterFactory(),\n                    getResourceLocator(),\n                    getString(\"_UI_InclusiveGateway_default_feature\"), //$NON-NLS-1$\n                    getString(\n                            \"_UI_PropertyDescriptor_description\", \"_UI_InclusiveGateway_default_feature\", \"_UI_InclusiveGateway_type\"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n                    BpmnPackage.eINSTANCE.getInclusiveGateway_Default(),\n                    true, false, false,\n                    ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));\n}", "path": "org.eclipse.mdt.bpmn.edit\\src\\org\\eclipse\\mdt\\bpmn\\provider\\InclusiveGatewayItemProvider.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public EList<MessageFlow> getMessageFlow()", "code": "{\n    if (messageFlow == null) {\n        messageFlow = new EObjectContainmentEList<MessageFlow>(\n                MessageFlow.class, this,\n                BpmnPackage.CONVERSATION__MESSAGE_FLOW);\n    }\n    return messageFlow;\n}", "path": "org.eclipse.mdt.bpmn\\src\\org\\eclipse\\mdt\\bpmn\\impl\\ConversationImpl.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * This handles model notifications by calling {@link #updateChildren} to update any cached\n * children and by creating a viewer notification, which it passes to {@link #fireNotifyChanged}.\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic void notifyChanged(Notification notification)", "code": "{\n    updateChildren(notification);\n\n    switch (notification.getFeatureID(InclusiveGateway.class)) {\n    case BpmnPackage.INCLUSIVE_GATEWAY__DEFAULT:\n        fireNotifyChanged(new ViewerNotification(notification, notification\n                .getNotifier(), false, true));\n        return;\n    }\n    super.notifyChanged(notification);\n}", "path": "org.eclipse.mdt.bpmn.edit\\src\\org\\eclipse\\mdt\\bpmn\\provider\\InclusiveGatewayItemProvider.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public void unsetTargetX()", "code": "{\n    int oldTargetX = targetX;\n    boolean oldTargetXESet = targetXESet;\n    targetX = TARGET_X_EDEFAULT;\n    targetXESet = false;\n    if (eNotificationRequired())\n        eNotify(new ENotificationImpl(this, Notification.UNSET,\n                DIPackage.BENDPOINT__TARGET_X, oldTargetX,\n                TARGET_X_EDEFAULT, oldTargetXESet));\n}", "path": "org.eclipse.mdt.bpmn\\src\\org\\eclipse\\mdt\\bpmn\\di\\impl\\BendpointImpl.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public FeatureMap getArtifactGroup()", "code": "{\n    if (artifactGroup == null) {\n        artifactGroup = new BasicFeatureMap(this,\n                BpmnPackage.CONVERSATION__ARTIFACT_GROUP);\n    }\n    return artifactGroup;\n}", "path": "org.eclipse.mdt.bpmn\\src\\org\\eclipse\\mdt\\bpmn\\impl\\ConversationImpl.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic boolean eIsSet(int featureID)", "code": "{\n    switch (featureID) {\n    case BpmnPackage.CONVERSATION__CONVERSATION_NODE_GROUP:\n        return conversationNodeGroup != null\n                && !conversationNodeGroup.isEmpty();\n    case BpmnPackage.CONVERSATION__CONVERSATION_NODE:\n        return !getConversationNode().isEmpty();\n    case BpmnPackage.CONVERSATION__PARTICIPANT:\n        return participant != null && !participant.isEmpty();\n    case BpmnPackage.CONVERSATION__ARTIFACT_GROUP:\n        return artifactGroup != null && !artifactGroup.isEmpty();\n    case BpmnPackage.CONVERSATION__ARTIFACT:\n        return !getArtifact().isEmpty();\n    case BpmnPackage.CONVERSATION__MESSAGE_FLOW:\n        return messageFlow != null && !messageFlow.isEmpty();\n    case BpmnPackage.CONVERSATION__MESSAGE_FLOW_REF:\n        return messageFlowRef != null && !messageFlowRef.isEmpty();\n    case BpmnPackage.CONVERSATION__CORRELATION_KEY:\n        return correlationKey != null && !correlationKey.isEmpty();\n    }\n    return super.eIsSet(featureID);\n}", "path": "org.eclipse.mdt.bpmn\\src\\org\\eclipse\\mdt\\bpmn\\impl\\ConversationImpl.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    if (eIsProxy())\n        return super.toString();\n\n    StringBuffer result = new StringBuffer(super.toString());\n    result.append(\" (sourceX: \"); //$NON-NLS-1$\n    if (sourceXESet)\n        result.append(sourceX);\n    else\n        result.append(\"<unset>\"); //$NON-NLS-1$\n    result.append(\", sourceY: \"); //$NON-NLS-1$\n    if (sourceYESet)\n        result.append(sourceY);\n    else\n        result.append(\"<unset>\"); //$NON-NLS-1$\n    result.append(\", targetX: \"); //$NON-NLS-1$\n    if (targetXESet)\n        result.append(targetX);\n    else\n        result.append(\"<unset>\"); //$NON-NLS-1$\n    result.append(\", targetY: \"); //$NON-NLS-1$\n    if (targetYESet)\n        result.append(targetY);\n    else\n        result.append(\"<unset>\"); //$NON-NLS-1$\n    result.append(')');\n    return result.toString();\n}", "path": "org.eclipse.mdt.bpmn\\src\\org\\eclipse\\mdt\\bpmn\\di\\impl\\BendpointImpl.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic void eUnset(int featureID)", "code": "{\n    switch (featureID) {\n    case BpmnPackage.CONVERSATION__CONVERSATION_NODE_GROUP:\n        getConversationNodeGroup().clear();\n        return;\n    case BpmnPackage.CONVERSATION__CONVERSATION_NODE:\n        getConversationNode().clear();\n        return;\n    case BpmnPackage.CONVERSATION__PARTICIPANT:\n        getParticipant().clear();\n        return;\n    case BpmnPackage.CONVERSATION__ARTIFACT_GROUP:\n        getArtifactGroup().clear();\n        return;\n    case BpmnPackage.CONVERSATION__ARTIFACT:\n        getArtifact().clear();\n        return;\n    case BpmnPackage.CONVERSATION__MESSAGE_FLOW:\n        getMessageFlow().clear();\n        return;\n    case BpmnPackage.CONVERSATION__MESSAGE_FLOW_REF:\n        getMessageFlowRef().clear();\n        return;\n    case BpmnPackage.CONVERSATION__CORRELATION_KEY:\n        getCorrelationKey().clear();\n        return;\n    }\n    super.eUnset(featureID);\n}", "path": "org.eclipse.mdt.bpmn\\src\\org\\eclipse\\mdt\\bpmn\\impl\\ConversationImpl.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public EList<Participant> getParticipant()", "code": "{\n    if (participant == null) {\n        participant = new EObjectContainmentEList<Participant>(\n                Participant.class, this,\n                BpmnPackage.CONVERSATION__PARTICIPANT);\n    }\n    return participant;\n}", "path": "org.eclipse.mdt.bpmn\\src\\org\\eclipse\\mdt\\bpmn\\impl\\ConversationImpl.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public FeatureMap getConversationNodeGroup()", "code": "{\n    if (conversationNodeGroup == null) {\n        conversationNodeGroup = new BasicFeatureMap(this,\n                BpmnPackage.CONVERSATION__CONVERSATION_NODE_GROUP);\n    }\n    return conversationNodeGroup;\n}", "path": "org.eclipse.mdt.bpmn\\src\\org\\eclipse\\mdt\\bpmn\\impl\\ConversationImpl.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * This returns the label text for {@link org.eclipse.emf.edit.command.CreateChildCommand}.\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic String getCreateChildText(Object owner, Object feature,\n        Object child, Collection<?> selection)", "code": "{\n    Object childFeature = feature;\n    Object childObject = child;\n\n    if (childFeature instanceof EStructuralFeature\n            && FeatureMapUtil\n                    .isFeatureMap((EStructuralFeature) childFeature)) {\n        FeatureMap.Entry entry = (FeatureMap.Entry) childObject;\n        childFeature = entry.getEStructuralFeature();\n        childObject = entry.getValue();\n    }\n\n    boolean qualify = childFeature == DIPackage.Literals.DOCUMENT_ROOT__CONNECTOR\n            || childFeature == DIPackage.Literals.DOCUMENT_ROOT__VIEW\n            || childFeature == DIPackage.Literals.DOCUMENT_ROOT__DIAGRAM\n            || childFeature == DIPackage.Literals.DOCUMENT_ROOT__NODE;\n\n    if (qualify) {\n        return getString(\"_UI_CreateChild_text2\", //$NON-NLS-1$\n                new Object[] { getTypeText(childObject),\n                        getFeatureText(childFeature), getTypeText(owner) });\n    }\n    return super.getCreateChildText(owner, feature, child, selection);\n}", "path": "org.eclipse.mdt.bpmn.edit\\src\\org\\eclipse\\mdt\\bpmn\\provider\\InclusiveGatewayItemProvider.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public EList<CorrelationKey> getCorrelationKey()", "code": "{\n    if (correlationKey == null) {\n        correlationKey = new EObjectContainmentEList<CorrelationKey>(\n                CorrelationKey.class, this,\n                BpmnPackage.CONVERSATION__CORRELATION_KEY);\n    }\n    return correlationKey;\n}", "path": "org.eclipse.mdt.bpmn\\src\\org\\eclipse\\mdt\\bpmn\\impl\\ConversationImpl.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public void unsetTargetY()", "code": "{\n    int oldTargetY = targetY;\n    boolean oldTargetYESet = targetYESet;\n    targetY = TARGET_Y_EDEFAULT;\n    targetYESet = false;\n    if (eNotificationRequired())\n        eNotify(new ENotificationImpl(this, Notification.UNSET,\n                DIPackage.BENDPOINT__TARGET_Y, oldTargetY,\n                TARGET_Y_EDEFAULT, oldTargetYESet));\n}", "path": "org.eclipse.mdt.bpmn\\src\\org\\eclipse\\mdt\\bpmn\\di\\impl\\BendpointImpl.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public EList<Artifact> getArtifact()", "code": "{\n    return getArtifactGroup().list(\n            BpmnPackage.eINSTANCE.getConversation_Artifact());\n}", "path": "org.eclipse.mdt.bpmn\\src\\org\\eclipse\\mdt\\bpmn\\impl\\ConversationImpl.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic void eUnset(int featureID)", "code": "{\n    switch (featureID) {\n    case DIPackage.BENDPOINT__SOURCE_X:\n        unsetSourceX();\n        return;\n    case DIPackage.BENDPOINT__SOURCE_Y:\n        unsetSourceY();\n        return;\n    case DIPackage.BENDPOINT__TARGET_X:\n        unsetTargetX();\n        return;\n    case DIPackage.BENDPOINT__TARGET_Y:\n        unsetTargetY();\n        return;\n    }\n    super.eUnset(featureID);\n}", "path": "org.eclipse.mdt.bpmn\\src\\org\\eclipse\\mdt\\bpmn\\di\\impl\\BendpointImpl.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public void setTargetY(int newTargetY)", "code": "{\n    int oldTargetY = targetY;\n    targetY = newTargetY;\n    boolean oldTargetYESet = targetYESet;\n    targetYESet = true;\n    if (eNotificationRequired())\n        eNotify(new ENotificationImpl(this, Notification.SET,\n                DIPackage.BENDPOINT__TARGET_Y, oldTargetY, targetY,\n                !oldTargetYESet));\n}", "path": "org.eclipse.mdt.bpmn\\src\\org\\eclipse\\mdt\\bpmn\\di\\impl\\BendpointImpl.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "/**\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    if (eIsProxy())\n        return super.toString();\n\n    StringBuffer result = new StringBuffer(super.toString());\n    result.append(\" (conversationNodeGroup: \"); //$NON-NLS-1$\n    result.append(conversationNodeGroup);\n    result.append(\", artifactGroup: \"); //$NON-NLS-1$\n    result.append(artifactGroup);\n    result.append(\", messageFlowRef: \"); //$NON-NLS-1$\n    result.append(messageFlowRef);\n    result.append(')');\n    return result.toString();\n}", "path": "org.eclipse.mdt.bpmn\\src\\org\\eclipse\\mdt\\bpmn\\impl\\ConversationImpl.java", "repo_name": "Everteam-Software/bpmn2", "stars": 1, "license": "None", "language": "java", "size": 1800}
{"docstring": "//this method is deliberately unsynchronized so 2 threads caching the same class can overwrite the other, thus avoiding competition for the map\n", "func_signal": "private Map<String, String> buildPropertiesAndLabels(Class<? extends Object> aClass)", "code": "{\n    Map<String, String> propertyLabels = new LinkedHashMap<String, String>();   //MUST preserve order\n\n    ResourceBundle labels;\n    try {\n        labels = PropertyResourceBundle.getBundle(aClass.getName());\n    } catch (MissingResourceException mre) {\n        labels = null;\n    }\n\n    //TODO replace with Bean introspector??\n    final Enumeration<String> keys = labels.getKeys();\n    while (keys.hasMoreElements()){\n        String prop = keys.nextElement();\n\n\n        //check for getters and cache them as a property\n        if (getterExists(prop, aClass)) {\n\n            //store the binding only if there is a valid getter\n            if (null != labels) {\n                //watch for column hides (empty property)\n                String value = labels.getString(prop);\n                if (null != value && !\"\".equals(value.trim()))\n                    propertyLabels.put(prop, value);\n            } else\n                //if no binding at all, then use the property name as its label\n                propertyLabels.put(prop, prop);\n        }\n    }\n\n    return propertyLabels;\n}", "path": "src\\com\\wideplay\\warp\\internal\\ClassReflectionCacheImpl.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "/**\n *\n * A utility method to help work with topics in the conversation\n */\n", "func_signal": "public static Object retrieveEventTopicAndClear(Injector injector, String topicParam)", "code": "{\n    Object topic = null;\n\n    final InternalConversation conversation = injector.getInstance(InternalConversation.class);\n    if (null != topicParam) {\n        if (!TextTools.isEmptyString(topicParam))\n            topic = conversation.recall(Integer.parseInt(topicParam));\n    }\n\n    //clear out internal monologue!!!\n    conversation.forgetAll();\n\n    return topic;\n}", "path": "src\\com\\wideplay\\warp\\internal\\conversation\\ConversationSupport.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "//builds a component handler for any node having w: prefix, failing which it is treated as a text node\n", "func_signal": "private ComponentHandler buildComponentHandler(Node node)", "code": "{\n    boolean isRawText = false;\n\n    //lookup the component name (we only worry about components marked with warp attribs)\n    String componentName = null;\n\n    //only element nodes (i.e. tags) can be warp-components\n    if (Node.ELEMENT_NODE == node.getNodeType())\n        componentName = node.valueOf(\"@w:component\");\n\n\n    if (log.isTraceEnabled())\n        log.trace(String.format(\"Discovered node %s of type: %s\", componentName, node));\n\n\n    //we treat text and cdata nodes as RawText type\n    if (Node.TEXT_NODE == node.getNodeType() || Node.CDATA_SECTION_NODE == node.getNodeType() || Node.COMMENT_NODE == node.getNodeType()\n\n            //there was no w:component attribute so we treat this ELEMENT as a raw text component\n            || (Node.ELEMENT_NODE == node.getNodeType() &&\n            (null == componentName || \"\".equals(componentName.trim())) )   ) {\n\n        log.debug(\"Text component discovered, building as RawText Component...\");\n        componentName = ComponentRegistry.TEXT_COMPONENT_NAME;\n        isRawText = true;\n\n    } else if (Node.ELEMENT_NODE != node.getNodeType() &&\n            (null == componentName || \"\".equals(componentName.trim())) ) //not an element, text or cdata node, we dont care about it\n        return null;\n\n\n\n\n    //build a handler for either a Renderable or TemplateStyle component\n    if (registry.isRenderableStyle(componentName))\n        return buildRenderableComponentHandler(componentName, node, isRawText);\n    else\n        return buildTemplateStyleComponentHandler(componentName, node);\n}", "path": "src\\com\\wideplay\\warp\\internal\\componentry\\DomComponentHandlerBuilder.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "//TODO replace with a proper introspector or library\n", "func_signal": "public static boolean getterExists(String prop, Class<?> aClass)", "code": "{\n    //capitalize first char\n    prop = prop.substring(0, 1).toUpperCase() + prop.substring(1);\n\n\n    //first look for a no-arg method named properly\n    final Method method;\n    try {\n        method = aClass.getMethod(String.format(\"get%s\", prop));\n    } catch (NoSuchMethodException e) {\n        return false;\n    }\n\n\n    return null != method && void.class != method.getReturnType();\n\n}", "path": "src\\com\\wideplay\\warp\\util\\reflect\\ReflectUtils.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "//builds a component handler tree from an xhtml document\n", "func_signal": "public ComponentHandler build(Document document)", "code": "{\n    Element rootNode = document.getRootElement();\n\n    //validate that this is an html template\n    if (null == rootNode || !\"html\".equalsIgnoreCase(rootNode.getName()))\n        throw new WarpConfigurationException(\"Warp can only handle html templates--no html root node was found!\");\n\n    //frame is generally built as the top level node\n    return buildComponentHandler(rootNode);\n}", "path": "src\\com\\wideplay\\warp\\internal\\componentry\\DomComponentHandlerBuilder.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "/**\n * An event handler for events published as @NextPage\n *\n * @return Returns the next page to send the user to,\n * which happens to be called \"Next\"\n */\n", "func_signal": "@OnEvent\n@NextPage\npublic Next goToNextEventHandler()", "code": "{\n    //set counter on next page\n    next.setNumber(50);\n\n    //redirect to 'next' page (unless overriden by another handler-which it's not =)\n    return next;\n}", "path": "test\\com\\wideplay\\warp\\internal\\pages\\PCRBTestPage.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "//builds arbitrary custom attributes that are meant to be injected into user-defined non-Renderable @Component objects\n", "func_signal": "private Map<String, Object> buildCustomAttributes(Element element)", "code": "{\n    Map<String, Object> attribsContainer = new LinkedHashMap<String, Object>();\n    Map<String, Object> attribs = new LinkedHashMap<String, Object>();\n\n    //walk attributes and stash them (so long as they're not warp components)\n    for (Object object : element.attributes()) {\n        Attribute attribute = (Attribute)object;\n\n        //store only non-w: attribs\n        if (!isWarpAttribute(attribute) && !attribute.getName().equals(\"component\")) {\n            PropertyDescriptor descriptor = buildPropertyDescriptor(attribute);\n\n            //store the descriptor by property name\n            attribs.put(descriptor.getName(), descriptor);\n        }\n    }\n\n    //the viewport component expects attribs as a map of propertydescriptors inside the arbitrary attribute map\n    attribsContainer.put(RawText.WARP_RAW_TEXT_ATTR_MAP, attribs);\n\n    return attribsContainer;\n}", "path": "src\\com\\wideplay\\warp\\internal\\componentry\\DomComponentHandlerBuilder.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "//just some tests to see how guice behaves\n", "func_signal": "@Test\npublic final void testInjectionsWithModule()", "code": "{\n    Injector injector = Guice.createInjector(new AbstractModule() {\n\n        protected void configure() {\n            \n        }\n    });\n    assert null == injector.getBinding(Key.get(WarpModule.class));\n}", "path": "test\\com\\wideplay\\warp\\internal\\GuiceTest.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "//converts a qualified annotation class name to @Blah\n", "func_signal": "public static String extractAnnotationSimpleName(Class<? extends Annotation> clazz)", "code": "{\n    String simpleName = clazz.getName().substring(clazz.getName().lastIndexOf('.') + 1);\n\n    return \"@\" + simpleName;\n}", "path": "src\\com\\wideplay\\warp\\util\\reflect\\ReflectUtils.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "//(doesnt work and not really relevant anymore)\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n   public void testGuiceClassToProxyClassBinding()", "code": "{\n       //create proxy for MySuper\n       Enhancer enhancer = new Enhancer();\n       enhancer.setSuperclass(MySuper.class);\n       enhancer.setInterfaces(new Class[] { PageIdentity.class });\n       enhancer.setCallbackType(MethodInterceptor.class);\n\n       final Class<?> proxyClass = enhancer.createClass();\n\n       Injector injector = Guice.createInjector(new AbstractModule() {\n\n           protected void configure() {\n               bind(MySuper.class).to((Class<? extends MySuper>) proxyClass);\n           }\n       });\n\n       //test that it returns the normal thing for unintercepted methods\n       MySuper mySuper = injector.getInstance(MySuper.class);\n       String something = mySuper.getSomething();\n\n       //modify something:\n       Factory factory = (Factory)mySuper;\n       factory.setCallback(1, new MethodInterceptor() {\n\n           public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n               if (PageIdentity.class.getDeclaredMethod(PageIdentity.WARP_PAGE_ID_GETTER).equals(method))\n                   return A_PROXY_SOMETHING;\n\n               //otherwise proceed\n               return methodProxy.invokeSuper(object, args);\n           }\n       });\n\n       assertEquals(something, SOMETHING);\n       System.out.println(something);\n\n       //make sure getBuffer and other stuff is not overridden\n       assert !ANOTHER_THING_ENTIRELY.equals(injector.getInstance(MySuper.class).toString()) : \"proxy was not supposed to intercept all methods but it did =(\";\n       Object my = injector.getInstance(MySuper.class);\n\n       //assert the right interface is added to proxy\n       assert my instanceof PageIdentity : \"object was not proxied with the expected interface PageIdentity\";\n       PageIdentity myPageIdentity = (PageIdentity)my;\n\n       //assert that the interface method is intercepted properly\n       assert A_PROXY_SOMETHING.equals(myPageIdentity.__warpPageIdentity()) : \"proxy did not return the expected value for the intercepted method\";\n\n       assert null != ((MySuper)my).arbitrary : \"proxy was not injected as expected by guice\";\n   }", "path": "test\\com\\wideplay\\warp\\internal\\pages\\PageClassReflectionBuilderTest.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "//returns the first constructor with the matching annotation or null (does not search up the class hierarchy)\n", "func_signal": "public static <T> Constructor<T> findDeclaredConstructorWithAnnotation(Class<T> base, Class<? extends Annotation> annotation)", "code": "{\n    for (Constructor<?> constructor : base.getDeclaredConstructors())\n        if (constructor.isAnnotationPresent(annotation))\n            return (Constructor<T>) constructor;\n\n    return null;\n}", "path": "src\\com\\wideplay\\warp\\util\\reflect\\ReflectUtils.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "//builds text that can be output from a RawText component specific to the given node\n", "func_signal": "private String buildRawText(Node node)", "code": "{\n    if (Node.COMMENT_NODE == node.getNodeType()\n        || Node.CDATA_SECTION_NODE == node.getNodeType())\n        return node.asXML();    //comments and cdata nodes cant have children\n\n    //elements have their own child text nodes, so return nothing as their body\n    if (Node.ELEMENT_NODE == node.getNodeType())\n        return \"\";\n\n    return node.getText();\n}", "path": "src\\com\\wideplay\\warp\\internal\\componentry\\DomComponentHandlerBuilder.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "//builds w: prefixed attributes into a property-injection map\n", "func_signal": "private Map<String, PropertyDescriptor> buildPropertyValues(Node node, boolean isRawText)", "code": "{\n    Map<String, PropertyDescriptor> propertyValueExpressions = new LinkedHashMap<String, PropertyDescriptor>();\n\n    if (!isRawText) {\n        Element element = (Element)node;\n        for (Object object : element.attributes()) {\n            Attribute attribute = (Attribute) object;\n\n            //store only w: attribs that are NOT component ids\n            if (isWarpAttribute(attribute)) {\n                PropertyDescriptor descriptor = buildPropertyDescriptor(attribute);\n\n                //store the descriptor by property name\n                propertyValueExpressions.put(descriptor.getName(), descriptor);\n            }\n        }\n    }\n\n    return propertyValueExpressions;\n}", "path": "src\\com\\wideplay\\warp\\internal\\componentry\\DomComponentHandlerBuilder.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "//just some tests to see how guice behaves\n", "func_signal": "@Test\npublic final void testInjections()", "code": "{\n    Injector injector = Guice.createInjector();\n\n    //on a java.lang\n    Object o = injector.getInstance(String.class);\n\n    assert o instanceof String;\n    System.out.println(MessageFormat.format(\"[{0}]\", o));\n}", "path": "test\\com\\wideplay\\warp\\internal\\GuiceTest.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "//builds an n-nary search tree of maps that can be searched for URI templates by the UriMatcher class\n", "func_signal": "public void buildAndStore(String uri, PageHandler pageHandler, Map<String, Object> pagesByUriTemplate)", "code": "{\n    //chew up leading '/'\n    if ('/' == uri.charAt(0))\n        uri = uri.substring(1);\n    \n    String[] parts = uri.split(\"[/]\");\n\n    Map<String, Object> pages = pagesByUriTemplate;\n\n    //skip the last element as it is the template parameter name\n    for (int i = 0; i < parts.length - 1; i++) {\n        String part = parts[i];\n\n        //last element store the page handler\n        if (i == parts.length - 2) {\n            pages.put(part, pageHandler);\n        } else {\n            Map<String, Object> tempPages = new HashMap<String, Object>();\n            pages.put(part, tempPages);\n            pages = tempPages;\n        }\n    }\n}", "path": "src\\com\\wideplay\\warp\\internal\\pages\\UriMatchTreeBuilder.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "/**\n * An event handler for events published as @NextPage\n *\n * @return Returns the next page to send the user to,\n * which happens to be called \"Next\"\n */\n", "func_signal": "@OnEvent @NextPage\npublic Next goToNextEventHandler()", "code": "{\n    //set counter on next page (should force instantiation of Next)\n    next.setNumber(50);\n    \n    //redirect to 'next' page (unless overriden by another handler-which it's not =)\n    return next;\n}", "path": "src\\com\\wideplay\\warp\\example\\PageInjectDemo.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "//builds arbitrary attributes (random props that are stuck on to a component--really only for RawText components)\n", "func_signal": "private Map<String, Object> buildArbitraryAttributes(Node node)", "code": "{\n    Map<String, Object> attribs = new LinkedHashMap<String, Object>();\n\n    Map<String, PropertyDescriptor> attribAsProperties = new LinkedHashMap<String, PropertyDescriptor>();\n\n     //text components have a special property we assign called warpRawText\n    attribs.put(RawText.WARP_RAW_TEXT_PROP_TOKENS, TextTools.tokenize(buildRawText(node)));\n\n    //text components that are elements have a special property for <start> and <end> tags\n    if (Node.ELEMENT_NODE == node.getNodeType()) {\n        attribs.put(RawText.WARP_RAW_TEXT_PROP_TAG, node.getName());\n\n        //text components that are elements have a special property that represents their dom attributes\n        Element element = (Element)node;\n        List<String> elementAttributes = new ArrayList<String>();\n        for (Object object : element.attributes()) {\n            Attribute attribute = (Attribute)object;\n\n            //do not add warp attribs\n            if (WARP_PREFIX.equals(attribute.getNamespacePrefix()) ||\n                    WARP_NAMESPACE_URI.equals(attribute.getNamespaceURI()))\n                continue;\n\n            //store attributes in a flat list\n            elementAttributes.add(attribute.getName());\n            elementAttributes.add(attribute.getValue());\n            attribAsProperties.put(attribute.getName(), buildPropertyDescriptor(attribute));\n        }\n\n        attribs.put(RawText.WARP_RAW_TEXT_PROP_ATTRS, elementAttributes.toArray());\n        attribs.put(RawText.WARP_RAW_TEXT_ATTR_MAP, attribAsProperties);\n    }\n\n    return attribs;\n}", "path": "src\\com\\wideplay\\warp\\internal\\componentry\\DomComponentHandlerBuilder.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "//just some tests to see how guice behaves\n", "func_signal": "@Test\npublic final void testWideningScopeInjection()", "code": "{\n    Injector injector = Guice.createInjector(new AbstractModule() {\n\n        protected void configure() {\n\n        }\n    });\n\n    MyWiderScopeClass myWiderScopeClass = injector.getInstance(MyWiderScopeClass.class);\n\n    assert myWiderScopeClass == injector.getInstance(MyWiderScopeClass.class) : \"singleton violated\";\n\n    assert myWiderScopeClass.myClass == injector.getInstance(MyWiderScopeClass.class).myClass :\n           \"singleton's down-scoped instance was different\";\n}", "path": "test\\com\\wideplay\\warp\\internal\\GuiceTest.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "//just some tests to see how guice behaves\n", "func_signal": "@Test\npublic final void testTypelessProvider()", "code": "{\n    Injector injector = Guice.createInjector(new AbstractModule() {\n\n        @SuppressWarnings(\"unchecked\")\n        protected void configure() {\n            bind(GuiceTest.class).toProvider(new Provider() {\n                public Object get() {\n                    return \"hi\";\n                }\n            });\n        }\n    });\n\n    injector.getInstance(GuiceTest.class);\n}", "path": "test\\com\\wideplay\\warp\\internal\\GuiceTest.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "//use this method to output as many sets of attribs as u need\n", "func_signal": "public void elementWithAttrs(String name, Object[] nameValuePairs)", "code": "{\n    writer.append('<');\n    writer.append(name);\n    attributes(nameValuePairs);\n    writer.append('>');\n}", "path": "src\\com\\wideplay\\warp\\internal\\pages\\SimpleHtmlWriter.java", "repo_name": "tbaum/warp-core", "stars": 1, "license": "None", "language": "java", "size": 6085}
{"docstring": "/**\n * Create (if necessary) and launch the recent apps dialog\n */\n", "func_signal": "private void showRecentAppsDialog()", "code": "{\n    if (mRecentAppsDialog == null) {\n        mRecentAppsDialog = new RecentApplicationsDialog(mContext);\n    }\n    mRecentAppsDialog.show();\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public boolean isAppSwitchKeyTqTiLwLi(int keycode)", "code": "{\n    return keycode == KeyEvent.KEYCODE_HOME\n            || keycode == KeyEvent.KEYCODE_ENDCALL;\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void screenTurnedOn()", "code": "{\n    EventLog.writeEvent(70000, 1);\n    mScreenOn = true;\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void init(Context context, IWindowManager windowManager,\n        LocalPowerManager powerManager)", "code": "{\n    mContext = context;\n    mWindowManager = windowManager;\n    mPowerManager = powerManager;\n    mHandler = new Handler();\n    mShortcutManager = new ShortcutManager(context, mHandler);\n    mShortcutManager.observe();\n    mHomeIntent =  new Intent(Intent.ACTION_MAIN, null);\n    mHomeIntent.addCategory(Intent.CATEGORY_HOME);\n    mHomeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK\n            | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);\n    PowerManager pm = (PowerManager)context.getSystemService(Context.POWER_SERVICE);\n    mBroadcastWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,\n            \"MidWindowManager.mBroadcastWakeLock\");\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public int subWindowTypeToLayerLw(int type)", "code": "{\n    switch (type) {\n    case TYPE_APPLICATION_PANEL:\n        return APPLICATION_PANEL_SUBLAYER;\n    case TYPE_APPLICATION_MEDIA:\n        return APPLICATION_MEDIA_SUBLAYER;\n    case TYPE_APPLICATION_MEDIA_OVERLAY:\n        return APPLICATION_MEDIA_OVERLAY_SUBLAYER;\n    case TYPE_APPLICATION_SUB_PANEL:\n        return APPLICATION_SUB_PANEL_SUBLAYER;\n    }\n    Log.e(TAG, \"Unknown sub-window type: \" + type);\n    return 0;\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public boolean finishAnimationLw()", "code": "{\n    if (mStatusBar != null) {\n        if (mForceStatusBar) {\n            mStatusBar.showLw(true);\n        } else if (mTopFullscreenOpaqueWindowState != null) {\n           WindowManager.LayoutParams lp =\n               mTopFullscreenOpaqueWindowState.getAttrs();\n           boolean hideStatusBar =\n               (lp.flags & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0;\n           if (hideStatusBar) {\n               mStatusBar.hideLw(true);\n           } else {\n               mStatusBar.showLw(true);\n           }\n       }\n    }\n   return false;\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * Given the current state of the world, should this key wake up the device?\n */\n", "func_signal": "protected boolean isWakeKeyTq(RawInputEvent event)", "code": "{\n    // There are not key maps for trackball devices, but we'd still\n    // like to have pressing it wake the device up, so force it here.\n    int keycode = event.keycode;\n    int flags = event.flags;\n    if (keycode == RawInputEvent.BTN_MOUSE) {\n        flags |= WindowManagerPolicy.FLAG_WAKE;\n    }\n    return (flags\n            & (WindowManagerPolicy.FLAG_WAKE | WindowManagerPolicy.FLAG_WAKE_DROPPED)) != 0;\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public int windowTypeToLayerLw(int type)", "code": "{\n    if (type >= FIRST_APPLICATION_WINDOW && type <= LAST_APPLICATION_WINDOW) {\n        return APPLICATION_LAYER;\n    }\n    switch (type) {\n    case TYPE_APPLICATION_PANEL:\n        return APPLICATION_LAYER;\n    case TYPE_APPLICATION_SUB_PANEL:\n        return APPLICATION_LAYER;\n    case TYPE_STATUS_BAR:\n        return STATUS_BAR_LAYER;\n    case TYPE_STATUS_BAR_PANEL:\n        return STATUS_BAR_PANEL_LAYER;\n    case TYPE_SEARCH_BAR:\n        return SEARCH_BAR_LAYER;\n    case TYPE_PHONE:\n        return PHONE_LAYER;\n    case TYPE_KEYGUARD:\n        return KEYGUARD_LAYER;\n    case TYPE_KEYGUARD_DIALOG:\n        return KEYGUARD_DIALOG_LAYER;\n    case TYPE_SYSTEM_ALERT:\n        return SYSTEM_ALERT_LAYER;\n    case TYPE_SYSTEM_ERROR:\n        return SYSTEM_ERROR_LAYER;\n    case TYPE_SYSTEM_OVERLAY:\n        return SYSTEM_OVERLAY_LAYER;\n    case TYPE_PRIORITY_PHONE:\n        return PRIORITY_PHONE_LAYER;\n    case TYPE_TOAST:\n        return TOAST_LAYER;\n    }\n    Log.e(TAG, \"Unknown window type: \" + type);\n    return APPLICATION_LAYER;\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void beginLayoutLw(int displayWidth, int displayHeight)", "code": "{\n    mW = displayWidth;\n    mH = displayHeight;\n    mCurLeft = 0;\n    mCurTop = 0;\n    mCurRight = displayWidth;\n    mCurBottom = displayHeight;\n\n    // decide where the status bar goes ahead of time\n    if (mStatusBar != null) {\n        final Rect pf = mTmpParentFrame;\n        final Rect df = mTmpDisplayFrame;\n        final Rect vf = mTmpVisibleFrame;\n        pf.left = df.left = vf.left = 0;\n        pf.top = df.top = vf.top = 0;\n        pf.right = df.right = vf.right = displayWidth;\n        pf.bottom = df.bottom = vf.bottom = displayHeight;\n        \n        mStatusBar.computeFrameLw(pf, df, vf, vf);\n        mCurTop = mStatusBar.getFrameLw().bottom;\n    }\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public boolean interceptKeyTi(WindowState win, int code, int metaKeys, boolean down, \n        int repeatCount)", "code": "{\n    if (false) {\n        Log.d(TAG, \"interceptKeyTi code=\" + code + \" down=\" + down + \" repeatCount=\"\n                + repeatCount);\n    }\n\n    // Clear a pending HOME longpress if the user releases Home\n    // TODO: This could probably be inside the next bit of logic, but that code\n    // turned out to be a bit fragile so I'm doing it here explicitly, for now.\n    if ((code == KeyEvent.KEYCODE_HOME) && !down) {\n        mHandler.removeCallbacks(mHomeLongPress);\n    }\n\n    // If the HOME button is currently being held, then we do special\n    // chording with it.\n    if (mHomePressed) {\n        \n        // If we have released the home key, and didn't do anything else\n        // while it was pressed, then it is time to go home!\n        if (code == KeyEvent.KEYCODE_HOME) {\n            if (!down) {\n                mHomePressed = false;\n                launchHomeFromHotKey();\n            }\n        }\n        \n        return true;\n    }\n        \n    // First we always handle the home key here, so applications\n    // can never break it, although if keyguard is on, we do let\n    // it handle it, because that gives us the correct 5 second\n    // timeout.\n    if (code == KeyEvent.KEYCODE_HOME) {\n\n        // If a system window has focus, then it doesn't make sense\n        // right now to interact with applications.\n        WindowManager.LayoutParams attrs = win != null ? win.getAttrs() : null;\n        if (attrs != null) {\n            int type = attrs.type;\n            if (type >= WindowManager.LayoutParams.FIRST_SYSTEM_WINDOW\n                    && type <= WindowManager.LayoutParams.LAST_SYSTEM_WINDOW) {\n                // Only do this once, so home-key-longpress doesn't close itself\n                if (repeatCount == 0 && down) {\n            \t\tsendCloseSystemWindows();\n                }\n                return false;\n            }\n        }\n        \n        if (down && repeatCount == 0) {\n            mHandler.postDelayed(mHomeLongPress, ViewConfiguration.getGlobalActionKeyTimeout());\n            mHomePressed = true;\n        }\n        return true;\n    } else if (code == KeyEvent.KEYCODE_MENU) {\n        // Hijack modified menu keys for debugging features\n        final int chordBug = KeyEvent.META_SHIFT_ON;\n        final int chordProcess = KeyEvent.META_ALT_ON;\n       \n        if (down && repeatCount == 0) {\n            if ((metaKeys & chordBug) == chordBug) {\n                Intent intent = new Intent(Intent.ACTION_BUG_REPORT);\n                mContext.sendOrderedBroadcast(intent, null);\n                return true;\n            } else if ((metaKeys & chordProcess) == chordProcess) {\n                Intent service = new Intent();\n                service.setClassName(mContext, \"com.android.server.LoadAverageService\");\n                ContentResolver res = mContext.getContentResolver();\n                boolean shown = Settings.System.getInt(\n                        res, Settings.System.SHOW_PROCESSES, 0) != 0;\n                if (!shown) {\n                    mContext.startService(service);\n                } else {\n                    mContext.stopService(service);\n                }\n                Settings.System.putInt(\n                        res, Settings.System.SHOW_PROCESSES, shown ? 0 : 1);\n                return true;\n            }\n        }\n    } else if (code == KeyEvent.KEYCODE_NOTIFICATION) {\n        if (down) {\n            // this key doesn't exist on current hardware, but if a device\n            // didn't have a touchscreen, it would want one of these to open\n            // the status bar.\n            IStatusBar sbs = IStatusBar.Stub.asInterface(ServiceManager.getService(\"statusbar\"));\n            if (sbs != null) {\n                try {\n                    sbs.toggle();\n                } catch (RemoteException e) {\n                    // we're screwed anyway, since it's in this process\n                    throw new RuntimeException(e);\n                }\n            }\n        }\n        return true;\n    } else if (code == KeyEvent.KEYCODE_SEARCH) {\n        if (down) {\n            if (repeatCount == 0) {\n                mSearchKeyPressed = true;\n            }\n        } else {\n            mSearchKeyPressed = false;\n            \n            if (mConsumeSearchKeyUp) {\n                // Consume the up-event\n                mConsumeSearchKeyUp = false;\n                return true;\n            }\n        }\n    }\n    \n    // Shortcuts are invoked through Search+key, so intercept those here\n    if (mSearchKeyPressed) {\n        if (down && repeatCount == 0) {\n            Intent shortcutIntent = mShortcutManager.getIntent(code, metaKeys);\n            if (shortcutIntent != null) {\n                shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                mContext.startActivity(shortcutIntent);\n                \n                /*\n                 * We launched an app, so the up-event of the search key\n                 * should be consumed\n                 */\n                mConsumeSearchKeyUp = true;\n                return true;\n            }\n        }\n    }\n\n    return false;\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public View addStartingWindow(IBinder appToken, String packageName,\n                              int theme, CharSequence nonLocalizedLabel,\n                              int labelRes, int icon)", "code": "{\n    if (!SHOW_STARTING_ANIMATIONS) {\n        return null;\n    }\n    if (packageName == null) {\n        return null;\n    }\n    \n\tContext context = mContext;\n\tboolean setTheme = false;\n\t//Log.i(TAG, \"addStartingWindow \" + packageName + \": nonLocalizedLabel=\"\n\t//        + nonLocalizedLabel + \" theme=\" + Integer.toHexString(theme));\n\tif (theme != 0 || labelRes != 0) {\n\t    try {\n\t        context = context.createPackageContext(packageName, 0);\n\t        if (theme != 0) {\n\t            context.setTheme(theme);\n\t            setTheme = true;\n\t        }\n\t    } catch (PackageManager.NameNotFoundException e) {\n\t    }\n\t}\n\tif (!setTheme) {\n\t    context.setTheme(com.android.internal.R.style.Theme);\n\t}\n\t\n    Window win = PolicyManager.makeNewWindow(context);\n    Resources r = context.getResources();\n    win.setTitle(r.getText(labelRes, nonLocalizedLabel));\n\n    win.setType(\n        WindowManager.LayoutParams.TYPE_APPLICATION_STARTING);\n    win.setFlags(\n        WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE|\n        WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,\n        WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE|\n        WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE);\n\n    win.setLayout(WindowManager.LayoutParams.FILL_PARENT,\n                        WindowManager.LayoutParams.FILL_PARENT);\n\n    final WindowManager.LayoutParams params = win.getAttributes();\n    params.token = appToken;\n    params.packageName = packageName;\n    params.windowAnimations = win.getWindowStyle().getResourceId(\n            com.android.internal.R.styleable.Window_windowAnimationStyle, 0);\n    params.setTitle(\"Starting \" + packageName);\n\n    try {\n        WindowManagerImpl wm = (WindowManagerImpl)\n                context.getSystemService(Context.WINDOW_SERVICE);\n        View view = win.getDecorView();\n\n        if (win.isFloating()) {\n            // Whoops, there is no way to display an animation/preview\n            // of such a thing!  After all that work...  let's skip it.\n            // (Note that we must do this here because it is in\n            // getDecorView() where the theme is evaluated...  maybe\n            // we should peek the floating attribute from the theme\n            // earlier.)\n            return null;\n        }\n        \n        if (localLOGV) Log.v(\n            TAG, \"Adding starting window for \" + packageName\n            + \" / \" + appToken + \": \"\n            + (view.getParent() != null ? view : null));\n\n        wm.addView(view, params);\n\n        // Only return the view if it was successfully added to the\n        // window manager... which we can tell by it having a parent.\n        return view.getParent() != null ? view : null;\n    } catch (WindowManagerImpl.BadTokenException e) {\n        // ignore\n        Log.w(TAG, appToken + \" already running, starting window not displayed\");\n    }\n\n    return null;\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public int checkAddPermission(WindowManager.LayoutParams attrs)", "code": "{\n    int type = attrs.type;\n    if (type < WindowManager.LayoutParams.FIRST_SYSTEM_WINDOW\n            || type > WindowManager.LayoutParams.LAST_SYSTEM_WINDOW) {\n        return WindowManagerImpl.ADD_OKAY;\n    }\n    String permission = null;\n    switch (type) {\n        case TYPE_TOAST:\n            // XXX right now the app process has complete control over\n            // this...  should introduce a token to let the system\n            // monitor/control what they are doing.\n            break;\n        case TYPE_PHONE:\n        case TYPE_PRIORITY_PHONE:\n        case TYPE_SYSTEM_ALERT:\n        case TYPE_SYSTEM_ERROR:\n        case TYPE_SYSTEM_OVERLAY:\n            permission = android.Manifest.permission.SYSTEM_ALERT_WINDOW;\n            break;\n        default:\n            permission = android.Manifest.permission.INTERNAL_SYSTEM_WINDOW;\n    }\n    if (permission != null) {\n        if (mContext.checkCallingOrSelfPermission(permission)\n                != PackageManager.PERMISSION_GRANTED) {\n            return WindowManagerImpl.ADD_PERMISSION_DENIED;\n        }\n    }\n    return WindowManagerImpl.ADD_OKAY;\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void adjustConfigurationLw(Configuration config)", "code": "{\n    mPowerManager.setKeyboardVisibility(true);\n    config.keyboardHidden = Configuration.KEYBOARDHIDDEN_NO;\n    mPowerManager.userActivity(SystemClock.uptimeMillis(), false,\n            LocalPowerManager.OTHER_EVENT);\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void beginAnimationLw(int displayWidth, int displayHeight)", "code": "{\n    mTopFullscreenOpaqueWindowState = null;\n    mForceStatusBar = false;\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * @return Whether music is being played right now.\n */\n", "func_signal": "private boolean isMusicActive()", "code": "{\n    final IAudioService audio = getAudioInterface();\n    if (audio == null) {\n        Log.w(TAG, \"isMusicActive: couldn't get IAudioService reference\");\n        return false;\n    }\n    try {\n        return audio.isMusicActive();\n    } catch (RemoteException e) {\n        Log.w(TAG, \"IAudioService.isMusicActive() threw RemoteException \" + e);\n        return false;\n    }\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public int interceptKeyTq(RawInputEvent event, boolean screenIsOn)", "code": "{\n    int result = ACTION_PASS_TO_USER | ACTION_POKE_USER_ACTIVITY;\n    return result;\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void removeStartingWindow(IBinder appToken, View window)", "code": "{\n    // RuntimeException e = new RuntimeException();\n    // Log.i(TAG, \"remove \" + appToken + \" \" + window, e);\n\n    if (localLOGV) Log.v(\n        TAG, \"Removing starting window for \" + appToken + \": \" + window);\n\n    if (window != null) {\n        WindowManagerImpl wm = (WindowManagerImpl) mContext.getSystemService(Context.WINDOW_SERVICE);\n        wm.removeView(window);\n    }\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public int selectAnimationLw(WindowState win, int transit)", "code": "{\n    if (PRINT_ANIM) Log.i(TAG, \"selectAnimation in \" + win\n          + \": transit=\" + transit);\n    if (transit == TRANSIT_PREVIEW_DONE) {\n        if (win.hasAppShownWindows()) {\n            if (PRINT_ANIM) Log.i(TAG, \"**** STARTING EXIT\");\n            return com.android.internal.R.anim.app_starting_exit;\n        }\n    }\n\n    return 0;\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public boolean isMovementKeyTi(int keycode)", "code": "{\n    switch (keycode) {\n        case KeyEvent.KEYCODE_DPAD_UP:\n        case KeyEvent.KEYCODE_DPAD_DOWN:\n        case KeyEvent.KEYCODE_DPAD_LEFT:\n        case KeyEvent.KEYCODE_DPAD_RIGHT:\n            return true;\n    }\n    return false;\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void animatingWindowLw(WindowState win,\n                            WindowManager.LayoutParams attrs)", "code": "{\n    if (mTopFullscreenOpaqueWindowState == null\n        && attrs.type >= FIRST_APPLICATION_WINDOW\n        && attrs.type <= LAST_APPLICATION_WINDOW\n        && win.fillsScreenLw(mW, mH, true, false)\n        && win.isDisplayedLw()) {\n        mTopFullscreenOpaqueWindowState = win;\n    } else if ((attrs.flags & FLAG_FORCE_NOT_FULLSCREEN) != 0) {\n        mForceStatusBar = true;\n    }\n}", "path": "mid\\com\\android\\internal\\policy\\impl\\MidWindowManager.java", "repo_name": "markmcd/google_android_frameworks_policies_base", "stars": 1, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * shortcut to get the AbstractVimEditor (on eclipse side) of this Event\n * @return\n */\n", "func_signal": "public AbstractVimEditor getEditor() throws VimException", "code": "{\n\treturn VimPlugin.getDefault().getVimserver(\n\t\t\tthis.getConnection().getVimID()).getEditor(this.getBufferID());\n}", "path": "plugin\\src\\org\\vimplugin\\VimEvent.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * returns the bufferID. This is set by vimplugin. It is not the vim-buffer! budIDs\n * start with one. Generic events have bufId of 0.\n * \n * @return the bufferID of this event.\n * @throws VimException if the number could not be parsed from the {@link #line line} (wraps {@link NumberFormatException})\n */\n", "func_signal": "public int getBufferID() throws VimException", "code": "{\n\tint beginIndex = line.indexOf(':');\n\ttry {\n\t\treturn Integer.parseInt(line.substring(0, beginIndex));\n\t} catch (NumberFormatException nfe) {\n\t\tthrow new VimException(\"Could not parse bufferId.\",nfe);\n\t}\n}", "path": "plugin\\src\\org\\vimplugin\\VimEvent.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * Gives the vim argument with the port depending on the portID.\n * \n * @param portID\n * @return The argument for vim for starting the Netbeans interface.\n */\n", "func_signal": "protected String getNetbeansString(int portID)", "code": "{\n\n\tint port = VimPlugin.getDefault().getPreferenceStore().getInt(\n\t\t\tPreferenceConstants.P_PORT)\n\t\t\t+ portID;\n\tString host = VimPlugin.getDefault().getPreferenceStore().getString(\n\t\t\tPreferenceConstants.P_HOST);\n\tString pass = VimPlugin.getDefault().getPreferenceStore().getString(\n\t\t\tPreferenceConstants.P_PASS);\n\n\treturn \"-nb:\" + host + \":\" + port + \":\" + pass;\n}", "path": "plugin\\src\\org\\vimplugin\\VimServer.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * reacts to \"insert\" by inserting the corresponding text into the editor.\n * @see org.vimplugin.listeners.IVimListener#handleEvent(org.vimplugin.VimEvent)\n */\n", "func_signal": "public void handleEvent(VimEvent ve) throws VimException", "code": "{\n\t\tString event = ve.getEvent();\n\t\tif (event.equals(\"insert\") == true) {\n\t\t\tint length = Integer.parseInt(ve.getArgument(0));\n\t\t\tString text = ve.getArgument(1);\n\t\t\ttext = text.substring(1, text.length() - 1);\n\t\t\tfor (AbstractVimEditor veditor : VimPlugin.getDefault()\n\t\t\t\t\t.getVimserver(ve.getConnection().getVimID()).getEditors()) {\n\t\t\t\tif (veditor.getBufferID() == ve.getBufferID()) {\n\t\t\t\t\tveditor.insertDocumentText(text, length);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n}", "path": "plugin\\src\\org\\vimplugin\\listeners\\TextInsert.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * Handle Exceptions in a Thread like {@link VimConnection} right.\n */\n", "func_signal": "public void uncaughtException(Thread t, Throwable e)", "code": "{\n\t//convert stacktrace to string\n\tString stacktrace;\n\tStringWriter sw = null;\n\tPrintWriter pw = null;\n\ttry {\n\t\tsw = new StringWriter();\n\t\tpw = new PrintWriter(sw);\n\t\te.printStackTrace(pw);\n\t\tstacktrace = sw.toString();\n\t} finally {\n\t\ttry {\n\t\t\tif (pw != null)\n\t\t\t\tpw.close();\n\t\t\tif (sw != null)\n\t\t\t\tsw.close();\n\t\t} catch (IOException ignore) {\n\t\t}\n\t}\n\t\n\tSystem.err.println(\"VimConnection: \"+stacktrace);\n    }", "path": "plugin\\src\\org\\vimplugin\\VimExceptionHandler.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * the argument at the specified position (starting with 0).\n *  \n * @param index\n * @return the argument at the specified position.\n * @throws VimException if the {@link #line line} cannot be parsed (wraps {@link IndexOutOfBoundsException})\n */\n", "func_signal": "public String getArgument(int index) throws VimException", "code": "{\n\tint i = 0;\n\tint beginIndex = -1;\n\twhile (i <= index) {\n\t\tbeginIndex = line.indexOf(\" \", beginIndex + 1);\n\t\ti++;\n\t}\n\tint endIndex = beginIndex;\n\tif (line.charAt(beginIndex + 1) == '\"') {\n\t\twhile (true) {\n\t\t\tendIndex = line.indexOf(\" \", endIndex + 1);\n\t\t\tif (endIndex == -1\n\t\t\t\t\t|| (line.charAt(endIndex - 1) == '\"' && beginIndex != endIndex - 2))\n\t\t\t\tbreak;\n\t\t}\n\t} else\n\t\tendIndex = line.indexOf(\" \", beginIndex + 1);\n\tif (endIndex == -1)\n\t\tendIndex = line.length();\n\ttry {\n\t\treturn line.substring(beginIndex + 1, endIndex);\n\t} catch (IndexOutOfBoundsException iobe) {\n\t\tthrow new VimException(\"Could not parse line.\",iobe);\n\t}\n\n}", "path": "plugin\\src\\org\\vimplugin\\VimEvent.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "//TODO: cleanup launching of commands inside vim.\n", "func_signal": "public void handleEvent(Event e)", "code": "{\n\t//System.out.println(\"Command View: \" + e.character);\n\tif (e.character == 0x0D) {\n\n\t\tString line1 = input.getText().substring(3);\n\t\tif (input.getText().startsWith(\"vr:\")) {\n\t\t\t//TODO set and lookup --servername from VimServer instance.\n\t\t\tString[] args = { \"vim\", \"--servername\", \"GVIM\",\n\t\t\t\t\t\"--remote-send\", line1 };\n\t\t\ttry {\n\t\t\t\tSystem.out.printf(\"running %s :\", Arrays\n\t\t\t\t\t\t.toString(args));\n\t\t\t\tProcess process = new ProcessBuilder(args).start();\n\n\t\t\t\tInputStream is = process.getInputStream();\n\t\t\t\tInputStreamReader isr = new InputStreamReader(is);\n\t\t\t\tBufferedReader br = new BufferedReader(isr);\n\t\t\t\tString line;\n\n\t\t\t\twhile ((line = br.readLine()) != null) {\n\t\t\t\t\tSystem.out.println(line);\n\t\t\t\t}\n\t\t\t\tprocess.waitFor();\n\n\t\t\t\tSystem.out\n\t\t\t\t\t\t.println(\"result: \" + process.exitValue());\n\t\t\t} catch (IOException e1) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te1.printStackTrace();\n\t\t\t} catch (InterruptedException e2) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te2.printStackTrace();\n\t\t\t}\n\t\t} else if (input.getText().startsWith(\"nb:\")) {\n\t\t\tVimPlugin.getDefault().getVimserver(0).getVc().plain(\n\t\t\t\t\tline1);\n\t\t}\n\n\t\tinput.setText(\"\");\n\t}\n\n}", "path": "plugin\\src\\org\\vimplugin\\views\\CommandView.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * The name of the event, as specified under :help netbeans.\n * \n * @return the name of the event.\n * @throws VimException if the {@link #line line} cannot be parsed (wraps {@link IndexOutOfBoundsException})\n */\n", "func_signal": "public String getEvent() throws VimException", "code": "{\n\tint beginIndex = line.indexOf(':');\n\tint endIndex = line.indexOf('=');\n\ttry {\n\t\treturn line.substring(beginIndex + 1, endIndex);\n\t} catch (IndexOutOfBoundsException iobe) {\n\t\tthrow new VimException(\"Could not parse line \\\"\"+line+\"\\\"\",iobe);\n\t}\n}", "path": "plugin\\src\\org\\vimplugin\\VimEvent.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * Initializes the preference store and sets a description for the dialog. \n */\n", "func_signal": "public VimPreferences()", "code": "{\n\tsuper(FieldEditorPreferencePage.GRID);\n\thotkeys = new StringFieldEditor[5];\n\tcombos = new ComboFieldEditor[5];\n\t\n\t\n\tsetPreferenceStore(VimPlugin.getDefault().getPreferenceStore());\n\tsetDescription(\"General Settings\");\n}", "path": "plugin\\src\\org\\vimplugin\\preferences\\VimPreferences.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * Adds the fields.\n * @see org.eclipse.jface.preference.FieldEditorPreferencePage#createFieldEditors()\n */\n", "func_signal": "@Override\npublic void createFieldEditors()", "code": "{\n\taddField(new BooleanFieldEditor(PreferenceConstants.P_EMBD,\n\t\t\t\"Embed Vim: (Vim 7.1 on Linux and Windows only)\",\n\t\t\tgetFieldEditorParent()));\n\taddField(new StringFieldEditor(PreferenceConstants.P_PORT, \"Port:\",\n\t\t\tgetFieldEditorParent()));\n\taddField(new StringFieldEditor(PreferenceConstants.P_HOST, \"Host:\",\n\t\t\tgetFieldEditorParent()));\n\taddField(new StringFieldEditor(PreferenceConstants.P_PASS, \"Password:\",\n\t\t\tgetFieldEditorParent()));\n\taddField(new FileFieldEditor(PreferenceConstants.P_GVIM,\n\t\t\t\"Path to gvim:\", true, getFieldEditorParent()));\n\taddField(new StringFieldEditor(PreferenceConstants.P_OPTS,\n\t\t\t\"additional Parameters:\", getFieldEditorParent()));\n\taddField(new BooleanFieldEditor(PreferenceConstants.P_DEBUG,\n\t\t\t\"Debug to stdout:\", getFieldEditorParent()));\n\t\n\tfor (int i = 0; i < 5; i++) {\n\t\thotkeys[i] = new StringFieldEditor(PreferenceConstants.P_KEYS[i],\n\t\t\t\t\"Hotkey \"+i, getFieldEditorParent());\n\t\tcombos[i] = new ComboFieldEditor(PreferenceConstants.P_COMMANDS[i],\n\t\t\t\t\"Command \"+i, getCommands(),getFieldEditorParent());\n\t}\n\n\tfor (int i = 0; i < 5; i++) {\n\t\taddField(hotkeys[i]);\n\t\taddField(combos[i]);\n\t}\n\t\n}", "path": "plugin\\src\\org\\vimplugin\\preferences\\VimPreferences.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * A Dummy test.\n */\n", "func_signal": "public void testGVimStart()", "code": "{\n\tVimPlugin vp = VimPlugin.getDefault();\n\tint serverID = vp.getDefaultVimServer();\n\tVimServer vs = vp.getVimserver(serverID);\n\tassertEquals(serverID, 0);\n}", "path": "plugin\\tests\\org\\vimplugin\\tests\\VimServerTest.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * Print Useful info about a command.\n * \n * @param c The command\n */\n", "func_signal": "private void printCommandInfo(Command c)", "code": "{\n\ttry {\n\t\tSystem.out.println(\"Info about command \"+c.getId());\n\t\tSystem.out.println(\"Defined: \" + c.isDefined());\n\t\tSystem.out.println(\"Handled: \" + c.isHandled());\n\t\tSystem.out.println(\"Enabled: \" + c.isEnabled());\n\n\t\tIParameter[] params = c.getParameters();\n\t\tSystem.out.println(\"Params NULL: \" + (params == null));\n\n\t\tif (params == null)\n\t\t\treturn;\n\n\t\tSystem.out.println(\"# of Params: \" + params.length);\n\t\tfor (IParameter p : params) {\n\t\t\tSystem.out.println(\"ID: \" + p.getId());\n\t\t\tSystem.out.println(\"NAME: \" + p.getName());\n\t\t\tSystem.out.println(\"VALUES: \" + p.getValues());\n\t\t\tSystem.out.println(\"OPTIONAL: \" + p.isOptional());\n\t\t}\n\t} catch (Exception e) {\n\t\t// since this looks like debugging, just print the stacktrace in\n\t\t// case of errors.\n\t\te.printStackTrace();\n\t}\n}", "path": "plugin\\src\\org\\vimplugin\\handlers\\EclipseCommand.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * reacts to \"fileOpened\" by opening the file in the\n * {@link org.vimplugin.editors.AbstractVimEditor VimEditor}.\n * \n * @see org.vimplugin.listeners.IVimListener#handleEvent(org.vimplugin.VimEvent)\n */\n", "func_signal": "public void handleEvent(VimEvent ve) throws VimException", "code": "{\n\tString event = ve.getEvent();\n\tif (event.equals(\"fileOpened\") == true) {\n\t\tString filePath = ve.getArgument(0);\n\t\tfilePath = filePath.substring(1, filePath.length() - 1);\n\t\tint ID = VimPlugin.getDefault().getNumberOfBuffers() - 1;\n\t\tfor (AbstractVimEditor veditor : VimPlugin.getDefault()\n\t\t\t\t.getVimserver(ve.getConnection().getVimID()).getEditors()) {\n\t\t\tif (veditor.getBufferID() == ID) {\n\t\t\t\tveditor.setTitleTo(filePath);\n\t\t\t}\n\t\t}\n\t}\n}", "path": "plugin\\src\\org\\vimplugin\\listeners\\FileOpened.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * Start vim and embed it in the Window with the <code>wid</code> (platform-dependent!) given.\n * \n * @param wid The id of the window to embed vim into\n */\n", "func_signal": "public void start(long wid)", "code": "{\n\n\t// gather Strings (nice names for readbility)\n\tString gvim = VimPlugin.getDefault().getPreferenceStore().getString(\n\t\t\tPreferenceConstants.P_GVIM);\n\n\tString netbeans = getNetbeansString(ID);\n\tString dontfork = \"-f\"; // foreground -- dont fork\n\n\t// Platform specific code\n\tString socketid = \"--socketid\";\n\t// use --windowid, under win32\n\tif (Platform.getOS().equals(Platform.OS_WIN32)) {\n\t\tsocketid = \"--windowid\";\n\t}\n\n\tString stringwid = String.valueOf(wid);\n\tString[] addopts = VimPlugin.getDefault().getPreferenceStore()\n\t\t\t.getString(PreferenceConstants.P_OPTS).split(\"\\\\s\");\n\n\t// build args-array (dynamic size due to addopts.split)\n\tString[] args = new String[5 + addopts.length];\n\targs[0] = gvim;\n\targs[1] = netbeans;\n\targs[2] = dontfork;\n\targs[3] = socketid;\n\targs[4] = stringwid;\n\n\t// copy addopts to args\n\tSystem.arraycopy(addopts, 0, args, 5, addopts.length);\n\n\tstart(args);\n}", "path": "plugin\\src\\org\\vimplugin\\VimServer.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * start gvim with args using a ProcessBuilder and setup\n * {@link #vc VimConnection} .\n * \n * @param args\n */\n", "func_signal": "public void start(String... args)", "code": "{\n\tif (vc != null && vc.isServerRunning())\n\t\treturn;\n\n\t// setup VimConnection and start server thread\n\tvc = new VimConnection(ID);\n\tt = new Thread(vc);\n\tt.setUncaughtExceptionHandler(new VimExceptionHandler());\n\tt.setDaemon(true);\n\tt.start();\n\n\t// starting gvim with Netbeans interface\n\ttry {\n\t\tSystem.out.println(\"Trying to start vim\");\n\t\tp = new ProcessBuilder(args).start();\n\t\tSystem.out.println(\"Started vim\");\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Waits until server starts.. vim should return startupDone\n\twhile (!vc.isServerRunning()) {\n\t\t// sleep so that we don't have a messy cpu-hogging infinite loop\n\t\t// here\n\t\tLong stoptime = 2000L; // 2 Seconds\n\t\tSystem.out.println(\"Waiting to connect to vim server\u2026\");\n\t\ttry {\n\t\t\tThread.sleep(stoptime);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "path": "plugin\\src\\org\\vimplugin\\VimServer.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * Disposes the {@link org.vimplugin.editors.AbstractVimEditor ViMEditor} on\n * \"disconnect\" or killed.\n * \n * @throws VimException when the VimConnection could not be closed (wraps IOException).\n */\n", "func_signal": "public void handleEvent(VimEvent ve) throws VimException", "code": "{\n\tString event = ve.getEvent();\n\n\tif (event.equals(\"disconnect\") == true\n\t\t\t|| event.equals(\"killed\") == true) {\n\t\tfor (final AbstractVimEditor veditor : VimPlugin.getDefault()\n\t\t\t\t.getVimserver(ve.getConnection().getVimID()).getEditors()) {\n\t\t\tif (veditor != null) {\n\t\t\t\tveditor.forceDispose();\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tve.getConnection().close();\n\t\t} catch (IOException e) {\n\t\t\tthrow new VimException(\"could not close the vimconnection\",e);\n\t\t}\n\t}\n}", "path": "plugin\\src\\org\\vimplugin\\listeners\\ServerDisconnect.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * calls simplest eclipse commands, no parametrisation possible by now (for\n * example for code complete handlers).\n * \n * @see org.vimplugin.handlers.IHandler#handle(java.lang.Object[])\n * @param params ignored.\n */\n", "func_signal": "public void handle(Object... params)", "code": "{\n\tICommandService cservice = (ICommandService) PlatformUI.getWorkbench()\n\t\t\t.getService(ICommandService.class);\n\tCommand c = cservice.getCommand(id);\n\tprintCommandInfo(c);\n\t\n\t//TODO: How can we pass parameters/context etc here? What is expected by commands?\n\tExecutionEvent ee = new ExecutionEvent(c, new HashMap<String, String>(),\n\t\t\tnull, null);\n\ttry {\n\t\tc.executeWithChecks(ee);\n\t} catch (Exception ex) {\n\t\t//TODO: Exception Handling!\n\t\tex.printStackTrace();\n\t}\n}", "path": "plugin\\src\\org\\vimplugin\\handlers\\EclipseCommand.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * Get netbeans-port,host and pass and start vim with -nb option.\n * \n */\n", "func_signal": "public void start()", "code": "{\n\tString gvim = VimPlugin.getDefault().getPreferenceStore().getString(\n\t\t\tPreferenceConstants.P_GVIM);\n\tString arg0 = getNetbeansString(ID);\n\n\tstart(gvim, arg0);\n}", "path": "plugin\\src\\org\\vimplugin\\VimServer.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * Stops the server.. closes the vimconnection\n * \n * @return Success\n */\n", "func_signal": "public boolean stop() throws IOException", "code": "{\n\tboolean result = false; // If error raised\n\n\tresult = vc.close();\n\n\tvc = null;\n\tt.interrupt();\n\tp.destroy();\n\treturn result;\n}", "path": "plugin\\src\\org\\vimplugin\\VimServer.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * calculate defined commands\n * @return an array suitable for the {@link ComboFieldEditor} in the preferencepage.\n */\n", "func_signal": "private String[][] getCommands()", "code": "{\n\tICommandService com = (ICommandService) PlatformUI.getWorkbench()\n\t\t\t.getService(ICommandService.class);\n\n\tCommand[] commands = com.getDefinedCommands();\n\t\n\t//filter out duplicates\n\tHashSet<String> nodupes = new HashSet<String>();\n\t\n\tfor (int i = 0; i < commands.length; i++) {\n\t\tCommand command = commands[i];\n\t\tif (command.getId().startsWith(\"org.eclipse.ui.project\")) {\n\t\t\tnodupes.add(command.getId());\n\t\t}\n\t}\n\n\tString[][] commandpairs = new String[nodupes.size()][2];\n\tObject[] a = nodupes.toArray();\n\tSystem.out.println(\"These are the command ids: \"+Arrays.toString(a));\n\t\n\tfor (int i = 0; i<a.length;i++) {\n\t\tcommandpairs[i][0]=(String)a[i];\n\t\tcommandpairs[i][1]=(String)a[i];\n\t}\n\t\n\treturn commandpairs;\n}", "path": "plugin\\src\\org\\vimplugin\\preferences\\VimPreferences.java", "repo_name": "dterei/vim-eclipse-plugin", "stars": 1, "license": "None", "language": "java", "size": 604}
{"docstring": "/**\n * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\n */\n", "func_signal": "protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException", "code": "{\n\t// TODO Auto-generated method stub\n\t//super.doGet(request, response);\n\tresponse.setContentType(\"text/html\");\n\tPrintWriter out = response.getWriter();\n\t\n\tout.println(\"<html><head><title>shout</title></head>\");\n\tout.println(\"<body><h1>Shouted:\"\n\t\t+ request.getParameter( \"message\" ).toUpperCase()\n\t\t+ \"</h1>\" );\n\tout.println(\"</body></html>\");\n\t//doPost(request, response);\n}", "path": "Diara\\src\\com\\Laptop\\web\\ShoutServlet.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "/**\n * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\n */\n", "func_signal": "protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException", "code": "{\n\t// TODO Auto-generated method stub\n\t//super.doPost(request, response);\n\tresponse.setContentType(\"text/html\");\n\tPrintWriter out = response.getWriter();\n\t\n\tout.println(\"<html><head><title>shout</title></head>\");\n\tout.println(\"<body><h1>Shouted:\"\n\t\t+ request.getParameter( \"message\" ).toUpperCase()\n\t\t+ \"</h1>\" );\n\tout.println(\"</body></html>\");\n}", "path": "Diara\\src\\com\\Laptop\\web\\ShoutServlet.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "// end of startElement\n", "func_signal": "public void endElement(String namespaceURI, String localName, String qName)\n\t\t\tthrows SAXException", "code": "{\n\t\tif (localName.equals(\"FirstName\")) {\n\t\t\tcust.firstName = contents.toString();\n\t\t}\n\t\tif (localName.equals(\"LastName\")) {\n\t\t\tcust.lastName = contents.toString();\n\t\t}\n\t\tif (localName.equals(\"CustID\")) {\n\t\t\tcust.custID = contents.toString();\n\t\t}\n\t\tif (localName.equals(\"Quantity\")) {\n\t\t\tcurrentOrderItem.quantity = Integer.valueOf(\n\t\t\t\t\tcontents.toString().trim()).intValue();\n\t\t}\n\t\tif (localName.equals(\"ProductCode\")) {\n\t\t\tcurrentOrderItem.productCode = contents.toString();\n\t\t}\n\t\tif (localName.equals(\"Description\")) {\n\t\t\tcurrentOrderItem.description = contents.toString();\n\t\t}\n\t\tif (localName.equals(\"Price\")) {\n\t\t\tcurrentOrderItem.price = Double.valueOf(contents.toString().trim())\n\t\t\t\t\t.doubleValue();\n\t\t}\n\t}", "path": "Diara\\src\\sax\\Example4.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "/**\n * <p> This initializes the needed settings. </p>\n */\n", "func_signal": "public DOMSerializer()", "code": "{\n    indent = \"\";\n    lineSeparator = \"\\n\";\n}", "path": "Diara\\src\\enterprise\\dom\\DOMSerializer.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "// public static void main(String[] argv){\n", "func_signal": "public String Parse (String filePath)", "code": "{\n\tSystem.out.println(\"example2:\");\n\ttry {\n\t    // create sax2 parser\n\t    XMLReader xr = XMLReaderFactory.createXMLReader(parserClass);\n\n\t    // set the ContentHandler\n\t    Example2 ex2 = new Example2();\n\t    xr.setContentHandler(ex2);\n\n\t    // parse the file\n\t    xr.parse(new InputSource( new FileReader(filePath)));\n\n\t    // say hello\n\t    sb.append(\"Hello world from \");\n\t    sb.append(ex2.name);\n\t    sb.append(\" in \");\n\t    sb.append(ex2.location);\n\t    System.out.println(\"Hello World from \" + ex2.name + \" in \"\n\t\t\t       + ex2.location);\n\t}catch (Exception e) {\n\t     e.printStackTrace();\n     }\n\treturn sb.toString();\n }", "path": "Diara\\src\\sax\\Example2.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "// end endElement\n", "func_signal": "public void characters(char[] ch, int start, int length) \n                  throws SAXException", "code": "{\n    \tcontents.append(\"sax event: characters[ \" );\n\n\ttry {\n\t\tcontents.write(ch, start, length);\n\t\tsb.append(contents.toString());\n\t\tSystem.out.println(\"contents: \" + contents.toString());\n\t\tSystem.out.println(\"sb in characters: \" +  sb.toString());\n//\t    OutputStreamWriter outw = new OutputStreamWriter (System.out);\n//\t    outw.write(ch, start,length);\n//\t    outw.flush();\n\t}catch (Exception e) {\n\t    e.printStackTrace();\n\t}\n\tcontents.append(\" ] <br> \");\n  \n    }", "path": "Diara\\src\\sax\\Example1.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "/**\n * <p> This serializes a DOM tree to the supplied\n *  <code>OutputStream</code>.</p>\n *\n * @param doc DOM tree to serialize.\n * @param writer <code>Writer</code> to write to.\n */\n", "func_signal": "public void serialize(Document doc, Writer writer)\n    throws IOException", "code": "{\n\n    // Start serialization recursion with no indenting\n    serializeNode(doc, writer, \"\");\n    writer.flush();\n}", "path": "Diara\\src\\enterprise\\dom\\DOMSerializer.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "/**\n * <p>This creates a DOM tree from the supplied XML\n *   filename, and then serializes the tree to the \n *   specified file.</p>\n *\n * @param xmlDocument filename of XML input document.\n * @param outputFilename filename of output document.\n */\n  //  public String test(String xmlDocument, String outputFilename)  throws Exception {\n", "func_signal": "public String test(String xmlDocument, String outputFilename)  throws Exception", "code": "{\n\tStringBuffer sb = new StringBuffer(1024);\n   //     File outputFile = new File(outputFilename);\n    DOMParser parser = new DOMParser();\n Document doc;\n DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n DocumentBuilder builder = factory.newDocumentBuilder();\n doc = builder.parse(xmlDocument);\n sb.append(doc);\n\n    // Get the DOM tree as a Document object\n  //  parser.parse(xmlDocument);\n  //  Document doc = parser.getDocument();\n\n    // Serialize\n    DOMSerializer serializer = new DOMSerializer();\n    serializer.serialize(doc, new File(outputFilename));\n    return  sb.toString();\n}", "path": "Diara\\src\\enterprise\\dom\\SerializerTest.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "/**\n * <p> This serializes a DOM tree to the supplied\n *  <code>OutputStream</code>.</p>\n *\n * @param doc DOM tree to serialize.\n * @param file <code>File</code> to write to.\n */\n", "func_signal": "public void serialize(Document doc, File file)\n    throws IOException", "code": "{\n\n    Writer writer = new FileWriter(file);\n    serialize(doc, writer);\n}", "path": "Diara\\src\\enterprise\\dom\\DOMSerializer.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "// end of startElement\n", "func_signal": "public void endElement(String namespaceURI, String localName, String qName)\n\t           throws SAXException", "code": "{\n\tif (localName.equals(\"name\")){\n\t    name = contents.toString();\n\t}\n\tif (localName.equals(\"location\")){\n\t    location = contents.toString();\n\t}\n   }", "path": "Diara\\src\\sax\\Example2.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "//   public static void main(String[] argv){\n", "func_signal": "public String Parse (String filePath)", "code": "{\n\tSystem.out.println(\"example3:\");\n\tStringBuffer sb = new StringBuffer (1024);\n\ttry {\n\t    // create sax2 parser\n\t    XMLReader xr = XMLReaderFactory.createXMLReader(parserClass);\n\n\t    // set the ContentHandler\n\t    Example3 ex3 = new Example3();\n\t    xr.setContentHandler(ex3);\n\n\t    // parse the file\n\t    xr.parse(new InputSource( new FileReader(filePath)));\n\n\t    // say customer to stdout\n\t    Customer cust = ex3.getCustomer();\n\t  //  System.out.println(cust.print());\n\t    sb.append(cust.print());\n\t}catch (Exception e) {\n\t     e.printStackTrace();\n       }// end catch\n\t\n\treturn sb.toString();\n   }", "path": "Diara\\src\\sax\\Example3.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "/**\n * <p> This serializes a DOM tree to the supplied\n *  <code>OutputStream</code>.</p>\n *\n * @param doc DOM tree to serialize.\n * @param out <code>OutputStream</code> to write to.\n */\n", "func_signal": "public void serialize(Document doc, OutputStream out)\n    throws IOException", "code": "{\n    \n    Writer writer = new OutputStreamWriter(out);\n    serialize(doc, writer);\n}", "path": "Diara\\src\\enterprise\\dom\\DOMSerializer.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "// end endDocument\n", "func_signal": "public void startElement(String namespaceURI, String localName,\n\t\t\tString qName, Attributes attr) throws SAXException", "code": "{\n\t\tcontents.reset();\n\n\t\t// new twist...\n\t\tif (localName.equals(\"OrderItem\")) {\n\t\t\tcurrentOrderItem = new OrderItem();\n\t\t\torderItems.addElement(currentOrderItem);\n\t\t}\n\n\t}", "path": "Diara\\src\\sax\\Example4.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "// public static void main(String[] argv){\n", "func_signal": "public String Parse(String filePath)", "code": "{\n\tStringBuffer sb = new StringBuffer(1024);\n\tSystem.out.println(\"example4:\");\n\ttry {\n\t\t// create sax2 parser\n\t\tXMLReader xr = XMLReaderFactory.createXMLReader(parserClass);\n\n\t\t// set the ContentHandler\n\t\tExample4 ex4 = new Example4();\n\t\txr.setContentHandler(ex4);\n\n\t\t// parse the file\n\t\txr.parse(new InputSource(new FileReader(filePath)));\n\n\t\t// say customer to stdout\n\t\tCustomer cust = ex4.getCustomer();\n\t\tsb.append(cust.print());\n\t\t// display all order items to stdout\n\t\tOrderItem i;\n\t\tVector items = ex4.getOrderItems();\n\t\tEnumeration e = items.elements();\n\t\twhile (e.hasMoreElements()) {\n\t\t\ti = (OrderItem) e.nextElement();\n\t\t\tsb.append(i.print(System.out));\n\t\t}// end while\n\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}// end catch\n\treturn sb.toString();\n}", "path": "Diara\\src\\sax\\Example4.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "/**\n * default constructor\n */\n", "func_signal": "public Accessories()", "code": "{\n\tsuper();\n\t// set the variables\n\tthis.id = getId();\n\tthis.name = getName();\n\tthis.price = getPrice();\n}", "path": "Diara\\src\\common\\Accessories.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "// end of startElement\n", "func_signal": "public void endElement(String namespaceURI, String localName, String qName)\n\t           throws SAXException", "code": "{\n\tif (localName.equals(\"FirstName\")){\n\t    cust.firstName = contents.toString();\n\t}\n\tif (localName.equals(\"LastName\")){\n\t    cust.lastName = contents.toString();\n\t}\n\tif (localName.equals(\"CustID\")){\n\t    cust.custID = contents.toString();\n\t}\n   }", "path": "Diara\\src\\sax\\Example3.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "/**\n * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\n */\n", "func_signal": "protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException", "code": "{\n\tString mess = request.getParameter(\"message\");\n\tString done = mess;\n        PrintWriter out = response.getWriter();\n        String name = request.getParameter(\"name\");\n        out.println(\"<html><head><title>Zibra Computers</title></head>\");\n        out.println(\"<body><h1 align=\\\"center\\\">Best Quality Laptops</h1>\");\n        out.println(\"<div align=\\\"center\\\"><table><tr><td<a href =\\\"/Laptop/\\\">\");\n        out.println(\"<table bgcolor=\\\"#66ccff\\\"><tr><td><div align=\\\"center\\\"><table><tr><td<a href =\\\"/Diara/index.html\\\">Home</a>\");\n        out.println(\"<a href =\\\"shout.jsp\\\">connect to shout</a>\");\n        out.println(\"<table bgcolor=\\\"#ffffcc\\\">\");\n        try {\n        \tAccessories top = new Accessories();\n        \tVector <Accessories> vec = new Vector <Accessories>();\n        \tvec = top.selectAccessory(name);\n        \t\n        \t      \t\n        \tIterator <Accessories> iter = vec.iterator();\n        \twhile (iter.hasNext()){\n        \t\ttop = (Accessories) iter.next();\n        \t\t\n        \tout.println(\"<tr><td>\" + top.getId() + \"</td>\");\n        \tout.println(\"<td>\" + top.getName() + \"</td>\");\n        \tout.println(\"<td>\" + top.getQuantity() + \"</td>\");\n        \tout.println(\"<td>\" + top.getPrice() + \"</td></tr>\");\n        \t}\n        \tout.println(\"</table></td></tr></table>\"\n        \t\t\t+ new java.util.Date()\n        \t\t\t+\"</td></tr></table></div></body></html>\");\n        \t\n        \t}  catch (SQLException e) {\n        \n                    \n        \t} catch (ClassNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (InstantiationException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IllegalAccessException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n        \t}", "path": "Diara\\src\\com\\Laptop\\web\\WrongServlet.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "// end endDocument\n", "func_signal": "public void startElement(String namespaceURI, String localName,\n\t\t\t String qName, Attributes attr) throws SAXException", "code": "{\n    \tcontents.reset();\n    \tcontents.append(\"sax event: startElement[ \" + localName + \" ] <br>\" );\n\t// also lets print out the attributes if there are any:\n\tfor (int i = 0; i < attr.getLength();i++){\n\t\tcontents.append(\"Attribute: \" + \n\t\t\t       attr.getLocalName(i) +\n\t\t\t       \" VALUE: \" + attr.getValue(i));\n\t}// end of for loop\n    }", "path": "Diara\\src\\sax\\Example1.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "//  public static void main(String[] argv){\n", "func_signal": "public String Parse(String path)", "code": "{\n  \tStringBuffer sb2 = new StringBuffer(1024);\n  \tsb2.append(\"example1 sax events: <br>\");\n\ttry {\n\t    // create sax2 parser\n\t    XMLReader xr = XMLReaderFactory.createXMLReader(parserClass);\n\n\t    // set the ContentHandler\n\t    xr.setContentHandler(new Example1());\n\n\t    // parse the file\n\t    sb.append(\"add me \");\n\t    System.out.println(\"preParse sb: \" + sb.toString());\n\t    xr.parse(new InputSource( new FileReader(path)));\n\t    System.out.println(\"postParse sb: \" + sb.toString());\n\t\tsb2.append(\"contents from parse: \" + contents.toString());\n\t}catch (Exception e) {\n\t     e.printStackTrace();\n      }\n\t\n\treturn sb2.toString();\n  }", "path": "Diara\\src\\sax\\Example1.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "// the business methods\n", "func_signal": "public String print()", "code": "{\n\tsb.append(\"Accessory: \");\n\tsb.append(\"name: \" + name + \" \");\n\tsb.append(\"quantity: \" + quantity+ \" \");\n\tsb.append(\"price: \" + price+ \" \");\n\treturn sb.toString();\n}", "path": "Diara\\src\\common\\Accessories.java", "repo_name": "Aberdeen/Diara", "stars": 1, "license": "None", "language": "java", "size": 156}
{"docstring": "/**\n * Completely remove an intersection form the string. The intersection may stay linked to other strings.\n * If the intersection doesn't belong to the string, this will have no effect.\n * @param intersection The intersection to remove\n */\n", "func_signal": "public void removeIntersection(Intersection intersection)", "code": "{\n\tif (!intersections.contains(intersection))\n\t\treturn;\n\t\n\tfor (ChainPoint point : this)\n\t{\n\t\tif (point.getNearIntersection() == intersection)\n\t\t\tpoint.setNearIntersection(null, null);\n\t\tif (point.getIntersection() == intersection)\n\t\t\tpoint.setIntersection(null);\n\t}\n\t\n\tintersections.remove(intersection);\n\town_intersections.remove(intersection);\n\tothers_intersections.remove(intersection);\n}", "path": "src\\org\\knotsgm\\core\\KnotStringBase.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "/**\n * Compute intersections of the string with itself and add them to the string\n * @return An list of detected intersections\n */\n", "func_signal": "public Vector<Intersection> setIntersections()", "code": "{\n\tVector<Intersection> inters = findIntersections();\n\town_intersections.addAll(inters);\n\tintersections.addAll(inters);\n\treturn inters;\n}", "path": "src\\org\\knotsgm\\core\\KnotStringBase.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "//Vector<IntersectionChanger> interchangers;\n//Vector<KnotStringGraphic> stringselectors;\n", "func_signal": "public KnotManager()", "code": "{\n\tsetLayout(null);\n\tsetOpaque(true);\n\tsetBackground(Color.white);\n\t\n\tdrawing_area = new DrawingArea(this);\n\t\n\t//interchangers = new Vector<IntersectionChanger>();\n\t//stringselectors = new Vector<KnotStringGraphic>();\n}", "path": "src\\org\\knotsgm\\ui\\swing\\KnotManager.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "/**\n * Compute intersections of the chain with another chain.\n * @param other The other chain.\n * @return A list of detected intersections.\n */\n", "func_signal": "public Vector<Intersection> findIntersections(Chain other)", "code": "{\n\tVector<Intersection> inter = new Vector<Intersection>();\n\tBoolean flag = false; \n\tKnotPoint itr,lap = new KnotPoint(-32, -32);\n\tIntersection newi;\n\t\n\tfor(ChainPoint seg1 : this)\n\t{\n\t\tfor(ChainPoint seg2 : other)\n\t\t{\n\t\t\titr = ChainPoint.computeIntersection(seg1, seg2);\n\t\t\t\n\t\t\tif(itr != null && !itr.equals(lap))\n\t\t\t{\n\t\t\t\tnewi = new Intersection(itr, flag, seg1, seg2, this, other);\n\t\t\t\t\n\t\t\t\tinter.add(newi);\n\t\t\t\t\n\t\t\t\t//flag = !flag;\n\t\t\t\tlap = itr;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn inter;\n}", "path": "src\\org\\knotsgm\\core\\Chain.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "/**\n * Create a ChainPoint from a Point.\n * @param point The instance of Point to use.\n * @param parent The parent chain.\n */\n", "func_signal": "public ChainPoint(KnotPoint point, Chain parent)", "code": "{\n\t//super(point);\n\tparentChain = parent;\n\tthis.point = point;\n}", "path": "src\\org\\knotsgm\\core\\ChainPoint.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "//Internal events\n", "func_signal": "private static void dispatchStyleNeedRepaint(RepaintEvent evt)", "code": "{\n\tObject[] listeners = stylelistenerList.getListenerList();\n\tfor (int i=0; i<listeners.length; i+=2)\n\t{\n\t\tif (listeners[i]==Style.class)\n\t\t{\n\t\t\t((RepaintListener)listeners[i+1]).needRepaint(evt);\n\t\t}\n\t}\n}", "path": "src\\org\\knotsgm\\core\\Style.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "/**\n * Compute intersections of the chain with itself.\n * @return A list of detected intersections.\n */\n", "func_signal": "public Vector<Intersection> findIntersections()", "code": "{\n\tVector<Intersection> inter = new Vector<Intersection>();\n\tint i;\n\tKnotPoint itr;\n\tBoolean flag = false;\n\tIntersection newi;\n\t\n\tChainPoint start = get(2), end = getLast().previous(), currentx, currenty;\n\tfor(currentx = getFirst(); currentx != end; currentx=currentx.next())\n\t{\n\t\tfor(currenty = start; currenty != getFirst(); currenty = currenty.next())\n\t\t{\n\t\t\titr = ChainPoint.computeIntersection(currentx, currenty);\n\t\t\t\n\t\t\tif(itr != null && (currentx != getFirst() || currenty != getLast()))\n\t\t\t{\n\t\t\t\tnewi = new Intersection(itr, flag, currentx, currenty, this);\n\t\t\t\t//flag = !flag;\t\t\t\t\t\n\t\t\t\tinter.add(newi);\n\t\t\t}\n\t\t}\n\t\tstart = start.next();\n\t}\n\t\n\tfor(i=0; i<inter.size()-1; i++)\n\t{\n\t\tif(KnotPoint.distance(inter.get(i).point, inter.get(i+1).point)<2)\n\t\t{\n\t\t\tinter.remove(i);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn inter;\n}", "path": "src\\org\\knotsgm\\core\\Chain.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "/**\n * Clear the knot to be easely barbage-collected. The knot become unusable. Any function call on the knot will probably cause an error.\n */\n", "func_signal": "public void dispose()", "code": "{\n\tfor(KnotStringBase string : strings) string.dispose();\n\tstrings.clear();\n\tintersections.clear();\n\tdimension = null;\n}", "path": "src\\org\\knotsgm\\core\\KnotBase.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "//public void addKnot(Knot newknot)\n", "func_signal": "public void addKnotFrom(Chain chain)", "code": "{\n\tKnotsGM.debugMessage(\"Nouveau noeud\", 1);\n\t\n\tKnotString string = new KnotString(chain);\n\t\n\tPoint position = string.getBounds().getLocation();\n\tstring.subtract(new org.knotsgm.core.KnotPoint(position));\n\t\n\tKnotGraphic knot_graphic = new KnotGraphic(string);\n\t//TODO cleanup margins stuff\n\tposition.x -= 20;\n\tposition.y -= 20;\n\tknot_graphic.setLocation(position);\n\t\n\tknots.add(knot_graphic);\n\tadd(knot_graphic);\n\tknot_graphic.addRepaintEventListener(this);\n\tsetComponentZOrder(knot_graphic, 0);\n\tcurrent_knot = knot_graphic;\n\t\n\t//validate();\n\trepaint();\n}", "path": "src\\org\\knotsgm\\ui\\swing\\KnotManager.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "/**\n * Remove a string from the knot. This will have no effect if the string doesn't belong to the knot \n * or if it's the last string of the knot.\n * @param string The string to remove\n * @return The difference between the previous knot top-left position and the new knot ones.\n */\n", "func_signal": "public Point removeString(KnotStringBase string)", "code": "{\n\tif(!strings.contains(string)) return new Point();\n\t\n\tstrings.remove(string);\n\tintersections.removeAll(string.intersections);\n\t\n\tfor (Intersection inter : string.others_intersections)\n\t\t((KnotStringBase)inter.getOtherChain(string)).removeIntersection(inter);\n\t\n\t/*for (KnotStringBase cstring : strings)\n\t{\n\t\t\n\t\tcstring.others_intersections.removeAll(string.others_intersections);\n\t\tcstring.updateIntersections();\n\t}*/\n\t\n\tstring.dispose();\n\t\n\treturn normalise();\n}", "path": "src\\org\\knotsgm\\core\\KnotBase.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "/**\n * Compute intersections with another string and add them to both strings.\n * @param string the other string\n * @return An list of detected intersections\n */\n", "func_signal": "public Vector<Intersection> setIntersections(KnotStringBase string)", "code": "{\n\tif(string == this)\n\t\treturn setIntersections();\n\t\n\tVector<Intersection> newi = Chain.setIntersections(this, string);\n\t\n\tKnotsGM.debugMessage(\"Found \" + newi.size() + \" intersections.\" , 2);\n\t\n\tgetIntersections(newi);\n\tstring.getIntersections(newi);\n\t\n\t\n\t\n\treturn newi;\n}", "path": "src\\org\\knotsgm\\core\\KnotStringBase.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "/**\n * Compute the dimensions of the knot. Performance is o(n) where n is the numbers of points in the knot. \n * @return The dimensions of the knot\n */\n", "func_signal": "public Dimension getDimension()", "code": "{\n\tRectangle dims = new Rectangle(0, 0, -1, -1);\n\tfor(KnotStringBase i : strings)\n\t{\n\t\tdims.add(i.getBounds());\n\t}\n\taddMargins(dims);\n\treturn dims.getSize();\n}", "path": "src\\org\\knotsgm\\core\\KnotBase.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "/**\n * Compute the drawing point of the chain (for bezier curve).\n * @throws Exception If the chain have already been initialised or if the chain is too small.\n */\n", "func_signal": "public void init() throws Exception", "code": "{\n\tif(initset) throw new Exception(\"Trying to init a chain already treated.\");\n\tif(size()<2) throw new Exception(\"Chain too small to init.\");\n\t\n\tKnotPoint lastp = KnotPoint.center(getLast().getPoint(), getFirst().getPoint());\n\tKnotPoint lastd = getFirst().getPoint();\n\tfor(ChainPoint point : this)\n\t{\n\t\tpoint.setDrawingPoint(point.next().getPoint());\n\t\tpoint.setPoint(KnotPoint.center(point.getPoint(), point.next().getPoint()));\n\t}\n\t\n\tgetLast().setDrawingPoint(lastd);\n\tgetLast().setPoint(lastp);\n\t\n\tinitset = true;\n\tinterpolate();\n\tinterpolate();\n\tinterpolate();\n\t//interpolate();\n\t//interpolate();\n\t//interpolate();\n}", "path": "src\\org\\knotsgm\\core\\Chain.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "/**\n * Change the state (closed or open) of the chain by automatically adding or removing a segment at te end of the chain.\n * @param isclosed true for a closed chain and false for an open chain\n */\n", "func_signal": "public void setClosed(boolean isclosed)", "code": "{\n\tif(closed == isclosed || size()==0) return;\n\tclosed = isclosed;\n}", "path": "src\\org\\knotsgm\\core\\Chain.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "/**\n * Create a ChainPoint from double coordinates.\n * @param x The x coordinate of the point.\n * @param y The y coordinate of the point.\n * @param parent The parent chain.\n */\n", "func_signal": "public ChainPoint(double x, double y, Chain parent)", "code": "{\n\t//super(x, y);\n\tparentChain = parent;\n\tpoint = new KnotPoint(x, y);\n}", "path": "src\\org\\knotsgm\\core\\ChainPoint.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "/**\n * Release the object from the memory.\n */\n", "func_signal": "public void dispose()", "code": "{\n\tfor(ChainPoint point : this) point.dispose();\n\tclear();\n}", "path": "src\\org\\knotsgm\\core\\Chain.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tjavax.swing.SwingUtilities.invokeLater(new Runnable()\n\t{\n\t\tpublic void run()\n\t\t{\n\t\t\ttry\n\t\t\t{\t// Set System L&F\n\t\t\t\tUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n\t\t\t} \n\t\t\tcatch (UnsupportedLookAndFeelException e)\n\t\t\t{\n\t\t\t\tthrow new Error(\"UnsupportedLookAndFeelException Error\");\n\t\t\t}\n\t\t\tcatch (ClassNotFoundException e)\n\t\t\t{\n\t\t\t\tthrow new Error(\"ClassNotFoundException Error\");\n\t\t\t}\n\t\t\tcatch (InstantiationException e)\n\t\t\t{\n\t\t\t\tthrow new Error(\"InstantiationException Error\");\n\t\t\t}\n\t\t\tcatch (IllegalAccessException e)\n\t\t\t{\n\t\t\t\tthrow new Error(\"IllegalAccessException Error\");\n\t\t\t}\n\t\t\t\n\t\t\tcreateAndShowGUI();\n\t\t}\n\t});\n}", "path": "src\\org\\knotsgm\\ui\\swing\\KnotsGM.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "/**\n * Return the bounds of the knot, the top-left corner should allways be (0, 0)\n * but can be different in some special situations.\n * @return The bounds of the knot\n * @see #getDimension()\n */\n", "func_signal": "public Rectangle getBounds()", "code": "{\n\tRectangle dims = new Rectangle(0, 0, -1, -1);\n\tfor(KnotStringBase i : strings)\n\t{\n\t\tdims.add(i.getBounds());\n\t}\n\taddMargins(dims);\n\treturn (Rectangle)dims.clone();\n}", "path": "src\\org\\knotsgm\\core\\KnotBase.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "/**\n * Add a string to the knot, compute intersection and normalise the coordinates \n * (make sure that all coordinates are coerents and positive)\n * @param string A string to add to the knot, with coordinates expressed from the top-left corner of the knot\n * @return The difference between the previous knot top-left position and the new knot ones.\n */\n", "func_signal": "public Point addString(KnotStringBase string)", "code": "{\n\tif (strings.indexOf(string) != -1)\n\t\treturn null;\n\t\n\tintersections.addAll(string.setIntersections());\n\t\n\tfor (KnotStringBase cstring : strings)\n\t\tintersections.addAll(cstring.setIntersections(string));\n\t\n\tstrings.add(string);\n\t\n\tfor (KnotStringBase cstring : strings)\n\t\tcstring.updateIntersections();\n\t\n\treturn normalise();\n}", "path": "src\\org\\knotsgm\\core\\KnotBase.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
{"docstring": "/**\n * Generates a random Color with brightness between min and max\n * @param min Minimum brightness of the generated color\n * @param max Maximum brightness of the generated color\n * @return a random Color with brightness between min and max\n */\n", "func_signal": "public static Color randomColor(int min, int max)", "code": "{\n\t//System.out.println(brightness(255, 0, 0));\n\t\n\tif(max > 255) throw new Error(\"Range error for param max in randomColor\");\n\tif(max<=min) throw new Error(\"Bad values for min&max in randomColor\");\n\t\n\tshort red, green, blue;\n\tdouble brightness;\n\t\n\tdo\n\t{\n\t\tred = (short)(Math.random()*255);\n\t\tgreen = (short)(Math.random()*255);\n\t\tblue = (short)(Math.random()*255);\n\t\tbrightness = brightness(red, green, blue);\n\t}\n\twhile((int)brightness > max || (int)brightness < min);\n\t\n\t//System.out.println(new Color(red, green, blue).toString());\n\t//System.out.println((int)brightness + \" : \" + min + \"-\" + max);\n\t\n\treturn new Color(red, green, blue);\n}", "path": "src\\org\\knotsgm\\core\\Style.java", "repo_name": "aberaud/KnotsGM", "stars": 1, "license": "gpl-3.0", "language": "java", "size": 128}
